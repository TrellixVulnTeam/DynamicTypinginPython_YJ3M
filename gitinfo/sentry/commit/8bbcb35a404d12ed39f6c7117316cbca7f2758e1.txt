commit 8bbcb35a404d12ed39f6c7117316cbca7f2758e1
Author: Mark Story <mark@sentry.io>
Date:   Tue Jan 28 16:12:46 2020 -0500

    feat(discover) Add detail button, and remove autolinking (#16648)
    
    Add a fixed column to the result grid that is always present and cannot
    be dragged/resized. This removes the need for all the autolinking logic.
    
    To make table interactions more consistent, the click to filter actions
    have also been removed. Users will need to use the search bar or facets
    to do filtering going forward.

diff --git a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
index 34daf17d96..4cc84f0250 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
@@ -17,7 +17,6 @@ export type GridHeadCellProps<Column> = {
   isLast: boolean;
 
   isEditing: boolean;
-  isPrimary: boolean;
 
   indexColumnOrder: number;
   column: Column;
@@ -50,7 +49,6 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
 > {
   static defaultProps = {
     isEditing: false,
-    isPrimary: false,
   };
 
   state = {
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index d0275229e6..72b580172c 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -17,8 +17,6 @@ import {
   GridColumnSortBy,
   ObjectKey,
 } from './types';
-import GridHeadCell from './gridHeadCell';
-import GridModalEditColumn from './gridModalEditColumn';
 import {
   Header,
   HeaderTitle,
@@ -28,12 +26,16 @@ import {
   Grid,
   GridRow,
   GridHead,
+  GridHeadCellStatic,
   GridBody,
   GridBodyCell,
   GridBodyCellStatus,
   GridStatusErrorAlert,
   GridResizer,
 } from './styles';
+import GridHeadCell from './gridHeadCell';
+import GridModalEditColumn from './gridModalEditColumn';
+
 import {
   COL_WIDTH_UNDEFINED,
   COL_WIDTH_MIN,
@@ -94,6 +96,12 @@ type GridEditableProps<DataRow, ColumnKey> = {
       columnIndex: number,
       nextColumn: GridColumnOrder<ColumnKey>
     ) => void;
+    renderPrependColumns?: (
+      isHeader: boolean,
+      dataRow?: any,
+      rowIndex?: number
+    ) => React.ReactNode[];
+    prependColumnWidths?: string[];
   };
 
   /**
@@ -319,20 +327,24 @@ class GridEditable<
       return;
     }
 
-    let sumWidth = 0;
-    const columnWidths = columnOrder.map((c, i) => {
-      let width =
-        i === columnIndex // Case 1: Resize, then draw a specific column
-          ? columnWidth
-          : !c.width || isNaN(c.width) // Case 2: Draw a column with no width
-          ? COL_WIDTH_DEFAULT
-          : c.width; // Case 3: Draw a column with width
+    const prependColumns = this.props.grid.prependColumnWidths || [];
+    let sumWidth = prependColumns.reduce((acc, item) => acc + parseInt(item, 10), 0);
 
-      width = Math.max(COL_WIDTH_MIN, width);
-      sumWidth += width;
+    const columnWidths = prependColumns.concat(
+      columnOrder.map((c, i) => {
+        let width =
+          i === columnIndex // Case 1: Resize, then draw a specific column
+            ? columnWidth
+            : !c.width || isNaN(c.width) // Case 2: Draw a column with no width
+            ? COL_WIDTH_DEFAULT
+            : c.width; // Case 3: Draw a column with width
 
-      return `${width}px`;
-    });
+        width = Math.max(COL_WIDTH_MIN, width);
+        sumWidth += width;
+
+        return `${width}px`;
+      })
+    );
 
     // If columns are smaller than grid, let the last column fill the remaining
     // blank space on the right of the grid
@@ -434,8 +446,15 @@ class GridEditable<
     const numColumn = columnOrder.length;
     const enableEdit = isEditing && numColumn > 1;
 
+    const prependColumns = grid.renderPrependColumns
+      ? grid.renderPrependColumns(true)
+      : [];
     return (
       <GridRow>
+        {prependColumns &&
+          prependColumns.map((item, i) => {
+            return <GridHeadCellStatic key={`prepend-${i}`}>{item}</GridHeadCellStatic>;
+          })}
         {/* Note that this.onResizeMouseDown assumes GridResizer is nested
             2 levels under GridHeadCell */
         columnOrder.map((column, i) => (
@@ -444,7 +463,6 @@ class GridEditable<
             isLast={columnOrder.length - 1 === i}
             key={`${i}.${column.key}`}
             isColumnDragging={this.props.isColumnDragging}
-            isPrimary={column.isPrimary}
             isEditing={enableEdit}
             indexColumnOrder={i}
             column={column}
@@ -489,9 +507,16 @@ class GridEditable<
 
   renderGridBodyRow = (dataRow: DataRow, row: number) => {
     const {columnOrder, grid} = this.props;
+    const prependColumns = grid.renderPrependColumns
+      ? grid.renderPrependColumns(false, dataRow, row)
+      : [];
 
     return (
       <GridRow key={row}>
+        {prependColumns &&
+          prependColumns.map((item, i) => {
+            return <GridBodyCell key={`prepend-${i}`}>{item}</GridBodyCell>;
+          })}
         {columnOrder.map((col, i) => (
           <GridBodyCell key={`${col.key}${i}`}>
             {grid.renderBodyCell ? grid.renderBodyCell(col, dataRow) : dataRow[col.key]}
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index bd26979143..3c87175751 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -26,7 +26,6 @@ type GridEditableProps = {
   numColumn?: number;
   isEditable?: boolean;
   isEditing?: boolean;
-  isPrimary?: boolean;
   isDragging?: boolean;
 };
 
@@ -197,6 +196,31 @@ export const GridHeadCellButton = styled('div')<GridEditableProps>`
   }
 `;
 
+/**
+ * Create spacing/padding similar to GridHeadCellWrapper but
+ * without interactive aspects.
+ */
+export const GridHeadCellStatic = styled('th')`
+  height: ${GRID_HEAD_ROW_HEIGHT}px;
+  min-width: 24px;
+  display: block;
+  padding: ${space(2)};
+  background-color: ${p => p.theme.offWhite};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+
+  font-size: 13px;
+  font-weight: 600;
+  line-height: 1;
+  text-transform: uppercase;
+  white-space: nowrap;
+  text-overflow: ellipsis;
+  overflow: hidden;
+
+  &:first-child {
+    border-top-left-radius: ${p => p.theme.borderRadius};
+  }
+`;
+
 /**
  * GridHeadCellButtonHover is the collection of interactive elements to add or
  * move the columns. They are expected to be draggable.
diff --git a/src/sentry/static/sentry/app/components/gridEditable/types.tsx b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
index e55adc4fdd..f79af613ba 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/types.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/types.tsx
@@ -15,7 +15,6 @@ export type GridColumn<K = ObjectKey> = {
 export type GridColumnHeader<K = ObjectKey> = GridColumn<K> & {
   name: string;
   isDragging: boolean;
-  isPrimary?: boolean;
 };
 
 export type GridColumnOrder<K = ObjectKey> = GridColumnHeader<K>;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/data.tsx b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
index ec97108ca9..6f1a762590 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/data.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/data.tsx
@@ -1,22 +1,17 @@
 import React from 'react';
-import styled from '@emotion/styled';
 import {Location} from 'history';
 
 import {t} from 'app/locale';
 import Count from 'app/components/count';
-import DateTime from 'app/components/dateTime';
-import Link from 'app/components/links/link';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
 import UserBadge from 'app/components/idBadge/userBadge';
 import getDynamicText from 'app/utils/getDynamicText';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
 import pinIcon from 'app/../images/graph/icon-location-filled.svg';
 import {Organization, NewQuery} from 'app/types';
 import Duration from 'app/components/duration';
 import floatFormat from 'app/utils/floatFormat';
 
-import {QueryLink} from './styles';
-import {generateEventDetailsRoute, generateEventSlug} from './eventDetails/utils';
+import {Container, NumberContainer, OverflowLink, StyledDateTime} from './styles';
 
 export const PIN_ICON = `image://${pinIcon}`;
 export const AGGREGATE_ALIASES = [
@@ -155,16 +150,9 @@ const emptyValue = <span>{t('n/a')}</span>;
 export const FIELD_FORMATTERS: FieldFormatters = {
   boolean: {
     sortField: true,
-    renderFunc: (field, data, {location}) => {
-      const target = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          query: `${field}:${data[field]}`,
-        },
-      };
+    renderFunc: (field, data) => {
       const value = data[field] ? t('yes') : t('no');
-      return <QueryLink to={target}>{value}</QueryLink>;
+      return <Container>{value}</Container>;
     },
   },
   integer: {
@@ -198,17 +186,10 @@ export const FIELD_FORMATTERS: FieldFormatters = {
   },
   string: {
     sortField: true,
-    renderFunc: (field, data, {location}) => {
-      const target = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          query: `${field}:${data[field]}`,
-        },
-      };
+    renderFunc: (field, data) => {
       // Some fields have long arrays in them, only show the tail of the data.
       const value = Array.isArray(data[field]) ? data[field].slice(-1) : data[field];
-      return <QueryLink to={target}>{value}</QueryLink>;
+      return <Container>{value}</Container>;
     },
   },
   duration: {
@@ -225,74 +206,6 @@ export const FIELD_FORMATTERS: FieldFormatters = {
   },
 };
 
-const eventLink = (
-  location: Location,
-  organization: Organization,
-  data: EventData,
-  content: string | React.ReactNode
-): React.ReactNode => {
-  const eventSlug = generateEventSlug(data);
-  const pathname = generateEventDetailsRoute({
-    orgSlug: organization.slug,
-    eventSlug,
-  });
-
-  const target = {
-    pathname,
-    query: {
-      ...location.query,
-    },
-  };
-  return <OverflowLink to={target}>{content}</OverflowLink>;
-};
-
-type LinkFormatter = (
-  field: string,
-  data: EventData,
-  baggage: RenderFunctionBaggage
-) => React.ReactNode;
-
-type LinkFormatters = {
-  integer: LinkFormatter;
-  number: LinkFormatter;
-  date: LinkFormatter;
-  string: LinkFormatter;
-};
-
-export const LINK_FORMATTERS: LinkFormatters = {
-  string: (field, data, {location, organization}) => {
-    return <Container>{eventLink(location, organization, data, data[field])}</Container>;
-  },
-  number: (field, data, {location, organization}) => {
-    return (
-      <NumberContainer>
-        {typeof data[field] === 'number'
-          ? eventLink(location, organization, data, <Count value={data[field]} />)
-          : emptyValue}
-      </NumberContainer>
-    );
-  },
-  integer: (field, data, {location, organization}) => {
-    return (
-      <NumberContainer>
-        {typeof data[field] === 'number'
-          ? eventLink(location, organization, data, <Count value={data[field]} />)
-          : emptyValue}
-      </NumberContainer>
-    );
-  },
-  date: (field, data, {location, organization}) => {
-    let content = emptyValue;
-    if (data[field]) {
-      content = getDynamicText({
-        value: <StyledDateTime date={data[field]} />,
-        fixed: <span>timestamp</span>,
-      });
-    }
-    return <Container>{eventLink(location, organization, data, content)}</Container>;
-  },
-};
-
 type SpecialFieldRenderFunc = (
   data: EventData,
   baggage: RenderFunctionBaggage
@@ -304,9 +217,6 @@ type SpecialField = {
 };
 
 type SpecialFields = {
-  transaction: SpecialField;
-  title: SpecialField;
-  'event.type': SpecialField;
   project: SpecialField;
   user: SpecialField;
   last_seen: SpecialField;
@@ -332,64 +242,6 @@ export const SPECIAL_FIELDS: SpecialFields = {
       );
     },
   },
-  transaction: {
-    sortField: 'transaction',
-    renderFunc: (data, {location, organization}) => {
-      const eventSlug = generateEventSlug(data);
-      const pathname = generateEventDetailsRoute({
-        orgSlug: organization.slug,
-        eventSlug,
-      });
-
-      const target = {
-        pathname,
-        query: {...location.query},
-      };
-      return (
-        <Container>
-          <OverflowLink to={target} aria-label={data.transaction}>
-            {data.transaction}
-          </OverflowLink>
-        </Container>
-      );
-    },
-  },
-  title: {
-    sortField: 'title',
-    renderFunc: (data, {location, organization}) => {
-      const eventSlug = generateEventSlug(data);
-      const pathname = generateEventDetailsRoute({
-        orgSlug: organization.slug,
-        eventSlug,
-      });
-
-      const target = {
-        pathname,
-        query: {...location.query},
-      };
-      return (
-        <Container>
-          <OverflowLink to={target} aria-label={data.title}>
-            {data.title}
-          </OverflowLink>
-        </Container>
-      );
-    },
-  },
-  'event.type': {
-    sortField: 'event.type',
-    renderFunc: (data, {location}) => {
-      const target = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          query: `event.type:${data['event.type']}`,
-        },
-      };
-
-      return <QueryLink to={target}>{data['event.type']}</QueryLink>;
-    },
-  },
   project: {
     sortField: null,
     renderFunc: (data, {organization}) => {
@@ -407,7 +259,7 @@ export const SPECIAL_FIELDS: SpecialFields = {
   },
   user: {
     sortField: 'user.id',
-    renderFunc: (data, {location}) => {
+    renderFunc: data => {
       const userObj = {
         id: data['user.id'],
         name: data['user.name'],
@@ -418,19 +270,7 @@ export const SPECIAL_FIELDS: SpecialFields = {
 
       const badge = <UserBadge user={userObj} hideEmail avatarSize={16} />;
 
-      if (!data.user) {
-        return <Container>{badge}</Container>;
-      }
-
-      const target = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          query: `user:${data.user}`,
-        },
-      };
-
-      return <QueryLink to={target}>{badge}</QueryLink>;
+      return <Container>{badge}</Container>;
     },
   },
   last_seen: {
@@ -449,26 +289,3 @@ export const SPECIAL_FIELDS: SpecialFields = {
     },
   },
 };
-
-/**
- * List of fields that have links auto-generated
- */
-export const AUTOLINK_FIELDS: string[] = ['transaction', 'title'];
-
-const Container = styled('div')`
-  ${overflowEllipsis};
-`;
-
-const NumberContainer = styled('div')`
-  text-align: right;
-  ${overflowEllipsis};
-`;
-
-const StyledDateTime = styled(DateTime)`
-  color: ${p => p.theme.gray2};
-  ${overflowEllipsis};
-`;
-
-const OverflowLink = styled(Link)`
-  ${overflowEllipsis};
-`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
index 955024651a..ab36d7f4ba 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventView.tsx
@@ -11,7 +11,7 @@ import {SavedQuery, NewQuery} from 'app/types';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 
-import {AUTOLINK_FIELDS, SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
+import {SPECIAL_FIELDS, FIELD_FORMATTERS} from './data';
 import {
   MetaType,
   EventQuery,
@@ -546,15 +546,6 @@ class EventView {
     return this.fields.filter(field => isAggregateField(field.field));
   }
 
-  /**
-   * Check if the field set contains no automatically linked fields
-   */
-  hasAutolinkField(): boolean {
-    return this.fields.some(field => {
-      return AUTOLINK_FIELDS.includes(field.field);
-    });
-  }
-
   numOfColumns(): number {
     return this.fields.length;
   }
diff --git a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
index 93d4aa8a6a..8620a71402 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/styles.tsx
@@ -1,14 +1,30 @@
 import styled from '@emotion/styled';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
+
+import DateTime from 'app/components/dateTime';
 import Link from 'app/components/links/link';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 
-export const QueryLink = styled(Link)`
-  ${overflowEllipsis};
-`;
-
 export const SectionHeading = styled('h4')`
   color: ${p => p.theme.gray3};
   font-size: ${p => p.theme.fontSizeMedium};
   margin: ${space(1)} 0;
 `;
+
+export const Container = styled('div')`
+  ${overflowEllipsis};
+`;
+
+export const NumberContainer = styled('div')`
+  text-align: right;
+  ${overflowEllipsis};
+`;
+
+export const StyledDateTime = styled(DateTime)`
+  color: ${p => p.theme.gray2};
+  ${overflowEllipsis};
+`;
+
+export const OverflowLink = styled(Link)`
+  ${overflowEllipsis};
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index 767f49b527..a9a9b58138 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -6,7 +6,9 @@ import {trackAnalyticsEvent} from 'app/utils/analytics';
 import GridEditable, {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
 import {t} from 'app/locale';
 import {assert} from 'app/types/utils';
+import InlineSvg from 'app/components/inlineSvg';
 import Link from 'app/components/links/link';
+import Tooltip from 'app/components/tooltip';
 
 import {
   downloadAsCsv,
@@ -25,6 +27,7 @@ import {ColumnValueType} from '../eventQueryParams';
 import DraggableColumns, {
   DRAGGABLE_COLUMN_CLASSNAME_IDENTIFIER,
 } from './draggableColumns';
+import {generateEventDetailsRoute, generateEventSlug} from '../eventDetails/utils';
 
 export type TableViewProps = {
   location: Location;
@@ -211,6 +214,34 @@ class TableView extends React.Component<TableViewProps> {
     });
   };
 
+  _renderPrependColumns = (
+    isHeader: boolean,
+    dataRow?: any,
+    rowIndex?: number
+  ): React.ReactNode[] => {
+    if (isHeader) {
+      return [<InlineSvg key="header-icon" src="icon-stack" size="14px" />];
+    }
+    const {organization, location} = this.props;
+    const eventSlug = generateEventSlug(dataRow);
+    const pathname = generateEventDetailsRoute({
+      orgSlug: organization.slug,
+      eventSlug,
+    });
+    const target = {
+      pathname,
+      query: {...location.query},
+    };
+
+    return [
+      <Tooltip key={`eventlink${rowIndex}`} title={t('View Details')}>
+        <Link to={target} data-test-id="view-events">
+          <InlineSvg src="icon-stack" size="14px" />
+        </Link>
+      </Tooltip>,
+    ];
+  };
+
   _renderGridHeaderCell = (column: TableColumn<keyof TableDataRow>): React.ReactNode => {
     const {eventView, location, tableData} = this.props;
     const field = column.eventViewField;
@@ -269,23 +300,11 @@ class TableView extends React.Component<TableViewProps> {
           assert(tableData.meta);
 
           if (!willExpand) {
-            const hasLinkField = eventView.hasAutolinkField();
-            const forceLink =
-              !hasLinkField && eventView.getFields().indexOf(String(column.field)) === 0;
-
-            const fieldRenderer = getFieldRenderer(
-              String(column.key),
-              tableData.meta,
-              forceLink
-            );
+            const fieldRenderer = getFieldRenderer(String(column.key), tableData.meta);
             return fieldRenderer(dataRow, {organization, location});
           }
 
-          const fieldRenderer = getFieldRenderer(
-            String(column.key),
-            tableData.meta,
-            false
-          );
+          const fieldRenderer = getFieldRenderer(String(column.key), tableData.meta);
           return fieldRenderer(dataRow, {organization, location});
         }}
       </ExpandAggregateRow>
@@ -417,6 +436,8 @@ class TableView extends React.Component<TableViewProps> {
                 renderHeadCell: this._renderGridHeaderCell as any,
                 renderBodyCell: this._renderGridBodyCell as any,
                 onResizeColumn: this._updateColumn as any,
+                renderPrependColumns: this._renderPrependColumns as any,
+                prependColumnWidths: ['50px'],
               }}
               modalEditColumn={{
                 renderBodyWithForm: renderModalBodyWithForm as any,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 059e8d58f5..5b91d6aeb4 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -26,7 +26,6 @@ import {
 import {
   AGGREGATE_ALIASES,
   SPECIAL_FIELDS,
-  LINK_FORMATTERS,
   FIELD_FORMATTERS,
   FieldTypes,
   FieldFormatterRenderFunctionPartial,
@@ -196,13 +195,11 @@ export function getDefaultWidth(key: Aggregation | Field): number {
  *
  * @param {String} field name
  * @param {object} metadata mapping.
- * @param {boolean} Whether or not to coerce a field into a link.
  * @returns {Function}
  */
 export function getFieldRenderer(
   field: string,
-  meta: MetaType,
-  forceLink: boolean
+  meta: MetaType
 ): FieldFormatterRenderFunctionPartial {
   if (SPECIAL_FIELDS.hasOwnProperty(field)) {
     return SPECIAL_FIELDS[field].renderFunc;
@@ -210,12 +207,6 @@ export function getFieldRenderer(
   const fieldName = getAggregateAlias(field);
   const fieldType = meta[fieldName];
 
-  // If the current field is being coerced to a link
-  // use a different formatter set based on the type.
-  if (forceLink && LINK_FORMATTERS.hasOwnProperty(fieldType)) {
-    return partial(LINK_FORMATTERS[fieldType], fieldName);
-  }
-
   if (FIELD_FORMATTERS.hasOwnProperty(fieldType)) {
     return partial(FIELD_FORMATTERS[fieldType].renderFunc, fieldName);
   }
@@ -253,7 +244,6 @@ const TEMPLATE_TABLE_COLUMN: TableColumn<React.ReactText> = {
   type: 'never',
   isDragging: false,
   isSortable: false,
-  isPrimary: false,
 
   eventViewField: Object.freeze({field: '', width: COL_WIDTH_DEFAULT}),
 };
@@ -288,7 +278,6 @@ export function decodeColumnOrder(
     column.isSortable = AGGREGATIONS[column.aggregation]
       ? AGGREGATIONS[column.aggregation].isSortable
       : false;
-    column.isPrimary = column.field === 'title';
     column.eventViewField = f;
 
     return column;
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 98fff7f43d..f066e65149 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -303,9 +303,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
                 "fingerprint": ["group-1"],
             }
         )
-        event = self.store_event(
-            data=event_data, project_id=self.project.id, assert_no_errors=False
-        )
+        self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=False)
 
         with self.feature(FEATURE_NAMES):
             # Get the list page.
@@ -313,7 +311,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.wait_until_loaded()
 
             # Click the event link to open the events detail view
-            self.browser.element('[aria-label="{}"]'.format(event.title)).click()
+            self.browser.element('[data-test-id="view-events"]').click()
             self.wait_until_loaded()
 
             header = self.browser.element('[data-test-id="event-header"] span')
@@ -347,7 +345,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.wait_until_loaded()
 
             # Click the event link to open the event detail view
-            self.browser.element('[aria-label="{}"]'.format(event.title)).click()
+            self.browser.element('[data-test-id="view-events"]').click()
             self.wait_until_loaded()
 
             self.browser.snapshot("events-v2 - grouped error event detail view")
@@ -366,7 +364,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
 
         event_data = generate_transaction()
 
-        event = self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=True)
+        self.store_event(data=event_data, project_id=self.project.id, assert_no_errors=True)
 
         with self.feature(FEATURE_NAMES):
             # Get the list page
@@ -374,7 +372,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
             self.wait_until_loaded()
 
             # Click the event link to open the event detail view
-            self.browser.element('[aria-label="{}"]'.format(event.title)).click()
+            self.browser.element('[data-test-id="view-events"]').click()
             self.wait_until_loaded()
 
             self.browser.snapshot("events-v2 - transactions event detail view")
diff --git a/tests/js/spec/views/eventsV2/eventView.spec.jsx b/tests/js/spec/views/eventsV2/eventView.spec.jsx
index 600e837fe2..120306843b 100644
--- a/tests/js/spec/views/eventsV2/eventView.spec.jsx
+++ b/tests/js/spec/views/eventsV2/eventView.spec.jsx
@@ -2,7 +2,6 @@ import EventView, {
   isAPIPayloadSimilar,
   pickRelevantLocationQueryStrings,
 } from 'app/views/eventsV2/eventView';
-import {AUTOLINK_FIELDS} from 'app/views/eventsV2/data';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
 
 const generateFields = fields => {
@@ -1015,30 +1014,6 @@ describe('EventView.getFields()', function() {
   });
 });
 
-describe('EventView.hasAutolinkField()', function() {
-  it('returns false when none of the fields are auto-linkable', function() {
-    const eventView = new EventView({
-      fields: [{field: 'count()'}, {field: 'project.id'}],
-      sorts: [],
-      project: [],
-    });
-
-    expect(eventView.hasAutolinkField()).toEqual(false);
-  });
-
-  it('returns true when any of the fields are auto-linkable', function() {
-    for (const field of AUTOLINK_FIELDS) {
-      const eventView = new EventView({
-        fields: generateFields([field]),
-        sorts: [],
-        project: [],
-      });
-
-      expect(eventView.hasAutolinkField()).toEqual(true);
-    }
-  });
-});
-
 describe('EventView.numOfColumns()', function() {
   it('returns correct number of columns', function() {
     // has columns
@@ -1187,6 +1162,7 @@ describe('EventView.withUpdatedColumn()', function() {
 
   const meta = {
     count: 'integer',
+    title: 'string',
   };
 
   it('update a column with no changes', function() {
@@ -1425,6 +1401,7 @@ describe('EventView.withDeletedColumn()', function() {
 
   const meta = {
     count: 'integer',
+    title: 'string',
   };
 
   it('returns itself when attempting to delete the last remaining column', function() {
@@ -1681,7 +1658,7 @@ describe('EventView.sortOnField()', function() {
     environment: ['staging'],
   };
 
-  const meta = {count: 'integer'};
+  const meta = {count: 'integer', title: 'string'};
 
   it('returns itself when attempting to sort on un-sortable field', function() {
     const eventView = new EventView(state);
@@ -1865,6 +1842,7 @@ describe('isAPIPayloadSimilar', function() {
 
   const meta = {
     count: 'integer',
+    title: 'string',
   };
 
   describe('getEventsAPIPayload', function() {
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 3040ff767e..5153cc852f 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -4,12 +4,12 @@ import {browserHistory} from 'react-router';
 import {initializeOrg} from 'sentry-test/initializeOrg';
 import EventView from 'app/views/eventsV2/eventView';
 import {
-  getFieldRenderer,
   getAggregateAlias,
   isAggregateField,
   decodeColumnOrder,
   pushEventViewToLocation,
   getExpandedResults,
+  getFieldRenderer,
   getDiscoverLandingUrl,
 } from 'app/views/eventsV2/utils';
 import {COL_WIDTH_UNDEFINED, COL_WIDTH_NUMBER} from 'app/components/gridEditable';
@@ -61,25 +61,16 @@ describe('getFieldRenderer', function() {
     const renderer = getFieldRenderer('url', {url: 'string'});
     expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
-    const link = wrapper.find('QueryLink');
-    expect(link).toHaveLength(1);
-    expect(link.props().to).toEqual({
-      pathname: location.pathname,
-      query: {query: 'url:/example'},
-    });
-    expect(link.text()).toEqual(data.url);
+    const text = wrapper.find('Container');
+    expect(text.text()).toEqual(data.url);
   });
 
   it('can render boolean fields', function() {
     const renderer = getFieldRenderer('boolValue', {boolValue: 'boolean'});
     expect(renderer).toBeInstanceOf(Function);
     const wrapper = mount(renderer(data, {location, organization}));
-    const link = wrapper.find('QueryLink');
-    expect(link).toHaveLength(1);
-    expect(link.props().to).toEqual({
-      pathname: location.pathname,
-      query: {query: 'boolValue:1'},
-    });
+    const text = wrapper.find('Container');
+    expect(text.text()).toEqual('yes');
   });
 
   it('can render integer fields', function() {
@@ -112,34 +103,6 @@ describe('getFieldRenderer', function() {
     expect(wrapper.text()).toEqual('n/a');
   });
 
-  it('can render transaction as a link', function() {
-    const renderer = getFieldRenderer('transaction', {transaction: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-
-    const value = wrapper.find('OverflowLink');
-    expect(value).toHaveLength(1);
-    expect(value.props().to).toEqual({
-      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
-      query: {},
-    });
-    expect(value.text()).toEqual(data.transaction);
-  });
-
-  it('can render title as a link', function() {
-    const renderer = getFieldRenderer('title', {title: 'string'});
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(renderer(data, {location, organization}));
-
-    const value = wrapper.find('OverflowLink');
-    expect(value).toHaveLength(1);
-    expect(value.props().to).toEqual({
-      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
-      query: {},
-    });
-    expect(value.text()).toEqual(data.title);
-  });
-
   it('can render project as an avatar', function() {
     const renderer = getFieldRenderer('project', {'project.name': 'string'});
     expect(renderer).toBeInstanceOf(Function);
@@ -152,57 +115,6 @@ describe('getFieldRenderer', function() {
     expect(value).toHaveLength(1);
     expect(value.props().project).toEqual(project);
   });
-
-  it('can coerce string field to a link', function() {
-    const renderer = getFieldRenderer('url', {url: 'string'}, true);
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(
-      renderer(data, {location, organization}),
-      context.routerContext
-    );
-
-    // No basic link should be present.
-    expect(wrapper.find('QueryLink')).toHaveLength(0);
-
-    const link = wrapper.find('OverflowLink');
-    expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
-      query: {},
-    });
-    expect(link.text()).toEqual('/example');
-  });
-
-  it('can coerce number field to a link', function() {
-    const renderer = getFieldRenderer('numeric', {numeric: 'number'}, true);
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(
-      renderer(data, {location, organization}),
-      context.routerContext
-    );
-
-    const link = wrapper.find('OverflowLink');
-    expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
-      query: {},
-    });
-    expect(link.find('Count').props().value).toEqual(data.numeric);
-  });
-
-  it('can coerce date field to a link', function() {
-    const renderer = getFieldRenderer('createdAt', {createdAt: 'date'}, true);
-    expect(renderer).toBeInstanceOf(Function);
-    const wrapper = mount(
-      renderer(data, {location, organization}),
-      context.routerContext
-    );
-
-    const link = wrapper.find('OverflowLink');
-    expect(link.props().to).toEqual({
-      pathname: `/organizations/org-slug/discover/${project.slug}:deadbeef/`,
-      query: {},
-    });
-    expect(link.find('StyledDateTime').props().date).toEqual(data.createdAt);
-  });
 });
 
 describe('decodeColumnOrder', function() {
@@ -229,7 +141,6 @@ describe('decodeColumnOrder', function() {
         width: 123,
       },
       isDragging: false,
-      isPrimary: true,
       isSortable: false,
       type: 'string',
     });
@@ -251,7 +162,6 @@ describe('decodeColumnOrder', function() {
         width: 123,
       },
       isDragging: false,
-      isPrimary: false,
       isSortable: true,
       type: 'number',
     });
@@ -270,7 +180,6 @@ describe('decodeColumnOrder', function() {
       width: COL_WIDTH_NUMBER,
       eventViewField: {field: 'avg(transaction.duration)'},
       isDragging: false,
-      isPrimary: false,
       isSortable: true,
       type: 'number',
     });
