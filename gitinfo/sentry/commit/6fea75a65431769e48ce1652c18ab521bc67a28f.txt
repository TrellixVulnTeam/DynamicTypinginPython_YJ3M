commit 6fea75a65431769e48ce1652c18ab521bc67a28f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jun 20 09:48:50 2018 -0700

    feat(ui): Change <Select2TextField> to use react-select (#8731)

diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index b505420487..4c63126cbf 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -10,7 +10,7 @@ import PasswordField from 'app/components/forms/passwordField';
 import RangeField from 'app/components/forms/rangeField';
 import Select2FieldAutocomplete from 'app/components/forms/select2FieldAutocomplete';
 import Select2Field from 'app/components/forms/select2Field';
-import Select2TextField from 'app/components/forms/select2TextField';
+import SelectCreatableField from 'app/components/forms/selectCreatableField';
 import TextField from 'app/components/forms/textField';
 import TextareaField from 'app/components/forms/textareaField';
 
@@ -61,7 +61,7 @@ export default class GenericField extends React.Component {
       case 'string':
       case 'text':
       case 'url':
-        if (props.choices) return <Select2TextField {...props} />;
+        if (props.choices) return <SelectCreatableField {...props} />;
         return <TextField {...props} />;
       case 'number':
         return <NumberField {...props} />;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index fc9c2189c4..23a36308f2 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -12,7 +12,7 @@ export {default as RadioBooleanField} from './radioBooleanField';
 export {default as RangeField} from './rangeField';
 export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
 export {default as Select2Field} from './select2Field';
-export {default as Select2TextField} from './select2TextField';
+export {default as SelectCreatableField} from './selectCreatableField';
 export {default as TextField} from './textField';
 export {default as TextareaField} from './textareaField';
 export {default as SelectField} from './selectField';
diff --git a/src/sentry/static/sentry/app/components/forms/select2TextField.jsx b/src/sentry/static/sentry/app/components/forms/select2TextField.jsx
deleted file mode 100644
index c555be37f4..0000000000
--- a/src/sentry/static/sentry/app/components/forms/select2TextField.jsx
+++ /dev/null
@@ -1,38 +0,0 @@
-import React from 'react';
-
-import Select2Field from 'app/components/forms/select2Field';
-
-export default class Select2TextField extends Select2Field {
-  getField() {
-    return (
-      <input
-        id={this.getId()}
-        className="form-control"
-        ref="input"
-        placeholder={this.props.placeholder}
-        onChange={this.onChange.bind(this)}
-        disabled={this.props.disabled}
-        required={this.props.required}
-        value={this.state.value}
-      />
-    );
-  }
-
-  getSelect2Options() {
-    return {
-      ...super.getSelect2Options(),
-      data: (this.props.choices || []).map(choice => {
-        if (Array.isArray(choice)) {
-          return {id: choice[0], text: choice[1]};
-        }
-        return {id: choice, text: choice};
-      }),
-      createSearchChoice: (term, data) => {
-        if (!data.find(i => i.id !== term)) {
-          return {id: term, text: term};
-        }
-        return undefined;
-      },
-    };
-  }
-}
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index f836bd6c7d..e8b89f792f 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -1,14 +1,19 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import ReactSelect, {Async} from 'react-select';
+import ReactSelect, {Async, Creatable, AsyncCreatable} from 'react-select';
 import styled from 'react-emotion';
 
 import convertFromSelect2Choices from 'app/utils/convertFromSelect2Choices';
 
 export default class SelectControl extends React.Component {
   static propTypes = {
-    async: PropTypes.bool,
-    options: PropTypes.array,
+    ...ReactSelect.propTypes,
+    options: PropTypes.arrayOf(
+      PropTypes.shape({
+        label: PropTypes.node,
+        value: PropTypes.any,
+      })
+    ),
     choices: PropTypes.oneOfType([
       PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.array])),
       PropTypes.func,
@@ -20,7 +25,7 @@ export default class SelectControl extends React.Component {
   };
 
   render() {
-    let {async, options, choices, ...props} = this.props;
+    let {async, creatable, options, choices, ...props} = this.props;
 
     // Compatibility with old select2 API
     let choicesOrOptions =
@@ -32,6 +37,7 @@ export default class SelectControl extends React.Component {
       <StyledSelect
         arrowRenderer={this.renderArrow}
         async={async}
+        creatable={creatable}
         {...props}
         options={choicesOrOptions}
       />
@@ -45,16 +51,26 @@ export default class SelectControl extends React.Component {
 class SelectPicker extends React.Component {
   static propTypes = {
     async: PropTypes.bool,
+    creatable: PropTypes.bool,
+    forwardedRef: PropTypes.any,
   };
 
   render() {
-    let {async, ...props} = this.props;
+    let {async, creatable, forwardedRef, ...props} = this.props;
 
-    if (async) {
-      return <Async {...props} />;
+    // Pick the right component to use
+    let Component;
+    if (async && creatable) {
+      Component = AsyncCreatable;
+    } else if (async && !creatable) {
+      Component = Async;
+    } else if (creatable) {
+      Component = Creatable;
+    } else {
+      Component = ReactSelect;
     }
 
-    return <ReactSelect {...props} />;
+    return <Component ref={forwardedRef} {...props} />;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
new file mode 100644
index 0000000000..1582b71628
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/selectCreatableField.jsx
@@ -0,0 +1,94 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {defined} from 'app/utils';
+import FormField from 'app/components/forms/formField';
+import SelectControl from 'app/components/forms/selectControl';
+import convertFromSelect2Choices from 'app/utils/convertFromSelect2Choices';
+
+/**
+ * This is a <SelectField> that allows the user to create new options if one does't exist.
+ *
+ * This is used in some integrations
+ */
+export default class SelectCreatableField extends FormField {
+  static propTypes = {
+    ...FormField.propTypes,
+    options: SelectControl.propTypes.options,
+    clearable: SelectControl.propTypes.clearable,
+    choices: SelectControl.propTypes.choices,
+    onChange: PropTypes.func,
+    creatable: PropTypes.bool,
+  };
+
+  constructor(props) {
+    super(props);
+
+    // We only want to parse options once because react-select relies
+    // on `options` mutation when you create a new option
+    //
+    // Otherwise you will not get the created option in the dropdown menu
+    this.options = this.getOptions(props);
+  }
+
+  componentWillReceiveProps(nextProps, nextContext) {
+    // super.componentWillReceiveProps(nextProps, nextContext);
+    let newError = this.getError(nextProps, nextContext);
+    if (newError != this.state.error) {
+      this.setState({error: newError});
+    }
+    if (this.props.value !== nextProps.value || defined(nextContext.form)) {
+      let newValue = this.getValue(nextProps, nextContext);
+      // This is the only thing that is different from parent, we compare newValue against coerved value in state
+      // To remain compatible with react-select, we need to store the option object that
+      // includes `value` and `label`, but when we submit the format, we need to coerce it
+      // to just return `value`. Also when field changes, it propagates the coerved value up
+      if (newValue !== this.coerceValue(this.state.value)) {
+        this.setValue(newValue);
+      }
+    }
+  }
+
+  getOptions(props) {
+    return convertFromSelect2Choices(props.choices) || props.options;
+  }
+
+  getClassName = () => '';
+
+  // Not sure why, but we need this to get react-select's `Creatable` to work properly
+  // Otherwise, when you hit "enter" to create a new item, the "selected value" does
+  // not update with new value (and also new value is not displayed in dropdown)
+  coerceValue(value) {
+    return value ? value.value : null;
+  }
+
+  onChange = opt => {
+    this.setValue(opt);
+  };
+
+  getField() {
+    let {placeholder, disabled, required, clearable} = this.props;
+
+    return (
+      <FieldSeparator>
+        <SelectControl
+          creatable
+          id={this.getId()}
+          options={this.options}
+          placeholder={placeholder}
+          disabled={disabled}
+          required={required}
+          value={this.state.value}
+          onChange={this.onChange}
+          clearable={clearable}
+        />
+      </FieldSeparator>
+    );
+  }
+}
+
+// This is because we are removing `control-group` class name which provides margin-bottom
+const FieldSeparator = styled('div')`
+  margin-bottom: 15px;
+`;
diff --git a/src/sentry/static/sentry/app/components/forms/selectField.jsx b/src/sentry/static/sentry/app/components/forms/selectField.jsx
index 9692a3a547..2134ae68ac 100644
--- a/src/sentry/static/sentry/app/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectField.jsx
@@ -7,9 +7,10 @@ import SelectControl from 'app/components/forms/selectControl';
 export default class SelectField extends FormField {
   static propTypes = {
     ...FormField.propTypes,
-    options: PropTypes.array.isRequired,
+    options: SelectControl.propTypes.options,
+    choices: SelectControl.propTypes.choices,
+    clearable: SelectControl.propTypes.clearable,
     onChange: PropTypes.func,
-    clearable: PropTypes.bool,
   };
 
   static defaultProps = {
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index b7b77bf950..af3cd6c332 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -5,7 +5,7 @@ import BooleanField from 'app/views/settings/components/forms/booleanField';
 import RangeField from 'app/views/settings/components/forms/rangeField';
 // import Select2FieldAutocomplete from './select2FieldAutocomplete';
 import SelectField from 'app/views/settings/components/forms/selectField';
-// import Select2TextField from './select2TextField';
+// import SelectCreatableField from './selectCreatableField';
 import TextField from 'app/views/settings/components/forms/textField';
 import TextareaField from 'app/views/settings/components/forms/textareaField';
 import RadioField from 'app/views/settings/components/forms/radioField';
@@ -71,7 +71,7 @@ export default class FieldFromConfig extends React.Component {
         if (props.multiline) {
           return <TextareaField {...props} />;
         }
-        // if (props.choices) return <Select2TextField {...props} />;
+        // if (props.choices) return <SelectCreatableField {...props} />;
         return <TextField {...props} />;
       case 'number':
         return <InputField {...props} type="number" />;
diff --git a/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap
index 83db079b79..f280d1db08 100644
--- a/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap
@@ -1,6 +1,6 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`GenericField render() renders text as TextInput 1`] = `
+exports[`GenericField renders text as TextInput 1`] = `
 <TextField
   disabled={false}
   formState="Ready"
@@ -14,21 +14,16 @@ exports[`GenericField render() renders text as TextInput 1`] = `
 />
 `;
 
-exports[`GenericField render() renders text with choices as Select2TextInput 1`] = `
-<Select2TextField
-  allowClear={false}
-  allowEmpty={false}
+exports[`GenericField renders text with choices as SelectCreatableField 1`] = `
+<SelectCreatableField
   choices={Array []}
   disabled={false}
-  escapeMarkup={true}
   formState="Ready"
   help={null}
   hideErrorMessage={false}
   key="field-name"
   label="field label*"
-  multiple={false}
   name="field-name"
-  placeholder="--"
   required={true}
   type="text"
 />
diff --git a/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap
deleted file mode 100644
index 5ee1729cc6..0000000000
--- a/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap
+++ /dev/null
@@ -1,81 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`Select2TextField render() renders with flat choices 1`] = `
-<div
-  className="control-group"
->
-  <div
-    className="controls"
-  >
-    <input
-      className="form-control"
-      disabled={false}
-      id="id-fieldName"
-      onChange={[Function]}
-      placeholder="--"
-      required={false}
-      value="fieldValue"
-    />
-  </div>
-</div>
-`;
-
-exports[`Select2TextField render() renders with form context 1`] = `
-<div
-  className="control-group"
->
-  <div
-    className="controls"
-  >
-    <input
-      className="form-control"
-      disabled={false}
-      id="id-fieldName"
-      onChange={[Function]}
-      placeholder="--"
-      required={false}
-      value="fieldValue"
-    />
-  </div>
-</div>
-`;
-
-exports[`Select2TextField render() renders with paired choices 1`] = `
-<div
-  className="control-group"
->
-  <div
-    className="controls"
-  >
-    <input
-      className="form-control"
-      disabled={false}
-      id="id-fieldName"
-      onChange={[Function]}
-      placeholder="--"
-      required={false}
-      value="fieldValue"
-    />
-  </div>
-</div>
-`;
-
-exports[`Select2TextField render() renders without form context 1`] = `
-<div
-  className="control-group"
->
-  <div
-    className="controls"
-  >
-    <input
-      className="form-control"
-      disabled={false}
-      id="id-fieldName"
-      onChange={[Function]}
-      placeholder="--"
-      required={false}
-      value=""
-    />
-  </div>
-</div>
-`;
diff --git a/tests/js/spec/components/forms/genericField.spec.jsx b/tests/js/spec/components/forms/genericField.spec.jsx
index 5f04c73b0b..77c136ec81 100644
--- a/tests/js/spec/components/forms/genericField.spec.jsx
+++ b/tests/js/spec/components/forms/genericField.spec.jsx
@@ -4,36 +4,34 @@ import {shallow} from 'enzyme';
 import {GenericField, FormState} from 'app/components/forms';
 
 describe('GenericField', function() {
-  describe('render()', function() {
-    it('renders text as TextInput', function() {
-      let wrapper = shallow(
-        <GenericField
-          formState={FormState.READY}
-          config={{
-            name: 'field-name',
-            label: 'field label',
-            type: 'text',
-          }}
-        />
-      );
-      expect(wrapper).toMatchSnapshot();
-      expect(wrapper.name()).toEqual('TextField');
-    });
+  it('renders text as TextInput', function() {
+    let wrapper = shallow(
+      <GenericField
+        formState={FormState.READY}
+        config={{
+          name: 'field-name',
+          label: 'field label',
+          type: 'text',
+        }}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+    expect(wrapper.name()).toEqual('TextField');
+  });
 
-    it('renders text with choices as Select2TextInput', function() {
-      let wrapper = shallow(
-        <GenericField
-          formState={FormState.READY}
-          config={{
-            name: 'field-name',
-            label: 'field label',
-            type: 'text',
-            choices: [],
-          }}
-        />
-      );
-      expect(wrapper).toMatchSnapshot();
-      expect(wrapper.name()).toEqual('Select2TextField');
-    });
+  it('renders text with choices as SelectCreatableField', function() {
+    let wrapper = shallow(
+      <GenericField
+        formState={FormState.READY}
+        config={{
+          name: 'field-name',
+          label: 'field label',
+          type: 'text',
+          choices: [],
+        }}
+      />
+    );
+    expect(wrapper).toMatchSnapshot();
+    expect(wrapper.name()).toEqual('SelectCreatableField');
   });
 });
diff --git a/tests/js/spec/components/forms/select2TextField.spec.jsx b/tests/js/spec/components/forms/select2TextField.spec.jsx
deleted file mode 100644
index dfbdf1d9b2..0000000000
--- a/tests/js/spec/components/forms/select2TextField.spec.jsx
+++ /dev/null
@@ -1,64 +0,0 @@
-import React from 'react';
-import {shallow} from 'enzyme';
-
-import {Select2TextField} from 'app/components/forms';
-
-describe('Select2TextField', function() {
-  describe('render()', function() {
-    it('renders without form context', function() {
-      let wrapper = shallow(<Select2TextField choices={[]} name="fieldName" />);
-      expect(wrapper).toMatchSnapshot();
-    });
-
-    it('renders with form context', function() {
-      let wrapper = shallow(<Select2TextField choices={[]} name="fieldName" />, {
-        context: {
-          form: {
-            data: {
-              fieldName: 'fieldValue',
-            },
-            errors: {},
-          },
-        },
-      });
-      expect(wrapper).toMatchSnapshot();
-    });
-
-    it('renders with flat choices', function() {
-      let wrapper = shallow(
-        <Select2TextField choices={['a', 'b', 'c']} name="fieldName" />,
-        {
-          context: {
-            form: {
-              data: {
-                fieldName: 'fieldValue',
-              },
-              errors: {},
-            },
-          },
-        }
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-
-    it('renders with paired choices', function() {
-      let wrapper = shallow(
-        <Select2TextField
-          choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
-          name="fieldName"
-        />,
-        {
-          context: {
-            form: {
-              data: {
-                fieldName: 'fieldValue',
-              },
-              errors: {},
-            },
-          },
-        }
-      );
-      expect(wrapper).toMatchSnapshot();
-    });
-  });
-});
diff --git a/tests/js/spec/components/forms/selectCreatableField.spec.jsx b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
new file mode 100644
index 0000000000..0c37e76026
--- /dev/null
+++ b/tests/js/spec/components/forms/selectCreatableField.spec.jsx
@@ -0,0 +1,125 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {Form, SelectCreatableField} from 'app/components/forms';
+
+describe('SelectCreatableField', function() {
+  it('can add user input into select field when using options', function() {
+    let wrapper = mount(
+      <SelectCreatableField options={[{value: 'foo', label: 'Foo'}]} name="fieldName" />
+    );
+
+    wrapper
+      .find('input[id="id-fieldName"]')
+      .simulate('change', {target: {value: 'bar'}})
+      .simulate('keyDown', {keyCode: 13});
+    wrapper.update();
+
+    // Is selected
+    expect(wrapper.find('.Select-value-label').text()).toBe('bar');
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'bar',
+        label: 'bar',
+      }),
+      {
+        value: 'foo',
+        label: 'Foo',
+      },
+    ]);
+  });
+
+  it('can add user input into select field when using choices', function() {
+    let wrapper = mount(<SelectCreatableField choices={['foo']} name="fieldName" />);
+
+    wrapper
+      .find('input[id="id-fieldName"]')
+      .simulate('change', {target: {value: 'bar'}})
+      .simulate('keyDown', {keyCode: 13});
+    wrapper.update();
+
+    // Is selected
+    expect(wrapper.find('.Select-value-label').text()).toBe('bar');
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'bar',
+        label: 'bar',
+      }),
+      {
+        value: 'foo',
+        label: 'foo',
+      },
+    ]);
+  });
+
+  it('can add user input into select field when using paired choices', function() {
+    let wrapper = mount(
+      <SelectCreatableField choices={[['foo', 'foo']]} name="fieldName" />
+    );
+
+    wrapper
+      .find('input[id="id-fieldName"]')
+      .simulate('change', {target: {value: 'bar'}})
+      .simulate('keyDown', {keyCode: 13});
+    wrapper.update();
+
+    // Is selected
+    expect(wrapper.find('.Select-value-label').text()).toBe('bar');
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'bar',
+        label: 'bar',
+      }),
+      {
+        value: 'foo',
+        label: 'foo',
+      },
+    ]);
+  });
+
+  it('with Form context', function() {
+    let submitMock = jest.fn();
+    let wrapper = mount(
+      <Form onSubmit={submitMock}>
+        <SelectCreatableField choices={[['foo', 'foo']]} name="fieldName" />
+      </Form>,
+      {}
+    );
+
+    wrapper
+      .find('input[id="id-fieldName"]')
+      .simulate('change', {target: {value: 'bar'}})
+      .simulate('keyDown', {keyCode: 13});
+    wrapper.update();
+
+    // Is selected
+    expect(wrapper.find('.Select-value-label').text()).toBe('bar');
+
+    // Is in select menu
+    expect(wrapper.find('Select').prop('options')).toEqual([
+      expect.objectContaining({
+        value: 'bar',
+        label: 'bar',
+      }),
+      {
+        value: 'foo',
+        label: 'foo',
+      },
+    ]);
+
+    wrapper.find('Form').simulate('submit');
+    expect(submitMock).toHaveBeenCalledWith(
+      {
+        fieldName: 'bar',
+      },
+      expect.anything(),
+      expect.anything()
+    );
+  });
+});
