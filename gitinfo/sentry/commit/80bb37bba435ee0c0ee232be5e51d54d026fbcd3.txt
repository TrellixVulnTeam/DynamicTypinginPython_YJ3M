commit 80bb37bba435ee0c0ee232be5e51d54d026fbcd3
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Dec 1 16:13:18 2015 -0800

    Bring back sentry.conf.py for now

diff --git a/src/sentry/runner/commands/init.py b/src/sentry/runner/commands/init.py
index 60efaff762..81b878e069 100644
--- a/src/sentry/runner/commands/init.py
+++ b/src/sentry/runner/commands/init.py
@@ -31,11 +31,19 @@ def init(ctx, directory):
     if yaml is None:
         raise click.ClickException("DIRECTORY must not be a file.")
 
-    if os.path.isfile(yaml):
-        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(yaml), abort=True)
-
     if directory and not os.path.exists(directory):
         os.makedirs(directory)
 
+    py_contents, yaml_contents = generate_settings()
+
+    if os.path.isfile(yaml):
+        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(yaml), abort=True)
+
     with click.open_file(yaml, 'wb') as fp:
-        fp.write(generate_settings())
+        fp.write(yaml_contents)
+
+    if os.path.isfile(py):
+        click.confirm("File already exists at '%s', overwrite?" % click.format_filename(py), abort=True)
+
+    with click.open_file(py, 'wb') as fp:
+        fp.write(py_contents)
diff --git a/src/sentry/runner/settings.py b/src/sentry/runner/settings.py
index 50951567c8..206f3c44c7 100644
--- a/src/sentry/runner/settings.py
+++ b/src/sentry/runner/settings.py
@@ -14,16 +14,195 @@ import click
 DEFAULT_SETTINGS_MODULE = 'sentry.conf.server'
 DEFAULT_SETTINGS_CONF = 'config.yml'
 DEFAULT_SETTINGS_OVERRIDE = 'sentry.conf.py'
-CONFIG_TEMPLATE = """# https://docs.getsentry.com/
+PY_CONFIG_TEMPLATE = """
+# This file is just Python, with a touch of Django which means
+# you can inherit and tweak settings to your hearts content.
+from sentry.conf.server import *
 
-system.databases:
-  default:
-    ENGINE: 'sentry.db.postgres'
-    NAME: 'sentry'
-    USER: 'matt'
-    PASSWORD: ''
-    HOST: ''
-    PORT: ''
+import os.path
+
+CONF_ROOT = os.path.dirname(__file__)
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'sentry.db.postgres',
+        'NAME': 'sentry',
+        'USER': 'postgres',
+        'PASSWORD': '',
+        'HOST': '',
+        'PORT': '',
+    }
+}
+
+# You should not change this setting after your database has been created
+# unless you have altered all schemas first
+SENTRY_USE_BIG_INTS = True
+
+# If you're expecting any kind of real traffic on Sentry, we highly recommend
+# configuring the CACHES and Redis settings
+
+###########
+# General #
+###########
+
+# Instruct Sentry that this install intends to be run by a single organization
+# and thus various UI optimizations should be enabled.
+SENTRY_SINGLE_ORGANIZATION = True
+
+#########
+# Redis #
+#########
+
+# Generic Redis configuration used as defaults for various things including:
+# Buffers, Quotas, TSDB
+
+SENTRY_REDIS_OPTIONS = {
+    'hosts': {
+        0: {
+            'host': '127.0.0.1',
+            'port': 6379,
+        }
+    }
+}
+
+#########
+# Cache #
+#########
+
+# Sentry currently utilizes two separate mechanisms. While CACHES is not a
+# requirement, it will optimize several high throughput patterns.
+
+# If you wish to use memcached, install the dependencies and adjust the config
+# as shown:
+#
+#   pip install python-memcached
+#
+# CACHES = {
+#     'default': {
+#         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
+#         'LOCATION': ['127.0.0.1:11211'],
+#     }
+# }
+
+# A primary cache is required for things such as processing events
+SENTRY_CACHE = 'sentry.cache.redis.RedisCache'
+
+#########
+# Queue #
+#########
+
+# See https://docs.getsentry.com/on-premise/server/queue/ for more
+# information on configuring your queue broker and workers. Sentry relies
+# on a Python framework called Celery to manage queues.
+
+CELERY_ALWAYS_EAGER = False
+BROKER_URL = 'redis://localhost:6379'
+
+###############
+# Rate Limits #
+###############
+
+# Rate limits apply to notification handlers and are enforced per-project
+# automatically.
+
+SENTRY_RATELIMITER = 'sentry.ratelimits.redis.RedisRateLimiter'
+
+##################
+# Update Buffers #
+##################
+
+# Buffers (combined with queueing) act as an intermediate layer between the
+# database and the storage API. They will greatly improve efficiency on large
+# numbers of the same events being sent to the API in a short amount of time.
+# (read: if you send any kind of real data to Sentry, you should enable buffers)
+
+SENTRY_BUFFER = 'sentry.buffer.redis.RedisBuffer'
+
+##########
+# Quotas #
+##########
+
+# Quotas allow you to rate limit individual projects or the Sentry install as
+# a whole.
+
+SENTRY_QUOTAS = 'sentry.quotas.redis.RedisQuota'
+
+########
+# TSDB #
+########
+
+# The TSDB is used for building charts as well as making things like per-rate
+# alerts possible.
+
+SENTRY_TSDB = 'sentry.tsdb.redis.RedisTSDB'
+
+###########
+# Digests #
+###########
+
+# The digest backend powers notification summaries.
+
+SENTRY_DIGESTS = 'sentry.digests.backends.redis.RedisBackend'
+
+################
+# File storage #
+################
+
+# Any Django storage backend is compatible with Sentry. For more solutions see
+# the django-storages package: https://django-storages.readthedocs.org/en/latest/
+
+SENTRY_FILESTORE = 'django.core.files.storage.FileSystemStorage'
+SENTRY_FILESTORE_OPTIONS = {
+    'location': '/tmp/sentry-files',
+}
+
+##############
+# Web Server #
+##############
+
+# You MUST configure the absolute URI root for Sentry:
+SENTRY_URL_PREFIX = 'http://sentry.example.com'  # No trailing slash!
+
+# If you're using a reverse SSL proxy, you should enable the X-Forwarded-Proto
+# header and uncomment the following settings
+# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+# SESSION_COOKIE_SECURE = True
+
+# If you're not hosting at the root of your web server, and not using uWSGI,
+# you need to uncomment and set it to the path where Sentry is hosted.
+# FORCE_SCRIPT_NAME = '/sentry'
+
+SENTRY_WEB_HOST = '0.0.0.0'
+SENTRY_WEB_PORT = 9000
+SENTRY_WEB_OPTIONS = {
+    # 'workers': 3,  # the number of gunicorn workers
+    # 'secure_scheme_headers': {'X-FORWARDED-PROTO': 'https'},
+}
+
+###############
+# Mail Server #
+###############
+
+# For more information check Django's documentation:
+# https://docs.djangoproject.com/en/1.6/topics/email/
+
+EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
+
+EMAIL_HOST = 'localhost'
+EMAIL_HOST_PASSWORD = ''
+EMAIL_HOST_USER = ''
+EMAIL_PORT = 25
+EMAIL_USE_TLS = False
+
+# The email address to send on behalf of
+SERVER_EMAIL = 'root@localhost'
+
+# If you're using mailgun for inbound mail, set your API key and configure a
+# route to forward to /api/hooks/mailgun/inbound/
+MAILGUN_API_KEY = ''
+"""
+YAML_CONFIG_TEMPLATE = """\
+# WORK IN PROGRESS
 
 ###########
 # General #
@@ -35,15 +214,6 @@ system.databases:
 # system.admin-email: 'your.name@example.com'
 system.admin-email: ''
 
-cache.backend: 'sentry.cache.redis.RedisCache'
-# cache.options: {}
-
-redis.options:
-  hosts:
-    0:
-      host: '127.0.0.1'
-      port: 6379
-
 ########
 # etc. #
 ########
@@ -54,18 +224,22 @@ system.secret-key: '%(secret_key)s'
 """
 
 
+def generate_secret_key():
+    from django.utils.crypto import get_random_string
+    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
+    return get_random_string(50, chars)
+
+
 def generate_settings():
     """
     This command is run when ``default_path`` doesn't exist, or ``init`` is
     run and returns a string representing the default data to put into their
     settings file.
     """
-    from django.utils.crypto import get_random_string
-    chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'
-    output = CONFIG_TEMPLATE % dict(
-        secret_key=get_random_string(50, chars),
-    )
-    return output
+    context = {'secret_key': generate_secret_key()}
+    py = PY_CONFIG_TEMPLATE % context
+    yaml = YAML_CONFIG_TEMPLATE % context
+    return py, yaml
 
 
 def discover_configs(ctx=None):
