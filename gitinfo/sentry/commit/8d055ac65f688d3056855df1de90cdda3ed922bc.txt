commit 8d055ac65f688d3056855df1de90cdda3ed922bc
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 24 10:18:34 2018 -0800

    ref(ui): Refactor SudoModal to use GlobalModal (#7032)
    
    * fix LazyLoad to not silently swallow errors + react prop warnings
    * remove old actionCreator
    * add onClose handler for <GlobalModal>

diff --git a/src/sentry/static/sentry/app/actionCreators/modal.jsx b/src/sentry/static/sentry/app/actionCreators/modal.jsx
index c8cca9edf4..47599e2b10 100644
--- a/src/sentry/static/sentry/app/actionCreators/modal.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/modal.jsx
@@ -1,3 +1,5 @@
+import React from 'react';
+
 import ModalActions from '../actions/modalActions';
 
 /**
@@ -14,3 +16,10 @@ export function closeModal() {
   ModalActions.closeModal();
 }
 
+export function openSudo({retryRequest, onClose} = {}) {
+  import('../components/modals/sudoModal')
+    .then(mod => mod.default)
+    .then(SudoModal =>
+      openModal(deps => <SudoModal {...deps} retryRequest={retryRequest} />, {onClose})
+    );
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/sudo.jsx b/src/sentry/static/sentry/app/actionCreators/sudo.jsx
deleted file mode 100644
index 0d2837c149..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/sudo.jsx
+++ /dev/null
@@ -1,8 +0,0 @@
-import SudoActions from '../actions/sudoActions';
-
-/**
- * Show "sudo" modal
- */
-export function openSudo(options = {}) {
-  SudoActions.openModal(options);
-}
diff --git a/src/sentry/static/sentry/app/actions/sudoActions.jsx b/src/sentry/static/sentry/app/actions/sudoActions.jsx
deleted file mode 100644
index db8055a60d..0000000000
--- a/src/sentry/static/sentry/app/actions/sudoActions.jsx
+++ /dev/null
@@ -1,3 +0,0 @@
-import Reflux from 'reflux';
-
-export default Reflux.createActions(['openModal', 'closeModal']);
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 3a20b8853c..23f284f99b 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -2,7 +2,7 @@ import $ from 'jquery';
 import _ from 'lodash';
 
 import GroupActions from './actions/groupActions';
-import {openSudo} from './actionCreators/sudo';
+import {openSudo} from './actionCreators/modal';
 
 export class Request {
   constructor(xhr) {
@@ -87,6 +87,10 @@ export class Client {
               requestOptions.error(...args);
             });
         },
+        onClose: () => {
+          if (typeof requestOptions.error !== 'function') return;
+          requestOptions.error();
+        },
       });
       return;
     }
diff --git a/src/sentry/static/sentry/app/components/globalModal.jsx b/src/sentry/static/sentry/app/components/globalModal.jsx
index 99fc23357d..035ecbd4d0 100644
--- a/src/sentry/static/sentry/app/components/globalModal.jsx
+++ b/src/sentry/static/sentry/app/components/globalModal.jsx
@@ -18,8 +18,9 @@ class GlobalModal extends React.Component {
      * `closeModal`
      *
      */
-    children: PropTypes.func.isRequired,
+    children: PropTypes.func,
     options: PropTypes.shape({
+      onClose: PropTypes.func,
       modalClassName: PropTypes.string,
     }),
     visible: PropTypes.bool,
@@ -30,6 +31,17 @@ class GlobalModal extends React.Component {
     options: {},
   };
 
+  handleCloseModal = () => {
+    let {options} = this.props;
+
+    if (typeof options.onClose === 'function') {
+      options.onClose();
+    }
+
+    // Action creator
+    closeModal();
+  };
+
   render() {
     let {visible, children, options} = this.props;
     let Component = Modal;
@@ -43,15 +55,16 @@ class GlobalModal extends React.Component {
         className={options && options.modalClassName}
         show={visible}
         animation={false}
-        onHide={closeModal}
+        onHide={this.handleCloseModal}
       >
-        {children &&
-          children({
-            closeModal,
-            Header: Modal.Header,
-            Body: Modal.Body,
-            Footer: Modal.Footer,
-          })}
+        {children
+          ? children({
+              closeModal,
+              Header: Modal.Header,
+              Body: Modal.Body,
+              Footer: Modal.Footer,
+            })
+          : null}
       </Component>
     );
   }
@@ -86,7 +99,7 @@ const GlobalModalContainer = createReactClass({
 
     return (
       <GlobalModal {...this.props} {...modalStore} visible={visible}>
-        {visible && modalStore.renderer}
+        {visible ? modalStore.renderer : null}
       </GlobalModal>
     );
   },
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index 37a59bac29..eef5a04244 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -59,31 +59,26 @@ class LazyLoad extends React.Component {
 
   getComponentGetter = () => this.props.component || this.props.route.componentPromise;
 
+  handleFetchError = error => {
+    // eslint-disable-next-line no-console
+    console.error(error);
+    Raven.captureException(error);
+    this.setState({
+      error,
+    });
+  };
+
   fetchComponent = () => {
     let getComponent = this.getComponentGetter();
 
     getComponent()
-      .then(
-        Component => {
-          // Always load default export if available
-          this.setState({
-            Component: Component.default || Component,
-          });
-        },
-        err => {
-          this.setState({
-            error: err,
-          });
-        }
-      )
-      .catch(err => {
-        // eslint-disable-next-line no-console
-        console.warn(err);
-        Raven.captureException(err);
+      .then(Component => {
+        // Always load default export if available
         this.setState({
-          error: err,
+          Component: Component.default || Component,
         });
-      });
+      }, this.handleFetchError)
+      .catch(this.handleFetchError);
   };
 
   fetchRetry = () => {
diff --git a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
index 0b8b26bab8..ea73090d96 100644
--- a/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/sudoModal.jsx
@@ -1,83 +1,71 @@
-import {browserHistory} from 'react-router';
-import Modal from 'react-bootstrap/lib/Modal';
+import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
-import Reflux from 'reflux';
-import classNames from 'classnames';
 
 import {t} from '../../locale';
 import ApiForm from '../forms/apiForm';
 import ApiMixin from '../../mixins/apiMixin';
 import LoadingIndicator from '../loadingIndicator';
 import SimplePasswordField from '../forms/simplePasswordField';
-import SudoActions from '../../actions/sudoActions';
-import SudoModalStore from '../../stores/sudoModalStore';
 import U2fContainer from '../u2fContainer';
 
-const SudoModal = createReactClass({
-  displayName: 'SudoModal',
-  mixins: [ApiMixin, Reflux.connect(SudoModalStore, 'modalProps')],
-
-  getInitialState() {
-    return {
-      modalProps: false,
+class SudoModal extends React.Component {
+  static propTypes = {
+    api: PropTypes.object,
+    closeModal: PropTypes.func.isRequired,
+    /**
+     * expects a function that returns a Promise
+     */
+    retryRequest: PropTypes.func.isRequired,
+
+    Header: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+    Body: PropTypes.oneOfType([PropTypes.func, PropTypes.node]).isRequired,
+  };
+
+  constructor(...args) {
+    super(...args);
+    this.state = {
       error: false,
       busy: false,
     };
-  },
-
-  componentDidMount() {
-    // Listen for route changes so we can dismiss modal
-    this.unlisten = browserHistory.listen(() =>
-      this.setState({
-        modalProps: false,
-      })
-    );
-  },
-
-  componentWillUnmount() {
-    if (this.unlisten) {
-      this.unlisten();
-    }
-  },
+  }
 
-  handleSubmit() {
+  handleSubmit = () => {
     this.setState({busy: true});
-  },
+  };
 
-  handleSuccess() {
-    if (!this.state.modalProps || !this.state.modalProps.retryRequest) return;
+  handleSuccess = () => {
+    let {closeModal, retryRequest} = this.props;
+    if (!retryRequest) return;
 
     this.setState(
       {
         busy: true,
       },
       () => {
-        if (!this.state.modalProps) return;
-
-        this.state.modalProps.retryRequest().then(() => {
+        retryRequest().then(() => {
           this.setState(
             {
               busy: false,
             },
-            SudoActions.closeModal
+            closeModal
           );
         });
       }
     );
-  },
+  };
 
-  handleError() {
+  handleError = () => {
     this.setState({
       busy: false,
       error: true,
     });
-  },
+  };
 
-  handleU2fTap(data) {
+  handleU2fTap = data => {
     this.setState({busy: true});
     // u2Interface expects this to return a promise
-    return this.api
+    return this.props.api
       .requestPromise('/sudo/', {
         method: 'POST',
         data,
@@ -91,54 +79,51 @@ const SudoModal = createReactClass({
         // u2fInterface relies on this
         throw err;
       });
-  },
+  };
 
   render() {
-    let {className} = this.props;
-    let cx = classNames('sudo-modal', className);
-    let showModal = !!this.state.modalProps;
+    let {closeModal, Header, Body} = this.props;
 
     return (
-      <Modal
-        className={cx}
-        show={showModal}
-        animation={false}
-        onHide={SudoActions.closeModal}
+      <ApiForm
+        apiMethod="POST"
+        apiEndpoint="/sudo/"
+        footerClass="modal-footer"
+        submitLabel={t('Continue')}
+        onSubmit={this.handleSubmit}
+        onSubmitSuccess={this.handleSuccess}
+        onSubmitError={this.handleError}
+        hideErrors
+        resetOnError
       >
-        {showModal && (
-          <ApiForm
-            apiMethod="POST"
-            apiEndpoint="/sudo/"
-            footerClass="modal-footer"
-            submitLabel={t('Continue')}
-            onSubmit={this.handleSubmit}
-            onSubmitSuccess={this.handleSuccess}
-            onSubmitError={this.handleError}
-            hideErrors
-            resetOnError
-          >
-            <Modal.Header closeButton onHide={SudoActions.closeModal}>
-              {t('Confirm Your Identity')}
-            </Modal.Header>
-
-            <Modal.Body>
-              {this.state.busy && <LoadingIndicator overlay />}
-              <p>{t('Help us keep your account safe by confirming your identity.')}</p>
-              {this.state.error && (
-                <div className="alert alert-error alert-block">
-                  {t('Incorrect password')}
-                </div>
-              )}
-
-              <SimplePasswordField label={t('Password')} required name="password" />
-
-              <U2fContainer displayMode="sudo" onTap={this.handleU2fTap} />
-            </Modal.Body>
-          </ApiForm>
-        )}
-      </Modal>
+        <Header closeButton onHide={closeModal}>
+          {t('Confirm Your Identity')}
+        </Header>
+
+        <Body>
+          {this.state.busy && <LoadingIndicator overlay />}
+          <p>{t('Help us keep your account safe by confirming your identity.')}</p>
+          {this.state.error && (
+            <div className="alert alert-error alert-block">{t('Incorrect password')}</div>
+          )}
+
+          <SimplePasswordField label={t('Password')} required name="password" />
+
+          <U2fContainer displayMode="sudo" onTap={this.handleU2fTap} />
+        </Body>
+      </ApiForm>
     );
+  }
+}
+
+const SudoModalContainer = createReactClass({
+  displayName: 'SudoModalContainer',
+  mixins: [ApiMixin],
+
+  render() {
+    return <SudoModal {...this.props} api={this.api} />;
   },
 });
 
-export default SudoModal;
+export default SudoModalContainer;
+export {SudoModal};
diff --git a/src/sentry/static/sentry/app/stores/sudoModalStore.jsx b/src/sentry/static/sentry/app/stores/sudoModalStore.jsx
deleted file mode 100644
index cd1215bb57..0000000000
--- a/src/sentry/static/sentry/app/stores/sudoModalStore.jsx
+++ /dev/null
@@ -1,27 +0,0 @@
-import Reflux from 'reflux';
-
-import SudoActions from '../actions/sudoActions';
-
-const SudoModalStore = Reflux.createStore({
-  init() {
-    this.reset();
-    this.listenTo(SudoActions.closeModal, this.onCloseModal);
-    this.listenTo(SudoActions.openModal, this.onOpenModal);
-  },
-
-  reset() {
-    this.modalProps = null;
-  },
-
-  onCloseModal() {
-    this.modalProps = null;
-    this.trigger(this.modalProps);
-  },
-
-  onOpenModal(props) {
-    this.modalProps = props;
-    this.trigger(this.modalProps);
-  },
-});
-
-export default SudoModalStore;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 8c95e6073f..6f6c8e7d28 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,11 +1,11 @@
 /*global __webpack_public_path__ */
 /*eslint no-native-reassign:0 */
 import $ from 'jquery';
-import createReactClass from 'create-react-class';
-import Cookies from 'js-cookie';
 import {ThemeProvider} from 'emotion-theming';
+import Cookies from 'js-cookie';
 import PropTypes from 'prop-types';
 import React from 'react';
+import createReactClass from 'create-react-class';
 
 import {t} from '../locale';
 import AlertActions from '../actions/alertActions';
@@ -17,7 +17,6 @@ import InstallWizard from './installWizard';
 import LoadingIndicator from '../components/loadingIndicator';
 import OrganizationsLoader from '../components/organizations/organizationsLoader';
 import OrganizationsStore from '../stores/organizationsStore';
-import SudoModal from '../components/modals/sudoModal';
 import GlobalModal from '../components/globalModal';
 import theme from '../utils/theme';
 
@@ -148,7 +147,6 @@ const App = createReactClass({
     return (
       <ThemeProvider theme={theme}>
         <OrganizationsLoader>
-          <SudoModal />
           <GlobalModal />
           <Alerts className="messages-container" />
           <Indicators className="indicators-container" />
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
index f37fe3eeb6..fe111ff028 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formField/index.jsx
@@ -21,11 +21,13 @@ import Spinner from '../styled/spinner';
 // This wraps Control + ControlError message
 // * can NOT be a flex box have because of position: absolute on "control error message"
 // * can NOT have overflow hidden because "control error message" overflows
-const FormFieldControlErrorWrapper = styled(Box)`
+const FormFieldControlErrorWrapper = styled(({inline, ...props}) => <Box {...props} />)`
   ${p => (p.inline ? 'width: 50%; padding-left: 10px;' : '')};
 `;
 
-const FormFieldControlStyled = styled(FormFieldControl)`
+const FormFieldControlStyled = styled(({alignRight, ...props}) => (
+  <FormFieldControl {...props} />
+))`
   display: flex;
   flex-direction: column;
   ${p => (p.alignRight ? 'align-items: flex-end;' : '')};
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
index e033ce7735..e3040bb44a 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
@@ -18,7 +18,7 @@ const Breadcrumbs = styled.div`
   align-items: center;
 `;
 
-const MenuItem = styled(Link)`
+const MenuItem = styled(({active, ...props}) => <Link {...props} />)`
   display: block;
   padding: 15px;
   border-bottom: 1px solid ${p => p.theme.borderLight};
diff --git a/tests/js/spec/components/globalModal.spec.jsx b/tests/js/spec/components/globalModal.spec.jsx
index 2c46f414f9..3d2267d2f7 100644
--- a/tests/js/spec/components/globalModal.spec.jsx
+++ b/tests/js/spec/components/globalModal.spec.jsx
@@ -29,4 +29,31 @@ describe('GlobalModal', function() {
       }, 1);
     }, 1);
   });
+
+  it('calls onClose handler when modal closes', function(done) {
+    let wrapper = mount(<GlobalModal />);
+    let closeSpy = jest.fn();
+
+    openModal(
+      ({Header}) => (
+        <div id="modal-test">
+          <Header closeButton>Header</Header>Hi
+        </div>
+      ),
+      {onClose: closeSpy}
+    );
+
+    // async :<
+    setTimeout(() => {
+      wrapper.update();
+      let modal = $(document.body).find('.modal');
+      modal.find('.close').click();
+
+      setTimeout(() => {
+        wrapper.update();
+        expect(closeSpy).toHaveBeenCalled();
+        done();
+      }, 1);
+    }, 1);
+  });
 });
diff --git a/tests/js/spec/components/lazyLoad.spec.jsx b/tests/js/spec/components/lazyLoad.spec.jsx
index 1a5c4d4cc6..7a4b2e36f3 100644
--- a/tests/js/spec/components/lazyLoad.spec.jsx
+++ b/tests/js/spec/components/lazyLoad.spec.jsx
@@ -37,6 +37,8 @@ describe('LazyLoad', function() {
   });
 
   it('renders with error message when promise is rejected', async function() {
+    // eslint-disable-next-line no-console
+    console.error = jest.fn();
     let reject;
     let promise = new Promise((resolve, rej) => {
       reject = rej;
@@ -56,5 +58,9 @@ describe('LazyLoad', function() {
     wrapper.update();
     expect(wrapper.find('LoadingIndicator').length).toBe(0);
     expect(wrapper.find('LoadingError').length).toBe(1);
+    // eslint-disable-next-line no-console
+    expect(console.error).toHaveBeenCalled();
+    // eslint-disable-next-line no-console
+    console.error.mockRestore();
   });
 });
diff --git a/tests/js/spec/sudoModal.spec.jsx b/tests/js/spec/sudoModal.spec.jsx
index 9d11346dab..afa2219c4d 100644
--- a/tests/js/spec/sudoModal.spec.jsx
+++ b/tests/js/spec/sudoModal.spec.jsx
@@ -4,6 +4,7 @@ import {mount} from 'enzyme';
 import {Client} from 'app/api';
 import ConfigStore from 'app/stores/configStore';
 import App from 'app/views/app';
+import {SudoModal} from 'app/components/modals/sudoModal';
 
 jest.mock('jquery');
 
@@ -30,6 +31,10 @@ describe('Sudo Modal', function() {
         sudoRequired: true,
       },
     });
+    Client.addMockResponse({
+      url: '/authenticators/',
+      body: [],
+    });
   });
 
   afterEach(function() {
@@ -55,12 +60,10 @@ describe('Sudo Modal', function() {
       error: errorCb,
     });
 
-    setTimeout(() => {
+    SudoModal.prototype.componentDidMount = function() {
       try {
-        // SudoModal
         const $input = $('.modal input');
         expect($input.length).toBe(1);
-
         // Original callbacks should not have been called
         expect(successCb).not.toBeCalled();
         expect(errorCb).not.toBeCalled();
@@ -82,39 +85,44 @@ describe('Sudo Modal', function() {
 
         // "Sudo" auth
         $input.val('password');
-        $('.modal [type="submit"]').click();
 
-        expect(sudoMock).toHaveBeenCalledWith(
-          '/sudo/',
-          expect.objectContaining({
-            method: 'POST',
-            // XXX: This doesn't submit with password in tests because modal is rendered outside of
-            // react tree. So we can't simulate react events on input
-            // data: {
-            // password: 'password',
-            // },
-          })
-        );
+        $('.modal form').on('submit', () => {
+          setTimeout(() => {
+            expect(sudoMock).toHaveBeenCalledWith(
+              '/sudo/',
+              expect.objectContaining({
+                method: 'POST',
+                // XXX: This doesn't submit with password in tests because modal is rendered outside of
+                // react tree. So we can't simulate react events on input
+                // data: {
+                // password: 'password',
+                // },
+              })
+            );
+
+            // Check for original API request to be retried
+            setTimeout(() => {
+              try {
+                // Retry API request
+                expect(successCb).toHaveBeenCalled();
+                expect(orgDeleteMock).toHaveBeenCalledWith(
+                  '/organizations/org-slug/',
+                  expect.objectContaining({
+                    method: 'DELETE',
+                  })
+                );
+              } catch (err) {
+                done(err);
+              }
+              done();
+            }, 1);
+          }, 1);
+        });
+
+        $('.modal [type="submit"]').click();
       } catch (err) {
         done(err);
       }
-      setTimeout(() => {
-        try {
-          // Modal can be around but should be "busy"
-
-          // Retry API request
-          expect(successCb).toHaveBeenCalled();
-          expect(orgDeleteMock).toHaveBeenCalledWith(
-            '/organizations/org-slug/',
-            expect.objectContaining({
-              method: 'DELETE',
-            })
-          );
-        } catch (err) {
-          done(err);
-        }
-        done();
-      }, 1);
-    }, 1);
+    };
   });
 });
