commit a737c947997d7acdb1027c567265392b35debe61
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Oct 9 13:40:51 2015 -0700

    Standardize on use of `to_timestamp`.

diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index e75bace8fe..18bdd68449 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -11,6 +11,8 @@ from django.conf import settings
 from django.utils import timezone
 from enum import Enum
 
+from sentry.utils.dates import to_timestamp
+
 
 ONE_MINUTE = 60
 ONE_HOUR = ONE_MINUTE * 60
@@ -71,7 +73,7 @@ class BaseTSDB(object):
         i.e. if the rollup is minutes, the resulting timestamp would have
         the seconds and microseconds rounded down.
         """
-        epoch = int(timestamp.strftime('%s'))
+        epoch = int(to_timestamp(timestamp))
         return epoch - (epoch % seconds)
 
     def normalize_ts_to_epoch(self, epoch, seconds):
@@ -84,7 +86,7 @@ class BaseTSDB(object):
         """
         Given a ``timestamp`` (datetime object) normalize to an epoch rollup.
         """
-        epoch = int(timestamp.strftime('%s'))
+        epoch = int(to_timestamp(timestamp))
         return int(epoch / seconds)
 
     def normalize_ts_to_rollup(self, epoch, seconds):
@@ -98,7 +100,7 @@ class BaseTSDB(object):
         Identify the lowest granularity rollup available within the given time
         range.
         """
-        num_seconds = int(end_timestamp.strftime('%s')) - int(start_timestamp.strftime('%s'))
+        num_seconds = int(to_timestamp(end_timestamp)) - int(to_timestamp(start_timestamp))
 
         # calculate the highest rollup within time range
         for rollup, samples in self.rollups:
@@ -116,7 +118,7 @@ class BaseTSDB(object):
             rollup = self.get_optimal_rollup(start, end)
 
         series = [self.normalize_to_epoch(start, rollup)]
-        end_ts = int(end.strftime('%s'))
+        end_ts = int(to_timestamp(end))
         while series[-1] + rollup < end_ts:
             series.append(series[-1] + rollup)
 
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 3303fc12a7..a8fe18bc67 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -21,6 +21,7 @@ from rb import Cluster
 
 from sentry.exceptions import InvalidConfiguration
 from sentry.tsdb.base import BaseTSDB
+from sentry.utils.dates import to_timestamp
 from sentry.utils.versioning import (
     Version,
     check_versions,
@@ -203,7 +204,7 @@ class RedisTSDB(BaseTSDB):
         if timestamp is None:
             timestamp = timezone.now()
 
-        ts = int(timestamp.strftime('%s'))  # not actually a timestamp :(
+        ts = int(to_timestamp(timestamp))  # ``timestamp`` is not actually a timestamp :(
 
         with self.cluster.fanout() as client:
             for model, key, values in items:
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index e0acb39145..f77dee72f3 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -10,6 +10,7 @@ from datetime import (
 from sentry.testutils import TestCase
 from sentry.tsdb.base import TSDBModel, ONE_MINUTE, ONE_HOUR, ONE_DAY
 from sentry.tsdb.redis import RedisTSDB
+from sentry.utils.dates import to_timestamp
 
 
 class RedisTSDBTest(TestCase):
@@ -46,7 +47,7 @@ class RedisTSDBTest(TestCase):
         dts = [now + timedelta(hours=i) for i in xrange(4)]
 
         def timestamp(d):
-            t = int(d.strftime('%s'))
+            t = int(to_timestamp(d))
             return t - (t % 3600)
 
         self.db.incr(TSDBModel.project, 1, dts[0])
@@ -89,7 +90,7 @@ class RedisTSDBTest(TestCase):
         model = TSDBModel.users_affected_by_group
 
         def timestamp(d):
-            t = int(d.strftime('%s'))
+            t = int(to_timestamp(d))
             return t - (t % 3600)
 
         self.db.record(
