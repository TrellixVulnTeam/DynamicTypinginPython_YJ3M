commit 46d524f38f065929b4310f93d0b5ed11894e88b0
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 2 10:05:57 2020 -0800

    test(js): Fix almost rest of unmocked API endpoint warnings (#16201)
    
    * fix global selection header warning
    * fix tableField not having default value of empty string when null or undefined

diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index f55e1a0f32..ff0b14d216 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -1,13 +1,13 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
-import space from 'app/styles/space';
 
 import {defined, objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import InputField from 'app/views/settings/components/forms/inputField';
 import Input from 'app/views/settings/components/forms/controls/input';
+import InputField from 'app/views/settings/components/forms/inputField';
+import space from 'app/styles/space';
 
 const defaultProps = {
   addButtonText: t('Add Item'),
@@ -135,7 +135,7 @@ export default class TableField extends React.Component<Props> {
                 <RowInput>
                   <Input
                     onChange={v => setValue(rowIndex, fieldKey, v ? v : null)}
-                    value={row[fieldKey]}
+                    value={!defined(row[fieldKey]) ? '' : row[fieldKey]}
                   />
                 </RowInput>
                 {i === mappedKeys.length - 1 && (
diff --git a/tests/js/spec/components/issueDiff.spec.jsx b/tests/js/spec/components/issueDiff.spec.jsx
index 6e1ac4c9d4..98ff09bf6d 100644
--- a/tests/js/spec/components/issueDiff.spec.jsx
+++ b/tests/js/spec/components/issueDiff.spec.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import {mountWithTheme, shallow} from 'sentry-test/enzyme';
 import {IssueDiff} from 'app/components/issueDiff';
-import {Client} from 'app/api';
 
 jest.mock('app/api');
 
@@ -10,6 +9,26 @@ describe('IssueDiff', function() {
   const routerContext = TestStubs.routerContext();
   const api = new MockApiClient();
 
+  beforeEach(function() {
+    MockApiClient.addMockResponse({
+      url: '/issues/target/events/latest/',
+      body: {
+        entries: entries[0],
+      },
+    });
+    MockApiClient.addMockResponse({
+      url: '/issues/base/events/latest/',
+      body: {
+        platform: 'javascript',
+        entries: entries[1],
+      },
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
   it('is loading when initially rendering', function() {
     const wrapper = shallow(
       <IssueDiff
@@ -25,20 +44,6 @@ describe('IssueDiff', function() {
   });
 
   it('can dynamically import SplitDiff', async function() {
-    Client.addMockResponse({
-      url: '/issues/target/events/latest/',
-      body: {
-        entries: entries[0],
-      },
-    });
-    Client.addMockResponse({
-      url: '/issues/base/events/latest/',
-      body: {
-        platform: 'javascript',
-        entries: entries[1],
-      },
-    });
-
     // Need `mount` because of componentDidMount in <IssueDiff>
     const wrapper = mountWithTheme(
       <IssueDiff
@@ -59,13 +64,13 @@ describe('IssueDiff', function() {
   });
 
   it('can diff message', async function() {
-    Client.addMockResponse({
+    MockApiClient.addMockResponse({
       url: '/issues/target/events/latest/',
       body: {
         entries: [{type: 'message', data: {formatted: 'Hello World'}}],
       },
     });
-    Client.addMockResponse({
+    MockApiClient.addMockResponse({
       url: '/issues/base/events/latest/',
       body: {
         platform: 'javascript',
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index 0323d9ba4b..9b36b389ac 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -54,6 +54,7 @@ describe('GlobalSelectionHeader', function() {
   });
 
   beforeEach(function() {
+    MockApiClient.clearMockResponses();
     jest.spyOn(ProjectsStore, 'getState').mockImplementation(() => ({
       projects: organization.projects,
       loadingProjects: false,
@@ -517,29 +518,32 @@ describe('GlobalSelectionHeader', function() {
   });
 
   describe('forceProject selection mode', function() {
-    const initialData = initializeOrg({
-      organization: {features: ['global-views']},
-      projects: [
-        {id: 1, slug: 'staging-project', environments: ['staging']},
-        {id: 2, slug: 'prod-project', environments: ['prod']},
-      ],
-      router: {
-        location: {query: {}},
-      },
-    });
-    jest.spyOn(ProjectsStore, 'getState').mockImplementation(() => ({
-      projects: initialData.organization.projects,
-      loadingProjects: false,
-    }));
+    let wrapper;
+    beforeAll(function() {
+      const initialData = initializeOrg({
+        organization: {features: ['global-views']},
+        projects: [
+          {id: 1, slug: 'staging-project', environments: ['staging']},
+          {id: 2, slug: 'prod-project', environments: ['prod']},
+        ],
+        router: {
+          location: {query: {}},
+        },
+      });
+      jest.spyOn(ProjectsStore, 'getState').mockImplementation(() => ({
+        projects: initialData.organization.projects,
+        loadingProjects: false,
+      }));
 
-    const wrapper = mountWithTheme(
-      <GlobalSelectionHeader
-        organization={initialData.organization}
-        shouldForceProject
-        forceProject={initialData.organization.projects[0]}
-      />,
-      initialData.routerContext
-    );
+      wrapper = mountWithTheme(
+        <GlobalSelectionHeader
+          organization={initialData.organization}
+          shouldForceProject
+          forceProject={initialData.organization.projects[0]}
+        />,
+        initialData.routerContext
+      );
+    });
 
     it('renders a back button to the forced project', function() {
       const back = wrapper.find('BackButtonWrapper');
diff --git a/tests/js/spec/views/auth/login.spec.jsx b/tests/js/spec/views/auth/login.spec.jsx
index f48f9a9d2e..30c7c910ff 100644
--- a/tests/js/spec/views/auth/login.spec.jsx
+++ b/tests/js/spec/views/auth/login.spec.jsx
@@ -4,7 +4,15 @@ import {mount} from 'sentry-test/enzyme';
 import Login from 'app/views/auth/login';
 
 describe('Login', function() {
+  afterAll(function() {
+    MockApiClient.clearMockResponses();
+  });
+
   it('renders a loading indicator', function() {
+    MockApiClient.addMockResponse({
+      url: '/auth/config/',
+    });
+
     const wrapper = mount(<Login />);
 
     expect(wrapper.find('LoadingIndicator').exists()).toBe(true);
diff --git a/tests/js/spec/views/dashboards/widgetChart.spec.jsx b/tests/js/spec/views/dashboards/widgetChart.spec.jsx
index 86ca01d277..b86b43a46b 100644
--- a/tests/js/spec/views/dashboards/widgetChart.spec.jsx
+++ b/tests/js/spec/views/dashboards/widgetChart.spec.jsx
@@ -43,6 +43,10 @@ describe('WidgetChart', function() {
     renderMock.mockClear();
     router.push.mockRestore();
     MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/releases/`,
+      body: [],
+    });
     MockApiClient.addMockResponse({
       url: `/organizations/${organization.slug}/environments/`,
       body: TestStubs.Environments(),
diff --git a/tests/js/spec/views/discover/index.spec.jsx b/tests/js/spec/views/discover/index.spec.jsx
index 564409c5bd..684ccbbfe9 100644
--- a/tests/js/spec/views/discover/index.spec.jsx
+++ b/tests/js/spec/views/discover/index.spec.jsx
@@ -13,6 +13,15 @@ describe('DiscoverContainer', function() {
       url: '/organizations/org-slug/projects/',
       body: [],
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
+      method: 'POST',
+      body: {
+        data: [{tags_key: 'tag1', count: 5}, {tags_key: 'tag2', count: 1}],
+        timing: {},
+        meta: [],
+      },
+    });
   });
 
   afterEach(function() {
@@ -26,15 +35,6 @@ describe('DiscoverContainer', function() {
       features: ['discover'],
     });
     beforeEach(async function() {
-      MockApiClient.addMockResponse({
-        url: '/organizations/org-slug/discover/query/?per_page=1000&cursor=0:0:1',
-        method: 'POST',
-        body: {
-          data: [{tags_key: 'tag1', count: 5}, {tags_key: 'tag2', count: 1}],
-          timing: {},
-          meta: [],
-        },
-      });
       MockApiClient.addMockResponse({
         url: '/organizations/org-slug/projects',
         method: 'GET',
diff --git a/tests/js/spec/views/events/eventsLineChart.spec.jsx b/tests/js/spec/views/events/eventsLineChart.spec.jsx
index eb8b751eae..a3802c6967 100644
--- a/tests/js/spec/views/events/eventsLineChart.spec.jsx
+++ b/tests/js/spec/views/events/eventsLineChart.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 
-import {Client} from 'app/api';
 import {EventsChart} from 'app/views/events/eventsChart';
 import {mockZoomRange} from 'sentry-test/charts';
 import {initializeOrg} from 'sentry-test/initializeOrg';
@@ -12,7 +11,11 @@ describe('EventsChart > EventsLineChart', function() {
 
   beforeEach(function() {
     mockZoomRange(1543449600000, 1543708800000);
-    Client.addMockResponse({
+    MockApiClient.addMockResponse({
+      url: `/organizations/${org.slug}/releases/`,
+      body: [],
+    });
+    MockApiClient.addMockResponse({
       url: `/organizations/${org.slug}/events-stats/`,
       method: 'GET',
       body: {
diff --git a/tests/js/spec/views/eventsV2/results.spec.jsx b/tests/js/spec/views/eventsV2/results.spec.jsx
index 2a3207b6d3..08bad9b8f4 100644
--- a/tests/js/spec/views/eventsV2/results.spec.jsx
+++ b/tests/js/spec/views/eventsV2/results.spec.jsx
@@ -41,11 +41,16 @@ describe('EventsV2 > Results', function() {
       body: [],
     });
     MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/event-stats/',
+      url: '/organizations/org-slug/events-stats/',
+      body: {data: [[123, []]]},
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/recent-searches/',
       body: [],
     });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/recent-searches/',
+      method: 'POST',
       body: [],
     });
     MockApiClient.addMockResponse({
@@ -95,6 +100,10 @@ describe('EventsV2 > Results', function() {
     });
   });
 
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
   it('pagination cursor should be cleared when making a search', function() {
     const organization = TestStubs.Organization({
       features,
diff --git a/tests/js/spec/views/issueList/overview.spec.jsx b/tests/js/spec/views/issueList/overview.spec.jsx
index bdce95896a..55324ace7b 100644
--- a/tests/js/spec/views/issueList/overview.spec.jsx
+++ b/tests/js/spec/views/issueList/overview.spec.jsx
@@ -1645,8 +1645,4 @@ describe('IssueList,', function() {
       expect(wrapper.find(ErrorRobot)).toHaveLength(0);
     });
   });
-
-  describe('Incidents', function() {
-    it.todo('creates an incident by selecting issues from stream');
-  });
 });
diff --git a/tests/js/spec/views/projectInstall/platform.spec.jsx b/tests/js/spec/views/projectInstall/platform.spec.jsx
index 3d53816db5..78f3b231c9 100644
--- a/tests/js/spec/views/projectInstall/platform.spec.jsx
+++ b/tests/js/spec/views/projectInstall/platform.spec.jsx
@@ -40,10 +40,17 @@ describe('ProjectInstallPlatform', function() {
       const props = {
         ...baseProps,
         params: {
+          orgId: baseProps.organization.slug,
+          projectId: baseProps.project.slug,
           platform: 'lua',
         },
       };
 
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/docs/lua/',
+        statusCode: 404,
+      });
+
       const wrapper = shallow(
         <ProjectInstallPlatform {...props} />,
         TestStubs.routerContext([{organization: {id: '1337'}}])
@@ -55,22 +62,6 @@ describe('ProjectInstallPlatform', function() {
       expect(wrapper.find('NotFound')).toHaveLength(1);
     });
 
-    it('should rendering Loading if integration/platform exists', function() {
-      const props = {
-        ...baseProps,
-        params: {
-          platform: 'node-connect',
-        },
-      };
-
-      const wrapper = shallow(
-        <ProjectInstallPlatform {...props} />,
-        TestStubs.routerContext([{organization: {id: '1337'}}])
-      );
-
-      expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
-    });
-
     it('should render documentation', async function() {
       const props = {
         ...baseProps,
@@ -91,6 +82,9 @@ describe('ProjectInstallPlatform', function() {
         TestStubs.routerContext([{organization: {id: '1337'}}])
       );
 
+      // Initially has loading indicator
+      expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+
       await tick();
       wrapper.update();
 
