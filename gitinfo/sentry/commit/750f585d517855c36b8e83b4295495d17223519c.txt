commit 750f585d517855c36b8e83b4295495d17223519c
Author: Kamil Og√≥rek <kamil.ogorek@gmail.com>
Date:   Mon Nov 27 12:01:19 2017 +0100

    feat(processing): Enable Node.js Source Maps

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 7eea62e02b..ff54bd1a1e 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -537,7 +537,7 @@ class Frame(Interface):
         fileloc = self.module or self.filename
         if not fileloc:
             return ''
-        elif platform == 'javascript':
+        elif platform in ('javascript', 'node'):
             # function and fileloc might be unicode here, so let it coerce
             # to a unicode string if needed.
             return '%s(%s)' % (self.function or '?', fileloc)
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 2104d37ac1..6598a7c9ed 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -14,7 +14,8 @@ def preprocess_event(data):
     rewrite_exception(data)
     translate_exception(data)
     fix_culprit(data)
-    inject_device_data(data)
+    if data.get('platform') == 'javascript':
+        inject_device_data(data)
     generate_modules(data)
     return data
 
@@ -25,7 +26,7 @@ def generate_modules(data):
     for info in find_stacktraces_in_data(data):
         for frame in info.stacktrace['frames']:
             platform = frame.get('platform') or data['platform']
-            if platform != 'javascript' or frame.get('module'):
+            if platform not in ('javascript', 'node') or frame.get('module'):
                 continue
             abs_path = frame.get('abs_path')
             if abs_path and abs_path.startswith(('http:', 'https:', 'webpack:', 'app:')):
@@ -131,10 +132,10 @@ class JavascriptPlugin(Plugin2):
     def get_event_preprocessors(self, data, **kwargs):
         # XXX: rewrite_exception we probably also want if the event
         # platform is something else? unsure
-        if data.get('platform') == 'javascript':
+        if data.get('platform') in ('javascript', 'node'):
             return [preprocess_event]
         return []
 
     def get_stacktrace_processors(self, data, stacktrace_infos, platforms, **kwargs):
-        if 'javascript' in platforms:
+        if 'javascript' in platforms or 'node' in platforms:
             return [JavaScriptStacktraceProcessor]
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 705d230416..0cd5c719b7 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -56,7 +56,7 @@ CLEAN_MODULE_RE = re.compile(
 VERSION_RE = re.compile(r'^[a-f0-9]{32}|[a-f0-9]{40}$', re.I)
 NODE_MODULES_RE = re.compile(r'\bnode_modules/')
 SOURCE_MAPPING_URL_RE = re.compile(r'\/\/# sourceMappingURL=(.*)$')
-# the maximum number of remote resources (i.e. sourc eifles) that should be
+# the maximum number of remote resources (i.e. source files) that should be
 # fetched
 MAX_RESOURCE_FETCHES = 100
 
@@ -495,7 +495,7 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
 
     def handles_frame(self, frame, stacktrace_info):
         platform = frame.get('platform') or self.data.get('platform')
-        return (settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and platform == 'javascript')
+        return (settings.SENTRY_SCRAPE_JAVASCRIPT_CONTEXT and platform in ('javascript', 'node'))
 
     def preprocess_frame(self, processable_frame):
         # Stores the resolved token.  This is used to cross refer to other
@@ -517,6 +517,13 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
         if not frame.get('abs_path') or not frame.get('lineno'):
             return
 
+        # can't fetch if this is internal node module as well
+        # therefore we only process user-land frames (starting with /)
+        # or those created by bundle/webpack internals
+        if self.data.get('platform') == 'node' and \
+                not frame.get('abs_path').startswith(('/', 'app:', 'webpack:')):
+            return
+
         errors = cache.get_errors(frame['abs_path'])
         if errors:
             all_errors.extend(errors)
@@ -588,7 +595,7 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                 )
                 source = self.get_sourceview(abs_path)
 
-            if not source:
+            if source is None:
                 errors = cache.get_errors(abs_path)
                 if errors:
                     all_errors.extend(errors)
@@ -639,9 +646,14 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
                     else:
                         filename = filename.split('webpack:///', 1)[-1]
 
-                    # As noted above, '~/' means they're coming from node_modules,
-                    # so these are not app dependencies
-                    if filename.startswith('~/'):
+                    # As noted above:
+                    # * [js/node] '~/' means they're coming from node_modules, so these are not app dependencies
+                    # * [node] sames goes for `./node_modules/`, which is used when bundling node apps
+                    # * [node] and webpack, which includes it's own code to bootstrap all modules and its internals
+                    #   eg. webpack:///webpack/bootstrap, webpack:///external
+                    if filename.startswith('~/') or \
+                            filename.startswith('./node_modules/') or \
+                            not filename.startswith('./'):
                         in_app = False
                     # And conversely, local dependencies start with './'
                     elif filename.startswith('./'):
@@ -791,6 +803,10 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
             # a fetch error that may be confusing.
             if f['abs_path'] == '<anonymous>':
                 continue
+            # we cannot fetch any other files than those uploaded by user
+            if self.data.get('platform') == 'node' and \
+                    not f.get('abs_path').startswith('app:'):
+                continue
             pending_file_list.add(f['abs_path'])
 
         for idx, filename in enumerate(pending_file_list):
diff --git a/src/sentry/models/featureadoption.py b/src/sentry/models/featureadoption.py
index 103adc18c1..46cdcf9b3f 100644
--- a/src/sentry/models/featureadoption.py
+++ b/src/sentry/models/featureadoption.py
@@ -50,7 +50,7 @@ manager.add(
 )
 manager.add(43, "user_tracking", "User Tracking", "code", prerequisite=["first_event"])
 manager.add(44, "custom_tags", "Custom Tags", "code", prerequisite=["first_event"])
-manager.add(45, "source_maps", "Source Maps", "code", prerequisite=["first_event", "javascript"])
+manager.add(45, "source_maps", "Source Maps", "code", prerequisite=["first_event", ("javascript", "node")])
 manager.add(46, "user_feedback", "User Feedback", "code", prerequisite=["user_tracking"])
 # manager.add(47, "api", "API", "code", prerequisite=["first_event"])  #
 # Challenging to determine what organization (i.e. api/0/organizations/)
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index 660dc4f120..432615d26e 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -26,7 +26,7 @@ class OnboardingTask(object):
     SECOND_PLATFORM = 4  # dependent on FIRST_EVENT.
     USER_CONTEXT = 5  # dependent on FIRST_EVENT
     RELEASE_TRACKING = 6  # dependent on FIRST_EVENT
-    SOURCEMAPS = 7  # dependent on RELEASE_TRACKING and one of the platforms being javascript
+    SOURCEMAPS = 7  # dependent on RELEASE_TRACKING and one of the platforms being javascript or node
     USER_REPORTS = 8  # Only for web frameworks
     ISSUE_TRACKER = 9
     NOTIFICATION_SERVICE = 10
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 249626accc..e38c8d030b 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -9,7 +9,7 @@ from __future__ import absolute_import
 
 
 def has_sourcemap(event):
-    if event.platform != 'javascript':
+    if event.platform not in ('javascript', 'node'):
         return False
     data = event.data
 
diff --git a/tests/sentry/lang/javascript/fixtures/node_app.min.js b/tests/sentry/lang/javascript/fixtures/node_app.min.js
new file mode 100644
index 0000000000..636a146b01
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/node_app.min.js
@@ -0,0 +1,2 @@
+!function(n){function t(e){if(r[e])return r[e].exports;var o=r[e]={i:e,l:!1,exports:{}};return n[e].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{configurable:!1,enumerable:!0,get:e})},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,t){return Object.prototype.hasOwnProperty.call(n,t)},t.p="",t(t.s=0)}([function(n,t,r){var e=r(1);setTimeout(function(){e()},1e3)},function(n,t,r){function e(){o()}var o=r(2);n.exports=e},function(n,t,r){var e=r(3);n.exports=function(){return e.join("foo","bar")}},function(n,t){n.exports=require("path")}]);
+//# sourceMappingURL=app.bundle.js.map
\ No newline at end of file
diff --git a/tests/sentry/lang/javascript/fixtures/node_app.min.js.map b/tests/sentry/lang/javascript/fixtures/node_app.min.js.map
new file mode 100644
index 0000000000..15a94ef9d3
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/node_app.min.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["webpack:///app.bundle.js","webpack:///webpack/bootstrap b4563923c1a5a5292138","webpack:///./index.js","webpack:///./src/foo.js","webpack:///./src/bar.js","webpack:///external \"path\""],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","foo","setTimeout","bar","path","join","require"],"mappings":"CAAS,SAAUA,GCInB,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAE,OAGA,IAAAC,GAAAF,EAAAD,IACAI,EAAAJ,EACAK,GAAA,EACAH,WAUA,OANAJ,GAAAE,GAAAM,KAAAH,EAAAD,QAAAC,IAAAD,QAAAH,GAGAI,EAAAE,GAAA,EAGAF,EAAAD,QAvBA,GAAAD,KA4BAF,GAAAQ,EAAAT,EAGAC,EAAAS,EAAAP,EAGAF,EAAAU,EAAA,SAAAP,EAAAQ,EAAAC,GACAZ,EAAAa,EAAAV,EAAAQ,IACAG,OAAAC,eAAAZ,EAAAQ,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAf,GACA,GAAAQ,GAAAR,KAAAgB,WACA,WAA2B,MAAAhB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAJ,GAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDtB,EAAAyB,EAAA,GAGAzB,IAAA0B,EAAA,KDMM,SAAUtB,EAAQD,EAASH,GEnEjC,GAAA2B,GAAA3B,EAAA,EAEA4B,YAAA,WACAD,KACC,MF2EK,SAAUvB,EAAQD,EAASH,GG7EjC,QAAA2B,KACAE,IAHA,GAAAA,GAAA7B,EAAA,EAMAI,GAAAD,QAAAwB,GHsFM,SAAUvB,EAAQD,EAASH,GI5FjC,GAAA8B,GAAA9B,EAAA,EAEAI,GAAAD,QAAA,WACA,MAAA2B,GAAAC,KAAA,eJoGM,SAAU3B,EAAQD,GKvGxBC,EAAAD,QAAA6B,QAAA","file":"app.bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar foo = __webpack_require__(1);\n\nsetTimeout(function () {\n  foo();\n}, 1000);\n\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar bar = __webpack_require__(2);\n\nfunction foo() {\n  bar();\n}\n\nmodule.exports = foo;\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar path = __webpack_require__(3);\n\nmodule.exports = function bar() {\n  return path.join('foo', 'bar');\n}\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"path\");\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// app.bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b4563923c1a5a5292138","var foo = require('./src/foo.js');\n\nsetTimeout(function () {\n  foo();\n}, 1000);\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./index.js\n// module id = 0\n// module chunks = 0","var bar = require('./bar.js');\n\nfunction foo() {\n  bar();\n}\n\nmodule.exports = foo;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/foo.js\n// module id = 1\n// module chunks = 0","var path = require('path');\n\nmodule.exports = function bar() {\n  return path.join('foo', 'bar');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/bar.js\n// module id = 2\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}
\ No newline at end of file
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 92a99c71d7..274367e227 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -1112,3 +1112,173 @@ class JavascriptIntegrationTest(TestCase):
                 'type': 'js_invalid_content'
             }
         ]
+
+    @patch('sentry.lang.javascript.processor.fetch_file')
+    def test_foo(self, mock_fetch_file):
+        data = {
+            'message': 'hello',
+            'platform': 'node',
+            'sentry.interfaces.Exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'node_bootstrap.js',
+                                    'filename': 'node_bootstrap.js',
+                                    'lineno': 1,
+                                    'colno': 38,
+                                },
+                                {
+                                    'abs_path': 'timers.js',
+                                    'filename': 'timers.js',
+                                    'lineno': 1,
+                                    'colno': 39,
+                                },
+                                {
+                                    'abs_path': 'webpack:///internal',
+                                    'filename': 'internal',
+                                    'lineno': 1,
+                                    'colno': 43,
+                                },
+                                {
+                                    'abs_path': 'webpack:///~/some_dep/file.js',
+                                    'filename': 'file.js',
+                                    'lineno': 1,
+                                    'colno': 41,
+                                },
+                                {
+                                    'abs_path': 'webpack:///./node_modules/file.js',
+                                    'filename': 'file.js',
+                                    'lineno': 1,
+                                    'colno': 42,
+                                },
+                                {
+                                    'abs_path': 'app:///file.js',
+                                    'filename': 'file.js',
+                                    'lineno': 1,
+                                    'colno': 40,
+                                },
+                            ],
+                        },
+                    }
+                ],
+            }
+        }
+
+        mock_fetch_file.return_value.body = '\n'.join('hello world')
+        mock_fetch_file.return_value.encoding = None
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        assert mock_fetch_file.call_count == 3
+
+        args, kwargs = mock_fetch_file.call_args_list[0]
+        assert args[0] == 'app:///file.js'
+        args, kwargs = mock_fetch_file.call_args_list[1]
+        assert args[0] == 'webpack:///~/some_dep/file.js'
+        args, kwargs = mock_fetch_file.call_args_list[2]
+        assert args[0] == 'webpack:///./node_modules/file.js'
+        args, kwargs = mock_fetch_file.call_args_list[3]
+        assert args[0] == 'webpack:///internal',
+
+        event = Event.objects.get()
+
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+
+        assert not frame_list[0].in_app
+        assert not frame_list[1].in_app
+        assert not frame_list[2].in_app
+        assert not frame_list[3].in_app
+        assert not frame_list[4].in_app
+        assert frame_list[5].in_app
+
+    @responses.activate
+    def test_bar(self):
+        responses.add(
+            responses.GET,
+            'http://example.com/node_app.min.js',
+            body=load_fixture('node_app.min.js'),
+            content_type='application/javascript; charset=utf-8'
+        )
+        responses.add(
+            responses.GET,
+            'http://example.com/node_app.min.js.map',
+            body=load_fixture('node_app.min.js.map'),
+            content_type='application/javascript; charset=utf-8'
+        )
+
+        data = {
+            'message': 'hello',
+            'platform': 'node',
+            'sentry.interfaces.Exception': {
+                'values': [
+                    {
+                        'type': 'Error',
+                        'stacktrace': {
+                            'frames': [
+                                {
+                                    'abs_path': 'node_bootstrap.js',
+                                    'filename': 'node_bootstrap.js',
+                                    'lineno': 1,
+                                    'colno': 38,
+                                },
+                                {
+                                    'abs_path': 'timers.js',
+                                    'filename': 'timers.js',
+                                    'lineno': 1,
+                                    'colno': 39,
+                                },
+                                {
+                                    'abs_path': 'webpack:///internal',
+                                    'filename': 'internal',
+                                    'lineno': 1,
+                                    'colno': 43,
+                                },
+                                {
+                                    'abs_path': 'webpack:///~/some_dep/file.js',
+                                    'filename': 'file.js',
+                                    'lineno': 1,
+                                    'colno': 41,
+                                },
+                                {
+                                    'abs_path': 'webpack:///./node_modules/file.js',
+                                    'filename': 'file.js',
+                                    'lineno': 1,
+                                    'colno': 42,
+                                },
+                                {
+                                    'abs_path': 'http://example.com/node_app.min.js',
+                                    'filename': 'node_app.min.js',
+                                    'lineno': 1,
+                                    'colno': 40,
+                                },
+                            ],
+                        },
+                    }
+                ],
+            }
+        }
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        event = Event.objects.get()
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+        raw_frame_list = exception.values[0].raw_stacktrace.frames
+
+        assert not frame_list[0].in_app
+        assert not frame_list[1].in_app
+        assert not frame_list[2].in_app
+        assert not frame_list[3].in_app
+        assert not frame_list[4].in_app
+        assert frame_list[5].in_app
+
+        # Since we couldn't expand source for the 1st and 2nd frame, both
+        # its raw and original form should be identical
+        assert raw_frame_list[0] == frame_list[0]
+        assert raw_frame_list[1] == frame_list[1]
