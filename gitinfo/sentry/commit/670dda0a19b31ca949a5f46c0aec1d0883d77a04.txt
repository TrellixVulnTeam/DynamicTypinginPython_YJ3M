commit 670dda0a19b31ca949a5f46c0aec1d0883d77a04
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Apr 22 11:23:30 2020 -0700

    fix(mail): Fix missed migration state. (#18388)
    
    Forgot to generate a state migration in https://github.com/getsentry/sentry/pull/17885

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 31e054593c..6fcb1e3db7 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0067_migrate_rules_alert_targeting
+sentry: 0068_project_default_flags
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/migrations/0068_project_default_flags.py b/src/sentry/migrations/0068_project_default_flags.py
new file mode 100644
index 0000000000..b224d6b953
--- /dev/null
+++ b/src/sentry/migrations/0068_project_default_flags.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-04-21 21:08
+from __future__ import unicode_literals
+
+import bitfield.models
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+    dependencies = [("sentry", "0067_migrate_rules_alert_targeting")]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            state_operations=[
+                migrations.AlterField(
+                    model_name="project",
+                    name="flags",
+                    field=bitfield.models.BitField(
+                        (
+                            (b"has_releases", b"This Project has sent release data"),
+                            (
+                                b"has_issue_alerts_targeting",
+                                b"This Project has issue alerts targeting",
+                            ),
+                            (b"has_transactions", b"This Project has sent transactions"),
+                        ),
+                        default=2,
+                        null=True,
+                    ),
+                )
+            ]
+        )
+    ]
