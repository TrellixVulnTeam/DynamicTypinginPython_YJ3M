commit b826ca7ab590bad0b02f8ce08f991fdc374884db
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Oct 10 09:04:00 2018 -0700

    feat(ui): Make "Route source" in search context aware (ISSUE-138) (#9998)
    
    Routes in search should be context aware (e.g. features, access, etc)
    
    Fixes https://getsentry.atlassian.net/browse/ISSUE-138

diff --git a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
index f532031164..72271c7f80 100644
--- a/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/routeSource.jsx
@@ -3,10 +3,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
+import SentryTypes from 'app/sentryTypes';
 import accountSettingsNavigation from 'app/views/settings/account/navigationConfiguration';
 import organizationSettingsNavigation from 'app/views/settings/organization/navigationConfiguration';
 import projectSettingsNavigation from 'app/views/settings/project/navigationConfiguration';
 import replaceRouterParams from 'app/utils/replaceRouterParams';
+import withLatestContext from 'app/utils/withLatestContext';
 
 // navigation configuration can currently be either:
 // * an array of {name: string, items: Array<{NavItem}>} OR
@@ -14,16 +16,10 @@ import replaceRouterParams from 'app/utils/replaceRouterParams';
 //   (some navigation items require additional context, e.g. a badge based on a `project` property)
 //
 // We need to go through all navigation configurations and get a flattened list of all navigation item objects
-const navigationItems = flattenDepth(
-  [
-    accountSettingsNavigation,
-    projectSettingsNavigation,
-    organizationSettingsNavigation,
-  ].map(config =>
-    (Array.isArray(config) ? config : config({project: {}})).map(({items}) => items)
-  ),
-  2
-);
+const mapFunc = (config, context = {}) =>
+  (Array.isArray(config) ? config : config(context)).map(({items}) =>
+    items.filter(({show, ...rest}) => (typeof show === 'function' ? show(context) : true))
+  );
 
 class RouteSource extends React.Component {
   static propTypes = {
@@ -36,6 +32,9 @@ class RouteSource extends React.Component {
     // Array of routes to search
     searchMap: PropTypes.array,
 
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+
     /**
      * Render function that passes:
      * `isLoading` - loading state
@@ -50,17 +49,43 @@ class RouteSource extends React.Component {
     searchOptions: {},
   };
 
-  constructor(...args) {
-    super(...args);
+  constructor(props) {
+    super(props);
 
     this.state = {
       fuzzy: null,
     };
 
-    this.createSearch(navigationItems);
+    this.createSearch();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (
+      prevProps.project === this.props.project &&
+      prevProps.organization === this.props.organization
+    )
+      return;
+
+    this.createSearch();
   }
 
-  async createSearch(searchMap) {
+  async createSearch() {
+    let {project, organization} = this.props;
+    const searchMap = flattenDepth(
+      [
+        mapFunc(accountSettingsNavigation),
+        mapFunc(projectSettingsNavigation, {
+          project: project || {},
+          features: new Set((project && project.features) || []),
+        }),
+        mapFunc(organizationSettingsNavigation, {
+          organization: organization || {},
+          access: new Set((organization && organization.access) || []),
+          features: new Set((organization && organization.features) || []),
+        }),
+      ],
+      2
+    );
     this.setState({
       fuzzy: await createFuzzySearch(searchMap || [], {
         ...this.props.searchOptions,
@@ -93,4 +118,5 @@ class RouteSource extends React.Component {
   }
 }
 
-export default RouteSource;
+export default withLatestContext(RouteSource);
+export {RouteSource};
diff --git a/tests/js/spec/components/search/sources/routeSource.spec.jsx b/tests/js/spec/components/search/sources/routeSource.spec.jsx
index 175f8b4444..05764b2112 100644
--- a/tests/js/spec/components/search/sources/routeSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/routeSource.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import RouteSource from 'app/components/search/sources/routeSource';
+import {RouteSource} from 'app/components/search/sources/routeSource';
 
 describe('RouteSource', function() {
   let wrapper;
