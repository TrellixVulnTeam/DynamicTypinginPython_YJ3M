commit 0634459983e3f365ba12125e46a7ff2cde0cb26a
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Dec 6 13:08:09 2018 -0800

    ref(search): Add support for multiple environments to search backends

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 1adf2f2c07..2b77f0474c 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -277,7 +277,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             query_kwargs.update(extra_query_kwargs)
 
         try:
-            query_kwargs['environment'] = self._get_environment_from_request(
+            environment = self._get_environment_from_request(
                 request,
                 project.organization_id,
             )
@@ -286,6 +286,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             # from `sentry.api.paginator.BasePaginator.get_result`.
             result = CursorResult([], None, None, hits=0, max_hits=1000)
         else:
+            query_kwargs['environments'] = [environment] if environment is not None else environment
             result = search.query(**query_kwargs)
         return result, query_kwargs
 
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index 2a25a1b1bc..65e8c40e6e 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -21,6 +21,6 @@ class SearchBackend(Service):
     def __init__(self, **options):
         pass
 
-    def query(self, projects, tags=None, environment=None, sort_by='date', limit=100,
+    def query(self, projects, tags=None, environments=None, sort_by='date', limit=100,
               cursor=None, count_hits=False, paginator_options=None, **parameters):
         raise NotImplementedError
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 8d9ab3359a..a6c7ccf739 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -186,7 +186,7 @@ def assigned_to_filter(queryset, actor, projects):
     )
 
 
-def get_latest_release(projects, environment):
+def get_latest_release(projects, environments):
     from sentry.models import Release
 
     release_qs = Release.objects.filter(
@@ -194,9 +194,10 @@ def get_latest_release(projects, environment):
         projects__in=projects,
     )
 
-    if environment is not None:
+    if environments is not None:
         release_qs = release_qs.filter(
-            releaseprojectenvironment__environment__id=environment.id
+            releaseprojectenvironment__environment__id__in=[
+                environment.id for environment in environments]
         )
 
     return release_qs.extra(select={
@@ -207,7 +208,7 @@ def get_latest_release(projects, environment):
 
 
 class DjangoSearchBackend(SearchBackend):
-    def query(self, projects, tags=None, environment=None, sort_by='date', limit=100,
+    def query(self, projects, tags=None, environments=None, sort_by='date', limit=100,
               cursor=None, count_hits=False, paginator_options=None, **parameters):
 
         from sentry.models import Group, GroupAssignee, GroupStatus, GroupSubscription, Release
@@ -224,10 +225,10 @@ class DjangoSearchBackend(SearchBackend):
 
         try:
             if tags.get('sentry:release') == 'latest':
-                tags['sentry:release'] = get_latest_release(projects, environment)
+                tags['sentry:release'] = get_latest_release(projects, environments)
 
             if parameters.get('first_release') == 'latest':
-                parameters['first_release'] = get_latest_release(projects, environment)
+                parameters['first_release'] = get_latest_release(projects, environments)
         except Release.DoesNotExist:
             # no matches could possibly be found from this point on
             return Paginator(Group.objects.none()).get_result()
@@ -294,19 +295,20 @@ class DjangoSearchBackend(SearchBackend):
         # seemed better to handle all the shared initialization and then handoff to the
         # actual backend.
         return self._query(projects, retention_window_start, group_queryset, tags,
-                           environment, sort_by, limit, cursor, count_hits,
+                           environments, sort_by, limit, cursor, count_hits,
                            paginator_options, **parameters)
 
-    def _query(self, projects, retention_window_start, group_queryset, tags, environment,
+    def _query(self, projects, retention_window_start, group_queryset, tags, environments,
                sort_by, limit, cursor, count_hits, paginator_options, **parameters):
 
         from sentry.models import (Group, Environment, Event, GroupEnvironment, Release)
 
-        # this backend only supports search within one project
-        if len(projects) != 1:
+        # this backend only supports search within one project/environment
+        if len(projects) != 1 or (environments is not None and len(environments) > 1):
             raise NotImplementedError
 
         project = projects[0]
+        environment = environments[0] if environments is not None else environments
 
         if environment is not None:
             if 'environment' in tags:
diff --git a/src/sentry/search/snuba/backend.py b/src/sentry/search/snuba/backend.py
index 55ac83744b..a117815e60 100644
--- a/src/sentry/search/snuba/backend.py
+++ b/src/sentry/search/snuba/backend.py
@@ -133,7 +133,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
     def _get_project_id_from_key(self, key):
         return int(key.split(':')[2])
 
-    def _query(self, projects, retention_window_start, group_queryset, tags, environment,
+    def _query(self, projects, retention_window_start, group_queryset, tags, environments,
                sort_by, limit, cursor, count_hits, paginator_options, **parameters):
 
         # TODO: Product decision: we currently search Group.message to handle
@@ -142,7 +142,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
         # differ.
 
         # TODO: It's possible `first_release` could be handled by Snuba.
-        if environment is not None:
+        if environments is not None:
             group_queryset = ds.QuerySetBuilder({
                 'first_release': ds.CallbackCondition(
                     lambda queryset, version: queryset.extra(
@@ -169,11 +169,12 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
                             ds.get_sql_column(Group, 'id'),
                             ds.get_sql_column(GroupEnvironment, 'group_id'),
                         ),
-                        u'{} = %s'.format(
+                        u'{} IN ({})'.format(
                             ds.get_sql_column(GroupEnvironment, 'environment_id'),
+                            ', '.join(['%s' for e in environments])
                         ),
                     ],
-                    params=[environment.id],
+                    params=[environment.id for environment in environments],
                     tables=[GroupEnvironment._meta.db_table],
                 ),
                 parameters,
@@ -203,7 +204,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
             if cursor is None \
                     and sort_by == 'date' \
                     and not tags \
-                    and not environment \
+                    and not environments \
                     and not any(param in parameters for param in [
                         'age_from', 'age_to', 'last_seen_from',
                         'last_seen_to', 'times_seen', 'times_seen_lower',
@@ -360,7 +361,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
                 start=start,
                 end=end,
                 project_ids=[p.id for p in projects],
-                environment_id=environment and environment.id,
+                environment_ids=environments and [environment.id for environment in environments],
                 tags=tags,
                 sort_field=sort_field,
                 cursor=cursor,
@@ -441,7 +442,7 @@ class SnubaSearchBackend(ds.DjangoSearchBackend):
         return paginator_results
 
 
-def snuba_search(start, end, project_ids, environment_id, tags,
+def snuba_search(start, end, project_ids, environment_ids, tags,
                  sort_field, cursor, candidate_ids, limit, offset, **parameters):
     """
     This function doesn't strictly benefit from or require being pulled out of the main
@@ -459,8 +460,8 @@ def snuba_search(start, end, project_ids, environment_id, tags,
         'project_id': project_ids,
     }
 
-    if environment_id is not None:
-        filters['environment'] = [environment_id]
+    if environment_ids is not None:
+        filters['environment'] = environment_ids
 
     if candidate_ids is not None:
         filters['issue'] = candidate_ids
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 878aaeccf0..8e36739304 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -172,19 +172,19 @@ class DjangoSearchBackendTest(TestCase):
     def test_query_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='foo')
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='bar')
         assert set(results) == set([])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             query='bar')
         assert set(results) == set([self.group2])
 
@@ -215,28 +215,28 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='new',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='freq',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='priority',
         )
         assert list(results) == [self.group2, self.group1]
@@ -251,19 +251,19 @@ class DjangoSearchBackendTest(TestCase):
     def test_status_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([])
 
@@ -304,25 +304,25 @@ class DjangoSearchBackendTest(TestCase):
     def test_tags_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={
                 'environment': ANY,
                 'server': ANY,
@@ -331,19 +331,19 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             tags={'url': 'http://example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'url': 'http://example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': 'bar.example.com'})
         assert set(results) == set([])
 
@@ -354,13 +354,13 @@ class DjangoSearchBackendTest(TestCase):
     def test_bookmarked_by_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             bookmarked_by=self.user)
         assert set(results) == set([])
 
@@ -392,7 +392,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             count_hits=True,
@@ -402,7 +402,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             cursor=results.next,
@@ -413,7 +413,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             cursor=results.next,
@@ -449,7 +449,7 @@ class DjangoSearchBackendTest(TestCase):
     def test_age_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
         )
@@ -457,7 +457,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_to=self.group1.first_seen,
             age_to_inclusive=True,
         )
@@ -465,7 +465,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -483,7 +483,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -491,7 +491,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['development'],
+            environments=[self.environments['development']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -524,7 +524,7 @@ class DjangoSearchBackendTest(TestCase):
     def test_last_seen_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
         )
@@ -532,7 +532,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_to=self.group1.last_seen,
             last_seen_to_inclusive=True,
         )
@@ -540,7 +540,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -558,7 +558,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -566,7 +566,7 @@ class DjangoSearchBackendTest(TestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['development'],
+            environments=[self.environments['development']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -599,21 +599,21 @@ class DjangoSearchBackendTest(TestCase):
     def test_date_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
         )
@@ -629,19 +629,19 @@ class DjangoSearchBackendTest(TestCase):
     def test_unassigned_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             unassigned=True)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             unassigned=False)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             unassigned=False)
         assert set(results) == set([])
 
@@ -681,13 +681,13 @@ class DjangoSearchBackendTest(TestCase):
     def test_assigned_to_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             assigned_to=self.user)
         assert set(results) == set([])
 
@@ -701,14 +701,14 @@ class DjangoSearchBackendTest(TestCase):
     def test_subscribed_by_with_environment(self):
         results = self.backend.query(
             [self.group1.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.group1.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             subscribed_by=self.user,
         )
         assert set(results) == set([])
@@ -759,11 +759,11 @@ class DjangoSearchBackendTest(TestCase):
 
         # latest in environment
         environment = self.environment
-        result = get_latest_release([self.project], environment)
+        result = get_latest_release([self.project], [environment])
         assert result == new.version
 
         with pytest.raises(Release.DoesNotExist):
             # environment with no releases
             environment = self.create_environment()
-            result = get_latest_release([self.project], environment)
+            result = get_latest_release([self.project], [environment])
             assert result == new.version
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index a2aaa25494..51e5aa7e46 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -170,19 +170,19 @@ class SnubaSearchTest(SnubaTestCase):
     def test_query_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='foo')
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='bar')
         assert set(results) == set([])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             query='bar')
         assert set(results) == set([self.group2])
 
@@ -190,13 +190,13 @@ class SnubaSearchTest(SnubaTestCase):
         self.set_up_multi_project()
         results = self.backend.query(
             [self.project, self.project2],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='foo')
         assert set(results) == set([self.group1, self.group_p2])
 
         results = self.backend.query(
             [self.project, self.project2],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             query='bar')
         assert set(results) == set([])
 
@@ -245,28 +245,28 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='new',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='freq',
         )
         assert list(results) == [self.group2, self.group1]
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='priority',
         )
         assert list(results) == [self.group2, self.group1]
@@ -281,19 +281,19 @@ class SnubaSearchTest(SnubaTestCase):
     def test_status_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             status=GroupStatus.UNRESOLVED)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             status=GroupStatus.RESOLVED)
         assert set(results) == set([])
 
@@ -334,37 +334,37 @@ class SnubaSearchTest(SnubaTestCase):
     def test_tags_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': 'example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': ANY})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             tags={'url': 'http://example.com'})
         assert set(results) == set([])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'url': 'http://example.com'})
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             tags={'server': 'bar.example.com'})
         assert set(results) == set([])
 
@@ -375,13 +375,13 @@ class SnubaSearchTest(SnubaTestCase):
     def test_bookmarked_by_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             bookmarked_by=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             bookmarked_by=self.user)
         assert set(results) == set([])
 
@@ -456,7 +456,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             count_hits=True,
@@ -466,7 +466,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             cursor=results.next,
@@ -477,7 +477,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             sort_by='date',
             limit=1,
             cursor=results.next,
@@ -513,7 +513,7 @@ class SnubaSearchTest(SnubaTestCase):
     def test_age_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=True,
         )
@@ -521,7 +521,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_to=self.group1.first_seen,
             age_to_inclusive=True,
         )
@@ -529,7 +529,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -550,7 +550,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -558,7 +558,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['development'],
+            environments=[self.environments['development']],
             age_from=self.group1.first_seen,
             age_from_inclusive=False,
         )
@@ -610,7 +610,7 @@ class SnubaSearchTest(SnubaTestCase):
     def test_last_seen_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
         )
@@ -618,7 +618,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_to=self.group1.last_seen,
             last_seen_to_inclusive=True,
         )
@@ -626,7 +626,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -649,7 +649,7 @@ class SnubaSearchTest(SnubaTestCase):
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -658,7 +658,7 @@ class SnubaSearchTest(SnubaTestCase):
         results = self.backend.query(
             [self.project],
             date_to=self.group1.last_seen + timedelta(days=1),
-            environment=self.environments['development'],
+            environments=[self.environments['development']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=False,
         )
@@ -667,7 +667,7 @@ class SnubaSearchTest(SnubaTestCase):
         results = self.backend.query(
             [self.project],
             date_to=self.group1.last_seen + timedelta(days=1),
-            environment=self.environments['development'],
+            environments=[self.environments['development']],
             last_seen_from=self.group1.last_seen,
             last_seen_from_inclusive=True,
         )
@@ -700,21 +700,21 @@ class SnubaSearchTest(SnubaTestCase):
     def test_date_filter_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             date_from=self.event2.datetime,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             date_to=self.event1.datetime + timedelta(minutes=1),
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             date_from=self.event1.datetime,
             date_to=self.event2.datetime + timedelta(minutes=1),
         )
@@ -730,19 +730,19 @@ class SnubaSearchTest(SnubaTestCase):
     def test_unassigned_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             unassigned=True)
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             unassigned=False)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             unassigned=False)
         assert set(results) == set([])
 
@@ -782,13 +782,13 @@ class SnubaSearchTest(SnubaTestCase):
     def test_assigned_to_with_environment(self):
         results = self.backend.query(
             [self.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             assigned_to=self.user)
         assert set(results) == set([self.group2])
 
         results = self.backend.query(
             [self.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             assigned_to=self.user)
         assert set(results) == set([])
 
@@ -802,14 +802,14 @@ class SnubaSearchTest(SnubaTestCase):
     def test_subscribed_by_with_environment(self):
         results = self.backend.query(
             [self.group1.project],
-            environment=self.environments['production'],
+            environments=[self.environments['production']],
             subscribed_by=self.user,
         )
         assert set(results) == set([self.group1])
 
         results = self.backend.query(
             [self.group1.project],
-            environment=self.environments['staging'],
+            environments=[self.environments['staging']],
             subscribed_by=self.user,
         )
         assert set(results) == set([])
@@ -860,13 +860,13 @@ class SnubaSearchTest(SnubaTestCase):
 
         # latest in environment
         environment = self.environment
-        result = get_latest_release([self.project], environment)
+        result = get_latest_release([self.project], [environment])
         assert result == new.version
 
         with pytest.raises(Release.DoesNotExist):
             # environment with no releases
             environment = self.create_environment()
-            result = get_latest_release([self.project], environment)
+            result = get_latest_release([self.project], [environment])
             assert result == new.version
 
     @mock.patch('sentry.utils.snuba.query')
@@ -974,7 +974,7 @@ class SnubaSearchTest(SnubaTestCase):
         try:
             results = self.backend.query(
                 [self.project],
-                environment=self.environments['production'],
+                environments=[self.environments['production']],
                 tags={'server': 'example.com'})
             assert set(results) == set([self.group1])
         finally:
