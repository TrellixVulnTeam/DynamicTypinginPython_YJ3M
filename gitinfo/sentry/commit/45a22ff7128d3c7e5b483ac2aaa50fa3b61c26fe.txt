commit 45a22ff7128d3c7e5b483ac2aaa50fa3b61c26fe
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Feb 8 11:49:46 2018 -0800

    feat(api): Move two-factor account security into rest API (#7113)
    
    * fix sudo_required on GET endpoints
    * make sure to use request.user
    * clear lost passwords when you enroll

diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
index e3368e5861..592a7f5b76 100644
--- a/src/sentry/api/endpoints/user_authenticator_details.py
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -1,28 +1,103 @@
 from __future__ import absolute_import
 
 from django.db import transaction
+from rest_framework import status
 from rest_framework.response import Response
 
 from sentry.api.bases.user import UserEndpoint
-from sentry.api.permissions import SuperuserPermission
+from sentry.api.decorators import sudo_required
+from sentry.api.serializers import serialize
 from sentry.models import Authenticator
 from sentry.security import capture_security_activity
 
 
 class UserAuthenticatorDetailsEndpoint(UserEndpoint):
-    # XXX(dcramer): this requires superuser until we sort out how it will be
-    # used from the React app (which will require some kind of double
-    # verification)
-    permission_classes = (SuperuserPermission, )
+    @sudo_required
+    def get(self, request, user, auth_id):
+        """
+        Get Authenticator Interface
+        ```````````````````````````
 
+        Retrieves authenticator interface details for user depending on user enrollment status
+
+        :pparam string user_id: user id or "me" for current user
+        :pparam string auth_id: authenticator model id
+
+        :auth: required
+        """
+
+        try:
+            authenticator = Authenticator.objects.get(user=user, id=auth_id)
+        except (ValueError, Authenticator.DoesNotExist):
+            return Response(status=status.HTTP_404_NOT_FOUND)
+
+        interface = authenticator.interface
+
+        # User is enrolled to auth interface:
+        # - display interface details
+        # - show enrolled specific details like:
+        #    - created at, last used dates
+        #    - phone number for SMS
+        #    - recovery codes
+        response = serialize(interface)
+
+        if interface.interface_id == 'recovery':
+            response['codes'] = interface.get_unused_codes()
+        if interface.interface_id == 'sms':
+            response['phone'] = interface.phone_number
+        if interface.interface_id == 'u2f':
+            response['devices'] = interface.get_registered_devices()
+
+        return Response(response)
+
+    @sudo_required
+    def put(self, request, user, auth_id):
+        """
+        Modify authenticator interface
+        ``````````````````````````````
+
+        Currently, only supports regenerating recovery codes
+
+        :pparam string user_id: user id or 'me' for current user
+        :pparam int auth_id: authenticator model id
+
+        :auth required:
+        """
+
+        try:
+            authenticator = Authenticator.objects.get(
+                user=user,
+                id=auth_id,
+            )
+        except (ValueError, Authenticator.DoesNotExist):
+            return Response(status=status.HTTP_404_NOT_FOUND)
+
+        interface = authenticator.interface
+
+        if interface.interface_id == 'recovery':
+            interface.regenerate_codes()
+
+        return Response(serialize(interface))
+
+    @sudo_required
     def delete(self, request, user, auth_id):
+        """
+        Remove authenticator
+        ````````````````````
+
+        :pparam string user_id: user id or 'me' for current user
+        :pparam string auth_id: authenticator model id
+
+        :auth required:
+        """
+
         try:
             authenticator = Authenticator.objects.get(
                 user=user,
                 id=auth_id,
             )
-        except Authenticator.DoesNotExist:
-            return Response(status=404)
+        except (ValueError, Authenticator.DoesNotExist):
+            return Response(status=status.HTTP_404_NOT_FOUND)
 
         with transaction.atomic():
             authenticator.delete()
@@ -62,4 +137,4 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
                 send_email=not authenticator.interface.is_backup_interface,
             )
 
-        return Response(status=204)
+        return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/endpoints/user_authenticator_enroll.py b/src/sentry/api/endpoints/user_authenticator_enroll.py
new file mode 100644
index 0000000000..1d232362fe
--- /dev/null
+++ b/src/sentry/api/endpoints/user_authenticator_enroll.py
@@ -0,0 +1,205 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+import petname
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.decorators import sudo_required
+from sentry.api.serializers import serialize
+from sentry.models import Authenticator
+from sentry.security import capture_security_activity
+
+
+ALREADY_ENROLLED_ERR = {'details': 'Already enrolled'}
+INVALID_OTP_ERR = {'details': 'Invalid OTP'},
+SEND_SMS_ERR = {'details': 'Error sending SMS'}
+
+
+class TotpRestSerializer(serializers.Serializer):
+    otp = serializers.CharField(
+        label='One-time password',
+        help_text='Code from authenticator',
+        required=True,
+        max_length=20
+    )
+
+
+class SmsRestSerializer(serializers.Serializer):
+    phone = serializers.CharField(
+        label="Phone number",
+        help_text="Phone number to send SMS code",
+        required=True,
+        max_length=20,
+    )
+    otp = serializers.CharField(
+        label='One-time password',
+        help_text='Code from authenticator',
+        required=False,
+        max_length=20
+    )
+
+
+class U2fRestSerializer(serializers.Serializer):
+    deviceName = serializers.CharField(
+        label='Device name',
+        required=False,
+        max_length=60,
+        default=lambda: petname.Generate(2, ' ', letters=10).title(),
+    )
+    challenge = serializers.CharField(
+        required=True,
+    )
+    response = serializers.CharField(
+        required=True,
+    )
+
+serializer_map = {
+    'totp': TotpRestSerializer,
+    'sms': SmsRestSerializer,
+    'u2f': U2fRestSerializer,
+}
+
+
+def get_serializer_field_metadata(serializer, fields=None):
+    """Returns field metadata for serializer"""
+    meta = []
+    for field in serializer.base_fields:
+        if fields is None or field in fields:
+            serialized_field = dict(serializer.base_fields[field].metadata())
+            serialized_field['name'] = field
+            serialized_field['defaultValue'] = serializer.base_fields[field].get_default_value()
+            meta.append(serialized_field)
+
+    return meta
+
+
+class UserAuthenticatorEnrollEndpoint(UserEndpoint):
+    @sudo_required
+    def get(self, request, user, interface_id):
+        """
+        Get Authenticator Interface
+        ```````````````````````````
+
+        Retrieves authenticator interface details for user depending on user enrollment status
+
+        :pparam string user_id: user id or "me" for current user
+        :pparam string interface_id: interface id
+
+        :auth: required
+        """
+
+        interface = Authenticator.objects.get_interface(user, interface_id)
+
+        # Not all interfaces allow multi enrollment
+        if interface.is_enrolled and not interface.allow_multi_enrollment:
+            return Response(ALREADY_ENROLLED_ERR, status=status.HTTP_400_BAD_REQUEST)
+
+        # User is not enrolled in auth interface:
+        # - display configuration form
+        response = serialize(interface)
+        response['form'] = get_serializer_field_metadata(
+            serializer_map[interface_id]
+        )
+
+        # U2fInterface has no 'secret' attribute
+        try:
+            response['secret'] = interface.secret
+        except AttributeError:
+            pass
+
+        if interface_id == 'totp':
+            response['qrcode'] = interface.get_provision_qrcode(user.email)
+
+        if interface_id == 'u2f':
+            response['challenge'] = interface.start_enrollment()
+
+        return Response(response)
+
+    @sudo_required
+    def post(self, request, user, interface_id):
+        """
+        Enroll in authenticator interface
+        `````````````````````````````````
+
+        :pparam string user_id: user id or "me" for current user
+        :pparam string interface_id: interface id
+
+        :auth: required
+        """
+
+        # Using `request.user` here because superuser should not be able to set a user's 2fa
+
+        # start activation
+        serializer_cls = serializer_map.get(interface_id, None)
+
+        if serializer_cls is None:
+            return Response(status=status.HTTP_404_NOT_FOUND)
+
+        serializer = serializer_cls(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        interface = Authenticator.objects.get_interface(request.user, interface_id)
+
+        # Not all interfaces allow multi enrollment
+        #
+        # This is probably un-needed because we catch
+        # `Authenticator.AlreadyEnrolled` when attempting to enroll
+        if interface.is_enrolled and not interface.allow_multi_enrollment:
+            return Response(ALREADY_ENROLLED_ERR, status=status.HTTP_400_BAD_REQUEST)
+
+        try:
+            interface.secret = request.DATA['secret']
+        except KeyError:
+            pass
+
+        # Need to update interface with phone number before validating OTP
+        if 'phone' in request.DATA:
+            interface.phone_number = serializer.data['phone']
+
+            # Disregarding value of 'otp', if no OTP was provided,
+            # send text message to phone number with OTP
+            if 'otp' not in request.DATA:
+                if interface.send_text(for_enrollment=True, request=request._request):
+                    return Response(status=status.HTTP_204_NO_CONTENT)
+                else:
+                    # Error sending text message
+                    return Response(SEND_SMS_ERR, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
+
+        # Attempt to validate OTP
+        if 'otp' in request.DATA and not interface.validate_otp(serializer.data['otp']):
+            return Response(INVALID_OTP_ERR, status=status.HTTP_400_BAD_REQUEST)
+
+        # Try u2f enrollment
+        if interface_id == 'u2f':
+            # What happens when this fails?
+            interface.try_enroll(
+                serializer.data['challenge'],
+                serializer.data['response'],
+                serializer.data['deviceName']
+            )
+
+        try:
+            interface.enroll(request.user)
+        except Authenticator.AlreadyEnrolled:
+            return Response(ALREADY_ENROLLED_ERR, status=status.HTTP_400_BAD_REQUEST)
+        else:
+            capture_security_activity(
+                account=request.user,
+                type='mfa-added',
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                context={
+                    'authenticator': interface.authenticator,
+                },
+                send_email=False,
+            )
+            request.user.clear_lost_passwords()
+            request.user.refresh_session_nonce(self.request)
+            request.user.save()
+            Authenticator.objects.auto_add_recovery_codes(request.user)
+
+            return Response(status=status.HTTP_204_NO_CONTENT)
diff --git a/src/sentry/api/endpoints/user_authenticator_index.py b/src/sentry/api/endpoints/user_authenticator_index.py
new file mode 100644
index 0000000000..ea60149e1a
--- /dev/null
+++ b/src/sentry/api/endpoints/user_authenticator_index.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import Authenticator
+
+
+class UserAuthenticatorIndexEndpoint(UserEndpoint):
+    def get(self, request, user):
+        """Returns all interface for a user (un-enrolled ones), otherwise an empty array
+        """
+
+        interfaces = Authenticator.objects.all_interfaces_for_user(
+            user, return_missing=True)
+        return Response(serialize(list(interfaces)))
diff --git a/src/sentry/api/serializers/models/authenticator.py b/src/sentry/api/serializers/models/authenticator.py
new file mode 100644
index 0000000000..a02bd85dba
--- /dev/null
+++ b/src/sentry/api/serializers/models/authenticator.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import AuthenticatorInterface, RecoveryCodeInterface, SmsInterface, TotpInterface, U2fInterface
+
+
+@register(AuthenticatorInterface)
+class AuthenticatorInterfaceSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        data = {
+            'id': six.text_type(obj.interface_id),
+            'name': obj.name,
+            'description': obj.description,
+            'enrollButton': obj.enroll_button,
+            'configureButton': obj.configure_button,
+            'removeButton': obj.remove_button,
+            'isBackupInterface': obj.is_backup_interface,
+            'isEnrolled': obj.is_enrolled,
+            'canValidateOtp': obj.can_validate_otp,
+            'allowMultiEnrollment': obj.allow_multi_enrollment,
+        }
+
+        # authenticator is enrolled
+        if obj.authenticator is not None:
+            data['authId'] = six.text_type(obj.authenticator.id)
+            data['createdAt'] = obj.authenticator.created_at
+            data['lastUsedAt'] = obj.authenticator.last_used_at
+
+        return data
+
+
+@register(SmsInterface)
+class SmsInterfaceSerializer(AuthenticatorInterfaceSerializer):
+    def serialize(self, obj, attrs, user):
+        data = super(SmsInterfaceSerializer, self).serialize(obj, attrs, user)
+        data['phone'] = obj.phone_number
+        return data
+
+for interface in RecoveryCodeInterface, TotpInterface, U2fInterface:
+    register(interface)(AuthenticatorInterfaceSerializer)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 277a2326a0..5f3dcc5238 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -135,6 +135,8 @@ from .endpoints.team_project_index import TeamProjectIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
 from .endpoints.useravatar import UserAvatarEndpoint
 from .endpoints.user_appearance import UserAppearanceEndpoint
+from .endpoints.user_authenticator_index import UserAuthenticatorIndexEndpoint
+from .endpoints.user_authenticator_enroll import UserAuthenticatorEnrollEndpoint
 from .endpoints.user_authenticator_details import UserAuthenticatorDetailsEndpoint
 from .endpoints.user_identity_details import UserIdentityDetailsEndpoint
 from .endpoints.user_index import UserIndexEndpoint
@@ -203,6 +205,16 @@ urlpatterns = patterns(
         UserAppearanceEndpoint.as_view(),
         name='sentry-api-0-user-appearance'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/authenticators/$',
+        UserAuthenticatorIndexEndpoint.as_view(),
+        name='sentry-api-0-user-authenticator-index'
+    ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/authenticators/(?P<interface_id>[^\/]+)/enroll/$',
+        UserAuthenticatorEnrollEndpoint.as_view(),
+        name='sentry-api-0-user-authenticator-enroll'
+    ),
     url(
         r'^users/(?P<user_id>[^\/]+)/authenticators/(?P<auth_id>[^\/]+)/$',
         UserAuthenticatorDetailsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_details.py b/tests/sentry/api/endpoints/test_user_authenticator_details.py
index 2ea5516767..537293e755 100644
--- a/tests/sentry/api/endpoints/test_user_authenticator_details.py
+++ b/tests/sentry/api/endpoints/test_user_authenticator_details.py
@@ -1,13 +1,157 @@
 from __future__ import absolute_import
 
+import six
+
 from django.core.urlresolvers import reverse
 
-from sentry.models import Authenticator
+from sentry.models import Authenticator, TotpInterface, RecoveryCodeInterface, SmsInterface
 from sentry.testutils import APITestCase
 
 
-class DeleteUserAuthenticatorTest(APITestCase):
-    def test_simple(self):
+class UserAuthenticatorDetailsTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='test@example.com', is_superuser=False)
+        self.login_as(user=self.user)
+
+    def test_wrong_auth_id(self):
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': 'totp',
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 404
+
+    def test_get_authenticator_details(self):
+        interface = TotpInterface()
+        interface.enroll(self.user)
+        auth = interface.authenticator
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': auth.id,
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        assert resp.data['isEnrolled']
+        assert resp.data['id'] == "totp"
+        assert resp.data['authId'] == six.text_type(auth.id)
+
+        # should not have these because enrollment
+        assert 'totp_secret' not in resp.data
+        assert 'form' not in resp.data
+        assert 'qrcode' not in resp.data
+
+    def test_get_recovery_codes(self):
+        interface = RecoveryCodeInterface()
+        interface.enroll(self.user)
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': interface.authenticator.id,
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        assert resp.data['id'] == "recovery"
+        assert resp.data['authId'] == six.text_type(interface.authenticator.id)
+        assert len(resp.data['codes'])
+
+    def test_u2f_get_devices(self):
+        auth = Authenticator.objects.create(
+            type=3,  # u2f
+            user=self.user,
+            config={
+                'devices': [{
+                    'binding': {
+                        'publicKey': u'aowekroawker',
+                        'keyHandle': u'aowkeroakewrokaweokrwoer',
+                        'appId': u'https://dev.getsentry.net:8000/auth/2fa/u2fappid.json'
+                    },
+                    'name': u'Amused Beetle',
+                    'ts': 1512505334
+                }]
+            }
+        )
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': auth.id,
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        assert resp.data['id'] == "u2f"
+        assert resp.data['authId'] == six.text_type(auth.id)
+        assert len(resp.data['devices'])
+        assert resp.data['devices'][0]['name'] == 'Amused Beetle'
+
+        # should not have these because enrollment
+        assert 'challenge' not in resp.data
+        assert 'response' not in resp.data
+
+    def test_sms_get_phone(self):
+        interface = SmsInterface()
+        interface.phone_number = '5551231234'
+        interface.enroll(self.user)
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': interface.authenticator.id,
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        assert resp.data['id'] == "sms"
+        assert resp.data['authId'] == six.text_type(interface.authenticator.id)
+        assert resp.data['phone'] == '5551231234'
+
+        # should not have these because enrollment
+        assert 'totp_secret' not in resp.data
+        assert 'form' not in resp.data
+
+    def test_recovery_codes_regenerate(self):
+        interface = RecoveryCodeInterface()
+        interface.enroll(self.user)
+
+        url = reverse(
+            'sentry-api-0-user-authenticator-details',
+            kwargs={
+                'user_id': self.user.id,
+                'auth_id': interface.authenticator.id,
+            }
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        old_codes = resp.data['codes']
+
+        resp = self.client.get(url)
+        assert old_codes == resp.data['codes']
+
+        # regenerate codes
+        resp = self.client.put(url)
+
+        resp = self.client.get(url)
+        assert old_codes != resp.data['codes']
+
+    def test_delete(self):
         user = self.create_user(email='a@example.com', is_superuser=True)
         auth = Authenticator.objects.create(
             type=3,  # u2f
@@ -37,7 +181,8 @@ class DeleteUserAuthenticatorTest(APITestCase):
             user=user,
         )
 
-        self.login_as(user=user)
+        actor = self.create_user(email='b@example.com', is_superuser=False)
+        self.login_as(user=actor)
 
         url = reverse(
             'sentry-api-0-user-authenticator-details',
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_enroll.py b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
new file mode 100644
index 0000000000..e3fe191717
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_authenticator_enroll.py
@@ -0,0 +1,125 @@
+from __future__ import absolute_import
+
+import mock
+
+from django.core.urlresolvers import reverse
+from django.conf import settings
+
+from sentry.models import Authenticator
+from sentry.testutils import APITestCase
+
+
+class UserAuthenticatorEnrollTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='a@example.com', is_superuser=False)
+        self.login_as(user=self.user)
+
+    @mock.patch('sentry.models.TotpInterface.validate_otp', return_value=True)
+    def test_totp_can_enroll(self, validate_otp):
+        url = reverse(
+            'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'totp'}
+        )
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200
+        assert len(resp.data['qrcode'])
+        assert resp.data['form']
+        assert resp.data['secret']
+
+        # try to enroll
+        resp = self.client.post(url, data={
+            "secret": "secret12",
+            "otp": "1234",
+        })
+        assert validate_otp.call_count == 1
+        assert validate_otp.call_args == mock.call("1234")
+        assert resp.status_code == 204
+
+        interface = Authenticator.objects.get_interface(user=self.user, interface_id="totp")
+        assert interface
+
+        # also enrolls in recovery codes
+        recovery = Authenticator.objects.get_interface(user=self.user, interface_id="recovery")
+        assert recovery.is_enrolled
+
+        # can't enroll again because no multi enrollment is allowed
+        resp = self.client.get(url)
+        assert resp.status_code == 400
+        resp = self.client.post(url)
+        assert resp.status_code == 400
+
+    @mock.patch('sentry.models.TotpInterface.validate_otp', return_value=False)
+    def test_invalid_otp(self, validate_otp):
+        url = reverse(
+            'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'totp'}
+        )
+
+        # try to enroll
+        resp = self.client.post(url, data={
+            "secret": "secret12",
+            "otp": "1234",
+        })
+        assert validate_otp.call_count == 1
+        assert validate_otp.call_args == mock.call("1234")
+        assert resp.status_code == 400
+
+    @mock.patch('sentry.models.SmsInterface.validate_otp', return_value=True)
+    @mock.patch('sentry.models.SmsInterface.send_text', return_value=True)
+    def test_sms_can_enroll(self, send_text, validate_otp):
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['sms.twilio-account'] = 'twilio-account'
+
+        with self.settings(SENTRY_OPTIONS=new_options):
+            url = reverse(
+                'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'sms'}
+            )
+
+            resp = self.client.get(url)
+            assert resp.status_code == 200
+            assert resp.data['form']
+            assert resp.data['secret']
+
+            resp = self.client.post(url, data={
+                "secret": "secret12",
+                "phone": "1231234",
+            })
+            assert send_text.call_count == 1
+            assert validate_otp.call_count == 0
+            assert resp.status_code == 204
+
+            resp = self.client.post(url, data={
+                "secret": "secret12",
+                "phone": "1231234",
+                "otp": "123123",
+            })
+            assert validate_otp.call_count == 1
+            assert validate_otp.call_args == mock.call("123123")
+
+            interface = Authenticator.objects.get_interface(user=self.user, interface_id="sms")
+            assert interface.phone_number == "1231234"
+
+    @mock.patch('sentry.models.U2fInterface.try_enroll', return_value=True)
+    def test_u2f_can_enroll(self, try_enroll):
+        new_options = settings.SENTRY_OPTIONS.copy()
+        new_options['system.url-prefix'] = 'https://testserver'
+        with self.settings(SENTRY_OPTIONS=new_options):
+            url = reverse(
+                'sentry-api-0-user-authenticator-enroll', kwargs={'user_id': 'me', 'interface_id': 'u2f'}
+            )
+
+            resp = self.client.get(url)
+            assert resp.status_code == 200
+            assert resp.data['form']
+            assert 'secret' not in resp.data
+            assert 'qrcode' not in resp.data
+            assert resp.data['challenge']
+
+            #
+            resp = self.client.post(url, data={
+                "deviceName": "device name",
+                "challenge": "challenge",
+                "response": "response",
+            })
+            assert try_enroll.call_count == 1
+            assert try_enroll.call_args == mock.call("challenge", "response", "device name")
+            assert resp.status_code == 204
diff --git a/tests/sentry/api/endpoints/test_user_authenticator_index.py b/tests/sentry/api/endpoints/test_user_authenticator_index.py
new file mode 100644
index 0000000000..6edcda9a42
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_authenticator_index.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import TotpInterface
+from sentry.testutils import APITestCase
+
+
+class UserAuthenticatorIndexTest(APITestCase):
+    def test_list_all_authenticators(self):
+        user = self.create_user(email='a@example.com', is_superuser=True)
+        self.login_as(user=user, superuser=True)
+        url = reverse(
+            'sentry-api-0-user-authenticator-index', kwargs={'user_id': 'me'}
+        )
+
+        resp = self.client.get(url, format='json')
+
+        assert resp.status_code == 200
+        interface = [i for i in resp.data if i['id'] == "totp"][0]
+        assert not interface['isEnrolled']
+
+        # Enroll in Totp - should still be listed
+        TotpInterface().enroll(user)
+
+        resp = self.client.get(url, format='json')
+        assert resp.status_code == 200
+        interface = [i for i in resp.data if i['id'] == "totp"][0]
+        assert interface['isEnrolled']
