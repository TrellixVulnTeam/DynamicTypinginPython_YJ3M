commit 10f06d04fbff11cd7c706b07bdb6bccc70721b66
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Nov 24 17:17:27 2015 -0800

    Expand status details to include autoResolved
    
    Refs GH-2341

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 11647589f6..9d91a59fe7 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -87,14 +87,19 @@ class GroupSerializer(Serializer):
 
     def serialize(self, obj, attrs, user):
         status = obj.status
+        status_details = {}
         if attrs['snooze']:
             if attrs['snooze'] < timezone.now() and status == GroupStatus.MUTED:
                 status = GroupStatus.UNRESOLVED
+            else:
+                status_details['snoozeUntil'] = attrs['snooze']
         elif status == GroupStatus.UNRESOLVED and obj.is_over_resolve_age():
             status = GroupStatus.RESOLVED
-
+            status_details['autoResolved'] = True
         if status == GroupStatus.RESOLVED:
             status_label = 'resolved'
+            if attrs['resolution']:
+                status_details['inNextRelease'] = True
         elif status == GroupStatus.MUTED:
             status_label = 'muted'
         elif status in [GroupStatus.PENDING_DELETION, GroupStatus.DELETION_IN_PROGRESS]:
@@ -104,18 +109,6 @@ class GroupSerializer(Serializer):
         else:
             status_label = 'unresolved'
 
-        # TODO(dcramer): these are pretty arbitrary and not defined anywhere
-        if status_label == 'resolved' and attrs['resolution']:
-            status_details = {
-                'inNextRelease': True,
-            }
-        elif status_label == 'muted' and attrs['snooze']:
-            status_details = {
-                'snoozeUntil': attrs['snooze'],
-            }
-        else:
-            status_details = {}
-
         if obj.team:
             permalink = absolute_uri(reverse('sentry-group', args=[
                 obj.organization.slug, obj.project.slug, obj.id]))
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 3f17eeabbd..e4534b261a 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -4,9 +4,10 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 from django.utils import timezone
+from mock import patch
 
 from sentry.api.serializers import serialize
-from sentry.models import GroupSnooze, GroupStatus
+from sentry.models import GroupResolution, GroupSnooze, GroupStatus, Release
 from sentry.testutils import TestCase
 
 
@@ -23,3 +24,49 @@ class GroupSerializerTest(TestCase):
 
         result = serialize(group, user)
         assert result['status'] == 'unresolved'
+        assert result['statusDetails'] == {}
+
+    def test_is_muted_with_valid_snooze(self):
+        user = self.create_user()
+        group = self.create_group(
+            status=GroupStatus.MUTED,
+        )
+        snooze = GroupSnooze.objects.create(
+            group=group,
+            until=timezone.now() + timedelta(minutes=1),
+        )
+
+        result = serialize(group, user)
+        assert result['status'] == 'muted'
+        assert result['statusDetails'] == {'snoozeUntil': snooze.until}
+
+    def test_resolved_in_next_release(self):
+        release = Release.objects.create(
+            project=self.project,
+            version='a',
+        )
+        user = self.create_user()
+        group = self.create_group(
+            status=GroupStatus.RESOLVED,
+        )
+        GroupResolution.objects.create(
+            group=group,
+            release=release,
+        )
+
+        result = serialize(group, user)
+        assert result['status'] == 'resolved'
+        assert result['statusDetails'] == {'inNextRelease': True}
+
+    @patch('sentry.models.Group.is_over_resolve_age')
+    def test_auto_resolved(self, mock_is_over_resolve_age):
+        mock_is_over_resolve_age.return_value = True
+
+        user = self.create_user()
+        group = self.create_group(
+            status=GroupStatus.UNRESOLVED,
+        )
+
+        result = serialize(group, user)
+        assert result['status'] == 'resolved'
+        assert result['statusDetails'] == {'autoResolved': True}
