commit e7553b86a9b8d54b5c6722149c94a084f6d423be
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 5 17:24:44 2013 -0800

    Add superuser check to group_is_public and test coverage

diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index c7522093a1..2e2ca361ed 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -59,10 +59,25 @@ def get_project_list(user=None, access=None, hidden=False, key='id', select_rela
 
 def group_is_public(group, user):
     """
-    Return ``True`` if the this group is publicly viewable and the user viewing it should
-    see a restricted view.
+    Return ``True`` if the this group if the user viewing it should see a restricted view.
+
+    This check should be used in combination with project membership checks, as we're only
+    verifying if the user should have a restricted view of something they already have access
+    to.
     """
-    return group.is_public and not (user.is_authenticated() and group.project in get_project_list(user).values())
+    # if the group isn't public, this check doesnt matter
+    if not group.is_public:
+        return False
+    # anonymous users always are viewing as if it were public
+    if not user.is_authenticated():
+        return True
+    # superusers can always view events
+    if user.is_superuser:
+        return False
+    # project owners can view events
+    if group.project in get_project_list(user).values():
+        return False
+    return True
 
 
 def get_team_list(user, access=None):
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index d71d911ab9..d3f1c2953e 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -8,7 +8,7 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from sentry.constants import MEMBER_USER
 from sentry.models import Project
-from sentry.web.helpers import get_project_list, get_login_url
+from sentry.web.helpers import get_project_list, get_login_url, group_is_public
 from sentry.testutils import TestCase
 
 
@@ -69,3 +69,37 @@ class GetLoginUrlTest(TestCase):
         with self.Settings(SENTRY_LOGIN_URL=None):
             url = get_login_url(True)
             self.assertEquals(url, reverse('sentry-login'))
+
+
+class GroupIsPublicTest(TestCase):
+    @mock.patch('sentry.web.helpers.get_project_list', mock.Mock(return_value={}))
+    def test_non_public_group_returns_false(self):
+        self.group.is_public = False
+        self.user.is_superuser = False
+        result = group_is_public(self.group, self.user)
+        assert result is False
+
+    @mock.patch('sentry.web.helpers.get_project_list')
+    def test_public_group_returns_true_with_missing_project(self, get_project_list):
+        get_project_list.return_value = {}
+        self.group.is_public = True
+        self.user.is_superuser = False
+        result = group_is_public(self.group, self.user)
+        assert result is True
+        get_project_list.assert_called_once_with(self.user)
+
+    @mock.patch('sentry.web.helpers.get_project_list')
+    def test_public_group_returns_false_with_project_membership(self, get_project_list):
+        get_project_list.return_value = {self.group.project.id: self.group.project}
+        self.group.is_public = True
+        self.user.is_superuser = False
+        result = group_is_public(self.group, self.user)
+        assert result is False
+        get_project_list.assert_called_once_with(self.user)
+
+    @mock.patch('sentry.web.helpers.get_project_list', mock.Mock(return_value={}))
+    def test_superuser_is_false_with_missing_project(self):
+        self.group.is_public = True
+        self.user.is_superuser = True
+        result = group_is_public(self.group, self.user)
+        assert result is False
