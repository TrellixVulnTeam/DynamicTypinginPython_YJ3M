commit 40c00d03bfb1d2adc6621c7987452e60e92c0b16
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Sep 24 02:48:38 2015 +0200

    Added can_configure_for_project

diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
index d9a5b43894..46171c37d8 100644
--- a/src/sentry/plugins/base/configuration.py
+++ b/src/sentry/plugins/base/configuration.py
@@ -12,9 +12,14 @@ from django.core.urlresolvers import reverse
 from django.template import RequestContext
 from django.http import HttpResponseRedirect
 from django.contrib import messages
+from django.http import Http404
 
 
 def default_plugin_config(plugin, project, request):
+    if plugin.can_enable_for_projects() and \
+       not plugin.can_configure_for_project(project):
+        raise Http404()
+
     plugin_key = plugin.get_conf_key()
     form_class = plugin.get_conf_form(project)
     template = plugin.get_conf_template(project)
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index fc4c64b2be..28dce2e84c 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -93,8 +93,8 @@ class IPlugin(local, PluggableViewMixin):
         >>> plugin.is_enabled()
         """
         if project is not None:
-            from sentry import features
-            if not features.has('projects:plugins', project, self, actor=None):
+            if self.can_enable_for_projects() and \
+               not self.can_configure_for_project(project):
                 return False
         if not self.enabled:
             return False
@@ -228,11 +228,16 @@ class IPlugin(local, PluggableViewMixin):
         return self.project_conf_form is not None
 
     def can_enable_for_projects(self):
-        """
-        Returns a boolean describing whether this plugin can be enabled on a per project basis
+        """Returns a boolean describing whether this plugin can be enabled on
+        a per project basis
         """
         return True
 
+    def can_configure_for_project(self, project):
+        """Checks if the plugin can be configured for a specific project."""
+        from sentry import features
+        return features.has('projects:plugins', project, self, actor=None)
+
     def get_form_initial(self, project=None):
         return {}
 
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 753db654d4..64bd5fae4a 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -87,8 +87,8 @@ class IPlugin2(local):
         >>> plugin.is_enabled()
         """
         if project is not None:
-            from sentry import features
-            if not features.has('projects:plugins', project, self, actor=None):
+            if self.can_enable_for_projects() and \
+               not self.can_configure_for_project(project):
                 return False
         if not self.enabled:
             return False
@@ -219,6 +219,11 @@ class IPlugin2(local):
         """
         return True
 
+    def can_configure_for_project(self, project):
+        """Checks if the plugin can be configured for a specific project."""
+        from sentry import features
+        return features.has('projects:plugins', project, self, actor=None)
+
     # Response methods
 
     def redirect(self, url):
