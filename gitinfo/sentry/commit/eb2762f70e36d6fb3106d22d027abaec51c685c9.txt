commit eb2762f70e36d6fb3106d22d027abaec51c685c9
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 17 18:59:11 2015 -0700

    Instantiate serializers when passed to serialize()
    
    Conflicts:
            src/sentry/api/endpoints/organization_details.py
            src/sentry/api/endpoints/shared_group_details.py

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 2de0614a84..9c801c8f8c 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -61,7 +61,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         context['access'] = access.from_user(request.user, organization).scopes
         context['features'] = feature_list
         context['teams'] = serialize(
-            team_list, request.user, TeamWithProjectsSerializer)
+            team_list, request.user, TeamWithProjectsSerializer())
         return Response(context)
 
     @sudo_required
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index a57dae4e1e..436b791425 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -139,7 +139,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         )
 
         return Response(serialize(
-            team, request.user, TeamWithProjectsSerializer), status=201)
+            team, request.user, TeamWithProjectsSerializer()), status=201)
 
     def delete(self, request, organization, member_id, team_slug):
         """
@@ -172,7 +172,7 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             except OrganizationMemberTeam.DoesNotExist:
                 # if the relationship doesnt exist, they're already a member
                 return Response(serialize(
-                    team, request.user, TeamWithProjectsSerializer), status=200)
+                    team, request.user, TeamWithProjectsSerializer()), status=200)
         else:
             try:
                 omt = OrganizationMemberTeam.objects.get(
@@ -201,4 +201,4 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             )
 
         return Response(serialize(
-            team, request.user, TeamWithProjectsSerializer), status=200)
+            team, request.user, TeamWithProjectsSerializer()), status=200)
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index 2fd32b3589..382066d454 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -39,7 +39,7 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
         ).order_by('name', 'slug'))
 
         return Response(serialize(
-            team_list, request.user, TeamWithProjectsSerializer))
+            team_list, request.user, TeamWithProjectsSerializer()))
 
     def post(self, request, organization):
         """
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 54cf9173fc..62ce90eb29 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -126,7 +126,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         context = list(cursor_result)
 
-        response = Response(serialize(context, request.user, StreamGroupSerializer))
+        response = Response(serialize(context, request.user, StreamGroupSerializer()))
         response['Link'] = ', '.join([
             self.build_cursor_link(request, 'previous', cursor_result.prev),
             self.build_cursor_link(request, 'next', cursor_result.next),
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index bdce540a15..8266ae9a28 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -22,8 +22,6 @@ def serialize(objects, user=None, serializer=None):
             serializer = registry[type(objects[0])]
         except KeyError:
             return objects
-    else:
-        serializer = serializer()
 
     attrs = serializer.get_attrs(item_list=objects, user=user)
     return [serializer(o, attrs=attrs.get(o, {}), user=user) for o in objects]
