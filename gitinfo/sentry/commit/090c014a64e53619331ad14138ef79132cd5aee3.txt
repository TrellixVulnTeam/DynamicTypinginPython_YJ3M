commit 090c014a64e53619331ad14138ef79132cd5aee3
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 12 10:49:57 2018 -0700

    test: Restrict newsletter mock tests

diff --git a/src/sentry/newsletter/dummy.py b/src/sentry/newsletter/dummy.py
index 15ee1264b1..9167dfe3bf 100644
--- a/src/sentry/newsletter/dummy.py
+++ b/src/sentry/newsletter/dummy.py
@@ -49,10 +49,10 @@ class DummyNewsletter(Newsletter):
     store for tracking subscriptions, which means its not suitable for any real production use-case.
     """
 
-    def __init__(self):
+    def __init__(self, enabled=False):
         self._subscriptions = defaultdict(dict)
         self._optout = set()
-        self._enabled = True
+        self._enabled = enabled
 
     def enable(self):
         self._enabled = True
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 70b43cc019..43faacede0 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -104,8 +104,9 @@ def pytest_configure(config):
     settings.SENTRY_TSDB = 'sentry.tsdb.inmemory.InMemoryTSDB'
     settings.SENTRY_TSDB_OPTIONS = {}
 
-    settings.SENTRY_NEWSLETTER = 'sentry.newsletter.dummy.DummyNewsletter'
-    settings.SENTRY_NEWSLETTER_OPTIONS = {}
+    if settings.SENTRY_NEWSLETTER == 'sentry.newsletter.base.Newsletter':
+        settings.SENTRY_NEWSLETTER = 'sentry.newsletter.dummy.DummyNewsletter'
+        settings.SENTRY_NEWSLETTER_OPTIONS = {}
 
     settings.BROKER_BACKEND = 'memory'
     settings.BROKER_URL = None
@@ -207,7 +208,8 @@ def pytest_runtest_teardown(item):
 
     # XXX(dcramer): only works with DummyNewsletter
     from sentry import newsletter
-    newsletter.backend.clear()
+    if newsletter.backend.__class__.__name__ == 'DummyNewsletter':
+        newsletter.backend.clear()
 
     from sentry.utils.redis import clusters
 
diff --git a/tests/sentry/api/endpoints/test_user_emails.py b/tests/sentry/api/endpoints/test_user_emails.py
index d5005d250b..e36f98ec86 100644
--- a/tests/sentry/api/endpoints/test_user_emails.py
+++ b/tests/sentry/api/endpoints/test_user_emails.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import pytest
+
+from django.conf import settings
 from django.core.urlresolvers import reverse
 
 from sentry import newsletter
@@ -133,3 +136,43 @@ class UserEmailsTest(APITestCase):
         })
 
         assert response.status_code == 403
+
+
+@pytest.mark.skipIf(lambda x: settings.SENTRY_NEWSLETTER != 'sentry.newsletter.dummy.DummyNewsletter')
+class UserEmailsNewsletterTest(APITestCase):
+    def setUp(self):
+        super(UserEmailsNewsletterTest, self).setUp()
+
+        def disable_newsletter():
+            newsletter.backend.disable()
+
+        newsletter.backend.enable()
+
+        self.addCleanup(disable_newsletter)
+        self.user = self.create_user(email='foo@example.com')
+        self.login_as(user=self.user)
+        self.url = reverse('sentry-api-0-user-emails', kwargs={'user_id': self.user.id})
+
+    def test_add_secondary_email_with_newsletter_subscribe(self):
+        response = self.client.post(self.url, data={
+            'email': 'altemail1@example.com',
+            'newsletter': '1',
+        })
+
+        assert response.status_code == 201
+        assert UserEmail.objects.filter(user=self.user, email='altemail1@example.com').exists()
+        results = newsletter.get_subscriptions(self.user)['subscriptions']
+        assert len(results) == 1
+        assert results[0].list_id == newsletter.get_default_list_id()
+        assert results[0].subscribed
+        assert not results[0].verified
+
+    def test_add_secondary_email_with_newsletter_no_subscribe(self):
+        response = self.client.post(self.url, data={
+            'email': 'altemail1@example.com',
+            'newsletter': '0',
+        })
+
+        assert response.status_code == 201
+        assert UserEmail.objects.filter(user=self.user, email='altemail1@example.com').exists()
+        assert newsletter.get_subscriptions(self.user) == {'subscriptions': []}
diff --git a/tests/sentry/api/endpoints/test_user_subscriptions.py b/tests/sentry/api/endpoints/test_user_subscriptions.py
index be255191dc..275d6c2a7a 100644
--- a/tests/sentry/api/endpoints/test_user_subscriptions.py
+++ b/tests/sentry/api/endpoints/test_user_subscriptions.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import pytest
+
+from django.conf import settings
 from django.core.urlresolvers import reverse
 
 from sentry import newsletter
@@ -11,6 +14,30 @@ class UserSubscriptionsTest(APITestCase):
         self.user = self.create_user(email='foo@example.com')
         self.login_as(self.user)
         self.url = reverse('sentry-api-0-user-subscriptions', kwargs={'user_id': self.user.id})
+
+    def test_get_subscriptions(self):
+        response = self.client.get(self.url)
+        assert response.status_code == 200, response.content
+
+    def test_update_subscriptions(self):
+        response = self.client.put(self.url, data={
+            'listId': '123',
+            'subscribed': True,
+        })
+        assert response.status_code == 204, response.content
+
+
+@pytest.mark.skipIf(lambda x: settings.SENTRY_NEWSLETTER != 'sentry.newsletter.dummy.DummyNewsletter')
+class UserSubscriptionsNewsletterTest(APITestCase):
+    def setUp(self):
+        self.user = self.create_user(email='foo@example.com')
+        self.login_as(self.user)
+        self.url = reverse('sentry-api-0-user-subscriptions', kwargs={'user_id': self.user.id})
+
+        def disable_newsletter():
+            newsletter.backend.disable()
+
+        self.addCleanup(disable_newsletter)
         newsletter.backend.enable()
 
     def test_get_subscriptions(self):
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 7293c09686..a762f39342 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -1,8 +1,10 @@
 from __future__ import absolute_import
 
-from django.utils.http import urlquote
+import pytest
 
+from django.conf import settings
 from django.core.urlresolvers import reverse
+from django.utils.http import urlquote
 from exam import fixture
 
 from sentry import options, newsletter
@@ -16,16 +18,6 @@ class AuthLoginTest(TestCase):
     def path(self):
         return reverse('sentry-login')
 
-    def setUp(self):
-        super(AuthLoginTest, self).setUp()
-
-        def disable_newsletter():
-            newsletter.backend.disable()
-
-        self.addCleanup(disable_newsletter)
-        # disable newsletter by default
-        newsletter.backend.disable()
-
     def test_renders_correct_template(self):
         resp = self.client.get(self.path)
 
@@ -86,7 +78,7 @@ class AuthLoginTest(TestCase):
                     'op': 'register',
                 }
             )
-        assert resp.status_code == 302
+        assert resp.status_code == 302, resp.context['register_form'].errors if resp.status_code == 200 else None
         user = User.objects.get(username='test-a-really-long-email-address@example.com')
         assert user.email == 'test-a-really-long-email-address@example.com'
         assert user.check_password('foobar')
@@ -95,68 +87,6 @@ class AuthLoginTest(TestCase):
             user=user,
         ).exists()
 
-    def test_registration_requires_subscribe_choice_with_newsletter(self):
-        options.set('auth.allow-registration', True)
-        newsletter.backend.enable()
-        with self.feature('auth:register'):
-            resp = self.client.post(
-                self.path, {
-                    'username': 'test-a-really-long-email-address@example.com',
-                    'password': 'foobar',
-                    'name': 'Foo Bar',
-                    'op': 'register',
-                }
-            )
-        assert resp.status_code == 200
-
-        with self.feature('auth:register'):
-            resp = self.client.post(
-                self.path, {
-                    'username': 'test-a-really-long-email-address@example.com',
-                    'password': 'foobar',
-                    'name': 'Foo Bar',
-                    'op': 'register',
-                    'subscribe': '0',
-                }
-            )
-        assert resp.status_code == 302
-
-        user = User.objects.get(username='test-a-really-long-email-address@example.com')
-        assert user.email == 'test-a-really-long-email-address@example.com'
-        assert user.check_password('foobar')
-        assert user.name == 'Foo Bar'
-        assert not OrganizationMember.objects.filter(
-            user=user,
-        ).exists()
-
-        assert newsletter.get_subscriptions(user) == {'subscriptions': []}
-
-    def test_registration_subscribe_to_newsletter(self):
-        options.set('auth.allow-registration', True)
-        newsletter.backend.enable()
-        with self.feature('auth:register'):
-            resp = self.client.post(
-                self.path, {
-                    'username': 'test-a-really-long-email-address@example.com',
-                    'password': 'foobar',
-                    'name': 'Foo Bar',
-                    'op': 'register',
-                    'subscribe': '1',
-                }
-            )
-        assert resp.status_code == 302
-
-        user = User.objects.get(username='test-a-really-long-email-address@example.com')
-        assert user.email == 'test-a-really-long-email-address@example.com'
-        assert user.check_password('foobar')
-        assert user.name == 'Foo Bar'
-
-        results = newsletter.get_subscriptions(user)['subscriptions']
-        assert len(results) == 1
-        assert results[0].list_id == newsletter.get_default_list_id()
-        assert results[0].subscribed
-        assert not results[0].verified
-
     def test_register_renders_correct_template(self):
         options.set('auth.allow-registration', True)
         register_path = reverse('sentry-register')
@@ -223,3 +153,79 @@ class AuthLoginTest(TestCase):
         resp = self.client.get(self.path)
 
         assert resp.status_code == 200
+
+
+@pytest.mark.skipIf(lambda x: settings.SENTRY_NEWSLETTER != 'sentry.newsletter.dummy.DummyNewsletter')
+class AuthLoginNewsletterTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-login')
+
+    def setUp(self):
+        super(AuthLoginNewsletterTest, self).setUp()
+
+        def disable_newsletter():
+            newsletter.backend.disable()
+
+        self.addCleanup(disable_newsletter)
+        newsletter.backend.enable()
+
+    def test_registration_requires_subscribe_choice_with_newsletter(self):
+        options.set('auth.allow-registration', True)
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                }
+            )
+        assert resp.status_code == 200
+
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                    'subscribe': '0',
+                }
+            )
+        assert resp.status_code == 302
+
+        user = User.objects.get(username='test-a-really-long-email-address@example.com')
+        assert user.email == 'test-a-really-long-email-address@example.com'
+        assert user.check_password('foobar')
+        assert user.name == 'Foo Bar'
+        assert not OrganizationMember.objects.filter(
+            user=user,
+        ).exists()
+
+        assert newsletter.get_subscriptions(user) == {'subscriptions': []}
+
+    def test_registration_subscribe_to_newsletter(self):
+        options.set('auth.allow-registration', True)
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                    'subscribe': '1',
+                }
+            )
+        assert resp.status_code == 302
+
+        user = User.objects.get(username='test-a-really-long-email-address@example.com')
+        assert user.email == 'test-a-really-long-email-address@example.com'
+        assert user.check_password('foobar')
+        assert user.name == 'Foo Bar'
+
+        results = newsletter.get_subscriptions(user)['subscriptions']
+        assert len(results) == 1
+        assert results[0].list_id == newsletter.get_default_list_id()
+        assert results[0].subscribed
+        assert not results[0].verified
