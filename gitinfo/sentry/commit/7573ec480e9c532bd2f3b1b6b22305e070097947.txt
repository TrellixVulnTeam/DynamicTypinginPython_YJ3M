commit 7573ec480e9c532bd2f3b1b6b22305e070097947
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Feb 22 10:57:02 2018 -0800

    fix(environment): Fix release stats sidebar (#7332)
    
    Also fix release chart not triggering rerender

diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 815aed9941..6224fba0b2 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -6,7 +6,7 @@ import createReactClass from 'create-react-class';
 import StackedBarChart from '../stackedBarChart';
 import SentryTypes from '../../proptypes';
 import {t} from '../../locale';
-import {defined, escape, intcomma} from '../../utils';
+import {escape, intcomma} from '../../utils';
 
 const GroupReleaseChart = createReactClass({
   displayName: 'GroupReleaseChart',
@@ -25,20 +25,27 @@ const GroupReleaseChart = createReactClass({
     title: PropTypes.string,
   },
 
-  getInitialState(props) {
-    if (!defined(props)) props = this.props;
+  getInitialState() {
+    return this.getNextState(this.props);
+  },
+
+  componentWillReceiveProps(nextProps) {
+    this.setState(this.getNextState(nextProps));
+  },
+
+  getNextState(props) {
     let releaseStats = props.releaseStats;
     let releasePoints = {};
-    if (defined(releaseStats)) {
-      releaseStats[this.props.statsPeriod].forEach(point => {
+    if (releaseStats) {
+      releaseStats[props.statsPeriod].forEach(point => {
         releasePoints[point[0]] = point[1];
       });
     }
 
     let envStats = props.environmentStats;
     let envPoints = {};
-    if (defined(envStats)) {
-      envStats[this.props.statsPeriod].forEach(point => {
+    if (envStats) {
+      envStats[props.statsPeriod].forEach(point => {
         envPoints[point[0]] = point[1];
       });
     }
@@ -49,18 +56,6 @@ const GroupReleaseChart = createReactClass({
     };
   },
 
-  componentWillReceiveProps(nextProps) {
-    this.setState(this.getInitialState());
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    return (
-      // environment comes from grouprelease, so we can hack
-      this.props.environment !== nextProps.environment ||
-      this.props.group.id !== nextProps.group.id
-    );
-  },
-
   renderTooltip(point, pointIdx, chart) {
     let timeLabel = chart.getTimeLabel(point);
     let totalY = 0;
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index a98a1dc655..030fea9fe1 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -2,11 +2,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
-import {browserHistory} from 'react-router';
 import {get as getPath} from 'lodash';
 
 import ApiMixin from '../../mixins/apiMixin';
 import DropdownLink from '../dropdownLink';
+import {setActiveEnvironment} from '../../actionCreators/environments';
 import EnvironmentStore from '../../stores/environmentStore';
 import LatestContextStore from '../../stores/latestContextStore';
 import LoadingIndicator from '../loadingIndicator';
@@ -24,7 +24,6 @@ const GroupReleaseStats = createReactClass({
 
   propTypes: {
     group: PropTypes.object,
-    location: PropTypes.object,
   },
 
   contextTypes: {
@@ -39,14 +38,13 @@ const GroupReleaseStats = createReactClass({
 
   getInitialState() {
     let envList = EnvironmentStore.getActive();
-    let environmentQueryParam = this.props.location.query.environment;
 
     return {
       loading: true,
       error: false,
       data: {environment: {}},
       envList,
-      environment: this.getEnvironment(environmentQueryParam),
+      environment: LatestContextStore.getInitialState().environment,
       hasEnvironmentsFeature: new Set(this.context.organization.features).has(
         'environments'
       ),
@@ -61,23 +59,6 @@ const GroupReleaseStats = createReactClass({
     this.onLatestContextChange(LatestContextStore.getInitialState());
   },
 
-  componentWillReceiveProps(nextProps) {
-    let queryParams = nextProps.location.query;
-    if (
-      'environment' in queryParams &&
-      queryParams.environment !== this.props.location.query.environment
-    ) {
-      this.setState(
-        {
-          environment: this.getEnvironment(queryParams.environment),
-          loading: true,
-          error: false,
-        },
-        this.fetchData
-      );
-    }
-  },
-
   shouldComponentUpdate(nextProps, nextState) {
     return (
       this.state.loading !== nextState.loading ||
@@ -96,9 +77,7 @@ const GroupReleaseStats = createReactClass({
   },
 
   onLatestContextChange(context) {
-    if (this.state.hasEnvironmentsFeature) {
-      this.setState({environment: context.environment || null}, this.fetchData);
-    }
+    this.setState({environment: context.environment || null}, this.fetchData);
   },
 
   fetchData() {
@@ -169,26 +148,6 @@ const GroupReleaseStats = createReactClass({
     });
   },
 
-  switchEnv(env) {
-    if (this.state.environment === env) return;
-
-    let queryParams = Object.assign({}, this.props.location.query);
-    queryParams.environment = env;
-
-    browserHistory.push({
-      pathname: this.props.location.pathname,
-      query: queryParams,
-    });
-  },
-
-  selectAllEnvs() {
-    this.setState({environment: null}, this.fetchData);
-
-    browserHistory.push({
-      pathname: this.props.location.pathname,
-    });
-  },
-
   render() {
     let group = this.props.group;
     let {environment, data, hasEnvironmentsFeature} = this.state;
@@ -209,7 +168,10 @@ const GroupReleaseStats = createReactClass({
               envName
             ) : (
               <DropdownLink title={envName}>
-                <MenuItem isActive={environment === null} onClick={this.selectAllEnvs}>
+                <MenuItem
+                  isActive={environment === null}
+                  onClick={() => setActiveEnvironment(null)}
+                >
                   {t('All Environments')}
                 </MenuItem>
                 {envList.map(env => {
@@ -217,7 +179,7 @@ const GroupReleaseStats = createReactClass({
                     <MenuItem
                       key={env.name}
                       isActive={env.name === envName}
-                      onClick={() => this.switchEnv(env.name)}
+                      onClick={() => setActiveEnvironment(env)}
                     >
                       {env.displayName}
                     </MenuItem>
