commit 6720d60e62d54b0be1cd5f10e7645bae18da27a7
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Nov 30 13:37:37 2017 -0800

    fix(user feedback): Backfill group_id when null for user reports (#6646)
    
    fix(user feedback): Backfill group_id when null for user reports
    
    fixes GH-6630

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 800651c677..4b70a11ed9 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -12,6 +12,7 @@ from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
 from sentry.models import (Event, EventUser, Group, GroupStatus, UserReport)
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.tasks.user_reports import backfill_group
 
 
 @scenario('CreateUserFeedback')
@@ -130,6 +131,14 @@ class ProjectUserReportsEndpoint(ProjectEndpoint):
             )
             report = existing_report
 
+        if report.group_id is None:
+            backfill_group.apply_async(
+                kwargs={
+                    'report_id': report.id,
+                },
+                countdown=30,
+            )
+
         return Response(serialize(report, request.user, ProjectUserReportSerializer()))
 
     def find_event_user(self, report):
diff --git a/src/sentry/tasks/user_reports.py b/src/sentry/tasks/user_reports.py
new file mode 100644
index 0000000000..1b37527683
--- /dev/null
+++ b/src/sentry/tasks/user_reports.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+from sentry.models import Group, UserReport
+from sentry.tasks.base import instrumented_task, retry
+
+
+@instrumented_task(
+    name='sentry.tasks.user_reports.backfill_group',
+    queue='cleanup',
+    default_retry_delay=60,
+    max_retries=5,
+)
+@retry(exclude=(UserReport.DoesNotExist, ))
+def backfill_group(report_id, **kwargs):
+    report = UserReport.objects.filter(
+        id=report_id,
+    ).select_related('project').get()
+
+    if report.group_id is None:
+        report.group = Group.objects.from_event_id(
+            report.project,
+            report.event_id,
+        )
+
+        report.save()
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index e4b38e670b..25d77b9077 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
+import mock
 import six
+import uuid
 
 from sentry.testutils import APITestCase
 from sentry.models import EventUser, GroupStatus, UserReport
@@ -214,3 +216,32 @@ class CreateProjectUserReportTest(APITestCase):
 
         euser = EventUser.objects.get(id=euser.id)
         assert euser.name == 'Foo Bar'
+
+    @mock.patch('sentry.api.endpoints.project_user_reports.backfill_group')
+    def test_backfill_group_called(self, mock_backfill_group):
+        self.login_as(user=self.user)
+        project = self.create_project()
+
+        url = '/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(
+            url,
+            data={
+                'event_id': uuid.uuid4().hex,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 200, response.content
+
+        mock_backfill_group.apply_async.assert_called_with(
+            kwargs={
+                'report_id': int(response.data['id']),
+            },
+            countdown=30,
+        )
diff --git a/tests/sentry/tasks/test_user_reports.py b/tests/sentry/tasks/test_user_reports.py
new file mode 100644
index 0000000000..16dadb638b
--- /dev/null
+++ b/tests/sentry/tasks/test_user_reports.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+from sentry.models import UserReport
+from sentry.tasks.user_reports import backfill_group
+from sentry.testutils import TestCase
+
+
+class UserReporBackfillGroupTest(TestCase):
+    def test_simple(self):
+        org = self.create_organization()
+        project = self.create_project(organization=org)
+        group = self.create_group(project=project)
+        event = self.create_event(group=group)
+        report = UserReport.objects.create(
+            project=project,
+            event_id=event.event_id,
+            email='foo@example.com',
+            comments='i clicked it and it broke',
+        )
+
+        assert report.group is None
+
+        with self.tasks():
+            backfill_group(report.id)
+
+        assert UserReport.objects.get(id=report.id).group == group
