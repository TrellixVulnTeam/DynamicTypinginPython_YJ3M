commit d3525179b23532269c1e6e78459b091026e692a3
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 17 11:49:16 2016 -0700

    Expand on User Report settings panel
    
    - Pull in DSN when possible
    - Add Browser JS example

diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index b829871d09..9ec93956c1 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -1,5 +1,7 @@
 import React from 'react';
 
+import ApiMixin from '../mixins/apiMixin';
+import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
 const ProjectUserReportSettings = React.createClass({
@@ -7,8 +9,19 @@ const ProjectUserReportSettings = React.createClass({
     setProjectNavSection: React.PropTypes.func
   },
 
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      keyList: [],
+    };
+  },
+
   componentWillMount() {
     this.props.setProjectNavSection('settings');
+    this.fetchData();
   },
 
   componentDidMount() {
@@ -25,26 +38,93 @@ const ProjectUserReportSettings = React.createClass({
     };
   },
 
+  // TODO(dcramer): abstract this into a shared helper as its common for route handlers
+  componentWillReceiveProps(nextProps) {
+    let location = this.props.location;
+    let nextLocation = nextProps.location;
+    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+      this.remountComponent();
+    }
+  },
+
   componentWillUnmount() {
     window.sentryEmbedCallback = null;
   },
 
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/keys/`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          keyList: data,
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
   getInstructions() {
+    let dsn = (this.state.keyList.length ?
+      this.state.keyList[0].dsn.public :
+      'https://public@sentry.example.com/1');
+
     return (
       '<!-- Sentry JS SDK 2.1.+ required -->\n' +
       '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
       '{% if request.sentry.id %}\n' +
       '  <script>\n' +
       '  Raven.showReportDialog({\n' +
+      '    // grab the eventId generated by the Sentry SDK\n' +
       '    eventId: \'{{ request.sentry.id }}\',\n\n' +
       '    // use the public DSN (dont include your secret!)\n' +
-      '    dsn: \'https://public@sentry.example.com/1\'\n' +
+      '    dsn: \'' + dsn + '\'\n' +
       '  });\n' +
       '  </script>\n' +
       '{% endif %}\n'
     );
   },
 
+  getBrowserJSInstructions() {
+    let dsn = (this.state.keyList.length ?
+      this.state.keyList[0].dsn.public :
+      'https://public@sentry.example.com/1');
+
+    return (
+      '<!-- Sentry JS SDK 2.1.+ required -->\n' +
+      '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
+      '  <script>\n' +
+      '  // configure the SDK as you normally would\n' +
+      '  Raven.config(\'' + dsn + '\').install();\n\n' +
+      '  /**\n' +
+      '   * Report a routing error to Sentry and show a feedback dialog to\n' +
+      '   * the user.\n' +
+      '   * \n' +
+      '   * > try {\n' +
+      '   * >   renderRoute()\n' +
+      '   * > } catch (err) {\n' +
+      '   * >   handleRouteError(err);\n' +
+      '   * > }\n' +
+      '   */\n' +
+      '  function handleRouteError(err) {\n' +
+      '    Raven.captureException(err);\n' +
+      '    Raven.showReportDialog();\n' +
+      '  };\n' +
+      '  </script>\n' +
+      '{% endif %}\n'
+    );
+  },
+
   handleClick() {
     Raven.showReportDialog({
       // should never make it to the Sentry API, but just in case, use throwaway id
@@ -52,7 +132,18 @@ const ProjectUserReportSettings = React.createClass({
     });
   },
 
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
   render() {
+    if (this.state.loading)
+      return this.renderLoading();
+
     // TODO(dcramer): localize when language is final
     return (
       <div>
@@ -64,11 +155,16 @@ const ProjectUserReportSettings = React.createClass({
 
         <p>When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry</p>
 
+        <p><a className="btn btn-primary" onClick={this.handleClick}>See the report dialog in action</a></p>
+
         <p>The following example uses our Django integration. Check the documentation for the SDK you're using for more details.</p>
 
         <pre>{this.getInstructions()}</pre>
 
-        <p><a className="btn btn-primary" onClick={this.handleClick}>See the report dialog in action</a></p>
+        <p>If you're capturing an error with our Browser JS SDK, things get even simpler:</p>
+
+        <pre>{this.getBrowserJSInstructions()}</pre>
+
       </div>
     );
   }
