commit 85d0b81a92f8a902ebf82a674d133eab85673d4d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Dec 16 13:35:57 2014 -0800

    Improve doc generation

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 3fedcc887c..96812a52cf 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -62,6 +62,12 @@ class GroupDetailsEndpoint(Endpoint):
         return [s[0] for s in seen_by]
 
     def get(self, request, group_id):
+        """
+        Return details on an individual group.
+
+            {method} {path}
+
+        """
         group = Group.objects.get(
             id=group_id,
         )
@@ -82,6 +88,22 @@ class GroupDetailsEndpoint(Endpoint):
         return Response(data)
 
     def put(self, request, group_id):
+        """
+        Update a specific group.
+
+            {method} {path}
+            {{
+              "status": "resolved"
+            }}
+
+        Attributes:
+
+        - status: resolved, unresolved, muted
+        - isBookmarked: 1, 0
+        - assignedTo: user
+
+        """
+
         group = Group.objects.get(
             id=group_id,
         )
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 64ebd4dd6e..ca54fd114f 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -42,6 +42,10 @@ class ProjectGroupIndexEndpoint(Endpoint):
         """
         Return a list of aggregates bound to this project.
 
+            {method} {path}?id=1&id=2&id=3
+              status=resolved&
+              isBookmarked=1
+
         A default query of 'is:resolved' is applied. To return results with
         other statuses send an new query value (i.e. ?query= for all results).
         """
@@ -117,19 +121,21 @@ class ProjectGroupIndexEndpoint(Endpoint):
         """
         Bulk mutate various attributes on groups.
 
+            {method} {path}?id=1&id=2&id=3
+            {{
+              "status": "resolved",
+              "isBookmarked": 1
+            }}
+
         - For non-status updates, only queries by 'id' are accepted.
         - For status updates, the 'id' parameter may be omitted for a batch
         "update all" query.
 
-        PUT ?id=1&id=2&id=3
-          status=resolved&
-          isBookmarked=1
-
         Attributes:
 
-        - status=[resolved|unresolved|muted]
-        - isBookmarked=[1|0]
-        - merge=[1|0]
+        - status: resolved, unresolved, muted
+        - isBookmarked: 1, 0
+        - merge: 1, 0
 
         If any ids are out of scope this operation will succeed without any data
         mutation.
@@ -238,7 +244,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         Only queries by 'id' are accepted.
 
-        DELETE ?id=1&id=2&id=3
+            {method} {path}?id=1&id=2&id=3
 
         If any ids are out of scope this operation will succeed without any data
         mutation
diff --git a/src/sentry/api/views/help_base.py b/src/sentry/api/views/help_base.py
index c3961685ab..8a302e50de 100644
--- a/src/sentry/api/views/help_base.py
+++ b/src/sentry/api/views/help_base.py
@@ -1 +1,119 @@
 from __future__ import absolute_import
+
+import textwrap
+
+from django.contrib.admindocs.views import simplify_regex
+
+from django.utils.importlib import import_module
+
+from sentry.api.base import Endpoint
+from sentry.constants import HTTP_METHODS
+from sentry.web.frontend.base import BaseView
+
+
+class ApiHelpBase(BaseView):
+    auth_required = False
+
+    def get_resources(self, section, prefix='/api/0/'):
+        urls = import_module('sentry.api.urls')
+
+        resources = []
+        for pattern in urls.urlpatterns:
+            callback = self.__get_resource_callback(pattern, prefix)
+            if callback is None:
+                continue
+            if getattr(callback, 'doc_section', None) != section:
+                continue
+            data = self.__get_resource_data(pattern, prefix, callback)
+            resources.append(data)
+        return sorted(resources, key=lambda x: x['path'])
+
+    def get_sections(self, prefix=''):
+        resource_list = sorted(
+            (r for r in self.get_resources(prefix) if r['section']),
+            key=lambda x: x['section'].value,
+        )
+
+        section_list = []
+        last_section = None
+        for resource in resource_list:
+            if resource['section'] != last_section:
+                section_list.append({
+                    'id': resource['section'].name,
+                    'name': resource['section'].value,
+                    'resources': [],
+                })
+            section_list[-1]['resources'].append(resource)
+            last_section = resource['section']
+
+        return section_list
+
+    def __strip_doc(self, doc):
+        return textwrap.dedent(doc).strip()
+
+    def __split_doc(self, doc, path):
+        if doc:
+            try:
+                title, doc = doc.split('\n', 1)
+            except ValueError:
+                title, doc = doc, ''
+        else:
+            title = path
+
+        return title.strip(), doc.strip()
+
+    def __format_doc(self, doc, params):
+        return doc.format(**params)
+
+    def __get_resource_callback(self, pattern, prefix):
+        if not hasattr(pattern, 'callback'):
+            return
+
+        if hasattr(pattern.callback, 'cls'):
+            callback = pattern.callback.cls
+
+            if not issubclass(callback, Endpoint):
+                return
+        elif hasattr(pattern.callback, 'cls_instance'):
+            callback = pattern.callback.cls_instance
+
+            if not isinstance(callback, Endpoint):
+                return
+        else:
+            return
+
+        return callback
+
+    def __get_resource_data(self, pattern, prefix, callback):
+        path = simplify_regex(pattern.regex.pattern)
+        path = path.replace('<', '{').replace('>', '}')
+
+        full_path = prefix.rstrip('/') + path
+
+        methods = []
+        for method_name in HTTP_METHODS:
+            if method_name == 'OPTIONS':
+                continue
+            method = getattr(callback, method_name.lower(), None)
+            if method is None:
+                continue
+            methods.append({
+                'name': method_name,
+                'doc': self.__format_doc(self.__strip_doc(method.__doc__ or ''), {
+                    'path': full_path,
+                    'method': method_name,
+                }),
+            })
+
+        title, docstring = self.__split_doc(
+            self.__strip_doc(callback.__doc__ or ''), path=path)
+
+        return {
+            'path': full_path,
+            'methods': methods,
+            'doc': self.__format_doc(docstring, {
+                'path': full_path,
+            }),
+            'title': title,
+            'section': getattr(callback, 'doc_section', None),
+        }
diff --git a/src/sentry/api/views/help_index.py b/src/sentry/api/views/help_index.py
index c3fcc8d978..7d556e54aa 100644
--- a/src/sentry/api/views/help_index.py
+++ b/src/sentry/api/views/help_index.py
@@ -1,15 +1,10 @@
 from __future__ import absolute_import
 
-from django.contrib.admindocs.views import simplify_regex
-from django.utils.importlib import import_module
-
-from sentry.api.base import Endpoint
-from sentry.constants import HTTP_METHODS
+from sentry.api.views.help_base import ApiHelpBase
 from sentry.web.helpers import render_to_response
-from sentry.web.frontend.base import BaseView
 
 
-class ApiHelpIndexView(BaseView):
+class ApiHelpIndexView(ApiHelpBase):
     auth_required = False
 
     def get(self, request):
@@ -20,92 +15,3 @@ class ApiHelpIndexView(BaseView):
         }
 
         return render_to_response('sentry/help/api_index.html', context, request)
-
-    def get_sections(self, prefix=''):
-        resource_list = sorted(
-            (r for r in self.get_resources(prefix) if r['section']),
-            key=lambda x: x['section'].value,
-        )
-
-        section_list = []
-        last_section = None
-        for resource in resource_list:
-            if resource['section'] != last_section:
-                section_list.append({
-                    'id': resource['section'].name,
-                    'name': resource['section'].value,
-                    'resources': [],
-                })
-            section_list[-1]['resources'].append(resource)
-            last_section = resource['section']
-
-        return section_list
-
-    def get_resources(self, prefix=''):
-        urls = import_module('sentry.api.urls')
-
-        resources = []
-        for pattern in urls.urlpatterns:
-            data = self.__get_resource_data(pattern, prefix)
-            if data is None:
-                continue
-            resources.append(data)
-        return sorted(resources, key=lambda x: x['path'])
-
-    def __strip_doc(self, doc):
-        return doc.strip()
-
-    def __split_doc(self, doc, path):
-        if doc:
-            try:
-                title, doc = doc.split('\n', 1)
-            except ValueError:
-                title, doc = doc, ''
-        else:
-            title = path
-
-        return title.strip(), doc.strip()
-
-    def __get_resource_data(self, pattern, prefix):
-        if not hasattr(pattern, 'callback'):
-            return
-
-        if hasattr(pattern.callback, 'cls'):
-            callback = pattern.callback.cls
-
-            if not issubclass(callback, Endpoint):
-                return
-        elif hasattr(pattern.callback, 'cls_instance'):
-            callback = pattern.callback.cls_instance
-
-            if not isinstance(callback, Endpoint):
-                return
-        else:
-            return
-
-        path = simplify_regex(pattern.regex.pattern)
-
-        path = path.replace('<', '{').replace('>', '}')
-
-        methods = []
-        for method_name in HTTP_METHODS:
-            if method_name == 'OPTIONS':
-                continue
-            method = getattr(callback, method_name.lower(), None)
-            if method is None:
-                continue
-            methods.append({
-                'name': method_name,
-                'doc': self.__strip_doc(method.__doc__ or ''),
-            })
-
-        title, docstring = self.__split_doc(
-            self.__strip_doc(callback.__doc__ or ''), path=path)
-
-        return {
-            'path': prefix.rstrip('/') + path,
-            'methods': methods,
-            'doc': docstring,
-            'title': title,
-            'section': getattr(callback, 'doc_section', None),
-        }
diff --git a/src/sentry/api/views/help_section.py b/src/sentry/api/views/help_section.py
index fb9c06270e..17066fe463 100644
--- a/src/sentry/api/views/help_section.py
+++ b/src/sentry/api/views/help_section.py
@@ -1,16 +1,13 @@
 from __future__ import absolute_import
 
-from django.contrib.admindocs.views import simplify_regex
 from django.http import Http404
-from django.utils.importlib import import_module
 
-from sentry.api.base import DocSection, Endpoint
-from sentry.constants import HTTP_METHODS
+from sentry.api.base import DocSection
+from sentry.api.views.help_base import ApiHelpBase
 from sentry.web.helpers import render_to_response
-from sentry.web.frontend.base import BaseView
 
 
-class ApiHelpSectionView(BaseView):
+class ApiHelpSectionView(ApiHelpBase):
     auth_required = False
 
     def get(self, request, section_id):
@@ -28,78 +25,3 @@ class ApiHelpSectionView(BaseView):
         }
 
         return render_to_response('sentry/help/api_section.html', context, request)
-
-    def get_resources(self, section, prefix='/api/0/'):
-        urls = import_module('sentry.api.urls')
-
-        resources = []
-        for pattern in urls.urlpatterns:
-            callback = self.__get_resource_callback(pattern, prefix)
-            if callback is None:
-                continue
-            if getattr(callback, 'doc_section', None) != section:
-                continue
-            data = self.__get_resource_data(pattern, prefix, callback)
-            resources.append(data)
-        return sorted(resources, key=lambda x: x['path'])
-
-    def __strip_doc(self, doc):
-        return doc.strip()
-
-    def __split_doc(self, doc, path):
-        if doc:
-            try:
-                title, doc = doc.split('\n', 1)
-            except ValueError:
-                title, doc = doc, ''
-        else:
-            title = path
-
-        return title.strip(), doc.strip()
-
-    def __get_resource_callback(self, pattern, prefix):
-        if not hasattr(pattern, 'callback'):
-            return
-
-        if hasattr(pattern.callback, 'cls'):
-            callback = pattern.callback.cls
-
-            if not issubclass(callback, Endpoint):
-                return
-        elif hasattr(pattern.callback, 'cls_instance'):
-            callback = pattern.callback.cls_instance
-
-            if not isinstance(callback, Endpoint):
-                return
-        else:
-            return
-
-        return callback
-
-    def __get_resource_data(self, pattern, prefix, callback):
-        path = simplify_regex(pattern.regex.pattern)
-
-        path = path.replace('<', '{').replace('>', '}')
-
-        methods = []
-        for method_name in HTTP_METHODS:
-            if method_name == 'OPTIONS':
-                continue
-            method = getattr(callback, method_name.lower(), None)
-            if method is None:
-                continue
-            methods.append({
-                'name': method_name,
-                'doc': self.__strip_doc(method.__doc__ or ''),
-            })
-
-        title, docstring = self.__split_doc(
-            self.__strip_doc(callback.__doc__ or ''), path=path)
-
-        return {
-            'path': prefix.rstrip('/') + path,
-            'methods': methods,
-            'doc': docstring,
-            'title': title,
-            'section': getattr(callback, 'doc_section', None),
-        }
diff --git a/src/sentry/static/sentry/styles/sentry.css b/src/sentry/static/sentry/styles/sentry.css
index b9630616e0..306e4ef066 100644
--- a/src/sentry/static/sentry/styles/sentry.css
+++ b/src/sentry/static/sentry/styles/sentry.css
@@ -9485,3 +9485,24 @@ pre {
 .docs .docs-main ol li {
   margin: 0 0 5px;
 }
+.docs .docs-main .api-resource {
+  border: 1px solid #e9ecf0;
+  padding: 15px 15px 0;
+  border-top-left-radius: 5px;
+  border-top-right-radius: 5px;
+  margin-bottom: -1px;
+}
+.docs .docs-main .api-resource + .api-resource {
+  border-radius: 0;
+}
+.docs .docs-main .api-resource:last-child {
+  margin-bottom: 15px;
+  border-bottom-left-radius: 5px;
+  border-bottom-right-radius: 5px;
+}
+.docs .docs-main .api-resource h4 {
+  background: rgba(250, 250, 250, 0.55);
+  border-bottom: 1px solid #e9ecf0;
+  padding: 10px 15px;
+  margin: -15px -15px 15px;
+}
diff --git a/src/sentry/templates/sentry/help/api_section.html b/src/sentry/templates/sentry/help/api_section.html
index 3df1e59007..d957f7d56e 100644
--- a/src/sentry/templates/sentry/help/api_section.html
+++ b/src/sentry/templates/sentry/help/api_section.html
@@ -2,6 +2,7 @@
 
 {% load i18n %}
 {% load sentry_helpers %}
+{% load sentry_markup %}
 
 {% block breadcrumbs %}
     {{ block.super }}
@@ -26,7 +27,7 @@
                   <div class="api-method">
                       <h5>{{ method.name.upper }}</h5>
                       {% if method.doc %}
-                          {{ method.doc|linebreaks }}
+                          {{ method.doc|markdown }}
                       {% endif %}
                   </div>
                 {% endfor %}
diff --git a/src/sentry/templates/sentry/help/index.html b/src/sentry/templates/sentry/help/index.html
index 27b2ec4d82..e22983798a 100644
--- a/src/sentry/templates/sentry/help/index.html
+++ b/src/sentry/templates/sentry/help/index.html
@@ -20,11 +20,14 @@
             {% endblock %}
           </div>
           <div class="span9 docs-main">
-              <ul class="crumbs">
-                {% block breadcrumbs %}
-                <li><a href="{% url 'sentry-help' %}">Docs</a></li>
-                {% endblock %}
-              </ul>
+            <ul class="crumbs">
+              {% block breadcrumbs %}
+              <li><a href="{% url 'sentry-help' %}">Docs</a></li>
+              {% endblock %}
+            </ul>
+            <div class="alert alert-info">
+              Please excuse our dust. The documentation is actively being worked overhauled.
+            </div>
             {% block main %}
               <h3>Sentry Documentation</h3>
               <p>Welcome to the Sentry Docs. Reading through the guides and reference here will give you a complete understanding of how Sentry works and how to get the most out of it. We recommend that you read through the Guides first, then on to the client installation instructions for your specific platform.</p>
