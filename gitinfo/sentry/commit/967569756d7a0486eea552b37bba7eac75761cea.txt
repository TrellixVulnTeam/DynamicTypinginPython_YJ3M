commit 967569756d7a0486eea552b37bba7eac75761cea
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Apr 2 10:49:49 2020 +0200

    feat(ui): added privacy rule selector search field (#17867)

diff --git a/src/sentry/static/sentry/app/components/forms/inputField.tsx b/src/sentry/static/sentry/app/components/forms/inputField.tsx
index 02710cfd68..e823d14d6c 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.tsx
@@ -6,7 +6,11 @@ import FormField from 'app/components/forms/formField';
 type InputFieldProps = FormField['props'] & {
   placeholder: string;
   inputStyle?: object;
-  onBlur?: (event?: React.FocusEvent<HTMLInputElement>) => void;
+  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;
+  onKeyPress?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
+  onKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
+  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;
+  autoComplete?: string;
 };
 
 export default class InputField<
@@ -18,16 +22,13 @@ export default class InputField<
     placeholder: PropTypes.string,
   };
 
-  getAttributes() {
-    return {};
-  }
-
   getField() {
     return (
       <input
         id={this.getId()}
         type={this.getType()}
         className="form-control"
+        autoComplete={this.props.autoComplete}
         placeholder={this.props.placeholder}
         onChange={this.onChange}
         disabled={this.props.disabled}
@@ -36,7 +37,9 @@ export default class InputField<
         value={this.state.value as string | number} //can't pass in boolean here
         style={this.props.inputStyle}
         onBlur={this.props.onBlur}
-        {...this.getAttributes()}
+        onFocus={this.props.onFocus}
+        onKeyPress={this.props.onKeyPress}
+        onKeyDown={this.props.onKeyDown}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.tsx b/src/sentry/static/sentry/app/components/forms/textareaField.tsx
index cb74c447c0..90262b0c9c 100644
--- a/src/sentry/static/sentry/app/components/forms/textareaField.tsx
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.tsx
@@ -17,7 +17,6 @@ export default class TextareaField extends InputField<InputField['props'], State
         required={this.props.required}
         placeholder={this.props.placeholder}
         onChange={this.onChange.bind(this)}
-        {...this.getAttributes}
       />
     );
   }
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
index 96d1d547e1..12cf377bdf 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelForm.tsx
@@ -15,6 +15,7 @@ import {
   getRuleTypeSelectorFieldLabel,
   getMethodTypeSelectorFieldLabel,
 } from './utils';
+import DataPrivacyRulesPanelSelectorField from './dataPrivacyRulesPanelSelectorField';
 
 type Rule = {
   id: number;
@@ -121,9 +122,7 @@ class DataPrivacyRulesForm extends React.PureComponent<Props, State> {
             required
           />
           <From disabled={disabled}>{t('from')}</From>
-          <StyledTextField
-            name="from"
-            placeholder={t('ex. strings, numbers, custom')}
+          <DataPrivacyRulesPanelSelectorField
             onChange={(value: string) => {
               this.handleChange('from', value);
             }}
@@ -203,6 +202,7 @@ const From = styled('div')<{disabled?: boolean}>`
 
 const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
   width: 100%;
+  line-height: 18px;
   ${p =>
     p.isDisabled &&
     `
@@ -215,9 +215,12 @@ const StyledSelectControl = styled(SelectControl)<{isDisabled?: boolean}>`
   }
 `;
 
-const StyledTextField = styled(TextField)<{error?: string}>`
+const CustomRegularExpression = styled(TextField)<{error?: string}>`
+  grid-column-start: 1;
+  grid-column-end: -1;
   width: 100%;
   height: 34px;
+  font-family: ${p => p.theme.text.familyMono};
   font-size: ${p => p.theme.fontSizeSmall};
   input {
     height: 34px;
@@ -229,12 +232,6 @@ const StyledTextField = styled(TextField)<{error?: string}>`
     `}
 `;
 
-const CustomRegularExpression = styled(StyledTextField)`
-  grid-column-start: 1;
-  grid-column-end: -1;
-  font-family: ${p => p.theme.text.familyMono};
-`;
-
 const StyledIconTrash = styled(Button)<{fullHeight?: boolean}>`
   color: ${p => p.theme.gray3};
   height: 100%;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
new file mode 100644
index 0000000000..4bc712923f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorField.tsx
@@ -0,0 +1,329 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import TextField from 'app/components/forms/textField';
+import TextOverflow from 'app/components/textOverflow';
+import {defined} from 'app/utils';
+
+import {
+  allSelectors,
+  unaryOperatorSuggestions,
+  Suggestion,
+  Suggestions,
+} from './dataPrivacyRulesPanelSelectorFieldTypes';
+import getNewSuggestions from './getNewSuggestions';
+
+type State = {
+  suggestions: Suggestions;
+  fieldValues: Array<Suggestion | Array<Suggestion>>;
+  activeSuggestion: number;
+  showSuggestions: boolean;
+};
+
+type Props = {
+  value: string;
+  onChange: (value: string) => void;
+  error?: string;
+  onBlur?: (event: React.KeyboardEvent<HTMLInputElement>) => void;
+  disabled?: boolean;
+};
+
+class DataPrivacyRulesPanelSelectorField extends React.Component<Props, State> {
+  state: State = {
+    suggestions: [],
+    fieldValues: [],
+    activeSuggestion: 0,
+    showSuggestions: false,
+  };
+
+  componentWillMount() {
+    document.addEventListener('mousedown', this.handleClickOutside, false);
+  }
+
+  componentDidMount() {
+    this.loadFieldValues(this.props.value, true);
+  }
+
+  componentWillUnmount() {
+    document.removeEventListener('mousedown', this.handleClickOutside, false);
+  }
+
+  selectorField = React.createRef<HTMLDivElement>();
+  suggestionList = React.createRef<HTMLUListElement>();
+
+  loadFieldValues = (newValue: string, initialLoading = false) => {
+    const splittedValue = newValue.split(' ');
+    const fieldValues: Array<Suggestion | Array<Suggestion>> = [];
+
+    for (const splittedValueIndex in splittedValue) {
+      const value = splittedValue[splittedValueIndex];
+
+      if (value.includes('!') && !!value.split('!')[1]) {
+        const valueAfterUnaryOperator = value.split('!')[1];
+        const selector = allSelectors.find(s => s.value === valueAfterUnaryOperator);
+        if (!selector) {
+          fieldValues.push([
+            unaryOperatorSuggestions[0],
+            {type: 'string', value: valueAfterUnaryOperator},
+          ]);
+          continue;
+        }
+        fieldValues.push([unaryOperatorSuggestions[0], selector]);
+        continue;
+      }
+
+      const selector = allSelectors.find(s => s.value === value);
+      if (selector) {
+        fieldValues.push(selector);
+        continue;
+      }
+
+      fieldValues.push({type: 'string', value});
+    }
+
+    const {showSuggestions = true, filteredSuggestions} = getNewSuggestions(fieldValues);
+
+    this.setState({
+      fieldValues,
+      activeSuggestion: 0,
+      suggestions: filteredSuggestions,
+      showSuggestions: initialLoading ? false : showSuggestions,
+    });
+  };
+
+  handleChange = (newValue: string) => {
+    this.loadFieldValues(newValue);
+    this.props.onChange(newValue);
+  };
+
+  handleClickOutside = (event: MouseEvent) => {
+    if (
+      event.target instanceof HTMLElement &&
+      this.selectorField.current &&
+      this.selectorField.current.contains(event.target)
+    ) {
+      return;
+    }
+
+    this.setState({
+      showSuggestions: false,
+    });
+  };
+
+  handleChangeParentValue = () => {
+    const {onChange} = this.props;
+    const {fieldValues} = this.state;
+    const newValue: Array<string> = [];
+
+    for (const index in fieldValues) {
+      const fieldValue = fieldValues[index];
+      if (Array.isArray(fieldValue)) {
+        newValue.push(`${fieldValue[0].value}${fieldValue[1].value}`);
+        continue;
+      }
+      newValue.push(fieldValue.value);
+    }
+
+    onChange(newValue.join(' '));
+  };
+
+  getNewFieldValues = (suggestion: Suggestion): Array<Suggestion | Array<Suggestion>> => {
+    const fieldValues = [...this.state.fieldValues];
+    const lastFieldValue = fieldValues[fieldValues.length - 1];
+
+    if (!defined(lastFieldValue)) {
+      return [suggestion];
+    }
+
+    if (Array.isArray(lastFieldValue)) {
+      fieldValues[fieldValues.length - 1] = [lastFieldValue[0], suggestion];
+      return fieldValues;
+    }
+
+    if (lastFieldValue?.type === 'unary') {
+      fieldValues[fieldValues.length - 1] = [lastFieldValue, suggestion];
+    }
+
+    if (lastFieldValue?.type === 'string') {
+      fieldValues[fieldValues.length - 1] = suggestion;
+    }
+
+    return fieldValues;
+  };
+
+  handleClickSuggestionItem = (suggestion: Suggestion) => () => {
+    const fieldValues = this.getNewFieldValues(suggestion);
+    this.setState(
+      {
+        fieldValues,
+        activeSuggestion: 0,
+        showSuggestions: false,
+      },
+      () => {
+        this.handleChangeParentValue();
+      }
+    );
+  };
+
+  scrollToSuggestion = () => {
+    const {activeSuggestion} = this.state;
+    this.suggestionList?.current?.children[activeSuggestion].scrollIntoView({
+      behavior: 'smooth',
+      block: 'nearest',
+      inline: 'start',
+    });
+  };
+
+  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
+    const {fieldValues, activeSuggestion, suggestions} = this.state;
+
+    if (event.keyCode === 8) {
+      const lastFieldValue = fieldValues[fieldValues.length - 1];
+      if (Array.isArray(lastFieldValue) && lastFieldValue[1].value.length === 1) {
+        this.setState({
+          fieldValues: [...fieldValues, lastFieldValue[0]],
+        });
+      }
+      return;
+    }
+
+    if (event.keyCode === 13) {
+      this.handleClickSuggestionItem(suggestions[activeSuggestion])();
+      return;
+    }
+
+    if (event.keyCode === 38) {
+      if (activeSuggestion === 0) {
+        return;
+      }
+      this.setState({activeSuggestion: activeSuggestion - 1}, () => {
+        this.scrollToSuggestion();
+      });
+      return;
+    }
+
+    if (event.keyCode === 40) {
+      if (activeSuggestion === suggestions.length - 1) {
+        return;
+      }
+      this.setState({activeSuggestion: activeSuggestion + 1}, () => {
+        this.scrollToSuggestion();
+      });
+      return;
+    }
+
+    if (event.keyCode === 32) {
+      this.setState({
+        fieldValues: [...fieldValues, {value: ' ', type: 'string'}],
+      });
+      return;
+    }
+  };
+
+  handleFocus = () => {
+    this.setState({
+      showSuggestions: true,
+    });
+  };
+
+  render() {
+    const {error, onBlur, disabled, value} = this.props;
+    const {showSuggestions, suggestions, activeSuggestion} = this.state;
+
+    return (
+      <Wrapper ref={this.selectorField}>
+        <StyledTextField
+          name="from"
+          placeholder={t('ex. strings, numbers, custom')}
+          onChange={this.handleChange}
+          autoComplete="off"
+          value={value}
+          onKeyDown={this.handleKeyDown}
+          error={error}
+          onBlur={onBlur}
+          onFocus={this.handleFocus}
+          disabled={disabled}
+        />
+        {showSuggestions && suggestions.length > 0 && (
+          <SuggestionsWrapper ref={this.suggestionList}>
+            {suggestions.map((suggestion, index) => (
+              <SuggestionItem
+                key={suggestion.value}
+                onClick={this.handleClickSuggestionItem(suggestion)}
+                active={index === activeSuggestion}
+                tabIndex={-1}
+              >
+                <TextOverflow>{suggestion.value}</TextOverflow>
+                {suggestion?.description && (
+                  <SuggestionDescription>
+                    (<TextOverflow>{suggestion.description}</TextOverflow>)
+                  </SuggestionDescription>
+                )}
+              </SuggestionItem>
+            ))}
+          </SuggestionsWrapper>
+        )}
+      </Wrapper>
+    );
+  }
+}
+
+export default DataPrivacyRulesPanelSelectorField;
+
+const Wrapper = styled('div')`
+  position: relative;
+  width: 100%;
+`;
+
+const StyledTextField = styled(TextField)<{error?: string}>`
+  width: 100%;
+  height: 34px;
+  font-size: ${p => p.theme.fontSizeSmall};
+  input {
+    height: 34px;
+  }
+  ${p =>
+    !p.error &&
+    `
+      margin-bottom: 0;
+    `}
+`;
+
+const SuggestionsWrapper = styled('ul')`
+  position: absolute;
+  width: 100%;
+  padding-left: 0;
+  list-style: none;
+  margin-bottom: 0;
+  box-shadow: 0 2px 0 rgba(37, 11, 54, 0.04);
+  border: 1px solid ${p => p.theme.borderDark};
+  border-radius: 0 0 ${space(0.5)} ${space(0.5)};
+  background: ${p => p.theme.white};
+  top: 35px;
+  z-index: 1001;
+  overflow: hidden;
+  max-height: 200px;
+  overflow-y: auto;
+`;
+
+const SuggestionItem = styled('li')<{active: boolean}>`
+  display: grid;
+  grid-template-columns: auto 1fr;
+  grid-gap: ${space(1)};
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  padding: ${space(1)} ${space(2)};
+  font-size: ${p => p.theme.fontSizeMedium};
+  cursor: pointer;
+  background: ${p => (p.active ? p.theme.offWhiteLight : p.theme.white)};
+  :hover {
+    background: ${p => (p.active ? p.theme.offWhiteLight : p.theme.offWhite)};
+  }
+`;
+
+const SuggestionDescription = styled('div')`
+  display: flex;
+  overflow: hidden;
+  color: ${p => p.theme.gray2};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
new file mode 100644
index 0000000000..725219c7ce
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/dataPrivacyRulesPanelSelectorFieldTypes.tsx
@@ -0,0 +1,123 @@
+import {t} from 'app/locale';
+
+const binaryOperatorSuggestions: Suggestions = [
+  {
+    type: 'binary',
+    value: '&&',
+  },
+  {
+    type: 'binary',
+    value: '||',
+  },
+];
+
+const unaryOperatorSuggestions: Suggestions = [
+  {
+    type: 'unary',
+    value: '!',
+  },
+];
+
+const valueSuggestions: Suggestions = [
+  {
+    type: 'value',
+    value: '$string',
+    description: t('Any string value'),
+  },
+  {
+    type: 'value',
+    value: '$number',
+    description: t('Any integer or float value'),
+  },
+  {
+    type: 'value',
+    value: '$datetime',
+    description: t('Timestamps and dates'),
+  },
+  {
+    type: 'value',
+    value: '$array',
+    description: t('Any JSON array value'),
+  },
+  {
+    type: 'value',
+    value: '$object',
+    description: t('Any JSON object'),
+  },
+  {
+    type: 'value',
+    value: '$error',
+    description: t('An exception instance'),
+  },
+  {
+    type: 'value',
+    value: '$stacktrace',
+    description: t('A stacktrace instance'),
+  },
+  {
+    type: 'value',
+    value: '$frame',
+    description: t('A stacktrace frame'),
+  },
+  {
+    type: 'value',
+    value: '$http',
+    description: t('HTTP request context'),
+  },
+  {
+    type: 'value',
+    value: '$user',
+    description: t('User context'),
+  },
+  {
+    type: 'value',
+    value: '$message',
+    description: t('The event message'),
+  },
+  {
+    type: 'value',
+    value: '$thread',
+    description: t('A thread instance'),
+  },
+  {
+    type: 'value',
+    value: '$breadcrumb',
+    description: t('A breadcrumb'),
+  },
+  {
+    type: 'value',
+    value: '$span',
+    description: t('A trace span'),
+  },
+  {
+    type: 'value',
+    value: '$sdk',
+    description: t('SDK name and version information'),
+  },
+];
+
+const initialSelectors: Suggestions = [...valueSuggestions, ...unaryOperatorSuggestions];
+
+const allSelectors: Suggestions = [
+  ...valueSuggestions,
+  ...unaryOperatorSuggestions,
+  ...binaryOperatorSuggestions,
+];
+
+export type SuggestionType = 'value' | 'unary' | 'binary' | 'string';
+
+export type Suggestions = Array<Suggestion>;
+
+export type Suggestion = {
+  type: SuggestionType;
+  value: string;
+  description?: string;
+};
+
+export {
+  initialSelectors,
+  allSelectors,
+  valueSuggestions,
+  unaryOperatorSuggestions,
+  binaryOperatorSuggestions,
+};
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx
new file mode 100644
index 0000000000..4d5019a240
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRulesPanel/getNewSuggestions.tsx
@@ -0,0 +1,93 @@
+import {
+  initialSelectors,
+  valueSuggestions,
+  binaryOperatorSuggestions,
+  unaryOperatorSuggestions,
+  SuggestionType,
+  Suggestion,
+} from './dataPrivacyRulesPanelSelectorFieldTypes';
+
+type Output = {
+  filteredSuggestions: Array<Suggestion>;
+  showSuggestions?: boolean;
+};
+
+const getFilteredSuggestions = (value: string, type: SuggestionType) => {
+  let valuesToBeFiltered: Array<Suggestion> = [];
+
+  switch (type) {
+    case 'binary': {
+      valuesToBeFiltered = binaryOperatorSuggestions;
+      break;
+    }
+    case 'value': {
+      valuesToBeFiltered = valueSuggestions;
+      break;
+    }
+    case 'unary': {
+      valuesToBeFiltered = unaryOperatorSuggestions;
+      break;
+    }
+    default: {
+      valuesToBeFiltered = initialSelectors;
+    }
+  }
+
+  const filteredSuggestions = valuesToBeFiltered.filter(
+    s => s.value.indexOf(value.toLowerCase()) > -1
+  );
+
+  return {
+    filteredSuggestions,
+    showSuggestions: !(
+      filteredSuggestions.length === 1 && filteredSuggestions[0].value === value
+    ),
+  };
+};
+
+function getNewSuggestions(fieldValues: Array<Suggestion | Array<Suggestion>>): Output {
+  const lastFieldValue = fieldValues[fieldValues.length - 1];
+  const penultimateFieldValue = fieldValues[fieldValues.length - 2];
+
+  if (Array.isArray(lastFieldValue)) {
+    // recursion
+    return getNewSuggestions(lastFieldValue);
+  }
+
+  if (Array.isArray(penultimateFieldValue)) {
+    if (lastFieldValue?.type === 'binary') {
+      // returns filteres values
+      return getFilteredSuggestions(lastFieldValue?.value, 'value');
+    }
+    // returns all binaries without any filter
+    return getFilteredSuggestions('', 'binary');
+  }
+
+  if (lastFieldValue?.type === 'value' && penultimateFieldValue?.type === 'unary') {
+    // returns filteres values
+    return getFilteredSuggestions(lastFieldValue?.value, 'value');
+  }
+
+  if (lastFieldValue?.type === 'unary') {
+    // returns all values without any filter
+    return getFilteredSuggestions('', 'value');
+  }
+
+  if (lastFieldValue?.type === 'string' && penultimateFieldValue?.type === 'value') {
+    // returns all binaries without any filter
+    return getFilteredSuggestions('', 'binary');
+  }
+
+  if (
+    (penultimateFieldValue?.type === 'string' && !lastFieldValue?.value) ||
+    (penultimateFieldValue?.type === 'value' && !lastFieldValue?.value) ||
+    lastFieldValue?.type === 'binary'
+  ) {
+    // returns filteres binaries
+    return getFilteredSuggestions(lastFieldValue?.value, 'binary');
+  }
+
+  return getFilteredSuggestions(lastFieldValue?.value, lastFieldValue?.type);
+}
+
+export default getNewSuggestions;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
index e4d1c511eb..9b911a8327 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.tsx
@@ -27,7 +27,7 @@ const organizationNavigation: NavigationSection[] = [
           'View and manage the security and privacy settings of an organization'
         ),
         id: 'security-and-privacy',
-        show: ({features}) => features!.has('datascrubbers-v2'),
+        show: ({features}) => !!features?.has('datascrubbers-v2'),
         badge: () => 'new',
       },
       {
@@ -95,4 +95,5 @@ const organizationNavigation: NavigationSection[] = [
     ],
   },
 ];
+
 export default organizationNavigation;
diff --git a/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap
index aa7e39ce42..23b740e5b8 100644
--- a/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/numberField.spec.jsx.snap
@@ -53,7 +53,6 @@ exports[`NumberField render() renders with optional attributes 1`] = `
       className="form-control"
       disabled={false}
       id="id-fieldName"
-      max={100}
       name="fieldName"
       onChange={[Function]}
       required={false}
diff --git a/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap
index 62147b46e8..4f6bbdc6d2 100644
--- a/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/rangeField.spec.jsx.snap
@@ -11,12 +11,9 @@ exports[`RangeField render() renders 1`] = `
       className="form-control"
       disabled={false}
       id="id-fieldName"
-      max={100}
-      min={0}
       name="fieldName"
       onChange={[Function]}
       required={false}
-      step={1}
       type="range"
       value=""
     />
@@ -35,12 +32,9 @@ exports[`RangeField render() renders with form context 1`] = `
       className="form-control"
       disabled={false}
       id="id-fieldName"
-      max={100}
-      min={0}
       name="fieldName"
       onChange={[Function]}
       required={false}
-      step={1}
       type="range"
       value={2}
     />
@@ -59,12 +53,9 @@ exports[`RangeField render() renders with optional attributes 1`] = `
       className="form-control"
       disabled={false}
       id="id-fieldName"
-      max={3}
-      min={0}
       name="fieldName"
       onChange={[Function]}
       required={false}
-      step={1}
       type="range"
       value=""
     />
@@ -83,12 +74,9 @@ exports[`RangeField render() renders with value 1`] = `
       className="form-control"
       disabled={false}
       id="id-fieldName"
-      max={100}
-      min={0}
       name="fieldName"
       onChange={[Function]}
       required={false}
-      step={1}
       type="range"
       value={2}
     />
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 1560416db5..4eebc4bf7b 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -155,7 +155,6 @@ exports[`InviteMember should render roles when available and allowed, and handle
                 onChange={[Function]}
                 placeholder="e.g. teammate@example.com"
                 required={false}
-                spellCheck="false"
                 type="text"
                 value=""
               />
