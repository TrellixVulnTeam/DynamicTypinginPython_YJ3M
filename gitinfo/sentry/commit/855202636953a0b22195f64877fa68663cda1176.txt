commit 855202636953a0b22195f64877fa68663cda1176
Author: William Mak <william@wmak.io>
Date:   Thu May 7 16:00:01 2020 -0400

    feat(discover): Quantizing date params
    
    - When using a relative date period, quantize the dates so that we can
      take advantage of caching
    - Only quantizing for periods over an hour
            - quantized to the minute for durations under 30 days
            - quantized to 15 minutes for durations over 30 days

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 200cc470c5..6fe97906de 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -86,6 +86,22 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
         return snuba_args
 
+    def quantize_date_params(self, request, params):
+        # We only need to perform this rounding on relative date periods
+        if "statsPeriod" not in request.GET:
+            return params
+        results = params.copy()
+        duration = (params["end"] - params["start"]).total_seconds()
+        # Only perform rounding on durations longer than an hour
+        if duration > 3600:
+            # Round to 15 minutes if over 30 days, otherwise round to the minute
+            round_to = 15 * 60 if duration >= 30 * 24 * 3600 else 60
+            for key in ["start", "end"]:
+                results[key] = snuba.quantize_time(
+                    params[key], params.get("organization_id", 0), duration=round_to
+                )
+        return results
+
 
 class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
     def handle_results_with_meta(self, request, organization, project_ids, results):
@@ -146,6 +162,7 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
                     params = self.get_filter_params(request, organization)
                 except NoProjects:
                     return {"data": []}
+                params = self.quantize_date_params(request, params)
                 rollup = get_rollup_from_request(
                     request,
                     params,
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index ca069ce02d..d4d07d7cb4 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -125,6 +125,7 @@ class OrganizationEventsV2Endpoint(OrganizationEventsV2EndpointBase):
                 params = self.get_filter_params(request, organization)
             except NoProjects:
                 return Response([])
+            params = self.quantize_date_params(request, params)
 
             has_global_views = features.has(
                 "organizations:global-views", organization, actor=request.user
diff --git a/src/sentry/api/endpoints/organization_events_facets.py b/src/sentry/api/endpoints/organization_events_facets.py
index 6ae9d43161..badee119e9 100644
--- a/src/sentry/api/endpoints/organization_events_facets.py
+++ b/src/sentry/api/endpoints/organization_events_facets.py
@@ -23,6 +23,7 @@ class OrganizationEventsFacetsEndpoint(OrganizationEventsEndpointBase):
                 params = self.get_filter_params(request, organization)
             except NoProjects:
                 return Response([])
+            params = self.quantize_date_params(request, params)
             self._validate_project_ids(request, organization, params)
 
         with sentry_sdk.start_span(op="discover.endpoint", description="discover_query"):
diff --git a/src/sentry/api/endpoints/organization_events_meta.py b/src/sentry/api/endpoints/organization_events_meta.py
index 1263d82497..6222117485 100644
--- a/src/sentry/api/endpoints/organization_events_meta.py
+++ b/src/sentry/api/endpoints/organization_events_meta.py
@@ -26,6 +26,7 @@ class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
                 params = self.get_filter_params(request, organization)
             except NoProjects:
                 return Response({"count": 0})
+            params = self.quantize_date_params(request, params)
 
         try:
             result = discover.query(
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index e1a825faf9..c388c46934 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -1041,7 +1041,7 @@ def quantize_time(time, key_hash, duration=300):
     # Use the hash so that seconds past the hour gets rounded differently per query.
     jitter = key_hash % duration
     seconds_past_hour = time.minute * 60 + time.second
-    # Round seconds to a multiple of duration, cause this uses "floor" division shouldn't give us a future window
+    # Round seconds to a multiple of duration, because this uses "floor" division shouldn't give us a future window
     time_window_start = seconds_past_hour // duration * duration + jitter
     # If the time is past the rounded seconds then we want our key to be for this timewindow
     if time_window_start < seconds_past_hour:
diff --git a/tests/snuba/api/endpoints/test_organization_events_facets.py b/tests/snuba/api/endpoints/test_organization_events_facets.py
index 8f1472efa9..8e26630f53 100644
--- a/tests/snuba/api/endpoints/test_organization_events_facets.py
+++ b/tests/snuba/api/endpoints/test_organization_events_facets.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import mock
+
+from pytz import utc
 from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
@@ -498,3 +501,36 @@ class OrganizationEventsFacetsEndpointTest(SnubaTestCase, APITestCase):
                     },
                 )
         assert response.status_code == 400
+
+    @mock.patch("sentry.utils.snuba.quantize_time")
+    def test_quantize_dates(self, mock_quantize):
+        mock_quantize.return_value = before_now(days=1).replace(tzinfo=utc)
+        with self.feature("organizations:discover-basic"):
+            # Don't quantize short time periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"statsPeriod": "1h", "query": "", "field": ["id", "timestamp"]},
+            )
+            # Don't quantize absolute date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_format(before_now(days=20)),
+                    "end": iso_format(before_now(days=15)),
+                    "query": "",
+                    "field": ["id", "timestamp"],
+                },
+            )
+
+            assert len(mock_quantize.mock_calls) == 0
+
+            # Quantize long date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["id", "timestamp"], "statsPeriod": "90d", "query": ""},
+            )
+
+            assert len(mock_quantize.mock_calls) == 2
diff --git a/tests/snuba/api/endpoints/test_organization_events_meta.py b/tests/snuba/api/endpoints/test_organization_events_meta.py
index aa65e86797..4b6070f251 100644
--- a/tests/snuba/api/endpoints/test_organization_events_meta.py
+++ b/tests/snuba/api/endpoints/test_organization_events_meta.py
@@ -1,5 +1,9 @@
 from __future__ import absolute_import
 
+import mock
+
+from pytz import utc
+
 from django.core.urlresolvers import reverse
 
 from sentry.testutils import APITestCase, SnubaTestCase
@@ -112,6 +116,39 @@ class OrganizationEventsMetaEndpoint(APITestCase, SnubaTestCase):
             )
         assert response.status_code == 400
 
+    @mock.patch("sentry.utils.snuba.quantize_time")
+    def test_quantize_dates(self, mock_quantize):
+        mock_quantize.return_value = before_now(days=1).replace(tzinfo=utc)
+        with self.feature("organizations:discover-basic"):
+            # Don't quantize short time periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"statsPeriod": "1h", "query": "", "field": ["id", "timestamp"]},
+            )
+            # Don't quantize absolute date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_format(before_now(days=20)),
+                    "end": iso_format(before_now(days=15)),
+                    "query": "",
+                    "field": ["id", "timestamp"],
+                },
+            )
+
+            assert len(mock_quantize.mock_calls) == 0
+
+            # Quantize long date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["id", "timestamp"], "statsPeriod": "90d", "query": ""},
+            )
+
+            assert len(mock_quantize.mock_calls) == 2
+
 
 class OrganizationEventsRelatedIssuesEndpoint(APITestCase, SnubaTestCase):
     def setUp(self):
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index 9bdef9f33d..94a137cdcf 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -4,6 +4,7 @@ import mock
 import six
 import uuid
 
+from pytz import utc
 from datetime import timedelta
 
 from django.core.urlresolvers import reverse
@@ -607,6 +608,40 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
                 )
         assert response.status_code == 400
 
+    @mock.patch("sentry.utils.snuba.quantize_time")
+    def test_quantize_dates(self, mock_quantize):
+        mock_quantize.return_value = before_now(days=1).replace(tzinfo=utc)
+        with self.feature("organizations:discover-basic"):
+            # Don't quantize short time periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"statsPeriod": "1h", "query": "", "interval": "30m", "yAxis": "count()"},
+            )
+            # Don't quantize absolute date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_format(before_now(days=20)),
+                    "end": iso_format(before_now(days=15)),
+                    "query": "",
+                    "interval": "30m",
+                    "yAxis": "count()",
+                },
+            )
+
+            assert len(mock_quantize.mock_calls) == 0
+
+            # Quantize long date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"statsPeriod": "90d", "query": "", "interval": "30m", "yAxis": "count()"},
+            )
+
+            assert len(mock_quantize.mock_calls) == 2
+
 
 class OrganizationEventsStatsTopNEvents(APITestCase, SnubaTestCase):
     def setUp(self):
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index dca623775a..b0b9e769b3 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -3,6 +3,9 @@ from __future__ import absolute_import
 import six
 import pytest
 import random
+import mock
+
+from pytz import utc
 from datetime import timedelta
 from math import ceil
 
@@ -2435,3 +2438,38 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         for idx, datum in enumerate(data):
             assert datum["histogram_transaction_duration_10"] == expected[idx][0]
             assert datum["count"] == expected[idx][1]
+
+    @mock.patch("sentry.utils.snuba.quantize_time")
+    def test_quantize_dates(self, mock_quantize):
+        self.login_as(user=self.user)
+        self.create_project()
+        mock_quantize.return_value = before_now(days=1).replace(tzinfo=utc)
+        with self.feature("organizations:discover-basic"):
+            # Don't quantize short time periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"statsPeriod": "1h", "query": "", "field": ["id", "timestamp"]},
+            )
+            # Don't quantize absolute date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "start": iso_format(before_now(days=20)),
+                    "end": iso_format(before_now(days=15)),
+                    "query": "",
+                    "field": ["id", "timestamp"],
+                },
+            )
+
+            assert len(mock_quantize.mock_calls) == 0
+
+            # Quantize long date periods
+            self.client.get(
+                self.url,
+                format="json",
+                data={"field": ["id", "timestamp"], "statsPeriod": "90d", "query": ""},
+            )
+
+            assert len(mock_quantize.mock_calls) == 2
