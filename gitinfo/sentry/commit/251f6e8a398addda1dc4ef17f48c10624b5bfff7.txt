commit 251f6e8a398addda1dc4ef17f48c10624b5bfff7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 6 16:29:26 2016 -0800

    Remove link flow (covered by auth)

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index cb4386fd0e..b75a768521 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -57,8 +57,6 @@ class AuthHelper(object):
     FLOW_LOGIN = 1
     # configuring the provider
     FLOW_SETUP_PROVIDER = 2
-    # linking an identity to an existing account
-    FLOW_LINK_IDENTITY = 3
 
     @classmethod
     def get_for_request(cls, request):
@@ -103,7 +101,7 @@ class AuthHelper(object):
             raise NotImplementedError
 
         self.provider = provider
-        if flow in (self.FLOW_LOGIN, self.FLOW_LINK_IDENTITY):
+        if flow == self.FLOW_LOGIN:
             self.pipeline = provider.get_auth_pipeline()
         elif flow == self.FLOW_SETUP_PROVIDER:
             self.pipeline = provider.get_setup_pipeline()
@@ -121,6 +119,8 @@ class AuthHelper(object):
         session = self.request.session.get('auth', {})
         if not session:
             return False
+        if session.get('flow') not in (self.FLOW_LOGIN, self.FLOW_SETUP_PROVIDER):
+            return False
         return session.get('sig') == self.signature
 
     def init_pipeline(self):
@@ -176,9 +176,6 @@ class AuthHelper(object):
             response = self._finish_login_pipeline(identity)
         elif session['flow'] == self.FLOW_SETUP_PROVIDER:
             response = self._finish_setup_pipeline(identity)
-        elif session['flow'] == self.FLOW_LINK_IDENTITY:
-            # create identity and authenticate the user
-            response = self._finish_link_pipeline(identity)
 
         return response
 
@@ -350,7 +347,6 @@ class AuthHelper(object):
         """
         request = self.request
         op = request.POST.get('op')
-
         if not request.user.is_authenticated():
             try:
                 existing_user = find_users(identity['email'])[0]
@@ -516,40 +512,6 @@ class AuthHelper(object):
         ])
         return HttpResponseRedirect(next_uri)
 
-    @transaction.atomic
-    def _finish_link_pipeline(self, identity):
-        """
-        The link flow shows the user a confirmation of the link that is about
-        to be created, and upon confirmation associates the identity.
-        """
-        request = self.request
-        if not request.user.is_authenticated():
-            return self.error(ERR_NOT_AUTHED)
-
-        if request.user.id != request.session['auth']['uid']:
-            return self.error(ERR_UID_MISMATCH)
-
-        if request.POST.get('op') == 'confirm':
-            self._handle_attach_identity(identity)
-        elif request.POST.get('op') == 'newuser':
-            auth_identity = self._handle_new_user(identity)
-
-            user = auth_identity.user
-            user.backend = settings.AUTHENTICATION_BACKENDS[0]
-
-            login(self.request, user)
-        else:
-            return self.respond('sentry/auth-confirm-link.html', {
-                'identity': identity,
-            })
-
-        self.clear_session()
-
-        next_uri = reverse('sentry-organization-home', args=[
-            self.organization.slug,
-        ])
-        return HttpResponseRedirect(next_uri)
-
     def respond(self, template, context=None, status=200):
         default_context = {
             'organization': self.organization,
@@ -569,9 +531,6 @@ class AuthHelper(object):
         elif session['flow'] == self.FLOW_SETUP_PROVIDER:
             redirect_uri = reverse('sentry-organization-auth-settings', args=[self.organization.slug])
 
-        elif session['flow'] == self.FLOW_LINK_IDENTITY:
-            redirect_uri = reverse('sentry-auth-organization', args=[self.organization.slug])
-
         messages.add_message(
             self.request, messages.ERROR,
             u'Authentication error: {}'.format(message),
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 373161e5df..34d4d5f15c 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -164,7 +164,7 @@ class OrganizationMember(Model):
         context = {
             'email': self.email,
             'organization_name': self.organization.name,
-            'url': absolute_uri(reverse('sentry-auth-link-identity', kwargs={
+            'url': absolute_uri(reverse('sentry-auth-organization', kwargs={
                 'organization_slug': self.organization.slug,
             })),
         }
diff --git a/src/sentry/web/frontend/auth_link_identity.py b/src/sentry/web/frontend/auth_link_identity.py
deleted file mode 100644
index 9ed0c81d4c..0000000000
--- a/src/sentry/web/frontend/auth_link_identity.py
+++ /dev/null
@@ -1,121 +0,0 @@
-from __future__ import absolute_import, print_function
-
-import logging
-
-from django.contrib import messages
-from django.contrib.auth import login
-from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.auth.helper import AuthHelper
-from sentry.models import AuthProvider, Organization, OrganizationMember
-from sentry.web.forms.accounts import AuthenticationForm
-from sentry.web.frontend.base import BaseView
-
-ERR_LINK_INVALID = _('Either you are not a member of the given organization or it does not exist.')
-
-auth_logger = logging.getLogger('sentry.auth')
-
-
-class AuthLinkIdentityView(BaseView):
-    auth_required = False
-
-    def get_login_form(self, request):
-        return AuthenticationForm(
-            request, request.POST or None,
-            captcha=bool(request.session.get('needs_captcha')),
-        )
-
-    def handle(self, request, organization_slug):
-        try:
-            organization = Organization.objects.get(
-                slug=organization_slug
-            )
-        except Organization.DoesNotExist:
-            auth_logger.debug('Organization not found: %s', organization_slug)
-            messages.add_message(
-                request, messages.ERROR,
-                ERR_LINK_INVALID,
-            )
-            return self.redirect(reverse('sentry'))
-
-        try:
-            auth_provider = AuthProvider.objects.get(
-                organization=organization
-            )
-        except AuthProvider.DoesNotExist:
-            auth_logger.debug('Organization has no auth provider configured: %s',
-                              organization.slug)
-            messages.add_message(
-                request, messages.ERROR,
-                ERR_LINK_INVALID,
-            )
-            return self.redirect(reverse('sentry-organization-home',
-                                         args=[organization.slug]))
-        request.session.set_test_cookie()
-
-        if request.user.is_authenticated():
-            return self.handle_authed(request, organization, auth_provider)
-        return self.handle_anon(request, organization, auth_provider)
-
-    def handle_anon(self, request, organization, auth_provider):
-        """
-        Allow the user to authenticate and then link there account.
-
-        This functions differently than the standard login flow as we *always*
-        allow them to try a username/password, whereas the default flow would
-        force the standard organization login.
-        """
-        form = self.get_login_form(request)
-
-        if form.is_valid():
-            login(request, form.get_user())
-
-            request.session.pop('needs_captcha', None)
-
-            return self.redirect(request.path)
-
-        elif request.POST and not request.session.get('needs_captcha'):
-            request.session['needs_captcha'] = 1
-            form = self.get_login_form(request)
-            form.errors.pop('captcha', None)
-
-        context = {
-            'form': form,
-            'organization': organization,
-        }
-        return self.respond('sentry/auth-link-login.html', context)
-
-    def handle_authed(self, request, organization, auth_provider):
-        om = OrganizationMember.objects.filter(
-            organization=organization,
-            user=request.user,
-        )
-        if not om.exists():
-            auth_logger.debug('User does is not a member of organization: %s',
-                              organization.slug)
-            messages.add_message(
-                request, messages.ERROR,
-                ERR_LINK_INVALID,
-            )
-            return self.redirect(reverse('sentry'))
-
-        if request.method == 'POST':
-            helper = AuthHelper(
-                request=request,
-                organization=organization,
-                auth_provider=auth_provider,
-                flow=AuthHelper.FLOW_LINK_IDENTITY,
-            )
-            helper.init_pipeline()
-            return helper.next_step()
-
-        provider = auth_provider.get_provider()
-
-        context = {
-            'organization': organization,
-            'provider_key': provider.key,
-            'provider_name': provider.name,
-        }
-
-        return self.respond('sentry/auth-link-identity.html', context)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 1e3d631581..6d10409223 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -92,12 +92,6 @@ class AuthOrganizationLoginView(BaseView):
         return self.respond('sentry/organization-login.html', context)
 
     def handle_sso(self, request, organization, auth_provider):
-        # if they're authenticated we want them to go through the standard
-        # link flow
-        if request.user.is_authenticated():
-            return self.redirect(reverse('sentry-auth-link-identity',
-                                         args=[organization.slug]))
-
         if request.method == 'POST':
             helper = AuthHelper(
                 request=request,
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 2a655e1992..fe80ecc61d 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -296,7 +296,7 @@ class OrganizationView(BaseView):
                 request, messages.ERROR,
                 ERR_MISSING_SSO_LINK,
             )
-            redirect_uri = reverse('sentry-auth-link-identity',
+            redirect_uri = reverse('sentry-auth-organization',
                                    args=[organization.slug])
         else:
             redirect_uri = self.get_no_permission_url(request, *args, **kwargs)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 28cea1b435..3cf12aa109 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -19,7 +19,6 @@ from sentry.web.frontend import accounts, admin, generic
 
 from sentry.web.frontend.admin_queue import AdminQueueView
 from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInviteView
-from sentry.web.frontend.auth_link_identity import AuthLinkIdentityView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.auth_logout import AuthLogoutView
 from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
@@ -141,7 +140,7 @@ urlpatterns += patterns(
         name='sentry-error-page-embed'),
 
     # Auth
-    url(r'^auth/link/(?P<organization_slug>[^/]+)/$', AuthLinkIdentityView.as_view(),
+    url(r'^auth/link/(?P<organization_slug>[^/]+)/$', AuthOrganizationLoginView.as_view(),
         name='sentry-auth-link-identity'),
     url(r'^auth/login/$', AuthLoginView.as_view(),
         name='sentry-login'),
diff --git a/tests/sentry/web/frontend/test_auth_link_identity.py b/tests/sentry/web/frontend/test_auth_link_identity.py
deleted file mode 100644
index e2740934a3..0000000000
--- a/tests/sentry/web/frontend/test_auth_link_identity.py
+++ /dev/null
@@ -1,96 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
-from sentry.testutils import AuthProviderTestCase
-
-
-# TODO(dcramer): this is an integration test
-class OrganizationAuthSettingsTest(AuthProviderTestCase):
-    def test_redirects_with_no_provider(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        path = reverse('sentry-auth-link-identity', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 302
-
-    def test_renders_login_form_as_anon(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-
-        path = reverse('sentry-auth-link-identity', args=[organization.slug])
-
-        resp = self.client.get(path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/auth-link-login.html')
-
-        assert resp.context['form']
-
-    def test_flow_as_anonymous(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-
-        path = reverse('sentry-auth-link-identity', args=[organization.slug])
-
-        resp = self.client.post(path, {
-            'username': self.user.username,
-            'password': 'admin',
-        }, follow=True)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/auth-link-identity.html')
-
-    def test_flow_as_existing_user(self):
-        organization = self.create_organization(name='foo', owner=self.user)
-        auth_provider = AuthProvider.objects.create(
-            organization=organization,
-            provider='dummy',
-        )
-        user = self.create_user('bar@example.com')
-        member = self.create_member(organization=organization, user=user)
-
-        path = reverse('sentry-auth-link-identity', args=[organization.slug])
-
-        self.login_as(user)
-
-        resp = self.client.post(path)
-
-        assert resp.status_code == 200
-        assert self.provider.TEMPLATE in resp.content
-
-        path = reverse('sentry-auth-sso')
-
-        resp = self.client.post(path, {'email': 'bar@example.com'})
-
-        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
-        assert resp.status_code == 200
-
-        resp = self.client.post(path, {'op': 'confirm'})
-
-        assert resp.status_code == 302
-
-        auth_identity = AuthIdentity.objects.get(
-            auth_provider=auth_provider,
-        )
-
-        assert auth_identity.user == user
-
-        member = OrganizationMember.objects.get(
-            organization=organization,
-            user=user,
-        )
-
-        assert getattr(member.flags, 'sso:linked')
-        assert not getattr(member.flags, 'sso:invalid')
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index efe79a4400..363fcf6927 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -66,9 +66,9 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
 
-    def test_flow_as_existing_user(self):
+    def test_flow_as_existing_user_with_new_account(self):
         organization = self.create_organization(name='foo', owner=self.user)
-        AuthProvider.objects.create(
+        auth_provider = AuthProvider.objects.create(
             organization=organization,
             provider='dummy',
         )
@@ -80,8 +80,34 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         resp = self.client.post(path)
 
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'foo@example.com'})
+
+        self.assertTemplateUsed(resp, 'sentry/auth-confirm-link.html')
+        assert resp.status_code == 200
+
+        resp = self.client.post(path, {'op': 'confirm'})
+
         assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver/auth/link/foo/'
+        assert resp['Location'] == 'http://testserver/'
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        assert user == auth_identity.user
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
 
     def test_flow_as_existing_identity(self):
         organization = self.create_organization(name='foo', owner=self.user)
