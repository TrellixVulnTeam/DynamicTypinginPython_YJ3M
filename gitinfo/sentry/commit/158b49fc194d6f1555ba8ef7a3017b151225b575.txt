commit 158b49fc194d6f1555ba8ef7a3017b151225b575
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 21 09:47:25 2019 -0800

    feat(ui): Add util fn `removeAtArrayIndex` (#15717)
    
    This removes an item at an array index without mutating the array.

diff --git a/src/sentry/static/sentry/app/utils/removeAtArrayIndex.tsx b/src/sentry/static/sentry/app/utils/removeAtArrayIndex.tsx
new file mode 100644
index 0000000000..e8a02c05ad
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/removeAtArrayIndex.tsx
@@ -0,0 +1,8 @@
+/**
+ * Remove item at `index` in `array` without mutating `array`
+ */
+export function removeAtArrayIndex<T>(array: T[], index: number): T[] {
+  const newArray = [...array];
+  newArray.splice(index, 1);
+  return newArray;
+}
diff --git a/tests/js/spec/utils/removeAtArrayIndex.spec.jsx b/tests/js/spec/utils/removeAtArrayIndex.spec.jsx
new file mode 100644
index 0000000000..ef1b74d443
--- /dev/null
+++ b/tests/js/spec/utils/removeAtArrayIndex.spec.jsx
@@ -0,0 +1,23 @@
+import {removeAtArrayIndex} from 'app/utils/removeAtArrayIndex';
+
+describe('utils/removeAtArrayIndex', function() {
+  it('removes simple value at index', function() {
+    const arr = [1, 2, 3];
+
+    expect(removeAtArrayIndex(arr, 1)).toEqual([1, 3]);
+  });
+
+  it('does not mutate array', function() {
+    const arr = [1, 2, 3];
+    expect(removeAtArrayIndex(arr, 0)).toEqual([2, 3]);
+    expect(arr).toEqual([1, 2, 3]);
+  });
+
+  it('removes at boundaries of array', function() {
+    const arr = [1, 2, 3];
+    expect(removeAtArrayIndex(arr, 0)).toEqual([2, 3]);
+
+    const arr2 = [1, 2, 3];
+    expect(removeAtArrayIndex(arr2, 2)).toEqual([1, 2]);
+  });
+});
