commit 34f2e5fb64fa0840671a968efa3e1926d1c97528
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Jun 30 14:03:07 2020 +0200

    feat(pii): Enable advanced data scrubbing by default (#19630)
    
    See also https://github.com/getsentry/sentry-docs/pull/1786

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b7087813cf..b3f9177477 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -872,7 +872,7 @@ SENTRY_FEATURES = {
     # customized with SENTRY_ORG_SUBDOMAIN_TEMPLATE)
     "organizations:org-subdomains": False,
     # Enable access to more advanced (alpha) datascrubbing settings.
-    "organizations:datascrubbers-v2": False,
+    "organizations:datascrubbers-v2": True,
     # Enable the new version of interface/breadcrumbs
     "organizations:breadcrumbs-v2": False,
     # Enable Relay config feature
diff --git a/tests/acceptance/test_organization_security_privacy.py b/tests/acceptance/test_organization_security_privacy.py
index f96fbe6e02..a96b08d91e 100644
--- a/tests/acceptance/test_organization_security_privacy.py
+++ b/tests/acceptance/test_organization_security_privacy.py
@@ -16,46 +16,43 @@ class OrganizationSecurityAndPrivacyTest(AcceptanceTestCase):
         return self.browser.element_exists("#require2FA")
 
     def test_renders_2fa_setting_for_owner(self):
-        with self.feature("organizations:datascrubbers-v2"):
-            user_owner = self.create_user("owner@example.com")
-            organization = self.create_organization(name="Example", owner=user_owner)
-            self.login_as(user_owner)
-            path = "/settings/{}/security-and-privacy/".format(organization.slug)
+        user_owner = self.create_user("owner@example.com")
+        organization = self.create_organization(name="Example", owner=user_owner)
+        self.login_as(user_owner)
+        path = "/settings/{}/security-and-privacy/".format(organization.slug)
 
-            self.browser.get(path)
-            self.load_organization_helper()
-            assert self.renders_2fa_setting()
+        self.browser.get(path)
+        self.load_organization_helper()
+        assert self.renders_2fa_setting()
 
     def test_renders_2fa_setting_for_manager(self):
-        with self.feature("organizations:datascrubbers-v2"):
-            user_manager = self.create_user("manager@gexample.com")
-            organization = self.create_organization(
-                name="Example", owner=self.create_user("owner@example.com")
-            )
-            self.create_member(organization=organization, user=user_manager, role="manager")
-            self.login_as(user_manager)
-            path = "/settings/{}/security-and-privacy/".format(organization.slug)
-
-            self.browser.get(path)
-            self.load_organization_helper()
-            assert self.renders_2fa_setting()
+        user_manager = self.create_user("manager@gexample.com")
+        organization = self.create_organization(
+            name="Example", owner=self.create_user("owner@example.com")
+        )
+        self.create_member(organization=organization, user=user_manager, role="manager")
+        self.login_as(user_manager)
+        path = "/settings/{}/security-and-privacy/".format(organization.slug)
+
+        self.browser.get(path)
+        self.load_organization_helper()
+        assert self.renders_2fa_setting()
 
     def test_setting_2fa_without_2fa_enabled(self):
-        with self.feature("organizations:datascrubbers-v2"):
-            user_owner = self.create_user("owner@example.com")
-            organization = self.create_organization(name="Example", owner=user_owner)
-            self.login_as(user_owner)
-            path = "/settings/{}/security-and-privacy/".format(organization.slug)
-
-            self.browser.get(path)
-            self.browser.wait_until_not(".loading-indicator")
-            assert not self.browser.element_exists(
-                '[data-test-id="organization-settings-security-and-privacy"] .error'
-            )
-            self.browser.click("#require2FA")
-
-            self.browser.wait_until(".modal")
-            self.browser.click('.modal [data-test-id="confirm-button"]')
-            self.browser.wait_until_not(".modal")
-            self.browser.wait_until_test_id("toast-error")
-            self.load_organization_helper("setting 2fa without 2fa enabled")
+        user_owner = self.create_user("owner@example.com")
+        organization = self.create_organization(name="Example", owner=user_owner)
+        self.login_as(user_owner)
+        path = "/settings/{}/security-and-privacy/".format(organization.slug)
+
+        self.browser.get(path)
+        self.browser.wait_until_not(".loading-indicator")
+        assert not self.browser.element_exists(
+            '[data-test-id="organization-settings-security-and-privacy"] .error'
+        )
+        self.browser.click("#require2FA")
+
+        self.browser.wait_until(".modal")
+        self.browser.click('.modal [data-test-id="confirm-button"]')
+        self.browser.wait_until_not(".modal")
+        self.browser.wait_until_test_id("toast-error")
+        self.load_organization_helper("setting 2fa without 2fa enabled")
diff --git a/tests/acceptance/test_organization_settings.py b/tests/acceptance/test_organization_settings.py
deleted file mode 100644
index 9d36bd4bf9..0000000000
--- a/tests/acceptance/test_organization_settings.py
+++ /dev/null
@@ -1,64 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.testutils import AcceptanceTestCase
-
-
-class OrganizationSettingsTest(AcceptanceTestCase):
-    def setUp(self):
-        super(OrganizationSettingsTest, self).setUp()
-        self.user = self.create_user("foo@example.com")
-        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
-        self.team = self.create_team(organization=self.org, name="Mariachi Band")
-        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
-        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
-        self.login_as(self.user)
-        self.path = u"/organizations/{}/settings/".format(self.org.slug)
-
-    def load_organization_helper(self, snapshot_name=None):
-        self.browser.wait_until_not(".loading-indicator")
-        if snapshot_name is not None:
-            self.browser.snapshot("organization settings -- " + snapshot_name)
-        assert self.browser.element_exists('[data-test-id="organization-settings"]')
-
-    def renders_2fa_setting(self):
-        return self.browser.element_exists("#require2FA")
-
-    def test_renders_2fa_setting_for_owner(self):
-        user_owner = self.create_user("owner@example.com")
-        organization = self.create_organization(name="Example", owner=user_owner)
-        self.login_as(user_owner)
-        path = "/organizations/%s/settings/" % organization.slug
-
-        self.browser.get(path)
-        self.load_organization_helper()
-        assert self.renders_2fa_setting()
-
-    def test_renders_2fa_setting_for_manager(self):
-        user_manager = self.create_user("manager@gexample.com")
-        organization = self.create_organization(
-            name="Example", owner=self.create_user("owner@example.com")
-        )
-        self.create_member(organization=organization, user=user_manager, role="manager")
-        self.login_as(user_manager)
-        path = "/organizations/%s/settings/" % organization.slug
-
-        self.browser.get(path)
-        self.load_organization_helper()
-        assert self.renders_2fa_setting()
-
-    def test_setting_2fa_without_2fa_enabled(self):
-        user_owner = self.create_user("owner@example.com")
-        organization = self.create_organization(name="Example", owner=user_owner)
-        self.login_as(user_owner)
-        path = "/organizations/%s/settings/" % organization.slug
-
-        self.browser.get(path)
-        self.browser.wait_until_not(".loading-indicator")
-        assert not self.browser.element_exists('[data-test-id="organization-settings"] .error')
-        self.browser.click("#require2FA")
-
-        self.browser.wait_until(".modal")
-        self.browser.click('.modal [data-test-id="confirm-button"]')
-        self.browser.wait_until_not(".modal")
-        self.browser.wait_until_test_id("toast-error")
-        self.load_organization_helper("setting 2fa without 2fa enabled")
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 1813f0983b..c3cd5e3bf1 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -665,23 +665,12 @@ class OrganizationUpdateTest(APITestCase):
         org = self.create_organization(owner=self.user)
         url = reverse("sentry-api-0-organization-details", kwargs={"organization_slug": org.slug})
         self.login_as(user=self.user)
-        with self.feature("organizations:datascrubbers-v2"):
-            value = '{"applications": {"freeform": []}}'
-            resp = self.client.put(url, data={"relayPiiConfig": value})
-            assert resp.status_code == 200, resp.content
-            assert org.get_option("sentry:relay_pii_config") == value
-            assert resp.data["relayPiiConfig"] == value
-
-    def test_relay_pii_config_forbidden(self):
-        org = self.create_organization(owner=self.user)
-        url = reverse("sentry-api-0-organization-details", kwargs={"organization_slug": org.slug})
-        self.login_as(user=self.user)
 
         value = '{"applications": {"freeform": []}}'
         resp = self.client.put(url, data={"relayPiiConfig": value})
-        assert resp.status_code == 400
-        assert b"feature" in resp.content
-        assert org.get_option("sentry:relay_pii_config") is None
+        assert resp.status_code == 200, resp.content
+        assert org.get_option("sentry:relay_pii_config") == value
+        assert resp.data["relayPiiConfig"] == value
 
 
 class OrganizationDeleteTest(APITestCase):
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 69f7b40174..e46b3563d2 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -450,19 +450,11 @@ class ProjectUpdateTest(APITestCase):
         assert resp.data["storeCrashReports"] == 10
 
     def test_relay_pii_config(self):
-        with self.feature("organizations:datascrubbers-v2"):
-            value = '{"applications": {"freeform": []}}'
-            resp = self.client.put(self.path, data={"relayPiiConfig": value})
-            assert resp.status_code == 200, resp.content
-            assert self.project.get_option("sentry:relay_pii_config") == value
-            assert resp.data["relayPiiConfig"] == value
-
-    def test_relay_pii_config_forbidden(self):
         value = '{"applications": {"freeform": []}}'
         resp = self.client.put(self.path, data={"relayPiiConfig": value})
-        assert resp.status_code == 400
-        assert b"feature" in resp.content
-        assert self.project.get_option("sentry:relay_pii_config") is None
+        assert resp.status_code == 200, resp.content
+        assert self.project.get_option("sentry:relay_pii_config") == value
+        assert resp.data["relayPiiConfig"] == value
 
     def test_sensitive_fields(self):
         resp = self.client.put(
diff --git a/tests/sentry/api/serializers/test_organization.py b/tests/sentry/api/serializers/test_organization.py
index a5d8b3f81a..2368472f47 100644
--- a/tests/sentry/api/serializers/test_organization.py
+++ b/tests/sentry/api/serializers/test_organization.py
@@ -37,6 +37,7 @@ class OrganizationSerializerTest(TestCase):
                 "releases-v2",
                 "discover-basic",
                 "discover-query",
+                "datascrubbers-v2",
             ]
         )
 
