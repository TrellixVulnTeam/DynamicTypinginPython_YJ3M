commit 4705bc43d53aa981566f45f68ac3add6b55c201d
Author: William Mak <william@wmak.io>
Date:   Wed Apr 1 11:00:31 2020 -0400

    chore(visibility) - Moving get_rollup to a util function
    
    - Originally wanted to move `MAX_POINTS` to a single spot, and still did
      that, but noticed that get_rollup is shared here between two
      endpoints. Moved it to a util to reduce code repeat.

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 277002baf5..ce43daa408 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -1,7 +1,6 @@
 from __future__ import absolute_import
 
 import six
-from datetime import timedelta
 from rest_framework.exceptions import PermissionDenied
 from rest_framework.exceptions import ParseError
 
@@ -20,13 +19,7 @@ from sentry.models.project import Project
 from sentry.models.group import Group
 from sentry.snuba.discover import ReferenceEvent
 from sentry.utils.compat import map, zip
-from sentry.utils.dates import parse_stats_period
-
-
-# Maximum number of results we are willing to fetch.
-# Clients should adapt the interval width based on their
-# display width.
-MAX_POINTS = 4500
+from sentry.utils.dates import get_rollup_from_request
 
 
 class OrganizationEventsEndpointBase(OrganizationEndpoint):
@@ -150,7 +143,15 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
             columns = request.GET.getlist("yAxis", ["count()"])
             query = request.GET.get("query")
             params = self.get_filter_params(request, organization)
-            rollup = self.get_rollup(request, params)
+            rollup = get_rollup_from_request(
+                request,
+                params,
+                "1h",
+                InvalidSearchQuery(
+                    "Your interval and date range would create too many results. "
+                    "Use a larger interval, or a smaller date range."
+                ),
+            )
             # Backwards compatibility for incidents which uses the old
             # column aliases as it straddles both versions of events/discover.
             # We will need these aliases until discover2 flags are enabled for all
@@ -179,20 +180,6 @@ class OrganizationEventsV2EndpointBase(OrganizationEventsEndpointBase):
         else:
             return serializer.serialize(result)
 
-    def get_rollup(self, request, params):
-        interval = parse_stats_period(request.GET.get("interval", "1h"))
-        if interval is None:
-            interval = timedelta(hours=1)
-
-        date_range = params["end"] - params["start"]
-        if date_range.total_seconds() / interval.total_seconds() > MAX_POINTS:
-            raise InvalidSearchQuery(
-                "Your interval and date range would create too many results. "
-                "Use a larger interval, or a smaller date range."
-            )
-
-        return int(interval.total_seconds())
-
 
 class KeyTransactionBase(OrganizationEventsV2EndpointBase):
     def has_feature(self, request, organization):
diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index 5def368286..29bd750901 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -12,6 +12,7 @@ from sentry.api.serializers.snuba import SnubaTSResultSerializer
 from sentry.discover.utils import transform_aliases_and_query
 from sentry.snuba import discover
 from sentry.utils import snuba
+from sentry.utils.dates import get_rollup_from_request
 
 
 class OrganizationEventsStatsEndpoint(OrganizationEventsV2EndpointBase):
@@ -42,7 +43,15 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsV2EndpointBase):
             return Response({"data": []})
 
         snuba_args = self.get_field(request, snuba_args)
-        rollup = self.get_rollup(request, snuba_args)
+        rollup = get_rollup_from_request(
+            request,
+            snuba_args,
+            "1h",
+            InvalidSearchQuery(
+                "Your interval and date range would create too many results. "
+                "Use a larger interval, or a smaller date range."
+            ),
+        )
 
         result = transform_aliases_and_query(
             aggregations=snuba_args.get("aggregations"),
diff --git a/src/sentry/api/endpoints/project_release_stats.py b/src/sentry/api/endpoints/project_release_stats.py
index 4b55771f53..d3cc86d1df 100644
--- a/src/sentry/api/endpoints/project_release_stats.py
+++ b/src/sentry/api/endpoints/project_release_stats.py
@@ -2,14 +2,13 @@ from __future__ import absolute_import
 
 import six
 
-from datetime import timedelta
 from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.bases.project import ProjectEndpoint, ProjectReleasePermission, ProjectEventsError
 from sentry.api.serializers import serialize
-from sentry.utils.dates import parse_stats_period
+from sentry.utils.dates import get_rollup_from_request
 from sentry.snuba.sessions import (
     get_project_release_stats,
     get_crash_free_breakdown,
@@ -17,11 +16,6 @@ from sentry.snuba.sessions import (
 )
 from sentry.models import Release, ReleaseProject
 
-# Maximum number of results we are willing to fetch.
-# Clients should adapt the interval width based on their
-# display width.
-MAX_POINTS = 4500
-
 
 def upsert_missing_release(project, version):
     """This adds a release to postgres if it should exist but does not do yet."""
@@ -60,7 +54,17 @@ class ProjectReleaseStatsEndpoint(ProjectEndpoint):
 
         try:
             params = self.get_filter_params(request, project)
-            rollup = self.get_rollup(request, params)
+            rollup = get_rollup_from_request(
+                request,
+                params,
+                "24h",
+                ProjectEventsError(
+                    "Your interval and date range would create too many results. "
+                    "Use a larger interval, or a smaller date range."
+                ),
+            )
+            # The minimum interval is one hour on the server
+            rollup = max(rollup, 3600)
         except ProjectEventsError as e:
             return Response({"detail": six.text_type(e)}, status=400)
 
@@ -99,18 +103,3 @@ class ProjectReleaseStatsEndpoint(ProjectEndpoint):
             serialize({"stats": stats, "statTotals": totals, "usersBreakdown": users_breakdown}),
             status=200,
         )
-
-    def get_rollup(self, request, params):
-        interval = parse_stats_period(request.GET.get("interval", "24h"))
-        if interval is None:
-            interval = timedelta(hours=1)
-
-        date_range = params["end"] - params["start"]
-        if date_range.total_seconds() / interval.total_seconds() > MAX_POINTS:
-            raise ProjectEventsError(
-                "Your interval and date range would create too many results. "
-                "Use a larger interval, or a smaller date range."
-            )
-
-        # The minimum interval is one hour on the server
-        return max(int(interval.total_seconds()), 3600)
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 283df62bbb..ecd9285254 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -81,6 +81,11 @@ ENVIRONMENT_NAME_MAX_LENGTH = 64
 
 SENTRY_APP_SLUG_MAX_LENGTH = 64
 
+# Maximum number of results we are willing to fetch when calculating rollup
+# Clients should adapt the interval width based on their display width.
+MAX_ROLLUP_POINTS = 4500
+
+
 # Team slugs which may not be used. Generally these are top level URL patterns
 # which we don't want to worry about conflicts on.
 RESERVED_ORGANIZATION_SLUGS = frozenset(
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index b0fac21ce1..537bd7095c 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -7,6 +7,7 @@ from datetime import datetime, timedelta
 
 import pytz
 from dateutil.parser import parse
+from sentry.constants import MAX_ROLLUP_POINTS
 from django.db import connections
 
 DATE_TRUNC_GROUPERS = {"date": "day", "hour": "hour", "minute": "minute"}
@@ -101,3 +102,15 @@ def parse_stats_period(period):
     return timedelta(
         **{{"h": "hours", "d": "days", "m": "minutes", "s": "seconds", "w": "weeks"}[unit]: value}
     )
+
+
+def get_rollup_from_request(request, params, default_interval, error):
+    interval = parse_stats_period(request.GET.get("interval", default_interval))
+    if interval is None:
+        interval = timedelta(hours=1)
+
+    date_range = params["end"] - params["start"]
+    if date_range.total_seconds() / interval.total_seconds() > MAX_ROLLUP_POINTS:
+        raise error
+
+    return int(interval.total_seconds())
