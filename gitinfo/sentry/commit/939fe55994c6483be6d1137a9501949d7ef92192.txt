commit 939fe55994c6483be6d1137a9501949d7ef92192
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Mon Nov 11 19:52:50 2019 -0500

    chore(discover2): Polish landing page for Discover 2 (#15539)

diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.tsx b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
index dac3d453a2..ad6c00a86c 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.tsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
@@ -57,42 +57,42 @@ type RenderProps = {
 };
 
 type Props = {
-  onOpen: Function;
-  onClose: Function;
+  onOpen?: Function;
+  onClose?: Function;
   /**
    * Callback for when we get a click outside of dropdown menus.
    * Useful for when menu is controlled.
    */
-  onClickOutside: Function;
+  onClickOutside?: Function;
 
   /**
    * Callback function to check if we should ignore click outside to
    * hide dropdown menu
    */
-  shouldIgnoreClickOutside: (event: React.MouseEvent<HTMLElement>) => boolean;
+  shouldIgnoreClickOutside?: (event: React.MouseEvent<HTMLElement>) => boolean;
 
   /**
    * If this is set, then this will become a "controlled" component.
    * It will no longer set local state and dropdown visiblity will
    * only follow `isOpen`.
    */
-  isOpen: boolean;
+  isOpen?: boolean;
 
   /** Keeps dropdown menu open when menu is clicked */
-  keepMenuOpen: boolean;
+  keepMenuOpen?: boolean;
 
   // Compatibility for <DropdownLink>
   // This will change where we attach event handlers
-  alwaysRenderMenu: boolean;
+  alwaysRenderMenu?: boolean;
 
   // closes menu on "Esc" keypress
-  closeOnEscape: boolean;
+  closeOnEscape?: boolean;
 
   /**
    * If this is set to true, the dropdown behaves as a "nested dropdown" and is
    * triggered on mouse enter and mouse leave
    */
-  isNestedDropdown: boolean;
+  isNestedDropdown?: boolean;
 
   /**
    * Render function
diff --git a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx b/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
deleted file mode 100644
index 4b156005bb..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
+++ /dev/null
@@ -1,274 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import {browserHistory} from 'react-router';
-
-import {Client} from 'app/api';
-import AutoComplete from 'app/components/autoComplete';
-import {fetchSavedQueries} from 'app/actionCreators/discoverSavedQueries';
-import Highlight from 'app/components/highlight';
-import InlineSvg from 'app/components/inlineSvg';
-import {t} from 'app/locale';
-import {Organization} from 'app/types';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
-import EventView from 'app/views/eventsV2/eventView';
-
-import {domId} from 'app/utils/domId';
-import space from 'app/styles/space';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import withApi from 'app/utils/withApi';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
-
-import SidebarItem from './sidebarItem';
-
-type Props = {
-  api: Client;
-  organization: Organization;
-  savedQueries: SavedQuery[];
-  savedQueriesLoading: boolean;
-};
-
-type State = {
-  isOpen: boolean;
-  search: string;
-};
-
-class Discover2Item extends React.Component<Props, State> {
-  state = {
-    search: '',
-    isOpen: false,
-  };
-
-  componentDidMount() {
-    const {api, organization} = this.props;
-    fetchSavedQueries(api, organization.slug);
-    this.menuId = domId('discover-menu');
-  }
-
-  componentWillUnmount() {
-    this.timerHandleLeaveClear();
-  }
-
-  private menuId: string = '';
-  private timerHandleLeave?: ReturnType<typeof setTimeout>;
-  private timerHandleLeaveClear = () => {
-    if (this.timerHandleLeave) {
-      clearTimeout(this.timerHandleLeave);
-      this.timerHandleLeave = undefined;
-    }
-  };
-
-  handleEnter = () => {
-    this.timerHandleLeaveClear();
-    this.setState({isOpen: true});
-  };
-
-  handleLeave = () => {
-    // HACK(leedongwei)
-    // See https://bjk5.com/post/44698559168/breaking-down-amazons-mega-dropdown
-    //
-    // @doralchan confirmed that the slideout menu will eventually be removed.
-    // This is stop-gap solution to make the slideout better till a new design
-    // can be implemented
-    this.timerHandleLeaveClear();
-    this.timerHandleLeave = setTimeout(() => {
-      this.setState({isOpen: false});
-      this.timerHandleLeave = undefined;
-    }, 400); // 300ms feels too fast, 500ms feels too slow.
-  };
-
-  handleSelect = (item: SavedQuery) => {
-    const {organization} = this.props;
-    const target = {
-      pathname: `/organizations/${organization.slug}/eventsv2/`,
-      query: EventView.fromSavedQuery(item).generateQueryStringObject(),
-    };
-    browserHistory.push(target);
-  };
-
-  renderSavedQueries({inputValue, getItemProps, highlightedIndex}) {
-    const {savedQueries} = this.props;
-    if (!savedQueries || savedQueries.length === 0) {
-      return (
-        <MenuItem role="menuitem" disabled>
-          No saved queries
-        </MenuItem>
-      );
-    }
-    const lowerInputValue = inputValue.toLowerCase();
-    return savedQueries
-      .filter(item => {
-        return lowerInputValue.length
-          ? item.name.toLowerCase().indexOf(lowerInputValue) > -1
-          : true;
-      })
-      .map((item, index) => {
-        return (
-          <MenuItem
-            {...getItemProps({item, index})}
-            active={highlightedIndex === index}
-            role="menuitem"
-            key={item.id}
-          >
-            <QueryName>
-              <Highlight text={inputValue}>{item.name}</Highlight>
-            </QueryName>
-          </MenuItem>
-        );
-      });
-  }
-
-  render() {
-    const {organization, savedQueries: _, ...sidebarItemProps} = this.props;
-    const {isOpen} = this.state;
-    const navProps = {
-      'aria-label': t('Discover Saved Queries'),
-      'aria-haspopup': true,
-      'aria-controls': this.menuId,
-      role: 'menubutton',
-      onMouseLeave: this.handleLeave,
-      onMouseEnter: this.handleEnter,
-    };
-    if (isOpen) {
-      navProps['aria-expanded'] = 'true';
-    }
-
-    const sidebarItem = <SidebarItem {...sidebarItemProps} />;
-    const inputId = `${this.menuId}-input`;
-
-    return (
-      <nav {...navProps}>
-        {sidebarItem}
-        {isOpen && (
-          <AutoComplete
-            inputIsActor={false}
-            itemToString={(item: SavedQuery) => item.name}
-            onSelect={this.handleSelect}
-            isOpen
-            closeOnSelect
-            resetInputOnClose
-          >
-            {({getInputProps, getItemProps, inputValue, highlightedIndex}) => {
-              return (
-                <Hitbox role="menu" id={this.menuId} isOpen={isOpen}>
-                  <InputContainer>
-                    <StyledLabel htmlFor={inputId}>
-                      <InlineSvg src="icon-search" size="16" />
-                    </StyledLabel>
-                    <StyledInput
-                      type="text"
-                      id={inputId}
-                      placeholder={t('Filter searches')}
-                      {...getInputProps({})}
-                    />
-                  </InputContainer>
-                  <Menu>
-                    {this.renderSavedQueries({
-                      getItemProps,
-                      inputValue,
-                      highlightedIndex,
-                    })}
-                  </Menu>
-                </Hitbox>
-              );
-            }}
-          </AutoComplete>
-        )}
-      </nav>
-    );
-  }
-}
-
-export default withApi(withDiscoverSavedQueries(Discover2Item));
-
-type HitboxCustomProps = {
-  isOpen: boolean;
-};
-type HitboxProps = Omit<React.HTMLProps<HTMLDivElement>, keyof HitboxCustomProps> &
-  HitboxCustomProps;
-
-const Hitbox = styled('div')<HitboxProps>`
-  display: ${p => (p.isOpen ? 'block' : 'none')};
-  position: absolute;
-  right: -330px;
-  width: 350px;
-  padding-left: ${space(3)};
-  transform: translateY(-30px);
-  box-shadow: ${p => p.theme.dropShadowHeavy};
-`;
-
-const Menu = styled('div')`
-  height: 100%;
-  border-bottom-right-radius: ${p => p.theme.borderRadius};
-  border: 1px solid ${p => p.theme.borderDark};
-  border-top: none;
-  max-height: 245px;
-  overflow: auto;
-  background-clip: border-box;
-`;
-
-type MenuItemProps = {
-  active?: boolean;
-  disabled?: boolean;
-};
-const MenuItem = styled('span')<MenuItemProps>`
-  display: flex;
-  flex-direction: row;
-  justify-content: space-between;
-  align-items: center;
-  position: relative;
-  padding: ${space(1.5)} ${space(1)} ${space(1.5)} ${space(2)};
-  color: ${p => (p.active ? p.theme.gray3 : p.theme.gray2)};
-  background: ${p => (p.active ? p.theme.offWhiteLight : p.theme.offWhite)};
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  &:focus,
-  &:hover {
-    background: ${p => (p.disabled ? p.theme.offWhite : p.theme.offWhiteLight)};
-    color: ${p => (p.disabled ? p.theme.gray2 : p.theme.gray3)};
-    cursor: ${p => (p.disabled ? 'normal' : 'pointer')};
-  }
-`;
-
-const QueryName = styled('span')`
-  ${overflowEllipsis};
-  line-height: 1.2;
-`;
-
-const StyledLabel = styled('label')<{htmlFor: string}>`
-  margin: 0;
-  color: ${p => p.theme.gray2};
-  padding: ${space(1.5)} ${space(1)} ${space(1.5)} ${space(2)};
-`;
-
-const InputContainer = styled('div')`
-  display: flex;
-  align-items: center;
-  background: ${p => p.theme.white};
-  border-top-right-radius: ${p => p.theme.borderRadius};
-  border: 1px solid ${p => p.theme.borderDark};
-  border-bottom: 0;
-
-  /* Border triangle */
-  &::before {
-    content: '';
-    margin: auto;
-    display: block;
-    position: absolute;
-    left: 11px;
-    top: 11px;
-    width: 5px;
-    height: 10px;
-    border-style: solid;
-    border-width: 10px 10px 10px 0;
-    border-color: transparent #fff transparent transparent;
-  }
-`;
-
-const StyledInput = styled('input')`
-  color: ${p => p.theme.gray2};
-  flex-grow: 1;
-  height: 38px;
-  line-height: 38px;
-  background: none;
-  outline: none;
-  border: none;
-`;
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index e9de3508e4..84dba9d582 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -27,7 +27,6 @@ import OnboardingStatus from './onboardingStatus';
 import SidebarDropdown from './sidebarDropdown';
 import SidebarHelp from './help';
 import SidebarItem from './sidebarItem';
-import Discover2Item from './discover2Item';
 
 class Sidebar extends React.Component {
   static propTypes = {
@@ -284,9 +283,8 @@ class Sidebar extends React.Component {
                   </Feature>
 
                   <Feature features={['events-v2']} organization={organization}>
-                    <Discover2Item
+                    <SidebarItem
                       {...sidebarItemProps}
-                      organization={organization}
                       onClick={(_id, evt) =>
                         this.navigateWithGlobalSelection(
                           `/organizations/${organization.slug}/eventsv2/`,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index e62a8e352e..670ca00bda 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -32,9 +32,10 @@ import SavedQueryButtonGroup from './savedQuery';
 import EventView from './eventView';
 import EventInputName from './eventInputName';
 import {getFirstQueryString} from './utils';
-import {ALL_VIEWS, TRANSACTION_VIEWS, SAMPLE_VIEWS} from './data';
-import QueryCard from './querycard';
-import MiniGraph from './miniGraph';
+import {SAMPLE_VIEWS} from './data';
+import QueryList from './queryList';
+
+const DISPLAY_SEARCH_BAR_FLAG = false;
 
 type Props = {
   organization: Organization;
@@ -65,53 +66,6 @@ class EventsV2 extends React.Component<Props> {
     this.setState({isBannerHidden: true});
   };
 
-  renderQueryList() {
-    const {location, organization} = this.props;
-    let views = ALL_VIEWS;
-    if (organization.features.includes('transaction-events')) {
-      views = [...ALL_VIEWS, ...TRANSACTION_VIEWS];
-    }
-
-    const list = views.map((eventViewv1, index) => {
-      const eventView = EventView.fromEventViewv1(eventViewv1);
-      const to = {
-        pathname: location.pathname,
-        query: {
-          ...location.query,
-          ...eventView.generateQueryStringObject(),
-        },
-      };
-
-      return (
-        <QueryCard
-          key={index}
-          to={to}
-          title={eventView.name}
-          queryDetail={eventView.query}
-          renderGraph={() => {
-            return (
-              <MiniGraph
-                query={eventView.getEventsAPIPayload(location).query}
-                eventView={eventView}
-                organization={organization}
-              />
-            );
-          }}
-          onEventClick={() => {
-            trackAnalyticsEvent({
-              eventKey: 'discover_v2.prebuilt_query_click',
-              eventName: 'Discoverv2: Click a pre-built query',
-              organization_id: this.props.organization.id,
-              query_name: eventView.name,
-            });
-          }}
-        />
-      );
-    });
-
-    return <QueryGrid>{list}</QueryGrid>;
-  }
-
   renderBanner() {
     const bannerDismissed = localStorage.getItem('discover-banner-dismissed');
 
@@ -162,11 +116,13 @@ class EventsV2 extends React.Component<Props> {
   }
 
   renderNewQuery() {
+    const {location, organization} = this.props;
+
     return (
       <div>
         {this.renderBanner()}
-        <StyledSearchBar />
-        {this.renderQueryList()}
+        {DISPLAY_SEARCH_BAR_FLAG && <StyledSearchBar />}
+        <QueryList location={location} organization={organization} />
       </div>
     );
   }
@@ -251,24 +207,6 @@ const StyledSearchBar = styled(SearchBar)`
   margin-bottom: ${space(3)};
 `;
 
-const QueryGrid = styled('div')`
-  display: grid;
-  grid-template-columns: minmax(100px, 1fr);
-  grid-gap: ${space(3)};
-
-  @media (min-width: ${theme.breakpoints[1]}) {
-    grid-template-columns: repeat(2, minmax(100px, 1fr));
-  }
-
-  @media (min-width: ${theme.breakpoints[2]}) {
-    grid-template-columns: repeat(3, minmax(100px, 1fr));
-  }
-
-  @media (min-width: ${theme.breakpoints[4]}) {
-    grid-template-columns: repeat(5, minmax(100px, 1fr));
-  }
-`;
-
 // Wrapper is needed because BetaTag discards margins applied directly to it
 const BetaTagWrapper = styled('span')`
   margin-right: 0.4em;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
new file mode 100644
index 0000000000..7583ea34f0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/queryList.tsx
@@ -0,0 +1,264 @@
+import React from 'react';
+import {Location} from 'history';
+import styled from 'react-emotion';
+import classNames from 'classnames';
+import {browserHistory} from 'react-router';
+
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import {Organization} from 'app/types';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import theme from 'app/utils/theme';
+import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import {fetchSavedQueries} from 'app/actionCreators/discoverSavedQueries';
+import InlineSvg from 'app/components/inlineSvg';
+import DropdownMenu from 'app/components/dropdownMenu';
+import MenuItem from 'app/components/menuItem';
+
+import EventView from './eventView';
+import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
+import QueryCard from './querycard';
+import MiniGraph from './miniGraph';
+import {handleDeleteQuery, handleCreateQuery} from './savedQuery/utils';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  location: Location;
+  savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
+};
+
+class QueryList extends React.Component<Props> {
+  componentDidMount() {
+    const {api, organization} = this.props;
+    fetchSavedQueries(api, organization.slug);
+  }
+
+  handleDeleteQuery = (eventView: EventView) => (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+
+    const {api, location, organization} = this.props;
+
+    handleDeleteQuery(api, organization, eventView).then(() => {
+      browserHistory.push({
+        pathname: location.pathname,
+        query: {},
+      });
+    });
+  };
+
+  handleDuplicateQuery = (eventView: EventView) => (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+
+    const {api, location, organization} = this.props;
+
+    eventView = eventView.clone();
+    eventView.name = `${eventView.name} copy`;
+
+    handleCreateQuery(api, organization, eventView).then(() => {
+      browserHistory.push({
+        pathname: location.pathname,
+        query: {},
+      });
+    });
+  };
+
+  renderPrebuiltQueries = () => {
+    const {location, organization} = this.props;
+    let views = ALL_VIEWS;
+    if (organization.features.includes('transaction-events')) {
+      views = [...ALL_VIEWS, ...TRANSACTION_VIEWS];
+    }
+
+    const list = views.map((eventViewv1, index) => {
+      const eventView = EventView.fromEventViewv1(eventViewv1);
+      const to = {
+        pathname: location.pathname,
+        query: {
+          ...location.query,
+          ...eventView.generateQueryStringObject(),
+        },
+      };
+
+      return (
+        <QueryCard
+          key={`${index}-${eventView.name}`}
+          to={to}
+          title={eventView.name}
+          subtitle={t('Pre-Built Query')}
+          queryDetail={eventView.query}
+          renderGraph={() => {
+            return (
+              <MiniGraph
+                query={eventView.getEventsAPIPayload(location).query}
+                eventView={eventView}
+                organization={organization}
+              />
+            );
+          }}
+          onEventClick={() => {
+            trackAnalyticsEvent({
+              eventKey: 'discover_v2.prebuilt_query_click',
+              eventName: 'Discoverv2: Click a pre-built query',
+              organization_id: this.props.organization.id,
+              query_name: eventView.name,
+            });
+          }}
+        />
+      );
+    });
+
+    return list;
+  };
+
+  renderSavedQueries = () => {
+    const {savedQueries, location, organization} = this.props;
+
+    if (!savedQueries || !Array.isArray(savedQueries) || savedQueries.length === 0) {
+      return [];
+    }
+
+    return savedQueries.map((savedQuery, index) => {
+      const eventView = EventView.fromSavedQuery(savedQuery);
+      const to = {
+        pathname: location.pathname,
+        query: {
+          ...location.query,
+          ...eventView.generateQueryStringObject(),
+        },
+      };
+
+      return (
+        <QueryCard
+          key={`${index}-${eventView.id}`}
+          to={to}
+          title={eventView.name}
+          subtitle={t('Saved Query')}
+          queryDetail={eventView.query}
+          onEventClick={() => {
+            trackAnalyticsEvent({
+              eventKey: 'discover_v2.prebuilt_query_click',
+              eventName: 'Discoverv2: Click a pre-built query',
+              organization_id: this.props.organization.id,
+              query_name: eventView.name,
+            });
+          }}
+          renderGraph={() => {
+            return (
+              <MiniGraph
+                query={eventView.getEventsAPIPayload(location).query}
+                eventView={eventView}
+                organization={organization}
+              />
+            );
+          }}
+          renderContextMenu={() => {
+            return (
+              <ContextMenu>
+                <MenuItem
+                  href="#delete-query"
+                  onClick={this.handleDeleteQuery(eventView)}
+                >
+                  {t('Delete Query')}
+                </MenuItem>
+                <MenuItem
+                  href="#duplicate-query"
+                  onClick={this.handleDuplicateQuery(eventView)}
+                >
+                  {t('Duplicate Query')}
+                </MenuItem>
+              </ContextMenu>
+            );
+          }}
+        />
+      );
+    });
+  };
+
+  render() {
+    return (
+      <QueryGrid>
+        {this.renderPrebuiltQueries()}
+        {this.renderSavedQueries()}
+      </QueryGrid>
+    );
+  }
+}
+
+const QueryGrid = styled('div')`
+  display: grid;
+  grid-template-columns: minmax(100px, 1fr);
+  grid-gap: ${space(3)};
+
+  @media (min-width: ${theme.breakpoints[1]}) {
+    grid-template-columns: repeat(2, minmax(100px, 1fr));
+  }
+
+  @media (min-width: ${theme.breakpoints[2]}) {
+    grid-template-columns: repeat(3, minmax(100px, 1fr));
+  }
+
+  @media (min-width: ${theme.breakpoints[4]}) {
+    grid-template-columns: repeat(5, minmax(100px, 1fr));
+  }
+`;
+
+class ContextMenu extends React.Component {
+  render() {
+    const {children} = this.props;
+
+    return (
+      <DropdownMenu>
+        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
+          const topLevelCx = classNames('dropdown', {
+            'pull-right': true,
+            'anchor-right': true,
+            open: isOpen,
+          });
+
+          return (
+            <span
+              {...getRootProps({
+                className: topLevelCx,
+              })}
+            >
+              <ContextMenuButton
+                {...getActorProps({
+                  onClick: event => {
+                    event.stopPropagation();
+                    event.preventDefault();
+                  },
+                }) as any}
+              >
+                <InlineSvg src="icon-ellipsis-filled" />
+              </ContextMenuButton>
+
+              {isOpen && (
+                <ul {...getMenuProps({}) as any} className={classNames('dropdown-menu')}>
+                  {children}
+                </ul>
+              )}
+            </span>
+          );
+        }}
+      </DropdownMenu>
+    );
+  }
+}
+
+const ContextMenuButton = styled('div')`
+  border-radius: 3px;
+  background-color: ${p => p.theme.offWhite};
+  padding-left: 8px;
+  padding-right: 8px;
+
+  &:hover {
+    background-color: ${p => p.theme.offWhite2};
+  }
+`;
+
+export default withApi(withDiscoverSavedQueries(QueryList));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
index aa30b0a195..e479062ff6 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/querycard.tsx
@@ -1,21 +1,30 @@
 import React from 'react';
-
 import styled from 'react-emotion';
+
 import space from 'app/styles/space';
 import Link from 'app/components/links/link';
-import InlineSvg from 'app/components/inlineSvg';
 
 type Props = {
   title?: string;
+  subtitle: string;
   queryDetail?: string;
   to?: string | object;
   onEventClick?: () => void;
   renderGraph: () => React.ReactNode;
+  renderContextMenu?: () => React.ReactNode;
 };
 
 class QueryCard extends React.PureComponent<Props> {
   render() {
-    const {title, queryDetail, onEventClick, to, renderGraph} = this.props;
+    const {
+      title,
+      subtitle,
+      queryDetail,
+      onEventClick,
+      to,
+      renderContextMenu,
+      renderGraph,
+    } = this.props;
 
     return (
       <StyledQueryCard onClick={onEventClick} to={to}>
@@ -26,9 +35,9 @@ class QueryCard extends React.PureComponent<Props> {
         <QueryCardBody>{renderGraph()}</QueryCardBody>
         <QueryCardFooter>
           <StyledCreator>
-            <small>Pre-Built Query</small>
+            <small>{subtitle}</small>
           </StyledCreator>
-          <InlineSvg src="icon-ellipsis-filled" />
+          {renderContextMenu && renderContextMenu()}
         </QueryCardFooter>
       </StyledQueryCard>
     );
diff --git a/tests/js/spec/components/sidebar/discover2Item.spec.jsx b/tests/js/spec/components/sidebar/discover2Item.spec.jsx
deleted file mode 100644
index 23513b0057..0000000000
--- a/tests/js/spec/components/sidebar/discover2Item.spec.jsx
+++ /dev/null
@@ -1,83 +0,0 @@
-import React from 'react';
-import {mountWithTheme} from 'sentry-test/enzyme';
-
-import {Client} from 'app/api';
-import Discover2Item from 'app/components/sidebar/discover2Item';
-import DiscoverSavedQueriesStore from 'app/stores/discoverSavedQueriesStore';
-
-const makeWrapper = props =>
-  mountWithTheme(
-    <Discover2Item {...props} label="Discover" icon="icon-search" />,
-    TestStubs.routerContext()
-  );
-
-describe('Sidebar > Discover2Item', function() {
-  let client, organization;
-  beforeEach(function() {
-    const now = new Date();
-    Client.addMockResponse({
-      url: '/organizations/org-slug/discover/saved/',
-      body: [
-        {
-          id: '1',
-          version: 2,
-          name: 'first query',
-          fields: ['title', 'count()'],
-          dateCreated: now,
-          dateUpdated: now,
-          createdBy: '1',
-        },
-        {
-          id: '2',
-          name: 'second query',
-          version: 2,
-          fields: ['transaction', 'count()'],
-          dateCreated: now,
-          dateUpdated: now,
-          createdBy: '1',
-        },
-        {
-          id: '2',
-          name: 'old query',
-          fields: ['transaction', 'count()'],
-          dateCreated: now,
-          dateUpdated: now,
-          createdBy: '1',
-        },
-      ],
-    });
-    client = new Client();
-    organization = TestStubs.Organization();
-  });
-
-  afterEach(function() {
-    DiscoverSavedQueriesStore.reset();
-  });
-
-  it('renders no menu when closed', async function() {
-    const wrapper = makeWrapper({organization, client});
-    // Wait for reflux
-    await tick();
-
-    const menu = wrapper.find('AutoComplete');
-    expect(menu).toHaveLength(0);
-  });
-
-  it('opens the menu on mouseEnter', async function() {
-    const wrapper = makeWrapper({organization, client});
-    // Wait for reflux
-    await tick();
-    await tick();
-
-    const nav = wrapper.find('nav');
-    nav.simulate('mouseEnter');
-    await wrapper.update();
-
-    const menu = wrapper.find('Menu');
-    expect(menu).toHaveLength(1);
-
-    // Old versionless items should be excluded
-    const menuItems = menu.find('MenuItem');
-    expect(menuItems).toHaveLength(2);
-  });
-});
