commit 645ec97c783f3cb2abd61feadff3251437139321
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Apr 15 12:59:05 2020 -0400

    fix(discover) Allow for alternate ISO8601 format (#18166)
    
    Our date filters weren't allowing for the timezone to be in +00:00 format at the
    end of the string, which the frontend sometimes adds.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index ede4e63fdb..4c9999984f 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -109,18 +109,18 @@ quoted_raw_search    = spaces quoted_value spaces
 basic_filter         = negation? search_key sep search_value
 quoted_basic_filter  = negation? search_key sep quoted_value
 # filter for dates
-time_filter          = search_key sep? operator date_format
+time_filter          = search_key sep? operator (date_format / alt_date_format)
 # filter for relative dates
 rel_time_filter      = search_key sep rel_date_format
 # filter for durations
 duration_filter      = search_key sep operator? duration_format
 # exact time filter for dates
-specific_time_filter = search_key sep date_format
+specific_time_filter = search_key sep (date_format / alt_date_format)
 # Numeric comparison filter
 numeric_filter       = search_key sep operator? numeric_value
 # Aggregate numeric filter
 aggregate_filter        = aggregate_key sep operator? (numeric_value / duration_format)
-aggregate_date_filter   = aggregate_key sep operator? (date_format / rel_date_format)
+aggregate_date_filter   = aggregate_key sep operator? (date_format / alt_date_format / rel_date_format)
 
 # has filter for not null type checks
 has_filter           = negation? "has" sep (search_key / search_value)
@@ -140,6 +140,7 @@ function_arg         = space? key? comma? space?
 quoted_key           = ~r"\"([a-zA-Z0-9_\.:-]+)\""
 
 date_format          = ~r"\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{1,6})?)?Z?(?=\s|$)"
+alt_date_format      = ~r"\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{1,6})?(\+\d{2}:\d{2})?)?(?=\s|$)"
 rel_date_format      = ~r"[\+\-][0-9]+[wdhm](?=\s|$)"
 duration_format      = ~r"([0-9\.]+)(ms|s|min|m|hr|h|day|d|wk|w)(?=\s|$)"
 
@@ -429,6 +430,7 @@ class SearchVisitor(NodeVisitor):
 
     def visit_time_filter(self, node, children):
         (search_key, _, operator, search_value) = children
+        search_value = search_value[0]
         if search_key.name in self.date_keys:
             try:
                 search_value = parse_datetime_string(search_value)
@@ -477,6 +479,8 @@ class SearchVisitor(NodeVisitor):
         # we specify a specific datetime then it means a few minutes interval
         # on either side of that datetime
         (search_key, _, date_value) = children
+        date_value = date_value[0]
+
         if search_key.name not in self.date_keys:
             return self._handle_basic_filter(search_key, "=", SearchValue(date_value))
 
@@ -500,6 +504,9 @@ class SearchVisitor(NodeVisitor):
     def visit_date_format(self, node, children):
         return node.text
 
+    def visit_alt_date_format(self, node, children):
+        return node.text
+
     def is_negated(self, node):
         # Because negations are always optional, parsimonious returns a list of nodes
         # containing one node when a negation exists, and a single node when it doesn't.
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index 58808143ef..ecfe538d8a 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -107,6 +107,8 @@ def parse_datetime_string(value):
     # timezones are not supported and are assumed UTC
     if value[-1:] == "Z":
         value = value[:-1]
+    if len(value) >= 6 and value[-6] == "+":
+        value = value[:-6]
 
     for format in [DATETIME_FORMAT_MICROSECONDS, DATETIME_FORMAT, DATE_FORMAT]:
         try:
@@ -139,6 +141,8 @@ def parse_datetime_value(value):
     # timezones are not supported and are assumed UTC
     if value[-1:] == "Z":
         value = value[:-1]
+    if len(value) >= 6 and value[-6] == "+":
+        value = value[:-6]
 
     result = None
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index ff22c2b471..19bac6071b 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -233,6 +233,16 @@ class ParseSearchQueryTest(unittest.TestCase):
             )
         ]
 
+        assert parse_search_query("first_seen:>2018-01-01T05:06:07+00:00") == [
+            SearchFilter(
+                key=SearchKey(name="first_seen"),
+                operator=">",
+                value=SearchValue(
+                    raw_value=datetime.datetime(2018, 1, 1, 5, 6, 7, tzinfo=timezone.utc)
+                ),
+            )
+        ]
+
         assert parse_search_query("random:>2015-05-18") == [
             SearchFilter(
                 key=SearchKey(name="random"), operator="=", value=SearchValue(">2015-05-18")
@@ -280,7 +290,24 @@ class ParseSearchQueryTest(unittest.TestCase):
             ),
         ]
 
-        assert parse_search_query("first_seen:2018-01-01T05:06:07") == [
+        assert parse_search_query("first_seen:2018-01-01T05:06:07Z") == [
+            SearchFilter(
+                key=SearchKey(name="first_seen"),
+                operator=">=",
+                value=SearchValue(
+                    raw_value=datetime.datetime(2018, 1, 1, 5, 1, 7, tzinfo=timezone.utc)
+                ),
+            ),
+            SearchFilter(
+                key=SearchKey(name="first_seen"),
+                operator="<",
+                value=SearchValue(
+                    raw_value=datetime.datetime(2018, 1, 1, 5, 12, 7, tzinfo=timezone.utc)
+                ),
+            ),
+        ]
+
+        assert parse_search_query("first_seen:2018-01-01T05:06:07+00:00") == [
             SearchFilter(
                 key=SearchKey(name="first_seen"),
                 operator=">=",
@@ -1245,6 +1272,10 @@ class GetSnubaQueryArgsTest(TestCase):
         result = get_filter("apdex(300):>-0.5")
         assert result.having == [["apdex_300", ">", -0.5]]
 
+    def test_function_with_date_arguments(self):
+        result = get_filter("last_seen():2020-04-01T19:34:52+00:00")
+        assert result.having == [["last_seen", "=", 1585769692000]]
+
     @pytest.mark.xfail(reason="this breaks issue search so needs to be redone")
     def test_trace_id(self):
         result = get_filter("trace:{}".format("a0fa8803753e40fd8124b21eeb2986b5"))
