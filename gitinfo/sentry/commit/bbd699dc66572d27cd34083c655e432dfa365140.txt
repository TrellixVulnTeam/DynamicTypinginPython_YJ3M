commit bbd699dc66572d27cd34083c655e432dfa365140
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jan 3 16:01:17 2017 -0800

    api: prevent time_spent value from overflowing
    
    Without capping the int size here, it can overflow the int4 column in
    the database causing the Event to fail saving.

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index e54bcc2e08..9e2d7e2320 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -29,6 +29,7 @@ from sentry.constants import (
     CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS_MAP,
     MAX_TAG_VALUE_LENGTH, MAX_TAG_KEY_LENGTH, VALID_PLATFORMS
 )
+from sentry.db.models import BoundedIntegerField
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.csp import Csp
 from sentry.event_manager import EventManager
@@ -693,6 +694,25 @@ class ClientApiHelper(object):
                 })
                 del data['environment']
 
+        if data.get('time_spent'):
+            try:
+                data['time_spent'] = int(data['time_spent'])
+            except (ValueError, TypeError):
+                data['errors'].append({
+                    'type': EventError.INVALID_DATA,
+                    'name': 'time_spent',
+                    'value': data['time_spent'],
+                })
+                del data['time_spent']
+            else:
+                if data['time_spent'] > BoundedIntegerField.MAX_VALUE:
+                    data['errors'].append({
+                        'type': EventError.VALUE_TOO_LONG,
+                        'name': 'time_spent',
+                        'value': data['time_spent'],
+                    })
+                    del data['time_spent']
+
         return data
 
     def ensure_does_not_have_ip(self, data):
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index abe55a9958..24b071136e 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -387,6 +387,32 @@ class ValidateDataTest(BaseAPITest):
         })
         assert data.get('environment') == '42'
 
+    def test_time_spent_too_large(self):
+        data = self.helper.validate_data(self.project, {
+            'time_spent': 2147483647 + 1,
+        })
+        assert not data.get('time_spent')
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'value_too_long'
+        assert data['errors'][0]['name'] == 'time_spent'
+        assert data['errors'][0]['value'] == 2147483647 + 1
+
+    def test_time_spent_invalid(self):
+        data = self.helper.validate_data(self.project, {
+            'time_spent': 'lol',
+        })
+        assert not data.get('time_spent')
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'invalid_data'
+        assert data['errors'][0]['name'] == 'time_spent'
+        assert data['errors'][0]['value'] == 'lol'
+
+    def test_time_spent_non_int(self):
+        data = self.helper.validate_data(self.project, {
+            'time_spent': '123',
+        })
+        assert data['time_spent'] == 123
+
 
 class SafelyLoadJSONStringTest(BaseAPITest):
     def test_valid_payload(self):
