commit 12425e2a4579ce4ab1de1b332e31994c79aac856
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 1 16:06:09 2015 -0700

    Bind in_app value as part of frame normalization

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 4fcb465cbc..32be376f9f 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -39,11 +39,14 @@ class SingleException(Interface):
     display_score = 1200
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, has_system_frames=None):
         assert data.get('type') or data.get('value')
 
         if data.get('stacktrace') and data['stacktrace'].get('frames'):
-            stacktrace = Stacktrace.to_python(data['stacktrace'])
+            stacktrace = Stacktrace.to_python(
+                data['stacktrace'],
+                has_system_frames=has_system_frames,
+            )
         else:
             stacktrace = None
 
@@ -69,12 +72,9 @@ class SingleException(Interface):
             'stacktrace': stacktrace,
         }
 
-    def get_api_context(self, is_public=False, has_system_frames=None):
+    def get_api_context(self, is_public=False):
         if self.stacktrace:
-            stacktrace = self.stacktrace.get_api_context(
-                is_public=is_public,
-                has_system_frames=has_system_frames,
-            )
+            stacktrace = self.stacktrace.get_api_context(is_public=is_public)
         else:
             stacktrace = None
 
@@ -152,9 +152,14 @@ class Exception(Interface):
 
         trim_exceptions(data)
 
+        has_system_frames = cls.data_has_system_frames(data)
+
         kwargs = {
             'values': [
-                SingleException.to_python(v)
+                SingleException.to_python(
+                    v,
+                    has_system_frames=has_system_frames,
+                )
                 for v in data['values']
             ],
         }
@@ -167,6 +172,44 @@ class Exception(Interface):
 
         return cls(**kwargs)
 
+    @classmethod
+    def data_has_system_frames(cls, data):
+        system_frames = 0
+        app_frames = 0
+        unknown_frames = 0
+        for exc in data['values']:
+            if not exc.get('stacktrace'):
+                continue
+
+            for frame in exc['stacktrace'].get('frames', []):
+                if frame.get('in_app') is False:
+                    system_frames += 1
+                elif frame.get('in_app') is True:
+                    app_frames += 1
+                else:
+                    unknown_frames += 1
+
+        # TODO(dcramer): this should happen in normalize
+        # We need to ensure that implicit values for in_app are handled
+        # appropriately
+        if unknown_frames and (app_frames or system_frames):
+            for exc in data['values']:
+                if not exc.get('stacktrace'):
+                    continue
+
+                for frame in exc['stacktrace'].get('frames', []):
+                    if frame.get('in_app') is None:
+                        if bool(system_frames):
+                            frame['in_app'] = True
+                            app_frames += 1
+                        else:
+                            frame['in_app'] = False
+                            system_frames += 1
+
+        # if there is a mix of frame styles then we indicate that system frames
+        # are present and should be represented as a split
+        return bool(app_frames and system_frames)
+
     def to_json(self):
         return {
             'values': [v.to_json() for v in self.values],
@@ -211,17 +254,16 @@ class Exception(Interface):
         return output
 
     def get_api_context(self, is_public=False):
-        has_system_frames = self.has_system_frames()
-
         return {
             'values': [
-                v.get_api_context(
-                    is_public=is_public,
-                    has_system_frames=has_system_frames,
-                )
+                v.get_api_context(is_public=is_public)
                 for v in self.values
             ],
-            'hasSystemFrames': has_system_frames,
+            'hasSystemFrames': any(
+                v.stacktrace.has_system_frames
+                for v in self.values
+                if v.stacktrace
+            ),
             'excOmitted': self.exc_omitted,
         }
 
@@ -238,42 +280,6 @@ class Exception(Interface):
                     header=False) + '\n\n')
         return (''.join(output)).strip()
 
-    def has_system_frames(self):
-        system_frames = 0
-        app_frames = 0
-        unknown_frames = 0
-        for exc in self.values:
-            if not exc.stacktrace:
-                continue
-
-            for frame in exc.stacktrace.frames:
-                if frame.in_app is False:
-                    system_frames += 1
-                elif frame.in_app is True:
-                    app_frames += 1
-                else:
-                    unknown_frames += 1
-
-        # TODO(dcramer): this should happen in normalize
-        # We need to ensure that implicit values for in_app are handled
-        # appropriately
-        if unknown_frames and (app_frames or system_frames):
-            for exc in self.values:
-                if not exc.stacktrace:
-                    continue
-
-                for frame in exc.stacktrace.frames:
-                    if frame.in_app is None:
-                        frame.in_app = bool(system_frames)
-                        if frame.in_app:
-                            app_frames += 1
-                        else:
-                            system_frames += 1
-
-        # if there is a mix of frame styles then we indicate that system frames
-        # are present and should be represented as a split
-        return bool(app_frames and system_frames)
-
     def get_stacktrace(self, *args, **kwargs):
         exc = self.values[0]
         if exc.stacktrace:
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 67cec3a01f..681ab110e8 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -430,9 +430,11 @@ class Stacktrace(Interface):
     ``post_context``
       A list of source code lines after context_line (in order) -- usually [lineno + 1:lineno + 5]
     ``in_app``
-      Signifies whether this frame is related to the execution of the relevant code in this stacktrace. For example,
-      the frames that might power the framework's webserver of your app are probably not relevant, however calls to
-      the framework's library once you start handling code likely are.
+      Signifies whether this frame is related to the execution of the relevant
+      code in this stacktrace. For example, the frames that might power the
+      framework's webserver of your app are probably not relevant, however calls
+      to the framework's library once you start handling code likely are. See
+      notes below on implicity ``in_app`` behavior.
     ``vars``
       A mapping of variables which were available within this frame (usually context-locals).
 
@@ -459,6 +461,18 @@ class Stacktrace(Interface):
     >>>     "frames_omitted": [13, 56]
     >>> }
 
+    Implicity ``in_app`` behavior exists when the value is not specified on all
+    frames within a stacktrace (or collectively within an exception if this is
+    part of a chain).
+
+    If **any frame** is marked with ``in_app=True`` or ``in_app=False``:
+
+    - Set ``in_app=False`` where ``in_app is None``
+
+    If **all frames** are marked identical values for ``in_app``:
+
+    - Set ``in_app=False`` on all frames
+
     .. note:: This interface can be passed as the 'stacktrace' key in addition
               to the full interface path.
     """
@@ -468,16 +482,27 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data):
+    def to_python(cls, data, has_system_frames=None):
         assert data.get('frames')
 
         slim_frame_data(data)
 
+        if has_system_frames is None:
+            has_system_frames = cls.data_has_system_frames(data)
+
+        frame_list = [
+            Frame.to_python(f)
+            for f in data['frames']
+        ]
+
+        for frame in frame_list:
+            if not has_system_frames:
+                frame.in_app = False
+            elif frame.in_app is None:
+                frame.in_app = False
+
         kwargs = {
-            'frames': [
-                Frame.to_python(f)
-                for f in data['frames']
-            ],
+            'frames': frame_list,
         }
 
         if data.get('frames_omitted'):
@@ -486,31 +511,39 @@ class Stacktrace(Interface):
         else:
             kwargs['frames_omitted'] = None
 
+        kwargs['has_system_frames'] = has_system_frames
+
         return cls(**kwargs)
 
-    def get_api_context(self, is_public=False, has_system_frames=None):
-        # if there are no system frames, pretend they're all part of the app
-        if has_system_frames is None:
-            has_system_frames = self.has_system_frames()
+    @classmethod
+    def data_has_system_frames(cls, data):
+        system_frames = 0
+        frames = []
+        for frame in data['frames']:
+            if not frame.get('in_app'):
+                system_frames += 1
 
-        frame_list = []
-        for frame in self.frames:
-            frame_context = frame.get_api_context(is_public=is_public)
-            if not has_system_frames:
-                frame_context['inApp'] = True
-            elif frame_context.get('inApp') is None:
-                frame_context['inApp'] = False
-            frame_list.append(frame_context)
+        if len(frames) == system_frames:
+            system_frames = 0
+        return bool(system_frames)
+
+    def get_api_context(self, is_public=False):
+        frame_list = [
+            f.get_api_context(is_public=is_public)
+            for f in self.frames
+        ]
 
         return {
             'frames': frame_list,
             'framesOmitted': self.frames_omitted,
+            'hasSystemFrames': self.has_system_frames,
         }
 
     def to_json(self):
         return {
             'frames': [f.to_json() for f in self.frames],
             'frames_omitted': self.frames_omitted,
+            'has_system_frames': self.has_system_frames,
         }
 
     def get_path(self):
@@ -554,17 +587,6 @@ class Stacktrace(Interface):
     def to_string(self, event, is_public=False, **kwargs):
         return self.get_stacktrace(event, system_frames=False, max_frames=10)
 
-    def has_system_frames(self):
-        system_frames = 0
-        frames = []
-        for frame in self.frames:
-            if not frame.in_app:
-                system_frames += 1
-
-        if len(frames) == system_frames:
-            system_frames = 0
-        return bool(system_frames)
-
     def get_stacktrace(self, event, system_frames=True, newest_first=None,
                        max_frames=None, header=True):
         if newest_first is None:
