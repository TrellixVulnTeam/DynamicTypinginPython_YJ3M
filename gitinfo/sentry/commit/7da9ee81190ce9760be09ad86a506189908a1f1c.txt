commit 7da9ee81190ce9760be09ad86a506189908a1f1c
Author: Dan Fuller <dfuller@sentry.io>
Date:   Wed Apr 22 16:49:21 2020 -0700

    refs(mail): Allow MailAdapter to be overriden via a setting. (#18423)
    
    We need to override `MailAdapter` in getsentry, so adding a setting to allow us to do so.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index c54d0b9090..77ab691671 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1865,3 +1865,4 @@ SENTRY_REQUEST_METRIC_ALLOWED_PATHS = (
     "sentry.discover.endpoints",
     "sentry.incidents.endpoints",
 )
+SENTRY_MAIL_ADAPTER_BACKEND = "sentry.mail.adapter.MailAdapter"
diff --git a/src/sentry/mail/__init__.py b/src/sentry/mail/__init__.py
index c3961685ab..27e499ae58 100644
--- a/src/sentry/mail/__init__.py
+++ b/src/sentry/mail/__init__.py
@@ -1 +1,12 @@
 from __future__ import absolute_import
+
+from django.conf import settings
+
+from sentry.utils.imports import import_string
+
+
+def load_mail_adapter():
+    return import_string(settings.SENTRY_MAIL_ADAPTER_BACKEND)()
+
+
+mail_adapter = load_mail_adapter()
diff --git a/src/sentry/mail/actions.py b/src/sentry/mail/actions.py
index ea9c8a9b49..245d5b0fed 100644
--- a/src/sentry/mail/actions.py
+++ b/src/sentry/mail/actions.py
@@ -2,7 +2,8 @@ from __future__ import absolute_import
 
 from django import forms
 
-from sentry.mail.adapter import ActionTargetType, MailAdapter
+from sentry.mail import mail_adapter
+from sentry.mail.adapter import ActionTargetType
 from sentry.models import Project, User
 from sentry.rules.actions.base import EventAction
 from sentry.utils import metrics
@@ -89,20 +90,19 @@ class NotifyEmailAction(EventAction):
     def __init__(self, *args, **kwargs):
         super(NotifyEmailAction, self).__init__(*args, **kwargs)
         self.form_fields = {"targetType": {"type": "mailAction", "choices": CHOICES}}
-        self.mail_adapter = MailAdapter()
 
     def after(self, event, state):
         extra = {"event_id": event.event_id}
         group = event.group
 
-        if not self.mail_adapter.should_notify(group=group):
+        if not mail_adapter.should_notify(group=group):
             extra["group_id"] = group.id
             self.logger.info("rule.fail.should_notify", extra=extra)
             return
 
         metrics.incr("notifications.sent", instance=self.metrics_slug, skip_internal=False)
         yield self.future(
-            lambda event, futures: self.mail_adapter.rule_notify(
+            lambda event, futures: mail_adapter.rule_notify(
                 event,
                 futures,
                 ActionTargetType(self.data["targetType"]),
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 2e4835de96..66aebd25c8 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -3,7 +3,8 @@ from __future__ import absolute_import
 import logging
 
 import sentry
-from sentry.mail.adapter import MailAdapter, ActionTargetType
+from sentry.mail import mail_adapter
+from sentry.mail.adapter import ActionTargetType
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils import metrics
 from sentry.utils.http import absolute_uri
@@ -20,13 +21,10 @@ class MailPlugin(NotificationPlugin):
     author_url = "https://github.com/getsentry/sentry"
     project_default_enabled = True
     project_conf_form = None
-    mail_adapter = MailAdapter()
 
     def rule_notify(self, event, futures):
         metrics.incr("mail_plugin.rule_notify")
-        return self.mail_adapter.rule_notify(
-            event, futures, target_type=ActionTargetType.ISSUE_OWNERS
-        )
+        return mail_adapter.rule_notify(event, futures, target_type=ActionTargetType.ISSUE_OWNERS)
 
     def get_project_url(self, project):
         return absolute_uri(u"/{}/{}/".format(project.organization.slug, project.slug))
@@ -37,20 +35,19 @@ class MailPlugin(NotificationPlugin):
 
     def should_notify(self, group, event):
         metrics.incr("mail_plugin.should_notify")
-        return (
-            not group.project.flags.has_issue_alerts_targeting
-            and self.mail_adapter.should_notify(group)
+        return not group.project.flags.has_issue_alerts_targeting and mail_adapter.should_notify(
+            group
         )
 
     def notify(self, notification, **kwargs):
         metrics.incr("mail_plugin.notify")
-        return self.mail_adapter.notify(
+        return mail_adapter.notify(
             notification, target_type=ActionTargetType.ISSUE_OWNERS, **kwargs
         )
 
     def notify_digest(self, project, digest):
         metrics.incr("mail_plugin.notify_digest")
-        return self.mail_adapter.notify_digest(
+        return mail_adapter.notify_digest(
             project, digest, target_type=ActionTargetType.ISSUE_OWNERS
         )
 
@@ -59,14 +56,14 @@ class MailPlugin(NotificationPlugin):
             return
         metrics.incr("mail_plugin.notify_about_activity")
 
-        return self.mail_adapter.notify_about_activity(activity)
+        return mail_adapter.notify_about_activity(activity)
 
     def handle_signal(self, name, payload, **kwargs):
         if name == "user-reports.created":
             project = kwargs.get("project")
             if project and not project.flags.has_issue_alerts_targeting:
                 metrics.incr("mail_plugin.handle_signal")
-                self.mail_adapter.handle_signal(name, payload, **kwargs)
+                mail_adapter.handle_signal(name, payload, **kwargs)
 
     def can_configure_for_project(self, project):
         return (
diff --git a/src/sentry/tasks/activity.py b/src/sentry/tasks/activity.py
index 2d21723a2d..e796ee3a33 100644
--- a/src/sentry/tasks/activity.py
+++ b/src/sentry/tasks/activity.py
@@ -9,7 +9,7 @@ logger = logging.getLogger(__name__)
 
 
 def get_activity_notifiers(project):
-    from sentry.mail.adapter import MailAdapter
+    from sentry.mail import mail_adapter
     from sentry.plugins.bases.notify import NotificationPlugin
     from sentry.plugins.base import plugins
 
@@ -23,7 +23,7 @@ def get_activity_notifiers(project):
             results.append(notifier)
 
     if project.flags.has_issue_alerts_targeting:
-        results.append(MailAdapter())
+        results.append(mail_adapter)
 
     return results
 
diff --git a/src/sentry/tasks/digests.py b/src/sentry/tasks/digests.py
index d09b4f82e6..439a0c7354 100644
--- a/src/sentry/tasks/digests.py
+++ b/src/sentry/tasks/digests.py
@@ -37,7 +37,7 @@ def schedule_digests():
 @instrumented_task(name="sentry.tasks.digests.deliver_digest", queue="digests.delivery")
 def deliver_digest(key, schedule_timestamp=None):
     from sentry import digests
-    from sentry.mail.adapter import MailAdapter
+    from sentry.mail import mail_adapter
 
     try:
         project, target_type, target_identifier = split_key(key)
@@ -59,4 +59,4 @@ def deliver_digest(key, schedule_timestamp=None):
             return
 
         if digest:
-            MailAdapter().notify_digest(project, digest, target_type, target_identifier)
+            mail_adapter.notify_digest(project, digest, target_type, target_identifier)
diff --git a/src/sentry/tasks/signals.py b/src/sentry/tasks/signals.py
index 0b818e7e6a..b5240cfd23 100644
--- a/src/sentry/tasks/signals.py
+++ b/src/sentry/tasks/signals.py
@@ -7,7 +7,7 @@ from sentry.utils.safe import safe_execute
 
 @instrumented_task(name="sentry.tasks.signal")
 def signal(name, payload, project_id=None, **kwargs):
-    from sentry.mail.adapter import MailAdapter
+    from sentry.mail import mail_adapter
     from sentry.models import Project
 
     if project_id is not None:
@@ -22,4 +22,4 @@ def signal(name, payload, project_id=None, **kwargs):
         safe_execute(plugin.handle_signal, name=name, payload=payload, project=project)
 
     if project and project.flags.has_issue_alerts_targeting:
-        safe_execute(MailAdapter().handle_signal, name=name, payload=payload, project=project)
+        safe_execute(mail_adapter.handle_signal, name=name, payload=payload, project=project)
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index 55af336175..319c3035e6 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -16,7 +16,8 @@ from six import text_type
 from sentry.api.serializers import serialize, UserReportWithGroupSerializer
 from sentry.digests.notifications import build_digest, event_to_record
 from sentry.event_manager import EventManager, get_event_type
-from sentry.mail.adapter import MailAdapter, ActionTargetType
+from sentry.mail import mail_adapter
+from sentry.mail.adapter import ActionTargetType
 from sentry.models import (
     Activity,
     Organization,
@@ -43,7 +44,7 @@ from sentry.utils.email import MessageBuilder
 class BaseMailAdapterTest(object):
     @fixture
     def adapter(self):
-        return MailAdapter()
+        return mail_adapter
 
     def make_event_data(self, filename, url="http://example.com"):
         mgr = EventManager(
@@ -259,7 +260,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         _get_title.assert_called_once_with()
         _to_email_html.assert_called_once_with(event)
 
-    @mock.patch("sentry.mail.adapter.MailAdapter._send_mail")
+    @mock.patch("sentry.mail.mail_adapter._send_mail")
     def test_notify_users_does_email(self, _send_mail):
         event_manager = EventManager({"message": "hello world", "level": "error"})
         event_manager.normalize()
@@ -282,7 +283,7 @@ class MailAdapterNotifyTest(BaseMailAdapterTest, TestCase):
         self.assertEquals(kwargs.get("reference"), group)
         assert kwargs.get("subject") == u"BAR-1 - hello world"
 
-    @mock.patch("sentry.mail.adapter.MailAdapter._send_mail")
+    @mock.patch("sentry.mail.mail_adapter._send_mail")
     def test_multiline_error(self, _send_mail):
         event_manager = EventManager({"message": "hello world\nfoo bar", "level": "error"})
         event_manager.normalize()
@@ -471,7 +472,7 @@ class MailAdapterGetDigestSubjectTest(BaseMailAdapterTest, TestCase):
 
 
 class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
-    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
     def test_notify_digest(self, notify):
         project = self.project
         event = self.store_event(
@@ -497,7 +498,7 @@ class MailAdapterNotifyDigestTest(BaseMailAdapterTest, TestCase):
         message = mail.outbox[0]
         assert "List-ID" in message.message()
 
-    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
     @mock.patch.object(MessageBuilder, "send_async", autospec=True)
     def test_notify_digest_single_record(self, send_async, notify):
         event = self.store_event(data={}, project_id=self.project.id)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index f17cf75920..3ee523d2bb 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -16,7 +16,7 @@ from sentry.utils.compat.mock import Mock
 
 from sentry.api.serializers import serialize, UserReportWithGroupSerializer
 from sentry.digests.notifications import build_digest, event_to_record
-from sentry.mail.adapter import MailAdapter
+from sentry.mail import mail_adapter
 from sentry.models import (
     Activity,
     GroupSubscription,
@@ -83,7 +83,7 @@ class MailPluginTest(TestCase):
         _get_title.assert_called_once_with()
         _to_email_html.assert_called_once_with(event)
 
-    @mock.patch("sentry.mail.adapter.MailAdapter._send_mail")
+    @mock.patch("sentry.mail.mail_adapter._send_mail")
     def test_notify_users_does_email(self, _send_mail):
         event_manager = EventManager({"message": "hello world", "level": "error"})
         event_manager.normalize()
@@ -106,7 +106,7 @@ class MailPluginTest(TestCase):
         self.assertEquals(kwargs.get("reference"), group)
         assert kwargs.get("subject") == u"BAR-1 - hello world"
 
-    @mock.patch("sentry.mail.adapter.MailAdapter._send_mail")
+    @mock.patch("sentry.mail.mail_adapter._send_mail")
     def test_multiline_error(self, _send_mail):
         event_manager = EventManager({"message": "hello world\nfoo bar", "level": "error"})
         event_manager.normalize()
@@ -191,7 +191,7 @@ class MailPluginTest(TestCase):
 
     def test_get_digest_subject(self):
         assert (
-            self.plugin.mail_adapter.get_digest_subject(
+            mail_adapter.get_digest_subject(
                 mock.Mock(qualified_short_id="BAR-1"),
                 {mock.sentinel.group: 3},
                 datetime(2016, 9, 19, 1, 2, 3, tzinfo=pytz.utc),
@@ -199,7 +199,7 @@ class MailPluginTest(TestCase):
             == "BAR-1 - 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC"
         )
 
-    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
     def test_notify_digest(self, notify):
         project = self.project
         event = self.store_event(
@@ -225,7 +225,7 @@ class MailPluginTest(TestCase):
         message = mail.outbox[0]
         assert "List-ID" in message.message()
 
-    @mock.patch.object(MailAdapter, "notify", side_effect=MailAdapter.notify, autospec=True)
+    @mock.patch.object(mail_adapter, "notify", side_effect=mail_adapter.notify, autospec=True)
     @mock.patch.object(MessageBuilder, "send_async", autospec=True)
     def test_notify_digest_single_record(self, send_async, notify):
         event = self.store_event(data={}, project_id=self.project.id)
@@ -641,25 +641,25 @@ class MailPluginShouldNotifyTest(TestCase):
     def plugin(self):
         return MailPlugin()
 
-    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
+    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[]))
     def test_should_notify_no_sendable_users_has_issue_alerts_targeting(self):
         self.group.project.flags.has_issue_alerts_targeting = True
         self.group.project.save()
         assert not self.plugin.should_notify(group=self.group, event=Mock())
 
-    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[]))
+    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[]))
     def test_should_notify_no_sendable_users_not_has_issue_alerts_targeting(self):
         self.group.project.flags.has_issue_alerts_targeting = False
         self.group.project.save()
         assert not self.plugin.should_notify(group=self.group, event=Mock())
 
-    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[1]))
+    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[1]))
     def test_should_notify_sendable_users_has_issue_alerts_targetting(self):
         self.group.project.flags.has_issue_alerts_targeting = True
         self.group.project.save()
         assert not self.plugin.should_notify(group=self.group, event=Mock())
 
-    @mock.patch("sentry.mail.adapter.MailAdapter.get_sendable_users", Mock(return_value=[1]))
+    @mock.patch("sentry.mail.mail_adapter.get_sendable_users", Mock(return_value=[1]))
     def test_should_notify_sendable_users_not_has_issue_alerts_targetting(self):
         self.group.project.flags.has_issue_alerts_targeting = False
         self.group.project.save()
