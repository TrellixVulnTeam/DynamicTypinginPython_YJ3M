commit 1c70b913ea3f95c990ff84cd30c4effd766e69e9
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Nov 2 10:13:44 2014 -0800

    Remove use of TeamMember

diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 6f55981690..84e459027e 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -9,7 +9,7 @@ from sentry.api.decorators import sudo_required
 from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.constants import MEMBER_ADMIN, RESERVED_TEAM_SLUGS
-from sentry.models import Team, TeamMember, TeamStatus
+from sentry.models import Team, TeamStatus
 from sentry.tasks.deletion import delete_team
 
 
@@ -58,13 +58,6 @@ class TeamDetailsEndpoint(Endpoint):
 
         if serializer.is_valid():
             team = serializer.save()
-            TeamMember.objects.create_or_update(
-                user=team.owner,
-                team=team,
-                defaults={
-                    'type': MEMBER_ADMIN,
-                }
-            )
             return Response(serialize(team, request.user))
 
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/endpoints/team_member_index.py b/src/sentry/api/endpoints/team_member_index.py
deleted file mode 100644
index e624797ede..0000000000
--- a/src/sentry/api/endpoints/team_member_index.py
+++ /dev/null
@@ -1,24 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.base import Endpoint
-from sentry.api.permissions import assert_perm
-from sentry.api.serializers import serialize
-from sentry.models import Team
-from rest_framework.response import Response
-
-
-class TeamMemberIndexEndpoint(Endpoint):
-    def get(self, request, team_id):
-        team = Team.objects.get_from_cache(id=team_id)
-
-        assert_perm(team, request.user, request.auth)
-
-        member_list = serialize(
-            list(team.member_set.select_related('user')),
-            request.user)
-        member_list.extend(serialize(
-            list(team.pending_member_set.all()),
-            request.user))
-        member_list.sort(key=lambda x: x['email'])
-
-        return Response(member_list)
diff --git a/src/sentry/api/serializers/models/pending_team_member.py b/src/sentry/api/serializers/models/organization_member.py
similarity index 58%
rename from src/sentry/api/serializers/models/pending_team_member.py
rename to src/sentry/api/serializers/models/organization_member.py
index 07a9668681..d0348d0712 100644
--- a/src/sentry/api/serializers/models/pending_team_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -1,17 +1,17 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register
-from sentry.models import PendingTeamMember
+from sentry.models import OrganizationMember
 
 
-@register(PendingTeamMember)
-class PendingTeamMemberSerializer(Serializer):
+@register(OrganizationMember)
+class OrganizationMemberSerializer(Serializer):
     def serialize(self, obj, user):
         d = {
             'id': str(obj.id),
-            'email': obj.email,
+            'email': obj.email or obj.user.email,
             'access': obj.get_type_display(),
-            'pending': True,
+            'pending': obj.is_pending,
             'dateCreated': obj.date_added,
         }
         return d
diff --git a/src/sentry/api/serializers/models/team_member.py b/src/sentry/api/serializers/models/team_member.py
deleted file mode 100644
index 473ae2927f..0000000000
--- a/src/sentry/api/serializers/models/team_member.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.serializers import Serializer, register
-from sentry.models import TeamMember
-
-
-@register(TeamMember)
-class TeamMemberSerializer(Serializer):
-    def serialize(self, obj, user):
-        d = {
-            'id': str(obj.id),
-            'email': obj.user.email,
-            'access': obj.get_type_display(),
-            'pending': False,
-            'dateCreated': obj.date_added,
-        }
-        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 1d77c22e57..e769c2148d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -24,7 +24,6 @@ from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_access_group_index import TeamAccessGroupIndexEndpoint
 from .endpoints.team_project_index import TeamProjectIndexEndpoint
-from .endpoints.team_member_index import TeamMemberIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
 
@@ -54,9 +53,6 @@ urlpatterns = patterns(
     url(r'^teams/(?P<team_id>\d+)/projects/$',
         TeamProjectIndexEndpoint.as_view(),
         name='sentry-api-0-team-project-index'),
-    url(r'^teams/(?P<team_id>\d+)/members/$',
-        TeamMemberIndexEndpoint.as_view(),
-        name='sentry-api-0-team-member-index'),
     url(r'^teams/(?P<team_id>\d+)/access-groups/$',
         TeamAccessGroupIndexEndpoint.as_view(),
         name='sentry-api-0-team-access-group-index'),
diff --git a/src/sentry/migrations/0137_migrate_team_members.py b/src/sentry/migrations/0137_migrate_team_members.py
index 565fba180c..2af1968fd4 100644
--- a/src/sentry/migrations/0137_migrate_team_members.py
+++ b/src/sentry/migrations/0137_migrate_team_members.py
@@ -9,6 +9,7 @@ class Migration(DataMigration):
     def forwards(self, orm):
         Organization = orm['sentry.Organization']
         OrganizationMember = orm['sentry.OrganizationMember']
+        PendingTeamMember = orm['sentry.PendingTeamMember']
         TeamMember = orm['sentry.TeamMember']
 
         for org in Organization.objects.all():
@@ -17,10 +18,19 @@ class Migration(DataMigration):
                     om, _ = OrganizationMember.objects.get_or_create(
                         organization=org,
                         user=tm.user,
-                        defaults={'type': tm.type},  # ADMIN
+                        defaults={'type': tm.type},
                     )
                     om.teams.add(team)
 
+                for pm in PendingTeamMember.objects.filter(team=team):
+                    om, _ = OrganizationMember.objects.get_or_create(
+                        organization=org,
+                        email=pm.email,
+                        defaults={'type': pm.type},
+                    )
+                    om.teams.add(team)
+
+
     def backwards(self, orm):
         pass
 
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 6f39df5f1b..77344195aa 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -565,9 +565,6 @@
 
     });
 
-    app.AddTeamMemberPage = BasePage.extend({
-    });
-
     app.AccessGroupMembersPage = BasePage.extend({
         initialize: function(){
             BasePage.prototype.initialize.apply(this, arguments);
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 3d00722c0c..a9f3f759c6 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -16,7 +16,7 @@ from sentry.tasks.base import instrumented_task, retry
 @retry
 def delete_team(object_id, **kwargs):
     from sentry.models import (
-        Team, TeamStatus, Project, AccessGroup, PendingTeamMember, TeamMember,
+        Team, TeamStatus, Project, AccessGroup,
     )
 
     try:
@@ -36,9 +36,7 @@ def delete_team(object_id, **kwargs):
         delete_team.delay(object_id=object_id)
         return
 
-    model_list = (
-        AccessGroup, PendingTeamMember, TeamMember,
-    )
+    model_list = (AccessGroup,)
 
     has_more = delete_objects(model_list, relation={'team': t}, logger=logger)
     if has_more:
diff --git a/src/sentry/templates/sentry/bases/team.html b/src/sentry/templates/sentry/bases/team.html
index d64df155f7..b16d48d603 100644
--- a/src/sentry/templates/sentry/bases/team.html
+++ b/src/sentry/templates/sentry/bases/team.html
@@ -13,9 +13,6 @@
             </a>
             <ul class="dropdown-menu">
                 <li><a href="{% url 'sentry-new-project' team.slug %}">{% trans "New Project" %}</a></li>
-                {% if user|can_add_team_member:team %}
-                    <li><a href="{% url 'sentry-new-team-member' team.slug %}">{% trans "New Member" %}</a></li>
-                {% endif %}
                 <li><a href="{% url 'sentry-new-access-group' team.slug %}">{% trans "New Access Group" %}</a></li>
             </ul>
         </div>
@@ -27,9 +24,6 @@
             <li{% block team_projects_nav %}{% endblock %}>
                 <a href="{% url 'sentry-manage-team-projects' team.slug %}">{% trans "Projects" %}</a>
             </li>
-            <li{% block team_members_nav %}{% endblock %}>
-                <a href="{% url 'sentry-manage-team-members' team.slug %}">{% trans "Members" %}</a>
-            </li>
             {% if team|has_access_groups %}
                 <li{% block team_accessgroups_nav %}{% endblock %}>
                     <a href="{% url 'sentry-manage-access-groups' team.slug %}">{% trans "Access Groups" %}</a>
diff --git a/src/sentry/templates/sentry/teams/members/edit.html b/src/sentry/templates/sentry/teams/members/edit.html
deleted file mode 100644
index b97debf48b..0000000000
--- a/src/sentry/templates/sentry/teams/members/edit.html
+++ /dev/null
@@ -1,41 +0,0 @@
-{% extends "sentry/teams/members/index.html" %}
-
-{% load crispy_forms_tags %}
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Edit Member" %} | {{ block.super }}{% endblock %}
-
-{% block sidebar %}
-    {{ block.super }}
-    <h6>{% trans "Access Levels" %}</h6>
-    <p>{% blocktrans %}The primary difference between access levels is team management. Any member with admin access is treated almost identical to the team owner.{% endblocktrans %}</p>
-{% endblock %}
-
-{% block inner %}
-    <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
-        <legend>{% trans "Details" %}</legend>
-
-        {% if form.errors %}
-            <div class="alert alert-error">{% trans "Please correct the errors below." %}</div>
-        {% endif %}
-
-        {{ form|as_crispy_errors }}
-
-        <div class="control-group">
-            <label>{% trans "User" %}</label>
-            <div class="controls">
-                {{ member.user.username }}
-            </div>
-        </div>
-        <br/>
-        <legend>{% trans "Access" %}</legend>
-        {% for field in form %}
-            {{ field|as_crispy_field }}
-        {% endfor %}
-        <div class="form-actions">
-            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-        </div>
-    </form>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/members/index.html b/src/sentry/templates/sentry/teams/members/index.html
deleted file mode 100644
index e0021c896c..0000000000
--- a/src/sentry/templates/sentry/teams/members/index.html
+++ /dev/null
@@ -1,95 +0,0 @@
-{% extends "sentry/bases/team.html" %}
-
-{% load i18n %}
-{% load sentry_helpers %}
-
-{% block title %}{% trans "Members" %} | {{ block.super }}{% endblock %}
-
-{% block team_members_nav %} class="active"{% endblock %}
-
-{% block inner %}
-    <table class="table table-striped">
-        <colgroup>
-            <col width="20px"/>
-            <col/>
-            <col width="100px"/>
-            <col width="100px"/>
-        </colgroup>
-        <thead>
-            <tr>
-                <th colspan="2">&nbsp;</th>
-                <th style="text-align:center;">{% trans "Access" %}</th>
-                <th style="text-align:center">{% trans "Actions" %}</th>
-            </tr>
-        </thead>
-        <tbody>
-            {% for member, user in member_list %}
-                <tr>
-                    <td>
-                        <img class="avatar" src="{% gravatar_url user.email size 20 %}">
-                    </td>
-                    {% if user == team.owner %}
-                        <td>
-                            {% if user.first_name %}{{ user.first_name }} &mdash; {% endif %}{{ user.username }}</a><br>
-                            {% if user.email != user.username %}
-                                {{ user.email }}
-                            {% endif %}
-                        </td>
-                        <td style="text-align:center;">
-                            {% trans "Owner" %}
-                        </td>
-                        <td style="text-align:center;">
-                            <em>{% trans "unavailable for owner" %}</em>
-                        </td>
-                    {% else %}
-                        <td>
-                            <a href="{% url 'sentry-edit-team-member' team.slug member.pk %}">{% if user.first_name %}{{ user.first_name }} &mdash; {% endif %}{{ user.username }}</a><br>
-                            {{ user.email }}
-                        </td>
-                        <td style="text-align:center;">
-                            {{ member.get_type_display }}
-                        </td>
-                        <td style="text-align:center;">
-                            <a href="{% url 'sentry-remove-team-member' team.slug member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
-                        </td>
-                    {% endif %}
-                    </tr>
-            {% endfor %}
-        </tbody>
-    </table>
-    {% if pending_member_list %}
-        <div class="page-header">
-            <h3>{% trans "Pending Members" %}</h3>
-        </div>
-        <table class="table table-bordered table-striped">
-            <colgroup>
-                <col/>
-                <col width="100px"/>
-                <col width="200px"/>
-            </colgroup>
-            <thead>
-                <tr>
-                    <th>{% trans "User" %}</th>
-                    <th style="text-align:center">{% trans "Access" %}</th>
-                    <th style="text-align:center">{% trans "Actions" %}</th>
-                </tr>
-            </thead>
-            <tbody>
-                {% for member, email in pending_member_list %}
-                    <tr>
-                        <td>
-                            {{ email }}
-                        </td>
-                        <td style="text-align:center;">
-                            {{ member.get_type_display }}
-                        </td>
-                        <td style="text-align:center;">
-                            <a href="{% url 'sentry-remove-pending-team-member' team.slug member.pk %}" class="btn btn-small btn-danger">{% trans "Remove" %}</a>
-                            <a href="{% url 'sentry-reinvite-pending-team-member' team.slug member.pk %}" class="btn btn-small">{% trans "Resend" %}</a>
-                        </td>
-                    </tr>
-                {% endfor %}
-            </tbody>
-        </table>
-    {% endif %}
-{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/members/new.html b/src/sentry/templates/sentry/teams/members/new.html
deleted file mode 100644
index 434709989f..0000000000
--- a/src/sentry/templates/sentry/teams/members/new.html
+++ /dev/null
@@ -1,21 +0,0 @@
-{% extends "sentry/bases/team.html" %}
-
-{% load i18n %}
-
-{% block team_members_nav %} class="active"{% endblock %}
-
-{% block title %}{% trans "New Member" %} | {{ block.super }}{% endblock %}
-
-{% block inner %}
-    {% if is_invite %}
-        <p>{% trans "Invite a member to join this team via their email address. If they do not already have an account, they will first be asked to create one." %}</p>
-        {% trans "Send Invite" as submit_label %}
-        {% include "sentry/partial/_form.html" %}
-    {% else %}
-        <p>{% trans "You may add a user by their username if they already have an account." %}</p>
-        {% include "sentry/partial/_form.html" %}
-    {% endif %}
-    <script type="text/javascript">
-    new app.AddTeamMemberPage();
-    </script>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/teams/members/remove.html b/src/sentry/templates/sentry/teams/members/remove.html
deleted file mode 100644
index aba1f20a92..0000000000
--- a/src/sentry/templates/sentry/teams/members/remove.html
+++ /dev/null
@@ -1,21 +0,0 @@
-{% extends "sentry/teams/manage.html" %}
-
-{% load i18n %}
-
-{% block title %}{% trans "Remove Member" %} | {{ block.super }}{% endblock %}
-
-{% block heading %}{% trans "Remove Member" %}{% endblock %}
-
-{% block main %}
-    <section class="body">
-        <form class="form-stacked" action="" method="post">
-            {% csrf_token %}
-            <div class="alert alert-block alert-error">
-                <p>{% trans "Are you sure you wish to revoke this user's access? <strong>This change is permanent and will revoke their API keys immediately.</strong>" %}</p>
-            </div>
-            <div class="actions">
-                <button type="submit" class="btn danger">{% trans "Confirm" %}</button> <a href="{% url 'sentry-manage-team' team.slug %}" class="btn">{% trans "Cancel" %}</a>
-            </div>
-        </form>
-    </section>
-{% endblock %}
diff --git a/src/sentry/web/frontend/create_access_group.py b/src/sentry/web/frontend/create_access_group.py
index 2d7a93304d..54e1fffdf9 100644
--- a/src/sentry/web/frontend/create_access_group.py
+++ b/src/sentry/web/frontend/create_access_group.py
@@ -6,7 +6,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import TeamMemberType, AccessGroup
+from sentry.models import OrganizationMemberType, AccessGroup
 from sentry.web.frontend.base import TeamView
 
 
@@ -22,7 +22,7 @@ class NewAccessGroupForm(forms.ModelForm):
 
 
 class CreateAccessGroupView(TeamView):
-    required_access = TeamMemberType.ADMIN
+    required_access = OrganizationMemberType.ADMIN
 
     def get_form(self, request):
         initial = {
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index b54717db24..ac6fa51ec7 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -5,7 +5,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import Project, TeamMemberType
+from sentry.models import Project, OrganizationMemberType
 from sentry.permissions import can_create_projects, Permissions
 from sentry.web.frontend.base import TeamView
 from sentry.web.frontend.generic import missing_perm
@@ -28,7 +28,7 @@ class NewProjectForm(forms.ModelForm):
 
 
 class CreateProjectView(TeamView):
-    required_access = TeamMemberType.ADMIN
+    required_access = OrganizationMemberType.ADMIN
 
     def get_form(self, request):
         return NewProjectForm(request.POST or None)
diff --git a/src/sentry/web/frontend/create_team_member.py b/src/sentry/web/frontend/create_team_member.py
deleted file mode 100644
index 771440b222..0000000000
--- a/src/sentry/web/frontend/create_team_member.py
+++ /dev/null
@@ -1,109 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.conf import settings
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import PendingTeamMember, TeamMemberType, TeamMember
-from sentry.permissions import can_add_team_member
-from sentry.web.forms.fields import UserField
-from sentry.web.frontend.base import TeamView
-
-
-class InviteTeamMemberForm(forms.ModelForm):
-    class Meta:
-        fields = ('type', 'email')
-        model = PendingTeamMember
-
-    def __init__(self, team, *args, **kwargs):
-        self.team = team
-        super(InviteTeamMemberForm, self).__init__(*args, **kwargs)
-
-    def clean_email(self):
-        value = self.cleaned_data['email']
-        if not value:
-            return None
-
-        if self.team.member_set.filter(user__email__iexact=value).exists():
-            raise forms.ValidationError(_('There is already a member with this email address'))
-
-        if self.team.pending_member_set.filter(email__iexact=value).exists():
-            raise forms.ValidationError(_('There is already a pending invite for this user'))
-
-        return value
-
-
-class NewTeamMemberForm(forms.ModelForm):
-    user = UserField()
-
-    class Meta:
-        fields = ('type', 'user')
-        model = TeamMember
-
-    def __init__(self, team, *args, **kwargs):
-        self.team = team
-        super(NewTeamMemberForm, self).__init__(*args, **kwargs)
-
-    def clean_user(self):
-        value = self.cleaned_data['user']
-        if not value:
-            return None
-
-        if self.team.member_set.filter(user=value).exists():
-            raise forms.ValidationError(_('User is already a member of this team'))
-
-        return value
-
-
-class CreateTeamMemberView(TeamView):
-    required_access = TeamMemberType.ADMIN
-
-    def get_form(self, request, team):
-        initial = {
-            'type': TeamMemberType.MEMBER,
-        }
-
-        if settings.SENTRY_ENABLE_INVITES:
-            form_cls = InviteTeamMemberForm
-        else:
-            form_cls = NewTeamMemberForm
-
-        return form_cls(team, request.POST or None, initial=initial)
-
-    def get(self, request, organization, team):
-        if not can_add_team_member(request.user, team):
-            return HttpResponseRedirect(reverse('sentry'))
-
-        form = self.get_form(request, team)
-
-        context = {
-            'form': form,
-            'is_invite': settings.SENTRY_ENABLE_INVITES,
-        }
-
-        return self.respond('sentry/teams/members/new.html', context)
-
-    def post(self, request, organization, team):
-        if not can_add_team_member(request.user, team):
-            return HttpResponseRedirect(reverse('sentry'))
-
-        form = self.get_form(request, team)
-        if form.is_valid():
-            pm = form.save(commit=False)
-            pm.team = team
-            pm.save()
-
-            messages.add_message(request, messages.SUCCESS,
-                _('The team member was added.'))
-
-            return HttpResponseRedirect(reverse('sentry-manage-team-members', args=[team.slug]))
-
-        context = {
-            'form': form,
-            'is_invite': settings.SENTRY_ENABLE_INVITES,
-        }
-
-        return self.respond('sentry/teams/members/new.html', context)
diff --git a/src/sentry/web/frontend/remove_project.py b/src/sentry/web/frontend/remove_project.py
index 3ea6b5630d..c3e5a87767 100644
--- a/src/sentry/web/frontend/remove_project.py
+++ b/src/sentry/web/frontend/remove_project.py
@@ -7,7 +7,7 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import STATUS_HIDDEN
-from sentry.models import TeamMemberType
+from sentry.models import OrganizationMemberType
 from sentry.permissions import can_remove_project
 from sentry.tasks.deletion import delete_project
 from sentry.web.frontend.base import ProjectView
@@ -18,7 +18,7 @@ class RemoveProjectForm(forms.Form):
 
 
 class RemoveProjectView(ProjectView):
-    required_access = TeamMemberType.ADMIN
+    required_access = OrganizationMemberType.ADMIN
 
     def get_form(self, request):
         return RemoveProjectForm(request.POST or None)
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 39b19eaebf..6cad38d4a4 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -6,7 +6,7 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import TeamMemberType, TeamStatus
+from sentry.models import OrganizationMemberType, TeamStatus
 from sentry.permissions import can_remove_team
 from sentry.tasks.deletion import delete_team
 from sentry.web.frontend.base import TeamView
@@ -17,7 +17,7 @@ class RemoveTeamForm(forms.Form):
 
 
 class RemoveTeamView(TeamView):
-    required_access = TeamMemberType.ADMIN
+    required_access = OrganizationMemberType.ADMIN
 
     def get_form(self, request):
         return RemoveTeamForm(request.POST or None)
diff --git a/src/sentry/web/frontend/team_access_groups.py b/src/sentry/web/frontend/team_access_groups.py
index 9b86b90086..3216d08b12 100644
--- a/src/sentry/web/frontend/team_access_groups.py
+++ b/src/sentry/web/frontend/team_access_groups.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
-from sentry.models import AccessGroup, TeamMemberType
+from sentry.models import AccessGroup, OrganizationMemberType
 from sentry.web.frontend.base import TeamView
 
 
 class TeamAccessGroupsView(TeamView):
-    required_access = TeamMemberType.MEMBER
+    required_access = OrganizationMemberType.MEMBER
 
     def get(self, request, organization, team):
         context = {
diff --git a/src/sentry/web/frontend/team_member_settings.py b/src/sentry/web/frontend/team_member_settings.py
deleted file mode 100644
index f388398b4e..0000000000
--- a/src/sentry/web/frontend/team_member_settings.py
+++ /dev/null
@@ -1,94 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.contrib import messages
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.models import TeamMemberType, TeamMember
-from sentry.permissions import can_edit_team_member
-from sentry.web.forms.fields import UserField
-from sentry.web.frontend.base import TeamView
-
-
-class EditTeamMemberForm(forms.ModelForm):
-    user = UserField()
-
-    class Meta:
-        fields = ('type', 'user')
-        model = TeamMember
-
-    def __init__(self, team, *args, **kwargs):
-        self.team = team
-        super(EditTeamMemberForm, self).__init__(*args, **kwargs)
-
-    def clean_user(self):
-        value = self.cleaned_data['user']
-        if not value:
-            return None
-
-        if self.team.member_set.filter(user=value).exists():
-            raise forms.ValidationError(_('User is already a member of this team'))
-
-        return value
-
-
-class TeamMemberSettingsView(TeamView):
-    required_access = TeamMemberType.ADMIN
-
-    def get_form(self, request, team):
-        initial = {
-            'type': TeamMemberType.MEMBER,
-        }
-
-        return EditTeamMemberForm(team, request.POST or None, initial=initial)
-
-    def get(self, request, organization, team, member_id):
-        try:
-            member = team.member_set.get(pk=member_id)
-        except TeamMember.DoesNotExist:
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        if member.user == team.owner:
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        if not can_edit_team_member(request.user, member):
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        form = self.get_form(request, team)
-
-        context = {
-            'member': member,
-            'form': form,
-        }
-
-        return self.respond('sentry/teams/members/edit.html', context)
-
-    def post(self, request, organization, team, member_id):
-        try:
-            member = team.member_set.get(pk=member_id)
-        except TeamMember.DoesNotExist:
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        if member.user == team.owner:
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        if not can_edit_team_member(request.user, member):
-            return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-        form = self.get_form(request, team)
-        if form.is_valid():
-            member = form.save()
-
-            messages.add_message(request, messages.SUCCESS,
-                _('Changes to your team member were saved.'))
-
-            return HttpResponseRedirect(request.path)
-
-        context = {
-            'member': member,
-            'form': form,
-        }
-
-        return self.respond('sentry/teams/members/edit.html', context)
diff --git a/src/sentry/web/frontend/team_members.py b/src/sentry/web/frontend/team_members.py
deleted file mode 100644
index d9f77167df..0000000000
--- a/src/sentry/web/frontend/team_members.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.models import TeamMemberType
-from sentry.web.frontend.base import TeamView
-
-
-class TeamMembersView(TeamView):
-    required_access = TeamMemberType.MEMBER
-
-    def get(self, request, organization, team):
-        member_list = [
-            (pm, pm.user)
-            for pm in team.member_set.select_related('user').order_by('user__username')
-        ]
-        pending_member_list = [
-            (pm, pm.email)
-            for pm in team.pending_member_set.all().order_by('email')
-        ]
-
-        context = {
-            'member_list': member_list,
-            'pending_member_list': pending_member_list,
-        }
-
-        return self.respond('sentry/teams/members/index.html', context)
diff --git a/src/sentry/web/frontend/team_projects.py b/src/sentry/web/frontend/team_projects.py
index bcc9f1d536..3954686b13 100644
--- a/src/sentry/web/frontend/team_projects.py
+++ b/src/sentry/web/frontend/team_projects.py
@@ -1,11 +1,11 @@
 from __future__ import absolute_import
 
-from sentry.models import TeamMemberType
+from sentry.models import OrganizationMemberType
 from sentry.web.frontend.base import TeamView
 
 
 class TeamProjectsView(TeamView):
-    required_access = TeamMemberType.MEMBER
+    required_access = OrganizationMemberType.MEMBER
 
     def get(self, request, organization, team):
         project_list = team.project_set.all()
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 2c501d7d43..1a759d0cb0 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -7,10 +7,9 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import RESERVED_TEAM_SLUGS
-from sentry.models import Team, TeamMember, TeamMemberType
+from sentry.models import Team, OrganizationMemberType
 from sentry.permissions import can_remove_team
 from sentry.plugins import plugins
-from sentry.web.forms.fields import UserField
 from sentry.web.frontend.base import TeamView
 
 
@@ -21,10 +20,8 @@ class EditTeamForm(forms.ModelForm):
 
 
 class EditTeamAdminForm(EditTeamForm):
-    owner = UserField(required=True)
-
     class Meta:
-        fields = ('name', 'slug', 'owner',)
+        fields = ('name', 'slug',)
         model = Team
 
     def clean_slug(self):
@@ -35,7 +32,7 @@ class EditTeamAdminForm(EditTeamForm):
 
 
 class TeamSettingsView(TeamView):
-    required_access = TeamMemberType.ADMIN
+    required_access = OrganizationMemberType.ADMIN
 
     def get_default_context(self, request, **kwargs):
         context = super(TeamSettingsView, self).get_default_context(request, **kwargs)
@@ -45,16 +42,14 @@ class TeamSettingsView(TeamView):
         return context
 
     def get_form(self, request, team):
-        can_admin_team = request.user == team.owner or request.user.is_superuser
+        can_admin_team = request.user.is_superuser
 
         if can_admin_team:
             form_cls = EditTeamAdminForm
         else:
             form_cls = EditTeamForm
 
-        return form_cls(request.POST or None, initial={
-            'owner': team.owner,
-        }, instance=team)
+        return form_cls(request.POST or None, instance=team)
 
     def get(self, request, organization, team):
         result = plugins.first('has_perm', request.user, 'edit_team', team)
@@ -75,21 +70,8 @@ class TeamSettingsView(TeamView):
             return HttpResponseRedirect(reverse('sentry'))
 
         form = self.get_form(request, team)
-        # XXX: form.is_valid() changes the foreignkey
-        original_owner = team.owner
         if form.is_valid():
-
             team = form.save()
-            if team.owner != original_owner:
-                # Update access for new membership if it's changed
-                # (e.g. member used to be USER, but is now OWNER)
-                TeamMember.objects.create_or_update(
-                    user=team.owner,
-                    team=team,
-                    defaults={
-                        'type': TeamMemberType.ADMIN,
-                    }
-                )
 
             messages.add_message(request, messages.SUCCESS,
                 _('Changes to your team were saved.'))
diff --git a/src/sentry/web/frontend/teams.py b/src/sentry/web/frontend/teams.py
index 0e153271ab..c20c3c5391 100644
--- a/src/sentry/web/frontend/teams.py
+++ b/src/sentry/web/frontend/teams.py
@@ -15,9 +15,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext as _
 
 from sentry.constants import MEMBER_OWNER
-from sentry.models import PendingTeamMember, TeamMember, AccessGroup, User
-from sentry.permissions import can_remove_team_member
-from sentry.plugins import plugins
+from sentry.models import AccessGroup, User
 from sentry.web.decorators import has_access
 from sentry.web.forms.teams import (
     EditAccessGroupForm, NewAccessGroupMemberForm,
@@ -35,75 +33,6 @@ def render_with_team_context(team, template, context, request=None):
     return render_to_response(template, context, request)
 
 
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def remove_team_member(request, team, member_id):
-    try:
-        member = team.member_set.get(pk=member_id)
-    except TeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if member.user == team.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    if not can_remove_team_member(request.user, member):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    if request.POST:
-        member.delete()
-
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    context = csrf(request)
-    context.update({
-        'page': 'members',
-        'member': member,
-        'SUBSECTION': 'members',
-    })
-
-    return render_with_team_context(team, 'sentry/teams/members/remove.html', context, request)
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def remove_pending_team_member(request, team, member_id):
-    try:
-        member = team.pending_member_set.get(pk=member_id)
-    except PendingTeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    result = plugins.first('has_perm', request.user, 'remove_team_member', member)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.delete()
-
-    messages.add_message(request, messages.SUCCESS,
-        _('The team member was removed.'))
-
-    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def reinvite_pending_team_member(request, team, member_id):
-    try:
-        member = team.pending_member_set.get(pk=member_id)
-    except PendingTeamMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-    result = plugins.first('has_perm', request.user, 'add_team_member', member)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.send_invite_email()
-
-    messages.add_message(request, messages.SUCCESS,
-        _('An email was sent to the pending team member.'))
-
-    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
-
-
 @has_access(MEMBER_OWNER)
 @csrf_protect
 def access_group_details(request, team, group_id):
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index f950c5cf3d..d85a03e123 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -45,12 +45,9 @@ from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_organization_member import CreateOrganizationMemberView
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
-from sentry.web.frontend.create_team_member import CreateTeamMemberView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.team_access_groups import TeamAccessGroupsView
-from sentry.web.frontend.team_members import TeamMembersView
-from sentry.web.frontend.team_member_settings import TeamMemberSettingsView
 from sentry.web.frontend.team_projects import TeamProjectsView
 from sentry.web.frontend.team_settings import TeamSettingsView
 
@@ -161,18 +158,6 @@ urlpatterns += patterns('',
         name='sentry-access-group-projects'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/groups/(?P<group_id>\d+)/projects/(?P<project_id>\d+)/remove/$',
         teams.remove_access_group_project, name='sentry-remove-access-group-project'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/$', TeamMembersView.as_view(),
-        name='sentry-manage-team-members'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/new/$', CreateTeamMemberView.as_view(),
-        name='sentry-new-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/edit/$', TeamMemberSettingsView.as_view(),
-        name='sentry-edit-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/remove/$', teams.remove_team_member,
-        name='sentry-remove-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/remove/$', teams.remove_pending_team_member,
-        name='sentry-remove-pending-team-member'),
-    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/reinvite/$', teams.reinvite_pending_team_member,
-        name='sentry-reinvite-pending-team-member'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/$', TeamProjectsView.as_view(),
         name='sentry-manage-team-projects'),
     url(r'^account/teams/(?P<team_slug>[\w_-]+)/projects/new/$', CreateProjectView.as_view(),
diff --git a/tests/sentry/api/endpoints/test_team_member_index.py b/tests/sentry/api/endpoints/test_team_member_index.py
deleted file mode 100644
index 9130b1960b..0000000000
--- a/tests/sentry/api/endpoints/test_team_member_index.py
+++ /dev/null
@@ -1,21 +0,0 @@
-from django.core.urlresolvers import reverse
-from sentry.models import PendingTeamMember
-from sentry.testutils import APITestCase
-
-
-class TeamMemberIndexTest(APITestCase):
-    def test_simple(self):
-        user_1 = self.create_user('foo@localhost', username='foo')
-        team = self.create_team(slug='baz', owner=user_1)
-        PendingTeamMember.objects.create(email='bar@localhost', team=team)
-
-        self.login_as(user=user_1)
-
-        url = reverse('sentry-api-0-team-member-index', kwargs={
-            'team_id': team.id,
-        })
-        response = self.client.get(url)
-        assert response.status_code == 200
-        assert len(response.data) == 2
-        assert response.data[0]['email'] == 'bar@localhost'
-        assert response.data[1]['email'] == user_1.email
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
new file mode 100644
index 0000000000..0b666fd89d
--- /dev/null
+++ b/tests/sentry/models/test_organizationmember.py
@@ -0,0 +1,32 @@
+# coding: utf-8
+
+from __future__ import absolute_import
+
+from django import mail
+
+from sentry.models import OrganizationMember
+from sentry.testutils import TestCase
+
+
+class PendingTeamMemberTest(TestCase):
+    def test_token_generation(self):
+        member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
+        with self.settings(SECRET_KEY='a'):
+            assert member.token == 'f3f2aa3e57f4b936dfd4f42c38db003e'
+
+    def test_token_generation_unicode_key(self):
+        member = OrganizationMember(id=1, organization_id=1, email='foo@example.com')
+        with self.settings(SECRET_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
+            assert member.token == 'df41d9dfd4ba25d745321e654e15b5d0'
+
+    def test_send_invite_email(self):
+        organization = self.create_organization()
+        member = OrganizationMember(id=1, organization=organization, email='foo@example.com')
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
+            member.send_invite_email()
+
+            assert len(mail.outbox) == 1
+
+            msg = mail.outbox[0]
+
+            assert msg.to == ['foo@example.com']
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index c6870910a4..d295825179 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -11,9 +11,8 @@ from exam import fixture
 
 from sentry.db.models.fields.node import NodeData
 from sentry.models import (
-    Project, ProjectKey, Group, Event, Team,
-    GroupTagValue, TagValue, PendingTeamMember,
-    LostPasswordHash
+    Project, ProjectKey, Group, Event,
+    GroupTagValue, TagValue, LostPasswordHash
 )
 from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
@@ -74,30 +73,6 @@ class ProjectKeyTest(TestCase):
         assert project.key_set.filter(user__isnull=True).exists() is True
 
 
-class PendingTeamMemberTest(TestCase):
-    def test_token_generation(self):
-        member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.settings(SECRET_KEY='a'):
-            self.assertEquals(member.token, 'f3f2aa3e57f4b936dfd4f42c38db003e')
-
-    def test_token_generation_unicode_key(self):
-        member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.settings(SECRET_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
-            self.assertEquals(member.token, 'df41d9dfd4ba25d745321e654e15b5d0')
-
-    def test_send_invite_email(self):
-        team = Team(name='test', slug='test', id=1)
-        member = PendingTeamMember(id=1, team=team, email='foo@example.com')
-        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
-            member.send_invite_email()
-
-            self.assertEquals(len(mail.outbox), 1)
-
-            msg = mail.outbox[0]
-
-            self.assertEquals(msg.to, ['foo@example.com'])
-
-
 class LostPasswordTest(TestCase):
     @fixture
     def password_hash(self):
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index f587e87f7e..d4f5aad216 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -5,7 +5,7 @@ from __future__ import absolute_import
 from django.conf import settings
 
 from sentry.models import (
-    Organization, Project, ProjectKey, Team, TeamMemberType, User
+    Organization, Project, ProjectKey, Team, User
 )
 from sentry.receivers.core import create_default_projects
 from sentry.testutils import TestCase
@@ -62,14 +62,3 @@ class CreateDefaultProjectsTest(TestCase):
 
         # ensure that we dont hit an error here
         create_default_projects(created_models=[Project])
-
-
-class CreateTeamMemberForOwner(TestCase):
-    def test_simple(self):
-        user = User.objects.create(username='foo')
-        team = Team.objects.create(name='foo', slug='foo', owner=user,
-                                   organization=self.organization)
-        assert team.member_set.filter(
-            user=user,
-            type=TeamMemberType.ADMIN,
-        ).exists()
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index a422a70836..b455c7ced3 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -7,7 +7,7 @@ import mock
 from django.core.urlresolvers import reverse
 from exam import before, fixture
 
-from sentry.models import TeamMember, AccessGroup, User
+from sentry.models import AccessGroup, OrganizationMember, User
 from sentry.testutils import TestCase
 from sentry.utils import json
 
@@ -134,9 +134,12 @@ class SearchUsersTest(TestCase):
     def login_user(self):
         self.login()
 
-    def test_finds_users_from_team_members(self):
+    def test_finds_users_from_organization_members(self):
         otheruser = User.objects.create(first_name='Bob Ross', username='bobross', email='bob@example.com')
-        TeamMember.objects.create(team=self.team, user=otheruser)
+        OrganizationMember.objects.create(
+            organization=self.team.organization,
+            user=otheruser,
+        )
 
         resp = self.client.get(self.path, {'query': 'bob'})
 
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index bf02d9711b..08a5ae319e 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -6,7 +6,7 @@ from django.core.urlresolvers import reverse
 from exam import fixture
 
 from sentry.constants import MEMBER_USER
-from sentry.models import TeamMember, User
+from sentry.models import OrganizationMember, User
 from sentry.testutils import TestCase
 
 
@@ -124,11 +124,12 @@ class PermissionBase(TestCase):
         user.set_password('member')
         user.save()
 
-        TeamMember.objects.create(
+        om = OrganizationMember.objects.create(
+            organization=self.team.organization,
             user=user,
-            team=self.team,
             type=MEMBER_USER,
         )
+        om.teams.add(self.team)
         return user
 
     @fixture
@@ -146,10 +147,6 @@ class PermissionBase(TestCase):
 
         return user
 
-    @fixture
-    def tm(self):
-        return TeamMember.objects.get(user=self.member, team=self.team)
-
     @fixture
     def organization(self):
         return self.create_organization(owner=self.owner)
@@ -274,72 +271,3 @@ class RemoveProjectTest(PermissionBase):
     def test_member_cannot_load(self):
         with self.settings(SENTRY_PROJECT=-1):
             self._assertPerm(self.path, self.template, self.member.username, False)
-
-
-class NewTeamMemberTest(PermissionBase):
-    template = 'sentry/teams/members/new.html'
-
-    @fixture
-    def path(self):
-        return reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
-
-    def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, self.admin.username)
-
-    def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, self.owner.username)
-
-    def test_anonymous_cannot_load(self):
-        self._assertPerm(self.path, self.template, None, False)
-
-    def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.nobody.username, False)
-
-    def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.member.username, False)
-
-
-class EditTeamMemberTest(PermissionBase):
-    template = 'sentry/teams/members/edit.html'
-
-    @fixture
-    def path(self):
-        return reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
-
-    def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, self.admin.username)
-
-    def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, self.owner.username)
-
-    def test_anonymous_cannot_load(self):
-        self._assertPerm(self.path, self.template, None, False)
-
-    def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.nobody.username, False)
-
-    def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.member.username, False)
-
-
-class RemoveTeamMemberTest(PermissionBase):
-    template = 'sentry/teams/members/remove.html'
-
-    @fixture
-    def path(self):
-        return reverse('sentry-remove-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
-
-    def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, self.admin.username)
-
-    def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, self.owner.username)
-
-    def test_anonymous_cannot_load(self):
-        self._assertPerm(self.path, self.template, None, False)
-
-    def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.nobody.username, False)
-
-    def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, self.member.username, False)
