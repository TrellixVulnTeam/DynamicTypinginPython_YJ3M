commit bf8c08bbee5796d15f806aa2419fe6502124f994
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Sep 13 16:16:41 2017 -0500

    ref: Remove dead code around 'record_affected_user' (#6118)

diff --git a/src/sentry/queue/routers.py b/src/sentry/queue/routers.py
index dfee0ad5ac..2319f200b3 100644
--- a/src/sentry/queue/routers.py
+++ b/src/sentry/queue/routers.py
@@ -16,8 +16,6 @@ TRIGGER_TASKS = set(
     [
         'sentry.tasks.post_process.post_process_group',
         'sentry.tasks.post_process.plugin_post_process_group',
-        'sentry.tasks.post_process.record_affected_user',
-        'sentry.tasks.post_process.record_affected_code',
         'sentry.tasks.index_event_tags',
     ]
 )
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 64ce1705f6..5673d253d7 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import, print_function
 import logging
 import six
 
-from django.db import IntegrityError, router, transaction
+from django.db import IntegrityError, transaction
 from raven.contrib.django.models import client as Raven
 
 from sentry.plugins import plugins
@@ -98,7 +98,8 @@ def record_additional_tags(event):
 
     added_tags = []
     for plugin in plugins.for_project(event.project, version=2):
-        added_tags.extend(safe_execute(plugin.get_tags, event, _with_transaction=False) or ())
+        added_tags.extend(safe_execute(
+            plugin.get_tags, event, _with_transaction=False) or ())
     if added_tags:
         Group.objects.add_tags(event.group, added_tags)
 
@@ -133,41 +134,6 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
     safe_execute(plugin.post_process, event=event, group=event.group, **kwargs)
 
 
-@instrumented_task(name='sentry.tasks.post_process.record_affected_user')
-def record_affected_user(event, **kwargs):
-    from sentry.models import EventUser, Group
-
-    Raven.tags_context({
-        'project': event.project_id,
-    })
-
-    user_data = event.data.get('sentry.interfaces.User', event.data.get('user'))
-    if not user_data:
-        logger.info('No user data found for event_id=%s', event.event_id)
-        return
-
-    euser = EventUser(
-        project_id=event.project_id,
-        ident=user_data.get('id'),
-        email=user_data.get('email'),
-        username=user_data.get('username'),
-        ip_address=user_data.get('ip_address'),
-    )
-
-    if not euser.tag_value:
-        # no ident, bail
-        logger.info('No identifying value found for user on event_id=%s', event.event_id)
-        return
-
-    try:
-        with transaction.atomic(using=router.db_for_write(EventUser)):
-            euser.save()
-    except IntegrityError:
-        pass
-
-    Group.objects.add_tags(event.group, [('sentry:user', euser.tag_value)])
-
-
 @instrumented_task(
     name='sentry.tasks.index_event_tags', default_retry_delay=60 * 5, max_retries=None
 )
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 9bef328d8b..e82f536e26 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -13,7 +13,6 @@ from sentry.tasks.post_process import index_event_tags, post_process_group
 
 
 class PostProcessGroupTest(TestCase):
-    @patch('sentry.tasks.post_process.record_affected_user', Mock())
     @patch('sentry.rules.processor.RuleProcessor')
     def test_rule_processor(self, mock_processor):
         group = self.create_group(project=self.project)
@@ -38,7 +37,6 @@ class PostProcessGroupTest(TestCase):
 
         mock_callback.assert_called_once_with(event, mock_futures)
 
-    @patch('sentry.tasks.post_process.record_affected_user', Mock())
     @patch('sentry.rules.processor.RuleProcessor')
     def test_group_refresh(self, mock_processor):
         group1 = self.create_group(project=self.project)
@@ -68,9 +66,9 @@ class PostProcessGroupTest(TestCase):
         assert event.group == group2
         assert event.group_id == group2.id
 
-    @patch('sentry.tasks.post_process.record_affected_user', Mock())
     def test_invalidates_snooze(self):
-        group = self.create_group(project=self.project, status=GroupStatus.IGNORED)
+        group = self.create_group(
+            project=self.project, status=GroupStatus.IGNORED)
         event = self.create_event(group=group)
         snooze = GroupSnooze.objects.create(
             group=group,
@@ -91,7 +89,6 @@ class PostProcessGroupTest(TestCase):
         group = Group.objects.get(id=group.id)
         assert group.status == GroupStatus.UNRESOLVED
 
-    @patch('sentry.tasks.post_process.record_affected_user', Mock())
     def test_maintains_valid_snooze(self):
         group = self.create_group(project=self.project)
         event = self.create_event(group=group)
