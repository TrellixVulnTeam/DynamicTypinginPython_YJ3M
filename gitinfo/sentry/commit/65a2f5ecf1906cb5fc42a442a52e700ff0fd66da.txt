commit 65a2f5ecf1906cb5fc42a442a52e700ff0fd66da
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 6 22:04:53 2015 -0700

    Initial pass at merging org login with basic login

diff --git a/src/sentry/static/sentry/less/sentry.less b/src/sentry/static/sentry/less/sentry.less
index 8da89e6093..b76c7fc5b4 100644
--- a/src/sentry/static/sentry/less/sentry.less
+++ b/src/sentry/static/sentry/less/sentry.less
@@ -3490,6 +3490,14 @@ pre {
 .org-login {
   text-align: center;
 
+  fieldset {
+    text-align: left;
+  }
+
+  .basic-login label {
+    display: none;
+  }
+
   h3 {
     margin: 10px 0 0;
     font-size: 26px;
diff --git a/src/sentry/templates/sentry/organization-login.html b/src/sentry/templates/sentry/organization-login.html
index 3b52d608c6..292165d461 100644
--- a/src/sentry/templates/sentry/organization-login.html
+++ b/src/sentry/templates/sentry/organization-login.html
@@ -7,6 +7,12 @@
 
 {% block title %}{% trans "Login" %} | {{ block.super }}{% endblock %}
 
+{% block account_nav %}
+    {% if CAN_REGISTER %}
+        <li><a href="{% url 'sentry-register' %}">{% trans "New Account" %}</a></li>
+    {% endif %}
+{% endblock%}
+
 {% block main %}
   <section class="body org-login">
     <form class="form-stacked" action="" method="post">
@@ -18,10 +24,27 @@
         {{ organization.name }}
       </h3>
 
-      <p>Sign in with your {{ provider_name }} account to continue.</p>
+      {% if provider_name %}
+        <p>Sign in with your {{ provider_name }} account to continue.</p>
+
+        <button type="submit" class="btn btn-default btn-login-{{ provider_key }}">
+          <span class="provider-logo {{ provider_name | lower}}"></span> Login with {{ provider_name }}
+        </button>
+      {% else %}
+        <p>Sign in with your Sentry account to continue.</p>
+
+        {{ form|as_crispy_errors }}
+
+        <div class="basic-login">
+          {% for field in form %}
+            {{ field|as_crispy_field }}
+          {% endfor %}
+        </div>
 
-      <button type="submit" class="btn btn-default btn-login-{{ provider_key }}">
-        <span class="provider-logo {{ provider_name | lower}}"></span>Login with {{ provider_name }}</button>
+        <fieldset class="form-actions">
+          <button type="submit" class="btn btn-primary">{% trans "Login" %}</button> <a class="pull-right" style="margin-top: 6px" href="{% url 'sentry-account-recover' %}">{% trans "Lose your password?" %}</a>
+        </fieldset>
+      {% endif %}
     </form>
   </section>
 {% endblock %}
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 71fd922672..4f3e3f6a6b 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -35,23 +35,11 @@ class AuthLoginView(BaseView):
 
         return auth_provider
 
-    def handle(self, request):
-        if request.user.is_authenticated():
-            return self.redirect(get_login_redirect(request))
-
-        if request.POST.get('op') == 'sso' and request.POST.get('organization'):
-            auth_provider = self.get_auth_provider(request.POST['organization'])
-            if auth_provider:
-                next_uri = reverse('sentry-auth-organization',
-                                   args=[request.POST['organization']])
-            else:
-                next_uri = request.path
-                messages.add_message(request, messages.ERROR, ERR_NO_SSO)
-
-            return HttpResponseRedirect(next_uri)
-
-        form = AuthenticationForm(request, request.POST or None,
-                                  captcha=bool(request.session.get('needs_captcha')))
+    def handle_basic_auth(self, request):
+        form = AuthenticationForm(
+            request, request.POST or None,
+            captcha=bool(request.session.get('needs_captcha')),
+        )
         if form.is_valid():
             login(request, form.get_user())
 
@@ -68,7 +56,23 @@ class AuthLoginView(BaseView):
 
         context = {
             'form': form,
-            'next': request.session.get('_next'),
             'CAN_REGISTER': features.has('auth:register') or request.session.get('can_register'),
         }
         return self.respond('sentry/login.html', context)
+
+    def handle(self, request):
+        if request.user.is_authenticated():
+            return self.redirect(get_login_redirect(request))
+
+        if request.POST.get('op') == 'sso' and request.POST.get('organization'):
+            auth_provider = self.get_auth_provider(request.POST['organization'])
+            if auth_provider:
+                next_uri = reverse('sentry-auth-organization',
+                                   args=[request.POST['organization']])
+            else:
+                next_uri = request.path
+                messages.add_message(request, messages.ERROR, ERR_NO_SSO)
+
+            return HttpResponseRedirect(next_uri)
+
+        return self.handle_basic_auth(request)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index bab2082bcd..c3d931065f 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -1,30 +1,61 @@
 from __future__ import absolute_import, print_function
 
+from django import forms
+from django.contrib.auth import login
 from django.core.urlresolvers import reverse
+from django.utils.translation import ugettext_lazy as _
 
+from sentry import features
 from sentry.auth.helper import AuthHelper
 from sentry.models import AuthProvider, Organization
+from sentry.utils.auth import get_login_redirect
+from sentry.web.forms.accounts import AuthenticationForm
 from sentry.web.frontend.base import BaseView
 
 
+class SimplifiedAuthenticationForm(AuthenticationForm):
+    username = forms.CharField(
+        label=_('Account'), max_length=128, widget=forms.TextInput(
+            attrs={'placeholder': _('username or email'),
+        }),
+    )
+    password = forms.CharField(
+        label=_('Password'), widget=forms.PasswordInput(
+            attrs={'placeholder': _('password'),
+        }),
+    )
+
+
 class AuthOrganizationLoginView(BaseView):
     auth_required = False
 
-    def handle(self, request, organization_slug):
-        try:
-            organization = Organization.objects.get(
-                slug=organization_slug
-            )
-        except Organization.DoesNotExist:
-            return self.redirect(reverse('sentry-login'))
+    def handle_basic_auth(self, request, organization):
+        form = SimplifiedAuthenticationForm(
+            request, request.POST or None,
+            captcha=bool(request.session.get('needs_captcha')),
+        )
 
-        try:
-            auth_provider = AuthProvider.objects.get(
-                organization=organization
-            )
-        except AuthProvider.DoesNotExist:
-            return self.redirect(reverse('sentry-login'))
+        if form.is_valid():
+            login(request, form.get_user())
+
+            request.session.pop('needs_captcha', None)
+
+            return self.redirect(get_login_redirect(request))
+
+        elif request.POST and not request.session.get('needs_captcha'):
+            request.session['needs_captcha'] = 1
+            form = AuthenticationForm(request, request.POST or None, captcha=True)
+            form.errors.pop('captcha', None)
+
+        context = {
+            'form': form,
+            'CAN_REGISTER': features.has('auth:register') or request.session.get('can_register'),
+            'organization': organization,
+        }
 
+        return self.respond('sentry/organization-login.html', context)
+
+    def handle_sso(self, request, organization, auth_provider):
         if request.method == 'POST':
             helper = AuthHelper(
                 request=request,
@@ -44,3 +75,24 @@ class AuthOrganizationLoginView(BaseView):
         }
 
         return self.respond('sentry/organization-login.html', context)
+
+    def handle(self, request, organization_slug):
+        try:
+            organization = Organization.objects.get(
+                slug=organization_slug
+            )
+        except Organization.DoesNotExist:
+            return self.redirect(reverse('sentry-login'))
+
+        request.session.set_test_cookie()
+
+        try:
+            auth_provider = AuthProvider.objects.get(
+                organization=organization
+            )
+        except AuthProvider.DoesNotExist:
+            auth_provider = None
+
+        if not auth_provider:
+            return self.handle_basic_auth(request, organization)
+        return self.handle_sso(request, organization, auth_provider)
