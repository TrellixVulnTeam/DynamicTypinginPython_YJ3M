commit 05c68bfefe448c5eb69452c74a431e1922db7985
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Oct 24 12:48:48 2019 -0700

    ref: Consolidate column aliases (#15236)
    
    Stores the public column aliases with the internal events and transactions
    column names all in one place.
    
    The purpose of this is to:
    - Remove duplication between the mappings in eventstore columns, SENTRY_SNUBA_MAP
    and TRANSACTIONS_SENTRY_SNUBA_MAP
    - Clearer relationship between the column mappings on the events and
    tranactions datasets
    - Make it easier for eventstore to handle translating between internal
    and external names for different datasets in future

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 59a2ceb4a6..5bd0f6f87c 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -855,18 +855,9 @@ def get_reference_event_conditions(snuba_args, event_slug):
     This is a key part of pagination in the event details modal and
     summary graph navigation.
     """
-    field_names = [get_snuba_column_name(field) for field in snuba_args.get("groupby", [])]
-    # translate the field names into enum columns
-    columns = []
-    has_tags = False
-    for field in field_names:
-        if field.startswith("tags["):
-            has_tags = True
-        else:
-            columns.append(eventstore.Columns(field))
-
-    if has_tags:
-        columns.extend([eventstore.Columns.TAGS_KEY, eventstore.Columns.TAGS_VALUE])
+    groupby = snuba_args.get("groupby", [])
+    columns = eventstore.get_columns_from_aliases(groupby)
+    field_names = [get_snuba_column_name(field) for field in groupby]
 
     # Fetch the reference event ensuring the fields in the groupby
     # clause are present.
diff --git a/src/sentry/eventstore/__init__.py b/src/sentry/eventstore/__init__.py
index b22d565b76..58637f683a 100644
--- a/src/sentry/eventstore/__init__.py
+++ b/src/sentry/eventstore/__init__.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.utils.services import LazyServiceWrapper
 
-from .base import EventStorage, Columns, Filter  # NOQA
+from .base import EventStorage, Columns, Filter, get_columns_from_aliases  # NOQA
 
 backend = LazyServiceWrapper(
     EventStorage, "sentry.eventstore.snuba.SnubaEventStorage", {}, metrics_path="eventstore"
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index b9224b9363..0313e4116e 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -1,70 +1,96 @@
 from __future__ import absolute_import
 
 from enum import Enum
+from collections import namedtuple
 
 from sentry import nodestore
 from sentry.utils.services import Service
 
+Column = namedtuple("Column", "event_name transaction_name alias")
+
 
 class Columns(Enum):
-    # TODO add all the other columns.
-    EVENT_ID = "event_id"
-    GROUP_ID = "group_id"
-    ISSUE = "issue"
-    PROJECT_ID = "project_id"
-    TIMESTAMP = "timestamp"
-    CULPRIT = "culprit"
-    LOCATION = "location"
-    MESSAGE = "message"
-    PLATFORM = "platform"
-    TITLE = "title"
-    TYPE = "type"
-    TAGS_KEY = "tags.key"
-    TAGS_VALUE = "tags.value"
-    EMAIL = "email"
-    IP_ADDRESS = "ip_address"
-    USER_ID = "user_id"
-    USERNAME = "username"
-    TRANSACTION = "transaction"
-    USER_ID = "user_id"
-    USER_EMAIL = "email"
-    USER_USERNAME = "username"
-    USER_IP = "ip_address"
-    SDK_NAME = "sdk_name"
-    SDK_VERSION = "sdk_version"
-    HTTP_METHOD = "http_method"
-    HTTP_REFERER = "http_referer"
-    HTTP_URL = "http_url"
-    OS_BUILD = "os_build"
-    OS_KERNEL_VERSION = "os_kernel_version"
-    DEVICE_NAME = "device_name"
-    DEVICE_BRAND = "device_brand"
-    DEVICE_LOCALE = "device_locale"
-    DEVICE_UUID = "device_uuid"
-    DEVICE_ARCH = "device_arch"
-    DEVICE_BATTERY_LEVEL = "device_battery_level"
-    DEVICE_ORIENTATION = "device_orientation"
-    DEVICE_SIMULATOR = "device_simulator"
-    DEVICE_ONLINE = "device_online"
-    DEVICE_CHARGING = "device_charging"
-    GEO_COUNTRY_CODE = "geo_country_code"
-    GEO_REGION = "geo_region"
-    GEO_CITY = "geo_city"
-    ERROR_TYPE = "exception_stacks.type"
-    ERROR_VALUE = "exception_stacks.value"
-    ERROR_MECHANISM = "exception_stacks.mechanism_type"
-    ERROR_HANDLED = "exception_stacks.mechanism_handled"
-    STACK_ABS_PATH = "exception_frames.abs_path"
-    STACK_FILENAME = "exception_frames.filename"
-    STACK_PACKAGE = "exception_frames.package"
-    STACK_MODULE = "exception_frames.module"
-    STACK_FUNCTION = "exception_frames.function"
-    STACK_IN_APP = "exception_frames.in_app"
-    STACK_COLNO = "exception_frames.colno"
-    STACK_LINENO = "exception_frames.lineno"
-    STACK_STACK_LEVEL = "exception_frames.stack_level"
-    CONTEXTS_KEY = "contexts.key"
-    CONTEXTS_VALUE = "contexts.value"
+    """
+    Value is a tuple of (internal Events name, internal Transaction name, external alias)
+    None means the column is not available in that dataset.
+    """
+
+    EVENT_ID = Column("event_id", "event_id", "id")
+    GROUP_ID = Column("group_id", None, "issue.id")
+    ISSUE = Column("issue", None, "issue.id")
+    PROJECT_ID = Column("project_id", "project_id", "project.id")
+    TIMESTAMP = Column("timestamp", "finish_ts", "timestamp")
+    TIME = Column("time", "bucketed_end", "time")
+    CULPRIT = Column("culprit", None, "culprit")
+    LOCATION = Column("location", None, "location")
+    MESSAGE = Column("message", "transaction_name", "message")
+    PLATFORM = Column("platform", "platform", "platform.name")
+    ENVIRONMENT = Column("environment", "environment", "environment")
+    RELEASE = Column("tags[sentry:release]", "release", "release")
+    TITLE = Column("title", "transaction_name", "title")
+    TYPE = Column("type", None, "event.type")
+    TAGS_KEY = Column("tags.key", "tags.key", "tags.key")
+    TAGS_VALUE = Column("tags.value", "tags.value", "tags.value")
+    TRANSACTION = Column("transaction", "transaction_name", "transaction")
+    USER = Column("tags[sentry:user]", "user", "user")
+    USER_ID = Column("user_id", "user_id", "user.id")
+    USER_EMAIL = Column("email", "user_email", "user.email")
+    USER_USERNAME = Column("username", "user_name", "user.username")
+    USER_IP_ADDRESS = Column("ip_address", "ip_address_v4", "user.ip")
+    SDK_NAME = Column("sdk_name", None, "sdk.name")
+    SDK_VERSION = Column("sdk_version", None, "sdk.version")
+    HTTP_METHOD = Column("http_method", None, "http.method")
+    HTTP_REFERER = Column("http_referer", None, "http.url")
+    OS_BUILD = Column("os_build", None, "os.build")
+    OS_KERNEL_VERSION = Column("os_kernel_version", None, "os.kernel_version")
+    DEVICE_NAME = Column("device_name", None, "device.name")
+    DEVICE_BRAND = Column("device_brand", None, "device.brand")
+    DEVICE_LOCALE = Column("device_locale", None, "device.locale")
+    DEVICE_UUID = Column("device_uuid", None, "device.uuid")
+    DEVICE_ARCH = Column("device_arch", None, "device.arch")
+    DEVICE_BATTERY_LEVEL = Column("device_battery_level", None, "device.battery_level")
+    DEVICE_ORIENTATION = Column("device_orientation", None, "device.orientation")
+    DEVICE_SIMULATOR = Column("device_simulator", None, "device.simulator")
+    DEVICE_ONLINE = Column("device_online", None, "device.online")
+    DEVICE_CHARGING = Column("device_charging", None, "device.charging")
+    GEO_COUNTRY_CODE = Column("geo_country_code", None, "geo.country_code")
+    GEO_REGION = Column("geo_region", None, "geo.region")
+    GEO_CITY = Column("geo_city", None, "geo.city")
+    ERROR_TYPE = Column("exception_stacks.type", None, "error.type")
+    ERROR_VALUE = Column("exception_stacks.value", None, "error.value")
+    ERROR_MECHANISM = Column("exception_stacks.mechanism_type", None, "error.mechanism")
+    ERROR_HANDLED = Column("exception_stacks.mechanism_handled", None, "error.handled")
+    STACK_ABS_PATH = Column("exception_frames.abs_path", None, "stack.abs_path")
+    STACK_FILENAME = Column("exception_frames.filename", None, "stack.filename")
+    STACK_PACKAGE = Column("exception_frames.package", None, "stack.package")
+    STACK_MODULE = Column("exception_frames.module", None, "stack.module")
+    STACK_FUNCTION = Column("exception_frames.function", None, "stack.function")
+    STACK_IN_APP = Column("exception_frames.in_app", None, "stack.in_app")
+    STACK_COLNO = Column("exception_frames.colno", None, "stack.colno")
+    STACK_LINENO = Column("exception_frames.lineno", None, "stack.lineno")
+    STACK_STACK_LEVEL = Column("exception_frames.stack_level", None, "stack.stack_level")
+    CONTEXTS_KEY = Column("contexts.key", "contexts.key", "contexts.key")
+    CONTEXTS_VALUE = Column("contexts.value", "contexts.value", "contexts.value")
+    # Transactions specific columns
+    TRANSACTION_OP = Column(None, "transaction_op", "transaction.op")
+    TRANSACTION_DURATION = Column(None, "duration", "transaction.duration")
+
+
+def get_columns_from_aliases(aliases):
+    """
+    Resolve a list of aliases to the columns
+    """
+    columns = set()
+    for alias in aliases:
+        for _i, col in enumerate(Columns):
+            if col.value.alias == alias:
+                columns.add(col)
+                continue
+            # Handle as a tag if its not on the list
+            columns.add(Columns.TAGS_KEY)
+            columns.add(Columns.TAGS_VALUE)
+
+    return list(columns)
 
 
 class Filter(object):
@@ -147,10 +173,10 @@ class EventStorage(Service):
         Columns.TAGS_KEY,
         Columns.TAGS_VALUE,
         # Required to provide snuba-only 'user' interface
-        Columns.EMAIL,
-        Columns.IP_ADDRESS,
+        Columns.USER_EMAIL,
+        Columns.USER_IP_ADDRESS,
         Columns.USER_ID,
-        Columns.USERNAME,
+        Columns.USER_USERNAME,
     ]
 
     def get_events(self, filter, additional_columns, orderby, limit, offset, referrer):
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 2c9ca01dab..868aa26f7f 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -147,7 +147,7 @@ class SnubaEventStorage(EventStorage):
         if additional_columns:
             columns = set(columns + additional_columns)
 
-        return [col.value for col in columns]
+        return [col.value.event_name for col in columns]
 
     def __get_event_id_from_filter(self, filter=None, orderby=None):
         columns = ["event_id", "project_id"]
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index f79d0da2c6..a6c30e433f 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -29,6 +29,7 @@ from sentry.models import (
 from sentry.net.http import connection_from_url
 from sentry.utils import metrics, json
 from sentry.utils.dates import to_timestamp
+from sentry.eventstore.base import Columns
 
 # TODO remove this when Snuba accepts more than 500 issues
 MAX_ISSUES = 500
@@ -48,108 +49,12 @@ OVERRIDE_OPTIONS = {
 # a tag with the same name. Existing search patterns expect to refer to the tag,
 # so we support <real_column_name>.name to refer to the top level column name.
 SENTRY_SNUBA_MAP = {
-    # general
-    "id": "event_id",
-    "project.id": "project_id",
-    # We support platform as both tag and a real column.
-    "platform.name": "platform",
-    "message": "message",
-    "title": "title",
-    "location": "location",
-    "culprit": "culprit",
-    "issue.id": "issue",
-    "timestamp": "timestamp",
-    "time": "time",
-    "transaction": "transaction",
-    # We support type as both tag and a real column
-    "event.type": "type",
-    # user
-    "user.id": "user_id",
-    "user.email": "email",
-    "user.username": "username",
-    "user.ip": "ip_address",
-    # sdk
-    "sdk.name": "sdk_name",
-    "sdk.version": "sdk_version",
-    # http
-    "http.method": "http_method",
-    "http.url": "http_referer",
-    # os
-    "os.build": "os_build",
-    "os.kernel_version": "os_kernel_version",
-    # device
-    "device.name": "device_name",
-    "device.brand": "device_brand",
-    "device.locale": "device_locale",
-    "device.uuid": "device_uuid",
-    "device.model_id": "device_model_id",
-    "device.arch": "device_arch",
-    "device.battery_level": "device_battery_level",
-    "device.orientation": "device_orientation",
-    "device.simulator": "device_simulator",
-    "device.online": "device_online",
-    "device.charging": "device_charging",
-    # geo
-    "geo.country_code": "geo_country_code",
-    "geo.region": "geo_region",
-    "geo.city": "geo_city",
-    # error, stack
-    "error.type": "exception_stacks.type",
-    "error.value": "exception_stacks.value",
-    "error.mechanism": "exception_stacks.mechanism_type",
-    "error.handled": "exception_stacks.mechanism_handled",
-    "stack.abs_path": "exception_frames.abs_path",
-    "stack.filename": "exception_frames.filename",
-    "stack.package": "exception_frames.package",
-    "stack.module": "exception_frames.module",
-    "stack.function": "exception_frames.function",
-    "stack.in_app": "exception_frames.in_app",
-    "stack.colno": "exception_frames.colno",
-    "stack.lineno": "exception_frames.lineno",
-    "stack.stack_level": "exception_frames.stack_level",
-    # tags, contexts
-    "tags.key": "tags.key",
-    "tags.value": "tags.value",
-    "tags_key": "tags_key",
-    "tags_value": "tags_value",
-    "contexts.key": "contexts.key",
-    "contexts.value": "contexts.value",
-    # misc
-    "environment": "environment",
-    "release": "tags[sentry:release]",
-    "user": "tags[sentry:user]",
+    col.value.alias: col.value.event_name for col in Columns if col.value.event_name is not None
 }
-
 TRANSACTIONS_SENTRY_SNUBA_MAP = {
-    # general
-    "id": "event_id",
-    "project.id": "project_id",
-    "title": "transaction_name",
-    "message": "transaction_name",
-    "transaction": "transaction_name",
-    "transaction.op": "transaction_op",
-    "platform.name": "platform",
-    "environment": "environment",
-    "release": "release",
-    # Time related properties
-    "transaction.duration": "duration",
-    # User
-    "user": "user",
-    "user.id": "user_id",
-    "user.email": "user_email",
-    "user.username": "user_name",
-    "user.ip": "ip_address_v4",
-    # tags, contexts
-    "tags.key": "tags.key",
-    "tags.value": "tags.value",
-    "tags_key": "tags_key",
-    "tags_value": "tags_value",
-    "contexts.key": "contexts.key",
-    "contexts.value": "contexts.value",
-    # Shim to make queries that can act on
-    # events or transactions work more smoothly.
-    "timestamp": "finish_ts",
-    "time": "bucketed_end",
+    col.value.alias: col.value.transaction_name
+    for col in Columns
+    if col.value.transaction_name is not None
 }
 
 
