commit d8dda2d15451b67a70426e614918923c1e2e621f
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Sep 4 09:51:32 2018 -0700

    feat(integrations): Bitbucket issue and repo search (#9476)
    
    * feat(integrations): Bitbucket issue and repo search

diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index 496bb3e626..1e94222a66 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -115,6 +115,14 @@ class BitbucketApiClient(ApiClient):
             username=username,
         ))
 
+    def search_repositories(self, username, query):
+        return self.get(
+            path=BitbucketAPIPath.repositories.format(
+                username=username,
+            ),
+            params={'q': query},
+        )
+
     def create_hook(self, repo, data):
         return self.post(
             path=BitbucketAPIPath.repository_hooks.format(
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index 09895565b8..57791a3b1f 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -41,6 +41,8 @@ scopes = (
 
 
 class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixin):
+    repo_search = True
+
     def get_client(self):
         return BitbucketApiClient(
             self.model.metadata['base_url'],
@@ -53,16 +55,19 @@ class BitbucketIntegration(Integration, BitbucketIssueBasicMixin, RepositoryMixi
         return self.model.name
 
     def get_repositories(self, query=None):
-        repos = self.get_client().get_repos(self.username)['values']
-        data = []
-        for repo in repos:
-            data.append(
-                {
-                    'identifier': repo['full_name'],
-                    'name': repo['full_name'],
-                }
-            )
-        return data
+        if not query:
+            resp = self.get_client().get_repos(self.username)
+            return [{
+                'identifier': repo['full_name'],
+                'name': repo['full_name'],
+            } for repo in resp.get('values', [])]
+
+        full_query = (u'name~"%s"' % (query)).encode('utf-8')
+        resp = self.get_client().search_repositories(self.username, full_query)
+        return [{
+            'identifier': i['full_name'],
+            'name': i['full_name']
+        } for i in resp.get('values', [])]
 
     def get_unmigratable_repositories(self):
         repos = Repository.objects.filter(
diff --git a/src/sentry/integrations/bitbucket/issues.py b/src/sentry/integrations/bitbucket/issues.py
index 2321223937..776ccc4693 100644
--- a/src/sentry/integrations/bitbucket/issues.py
+++ b/src/sentry/integrations/bitbucket/issues.py
@@ -1,4 +1,5 @@
 from __future__ import absolute_import
+from django.core.urlresolvers import reverse
 from sentry.integrations.issues import IssueBasicMixin
 from sentry.integrations.exceptions import ApiError, IntegrationError
 
@@ -36,19 +37,25 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
 
         params = kwargs.get('params', {})
         default_repo = params.get('repo', repo_choices[0][0])
-        issues = self.get_repo_issues(default_repo)
-        return repo_choices, default_repo, issues
+        return repo_choices, default_repo
 
     def get_create_issue_config(self, group, **kwargs):
         fields = super(BitbucketIssueBasicMixin, self).get_create_issue_config(group, **kwargs)
-        repo_choices, default_repo, issues = self.get_repo_choices(**kwargs)
+        repo_choices, default_repo = self.get_repo_choices(**kwargs)
+
+        org = group.organization
+        autocomplete_url = reverse(
+            'sentry-extensions-bitbucket-search', args=[org.slug, self.model.id],
+        )
+
         return [
             {
                 'name': 'repo',
                 'label': 'Bitbucket Repository',
                 'type': 'select',
                 'default': default_repo,
-                'choices': repo_choices,
+                'defaultLabel': default_repo,
+                'url': autocomplete_url,
                 'required': True,
             }
         ] + fields + [
@@ -68,14 +75,20 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
         ]
 
     def get_link_issue_config(self, group, **kwargs):
-        repo_choices, default_repo, issues = self.get_repo_choices(**kwargs)
+        repo_choices, default_repo = self.get_repo_choices(**kwargs)
+
+        org = group.organization
+        autocomplete_url = reverse(
+            'sentry-extensions-bitbucket-search', args=[org.slug, self.model.id],
+        )
 
         return [{
             'name': 'repo',
             'label': 'Bitbucket Repository',
             'type': 'select',
             'default': default_repo,
-            'choices': repo_choices,
+            'defaultLabel': default_repo,
+            'url': autocomplete_url,
             'required': True,
             'updatesForm': True,
         }, {
@@ -83,7 +96,7 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
             'label': 'Issue',
             'default': '',
             'type': 'select',
-            'choices': issues,
+            'url': autocomplete_url,
 
         }, {
             'name': 'comment',
@@ -121,18 +134,6 @@ class BitbucketIssueBasicMixin(IssueBasicMixin):
             return ERR_404
         return super(BitbucketIssueBasicMixin, self).message_from_error(exc)
 
-    def get_repo_issues(self, repo):
-        client = self.get_client()
-
-        try:
-            response = client.get_issues(repo)['values']
-        except Exception as e:
-            self.raise_error(e)
-
-        issues = tuple((i['id'], '#{} {}'.format(i['id'], i['title'])) for i in response)
-
-        return issues
-
     def make_external_key(self, data):
         return '{}#{}'.format(data['repo'], data['key'])
 
diff --git a/src/sentry/integrations/bitbucket/search.py b/src/sentry/integrations/bitbucket/search.py
new file mode 100644
index 0000000000..06c3df92a8
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/search.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
+from sentry.models import Integration
+
+
+class BitbucketSearchEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationPermission, )
+
+    def get(self, request, organization, integration_id):
+        try:
+            integration = Integration.objects.get(
+                organizations=organization,
+                id=integration_id,
+                provider='bitbucket',
+            )
+        except Integration.DoesNotExist:
+            return Response(status=404)
+
+        field = request.GET.get('field')
+        query = request.GET.get('query')
+        if field is None:
+            return Response({'detail': 'field is a required parameter'}, status=400)
+        if not query:
+            return Response({'detail': 'query is a required parameter'}, status=400)
+
+        installation = integration.get_installation(organization.id)
+
+        if field == 'externalIssue':
+            repo = request.GET.get('repo')
+            if not repo:
+                return Response({'detail': 'repo is a required parameter'}, status=400)
+
+            full_query = (u'title~"%s"' % (query)).encode('utf-8')
+            resp = installation.get_client().search_issues(repo, full_query)
+            return Response([{
+                'label': '#{} {}'.format(i['id'], i['title']),
+                'value': i['id']
+            } for i in resp.get('values', [])])
+
+        if field == 'repo':
+            full_query = (u'name~"%s"' % (query)).encode('utf-8')
+            resp = installation.get_client().search_repositories(installation.username, full_query)
+            return Response([{
+                'label': i['full_name'],
+                'value': i['full_name']
+            } for i in resp.get('values', [])])
+
+        return Response(status=400)
diff --git a/src/sentry/integrations/bitbucket/urls.py b/src/sentry/integrations/bitbucket/urls.py
index a103a2946e..ea6d8a2ad9 100644
--- a/src/sentry/integrations/bitbucket/urls.py
+++ b/src/sentry/integrations/bitbucket/urls.py
@@ -5,10 +5,15 @@ from django.conf.urls import patterns, url
 from .descriptor import BitbucketDescriptorEndpoint
 from .installed import BitbucketInstalledEndpoint
 from .webhook import BitbucketWebhookEndpoint
+from .search import BitbucketSearchEndpoint
 urlpatterns = patterns(
     '',
     url(r'^descriptor/$', BitbucketDescriptorEndpoint.as_view()),
     url(r'^installed/$', BitbucketInstalledEndpoint.as_view()),
     url(r'^organizations/(?P<organization_id>[^\/]+)/webhook/$',
         BitbucketWebhookEndpoint.as_view()),
+    url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>\d+)/$',
+        BitbucketSearchEndpoint.as_view(),
+        name='sentry-extensions-bitbucket-search'
+        ),
 )
diff --git a/tests/sentry/integrations/bitbucket/test_search.py b/tests/sentry/integrations/bitbucket/test_search.py
new file mode 100644
index 0000000000..a143a51f8f
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/test_search.py
@@ -0,0 +1,80 @@
+from __future__ import absolute_import
+
+import json
+
+from mock import patch
+
+from django.core.urlresolvers import reverse
+
+from sentry.integrations.bitbucket.client import BitbucketApiClient
+from sentry.models import Integration
+from sentry.testutils import APITestCase
+
+SAMPLE_ISSUE_SEARCH_RESPONSE = """
+{
+    "values": [
+        {
+            "title": "Sample issue, fix meh",
+            "id": 5
+        }
+    ]
+}
+"""
+
+SAMPLE_REPO_SEARCH_RESPONSE = """
+{
+    "values": [
+        {
+            "name": "Apples",
+            "full_name": "meredithanya/apples"
+        }
+    ]
+}
+"""
+
+
+class BitbucketSearchEndpointTest(APITestCase):
+    def setUp(self):
+        self.base_url = 'https://api.bitbucket.org'
+        self.shared_secret = '234567890'
+        self.subject = 'connect:1234567'
+        self.integration = Integration.objects.create(
+            provider='bitbucket',
+            external_id=self.subject,
+            name='Sample BB',
+            metadata={
+                'base_url': self.base_url,
+                'shared_secret': self.shared_secret,
+                'subject': self.subject,
+            }
+        )
+
+    @patch.object(BitbucketApiClient, 'search_issues',
+                  return_value=json.loads(SAMPLE_ISSUE_SEARCH_RESPONSE.strip()))
+    def test_search_issues(self, mock_search_issues):
+        org = self.organization
+        self.login_as(self.user)
+
+        self.integration.add_organization(org.id)
+
+        path = reverse('sentry-extensions-bitbucket-search', args=[org.slug, self.integration.id])
+        resp = self.client.get('%s?field=externalIssue&repo=meredithanya&query=issue' % (path,))
+        assert resp.data == [
+            {'label': '#5 Sample issue, fix meh', 'value': 5}
+        ]
+        mock_search_issues.assert_called_with('meredithanya', 'title~"issue"')
+
+    @patch.object(BitbucketApiClient, 'search_repositories',
+                  return_value=json.loads(SAMPLE_REPO_SEARCH_RESPONSE.strip()))
+    def test_search_repositories(self, mock_search_repositories):
+        org = self.organization
+        self.login_as(self.user)
+
+        self.integration.add_organization(org.id)
+
+        path = reverse('sentry-extensions-bitbucket-search', args=[org.slug, self.integration.id])
+        resp = self.client.get('%s?field=repo&query=apple' % (path,))
+        assert resp.data == [
+            {'label': 'meredithanya/apples', 'value': 'meredithanya/apples'}
+        ]
+        mock_search_repositories.assert_called_with('Sample BB', 'name~"apple"')
