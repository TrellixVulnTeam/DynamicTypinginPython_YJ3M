commit fffef95d217592b80ee0f4a7909450039a8e1d90
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jun 19 15:08:08 2018 -0700

    fix(ui): Refetch plugins when project changes (#8701)
    
    This happens in settings (e.g. Release Tracking), when you switch projects using the breadcrumb, the current view gets updated with new project slug, but `withPlugins` HoC only fetches plugins on `DidMount` and not `DidUpdate`
    
    Fixes APP-339

diff --git a/src/sentry/static/sentry/app/utils/withPlugins.jsx b/src/sentry/static/sentry/app/utils/withPlugins.jsx
index 43a8532e71..5e7acd3841 100644
--- a/src/sentry/static/sentry/app/utils/withPlugins.jsx
+++ b/src/sentry/static/sentry/app/utils/withPlugins.jsx
@@ -1,7 +1,8 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
+import {defined} from 'app/utils';
 import {fetchPlugins} from 'app/actionCreators/plugins';
 import PluginsStore from 'app/stores/pluginsStore';
 import ProjectState from 'app/mixins/projectState';
@@ -19,7 +20,37 @@ const withPlugins = WrappedComponent =>
       project: SentryTypes.Project,
     },
     mixins: [ProjectState, Reflux.connect(PluginsStore, 'store')],
+
     componentDidMount() {
+      this.fetchPlugins();
+    },
+
+    componentDidUpdate(prevProps, prevState, prevContext) {
+      let organization = this.props.organization || this.getOrganization();
+      let project = this.props.project || this.getProject();
+
+      // Only fetch plugins when a org slug or project slug has changed
+      let prevOrg = prevProps.organization || (prevContext && prevContext.organization);
+      let prevProject = prevProps.project || (prevContext && prevContext.project);
+
+      // If previous org/project is undefined then it means:
+      // the HoC has mounted, `fetchPlugins` has been called (via cDM), and
+      // store was updated. We don't need to fetchPlugins again (or it will cause an infinite loop)
+      //
+      // This is for the unusual case where component is mounted and receives a new org/project prop
+      // e.g. when switching projects via breadcrumbs in settings.
+      if (!defined(prevProject) || !defined(prevOrg)) return;
+
+      let isOrgSame = prevOrg.slug === organization.slug;
+      let isProjectSame = prevProject.slug === project.slug;
+
+      // Don't do anything if org and project are the same
+      if (isOrgSame && isProjectSame) return;
+
+      this.fetchPlugins();
+    },
+
+    fetchPlugins() {
       let organization = this.props.organization || this.getOrganization();
       let project = this.props.project || this.getProject();
 
@@ -27,6 +58,7 @@ const withPlugins = WrappedComponent =>
 
       fetchPlugins({projectId: project.slug, orgId: organization.slug});
     },
+
     render() {
       return <WrappedComponent {...this.props} plugins={this.state.store} />;
     },
diff --git a/tests/js/spec/views/projectReleaseTracking.spec.jsx b/tests/js/spec/views/projectReleaseTracking.spec.jsx
index 93a37c99c7..4a27a4a4da 100644
--- a/tests/js/spec/views/projectReleaseTracking.spec.jsx
+++ b/tests/js/spec/views/projectReleaseTracking.spec.jsx
@@ -1,7 +1,14 @@
 import React from 'react';
-
 import {mount} from 'enzyme';
-import {ProjectReleaseTracking} from 'app/views/settings/project/projectReleaseTracking';
+
+import ProjectReleaseTrackingContainer, {
+  ProjectReleaseTracking,
+} from 'app/views/settings/project/projectReleaseTracking';
+import {fetchPlugins} from 'app/actionCreators/plugins';
+
+jest.mock('app/actionCreators/plugins', () => ({
+  fetchPlugins: jest.fn(),
+}));
 
 describe('ProjectReleaseTracking', function() {
   let org = TestStubs.Organization();
@@ -76,4 +83,35 @@ describe('ProjectReleaseTracking', function() {
       done();
     }, 1);
   });
+
+  it('fetches new plugins when project changes', function() {
+    let wrapper = mount(
+      <ProjectReleaseTrackingContainer
+        organization={org}
+        project={project}
+        params={{orgId: org.slug, projectId: project.slug}}
+      />,
+      TestStubs.routerContext()
+    );
+    expect(fetchPlugins).toHaveBeenCalled();
+
+    fetchPlugins.mockClear();
+
+    // For example, this happens when we switch to a new project using settings breadcrumb
+    wrapper.setProps({...wrapper.props(), project: {...project, slug: 'new-project'}});
+    wrapper.update();
+
+    expect(fetchPlugins).toHaveBeenCalledWith(
+      expect.objectContaining({
+        projectId: 'new-project',
+      })
+    );
+
+    fetchPlugins.mockClear();
+
+    // Does not call fetchPlugins if slug is the same
+    wrapper.setProps({...wrapper.props(), project: {...project, slug: 'new-project'}});
+    wrapper.update();
+    expect(fetchPlugins).not.toHaveBeenCalled();
+  });
 });
