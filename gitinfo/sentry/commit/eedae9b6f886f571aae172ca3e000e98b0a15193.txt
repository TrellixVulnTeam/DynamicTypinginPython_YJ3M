commit eedae9b6f886f571aae172ca3e000e98b0a15193
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu May 19 15:16:07 2016 +0200

    Added basic unsubscribe link support.

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index c2f96546bd..486a11e536 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -30,6 +30,7 @@ from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.cache import cache
 from sentry.utils.email import MessageBuilder, group_id_to_email
 from sentry.utils.http import absolute_uri
+from sentry.utils.linksign import generate_signed_link
 
 NOTSET = object()
 
@@ -55,7 +56,8 @@ class MailPlugin(NotificationPlugin):
 
     def _build_message(self, project, subject, template=None, html_template=None, body=None,
                    reference=None, reply_reference=None, headers=None, context=None, send_to=None):
-        send_to = send_to or self.get_send_to(project)
+        if send_to is None:
+            send_to = self.get_send_to(project)
         if not send_to:
             logger.debug('Skipping message rendering, no users to send to.')
             return
@@ -178,15 +180,21 @@ class MailPlugin(NotificationPlugin):
             'X-Sentry-Reply-To': group_id_to_email(group.id),
         }
 
-        self._send_mail(
-            subject=subject,
-            template=template,
-            html_template=html_template,
-            project=project,
-            reference=group,
-            headers=headers,
-            context=context,
-        )
+        for user_id in self.get_send_to(project):
+            context['unsubscribe_link'] = generate_signed_link(user_id,
+                'sentry-account-email-unsubscribe-project', kwargs={
+                    'project_id': project.id,
+                })
+            self._send_mail(
+                subject=subject,
+                template=template,
+                html_template=html_template,
+                project=project,
+                reference=group,
+                headers=headers,
+                context=context,
+                send_to=[user_id],
+            )
 
     def notify_digest(self, project, digest):
         start, end, counts = get_digest_metadata(digest)
diff --git a/src/sentry/templates/sentry/account/email_unsubscribe_project.html b/src/sentry/templates/sentry/account/email_unsubscribe_project.html
new file mode 100644
index 0000000000..acb9529c4c
--- /dev/null
+++ b/src/sentry/templates/sentry/account/email_unsubscribe_project.html
@@ -0,0 +1,26 @@
+{% extends "sentry/bases/forceauth_modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Unsubscribe" %}{% endblock %}
+
+{% block main %}
+    <form action="" method="post" class="">
+        {% csrf_token %}
+
+        <p>
+          {% trans "You are about to unsubscribe from project notifications for the following project:" %}
+        </p>
+        <p><strong>{{ project.organization.name }} / {{ project.name }}</strong></p>
+        <p>
+          {% trans "You can subscribe to it again by going to your account settings." %}
+        </p>
+
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Unsubscribe" %}</button>
+            <button type="submit" name="cancel" class="btn btn-default">{% trans "Cancel" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/forceauth_modal.html b/src/sentry/templates/sentry/bases/forceauth_modal.html
new file mode 100644
index 0000000000..e5f107c692
--- /dev/null
+++ b/src/sentry/templates/sentry/bases/forceauth_modal.html
@@ -0,0 +1,13 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block wrapperclass %}{{ block.super }} narrow hide-sidebar{% endblock %}
+{% block org_selector %}{% endblock %}
+{% block account_nav %}{% endblock %}
+
+{% block content %}
+  <p><strong>Account</strong>: {{ request.user.get_display_name }}</p>
+  <hr>
+  {% block main %}{% endblock %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/error.html b/src/sentry/templates/sentry/emails/error.html
index 520aedd17f..df9a5aee05 100644
--- a/src/sentry/templates/sentry/emails/error.html
+++ b/src/sentry/templates/sentry/emails/error.html
@@ -70,6 +70,9 @@
             {% endfor %}
         </p>
     {% endif %}
+    <p>
+      <a href="{{ unsubscribe_link }}">Click to unsubscribe</a>
+    </p>
 
 
     {# support for gmail actions #}
diff --git a/src/sentry/templates/sentry/emails/error.txt b/src/sentry/templates/sentry/emails/error.txt
index 18e695f0fd..f4f337ea8c 100644
--- a/src/sentry/templates/sentry/emails/error.txt
+++ b/src/sentry/templates/sentry/emails/error.txt
@@ -30,5 +30,7 @@ Tags
 
 {% endfor %}
 {% endif %}{% endif %}
+
+Unsubscribe: {{ unsubscribe_link }}
 {% endautoescape %}
 {% endspaceless %}
diff --git a/src/sentry/utils/linksign.py b/src/sentry/utils/linksign.py
index 8f0ed33dc2..fc49e05971 100644
--- a/src/sentry/utils/linksign.py
+++ b/src/sentry/utils/linksign.py
@@ -3,7 +3,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.models import User
 from sentry.utils.http import absolute_uri
-from sentry.utils.numbers import base36_encode
+from sentry.utils.numbers import base36_encode, base32_decode
 
 
 def get_signer():
@@ -14,18 +14,23 @@ def generate_signed_link(user, viewname, args=None, kwargs=None):
     """This returns an absolute URL where the given user is signed in for
     the given viewname with args and kwargs.  This returns a redirect link
     that if followed sends the user to another URL which carries another
-    signature that is valid for that URL only.
+    signature that is valid for that URL only.  The user can also be a user
+    ID.
     """
-    if not user.is_authenticated():
-        raise RuntimeError('Need an authenticated user to sign a link.')
+    if hasattr(user, 'is_authenticated'):
+        if not user.is_authenticated():
+            raise RuntimeError('Need an authenticated user to sign a link.')
+        user_id = user.id
+    else:
+        user_id = user
 
     path = reverse(viewname, args=args, kwargs=kwargs)
-    item = '%s|%s' % (path, user.id)
+    item = '%s|%s' % (path, user_id)
     signature = ':'.join(get_signer().sign(item).rsplit(':', 2)[1:])
 
     return '%s?_=%s:%s' % (
         absolute_uri(path),
-        base36_encode(user.id),
+        base36_encode(user_id),
         signature,
     )
 
@@ -34,7 +39,7 @@ def process_signature(request, max_age=60 * 60 * 24 * 2):
     """Given a request object this validates the signature from the
     current request and returns the user.
     """
-    sig = request.GET.get('_')
+    sig = request.GET.get('_') or request.POST.get('_sentry_request_signature')
     if not sig or sig.count(':') < 2:
         return None
 
@@ -49,6 +54,6 @@ def process_signature(request, max_age=60 * 60 * 24 * 2):
         return None
 
     try:
-        return User.objects.get(pk=int(user_id))
-    except User.DoesNotExist:
+        return User.objects.get(pk=base32_decode(user_id))
+    except (ValueError, User.DoesNotExist):
         return None
diff --git a/src/sentry/web/decorators.py b/src/sentry/web/decorators.py
index 6420c73fe6..4b3ecc98e2 100644
--- a/src/sentry/web/decorators.py
+++ b/src/sentry/web/decorators.py
@@ -3,9 +3,13 @@ from __future__ import absolute_import
 from functools import wraps
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
+from django.contrib import messages
+from django.utils.translation import ugettext_lazy as _
 
 from sentry.web.helpers import render_to_response, get_login_url
 
+ERR_BAD_SIGNATURE = _('The link you followed is invalid or expired.')
+
 
 def login_required(func):
     @wraps(func)
@@ -22,10 +26,22 @@ def login_required(func):
     return wrapped
 
 
+def signed_auth_required(func):
+    @wraps(func)
+    def wrapped(request, *args, **kwargs):
+        if not request.user_from_signed_request:
+            messages.add_message(
+                request, messages.ERROR, ERR_BAD_SIGNATURE)
+            return HttpResponseRedirect(reverse('sentry'))
+        return func(request, *args, **kwargs)
+    return wrapped
+
+
 def requires_admin(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
         if not request.is_superuser():
-            return render_to_response('sentry/missing_permissions.html', {}, request, status=400)
+            return render_to_response('sentry/missing_permissions.html', {},
+                                      request, status=400)
         return func(request, *args, **kwargs)
     return login_required(wrapped)
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index dd70e5e1ad..72f50d2084 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -14,7 +14,7 @@ from django.contrib.auth import login as login_user, authenticate
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db import transaction
-from django.http import HttpResponseRedirect
+from django.http import HttpResponseRedirect, Http404
 from django.views.decorators.cache import never_cache
 from django.views.decorators.csrf import csrf_protect
 from django.utils import timezone
@@ -23,7 +23,7 @@ from sudo.decorators import sudo_required
 from sentry.models import (
     LostPasswordHash, Project, ProjectStatus, UserOption, Authenticator)
 from sentry.plugins import plugins
-from sentry.web.decorators import login_required
+from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RecoverPasswordForm, ChangePasswordRecoverForm,
@@ -256,6 +256,31 @@ def notification_settings(request):
     return render_to_response('sentry/account/notifications.html', context, request)
 
 
+@csrf_protect
+@never_cache
+@signed_auth_required
+@transaction.atomic
+def email_unsubscribe_project(request, project_id):
+    # For now we only support getting here from the signed link.
+    if not request.user_from_signed_request:
+        raise Http404()
+    try:
+        project = Project.objects.get(pk=project_id)
+    except Project.DoesNotExist:
+        raise Http404()
+
+    if request.method == 'POST':
+        if 'cancel' not in request.POST:
+            UserOption.objects.set_value(
+                request.user, project, 'mail:alert', 0)
+        return HttpResponseRedirect(reverse('sentry'))
+
+    context = csrf(request)
+    context['project'] = project
+    return render_to_response('sentry/account/email_unsubscribe_project.html',
+                              context, request)
+
+
 @csrf_protect
 @never_cache
 @login_required
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7f11f473f3..9aa269abf3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -208,6 +208,9 @@ urlpatterns += patterns(
         name='sentry-account-settings-identities'),
     url(r'^account/settings/notifications/$', accounts.notification_settings,
         name='sentry-account-settings-notifications'),
+    url(r'^account/settings/notifications/unsubscribe/(?P<project_id>\d+)/$',
+        accounts.email_unsubscribe_project,
+        name='sentry-account-email-unsubscribe-project'),
     url(r'^account/remove/$', RemoveAccountView.as_view(),
         name='sentry-remove-account'),
     url(r'^account/settings/social/', include('social_auth.urls')),
