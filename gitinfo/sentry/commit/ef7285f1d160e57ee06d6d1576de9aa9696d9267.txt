commit ef7285f1d160e57ee06d6d1576de9aa9696d9267
Author: Mark Story <mark@sentry.io>
Date:   Wed Sep 12 14:42:48 2018 -0400

    feat(environments) Remove feature switch checks for environments
    
    Remove all feature switch checks for environments. This should enable
    environments for all customers. There is still a bit of cleanup to do in
    getsentry.
    
    Refs APP-506

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index a64a035568..66c5c783d7 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -230,11 +230,10 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint, EnvironmentMixin):
             query_kwargs.update(extra_query_kwargs)
 
         try:
-            if features.has('organizations:environments', project.organization, actor=request.user):
-                query_kwargs['environment'] = self._get_environment_from_request(
-                    request,
-                    project.organization_id,
-                )
+            query_kwargs['environment'] = self._get_environment_from_request(
+                request,
+                project.organization_id,
+            )
         except Environment.DoesNotExist:
             # XXX: The 1000 magic number for `max_hits` is an abstraction leak
             # from `sentry.api.paginator.BasePaginator.get_result`.
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 4e5e84dacb..4db2e16abb 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -41,8 +41,6 @@ class ProjectHeader extends React.Component {
     let orgFeatures = new Set(org.features);
     let allEnvironmentsLabel = t('All environments');
 
-    // TODO: remove when feature is released
-    let hasEnvironmentsFeature = orgFeatures.has('environments');
     let pagesWithEnvironments = new Set([
       'stream',
       'releases',
@@ -50,8 +48,7 @@ class ProjectHeader extends React.Component {
       'events',
       'user-feedback',
     ]);
-    let pageHasEnvironments = pagesWithEnvironments.has(navSection);
-    let showEnvironmentsToggle = hasEnvironmentsFeature && pageHasEnvironments;
+    let showEnvironmentsToggle = pagesWithEnvironments.has(navSection);
 
     let activeEnvironmentTitle = activeEnvironment
       ? activeEnvironment.displayName
@@ -142,11 +139,7 @@ class ProjectHeader extends React.Component {
                   <MenuItem divider={true} />
                   <div style={{textAlign: 'center', padding: '5px 0px'}}>
                     <Button
-                      to={
-                        orgFeatures.has('new-settings')
-                          ? `/settings/${org.slug}/${project.slug}/environments/`
-                          : `/${org.slug}/${project.slug}/settings/`
-                      }
+                      to={`/settings/${org.slug}/${project.slug}/environments/`}
                       size="small"
                     >
                       {t('Manage environments')}
diff --git a/src/sentry/static/sentry/app/utils/withEnvironment.jsx b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
index ff2a2d3982..31562444f1 100644
--- a/src/sentry/static/sentry/app/utils/withEnvironment.jsx
+++ b/src/sentry/static/sentry/app/utils/withEnvironment.jsx
@@ -28,10 +28,7 @@ const withEnvironment = WrappedComponent =>
     },
 
     render() {
-      const features = new Set(
-        this.state.organization ? this.state.organization.features : []
-      );
-      const environment = features.has('environments') ? this.state.environment : null;
+      const environment = this.state.environment;
 
       return <WrappedComponent environment={environment} {...this.props} />;
     },
diff --git a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
index 4859fbb734..7ae4eaf9cf 100644
--- a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
+++ b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
@@ -25,46 +25,37 @@ const withEnvironmentInQueryString = WrappedComponent =>
       return {
         environment: latestContext.environment,
         organization: latestContext.organization,
-        hasEnvironmentsFeature: this.hasEnvironmentsFeature(latestContext.organization),
       };
     },
 
     componentWillMount() {
-      const {hasEnvironmentsFeature, environment} = this.state;
-
-      if (hasEnvironmentsFeature) {
-        const {query, pathname} = this.props.location;
-
-        const isDefaultEnvironment = environment === EnvironmentStore.getDefault();
-
-        // Update the query string to match environment if they are not in sync
-        if (environment) {
-          if (environment.name !== query.environment) {
-            if (isDefaultEnvironment) {
-              delete query.environment;
-            } else {
-              query.environment = environment.name;
-            }
-            browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
-          }
-        } else {
-          if (environment === null && !isDefaultEnvironment) {
-            query.environment = ALL_ENVIRONMENTS_KEY;
-            browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
+      const {environment} = this.state;
+      const {query, pathname} = this.props.location;
+      const isDefaultEnvironment = environment === EnvironmentStore.getDefault();
+
+      // Update the query string to match environment if they are not in sync
+      if (environment) {
+        if (environment.name !== query.environment) {
+          if (isDefaultEnvironment) {
+            delete query.environment;
+          } else {
+            query.environment = environment.name;
           }
+          browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
+        }
+      } else {
+        if (environment === null && !isDefaultEnvironment) {
+          query.environment = ALL_ENVIRONMENTS_KEY;
+          browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
         }
       }
     },
 
     onLatestContextChange({environment, organization}) {
-      // TODO(lyn): Remove this when environments feature is active
-      const hasEnvironmentsFeature = this.hasEnvironmentsFeature(organization);
-
       const environmentHasChanged = environment !== this.state.environment;
-
       const defaultEnvironment = EnvironmentStore.getDefault();
 
-      if (hasEnvironmentsFeature && environmentHasChanged) {
+      if (environmentHasChanged) {
         const {query, pathname} = this.props.location;
         if (environment === defaultEnvironment) {
           // We never show environment in the query string if it's the default one
@@ -81,19 +72,11 @@ const withEnvironmentInQueryString = WrappedComponent =>
       this.setState({
         environment,
         organization,
-        hasEnvironmentsFeature,
       });
     },
 
-    hasEnvironmentsFeature(org) {
-      const features = new Set(org ? org.features : []);
-      return features.has('environments');
-    },
-
     render() {
-      const environment = this.state.hasEnvironmentsFeature
-        ? this.state.environment
-        : null;
+      const environment = this.state.environment;
 
       return <WrappedComponent environment={environment} {...this.props} />;
     },
diff --git a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
index 1e16953cff..8360b4cf4c 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
@@ -305,15 +305,6 @@ const ReleaseOverview = createReactClass({
                       deploy.environment
                     )}`;
 
-                    // TODO(lyn): Remove when environment feature switched on
-                    if (!this.getFeatures().has('environments')) {
-                      let q = encodeURIComponent(
-                        `environment:${deploy.environment} release:${version}`
-                      );
-                      href = `/${orgId}/${projectId}/?query=${q}`;
-                    }
-                    // End remove block
-
                     return (
                       <li key={deploy.id}>
                         <a href={href} title={t('View in stream')}>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 41f3b531ba..fda4e5cdb8 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -126,8 +126,6 @@ const SearchBar = createReactClass({
   },
 
   getInitialState() {
-    const hasEnvironmentsFeature = this.getFeatures().has('environments');
-
     return {
       query:
         this.props.query !== null ? addSpace(this.props.query) : this.props.defaultQuery,
@@ -141,7 +139,6 @@ const SearchBar = createReactClass({
 
       dropdownVisible: false,
       loading: false,
-      hasEnvironmentsFeature,
     };
   },
 
@@ -212,7 +209,7 @@ const SearchBar = createReactClass({
 
     // If the environment feature is active and excludeEnvironment = true
     // then remove the environment key
-    if (this.state.hasEnvironmentsFeature && this.props.excludeEnvironment) {
+    if (this.props.excludeEnvironment) {
       return allKeys.filter(key => key !== 'environment:');
     } else {
       return allKeys;
@@ -326,11 +323,7 @@ const SearchBar = createReactClass({
       if (!tag) return undefined;
 
       // Ignore the environment tag if the feature is active and excludeEnvironment = true
-      if (
-        this.state.hasEnvironmentsFeature &&
-        this.props.excludeEnvironment &&
-        tagName === 'environment'
-      ) {
+      if (this.props.excludeEnvironment && tagName === 'environment') {
         return undefined;
       }
 
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index 39b6317a78..e832c5c4af 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -205,13 +205,9 @@ const Stream = createReactClass({
 
             newState.searchId = defaultResult.id;
 
-            if (this.getFeatures().has('environments')) {
-              newState.query = queryString.getQueryStringWithoutEnvironment(
-                defaultResult.query
-              );
-            } else {
-              newState.query = defaultResult.query;
-            }
+            newState.query = queryString.getQueryStringWithoutEnvironment(
+              defaultResult.query
+            );
             newState.isDefaultSearch = true;
           }
         }
diff --git a/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx b/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx
index 814c7a2f18..2f663424a9 100644
--- a/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx
+++ b/tests/js/spec/utils/withEnvironmentInQueryString.spec.jsx
@@ -16,9 +16,7 @@ const WrappedComponent = withEnvironmentInQueryString(BasicComponent);
 describe('withEnvironmentInQueryString', function() {
   beforeEach(function() {
     browserHistory.replace = jest.fn();
-    LatestContextStore.onSetActiveOrganization({
-      features: ['environments'],
-    });
+    LatestContextStore.onSetActiveOrganization({});
   });
 
   describe('updates environment', function() {
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 25b50acec4..5ab05b140c 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -45,7 +45,7 @@ describe('SearchBar', function() {
     sandbox = sinon.sandbox.create();
 
     options = {
-      context: {organization: {id: '123', features: ['environments']}},
+      context: {organization: {id: '123'}},
     };
 
     urlTagValuesMock = MockApiClient.addMockResponse({
