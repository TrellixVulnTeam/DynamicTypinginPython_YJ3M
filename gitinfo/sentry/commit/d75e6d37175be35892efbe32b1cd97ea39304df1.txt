commit d75e6d37175be35892efbe32b1cd97ea39304df1
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 20 11:35:18 2010 -0700

    Because truly we don't care about how many pages there are on a large-scale

diff --git a/djangodblog/admin.py b/djangodblog/admin.py
index f8ca9c70d7..6373df08dd 100644
--- a/djangodblog/admin.py
+++ b/djangodblog/admin.py
@@ -46,14 +46,22 @@ class ErrorAdminForm(forms.ModelForm):
         fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime', 'traceback')
         model = ErrorBatch
 
+class EfficientPaginator(Paginator):
+    def _get_count(self):
+        # because who really cares if theres a next page or not in the admin?
+        return 10000000000000
+    count = property(_get_count)
+
 class EfficientChangeList(ChangeList):
     def get_results(self, request):
-        paginator = Paginator(self.query_set, self.list_per_page)
+        paginator = EfficientPaginator(self.query_set, self.list_per_page)
         # Get the number of objects, with admin filters applied.
         result_count = paginator.count
-
+        
         multi_page = result_count > self.list_per_page
 
+        result_count = ''
+
         # Get the list of objects to display on this page.
         try:
             result_list = paginator.page(self.page_num+1).object_list
@@ -107,7 +115,7 @@ class ErrorAdmin(EfficientModelAdmin):
     list_display    = ('shortened_url', 'logger', 'server_name', 'datetime')
     list_display_links = ('shortened_url',)
     list_filter     = ('logger', 'class_name', 'datetime', 'server_name')
-    ordering        = ('-datetime',)
+    ordering        = ('-id',)
     search_fields   = ('url', 'class_name', 'message', 'traceback', 'server_name')
     readonly_fields = ('url', 'logger', 'server_name', 'class_name', 'level', 'message', 'datetime')
     fieldsets       = (
@@ -169,25 +177,5 @@ class ErrorAdmin(EfficientModelAdmin):
             'error_headers': mark_safe(self._header_re.search(html).group(1)),
         }
 
-    def get_results(self, request):
-        paginator = Paginator(self.query_set, self.list_per_page)
-        # Get the number of objects, with admin filters applied.
-        result_count = paginator.count
-
-        multi_page = result_count > self.list_per_page
-
-        # Get the list of objects to display on this page.
-        try:
-            result_list = paginator.page(self.page_num+1).object_list
-        except InvalidPage:
-            result_list = ()
-
-        self.full_result_count = result_count
-        self.result_count = result_count
-        self.result_list = result_list
-        self.can_show_all = False
-        self.multi_page = multi_page
-        self.paginator = paginator
-
 admin.site.register(ErrorBatch, ErrorBatchAdmin)
 admin.site.register(Error, ErrorAdmin)
