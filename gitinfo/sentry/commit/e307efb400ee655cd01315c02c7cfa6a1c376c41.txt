commit e307efb400ee655cd01315c02c7cfa6a1c376c41
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Apr 30 15:07:35 2019 -0700

    feat(incidents): Implement basic incident details view (#12981)
    
    Implement basic incident details view skeleton

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d06fe739f1..06d02ae237 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -916,6 +916,14 @@ function routes() {
               }
               component={errorHandler(LazyLoad)}
             />
+
+            <Route
+              path=":incidentId/"
+              componentPromise={() =>
+                import(/* webpackChunkName: "OrganizationIncidentDetails" */ './views/organizationIncidents/details')
+              }
+              component={errorHandler(LazyLoad)}
+            />
           </Route>
 
           <Route
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 198eaf4ced..449b7356a8 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -401,6 +401,15 @@ export const Incident = PropTypes.shape({
   status: PropTypes.string.isRequired,
   query: PropTypes.string,
   projects: PropTypes.array.isRequired,
+  eventCount: PropTypes.number.isRequired,
+  usersAffected: PropTypes.number.isRequired,
+  suspects: PropTypes.arrayOf(
+    PropTypes.shape({
+      id: PropTypes.string,
+      type: PropTypes.string,
+      likelihood: PropTypes.string,
+    })
+  ).isRequired,
 });
 
 export const GlobalSelection = PropTypes.shape({
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
new file mode 100644
index 0000000000..c90fb167af
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/activity.jsx
@@ -0,0 +1,7 @@
+import React from 'react';
+
+export default class Activity extends React.Component {
+  render() {
+    return 'TODO - Activity Stream';
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
new file mode 100644
index 0000000000..5a760e356b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/header.jsx
@@ -0,0 +1,92 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import PageHeading from 'app/components/pageHeading';
+import Link from 'app/components/links/link';
+import InlineSvg from 'app/components/inlineSvg';
+import {PageHeader} from 'app/styles/organization';
+import space from 'app/styles/space';
+
+export default class IncidentHeader extends React.Component {
+  static propTypes = {
+    params: PropTypes.object.isRequired,
+    incident: SentryTypes.Incident,
+  };
+
+  render() {
+    const {incident, params} = this.props;
+
+    return (
+      <Header>
+        <HeaderItem>
+          <PageHeading>
+            <Title>
+              <IncidentsLink to={`/organizations/${params.orgId}/incidents/`}>
+                {t('Incidents')}
+              </IncidentsLink>
+              <Chevron src="icon-chevron-right" size={space(2)} />
+              {params.incidentId}
+            </Title>
+            <div>{incident && incident.name}</div>
+          </PageHeading>
+        </HeaderItem>
+        {incident && (
+          <GroupedHeaderItems>
+            <HeaderItem>
+              <ItemTitle>{t('Event count')}</ItemTitle>
+              <ItemValue>{incident.eventCount}</ItemValue>
+            </HeaderItem>
+            <HeaderItem>
+              <ItemTitle>{t('Users affected')}</ItemTitle>
+              <ItemValue>{incident.usersAffected}</ItemValue>
+            </HeaderItem>
+          </GroupedHeaderItems>
+        )}
+      </Header>
+    );
+  }
+}
+
+const Header = styled(PageHeader)`
+  background-color: ${p => p.theme.white};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  margin-bottom: 0;
+`;
+
+const GroupedHeaderItems = styled('div')`
+  display: flex;
+  text-align: right;
+`;
+
+const HeaderItem = styled('div')`
+  padding: ${space(3)};
+`;
+
+const ItemTitle = styled('h6')`
+  font-size: ${p => p.theme.fontSizeSmall};
+  margin-bottom: ${space(1)};
+  text-transform: uppercase;
+  color: ${p => p.theme.gray2};
+  letter-spacing: 0.1px;
+  border-bottom: 1px dotted ${p => p.theme.gray2};
+`;
+
+const ItemValue = styled('span')`
+  font-size: ${p => p.theme.headerFontSize};
+`;
+
+const Title = styled('div')`
+  margin-bottom: ${space(2)};
+`;
+
+const IncidentsLink = styled(Link)`
+  color: inherit;
+`;
+
+const Chevron = styled(InlineSvg)`
+  color: ${p => p.theme.gray1};
+  margin: 0 ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/incidents.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/incidents.jsx
new file mode 100644
index 0000000000..4018d61c37
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/incidents.jsx
@@ -0,0 +1,87 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import NavTabs from 'app/components/navTabs';
+import Link from 'app/components/links/link';
+
+import {PageContent} from 'app/styles/organization';
+import theme from 'app/utils/theme';
+
+import IncidentsSuspects from './suspects';
+import Activity from './activity';
+import RelatedIncidents from './relatedIncidents';
+
+const TABS = {
+  activity: {name: t('Activity'), component: Activity},
+  related: {name: t('Related incidents'), component: RelatedIncidents},
+};
+
+export default class Incidents extends React.Component {
+  static propTypes = {
+    incident: SentryTypes.Incident,
+  };
+  constructor(props) {
+    super(props);
+    this.state = {
+      activeTab: Object.keys(TABS)[0],
+    };
+  }
+  handleToggle(tab) {
+    this.setState({activeTab: tab});
+  }
+
+  render() {
+    const {incident} = this.props;
+    const {activeTab} = this.state;
+    const ActiveComponent = TABS[activeTab].component;
+
+    return (
+      <StyledPageContent>
+        <Main>
+          <PageContent>
+            <NavTabs underlined={true}>
+              {Object.entries(TABS).map(([id, {name}]) => (
+                <li key={id} className={activeTab === id ? 'active' : ''}>
+                  <Link onClick={() => this.handleToggle(id)}>{name}</Link>
+                </li>
+              ))}
+            </NavTabs>
+            <ActiveComponent />
+          </PageContent>
+        </Main>
+        <Sidebar>
+          <PageContent>
+            <IncidentsSuspects incident={incident} />
+          </PageContent>
+        </Sidebar>
+      </StyledPageContent>
+    );
+  }
+}
+
+const Main = styled('div')`
+  width: 60%;
+  @media (max-width: ${theme.breakpoints[0]}) {
+    width: 100%;
+  }
+`;
+
+const Sidebar = styled('div')`
+  width: 40%;
+  border-left: 1px solid ${p => p.theme.borderLight};
+  background-color: ${p => p.theme.white};
+  @media (max-width: ${theme.breakpoints[0]}) {
+    width: 100%;
+    border: 0;
+  }
+`;
+
+const StyledPageContent = styled(PageContent)`
+  padding: 0;
+  flex-direction: row;
+  @media (max-width: ${theme.breakpoints[0]}) {
+    flex-direction: column;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
new file mode 100644
index 0000000000..9f8f76ced3
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/index.jsx
@@ -0,0 +1,65 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import LoadingIndicator from 'app/components/loadingIndicator';
+import LoadingError from 'app/components/loadingError';
+import {PageContent} from 'app/styles/organization';
+import withApi from 'app/utils/withApi';
+
+import IncidentHeader from './header';
+import Incidents from './incidents';
+import {fetchIncident} from '../utils';
+
+class OrganizationIncidentDetails extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    this.state = {isLoading: false, hasError: false};
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData() {
+    this.setState({isLoading: true, hasError: false});
+    const {
+      api,
+      params: {orgId, incidentId},
+    } = this.props;
+
+    fetchIncident(api, orgId, incidentId)
+      .then(incident => {
+        this.setState({incident, isLoading: false, hasError: false});
+      })
+      .catch(() => {
+        this.setState({isLoading: false, hasError: true});
+      });
+  }
+
+  render() {
+    const {incident, isLoading, hasError} = this.state;
+    return (
+      <React.Fragment>
+        <IncidentHeader params={this.props.params} incident={incident} />
+        {incident && <Incidents incident={incident} />}
+        {isLoading && (
+          <PageContent>
+            <LoadingIndicator />
+          </PageContent>
+        )}
+        {hasError && (
+          <PageContent>
+            <LoadingError />
+          </PageContent>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+export {OrganizationIncidentDetails};
+export default withApi(OrganizationIncidentDetails);
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/relatedIncidents.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/relatedIncidents.jsx
new file mode 100644
index 0000000000..5122b45848
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/relatedIncidents.jsx
@@ -0,0 +1,7 @@
+import React from 'react';
+
+export default class RelatedIncidents extends React.Component {
+  render() {
+    return 'TODO - related incidents';
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx
new file mode 100644
index 0000000000..d8050c04ce
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/details/suspects.jsx
@@ -0,0 +1,43 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import SentryTypes from 'app/sentryTypes';
+import {Panel, PanelBody, PanelItem} from 'app/components/panels';
+import space from 'app/styles/space';
+
+export default class Suspects extends React.Component {
+  static propTypes = {
+    incident: SentryTypes.Incident.isRequired,
+  };
+
+  renderEmpty() {
+    return t('No suspects found');
+  }
+
+  render() {
+    const {suspects} = this.props.incident;
+
+    return (
+      <Container>
+        <h6>{t('Suspects')}</h6>
+        {suspects.length > 0 && (
+          <Panel>
+            <PanelBody>
+              {suspects.map(suspect => (
+                <PanelItem p={1} key={suspect.id}>
+                  {suspect.type}
+                </PanelItem>
+              ))}
+            </PanelBody>
+          </Panel>
+        )}
+        {suspects.length === 0 && this.renderEmpty()}
+      </Container>
+    );
+  }
+}
+
+const Container = styled('div')`
+  margin-top: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/index.jsx
index 9a75a88c68..6c972fcbf6 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/index.jsx
@@ -5,9 +5,7 @@ import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
 import withOrganization from 'app/utils/withOrganization';
 import {t} from 'app/locale';
-import {PageContent, PageHeader} from 'app/styles/organization';
-import PageHeading from 'app/components/pageHeading';
-import BetaTag from 'app/components/betaTag';
+import {PageContent} from 'app/styles/organization';
 
 class OrganizationIncidentsContainer extends React.Component {
   static propTypes = {
@@ -15,27 +13,24 @@ class OrganizationIncidentsContainer extends React.Component {
   };
 
   renderNoAccess() {
-    return <Alert type="warning">{t("You don't have access to this feature")}</Alert>;
+    return (
+      <PageContent>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </PageContent>
+    );
   }
 
   render() {
     const {organization, children} = this.props;
 
     return (
-      <PageContent>
-        <Feature
-          features={['organizations:incidents']}
-          organization={organization}
-          renderDisabled={this.renderNoAccess}
-        >
-          <PageHeader>
-            <PageHeading withMargins>
-              {t('Incidents')} <BetaTag />
-            </PageHeading>
-          </PageHeader>
-          {children}
-        </Feature>
-      </PageContent>
+      <Feature
+        features={['organizations:incidents']}
+        organization={organization}
+        renderDisabled={this.renderNoAccess}
+      >
+        {children}
+      </Feature>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
index e3339d4fb5..36993b7619 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
@@ -1,18 +1,17 @@
 import React from 'react';
-import {withRouter} from 'react-router';
+import DocumentTitle from 'react-document-title';
 
 import {t} from 'app/locale';
-import AsyncView from 'app/views/asyncView';
+import AsyncComponent from 'app/components/asyncComponent';
 import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import Link from 'app/components/links/link';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import Pagination from 'app/components/pagination';
+import {PageContent, PageHeader} from 'app/styles/organization';
+import PageHeading from 'app/components/pageHeading';
+import BetaTag from 'app/components/betaTag';
 
-class OrganizationIncidents extends AsyncView {
-  getTitle() {
-    return `Incidents - ${this.props.params.orgId}`;
-  }
-
+class OrganizationIncidentsBody extends AsyncComponent {
   getEndpoints() {
     const {params, location} = this.props;
     return [
@@ -63,4 +62,21 @@ class OrganizationIncidents extends AsyncView {
   }
 }
 
-export default withRouter(OrganizationIncidents);
+class OrganizationIncidents extends React.Component {
+  render() {
+    return (
+      <DocumentTitle title={`Incidents - ${this.props.params.orgId} - Sentry`}>
+        <PageContent>
+          <PageHeader>
+            <PageHeading withMargins>
+              {t('Incidents')} <BetaTag />
+            </PageHeading>
+          </PageHeader>
+          <OrganizationIncidentsBody {...this.props} />
+        </PageContent>
+      </DocumentTitle>
+    );
+  }
+}
+
+export default OrganizationIncidents;
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
new file mode 100644
index 0000000000..0e020cc60d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/utils.jsx
@@ -0,0 +1,3 @@
+export function fetchIncident(api, orgId, incidentId) {
+  return api.requestPromise(`/organizations/${orgId}/incidents/${incidentId}/`);
+}
diff --git a/tests/js/spec/views/organizationIncidents/details/index.spec.jsx b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
new file mode 100644
index 0000000000..d60e27e9a6
--- /dev/null
+++ b/tests/js/spec/views/organizationIncidents/details/index.spec.jsx
@@ -0,0 +1,50 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import IncidentDetails from 'app/views/organizationIncidents/details';
+
+describe('IncidentDetails', function() {
+  const mockIncident = {
+    id: '123',
+    name: 'Too many Chrome errors',
+    status: 'resolved',
+    projects: [],
+    suspects: [],
+    eventCount: 100,
+    usersAffected: 20,
+  };
+
+  beforeAll(function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/123/',
+      body: mockIncident,
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/456/',
+      statusCode: 404,
+    });
+  });
+
+  afterAll(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('loads incident', async function() {
+    const wrapper = mount(
+      <IncidentDetails params={{orgId: 'org-slug', incidentId: mockIncident.id}} />
+    );
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
+  });
+
+  it('handles invalid incident', async function() {
+    const wrapper = mount(
+      <IncidentDetails params={{orgId: 'org-slug', incidentId: '456'}} />
+    );
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingError')).toHaveLength(1);
+  });
+});
diff --git a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
index 4ffc94ee9d..c3a9d50b6f 100644
--- a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
@@ -6,12 +6,7 @@ import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import OrganizationIncidentsList from 'app/views/organizationIncidents/list';
 
 describe('OrganizationIncidentsList', function() {
-  const {routerContext} = initializeOrg({
-    projects: [TestStubs.Project()],
-    router: {
-      params: {orgId: 'org-slug'},
-    },
-  });
+  const {routerContext} = initializeOrg();
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
@@ -23,7 +18,10 @@ describe('OrganizationIncidentsList', function() {
       body: [{id: '1', name: 'First incident'}, {id: '2', name: 'Second incident'}],
     });
 
-    const wrapper = mount(<OrganizationIncidentsList />, routerContext);
+    const wrapper = mount(
+      <OrganizationIncidentsList params={{orgId: 'org-slug'}} location={{}} />,
+      TestStubs.routerContext()
+    );
 
     const items = wrapper.find('PanelItem');
 
@@ -37,8 +35,11 @@ describe('OrganizationIncidentsList', function() {
       url: '/organizations/org-slug/incidents/',
       body: [],
     });
-    const wrapper = mount(<OrganizationIncidentsList />, routerContext);
+    const wrapper = mount(
+      <OrganizationIncidentsList params={{orgId: 'org-slug'}} location={{}} />,
+      routerContext
+    );
     expect(wrapper.find('PanelItem')).toHaveLength(0);
-    expect(wrapper.text()).toBe("You don't have any incidents yet!");
+    expect(wrapper.text()).toContain("You don't have any incidents yet!");
   });
 });
