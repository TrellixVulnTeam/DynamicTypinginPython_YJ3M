commit fcaa7a9e0b74f9ebe71506ffa734e1eaf6216c73
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 28 14:46:12 2020 -0800

    feat(workflow): Add Alert Rule details to sidebar (#16629)
    
    Adds Alert (metric) rule details to Incidents sidebar, fix Edit rule link. This will show an empty sidebar for our production data for now since we do not have alerts that get "detected".

diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
index 9cdb3c02f1..7cdfcf224a 100644
--- a/src/sentry/static/sentry/app/types/alerts.tsx
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -52,6 +52,7 @@ export type UnsavedIssueAlertRule = {
   frequency: number;
   name: string;
 };
+
 // Issue-based alert rule
 export type IssueAlertRule = UnsavedIssueAlertRule & {
   dateCreated: string;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index d8495d40b7..1907211cdf 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -2,9 +2,13 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {AlertRuleThresholdType, Trigger} from 'app/views/settings/incidentRules/types';
 import {NewQuery, Project} from 'app/types';
 import {PageContent} from 'app/styles/organization';
+import {defined} from 'app/utils';
+import {getDisplayForAlertRuleAggregation} from 'app/views/incidents/utils';
 import {t} from 'app/locale';
+import Duration from 'app/components/duration';
 import EventView from 'app/views/eventsV2/eventView';
 import Feature from 'app/components/acl/feature';
 import InlineSvg from 'app/components/inlineSvg';
@@ -52,6 +56,69 @@ export default class DetailsBody extends React.Component<Props> {
     return discoverView.getResultsViewUrlTarget(orgId);
   }
 
+  /**
+   * Return a string describing the threshold based on the threshold and the type
+   */
+  getThresholdText(
+    trigger: Trigger | undefined,
+    key: 'alertThreshold' | 'resolveThreshold'
+  ) {
+    if (!trigger || !trigger[key]) {
+      return '';
+    }
+
+    const direction = trigger.thresholdType === AlertRuleThresholdType.ABOVE ? '>' : '<';
+
+    return `${direction} ${trigger[key]}`;
+  }
+
+  renderRuleDetails() {
+    const {incident} = this.props;
+
+    const criticalTrigger = incident?.alertRule.triggers.find(
+      ({label}) => label === 'critical'
+    );
+    const warningTrigger = incident?.alertRule.triggers.find(
+      ({label}) => label === 'warning'
+    );
+
+    return (
+      <RuleDetails>
+        <span>{t('Metric')}</span>
+        <span>
+          {incident && getDisplayForAlertRuleAggregation(incident.alertRule?.aggregation)}
+        </span>
+
+        <span>{t('Critical Threshold')}</span>
+        <span>{this.getThresholdText(criticalTrigger, 'alertThreshold')}</span>
+
+        {defined(criticalTrigger?.resolveThreshold) && (
+          <React.Fragment>
+            <span>{t('Critical Resolution')}</span>
+            <span>{this.getThresholdText(criticalTrigger, 'resolveThreshold')}</span>
+          </React.Fragment>
+        )}
+
+        {defined(warningTrigger) && (
+          <React.Fragment>
+            <span>{t('Warning Threshold')}</span>
+            <span>{this.getThresholdText(warningTrigger, 'alertThreshold')}</span>
+
+            {defined(warningTrigger?.resolveThreshold) && (
+              <React.Fragment>
+                <span>{t('Warning Resolution')}</span>
+                <span>{this.getThresholdText(warningTrigger, 'resolveThreshold')}</span>
+              </React.Fragment>
+            )}
+          </React.Fragment>
+        )}
+
+        <span>{t('Time Window')}</span>
+        <span>{incident && <Duration seconds={incident.alertRule.timeWindow} />}</span>
+      </RuleDetails>
+    );
+  }
+
   render() {
     const {params, incident} = this.props;
 
@@ -60,6 +127,7 @@ export default class DetailsBody extends React.Component<Props> {
         <ChartWrapper>
           {incident ? (
             <Chart
+              aggregation={incident.alertRule?.aggregation}
               data={incident.eventStats.data}
               detected={incident.dateDetected}
               closed={incident.dateClosed}
@@ -93,41 +161,48 @@ export default class DetailsBody extends React.Component<Props> {
           </ActivityPageContent>
           <Sidebar>
             <PageContent>
-              <RuleDetails>
-                <SideHeader>{t('Metric')}</SideHeader>
-                <SideHeader>{t('Threshold')}</SideHeader>
-                <SideHeader>{t('Time Interval')}</SideHeader>
-
-                <span>Events</span>
-                <span>> 1000</span>
-                <span>1 hour</span>
-              </RuleDetails>
-
-              <SideHeader>
-                <span>{t('Query')}</span>
-                <Feature features={['discover-basic']}>
-                  <Projects slugs={incident && incident.projects} orgId={params.orgId}>
-                    {({initiallyLoaded, projects, fetching}) => (
-                      <DiscoverLink
-                        disabled={!incident || fetching || !initiallyLoaded}
-                        to={this.getDiscoverUrl(
-                          ((initiallyLoaded && projects) as Project[]) || []
-                        )}
+              {incident?.alertRule && (
+                <React.Fragment>
+                  <SideHeader>
+                    <span>{t('Alert Rule')}</span>
+
+                    <SideHeaderLink
+                      to={{
+                        pathname: `/settings/${params.orgId}/projects/${incident?.projects[0]}/alerts-v2/metric-rules/${incident?.alertRule.id}/`,
+                      }}
+                    >
+                      <InlineSvg src="icon-edit" size="14px" />
+                      {t('Edit alert rule')}
+                    </SideHeaderLink>
+                  </SideHeader>
+
+                  {this.renderRuleDetails()}
+
+                  <SideHeader>
+                    <span>{t('Query')}</span>
+                    <Feature features={['discover-basic']}>
+                      <Projects
+                        slugs={incident && incident.projects}
+                        orgId={params.orgId}
                       >
-                        <DiscoverIcon src="icon-telescope" />
-                        {t('View in Discover')}
-                      </DiscoverLink>
-                    )}
-                  </Projects>
-                </Feature>
-              </SideHeader>
-
-              <Query>user.username:"Jane Doe" server:web-8 example error</Query>
-
-              <EditRuleLink to="#">
-                <InlineSvg src="icon-edit" size="14px" />
-                {t('Edit alert rule')}
-              </EditRuleLink>
+                        {({initiallyLoaded, projects, fetching}) => (
+                          <SideHeaderLink
+                            disabled={!incident || fetching || !initiallyLoaded}
+                            to={this.getDiscoverUrl(
+                              ((initiallyLoaded && projects) as Project[]) || []
+                            )}
+                          >
+                            <InlineSvg src="icon-telescope" />
+                            {t('View in Discover')}
+                          </SideHeaderLink>
+                        )}
+                      </Projects>
+                    </Feature>
+                  </SideHeader>
+
+                  <Query>{incident?.alertRule.query || '""'}</Query>
+                </React.Fragment>
+              )}
             </PageContent>
           </Sidebar>
         </Main>
@@ -138,6 +213,7 @@ export default class DetailsBody extends React.Component<Props> {
 
 const Main = styled('div')`
   display: flex;
+  flex: 1;
   border-top: 1px solid ${p => p.theme.borderLight};
   background-color: ${p => p.theme.white};
 
@@ -173,14 +249,14 @@ const Sidebar = styled('div')`
   }
 `;
 
-const DiscoverLink = styled(Link)`
+const SideHeaderLink = styled(Link)`
+  display: grid;
+  grid-auto-flow: column;
+  align-items: center;
+  grid-gap: ${space(0.5)};
   text-transform: none;
 `;
 
-const DiscoverIcon = styled(InlineSvg)`
-  margin-right: ${space(0.5)};
-`;
-
 const StyledPageContent = styled(PageContent)`
   padding: 0;
   flex-direction: column;
@@ -210,10 +286,22 @@ const StyledSeenByList = styled(SeenByList)`
 
 const RuleDetails = styled('div')`
   display: grid;
-  grid-template-columns: repeat(3, 1fr);
-  grid-gap: ${space(1)};
-  font-size: ${p => p.theme.fontSizeExtraLarge};
+  font-size: ${p => p.theme.fontSizeMedium};
+  grid-template-columns: auto max-content;
   margin-bottom: ${space(2)};
+
+  & > span {
+    padding: ${space(0.25)} ${space(1)};
+  }
+
+  & > span:nth-child(2n + 2) {
+    text-align: right;
+  }
+
+  & > span:nth-child(4n + 1),
+  & > span:nth-child(4n + 2) {
+    background-color: ${p => p.theme.offWhite2};
+  }
 `;
 
 const Query = styled('div')`
@@ -224,12 +312,3 @@ const Query = styled('div')`
   padding: ${space(0.5)} ${space(1)};
   color: ${p => p.theme.gray4};
 `;
-
-const EditRuleLink = styled(Link)`
-  display: grid;
-  grid-auto-flow: column;
-  align-items: center;
-  justify-content: flex-start;
-  grid-gap: ${space(0.5)};
-  margin-top: ${space(2)};
-`;
diff --git a/src/sentry/static/sentry/app/views/incidents/details/chart.tsx b/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
index aee66bf037..0040b69e0d 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/chart.tsx
@@ -1,6 +1,8 @@
 import React from 'react';
 import moment from 'moment';
 
+import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
+import {getDisplayForAlertRuleAggregation} from 'app/views/incidents/utils';
 import {t} from 'app/locale';
 import LineChart from 'app/components/charts/lineChart';
 import MarkPoint from 'app/components/charts/components/markPoint';
@@ -37,13 +39,14 @@ function getNearbyIndex(data: Data, needle: number) {
 
 type Props = {
   data: Data;
+  aggregation: AlertRuleAggregations;
   detected: string;
   closed?: string;
 };
 
 export default class Chart extends React.PureComponent<Props> {
   render() {
-    const {data, detected, closed} = this.props;
+    const {aggregation, data, detected, closed} = this.props;
 
     const chartData = data.map(([ts, val]) => {
       return [
@@ -71,7 +74,8 @@ export default class Chart extends React.PureComponent<Props> {
         showTimeInTooltip
         series={[
           {
-            seriesName: t('Events'),
+            // e.g. Events or Users
+            seriesName: getDisplayForAlertRuleAggregation(aggregation),
             dataArray: chartData,
             markPoint: MarkPoint({
               data: [
diff --git a/src/sentry/static/sentry/app/views/incidents/list/index.tsx b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
index 759e7fa675..5317e5b9fc 100644
--- a/src/sentry/static/sentry/app/views/incidents/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/list/index.tsx
@@ -133,9 +133,10 @@ class IncidentsListContainer extends React.Component<Props> {
    * go down to a specific project scope.
    */
   handleNavigateToSettings = (e: React.MouseEvent) => {
+    const {router, params} = this.props;
     e.preventDefault();
 
-    navigateTo('/settings/:orgId/projects/:projectId/alerts-v2/', this.props.router);
+    navigateTo(`/settings/${params.orgId}/projects/:projectId/alerts-v2/`, router);
   };
 
   render() {
diff --git a/src/sentry/static/sentry/app/views/incidents/types.tsx b/src/sentry/static/sentry/app/views/incidents/types.tsx
index b7e015b26d..da4e2cfd7a 100644
--- a/src/sentry/static/sentry/app/views/incidents/types.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/types.tsx
@@ -1,3 +1,4 @@
+import {IncidentRule} from 'app/views/settings/incidentRules/types';
 import {User, Repository} from 'app/types';
 
 type Data = [number, {count: number}[]][];
@@ -22,6 +23,7 @@ export type Incident = {
   title: string;
   totalEvents: number;
   uniqueUsers: number;
+  alertRule: IncidentRule;
 };
 
 export type IncidentSuspect = {
diff --git a/src/sentry/static/sentry/app/views/incidents/utils.tsx b/src/sentry/static/sentry/app/views/incidents/utils.tsx
index 422950e85e..a4eeaee317 100644
--- a/src/sentry/static/sentry/app/views/incidents/utils.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/utils.tsx
@@ -1,4 +1,6 @@
+import {AlertRuleAggregations} from 'app/views/settings/incidentRules/types';
 import {Client} from 'app/api';
+import {t} from 'app/locale';
 
 import {Incident, IncidentStatus} from './types';
 
@@ -56,3 +58,10 @@ export function isOpen(incident: Incident): boolean {
       return true;
   }
 }
+
+/**
+ * Get display string based on alert rule aggregation type
+ */
+export function getDisplayForAlertRuleAggregation(aggregation: AlertRuleAggregations) {
+  return aggregation === AlertRuleAggregations.TOTAL ? t('Events') : t('Users');
+}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
index 3976760307..f423e42380 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/types.tsx
@@ -47,6 +47,7 @@ export type UnsavedIncidentRule = {
 export type SavedIncidentRule = UnsavedIncidentRule & {
   dateCreated: string;
   dateModified: string;
+  dataset: string;
   id: string;
   status: number;
   name: string;
diff --git a/tests/js/sentry-test/fixtures/incident.js b/tests/js/sentry-test/fixtures/incident.js
index fa1031c2f2..043070f995 100644
--- a/tests/js/sentry-test/fixtures/incident.js
+++ b/tests/js/sentry-test/fixtures/incident.js
@@ -1,3 +1,5 @@
+import {IncidentRule} from './incidentRule';
+
 export function Incident(params) {
   return {
     id: '321',
@@ -16,6 +18,7 @@ export function Incident(params) {
     eventStats: {
       data: [],
     },
+    alertRule: IncidentRule(),
     ...params,
   };
 }
diff --git a/tests/js/sentry-test/fixtures/incidentTrigger.js b/tests/js/sentry-test/fixtures/incidentTrigger.js
index 4e9abaedf6..8972454c3b 100644
--- a/tests/js/sentry-test/fixtures/incidentTrigger.js
+++ b/tests/js/sentry-test/fixtures/incidentTrigger.js
@@ -4,7 +4,7 @@ export function IncidentTrigger(params) {
     alertThreshold: 70,
     dateCreated: '2019-09-24T18:07:47.714Z',
     id: '1',
-    label: 'Trigger',
+    label: 'critical',
     resolveThreshold: 36,
     thresholdType: 0,
     actions: [],
