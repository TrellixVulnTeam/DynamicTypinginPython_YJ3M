commit a32a2f7128c19ca249b0911cf02fa9222c836b92
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 3 10:29:09 2019 -0700

    fix(issues-stream): Fix pagination [SEN-138] (#13009)
    
    This fixes pagination on organization issues stream (sentry 10 only). Cursors were incorrectly being updated when auto updates were on. Also removes cursor when you return to first page so we fetch the latest results.
    
    Fixes SEN-138

diff --git a/src/sentry/static/sentry/app/components/pagination.jsx b/src/sentry/static/sentry/app/components/pagination.jsx
index dd8cf7a305..69a0cd69a2 100644
--- a/src/sentry/static/sentry/app/components/pagination.jsx
+++ b/src/sentry/static/sentry/app/components/pagination.jsx
@@ -55,7 +55,7 @@ export default class Pagination extends React.Component {
         <div className="btn-group pull-right">
           <a
             onClick={() => {
-              onCursor(links.previous.cursor, path, query);
+              onCursor(links.previous.cursor, path, query, -1);
             }}
             className={previousPageClassName}
             disabled={links.previous.results === false}
@@ -64,7 +64,7 @@ export default class Pagination extends React.Component {
           </a>
           <a
             onClick={() => {
-              onCursor(links.next.cursor, path, query);
+              onCursor(links.next.cursor, path, query, 1);
             }}
             className={nextPageClassName}
             disabled={links.next.results === false}
diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index cc09321519..239fb19696 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -316,6 +316,7 @@ const OrganizationStream = createReactClass({
 
         const queryCount = jqXHR.getResponseHeader('X-Hits');
         const queryMaxCount = jqXHR.getResponseHeader('X-Max-Hits');
+        const pageLinks = jqXHR.getResponseHeader('Link');
 
         this.setState({
           error: false,
@@ -324,7 +325,7 @@ const OrganizationStream = createReactClass({
             typeof queryCount !== 'undefined' ? parseInt(queryCount, 10) || 0 : 0,
           queryMaxCount:
             typeof queryMaxCount !== 'undefined' ? parseInt(queryMaxCount, 10) || 0 : 0,
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks,
         });
       },
       error: err => {
@@ -374,12 +375,9 @@ const OrganizationStream = createReactClass({
   },
 
   onRealtimePoll(data, links) {
+    // Note: We do not update state with cursors from polling,
+    // `CursorPoller` updates itself with new cursors
     this._streamManager.unshift(data);
-    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
-      this.setState({
-        pageLinks: links,
-      });
-    }
   },
 
   onGroupChange() {
@@ -414,8 +412,19 @@ const OrganizationStream = createReactClass({
     this.transitionTo({sort});
   },
 
-  onCursorChange(cursor, path, query) {
-    this.transitionTo({cursor});
+  onCursorChange(cursor, path, query, pageDiff) {
+    const queryPageInt = parseInt(query.page, 10);
+    let nextPage = isNaN(queryPageInt) ? pageDiff : queryPageInt + pageDiff;
+
+    // unset cursor and page when we navigate back to the first page
+    // also reset cursor if somehow the previous button is enabled on
+    // first page and user attempts to go backwards
+    if (nextPage <= 0) {
+      cursor = undefined;
+      nextPage = undefined;
+    }
+
+    this.transitionTo({cursor, page: nextPage});
   },
 
   onTagsChange(tags) {
@@ -505,7 +514,8 @@ const OrganizationStream = createReactClass({
   },
 
   renderGroupNodes(ids, groupStatsPeriod) {
-    // Restrict this guide to only show for new users (joined<30 days) and add guide anhor only to the first issue
+    // Restrict this guide to only show for new users (joined < 30 days)
+    // and add guide anchor only to the first issue
     const userDateJoined = new Date(ConfigStore.get('user').dateJoined);
     const dateCutoff = new Date();
     dateCutoff.setDate(dateCutoff.getDate() - 30);
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index 9efc2de10f..451548baac 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -19,7 +19,7 @@ jest.mock('app/components/stream/group', () => jest.fn(() => null));
 
 const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
-  '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
+  '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575000:0:0>; rel="next"; results="true"; cursor="1443575000:0:0"';
 
 describe('OrganizationStream', function() {
   let wrapper;
@@ -739,6 +739,112 @@ describe('OrganizationStream', function() {
     it.todo('saves a new query');
 
     it.todo('loads pinned search when invalid saved search id is accessed');
+
+    it('does not allow pagination to "previous" while on first page and resets cursors when navigating back to initial page', async function() {
+      let pushArgs;
+      createWrapper();
+      await tick();
+      wrapper.update();
+
+      expect(
+        wrapper
+          .find('Pagination a')
+          .first()
+          .prop('disabled')
+      ).toBe(true);
+
+      issuesRequest = MockApiClient.addMockResponse({
+        url: '/organizations/org-slug/issues/',
+        body: [group],
+        headers: {
+          Link:
+            '<http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443575000:0:0>; rel="previous"; results="true"; cursor="1443575000:0:1", <http://127.0.0.1:8000/api/0/organizations/org-slug/issues/?cursor=1443574000:0:0>; rel="next"; results="true"; cursor="1443574000:0:0"',
+        },
+      });
+
+      // Click next
+      wrapper
+        .find('Pagination a')
+        .last()
+        .simulate('click');
+      pushArgs = {
+        pathname: '/organizations/org-slug/issues/',
+        query: {
+          cursor: '1443575000:0:0',
+          page: 1,
+          environment: [],
+          project: [],
+          query: 'is:unresolved',
+        },
+      };
+      expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
+      wrapper.setProps({location: pushArgs});
+      wrapper.setContext({location: pushArgs});
+      wrapper.update();
+
+      expect(
+        wrapper
+          .find('Pagination a')
+          .first()
+          .prop('disabled')
+      ).toBe(false);
+
+      // Click next again
+      wrapper
+        .find('Pagination a')
+        .last()
+        .simulate('click');
+      pushArgs = {
+        pathname: '/organizations/org-slug/issues/',
+        query: {
+          cursor: '1443574000:0:0',
+          page: 2,
+          environment: [],
+          project: [],
+          query: 'is:unresolved',
+        },
+      };
+      expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
+      wrapper.setProps({location: pushArgs});
+      wrapper.setContext({location: pushArgs});
+      wrapper.update();
+
+      // Click previous
+      wrapper
+        .find('Pagination a')
+        .first()
+        .simulate('click');
+      pushArgs = {
+        pathname: '/organizations/org-slug/issues/',
+        query: {
+          cursor: '1443575000:0:1',
+          page: 1,
+          environment: [],
+          project: [],
+          query: 'is:unresolved',
+        },
+      };
+      expect(browserHistory.push).toHaveBeenLastCalledWith(pushArgs);
+      wrapper.setProps({location: pushArgs});
+      wrapper.setContext({location: pushArgs});
+      wrapper.update();
+
+      // Click previous back to initial page
+      wrapper
+        .find('Pagination a')
+        .first()
+        .simulate('click');
+
+      // cursor is undefined because "prev" cursor is == initial "next" cursor
+      expect(browserHistory.push).toHaveBeenLastCalledWith({
+        pathname: '/organizations/org-slug/issues/',
+        query: {
+          environment: [],
+          project: [],
+          query: 'is:unresolved',
+        },
+      });
+    });
   });
 
   describe('transitionTo', function() {
