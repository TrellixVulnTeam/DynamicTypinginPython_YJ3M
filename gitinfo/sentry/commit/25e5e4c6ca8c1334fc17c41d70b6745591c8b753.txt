commit 25e5e4c6ca8c1334fc17c41d70b6745591c8b753
Author: ted kaemming <ted@kaemming.com>
Date:   Wed Nov 16 16:31:18 2016 -0800

    Add `subscriptionDetails` to group API response. (#4533)

diff --git a/CHANGES b/CHANGES
index ff60a0bc0f..fb0453a804 100644
--- a/CHANGES
+++ b/CHANGES
@@ -12,6 +12,7 @@ Version 8.11 (Unreleased)
 - Add configurable password validators to enforce password strength.
 - Send email to specific email when adding a new email rather than sending to all unverified email addresses.
 - Allow user to resend email verification to primary email address.
+- Added additional detail to subscription help text when viewing a group.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 3103201f0b..53c5c44597 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -1,33 +1,34 @@
 from __future__ import absolute_import, division, print_function
 
-import six
-
 from datetime import timedelta
+from uuid import uuid4
+
+import six
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
-from uuid import uuid4
 
-from sentry.app import search
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.serializers import serialize
-from sentry.api.serializers.models.group import StreamGroupSerializer
+from sentry.api.serializers.models.group import (
+    SUBSCRIPTION_REASON_MAP, StreamGroupSerializer
+)
+from sentry.app import search
 from sentry.constants import DEFAULT_SORT_OPTION
 from sentry.db.models.query import create_or_update
 from sentry.models import (
-    Activity, EventMapping, Group, GroupHash, GroupBookmark, GroupResolution, GroupSeen,
-    GroupSubscription, GroupSubscriptionReason, GroupSnooze, GroupStatus,
-    Release, TagKey,
+    Activity, EventMapping, Group, GroupBookmark, GroupHash, GroupResolution,
+    GroupSeen, GroupSnooze, GroupStatus, GroupSubscription,
+    GroupSubscriptionReason, Release, TagKey
 )
 from sentry.models.group import looks_like_short_id
-from sentry.search.utils import parse_query
-from sentry.search.utils import InvalidQuery
+from sentry.search.utils import InvalidQuery, parse_query
 from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
+from sentry.utils.apidocs import attach_scenarios, scenario
 from sentry.utils.cursors import Cursor
-from sentry.utils.apidocs import scenario, attach_scenarios
 
 ERR_INVALID_STATS_PERIOD = "Invalid stats_period. Valid choices are '', '24h', and '14d'"
 
@@ -562,13 +563,30 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         if result.get('isSubscribed') in (True, False):
             is_subscribed = result['isSubscribed']
             for group in group_list:
+                # NOTE: Subscribing without an initiating event (assignment,
+                # commenting, etc.) clears out the previous subscription reason
+                # to avoid showing confusing messaging as a result of this
+                # action. It'd be jarring to go directly from "you are not
+                # subscribed" to "you were subscribed due since you were
+                # assigned" just by clicking the "subscribe" button (and you
+                # may no longer be assigned to the issue anyway.)
                 GroupSubscription.objects.create_or_update(
                     user=acting_user,
                     group=group,
                     project=project,
-                    values={'is_active': is_subscribed},
+                    values={
+                        'is_active': is_subscribed,
+                        'reason': GroupSubscriptionReason.unknown,
+                    },
                 )
 
+            result['subscriptionDetails'] = {
+                'reason': SUBSCRIPTION_REASON_MAP.get(
+                    GroupSubscriptionReason.unknown,
+                    'unknown',
+                ),
+            }
+
         if result.get('isPublic'):
             queryset.update(is_public=True)
             for group in group_list:
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 504dcb94f1..a1c8bf51f7 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -1,9 +1,9 @@
 from __future__ import absolute_import, print_function
 
-import six
-
 from collections import defaultdict, namedtuple
 from datetime import timedelta
+
+import six
 from django.core.urlresolvers import reverse
 from django.db.models import Q
 from django.utils import timezone
@@ -13,17 +13,30 @@ from sentry.app import tsdb
 from sentry.constants import LOG_LEVELS
 from sentry.models import (
     Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution,
-    GroupResolutionStatus, GroupSeen, GroupSnooze, GroupSubscription,
-    GroupStatus, GroupTagKey, UserOption, UserOptionValue
+    GroupResolutionStatus, GroupSeen, GroupSnooze, GroupStatus,
+    GroupSubscription, GroupSubscriptionReason, GroupTagKey, UserOption,
+    UserOptionValue
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
 
+SUBSCRIPTION_REASON_MAP = {
+    GroupSubscriptionReason.comment: 'commented',
+    GroupSubscriptionReason.assigned: 'assigned',
+    GroupSubscriptionReason.bookmark: 'bookmarked',
+    GroupSubscriptionReason.status_change: 'changed_status',
+}
+
 
 @register(Group)
 class GroupSerializer(Serializer):
     def _get_subscriptions(self, item_list, user):
+        """
+        Returns a mapping of group IDs to a two-tuple of (subscribed: bool,
+        subscription: GroupSubscription or None) for the provided user and
+        groups.
+        """
         results = {group.id: None for group in item_list}
 
         # First, the easy part -- if there is a subscription record associated
@@ -35,7 +48,7 @@ class GroupSerializer(Serializer):
         )
 
         for subscription in subscriptions:
-            results[subscription.group_id] = subscription.is_active
+            results[subscription.group_id] = (subscription.is_active, subscription)
 
         # For any group that doesn't have a subscription associated with it,
         # we'll need to fall back to the project's option value, so here we
@@ -73,13 +86,10 @@ class GroupSerializer(Serializer):
                     project.id,
                     default,
                 ) == UserOptionValue.all_conversations
-
                 for group_id in group_ids:
-                    results[group_id] = is_subscribed
+                    results[group_id] = (is_subscribed, None)
 
-        # These are the IDs of all of the groups that the user is subscribed to
-        # that were part of the original candidate list.
-        return {group_id for group_id, is_subscribed in results.items() if is_subscribed}
+        return results
 
     def get_attrs(self, item_list, user):
         from sentry.plugins import plugins
@@ -101,7 +111,7 @@ class GroupSerializer(Serializer):
         else:
             bookmarks = set()
             seen_groups = {}
-            subscriptions = set()
+            subscriptions = defaultdict(lambda: (False, None))
 
         assignees = dict(
             (a.group_id, a.user)
@@ -145,7 +155,7 @@ class GroupSerializer(Serializer):
             result[item] = {
                 'assigned_to': serialize(assignees.get(item.id)),
                 'is_bookmarked': item.id in bookmarks,
-                'is_subscribed': item.id in subscriptions,
+                'subscription': subscriptions[item.id],
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
                 'annotations': annotations,
                 'user_count': user_counts.get(item.id, 0),
@@ -181,6 +191,8 @@ class GroupSerializer(Serializer):
         permalink = absolute_uri(reverse('sentry-group', args=[
             obj.organization.slug, obj.project.slug, obj.id]))
 
+        is_subscribed, subscription = attrs['subscription']
+
         return {
             'id': six.text_type(obj.id),
             'shareId': obj.get_share_id(),
@@ -206,7 +218,13 @@ class GroupSerializer(Serializer):
             'numComments': obj.num_comments,
             'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
-            'isSubscribed': attrs['is_subscribed'],
+            'isSubscribed': is_subscribed,
+            'subscriptionDetails': {
+                'reason': SUBSCRIPTION_REASON_MAP.get(
+                    subscription.reason,
+                    'unknown',
+                ),
+            } if is_subscribed and subscription is not None else None,
             'hasSeen': attrs['has_seen'],
             'annotations': attrs['annotations'],
         }
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index fb2d62cbcf..8eb34e0895 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -22,6 +22,13 @@ const GroupSidebar = React.createClass({
     GroupState
   ],
 
+  subscriptionReasons: {
+    commented: t('You\'re receiving updates because you have commented on this issue.'),
+    assigned: t('You\'re receiving updates because you were assigned to this issue.'),
+    bookmarked: t('You\'re receiving updates because you have bookmarked this issue.'),
+    changed_status: t('You\'re receiving updates because you have changed the status of this issue.'),
+  },
+
   toggleSubscription() {
     let group = this.props.group;
     let project = this.getProject();
@@ -69,6 +76,25 @@ const GroupSidebar = React.createClass({
     }
   },
 
+  getNotificationText() {
+    let group = this.getGroup();
+
+    if (group.isSubscribed) {
+      let result = t('You\'re receiving updates because you are subscribed to this issue.');
+      if (group.subscriptionDetails) {
+        let reason = group.subscriptionDetails.reason;
+        if (this.subscriptionReasons.hasOwnProperty(reason)) {
+          result = this.subscriptionReasons[reason];
+        }
+      } else {
+        result = t('You\'re receiving updates because you are subscribed to workflow notifications for this project.');
+      }
+      return result;
+    } else {
+      return t('You\'re not subscribed to this issue.');
+    }
+  },
+
   render() {
     let project = this.getProject();
     let projectId = project.slug;
@@ -103,11 +129,7 @@ const GroupSidebar = React.createClass({
         }
 
         <h6><span>{t('Notifications')}</span></h6>
-        {group.isSubscribed ?
-          <p className="help-block">{t('You\'re subscribed to this issue and will get notified when updates happen.')}</p>
-        :
-          <p className="help-block">{t('You\'re not subscribed in this issue.')}</p>
-        }
+        <p className="help-block">{this.getNotificationText()}</p>
         <a className={`btn btn-default btn-subscribe ${group.isSubscribed && 'subscribed'}`}
            onClick={this.toggleSubscription}>
           <span className="icon-signal" /> {group.isSubscribed ? t('Unsubscribe') : t('Subscribe')}
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index bb75d8d4ab..c03986b1c5 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -1,16 +1,16 @@
 from __future__ import absolute_import
 
-import six
-
 from datetime import timedelta
+from uuid import uuid4
+
+import six
 from django.utils import timezone
 from exam import fixture
 from mock import patch
-from uuid import uuid4
 
 from sentry.models import (
-    Activity, EventMapping, Group, GroupHash, GroupBookmark, GroupResolution, GroupSeen,
-    GroupSnooze, GroupSubscription, GroupStatus, Release
+    Activity, EventMapping, Group, GroupBookmark, GroupHash, GroupResolution,
+    GroupSeen, GroupSnooze, GroupStatus, GroupSubscription, Release
 )
 from sentry.testutils import APITestCase
 from sentry.testutils.helpers import parse_link_header
@@ -540,6 +540,9 @@ class GroupUpdateTest(APITestCase):
         assert response.status_code == 200
         assert response.data == {
             'isSubscribed': True,
+            'subscriptionDetails': {
+                'reason': 'unknown',
+            },
         }
 
         assert GroupSubscription.objects.filter(
