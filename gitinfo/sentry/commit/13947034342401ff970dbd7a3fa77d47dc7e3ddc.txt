commit 13947034342401ff970dbd7a3fa77d47dc7e3ddc
Author: evanh <evanh@users.noreply.github.com>
Date:   Wed Jan 22 13:44:04 2020 -0500

    fix(discover) Fix error in transaction detail page (#16578)
    
    When the transaction detail page loads, it passes all the same fields from the
    transactions filter page previously. Add a fix so that those fields are proprely
    ignored in the query.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 3d4391f2b2..a76b28e271 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -55,7 +55,7 @@ def is_real_column(col):
     Return true if col corresponds to an actual column to be fetched
     (not an aggregate function or field alias)
     """
-    if col in FIELD_ALIASES:
+    if col in FIELD_ALIASES or col.strip("()") in FIELD_ALIASES:
         return False
 
     match = AGGREGATE_PATTERN.search(col)
diff --git a/tests/snuba/api/endpoints/test_organization_event_details.py b/tests/snuba/api/endpoints/test_organization_event_details.py
index c6e2e14982..e9ed618564 100644
--- a/tests/snuba/api/endpoints/test_organization_event_details.py
+++ b/tests/snuba/api/endpoints/test_organization_event_details.py
@@ -348,3 +348,85 @@ class OrganizationEventDetailsEndpointTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200
         assert response.data["nextEventID"] == "d" * 32
         assert response.data["previousEventID"] == "f" * 32
+
+    def test_event_links_with_transaction_events_aggregate_fields(self):
+        prototype = {
+            "type": "transaction",
+            "transaction": "api.issue.delete",
+            "spans": [],
+            "contexts": {"trace": {"op": "foobar", "trace_id": "a" * 32, "span_id": "a" * 16}},
+            "tags": {"important": "yes"},
+        }
+        fixtures = (
+            ("d" * 32, before_now(minutes=1)),
+            ("e" * 32, before_now(minutes=2)),
+            ("f" * 32, before_now(minutes=3)),
+        )
+        for fixture in fixtures:
+            data = prototype.copy()
+            data["event_id"] = fixture[0]
+            data["timestamp"] = iso_format(fixture[1])
+            data["start_timestamp"] = iso_format(fixture[1] - timedelta(seconds=5))
+            self.store_event(data=data, project_id=self.project.id)
+
+        url = reverse(
+            "sentry-api-0-organization-event-details",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+                "event_id": "e" * 32,
+            },
+        )
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                url,
+                format="json",
+                data={
+                    "field": ["important", "count()", "p95()"],
+                    "query": "transaction.duration:>2",
+                },
+            )
+        assert response.status_code == 200
+        assert response.data["nextEventID"] == "d" * 32
+        assert response.data["previousEventID"] == "f" * 32
+
+    def test_event_links_with_transaction_events_aggregate_conditions(self):
+        prototype = {
+            "type": "transaction",
+            "transaction": "api.issue.delete",
+            "spans": [],
+            "contexts": {"trace": {"op": "foobar", "trace_id": "a" * 32, "span_id": "a" * 16}},
+            "tags": {"important": "yes"},
+        }
+        fixtures = (
+            ("d" * 32, before_now(minutes=1)),
+            ("e" * 32, before_now(minutes=2)),
+            ("f" * 32, before_now(minutes=3)),
+        )
+        for fixture in fixtures:
+            data = prototype.copy()
+            data["event_id"] = fixture[0]
+            data["timestamp"] = iso_format(fixture[1])
+            data["start_timestamp"] = iso_format(fixture[1] - timedelta(seconds=5))
+            self.store_event(data=data, project_id=self.project.id)
+
+        url = reverse(
+            "sentry-api-0-organization-event-details",
+            kwargs={
+                "organization_slug": self.project.organization.slug,
+                "project_slug": self.project.slug,
+                "event_id": "e" * 32,
+            },
+        )
+        with self.feature("organizations:events-v2"):
+            response = self.client.get(
+                url,
+                format="json",
+                data={
+                    "field": ["important", "count()", "p95()"],
+                    "query": "transaction.duration:>2 p95():>0",
+                },
+            )
+        assert response.status_code == 200
+        assert response.data["nextEventID"] == "d" * 32
+        assert response.data["previousEventID"] == "f" * 32
