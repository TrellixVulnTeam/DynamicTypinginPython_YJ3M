commit 59a6bc545919504d4e7aa9f1b4d1dcf3459ac9ad
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 13 14:05:19 2014 -0800

    Break out team/project forms

diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
new file mode 100644
index 0000000000..4a5aa8d5e0
--- /dev/null
+++ b/src/sentry/web/forms/add_project.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Project
+from sentry.utils.samples import create_sample_event
+
+
+BLANK_CHOICE = [("", "")]
+
+
+class AddProjectForm(forms.ModelForm):
+    name = forms.CharField(label=_('Name'), max_length=200,
+        widget=forms.TextInput(attrs={
+            'placeholder': _('e.g. Backend, Frontend, iOS, Android'),
+        }),
+    )
+    platform = forms.ChoiceField(
+        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
+        widget=forms.Select(attrs={
+            'data-placeholder': _('Select a platform'),
+        }),
+        help_text='Your platform choice helps us setup some defaults for this project.',
+    )
+
+    class Meta:
+        fields = ('name', 'platform')
+        model = Project
+
+    def save(self, actor, team, ip_address):
+        project = super(AddProjectForm, self).save(commit=False)
+        project.team = team
+        project.organization = team.organization
+        project.save()
+
+        AuditLogEntry.objects.create(
+            organization=project.organization,
+            actor=actor,
+            ip_address=ip_address,
+            target_object=project.id,
+            event=AuditLogEntryEvent.PROJECT_ADD,
+            data=project.get_audit_log_data(),
+        )
+
+        create_sample_event(project)
+
+        return project
diff --git a/src/sentry/web/forms/add_team.py b/src/sentry/web/forms/add_team.py
new file mode 100644
index 0000000000..d4667b6e41
--- /dev/null
+++ b/src/sentry/web/forms/add_team.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
+
+
+class AddTeamForm(forms.ModelForm):
+    name = forms.CharField(label=_('Name'), max_length=200,
+        widget=forms.TextInput(attrs={
+            'placeholder': _('E.g. Platform, API, Website, ...'),
+            'required': '',
+        }),
+    )
+
+    class Meta:
+        fields = ('name',)
+        model = Team
+
+    def save(self, actor, organization, ip_address):
+        team = super(AddTeamForm, self).save(commit=False)
+        team.organization = organization
+        team.owner = organization.owner
+        team.save()
+
+        AuditLogEntry.objects.create(
+            organization=organization,
+            actor=actor,
+            ip_address=ip_address,
+            target_object=team.id,
+            event=AuditLogEntryEvent.TEAM_ADD,
+            data=team.get_audit_log_data(),
+        )
+
+        return team
diff --git a/src/sentry/web/frontend/create_project.py b/src/sentry/web/frontend/create_project.py
index 57e9e74f24..d8b579c05e 100644
--- a/src/sentry/web/frontend/create_project.py
+++ b/src/sentry/web/frontend/create_project.py
@@ -3,32 +3,21 @@ from __future__ import absolute_import
 from django import forms
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
-from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Project, OrganizationMemberType, Team
-)
+from sentry.models import OrganizationMemberType, Project, Team
+from sentry.web.forms.add_project import AddProjectForm
 from sentry.web.frontend.base import OrganizationView
-from sentry.utils.samples import create_sample_event
 
-BLANK_CHOICE = [("", "")]
 
-
-class NewProjectForm(forms.ModelForm):
+class AddProjectWithTeamForm(AddProjectForm):
     team = forms.ChoiceField(choices=(), required=True)
-    name = forms.CharField(label=_('Project Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('Production')}))
-    platform = forms.ChoiceField(
-        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={'data-placeholder': _('Select a platform')})
-    )
 
     class Meta:
         fields = ('name', 'team', 'platform')
         model = Project
 
     def __init__(self, user, team_list, *args, **kwargs):
-        super(NewProjectForm, self).__init__(*args, **kwargs)
+        super(AddProjectWithTeamForm, self).__init__(*args, **kwargs)
 
         self.team_list = team_list
 
@@ -45,6 +34,10 @@ class NewProjectForm(forms.ModelForm):
                 return team
         return None
 
+    def save(self, actor, ip_address):
+        team = self.cleaned_data['team']
+        return super(AddProjectWithTeamForm, self).save(actor, team, ip_address)
+
 
 class CreateProjectView(OrganizationView):
     # TODO(dcramer): I'm 95% certain the access is incorrect here as it would
@@ -59,27 +52,14 @@ class CreateProjectView(OrganizationView):
             access=OrganizationMemberType.ADMIN,
         )
 
-        return NewProjectForm(request.user, team_list, request.POST or None, initial={
+        return AddProjectWithTeamForm(request.user, team_list, request.POST or None, initial={
             'team': request.GET.get('team'),
         })
 
     def handle(self, request, organization):
         form = self.get_form(request, organization)
         if form.is_valid():
-            project = form.save(commit=False)
-            project.organization = organization
-            project.save()
-
-            AuditLogEntry.objects.create(
-                organization=organization,
-                actor=request.user,
-                ip_address=request.META['REMOTE_ADDR'],
-                target_object=project.id,
-                event=AuditLogEntryEvent.PROJECT_ADD,
-                data=project.get_audit_log_data(),
-            )
-
-            create_sample_event(project)
+            project = form.save(request.user, request.META['REMOTE_ADDR'])
 
             if project.platform not in (None, 'other'):
                 url = reverse('sentry-docs-client', args=[organization.slug, project.slug, project.platform])
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 4fd999890f..32ca89ee18 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -5,89 +5,20 @@ import logging
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
-from django.utils.translation import ugettext_lazy as _
 
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Project, Team
-)
+from sentry.models import OrganizationMemberType
 from sentry.permissions import can_create_teams, Permissions
+from sentry.web.forms.add_project import AddProjectForm
+from sentry.web.forms.add_team import AddTeamForm
 from sentry.web.frontend.base import OrganizationView
 from sentry.web.frontend.generic import missing_perm
 
-BLANK_CHOICE = [("", "")]
-
-
-class NewTeamForm(forms.ModelForm):
-    name = forms.CharField(label=_('Name'), max_length=200,
-        widget=forms.TextInput(attrs={
-            'placeholder': _('E.g. Platform, API, Website, ...'),
-            'required': '',
-        }),
-    )
-
-    class Meta:
-        fields = ('name',)
-        model = Team
-
-    def save(self, actor, organization, ip_address):
-        team = super(NewTeamForm, self).save(commit=False)
-        team.organization = organization
-        team.owner = organization.owner
-        team.save()
-
-        AuditLogEntry.objects.create(
-            organization=organization,
-            actor=actor,
-            ip_address=ip_address,
-            target_object=team.id,
-            event=AuditLogEntryEvent.TEAM_ADD,
-            data=team.get_audit_log_data(),
-        )
-
-        return team
-
 
 class InviteMemberForm(forms.Form):
     def save(self, actor, team, ip_address):
         pass
 
 
-class NewProjectForm(forms.ModelForm):
-    name = forms.CharField(label=_('Name'), max_length=200,
-        widget=forms.TextInput(attrs={
-            'placeholder': _('e.g. Backend'),
-        }),
-    )
-    platform = forms.ChoiceField(
-        choices=Project._meta.get_field('platform').get_choices(blank_choice=BLANK_CHOICE),
-        widget=forms.Select(attrs={
-            'data-placeholder': _('Select a platform'),
-        }),
-        help_text='Your platform choice helps us setup some defaults for this project.',
-    )
-
-    class Meta:
-        fields = ('name', 'platform')
-        model = Project
-
-    def save(self, actor, team, ip_address):
-        project = super(NewProjectForm, self).save(commit=False)
-        project.team = team
-        project.organization = team.organization
-        project.save()
-
-        AuditLogEntry.objects.create(
-            organization=project.organization,
-            actor=actor,
-            ip_address=ip_address,
-            target_object=project.id,
-            event=AuditLogEntryEvent.PROJECT_ADD,
-            data=project.get_audit_log_data(),
-        )
-
-        return project
-
-
 class Step(object):
     def __init__(self, form, template):
         self.form = form
@@ -107,9 +38,9 @@ class CreateTeamView(OrganizationView):
     form_prefix = 'ctwizard'
 
     steps = [
-        Step(form=NewTeamForm, template='create-team-step-0.html'),
+        Step(form=AddTeamForm, template='create-team-step-0.html'),
         Step(form=InviteMemberForm, template='create-team-step-1.html'),
-        Step(form=NewProjectForm, template='create-team-step-2.html'),
+        Step(form=AddProjectForm, template='create-team-step-2.html'),
     ]
 
     # A lot of this logic is inspired by Django's FormWizard, but unfortunately
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 1dba3b9ec9..92c85bb919 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -4,7 +4,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.models import Project, Team
 from sentry.testutils import TestCase
-from sentry.web.frontend.create_team import NewTeamForm, NewProjectForm
+from sentry.web.frontend.create_team import AddTeamForm, AddProjectForm
 
 
 class CreateTeamTest(TestCase):
@@ -18,7 +18,7 @@ class CreateTeamTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['step'] == 0
         assert resp.context['form']
-        assert type(resp.context['form']) == NewTeamForm
+        assert type(resp.context['form']) == AddTeamForm
 
     def test_step_0_valid_params(self):
         organization = self.create_organization()
@@ -88,7 +88,7 @@ class CreateTeamTest(TestCase):
         assert resp.context['organization'] == organization
         assert resp.context['step'] == 2
         assert resp.context['form']
-        assert type(resp.context['form']) == NewProjectForm
+        assert type(resp.context['form']) == AddProjectForm
 
     def test_step_2_valid_params(self):
         organization = self.create_organization()
