commit 980a896fec0aef2df416c863d3d57f6b1e832064
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 29 17:47:55 2010 -0700

    More intelligent transformation of values so that they aren't all strings

diff --git a/sentry/client/base.py b/sentry/client/base.py
index f9a8437732..bef4efa156 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -10,11 +10,10 @@ import urllib2
 
 from django.core.cache import cache
 from django.template import TemplateSyntaxError
-from django.utils.encoding import smart_unicode
 from django.views.debug import ExceptionReporter
 
 from sentry import conf
-from sentry.helpers import construct_checksum, varmap, transform, get_installed_apps, urlread
+from sentry.helpers import construct_checksum, varmap, transform, get_installed_apps, urlread, force_unicode
 
 logger = logging.getLogger('sentry.errors')
 
@@ -120,27 +119,9 @@ class SentryClient(object):
             exc_info = sys.exc_info()
         exc_type, exc_value, exc_traceback = exc_info
 
-        def to_unicode(f):
-            if isinstance(f, dict):
-                nf = dict()
-                for k, v in f.iteritems():
-                    nf[str(k)] = to_unicode(v)
-                f = nf
-            elif isinstance(f, (list, tuple)):
-                f = [to_unicode(f) for f in f]
-            else:
-                try:
-                    f = smart_unicode(f)
-                except (UnicodeEncodeError, UnicodeDecodeError):
-                    f = '(Error decoding value)'
-                except Exception: # in some cases we get a different exception
-                    f = smart_unicode(type(f))
-            return f
-
         def shorten(var):
-            if not isinstance(var, basestring):
-                var = to_unicode(var)
-            if len(var) > 200:
+            var = transform(var)
+            if isinstance(var, basestring) and len(var) > 200:
                 var = var[:200] + '...'
             return var
 
@@ -185,7 +166,7 @@ class SentryClient(object):
 
         data = kwargs.pop('data', {}) or {}
         data['__sentry__'] = {
-            'exc': map(to_unicode, [exc_type.__class__.__module__, exc_value.args, frames]),
+            'exc': map(transform, [exc_type.__class__.__module__, exc_value.args, frames]),
         }
 
         if isinstance(exc_value, TemplateSyntaxError) and hasattr(exc_value, 'source'):
@@ -197,7 +178,7 @@ class SentryClient(object):
         
         tb_message = '\n'.join(traceback.format_exception(exc_type, exc_value, exc_traceback))
 
-        kwargs.setdefault('message', to_unicode(exc_value))
+        kwargs.setdefault('message', transform(force_unicode(exc_value)))
 
         return self.process(
             class_name=exc_type.__name__,
diff --git a/sentry/client/handlers.py b/sentry/client/handlers.py
index 74e50bf103..e3c9f79520 100644
--- a/sentry/client/handlers.py
+++ b/sentry/client/handlers.py
@@ -11,4 +11,30 @@ class SentryHandler(logging.Handler):
             print >> sys.stderr, record.message
             return
 
-        get_client().create_from_record(record)
\ No newline at end of file
+        get_client().create_from_record(record)
+
+try:
+    import logbook
+except ImportError:
+    pass
+else:
+    class SentryLogbookHandler(logbook.Handler):
+        def emit(self, record):
+            from sentry.client.models import get_client
+
+            # Avoid typical config issues by overriding loggers behavior
+            if record.name == 'sentry.errors':
+                print >> sys.stderr, "Recursive log message sent to SentryHandler"
+                print >> sys.stderr, record.message
+                return
+
+            kwargs = dict(
+                message=record.message,
+                level=record.level,
+                logger=record.channel,
+                data=record.extra,
+            )
+            client = get_client()
+            if record.exc_info:
+                return client.create_from_exception(record.exc_info, **kwargs)
+            return client.create_from_text(**kwargs)
\ No newline at end of file
diff --git a/sentry/helpers.py b/sentry/helpers.py
index 9166904eb5..affc633e00 100644
--- a/sentry/helpers.py
+++ b/sentry/helpers.py
@@ -4,6 +4,7 @@ import urllib2
 
 import django
 from django.conf import settings
+from django.utils.encoding import smart_unicode
 from django.utils.hashcompat import md5_constructor
 
 from sentry import conf
@@ -59,12 +60,25 @@ def varmap(func, var):
 def transform(value):
     # TODO: make this extendable
     # TODO: include some sane defaults, like UUID
+    # TODO: dont coerce strings to unicode, leave them as strings
     if isinstance(value, (tuple, list)):
         return [transform(o) for o in value]
     elif isinstance(value, dict):
         return dict((k, transform(v)) for k, v in value.iteritems())
-    elif not isinstance(value, (int, bool, basestring)) and value is not None:
-        return unicode(type(value))
+    elif isinstance(value, basestring):
+        value = force_unicode(value)
+    elif not isinstance(value, (int, bool)) and value is not None:
+        # XXX: we could do transform(repr(value)) here
+        return force_unicode(value)
+    return value
+
+def force_unicode(value):
+    try:
+        value = smart_unicode(value)
+    except (UnicodeEncodeError, UnicodeDecodeError):
+        value = '(Error decoding value)'
+    except Exception: # in some cases we get a different exception
+        value = smart_unicode(type(value))
     return value
 
 def get_installed_apps():
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 1b4dacdd1e..4c1d074110 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -784,7 +784,7 @@ class SentryMailTest(TestCase):
         out = mail.outbox[0]
 
         self.assertTrue('Traceback (most recent call last):' in out.body)
-        self.assertTrue("COOKIES:{'commenter_name': 'admin'," in out.body, out.body)
+        self.assertTrue("COOKIES:{'commenter_name': u'admin'," in out.body, out.body)
         self.assertEquals(out.subject, 'Error (EXTERNAL IP): /group/1')
 
     def test_mail_on_creation(self):
