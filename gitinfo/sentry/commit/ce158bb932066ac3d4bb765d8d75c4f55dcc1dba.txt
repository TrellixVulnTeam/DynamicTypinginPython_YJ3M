commit ce158bb932066ac3d4bb765d8d75c4f55dcc1dba
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jan 30 17:26:32 2020 -0500

    fix(discover2): Remove any aggregates from search conditions when drilling down on count() aggregates (#16730)

diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index bf98cfaaef..39e2bdde51 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -5,6 +5,11 @@ import isString from 'lodash/isString';
 import {Location, Query} from 'history';
 import {browserHistory} from 'react-router';
 
+import {
+  tokenizeSearch,
+  stringifyQueryObject,
+  QueryResults,
+} from 'app/utils/tokenizeSearch';
 import {t} from 'app/locale';
 import {Event, Organization, OrganizationSummary} from 'app/types';
 import {Client} from 'app/api';
@@ -424,6 +429,30 @@ export function getExpandedResults(
     nextView = nextView.withDeletedColumn(i, undefined);
   });
 
+  // filter out any aggregates from the search conditions.
+  // otherwise, it'll lead to an invalid query result.
+  const queryWithNoAggregates = Object.entries(tokenizeSearch(nextView.query)).reduce(
+    (acc: QueryResults, [field, value]) => {
+      if (field === 'query') {
+        acc.query = value;
+        return acc;
+      }
+
+      const column = explodeFieldString(field);
+
+      if (column.aggregation) {
+        return acc;
+      }
+
+      acc[field] = value;
+
+      return acc;
+    },
+    {query: []}
+  );
+
+  nextView.query = stringifyQueryObject(queryWithNoAggregates);
+
   // Tokenize conditions and append additional conditions provided + generated.
   Object.keys(additionalConditions).forEach(key => {
     if (key === 'project' || key === 'project.id') {
@@ -435,6 +464,13 @@ export function getExpandedResults(
       return;
     }
 
+    // filter out any aggregates from provided additional conditions.
+    // otherwise, it'll lead to an invalid query result.
+    const column = explodeFieldString(key);
+    if (column.aggregation) {
+      return;
+    }
+
     nextView.query = appendTagCondition(nextView.query, key, additionalConditions[key]);
   });
 
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 1a66516950..9afd77f563 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -327,6 +327,12 @@ describe('getExpandedResults()', function() {
     expect(result.query).toEqual('event.type:error event.type:csp');
   });
 
+  it('removes any aggregates in either search conditions or extra conditions', () => {
+    const view = new EventView({...state, query: 'event.type:error count(id):<10'});
+    const result = getExpandedResults(view, {'count(id)': '>2'}, {});
+    expect(result.query).toEqual('event.type:error');
+  });
+
   it('applies conditions from dataRow map structure based on fields', () => {
     const view = new EventView(state);
     const result = getExpandedResults(view, {extra: 'condition'}, {title: 'Event title'});
