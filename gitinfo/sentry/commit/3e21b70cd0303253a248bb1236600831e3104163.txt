commit 3e21b70cd0303253a248bb1236600831e3104163
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu Apr 16 17:13:32 2020 -0700

    feat(mail): Move `MailPlugin.handle_signal` and `handle_user_report` to `MailAdapter`. (#18321)
    
    We're now close to entirely moving over to MailAdapter. To ensure that user report mail doesn't
    break once the plugin is disabled we move `handle_signal` and `handle_user_report` to `MailAdapter`
    as well, so that it'll continue working. The migration will disable these notifications for users
    in projects that have disabled MailPlugin, so it shouldn't cause extra noise.

diff --git a/src/sentry/mail/adapter.py b/src/sentry/mail/adapter.py
index d36e2545c0..56c52b7a4c 100644
--- a/src/sentry/mail/adapter.py
+++ b/src/sentry/mail/adapter.py
@@ -13,13 +13,24 @@ from sentry import digests, options
 from sentry.digests import get_option_key as get_digest_option_key
 from sentry.digests.notifications import event_to_record, unsplit_key
 from sentry.digests.utilities import get_digest_metadata, get_personalized_digests
-from sentry.models import Commit, ProjectOption, ProjectOwnership, Release, Team, User
+from sentry.models import (
+    Commit,
+    Group,
+    GroupSubscription,
+    GroupSubscriptionReason,
+    ProjectOption,
+    ProjectOwnership,
+    Release,
+    Team,
+    User,
+)
 from sentry.plugins.base.structs import Notification
 from sentry.tasks.digests import deliver_digest
 from sentry.utils import metrics
 from sentry.utils.cache import cache
 from sentry.utils.committers import get_serialized_event_file_committers
 from sentry.utils.email import group_id_to_email, MessageBuilder
+from sentry.utils.http import absolute_uri
 from sentry.utils.linksign import generate_signed_link
 
 logger = logging.getLogger(__name__)
@@ -435,3 +446,77 @@ class MailAdapter(object):
 
         email = email_cls(activity)
         email.send()
+
+    def handle_user_report(self, payload, project, **kwargs):
+        group = Group.objects.get(id=payload["report"]["issue"]["id"])
+
+        participants = GroupSubscription.objects.get_participants(group=group)
+
+        if not participants:
+            return
+
+        org = group.organization
+        enhanced_privacy = org.flags.enhanced_privacy
+
+        context = {
+            "project": project,
+            "project_link": absolute_uri(
+                u"/{}/{}/".format(project.organization.slug, project.slug)
+            ),
+            "issue_link": absolute_uri(
+                u"/{}/{}/issues/{}/".format(
+                    project.organization.slug, project.slug, payload["report"]["issue"]["id"]
+                )
+            ),
+            # TODO(dcramer): we dont have permalinks to feedback yet
+            "link": absolute_uri(
+                u"/{}/{}/issues/{}/feedback/".format(
+                    project.organization.slug, project.slug, payload["report"]["issue"]["id"]
+                )
+            ),
+            "group": group,
+            "report": payload["report"],
+            "enhanced_privacy": enhanced_privacy,
+        }
+
+        subject_prefix = self._build_subject_prefix(project)
+        subject = force_text(
+            u"{}{} - New Feedback from {}".format(
+                subject_prefix, group.qualified_short_id, payload["report"]["name"]
+            )
+        )
+
+        headers = {"X-Sentry-Project": project.slug}
+
+        # TODO(dcramer): this is copypasta'd from activity notifications
+        # and while it'd be nice to re-use all of that, they are currently
+        # coupled to <Activity> instances which makes this tough
+        for user, reason in participants.items():
+            context.update(
+                {
+                    "reason": GroupSubscriptionReason.descriptions.get(
+                        reason, "are subscribed to this issue"
+                    ),
+                    "unsubscribe_link": generate_signed_link(
+                        user.id,
+                        "sentry-account-email-unsubscribe-issue",
+                        kwargs={"issue_id": group.id},
+                    ),
+                }
+            )
+
+            msg = MessageBuilder(
+                subject=subject,
+                template="sentry/emails/activity/new-user-feedback.txt",
+                html_template="sentry/emails/activity/new-user-feedback.html",
+                headers=headers,
+                type="notify.user-report",
+                context=context,
+                reference=group,
+            )
+            msg.add_users([user.id], project=project)
+            msg.send_async()
+
+    def handle_signal(self, name, payload, **kwargs):
+        if name == "user-reports.created":
+            self.handle_user_report(payload, **kwargs)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index c4f95b4949..6d722c3fb3 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -4,13 +4,9 @@ import logging
 
 import sentry
 
-from django.utils.encoding import force_text
-
 from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.plugins.bases.notify import NotificationPlugin
-from sentry.utils.email import MessageBuilder
 from sentry.utils.http import absolute_uri
-from sentry.utils.linksign import generate_signed_link
 
 logger = logging.getLogger(__name__)
 
@@ -60,81 +56,11 @@ class MailPlugin(NotificationPlugin):
 
         return self.mail_adapter.notify_about_activity(activity)
 
-    def handle_user_report(self, payload, project, **kwargs):
-        from sentry.models import Group, GroupSubscription, GroupSubscriptionReason
-
-        group = Group.objects.get(id=payload["report"]["issue"]["id"])
-
-        participants = GroupSubscription.objects.get_participants(group=group)
-
-        if not participants:
-            return
-
-        org = group.organization
-        enhanced_privacy = org.flags.enhanced_privacy
-
-        context = {
-            "project": project,
-            "project_link": absolute_uri(
-                u"/{}/{}/".format(project.organization.slug, project.slug)
-            ),
-            "issue_link": absolute_uri(
-                u"/{}/{}/issues/{}/".format(
-                    project.organization.slug, project.slug, payload["report"]["issue"]["id"]
-                )
-            ),
-            # TODO(dcramer): we dont have permalinks to feedback yet
-            "link": absolute_uri(
-                u"/{}/{}/issues/{}/feedback/".format(
-                    project.organization.slug, project.slug, payload["report"]["issue"]["id"]
-                )
-            ),
-            "group": group,
-            "report": payload["report"],
-            "enhanced_privacy": enhanced_privacy,
-        }
-
-        subject_prefix = self.mail_adapter._build_subject_prefix(project)
-        subject = force_text(
-            u"{}{} - New Feedback from {}".format(
-                subject_prefix, group.qualified_short_id, payload["report"]["name"]
-            )
-        )
-
-        headers = {"X-Sentry-Project": project.slug}
-
-        # TODO(dcramer): this is copypasta'd from activity notifications
-        # and while it'd be nice to re-use all of that, they are currently
-        # coupled to <Activity> instances which makes this tough
-        for user, reason in participants.items():
-            context.update(
-                {
-                    "reason": GroupSubscriptionReason.descriptions.get(
-                        reason, "are subscribed to this issue"
-                    ),
-                    "unsubscribe_link": generate_signed_link(
-                        user.id,
-                        "sentry-account-email-unsubscribe-issue",
-                        kwargs={"issue_id": group.id},
-                    ),
-                }
-            )
-
-            msg = MessageBuilder(
-                subject=subject,
-                template="sentry/emails/activity/new-user-feedback.txt",
-                html_template="sentry/emails/activity/new-user-feedback.html",
-                headers=headers,
-                type="notify.user-report",
-                context=context,
-                reference=group,
-            )
-            msg.add_users([user.id], project=project)
-            msg.send_async()
-
     def handle_signal(self, name, payload, **kwargs):
         if name == "user-reports.created":
-            self.handle_user_report(payload, **kwargs)
+            project = kwargs.get("project")
+            if project and not project.flags.has_issue_alerts_targeting:
+                self.mail_adapter.handle_signal(name, payload, **kwargs)
 
     def can_configure_for_project(self, project):
         return (
diff --git a/src/sentry/tasks/signals.py b/src/sentry/tasks/signals.py
index 0b6e06c6e8..0b818e7e6a 100644
--- a/src/sentry/tasks/signals.py
+++ b/src/sentry/tasks/signals.py
@@ -7,6 +7,7 @@ from sentry.utils.safe import safe_execute
 
 @instrumented_task(name="sentry.tasks.signal")
 def signal(name, payload, project_id=None, **kwargs):
+    from sentry.mail.adapter import MailAdapter
     from sentry.models import Project
 
     if project_id is not None:
@@ -19,3 +20,6 @@ def signal(name, payload, project_id=None, **kwargs):
 
     for plugin in plugins.for_project(project, version=2):
         safe_execute(plugin.handle_signal, name=name, payload=payload, project=project)
+
+    if project and project.flags.has_issue_alerts_targeting:
+        safe_execute(MailAdapter().handle_signal, name=name, payload=payload, project=project)
diff --git a/tests/sentry/mail/test_adapter.py b/tests/sentry/mail/test_adapter.py
index b81e275749..750335ce05 100644
--- a/tests/sentry/mail/test_adapter.py
+++ b/tests/sentry/mail/test_adapter.py
@@ -6,17 +6,21 @@ from datetime import datetime
 
 import mock
 import pytz
+from django.contrib.auth.models import AnonymousUser
 from django.core import mail
+from django.db.models import F
 from django.utils import timezone
 from exam import fixture
 from six import text_type
 
+from sentry.api.serializers import serialize, UserReportWithGroupSerializer
 from sentry.digests.notifications import build_digest, event_to_record
 from sentry.event_manager import EventManager, get_event_type
 from sentry.mail.adapter import MailAdapter, ActionTargetType
 from sentry.models import (
     Activity,
     GroupStatus,
+    Organization,
     OrganizationMember,
     OrganizationMemberTeam,
     ProjectOption,
@@ -26,6 +30,7 @@ from sentry.models import (
     User,
     UserOption,
     UserOptionValue,
+    UserReport,
 )
 from sentry.ownership import grammar
 from sentry.ownership.grammar import dump_schema, Matcher, Owner
@@ -787,3 +792,73 @@ class MailAdapterNotifyAboutActivityTest(BaseMailAdapterTest, TestCase):
             == "Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf"
         )
         assert msg.to == [self.user.email]
+
+
+class MailAdapterHandleSignalTest(BaseMailAdapterTest, TestCase):
+    def create_report(self):
+        user_foo = self.create_user("foo@example.com")
+        self.project.teams.first().organization.member_set.create(user=user_foo)
+
+        return UserReport.objects.create(
+            project=self.project,
+            group=self.group,
+            name="Homer Simpson",
+            email="homer.simpson@example.com",
+        )
+
+    def test_user_feedback(self):
+        report = self.create_report()
+        UserOption.objects.set_value(
+            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
+        )
+
+        with self.tasks():
+            self.adapter.handle_signal(
+                name="user-reports.created",
+                project=self.project,
+                payload={
+                    "report": serialize(report, AnonymousUser(), UserReportWithGroupSerializer())
+                },
+            )
+
+        assert len(mail.outbox) == 1
+        msg = mail.outbox[0]
+
+        # email includes issue metadata
+        assert "group-header" in msg.alternatives[0][0]
+        assert "enhanced privacy" not in msg.body
+
+        assert msg.subject == u"[Sentry] {} - New Feedback from Homer Simpson".format(
+            self.group.qualified_short_id
+        )
+        assert msg.to == [self.user.email]
+
+    def test_user_feedback__enhanced_privacy(self):
+        self.organization.update(flags=F("flags").bitor(Organization.flags.enhanced_privacy))
+        assert self.organization.flags.enhanced_privacy.is_set is True
+        UserOption.objects.set_value(
+            user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
+        )
+
+        report = self.create_report()
+
+        with self.tasks():
+            self.adapter.handle_signal(
+                name="user-reports.created",
+                project=self.project,
+                payload={
+                    "report": serialize(report, AnonymousUser(), UserReportWithGroupSerializer())
+                },
+            )
+
+        assert len(mail.outbox) == 1
+        msg = mail.outbox[0]
+
+        # email does not include issue metadata
+        assert "group-header" not in msg.alternatives[0][0]
+        assert "enhanced privacy" in msg.body
+
+        assert msg.subject == u"[Sentry] {} - New Feedback from Homer Simpson".format(
+            self.group.qualified_short_id
+        )
+        assert msg.to == [self.user.email]
