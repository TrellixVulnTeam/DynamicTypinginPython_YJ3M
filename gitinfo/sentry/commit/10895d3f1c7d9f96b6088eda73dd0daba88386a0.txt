commit 10895d3f1c7d9f96b6088eda73dd0daba88386a0
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 16 23:19:16 2012 -0700

    Tests for suspend and restore team member

diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 8c1a1d581d..829f872b36 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -7,7 +7,7 @@ import mock
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
-from sentry.models import Team, MEMBER_OWNER
+from sentry.models import Team, MEMBER_OWNER, MEMBER_USER
 
 from tests.base import TestCase
 
@@ -19,8 +19,10 @@ class BaseTeamTest(TestCase):
         self.user = User(username="user", email="admin@localhost", is_staff=False, is_superuser=False)
         self.user.set_password('user')
         self.user.save()
+        self.user2 = User.objects.create(username="other", email="other@localhost")
         self.team = Team.objects.create(name='foo', slug='foo', owner=self.user)
         self.tm = self.team.member_set.get_or_create(user=self.user, type=MEMBER_OWNER)[0]
+        self.tm2 = self.team.member_set.get_or_create(user=self.user2, type=MEMBER_USER)[0]
         assert self.client.login(username='user', password='user')
 
 
@@ -68,8 +70,6 @@ class NewTeamTest(BaseTeamTest):
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
     @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=True))
     def test_superuser_can_set_owner(self):
-        user = User.objects.create(username="other", email="other@localhost")
-
         resp = self.client.post(reverse('sentry-new-team'), {
             'name': 'Test Team',
             'slug': 'test',
@@ -81,13 +81,13 @@ class NewTeamTest(BaseTeamTest):
         self.assertTrue(team.exists())
         team = team.get()
 
-        self.assertEquals(team.owner, user)
+        self.assertEquals(team.owner, self.user2)
 
         member_set = list(team.member_set.all())
 
         self.assertEquals(len(member_set), 1)
         member = member_set[0]
-        self.assertEquals(member.user, user)
+        self.assertEquals(member.user, self.user2)
         self.assertEquals(member.type, MEMBER_OWNER)
 
 
@@ -128,3 +128,36 @@ class RemoveTeamTest(BaseTeamTest):
         self.assertNotEquals(resp.status_code, 200)
         self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-team-list'))
         self.assertFalse(Team.objects.filter(pk=self.team.pk).exists())
+
+
+class SuspendTeamMemberTest(BaseTeamTest):
+    def test_cannot_suspend_owner(self):
+        resp = self.client.post(reverse('sentry-suspend-team-member', args=[self.team.slug, self.tm.id]))
+        self.assertEquals(resp.status_code, 302)
+        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
+        tm = self.team.member_set.get(pk=self.tm2.id)
+        self.assertTrue(tm.is_active)
+
+    def test_does_suspend(self):
+        resp = self.client.get(reverse('sentry-suspend-team-member', args=[self.team.slug, self.tm2.id]))
+        self.assertEquals(resp.status_code, 302)
+        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]) + '?success=1')
+        tm = self.team.member_set.get(pk=self.tm2.id)
+        self.assertFalse(tm.is_active)
+
+
+class RestoreTeamMemberTest(BaseTeamTest):
+    def test_cannot_restore_owner(self):
+        resp = self.client.post(reverse('sentry-restore-team-member', args=[self.team.slug, self.tm.id]))
+        self.assertEquals(resp.status_code, 302)
+        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]))
+        tm = self.team.member_set.get(pk=self.tm2.id)
+        self.assertTrue(tm.is_active)
+
+    def test_does_restore(self):
+        self.tm2.update(is_active=False)
+        resp = self.client.get(reverse('sentry-restore-team-member', args=[self.team.slug, self.tm2.id]))
+        self.assertEquals(resp.status_code, 302)
+        self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry-manage-team', args=[self.team.slug]) + '?success=1')
+        tm = self.team.member_set.get(pk=self.tm2.id)
+        self.assertTrue(tm.is_active)
