commit f72ce52f03b858a29a673ed04dcc10048df6dc67
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Jan 15 10:31:36 2019 +0100

    ref: Event normalization updates (#11036)
    
    * Cleans up tests around null value handling
    * Return canonicalkeydict from event-manager
    * Ability to disable trimming
    * Breadcrumbs behave more like Rust code path
    * Ignore deprecated top-level attributes
    * Removes dead breadcrumb normalization code
    * Validate the frame column number
    * Change frame context normalization behavior to match rusts
    * ref(event_manager): Remove certain attributes during ingestion
    * Un-break javascript sample event
    * Upgrade libsemaphore

diff --git a/requirements-base.txt b/requirements-base.txt
index a170e25b79..4cc3d1d75e 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -54,7 +54,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.11.0
-semaphore>=0.2.0,<0.3.0
+semaphore>=0.3.0,<0.4.0
 sentry-sdk>=0.6.0,!=0.6.5
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 706c4ded27..a490e747f9 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -166,8 +166,15 @@ HTTP_METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD',
 CLIENT_RESERVED_ATTRS = (
     'project', 'errors', 'event_id', 'message', 'checksum', 'culprit', 'fingerprint', 'level',
     'time_spent', 'logger', 'server_name', 'site', 'received', 'timestamp', 'extra', 'modules',
-    'tags', 'platform', 'release', 'dist', 'environment', 'transaction', 'key_id', '_meta',
-    'applecrashreport', 'device', 'repos', 'query', 'type', 'hashes',
+    'tags', 'platform', 'release', 'dist', 'environment', 'transaction', '_meta',
+)
+
+# Deprecated or internal attributes that should be dropped silently
+CLIENT_IGNORED_ATTRS = (
+    # Internal attributes
+    'hashes', 'metadata', 'type', 'key_id', 'project', 'received',
+    # Deprecated attributes
+    'applecrashreport', 'device', 'repos', 'query',
 )
 
 # XXX: Must be all lowercase
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 36569ffe90..d4917fd9cb 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -20,7 +20,8 @@ from django.utils.encoding import force_text
 from sentry import buffer, eventtypes, eventstream, features, tsdb, filters
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, LOG_LEVELS_MAP, DEFAULT_LOG_LEVEL,
-    DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH
+    DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH,
+    CLIENT_IGNORED_ATTRS,
 )
 from sentry.coreapi import (
     APIError,
@@ -56,7 +57,7 @@ from sentry.utils.data_filters import (
 from sentry.utils.dates import to_timestamp
 from sentry.utils.db import is_postgres, is_mysql
 from sentry.utils.meta import Meta
-from sentry.utils.safe import safe_execute, trim, trim_dict, get_path, set_path, setdefault_path
+from sentry.utils.safe import ENABLE_TRIMMING, safe_execute, trim, trim_dict, get_path, set_path, setdefault_path
 from sentry.utils.strings import truncatechars
 from sentry.utils.geo import rust_geoip
 from sentry.utils.validators import is_float
@@ -458,22 +459,18 @@ class EventManager(object):
                 stacktrace_frames_hard_limit=settings.SENTRY_STACKTRACE_FRAMES_HARD_LIMIT,
                 valid_platforms=list(VALID_PLATFORMS),
                 max_secs_in_future=MAX_SECS_IN_FUTURE,
-                max_secs_in_past=MAX_SECS_IN_PAST
+                max_secs_in_past=MAX_SECS_IN_PAST,
+                enable_trimming=ENABLE_TRIMMING,
             )
 
             self._data = CanonicalKeyDict(rust_normalizer.normalize_event(dict(self._data)))
+
+            normalize_user_agent(self._data)
+
             return
 
         data = self._data
 
-        if self._for_store:
-            if self._project is not None:
-                data['project'] = self._project.id
-            if self._key is not None:
-                data['key_id'] = self._key.id
-            if self._auth is not None:
-                data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
-
         # Before validating with a schema, attempt to cast values to their desired types
         # so that the schema doesn't have to take every type variation into account.
         text = six.text_type
@@ -538,8 +535,8 @@ class EventManager(object):
 
             # Ignore all top-level None and empty values, regardless whether
             # they are interfaces or not. For all other unrecognized attributes,
-            # we emit an explicit error.
-            if not value:
+            # we emit an explicit error, unless they are explicitly ignored.
+            if not value or k in CLIENT_IGNORED_ATTRS:
                 continue
 
             try:
@@ -555,6 +552,13 @@ class EventManager(object):
 
         # Additional data coercion and defaulting we only do for store.
         if self._for_store:
+            if self._project is not None:
+                data['project'] = self._project.id
+            if self._key is not None:
+                data['key_id'] = self._key.id
+            if self._auth is not None:
+                data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
+
             level = data.get('level') or DEFAULT_LOG_LEVEL
             if isinstance(level, int) or (isinstance(level, six.string_types) and level.isdigit()):
                 level = LOG_LEVELS.get(int(level), DEFAULT_LOG_LEVEL)
@@ -663,7 +667,7 @@ class EventManager(object):
         if server_name is not None:
             set_tag(data, 'server_name', server_name)
 
-        for key in ('fingerprint', 'modules', 'tags', 'extra'):
+        for key in ('fingerprint', 'modules', 'tags', 'extra', 'contexts'):
             if not data.get(key):
                 data.pop(key, None)
 
@@ -683,7 +687,7 @@ class EventManager(object):
         elif '_meta' in data:
             del data['_meta']
 
-        self._data = prune_empty_keys(data)
+        self._data = CanonicalKeyDict(prune_empty_keys(data))
 
     def should_filter(self):
         '''
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 90cd3309c0..80d0f6a3e4 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -12,25 +12,12 @@ __all__ = ('Breadcrumbs', )
 
 import six
 
+from sentry.constants import LOG_LEVELS_MAP
 from sentry.interfaces.base import Interface, InterfaceValidationError, prune_empty_keys
-from sentry.utils import json
 from sentry.utils.safe import get_path, trim
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
 
-def _get_implied_category(category, type):
-    if category is not None:
-        return category
-    if type in ('critical', 'error', 'warning', 'info', 'debug'):
-        return type
-    # Common aliases
-    if type == 'warn':
-        return 'warning'
-    elif type == 'fatal':
-        return 'critical'
-    return 'info'
-
-
 class Breadcrumbs(Interface):
     """
     This interface stores information that leads up to an error.
@@ -83,7 +70,10 @@ class Breadcrumbs(Interface):
     @classmethod
     def normalize_crumb(cls, crumb):
         ty = crumb.get('type') or 'default'
-        level = crumb.get('level') or 'info'
+        level = crumb.get('level')
+        if level not in LOG_LEVELS_MAP and level != 'critical':
+            level = 'info'
+
         ts = parse_timestamp(crumb.get('timestamp'))
         if ts is None:
             raise InterfaceValidationError('Unable to determine timestamp for crumb')
@@ -100,22 +90,17 @@ class Breadcrumbs(Interface):
         event_id = crumb.get('event_id')
 
         data = crumb.get('data')
-        if data:
-            try:
-                for key, value in six.iteritems(data):
-                    if not isinstance(value, six.string_types):
-                        data[key] = json.dumps(value)
-            except AttributeError:
-                # TODO(dcramer): we dont want to discard the the rest of the
-                # crumb, but it'd be nice if we could record an error
-                # raise InterfaceValidationError(
-                #     'The ``data`` on breadcrumbs must be a mapping (received {})'.format(
-                #         type(crumb['data']),
-                #     )
-                # )
-                data = None
-            else:
-                data = trim(data, 4096)
+        if not isinstance(data, dict):
+            # TODO(dcramer): we dont want to discard the the rest of the
+            # crumb, but it'd be nice if we could record an error
+            # raise InterfaceValidationError(
+            #     'The ``data`` on breadcrumbs must be a mapping (received {})'.format(
+            #         type(crumb['data']),
+            #     )
+            # )
+            data = None
+        else:
+            data = trim(data, 4096)
 
         return {
             'type': ty,
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 62aaf52bd5..dbd5ecd9ee 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -13,7 +13,7 @@ import string
 
 from django.utils.encoding import force_text
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.utils.contexts_normalization import normalize_os, normalize_runtime
 from sentry.utils.safe import get_path, trim
 
@@ -55,7 +55,7 @@ class ContextType(object):
     def to_json(self):
         rv = dict(self.data)
         rv['type'] = self.type
-        return rv
+        return prune_empty_keys(rv)
 
     @classmethod
     def values_for_data(cls, data):
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 6bb942e82b..64fea67193 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -882,7 +882,7 @@ class SingleException(Interface):
         else:
             raw_stacktrace = None
 
-        return {
+        return prune_empty_keys({
             'type': self.type,
             'value': self.value,
             'mechanism': mechanism,
@@ -890,7 +890,7 @@ class SingleException(Interface):
             'stacktrace': stacktrace,
             'thread_id': self.thread_id,
             'raw_stacktrace': raw_stacktrace,
-        }
+        })
 
     def get_api_context(self, is_public=False):
         mechanism = isinstance(self.mechanism, Mechanism) and \
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index f9dd9a0573..0588411e46 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -353,16 +353,20 @@ class Frame(Interface):
 
         # XXX: handle lines which were sent as 'null'
         context_line = trim(data.get('context_line'), 256)
-        if context_line is not None:
-            pre_context = data.get('pre_context', None)
-            if pre_context:
-                pre_context = [c or '' for c in pre_context]
-
-            post_context = data.get('post_context', None)
-            if post_context:
-                post_context = [c or '' for c in post_context]
+        pre_context = data.get('pre_context', None)
+        if isinstance(pre_context, list) and pre_context:
+            pre_context = [c or '' for c in pre_context]
         else:
-            pre_context, post_context = None, None
+            pre_context = None
+
+        post_context = data.get('post_context', None)
+        if isinstance(post_context, list) and post_context:
+            post_context = [c or '' for c in post_context]
+        else:
+            post_context = None
+
+        if not context_line and (pre_context or post_context):
+            context_line = ''
 
         in_app = validate_bool(data.get('in_app'), False)
 
@@ -397,7 +401,10 @@ class Frame(Interface):
             kwargs['lineno'] = None
 
         if data.get('colno') is not None:
-            kwargs['colno'] = int(data['colno'])
+            colno = int(data['colno'])
+            if colno < 0:
+                colno = None
+            kwargs['colno'] = colno
         else:
             kwargs['colno'] = None
 
@@ -417,7 +424,7 @@ class Frame(Interface):
             'instruction_addr': self.instruction_addr,
             'trust': self.trust,
             'in_app': self.in_app,
-            'context_line': self.context_line or None,
+            'context_line': self.context_line,
             'pre_context': self.pre_context or None,
             'post_context': self.post_context or None,
             'vars': self.vars or None,
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 5805c98b28..7802370c59 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.interfaces.base import Interface
+from sentry.interfaces.base import Interface, prune_empty_keys
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.utils.safe import trim
 
@@ -54,11 +54,11 @@ class Threads(Interface):
                 rv['stacktrace'] = data['stacktrace'].to_json()
             if data['raw_stacktrace']:
                 rv['raw_stacktrace'] = data['raw_stacktrace'].to_json()
-            return rv
+            return prune_empty_keys(rv)
 
-        return {
+        return prune_empty_keys({
             'values': [export_thread(x) for x in self.values],
-        }
+        })
 
     def get_api_context(self, is_public=False):
         def export_thread(data):
diff --git a/src/sentry/utils/canonical.py b/src/sentry/utils/canonical.py
index 1e5185f599..590b437a8a 100644
--- a/src/sentry/utils/canonical.py
+++ b/src/sentry/utils/canonical.py
@@ -144,7 +144,7 @@ class CanonicalKeyDict(collections.MutableMapping):
         del self.data[self._norm_func(key)]
 
     def __repr__(self):
-        return self.data.__repr__()
+        return 'CanonicalKeyDict(%s)' % (self.data.__repr__(),)
 
 
 CANONICAL_TYPES = (CanonicalKeyDict, CanonicalKeyView)
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index cec7ca959c..52bfde5d11 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -7,6 +7,7 @@ sentry.utils.safe
 """
 from __future__ import absolute_import, print_function
 
+import os
 import collections
 import logging
 import six
@@ -19,6 +20,9 @@ from sentry.utils import json
 from sentry.utils.strings import truncatechars
 
 
+ENABLE_TRIMMING = os.environ.get("SENTRY_RUST_ENABLE_TRIMMING", "true") == "true"
+
+
 def safe_execute(func, *args, **kwargs):
     # TODO: we should make smart savepoints (only executing the savepoint server
     # side if we execute a query)
@@ -65,7 +69,7 @@ def trim(
         '_depth': _depth + 1,
     }
 
-    if _depth > max_depth:
+    if _depth > max_depth and ENABLE_TRIMMING:
         if not isinstance(value, six.string_types):
             value = json.dumps(value)
         return trim(value, _size=_size, max_size=max_size)
@@ -78,7 +82,7 @@ def trim(
             trim_v = trim(v, _size=_size, **options)
             result[k] = trim_v
             _size += len(force_text(trim_v)) + 1
-            if _size >= max_size:
+            if _size >= max_size and ENABLE_TRIMMING:
                 break
 
     elif isinstance(value, (list, tuple)):
@@ -88,12 +92,12 @@ def trim(
             trim_v = trim(v, _size=_size, **options)
             result.append(trim_v)
             _size += len(force_text(trim_v))
-            if _size >= max_size:
+            if _size >= max_size and ENABLE_TRIMMING:
                 break
         if isinstance(value, tuple):
             result = tuple(result)
 
-    elif isinstance(value, six.string_types):
+    elif isinstance(value, six.string_types) and ENABLE_TRIMMING:
         result = truncatechars(value, max_size - _size)
 
     else:
@@ -110,7 +114,7 @@ def trim_pairs(iterable, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwarg
     for idx, item in enumerate(iterable):
         key, value = item
         result.append((key, trim(value, **kwargs)))
-        if idx > max_items:
+        if idx > max_items and ENABLE_TRIMMING:
             return result
     return result
 
@@ -119,7 +123,7 @@ def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
     max_items -= 1
     for idx, key in enumerate(list(iter(value))):
         value[key] = trim(value[key], **kwargs)
-        if idx > max_items:
+        if idx > max_items and ENABLE_TRIMMING:
             del value[key]
     return value
 
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1834c1d5e1..028d105350 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -571,7 +571,7 @@ class StoreView(APIView):
                     # Relay will (eventually) need to produce a Kafka message
                     # with this JSON format.
                     value=json.dumps({
-                        'data': event_manager.get_data(),
+                        'data': dict(event_manager.get_data()),
                         'project_id': project.id,
                         'auth': {
                             'sentry_client': auth.client,
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index f4f69d50d1..09b5eaef83 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -47,13 +47,6 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(project_id)
         return event
 
-    def test_key_id_remains_in_data(self):
-        manager = EventManager(make_event(key_id=12345))
-        manager.normalize()
-        assert manager.get_data()['key_id'] == 12345
-        event = manager.save(1)
-        assert event.data['key_id'] == 12345
-
     def test_similar_message_prefix_doesnt_group(self):
         # we had a regression which caused the default hash to just be
         # 'event.message' instead of '[event.message]' which caused it to
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index e0a3c1f5e9..be279f0495 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -4,6 +4,7 @@ import pytest
 import mock
 import logging
 
+from datetime import datetime
 from django.conf import settings
 
 from sentry.constants import MAX_CULPRIT_LENGTH, DEFAULT_LOGGER_NAME
@@ -14,7 +15,7 @@ def make_event(**kwargs):
     result = {
         'event_id': 'a' * 32,
         'message': 'foo',
-        'timestamp': 1403007314.570599,
+        'timestamp': int(datetime.now().strftime("%s")),
         'level': logging.ERROR,
         'logger': 'default',
         'tags': [],
@@ -23,14 +24,6 @@ def make_event(**kwargs):
     return result
 
 
-def test_tags_none():
-    manager = EventManager(make_event(tags=None))
-    manager.normalize()
-    data = manager.get_data()
-
-    assert not data.get('tags')
-
-
 def test_tags_as_list():
     manager = EventManager(make_event(tags=[('foo', 'bar')]))
     manager.normalize()
@@ -48,21 +41,13 @@ def test_tags_as_dict():
 
 
 def test_interface_is_relabeled():
-    manager = EventManager(make_event(user={'id': '1'}))
+    manager = EventManager(make_event(**{"sentry.interfaces.User": {'id': '1'}}))
     manager.normalize()
     data = manager.get_data()
 
     assert data['user'] == {'id': '1'}
 
 
-def test_interface_none():
-    manager = EventManager(make_event(user=None))
-    manager.normalize()
-    data = manager.get_data()
-
-    assert 'user' not in data
-
-
 @pytest.mark.parametrize('user', ['missing', None, {}, {'ip_address': None}])
 def test_does_default_ip_address_to_user(user):
     event = {
@@ -211,7 +196,7 @@ def test_logger():
     manager.normalize()
     data = manager.get_data()
     assert data['logger'] == DEFAULT_LOGGER_NAME
-    assert not any(e.get('name') == 'logger' for e in data['errors'])
+    assert not any(e.get('name') == 'logger' for e in data.get('errors', []))
 
 
 def test_moves_stacktrace_to_exception():
@@ -297,10 +282,10 @@ def test_event_id_lowercase():
 @pytest.mark.parametrize('key', [
     'fingerprint', 'modules', 'user', 'request', 'contexts',
     'breadcrumbs', 'exception', 'stacktrace', 'threads', 'tags',
-    'extra', 'debug_meta', 'sdk'
+    'extra', 'debug_meta', 'sdk', 'repos'
 ])
-@pytest.mark.parametrize('value', [{}, []])
-def test_removes_some_empty_containers(key, value):
+@pytest.mark.parametrize('value', [{}, [], None])
+def test_removes_some_empty_interfaces(key, value):
     event = make_event()
     event[key] = value
 
@@ -308,3 +293,27 @@ def test_removes_some_empty_containers(key, value):
     manager.normalize()
     data = manager.get_data()
     assert key not in data
+
+
+@pytest.mark.parametrize('key', ['applecrashreport', 'device', 'repos', 'query'])
+def test_deprecated_attrs(key):
+    event = make_event()
+    event[key] = "some value"
+
+    manager = EventManager(event)
+    manager.normalize()
+    data = manager.get_data()
+
+    assert key not in data
+    assert not data.get('errors')
+
+
+def test_returns_cannonical_dict():
+    from sentry.utils.canonical import CanonicalKeyDict
+
+    event = make_event()
+
+    manager = EventManager(event)
+    assert isinstance(manager.get_data(), CanonicalKeyDict)
+    manager.normalize()
+    assert isinstance(manager.get_data(), CanonicalKeyDict)
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index d05d9c7672..094a0fcd5c 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -426,9 +426,3 @@ def test_messages_old_behavior():
     assert "message" not in data
     assert len(data["errors"]) == 1
     assert data["logentry"] == {"message": "foo is bar"}
-
-
-def test_none_interface():
-    data = validate_and_normalize({"exception": None})
-    assert data.get("exception") is None
-    assert not data.get("errors")
diff --git a/tests/sentry/interfaces/test_breadcrumbs.py b/tests/sentry/interfaces/test_breadcrumbs.py
index 7e7771b9eb..adc7f9f7b9 100644
--- a/tests/sentry/interfaces/test_breadcrumbs.py
+++ b/tests/sentry/interfaces/test_breadcrumbs.py
@@ -61,7 +61,7 @@ class BreadcrumbsTest(TestCase):
             )
         )
         assert len(result.values) == 1
-        assert result.values[0]['data'] == {'extra': '{"foo":"bar"}'}
+        assert result.values[0]['data'] == {'extra': {"foo": "bar"}}
 
     def test_string_data(self):
         result = Breadcrumbs.to_python(
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 61e7894585..4b3bbaff2d 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -351,10 +351,6 @@ class SingleExceptionTest(TestCase):
             'type': self.interface.type,
             'value': self.interface.value,
             'module': self.interface.module,
-            'thread_id': None,
-            'mechanism': None,
-            'stacktrace': None,
-            'raw_stacktrace': None,
         }
 
     def test_get_hash(self):
@@ -423,12 +419,12 @@ class SingleExceptionTest(TestCase):
             'value': {'unauthorized': True},
         }).to_json()
 
-        assert result['type'] is None
+        assert 'type' not in result
         assert result['value'] == '{"unauthorized":true}'
 
         # Don't re-split a json-serialized value on the colon
         result = SingleException.to_python(result).to_json()
-        assert result['type'] is None
+        assert 'type' not in result
         assert result['value'] == '{"unauthorized":true}'
 
 
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index 487afd33d0..54b9e7dff4 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -69,9 +69,6 @@ class ThreadsTest(TestCase):
         sink = {"values": [{
             "crashed": False,
             "current": False,
-            "id": None,
-            "name": None,
-            "stacktrace": None
         }]}
 
         assert Threads.to_python({"values": [{}]}).to_json() == sink
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index f14f04cae9..1783b63588 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -12,7 +12,6 @@ class EventAttributeConditionTest(RuleTestCase):
             platform='php',
             data={
                 'message': 'hello world',
-                'type': 'error',
                 'request': {
                     'method': 'GET',
                     'url': 'http://example.com',
@@ -433,6 +432,7 @@ class EventAttributeConditionTest(RuleTestCase):
 
     def test_event_type(self):
         event = self.get_event()
+        event.data['type'] = 'error'
         rule = self.get_rule(data={
             'match': MatchType.EQUAL,
             'attribute': 'type',
