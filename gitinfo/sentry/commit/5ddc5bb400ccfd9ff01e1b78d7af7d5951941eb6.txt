commit 5ddc5bb400ccfd9ff01e1b78d7af7d5951941eb6
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Wed Oct 16 17:56:06 2019 +0200

    fix: Never fork (#15108)

diff --git a/src/sentry/ingest/outcomes_consumer.py b/src/sentry/ingest/outcomes_consumer.py
index 76d5554416..b63f0a8441 100644
--- a/src/sentry/ingest/outcomes_consumer.py
+++ b/src/sentry/ingest/outcomes_consumer.py
@@ -105,12 +105,8 @@ def _process_message_with_timer(message):
 
 
 class OutcomesConsumerWorker(AbstractBatchWorker):
-    def __init__(self, multiprocessing, concurrency):
-        if multiprocessing:
-            self.pool = _multiprocessing.Pool(concurrency)
-        else:
-            self.pool = _multiprocessing.dummy.Pool(concurrency)
-
+    def __init__(self, concurrency):
+        self.pool = _multiprocessing.dummy.Pool(concurrency)
         atexit.register(self.pool.close)
 
     def process_message(self, message):
@@ -124,13 +120,13 @@ class OutcomesConsumerWorker(AbstractBatchWorker):
         pass
 
 
-def get_outcomes_consumer(multiprocessing=False, concurrency=None, **options):
+def get_outcomes_consumer(concurrency=None, **options):
     """
     Handles outcome requests coming via a kafka queue from Relay.
     """
 
     return create_batching_kafka_consumer(
         topic_name=settings.KAFKA_OUTCOMES,
-        worker=OutcomesConsumerWorker(multiprocessing=multiprocessing, concurrency=concurrency),
+        worker=OutcomesConsumerWorker(concurrency=concurrency),
         **options
     )
diff --git a/src/sentry/runner/commands/run.py b/src/sentry/runner/commands/run.py
index 342bf51dc0..3cf793296c 100644
--- a/src/sentry/runner/commands/run.py
+++ b/src/sentry/runner/commands/run.py
@@ -434,16 +434,11 @@ def ingest_consumer(consumer_type, **options):
 @run.command("outcomes-consumer")
 @log_options()
 @batching_kafka_options("outcomes-consumer")
-@click.option(
-    "--multiprocessing/--multithreading",
-    default=False,
-    help="Use threads vs processes for concurrency. Per default it's threads.",
-)
 @click.option(
     "--concurrency",
     type=int,
-    default=None,
-    help="Spawn this many threads/processes to process outcomes. Defaults to number of CPUs.",
+    default=1,
+    help="Spawn this many threads to process outcomes. Defaults to 1.",
 )
 @configuration
 def outcome_consumer(**options):
