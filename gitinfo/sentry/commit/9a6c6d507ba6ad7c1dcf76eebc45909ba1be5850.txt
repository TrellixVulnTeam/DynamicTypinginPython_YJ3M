commit 9a6c6d507ba6ad7c1dcf76eebc45909ba1be5850
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Dec 4 15:53:55 2018 -0800

    feat(ui): Add total result count to event stream (internal only) (#10901)

diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index dcf25d98d4..50bbcdc0a5 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -1,11 +1,14 @@
 import {Flex} from 'grid-emotion';
 import {isEqual} from 'lodash';
+import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
 import {Panel} from 'app/components/panels';
 import {t} from 'app/locale';
+import AsyncComponent from 'app/components/asyncComponent';
 import AsyncView from 'app/views/asyncView';
+import Feature from 'app/components/acl/feature';
 import Pagination from 'app/components/pagination';
 import SentryTypes from 'app/sentryTypes';
 import utils from 'app/utils';
@@ -26,6 +29,44 @@ const parseRowFromLinks = (links, numRows) => {
   return `${currentStart}-${currentStart + numRows - 1}`;
 };
 
+class TotalEventCount extends AsyncComponent {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    location: PropTypes.object.isRequired,
+    isAllResults: PropTypes.bool.isRequired,
+    numRows: PropTypes.number.isRequired,
+  };
+
+  getEndpoints() {
+    const {organization, location} = this.props;
+    let {statsPeriod, ...query} = location.query;
+
+    return [
+      [
+        'eventsMeta',
+        `/organizations/${organization.slug}/events-meta/`,
+        {
+          query: getParams({
+            statsPeriod,
+            ...query,
+          }),
+        },
+      ],
+    ];
+  }
+
+  renderBody() {
+    let {eventsMeta} = this.state;
+    let {isAllResults, organization, numRows} = this.props;
+    let count = isAllResults ? numRows : eventsMeta.count;
+    return (
+      <Feature features={['internal-catchall']} organization={organization}>
+        {t(` of ${count}${isAllResults ? '' : ' (estimated)'}`)}
+      </Feature>
+    );
+  }
+}
+
 class OrganizationEvents extends AsyncView {
   static propTypes = {
     organization: SentryTypes.Organization,
@@ -92,8 +133,9 @@ class OrganizationEvents extends AsyncView {
   }
 
   renderBody() {
-    const {organization} = this.props;
+    const {organization, location} = this.props;
     const {error, loading, reloading, events, eventsPageLinks} = this.state;
+    let parsedLinks = !loading && !error ? utils.parseLinkHeader(eventsPageLinks) : {};
 
     return (
       <React.Fragment>
@@ -114,6 +156,16 @@ class OrganizationEvents extends AsyncView {
             <Flex align="center" justify="space-between">
               <RowDisplay>
                 {events.length ? t(`Results ${this.renderRowCounts()}`) : t('No Results')}
+                {events.length && (
+                  <TotalEventCount
+                    organization={organization}
+                    location={location}
+                    isAllResults={
+                      !parsedLinks.previous.results && !parsedLinks.next.results
+                    }
+                    numRows={events.length}
+                  />
+                )}
               </RowDisplay>
               <Pagination pageLinks={eventsPageLinks} className="" />
             </Flex>
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 465d8cff22..d74efea7c3 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -18,6 +18,7 @@ describe('OrganizationEventsErrors', function() {
   const org = TestStubs.Organization({projects: [project]});
   let eventsMock;
   let eventsStatsMock;
+  let eventsMetaMock;
 
   beforeEach(function() {
     // Search bar makes this request when mounted
@@ -36,6 +37,10 @@ describe('OrganizationEventsErrors', function() {
         return TestStubs.HealthGraph(opts.query);
       },
     });
+    eventsMetaMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/events-meta/',
+      body: {count: 5},
+    });
   });
 
   it('renders with errors', async function() {
@@ -69,6 +74,7 @@ describe('OrganizationEventsErrors', function() {
     await tick();
     wrapper.update();
     expect(eventsStatsMock).toHaveBeenCalled();
+    expect(eventsMetaMock).toHaveBeenCalled();
     expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
     expect(wrapper.find('IdBadge')).toHaveLength(2);
   });
