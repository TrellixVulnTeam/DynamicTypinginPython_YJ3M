commit 864928190c7ae399d284db1c3daf97de9ef5d80d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Jan 8 09:40:58 2019 -0800

    tests(js): Add GlobalSelectionHeader test (#11381)

diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
new file mode 100644
index 0000000000..8cf621c979
--- /dev/null
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -0,0 +1,180 @@
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount} from 'enzyme';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
+import * as globalActions from 'app/actionCreators/globalSelection';
+
+const changeQuery = (routerContext, query) => ({
+  ...routerContext,
+  context: {
+    ...routerContext.context,
+    router: {
+      ...routerContext.context.router,
+      location: {
+        query,
+      },
+    },
+  },
+});
+
+describe('GlobalSelectionHeader', function() {
+  const {organization, router, routerContext} = initializeOrg({
+    router: {
+      location: {query: {}},
+    },
+  });
+
+  beforeAll(function() {
+    jest.spyOn(globalActions, 'updateDateTime');
+    jest.spyOn(globalActions, 'updateEnvironments');
+    jest.spyOn(globalActions, 'updateProjects');
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/environments/`,
+      body: TestStubs.Environments(),
+    });
+  });
+
+  beforeEach(function() {
+    GlobalSelectionStore.reset();
+    [
+      globalActions.updateDateTime,
+      globalActions.updateProjects,
+      globalActions.updateEnvironments,
+      router.push,
+    ].forEach(mock => mock.mockClear());
+  });
+
+  it('does not update router if there is custom routing', function() {
+    mount(
+      <GlobalSelectionHeader organization={organization} hasCustomRouting />,
+      routerContext
+    );
+    expect(router.push).not.toHaveBeenCalled();
+  });
+
+  it('updates URL with values from store when mounted with no query params', function() {
+    mount(<GlobalSelectionHeader organization={organization} />, routerContext);
+
+    expect(router.push).toHaveBeenCalledWith(
+      expect.objectContaining({
+        query: {
+          environment: [],
+          project: [],
+          statsPeriod: '14d',
+          utc: 'true',
+        },
+      })
+    );
+  });
+
+  it('only updates GlobalSelection store when mounted with query params', async function() {
+    mount(
+      <GlobalSelectionHeader organization={organization} />,
+      changeQuery(routerContext, {
+        statsPeriod: '7d',
+      })
+    );
+
+    expect(router.push).not.toHaveBeenCalled();
+    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
+      period: '7d',
+      utc: null,
+      start: null,
+      end: null,
+    });
+    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
+    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+
+    await tick();
+
+    expect(GlobalSelectionStore.get()).toEqual({
+      datetime: {
+        period: '7d',
+        utc: null,
+        start: null,
+        end: null,
+      },
+      environments: [],
+      projects: [],
+    });
+  });
+
+  it('updates GlobalSelection store when re-rendered with different query params', async function() {
+    let wrapper = mount(
+      <GlobalSelectionHeader organization={organization} />,
+      changeQuery(routerContext, {
+        statsPeriod: '7d',
+      })
+    );
+
+    wrapper.setContext(
+      changeQuery(routerContext, {
+        statsPeriod: '21d',
+      }).context
+    );
+    await tick();
+    wrapper.update();
+
+    expect(globalActions.updateDateTime).toHaveBeenCalledWith({
+      period: '21d',
+      utc: null,
+      start: null,
+      end: null,
+    });
+    expect(globalActions.updateProjects).toHaveBeenCalledWith([]);
+    expect(globalActions.updateEnvironments).toHaveBeenCalledWith([]);
+
+    expect(GlobalSelectionStore.get()).toEqual({
+      datetime: {
+        period: '21d',
+        utc: null,
+        start: null,
+        end: null,
+      },
+      environments: [],
+      projects: [],
+    });
+  });
+
+  it('does not update store if url params have not changed', async function() {
+    let wrapper = mount(
+      <GlobalSelectionHeader organization={organization} />,
+      changeQuery(routerContext, {
+        statsPeriod: '7d',
+      })
+    );
+
+    [
+      globalActions.updateDateTime,
+      globalActions.updateProjects,
+      globalActions.updateEnvironments,
+    ].forEach(mock => mock.mockClear());
+
+    wrapper.setContext(
+      changeQuery(routerContext, {
+        statsPeriod: '7d',
+      }).context
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(globalActions.updateDateTime).not.toHaveBeenCalled();
+    expect(globalActions.updateProjects).not.toHaveBeenCalled();
+    expect(globalActions.updateEnvironments).not.toHaveBeenCalled();
+
+    expect(GlobalSelectionStore.get()).toEqual({
+      datetime: {
+        period: '7d',
+        utc: null,
+        start: null,
+        end: null,
+      },
+      environments: [],
+      projects: [],
+    });
+  });
+});
