commit c5225316c23583840d4c5d346f66228e986150ea
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Fri Jul 13 08:34:58 2018 +0200

    feat: Extract raven usage to sdk helper in webpack (#9003)
    
    * feat: Extract raven usage to sdk helper in webpack
    
    * fix: Add raven-js as webpack dep
    
    * ref: Remove unused if
    
    * ref: Fix if
    
    * ref: Remove raven and sdk from provide plugin
    
    * ref: Use default export
    
    * fix: Remove test code
    
    * fix: Spread args correctly, Call captureException

diff --git a/.storybook/webpack.config.js b/.storybook/webpack.config.js
index 20d537267d..2e5be79589 100644
--- a/.storybook/webpack.config.js
+++ b/.storybook/webpack.config.js
@@ -68,7 +68,6 @@ module.exports = {
       jQuery: 'jquery',
       'window.jQuery': 'jquery',
       'root.jQuery': 'jquery',
-      Raven: 'raven-js',
       underscore: 'underscore',
       _: 'underscore',
     }),
diff --git a/package.json b/package.json
index 825ad95d64..63cf349589 100644
--- a/package.json
+++ b/package.json
@@ -59,7 +59,7 @@
     "po-catalog-loader": "2.0.0",
     "prop-types": "^15.6.0",
     "query-string": "2.4.2",
-    "raven-js": "3.23.2",
+    "raven-js": "^3.26.3",
     "react": "16.3.2",
     "react-addons-css-transition-group": "15.6.2",
     "react-autosize-textarea": "3.0.2",
diff --git a/src/sentry/static/sentry/app/actionCreators/group.jsx b/src/sentry/static/sentry/app/actionCreators/group.jsx
index c1287ea3e1..81574a63f1 100644
--- a/src/sentry/static/sentry/app/actionCreators/group.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/group.jsx
@@ -1,5 +1,4 @@
-import Raven from 'raven-js';
-
+import sdk from 'app/utils/sdk';
 import {Client} from 'app/api';
 import GroupActions from 'app/actions/groupActions';
 import {buildUserId, buildTeamId} from 'app/utils';
@@ -83,7 +82,7 @@ export function assignToActor({id, actor}) {
       break;
 
     default:
-      Raven.captureException('Unknown assignee type', {
+      sdk.captureException('Unknown assignee type', {
         extra: {actor},
       });
   }
diff --git a/src/sentry/static/sentry/app/components/actorAvatar.jsx b/src/sentry/static/sentry/app/components/actorAvatar.jsx
index 9835096383..43a7f3b354 100644
--- a/src/sentry/static/sentry/app/components/actorAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/actorAvatar.jsx
@@ -1,7 +1,7 @@
-import Raven from 'raven-js';
 import React from 'react';
 import PropTypes from 'prop-types';
 
+import sdk from 'app/utils/sdk';
 import Avatar from 'app/components/avatar';
 import MemberListStore from 'app/stores/memberListStore';
 import TeamStore from 'app/stores/teamStore';
@@ -27,7 +27,7 @@ class ActorAvatar extends React.Component {
       return <Avatar team={team} hasTooltip {...props} />;
     }
 
-    Raven.captureException('Unknown avatar type', {
+    sdk.captureException('Unknown avatar type', {
       extra: {actor},
     });
     return null;
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 5f8b2ceeeb..2755db1267 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -1,8 +1,8 @@
 import {isEqual} from 'lodash';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 
+import sdk from 'app/utils/sdk';
 import {Client} from 'app/api';
 import {t} from 'app/locale';
 import AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';
@@ -150,7 +150,7 @@ class AsyncComponent extends React.Component {
 
   handleError(error, [stateKey]) {
     if (error && error.responseText) {
-      Raven.captureBreadcrumb({
+      sdk.captureBreadcrumb({
         message: error.responseText,
         category: 'xhr',
         level: 'error',
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.jsx b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
index 48e474988d..d673df81a6 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.jsx
@@ -1,6 +1,6 @@
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
+import sdk from 'app/utils/sdk';
 
 import {MENU_CLOSE_DELAY} from 'app/constants';
 
@@ -74,7 +74,7 @@ class DropdownMenu extends React.Component {
 
     if (!this.dropdownActor) {
       // Log an error, should be lower priority
-      Raven.captureException(new Error('DropdownMenu does not have "Actor" attached'), {
+      sdk.captureException(new Error('DropdownMenu does not have "Actor" attached'), {
         level: 'warning',
       });
     }
@@ -143,7 +143,7 @@ class DropdownMenu extends React.Component {
         }, MENU_CLOSE_DELAY);
       }
     } catch (err) {
-      Raven.captureException(err, {
+      sdk.captureException(err, {
         event: e,
         toElement: e.toElement,
         relatedTarget: e.relatedTarget,
diff --git a/src/sentry/static/sentry/app/components/errorBoundary.jsx b/src/sentry/static/sentry/app/components/errorBoundary.jsx
index 2aabcdf480..53961415fa 100644
--- a/src/sentry/static/sentry/app/components/errorBoundary.jsx
+++ b/src/sentry/static/sentry/app/components/errorBoundary.jsx
@@ -1,9 +1,9 @@
 import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 import styled from 'react-emotion';
 
+import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import Alert from 'app/components/alert';
 import DetailedError from 'app/components/errors/detailedError';
@@ -42,7 +42,7 @@ class ErrorBoundary extends React.Component {
 
   componentDidCatch(error, errorInfo) {
     this.setState({error});
-    Raven.captureException(error, {extra: errorInfo});
+    sdk.captureException(error, {extra: errorInfo});
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/errors/detailedError.jsx b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
index 55f3216332..35ba7a2991 100644
--- a/src/sentry/static/sentry/app/components/errors/detailedError.jsx
+++ b/src/sentry/static/sentry/app/components/errors/detailedError.jsx
@@ -2,6 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
 
+import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import InlineSvg from 'app/components/inlineSvg';
 import Button from 'app/components/buttons/button';
@@ -24,7 +25,6 @@ class DetailedError extends React.Component {
   };
 
   componentDidMount() {
-    // window.Raven.lastEventId() may not be immediatly true, so double-check after raven has time to send an error
     setTimeout(() => {
       this.forceUpdate();
     }, 100);
@@ -32,9 +32,7 @@ class DetailedError extends React.Component {
 
   openFeedback(e) {
     e.preventDefault();
-    if (window.Raven) {
-      window.Raven.lastEventId() && window.Raven.showReportDialog();
-    }
+    sdk.lastEventId() && sdk.showReportDialog();
   }
 
   render() {
@@ -65,12 +63,11 @@ class DetailedError extends React.Component {
 
               {!hideSupportLinks && (
                 <div className="detailed-error-support-links">
-                  {window.Raven &&
-                    window.Raven.lastEventId() && (
-                      <Button priority="link" onClick={this.openFeedback}>
-                        {t('Fill out a report')}
-                      </Button>
-                    )}
+                  {sdk.lastEventId() && (
+                    <Button priority="link" onClick={this.openFeedback}>
+                      {t('Fill out a report')}
+                    </Button>
+                  )}
                   <a href="https://status.sentry.io/">{t('Service status')}</a>
 
                   <a href="https://sentry.io/support/">{t('Contact support')}</a>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index dc846d4ed9..65294b4d03 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -1,6 +1,6 @@
 import {isString} from 'lodash';
-import Raven from 'raven-js';
 
+import sdk from 'app/utils/sdk';
 import {defined} from 'app/utils';
 
 export function escapeQuotes(v) {
@@ -44,7 +44,7 @@ export function getCurlCommand(data) {
         if (isString(data.data)) {
           result += ' \\\n --data "' + escapeQuotes(data.data) + '"';
         } else {
-          Raven.captureMessage('Unknown event data', {
+          sdk.captureMessage('Unknown event data', {
             extra: data,
           });
         }
diff --git a/src/sentry/static/sentry/app/components/lazyLoad.jsx b/src/sentry/static/sentry/app/components/lazyLoad.jsx
index 920e4dd217..1276622626 100644
--- a/src/sentry/static/sentry/app/components/lazyLoad.jsx
+++ b/src/sentry/static/sentry/app/components/lazyLoad.jsx
@@ -1,7 +1,7 @@
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 
+import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
@@ -67,7 +67,7 @@ class LazyLoad extends React.Component {
   handleFetchError = error => {
     // eslint-disable-next-line no-console
     console.error(error);
-    Raven.captureException(error, {fingerprint: ['webpack', 'error loading chunk']});
+    sdk.captureException(error, {fingerprint: ['webpack', 'error loading chunk']});
     this.setState({
       error,
     });
diff --git a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
index dc409c1595..fbdeaf80ed 100644
--- a/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
+++ b/src/sentry/static/sentry/app/components/onboardingWizard/toDoItem.jsx
@@ -1,11 +1,11 @@
 import moment from 'moment';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import classNames from 'classnames';
-import {t, tct} from 'app/locale';
 
+import {t, tct} from 'app/locale';
+import sdk from 'app/utils/sdk';
 import analytics from 'app/utils/analytics';
 import OrganizationState from 'app/mixins/organizationState';
 import Confirmation from 'app/components/onboardingWizard/confirmation';
@@ -57,7 +57,7 @@ const TodoItem = createReactClass({
     } else if (task.featureLocation === 'absolute') {
       learnMoreUrl = task.location;
     } else {
-      Raven.captureMessage('No learnMoreUrl created for this featureLocation ', {
+      sdk.captureMessage('No learnMoreUrl created for this featureLocation ', {
         extra: {props: this.props, state: this.state},
       });
     }
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index e6370d8c11..ae7a3bce4e 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -1,9 +1,9 @@
 import {flatten, debounce} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 
+import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import {Client} from 'app/api';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
@@ -228,7 +228,7 @@ class ApiSource extends React.Component {
   }, 150);
 
   handleRequestError = (err, {url, orgId}) => {
-    Raven.captureException(
+    sdk.captureException(
       new Error(
         `API Source Failed: ${err && err.responseJSON && err.responseJSON.detail}`
       ),
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index fb565605f6..8776269baf 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -1,9 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import u2f from 'u2f-api';
-import Raven from 'raven-js';
 import ConfigStore from 'app/stores/configStore';
-
+import sdk from 'app/utils/sdk';
 import {t, tct} from 'app/locale';
 
 class U2fInterface extends React.Component {
@@ -111,7 +110,7 @@ class U2fInterface extends React.Component {
         // we want to know what is happening here.  There are some indicators
         // that users are getting errors that should not happen through the
         // regular u2f flow.
-        Raven.captureException(err);
+        sdk.captureException(err);
         this.setState({
           deviceFailure: failure,
           hasBeenTapped: false,
diff --git a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
index b520358672..6155fccb30 100644
--- a/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
+++ b/src/sentry/static/sentry/app/utils/handleXhrErrorResponse.jsx
@@ -1,4 +1,4 @@
-import Raven from 'raven-js';
+import sdk from 'app/utils/sdk';
 
 export default function handleXhrErrorResponse(message) {
   return resp => {
@@ -9,7 +9,7 @@ export default function handleXhrErrorResponse(message) {
 
     // If this is a string then just capture it as error
     if (typeof responseJSON.detail === 'string') {
-      Raven.captureException(new Error(message), {
+      sdk.captureException(new Error(message), {
         status: resp.status,
         detail: responseJSON.detail,
       });
@@ -20,7 +20,7 @@ export default function handleXhrErrorResponse(message) {
     if (responseJSON.detail.code === 'sudo-required') return;
 
     if (typeof responseJSON.detail.message === 'string') {
-      Raven.captureException(new Error(message), {
+      sdk.captureException(new Error(message), {
         status: resp.status,
         detail: responseJSON.detail.message,
         code: responseJSON.detail.code,
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index 6f6d4468dd..90a0f4019c 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -1,7 +1,7 @@
-import Raven from 'raven-js';
+import sdk from 'app/utils/sdk';
 
 export function logException(ex, context) {
-  Raven.captureException(ex, {
+  sdk.captureException(ex, {
     extra: context,
   });
   /*eslint no-console:0*/
@@ -14,7 +14,7 @@ export function logAjaxError(error, context) {
     : error.responseText ? error.responseText.substr(0, 255) : '<unknown response>'; // occassionally responseText is undefined
 
   let message = `HTTP ${error.status}: ${errorString}`;
-  Raven.captureMessage(message, {
+  sdk.captureMessage(message, {
     extra: context,
   });
   /*eslint no-console:0*/
diff --git a/src/sentry/static/sentry/app/utils/sdk.js b/src/sentry/static/sentry/app/utils/sdk.js
new file mode 100644
index 0000000000..4681c35e23
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/sdk.js
@@ -0,0 +1,84 @@
+let _addBreadcrumb = () => {};
+let _captureException = () => {};
+let _captureMessage = () => {};
+let _showReportDialog = () => {};
+let _lastEventId = () => {};
+
+document.addEventListener('ravenLoaded', function() {
+  _addBreadcrumb = window.Raven.captureBreadcrumb.bind(window.Raven);
+  _captureException = window.Raven.captureException.bind(window.Raven);
+  _captureMessage = window.Raven.captureMessage.bind(window.Raven);
+  _showReportDialog = window.Raven.showReportDialog.bind(window.Raven);
+  _lastEventId = window.Raven.lastEventId.bind(window.Raven);
+});
+
+function setContextInScope(context) {
+  window.Sentry.configureScope(scope => {
+    if (context.user) {
+      scope.setUser(context.user);
+    }
+    if (context.tags) {
+      Object.keys(context.tags).forEach(key => {
+        scope.setTag(key, context.tags[key]);
+      });
+    }
+    if (context.extra) {
+      Object.keys(context.extra).forEach(key => {
+        scope.setExtra(key, context.extra[key]);
+      });
+    }
+  });
+}
+
+document.addEventListener('sentryLoaded', function() {
+  _addBreadcrumb = window.Sentry.addBreadcrumb;
+  _captureMessage = (...args) => {
+    window.Sentry.getDefaultHub().pushScope();
+    if (args[1]) {
+      setContextInScope(args[1]);
+    }
+    if (args[0]) {
+      window.Sentry.captureMessage(args[0]);
+    }
+    window.Sentry.getDefaultHub().popScope();
+  };
+  _captureException = (...args) => {
+    window.Sentry.getDefaultHub().pushScope();
+    if (args[1]) {
+      setContextInScope(args[1]);
+    }
+    if (args[0]) {
+      window.Sentry.captureException(args[0]);
+    }
+    window.Sentry.getDefaultHub().popScope();
+  };
+  _showReportDialog = () => {
+    // TODO: eventually implement this
+    window.Sentry.captureMessage('Would have shown report dialog');
+  };
+  _lastEventId = () => {
+    // TODO: eventually implement this
+    window.Sentry.lastEventId('Would have called lastEventId()');
+  };
+});
+
+export default {
+  captureBreadcrumb: (...args) => {
+    return _addBreadcrumb(...args);
+  },
+  addBreadcrumb: (...args) => {
+    return _addBreadcrumb(...args);
+  },
+  captureMessage: (...args) => {
+    return _captureMessage(...args);
+  },
+  captureException: (...args) => {
+    return _captureException(...args);
+  },
+  showReportDialog: (...args) => {
+    return _showReportDialog(...args);
+  },
+  lastEventId: (...args) => {
+    return _lastEventId(...args);
+  },
+};
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 34b02ca1cf..af4b833267 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
 import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
-import Raven from 'raven-js';
 
+import sdk from 'app/utils/sdk';
 import analytics from 'app/utils/analytics';
 import Waiting from 'app/views/onboarding/configure/waiting';
 import ApiMixin from 'app/mixins/apiMixin';
@@ -78,7 +78,7 @@ const Configure = createReactClass({
       },
 
       error: err => {
-        Raven.captureMessage('Polling for events in onboarding configure failed', {
+        sdk.captureMessage('Polling for events in onboarding configure failed', {
           extra: err,
         });
       },
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index 91411702e4..76e29367c5 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -1,10 +1,10 @@
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import styled from 'react-emotion';
 
+import sdk from 'app/utils/sdk';
 import {Panel} from 'app/components/panels';
 import {getPlatformName} from 'app/views/onboarding/utils';
 import {openCreateTeamModal} from 'app/actionCreators/modal';
@@ -81,7 +81,7 @@ const CreateProject = createReactClass({
     this.setState({inFlight: true});
 
     if (!projectName) {
-      Raven.captureMessage('Onboarding no project name ', {
+      sdk.captureMessage('Onboarding no project name ', {
         extra: {props: this.props, state: this.state},
       });
     }
@@ -110,7 +110,7 @@ const CreateProject = createReactClass({
         // * The user not having access to create a project, or,
         // * A project with that slug already exists
         if (err.status !== 403 && err.status !== 409) {
-          Raven.captureMessage('Onboarding project creation failed', {
+          sdk.captureMessage('Onboarding project creation failed', {
             extra: {
               err,
               props: this.props,
diff --git a/src/sentry/static/sentry/app/views/permissionDenied.jsx b/src/sentry/static/sentry/app/views/permissionDenied.jsx
index 4887ff4b9f..15c2cbda7b 100644
--- a/src/sentry/static/sentry/app/views/permissionDenied.jsx
+++ b/src/sentry/static/sentry/app/views/permissionDenied.jsx
@@ -1,9 +1,9 @@
 import {withRouter} from 'react-router';
 import DocumentTitle from 'react-document-title';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 
+import sdk from 'app/utils/sdk';
 import {t, tct} from 'app/locale';
 import ExternalLink from 'app/components/externalLink';
 import LoadingError from 'app/components/loadingError';
@@ -26,7 +26,7 @@ class PermissionDenied extends React.Component {
     let {organization, project} = this.context;
 
     let route = getRouteStringFromRoutes(routes);
-    Raven.captureException(new Error(ERROR_NAME), {
+    sdk.captureException(new Error(ERROR_NAME), {
       fingerprint: [ERROR_NAME, route],
       extra: {
         route,
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 5beacd5d5c..73fc23aa88 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -1,8 +1,9 @@
 import {withRouter} from 'react-router';
 import $ from 'jquery';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
+
+import sdk from 'app/utils/sdk';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 class RouteError extends React.Component {
@@ -30,7 +31,7 @@ class RouteError extends React.Component {
         error.message += `: ${route}`;
       }
 
-      Raven.captureException(error, {
+      sdk.captureException(error, {
         extra: {
           route,
           orgFeatures: (organization && organization.features) || [],
@@ -40,7 +41,7 @@ class RouteError extends React.Component {
       });
       // TODO(dcramer): we do not have errorId until send() is called which
       // has latency in production so this will literally never fire
-      Raven.showReportDialog();
+      sdk.showReportDialog();
     });
   }
 
diff --git a/src/sentry/static/sentry/app/views/routeNotFound.jsx b/src/sentry/static/sentry/app/views/routeNotFound.jsx
index e27406e2c1..4f400c1e42 100644
--- a/src/sentry/static/sentry/app/views/routeNotFound.jsx
+++ b/src/sentry/static/sentry/app/views/routeNotFound.jsx
@@ -1,14 +1,14 @@
 import React from 'react';
-import Raven from 'raven-js';
 import DocumentTitle from 'react-document-title';
 
+import sdk from 'app/utils/sdk';
 import Footer from 'app/components/footer';
 import Sidebar from 'app/components/sidebar';
 import NotFound from 'app/components/errors/notFound';
 
 class RouteNotFound extends React.Component {
   componentDidMount() {
-    Raven.captureException(new Error('Route not found'), {
+    sdk.captureException(new Error('Route not found'), {
       fingerprint: ['RouteNotFound'],
     });
   }
diff --git a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
index c017cede64..58641404e6 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationMembers/inviteMember/index.jsx
@@ -1,10 +1,10 @@
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
-import Raven from 'raven-js';
 import React from 'react';
 import classNames from 'classnames';
 import createReactClass from 'create-react-class';
 
+import sdk from 'app/utils/sdk';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
@@ -89,7 +89,7 @@ const InviteMember = createReactClass({
             },
           });
 
-          Raven.captureMessage('[members]: data fetch invalid response', {
+          sdk.captureMessage('[members]: data fetch invalid response', {
             extra: {resp, state: this.state},
           });
         } else {
@@ -106,7 +106,7 @@ const InviteMember = createReactClass({
           // use the static list
           this.setState({roleList: STATIC_ROLE_LIST, loading: false});
         } else {
-          Raven.captureMessage('[members]: data fetch error ', {
+          sdk.captureMessage('[members]: data fetch error ', {
             extra: {error, state: this.state},
           });
         }
@@ -179,7 +179,7 @@ const InviteMember = createReactClass({
       .then(() => this.redirectToMemberPage())
       .catch(error => {
         if (error && !error.email && !error.role) {
-          Raven.captureMessage('Unknown invite member api response', {
+          sdk.captureMessage('Unknown invite member api response', {
             extra: {error, state: this.state},
           });
         }
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
index 7674fae66e..5ce794e3f4 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectUserFeedback.jsx
@@ -1,8 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import Raven from 'raven-js';
 import styled from 'react-emotion';
 
+import sdk from 'app/utils/sdk';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import Button from 'app/components/buttons/button';
@@ -116,7 +116,7 @@ class ProjectUserFeedbackSettings extends AsyncView {
   }
 
   handleClick = () => {
-    Raven.showReportDialog({
+    sdk.showReportDialog({
       // should never make it to the Sentry API, but just in case, use throwaway id
       eventId: '00000000000000000000000000000000',
     });
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 15527caeaa..74d52b08fa 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -40,7 +40,7 @@ jest.mock('react-lazyload', () => {
   return LazyLoadMock;
 });
 
-jest.mock('raven-js', () => ({
+jest.mock('app/utils/sdk', () => ({
   captureMessage: jest.fn(),
   captureException: jest.fn(),
   showReportDialog: jest.fn(),
diff --git a/tests/js/spec/components/lazyLoad.spec.jsx b/tests/js/spec/components/lazyLoad.spec.jsx
index aef089198f..1f0275d917 100644
--- a/tests/js/spec/components/lazyLoad.spec.jsx
+++ b/tests/js/spec/components/lazyLoad.spec.jsx
@@ -2,8 +2,6 @@ import React from 'react';
 import {shallow, mount} from 'enzyme';
 import LazyLoad from 'app/components/lazyLoad';
 
-jest.mock('raven-js');
-
 describe('LazyLoad', function() {
   it('renders with a loading indicator when promise is not resolved yet', function() {
     let promise = new Promise((resolve, reject) => {});
diff --git a/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
index a0998f44dc..f81a3afa4e 100644
--- a/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
+++ b/tests/js/spec/utils/handleXhrErrorResponse.spec.jsx
@@ -1,7 +1,7 @@
-import Raven from 'raven-js';
 import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
+import sdk from 'app/utils/sdk';
 
-jest.mock('raven-js', () => ({
+jest.mock('app/utils/sdk', () => ({
   captureException: jest.fn(),
 }));
 
@@ -12,27 +12,27 @@ describe('handleXhrErrorResponse', function() {
     responseJSON: {detail: {code: 'api-err-code', message: 'Error message'}},
   };
   beforeEach(function() {
-    Raven.captureException.mockReset();
+    sdk.captureException.mockReset();
   });
 
   it('does nothing if we have invalid response', function() {
     handleXhrErrorResponse('')(null);
-    expect(Raven.captureException).not.toHaveBeenCalled();
+    expect(sdk.captureException).not.toHaveBeenCalled();
     handleXhrErrorResponse('')({});
-    expect(Raven.captureException).not.toHaveBeenCalled();
+    expect(sdk.captureException).not.toHaveBeenCalled();
   });
 
-  it('captures an exception to raven when `resp.detail` is a string', function() {
+  it('captures an exception to sdk when `resp.detail` is a string', function() {
     handleXhrErrorResponse('String error')(stringError);
-    expect(Raven.captureException).toHaveBeenCalledWith(new Error('String error'), {
+    expect(sdk.captureException).toHaveBeenCalledWith(new Error('String error'), {
       status: 400,
       detail: 'Error',
     });
   });
 
-  it('captures an exception to raven when `resp.detail` is an object', function() {
+  it('captures an exception to sdk when `resp.detail` is an object', function() {
     handleXhrErrorResponse('Object error')(objError);
-    expect(Raven.captureException).toHaveBeenCalledWith(new Error('Object error'), {
+    expect(sdk.captureException).toHaveBeenCalledWith(new Error('Object error'), {
       status: 400,
       detail: 'Error message',
       code: 'api-err-code',
@@ -48,6 +48,6 @@ describe('handleXhrErrorResponse', function() {
         },
       },
     });
-    expect(Raven.captureException).not.toHaveBeenCalled();
+    expect(sdk.captureException).not.toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
index 09ba04683e..9c541a62a4 100644
--- a/tests/js/spec/utils/logging.spec.jsx
+++ b/tests/js/spec/utils/logging.spec.jsx
@@ -1,21 +1,12 @@
 import {logAjaxError} from 'app/utils/logging';
-import Raven from 'raven-js';
+import sdk from 'app/utils/sdk';
 
 describe('logging', function() {
-  let sandbox;
-
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
-    sandbox.stub(Raven, 'captureMessage');
-    sandbox.stub(window.console, 'error');
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
-
   describe('logAjaxError()', function() {
+    beforeEach(function() {
+      sdk.captureMessage.mockReset();
+    });
+
     it('should handle (Sentry) JSON responses', function() {
       logAjaxError(
         {
@@ -25,11 +16,11 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy();
-      expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
+      expect(sdk.captureMessage).toHaveBeenCalled();
+      expect(sdk.captureMessage.mock.calls[0][0]).toEqual(
         'HTTP 500: A bad thing happened'
       );
-      expect(Raven.captureMessage.getCall(0).args[1].extra).toEqual({foo: 'bar'});
+      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
     });
 
     it('should handle text/html responses', function() {
@@ -41,21 +32,19 @@ describe('logging', function() {
         {foo: 'bar'} /* context */
       );
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy();
-      expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
+      expect(sdk.captureMessage).toHaveBeenCalled();
+      expect(sdk.captureMessage.mock.calls[0][0]).toEqual(
         'HTTP 401: You are not authenticated'
       );
-      expect(Raven.captureMessage.getCall(0).args[1].extra).toEqual({foo: 'bar'});
+      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
     });
 
     it('should handle responseJSON/responseText undefined (bad content type?)', function() {
       logAjaxError({status: 404}, {foo: 'bar'} /* context */);
 
-      expect(Raven.captureMessage.calledOnce).toBeTruthy();
-      expect(Raven.captureMessage.getCall(0).args[0]).toEqual(
-        'HTTP 404: <unknown response>'
-      );
-      expect(Raven.captureMessage.getCall(0).args[1].extra).toEqual({foo: 'bar'});
+      expect(sdk.captureMessage).toHaveBeenCalled();
+      expect(sdk.captureMessage.mock.calls[0][0]).toEqual('HTTP 404: <unknown response>');
+      expect(sdk.captureMessage.mock.calls[0][1].extra).toEqual({foo: 'bar'});
     });
   });
 });
diff --git a/tests/js/spec/views/routeError.spec.jsx b/tests/js/spec/views/routeError.spec.jsx
index 7029ed1c2a..e485ffbc72 100644
--- a/tests/js/spec/views/routeError.spec.jsx
+++ b/tests/js/spec/views/routeError.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import Raven from 'raven-js';
+import sdk from 'app/utils/sdk';
 
 import {mount} from 'enzyme';
 import {RouteError} from 'app/views/routeError';
@@ -16,7 +16,7 @@ describe('RouteError', function() {
 
     await tick();
 
-    expect(Raven.captureException).toHaveBeenCalledWith(
+    expect(sdk.captureException).toHaveBeenCalledWith(
       expect.objectContaining({
         message: 'Big Bad Error: /:orgId/organizations/:orgId/api-keys/',
       }),
@@ -27,6 +27,6 @@ describe('RouteError', function() {
       })
     );
 
-    expect(Raven.showReportDialog).toHaveBeenCalled();
+    expect(sdk.showReportDialog).toHaveBeenCalled();
   });
 });
diff --git a/webpack.config.js b/webpack.config.js
index c23ae20d2a..90575e1007 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -176,7 +176,6 @@ var appConfig = {
       jQuery: 'jquery',
       'window.jQuery': 'jquery',
       'root.jQuery': 'jquery',
-      Raven: 'raven-js',
     }),
     new ExtractTextPlugin('[name].css'),
     new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/), // ignore moment.js locale files
diff --git a/yarn.lock b/yarn.lock
index 0ce329a30b..912616813e 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -7980,9 +7980,9 @@ range-parser@^1.0.3, range-parser@~1.2.0:
   version "1.2.0"
   resolved "https://registry.yarnpkg.com/range-parser/-/range-parser-1.2.0.tgz#f49be6b487894ddc40dcc94a322f611092e00d5e"
 
-raven-js@3.23.2:
-  version "3.23.2"
-  resolved "https://registry.yarnpkg.com/raven-js/-/raven-js-3.23.2.tgz#b71df14a066e450326b5356cc7fcc035510fdb26"
+raven-js@^3.26.3:
+  version "3.26.3"
+  resolved "https://registry.yarnpkg.com/raven-js/-/raven-js-3.26.3.tgz#0efb49969b5b11ab965f7b0d6da4ca102b763cb0"
 
 raw-body@2.3.2:
   version "2.3.2"
