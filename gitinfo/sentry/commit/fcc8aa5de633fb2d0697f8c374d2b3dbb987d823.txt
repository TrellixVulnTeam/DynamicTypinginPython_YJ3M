commit fcc8aa5de633fb2d0697f8c374d2b3dbb987d823
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Dec 29 14:05:23 2012 -0800

    Clean up API endpoints (and correct public/private toggle)

diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index b48128d475..5013aa727c 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -158,11 +158,9 @@
                 $.ajax({
                     url: $this.attr('data-api-url'),
                     type: 'post',
-                    dataType: 'json',
-                    success: function(groups){
-                        var group = groups[0];
-                        var selector = (group.is_public ? 'true' : 'false');
-                        var nselector = (group.is_public ? 'false' : 'true');
+                    success: function(group){
+                        var selector = (group.isPublic ? 'true' : 'false');
+                        var nselector = (group.isPublic ? 'false' : 'true');
                         $('#public-status span[data-public="' + selector + '"]').show();
                         $('#public-status span[data-public="' + nselector + '"]').hide();
                     },
diff --git a/src/sentry/static/sentry/scripts/views.js b/src/sentry/static/sentry/scripts/views.js
index 0875808187..3be729e86e 100644
--- a/src/sentry/static/sentry/scripts/views.js
+++ b/src/sentry/static/sentry/scripts/views.js
@@ -78,7 +78,7 @@
                     gid: this.model.get('id')
                 },
                 success: _.bind(function(response){
-                    this.model.set('isBookmarked', response.bookmarked);
+                    this.model.set('isBookmarked', response.isBookmarked);
                 }, this)
             });
         },
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 68c48297db..450555bd76 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -98,6 +98,7 @@ class GroupTransformer(Transformer):
             'timeSpent': obj.avg_time_spent,
             'canResolve': request and request.user.is_authenticated(),
             'isResolved': obj.status == STATUS_RESOLVED,
+            'isPublic': obj.is_public,
             'score': getattr(obj, 'sort_value', 0),
             'project': {
                 'name': obj.project.name,
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1839e1eb80..e8381a487c 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -27,7 +27,6 @@ from sentry.coreapi import project_from_auth_vars, \
 from sentry.exceptions import InvalidData
 from sentry.models import Group, GroupBookmark, Project, ProjectCountByMinute, FilterValue
 from sentry.plugins import plugins
-from sentry.templatetags.sentry_helpers import with_metadata
 from sentry.utils import json
 from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
@@ -35,7 +34,7 @@ from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
-from sentry.web.helpers import render_to_response, render_to_string, get_project_list
+from sentry.web.helpers import render_to_response, get_project_list
 
 error_logger = logging.getLogger('sentry.errors.api.http')
 logger = logging.getLogger('sentry.api.http')
@@ -45,33 +44,12 @@ def api(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
         data = func(request, *args, **kwargs)
-        response = HttpResponse(json.dumps(data))
+        response = HttpResponse(data)
         response['Content-Type'] = 'application/json'
         return response
     return wrapped
 
 
-def transform_groups(request, group_list, template='sentry/partial/_group.html'):
-    return [
-        {
-            'id': m.pk,
-            'html': render_to_string(template, {
-                'group': m,
-                'request': request,
-                'metadata': d,
-            }).strip(),
-            'title': m.message_top(),
-            'message': m.error(),
-            'level': m.get_level_display(),
-            'logger': m.logger,
-            'count': m.times_seen,
-            'is_public': m.is_public,
-            'score': getattr(m, 'sort_value', None),
-        }
-        for m, d in with_metadata(group_list, request)
-    ]
-
-
 class Auth(object):
     def __init__(self, auth_vars):
         self.client = auth_vars.get('sentry_client')
@@ -274,6 +252,7 @@ def notification(request, project):
 @csrf_exempt
 @has_access
 @never_cache
+@api
 def poll(request, project):
     offset = 0
     limit = settings.MESSAGES_PER_PAGE
@@ -286,16 +265,13 @@ def poll(request, project):
     event_list = response['event_list']
     event_list = list(event_list[offset:limit])
 
-    data = to_json(event_list, request)
-
-    response = HttpResponse(data)
-    response['Content-Type'] = 'application/json'
-    return response
+    return to_json(event_list, request)
 
 
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
+@api
 def resolve(request, project):
     gid = request.REQUEST.get('gid')
     if not gid:
@@ -314,16 +290,13 @@ def resolve(request, project):
     group.status = 1
     group.resolved_at = now
 
-    data = transform_groups(request, [group])
-
-    response = HttpResponse(json.dumps(data))
-    response['Content-Type'] = 'application/json'
-    return response
+    return to_json(group, request)
 
 
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
+@api
 def make_group_public(request, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
@@ -332,12 +305,13 @@ def make_group_public(request, project, group_id):
 
     group.update(is_public=True)
 
-    return transform_groups(request, [group])
+    return to_json(group, request)
 
 
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
+@api
 def make_group_private(request, project, group_id):
     try:
         group = Group.objects.get(pk=group_id)
@@ -346,7 +320,7 @@ def make_group_private(request, project, group_id):
 
     group.update(is_public=False)
 
-    return transform_groups(request, [group])
+    return to_json(group, request)
 
 
 @csrf_exempt
@@ -361,7 +335,7 @@ def mute_group(request, project, group_id):
 
     group.update(status=STATUS_MUTED)
 
-    return transform_groups(request, [group])
+    return to_json(group, request)
 
 
 @csrf_exempt
@@ -376,7 +350,7 @@ def unmute_group(request, project, group_id):
 
     group.update(status=STATUS_UNRESOLVED)
 
-    return transform_groups(request, [group])
+    return to_json(group, request)
 
 
 @csrf_exempt
@@ -401,6 +375,7 @@ def remove_group(request, project, group_id):
 @csrf_exempt
 @has_access
 @never_cache
+@api
 def bookmark(request, project):
     gid = request.REQUEST.get('gid')
     if not gid:
@@ -422,9 +397,7 @@ def bookmark(request, project):
     if not created:
         gb.delete()
 
-    response = HttpResponse(json.dumps({'bookmarked': created}))
-    response['Content-Type'] = 'application/json'
-    return response
+    return to_json(group, request)
 
 
 @csrf_exempt
