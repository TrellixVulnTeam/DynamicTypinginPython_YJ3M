commit 7b061cd9f1a3a454d99e08f97f5d11b54c553493
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue May 21 11:42:08 2019 -0700

    fix(slack): use oauth.token over oauth.access for legacy WST app
    
    While the WST apps can use the oauth.access (as pointed out by @hwz,
    this endpoint does not return the authorizing_user_id, thus we must
    continue to use the legacy oauth.token endpoint for slack OAuth token
    access token retrieval.
    
    Fixes ISSUE-483

diff --git a/src/sentry/identity/slack/provider.py b/src/sentry/identity/slack/provider.py
index 2d08299bf7..03cadd6fb8 100644
--- a/src/sentry/identity/slack/provider.py
+++ b/src/sentry/identity/slack/provider.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.conf import settings
+
 from sentry import options
 from sentry.identity.oauth2 import OAuth2Provider
 
@@ -10,7 +12,6 @@ class SlackIdentityProvider(OAuth2Provider):
 
     # This identity provider is used for authorizing the Slack application
     # through their Bot token (or legacy Workspace Token if enabled) flow.
-    oauth_access_token_url = 'https://slack.com/api/oauth.access'
     oauth_authorize_url = 'https://slack.com/oauth/authorize'
 
     oauth_scopes = (
@@ -18,6 +19,13 @@ class SlackIdentityProvider(OAuth2Provider):
         'identity.email',
     )
 
+    # XXX(epurkhiser): While workspace tokens _do_ support the oauth.access
+    # endpoint, it will no include the authorizing_user, so we continue to use
+    # the deprecated oauth.token endpoint until we are able to migrate to a bot
+    # app which uses oauth.access.
+    def get_oauth_access_token_url(self):
+        return 'https://slack.com/api/oauth.token' if settings.SLACK_INTEGRATION_USE_WST else 'https://slack.com/api/oauth.access'
+
     def get_oauth_client_id(self):
         return options.get('slack.client-id')
 
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
index cc085d8c40..f6dc3c5b0e 100644
--- a/tests/sentry/integrations/slack/test_integration.py
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -15,7 +15,8 @@ class SlackIntegrationTest(IntegrationTestCase):
     provider = SlackIntegrationProvider
 
     def assert_setup_flow(self, team_id='TXXXXXXX1', authorizing_user_id='UXXXXXXX1',
-                          access_token='xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx', access_extras=None):
+                          access_token='xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx', access_extras=None,
+                          use_oauth_token_endpoint=True):
         responses.reset()
 
         resp = self.client.get(self.init_path)
@@ -45,10 +46,18 @@ class SlackIntegrationTest(IntegrationTestCase):
         if access_extras is not None:
             access_json.update(access_extras)
 
-        responses.add(
-            responses.POST, 'https://slack.com/api/oauth.access',
-            json=access_json,
-        )
+        # XXX(epurkhiser): The slack workspace token app uses oauth.token, the
+        # slack bot app uses oauth.access.
+        if use_oauth_token_endpoint:
+            responses.add(
+                responses.POST, 'https://slack.com/api/oauth.token',
+                json=access_json,
+            )
+        else:
+            responses.add(
+                responses.POST, 'https://slack.com/api/oauth.access',
+                json=access_json,
+            )
 
         responses.add(
             responses.GET, 'https://slack.com/api/auth.test',
@@ -91,6 +100,7 @@ class SlackIntegrationTest(IntegrationTestCase):
     @responses.activate
     def test_bot_flow(self):
         self.assert_setup_flow(
+            use_oauth_token_endpoint=False,
             access_token='xoxa-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx',
             access_extras={
                 'bot': {
