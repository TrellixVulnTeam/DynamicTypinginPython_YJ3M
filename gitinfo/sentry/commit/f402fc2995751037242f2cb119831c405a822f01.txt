commit f402fc2995751037242f2cb119831c405a822f01
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 18 00:41:52 2014 -0700

    Sudo mode

diff --git a/src/sentry/templates/sentry/account/sudo.html b/src/sentry/templates/sentry/account/sudo.html
new file mode 100644
index 0000000000..ceee167eba
--- /dev/null
+++ b/src/sentry/templates/sentry/account/sudo.html
@@ -0,0 +1,29 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Verify Password" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Verify Password" %}</h2>
+        </div>
+        <p>{% blocktrans %}You need to verify your password to continue.{% endblocktrans %}</p>
+
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+
+            {{ form|as_crispy_errors }}
+
+            {% for field in form %}
+                {{ field|as_crispy_field }}
+            {% endfor %}
+
+            <fieldset class="form-actions">
+                <button type="submit" class="btn btn-primary">{% trans "Verify Password" %}</button>
+            </fieldset>
+        </form>
+    </section>
+{% endblock %}
diff --git a/src/sentry/utils/sudo.py b/src/sentry/utils/sudo.py
new file mode 100644
index 0000000000..038cfb28d8
--- /dev/null
+++ b/src/sentry/utils/sudo.py
@@ -0,0 +1,72 @@
+"""
+sentry.utils.sudo
+~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from functools import wraps
+from urlparse import urlparse, urlunparse
+
+from django.conf import settings
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect, QueryDict
+from django.utils.crypto import get_random_string
+
+SUDO_COOKIE_NAME = getattr(settings, 'SUDO_COOKIE_NAME', 'sudo')
+
+
+def grant_sudo_privileges(request, response, max_age=3600):
+    """
+    Assigns a random token to the user's session that allows them to have elevated permissions
+    """
+    # Token doesn't need to be unique, just needs to be unpredictable and match the cookie and the session
+    token = get_random_string()
+    request.session[SUDO_COOKIE_NAME] = token
+    request.session.modified = True
+    response.set_cookie(
+        SUDO_COOKIE_NAME, token,
+        max_age=max_age,  # If max_age is None, it's a session cookie
+        secure=request.is_secure(),
+        httponly=True,  # Not accessible by JavaScript
+    )
+    return response
+
+
+def has_sudo_privileges(request):
+    """
+    Check if a request is allowed to perform sudo actions
+    """
+    try:
+        return (
+            request.user.is_authenticated() and
+            request.COOKIES[SUDO_COOKIE_NAME] == request.session[SUDO_COOKIE_NAME]
+        )
+    except KeyError:
+        pass
+    return False
+
+
+def redirect_to_sudo(next_url):
+    """
+    Redirects the user to the login page, passing the given 'next' page
+    """
+    sudo_url_parts = list(urlparse(reverse('sentry-sudo')))
+
+    querystring = QueryDict(sudo_url_parts[4], mutable=True)
+    querystring['next'] = next_url
+    sudo_url_parts[4] = querystring.urlencode(safe='/')
+
+    return HttpResponseRedirect(urlunparse(sudo_url_parts))
+
+
+def sudo_required(func):
+    """
+    Enforces a view to have elevated privileges
+    """
+    @wraps(func)
+    def inner(request, *args, **kwargs):
+        if not has_sudo_privileges(request):
+            return redirect_to_sudo(request.get_full_path())
+        return func(request, *args, **kwargs)
+    return inner
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 1e829ba4d3..cb32d3477c 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -288,3 +288,16 @@ class ProjectEmailOptionsForm(forms.Form):
         else:
             UserOption.objects.unset_value(
                 self.user, self.project, 'mail:email')
+
+
+class SudoForm(forms.Form):
+    password = forms.CharField(widget=forms.PasswordInput())
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(SudoForm, self).__init__(*args, **kwargs)
+
+    def clean_password(self):
+        if not self.user.check_password(self.data['password']):
+            raise forms.ValidationError(_('Invalid password.'))
+        return self.data['password']
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 01d6ff38f6..ae25e0831f 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -24,10 +24,12 @@ from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm, AuthenticationForm)
+    ProjectEmailOptionsForm, AuthenticationForm, SudoForm)
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
+from sentry.utils.sudo import (
+    grant_sudo_privileges, has_sudo_privileges, sudo_required)
 
 
 @csrf_protect
@@ -41,7 +43,9 @@ def login(request):
     form = AuthenticationForm(request, request.POST or None)
     if form.is_valid():
         login_user(request, form.get_user())
-        return login_redirect(request)
+        response = login_redirect(request)
+        grant_sudo_privileges(request, response)
+        return response
 
     request.session.set_test_cookie()
 
@@ -56,6 +60,28 @@ def login(request):
     return render_to_response('sentry/login.html', context, request)
 
 
+@never_cache
+@csrf_protect
+@login_required
+def sudo(request):
+    redirect_to = request.GET.get('next', '/')
+
+    if has_sudo_privileges(request):
+        return HttpResponseRedirect(redirect_to)
+
+    form = SudoForm(request.user, request.POST or None)
+    if request.method == 'POST':
+        if form.is_valid():
+            response = HttpResponseRedirect(redirect_to)
+            return grant_sudo_privileges(request, response)
+
+    context = {
+        'form': form,
+        'next': redirect_to,
+    }
+    return render_to_response('sentry/account/sudo.html', context, request)
+
+
 @csrf_protect
 @never_cache
 @transaction.commit_on_success
@@ -174,6 +200,7 @@ def recover_confirm(request, user_id, hash):
 @csrf_protect
 @never_cache
 @login_required
+@sudo_required
 @transaction.commit_on_success
 def settings(request):
     form = AccountSettingsForm(request.user, request.POST or None, initial={
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 97b41bdffe..da3ffed479 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -72,6 +72,8 @@ urlpatterns += patterns('',
         name='sentry-logout'),
     url(r'^register/$', accounts.register,
         name='sentry-register'),
+    url(r'^account/sudo/$', accounts.sudo,
+        name='sentry-sudo'),
     url(r'^account/recover/$', accounts.recover,
         name='sentry-account-recover'),
     url(r'^account/recover/confirm/(?P<user_id>[\d]+)/(?P<hash>[0-9a-zA-Z]+)/$', accounts.recover_confirm,
