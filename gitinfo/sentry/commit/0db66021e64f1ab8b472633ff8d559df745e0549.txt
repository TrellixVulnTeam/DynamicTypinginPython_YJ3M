commit 0db66021e64f1ab8b472633ff8d559df745e0549
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Sun Mar 15 21:55:58 2020 -0700

    chore(ts): Convert highlight (#17672)

diff --git a/src/sentry/static/sentry/app/components/highlight.jsx b/src/sentry/static/sentry/app/components/highlight.jsx
deleted file mode 100644
index e850263aa1..0000000000
--- a/src/sentry/static/sentry/app/components/highlight.jsx
+++ /dev/null
@@ -1,56 +0,0 @@
-import React from 'react';
-import PropTypes from 'prop-types';
-import styled from '@emotion/styled';
-
-class HighlightComponent extends React.Component {
-  static propTypes = {
-    /**
-     * The text to highlight
-     */
-    text: PropTypes.string,
-
-    /**
-     * Should highlighting be disabled?
-     */
-    disabled: PropTypes.bool,
-
-    /**
-     * The original text (MUST be a string)
-     */
-    children: PropTypes.string,
-  };
-
-  render() {
-    const {className, children, disabled, text} = this.props;
-
-    if (!text || disabled) {
-      return children;
-    }
-
-    const highlightText = text.toLowerCase();
-    const idx = children.toLowerCase().indexOf(highlightText);
-
-    if (idx === -1) {
-      return children;
-    }
-
-    return (
-      <React.Fragment>
-        {children.substr(0, idx)}
-        <span className={className}>{children.substr(idx, highlightText.length)}</span>
-        {children.substr(idx + highlightText.length)}
-      </React.Fragment>
-    );
-  }
-}
-
-const Highlight = styled(HighlightComponent)`
-  font-weight: normal;
-  background-color: ${p => p.theme.yellowLight};
-  color: ${p => p.theme.gray4};
-`;
-
-Highlight.propTypes = HighlightComponent.propTypes;
-
-export default Highlight;
-export {HighlightComponent};
diff --git a/src/sentry/static/sentry/app/components/highlight.tsx b/src/sentry/static/sentry/app/components/highlight.tsx
new file mode 100644
index 0000000000..452962036b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/highlight.tsx
@@ -0,0 +1,50 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+type HighlightProps = {
+  /**
+   * The text to highlight
+   */
+  text: string;
+  /**
+   * Should highlighting be disabled?
+   */
+  disabled?: boolean;
+  /**
+   * The original text
+   */
+  children: string;
+};
+
+type Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof HighlightProps> &
+  HighlightProps;
+
+const HighlightComponent = ({className, children, disabled, text}: Props) => {
+  if (!text || disabled) {
+    return <React.Fragment>{children}</React.Fragment>;
+  }
+
+  const highlightText = text.toLowerCase();
+  const idx = children.toLowerCase().indexOf(highlightText);
+
+  if (idx === -1) {
+    return <React.Fragment>{children}</React.Fragment>;
+  }
+
+  return (
+    <React.Fragment>
+      {children.substr(0, idx)}
+      <span className={className}>{children.substr(idx, highlightText.length)}</span>
+      {children.substr(idx + highlightText.length)}
+    </React.Fragment>
+  );
+};
+
+const Highlight = styled(HighlightComponent)`
+  font-weight: normal;
+  background-color: ${p => p.theme.yellowLight};
+  color: ${p => p.theme.gray4};
+`;
+
+export default Highlight;
+export {HighlightComponent};
