commit b92632a7887de882bf0f68401565a8c371093bfa
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 29 13:36:49 2016 -0700

    Add isSubscribed to group serialization

diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 0fed79b5db..fac0d170b3 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -10,7 +10,8 @@ from sentry.app import tsdb
 from sentry.constants import LOG_LEVELS
 from sentry.models import (
     Group, GroupAssignee, GroupBookmark, GroupMeta, GroupResolution,
-    GroupResolutionStatus, GroupSeen, GroupSnooze, GroupStatus, GroupTagKey
+    GroupResolutionStatus, GroupSeen, GroupSnooze, GroupSubscription,
+    GroupStatus, GroupTagKey
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
@@ -35,9 +36,15 @@ class GroupSerializer(Serializer):
                 user=user,
                 group__in=item_list,
             ).values_list('group_id', 'last_seen'))
+            subscriptions = set(GroupSubscription.objects.filter(
+                group__in=item_list,
+                user=user,
+                is_active=True,
+            ).values_list('group_id', flat=True))
         else:
             bookmarks = set()
             seen_groups = {}
+            subscriptions = set()
 
         assignees = dict(
             (a.group_id, a.user)
@@ -81,6 +88,7 @@ class GroupSerializer(Serializer):
             result[item] = {
                 'assigned_to': serialize(assignees.get(item.id)),
                 'is_bookmarked': item.id in bookmarks,
+                'is_subscribed': item.id in subscriptions,
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
                 'annotations': annotations,
                 'user_count': user_counts.get(item.id, 0),
@@ -152,6 +160,7 @@ class GroupSerializer(Serializer):
             'numComments': obj.num_comments,
             'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
+            'isSubscribed': attrs['is_subscribed'],
             'hasSeen': attrs['has_seen'],
             'annotations': attrs['annotations'],
         }
diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 2269ea2761..557bffedf0 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -72,8 +72,6 @@ class GroupSubscriptionManager(BaseManager):
                 ).values_list('user', flat=True)
             )
 
-            print excluded
-
             if excluded:
                 users = users.exclude(
                     id__in=excluded,
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index 99ed1a88b1..f17fdb3f8f 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -8,7 +8,8 @@ from mock import patch
 
 from sentry.api.serializers import serialize
 from sentry.models import (
-    GroupResolution, GroupResolutionStatus, GroupSnooze, GroupStatus, Release
+    GroupResolution, GroupResolutionStatus, GroupSnooze, GroupSubscription,
+    GroupStatus, Release
 )
 from sentry.testutils import TestCase
 
@@ -91,3 +92,44 @@ class GroupSerializerTest(TestCase):
         result = serialize(group, user)
         assert result['status'] == 'resolved'
         assert result['statusDetails'] == {'autoResolved': True}
+
+    def test_subscribed(self):
+        user = self.create_user()
+        group = self.create_group()
+
+        GroupSubscription.objects.create(
+            user=user,
+            group=group,
+            project=group.project,
+            is_active=True,
+        )
+
+        result = serialize(group, user)
+        assert result['isSubscribed']
+
+    def test_explicit_unsubscribed(self):
+        user = self.create_user()
+        group = self.create_group()
+
+        GroupSubscription.objects.create(
+            user=user,
+            group=group,
+            project=group.project,
+            is_active=False,
+        )
+
+        result = serialize(group, user)
+        assert not result['isSubscribed']
+
+    def test_implicit_unsubscribed(self):
+        user = self.create_user()
+        group = self.create_group()
+
+        result = serialize(group, user)
+        assert not result['isSubscribed']
+
+    def test_no_user_unsubscribed(self):
+        group = self.create_group()
+
+        result = serialize(group)
+        assert not result['isSubscribed']
