commit 383996800b6244e7a477e4ec1c367b1551ed04db
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Jul 19 13:13:46 2017 -0700

    south: replace new data migration template with better error handling

diff --git a/src/south/management/commands/datamigration.py b/src/south/management/commands/datamigration.py
index c3175e73f7..9fe239f5aa 100644
--- a/src/south/management/commands/datamigration.py
+++ b/src/south/management/commands/datamigration.py
@@ -32,26 +32,26 @@ class Command(BaseCommand):
     )
     help = "Creates a new template data migration for the given app"
     usage_str = "Usage: ./manage.py datamigration appname migrationname [--stdout] [--freeze appname]"
-    
+
     def handle(self, app=None, name="", freeze_list=None, stdout=False, verbosity=1, **options):
 
         verbosity = int(verbosity)
-        
+
         # Any supposed lists that are None become empty lists
         freeze_list = freeze_list or []
 
         # --stdout means name = -
         if stdout:
             name = "-"
-	
+
         # Only allow valid names
         if re.search('[^_\w]', name) and name != "-":
             self.error("Migration names should contain only alphanumeric characters and underscores.")
-        
+
         # If not name, there's an error
         if not name:
             self.error("You must provide a name for this migration.\n" + self.usage_str)
-        
+
         if not app:
             self.error("You must provide an app to create a migration for.\n" + self.usage_str)
 
@@ -60,22 +60,22 @@ class Command(BaseCommand):
             verbosity = int(verbosity)
         except ValueError:
             self.error("Verbosity must be an number.\n" + self.usage_str)
-            
+
         # Get the Migrations for this app (creating the migrations dir if needed)
         migrations = Migrations(app, force_creation=True, verbose_creation=verbosity > 0)
-        
+
         # See what filename is next in line. We assume they use numbers.
         new_filename = migrations.next_filename(name)
-        
+
         # Work out which apps to freeze
         apps_to_freeze = self.calc_frozen_apps(migrations, freeze_list)
-        
+
         # So, what's in this file, then?
         file_contents = self.get_migration_template() % {
             "frozen_models":  freezer.freeze_apps_to_string(apps_to_freeze),
             "complete_apps": apps_to_freeze and "complete_apps = [%s]" % (", ".join(map(repr, apps_to_freeze))) or ""
         }
-        
+
         # - is a special name which means 'print to stdout'
         if name == "-":
             print(file_contents)
@@ -85,7 +85,7 @@ class Command(BaseCommand):
             fp.write(file_contents)
             fp.close()
             print("Created %s." % new_filename, file=sys.stderr)
-    
+
     def calc_frozen_apps(self, migrations, freeze_list):
         """
         Works out, from the current app, settings, and the command line options,
@@ -103,7 +103,7 @@ class Command(BaseCommand):
         if getattr(settings, 'SOUTH_AUTO_FREEZE_APP', True):
             apps_to_freeze.append(migrations.app_label())
         return apps_to_freeze
-    
+
     def error(self, message, code=1):
         """
         Prints the error, and exits with the given code.
@@ -124,8 +124,17 @@ from django.db import models
 class Migration(DataMigration):
 
     def forwards(self, orm):
+        db.commit_transaction()
+        try:
+            self._forwards(orm)
+        except Exception:
+            db.start_transaction()
+            raise
+        db.start_transaction()
+
+    def _forwards(self, orm):
         "Write your forwards methods here."
-        # Note: Don't use "from appname.models import ModelName". 
+        # Note: Don't use "from appname.models import ModelName".
         # Use orm.ModelName to refer to models in this application,
         # and orm['appname.ModelName'] for models in other applications.
 
