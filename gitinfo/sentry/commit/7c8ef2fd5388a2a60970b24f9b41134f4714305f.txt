commit 7c8ef2fd5388a2a60970b24f9b41134f4714305f
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 21 13:40:19 2015 -0700

    Handle existing identity, but non-existing membership

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index c432d331d9..90d9691ebf 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -134,6 +134,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             ).exclude(id=om.id)[0].user
             organization.save()
 
+        # TODO(dcramer): we should probably clean up AuthIdentity here
         om.delete()
 
         self.create_audit_entry(
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index a90cc4938e..3619b99d0c 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -282,6 +282,16 @@ class AuthHelper(object):
             data=identity.get('data', {}),
         )
 
+        self._handle_new_membership(auth_identity)
+
+        return auth_identity
+
+    def _handle_new_membership(self, identity):
+        auth_provider = self.auth_provider
+        organization = self.organization
+        request = self.request
+        user = identity.user
+
         om = OrganizationMember.objects.create(
             organization=organization,
             type=auth_provider.default_role,
@@ -304,7 +314,7 @@ class AuthHelper(object):
             data=om.get_audit_log_data(),
         )
 
-        return auth_identity
+        return om
 
     @transaction.atomic
     def _finish_login_pipeline(self, identity):
@@ -351,14 +361,20 @@ class AuthHelper(object):
                 last_synced=now,
             )
 
-            member = OrganizationMember.objects.get(
-                user=auth_identity.user,
-                organization=self.organization,
-            )
-            if getattr(member.flags, 'sso:invalid') or not getattr(member.flags, 'sso:linked'):
-                setattr(member.flags, 'sso:invalid', False)
-                setattr(member.flags, 'sso:linked', True)
-                member.save()
+            try:
+                member = OrganizationMember.objects.get(
+                    user=auth_identity.user,
+                    organization=self.organization,
+                )
+            except OrganizationMember.DoesNotExist:
+                # this is likely the case when someone was removed from the org
+                # but still has access to rejoin
+                member = self._handle_new_membership(auth_identity)
+            else:
+                if getattr(member.flags, 'sso:invalid') or not getattr(member.flags, 'sso:linked'):
+                    setattr(member.flags, 'sso:invalid', False)
+                    setattr(member.flags, 'sso:linked', True)
+                    member.save()
 
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
