commit a258a6dc2f9b1e08303bd8956340bed6f8fdd84a
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Apr 20 11:33:27 2017 +0200

    Killed old reprocessing hint

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index e5bd1b458c..aabf9c1575 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -144,7 +144,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
             'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
             'sentry:default_environment': project.get_option('sentry:default_environment'),
-            'sentry:reprocessing_show_hint': bool(project.get_option('sentry:reprocessing_show_hint', True)),
             'sentry:reprocessing_active': bool(project.get_option('sentry:reprocessing_active', False)),
             'filters:blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
             'feedback:branding': project.get_option('feedback:branding', '1') == '1',
@@ -290,9 +289,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             if 'sentry:reprocessing_active' in options:
                 project.update_option('sentry:reprocessing_active',
                     bool(options['sentry:reprocessing_active']))
-            if 'sentry:reprocessing_show_hint' in options:
-                project.update_option('sentry:reprocessing_show_hint',
-                    bool(options['sentry:reprocessing_show_hint']))
             if 'filters:blacklisted_ips' in options:
                 project.update_option(
                     'sentry:blacklisted_ips',
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 519fe4ea0e..6b3d4d6a57 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -5,7 +5,6 @@ import EventContexts from './contexts';
 import EventContextSummary from './contextSummary';
 import EventDataSection from './eventDataSection';
 import EventErrors from './errors';
-import ReprocessingHint from './reprocessingHint';
 import EventExtraData from './extraData';
 import EventPackageData from './packageData';
 import EventTags from './eventTags';
@@ -113,13 +112,6 @@ const EventEntries = React.createClass({
     return (
       <div className="entries">
         {evt.userReport && <EventUserReport group={group} event={evt} />}
-        {!utils.objectIsEmpty(evt.errors) &&
-          <ReprocessingHint
-            group={group}
-            event={evt}
-            orgId={this.props.orgId}
-            projectId={project.slug}
-          />}
         {!utils.objectIsEmpty(evt.errors) && <EventErrors group={group} event={evt} />}
         {!utils.objectIsEmpty(evt.sdk) &&
           evt.sdk.upstream.isNewer &&
diff --git a/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx b/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
deleted file mode 100644
index 073e22b180..0000000000
--- a/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
+++ /dev/null
@@ -1,134 +0,0 @@
-import React from 'react';
-
-import EventDataSection from './eventDataSection';
-import PropTypes from '../../proptypes';
-import ProjectState from '../../mixins/projectState';
-import ApiMixin from '../../mixins/apiMixin';
-import ReactCSSTransitionGroup from 'react-addons-css-transition-group';
-import {t} from '../../locale';
-
-const ReprocessingHint = React.createClass({
-  propTypes: {
-    group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
-    orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired
-  },
-
-  mixins: [ProjectState, ApiMixin],
-
-  getInitialState() {
-    return {
-      hideHint: false,
-      loading: true,
-      projectSettings: null
-    };
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  shouldComponentUpdate(nextProps, nextState) {
-    if (this.state.hideHint != nextState.hideHint) {
-      return true;
-    }
-    if (this.state.projectSettings != nextState.projectSettings) {
-      return true;
-    }
-    if (this.state.loading != nextState.loading) {
-      return true;
-    }
-    return this.props.event.id !== nextProps.event.id;
-  },
-
-  fetchData() {
-    if (this.state.projectSettings !== null) {
-      return;
-    }
-    this.setState({
-      loading: true
-    });
-    this.api.request(`/projects/${this.props.orgId}/${this.props.projectId}/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          projectSettings: data.options
-        });
-      },
-      complete: () => {
-        this.setState({
-          loading: false
-        });
-      }
-    });
-  },
-
-  hide() {
-    this.setState({hideHint: !this.state.hideHint});
-    // Fire and forget
-    this.api.request(`/projects/${this.props.orgId}/${this.props.projectId}/`, {
-      method: 'PUT',
-      data: {options: {'sentry:reprocessing_show_hint': false}}
-    });
-  },
-
-  renderHint() {
-    let link = `/${this.props.orgId}/${this.props.projectId}/settings/processing-issues/`;
-
-    return (
-      <EventDataSection
-        group={this.props.group}
-        event={this.props.event}
-        type="hint"
-        className="errors hint"
-      >
-        <span className="icon icon-question event" />
-        <p>
-          <a className="pull-right" onClick={this.hide}>{t('Dismiss')}</a>
-          {t('Errors like these can be fixed with reprocessing')}
-          {' '}
-          <small><a style={{marginLeft: 10}} href={link}>{t('Show me')}</a></small>
-        </p>
-      </EventDataSection>
-    );
-  },
-
-  render() {
-    let errors = this.props.event.errors;
-    let hideHint = this.state.hideHint;
-    let shouldRender = true;
-
-    if (hideHint || this.state.loading || this.state.projectSettings === null) {
-      shouldRender = false;
-    }
-
-    if (
-      this.state.projectSettings !== null &&
-      (this.state.projectSettings['sentry:reprocessing_show_hint'] === false ||
-        this.state.projectSettings['sentry:reprocessing_active'] === true)
-    ) {
-      shouldRender = false;
-    }
-
-    let reprocessingFixable = false;
-    errors.map(error => {
-      if (error.type == 'native_missing_dsym') {
-        reprocessingFixable = true;
-      }
-    });
-
-    shouldRender = shouldRender && reprocessingFixable;
-
-    return (
-      <ReactCSSTransitionGroup
-        transitionName="hint"
-        transitionEnterTimeout={500}
-        transitionLeaveTimeout={500}
-      >
-        {shouldRender ? this.renderHint() : null}
-      </ReactCSSTransitionGroup>
-    );
-  }
-});
-
-export default ReprocessingHint;
