commit 67e7e10ff031d66c2472f077c682398a7be9de5a
Author: Ted Kaemming <ted@kaemming.com>
Date:   Fri Feb 26 12:18:38 2016 -0800

    Revert TSDB validation changes.
    
    Reverting these changes until they can be better tested.
    
    Revert "Merge pull request #2748 from getsentry/tsdb-rollup-validation"
    
    This reverts commit 5fa4e0c2ac43474a2200e14742883cbbb1f4fd43, reversing
    changes made to 6e682829ed3653589144f49155eaa08140b52e93.
    
    Revert "Don't request trailing hour statistics when fetching organization stats."
    
    This reverts commit d1393c597e4768bad73f6e01c33381a8b720190d.
    
    Revert "Don't request trailing hour statistics when fetching project dashboard statistics."
    
    This reverts commit 54d6344868589f287222753a9c0a1d79caebbb64.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 501bbcc5b7..b036077256 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -192,7 +192,8 @@ class StatsMixin(object):
         resolution = request.GET.get('resolution')
         if resolution:
             resolution = self._parse_resolution(resolution)
-            assert resolution in tsdb.rollups
+
+            assert any(r for r in tsdb.rollups if r[0] == resolution)
 
         end = request.GET.get('until')
         if end:
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index fea23c5904..5490278e53 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -762,6 +762,7 @@ SENTRY_SEARCH_OPTIONS = {}
 SENTRY_TSDB = 'sentry.tsdb.dummy.DummyTSDB'
 SENTRY_TSDB_OPTIONS = {}
 
+# rollups must be ordered from highest granularity to lowest
 SENTRY_TSDB_ROLLUPS = (
     # (time in seconds, samples to keep)
     (10, 360),  # 60 minutes at 10 seconds
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index fb7a675fef..cab5a5f99e 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -18,7 +18,7 @@ const OrganizationStats = React.createClass({
 
   getInitialState() {
     let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * ((24 * 7) - 1);
+    let since = until - 3600 * 24 * 7;
 
     return {
       projectsError: false,
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index f288da8c11..50a47c451c 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -57,9 +57,9 @@ const ProjectDashboard = React.createClass({
     let now = new Date().getTime() / 1000;
     switch (statsPeriod) {
       case PERIOD_WEEK:
-        return now - 3600 * ((24 * 7) - 1);
+        return now - 3600 * 24 * 7;
       case PERIOD_HOUR:
-        return now - 3600 + 10;
+        return now - 3600;
       case PERIOD_DAY:
       default:
         return now - 3600 * 24;
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index e12738e558..257f016229 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -7,8 +7,6 @@ sentry.tsdb.base
 """
 from __future__ import absolute_import
 
-from collections import OrderedDict
-from datetime import timedelta
 from django.conf import settings
 from django.utils import timezone
 from enum import Enum
@@ -69,7 +67,7 @@ class BaseTSDB(object):
     models = TSDBModel
 
     def __init__(self, rollups=settings.SENTRY_TSDB_ROLLUPS):
-        self.rollups = OrderedDict(sorted(rollups, key=lambda (duration, samples): duration))
+        self.rollups = rollups
 
     def validate(self):
         """
@@ -108,25 +106,18 @@ class BaseTSDB(object):
         """
         return int(epoch / seconds)
 
-    def get_optimal_rollup(self, start_timestamp, end_timestamp, rollup=None):
+    def get_optimal_rollup(self, start_timestamp, end_timestamp):
         """
+        Identify the lowest granularity rollup available within the given time
+        range.
         """
-        now = timezone.now()
+        num_seconds = int(to_timestamp(end_timestamp)) - int(to_timestamp(start_timestamp))
 
-        def satisfies_range((duration, samples)):
-            retention = timedelta(seconds=duration * samples)
-            return start_timestamp >= (now - retention)
-
-        if rollup is None:
-            rollups = filter(satisfies_range, self.rollups.items())
-            assert rollups, 'could not find rollup that satisfies range'
-            rollup = rollups[0][0]
-        else:
-            samples = self.rollups.get(rollup)
-            assert samples is not None, 'invalid rollup: {}'.format(rollup)
-            assert satisfies_range((rollup, samples))
-
-        return rollup
+        # calculate the highest rollup within time range
+        for rollup, samples in self.rollups:
+            if rollup * samples >= num_seconds:
+                return rollup
+        return self.rollups[-1][0]
 
     def get_optimal_rollup_series(self, start, end=None, rollup=None):
         if end is None:
@@ -134,7 +125,8 @@ class BaseTSDB(object):
 
         # NOTE: "optimal" here means "able to most closely reflect the upper
         # and lower bounds", not "able to construct the most efficient query"
-        rollup = self.get_optimal_rollup(start, end, rollup)
+        if rollup is None:
+            rollup = self.get_optimal_rollup(start, end)
 
         series = [self.normalize_to_epoch(start, rollup)]
         end_ts = int(to_timestamp(end))
diff --git a/src/sentry/tsdb/inmemory.py b/src/sentry/tsdb/inmemory.py
index 95a5978022..65c760004e 100644
--- a/src/sentry/tsdb/inmemory.py
+++ b/src/sentry/tsdb/inmemory.py
@@ -29,7 +29,7 @@ class InMemoryTSDB(BaseTSDB):
         if timestamp is None:
             timestamp = timezone.now()
 
-        for rollup, max_values in self.rollups.items():
+        for rollup, max_values in self.rollups:
             norm_epoch = self.normalize_to_rollup(timestamp, rollup)
             self.data[model][key][norm_epoch] += count
 
@@ -37,7 +37,8 @@ class InMemoryTSDB(BaseTSDB):
         normalize_to_epoch = self.normalize_to_epoch
         normalize_to_rollup = self.normalize_to_rollup
 
-        rollup = self.get_optimal_rollup(start, end, rollup)
+        if rollup is None:
+            rollup = self.get_optimal_rollup(start, end)
 
         results = []
         timestamp = end
@@ -63,7 +64,7 @@ class InMemoryTSDB(BaseTSDB):
         if timestamp is None:
             timestamp = timezone.now()
 
-        for rollup, max_values in self.rollups.items():
+        for rollup, max_values in self.rollups:
             r = self.normalize_to_rollup(timestamp, rollup)
             self.sets[model][key][r].update(values)
 
@@ -124,7 +125,7 @@ class InMemoryTSDB(BaseTSDB):
             for key, items in request.items():
                 items = {k: float(v) for k, v in items.items()}
                 source = self.frequencies[model][key]
-                for rollup, _ in self.rollups.items():
+                for rollup, _ in self.rollups:
                     source[self.normalize_to_rollup(timestamp, rollup)].update(items)
 
     def get_most_frequent(self, model, keys, start, end=None, rollup=None, limit=None):
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 59fd6d1e62..5724fc6b19 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -155,7 +155,7 @@ class RedisTSDB(BaseTSDB):
             timestamp = timezone.now()
 
         with self.cluster.map() as client:
-            for rollup, max_values in self.rollups.items():
+            for rollup, max_values in self.rollups:
                 norm_rollup = normalize_to_rollup(timestamp, rollup)
                 for model, key in items:
                     model_key = self.get_model_key(key)
@@ -181,7 +181,8 @@ class RedisTSDB(BaseTSDB):
         normalize_to_rollup = self.normalize_to_rollup
         make_key = self.make_counter_key
 
-        rollup = self.get_optimal_rollup(start, end, rollup)
+        if rollup is None:
+            rollup = self.get_optimal_rollup(start, end)
 
         results = []
         timestamp = end
@@ -221,7 +222,7 @@ class RedisTSDB(BaseTSDB):
         with self.cluster.fanout() as client:
             for model, key, values in items:
                 c = client.target_key(key)
-                for rollup, max_values in self.rollups.items():
+                for rollup, max_values in self.rollups:
                     k = self.make_key(
                         model,
                         rollup,
@@ -309,7 +310,7 @@ class RedisTSDB(BaseTSDB):
 
                 # Figure out all of the keys we need to be incrementing, as
                 # well as their expiration policies.
-                for rollup, max_values in self.rollups.items():
+                for rollup, max_values in self.rollups:
                     chunk = self.make_frequency_table_keys(model, rollup, ts, key)
                     keys.extend(chunk)
 
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 7095a04630..c6770d5b7a 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -400,9 +400,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_record_frequencies(self):
         project = self.project
-        manager = EventManager(self.make_event(
-            timestamp=time(),
-        ))
+        manager = EventManager(self.make_event())
         event = manager.save(project)
 
         assert tsdb.get_most_frequent(
@@ -427,7 +425,6 @@ class EventManagerTest(TransactionTestCase):
 
     def test_event_user(self):
         manager = EventManager(self.make_event(**{
-            'timestamp': time(),
             'sentry.interfaces.User': {
                 'id': '1',
             }
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index 682969ff58..735c61006b 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -56,7 +56,7 @@ class RedisTSDBTest(TestCase):
             (TSDBModel.project, 2),
         ], dts[3], count=4)
 
-        results = self.db.get_range(TSDBModel.project, [1], dts[0], dts[-1], rollup=3600)
+        results = self.db.get_range(TSDBModel.project, [1], dts[0], dts[-1])
         assert results == {
             1: [
                 (timestamp(dts[0]), 1),
@@ -65,8 +65,7 @@ class RedisTSDBTest(TestCase):
                 (timestamp(dts[3]), 4),
             ],
         }
-
-        results = self.db.get_range(TSDBModel.project, [2], dts[0], dts[-1], rollup=3600)
+        results = self.db.get_range(TSDBModel.project, [2], dts[0], dts[-1])
         assert results == {
             2: [
                 (timestamp(dts[0]), 0),
@@ -126,7 +125,7 @@ class RedisTSDBTest(TestCase):
             dts[3],
         )
 
-        assert self.db.get_distinct_counts_series(model, [1], dts[0], dts[-1], rollup=3600) == {
+        assert self.db.get_distinct_counts_series(model, [1], dts[0], dts[-1]) == {
             1: [
                 (timestamp(dts[0]), 2),
                 (timestamp(dts[1]), 1),
@@ -135,7 +134,7 @@ class RedisTSDBTest(TestCase):
             ],
         }
 
-        assert self.db.get_distinct_counts_series(model, [2], dts[0], dts[-1], rollup=3600) == {
+        assert self.db.get_distinct_counts_series(model, [2], dts[0], dts[-1]) == {
             2: [
                 (timestamp(dts[0]), 0),
                 (timestamp(dts[1]), 0),
