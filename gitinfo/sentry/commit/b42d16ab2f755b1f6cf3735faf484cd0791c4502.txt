commit b42d16ab2f755b1f6cf3735faf484cd0791c4502
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Apr 18 15:51:44 2018 -0500

    fix(snuba): Update count aggregates to be explicit as Snuba now expects (#8093)
    
    * fix(snuba): Update count aggregates to be explicit as Snuba now expects

diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index b7b4b3097d..c5104f669b 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -78,7 +78,7 @@ class SnubaTagStorage(TagStorage):
         if group_id is not None:
             filters['issue'] = [group_id]
         conditions = [[tag, '!=', '']]
-        aggregations = [['count', '', 'count']]
+        aggregations = [['count()', '', 'count']]
 
         result = snuba.query(start, end, [], conditions, filters, aggregations)
         if result == 0:
@@ -98,7 +98,7 @@ class SnubaTagStorage(TagStorage):
         }
         if group_id is not None:
             filters['issue'] = [group_id]
-        aggregations = [['count', '', 'count']]
+        aggregations = [['count()', '', 'count']]
 
         result = snuba.query(start, end, ['tags.key'], [], filters, aggregations,
                              limit=limit, orderby='-count', arrayjoin='tags')
@@ -122,7 +122,7 @@ class SnubaTagStorage(TagStorage):
         conditions = [
             [tag, '=', value]
         ]
-        aggregations = [['count', '', 'count']]
+        aggregations = [['count()', '', 'count']]
 
         result = snuba.query(start, end, [], conditions, filters, aggregations)
 
@@ -147,7 +147,7 @@ class SnubaTagStorage(TagStorage):
             filters['issue'] = [group_id]
         conditions = [[tag, '!=', '']]
         aggregations = [
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
@@ -176,7 +176,7 @@ class SnubaTagStorage(TagStorage):
             [tag, '=', value]
         ]
         aggregations = [
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
@@ -202,7 +202,7 @@ class SnubaTagStorage(TagStorage):
             'issue': [group_id],
         }
         conditions = [[tag, '!=', '']]
-        aggregations = [['count', '', 'count']]
+        aggregations = [['count()', '', 'count']]
 
         return snuba.query(start, end, [], conditions, filters, aggregations)
 
@@ -216,7 +216,7 @@ class SnubaTagStorage(TagStorage):
         }
         conditions = [[tag, '!=', '']]
         aggregations = [
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
@@ -243,7 +243,7 @@ class SnubaTagStorage(TagStorage):
         }
         aggregations = [
             ['topK(10)', 'tags.value', 'top'],
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['uniq', 'tags.key', 'uniq'],
         ]
         results = snuba.query(start, end, ['tags.key'], None, filters,
@@ -298,7 +298,7 @@ class SnubaTagStorage(TagStorage):
         # release ids which would need to be translated by the snuba util.
         conditions = [['release', 'IN', versions]]
         aggregations = [
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
@@ -360,7 +360,7 @@ class SnubaTagStorage(TagStorage):
         ] if cond[2] != []]
         conditions = [or_conditions]
         aggregations = [
-            ['count', '', 'count'],
+            ['count()', '', 'count'],
             ['min', SEEN_COLUMN, 'first_seen'],
             ['max', SEEN_COLUMN, 'last_seen'],
         ]
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index d6b752f6a1..ebf3a3141f 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -37,7 +37,7 @@ class SnubaTSDB(BaseTSDB):
         super(SnubaTSDB, self).__init__(**options)
 
     def get_data(self, model, keys, start, end, rollup=None, environment_id=None,
-                 aggregation='count', group_on_model=True, group_on_time=False):
+                 aggregation='count()', group_on_model=True, group_on_time=False):
         """
         Normalizes all the TSDB parameters and sends a query to snuba.
 
@@ -56,7 +56,7 @@ class SnubaTSDB(BaseTSDB):
             groupby.append(model_group)
         if group_on_time:
             groupby.append('time')
-        if aggregation == 'count' and model_aggregate is not None:
+        if aggregation == 'count()' and model_aggregate is not None:
             # Special case, because count has different semantics, we change:
             # `COUNT(model_aggregate)` to `COUNT() GROUP BY model_aggregate`
             groupby.append(model_aggregate)
@@ -73,7 +73,7 @@ class SnubaTSDB(BaseTSDB):
 
     def get_range(self, model, keys, start, end, rollup=None, environment_id=None):
         result = self.get_data(model, keys, start, end, rollup, environment_id,
-                               aggregation='count', group_on_time=True)
+                               aggregation='count()', group_on_time=True)
         # convert
         #    {group:{timestamp:count, ...}}
         # into
@@ -135,7 +135,7 @@ class SnubaTSDB(BaseTSDB):
     def get_frequency_series(self, model, items, start, end=None,
                              rollup=None, environment_id=None):
         result = self.get_data(model, items, start, end, rollup, environment_id,
-                               aggregation='count', group_on_time=True)
+                               aggregation='count()', group_on_time=True)
         # convert
         #    {group:{timestamp:{agg:count}}}
         # into
@@ -144,7 +144,7 @@ class SnubaTSDB(BaseTSDB):
 
     def get_frequency_totals(self, model, items, start, end=None, rollup=None, environment_id=None):
         return self.get_data(model, items, start, end, rollup, environment_id,
-                             aggregation='count')
+                             aggregation='count()')
 
     def get_optimal_rollup(self, start):
         """
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 36a354a025..bbcd8b1777 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -35,7 +35,7 @@ def query(start, end, groupby, conditions=None, filter_keys=None,
     """
     groupby = groupby or []
     conditions = conditions or []
-    aggregations = aggregations or [['count', '', 'aggregate']]
+    aggregations = aggregations or [['count()', '', 'aggregate']]
     filter_keys = filter_keys or {}
 
     # Forward and reverse translation maps from model ids to snuba keys, per column
diff --git a/tests/sentry/tsdb/test_snuba.py b/tests/sentry/tsdb/test_snuba.py
index fc14287dfb..09414e40f4 100644
--- a/tests/sentry/tsdb/test_snuba.py
+++ b/tests/sentry/tsdb/test_snuba.py
@@ -120,7 +120,7 @@ class SnubaTSDBTest(TestCase):
         with responses.RequestsMock() as rsps:
             def snuba_response(request):
                 body = json.loads(request.body)
-                assert body['aggregations'] == [['count', None, 'aggregate']]
+                assert body['aggregations'] == [['count()', None, 'aggregate']]
                 assert body['project'] == [project.id]
                 assert body['groupby'] == ['issue', 'time']
 
@@ -152,7 +152,7 @@ class SnubaTSDBTest(TestCase):
         with responses.RequestsMock() as rsps:
             def snuba_response(request):
                 body = json.loads(request.body)
-                assert body['aggregations'] == [['count', None, 'aggregate']]
+                assert body['aggregations'] == [['count()', None, 'aggregate']]
                 assert body['project'] == [project.id]
                 assert body['groupby'] == ['release', 'time']
                 assert ['release', 'IN', ['version X']] in body['conditions']
@@ -175,7 +175,7 @@ class SnubaTSDBTest(TestCase):
         with responses.RequestsMock() as rsps:
             def snuba_response(request):
                 body = json.loads(request.body)
-                assert body['aggregations'] == [['count', None, 'aggregate']]
+                assert body['aggregations'] == [['count()', None, 'aggregate']]
                 assert body['project'] == [project.id]
                 assert body['groupby'] == ['project_id', 'time']
                 assert ['environment', 'IN', ['prod']] in body['conditions']
