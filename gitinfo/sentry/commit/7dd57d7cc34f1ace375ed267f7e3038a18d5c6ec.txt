commit 7dd57d7cc34f1ace375ed267f7e3038a18d5c6ec
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jan 13 15:57:54 2020 -0800

    ref: Use new event model for eventstream (#16285)

diff --git a/src/sentry/eventstore/models.py b/src/sentry/eventstore/models.py
index f54c6e225f..25e76abfab 100644
--- a/src/sentry/eventstore/models.py
+++ b/src/sentry/eventstore/models.py
@@ -80,7 +80,7 @@ class Event(EventCommon):
         if column in self._snuba_data:
             return self._snuba_data[column]
 
-        return self.data.get("message")
+        return self.real_message
 
     @message.setter
     def message(self, value):
diff --git a/src/sentry/eventstream/kafka/protocol.py b/src/sentry/eventstream/kafka/protocol.py
index 7f7da84066..a8d8c8127b 100644
--- a/src/sentry/eventstream/kafka/protocol.py
+++ b/src/sentry/eventstream/kafka/protocol.py
@@ -4,7 +4,9 @@ import pytz
 import logging
 from datetime import datetime
 
-from sentry.models import Event, EventDict
+from sentry import options
+from sentry.eventstore.models import Event
+from sentry.models import EventDict, Event as DjangoEvent
 from sentry.utils import json, metrics
 
 
@@ -33,8 +35,8 @@ def basic_protocol_handler(unsupported_operations):
         # Rust (re)normalization here again would be too slow.
         event_data["data"] = EventDict(event_data["data"], skip_renormalization=True)
 
-        kwargs = {
-            "event": Event(
+        if options.get("eventstream.use-django-event"):
+            event = DjangoEvent(
                 **{
                     name: event_data[name]
                     for name in [
@@ -47,9 +49,16 @@ def basic_protocol_handler(unsupported_operations):
                         "data",
                     ]
                 }
-            ),
-            "primary_hash": event_data["primary_hash"],
-        }
+            )
+        else:
+            event = Event(
+                event_id=event_data["event_id"],
+                group_id=event_data["group_id"],
+                project_id=event_data["project_id"],
+            )
+            event.data.bind_data(event_data["data"])
+
+        kwargs = {"event": event, "primary_hash": event_data["primary_hash"]}
 
         for name in ("is_new", "is_regression", "is_new_group_environment"):
             kwargs[name] = task_state[name]
diff --git a/tests/sentry/eventstore/test_models.py b/tests/sentry/eventstore/test_models.py
index bff1a462ea..3ec3f7f1b1 100644
--- a/tests/sentry/eventstore/test_models.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -212,7 +212,7 @@ class EventTest(TestCase):
         assert event_from_nodestore.timestamp == event_from_snuba.timestamp
         assert event_from_nodestore.datetime == event_from_snuba.datetime
         assert event_from_nodestore.title == event_from_snuba.title
-        assert event_from_nodestore.message["formatted"] == event_from_snuba.message
+        assert event_from_nodestore.message == event_from_snuba.message
         assert event_from_nodestore.platform == event_from_snuba.platform
         assert event_from_nodestore.location == event_from_snuba.location
         assert event_from_nodestore.culprit == event_from_snuba.culprit
diff --git a/tests/sentry/eventstream/kafka/test_protocol.py b/tests/sentry/eventstream/kafka/test_protocol.py
index 808142f94c..f1a5e93456 100644
--- a/tests/sentry/eventstream/kafka/test_protocol.py
+++ b/tests/sentry/eventstream/kafka/test_protocol.py
@@ -23,6 +23,7 @@ def test_get_task_kwargs_for_message_invalid_version():
         get_task_kwargs_for_message(json.dumps([0, "insert", {}]))
 
 
+@pytest.mark.django_db
 def test_get_task_kwargs_for_message_version_1():
     event_data = {
         "project_id": 1,
@@ -31,7 +32,11 @@ def test_get_task_kwargs_for_message_version_1():
         "message": "message",
         "platform": "python",
         "datetime": "2018-07-20T21:04:27.600640Z",
-        "data": {},
+        "data": {
+            "logentry": {"formatted": "message"},
+            "platform": "python",
+            "timestamp": 1532120667.60064,
+        },
         "extra": {},
         "primary_hash": "49f68a5c8493ec2c0bf489821c21fc3b",
     }
@@ -46,8 +51,6 @@ def test_get_task_kwargs_for_message_version_1():
     assert event.message == "message"
     assert event.platform == "python"
     assert event.datetime == datetime(2018, 7, 20, 21, 4, 27, 600640, tzinfo=pytz.utc)
-    assert dict(event.data) == {}
-
     assert kwargs.pop("primary_hash") == "49f68a5c8493ec2c0bf489821c21fc3b"
 
     assert kwargs.pop("is_new") is True
