commit 426f7ca031a88d68b9076b1eea0f48e27e19758e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Sun Jan 12 22:11:12 2014 -0800

    Keep track of email replies to maintain correct threading

diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index a4df6c8dd7..50c2e4b514 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -112,9 +112,7 @@ class Activity(Model):
             value='0',
         ).values_list('user', flat=True))
 
-        send_to = [
-            u_id for u_id in user_id_list if u_id not in disabled
-        ]
+        send_to = filter(lambda u_id: u_id not in disabled, user_id_list)
 
         if not send_to:
             return
@@ -149,6 +147,8 @@ class Activity(Model):
             template='sentry/emails/new_note.txt',
             html_template='sentry/emails/new_note.html',
             headers=headers,
+            reference=self,
+            reply_reference=self.group,
         )
         msg.add_users(send_to, project=self.project)
 
diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index 0146f796be..347faf8b60 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -28,7 +28,7 @@ from django.utils.importlib import import_module
 
 from sentry.constants import MODULE_ROOT
 from sentry.models import (
-    Project, ProjectOption, Option, Team, Group, Event, User)
+    Activity, Project, ProjectOption, Option, Team, Group, Event, User)
 from sentry.utils import json
 from sentry.utils.compat import pickle
 from sentry.utils.strings import decompress
@@ -129,6 +129,14 @@ class BaseTestCase(Exam):
     def event(self):
         return self.create_event(event_id='a' * 32)
 
+    @fixture
+    def activity(self):
+        return Activity.objects.create(
+            group=self.group, event=self.event, project=self.project,
+            type=Activity.NOTE, user=self.user,
+            data={}
+        )
+
     def create_user(self, email, **kwargs):
         kwargs.setdefault('username', email)
         kwargs.setdefault('is_staff', True)
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 585965148f..a6dd012e9f 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -5,12 +5,14 @@ sentry.utils.email
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
+from __future__ import absolute_import
 
 from django.conf import settings
 from django.core.mail import EmailMultiAlternatives
 from django.core.signing import Signer
 from django.utils.encoding import force_bytes
 
+from email.utils import parseaddr
 from pynliner import Pynliner
 
 from sentry.web.helpers import render_to_string
@@ -36,9 +38,26 @@ def group_id_to_email(group_id):
     return '@'.join((signed_data.replace(':', '+'), SMTP_HOSTNAME))
 
 
+def email_id_for_model(model):
+    return '%s/%s@%s' % (type(model).__name__.lower(), model.pk, FROM_EMAIL_DOMAIN)
+
+
+def domain_from_email(email):
+    email = parseaddr(email)[1]
+    try:
+        return email.split('@', 1)[1]
+    except IndexError:
+        # The email address is likely malformed or something
+        return email
+
+
+FROM_EMAIL_DOMAIN = domain_from_email(settings.DEFAULT_FROM_EMAIL)
+
+
 class MessageBuilder(object):
     def __init__(self, subject, context=None, template=None, html_template=None,
-                 body=None, html_body=None, headers=None):
+                 body=None, html_body=None, headers=None, reference=None,
+                 reply_reference=None):
         assert not (body and template)
         assert not (html_body and html_template)
         assert context or not (template or html_template)
@@ -50,6 +69,8 @@ class MessageBuilder(object):
         self.body = body
         self.html_body = html_body
         self.headers = headers
+        self.reference = reference  # The object that generated this message
+        self.reply_reference = reply_reference  # The object this message is replying about
 
         self._send_to = set()
 
@@ -106,6 +127,15 @@ class MessageBuilder(object):
 
         headers.setdefault('Reply-To', reply_to)
 
+        if self.reference is not None:
+            headers.setdefault('Message-Id', email_id_for_model(self.reference))
+
+        if self.reply_reference is not None:
+            in_reply_to = email_id_for_model(self.reply_reference)
+            headers.setdefault('In-Reply-To', in_reply_to)
+            headers.setdefault('References', in_reply_to)
+            self.subject = 'Re: %s' % self.subject
+
         if self.template:
             txt_body = render_to_string(self.template, self.context)
         else:
diff --git a/tests/sentry/models/activity/tests.py b/tests/sentry/models/activity/tests.py
index ad6ddd31cd..3e2c62371c 100644
--- a/tests/sentry/models/activity/tests.py
+++ b/tests/sentry/models/activity/tests.py
@@ -27,5 +27,8 @@ class SendNotificationTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == '[Sentry] [Bar] foo@example.com: sup guise'
+        assert msg.subject == 'Re: [Sentry] [Bar] foo@example.com: sup guise'
         assert msg.to == [self.user.email]
+        assert msg.extra_headers['Message-Id'] == 'activity/%s@localhost' % activity.pk
+        assert msg.extra_headers['In-Reply-To'] == 'group/%s@localhost' % self.group.pk
+        assert msg.extra_headers['References'] == 'group/%s@localhost' % self.group.pk
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index 69b036013e..a47d3ec67f 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -87,3 +87,52 @@ class MessageBuilderTest(TestCase):
             'fizzle@example.com',
             'foo@example.com',
         ]
+
+    def test_message_id(self):
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+            reference=self.activity,
+        )
+        msg.send(['foo@example.com'])
+
+        assert len(mail.outbox) == 1
+
+        out = mail.outbox[0]
+        assert out.to == ['foo@example.com']
+        assert out.subject == 'Test'
+        assert out.extra_headers['Reply-To'] == 'foo@example.com'
+        assert out.extra_headers['Message-Id'] == 'activity/%s@localhost' % self.activity.pk
+        assert out.body == 'hello world'
+        assert len(out.alternatives) == 1
+        assert out.alternatives[0] == (
+            '<b>hello world</b>',
+            'text/html',
+        )
+
+    def test_in_reply_to(self):
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+            reference=self.activity,
+            reply_reference=self.group,
+        )
+        msg.send(['foo@example.com'])
+
+        assert len(mail.outbox) == 1
+
+        out = mail.outbox[0]
+        assert out.to == ['foo@example.com']
+        assert out.subject == 'Re: Test'
+        assert out.extra_headers['Reply-To'] == 'foo@example.com'
+        assert out.extra_headers['Message-Id'] == 'activity/%s@localhost' % self.activity.pk
+        assert out.extra_headers['In-Reply-To'] == 'group/%s@localhost' % self.group.pk
+        assert out.extra_headers['References'] == 'group/%s@localhost' % self.group.pk
+        assert out.body == 'hello world'
+        assert len(out.alternatives) == 1
+        assert out.alternatives[0] == (
+            '<b>hello world</b>',
+            'text/html',
+        )
