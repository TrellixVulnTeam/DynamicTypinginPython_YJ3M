commit 0962c2451b745d2c9df191bd39d8f3b92dd661a3
Author: Dan Fuller <dfuller@sentry.io>
Date:   Tue May 21 13:31:27 2019 -0700

    feat(api): Subscribe user to incident when they comment or change the incident status (SEN-591), (SEN-596)
    
    Subscribes a user to an Incident when they perform various actions. Will no-op if they're already
    subscribed.

diff --git a/src/sentry/incidents/logic.py b/src/sentry/incidents/logic.py
index 7e48fe0672..1af6acb7b2 100644
--- a/src/sentry/incidents/logic.py
+++ b/src/sentry/incidents/logic.py
@@ -102,6 +102,9 @@ def update_incident_status(incident, status, user=None, comment=None):
             previous_value=incident.status,
             comment=comment,
         )
+        if user:
+            subscribe_to_incident(incident, user)
+
         kwargs = {
             'status': status.value,
         }
@@ -147,6 +150,7 @@ def create_initial_event_stats_snapshot(incident):
     return create_event_stat_snapshot(incident, start, end)
 
 
+@transaction.atomic
 def create_incident_activity(
     incident,
     activity_type,
@@ -156,6 +160,8 @@ def create_incident_activity(
     comment=None,
     event_stats_snapshot=None,
 ):
+    if activity_type == IncidentActivityType.COMMENT and user:
+        subscribe_to_incident(incident, user)
     value = six.text_type(value) if value is not None else value
     previous_value = six.text_type(previous_value) if previous_value is not None else previous_value
     return IncidentActivity.objects.create(
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index e3014fbd27..52d2475708 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -24,6 +24,7 @@ from sentry.incidents.models import (
     IncidentGroup,
     IncidentProject,
     IncidentStatus,
+    IncidentSubscription,
 )
 from sentry.testutils import (
     TestCase,
@@ -94,6 +95,8 @@ class UpdateIncidentStatus(TestCase):
         activity = self.get_most_recent_incident_activity(incident)
         assert activity.type == IncidentActivityType.STATUS_CHANGE.value
         assert activity.user == user
+        if user:
+            assert IncidentSubscription.objects.filter(incident=incident, user=user).exists()
         assert activity.value == six.text_type(status.value)
         assert activity.previous_value == six.text_type(prev_status)
         assert activity.comment == comment
@@ -287,6 +290,30 @@ class CreateIncidentActivityTest(TestCase, BaseIncidentsTest):
 
         assert event_stats_snapshot == activity.event_stats_snapshot
 
+    def test_comment(self):
+        incident = self.create_incident()
+        comment = 'hello'
+        with self.assertChanges(
+            lambda: IncidentSubscription.objects.filter(
+                incident=incident,
+                user=self.user,
+            ).exists(),
+            before=False,
+            after=True,
+        ):
+            activity = create_incident_activity(
+                incident,
+                IncidentActivityType.COMMENT,
+                user=self.user,
+                comment=comment,
+            )
+        assert activity.incident == incident
+        assert activity.type == IncidentActivityType.COMMENT.value
+        assert activity.user == self.user
+        assert activity.comment == comment
+        assert activity.value is None
+        assert activity.previous_value is None
+
 
 @freeze_time()
 class CreateInitialEventStatsSnapshotTest(TestCase, BaseIncidentsTest):
