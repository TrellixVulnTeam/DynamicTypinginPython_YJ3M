commit af65d6c62d7eac8e74eda4c580dd4c111836cfcc
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Aug 14 12:52:47 2019 -0700

    ref(eventstore): Use eventstore.get_event_by_id everywhere (#14364)
    
    Use eventstore.get_event_by_id method instead of
    EventManager.from_event_id.

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 839dfbf064..f9c885d65e 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -9,9 +9,10 @@ try:
 except ImportError:
     from django.http import HttpResponse, StreamingHttpResponse
 
+from sentry import eventstore
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.models import Event, SnubaEvent
+from sentry.models import Event
 from sentry.lang.native.applecrashreport import AppleCrashReport
 from sentry.utils.safe import get_path
 
@@ -26,7 +27,7 @@ class EventAppleCrashReportEndpoint(ProjectEndpoint):
         This endpoint returns the an apple crash report for a specific event.
         This works only if the event.platform == cocoa
         """
-        event = SnubaEvent.objects.from_event_id(event_id, project_id=project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             raise ResourceDoesNotExist
 
diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index 752964eed4..5fe1df55f7 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -8,12 +8,12 @@ try:
 except ImportError:
     from django.http import StreamingHttpResponse
 
-from sentry import features, roles
+from sentry import eventstore, features, roles
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.serializers.models.organization import ATTACHMENTS_ROLE_DEFAULT
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
-from sentry.models import SnubaEvent, EventAttachment, OrganizationMember
+from sentry.models import EventAttachment, OrganizationMember
 
 
 class EventAttachmentDetailsPermission(ProjectPermission):
@@ -80,7 +80,7 @@ class EventAttachmentDetailsEndpoint(ProjectEndpoint):
                             project.organization, actor=request.user):
             return self.respond(status=404)
 
-        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_attachments.py b/src/sentry/api/endpoints/event_attachments.py
index 3f9568d32f..85d88d0c44 100644
--- a/src/sentry/api/endpoints/event_attachments.py
+++ b/src/sentry/api/endpoints/event_attachments.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
-from sentry import features
+from sentry import eventstore, features
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import SnubaEvent, EventAttachment
+from sentry.models import EventAttachment
 
 
 class EventAttachmentsEndpoint(ProjectEndpoint):
@@ -24,7 +24,7 @@ class EventAttachmentsEndpoint(ProjectEndpoint):
                             project.organization, actor=request.user):
             return self.respond(status=404)
 
-        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index 5badd9675b..ad44113def 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import eventstore
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.models import Commit, Event, SnubaEvent, Release
+from sentry.models import Commit, Event, Release
 from sentry.utils.committers import get_serialized_event_file_committers
 
 
@@ -21,7 +22,7 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
                                  retrieve (as reported by the raven client).
         :auth: required
         """
-        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
index a9a4191d1f..980798c9e2 100644
--- a/src/sentry/api/endpoints/event_grouping_info.py
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -4,10 +4,11 @@ import six
 
 from django.http import HttpResponse
 
+from sentry import eventstore
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.grouping.api import GroupingConfigNotFound
-from sentry.models import Event, SnubaEvent
+from sentry.models import Event
 from sentry.utils import json
 
 
@@ -20,7 +21,7 @@ class EventGroupingInfoEndpoint(ProjectEndpoint):
         This endpoint returns a JSON dump of the metadata that went into the
         grouping algorithm.
         """
-        event = SnubaEvent.objects.from_event_id(event_id, project_id=project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             raise ResourceDoesNotExist
 
diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index b959b09574..a3ea376d28 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -2,11 +2,12 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
+from sentry import eventstore
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.fields.actor import Actor
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.actor import ActorSerializer
-from sentry.models import Event, SnubaEvent, ProjectOwnership
+from sentry.models import Event, ProjectOwnership
 
 
 class EventOwnersEndpoint(ProjectEndpoint):
@@ -20,7 +21,7 @@ class EventOwnersEndpoint(ProjectEndpoint):
         :pparam string event_id: the id of the event.
         :auth: required
         """
-        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
         if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index cd5e5fe62d..cb8b1bd99a 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -7,7 +7,6 @@ from sentry import eventstore
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import DetailedEventSerializer, serialize
-from sentry.models import SnubaEvent
 
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -84,7 +83,7 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
 class EventJsonEndpoint(ProjectEndpoint):
 
     def get(self, request, project, event_id):
-        event = SnubaEvent.objects.from_event_id(event_id, project.id)
+        event = eventstore.get_event_by_id(project.id, event_id)
 
         if not event:
             return Response({'detail': 'Event not found'}, status=404)
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 11452a0b2e..64713ce012 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -6,7 +6,6 @@ import threading
 import weakref
 
 from django.conf import settings
-from django.core.exceptions import ObjectDoesNotExist
 from django.db import router
 from django.db.models import Model
 from django.db.models.manager import Manager, QuerySet
@@ -14,10 +13,8 @@ from django.db.models.signals import (post_save, post_delete, post_init, class_p
 from django.utils.encoding import smart_text
 
 from sentry import nodestore
-from sentry.db.models.fields import BoundedBigIntegerField
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
-from sentry.utils.validators import normalize_event_id
 
 from .query import create_or_update
 
@@ -309,34 +306,6 @@ class BaseManager(Manager):
         return self._queryset_class(self.model, using=self._db)
 
 
-class SnubaEventManager:
-    # TODO: Remove in favor of eventstore.get_event_by_id
-    def from_event_id(self, id_or_event_id, project_id):
-        """
-        Get a SnubaEvent by either its id primary key or its hex event_id.
-
-        Returns None if the event cannot be found under either scheme.
-
-        Log any attempt to fetch a SnubaEvent by primary key and eventually remove.
-        """
-        from sentry.models import SnubaEvent, Event
-
-        event_id = normalize_event_id(id_or_event_id)
-        if not event_id:
-            logger.warning('Attempt to fetch SnubaEvent by primary key', exc_info=True, extra={
-                'event_id': event_id
-            })
-
-            event = Event.objects.from_event_id(id_or_event_id, project_id)
-
-            if not event:
-                return None
-
-            event_id = event.event_id
-
-        return SnubaEvent.get_event(project_id, event_id)
-
-
 class EventManager(BaseManager):
     # TODO: Remove method in favour of eventstore.bind_nodes
     def bind_nodes(self, object_list, *node_names):
@@ -361,46 +330,3 @@ class EventManager(BaseManager):
         for item, node in object_node_list:
             data = node_results.get(node.id) or {}
             node.bind_data(data, ref=node.get_ref(item))
-
-    def from_event_id(self, id_or_event_id, project_id):
-        """
-        Get an Event by either its id primary key or its hex event_id.
-
-        Will automatically try to infer the type of id, and grab the correct
-        event.  If the provided id is a hex event_id, the project_id must also
-        be provided to disambiguate it.
-
-        Returns None if the event cannot be found under either scheme.
-        """
-        # TODO (alexh) instrument this to report any times we are still trying
-        # to get events by id.
-        # TODO (alexh) deprecate lookup by id so we can move to snuba.
-
-        event = None
-        if id_or_event_id.isdigit() and int(id_or_event_id) <= BoundedBigIntegerField.MAX_VALUE:
-            # If its a numeric string, check if it's an event Primary Key first
-            try:
-                if project_id is None:
-                    event = self.get(
-                        id=id_or_event_id,
-                    )
-                else:
-                    event = self.get(
-                        id=id_or_event_id,
-                        project_id=project_id,
-                    )
-            except ObjectDoesNotExist:
-                pass
-        # If it was not found as a PK, and its a possible event_id, search by
-        # that instead.
-        event_id = normalize_event_id(id_or_event_id)
-        if project_id is not None and event is None and event_id:
-            try:
-                event = self.get(
-                    event_id=event_id,
-                    project_id=project_id,
-                )
-            except ObjectDoesNotExist:
-                pass
-
-        return event
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 7175788d76..3e6dae7a4c 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -64,7 +64,18 @@ class SnubaEventStorage(EventStorage):
         if not event_id:
             return None
 
-        return SnubaEvent.get_event(project_id, event_id, snuba_cols=cols)
+        result = snuba.raw_query(
+            selected_columns=cols,
+            filter_keys={
+                'event_id': [event_id],
+                'project_id': [project_id],
+            },
+            referrer='eventstore.get_event_by_id',
+            limit=1,
+        )
+        if 'error' not in result and len(result['data']) == 1:
+            return SnubaEvent(result['data'][0])
+        return None
 
     def get_next_event_id(self, event, conditions=None, filter_keys=None):
         """
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 722260651d..b1d190431d 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -23,7 +23,7 @@ from sentry.db.models import (
     NodeField,
     sane_repr
 )
-from sentry.db.models.manager import EventManager, SnubaEventManager
+from sentry.db.models.manager import EventManager
 from sentry.interfaces.base import get_interfaces
 from sentry.utils import json
 from sentry.utils.cache import memoize
@@ -455,26 +455,8 @@ class SnubaEvent(EventCommon):
         'username',
     ]
 
-    objects = SnubaEventManager()
-
     __repr__ = sane_repr('project_id', 'group_id')
 
-    @classmethod
-    def get_event(cls, project_id, event_id, snuba_cols=selected_columns):
-        from sentry.utils import snuba
-        result = snuba.raw_query(
-            selected_columns=snuba_cols,
-            filter_keys={
-                'event_id': [event_id],
-                'project_id': [project_id],
-            },
-            referrer='SnubaEvent.get_event',
-            limit=1,
-        )
-        if 'error' not in result and len(result['data']) == 1:
-            return SnubaEvent(result['data'][0])
-        return None
-
     def __init__(self, snuba_values):
         """
             When initializing a SnubaEvent, think about the attributes you
diff --git a/tests/snuba/models/test_event.py b/tests/snuba/models/test_event.py
index 3ccc7015c6..1867d63623 100644
--- a/tests/snuba/models/test_event.py
+++ b/tests/snuba/models/test_event.py
@@ -6,7 +6,7 @@ from datetime import datetime, timedelta
 from sentry.api.serializers import serialize
 from sentry.models.event import Event, SnubaEvent
 from sentry.testutils import SnubaTestCase, TestCase
-from sentry import nodestore
+from sentry import eventstore, nodestore
 
 
 class SnubaEventTest(TestCase, SnubaTestCase):
@@ -67,7 +67,7 @@ class SnubaEventTest(TestCase, SnubaTestCase):
             assert nodestore.get(node_id) == self.data
 
     def test_fetch(self):
-        event = SnubaEvent.get_event(self.proj1.id, self.event_id)
+        event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
 
         # Make sure we get back event properties from snuba
         assert event.event_id == self.event_id
@@ -88,10 +88,7 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         Test that a SnubaEvent that only loads minimal data from snuba
         can still be serialized completely by falling back to nodestore data.
         """
-        snuba_event = SnubaEvent.get_event(
-            self.proj1.id,
-            self.event_id,
-            snuba_cols=SnubaEvent.minimal_columns)
+        snuba_event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
 
         snuba_serialized = serialize(snuba_event)
 
@@ -105,7 +102,7 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         Test that bind_nodes works on snubaevents to populate their
         NodeDatas.
         """
-        event = SnubaEvent.get_event(self.proj1.id, self.event_id)
+        event = eventstore.get_event_by_id(self.proj1.id, self.event_id)
         assert event.data._node_data is None
         Event.objects.bind_nodes([event], 'data')
         assert event.data._node_data is not None
@@ -118,7 +115,10 @@ class SnubaEventTest(TestCase, SnubaTestCase):
         assert nodestore.get(node_id) is None
 
         # Check that we can still serialize it
-        event = SnubaEvent.get_event(self.proj1.id, self.event_id)
+        event = eventstore.get_event_by_id(
+            self.proj1.id,
+            self.event_id,
+            additional_columns=eventstore.full_columns)
         serialized = serialize(event)
         assert event.data == {}
 
