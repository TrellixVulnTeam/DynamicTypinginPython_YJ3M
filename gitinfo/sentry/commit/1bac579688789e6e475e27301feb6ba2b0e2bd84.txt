commit 1bac579688789e6e475e27301feb6ba2b0e2bd84
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Feb 26 10:14:00 2018 -0800

    ref(environments): Use withEnvironments higher order component (#7352)

diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 24e0a42959..4efcf0fb6b 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -2,13 +2,12 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
-import Reflux from 'reflux';
 
-import LatestContextStore from '../stores/latestContextStore';
 import EventList from './projectDashboard/eventList';
 import ProjectState from '../mixins/projectState';
 import ProjectChart from './projectDashboard/chart';
 import {t} from '../locale';
+import withEnvironment from '../utils/withEnvironment';
 
 const PERIOD_HOUR = '1h';
 const PERIOD_DAY = '1d';
@@ -21,9 +20,10 @@ const ProjectDashboard = createReactClass({
   propTypes: {
     defaultStatsPeriod: PropTypes.string,
     setProjectNavSection: PropTypes.func,
+    environment: PropTypes.object,
   },
 
-  mixins: [ProjectState, Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
+  mixins: [ProjectState],
 
   getDefaultProps() {
     return {
@@ -34,19 +34,12 @@ const ProjectDashboard = createReactClass({
   getInitialState() {
     return {
       statsPeriod: this.props.defaultStatsPeriod,
-      activeEnvironment: null,
-      hasEnvironmentsFeature: new Set(this.context.organization.features).has(
-        'environments'
-      ),
       ...this.getQueryStringState(),
     };
   },
 
   componentWillMount() {
     this.props.setProjectNavSection('dashboard');
-
-    // Manually fire onLatestContextChange
-    this.onLatestContextChange(LatestContextStore.getInitialState());
   },
 
   componentWillReceiveProps(nextProps) {
@@ -92,14 +85,6 @@ const ProjectDashboard = createReactClass({
     }
   },
 
-  onLatestContextChange(context) {
-    if (this.state.hasEnvironmentsFeature) {
-      this.setState({
-        activeEnvironment: context.environment,
-      });
-    }
-  },
-
   render() {
     let {statsPeriod} = this.state;
     let dateSince = this.getStatsPeriodBeginTimestamp(statsPeriod);
@@ -157,7 +142,7 @@ const ProjectDashboard = createReactClass({
           <div className="col-md-6">
             <EventList
               type="priority"
-              environment={this.state.activeEnvironment}
+              environment={this.props.environment}
               dateSince={dateSince}
               params={this.props.params}
             />
@@ -165,7 +150,7 @@ const ProjectDashboard = createReactClass({
           <div className="col-md-6">
             <EventList
               type="new"
-              environment={this.state.activeEnvironment}
+              environment={this.props.environment}
               dateSince={dateSince}
               params={this.props.params}
             />
@@ -176,4 +161,4 @@ const ProjectDashboard = createReactClass({
   },
 });
 
-export default ProjectDashboard;
+export default withEnvironment(ProjectDashboard);
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index 1ca576a517..1532bbd43d 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -1,35 +1,29 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 
 import EnvironmentStore from '../stores/environmentStore';
-import LatestContextStore from '../stores/latestContextStore';
-
 import ProjectHeader from '../components/projectHeader';
 import ProjectState from '../mixins/projectState';
+import withEnvironment from '../utils/withEnvironment';
 
 const ProjectDetailsLayout = createReactClass({
   displayName: 'ProjectDetailsLayout',
-  mixins: [
-    ProjectState,
-    Reflux.connect(EnvironmentStore, 'environments'),
-    Reflux.listenTo(LatestContextStore, 'onLatestContextChange'),
-  ],
+
+  propTypes: {
+    environment: PropTypes.object,
+  },
+
+  mixins: [ProjectState, Reflux.connect(EnvironmentStore, 'environments')],
 
   getInitialState() {
     return {
       environments: [],
       projectNavSection: null,
-      activeEnvironment: null,
     };
   },
 
-  onLatestContextChange(context) {
-    this.setState({
-      activeEnvironment: context.environment,
-    });
-  },
-
   /**
    * This callback can be invoked by the child component
    * to update the active nav section (which is then passed
@@ -51,7 +45,7 @@ const ProjectDetailsLayout = createReactClass({
           project={this.context.project}
           organization={this.getOrganization()}
           environments={this.state.environments}
-          activeEnvironment={this.state.activeEnvironment}
+          activeEnvironment={this.props.environment}
         />
         <div className="container">
           <div className="content">
@@ -66,4 +60,4 @@ const ProjectDetailsLayout = createReactClass({
   },
 });
 
-export default ProjectDetailsLayout;
+export default withEnvironment(ProjectDetailsLayout);
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index 6541144909..48b069df05 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -1,19 +1,17 @@
 import jQuery from 'jquery';
 import PropTypes from 'prop-types';
 import React from 'react';
-import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
-import {isEqual} from 'lodash';
 import {browserHistory, Link} from 'react-router';
 import ApiMixin from '../mixins/apiMixin';
 import GroupStore from '../stores/groupStore';
-import LatestContextStore from '../stores/latestContextStore';
 import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import Pagination from '../components/pagination';
 import CompactIssue from '../components/compactIssue';
 import EventUserReport from '../components/events/userReport';
 import {t} from '../locale';
+import withEnvironment from '../utils/withEnvironment';
 
 const ProjectUserReports = createReactClass({
   displayName: 'ProjectUserReports',
@@ -22,13 +20,10 @@ const ProjectUserReports = createReactClass({
     defaultQuery: PropTypes.string,
     defaultStatus: PropTypes.string,
     setProjectNavSection: PropTypes.func,
+    environment: PropTypes.object,
   },
 
-  contextTypes: {
-    organization: PropTypes.object,
-  },
-
-  mixins: [ApiMixin, Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
+  mixins: [ApiMixin],
 
   getDefaultProps() {
     return {
@@ -38,10 +33,6 @@ const ProjectUserReports = createReactClass({
   },
 
   getInitialState() {
-    const hasEnvironmentsFeature = new Set(this.context.organization.features).has(
-      'environments'
-    );
-
     return {
       reportList: [],
       loading: true,
@@ -49,10 +40,7 @@ const ProjectUserReports = createReactClass({
       pageLinks: '',
       query: this.props.defaultQuery,
       status: this.props.defaultStatus,
-      hasEnvironmentsFeature,
-      environment: hasEnvironmentsFeature
-        ? LatestContextStore.getInitialState().environment
-        : null,
+      environment: this.props.environment,
       ...this.getQueryStringState(this.props),
     };
   },
@@ -66,6 +54,15 @@ const ProjectUserReports = createReactClass({
     if (nextProps.location.search !== this.props.location.search) {
       this.setState(this.getQueryStringState(nextProps), this.fetchData);
     }
+
+    if (nextProps.environment !== this.props.environment) {
+      this.setState(
+        {
+          environment: nextProps.environment,
+        },
+        this.fetchData
+      );
+    }
   },
 
   getQueryStringState(props) {
@@ -92,19 +89,6 @@ const ProjectUserReports = createReactClass({
     });
   },
 
-  onLatestContextChange(context) {
-    if (isEqual(context.environment, this.state.environment)) return;
-
-    if (!this.state.hasEnvironmentsFeature) return;
-
-    this.setState(
-      {
-        environment: context.environment,
-      },
-      this.fetchData
-    );
-  },
-
   fetchData() {
     this.setState({
       loading: true,
@@ -266,4 +250,4 @@ const ProjectUserReports = createReactClass({
   },
 });
 
-export default ProjectUserReports;
+export default withEnvironment(ProjectUserReports);
