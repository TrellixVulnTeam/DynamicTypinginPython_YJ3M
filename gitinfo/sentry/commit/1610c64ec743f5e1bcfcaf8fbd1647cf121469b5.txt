commit 1610c64ec743f5e1bcfcaf8fbd1647cf121469b5
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Oct 9 10:19:43 2017 -0700

    feat(saml): Support IdP initiated SSO

diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2.py
index 744a76bf61..c7bb1285be 100644
--- a/src/sentry/auth/providers/saml2.py
+++ b/src/sentry/auth/providers/saml2.py
@@ -74,6 +74,35 @@ class SAML2LoginView(AuthView):
         return self.redirect(auth.login())
 
 
+# With SAML, the SSO request can be initiated by both the Service Provider
+# (sentry) (the typical case) and the Identity Provider. In the second case,
+# the auth assertion is directly posted to the ACS URL. Because the user will
+# not have initiated their SSO flow we must provide a endpoint similar to
+# auth_provider_login, but with support for initing the auth flow.
+class SAML2AcceptACSView(BaseView):
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, organization_slug):
+        # NB: The 'auth' key is used in the helper
+        in_auth_flow = request.session.get('auth', False)
+
+        # SP initiated authentication
+        if in_auth_flow:
+            from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
+            sso_login = AuthProviderLoginView()
+            return sso_login.handle(request)
+
+        # IdP initiated authentication. Start from org login flow
+        from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
+
+        # AuthOranizationLogin will init the login flow *only if* the ``init``
+        # parameter is set.
+        request.POST = request.POST.copy()
+        request.POST['init'] = True
+
+        org_login = AuthOrganizationLoginView()
+        return org_login.handle(request, organization_slug)
+
+
 class SAML2ACSView(AuthView):
     @method_decorator(csrf_exempt)
     def dispatch(self, request, helper):
@@ -284,7 +313,7 @@ def build_saml_config(provider_config, org):
     idp = provider_config['idp']
 
     # TODO(epurkhiser): This is also available in the helper and should probably come from there.
-    acs_url = absolute_uri(reverse('sentry-auth-sso'))
+    acs_url = absolute_uri(reverse('sentry-auth-organization-saml-acs', args=[org]))
     sls_url = absolute_uri(reverse('sentry-auth-organization-saml-sls', args=[org]))
     metadata_url = absolute_uri(reverse('sentry-auth-organization-saml-metadata', args=[org]))
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index bbfb4ca20f..06917ed030 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -37,7 +37,7 @@ from sentry.web.frontend.mailgun_inbound_webhook import \
     MailgunInboundWebhookView
 from sentry.web.frontend.oauth_authorize import OAuthAuthorizeView
 from sentry.web.frontend.oauth_token import OAuthTokenView
-from sentry.auth.providers.saml2 import SAML2SLSView, SAML2MetadataView
+from sentry.auth.providers.saml2 import SAML2AcceptACSView, SAML2SLSView, SAML2MetadataView
 from sentry.web.frontend.organization_api_key_settings import \
     OrganizationApiKeySettingsView
 from sentry.web.frontend.organization_api_keys import OrganizationApiKeysView
@@ -144,6 +144,8 @@ urlpatterns += patterns(
     url(r'^oauth/token/$', OAuthTokenView.as_view()),
 
     # SAML
+    url(r'^saml/acs/(?P<organization_slug>[^/]+)/$', SAML2AcceptACSView.as_view(),
+        name='sentry-auth-organization-saml-acs'),
     url(r'^saml/sls/(?P<organization_slug>[^/]+)/$', SAML2SLSView.as_view(),
         name='sentry-auth-organization-saml-sls'),
     url(r'^saml/metadata/(?P<organization_slug>[^/]+)/$', SAML2MetadataView.as_view(),
diff --git a/tests/sentry/web/frontend/test_auth_saml2.py b/tests/sentry/web/frontend/test_auth_saml2.py
index 9bde60c0d5..c3ed242f6a 100644
--- a/tests/sentry/web/frontend/test_auth_saml2.py
+++ b/tests/sentry/web/frontend/test_auth_saml2.py
@@ -75,8 +75,8 @@ class AuthSAML2Test(AuthProviderTestCase):
         return reverse('sentry-auth-organization', args=['saml2-org'])
 
     @fixture
-    def sso_path(self):
-        return reverse('sentry-auth-sso')
+    def acs_path(self):
+        return reverse('sentry-auth-organization-saml-acs', args=['saml2-org'])
 
     def test_redirects_to_idp(self):
         resp = self.client.post(self.login_path, {'init': True})
@@ -88,10 +88,7 @@ class AuthSAML2Test(AuthProviderTestCase):
         assert redirect.path == '/sso_url'
         assert 'SAMLRequest' in query
 
-    def test_auth_from_idp(self):
-        # Start auth process
-        self.client.post(self.login_path, {'init': True})
-
+    def accept_auth(self):
         saml_response = self.load_fixture('saml2_auth_response.xml')
         saml_response = base64.b64encode(saml_response)
 
@@ -99,11 +96,19 @@ class AuthSAML2Test(AuthProviderTestCase):
         is_valid = 'onelogin.saml2.response.OneLogin_Saml2_Response.is_valid'
 
         with mock.patch(is_valid, return_value=True):
-            resp = self.client.post(self.sso_path, {'SAMLResponse': saml_response})
+            resp = self.client.post(self.acs_path, {'SAMLResponse': saml_response})
 
         assert resp.status_code == 200
         assert resp.context['existing_user'] == self.user
 
+    def test_auth_sp_initiated(self):
+        # Start auth process from SP side
+        self.client.post(self.login_path, {'init': True})
+        self.accept_auth()
+
+    def test_auth_idp_initiated(self):
+        self.accept_auth()
+
     def test_saml_metadata(self):
         path = reverse('sentry-auth-organization-saml-metadata', args=['saml2-org'])
         resp = self.client.get(path)
