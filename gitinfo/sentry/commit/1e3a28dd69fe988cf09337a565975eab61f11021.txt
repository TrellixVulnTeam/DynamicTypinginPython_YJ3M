commit 1e3a28dd69fe988cf09337a565975eab61f11021
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Nov 1 15:08:25 2017 -0700

    feat(api): Add endpoint to list access requests (#6306)

diff --git a/CHANGES b/CHANGES
index 6411502c18..58d6a28342 100644
--- a/CHANGES
+++ b/CHANGES
@@ -15,6 +15,10 @@ Schema Changes
 - Added index on ``TagValue(project_id, key, last_seen)``
 - Add ``GroupShare`` model.
 
+API Changes
+~~~~~~~~~~~
+- Added API endpoint to list members awaiting access
+
 Version 8.21
 ------------
 
diff --git a/src/sentry/api/endpoints/organization_access_request_details.py b/src/sentry/api/endpoints/organization_access_request_details.py
index 4bbc896a2d..45a5400fdf 100644
--- a/src/sentry/api/endpoints/organization_access_request_details.py
+++ b/src/sentry/api/endpoints/organization_access_request_details.py
@@ -6,12 +6,23 @@ from rest_framework.response import Response
 
 from sentry.api.bases.organization import (OrganizationEndpoint, OrganizationPermission)
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
 from sentry.models import (AuditLogEntryEvent, OrganizationAccessRequest, OrganizationMemberTeam)
 
 
 class AccessRequestPermission(OrganizationPermission):
     scope_map = {
-        'GET': [],
+        'GET': [
+            'org:read',
+            'org:write',
+            'org:admin',
+            'team:read',
+            'team:write',
+            'team:admin',
+            'member:read',
+            'member:write',
+            'member:admin',
+        ],
         'POST': [],
         'PUT': [
             'org:write',
@@ -48,6 +59,31 @@ class OrganizationAccessRequestDetailsEndpoint(OrganizationEndpoint):
             return True
         return False
 
+    def get(self, request, organization):
+        """
+        Get list of requests to join org/team
+
+        """
+        if request.access.has_scope('org:write'):
+            access_requests = list(
+                OrganizationAccessRequest.objects.filter(
+                    team__organization=organization,
+                    member__user__is_active=True,
+                ).select_related('team', 'member__user')
+            )
+        elif request.access.has_scope('team:write') and request.access.teams:
+            access_requests = list(
+                OrganizationAccessRequest.objects.filter(
+                    member__user__is_active=True,
+                    team__in=request.access.teams,
+                ).select_related('team', 'member__user')
+            )
+        else:
+            # Return empty response if user does not have access
+            return Response([])
+
+        return Response(serialize(access_requests, request.user))
+
     def put(self, request, organization, request_id):
         """
         Approve or deny a request
diff --git a/src/sentry/api/serializers/models/organization_access_request.py b/src/sentry/api/serializers/models/organization_access_request.py
new file mode 100644
index 0000000000..2ac0427f33
--- /dev/null
+++ b/src/sentry/api/serializers/models/organization_access_request.py
@@ -0,0 +1,17 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.api.serializers import Serializer, register, serialize
+from sentry.models import OrganizationAccessRequest
+
+
+@register(OrganizationAccessRequest)
+class OrganizationAccessRequestSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        d = {
+            'id': six.text_type(obj.id),
+            'member': serialize(obj.member),
+            'team': serialize(obj.team),
+        }
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 8c7a05508b..9dd3c5f97d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -204,6 +204,11 @@ urlpatterns = patterns(
         SlugsUpdateEndpoint.as_view(),
         name='sentry-api-0-short-ids-update'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/$',
+        OrganizationAccessRequestDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-access-requests'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/access-requests/(?P<request_id>\d+)/$',
         OrganizationAccessRequestDetailsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_access_requests.py b/tests/sentry/api/endpoints/test_organization_access_requests.py
new file mode 100644
index 0000000000..3b20fe58e8
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_access_requests.py
@@ -0,0 +1,71 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import OrganizationAccessRequest
+from sentry.testutils import APITestCase
+
+
+class UpdateOrganizationAccessRequestTest(APITestCase):
+    def test_owner_can_list_access_requests(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-access-requests',
+            args=[organization.slug]
+        )
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        assert len(resp.data) == 1
+        assert resp.data[0]['member']['email'] == 'bar@example.com'
+
+    def test_member_empty_results(self):
+        self.login_as(user=self.user)
+
+        organization = self.create_organization(name='foo', owner=self.user)
+        user = self.create_user('bar@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+        )
+        team = self.create_team(name='foo', organization=organization)
+
+        OrganizationAccessRequest.objects.create(
+            member=member,
+            team=team,
+        )
+
+        user = self.create_user('foo@example.com')
+        member = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-access-requests',
+            args=[organization.slug]
+        )
+
+        self.login_as(user=user)
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        assert len(resp.data) == 0
