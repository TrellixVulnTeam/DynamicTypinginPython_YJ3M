commit 0416b5ead836ef393d2f4e483948bd051a46120e
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 29 21:40:59 2015 -0700

    Add selectize bits

diff --git a/package.json b/package.json
index 2b3af223df..0682e82ff9 100644
--- a/package.json
+++ b/package.json
@@ -34,6 +34,7 @@
     "react-router": "^0.13.3",
     "react-sticky": "^2.1.0",
     "reflux": "^0.2.8",
+    "selectize": "^0.12.1",
     "sync-exec": "^0.5.0",
     "webpack": "^1.9.10"
   },
diff --git a/src/sentry/static/sentry/app/components/selectize.jsx b/src/sentry/static/sentry/app/components/selectize.jsx
new file mode 100644
index 0000000000..8afdfd4bf2
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/selectize.jsx
@@ -0,0 +1,208 @@
+// Based on onChange
+var React = require("react");
+var $ = require("jquery");
+
+var Selectize = React.createClass({
+  getDefaultProps() {
+    return {
+      // HTML attrs
+      disabled: false,
+      multiple: false,
+      // -- unsupported --
+      //autofocus: false,
+      //form: null,
+      //name: null
+      //required: false
+      //size: 0
+
+      // Extra options
+      placeholder: 'Select an option...',
+
+      // Component options
+      value: '',
+      handleChange: $.noop
+    };
+  },
+
+  getValue() {
+    return this.selectize.getValue();
+  },
+
+  create() {
+    var self = this;
+
+    var options = {};
+    selectizeOptNames.forEach(function(optName) {
+      if (optName in self.props) {
+        options[optName] = self.props[optName];
+      }
+    });
+
+    this.selectize = (
+      $(this.refs.select.getDOMNode())
+      .selectize(options)
+    )[0].selectize;
+
+    this.selectize.setValue(this.props.value);
+
+    this.selectize.on('change', this.onChange);
+  },
+
+  destroy() {
+    this.selectize.destroy();
+  },
+
+  shouldComponentUpdate(nextProps) {
+    var self = this;
+    var shouldUpdate = Object.keys(nextProps).some(function(propName) {
+      // If it's handled, we'll deal with it on our own.
+      if (propName in handledProps) return false;
+
+      return nextProps[propName] !== self.props[propName];
+    });
+    if (shouldUpdate) return true;
+
+    this._updating = true;
+
+    // Handle our handledProps if they've changed.
+    // If they're not here, they probably need no handling.
+
+    if (nextProps.disabled !== this.props.disabled) {
+      if (nextProps.disabled) {
+        this.selectize.disable();
+      }
+      else {
+        this.selectize.enable();
+      }
+    }
+
+    if (nextProps.placeholder !== this.props.placeholder) {
+      this.selectize.settings.placeholder = nextProps.placeholder;
+      this.selectize.updatePlaceholder();
+    }
+
+    if (nextProps.options !== this.props.options &&
+      !identicalArray(this.props.options, nextProps.options)) {
+      // Synchronously update the options, as
+      // Selectize's async load function causes
+      // issues.
+      this.selectize.clearOptions();
+      nextProps.options.forEach(function(option) {
+        self.selectize.addOption(option);
+      });
+      this.selectize.refreshOptions(false);
+    }
+
+    if (nextProps.value !== this.props.value) {
+      if (nextProps.multiple && nextProps.value !== null) {
+        if (!identicalArray(nextProps.value, this.getValue())) {
+          this.selectize.setValue(nextProps.value);
+        }
+      }
+      else {
+        if (nextProps.value !== this.getValue()) {
+          this.selectize.setValue(nextProps.value);
+        }
+      }
+    }
+
+    this._updating = false;
+
+    return false;
+  },
+
+  onChange(value) {
+    // Because handleChange often triggers state
+    // changes in containing components, we need to
+    // make sure that we're not currently updating from
+    // within another state change (otherwise react
+    // will throw an InvariantError).
+    if (!this._updating) {
+      this.props.handleChange(value);
+    }
+  },
+
+  componentDidMount() {
+    this.create();
+  },
+
+  componentWillUnmount() {
+    this.destroy();
+  },
+
+  componentWillUpdate() {
+    this.destroy();
+  },
+
+  componentDidUpdate() {
+    this.create();
+  },
+
+  render() {
+    var opts = {
+        ref: 'select',
+        className: "form-control"
+    };
+    if (this.props.disabled) {
+      opts.disabled = true;
+    }
+    if (this.props.multiple) {
+      opts.multiple = true;
+    }
+    return <div className="form-group"><select {...opts} /></div>;
+  }
+});
+
+function identicalArray(a1, a2){
+  return (
+      a1.length === a2.length &&
+      !a1.some(function(e, idx) { return a2[idx] !== e; })
+  );
+}
+
+const selectizeOptNames = [
+  'delimiter',
+  'diacritics',
+  'create',
+  'createOnBlur',
+  'createFilter',
+  'highlight',
+  'persist',
+  'openOnFocus',
+  'maxOptions',
+  'maxItems',
+  'hideSelected',
+  'scrollDuration',
+  'loadThrottle',
+  'preload',
+  'dropdownParent',
+  'addPrecedence',
+  'selectOnTab',
+  'options',
+  'dataAttr',
+  'valueField',
+  'optgroupValueField',
+  'labelField',
+  'optgroupLabelField',
+  'optgroupField',
+  'sortField',
+  'searchField',
+  'searchConjunction',
+  'optgroupOrder',
+  'load',
+  'score',
+  'render',
+
+  // Unofficial, but works as expected.
+  'placeholder'
+];
+
+var handledProps = {
+  value:        true,
+  disabled:     true,
+  placeholder:  true,
+  handleChange: true,
+  options:      true,
+};
+
+module.exports = Selectize;
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index ed54a3814e..64f3d18430 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -317,6 +317,10 @@
       $('.project-dropdown').on('shown.bs.dropdown', function(event){
         $(event.target).find('input[type=text]').focus();
       });
+
+      $(function() {
+        $('select').selectize();
+      });
     });
     $(function() {
 
diff --git a/webpack.config.js b/webpack.config.js
index d8ddd40038..ca8208630c 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -23,6 +23,7 @@ var config = {
       "react-router",
       "react-bootstrap",
       "reflux",
+      "selectize",
       "flot/jquery.flot",
       "flot/jquery.flot.stack",
       "flot/jquery.flot.time",
