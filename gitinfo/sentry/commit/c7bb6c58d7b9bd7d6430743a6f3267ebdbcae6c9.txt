commit c7bb6c58d7b9bd7d6430743a6f3267ebdbcae6c9
Author: William Mak <william@wmak.io>
Date:   Fri Jan 3 13:28:00 2020 -0500

    feat(search) - Prevent future searches on tagvalues with no results (#16194)
    
    * feat(search) - Prevent future searches on tagvalues with no results
    
    - Once a tag value has been typed that has no results, stop trying to
      search the backend for more similar values.

diff --git a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
index 7ea8a6281b..2f9cc707c3 100644
--- a/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
+++ b/src/sentry/static/sentry/app/components/smartSearchBar/index.jsx
@@ -220,6 +220,7 @@ class SmartSearchBar extends React.Component {
 
     this.state = {
       query: props.query !== null ? addSpace(props.query) : props.defaultQuery,
+      noValueQuery: undefined,
 
       searchTerm: '',
       searchItems: [],
@@ -486,17 +487,28 @@ class SmartSearchBar extends React.Component {
         const {location} = this.context.router;
         const endpointParams = getParams(location.query);
 
-        const values = await this.props.onGetTagValues(tag, query, endpointParams);
-        this.setState({loading: false});
-        return values.map(value => {
-          // Wrap in quotes if there is a space
-          const escapedValue =
-            value.indexOf(' ') > -1 ? `"${value.replace('"', '\\"')}"` : value;
-          return {
-            value: escapedValue,
-            desc: escapedValue,
-          };
-        });
+        if (
+          this.state.noValueQuery === undefined ||
+          !query.startsWith(this.state.noValueQuery)
+        ) {
+          const values = await this.props.onGetTagValues(tag, query, endpointParams);
+          this.setState({loading: false});
+          const noValueQuery =
+            values.length === 0 && query.length > 0 ? query : undefined;
+          this.setState({noValueQuery});
+          return values.map(value => {
+            // Wrap in quotes if there is a space
+            const escapedValue =
+              value.indexOf(' ') > -1 ? `"${value.replace('"', '\\"')}"` : value;
+            return {
+              value: escapedValue,
+              desc: escapedValue,
+            };
+          });
+        } else {
+          this.setState({loading: false});
+          return [];
+        }
       } catch (err) {
         this.setState({loading: false});
         Sentry.captureException(err);
diff --git a/tests/js/spec/views/events/searchBar.spec.jsx b/tests/js/spec/views/events/searchBar.spec.jsx
index c3fa2d00e8..fc54526f16 100644
--- a/tests/js/spec/views/events/searchBar.spec.jsx
+++ b/tests/js/spec/views/events/searchBar.spec.jsx
@@ -57,7 +57,11 @@ describe('SearchBar', function() {
     });
     tagKeysMock = MockApiClient.addMockResponse({
       url: '/organizations/org-slug/tags/',
-      body: [{count: 3, key: 'gpu'}, {count: 3, key: 'mytag'}],
+      body: [
+        {count: 3, key: 'gpu'},
+        {count: 3, key: 'mytag'},
+        {count: 0, key: 'browser'},
+      ],
     });
   });
 
@@ -196,4 +200,54 @@ describe('SearchBar', function() {
     selectFirstAutocompleteItem(wrapper);
     expect(wrapper.find('input').prop('value')).toBe('!gpu:*"Nvidia 1080ti" ');
   });
+
+  it('stops searching after no values are returned', async function() {
+    const emptyTagValuesMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/browser/values/',
+      body: [],
+    });
+
+    const wrapper = mountWithTheme(<SearchBar {...props} />, options);
+    await tick();
+
+    setQuery(wrapper, 'browser:Nothing');
+    await tick();
+    wrapper.update();
+
+    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
+
+    setQuery(wrapper, 'browser:NothingE');
+    await tick();
+    wrapper.update();
+
+    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
+
+    setQuery(wrapper, 'browser:NothingEls');
+    await tick();
+    wrapper.update();
+
+    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
+  });
+
+  it('continues searching after no values if query changes', async function() {
+    const emptyTagValuesMock = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/browser/values/',
+      body: [],
+    });
+
+    const wrapper = mountWithTheme(<SearchBar {...props} />, options);
+    await tick();
+
+    setQuery(wrapper, 'browser:Nothing');
+    await tick();
+    wrapper.update();
+
+    expect(emptyTagValuesMock).toHaveBeenCalledTimes(1);
+
+    setQuery(wrapper, 'browser:Something');
+    await tick();
+    wrapper.update();
+
+    expect(emptyTagValuesMock).toHaveBeenCalledTimes(2);
+  });
 });
