commit 4c19b07d368ccf32921b99f33d58e76dc49908ac
Author: Dena Mwangi <dena@getsentry.com>
Date:   Tue Dec 11 16:38:30 2018 -0800

    feat(experiments): Onboarding survey experiment questions (#10912)

diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 7829032163..0e240fa903 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -191,6 +191,8 @@ export default {
       ajaxCsrfSetup: require('app/utils/ajaxCsrfSetup').default,
       logging: require('app/utils/logging'),
       descopeFeatureName: require('app/utils').descopeFeatureName,
+      onboardingSteps: require('app/views/onboarding/utils').onboardingSteps,
+      stepDescriptions: require('app/views/onboarding/utils').stepDescriptions,
     },
   },
 };
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 6343d295db..3f7993e05d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -89,6 +89,11 @@ function routes() {
     hooksOrgRoutes.push(cb());
   });
 
+  let hooksSurveyRoute = [];
+  HookStore.get('routes:onboarding-survey').forEach(cb => {
+    hooksSurveyRoute.push(cb());
+  });
+
   const accountSettingsRoutes = (
     <React.Fragment>
       <IndexRedirect to="details/" />
@@ -746,6 +751,7 @@ function routes() {
       <Route path="/onboarding/:orgId/" component={errorHandler(OrganizationContext)}>
         <Route path="" component={errorHandler(OnboardingWizard)}>
           <IndexRoute component={errorHandler(CreateProject)} />
+          {hooksSurveyRoute}
           <Route
             path=":projectId/configure/(:platform)"
             component={errorHandler(OnboardingConfigure)}
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 90dd95c6f0..5177491726 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -8,16 +8,20 @@ const validHookNames = new Set([
   'routes',
   'routes:admin',
   'routes:organization',
+  'routes:onboarding-survey',
 
   // Analytics and tracking hooks
   'amplitude:event',
   'analytics:event',
   'analytics:log-experiment',
+  'analytics:onboarding-survey-log',
 
   // Operational metrics
   'metrics:event',
 
   // Specific component customizations
+  'sidebar:onboarding-assets',
+  'utils:onboarding-survey-url',
   'component:org-auth-view',
   'component:org-members-view',
   'component:releases-tab',
diff --git a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
index 4b5f74650c..07f0e47afe 100644
--- a/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/configure/index.jsx
@@ -3,7 +3,7 @@ import createReactClass from 'create-react-class';
 import {browserHistory} from 'react-router';
 
 import sdk from 'app/utils/sdk';
-import {analytics} from 'app/utils/analytics';
+import {analytics, amplitude} from 'app/utils/analytics';
 import ApiMixin from 'app/mixins/apiMixin';
 import Hook from 'app/components/hook';
 import ProjectContext from 'app/views/projects/projectContext';
@@ -38,6 +38,24 @@ const Configure = createReactClass({
     }, 2000);
   },
 
+  componentDidMount() {
+    let {organization} = this.context;
+    let {params} = this.props;
+    let data = {
+      project: params.projectId,
+      platform: params.platform,
+    };
+
+    amplitude(
+      'Viewed Onboarding Installation Instructions',
+      parseInt(organization.id, 10),
+      data
+    );
+
+    data.org_id = parseInt(organization.id, 10);
+    analytics('onboarding.configure_viewed', data);
+  },
+
   componentWillUpdate(nextProps, nextState) {
     if (
       !this.state.isFirstTimePolling &&
@@ -89,7 +107,14 @@ const Configure = createReactClass({
   },
 
   submit() {
-    analytics('onboarding.complete', {project: this.props.params.projectId});
+    let {projectId} = this.props.params;
+    let {organization} = this.context;
+    analytics('onboarding.complete', {project: projectId});
+    amplitude(
+      'Completed Onboarding Installation Instructions',
+      parseInt(organization.id, 10),
+      {projectId}
+    );
     this.redirectUrl();
   },
 
diff --git a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
index 8e081182dc..a7bc4944ce 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createProject.jsx
@@ -11,6 +11,7 @@ import {openCreateTeamModal} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
 import ApiMixin from 'app/mixins/apiMixin';
 import Button from 'app/components/button';
+import HookStore from 'app/stores/hookStore';
 import OnboardingProject from 'app/views/onboarding/project';
 import OrganizationState from 'app/mixins/organizationState';
 import PanelAlert from 'app/components/panels/panelAlert';
@@ -63,7 +64,6 @@ const CreateProject = createReactClass({
 
   onTeamCreated() {
     let {router} = this.context;
-
     // After team gets created we need to force OrganizationContext to basically remount
     router.replace({
       pathname: router.location.pathname,
@@ -71,6 +71,19 @@ const CreateProject = createReactClass({
     });
   },
 
+  navigateNextUrl(data) {
+    let organization = this.getOrganization();
+
+    let url =
+      HookStore.get('utils:onboarding-survey-url').length &&
+      organization.projects.length === 0
+        ? HookStore.get('utils:onboarding-survey-url')[0](data, organization)
+        : data.docsUrl;
+
+    this.setState({inFlight: false});
+    data.router.push(url);
+  },
+
   createProject() {
     let {router} = this.context;
     let {slug} = this.getOrganization();
@@ -96,9 +109,8 @@ const CreateProject = createReactClass({
         ProjectActions.createSuccess(data);
 
         // navigate to new url _now_
-        const url = this.props.getDocsUrl({slug, projectSlug: data.slug, platform});
-        this.setState({inFlight: false});
-        router.push(url);
+        const docsUrl = this.props.getDocsUrl({slug, projectSlug: data.slug, platform});
+        this.navigateNextUrl({router, slug, projectSlug: data.slug, platform, docsUrl});
       },
       error: err => {
         this.setState({
diff --git a/src/sentry/static/sentry/app/views/onboarding/progress.jsx b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
index dd5197577e..4aab16fdab 100644
--- a/src/sentry/static/sentry/app/views/onboarding/progress.jsx
+++ b/src/sentry/static/sentry/app/views/onboarding/progress.jsx
@@ -3,8 +3,9 @@ import React from 'react';
 import createReactClass from 'create-react-class';
 import classNames from 'classnames';
 
-import {analytics} from 'app/utils/analytics';
+import {analytics, amplitude} from 'app/utils/analytics';
 import ConfigStore from 'app/stores/configStore';
+import HookStore from 'app/stores/hookStore';
 import {onboardingSteps, stepDescriptions} from 'app/views/onboarding/utils';
 
 const ProgressNodes = createReactClass({
@@ -16,30 +17,55 @@ const ProgressNodes = createReactClass({
 
   contextTypes: {
     organization: PropTypes.object,
+    location: PropTypes.object,
   },
 
   componentDidMount() {
-    let {params} = this.props;
+    let {organization} = this.context;
+    let user = ConfigStore.get('user');
     let step = this.inferStep();
-    let eventName =
-      step === 1 ? 'onboarding.create_project_viewed' : 'onboarding.configure_viewed';
-
-    let data = {org_id: parseInt(this.context.organization.id, 10)};
 
-    if (step === 2) {
-      data.project = params.projectId;
-      data.platform = params.platform;
+    if (step === 1) {
+      analytics('onboarding.create_project_viewed', {
+        org_id: parseInt(organization.id, 10),
+      });
+      amplitude('Viewed Onboarding Create Project', parseInt(organization.id, 10));
     }
 
-    analytics(eventName, data);
+    HookStore.get('analytics:onboarding-survey-log').length &&
+      HookStore.get('analytics:onboarding-survey-log')[0](organization, user);
   },
 
   steps: Object.keys(onboardingSteps),
 
+  getAsset(type) {
+    let {organization} = this.context;
+
+    let hook =
+      HookStore.get('sidebar:onboarding-assets').length &&
+      HookStore.get('sidebar:onboarding-assets')[0]({organization});
+
+    let asset, hookAsset;
+    if (type === 'steps') {
+      asset = onboardingSteps;
+      hookAsset = hook[0];
+    } else {
+      asset = stepDescriptions;
+      hookAsset = hook[1];
+    }
+
+    return hook ? hookAsset : asset;
+  },
+
   inferStep() {
-    let {projectId} = this.props.params;
-    if (!projectId) return onboardingSteps.project;
-    return onboardingSteps.configure;
+    let {pathname} = this.context.location;
+    let {params} = this.props;
+    let steps = this.getAsset('steps');
+
+    if (!params.projectId) return steps.project;
+    if (params.projectId && pathname.indexOf('/configure/') === -1) return steps.survey;
+
+    return steps.configure;
   },
 
   node(stepKey, stepIndex) {
@@ -48,10 +74,11 @@ const ProgressNodes = createReactClass({
       active: stepIndex === this.inferStep(),
     });
 
+    let descriptions = this.getAsset('descriptions');
     return (
       <div className={nodeClass} key={stepIndex}>
         <span className={nodeClass} />
-        {stepDescriptions[stepKey]}
+        {descriptions[stepKey]}
       </div>
     );
   },
@@ -59,13 +86,13 @@ const ProgressNodes = createReactClass({
   render() {
     let config = ConfigStore.getConfig();
     let {slug} = this.context.organization;
-
+    let steps = Object.keys(this.getAsset('steps'));
     return (
       <div className="onboarding-sidebar">
         <div className="sentry-flag">
           <span href="/" className="icon-sentry-logo-full" />
         </div>
-        <div className="progress-nodes">{this.steps.map(this.node)}</div>
+        <div className="progress-nodes">{steps.map(this.node)}</div>
         <div className="stuck">
           <a
             href={
diff --git a/tests/js/spec/views/onboarding/index.spec.jsx b/tests/js/spec/views/onboarding/index.spec.jsx
index a792f3af6b..571cda3aff 100644
--- a/tests/js/spec/views/onboarding/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/index.spec.jsx
@@ -36,7 +36,7 @@ describe('OnboardingWizard', function() {
       };
 
       let wrapper = shallow(<OnboardingWizard {...props} />, {
-        organization: {id: '1337', slug: 'testOrg'},
+        organization: {id: '1337', slug: 'testOrg', experiments: {}},
       });
       expect(wrapper).toMatchSnapshot();
     });
@@ -57,12 +57,14 @@ describe('OnboardingWizard', function() {
 
       let wrapper = mount(<OnboardingWizard {...props} />, {
         context: {
-          organization: {id: '1337', slug: 'testOrg'},
+          organization: {id: '1337', slug: 'testOrg', experiments: {}},
           router: TestStubs.router(),
+          location: {pathname: 'http://lol/', query: {}},
         },
         childContextTypes: {
           router: PropTypes.object,
           organization: PropTypes.object,
+          location: {pathname: 'http://lol/', query: {}},
         },
       });
 
diff --git a/tests/js/spec/views/onboarding/progress.spec.jsx b/tests/js/spec/views/onboarding/progress.spec.jsx
index c78fcc397f..81440e6a07 100644
--- a/tests/js/spec/views/onboarding/progress.spec.jsx
+++ b/tests/js/spec/views/onboarding/progress.spec.jsx
@@ -11,13 +11,13 @@ describe('ProgressNodes', function() {
       },
     };
 
-    const baseContext = {
-      context: {
-        organization: {id: '1337', slug: 'testOrg'},
-      },
-    };
-
     it('should render step 0 if no projectId', function() {
+      let baseContext = {
+        context: {
+          organization: {id: '1337', slug: 'testOrg', experiments: {}},
+          location: {pathname: 'http://onboarding/lol/', query: {}},
+        },
+      };
       let wrapper = shallow(<ProgressNodes {...baseProps} />, baseContext);
 
       expect(wrapper.find('.node')).toHaveLength(6);
@@ -36,6 +36,15 @@ describe('ProgressNodes', function() {
     });
 
     it('should render step 1 if has projectId', function() {
+      let baseContext = {
+        context: {
+          organization: {id: '1337', slug: 'testOrg', experiments: {}},
+          location: {
+            pathname: 'http://onboarding/lol/projectSlug/configure/platform/',
+            query: {},
+          },
+        },
+      };
       let props = {
         ...baseProps,
         params: {
