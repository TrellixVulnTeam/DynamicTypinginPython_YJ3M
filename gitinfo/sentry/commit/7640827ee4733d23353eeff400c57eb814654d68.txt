commit 7640827ee4733d23353eeff400c57eb814654d68
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 29 18:31:06 2014 -0700

    Cache all GroupMeta values

diff --git a/src/sentry/models/groupmeta.py b/src/sentry/models/groupmeta.py
index dd6359a451..65e5484567 100644
--- a/src/sentry/models/groupmeta.py
+++ b/src/sentry/models/groupmeta.py
@@ -6,6 +6,8 @@ sentry.models.groupmeta
 :license: BSD, see LICENSE for more details.
 """
 
+from celery.signals import task_postrun
+from django.core.signals import request_finished
 from django.db import models
 
 from sentry.db.models import Model, sane_repr
@@ -13,28 +15,47 @@ from sentry.db.models.manager import BaseManager
 
 
 class GroupMetaManager(BaseManager):
-    def get_value_bulk(self, instances, key):
-        instance_map = dict((i.id, i) for i in instances)
-        queryset = self.filter(
-            group__in=instances,
-            key=key,
+    def __init__(self, *args, **kwargs):
+        super(GroupMetaManager, self).__init__(*args, **kwargs)
+        task_postrun.connect(self.clear_local_cache)
+        request_finished.connect(self.clear_local_cache)
+        self.__cache = {}
+
+    def __getstate__(self):
+        d = self.__dict__.copy()
+        d.pop('_GroupMetaManager__cache', None)
+        return d
+
+    def __setstate__(self, state):
+        self.__dict__.update(state)
+        self.__cache = {}
+
+    def clear_local_cache(self, **kwargs):
+        self.__cache = {}
+
+    def populate_cache(self, instance_list):
+        results = self.filter(
+            group__in=instance_list,
+        ).values_list('group', 'key', 'value')
+        for group_id, key, value in results:
+            self.__cache.setdefault(group_id, {})
+            self.__cache[group_id][key] = value
+
+    def get_value_bulk(self, instance_list, key):
+        return dict(
+            (i, self.__cache.get(i.id, {}).get(key))
+            for i in instance_list
         )
-        result = dict((i, None) for i in instances)
-        for obj in queryset:
-            result[instance_map[obj.group_id]] = obj.value
-        return result
 
     def get_value(self, instance, key, default=None):
-        try:
-            return self.get(
-                group=instance,
-                key=key,
-            ).value
-        except self.model.DoesNotExist:
-            return default
+        return self.__cache.get(instance.id, {}).get(key, default)
 
     def unset_value(self, instance, key):
         self.filter(group=instance, key=key).delete()
+        try:
+            del self.__cache[instance.id][key]
+        except KeyError:
+            pass
 
     def set_value(self, instance, key, value):
         self.create_or_update(
@@ -44,6 +65,8 @@ class GroupMetaManager(BaseManager):
                 'value': value,
             },
         )
+        self.__cache.setdefault(instance.id, {})
+        self.__cache[instance.id][key] = value
 
 
 class GroupMeta(Model):
diff --git a/src/sentry/plugins/bases/issue.py b/src/sentry/plugins/bases/issue.py
index f032297dfa..9d1b8370cd 100644
--- a/src/sentry/plugins/bases/issue.py
+++ b/src/sentry/plugins/bases/issue.py
@@ -32,10 +32,6 @@ class IssuePlugin(Plugin):
     needs_auth_template = 'sentry/plugins/bases/issue/needs_auth.html'
     auth_provider = None
 
-    def __init__(self, *args, **kwargs):
-        super(IssuePlugin, self).__init__(*args, **kwargs)
-        self._cache = {}
-
     def _get_group_body(self, request, group, event, **kwargs):
         interface = event.interfaces.get('sentry.interfaces.Stacktrace')
         if interface:
@@ -209,16 +205,12 @@ class IssuePlugin(Plugin):
             action_list.append((self.get_new_issue_title(), self.get_url(group)))
         return action_list
 
-    def before_events(self, request, event_list, **kwargs):
-        if event_list and self.is_configured(request=request, project=event_list[0].project):
-            prefix = self.get_conf_key()
-            self._cache = GroupMeta.objects.get_value_bulk(event_list, '%s:tid' % prefix)
-
     def tags(self, request, group, tag_list, **kwargs):
         if not self.is_configured(request=request, project=group.project):
             return tag_list
 
-        issue_id = self._cache.get(group)
+        prefix = self.get_conf_key()
+        issue_id = GroupMeta.objects.get_value(group, '%s:tid' % prefix)
         if not issue_id:
             return tag_list
 
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index a630ab1f55..23216d525c 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -29,7 +29,7 @@ from nydus.db import create_cluster
 from rest_framework.test import APITestCase as BaseAPITestCase
 
 from sentry.constants import MODULE_ROOT
-from sentry.models import ProjectOption
+from sentry.models import GroupMeta, ProjectOption
 from sentry.rules import EventState
 from sentry.utils import json
 
@@ -105,6 +105,7 @@ class BaseTestCase(Fixtures, Exam):
     def _pre_setup(self):
         cache.clear()
         ProjectOption.objects.clear_local_cache()
+        GroupMeta.objects.clear_local_cache()
         super(BaseTestCase, self)._pre_setup()
 
     def _post_teardown(self):
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 5643f1f3ef..8ee5fbb302 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -25,7 +25,7 @@ from sentry.constants import (
 )
 from sentry.db.models import create_or_update
 from sentry.models import (
-    Project, Group, Event, Activity, EventMapping, TagKey, GroupSeen
+    Project, Group, GroupMeta, Event, Activity, EventMapping, TagKey, GroupSeen
 )
 from sentry.permissions import (
     can_admin_group, can_remove_group, can_create_projects
@@ -256,6 +256,8 @@ def group_list(request, team, project):
         del query_dict['p']
     pageless_query_string = query_dict.urlencode()
 
+    GroupMeta.objects.populate_cache(response['event_list'])
+
     return render_to_response('sentry/groups/group_list.html', {
         'team': project.team,
         'project': project,
@@ -284,6 +286,7 @@ def group(request, team, project, group, event_id=None):
         event = group.get_latest_event() or Event()
 
     Event.objects.bind_nodes([event], 'data')
+    GroupMeta.objects.populate_cache([group])
 
     # bind params to group in case they get hit
     event.group = group
diff --git a/tests/sentry/models/test_groupmeta.py b/tests/sentry/models/test_groupmeta.py
index b6e536cef4..260137d7f4 100644
--- a/tests/sentry/models/test_groupmeta.py
+++ b/tests/sentry/models/test_groupmeta.py
@@ -19,6 +19,10 @@ class GroupMetaManagerTest(TestCase):
         GroupMeta.objects.create(
             group=self.group, key='foo', value='bar')
         result = GroupMeta.objects.get_value(self.group, 'foo')
+        assert result is None
+
+        GroupMeta.objects.populate_cache([self.group])
+        result = GroupMeta.objects.get_value(self.group, 'foo')
         assert result == 'bar'
 
     def test_unset_value(self):
@@ -36,4 +40,8 @@ class GroupMetaManagerTest(TestCase):
         GroupMeta.objects.create(
             group=self.group, key='foo', value='bar')
         result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
+        assert result == {self.group: None}
+
+        GroupMeta.objects.populate_cache([self.group])
+        result = GroupMeta.objects.get_value_bulk([self.group], 'foo')
         assert result == {self.group: 'bar'}
