commit 079e79a1f8261a71f4d3880477598ebd294ddabc
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 15 13:46:53 2013 +0900

    Initial work on node field

diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
new file mode 100644
index 0000000000..bb7f63d696
--- /dev/null
+++ b/src/sentry/db/models/fields/node.py
@@ -0,0 +1,104 @@
+"""
+sentry.db.models.fields.node
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import collections
+import logging
+
+from django.db import models
+
+from sentry.utils.cache import memoize
+from sentry.utils.compat import pickle
+from sentry.utils.strings import decompress, compress
+
+from .gzippeddict import GzippedDictField
+
+__all__ = ('NodeField',)
+
+logger = logging.getLogger('sentry.errors')
+
+
+class NodeData(collections.MutableMapping):
+    def __init__(self, id, data=None):
+        self.id = id
+        self._node_data = data
+
+    @memoize
+    def data(self):
+        if self._node_data is None:
+            raise Exception('Must populate node data first')
+        return self._node_data
+
+    def bind_node_data(self, data):
+        self.data = data
+
+    def __getitem__(self, key):
+        return self.data[key]
+
+    def __setitem__(self, key, value):
+        self.data[key] = value
+
+    def __delitem__(self, key):
+        del self.data[key]
+
+    def __iter__(self):
+        return iter(self.data)
+
+    def __len__(self):
+        return len(self.data)
+
+
+class NodeField(GzippedDictField):
+    """
+    Similar to the gzippedictfield except that it stores a reference
+    to an external node.
+    """
+    __metaclass__ = models.SubfieldBase
+
+    def to_python(self, value):
+        if isinstance(value, basestring) and value:
+            try:
+                value = pickle.loads(decompress(value))
+            except Exception, e:
+                logger.exception(e)
+                value = {}
+        elif not value:
+            value = {}
+
+        if 'node_id' in value:
+            node_id = value.pop('node_id')
+            data = None
+        else:
+            node_id = None
+            data = value
+
+        return NodeData(node_id, data)
+
+    def get_prep_value(self, value):
+        if not value and self.null:
+            # save ourselves some storage
+            return None
+        if value.id:
+            result = {
+                'node_id': value.id
+            }
+        else:
+            result = value.data
+        return compress(pickle.dumps(result))
+
+    def value_to_string(self, obj):
+        value = self._get_val_from_obj(obj)
+        return self.get_prep_value(value)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 9cb6ca626b..e7f93479a0 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -743,7 +743,7 @@ class Event(EventBase):
     @memoize
     def interfaces(self):
         result = []
-        for key, data in self.data.iteritems():
+        for key, data in self.node_data.iteritems():
             if '.' not in key:
                 continue
 
@@ -760,6 +760,20 @@ class Event(EventBase):
 
         return SortedDict((k, v) for k, v in sorted(result, key=lambda x: x[1].get_score(), reverse=True))
 
+    @property
+    def node_data(self):
+        assert hasattr(self, '_node_data_cache'), 'missing node data cache'
+
+    def bind_node_data(self):
+        from sentry import app
+
+        node_id = self._data.get('data_nid')
+
+        if not node_id:
+            return self._data
+
+        self._node_data_cache = app.nodestore.get(node_id)
+
     def get_version(self):
         if not self.data:
             return
