commit 2d83e5174ee5cdb7be7745caf6928cd18b3aaf09
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 23 21:50:38 2011 -0800

    Some initial refactoring and reorganization of views and templates, including an additional events pane

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 6acfc32242..77b52ad88c 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -81,4 +81,6 @@ MINUTE_NORMALIZATION = 15
 WEB_HOST = 'localhost'
 WEB_PORT = 9000
 WEB_LOG_FILE = os.path.join(ROOT, 'sentry.log')
-WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
\ No newline at end of file
+WEB_PID_FILE = os.path.join(ROOT, 'sentry.pid')
+
+MESSAGES_PER_PAGE = 25
diff --git a/sentry/filters.py b/sentry/filters.py
index 25efb987cf..c900dd4bff 100644
--- a/sentry/filters.py
+++ b/sentry/filters.py
@@ -15,6 +15,7 @@ from django.utils.safestring import mark_safe
 from django.utils.html import escape
 
 from sentry.conf import settings
+from sentry.models import Group, Event, FilterValue, MessageIndex
 
 class Widget(object):
     def __init__(self, filter, request):
@@ -67,6 +68,7 @@ class SentryFilter(object):
     # This must be a string
     default = ''
     show_label = True
+    types = [Group, Event]
 
     def __init__(self, request):
         self.request = request
@@ -93,13 +95,11 @@ class SentryFilter(object):
         return '?' + query_dict.urlencode()
 
     def get_choices(self):
-        from sentry.models import FilterValue
         return SortedDict((l, l) for l in FilterValue.objects.filter(key=self.column)\
                                                      .values_list('value', flat=True)\
                                                      .order_by('value'))
 
     def get_query_set(self, queryset):
-        from sentry.models import MessageIndex
         kwargs = {self.column: self.get_value()}
         if self.column.startswith('data__'):
             return MessageIndex.objects.get_for_queryset(queryset, **kwargs)
@@ -113,7 +113,13 @@ class SentryFilter(object):
         widget = self.get_widget()
         return widget.render(self.get_value())
 
-class StatusFilter(SentryFilter):
+class EventFilter(SentryFilter):
+    types = [Event]
+
+class GroupFilter(SentryFilter):
+    types = [Group]
+
+class StatusFilter(GroupFilter):
     label = 'Status'
     column = 'status'
     default = '0'
@@ -133,7 +139,10 @@ class ServerNameFilter(SentryFilter):
     column = 'server_name'
 
     def get_query_set(self, queryset):
-        return queryset.filter(event_set__server_name=self.get_value()).distinct()
+        if queryset.model == Event:
+            return queryset.filter(server_name=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__server_name=self.get_value()).distinct()
 
 class SiteFilter(SentryFilter):
     label = 'Site'
@@ -156,7 +165,10 @@ class SiteFilter(SentryFilter):
         return data
 
     def get_query_set(self, queryset):
-        return queryset.filter(event_set__site=self.get_value()).distinct()
+        if queryset.model == Event:
+            return queryset.filter(site=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__site=self.get_value()).distinct()
 
 class LevelFilter(SentryFilter):
     label = 'Level'
@@ -189,4 +201,7 @@ class SiteFilter(SentryFilter):
         return data
 
     def get_query_set(self, queryset):
-        return queryset.filter(event_set__site=self.get_value()).distinct()
+        if queryset.model == Event:
+            return queryset.filter(site=self.get_value()).distinct()
+        else:
+            return queryset.filter(event_set__site=self.get_value()).distinct()
diff --git a/sentry/models.py b/sentry/models.py
index 311d8f3bdd..9bf0f3a3ad 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -25,7 +25,7 @@ from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.utils import cached_property, get_filters, \
+from sentry.utils import cached_property, \
                          MockDjangoRequest
 from sentry.utils.models import Model, GzippedDictField
 from sentry.utils.manager import GroupManager
@@ -370,6 +370,9 @@ class MessageIndex(BaseIndex):
 
 ### Helper methods
 
+# This comes later due to recursive imports
+from sentry.utils import get_filters
+
 def register_indexes():
     """
     Grabs all required indexes from filters and registers them.
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index b1d043bc9a..41af43b0b7 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -95,7 +95,7 @@ class CreateRedmineIssue(GroupActionProvider):
 
         global_errors = form.errors.get('__all__')
 
-        BASE_TEMPLATE = "sentry/group/details.html"
+        BASE_TEMPLATE = "sentry/groups/details.html"
 
         context = locals()
         context.update(csrf(request))
diff --git a/sentry/plugins/sentry_redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
index 7ac1dec6f1..119a664ff4 100644
--- a/sentry/plugins/sentry_redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -48,7 +48,7 @@ class CreateIssueTest(TestCase):
             'description': 'foo',
         }, follow=True)
         self.assertEquals(response.status_code, 200)
-        self.assertTemplateUsed(response, 'sentry/group/details.html')
+        self.assertTemplateUsed(response, 'sentry/groups/details.html')
 
         self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
 
@@ -66,7 +66,7 @@ class CreateIssueTest(TestCase):
             'description': 'foo',
         }, follow=True)
         self.assertEquals(response.status_code, 200)
-        self.assertTemplateUsed(response, 'sentry/group/details.html')
+        self.assertTemplateUsed(response, 'sentry/groups/details.html')
 
         self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
 
diff --git a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
index 4fca690db2..4bde028d9c 100644
--- a/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
+++ b/sentry/plugins/sentry_servers/templates/sentry/plugins/sentry_servers/index.html
@@ -1,4 +1,4 @@
-{% extends "sentry/group/details.html" %}
+{% extends "sentry/groups/details.html" %}
 
 {% load sentry_helpers %}
 
diff --git a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
index 371a6fb016..2f7570046c 100644
--- a/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
+++ b/sentry/plugins/sentry_sites/templates/sentry/plugins/sentry_sites/index.html
@@ -1,4 +1,4 @@
-{% extends "sentry/group/details.html" %}
+{% extends "sentry/groups/details.html" %}
 
 {% load sentry_helpers %}
 
diff --git a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
index f7b063396c..97aef4125b 100644
--- a/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
+++ b/sentry/plugins/sentry_urls/templates/sentry/plugins/sentry_urls/index.html
@@ -1,4 +1,4 @@
-{% extends "sentry/group/details.html" %}
+{% extends "sentry/groups/details.html" %}
 
 {% load sentry_helpers %}
 
diff --git a/sentry/templates/sentry/events/event_list.html b/sentry/templates/sentry/events/event_list.html
new file mode 100644
index 0000000000..0aa551c44f
--- /dev/null
+++ b/sentry/templates/sentry/events/event_list.html
@@ -0,0 +1,60 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block heading %}{% trans "Events (Individual)" %}{% endblock %}
+
+{% block sidebar %}
+    {% if chart_url %}
+        <h2>{% trans "Last 24 Hours" %}</h2>
+        <img src="{{ chart_url }}" class="chart" alt="chart"/>
+    {% endif %}
+
+    {% for filter in filters %}
+        <div class="sidebar-module sidebar-module-{{ filter.column }}">
+            {% if filter.show_label %}
+                <h2>{% trans filter.label %}</h2>
+            {% endif %}
+            <form method="get" action="{{ filter.get_query_string|safe }}">
+                {{ filter.render }}
+            </form>
+        </div>
+    {% endfor %}
+{% endblock %}
+
+{% block main %}
+    {% paginate event_list from request as event_list per_page 15 %}
+
+    <div class="paging-wrap">
+        <div class="clearfix">
+            <form method="GET" action="">
+                {% for k, v in request.GET.iteritems %}
+                    {% if k != 'sort' %}
+                        <input type="hidden" name="{{ k }}" value="{{ v }}"/>
+                    {% endif %}
+                {% endfor %}
+            </form>
+            <a id="clear_feed" href="{% url sentry-ajax %}?op=clear" onclick="Sentry.stream.clear();return false;" class="realtime realtime-pause">Clear Feed</a>
+            {{ event_list.paging }}
+        </div>
+    </div>
+
+    {% if event_list.objects %}
+        <ul class="messages" id="event_list">
+            {% for event in event_list.objects %}
+                {% include "sentry/partial/_event.html" %}
+            {% endfor %}
+        </ul>
+    {% else %}
+        <ul class="messages" id="event_list">
+            <li class="no-messages" id="no_messages">{% trans "No messages match your filters." %}</li>
+        </ul>
+    {% endif %}
+
+    <div class="paging-wrap">
+        <div class="clearfix">
+            {{ event_list.paging }}
+        </div>
+    </div>
+{% endblock %}
diff --git a/sentry/templates/sentry/group/details.html b/sentry/templates/sentry/groups/details.html
similarity index 100%
rename from sentry/templates/sentry/group/details.html
rename to sentry/templates/sentry/groups/details.html
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/groups/group_list.html
similarity index 97%
rename from sentry/templates/sentry/index.html
rename to sentry/templates/sentry/groups/group_list.html
index 3f114a0299..445f851794 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -3,7 +3,7 @@
 {% load i18n %}
 {% load sentry_helpers %}
 
-{% block heading %}{% trans "Dashboard" %}{% endblock %}
+{% block heading %}{% trans "Events (Aggregated)" %}{% endblock %}
 
 {% block sidebar %}
     {% if chart_url %}
diff --git a/sentry/templates/sentry/group/message.html b/sentry/templates/sentry/groups/message.html
similarity index 98%
rename from sentry/templates/sentry/group/message.html
rename to sentry/templates/sentry/groups/message.html
index fc4d2f4eb3..ff1440d236 100644
--- a/sentry/templates/sentry/group/message.html
+++ b/sentry/templates/sentry/groups/message.html
@@ -1,4 +1,4 @@
-{% extends "sentry/group/details.html" %}
+{% extends "sentry/groups/details.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
diff --git a/sentry/templates/sentry/group/message_list.html b/sentry/templates/sentry/groups/message_list.html
similarity index 75%
rename from sentry/templates/sentry/group/message_list.html
rename to sentry/templates/sentry/groups/message_list.html
index 7a95e92732..23075c3836 100644
--- a/sentry/templates/sentry/group/message_list.html
+++ b/sentry/templates/sentry/groups/message_list.html
@@ -1,4 +1,4 @@
-{% extends "sentry/group/details.html" %}
+{% extends "sentry/groups/details.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
@@ -12,8 +12,8 @@
         </div>
     </div>
     <ul class="messages" id="message_list">
-        {% for message in message_list.objects %}
-            {% include "sentry/partial/_message.html" %}
+        {% for event in message_list.objects %}
+            {% include "sentry/partial/_event.html" %}
         {% endfor %}
     </ul>
     <div class="paging-wrap">
diff --git a/sentry/templates/sentry/partial/_event.html b/sentry/templates/sentry/partial/_event.html
new file mode 100644
index 0000000000..6677d09967
--- /dev/null
+++ b/sentry/templates/sentry/partial/_event.html
@@ -0,0 +1,25 @@
+{% load sentry_helpers %}
+
+<li class="{% cycle 'row1' 'row2' %} level-{{ event.level }}{% if priority %} priority-{{ priority }}{% endif %}" id="message_{{ event.pk }}" data-sentry-count="{{ event.times_seen }}">
+    <h3><a href="{% url sentry-group-message event.project_id event.group_id event.pk %}">
+        {{ event.message_top }}
+        {% if event.url %}
+             on {{ event.url }}
+        {% endif %}
+    </a></h3>
+    <span class="status status-{{ event.status }}">{{ event.get_status_display }}</span>
+    <p class="message">
+        {% if event.message_id %}
+            <span class="tag tag-id">{{ event.message_id }}</span>
+        {% endif %}
+        <span class="tag tag-level">{{ event.get_level_display }}</span>
+        <span class="tag tag-server">{{ event.server_name }}</span>
+        {% with event.get_version as version %}
+            {% if version %}
+                <span class="tag tag-version">{{ version.0 }} {{ version.1 }}</span>
+            {% endif %}
+        {% endwith %}
+        <span class="last_seen">{{ event.datetime|timesince }}</span>
+    </p>
+    <a href="{% url sentry-group-message event.project_id event.group_id event.pk %}" class="row_link"></a>
+</li>
diff --git a/sentry/templates/sentry/partial/_message.html b/sentry/templates/sentry/partial/_message.html
deleted file mode 100644
index 40aa52118f..0000000000
--- a/sentry/templates/sentry/partial/_message.html
+++ /dev/null
@@ -1,25 +0,0 @@
-{% load sentry_helpers %}
-
-<li class="{% cycle 'row1' 'row2' %} level-{{ message.level }}{% if priority %} priority-{{ priority }}{% endif %}" id="message_{{ message.pk }}" data-sentry-count="{{ message.times_seen }}">
-    <h3><a href="{% url sentry-group-message group.project_id group.pk message.pk %}">
-        {{ message.message_top }}
-        {% if message.url %}
-             on {{ message.url }}
-        {% endif %}
-    </a></h3>
-    <span class="status status-{{ message.status }}">{{ message.get_status_display }}</span>
-    <p class="message">
-        {% if message.message_id %}
-            <span class="tag tag-id">{{ message.message_id }}</span>
-        {% endif %}
-        <span class="tag tag-level">{{ message.get_level_display }}</span>
-        <span class="tag tag-server">{{ message.server_name }}</span>
-        {% with message.get_version as version %}
-            {% if version %}
-                <span class="tag tag-version">{{ version.0 }} {{ version.1 }}</span>
-            {% endif %}
-        {% endwith %}
-        <span class="last_seen">{{ message.datetime|timesince }}</span>
-    </p>
-    <a href="{% url sentry-group-message group.project_id group.pk message.pk %}" class="row_link"></a>
-</li>
diff --git a/sentry/utils/__init__.py b/sentry/utils/__init__.py
index f16bc03199..3c4dde9991 100644
--- a/sentry/utils/__init__.py
+++ b/sentry/utils/__init__.py
@@ -17,11 +17,10 @@ from django.utils.encoding import force_unicode
 from sentry.conf import settings
 
 _FILTER_CACHE = None
-def get_filters():
+def get_filters(model=None):
     global _FILTER_CACHE
 
     if _FILTER_CACHE is None:
-
         filters = []
         for filter_ in settings.FILTERS:
             if filter_.endswith('sentry.filters.SearchFilter'):
@@ -36,7 +35,10 @@ def get_filters():
                 continue
             filters.append(filter_)
         _FILTER_CACHE = filters
+
     for f in _FILTER_CACHE:
+        if model and model not in f.types:
+            continue
         yield f
 
 def get_db_engine(alias='default'):
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
new file mode 100644
index 0000000000..88b558ba18
--- /dev/null
+++ b/sentry/web/decorators.py
@@ -0,0 +1,61 @@
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+
+from sentry.conf import settings
+from sentry.models import Project
+from sentry.web.helpers import get_project_list, render_to_response, get_login_url
+
+def can_manage(perm_or_func=None):
+    """
+    Tests and transforms project_id for permissions based on the requesting user. Passes
+    the actual project instance to the decorated view.
+
+    >>> @can_manage('read_message')
+    >>> def foo(request, project):
+    >>>     return
+
+    >>> @can_manage
+    >>> def foo(request, project):
+    >>>     return
+    """
+    if callable(perm_or_func):
+        return can_manage(None)(perm_or_func)
+
+    def wrapped(func):
+        def _wrapped(request, project_id=None, *args, **kwargs):
+            # XXX: if project_id isn't set, should we only allow superuser?
+            if request.user.is_superuser:
+                if project_id:
+                    try:
+                        project = Project.objects.get(pk=project_id)
+                    except Project.DoesNotExist:
+                        return HttpResponseRedirect(reverse('sentry'))
+                else:
+                    project = None
+                return func(request, project, *args, **kwargs)
+
+            if project_id:
+                project_list = get_project_list(request.user, perm_or_func)
+
+                try:
+                    project = project_list[int(project_id)]
+                except (KeyError, ValueError):
+                    return HttpResponseRedirect(reverse('sentry'))
+            else:
+                project = None
+
+            return func(request, project, *args, **kwargs)
+        return _wrapped
+    return wrapped
+
+def login_required(func):
+    def wrapped(request, *args, **kwargs):
+        if not settings.PUBLIC:
+            if not request.user.is_authenticated():
+                return HttpResponseRedirect(get_login_url())
+            if not request.user.has_perm('sentry.can_view'):
+                return render_to_response('sentry/missing_permissions.html', status=400)
+        return func(request, *args, **kwargs)
+    wrapped.__doc__ = func.__doc__
+    wrapped.__name__ = func.__name__
+    return wrapped
diff --git a/sentry/web/frontend/__init__.py b/sentry/web/frontend/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/web/frontend/accounts.py b/sentry/web/frontend/accounts.py
new file mode 100644
index 0000000000..2e0d22f9e0
--- /dev/null
+++ b/sentry/web/frontend/accounts.py
@@ -0,0 +1,36 @@
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+
+from sentry.web.helpers import render_to_response
+
+@csrf_protect
+def login(request):
+    from django.contrib.auth import login as login_
+    from django.contrib.auth.forms import AuthenticationForm
+
+    if request.POST:
+        form = AuthenticationForm(request, request.POST)
+        if form.is_valid():
+            login_(request, form.get_user())
+            return HttpResponseRedirect(request.POST.get('next') or reverse('sentry'))
+        else:
+            request.session.set_test_cookie()
+    else:
+        form = AuthenticationForm(request)
+        request.session.set_test_cookie()
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'request': request,
+    })
+    return render_to_response('sentry/login.html', context)
+
+def logout(request):
+    from django.contrib.auth import logout
+
+    logout(request)
+
+    return HttpResponseRedirect(reverse('sentry'))
\ No newline at end of file
diff --git a/sentry/web/frontend/events.py b/sentry/web/frontend/events.py
new file mode 100644
index 0000000000..550adf10bb
--- /dev/null
+++ b/sentry/web/frontend/events.py
@@ -0,0 +1,45 @@
+import datetime
+
+from sentry.conf import settings
+from sentry.models import Event
+from sentry.web.decorators import login_required, can_manage, render_to_response
+from sentry.utils import get_filters
+
+@login_required
+@can_manage('read_message')
+def event_list(request, project):
+    filters = []
+    for filter_ in get_filters(Event):
+        filters.append(filter_(request))
+
+    try:
+        page = int(request.GET.get('p', 1))
+    except (TypeError, ValueError):
+        page = 1
+
+    event_list = Event.objects.filter(project=project).order_by('-datetime')
+
+    # TODO: implement separate API for messages
+    any_filter = False
+    for filter_ in filters:
+        if not filter_.is_set():
+            continue
+        any_filter = True
+        event_list = filter_.get_query_set(event_list)
+
+    offset = (page - 1) * settings.MESSAGES_PER_PAGE
+    limit = page * settings.MESSAGES_PER_PAGE
+
+    today = datetime.datetime.now()
+
+    has_realtime = page == 1
+
+    return render_to_response('sentry/events/event_list.html', {
+        'project': project,
+        'has_realtime': has_realtime,
+        'event_list': event_list[offset:limit],
+        'today': today,
+        'any_filter': any_filter,
+        'request': request,
+        'filters': filters,
+    })
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
new file mode 100644
index 0000000000..5c7de94911
--- /dev/null
+++ b/sentry/web/frontend/generic.py
@@ -0,0 +1,63 @@
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect, Http404, HttpResponseNotModified, \
+  HttpResponse
+
+from sentry.conf import settings
+from sentry.web.decorators import login_required
+from sentry.web.helpers import get_project_list, render_to_response
+
+@login_required
+def dashboard(request):
+    project_list = get_project_list(request.user)
+    if len(project_list) == 1:
+        return HttpResponseRedirect(reverse('sentry', kwargs={'project_id': project_list.keys()[0]}))
+    return render_to_response('sentry/dashboard.html', {
+        'project_list': project_list,
+        'request': request,
+    })
+
+def static_media(request, path):
+    """
+    Serve static files below a given point in the directory structure.
+    """
+    from django.utils.http import http_date
+    from django.views.static import was_modified_since
+    import mimetypes
+    import os.path
+    import posixpath
+    import stat
+    import urllib
+
+    document_root = os.path.join(settings.ROOT, 'static')
+
+    path = posixpath.normpath(urllib.unquote(path))
+    path = path.lstrip('/')
+    newpath = ''
+    for part in path.split('/'):
+        if not part:
+            # Strip empty path components.
+            continue
+        drive, part = os.path.splitdrive(part)
+        head, part = os.path.split(part)
+        if part in (os.curdir, os.pardir):
+            # Strip '.' and '..' in path.
+            continue
+        newpath = os.path.join(newpath, part).replace('\\', '/')
+    if newpath and path != newpath:
+        return HttpResponseRedirect(newpath)
+    fullpath = os.path.join(document_root, newpath)
+    if os.path.isdir(fullpath):
+        raise Http404("Directory indexes are not allowed here.")
+    if not os.path.exists(fullpath):
+        raise Http404('"%s" does not exist' % fullpath)
+    # Respect the If-Modified-Since header.
+    statobj = os.stat(fullpath)
+    mimetype = mimetypes.guess_type(fullpath)[0] or 'application/octet-stream'
+    if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'),
+                              statobj[stat.ST_MTIME], statobj[stat.ST_SIZE]):
+        return HttpResponseNotModified(mimetype=mimetype)
+    contents = open(fullpath, 'rb').read()
+    response = HttpResponse(contents, mimetype=mimetype)
+    response["Last-Modified"] = http_date(statobj[stat.ST_MTIME])
+    response["Content-Length"] = len(contents)
+    return response
diff --git a/sentry/web/views.py b/sentry/web/frontend/groups.py
similarity index 66%
rename from sentry/web/views.py
rename to sentry/web/frontend/groups.py
index c85791400d..e335f4dd03 100644
--- a/sentry/web/views.py
+++ b/sentry/web/frontend/groups.py
@@ -9,103 +9,27 @@ sentry.web.views
 import datetime
 import re
 
-from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.db.models import Q
 from django.http import HttpResponse, HttpResponseBadRequest, \
-    HttpResponseForbidden, HttpResponseRedirect, Http404, HttpResponseNotModified
+    HttpResponseForbidden, HttpResponseRedirect, Http404
 from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
 from django.utils.safestring import mark_safe
-from django.views.decorators.csrf import csrf_protect, csrf_exempt
+from django.views.decorators.csrf import csrf_exempt
 
 from sentry.conf import settings
-from sentry.models import Group, Event, Project
+from sentry.models import Group, Event
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
 from sentry.utils import get_filters, json
-from sentry.web.forms import EditProjectForm
-from sentry.web.helpers import login_required, render_to_response, get_search_query_set, \
+from sentry.web.decorators import can_manage, login_required
+from sentry.web.helpers import render_to_response, get_search_query_set, \
     get_project_list
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 message_re = re.compile(r'^(?P<message_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
 
-MESSAGES_PER_PAGE = 25
-
-def can_manage(perm_or_func=None):
-    """
-    Tests and transforms project_id for permissions based on the requesting user. Passes
-    the actual project instance to the decorated view.
-
-    >>> @can_manage('read_message')
-    >>> def foo(request, project):
-    >>>     return
-
-    >>> @can_manage
-    >>> def foo(request, project):
-    >>>     return
-    """
-    if callable(perm_or_func):
-        return can_manage(None)(perm_or_func)
-
-    def wrapped(func):
-        def _wrapped(request, project_id=None, *args, **kwargs):
-            # XXX: if project_id isn't set, should we only allow superuser?
-            if request.user.is_superuser:
-                if project_id:
-                    try:
-                        project = Project.objects.get(pk=project_id)
-                    except Project.DoesNotExist:
-                        return HttpResponseRedirect(reverse('sentry'))
-                else:
-                    project = None
-                return func(request, project, *args, **kwargs)
-
-            if project_id:
-                project_list = get_project_list(request.user, perm_or_func)
-
-                try:
-                    project = project_list[int(project_id)]
-                except (KeyError, ValueError):
-                    return HttpResponseRedirect(reverse('sentry'))
-            else:
-                project = None
-
-            return func(request, project, *args, **kwargs)
-        return _wrapped
-    return wrapped
-
-@csrf_protect
-def login(request):
-    from django.contrib.auth import login as login_
-    from django.contrib.auth.forms import AuthenticationForm
-
-    if request.POST:
-        form = AuthenticationForm(request, request.POST)
-        if form.is_valid():
-            login_(request, form.get_user())
-            return HttpResponseRedirect(request.POST.get('next') or reverse('sentry'))
-        else:
-            request.session.set_test_cookie()
-    else:
-        form = AuthenticationForm(request)
-        request.session.set_test_cookie()
-
-    context = csrf(request)
-    context.update({
-        'form': form,
-        'request': request,
-    })
-    return render_to_response('sentry/login.html', context)
-
-def logout(request):
-    from django.contrib.auth import logout
-
-    logout(request)
-
-    return HttpResponseRedirect(reverse('sentry'))
-
 @login_required
 @csrf_exempt
 def ajax_handler(request):
@@ -122,10 +46,10 @@ def ajax_handler(request):
 
         projects = get_project_list(request.user, 'read_message')
 
-        message_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
-
         offset = 0
-        limit = MESSAGES_PER_PAGE
+        limit = settings.MESSAGES_PER_PAGE
+
+        message_list = Group.objects.filter(Q(project__in=projects.keys()) | Q(project__isnull=True))
 
         for filter_ in filters:
             if not filter_.is_set():
@@ -139,7 +63,7 @@ def ajax_handler(request):
             message_list = message_list.order_by('-first_seen')
         elif sort == 'freq':
             message_list = message_list.order_by('-times_seen')
-        elif sort.startswith('accel_'):
+        elif sort and sort.startswith('accel_'):
             message_list = Group.objects.get_accelerated(message_list, minutes=int(sort.split('_', 1)[1]))
         else:
             sort = 'priority'
@@ -289,21 +213,11 @@ def search(request, project):
         'request': request,
     })
 
-@login_required
-def dashboard(request):
-    project_list = get_project_list(request.user)
-    if len(project_list) == 1:
-        return HttpResponseRedirect(reverse('sentry', kwargs={'project_id': project_list.keys()[0]}))
-    return render_to_response('sentry/dashboard.html', {
-        'project_list': project_list,
-        'request': request,
-    })
-
 @login_required
 @can_manage('read_message')
-def index(request, project):
+def group_list(request, project):
     filters = []
-    for filter_ in get_filters():
+    for filter_ in get_filters(Group):
         filters.append(filter_(request))
 
     try:
@@ -311,6 +225,9 @@ def index(request, project):
     except (TypeError, ValueError):
         page = 1
 
+    offset = (page - 1) * settings.MESSAGES_PER_PAGE
+    limit = page * settings.MESSAGES_PER_PAGE
+
     message_list = Group.objects.filter(project=project)
 
     # Filters only apply if we're not searching
@@ -321,9 +238,6 @@ def index(request, project):
         any_filter = True
         message_list = filter_.get_query_set(message_list)
 
-    offset = (page-1)*MESSAGES_PER_PAGE
-    limit = page*MESSAGES_PER_PAGE
-
     sort = request.GET.get('sort')
     if sort == 'date':
         message_list = message_list.order_by('-last_seen')
@@ -331,7 +245,7 @@ def index(request, project):
         message_list = message_list.order_by('-first_seen')
     elif sort == 'freq':
         message_list = message_list.order_by('-times_seen')
-    elif sort.startswith('accel_'):
+    elif sort and sort.startswith('accel_'):
         message_list = Group.objects.get_accelerated(message_list, minutes=int(sort.split('_', 1)[1]))
     else:
         sort = 'priority'
@@ -341,7 +255,7 @@ def index(request, project):
 
     has_realtime = page == 1
 
-    return render_to_response('sentry/index.html', {
+    return render_to_response('sentry/groups/group_list.html', {
         'project': project,
         'has_realtime': has_realtime,
         'message_list': message_list[offset:limit],
@@ -384,7 +298,7 @@ def group(request, project, group_id):
         # (such as a post_save signal failing)
         event = Event(group=group)
 
-    return render_to_response('sentry/group/details.html', {
+    return render_to_response('sentry/groups/details.html', {
         'project': project,
         'page': 'details',
         'group': group,
@@ -404,7 +318,7 @@ def group_message_list(request, project, group_id):
 
     message_list = group.event_set.all().order_by('-datetime')
 
-    return render_to_response('sentry/group/message_list.html', {
+    return render_to_response('sentry/groups/message_list.html', {
         'project': project,
         'group': group,
         'message_list': message_list,
@@ -423,7 +337,7 @@ def group_message_details(request, project, group_id, message_id):
     event = get_object_or_404(group.event_set, pk=message_id)
 
 
-    return render_to_response('sentry/group/message.html', {
+    return render_to_response('sentry/groups/message.html', {
         'project': project,
         'page': 'messages',
         'group': group,
@@ -450,73 +364,3 @@ def group_plugin_action(request, project, group_id, slug):
     if response:
         return response
     return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry', kwargs={'project_id': group.project_id}))
-
-@login_required
-def project_list(request):
-    return render_to_response('sentry/projects/list.html', {
-        'project_list': get_project_list(request.user).values(),
-        'request': request,
-    })
-
-@login_required
-@can_manage
-def manage_project(request, project):
-    form = EditProjectForm(request.POST or None, instance=project)
-    if form.is_valid():
-        project = form.save()
-
-    context = csrf(request)
-    context.update({
-        'form': form,
-        'project': project,
-        'project_list': get_project_list(request.user).values(),
-        'request': request,
-    })
-
-    return render_to_response('sentry/projects/manage.html', context)
-
-def static_media(request, path):
-    """
-    Serve static files below a given point in the directory structure.
-    """
-    from django.utils.http import http_date
-    from django.views.static import was_modified_since
-    import mimetypes
-    import os.path
-    import posixpath
-    import stat
-    import urllib
-
-    document_root = os.path.join(settings.ROOT, 'static')
-
-    path = posixpath.normpath(urllib.unquote(path))
-    path = path.lstrip('/')
-    newpath = ''
-    for part in path.split('/'):
-        if not part:
-            # Strip empty path components.
-            continue
-        drive, part = os.path.splitdrive(part)
-        head, part = os.path.split(part)
-        if part in (os.curdir, os.pardir):
-            # Strip '.' and '..' in path.
-            continue
-        newpath = os.path.join(newpath, part).replace('\\', '/')
-    if newpath and path != newpath:
-        return HttpResponseRedirect(newpath)
-    fullpath = os.path.join(document_root, newpath)
-    if os.path.isdir(fullpath):
-        raise Http404("Directory indexes are not allowed here.")
-    if not os.path.exists(fullpath):
-        raise Http404('"%s" does not exist' % fullpath)
-    # Respect the If-Modified-Since header.
-    statobj = os.stat(fullpath)
-    mimetype = mimetypes.guess_type(fullpath)[0] or 'application/octet-stream'
-    if not was_modified_since(request.META.get('HTTP_IF_MODIFIED_SINCE'),
-                              statobj[stat.ST_MTIME], statobj[stat.ST_SIZE]):
-        return HttpResponseNotModified(mimetype=mimetype)
-    contents = open(fullpath, 'rb').read()
-    response = HttpResponse(contents, mimetype=mimetype)
-    response["Last-Modified"] = http_date(statobj[stat.ST_MTIME])
-    response["Content-Length"] = len(contents)
-    return response
diff --git a/sentry/web/frontend/messages.py b/sentry/web/frontend/messages.py
new file mode 100644
index 0000000000..370aad3312
--- /dev/null
+++ b/sentry/web/frontend/messages.py
@@ -0,0 +1,57 @@
+import datetime
+
+from sentry.conf import settings
+from sentry.models import Event
+from sentry.web.decorators import login_required, can_manage, render_to_response
+from sentry.utils import get_filters
+
+@login_required
+@can_manage('read_message')
+def event_list(request, project):
+    filters = []
+    for filter_ in get_filters(Event):
+        filters.append(filter_(request))
+
+    try:
+        page = int(request.GET.get('p', 1))
+    except (TypeError, ValueError):
+        page = 1
+
+    event_list = Event.objects.filter(project=project)
+
+    # TODO: implement separate API for messages
+    any_filter = False
+    for filter_ in filters:
+        if not filter_.is_set():
+            continue
+        any_filter = True
+        event_list = filter_.get_query_set(event_list)
+
+    offset = (page - 1) * settings.MESSAGES_PER_PAGE
+    limit = page * settings.MESSAGES_PER_PAGE
+
+    sort = request.GET.get('sort')
+    if sort == 'date':
+        event_list = event_list.order_by('-last_seen')
+    elif sort == 'new':
+        event_list = event_list.order_by('-first_seen')
+    elif sort == 'freq':
+        event_list = event_list.order_by('-times_seen')
+    else:
+        sort = 'priority'
+        event_list = event_list.order_by('-score', '-last_seen')
+
+    today = datetime.datetime.now()
+
+    has_realtime = page == 1
+
+    return render_to_response('sentry/events/event_list.html', {
+        'project': project,
+        'has_realtime': has_realtime,
+        'event_list': event_list[offset:limit],
+        'today': today,
+        'sort': sort,
+        'any_filter': any_filter,
+        'request': request,
+        'filters': filters,
+    })
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
new file mode 100644
index 0000000000..a6dc6f0a10
--- /dev/null
+++ b/sentry/web/frontend/projects.py
@@ -0,0 +1,29 @@
+from django.core.context_processors import csrf
+
+from sentry.web.decorators import login_required, can_manage
+from sentry.web.forms import EditProjectForm
+from sentry.web.helpers import render_to_response, get_project_list
+
+@login_required
+def project_list(request):
+    return render_to_response('sentry/projects/list.html', {
+        'project_list': get_project_list(request.user).values(),
+        'request': request,
+    })
+
+@login_required
+@can_manage
+def manage_project(request, project):
+    form = EditProjectForm(request.POST or None, instance=project)
+    if form.is_valid():
+        project = form.save()
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'project': project,
+        'project_list': get_project_list(request.user).values(),
+        'request': request,
+    })
+
+    return render_to_response('sentry/projects/manage.html', context)
\ No newline at end of file
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index b2a71d4ad2..b154b814f5 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -84,15 +84,3 @@ def get_search_query_set(query):
         site=site,
         query=backend.SearchQuery(backend=site.backend),
     ).filter(content=query)
-
-def login_required(func):
-    def wrapped(request, *args, **kwargs):
-        if not settings.PUBLIC:
-            if not request.user.is_authenticated():
-                return HttpResponseRedirect(get_login_url())
-            if not request.user.has_perm('sentry.can_view'):
-                return render_to_response('sentry/missing_permissions.html', status=400)
-        return func(request, *args, **kwargs)
-    wrapped.__doc__ = func.__doc__
-    wrapped.__name__ = func.__name__
-    return wrapped
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 4a92daa883..bfb19a0cae 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -6,13 +6,11 @@ sentry.web.urls
 :license: BSD, see LICENSE for more details.
 """
 
-import re
-
 from django.conf.urls.defaults import *
 from django.views.defaults import page_not_found
 
-from sentry.conf.settings import KEY
-from sentry.web import views, feeds, api
+from sentry.web import feeds, api
+from sentry.web.frontend import accounts, generic, groups, events, projects
 
 handler404 = lambda x: page_not_found(x, template_name='sentry/404.html')
 
@@ -32,15 +30,15 @@ def handler500(request):
     return HttpResponseServerError(t.render(Context(context)))
 
 urlpatterns = patterns('',
-    url(r'^_static/(?P<path>.*)$', views.static_media, name='sentry-media'),
+    url(r'^_static/(?P<path>.*)$', generic.static_media, name='sentry-media'),
 
     # Legacy redirects
     # TODO:
 
-    url(r'^group/(?P<group_id>\d+)$', views.group, name='sentry-group'),
-    url(r'^group/(?P<group_id>\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
-    url(r'^group/(?P<group_id>\d+)/messages/(?P<message_id>\d+)$', views.group_message_details, name='sentry-group-message'),
-    url(r'^group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
+    url(r'^group/(?P<group_id>\d+)$', groups.group, name='sentry-group'),
+    url(r'^group/(?P<group_id>\d+)/messages$', groups.group_message_list, name='sentry-group-messages'),
+    url(r'^group/(?P<group_id>\d+)/messages/(?P<message_id>\d+)$', groups.group_message_details, name='sentry-group-message'),
+    url(r'^group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
 
     # Feeds
 
@@ -49,7 +47,7 @@ urlpatterns = patterns('',
 
     # JS
 
-    url(r'^jsapi/$', views.ajax_handler, name='sentry-ajax'),
+    url(r'^jsapi/$', groups.ajax_handler, name='sentry-ajax'),
 
     # API
 
@@ -57,28 +55,29 @@ urlpatterns = patterns('',
 
     # Account
 
-    url(r'^login$', views.login, name='sentry-login'),
-    url(r'^logout$', views.logout, name='sentry-logout'),
+    url(r'^login$', accounts.login, name='sentry-login'),
+    url(r'^logout$', accounts.logout, name='sentry-logout'),
 
     # Management
 
-    url(r'^projects$', views.project_list, name='sentry-project-list'),
-    url(r'^projects/(?P<project_id>\d+)/edit$', views.manage_project, name='sentry-manage-project'),
+    url(r'^projects$', projects.project_list, name='sentry-project-list'),
+    url(r'^projects/(?P<project_id>\d+)/edit$', projects.manage_project, name='sentry-manage-project'),
 
     # Global
 
-    url(r'^$', views.dashboard, name='sentry'),
+    url(r'^$', generic.dashboard, name='sentry'),
 
     # Project specific
 
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)$', views.group, name='sentry-group'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/json$', views.group_json, name='sentry-group-json'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/messages$', views.group_message_list, name='sentry-group-messages'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/messages/(?P<message_id>\d+)$', views.group_message_details, name='sentry-group-message'),
-    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', views.group_plugin_action, name='sentry-group-plugin-action'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)$', groups.group, name='sentry-group'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/json$', groups.group_json, name='sentry-group-json'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events$', groups.group_message_list, name='sentry-group-messages'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/events/(?P<message_id>\d+)$', groups.group_message_details, name='sentry-group-message'),
+    url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)', groups.group_plugin_action, name='sentry-group-plugin-action'),
 
-    url(r'^(?P<project_id>\d+)/search$', views.search, name='sentry-search'),
+    url(r'^(?P<project_id>\d+)/events$', events.event_list, name='sentry'),
 
-    url(r'^(?P<project_id>\d+)$', views.index, name='sentry'),
+    url(r'^(?P<project_id>\d+)/search$', groups.search, name='sentry-search'),
 
+    url(r'^(?P<project_id>\d+)$', groups.group_list, name='sentry'),
 )
diff --git a/tests/tests.py b/tests/tests.py
index 2606d17751..2a0573f9fc 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -85,7 +85,7 @@ class SentryViewsTest(TestCase):
         self.client.login(username='admin', password='admin')
         resp = self.client.get(reverse('sentry', kwargs={'project_id': 1}) + '?sort=freq', follow=True)
         self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/index.html')
+        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
         self.assertEquals(len(resp.context['message_list']), 4)
         group = resp.context['message_list'][0]
         self.assertEquals(group.times_seen, 7)
@@ -95,7 +95,7 @@ class SentryViewsTest(TestCase):
         self.client.login(username='admin', password='admin')
         resp = self.client.get(reverse('sentry-group', kwargs={'group_id': 2}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/group/details.html')
+        self.assertTemplateUsed(resp, 'sentry/groups/details.html')
         self.assertTrue('group' in resp.context)
         group = Group.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
@@ -104,7 +104,7 @@ class SentryViewsTest(TestCase):
         self.client.login(username='admin', password='admin')
         resp = self.client.get(reverse('sentry-group-messages', args=[2]), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/group/message_list.html')
+        self.assertTemplateUsed(resp, 'sentry/groups/message_list.html')
         self.assertTrue('group' in resp.context)
         group = Group.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
@@ -113,7 +113,7 @@ class SentryViewsTest(TestCase):
         self.client.login(username='admin', password='admin')
         resp = self.client.get(reverse('sentry-group-message', kwargs={'group_id': 2, 'message_id': 4}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/group/message.html')
+        self.assertTemplateUsed(resp, 'sentry/groups/message.html')
         self.assertTrue('group' in resp.context)
         group = Group.objects.get(pk=2)
         self.assertEquals(resp.context['group'], group)
