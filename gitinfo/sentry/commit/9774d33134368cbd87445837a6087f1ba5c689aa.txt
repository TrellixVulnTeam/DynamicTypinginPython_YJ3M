commit 9774d33134368cbd87445837a6087f1ba5c689aa
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Dec 19 20:26:02 2019 -0500

    feat(apm): Indicate manual instrumentation on the trace view (#16028)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
index d7d64eef17..401ec101a7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/header.tsx
@@ -12,10 +12,17 @@ import {
   boundsGenerator,
   SpanBoundsType,
   SpanGeneratedBoundsType,
+  getSpanID,
+  getSpanOperation,
 } from './utils';
 import {DragManagerChildrenProps} from './dragManager';
 import * as CursorGuideHandler from './cursorGuideHandler';
-import {ParsedTraceType, TickAlignment, SpanType, SpanChildrenLookupType} from './types';
+import {
+  ParsedTraceType,
+  TickAlignment,
+  SpanChildrenLookupType,
+  RawSpanType,
+} from './types';
 import {zIndex} from './styles';
 
 export const MINIMAP_CONTAINER_HEIGHT = 106;
@@ -334,7 +341,7 @@ class ActualMinimap extends React.PureComponent<{trace: ParsedTraceType}> {
       viewEnd: 1,
     });
 
-    const rootSpan: SpanType = {
+    const rootSpan: RawSpanType = {
       trace_id: trace.traceID,
       span_id: trace.rootSpanID,
       start_timestamp: trace.traceStartTimestamp,
@@ -395,12 +402,12 @@ class ActualMinimap extends React.PureComponent<{trace: ParsedTraceType}> {
     spanNumber: number;
     childSpans: Readonly<SpanChildrenLookupType>;
     generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
-    span: Readonly<SpanType>;
+    span: Readonly<RawSpanType>;
   }): {
     spanTree: JSX.Element;
     nextSpanNumber: number;
   } => {
-    const spanBarColour: string = pickSpanBarColour(span.op);
+    const spanBarColour: string = pickSpanBarColour(getSpanOperation(span));
 
     const bounds = generateBounds({
       startTimestamp: span.start_timestamp,
@@ -409,7 +416,7 @@ class ActualMinimap extends React.PureComponent<{trace: ParsedTraceType}> {
 
     const {left: spanLeft, width: spanWidth} = this.getBounds(bounds);
 
-    const spanChildren: Array<SpanType> = get(childSpans, span.span_id, []);
+    const spanChildren: Array<RawSpanType> = get(childSpans, getSpanID(span), []);
 
     type AccType = {
       nextSpanNumber: number;
@@ -417,8 +424,8 @@ class ActualMinimap extends React.PureComponent<{trace: ParsedTraceType}> {
     };
 
     const reduced: AccType = spanChildren.reduce(
-      (acc: AccType, spanChild) => {
-        const key = `${spanChild.span_id}`;
+      (acc: AccType, spanChild, index: number) => {
+        const key = `${getSpanID(spanChild, String(index))}`;
 
         const results = this.renderSpan({
           spanNumber: acc.nextSpanNumber,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 3c0e6839c5..57c096fcc1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -16,8 +16,10 @@ import {
   SpanBoundsType,
   SpanGeneratedBoundsType,
   getHumanDuration,
+  getSpanID,
+  getSpanOperation,
 } from './utils';
-import {SpanType, ParsedTraceType} from './types';
+import {ParsedTraceType, ProcessedSpanType} from './types';
 import {
   MINIMAP_CONTAINER_HEIGHT,
   MINIMAP_SPAN_BAR_HEIGHT,
@@ -167,7 +169,7 @@ const getDurationDisplay = ({
 type SpanBarProps = {
   orgId: string;
   trace: Readonly<ParsedTraceType>;
-  span: Readonly<SpanType>;
+  span: Readonly<ProcessedSpanType>;
   spanBarColour: string;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
@@ -298,12 +300,14 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   renderSpanTreeConnector = ({hasToggler}: {hasToggler: boolean}) => {
     const {isLast, isRoot, treeDepth, continuingTreeDepths, span} = this.props;
 
+    const spanID = getSpanID(span);
+
     if (isRoot) {
       if (hasToggler) {
         return (
           <ConnectorBar
             style={{right: '16px', height: '10px', bottom: '-5px', top: 'auto'}}
-            key={`${span.span_id}-last`}
+            key={`${spanID}-last`}
           />
         );
       }
@@ -313,14 +317,14 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
 
     const connectorBars: Array<React.ReactNode> = continuingTreeDepths.map(depth => {
       const left = ((treeDepth - depth) * (TOGGLE_BORDER_BOX / 2) + 1) * -1;
-      return <ConnectorBar style={{left}} key={`${span.span_id}-${depth}`} />;
+      return <ConnectorBar style={{left}} key={`${spanID}-${depth}`} />;
     });
 
     if (hasToggler) {
       connectorBars.push(
         <ConnectorBar
           style={{right: '16px', height: '10px', bottom: '0', top: 'auto'}}
-          key={`${span.span_id}-last`}
+          key={`${spanID}-last`}
         />
       );
     }
@@ -374,8 +378,12 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   renderTitle = () => {
     const {span, treeDepth} = this.props;
 
-    const op = span.op ? <strong>{`${span.op} \u2014 `}</strong> : '';
-    const description = get(span, 'description', span.span_id);
+    const op = getSpanOperation(span) ? (
+      <strong>{`${getSpanOperation(span)} \u2014 `}</strong>
+    ) : (
+      ''
+    );
+    const description = get(span, 'description', getSpanID(span));
 
     const left = treeDepth * (TOGGLE_BORDER_BOX / 2) + MARGIN_LEFT;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 96d0f2c3cb..7205ead646 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -18,9 +18,10 @@ import {
 } from 'app/views/eventsV2/eventDetails/utils';
 import EventView from 'app/views/eventsV2/eventView';
 import {generateDiscoverResultsRoute} from 'app/views/eventsV2/results';
+import {assert} from 'app/types/utils';
 
-import {SpanType, ParsedTraceType} from './types';
-import {getTraceDateTimeRange} from './utils';
+import {ProcessedSpanType, RawSpanType, ParsedTraceType} from './types';
+import {isGapSpan, getTraceDateTimeRange} from './utils';
 
 type TransactionResult = {
   'project.name': string;
@@ -31,7 +32,7 @@ type TransactionResult = {
 type Props = {
   api: Client;
   orgId: string;
-  span: Readonly<SpanType>;
+  span: Readonly<ProcessedSpanType>;
   isRoot: boolean;
   eventView: EventView;
   trace: Readonly<ParsedTraceType>;
@@ -49,7 +50,11 @@ class SpanDetail extends React.Component<Props, State> {
   componentDidMount() {
     const {span} = this.props;
 
-    this.fetchSpanDescendents(span.span_id)
+    if (isGapSpan(span)) {
+      return;
+    }
+
+    this.fetchSpanDescendents(span.span_id, span.trace_id)
       .then(response => {
         if (
           !response.data ||
@@ -68,8 +73,8 @@ class SpanDetail extends React.Component<Props, State> {
       });
   }
 
-  fetchSpanDescendents(spanID: string): Promise<any> {
-    const {api, orgId, span, trace} = this.props;
+  fetchSpanDescendents(spanID: string, traceID: string): Promise<any> {
+    const {api, orgId, trace} = this.props;
 
     const url = `/organizations/${orgId}/eventsv2/`;
 
@@ -83,7 +88,7 @@ class SpanDetail extends React.Component<Props, State> {
     const query = {
       field: ['transaction', 'id', 'trace.span'],
       sort: ['-id'],
-      query: `event.type:transaction trace:${span.trace_id} trace.parent_span:${spanID}`,
+      query: `event.type:transaction trace:${traceID} trace.parent_span:${spanID}`,
       start,
       end,
     };
@@ -99,6 +104,10 @@ class SpanDetail extends React.Component<Props, State> {
       return null;
     }
 
+    const {span, orgId, trace} = this.props;
+
+    assert(!isGapSpan(span));
+
     if (this.state.transactionResults.length === 1) {
       const {eventView} = this.props;
 
@@ -119,8 +128,6 @@ class SpanDetail extends React.Component<Props, State> {
       );
     }
 
-    const {span, orgId, trace} = this.props;
-
     const {start, end} = getTraceDateTimeRange({
       start: trace.traceStartTimestamp,
       end: trace.traceEndTimestamp,
@@ -168,6 +175,10 @@ class SpanDetail extends React.Component<Props, State> {
       end: trace.traceEndTimestamp,
     });
 
+    if (isGapSpan(span)) {
+      return null;
+    }
+
     const eventView = EventView.fromSavedQuery({
       id: undefined,
       name: `Transactions with Trace ID ${span.trace_id}`,
@@ -209,6 +220,10 @@ class SpanDetail extends React.Component<Props, State> {
     const duration = (endTimestamp - startTimestamp) * 1000;
     const durationString = `${duration.toFixed(3)} ms`;
 
+    if (isGapSpan(span)) {
+      return null;
+    }
+
     return (
       <SpanDetailContainer
         data-component="span-detail"
@@ -304,7 +319,7 @@ const Row = ({
   );
 };
 
-const Tags = ({span}: {span: SpanType}) => {
+const Tags = ({span}: {span: RawSpanType}) => {
   const tags: {[tag_name: string]: string} | undefined = get(span, 'tags');
 
   if (!tags) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
index 28c13ffad6..a606b9bdd3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanGroup.tsx
@@ -3,13 +3,13 @@ import React from 'react';
 import EventView from 'app/views/eventsV2/eventView';
 
 import {SpanBoundsType, SpanGeneratedBoundsType} from './utils';
-import {SpanType, ParsedTraceType} from './types';
+import {ProcessedSpanType, ParsedTraceType} from './types';
 import SpanBar from './spanBar';
 
 type PropType = {
   orgId: string;
   eventView: EventView;
-  span: Readonly<SpanType>;
+  span: Readonly<ProcessedSpanType>;
   trace: Readonly<ParsedTraceType>;
   generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
   treeDepth: number;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
index f05b65c6b6..16d174e7a3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanTree.tsx
@@ -3,15 +3,26 @@ import styled from 'react-emotion';
 import get from 'lodash/get';
 
 import {t} from 'app/locale';
+import theme from 'app/utils/theme';
 import EventView from 'app/views/eventsV2/eventView';
 
-import {SpanType, SpanChildrenLookupType, ParsedTraceType} from './types';
+import {
+  ProcessedSpanType,
+  RawSpanType,
+  SpanChildrenLookupType,
+  ParsedTraceType,
+  GapSpanType,
+} from './types';
 import {
   boundsGenerator,
   SpanBoundsType,
   SpanGeneratedBoundsType,
   pickSpanBarColour,
   generateRootSpan,
+  getSpanID,
+  getSpanOperation,
+  getSpanTraceID,
+  isGapSpan,
 } from './utils';
 import {DragManagerChildrenProps} from './dragManager';
 import SpanGroup from './spanGroup';
@@ -90,14 +101,14 @@ class SpanTree extends React.Component<PropType> {
     return <SpanRowMessage>{messages}</SpanRowMessage>;
   }
 
-  isSpanFilteredOut(span: Readonly<SpanType>): boolean {
+  isSpanFilteredOut(span: Readonly<RawSpanType>): boolean {
     const {filterSpans} = this.props;
 
     if (!filterSpans) {
       return false;
     }
 
-    return !filterSpans.spanIDs.has(span.span_id);
+    return !filterSpans.spanIDs.has(getSpanID(span));
   }
 
   renderSpan = ({
@@ -111,6 +122,7 @@ class SpanTree extends React.Component<PropType> {
     childSpans,
     span,
     generateBounds,
+    previousSiblingEndTimestamp,
   }: {
     spanNumber: number;
     treeDepth: number;
@@ -119,14 +131,15 @@ class SpanTree extends React.Component<PropType> {
     isRoot?: boolean;
     numOfSpansOutOfViewAbove: number;
     numOfFilteredSpansAbove: number;
-    span: Readonly<SpanType>;
+    span: Readonly<ProcessedSpanType>;
     childSpans: Readonly<SpanChildrenLookupType>;
     generateBounds: (bounds: SpanBoundsType) => SpanGeneratedBoundsType;
+    previousSiblingEndTimestamp: undefined | number;
   }): RenderedSpanTree => {
     const {orgId, eventView} = this.props;
 
-    const spanBarColour: string = pickSpanBarColour(span.op);
-    const spanChildren: Array<SpanType> = get(childSpans, span.span_id, []);
+    const spanBarColour: string = pickSpanBarColour(getSpanOperation(span));
+    const spanChildren: Array<RawSpanType> = get(childSpans, getSpanID(span), []);
 
     const bounds = generateBounds({
       startTimestamp: span.start_timestamp,
@@ -134,20 +147,33 @@ class SpanTree extends React.Component<PropType> {
     });
 
     const isCurrentSpanHidden = !bounds.isSpanVisibleInView;
-    const isCurrentSpanFilteredOut = this.isSpanFilteredOut(span);
+    const isCurrentSpanFilteredOut = isGapSpan(span)
+      ? false
+      : this.isSpanFilteredOut(span);
+
+    const isSpanDisplayed = !isCurrentSpanHidden && !isCurrentSpanFilteredOut;
+
+    const isValidGap =
+      typeof previousSiblingEndTimestamp === 'number' &&
+      previousSiblingEndTimestamp < span.start_timestamp &&
+      // gap is at least 100 ms
+      span.start_timestamp - previousSiblingEndTimestamp >= 0.1;
+
+    const spanGroupNumber = isValidGap && isSpanDisplayed ? spanNumber + 1 : spanNumber;
 
     type AccType = {
       renderedSpanChildren: Array<JSX.Element>;
       nextSpanNumber: number;
       numOfSpansOutOfViewAbove: number;
       numOfFilteredSpansAbove: number;
+      previousSiblingEndTimestamp: undefined | number;
     };
 
     const treeArr = isLast ? continuingTreeDepths : [...continuingTreeDepths, treeDepth];
 
     const reduced: AccType = spanChildren.reduce(
       (acc: AccType, spanChild, index) => {
-        const key = `${span.trace_id}${spanChild.span_id}`;
+        const key = `${getSpanTraceID(span)}${getSpanID(spanChild)}`;
 
         const results = this.renderSpan({
           spanNumber: acc.nextSpanNumber,
@@ -159,6 +185,7 @@ class SpanTree extends React.Component<PropType> {
           span: spanChild,
           childSpans,
           generateBounds,
+          previousSiblingEndTimestamp: acc.previousSiblingEndTimestamp,
         });
 
         acc.renderedSpanChildren.push(
@@ -170,17 +197,20 @@ class SpanTree extends React.Component<PropType> {
 
         acc.nextSpanNumber = results.nextSpanNumber;
 
+        acc.previousSiblingEndTimestamp = spanChild.timestamp;
+
         return acc;
       },
       {
         renderedSpanChildren: [],
-        nextSpanNumber: spanNumber + 1,
+        nextSpanNumber: spanGroupNumber + 1,
         numOfSpansOutOfViewAbove: isCurrentSpanHidden ? numOfSpansOutOfViewAbove + 1 : 0,
         numOfFilteredSpansAbove: isCurrentSpanFilteredOut
           ? numOfFilteredSpansAbove + 1
           : isCurrentSpanHidden
           ? numOfFilteredSpansAbove
           : 0,
+        previousSiblingEndTimestamp: undefined,
       }
     );
 
@@ -191,6 +221,33 @@ class SpanTree extends React.Component<PropType> {
       numOfFilteredSpansAbove,
     });
 
+    const spanGap: Readonly<GapSpanType> = {
+      type: 'gap',
+      start_timestamp: previousSiblingEndTimestamp || span.start_timestamp,
+      timestamp: span.start_timestamp, // this is essentially end_timestamp
+      description: t('Potential area for tracing instrumentation'),
+    };
+
+    const spanGapComponent =
+      isValidGap && isSpanDisplayed ? (
+        <SpanGroup
+          eventView={eventView}
+          orgId={orgId}
+          spanNumber={spanNumber}
+          isLast={isLast}
+          continuingTreeDepths={continuingTreeDepths}
+          isRoot={isRoot}
+          span={spanGap}
+          trace={this.props.trace}
+          generateBounds={generateBounds}
+          treeDepth={treeDepth}
+          numOfSpanChildren={spanChildren.length}
+          renderedSpanChildren={reduced.renderedSpanChildren}
+          spanBarColour={theme.gray2}
+          isCurrentSpanFilteredOut={isCurrentSpanFilteredOut}
+        />
+      ) : null;
+
     return {
       numOfSpansOutOfViewAbove: reduced.numOfSpansOutOfViewAbove,
       numOfFilteredSpansAbove: reduced.numOfFilteredSpansAbove,
@@ -198,10 +255,11 @@ class SpanTree extends React.Component<PropType> {
       spanTree: (
         <React.Fragment>
           {infoMessage}
+          {spanGapComponent}
           <SpanGroup
             eventView={eventView}
             orgId={orgId}
-            spanNumber={spanNumber}
+            spanNumber={spanGroupNumber}
             isLast={isLast}
             continuingTreeDepths={continuingTreeDepths}
             isRoot={isRoot}
@@ -222,7 +280,7 @@ class SpanTree extends React.Component<PropType> {
   renderRootSpan = (): RenderedSpanTree => {
     const {dragProps, trace} = this.props;
 
-    const rootSpan: SpanType = generateRootSpan(trace);
+    const rootSpan: RawSpanType = generateRootSpan(trace);
 
     const generateBounds = boundsGenerator({
       traceStartTimestamp: trace.traceStartTimestamp,
@@ -242,6 +300,7 @@ class SpanTree extends React.Component<PropType> {
       span: rootSpan,
       childSpans: trace.childSpans,
       generateBounds,
+      previousSiblingEndTimestamp: undefined,
     });
   };
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
index a789f027a5..c7153f9e29 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/traceView.tsx
@@ -11,8 +11,8 @@ import EventView from 'app/views/eventsV2/eventView';
 
 import DragManager, {DragManagerChildrenProps} from './dragManager';
 import SpanTree from './spanTree';
-import {SpanType, SpanEntry, SentryTransactionEvent, ParsedTraceType} from './types';
-import {isValidSpanID, generateRootSpan} from './utils';
+import {RawSpanType, SpanEntry, SentryTransactionEvent, ParsedTraceType} from './types';
+import {isValidSpanID, generateRootSpan, getSpanID, getSpanParentSpanID} from './utils';
 import TraceViewHeader from './header';
 import * as CursorGuideHandler from './cursorGuideHandler';
 
@@ -25,7 +25,7 @@ export type TraceContextType = {
 };
 
 type IndexedFusedSpan = {
-  span: SpanType;
+  span: RawSpanType;
   indexed: string[];
   tagKeys: string[];
   tagValues: string[];
@@ -168,7 +168,7 @@ class TraceView extends React.PureComponent<Props, State> {
     const results = fuse.search<FuseResult>(searchQuery);
 
     const spanIDs: Set<string> = results.reduce((setOfSpanIDs: Set<string>, result) => {
-      const spanID = result.item.span.span_id;
+      const spanID = getSpanID(result.item.span);
 
       if (spanID) {
         setOfSpanIDs.add(spanID);
@@ -247,7 +247,7 @@ function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
     (entry: {type: string}) => entry.type === 'spans'
   );
 
-  const spans: Array<SpanType> = get(spanEntry, 'data', []);
+  const spans: Array<RawSpanType> = get(spanEntry, 'data', []);
 
   const traceContext = getTraceContext(event);
   const traceID = (traceContext && traceContext.trace_id) || '';
@@ -284,11 +284,15 @@ function parseTrace(event: Readonly<SentryTransactionEvent>): ParsedTraceType {
   };
 
   const reduced: ParsedTraceType = spans.reduce((acc, span) => {
-    if (!isValidSpanID(span.parent_span_id)) {
+    if (!isValidSpanID(getSpanParentSpanID(span))) {
       return acc;
     }
 
-    const spanChildren: Array<SpanType> = get(acc.childSpans, span.parent_span_id!, []);
+    const spanChildren: Array<RawSpanType> = get(
+      acc.childSpans,
+      span.parent_span_id!,
+      []
+    );
 
     spanChildren.push(span);
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
index 746c226db5..3d426adda2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/types.tsx
@@ -1,4 +1,11 @@
-export type SpanType = {
+export type GapSpanType = {
+  type: 'gap';
+  start_timestamp: number;
+  timestamp: number; // this is essentially end_timestamp
+  description?: string;
+};
+
+export type RawSpanType = {
   trace_id: string;
   parent_span_id?: string;
   span_id: string;
@@ -11,18 +18,23 @@ export type SpanType = {
   tags?: {[key: string]: string};
 };
 
+export type ProcessedSpanType = RawSpanType | GapSpanType;
+
 export type SpanEntry = {
   type: 'spans';
-  data: Array<SpanType>;
+  data: Array<RawSpanType>;
 };
 
 export type SentryTransactionEvent = {
   entries: Array<SpanEntry>;
   startTimestamp: number;
   endTimestamp: number;
+  sdk?: {
+    name?: string;
+  };
 };
 
-export type SpanChildrenLookupType = {[span_id: string]: Array<SpanType>};
+export type SpanChildrenLookupType = {[span_id: string]: Array<RawSpanType>};
 
 export type ParsedTraceType = {
   op: string;
@@ -33,7 +45,7 @@ export type ParsedTraceType = {
   traceStartTimestamp: number;
   traceEndTimestamp: number;
   numOfSpans: number;
-  spans: SpanType[];
+  spans: RawSpanType[];
 };
 
 export enum TickAlignment {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 9c7968586e..08a7402599 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -2,7 +2,7 @@ import isString from 'lodash/isString';
 import moment from 'moment';
 
 import CHART_PALETTE from 'app/constants/chartPalette';
-import {ParsedTraceType, SpanType} from './types';
+import {ParsedTraceType, ProcessedSpanType, GapSpanType, RawSpanType} from './types';
 
 type Rect = {
   // x and y are left/top coords respectively
@@ -303,8 +303,8 @@ export const setBodyUserSelect = (nextValues: UserSelectValues): UserSelectValue
   return previousValues;
 };
 
-export function generateRootSpan(trace: ParsedTraceType): SpanType {
-  const rootSpan: SpanType = {
+export function generateRootSpan(trace: ParsedTraceType): RawSpanType {
+  const rootSpan: RawSpanType = {
     trace_id: trace.traceID,
     span_id: trace.rootSpanID,
     parent_span_id: trace.parentSpanID,
@@ -337,3 +337,40 @@ export function getTraceDateTimeRange(input: {
     end,
   };
 }
+
+export function isGapSpan(span: ProcessedSpanType): span is GapSpanType {
+  // @ts-ignore
+  return span.type === 'gap';
+}
+
+export function getSpanID(span: ProcessedSpanType, defaultSpanID: string = ''): string {
+  if (isGapSpan(span)) {
+    return defaultSpanID;
+  }
+
+  return span.span_id;
+}
+
+export function getSpanOperation(span: ProcessedSpanType): string | undefined {
+  if (isGapSpan(span)) {
+    return undefined;
+  }
+
+  return span.op;
+}
+
+export function getSpanTraceID(span: ProcessedSpanType): string {
+  if (isGapSpan(span)) {
+    return 'gap-span';
+  }
+
+  return span.trace_id;
+}
+
+export function getSpanParentSpanID(span: ProcessedSpanType): string | undefined {
+  if (isGapSpan(span)) {
+    return 'gap-span';
+  }
+
+  return span.parent_span_id;
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
index 4a96d7a1b2..014ed87bf0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/transaction/eventBreakdown.tsx
@@ -6,7 +6,7 @@ import {Event} from 'app/types';
 import {
   SentryTransactionEvent,
   SpanEntry,
-  SpanType,
+  RawSpanType,
 } from 'app/components/events/interfaces/spans/types';
 import {pickSpanBarColour} from 'app/components/events/interfaces/spans/utils';
 import {TraceContextType} from 'app/components/events/interfaces/spans/traceView';
@@ -63,7 +63,7 @@ class EventBreakdown extends React.Component<Props> {
       (entry: {type: string}) => entry.type === 'spans'
     );
 
-    const spans: SpanType[] = get(spanEntry, 'data', []);
+    const spans: RawSpanType[] = get(spanEntry, 'data', []);
 
     type AggregateType = {
       [opname: string]: {
@@ -84,7 +84,7 @@ class EventBreakdown extends React.Component<Props> {
     });
 
     const aggregateByOp: AggregateType = spans.reduce(
-      (aggregate: AggregateType, span: SpanType) => {
+      (aggregate: AggregateType, span: RawSpanType) => {
         let op = span.op;
 
         const duration = Math.abs(span.timestamp - span.start_timestamp);
