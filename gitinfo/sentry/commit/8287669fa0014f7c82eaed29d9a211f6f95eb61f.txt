commit 8287669fa0014f7c82eaed29d9a211f6f95eb61f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 14:46:54 2013 -0800

    Initial work on alerts

diff --git a/src/sentry/counter/redis.py b/src/sentry/counter/redis.py
index 5a5053fa06..414bfcdf97 100644
--- a/src/sentry/counter/redis.py
+++ b/src/sentry/counter/redis.py
@@ -51,6 +51,23 @@ class RedisCounter(Counter):
                 conn.zincrby(key, group.project_id)
                 conn.expire(key, 60 * self.MINUTES)
 
+    def extract_counts(self, prefix='project'):
+        now = time.time() - 60
+        with self.conn.map() as conn:
+            key = self._make_key(prefix, now)
+            total = conn.zrange(key)
+            conn.delete(key)
+
+            key = self._make_key(prefix, now, True)
+            new = conn.zrange(key)
+            conn.delete(key)
+
+        return {
+            'time': now,
+            'total': total,
+            'new': new,
+        }
+
     def _get_count(self, project, minutes=None, is_new=False):
         if minutes is None:
             minutes = self.MINUTES
diff --git a/src/sentry/tasks/__init__.py b/src/sentry/tasks/__init__.py
index 9f908cf515..007b316458 100644
--- a/src/sentry/tasks/__init__.py
+++ b/src/sentry/tasks/__init__.py
@@ -6,6 +6,7 @@ sentry.tasks
 :license: BSD, see LICENSE for more details.
 """
 
+import sentry.tasks.check_alerts  # NOQA
 import sentry.tasks.cleanup  # NOQA
 import sentry.tasks.fetch_source  # NOQA
 import sentry.tasks.index  # NOQA
diff --git a/src/sentry/tasks/check_alerts.py b/src/sentry/tasks/check_alerts.py
new file mode 100644
index 0000000000..6d57f2224d
--- /dev/null
+++ b/src/sentry/tasks/check_alerts.py
@@ -0,0 +1,54 @@
+"""
+sentry.tasks.cleanup
+~~~~~~~~~~~~~~~~~~~~
+
+- Store a sorted set per project
+- Each sorted set contains the number of events seen in the interval (1 minute)
+  - An additional set contains the number of unique events seen
+- Every minute we iterate this sorted set (we can exploit the queue just like buffers to avoid crons)
+  - We clear the results immediately to no-op any concurrent tasks that might try to run
+  - The task fires off a set of subtasks that individually check each project
+    - Each project's value is compared to the historic value in the last N minutes (15m for redis counters or
+      a period of time using the SQL counters)
+    - We only alert if an alert has not been seen on this condition in the last N minutes
+
+Notes:
+
+- Nydus optimizes out multiple writes/gets, so its not as expensive as it looks
+- Values that are not set need to constitute missing data, and we either need to ignore them or normalize them to the
+  average from the before/after points
+
+Last Notified will be tracked by using a new Alert model, which has the following properties:
+
+- users alerted
+- datetime
+- type
+- ident
+
+Type and ident would be similar to how Activity works.
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from celery.task import task
+from sentry import app
+from sentry.utils.queue import maybe_delay
+
+
+@task(ignore_result=True)
+def check_alerts(**kwargs):
+    """
+    Iterates all current keys and checks if fires additional tasks
+    to check each individual project's alert settings.
+    """
+    count_results = app.counter.extract_counts(prefix='project')
+    when = count_results.pop('time')
+    for name, results in count_results.iteritems():
+        for project_id, count in results.iteritems():
+            maybe_delay(check_project_alerts, name=name, project_id=project_id, when=when, count=count, expires=120)
+
+
+@task(ignore_result=True)
+def check_project_alerts(name, project_id, when, count, **kwargs):
+    pass
\ No newline at end of file
