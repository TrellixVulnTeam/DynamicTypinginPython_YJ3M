commit 4ecd2de00085dc3cf684599308bb43d69023a7d5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Dec 1 20:58:16 2015 -0800

    Add our own internal `call_command`

diff --git a/src/sentry/management/commands/createsuperuser.py b/src/sentry/management/commands/createsuperuser.py
index 65c999184a..4291a86143 100644
--- a/src/sentry/management/commands/createsuperuser.py
+++ b/src/sentry/management/commands/createsuperuser.py
@@ -7,5 +7,8 @@ class Command(Command):
     help = 'Performs any pending database migrations and upgrades'
 
     def handle(self, **options):
-        from sentry.runner.commands.createuser import createuser
-        createuser.main(args=['--interactive'], obj={})
+        from sentry.runner import call_command
+        call_command(
+            'sentry.runner.commands.createuser.createuser',
+            superuser=True,
+        )
diff --git a/src/sentry/receivers/users.py b/src/sentry/receivers/users.py
index 5c271c8b83..21a33f5a18 100644
--- a/src/sentry/receivers/users.py
+++ b/src/sentry/receivers/users.py
@@ -12,23 +12,13 @@ def create_first_user(app, created_models, verbosity, db, **kwargs):
         return
 
     import click
-    import time
     if not click.confirm('\nWould you like to create a user account now?', default=True):
         # Not using `abort=1` because we don't want to exit out from further execution
         click.echo('\nRun `sentry createuser` to do this later.\n')
-        time.sleep(2)
         return
 
-    from sentry.runner.commands.createuser import createuser
-    try:
-        createuser.main(args=[], obj={})
-        click.echo()
-    except SystemExit as e:
-        # click normally wants to exit the process, but we want to just continue execution
-        if e.code == 0:
-            return
-        click.echo('\nRun `sentry createuser` to do this later.\n')
-        time.sleep(2)
+    from sentry.runner import call_command
+    call_command('sentry.runner.commands.createuser.createuser')
 
 
 post_syncdb.connect(
diff --git a/src/sentry/runner/__init__.py b/src/sentry/runner/__init__.py
index d43d465ef5..a47f4431eb 100755
--- a/src/sentry/runner/__init__.py
+++ b/src/sentry/runner/__init__.py
@@ -106,5 +106,23 @@ def get_prog():
     return 'sentry'
 
 
+class UnknownCommand(ImportError):
+    pass
+
+
+def call_command(name, obj=None, **kwargs):
+    try:
+        command = import_string(name)
+    except (ImportError, AttributeError):
+        raise UnknownCommand(name)
+
+    with command.make_context('sentry', [], obj=obj or {}) as ctx:
+        ctx.params.update(kwargs)
+        try:
+            command.invoke(ctx)
+        except click.Abort:
+            click.echo('Aborted!', err=True)
+
+
 def main():
     cli(prog_name=get_prog(), obj={}, max_content_width=100)
diff --git a/src/sentry/runner/commands/start.py b/src/sentry/runner/commands/start.py
index 1a94f5b657..0cb3a3b45f 100644
--- a/src/sentry/runner/commands/start.py
+++ b/src/sentry/runner/commands/start.py
@@ -39,8 +39,11 @@ def start(ctx, service, bind, workers, debug, upgrade, noinput):
 
     if upgrade:
         click.echo('Performing upgrade before service startup...')
-        from sentry.runner.commands.upgrade import upgrade
-        ctx.invoke(upgrade, verbosity=0, noinput=noinput)
+        from sentry.runner import call_command
+        call_command(
+            'sentry.runner.commands.upgrade.upgrade',
+            verbosity=0, noinput=noinput,
+        )
 
     click.echo('Running service: %r' % service)
 
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index 45b704100a..400954b874 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -20,15 +20,15 @@ from sentry.runner.decorators import configuration
 def upgrade(ctx, verbosity, traceback, noinput):
     "Perform any pending database migrations and upgrades."
 
-    from django.core.management import call_command
-    call_command(
+    from django.core.management import call_command as dj_call_command
+    dj_call_command(
         'syncdb',
         interactive=not noinput,
         traceback=traceback,
         verbosity=verbosity,
     )
 
-    call_command(
+    dj_call_command(
         'migrate',
         merge=True,
         ignore_ghost_migrations=True,
@@ -37,5 +37,7 @@ def upgrade(ctx, verbosity, traceback, noinput):
         verbosity=verbosity,
     )
 
-    from sentry.runner.commands.repair import repair
-    ctx.invoke(repair)
+    from sentry.runner import call_command
+    call_command(
+        'sentry.runner.commands.repair.repair',
+    )
