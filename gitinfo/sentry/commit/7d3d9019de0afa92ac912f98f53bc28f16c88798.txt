commit 7d3d9019de0afa92ac912f98f53bc28f16c88798
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 5 00:31:09 2012 -0700

    Additional large refactor which sets up slugs everywhere and moves ProjectMember to TeamMember

diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 19c9151fef..6ba0577b6f 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -20,7 +20,7 @@ from django.utils.encoding import smart_str
 
 from sentry.conf import settings
 # from sentry.exceptions import InvalidData, InvalidInterface
-from sentry.models import ProjectMember, ProjectKey
+from sentry.models import Project, ProjectKey, TeamMember, Team
 from sentry.plugins import plugins
 from sentry.tasks.store import store_event
 from sentry.utils import is_float, json
@@ -80,19 +80,24 @@ def project_from_auth_vars(auth_vars, data):
         except ProjectKey.DoesNotExist:
             raise APIForbidden('Invalid signature')
 
+        project = Project.objects.get_from_cache(pk=pk.project_id)
+        secret_key = pk.secret_key
+
         if pk.user:
             try:
-                pm = ProjectMember.objects.get(project=pk.project, user=pk.user)
-            except ProjectMember.DoesNotExist:
-                pm = None
-            else:
-                if not pm.is_active or pm.user and not pm.user.is_active:
-                    raise APIUnauthorized('Account is not active')
-
-        project = pk.project
-        secret_key = pk.secret_key
+                team = Team.objects.get_from_cache(pk=project.team_id)
+            except Team.DoesNotExist:
+                raise APIUnauthorized('Member does not have access to project')
 
-        result = plugins.first('has_perm', pm.user, 'create_event', pm.project)
+            try:
+                tm = TeamMember.objects.get(team=team, user=pk.user, is_active=True)
+            except TeamMember.DoesNotExist:
+                raise APIUnauthorized('Member does not have access to project')
+
+            if not pk.user.is_active:
+                raise APIUnauthorized('Account is not active')
+
+        result = plugins.first('has_perm', tm.user, 'create_event', project)
         if result is False:
             raise APIUnauthorized()
     else:
@@ -131,20 +136,26 @@ def project_from_api_key_and_id(api_key, project_id):
     if str(pk.project_id) != str(project_id):
         raise APIUnauthorized()
 
+    project = Project.objects.get_from_cache(pk=pk.project_id)
+
     if pk.user:
+        team = Team.objects.get_from_cache(pk=project.team_id)
+
         try:
-            pm = ProjectMember.objects.get(project=pk.project, user=pk.user)
-        except ProjectMember.DoesNotExist:
-            pm = None
-        else:
-            if not pm.is_active or pm.user and not pm.user.is_active:
-                raise APIUnauthorized('Account is not active')
+            tm = TeamMember.objects.get(team=team, user=pk.user, is_active=True)
+        except TeamMember.DoesNotExist:
+            raise APIUnauthorized('Member does not have access to project')
 
-    result = plugins.first('has_perm', pm.user, 'create_event', pm.project)
+        if not pk.user.is_active:
+            raise APIUnauthorized('Account is not active')
+
+        tm.project = project
+
+    result = plugins.first('has_perm', tm.user, 'create_event', project)
     if result is False:
         raise APIUnauthorized()
 
-    return pm.project
+    return project
 
 
 def project_from_id(request):
@@ -156,21 +167,29 @@ def project_from_id(request):
         raise APIUnauthorized('Account is not active')
 
     try:
-        pm = ProjectMember.objects.get(
+        project = Project.objects.get_from_cache(pk=request.GET['project_id'])
+    except Project.DoesNotExist:
+        raise APIUnauthorized('Invalid project')
+
+    try:
+        team = Team.objects.get_from_cache(pk=project.team_id)
+    except Project.DoesNotExist:
+        raise APIUnauthorized('Member does not have access to project')
+
+    try:
+        TeamMember.objects.get(
             user=request.user,
-            project=request.GET['project_id'],
+            team=team,
+            is_active=True,
         )
-    except ProjectMember.DoesNotExist:
-        raise APIUnauthorized()
+    except TeamMember.DoesNotExist:
+        raise APIUnauthorized('Member does not have access to project')
 
-    if not pm.is_active:
-        raise APIUnauthorized()
-
-    result = plugins.first('has_perm', request.user, 'create_event', pm.project)
+    result = plugins.first('has_perm', request.user, 'create_event', project)
     if result is False:
         raise APIUnauthorized()
 
-    return pm.project
+    return project
 
 
 def decode_and_decompress_data(encoded_data):
diff --git a/sentry/migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py b/sentry/migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py
new file mode 100644
index 0000000000..ecbccfccc7
--- /dev/null
+++ b/sentry/migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py
@@ -0,0 +1,282 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Removing unique constraint on 'PendingProjectMember', fields ['project', 'email']
+        db.delete_unique('sentry_pendingprojectmember', ['project_id', 'email'])
+
+        # Deleting model 'PendingProjectMember'
+        db.delete_table('sentry_pendingprojectmember')
+
+        # Adding model 'PendingTeamMember'
+        db.create_table('sentry_pendingteammember', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('team', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pending_member_set', to=orm['sentry.Team'])),
+            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
+            ('type', self.gf('django.db.models.fields.IntegerField')(default=0)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['PendingTeamMember'])
+
+        # Adding unique constraint on 'PendingTeamMember', fields ['team', 'email']
+        db.create_unique('sentry_pendingteammember', ['team_id', 'email'])
+
+
+    def backwards(self, orm):
+        
+        # Removing unique constraint on 'PendingTeamMember', fields ['team', 'email']
+        db.delete_unique('sentry_pendingteammember', ['team_id', 'email'])
+
+        # Adding model 'PendingProjectMember'
+        db.create_table('sentry_pendingprojectmember', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('project', self.gf('django.db.models.fields.related.ForeignKey')(related_name='pending_member_set', to=orm['sentry.Project'])),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('type', self.gf('django.db.models.fields.IntegerField')(default=0)),
+            ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
+        ))
+        db.send_create_signal('sentry', ['PendingProjectMember'])
+
+        # Adding unique constraint on 'PendingProjectMember', fields ['project', 'email']
+        db.create_unique('sentry_pendingprojectmember', ['project_id', 'email'])
+
+        # Deleting model 'PendingTeamMember'
+        db.delete_table('sentry_pendingteammember')
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 5, 3, 29, 45, 137609)'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 5, 3, 29, 45, 137481)'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/migrations/0052_migrate_project_members.py b/sentry/migrations/0052_migrate_project_members.py
new file mode 100644
index 0000000000..3c74bed4d6
--- /dev/null
+++ b/sentry/migrations/0052_migrate_project_members.py
@@ -0,0 +1,267 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import DataMigration
+from django.db import models
+
+class Migration(DataMigration):
+
+    def forwards(self, orm):
+        "Write your forwards methods here."
+        for project in orm['sentry.Project'].objects.all():
+            if not project.owner:
+                continue
+
+            if not project.team:
+                team = orm['sentry.Team'].objects.create(owner=project.owner, slug=project.slug)
+                project.team = team
+                project.save()
+            else:
+                team = project.team
+
+            for member in project.member_set.all():
+                if not member.user:
+                    continue
+                tm = orm['sentry.TeamMember'].objects.create(
+                    team=team,
+                    user=member.user,
+                )
+                key = orm['sentry.ProjectKey'].objects.get_or_create(
+                    project=project,
+                    user=tm.user,
+                )[0]
+
+    def backwards(self, orm):
+        "Write your backwards methods here."
+
+
+    models = {
+        'auth.group': {
+            'Meta': {'object_name': 'Group'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),
+            'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'auth.permission': {
+            'Meta': {'ordering': "('content_type__app_label', 'content_type__model', 'codename')", 'unique_together': "(('content_type', 'codename'),)", 'object_name': 'Permission'},
+            'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['contenttypes.ContentType']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})
+        },
+        'auth.user': {
+            'Meta': {'object_name': 'User'},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 5, 3, 30, 7, 526220)'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'groups': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Group']", 'symmetrical': 'False', 'blank': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2012, 4, 5, 3, 30, 7, 526083)'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'user_permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['auth.Permission']", 'symmetrical': 'False', 'blank': 'True'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '30'})
+        },
+        'contenttypes.contenttype': {
+            'Meta': {'ordering': "('name',)", 'unique_together': "(('app_label', 'model'),)", 'object_name': 'ContentType', 'db_table': "'django_content_type'"},
+            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'model': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '100'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'server_name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'site': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True', 'db_index': 'True'}),
+            'time_spent': ('django.db.models.fields.FloatField', [], {'null': 'True'})
+        },
+        'sentry.filtervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'FilterValue'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'logger', 'culprit', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'score': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1', 'db_index': 'True'}),
+            'views': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.View']", 'symmetrical': 'False', 'blank': 'True'})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.messagecountbyminute': {
+            'Meta': {'unique_together': "(('project', 'group', 'date'),)", 'object_name': 'MessageCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.messagefiltervalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'MessageFilterValue'},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.messageindex': {
+            'Meta': {'unique_together': "(('column', 'value', 'object_id'),)", 'object_name': 'MessageIndex'},
+            'column': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'object_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'})
+        },
+        'sentry.project': {
+            'Meta': {'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_owned_project_set'", 'null': 'True', 'to': "orm['auth.User']"}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'unique': 'True', 'null': 'True', 'db_index': 'True'}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'})
+        },
+        'sentry.projectcountbyminute': {
+            'Meta': {'unique_together': "(('project', 'date'),)", 'object_name': 'ProjectCountByMinute'},
+            'date': ('django.db.models.fields.DateTimeField', [], {}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent_count': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'time_spent_total': ('django.db.models.fields.FloatField', [], {'default': '0'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.projectdomain': {
+            'Meta': {'unique_together': "(('project', 'domain'),)", 'object_name': 'ProjectDomain'},
+            'domain': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'domain_set'", 'to': "orm['sentry.Project']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']", 'null': 'True'})
+        },
+        'sentry.projectmember': {
+            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'ProjectMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Project']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_project_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('picklefield.fields.PickledObjectField', [], {})
+        },
+        'sentry.searchdocument': {
+            'Meta': {'unique_together': "(('project', 'group'),)", 'object_name': 'SearchDocument'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'date_changed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'project': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0'}),
+            'total_events': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'})
+        },
+        'sentry.searchtoken': {
+            'Meta': {'unique_together': "(('document', 'field', 'token'),)", 'object_name': 'SearchToken'},
+            'document': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'token_set'", 'to': "orm['sentry.SearchDocument']"}),
+            'field': ('django.db.models.fields.CharField', [], {'default': "'text'", 'max_length': '64'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'token': ('django.db.models.fields.CharField', [], {'max_length': '128'})
+        },
+        'sentry.team': {
+            'Meta': {'object_name': 'Team'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['auth.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50', 'db_index': 'True'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'team': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('django.db.models.fields.IntegerField', [], {'default': '0'}),
+            'user': ('django.db.models.fields.related.ForeignKey', [], {'related_name': "'sentry_teammember_set'", 'to': "orm['auth.User']"})
+        },
+        'sentry.view': {
+            'Meta': {'object_name': 'View'},
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'path': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '100'}),
+            'verbose_name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
+            'verbose_name_plural': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'})
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/sentry/models.py b/sentry/models.py
index bef5320d94..76d2b92621 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -22,7 +22,8 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.db import models
 from django.db.models import F
-from django.db.models.signals import post_syncdb, post_save
+from django.db.models.signals import post_syncdb, post_save, post_delete
+from django.template.defaultfilters import slugify
 from django.utils.datastructures import SortedDict
 from django.utils.encoding import smart_unicode
 from django.utils.translation import ugettext_lazy as _
@@ -32,7 +33,7 @@ from sentry.manager import GroupManager, ProjectManager, \
   MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager
 from sentry.utils import cached_property, \
   MockDjangoRequest
-from sentry.utils.models import Model, GzippedDictField
+from sentry.utils.models import Model, GzippedDictField, update
 from sentry.templatetags.sentry_helpers import truncatechars
 
 __all__ = ('Event', 'Group', 'Project', 'SearchDocument')
@@ -86,18 +87,24 @@ class Team(Model):
     owner = models.ForeignKey(User)
 
     objects = BaseManager(cache_fields=(
+        'pk',
         'slug',
     ))
 
     def __unicode__(self):
         return self.slug
 
+    def save(self, *args, **kwargs):
+        if not self.slug:
+            self.slug = slugify(self.name)
+        super(Team, self).save(*args, **kwargs)
+
 
 class TeamMember(Model):
     """
     Identifies relationships between teams and users.
     """
-    team = models.ForeignKey(Team)
+    team = models.ForeignKey(Team, related_name="member_set")
     user = models.ForeignKey(User, related_name="sentry_teammember_set")
     is_active = models.BooleanField(default=True)
     type = models.IntegerField(choices=MEMBER_TYPES, default=globals().get(settings.DEFAULT_PROJECT_ACCESS))
@@ -139,6 +146,11 @@ class Project(Model):
     def __unicode__(self):
         return u'#%s %r' % (self.pk, self.name)
 
+    def save(self, *args, **kwargs):
+        if not self.slug:
+            self.slug = slugify(self.name)
+        super(Project, self).save(*args, **kwargs)
+
     def delete(self):
         # This hadles cascades properly
         # TODO: this doesnt clean up the index
@@ -257,25 +269,25 @@ class ProjectOption(Model):
         return u'project=%s, key=%s, value=%s' % (self.project_id, self.key, self.value)
 
 
-class PendingProjectMember(Model):
+class PendingTeamMember(Model):
     """
-    Identifies relationships between projects and pending invites.
+    Identifies relationships between teams and pending invites.
     """
-    project = models.ForeignKey(Project, related_name="pending_member_set")
+    team = models.ForeignKey(Team, related_name="pending_member_set")
     email = models.EmailField()
     type = models.IntegerField(choices=MEMBER_TYPES, default=globals().get(settings.DEFAULT_PROJECT_ACCESS))
     date_added = models.DateTimeField(default=datetime.now)
 
     class Meta:
-        unique_together = (('project', 'email'),)
+        unique_together = (('team', 'email'),)
 
     def __unicode__(self):
-        return u'project=%s, email=%s, type=%s' % (self.project_id, self.email, self.get_type_display())
+        return u'team=%s, email=%s, type=%s' % (self.team_id, self.email, self.get_type_display())
 
     @property
     def token(self):
         checksum = md5()
-        for x in (str(self.project_id), self.email, settings.KEY):
+        for x in (str(self.team_id), self.email, settings.KEY):
             checksum.update(x)
         return checksum.hexdigest()
 
@@ -285,7 +297,7 @@ class PendingProjectMember(Model):
 
         context = {
             'email': self.email,
-            'project': self.project,
+            'team': self.team,
             'url': '%s%s' % (settings.URL_PREFIX, reverse('sentry-accept-invite', kwargs={
                 'member_id': self.id,
                 'token': self.token,
@@ -294,7 +306,7 @@ class PendingProjectMember(Model):
         body = render_to_string('sentry/emails/member_invite.txt', context)
 
         try:
-            send_mail('%s Invite to join project: %s' % (settings.EMAIL_SUBJECT_PREFIX, self.project.name),
+            send_mail('%s Invite to join team: %s' % (settings.EMAIL_SUBJECT_PREFIX, self.team.name),
                 body, settings.SERVER_EMAIL, [self.email],
                 fail_silently=False)
         except Exception, e:
@@ -752,14 +764,31 @@ def create_default_project(created_models, verbosity=2, **kwargs):
                 print 'done!'
 
 
-def create_project_member_for_owner(instance, created, **kwargs):
+def create_team_for_project(instance, created, **kwargs):
+    if not created:
+        return
+
+    if instance.team:
+        return
+
+    if not instance.owner:
+        return
+
+    update(instance, team=Team.objects.create(
+        owner=instance.owner,
+        name=instance.name,
+        slug=instance.slug,
+    ))
+
+
+def create_team_member_for_owner(instance, created, **kwargs):
     if not created:
         return
 
     if not instance.owner:
         return
 
-    instance.member_set.create(
+    instance.member_set.get_or_create(
         user=instance.owner,
         type=globals()[settings.DEFAULT_PROJECT_ACCESS]
     )
@@ -775,14 +804,23 @@ def update_document(instance, created, **kwargs):
     ).update(status=instance.status)
 
 
-def create_key_for_project_member(instance, created, **kwargs):
+def create_key_for_team_member(instance, created, **kwargs):
     if not created:
         return
 
-    ProjectKey.objects.create(
-        project=instance.project,
-        user=instance.user,
-    )
+    for project in instance.team.project_set.all():
+        ProjectKey.objects.get_or_create(
+            project=project,
+            user=instance.user,
+        )
+
+
+def remove_key_for_team_member(instance, **kwargs):
+    for project in instance.team.project_set.all():
+        ProjectKey.objects.filter(
+            project=project,
+            user=instance.user,
+        ).delete()
 
 # Signal registration
 post_syncdb.connect(
@@ -791,9 +829,15 @@ post_syncdb.connect(
     weak=False,
 )
 post_save.connect(
-    create_project_member_for_owner,
+    create_team_for_project,
     sender=Project,
-    dispatch_uid="create_project_member_for_owner",
+    dispatch_uid="create_team_for_project",
+    weak=False,
+)
+post_save.connect(
+    create_team_member_for_owner,
+    sender=Team,
+    dispatch_uid="create_team_member_for_owner",
     weak=False,
 )
 post_save.connect(
@@ -803,8 +847,14 @@ post_save.connect(
     weak=False,
 )
 post_save.connect(
-    create_key_for_project_member,
-    sender=ProjectMember,
-    dispatch_uid="create_key_for_project_member",
+    create_key_for_team_member,
+    sender=TeamMember,
+    dispatch_uid="create_key_for_team_member",
+    weak=False,
+)
+post_delete.connect(
+    remove_key_for_team_member,
+    sender=TeamMember,
+    dispatch_uid="remove_key_for_team_member",
     weak=False,
 )
diff --git a/sentry/permissions.py b/sentry/permissions.py
index ba19b4a539..5af8564aae 100644
--- a/sentry/permissions.py
+++ b/sentry/permissions.py
@@ -47,3 +47,24 @@ def can_set_public_projects(user):
     if result is False:
         return result
     return True
+
+
+def can_add_team_member(user, team):
+    result = plugins.first('has_perm', user, 'add_team_member', team)
+    if result is False and not user.has_perm('sentry.can_add_teammember'):
+        return False
+    return True
+
+
+def can_remove_team(user, team):
+    result = plugins.first('has_perm', user, 'remove_team', team)
+    if result is False and not user.has_perm('sentry.can_remove_team'):
+        return False
+    return True
+
+
+def can_remove_project(user, team):
+    result = plugins.first('has_perm', user, 'remove_project', team)
+    if result is False and not user.has_perm('sentry.can_remove_project'):
+        return False
+    return True
diff --git a/sentry/templates/sentry/account/settings.html b/sentry/templates/sentry/account/settings.html
index 3bcf65d4ba..3d68265c71 100644
--- a/sentry/templates/sentry/account/settings.html
+++ b/sentry/templates/sentry/account/settings.html
@@ -4,8 +4,6 @@
 
 {% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
 
-{% block bodyclass %}{% endblock %}
-
 {% block page_header %}
     <ul class="breadcrumb">
         <li><a href="#">{% trans "Account Settings" %}</a></li>
@@ -17,7 +15,7 @@
     {% trans "Account Settings" %}
 {% endblock %}
 
-{% block content %}
+{% block main %}
     <section class="body">
         <form action="" method="post">
             {% csrf_token %}
@@ -66,3 +64,7 @@
         </form>
     </section>
 {% endblock %}
+
+{% block sidebar %}
+    {% include "sentry/partial/_account_sidebar.html" %}
+{% endblock %}
\ No newline at end of file
diff --git a/sentry/templates/sentry/partial/_account_sidebar.html b/sentry/templates/sentry/partial/_account_sidebar.html
new file mode 100644
index 0000000000..8ce18299a1
--- /dev/null
+++ b/sentry/templates/sentry/partial/_account_sidebar.html
@@ -0,0 +1,17 @@
+{% load i18n %}
+
+<h6>{% trans "Account" %}</h6>
+<ul class="nav nav-tabs nav-stacked">
+    <li><a href="{% url sentry-account-settings %}">{% trans "Settings" %}</a></li>
+</ul>
+<a href="{% url sentry-create-new-team %}" class="pull-right"><small>{% trans "New team" %}</small></a>
+<h6>{% trans "Teams" %}</h6>
+{% if TEAMS %}
+    <ul class="nav nav-tabs nav-stacked">
+        {% for team in TEAMS %}
+            <li><a href="{% url sentry-manage-team team.slug %}">{{ team.name }}</a></li>
+        {% endfor %}
+    </ul>
+{% else %}
+    <p>{% trans "You are not a part of any teams." %}</p>
+{% endif %}
\ No newline at end of file
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index ff25e6d314..20c8193dfa 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -58,7 +58,7 @@
             </form>
             <div class="page-header">
                 {% if can_add_member %}
-                    <a href="{% url sentry-new-project-member project.pk %}" class="btn pull-right btn-primary">{% trans "New Member" %}</a>
+                    <a href="{% url sentry-new-team-member project.pk %}" class="btn pull-right btn-primary">{% trans "New Member" %}</a>
                 {% endif %}
                 <h2>{% trans "Members" %}</h2>
             </div>
@@ -72,77 +72,23 @@
                         <colgroup>
                             <col/>
                             <col width="100px"/>
-                            <col width="90px"/>
-                            <col width="90px"/>
                         </colgroup>
                         <thead>
                             <tr>
                                 <th>{% trans "User" %}</th>
                                 <th style="text-align:center">{% trans "Access" %}</th>
-                                <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
                             </tr>
                         </thead>
                         <tbody>
                             {% for member, user in member_list %}
                                 <tr>
                                     <td>
-                                        <a href="{% url sentry-edit-project-member project.pk member.pk %}">{{ user.username }}</a><br>
+                                        <a href="{# {% url sentry-view-project-member project.pk member.pk %} #}">{{ user.username }}</a><br>
                                         {{ user.email }}
                                     </td>
                                     <td style="text-align:center;">
                                         {{ member.get_type_display }}
                                     </td>
-                                    {% if user == project.owner %}
-                                        <td style="text-align:center;" colspan="2">
-                                            <em>{% trans "unavailable for owner" %}</em>
-                                        </td>
-                                    {% else %}
-                                        <td style="text-align:center;">
-                                            <a href="{% url sentry-remove-project-member project.pk member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
-                                        </td>
-                                        <td style="text-align:center;">
-                                            {% if member.is_active %}
-                                                <a href="{% url sentry-suspend-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
-                                            {% else %}
-                                                <a href="{% url sentry-restore-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
-                                            {% endif %}
-                                        </td>
-                                    {% endif %}
-                                </tr>
-                            {% endfor %}
-                        </tbody>
-                    </table>
-                </div>
-                <div class="tab-pane" id="pending-members">
-                    <table class="table table-bordered table-striped">
-                        <colgroup>
-                            <col/>
-                            <col width="100px"/>
-                            <col width="90px"/>
-                            <col width="90px"/>
-                        </colgroup>
-                        <thead>
-                            <tr>
-                                <th>{% trans "User" %}</th>
-                                <th style="text-align:center">{% trans "Access" %}</th>
-                                <th style="text-align:center" colspan="2">{% trans "Actions" %}</th>
-                            </tr>
-                        </thead>
-                        <tbody>
-                            {% for member, email in pending_member_list %}
-                                <tr>
-                                    <td>
-                                        {{ email }}
-                                    </td>
-                                    <td style="text-align:center;">
-                                        {{ member.get_type_display }}
-                                    </td>
-                                    <td style="text-align:center;">
-                                        <a href="{% url sentry-remove-pending-project-member project.pk member.pk %}" class="btn btn-small btn-danger">{% trans "Remove" %}</a>
-                                    </td>
-                                    <td style="text-align:center;">
-                                        <a href="{% url sentry-reinvite-pending-project-member project.pk member.pk %}" class="btn btn-small">{% trans "Resend" %}</a>
-                                    </td>
                                 </tr>
                             {% endfor %}
                         </tbody>
diff --git a/sentry/templates/sentry/projects/members/new.html b/sentry/templates/sentry/projects/members/new.html
index 01227e1fde..b0ae26adde 100644
--- a/sentry/templates/sentry/projects/members/new.html
+++ b/sentry/templates/sentry/projects/members/new.html
@@ -1,4 +1,4 @@
-{% extends "sentry/projects/manage.html" %}
+{% extends "sentry/teams/manage.html" %}
 
 {% load i18n %}
 
@@ -7,7 +7,7 @@
 {% block breadcrumb %}
     {{ block.super }}
     <li class="divider">/</li>
-    <li><a href="{% url sentry-new-project-member project.pk %}">{% trans "New Member" %}</a></li>
+    <li><a href="{% url sentry-new-team-member project.pk %}">{% trans "New Member" %}</a></li>
 {% endblock %}
 
 {% block main %}
diff --git a/sentry/templates/sentry/projects/new.html b/sentry/templates/sentry/projects/new.html
index fc094c2f9f..d06a9cfdb2 100644
--- a/sentry/templates/sentry/projects/new.html
+++ b/sentry/templates/sentry/projects/new.html
@@ -19,13 +19,7 @@
             <fieldset>
                 <legend>{% trans "Project Details" %}</legend>
                 {% for field in form %}
-                    <div class="clearfix{% if field.errors %} error{% endif %}">
-                        {{ field.label_tag }}
-                        <div class="input">{{ field }}</div>
-                        {% if field.help_text %}
-                            <span class="help-block">{{ field.help_text }}</span>
-                        {% endif %}
-                    </div>
+                    {% include "sentry/partial/_form_field.html" %}
                 {% endfor %}
             </fieldset>
             <div class="actions">
diff --git a/sentry/templates/sentry/teams/manage.html b/sentry/templates/sentry/teams/manage.html
new file mode 100644
index 0000000000..b631614f54
--- /dev/null
+++ b/sentry/templates/sentry/teams/manage.html
@@ -0,0 +1,150 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+{% load sentry_plugins %}
+
+{% block title %}{% blocktrans with team.name as name %}Manage Team: {{ name }}{% endblocktrans %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-manage-team team.slug %}">{% trans "Manage" %}</a></li>
+{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <ul class="nav nav-tabs">
+            <li{% if page == 'details' %} class="active"{% endif %}>
+                <a href="{% url sentry-manage-team team.slug %}">{% trans "Details" %}</a>
+            </li>
+            {% for p in team|get_plugins %}
+                <li{% if page == 'plugin' and plugin.slug == p.slug %} class="active"{% endif %}>
+                    <a href="{% url sentry-configure-team-plugin team.slug p.slug %}">{{ p.get_title }}</a>
+                </li>
+            {% endfor %}
+            <li class="pull-right{% if page == 'plugins' %} active{% endif %}">
+                <a href="{% url sentry-manage-team-plugins team.slug %}">{% trans "Manage Plugins" %}</a>
+            </li>
+        </ul>
+        {% block inner %}
+            <p>{% trans "Here you can edit team information, as well as control the access list for a team with fine-grained permissions." %}</p>
+            <hr>
+            <div class="page-header">
+                <h2>{% trans "Team Details" %}</h2>
+            </div>
+            {% if request.GET.success %}
+                <div class="alert alert-success">{% trans "Changes to your team were saved successfully." %}</div>
+            {% else %}
+                {% if form.errors %}
+                    <div class="alert alert-error">{% trans "Please correct the errors below." %}</div>
+                {% endif %}
+            {% endif %}
+            <form class="form-stacked" action="" method="post">
+                {% csrf_token %}
+                <fieldset>
+                    {% for field in form %}
+                        {% include "sentry/partial/_form_field.html" %}
+                    {% endfor %}
+                </fieldset>
+                <fieldset class="form-actions">
+                    <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+                    <a href="{% url sentry-remove-team team.slug %}" class="btn btn-danger">{% trans "Remove Team" %}</a>
+                </fieldset>
+            </form>
+            <div class="page-header">
+                {% if can_add_member %}
+                    <a href="{% url sentry-new-team-member team.slug %}" class="btn pull-right btn-primary">{% trans "New Member" %}</a>
+                {% endif %}
+                <h2>{% trans "Members" %}</h2>
+            </div>
+            <ul class="nav nav-tabs">
+                <li class="active"><a href="#members" data-toggle="tab">Members</a></li>
+                <li><a href="#pending-members" data-toggle="tab">Pending ({{ pending_member_list|length }})</a></li>
+            </ul>
+            <div class="tab-content">
+                <div class="tab-pane active" id="members">
+                    <table class="table table-bordered table-striped">
+                        <colgroup>
+                            <col/>
+                            <col width="100px"/>
+                            <col width="90px"/>
+                            <col width="90px"/>
+                        </colgroup>
+                        <thead>
+                            <tr>
+                                <th>{% trans "User" %}</th>
+                                <th style="text-align:center">{% trans "Access" %}</th>
+                                <th colspan="2" style="text-align:center">{% trans "Actions" %}</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for member, user in member_list %}
+                                <tr>
+                                    <td>
+                                        <a href="{% url sentry-edit-team-member team.slug member.pk %}">{{ user.username }}</a><br>
+                                        {{ user.email }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        {{ member.get_type_display }}
+                                    </td>
+                                    {% if user == team.owner %}
+                                        <td style="text-align:center;" colspan="2">
+                                            <em>{% trans "unavailable for owner" %}</em>
+                                        </td>
+                                    {% else %}
+                                        <td style="text-align:center;">
+                                            <a href="{% url sentry-remove-team-member team.slug member.pk %}" class="btn btn-danger btn-small">{% trans "Remove" %}</a>
+                                        </td>
+                                        <td style="text-align:center;">
+                                            {% if member.is_active %}
+                                                <a href="{% url sentry-suspend-team-member team.slug member.pk %}" class="btn btn-small">{% trans "Suspend" %}</a>
+                                            {% else %}
+                                                <a href="{% url sentry-restore-team-member team.slug member.pk %}" class="btn btn-small">{% trans "Restore" %}</a>
+                                            {% endif %}
+                                        </td>
+                                    {% endif %}
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+                <div class="tab-pane" id="pending-members">
+                    <table class="table table-bordered table-striped">
+                        <colgroup>
+                            <col/>
+                            <col width="100px"/>
+                            <col width="90px"/>
+                            <col width="90px"/>
+                        </colgroup>
+                        <thead>
+                            <tr>
+                                <th>{% trans "User" %}</th>
+                                <th style="text-align:center">{% trans "Access" %}</th>
+                                <th style="text-align:center" colspan="2">{% trans "Actions" %}</th>
+                            </tr>
+                        </thead>
+                        <tbody>
+                            {% for member, email in pending_member_list %}
+                                <tr>
+                                    <td>
+                                        {{ email }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        {{ member.get_type_display }}
+                                    </td>
+                                    <td style="text-align:center;">
+                                        <a href="{% url sentry-remove-pending-team-member team.slug member.pk %}" class="btn btn-small btn-danger">{% trans "Remove" %}</a>
+                                    </td>
+                                    <td style="text-align:center;">
+                                        <a href="{% url sentry-reinvite-pending-team-member team.slug member.pk %}" class="btn btn-small">{% trans "Resend" %}</a>
+                                    </td>
+                                </tr>
+                            {% endfor %}
+                        </tbody>
+                    </table>
+                </div>
+            </div>
+        {% endblock %}
+    </section>
+{% endblock %}
diff --git a/sentry/templates/sentry/projects/members/edit.html b/sentry/templates/sentry/teams/members/edit.html
similarity index 54%
rename from sentry/templates/sentry/projects/members/edit.html
rename to sentry/templates/sentry/teams/members/edit.html
index 11bb02334c..ba70bc34a2 100644
--- a/sentry/templates/sentry/projects/members/edit.html
+++ b/sentry/templates/sentry/teams/members/edit.html
@@ -1,4 +1,4 @@
-{% extends "sentry/projects/manage.html" %}
+{% extends "sentry/teams/manage.html" %}
 
 {% load i18n %}
 {% load sentry_helpers %}
@@ -8,13 +8,13 @@
 {% block breadcrumb %}
     {{ block.super }}
     <li class="divider">/</li>
-    <li><a href="{% url sentry-new-project %}">Member: {{ member.user.username|truncatechars:30 }}</a></li>
+    <li><a href="{% url sentry-edit-team-member team.slug member.pk %}">Member: {{ member.user.username|truncatechars:30 }}</a></li>
 {% endblock %}
 
 {% block main %}
     <section class="body">
         {% if request.GET.success %}
-            <div class="alert alert-success">{% trans "Changes to your project were saved successfully." %}</div>
+            <div class="alert alert-success">{% trans "Changes to the member were saved successfully." %}</div>
         {% else %}
             {% if form.errors %}
                 <div class="alert alert-error">{% trans "Please correct the errors below." %}</div>
@@ -29,28 +29,6 @@
                     {{ member.user.username }}
                 </div>
             </fieldset>
-            <fieldset class="control-group">
-                <label>{% trans "Public Key" %}</label>
-                <div class="controls">
-                    {{ key.public_key }}
-                </div>
-            </fieldset>
-            <fieldset class="control-group">
-                <label>{% trans "Secret Key" %}</label>
-                <div class="controls">
-                    {{ key.secret_key }}
-                </div>
-            </fieldset>
-            <fieldset class="control-group">
-                <label>{% trans "Client DSN" %}</label>
-                <div class="controls">
-                    {{ dsn }}
-                </div>
-            </fieldset>
-            <br/>
-            <legend>{% trans "Client Configuration" %}</legend>
-            <p>{% trans "Choose your platform for quick setup instructions:" %}</p>
-            {% include "sentry/partial/_client_config.html" %}
             <br/>
             <legend>{% trans "Access" %}</legend>
             {% for field in form %}
diff --git a/sentry/templates/sentry/teams/members/new.html b/sentry/templates/sentry/teams/members/new.html
new file mode 100644
index 0000000000..1852eb223b
--- /dev/null
+++ b/sentry/templates/sentry/teams/members/new.html
@@ -0,0 +1,35 @@
+{% extends "sentry/teams/manage.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "New Member" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-new-team-member team.slug %}">{% trans "New Member" %}</a></li>
+{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <ul class="nav nav-tabs">
+{#             <li class="active"><a href="#invite" data-toggle="tab">{% trans "Invite a new user" %}</a></li> #}
+            <li class="active"><a href="#add" data-toggle="tab">{% trans "Add an existing user" %}</a></li>
+        </ul>
+        <div class="tab-content">
+            <div class="tab-pane" id="invite">
+                <p>{% trans "Invite a member to join this team via their email address. If they do not already have an
+                    account they will first be asked to create one." %}</p>
+                {% with invite_form as form %}
+                    {% include "sentry/partial/_form.html" %}
+                {% endwith %}
+            </div>
+            <div class="tab-paneactive" id="add">
+                <p>{% trans "You may add a user by their username if they already have an account." %}</p>
+                {% with add_form as form %}
+                    {% include "sentry/partial/_form.html" %}
+                {% endwith %}
+            </div>
+        </div>
+    </section>
+{% endblock %}
diff --git a/sentry/templates/sentry/projects/members/remove.html b/sentry/templates/sentry/teams/members/remove.html
similarity index 54%
rename from sentry/templates/sentry/projects/members/remove.html
rename to sentry/templates/sentry/teams/members/remove.html
index e575c33d2b..321a00928a 100644
--- a/sentry/templates/sentry/projects/members/remove.html
+++ b/sentry/templates/sentry/teams/members/remove.html
@@ -1,4 +1,4 @@
-{% extends "sentry/projects/manage.html" %}
+{% extends "sentry/teams/manage.html" %}
 
 {% load i18n %}
 
@@ -6,17 +6,18 @@
 
 {% block heading %}{% trans "Remove Member" %}{% endblock %}
 
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-remove-team-member team.slug member.pk %}">{% trans "Remove Member" %}</a></li>
+{% endblock %}
+
 {% block main %}
-    <ul class="breadcrumb">
-        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a> <span class="divider">/</span></li>
-        <li><a href="{% url sentry-manage-project project.pk %}">{% trans "Manage Project" %}</a> <span class="divider">/</span></li>
-        <li class="active">{% trans "Remove Member" %}</li>
-    </ul>
     <form class="form-stacked" action="" method="post">
         {% csrf_token %}
         <div class="alert alert-block alert-error">{% trans "Are you sure you wish to revoke this user's access? <strong>This change is permanent and will revoke their API keys immediately.</strong>" %}</div>
         <div class="actions">
-            <button type="submit" class="btn danger">{% trans "Confirm" %}</button> <a href="{% url sentry-manage-project project.pk %}" class="btn">{% trans "Cancel" %}</a>
+            <button type="submit" class="btn danger">{% trans "Confirm" %}</button> <a href="{% url sentry-manage-team team.slug %}" class="btn">{% trans "Cancel" %}</a>
         </div>
     </form>
 {% endblock %}
diff --git a/sentry/templates/sentry/teams/new.html b/sentry/templates/sentry/teams/new.html
new file mode 100644
index 0000000000..0c29c8cf2b
--- /dev/null
+++ b/sentry/templates/sentry/teams/new.html
@@ -0,0 +1,38 @@
+{% extends "sentry/layout.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "New Team" %} | {{ block.super }}{% endblock %}
+
+{% block page_header %}
+    <ul class="breadcrumb">
+        <li><a href="#">{% trans "Teams" %}</a></li>
+        {% block breadcrumb %}
+            <li class="divider">/</li>
+            <li><a href="{% url sentry-new-project %}">{% trans "New Team" %}</a></li>
+        {% endblock %}
+    </ul>
+{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <p>{% trans "Use this page to create a new team within Sentry. Once done, you'll be able to add members to the team." %}</p>
+        <hr>
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+            <fieldset>
+                <legend>{% trans "Team Details" %}</legend>
+                {% for field in form %}
+                    {% include "sentry/partial/_form_field.html" %}
+                {% endfor %}
+            </fieldset>
+            <div class="actions">
+                <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+            </div>
+        </form>
+    </section>
+{% endblock %}
+
+{% block sidebar %}
+    {% include "sentry/partial/_account_sidebar.html" %}
+{% endblock %}
\ No newline at end of file
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index ebff9e3c63..73cb04f2a6 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -3,9 +3,9 @@ from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 
 from sentry.conf import settings
-from sentry.models import Project
+from sentry.models import Project, Team
 from sentry.web.helpers import get_project_list, render_to_response, \
-  get_login_url
+  get_login_url, get_team_list
 
 
 def has_access(group_or_func=None):
@@ -34,7 +34,7 @@ def has_access(group_or_func=None):
             if request.user.is_superuser:
                 if project_id:
                     try:
-                        project = Project.objects.get(pk=project_id)
+                        project = Project.objects.get_from_cache(pk=project_id)
                     except Project.DoesNotExist:
                         return HttpResponseRedirect(reverse('sentry'))
                 else:
@@ -55,6 +55,47 @@ def has_access(group_or_func=None):
     return wrapped
 
 
+def has_team_access(group_or_func=None):
+    """
+    Tests and transforms team_id for permissions based on the requesting
+    user. Passes the actual project instance to the decorated view.
+
+    The default permission scope is 'user', which
+    allows both 'user' and 'owner' access, but not 'system agent'.
+
+    >>> @has_team_access(MEMBER_OWNER)
+    >>> def foo(request, team):
+    >>>     return
+
+    >>> @has_team_access
+    >>> def foo(request, team):
+    >>>     return
+    """
+    if callable(group_or_func):
+        return has_team_access(None)(group_or_func)
+
+    def wrapped(func):
+        @wraps(func)
+        def _wrapped(request, team_slug, *args, **kwargs):
+            if request.user.is_superuser:
+                try:
+                    team = Team.objects.get_from_cache(slug=team_slug)
+                except Team.DoesNotExist:
+                    return HttpResponseRedirect(reverse('sentry'))
+                return func(request, team, *args, **kwargs)
+
+            team_list = get_team_list(request.user, group_or_func)
+            print team_slug
+            try:
+                team = team_list[team_slug]
+            except (KeyError, ValueError):
+                return HttpResponseRedirect(reverse('sentry'))
+
+            return func(request, team, *args, **kwargs)
+        return _wrapped
+    return wrapped
+
+
 def login_required(func):
     @wraps(func)
     def wrapped(request, *args, **kwargs):
diff --git a/sentry/web/forms.py b/sentry/web/forms/__init__.py
similarity index 67%
rename from sentry/web/forms.py
rename to sentry/web/forms/__init__.py
index 494a3e0851..3e775e8727 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms/__init__.py
@@ -7,46 +7,13 @@ sentry.web.forms
 """
 from django import forms
 from django.contrib.auth.models import User
-from django.utils.encoding import force_unicode
-from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
-from sentry.models import Project, ProjectMember, PendingProjectMember
+from sentry.models import Project
 from sentry.interfaces import Http
 from sentry.permissions import can_set_public_projects
-
-
-class RadioFieldRenderer(forms.widgets.RadioFieldRenderer):
-    """
-    This is identical to Django's builtin widget, except that
-    it renders as a Bootstrap2 compatible widget. Would be great if
-    we didn't have to create this stupid code, but Django widgets are not
-    flexible.
-    """
-    def render(self):
-        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' % u'\n'.join([force_unicode(w) for w in self]))
-
-
-class UserField(forms.CharField):
-    class widget(forms.widgets.TextInput):
-        def render(self, name, value, attrs=None):
-            if not attrs:
-                attrs = {}
-            if 'placeholder' not in attrs:
-                attrs['placeholder'] = 'username'
-            if isinstance(value, int):
-                value = unicode(User.objects.get(pk=value))
-            return super(UserField.widget, self).render(name, value, attrs)
-
-    def clean(self, value):
-        value = super(UserField, self).clean(value)
-        if not value:
-            return None
-        try:
-            return User.objects.get(username=value)
-        except User.DoesNotExist:
-            raise forms.ValidationError(_('Invalid username'))
+from sentry.web.forms.fields import RadioFieldRenderer, UserField
 
 
 class RemoveProjectForm(forms.Form):
@@ -104,56 +71,6 @@ class EditProjectForm(forms.ModelForm):
             del self.fields['public']
 
 
-class BaseProjectMemberForm(forms.ModelForm):
-    class Meta:
-        fields = ('type',)
-        model = ProjectMember
-
-    def __init__(self, project, *args, **kwargs):
-        self.project = project
-        super(BaseProjectMemberForm, self).__init__(*args, **kwargs)
-
-
-EditProjectMemberForm = BaseProjectMemberForm
-
-
-class InviteProjectMemberForm(BaseProjectMemberForm):
-    class Meta:
-        fields = ('type', 'email')
-        model = PendingProjectMember
-
-    def clean_email(self):
-        value = self.cleaned_data['email']
-        if not value:
-            return None
-
-        if self.project.member_set.filter(user__email__iexact=value).exists():
-            raise forms.ValidationError(_('There is already a member with this email address'))
-
-        if self.project.pending_member_set.filter(email__iexact=value).exists():
-            raise forms.ValidationError(_('There is already a pending invite for this user'))
-
-        return value
-
-
-class NewProjectMemberForm(BaseProjectMemberForm):
-    user = UserField()
-
-    class Meta:
-        fields = ('type', 'user')
-        model = ProjectMember
-
-    def clean_user(self):
-        value = self.cleaned_data['user']
-        if not value:
-            return None
-
-        if self.project.member_set.filter(user=value).exists():
-            raise forms.ValidationError(_('User already a member of project'))
-
-        return value
-
-
 class ReplayForm(forms.Form):
     url = forms.URLField(widget=forms.TextInput(attrs={'class': 'span8'}))
     method = forms.ChoiceField(choices=((k, k) for k in Http.METHODS))
diff --git a/sentry/web/forms/fields.py b/sentry/web/forms/fields.py
new file mode 100644
index 0000000000..5df206f292
--- /dev/null
+++ b/sentry/web/forms/fields.py
@@ -0,0 +1,44 @@
+"""
+sentry.web.forms.teams
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib.auth.models import User
+from django.forms.widgets import RadioFieldRenderer, TextInput
+from django.forms import CharField, ValidationError
+from django.utils.encoding import force_unicode
+from django.utils.safestring import mark_safe
+
+
+class RadioFieldRenderer(RadioFieldRenderer):
+    """
+    This is identical to Django's builtin widget, except that
+    it renders as a Bootstrap2 compatible widget. Would be great if
+    we didn't have to create this stupid code, but Django widgets are not
+    flexible.
+    """
+    def render(self):
+        return mark_safe(u'\n<div class="inputs-list">%s</div>\n' % u'\n'.join([force_unicode(w) for w in self]))
+
+
+class UserField(CharField):
+    class widget(TextInput):
+        def render(self, name, value, attrs=None):
+            if not attrs:
+                attrs = {}
+            if 'placeholder' not in attrs:
+                attrs['placeholder'] = 'username'
+            if isinstance(value, int):
+                value = unicode(User.objects.get(pk=value))
+            return super(UserField.widget, self).render(name, value, attrs)
+
+    def clean(self, value):
+        value = super(UserField, self).clean(value)
+        if not value:
+            return None
+        try:
+            return User.objects.get(username=value)
+        except User.DoesNotExist:
+            raise ValidationError(_('Invalid username'))
\ No newline at end of file
diff --git a/sentry/web/forms/teams.py b/sentry/web/forms/teams.py
new file mode 100644
index 0000000000..525a3f95e5
--- /dev/null
+++ b/sentry/web/forms/teams.py
@@ -0,0 +1,82 @@
+"""
+sentry.web.forms.teams
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django import forms
+
+from sentry.models import Team, TeamMember, PendingTeamMember
+from sentry.web.forms.fields import UserField
+from django.utils.translation import ugettext_lazy as _
+
+
+class NewTeamForm(forms.ModelForm):
+    class Meta:
+        fields = ('name', 'slug')
+        model = Team
+
+
+class NewTeamAdminForm(forms.ModelForm):
+    owner = UserField(required=False)
+
+    class Meta:
+        fields = ('name', 'slug', 'owner')
+        model = Team
+
+
+class EditTeamForm(forms.ModelForm):
+    class Meta:
+        fields = ('name',)
+        model = Team
+
+
+class BaseTeamMemberForm(forms.ModelForm):
+    class Meta:
+        fields = ('type',)
+        model = TeamMember
+
+    def __init__(self, project, *args, **kwargs):
+        self.project = project
+        super(BaseTeamMemberForm, self).__init__(*args, **kwargs)
+
+
+EditTeamMemberForm = BaseTeamMemberForm
+
+
+class InviteTeamMemberForm(BaseTeamMemberForm):
+    class Meta:
+        fields = ('type', 'email')
+        model = PendingTeamMember
+
+    def clean_email(self):
+        value = self.cleaned_data['email']
+        if not value:
+            return None
+
+        if self.project.member_set.filter(user__email__iexact=value).exists():
+            raise forms.ValidationError(_('There is already a member with this email address'))
+
+        if self.project.pending_member_set.filter(email__iexact=value).exists():
+            raise forms.ValidationError(_('There is already a pending invite for this user'))
+
+        return value
+
+
+class NewTeamMemberForm(BaseTeamMemberForm):
+    user = UserField()
+
+    class Meta:
+        fields = ('type', 'user')
+        model = TeamMember
+
+    def clean_user(self):
+        value = self.cleaned_data['user']
+        if not value:
+            return None
+
+        if self.project.member_set.filter(user=value).exists():
+            raise forms.ValidationError(_('User already a member of project'))
+
+        return value
\ No newline at end of file
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 0d94dd274a..1c4bff74c8 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -11,32 +11,17 @@ from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
 from sentry.conf import settings
-from sentry.models import ProjectMember, MEMBER_USER, MEMBER_OWNER, \
-  PendingProjectMember, ProjectKey
-from sentry.permissions import can_create_projects
+from sentry.models import ProjectMember, MEMBER_OWNER, \
+  ProjectKey
+from sentry.permissions import can_create_projects, can_remove_project
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
-  EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm, \
-  NewProjectAdminForm, InviteProjectMemberForm
+  RemoveProjectForm, NewProjectAdminForm
 from sentry.web.helpers import render_to_response, get_project_list, \
   plugin_config
 
 
-def _can_add_project_member(user, project):
-    result = plugins.first('has_perm', user, 'add_project_member', project)
-    if result is False and not user.has_perm('sentry.can_add_projectmember'):
-        return False
-    return True
-
-
-def _can_remove_project(user, project):
-    result = plugins.first('has_perm', user, 'remove_project', project)
-    if result is False and not user.has_perm('sentry.can_remove_project'):
-        return False
-    return True
-
-
 @login_required
 def project_list(request):
     project_list = get_project_list(request.user, hidden=True)
@@ -93,7 +78,7 @@ def remove_project(request, project):
     if str(project.id) == str(settings.PROJECT):
         return HttpResponseRedirect(reverse('sentry-project-list'))
 
-    if not _can_remove_project(request.user, project):
+    if not can_remove_project(request.user, project):
         return HttpResponseRedirect(reverse('sentry'))
 
     project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
@@ -138,229 +123,20 @@ def manage_project(request, project):
 
         return HttpResponseRedirect(request.path + '?success=1')
 
-    member_list = [(pm, pm.user) for pm in project.member_set.select_related('user')]
-    pending_member_list = [(pm, pm.email) for pm in project.pending_member_set.all()]
+    member_list = [(tm, tm.user) for tm in project.team.member_set.select_related('user')]
 
     context = csrf(request)
     context.update({
-        'can_add_member': _can_add_project_member(request.user, project),
-        'can_remove_project': _can_remove_project(request.user, project),
+        'can_remove_project': can_remove_project(request.user, project),
         'page': 'details',
         'form': form,
         'project': project,
         'member_list': member_list,
-        'pending_member_list': pending_member_list,
     })
 
     return render_to_response('sentry/projects/manage.html', context, request)
 
 
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def new_project_member(request, project):
-    can_add_member = _can_add_project_member(request.user, project)
-    if not can_add_member:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    initial = {
-        'type': MEMBER_USER,
-    }
-
-    invite_form = InviteProjectMemberForm(project, request.POST or None, initial=initial, prefix='invite')
-    add_form = NewProjectMemberForm(project, request.POST or None, initial=initial, prefix='add')
-
-    if add_form.is_valid():
-        pm = add_form.save(commit=False)
-        pm.project = project
-        pm.save()
-
-        return HttpResponseRedirect(reverse('sentry-edit-project-member', args=[project.pk, pm.id]) + '?success=1')
-
-    elif invite_form.is_valid():
-        pm = invite_form.save(commit=False)
-        pm.project = project
-        pm.save()
-
-        pm.send_invite_email()
-
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
-
-    context = csrf(request)
-    context.update({
-        'project': project,
-        'add_form': add_form,
-        'invite_form': invite_form,
-    })
-
-    return render_to_response('sentry/projects/members/new.html', context, request)
-
-
-def accept_invite(request, member_id, token):
-    try:
-        pending_member = PendingProjectMember.objects.get(pk=member_id)
-    except PendingProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    if pending_member.token != token:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    project = pending_member.project
-
-    if not request.user.is_authenticated():
-        # Show login or register form
-        context = {
-            'project': project,
-        }
-        return render_to_response('sentry/projects/members/accept_invite.html', context, request)
-
-    if project.member_set.filter(
-            user=request.user,
-            type=pending_member.type,
-        ):
-        project.member_set.create(
-            user=request.user,
-            type=pending_member.type,
-        )
-
-    pending_member.delete()
-
-    return HttpResponseRedirect(reverse('sentry', args=[project.pk]))
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def edit_project_member(request, project, member_id):
-    try:
-        member = project.member_set.get(pk=member_id)
-    except ProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'edit_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    form = EditProjectMemberForm(project, request.POST or None, instance=member)
-    if form.is_valid():
-        member = form.save(commit=True)
-        return HttpResponseRedirect(request.path + '?success=1')
-
-    key = ProjectKey.objects.get(user=member.user, project=project)
-
-    context = csrf(request)
-    context.update({
-        'member': member,
-        'key': key,
-        'project': project,
-        'form': form,
-        'dsn': key.get_dsn(),
-    })
-
-    return render_to_response('sentry/projects/members/edit.html', context, request)
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def remove_project_member(request, project, member_id):
-    try:
-        member = project.member_set.get(pk=member_id)
-    except ProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    if member.user == project.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'remove_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_remove_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    if request.POST:
-        member.delete()
-
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    context = csrf(request)
-    context.update({
-        'member': member,
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/members/remove.html', context, request)
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def suspend_project_member(request, project, member_id):
-    try:
-        member = project.member_set.get(pk=member_id)
-    except ProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    if member.user == project.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'suspend_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.update(is_active=False)
-
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def restore_project_member(request, project, member_id):
-    try:
-        member = project.member_set.get(pk=member_id)
-    except ProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    if member.user == project.owner:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'restore_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_change_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.update(is_active=True)
-
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def remove_pending_project_member(request, project, member_id):
-    try:
-        member = project.pending_member_set.get(pk=member_id)
-    except PendingProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'remove_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_remove_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.delete()
-
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
-
-
-@csrf_protect
-@has_access(MEMBER_OWNER)
-def reinvite_pending_project_member(request, project, member_id):
-    try:
-        member = project.pending_member_set.get(pk=member_id)
-    except PendingProjectMember.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
-
-    result = plugins.first('has_perm', request.user, 'add_project_member', member)
-    if result is False and not request.user.has_perm('sentry.can_add_projectmember'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    member.send_invite_email()
-
-    return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]) + '?success=1')
-
-
 @login_required
 @has_access(MEMBER_OWNER)
 @csrf_protect
diff --git a/sentry/web/frontend/teams.py b/sentry/web/frontend/teams.py
new file mode 100644
index 0000000000..a87010fb74
--- /dev/null
+++ b/sentry/web/frontend/teams.py
@@ -0,0 +1,287 @@
+"""
+sentry.web.frontend.teams
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+
+from sentry.models import PendingTeamMember, TeamMember, MEMBER_USER, MEMBER_OWNER
+from sentry.permissions import can_add_team_member, can_remove_team
+from sentry.plugins import plugins
+from sentry.web.decorators import login_required, has_team_access
+from sentry.web.forms.teams import NewTeamForm, NewTeamAdminForm, \
+  EditTeamForm, EditTeamMemberForm, NewTeamMemberForm, InviteTeamMemberForm
+from sentry.web.helpers import render_to_response
+
+
+def _can_add_team_member(user, team):
+    result = plugins.first('has_perm', user, 'add_team_member', team)
+    if result is False and not user.has_perm('sentry.can_add_teammember'):
+        return False
+    return True
+
+
+@login_required
+@csrf_protect
+def create_new_team(request):
+    if request.user.has_perm('sentry.can_add_team'):
+        form_cls = NewTeamAdminForm
+        initial = {
+            'owner': request.user.username,
+        }
+    else:
+        form_cls = NewTeamForm
+        initial = {}
+
+    form = form_cls(request.POST or None, initial=initial)
+    if form.is_valid():
+        team = form.save(commit=False)
+        if not team.owner:
+            team.owner = request.user
+        team.save()
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+    })
+
+    return render_to_response('sentry/teams/new.html', context, request)
+
+
+@login_required
+@has_team_access(MEMBER_OWNER)
+@csrf_protect
+def manage_team(request, team):
+    result = plugins.first('has_perm', request.user, 'edit_team', team)
+    if result is False and not request.user.has_perm('sentry.can_change_team'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    form = EditTeamForm(request, request.POST or None, instance=team)
+
+    if form.is_valid():
+        team = form.save()
+
+        return HttpResponseRedirect(request.path + '?success=1')
+
+    member_list = [(pm, pm.user) for pm in team.member_set.select_related('user')]
+
+    context = csrf(request)
+    context.update({
+        'can_add_member': can_add_team_member(request.user, team),
+        'can_remove_team': can_remove_team(request.user, team),
+        'page': 'details',
+        'form': form,
+        'team': team,
+        'member_list': member_list,
+    })
+
+    return render_to_response('sentry/teams/manage.html', context, request)
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def new_team_member(request, team):
+    can_add_member = can_add_team_member(request.user, team)
+    if not can_add_member:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    initial = {
+        'type': MEMBER_USER,
+    }
+
+    invite_form = InviteTeamMemberForm(team, request.POST or None, initial=initial, prefix='invite')
+    add_form = NewTeamMemberForm(team, request.POST or None, initial=initial, prefix='add')
+
+    if add_form.is_valid():
+        pm = add_form.save(commit=False)
+        pm.team = team
+        pm.save()
+
+        return HttpResponseRedirect(reverse('sentry-edit-team-member', args=[team.slug, pm.id]) + '?success=1')
+
+    elif invite_form.is_valid():
+        pm = invite_form.save(commit=False)
+        pm.team = team
+        pm.save()
+
+        pm.send_invite_email()
+
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]) + '?success=1')
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'add_form': add_form,
+        'invite_form': invite_form,
+    })
+
+    return render_to_response('sentry/teams/members/new.html', context, request)
+
+
+def accept_invite(request, member_id, token):
+    try:
+        pending_member = PendingTeamMember.objects.get(pk=member_id)
+    except PendingTeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    if pending_member.token != token:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    team = pending_member.team
+
+    if not request.user.is_authenticated():
+        # Show login or register form
+        context = {
+            'team': team,
+        }
+        return render_to_response('sentry/teams/members/accept_invite.html', context, request)
+
+    if team.member_set.filter(
+            user=request.user,
+            type=pending_member.type,
+        ):
+        team.member_set.create(
+            user=request.user,
+            type=pending_member.type,
+        )
+
+    pending_member.delete()
+
+    return HttpResponseRedirect(reverse('sentry', args=[team.slug]))
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def edit_team_member(request, team, member_id):
+    try:
+        member = team.member_set.get(pk=member_id)
+    except TeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'edit_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    form = EditTeamMemberForm(team, request.POST or None, instance=member)
+    if form.is_valid():
+        member = form.save(commit=True)
+        return HttpResponseRedirect(request.path + '?success=1')
+
+    context = csrf(request)
+    context.update({
+        'member': member,
+        'team': team,
+        'form': form,
+    })
+
+    return render_to_response('sentry/teams/members/edit.html', context, request)
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def remove_team_member(request, team, member_id):
+    try:
+        member = team.member_set.get(pk=member_id)
+    except TeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    if member.user == team.owner:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'remove_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_remove_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    if request.POST:
+        member.delete()
+
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    context = csrf(request)
+    context.update({
+        'member': member,
+        'team': team,
+    })
+
+    return render_to_response('sentry/teams/members/remove.html', context, request)
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def suspend_team_member(request, team, member_id):
+    try:
+        member = team.member_set.get(pk=member_id)
+    except TeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    if member.user == team.owner:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'suspend_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.update(is_active=False)
+
+    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]) + '?success=1')
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def restore_team_member(request, team, member_id):
+    try:
+        member = team.member_set.get(pk=member_id)
+    except TeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    if member.user == team.owner:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'restore_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_change_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.update(is_active=True)
+
+    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]) + '?success=1')
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def remove_pending_team_member(request, team, member_id):
+    try:
+        member = team.pending_member_set.get(pk=member_id)
+    except PendingTeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'remove_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_remove_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.delete()
+
+    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]) + '?success=1')
+
+
+@csrf_protect
+@has_team_access(MEMBER_OWNER)
+def reinvite_pending_team_member(request, team, member_id):
+    try:
+        member = team.pending_member_set.get(pk=member_id)
+    except PendingTeamMember.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]))
+
+    result = plugins.first('has_perm', request.user, 'add_team_member', member)
+    if result is False and not request.user.has_perm('sentry.can_add_teammember'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    member.send_invite_email()
+
+    return HttpResponseRedirect(reverse('sentry-manage-team', args=[team.slug]) + '?success=1')
+
diff --git a/sentry/web/helpers.py b/sentry/web/helpers.py
index 347b320a3f..2359960ad4 100644
--- a/sentry/web/helpers.py
+++ b/sentry/web/helpers.py
@@ -16,41 +16,61 @@ from django.utils.datastructures import SortedDict
 from django.utils.safestring import mark_safe
 
 from sentry.conf import settings
-from sentry.models import ProjectMember, Project, View, \
-  MEMBER_USER, Option, ProjectOption
+from sentry.models import Project, View, \
+  MEMBER_USER, Option, ProjectOption, Team
 from sentry.permissions import can_create_projects
 
 logger = logging.getLogger('sentry.errors')
 
 
-def get_project_list(user=None, access=None, hidden=False):
+def get_project_list(user=None, access=None, hidden=False, key='id'):
     """
-    Returns a set of all projects a user has some level of access to.
+    Returns a SortedDict of all projects a user has some level of access to.
     """
     if access is None:
         access = MEMBER_USER
 
+    base_qs = Project.objects
+    if not hidden:
+        base_qs = base_qs.filter(status=0)
+
     # If we're not requesting specific access include all
     # public projects
     if access <= MEMBER_USER:
-        qs = Project.objects.filter(public=True)
-        if not hidden:
-            qs = qs.filter(status=0)
-        projects = SortedDict((p.pk, p) for p in qs)
+        qs = base_qs.filter(public=True)
+        projects = SortedDict((getattr(p, key), p) for p in qs)
     else:
         projects = SortedDict()
 
     # If the user is authenticated, include their memberships
     if user and user.is_authenticated():
-        qs = ProjectMember.objects.filter(user=user)\
-              .select_related('project')
-        if not hidden:
-            qs = qs.filter(project__status=0)
-        projects.update(SortedDict((pm.project_id, pm.project)
-            for pm in qs if pm.type <= access))
+        teams = get_team_list(user, access).values()
+        qs = base_qs.filter(
+            team__in=teams,
+        )
+        projects.update(SortedDict((getattr(p, key), p)
+            for p in qs))
 
     return projects
 
+
+def get_team_list(user, access=None):
+    """
+    Returns a SortedDict of all teams a user has some level of access to.
+    """
+    if access is None:
+        access = MEMBER_USER
+
+    if not user.is_authenticated():
+        return SortedDict()
+
+    qs = Team.objects.filter(
+        member_set__user=user,
+        member_set__is_active=True,
+        member_set__type__lte=access,
+    )
+    return SortedDict((p.slug, p) for p in qs)
+
 _LOGIN_URL = None
 
 
@@ -99,6 +119,8 @@ def get_default_context(request, existing_context=None):
         })
         if not existing_context or 'PROJECT_LIST' not in existing_context:
             context['PROJECT_LIST'] = get_project_list(request.user).values()
+        if not existing_context or 'TEAMS' not in existing_context:
+            context['TEAMS'] = get_team_list(request.user).values()
 
     return context
 
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 86ed960d06..ebde4837bd 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -12,7 +12,7 @@ from django.conf.urls.defaults import *
 
 from sentry.web import api
 from sentry.web.frontend import accounts, generic, groups, events, \
-  projects, admin, docs
+  projects, admin, docs, teams
 
 __all__ = ('urlpatterns',)
 
@@ -45,7 +45,29 @@ urlpatterns = patterns('',
     url(r'^logout/$', accounts.logout, name='sentry-logout'),
     url(r'^account/settings/$', accounts.settings, name='sentry-account-settings'),
 
-    # Management
+    # Teams
+
+    url(r'^account/teams/new/$', teams.create_new_team, name='sentry-create-new-team'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/edit/$', teams.manage_team,
+        name='sentry-manage-team'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/new/$', teams.new_team_member,
+        name='sentry-new-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/edit/$', teams.edit_team_member,
+        name='sentry-edit-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/remove/$', teams.remove_team_member,
+        name='sentry-remove-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/suspend/$', teams.suspend_team_member,
+        name='sentry-suspend-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/(?P<member_id>\d+)/restore/$', teams.restore_team_member,
+        name='sentry-restore-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/remove/$', teams.remove_pending_team_member,
+        name='sentry-remove-pending-team-member'),
+    url(r'^account/teams/(?P<team_slug>[\w_-]+)/members/pending/(?P<member_id>\d+)/reinvite/$', teams.reinvite_pending_team_member,
+        name='sentry-reinvite-pending-team-member'),
+    url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', teams.accept_invite,
+        name='sentry-accept-invite'),
+
+    # Projects
 
     url(r'^projects/$', projects.project_list, name='sentry-project-list'),
     url(r'^projects/new/$', projects.new_project, name='sentry-new-project'),
@@ -57,22 +79,6 @@ urlpatterns = patterns('',
         name='sentry-configure-project-plugin'),
     url(r'^projects/(?P<project_id>\d+)/remove/$', projects.remove_project,
         name='sentry-remove-project'),
-    url(r'^projects/(?P<project_id>\d+)/members/new/$', projects.new_project_member,
-        name='sentry-new-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/edit/$', projects.edit_project_member,
-        name='sentry-edit-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/remove/$', projects.remove_project_member,
-        name='sentry-remove-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/suspend/$', projects.suspend_project_member,
-        name='sentry-suspend-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/(?P<member_id>\d+)/restore/$', projects.restore_project_member,
-        name='sentry-restore-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/pending/(?P<member_id>\d+)/remove/$', projects.remove_pending_project_member,
-        name='sentry-remove-pending-project-member'),
-    url(r'^projects/(?P<project_id>\d+)/members/pending/(?P<member_id>\d+)/reinvite/$', projects.reinvite_pending_project_member,
-        name='sentry-reinvite-pending-project-member'),
-    url(r'^accept/(?P<member_id>\d+)/(?P<token>\w+)/$', projects.accept_invite,
-        name='sentry-accept-invite'),
 
     # Global
 
diff --git a/tests/base.py b/tests/base.py
index 413062046b..7ec8f3c22a 100644
--- a/tests/base.py
+++ b/tests/base.py
@@ -11,6 +11,7 @@ from sentry.utils.compat.db import connections
 
 
 from django.conf import settings as django_settings
+from django.core.cache import cache
 from django.core.management import call_command
 from django.core.urlresolvers import reverse
 from django.db import DEFAULT_DB_ALIAS
@@ -60,6 +61,10 @@ class BaseTestCase(object):
 
     Settings = Settings
 
+    def _pre_setup(self):
+        cache.clear()
+        super(BaseTestCase, self)._pre_setup()
+
     def _postWithKey(self, data, key=None):
         resp = self.client.post(reverse('sentry-api-store'), {
             'data': base64.b64encode(pickle.dumps(data)),
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index c91e0be907..a02359fb49 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -21,9 +21,10 @@ from tests.base import TestCase
 class BaseAPITest(TestCase):
     def setUp(self):
         self.user = User.objects.create(username='coreapi')
-        self.project = Project.objects.get(id=1)
-        self.pm = self.project.member_set.create(user=self.user)
-        self.pk = self.project.key_set.get(user=self.user)
+        self.project = Project.objects.create(owner=self.user, name='Foo', slug='bar')
+        self.pm = self.project.team.member_set.get_or_create(user=self.user)[0]
+        self.pk = self.project.key_set.get_or_create(user=self.user)[0]
+
 
 class GetSignatureTest(BaseAPITest):
     def test_valid_string(self):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 721b4e7b58..68d584458a 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -4,8 +4,8 @@ from __future__ import absolute_import
 
 
 from django.core import mail
-from sentry.models import Project, ProjectKey, Group, Event, \
-  MessageFilterValue, MessageCountByMinute, FilterValue, PendingProjectMember
+from sentry.models import Project, ProjectKey, Group, Event, Team, \
+  MessageFilterValue, MessageCountByMinute, FilterValue, PendingTeamMember
 
 from tests.base import TestCase
 
@@ -53,21 +53,22 @@ class ProjectKeyTest(TestCase):
             self.assertEquals(key.get_dsn(), 'http://public:secret@example.com:81/1')
 
 
-class PendingProjectMemberTest(TestCase):
+class PendingTeamMemberTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
     def test_token_generation(self):
-        member = PendingProjectMember(id=1, project_id=1, email='foo@example.com')
+        member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
         with self.Settings(SENTRY_KEY='a'):
             self.assertEquals(member.token, 'f3f2aa3e57f4b936dfd4f42c38db003e')
 
     def test_token_generation_unicode_key(self):
-        member = PendingProjectMember(id=1, project_id=1, email='foo@example.com')
+        member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
         with self.Settings(SENTRY_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
             self.assertEquals(member.token, 'df41d9dfd4ba25d745321e654e15b5d0')
 
     def test_send_invite_email(self):
-        member = PendingProjectMember(id=1, project_id=1, email='foo@example.com')
+        team = Team(name='test', slug='test', id=1)
+        member = PendingTeamMember(id=1, team=team, email='foo@example.com')
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
             member.send_invite_email()
 
diff --git a/tests/sentry/signals/tests.py b/tests/sentry/signals/tests.py
index ba209be0dd..df588223be 100644
--- a/tests/sentry/signals/tests.py
+++ b/tests/sentry/signals/tests.py
@@ -3,13 +3,18 @@
 from __future__ import absolute_import
 
 from django.contrib.auth.models import User
-from sentry.models import Project, MEMBER_OWNER
+from sentry.models import Project, Team, MEMBER_OWNER
 
 from tests.base import TestCase
 
 
 class SentrySignalTest(TestCase):
-    def test_create_project_member_for_owner(self):
+    def test_create_team_for_project(self):
         user = User.objects.create(username='foo')
-        project = Project.objects.create(name='foo', owner=user)
-        self.assertTrue(project.member_set.filter(user=user, type=MEMBER_OWNER).exists())
+        project = Project.objects.create(name='foo', owner=user, slug='foo')
+        self.assertNotEquals(project.team, None)
+
+    def test_create_team_member_for_owner(self):
+        user = User.objects.create(username='foo')
+        team = Team.objects.create(name='foo', slug='foo', owner=user)
+        self.assertTrue(team.member_set.filter(user=user, type=MEMBER_OWNER).exists())
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 1d659283c5..f4df5671f0 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -42,8 +42,9 @@ class NewProjectTest(TestCase):
         project = project.get()
 
         self.assertEquals(project.owner, self.user)
+        self.assertNotEquals(project.team, None)
 
-        member_set = list(project.member_set.all())
+        member_set = list(project.team.member_set.all())
 
         self.assertEquals(len(member_set), 1)
         member = member_set[0]
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index ba1c7bea4c..374abece0c 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -8,8 +8,8 @@ from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
-from sentry.models import Group, Project, ProjectMember, \
-  MEMBER_OWNER, MEMBER_USER
+from sentry.models import Group, Project, TeamMember, \
+  MEMBER_OWNER, MEMBER_USER, Team
 from sentry.web.helpers import get_login_url
 
 from tests.base import TestCase
@@ -43,8 +43,9 @@ class SentryViewsTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateNotUsed(resp, 'sentry/dashboard.html')
 
-        # requires two projects to show dashboard
+        # requires at least two projects to show dashboard
         Project.objects.create(name='foo', owner=self.user)
+        Project.objects.create(name='bar', owner=self.user).team
         resp = self.client.get(reverse('sentry'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/dashboard.html')
@@ -168,18 +169,19 @@ class ViewPermissionTest(TestCase):
         self.user4 = User(username="owner", email="owner@localhost")
         self.user4.set_password('owner')
         self.user4.save()
-        self.pm = ProjectMember.objects.create(
-            user_id=2,
-            project_id=1,
+        self.team = Team.objects.create(owner=self.user4, name='foo')
+        self.project = Project.objects.get(id=1)
+        self.project.update(public=False, team=self.team)
+        self.tm = TeamMember.objects.get_or_create(
+            user=self.user2,
+            team=self.team,
             type=MEMBER_USER,
-        )
-        self.pm = ProjectMember.objects.create(
-            user_id=4,
-            project_id=1,
+        )[0]
+        TeamMember.objects.get_or_create(
+            user=self.user4,
+            team=self.team,
             type=MEMBER_OWNER,
-        )
-        self.project = Project.objects.get(id=1)
-        self.project.update(public=False)
+        )[0]
 
     def _assertPerm(self, path, template, account=None, want=True):
         """
@@ -242,9 +244,9 @@ class ViewPermissionTest(TestCase):
             self._assertPerm(path, template, 'nobody', False)
             self._assertPerm(path, template, 'member', False)
 
-    def test_new_project_member(self):
-        path = reverse('sentry-new-project-member', kwargs={'project_id': 1})
-        template = 'sentry/projects/members/new.html'
+    def test_new_team_member(self):
+        path = reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
+        template = 'sentry/teams/members/new.html'
 
         self._assertPerm(path, template, 'admin')
         self._assertPerm(path, template, 'owner')
@@ -252,9 +254,9 @@ class ViewPermissionTest(TestCase):
         self._assertPerm(path, template, 'nobody', False)
         self._assertPerm(path, template, 'member', False)
 
-    def test_edit_project_member(self):
-        path = reverse('sentry-edit-project-member', kwargs={'project_id': 1, 'member_id': 1})
-        template = 'sentry/projects/members/edit.html'
+    def test_edit_team_member(self):
+        path = reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
+        template = 'sentry/teams/members/edit.html'
 
         self._assertPerm(path, template, 'admin')
         self._assertPerm(path, template, 'owner')
@@ -262,9 +264,9 @@ class ViewPermissionTest(TestCase):
         self._assertPerm(path, template, 'nobody', False)
         self._assertPerm(path, template, 'member', False)
 
-    def test_remove_project_member(self):
-        path = reverse('sentry-remove-project-member', kwargs={'project_id': 1, 'member_id': 1})
-        template = 'sentry/projects/members/remove.html'
+    def test_remove_team_member(self):
+        path = reverse('sentry-remove-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
+        template = 'sentry/teams/members/remove.html'
 
         self._assertPerm(path, template, 'admin')
         self._assertPerm(path, template, 'owner')
