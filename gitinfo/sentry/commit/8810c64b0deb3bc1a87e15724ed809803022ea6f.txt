commit 8810c64b0deb3bc1a87e15724ed809803022ea6f
Author: josh <josh@jrl.ninja>
Date:   Fri Nov 1 10:31:22 2019 -0700

    py3(django): compatibility with Django 1.9 (#15323)

diff --git a/src/sentry/new_migrations/monkey/__init__.py b/src/sentry/new_migrations/monkey/__init__.py
index 3232543ddc..0be02c5d1e 100644
--- a/src/sentry/new_migrations/monkey/__init__.py
+++ b/src/sentry/new_migrations/monkey/__init__.py
@@ -7,7 +7,7 @@ from sentry.new_migrations.monkey.writer import SENTRY_MIGRATION_TEMPLATE
 
 from django.db.migrations import migration, executor, writer
 
-LAST_VERIFIED_DJANGO_VERSION = (1, 8)
+LAST_VERIFIED_DJANGO_VERSION = (1, 9)
 CHECK_MESSAGE = """Looks like you're trying to upgrade Django! Since we monkeypatch
 the Django migration library in several places, please verify that we have the latest
 code, and that the monkeypatching still works as expected. Currently the main things
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index 3e83720c1b..bbbc263b06 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -115,7 +115,7 @@ class ReleaseActivityEmail(ActivityEmail):
         users = list(
             User.objects.filter(
                 emails__is_verified=True,
-                sentry_orgmember_set__teams=Team.objects.filter(
+                sentry_orgmember_set__teams__in=Team.objects.filter(
                     id__in=ProjectTeam.objects.filter(project__in=self.projects).values_list(
                         "team_id", flat=True
                     )
diff --git a/src/sentry/templatetags/sentry_assets.py b/src/sentry/templatetags/sentry_assets.py
index 4f4847090d..fe7f3b0948 100644
--- a/src/sentry/templatetags/sentry_assets.py
+++ b/src/sentry/templatetags/sentry_assets.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from django.conf import settings
 from django.template import Library
+from django.utils.safestring import mark_safe
 
 from sentry import options
 from sentry.utils.assets import get_asset_url
@@ -56,4 +57,4 @@ def locale_js_include(context):
         return ""
 
     href = get_asset_url("sentry", "dist/locale/" + lang_code + ".js")
-    return u'<script src="{0}"{1}></script>'.format(href, crossorigin())
+    return mark_safe('<script src="{0}"{1}></script>'.format(href, crossorigin()))
diff --git a/src/sentry/templatetags/sentry_avatars.py b/src/sentry/templatetags/sentry_avatars.py
index dd38a5bb5a..2607c5e334 100644
--- a/src/sentry/templatetags/sentry_avatars.py
+++ b/src/sentry/templatetags/sentry_avatars.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from django import template
 from django.conf import settings
 from django.core.urlresolvers import reverse
+from django.utils.safestring import mark_safe
 from six.moves.urllib.parse import urlencode
 
 from sentry.models import User, UserAvatar
@@ -21,7 +22,7 @@ def gravatar_url(context, email, size, default="mm"):
 
 @register.simple_tag(takes_context=True)
 def letter_avatar_svg(context, display_name, identifier, size=None):
-    return get_letter_avatar(display_name, identifier, size=size)
+    return mark_safe(get_letter_avatar(display_name, identifier, size=size))
 
 
 @register.simple_tag(takes_context=True)
@@ -40,7 +41,7 @@ def profile_photo_url(context, user_id, size=None):
 # than 1-2 avatars. It will make a request for every user!
 @register.simple_tag(takes_context=True)
 def email_avatar(context, display_name, identifier, size=None, try_gravatar=True):
-    return get_email_avatar(display_name, identifier, size, try_gravatar)
+    return mark_safe(get_email_avatar(display_name, identifier, size, try_gravatar))
 
 
 @register.inclusion_tag("sentry/partial/avatar.html")
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index 4191852202..49bf0137aa 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -51,7 +51,7 @@ def _get_frame_paths(event):
 def _get_commits(releases):
     return list(
         Commit.objects.filter(
-            releasecommit=ReleaseCommit.objects.filter(release__in=releases)
+            releasecommit__in=ReleaseCommit.objects.filter(release__in=releases)
         ).select_related("author")
     )
 
diff --git a/tests/acceptance/test_organization_developer_settings.py b/tests/acceptance/test_organization_developer_settings.py
index ee47f3756d..0d4e9fd5a1 100644
--- a/tests/acceptance/test_organization_developer_settings.py
+++ b/tests/acceptance/test_organization_developer_settings.py
@@ -35,9 +35,7 @@ class OrganizationDeveloperSettingsNewAcceptanceTest(AcceptanceTestCase):
 
         self.browser.click('[aria-label="Save Changes"]')
 
-        self.browser.wait_until(".ref-success")
-
-        assert self.browser.find_element_by_xpath("//div[contains(text(), 'Client ID')]")
+        self.browser.wait_until(xpath="//div[contains(text(), 'Client ID')]", timeout=3)
 
     def test_create_new_internal_integration(self):
         self.load_page(self.org_developer_settings_path)
@@ -48,9 +46,7 @@ class OrganizationDeveloperSettingsNewAcceptanceTest(AcceptanceTestCase):
 
         self.browser.click('[aria-label="Save Changes"]')
 
-        self.browser.wait_until(".ref-success")
-
-        assert self.browser.find_element_by_xpath("//button//span[contains(text(), 'New Token')]")
+        self.browser.wait_until(xpath="//button//span[contains(text(), 'New Token')]", timeout=3)
 
 
 class OrganizationDeveloperSettingsEditAcceptanceTest(AcceptanceTestCase):
diff --git a/tests/integration/test_sso.py b/tests/integration/test_sso.py
index 2d06486b37..9d25276f8a 100644
--- a/tests/integration/test_sso.py
+++ b/tests/integration/test_sso.py
@@ -24,19 +24,17 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.login_as(user)
 
         path = u"/{}/".format(organization.slug)
-        redirect_uri = u"http://testserver/auth/login/{}/".format(organization.slug)
+        redirect_uri = u"/auth/login/{}/".format(organization.slug)
 
         # we should be redirecting the user to the authentication form as they
         # haven't verified this specific organization
         resp = self.client.get(path)
-        assert resp.status_code == 302
-        assert resp["Location"] == redirect_uri
+        self.assertRedirects(resp, redirect_uri)
 
         # superuser should still require SSO as they're a member of the org
         user.update(is_superuser=True)
         resp = self.client.get(path)
-        assert resp.status_code == 302
-        assert resp["Location"] == redirect_uri
+        self.assertRedirects(resp, redirect_uri)
 
         # XXX(dcramer): using internal API as exposing a request object is hard
         self.session[SSO_SESSION_KEY] = six.text_type(organization.id)
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 800d8f5f8c..5ce63d88d5 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import mock
 import six
 
+import django
 from django.core.urlresolvers import reverse
 
 from sentry.constants import RESERVED_PROJECT_SLUGS
@@ -80,10 +81,13 @@ class ProjectDetailsTest(APITestCase):
             project.organization.slug,
             "foobar",
         )
-        assert response["Location"] == "http://testserver/api/0/projects/%s/%s/" % (
-            project.organization.slug,
-            "foobar",
-        )
+        redirect_path = "/api/0/projects/%s/%s/" % (project.organization.slug, "foobar")
+        if django.VERSION < (1, 9):
+            # Django 1.9 no longer forcefully rewrites relative redirects to absolute URIs because of RFC 7231.
+            redirect_path = "http://testserver" + redirect_path
+        # XXX: AttributeError: 'Response' object has no attribute 'url'
+        # (this is with self.assertRedirects(response, ...))
+        assert response["Location"] == redirect_path
 
 
 class ProjectUpdateTest(APITestCase):
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index 63b8a10695..d291b24e7f 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -146,20 +146,24 @@ class AuthLoginTest(TestCase):
         self.client.get(self.path + "?next=" + urlquote(next))
 
         resp = self.client.post(
-            self.path, {"username": self.user.username, "password": "admin", "op": "login"}
+            self.path,
+            {"username": self.user.username, "password": "admin", "op": "login"},
+            follow=False,
         )
-        assert resp.status_code == 302
-        assert next not in resp["Location"]
-        assert resp["Location"] == "http://testserver/auth/login/"
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(
+            self.path,
+            {"username": self.user.username, "password": "admin", "op": "login"},
+            follow=True,
+        )
+        self.assertRedirects(resp, "/organizations/new/")
 
     def test_redirects_already_authed_non_superuser(self):
         self.user.update(is_superuser=False)
         self.login_as(self.user)
         with self.feature("organizations:create"):
             resp = self.client.get(self.path)
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver/organizations/new/"
+            self.assertRedirects(resp, "/organizations/new/")
 
     def test_doesnt_redirect_already_authed_superuser(self):
         self.login_as(self.user, superuser=False)
diff --git a/tests/sentry/web/frontend/test_auth_logout.py b/tests/sentry/web/frontend/test_auth_logout.py
index bc15c0e5d4..61dd159665 100644
--- a/tests/sentry/web/frontend/test_auth_logout.py
+++ b/tests/sentry/web/frontend/test_auth_logout.py
@@ -44,6 +44,4 @@ class AuthLogoutTest(TestCase):
         self.client.post(self.path + "?next=" + quote(next))
 
         resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        assert next not in resp["Location"]
-        assert resp["Location"] == "http://testserver/auth/login/"
+        self.assertRedirects(resp, "/auth/login/")
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 3c39bd7efe..267e8dbd0a 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -94,10 +94,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         with self.settings(
             TERMS_URL="https://example.com/terms", PRIVACY_URL="https://example.com/privacy"
         ):
-            resp = self.client.post(path, {"op": "newuser"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+            resp = self.client.post(path, {"op": "newuser"}, follow=False)
+            self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+            resp = self.client.post(path, {"op": "newuser"}, follow=True)
+            self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
 
@@ -131,10 +131,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, "sentry/auth-confirm-link.html")
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {"op": "confirm"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "confirm"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "confirm"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
         assert user == auth_identity.user
@@ -156,10 +156,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert self.provider.TEMPLATE in resp.content.decode("utf-8")
 
         path = reverse("sentry-auth-sso")
-        resp = self.client.post(path, {"email": "foo@example.com"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"email": "foo@example.com"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"email": "foo@example.com"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
     def test_flow_as_unauthenticated_existing_matched_user_no_merge(self):
         auth_provider = AuthProvider.objects.create(
@@ -180,10 +180,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert resp.context["existing_user"] == user
         assert resp.context["login_form"]
 
-        resp = self.client.post(path, {"op": "newuser"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "newuser"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "newuser"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
         new_user = auth_identity.user
@@ -230,10 +230,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, "sentry/auth-confirm-link.html")
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {"op": "confirm"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "confirm"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "confirm"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
 
@@ -272,10 +272,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, "sentry/auth-confirm-link.html")
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {"op": "confirm"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "confirm"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "confirm"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
 
@@ -314,10 +314,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, "sentry/auth-confirm-link.html")
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {"op": "confirm"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "confirm"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "confirm"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
 
@@ -360,10 +360,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         self.assertTemplateUsed(resp, "sentry/auth-confirm-link.html")
         assert resp.status_code == 200
 
-        resp = self.client.post(path, {"op": "confirm"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "confirm"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "confirm"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(id=auth_identity.id)
 
@@ -406,10 +406,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         assert not resp.context["existing_user"]
         assert resp.context["login_form"]
 
-        resp = self.client.post(path, {"op": "newuser"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"op": "newuser"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"op": "newuser"}, follow=True)
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         auth_identity = AuthIdentity.objects.get(id=auth_identity.id)
 
@@ -459,12 +459,14 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         # we're suggesting the identity changed (as if the Google ident was
         # updated to be something else)
         resp = self.client.post(
-            path, {"email": "bar@example.com", "id": "123", "email_verified": "1"}
+            path, {"email": "bar@example.com", "id": "123", "email_verified": "1"}, follow=False
         )
-
         # there should be no prompt as we auto merge the identity
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(
+            path, {"email": "bar@example.com", "id": "123", "email_verified": "1"}, follow=True
+        )
+        self.assertRedirects(resp, "/auth/login/foo/")
 
         auth_identity = AuthIdentity.objects.get(id=auth_identity.id)
 
@@ -616,10 +618,10 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
 
         # we're suggesting the identity changed (as if the Google ident was
         # updated to be something else)
-        resp = self.client.post(path, {"email": "adfadsf@example.com"})
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
+        resp = self.client.post(path, {"email": "adfadsf@example.com"}, follow=False)
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(path, {"email": "adfadsf@example.com"}, follow=True)
+        self.assertRedirects(resp, "/auth/login/foo/")
 
         assert not AuthIdentity.objects.filter(id=identity1.id).exists()
 
@@ -653,12 +655,14 @@ class OrganizationAuthLoginTest(AuthProviderTestCase):
         path = reverse("sentry-auth-sso")
 
         resp = self.client.post(
-            path, {"email": "foo@new-domain.com", "legacy_email": "foo@example.com"}
+            path, {"email": "foo@new-domain.com", "legacy_email": "foo@example.com"}, follow=False
+        )
+        self.assertRedirects(resp, reverse("sentry-login"), target_status_code=302)
+        resp = self.client.post(
+            path, {"email": "foo@new-domain.com", "legacy_email": "foo@example.com"}, follow=True
         )
+        self.assertRedirects(resp, "/organizations/foo/issues/")
 
         # Ensure the ident was migrated from the legacy identity
         updated_ident = AuthIdentity.objects.get(id=user_ident.id)
         assert updated_ident.ident == "foo@new-domain.com"
-
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver" + reverse("sentry-login")
diff --git a/tests/sentry/web/frontend/test_home.py b/tests/sentry/web/frontend/test_home.py
index a57212354e..ffe53a2705 100644
--- a/tests/sentry/web/frontend/test_home.py
+++ b/tests/sentry/web/frontend/test_home.py
@@ -14,8 +14,7 @@ class HomeTest(TestCase):
     def test_redirects_to_login(self):
         resp = self.client.get(self.path)
 
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver/auth/login/"
+        self.assertRedirects(resp, "/auth/login/")
 
     def test_redirects_to_create_org(self):
         self.login_as(self.user)
@@ -23,8 +22,7 @@ class HomeTest(TestCase):
         with self.feature("organizations:create"):
             resp = self.client.get(self.path)
 
-        assert resp.status_code == 302
-        assert resp["Location"] == "http://testserver/organizations/new/"
+        self.assertRedirects(resp, "/organizations/new/")
 
     def test_shows_no_access(self):
         self.login_as(self.user)
@@ -42,5 +40,4 @@ class HomeTest(TestCase):
         with self.feature("organizations:create"):
             resp = self.client.get(self.path)
 
-        assert resp.status_code == 302
-        assert resp["Location"] == u"http://testserver/organizations/{}/issues/".format(org.slug)
+        self.assertRedirects(resp, u"/organizations/{}/issues/".format(org.slug))
diff --git a/tests/sentry/web/frontend/test_oauth_authorize.py b/tests/sentry/web/frontend/test_oauth_authorize.py
index efe42679c6..0228f64cd4 100644
--- a/tests/sentry/web/frontend/test_oauth_authorize.py
+++ b/tests/sentry/web/frontend/test_oauth_authorize.py
@@ -233,8 +233,7 @@ class OAuthAuthorizeCodeTest(TestCase):
         resp = self.client.post(
             full_path, {"username": self.user.username, "password": "admin", "op": "login"}
         )
-        assert resp.status_code == 302
-        assert resp.get("Location") == u"http://testserver{}".format(full_path)
+        self.assertRedirects(resp, full_path)
 
         resp = self.client.get(full_path)
         self.assertTemplateUsed("sentry/oauth-authorize.html")
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index 4561b5fa17..18af7630bc 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -107,8 +107,7 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
             path = reverse("sentry-auth-sso")
             resp = self.client.post(path, {"email": user.email})
 
-        assert resp.status_code == 302
-        assert resp["Location"] == u"http://testserver{}".format(configure_path)
+        self.assertRedirects(resp, configure_path)
 
         auth_provider = AuthProvider.objects.get(organization=organization, provider="dummy")
         auth_identity = AuthIdentity.objects.get(auth_provider=auth_provider)
diff --git a/tests/sentry/web/frontend/test_project_event.py b/tests/sentry/web/frontend/test_project_event.py
index 00fb517854..6f36b997be 100644
--- a/tests/sentry/web/frontend/test_project_event.py
+++ b/tests/sentry/web/frontend/test_project_event.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from django.core.urlresolvers import reverse
 from sentry.testutils import TestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import iso_format, before_now
-from sentry import options
 
 
 class ProjectEventTest(SnubaTestCase, TestCase):
@@ -27,12 +26,11 @@ class ProjectEventTest(SnubaTestCase, TestCase):
                 args=[self.org.slug, self.project.slug, self.event.event_id],
             )
         )
-        assert resp.status_code == 302
-        assert resp["Location"] == "{}/organizations/{}/issues/{}/events/{}/".format(
-            options.get("system.url-prefix"),
-            self.org.slug,
-            self.event.group_id,
-            self.event.event_id,
+        self.assertRedirects(
+            resp,
+            "/organizations/{}/issues/{}/events/{}/".format(
+                self.org.slug, self.event.group_id, self.event.event_id
+            ),
         )
 
     def test_event_not_found(self):
diff --git a/tests/sentry/web/frontend/test_react_page.py b/tests/sentry/web/frontend/test_react_page.py
index 0c72a2cff2..5a9e127bb7 100644
--- a/tests/sentry/web/frontend/test_react_page.py
+++ b/tests/sentry/web/frontend/test_react_page.py
@@ -13,10 +13,7 @@ class ReactPageViewTest(TestCase):
         path = reverse("sentry-organization-home", args=[org.slug])
         resp = self.client.get(path)
 
-        assert resp.status_code == 302
-        assert resp["Location"] == u"http://testserver{}".format(
-            reverse("sentry-auth-organization", args=[org.slug])
-        )
+        self.assertRedirects(resp, reverse("sentry-auth-organization", args=[org.slug]))
         assert resp["X-Robots-Tag"] == "noindex, nofollow"
 
     def test_superuser_can_load(self):
@@ -42,10 +39,7 @@ class ReactPageViewTest(TestCase):
 
         resp = self.client.get(path)
 
-        assert resp.status_code == 302
-        assert resp["Location"] == u"http://testserver{}".format(
-            reverse("sentry-auth-organization", args=[org.slug])
-        )
+        self.assertRedirects(resp, reverse("sentry-auth-organization", args=[org.slug]))
 
         # ensure we dont redirect to auth if its not a valid org
         path = reverse("sentry-organization-home", args=["foobar"])
@@ -53,9 +47,7 @@ class ReactPageViewTest(TestCase):
         resp = self.client.get(path)
 
         assert resp.status_code == 302
-        assert resp["Location"] != u"http://testserver{}".format(
-            reverse("sentry-auth-organization", args=[org.slug])
-        )
+        assert resp["Location"] != reverse("sentry-auth-organization", args=[org.slug])
 
         # ensure we dont redirect with valid membership
         path = reverse("sentry-organization-home", args=[org.slug])
