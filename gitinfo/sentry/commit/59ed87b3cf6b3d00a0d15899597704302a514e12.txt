commit 59ed87b3cf6b3d00a0d15899597704302a514e12
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Feb 6 08:32:54 2020 +0100

    ref(ui): Improvements in the thread selector component (#16717)

diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 2b448e9a59..a18bd3b459 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -32,7 +32,7 @@ import SentryTypes from 'app/sentryTypes';
 import SpansInterface from 'app/components/events/interfaces/spans';
 import StacktraceInterface from 'app/components/events/interfaces/stacktrace';
 import TemplateInterface from 'app/components/events/interfaces/template';
-import ThreadsInterface from 'app/components/events/interfaces/threads';
+import ThreadsInterface from 'app/components/events/interfaces/threads/threads';
 import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 15adbbc52d..0842b10133 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -1,8 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from '@emotion/styled';
+
 import Tooltip from 'app/components/tooltip';
 import {t} from 'app/locale';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
+import space from 'app/styles/space';
 
 class CrashHeader extends React.Component {
   static propTypes = {
@@ -88,9 +91,16 @@ class CrashHeader extends React.Component {
     const {title, beforeTitle, hideGuide, stackView, stackType, newestFirst} = this.props;
 
     let titleNode = (
-      <h3 className="pull-left">
+      <StyledH3
+        className="pull-left"
+        style={{
+          marginBottom: 0,
+          maxWidth: '100%',
+          whiteSpace: 'nowrap',
+        }}
+      >
         {title}
-        <small style={{marginLeft: 5}}>
+        <small>
           (
           <Tooltip title={t('Toggle stacktrace order')}>
             <a onClick={this.handleToggleOrder} style={{borderBottom: '1px dotted #aaa'}}>
@@ -99,7 +109,7 @@ class CrashHeader extends React.Component {
           </Tooltip>
           )
         </small>
-      </h3>
+      </StyledH3>
     );
 
     if (!hideGuide) {
@@ -111,58 +121,120 @@ class CrashHeader extends React.Component {
     }
 
     return (
-      <div className="crash-title">
-        {beforeTitle}
-        {titleNode}
-        <div className="btn-group" style={{marginLeft: 10}}>
-          {this.hasSystemFrames() && (
+      <Wrapper className="crash-title">
+        <TitleInfo>
+          {beforeTitle}
+          {titleNode}
+        </TitleInfo>
+        <ButtonGroupWrapper>
+          <ButtonGroup className="btn-group">
+            {this.hasSystemFrames() && (
+              <a
+                className={
+                  (stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'
+                }
+                onClick={() => this.setStackView('app')}
+              >
+                {t('App Only')}
+              </a>
+            )}
             <a
               className={
-                (stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'
+                (stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'
               }
-              onClick={() => this.setStackView('app')}
+              onClick={() => this.setStackView('full')}
             >
-              {t('App Only')}
+              {t('Full')}
             </a>
-          )}
-          <a
-            className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'}
-            onClick={() => this.setStackView('full')}
-          >
-            {t('Full')}
-          </a>
-          <a
-            className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'}
-            onClick={() => this.setStackView('raw')}
-          >
-            {t('Raw')}
-          </a>
-        </div>
-        <div className="btn-group">
-          {this.hasMinified() && [
             <a
-              key="original"
               className={
-                (stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'
+                (stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'
               }
-              onClick={() => this.setStackType('original')}
+              onClick={() => this.setStackView('raw')}
             >
-              {this.getOriginalButtonLabel()}
-            </a>,
-            <a
-              key="minified"
-              className={
-                (stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'
-              }
-              onClick={() => this.setStackType('minified')}
-            >
-              {this.getMinifiedButtonLabel()}
-            </a>,
-          ]}
-        </div>
-      </div>
+              {t('Raw')}
+            </a>
+          </ButtonGroup>
+          {this.hasMinified() && (
+            <ButtonGroup className="btn-group">
+              {[
+                <a
+                  key="original"
+                  className={
+                    (stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'
+                  }
+                  onClick={() => this.setStackType('original')}
+                >
+                  {this.getOriginalButtonLabel()}
+                </a>,
+                <a
+                  key="minified"
+                  className={
+                    (stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'
+                  }
+                  onClick={() => this.setStackType('minified')}
+                >
+                  {this.getMinifiedButtonLabel()}
+                </a>,
+              ]}
+            </ButtonGroup>
+          )}
+        </ButtonGroupWrapper>
+      </Wrapper>
     );
   }
 }
 
 export default CrashHeader;
+
+const Wrapper = styled('div')`
+  display: flex;
+  margin-bottom: ${space(3)};
+  flex-direction: column;
+  flex-wrap: wrap;
+  @media (min-width: ${props => props.theme.breakpoints[2]}) {
+    align-items: center;
+    flex-direction: row;
+  }
+`;
+
+const TitleInfo = styled('div')`
+  display: flex;
+  flex: 1;
+  max-width: 100%;
+  flex-direction: column;
+  @media (min-width: ${props => props.theme.breakpoints[2]}) {
+    flex-direction: row;
+    flex-shrink: 2;
+    align-items: center;
+  }
+`;
+
+const ButtonGroup = styled('div')`
+  padding-top: ${space(1.5)};
+  padding-bottom: ${space(1.5)};
+`;
+
+const ButtonGroupWrapper = styled('div')`
+  display: flex;
+  flex-direction: column;
+  flex-wrap: wrap;
+  margin-right: -${space(1)};
+  > .btn-group {
+    padding-right: ${space(1)};
+  }
+  @media (min-width: ${props => props.theme.breakpoints[1]}) {
+    flex-direction: row;
+  }
+`;
+
+const StyledH3 = styled('h3')`
+  > small {
+    margin-right: ${space(1)};
+  }
+  @media (min-width: ${props => props.theme.breakpoints[2]}) {
+    > small {
+      margin-left: ${space(1)};
+    }
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx
new file mode 100644
index 0000000000..227df274c4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx
@@ -0,0 +1,51 @@
+import {Thread, Frame} from 'app/types/events';
+import {Event} from 'app/types';
+import {trimPackage} from 'app/components/events/interfaces/frame';
+
+import getThreadStacktrace from './getThreadStacktrace';
+import getRelevantFrame from './getRelevantFrame';
+import trimFilename from './trimFilename';
+
+// TODO(i18n): add traslations here
+const NOT_FOUND_FRAME = '<unknown>';
+
+type ThreadInfo = {
+  label: string;
+  filename?: string;
+};
+
+function filterThreadInfo(thread: Thread, event: Event, simplified: boolean): ThreadInfo {
+  const stacktrace = getThreadStacktrace(thread, event, simplified);
+  const threadInfo: ThreadInfo = {
+    label: NOT_FOUND_FRAME,
+  };
+
+  if (!stacktrace) {
+    return threadInfo;
+  }
+
+  const relevantFrame: Frame = getRelevantFrame(stacktrace);
+
+  if (relevantFrame.filename) {
+    threadInfo.filename = trimFilename(relevantFrame.filename);
+  }
+
+  if (relevantFrame.function) {
+    threadInfo.label = relevantFrame.function;
+    return threadInfo;
+  }
+
+  if (relevantFrame.package) {
+    threadInfo.label = trimPackage(relevantFrame.package);
+    return threadInfo;
+  }
+
+  if (relevantFrame.module) {
+    threadInfo.label = relevantFrame.module;
+    return threadInfo;
+  }
+
+  return threadInfo;
+}
+
+export default filterThreadInfo;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/getRelevantFrame.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/getRelevantFrame.tsx
new file mode 100644
index 0000000000..2f493bdb82
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/getRelevantFrame.tsx
@@ -0,0 +1,18 @@
+import {Frame} from 'app/types/events';
+
+// TODO(ts): define correct stacktrace type
+function getRelevantFrame(stacktrace: any): Frame {
+  if (!stacktrace.hasSystemFrames) {
+    return stacktrace.frames[stacktrace.frames.length - 1];
+  }
+  for (let i = stacktrace.frames.length - 1; i >= 0; i--) {
+    const frame = stacktrace.frames[i];
+    if (frame.inApp) {
+      return frame;
+    }
+  }
+  // this should not happen
+  return stacktrace.frames[stacktrace.frames.length - 1];
+}
+
+export default getRelevantFrame;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadException.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadException.tsx
new file mode 100644
index 0000000000..e7b5614c76
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadException.tsx
@@ -0,0 +1,23 @@
+import {Thread} from 'app/types/events';
+import {Event, EntryTypeData} from 'app/types';
+
+function getThreadException(thread: Thread, event: Event): EntryTypeData | undefined {
+  if (!event || !event.entries) {
+    return undefined;
+  }
+
+  for (const entry of event.entries) {
+    if (entry.type !== 'exception') {
+      continue;
+    }
+    for (const exc of entry.data.values) {
+      if (exc.threadId === thread.id) {
+        return entry.data;
+      }
+    }
+  }
+
+  return undefined;
+}
+
+export default getThreadException;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadStacktrace.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadStacktrace.tsx
new file mode 100644
index 0000000000..331a526c71
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/getThreadStacktrace.tsx
@@ -0,0 +1,30 @@
+import {Thread} from 'app/types/events';
+import {Event} from 'app/types';
+
+import getThreadException from './getThreadException';
+
+// TODO(ts): define raw type
+function getThreadStacktrace(thread: Thread, event: Event, raw?: any) {
+  const exc = getThreadException(thread, event);
+  if (exc) {
+    let rv = undefined;
+    for (const singleExc of exc.values) {
+      if (singleExc.threadId === thread.id) {
+        rv = (raw && singleExc.rawStacktrace) || singleExc.stacktrace;
+      }
+    }
+    return rv;
+  }
+
+  if (raw && thread.rawStacktrace) {
+    return thread.rawStacktrace;
+  }
+
+  if (thread.stacktrace) {
+    return thread.stacktrace;
+  }
+
+  return undefined;
+}
+
+export default getThreadStacktrace;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
similarity index 62%
rename from src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
index 9edd396d40..87f65f8033 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threads.jsx
@@ -5,114 +5,17 @@ import {t} from 'app/locale';
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
 import {isStacktraceNewestFirst} from 'app/components/events/interfaces/stacktrace';
-import {defined} from 'app/utils';
-import DropdownLink from 'app/components/dropdownLink';
-import MenuItem from 'app/components/menuItem';
-import {trimPackage} from 'app/components/events/interfaces/frame';
 import CrashHeader from 'app/components/events/interfaces/crashHeader';
 import CrashContent from 'app/components/events/interfaces/crashContent';
 import Pills from 'app/components/pills';
 import Pill from 'app/components/pill';
 
-function trimFilename(fn) {
-  const pieces = fn.split(/\//g);
-  return pieces[pieces.length - 1];
-}
-
-function findRelevantFrame(stacktrace) {
-  if (!stacktrace.hasSystemFrames) {
-    return stacktrace.frames[stacktrace.frames.length - 1];
-  }
-  for (let i = stacktrace.frames.length - 1; i >= 0; i--) {
-    const frame = stacktrace.frames[i];
-    if (frame.inApp) {
-      return frame;
-    }
-  }
-  // this should not happen
-  return stacktrace.frames[stacktrace.frames.length - 1];
-}
-
-function findThreadException(thread, event) {
-  for (const entry of event.entries) {
-    if (entry.type !== 'exception') {
-      continue;
-    }
-    for (const exc of entry.data.values) {
-      if (exc.threadId === thread.id) {
-        return entry.data;
-      }
-    }
-  }
-  return null;
-}
-
-function findThreadStacktrace(thread, event, raw) {
-  const exc = findThreadException(thread, event);
-  if (exc) {
-    let rv = null;
-    for (const singleExc of exc.values) {
-      if (singleExc.threadId === thread.id) {
-        rv = (raw && singleExc.rawStacktrace) || singleExc.stacktrace;
-      }
-    }
-    return rv;
-  }
-
-  if (raw && thread.rawStacktrace) {
-    return thread.rawStacktrace;
-  }
-
-  if (thread.stacktrace) {
-    return thread.stacktrace;
-  }
-
-  return null;
-}
-
-function getThreadTitle(thread, event, simplified) {
-  const stacktrace = findThreadStacktrace(thread, event, false);
-  const bits = ['Thread'];
-  if (defined(thread.name)) {
-    bits.push(` "${thread.name}"`);
-  }
-  if (defined(thread.id)) {
-    bits.push(' #' + thread.id);
-  }
-
-  if (!simplified) {
-    if (stacktrace) {
-      const frame = findRelevantFrame(stacktrace);
-      bits.push(' — ');
-      bits.push(
-        <em key="location">
-          {frame.filename
-            ? trimFilename(frame.filename)
-            : frame.package
-            ? trimPackage(frame.package)
-            : frame.module
-            ? frame.module
-            : '<unknown>'}
-        </em>
-      );
-    }
-
-    if (thread.crashed) {
-      const exc = findThreadException(thread, event);
-      bits.push(' — ');
-      bits.push(
-        <small key="crashed">
-          {exc ? `(crashed with ${exc.values[0].type})` : '(crashed)'}
-        </small>
-      );
-    }
-  }
-
-  return bits;
-}
+import ThreadsSelector from './threadsSelector';
+import getThreadStacktrace from './getThreadStacktrace';
+import getThreadException from './getThreadException';
 
 function getIntendedStackView(thread, event) {
-  const stacktrace = findThreadStacktrace(thread, event, false);
+  const stacktrace = getThreadStacktrace(thread, event, false);
   return stacktrace && stacktrace.hasSystemFrames ? 'app' : 'full';
 }
 
@@ -236,7 +139,7 @@ class ThreadsInterface extends React.Component {
   };
 
   getStacktrace = () => {
-    return findThreadStacktrace(
+    return getThreadStacktrace(
       this.state.activeThread,
       this.props.event,
       this.state.stackType !== 'original'
@@ -244,7 +147,7 @@ class ThreadsInterface extends React.Component {
   };
 
   getException = () => {
-    return findThreadException(this.state.activeThread, this.props.event);
+    return getThreadException(this.state.activeThread, this.props.event);
   };
 
   onSelectNewThread = thread => {
@@ -268,27 +171,6 @@ class ThreadsInterface extends React.Component {
 
     const threads = this.props.data.values || [];
 
-    const threadSelector = (
-      <div className="pull-left btn-group">
-        <DropdownLink
-          btnGroup
-          caret
-          className="btn btn-default btn-sm"
-          title={getThreadTitle(activeThread, this.props.event, true)}
-        >
-          {threads.map((thread, idx) => {
-            return (
-              <MenuItem key={idx} noAnchor>
-                <a onClick={this.onSelectNewThread.bind(this, thread)}>
-                  {getThreadTitle(thread, this.props.event, false)}
-                </a>
-              </MenuItem>
-            );
-          })}
-        </DropdownLink>
-      </div>
-    );
-
     const titleProps = {
       platform: evt.platform,
       stacktrace,
@@ -303,7 +185,14 @@ class ThreadsInterface extends React.Component {
       threads.length > 1 ? (
         <CrashHeader
           title={null}
-          beforeTitle={threadSelector}
+          beforeTitle={
+            <ThreadsSelector
+              threads={threads}
+              activeThread={activeThread}
+              event={this.props.event}
+              onChange={this.onSelectNewThread}
+            />
+          }
           thread={activeThread}
           exception={exception}
           {...titleProps}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelector.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelector.tsx
new file mode 100644
index 0000000000..5f02f7640b
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelector.tsx
@@ -0,0 +1,118 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {ClassNames} from '@emotion/core';
+
+import {Thread} from 'app/types/events';
+import {Event, EntryTypeData} from 'app/types';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+import filterThreadInfo from './filterThreadInfo';
+import getThreadException from './getThreadException';
+import ThreadsSelectorOption from './threadsSelectorOption';
+import ThreadsSelectorSelectedOption from './threadsSelectorSelectedOption';
+
+type Props = {
+  threads: Array<Thread>;
+  activeThread: Thread;
+  event: Event;
+  onChange?: (thread: Thread) => void;
+};
+
+const DROPDOWN_MAX_HEIGHT = 400;
+
+const ThreadsSelector = ({threads, event, activeThread, onChange}: Props) => {
+  const getDropDownItem = (thread: Thread) => {
+    const threadInfo = filterThreadInfo(thread, event, false);
+
+    const dropDownValue = `#${thread.id}: ${thread.name} ${threadInfo.label} ${threadInfo.filename}`;
+    let crashedInfo: undefined | EntryTypeData;
+
+    if (thread.crashed) {
+      crashedInfo = getThreadException(thread, event);
+    }
+
+    return {
+      value: dropDownValue,
+      threadInfo,
+      thread,
+      label: (
+        <ThreadsSelectorOption
+          id={thread.id}
+          details={threadInfo}
+          name={thread.name}
+          crashed={thread.crashed}
+          crashedInfo={crashedInfo}
+        />
+      ),
+    };
+  };
+
+  const handleOnChange = ({thread}) => {
+    if (onChange) {
+      onChange(thread);
+    }
+  };
+
+  return (
+    <ClassNames>
+      {({css}) => (
+        <DropdownAutoComplete
+          items={threads.map(getDropDownItem)}
+          onSelect={handleOnChange}
+          align="left"
+          alignMenu="left"
+          maxHeight={DROPDOWN_MAX_HEIGHT}
+          // TODO(fix): unfortunately the dropDown is not playing well with emotion js
+          className={css`
+            width: 100%;
+            @media (min-width: ${theme.breakpoints[2]}) {
+              width: 700px;
+            }
+          `}
+          rootClassName={css`
+            width: 100%;
+            flex: 1;
+            margin-bottom: ${space(1)};
+            @media (min-width: ${theme.breakpoints[2]}) {
+              width: auto;
+              flex: initial;
+              margin-bottom: ${space(0)};
+            }
+          `}
+        >
+          {({isOpen, selectedItem}) => (
+            <StyledDropdownButton size="small" isOpen={isOpen} align="left">
+              {selectedItem ? (
+                <ThreadsSelectorSelectedOption
+                  id={selectedItem.thread.id}
+                  details={selectedItem.threadInfo}
+                />
+              ) : (
+                <ThreadsSelectorSelectedOption
+                  id={activeThread.id}
+                  details={filterThreadInfo(activeThread, event, true)}
+                />
+              )}
+            </StyledDropdownButton>
+          )}
+        </DropdownAutoComplete>
+      )}
+    </ClassNames>
+  );
+};
+
+export default ThreadsSelector;
+
+const StyledDropdownButton = styled(DropdownButton)`
+  > *:first-child {
+    grid-template-columns: 1fr 15px;
+  }
+  width: 100%;
+
+  @media (min-width: ${props => props.theme.breakpoints[3]}) {
+    width: 420px;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorOption.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorOption.tsx
new file mode 100644
index 0000000000..d87ab3aef6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorOption.tsx
@@ -0,0 +1,106 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import TextOverflow from 'app/components/textOverflow';
+import Tooltip from 'app/components/tooltip';
+import InlineSvg from 'app/components/inlineSvg';
+import {EntryTypeData} from 'app/types';
+
+type Props = {
+  id: string;
+  details: ThreadInfo;
+  crashedInfo?: EntryTypeData;
+  name?: string;
+  crashed?: boolean;
+};
+
+type ThreadInfo = {
+  label: string;
+  filename?: string;
+};
+
+// TODO (i18n): added translations here
+const ThreadsSelectorOption = ({id, name, details, crashed, crashedInfo}: Props) => (
+  <Wrapper>
+    <DetailsWrapper>
+      <StyledNameId>{name ? `#${id}: ${name}` : `#${id}`}</StyledNameId>
+      <LabelsWrapper>
+        <StyledOptionLabel>{details.label}</StyledOptionLabel>
+        {details.filename && (
+          <StyledFileNameWrapper>
+            {'('}
+            <StyledFileName>{details.filename}</StyledFileName>
+            {')'}
+          </StyledFileNameWrapper>
+        )}
+      </LabelsWrapper>
+    </DetailsWrapper>
+    {crashed &&
+      (crashedInfo ? (
+        <Tooltip title={`(crashed with ${crashedInfo.values[0].type}`} position="top">
+          <StyledCrashIcon src="icon-warning-sm" />
+        </Tooltip>
+      ) : (
+        <StyledCrashIcon src="icon-warning-sm" />
+      ))}
+  </Wrapper>
+);
+
+export default ThreadsSelectorOption;
+
+const Wrapper = styled('div')`
+  grid-template-columns: 1fr 30px;
+  display: grid;
+  align-items: center;
+`;
+
+const DetailsWrapper = styled('div')`
+  max-width: 100%;
+  overflow: hidden;
+  display: grid;
+  @media (min-width: ${props => props.theme.breakpoints[0]}) {
+    grid-template-columns: auto 1fr;
+  }
+`;
+
+const LabelsWrapper = styled('div')`
+  display: grid;
+  width: 100%;
+  grid-gap: ${space(0.5)};
+  @media (min-width: ${props => props.theme.breakpoints[0]}) {
+    grid-template-columns: 1fr 200px;
+  }
+`;
+
+const StyledNameId = styled(TextOverflow)`
+  max-width: 100%;
+  text-align: left;
+  @media (min-width: ${props => props.theme.breakpoints[0]}) {
+    padding-right: ${space(1)};
+  }
+`;
+
+const StyledCrashIcon = styled(InlineSvg)`
+  color: #ec5e44;
+  margin-left: ${space(1)};
+`;
+
+const StyledFileNameWrapper = styled(TextOverflow)`
+  color: ${props => props.theme.purple};
+  display: flex;
+  text-align: left;
+  overflow: hidden;
+`;
+
+const StyledFileName = styled(StyledNameId)`
+  color: ${props => props.theme.purple};
+  padding-right: ${space(0)};
+`;
+
+// TODO(style): color not yet in the theme
+const StyledOptionLabel = styled(StyledNameId)`
+  color: #2c58a8;
+  padding-right: ${space(0)};
+  font-weight: 600;
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorSelectedOption.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorSelectedOption.tsx
new file mode 100644
index 0000000000..e84df20278
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadsSelectorSelectedOption.tsx
@@ -0,0 +1,40 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import TextOverflow from 'app/components/textOverflow';
+import space from 'app/styles/space';
+
+type Props = {
+  id: string;
+  details: ThreadInfo;
+};
+
+type ThreadInfo = {
+  label: string;
+  filename?: string;
+};
+
+const ThreadsSelectorSelectedOption = ({id, details}: Props) => (
+  <Wrapper>
+    <StyledThreadID>{`Thread #${id}:`}</StyledThreadID>
+    <StyledOptionLabel>{details.label}</StyledOptionLabel>
+  </Wrapper>
+);
+
+export default ThreadsSelectorSelectedOption;
+
+const Wrapper = styled('div')`
+  grid-template-columns: 110px 1fr;
+  display: grid;
+`;
+
+const StyledThreadID = styled(TextOverflow)`
+  padding-right: ${space(1)};
+  max-width: 100%;
+  text-align: left;
+`;
+
+// TODO(style): color not yet in the theme
+const StyledOptionLabel = styled(StyledThreadID)`
+  color: #2c58a8;
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/trimFilename.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/trimFilename.tsx
new file mode 100644
index 0000000000..746741dae5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/trimFilename.tsx
@@ -0,0 +1,6 @@
+function trimFilename(filename: string) {
+  const pieces = filename.split(/\//g);
+  return pieces[pieces.length - 1];
+}
+
+export default trimFilename;
diff --git a/src/sentry/static/sentry/app/types/events.ts b/src/sentry/static/sentry/app/types/events.ts
new file mode 100644
index 0000000000..6d1de190cb
--- /dev/null
+++ b/src/sentry/static/sentry/app/types/events.ts
@@ -0,0 +1,14 @@
+export interface Thread {
+  id: string;
+  name?: string;
+  crashed?: boolean;
+  stacktrace?: any;
+  rawStacktrace?: any;
+}
+
+export interface Frame {
+  function?: string;
+  package?: string;
+  module?: string;
+  filename?: string;
+}
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index ff838339ad..493094ce30 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -142,8 +142,10 @@ export type EventAttachment = {
   event_id: string;
 };
 
+export type EntryTypeData = {[key: string]: any | any[]};
+
 type EntryType = {
-  data: {[key: string]: any} | any[];
+  data: EntryTypeData;
   type: string;
 };
 
