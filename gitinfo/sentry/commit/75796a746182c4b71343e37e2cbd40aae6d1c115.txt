commit 75796a746182c4b71343e37e2cbd40aae6d1c115
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jan 4 13:49:55 2018 -0800

    feat(api): Add 2FA api endpoint and enforce 2FA checkbox to organization settings new and old (#6812)
    
    * Working on tests
    
    * Added require 2FA to both old and new settings forms.
    
    * Added UI tests to org settings.
    
    * Got the 2FA switch to work in the case for admin.
    
    * Moved API tests from frontend to api endpoints.
    
    * Removed spelling error
    
    * Removed typo from old sentry UI settings page and ensured it worked.
    
    * Removed uneeded tests from frontend tests.
    
    * Revised tests in test_org_details.
    
    * Added a switch to sentry for 2FA in both new and old settings.
    
    * Removed console.logs
    
    * Added tests that use the feature switch and removed bug from code
    
    * Added check to ensure checkbox doesn't show up  without feature enabled and refactored settingsForm js to make it more relisiant to code changes.
    
    * Removed unneeded code from orgsettingsform old jsx and added test to test when the feature is turned off
    
    * Updated user-facing references of 2FA to be consistent in format.
    
    * Refactored how require2fa is added to the settings array in js. sent an error to the user when trying to enable 2fa and not having 2fa.
    
    * Revised organization settings 2fa acceptance tests
    
    * Removed references to new settings

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 6052006254..8db19c60ec 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -15,7 +15,7 @@ from sentry.api.serializers import serialize
 from sentry.api.serializers.models.organization import (DetailedOrganizationSerializer)
 from sentry.api.serializers.rest_framework import ListField
 from sentry.models import (
-    AuditLogEntryEvent, Organization, OrganizationAvatar, OrganizationOption, OrganizationStatus
+    AuditLogEntryEvent, Organization, OrganizationAvatar, OrganizationOption, OrganizationStatus, Authenticator
 )
 from sentry.tasks.deletion import delete_organization
 from sentry.utils.apidocs import scenario, attach_scenarios
@@ -75,6 +75,7 @@ class OrganizationSerializer(serializers.Serializer):
     safeFields = ListField(child=serializers.CharField(), required=False)
     scrubIPAddresses = serializers.BooleanField(required=False)
     isEarlyAdopter = serializers.BooleanField(required=False)
+    require2FA = serializers.BooleanField(required=False)
 
     def validate_slug(self, attrs, source):
         value = attrs[source]
@@ -97,6 +98,15 @@ class OrganizationSerializer(serializers.Serializer):
             raise serializers.ValidationError('Empty values are not allowed.')
         return attrs
 
+    def validate_require2FA(self, attrs, source):
+        value = attrs[source]
+        user = self.context['user']
+        has_2fa = Authenticator.objects.user_has_2fa(user)
+        if value and not has_2fa:
+            raise serializers.ValidationError(
+                'User setting two-factor authentication enforcement without two-factor authentication enabled.')
+        return attrs
+
     def validate(self, attrs):
         attrs = super(OrganizationSerializer, self).validate(attrs)
         if attrs.get('avatarType') == 'upload':
@@ -122,6 +132,8 @@ class OrganizationSerializer(serializers.Serializer):
             org.flags.enhanced_privacy = self.init_data['enhancedPrivacy']
         if 'isEarlyAdopter' in self.init_data:
             org.flags.early_adopter = self.init_data['isEarlyAdopter']
+        if 'require2FA' in self.init_data:
+            org.flags.require_2fa = self.init_data['require2FA']
         if 'name' in self.init_data:
             org.name = self.init_data['name']
         if 'slug' in self.init_data:
@@ -197,10 +209,11 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
             serializer_cls = OwnerOrganizationSerializer
         else:
             serializer_cls = OrganizationSerializer
+
         serializer = serializer_cls(
             data=request.DATA,
             partial=True,
-            context={'organization': organization},
+            context={'organization': organization, 'user': request.user},
         )
         if serializer.is_valid():
             organization = serializer.save()
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 8feb30c68d..621d23b1a9 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -93,6 +93,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             feature_list.append('integrations-v3')
         if features.has('organizations:new-settings', obj, actor=user):
             feature_list.append('new-settings')
+        if features.has('organizations:require-2fa', obj, actor=user):
+            feature_list.append('require-2fa')
 
         if getattr(obj.flags, 'allow_joinleave'):
             feature_list.append('open-membership')
@@ -132,6 +134,7 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
                     'name': r.name,
                 } for r in roles.get_all()],
                 'openMembership': bool(obj.flags.allow_joinleave),
+                'require2FA': bool(obj.flags.require_2fa),
                 'allowSharedIssues': not obj.flags.disable_shared_issues,
                 'enhancedPrivacy': bool(obj.flags.enhanced_privacy),
                 'dataScrubber': bool(obj.get_option('sentry:require_scrub_data', False)),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 26781e6f9e..eb4df7d6b9 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -746,6 +746,7 @@ SENTRY_FEATURES = {
     'organizations:integrations-v3': False,
     'organizations:invite-members': True,
     'organizations:new-settings': False,
+    'organizations:require-2fa': False,
     'projects:global-events': False,
     'projects:plugins': True,
     'projects:dsym': False,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 819fb9930e..c9f9ba6cd5 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -18,6 +18,7 @@ default_manager.add('organizations:group-unmerge', OrganizationFeature)  # NOQA
 default_manager.add('organizations:invite-members', OrganizationFeature)  # NOQA
 default_manager.add('organizations:new-settings', OrganizationFeature)  # NOQA
 default_manager.add('organizations:integrations-v3', OrganizationFeature)  # NOQA
+default_manager.add('organizations:require-2fa', OrganizationFeature)  # NOQA
 default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
 default_manager.add('projects:plugins', ProjectPluginFeature)  # NOQA
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index f5c29a2928..9454b4ad9f 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -105,6 +105,9 @@ class Organization(Model):
             ), (
                 'early_adopter',
                 'Enable early adopter status, gaining access to features prior to public release.'
+            ), (
+                'require_2fa',
+                'Require and enforce two-factor authentication for all members.'
             ),
         ),
         default=1
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
index bd55632b4d..88c1622ee6 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.jsx
@@ -12,6 +12,7 @@ import ApiMixin from '../../../../mixins/apiMixin';
 import Form from '../../components/forms/form';
 import JsonForm from '../../components/forms/jsonForm';
 import organizationSettingsFields from '../../../../data/forms/organizationGeneralSettings';
+import OrganizationState from '../../../../mixins/organizationState';
 
 const TOAST_DURATION = 10000;
 
@@ -26,11 +27,25 @@ const NewOrganizationSettingsForm = createReactClass({
     onSave: PropTypes.func.isRequired,
   },
 
-  mixins: [ApiMixin],
+  mixins: [ApiMixin, OrganizationState],
 
   render() {
     let {initialData, orgId, onSave, access} = this.props;
 
+    //Only for adding the Flag to 2FA Enforcement.
+    if (this.getFeatures().has('require-2fa')) {
+      let security_panel = organizationSettingsFields.find(
+        panel => panel.title == 'Security & Privacy'
+      );
+      if (!security_panel.fields.find(field => field.name == 'require2FA'))
+        security_panel.fields.unshift({
+          name: 'require2FA',
+          type: 'boolean',
+          label: 'Require Two-Factor Authentication',
+          help: 'Require two-factor authentication for all members.',
+        });
+    }
+
     return (
       <Form
         apiMethod="PUT"
@@ -56,7 +71,14 @@ const NewOrganizationSettingsForm = createReactClass({
             onSave(initialData, model.initialData);
           }
         }}
-        onSubmitError={() => addErrorMessage('Unable to save change', TOAST_DURATION)}
+        onSubmitError={error => {
+          if (error.responseJSON && 'require2FA' in error.responseJSON)
+            return addErrorMessage(
+              'Unable to save change. Enable two-factor authentication on your account first.',
+              TOAST_DURATION
+            );
+          return addErrorMessage('Unable to save change', TOAST_DURATION);
+        }}
       >
         <Box>
           <JsonForm
diff --git a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
index dddac73eca..fd0e7b0f29 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/general/organizationSettingsForm.old.jsx
@@ -12,6 +12,7 @@ import IndicatorStore from '../../../../stores/indicatorStore';
 import Select2Field from '../../../../components/forms/select2Field';
 import TextField from '../../../../components/forms/textField';
 import TextareaField from '../../../../components/forms/textareaField';
+import OrganizationState from '../../../../mixins/organizationState';
 
 const OldOrganizationSettingsForm = createReactClass({
   displayName: 'OldOrganizationSettingsForm',
@@ -23,7 +24,7 @@ const OldOrganizationSettingsForm = createReactClass({
     onSave: PropTypes.func.isRequired,
   },
 
-  mixins: [ApiMixin],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -40,6 +41,7 @@ const OldOrganizationSettingsForm = createReactClass({
       openMembership: data.openMembership,
       allowSharedIssues: data.allowSharedIssues,
       isEarlyAdopter: data.isEarlyAdopter,
+      require2FA: data.require2FA,
       enhancedPrivacy: data.enhancedPrivacy,
       dataScrubber: data.dataScrubber,
       dataScrubberDefaults: data.dataScrubberDefaults,
@@ -47,6 +49,7 @@ const OldOrganizationSettingsForm = createReactClass({
       safeFields: data.safeFields.join('\n'),
       sensitiveFields: data.sensitiveFields.join('\n'),
     };
+
     if (this.props.access.has('org:admin')) {
       result.defaultRole = data.defaultRole;
     }
@@ -218,6 +221,18 @@ const OldOrganizationSettingsForm = createReactClass({
               />
 
               <legend>{t('Security & Privacy')}</legend>
+              {this.getFeatures().has('require-2fa') && (
+                <BooleanField
+                  key="require2FA"
+                  name="require2FA"
+                  label={t('Require Two-Factor Authentication')}
+                  value={formData.require2FA}
+                  help={t('Require two-factor authentication for all members.')}
+                  required={false}
+                  error={errors.require2FA}
+                  onChange={this.onFieldChange.bind(this, 'require2FA')}
+                />
+              )}
 
               <BooleanField
                 key="allowSharedIssues"
diff --git a/tests/acceptance/test_organization_settings.py b/tests/acceptance/test_organization_settings.py
index a4c1de6059..d9f7820d03 100644
--- a/tests/acceptance/test_organization_settings.py
+++ b/tests/acceptance/test_organization_settings.py
@@ -26,9 +26,64 @@ class OrganizationSettingsTest(AcceptanceTestCase):
         self.login_as(self.user)
         self.path = '/organizations/{}/settings/'.format(self.org.slug)
 
-    def test_simple(self):
-        self.browser.get(self.path)
+    def load_organization_helper(self, snapshot_name):
         self.browser.wait_until('.organization-home')
         self.browser.wait_until_not('.loading-indicator')
-        self.browser.snapshot('organization settings')
+        self.browser.snapshot('organization settings -- ' + snapshot_name)
         assert self.browser.element_exists('.ref-organization-settings')
+
+    def renders_2fa_setting(self):
+        return self.browser.element_exists('#id-require2FA')
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.load_organization_helper("Simple")
+
+    def test_disabled_2fa_feature(self):
+        user_owner = self.create_user('owner@example.com')
+        organization = self.create_organization(name="Example", owner=user_owner)
+        self.login_as(user_owner)
+        path = '/organizations/%s/settings/' % organization.slug
+
+        self.browser.get(path)
+        self.load_organization_helper("disabled 2fa feature")
+        assert not self.renders_2fa_setting()
+
+    def test_renders_2fa_setting_for_owner(self):
+        user_owner = self.create_user('owner@example.com')
+        organization = self.create_organization(name="Example", owner=user_owner)
+        self.login_as(user_owner)
+        path = '/organizations/%s/settings/' % organization.slug
+
+        with self.feature('organizations:require-2fa'):
+            self.browser.get(path)
+            self.load_organization_helper("renders 2fa setting for organization owner")
+            assert self.renders_2fa_setting()
+
+    def test_renders_2fa_setting_for_manager(self):
+        user_manager = self.create_user('manager@gexample.com')
+        organization = self.create_organization(
+            name="Example", owner=self.create_user('owner@example.com'))
+        self.create_member(organization=organization, user=user_manager, role='manager')
+        self.login_as(user_manager)
+        path = '/organizations/%s/settings/' % organization.slug
+
+        with self.feature('organizations:require-2fa'):
+            self.browser.get(path)
+            self.load_organization_helper("renders 2fa setting for organization manager")
+            assert self.renders_2fa_setting()
+
+    def test_setting_2fa_without_2fa_enabled(self):
+        user_owner = self.create_user('owner@example.com')
+        organization = self.create_organization(name="Example", owner=user_owner)
+        self.login_as(user_owner)
+        path = '/organizations/%s/settings/' % organization.slug
+
+        with self.feature('organizations:require-2fa'):
+            self.browser.get(path)
+            self.browser.wait_until_not('.loading-indicator')
+            assert not self.browser.element_exists('.ref-organization-settings .error')
+            self.browser.click('#id-require2FA')
+            self.browser.click('.ref-organization-settings button.btn.btn-primary')
+            self.load_organization_helper("setting 2fa without 2fa enabled")
+            assert self.browser.element_exists('.ref-organization-settings .error')
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index 4e23b170c3..cb474d7789 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -12,7 +12,9 @@ from sentry.models import (
     OrganizationAvatar,
     OrganizationOption,
     OrganizationStatus,
-    DeletedOrganization)
+    DeletedOrganization,
+    Authenticator,
+    TotpInterface)
 from sentry.signals import project_created
 from sentry.testutils import APITestCase
 
@@ -383,3 +385,73 @@ class OrganizationDeleteTest(APITestCase):
             response = self.client.delete(url)
 
         assert response.status_code == 400, response.data
+
+
+class OrganizationSettings2FATest(APITestCase):
+    def enable_user_2fa(self, user):
+        TotpInterface().enroll(user)
+        assert Authenticator.objects.user_has_2fa(user)
+
+    def assert_can_enable_org_2fa(self, organization, user, status_code=200):
+        self.__helper_enable_organization_2fa(organization, user, status_code)
+
+    def assert_cannot_enable_org_2fa(self, organization, user, status_code):
+        self.__helper_enable_organization_2fa(organization, user, status_code)
+
+    def __helper_enable_organization_2fa(self, organization, user, status_code):
+        def enable_org_2fa():
+            self.login_as(user)
+            url = reverse(
+                'sentry-api-0-organization-details', kwargs={
+                    'organization_slug': organization.slug,
+                }
+            )
+            response = self.client.put(
+                url,
+                data={
+                    'require2FA': True,
+                }
+            )
+            return response
+
+        response = enable_org_2fa()
+
+        assert response.status_code == status_code, response.content
+        organization = Organization.objects.get(id=organization.id)
+
+        if status_code in range(200, 300):
+            assert organization.flags.require_2fa
+        else:
+            assert not organization.flags.require_2fa
+
+    def test_cannot_enforce_2fa_without_2fa_enabled(self):
+        owner = self.create_user()
+        organization = self.create_organization(owner=owner)
+
+        assert not Authenticator.objects.user_has_2fa(owner)
+        self.assert_cannot_enable_org_2fa(organization, owner, 400)
+
+    def test_owner_can_set_2fa(self):
+        owner = self.create_user()
+        organization = self.create_organization(owner=owner)
+
+        self.enable_user_2fa(owner)
+        self.assert_can_enable_org_2fa(organization, owner)
+
+    def test_manager_can_set_2fa(self):
+        manager = self.create_user()
+        organization = self.create_organization(owner=self.create_user())
+        self.create_member(organization=organization, user=manager, role="manager")
+
+        self.assert_cannot_enable_org_2fa(organization, manager, 400)
+        self.enable_user_2fa(manager)
+        self.assert_can_enable_org_2fa(organization, manager)
+
+    def test_members_cannot_set_2fa(self):
+        member = self.create_user()
+        organization = self.create_organization(owner=self.create_user())
+        self.create_member(organization=organization, user=member, role="member")
+
+        self.assert_cannot_enable_org_2fa(organization, member, 403)
+        self.enable_user_2fa(member)
+        self.assert_cannot_enable_org_2fa(organization, member, 403)
