commit d1d56ba36fd7dbd944f10070104ae0b48c2e608b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 1 01:30:44 2013 -0700

    Rename FilterKey and FilterValue to TagKey/TagValue

diff --git a/src/sentry/filters/base.py b/src/sentry/filters/base.py
index 25162c27b8..a99760979b 100644
--- a/src/sentry/filters/base.py
+++ b/src/sentry/filters/base.py
@@ -15,7 +15,7 @@ import hashlib
 
 from django.utils.datastructures import SortedDict
 
-from sentry.models import FilterValue
+from sentry.models import TagValue
 from sentry.utils.cache import cache
 from .widgets import ChoiceWidget
 
@@ -64,7 +64,7 @@ class Filter(object):
         key = 'filters:%s:%s' % (self.project.id, hashlib.md5(self.column).hexdigest())
         result = cache.get(key)
         if result is None:
-            result = list(FilterValue.objects.filter(
+            result = list(TagValue.objects.filter(
                 project=self.project,
                 key=self.column,
             ).values_list('value', flat=True).order_by('value')[:self.max_choices])
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 9200c10c1d..c1ef95245a 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -724,7 +724,7 @@ class GroupManager(BaseManager, ChartMixin):
         })
 
     def add_tags(self, group, tags):
-        from sentry.models import FilterValue, GroupTag
+        from sentry.models import TagValue, GroupTag
 
         project = group.project
         date = group.last_seen
@@ -737,7 +737,7 @@ class GroupManager(BaseManager, ChartMixin):
             if len(value) > MAX_TAG_LENGTH:
                 continue
 
-            app.buffer.incr(FilterValue, {
+            app.buffer.incr(TagValue, {
                 'times_seen': 1,
             }, {
                 'project': project,
@@ -1222,7 +1222,7 @@ class SearchDocumentManager(BaseManager):
         return document
 
 
-class FilterKeyManager(BaseManager):
+class TagKeyManager(BaseManager):
     def _get_cache_key(self, project_id):
         return 'filterkey:all:%s' % project_id
 
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 179d63396b..c3d3328801 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -40,7 +40,7 @@ from sentry.constants import (
 from sentry.manager import (
     GroupManager, ProjectManager,
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
-    UserOptionManager, FilterKeyManager, TeamManager)
+    UserOptionManager, TagKeyManager, TeamManager)
 from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils.cache import memoize
 from sentry.utils.db import has_trending
@@ -229,7 +229,8 @@ class Project(Model):
     def delete(self):
         # This handles cascades properly
         # TODO: this doesn't clean up the index
-        for model in (Event, Group, FilterValue, GroupTag, GroupCountByMinute):
+        for model in (
+                Event, Group, TagKey, TagValue, GroupTag, GroupCountByMinute):
             model.objects.filter(project=self).delete()
         super(Project, self).delete()
 
@@ -281,8 +282,8 @@ class Project(Model):
                             time_spent_count=F('time_spent_count') + obj.time_spent_count,
                         )
 
-        for fv in FilterValue.objects.filter(project=self):
-            FilterValue.objects.get_or_create(project=project, key=fv.key, value=fv.value)
+        for fv in TagValue.objects.filter(project=self):
+            TagValue.objects.get_or_create(project=project, key=fv.key, value=fv.value)
             fv.delete()
         self.delete()
 
@@ -293,7 +294,7 @@ class Project(Model):
         if not hasattr(self, '_tag_cache'):
             tags = ProjectOption.objects.get_value(self, 'tags', None)
             if tags is None:
-                tags = FilterKey.objects.all_keys(self)
+                tags = TagKey.objects.all_keys(self)
             self._tag_cache = tags
         return self._tag_cache
 
@@ -747,7 +748,7 @@ class GroupBookmark(Model):
     __repr__ = sane_repr('project_id', 'group_id', 'user_id')
 
 
-class FilterKey(Model):
+class TagKey(Model):
     """
     Stores references to available filters keys.
     """
@@ -755,15 +756,16 @@ class FilterKey(Model):
     key = models.CharField(max_length=32)
     values_seen = models.PositiveIntegerField(default=0)
 
-    objects = FilterKeyManager()
+    objects = TagKeyManager()
 
     class Meta:
+        db_table = 'sentry_filterkey'
         unique_together = (('project', 'key'),)
 
     __repr__ = sane_repr('project_id', 'key')
 
 
-class FilterValue(Model):
+class TagValue(Model):
     """
     Stores references to available filters.
     """
@@ -777,10 +779,14 @@ class FilterValue(Model):
     objects = BaseManager()
 
     class Meta:
+        db_table = 'sentry_filtervalue'
         unique_together = (('project', 'key', 'value'),)
 
     __repr__ = sane_repr('project_id', 'key', 'value')
 
+FilterKey = TagKey
+FilterValue = TagValue
+
 
 class GroupTagKey(Model):
     """
@@ -1168,7 +1174,7 @@ def create_default_project(created_models, verbosity=2, **kwargs):
             print 'Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id)
 
         # Iterate all groups to update their relations
-        for model in (Group, Event, FilterValue, GroupTag,
+        for model in (Group, Event, TagKey, TagValue, GroupTag,
                       GroupCountByMinute):
             if verbosity > 0:
                 print ('Backfilling project ids for %s.. ' % model),
@@ -1259,14 +1265,14 @@ def set_language_on_logon(request, user, **kwargs):
         request.session['django_language'] = language
 
 
-@buffer_incr_complete.connect(sender=FilterValue, weak=False)
+@buffer_incr_complete.connect(sender=TagValue, weak=False)
 def record_project_tag_count(filters, created, **kwargs):
     from sentry import app
 
     if not created:
         return
 
-    app.buffer.incr(FilterKey, {
+    app.buffer.incr(TagKey, {
         'values_seen': 1,
     }, {
         'project': filters['project'],
diff --git a/src/sentry/tasks/cleanup.py b/src/sentry/tasks/cleanup.py
index 27c42dbd63..277ee337d5 100644
--- a/src/sentry/tasks/cleanup.py
+++ b/src/sentry/tasks/cleanup.py
@@ -23,9 +23,10 @@ def cleanup(days=30, project=None, chunk_size=1000, **kwargs):
 
     from django.utils import timezone
 
-    # TODO: FilterKey and GroupTagKey need cleaned up
-    from sentry.models import (Group, Event, GroupCountByMinute,
-        GroupTag, FilterValue, ProjectCountByMinute, Alert,
+    # TODO: TagKey and GroupTagKey need cleaned up
+    from sentry.models import (
+        Group, Event, GroupCountByMinute,
+        GroupTag, TagValue, ProjectCountByMinute, Alert,
         SearchDocument, Activity, AffectedUserByGroup, LostPasswordHash)
 
     GENERIC_DELETES = (
@@ -36,7 +37,7 @@ def cleanup(days=30, project=None, chunk_size=1000, **kwargs):
         (Event, 'datetime'),
         (Activity, 'datetime'),
         (AffectedUserByGroup, 'last_seen'),
-        (FilterValue, 'last_seen'),
+        (TagValue, 'last_seen'),
         (Alert, 'datetime'),
 
         # Group should probably be last
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 77b6ccd85d..f9b632bc57 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -26,7 +26,7 @@ from sentry.coreapi import (project_from_auth_vars,
     insert_data_to_database, APIError, APIForbidden, extract_auth_vars)
 from sentry.exceptions import InvalidData
 from sentry.models import (Group, GroupBookmark, Project, ProjectCountByMinute,
-    FilterValue, Activity)
+    TagValue, Activity)
 from sentry.plugins import plugins
 from sentry.utils import json
 from sentry.utils.cache import cache
@@ -721,7 +721,7 @@ def search_tags(request, team, project):
     name = request.GET['name']
     query = request.GET['query']
 
-    results = list(FilterValue.objects.filter(
+    results = list(TagValue.objects.filter(
         project=project,
         key=name,
         value__icontains=query,
diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
index 5d0aadcb9e..e3ccc492aa 100644
--- a/src/sentry/web/frontend/projects.py
+++ b/src/sentry/web/frontend/projects.py
@@ -15,7 +15,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.conf import settings
 from sentry.constants import MEMBER_OWNER
-from sentry.models import Project, ProjectKey, Team, FilterKey
+from sentry.models import Project, ProjectKey, Team, TagKey
 from sentry.permissions import (
     can_remove_project, can_add_project_key, can_remove_project_key)
 from sentry.plugins import plugins
@@ -183,7 +183,7 @@ def remove_project_key(request, team, project, key_id):
 
 @has_access(MEMBER_OWNER)
 def manage_project_tags(request, team, project):
-    tag_list = FilterKey.objects.all_keys(project)
+    tag_list = TagKey.objects.all_keys(project)
     if tag_list:
         form = ProjectTagsForm(project, tag_list, request.POST or None)
     else:
@@ -215,7 +215,7 @@ def notification_settings(request, team, project):
     initial = project.get_option('notifcation:tags', {})
 
     tag_forms = []
-    for tag in FilterKey.objects.all_keys(project):
+    for tag in TagKey.objects.all_keys(project):
         tag_forms.append(NotificationTagValuesForm(
             project=project,
             tag=tag,
@@ -226,8 +226,8 @@ def notification_settings(request, team, project):
             },
         ))
 
-    threshold, min_events = project.get_option('alert:threshold',
-        settings.DEFAULT_ALERT_PROJECT_THRESHOLD)
+    threshold, min_events = project.get_option(
+        'alert:threshold', settings.DEFAULT_ALERT_PROJECT_THRESHOLD)
 
     alert_form = AlertSettingsForm(
         data=request.POST or None,
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index 126e169621..76ff0e8f2e 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -10,8 +10,9 @@ from django.core.urlresolvers import reverse
 from django.contrib.auth.models import User
 from django.utils import timezone
 from sentry.constants import MINUTE_NORMALIZATION
-from sentry.models import (Project, ProjectKey, Group, Event, Team,
-    GroupTag, GroupCountByMinute, FilterValue, PendingTeamMember,
+from sentry.models import (
+    Project, ProjectKey, Group, Event, Team,
+    GroupTag, GroupCountByMinute, TagValue, PendingTeamMember,
     LostPasswordHash, Alert)
 from sentry.testutils import TestCase, fixture
 
@@ -31,13 +32,13 @@ class ProjectTest(TestCase):
         self.assertFalse(Event.objects.filter(project__isnull=True).exists())
         self.assertFalse(GroupTag.objects.filter(project__isnull=True).exists())
         self.assertFalse(GroupCountByMinute.objects.filter(project__isnull=True).exists())
-        self.assertFalse(FilterValue.objects.filter(project__isnull=True).exists())
+        self.assertFalse(TagValue.objects.filter(project__isnull=True).exists())
 
         self.assertEquals(project2.group_set.count(), 4)
         self.assertEquals(project2.event_set.count(), 10)
-        self.assertEquals(project2.grouptag_set.count(), 0)
-        self.assertEquals(project2.groupcountbyminute_set.count(), 0)
-        self.assertEquals(project2.filtervalue_set.count(), 0)
+        assert not project2.grouptag_set.exists()
+        assert not project2.groupcountbyminute_set.exists()
+        assert not TagValue.objects.filter(project=project2).exists()
 
 
 class ProjectKeyTest(TestCase):
diff --git a/tests/sentry/tasks/cleanup/tests.py b/tests/sentry/tasks/cleanup/tests.py
index ab9e95216c..c3d7fae0d1 100644
--- a/tests/sentry/tasks/cleanup/tests.py
+++ b/tests/sentry/tasks/cleanup/tests.py
@@ -4,12 +4,12 @@ from __future__ import absolute_import
 
 from celery.task import Task
 from sentry.models import (Event, Group, GroupCountByMinute,
-    GroupTag, ProjectCountByMinute, FilterValue, FilterKey)
+    GroupTag, ProjectCountByMinute, TagValue, TagKey)
 from sentry.tasks.cleanup import cleanup
 from sentry.testutils import TestCase
 
 ALL_MODELS = (Event, Group, ProjectCountByMinute, GroupCountByMinute, GroupTag,
-              FilterValue, FilterKey)
+              TagValue, TagKey)
 
 
 class SentryCleanupTest(TestCase):
