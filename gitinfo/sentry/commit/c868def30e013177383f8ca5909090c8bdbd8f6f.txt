commit c868def30e013177383f8ca5909090c8bdbd8f6f
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Wed Oct 30 09:39:40 2019 +0100

    ref(ingest): Remove python data scrubber (#15322)

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 223a3a5440..dd1396bf5f 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -224,23 +224,6 @@ SENTRY_RULES = (
 # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html + PATCH
 HTTP_METHODS = ("GET", "POST", "PUT", "OPTIONS", "HEAD", "DELETE", "TRACE", "CONNECT", "PATCH")
 
-# XXX: Must be all lowercase
-DEFAULT_SCRUBBED_FIELDS = (
-    "password",
-    "secret",
-    "passwd",
-    "api_key",
-    "apikey",
-    "access_token",
-    "auth",
-    "credentials",
-    "mysql_pwd",
-    "stripetoken",
-    "card[number]",
-)
-
-NOT_SCRUBBED_VALUES = set([True, False, "true", "false", "null", "undefined"])
-
 VALID_PLATFORMS = set(
     [
         "as3",
@@ -273,11 +256,6 @@ OK_PLUGIN_SAVED = _("Configuration for the {name} integration has been saved.")
 
 WARN_SESSION_EXPIRED = "Your session has expired."  # TODO: translate this
 
-# If this value changes, also change it in src/sentry/static/sentry/app/constants/index.tsx
-# TODO(kmclb): once relay is doing the filtering, this will change, at minimum to become
-# "DEFAULT_FILTER_MASK" or some such, since the mask value will be dynamic
-FILTER_MASK = "[Filtered]"
-
 # Maximum length of a symbol
 MAX_SYM = 256
 
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
deleted file mode 100644
index 03712cac3f..0000000000
--- a/src/sentry/utils/data_scrubber.py
+++ /dev/null
@@ -1,211 +0,0 @@
-from __future__ import absolute_import
-
-import re
-import six
-from six.moves.urllib.parse import urlsplit, urlunsplit
-
-from sentry.constants import DEFAULT_SCRUBBED_FIELDS, FILTER_MASK, NOT_SCRUBBED_VALUES
-from sentry.utils.safe import get_path
-
-
-def varmap(func, var, context=None, name=None):
-    """
-    Executes ``func(key_name, value)`` on all values
-    recursively discovering dict and list scoped
-    values.
-    """
-    if context is None:
-        context = set()
-
-    objid = id(var)
-    if objid in context:
-        return func(name, "<...>")
-    context.add(objid)
-
-    if isinstance(var, dict):
-        ret = dict((k, varmap(func, v, context, k)) for k, v in six.iteritems(var))
-    elif isinstance(var, (list, tuple)):
-        # treat it like a mapping
-        if all(isinstance(v, (list, tuple)) and len(v) == 2 for v in var):
-            ret = [[k, varmap(func, v, context, k)] for k, v in var]
-        else:
-            ret = [varmap(func, f, context, name) for f in var]
-    else:
-        ret = func(name, var)
-    context.remove(objid)
-    return ret
-
-
-class SensitiveDataFilter(object):
-    """
-    Asterisk out things that look like passwords, credit card numbers,
-    and API keys in frames, http, and basic extra data.
-    """
-
-    VALUES_RE = re.compile(
-        r"|".join(
-            [
-                # http://www.richardsramblings.com/regex/credit-card-numbers/
-                r"\b(?:3[47]\d|(?:4\d|5[1-5]|65)\d{2}|6011)\d{12}\b",
-                # various private/public keys
-                r"-----BEGIN[A-Z ]+(PRIVATE|PUBLIC) KEY-----.+-----END[A-Z ]+(PRIVATE|PUBLIC) KEY-----",
-                # social security numbers (US)
-                r"^\b(?!(000|666|9))\d{3}-(?!00)\d{2}-(?!0000)\d{4}\b",
-            ]
-        ),
-        re.DOTALL,
-    )
-    URL_PASSWORD_RE = re.compile(r"\b((?:[a-z0-9]+:)?//[a-zA-Z0-9%_.-]+:)([a-zA-Z0-9%_.-]+)@")
-
-    def __init__(self, fields=None, include_defaults=True, exclude_fields=()):
-        if fields:
-            fields = tuple(f.lower() for f in filter(None, fields))
-        else:
-            fields = ()
-        if include_defaults:
-            fields += DEFAULT_SCRUBBED_FIELDS
-        self.exclude_fields = {f.lower() for f in exclude_fields}
-        self.fields = set(fields)
-
-    def apply(self, data):
-        # TODO(dcramer): move this into each interface
-        if data.get("stacktrace"):
-            self.filter_stacktrace(data["stacktrace"])
-
-        for exc in get_path(data, "exception", "values", filter=True) or ():
-            if exc.get("stacktrace"):
-                self.filter_stacktrace(exc["stacktrace"])
-
-        for exc in get_path(data, "threads", "values", filter=True) or ():
-            if exc.get("stacktrace"):
-                self.filter_stacktrace(exc["stacktrace"])
-
-        for crumb in get_path(data, "breadcrumbs", "values", filter=True) or ():
-            self.filter_crumb(crumb)
-
-        if data.get("request"):
-            self.filter_http(data["request"])
-
-        if data.get("user"):
-            self.filter_user(data["user"])
-
-        if data.get("csp"):
-            self.filter_csp(data["csp"])
-
-        if data.get("extra"):
-            data["extra"] = varmap(self.sanitize, data["extra"])
-
-        if data.get("contexts"):
-            for key, value in six.iteritems(data["contexts"]):
-                if value:
-                    data["contexts"][key] = varmap(self.sanitize, value)
-
-    def sanitize(self, key, value):
-        if value is None or value == "":
-            return value
-
-        if isinstance(key, six.string_types):
-            key = key.lower()
-        else:
-            key = ""
-
-        if key and key in self.exclude_fields:
-            return value
-
-        if isinstance(value, six.string_types):
-            if self.VALUES_RE.search(value):
-                return FILTER_MASK
-
-            # Check if the value is a url-like object
-            # that contains a password
-            # e.g. postgres://foo:password@example.com/db
-            if "//" in value and "@" in value:
-                value = self.URL_PASSWORD_RE.sub(r"\1" + FILTER_MASK + "@", value)
-
-        if isinstance(value, six.string_types):
-            str_value = value.lower()
-        else:
-            str_value = ""
-
-        for field in self.fields:
-            if field in str_value:
-                return FILTER_MASK
-            if field in key and value not in NOT_SCRUBBED_VALUES:
-                return FILTER_MASK
-        return value
-
-    def filter_stacktrace(self, data):
-        if not data.get("frames"):
-            return
-        for frame in data["frames"]:
-            if not frame or not frame.get("vars"):
-                continue
-            frame["vars"] = varmap(self.sanitize, frame["vars"])
-
-    def filter_http(self, data):
-        for n in ("data", "cookies", "headers", "env", "query_string"):
-            if not data.get(n):
-                continue
-
-            if isinstance(data[n], six.string_types) and "=" in data[n]:
-                # at this point we've assumed it's a standard HTTP query
-                querybits = []
-                for bit in data[n].split("&"):
-                    chunk = bit.split("=")
-                    if len(chunk) == 2:
-                        querybits.append((chunk[0], self.sanitize(*chunk)))
-                    else:
-                        querybits.append(chunk)
-
-                data[n] = "&".join("=".join(k) for k in querybits)
-            else:
-                # Encoded structured data (HTTP bodies, headers) would have
-                # already been decoded by the request interface.
-                data[n] = varmap(self.sanitize, data[n])
-
-    def filter_user(self, user):
-        for key in user:
-            if user[key]:  # no need to scrub falsy values, as there's no data there
-                user[key] = varmap(self.sanitize, user[key], name=key)
-
-    def filter_crumb(self, data):
-        for key in "data", "message":
-            val = data.get(key)
-            if val:
-                data[key] = varmap(self.sanitize, val)
-
-    def filter_csp(self, data):
-        for key in "blocked_uri", "document_uri":
-            if not data.get(key):
-                continue
-            value = data[key]
-            if not isinstance(value, six.string_types):
-                continue
-            if "?" not in value:
-                continue
-            if "=" not in value:
-                continue
-            scheme, netloc, path, query, fragment = urlsplit(value)
-            querybits = []
-            for bit in query.split("&"):
-                chunk = bit.split("=")
-                if len(chunk) == 2:
-                    querybits.append((chunk[0], self.sanitize(*chunk)))
-                else:
-                    querybits.append(chunk)
-            query = "&".join("=".join(k) for k in querybits)
-            data[key] = urlunsplit((scheme, netloc, path, query, fragment))
-
-
-def ensure_does_not_have_ip(data):
-    env = get_path(data, "request", "env")
-    if env:
-        env.pop("REMOTE_ADDR", None)
-
-    user = get_path(data, "user")
-    if user:
-        user.pop("ip_address", None)
-
-    sdk = get_path(data, "sdk")
-    if sdk:
-        sdk.pop("client_ip", None)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 2a36279753..86c18b67be 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import, print_function
 import base64
 import math
 
-import os
 import io
 import jsonschema
 import logging
@@ -68,7 +67,6 @@ from sentry.signals import event_accepted, event_dropped, event_filtered, event_
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
 from sentry.utils.data_filters import FilterStatKeys
-from sentry.utils.data_scrubber import SensitiveDataFilter, ensure_does_not_have_ip
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain, origin_from_request
 from sentry.utils.outcomes import Outcome, track_outcome, decide_signals_in_consumer
 from sentry.utils.pubsub import QueuedPublisherService, KafkaPublisher
@@ -286,10 +284,8 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
         )
         raise APIForbidden("An event with the same ID already exists (%s)" % (event_id,))
 
-    config = project_config.config
-    datascrubbing_settings = config.get("datascrubbingSettings") or {}
-
-    data = _scrub_event_data(data, datascrubbing_settings)
+    datascrubbing_settings = project_config.config.get("datascrubbingSettings") or {}
+    data = semaphore.scrub_event(datascrubbing_settings, dict(data))
 
     # mutates data (strips a lot of context if not queued)
     helper.insert_data_to_database(data, start_time=start_time, attachments=attachments)
@@ -303,50 +299,6 @@ def process_event(event_manager, project, key, remote_addr, helper, attachments,
     return event_id
 
 
-def _scrub_event_data(data, datascrubbing_settings):
-    scrub_ip_address = datascrubbing_settings.get("scrubIpAddresses")
-    scrub_data = datascrubbing_settings.get("scrubData")
-
-    if os.environ.get("SENTRY_USE_RUST_DATASCRUBBER") == "true":
-        sample_rust_scrubber = True
-        use_rust_scrubber = True
-    elif os.environ.get("SENTRY_USE_RUST_DATASCRUBBER") == "false":
-        sample_rust_scrubber = False
-        use_rust_scrubber = False
-    else:
-        sample_rust_scrubber = random.random() < options.get("store.sample-rust-data-scrubber", 0.0)
-        use_rust_scrubber = options.get("store.use-rust-data-scrubber", False)
-
-    if sample_rust_scrubber:
-        rust_scrubbed_data = safe_execute(
-            semaphore.scrub_event, datascrubbing_settings, dict(data), _with_transaction=False
-        )
-    else:
-        rust_scrubbed_data = None
-
-    if rust_scrubbed_data and use_rust_scrubber:
-        data = rust_scrubbed_data
-        data["_rust_data_scrubbed"] = True  # TODO: Remove after sampling
-    else:
-        if scrub_data:
-            # We filter data immediately before it ever gets into the queue
-            sensitive_fields = datascrubbing_settings.get("sensitiveFields")
-            exclude_fields = datascrubbing_settings.get("excludeFields")
-            scrub_defaults = datascrubbing_settings.get("scrubDefaults")
-
-            SensitiveDataFilter(
-                fields=sensitive_fields,
-                include_defaults=scrub_defaults,
-                exclude_fields=exclude_fields,
-            ).apply(data)
-
-        if scrub_ip_address:
-            # We filter data immediately before it ever gets into the queue
-            ensure_does_not_have_ip(data)
-
-    return data
-
-
 def _get_project_from_id(project_id):
     if not project_id:
         return None
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
deleted file mode 100644
index aaac80a7d1..0000000000
--- a/tests/sentry/utils/test_data_scrubber.py
+++ /dev/null
@@ -1,443 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from sentry.constants import FILTER_MASK
-from unittest import TestCase
-from sentry.utils.data_scrubber import SensitiveDataFilter
-
-VARS = {
-    "foo": "bar",
-    "password": "hello",
-    "the_secret": "hello",
-    "a_password_here": "hello",
-    "api_key": "secret_key",
-    "apiKey": "secret_key",
-}
-
-PUBLIC_KEY = """-----BEGIN PUBLIC KEY-----
-MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA6A6TQjlPyMurLh/igZY4
-izA9sJgeZ7s5+nGydO4AI9k33gcy2DObZuadWRMnDwc3uH/qoAPw/mo3KOcgEtxU
-xdwiQeATa3HVPcQDCQiKm8xIG2Ny0oUbR0IFNvClvx7RWnPEMk05CuvsL0AA3eH5
-xn02Yg0JTLgZEtUT3whwFm8CAwEAAQ==
------END PUBLIC KEY-----"""
-
-PRIVATE_KEY = """-----BEGIN PRIVATE KEY-----
-MIIJRAIBADANBgkqhkiG9w0BAQEFAASCCS4wggkqAgEAAoICAQCoNFY4P+EeIXl0
-mLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h
-mLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h
------END PRIVATE KEY-----"""
-
-ENCRYPTED_PRIVATE_KEY = """-----BEGIN ENCRYPTED PRIVATE KEY-----
-MIIJjjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIWVhErdQOFVoCAggA
-IrlYQUV1ig4U3viYh1Y8viVvRlANKICvgj4faYNH36UterkfDjzMonb/cXNeJEOS
-YgorM2Pfuec5vtPRPKd88+Ds/ktIlZhjJwnJjHQMX+lSw5t0/juna2sLH2dpuAbi
-PSk=
------END ENCRYPTED PRIVATE KEY-----"""
-
-RSA_PRIVATE_KEY = """-----BEGIN RSA PRIVATE KEY-----
-+wn9Iu+zgamKDUu22xc45F2gdwM04rTITlZgjAs6U1zcvOzGxk8mWJD5MqFWwAtF
-zN87YGV0VMTG6ehxnkI4Fg6i0JPU3QIDAQABAoICAQCoCPjlYrODRU+vd2YeU/gM
-THd+9FBxiHLGXNKhG/FRSyREXEt+NyYIf/0cyByc9tNksat794ddUqnLOg0vwSkv
------END RSA PRIVATE KEY-----"""
-
-
-class SensitiveDataFilterTest(TestCase):
-    def _check_vars_sanitized(self, vars, proc):
-        """
-        Helper to check that keys have been sanitized.
-        """
-        assert "foo" in vars
-        assert vars["foo"] == "bar"
-        assert "password" in vars
-        assert vars["password"] == FILTER_MASK
-        assert "the_secret" in vars
-        assert vars["the_secret"] == FILTER_MASK
-        assert "a_password_here" in vars
-        assert vars["a_password_here"] == FILTER_MASK
-        assert "api_key" in vars
-        assert vars["api_key"] == FILTER_MASK
-        assert "apiKey" in vars
-        assert vars["apiKey"] == FILTER_MASK
-
-    def test_stacktrace(self):
-        data = {"stacktrace": {"frames": [{"vars": VARS}]}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "stacktrace" in data
-        stack = data["stacktrace"]
-        assert "frames" in stack
-        assert len(stack["frames"]) == 1
-        frame = stack["frames"][0]
-        assert "vars" in frame
-        self._check_vars_sanitized(frame["vars"], proc)
-
-    def test_http(self):
-        data = {
-            "request": {"data": VARS, "env": VARS, "headers": list(VARS.items()), "cookies": VARS}
-        }
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "request" in data
-        http = data["request"]
-        for n in ("data", "env", "cookies"):
-            assert n in http
-            self._check_vars_sanitized(http[n], proc)
-
-        assert "headers" in http
-        self._check_vars_sanitized(dict(http["headers"]), proc)
-
-    def test_user_standard_entries(self):
-        """
-        Make sure we filter the entries we call out specifically. See
-        https://github.com/getsentry/semaphore/blob/5b6e46f6159843451027b5217902c81e134d7c40/general/src/protocol/user.rs#L25
-        for a list of those entries.
-        """
-
-        data = {
-            "user": {
-                "id": "26",
-                "username": "maiseythedog",
-                "email": "maisey@dogsrule.com",
-                "name": "Maisey Dog",
-            }
-        }
-        additional_sensitive_fields = ["email", "name"]
-
-        proc = SensitiveDataFilter(additional_sensitive_fields)
-        proc.apply(data)
-
-        assert data["user"]["id"] == "26"
-        assert data["user"]["username"] == FILTER_MASK
-        assert data["user"]["email"] == FILTER_MASK
-        assert data["user"]["name"] == FILTER_MASK
-
-    def test_user_extra_data(self):
-        """
-        Make sure we filter non-standard user entries, which all end up in
-        user["data"] after normalization. See
-        https://github.com/getsentry/semaphore/blob/5b6e46f6159843451027b5217902c81e134d7c40/general/src/protocol/user.rs#L54.
-        """
-
-        data = {"user": {"data": VARS}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "user" in data
-        self._check_vars_sanitized(data["user"]["data"], proc)
-
-    def test_extra(self):
-        data = {"extra": VARS}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "extra" in data
-        self._check_vars_sanitized(data["extra"], proc)
-
-    def test_contexts(self):
-        data = {"contexts": {"secret": VARS, "biz": VARS}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "contexts" in data
-        assert "secret" in data["contexts"]
-        assert "biz" in data["contexts"]
-        self._check_vars_sanitized(data["contexts"]["secret"], proc)
-        self._check_vars_sanitized(data["contexts"]["biz"], proc)
-
-    def test_querystring_as_string(self):
-        data = {
-            "request": {
-                "query_string": "foo=bar&password=hello&the_secret=hello"
-                "&a_password_here=hello&api_key=secret_key"
-            }
-        }
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "request" in data
-        http = data["request"]
-        assert http["query_string"] == (
-            "foo=bar&password=%(m)s&the_secret=%(m)s"
-            "&a_password_here=%(m)s&api_key=%(m)s" % {"m": FILTER_MASK}
-        )
-
-    def test_querystring_as_pairlist(self):
-        data = {
-            "request": {
-                "query_string": [
-                    ["foo", "bar"],
-                    ["password", "hello"],
-                    ["the_secret", "hello"],
-                    ["a_password_here", "hello"],
-                    ["api_key", "secret_key"],
-                ]
-            }
-        }
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "request" in data
-        http = data["request"]
-        assert http["query_string"] == [
-            ["foo", "bar"],
-            ["password", FILTER_MASK],
-            ["the_secret", FILTER_MASK],
-            ["a_password_here", FILTER_MASK],
-            ["api_key", FILTER_MASK],
-        ]
-
-    def test_querystring_as_string_with_partials(self):
-        data = {"request": {"query_string": "foo=bar&password&baz=bar"}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "request" in data
-        http = data["request"]
-        assert http["query_string"] == "foo=bar&password&baz=bar"
-
-    def test_querystring_as_pairlist_with_partials(self):
-        data = {"request": {"query_string": [["foo", "bar"], ["password", ""], ["baz", "bar"]]}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "request" in data
-        http = data["request"]
-        assert http["query_string"] == [["foo", "bar"], ["password", ""], ["baz", "bar"]]
-
-    def test_sanitize_additional_sensitive_fields(self):
-        additional_sensitive_dict = {"fieldy_field": "value", "moar_other_field": "another value"}
-        data = {"extra": dict(list(VARS.items()) + list(additional_sensitive_dict.items()))}
-
-        proc = SensitiveDataFilter(additional_sensitive_dict.keys())
-        proc.apply(data)
-
-        for field in additional_sensitive_dict.keys():
-            assert data["extra"][field] == FILTER_MASK
-
-        self._check_vars_sanitized(data["extra"], proc)
-
-    def test_sanitize_credit_card(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "4571234567890111")
-        assert result == FILTER_MASK
-
-    def test_sanitize_credit_card_amex(self):
-        # AMEX numbers are 15 digits, not 16
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "378282246310005")
-        assert result == FILTER_MASK
-
-    def test_sanitize_credit_card_discover(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "6011111111111117")
-        assert result == FILTER_MASK
-
-    def test_sanitize_credit_card_visa(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "4111111111111111")
-        assert result == FILTER_MASK
-
-    def test_sanitize_credit_card_mastercard(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "5555555555554444")
-        assert result == FILTER_MASK
-
-    def test_sanitize_credit_card_within_value(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "'4571234567890111'")
-        assert result == FILTER_MASK
-
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "foo 4571234567890111")
-        assert result == FILTER_MASK
-
-    def test_does_not_sanitize_timestamp_looks_like_card(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "1453843029218310")
-        assert result == "1453843029218310"
-
-    def test_sanitize_url(self):
-        proc = SensitiveDataFilter()
-        result = proc.sanitize("foo", "pg://matt:pass@localhost/1")
-        assert result == "pg://matt:%s@localhost/1" % FILTER_MASK
-        result = proc.sanitize("foo", "foo 'redis://redis:foo@localhost:6379/0' bar")
-        assert result == "foo 'redis://redis:%s@localhost:6379/0' bar" % FILTER_MASK
-        result = proc.sanitize("foo", "'redis://redis:foo@localhost:6379/0'")
-        assert result == "'redis://redis:%s@localhost:6379/0'" % FILTER_MASK
-        result = proc.sanitize("foo", "foo redis://redis:foo@localhost:6379/0 bar")
-        assert result == "foo redis://redis:%s@localhost:6379/0 bar" % FILTER_MASK
-        result = proc.sanitize(
-            "foo", "foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1"
-        )
-        assert result == "foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1" % (
-            FILTER_MASK,
-            FILTER_MASK,
-        )
-        # Make sure we don't mess up any other url.
-        # This url specifically if passed through urlunsplit(urlsplit()),
-        # it'll change the value.
-        result = proc.sanitize("foo", "postgres:///path")
-        assert result == "postgres:///path"
-        # Don't be too overly eager within JSON strings an catch the right field.
-        result = proc.sanitize(
-            "foo",
-            '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:pass@localhost/1","d":"lol"}',
-        )
-        assert (
-            result
-            == '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:%s@localhost/1","d":"lol"}'
-            % FILTER_MASK
-        )
-
-    def test_sanitize_http_body(self):
-        data = {"request": {"data": '{"email":"zzzz@gmail.com","password":"zzzzz"}'}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert "request" in data
-        http = data["request"]
-        assert http["data"] == FILTER_MASK
-
-    def test_does_not_fail_on_non_string(self):
-        data = {"extra": {"foo": 1}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"foo": 1}
-
-    def test_does_sanitize_public_key(self):
-        data = {"extra": {"s": PUBLIC_KEY}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"s": FILTER_MASK}
-
-    def test_does_sanitize_private_key(self):
-        data = {"extra": {"s": PRIVATE_KEY}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"s": FILTER_MASK}
-
-    def test_does_sanitize_encrypted_private_key(self):
-        data = {"extra": {"s": ENCRYPTED_PRIVATE_KEY}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"s": FILTER_MASK}
-
-    def test_does_sanitize_rsa_private_key(self):
-        data = {"extra": {"s": RSA_PRIVATE_KEY}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"s": FILTER_MASK}
-
-    def test_does_sanitize_social_security_number(self):
-        data = {"extra": {"s": "123-45-6789"}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-        assert data["extra"] == {"s": FILTER_MASK}
-
-    def test_exclude_fields_on_field_name(self):
-        data = {"extra": {"password": "123-45-6789"}}
-
-        proc = SensitiveDataFilter(exclude_fields=["password"])
-        proc.apply(data)
-        assert data["extra"] == {"password": "123-45-6789"}
-
-    def test_explicit_fields(self):
-        data = {"extra": {"mystuff": "xxx"}}
-
-        proc = SensitiveDataFilter(fields=["mystuff"])
-        proc.apply(data)
-        assert data["extra"]["mystuff"] == FILTER_MASK
-
-    def test_explicit_fields_case_insensitive(self):
-        data = {"extra": {"myStuff": "xxx"}}
-
-        proc = SensitiveDataFilter(fields=["myStuff"])
-        proc.apply(data)
-        assert data["extra"]["myStuff"] == FILTER_MASK
-
-        data = {"extra": {"MYSTUFF": "xxx"}}
-
-        proc = SensitiveDataFilter(fields=["myStuff"])
-        proc.apply(data)
-        assert data["extra"]["MYSTUFF"] == FILTER_MASK
-
-        data = {"extra": {"mystuff": "xxx"}}
-
-        proc = SensitiveDataFilter(fields=["myStuff"])
-        proc.apply(data)
-        assert data["extra"]["mystuff"] == FILTER_MASK
-
-    def test_exclude_fields_on_field_value(self):
-        data = {"extra": {"foobar": "123-45-6789"}}
-
-        proc = SensitiveDataFilter(exclude_fields=["foobar"])
-        proc.apply(data)
-        assert data["extra"] == {"foobar": "123-45-6789"}
-
-    def test_empty_field(self):
-        data = {"extra": {"foobar": "xxx"}}
-
-        proc = SensitiveDataFilter(fields=[""])
-        proc.apply(data)
-        assert data["extra"] == {"foobar": "xxx"}
-
-    def test_should_have_mysql_pwd_as_a_default(self):
-        proc = SensitiveDataFilter(include_defaults=True)
-        assert proc.sanitize("MYSQL_PWD", "the one") == FILTER_MASK
-        assert proc.sanitize("mysql_pwd", "the two") == FILTER_MASK
-
-    def test_authorization_scrubbing(self):
-        proc = SensitiveDataFilter(include_defaults=True)
-        assert proc.sanitize("authorization", "foobar") == FILTER_MASK
-        assert proc.sanitize("auth", "foobar") == FILTER_MASK
-        assert proc.sanitize("auXth", "foobar") == "foobar"
-
-    def test_doesnt_scrub_not_scrubbed(self):
-        proc = SensitiveDataFilter(include_defaults=True)
-        assert proc.sanitize("is_authenticated", "foobar") == FILTER_MASK
-        assert proc.sanitize("is_authenticated", "null") == "null"
-        assert proc.sanitize("is_authenticated", True) is True
-
-    def test_csp_blocked_uri(self):
-        data = {"csp": {"blocked_uri": "https://example.com/?foo=4571234567890111&bar=baz"}}
-
-        proc = SensitiveDataFilter()
-        proc.apply(data)
-
-        assert "csp" in data
-        csp = data["csp"]
-        assert csp["blocked_uri"] == "https://example.com/?foo=[Filtered]&bar=baz"
-
-    def test_breadcrumb_message(self):
-        data = {
-            "breadcrumbs": {
-                "values": [
-                    {
-                        "message": "SELECT session_key FROM django_session WHERE session_key = 'abcdefg'"
-                    }
-                ]
-            }
-        }
-
-        proc = SensitiveDataFilter(fields=["session_key"])
-        proc.apply(data)
-
-        assert data["breadcrumbs"]["values"][0]["message"] == FILTER_MASK
