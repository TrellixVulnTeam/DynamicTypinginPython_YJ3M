commit 55e3aaad106d2b5e4266709bb0e24f1e92f1fb5d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Sep 14 09:32:27 2018 -0700

    feat(health): Add "drilldowns" for Browsers and Devices (#9732)

diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index c498120652..ac2ada7e43 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -306,20 +306,27 @@ export const ProjectKey = PropTypes.shape({
   cdnSdkUrl: PropTypes.string,
 });
 
+export const EChartsData = PropTypes.arrayOf(
+  PropTypes.oneOfType([
+    // `PercentageBarChart` has a fixed dataset of 0, 25, 50, 100
+    PropTypes.number,
+
+    // e.g. ['Category', 123, 123, 123]
+    PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),
+
+    // e.g. PieCharts
+    PropTypes.shape({
+      name: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+      value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
+    }),
+  ])
+);
+
 export const EChartsSeriesUnit = PropTypes.shape({
   type: PropTypes.oneOf(['line', 'bar', 'pie']),
   showSymbol: PropTypes.bool,
   name: PropTypes.string,
-  data: PropTypes.arrayOf(
-    PropTypes.oneOfType([
-      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])),
-      // e.g. PieCharts
-      PropTypes.shape({
-        name: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
-        value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
-      }),
-    ])
-  ),
+  data: EChartsData,
 });
 
 export const EChartsSeries = PropTypes.arrayOf(EChartsSeriesUnit);
@@ -463,15 +470,7 @@ export const EChartsAxis = PropTypes.shape({
   // color: 'red'
   // }
   // }, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
-  data: PropTypes.arrayOf(
-    PropTypes.oneOfType([
-      PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.number])),
-      PropTypes.shape({
-        name: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
-        value: PropTypes.number,
-      }),
-    ])
-  ),
+  data: EChartsData,
 
   // axisPointer settings on the axis.
   axisPointer: PropTypes.object,
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx b/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
index a17d103052..139ecdd1eb 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/browsers.jsx
@@ -1,24 +1,31 @@
 import {Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
 import React from 'react';
 
 import {t} from 'app/locale';
+import OrganizationHealthDetails from 'app/views/organizationHealth/details';
 import PieChart from 'app/components/charts/pieChart';
 
+import DetailContainer from './detailContainer';
 import EventsTableChart from './eventsTableChart';
-import Header from './styles/header';
 import HealthPanelChart from './styles/healthPanelChart';
 import HealthRequest from './util/healthRequest';
-import withHealth from './util/withHealth';
 
-class OrganizationHealthBrowsers extends React.Component {
+class OrganizationHealthBrowsersOverview extends React.Component {
+  static propTypes = {
+    tag: PropTypes.string,
+    title: PropTypes.string,
+    onSetSpecifier: PropTypes.func,
+  };
+
   render() {
+    const {tag, title, onSetSpecifier} = this.props;
+
     return (
       <React.Fragment>
-        <Header>{t('Browsers')}</Header>
-
         <Flex>
           <HealthRequest
-            tag="browser.name"
+            tag={tag}
             showLoading
             includeTimeseries={false}
             includeTop
@@ -31,11 +38,11 @@ class OrganizationHealthBrowsers extends React.Component {
                   height={200}
                   series={[
                     {
-                      seriesName: t('Browsers'),
+                      seriesName: title,
                       data: tagData.map(([name, value]) => ({name, value})),
                     },
                   ]}
-                  title={t('Browsers')}
+                  title={title}
                 >
                   {({series}) => <PieChart height={300} series={series} selectOnRender />}
                 </HealthPanelChart>
@@ -54,6 +61,7 @@ class OrganizationHealthBrowsers extends React.Component {
             {({tagData}) => {
               return (
                 <HealthPanelChart
+                  showLegend={false}
                   height={200}
                   series={[
                     {
@@ -72,7 +80,7 @@ class OrganizationHealthBrowsers extends React.Component {
 
         <Flex>
           <HealthRequest
-            tag="browser.name"
+            tag={tag}
             showLoading
             includeTimeseries={false}
             includeTop
@@ -82,8 +90,9 @@ class OrganizationHealthBrowsers extends React.Component {
             {({tagDataWithPercentages}) => {
               return (
                 <EventsTableChart
-                  headers={[t('Browser'), t('Events'), t('Percentage'), t('Last event')]}
+                  headers={[title, t('Events'), t('Percentage'), t('Last event')]}
                   data={tagDataWithPercentages}
+                  onRowClick={onSetSpecifier}
                 />
               );
             }}
@@ -93,6 +102,29 @@ class OrganizationHealthBrowsers extends React.Component {
     );
   }
 }
+class OrganizationHealthBrowsers extends React.Component {
+  render() {
+    const title = t('Browsers');
+
+    return (
+      <DetailContainer title={title}>
+        {({shouldShowDetails, setSpecifier}) => (
+          <React.Fragment>
+            {shouldShowDetails ? (
+              <OrganizationHealthDetails title={title} />
+            ) : (
+              <OrganizationHealthBrowsersOverview
+                tag="browser.name"
+                title={title}
+                onSetSpecifier={setSpecifier}
+              />
+            )}
+          </React.Fragment>
+        )}
+      </DetailContainer>
+    );
+  }
+}
 
-export default withHealth(OrganizationHealthBrowsers);
+export default OrganizationHealthBrowsers;
 export {OrganizationHealthBrowsers};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx b/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx
new file mode 100644
index 0000000000..998ded4649
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/detailContainer.jsx
@@ -0,0 +1,60 @@
+import {Link, withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import InlineSvg from 'app/components/inlineSvg';
+import recreateRoute from 'app/utils/recreateRoute';
+import space from 'app/styles/space';
+
+import {HealthContextActions} from './propTypes';
+import Header from './styles/header';
+import withHealth from './util/withHealth';
+
+class DetailContainer extends React.Component {
+  static propTypes = {
+    title: PropTypes.node,
+    router: PropTypes.object,
+    actions: HealthContextActions,
+    specifiers: PropTypes.arrayOf(PropTypes.string),
+  };
+
+  render() {
+    const {router, actions, specifiers, children, title} = this.props;
+    // destructure `location` because we don't want to pass query string to breadcrumb
+    // eslint-disable-next-line no-unused-vars
+    const {location, ...routerWithoutQueryString} = router;
+    const shouldShowDetails = specifiers && !!specifiers.length;
+
+    return (
+      <React.Fragment>
+        <Header>
+          {shouldShowDetails ? (
+            <React.Fragment>
+              <Link to={recreateRoute('', routerWithoutQueryString)}>{title}</Link>
+              <Chevron /> {specifiers[0].split(':')[1]}
+            </React.Fragment>
+          ) : (
+            title
+          )}
+        </Header>
+
+        {children({
+          shouldShowDetails,
+          title,
+          specifiers,
+          setSpecifier: actions.setSpecifier,
+        })}
+      </React.Fragment>
+    );
+  }
+}
+
+export default withRouter(withHealth(DetailContainer));
+export {DetailContainer};
+
+const Chevron = styled(props => <InlineSvg src="icon-chevron-right" {...props} />)`
+  height: 14px;
+  width: 14px;
+  margin: 0 ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/details.jsx b/src/sentry/static/sentry/app/views/organizationHealth/details.jsx
new file mode 100644
index 0000000000..fd8a3e5643
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/details.jsx
@@ -0,0 +1,72 @@
+import {Flex} from 'grid-emotion';
+import React from 'react';
+
+import {t} from 'app/locale';
+import LineChart from 'app/components/charts/lineChart';
+import PieChart from 'app/components/charts/pieChart';
+
+import HealthPanelChart from './styles/healthPanelChart';
+import HealthRequest from './util/healthRequest';
+import withHealth from './util/withHealth';
+
+class OrganizationHealthDetails extends React.Component {
+  render() {
+    return (
+      <React.Fragment>
+        <Flex>
+          <HealthRequest
+            tag="error.handled"
+            includePrevious
+            showLoading
+            interval="1d"
+            includeTimeseries
+            includeTimeAggregation
+            timeAggregationSeriesName={t('Errors')}
+          >
+            {({timeseriesData, timeAggregatedData, previousTimeseriesData}) => {
+              return (
+                <HealthPanelChart
+                  height={200}
+                  showLegend
+                  series={[timeAggregatedData]}
+                  previousPeriod={previousTimeseriesData}
+                  title={t('Errors')}
+                >
+                  {props => <LineChart isGroupedByDate {...props} />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+
+          <HealthRequest
+            tag="os.name"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            limit={5}
+          >
+            {({tagData}) => {
+              return (
+                <HealthPanelChart
+                  showLegend={false}
+                  height={200}
+                  series={[
+                    {
+                      seriesName: t('By Device'),
+                      data: tagData.map(([name, value]) => ({name, value})),
+                    },
+                  ]}
+                  title={t('By Device')}
+                >
+                  {({series}) => <PieChart height={300} series={series} selectOnRender />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+      </React.Fragment>
+    );
+  }
+}
+export default withHealth(OrganizationHealthDetails);
+export {OrganizationHealthDetails};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx b/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx
index 29540a27fd..2cdfec202a 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/devices.jsx
@@ -1,62 +1,89 @@
 import {Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
 import React from 'react';
 
 import {t} from 'app/locale';
+import OrganizationHealthDetails from 'app/views/organizationHealth/details';
 import PieChart from 'app/components/charts/pieChart';
 
+import DetailContainer from './detailContainer';
 import EventsTableChart from './eventsTableChart';
-import Header from './styles/header';
 import HealthPanelChart from './styles/healthPanelChart';
 import HealthRequest from './util/healthRequest';
-import withHealth from './util/withHealth';
+
+class OrganizationHealthDevicesOverview extends React.Component {
+  static propTypes = {
+    tag: PropTypes.string,
+    title: PropTypes.string,
+    onSetSpecifier: PropTypes.func,
+  };
+
+  render() {
+    const {title, tag, onSetSpecifier} = this.props;
+    return (
+      <HealthRequest
+        tag={tag}
+        showLoading
+        includeTimeseries={false}
+        includeTop
+        includePercentages
+        limit={5}
+      >
+        {({tagData, tagDataWithPercentages}) => (
+          <React.Fragment>
+            <Flex>
+              <HealthPanelChart
+                height={300}
+                showLegend={false}
+                series={[
+                  {
+                    seriesName: title,
+                    data: tagData.map(([name, value]) => ({name, value})),
+                  },
+                ]}
+                title={title}
+              >
+                {({series}) => <PieChart height={300} selectOnRender series={series} />}
+              </HealthPanelChart>
+            </Flex>
+
+            <Flex>
+              <EventsTableChart
+                headers={[t('Device'), t('Events'), t('Percentage'), t('Last event')]}
+                data={tagDataWithPercentages}
+                onRowClick={onSetSpecifier}
+              />
+            </Flex>
+          </React.Fragment>
+        )}
+      </HealthRequest>
+    );
+  }
+}
 
 class OrganizationHealthDevices extends React.Component {
   render() {
+    const title = t('Devices');
+
     return (
-      <React.Fragment>
-        <Flex justify="space-between">
-          <Header>{t('Devices')}</Header>
-        </Flex>
-
-        <HealthRequest
-          tag="device"
-          showLoading
-          includeTimeseries={false}
-          includeTop
-          includePercentages
-          limit={5}
-        >
-          {({tagData, tagDataWithPercentages}) => (
-            <React.Fragment>
-              <Flex>
-                <HealthPanelChart
-                  height={200}
-                  showLegend={false}
-                  series={[
-                    {
-                      seriesName: t('Devices'),
-                      data: tagData.map(([name, value]) => ({name, value})),
-                    },
-                  ]}
-                  title={t('Devices')}
-                >
-                  {({series}) => <PieChart height={300} selectOnRender series={series} />}
-                </HealthPanelChart>
-              </Flex>
-
-              <Flex>
-                <EventsTableChart
-                  headers={[t('Device'), t('Events'), t('Percentage'), t('Last event')]}
-                  data={tagDataWithPercentages}
-                />
-              </Flex>
-            </React.Fragment>
-          )}
-        </HealthRequest>
-      </React.Fragment>
+      <DetailContainer title={title}>
+        {({shouldShowDetails, setSpecifier}) => (
+          <React.Fragment>
+            {shouldShowDetails ? (
+              <OrganizationHealthDetails title={title} />
+            ) : (
+              <OrganizationHealthDevicesOverview
+                tag="device"
+                title={title}
+                onSetSpecifier={setSpecifier}
+              />
+            )}
+          </React.Fragment>
+        )}
+      </DetailContainer>
     );
   }
 }
 
-export default withHealth(OrganizationHealthDevices);
+export default OrganizationHealthDevices;
 export {OrganizationHealthDevices};
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx
index 27ddcf88ab..97cfd111fa 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/eventsTableChart.jsx
@@ -43,6 +43,7 @@ const StyledDelta = styled(Flex)`
 class EventsTableChart extends React.Component {
   static propTypes = {
     headers: PropTypes.arrayOf(PropTypes.node),
+    onRowClick: PropTypes.func,
     data: PropTypes.arrayOf(
       PropTypes.shape({
         name: PropTypes.node,
@@ -53,6 +54,15 @@ class EventsTableChart extends React.Component {
     ),
   };
 
+  static defaultProps = {
+    onRowClick: () => {},
+  };
+
+  handleRowClick = ({specifier}, e) => {
+    const {onRowClick} = this.props;
+    onRowClick(specifier, e);
+  };
+
   render() {
     const {headers, data} = this.props;
 
@@ -73,8 +83,8 @@ class EventsTableChart extends React.Component {
           </React.Fragment>,
           <LastEvent key="time-ago">n/a</LastEvent>,
         ])}
-        renderRow={({items}) => (
-          <React.Fragment>
+        renderRow={({items, rowIndex, ...other}) => (
+          <Row onClick={this.handleRowClick} data={data} rowIndex={rowIndex}>
             <NameAndEventsContainer justify="space-between" align="center">
               {items[0]}
               <div>{items[1]}</div>
@@ -87,13 +97,29 @@ class EventsTableChart extends React.Component {
                 {items[3]}
               </Flex>
             </PercentageContainer>
-          </React.Fragment>
+          </Row>
         )}
       />
     );
   }
 }
 
+const Row = styled(function RowComponent({className, data, rowIndex, onClick, children}) {
+  return (
+    <div
+      className={className}
+      onClick={e =>
+        typeof onClick === 'function' && onClick(data[rowIndex], e)}
+    >
+      {children}
+    </div>
+  );
+})`
+  display: flex;
+  flex: 1;
+  cursor: pointer;
+`;
+
 const StyledEventsTableChart = styled(EventsTableChart)`
   width: 100%;
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
index 900f9f02bd..b98924548d 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/styles/header.jsx
@@ -4,6 +4,7 @@ import {Flex} from 'grid-emotion';
 import space from 'app/styles/space';
 
 const Header = styled(Flex)`
+  align-items: center;
   font-size: ${p => p.theme.fontSizeExtraLarge};
   margin-bottom: ${space(2)};
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx
new file mode 100644
index 0000000000..6f2a4611ac
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/__mocks__/withHealth.jsx
@@ -0,0 +1,30 @@
+import React from 'react';
+
+import getDisplayName from 'app/utils/getDisplayName';
+import withLatestContext from 'app/utils/withLatestContext';
+
+jest.mock('app/utils/withLatestContext');
+
+const ACTIONS = {
+  actions: {
+    setSpecifier: jest.fn(),
+    updateParams: jest.fn(),
+  },
+};
+
+const withHealthMock = WrappedComponent => {
+  const WrappedWithLatestContext = withLatestContext(WrappedComponent);
+
+  class WithHealthMockWrapper extends React.Component {
+    render() {
+      return <WrappedWithLatestContext {...ACTIONS} {...this.props} />;
+    }
+  }
+  WithHealthMockWrapper.displayName = `withHealthMock(${getDisplayName(
+    WrappedComponent
+  )})`;
+
+  return WithHealthMockWrapper;
+};
+
+export default withHealthMock;
diff --git a/tests/js/spec/views/organizationHealth/browsers.spec.jsx b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
index 9d9008c042..4afa4d13ef 100644
--- a/tests/js/spec/views/organizationHealth/browsers.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
@@ -3,6 +3,7 @@ import {mount} from 'enzyme';
 
 import OrganizationHealthBrowsers from 'app/views/organizationHealth/browsers';
 
+jest.mock('app/views/organizationHealth/util/withHealth');
 jest.mock('app/utils/withLatestContext');
 
 describe('OrganizationHealthBrowsers', function() {
diff --git a/tests/js/spec/views/organizationHealth/devices.spec.jsx b/tests/js/spec/views/organizationHealth/devices.spec.jsx
index 72f159fc08..fd3a55db0c 100644
--- a/tests/js/spec/views/organizationHealth/devices.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/devices.spec.jsx
@@ -4,6 +4,7 @@ import {mount} from 'enzyme';
 import OrganizationHealthDevices from 'app/views/organizationHealth/devices';
 
 jest.mock('app/utils/withLatestContext');
+jest.mock('app/views/organizationHealth/util/withHealth');
 
 describe('OrganizationHealthDevices', function() {
   const org = TestStubs.Organization();
@@ -23,7 +24,11 @@ describe('OrganizationHealthDevices', function() {
 
   it('renders with PieChart, and EventTableChart', async function() {
     let wrapper = mount(
-      <OrganizationHealthDevices organization={org} />,
+      <OrganizationHealthDevices
+        actions={{updateParams: jest.fn(), setSpecifier: jest.fn()}}
+        router={TestStubs.router()}
+        organization={org}
+      />,
       TestStubs.routerContext()
     );
     await tick();
