commit dac4fd5c91a711713d75ec1faed022c333ac2cde
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 5 18:22:04 2017 -0700

    pep8: format tests

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 520f6b659c..ae24672ddb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1096,7 +1096,7 @@ SENTRY_ROLES = ({'id': 'member',
                                 'project:read',
                                 'org:read',
                                 'member:read',
-                                 'team:read',
+                                'team:read',
                                 ]),
                  },
                 {'id': 'admin',
diff --git a/tests/bitfield/tests.py b/tests/bitfield/tests.py
index d2b72ed6f5..375e334c82 100644
--- a/tests/bitfield/tests.py
+++ b/tests/bitfield/tests.py
@@ -160,7 +160,8 @@ class BitFieldTest(TestCase):
         cursor = connection.cursor()
         flags_field = BitFieldTestModel._meta.get_field('flags')
         flags_db_column = flags_field.db_column or flags_field.name
-        cursor.execute("INSERT INTO %s (%s) VALUES (-1)" % (BitFieldTestModel._meta.db_table, flags_db_column))
+        cursor.execute("INSERT INTO %s (%s) VALUES (-1)" %
+                       (BitFieldTestModel._meta.db_table, flags_db_column))
         # There should only be the one row we inserted through the cursor.
         instance = BitFieldTestModel.objects.get(flags=-1)
         self.assertTrue(instance.flags.FLAG_0)
@@ -174,27 +175,44 @@ class BitFieldTest(TestCase):
 
     def test_select(self):
         BitFieldTestModel.objects.create(flags=3)
-        self.assertTrue(BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_1).exists())
-        self.assertTrue(BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists())
-        self.assertFalse(BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_0).exists())
-        self.assertFalse(BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_1).exists())
+        self.assertTrue(BitFieldTestModel.objects.filter(
+            flags=BitFieldTestModel.flags.FLAG_1).exists())
+        self.assertTrue(BitFieldTestModel.objects.filter(
+            flags=BitFieldTestModel.flags.FLAG_0).exists())
+        self.assertFalse(BitFieldTestModel.objects.exclude(
+            flags=BitFieldTestModel.flags.FLAG_0).exists())
+        self.assertFalse(BitFieldTestModel.objects.exclude(
+            flags=BitFieldTestModel.flags.FLAG_1).exists())
 
     def test_update(self):
         instance = BitFieldTestModel.objects.create(flags=0)
         self.assertFalse(instance.flags.FLAG_0)
 
-        BitFieldTestModel.objects.filter(pk=instance.pk).update(flags=bitor(F('flags'), BitFieldTestModel.flags.FLAG_1))
+        BitFieldTestModel.objects.filter(
+            pk=instance.pk).update(
+            flags=bitor(
+                F('flags'),
+                BitFieldTestModel.flags.FLAG_1))
         instance = BitFieldTestModel.objects.get(pk=instance.pk)
         self.assertTrue(instance.flags.FLAG_1)
 
-        BitFieldTestModel.objects.filter(pk=instance.pk).update(flags=bitor(F('flags'), ((~BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_3))))
+        BitFieldTestModel.objects.filter(
+            pk=instance.pk).update(
+            flags=bitor(
+                F('flags'),
+                ((~BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_3))))
         instance = BitFieldTestModel.objects.get(pk=instance.pk)
         self.assertFalse(instance.flags.FLAG_0)
         self.assertTrue(instance.flags.FLAG_1)
         self.assertTrue(instance.flags.FLAG_3)
-        self.assertFalse(BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists())
-
-        BitFieldTestModel.objects.filter(pk=instance.pk).update(flags=bitand(F('flags'), ~BitFieldTestModel.flags.FLAG_3))
+        self.assertFalse(BitFieldTestModel.objects.filter(
+            flags=BitFieldTestModel.flags.FLAG_0).exists())
+
+        BitFieldTestModel.objects.filter(
+            pk=instance.pk).update(
+            flags=bitand(
+                F('flags'),
+                ~BitFieldTestModel.flags.FLAG_3))
         instance = BitFieldTestModel.objects.get(pk=instance.pk)
         self.assertFalse(instance.flags.FLAG_0)
         self.assertTrue(instance.flags.FLAG_1)
@@ -206,16 +224,24 @@ class BitFieldTest(TestCase):
 
         instance.flags.FLAG_1 = True
 
-        BitFieldTestModel.objects.filter(pk=instance.pk).update(flags=bitor(F('flags'), instance.flags))
+        BitFieldTestModel.objects.filter(
+            pk=instance.pk).update(
+            flags=bitor(
+                F('flags'),
+                instance.flags))
         instance = BitFieldTestModel.objects.get(pk=instance.pk)
         self.assertTrue(instance.flags.FLAG_1)
 
     def test_negate(self):
-        BitFieldTestModel.objects.create(flags=BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_1)
+        BitFieldTestModel.objects.create(
+            flags=BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_1)
         BitFieldTestModel.objects.create(flags=BitFieldTestModel.flags.FLAG_1)
-        self.assertEqual(BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_0).count(), 1)
-        self.assertEqual(BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_1).count(), 0)
-        self.assertEqual(BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_2).count(), 2)
+        self.assertEqual(BitFieldTestModel.objects.filter(
+            flags=~BitFieldTestModel.flags.FLAG_0).count(), 1)
+        self.assertEqual(BitFieldTestModel.objects.filter(
+            flags=~BitFieldTestModel.flags.FLAG_1).count(), 0)
+        self.assertEqual(BitFieldTestModel.objects.filter(
+            flags=~BitFieldTestModel.flags.FLAG_2).count(), 2)
 
     def test_default_value(self):
         instance = BitFieldTestModel.objects.create()
@@ -257,7 +283,8 @@ class BitFieldTest(TestCase):
         except ValueError:
             self.fail("It should work well with these flags")
 
-        self.assertEquals(bf.flags, ['zero', 'first', 'second', '', '', '', '', '', '', '', 'tenth'])
+        self.assertEquals(bf.flags, ['zero', 'first', 'second',
+                                     '', '', '', '', '', '', '', 'tenth'])
         self.assertRaises(ValueError, BitField, flags={})
         self.assertRaises(ValueError, BitField, flags={'wrongkey': 'wrongkey'})
         self.assertRaises(ValueError, BitField, flags={'1': 'non_int_key'})
@@ -333,9 +360,9 @@ class CompositeBitFieldTest(TestCase):
     def test_hasattr(self):
         inst = CompositeBitFieldTestModel()
         self.assertEqual(hasattr(inst.flags, 'flag_0'),
-            hasattr(inst.flags_1, 'flag_0'))
+                         hasattr(inst.flags_1, 'flag_0'))
         self.assertEqual(hasattr(inst.flags, 'flag_4'),
-            hasattr(inst.flags_2, 'flag_4'))
+                         hasattr(inst.flags_2, 'flag_4'))
 
 
 class BitFormFieldTest(TestCase):
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index a4a281941b..caccf520df 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -93,6 +93,7 @@ class RavenIntegrationTest(TransactionTestCase):
     This mocks the test server and specifically tests behavior that would
     happen between Raven <--> Sentry over HTTP communication.
     """
+
     def setUp(self):
         self.user = self.create_user('coreapi@example.com')
         self.project = self.create_project()
@@ -112,7 +113,8 @@ class RavenIntegrationTest(TransactionTestCase):
 
     def sendRemote(self, url, data, headers={}):
         content_type = headers.pop('Content-Type', None)
-        headers = dict(('HTTP_' + k.replace('-', '_').upper(), v) for k, v in six.iteritems(headers))
+        headers = dict(('HTTP_' + k.replace('-', '_').upper(), v)
+                       for k, v in six.iteritems(headers))
         if isinstance(data, six.text_type):
             data = data.encode('utf-8')
         resp = self.client.post(
diff --git a/tests/sentry/api/endpoints/test_onboarding.py b/tests/sentry/api/endpoints/test_onboarding.py
index d7a4192c50..2aa2d34880 100644
--- a/tests/sentry/api/endpoints/test_onboarding.py
+++ b/tests/sentry/api/endpoints/test_onboarding.py
@@ -13,7 +13,8 @@ class SkipOnboardingTaskTest(APITestCase):
         self.login_as(user=self.user)
 
         organization = self.create_organization(name='foo', owner=self.user)
-        url = reverse('sentry-api-0-organization-onboardingtasks', kwargs={'organization_slug': organization.slug})
+        url = reverse('sentry-api-0-organization-onboardingtasks',
+                      kwargs={'organization_slug': organization.slug})
 
         resp = self.client.post(url, data={'task': '9', 'status': 'skipped'}, format='json')
         assert resp.status_code == 204
diff --git a/tests/sentry/api/endpoints/test_organization_access_request_details.py b/tests/sentry/api/endpoints/test_organization_access_request_details.py
index b08fde4e14..d76a170a3b 100644
--- a/tests/sentry/api/endpoints/test_organization_access_request_details.py
+++ b/tests/sentry/api/endpoints/test_organization_access_request_details.py
@@ -26,7 +26,8 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
             team=team,
         )
 
-        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+        path = reverse('sentry-api-0-organization-access-request-details',
+                       args=[organization.slug, access_request.id])
 
         self.login_as(self.user)
 
@@ -61,7 +62,8 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
             team=team,
         )
 
-        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+        path = reverse('sentry-api-0-organization-access-request-details',
+                       args=[organization.slug, access_request.id])
 
         self.login_as(self.user)
 
@@ -104,7 +106,8 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
             teams=[team],
         )
 
-        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+        path = reverse('sentry-api-0-organization-access-request-details',
+                       args=[organization.slug, access_request.id])
 
         self.login_as(admin_user)
 
@@ -141,7 +144,8 @@ class UpdateOrganizationAccessRequestTest(APITestCase):
             teams=[],
         )
 
-        path = reverse('sentry-api-0-organization-access-request-details', args=[organization.slug, access_request.id])
+        path = reverse('sentry-api-0-organization-access-request-details',
+                       args=[organization.slug, access_request.id])
 
         self.login_as(admin_user)
 
diff --git a/tests/sentry/api/endpoints/test_organization_issues_new.py b/tests/sentry/api/endpoints/test_organization_issues_new.py
index 8afca7b2c3..9115ba087d 100644
--- a/tests/sentry/api/endpoints/test_organization_issues_new.py
+++ b/tests/sentry/api/endpoints/test_organization_issues_new.py
@@ -17,7 +17,14 @@ class OrganizationIssuesNewTest(APITestCase):
         project1 = self.create_project(organization=org, name='foo')
         project2 = self.create_project(organization=org, name='bar')
         group1 = self.create_group(checksum='a' * 32, project=project1, score=10, first_seen=now)
-        group2 = self.create_group(checksum='b' * 32, project=project2, score=5, first_seen=now + timedelta(seconds=1))
+        group2 = self.create_group(
+            checksum='b' *
+            32,
+            project=project2,
+            score=5,
+            first_seen=now +
+            timedelta(
+                seconds=1))
         member = OrganizationMember.objects.get(
             user=user,
             organization=org,
diff --git a/tests/sentry/api/endpoints/test_organization_member_details.py b/tests/sentry/api/endpoints/test_organization_member_details.py
index a198dcc34e..63f89e4f46 100644
--- a/tests/sentry/api/endpoints/test_organization_member_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_details.py
@@ -21,7 +21,8 @@ class UpdateOrganizationMemberTest(APITestCase):
             role='member',
         )
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, member_om.id])
 
         self.login_as(self.user)
 
@@ -47,7 +48,8 @@ class UpdateOrganizationMemberTest(APITestCase):
             flags=1,
         )
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, member_om.id])
 
         self.login_as(self.user)
 
@@ -68,7 +70,8 @@ class UpdateOrganizationMemberTest(APITestCase):
             role='member',
         )
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, member_om.id])
 
         self.login_as(self.user)
 
@@ -90,7 +93,8 @@ class DeleteOrganizationMemberTest(APITestCase):
             role='member',
         )
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, member_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, member_om.id])
 
         self.login_as(self.user)
 
@@ -118,7 +122,8 @@ class DeleteOrganizationMemberTest(APITestCase):
 
         assert owner_om.role == 'owner'
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, owner_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, owner_om.id])
 
         self.login_as(other_user)
 
@@ -147,7 +152,8 @@ class DeleteOrganizationMemberTest(APITestCase):
 
         assert owner_om.role == 'owner'
 
-        path = reverse('sentry-api-0-organization-member-details', args=[organization.slug, owner_om.id])
+        path = reverse('sentry-api-0-organization-member-details',
+                       args=[organization.slug, owner_om.id])
 
         self.login_as(self.user)
 
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 9eb764b9b6..19189b0dd8 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -667,11 +667,16 @@ class OrganizationReleaseCreateTest(APITestCase):
             organization=org,
             scope_list=['project:read'],
         )
-        response = self.client.post(url,
+        response = self.client.post(
+            url,
             data={
                 'version': '1.2.1',
-                'projects': [project1.slug]
-            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(bad_api_key.key)))
+                'projects': [
+                    project1.slug]},
+            HTTP_AUTHORIZATION='Basic ' +
+            b64encode(
+                '{}:'.format(
+                    bad_api_key.key)))
         assert response.status_code == 403
 
         # test wrong org, right permissions level
@@ -679,11 +684,16 @@ class OrganizationReleaseCreateTest(APITestCase):
             organization=org2,
             scope_list=['project:write'],
         )
-        response = self.client.post(url,
+        response = self.client.post(
+            url,
             data={
                 'version': '1.2.1',
-                'projects': [project1.slug]
-            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(wrong_org_api_key.key)))
+                'projects': [
+                    project1.slug]},
+            HTTP_AUTHORIZATION='Basic ' +
+            b64encode(
+                '{}:'.format(
+                    wrong_org_api_key.key)))
         assert response.status_code == 403
 
         # test right org, right permissions level
@@ -691,11 +701,16 @@ class OrganizationReleaseCreateTest(APITestCase):
             organization=org,
             scope_list=['project:write'],
         )
-        response = self.client.post(url,
+        response = self.client.post(
+            url,
             data={
                 'version': '1.2.1',
-                'projects': [project1.slug]
-            }, HTTP_AUTHORIZATION='Basic ' + b64encode('{}:'.format(good_api_key.key)))
+                'projects': [
+                    project1.slug]},
+            HTTP_AUTHORIZATION='Basic ' +
+            b64encode(
+                '{}:'.format(
+                    good_api_key.key)))
         assert response.status_code == 201, response.content
 
     @patch('sentry.tasks.commits.fetch_commits')
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 6ffc5a803e..424ef480d0 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -128,11 +128,18 @@ class ProjectUpdateTest(APITestCase):
         assert project.get_option('sentry:origins', []) == options['sentry:origins'].split('\n')
         assert project.get_option('sentry:resolve_age', 0) == options['sentry:resolve_age']
         assert project.get_option('sentry:scrub_data', True) == options['sentry:scrub_data']
-        assert project.get_option('sentry:scrub_defaults', True) == options['sentry:scrub_defaults']
-        assert project.get_option('sentry:sensitive_fields', []) == options['sentry:sensitive_fields']
+        assert project.get_option(
+            'sentry:scrub_defaults',
+            True) == options['sentry:scrub_defaults']
+        assert project.get_option(
+            'sentry:sensitive_fields',
+            []) == options['sentry:sensitive_fields']
         assert project.get_option('sentry:safe_fields', []) == options['sentry:safe_fields']
-        assert project.get_option('sentry:csp_ignored_sources_defaults', True) == options['sentry:csp_ignored_sources_defaults']
-        assert project.get_option('sentry:csp_ignored_sources', []) == options['sentry:csp_ignored_sources'].split('\n')
+        assert project.get_option(
+            'sentry:csp_ignored_sources_defaults',
+            True) == options['sentry:csp_ignored_sources_defaults']
+        assert project.get_option('sentry:csp_ignored_sources',
+                                  []) == options['sentry:csp_ignored_sources'].split('\n')
 
     def test_bookmarks(self):
         project = self.project  # force creation
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 4c10bcffe7..77032970bd 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -549,7 +549,7 @@ class GroupUpdateTest(APITestCase):
                                          version='a')
         release.add_project(self.project)
         release2 = Release.objects.create(organization_id=self.project.organization_id,
-                                         version='b')
+                                          version='b')
         release2.add_project(self.project)
 
         group = self.create_group(
@@ -815,7 +815,8 @@ class GroupUpdateTest(APITestCase):
         assert snooze.window is None
 
         # Drop microsecond value for MySQL
-        response.data['statusDetails']['ignoreUntil'] = response.data['statusDetails']['ignoreUntil'].replace(microsecond=0)
+        response.data['statusDetails']['ignoreUntil'] = response.data['statusDetails']['ignoreUntil'].replace(
+            microsecond=0)
 
         assert response.data['status'] == 'ignored'
         assert response.data['statusDetails']['ignoreCount'] == snooze.count
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index 3ae8955bb5..9abc6f3eec 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -62,7 +62,8 @@ class UpdateProjectRuleTest(APITestCase):
         rule = Rule.objects.get(id=rule.id)
         assert rule.label == 'hello world'
         assert rule.data['action_match'] == 'any'
-        assert rule.data['actions'] == [{'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}]
+        assert rule.data['actions'] == [
+            {'id': 'sentry.rules.actions.notify_event.NotifyEventAction'}]
         assert rule.data['conditions'] == conditions
 
     def test_invalid_rule_node_type(self):
diff --git a/tests/sentry/api/endpoints/test_project_users.py b/tests/sentry/api/endpoints/test_project_users.py
index 35320ca2f0..780bc8c339 100644
--- a/tests/sentry/api/endpoints/test_project_users.py
+++ b/tests/sentry/api/endpoints/test_project_users.py
@@ -71,7 +71,9 @@ class ProjectUsersTest(APITestCase):
     def test_email_search(self):
         self.login_as(user=self.user)
 
-        response = self.client.get('{}?query=email:foo@example.com'.format(self.path), format='json')
+        response = self.client.get(
+            '{}?query=email:foo@example.com'.format(
+                self.path), format='json')
 
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
diff --git a/tests/sentry/api/serializers/test_commit.py b/tests/sentry/api/serializers/test_commit.py
index 39da44c968..bb3b0d8486 100644
--- a/tests/sentry/api/serializers/test_commit.py
+++ b/tests/sentry/api/serializers/test_commit.py
@@ -6,7 +6,7 @@ from uuid import uuid4
 
 from sentry.api.serializers import serialize
 from sentry.models import (Commit, CommitAuthor,
-    Release, ReleaseCommit, Repository)
+                           Release, ReleaseCommit, Repository)
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/api/serializers/test_commit_filechange.py b/tests/sentry/api/serializers/test_commit_filechange.py
index 2b41e5a248..8886c6a318 100644
--- a/tests/sentry/api/serializers/test_commit_filechange.py
+++ b/tests/sentry/api/serializers/test_commit_filechange.py
@@ -6,7 +6,7 @@ from uuid import uuid4
 
 from sentry.api.serializers import serialize
 from sentry.models import (Commit, CommitAuthor, CommitFileChange,
-    Release, ReleaseCommit, Repository)
+                           Release, ReleaseCommit, Repository)
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/api/serializers/test_group.py b/tests/sentry/api/serializers/test_group.py
index c87a2800dc..536410780d 100644
--- a/tests/sentry/api/serializers/test_group.py
+++ b/tests/sentry/api/serializers/test_group.py
@@ -195,7 +195,9 @@ class GroupSerializerTest(TestCase):
             default_value, project_value = options
             maybe_set_value(None, default_value)
             maybe_set_value(group.project, project_value)
-            assert serialize(group, user)['isSubscribed'] is expected_result, 'expected {!r} for {!r}'.format(expected_result, options)
+            assert serialize(
+                group, user)['isSubscribed'] is expected_result, 'expected {!r} for {!r}'.format(
+                expected_result, options)
 
     def test_no_user_unsubscribed(self):
         group = self.create_group()
diff --git a/tests/sentry/api/serializers/test_release.py b/tests/sentry/api/serializers/test_release.py
index cc615a5f80..55001abaf6 100644
--- a/tests/sentry/api/serializers/test_release.py
+++ b/tests/sentry/api/serializers/test_release.py
@@ -11,7 +11,7 @@ from uuid import uuid4
 from sentry.api.endpoints.organization_releases import ReleaseSerializerWithProjects
 from sentry.api.serializers import serialize
 from sentry.models import (Commit, CommitAuthor, Deploy, Environment,
-    Release, ReleaseCommit, ReleaseProject, TagValue, User, UserEmail,)
+                           Release, ReleaseCommit, ReleaseProject, TagValue, User, UserEmail,)
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 060f3bfd2f..3b4da6cf15 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -632,12 +632,12 @@ class CspApiHelperTest(BaseAPITest):
             "violated-directive": "img-src https://45.55.25.245:8123/",
             "effective-directive": "img-src",
             "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-            "blocked-uri": "v" * 201,
+            "blocked-uri": "v" *
+            201,
             "status-code": 200,
             "_meta": {
                 "release": "abc123",
-            }
-        }
+            }}
         result = self.helper.validate_data(self.project, report)
         assert result['tags'] == [
             ('effective-directive', 'img-src'),
@@ -668,14 +668,14 @@ class CspApiHelperTest(BaseAPITest):
             "document-uri": "http://45.55.25.245:8123/csp",
             "referrer": "http://example.com",
             "violated-directive": "img-src https://45.55.25.245:8123/",
-            "effective-directive": "v" * 201,
+            "effective-directive": "v" *
+            201,
             "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
             "blocked-uri": "http://google.com\n",
             "status-code": 200,
             "_meta": {
                 "release": "abc123",
-            }
-        }
+            }}
         result = self.helper.validate_data(self.project, report)
         assert 'tags' not in result
         assert len(result['errors']) == 2
diff --git a/tests/sentry/deletions/test_tagkey.py b/tests/sentry/deletions/test_tagkey.py
index c11ff6d209..daa457e5ad 100644
--- a/tests/sentry/deletions/test_tagkey.py
+++ b/tests/sentry/deletions/test_tagkey.py
@@ -15,7 +15,11 @@ class DeleteTagKeyTest(TestCase):
         tk = TagKey.objects.create(key='foo', project=project)
         TagValue.objects.create(key='foo', value='bar', project=project)
         GroupTagKey.objects.create(key='foo', group=group, project=project)
-        GroupTagValue.objects.create(key='foo', value='bar', group_id=group.id, project_id=project.id)
+        GroupTagValue.objects.create(
+            key='foo',
+            value='bar',
+            group_id=group.id,
+            project_id=project.id)
         EventTag.objects.create(
             key_id=tk.id, group_id=group.id, value_id=1, project_id=project.id,
             event_id=1,
@@ -25,7 +29,11 @@ class DeleteTagKeyTest(TestCase):
         group2 = self.create_group(project=project2)
         tk2 = TagKey.objects.create(key='foo', project=project2)
         gtk2 = GroupTagKey.objects.create(key='foo', group=group2, project=project2)
-        gtv2 = GroupTagValue.objects.create(key='foo', value='bar', group_id=group2.id, project_id=project2.id)
+        gtv2 = GroupTagValue.objects.create(
+            key='foo',
+            value='bar',
+            group_id=group2.id,
+            project_id=project2.id)
         EventTag.objects.create(
             key_id=tk2.id, group_id=group2.id, value_id=1, project_id=project.id,
             event_id=1,
diff --git a/tests/sentry/digests/backends/test_redis.py b/tests/sentry/digests/backends/test_redis.py
index 3508289639..6f2e54f75d 100644
--- a/tests/sentry/digests/backends/test_redis.py
+++ b/tests/sentry/digests/backends/test_redis.py
@@ -66,7 +66,8 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertDoesNotChange(ready_set_size), \
                 self.assertDoesNotChange(timeline_score_in_ready_set):
-            assert ensure_timeline_scheduled(client, keys, (timeline, timestamp + 50, 1, 10)) is None
+            assert ensure_timeline_scheduled(
+                client, keys, (timeline, timestamp + 50, 1, 10)) is None
 
         # Move the timeline from the ready set to the waiting set.
         client.zrem('ready', timeline)
@@ -76,12 +77,14 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
         increment = 1
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertChanges(timeline_score_in_waiting_set, before=timestamp, after=timestamp + increment):
-            assert ensure_timeline_scheduled(client, keys, (timeline, timestamp, increment, 10)) is None
+            assert ensure_timeline_scheduled(
+                client, keys, (timeline, timestamp, increment, 10)) is None
 
         # Make sure the schedule respects the maximum value.
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertChanges(timeline_score_in_waiting_set, before=timestamp + 1, after=timestamp):
-            assert ensure_timeline_scheduled(client, keys, (timeline, timestamp, increment, 0)) is None
+            assert ensure_timeline_scheduled(
+                client, keys, (timeline, timestamp, increment, 0)) is None
 
         # Test to ensure a missing last processed timestamp can be handled
         # correctly (chooses minimum of schedule value and record timestamp.)
@@ -89,11 +92,13 @@ class RedisScriptTestCase(BaseRedisBackendTestCase):
         client.delete('last-processed')
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertDoesNotChange(timeline_score_in_waiting_set):
-            assert ensure_timeline_scheduled(client, keys, (timeline, timestamp + 100, increment, 10)) is None
+            assert ensure_timeline_scheduled(
+                client, keys, (timeline, timestamp + 100, increment, 10)) is None
 
         with self.assertDoesNotChange(waiting_set_size), \
                 self.assertChanges(timeline_score_in_waiting_set, before=timestamp, after=timestamp - 100):
-            assert ensure_timeline_scheduled(client, keys, (timeline, timestamp - 100, increment, 10)) is None
+            assert ensure_timeline_scheduled(
+                client, keys, (timeline, timestamp - 100, increment, 10)) is None
 
     def test_truncate_timeline_script(self):
         cluster = clusters.get('default')
@@ -133,8 +138,10 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
         ready_set_key = make_schedule_key(backend.namespace, SCHEDULE_STATE_READY)
         record_key = make_record_key(timeline_key, record.key)
 
-        get_timeline_score_in_ready_set = functools.partial(connection.zscore, ready_set_key, timeline)
-        get_record_score_in_timeline_set = functools.partial(connection.zscore, timeline_key, record.key)
+        get_timeline_score_in_ready_set = functools.partial(
+            connection.zscore, ready_set_key, timeline)
+        get_record_score_in_timeline_set = functools.partial(
+            connection.zscore, timeline_key, record.key)
 
         def get_record_value():
             value = connection.get(record_key)
@@ -217,7 +224,8 @@ class RedisBackendTestCase(BaseRedisBackendTestCase):
         # Move the digest from the ready set to the waiting set.
         backend.maintenance(now)
         assert connection.zcard(ready_set_key) == 0
-        assert connection.zrange(waiting_set_key, 0, -1, withscores=True) == [(timeline, schedule_time)]
+        assert connection.zrange(waiting_set_key, 0, -
+                                 1, withscores=True) == [(timeline, schedule_time)]
 
         connection.zrem(waiting_set_key, timeline)
         connection.zadd(ready_set_key, schedule_time, timeline)
diff --git a/tests/sentry/digests/test_notifications.py b/tests/sentry/digests/test_notifications.py
index aa58492f02..b6c22ea145 100644
--- a/tests/sentry/digests/test_notifications.py
+++ b/tests/sentry/digests/test_notifications.py
@@ -82,7 +82,8 @@ class GroupRecordsTestCase(TestCase):
 
     def test_success(self):
         events = [self.create_event(group=self.group) for _ in range(3)]
-        records = [Record(event.id, Notification(event, [self.rule]), event.datetime) for event in events]
+        records = [Record(event.id, Notification(event, [self.rule]), event.datetime)
+                   for event in events]
         assert reduce(group_records, records, defaultdict(lambda: defaultdict(list))) == {
             self.rule: {
                 self.group: records,
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
index a1252e8e50..2789786311 100644
--- a/tests/sentry/filters/test_browser_extensions.py
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -44,11 +44,13 @@ class BrowserExtensionsFilterTest(TestCase):
         assert self.apply_filter(data)
 
     def test_filters_google_search_app_ios(self):
-        data = self.get_mock_data(exc_value='null is not an object (evaluating \'elt.parentNode\')')
+        data = self.get_mock_data(
+            exc_value='null is not an object (evaluating \'elt.parentNode\')')
         assert self.apply_filter(data)
 
     def test_filters_kaspersky_extension(self):
-        data = self.get_mock_data(exc_source='https://ff.kis.v2.scr.kaspersky-labs.com/14E4A3DB-9B72-1047-8296-E970532BF7B7/main.js')
+        data = self.get_mock_data(
+            exc_source='https://ff.kis.v2.scr.kaspersky-labs.com/14E4A3DB-9B72-1047-8296-E970532BF7B7/main.js')
         assert self.apply_filter(data)
 
     def test_filters_dragon_web_extension(self):
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index b0c03146e4..4714e9c8c2 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -201,7 +201,8 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data('Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19')
+        data = self.get_mock_data(
+            'Mozilla/5.0 (Linux; Android 4.0.4; Galaxy Nexus Build/IMM76B) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.133 Mobile Safari/535.19')
         assert self.apply_filter(data) is False
 
     def test_filters_ie_9_by_default(self):
@@ -228,7 +229,8 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data('Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16')
+        data = self.get_mock_data(
+            'Opera/9.80 (X11; Linux i686; Ubuntu/14.10) Presto/2.12.388 Version/12.16')
         assert self.apply_filter(data) is True
 
     def test_does_not_filter_chrome_by_default(self):
@@ -237,7 +239,8 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
+        data = self.get_mock_data(
+            'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
         assert self.apply_filter(data) is False
 
     def test_does_not_filter_edge_by_default(self):
@@ -246,7 +249,8 @@ class LegacyBrowsersFilterTest(TestCase):
             key='filters:legacy-browsers',
             value='1',
         )
-        data = self.get_mock_data('Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136')
+        data = self.get_mock_data(
+            'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.10136')
         assert self.apply_filter(data) is False
 
     def test_filter_opera(self):
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
index 93afc0eea5..60ec71b609 100644
--- a/tests/sentry/filters/test_web_crawlers.py
+++ b/tests/sentry/filters/test_web_crawlers.py
@@ -26,7 +26,8 @@ class WebCrawlersFilterTest(TestCase):
         assert self.apply_filter(data)
 
     def test_does_not_filter_chrome(self):
-        data = self.get_mock_data('Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
+        data = self.get_mock_data(
+            'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36')
         assert not self.apply_filter(data)
 
     def test_filters_twitterbot(self):
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 36db02863b..f7a612db8d 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -293,7 +293,7 @@ class SlimExceptionDataTest(TestCase):
         interface = Exception.to_python({'values': [
             {'value': 'foo',
              'stacktrace': {'frames': [{'filename': 'foo'}]},
-            }
+             }
         ]})
         slim_exception_data(interface)
         assert len(interface.values[0].stacktrace.frames) == 1
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 9c063d44f3..ad489bc43e 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -430,7 +430,8 @@ class StacktraceTest(TestCase):
                 'function': '-[CRLCrashAsyncSafeThread crash]',
             }
         ]))
-        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
+        assert stacktrace.get_culprit_string(
+            platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
 
     def test_emoji_culprit(self):
         stacktrace = Stacktrace.to_python(dict(frames=[
@@ -466,7 +467,8 @@ class StacktraceTest(TestCase):
                 'function': '-[CRLCrashAsyncSafeThread crash]',
             }
         ]))
-        assert stacktrace.get_culprit_string(platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
+        assert stacktrace.get_culprit_string(
+            platform='cocoa') == '-[CRLCrashAsyncSafeThread crash]'
 
     def test_get_hash_does_not_group_different_js_errors(self):
         interface = Stacktrace.to_python({
@@ -512,7 +514,10 @@ class StacktraceTest(TestCase):
         get_stacktrace.assert_called_once_with(event, system_frames=False, max_frames=10)
         self.assertEquals(result, get_stacktrace.return_value)
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch(
+        'sentry.interfaces.stacktrace.is_newest_frame_first',
+        mock.Mock(
+            return_value=False))
     @mock.patch('sentry.interfaces.stacktrace.Stacktrace.get_stacktrace')
     def test_get_traceback_response(self, get_stacktrace):
         event = mock.Mock(spec=Event())
@@ -523,28 +528,47 @@ class StacktraceTest(TestCase):
         get_stacktrace.assert_called_once_with(event, newest_first=None)
         self.assertEquals(result, 'foo\n\nbar')
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch(
+        'sentry.interfaces.stacktrace.is_newest_frame_first',
+        mock.Mock(
+            return_value=False))
     def test_get_stacktrace_with_only_filename(self):
         event = mock.Mock(spec=Event())
         interface = Stacktrace.to_python(dict(frames=[{'filename': 'foo'}, {'filename': 'bar'}]))
         result = interface.get_stacktrace(event)
-        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo"\n  File "bar"')
+        self.assertEquals(
+            result,
+            'Stacktrace (most recent call last):\n\n  File "foo"\n  File "bar"')
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch(
+        'sentry.interfaces.stacktrace.is_newest_frame_first',
+        mock.Mock(
+            return_value=False))
     def test_get_stacktrace_with_module(self):
         event = mock.Mock(spec=Event())
         interface = Stacktrace.to_python(dict(frames=[{'module': 'foo'}, {'module': 'bar'}]))
         result = interface.get_stacktrace(event)
-        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  Module "foo"\n  Module "bar"')
+        self.assertEquals(
+            result,
+            'Stacktrace (most recent call last):\n\n  Module "foo"\n  Module "bar"')
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch(
+        'sentry.interfaces.stacktrace.is_newest_frame_first',
+        mock.Mock(
+            return_value=False))
     def test_get_stacktrace_with_filename_and_function(self):
         event = mock.Mock(spec=Event())
-        interface = Stacktrace.to_python(dict(frames=[{'filename': 'foo', 'function': 'biz'}, {'filename': 'bar', 'function': 'baz'}]))
+        interface = Stacktrace.to_python(
+            dict(frames=[{'filename': 'foo', 'function': 'biz'}, {'filename': 'bar', 'function': 'baz'}]))
         result = interface.get_stacktrace(event)
-        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", in biz\n  File "bar", in baz')
+        self.assertEquals(
+            result,
+            'Stacktrace (most recent call last):\n\n  File "foo", in biz\n  File "bar", in baz')
 
-    @mock.patch('sentry.interfaces.stacktrace.is_newest_frame_first', mock.Mock(return_value=False))
+    @mock.patch(
+        'sentry.interfaces.stacktrace.is_newest_frame_first',
+        mock.Mock(
+            return_value=False))
     def test_get_stacktrace_with_filename_function_lineno_and_context(self):
         event = mock.Mock(spec=Event())
         interface = Stacktrace.to_python(dict(frames=[
@@ -552,7 +576,9 @@ class StacktraceTest(TestCase):
             {'filename': 'bar', 'function': 'baz', 'lineno': 5, 'context_line': '    return None'},
         ]))
         result = interface.get_stacktrace(event)
-        self.assertEquals(result, 'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
+        self.assertEquals(
+            result,
+            'Stacktrace (most recent call last):\n\n  File "foo", line 3, in biz\n    def foo(r):\n  File "bar", line 5, in baz\n    return None')
 
     def test_bad_input(self):
         with self.assertRaises(InterfaceValidationError):
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index e13902b55c..1dd4f1e3df 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -273,7 +273,8 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert event.data['errors'] == [{'type': 'js_no_source', 'url': 'http//example.com/index.html'}]
+        assert event.data['errors'] == [
+            {'type': 'js_no_source', 'url': 'http//example.com/index.html'}]
 
         exception = event.interfaces['sentry.interfaces.Exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -343,7 +344,8 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert event.data['errors'] == [{'type': 'js_no_source', 'url': 'http//example.com/index.html'}]
+        assert event.data['errors'] == [
+            {'type': 'js_no_source', 'url': 'http//example.com/index.html'}]
 
         exception = event.interfaces['sentry.interfaces.Exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -426,8 +428,7 @@ class JavascriptIntegrationTest(TestCase):
         assert raw_frame.post_context == [
             'function multiply(a,b){"use strict";return a*b}function divide(a,b){"use strict";try{return multiply(add(a,b),a,b)/c}catch(e){Raven.captureE {snip}',
             '//# sourceMappingURL=indexed.sourcemap.js',
-            ''
-        ]
+            '']
         assert raw_frame.lineno == 1
 
         frame = frame_list[1]
@@ -803,7 +804,8 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert event.data['errors'] == [{'url': u'http://example.com/file1.js', 'type': 'fetch_invalid_http_code', 'value': 404}]
+        assert event.data['errors'] == [
+            {'url': u'http://example.com/file1.js', 'type': 'fetch_invalid_http_code', 'value': 404}]
 
         exception = event.interfaces['sentry.interfaces.Exception']
         frame_list = exception.values[0].stacktrace.frames
@@ -857,7 +859,8 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        assert event.data['errors'] == [{'url': u'http://example.com/unsupported.sourcemap.js', 'type': 'js_invalid_source'}]
+        assert event.data['errors'] == [
+            {'url': u'http://example.com/unsupported.sourcemap.js', 'type': 'js_invalid_source'}]
 
     def test_failed_sourcemap_expansion_data_url(self):
         data = {
@@ -892,8 +895,10 @@ class JavascriptIntegrationTest(TestCase):
                       body='       <!DOCTYPE html><html><head></head><body></body></html>')
         responses.add(responses.GET, 'http://example.com/file2.js',
                       body='<!doctype html><html><head></head><body></body></html>')
-        responses.add(responses.GET, 'http://example.com/file.html',
-                      body='<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>')
+        responses.add(
+            responses.GET,
+            'http://example.com/file.html',
+            body='<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>')
 
         data = {
             'message': 'hello',
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 773c028f0f..9eac1ab1cf 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -257,29 +257,69 @@ class DiscoverSourcemapTest(TestCase):
         }, '', 200, None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, '//@ sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            '//@ sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            '//# sourceMappingURL=http://example.com/source.map.js\nconsole.log(true)',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//@ sourceMappingURL=http://example.com/source.map.js', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            'console.log(true)\n//@ sourceMappingURL=http://example.com/source.map.js',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, 'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js\n//# sourceMappingURL=http://example.com/source2.map.js', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            'console.log(true)\n//# sourceMappingURL=http://example.com/source.map.js\n//# sourceMappingURL=http://example.com/source2.map.js',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source2.map.js'
 
         # sourceMappingURL found directly after code w/o newline
-        result = http.UrlResult('http://example.com', {}, 'console.log(true);//# sourceMappingURL=http://example.com/source.map.js', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            'console.log(true);//# sourceMappingURL=http://example.com/source.map.js',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
-        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=app.map.js/*ascii:lol*/', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            '//# sourceMappingURL=app.map.js/*ascii:lol*/',
+            200,
+            None)
         assert discover_sourcemap(result) == 'http://example.com/app.map.js'
 
-        result = http.UrlResult('http://example.com', {}, '//# sourceMappingURL=/*lol*/', 200, None)
+        result = http.UrlResult(
+            'http://example.com',
+            {},
+            '//# sourceMappingURL=/*lol*/',
+            200,
+            None)
         with self.assertRaises(AssertionError):
             discover_sourcemap(result)
 
@@ -297,8 +337,10 @@ class GenerateModuleTest(TestCase):
         assert generate_module('http://example.com/_baz/foo/bar.js') == 'foo/bar'
         assert generate_module('http://example.com/1/2/3/foo/bar.js') == 'foo/bar'
         assert generate_module('http://example.com/abcdef0/foo/bar.js') == 'foo/bar'
-        assert generate_module('http://example.com/92cd589eca8235e7b373bf5ae94ebf898e3b949c/foo/bar.js') == 'foo/bar'
-        assert generate_module('http://example.com/7d6d00eae0ceccdc7ee689659585d95f/foo/bar.js') == 'foo/bar'
+        assert generate_module(
+            'http://example.com/92cd589eca8235e7b373bf5ae94ebf898e3b949c/foo/bar.js') == 'foo/bar'
+        assert generate_module(
+            'http://example.com/7d6d00eae0ceccdc7ee689659585d95f/foo/bar.js') == 'foo/bar'
         assert generate_module('http://example.com/foo/bar.coffee') == 'foo/bar'
         assert generate_module('http://example.com/foo/bar.js?v=1234') == 'foo/bar'
         assert generate_module('/foo/bar.js') == 'foo/bar'
@@ -306,14 +348,22 @@ class GenerateModuleTest(TestCase):
         assert generate_module('/foo/bar-7d6d00eae0ceccdc7ee689659585d95f.js') == 'foo/bar'
         assert generate_module('/bower_components/foo/bar.js') == 'foo/bar'
         assert generate_module('/node_modules/foo/bar.js') == 'foo/bar'
-        assert generate_module('http://example.com/vendor.92cd589eca8235e7b373bf5ae94ebf898e3b949c.js') == 'vendor'
-        assert generate_module('/a/javascripts/application-bundle-149360d3414c26adac3febdf6832e25c.min.js') == 'a/javascripts/application-bundle'
-        assert generate_module('https://example.com/libs/libs-20150417171659.min.js') == 'libs/libs'
-        assert generate_module('webpack:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
-        assert generate_module('webpack:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
-        assert generate_module('app:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
-        assert generate_module('app:///example/92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
-        assert generate_module('~/app/components/projectHeader/projectSelector.jsx') == 'app/components/projectHeader/projectSelector'
+        assert generate_module(
+            'http://example.com/vendor.92cd589eca8235e7b373bf5ae94ebf898e3b949c.js') == 'vendor'
+        assert generate_module(
+            '/a/javascripts/application-bundle-149360d3414c26adac3febdf6832e25c.min.js') == 'a/javascripts/application-bundle'
+        assert generate_module(
+            'https://example.com/libs/libs-20150417171659.min.js') == 'libs/libs'
+        assert generate_module(
+            'webpack:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
+        assert generate_module(
+            'webpack:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
+        assert generate_module(
+            'app:///92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
+        assert generate_module(
+            'app:///example/92cd589eca8235e7b373bf5ae94ebf898e3b949c/vendor.js') == 'vendor'
+        assert generate_module(
+            '~/app/components/projectHeader/projectSelector.jsx') == 'app/components/projectHeader/projectSelector'
 
 
 class FetchSourcemapTest(TestCase):
@@ -351,11 +401,20 @@ class TrimLineTest(TestCase):
 
     def test_simple(self):
         assert trim_line('foo') == 'foo'
-        assert trim_line(self.long_line) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
-        assert trim_line(self.long_line, column=10) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
-        assert trim_line(self.long_line, column=66) == '{snip} blic is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives wi {snip}'
-        assert trim_line(self.long_line, column=190) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
-        assert trim_line(self.long_line, column=9999) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
+        assert trim_line(
+            self.long_line) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
+        assert trim_line(
+            self.long_line,
+            column=10) == 'The public is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it li {snip}'
+        assert trim_line(
+            self.long_line,
+            column=66) == '{snip} blic is more familiar with bad design than good design. It is, in effect, conditioned to prefer bad design, because that is what it lives wi {snip}'
+        assert trim_line(
+            self.long_line,
+            column=190) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
+        assert trim_line(
+            self.long_line,
+            column=9999) == '{snip} gn. It is, in effect, conditioned to prefer bad design, because that is what it lives with. The new becomes threatening, the old reassuring.'
 
 
 def test_get_culprit_is_patched():
diff --git a/tests/sentry/lang/javascript/test_sourcemaps.py b/tests/sentry/lang/javascript/test_sourcemaps.py
index 36e7756bbe..4285db08de 100644
--- a/tests/sentry/lang/javascript/test_sourcemaps.py
+++ b/tests/sentry/lang/javascript/test_sourcemaps.py
@@ -77,23 +77,58 @@ class FindSourceTest(TestCase):
         smap_view = view_from_json(sourcemap)
 
         result = smap_view.lookup_token(0, 56)
-        assert result == Token(dst_line=0, dst_col=50, src='foo/file2.js', src_line=0, src_col=9, src_id=1, name='multiply')
+        assert result == Token(
+            dst_line=0,
+            dst_col=50,
+            src='foo/file2.js',
+            src_line=0,
+            src_col=9,
+            src_id=1,
+            name='multiply')
 
         # Start of minified file (exact match first line/col tuple)
         result = smap_view.lookup_token(0, 0)
-        assert result == Token(dst_line=0, dst_col=0, src='foo/file1.js', src_line=0, src_col=0, src_id=0, name=None)
+        assert result == Token(
+            dst_line=0,
+            dst_col=0,
+            src='foo/file1.js',
+            src_line=0,
+            src_col=0,
+            src_id=0,
+            name=None)
 
         # Last character in mapping
         result = smap_view.lookup_token(0, 36)
-        assert result == Token(dst_line=0, dst_col=30, src='foo/file1.js', src_line=2, src_col=1, src_id=0, name=None)
+        assert result == Token(
+            dst_line=0,
+            dst_col=30,
+            src='foo/file1.js',
+            src_line=2,
+            src_col=1,
+            src_id=0,
+            name=None)
 
         # First character in mapping (exact match line/col tuple)
         result = smap_view.lookup_token(0, 37)
-        assert result == Token(dst_line=0, dst_col=37, src='foo/file1.js', src_line=2, src_col=8, src_id=0, name='a')
+        assert result == Token(
+            dst_line=0,
+            dst_col=37,
+            src='foo/file1.js',
+            src_line=2,
+            src_col=8,
+            src_id=0,
+            name='a')
 
         # End of minified file (character *beyond* last line/col tuple)
         result = smap_view.lookup_token(0, 192)
-        assert result == Token(dst_line=0, dst_col=191, src='foo/file2.js', src_line=9, src_col=25, src_id=1, name='e')
+        assert result == Token(
+            dst_line=0,
+            dst_col=191,
+            src='foo/file2.js',
+            src_line=9,
+            src_col=25,
+            src_id=1,
+            name='e')
 
 
 class IterSourcesTest(TestCase):
@@ -176,20 +211,68 @@ class ParseIndexedSourcemapTest(TestCase):
         smap_view = view_from_json(indexed_sourcemap_example)
 
         # one.js
-        assert smap_view.lookup_token(0, 1) == \
-            Token(dst_line=0, dst_col=1, src='/the/root/one.js', src_line=0, src_col=1, src_id=0, name=None)
-        assert smap_view.lookup_token(0, 18) == \
-            Token(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')
-        assert smap_view.lookup_token(0, 28) == \
-            Token(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')
+        assert smap_view.lookup_token(
+            0,
+            1) == Token(
+            dst_line=0,
+            dst_col=1,
+            src='/the/root/one.js',
+            src_line=0,
+            src_col=1,
+            src_id=0,
+            name=None)
+        assert smap_view.lookup_token(
+            0,
+            18) == Token(
+            dst_line=0,
+            dst_col=18,
+            src='/the/root/one.js',
+            src_line=0,
+            src_col=21,
+            src_id=0,
+            name='bar')
+        assert smap_view.lookup_token(
+            0,
+            28) == Token(
+            dst_line=0,
+            dst_col=28,
+            src='/the/root/one.js',
+            src_line=1,
+            src_col=10,
+            src_id=0,
+            name='baz')
 
         # two.js
-        assert smap_view.lookup_token(1, 18) == \
-            Token(dst_line=1, dst_col=18, src='/the/root/two.js', src_line=0, src_col=21, src_id=1, name='n')
-        assert smap_view.lookup_token(1, 21) == \
-            Token(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)
-        assert smap_view.lookup_token(1, 21) == \
-            Token(dst_line=1, dst_col=21, src='/the/root/two.js', src_line=1, src_col=3, src_id=1, name=None)
+        assert smap_view.lookup_token(
+            1,
+            18) == Token(
+            dst_line=1,
+            dst_col=18,
+            src='/the/root/two.js',
+            src_line=0,
+            src_col=21,
+            src_id=1,
+            name='n')
+        assert smap_view.lookup_token(
+            1,
+            21) == Token(
+            dst_line=1,
+            dst_col=21,
+            src='/the/root/two.js',
+            src_line=1,
+            src_col=3,
+            src_id=1,
+            name=None)
+        assert smap_view.lookup_token(
+            1,
+            21) == Token(
+            dst_line=1,
+            dst_col=21,
+            src='/the/root/two.js',
+            src_line=1,
+            src_col=3,
+            src_id=1,
+            name=None)
 
     # Tests lookups that fall inside source map token boundaries
     # https://github.com/mozilla/source-map/blob/master/test/test-source-map-consumer.js#181
@@ -197,9 +280,33 @@ class ParseIndexedSourcemapTest(TestCase):
         smap_view = view_from_json(indexed_sourcemap_example)
 
         # one.js
-        assert smap_view.lookup_token(0, 20) == \
-            Token(dst_line=0, dst_col=18, src='/the/root/one.js', src_line=0, src_col=21, src_id=0, name='bar')
-        assert smap_view.lookup_token(0, 30) == \
-            Token(dst_line=0, dst_col=28, src='/the/root/one.js', src_line=1, src_col=10, src_id=0, name='baz')
-        assert smap_view.lookup_token(1, 12) == \
-            Token(dst_line=1, dst_col=9, src='/the/root/two.js', src_line=0, src_col=11, src_id=1, name=None)
+        assert smap_view.lookup_token(
+            0,
+            20) == Token(
+            dst_line=0,
+            dst_col=18,
+            src='/the/root/one.js',
+            src_line=0,
+            src_col=21,
+            src_id=0,
+            name='bar')
+        assert smap_view.lookup_token(
+            0,
+            30) == Token(
+            dst_line=0,
+            dst_col=28,
+            src='/the/root/one.js',
+            src_line=1,
+            src_col=10,
+            src_id=0,
+            name='baz')
+        assert smap_view.lookup_token(
+            1,
+            12) == Token(
+            dst_line=1,
+            dst_col=9,
+            src='/the/root/two.js',
+            src_line=0,
+            src_col=11,
+            src_id=1,
+            name=None)
diff --git a/tests/sentry/lang/native/test_applecrashreport.py b/tests/sentry/lang/native/test_applecrashreport.py
index 06764b84a6..a172af233a 100644
--- a/tests/sentry/lang/native/test_applecrashreport.py
+++ b/tests/sentry/lang/native/test_applecrashreport.py
@@ -6,65 +6,65 @@ from sentry.lang.native.applecrashreport import AppleCrashReport
 def test_get_threads_apple_string():
     acr = AppleCrashReport(threads=[
         {'crashed': True,
-        'current': True,
-        'id': 1,
-        'name': None,
-        'stacktrace': {'frames': [
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
-             'colno': 0,
-             'filename': 'SentrySwizzle.swift',
-             'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
-             'image_addr': '0x2c8000',
-             'in_app': False,
-             'instruction_addr': '0x31caa4',
-             'lineno': 0,
-             'object_addr': '0x2c8000',
-             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-             'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
-             'symbol_addr': '0x31ca38'},
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
-             'colno': 84,
-             'filename': 'SentrySwizzle.swift',
-             'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
-             'image_addr': '0x2c8000',
-             'in_app': False,
-             'instruction_addr': '0x31c3e8',
-             'lineno': 92,
-             'object_addr': '0x2c8000',
-             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-             'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
-             'symbol_addr': '0x31b9f8'}]
-        }},
+         'current': True,
+         'id': 1,
+         'name': None,
+         'stacktrace': {'frames': [
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+              'colno': 0,
+              'filename': 'SentrySwizzle.swift',
+              'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+              'image_addr': '0x2c8000',
+              'in_app': False,
+              'instruction_addr': '0x31caa4',
+              'lineno': 0,
+              'object_addr': '0x2c8000',
+              'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+              'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+              'symbol_addr': '0x31ca38'},
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+                 'colno': 84,
+                 'filename': 'SentrySwizzle.swift',
+                 'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+                 'image_addr': '0x2c8000',
+                 'in_app': False,
+                 'instruction_addr': '0x31c3e8',
+                 'lineno': 92,
+                 'object_addr': '0x2c8000',
+                 'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+                 'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+                 'symbol_addr': '0x31b9f8'}]
+         }},
         {'crashed': False,
-        'current': False,
-        'id': 2,
-        'name': 'com.apple.test',
-        'stacktrace': {'frames': [
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
-             'colno': 0,
-             'filename': 'ViewController.swift',
-             'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
-             'image_addr': '0xf0000',
-             'in_app': True,
-             'instruction_addr': '0xf6cd4',
-             'lineno': 0,
-             'object_addr': '0xf0000',
-             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
-             'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
-             'symbol_addr': '0xf6c98'},
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
-             'colno': 36,
-             'filename': 'ViewController.swift',
-             'function': 'ViewController.onClickFatalError(AnyObject) -> ()',
-             'image_addr': '0xf0000',
-             'in_app': True,
-             'instruction_addr': '0xf6c78',
-             'lineno': 110,
-             'object_addr': '0xf0000',
-             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
-             'symbol': '_TFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
-             'symbol_addr': '0xf6c04'}]
-        }},
+         'current': False,
+         'id': 2,
+         'name': 'com.apple.test',
+         'stacktrace': {'frames': [
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+              'colno': 0,
+              'filename': 'ViewController.swift',
+              'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
+              'image_addr': '0xf0000',
+              'in_app': True,
+              'instruction_addr': '0xf6cd4',
+              'lineno': 0,
+              'object_addr': '0xf0000',
+              'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+              'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+              'symbol_addr': '0xf6c98'},
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+                 'colno': 36,
+                 'filename': 'ViewController.swift',
+                 'function': 'ViewController.onClickFatalError(AnyObject) -> ()',
+                 'image_addr': '0xf0000',
+                 'in_app': True,
+                 'instruction_addr': '0xf6c78',
+                 'lineno': 110,
+                 'object_addr': '0xf0000',
+                 'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+                 'symbol': '_TFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+                 'symbol_addr': '0xf6c04'}]
+         }},
     ])
     threads = acr.get_threads_apple_string()
     assert threads == 'Thread 1 name: \n\
@@ -79,60 +79,60 @@ Thread 2 name: com.apple.test\n\
 def test_get_threads_apple_string_symbolicated():
     acr = AppleCrashReport(symbolicated=True, threads=[
         {'crashed': True,
-        'current': True,
-        'id': 1,
-        'name': None,
-        'stacktrace': {'frames': [
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
-             'colno': 0,
-             'filename': 'SentrySwizzle.swift',
-             'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
-             'image_addr': '0x2c8000',
-             'in_app': False,
-             'instruction_addr': '0x31caa4',
-             'lineno': 0,
-             'object_addr': '0x2c8000',
-             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-             'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
-             'symbol_addr': '0x31ca38'},
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
-             'colno': 84,
-             'filename': 'SentrySwizzle.swift',
-             'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
-             'image_addr': '0x2c8000',
-             'in_app': False,
-             'instruction_addr': '0x31c3e8',
-             'lineno': 92,
-             'object_addr': '0x2c8000',
-             'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-             'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
-             'symbol_addr': '0x31b9f8'}]
-        }},
+         'current': True,
+         'id': 1,
+         'name': None,
+         'stacktrace': {'frames': [
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+              'colno': 0,
+              'filename': 'SentrySwizzle.swift',
+              'function': '@objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+              'image_addr': '0x2c8000',
+              'in_app': False,
+              'instruction_addr': '0x31caa4',
+              'lineno': 0,
+              'object_addr': '0x2c8000',
+              'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+              'symbol': '_TToFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+              'symbol_addr': '0x31ca38'},
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Sources/ios/SentrySwizzle.swift',
+                 'colno': 84,
+                 'filename': 'SentrySwizzle.swift',
+                 'function': 'UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool',
+                 'image_addr': '0x2c8000',
+                 'in_app': False,
+                 'instruction_addr': '0x31c3e8',
+                 'lineno': 92,
+                 'object_addr': '0x2c8000',
+                 'package': '/private/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+                 'symbol': '_TFE11SentrySwiftCSo13UIApplication23sentryClient_sendActionfTV10ObjectiveC8Selector2toGSqPs9AnyObject__4fromGSqPS3___3forGSqCSo7UIEvent__Sb',
+                 'symbol_addr': '0x31b9f8'}]
+         }},
         {'crashed': False,
-        'current': False,
-        'id': 2,
-        'name': 'com.apple.test',
-        'stacktrace': {'frames': [
-            {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
-             'colno': 0,
-             'filename': 'ViewController.swift',
-             'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
-             'image_addr': '0xf0000',
-             'in_app': True,
-             'instruction_addr': '0xf6cd4',
-             'lineno': 0,
-             'object_addr': '0xf0000',
-             'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
-             'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
-             'symbol_addr': '0xf6c98'},
-            {'colno': 36,
-             'image_addr': '0xf0000',
-             'in_app': True,
-             'instruction_addr': '0xf6c78',
-             'lineno': 110,
-             'object_addr': '0xf0000',
-             'symbol_addr': '0xf6c04'}]
-        }},
+         'current': False,
+         'id': 2,
+         'name': 'com.apple.test',
+         'stacktrace': {'frames': [
+             {'abs_path': '/Users/haza/Projects/sentry-swift/Examples/SwiftExample/SwiftExample/ViewController.swift',
+              'colno': 0,
+              'filename': 'ViewController.swift',
+              'function': '@objc ViewController.onClickFatalError(AnyObject) -> ()',
+              'image_addr': '0xf0000',
+              'in_app': True,
+              'instruction_addr': '0xf6cd4',
+              'lineno': 0,
+              'object_addr': '0xf0000',
+              'package': '/var/containers/Bundle/Application/06EA18D0-49C5-452C-B431-92B1098FB4AD/SwiftExample.app/SwiftExample',
+              'symbol': '_TToFC12SwiftExample14ViewController17onClickFatalErrorfPs9AnyObject_T_',
+              'symbol_addr': '0xf6c98'},
+             {'colno': 36,
+                 'image_addr': '0xf0000',
+                 'in_app': True,
+                 'instruction_addr': '0xf6c78',
+                 'lineno': 110,
+                 'object_addr': '0xf0000',
+                 'symbol_addr': '0xf6c04'}]
+         }},
     ])
     threads = acr.get_threads_apple_string()
     assert threads.rstrip() == '''\
@@ -153,7 +153,9 @@ Thread 2 name: com.apple.test
 # 4   SwiftExample                    0x00000001000f6cd4 @objc ViewController.onClickFatalError(AnyObject) -> () (ViewController.swift:0)
 # 5   UIKit                           0x000000018755fd30 -[UIApplication sendAction:to:from:forEvent:] + 96
 # 6   SentrySwift                     0x000000010031c3e8 UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:92)
-# 7   SentrySwift                     0x000000010031caa4 @objc UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from : AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:0)
+# 7   SentrySwift                     0x000000010031caa4 @objc
+# UIApplication.sentryClient_sendAction(Selector, to : AnyObject?, from :
+# AnyObject?, for : UIEvent?) -> Bool (SentrySwizzle.swift:0)
 
 # 0   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
 # 1   libswiftCore.dylib              0x0000000100556cc4 0x1003f8000 + 1436868
@@ -268,59 +270,62 @@ Thread 1 Crashed:\n\
 
 def test__convert_frame_to_apple_string():
     acr = AppleCrashReport()
-    frame = acr._convert_frame_to_apple_string(frame={'abs_path': None,
-        'colno': 0,
-        'function': 'SentryClient.crash() -> ()',
-        'image_addr': '0xabd7000',
-        'in_app': False,
-        'instruction_addr': '0xac24ab6',
-        'lineno': 0,
-        'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-        'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
-        'symbol_addr': '0xac24a10'
-    })
+    frame = acr._convert_frame_to_apple_string(
+        frame={
+            'abs_path': None,
+            'colno': 0,
+            'function': 'SentryClient.crash() -> ()',
+            'image_addr': '0xabd7000',
+            'in_app': False,
+            'instruction_addr': '0xac24ab6',
+            'lineno': 0,
+            'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+            'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
+            'symbol_addr': '0xac24a10'})
     assert frame == '0   SentrySwift                     0xac24ab6           0xabd7000 + 166'
     acr2 = AppleCrashReport(symbolicated=True)
-    frame_symbolicated = acr2._convert_frame_to_apple_string(frame={'abs_path': None,
-        'colno': 0,
-        'function': 'SentryClient.crash() -> ()',
-        'image_addr': '0xabd7000',
-        'in_app': False,
-        'instruction_addr': '0xac24ab6',
-        'lineno': 0,
-        'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-        'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
-        'symbol_addr': '0xac24a10'
-    }, number=1)
+    frame_symbolicated = acr2._convert_frame_to_apple_string(
+        frame={
+            'abs_path': None,
+            'colno': 0,
+            'function': 'SentryClient.crash() -> ()',
+            'image_addr': '0xabd7000',
+            'in_app': False,
+            'instruction_addr': '0xac24ab6',
+            'lineno': 0,
+            'package': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/4C903BE8-ED5E-414A-AC42-2D4ACCACE781/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+            'symbol': '_TFC11SentrySwift12SentryClient5crashfT_T_',
+            'symbol_addr': '0xac24a10'},
+        number=1)
     assert frame_symbolicated == '1   SentrySwift                     0xac24ab6           SentryClient.crash() -> ()'
 
 
 def test_get_binary_images_apple_string():
     acr = AppleCrashReport(debug_images=[
         {'cpu_subtype': 3,
-        'cpu_type': 16777223,
-        'image_addr': '0x141c5000',
-        'image_size': 20480,
-        'image_vmaddr': '0x0',
-        'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8C286977-D498-44FF-B7BE-42BFE3DE38BD/SwiftExample.app/Frameworks/libswiftContacts.dylib',
-        'type': 'apple',
-        'uuid': '4B5A054F-B7A1-3AD0-81E1-513B4DBE2A33'},
+         'cpu_type': 16777223,
+         'image_addr': '0x141c5000',
+         'image_size': 20480,
+         'image_vmaddr': '0x0',
+         'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8C286977-D498-44FF-B7BE-42BFE3DE38BD/SwiftExample.app/Frameworks/libswiftContacts.dylib',
+         'type': 'apple',
+         'uuid': '4B5A054F-B7A1-3AD0-81E1-513B4DBE2A33'},
         {'cpu_subtype': 3,
-        'cpu_type': 16777223,
-        'image_addr': '0x1400c000',
-        'image_size': 266240,
-        'image_vmaddr': '0x0',
-        'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/ContentIndex.framework/ContentIndex',
-        'type': 'apple',
-        'uuid': '766DFB14-72EE-32D2-8961-687D32548F2B'},
+         'cpu_type': 16777223,
+         'image_addr': '0x1400c000',
+         'image_size': 266240,
+         'image_vmaddr': '0x0',
+         'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/ContentIndex.framework/ContentIndex',
+         'type': 'apple',
+         'uuid': '766DFB14-72EE-32D2-8961-687D32548F2B'},
         {'cpu_subtype': 3,
-        'cpu_type': 16777223,
-        'image_addr': '0x1406f000',
-        'image_size': 913408,
-        'image_vmaddr': '0x0',
-        'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePDF.framework/CorePDF',
-        'type': 'apple',
-        'uuid': 'BE602DC1-D3A0-3389-B8F4-922C37DEA3DC'}
+         'cpu_type': 16777223,
+         'image_addr': '0x1406f000',
+         'image_size': 913408,
+         'image_vmaddr': '0x0',
+         'name': '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator.sdk/System/Library/PrivateFrameworks/CorePDF.framework/CorePDF',
+         'type': 'apple',
+         'uuid': 'BE602DC1-D3A0-3389-B8F4-922C37DEA3DC'}
     ], context={
         'device': {
             'arch': 'x86',
@@ -351,36 +356,36 @@ def test_get_binary_images_apple_string():
 
 
 def test__convert_debug_meta_to_binary_image_row():
-    acr = AppleCrashReport(context={'device':
-        {'arch': 'x86',
-         'family': 'iPhone',
-         'freeMemory': 169684992,
-         'memorySize': 17179869184,
-         'model': 'iPhone9,1',
-         'simulator': True,
-         'storageSize': 249695305728,
-         'type': 'device',
-         'usableMemory': 14919622656
-         },
-        'os': {'build': '16C67',
-         'bundleID': 'com.rokkincat.SentryExample',
-         'bundleVersion': '2',
-         'kernel_version': 'Darwin Kernel Version 16.3.0: Thu Nov 17 20:23:58 PST 2016; root:xnu-3789.31.2~1/RELEASE_X86_64',
-         'name': 'iOS',
-         'type': 'os',
-         'version': '10.2'
-         }
-    })
-    binary_image = acr._convert_debug_meta_to_binary_image_row(debug_image={
-        'cpu_subtype': 3,
-        'cpu_type': 16777223,
-        'image_addr': '0xd69a000',
-        'image_size': 495616,
-        'image_vmaddr': '0x0',
-        'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
-        'type': 'apple',
-        'uuid': 'B427AE1D-BF36-3B50-936F-D78A7D1C8340'
-    })
+    acr = AppleCrashReport(
+        context={
+            'device': {
+                'arch': 'x86',
+                'family': 'iPhone',
+                'freeMemory': 169684992,
+                'memorySize': 17179869184,
+                'model': 'iPhone9,1',
+                'simulator': True,
+                'storageSize': 249695305728,
+                'type': 'device',
+                'usableMemory': 14919622656},
+            'os': {
+                'build': '16C67',
+                'bundleID': 'com.rokkincat.SentryExample',
+                'bundleVersion': '2',
+                'kernel_version': 'Darwin Kernel Version 16.3.0: Thu Nov 17 20:23:58 PST 2016; root:xnu-3789.31.2~1/RELEASE_X86_64',
+                'name': 'iOS',
+                'type': 'os',
+                'version': '10.2'}})
+    binary_image = acr._convert_debug_meta_to_binary_image_row(
+        debug_image={
+            'cpu_subtype': 3,
+            'cpu_type': 16777223,
+            'image_addr': '0xd69a000',
+            'image_size': 495616,
+            'image_vmaddr': '0x0',
+            'name': '/Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift',
+            'type': 'apple',
+            'uuid': 'B427AE1D-BF36-3B50-936F-D78A7D1C8340'})
     assert binary_image == '0xd69a000 - 0xd712fff SentrySwift x86  <b427ae1dbf363b50936fd78a7d1c8340> /Users/haza/Library/Developer/CoreSimulator/Devices/DDB32F4C-97CF-4E2B-BD10-EB940553F223/data/Containers/Bundle/Application/8F8140DF-B25B-4088-B5FB-57F474A49CD6/SwiftExample.app/Frameworks/SentrySwift.framework/SentrySwift'
 
 
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index b1b3223b1b..066c5d73b3 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -31,7 +31,9 @@ class EventTest(TestCase):
         assert event2.get_email_subject() == '[foo Bar] ERROR: Foo bar'
 
     def test_email_subject_with_template(self):
-        self.project.update_option('mail:subject_template', '$project ${tag:environment}@${tag:release} $$ $title ${tag:invalid} $invalid')
+        self.project.update_option(
+            'mail:subject_template',
+            '$project ${tag:environment}@${tag:release} $$ $title ${tag:invalid} $invalid')
 
         event1 = self.create_event(
             event_id='a' * 32, group=self.group, tags={
diff --git a/tests/sentry/models/test_projectkey.py b/tests/sentry/models/test_projectkey.py
index 592667af8f..53864816b6 100644
--- a/tests/sentry/models/test_projectkey.py
+++ b/tests/sentry/models/test_projectkey.py
@@ -31,7 +31,8 @@ class ProjectKeyTest(TestCase):
             project=self.project,
             status=ProjectKeyStatus.INACTIVE,
         )
-        assert self.model.objects.filter(project=self.project).count() == 2, self.model.objects.all()
+        assert self.model.objects.filter(
+            project=self.project).count() == 2, self.model.objects.all()
         assert self.model.get_default(self.project) == key
 
     def test_is_active(self):
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index b3dda7d660..cc1c99ba25 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -72,7 +72,7 @@ class LostPasswordTest(TestCase):
         assert msg.to == [self.user.email]
         assert msg.subject == '[Sentry] Password Recovery'
         url = 'http://testserver' + reverse('sentry-account-recover-confirm',
-            args=[self.password_hash.user_id, self.password_hash.hash])
+                                            args=[self.password_hash.user_id, self.password_hash.hash])
         assert url in msg.body
 
 
diff --git a/tests/sentry/plugins/mail/activity/test_release.py b/tests/sentry/plugins/mail/activity/test_release.py
index d149f314b0..64101e05ce 100644
--- a/tests/sentry/plugins/mail/activity/test_release.py
+++ b/tests/sentry/plugins/mail/activity/test_release.py
@@ -6,9 +6,18 @@ from django.core import mail
 from django.utils import timezone
 
 from sentry.models import (
-    Activity, Commit, CommitAuthor, Deploy, Environment,
-    GroupSubscriptionReason, Release, ReleaseCommit, Repository, UserEmail, UserOption, UserOptionValue
-)
+    Activity,
+    Commit,
+    CommitAuthor,
+    Deploy,
+    Environment,
+    GroupSubscriptionReason,
+    Release,
+    ReleaseCommit,
+    Repository,
+    UserEmail,
+    UserOption,
+    UserOptionValue)
 from sentry.plugins.sentry_mail.activity.release import ReleaseActivityEmail
 from sentry.testutils import TestCase
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index be2089b42a..65651492cf 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -30,8 +30,12 @@ class MailPluginTest(TestCase):
     def plugin(self):
         return MailPlugin()
 
-    @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
-    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin.get_sendable_users', Mock(return_value=[]))
+    @mock.patch('sentry.models.ProjectOption.objects.get_value',
+                Mock(side_effect=lambda p, k, d: d))
+    @mock.patch(
+        'sentry.plugins.sentry_mail.models.MailPlugin.get_sendable_users',
+        Mock(
+            return_value=[]))
     def test_should_notify_no_sendable_users(self):
         assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
@@ -214,7 +218,7 @@ class MailPluginTest(TestCase):
 
         # disabled by default user4
         uo1 = UserOption.objects.create(key='subscribe_by_default', value='0',
-                                  project=project, user=user4)
+                                        project=project, user=user4)
 
         assert user4.pk not in self.plugin.get_sendable_users(project)
 
diff --git a/tests/sentry/plugins/sentry_webhooks/test_plugin.py b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
index a2e7f05226..f1e648d99c 100644
--- a/tests/sentry/plugins/sentry_webhooks/test_plugin.py
+++ b/tests/sentry/plugins/sentry_webhooks/test_plugin.py
@@ -23,7 +23,9 @@ class WebHooksPluginTest(TestCase):
         responses.add(responses.POST, 'http://example.com')
 
         group = self.create_group(message='Hello world')
-        event = self.create_event(group=group, message='Hello world', tags={'level': 'warning'}, id=24)
+        event = self.create_event(
+            group=group, message='Hello world', tags={
+                'level': 'warning'}, id=24)
 
         rule = Rule.objects.create(project=self.project, label='my rule')
 
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
index 6e4d7ffe4b..b53f9710ff 100644
--- a/tests/sentry/quotas/redis/tests.py
+++ b/tests/sentry/quotas/redis/tests.py
@@ -24,19 +24,19 @@ def test_is_rate_limited_script():
     client = cluster.get_local_client(six.next(iter(cluster.hosts)))
 
     # The item should not be rate limited by either key.
-    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
-        [False, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'),
+                                          (1, now + 60, 2, now + 120)))) == [False, False]
 
     # The item should be rate limited by the first key (1).
-    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
-        [True, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'),
+                                          (1, now + 60, 2, now + 120)))) == [True, False]
 
     # The item should still be rate limited by the first key (1), but *not*
     # rate limited by the second key (2) even though this is the third time
     # we've checked the quotas. This ensures items that are rejected by a lower
     # quota don't affect unrelated items that share a parent quota.
-    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'), (1, now + 60, 2, now + 120)))) == \
-        [True, False]
+    assert list(map(bool, is_rate_limited(client, ('foo', 'bar'),
+                                          (1, now + 60, 2, now + 120)))) == [True, False]
 
     assert client.get('foo') == '1'
     assert 59 <= client.ttl('foo') <= 60
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 2622f070c5..e7ddb4a493 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -42,12 +42,28 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete is None
 
     def test_all_passed_feature_slugs_are_complete(self):
-        group1 = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group1 = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event1 = self.create_full_event()
-        group2 = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group2 = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event2 = self.create_full_event(event_id='b')
-        event_processed.send(project=self.project, group=group1, event=event1, sender=type(self.project))
-        event_processed.send(project=self.project, group=group2, event=event2, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group1,
+            event=event1,
+            sender=type(
+                self.project))
+        event_processed.send(
+            project=self.project,
+            group=group2,
+            event=event2,
+            sender=type(
+                self.project))
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -55,7 +71,10 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete.complete
 
     def test_first_event(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         first_event_received.send(project=self.project, group=group, sender=type(self.project))
 
         first_event = FeatureAdoption.objects.get_by_slug(
@@ -64,9 +83,17 @@ class FeatureAdoptionTest(TestCase):
         assert first_event.complete
 
     def test_javascript(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         js = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -74,9 +101,17 @@ class FeatureAdoptionTest(TestCase):
         assert js.complete
 
     def test_python(self):
-        group = self.create_group(project=self.project, platform='python', message='python error message')
+        group = self.create_group(
+            project=self.project,
+            platform='python',
+            message='python error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         python = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -84,9 +119,17 @@ class FeatureAdoptionTest(TestCase):
         assert python.complete
 
     def test_node(self):
-        group = self.create_group(project=self.project, platform='node', message='node error message')
+        group = self.create_group(
+            project=self.project,
+            platform='node',
+            message='node error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         node = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -94,9 +137,17 @@ class FeatureAdoptionTest(TestCase):
         assert node.complete
 
     def test_ruby(self):
-        group = self.create_group(project=self.project, platform='ruby', message='ruby error message')
+        group = self.create_group(
+            project=self.project,
+            platform='ruby',
+            message='ruby error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         ruby = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -104,9 +155,17 @@ class FeatureAdoptionTest(TestCase):
         assert ruby.complete
 
     def test_java(self):
-        group = self.create_group(project=self.project, platform='java', message='java error message')
+        group = self.create_group(
+            project=self.project,
+            platform='java',
+            message='java error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         java = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -114,9 +173,17 @@ class FeatureAdoptionTest(TestCase):
         assert java.complete
 
     def test_cocoa(self):
-        group = self.create_group(project=self.project, platform='cocoa', message='cocoa error message')
+        group = self.create_group(
+            project=self.project,
+            platform='cocoa',
+            message='cocoa error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         cocoa = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -124,9 +191,17 @@ class FeatureAdoptionTest(TestCase):
         assert cocoa.complete
 
     def test_objc(self):
-        group = self.create_group(project=self.project, platform='objc', message='objc error message')
+        group = self.create_group(
+            project=self.project,
+            platform='objc',
+            message='objc error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         objc = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -134,9 +209,17 @@ class FeatureAdoptionTest(TestCase):
         assert objc.complete
 
     def test_php(self):
-        group = self.create_group(project=self.project, platform='php', message='php error message')
+        group = self.create_group(
+            project=self.project,
+            platform='php',
+            message='php error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         php = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -146,7 +229,12 @@ class FeatureAdoptionTest(TestCase):
     def test_go(self):
         group = self.create_group(project=self.project, platform='go', message='go error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         go = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -154,9 +242,17 @@ class FeatureAdoptionTest(TestCase):
         assert go.complete
 
     def test_csharp(self):
-        group = self.create_group(project=self.project, platform='csharp', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='csharp',
+            message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         csharp = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -164,9 +260,17 @@ class FeatureAdoptionTest(TestCase):
         assert csharp.complete
 
     def test_perl(self):
-        group = self.create_group(project=self.project, platform='perl', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='perl',
+            message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         perl = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -174,9 +278,17 @@ class FeatureAdoptionTest(TestCase):
         assert perl.complete
 
     def test_elixir(self):
-        group = self.create_group(project=self.project, platform='elixir', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='elixir',
+            message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         elixir = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -184,9 +296,17 @@ class FeatureAdoptionTest(TestCase):
         assert elixir.complete
 
     def test_cfml(self):
-        group = self.create_group(project=self.project, platform='cfml', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='cfml',
+            message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         cfml = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -194,9 +314,17 @@ class FeatureAdoptionTest(TestCase):
         assert cfml.complete
 
     def test_groovy(self):
-        group = self.create_group(project=self.project, platform='groovy', message='C# error message')
+        group = self.create_group(
+            project=self.project,
+            platform='groovy',
+            message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         groovy = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -206,7 +334,12 @@ class FeatureAdoptionTest(TestCase):
     def test_csp(self):
         group = self.create_group(project=self.project, platform='csp', message='C# error message')
         event = self.create_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         csp = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -214,9 +347,17 @@ class FeatureAdoptionTest(TestCase):
         assert csp.complete
 
     def test_release_tracking(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         release_tracking = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -224,9 +365,17 @@ class FeatureAdoptionTest(TestCase):
         assert release_tracking
 
     def test_environment_tracking(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         environment_tracking = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -234,9 +383,17 @@ class FeatureAdoptionTest(TestCase):
         assert environment_tracking
 
     def test_bulk_create(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         javascript = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -259,9 +416,17 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_user_tracking(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -354,9 +519,20 @@ class FeatureAdoptionTest(TestCase):
                     ]
                 }
             }"""
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
-        userless_event = self.create_event(event_id='a', platform='javascript', data=json.loads(userless_payload))
-        event_processed.send(project=self.project, group=group, event=userless_event, sender=type(self.project))
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
+        userless_event = self.create_event(
+            event_id='a',
+            platform='javascript',
+            data=json.loads(userless_payload))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=userless_event,
+            sender=type(
+                self.project))
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -448,9 +624,20 @@ class FeatureAdoptionTest(TestCase):
                     ]
                 }
             }"""
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
-        envless_event = self.create_event(event_id='a', platform='javascript', data=json.loads(envless_payload))
-        event_processed.send(project=self.project, group=group, event=envless_event, sender=type(self.project))
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
+        envless_event = self.create_event(
+            event_id='a',
+            platform='javascript',
+            data=json.loads(envless_payload))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=envless_event,
+            sender=type(
+                self.project))
 
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -458,11 +645,19 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete is None
 
     def test_custom_tags(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
         event.data['tags'].append(('foo', 'bar'))
         assert event.get_tag('foo') == 'bar'
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         custom_tags = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -470,9 +665,17 @@ class FeatureAdoptionTest(TestCase):
         assert custom_tags
 
     def test_source_maps(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         source_maps = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -480,9 +683,17 @@ class FeatureAdoptionTest(TestCase):
         assert source_maps
 
     def test_breadcrumbs(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=event,
+            sender=type(
+                self.project))
 
         breadcrumbs = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -490,10 +701,18 @@ class FeatureAdoptionTest(TestCase):
         assert breadcrumbs
 
     def test_multiple_events(self):
-        group = self.create_group(project=self.project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=self.project,
+            platform='javascript',
+            message='javascript error message')
         simple_event = self.create_event()
         first_event_received.send(project=self.project, group=group, sender=type(self.project))
-        event_processed.send(project=self.project, group=group, event=simple_event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=simple_event,
+            sender=type(
+                self.project))
 
         first_event = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -507,7 +726,12 @@ class FeatureAdoptionTest(TestCase):
         assert js.complete
 
         full_event = self.create_full_event()
-        event_processed.send(project=self.project, group=group, event=full_event, sender=type(self.project))
+        event_processed.send(
+            project=self.project,
+            group=group,
+            event=full_event,
+            sender=type(
+                self.project))
 
         release_tracking = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -550,7 +774,9 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_member_joined(self):
-        member = self.create_member(organization=self.organization, teams=[self.team], user=self.create_user())
+        member = self.create_member(
+            organization=self.organization, teams=[
+                self.team], user=self.create_user())
         member_joined.send(member=member, sender=type(self.project))
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
@@ -605,14 +831,24 @@ class FeatureAdoptionTest(TestCase):
         assert feature_complete
 
     def test_issue_tracker_plugin(self):
-        plugin_enabled.send(plugin=IssueTrackingPlugin2(), project=self.project, user=self.owner, sender=type(self.project))
+        plugin_enabled.send(
+            plugin=IssueTrackingPlugin2(),
+            project=self.project,
+            user=self.owner,
+            sender=type(
+                self.project))
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
             slug="issue_tracker_integration")
         assert feature_complete
 
     def test_notification_plugin(self):
-        plugin_enabled.send(plugin=NotificationPlugin(), project=self.project, user=self.owner, sender=type(self.project))
+        plugin_enabled.send(
+            plugin=NotificationPlugin(),
+            project=self.project,
+            user=self.owner,
+            sender=type(
+                self.project))
         feature_complete = FeatureAdoption.objects.get_by_slug(
             organization=self.organization,
             slug="notification_integration")
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 5c69612438..58cfa72c75 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -136,7 +136,10 @@ class OrganizationOnboardingTaskTest(TestCase):
         now = timezone.now().replace(microsecond=0)
         project = self.create_project(first_event=now)
         project_created.send(project=project, user=self.user, sender=type(project))
-        group = self.create_group(project=project, platform='javascript', message='javascript error message')
+        group = self.create_group(
+            project=project,
+            platform='javascript',
+            message='javascript error message')
         first_event_received.send(project=project, group=group, sender=type(project))
 
         task = OrganizationOnboardingTask.objects.get(
@@ -157,8 +160,14 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
         assert second_task is not None
 
-        second_group = self.create_group(project=second_project, platform='python', message='python error message')
-        first_event_received.send(project=second_project, group=second_group, sender=type(second_project))
+        second_group = self.create_group(
+            project=second_project,
+            platform='python',
+            message='python error message')
+        first_event_received.send(
+            project=second_project,
+            group=second_group,
+            sender=type(second_project))
         second_task = OrganizationOnboardingTask.objects.get(
             organization=second_project.organization,
             task=OnboardingTask.SECOND_PLATFORM,
@@ -205,7 +214,11 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task.data['invited_member_id'] == member.id
 
     def test_issue_tracker_onboarding(self):
-        plugin_enabled.send(plugin=IssueTrackingPlugin(), project=self.project, user=self.user, sender=type(IssueTrackingPlugin))
+        plugin_enabled.send(
+            plugin=IssueTrackingPlugin(),
+            project=self.project,
+            user=self.user,
+            sender=type(IssueTrackingPlugin))
         task = OrganizationOnboardingTask.objects.get(
             organization=self.organization,
             task=OnboardingTask.ISSUE_TRACKER,
@@ -213,7 +226,11 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
         assert task is not None
 
-        issue_tracker_used.send(plugin=IssueTrackingPlugin(), project=self.project, user=self.user, sender=type(IssueTrackingPlugin))
+        issue_tracker_used.send(
+            plugin=IssueTrackingPlugin(),
+            project=self.project,
+            user=self.user,
+            sender=type(IssueTrackingPlugin))
         task = OrganizationOnboardingTask.objects.get(
             organization=self.organization,
             task=OnboardingTask.ISSUE_TRACKER,
@@ -222,7 +239,11 @@ class OrganizationOnboardingTaskTest(TestCase):
         assert task is not None
 
     def test_notification_added(self):
-        plugin_enabled.send(plugin=NotificationPlugin(), project=self.project, user=self.user, sender=type(NotificationPlugin))
+        plugin_enabled.send(
+            plugin=NotificationPlugin(),
+            project=self.project,
+            user=self.user,
+            sender=type(NotificationPlugin))
         task = OrganizationOnboardingTask.objects.get(
             organization=self.organization,
             task=OnboardingTask.NOTIFICATION_SERVICE,
@@ -236,7 +257,10 @@ class OrganizationOnboardingTaskTest(TestCase):
         user = self.create_user(email='test@example.org')
         project = self.create_project(first_event=now)
         second_project = self.create_project(first_event=now)
-        second_group = self.create_group(project=second_project, platform='python', message='python error message')
+        second_group = self.create_group(
+            project=second_project,
+            platform='python',
+            message='python error message')
         event = self.create_full_event()
         member = self.create_member(organization=self.organization, teams=[self.team], user=user)
 
@@ -245,10 +269,27 @@ class OrganizationOnboardingTaskTest(TestCase):
         project_created.send(project=second_project, user=user, sender=type(second_project))
 
         first_event_received.send(project=project, group=self.group, sender=type(project))
-        first_event_received.send(project=second_project, group=second_group, sender=type(second_project))
+        first_event_received.send(
+            project=second_project,
+            group=second_group,
+            sender=type(second_project))
         member_joined.send(member=member, sender=type(member))
-        plugin_enabled.send(plugin=IssueTrackingPlugin(), project=project, user=user, sender=type(IssueTrackingPlugin))
-        issue_tracker_used.send(plugin=IssueTrackingPlugin(), project=project, user=user, sender=type(IssueTrackingPlugin))
-        plugin_enabled.send(plugin=NotificationPlugin(), project=project, user=user, sender=type(NotificationPlugin))
-
-        assert OrganizationOption.objects.filter(organization=self.organization, key="onboarding:complete").count() == 1
+        plugin_enabled.send(
+            plugin=IssueTrackingPlugin(),
+            project=project,
+            user=user,
+            sender=type(IssueTrackingPlugin))
+        issue_tracker_used.send(
+            plugin=IssueTrackingPlugin(),
+            project=project,
+            user=user,
+            sender=type(IssueTrackingPlugin))
+        plugin_enabled.send(
+            plugin=NotificationPlugin(),
+            project=project,
+            user=user,
+            sender=type(NotificationPlugin))
+
+        assert OrganizationOption.objects.filter(
+            organization=self.organization,
+            key="onboarding:complete").count() == 1
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index 72b82ca18e..41da5f21f8 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -5,8 +5,15 @@ from mock import patch
 from uuid import uuid4
 
 from sentry.models import (
-    Commit, CommitAuthor, GroupAssignee, GroupCommitResolution, OrganizationMember, Release, Repository, TagValue, UserEmail
-)
+    Commit,
+    CommitAuthor,
+    GroupAssignee,
+    GroupCommitResolution,
+    OrganizationMember,
+    Release,
+    Repository,
+    TagValue,
+    UserEmail)
 from sentry.testutils import TestCase
 
 
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index 51e82e386b..7ddf1db02f 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -156,7 +156,9 @@ class DjangoSearchBackendTest(TestCase):
         results = self.backend.query(self.project1, tags={'env': ANY})
         assert len(results) == 2
 
-        results = self.backend.query(self.project1, tags={'env': 'staging', 'server': 'example.com'})
+        results = self.backend.query(
+            self.project1, tags={
+                'env': 'staging', 'server': 'example.com'})
         assert len(results) == 1
         assert results[0] == self.group2
 
@@ -164,7 +166,11 @@ class DjangoSearchBackendTest(TestCase):
         assert len(results) == 1
         assert results[0] == self.group2
 
-        results = self.backend.query(self.project1, tags={'env': 'staging', 'server': 'bar.example.com'})
+        results = self.backend.query(
+            self.project1,
+            tags={
+                'env': 'staging',
+                'server': 'bar.example.com'})
         assert len(results) == 0
 
     def test_bookmarked_by(self):
diff --git a/tests/sentry/smtp/tests.py b/tests/sentry/smtp/tests.py
index 1ec8a2f8e2..91a365f646 100644
--- a/tests/sentry/smtp/tests.py
+++ b/tests/sentry/smtp/tests.py
@@ -24,21 +24,39 @@ class SentrySMTPTest(TestCase):
 
     def test_process_message(self):
         with self.tasks():
-            self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture), STATUS[200])
+            self.assertEqual(
+                self.server.process_message(
+                    '', self.user.email, [
+                        self.mailto], fixture), STATUS[200])
         self.assertEqual(Activity.objects.filter(type=Activity.NOTE)[0].data, {'text': 'sup'})
 
     def test_process_message_no_recipients(self):
         with self.tasks():
-            self.assertEqual(self.server.process_message('', self.user.email, [], fixture), STATUS[550])
+            self.assertEqual(
+                self.server.process_message(
+                    '',
+                    self.user.email,
+                    [],
+                    fixture),
+                STATUS[550])
 
     def test_process_message_too_long(self):
         with self.tasks():
-            self.assertEqual(self.server.process_message('', self.user.email, [self.mailto], fixture * 100), STATUS[552])
+            self.assertEqual(
+                self.server.process_message(
+                    '', self.user.email, [
+                        self.mailto], fixture * 100), STATUS[552])
         self.assertEqual(Activity.objects.count(), 0)
 
     def test_process_message_invalid_email(self):
         with self.tasks():
-            self.assertEqual(self.server.process_message('', self.user.email, ['lol@localhost'], fixture), STATUS[550])
+            self.assertEqual(
+                self.server.process_message(
+                    '',
+                    self.user.email,
+                    ['lol@localhost'],
+                    fixture),
+                STATUS[550])
 
 
 class CaseInsensitiveSignerTests(TestCase):
diff --git a/tests/sentry/tasks/test_check_auth.py b/tests/sentry/tasks/test_check_auth.py
index 760e72fdd1..d4d161aa77 100644
--- a/tests/sentry/tasks/test_check_auth.py
+++ b/tests/sentry/tasks/test_check_auth.py
@@ -39,7 +39,9 @@ class CheckAuthTest(TestCase):
         updated_ai = AuthIdentity.objects.get(id=ai.id)
         assert updated_ai.last_synced != ai.last_synced
         # mysql doesnt store ms
-        assert updated_ai.last_verified.replace(microsecond=0) == ai.last_verified.replace(microsecond=0)
+        assert updated_ai.last_verified.replace(
+            microsecond=0) == ai.last_verified.replace(
+            microsecond=0)
 
         mock_check_auth_identity.apply_async.assert_called_once_with(
             kwargs={'auth_identity_id': ai.id},
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index 3c06117b0b..0e0ee1364f 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -198,7 +198,11 @@ class DeleteTagKeyTest(TestCase):
         tk = TagKey.objects.create(key='foo', project=project)
         TagValue.objects.create(key='foo', value='bar', project=project)
         GroupTagKey.objects.create(key='foo', group=group, project=project)
-        GroupTagValue.objects.create(key='foo', value='bar', group_id=group.id, project_id=project.id)
+        GroupTagValue.objects.create(
+            key='foo',
+            value='bar',
+            group_id=group.id,
+            project_id=project.id)
         EventTag.objects.create(
             key_id=tk.id, group_id=group.id, value_id=1, project_id=project.id,
             event_id=1,
@@ -208,7 +212,11 @@ class DeleteTagKeyTest(TestCase):
         group2 = self.create_group(project=project2)
         tk2 = TagKey.objects.create(key='foo', project=project2)
         gtk2 = GroupTagKey.objects.create(key='foo', group=group2, project=project2)
-        gtv2 = GroupTagValue.objects.create(key='foo', value='bar', group_id=group2.id, project_id=project2.id)
+        gtv2 = GroupTagValue.objects.create(
+            key='foo',
+            value='bar',
+            group_id=group2.id,
+            project_id=project2.id)
         EventTag.objects.create(
             key_id=tk2.id, group_id=group2.id, value_id=1, project_id=project.id,
             event_id=1,
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index e52d1d9344..01108cfb03 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -258,11 +258,8 @@ class UnmergeTestCase(TestCase):
                 hash=fingerprint,
             )
 
-        assert set(GroupTagKey.objects.filter(group=source).values_list('key', 'values_seen')) == set([
-            (u'color', 3),
-            (u'environment', 1),
-            (u'sentry:release', 1),
-        ])
+        assert set(GroupTagKey.objects.filter(group=source).values_list('key', 'values_seen')) == set(
+            [(u'color', 3), (u'environment', 1), (u'sentry:release', 1), ])
 
         assert set(
             GroupTagValue.objects.filter(
@@ -374,11 +371,8 @@ class UnmergeTestCase(TestCase):
             ),
         ])
 
-        assert set(GroupTagKey.objects.filter(group=source).values_list('key', 'values_seen')) == set([
-            (u'color', 3),
-            (u'environment', 1),
-            (u'sentry:release', 1),
-        ])
+        assert set(GroupTagKey.objects.filter(group=source).values_list('key', 'values_seen')) == set(
+            [(u'color', 3), (u'environment', 1), (u'sentry:release', 1), ])
 
         assert set(
             GroupTagValue.objects.filter(
@@ -461,11 +455,8 @@ class UnmergeTestCase(TestCase):
             ),
         ])
 
-        assert set(GroupTagKey.objects.filter(group=destination).values_list('key', 'values_seen')) == set([
-            (u'color', 3),
-            (u'environment', 1),
-            (u'sentry:release', 1),
-        ])
+        assert set(GroupTagKey.objects.filter(group=destination).values_list('key', 'values_seen')) == set(
+            [(u'color', 3), (u'environment', 1), (u'sentry:release', 1), ])
 
         assert set(
             GroupTagValue.objects.filter(
@@ -518,7 +509,9 @@ class UnmergeTestCase(TestCase):
 
         def get_expected_series_values(rollup, events, function=None):
             if function is None:
-                function = lambda aggregate, event: (aggregate if aggregate is not None else 0) + 1
+                def function(
+                    aggregate, event): return (
+                    aggregate if aggregate is not None else 0) + 1
 
             expected = {}
             for event in events:
diff --git a/tests/sentry/test_similarity.py b/tests/sentry/test_similarity.py
index a871d15f5a..3e2478ce22 100644
--- a/tests/sentry/test_similarity.py
+++ b/tests/sentry/test_similarity.py
@@ -225,7 +225,8 @@ class MinHashIndexTestCase(TestCase):
 
         for band in data:
             assert len(band) == (retention + 1)
-            assert sum(sum(dict(bucket_frequencies).values()) for index, bucket_frequencies in band) == 1
+            assert sum(sum(dict(bucket_frequencies).values())
+                       for index, bucket_frequencies in band) == 1
 
         # Copy the data from key 1 to key 2.
         index.import_('example', [('index', 2, result[0])], timestamp=timestamp)
@@ -251,4 +252,5 @@ class MinHashIndexTestCase(TestCase):
 
         for band in data:
             assert len(band) == (retention + 1)
-            assert sum(sum(dict(bucket_frequencies).values()) for index, bucket_frequencies in band) == 2
+            assert sum(sum(dict(bucket_frequencies).values())
+                       for index, bucket_frequencies in band) == 2
diff --git a/tests/sentry/tsdb/test_redis.py b/tests/sentry/tsdb/test_redis.py
index b8847720c4..0c0bb0bafb 100644
--- a/tests/sentry/tsdb/test_redis.py
+++ b/tests/sentry/tsdb/test_redis.py
@@ -390,17 +390,29 @@ class RedisTSDBTest(TestCase):
         assert self.db.get_frequency_totals(
             model,
             {
-                'organization:1': ("project:1", "project:2", "project:3", "project:4", "project:5"),
-                'organization:2': ("project:1",),
+                'organization:1': (
+                    "project:1",
+                    "project:2",
+                    "project:3",
+                    "project:4",
+                    "project:5"),
+                'organization:2': (
+                    "project:1",
+                ),
             },
-            now - timedelta(hours=1),
+            now -
+            timedelta(
+                hours=1),
             now,
             rollup=rollup,
         ) == {
             'organization:1': {
-                "project:1": 1.0 + 1.0,
-                "project:2": 2.0 + 2.0,
-                "project:3": 3.0 + 3.0,
+                "project:1": 1.0 +
+                1.0,
+                "project:2": 2.0 +
+                2.0,
+                "project:3": 3.0 +
+                3.0,
                 "project:4": 4.0,
                 "project:5": 0.0,
             },
diff --git a/tests/sentry/utils/json/tests.py b/tests/sentry/utils/json/tests.py
index 1af061c6e1..f29cde6520 100644
--- a/tests/sentry/utils/json/tests.py
+++ b/tests/sentry/utils/json/tests.py
@@ -30,8 +30,10 @@ class JSONTest(TestCase):
     def test_escape(self):
         res = "<script>alert('&');</script>"
         assert json.dumps(res) == '"<script>alert(\'&\');</script>"'
-        assert json.dumps(res, escape=True) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
-        assert json.dumps_htmlsafe(res) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
+        assert json.dumps(
+            res, escape=True) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
+        assert json.dumps_htmlsafe(
+            res) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
 
     def test_inf(self):
         res = float('inf')
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index 1cc0924d17..7817c1310d 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -244,15 +244,18 @@ class SensitiveDataFilterTest(TestCase):
         assert result == "'redis://redis:%s@localhost:6379/0'" % FILTER_MASK
         result = proc.sanitize('foo', "foo redis://redis:foo@localhost:6379/0 bar")
         assert result == "foo redis://redis:%s@localhost:6379/0 bar" % FILTER_MASK
-        result = proc.sanitize('foo', "foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1")
-        assert result == "foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1" % (FILTER_MASK, FILTER_MASK)
+        result = proc.sanitize(
+            'foo', "foo redis://redis:foo@localhost:6379/0 bar pg://matt:foo@localhost/1")
+        assert result == "foo redis://redis:%s@localhost:6379/0 bar pg://matt:%s@localhost/1" % (
+            FILTER_MASK, FILTER_MASK)
         # Make sure we don't mess up any other url.
         # This url specifically if passed through urlunsplit(urlsplit()),
         # it'll change the value.
         result = proc.sanitize('foo', 'postgres:///path')
         assert result == 'postgres:///path'
         # Don't be too overly eager within JSON strings an catch the right field.
-        result = proc.sanitize('foo', '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:pass@localhost/1","d":"lol"}')
+        result = proc.sanitize(
+            'foo', '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:pass@localhost/1","d":"lol"}')
         assert result == '{"a":"https://localhost","b":"foo@localhost","c":"pg://matt:%s@localhost/1","d":"lol"}' % FILTER_MASK
 
     def test_sanitize_http_body(self):
diff --git a/tests/sentry/utils/test_strings.py b/tests/sentry/utils/test_strings.py
index ef22cb4436..6d56f1a63e 100644
--- a/tests/sentry/utils/test_strings.py
+++ b/tests/sentry/utils/test_strings.py
@@ -12,8 +12,8 @@ SHY = u'\u00ad'  # soft hyphen
 
 
 def test_soft_break():
-    assert soft_break('com.example.package.method(argument).anotherMethod(argument)', 15) == \
-        ZWSP.join(['com.', 'example.', 'package.', 'method(', 'argument).', 'anotherMethod(', 'argument)'])
+    assert soft_break('com.example.package.method(argument).anotherMethod(argument)', 15) == ZWSP.join(
+        ['com.', 'example.', 'package.', 'method(', 'argument).', 'anotherMethod(', 'argument)'])
 
 
 def test_soft_break_and_hyphenate():
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index e44a7bf456..0a5ad190e0 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -32,28 +32,28 @@ class CspReportViewTest(TestCase):
 
     def test_missing_csp_report(self):
         resp = self.client.post(self.path,
-            content_type='application/csp-report',
-            data='{"lol":1}',
-            HTTP_USER_AGENT='awesome',
-        )
+                                content_type='application/csp-report',
+                                data='{"lol":1}',
+                                HTTP_USER_AGENT='awesome',
+                                )
         assert resp.status_code == 400, resp.content
 
     @mock.patch('sentry.utils.http.get_origins')
     def test_bad_origin(self, get_origins):
         get_origins.return_value = ['example.com']
         resp = self.client.post(self.path,
-            content_type='application/csp-report',
-            data='{"csp-report":{"document-uri":"http://lolnope.com"}}',
-            HTTP_USER_AGENT='awesome',
-        )
+                                content_type='application/csp-report',
+                                data='{"csp-report":{"document-uri":"http://lolnope.com"}}',
+                                HTTP_USER_AGENT='awesome',
+                                )
         assert resp.status_code == 403, resp.content
 
         get_origins.return_value = ['*']
         resp = self.client.post(self.path,
-            content_type='application/csp-report',
-            data='{"csp-report":{"document-uri":"about:blank"}}',
-            HTTP_USER_AGENT='awesome',
-        )
+                                content_type='application/csp-report',
+                                data='{"csp-report":{"document-uri":"about:blank"}}',
+                                HTTP_USER_AGENT='awesome',
+                                )
         assert resp.status_code == 403, resp.content
 
     @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))
@@ -382,8 +382,10 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-access-from domain="disqus.com" secure="false" />' in resp.content.decode('utf-8')
-        assert '<allow-access-from domain="www.disqus.com" secure="false" />' in resp.content.decode('utf-8')
+        assert '<allow-access-from domain="disqus.com" secure="false" />' in resp.content.decode(
+            'utf-8')
+        assert '<allow-access-from domain="www.disqus.com" secure="false" />' in resp.content.decode(
+            'utf-8')
 
     @mock.patch('sentry.web.api.get_origins')
     def test_output_with_no_origins(self, get_origins):
@@ -400,7 +402,8 @@ class CrossDomainXmlTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain.xml')
-        assert '<allow-http-request-headers-from domain="*" headers="*" secure="false" />' in resp.content.decode('utf-8')
+        assert '<allow-http-request-headers-from domain="*" headers="*" secure="false" />' in resp.content.decode(
+            'utf-8')
 
 
 class CrossDomainXmlIndexTest(TestCase):
@@ -413,7 +416,8 @@ class CrossDomainXmlIndexTest(TestCase):
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/xml')
         self.assertTemplateUsed(resp, 'sentry/crossdomain_index.xml')
-        assert '<site-control permitted-cross-domain-policies="all" />' in resp.content.decode('utf-8')
+        assert '<site-control permitted-cross-domain-policies="all" />' in resp.content.decode(
+            'utf-8')
 
 
 class RobotsTxtTest(TestCase):
diff --git a/tests/sentry/web/forms/test_base_organization_member.py b/tests/sentry/web/forms/test_base_organization_member.py
index c4b4e5574e..4c0c383779 100644
--- a/tests/sentry/web/forms/test_base_organization_member.py
+++ b/tests/sentry/web/forms/test_base_organization_member.py
@@ -35,6 +35,7 @@ class BaseOrganizationMemberFormTest(TestCase):
 
         form.save_team_assignments(user_org_membership)
 
-        assigned_teams = OrganizationMemberTeam.objects.filter(organizationmember=user_org_membership)
+        assigned_teams = OrganizationMemberTeam.objects.filter(
+            organizationmember=user_org_membership)
         assert len(assigned_teams) == 1
         assert assigned_teams[0].team_id == team2.id
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 34b3e8a6c4..8b087104a2 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -250,7 +250,11 @@ class RecoverPasswordConfirmTest(TestCase):
 
     @fixture
     def path(self):
-        return reverse('sentry-account-recover-confirm', args=[self.user.id, self.password_hash.hash])
+        return reverse(
+            'sentry-account-recover-confirm',
+            args=[
+                self.user.id,
+                self.password_hash.hash])
 
     def test_valid_token(self):
         resp = self.client.get(self.path)
@@ -295,8 +299,8 @@ class ConfirmEmailSendTest(TestCase):
         email.save()
         self.login_as(user)
         self.client.post(reverse('sentry-account-confirm-email-send'),
-                        data={'primary-email': '', 'email': 'foo@example.com'},
-                        follow=True)
+                         data={'primary-email': '', 'email': 'foo@example.com'},
+                         follow=True)
         send_confirm_email.assert_called_once_with(UserEmail.get_primary_email(user))
 
 
diff --git a/tests/sentry/web/frontend/test_account_notifications.py b/tests/sentry/web/frontend/test_account_notifications.py
index 1b8dc35301..37a90161af 100644
--- a/tests/sentry/web/frontend/test_account_notifications.py
+++ b/tests/sentry/web/frontend/test_account_notifications.py
@@ -31,7 +31,8 @@ class NotificationSettingsTest(TestCase):
         team = self.create_team(organization=organization)
         project = self.create_project(organization=organization, team=team)
         team2 = self.create_team(organization=organization)
-        self.create_project(organization=organization, team=team, status=ProjectStatus.PENDING_DELETION)
+        self.create_project(organization=organization, team=team,
+                            status=ProjectStatus.PENDING_DELETION)
         self.create_project(organization=organization, team=team2)
         self.create_member(organization=organization, user=user, teams=[project.team])
         self.login_as(user)
diff --git a/tests/sentry/web/frontend/test_emails.py b/tests/sentry/web/frontend/test_emails.py
index c9b67a9c2d..ec66f7a162 100644
--- a/tests/sentry/web/frontend/test_emails.py
+++ b/tests/sentry/web/frontend/test_emails.py
@@ -82,7 +82,12 @@ class EmailsTest(TestCase):
         email.save()
         resp = self.client.get(self.path)
         self.assertIn('bar@example.com', resp.content)
-        resp = self.client.post(self.path, data={'remove': '', 'email': 'bar@example.com'}, follow=True)
+        resp = self.client.post(
+            self.path,
+            data={
+                'remove': '',
+                'email': 'bar@example.com'},
+            follow=True)
         self.assertNotIn('bar@example.com', resp.content)
         assert 'bar@example.com' not in (email.email for email in user.emails.all())
 
@@ -92,10 +97,10 @@ class EmailsTest(TestCase):
         resp = self.client.get(self.path)
         self.assertIn('foo@example.com', resp.content)
         resp = self.client.post(self.path,
-            {'primary': '',
-             'new_primary_email': 'bar@example.com'},
-            follow=True
-        )
+                                {'primary': '',
+                                 'new_primary_email': 'bar@example.com'},
+                                follow=True
+                                )
         self.assertIn('bar@example.com', resp.content)
         user = User.objects.get(id=user.id)
         assert user.email != 'foo@example.com'
@@ -106,7 +111,12 @@ class EmailsTest(TestCase):
         self.login_as(user)
         email = UserEmail(user=user, email='bar@example.com')
         email.save()
-        self.client.post(self.path, data={'primary': '', 'new_primary_email': 'bar@example.com'}, follow=True)
+        self.client.post(
+            self.path,
+            data={
+                'primary': '',
+                'new_primary_email': 'bar@example.com'},
+            follow=True)
         user = User.objects.get(id=user.id)
         assert user.username != 'foo@example.com'
         assert user.username == 'bar@example.com'
diff --git a/tests/sentry/web/frontend/test_oauth_authorize.py b/tests/sentry/web/frontend/test_oauth_authorize.py
index cd5c22befa..268f584018 100644
--- a/tests/sentry/web/frontend/test_oauth_authorize.py
+++ b/tests/sentry/web/frontend/test_oauth_authorize.py
@@ -69,10 +69,9 @@ class OAuthAuthorizeCodeTest(TestCase):
     def test_invalid_redirect_uri(self):
         self.login_as(self.user)
 
-        resp = self.client.get('{}?response_type=code&redirect_uri=https://google.com&client_id={}'.format(
-            self.path,
-            self.application.client_id,
-        ))
+        resp = self.client.get(
+            '{}?response_type=code&redirect_uri=https://google.com&client_id={}'.format(
+                self.path, self.application.client_id, ))
 
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/oauth-error.html')
@@ -135,10 +134,9 @@ class OAuthAuthorizeCodeTest(TestCase):
     def test_rich_params(self):
         self.login_as(self.user)
 
-        resp = self.client.get('{}?response_type=code&client_id={}&scope=org%3Aread&state=foo'.format(
-            self.path,
-            self.application.client_id,
-        ))
+        resp = self.client.get(
+            '{}?response_type=code&client_id={}&scope=org%3Aread&state=foo'.format(
+                self.path, self.application.client_id, ))
 
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/oauth-authorize.html')
@@ -233,16 +231,16 @@ class OAuthAuthorizeCodeTest(TestCase):
             application=self.application,
         )
 
-        resp = self.client.get('{}?response_type=code&client_id={}&scope=member:read member:admin'.format(
-            self.path,
-            self.application.client_id,
-        ))
+        resp = self.client.get(
+            '{}?response_type=code&client_id={}&scope=member:read member:admin'.format(
+                self.path, self.application.client_id, ))
 
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/oauth-authorize.html')
         assert resp.context['application'] == self.application
         assert resp.context['scopes'] == ['member:read', 'member:admin']
-        assert resp.context['permissions'] == ['Read, write, and admin access to organization members.']
+        assert resp.context['permissions'] == [
+            'Read, write, and admin access to organization members.']
 
 
 class OAuthAuthorizeTokenTest(TestCase):
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 295fe71fd9..024b9e1ace 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -12,7 +12,8 @@ class OrganizationMemberSettingsPermissionTest(PermissionTestCase):
         super(OrganizationMemberSettingsPermissionTest, self).setUp()
         member = self.create_user()
         om = self.create_member(user=member, organization=self.organization)
-        self.path = reverse('sentry-organization-member-settings', args=[self.organization.slug, om.id])
+        self.path = reverse('sentry-organization-member-settings',
+                            args=[self.organization.slug, om.id])
 
     def test_non_member_cannot_load(self):
         self.assert_non_member_cannot_access(self.path)
diff --git a/tests/sentry/web/frontend/test_project_tags.py b/tests/sentry/web/frontend/test_project_tags.py
index 23b295ce73..90e7a18a9e 100644
--- a/tests/sentry/web/frontend/test_project_tags.py
+++ b/tests/sentry/web/frontend/test_project_tags.py
@@ -10,7 +10,11 @@ from sentry.testutils import TestCase
 class ProjectTagsTest(TestCase):
     @fixture
     def path(self):
-        return reverse('sentry-manage-project-tags', args=[self.organization.slug, self.project.slug])
+        return reverse(
+            'sentry-manage-project-tags',
+            args=[
+                self.organization.slug,
+                self.project.slug])
 
     def test_requires_authentication(self):
         self.assertRequiresAuthentication(self.path)
diff --git a/tests/sentry/web/frontend/test_remove_project.py b/tests/sentry/web/frontend/test_remove_project.py
index 5007e23daf..f52e447ab6 100644
--- a/tests/sentry/web/frontend/test_remove_project.py
+++ b/tests/sentry/web/frontend/test_remove_project.py
@@ -10,7 +10,11 @@ class RemoveProjectPermissionTest(PermissionTestCase):
     def setUp(self):
         super(RemoveProjectPermissionTest, self).setUp()
         self.project = self.create_project(team=self.team)
-        self.path = reverse('sentry-remove-project', args=[self.organization.slug, self.project.slug])
+        self.path = reverse(
+            'sentry-remove-project',
+            args=[
+                self.organization.slug,
+                self.project.slug])
 
     def test_teamless_admin_cannot_load(self):
         self.assert_teamless_admin_cannot_access(self.path)
diff --git a/tests/sentry/web/frontend/test_restore_organization.py b/tests/sentry/web/frontend/test_restore_organization.py
index 7877ccaeb0..a9fb875a2e 100644
--- a/tests/sentry/web/frontend/test_restore_organization.py
+++ b/tests/sentry/web/frontend/test_restore_organization.py
@@ -9,7 +9,8 @@ from sentry.testutils import TestCase, PermissionTestCase
 class RestoreOrganizationPermissionTest(PermissionTestCase):
     def setUp(self):
         super(RestoreOrganizationPermissionTest, self).setUp()
-        self.organization = self.create_organization(name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
+        self.organization = self.create_organization(
+            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
         self.path = reverse('sentry-restore-organization', args=[self.organization.slug])
 
     def test_teamless_admin_cannot_load(self):
@@ -26,7 +27,8 @@ class RemoveOrganizationTest(TestCase):
     def setUp(self):
         super(RemoveOrganizationTest, self).setUp()
 
-        self.organization = self.create_organization(name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
+        self.organization = self.create_organization(
+            name='foo', owner=self.user, status=OrganizationStatus.PENDING_DELETION)
         self.team = self.create_team(organization=self.organization)
         self.path = reverse('sentry-restore-organization', args=[self.organization.slug])
 
