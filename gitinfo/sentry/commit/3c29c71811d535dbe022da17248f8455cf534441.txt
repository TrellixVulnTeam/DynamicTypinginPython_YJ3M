commit 3c29c71811d535dbe022da17248f8455cf534441
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Jan 29 15:37:15 2015 -0800

    Add delete_tag_key task

diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 2d82f21bd0..14d65433ed 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -156,6 +156,35 @@ def delete_group(object_id, **kwargs):
     group.delete()
 
 
+@instrumented_task(name='sentry.tasks.deletion.delete_tag_key', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
+@retry
+def delete_tag_key(object_id, **kwargs):
+    from sentry.models import GroupTagKey, GroupTagValue, TagKey, TagValue
+
+    try:
+        tagkey = TagKey.objects.get(id=object_id)
+    except TagKey.DoesNotExist:
+        return
+
+    logger = delete_tag_key.get_logger()
+
+    bulk_model_list = (
+        GroupTagValue, GroupTagKey, TagValue
+    )
+    for model in bulk_model_list:
+        has_more = bulk_delete_objects(model, key=tagkey.key, logger=logger)
+        if has_more:
+            delete_tag_key.delay(object_id=object_id, countdown=15)
+            return
+
+    has_more = delete_events(relation={'group_id': object_id}, logger=logger)
+    if has_more:
+        delete_tag_key.delay(object_id=object_id, countdown=15)
+        return
+    tagkey.delete()
+
+
 def delete_events(relation, limit=1000, logger=None):
     from sentry.app import nodestore
     from sentry.models import Event
@@ -191,17 +220,11 @@ def delete_objects(models, relation, limit=1000, logger=None):
     return has_more
 
 
-def bulk_delete_objects(model, group_id=None, project_id=None, limit=10000,
-                        logger=None):
-    assert group_id or project_id, 'Must pass either project_id or group_id'
-
-    if group_id:
-        column = 'group_id'
-        value = group_id
+def bulk_delete_objects(model, limit=10000,
+                        logger=None, **filters):
+    assert len(filters) == 1, 'Must pass a single column=value filter.'
 
-    elif project_id:
-        column = 'project_id'
-        value = project_id
+    column, value = filters.items()[0]
 
     connection = connections['default']
     quote_name = connection.ops.quote_name
@@ -238,7 +261,7 @@ def bulk_delete_objects(model, group_id=None, project_id=None, limit=10000,
     else:
         logger.warning('Using slow deletion strategy due to unknown database')
         has_more = False
-        for obj in model.objects.filter(project=project_id)[:limit]:
+        for obj in model.objects.filter(**{column: value})[:limit]:
             obj.delete()
             has_more = True
         return has_more
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index f87063cb14..2b54cbe0cf 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -1,7 +1,9 @@
 from mock import patch
 
-from sentry.models import Project, Team, TeamStatus
-from sentry.tasks.deletion import delete_team
+from sentry.models import (
+    GroupTagKey, GroupTagValue, Project, TagKey, TagValue, Team, TeamStatus
+)
+from sentry.tasks.deletion import delete_tag_key, delete_team
 from sentry.testutils import TestCase
 
 
@@ -38,3 +40,46 @@ class DeleteTeamTest(TestCase):
             assert not delete_team_delay.called
 
             assert not Team.objects.filter(id=team.id).exists()
+
+
+class DeleteTagKeyTest(TestCase):
+    @patch.object(delete_tag_key, 'delay')
+    def test_simple(self, delete_tag_key_delay):
+        team = self.create_team(name='test', slug='test')
+        project = self.create_project(team=team, name='test1', slug='test1')
+        group = self.create_group(project=project)
+        tk = TagKey.objects.create(key='foo', project=project)
+        TagValue.objects.create(key='foo', value='bar', project=project)
+        GroupTagKey.objects.create(key='foo', group=group, project=project)
+        GroupTagValue.objects.create(key='foo', value='bar', group=group, project=project)
+
+        with self.settings(CELERY_ALWAYS_EAGER=True):
+            delete_tag_key(object_id=tk.id)
+
+            assert not GroupTagValue.objects.filter(key=tk.key, project=project).exists()
+
+            delete_tag_key_delay.assert_called_once_with(object_id=tk.id, countdown=15)
+
+            delete_tag_key_delay.reset_mock()
+
+            delete_tag_key(object_id=tk.id)
+
+            assert not GroupTagKey.objects.filter(key=tk.key, project=project).exists()
+
+            delete_tag_key_delay.assert_called_once_with(object_id=tk.id, countdown=15)
+
+            delete_tag_key_delay.reset_mock()
+
+            delete_tag_key(object_id=tk.id)
+
+            assert not TagValue.objects.filter(key=tk.key, project=project).exists()
+
+            delete_tag_key_delay.assert_called_once_with(object_id=tk.id, countdown=15)
+
+            delete_tag_key_delay.reset_mock()
+
+            delete_tag_key(object_id=tk.id)
+
+            assert not delete_tag_key_delay.called
+
+            assert not TagKey.objects.filter(id=tk.id).exists()
