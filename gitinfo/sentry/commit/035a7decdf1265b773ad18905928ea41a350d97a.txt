commit 035a7decdf1265b773ad18905928ea41a350d97a
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 12 12:49:09 2017 -0700

    [analytics] improve serialization support for maps

diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index 93ac7d43df..001327c501 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -9,23 +9,43 @@ from django.utils import timezone
 
 
 class Attribute(object):
-    __slots__ = ['name', 'type', 'required']
-
     def __init__(self, name, type=six.text_type, required=True):
         self.name = name
         self.type = type
         self.required = required
 
+    def serialize(self, value):
+        if value is None:
+            return value
+        return self.type(value)
+
 
 class Map(Attribute):
-    def __init__(self, name, attributes, required=True):
+    attributes = ()
+
+    def __init__(self, name, attributes=None, required=True):
         self.name = name
         self.required = required
-        self.attributes = attributes
+        if attributes:
+            self.attributes = attributes
+
+    def serialize(self, value):
+        """
+        If passed a non dictionary we assume we can pull attributes from it.
+
+        This will hard error in some situations if you're passing some obscure
+        value (like an int).
+        """
+        if value is None:
+            return value
 
-    def type(self, value):
         if not isinstance(value, Mapping):
-            raise ValueError('Value must be a dictionary')
+            new_value = {}
+            for attr in self.attributes:
+                new_value[attr.name] = attr.serialize(
+                    getattr(value, attr.name, None)
+                )
+            value = new_value
 
         # ensure we dont mutate the original
         # we dont need to deepcopy as if it recurses into another Map it
@@ -40,7 +60,7 @@ class Map(Attribute):
                     attr.name,
                 ))
 
-            data[attr.name] = attr.type(nv) if nv is not None else nv
+            data[attr.name] = attr.serialize(nv)
 
         if items:
             raise ValueError(u'Unknown attributes: {}'.format(
@@ -72,7 +92,7 @@ class Event(object):
                 raise ValueError(u'{} is required (cannot be None)'.format(
                     attr.name,
                 ))
-            data[attr.name] = attr.type(nv) if nv is not None else nv
+            data[attr.name] = attr.serialize(nv)
 
         if items:
             raise ValueError(u'Unknown attributes: {}'.format(
diff --git a/tests/sentry/analytics/test_event.py b/tests/sentry/analytics/test_event.py
index 9c4288bd5a..1373d71963 100644
--- a/tests/sentry/analytics/test_event.py
+++ b/tests/sentry/analytics/test_event.py
@@ -18,6 +18,10 @@ class ExampleEvent(Event):
     )
 
 
+class DummyType(object):
+    key = 'value'
+
+
 class EventTest(TestCase):
     def test_simple(self):
         result = ExampleEvent(id='1', map={'key': 'value'}, optional=False)
@@ -49,3 +53,9 @@ class EventTest(TestCase):
     def test_invalid_map(self):
         with pytest.raises(ValueError):
             ExampleEvent(id='1', map='foo')
+
+    def test_map_with_instance(self):
+        result = ExampleEvent(id='1', map=DummyType())
+        assert result.data['map'] == {
+            'key': 'value',
+        }
