commit 78302317200925a41317ab3f9e1844937b8028d6
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Aug 10 16:57:36 2016 -0700

    Also escape apostrophes in html encoder (#3908)
    
    As a side effect, this fixes the remove tag button on the tags settings
    page

diff --git a/src/sentry/templates/sentry/projects/manage_tags.html b/src/sentry/templates/sentry/projects/manage_tags.html
index 40310209f0..3c6c3d5850 100644
--- a/src/sentry/templates/sentry/projects/manage_tags.html
+++ b/src/sentry/templates/sentry/projects/manage_tags.html
@@ -31,8 +31,14 @@
               <small>{{ tag.values_seen|small_count }} unique value(s)</small>
             </td>
             <td>
+            {% comment %}
+              Make sure this onclick is wrapped in single quotes
+              and not double quotes becuase the value is being
+              JSON encoded and can't put double quotes within
+              double quotes.
+            {% endcomment %}
               <a class="btn btn-sm btn-default" href="javascript:void(0)"
-                 onclick="removeTagKey({{ tag.key|to_json }})"><span class="icon icon-trash"></span></a>
+                 onclick='removeTagKey({{ tag.key|to_json }})'><span class="icon icon-trash"></span></a>
             </td>
           </tr>
         {% endfor %}
diff --git a/src/sentry/utils/json.py b/src/sentry/utils/json.py
index 54a3489630..8be41ce96c 100644
--- a/src/sentry/utils/json.py
+++ b/src/sentry/utils/json.py
@@ -9,7 +9,7 @@ sentry.utils.json
 # Avoid shadowing the standard library json module
 from __future__ import absolute_import
 
-from simplejson import JSONEncoder, JSONEncoderForHTML, _default_decoder
+from simplejson import JSONEncoder, _default_decoder
 import datetime
 import uuid
 import six
@@ -40,6 +40,28 @@ def better_default_encoder(o):
     raise TypeError(repr(o) + ' is not JSON serializable')
 
 
+class JSONEncoderForHTML(JSONEncoder):
+    # Our variant of JSONEncoderForHTML that also accounts for apostrophes
+    # See: https://github.com/simplejson/simplejson/blob/master/simplejson/encoder.py#L380-L386
+    def encode(self, o):
+        # Override JSONEncoder.encode because it has hacks for
+        # performance that make things more complicated.
+        chunks = self.iterencode(o, True)
+        if self.ensure_ascii:
+            return ''.join(chunks)
+        else:
+            return u''.join(chunks)
+
+    def iterencode(self, o, _one_shot=False):
+        chunks = super(JSONEncoderForHTML, self).iterencode(o, _one_shot)
+        for chunk in chunks:
+            chunk = chunk.replace('&', '\\u0026')
+            chunk = chunk.replace('<', '\\u003c')
+            chunk = chunk.replace('>', '\\u003e')
+            chunk = chunk.replace("'", '\\u0027')
+            yield chunk
+
+
 _default_encoder = JSONEncoder(
     separators=(',', ':'),
     ignore_nan=True,
diff --git a/tests/sentry/utils/json/tests.py b/tests/sentry/utils/json/tests.py
index 3d5b299c9c..1af061c6e1 100644
--- a/tests/sentry/utils/json/tests.py
+++ b/tests/sentry/utils/json/tests.py
@@ -28,9 +28,10 @@ class JSONTest(TestCase):
         self.assertEquals(json.dumps(res), '["foo"]')
 
     def test_escape(self):
-        res = '<script>alert(1);</script>'
-        assert json.dumps(res) == '"<script>alert(1);</script>"'
-        assert json.dumps(res, escape=True) == '"\\u003cscript\\u003ealert(1);\\u003c/script\\u003e"'
+        res = "<script>alert('&');</script>"
+        assert json.dumps(res) == '"<script>alert(\'&\');</script>"'
+        assert json.dumps(res, escape=True) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
+        assert json.dumps_htmlsafe(res) == '"\\u003cscript\\u003ealert(\\u0027\u0026\\u0027);\\u003c/script\\u003e"'
 
     def test_inf(self):
         res = float('inf')
