commit d75b4f44c144a45abf12d2fcaaa48f0d097db681
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 23 10:33:54 2020 -0800

    ref: Remove references to EventCommon (#16562)
    
    Reference the Event model rather than the base EventCommon model, which
    will soon be merged with Event.

diff --git a/src/sentry/integrations/pagerduty/client.py b/src/sentry/integrations/pagerduty/client.py
index 24b2f5e681..e389af9af1 100644
--- a/src/sentry/integrations/pagerduty/client.py
+++ b/src/sentry/integrations/pagerduty/client.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.integrations.client import ApiClient
-from sentry.models import EventCommon
+from sentry.eventstore.models import Event
 from sentry.api.serializers import serialize, ExternalEventSerializer
 
 LEVEL_SEVERITY_MAP = {
@@ -31,7 +31,7 @@ class PagerDutyClient(ApiClient):
     def send_trigger(self, data):
         # expected payload: https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2
         # for now, only construct the payload if data is an event
-        if isinstance(data, EventCommon):
+        if isinstance(data, Event):
             source = data.transaction or data.culprit or "<unknown>"
             group = data.group
             level = data.get_tag("level") or "error"
diff --git a/src/sentry/migrations/0001_initial.py b/src/sentry/migrations/0001_initial.py
index ff68f32ec3..63b754100b 100644
--- a/src/sentry/migrations/0001_initial.py
+++ b/src/sentry/migrations/0001_initial.py
@@ -864,7 +864,6 @@ class Migration(migrations.Migration):
                 'verbose_name': 'message',
                 'verbose_name_plural': 'messages',
             },
-            bases=(sentry.models.event.EventCommon, models.Model),
         ),
         migrations.CreateModel(
             name='EventAttachment',
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 040ec422f4..2731ee73d0 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -15,7 +15,6 @@ from sentry.utils.sentryappwebhookrequests import SentryAppWebhookRequestsBuffer
 from sentry.api.serializers import serialize, AppPlatformEvent
 from sentry.models import (
     SentryAppInstallation,
-    EventCommon,
     Group,
     Project,
     Organization,
@@ -112,7 +111,7 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
     model = TYPES[sender]
     # The Event model has different hooks for the different event types. The sender
     # determines which type eg. Error and therefore the 'name' eg. error
-    if issubclass(model, EventCommon):
+    if issubclass(model, Event):
         if not kwargs.get("instance"):
             extra = {"sender": sender, "action": action, "event_id": instance_id}
             logger.info("process_resource_change.event_missing_event", extra=extra)
@@ -131,7 +130,7 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
     # We may run into a race condition where this task executes before the
     # transaction that creates the Group has committed.
     try:
-        if issubclass(model, EventCommon):
+        if issubclass(model, Event):
             # XXX:(Meredith): Passing through the entire event was an intentional choice
             # to avoid having to query NodeStore again for data we had previously in
             # post_process. While this is not ideal, changing this will most likely involve
@@ -151,7 +150,7 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
 
     org = None
 
-    if isinstance(instance, Group) or issubclass(model, EventCommon):
+    if isinstance(instance, Group) or isinstance(instance, Event):
         org = Organization.objects.get_from_cache(
             id=Project.objects.get_from_cache(id=instance.project_id).organization_id
         )
@@ -163,7 +162,7 @@ def _process_resource_change(action, sender, instance_id, retryer=None, *args, *
 
     for installation in installations:
         data = {}
-        if issubclass(model, EventCommon):
+        if isinstance(instance, Event):
             data[name] = _webhook_event_data(instance, instance.group_id, instance.project_id)
             send_webhooks(installation, event, data=data)
         else:
