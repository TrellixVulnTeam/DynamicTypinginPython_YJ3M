commit 2bf22d95d5519018e91fdc34f5ad16fee1df09f7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Jan 16 13:26:52 2017 +0100

    Fixed various regressions with stackframe processing

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index df78da4ee4..58e982842b 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -421,6 +421,7 @@ class EventManager(object):
         from sentry.tasks.post_process import index_event_tags
 
         project = Project.objects.get_from_cache(id=project)
+        assert project is not None, 'did not get a project. this is bad'
 
         data = self.data.copy()
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 278a958657..7012248109 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -452,4 +452,4 @@ class NativePlugin(Plugin2):
     def get_stacktrace_processors(self, data, stacktrace_infos,
                                   platforms, **kwargs):
         if 'cocoa' in platforms:
-            return NativeStacktraceProcessor(data, stacktrace_infos)
+            return [NativeStacktraceProcessor(data, stacktrace_infos)]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index c82763980e..9b2b35b060 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -137,7 +137,7 @@ class Symbolizer(object):
         self.is_debug_build = is_debug_build
 
     def close(self):
-        self.symsynd_symbolizer.close()
+        self.symsynd_symbolizer.driver.close()
 
     def _process_frame(self, frame, img):
         rv = trim_frame(frame)
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 4ae10c717a..ae70dfe5aa 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -365,7 +365,8 @@ class IPlugin2(local, PluginConfigMixin):
         """
         return []
 
-    def get_stacktrace_processors(self, data, stacktrace, platforms, **kwargs):
+    def get_stacktrace_processors(self, data, stacktrace_infos,
+                                  platforms, **kwargs):
         """
         This works similarly to `get_event_preprocessors` but returns a
         function that is invoked for all encountered stacktraces in an
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 7504430be9..82b4a70839 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -39,17 +39,6 @@ class StacktraceProcessor(object):
         pass
 
 
-class FrameError(object):
-
-    def __init__(self, type=None, key=None, data=None,
-                 record_processing_issue=False, release_bound=True):
-        self.type = type
-        self.key = key
-        self.data = data
-        self.record_processing_issue = record_processing_issue
-        self.release_bound = release_bound
-
-
 def find_stacktraces_in_data(data):
     """Finds all stracktraces in a given data blob and returns it
     together with some meta information.
@@ -87,6 +76,22 @@ def find_stacktraces_in_data(data):
     return rv
 
 
+def should_process_for_stacktraces(data):
+    from sentry.plugins import plugins
+    infos = find_stacktraces_in_data(data)
+    platforms = set()
+    for info in infos:
+        platforms.update(info.platforms or ())
+    for plugin in plugins.all(version=2):
+        processors = safe_execute(plugin.get_stacktrace_processors,
+                                  data=data, stacktrace_infos=infos,
+                                  platforms=platforms,
+                                  _with_transaction=False)
+        if processors:
+            return True
+    return False
+
+
 def get_processors_for_stacktraces(data, infos):
     from sentry.plugins import plugins
 
@@ -118,7 +123,7 @@ def process_single_stacktrace(stacktrace_info, processors):
         errors = None
         for processor in processors:
             try:
-                rv = processor.process_frame(frame) or None, None, None
+                rv = processor.process_frame(frame) or (None, None, None)
             except Exception:
                 logger.exception('Failed to process frame')
                 continue
@@ -167,7 +172,9 @@ def process_stacktraces(data):
            stacktrace_info.container is not None:
             stacktrace_info.container['raw_stacktrace'] = raw_stacktrace
             changed = True
-        data.setdefault('errors', []).extend(errors or ())
+        if errors:
+            data.setdefault('errors', []).extend(errors)
+            changed = True
 
     for processor in processors:
         processor.close()
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index f3d5e6ce82..5e8c12dfce 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -18,7 +18,8 @@ from sentry.cache import default_cache
 from sentry.tasks.base import instrumented_task
 from sentry.utils import metrics
 from sentry.utils.safe import safe_execute
-from sentry.stacktraces import process_stacktraces
+from sentry.stacktraces import process_stacktraces, \
+    should_process_for_stacktraces
 
 error_logger = logging.getLogger('sentry.errors.events')
 
@@ -26,7 +27,6 @@ error_logger = logging.getLogger('sentry.errors.events')
 def should_process(data):
     """Quick check if processing is needed at all."""
     from sentry.plugins import plugins
-    from sentry.models import Stacktrace
 
     for plugin in plugins.all(version=2):
         processors = safe_execute(plugin.get_event_preprocessors, data=data,
@@ -34,13 +34,8 @@ def should_process(data):
         if processors:
             return True
 
-        for info in Stacktrace.find_stacktraces_in_data(data):
-            processors = safe_execute(plugin.get_stacktrace_processors,
-                                      data=data, stacktrace=info['stacktrace'],
-                                      platforms=info['platforms'],
-                                      _with_transaction=False)
-            if processors:
-                return True
+    if should_process_for_stacktraces(data):
+        return True
 
     return False
 
