commit c14fd3faf0b6a2d00027fe87c62e6236cf5cd0a5
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 2 09:37:46 2018 -0700

    ref(newsletter): Various cleanup and fixes
    
    - Pass correct list_id for default newsletter subscription
    - Fill in function signatures on Newsletter base
    - Add DummyNewsletter for tests
    - Utilize Newsletter.is_enabled from service
    - Remove sentry.app.newsletter (in favor of sentry.newsletter)

diff --git a/src/sentry/api/endpoints/user_emails.py b/src/sentry/api/endpoints/user_emails.py
index d8ffd586b8..688497ee06 100644
--- a/src/sentry/api/endpoints/user_emails.py
+++ b/src/sentry/api/endpoints/user_emails.py
@@ -60,10 +60,11 @@ def add_email(email, user, subscribe_newsletter=False):
 
         # Update newsletter subscription and mark as unverified
         if subscribe_newsletter:
-            newsletter.update_subscription(user=user,
-                                           verified=False,
-                                           list_id=1,
-                                           )
+            newsletter.create_or_update_subscription(
+                user=user,
+                verified=False,
+                list_id=newsletter.get_default_list_id(),
+            )
         return new_email
 
 
diff --git a/src/sentry/api/endpoints/user_subscriptions.py b/src/sentry/api/endpoints/user_subscriptions.py
index 7df5fcd83b..f53505fc44 100644
--- a/src/sentry/api/endpoints/user_subscriptions.py
+++ b/src/sentry/api/endpoints/user_subscriptions.py
@@ -4,7 +4,7 @@ from django.utils import timezone
 from rest_framework.response import Response
 from rest_framework import status
 
-from sentry.app import newsletter
+from sentry import newsletter
 from sentry.api.bases.user import UserEndpoint
 from sentry.models import UserEmail
 
diff --git a/src/sentry/app.py b/src/sentry/app.py
index 253761dfd7..a39b40cf03 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -28,7 +28,6 @@ env = State()
 from sentry import search, tsdb  # NOQA
 from .buffer import backend as buffer  # NOQA
 from .digests import backend as digests  # NOQA
-from .newsletter import backend as newsletter  # NOQA
 from .nodestore import backend as nodestore  # NOQA
 from .quotas import backend as quotas  # NOQA
 from .ratelimits import backend as ratelimiter  # NOQA
diff --git a/src/sentry/newsletter/base.py b/src/sentry/newsletter/base.py
index eef23dfd12..a62795d96d 100644
--- a/src/sentry/newsletter/base.py
+++ b/src/sentry/newsletter/base.py
@@ -5,7 +5,7 @@ from sentry.utils.services import Service
 
 class Newsletter(Service):
     __all__ = (
-        'is_enabled', 'get_subscriptions', 'update_subscription',
+        'is_enabled', 'get_default_list_id', 'get_subscriptions', 'update_subscription',
         'create_or_update_subscription', 'optout_email',
     )
 
@@ -13,18 +13,31 @@ class Newsletter(Service):
 
     enabled = False
 
+    def get_default_list_id(self):
+        return self.DEFAULT_LIST_ID
+
     def is_enabled(self):
         return self.enabled
 
     def get_subscriptions(self, user):
         return None
 
-    def update_subscription(self, user, **kwargs):
+    def update_subscription(self, user, list_id=None, subscribed=True, create=None,
+                            verified=None, subscribed_date=None, unsubscribed_date=None, **kwargs):
         return None
 
-    def create_or_update_subscription(self, user, **kwargs):
-        kwargs['create'] = True
-        return self.update_subscription(user, **kwargs)
-
-    def optout_email(self, email, property):
+    def create_or_update_subscription(self, user, list_id=None, subscribed=True, verified=None,
+                                      subscribed_date=None, unsubscribed_date=None, **kwargs):
+        return self.update_subscription(
+            user=user,
+            list_id=list_id,
+            subscribed=subscribed,
+            verified=verified,
+            subscribed_date=subscribed_date,
+            unsubscribed_date=unsubscribed_date,
+            create=True,
+            **kwargs
+        )
+
+    def optout_email(self, email, **kwargs):
         raise NotImplementedError
diff --git a/src/sentry/newsletter/dummy.py b/src/sentry/newsletter/dummy.py
new file mode 100644
index 0000000000..ee415a1db2
--- /dev/null
+++ b/src/sentry/newsletter/dummy.py
@@ -0,0 +1,81 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import defaultdict
+from django.utils import timezone
+
+from .base import Newsletter
+
+
+class NewsletterSubscription(object):
+    def __init__(self, user, list_id, list_name=None, list_description=None, email=None, verified=None, subscribed=False, subscribed_date=None, unsubscribed_date=None, **kwargs):
+        self.email = user.email or email
+        self.list_id = list_id
+        self.list_description = list_description
+        self.list_name = list_name
+        # is the email address verified?
+        self.verified = user.email_set.get_or_create(email=user.email)[0].is_verified if verified is None else verified
+        # are they subscribed to ``list_id``
+        self.subscribed = subscribed
+        if subscribed:
+            self.subscribed_date = subscribed_date or timezone.now()
+        elif subscribed is False:
+            self.unsubscribed_date = unsubscribed_date or timezone.now()
+
+    def __getitem__(self, key):
+        return getattr(self, key)
+
+    def update(self, verified=None, subscribed=None, subscribed_date=None, unsubscribed_date=None, **kwargs):
+        if verified is not None:
+            self.verified = verified
+        if subscribed is not None:
+            self.subscribed = subscribed
+        if subscribed_date is not None:
+            self.subscribed_date = subscribed_date
+        elif subscribed:
+            self.subscribed_date = timezone.now()
+        if unsubscribed_date is not None:
+            self.unsubscribed_date = unsubscribed_date
+        elif subscribed is False:
+            self.unsubscribed_date = timezone.now()
+
+
+class DummyNewsletter(Newsletter):
+    """
+    The ``DummyNewsletter`` implementation is primarily used for test cases. It uses a in-memory
+    store for tracking subscriptions, which means its not suitable for any real production use-case.
+    """
+
+    def __init__(self):
+        self._subscriptions = defaultdict(dict)
+        self._optout = set()
+        self._enabled = True
+
+    def enable(self):
+        self._enabled = True
+
+    def disable(self):
+        self._enabled = False
+
+    def clear(self):
+        self._subscriptions = defaultdict(dict)
+        self._optout = set()
+
+    def is_enabled(self):
+        return self._enabled
+
+    def get_subscriptions(self, user):
+        return {
+            'subscriptions': list(six.itervalues(self._subscriptions.get(user) or {}))
+        }
+
+    def update_subscription(self, user, list_id=None, create=False, **kwargs):
+        if list_id:
+            if create:
+                self._subscriptions[user].setdefault(list_id, NewsletterSubscription(user, list_id, subscribed=True))
+            self._subscriptions[user][list_id].update(**kwargs)
+        return self._subscriptions[user]
+
+    def optout_email(self, email, **kwargs):
+        self._optout.add(email)
diff --git a/src/sentry/receivers/useremail.py b/src/sentry/receivers/useremail.py
index 88228f2d85..0e567023ef 100644
--- a/src/sentry/receivers/useremail.py
+++ b/src/sentry/receivers/useremail.py
@@ -21,9 +21,9 @@ post_save.connect(create_user_email, sender=User, dispatch_uid="create_user_emai
 
 @email_verified.connect(weak=False)
 def verify_newsletter_subscription(sender, **kwargs):
-    from sentry.app import newsletter
+    from sentry import newsletter
 
-    if not newsletter.enabled:
+    if not newsletter.is_enabled():
         return
 
     if not sender.is_primary():
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 8908babfa9..70b43cc019 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -104,6 +104,9 @@ def pytest_configure(config):
     settings.SENTRY_TSDB = 'sentry.tsdb.inmemory.InMemoryTSDB'
     settings.SENTRY_TSDB_OPTIONS = {}
 
+    settings.SENTRY_NEWSLETTER = 'sentry.newsletter.dummy.DummyNewsletter'
+    settings.SENTRY_NEWSLETTER_OPTIONS = {}
+
     settings.BROKER_BACKEND = 'memory'
     settings.BROKER_URL = None
     settings.CELERY_ALWAYS_EAGER = False
@@ -202,6 +205,10 @@ def pytest_runtest_teardown(item):
     # TODO(dcramer): this only works if this is the correct tsdb backend
     tsdb.flush()
 
+    # XXX(dcramer): only works with DummyNewsletter
+    from sentry import newsletter
+    newsletter.backend.clear()
+
     from sentry.utils.redis import clusters
 
     with clusters.get('default').all() as client:
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 2cfc6731b4..9787b40f07 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -7,9 +7,10 @@ sentry.web.forms.accounts
 """
 from __future__ import absolute_import
 
-from datetime import datetime
-
 import pytz
+import six
+
+from datetime import datetime
 from django import forms
 from django.conf import settings
 from django.contrib.auth import authenticate, get_user_model
@@ -17,9 +18,9 @@ from django.db.models import Q
 from django.utils.text import capfirst, mark_safe
 from django.utils.translation import ugettext_lazy as _
 
-from sentry import options
+from sentry import newsletter, options
 from sentry.auth import password_validation
-from sentry.app import ratelimiter, newsletter
+from sentry.app import ratelimiter
 from sentry.constants import LANGUAGES
 from sentry.models import (Organization, OrganizationStatus, User, UserOption, UserOptionValue)
 from sentry.security import capture_security_activity
@@ -192,7 +193,7 @@ class RegistrationForm(forms.ModelForm):
         required=True, widget=forms.PasswordInput(attrs={'placeholder': 'something super secret'})
     )
     subscribe = CustomTypedChoiceField(
-        coerce=bool,
+        coerce=lambda x: six.text_type(x) == u'1',
         label=_("Email updates"),
         choices=(
             (1, 'Yes, I would like to receive updates via email'),
@@ -205,7 +206,7 @@ class RegistrationForm(forms.ModelForm):
 
     def __init__(self, *args, **kwargs):
         super(RegistrationForm, self).__init__(*args, **kwargs)
-        if not newsletter.enabled:
+        if not newsletter.is_enabled():
             del self.fields['subscribe']
         else:
             self.fields['subscribe'].help_text = mark_safe("We'd love to keep you updated via email with product and feature announcements, promotions, educational materials, and events. Our updates focus on relevant information and never sell your data to marketing companies. See our <a href=\"%(privacy_link)s\">Privacy Policy</a> for more details.".format(
@@ -238,7 +239,7 @@ class RegistrationForm(forms.ModelForm):
         if commit:
             user.save()
             if self.cleaned_data.get('subscribe'):
-                newsletter.create_or_update_subscription(user, list_id=newsletter.DEFAULT_LIST_ID)
+                newsletter.create_or_update_subscription(user, list_id=newsletter.get_default_list_id())
         return user
 
 
diff --git a/src/sentry/web/frontend/account_security.py b/src/sentry/web/frontend/account_security.py
index 48102d7b3c..40045cdf00 100644
--- a/src/sentry/web/frontend/account_security.py
+++ b/src/sentry/web/frontend/account_security.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-from sentry.app import newsletter
+from sentry import newsletter
 from sentry.models import Authenticator
 from sentry.utils.auth import get_auth_providers
 from sentry.web.frontend.base import BaseView
@@ -13,6 +13,6 @@ class AccountSecurityView(BaseView):
                 'page': 'security',
                 'has_2fa': Authenticator.objects.user_has_2fa(request.user),
                 'AUTH_PROVIDERS': get_auth_providers(),
-                'has_newsletters': newsletter.is_enabled,
+                'has_newsletters': newsletter.is_enabled(),
             }
         )
diff --git a/tests/sentry/api/endpoints/test_user_emails.py b/tests/sentry/api/endpoints/test_user_emails.py
index 20f2603fe8..d5005d250b 100644
--- a/tests/sentry/api/endpoints/test_user_emails.py
+++ b/tests/sentry/api/endpoints/test_user_emails.py
@@ -2,12 +2,22 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
+from sentry import newsletter
 from sentry.models import User, UserEmail
 from sentry.testutils import APITestCase
 
 
 class UserEmailsTest(APITestCase):
     def setUp(self):
+        super(UserEmailsTest, self).setUp()
+
+        def disable_newsletter():
+            newsletter.backend.disable()
+
+        # disable newsletter by default
+        newsletter.backend.disable()
+
+        self.addCleanup(disable_newsletter)
         self.user = self.create_user(email='foo@example.com')
         self.login_as(user=self.user)
         self.url = reverse('sentry-api-0-user-emails', kwargs={'user_id': self.user.id})
@@ -33,7 +43,7 @@ class UserEmailsTest(APITestCase):
             'email': 'invalidemail',
         })
         assert response.status_code == 400
-        assert not len(UserEmail.objects.filter(user=self.user, email='invalidemail'))
+        assert not UserEmail.objects.filter(user=self.user, email='invalidemail').exists()
 
         # valid secondary email
         response = self.client.post(self.url, data={
@@ -41,7 +51,7 @@ class UserEmailsTest(APITestCase):
         })
 
         assert response.status_code == 201
-        assert len(UserEmail.objects.filter(user=self.user, email='altemail1@example.com'))
+        assert UserEmail.objects.filter(user=self.user, email='altemail1@example.com').exists()
 
         # duplicate email
         response = self.client.post(self.url, data={
@@ -49,6 +59,32 @@ class UserEmailsTest(APITestCase):
         })
         assert response.status_code == 400
 
+    def test_add_secondary_email_with_newsletter_subscribe(self):
+        newsletter.backend.enable()
+        response = self.client.post(self.url, data={
+            'email': 'altemail1@example.com',
+            'newsletter': '1',
+        })
+
+        assert response.status_code == 201
+        assert UserEmail.objects.filter(user=self.user, email='altemail1@example.com').exists()
+        results = newsletter.get_subscriptions(self.user)['subscriptions']
+        assert len(results) == 1
+        assert results[0].list_id == newsletter.get_default_list_id()
+        assert results[0].subscribed
+        assert not results[0].verified
+
+    def test_add_secondary_email_with_newsletter_no_subscribe(self):
+        newsletter.backend.enable()
+        response = self.client.post(self.url, data={
+            'email': 'altemail1@example.com',
+            'newsletter': '0',
+        })
+
+        assert response.status_code == 201
+        assert UserEmail.objects.filter(user=self.user, email='altemail1@example.com').exists()
+        assert newsletter.get_subscriptions(self.user) == {'subscriptions': []}
+
     def test_change_verified_secondary_to_primary(self):
         UserEmail.objects.create(user=self.user, email='altemail1@example.com', is_verified=True)
         response = self.client.put(self.url, data={
diff --git a/tests/sentry/api/endpoints/test_user_subscriptions.py b/tests/sentry/api/endpoints/test_user_subscriptions.py
index 0a3af12ec0..be255191dc 100644
--- a/tests/sentry/api/endpoints/test_user_subscriptions.py
+++ b/tests/sentry/api/endpoints/test_user_subscriptions.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
+from sentry import newsletter
 from sentry.testutils import APITestCase
 
 
@@ -10,6 +11,7 @@ class UserSubscriptionsTest(APITestCase):
         self.user = self.create_user(email='foo@example.com')
         self.login_as(self.user)
         self.url = reverse('sentry-api-0-user-subscriptions', kwargs={'user_id': self.user.id})
+        newsletter.backend.enable()
 
     def test_get_subscriptions(self):
         response = self.client.get(self.url)
@@ -21,3 +23,8 @@ class UserSubscriptionsTest(APITestCase):
             'subscribed': True,
         })
         assert response.status_code == 204, response.content
+        results = newsletter.get_subscriptions(self.user)['subscriptions']
+        assert len(results) == 1
+        assert results[0].list_id == 123
+        assert results[0].subscribed
+        assert results[0].verified
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index e50c7fe862..7293c09686 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -5,7 +5,7 @@ from django.utils.http import urlquote
 from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry import options
+from sentry import options, newsletter
 from sentry.testutils import TestCase
 from sentry.models import OrganizationMember, User
 
@@ -16,6 +16,16 @@ class AuthLoginTest(TestCase):
     def path(self):
         return reverse('sentry-login')
 
+    def setUp(self):
+        super(AuthLoginTest, self).setUp()
+
+        def disable_newsletter():
+            newsletter.backend.disable()
+
+        self.addCleanup(disable_newsletter)
+        # disable newsletter by default
+        newsletter.backend.disable()
+
     def test_renders_correct_template(self):
         resp = self.client.get(self.path)
 
@@ -85,6 +95,68 @@ class AuthLoginTest(TestCase):
             user=user,
         ).exists()
 
+    def test_registration_requires_subscribe_choice_with_newsletter(self):
+        options.set('auth.allow-registration', True)
+        newsletter.backend.enable()
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                }
+            )
+        assert resp.status_code == 200
+
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                    'subscribe': '0',
+                }
+            )
+        assert resp.status_code == 302
+
+        user = User.objects.get(username='test-a-really-long-email-address@example.com')
+        assert user.email == 'test-a-really-long-email-address@example.com'
+        assert user.check_password('foobar')
+        assert user.name == 'Foo Bar'
+        assert not OrganizationMember.objects.filter(
+            user=user,
+        ).exists()
+
+        assert newsletter.get_subscriptions(user) == {'subscriptions': []}
+
+    def test_registration_subscribe_to_newsletter(self):
+        options.set('auth.allow-registration', True)
+        newsletter.backend.enable()
+        with self.feature('auth:register'):
+            resp = self.client.post(
+                self.path, {
+                    'username': 'test-a-really-long-email-address@example.com',
+                    'password': 'foobar',
+                    'name': 'Foo Bar',
+                    'op': 'register',
+                    'subscribe': '1',
+                }
+            )
+        assert resp.status_code == 302
+
+        user = User.objects.get(username='test-a-really-long-email-address@example.com')
+        assert user.email == 'test-a-really-long-email-address@example.com'
+        assert user.check_password('foobar')
+        assert user.name == 'Foo Bar'
+
+        results = newsletter.get_subscriptions(user)['subscriptions']
+        assert len(results) == 1
+        assert results[0].list_id == newsletter.get_default_list_id()
+        assert results[0].subscribed
+        assert not results[0].verified
+
     def test_register_renders_correct_template(self):
         options.set('auth.allow-registration', True)
         register_path = reverse('sentry-register')
