commit affa609b5b26dd8226d2a666c69dc12048649c48
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Aug 27 13:52:14 2015 -0700

    Revert "Standardize values of body, headers, and cookies (refs GH-1853)"
    
    This reverts commit 62b6e5fbfc6f0afa13761a82f95a0ab302c0e0f2.

diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 66119c6373..db2f3f654e 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -17,42 +17,29 @@ from urlparse import parse_qsl, urlsplit, urlunsplit
 
 from sentry.constants import HTTP_METHODS
 from sentry.interfaces.base import Interface
-from sentry.utils import json
-from sentry.utils.safe import trim, trim_dict, trim_pairs
+from sentry.utils.safe import trim, trim_dict
 from sentry.web.helpers import render_to_string
 
 
 def format_headers(value):
-    if not value:
-        return ()
-
-    if isinstance(value, dict):
-        value = value.items()
-
-    result = []
-    cookie_header = None
-    for k, v in value:
-        if k.lower() == 'cookie':
-            cookie_header = v
-        else:
-            result.append((k.title(), v))
-    return result, cookie_header
+    return dict(
+        (k.title(), v)
+        for k, v in value.iteritems()
+    )
 
 
 def format_cookies(value):
-    if not value:
-        return ()
-
-    if isinstance(value, basestring):
-        value = parse_qsl(value, keep_blank_values=True)
+    return dict(
+        (k.encode('utf8').strip(), v)
+        for k, v in value.iteritems()
+    )
 
-    if isinstance(value, dict):
-        value = value.items()
 
-    return [
-        (k.encode('utf8').strip(), v)
-        for k, v in value
-    ]
+def format_body(value):
+    return dict(
+        (k.encode('utf8'), v.encode('utf8'))
+        for k, v in value.iteritems()
+    )
 
 
 class Http(Interface):
@@ -128,22 +115,41 @@ class Http(Interface):
         # strip them out
         headers = data.get('headers')
         if headers:
-            headers, cookie_header = format_headers(headers)
-            if not cookies and cookie_header:
-                cookies = cookie_header
+            headers = format_headers(headers)
+            if 'Cookie' in headers:
+                if not cookies:
+                    cookies = headers.pop('Cookie')
+                else:
+                    del headers['Cookie']
+            headers = trim_dict(headers)
         else:
             headers = {}
 
         body = data.get('data')
+        # TODO(dcramer): a list as a body is not even close to valid
         if isinstance(body, dict):
-            body = json.dumps(body)
-
-        if body:
+            body = trim_dict(dict(
+                (k, v or '')
+                for k, v in body.iteritems()
+            ))
+        elif body:
             body = trim(body, settings.SENTRY_MAX_HTTP_BODY_SIZE)
-
-        kwargs['cookies'] = trim_pairs(format_cookies(cookies))
+            if headers.get('Content-Type') == cls.FORM_TYPE and '=' in body:
+                body = dict(parse_qsl(body, True))
+
+        # if cookies were a string, convert to a dict
+        # parse_qsl will parse both acceptable formats:
+        #  a=b&c=d
+        # and
+        #  a=b;c=d
+        if isinstance(cookies, basestring):
+            cookies = dict(parse_qsl(cookies, keep_blank_values=True))
+        elif not cookies:
+            cookies = {}
+
+        kwargs['cookies'] = format_cookies(trim_dict(cookies))
         kwargs['env'] = trim_dict(data.get('env') or {})
-        kwargs['headers'] = trim_pairs(headers)
+        kwargs['headers'] = headers
         kwargs['data'] = body
         kwargs['url'] = urlunsplit((scheme, netloc, path, '', ''))
         kwargs['fragment'] = trim(fragment, 256)
@@ -178,29 +184,18 @@ class Http(Interface):
         return _('Request')
 
     def get_api_context(self, is_public=False):
-        data = self.data
-        if isinstance(data, dict):
-            data = json.dumps(data)
-
-        cookies = self.cookies or ()
-        if isinstance(cookies, dict):
-            cookies = sorted(self.cookies.items())
-
-        headers = self.headers or ()
-        if isinstance(headers, dict):
-            headers = sorted(self.headers.items())
-
         data = {
             'method': self.method,
             'url': self.url,
             'query': self.query_string,
             'fragment': self.fragment,
-            'data': data,
-            'headers': headers,
+            'data': self.data,
+            # TODO(dcramer): scrub headers for IPs/etc when is_public
+            'headers': self.headers or None,
         }
         if not is_public:
             data.update({
-                'cookies': cookies,
+                'cookies': self.cookies or None,
                 'env': self.env or None,
             })
         return data
diff --git a/src/sentry/utils/safe.py b/src/sentry/utils/safe.py
index aefa59e7f4..3e342c6954 100644
--- a/src/sentry/utils/safe.py
+++ b/src/sentry/utils/safe.py
@@ -94,17 +94,6 @@ def trim(value, max_size=settings.SENTRY_MAX_VARIABLE_SIZE, max_depth=3,
     return result
 
 
-def trim_pairs(iterable, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
-    max_items -= 1
-    result = []
-    for idx, item in enumerate(iterable):
-        key, value = item
-        result.append((key, trim(value, **kwargs)))
-        if idx > max_items:
-            return result
-    return result
-
-
 def trim_dict(value, max_items=settings.SENTRY_MAX_DICTIONARY_ITEMS, **kwargs):
     max_items -= 1
     for idx, key in enumerate(value.keys()):
diff --git a/tests/sentry/interfaces/test_http.py b/tests/sentry/interfaces/test_http.py
index e3bb1c84dc..882a3da76d 100644
--- a/tests/sentry/interfaces/test_http.py
+++ b/tests/sentry/interfaces/test_http.py
@@ -29,8 +29,8 @@ class HttpTest(TestCase):
         assert result.fragment == ''
         assert result.query_string == ''
         assert result.data is None
-        assert result.cookies == []
-        assert result.headers == []
+        assert result.cookies == {}
+        assert result.headers == {}
         assert result.env == {}
         assert result.full_url == result.url
 
@@ -48,8 +48,8 @@ class HttpTest(TestCase):
         assert result.method == 'GET'
         assert result.query_string == 'foo=bar'
         assert result.fragment == 'foobar'
-        assert result.cookies == [('foo', 'bar')]
-        assert result.headers == [('X-Foo-Bar', 'baz')]
+        assert result.cookies == {'foo': 'bar'}
+        assert result.headers == {'X-Foo-Bar': 'baz'}
         assert result.env == {'bing': 'bong'}
         assert result.data == 'hello world'
 
@@ -65,7 +65,7 @@ class HttpTest(TestCase):
             url='http://example.com',
             data={'foo': 'bar'},
         ))
-        assert result.data == '{"foo":"bar"}'
+        assert result.data == {'foo': 'bar'}
 
     def test_form_encoded_data(self):
         result = Http.to_python(dict(
@@ -73,32 +73,32 @@ class HttpTest(TestCase):
             headers={'Content-Type': 'application/x-www-form-urlencoded'},
             data='foo=bar',
         ))
-        assert result.data == 'foo=bar'
+        assert result.data == {'foo': 'bar'}
 
     def test_cookies_as_string(self):
         result = Http.to_python(dict(
             url='http://example.com',
             cookies='a=b;c=d',
         ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
+        assert result.cookies == {'a': 'b', 'c': 'd'}
         result = Http.to_python(dict(
             url='http://example.com',
             cookies='a=b&c=d',
         ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
+        assert result.cookies == {'a': 'b', 'c': 'd'}
 
     def test_cookies_in_header(self):
         result = Http.to_python(dict(
             url='http://example.com',
             headers={'Cookie': 'a=b;c=d'},
         ))
-        assert result.cookies == [('a', 'b'), ('c', 'd')]
+        assert result.cookies == {'a': 'b', 'c': 'd'}
         result = Http.to_python(dict(
             url='http://example.com',
             headers={'Cookie': 'a=b;c=d'},
             cookies={'foo': 'bar'},
         ))
-        assert result.cookies == [('foo', 'bar')]
+        assert result.cookies == {'foo': 'bar'}
 
     def test_query_string_and_fragment_as_params(self):
         result = Http.to_python(dict(
