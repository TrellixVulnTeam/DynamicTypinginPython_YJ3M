commit f6b088efeaedad0bb714937f668e74bc57a4206b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 1 16:45:53 2014 -0300

    Correct optional field behavior in team creation

diff --git a/src/sentry/api/endpoints/team_index.py b/src/sentry/api/endpoints/team_index.py
index 6e409ae845..4e735af992 100644
--- a/src/sentry/api/endpoints/team_index.py
+++ b/src/sentry/api/endpoints/team_index.py
@@ -3,23 +3,32 @@ from rest_framework.response import Response
 
 from sentry.api.base import Endpoint
 from sentry.api.serializers import serialize
-from sentry.models import Team
+from sentry.models import Team, User
 from sentry.permissions import can_create_teams
-from sentry.utils.functional import extract_lazy_object
 
 
-class TeamSerializer(serializers.ModelSerializer):
-    class Meta:
-        model = Team
-        fields = ('name', 'slug')
+class UserField(serializers.WritableField):
+    def to_native(self, obj):
+        return obj.username
 
+    def from_native(self, data):
+        if not data:
+            return None
 
-class TeamAdminSerializer(TeamSerializer):
-    owner = serializers.SlugRelatedField(slug_field='username', required=False)
+        try:
+            return User.objects.get(username__iexact=data)
+        except User.DoesNotExist:
+            raise serializers.ValidationError('Unable to find user')
+
+
+class TeamSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=True)
+    slug = serializers.CharField(max_length=200, required=False)
+    owner = UserField(required=False, read_only=True)
 
-    class Meta:
-        model = Team
-        fields = ('name', 'slug', 'owner')
+
+class TeamAdminSerializer(TeamSerializer):
+    owner = UserField(required=False)
 
 
 class TeamIndexEndpoint(Endpoint):
@@ -31,14 +40,17 @@ class TeamIndexEndpoint(Endpoint):
         if not can_create_teams(request.user):
             return Response(status=403)
 
-        # HACK(dcramer): we want owner to be optional
-        team = Team(owner=extract_lazy_object(request.user))
         if request.user.is_superuser:
-            serializer = TeamAdminSerializer(team, data=request.DATA, partial=True)
+            serializer = TeamAdminSerializer(data=request.DATA)
         else:
-            serializer = TeamSerializer(team, data=request.DATA, partial=True)
+            serializer = TeamSerializer(data=request.DATA)
 
         if serializer.is_valid():
-            team = serializer.save()
+            result = serializer.object
+            team = Team.objects.create(
+                name=result['name'],
+                slug=result.get('slug'),
+                owner=result.get('owner') or request.user,
+            )
             return Response(serialize(team, request.user), status=201)
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/tests/sentry/api/endpoints/test_team_index.py b/tests/sentry/api/endpoints/test_team_index.py
index ff9ce83372..830a488b85 100644
--- a/tests/sentry/api/endpoints/test_team_index.py
+++ b/tests/sentry/api/endpoints/test_team_index.py
@@ -59,6 +59,17 @@ class TeamCreateTest(APITestCase):
         assert member.user == team.owner
         assert member.type == MEMBER_OWNER
 
+    @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=True))
+    def test_without_slug(self):
+        self.login_as(user=self.user)
+
+        resp = self.client.post(self.path, data={
+            'name': 'hello world',
+        })
+        assert resp.status_code == 201, resp.content
+        team = Team.objects.get(id=resp.data['id'])
+        assert team.slug == 'hello-world'
+
     @patch('sentry.api.endpoints.team_index.can_create_teams', Mock(return_value=True))
     def test_superuser_can_set_owner(self):
         self.login_as(user=self.user)
