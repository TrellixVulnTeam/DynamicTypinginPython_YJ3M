commit a5a44f1e2eb3873f67705e82cd310ea1ce23827d
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 17 14:53:49 2015 -0700

    Remove prefix from internal tags for public APIs

diff --git a/src/sentry/api/endpoints/group_tagkey_details.py b/src/sentry/api/endpoints/group_tagkey_details.py
index 664724ece5..828ea613f1 100644
--- a/src/sentry/api/endpoints/group_tagkey_details.py
+++ b/src/sentry/api/endpoints/group_tagkey_details.py
@@ -21,10 +21,16 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
             {method} {path}
 
         """
+        # XXX(dcramer): kill sentry prefix for internal reserved tags
+        if key in ('release', 'user', 'filename', 'function'):
+            lookup_key = 'sentry:{0}'.format(key)
+        else:
+            lookup_key = key
+
         try:
             tag_key = TagKey.objects.get(
                 project=group.project_id,
-                key=key,
+                key=lookup_key,
                 status=TagKeyStatus.VISIBLE,
             )
         except TagKey.DoesNotExist:
@@ -35,8 +41,7 @@ class GroupTagKeyDetailsEndpoint(GroupEndpoint):
         top_values = GroupTagValue.get_top_values(group.id, key, limit=3)
 
         data = {
-            'id': str(tag_key.id),
-            'key': tag_key.key,
+            'key': key,
             'name': tag_key.get_label(),
             'uniqueValues': tag_key.values_seen,
             'totalValues': total_values,
diff --git a/src/sentry/api/endpoints/group_tagkey_values.py b/src/sentry/api/endpoints/group_tagkey_values.py
index c0b5b6436f..90cdded025 100644
--- a/src/sentry/api/endpoints/group_tagkey_values.py
+++ b/src/sentry/api/endpoints/group_tagkey_values.py
@@ -19,10 +19,16 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
             {method} {path}
 
         """
+        # XXX(dcramer): kill sentry prefix for internal reserved tags
+        if key in ('release', 'user', 'filename', 'function'):
+            lookup_key = 'sentry:{0}'.format(key)
+        else:
+            lookup_key = key
+
         try:
             tagkey = TagKey.objects.get(
                 project=group.project_id,
-                key=key,
+                key=lookup_key,
                 status=TagKeyStatus.VISIBLE,
             )
         except TagKey.DoesNotExist:
@@ -30,7 +36,7 @@ class GroupTagKeyValuesEndpoint(GroupEndpoint):
 
         queryset = GroupTagValue.objects.filter(
             group=group,
-            key=key,
+            key=lookup_key,
         )
 
         return self.paginate(
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index 2097e8cd01..5d1b06cf18 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -21,10 +21,14 @@ class GroupTagsEndpoint(GroupEndpoint):
         for tag_key in tag_keys:
             total_values = GroupTagValue.get_value_count(group.id, tag_key.key)
             top_values = GroupTagValue.get_top_values(group.id, tag_key.key, limit=10)
+            if tag_key.key.startswith('sentry:'):
+                key = tag_key.key.split('sentry:', 1)[-1]
+            else:
+                key = tag_key.key
 
             data.append({
                 'id': str(tag_key.id),
-                'key': tag_key.key,
+                'key': key,
                 'name': tag_key.get_label(),
                 'uniqueValues': tag_key.values_seen,
                 'totalValues': total_values,
diff --git a/src/sentry/api/endpoints/project_tagkey_details.py b/src/sentry/api/endpoints/project_tagkey_details.py
index 0289f28ccc..9cd4ab665c 100644
--- a/src/sentry/api/endpoints/project_tagkey_details.py
+++ b/src/sentry/api/endpoints/project_tagkey_details.py
@@ -16,10 +16,15 @@ class ProjectTagKeyDetailsEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
+        if key in ('release', 'user', 'filename', 'function'):
+            lookup_key = 'sentry:{0}'.format(key)
+        else:
+            lookup_key = key
+
         try:
             tagkey = TagKey.objects.get(
                 project=project,
-                key=key,
+                key=lookup_key,
             )
         except TagKey.DoesNotExist:
             raise ResourceDoesNotExist
diff --git a/src/sentry/api/endpoints/project_tagkey_values.py b/src/sentry/api/endpoints/project_tagkey_values.py
index 5b44783a96..430ce671d0 100644
--- a/src/sentry/api/endpoints/project_tagkey_values.py
+++ b/src/sentry/api/endpoints/project_tagkey_values.py
@@ -19,10 +19,15 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
+        if key in ('release', 'user', 'filename', 'function'):
+            lookup_key = 'sentry:{0}'.format(key)
+        else:
+            lookup_key = key
+
         try:
             tagkey = TagKey.objects.get(
                 project=project,
-                key=key,
+                key=lookup_key,
                 status=TagKeyStatus.VISIBLE,
             )
         except TagKey.DoesNotExist:
@@ -30,7 +35,7 @@ class ProjectTagKeyValuesEndpoint(ProjectEndpoint):
 
         queryset = TagValue.objects.filter(
             project=project,
-            key=key,
+            key=tagkey.key,
         )
 
         return self.paginate(
diff --git a/src/sentry/api/serializers/models/grouptagvalue.py b/src/sentry/api/serializers/models/grouptagvalue.py
index a44fe899d7..65d3ffc0b5 100644
--- a/src/sentry/api/serializers/models/grouptagvalue.py
+++ b/src/sentry/api/serializers/models/grouptagvalue.py
@@ -26,12 +26,16 @@ class GroupTagValueSerializer(Serializer):
         return result
 
     def serialize(self, obj, attrs, user):
-        d = {
+        if obj.key.startswith('sentry:'):
+            key = obj.key.split('sentry:', 1)[-1]
+        else:
+            key = obj.key
+
+        return {
             'name': attrs['name'],
-            'key': obj.key,
+            'key': key,
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
             'firstSeen': obj.first_seen,
         }
-        return d
diff --git a/src/sentry/api/serializers/models/tagvalue.py b/src/sentry/api/serializers/models/tagvalue.py
index 11fcb25da7..b071099fe4 100644
--- a/src/sentry/api/serializers/models/tagvalue.py
+++ b/src/sentry/api/serializers/models/tagvalue.py
@@ -7,11 +7,15 @@ from sentry.models import TagValue
 @register(TagValue)
 class TagValueSerializer(Serializer):
     def serialize(self, obj, attrs, user):
-        d = {
-            'key': obj.key,
+        if obj.key.startswith('sentry:'):
+            key = obj.key.split('sentry:', 1)[-1]
+        else:
+            key = obj.key
+
+        return {
+            'key': key,
             'value': obj.value,
             'count': obj.times_seen,
             'lastSeen': obj.last_seen,
             'firstSeen': obj.first_seen,
         }
-        return d
