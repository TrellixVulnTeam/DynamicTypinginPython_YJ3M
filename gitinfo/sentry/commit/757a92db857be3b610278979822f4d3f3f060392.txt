commit 757a92db857be3b610278979822f4d3f3f060392
Author: Max Bittker <maxbittker@gmail.com>
Date:   Thu Mar 29 14:24:19 2018 -0700

    feat(owners): Validate Owner inputs (#7818)
    
    * validate owners

diff --git a/src/sentry/api/endpoints/project_ownership.py b/src/sentry/api/endpoints/project_ownership.py
index 1eefcc3e70..fec2ef8851 100644
--- a/src/sentry/api/endpoints/project_ownership.py
+++ b/src/sentry/api/endpoints/project_ownership.py
@@ -6,7 +6,8 @@ from django.utils import timezone
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import ProjectOwnership
+from sentry.models import ProjectOwnership, resolve_actor, UnknownActor
+
 from sentry.ownership.grammar import parse_rules, dump_schema, ParseError
 
 
@@ -24,7 +25,27 @@ class ProjectOwnershipSerializer(serializers.Serializer):
                 u'Parse error: %r (line %d, column %d)' % (
                     e.expr.name, e.line(), e.column()
                 ))
-        attrs['schema'] = dump_schema(rules)
+
+        schema = dump_schema(rules)
+
+        bad_actors = []
+        for rule in rules:
+            for owner in rule.owners:
+                try:
+                    resolve_actor(owner, self.context['ownership'].project_id)
+                except UnknownActor:
+                    if owner.type == 'user':
+                        bad_actors.append(owner.identifier)
+
+                    if owner.type == 'team':
+                        bad_actors.append(u'#{}'.format(owner.identifier))
+
+        if bad_actors:
+            raise serializers.ValidationError(
+                u'Invalid rule owners: {}'.format(", ".join(bad_actors))
+            )
+
+        attrs['schema'] = schema
         return attrs
 
     def save(self):
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
index cdf630a393..78738e9b69 100644
--- a/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectOwnership/ownerInput.jsx
@@ -52,6 +52,18 @@ class OwnerInput extends React.Component {
     }
   }
 
+  parseError(error) {
+    let text = error && error.raw && error.raw[0];
+    if (!text) {
+      return null;
+    }
+    if (text.startsWith('Invalid rule owners:')) {
+      return text;
+    } else {
+      return <SyntaxOverlay line={text.match(/line (\d*),/)[1] - 1} />;
+    }
+  }
+
   handleUpdateOwnership = () => {
     let {organization, project} = this.props;
     let {text} = this.state;
@@ -79,6 +91,14 @@ class OwnerInput extends React.Component {
           addErrorMessage(
             t("You don't have permission to modify ownership rules for this project")
           );
+        } else if (
+          error.status === 400 &&
+          error.responseJSON.raw &&
+          error.responseJSON.raw[0].startsWith('Invalid rule owners:')
+        ) {
+          addErrorMessage(
+            t('Unable to save ownership rules changes: ' + error.responseJSON.raw[0])
+          );
         } else {
           addErrorMessage(t('Unable to save ownership rules changes'));
         }
@@ -162,11 +182,7 @@ class OwnerInput extends React.Component {
             autoCorrect="off"
             autoCapitalize="off"
           />
-          {error &&
-            error.raw && (
-              <SyntaxOverlay line={error.raw[0].match(/line (\d*),/)[1] - 1} />
-            )}
-          {error && error.raw && error.raw.toString()}
+          {this.parseError(error)}
           <SaveButton>
             <Button
               size="small"
diff --git a/tests/sentry/api/endpoints/test_project_ownership.py b/tests/sentry/api/endpoints/test_project_ownership.py
index b831743a74..90d1adff82 100644
--- a/tests/sentry/api/endpoints/test_project_ownership.py
+++ b/tests/sentry/api/endpoints/test_project_ownership.py
@@ -8,6 +8,18 @@ from sentry.testutils import APITestCase
 class ProjectOwnershipEndpointTestCase(APITestCase):
     def setUp(self):
         self.login_as(user=self.user)
+
+        self.team = self.create_team(
+            organization=self.organization,
+            slug='tiger-team',
+            members=[self.user])
+
+        self.project = self.project = self.create_project(
+            organization=self.organization,
+            teams=[self.team],
+            slug='bengal',
+        )
+
         self.path = reverse(
             'sentry-api-0-project-ownership',
             kwargs={
@@ -29,11 +41,11 @@ class ProjectOwnershipEndpointTestCase(APITestCase):
 
     def test_update(self):
         resp = self.client.put(self.path, {
-            'raw': '*.js foo@example.com #foo-team',
+            'raw': '*.js admin@localhost #tiger-team',
         })
         assert resp.status_code == 200
         assert resp.data['fallthrough'] is True
-        assert resp.data['raw'] == '*.js foo@example.com #foo-team'
+        assert resp.data['raw'] == '*.js admin@localhost #tiger-team'
         assert resp.data['dateCreated'] is not None
         assert resp.data['lastUpdated'] is not None
 
@@ -42,14 +54,14 @@ class ProjectOwnershipEndpointTestCase(APITestCase):
         })
         assert resp.status_code == 200
         assert resp.data['fallthrough'] is False
-        assert resp.data['raw'] == '*.js foo@example.com #foo-team'
+        assert resp.data['raw'] == '*.js admin@localhost #tiger-team'
         assert resp.data['dateCreated'] is not None
         assert resp.data['lastUpdated'] is not None
 
         resp = self.client.get(self.path)
         assert resp.status_code == 200
         assert resp.data['fallthrough'] is False
-        assert resp.data['raw'] == '*.js foo@example.com #foo-team'
+        assert resp.data['raw'] == '*.js admin@localhost #tiger-team'
         assert resp.data['dateCreated'] is not None
         assert resp.data['lastUpdated'] is not None
 
@@ -57,3 +69,24 @@ class ProjectOwnershipEndpointTestCase(APITestCase):
             'raw': '...',
         })
         assert resp.status_code == 400
+
+    def test_invalid_email(self):
+        resp = self.client.put(self.path, {
+            'raw': '*.js idont@exist.com #tiger-team',
+        })
+        assert resp.status_code == 400
+        assert resp.content == '{"raw": ["Invalid rule owners: idont@exist.com"]}'
+
+    def test_invalid_team(self):
+        resp = self.client.put(self.path, {
+            'raw': '*.js admin@localhost #faketeam',
+        })
+        assert resp.status_code == 400
+        assert resp.content == '{"raw": ["Invalid rule owners: #faketeam"]}'
+
+    def test_invalid_mixed(self):
+        resp = self.client.put(self.path, {
+            'raw': '*.js idont@exist.com admin@localhost #faketeam #tiger-team',
+        })
+        assert resp.status_code == 400
+        assert resp.content == '{"raw": ["Invalid rule owners: idont@exist.com, #faketeam"]}'
