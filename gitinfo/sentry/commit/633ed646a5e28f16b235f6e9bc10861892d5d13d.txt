commit 633ed646a5e28f16b235f6e9bc10861892d5d13d
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 10 18:45:49 2015 -0700

    Wire up UI for editing/editing Notes

diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 4f51c3e750..1b8e64bc6e 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -19,6 +19,10 @@ var LinkWithConfirmation = React.createClass({
   },
 
   onConfirm() {
+    this.setState({
+      isModalOpen: false
+    });
+
     this.props.onConfirm();
   },
 
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 390080cdc3..83d3094876 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -96,18 +96,64 @@ var GroupStore = Reflux.createStore({
     return this.statuses[id][status] || false;
   },
 
-  addActivity(id, data) {
+  indexOfActivity(group_id, id) {
+    var group = this.get(group_id);
+    if (!group) return -1;
+
+    for (var i = 0; i < group.activity.length; i++) {
+      if (group.activity[i].id === id) {
+        return i;
+      }
+    }
+    return -1;
+  },
+
+  addActivity(id, data, index=-1) {
     var group = this.get(id);
-    if (!group) {
-      return;
+    if (!group) return;
+
+    // insert into beginning by default
+    if (index === -1) {
+      group.activity.unshift(data);
+    } else {
+      group.activity.splice(index, 0, data);
     }
-    group.activity.unshift(data);
     if (data.type === 'note')
-      group.numComments += 1;
+      group.numComments++;
 
     this.trigger(new Set([id]));
   },
 
+  updateActivity(group_id, id, data) {
+    var group = this.get(group_id);
+    if (!group) return;
+
+    var index = this.indexOfActivity(group_id, id);
+    if (index === -1) return;
+
+    // Here, we want to merge the new `data` being passed in
+    // into the existing `data` object. This effectively
+    // allows passing in an object of only changes.
+    group.activity[index].data = Object.assign(group.activity[index].data, data);
+    this.trigger(new Set([group.id]));
+  },
+
+  removeActivity(group_id, id) {
+    var group = this.get(group_id);
+    if (!group) return -1;
+
+    var index = this.indexOfActivity(group.id, id);
+    if (index === -1) return -1;
+
+    var activity = group.activity.splice(index, 1);
+
+    if (activity[0].type === 'note')
+      group.numComments--;
+
+    this.trigger(new Set([group.id]));
+    return index;
+  },
+
   get(id) {
     var pendingForId = [];
     this.pendingChanges.forEach(change => {
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index b82315904c..1ec96bd7db 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -1,10 +1,10 @@
-import marked from "marked";
 import React from "react";
 import Gravatar from "../../components/gravatar";
 import GroupState from "../../mixins/groupState";
 import MemberListStore from "../../stores/memberListStore";
 import TimeSince from "../../components/timeSince";
 
+import NoteContainer from "./noteContainer";
 import NoteInput from "./noteInput";
 
 var formatActivity = function(item) {
@@ -61,31 +61,24 @@ var GroupActivity = React.createClass({
         <Gravatar email={item.user.email} size={64} className="avatar" /> :
         <div className="avatar sentry"><span className="icon-sentry-logo"></span></div>);
 
-      var authorName = (item.user ?
-        item.user.name :
-        'Sentry');
+      var author = {
+        name: item.user ? item.user.name : 'Sentry',
+        avatar: avatar,
+      };
 
       var label = formatActivity(item);
 
       if (item.type === 'note') {
-        var noteBody = marked(item.data.text);
         return (
-          <li className="activity-note" key={itemIdx}>
-            {avatar}
-            <div className="activity-bubble">
-              <TimeSince date={item.dateCreated} />
-              <div className="activity-author">{authorName}</div>
-              <div dangerouslySetInnerHTML={{__html: noteBody}} />
-            </div>
-          </li>
+          <NoteContainer group={group} item={item} key={itemIdx} author={author} />
         );
       } else {
         return (
           <li className="activity-item" key={itemIdx}>
-            {avatar}
+            {author.avatar}
             <TimeSince date={item.dateCreated} />
             <div className="activity-item-content">
-              <span className="activity-author">{authorName}</span> {label}
+              <span className="activity-author">{author.name}</span> {label}
             </div>
           </li>
         );
diff --git a/src/sentry/static/sentry/app/views/groupActivity/note.jsx b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
new file mode 100644
index 0000000000..ed7ba1a84a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
@@ -0,0 +1,37 @@
+import marked from "marked";
+import React from "react";
+import TimeSince from "../../components/timeSince";
+import ConfigStore from "../../stores/configStore";
+import LinkWithConfirmation from "../../components/linkWithConfirmation";
+
+var Note = React.createClass({
+  canEdit() {
+    var user = ConfigStore.get('user');
+    return user.isSuperuser || user.id === this.props.item.user.id;
+  },
+
+  render() {
+    var {item, author, onEdit, onDelete} = this.props;
+
+    var noteBody = marked(item.data.text);
+    return (
+      <div>
+        <TimeSince date={item.dateCreated} />
+        <div className="activity-author">{author.name}
+        {this.canEdit() &&
+          <span className="editor-tools">
+            <a onClick={onEdit}>Edit</a>
+            <LinkWithConfirmation
+              className="danger"
+              message="Are you sure you wish to delete this comment?"
+              onConfirm={onDelete}>Remove</LinkWithConfirmation>
+          </span>
+        }
+        </div>
+        <div dangerouslySetInnerHTML={{__html: noteBody}} />
+      </div>
+    );
+  }
+});
+
+export default Note;
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
new file mode 100644
index 0000000000..b50b8b9f10
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
@@ -0,0 +1,74 @@
+import React from "react";
+import api from "../../api";
+import IndicatorStore from "../../stores/indicatorStore";
+import GroupStore from "../../stores/groupStore";
+
+import Note from "./note";
+import NoteInput from "./noteInput";
+
+var NoteContainer = React.createClass({
+  getInitialState() {
+    return {
+      editing: false
+    };
+  },
+
+  onEdit() {
+    this.setState({editing: true});
+  },
+
+  onFinish() {
+    this.setState({editing: false});
+  },
+
+  onDelete() {
+    var {group, item} = this.props;
+
+    var loadingIndicator = IndicatorStore.add('Removing comment..');
+
+    // Optimistically remove from UI
+    var index = GroupStore.removeActivity(group.id, item.id);
+    if (index === -1) {
+        // I dunno, the id wasn't found in the GroupStore
+        return;
+    }
+
+    api.request('/groups/' + group.id + '/notes/' + item.id + '/' , {
+      method: 'DELETE',
+      error: (error) => {
+        // TODO(mattrobenolt): Show an actual error that this failed,
+        // but just bring it back in place for now
+        GroupStore.addActivity(group.id, item, index);
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  render() {
+    var {group, item, author} = this.props;
+
+    return (
+      <li className="activity-note">
+        {author.avatar}
+        <div className="activity-bubble">
+        {this.state.editing ?
+          <NoteInput
+            group={group}
+            item={item}
+            onFinish={this.onFinish} />
+        :
+          <Note
+            item={item}
+            author={author}
+            onEdit={this.onEdit}
+            onDelete={this.onDelete} />
+        }
+        </div>
+      </li>
+    );
+  }
+});
+
+export default NoteContainer;
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
index cecc7b50ec..0811260ed6 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
@@ -9,13 +9,17 @@ var NoteInput = React.createClass({
   mixins: [PureRenderMixin],
 
   getInitialState() {
+    var {item} = this.props;
+    var updating = !!item;
+
     return {
       loading: false,
       error: false,
       errorJSON: null,
       expanded: false,
       preview: false,
-      value: ''
+      updating: updating,
+      value: updating ? item.data.text : ''
     };
   },
 
@@ -39,9 +43,19 @@ var NoteInput = React.createClass({
       errorJSON: null,
     });
 
+    if (this.state.updating) {
+      this.update();
+    } else {
+      this.create();
+    }
+  },
+
+  create() {
+    var {group} = this.props;
+
     var loadingIndicator = IndicatorStore.add('Posting comment..');
 
-    api.request('/groups/' + this.props.group.id + '/notes/', {
+    api.request('/groups/' + group.id + '/notes/', {
       method: 'POST',
       data: {
         text: this.state.value
@@ -61,7 +75,41 @@ var NoteInput = React.createClass({
           expanded: false,
           loading: false
         });
-        GroupStore.addActivity(this.props.group.id, data);
+        GroupStore.addActivity(group.id, data);
+        this.finish();
+      },
+      complete: () => {
+        IndicatorStore.remove(loadingIndicator);
+      }
+    });
+  },
+
+  update() {
+    var {group, item} = this.props;
+
+    var loadingIndicator = IndicatorStore.add('Updating comment..');
+
+    api.request('/groups/' + group.id + '/notes/' + item.id + '/', {
+      method: 'PUT',
+      data: {
+        text: this.state.value
+      },
+      error: (error) => {
+        this.setState({
+          loading: false,
+          preview: false,
+          error: true,
+          errorJSON: JSON.parse(error.responseJSON)
+        });
+      },
+      success: (data) => {
+        this.setState({
+          preview: false,
+          expanded: false,
+          loading: false
+        });
+        GroupStore.updateActivity(group.id, item.id, {text: this.state.value});
+        this.finish();
       },
       complete: () => {
         IndicatorStore.remove(loadingIndicator);
@@ -78,8 +126,28 @@ var NoteInput = React.createClass({
     e.key === 'Enter' && e.metaKey && this.submitForm();
   },
 
-  expand() {
+  onCancel(e) {
+    e.preventDefault();
+    this.finish();
+  },
+
+  finish() {
+    this.props.onFinish && this.props.onFinish();
+  },
+
+  expand(e) {
     this.setState({expanded: true});
+
+    // HACK: Move cursor to end of text after autoFocus
+    // we do this my making sure this is only done on the first
+    // onFocus event
+    if (!this.state._hasFocused) {
+      this.setState({_hasFocused: true});
+      var value = e.target.value;
+      e.target.value = '';
+      e.target.value = value;
+    }
+
   },
 
   maybeCollapse() {
@@ -89,7 +157,7 @@ var NoteInput = React.createClass({
   },
 
   render() {
-    var {error, errorJSON, loading, preview, value} = this.state;
+    var {error, errorJSON, loading, preview, updating, value} = this.state;
     var classNames = 'activity-field';
     if (error) {
       classNames += ' error';
@@ -98,6 +166,8 @@ var NoteInput = React.createClass({
       classNames += ' loading';
     }
 
+    var btnText = updating ? 'Update' : 'Leave Comment';
+
     return (
       <form className={classNames} onSubmit={this.onSubmit}>
         <div className="activity-notes">
@@ -118,6 +188,7 @@ var NoteInput = React.createClass({
                       onKeyDown={this.onKeyDown}
                       onFocus={this.expand} onBlur={this.maybeCollapse}
                       required={true}
+                      autoFocus={true}
                       value={value} />
           }
           <div className="activity-actions">
@@ -125,7 +196,9 @@ var NoteInput = React.createClass({
               <small className="error">{errorJSON.detail}</small>
             }
             <button className="btn btn-default" type="submit"
-                    disabled={loading}>Leave comment</button>
+                    disabled={loading}>{btnText}</button>
+            {updating &&
+              <button className="btn btn-danger" onClick={this.onCancel}>Cancel</button>}
           </div>
         </div>
       </form>
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 71abce2ba8..ff781e2cbc 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -425,6 +425,12 @@
       position: relative;
       margin-bottom: 15px;
 
+      &:hover {
+        .editor-tools {
+          display: inline !important;
+        }
+      }
+
       .avatar {
         position: absolute;
         left: 0;
@@ -478,6 +484,19 @@
             font-weight: 300;
             margin-left: 10px;
           }
+
+          .editor-tools {
+            display: none;
+
+            a {
+              padding: 0 7px;
+              border-left: 1px solid lighten(@gray, 40);
+              color: lighten(@gray, 30);
+              &:hover { color: #666; }
+              &:hover.danger { color: #d21c25; }
+              &:first-child { margin-left: 7px; }
+            }
+          }
         }
 
         time {
