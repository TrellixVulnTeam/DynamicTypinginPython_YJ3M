commit 076b23210ec0597a99961fc6aa6f3edf05ab8500
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 21 12:43:45 2016 -0700

    Improve acceptance tests
    
    - Abstract login helper to re-use existing fixtures
    - Add basic rendering of stream states
    - Add local screenshot capture
    - Remove captcha on auth tests
    
    /cc @getsentry/ui @getsentry/infrastructure

diff --git a/.gitignore b/.gitignore
index 56c6719cdc..fdd398f88d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -16,6 +16,7 @@ sentry-package.json
 /build
 /dist
 /env
+/tmp
 /node_modules/
 /docs/_build
 example/db.sqlite
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index a85a841e2d..06c807fee2 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -28,8 +28,12 @@ from django.core.urlresolvers import reverse
 from django.http import HttpRequest
 from django.test import TestCase, TransactionTestCase, LiveServerTestCase
 from django.utils.importlib import import_module
+from django.utils.text import slugify
 from exam import before, fixture, Exam
 from rest_framework.test import APITestCase as BaseAPITestCase
+from selenium.webdriver.support.ui import WebDriverWait
+from selenium.webdriver.support import expected_conditions
+from urlparse import urlparse
 
 from sentry import auth
 from sentry.auth.providers.dummy import DummyProvider
@@ -442,17 +446,94 @@ class CliTestCase(TestCase):
         return self.runner.invoke(self.command, args, obj={})
 
 
-@pytest.mark.usefixtures('browser_class', 'percy_class')
+@pytest.mark.usefixtures('browser_class', 'percy_class', 'screenshots_path_class')
 class AcceptanceTestCase(LiveServerTestCase):
     # Use class setup/teardown to hold Selenium and Percy state across all acceptance tests.
     # For Selenium, this is done for performance to re-use the same browser across tests.
     # For Percy, this is done to call initialize and then finalize at the very end after all tests.
+    def save_session(self):
+        # XXX(dcramer): "hit a url before trying to set cookies"
+        if not hasattr(self.browser, '_has_initialized_cookie_store'):
+            self.browser.get(self.route('/'))
+            self.browser._has_initialized_cookie_store = True
+
+        self.session.save()
+
+        # TODO(dcramer): this should be escaped, but idgaf
+        cookie_data = {
+            'name': settings.SESSION_COOKIE_NAME,
+            'path': '/',
+            'domain': urlparse(self.live_server_url).hostname,
+            'expires': 'Tue, 20 Jun 2025 19:07:44 GMT',
+            'value': self.session.session_key,
+        }
+
+        # XXX(dcramer): PhantomJS does not let us add cookies with the native
+        # selenium API because....
+        # http://stackoverflow.com/questions/37103621/adding-cookies-working-with-firefox-webdriver-but-not-in-phantomjs
+        self.browser.execute_script("document.cookie = '{name}={value}; path={path}; domain={domain}; expires={expires}';\n".format(
+            **cookie_data
+        ))
+
+    def route(self, path, *args, **kwargs):
+        """
+        Return the absolute URI for a given route in Sentry.
+        """
+        return '{}/{}'.format(self.live_server_url, path.strip('/').format(
+            *args, **kwargs
+        ))
+
+    def wait_until(self, selector, timeout=10):
+        """
+        Waits until ``selector`` is found in the browser, or until ``timeout``
+        is hit, whichever happens first.
+        """
+        from selenium.webdriver.common.by import By
 
-    # Login helper.
-    def login(self, username, password, browser=None):
-        if browser is None:
-            browser = self.browser
-        browser.get(self.live_server_url)
-        browser.find_element_by_id('id_username').send_keys(username)
-        browser.find_element_by_id('id_password').send_keys(password)
-        browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
+        try:
+            WebDriverWait(self.browser, timeout).until(
+                expected_conditions.presence_of_element_located(
+                    (By.CSS_SELECTOR, selector)
+                )
+            )
+        except Exception:
+            print(self.browser.current_url)
+            self.snapshot('wait failed'.format(selector))
+            raise
+
+        return self
+
+    def wait_until_not(self, selector, timeout=10):
+        """
+        Waits until ``selector`` is NOT found in the browser, or until
+        ``timeout`` is hit, whichever happens first.
+        """
+        from selenium.webdriver.common.by import By
+
+        try:
+            WebDriverWait(self.browser, timeout).until_not(
+                expected_conditions.presence_of_element_located(
+                    (By.CSS_SELECTOR, selector)
+                )
+            )
+        except Exception:
+            print(self.browser.current_url)
+            self.snapshot('wait failed'.format(selector))
+            raise
+
+        return self
+
+    def snapshot(self, name):
+        """
+        Capture a screenshot of the current state of the page. Screenshots
+        are captured both locally (in ``cls.screenshots_path``) as well as
+        with Percy (when enabled).
+        """
+        path = os.path.join(
+            self.screenshots_path,
+            slugify(unicode(name)) + '.png',
+        )
+        print('Saving snapshot {}'.format(path))
+        self.browser.save_screenshot(path)
+        self.percy.snapshot(name=name)
+        return self
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 4160b98dfc..e27d5cb4e2 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -9,6 +9,7 @@ from __future__ import absolute_import, print_function, unicode_literals
 
 import copy
 import json
+import petname
 import six
 import warnings
 
@@ -149,12 +150,13 @@ class Fixtures(object):
         )
 
     def create_organization(self, **kwargs):
+        if not kwargs.get('name'):
+            kwargs['name'] = petname.Generate(2, ' ').title()
+
         owner = kwargs.pop('owner', None)
         if not owner:
             owner = self.user
 
-        kwargs.setdefault('name', uuid4().hex)
-
         org = Organization.objects.create(**kwargs)
         self.create_member(
             organization=org,
@@ -177,7 +179,8 @@ class Fixtures(object):
         return om
 
     def create_team(self, **kwargs):
-        kwargs.setdefault('name', uuid4().hex)
+        if not kwargs.get('name'):
+            kwargs['name'] = petname.Generate(2, ' ').title()
         if not kwargs.get('slug'):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('organization'):
@@ -186,7 +189,8 @@ class Fixtures(object):
         return Team.objects.create(**kwargs)
 
     def create_project(self, **kwargs):
-        kwargs.setdefault('name', uuid4().hex)
+        if not kwargs.get('name'):
+            kwargs['name'] = petname.Generate(2, ' ').title()
         if not kwargs.get('slug'):
             kwargs['slug'] = slugify(six.text_type(kwargs['name']))
         if not kwargs.get('team'):
diff --git a/src/sentry/utils/pytest.py b/src/sentry/utils/pytest.py
index e0be13b070..f7d13787c1 100644
--- a/src/sentry/utils/pytest.py
+++ b/src/sentry/utils/pytest.py
@@ -6,6 +6,7 @@ import pytest
 import signal
 import urllib
 
+from datetime import datetime
 from django.conf import settings
 from selenium import webdriver
 
@@ -156,6 +157,8 @@ def pytest_runtest_teardown(item):
     discard_all()
 
 
+# TODO(dcramer): ideally we could bundle up more of the browser logic here
+# rather than splitting it between the fixtures and AcceptanceTestCase
 @pytest.fixture(scope='session')
 def percy(request, browser):
     import percy
@@ -198,6 +201,18 @@ def browser(request):
     return browser
 
 
+@pytest.fixture(scope='class')
+def screenshots_path_class(request, browser):
+    date = datetime.utcnow()
+    # AcceptanceTestCase.snapshot saves local screenshots here
+    path = os.path.normpath(os.path.join(
+        os.path.dirname(__file__), os.pardir, os.pardir, os.pardir, 'tmp', 'selenium-screenshots', date.strftime('%s'))
+    )
+    print('Screenshots will be stored in {}'.format(path))
+    os.makedirs(path)
+    request.cls.screenshots_path = path
+
+
 @pytest.fixture(scope='class')
 def browser_class(request, browser):
     request.cls.browser = browser
@@ -209,7 +224,9 @@ def percy_class(request, percy):
 
 
 @pytest.fixture(scope='function')
-def clear_cookies(request):
-    # Clear cookies before every test. This helps avoid problems with login captchas.
-    if hasattr(request, 'browser'):
-        browser.delete_all_cookies()
+def reset_browser_session(request):
+    if not hasattr(request, 'browser'):
+        return
+
+    browser.delete_all_cookies()
+    browser.get('about:blank')
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 2bd56254be..fff1ae2423 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -24,35 +24,6 @@ from sentry.utils.auth import find_users
 from sentry.web.forms.fields import ReadOnlyTextField
 
 
-# at runtime we decide whether we should support recaptcha
-# TODO(dcramer): there **must** be a better way to do this
-if settings.RECAPTCHA_PUBLIC_KEY:
-    class CaptchaForm(forms.Form):
-        def __init__(self, *args, **kwargs):
-            captcha = kwargs.pop('captcha', True)
-            super(CaptchaForm, self).__init__(*args, **kwargs)
-            if captcha:
-                self.fields['captcha'] = ReCaptchaField()
-
-    class CaptchaModelForm(forms.ModelForm):
-        def __init__(self, *args, **kwargs):
-            captcha = kwargs.pop('captcha', True)
-            super(CaptchaModelForm, self).__init__(*args, **kwargs)
-            if captcha:
-                self.fields['captcha'] = ReCaptchaField()
-
-else:
-    class CaptchaForm(forms.Form):
-        def __init__(self, *args, **kwargs):
-            kwargs.pop('captcha', None)
-            super(CaptchaForm, self).__init__(*args, **kwargs)
-
-    class CaptchaModelForm(forms.ModelForm):
-        def __init__(self, *args, **kwargs):
-            kwargs.pop('captcha', None)
-            super(CaptchaModelForm, self).__init__(*args, **kwargs)
-
-
 def _get_timezone_choices():
     results = []
     for tz in pytz.common_timezones:
@@ -68,6 +39,30 @@ def _get_timezone_choices():
 TIMEZONE_CHOICES = _get_timezone_choices()
 
 
+class CaptchaForm(forms.Form):
+    def __init__(self, *args, **kwargs):
+        has_captcha = bool(settings.RECAPTCHA_PUBLIC_KEY)
+        if has_captcha:
+            captcha = kwargs.pop('captcha', True)
+        else:
+            captcha = kwargs.pop('captcha', None)
+        super(CaptchaForm, self).__init__(*args, **kwargs)
+        if has_captcha and captcha:
+            self.fields['captcha'] = ReCaptchaField()
+
+
+class CaptchaModelForm(forms.ModelForm):
+    def __init__(self, *args, **kwargs):
+        has_captcha = bool(settings.RECAPTCHA_PUBLIC_KEY)
+        if has_captcha:
+            captcha = kwargs.pop('captcha', True)
+        else:
+            captcha = kwargs.pop('captcha', None)
+        super(CaptchaModelForm, self).__init__(*args, **kwargs)
+        if has_captcha and captcha:
+            self.fields['captcha'] = ReCaptchaField()
+
+
 class AuthenticationForm(CaptchaForm):
     username = forms.CharField(
         label=_('Account'), max_length=128, widget=forms.TextInput(
diff --git a/tests/acceptance/test_auth.py b/tests/acceptance/test_auth.py
index ad7ede1ecc..72a9899a8b 100644
--- a/tests/acceptance/test_auth.py
+++ b/tests/acceptance/test_auth.py
@@ -4,23 +4,32 @@ from sentry.testutils import AcceptanceTestCase
 
 
 class AuthTest(AcceptanceTestCase):
+    def enter_auth(self, username, password):
+        # disable captcha as it makes these tests flakey (and requires waiting
+        # on external resources)
+        with self.settings(RECAPTCHA_PUBLIC_KEY=None):
+            self.browser.get(self.route('/auth/login/'))
+            self.browser.find_element_by_id('id_username').send_keys(username)
+            self.browser.find_element_by_id('id_password').send_keys(password)
+            self.browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
+
     def test_auth_page(self):
         self.browser.get(self.live_server_url)
-        self.percy.snapshot(name='login')
+        self.snapshot(name='login')
 
     def test_auth_failures(self):
-        self.login('', '')
-        self.percy.snapshot(name='login fields required')
+        self.enter_auth('', '')
+        self.snapshot(name='login fields required')
 
-        self.login('bad-username', 'bad-username')
-        self.percy.snapshot(name='login fields invalid')
+        self.enter_auth('bad-username', 'bad-username')
+        self.snapshot(name='login fields invalid')
 
-    def test_new_organization(self):
+    def test_auth_success(self):
         email = 'dummy@example.com'
         password = 'dummy'
         user = self.create_user(email=email)
         user.set_password(password)
         user.save()
 
-        self.login(email, password)
-        self.percy.snapshot()
+        self.enter_auth(email, password)
+        self.snapshot(name='login success')
diff --git a/tests/acceptance/test_project_issues.py b/tests/acceptance/test_project_issues.py
new file mode 100644
index 0000000000..ec59f915e9
--- /dev/null
+++ b/tests/acceptance/test_project_issues.py
@@ -0,0 +1,66 @@
+from __future__ import absolute_import
+
+from django.utils import timezone
+
+from sentry.models import GroupStatus
+from sentry.testutils import AcceptanceTestCase
+
+
+class ProjectIssuesTest(AcceptanceTestCase):
+    # TODO(dcramer): abstract fixtures into a basic set that is present for
+    # all acceptance tests
+    def test_not_setup(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            organization=org, team=team, first_event=None)
+
+        self.login_as(user)
+
+        # TODO(dcramer): we should add basic assertions around "i wanted this
+        # URL but was sent somewhere else"
+        self.browser.get(self.route(
+            '/{}/{}/', org.slug, project.slug
+        ))
+        self.wait_until('.awaiting-events')
+        self.snapshot('project issues not configured')
+
+    def test_with_issues(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            organization=org, team=team, first_event=timezone.now())
+        self.create_group(
+            project=project,
+            message='Foo bar',
+            status=GroupStatus.UNRESOLVED,
+        )
+
+        self.login_as(user)
+
+        # TODO(dcramer): we should add basic assertions around "i wanted this
+        # URL but was sent somewhere else"
+        self.browser.get(self.route(
+            '/{}/{}/', org.slug, project.slug
+        ))
+        self.wait_until('.group-list')
+        self.snapshot('project issues with issues')
+
+    def test_with_no_issues(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            organization=org, team=team, first_event=timezone.now())
+
+        self.login_as(user)
+
+        # TODO(dcramer): we should add basic assertions around "i wanted this
+        # URL but was sent somewhere else"
+        self.browser.get(self.route(
+            '/{}/{}/', org.slug, project.slug
+        ))
+        self.wait_until('.empty-stream')
+        self.snapshot('project issues without issues')
