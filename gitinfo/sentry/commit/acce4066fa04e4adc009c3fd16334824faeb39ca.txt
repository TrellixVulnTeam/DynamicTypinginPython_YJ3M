commit acce4066fa04e4adc009c3fd16334824faeb39ca
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Aug 21 15:03:09 2019 -0700

    feat(ui): Incident rules chart period should depend on time wiâ€¦ (#14444)
    
    The time window -> period mapping may need just adjustments.
    
    Fixes SEN-937

diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
index 734a3e5c15..bb95cde4ba 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/chart.tsx
@@ -1,4 +1,4 @@
-import {ECharts} from 'echarts';
+import {ECharts, EChartOption} from 'echarts';
 import {debounce, maxBy} from 'lodash';
 import React from 'react';
 import styled from 'react-emotion';
@@ -11,6 +11,7 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 type Props = {
+  xAxis: EChartOption.XAxis;
   data: Series[];
   alertThreshold: number | null;
   resolveThreshold: number | null;
@@ -225,6 +226,8 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
   };
 
   render() {
+    const {data, xAxis} = this.props;
+
     const alertThresholdPosition =
       this.chartRef &&
       this.chartRef.convertToPixel({yAxisIndex: 0}, `${this.props.alertThreshold}`);
@@ -238,6 +241,7 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
           isGroupedByDate
           forwardedRef={this.handleRef}
           grid={CHART_GRID}
+          xAxis={xAxis}
           yAxis={{
             max: this.state.yAxisMax,
           }}
@@ -255,7 +259,7 @@ export default class IncidentRulesChart extends React.Component<Props, State> {
               ),
             ],
           })}
-          series={this.props.data}
+          series={data}
         />
       </ChartPanel>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
index e24ccb71f6..60522be919 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/ruleForm.tsx
@@ -3,9 +3,10 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {EventsStatsData, Organization, Project} from 'app/types';
+import {Config, EventsStatsData, Organization, Project} from 'app/types';
 import {PanelAlert} from 'app/components/panels';
 import {addErrorMessage} from 'app/actionCreators/indicator';
+import {getFormattedDate} from 'app/utils/dates';
 import {t} from 'app/locale';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import Form from 'app/views/settings/components/forms/form';
@@ -13,6 +14,7 @@ import JsonForm from 'app/views/settings/components/forms/jsonForm';
 import LoadingMask from 'app/components/loadingMask';
 import Placeholder from 'app/components/placeholder';
 import withApi from 'app/utils/withApi';
+import withConfig from 'app/utils/withConfig';
 import withOrganization from 'app/utils/withOrganization';
 import withProject from 'app/utils/withProject';
 
@@ -26,6 +28,7 @@ import IncidentRulesChart from './chart';
 
 type Props = {
   api: any;
+  config: Config;
   data: EventsStatsData;
   organization: Organization;
   project: Project;
@@ -46,6 +49,44 @@ type AlertRuleThresholdKey = {
   [AlertRuleThreshold.RESOLUTION]: 'resolveThreshold';
 };
 
+enum TimeWindow {
+  ONE_MINUTE = 60,
+  FIVE_MINUTES = 300,
+  TEN_MINUTES = 600,
+  FIFTEEN_MINUTES = 900,
+  THIRTY_MINUTES = 1800,
+  ONE_HOUR = 3600,
+  TWO_HOURS = 7200,
+  FOUR_HOURS = 14400,
+  ONE_DAY = 86400,
+}
+
+type TimeWindowMapType = {[key in TimeWindow]: string};
+
+const TIME_WINDOW_MAP: TimeWindowMapType = {
+  [TimeWindow.ONE_MINUTE]: t('1 minute'),
+  [TimeWindow.FIVE_MINUTES]: t('5 minutes'),
+  [TimeWindow.TEN_MINUTES]: t('10 minutes'),
+  [TimeWindow.FIFTEEN_MINUTES]: t('15 minutes'),
+  [TimeWindow.THIRTY_MINUTES]: t('30 minutes'),
+  [TimeWindow.ONE_HOUR]: t('1 hour'),
+  [TimeWindow.TWO_HOURS]: t('2 hours'),
+  [TimeWindow.FOUR_HOURS]: t('4 hours'),
+  [TimeWindow.ONE_DAY]: t('24 hours'),
+};
+
+const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
+  [TimeWindow.ONE_MINUTE]: '12h',
+  [TimeWindow.FIVE_MINUTES]: '12h',
+  [TimeWindow.TEN_MINUTES]: '1d',
+  [TimeWindow.FIFTEEN_MINUTES]: '3d',
+  [TimeWindow.THIRTY_MINUTES]: '3d',
+  [TimeWindow.ONE_HOUR]: '7d',
+  [TimeWindow.TWO_HOURS]: '7d',
+  [TimeWindow.FOUR_HOURS]: '7d',
+  [TimeWindow.ONE_DAY]: '14d',
+};
+
 const DEFAULT_TIME_WINDOW = 60;
 const DEFAULT_METRIC = [AlertRuleAggregations.TOTAL];
 
@@ -79,6 +120,15 @@ class RuleForm extends React.Component<Props, State> {
   ): AlertRuleThresholdKey[AlertRuleThreshold] =>
     type === AlertRuleThreshold.RESOLUTION ? 'resolveThreshold' : 'alertThreshold';
 
+  /**
+   * Gets a reasonable period given a timewindow (in seconds)
+   *
+   * @param timeWindow The time window in seconds
+   * @return period The period string to use (e.g. 14d)
+   */
+  getPeriodForTimeWindow = (timeWindow: TimeWindow): string =>
+    TIME_WINDOW_TO_PERIOD[timeWindow];
+
   /**
    * Checks to see if threshold is valid given target value, and state of
    * inverted threshold as well as the *other* threshold
@@ -168,7 +218,7 @@ class RuleForm extends React.Component<Props, State> {
     this.updateThreshold(AlertRuleThreshold.RESOLUTION, value);
   };
 
-  handleTimeWindowChange = (timeWindow: number) => {
+  handleTimeWindowChange = (timeWindow: TimeWindow) => {
     this.setState({timeWindow});
   };
 
@@ -198,7 +248,7 @@ class RuleForm extends React.Component<Props, State> {
   };
 
   render() {
-    const {api, organization, project} = this.props;
+    const {api, config, organization, project} = this.props;
     const {
       aggregations,
       alertThreshold,
@@ -214,6 +264,7 @@ class RuleForm extends React.Component<Props, State> {
           organization={organization}
           project={[parseInt(project.id, 10)]}
           interval={`${timeWindow}s`}
+          period={this.getPeriodForTimeWindow(timeWindow)}
           yAxis={
             aggregations[0] === AlertRuleAggregations.TOTAL ? 'event_count' : 'user_count'
           }
@@ -226,6 +277,20 @@ class RuleForm extends React.Component<Props, State> {
               <React.Fragment>
                 <TransparentLoadingMask visible={reloading} />
                 <IncidentRulesChart
+                  xAxis={{
+                    axisLabel: {
+                      formatter: (value, index) => {
+                        const firstItem = index === 0;
+                        const format =
+                          timeWindow <= TimeWindow.FIVE_MINUTES && !firstItem
+                            ? 'LT'
+                            : 'MMM Do';
+                        return getFormattedDate(value, format, {
+                          local: config.user.options.timezone !== 'UTC',
+                        });
+                      },
+                    },
+                  }}
                   onChangeIncidentThreshold={this.handleChangeIncidentThreshold}
                   alertThreshold={alertThreshold}
                   onChangeResolutionThreshold={this.handleChangeResolutionThreshold}
@@ -271,17 +336,7 @@ class RuleForm extends React.Component<Props, State> {
                   label: t('Time Window'),
                   help: t('The time window to use when evaluating the Metric'),
                   onChange: this.handleTimeWindowChange,
-                  choices: [
-                    [60, t('1 minute')],
-                    [300, t('5 minutes')],
-                    [600, t('10 minutes')],
-                    [900, t('15 minutes')],
-                    [1800, t('30 minutes')],
-                    [3600, t('1 hour')],
-                    [7200, t('2 hours')],
-                    [14400, t('4 hours')],
-                    [86400, t('24 hours')],
-                  ],
+                  choices: Object.entries(TIME_WINDOW_MAP),
                   required: true,
                 },
                 {
@@ -350,6 +405,7 @@ class RuleForm extends React.Component<Props, State> {
 
 type RuleFormContainerProps = {
   api: any;
+  config: Config;
   organization: Organization;
   project: Project;
   orgId: string;
@@ -402,4 +458,4 @@ const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
   z-index: 1;
 `;
 
-export default withApi(withOrganization(withProject(RuleFormContainer)));
+export default withConfig(withApi(withOrganization(withProject(RuleFormContainer))));
