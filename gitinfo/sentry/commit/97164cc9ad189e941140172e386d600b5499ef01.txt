commit 97164cc9ad189e941140172e386d600b5499ef01
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Feb 20 19:15:55 2017 +0100

    Refactor requests session handling

diff --git a/src/sentry/http.py b/src/sentry/http.py
index 1a7a596a1d..daa0158e99 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -108,17 +108,38 @@ class BlacklistAdapter(HTTPAdapter):
         return super(BlacklistAdapter, self).send(request, *args, **kwargs)
 
 
-def build_session():
-    session = requests.Session()
-    session.headers.update({'User-Agent': USER_AGENT})
-    session.mount('https://', BlacklistAdapter())
-    session.mount('http://', BlacklistAdapter())
-    return session
+class SafeSession(requests.Session):
+
+    def __init__(self):
+        requests.Session.__init__(self)
+        self.headers.update({'User-Agent': USER_AGENT})
+        self.mount('https://', BlacklistAdapter())
+        self.mount('http://', BlacklistAdapter())
+
+    def request(self, *args, **kwargs):
+        kwargs.setdefault('timeout', 30)
+        try:
+            response = requests.Session.request(self, *args, **kwargs)
+        # Our version of requests does not transform ZeroReturnError into an
+        # appropriately generically catchable exception
+        except ZeroReturnError as exc:
+            import sys
+            exc_tb = sys.exc_info()[2]
+            six.reraise(SSLError, exc, exc_tb)
+            del exc_tb
+        # requests' attempts to use chardet internally when no encoding is found
+        # and we want to avoid that slow behavior
+        if not response.encoding:
+            response.encoding = 'utf-8'
+        return response
+
+
+build_session = SafeSession
 
 
 def safe_urlopen(url, method=None, params=None, data=None, json=None,
                  headers=None, allow_redirects=False, timeout=30,
-                 verify_ssl=True, user_agent=None):
+                 verify_ssl=True, user_agent=None, session=None):
     """
     A slightly safer version of ``urlib2.urlopen`` which prevents redirection
     and ensures the URL isn't attempting to hit a blacklisted IP range.
@@ -126,7 +147,10 @@ def safe_urlopen(url, method=None, params=None, data=None, json=None,
     if user_agent is not None:
         warnings.warn('user_agent is no longer used with safe_urlopen')
 
-    session = build_session()
+    if session is None:
+        session = SafeSession()
+    elif not isinstance(session, SafeSession):
+        raise TypeError('safe_urlopen can only work with safe sessions')
 
     kwargs = {}
 
@@ -148,27 +172,14 @@ def safe_urlopen(url, method=None, params=None, data=None, json=None,
     if method is None:
         method = 'POST' if (data or json) else 'GET'
 
-    try:
-        response = session.request(
-            method=method,
-            url=url,
-            allow_redirects=allow_redirects,
-            timeout=timeout,
-            verify=verify_ssl,
-            **kwargs
-        )
-    # Our version of requests does not transform ZeroReturnError into an
-    # appropriately generically catchable exception
-    except ZeroReturnError as exc:
-        import sys
-        exc_tb = sys.exc_info()[2]
-        six.reraise(SSLError, exc, exc_tb)
-        del exc_tb
-
-    # requests' attempts to use chardet internally when no encoding is found
-    # and we want to avoid that slow behavior
-    if not response.encoding:
-        response.encoding = 'utf-8'
+    response = session.request(
+        method=method,
+        url=url,
+        allow_redirects=allow_redirects,
+        timeout=timeout,
+        verify=verify_ssl,
+        **kwargs
+    )
 
     return response
 
diff --git a/tests/sentry/test_http.py b/tests/sentry/test_http.py
index ad84f19732..37e3d9e246 100644
--- a/tests/sentry/test_http.py
+++ b/tests/sentry/test_http.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import ipaddress
 import platform
+import requests
 import responses
 import pytest
 
@@ -53,3 +54,8 @@ class HttpTest(TestCase):
         with pytest.raises(SuspiciousOperation):
             # '0177.0000.0000.0001' is an octal for '127.0.0.1'
             http.safe_urlopen('http://0177.0000.0000.0001')
+
+    def test_unsafe_session(self):
+        with pytest.raises(TypeError):
+            http.safe_urlopen('http://0177.0000.0000.0001',
+                              session=requests.Session())
