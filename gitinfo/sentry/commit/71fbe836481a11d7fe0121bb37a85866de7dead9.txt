commit 71fbe836481a11d7fe0121bb37a85866de7dead9
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 19 23:19:56 2012 -0800

    Move get_send_to into sentry_mail and kill send_to_admins feature (as well as SENTRY_ADMINS)

diff --git a/docs/config/index.rst b/docs/config/index.rst
index c3793ec39e..8961a5ac14 100644
--- a/docs/config/index.rst
+++ b/docs/config/index.rst
@@ -182,24 +182,6 @@ notifications have been moved to the ``sentry.plugins.sentry_mail``. You'll need
 The following settings now act as default values for the ``sentry_mail`` plugin, and can be overwritten per-project
 by visiting the plugin configuration page for that project.
 
-.. data:: sentry.conf.ADMINS
-    :noindex:
-
-    A list of email address to send notification emails to.
-
-    Defaults to ``[]``.
-
-	On smaller sites you may wish to enable throttled emails, we recommend doing this by first
-	removing the ``ADMINS`` setting in Django, and adding in ``SENTRY_ADMINS``::
-
-		# Disable the default admins (for email)
-		ADMINS = ()
-		# Set Sentry's ADMINS to a raw list of email addresses
-		SENTRY_ADMINS = ('root@localhost',)
-
-	This will send out a notification the first time an error is seen, and the first time an error is
-	seen after it has been resolved.
-
 .. data:: sentry.conf.MAIL_LEVEL
     :noindex:
 
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index ea9f93f4d3..7341a80e64 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -35,8 +35,6 @@ DEFAULT_LOG_LEVEL = 'error'
 
 DEFAULT_LOGGER_NAME = 'root'
 
-ADMINS = []
-
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
 URL_PREFIX = ''
 
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 41e38d404e..ddcd1e5290 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -8,7 +8,6 @@ sentry.plugins.bases.notify
 from django import forms
 from django.contrib.auth.models import User
 from django.utils.translation import ugettext_lazy as _
-from sentry.conf import settings
 from sentry.plugins import Plugin
 from sentry.models import UserOption
 from sentry.utils.cache import cache
@@ -19,8 +18,6 @@ from sentry.constants import MEMBER_USER
 class NotificationConfigurationForm(forms.Form):
     send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
         help_text=_('Notify members of this project.'))
-    send_to_admins = forms.BooleanField(label=_('Include sentry admins'), initial=False, required=False,
-        help_text=_('Notify administrators of this Sentry server.'))
 
 
 class BaseNotificationUserOptionsForm(forms.Form):
@@ -119,7 +116,6 @@ class NotificationPlugin(Plugin):
 
         The logic for this is a bit complicated, but it does the following:
 
-        - Includes admins if ``send_to_admins`` is enabled.
         - Includes members if ``send_to_members`` is enabled **and** the user has not disabled alerts
           for this project
 
@@ -137,11 +133,6 @@ class NotificationPlugin(Plugin):
         if send_to_list is None:
             send_to_list = set()
 
-            send_to_admins = self.get_option('send_to_admins', project)
-
-            if send_to_admins:
-                send_to_list |= set(settings.ADMINS)
-
             send_to_members = self.get_option('send_to_members', project)
             if send_to_members and project and project.team:
                 member_set = self.get_sendable_users(project)
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index b08cea4d5c..76e4515bde 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -15,6 +15,8 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin, NotificationConfigurationForm
+from sentry.utils.cache import cache
+
 import re
 
 from pynliner import Pynliner
@@ -60,7 +62,7 @@ class MailProcessor(NotificationPlugin):
     project_conf_form = MailConfigurationForm
 
     def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
-                 send_to=None, send_to_members=NOTSET, send_to_admins=NOTSET, *args, **kwargs):
+                 send_to=None, send_to_members=NOTSET, *args, **kwargs):
 
         super(MailProcessor, self).__init__(*args, **kwargs)
 
@@ -72,15 +74,12 @@ class MailProcessor(NotificationPlugin):
             exclude_loggers = settings.MAIL_EXCLUDE_LOGGERS
         if send_to_members is NOTSET:
             send_to_members = True
-        if send_to_admins is NOTSET:
-            send_to_admins = False
 
         self.min_level = min_level
         self.include_loggers = include_loggers
         self.exclude_loggers = exclude_loggers
         self.send_to = send_to
         self.send_to_members = send_to_members
-        self.send_to_admins = send_to_admins
         self.subject_prefix = settings.EMAIL_SUBJECT_PREFIX
 
     def _send_mail(self, subject, body, html_body=None, project=None, fail_silently=False, headers=None):
@@ -106,14 +105,41 @@ class MailProcessor(NotificationPlugin):
         )
 
     def get_send_to(self, project=None):
-        send_to_list = self.get_option('send_to', project) or []
+        """
+        Returns a list of email addresses for the users that should be notified of alerts.
+
+        The logic for this is a bit complicated, but it does the following:
+
+        - Includes members if ``send_to_members`` is enabled **and** the user has not disabled alerts
+          for this project
+
+        The results of this call can be fairly expensive to calculate, so the send_to list gets cached
+        for 60 seconds.
+        """
+        if project:
+            project_id = project.pk
+        else:
+            project_id = ''
+        conf_key = self.get_conf_key()
+        cache_key = '%s:send_to:%s' % (conf_key, project_id)
+
+        send_to_list = cache.get(cache_key)
+        if send_to_list is None:
+            send_to_list = self.get_option('send_to', project) or []
+
+            if isinstance(send_to_list, basestring):
+                send_to_list = [s.strip() for s in send_to_list.split(',')]
+
+            send_to_list = set(filter(bool, send_to_list))
 
-        if isinstance(send_to_list, basestring):
-            send_to_list = [s.strip() for s in send_to_list.split(',')]
+            send_to_members = self.get_option('send_to_members', project)
+            if send_to_members and project and project.team:
+                member_set = self.get_sendable_users(project)
+                send_to_list |= set(self.get_emails_for_users(member_set))
 
-        send_to_list.extend(super(MailProcessor, self).get_send_to(project))
+            cache.set(cache_key, send_to_list, 60)  # 1 minute cache
 
-        return filter(bool, set(send_to_list))
+        return send_to_list
 
     def notify_users(self, group, event, fail_silently=False):
         project = group.project
@@ -161,7 +187,7 @@ class MailProcessor(NotificationPlugin):
     def get_option(self, key, *args, **kwargs):
         value = super(MailProcessor, self).get_option(key, *args, **kwargs)
         if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
-                                     'send_to_members', 'send_to_admins', 'send_to',
+                                     'send_to_members', 'send_to',
                                      'subject_prefix'):
             value = getattr(self, key)
         return value
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index a051248eaa..b0c7f0567a 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -191,7 +191,6 @@ class MailProcessorTest(TestCase):
     def test_send_to(self, get_emails_for_users, get_sendable_users, get_value):
         opts = {}
 
-        admins = ['1']
         member_emails = ['2', '3']
         project_emails = ['2', '4']
 
@@ -203,36 +202,16 @@ class MailProcessorTest(TestCase):
         project.id = 1
         project.pk = project.id
 
-        with self.Settings(SENTRY_ADMINS=admins):
-            p = MailProcessor()
-            # member emails without admins
-            self.assertEqual(sorted(set(member_emails)),
-                             sorted(p.get_send_to(project)))
-
-            # member emails with members
-            opts = {'mail:send_to_admins': True}
-            self.assertEqual(sorted(set(member_emails + admins)),
-                             sorted(p.get_send_to(project)))
-
-            # project emails without members
-            opts = {'mail:send_to': ','.join(project_emails),
-                    'mail:send_to_members': False}
-            self.assertEqual(sorted(set(project_emails)),
-                             sorted(p.get_send_to(project)))
-
-            # project emails with members
-            opts = {'mail:send_to': ','.join(project_emails),
-                    'mail:send_to_members': False,
-                    'mail:send_to_admins': True}
-            self.assertEqual(sorted(set(project_emails + admins)),
-                             sorted(p.get_send_to(project)))
-
-            # project emails with members and admins
-            opts = {'mail:send_to': ','.join(project_emails),
-                    'mail:send_to_members': True,
-                    'mail:send_to_admins': True}
-            self.assertEqual(sorted(set(project_emails + admins + member_emails)),
-                             sorted(p.get_send_to(project)))
+        p = MailProcessor()
+        # member emails without admins
+        self.assertEqual(sorted(set(member_emails)),
+                         sorted(p.get_send_to(project)))
+
+        # project emails without members
+        opts = {'mail:send_to': ','.join(project_emails),
+                'mail:send_to_members': False}
+        self.assertEqual(sorted(set(project_emails)),
+                         sorted(p.get_send_to(project)))
 
     def test_get_emails_for_users(self):
         from django.contrib.auth.models import User
