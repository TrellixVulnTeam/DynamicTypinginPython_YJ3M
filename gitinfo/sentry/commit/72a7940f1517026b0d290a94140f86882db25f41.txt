commit 72a7940f1517026b0d290a94140f86882db25f41
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 10 16:22:25 2015 +0200

    Add toggle functionality for data

diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index e353bf0a95..00c20d2d0f 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -1,82 +1,102 @@
 /*** @jsx React.DOM */
 
 var React = require('react');
+var jQuery = require('jquery');
 
 
-function renderValue(value) {
-  function walk(value) {
-    var i = 0, children = [];
-    if (value === null) {
-      return <span className="val-null">None</span>;
-    } else if (value === true || value === false) {
-      return <span className="val-bool">{value ? 'True' : 'False'}</span>;
-    } else if (typeof value === 'string' || value instanceof String) {
-      // consider auto quoting?
-      return <span className="val-string">{value}</span>;
-    } else if (typeof value === 'number' || value instanceof Number) {
-      return <span className="val-number">{value}</span>;
-    } else if (value instanceof Array) {
-      for (i = 0; i < value.length; i++) {
-        children.push(
-          <span className="val-array-item" key={i}>
-            {walk(value[i])}
-            {i < value.length - 1 ? <span className="val-array-sep">{', '}</span> : null}
-          </span>
-        );
+var ContextData = React.createClass({
+  propTypes: {
+    data: React.PropTypes.any
+  },
+
+  getDefaultProps() {
+    return {
+      data: null
+    };
+  },
+
+  renderValue(value) {
+    function toggle(event) {
+      jQuery(event.target).parent().toggleClass('val-toggle-open');
+      event.preventDefault();
+    }
+
+    function makeToggle(collapsed, children) {
+      var className = "val-toggle";
+      if (!collapsed) {
+        className += " val-toggle-open";
       }
       return (
-        <span className="val-array">
-          <span className="val-array-marker">{'['}</span>
-          <span className="val-array-items">{children}</span>
-          <span className="val-array-marker">{']'}</span>
+        <span className={className}>
+          <a href="#" className="val-toggle-link" onClick={toggle}></a>
+          {children}
         </span>
       );
-    } else {
-      var keys = Object.keys(value);
-      for (i = 0; i < keys.length; i++) {
-        var key = keys[i];
-        children.push(
-          <span className="val-dict-pair" key={key}>
-            <span className="val-dict-key">
-              <span className="val-string">{key}</span>
+    }
+
+    function walk(value, depth) {
+      var i = 0, children = [];
+      // XXX: where do we hide?
+      var collapsed = depth > 1;
+      if (value === null) {
+        return <span className="val-null">None</span>;
+      } else if (value === true || value === false) {
+        return <span className="val-bool">{value ? 'True' : 'False'}</span>;
+      } else if (typeof value === 'string' || value instanceof String) {
+        // consider auto quoting?
+        return <span className="val-string">{value}</span>;
+      } else if (typeof value === 'number' || value instanceof Number) {
+        return <span className="val-number">{value}</span>;
+      } else if (value instanceof Array) {
+        for (i = 0; i < value.length; i++) {
+          children.push(
+            <span className="val-array-item" key={i}>
+              {walk(value[i], depth + 1)}
+              {i < value.length - 1 ? <span className="val-array-sep">{', '}</span> : null}
             </span>
-            <span className="val-dict-col">{': '}</span>
-            <span className="val-dict-value">
-              {walk(value[key])}
-              {i < keys.length - 1 ? <span className="val-dict-sep">{', '}</span> : null}
+          );
+        }
+        return (
+          <span className="val-array">
+            <span className="val-array-marker">{'['}</span>
+            {makeToggle(collapsed, <span className="val-array-items">{children}</span>)}
+            <span className="val-array-marker">{']'}</span>
+          </span>
+        );
+      } else {
+        var keys = Object.keys(value);
+        for (i = 0; i < keys.length; i++) {
+          var key = keys[i];
+          children.push(
+            <span className="val-dict-pair" key={key}>
+              <span className="val-dict-key">
+                <span className="val-string">{key}</span>
+              </span>
+              <span className="val-dict-col">{': '}</span>
+              <span className="val-dict-value">
+                {walk(value[key], depth + 1)}
+                {i < keys.length - 1 ? <span className="val-dict-sep">{', '}</span> : null}
+              </span>
             </span>
+          );
+        }
+        return (
+          <span className="val-dict">
+            <span className="val-dict-marker">{'{'}</span>
+            {makeToggle(collapsed, <span className="val-dict-items">{children}</span>)}
+            <span className="val-dict-marker">{'}'}</span>
           </span>
         );
       }
-      return (
-        <span className="val-dict">
-          <span className="val-dict-marker">{'{'}</span>
-          <span className="val-dict-items">{children}</span>
-          <span className="val-dict-marker">{'}'}</span>
-        </span>
-      );
     }
-  }
-  return walk(value);
-}
-
-function renderKeyPosValue(value) {
-  if (typeof value === 'string' || value instanceof String) {
-    return <span className="val-string">{value}</span>;
-  }
-  return renderValue(value);
-}
-
-
-var ContextData = React.createClass({
-  propTypes: {
-    data: React.PropTypes.any
+    return walk(value, 0);
   },
 
-  getDefaultProps() {
-    return {
-      data: null
-    };
+  renderKeyPosValue(value) {
+    if (typeof value === 'string' || value instanceof String) {
+      return <span className="val-string">{value}</span>;
+    }
+    return this.renderValue(value);
   },
 
   render() {
@@ -84,7 +104,7 @@ var ContextData = React.createClass({
     other.className = 'val ' + (className || '');
 
     return (
-      <pre {...other}>{renderValue(data)}</pre>
+      <pre {...other}>{this.renderValue(data)}</pre>
     );
   }
 });
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 5d7ed376b1..f82792bd9c 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1102,3 +1102,48 @@ pre.val, span.val {
     }
   }
 }
+
+.val-toggle {
+  > a.val-toggle-link:before {
+    content: "+";
+  }
+
+  > .val-array-items, > .val-dict-items {
+    display: none;
+  }
+
+  &.val-toggle-open {
+    > a.val-toggle-link:before {
+      content: "-";
+    }
+
+    > .val-array-items, > .val-dict-items {
+      display: block;
+    }
+  }
+
+  a.val-toggle-link {
+    background: @linkColor;
+    border-radius: 2px;
+    color: white;
+    font-weight: bold;
+    font-size: 10px;
+    line-height: 11px;
+    text-align: center;
+    height: 11px;
+    width: 11px;
+    display: inline-block;
+
+    &:hover {
+      background: @linkColorHover;
+    }
+  }
+
+  &.val-toggle-open > a.val-toggle-link {
+    background: @gray-light;
+  }
+
+  &.val-toggle-open > a.val-toggle-link:hover {
+    background: @gray;
+  }
+}
