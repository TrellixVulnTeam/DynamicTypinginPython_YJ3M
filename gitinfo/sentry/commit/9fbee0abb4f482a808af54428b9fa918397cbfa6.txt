commit 9fbee0abb4f482a808af54428b9fa918397cbfa6
Author: ted kaemming <ted@kaemming.com>
Date:   Thu Mar 16 11:19:28 2017 -0700

    Update similarity index on group mutations. (#5082)

diff --git a/src/sentry/similarity.py b/src/sentry/similarity.py
index 8a8ca6e8b2..32d4f731c7 100644
--- a/src/sentry/similarity.py
+++ b/src/sentry/similarity.py
@@ -331,6 +331,12 @@ class FeatureSet(object):
         self.features = features
         assert set(self.aliases) == set(self.features)
 
+    def __get_scope(self, group):
+        return '{}'.format(group.project_id)
+
+    def __get_key(self, group):
+        return '{}'.format(group.id)
+
     def record(self, event):
         items = []
         for label, feature in self.features.items():
@@ -341,8 +347,8 @@ class FeatureSet(object):
                         characteristics,
                     ))
         return self.index.record(
-            '{}'.format(event.project_id),
-            '{}'.format(event.group_id),
+            self.__get_scope(event.group),
+            self.__get_key(event.group),
             items,
             timestamp=to_timestamp(event.datetime),
         )
@@ -351,8 +357,8 @@ class FeatureSet(object):
         features = list(self.features.keys())
 
         results = self.index.query(
-            '{}'.format(group.project_id),
-            '{}'.format(group.id),
+            self.__get_scope(group),
+            self.__get_key(group),
             [self.aliases[label] for label in features],
         )
 
@@ -370,6 +376,62 @@ class FeatureSet(object):
             reverse=True,
         )
 
+    def merge(self, destination, sources, allow_unsafe=False):
+        def add_index_aliases_to_key(key):
+            return [(self.aliases[label], key) for label in self.features.keys()]
+
+        # Collect all of the sources by the scope that they are contained
+        # within so that we can make the most efficient queries possible and
+        # reject queries that cross scopes if we haven't explicitly allowed
+        # unsafe actions.
+        scopes = {}
+        for source in sources:
+            scopes.setdefault(
+                self.__get_scope(source),
+                set(),
+            ).add(source)
+
+        unsafe_scopes = set(scopes.keys()) - set([self.__get_scope(destination)])
+        if unsafe_scopes and not allow_unsafe:
+            raise ValueError('all groups must belong to same project if unsafe merges are not allowed')
+
+        destination_scope = self.__get_scope(destination)
+        destination_key = self.__get_key(destination)
+
+        for source_scope, sources in scopes.items():
+            items = []
+            for source in sources:
+                items.extend(
+                    add_index_aliases_to_key(
+                        self.__get_key(source),
+                    ),
+                )
+
+            if source_scope != destination_scope:
+                imports = [
+                    (alias, destination_key, data)
+                    for (alias, _), data in
+                    zip(
+                        items,
+                        self.index.export(source_scope, items),
+                    )
+                ]
+                self.index.delete(source_scope, items)
+                self.index.import_(destination_scope, imports)
+            else:
+                self.index.merge(
+                    destination_scope,
+                    destination_key,
+                    items,
+                )
+
+    def delete(self, group):
+        key = self.__get_key(group)
+        return self.index.delete(
+            self.__get_scope(group),
+            [(self.aliases[label], key) for label in self.features.keys()],
+        )
+
 
 def serialize_text_shingle(value, separator=b''):
     """\
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 3921aad098..da6c9628be 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -16,6 +16,7 @@ from sentry import nodestore
 from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.signals import pending_delete
+from sentry.similarity import features
 from sentry.tasks.base import instrumented_task, retry
 from sentry.utils.query import bulk_delete_objects
 
@@ -259,6 +260,8 @@ def delete_group(object_id, transaction_id=None, continuous=True, **kwargs):
                 kwargs={'object_id': object_id, 'transaction_id': transaction_id},
             )
         return
+
+    features.delete(group)
     g_id = group.id
     group.delete()
     logger.info('object.delete.executed', extra={
diff --git a/src/sentry/tasks/merge.py b/src/sentry/tasks/merge.py
index 8f90734dd6..cb08951ace 100644
--- a/src/sentry/tasks/merge.py
+++ b/src/sentry/tasks/merge.py
@@ -13,6 +13,7 @@ import logging
 from django.db import DataError, IntegrityError, router, transaction
 from django.db.models import F
 
+from sentry.similarity import features
 from sentry.tasks.base import instrumented_task, retry
 from sentry.tasks.deletion import delete_group
 
@@ -91,6 +92,8 @@ def merge_group(from_object_id=None, to_object_id=None, transaction_id=None,
         )
         return
 
+    features.merge(new_group, [group], allow_unsafe=True)
+
     previous_group_id = group.id
 
     group.delete()
