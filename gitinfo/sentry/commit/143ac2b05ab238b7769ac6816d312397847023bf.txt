commit 143ac2b05ab238b7769ac6816d312397847023bf
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 12 16:10:41 2013 -0800

    Coerce values to unicode in redis buffer keys

diff --git a/src/sentry/buffer/redis.py b/src/sentry/buffer/redis.py
index 68369c808e..53446ea054 100644
--- a/src/sentry/buffer/redis.py
+++ b/src/sentry/buffer/redis.py
@@ -9,6 +9,7 @@ sentry.buffer.redis
 from __future__ import with_statement
 
 from django.db import models
+from django.utils.encoding import smart_str
 from hashlib import md5
 from nydus.db import create_cluster
 from sentry.buffer import Buffer
@@ -35,24 +36,22 @@ class RedisBuffer(Buffer):
             'hosts': options['hosts'],
         })
 
-    def _map_column(self, model, column, value):
+    def _coerce_val(self, value):
         if isinstance(value, models.Model):
             value = value.pk
-        else:
-            value = unicode(value)
-        return value
+        return smart_str(value)
 
     def _make_key(self, model, filters, column):
         """
         Returns a Redis-compatible key for the model given filters.
         """
         return '%s:%s:%s' % (model._meta,
-            md5('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems()))).hexdigest(),
+            md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest(),
             column)
 
     def _make_extra_key(self, model, filters):
         return '%s:extra:%s' % (model._meta,
-            md5('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems()))).hexdigest())
+            md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest())
 
     def incr(self, model, columns, filters, extra=None):
         with self.conn.map() as conn:
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 7bccba0cbf..02d0c2affc 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -25,8 +25,11 @@ class RedisBufferTest(TestCase):
         self.assertEquals(len(buf.conn.hosts), 1)
         self.assertEquals(buf.conn.hosts[0].host, 'localhost')
 
-    def test_map_column_handles_foreignkeys(self):
-        self.assertEquals(self.buf._map_column(Group, 'project', Project(id=1)), 1)
+    def test_coerce_val_handles_foreignkeys(self):
+        assert self.buf._coerce_val(Project(id=1)) == '1'
+
+    def test_coerce_val_handles_unicode(self):
+        assert self.buf._coerce_val(u'\u201d') == '‚Äù'
 
     def test_make_key_response(self):
         column = 'times_seen'
