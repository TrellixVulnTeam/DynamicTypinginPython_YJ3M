commit 9a6ef3344d90716efb69f70c1cd511aa3ad61291
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Jan 18 11:17:35 2018 -0800

    feat(environments): Update project dashboard based on selected environment (#6962)

diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index f99dc829e8..bdafa9c43f 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -3,7 +3,9 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
 import {Link} from 'react-router';
+import Reflux from 'reflux';
 
+import LatestContextStore from '../stores/latestContextStore';
 import EventList from './projectDashboard/eventList';
 import ProjectState from '../mixins/projectState';
 import ProjectChart from './projectDashboard/chart';
@@ -22,7 +24,7 @@ const ProjectDashboard = createReactClass({
     setProjectNavSection: PropTypes.func,
   },
 
-  mixins: [ProjectState],
+  mixins: [ProjectState, Reflux.listenTo(LatestContextStore, 'onLatestContextChange')],
 
   getDefaultProps() {
     return {
@@ -33,6 +35,7 @@ const ProjectDashboard = createReactClass({
   getInitialState() {
     return {
       statsPeriod: this.props.defaultStatsPeriod,
+      activeEnvironment: null,
       ...this.getQueryStringState(),
     };
   },
@@ -85,23 +88,45 @@ const ProjectDashboard = createReactClass({
   },
 
   getTrendingIssuesEndpoint(dateSince) {
-    let params = this.props.params;
-    let qs = jQuery.param({
+    let {params} = this.props;
+    let {activeEnvironment} = this.state;
+
+    let qs = {
       sort: 'priority',
       query: 'is:unresolved',
       since: dateSince,
-    });
-    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/?' + qs;
+    };
+
+    if (activeEnvironment) {
+      qs.environment = activeEnvironment.name;
+      qs.query = `${qs.query} environment:${activeEnvironment.name}`;
+    }
+
+    return `/projects/${params.orgId}/${params.projectId}/issues/?${jQuery.param(qs)}`;
   },
 
   getNewIssuesEndpoint(dateSince) {
-    let params = this.props.params;
-    let qs = jQuery.param({
+    let {params} = this.props;
+    let {activeEnvironment} = this.state;
+
+    let qs = {
       sort: 'new',
       query: 'is:unresolved',
       since: dateSince,
+    };
+
+    if (activeEnvironment) {
+      qs.environment = activeEnvironment.name;
+      qs.query = `${qs.query} environment:${activeEnvironment.name}`;
+    }
+
+    return `/projects/${params.orgId}/${params.projectId}/issues/?${jQuery.param(qs)}`;
+  },
+
+  onLatestContextChange(context) {
+    this.setState({
+      activeEnvironment: context.environment,
     });
-    return '/projects/' + params.orgId + '/' + params.projectId + '/issues/?' + qs;
   },
 
   render() {
