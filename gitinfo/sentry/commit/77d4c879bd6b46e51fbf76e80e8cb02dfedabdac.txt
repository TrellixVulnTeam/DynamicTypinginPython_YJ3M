commit 77d4c879bd6b46e51fbf76e80e8cb02dfedabdac
Author: William Mak <william@wmak.io>
Date:   Fri Mar 6 16:08:44 2020 -0500

    feat(visibility) - Adding the KeyTransactions endpoint
    
    - This adds the ability to create/get/save Key Transactions
    - Endpoint is not paged cause there's a limit of 10 which should be fine
      to return without paging
      - If the limit increases should introduce paging
    - This allows us to pass a custom set of conditions to discover.query.

diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index b0394b55d1..e278878acd 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -286,6 +286,7 @@ from .endpoints.useravatar import UserAvatarEndpoint
 from sentry.discover.endpoints.discover_query import DiscoverQueryEndpoint
 from sentry.discover.endpoints.discover_saved_queries import DiscoverSavedQueriesEndpoint
 from sentry.discover.endpoints.discover_saved_query_detail import DiscoverSavedQueryDetailEndpoint
+from sentry.discover.endpoints.discover_key_transactions import KeyTransactionEndpoint
 from sentry.incidents.endpoints.organization_alert_rule_available_action_index import (
     OrganizationAlertRuleAvailableActionIndexEndpoint,
 )
@@ -647,6 +648,11 @@ urlpatterns = [
                     OrganizationDashboardDetailsEndpoint.as_view(),
                     name="sentry-api-0-organization-dashboard-details",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/key-transactions/$",
+                    KeyTransactionEndpoint.as_view(),
+                    name="sentry-api-0-organization-key-transactions",
+                ),
                 # Dashboards
                 url(
                     r"^(?P<organization_slug>[^\/]+)/dashboards/$",
diff --git a/src/sentry/discover/endpoints/discover_key_transactions.py b/src/sentry/discover/endpoints/discover_key_transactions.py
new file mode 100644
index 0000000000..e5efaf33b5
--- /dev/null
+++ b/src/sentry/discover/endpoints/discover_key_transactions.py
@@ -0,0 +1,117 @@
+from __future__ import absolute_import
+
+from django.db import transaction
+from rest_framework.response import Response
+from rest_framework.exceptions import ParseError
+
+from sentry import features
+from sentry.api.bases import OrganizationEventsV2EndpointBase
+from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.discover.models import KeyTransaction
+from sentry.discover.endpoints.serializers import KeyTransactionSerializer
+from sentry.snuba.discover import query
+
+
+class KeyTransactionEndpoint(OrganizationEventsV2EndpointBase):
+    permission_classes = (OrganizationPermission,)
+
+    def has_feature(self, request, organization):
+        return features.has("organizations:performance-view", organization, actor=request.user)
+
+    def get_project(self, request, organization):
+        projects = self.get_projects(request, organization)
+
+        if len(projects) != 1:
+            raise ParseError("Only 1 project per Key Transaction")
+        return projects[0]
+
+    def post(self, request, organization):
+        """ Create a Key Transaction """
+        if not self.has_feature(request, organization):
+            return Response(status=404)
+
+        project = self.get_project(request, organization)
+
+        base_filter = {"organization": organization, "project": project, "owner": request.user}
+
+        with transaction.atomic():
+            serializer = KeyTransactionSerializer(data=request.data, context=base_filter)
+            if serializer.is_valid():
+                data = serializer.validated_data
+                base_filter["transaction"] = data["transaction"]
+
+                KeyTransaction.objects.create(**base_filter)
+                return Response(status=201)
+            return Response(serializer.errors, status=400)
+
+    def get(self, request, organization):
+        """ Get the Key Transactions for a user """
+        if not self.has_feature(request, organization):
+            return self.response(status=404)
+
+        params = self.get_filter_params(request, organization)
+        fields = request.GET.getlist("field")[:]
+        orderby = self.get_orderby(request)
+
+        queryset = KeyTransaction.objects.filter(organization=organization, owner=request.user)
+
+        results = query(
+            fields,
+            None,
+            params,
+            orderby=orderby,
+            referrer="discover.key_transactions",
+            # The snuba query for transactions is of the form
+            # (transaction="1" AND project=1) OR (transaction="2" and project=2) ...
+            # which the schema intentionally doesn't support so we cannot do an AND in OR
+            # so here the "and" operator is being instead to do an AND in OR query
+            conditions=[
+                [
+                    # First layer is Ands
+                    [
+                        # Second layer is Ors
+                        [
+                            "and",
+                            [
+                                [
+                                    "equals",
+                                    # Without the outer ' here, the transaction will be treated as another column
+                                    # instead of a string. This isn't an injection risk since snuba is smart enough to
+                                    # handle escaping for us.
+                                    ["transaction", u"'{}'".format(transaction.transaction)],
+                                ],
+                                ["equals", ["project_id", transaction.project.id]],
+                            ],
+                        ],
+                        "=",
+                        1,
+                    ]
+                    for transaction in queryset
+                ]
+            ],
+        )
+
+        return Response(
+            self.handle_results_with_meta(request, organization, params["project_id"], results),
+            status=200,
+        )
+
+    def delete(self, request, organization):
+        """ Remove a Key transaction for a user """
+        if not self.has_feature(request, organization):
+            return self.response(status=404)
+
+        project = self.get_project(request, organization)
+        transaction = request.data["transaction"]
+
+        try:
+            model = KeyTransaction.objects.get(
+                transaction=transaction, organization=organization, project=project
+            )
+        except KeyTransaction.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        model.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/discover/endpoints/serializers.py b/src/sentry/discover/endpoints/serializers.py
index 79160819a3..c7b24b8182 100644
--- a/src/sentry/discover/endpoints/serializers.py
+++ b/src/sentry/discover/endpoints/serializers.py
@@ -6,6 +6,7 @@ from rest_framework import serializers
 from rest_framework.exceptions import PermissionDenied
 
 from sentry.models import Project, ProjectStatus
+from sentry.discover.models import KeyTransaction, MAX_KEY_TRANSACTIONS
 from sentry.api.fields.empty_integer import EmptyIntegerField
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.utils import get_date_range_from_params, InvalidParams
@@ -233,3 +234,22 @@ class DiscoverSavedQuerySerializer(serializers.Serializer):
                 "You cannot use the %s attribute(s) with the selected version"
                 % ", ".join(bad_fields)
             )
+
+
+class KeyTransactionSerializer(serializers.Serializer):
+    transaction = serializers.CharField(required=True, max_length=200)
+
+    def validate(self, data):
+        data = super(KeyTransactionSerializer, self).validate(data)
+        base_filter = self.context.copy()
+        # Limit the number of key transactions
+        if KeyTransaction.objects.filter(**base_filter).count() >= MAX_KEY_TRANSACTIONS:
+            raise serializers.ValidationError(
+                "At most {} Key Transactions can be added".format(MAX_KEY_TRANSACTIONS)
+            )
+
+        base_filter["transaction"] = data["transaction"]
+
+        if KeyTransaction.objects.filter(**base_filter).count() > 0:
+            raise serializers.ValidationError("This Key Transaction was already added")
+        return data
diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 630da7ecba..92254c7ad8 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -355,6 +355,7 @@ def query(
     referrer=None,
     auto_fields=False,
     use_aggregate_conditions=False,
+    conditions=None,
 ):
     """
     High-level API for doing arbitrary user queries against events.
@@ -376,6 +377,8 @@ def query(
                     conditions based on the provided reference.
     referrer (str|None) A referrer string to help locate the origin of this query.
     auto_fields (bool) Set to true to have project + eventid fields automatically added.
+    conditions (Sequence[any]) List of conditions that are passed directly to snuba without
+                    any additional processing.
     """
     if not selected_columns:
         raise InvalidSearchQuery("No columns selected")
@@ -431,6 +434,9 @@ def query(
                 )
             )
 
+    if conditions is not None:
+        snuba_args["conditions"].extend(conditions)
+
     result = raw_query(
         start=snuba_args.get("start"),
         end=snuba_args.get("end"),
diff --git a/tests/snuba/api/endpoints/test_discover_key_transactions.py b/tests/snuba/api/endpoints/test_discover_key_transactions.py
new file mode 100644
index 0000000000..adb8a89cdd
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_discover_key_transactions.py
@@ -0,0 +1,352 @@
+from __future__ import absolute_import
+
+import pytz
+import six
+
+from django.core.urlresolvers import reverse
+
+from sentry.utils.compat.mock import patch
+from sentry.discover.models import KeyTransaction, MAX_KEY_TRANSACTIONS
+from sentry.utils.samples import load_data
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers.datetime import iso_format, before_now
+
+
+class KeyTransactionTest(APITestCase):
+    def setUp(self):
+        super(KeyTransactionTest, self).setUp()
+
+        self.login_as(user=self.user, superuser=False)
+
+        self.org = self.create_organization(owner=self.user, name="foo")
+
+        self.project = self.create_project(name="bar", organization=self.org)
+
+    def test_save_key_transaction(self):
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+
+        assert response.status_code == 201
+
+        key_transactions = KeyTransaction.objects.filter(owner=self.user)
+        assert len(key_transactions) == 1
+
+        key_transaction = key_transactions.first()
+        assert key_transaction.transaction == data["transaction"]
+        assert key_transaction.organization == self.org
+
+    def test_duplicate_key_transaction(self):
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+            assert response.status_code == 201
+
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+            assert response.status_code == 400
+
+        key_transactions = KeyTransaction.objects.filter(owner=self.user)
+        assert len(key_transactions) == 1
+
+        key_transaction = key_transactions.first()
+        assert key_transaction.transaction == data["transaction"]
+        assert key_transaction.organization == self.org
+
+    def test_save_with_wrong_project(self):
+        other_user = self.create_user()
+        other_org = self.create_organization(owner=other_user)
+        other_project = self.create_project(organization=other_org)
+
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[other_org.slug])
+            response = self.client.post(
+                url + "?project={}".format(other_project.id), {"transaction": data["transaction"]}
+            )
+
+        assert response.status_code == 403
+
+    def test_save_with_multiple_projects(self):
+        other_project = self.create_project(organization=self.org)
+
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}&project={}".format(other_project.id, self.project.id),
+                {"transaction": data["transaction"]},
+            )
+
+        assert response.status_code == 400
+        assert response.data == {"detail": "Only 1 project per Key Transaction"}
+
+    def test_create_with_overly_long_transaction(self):
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": "a" * 500}
+            )
+
+        assert response.status_code == 400
+        assert response.data == {
+            "transaction": ["Ensure this field has no more than 200 characters."]
+        }
+
+    def test_max_key_transaction(self):
+        data = load_data("transaction")
+        for i in range(MAX_KEY_TRANSACTIONS):
+            KeyTransaction.objects.create(
+                owner=self.user,
+                organization=self.org,
+                transaction=data["transaction"] + six.text_type(i),
+                project=self.project,
+            )
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+
+        assert response.status_code == 400
+        assert response.data == {
+            "non_field_errors": [
+                "At most {} Key Transactions can be added".format(MAX_KEY_TRANSACTIONS)
+            ]
+        }
+
+    @patch("django.utils.timezone.now")
+    def test_get_key_transactions(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+        project2 = self.create_project(name="foo", organization=self.org)
+        event_data = load_data("transaction")
+        start_timestamp = iso_format(before_now(minutes=1))
+        end_timestamp = iso_format(before_now(minutes=1))
+        event_data.update({"start_timestamp": start_timestamp, "timestamp": end_timestamp})
+
+        transactions = [
+            (self.project, "/foo_transaction/"),
+            (self.project, "/blah_transaction/"),
+            (self.project, "/zoo_transaction/"),
+            (project2, "/bar_transaction/"),
+        ]
+
+        for project, transaction in transactions:
+            event_data["transaction"] = transaction
+            self.store_event(data=event_data, project_id=project.id)
+            KeyTransaction.objects.create(
+                owner=self.user,
+                organization=self.org,
+                transaction=event_data["transaction"],
+                project=project,
+            )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.get(
+                url,
+                {
+                    "project": [self.project.id, project2.id],
+                    "orderby": "transaction",
+                    "field": [
+                        "transaction",
+                        "transaction_status",
+                        "project",
+                        "rpm()",
+                        "error_rate()",
+                        "percentile(transaction.duration, 0.95)",
+                    ],
+                },
+            )
+
+        assert response.status_code == 200
+        data = response.data["data"]
+        assert len(data) == 4
+        assert [item["transaction"] for item in data] == [
+            "/bar_transaction/",
+            "/blah_transaction/",
+            "/foo_transaction/",
+            "/zoo_transaction/",
+        ]
+
+    @patch("django.utils.timezone.now")
+    def test_get_transaction_with_quotes(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+        start_timestamp = iso_format(before_now(minutes=1))
+        end_timestamp = iso_format(before_now(minutes=1))
+        event_data = load_data("transaction")
+        event_data.update(
+            {
+                "transaction": "this is a \"transaction\" with 'quotes' \"\"to test\"\" ''what happens''",
+                "start_timestamp": start_timestamp,
+                "timestamp": end_timestamp,
+            }
+        )
+
+        self.store_event(data=event_data, project_id=self.project.id)
+        KeyTransaction.objects.create(
+            owner=self.user,
+            organization=self.org,
+            transaction=event_data["transaction"],
+            project=self.project,
+        )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.get(
+                url,
+                {
+                    "project": [self.project.id],
+                    "orderby": "transaction",
+                    "field": [
+                        "transaction",
+                        "transaction_status",
+                        "project",
+                        "rpm()",
+                        "error_rate()",
+                        "percentile(transaction.duration, 0.95)",
+                    ],
+                },
+            )
+
+        assert response.status_code == 200
+        data = response.data["data"]
+        assert len(data) == 1
+        assert data[0]["transaction"] == event_data["transaction"]
+
+    @patch("django.utils.timezone.now")
+    def test_get_transaction_with_backslash_and_quotes(self, mock_now):
+        mock_now.return_value = before_now().replace(tzinfo=pytz.utc)
+        start_timestamp = iso_format(before_now(minutes=1))
+        end_timestamp = iso_format(before_now(minutes=1))
+        event_data = load_data("transaction")
+        event_data.update(
+            {
+                "transaction": "\\someth\"'ing\\",
+                "start_timestamp": start_timestamp,
+                "timestamp": end_timestamp,
+            }
+        )
+
+        self.store_event(data=event_data, project_id=self.project.id)
+        KeyTransaction.objects.create(
+            owner=self.user,
+            organization=self.org,
+            transaction=event_data["transaction"],
+            project=self.project,
+        )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.get(
+                url,
+                {
+                    "project": [self.project.id],
+                    "orderby": "transaction",
+                    "field": [
+                        "transaction",
+                        "transaction_status",
+                        "project",
+                        "rpm()",
+                        "error_rate()",
+                        "percentile(transaction.duration, 0.95)",
+                    ],
+                },
+            )
+
+        assert response.status_code == 200
+        data = response.data["data"]
+        assert len(data) == 1
+        assert data[0]["transaction"] == event_data["transaction"]
+
+    def test_delete_transaction(self):
+        event_data = load_data("transaction")
+
+        KeyTransaction.objects.create(
+            owner=self.user,
+            organization=self.org,
+            transaction=event_data["transaction"],
+            project=self.project,
+        )
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.delete(
+                url + "?project={}".format(self.project.id),
+                {"transaction": event_data["transaction"]},
+            )
+
+        assert response.status_code == 204
+        assert (
+            KeyTransaction.objects.filter(
+                owner=self.user,
+                organization=self.org,
+                transaction=event_data["transaction"],
+                project=self.project,
+            ).count()
+            == 0
+        )
+
+    def test_delete_with_multiple_projects(self):
+        other_user = self.create_user()
+        other_org = self.create_organization(owner=other_user)
+        other_project = self.create_project(organization=other_org)
+
+        data = load_data("transaction")
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[other_org.slug])
+            response = self.client.delete(
+                url + "?project={}&project={}".format(other_project.id, self.project.id),
+                {"transaction": data["transaction"]},
+            )
+
+        assert response.status_code == 403
+
+    def test_create_after_deleting_tenth_transaction(self):
+        data = load_data("transaction")
+        for i in range(MAX_KEY_TRANSACTIONS):
+            KeyTransaction.objects.create(
+                owner=self.user,
+                organization=self.org,
+                transaction=data["transaction"] + six.text_type(i),
+                project=self.project,
+            )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[self.org.slug])
+            response = self.client.delete(
+                url + "?project={}".format(self.project.id),
+                {"transaction": data["transaction"] + "0"},
+            )
+            assert response.status_code == 204
+
+            response = self.client.post(
+                url + "?project={}".format(self.project.id), {"transaction": data["transaction"]}
+            )
+            assert response.status_code == 201
+
+    def test_delete_with_wrong_project(self):
+        data = load_data("transaction")
+        other_user = self.create_user()
+        other_org = self.create_organization(owner=other_user)
+        other_project = self.create_project(organization=other_org)
+        KeyTransaction.objects.create(
+            owner=other_user,
+            organization=other_org,
+            transaction=data["transaction"],
+            project=other_project,
+        )
+
+        with self.feature("organizations:performance-view"):
+            url = reverse("sentry-api-0-organization-key-transactions", args=[other_org.slug])
+            response = self.client.delete(
+                url + "?project={}".format(other_project.id), {"transaction": data["transaction"]}
+            )
+
+        assert response.status_code == 403
