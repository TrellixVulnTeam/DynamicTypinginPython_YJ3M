commit 4eb461bee95e7560da707f3b24ed0dc8b0aeab58
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Aug 17 10:23:40 2018 -0700

    fix(ui): Better error handling for accepting project transfer (#9313)

diff --git a/src/sentry/static/sentry/app/components/asyncComponent.jsx b/src/sentry/static/sentry/app/components/asyncComponent.jsx
index 4aac3d62c4..85cefaeed1 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.jsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.jsx
@@ -250,18 +250,21 @@ class AsyncComponent extends React.Component {
     return <LoadingIndicator />;
   }
 
-  renderError(error) {
-    let unauthorizedErrors = Object.keys(this.state.errors).find(endpointName => {
-      let result = this.state.errors[endpointName];
-      // 401s are captured by SudaModal, but may be passed back to AsyncComponent if they close the modal without identifying
-      return result && result.status === 401;
-    });
+  renderError(error, disableLog = false) {
+    // 401s are captured by SudaModal, but may be passed back to AsyncComponent if they close the modal without identifying
+    let unauthorizedErrors = Object.values(this.state.errors).find(
+      resp => resp && resp.status === 401
+    );
 
     // Look through endpoint results to see if we had any 403s, means their role can not access resource
-    let permissionErrors = Object.keys(this.state.errors).find(endpointName => {
-      let result = this.state.errors[endpointName];
-      return result && result.status === 403;
-    });
+    let permissionErrors = Object.values(this.state.errors).find(
+      resp => resp && resp.status === 403
+    );
+
+    // If all error responses have status code === 0, then show erorr message but don't
+    // log it to sentry
+    let shouldLogSentry =
+      !!Object.values(this.state.errors).find(resp => resp.status !== 0) || disableLog;
 
     if (unauthorizedErrors) {
       return (
@@ -273,7 +276,14 @@ class AsyncComponent extends React.Component {
       return <PermissionDenied />;
     }
 
-    return <RouteError error={error} component={this} onRetry={this.remountComponent} />;
+    return (
+      <RouteError
+        error={error}
+        component={this}
+        disableLogSentry={!shouldLogSentry}
+        onRetry={this.remountComponent}
+      />
+    );
   }
 
   renderComponent() {
diff --git a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
index 0a09a32a3d..7d8c69b74b 100644
--- a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
+++ b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
@@ -32,11 +32,30 @@ class AcceptProjectTransfer extends AsyncView {
         addSuccessMessage(t('Project successfully transferred'));
       },
       error: error => {
-        addErrorMessage(t('Unable to transfer project.'));
+        let errorMsg =
+          error && error.responseJSON && typeof error.responseJSON.detail === 'string'
+            ? error.responseJSON.detail
+            : '';
+
+        addErrorMessage(
+          t('Unable to transfer project') + errorMsg ? `: ${errorMsg}` : ''
+        );
       },
     });
   };
 
+  renderError(error) {
+    let disableLog = false;
+    // Check if there is an error message with `transferDetails` endpoint
+    // If so, show as toast and ignore, otherwise log to sentry
+    if (error && error.responseJSON && typeof error.responseJSON.detail === 'string') {
+      addErrorMessage(error.responseJSON.detail);
+      disableLog = true;
+    }
+
+    super.renderError(error, disableLog);
+  }
+
   renderBody() {
     let {transferDetails} = this.state;
     let choices = [];
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 73fc23aa88..1eb98b1507 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -8,6 +8,10 @@ import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 class RouteError extends React.Component {
   static propTypes = {
+    /**
+     * Disable logging to Sentry
+     */
+    disableLogSentry: PropTypes.bool,
     error: PropTypes.object.isRequired,
     routes: PropTypes.array,
   };
@@ -18,19 +22,19 @@ class RouteError extends React.Component {
   };
 
   componentWillMount() {
-    let {routes, error} = this.props;
+    let {disableLogSentry, routes, error} = this.props;
     let {organization, project} = this.context;
+
+    if (disableLogSentry) return;
+    if (!error) return;
+
+    let route = getRouteStringFromRoutes(routes);
+    if (route) {
+      error = new Error(error.message + `: ${route}`);
+    }
     // TODO(dcramer): show something in addition to embed (that contains it?)
     // throw this in a timeout so if it errors we dont fall over
     this._timeout = window.setTimeout(() => {
-      let route = getRouteStringFromRoutes(routes);
-
-      if (!error) return;
-
-      if (route) {
-        error.message += `: ${route}`;
-      }
-
       sdk.captureException(error, {
         extra: {
           route,
