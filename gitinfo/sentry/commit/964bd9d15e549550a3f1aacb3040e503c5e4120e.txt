commit 964bd9d15e549550a3f1aacb3040e503c5e4120e
Author: Leander Rodrigues <leandergrodrigues@gmail.com>
Date:   Wed Apr 1 16:50:26 2020 -0400

    ref(async-csv): Allow children on the Export CSV button + Enforce UTF-8 (#18024)
    
    Allow children to render in the Export button and use UTF-8 for CSVs (lack of unicode support for csv module in Python 2.7)

diff --git a/src/sentry/data_export/endpoints/data_export.py b/src/sentry/data_export/endpoints/data_export.py
index 4ee3bfb583..7a300a7f98 100644
--- a/src/sentry/data_export/endpoints/data_export.py
+++ b/src/sentry/data_export/endpoints/data_export.py
@@ -17,7 +17,7 @@ from ..models import ExportedData
 from ..tasks import assemble_download
 
 
-class ExportedDataSerializer(serializers.Serializer):
+class DataExportQuerySerializer(serializers.Serializer):
     query_type = serializers.ChoiceField(choices=ExportQueryType.as_str_choices(), required=True)
     query_info = serializers.JSONField(required=True)
 
@@ -30,12 +30,12 @@ class DataExportEndpoint(OrganizationEndpoint, EnvironmentMixin):
         Create a new asynchronous file export task, and
         email user upon completion,
         """
-
+        # Ensure new data-export features are enabled
         if not features.has("organizations:data-export", organization):
             return Response(status=404)
 
         limit = request.data.get("limit")
-        serializer = ExportedDataSerializer(
+        serializer = DataExportQuerySerializer(
             data=request.data, context={"organization": organization, "user": request.user}
         )
         try:
@@ -47,7 +47,11 @@ class DataExportEndpoint(OrganizationEndpoint, EnvironmentMixin):
             return Response(serializer.errors, status=400)
 
         data = serializer.validated_data
-
+        # Ensure discover features are enabled if necessary
+        if data["query_type"] == ExportQueryType.DISCOVER_STR and not features.has(
+            "organizations:discover-basic", organization, actor=request.user
+        ):
+            return Response({"detail": "You do not have access to discover features"}, status=403)
         try:
             # If this user has sent a sent a request with the same payload and organization,
             # we return them the latest one that is NOT complete (i.e. don't start another)
diff --git a/src/sentry/data_export/processors/issues_by_tag.py b/src/sentry/data_export/processors/issues_by_tag.py
index d5edd39dce..a779f5efdd 100644
--- a/src/sentry/data_export/processors/issues_by_tag.py
+++ b/src/sentry/data_export/processors/issues_by_tag.py
@@ -10,7 +10,7 @@ from ..base import ExportError
 
 class IssuesByTagProcessor(object):
     """
-    Export processor for data exports of issues data based on a provided tag
+    Processor for exports of issues data based on a provided tag
     """
 
     def __init__(self, project_id, group_id, key, environment_id):
diff --git a/src/sentry/data_export/tasks.py b/src/sentry/data_export/tasks.py
index 32692fc4ae..e17ac01fea 100644
--- a/src/sentry/data_export/tasks.py
+++ b/src/sentry/data_export/tasks.py
@@ -13,7 +13,7 @@ from sentry.utils.sdk import capture_exception
 
 from .base import ExportError, ExportQueryType, SNUBA_MAX_RESULTS
 from .models import ExportedData
-from .utils import snuba_error_handler
+from .utils import convert_to_utf8, snuba_error_handler
 from .processors.issues_by_tag import IssuesByTagProcessor
 
 
@@ -106,9 +106,12 @@ def process_issues_by_tag(data_export, file, limit, environment_id):
         while True:
             offset = SNUBA_MAX_RESULTS * iteration
             next_offset = SNUBA_MAX_RESULTS * (iteration + 1)
-            gtv_list = processor.get_serialized_data(offset=offset)
-            if len(gtv_list) == 0:
+            gtv_list_unicode = processor.get_serialized_data(offset=offset)
+            if len(gtv_list_unicode) == 0:
                 break
+            # TODO(python3): Remove next line once the 'csv' module has been updated to Python 3
+            # See associated comment in './utils.py'
+            gtv_list = convert_to_utf8(gtv_list_unicode)
             if limit and limit < next_offset:
                 # Since the next offset will pass the limit, write the remainder and quit
                 writer.writerows(gtv_list[: limit % SNUBA_MAX_RESULTS])
diff --git a/src/sentry/data_export/utils.py b/src/sentry/data_export/utils.py
index f6f8706d51..e753d54505 100644
--- a/src/sentry/data_export/utils.py
+++ b/src/sentry/data_export/utils.py
@@ -44,3 +44,17 @@ def snuba_error_handler(logger):
         ):
             message = "Internal error. Your query failed to run."
         raise ExportError(message)
+
+
+# TODO(python3): For now, this function must be run to ensure only utf-8 is passed into the 'csv' module
+# It can be removed once converted to Python 3, See https://docs.python.org/2/library/csv.html
+# This function was adapted from https://stackoverflow.com/questions/13101653/python-convert-complex-dictionary-of-strings-from-unicode-to-ascii
+def convert_to_utf8(input):
+    if isinstance(input, dict):
+        return {convert_to_utf8(key): convert_to_utf8(value) for key, value in six.iteritems(input)}
+    elif isinstance(input, list):
+        return [convert_to_utf8(element) for element in input]
+    elif isinstance(input, six.text_type):
+        return input.encode("utf-8")
+    else:
+        return input
diff --git a/src/sentry/static/sentry/app/components/dataExport.tsx b/src/sentry/static/sentry/app/components/dataExport.tsx
index 9c861b8148..a813339570 100644
--- a/src/sentry/static/sentry/app/components/dataExport.tsx
+++ b/src/sentry/static/sentry/app/components/dataExport.tsx
@@ -3,7 +3,7 @@ import React from 'react';
 import {Client} from 'app/api';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import Feature from 'app/components/acl/feature';
-import Tooltip from 'app/components/tooltip';
+import Button from 'app/components/button';
 import {t} from 'app/locale';
 import {Organization} from 'app/types';
 import withApi from 'app/utils/withApi';
@@ -22,6 +22,7 @@ type DataExportPayload = {
 
 type Props = {
   api: Client;
+  disabled?: boolean;
   organization: Organization;
   payload: DataExportPayload;
 };
@@ -66,20 +67,30 @@ class DataExport extends React.Component<Props, State> {
 
   render() {
     const {inProgress, dataExportId} = this.state;
+    const {children, disabled} = this.props;
     return (
       <Feature features={['data-export']}>
         {inProgress && dataExportId ? (
-          <Tooltip title="You can get on with your life. We'll email you when your data's ready.">
-            <button className="btn btn-default btn-sm" disabled>
-              {t("We're working on it...")}
-            </button>
-          </Tooltip>
+          <Button
+            size="small"
+            priority="default"
+            title="You can get on with your life. We'll email you when your data's ready."
+            {...this.props}
+            disabled
+          >
+            {t("We're working on it...")}
+          </Button>
         ) : (
-          <Tooltip title="Put your data to work. Start your export and we'll email you when it's finished.">
-            <button className="btn btn-default btn-sm" onClick={this.startDataExport}>
-              {t('Export Data')}
-            </button>
-          </Tooltip>
+          <Button
+            onClick={this.startDataExport}
+            disabled={disabled || false}
+            size="small"
+            priority="default"
+            title="Put your data to work. Start your export and we'll email you when it's finished."
+            {...this.props}
+          >
+            {children ? children : t('Export All to CSV')}
+          </Button>
         )}
       </Feature>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
index c1dcf6c35a..7f1bc350e2 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
@@ -8,6 +8,7 @@ import {isUrl, percent} from 'app/utils';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import UserAvatar from 'app/components/avatar/userAvatar';
+import Button from 'app/components/button';
 import DeviceName from 'app/components/deviceName';
 import ExternalLink from 'app/components/links/externalLink';
 import GlobalSelectionLink from 'app/components/globalSelectionLink';
@@ -107,15 +108,17 @@ class GroupTagValues extends AsyncComponent<
     });
 
     return (
-      <TableWrapper>
-        <h3>
+      <React.Fragment>
+        <Header>
           {tag.key === 'user' ? t('Affected Users') : tag.name}
-          <a
+          <BrowserExportButton
+            size="small"
+            priority="default"
             href={`/${orgId}/${group.project.slug}/issues/${group.id}/tags/${tagKey}/export/`}
-            className="btn btn-default btn-sm m-left m-right"
           >
             {t('Export Page to CSV')}
-          </a>
+          </BrowserExportButton>
+          <a />
           <DataExport
             payload={{
               queryType: ExportQueryType.IssuesByTag,
@@ -126,7 +129,7 @@ class GroupTagValues extends AsyncComponent<
               },
             }}
           />
-        </h3>
+        </Header>
         <table className="table table-striped">
           <thead>
             <tr>
@@ -143,18 +146,17 @@ class GroupTagValues extends AsyncComponent<
             {t('Note: Percentage of issue is based on events seen in the last 7 days.')}
           </small>
         </p>
-      </TableWrapper>
+      </React.Fragment>
     );
   }
 }
+const Header = styled('h3')`
+  display: flex;
+  align-items: flex-end;
+`;
 
-const TableWrapper = styled('div')`
-  .m-left {
-    margin-left: ${space(1.5)};
-  }
-  .m-right {
-    margin-right: ${space(1.5)};
-  }
+const BrowserExportButton = styled(Button)`
+  margin: 0 ${space(1.5)};
 `;
 
 const TableHeader = styled('th')<{width: number}>`
diff --git a/src/sentry/templates/sentry/emails/data-export-failure.txt b/src/sentry/templates/sentry/emails/data-export-failure.txt
index 498588f31f..389477910c 100644
--- a/src/sentry/templates/sentry/emails/data-export-failure.txt
+++ b/src/sentry/templates/sentry/emails/data-export-failure.txt
@@ -10,7 +10,7 @@ It looks like there was an error:
 
 This is what you sent us. Maybe it'll help you sort this out.
 
-    {{payload}}
+{{payload|safe}}
 
 Need a little more help?
  - https://docs.sentry.io/ (Documentation)
diff --git a/tests/js/spec/components/dataExport.spec.jsx b/tests/js/spec/components/dataExport.spec.jsx
index 7447ef8620..832337ed30 100644
--- a/tests/js/spec/components/dataExport.spec.jsx
+++ b/tests/js/spec/components/dataExport.spec.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
-import {mount} from 'sentry-test/enzyme';
+import {mountWithTheme} from 'sentry-test/enzyme';
+import Button from 'app/components/button';
 import WrappedDataExport, {DataExport} from 'app/components/dataExport';
 
 describe('DataExport', function() {
@@ -22,7 +23,7 @@ describe('DataExport', function() {
     ]);
 
   it('should not render anything for an unauthorized organization', function() {
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <WrappedDataExport payload={mockPayload} />,
       mockRouterContext(mockUnauthorizedOrg)
     );
@@ -30,12 +31,37 @@ describe('DataExport', function() {
   });
 
   it('should render the button for an authorized organization', function() {
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <WrappedDataExport payload={mockPayload} />,
       mockRouterContext(mockAuthorizedOrg)
     );
     expect(wrapper.isEmptyRender()).toBe(false);
-    expect(wrapper.text()).toBe('Export Data');
+    expect(wrapper.text()).toBe('Export All to CSV');
+  });
+
+  it('should render custom children if provided', function() {
+    const testString = 'This is an example string';
+    const wrapper = mountWithTheme(
+      <WrappedDataExport payload={mockPayload}>{testString}</WrappedDataExport>,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    expect(wrapper.text()).toBe(testString);
+  });
+
+  it('should respect the disabled prop and not be clickable', function() {
+    const url = `/organizations/${mockAuthorizedOrg.slug}/data-export/`;
+    const postDataExport = MockApiClient.addMockResponse({
+      url,
+      method: 'POST',
+      body: {id: 721},
+    });
+    const wrapper = mountWithTheme(
+      <WrappedDataExport payload={mockPayload} disabled />,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    expect(wrapper.find(Button).prop('disabled')).toBe(true);
+    wrapper.find('button').simulate('click');
+    expect(postDataExport).not.toHaveBeenCalled();
   });
 
   it('should send a request and disable itself when clicked', async function() {
@@ -45,7 +71,7 @@ describe('DataExport', function() {
       method: 'POST',
       body: {id: 721},
     });
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <WrappedDataExport payload={mockPayload} />,
       mockRouterContext(mockAuthorizedOrg)
     );
@@ -65,7 +91,7 @@ describe('DataExport', function() {
     await tick();
     wrapper.update();
     expect(wrapper.text()).toBe("We're working on it...");
-    expect(wrapper.find('button').is('[disabled]')).toBe(true);
+    expect(wrapper.find(Button).prop('disabled')).toBe(true);
     expect(wrapper.find(DataExport).state()).toEqual({
       inProgress: true,
       dataExportId: 721,
diff --git a/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
index 71cd8b6687..2156e07d6a 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupTagValues.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 
 import {initializeOrg} from 'sentry-test/initializeOrg';
-import {mount} from 'sentry-test/enzyme';
+import {mountWithTheme} from 'sentry-test/enzyme';
 import GroupTagValues from 'app/views/organizationGroupDetails/groupTagValues';
 
 describe('GroupTagValues', function() {
@@ -21,7 +21,7 @@ describe('GroupTagValues', function() {
   });
 
   it('navigates to issue details events tab with correct query params', async function() {
-    const wrapper = mount(
+    const wrapper = mountWithTheme(
       <GroupTagValues
         group={group}
         location={{query: {}}}
