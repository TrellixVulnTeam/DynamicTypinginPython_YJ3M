commit 196761905838a76e273fae734deb0b2b5facffcb
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Feb 3 16:37:11 2016 -0800

    Revert "Revert "Merge pull request #2537 from getsentry/invalid-sourcemap-location""
    
    This reverts commit 89c7d01e8934a06eeda2a5367eca462639013331.

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 3ce1ae22b5..68acc568f6 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -559,29 +559,23 @@ class SourceProcessor(object):
                 })
             elif sourcemap_idx:
                 last_state = state
-                state = find_source(sourcemap_idx, frame.lineno, frame.colno)
 
                 if is_data_uri(sourcemap_url):
                     sourcemap_label = frame.abs_path
                 else:
                     sourcemap_label = sourcemap_url
 
-                abs_path = urljoin(sourcemap_url, state.src)
-
-                logger.debug('Mapping compressed source %r to mapping in %r', frame.abs_path, abs_path)
-                source = self.get_source(abs_path, release)
-                if not source:
-                    frame.data = {
+                try:
+                    state = find_source(sourcemap_idx, frame.lineno, frame.colno)
+                except Exception:
+                    state = None
+                    all_errors.append({
+                        'type': EventError.JS_INVALID_SOURCEMAP_LOCATION,
+                        'column': frame.colno,
+                        'row': frame.lineno,
+                        'source': frame.abs_path,
                         'sourcemap': sourcemap_label,
-                    }
-                    errors = cache.get_errors(abs_path)
-                    if errors:
-                        all_errors.extend(errors)
-                    else:
-                        all_errors.append({
-                            'type': EventError.JS_MISSING_SOURCE,
-                            'url': force_bytes(abs_path, errors='replace'),
-                        })
+                    })
 
                 # Store original data in annotation
                 frame.data = {
@@ -593,45 +587,62 @@ class SourceProcessor(object):
                     'sourcemap': sourcemap_label,
                 }
 
-                # SourceMap's return zero-indexed lineno's
-                frame.lineno = state.src_line + 1
-                frame.colno = state.src_col
-                # The offending function is always the previous function in the stack
-                # Honestly, no idea what the bottom most frame is, so we're ignoring that atm
-                if last_state:
-                    frame.function = last_state.name or frame.function
-                else:
-                    frame.function = state.name or frame.function
-
-                filename = state.src
-                # special case webpack support
-                # abs_path will always be the full path with webpack:/// prefix.
-                # filename will be relative to that
-                if abs_path.startswith('webpack:'):
-                    filename = abs_path
-                    # webpack seems to use ~ to imply "relative to resolver root"
-                    # which is generally seen for third party deps
-                    # (i.e. node_modules)
-                    if '/~/' in filename:
-                        filename = '~/' + abs_path.split('/~/', 1)[-1]
+                if state is not None:
+                    abs_path = urljoin(sourcemap_url, state.src)
+
+                    logger.debug('Mapping compressed source %r to mapping in %r', frame.abs_path, abs_path)
+                    source = self.get_source(abs_path, release)
+
+                if not source:
+                    errors = cache.get_errors(abs_path)
+                    if errors:
+                        all_errors.extend(errors)
+                    else:
+                        all_errors.append({
+                            'type': EventError.JS_MISSING_SOURCE,
+                            'url': force_bytes(abs_path, errors='replace'),
+                        })
+
+                if state is not None:
+                    # SourceMap's return zero-indexed lineno's
+                    frame.lineno = state.src_line + 1
+                    frame.colno = state.src_col
+                    # The offending function is always the previous function in the stack
+                    # Honestly, no idea what the bottom most frame is, so we're ignoring that atm
+                    if last_state:
+                        frame.function = last_state.name or frame.function
                     else:
-                        filename = filename.split('webpack:///', 1)[-1]
-
-                    # As noted above, '~/' means they're coming from node_modules,
-                    # so these are not app dependencies
-                    if filename.startswith('~/'):
-                        frame.in_app = False
-                    # And conversely, local dependencies start with './'
-                    elif filename.startswith('./'):
-                        frame.in_app = True
-
-                    # We want to explicitly generate a webpack module name
-                    frame.module = generate_module(filename)
-
-                frame.abs_path = abs_path
-                frame.filename = filename
-                if not frame.module and abs_path.startswith(('http:', 'https:', 'webpack:')):
-                    frame.module = generate_module(abs_path)
+                        frame.function = state.name or frame.function
+
+                    filename = state.src
+                    # special case webpack support
+                    # abs_path will always be the full path with webpack:/// prefix.
+                    # filename will be relative to that
+                    if abs_path.startswith('webpack:'):
+                        filename = abs_path
+                        # webpack seems to use ~ to imply "relative to resolver root"
+                        # which is generally seen for third party deps
+                        # (i.e. node_modules)
+                        if '/~/' in filename:
+                            filename = '~/' + abs_path.split('/~/', 1)[-1]
+                        else:
+                            filename = filename.split('webpack:///', 1)[-1]
+
+                        # As noted above, '~/' means they're coming from node_modules,
+                        # so these are not app dependencies
+                        if filename.startswith('~/'):
+                            frame.in_app = False
+                        # And conversely, local dependencies start with './'
+                        elif filename.startswith('./'):
+                            frame.in_app = True
+
+                        # We want to explicitly generate a webpack module name
+                        frame.module = generate_module(filename)
+
+                    frame.abs_path = abs_path
+                    frame.filename = filename
+                    if not frame.module and abs_path.startswith(('http:', 'https:', 'webpack:')):
+                        frame.module = generate_module(abs_path)
 
             elif sourcemap_url:
                 frame.data = {
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index b49bce2a37..69ca64d1d7 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -16,6 +16,7 @@ class EventError(object):
     JS_INVALID_SOURCEMAP = 'js_invalid_source'
     JS_TOO_MANY_REMOTE_SOURCES = 'js_too_many_sources'
     JS_INVALID_SOURCE_ENCODING = 'js_invalid_source_encoding'
+    JS_INVALID_SOURCEMAP_LOCATION = 'js_invalid_sourcemap_location'
 
     _messages = {
         INVALID_DATA: 'Discarded invalid value for parameter \'{name}\'',
@@ -30,7 +31,8 @@ class EventError(object):
         JS_MISSING_SOURCE: 'Source code was not found for {url}',
         JS_INVALID_SOURCEMAP: 'Sourcemap was invalid or not parseable: {url}',
         JS_TOO_MANY_REMOTE_SOURCES: 'The maximum number of remote source requests was made',
-        JS_INVALID_SOURCE_ENCODING: 'Source file was not \'{value}\' encoding: {url}'
+        JS_INVALID_SOURCE_ENCODING: 'Source file was not \'{value}\' encoding: {url}',
+        JS_INVALID_SOURCEMAP_LOCATION: 'Invalid location in sourcemap: ({column}, {row})',
     }
 
     @classmethod
