commit 8915ce2573c62a28b70699210fc5c6d3be546461
Author: Mark Story <mark@sentry.io>
Date:   Wed May 27 12:21:18 2020 -0400

    feat(perf-view) Add filtering to transaction summary (#19009)
    
    Enable users to see the fastest and most recent transactions in addition
    to the slowest. This helps improve the debugging tools we have on the
    transaction summary page.
    
    I've renamed SummaryContentTable to TransactionList as there is more
    than one table on the page now, and I wanted to better isolate
    re-renders when filter choices were changed.

diff --git a/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx b/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
index 79a7f2dbee..f4cfdf9731 100644
--- a/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/discoverQuery.tsx
@@ -18,8 +18,8 @@ type Props = {
   location: Location;
   eventView: EventView;
   orgSlug: string;
-  extraQuery?: {[key: string]: any};
   keyTransactions?: boolean;
+  limit?: number;
 
   children: (props: ChildrenProps) => React.ReactNode;
 };
@@ -67,11 +67,14 @@ class DiscoverQuery extends React.Component<Props, State> {
     const thisAPIPayload = this.props.eventView.getEventsAPIPayload(this.props.location);
     const otherAPIPayload = prevProps.eventView.getEventsAPIPayload(prevProps.location);
 
-    return !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload);
+    return (
+      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||
+      prevProps.limit !== this.props.limit
+    );
   };
 
   fetchData = () => {
-    const {eventView, orgSlug, location, extraQuery, keyTransactions} = this.props;
+    const {eventView, orgSlug, location, limit, keyTransactions} = this.props;
 
     if (!eventView.isValid()) {
       return;
@@ -85,6 +88,10 @@ class DiscoverQuery extends React.Component<Props, State> {
 
     this.setState({isLoading: true, tableFetchID});
 
+    if (limit) {
+      apiPayload.per_page = limit;
+    }
+
     this.props.api
       .requestPromise(url, {
         method: 'GET',
@@ -92,7 +99,6 @@ class DiscoverQuery extends React.Component<Props, State> {
         query: {
           // marking apiPayload as any so as to not cause typescript errors
           ...(apiPayload as any),
-          ...extraQuery,
         },
       })
       .then(([data, _, jqXHR]) => {
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index 463062f5f9..53eb93fff9 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -561,6 +561,14 @@ class EventView {
     });
   }
 
+  withSorts(sorts: Sort[]): EventView {
+    const newEventView = this.clone();
+    const fields = newEventView.fields.map(field => field.field);
+    newEventView.sorts = sorts.filter(sort => fields.includes(sort.field));
+
+    return newEventView;
+  }
+
   withColumns(columns: Column[]): EventView {
     const newEventView = this.clone();
     const fields: Field[] = columns
diff --git a/src/sentry/static/sentry/app/views/performance/constants.tsx b/src/sentry/static/sentry/app/views/performance/constants.tsx
index 2b51623457..f8adf937cc 100644
--- a/src/sentry/static/sentry/app/views/performance/constants.tsx
+++ b/src/sentry/static/sentry/app/views/performance/constants.tsx
@@ -9,3 +9,23 @@ export const PERFORMANCE_TERMS: Record<string, string> = {
     'Error rate is the percentage of recorded transactions that had a known and unsuccessful status.'
   ),
 };
+
+export const TOP_TRANSACTION_LIMIT = 5;
+
+export const TOP_TRANSACTION_FILTERS = [
+  {
+    sort: {kind: 'desc', field: 'transaction.duration'},
+    value: 'slowest',
+    label: t('Slowest Transactions'),
+  },
+  {
+    sort: {kind: 'asc', field: 'transaction.duration'},
+    value: 'fastest',
+    label: t('Fastest Transactions'),
+  },
+  {
+    sort: {kind: 'desc', field: 'timestamp'},
+    value: 'recent',
+    label: t('Recent Transactions'),
+  },
+] as const;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
index b538ee8f29..af13349c17 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/content.tsx
@@ -9,13 +9,12 @@ import {getParams} from 'app/components/organizations/globalSelectionHeader/getP
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import space from 'app/styles/space';
 import {generateQueryWithTag} from 'app/utils';
-import DiscoverQuery from 'app/utils/discover/discoverQuery';
 import EventView from 'app/utils/discover/eventView';
 import {ContentBox, HeaderBox, Main, Side} from 'app/utils/discover/styles';
 import Tags from 'app/views/eventsV2/tags';
 import SearchBar from 'app/views/events/searchBar';
 
-import SummaryContentTable from './table';
+import TransactionList from './transactionList';
 import Breadcrumb from './breadcrumb';
 import UserStats from './userStats';
 import KeyTransactionButton from './keyTransactionButton';
@@ -23,8 +22,6 @@ import TransactionSummaryCharts from './charts';
 import RelatedIssues from './relatedIssues';
 import SidebarCharts from './sidebarCharts';
 
-const TOP_SLOWEST_TRANSACTIONS = 5;
-
 type Props = {
   location: Location;
   eventView: EventView;
@@ -107,24 +104,11 @@ class SummaryContent extends React.Component<Props> {
               eventView={eventView}
               totalValues={totalValues}
             />
-            <DiscoverQuery
+            <TransactionList
+              organization={organization}
               location={location}
               eventView={eventView}
-              orgSlug={organization.slug}
-              extraQuery={{
-                per_page: TOP_SLOWEST_TRANSACTIONS,
-              }}
-            >
-              {({isLoading, tableData}) => (
-                <SummaryContentTable
-                  organization={organization}
-                  location={location}
-                  eventView={eventView}
-                  tableData={tableData}
-                  isLoading={isLoading}
-                />
-              )}
-            </DiscoverQuery>
+            />
             <RelatedIssues
               organization={organization}
               location={location}
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
index f2c7c93687..be34196560 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/index.tsx
@@ -187,7 +187,6 @@ function generateSummaryEventView(
       version: 2,
       name: transactionName,
       fields: ['id', 'user', 'transaction.duration', 'timestamp'],
-      orderby: '-transaction.duration',
       query: stringifyQueryObject(conditions),
       projects: [],
     },
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
similarity index 63%
rename from src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
rename to src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
index 6b0a523a1b..99c0c680f3 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/transactionList.tsx
@@ -1,36 +1,62 @@
 import React from 'react';
 import {Location} from 'history';
 import styled from '@emotion/styled';
+import {browserHistory} from 'react-router';
 
 import {Organization} from 'app/types';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import Button from 'app/components/button';
-import {SectionHeading} from 'app/components/charts/styles';
+import DropdownControl, {DropdownItem} from 'app/components/dropdownControl';
 import PanelTable from 'app/components/panels/panelTable';
 import Link from 'app/components/links/link';
 import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
-import EventView, {isFieldSortable, MetaType} from 'app/utils/discover/eventView';
+import EventView, {MetaType} from 'app/utils/discover/eventView';
 import SortLink from 'app/components/gridEditable/sortLink';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {getAggregateAlias} from 'app/utils/discover/fields';
 import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/discover/urls';
-import {tokenizeSearch} from 'app/utils/tokenizeSearch';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {decodeScalar} from 'app/utils/queryString';
+import DiscoverQuery from 'app/utils/discover/discoverQuery';
+import {
+  TOP_TRANSACTION_LIMIT,
+  TOP_TRANSACTION_FILTERS,
+} from 'app/views/performance/constants';
 
 import {GridBodyCell, GridBodyCellNumber, GridHeadCell} from '../styles';
 
-type Props = {
+type WrapperProps = {
   eventView: EventView;
   location: Location;
   organization: Organization;
-
-  isLoading: boolean;
-  tableData: TableData | null | undefined;
 };
 
-class SummaryContentTable extends React.Component<Props> {
+class TransactionList extends React.PureComponent<WrapperProps> {
+  getTransactionSort(location: Location) {
+    const urlParam = decodeScalar(location.query.showTransactions) || 'slowest';
+    const option =
+      TOP_TRANSACTION_FILTERS.find(opt => opt.value === urlParam) ||
+      TOP_TRANSACTION_FILTERS[0];
+    return option;
+  }
+
+  handleTransactionFilterChange = (value: string) => {
+    const {location, organization} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'performance_views.summary.filter_transactions',
+      eventName: 'Performance Views: Filter transactions table',
+      organization_id: parseInt(organization.id, 10),
+      value,
+    });
+    const target = {
+      pathname: location.pathname,
+      query: {...location.query, showTransactions: value},
+    };
+    browserHistory.push(target);
+  };
+
   handleDiscoverViewClick = () => {
     const {organization} = this.props;
     trackAnalyticsEvent({
@@ -40,6 +66,72 @@ class SummaryContentTable extends React.Component<Props> {
     });
   };
 
+  render() {
+    const {eventView, location, organization} = this.props;
+    const activeFilter = this.getTransactionSort(location);
+    const sortedEventView = eventView.withSorts([activeFilter.sort]);
+
+    return (
+      <React.Fragment>
+        <Header>
+          <DropdownControl
+            data-test-id="filter-transactions"
+            label={activeFilter.label}
+            buttonProps={{prefix: t('Filter'), size: 'small'}}
+          >
+            {TOP_TRANSACTION_FILTERS.map(({value, label}) => (
+              <DropdownItem
+                key={value}
+                onSelect={this.handleTransactionFilterChange}
+                eventKey={value}
+                isActive={value === activeFilter.value}
+              >
+                {label}
+              </DropdownItem>
+            ))}
+          </DropdownControl>
+          <HeaderButtonContainer>
+            <Button
+              onClick={this.handleDiscoverViewClick}
+              to={sortedEventView.getResultsViewUrlTarget(organization.slug)}
+              size="small"
+              data-test-id="discover-open"
+            >
+              {t('Open in Discover')}
+            </Button>
+          </HeaderButtonContainer>
+        </Header>
+        <DiscoverQuery
+          location={location}
+          eventView={sortedEventView}
+          orgSlug={organization.slug}
+          limit={TOP_TRANSACTION_LIMIT}
+        >
+          {({isLoading, tableData}) => (
+            <TransactionTable
+              organization={organization}
+              location={location}
+              eventView={eventView}
+              tableData={tableData}
+              isLoading={isLoading}
+            />
+          )}
+        </DiscoverQuery>
+      </React.Fragment>
+    );
+  }
+}
+
+type Props = {
+  eventView: EventView;
+  location: Location;
+  organization: Organization;
+
+  isLoading: boolean;
+  tableData: TableData | null | undefined;
+};
+
+class TransactionTable extends React.PureComponent<Props> {
   handleViewDetailsClick = () => {
     const {organization} = this.props;
     trackAnalyticsEvent({
@@ -59,17 +151,13 @@ class SummaryContentTable extends React.Component<Props> {
     return columnOrder.map((column, index) => (
       <HeaderCell column={column} tableMeta={tableMeta} key={index}>
         {({align}) => {
-          const field = {field: column.name, width: column.width};
-          const currentSort = eventView.sortForField(field, tableMeta);
-          const canSort = isFieldSortable(field, tableMeta);
-
           return (
             <GridHeadCell>
               <SortLink
                 align={align}
                 title={column.name}
-                direction={currentSort ? currentSort.kind : undefined}
-                canSort={canSort}
+                direction={undefined}
+                canSort={false}
                 generateSortLink={generateSortLink}
               />
             </GridHeadCell>
@@ -150,31 +238,13 @@ class SummaryContentTable extends React.Component<Props> {
   }
 
   render() {
-    const {eventView, organization, isLoading, tableData} = this.props;
+    const {isLoading, tableData} = this.props;
 
-    let title = t('Slowest Transactions');
-    const parsed = tokenizeSearch(eventView.query);
-    if (parsed['transaction.duration']) {
-      title = t('Requests %s and %s in duration', ...parsed['transaction.duration']);
-    }
     const hasResults =
       tableData && tableData.data && tableData.meta && tableData.data.length > 0;
 
     return (
       <React.Fragment>
-        <Header>
-          <SectionHeading>{title}</SectionHeading>
-          <HeaderButtonContainer>
-            <Button
-              onClick={this.handleDiscoverViewClick}
-              to={eventView.getResultsViewUrlTarget(organization.slug)}
-              size="small"
-              data-test-id="discover-open"
-            >
-              {t('Open in Discover')}
-            </Button>
-          </HeaderButtonContainer>
-        </Header>
         <PanelTable
           isEmpty={!hasResults}
           emptyMessage={t('No transactions found')}
@@ -189,16 +259,16 @@ class SummaryContentTable extends React.Component<Props> {
   }
 }
 
-export const Header = styled('div')`
+const Header = styled('div')`
   display: flex;
   justify-content: space-between;
   align-items: center;
   margin: 0 0 ${space(1)} 0;
 `;
 
-export const HeaderButtonContainer = styled('div')`
+const HeaderButtonContainer = styled('div')`
   display: flex;
   flex-direction: row;
 `;
 
-export default SummaryContentTable;
+export default TransactionList;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
index 8ae032bed7..3b3a61612f 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/userStats.tsx
@@ -65,7 +65,7 @@ class UserStats extends React.Component<Props> {
         eventView={eventView}
         orgSlug={organization.slug}
         location={location}
-        extraQuery={{per_page: 1}}
+        limit={1}
       >
         {({tableData, isLoading}) => {
           const hasResults =
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index 10a155a51a..8f2957a516 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -1954,6 +1954,38 @@ describe('EventView.sortOnField()', function() {
   });
 });
 
+describe('EventView.withSorts()', function() {
+  it('returns a clone', function() {
+    const eventView = new EventView({
+      fields: [{field: 'event.type'}],
+    });
+    const updated = eventView.withSorts([{kind: 'desc', field: 'event.type'}]);
+    expect(updated.sorts).not.toEqual(eventView.sorts);
+  });
+
+  it('only accepts sorting on fields in the view', function() {
+    const eventView = new EventView({
+      fields: [{field: 'event.type'}],
+    });
+    const updated = eventView.withSorts([
+      {kind: 'desc', field: 'event.type'},
+      {kind: 'asc', field: 'unknown'},
+    ]);
+    expect(updated.sorts).toEqual([{kind: 'desc', field: 'event.type'}]);
+  });
+
+  it('accepts aggregate field sorts', function() {
+    const eventView = new EventView({
+      fields: [{field: 'p50()'}],
+    });
+    const updated = eventView.withSorts([
+      {kind: 'desc', field: 'p50()'},
+      {kind: 'asc', field: 'unknown'},
+    ]);
+    expect(updated.sorts).toEqual([{kind: 'desc', field: 'p50()'}]);
+  });
+});
+
 describe('EventView.isEqualTo()', function() {
   it('should be true when equal', function() {
     const state = {
@@ -2072,7 +2104,7 @@ describe('EventView.getResultsViewUrlTarget()', function() {
   });
 });
 
-describe('EventView.getGlobalSelection', function() {
+describe('EventView.getGlobalSelection()', function() {
   it('return default global selection', function() {
     const eventView = new EventView({});
 
@@ -2100,7 +2132,7 @@ describe('EventView.getGlobalSelection', function() {
   });
 });
 
-describe('EventView.generateBlankQueryStringObject', function() {
+describe('EventView.generateBlankQueryStringObject()', function() {
   it('should return blank values', function() {
     const eventView = new EventView({});
 
@@ -2121,7 +2153,7 @@ describe('EventView.generateBlankQueryStringObject', function() {
   });
 });
 
-describe('EventView.getYAxisOptions', function() {
+describe('EventView.getYAxisOptions()', function() {
   const state = {
     fields: [],
     sorts: [],
@@ -2182,7 +2214,7 @@ describe('EventView.getYAxisOptions', function() {
   });
 });
 
-describe('EventView.getYAxis', function() {
+describe('EventView.getYAxis()', function() {
   const state = {
     fields: [],
     sorts: [],
diff --git a/tests/js/spec/views/performance/transactionSummary.spec.jsx b/tests/js/spec/views/performance/transactionSummary.spec.jsx
index 5eb4883959..0b267c85c4 100644
--- a/tests/js/spec/views/performance/transactionSummary.spec.jsx
+++ b/tests/js/spec/views/performance/transactionSummary.spec.jsx
@@ -152,6 +152,9 @@ describe('Performance > TransactionSummary', function() {
 
     // Ensure open issues button exists.
     expect(wrapper.find('a[data-test-id="issues-open"]')).toHaveLength(1);
+
+    // Ensure transaction filter button exists
+    expect(wrapper.find('[data-test-id="filter-transactions"]')).toHaveLength(1);
   });
 
   it('triggers a navigation on search', async function() {
@@ -208,4 +211,36 @@ describe('Performance > TransactionSummary', function() {
     // Ensure request was made.
     expect(mockUpdate).toHaveBeenCalled();
   });
+
+  it('triggers a navigation on transaction filter', async function() {
+    const initialData = initializeData();
+    const wrapper = mountWithTheme(
+      <TransactionSummary
+        organization={initialData.organization}
+        location={initialData.router.location}
+      />,
+      initialData.routerContext
+    );
+    await tick();
+    wrapper.update();
+
+    // Open the transaction filter dropdown
+    wrapper.find('[data-test-id="filter-transactions"] button').simulate('click');
+
+    // Click the second item (fastest transactions)
+    wrapper
+      .find('[data-test-id="filter-transactions"] DropdownItem span')
+      .at(1)
+      .simulate('click');
+
+    // Check the navigation.
+    expect(browserHistory.push).toHaveBeenCalledWith({
+      pathname: undefined,
+      query: {
+        transaction: '/performance',
+        project: 1,
+        showTransactions: 'fastest',
+      },
+    });
+  });
 });
