commit c65803c884557690a208595cf09c8b9801beedf8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Apr 4 12:59:55 2018 -0700

    feat(ui): Add "set as default" button to environment list (#7815)
    
    * Remove "Default Environment" settings from "Project General Settings"
    * fix + allow default env to be empty string

diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 81caa1fb01..7b9dd48cfa 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -6,16 +6,21 @@ export function update(api, params) {
   ProjectActions.update(params.projectId, params.data);
 
   let endpoint = `/projects/${params.orgId}/${params.projectId}/`;
-  api.request(endpoint, {
-    method: 'PUT',
-    data: params.data,
-    success: data => {
-      ProjectActions.updateSuccess(data);
-    },
-    error: data => {
-      ProjectActions.updateError(data);
-    },
-  });
+  return api
+    .requestPromise(endpoint, {
+      method: 'PUT',
+      data: params.data,
+    })
+    .then(
+      data => {
+        ProjectActions.updateSuccess(data);
+        return data;
+      },
+      err => {
+        ProjectActions.updateError(err);
+        throw err;
+      }
+    );
 }
 
 export function loadStats(api, params) {
diff --git a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
index 1ae09ca001..816f62ab66 100644
--- a/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/data/forms/projectGeneralSettings.jsx
@@ -79,13 +79,6 @@ export const fields = {
     help: t('Choose a custom prefix for emails from this project'),
   },
 
-  defaultEnvironment: {
-    name: 'defaultEnvironment',
-    type: 'string',
-    label: t('Default Environment'),
-    placeholder: t('production'),
-    help: t('The default selected environment when viewing issues'),
-  },
   resolveAge: {
     name: 'resolveAge',
     type: 'range',
diff --git a/src/sentry/static/sentry/app/utils/withLatestContext.jsx b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
index f9ac775465..5c24afc5ee 100644
--- a/src/sentry/static/sentry/app/utils/withLatestContext.jsx
+++ b/src/sentry/static/sentry/app/utils/withLatestContext.jsx
@@ -32,6 +32,8 @@ const withLatestContext = WrappedComponent =>
           organization ||
           (organizations && organizations.length ? organizations[0] : null);
 
+        // TODO(billy): Below is going to be wrong if component is passed project, it will override
+        // project from `latestContext`
         return (
           <WrappedComponent
             organizations={organizations}
diff --git a/src/sentry/static/sentry/app/views/projectEnvironments.jsx b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
index 7eaaa6313b..2959c2e00a 100644
--- a/src/sentry/static/sentry/app/views/projectEnvironments.jsx
+++ b/src/sentry/static/sentry/app/views/projectEnvironments.jsx
@@ -1,25 +1,35 @@
-import React from 'react';
+import {Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
+import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
+import styled from 'react-emotion';
 
-import EnvironmentStore from '../stores/environmentStore';
-import {Panel, PanelHeader, PanelBody, PanelItem} from '../components/panels';
-import EmptyMessage from './settings/components/emptyMessage';
-import {t} from '../locale';
-import Button from '../components/buttons/button';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import ListLink from '../components/listLink';
-import ApiMixin from '../mixins/apiMixin';
-import recreateRoute from '../utils/recreateRoute';
-
-import LoadingIndicator from '../components/loadingIndicator';
-import IndicatorStore from '../stores/indicatorStore';
-
+import {ALL_ENVIRONMENTS_KEY} from '../constants';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from '../actionCreators/indicator';
 import {
   loadActiveEnvironments,
   loadHiddenEnvironments,
 } from '../actionCreators/environments';
+import {t, tct} from '../locale';
+import {update} from '../actionCreators/projects';
+import {Panel, PanelHeader, PanelBody, PanelItem} from '../components/panels';
+import ApiMixin from '../mixins/apiMixin';
+import Button from '../components/buttons/button';
+import EmptyMessage from './settings/components/emptyMessage';
+import EnvironmentStore from '../stores/environmentStore';
+import InlineSvg from '../components/inlineSvg';
+import ListLink from '../components/listLink';
+import LoadingIndicator from '../components/loadingIndicator';
+import SentryTypes from '../proptypes';
+import SettingsPageHeader from './settings/components/settingsPageHeader';
+import Tag from './settings/components/tag';
+import Tooltip from '../components/tooltip';
+import recreateRoute from '../utils/recreateRoute';
 
 const ProjectEnvironments = createReactClass({
   propTypes: {
@@ -37,6 +47,7 @@ const ProjectEnvironments = createReactClass({
       : EnvironmentStore.getActive();
 
     return {
+      project: null,
       environments,
       isHidden,
     };
@@ -46,6 +57,9 @@ const ProjectEnvironments = createReactClass({
     if (this.state.environments === null) {
       this.fetchData(this.state.isHidden);
     }
+
+    // Fetch project details instead of using project context to guarantee we have latest project details
+    this.fetchProjectDetails();
   },
 
   componentWillReceiveProps(nextProps) {
@@ -53,6 +67,7 @@ const ProjectEnvironments = createReactClass({
     const environments = isHidden
       ? EnvironmentStore.getHidden()
       : EnvironmentStore.getActive();
+
     this.setState(
       {
         isHidden,
@@ -69,6 +84,7 @@ const ProjectEnvironments = createReactClass({
   refetchAll() {
     this.fetchData(true);
     this.fetchData(false);
+    this.fetchProjectDetails();
   },
 
   fetchData(hidden) {
@@ -84,6 +100,15 @@ const ProjectEnvironments = createReactClass({
     });
   },
 
+  fetchProjectDetails() {
+    const {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/`, {
+      success: project => {
+        this.setState({project});
+      },
+    });
+  },
+
   onEnvironmentsChange() {
     const {isHidden} = this.state;
 
@@ -94,6 +119,7 @@ const ProjectEnvironments = createReactClass({
     });
   },
 
+  // Toggle visibility of environment
   toggleEnv(env, shouldHide) {
     const {orgId, projectId} = this.props.params;
 
@@ -106,16 +132,67 @@ const ProjectEnvironments = createReactClass({
           isHidden: shouldHide,
         },
         success: e => {
-          IndicatorStore.addSuccess(t('Update successful'));
+          addSuccessMessage(
+            tct('Updated [environment]', {
+              environment: env.displayName,
+            })
+          );
         },
         error: err => {
-          IndicatorStore.addError(t('An error occurred'));
+          addSuccessMessage(
+            tct('Unable to update [environment]', {
+              environment: env.displayName,
+            })
+          );
         },
         complete: this.refetchAll,
       }
     );
   },
 
+  // Change "Default Environment"
+  handleSetAsDefault(env) {
+    const data = {defaultEnvironment: env.name};
+    const oldProject = this.state.project;
+
+    // Optimistically update state
+    this.setState(state => ({
+      ...state,
+      project: {
+        ...state.project,
+        ...data,
+      },
+    }));
+
+    addLoadingMessage();
+
+    // Update project details
+    update(this.api, {
+      ...this.props.params,
+      data,
+    }).then(
+      () => {
+        addSuccessMessage(
+          tct('Changed default environment to [environment]', {
+            environment: env.displayName,
+          })
+        );
+      },
+      err => {
+        // Error occurred, revert project state
+        this.setState(state => ({
+          ...state,
+          project: oldProject,
+        }));
+        addErrorMessage(
+          tct('Unable to change default environment to [environment]', {
+            environment: env.displayName,
+          })
+        );
+      }
+    );
+  },
+
   renderEmpty() {
     const {isHidden} = this.state;
     const message = isHidden
@@ -124,19 +201,107 @@ const ProjectEnvironments = createReactClass({
     return <EmptyMessage>{message}</EmptyMessage>;
   },
 
+  /**
+   * Renders rows for "system" environments:
+   * - "All Environments"
+   * - "No Environment"
+   *
+   */
+  renderSystemRows() {
+    // Not available in "Hidden" tab
+    if (this.state.isHidden) return null;
+    let {project} = this.state;
+
+    let isAllEnvironmentsDefault =
+      project && project.defaultEnvironment === ALL_ENVIRONMENTS_KEY;
+
+    return (
+      <EnvironmentRow
+        name={ALL_ENVIRONMENTS_KEY}
+        environment={{
+          id: ALL_ENVIRONMENTS_KEY,
+          displayName: t('All Environments'),
+          name: ALL_ENVIRONMENTS_KEY,
+        }}
+        hideName
+        isDefault={isAllEnvironmentsDefault}
+        shouldShowSetDefault={!isAllEnvironmentsDefault && !!project}
+        onSetAsDefault={this.handleSetAsDefault}
+      />
+    );
+  },
+
+  // Renders current default environment IF it is not a valid environment
+  renderInvalidDefaultEnvironment() {
+    // Not available in "Hidden" tab
+    if (this.state.isHidden) return null;
+    let {environments, project} = this.state;
+    // Default environment that is not a valid environment
+    let isAllEnvironmentsDefault =
+      project && project.defaultEnvironment === ALL_ENVIRONMENTS_KEY;
+
+    let hasOtherDefaultEnvironment =
+      project &&
+      environments &&
+      !isAllEnvironmentsDefault &&
+      !environments.find(({name}) => name === project.defaultEnvironment);
+
+    if (!hasOtherDefaultEnvironment) return null;
+
+    return (
+      <EnvironmentRow
+        name={project.defaultEnvironment}
+        environment={{
+          id: project.defaultEnvironment,
+          displayName: (
+            <React.Fragment>
+              <Tooltip title={t('This is not an active environment')}>
+                <span css={{marginRight: 8}}>
+                  <InvalidDefaultEnvironmentIcon />
+                </span>
+              </Tooltip>
+              <code>{project.defaultEnvironment}</code>
+            </React.Fragment>
+          ),
+          name: project.defaultEnvironment,
+        }}
+        hideName
+        isDefault
+        shouldShowSetDefault={false}
+        onSetAsDefault={this.handleSetAsDefault}
+      />
+    );
+  },
+
   renderEnvironmentList(envs) {
-    const {isHidden} = this.state;
+    const {project, isHidden} = this.state;
     const buttonText = isHidden ? t('Show') : t('Hide');
-    return envs.map(env => (
-      <PanelItem key={env.id} align="center" justify="space-between">
-        <span>
-          {env.displayName} {env.name && <code>{env.name}</code>}
-        </span>
-        <Button size="xsmall" onClick={() => this.toggleEnv(env, !isHidden)}>
-          {buttonText}
-        </Button>
-      </PanelItem>
-    ));
+
+    return (
+      <React.Fragment>
+        {this.renderSystemRows()}
+        {envs.map(env => {
+          const isDefault = project && env.name === project.defaultEnvironment;
+          // Don't show "Set as default" button until project details are loaded
+          const shouldShowSetDefault = !isHidden && !isDefault && !!project;
+          return (
+            <EnvironmentRow
+              key={env.id}
+              name={env.name}
+              environment={env}
+              isDefault={isDefault}
+              isHidden={isHidden}
+              shouldShowSetDefault={shouldShowSetDefault}
+              onSetAsDefault={this.handleSetAsDefault}
+              onHide={this.toggleEnv}
+              actionText={buttonText}
+              shouldShowAction
+            />
+          );
+        })}
+        {this.renderInvalidDefaultEnvironment()}
+      </React.Fragment>
+    );
   },
 
   render() {
@@ -171,10 +336,12 @@ const ProjectEnvironments = createReactClass({
             </ul>
           }
         />
+
         <Panel>
           <PanelHeader>
             {this.state.isHidden ? t('Hidden') : t('Active Environments')}
           </PanelHeader>
+
           <PanelBody>
             {environments.length
               ? this.renderEnvironmentList(environments)
@@ -186,4 +353,67 @@ const ProjectEnvironments = createReactClass({
   },
 });
 
+class EnvironmentRow extends React.Component {
+  static propTypes = {
+    environment: SentryTypes.Environment,
+    isDefault: PropTypes.bool,
+    isHidden: PropTypes.bool,
+    hideName: PropTypes.bool,
+    shouldShowSetDefault: PropTypes.bool,
+    shouldShowAction: PropTypes.bool,
+    actionText: PropTypes.string,
+    onSetAsDefault: PropTypes.func,
+    onHide: PropTypes.func,
+  };
+
+  render() {
+    let {
+      environment,
+      shouldShowSetDefault,
+      shouldShowAction,
+      hideName,
+      isDefault,
+      isHidden,
+      actionText,
+    } = this.props;
+
+    return (
+      <PanelItem align="center" justify="space-between">
+        <Flex align="center">
+          {environment.displayName}{' '}
+          {!hideName && environment.name && <code>{environment.name}</code>}
+          {isDefault && <Tag priority="success">{t('Default')}</Tag>}
+        </Flex>
+        <div>
+          {shouldShowSetDefault && (
+            <EnvironmentButton
+              size="xsmall"
+              onClick={() => this.props.onSetAsDefault(environment)}
+            >
+              {t('Set as default')}
+            </EnvironmentButton>
+          )}
+
+          {shouldShowAction && (
+            <EnvironmentButton
+              size="xsmall"
+              onClick={() => this.props.onHide(environment, !isHidden)}
+            >
+              {actionText}
+            </EnvironmentButton>
+          )}
+        </div>
+      </PanelItem>
+    );
+  }
+}
+const EnvironmentButton = styled(Button)`
+  margin-left: 4px;
+`;
+
+const InvalidDefaultEnvironmentIcon = styled(props => (
+  <InlineSvg src="icon-circle-exclamation" {...props} />
+))`
+  color: ${p => p.theme.error};
+`;
 export default ProjectEnvironments;
diff --git a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
index 4bf6a9c112..22be1bcc99 100644
--- a/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectGeneralSettings.jsx
@@ -258,7 +258,7 @@ export default class ProjectGeneralSettings extends AsyncView {
           <JsonForm
             {...jsonFormProps}
             title={t('Event Settings')}
-            fields={[fields.defaultEnvironment, fields.resolveAge]}
+            fields={[fields.resolveAge]}
             renderFooter={() => <AutoResolveFooter />}
           />
 
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 8c99cc7580..ccb13470b5 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -176,8 +176,8 @@ const ProjectContext = createReactClass({
           // If an environment is specified in the query string, load it instead of default
           const queryEnv = location.query.environment;
           // The default environment cannot be "" (No Environment)
-          const defaultEnv = project.defaultEnv || null;
-          const envName = typeof queryEnv === 'undefined' ? defaultEnv : queryEnv;
+          const {defaultEnvironment} = project;
+          const envName = typeof queryEnv === 'undefined' ? defaultEnvironment : queryEnv;
           loadEnvironments(envs, envName);
         },
         () => {
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.jsx b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
index ca41bb480d..27ea825643 100644
--- a/src/sentry/static/sentry/app/views/settings/components/tag.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
@@ -4,7 +4,7 @@ import PropTypes from 'prop-types';
 
 const TagTextStyled = styled('span')`
   display: inline;
-  padding: 0.3em 0.6em 0.4em;
+  padding: 0.4em 0.6em;
   font-size: 75%;
   font-weight: bold;
   line-height: 1;
diff --git a/tests/js/spec/views/__snapshots__/projectEnvironments.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectEnvironments.spec.jsx.snap
index 4277d40f10..e0511d9750 100644
--- a/tests/js/spec/views/__snapshots__/projectEnvironments.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectEnvironments.spec.jsx.snap
@@ -76,7 +76,7 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
         }
       >
         <div
-          className="css-foidy-Wrapper css-17jmgia0"
+          className="css-t5gfr9-Wrapper css-17jmgia0"
         >
           <Flex
             align="center"
@@ -162,25 +162,25 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
     <Panel>
       <StyledPanel>
         <div
-          className="css-wfa8ap-StyledPanel css-5bw71w0"
+          className="css-17bqt4b-StyledPanel css-5bw71w0"
         >
           <PanelHeader>
             <StyledPanelHeader>
               <Component
-                className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
               >
                 <Flex
                   align="center"
-                  className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                  className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
                   justify="space-between"
                 >
                   <Base
                     align="center"
-                    className="css-zott9u0 css-1qscict"
+                    className="css-zott9u0 css-1at3g5b"
                     justify="space-between"
                   >
                     <div
-                      className="css-zott9u0 css-1qscict"
+                      className="css-zott9u0 css-1at3g5b"
                       is={null}
                     >
                       Active Environments
@@ -201,7 +201,7 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
               <EmptyMessage>
                 <Wrapper>
                   <div
-                    className="css-1v9jb7c-Wrapper css-toum0v0"
+                    className="css-bq6a85-Wrapper css-toum0v0"
                   >
                     <div
                       className="ref-message"
@@ -220,7 +220,7 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
 </ProjectEnvironments>
 `;
 
-exports[`ProjectEnvironments render active renders environment list 1`] = `
+exports[`ProjectEnvironments render active renders environment list and sets staging as default env 1`] = `
 <ProjectEnvironments
   params={
     Object {
@@ -296,7 +296,7 @@ exports[`ProjectEnvironments render active renders environment list 1`] = `
         }
       >
         <div
-          className="css-foidy-Wrapper css-17jmgia0"
+          className="css-t5gfr9-Wrapper css-17jmgia0"
         >
           <Flex
             align="center"
@@ -382,25 +382,25 @@ exports[`ProjectEnvironments render active renders environment list 1`] = `
     <Panel>
       <StyledPanel>
         <div
-          className="css-wfa8ap-StyledPanel css-5bw71w0"
+          className="css-17bqt4b-StyledPanel css-5bw71w0"
         >
           <PanelHeader>
             <StyledPanelHeader>
               <Component
-                className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
               >
                 <Flex
                   align="center"
-                  className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                  className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
                   justify="space-between"
                 >
                   <Base
                     align="center"
-                    className="css-zott9u0 css-1qscict"
+                    className="css-zott9u0 css-1at3g5b"
                     justify="space-between"
                   >
                     <div
-                      className="css-zott9u0 css-1qscict"
+                      className="css-zott9u0 css-1at3g5b"
                       is={null}
                     >
                       Active Environments
@@ -418,128 +418,346 @@ exports[`ProjectEnvironments render active renders environment list 1`] = `
             <div
               className=""
             >
-              <PanelItem
-                align="center"
-                justify="space-between"
+              <EnvironmentRow
+                environment={
+                  Object {
+                    "displayName": "All Environments",
+                    "id": "__all_environments__",
+                    "name": "__all_environments__",
+                  }
+                }
+                hideName={true}
+                isDefault={false}
+                name="__all_environments__"
+                onSetAsDefault={[Function]}
+                shouldShowSetDefault={true}
+              >
+                <PanelItem
+                  align="center"
+                  justify="space-between"
+                  p={2}
+                >
+                  <StyledPanelItem
+                    align="center"
+                    justify="space-between"
+                    p={2}
+                  >
+                    <Base
+                      align="center"
+                      className="css-qcergp-StyledPanelItem css-q9h14u0"
+                      justify="space-between"
+                      p={2}
+                    >
+                      <div
+                        className="css-qcergp-StyledPanelItem css-q9h14u0"
+                        is={null}
+                      >
+                        <Flex
+                          align="center"
+                        >
+                          <Base
+                            align="center"
+                            className="css-5ipae5"
+                          >
+                            <div
+                              className="css-5ipae5"
+                              is={null}
+                            >
+                              All Environments
+                               
+                            </div>
+                          </Base>
+                        </Flex>
+                        <div>
+                          <EnvironmentButton
+                            onClick={[Function]}
+                            size="xsmall"
+                          >
+                            <Button
+                              className="css-10adnmx-EnvironmentButton css-d1dasp0"
+                              disabled={false}
+                              onClick={[Function]}
+                              size="xsmall"
+                            >
+                              <button
+                                className="css-10adnmx-EnvironmentButton css-d1dasp0 button button-default button-xs"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <Flex
+                                  align="center"
+                                  className="button-label"
+                                >
+                                  <Base
+                                    align="center"
+                                    className="button-label css-5ipae5"
+                                  >
+                                    <div
+                                      className="button-label css-5ipae5"
+                                      is={null}
+                                    >
+                                      Set as default
+                                    </div>
+                                  </Base>
+                                </Flex>
+                              </button>
+                            </Button>
+                          </EnvironmentButton>
+                        </div>
+                      </div>
+                    </Base>
+                  </StyledPanelItem>
+                </PanelItem>
+              </EnvironmentRow>
+              <EnvironmentRow
+                actionText="Hide"
+                environment={
+                  Object {
+                    "displayName": "Production",
+                    "id": "1",
+                    "name": "production",
+                    "urlRoutingName": "production",
+                  }
+                }
+                isDefault={false}
+                isHidden={false}
                 key="1"
-                p={2}
+                name="production"
+                onHide={[Function]}
+                onSetAsDefault={[Function]}
+                shouldShowAction={true}
+                shouldShowSetDefault={true}
               >
-                <StyledPanelItem
+                <PanelItem
                   align="center"
                   justify="space-between"
                   p={2}
                 >
-                  <Base
+                  <StyledPanelItem
                     align="center"
-                    className="css-1eebujh-StyledPanelItem css-q9h14u0"
                     justify="space-between"
                     p={2}
                   >
-                    <div
-                      className="css-1eebujh-StyledPanelItem css-q9h14u0"
-                      is={null}
+                    <Base
+                      align="center"
+                      className="css-qcergp-StyledPanelItem css-q9h14u0"
+                      justify="space-between"
+                      p={2}
                     >
-                      <span>
-                        Production
-                         
-                        <code>
-                          production
-                        </code>
-                      </span>
-                      <Button
-                        disabled={false}
-                        onClick={[Function]}
-                        size="xsmall"
+                      <div
+                        className="css-qcergp-StyledPanelItem css-q9h14u0"
+                        is={null}
                       >
-                        <button
-                          className="button button-default button-xs"
-                          disabled={false}
-                          onClick={[Function]}
-                          role="button"
+                        <Flex
+                          align="center"
                         >
-                          <Flex
+                          <Base
                             align="center"
-                            className="button-label"
+                            className="css-5ipae5"
                           >
-                            <Base
-                              align="center"
-                              className="button-label css-5ipae5"
+                            <div
+                              className="css-5ipae5"
+                              is={null}
                             >
-                              <div
-                                className="button-label css-5ipae5"
-                                is={null}
+                              Production
+                               
+                              <code>
+                                production
+                              </code>
+                            </div>
+                          </Base>
+                        </Flex>
+                        <div>
+                          <EnvironmentButton
+                            onClick={[Function]}
+                            size="xsmall"
+                          >
+                            <Button
+                              className="css-10adnmx-EnvironmentButton css-d1dasp0"
+                              disabled={false}
+                              onClick={[Function]}
+                              size="xsmall"
+                            >
+                              <button
+                                className="css-10adnmx-EnvironmentButton css-d1dasp0 button button-default button-xs"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
                               >
-                                Hide
-                              </div>
-                            </Base>
-                          </Flex>
-                        </button>
-                      </Button>
-                    </div>
-                  </Base>
-                </StyledPanelItem>
-              </PanelItem>
-              <PanelItem
-                align="center"
-                justify="space-between"
+                                <Flex
+                                  align="center"
+                                  className="button-label"
+                                >
+                                  <Base
+                                    align="center"
+                                    className="button-label css-5ipae5"
+                                  >
+                                    <div
+                                      className="button-label css-5ipae5"
+                                      is={null}
+                                    >
+                                      Set as default
+                                    </div>
+                                  </Base>
+                                </Flex>
+                              </button>
+                            </Button>
+                          </EnvironmentButton>
+                          <EnvironmentButton
+                            onClick={[Function]}
+                            size="xsmall"
+                          >
+                            <Button
+                              className="css-10adnmx-EnvironmentButton css-d1dasp0"
+                              disabled={false}
+                              onClick={[Function]}
+                              size="xsmall"
+                            >
+                              <button
+                                className="css-10adnmx-EnvironmentButton css-d1dasp0 button button-default button-xs"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <Flex
+                                  align="center"
+                                  className="button-label"
+                                >
+                                  <Base
+                                    align="center"
+                                    className="button-label css-5ipae5"
+                                  >
+                                    <div
+                                      className="button-label css-5ipae5"
+                                      is={null}
+                                    >
+                                      Hide
+                                    </div>
+                                  </Base>
+                                </Flex>
+                              </button>
+                            </Button>
+                          </EnvironmentButton>
+                        </div>
+                      </div>
+                    </Base>
+                  </StyledPanelItem>
+                </PanelItem>
+              </EnvironmentRow>
+              <EnvironmentRow
+                actionText="Hide"
+                environment={
+                  Object {
+                    "displayName": "Staging",
+                    "id": "2",
+                    "name": "staging",
+                    "urlRoutingName": "staging",
+                  }
+                }
+                isDefault={true}
+                isHidden={false}
                 key="2"
-                p={2}
+                name="staging"
+                onHide={[Function]}
+                onSetAsDefault={[Function]}
+                shouldShowAction={true}
+                shouldShowSetDefault={false}
               >
-                <StyledPanelItem
+                <PanelItem
                   align="center"
                   justify="space-between"
                   p={2}
                 >
-                  <Base
+                  <StyledPanelItem
                     align="center"
-                    className="css-1eebujh-StyledPanelItem css-q9h14u0"
                     justify="space-between"
                     p={2}
                   >
-                    <div
-                      className="css-1eebujh-StyledPanelItem css-q9h14u0"
-                      is={null}
+                    <Base
+                      align="center"
+                      className="css-qcergp-StyledPanelItem css-q9h14u0"
+                      justify="space-between"
+                      p={2}
                     >
-                      <span>
-                        Staging
-                         
-                        <code>
-                          staging
-                        </code>
-                      </span>
-                      <Button
-                        disabled={false}
-                        onClick={[Function]}
-                        size="xsmall"
+                      <div
+                        className="css-qcergp-StyledPanelItem css-q9h14u0"
+                        is={null}
                       >
-                        <button
-                          className="button button-default button-xs"
-                          disabled={false}
-                          onClick={[Function]}
-                          role="button"
+                        <Flex
+                          align="center"
                         >
-                          <Flex
+                          <Base
                             align="center"
-                            className="button-label"
+                            className="css-5ipae5"
                           >
-                            <Base
-                              align="center"
-                              className="button-label css-5ipae5"
+                            <div
+                              className="css-5ipae5"
+                              is={null}
                             >
-                              <div
-                                className="button-label css-5ipae5"
-                                is={null}
+                              Staging
+                               
+                              <code>
+                                staging
+                              </code>
+                              <Tag
+                                priority="success"
                               >
-                                Hide
-                              </div>
-                            </Base>
-                          </Flex>
-                        </button>
-                      </Button>
-                    </div>
-                  </Base>
-                </StyledPanelItem>
-              </PanelItem>
+                                <TagTextStyled
+                                  priority="success"
+                                >
+                                  <span
+                                    className="css-giy4xh-TagTextStyled css-3x95g0"
+                                  >
+                                    Default
+                                  </span>
+                                </TagTextStyled>
+                              </Tag>
+                            </div>
+                          </Base>
+                        </Flex>
+                        <div>
+                          <EnvironmentButton
+                            onClick={[Function]}
+                            size="xsmall"
+                          >
+                            <Button
+                              className="css-10adnmx-EnvironmentButton css-d1dasp0"
+                              disabled={false}
+                              onClick={[Function]}
+                              size="xsmall"
+                            >
+                              <button
+                                className="css-10adnmx-EnvironmentButton css-d1dasp0 button button-default button-xs"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
+                              >
+                                <Flex
+                                  align="center"
+                                  className="button-label"
+                                >
+                                  <Base
+                                    align="center"
+                                    className="button-label css-5ipae5"
+                                  >
+                                    <div
+                                      className="button-label css-5ipae5"
+                                      is={null}
+                                    >
+                                      Hide
+                                    </div>
+                                  </Base>
+                                </Flex>
+                              </button>
+                            </Button>
+                          </EnvironmentButton>
+                        </div>
+                      </div>
+                    </Base>
+                  </StyledPanelItem>
+                </PanelItem>
+              </EnvironmentRow>
             </div>
           </PanelBody>
         </div>
@@ -625,7 +843,7 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
         }
       >
         <div
-          className="css-foidy-Wrapper css-17jmgia0"
+          className="css-t5gfr9-Wrapper css-17jmgia0"
         >
           <Flex
             align="center"
@@ -711,25 +929,25 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
     <Panel>
       <StyledPanel>
         <div
-          className="css-wfa8ap-StyledPanel css-5bw71w0"
+          className="css-17bqt4b-StyledPanel css-5bw71w0"
         >
           <PanelHeader>
             <StyledPanelHeader>
               <Component
-                className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
               >
                 <Flex
                   align="center"
-                  className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                  className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
                   justify="space-between"
                 >
                   <Base
                     align="center"
-                    className="css-zott9u0 css-1qscict"
+                    className="css-zott9u0 css-1at3g5b"
                     justify="space-between"
                   >
                     <div
-                      className="css-zott9u0 css-1qscict"
+                      className="css-zott9u0 css-1at3g5b"
                       is={null}
                     >
                       Hidden
@@ -750,7 +968,7 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
               <EmptyMessage>
                 <Wrapper>
                   <div
-                    className="css-1v9jb7c-Wrapper css-toum0v0"
+                    className="css-bq6a85-Wrapper css-toum0v0"
                   >
                     <div
                       className="ref-message"
@@ -845,7 +1063,7 @@ exports[`ProjectEnvironments render hidden renders environment list 1`] = `
         }
       >
         <div
-          className="css-foidy-Wrapper css-17jmgia0"
+          className="css-t5gfr9-Wrapper css-17jmgia0"
         >
           <Flex
             align="center"
@@ -931,25 +1149,25 @@ exports[`ProjectEnvironments render hidden renders environment list 1`] = `
     <Panel>
       <StyledPanel>
         <div
-          className="css-wfa8ap-StyledPanel css-5bw71w0"
+          className="css-17bqt4b-StyledPanel css-5bw71w0"
         >
           <PanelHeader>
             <StyledPanelHeader>
               <Component
-                className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
               >
                 <Flex
                   align="center"
-                  className="css-wxaapd-StyledPanelHeader css-zott9u0"
+                  className="css-1ak3f0u-StyledPanelHeader css-zott9u0"
                   justify="space-between"
                 >
                   <Base
                     align="center"
-                    className="css-zott9u0 css-1qscict"
+                    className="css-zott9u0 css-1at3g5b"
                     justify="space-between"
                   >
                     <div
-                      className="css-zott9u0 css-1qscict"
+                      className="css-zott9u0 css-1at3g5b"
                       is={null}
                     >
                       Hidden
@@ -967,67 +1185,106 @@ exports[`ProjectEnvironments render hidden renders environment list 1`] = `
             <div
               className=""
             >
-              <PanelItem
-                align="center"
-                justify="space-between"
+              <EnvironmentRow
+                actionText="Show"
+                environment={
+                  Object {
+                    "displayName": "Zzz",
+                    "id": "1",
+                    "name": "zzz",
+                    "urlRoutingName": "zzz",
+                  }
+                }
+                isDefault={false}
+                isHidden={true}
                 key="1"
-                p={2}
+                name="zzz"
+                onHide={[Function]}
+                onSetAsDefault={[Function]}
+                shouldShowAction={true}
+                shouldShowSetDefault={false}
               >
-                <StyledPanelItem
+                <PanelItem
                   align="center"
                   justify="space-between"
                   p={2}
                 >
-                  <Base
+                  <StyledPanelItem
                     align="center"
-                    className="css-1eebujh-StyledPanelItem css-q9h14u0"
                     justify="space-between"
                     p={2}
                   >
-                    <div
-                      className="css-1eebujh-StyledPanelItem css-q9h14u0"
-                      is={null}
+                    <Base
+                      align="center"
+                      className="css-qcergp-StyledPanelItem css-q9h14u0"
+                      justify="space-between"
+                      p={2}
                     >
-                      <span>
-                        Zzz
-                         
-                        <code>
-                          zzz
-                        </code>
-                      </span>
-                      <Button
-                        disabled={false}
-                        onClick={[Function]}
-                        size="xsmall"
+                      <div
+                        className="css-qcergp-StyledPanelItem css-q9h14u0"
+                        is={null}
                       >
-                        <button
-                          className="button button-default button-xs"
-                          disabled={false}
-                          onClick={[Function]}
-                          role="button"
+                        <Flex
+                          align="center"
                         >
-                          <Flex
+                          <Base
                             align="center"
-                            className="button-label"
+                            className="css-5ipae5"
+                          >
+                            <div
+                              className="css-5ipae5"
+                              is={null}
+                            >
+                              Zzz
+                               
+                              <code>
+                                zzz
+                              </code>
+                            </div>
+                          </Base>
+                        </Flex>
+                        <div>
+                          <EnvironmentButton
+                            onClick={[Function]}
+                            size="xsmall"
                           >
-                            <Base
-                              align="center"
-                              className="button-label css-5ipae5"
+                            <Button
+                              className="css-10adnmx-EnvironmentButton css-d1dasp0"
+                              disabled={false}
+                              onClick={[Function]}
+                              size="xsmall"
                             >
-                              <div
-                                className="button-label css-5ipae5"
-                                is={null}
+                              <button
+                                className="css-10adnmx-EnvironmentButton css-d1dasp0 button button-default button-xs"
+                                disabled={false}
+                                onClick={[Function]}
+                                role="button"
                               >
-                                Show
-                              </div>
-                            </Base>
-                          </Flex>
-                        </button>
-                      </Button>
-                    </div>
-                  </Base>
-                </StyledPanelItem>
-              </PanelItem>
+                                <Flex
+                                  align="center"
+                                  className="button-label"
+                                >
+                                  <Base
+                                    align="center"
+                                    className="button-label css-5ipae5"
+                                  >
+                                    <div
+                                      className="button-label css-5ipae5"
+                                      is={null}
+                                    >
+                                      Show
+                                    </div>
+                                  </Base>
+                                </Flex>
+                              </button>
+                            </Button>
+                          </EnvironmentButton>
+                        </div>
+                      </div>
+                    </Base>
+                  </StyledPanelItem>
+                </PanelItem>
+              </EnvironmentRow>
             </div>
           </PanelBody>
         </div>
diff --git a/tests/js/spec/views/projectEnvironments.spec.jsx b/tests/js/spec/views/projectEnvironments.spec.jsx
index fabcdffac3..0bc7be4dad 100644
--- a/tests/js/spec/views/projectEnvironments.spec.jsx
+++ b/tests/js/spec/views/projectEnvironments.spec.jsx
@@ -1,9 +1,12 @@
+import {ThemeProvider} from 'emotion-theming';
 import React from 'react';
 import {mount} from 'enzyme';
 
-import ProjectEnvironments from 'app/views/projectEnvironments';
 import EnvironmentStore from 'app/stores/environmentStore';
+import ProjectEnvironments from 'app/views/projectEnvironments';
 import recreateRoute from 'app/utils/recreateRoute';
+import theme from 'app/utils/theme';
+import {ALL_ENVIRONMENTS_KEY} from 'app/constants';
 
 jest.mock('app/utils/recreateRoute');
 
@@ -14,19 +17,38 @@ function mountComponent(isHidden) {
   const project = TestStubs.Project();
   let path = isHidden ? 'environments/hidden/' : 'environments/';
   return mount(
-    <ProjectEnvironments
-      params={{
-        orgId: org.slug,
-        projectId: project.slug,
-      }}
-      route={{path}}
-      routes={[]}
-    />,
+    <ThemeProvider theme={theme}>
+      <ProjectEnvironments
+        params={{
+          orgId: org.slug,
+          projectId: project.slug,
+        }}
+        route={{path}}
+        routes={[]}
+      />
+    </ThemeProvider>,
     TestStubs.routerContext()
   );
 }
 
 describe('ProjectEnvironments', function() {
+  let project;
+  let updateDefaultMock;
+
+  beforeEach(function() {
+    project = TestStubs.Project({
+      defaultEnvironment: 'production',
+    });
+    MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/',
+      body: project,
+    });
+    updateDefaultMock = MockApiClient.addMockResponse({
+      url: '/projects/org-slug/project-slug/',
+      method: 'PUT',
+    });
+  });
+
   afterEach(function() {
     MockApiClient.clearMockResponses();
   });
@@ -38,13 +60,144 @@ describe('ProjectEnvironments', function() {
       let errorMessage = wrapper.find('div').first();
 
       expect(errorMessage.text()).toContain("You don't have any environments yet");
-      expect(wrapper).toMatchSnapshot();
+      expect(wrapper.find('ProjectEnvironments')).toMatchSnapshot();
     });
 
-    it('renders environment list', function() {
+    it('renders environment list and sets staging as default env', async function() {
       EnvironmentStore.loadInitialData(TestStubs.Environments(false));
       const wrapper = mountComponent(false);
-      expect(wrapper).toMatchSnapshot();
+
+      // Production environment is default
+      const productionRow = wrapper.find('EnvironmentRow[name="production"]');
+      const stagingRow = wrapper.find('EnvironmentRow[name="staging"]');
+
+      expect(productionRow.find('Tag').prop('children')).toBe('Default');
+
+      expect(productionRow.find('Button')).toHaveLength(1);
+
+      expect(stagingRow.find('Tag')).toHaveLength(0);
+
+      expect(
+        stagingRow
+          .find('Button')
+          .first()
+          .text()
+      ).toBe('Set as default');
+
+      // Can set as default
+      stagingRow
+        .find('Button')
+        .first()
+        .simulate('click');
+
+      expect(updateDefaultMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {
+            defaultEnvironment: 'staging',
+          },
+        })
+      );
+
+      expect(wrapper.find('EnvironmentRow[name="staging"] Tag')).toHaveLength(1);
+      expect(wrapper.find('EnvironmentRow[name="production"] Tag')).toHaveLength(0);
+      expect(wrapper.find('ProjectEnvironments')).toMatchSnapshot();
+    });
+
+    it('can set "(No Environment)" as default', function() {
+      EnvironmentStore.loadInitialData([
+        ...TestStubs.Environments(false),
+        {
+          id: '3',
+          name: '',
+          displayName: '(No Environment)',
+        },
+      ]);
+      const wrapper = mountComponent(false);
+
+      const noEnvironmentsRow = wrapper.find('EnvironmentRow[name=""]');
+
+      // Not default
+      expect(noEnvironmentsRow.find('Tag')).toHaveLength(0);
+
+      // Is able to hide
+      expect(noEnvironmentsRow.find('Button')).toHaveLength(2);
+      expect(
+        noEnvironmentsRow
+          .find('Button')
+          .first()
+          .text()
+      ).toBe('Set as default');
+      noEnvironmentsRow
+        .find('Button')
+        .first()
+        .simulate('click');
+
+      expect(updateDefaultMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {
+            defaultEnvironment: '',
+          },
+        })
+      );
+
+      // Is default
+      expect(wrapper.find('EnvironmentRow[name=""]').find('Tag')).toHaveLength(1);
+    });
+
+    it('can set "All Environments" as default', function() {
+      EnvironmentStore.loadInitialData(TestStubs.Environments(false));
+      const wrapper = mountComponent(false);
+
+      const allEnvironmentsRow = wrapper.find(
+        `EnvironmentRow[name="${ALL_ENVIRONMENTS_KEY}"]`
+      );
+
+      // Not default
+      expect(allEnvironmentsRow.find('Tag')).toHaveLength(0);
+
+      // Should not have hide button
+      expect(allEnvironmentsRow.find('Button')).toHaveLength(1);
+      expect(allEnvironmentsRow.find('Button').text()).toBe('Set as default');
+
+      // Set as default
+      allEnvironmentsRow.find('Button').simulate('click');
+
+      expect(updateDefaultMock).toHaveBeenCalledWith(
+        expect.anything(),
+        expect.objectContaining({
+          data: {
+            defaultEnvironment: ALL_ENVIRONMENTS_KEY,
+          },
+        })
+      );
+
+      expect(
+        wrapper.find(`EnvironmentRow[name="${ALL_ENVIRONMENTS_KEY}"]`).find('Tag')
+      ).toHaveLength(1);
+    });
+
+    it('displays invalid environment in list with no actions', function() {
+      project = TestStubs.Project({
+        defaultEnvironment: 'invalid-environment',
+      });
+      MockApiClient.addMockResponse({
+        url: '/projects/org-slug/project-slug/',
+        body: project,
+      });
+      EnvironmentStore.loadInitialData(TestStubs.Environments(false));
+      const wrapper = mountComponent(false);
+
+      const row = wrapper.find('EnvironmentRow[name="invalid-environment"]');
+
+      // Is default
+      expect(row.find('Tag')).toHaveLength(1);
+
+      // Can not hide or set as default
+      expect(row.find('Button')).toHaveLength(0);
+
+      expect(wrapper.find('InvalidDefaultEnvironmentIcon')).toHaveLength(1);
     });
   });
 
@@ -57,14 +210,16 @@ describe('ProjectEnvironments', function() {
 
       expect(errorMessage.text()).toContain("You don't have any hidden environments");
 
-      expect(wrapper).toMatchSnapshot();
+      expect(wrapper.find('ProjectEnvironments')).toMatchSnapshot();
     });
 
     it('renders environment list', function() {
       EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
       const wrapper = mountComponent(true);
 
-      expect(wrapper).toMatchSnapshot();
+      // Hidden buttons should not have "Set as default"
+      expect(wrapper.find('Button').text()).toBe('Show');
+      expect(wrapper.find('ProjectEnvironments')).toMatchSnapshot();
     });
   });
 
@@ -88,10 +243,7 @@ describe('ProjectEnvironments', function() {
     it('hides', function() {
       EnvironmentStore.loadInitialData(TestStubs.Environments(false));
       const wrapper = mountComponent(false);
-      wrapper
-        .find('Button')
-        .first()
-        .simulate('click');
+      wrapper.find('EnvironmentRow[name="production"] Button').simulate('click');
       expect(hideMock).toHaveBeenCalledWith(
         `${baseUrl}production/`,
         expect.objectContaining({
@@ -103,10 +255,7 @@ describe('ProjectEnvironments', function() {
     it('shows', function() {
       EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
       const wrapper = mountComponent(true);
-      wrapper
-        .find('Button')
-        .first()
-        .simulate('click');
+      wrapper.find('EnvironmentRow[name="zzz"] Button').simulate('click');
       expect(showMock).toHaveBeenCalledWith(
         `${baseUrl}zzz/`,
         expect.objectContaining({
@@ -114,5 +263,13 @@ describe('ProjectEnvironments', function() {
         })
       );
     });
+
+    it('does not have "All Enviroments" rows', function() {
+      EnvironmentStore.loadHiddenData(TestStubs.Environments(true));
+      const wrapper = mountComponent(true);
+      expect(wrapper.find(`EnvironmentRow[name="${ALL_ENVIRONMENTS_KEY}"]`)).toHaveLength(
+        0
+      );
+    });
   });
 });
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 3b76669fa8..9ed3df8661 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -40,7 +40,6 @@ describe('projectGeneralSettings', function() {
     expect(wrapper.find('Input[name="subjectTemplate"]').prop('value')).toBe(
       '[$project] ${tag:level}: $title'
     );
-    expect(wrapper.find('Input[name="defaultEnvironment"]').prop('value')).toBe('');
     expect(wrapper.find('RangeSlider[name="resolveAge"]').prop('value')).toBe(48);
     expect(wrapper.find('Switch[name="dataScrubber"]').prop('isActive')).toBeFalsy();
     expect(
