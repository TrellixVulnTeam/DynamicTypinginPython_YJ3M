commit b719579293768ea4d4557aea07c07dc57dcfd69c
Author: evanh <evanh@users.noreply.github.com>
Date:   Fri Feb 14 13:02:52 2020 -0500

    fix(discover2) Support the project filter in discover (#16982)
    
    fix(discover2) Support the project filter in discover
    
    We didn't support the 'project' field in the query filter, despite the column in
    the table being called "column". Allow this filter to be based on the project
    slug, and return a more useful error if the user tries to filter for invalid
    projects.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 9409c4ddc5..791672e9c2 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -165,7 +165,10 @@ SEARCH_MAP.update(**DATASETS[Dataset.Discover])
 
 no_conversion = set(["start", "end"])
 
-PROJECT_KEY = "project.name"
+PROJECT_NAME_ALIAS = "project.name"
+PROJECT_ALIAS = "project"
+ISSUE_ALIAS = "issue"
+ISSUE_ID_ALIAS = "issue.id"
 
 
 class InvalidSearchQuery(Exception):
@@ -750,32 +753,35 @@ def get_filter(query=None, params=None):
         "group_ids": [],
     }
 
-    def get_projects(params):
-        return {
-            p["slug"]: p["id"]
-            for p in Project.objects.filter(id__in=params.get("project_id", [])).values(
-                "id", "slug"
-            )
-        }
-
     def to_list(value):
         if isinstance(value, list):
             return value
         return [value]
 
-    projects = None
     for term in parsed_terms:
         if isinstance(term, SearchFilter):
             name = term.key.name
-            if name == PROJECT_KEY:
-                if projects is None:
-                    projects = get_projects(params)
-                condition = ["project_id", "=", projects.get(term.value.value)]
-                kwargs["conditions"].append(condition)
-            elif name == "issue.id" and term.value.value != "":
+            if name in (PROJECT_ALIAS, PROJECT_NAME_ALIAS):
+                project = None
+                try:
+                    project = Project.objects.get(
+                        id__in=params.get("project_id", []), slug=term.value.value
+                    )
+                except Exception:
+                    raise InvalidSearchQuery(
+                        "Invalid query. Project %s does not exist or is not an actively selected project."
+                        % term.value.value
+                    )
+
+                # Create a new search filter with the correct values
+                term = SearchFilter(SearchKey("project_id"), term.operator, SearchValue(project.id))
+                converted_filter = convert_search_filter_to_snuba_query(term)
+                if converted_filter:
+                    kwargs["conditions"].append(converted_filter)
+            elif name == ISSUE_ID_ALIAS and term.value.value != "":
                 # A blank term value means that this is a has filter
                 kwargs["group_ids"].extend(to_list(term.value.value))
-            elif name == "issue" and term.value.value != "":
+            elif name == ISSUE_ALIAS and term.value.value != "":
                 if params and "organization_id" in params:
                     try:
                         group = Group.objects.by_qualified_short_id(
@@ -786,7 +792,7 @@ def get_filter(query=None, params=None):
                         raise InvalidSearchQuery(
                             u"Invalid value '{}' for 'issue:' filter".format(term.value.value)
                         )
-            elif name in FIELD_ALIASES:
+            elif name in FIELD_ALIASES and name != PROJECT_ALIAS:
                 converted_filter = convert_aggregate_filter_to_snuba_query(term, True)
                 if converted_filter:
                     kwargs["having"].append(converted_filter)
@@ -814,7 +820,7 @@ def get_filter(query=None, params=None):
         if "group_ids" in params:
             kwargs["group_ids"] = to_list(params["group_ids"])
         # Deprecated alias, use `group_ids` instead
-        if "issue.id" in params:
+        if ISSUE_ID_ALIAS in params:
             kwargs["group_ids"] = to_list(params["issue.id"])
 
     return eventstore.Filter(**kwargs)
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index e104ed317f..a311cc386c 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -1078,15 +1078,26 @@ class GetSnubaQueryArgsTest(TestCase):
 
         params = {"project_id": [p1.id, p2.id]}
         filter = get_filter("project.name:{}".format(p1.slug), params)
-        filter.conditions == [["project_id", "=", p1.id]]
-        filter.filter_keys == {"project_id": [p1.id, p2.id]}
-        filter.project_ids == [p1.id, p2.id]
+        assert filter.conditions == [["project_id", "=", p1.id]]
+        assert filter.filter_keys == {"project_id": [p1.id, p2.id]}
+        assert filter.project_ids == [p1.id, p2.id]
 
-        params = {"project_id": []}
+        params = {"project_id": [p1.id, p2.id]}
         filter = get_filter("!project.name:{}".format(p1.slug), params)
-        filter.conditions == [["project_id", "!=", p1.id]]
-        filter.filter_keys == {}
-        filter.project_ids == []
+        assert filter.conditions == [
+            [[["isNull", ["project_id"]], "=", 1], ["project_id", "!=", p1.id]]
+        ]
+        assert filter.filter_keys == {"project_id": [p1.id, p2.id]}
+        assert filter.project_ids == [p1.id, p2.id]
+
+        with pytest.raises(InvalidSearchQuery) as err:
+            params = {"project_id": []}
+            get_filter("project.name:{}".format(p1.slug), params)
+        assert (
+            "Invalid query. Project %s does not exist or is not an actively selected project"
+            % p1.slug
+            in six.text_type(err)
+        )
 
     def test_transaction_status(self):
         for (key, val) in SPAN_STATUS_CODE_TO_NAME.items():
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 4ffd8c8204..2403b0d22d 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -200,6 +200,114 @@ class OrganizationEventsV2EndpointTest(APITestCase, SnubaTestCase):
         assert "project.id" not in response.data["data"][0]
         assert response.data["data"][0]["environment"] == "staging"
 
+    def test_project_in_query(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        self.store_event(
+            data={"event_id": "a" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "count()"],
+                    "query": 'project:"%s"' % project.slug,
+                    "statsPeriod": "14d",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["data"][0]["project.name"] == project.slug
+        assert "project.id" not in response.data["data"][0]
+
+    def test_project_in_query_not_in_header(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        other_project = self.create_project()
+        self.store_event(
+            data={"event_id": "a" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "count()"],
+                    "query": 'project:"%s"' % project.slug,
+                    "statsPeriod": "14d",
+                    "project": other_project.id,
+                },
+            )
+
+        assert response.status_code == 400, response.content
+        assert (
+            response.data["detail"]
+            == "Invalid query. Project %s does not exist or is not an actively selected project."
+            % project.slug
+        )
+
+    def test_project_in_query_does_not_exist(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        self.store_event(
+            data={"event_id": "a" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project.id,
+        )
+
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "count()"],
+                    "query": "project:morty",
+                    "statsPeriod": "14d",
+                },
+            )
+
+        assert response.status_code == 400, response.content
+        assert (
+            response.data["detail"]
+            == "Invalid query. Project morty does not exist or is not an actively selected project."
+        )
+
+    def test_not_project_in_query(self):
+        self.login_as(user=self.user)
+        project1 = self.create_project()
+        project2 = self.create_project()
+        self.store_event(
+            data={"event_id": "a" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project1.id,
+        )
+        self.store_event(
+            data={"event_id": "b" * 32, "environment": "staging", "timestamp": self.min_ago},
+            project_id=project2.id,
+        )
+
+        with self.feature(
+            {"organizations:discover-basic": True, "organizations:global-views": True}
+        ):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "field": ["project", "count()"],
+                    "query": '!project:"%s"' % project1.slug,
+                    "statsPeriod": "14d",
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data["data"]) == 1
+        assert response.data["data"][0]["project.name"] == project2.slug
+        assert "project.id" not in response.data["data"][0]
+
     def test_implicit_groupby(self):
         self.login_as(user=self.user)
         project = self.create_project()
