commit b9faf097d92f3952db808870a393af31b8633720
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Nov 9 09:57:22 2018 -0800

    Service hook mediators  (#10466)
    
    * feat(servicehooks): service hook mediators

diff --git a/src/sentry/mediators/sentry_apps/destroyer.py b/src/sentry/mediators/sentry_apps/destroyer.py
index a6b0246de6..1168026edc 100644
--- a/src/sentry/mediators/sentry_apps/destroyer.py
+++ b/src/sentry/mediators/sentry_apps/destroyer.py
@@ -4,7 +4,7 @@ from sentry.mediators import Mediator, Param
 
 
 class Destroyer(Mediator):
-    sentry_app = Param('sentry.models.sentryapp.SentryApp')
+    sentry_app = Param('sentry.models.SentryApp')
 
     def call(self):
         self._destroy_api_application()
diff --git a/src/sentry/mediators/service_hooks/__init__.py b/src/sentry/mediators/service_hooks/__init__.py
new file mode 100644
index 0000000000..ad1adbe376
--- /dev/null
+++ b/src/sentry/mediators/service_hooks/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from .creator import Creator  # NOQA
+from .updater import Updater  # NOQA
+from .destroyer import Destroyer  # NOQA
diff --git a/src/sentry/mediators/service_hooks/creator.py b/src/sentry/mediators/service_hooks/creator.py
new file mode 100644
index 0000000000..b6a0b9ff0b
--- /dev/null
+++ b/src/sentry/mediators/service_hooks/creator.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import Iterable
+
+from sentry.mediators import Mediator, Param
+from sentry.models import ServiceHook
+
+
+class Creator(Mediator):
+    application = Param('sentry.models.ApiApplication', required=False)
+    actor = Param('sentry.models.User')
+    project = Param('sentry.models.Project')
+    events = Param(Iterable)
+    url = Param(six.string_types)
+
+    def call(self):
+        self.hook = self._create_service_hook()
+        return self.hook
+
+    def _create_service_hook(self):
+        return ServiceHook.objects.create(
+            application=self.application,
+            actor_id=self.actor.id,
+            project_id=self.project.id,
+            events=self.events,
+            url=self.url,
+        )
diff --git a/src/sentry/mediators/service_hooks/destroyer.py b/src/sentry/mediators/service_hooks/destroyer.py
new file mode 100644
index 0000000000..367dc6a99d
--- /dev/null
+++ b/src/sentry/mediators/service_hooks/destroyer.py
@@ -0,0 +1,14 @@
+from __future__ import absolute_import
+
+from sentry.mediators import Mediator, Param
+
+
+class Destroyer(Mediator):
+    service_hook = Param('sentry.models.ServiceHook')
+
+    def call(self):
+        self._destroy_service_hook()
+        return self.service_hook
+
+    def _destroy_service_hook(self):
+        self.service_hook.delete()
diff --git a/src/sentry/mediators/service_hooks/updater.py b/src/sentry/mediators/service_hooks/updater.py
new file mode 100644
index 0000000000..ed13280213
--- /dev/null
+++ b/src/sentry/mediators/service_hooks/updater.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+import six
+
+from collections import Iterable
+
+from sentry.mediators import Mediator, Param
+from sentry.mediators.param import if_param
+
+
+class Updater(Mediator):
+    service_hook = Param('sentry.models.ServiceHook')
+    application = Param('sentry.models.ApiApplication', required=False)
+    actor = Param('sentry.models.User', required=False)
+    project = Param('sentry.models.Project', required=False)
+    events = Param(Iterable, required=False)
+    url = Param(six.string_types, required=False)
+
+    def call(self):
+        self._update_application()
+        self._update_actor()
+        self._update_project()
+        self._update_events()
+        self._update_url()
+        return self.service_hook
+
+    @if_param('application')
+    def _update_application(self):
+        self.service_hook.application = self.application
+
+    @if_param('actor')
+    def _update_actor(self):
+        self.service_hook.actor_id = self.actor.id
+
+    @if_param('project')
+    def _update_project(self):
+        self.service_hook.project_id = self.project.id
+
+    @if_param('events')
+    def _update_events(self):
+        self.service_hook.events = self.events
+
+    @if_param('url')
+    def _update_url(self):
+        self.service_hook.url = self.url
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index d61a827ce1..cf191f73b4 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -26,6 +26,7 @@ from uuid import uuid4
 
 from sentry.constants import SentryAppStatus
 from sentry.mediators.sentry_apps import Creator as SentryAppCreator
+from sentry.mediators.service_hooks import Creator as ServiceHookCreator
 from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, Group, Organization, OrganizationMember,
     OrganizationMemberTeam, Project, Team, User, UserEmail, Release, Commit, ReleaseCommit,
@@ -723,3 +724,22 @@ class Fixtures(object):
             app.update(status=SentryAppStatus.PUBLISHED)
 
         return app
+
+    def create_service_hook(self, actor=None, project=None, events=None, url=None, **kwargs):
+        if not actor:
+            actor = self.create_user()
+        if not project:
+            org = self.create_organization(owner=actor)
+            project = self.create_project(organization=org)
+        if not events:
+            events = ('event.created',)
+        if not url:
+            url = 'https://example/sentry/webhook'
+
+        return ServiceHookCreator.run(
+            actor=actor,
+            project=project,
+            events=events,
+            url=url,
+            **kwargs
+        )
diff --git a/tests/sentry/mediators/service_hooks/__init__.py b/tests/sentry/mediators/service_hooks/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/mediators/service_hooks/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/mediators/service_hooks/test_creator.py b/tests/sentry/mediators/service_hooks/test_creator.py
new file mode 100644
index 0000000000..0efe171fdb
--- /dev/null
+++ b/tests/sentry/mediators/service_hooks/test_creator.py
@@ -0,0 +1,31 @@
+from __future__ import absolute_import
+
+from sentry.mediators.service_hooks import Creator
+from sentry.models import ServiceHook
+from sentry.testutils import TestCase
+
+
+class TestCreator(TestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(name='foo', organization=self.org)
+        self.sentry_app = self.create_sentry_app(owner=self.org)
+        self.creator = Creator(application=self.sentry_app.application,
+                               actor=self.sentry_app.proxy_user,
+                               project=self.project,
+                               events=('event.created',),
+                               url=self.sentry_app.webhook_url)
+
+    def test_creates_service_hook(self):
+        self.creator.call()
+
+        service_hook = ServiceHook.objects.get(
+            application=self.sentry_app.application,
+            actor_id=self.sentry_app.proxy_user.id,
+            project_id=self.project.id,
+            url=self.sentry_app.webhook_url,
+        )
+
+        assert service_hook
+        assert service_hook.events == ['event.created']
diff --git a/tests/sentry/mediators/service_hooks/test_destroyer.py b/tests/sentry/mediators/service_hooks/test_destroyer.py
new file mode 100644
index 0000000000..f89bc29100
--- /dev/null
+++ b/tests/sentry/mediators/service_hooks/test_destroyer.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.mediators.service_hooks import Destroyer
+from sentry.models import ServiceHook
+from sentry.testutils import TestCase
+
+
+class TestDestroyer(TestCase):
+    def setUp(self):
+        self.sentry_app = self.create_sentry_app()
+        self.service_hook = self.create_service_hook(
+            application=self.sentry_app.application
+        )
+        self.destroyer = Destroyer(service_hook=self.service_hook)
+
+    def test_deletes_service_hook(self):
+        service_hook = self.service_hook
+
+        self.destroyer.call()
+
+        assert not ServiceHook.objects.filter(pk=service_hook.id).exists()
diff --git a/tests/sentry/mediators/service_hooks/test_updater.py b/tests/sentry/mediators/service_hooks/test_updater.py
new file mode 100644
index 0000000000..de1967cb8e
--- /dev/null
+++ b/tests/sentry/mediators/service_hooks/test_updater.py
@@ -0,0 +1,42 @@
+from __future__ import absolute_import
+
+from sentry.mediators.service_hooks import Updater
+from sentry.testutils import TestCase
+
+
+class TestUpdater(TestCase):
+    def setUp(self):
+        self.sentry_app = self.create_sentry_app()
+        self.service_hook = self.create_service_hook(
+            application=self.sentry_app.application
+        )
+
+        self.updater = Updater(service_hook=self.service_hook)
+
+    def test_updates_application(self):
+        app = self.create_sentry_app(name='Blah').application
+        self.updater.application = app
+        self.updater.call()
+        assert self.service_hook.application == app
+
+    def test_updates_actor(self):
+        actor = self.create_user(email='hello@yahoo.com')
+        self.updater.actor = actor
+        self.updater.call()
+        assert self.service_hook.actor_id == actor.id
+
+    def test_updates_project(self):
+        project = self.create_project()
+        self.updater.project = project
+        self.updater.call()
+        assert self.service_hook.project_id == project.id
+
+    def test_updates_events(self):
+        self.updater.events = ('event.alert', )
+        self.updater.call()
+        assert self.service_hook.events == ['event.alert']
+
+    def test_updates_url(self):
+        self.updater.url = 'http://example.com/hooks'
+        self.updater.call()
+        assert self.service_hook.url == 'http://example.com/hooks'
