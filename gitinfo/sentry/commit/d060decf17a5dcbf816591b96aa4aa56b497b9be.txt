commit d060decf17a5dcbf816591b96aa4aa56b497b9be
Author: Dan Fairs <dan@fezconsulting.com>
Date:   Thu Oct 21 16:56:00 2010 +0100

    Correctly handle the case where there's no exception currently being processed.

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 9dd4371ca3..f9a8437732 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -92,7 +92,10 @@ class SentryClient(object):
             'level': record.levelno,
             'message': record.getMessage(),
         })
-        if record.exc_info:
+        
+        # If there's no exception being processed, exc_info may be a 3-tuple of None
+        # http://docs.python.org/library/sys.html#sys.exc_info
+        if record.exc_info and all(record.exc_info):
             return self.create_from_exception(record.exc_info, **kwargs)
 
         return self.process(
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 3f45c1e91c..1b4dacdd1e 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -554,6 +554,23 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry.tests.views.logging_request_exc')
         self.assertEquals(last.data['url'], 'http://testserver' + reverse('sentry-log-request-exc'))
+        
+    def testCreateFromRecordNoneExcInfo(self):
+        # sys.exc_info can return (None, None, None) if no exception is being
+        # handled anywhere on the stack. See:
+        #  http://docs.python.org/library/sys.html#sys.exc_info
+        client = get_client()
+        record = logging.LogRecord(
+            'foo', 
+            logging.INFO, 
+            pathname=None,
+            lineno=None,
+            msg='test',
+            args=(),
+            exc_info=(None, None, None),
+        )
+        message = client.create_from_record(record)
+        self.assertEquals('test', message.message)
 
 
 class SentryViewsTest(TestCase):
