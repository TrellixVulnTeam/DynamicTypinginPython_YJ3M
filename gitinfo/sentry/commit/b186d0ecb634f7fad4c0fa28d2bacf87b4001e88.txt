commit b186d0ecb634f7fad4c0fa28d2bacf87b4001e88
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 10 13:43:37 2013 -0700

    Initial Django node backend

diff --git a/src/sentry/app.py b/src/sentry/app.py
index 28e0894845..ea77096135 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -22,4 +22,6 @@ def get_instance(path, options):
 
 buffer = get_instance(settings.SENTRY_BUFFER, settings.SENTRY_BUFFER_OPTIONS)
 quotas = get_instance(settings.SENTRY_QUOTAS, settings.SENTRY_QUOTA_OPTIONS)
+nodestore = get_instance(
+    settings.SENTRY_NODESTORE, settings.SENTRY_NODESTORE_OPTIONS)
 env = State()
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 45d6845e67..c46818ce6f 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -150,6 +150,7 @@ INSTALLED_APPS = (
     'kombu.transport.django',
     'raven.contrib.django.raven_compat',
     'sentry',
+    'sentry.nodestore',
     'sentry.plugins.sentry_interface_types',
     'sentry.plugins.sentry_mail',
     'sentry.plugins.sentry_urls',
@@ -506,12 +507,18 @@ SENTRY_SCRAPE_JAVASCRIPT_CONTEXT = True
 # Redis connection information (see Nydus documentation)
 SENTRY_REDIS_OPTIONS = {}
 
-# Buffer backend to use
+# Buffer backend
 SENTRY_BUFFER = 'sentry.buffer.Buffer'
 SENTRY_BUFFER_OPTIONS = {}
 
+# Quota backend
 SENTRY_QUOTAS = 'sentry.quotas.Quota'
 SENTRY_QUOTA_OPTIONS = {}
+
+# Node storage backend
+SENTRY_NODESTORE = 'sentry.nodestore.django.DjangoNodeStorage'
+SENTRY_NODESTORE_OPTIONS = {}
+
 # The default value for project-level quotas
 SENTRY_DEFAULT_MAX_EVENTS_PER_MINUTE = '90%'
 # The maximum number of events per minute the system should accept.
diff --git a/src/sentry/nodestore/__init__.py b/src/sentry/nodestore/__init__.py
new file mode 100644
index 0000000000..a28d6b9178
--- /dev/null
+++ b/src/sentry/nodestore/__init__.py
@@ -0,0 +1,9 @@
+"""
+sentry.nodestore
+~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
diff --git a/src/sentry/nodestore/base.py b/src/sentry/nodestore/base.py
new file mode 100644
index 0000000000..5ed647c6d2
--- /dev/null
+++ b/src/sentry/nodestore/base.py
@@ -0,0 +1,27 @@
+"""
+sentry.nodestore.base
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+
+class NodeStorage(object):
+    def get(self, src):
+        raise NotImplementedError
+
+    def get_multi(self, src_list):
+        return dict(
+            (src, self.get(src))
+            for src in src_list
+        )
+
+    def set(self, src, data, timestamp=None):
+        raise NotImplementedError
+
+    def set_multi(self, values):
+        for v in values:
+            self.set(**v)
diff --git a/src/sentry/nodestore/django/__init__.py b/src/sentry/nodestore/django/__init__.py
new file mode 100644
index 0000000000..d03f3a57f8
--- /dev/null
+++ b/src/sentry/nodestore/django/__init__.py
@@ -0,0 +1,9 @@
+"""
+sentry.nodestore.django
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .backend import DjangoNodeStorage  # NOQA
diff --git a/src/sentry/nodestore/django/backend.py b/src/sentry/nodestore/django/backend.py
new file mode 100644
index 0000000000..4b81859d7c
--- /dev/null
+++ b/src/sentry/nodestore/django/backend.py
@@ -0,0 +1,36 @@
+"""
+sentry.nodestore.django.backend
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django.utils import timezone
+
+from sentry.db.models import create_or_update
+from sentry.nodestore.base import NodeStorage
+
+from .models import Node
+
+
+class DjangoNodeStorage(NodeStorage):
+    def get(self, src):
+        return Node.objects.get(src=src)
+
+    def get_multi(self, src_list):
+        return Node.objects.get(src__in=src_list)
+
+    def set(self, src, data, timestamp=None):
+        create_or_update(
+            Node,
+            src=src,
+            data=data,
+            timestamp=timestamp or timezone.now()
+        )
+
+    def set_multi(self, values):
+        for v in values:
+            self.set(**v)
diff --git a/src/sentry/nodestore/django/models.py b/src/sentry/nodestore/django/models.py
new file mode 100644
index 0000000000..77d3277fdb
--- /dev/null
+++ b/src/sentry/nodestore/django/models.py
@@ -0,0 +1,27 @@
+"""
+sentry.nodestore.django.models
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (
+    BaseModel, GzippedDictField, sane_repr)
+
+
+class Node(BaseModel):
+    # TODO: should we just UUID this and use claims?
+    src = models.AutoField(primary_key=True)
+    data = GzippedDictField()
+    timestamp = models.DateTimeField(default=timezone.now)
+
+    __repr__ = sane_repr('src', 'timestamp')
+
+    class Meta:
+        app_label = 'nodestore'
diff --git a/src/sentry/nodestore/migrations/0001_initial.py b/src/sentry/nodestore/migrations/0001_initial.py
new file mode 100644
index 0000000000..c77fe81430
--- /dev/null
+++ b/src/sentry/nodestore/migrations/0001_initial.py
@@ -0,0 +1,34 @@
+# -*- coding: utf-8 -*-
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'Node'
+        db.create_table(u'nodestore_node', (
+            ('src', self.gf('django.db.models.fields.IntegerField')(primary_key=True)),
+            ('data', self.gf('django.db.models.fields.TextField')()),
+            ('timestamp', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('nodestore', ['Node'])
+
+
+    def backwards(self, orm):
+        # Deleting model 'Node'
+        db.delete_table(u'nodestore_node')
+
+
+    models = {
+        'nodestore.node': {
+            'Meta': {'object_name': 'Node'},
+            'data': ('django.db.models.fields.TextField', [], {}),
+            'src': ('django.db.models.fields.IntegerField', [], {'primary_key': 'True'}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'})
+        }
+    }
+
+    complete_apps = ['nodestore']
diff --git a/src/sentry/nodestore/migrations/__init__.py b/src/sentry/nodestore/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/nodestore/models.py b/src/sentry/nodestore/models.py
new file mode 100644
index 0000000000..8d9a8e502f
--- /dev/null
+++ b/src/sentry/nodestore/models.py
@@ -0,0 +1,13 @@
+"""
+sentry.nodestore.models
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+# HACK(dcramer): Django doesn't play well with our naming schemes, and we prefer
+# our methods ways over Django's limited scoping
+from .django.models import *  # NOQA
