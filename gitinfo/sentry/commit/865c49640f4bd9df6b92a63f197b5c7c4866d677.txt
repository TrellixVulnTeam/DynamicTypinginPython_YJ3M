commit 865c49640f4bd9df6b92a63f197b5c7c4866d677
Author: Scott Cooper <scttcper@gmail.com>
Date:   Wed Jun 17 17:33:15 2020 -0700

    feat(alerts): Create alert from discover v0 (#19381)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index edbeb87f70..1cf1d889d5 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -826,6 +826,8 @@ SENTRY_FEATURES = {
     "organizations:discover-basic": True,
     # Enable discover 2 custom queries and saved queries
     "organizations:discover-query": True,
+    # Enable create alert rule on the discover page
+    "organizations:create-from-discover": False,
     # Enable Performance view
     "organizations:performance-view": False,
     # Enable multi project selection
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 75fed75015..6f1201cab1 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -66,6 +66,7 @@ default_manager.add("organizations:datascrubbers-v2", OrganizationFeature)  # NO
 default_manager.add("organizations:discover", OrganizationFeature)  # NOQA
 default_manager.add("organizations:discover-basic", OrganizationFeature)  # NOQA
 default_manager.add("organizations:discover-query", OrganizationFeature)  # NOQA
+default_manager.add("organizations:create-from-discover", OrganizationFeature)  # NOQA
 default_manager.add("organizations:enterprise-perf", OrganizationFeature)  # NOQA
 default_manager.add("organizations:event-attachments", OrganizationFeature)  # NOQA
 default_manager.add("organizations:events", OrganizationFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
index e62ea44d59..29acfd1609 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsHeader.tsx
@@ -1,5 +1,6 @@
 import React from 'react';
 import {Location} from 'history';
+import styled from '@emotion/styled';
 
 import {Organization, SavedQuery} from 'app/types';
 import {fetchSavedQuery} from 'app/actionCreators/discoverSavedQueries';
@@ -81,7 +82,7 @@ class ResultsHeader extends React.Component<Props, State> {
     );
 
     return (
-      <HeaderBox>
+      <StyledHeaderBox>
         <DiscoverBreadcrumb
           eventView={eventView}
           organization={organization}
@@ -111,9 +112,21 @@ class ResultsHeader extends React.Component<Props, State> {
             )}
           </Feature>
         </HeaderTopControls>
-      </HeaderBox>
+      </StyledHeaderBox>
     );
   }
 }
 
 export default withApi(ResultsHeader);
+
+// TODO(scttcper): The buttons are taking up a lot of space on this page
+const StyledHeaderBox = styled(HeaderBox)`
+  /* On results page header, break to new line sooner */
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: block;
+  }
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    display: grid;
+    grid-template-columns: minmax(100px, auto) 475px;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index cadaaf8b9a..c15ec716b0 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -5,15 +5,18 @@ import {Location} from 'history';
 
 import {Client} from 'app/api';
 import {t} from 'app/locale';
-import {Organization, SavedQuery} from 'app/types';
+import {Organization, SavedQuery, Project} from 'app/types';
 import withApi from 'app/utils/withApi';
 import Button from 'app/components/button';
 import DropdownButton from 'app/components/dropdownButton';
 import DropdownControl from 'app/components/dropdownControl';
 import Input from 'app/components/forms/input';
 import space from 'app/styles/space';
-import {IconBookmark, IconDelete} from 'app/icons';
+import {IconBookmark, IconDelete, IconSiren} from 'app/icons';
+import Feature from 'app/components/acl/feature';
 import EventView from 'app/utils/discover/eventView';
+import withProjects from 'app/utils/withProjects';
+import Tooltip from 'app/components/tooltip';
 
 import {getDiscoverLandingUrl} from '../utils';
 import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
@@ -37,6 +40,7 @@ type Props = DefaultProps & {
   eventView: EventView;
   savedQuery: SavedQuery | undefined;
   savedQueryLoading: boolean;
+  projects: Project[];
 };
 
 type State = {
@@ -286,9 +290,55 @@ class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
     );
   }
 
+  renderButtonCreateAlert() {
+    const {eventView, organization, projects} = this.props;
+    // Must have exactly one project selected and not -1 (all projects)
+    const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;
+    // Must have one or zero environments
+    const hasEnvironmentError = eventView.environment.length > 1;
+    // Must have event.type of error or transaction
+    const hasEventTypeError =
+      !eventView.query.includes('event.type:error') &&
+      !eventView.query.includes('event.type:transaction');
+    const project = projects.find(p => p.id === String(eventView.project[0]));
+    const isDisabled = hasProjectError || hasEnvironmentError || hasEventTypeError;
+
+    // TODO(scttcper): Implement real design for errors
+    let errorText = '';
+    if (hasProjectError) {
+      errorText = 'One project must be selected';
+    } else if (hasEnvironmentError) {
+      errorText = 'One or all environments is required';
+    } else if (hasEventTypeError) {
+      errorText = 'Either event.type:error or event.type:transaction is required';
+    }
+
+    return (
+      <Feature features={['create-from-discover']} organization={organization}>
+        <Tooltip title={errorText} disabled={!isDisabled}>
+          <Button
+            disabled={isDisabled || project === undefined}
+            to={{
+              pathname: `/settings/${organization.slug}/projects/${project?.slug}/alerts/new/`,
+              query: {
+                ...eventView.generateQueryStringObject(),
+                createFromDiscover: true,
+              },
+            }}
+            icon={<IconSiren />}
+            data-test-id="discover2-create-from-discover"
+          >
+            {t('Create alert')}
+          </Button>
+        </Tooltip>
+      </Feature>
+    );
+  }
+
   render() {
     return (
       <ButtonGroup>
+        {this.renderButtonCreateAlert()}
         {this.renderButtonDelete()}
         {this.renderButtonSaveAs()}
         {this.renderButtonUpdate()}
@@ -341,4 +391,4 @@ const IconUpdate = styled('div')`
   background-color: ${p => p.theme.yellow500};
 `;
 
-export default withApi(SavedQueryButtonGroup);
+export default withProjects(withApi(SavedQueryButtonGroup));
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
index 951a8a1435..bfbb209904 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/constants.tsx
@@ -4,6 +4,7 @@ import {
   Trigger,
   Dataset,
 } from 'app/views/settings/incidentRules/types';
+import EventView from 'app/utils/discover/eventView';
 
 export const DEFAULT_AGGREGATE = 'count()';
 
@@ -33,3 +34,24 @@ export function createDefaultRule(): UnsavedIncidentRule {
     environment: null,
   };
 }
+
+/**
+ * Create an unsaved alert from a discover EventView object
+ */
+export function createRuleFromEventView(eventView: EventView): UnsavedIncidentRule {
+  return {
+    ...createDefaultRule(),
+    dataset: eventView.query.includes(DATASET_EVENT_TYPE_FILTERS[Dataset.TRANSACTIONS])
+      ? Dataset.TRANSACTIONS
+      : Dataset.ERRORS,
+    query: eventView.query
+      .slice()
+      .replace(/event\.type:(transaction|error)/, '')
+      .trim(),
+    aggregate:
+      eventView.yAxis === 'count_unique(user)'
+        ? 'count_unique(tags[sentry:user])'
+        : DEFAULT_AGGREGATE,
+    environment: eventView.environment.length ? eventView.environment[0] : null,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
index 7c63f797cc..e2b364c53d 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/create.tsx
@@ -2,8 +2,12 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import React from 'react';
 
 import {Organization, Project} from 'app/types';
-import {createDefaultRule} from 'app/views/settings/incidentRules/constants';
+import {
+  createDefaultRule,
+  createRuleFromEventView,
+} from 'app/views/settings/incidentRules/constants';
 import recreateRoute from 'app/utils/recreateRoute';
+import EventView from 'app/utils/discover/eventView';
 
 import RuleForm from './ruleForm';
 
@@ -16,6 +20,7 @@ type RouteParams = {
 type Props = {
   organization: Organization;
   project: Project;
+  eventView: EventView | undefined;
 } & RouteComponentProps<RouteParams, {}>;
 
 /**
@@ -29,12 +34,15 @@ class IncidentRulesCreate extends React.Component<Props> {
   };
 
   render() {
-    const {project, ...props} = this.props;
+    const {project, eventView, ...props} = this.props;
+    const defaultRule = eventView
+      ? createRuleFromEventView(eventView)
+      : createDefaultRule();
 
     return (
       <RuleForm
         onSubmitSuccess={this.handleSubmitSuccess}
-        rule={{...createDefaultRule(), projects: [project.slug]}}
+        rule={{...defaultRule, projects: [project.slug]}}
         {...props}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
index 1aa3549278..bfff6d79c7 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/create.tsx
@@ -9,6 +9,7 @@ import IssueEditor from 'app/views/settings/projectAlerts/issueEditor';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import withProject from 'app/utils/withProject';
+import EventView from 'app/utils/discover/eventView';
 
 import AlertTypeChooser from './alertTypeChooser';
 
@@ -21,16 +22,19 @@ type Props = RouteComponentProps<RouteParams, {}> & {
   organization: Organization;
   project: Project;
   hasMetricAlerts: boolean;
+  hasCreateFromDiscover: boolean;
 };
 
 type AlertType = 'metric' | 'issue' | null;
 
 type State = {
   alertType: AlertType;
+  eventView: EventView | undefined;
 };
 
 class Create extends React.Component<Props, State> {
   state: State = {
+    eventView: undefined,
     alertType: this.props.location.pathname.includes('/alerts/rules/')
       ? 'issue'
       : this.props.location.pathname.includes('/alerts/metric-rules/')
@@ -39,7 +43,7 @@ class Create extends React.Component<Props, State> {
   };
 
   componentDidMount() {
-    const {organization, project} = this.props;
+    const {organization, project, hasCreateFromDiscover, location} = this.props;
 
     trackAnalyticsEvent({
       eventKey: 'new_alert_rule.viewed',
@@ -47,6 +51,12 @@ class Create extends React.Component<Props, State> {
       organization_id: parseInt(organization.id, 10),
       project_id: parseInt(project.id, 10),
     });
+
+    if (hasCreateFromDiscover && location.query.createFromDiscover) {
+      const eventView = EventView.fromLocation(location);
+      // eslint-disable-next-line react/no-did-mount-set-state
+      this.setState({alertType: 'metric', eventView});
+    }
   }
 
   handleChangeAlertType = (alertType: AlertType) => {
@@ -57,7 +67,7 @@ class Create extends React.Component<Props, State> {
   render() {
     const {hasMetricAlerts, organization} = this.props;
     const {projectId} = this.props.params;
-    const {alertType} = this.state;
+    const {alertType, eventView} = this.state;
 
     const shouldShowAlertTypeChooser = hasMetricAlerts;
     const title = t('New Alert');
@@ -78,7 +88,7 @@ class Create extends React.Component<Props, State> {
         {(!hasMetricAlerts || alertType === 'issue') && <IssueEditor {...this.props} />}
 
         {hasMetricAlerts && alertType === 'metric' && (
-          <IncidentRulesCreate {...this.props} />
+          <IncidentRulesCreate {...this.props} eventView={eventView} />
         )}
       </React.Fragment>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
index d560b5af59..259307f44b 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/edit.tsx
@@ -17,6 +17,7 @@ type RouteParams = {
 type Props = RouteComponentProps<RouteParams, {}> & {
   organization: Organization;
   hasMetricAlerts: boolean;
+  hasCreateFromDiscover: boolean;
 };
 
 function ProjectAlertsEditor(props: Props) {
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
index 30d20b14e5..d392454529 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/index.tsx
@@ -14,15 +14,20 @@ const ProjectAlerts = ({children, organization}: Props) => (
   <Access organization={organization} access={['project:write']}>
     {({hasAccess}) => (
       <Feature organization={organization} features={['incidents']}>
-        {({hasFeature}) => (
-          <React.Fragment>
-            {React.isValidElement(children) &&
-              React.cloneElement(children, {
-                organization,
-                canEditRule: hasAccess,
-                hasMetricAlerts: hasFeature,
-              })}
-          </React.Fragment>
+        {({hasFeature: hasMetricAlerts}) => (
+          <Feature organization={organization} features={['create-from-discover']}>
+            {({hasFeature: hasCreateFromDiscover}) => (
+              <React.Fragment>
+                {React.isValidElement(children) &&
+                  React.cloneElement(children, {
+                    organization,
+                    canEditRule: hasAccess,
+                    hasMetricAlerts,
+                    hasCreateFromDiscover,
+                  })}
+              </React.Fragment>
+            )}
+          </Feature>
         )}
       </Feature>
     )}
diff --git a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
index 9a7b1e50cc..33a9107604 100644
--- a/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQuery/index.spec.jsx
@@ -11,6 +11,7 @@ const SELECTOR_BUTTON_SAVE_AS = 'ButtonSaveAs';
 const SELECTOR_BUTTON_SAVED = 'ButtonSaved';
 const SELECTOR_BUTTON_UPDATE = '[data-test-id="discover2-savedquery-button-update"]';
 const SELECTOR_BUTTON_DELETE = '[data-test-id="discover2-savedquery-button-delete"]';
+const SELECTOR_BUTTON_CREATE_ALERT = '[data-test-id="discover2-create-from-discover"]';
 
 function generateWrappedComponent(
   location,
@@ -299,4 +300,18 @@ describe('EventsV2 > SaveQueryButtonGroup', function() {
       });
     });
   });
+  describe('create alert from discover', () => {
+    it('renders create alert when org has create-from-discover', () => {
+      const wrapper = generateWrappedComponent(
+        location,
+        {...organization, features: ['create-from-discover']},
+        errorsViewModified,
+        savedQuery
+      );
+      const buttonCreateAlert = wrapper.find(SELECTOR_BUTTON_CREATE_ALERT);
+
+      expect(buttonCreateAlert.exists()).toBe(true);
+      expect(buttonCreateAlert.first().props().disabled).toBe(true);
+    });
+  });
 });
diff --git a/tests/js/spec/views/settings/incidentRules/constants.spec.jsx b/tests/js/spec/views/settings/incidentRules/constants.spec.jsx
new file mode 100644
index 0000000000..a8c1c3dcf5
--- /dev/null
+++ b/tests/js/spec/views/settings/incidentRules/constants.spec.jsx
@@ -0,0 +1,46 @@
+import {Dataset} from 'app/views/settings/incidentRules/types';
+import EventView from 'app/utils/discover/eventView';
+import {createRuleFromEventView} from 'app/views/settings/incidentRules/constants';
+
+describe('createRuleFromEventView()', () => {
+  it('sets transaction dataset from event.type:transaction', () => {
+    const eventView = new EventView({
+      query: 'title:"nothing" event.type:transaction',
+    });
+
+    const rule = createRuleFromEventView(eventView);
+    expect(rule.dataset).toBe(Dataset.TRANSACTIONS);
+  });
+  it('sets error dataset from event.type:error', () => {
+    const eventView = new EventView({
+      query: 'title:"nothing" event.type:error',
+    });
+
+    const rule = createRuleFromEventView(eventView);
+    expect(rule.dataset).toBe(Dataset.ERRORS);
+  });
+  it('removes event.type from query', () => {
+    const eventView = new EventView({
+      query: 'title:"nothing" event.type:error',
+    });
+
+    const rule = createRuleFromEventView(eventView);
+    expect(rule.query).toBe('title:"nothing"');
+  });
+  it('gets environment from EventView', () => {
+    const eventView = new EventView({
+      environment: ['beta'],
+    });
+
+    const rule = createRuleFromEventView(eventView);
+    expect(rule.environment).toBe('beta');
+  });
+  it('converts aggregate from EventView to alert rule', () => {
+    const eventView = new EventView({
+      yAxis: 'count_unique(user)',
+    });
+
+    const rule = createRuleFromEventView(eventView);
+    expect(rule.aggregate).toBe('count_unique(tags[sentry:user])');
+  });
+});
