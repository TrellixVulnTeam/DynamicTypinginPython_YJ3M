commit 56e2cd9af60e9a28c6a10d5aefb8a0597a01c1fc
Author: ted kaemming <t.kaemming+github@gmail.com>
Date:   Wed Aug 31 14:28:35 2016 -0700

    Add issue type distribution chart to report emails. (#4027)
    
    Also includes style changes.

diff --git a/src/sentry/tasks/reports.py b/src/sentry/tasks/reports.py
index cd974fc4da..e54d7bcadd 100644
--- a/src/sentry/tasks/reports.py
+++ b/src/sentry/tasks/reports.py
@@ -7,7 +7,6 @@ import operator
 import zlib
 from collections import namedtuple
 from datetime import timedelta
-from six.moves import reduce
 
 from django.utils import dateformat, timezone
 
@@ -15,14 +14,14 @@ from sentry import features
 from sentry.app import tsdb
 from sentry.models import (
     Activity, Group, GroupStatus, Organization, OrganizationStatus, Project,
-    Release, TagValue, Team, User, UserOption,
+    Release, TagValue, Team, User, UserOption
 )
 from sentry.tasks.base import instrumented_task
 from sentry.utils import json, redis
 from sentry.utils.dates import floor_to_utc_day, to_datetime, to_timestamp
 from sentry.utils.email import MessageBuilder
 from sentry.utils.math import mean
-
+from six.moves import reduce
 
 date_format = functools.partial(
     dateformat.format,
@@ -195,10 +194,8 @@ def prepare_project_issue_list(interval, project):
 
     queryset = project.group_set.exclude(status=GroupStatus.MUTED)
 
-    issue_ids = set()
-
     # Fetch all new issues.
-    issue_ids.update(
+    new_issue_ids = set(
         queryset.filter(
             first_seen__gte=start,
             first_seen__lt=stop,
@@ -212,7 +209,7 @@ def prepare_project_issue_list(interval, project):
     # past week. (In theory, the activity table *could* be used to answer this
     # query without the subselect, but there's no suitable indexes to make it's
     # performance predictable.)
-    issue_ids.update(
+    reopened_issue_ids = set(
         Activity.objects.filter(
             group__in=queryset.filter(
                 last_seen__gte=start,
@@ -228,33 +225,52 @@ def prepare_project_issue_list(interval, project):
         ).distinct().values_list('group_id', flat=True)
     )
 
+    issue_list_candidates = new_issue_ids | reopened_issue_ids
+
     rollup = 60 * 60 * 24
 
-    events = tsdb.get_sums(
+    event_counts = tsdb.get_sums(
         tsdb.models.group,
-        issue_ids,
+        issue_list_candidates,
         start,
         stop,
         rollup=rollup,
     )
 
-    users = tsdb.get_distinct_counts_totals(
+    user_counts = tsdb.get_distinct_counts_totals(
         tsdb.models.users_affected_by_group,
-        issue_ids,
+        issue_list_candidates,
         start,
         stop,
         rollup=rollup,
     )
 
+    new_issue_count = sum(event_counts[id] for id in new_issue_ids)
+    reopened_issue_count = sum(event_counts[id] for id in reopened_issue_ids)
+    existing_issue_count = max(
+        tsdb.get_sums(
+            tsdb.models.project,
+            [project.id],
+            start,
+            stop,
+            rollup=rollup,
+        )[project.id] - new_issue_count - reopened_issue_count,
+        0,
+    )
+
     return (
-        len(issue_ids),
-        trim_issue_list([(id, (events[id], users[id])) for id in issue_ids]),
+        [
+            new_issue_count,
+            reopened_issue_count,
+            existing_issue_count,
+        ],
+        trim_issue_list([(id, (event_counts[id], user_counts[id])) for id in issue_list_candidates]),
     )
 
 
 def merge_issue_lists(target, other):
     return (
-        target[0] + other[0],
+        merge_sequences(target[0], other[0]),
         trim_issue_list(target[1] + other[1]),
     )
 
@@ -336,7 +352,7 @@ class DummyReportBackend(ReportBackend):
 
 
 class RedisReportBackend(ReportBackend):
-    version = 0
+    version = 1
 
     def __init__(self, cluster, ttl, namespace='r'):
         self.cluster = cluster
@@ -626,6 +642,7 @@ def rewrite_issue_list((count, issues), fetch_groups=None):
 
 
 Point = namedtuple('Point', 'resolved unresolved')
+DistributionType = namedtuple('DistributionType', 'label color')
 
 
 def to_context(report, fetch_groups=None):
@@ -639,6 +656,19 @@ def to_context(report, fetch_groups=None):
             'all': sum([sum(point) for timestamp, point in series]),
             'resolved': sum([point.resolved for timestamp, point in series]),
         },
+        'distribution': {
+            'types': list(
+                zip(
+                    (
+                        DistributionType('New', '#c9c2e1'),
+                        DistributionType('Reopened', '#9990ab'),
+                        DistributionType('Existing', '#675f76'),
+                    ),
+                    issue_list[0],
+                ),
+            ),
+            'total': sum(issue_list[0]),
+        },
         'comparisons': [
             ('last week', change(aggregates[-1], aggregates[-2])),
             ('last month', change(
diff --git a/src/sentry/templates/sentry/emails/email-styles.html b/src/sentry/templates/sentry/emails/email-styles.html
index 6b97838ded..7eb991fb07 100644
--- a/src/sentry/templates/sentry/emails/email-styles.html
+++ b/src/sentry/templates/sentry/emails/email-styles.html
@@ -11,7 +11,8 @@
     padding: 0;
     margin: 0;
     background-color: #fff;
-    color: #3D4649;
+    color: #342c3e;
+    -webkit-font-smoothing: antialiased;
   }
   .main {
     max-width: 700px;
@@ -26,7 +27,7 @@
     font-weight: 300;
   }
   a {
-    color: #15A7F6;
+    color: #5688bf;
     font-weight: 500;
     text-decoration: none;
   }
@@ -147,8 +148,8 @@
   }
 
   .info-box {
-    background-color: #FDFDFE;
-    border: 1px solid #D6DBE4;
+    background-color: #f7f5fa;
+    border: 1px solid #dbd3e9;
     border-radius: 3px;
     padding: 15px;
     text-align: center;
@@ -668,15 +669,12 @@
 
   .weekly-report .legend .all,
   .weekly-report .issue-graph-bar .all {
-    background-color: #D6DBE4;
+    background-color: #e9e6ec;
   }
 
   .weekly-report .legend .resolved,
   .weekly-report .issue-graph-bar .resolved {
-    background-color: #A290D1;
-  }
-  .weekly-report .issues-resolved {
-    margin-bottom: 30px;
+    background-color: #675f76;
   }
 
   .weekly-report .issues-resolved .issues-resolved-column {
@@ -718,6 +716,15 @@
     font-size: 0;
   }
 
+  .weekly-report .issue-breakdown {
+    border-bottom: 1px solid #D6DBE4;
+    margin-bottom: 30px;
+  }
+
+  .weekly-report .issue-breakdown table {
+    margin-bottom: 40px;
+  }
+
   .weekly-report .user-impact {}
 
   .weekly-report .user-impact-stat {
@@ -726,7 +733,7 @@
     vertical-align: middle;
     text-align: center;
     font-size: 32px;
-    color: #836CC2;
+    color: #675f76;
     background-size: 90px 90px;
     background-image: url("{% absolute_asset_url 'sentry' 'images/email/circle-bg.png' %}");
   }
diff --git a/src/sentry/templates/sentry/emails/reports/body.html b/src/sentry/templates/sentry/emails/reports/body.html
index edd9267667..600dfa416e 100644
--- a/src/sentry/templates/sentry/emails/reports/body.html
+++ b/src/sentry/templates/sentry/emails/reports/body.html
@@ -87,6 +87,34 @@
     </tr>
   </table>
 
+  {% with report.distribution.total as total %}
+  <table class="issue-breakdown">
+    <tr>
+      <td>
+        <h4>Issue Breakdown</h4>
+      </td>
+      <td class="legend">
+        {% for type, count in report.distribution.types %}
+          <span class="box" style="background-color: {{ type.color }};"></span>{{ type.label }}: {% percent count total "0.1f" %}%
+        {% endfor %}
+      </td>
+    </tr>
+    <tr>
+      <td colspan="2">
+        <table>
+          <tr>
+            {% for type, count in report.distribution.types %}
+              <td width="{% widthratio count total 100 %}%" title="{{ type.label }}: {{ count }} events" style="background-color: {{ type.color }}">
+                &nbsp;
+              </td>
+            {% endfor %}
+          </tr>
+        </table>
+      </td>
+    </tr>
+  </table>
+  {% endwith %}
+
   <table class="issue-table">
     <thead>
       <tr>
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index fe3903ff31..8df0402a1f 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -9,15 +9,11 @@ from __future__ import absolute_import
 
 import functools
 import os.path
-import pytz
-import six
-
 from collections import namedtuple
 from datetime import timedelta
-from pkg_resources import parse_version as Version
-from six.moves import range
-from six.moves.urllib.parse import quote, urlencode
 
+import pytz
+import six
 from django import template
 from django.conf import settings
 from django.core.urlresolvers import reverse
@@ -26,25 +22,22 @@ from django.utils import timezone
 from django.utils.html import escape
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext as _
+from pkg_resources import parse_version as Version
+from templatetag_sugar.parser import Constant, Name, Optional, Variable
+from templatetag_sugar.register import tag
 
 from sentry import options
 from sentry.api.serializers import serialize as serialize_func
-from sentry.models import UserAvatar, Organization
+from sentry.models import Organization, UserAvatar
 from sentry.utils import json
-from sentry.utils.strings import to_unicode
 from sentry.utils.avatar import (
-    get_gravatar_url,
-    get_email_avatar,
-    get_letter_avatar
+    get_email_avatar, get_gravatar_url, get_letter_avatar
 )
 from sentry.utils.javascript import to_json
-from sentry.utils.strings import (
-    soft_break as _soft_break,
-    soft_hyphenate,
-    truncatechars,
-)
-from templatetag_sugar.register import tag
-from templatetag_sugar.parser import Name, Variable, Constant, Optional
+from sentry.utils.strings import soft_break as _soft_break
+from sentry.utils.strings import soft_hyphenate, to_unicode, truncatechars
+from six.moves import range
+from six.moves.urllib.parse import quote, urlencode
 
 SentryVersion = namedtuple('SentryVersion', [
     'current', 'latest', 'update_available', 'build',
@@ -321,10 +314,16 @@ def with_metadata(group_list, request):
 
 
 @register.simple_tag
-def percent(value, total):
+def percent(value, total, format=None):
     if not (value and total):
-        return 0
-    return int(int(value) / float(total) * 100)
+        result = 0
+    else:
+        result = int(value) / float(total) * 100
+
+    if format is None:
+        return int(result)
+    else:
+        return ('%%%s' % format) % result
 
 
 @register.filter
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 315d8a0dd7..04a7cd3cd5 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -2,47 +2,33 @@ from __future__ import absolute_import, print_function
 
 import itertools
 import logging
-import six
 import time
 import traceback
 import uuid
+from datetime import datetime, timedelta
+from random import Random
 
-from datetime import (
-    datetime,
-    timedelta,
-)
+import six
 from django.contrib.webdesign.lorem_ipsum import WORDS
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 from django.utils.safestring import mark_safe
 from django.views.generic import View
-from random import Random
 
 from sentry.constants import LOG_LEVELS
 from sentry.digests import Record
-from sentry.digests.notifications import (
-    Notification,
-    build_digest,
-)
+from sentry.digests.notifications import Notification, build_digest
 from sentry.digests.utilities import get_digest_metadata
 from sentry.http import get_server_hostname
 from sentry.models import (
-    Activity,
-    Event,
-    Group,
-    GroupStatus,
-    Organization,
-    OrganizationMember,
-    Project,
-    Release,
-    Rule,
-    Team,
+    Activity, Event, Group, GroupStatus, Organization, OrganizationMember,
+    Project, Release, Rule, Team
 )
 from sentry.plugins.sentry_mail.activity import emails
 from sentry.utils.dates import to_datetime, to_timestamp
-from sentry.utils.samples import load_data
 from sentry.utils.email import inline_css
 from sentry.utils.http import absolute_uri
+from sentry.utils.samples import load_data
 from sentry.web.decorators import login_required
 from sentry.web.helpers import render_to_response, render_to_string
 
@@ -457,14 +443,19 @@ def report(request):
     release_id_generator = make_release_id_generator()
 
     def build_issue_list():
-        count = random.randint(0, int(random.paretovariate(0.4)))
-        return count, [(
+        summaries = []
+        for i in range(3):
+            summaries.append(
+                int(random.weibullvariate(10, 1) * random.paretovariate(0.5))
+            )
+
+        return summaries, [(
             next(group_id_sequence),
             (
                 int(random.paretovariate(0.3)),
                 int(random.paretovariate(0.3)),
             ),
-        ) for _ in xrange(0, min(count, 5))]
+        ) for _ in xrange(0, random.randint(1, 5))]
 
     def build_release_list():
         return reports.trim_release_list([
