commit f8a1507d036f9d721f5f931adea4e5dbaaa8a130
Author: Ted Kaemming <ted@kaemming.com>
Date:   Mon Mar 28 17:31:26 2016 -0700

    Add tests for Java raw stack trace rendering.

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index f26ef7cf86..0c51c2488c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -115,7 +115,7 @@ export function getCocoaFrame(frame) {
   return result;
 }
 
-function getJavaPreamble(exception) {
+export function getJavaPreamble(exception) {
   let result = `${exception.type}: ${exception.value}`;
   if (exception.module) {
     result = `${exception.module}.${result}`;
diff --git a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
index 7396a8681b..89b587b81b 100644
--- a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
@@ -1,4 +1,4 @@
-import {getJavaFrame} from 'app/components/events/interfaces/rawStacktraceContent';
+import render, {getJavaFrame, getJavaPreamble} from 'app/components/events/interfaces/rawStacktraceContent';
 
 describe('RawStacktraceContent', function() {
   describe('getJavaFrame()', function() {
@@ -24,5 +24,52 @@ describe('RawStacktraceContent', function() {
       })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run');
     });
   });
+
+  describe('getJavaPreamble()', function () {
+    expect(getJavaPreamble({
+      type: 'Baz',
+      value: 'message'
+    })).to.eql('Baz: message');
+
+    expect(getJavaPreamble({
+      module: 'foo.bar',
+      type: 'Baz',
+      value: 'message'
+    })).to.eql('foo.bar.Baz: message');
+  });
+
+  describe('render()', function () {
+    let exception = {
+          module: 'example.application',
+          type: 'Error',
+          value: 'an error occurred'
+        },
+        data = {
+          frames: [
+            {
+              function: 'main',
+              module: 'example.application',
+              lineNo: 1,
+              filename: 'application'
+            },
+            {
+              function: 'doThing',
+              module: 'example.application',
+              lineNo: 2,
+              filename: 'application'
+            }
+          ]
+        };
+
+    expect(render(data, 'java', exception)).to.eql(
+`example.application.Error: an error occurred
+    at example.application.doThing(application:2)
+    at example.application.main(application:1)`);
+
+    expect(render(data, 'python', exception)).to.eql(
+`Error: an error occurred
+  File "application", line 1, in main
+  File "application", line 2, in doThing`);
+  });
 });
 
