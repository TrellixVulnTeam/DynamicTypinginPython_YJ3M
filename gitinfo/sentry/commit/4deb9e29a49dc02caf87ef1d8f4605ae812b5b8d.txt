commit 4deb9e29a49dc02caf87ef1d8f4605ae812b5b8d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jun 28 14:55:17 2018 -0700

    ref(integrations): DRY remove/add integration project logic (#8845)

diff --git a/src/sentry/static/sentry/app/actionCreators/integrations.jsx b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
new file mode 100644
index 0000000000..5df7599db5
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/integrations.jsx
@@ -0,0 +1,51 @@
+import {Client} from 'app/api';
+import {
+  addErrorMessage,
+  addLoadingMessage,
+  addSuccessMessage,
+} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+
+const api = new Client();
+
+/**
+ * Removes an integration from a project.
+ *
+ * @param {String} orgId Organization Slug
+ * @param {String} projectId Project Slug
+ * @param {Object} integration The organization integration to remove
+ */
+export function removeIntegrationFromProject(orgId, projectId, integration) {
+  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;
+  addLoadingMessage();
+
+  return api.requestPromise(endpoint, {method: 'DELETE'}).then(
+    () => {
+      addSuccessMessage(t('Disabled %s for %s', integration.name, projectId));
+    },
+    err => {
+      addErrorMessage(t('Failed to disable %s for %s', integration.name, projectId));
+    }
+  );
+}
+
+/**
+ * Add an integration to a project
+ *
+ * @param {String} orgId Organization Slug
+ * @param {String} projectId Project Slug
+ * @param {Object} integration The organization integration to add
+ */
+export function addIntegrationToProject(orgId, projectId, integration) {
+  const endpoint = `/projects/${orgId}/${projectId}/integrations/${integration.id}/`;
+  addLoadingMessage();
+
+  return api.requestPromise(endpoint, {method: 'PUT'}).then(
+    () => {
+      addSuccessMessage(t('Enabled %s for %s', integration.name, projectId));
+    },
+    err => {
+      addErrorMessage(t('Failed to enabled %s for %s', integration.name, projectId));
+    }
+  );
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx
index feff8581de..c42caa2428 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProjects.jsx
@@ -9,6 +9,10 @@ import {
   PanelHeader,
   PanelItem,
 } from 'app/components/panels';
+import {
+  addIntegrationToProject,
+  removeIntegrationFromProject,
+} from 'app/actionCreators/integrations';
 import {t} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
 import Button from 'app/components/buttons/button';
@@ -16,7 +20,6 @@ import Confirm from 'app/components/confirm';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 import DropdownButton from 'app/components/dropdownButton';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
-import IndicatorStore from 'app/stores/indicatorStore';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
 import withProjects from 'app/utils/withProjects';
 
@@ -44,59 +47,22 @@ class IntegrationProjects extends AsyncComponent {
   removeProject = project => {
     const orgId = this.context.organization.slug;
     const {integration} = this.state;
-    const saveIndicator = IndicatorStore.add(t('Removing integration from %s', project));
-
-    const options = {
-      method: 'DELETE',
-      success: () => {
-        this.setState({
-          integration: {
-            ...integration,
-            projects: integration.projects.filter(p => p !== project),
-          },
-        });
-        IndicatorStore.addSuccess(t('Removed integration from %s', project));
-      },
-      error: () =>
-        IndicatorStore.addError(t('Failed to remove integration from %s', project)),
-      complete: () => IndicatorStore.remove(saveIndicator),
-    };
 
-    this.api.request(
-      `/projects/${orgId}/${project}/integrations/${integration.id}/`,
-      options
-    );
+    removeIntegrationFromProject(orgId, project, integration).then(() => {
+      const projects = integration.projects.filter(p => p !== project);
+      this.setState({integration: {...integration, projects}});
+    });
   };
 
   addProject = ({value}) => {
     const project = value;
     const orgId = this.context.organization.slug;
     const {integration} = this.state;
-    const saveIndicator = IndicatorStore.add(t('Adding integration to %s', project));
-    this.setState({adding: true});
 
-    const options = {
-      method: 'PUT',
-      success: () => {
-        this.setState({
-          integration: {
-            ...integration,
-            projects: [...integration.projects, project],
-          },
-        });
-        IndicatorStore.addSuccess(t('Added integration to %s', project));
-      },
-      error: () => IndicatorStore.addError(t('Failed to add integration to %s', project)),
-      complete: () => {
-        IndicatorStore.remove(saveIndicator);
-        this.setState({adding: false});
-      },
-    };
-
-    this.api.request(
-      `/projects/${orgId}/${project}/integrations/${integration.id}/`,
-      options
-    );
+    addIntegrationToProject(orgId, project, integration).then(() => {
+      const intg = {...integration, projects: [...integration.projects, project]};
+      this.setState({integration: intg});
+    });
   };
 
   renderDropdown() {
