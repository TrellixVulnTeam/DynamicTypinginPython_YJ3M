commit f668f7477794a9a14c432007632575deaae7ad5e
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 24 06:06:12 2015 +0100

    Restrict various membership queries to only active users

diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index b295c04a91..6dffa08f29 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from django.db import transaction
+from django.db.models import Q
 from rest_framework import serializers
 from rest_framework.response import Response
 
@@ -48,9 +49,11 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             queryset = OrganizationMember.objects.filter(
                 organization=organization,
                 user__id=request.user.id,
+                user__is_active=True,
             )
         else:
             queryset = OrganizationMember.objects.filter(
+                Q(user__is_active=True) | Q(user__isnull=True),
                 organization=organization,
                 id=member_id,
             )
@@ -64,6 +67,7 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
             organization=member.organization_id,
             role=roles.get_top_dog().id,
             user__isnull=False,
+            user__is_active=True,
         ).exclude(id=member.id)
         if queryset.exists():
             return False
diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index 6f15d9dad5..7ae5ef4305 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
 from rest_framework import serializers
 from rest_framework.response import Response
 
@@ -59,9 +60,11 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
             queryset = OrganizationMember.objects.filter(
                 organization=organization,
                 user__id=request.user.id,
+                user__is_active=True,
             )
         else:
             queryset = OrganizationMember.objects.filter(
+                Q(user__is_active=True) | Q(user__isnull=True),
                 organization=organization,
                 id=member_id,
             )
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 9ae977b578..ce34b21323 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -145,6 +145,7 @@ class Fixtures(object):
 
         kwargs.setdefault('username', email)
         kwargs.setdefault('is_staff', True)
+        kwargs.setdefault('is_active', True)
         kwargs.setdefault('is_superuser', False)
 
         user = User(email=email, **kwargs)
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 0c6e490739..05d07dc6b3 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -75,7 +75,10 @@ class UserField(CharField):
         if not value:
             return None
         try:
-            return User.objects.get(username=value)
+            return User.objects.get(
+                username=value,
+                is_active=True,
+            )
         except User.DoesNotExist:
             raise ValidationError(_('Invalid username'))
 
diff --git a/src/sentry/web/forms/invite_organization_member.py b/src/sentry/web/forms/invite_organization_member.py
index 3816030dfb..fdd476f2d4 100644
--- a/src/sentry/web/forms/invite_organization_member.py
+++ b/src/sentry/web/forms/invite_organization_member.py
@@ -24,6 +24,7 @@ class InviteOrganizationMemberForm(forms.ModelForm):
             existing = OrganizationMember.objects.filter(
                 organization=organization,
                 user__email__iexact=om.email,
+                user__is_active=True,
             )[0]
         except IndexError:
             pass
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index a81c5e2ad4..190ec548c6 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from django.contrib import messages
 from django.core.urlresolvers import reverse
+from django.db.models import Q
 from django.utils.translation import ugettext_lazy as _, ugettext
 
 from sentry import roles
@@ -52,7 +53,10 @@ class OrganizationMemberSettingsView(OrganizationView):
 
     def handle(self, request, organization, member_id):
         try:
-            member = OrganizationMember.objects.get(id=member_id)
+            member = OrganizationMember.objects.get(
+                Q(user__is_active=True) | Q(user__isnull=True),
+                id=member_id,
+            )
         except OrganizationMember.DoesNotExist:
             return self.redirect(reverse('sentry'))
 
diff --git a/src/sentry/web/frontend/organization_members.py b/src/sentry/web/frontend/organization_members.py
index 32d7183777..82ce5d6327 100644
--- a/src/sentry/web/frontend/organization_members.py
+++ b/src/sentry/web/frontend/organization_members.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.db.models import Q
+
 from sentry import roles
 from sentry.models import (
     AuthProvider, OrganizationAccessRequest, OrganizationMember,
@@ -11,6 +13,7 @@ from sentry.web.frontend.base import OrganizationView
 class OrganizationMembersView(OrganizationView):
     def handle(self, request, organization):
         queryset = OrganizationMember.objects.filter(
+            Q(user__is_active=True) | Q(user__isnull=True),
             organization=organization,
         ).select_related('user')
 
@@ -44,9 +47,11 @@ class OrganizationMembersView(OrganizationView):
         if can_approve_requests_globally:
             access_requests = list(OrganizationAccessRequest.objects.filter(
                 team__organization=organization,
+                member__user__is_active=True,
             ).select_related('team', 'member__user'))
         elif request.access.has_scope('team:write'):
             access_requests = list(OrganizationAccessRequest.objects.filter(
+                member__user__is_active=True,
                 team__in=OrganizationMemberTeam.objects.filter(
                     organizationmember__organization=organization,
                     organizationmember__user=request.user,
