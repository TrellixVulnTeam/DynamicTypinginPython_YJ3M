commit 23b61d07030a00e2666e7aabf28c985d0364fd4c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Jul 29 13:04:40 2019 -0700

    ref: Remove legacy events behavior (#13939)
    
    Removes the "snuba.events-queries.enabled" option and legacy events
    code. We no longer need this switch since running Sentry / master
    without Snuba is no longer an option.

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 74b5024b3c..839dfbf064 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -9,7 +9,6 @@ try:
 except ImportError:
     from django.http import HttpResponse, StreamingHttpResponse
 
-from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.models import Event, SnubaEvent
@@ -25,16 +24,9 @@ class EventAppleCrashReportEndpoint(ProjectEndpoint):
         `````````````````````````````````````````````
 
         This endpoint returns the an apple crash report for a specific event.
-        The event ID is either the event as it appears in the Sentry database
-        or the event ID that is reported by the client upon submission.
         This works only if the event.platform == cocoa
         """
-
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project_id=project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project_id=project.id)
         if event is None:
             raise ResourceDoesNotExist
 
diff --git a/src/sentry/api/endpoints/event_attachment_details.py b/src/sentry/api/endpoints/event_attachment_details.py
index 1a8b437c7e..752964eed4 100644
--- a/src/sentry/api/endpoints/event_attachment_details.py
+++ b/src/sentry/api/endpoints/event_attachment_details.py
@@ -8,12 +8,12 @@ try:
 except ImportError:
     from django.http import StreamingHttpResponse
 
-from sentry import features, options, roles
+from sentry import features, roles
 from sentry.api.bases.project import ProjectEndpoint, ProjectPermission
 from sentry.api.serializers.models.organization import ATTACHMENTS_ROLE_DEFAULT
 from sentry.auth.superuser import is_active_superuser
 from sentry.auth.system import is_system_auth
-from sentry.models import Event, SnubaEvent, EventAttachment, OrganizationMember
+from sentry.models import SnubaEvent, EventAttachment, OrganizationMember
 
 
 class EventAttachmentDetailsPermission(ProjectPermission):
@@ -80,11 +80,7 @@ class EventAttachmentDetailsEndpoint(ProjectEndpoint):
                             project.organization, actor=request.user):
             return self.respond(status=404)
 
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
         if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_attachments.py b/src/sentry/api/endpoints/event_attachments.py
index 4d679853e9..3f9568d32f 100644
--- a/src/sentry/api/endpoints/event_attachments.py
+++ b/src/sentry/api/endpoints/event_attachments.py
@@ -1,10 +1,10 @@
 from __future__ import absolute_import
 
-from sentry import features, options
+from sentry import features
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
-from sentry.models import Event, SnubaEvent, EventAttachment
+from sentry.models import SnubaEvent, EventAttachment
 
 
 class EventAttachmentsEndpoint(ProjectEndpoint):
@@ -24,11 +24,7 @@ class EventAttachmentsEndpoint(ProjectEndpoint):
                             project.organization, actor=request.user):
             return self.respond(status=404)
 
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
         if event is None:
             return self.respond({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index a5011c088e..5badd9675b 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.models import Commit, Event, SnubaEvent, Release
 from sentry.utils.committers import get_serialized_event_file_committers
@@ -22,12 +21,7 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
                                  retrieve (as reported by the raven client).
         :auth: required
         """
-
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
         if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/event_grouping_info.py b/src/sentry/api/endpoints/event_grouping_info.py
index 9d49c19e63..a9a4191d1f 100644
--- a/src/sentry/api/endpoints/event_grouping_info.py
+++ b/src/sentry/api/endpoints/event_grouping_info.py
@@ -4,7 +4,6 @@ import six
 
 from django.http import HttpResponse
 
-from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.grouping.api import GroupingConfigNotFound
@@ -21,12 +20,7 @@ class EventGroupingInfoEndpoint(ProjectEndpoint):
         This endpoint returns a JSON dump of the metadata that went into the
         grouping algorithm.
         """
-
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project_id=project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project_id=project.id)
         if event is None:
             raise ResourceDoesNotExist
 
diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
index 647341897f..b959b09574 100644
--- a/src/sentry/api/endpoints/event_owners.py
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-from sentry import options
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.fields.actor import Actor
 from sentry.api.serializers import serialize
@@ -21,12 +20,7 @@ class EventOwnersEndpoint(ProjectEndpoint):
         :pparam string event_id: the id of the event.
         :auth: required
         """
-
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        event_cls = SnubaEvent if use_snuba else Event
-
-        event = event_cls.objects.from_event_id(event_id, project.id)
+        event = SnubaEvent.objects.from_event_id(event_id, project.id)
         if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 97a83ca4d2..9662617952 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -3,13 +3,12 @@ from __future__ import absolute_import
 import six
 
 from datetime import timedelta
-from django.db.models import Q
 from django.utils import timezone
 from rest_framework.response import Response
 from functools import partial
 
 
-from sentry import features, options, quotas, tagstore
+from sentry import features
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases import GroupEndpoint
 from sentry.api.event_search import get_snuba_query_args
@@ -17,15 +16,14 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.helpers.environments import get_environments
 from sentry.api.helpers.events import get_direct_hit_response
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
-from sentry.api.paginator import DateTimePaginator, GenericOffsetPaginator
+from sentry.api.paginator import GenericOffsetPaginator
 from sentry.api.utils import get_date_range_from_params
-from sentry.models import Event, Group, SnubaEvent
+from sentry.models import Group, SnubaEvent
 from sentry.search.utils import (
     InvalidQuery,
     parse_query,
 )
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.validators import normalize_event_id
 from sentry.utils.snuba import raw_query
 
 
@@ -70,16 +68,10 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         except (NoResults, ResourceDoesNotExist):
             return Response([])
 
-        use_snuba = (
-            request.GET.get('enable_snuba') == '1'
-            or options.get('snuba.events-queries.enabled')
-        )
-
-        backend = self._get_events_snuba if use_snuba else self._get_events_legacy
         start, end = get_date_range_from_params(request.GET, optional=True)
 
         try:
-            return backend(request, group, environments, query, tags, start, end)
+            return self._get_events_snuba(request, group, environments, query, tags, start, end)
         except GroupEventsError as exc:
             return Response({'detail': six.text_type(exc)}, status=400)
 
@@ -132,63 +124,6 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
 
-    def _get_events_legacy(
-        self,
-        request,
-        group,
-        environments,
-        query,
-        tags,
-        start,
-        end,
-    ):
-        events = Event.objects.filter(group_id=group.id)
-
-        if query:
-            q = Q(message__icontains=query)
-
-            event_id = normalize_event_id(query)
-            if event_id:
-                q |= Q(event_id__exact=event_id)
-
-            events = events.filter(q)
-
-        if tags:
-            event_filter = tagstore.get_group_event_filter(
-                group.project_id,
-                group.id,
-                [env.id for env in environments],
-                tags,
-                start,
-                end,
-            )
-
-            if not event_filter:
-                return Response([])
-
-            events = events.filter(**event_filter)
-
-        # Filter start/end here in case we didn't filter by tags at all
-        if start:
-            events = events.filter(datetime__gte=start)
-        if end:
-            events = events.filter(datetime__lte=end)
-
-        # filter out events which are beyond the retention period
-        retention = quotas.get_event_retention(organization=group.project.organization)
-        if retention:
-            events = events.filter(
-                datetime__gte=timezone.now() - timedelta(days=retention)
-            )
-
-        return self.paginate(
-            request=request,
-            queryset=events,
-            order_by='-datetime',
-            on_results=lambda x: serialize(x, request.user),
-            paginator_cls=DateTimePaginator,
-        )
-
     def _get_search_query_and_tags(self, request, group, environments=None):
         raw_query = request.GET.get('query')
 
diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index f2d3b1c760..50f03217ee 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -3,11 +3,10 @@ from __future__ import absolute_import
 from datetime import datetime
 from rest_framework.response import Response
 
-from sentry import options
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import DetailedEventSerializer, serialize
-from sentry.models import Event, SnubaEvent
+from sentry.models import SnubaEvent
 
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -42,11 +41,6 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         :auth: required
         """
 
-        use_snuba = options.get('snuba.events-queries.enabled')
-
-        if not use_snuba:
-            return self.get_legacy(request, project, event_id)
-
         snuba_event = SnubaEvent.objects.from_event_id(event_id, project.id)
 
         if snuba_event is None:
@@ -63,23 +57,6 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
 
         return Response(data)
 
-    def get_legacy(self, request, project, event_id):
-        event = Event.objects.from_event_id(event_id, project.id)
-        if event is None:
-            return Response({'detail': 'Event not found'}, status=404)
-
-        Event.objects.bind_nodes([event], 'data')
-
-        data = serialize(event, request.user, DetailedEventSerializer())
-        next_event_id = event.next_event_id()
-        prev_event_id = event.prev_event_id()
-        # TODO this is inconsistent with the event_details API which uses the
-        # `id` instead of the `event_id`
-        data['nextEventID'] = next_event_id
-        data['previousEventID'] = prev_event_id
-
-        return Response(data)
-
 
 class EventJsonEndpoint(ProjectEndpoint):
 
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index 6c708d027f..f0279f7e22 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -4,7 +4,6 @@ from datetime import timedelta
 from django.utils import timezone
 from functools import partial
 
-from sentry import options
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerializer
@@ -22,37 +21,21 @@ def list_project_available_samples_scenario(runner):
 class ProjectEventsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
-    def _get_events_legacy(self, request, project):
-        from sentry import quotas
-        from sentry.api.paginator import DateTimePaginator
-        from sentry.models import Event
-
-        events = Event.objects.filter(
-            project_id=project.id,
-        )
-
-        query = request.GET.get('query')
-        if query:
-            events = events.filter(
-                message__icontains=query,
-            )
+    @attach_scenarios([list_project_available_samples_scenario])
+    def get(self, request, project):
+        """
+        List a Project's Events
+        ```````````````````````
 
-        # filter out events which are beyond the retention period
-        retention = quotas.get_event_retention(organization=project.organization)
-        if retention:
-            events = events.filter(
-                datetime__gte=timezone.now() - timedelta(days=retention)
-            )
+        Return a list of events bound to a project.
 
-        return self.paginate(
-            request=request,
-            queryset=events,
-            order_by='-datetime',
-            on_results=lambda x: serialize(x, request.user),
-            paginator_cls=DateTimePaginator,
-        )
+        Note: This endpoint is experimental and may be removed without notice.
 
-    def _get_events_snuba(self, request, project):
+        :pparam string organization_slug: the slug of the organization the
+                                          groups belong to.
+        :pparam string project_slug: the slug of the project the groups
+                                     belong to.
+        """
         from sentry.api.paginator import GenericOffsetPaginator
         from sentry.models import SnubaEvent
         from sentry.utils.snuba import raw_query
@@ -85,22 +68,3 @@ class ProjectEventsEndpoint(ProjectEndpoint):
                 [SnubaEvent(row) for row in results], request.user, serializer),
             paginator=GenericOffsetPaginator(data_fn=data_fn)
         )
-
-    @attach_scenarios([list_project_available_samples_scenario])
-    def get(self, request, project):
-        """
-        List a Project's Events
-        ```````````````````````
-
-        Return a list of events bound to a project.
-
-        Note: This endpoint is experimental and may be removed without notice.
-
-        :pparam string organization_slug: the slug of the organization the
-                                          groups belong to.
-        :pparam string project_slug: the slug of the project the groups
-                                     belong to.
-        """
-        use_snuba = options.get('snuba.events-queries.enabled')
-        backend = self._get_events_snuba if use_snuba else self._get_events_legacy
-        return backend(request, project)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index cbd66532b4..75e38ff6d6 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -152,7 +152,6 @@ register('snuba.search.chunk-growth-rate', default=1.5)
 register('snuba.search.max-chunk-size', default=2000)
 register('snuba.search.max-total-chunk-time-seconds', default=30.0)
 register('snuba.search.hits-sample-size', default=100)
-register('snuba.events-queries.enabled', type=Bool, default=True)
 register('snuba.track-outcomes-sample-rate', default=0.0)
 
 # Kafka Publisher
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 649faf88f2..78074b8f90 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -6,14 +6,13 @@ from celery.task import current
 from django.core.urlresolvers import reverse
 from requests.exceptions import RequestException
 
-from sentry import options
 from sentry.http import safe_urlopen
 from sentry.tasks.base import instrumented_task, retry
 from sentry.utils import metrics
 from sentry.utils.http import absolute_uri
 from sentry.api.serializers import serialize, AppPlatformEvent
 from sentry.models import (
-    SentryAppInstallation, Event, EventCommon, Group, Project, Organization, User, ServiceHook, ServiceHookProject, SentryApp, SnubaEvent,
+    SentryAppInstallation, EventCommon, Group, Project, Organization, User, ServiceHook, ServiceHookProject, SentryApp, SnubaEvent,
 )
 from sentry.models.sentryapp import VALID_EVENTS
 
@@ -32,11 +31,9 @@ RESOURCE_RENAMES = {
     'Group': 'issue',
 }
 
-USE_SNUBA = options.get('snuba.events-queries.enabled')
-
 TYPES = {
     'Group': Group,
-    'Error': SnubaEvent if USE_SNUBA else Event,
+    'Error': SnubaEvent,
 }
 
 
diff --git a/src/sentry/web/frontend/group_event_json.py b/src/sentry/web/frontend/group_event_json.py
index eddf145f1c..0f626d2c0b 100644
--- a/src/sentry/web/frontend/group_event_json.py
+++ b/src/sentry/web/frontend/group_event_json.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import, division
 
 from django.http import Http404, HttpResponse
 
-from sentry import options
 from sentry.models import Event, SnubaEvent, Group, GroupMeta, get_group_with_redirect
 from sentry.utils import json
 from sentry.web.frontend.base import OrganizationView
@@ -12,8 +11,6 @@ class GroupEventJsonView(OrganizationView):
     required_scope = 'event:read'
 
     def get(self, request, organization, group_id, event_id_or_latest):
-        use_snuba = options.get('snuba.events-queries.enabled')
-
         try:
             # TODO(tkaemming): This should *actually* redirect, see similar
             # comment in ``GroupEndpoint.convert_args``.
@@ -28,8 +25,7 @@ class GroupEventJsonView(OrganizationView):
             # circumstances (such as a post_save signal failing)
             event = group.get_latest_event() or Event(group=group)
         else:
-            event_cls = SnubaEvent if use_snuba else Event
-            event = event_cls.objects.from_event_id(event_id_or_latest, group.project.id)
+            event = SnubaEvent.objects.from_event_id(event_id_or_latest, group.project.id)
 
         if event is None or (event.group_id != int(group_id)):
             raise Http404
diff --git a/src/sentry/web/frontend/project_event.py b/src/sentry/web/frontend/project_event.py
index 1b7f663d27..4b8127b546 100644
--- a/src/sentry/web/frontend/project_event.py
+++ b/src/sentry/web/frontend/project_event.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 from django.http import HttpResponseRedirect, Http404
 from django.core.urlresolvers import reverse
 
-from sentry import options
-from sentry.models import Event, SnubaEvent
+from sentry.models import SnubaEvent
 from sentry.web.frontend.base import ProjectView
 
 
@@ -15,9 +14,7 @@ class ProjectEventRedirect(ProjectView):
         """
         Given a client event id and project, redirects to the event page
         """
-        use_snuba = options.get('snuba.events-queries.enabled')
-        event_cls = SnubaEvent if use_snuba else Event
-        event = event_cls.objects.from_event_id(client_event_id, project.id)
+        event = SnubaEvent.objects.from_event_id(client_event_id, project.id)
 
         if event is None:
             raise Http404
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
deleted file mode 100644
index b5c7495484..0000000000
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ /dev/null
@@ -1,321 +0,0 @@
-from __future__ import absolute_import
-
-import six
-
-from datetime import timedelta
-from django.utils import timezone
-from freezegun import freeze_time
-from mock import patch
-from rest_framework.response import Response
-
-from sentry import options, tagstore
-from sentry.models import Environment
-from sentry.testutils import APITestCase
-
-
-class GroupEventsTest(APITestCase):
-    def setUp(self):
-        super(GroupEventsTest, self).setUp()
-        options.set('snuba.events-queries.enabled', False)
-
-    def tearDown(self):
-        options.set('snuba.events-queries.enabled', True)
-
-    def test_simple(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(event_id='a' * 32, group=group)
-        event_2 = self.create_event(event_id='b' * 32, group=group)
-
-        url = u'/api/0/issues/{}/events/'.format(group.id)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_1.id),
-                six.text_type(event_2.id),
-            ]
-        )
-
-    def test_tags(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(event_id='a' * 32, group=group)
-        event_2 = self.create_event(event_id='b' * 32, group=group)
-
-        tagkey_1 = tagstore.create_tag_key(
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key='foo')
-        tagkey_2 = tagstore.create_tag_key(
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key='bar')
-        tagvalue_1 = tagstore.create_tag_value(
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key='foo',
-            value='baz')
-        tagvalue_2 = tagstore.create_tag_value(
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key='bar',
-            value='biz')
-        tagvalue_3 = tagstore.create_tag_value(
-            project_id=group.project_id,
-            environment_id=self.environment.id,
-            key='bar',
-            value='buz')
-
-        tagstore.create_event_tags(
-            project_id=group.project_id,
-            group_id=group.id,
-            environment_id=self.environment.id,
-            event_id=event_1.id,
-            tags=[
-                (tagkey_1.key, tagvalue_1.value),
-                (tagkey_2.key, tagvalue_3.value),
-            ],
-        )
-        tagstore.create_event_tags(
-            project_id=group.project_id,
-            group_id=group.id,
-            environment_id=self.environment.id,
-            event_id=event_2.id,
-            tags=[
-                (tagkey_2.key, tagvalue_2.value),
-            ],
-        )
-
-        url = u'/api/0/issues/{}/events/'.format(group.id)
-        response = self.client.get(url + '?query=foo:baz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(event_1.id)
-
-        response = self.client.get(url + '?query=bar:biz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(event_2.id)
-
-        response = self.client.get(url + '?query=bar:biz%20foo:baz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 0
-
-        response = self.client.get(url + '?query=bar:buz%20foo:baz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(event_1.id)
-
-        response = self.client.get(url + '?query=bar:baz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 0
-
-        response = self.client.get(url + '?query=a:b', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 0
-
-        response = self.client.get(url + '?query=bar:b', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 0
-
-        response = self.client.get(url + '?query=bar:baz', format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 0
-
-    def test_search_event_by_id(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(event_id='a' * 32, group=group)
-        self.create_event(event_id='b' * 32, group=group)
-        query = event_1.event_id
-
-        url = u'/api/0/issues/{}/events/?query={}'.format(group.id, query)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['eventID'] == event_1.event_id
-
-    def test_search_event_by_message(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        event_1 = self.create_event(event_id='a' * 32, group=group, message="foo bar hello world")
-
-        event_2 = self.create_event(event_id='b' * 32, group=group, message='this bar hello world ')
-
-        query_1 = "foo"
-        query_2 = "hello+world"
-
-        # Single Word Query
-        url = u'/api/0/issues/{}/events/?query={}'.format(group.id, query_1)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(
-            event_1.id) and response.data[0]['eventID'] == event_1.event_id
-
-        # Multiple Word Query
-        url = u'/api/0/issues/{}/events/?query={}'.format(group.id, query_2)
-        response = self.client.get(url, format='json')
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_1.id),
-                six.text_type(event_2.id),
-            ]
-        )
-
-    def test_environment(self):
-        self.login_as(user=self.user)
-
-        group = self.create_group()
-        events = {}
-
-        for name in ['production', 'development']:
-            environment = Environment.get_or_create(group.project, name)
-
-            tagstore.get_or_create_tag_key(
-                project_id=group.project_id,
-                environment_id=environment.id,
-                key='environment',
-            )
-
-            tagstore.create_tag_value(
-                project_id=group.project_id,
-                environment_id=environment.id,
-                key='environment',
-                value=name,
-            )
-
-            events[name] = event = self.create_event(
-                group=group,
-                tags={'environment': name},
-            )
-
-            tagstore.create_event_tags(
-                project_id=group.project_id,
-                group_id=group.id,
-                environment_id=environment.id,
-                event_id=event.id,
-                tags=[
-                    ('environment', name),
-                ],
-            )
-
-        url = u'/api/0/issues/{}/events/'.format(group.id)
-        response = self.client.get(url + '?environment=production', format='json')
-
-        assert response.status_code == 200, response.content
-        assert set(map(lambda x: x['id'], response.data)) == set([
-            six.text_type(events['production'].id),
-        ])
-
-        url = u'/api/0/issues/{}/events/'.format(group.id)
-        response = self.client.get(url + '?environment=invalid', format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data == []
-
-        url = u'/api/0/issues/{}/events/'.format(group.id)
-        response = self.client.get(
-            url + '?environment=production&query=environment:development',
-            format='json')
-
-        assert response.status_code == 200, response.content
-        assert response.data == []
-
-    def test_filters_based_on_retention(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        group = self.create_group(project=project)
-        self.create_event(
-            event_id='a' * 32,
-            group=group,
-            datetime=timezone.now() - timedelta(days=2),
-        )
-        event_2 = self.create_event(event_id='b' * 32, group=group)
-
-        with self.options({'system.event-retention-days': 1}):
-            response = self.client.get(u'/api/0/issues/{}/events/'.format(group.id))
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_2.id),
-            ]
-        )
-
-    @freeze_time()
-    def test_date_filters(self):
-        self.login_as(user=self.user)
-
-        project = self.create_project()
-        group = self.create_group(project=project)
-        event_1 = self.create_event(
-            event_id='a' * 32,
-            group=group,
-            datetime=timezone.now() - timedelta(days=2),
-        )
-        event_2 = self.create_event(event_id='b' * 32, group=group)
-
-        response = self.client.get(
-            u'/api/0/issues/{}/events/'.format(group.id),
-            data={
-                'statsPeriod': '3d',
-            },
-        )
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 2
-        assert sorted(map(lambda x: x['id'], response.data)) == sorted(
-            [
-                six.text_type(event_1.id),
-                six.text_type(event_2.id),
-            ]
-        )
-
-        response = self.client.get(
-            u'/api/0/issues/{}/events/'.format(group.id),
-            data={
-                'statsPeriod': '1d',
-            },
-        )
-
-        assert response.status_code == 200, response.content
-        assert len(response.data) == 1
-        assert response.data[0]['id'] == six.text_type(event_2.id)
-
-    def test_force_snuba(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-        group = self.create_group(project=project)
-        with patch('sentry.api.endpoints.group_events.GroupEventsEndpoint._get_events_snuba') as get_events_snuba:
-            get_events_snuba.return_value = Response([])
-            self.client.get(
-                u'/api/0/issues/{}/events/'.format(group.id),
-                data={
-                    'statsPeriod': '3d',
-                    'enable_snuba': '1',
-                },
-            )
-            assert get_events_snuba.call_count == 1
diff --git a/tests/snuba/api/endpoints/test_group_events.py b/tests/snuba/api/endpoints/test_group_events.py
index f558ef45c5..2528db57e7 100644
--- a/tests/snuba/api/endpoints/test_group_events.py
+++ b/tests/snuba/api/endpoints/test_group_events.py
@@ -6,24 +6,13 @@ from datetime import timedelta
 from django.utils import timezone
 from freezegun import freeze_time
 
-from sentry import options
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
 class GroupEventsTest(APITestCase, SnubaTestCase):
-    """
-    This is more or less an exact copy of the tests under:
-
-        /tests/sentry/api/endpoints/test_group_events.py
-
-    with the removal of any explicit tagstore key/value creation calls, and
-    comparing the resulting events by `eventID`, instead of `id`.
-    """
-
     def setUp(self):
         super(GroupEventsTest, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
-        options.set('snuba.events-queries.enabled', True)
 
     def test_simple(self):
         self.login_as(user=self.user)
diff --git a/tests/snuba/api/endpoints/test_group_events_latest.py b/tests/snuba/api/endpoints/test_group_events_latest.py
index c6c798d2a6..64d3c91cdf 100644
--- a/tests/snuba/api/endpoints/test_group_events_latest.py
+++ b/tests/snuba/api/endpoints/test_group_events_latest.py
@@ -5,7 +5,6 @@ import six
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry import options
 from sentry.models import Group
 from sentry.testutils import APITestCase, SnubaTestCase
 
@@ -42,7 +41,6 @@ class GroupEventsLatestTest(APITestCase, SnubaTestCase):
         self.group = Group.objects.first()
 
     def test_snuba_no_environment(self):
-        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
         response = self.client.get(url, format='json')
 
@@ -50,7 +48,6 @@ class GroupEventsLatestTest(APITestCase, SnubaTestCase):
         assert response.data['id'] == six.text_type(self.event2.event_id)
 
     def test_snuba_environment(self):
-        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/latest/'.format(self.group.id)
         response = self.client.get(url, format='json', data={'environment': ['production']})
 
diff --git a/tests/snuba/api/endpoints/test_group_events_oldest.py b/tests/snuba/api/endpoints/test_group_events_oldest.py
index fda237ea1d..df6b4d7ad0 100644
--- a/tests/snuba/api/endpoints/test_group_events_oldest.py
+++ b/tests/snuba/api/endpoints/test_group_events_oldest.py
@@ -5,7 +5,6 @@ import six
 from datetime import timedelta
 from django.utils import timezone
 
-from sentry import options
 from sentry.models import Group
 from sentry.testutils import APITestCase, SnubaTestCase
 
@@ -42,7 +41,6 @@ class GroupEventsOldestTest(APITestCase, SnubaTestCase):
         self.group = Group.objects.first()
 
     def test_snuba_no_environment(self):
-        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/oldest/'.format(self.group.id)
         response = self.client.get(url, format='json')
 
@@ -50,7 +48,6 @@ class GroupEventsOldestTest(APITestCase, SnubaTestCase):
         assert response.data['id'] == six.text_type(self.event1.event_id)
 
     def test_snuba_environment(self):
-        options.set('snuba.events-queries.enabled', True)
         url = u'/api/0/issues/{}/events/oldest/'.format(self.group.id)
         response = self.client.get(url, format='json', data={'environment': ['production']})
 
diff --git a/tests/snuba/api/endpoints/test_project_event_details.py b/tests/snuba/api/endpoints/test_project_event_details.py
index 7d910c240b..232ec53942 100644
--- a/tests/snuba/api/endpoints/test_project_event_details.py
+++ b/tests/snuba/api/endpoints/test_project_event_details.py
@@ -5,7 +5,6 @@ import six
 from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
-from sentry import options
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
@@ -47,7 +46,6 @@ class ProjectEventDetailsTest(APITestCase, SnubaTestCase):
         )
 
     def test_snuba(self):
-        options.set('snuba.events-queries.enabled', True)
         url = reverse(
             'sentry-api-0-project-event-details',
             kwargs={
@@ -86,7 +84,6 @@ class ProjectEventDetailsTest(APITestCase, SnubaTestCase):
         assert response.data['groupID'] == six.text_type(self.cur_event.group.id)
 
     def test_snuba_no_prev(self):
-        options.set('snuba.events-queries.enabled', True)
         url = reverse(
             'sentry-api-0-project-event-details',
             kwargs={
@@ -106,7 +103,6 @@ class ProjectEventDetailsTest(APITestCase, SnubaTestCase):
         assert response.data['groupID'] == six.text_type(self.prev_event.group.id)
 
     def test_snuba_with_environment(self):
-        options.set('snuba.events-queries.enabled', True)
         url = reverse(
             'sentry-api-0-project-event-details',
             kwargs={
diff --git a/tests/snuba/api/endpoints/test_project_events.py b/tests/snuba/api/endpoints/test_project_events.py
index cf7377bce9..7238314425 100644
--- a/tests/snuba/api/endpoints/test_project_events.py
+++ b/tests/snuba/api/endpoints/test_project_events.py
@@ -4,7 +4,6 @@ from datetime import timedelta
 from django.utils import timezone
 from django.core.urlresolvers import reverse
 
-from sentry import options
 from sentry.testutils import APITestCase, SnubaTestCase
 
 
@@ -12,7 +11,6 @@ class ProjectEventsTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(ProjectEventsTest, self).setUp()
         self.min_ago = timezone.now() - timedelta(minutes=1)
-        options.set('snuba.events-queries.enabled', True)
 
     def test_simple(self):
         self.login_as(user=self.user)
diff --git a/tests/snuba/models/test_group.py b/tests/snuba/models/test_group.py
index d361895a1d..6fbd419375 100644
--- a/tests/snuba/models/test_group.py
+++ b/tests/snuba/models/test_group.py
@@ -2,14 +2,12 @@ from __future__ import absolute_import
 
 from datetime import timedelta
 from django.utils import timezone
-from sentry import options
 from sentry.models import Group
 from sentry.testutils import SnubaTestCase, TestCase
 
 
 class GroupTestSnuba(TestCase, SnubaTestCase):
     def test_get_oldest_latest_for_environments(self):
-        options.set('snuba.events-queries.enabled', True)
         project = self.create_project()
 
         min_ago = (timezone.now() - timedelta(minutes=1)).isoformat()[:19]
