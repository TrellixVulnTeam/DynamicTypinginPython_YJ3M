commit 6d13e2e602d4364349a4937d7084e7578aeb389a
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 19 13:23:02 2015 -0800

    Support snoozeDuration on group details

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index 3d756ab890..71f27cd2cb 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -13,8 +13,8 @@ from sentry.api.serializers import serialize
 from sentry.db.models.query import create_or_update
 from sentry.constants import STATUS_CHOICES
 from sentry.models import (
-    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus,
-    GroupTagKey, GroupTagValue, Release, UserReport
+    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupSnooze,
+    GroupStatus, GroupTagKey, GroupTagValue, Release, UserReport
 )
 from sentry.plugins import plugins
 from sentry.utils.safe import safe_execute
@@ -57,6 +57,7 @@ class GroupSerializer(serializers.Serializer):
     isBookmarked = serializers.BooleanField()
     hasSeen = serializers.BooleanField()
     assignedTo = UserField()
+    snoozeDuration = serializers.IntegerField()
 
 
 class GroupDetailsEndpoint(GroupEndpoint):
@@ -271,8 +272,27 @@ class GroupDetailsEndpoint(GroupEndpoint):
                     user=acting_user,
                 )
         elif result.get('status'):
-            group.status = STATUS_CHOICES[result['status']]
-            group.save()
+            new_status = STATUS_CHOICES[result['status']]
+
+            if new_status == GroupStatus.MUTED:
+                if result.get('snoozeDuration'):
+                    snooze_until = timezone.now() + timedelta(
+                        minutes=int(result['snoozeDuration']),
+                    )
+                    GroupSnooze.objects.create_or_update(
+                        group=group,
+                        values={
+                            'until': snooze_until,
+                        }
+                    )
+                    result['snoozeUntil'] = snooze_until
+                else:
+                    GroupSnooze.objects.filter(
+                        group=group,
+                    ).delete()
+                    result['snoozeUntil'] = None
+
+            group.update(status=new_status)
 
         if result.get('hasSeen') and group.project.member_set.filter(user=request.user).exists():
             instance, created = create_or_update(
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index 9e6fd8014e..e375e7c0c5 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import, print_function
 
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 
 from sentry.models import (
-    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupStatus,
-    GroupTagValue, Release
+    Activity, Group, GroupAssignee, GroupBookmark, GroupSeen, GroupSnooze,
+    GroupStatus, GroupTagValue, Release
 )
 from sentry.testutils import APITestCase
 
@@ -69,6 +71,32 @@ class GroupUpdateTest(APITestCase):
         )
         assert group.status == GroupStatus.RESOLVED
 
+    def test_snooze_duration(self):
+        group = self.create_group(checksum='a' * 32, status=GroupStatus.RESOLVED)
+
+        self.login_as(user=self.user)
+
+        url = reverse('sentry-api-0-group-details', kwargs={
+            'group_id': group.id,
+        })
+
+        response = self.client.put(url, data={
+            'status': 'muted',
+            'snoozeDuration': 30,
+        }, format='json')
+
+        assert response.status_code == 200
+
+        snooze = GroupSnooze.objects.get(group=group)
+
+        assert snooze.until > timezone.now() + timedelta(minutes=29)
+        assert snooze.until < timezone.now() + timedelta(minutes=31)
+
+        assert response.data['snoozeUntil'] == snooze.until
+
+        group = Group.objects.get(id=group.id)
+        assert group.get_status() == GroupStatus.MUTED
+
     def test_bookmark(self):
         self.login_as(user=self.user)
 
