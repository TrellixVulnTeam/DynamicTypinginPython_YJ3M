commit a1dbddc896965d70304f45f4c87af71ab918c3de
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue May 14 15:02:52 2019 +0200

    feat(symbolicator): Show malformed minidumps as processing issues (#13198)
    
    Emits event errors when symbolicator fails to run.

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index ba31b2a257..8334dc7244 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -14,12 +14,11 @@ from sentry.plugins import Plugin2
 from sentry.lang.native.cfi import reprocess_minidump_with_cfi
 from sentry.lang.native.minidump import get_attached_minidump, is_minidump_event, merge_symbolicator_minidump_response
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed
-from sentry.lang.native.symbolicator import run_symbolicator, merge_symbolicator_image, create_minidump_task
+from sentry.lang.native.symbolicator import run_symbolicator, merge_symbolicator_image, create_minidump_task, handle_symbolicator_response_status
 from sentry.lang.native.utils import get_sdk_from_event, handle_symbolication_failed, cpu_name_from_data, \
     merge_symbolicated_frame, rebase_addr, signal_from_data
 from sentry.lang.native.systemsymbols import lookup_system_symbols
 from sentry.models import Project
-from sentry.models.eventerror import EventError
 from sentry.utils import metrics
 from sentry.utils.in_app import is_known_third_party
 from sentry.utils.safe import get_path
@@ -278,11 +277,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             signal=self.signal
         )
 
-        if not rv:
-            handle_symbolication_failed(
-                SymbolicationFailed(type=EventError.NATIVE_SYMBOLICATOR_FAILED),
-                data=self.data,
-            )
+        if not handle_symbolicator_response_status(self.data, rv):
             return
 
         # TODO(markus): Set signal and os context from symbolicator response,
@@ -428,15 +423,8 @@ def reprocess_minidump(data):
         minidump=make_buffered_slice_reader(minidump.data, None)
     )
 
-    if not response:
-        handle_symbolication_failed(
-            SymbolicationFailed(type=EventError.NATIVE_SYMBOLICATOR_FAILED),
-            data=data,
-        )
-        default_cache.set(minidump_is_reprocessed_cache_key, True, 3600)
-        return
-
-    merge_symbolicator_minidump_response(data, response)
+    if handle_symbolicator_response_status(data, response):
+        merge_symbolicator_minidump_response(data, response)
 
     event_cache_key = cache_key_for_event(data)
     default_cache.set(event_cache_key, dict(data), 3600)
diff --git a/src/sentry/lang/native/symbolicator.py b/src/sentry/lang/native/symbolicator.py
index 03a12937ad..094df663be 100644
--- a/src/sentry/lang/native/symbolicator.py
+++ b/src/sentry/lang/native/symbolicator.py
@@ -14,7 +14,7 @@ from sentry import options
 from sentry.auth.system import get_system_token
 from sentry.cache import default_cache
 from sentry.lang.native.symbolizer import SymbolicationFailed
-from sentry.lang.native.utils import image_name
+from sentry.lang.native.utils import image_name, handle_symbolication_failed
 from sentry.models.eventerror import EventError
 from sentry.utils import json, metrics
 from sentry.utils.in_app import is_known_third_party, is_optional_package
@@ -327,14 +327,9 @@ def run_symbolicator(project, request_id_cache_key, create_task=create_payload_t
                         json['request_id'],
                         REQUEST_CACHE_TIMEOUT)
                     raise RetrySymbolication(retry_after=json['retry_after'])
-                elif json['status'] == 'completed':
-                    default_cache.delete(request_id_cache_key)
-                    return rv.json()
                 else:
-                    logger.error("Unexpected status: %s", json['status'])
-
                     default_cache.delete(request_id_cache_key)
-                    return
+                    return json
 
             except (IOError, RequestException):
                 attempts += 1
@@ -348,6 +343,21 @@ def run_symbolicator(project, request_id_cache_key, create_task=create_payload_t
                 wait *= 2.0
 
 
+def handle_symbolicator_response_status(event_data, response_json):
+    if not response_json:
+        error = SymbolicationFailed(type=EventError.NATIVE_INTERNAL_FAILURE)
+    elif response_json['status'] == 'completed':
+        return True
+    elif response_json['status'] == 'failed':
+        error = SymbolicationFailed(message=response_json.get('message') or None,
+                                    type=EventError.NATIVE_SYMBOLICATOR_FAILED)
+    else:
+        logger.error('Unexpected symbolicator status: %s', response_json['status'])
+        error = SymbolicationFailed(type=EventError.NATIVE_INTERNAL_FAILURE)
+
+    handle_symbolication_failed(error, data=event_data)
+
+
 def _poll_symbolication_task(sess, base_url, request_id, project_id):
     url = '{base_url}/requests/{request_id}?timeout={timeout}'.format(
         base_url=base_url,
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 9050e60a6b..3c15c0e846 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -23,9 +23,12 @@ USER_FIXABLE_ERRORS = (
     EventError.NATIVE_BAD_DSYM,
     EventError.NATIVE_MISSING_SYMBOL,
 
-    # XXX: user can't fix this, but they should see it regardless to see it's
-    # not their fault. Also better than silently creating an unsymbolicated event
+    # Emitted for e.g. broken minidumps
     EventError.NATIVE_SYMBOLICATOR_FAILED,
+
+    # We want to let the user know when calling symbolicator failed, even
+    # though it's not user fixable.
+    EventError.NATIVE_INTERNAL_FAILURE,
 )
 
 
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 42f5bdaf9c..64832b0dd4 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -94,7 +94,7 @@ class EventError(object):
         NATIVE_MISSING_SYMBOL: u'Could not resolve one or more frames in debug information file.',
         NATIVE_SIMULATOR_FRAME: u'Encountered an unprocessable simulator frame.',
         NATIVE_UNKNOWN_IMAGE: u'A binary image is referenced that is unknown.',
-        NATIVE_SYMBOLICATOR_FAILED: u'Failed to call Sentry-internal service.',
+        NATIVE_SYMBOLICATOR_FAILED: u'Failed to process native stacktraces.',
 
         PROGUARD_MISSING_MAPPING: u'A proguard mapping file was missing.',
         PROGUARD_MISSING_LINENO: u'A proguard mapping file does not contain line info.',
