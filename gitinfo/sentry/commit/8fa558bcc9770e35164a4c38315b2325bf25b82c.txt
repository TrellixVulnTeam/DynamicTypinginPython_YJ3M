commit 8fa558bcc9770e35164a4c38315b2325bf25b82c
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 25 10:31:19 2018 -0700

    feat(api): Document HPKP support

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 871b077aae..8b791af3b8 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -390,6 +390,14 @@ const projectSettingsRoutes = (
           import(/*webpackChunkName: "ProjectExpectCtReports"*/ './views/settings/projectSecurityHeaders/expectCt')}
         component={errorHandler(LazyLoad)}
       />
+      <Route
+        path="hpkp/"
+        key="hpkp/"
+        name="HPKP"
+        componentPromise={() =>
+          import(/*webpackChunkName: "ProjectHpkpReports"*/ './views/settings/projectSecurityHeaders/hpkp')}
+        component={errorHandler(LazyLoad)}
+      />
     </Route>
     <Route path="plugins/" name="Integrations" component={errorHandler(ProjectPlugins)} />
     <Route
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
new file mode 100644
index 0000000000..1b3ca304d4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/hpkp.jsx
@@ -0,0 +1,127 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import styled from 'react-emotion';
+
+import {t, tct} from '../../../locale';
+import AsyncView from '../../asyncView';
+import ExternalLink from '../../../components/externalLink';
+import {Panel, PanelBody, PanelHeader} from '../../../components/panels';
+import ReportUri, {getSecurityDsn} from './reportUri';
+import PreviewFeature from '../../../components/previewFeature';
+import SettingsPageHeader from '../components/settingsPageHeader';
+import TextBlock from '../components/text/textBlock';
+
+const CodeBlock = styled.pre`
+  word-break: break-all;
+  white-space: pre-wrap;
+`;
+
+export default class ProjectHpkpReports extends AsyncView {
+  static propTypes = {
+    setProjectNavSection: PropTypes.func,
+  };
+
+  componentWillMount() {
+    super.componentWillMount();
+    this.props.setProjectNavSection('settings');
+  }
+
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [
+      ['keyList', `/projects/${orgId}/${projectId}/keys/`],
+      ['project', `/projects/${orgId}/${projectId}/`],
+    ];
+  }
+
+  getInstructions() {
+    return (
+      'def middleware(request, response):\n' +
+      "    response['Public-Key-Pins'] = \\\n" +
+      '        \'pin-sha256="cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs="; \' \\\n' +
+      '        \'pin-sha256="M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE="; \' \\\n' +
+      "        'max-age=5184000; includeSubDomains; ' \\\n" +
+      `        \'report-uri="${getSecurityDsn(this.state.keyList)}"\' \n` +
+      '    return response\n'
+    );
+  }
+
+  getReportOnlyInstructions() {
+    return (
+      'def middleware(request, response):\n' +
+      "    response['Public-Key-Pins-Report-Only'] = \\\n" +
+      '        \'pin-sha256="cUPcTAZWKaASuYWhhneDttWpY3oBAkE3h2+soZS7sWs="; \' \\\n' +
+      '        \'pin-sha256="M8HztCzM3elUxkcjR2S5P4hhyBNf6lHkmjAHKhpGPWE="; \' \\\n' +
+      "        'max-age=5184000; includeSubDomains; ' \\\n" +
+      `        \'report-uri="${getSecurityDsn(this.state.keyList)}"\' \n` +
+      '    return response\n'
+    );
+  }
+
+  renderBody() {
+    return (
+      <div>
+        <SettingsPageHeader title={t('HTTP Public Key Pinning')} />
+
+        <PreviewFeature />
+
+        <ReportUri keyList={this.state.keyList} params={this.props.params} />
+
+        <Panel>
+          <PanelHeader>{t('About')}</PanelHeader>
+
+          <PanelBody disablePadding={false}>
+            <TextBlock>
+              {tct(
+                `[link:HTTP Public Key Pinning]
+              (HPKP) is a security feature that tells a web client to associate a specific
+              cryptographic public key with a certain web server to decrease the risk of MITM
+              attacks with forged certificates. It's enforced by browser vendors, and Sentry
+              supports capturing violations using the standard reporting hooks.`,
+                {
+                  link: (
+                    <ExternalLink href="https://en.wikipedia.org/wiki/HTTP_Public_Key_Pinning" />
+                  ),
+                }
+              )}
+            </TextBlock>
+
+            <TextBlock>
+              {t(
+                `To configure HPKP reports
+              in Sentry, you'll need to send a header from your server describing your
+              policy, as well specifying the authenticated Sentry endpoint.`
+              )}
+            </TextBlock>
+
+            <TextBlock noMargin>
+              {t(
+                'For example, in Python you might achieve this via a simple web middleware'
+              )}
+            </TextBlock>
+            <CodeBlock>{this.getInstructions()}</CodeBlock>
+
+            <TextBlock noMargin>
+              {t(`Alternatively you can setup HPKP reports to simply send reports rather than
+              actually enforcing the policy`)}
+            </TextBlock>
+            <CodeBlock>{this.getReportOnlyInstructions()}</CodeBlock>
+
+            <TextBlock noMargin css={{marginTop: 30}}>
+              {tct(
+                `We recommend setting this up to only run on a percentage of requests, as
+              otherwise you may find that you've quickly exhausted your quota. For more
+              information, take a look at [link:the documentation on MDN].`,
+                {
+                  link: (
+                    <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning" />
+                  ),
+                }
+              )}
+            </TextBlock>
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
index 60976607f2..836d11463f 100644
--- a/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectSecurityHeaders/index.jsx
@@ -42,6 +42,10 @@ export default class ProjectSecurityHeaders extends AsyncView {
         name: 'Certificate Transparency (Expect-CT)',
         url: recreateRoute('expect-ct/', this.props),
       },
+      {
+        name: 'HTTP Public Key Pinning (HPKP)',
+        url: recreateRoute('hpkp/', this.props),
+      },
     ];
   }
 
diff --git a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectExpectCtReports.spec.jsx.snap b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectExpectCtReports.spec.jsx.snap
new file mode 100644
index 0000000000..d511767733
--- /dev/null
+++ b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectExpectCtReports.spec.jsx.snap
@@ -0,0 +1,110 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectExpectCtReports renders 1`] = `
+<SideEffect(DocumentTitle)
+  title="Sentry"
+>
+  <div>
+    <SettingsPageHeading
+      title="Certificate Transparency"
+    />
+    <PreviewFeature />
+    <ReportUri
+      keyList={Array []}
+      params={
+        Object {
+          "orgId": "org-slug",
+          "projectId": "project-slug",
+        }
+      }
+    />
+    <Panel>
+      <PanelHeader>
+        About
+      </PanelHeader>
+      <PanelBody
+        direction="column"
+        disablePadding={false}
+        flex={false}
+      >
+        <TextBlock>
+          <span
+            key="4"
+          >
+            <ExternalLink
+              href="https://en.wikipedia.org/wiki/Certificate_Transparency"
+              key="1"
+              rel="noreferrer noopener"
+              target="_blank"
+            >
+              <span
+                key="0"
+              >
+                Certificate Transparency
+              </span>
+            </ExternalLink>
+            <span
+              key="2"
+            >
+              
+      (CT) is a security standard which helps track and identify valid certificates, allowing identification of maliciously issued certificates
+            </span>
+          </span>
+        </TextBlock>
+        <TextBlock>
+          <span
+            key="4"
+          >
+            <span
+              key="0"
+            >
+              To configure reports in Sentry, you'll need to configure the 
+            </span>
+            <code
+              key="1"
+            >
+              Expect-CT
+            </code>
+            <span
+              key="2"
+            >
+               a header from your server:
+            </span>
+          </span>
+        </TextBlock>
+        <CodeBlock>
+          Expect-CT: report-uri="https://sentry.example.com/api/security-report/"
+        </CodeBlock>
+        <TextBlock
+          noMargin={true}
+        >
+          <span
+            key="5"
+          >
+            <span
+              key="0"
+            >
+              For more information, see 
+            </span>
+            <a
+              href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Expect-CT"
+              key="2"
+            >
+              <span
+                key="1"
+              >
+                the article on MDN
+              </span>
+            </a>
+            <span
+              key="3"
+            >
+              .
+            </span>
+          </span>
+        </TextBlock>
+      </PanelBody>
+    </Panel>
+  </div>
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectHpkpReports.spec.jsx.snap b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectHpkpReports.spec.jsx.snap
new file mode 100644
index 0000000000..a3f4eda706
--- /dev/null
+++ b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectHpkpReports.spec.jsx.snap
@@ -0,0 +1,275 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectHpkpReports renders 1`] = `
+<SideEffect(DocumentTitle)
+  title="Sentry"
+>
+  <RouteError
+    component={
+      ProjectHpkpReports {
+        "api": Client {},
+        "context": Object {
+          "location": Object {
+            "pathame": "/mock-pathname/",
+            "query": Object {},
+          },
+          "organization": Object {
+            "access": Array [
+              "org:read",
+              "org:write",
+              "org:admin",
+              "project:read",
+              "project:write",
+              "project:admin",
+              "team:read",
+              "team:write",
+              "team:admin",
+            ],
+            "features": Array [],
+            "id": "3",
+            "name": "Organization Name",
+            "onboardingTasks": Array [],
+            "projects": Array [],
+            "slug": "org-slug",
+            "status": Object {
+              "id": "active",
+              "name": "active",
+            },
+            "teams": Array [],
+          },
+          "project": Object {
+            "hasAccess": true,
+            "id": "2",
+            "isBookmarked": false,
+            "isMember": true,
+            "name": "Project Name",
+            "slug": "project-slug",
+            "teams": Array [],
+          },
+          "router": Object {
+            "createHref": [MockFunction],
+            "go": [MockFunction],
+            "goBack": [MockFunction],
+            "goForward": [MockFunction],
+            "isActive": [MockFunction],
+            "location": Object {
+              "query": Object {},
+            },
+            "push": [MockFunction],
+            "replace": [MockFunction],
+            "setRouteLeaveHook": [MockFunction],
+          },
+        },
+        "fetchData": [Function],
+        "props": Object {
+          "location": Object {
+            "pathame": "/mock-pathname/",
+            "pathname": "/projects/org-slug/project-slug/hpkp/",
+            "query": Object {},
+          },
+          "organization": Object {
+            "access": Array [
+              "org:read",
+              "org:write",
+              "org:admin",
+              "project:read",
+              "project:write",
+              "project:admin",
+              "team:read",
+              "team:write",
+              "team:admin",
+            ],
+            "features": Array [],
+            "id": "3",
+            "name": "Organization Name",
+            "onboardingTasks": Array [],
+            "projects": Array [],
+            "slug": "org-slug",
+            "status": Object {
+              "id": "active",
+              "name": "active",
+            },
+            "teams": Array [],
+          },
+          "params": Object {
+            "orgId": "org-slug",
+            "projectId": "project-slug",
+          },
+          "project": Object {
+            "hasAccess": true,
+            "id": "2",
+            "isBookmarked": false,
+            "isMember": true,
+            "name": "Project Name",
+            "slug": "project-slug",
+            "teams": Array [],
+          },
+          "routes": Array [],
+          "setProjectNavSection": [Function],
+          "stepBack": [Function],
+        },
+        "refs": Object {},
+        "remountComponent": [Function],
+        "render": [Function],
+        "state": Object {
+          "error": true,
+          "errors": Object {
+            "project": Object {
+              "responseJSON": null,
+              "responseText": "HTTP 404",
+              "status": 404,
+            },
+          },
+          "keyList": Array [],
+          "keyListPageLinks": undefined,
+          "loading": false,
+          "project": null,
+          "remainingRequests": 0,
+        },
+        "updater": Updater {
+          "_callbacks": Array [],
+          "_renderer": ReactShallowRenderer {
+            "_context": Object {
+              "location": Object {
+                "pathame": "/mock-pathname/",
+                "query": Object {},
+              },
+              "organization": Object {
+                "access": Array [
+                  "org:read",
+                  "org:write",
+                  "org:admin",
+                  "project:read",
+                  "project:write",
+                  "project:admin",
+                  "team:read",
+                  "team:write",
+                  "team:admin",
+                ],
+                "features": Array [],
+                "id": "3",
+                "name": "Organization Name",
+                "onboardingTasks": Array [],
+                "projects": Array [],
+                "slug": "org-slug",
+                "status": Object {
+                  "id": "active",
+                  "name": "active",
+                },
+                "teams": Array [],
+              },
+              "project": Object {
+                "hasAccess": true,
+                "id": "2",
+                "isBookmarked": false,
+                "isMember": true,
+                "name": "Project Name",
+                "slug": "project-slug",
+                "teams": Array [],
+              },
+              "router": Object {
+                "createHref": [MockFunction],
+                "go": [MockFunction],
+                "goBack": [MockFunction],
+                "goForward": [MockFunction],
+                "isActive": [MockFunction],
+                "location": Object {
+                  "query": Object {},
+                },
+                "push": [MockFunction],
+                "replace": [MockFunction],
+                "setRouteLeaveHook": [MockFunction],
+              },
+            },
+            "_element": <ProjectHpkpReports
+              location={
+                Object {
+                  "pathame": "/mock-pathname/",
+                  "pathname": "/projects/org-slug/project-slug/hpkp/",
+                  "query": Object {},
+                }
+              }
+              organization={
+                Object {
+                  "access": Array [
+                    "org:read",
+                    "org:write",
+                    "org:admin",
+                    "project:read",
+                    "project:write",
+                    "project:admin",
+                    "team:read",
+                    "team:write",
+                    "team:admin",
+                  ],
+                  "features": Array [],
+                  "id": "3",
+                  "name": "Organization Name",
+                  "onboardingTasks": Array [],
+                  "projects": Array [],
+                  "slug": "org-slug",
+                  "status": Object {
+                    "id": "active",
+                    "name": "active",
+                  },
+                  "teams": Array [],
+                }
+              }
+              params={
+                Object {
+                  "orgId": "org-slug",
+                  "projectId": "project-slug",
+                }
+              }
+              project={
+                Object {
+                  "hasAccess": true,
+                  "id": "2",
+                  "isBookmarked": false,
+                  "isMember": true,
+                  "name": "Project Name",
+                  "slug": "project-slug",
+                  "teams": Array [],
+                }
+              }
+              routes={Array []}
+              setProjectNavSection={[Function]}
+              stepBack={[Function]}
+            />,
+            "_forcedUpdate": false,
+            "_instance": [Circular],
+            "_newState": Object {
+              "error": true,
+              "errors": Object {
+                "project": Object {
+                  "responseJSON": null,
+                  "responseText": "HTTP 404",
+                  "status": 404,
+                },
+              },
+              "keyList": Array [],
+              "keyListPageLinks": undefined,
+              "loading": false,
+              "project": null,
+              "remainingRequests": 0,
+            },
+            "_rendered": <SideEffect(DocumentTitle)
+              title="Sentry"
+            >
+              <RouteError
+                component={[Circular]}
+                error={[Error: Unable to load all required endpoints]}
+                onRetry={[Function]}
+              />
+            </SideEffect(DocumentTitle)>,
+            "_rendering": false,
+            "_updater": [Circular],
+          },
+        },
+      }
+    }
+    error={[Error: Unable to load all required endpoints]}
+    onRetry={[Function]}
+  />
+</SideEffect(DocumentTitle)>
+`;
diff --git a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectSecurityHeaders.spec.jsx.snap b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectSecurityHeaders.spec.jsx.snap
index 1ecda23cfa..45833806ba 100644
--- a/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectSecurityHeaders.spec.jsx.snap
+++ b/tests/js/spec/views/projectSecurityHeaders/__snapshots__/projectSecurityHeaders.spec.jsx.snap
@@ -163,6 +163,30 @@ exports[`ProjectSecurityHeaders renders 1`] = `
             </Button>
           </Flex>
         </PanelItem>
+        <PanelItem
+          direction="column"
+          p={0}
+        >
+          <Flex
+            align="center"
+            flex="1"
+            p={2}
+          >
+            <Box
+              flex="1"
+            >
+              <HeaderName>
+                HTTP Public Key Pinning (HPKP)
+              </HeaderName>
+            </Box>
+            <Button
+              disabled={false}
+              priority="primary"
+            >
+              Instructions
+            </Button>
+          </Flex>
+        </PanelItem>
       </PanelBody>
     </Panel>
   </div>
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.jsx b/tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx
similarity index 100%
rename from tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.jsx
rename to tests/js/spec/views/projectSecurityHeaders/projectExpectCtReports.spec.jsx
diff --git a/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx b/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx
new file mode 100644
index 0000000000..22106bb44e
--- /dev/null
+++ b/tests/js/spec/views/projectSecurityHeaders/projectHpkpReports.spec.jsx
@@ -0,0 +1,37 @@
+import React from 'react';
+
+import {shallow} from 'enzyme';
+import ProjectHpkpReports from 'app/views/settings/projectSecurityHeaders/hpkp';
+
+jest.mock('app/utils/recreateRoute');
+
+describe('ProjectHpkpReports', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let url = `/projects/${org.slug}/${project.slug}/hpkp/`;
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/keys/`,
+      method: 'GET',
+      body: [],
+    });
+  });
+
+  it('renders', function() {
+    let wrapper = shallow(
+      <ProjectHpkpReports
+        organization={org}
+        project={project}
+        setProjectNavSection={() => {}}
+        {...TestStubs.routerProps({
+          params: {orgId: org.slug, projectId: project.slug},
+          location: TestStubs.location({pathname: url}),
+        })}
+      />,
+      TestStubs.routerContext()
+    );
+    expect(wrapper).toMatchSnapshot();
+  });
+});
