commit 020e82c168cdab19402ecf1b1af4712d1fd6fa77
Author: Dora <dora.l.chan@gmail.com>
Date:   Fri Dec 6 09:27:37 2019 -0800

    feat(discv2): toggle detail view (#15962)
    
    * moving paginator
    
    * added toggle button
    
    * added or
    
    * fixing chart width
    
    * fix ts type

diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
index f001285996..a442f2c5fb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/content.tsx
@@ -5,6 +5,7 @@ import styled from 'react-emotion';
 import PropTypes from 'prop-types';
 
 import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import {Client} from 'app/api';
@@ -14,6 +15,7 @@ import {Organization, Event} from 'app/types';
 import SentryTypes from 'app/sentryTypes';
 import getDynamicText from 'app/utils/getDynamicText';
 import DateTime from 'app/components/dateTime';
+import Button from 'app/components/button';
 import ExternalLink from 'app/components/links/externalLink';
 import FileSize from 'app/components/fileSize';
 import NotFound from 'app/components/errors/notFound';
@@ -56,15 +58,32 @@ type Props = {
 
 type State = {
   event: Event | undefined;
-};
+  isSidebarVisible: boolean;
+} & AsyncComponent['state'];
 
-class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['state']> {
+class EventDetailsContent extends AsyncComponent<Props, State> {
   static propTypes: any = {
     organization: SentryTypes.Organization.isRequired,
     eventSlug: slugValidator,
     location: PropTypes.object.isRequired,
   };
 
+  state: State = {
+    // AsyncComponent state
+    loading: true,
+    reloading: false,
+    error: false,
+    errors: [],
+    event: undefined,
+
+    // local state
+    isSidebarVisible: true,
+  };
+
+  toggleSidebar = () => {
+    this.setState({isSidebarVisible: !this.state.isSidebarVisible});
+  };
+
   getEndpoints(): Array<[string, string, {query: EventQuery}]> {
     const {organization, params, location, eventView} = this.props;
     const {eventSlug} = params;
@@ -105,6 +124,7 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
 
     // Having an aggregate field means we want to show pagination/graphs
     const isGroupedView = hasAggregateField(eventView);
+    const {isSidebarVisible} = this.state;
 
     return (
       <div>
@@ -117,6 +137,9 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
           />
           <EventHeader event={event} />
           <Controller>
+            <StyledButton size="small" onClick={this.toggleSidebar}>
+              {isSidebarVisible ? 'Hide Details' : 'Show Details'}
+            </StyledButton>
             {isGroupedView && (
               <Pagination
                 event={event}
@@ -127,7 +150,7 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
           </Controller>
         </HeaderBox>
         <ContentBox>
-          <Main>
+          <div style={{gridColumn: isSidebarVisible ? '1/2' : '1/3'}}>
             {isGroupedView &&
               getDynamicText({
                 value: (
@@ -146,8 +169,8 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
               projectId={this.projectId}
               eventView={eventView}
             />
-          </Main>
-          <Side>
+          </div>
+          <div style={{gridColumn: '2/3', display: isSidebarVisible ? '' : 'none'}}>
             <EventMetadata
               event={event}
               organization={organization}
@@ -157,7 +180,7 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
               <LinkedIssue groupId={event.groupID} eventId={event.eventID} />
             )}
             <TagsTable tags={event.tags} />
-          </Side>
+          </div>
         </ContentBox>
       </div>
     );
@@ -196,40 +219,6 @@ class EventDetailsContent extends AsyncComponent<Props, State & AsyncComponent['
   }
 }
 
-const ContentBox = styled(PageContent)`
-  margin: 0;
-
-  @media (min-width: ${p => p.theme.breakpoints[1]}) {
-    display: grid;
-    grid-template-rows: 1fr auto;
-    grid-template-columns: 65% auto;
-    grid-column-gap: ${space(3)};
-  }
-
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    grid-template-columns: auto 350px;
-  }
-`;
-
-const Main = styled('div')`
-  grid-column: 1/2;
-`;
-
-const Side = styled('div')`
-  grid-column: 2/3;
-`;
-
-const HeaderBox = styled(ContentBox)`
-  background-color: ${p => p.theme.white};
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-  grid-row-gap: ${space(1)};
-`;
-
-const Controller = styled('div')`
-  grid-row: 1/3;
-  grid-column: 2/3;
-`;
-
 type EventDetailsWrapperProps = {
   organization: Organization;
   location: Location;
@@ -270,27 +259,11 @@ const EventHeader = (props: {event: Event}) => {
         {title}
         {message && message.length > 0 ? ':' : null}
       </StyledTitle>
-      <StyledMessage>{getMessage(props.event)}</StyledMessage>
+      <span>{getMessage(props.event)}</span>
     </StyledEventHeader>
   );
 };
 
-const StyledEventHeader = styled('div')`
-  font-size: ${p => p.theme.headerFontSize};
-  white-space: nowrap;
-  overflow: hidden;
-  text-overflow: ellipsis;
-  grid-column: 1/2;
-`;
-
-const StyledTitle = styled('span')`
-  margin-right: ${space(1)};
-`;
-
-const StyledMessage = styled('span')`
-  color: ${p => p.theme.gray2};
-`;
-
 /**
  * Render metadata about the event and provide a link to the JSON blob
  */
@@ -324,6 +297,56 @@ const EventMetadata = (props: {
   );
 };
 
+const ContentBox = styled(PageContent)`
+  margin: 0;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: grid;
+    grid-template-rows: 1fr auto;
+    grid-template-columns: 65% auto;
+    grid-column-gap: ${space(3)};
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: auto 350px;
+  }
+`;
+
+const HeaderBox = styled(ContentBox)`
+  background-color: ${p => p.theme.white};
+  border-bottom: 1px solid ${p => p.theme.borderDark};
+  grid-row-gap: ${space(2)};
+`;
+
+const Controller = styled('div')`
+  display: flex;
+  justify-content: flex-end;
+  grid-row: 2/3;
+  grid-column: 2/3;
+`;
+
+const StyledButton = styled(Button)`
+  display: none;
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    display: block;
+    width: 110px;
+  }
+`;
+
+const StyledEventHeader = styled('div')`
+  font-size: ${p => p.theme.headerFontSize};
+  color: ${p => p.theme.gray2};
+  grid-column: 1/2;
+  align-self: center;
+  ${overflowEllipsis};
+`;
+
+const StyledTitle = styled('span')`
+  color: ${p => p.theme.gray4};
+  margin-right: ${space(1)};
+`;
+
 const MetaDataID = styled('div')`
   margin-bottom: ${space(3)};
 `;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
index f1305a4458..26129a2806 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/lineGraph.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import {browserHistory} from 'react-router';
+import styled from 'react-emotion';
 import {Location} from 'history';
 
 import {Client} from 'app/api';
@@ -189,7 +190,7 @@ const LineGraph = (props: LineGraphProps) => {
   const referenceEvent = `${currentEvent.projectSlug}:${currentEvent.eventID}`;
 
   return (
-    <Panel>
+    <StyledPanel>
       <EventsRequest
         api={api}
         organization={organization}
@@ -235,10 +236,18 @@ const LineGraph = (props: LineGraphProps) => {
           />
         )}
       </EventsRequest>
-    </Panel>
+    </StyledPanel>
   );
 };
 
+// eChart does not recalculate width
+
+const StyledPanel = styled(Panel)`
+  .echarts-for-react div:first-child {
+    width: 100% !important;
+  }
+`;
+
 LineGraph.propTypes = {
   api: PropTypes.object.isRequired,
   currentEvent: SentryTypes.Event.isRequired,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
index f53ee53c43..5282188c9f 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventDetails/pagination.tsx
@@ -69,28 +69,28 @@ const Pagination = (props: Props) => {
         to={links.oldest}
         disabled={links.previous === null || links.oldest === null}
       >
-        <InlineSvg src="icon-prev" size="14px" />
+        <InlineSvg src="icon-prev" />
       </StyledIconLink>
       <StyledTextLink
         data-test-id="older-event"
         to={links.previous}
         disabled={links.previous === null}
       >
-        {t('Older Event')}
+        {t('Older')}
       </StyledTextLink>
       <StyledTextLink
         data-test-id="newer-event"
         to={links.next}
         disabled={links.next === null}
       >
-        {t('Newer Event')}
+        {t('Newer')}
       </StyledTextLink>
       <StyledIconLink
         to={links.latest}
         disabled={links.next === null || links.latest === null}
         isLast
       >
-        <InlineSvg src="icon-next" size="14px" />
+        <InlineSvg src="icon-next" />
       </StyledIconLink>
     </Paginator>
   );
@@ -101,13 +101,25 @@ const StyledTextLink = styled(Link, {shouldForwardProp: isPropValid})<{
   disabled: boolean;
   isLast: boolean;
 }>`
-  color: ${p => (p.disabled ? p.theme.disabled : p.theme.gray3)};
-  font-size: ${p => p.theme.fontSizeMedium};
-  padding: ${space(0.5)} ${space(1.5)};
-  text-align: center;
+  color: ${p => (p.disabled ? p.theme.disabled : 'inherit')};
+  font-size: ${p => p.theme.fontSizeSmall};
+  font-weight: 600;
+  padding: ${space(0.25)};
+  display: flex;
+  align-items: center;
+  justify-content: center;
   flex-grow: 2;
   ${p => (p.isLast ? '' : `border-right: 1px solid ${p.theme.borderDark};`)}
   ${p => (p.disabled ? 'pointer-events: none;' : '')}
+
+  &:hover,
+  &:active {
+    color: inherit;
+  }
+
+  &:active {
+    box-shadow: inset 0 2px rgba(0, 0, 0, 0.05);
+  }
 `;
 
 const StyledIconLink = styled(StyledTextLink, {shouldForwardProp: isPropValid})`
@@ -116,13 +128,16 @@ const StyledIconLink = styled(StyledTextLink, {shouldForwardProp: isPropValid})`
 
 const Paginator = styled('div')`
   display: flex;
-  background: ${p => p.theme.offWhite};
+  flex-grow: 1;
+  background: ${p => p.theme.white};
   border: 1px solid ${p => p.theme.borderDark};
   border-radius: ${p => p.theme.borderRadius};
-  margin: ${space(2)} 0;
+  box-shadow: 0 2px rgba(0, 0, 0, 0.05);
+  margin-top: ${space(2)};
 
-  @media (min-width: ${p => p.theme.breakpoints[2]}) {
-    margin: 0;
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    margin-left: ${space(1.5)};
+    margin-top: 0;
   }
 `;
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
index d02a1b9764..5d730c3783 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/landing.tsx
@@ -233,9 +233,10 @@ class DiscoverLanding extends AsyncComponent<Props, State> {
           placeholder={t('Search for saved queries')}
           onSearch={this.handleSearchQuery}
         />
-        <Button data-test-id="build-new-query" to={to} priority="primary">
+        <StyledOr>or</StyledOr>
+        <StyledButton data-test-id="build-new-query" to={to} priority="primary">
           {t('Build a new query')}
-        </Button>
+        </StyledButton>
       </StyledActions>
     );
   }
@@ -282,14 +283,24 @@ const StyledPageHeader = styled('div')`
 `;
 
 const StyledSearchBar = styled(SearchBar)`
-  margin-right: ${space(1)};
   flex-grow: 1;
 `;
 
+const StyledOr = styled('span')`
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeMedium};
+  margin: 0 ${space(1.5)};
+`;
+
 const StyledActions = styled('div')`
   display: flex;
+  align-items: center;
   margin-bottom: ${space(3)};
 `;
 
+const StyledButton = styled(Button)`
+  white-space: nowrap;
+`;
+
 export default withOrganization(DiscoverLanding);
 export {DiscoverLanding};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
index 19863c9db9..204268742c 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/tagsTable.tsx
@@ -75,6 +75,9 @@ const TagKey = styled('td')`
   color: ${p => p.theme.gray3};
   padding: ${space(0.5)} ${space(1)};
   font-size: ${p => p.theme.fontSizeMedium};
+  white-space: nowrap;
+  overflow: hidden;
+  text-overflow: ellipsis;
 `;
 
 const TagValue = styled(TagKey)`
