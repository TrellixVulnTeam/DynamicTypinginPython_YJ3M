commit 951359578a53860826b933f8a9f0bb7761d6fd01
Author: josh <josh@jrl.ninja>
Date:   Wed Dec 11 10:32:00 2019 -0800

    feat: run bitfield tests in ci, and adapt problematic tests to use our F-style bitfield lookups (#16048)

diff --git a/src/bitfield/__init__.py b/src/bitfield/__init__.py
index d2248ae1fc..8d64294299 100644
--- a/src/bitfield/__init__.py
+++ b/src/bitfield/__init__.py
@@ -1,7 +1,3 @@
-"""
-django-bitfield
-~~~~~~~~~~~~~~~
-"""
 from __future__ import absolute_import
 
 from bitfield.models import Bit, BitHandler, BitField  # NOQA
diff --git a/src/bitfield/admin.py b/src/bitfield/admin.py
index 4d3c1d9dfc..f2231df88a 100644
--- a/src/bitfield/admin.py
+++ b/src/bitfield/admin.py
@@ -12,10 +12,6 @@ from bitfield.compat import bitor
 
 
 class BitFieldListFilter(FieldListFilter):
-    """
-    BitField list filter.
-    """
-
     def __init__(self, field, request, params, model, model_admin, field_path):
         self.lookup_kwarg = field_path
         self.lookup_val = int(request.GET.get(self.lookup_kwarg, 0))
diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index bea2eca5ac..a4415bb78c 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db.models.fields import BigIntegerField, Field
 
 from bitfield.forms import BitFormField
@@ -136,13 +138,7 @@ class BitField(BigIntegerField):
         if isinstance(getattr(value, "expression", None), Bit):
             value = value.expression
         if isinstance(value, (BitHandler, Bit)):
-            if hasattr(self, "class_lookups"):
-                # Django 1.7+
-                return [value.mask]
-            else:
-                return BitQueryLookupWrapper(
-                    self.model._meta.db_table, self.db_column or self.name, value
-                )
+            return [value.mask]
         return BigIntegerField.get_db_prep_lookup(
             self, lookup_type=lookup_type, value=value, connection=connection, prepared=prepared
         )
@@ -151,6 +147,8 @@ class BitField(BigIntegerField):
         if isinstance(getattr(value, "expression", None), Bit):
             value = value.expression
         if isinstance(value, Bit):
+            if lookup_type in ("exact",):
+                return value
             raise TypeError("Lookup type %r not supported with `Bit` type." % lookup_type)
         return BigIntegerField.get_prep_lookup(self, lookup_type, value)
 
@@ -158,6 +156,15 @@ class BitField(BigIntegerField):
         if isinstance(value, Bit):
             value = value.mask
         if not isinstance(value, BitHandler):
+            # Regression for #1425: fix bad data that was created resulting
+            # in negative values for flags.  Compute the value that would
+            # have been visible ot the application to preserve compatibility.
+            if isinstance(value, six.integer_types) and value < 0:
+                new_value = 0
+                for bit_number, _ in enumerate(self.flags):
+                    new_value |= value & (2 ** bit_number)
+                value = new_value
+
             value = BitHandler(value, self.flags, self.labels)
         else:
             # Ensure flags are consistent for unpickling
@@ -170,7 +177,4 @@ class BitField(BigIntegerField):
         return name, path, args, kwargs
 
 
-try:
-    BitField.register_lookup(BitQueryLookupWrapper)
-except AttributeError:
-    pass
+BitField.register_lookup(BitQueryLookupWrapper)
diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index 6cfba07db5..f9a632014e 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -2,46 +2,22 @@ from __future__ import absolute_import
 
 from bitfield.types import Bit, BitHandler
 
+from django.db.models.lookups import Lookup
 
-class BitQueryLookupWrapper(object):
-    def __init__(self, alias, column, bit):
-        self.table_alias = alias
-        self.column = column
-        self.bit = bit
 
-    def as_sql(self, qn, connection=None):
-        """
-        Create the proper SQL fragment. This inserts something like
-        "(T0.flags & value) != 0".
+class BitQueryLookupWrapper(Lookup):
+    def process_lhs(self, qn, connection, lhs=None):
+        lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
+        if self.rhs:
+            lhs_sql = lhs_sql + " & %s"
+        else:
+            lhs_sql = lhs_sql + " | %s"
+        params.extend(self.process_rhs(qn, connection)[1])
+        return lhs_sql, params
 
-        This will be called by Where.as_sql()
-        """
-        if self.bit:
-            return ("(%s.%s | %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
-        return ("(%s.%s & %d)" % (qn(self.table_alias), qn(self.column), self.bit.mask), [])
+    def get_db_prep_lookup(self, value, connection, prepared=False):
+        v = value.mask if isinstance(value, (BitHandler, Bit)) else value
+        return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
 
-
-try:
-    # Django 1.7+
-    from django.db.models.lookups import Lookup
-
-    class BitQueryLookupWrapper(Lookup):  # NOQA
-        def process_lhs(self, qn, connection, lhs=None):
-            lhs_sql, params = super(BitQueryLookupWrapper, self).process_lhs(qn, connection, lhs)
-            if self.rhs:
-                lhs_sql = lhs_sql + " & %s"
-            else:
-                lhs_sql = lhs_sql + " | %s"
-            params.extend(self.process_rhs(qn, connection)[1])
-            return lhs_sql, params
-
-        def get_db_prep_lookup(self, value, connection, prepared=False):
-            v = value.mask if isinstance(value, (BitHandler, Bit)) else value
-            return super(BitQueryLookupWrapper, self).get_db_prep_lookup(v, connection)
-
-        def get_prep_lookup(self):
-            return self.rhs
-
-
-except ImportError:
-    pass
+    def get_prep_lookup(self):
+        return self.rhs
diff --git a/src/bitfield/types.py b/src/bitfield/types.py
index 0cf60f526d..67d24ead79 100644
--- a/src/bitfield/types.py
+++ b/src/bitfield/types.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-import django
 import six
 
 from six import string_types
@@ -12,10 +11,6 @@ def cmp(a, b):
 
 
 class Bit(object):
-    """
-    Represents a single Bit.
-    """
-
     def __init__(self, number, is_set=True):
         self.number = number
         self.is_set = bool(is_set)
@@ -27,11 +22,6 @@ class Bit(object):
     def __repr__(self):
         return "<%s: number=%d, is_set=%s>" % (self.__class__.__name__, self.number, self.is_set)
 
-    # def __str__(self):
-    #     if self.is_set:
-    #         return 'Yes'
-    #     return 'No'
-
     def __int__(self):
         return self.mask
 
@@ -260,15 +250,14 @@ class BitHandler(object):
         return self._labels[flag]
 
 
-if django.VERSION[:2] >= (1, 8):
-    from django.core.exceptions import ImproperlyConfigured
+from django.core.exceptions import ImproperlyConfigured
 
-    # We need to register adapters in Django 1.8 in order to prevent
-    # "ProgrammingError: can't adapt type"
-    try:
-        from django.db.backends.postgresql_psycopg2.base import Database
+# We need to register adapters in Django 1.8 in order to prevent
+# "ProgrammingError: can't adapt type"
+try:
+    from django.db.backends.postgresql_psycopg2.base import Database
 
-        Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
-        Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
-    except ImproperlyConfigured:
-        pass
+    Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
+    Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
+except ImproperlyConfigured:
+    pass
diff --git a/tests/bitfield/forms.py b/tests/bitfield/forms.py
deleted file mode 100644
index d78a2fb376..0000000000
--- a/tests/bitfield/forms.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-
-from .models import BitFieldTestModel
-
-
-class BitFieldTestModelForm(forms.ModelForm):
-    class Meta:
-        model = BitFieldTestModel
-        exclude = tuple()
diff --git a/tests/bitfield/models.py b/tests/bitfield/models.py
deleted file mode 100644
index 8ca51db4a5..0000000000
--- a/tests/bitfield/models.py
+++ /dev/null
@@ -1,11 +0,0 @@
-from __future__ import absolute_import
-
-from django.db import models
-
-from bitfield import BitField
-
-
-class BitFieldTestModel(models.Model):
-    flags = BitField(
-        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
-    )
diff --git a/tests/bitfield/__init__.py b/tests/sentry/db/models/fields/bitfield/__init__.py
similarity index 100%
rename from tests/bitfield/__init__.py
rename to tests/sentry/db/models/fields/bitfield/__init__.py
diff --git a/tests/bitfield/tests.py b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
similarity index 88%
rename from tests/bitfield/tests.py
rename to tests/sentry/db/models/fields/bitfield/test_bitfield.py
index bb190ae577..3a64470e1e 100644
--- a/tests/bitfield/tests.py
+++ b/tests/sentry/db/models/fields/bitfield/test_bitfield.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import pickle
 import six
 
+from django import forms
 from django.db import connection, models
 from django.db.models import F
 from django.test import TestCase
@@ -10,8 +11,20 @@ from django.test import TestCase
 from bitfield import Bit, BitField, BitHandler
 from bitfield.compat import bitand, bitor
 
-from .forms import BitFieldTestModelForm
-from .models import BitFieldTestModel
+
+class BitFieldTestModel(models.Model):
+    class Meta:
+        app_label = "sentry"
+
+    flags = BitField(
+        flags=("FLAG_0", "FLAG_1", "FLAG_2", "FLAG_3"), default=3, db_column="another_name"
+    )
+
+
+class BitFieldTestModelForm(forms.ModelForm):
+    class Meta:
+        model = BitFieldTestModel
+        exclude = tuple()
 
 
 class BitHandlerTest(TestCase):
@@ -176,17 +189,28 @@ class BitFieldTest(TestCase):
 
     def test_select(self):
         BitFieldTestModel.objects.create(flags=3)
+        # This F().bitor style of lookup is used extensively throughout sentry/getsentry.
+        # If this test breaks, then that most likely means our custom lookup doesn't work
+        # with sentry/getsentry code.
         self.assertTrue(
-            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_1).exists()
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitor(BitFieldTestModel.flags.FLAG_1)
+            ).exists()
         )
         self.assertTrue(
-            BitFieldTestModel.objects.filter(flags=BitFieldTestModel.flags.FLAG_0).exists()
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitor(BitFieldTestModel.flags.FLAG_0)
+            ).exists()
         )
         self.assertFalse(
-            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_0).exists()
+            BitFieldTestModel.objects.exclude(
+                flags=F("flags").bitor(BitFieldTestModel.flags.FLAG_0)
+            ).exists()
         )
         self.assertFalse(
-            BitFieldTestModel.objects.exclude(flags=BitFieldTestModel.flags.FLAG_1).exists()
+            BitFieldTestModel.objects.exclude(
+                flags=F("flags").bitor(BitFieldTestModel.flags.FLAG_1)
+            ).exists()
         )
 
     def test_update(self):
@@ -237,14 +261,26 @@ class BitFieldTest(TestCase):
             flags=BitFieldTestModel.flags.FLAG_0 | BitFieldTestModel.flags.FLAG_1
         )
         BitFieldTestModel.objects.create(flags=BitFieldTestModel.flags.FLAG_1)
+        # This F().bitand style of lookup is used extensively throughout sentry/getsentry.
+        # If this test breaks, then that most likely means our custom lookup doesn't work
+        # with sentry/getsentry code.
         self.assertEqual(
-            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_0).count(), 1
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitand(~BitFieldTestModel.flags.FLAG_0)
+            ).count(),
+            1,
         )
         self.assertEqual(
-            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_1).count(), 0
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitand(~BitFieldTestModel.flags.FLAG_1)
+            ).count(),
+            0,
         )
         self.assertEqual(
-            BitFieldTestModel.objects.filter(flags=~BitFieldTestModel.flags.FLAG_2).count(), 2
+            BitFieldTestModel.objects.filter(
+                flags=F("flags").bitand(~BitFieldTestModel.flags.FLAG_2)
+            ).count(),
+            2,
         )
 
     def test_default_value(self):
