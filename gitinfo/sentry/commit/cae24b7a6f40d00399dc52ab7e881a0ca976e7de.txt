commit cae24b7a6f40d00399dc52ab7e881a0ca976e7de
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Nov 25 14:22:04 2016 +0100

    Only return things not on hold by default

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index e1595a8858..637de6b1b5 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -150,6 +150,8 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
             except InvalidQuery as e:
                 raise ValidationError(u'Your search query could not be parsed: {}'.format(e.message))
 
+        query_kwargs['include_on_hold'] = request.GET.get('includeOnHold') == '1'
+
         return query_kwargs
 
     # bookmarks=0/1
@@ -184,6 +186,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         :qparam querystring query: an optional Sentry structured search
                                    query.  If not provided an implied
                                    ``"is:resolved"`` is assumed.)
+        :qparam bool includeOnHold: include events that are on hold.
         :pparam string organization_slug: the slug of the organization the
                                           issues belong to.
         :pparam string project_slug: the slug of the project the issues
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 6a0f21d91a..2b08f2aec9 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -83,10 +83,14 @@ def get_group_with_redirect(id, queryset=None):
 class GroupManager(BaseManager):
     use_for_related_fields = True
 
-    def processed(self):
+    def processed_only(self):
         """Only returns events that are not on hold."""
         return self.exclude(on_hold=True)
 
+    def on_hold_only(self):
+        """Only returns events that are on hold."""
+        return self.filter(on_hold=True)
+
     def by_qualified_short_id(self, org, short_id):
         match = _short_id_re.match(short_id.strip())
         if match is None:
diff --git a/src/sentry/search/base.py b/src/sentry/search/base.py
index ac930399d1..fd6d687d1d 100644
--- a/src/sentry/search/base.py
+++ b/src/sentry/search/base.py
@@ -27,8 +27,8 @@ class SearchBackend(object):
     def query(self, project, query=None, status=None, tags=None,
               bookmarked_by=None, assigned_to=None, first_release=None,
               sort_by='date', age_from=None, age_to=None,
-              unassigned=None, date_from=None, date_to=None, cursor=None,
-              limit=100):
+              unassigned=None, date_from=None, date_to=None,
+              include_on_hold=False, cursor=None, limit=100):
         """
         The return value should be a CursorResult.
 
diff --git a/src/sentry/search/django/backend.py b/src/sentry/search/django/backend.py
index 130e2fff7f..e294e06343 100644
--- a/src/sentry/search/django/backend.py
+++ b/src/sentry/search/django/backend.py
@@ -75,12 +75,17 @@ class DjangoSearchBackend(SearchBackend):
                         date_to=None, date_to_inclusive=True,
                         active_at_from=None, active_at_from_inclusive=True,
                         active_at_to=None, active_at_to_inclusive=True,
-                        cursor=None, limit=None):
+                        include_on_hold=False, date_to=None,
+                        date_to_inclusive=True, cursor=None, limit=None):
         from sentry.models import Event, Group, GroupSubscription, GroupStatus
 
         engine = get_db_engine('default')
 
         queryset = Group.objects.filter(project=project)
+
+        if not include_on_hold:
+            queryset = queryset.processed_only()
+
         if query:
             # TODO(dcramer): if we want to continue to support search on SQL
             # we should at least optimize this in Postgres so that it does
