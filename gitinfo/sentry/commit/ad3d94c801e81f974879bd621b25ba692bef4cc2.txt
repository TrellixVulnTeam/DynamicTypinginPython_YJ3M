commit ad3d94c801e81f974879bd621b25ba692bef4cc2
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Oct 1 10:34:34 2018 -0700

    feat(integrations): Add the user to the integration sync comment task. (#9881)
    
    * Add the user to the integration sync comment task.
    
    * saving place.
    
    * Changed comment handling in vsts
    
    * switched from passing user to user_id
    
    * Added quoted comment jira
    
    * wrote vsts comment test.
    
    * Removed changes to group notes test
    
    * fixed jira create comment and added test

diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 27e11a7909..ca68f2d3a7 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -114,6 +114,7 @@ class GroupNotesEndpoint(GroupEndpoint):
                 kwargs={
                     'external_issue_id': external_issue_id,
                     'data': data,
+                    'user_id': request.user.id,
                 }
             )
         return Response(serialize(activity, request.user), status=201)
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index e98324af4c..0c9dec2812 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -8,6 +8,7 @@ from sentry.integrations import (
 from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.issues import IssueSyncMixin
 from sentry.mediators.plugins import Migrator
+from sentry.models import User
 from sentry.pipeline import PipelineView
 
 
@@ -61,8 +62,11 @@ class ExampleIntegration(IntegrationInstallation, IssueSyncMixin):
     def get_issue_url(self, key):
         return u'https://example/issues/{}'.format(key)
 
-    def create_comment(self):
-        pass
+    def create_comment(self, issue_id, user_id, comment):
+        user = User.objects.get(id=user_id)
+        attribution = '%s wrote:\n\n' % user.name
+        quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment)
+        return quoted_comment
 
     def create_issue(self, data, **kwargs):
         if 'assignee' not in data:
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 71a0fdf7da..3ae4387b2c 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -14,7 +14,7 @@ from sentry.integrations import (
 )
 from sentry.integrations.exceptions import ApiUnauthorized, ApiError, IntegrationError, IntegrationFormError
 from sentry.integrations.issues import IssueSyncMixin
-from sentry.models import IntegrationExternalProject, Organization, OrganizationIntegration
+from sentry.models import IntegrationExternalProject, Organization, OrganizationIntegration, User
 from sentry.utils.http import absolute_uri
 
 from .client import JiraApiClient
@@ -285,8 +285,12 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             'description': issue['fields']['description'],
         }
 
-    def create_comment(self, issue_id, comment):
-        return self.get_client().create_comment(issue_id, comment)
+    def create_comment(self, issue_id, user_id, comment):
+        # https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=texteffects
+        user = User.objects.get(id=user_id)
+        attribution = '%s wrote:\n\n' % user.name
+        quoted_comment = '%s{quote}%s{quote}' % (attribution, comment)
+        return self.get_client().create_comment(issue_id, quoted_comment)
 
     def search_issues(self, query):
         return self.get_client().search_issues(query)
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index bc1321ad68..577f4d2c98 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -10,7 +10,7 @@ from sentry import http, features
 from sentry.constants import ObjectStatus
 from sentry.models import (
     Integration as IntegrationModel, IntegrationExternalProject, Organization,
-    OrganizationIntegration,
+    OrganizationIntegration, User
 )
 from sentry.integrations import IntegrationInstallation, IntegrationFeatures, IntegrationProvider, IntegrationMetadata, FeatureDescription
 from sentry.integrations.exceptions import ApiError, IntegrationError
@@ -286,8 +286,14 @@ class VstsIntegration(IntegrationInstallation, RepositoryMixin, VstsIssueSync):
         except KeyError:
             return None
 
-    def create_comment(self, issue_id, comment):
-        self.get_client().update_work_item(self.instance, issue_id, comment=comment)
+    def create_comment(self, issue_id, user_id, comment):
+        # VSTS uses markdown or xml
+        # https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/bots/bots-text-formats
+        user = User.objects.get(id=user_id)
+        attribution = '%s wrote:\n\n' % user.name
+
+        quoted_comment = '%s<blockquote>%s</blockquote>' % (attribution, comment)
+        self.get_client().update_work_item(self.instance, issue_id, comment=quoted_comment)
 
 
 class VstsIntegrationProvider(IntegrationProvider):
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 14d09d343a..31a95e0a60 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -21,7 +21,7 @@ logger = logging.getLogger('sentry.tasks.integrations')
 )
 # TODO(jess): Add more retry exclusions once ApiClients have better error handling
 @retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist))
-def post_comment(external_issue_id, data, **kwargs):
+def post_comment(external_issue_id, data, user_id, **kwargs):
     # sync Sentry comments to an external issue
     external_issue = ExternalIssue.objects.get(id=external_issue_id)
 
@@ -36,13 +36,13 @@ def post_comment(external_issue_id, data, **kwargs):
         organization_id=external_issue.organization_id,
     )
     if installation.should_sync('comment'):
-        installation.create_comment(
-            external_issue.key, data['text'])
+        installation.create_comment(external_issue.key, user_id, data['text'])
         analytics.record(
             'integration.issue.comments.synced',
             provider=integration.provider,
             id=integration.id,
             organization_id=external_issue.organization_id,
+            user_id=user_id,
         )
 
 
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index bcd366f822..9beec27712 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -2,9 +2,6 @@ from __future__ import absolute_import
 
 import six
 
-import mock
-
-from sentry.integrations.example.integration import ExampleIntegration
 from sentry.models import (
     Activity, GroupLink, GroupSubscription, GroupSubscriptionReason,
     ExternalIssue, Integration, OrganizationIntegration
@@ -174,8 +171,7 @@ class GroupNoteCreateTest(APITestCase):
                 group=group,
                 reason=GroupSubscriptionReason.team_mentioned)) == 1
 
-    @mock.patch.object(ExampleIntegration, 'create_comment')
-    def test_with_group_link(self, mock_create_comment):
+    def test_with_group_link(self):
         group = self.group
 
         integration = Integration.objects.create(
@@ -211,6 +207,8 @@ class GroupNoteCreateTest(APITestCase):
             relationship=GroupLink.Relationship.references,
         )
 
+        self.user.name = 'Sentry Admin'
+        self.user.save()
         self.login_as(user=self.user)
 
         url = u'/api/0/issues/{}/comments/'.format(group.id)
@@ -220,9 +218,10 @@ class GroupNoteCreateTest(APITestCase):
             'organizations:internal-catchall': True,
         }):
             with self.tasks():
+                comment = 'hello world'
                 response = self.client.post(
                     url, format='json', data={
-                        'text': 'hello world',
+                        'text': comment,
                     }
                 )
                 assert response.status_code == 201, response.content
@@ -230,5 +229,4 @@ class GroupNoteCreateTest(APITestCase):
                 activity = Activity.objects.get(id=response.data['id'])
                 assert activity.user == self.user
                 assert activity.group == group
-                assert activity.data == {'text': 'hello world'}
-                mock_create_comment.assert_called_with('APP-123', 'hello world')
+                assert activity.data == {'text': comment}
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 31e5b71b97..400758717a 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -350,6 +350,9 @@ class MockJiraApiClient(object):
     def get_issue(self, issue_key):
         return json.loads(SAMPLE_GET_ISSUE_RESPONSE.strip())
 
+    def create_comment(self, issue_id, comment):
+        return comment
+
     def create_issue(self, data):
         return {'key': 'APP-123'}
 
@@ -684,3 +687,27 @@ class JiraIntegrationTest(APITestCase):
                 },
             },
         }
+
+    def test_create_comment(self):
+        org = self.organization
+
+        self.user.name = 'Sentry Admin'
+        self.user.save()
+        self.login_as(self.user)
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example Jira',
+        )
+        integration.add_organization(org, self.user)
+        installation = integration.get_installation(org.id)
+
+        comment = 'hello world\nThis is a comment.\n\n\n    Glad it\'s quoted'
+        with mock.patch.object(MockJiraApiClient, 'create_comment') as mock_create_comment:
+            def get_client():
+                return MockJiraApiClient()
+
+            with mock.patch.object(installation, 'get_client', get_client):
+                installation.create_comment(1, self.user.id, comment)
+                assert mock_create_comment.call_args[0][1] == \
+                    'Sentry Admin wrote:\n\n{quote}%s{quote}' % comment
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
index 1e625efbdb..927e8c8700 100644
--- a/tests/sentry/integrations/vsts/test_integration.py
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from mock import patch
 
 from sentry.identity.vsts import VSTSIdentityProvider
 from sentry.integrations.exceptions import IntegrationError
@@ -386,3 +387,17 @@ class VstsIntegrationTest(VstsIntegrationTestCase):
         domain_name = integration.model.metadata['domain_name']
         assert domain_name == account_uri
         assert Integration.objects.get(provider='vsts').metadata['domain_name'] == account_uri
+
+    @patch('sentry.integrations.vsts.client.VstsApiClient.update_work_item')
+    def test_create_comment(self, mock_update_work_item):
+        self.assert_installation()
+        integration = Integration.objects.get(provider='vsts')
+        installation = integration.get_installation(self.organization.id)
+
+        comment = 'hello world\nThis is a comment.\n\n\n    Glad it\'s quoted'
+        self.user.name = 'Sentry Admin'
+        self.user.save()
+        installation.create_comment(1, self.user.id, comment)
+
+        assert mock_update_work_item.call_args[1]['comment'] == \
+            'Sentry Admin wrote:\n\n<blockquote>%s</blockquote>' % comment
