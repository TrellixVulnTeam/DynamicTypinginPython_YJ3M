commit 24a682c4b5e2d2924a1c48ee90518963803b40c9
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 21 15:43:56 2015 -0700

    Automatically version caches for BaseManager

diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index bb78c6a945..9a90d5573d 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -10,6 +10,7 @@ from __future__ import absolute_import, print_function
 
 import hashlib
 import logging
+import six
 import threading
 import weakref
 
@@ -19,8 +20,7 @@ from django.db.models import Manager, Model
 from django.db.models.signals import (
     post_save, post_delete, post_init, class_prepared)
 from django.utils.encoding import smart_str
-
-import six
+from hashlib import md5
 
 from sentry.utils.cache import cache
 
@@ -75,6 +75,7 @@ class BaseManager(Manager):
     def __init__(self, *args, **kwargs):
         self.cache_fields = kwargs.pop('cache_fields', [])
         self.cache_ttl = kwargs.pop('cache_ttl', 60 * 5)
+        self.cache_version = kwargs.pop('cache_version', None)
         self.__local_cache = threading.local()
         super(BaseManager, self).__init__(*args, **kwargs)
 
@@ -86,6 +87,11 @@ class BaseManager(Manager):
     def _set_cache(self, value):
         self.__local_cache.value = value
 
+    def _generate_cache_version(self):
+        return md5(
+            '&'.join(sorted(f.attname for f in self.model._meta.fields))
+        ).hexdigest()[:3]
+
     __cache = property(_get_cache, _set_cache)
 
     def __getstate__(self):
@@ -109,6 +115,9 @@ class BaseManager(Manager):
         if not self.cache_fields:
             return
 
+        if not self.cache_version:
+            self.cache_version = self._generate_cache_version()
+
         post_init.connect(self.__post_init, sender=sender, weak=False)
         post_save.connect(self.__post_save, sender=sender, weak=False)
         post_delete.connect(self.__post_delete, sender=sender, weak=False)
@@ -140,14 +149,24 @@ class BaseManager(Manager):
             if key in pk_names:
                 continue
             # store pointers
-            cache.set(self.__get_lookup_cache_key(**{key: getattr(instance, key)}), pk_val, self.cache_ttl)  # 1 hour
+            cache.set(
+                key=self.__get_lookup_cache_key(**{key: getattr(instance, key)}),
+                value=pk_val,
+                timeout=self.cache_ttl,
+                version=self.cache_version,
+            )
 
         # Ensure we don't serialize the database into the cache
         db = instance._state.db
         instance._state.db = None
         # store actual object
         try:
-            cache.set(self.__get_lookup_cache_key(**{pk_name: pk_val}), instance, self.cache_ttl)
+            cache.set(
+                key=self.__get_lookup_cache_key(**{pk_name: pk_val}),
+                value=instance,
+                timeout=self.cache_ttl,
+                version=self.cache_version,
+            )
         except Exception as e:
             logger.error(e, exc_info=True)
         instance._state.db = db
@@ -159,7 +178,10 @@ class BaseManager(Manager):
                     continue
                 value = self.__cache[instance][key]
                 if value != getattr(instance, key):
-                    cache.delete(self.__get_lookup_cache_key(**{key: value}))
+                    cache.delete(
+                        key=self.__get_lookup_cache_key(**{key: value}),
+                        version=self.cache_version,
+                    )
 
         self.__cache_state(instance)
 
@@ -172,9 +194,15 @@ class BaseManager(Manager):
             if key in ('pk', pk_name):
                 continue
             # remove pointers
-            cache.delete(self.__get_lookup_cache_key(**{key: getattr(instance, key)}))
+            cache.delete(
+                key=self.__get_lookup_cache_key(**{key: getattr(instance, key)}),
+                version=self.cache_version,
+            )
         # remove actual object
-        cache.delete(self.__get_lookup_cache_key(**{pk_name: instance.pk}))
+        cache.delete(
+            key=self.__get_lookup_cache_key(**{pk_name: instance.pk}),
+            version=self.cache_version,
+        )
 
     def __get_lookup_cache_key(self, **kwargs):
         return make_key(self.model, 'modelcache', kwargs)
@@ -204,7 +232,7 @@ class BaseManager(Manager):
         if key in self.cache_fields or key == pk_name:
             cache_key = self.__get_lookup_cache_key(**{key: value})
 
-            retval = cache.get(cache_key)
+            retval = cache.get(cache_key, version=self.cache_version)
             if retval is None:
                 result = self.get(**kwargs)
                 # Ensure we're pushing it into the cache
@@ -261,7 +289,7 @@ class BaseManager(Manager):
     def uncache_object(self, instance_id):
         pk_name = self.model._meta.pk.name
         cache_key = self.__get_lookup_cache_key(**{pk_name: instance_id})
-        cache.delete(cache_key)
+        cache.delete(cache_key, version=self.cache_version)
 
     def post_save(self, instance, **kwargs):
         """
