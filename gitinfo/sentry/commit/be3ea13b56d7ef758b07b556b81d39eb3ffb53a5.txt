commit be3ea13b56d7ef758b07b556b81d39eb3ffb53a5
Author: Mark Story <mark@sentry.io>
Date:   Tue Feb 25 15:36:25 2020 -0500

    fix(discover) Reduce the maximum amount of data that can be requested (#17286)
    
    Cap requests to 4500 points which gives us enough space to answer
    30minutes over 90 days. I'd like to dial down the resolution for the 30
    and 90 day windows as we currently get more data than will fit on
    a screen.

diff --git a/src/sentry/api/endpoints/organization_events_stats.py b/src/sentry/api/endpoints/organization_events_stats.py
index 44f615674b..24a9d7cf2b 100644
--- a/src/sentry/api/endpoints/organization_events_stats.py
+++ b/src/sentry/api/endpoints/organization_events_stats.py
@@ -21,6 +21,11 @@ from sentry.utils import snuba
 from sentry.utils.dates import parse_stats_period
 from sentry.utils.compat import zip
 
+# Maximum number of results we are willing to fetch.
+# Clients should adapt the interval width based on their
+# display width.
+MAX_POINTS = 4500
+
 
 class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
     def get(self, request, organization):
@@ -29,7 +34,8 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
 
         try:
             columns = request.GET.getlist("yAxis", ["count()"])
-            rollup = self.get_rollup(request)
+            params = self.get_filter_params(request, organization)
+            rollup = self.get_rollup(request, params)
             # Backwards compatibility for incidents which uses the old
             # column aliases as it straddles both versions of events/discover.
             # We will need these aliases until discover2 flags are enabled for all
@@ -42,7 +48,6 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
             }
             query_columns = [column_map.get(column, column) for column in columns]
 
-            params = self.get_filter_params(request, organization)
             result = discover.timeseries_query(
                 selected_columns=query_columns,
                 query=request.GET.get("query"),
@@ -68,10 +73,18 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
             data = serializer.serialize(result)
         return Response(data, status=200)
 
-    def get_rollup(self, request):
+    def get_rollup(self, request, params):
         interval = parse_stats_period(request.GET.get("interval", "1h"))
         if interval is None:
             interval = timedelta(hours=1)
+
+        date_range = params['end'] - params['start']
+        if date_range.total_seconds() / interval.total_seconds() > MAX_POINTS:
+            raise InvalidSearchQuery(
+                'Your interval and date range would create too many results. '
+                'Use a larger interval, or a smaller date range.'
+            )
+
         return int(interval.total_seconds())
 
     def get_v1_results(self, request, organization):
@@ -82,8 +95,8 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
         except NoProjects:
             return Response({"data": []})
 
-        rollup = self.get_rollup(request)
         snuba_args = self.get_field(request, snuba_args)
+        rollup = self.get_rollup(request, snuba_args)
 
         result = transform_aliases_and_query(
             aggregations=snuba_args.get("aggregations"),
diff --git a/tests/snuba/api/endpoints/test_organization_events_stats.py b/tests/snuba/api/endpoints/test_organization_events_stats.py
index 3052cf1541..7898b458ed 100644
--- a/tests/snuba/api/endpoints/test_organization_events_stats.py
+++ b/tests/snuba/api/endpoints/test_organization_events_stats.py
@@ -578,3 +578,18 @@ class OrganizationEventsStatsEndpointTest(APITestCase, SnubaTestCase):
             )
 
         assert mock_query.call_count == 1
+
+    def test_invalid_interval(self):
+        with self.feature("organizations:discover-basic"):
+            response = self.client.get(
+                self.url,
+                format="json",
+                data={
+                    "end": iso_format(before_now()),
+                    "start": iso_format(before_now(hours=24)),
+                    "query": "",
+                    "interval": "1s",
+                    "yAxis": "count()",
+                },
+            )
+        assert response.status_code == 400
