commit d93776c7a9e51212eb4560e5d6f90d74e8f1eab3
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jul 12 13:28:57 2018 -0700

    ref(account-settings) Remove beta notice and redirect old account settings links (#8998)

diff --git a/src/sentry/static/sentry/app/components/avatarSettings.jsx b/src/sentry/static/sentry/app/components/avatarSettings.jsx
deleted file mode 100644
index bd18e4fd89..0000000000
--- a/src/sentry/static/sentry/app/components/avatarSettings.jsx
+++ /dev/null
@@ -1,131 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import createReactClass from 'create-react-class';
-
-import AlertActions from 'app/actions/alertActions';
-import ApiMixin from 'app/mixins/apiMixin';
-import AvatarCropper from 'app/components/avatarCropper';
-import AvatarRadio from 'app/components/avatarRadio';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {t} from 'app/locale';
-
-const AvatarSettings = createReactClass({
-  displayName: 'AvatarSettings',
-  propTypes: {
-    userId: PropTypes.number,
-  },
-
-  mixins: [ApiMixin],
-
-  getInitialState() {
-    return {
-      user: null,
-      savedDataUrl: null,
-      dataUrl: null,
-      hasError: false,
-    };
-  },
-
-  componentDidMount() {
-    this.api.request(this.getEndpoint(), {
-      method: 'GET',
-      success: this.updateUserState,
-      error: () => {
-        this.setState({hasError: true});
-      },
-    });
-  },
-
-  getEndpoint() {
-    return '/users/me/avatar/';
-  },
-
-  updateUserState(user) {
-    this.setState({user});
-  },
-
-  updateDataUrlState(dataUrlState) {
-    this.setState(dataUrlState);
-  },
-
-  handleError(msg) {
-    AlertActions.addAlert({
-      message: t(msg),
-      type: 'error',
-    });
-  },
-
-  handleSuccess(user) {
-    this.setState({user});
-    AlertActions.addAlert({
-      message: t('Successfully saved avatar preferences'),
-      type: 'success',
-      expireAfrer: 3000,
-    });
-  },
-
-  saveSettings(ev) {
-    ev.preventDefault();
-    let avatarPhoto = null;
-    if (this.state.dataUrl) {
-      avatarPhoto = this.state.dataUrl.split(',')[1];
-    }
-    this.api.request(this.getEndpoint(), {
-      method: 'PUT',
-      data: {
-        avatar_photo: avatarPhoto,
-        avatar_type: this.state.user.avatar.avatarType,
-      },
-      success: user => {
-        this.setState({savedDataUrl: this.state.dataUrl});
-        this.handleSuccess(user);
-      },
-      error: this.handleError.bind(this, 'There was an error saving your preferences.'),
-    });
-  },
-
-  render() {
-    if (this.state.hasError) {
-      return <LoadingError />;
-    }
-    if (!this.state.user) {
-      return <LoadingIndicator />;
-    }
-
-    let gravatarMessage = (
-      <div className="well">
-        {t('Gravatars are managed through ')}
-        <a href="http://gravatar.com" target="_blank" rel="noreferrer noopener">
-          Gravatar.com
-        </a>
-      </div>
-    );
-
-    return (
-      <div style={{lineHeight: '1.5em'}}>
-        <form>
-          <AvatarRadio user={this.state.user} updateUser={this.updateUserState} />
-
-          {this.state.user.avatar.avatarType === 'gravatar' && gravatarMessage}
-
-          {this.state.user.avatar.avatarType === 'upload' && (
-            <AvatarCropper
-              {...this.props}
-              model={this.state.user}
-              savedDataUrl={this.state.savedDataUrl}
-              updateDataUrlState={this.updateDataUrlState}
-            />
-          )}
-          <fieldset className="form-actions">
-            <button className="btn btn-primary" onClick={this.saveSettings}>
-              {t('Done')}
-            </button>
-          </fieldset>
-        </form>
-      </div>
-    );
-  },
-});
-
-export default AvatarSettings;
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index b89ed24c23..97faee3989 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -105,8 +105,6 @@ export default {
     AlertActions: require('app/actions/alertActions').default,
     AsyncComponent: require('app/components/asyncComponent').default,
     AsyncView: require('app/views/asyncView').default,
-    // TODO(billy): remove when old personal settings are deprecated #new-settings
-    AvatarSettings: require('app/components/avatarSettings').default,
     Button: require('app/components/buttons/button').default,
     mixins: {
       ApiMixin: require('app/mixins/apiMixin').default,
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
index 6d021421d8..6acc635a8e 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.jsx
@@ -1,98 +1,15 @@
 import {Box, Flex} from 'grid-emotion';
-import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import Alert from 'app/components/alert';
 import Footer from 'app/components/footer';
-import space from 'app/styles/space';
 
 import SettingsBackButton from './settingsBackButton';
 import SettingsBreadcrumb from './settingsBreadcrumb';
 import SettingsHeader from './settingsHeader';
 import SettingsSearch from './settingsSearch';
 
-let StyledAlert = styled(Alert)`
-  margin: ${space(3)} 0;
-`;
-
-// TODO(billy): Temp #NEW-SETTINGS
-let NewSettingsWarning = ({location = {}}) => {
-  // This translates current URLs back to "old" settings URLs
-  // This is so that we can move from new settings back to old settings
-  let projectRegex = /^\/settings\/([^\/]+)\/([^\/]+)\//;
-  let accountRegex = /^\/settings\/account\/([^\/]+)\//;
-  let orgSettingsIndex = /^\/settings\/([^\/]+)\/$/;
-  let orgRegex = /^\/settings\/([^\/]+)\/(settings|projects|teams|stats|members|auth|api-keys|audit-log|rate-limits|repos|billing|payments|subscription|legal|support)\//;
-  let isProject = projectRegex.test(location.pathname);
-  let isOrgIndex = orgSettingsIndex.test(location.pathname);
-  let isOrg = orgRegex.test(location.pathname);
-  let isAccount = accountRegex.test(location.pathname);
-  let oldLocation;
-
-  if (isAccount) {
-    oldLocation = location.pathname
-      .replace('settings/account/notifications/alerts', 'account/settings/notifications')
-      .replace(accountRegex, '/account/settings/$1/')
-      .replace('details/', '')
-      .replace('settings/close-account/', 'remove/')
-      .replace('account/settings/api/', 'api/')
-      .replace('auth-tokens/', '');
-  } else if (isOrgIndex || isOrg || isProject) {
-    return null;
-  }
-
-  // original org auth view and account settings are django views so we can't use react router navigation
-  let isRouter = !/\/(auth|account)\//.test(location.pathname);
-  let linkProps = {
-    href: isRouter ? undefined : oldLocation,
-    to: isRouter ? oldLocation : undefined,
-  };
-  let LinkWithFallback = isRouter ? Link : 'a';
-  return (
-    <StyledAlert type="info" icon="icon-circle-exclamation">
-      These settings are currently in beta. Please report any issues. You can temporarily
-      visit the <LinkWithFallback {...linkProps}>old settings page</LinkWithFallback> if
-      necessary.
-    </StyledAlert>
-  );
-};
-
-const Container = styled(Flex)`
-  max-width: ${p => p.theme.settings.containerWidth};
-  margin: 0 auto;
-  padding: 0 ${p => p.theme.grid * 2}px;
-`;
-
-// this wrapper is required, else content won't stretch horizontally
-const ContentContainerWrapper = styled(Box)`
-  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */
-`;
-
-const SidebarWrapper = styled(Box)`
-  flex-shrink: 0;
-  width: ${p => p.theme.settings.sidebarWidth};
-`;
-
-/**
- * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.
- * Will also cut off tooltips.
- */
-const Content = styled(Box)`
-  flex: 1;
-`;
-
-const SettingsSubheader = styled.div`
-  position: relative;
-  z-index: ${p => p.theme.zIndex.dropdown};
-  padding: ${p => p.theme.grid}px 0;
-  margin-bottom: ${p => p.theme.grid * 3}px;
-  border-bottom: 1px solid ${p => p.theme.borderLight};
-  background: ${p => p.theme.offWhite};
-  font-size: 14px;
-`;
-
 class SettingsLayout extends React.Component {
   static propTypes = {
     renderNavigation: PropTypes.func,
@@ -135,10 +52,7 @@ class SettingsLayout extends React.Component {
             {typeof renderNavigation === 'function' && (
               <SidebarWrapper>{renderNavigation()}</SidebarWrapper>
             )}
-            <Content>
-              {children}
-              <NewSettingsWarning location={this.props.location} />
-            </Content>
+            <Content>{children}</Content>
           </Container>
         </ContentContainerWrapper>
         <Footer />
@@ -147,3 +61,37 @@ class SettingsLayout extends React.Component {
   }
 }
 export default SettingsLayout;
+
+const Container = styled(Flex)`
+  max-width: ${p => p.theme.settings.containerWidth};
+  margin: 0 auto;
+  padding: 0 ${p => p.theme.grid * 2}px;
+`;
+
+// this wrapper is required, else content won't stretch horizontally
+const ContentContainerWrapper = styled(Box)`
+  flex: 1; /* so this stretches vertically so that footer is fixed at bottom */
+`;
+
+const SidebarWrapper = styled(Box)`
+  flex-shrink: 0;
+  width: ${p => p.theme.settings.sidebarWidth};
+`;
+
+/**
+ * Note: `overflow: hidden` will cause some buttons in `SettingsPageHeader` to be cut off because it has negative margin.
+ * Will also cut off tooltips.
+ */
+const Content = styled(Box)`
+  flex: 1;
+`;
+
+const SettingsSubheader = styled('div')`
+  position: relative;
+  z-index: ${p => p.theme.zIndex.dropdown};
+  padding: ${p => p.theme.grid}px 0;
+  margin-bottom: ${p => p.theme.grid * 3}px;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  background: ${p => p.theme.offWhite};
+  font-size: 14px;
+`;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e7f5a33e7e..f0807082a7 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -13,11 +13,9 @@ from django.http import HttpResponse
 from django.views.generic import RedirectView
 
 from sentry.web import api
-from sentry.web.frontend import accounts, admin, generic, accounts_twofactor
+from sentry.web.frontend import accounts, admin, generic
 from sentry.web.frontend.accept_organization_invite import \
     AcceptOrganizationInviteView
-from sentry.web.frontend.account_security import AccountSecurityView
-from sentry.web.frontend.account_notification import AccountNotificationView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.twofactor import TwoFactorAuthView, u2f_appid
 from sentry.web.frontend.auth_logout import AuthLogoutView
@@ -216,50 +214,28 @@ urlpatterns += patterns(
         accounts.set_password_confirm,
         name='sentry-account-set-password-confirm'
     ),
-    url(r'^account/settings/$', accounts.account_settings,
-        name='sentry-account-settings'),
-    url(
-        r'^account/settings/2fa/$', accounts.twofactor_settings, name='sentry-account-settings-2fa'
-    ),
-    url(
-        r'^account/settings/2fa/recovery/$',
-        accounts_twofactor.RecoveryCodeSettingsView.as_view(),
-        name='sentry-account-settings-2fa-recovery'
+    url(r'^account/settings/$',
+        RedirectView.as_view(pattern_name="sentry-account-settings", permanent=False),
     ),
     url(
-        r'^account/settings/2fa/totp/$',
-        accounts_twofactor.TotpSettingsView.as_view(),
-        name='sentry-account-settings-2fa-totp'
-    ),
-    url(
-        r'^account/settings/2fa/sms/$',
-        accounts_twofactor.SmsSettingsView.as_view(),
-        name='sentry-account-settings-2fa-sms'
-    ),
-    url(
-        r'^account/settings/2fa/u2f/$',
-        accounts_twofactor.U2fSettingsView.as_view(),
-        name='sentry-account-settings-2fa-u2f'
+        r'^account/settings/2fa/$',
+        RedirectView.as_view(pattern_name="sentry-account-settings-security", permanent=False),
     ),
     url(
         r'^account/settings/avatar/$',
-        accounts.avatar_settings,
-        name='sentry-account-settings-avatar'
+        RedirectView.as_view(pattern_name="sentry-account-settings-avatar", permanent=False),
     ),
     url(
         r'^account/settings/appearance/$',
-        accounts.appearance_settings,
-        name='sentry-account-settings-appearance'
+        RedirectView.as_view(pattern_name="sentry-account-settings-appearance", permanent=False),
     ),
     url(
         r'^account/settings/identities/$',
-        accounts.list_identities,
-        name='sentry-account-settings-identities'
+        RedirectView.as_view(pattern_name="sentry-account-settings-identities", permanent=False),
     ),
     url(
         r'^account/settings/subscriptions/$',
-        accounts.manage_subscriptions,
-        name='sentry-account-settings-subscriptions'
+        RedirectView.as_view(pattern_name="sentry-account-settings-subscriptions", permanent=False),
     ),
     url(
         r'^account/settings/identities/(?P<identity_id>[^\/]+)/disconnect/$',
@@ -278,16 +254,15 @@ urlpatterns += patterns(
     ),
     url(
         r'^account/settings/notifications/$',
-        AccountNotificationView.as_view(),
-        name='sentry-account-settings-notifications'
+        RedirectView.as_view(pattern_name="sentry-account-settings-notifications", permanent=False),
     ),
     url(
         r'^account/settings/security/$',
-        AccountSecurityView.as_view(),
-        name='sentry-account-security'
+        RedirectView.as_view(pattern_name="sentry-account-settings-security", permanent=False),
+    ),
+    url(r'^account/settings/emails/$',
+        RedirectView.as_view(pattern_name="sentry-account-settings-emails", permanent=False),
     ),
-    url(r'^account/settings/emails/$', accounts.show_emails,
-        name='sentry-account-settings-emails'),
 
     # Project Wizard
     url(
@@ -359,17 +334,32 @@ urlpatterns += patterns(
             url='https://docs.sentry.io/hosted/api/', permanent=False),
         name='sentry-api-docs-redirect'
     ),
-    url(r'^api/$', generic_react_page_view, name='sentry-api'),
-    url(r'^api/[^0]+/', generic_react_page_view),
+    url(r'^api/$',
+        RedirectView.as_view(pattern_name="sentry-api", permanent=False),
+    ),
+    url(r'^api/applications/$',
+        RedirectView.as_view(pattern_name="sentry-api-applications", permanent=False)),
+    url(r'^api/[^0]+/',
+        RedirectView.as_view(pattern_name="sentry-api-details", permanent=False),
+    ),
     url(r'^out/$', OutView.as_view()),
 
     url(r'^accept-transfer/$', react_page_view, name='sentry-accept-project-transfer'),
     # User settings use generic_react_page_view, while any view
     # acting on behalf of an organization should use react_page_view
-    url(r'^settings/account/security/$',
-        generic_react_page_view,
-        name='sentry-account-settings-security'),
+    url(r'^settings/account/$', generic_react_page_view, name="sentry-account-settings"),
+    url(r'^settings/account/$', generic_react_page_view, name="sentry-account-settings-appearance"),
+    url(r'^settings/account/security/$', generic_react_page_view, name='sentry-account-settings-security'),
+    url(r'^settings/account/avatar/$', generic_react_page_view, name='sentry-account-settings-avatar'),
+    url(r'^settings/account/identities/$', generic_react_page_view, name='sentry-account-settings-identities'),
+    url(r'^settings/account/subscriptions/$', generic_react_page_view, name='sentry-account-settings-subscriptions'),
+    url(r'^settings/account/notifications/$', generic_react_page_view, name='sentry-account-settings-notifications'),
+    url(r'^settings/account/email/$', generic_react_page_view, name='sentry-account-settings-emails'),
+    url(r'^settings/account/api/$', generic_react_page_view, name='sentry-api'),
+    url(r'^settings/account/api/applications/$', generic_react_page_view, name='sentry-api-applications'),
+    url(r'^settings/account/api/[^0]+/$', generic_react_page_view, name='sentry-api-details'),
     url(r'^settings/account/', generic_react_page_view),
+
     url(r'^settings/', react_page_view),
     url(
         r'^settings/(?P<organization_slug>[\w_-]+)/members/$',
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index a3429a80f9..87cdc6e69c 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -29,9 +29,7 @@ exports[`SettingsLayout renders 1`] = `
   </SettingsHeader>
   <ContentContainerWrapper>
     <Container>
-      <Content>
-        <NewSettingsWarning />
-      </Content>
+      <Content />
     </Container>
   </ContentContainerWrapper>
   <Footer />
diff --git a/tests/sentry/web/frontend/accounts/__init__.py b/tests/sentry/web/frontend/accounts/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/web/frontend/accounts/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
deleted file mode 100644
index f9e2239757..0000000000
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ /dev/null
@@ -1,490 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import mock
-import pytest
-import responses
-import six
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-from social_auth.models import UserSocialAuth
-
-from sentry.models import (
-    UserEmail, LostPasswordHash, User, UserOption, TotpInterface
-)
-from sentry.testutils import TestCase
-
-
-class AppearanceSettingsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-appearance')
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_does_use_template(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/appearance.html')
-
-    def test_does_save_settings(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, {
-            'language': 'en',
-            'stacktrace_order': '2',
-            'clock_24_hours': True
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        assert options.get('language') == 'en'
-        assert options.get('stacktrace_order') == '2'
-        assert options.get('clock_24_hours') is True
-
-
-class SettingsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings')
-
-    def params(self, without=()):
-        params = {
-            'email': 'admin@localhost',
-            'name': 'Foo bar',
-        }
-        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        self.login_as(self.user)
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert 'form' in resp.context
-
-    def test_requires_email(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, self.params(without=['email']))
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert 'form' in resp.context
-        assert 'email' in resp.context['form'].errors
-
-    def test_requires_name(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, self.params(without=['name']))
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert 'form' in resp.context
-        assert 'name' in resp.context['form'].errors
-
-    def test_minimum_valid_params(self):
-        self.login_as(self.user)
-
-        params = self.params()
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.name == params['name']
-
-    def test_can_change_password_with_password(self):
-        old_nonce = self.user.session_nonce
-        self.login_as(self.user)
-
-        params = self.params()
-        params['password'] = 'admin'
-        params['new_password'] = 'foobar'
-        params['verify_new_password'] = 'foobar'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.check_password('foobar')
-        assert user.session_nonce != old_nonce
-
-    def test_cannot_change_password_with_invalid_password(self):
-        self.login_as(self.user)
-
-        params = self.params()
-        params['new_password'] = 'foobar'
-        params['verify_new_password'] = 'foobar'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert resp.context['form'].errors
-        user = User.objects.get(id=self.user.id)
-        assert not user.check_password('foobar')
-
-    def test_cannot_change_password_with_managed_user(self):
-        user = self.create_user('foo@example.com', is_managed=True)
-
-        self.login_as(user)
-
-        params = self.params()
-        params['email'] = user.email
-        params['password'] = 'admin'
-        params['new_password'] = 'foobar'
-        params['verify_new_password'] = 'foobar'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert not user.check_password('foobar')
-
-    def test_can_change_email_with_password(self):
-        self.login_as(self.user)
-
-        params = self.params()
-        params['password'] = 'admin'
-        params['email'] = 'bizbaz@example.com'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.email == 'bizbaz@example.com'
-
-    def test_can_change_email_without_set_password(self):
-        self.login_as(self.user)
-
-        self.user.update(password='')
-
-        params = self.params()
-        params['email'] = 'bizbaz@example.com'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.email == 'bizbaz@example.com'
-
-    def test_cannot_change_email_with_invalid_password(self):
-        self.login_as(self.user)
-
-        params = self.params()
-        params['email'] = 'bizbaz@example.com'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert resp.context['form'].errors
-        user = User.objects.get(id=self.user.id)
-        assert user.email == 'admin@localhost'
-
-    def test_settings_renders_with_verify_new_password(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        path = reverse('sentry-account-settings')
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        form = resp.context['form']
-        assert form.errors == {}
-        for field in ('name', 'email', 'new_password', 'verify_new_password', 'password'):
-            assert field in form.fields
-
-        self.assertContains(resp, 'New password')
-        self.assertContains(resp, 'Verify new password')
-
-    def test_settings_renders_without_new_password(self):
-        user = self.create_user('foo@example.com')
-        user.update(is_managed=True)
-        self.login_as(user)
-        path = reverse('sentry-account-settings')
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        form = resp.context['form']
-        assert form.errors == {}
-        for field in ('new_password', 'verify_new_password'):
-            assert field not in form.fields
-
-    def test_cannot_change_password_without_verify_password(self):
-        self.login_as(self.user)
-
-        params = self.params()
-        params['new_password'] = 'foobar'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert resp.context['form'].errors
-        user = User.objects.get(id=self.user.id)
-        assert not user.check_password('foobar')
-
-    def test_cannot_change_password_with_unequal_verify_password(self):
-        self.login_as(self.user)
-
-        params = self.params()
-        params['new_password'] = 'foobar'
-        params['verify_new_password'] = 'foobars'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings.html')
-        assert resp.context['form'].errors
-        user = User.objects.get(id=self.user.id)
-        assert not user.check_password('foobar')
-        assert not user.check_password('foobars')
-
-    def test_password_hash_invalidated_when_email_changes(self):
-        self.login_as(self.user)
-
-        LostPasswordHash.objects.create(user=self.user)
-
-        params = self.params()
-        params['password'] = 'admin'
-        params['email'] = 'bizbaz@example.com'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.email == 'bizbaz@example.com'
-        assert not LostPasswordHash.objects.filter(user=self.user).exists()
-
-    def test_password_hash_invalidated_when_password_changes(self):
-        old_nonce = self.user.session_nonce
-        self.login_as(self.user)
-
-        LostPasswordHash.objects.create(user=self.user)
-
-        params = self.params()
-        params['password'] = 'admin'
-        params['new_password'] = 'foobar'
-        params['verify_new_password'] = 'foobar'
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.check_password('foobar')
-        assert user.session_nonce != old_nonce
-        assert not LostPasswordHash.objects.filter(user=self.user).exists()
-
-
-class ListIdentitiesTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-identities')
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        self.login_as(self.user)
-        UserSocialAuth.objects.create(user=self.user, provider='github')
-
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/identities.html')
-        assert 'identity_list' in resp.context
-        assert 'AUTH_PROVIDERS' in resp.context
-
-
-class RecoverPasswordTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-recover')
-
-    def test_renders_with_required_context(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
-        assert 'form' in resp.context
-
-    def test_invalid_username(self):
-        resp = self.client.post(self.path, {
-            'user': 'nonexistent'
-        })
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
-        assert 'form' in resp.context
-        assert 'user' in resp.context['form'].errors
-
-    def test_managed_account_is_invalid(self):
-        user = self.create_user('foo@example.com', is_managed=True)
-
-        resp = self.client.post(self.path, {
-            'user': user.email,
-        })
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/index.html')
-        assert 'form' in resp.context
-        assert 'user' in resp.context['form'].errors
-
-    @mock.patch('sentry.models.LostPasswordHash.send_email')
-    def test_valid_username(self, send_recover_mail):
-        resp = self.client.post(self.path, {
-            'user': self.user.username
-        })
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/sent.html')
-        assert 'email' in resp.context
-        send_recover_mail.call_count == 1
-
-    @mock.patch('sentry.models.LostPasswordHash.send_email')
-    def test_lost_password_hash_invalid_after_successful_login(self, send_recover_mail):
-        resp = self.client.post(self.path, {
-            'user': self.user.username
-        })
-        assert resp.status_code == 200
-        send_recover_mail.call_count == 1
-
-        assert LostPasswordHash.objects.get(user=self.user).is_valid()
-        self.login_as(self.user)
-        assert not LostPasswordHash.objects.filter(user=self.user).exists()
-
-
-class RecoverPasswordConfirmTest(TestCase):
-    def setUp(self):
-        super(RecoverPasswordConfirmTest, self).setUp()
-        self.password_hash = LostPasswordHash.objects.create(user=self.user)
-
-    @fixture
-    def path(self):
-        return reverse(
-            'sentry-account-recover-confirm',
-            args=[
-                self.user.id,
-                self.password_hash.hash])
-
-    def test_valid_token(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/confirm.html')
-
-    def test_invalid_token(self):
-        resp = self.client.get(reverse('sentry-account-recover-confirm', args=[1, 'adfadsf']))
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/account/recover/failure.html')
-
-    def test_change_password(self):
-        old_nonce = self.user.session_nonce
-        resp = self.client.post(self.path, {
-            'password': 'bar',
-            'confirm_password': 'bar'
-        })
-        assert resp.status_code == 302
-        user = User.objects.get(id=self.user.id)
-        assert user.check_password('bar')
-        assert user.session_nonce != old_nonce
-        assert not LostPasswordHash.objects.filter(user=user).exists()
-
-    def test_normal_signin(self):
-        resp = self.client.post(self.path, {
-            'password': 'bar',
-            'confirm_password': 'bar'
-        })
-        assert resp.status_code == 302
-        assert self.client.session.get('_auth_user_id') is not None
-
-    def test_2fa_no_signin(self):
-        TotpInterface().enroll(self.user)
-        resp = self.client.post(self.path, {
-            'password': 'bar',
-            'confirm_password': 'bar'
-        })
-        assert resp.status_code == 302
-        assert self.client.session.get('_auth_user_id') is None
-
-
-class ConfirmEmailSendTest(TestCase):
-    @mock.patch('sentry.models.User.send_confirm_emails')
-    def test_valid(self, send_confirm_email):
-        self.login_as(self.user)
-        UserEmail.objects.filter(user=self.user).update(is_verified=False)
-        resp = self.client.post(reverse('sentry-account-confirm-email-send'))
-        self.assertRedirects(resp, reverse('sentry-account-settings-emails'), status_code=302)
-        send_confirm_email.assert_called_once_with()
-
-    def test_get_request_not_valid(self):
-        self.login_as(self.user)
-        resp = self.client.get(reverse('sentry-account-confirm-email-send'))
-        assert resp.status_code == 405
-
-    @mock.patch('sentry.models.User.send_confirm_email_singular')
-    def test_send_single_email(self, send_confirm_email):
-        user = self.create_user('foo@example.com')
-        email = UserEmail.objects.create(user=user, email='bar@example.com')
-        email.save()
-        self.login_as(user)
-        self.client.post(reverse('sentry-account-confirm-email-send'),
-                         data={'primary-email': '', 'email': 'foo@example.com'},
-                         follow=True)
-        send_confirm_email.assert_called_once_with(UserEmail.get_primary_email(user))
-
-
-class ConfirmEmailTest(TestCase):
-
-    def test_invalid(self):
-        self.user.save()
-        UserEmail.objects.get(email=self.user.email).update(is_verified=False)
-        resp = self.client.get(reverse('sentry-account-confirm-email',
-                                       args=[self.user.id, '5b1f2f266efa03b721cc9ea0d4742c5e']))
-        assert resp.status_code == 302
-        email = UserEmail.objects.get(email=self.user.email)
-        assert not email.is_verified
-
-    def test_valid(self):
-        self.user.save()
-        UserEmail.objects.get(email=self.user.email).update(is_verified=False)
-        self.login_as(self.user)
-        self.client.post(reverse('sentry-account-confirm-email-send'))
-        email = self.user.emails.first()
-        resp = self.client.get(reverse('sentry-account-confirm-email',
-                                       args=[self.user.id, email.validation_hash]))
-        self.assertRedirects(resp, reverse('sentry-account-settings-emails'), status_code=302)
-        email = self.user.emails.first()
-        assert email.is_verified
-        assert not email.hash_is_valid()
-
-
-class DisconnectIdentityTest(TestCase):
-    @responses.activate
-    def test_simple(self):
-        self.login_as(self.user)
-
-        auth = UserSocialAuth.objects.create(
-            user=self.user,
-            provider='github',
-            extra_data={'access_token': 'abcdef'},
-        )
-
-        with self.settings(GITHUB_APP_ID='app_id', GITHUB_API_SECRET='secret'):
-            resp = self.client.post(reverse('sentry-account-disconnect-identity', args=[
-                auth.id,
-            ]))
-
-        assert resp['Location'] == 'http://testserver{}'.format(
-            reverse('sentry-account-settings-identities'),
-        )
-
-        assert not UserSocialAuth.objects.filter(id=auth.id).exists()
-
-    @responses.activate
-    def test_invalid_backend(self):
-        self.login_as(self.user)
-
-        auth = UserSocialAuth.objects.create(
-            user=self.user,
-            provider='invalid',
-            extra_data={'access_token': 'abcdef'},
-        )
-
-        with pytest.raises(Exception):
-            # this should just error hard
-            self.client.post(reverse('sentry-account-disconnect-identity', args=[
-                auth.id,
-            ]))
diff --git a/tests/sentry/web/frontend/test_2fa.py b/tests/sentry/web/frontend/test_2fa.py
deleted file mode 100644
index 9247ef5562..0000000000
--- a/tests/sentry/web/frontend/test_2fa.py
+++ /dev/null
@@ -1,167 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.testutils import TestCase
-from sentry.models import TotpInterface, LostPasswordHash
-
-
-class TwoFactorAuthTest(TestCase):
-    def test_security_renders_without_2fa(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        path = reverse('sentry-account-security')
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/security.html')
-        assert 'has_2fa' in resp.context
-        assert resp.context['has_2fa'] is False
-        self.assertContains(resp, 'Enable')
-
-    def test_security_renders_with_2fa(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        TotpInterface().enroll(user)
-        path = reverse('sentry-account-security')
-        resp = self.client.get(path)
-        self.assertTemplateUsed('sentry/account/security.html')
-        assert 'has_2fa' in resp.context
-        assert resp.context['has_2fa'] is True
-        self.assertContains(resp, 'Manage')
-
-    def test_2fa_settings_render_without_2fa(self):
-        user = self.create_user('foo@example.com')
-        path = reverse('sentry-account-settings-2fa')
-        self.login_as(user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor.html')
-        assert 'has_2fa' in resp.context
-        assert resp.context['has_2fa'] is False
-        self.assertContains(resp, 'Add</button>')
-        self.assertContains(resp, 'this can only be managed if 2FA is enabled')
-        self.assertNotContains(resp, '<span class="icon-trash">')
-
-    def test_2fa_settings_render_with_2fa(self):
-        user = self.create_user('foo@example.com')
-        path = reverse('sentry-account-settings-2fa')
-        self.login_as(user)
-        TotpInterface().enroll(user)
-        resp = self.client.get(path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor.html')
-        assert 'has_2fa' in resp.context
-        assert resp.context['has_2fa'] is True
-        self.assertNotContains(resp, 'this can only be managed if 2FA is enabled')
-        self.assertContains(resp, '<span class="icon-trash">')
-
-    def test_add_2fa_SSO(self):
-        user = self.create_user('foo@example.com')
-        user.set_unusable_password()
-        user.save()
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        resp = self.client.post(path, data={'enroll': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/enroll_totp.html')
-        assert 'otp_form' in resp.context
-        self.assertContains(resp, 'Authenticator code')
-        self.assertContains(resp, 'Authenticator App')
-        self.assertNotContains(resp, 'Sentry account password')
-
-    def test_add_2fa_password(self):
-        user = self.create_user('foo@example.com')
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        resp = self.client.post(path, data={'enroll': ''})
-        self.assertContains(resp, 'Scan the below QR code')
-        self.assertContains(resp, 'Sentry account password')
-        self.assertNotContains(resp, 'Method is currently not enabled')
-
-    def test_totp_get_path_render(self):
-        user = self.create_user('foo@example.com')
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        resp = self.client.get(path)
-        self.assertNotContains(resp, 'Scan the below QR code')
-        self.assertNotContains(resp, 'Sentry account password')
-        self.assertContains(resp, 'Method is currently not enabled')
-
-    def test_remove_2fa_SSO(self):
-        user = self.create_user('foo@example.com')
-        user.set_unusable_password()
-        user.save()
-        TotpInterface().enroll(user)
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        resp = self.client.post(path, data={'remove': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
-        self.assertContains(resp, 'Do you want to remove the method?')
-        self.assertNotContains(resp, 'Sentry account password')
-
-    def test_remove_2fa_password(self):
-        user = self.create_user('foo@example.com')
-        TotpInterface().enroll(user)
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        resp = self.client.post(path, data={'remove': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
-        self.assertContains(resp, 'Do you want to remove the method?')
-        self.assertContains(resp, 'Sentry account password')
-
-    def test_add_2fa_password_deletes_lost_password(self):
-        user = self.create_user('foo@example.com')
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        LostPasswordHash.objects.create(user=user)
-        resp = self.client.post(path, data={'enroll': ''})
-        self.assertContains(resp, 'Scan the below QR code')
-        self.assertContains(resp, 'Sentry account password')
-        self.assertNotContains(resp, 'Method is currently not enabled')
-        assert not LostPasswordHash.objects.filter(user=user).exists()
-
-    def test_add_2fa_SSO_deletes_lost_passswords(self):
-        user = self.create_user('foo@example.com')
-        user.set_unusable_password()
-        user.save()
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        LostPasswordHash.objects.create(user=user)
-        resp = self.client.post(path, data={'enroll': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/enroll_totp.html')
-        assert 'otp_form' in resp.context
-        self.assertContains(resp, 'Authenticator code')
-        self.assertContains(resp, 'Authenticator App')
-        self.assertNotContains(resp, 'Sentry account password')
-        assert not LostPasswordHash.objects.filter(user=user).exists()
-
-    def test_remove_2fa_SSO_deletes_lost_passswords(self):
-        user = self.create_user('foo@example.com')
-        user.set_unusable_password()
-        user.save()
-        TotpInterface().enroll(user)
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        LostPasswordHash.objects.create(user=user)
-        resp = self.client.post(path, data={'remove': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
-        self.assertContains(resp, 'Do you want to remove the method?')
-        self.assertNotContains(resp, 'Sentry account password')
-        assert not LostPasswordHash.objects.filter(user=user).exists()
-
-    def test_remove_2fa_password_deletes_lost_passswords(self):
-        user = self.create_user('foo@example.com')
-        TotpInterface().enroll(user)
-        path = reverse('sentry-account-settings-2fa-totp')
-        self.login_as(user)
-        LostPasswordHash.objects.create(user=user)
-        resp = self.client.post(path, data={'remove': ''})
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/twofactor/remove.html')
-        self.assertContains(resp, 'Do you want to remove the method?')
-        self.assertContains(resp, 'Sentry account password')
-        assert not LostPasswordHash.objects.filter(user=user).exists()
diff --git a/tests/sentry/web/frontend/test_account_notifications.py b/tests/sentry/web/frontend/test_account_notifications.py
deleted file mode 100644
index 6ca262e35f..0000000000
--- a/tests/sentry/web/frontend/test_account_notifications.py
+++ /dev/null
@@ -1,121 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-import functools
-
-import mock
-import six
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.models import ProjectStatus, UserOption
-from sentry.testutils import TestCase
-
-
-class NotificationSettingsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-notifications')
-
-    def params(self, without=()):
-        params = {
-            'alert_email': 'foo@example.com',
-        }
-        return dict((k, v) for k, v in six.iteritems(params) if k not in without)
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path)
-
-    def test_renders_with_required_context(self):
-        user = self.create_user('foo@example.com')
-        organization = self.create_organization()
-        team = self.create_team(organization=organization)
-        project = self.create_project(organization=organization, teams=[team])
-        team2 = self.create_team(organization=organization)
-        self.create_project(
-            organization=organization, teams=[team], status=ProjectStatus.PENDING_DELETION
-        )
-        self.create_project(organization=organization, teams=[team2])
-        self.create_member(organization=organization, user=user, teams=[project.teams.first()])
-        self.login_as(user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/notifications.html')
-        assert 'form' in resp.context
-        assert 'settings_form' in resp.context
-        assert 'reports_form' in resp.context
-        assert len(resp.context['project_forms']) == 1
-
-    def test_valid_params(self):
-        self.login_as(self.user)
-
-        params = self.params()
-
-        resp = self.client.post(self.path, params)
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        assert options.get('alert_email') == 'foo@example.com'
-
-    def test_can_change_workflow(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, {
-            'workflow_notifications': '1',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        assert options.get('workflow:notifications') == '1'
-
-        resp = self.client.post(self.path, {
-            'workflow_notifications': '',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        assert options.get('workflow:notifications', mock.sentinel.UNSET) == mock.sentinel.UNSET
-
-        with self.assertDoesNotChange(
-                functools.partial(
-                    UserOption.objects.get_value,
-                    user=self.user,
-                    project=None,
-                    key='workflow:notifications'
-                )):
-            resp = self.client.post(self.path, {
-                'workflow_notifications': 'invalid',
-            })
-
-    def test_can_change_subscribe_by_default(self):
-        self.login_as(self.user)
-
-        resp = self.client.post(self.path, {
-            'subscribe_by_default': '1',
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        assert options.get('subscribe_by_default') == '1'
-
-    def test_can_disable_reports(self):
-        self.login_as(self.user)
-
-        org1 = self.create_organization(name='foo', owner=self.user)
-        org2 = self.create_organization(name='bar', owner=self.user)
-
-        resp = self.client.post(self.path, {
-            'reports-organizations': org1.id,
-        })
-        assert resp.status_code == 302
-
-        options = UserOption.objects.get_all_values(user=self.user)
-
-        disabled_orgs = set(options.get('reports:disabled-organizations', []))
-        assert org1.id not in disabled_orgs
-        assert org2.id in disabled_orgs
diff --git a/tests/sentry/web/frontend/test_emails.py b/tests/sentry/web/frontend/test_emails.py
deleted file mode 100644
index 6b8de90e49..0000000000
--- a/tests/sentry/web/frontend/test_emails.py
+++ /dev/null
@@ -1,118 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-from exam import fixture
-
-from sentry.testutils import TestCase
-from sentry.models import User, UserEmail
-
-
-class EmailsTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-account-settings-emails')
-
-    def test_render_emails(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        resp = self.client.get(self.path)
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/account/settings/emails.html')
-        assert 'primary_email' in resp.context
-        self.assertIn('foo@example.com', resp.content)
-
-    def test_show_alt_emails(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        email = UserEmail(user=user, email='bar@example.com')
-        email.save()
-        resp = self.client.get(self.path)
-        self.assertIn('bar@example.com', resp.content)
-        assert 'bar@example.com' in ([thing.email for thing in user.emails.all()])
-
-    def test_create_alt_email_with_password(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        user.set_password('something')
-        user.save()
-        resp = self.client.post(
-            self.path, data={'alt_email': 'hello@gmail.com',
-                             'password': 'something'}, follow=True
-        )
-        assert resp.status_code == 200
-        self.assertIn('hello@gmail.com', resp.content)
-        emails = UserEmail.objects.filter(user=user)
-        assert 'hello@gmail.com' in ([email.email for email in emails])
-
-    def test_fail_to_create_email_without_pw(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        user.set_password('something')
-        user.save()
-        resp = self.client.post(
-            self.path, data={
-                'alt_email': 'hello@gmail.com',
-            }, follow=True
-        )
-        assert resp.status_code == 200
-        self.assertIn('This field is required', resp.content)
-        emails = UserEmail.objects.filter(user=user)
-        assert 'hello@gmail.com' not in ([email.email for email in emails])
-
-    def test_create_alt_email_without_usable_pw(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        user.set_unusable_password()
-        user.save()
-        resp = self.client.post(
-            self.path, data={
-                'alt_email': 'hello@gmail.com',
-            }, follow=True
-        )
-        assert resp.status_code == 200
-        self.assertIn('hello@gmail.com', resp.content)
-        emails = UserEmail.objects.filter(user=user)
-        assert 'hello@gmail.com' in ([email.email for email in emails])
-
-    def test_remove_alt_email(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        email = UserEmail(user=user, email='bar@example.com')
-        email.save()
-        resp = self.client.get(self.path)
-        self.assertIn('bar@example.com', resp.content)
-        resp = self.client.post(
-            self.path, data={'remove': '',
-                             'email': 'bar@example.com'}, follow=True
-        )
-        self.assertNotIn('bar@example.com', resp.content)
-        assert 'bar@example.com' not in (email.email for email in user.emails.all())
-
-    def test_change_verified_primary_email(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        resp = self.client.get(self.path)
-        self.assertIn('foo@example.com', resp.content)
-        UserEmail.objects.create(email='bar@example.com', is_verified=True, user=user)
-        resp = self.client.post(
-            self.path, {'primary': '',
-                        'new_primary_email': 'bar@example.com'}, follow=True
-        )
-        self.assertIn('bar@example.com', resp.content)
-        user = User.objects.get(id=user.id)
-        assert user.email == 'bar@example.com'
-        assert user.username == 'bar@example.com'
-
-    def test_change_unverified_primary_email(self):
-        user = self.create_user('foo@example.com')
-        self.login_as(user)
-        resp = self.client.get(self.path)
-        self.assertIn('foo@example.com', resp.content)
-        UserEmail.objects.create(email='bar@example.com', is_verified=False, user=user)
-        resp = self.client.post(
-            self.path, {'primary': '',
-                        'new_primary_email': 'bar@example.com'}, follow=True
-        )
-        user = User.objects.get(id=user.id)
-        assert user.email == 'foo@example.com'
-        assert user.username == 'foo@example.com'
diff --git a/tests/sentry/web/frontend/test_remove_account.py b/tests/sentry/web/frontend/test_remove_account.py
deleted file mode 100644
index 014d82396b..0000000000
--- a/tests/sentry/web/frontend/test_remove_account.py
+++ /dev/null
@@ -1,103 +0,0 @@
-from __future__ import absolute_import
-
-from django.core.urlresolvers import reverse
-
-from sentry.models import (Organization, OrganizationMember, OrganizationStatus, User)
-from sentry.testutils import TestCase
-
-
-class RemoveAccountTest(TestCase):
-    def setUp(self):
-        super(RemoveAccountTest, self).setUp()
-
-        other_user = self.create_user('bar@example.com')
-
-        # single owner org
-        self.organization = self.create_organization(name='a', owner=self.user)
-        self.create_member(
-            user=other_user,
-            organization=self.organization,
-            role='admin',
-        )
-
-        # dual owner
-        self.organization2 = self.create_organization(name='b', owner=self.user)
-        self.create_member(
-            user=other_user,
-            organization=self.organization2,
-            role='owner',
-        )
-
-        # non-owned
-        self.organization3 = self.create_organization(name='c', owner=other_user)
-
-        self.path = reverse('sentry-remove-account')
-        self.login_as(self.user)
-
-    def test_renders_with_context(self):
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-
-        self.assertTemplateUsed(resp, 'sentry/remove-account.html')
-
-        assert resp.context['organization_results'] == [
-            {
-                'organization': self.organization,
-                'single_owner': True,
-            }, {
-                'organization': self.organization2,
-                'single_owner': False,
-            }
-        ]
-
-    def test_implicit_delete(self):
-        resp = self.client.post(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/post-remove-account.html')
-
-        assert not User.objects.get(
-            id=self.user.id,
-        ).is_active
-
-        # should implicitly remove the first organization, but not the 2nd
-        assert Organization.objects.get(
-            id=self.organization.id,
-        ).status == OrganizationStatus.PENDING_DELETION
-
-        assert Organization.objects.get(
-            id=self.organization2.id,
-        ).status == OrganizationStatus.VISIBLE
-        assert not OrganizationMember.objects.filter(
-            user=self.user,
-            organization=self.organization2,
-        ).exists()
-
-        assert Organization.objects.get(
-            id=self.organization3.id,
-        ).status == OrganizationStatus.VISIBLE
-
-    def test_explicit_delete(self):
-        resp = self.client.post(
-            self.path,
-            data={
-                'oID': [self.organization.slug, self.organization2.slug, self.organization3.slug],
-            }
-        )
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/post-remove-account.html')
-
-        # should implicitly remove the first organization, but not the 2nd
-        assert Organization.objects.get(
-            id=self.organization.id,
-        ).status == OrganizationStatus.PENDING_DELETION
-
-        assert Organization.objects.get(
-            id=self.organization2.id,
-        ).status == OrganizationStatus.PENDING_DELETION
-
-        assert Organization.objects.get(
-            id=self.organization3.id,
-        ).status == OrganizationStatus.VISIBLE
