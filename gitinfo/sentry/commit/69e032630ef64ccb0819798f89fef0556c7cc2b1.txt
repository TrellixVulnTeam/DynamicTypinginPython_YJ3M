commit 69e032630ef64ccb0819798f89fef0556c7cc2b1
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jun 6 10:53:55 2019 -0700

    feat(event-search): Add projects in heatmaps. (#13490)
    
    * First draft of project in heatmaps.
    
    * made suggested changes.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index a7c7aa6d9a..a855eb8117 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -6,6 +6,7 @@ from functools import partial
 from rest_framework.response import Response
 
 from sentry import tagstore
+from sentry.tagstore.types import TagKey, TagValue
 from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError, NoProjects
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.helpers.events import get_direct_hit_response
@@ -170,6 +171,8 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
 
 
 class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
+    NON_TAG_KEYS = frozenset(['project.name'])
+
     def get(self, request, organization):
         try:
             snuba_args = self.get_snuba_query_args(request, organization)
@@ -178,7 +181,12 @@ class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
         except NoProjects:
             return Response({'detail': 'A valid project must be included.'}, status=400)
 
-        lookup_keys = [tagstore.prefix_reserved_key(key) for key in request.GET.getlist('keys')]
+        lookup_keys = []
+        non_tag_lookup_keys = []
+        for key in request.GET.getlist('keys'):
+            if key in self.NON_TAG_KEYS:
+                non_tag_lookup_keys.append(key)
+            lookup_keys.append(tagstore.prefix_reserved_key(key))
 
         if not lookup_keys:
             return Response({'detail': 'Tag keys must be specified.'}, status=400)
@@ -196,12 +204,64 @@ class OrganizationEventsHeatmapEndpoint(OrganizationEventsEndpointBase):
             }, status=400)
 
         try:
-            tag_key = tagstore.get_group_tag_keys_and_top_values(
+            tag_keys = tagstore.get_group_tag_keys_and_top_values(
                 project_ids, None, environment_ids, keys=lookup_keys, get_excluded_tags=True, **snuba_args)
         except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
-        return Response(serialize(tag_key, request.user))
+        if non_tag_lookup_keys:
+            tag_keys.update(self.handle_non_tag_keys(non_tag_lookup_keys, snuba_args))
+
+        return Response(serialize(tag_keys, request.user))
+
+    def handle_non_tag_keys(self, keys, snuba_args):
+        result = set([])
+        for key in keys:
+            if key == 'project.name':
+                data = self._query_non_tag_data('project_id', snuba_args)
+                projects = Project.objects.filter(id__in=snuba_args['filter_keys']['project_id'])
+                for project_data in data:
+                    project = projects.filter(id=project_data['project_id'])[0]
+                    project_data['key'] = 'project.name'
+                    project_data['value'] = project.slug
+            result.add(self._create_tag_key_tag_value_objects('project', data))
+        return result
+
+    def _query_non_tag_data(self, key, snuba_args):
+        data = raw_query(
+            groupby=[key],
+            aggregations=snuba_args.get('aggregations', []) + [
+                ['count()', '', 'count'],
+                ['min', 'timestamp', 'first_seen'],
+                ['max', 'timestamp', 'last_seen'],
+                ['uniq', key, 'values_seen'],
+            ],
+            orderby='-count',
+            referrer='api.organization-events-heatmap',
+            **snuba_args
+        )['data']
+        return data
+
+    def _create_tag_key_tag_value_objects(self, key, data):
+        tag_values = []
+        values_seen = 0
+        for datum in data:
+            tag_values.append(TagValue(
+                key=key,
+                value=datum['value'],
+                times_seen=datum['count'],
+                last_seen=datum['last_seen'],
+                first_seen=datum['first_seen'],
+            ))
+            values_seen += datum['count']
+
+        tag_key = TagKey(
+            key=key,
+            values_seen=len(tag_values),
+            count=values_seen,
+            top_values=tag_values,
+        )
+        return tag_key
 
 
 class OrganizationEventsMetaEndpoint(OrganizationEventsEndpointBase):
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 694d09ffd7..e4c7cca07c 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -1154,6 +1154,111 @@ class OrganizationEventsHeatmapEndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 400, response.content
         assert response.data == {'detail': 'You cannot view events from multiple projects.'}
 
+    def test_project_key(self):
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'number': 'one'},
+            },
+            project_id=self.project2.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'green'},
+            },
+            project_id=self.project.id
+        )
+        self.store_event(
+            data={
+                'event_id': uuid4().hex,
+                'timestamp': self.min_ago.isoformat(),
+                'tags': {'color': 'red'},
+            },
+            project_id=self.project.id
+        )
+
+        with self.feature('organizations:global-views'):
+            response = self.client.get(
+                self.url, {
+                    'keys': [
+                        'color', 'number', 'project.name']}, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        response.data[0] == {
+            'topValues': [
+                {
+                    'count': 3,
+                    'name': self.project.slug,
+                    'value': self.project.slug,
+                    'lastSeen': self.min_ago,
+                    'key': 'project',
+                    'firstSeen': self.min_ago
+                },
+                {
+                    'count': 1,
+                    'name': self.project2.slug,
+                    'value': self.project2.slug,
+                    'lastSeen': self.min_ago,
+                    'key': 'project',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 4,
+            'uniqueValues': 2,
+            'name': 'Project',
+            'key': 'project'
+        }
+        response.data[1] == {
+            'topValues': [
+                {
+                    'count': 1,
+                    'name': 'one',
+                    'value': 'one',
+                    'lastSeen': self.min_ago,
+                    'key': 'number',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 1,
+            'name': 'Number',
+            'key': 'number'
+        }
+        response.data[2] == {
+            'topValues': [
+                {
+                    'count': 2,
+                    'name': 'green',
+                    'value': 'green',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                },
+                {
+                    'count': 1,
+                    'name': 'red',
+                    'value': 'red',
+                    'lastSeen': self.min_ago,
+                    'key': 'color',
+                    'firstSeen': self.min_ago
+                }
+            ],
+            'totalValues': 3,
+            'name': 'Color',
+            'key': 'color'
+        }
+
 
 class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
     def test_simple(self):
