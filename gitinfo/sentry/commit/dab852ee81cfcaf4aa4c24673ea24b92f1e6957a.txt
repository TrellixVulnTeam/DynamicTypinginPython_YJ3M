commit dab852ee81cfcaf4aa4c24673ea24b92f1e6957a
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 15 20:46:59 2013 -0800

    Refactor email helpers to manage custom send_to preferences (fixes GH-1050)

diff --git a/src/sentry/models/activity.py b/src/sentry/models/activity.py
index 2bcda23cdb..fca01faf6e 100644
--- a/src/sentry/models/activity.py
+++ b/src/sentry/models/activity.py
@@ -84,38 +84,36 @@ class Activity(Model):
 
         # TODO(dcramer): some of this logic is duplicated in NotificationPlugin
         # fetch access group members
-        user_list = set(
+        user_id_list = set(
             User.objects.filter(
                 accessgroup__projects=self.project,
                 is_active=True
             ).exclude(
                 id=self.user_id,
-            )
+            ).values('id')
         )
 
         if self.project.team:
             # fetch team members
-            user_list |= set(
+            user_id_list |= set(
                 m.user for m in self.project.team.member_set.filter(
                     user__is_active=True,
                 ).exclude(
                     user__id=self.user_id,
                 )
-            )
+            ).values('user')
 
-        if not user_list:
+        if not user_id_list:
             return
 
         disabled = set(UserOption.objects.filter(
-            user__in=user_list,
+            user__in=user_id_list,
             key='subscribe_comments',
             value='0',
         ).values_list('user', flat=True))
 
         send_to = [
-            u.email
-            for u in user_list
-            if u.email and u.id not in disabled
+            u_id for u_id in user_id_list if u_id not in disabled
         ]
 
         if not send_to:
@@ -145,9 +143,10 @@ class Activity(Model):
             html_template='sentry/emails/new_note.html',
             headers=headers,
         )
+        msg.add_users(send_to, project=self.project)
 
         try:
-            msg.send(to=send_to)
+            msg.send()
         except Exception, e:
             logger = logging.getLogger('sentry.mail.errors')
             logger.exception(e)
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index fb477435ce..4abae7843c 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -47,6 +47,11 @@ class User(Model, AbstractBaseUser):
         verbose_name = _('user')
         verbose_name_plural = _('users')
 
+    def save(self, *args, **kwargs):
+        if not self.username:
+            self.username = self.email
+        return super(User, self).save(*args, **kwargs)
+
     def has_perm(self, perm_name):
         warnings.warn('User.has_perm is deprecated', DeprecationWarning)
         return self.is_superuser
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index dc8ff9b570..af1ceceb80 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -11,7 +11,6 @@ from django.conf import settings
 from django.core.urlresolvers import reverse
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
-from sentry.models import User, UserOption
 from sentry.plugins import register
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.cache import cache
@@ -48,7 +47,8 @@ class MailPlugin(NotificationPlugin):
             headers=headers,
             context=context,
         )
-        msg.send(send_to, fail_silently=fail_silently)
+        msg.add_users(send_to, project=project)
+        return msg.send(fail_silently=fail_silently)
 
     def send_test_mail(self, project=None):
         self._send_mail(
@@ -95,37 +95,6 @@ class MailPlugin(NotificationPlugin):
             context=context,
         )
 
-    def get_emails_for_users(self, user_ids, project=None):
-        email_list = set()
-        user_ids = set(user_ids)
-
-        # XXX: It's possible that options have been set to an empty value
-        if project:
-            alert_queryset = UserOption.objects.filter(
-                project=project,
-                user__in=user_ids,
-                key='mail:email',
-            )
-            for option in (o for o in alert_queryset if o.value):
-                user_ids.remove(option.user_id)
-                email_list.add(option.value)
-
-        if user_ids:
-            alert_queryset = UserOption.objects.filter(
-                user__in=user_ids,
-                key='alert_email',
-            )
-            for option in (o for o in alert_queryset if o.value):
-                user_ids.remove(option.user_id)
-                email_list.add(option.value)
-
-        if user_ids:
-            email_list |= set(User.objects.filter(
-                pk__in=user_ids, is_active=True
-            ).values_list('email', flat=True))
-
-        return email_list
-
     def get_send_to(self, project=None):
         """
         Returns a list of email addresses for the users that should be notified of alerts.
@@ -139,20 +108,20 @@ class MailPlugin(NotificationPlugin):
             project_id = project.pk
         else:
             project_id = ''
+
+        if not (project and project.team):
+            return []
+
         conf_key = self.get_conf_key()
         cache_key = '%s:send_to:%s' % (conf_key, project_id)
 
         send_to_list = cache.get(cache_key)
         if send_to_list is None:
-            send_to_list = set()
-
-            if project and project.team:
-                member_set = self.get_sendable_users(project)
-                send_to_list |= set(self.get_emails_for_users(
-                    member_set, project=project))
+            send_to_list = self.get_sendable_users(project)
 
             send_to_list = filter(bool, send_to_list)
             cache.set(cache_key, send_to_list, 60)  # 1 minute cache
+
         return send_to_list
 
     def notify_users(self, group, event, fail_silently=False):
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 2f06d8d3d5..8b28aa6839 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -51,16 +51,54 @@ class MessageBuilder(object):
         self.html_body = html_body
         self.headers = headers
 
-    def build(self, to):
+        self._send_to = set()
+
+    def add_users(self, user_ids, project=None):
+        from sentry.models import User, UserOption
+
+        email_list = set()
+        user_ids = set(user_ids)
+
+        # XXX: It's possible that options have been set to an empty value
+        if project:
+            queryset = UserOption.objects.filter(
+                project=project,
+                user__in=user_ids,
+                key='mail:email',
+            )
+            for option in (o for o in queryset if o.value):
+                user_ids.remove(option.user_id)
+                email_list.add(option.value)
+
+        if user_ids:
+            queryset = UserOption.objects.filter(
+                user__in=user_ids,
+                key='alert_email',
+            )
+            for option in (o for o in queryset if o.value):
+                user_ids.remove(option.user_id)
+                email_list.add(option.value)
+
+        if user_ids:
+            email_list |= set(User.objects.filter(
+                pk__in=user_ids, is_active=True
+            ).values_list('email', flat=True))
+
+        self._send_to.update(email_list)
+
+    def build(self, to=None):
         if self.headers is None:
             headers = {}
         else:
             headers = self.headers.copy()
 
+        send_to = set(to or ())
+        send_to.update(self._send_to)
+
         if ENABLE_EMAIL_REPLIES and 'X-Sentry-Reply-To' in headers:
             reply_to = headers['X-Sentry-Reply-To']
         else:
-            reply_to = ', '.join(to)
+            reply_to = ', '.join(send_to)
 
         headers.setdefault('Reply-To', reply_to)
 
@@ -78,7 +116,7 @@ class MessageBuilder(object):
             self.subject,
             txt_body,
             settings.SERVER_EMAIL,
-            to,
+            send_to,
             headers=headers
         )
         if html_body:
@@ -88,8 +126,8 @@ class MessageBuilder(object):
 
         return msg
 
-    def send(self, to, fail_silently=False):
-        msg = self.build(to)
+    def send(self, to=None, fail_silently=False):
+        msg = self.build(to=to)
         msg.send(fail_silently=fail_silently)
 
 
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index f6b424d653..e26b519335 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -149,27 +149,6 @@ class MailPluginTest(TestCase):
         args, kwargs = _send_mail.call_args
         assert kwargs.get('subject') == u"[{0}] ERROR: hello world".format(self.project.name)
 
-    def test_get_emails_for_users(self):
-        from sentry.models import UserOption, User
-
-        project = self.project
-
-        user = User.objects.create(username='foo', email='foo@example.com')
-        user2 = User.objects.create(username='baz', email='baz@example.com')
-        user3 = User.objects.create(username='bar', email='bar@example.com')
-
-        result = sorted(self.plugin.get_emails_for_users([user.pk, user2.pk, user3.pk]))
-        assert result == sorted([user.email, user2.email, user3.email])
-
-        UserOption.objects.create(
-            key='alert_email', value='foobaz@example.com', user=user2)
-        UserOption.objects.create(
-            key='mail:email', value='foobar@example.com', user=user3, project=project)
-
-        result = sorted(self.plugin.get_emails_for_users(
-            [user.pk, user2.pk, user3.pk], project=project))
-        assert result == sorted([user.email, 'foobar@example.com', 'foobaz@example.com'])
-
     def test_get_sendable_users(self):
         from sentry.models import Project, UserOption, User
 
diff --git a/tests/sentry/utils/email/tests.py b/tests/sentry/utils/email/tests.py
index 34571db7cf..69b036013e 100644
--- a/tests/sentry/utils/email/tests.py
+++ b/tests/sentry/utils/email/tests.py
@@ -1,5 +1,6 @@
 from django.core import mail
 
+from sentry.models import User, UserOption
 from sentry.testutils import TestCase
 from sentry.utils.email import MessageBuilder
 
@@ -49,3 +50,40 @@ class MessageBuilderTest(TestCase):
             '<b>hello world</b>',
             'text/html',
         )
+
+    def test_with_users(self):
+        project = self.project
+
+        user_a = User.objects.create(email='foo@example.com')
+        user_b = User.objects.create(email='bar@example.com')
+        user_c = User.objects.create(email='baz@example.com')
+
+        UserOption.objects.create(
+            user=user_b,
+            key='alert_email',
+            value='fizzle@example.com',
+        )
+        UserOption.objects.create(
+            user=user_c,
+            project=project,
+            key='mail:email',
+            value='bazzer@example.com',
+        )
+
+        msg = MessageBuilder(
+            subject='Test',
+            body='hello world',
+            html_body='<b>hello world</b>',
+        )
+        msg.add_users([user_a.id, user_b.id, user_c.id], project=project)
+        msg.send()
+
+        assert len(mail.outbox) == 1
+
+        out = mail.outbox[0]
+
+        assert sorted(out.to) == [
+            'bazzer@example.com',
+            'fizzle@example.com',
+            'foo@example.com',
+        ]
