commit 239cc27555e975c1fc2baad0e57c15d7b8f0de9f
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 7 11:18:54 2018 -0800

    feat: Add tracing concepts for failed requests

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 2a9106fc1b..c4b8393536 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -233,6 +233,7 @@ MIDDLEWARE_CLASSES = (
     # TODO(dcramer): kill this once we verify its safe
     # 'sentry.middleware.social_auth.SentrySocialAuthExceptionMiddleware',
     'django.contrib.messages.middleware.MessageMiddleware',
+    'sentry.middleware.tracing.SentryTracingMiddleware',
     'sentry.debug.middleware.DebugMiddleware',
 )
 
diff --git a/src/sentry/middleware/tracing.py b/src/sentry/middleware/tracing.py
new file mode 100644
index 0000000000..47a6f62425
--- /dev/null
+++ b/src/sentry/middleware/tracing.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+import six
+
+from uuid import uuid1
+
+import sentry_sdk
+
+
+class SentryTracingMiddleware(object):
+    def process_request(self, request):
+        span_id = six.text_type(uuid1())
+        transaction_id = request.META.get('HTTP_X_TRANSACTION_ID') or six.text_type(uuid1())
+        with sentry_sdk.configure_scope() as scope:
+            scope.set_tag('span_id', span_id)
+            scope.set_tag('transaction_id', transaction_id)
diff --git a/src/sentry/static/sentry/app/actionCreators/group.jsx b/src/sentry/static/sentry/app/actionCreators/group.jsx
index 81574a63f1..d0dc317c30 100644
--- a/src/sentry/static/sentry/app/actionCreators/group.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/group.jsx
@@ -2,13 +2,14 @@ import sdk from 'app/utils/sdk';
 import {Client} from 'app/api';
 import GroupActions from 'app/actions/groupActions';
 import {buildUserId, buildTeamId} from 'app/utils';
+import {uniqueId} from 'app/utils/guid';
 
 export function assignToUser(params) {
   const api = new Client();
 
   let endpoint = `/issues/${params.id}/`;
 
-  let id = api.uniqueId();
+  let id = uniqueId();
 
   GroupActions.assignTo(id, params.id, {
     email: (params.member && params.member.email) || '',
@@ -40,7 +41,7 @@ export function clearAssignment(groupId) {
 
   let endpoint = `/issues/${groupId}/`;
 
-  let id = api.uniqueId();
+  let id = uniqueId();
 
   GroupActions.assignTo(id, groupId, {
     email: '',
@@ -70,7 +71,7 @@ export function assignToActor({id, actor}) {
 
   let endpoint = `/issues/${id}/`;
 
-  let uniqueId = api.uniqueId();
+  let guid = uniqueId();
   let actorId;
   switch (actor.type) {
     case 'user':
@@ -93,9 +94,9 @@ export function assignToActor({id, actor}) {
       data: {assignedTo: actorId},
     })
     .then(data => {
-      GroupActions.assignToSuccess(uniqueId, id, data);
+      GroupActions.assignToSuccess(guid, id, data);
     })
     .catch(data => {
-      GroupActions.assignToError(uniqueId, id, data);
+      GroupActions.assignToError(guid, id, data);
     });
 }
diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index 738fb11004..69b23ff557 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -1,6 +1,7 @@
 import TeamActions from 'app/actions/teamActions';
 import {tct} from 'app/locale';
 import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+import {uniqueId} from 'app/utils/guid';
 
 const doCallback = (params = {}, name, ...args) => {
   if (typeof params[name] === 'function') {
@@ -62,7 +63,7 @@ export function updateTeam(api, params, options) {
 export function joinTeam(api, params, options) {
   let endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
     'me'}/teams/${params.teamId}/`;
-  let id = api.uniqueId();
+  let id = uniqueId();
 
   TeamActions.update(id, params.teamId);
 
@@ -83,7 +84,7 @@ export function joinTeam(api, params, options) {
 export function leaveTeam(api, params, options) {
   let endpoint = `/organizations/${params.orgId}/members/${params.memberId ||
     'me'}/teams/${params.teamId}/`;
-  let id = api.uniqueId();
+  let id = uniqueId();
 
   TeamActions.update(id, params.teamId);
 
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index c21d23a370..3e8b12b731 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -11,6 +11,8 @@ import {metric} from 'app/utils/analytics';
 import {openSudo, redirectToProject} from 'app/actionCreators/modal';
 import GroupActions from 'app/actions/groupActions';
 import sdk from 'app/utils/sdk';
+import {uniqueId} from 'app/utils/guid';
+import * as tracing from 'app/utils/tracing';
 
 export class Request {
   constructor(xhr) {
@@ -52,15 +54,6 @@ export class Client {
     this.activeRequests = {};
   }
 
-  uniqueId() {
-    let s4 = () => {
-      return Math.floor((1 + Math.random()) * 0x10000)
-        .toString(16)
-        .substring(1);
-    };
-    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
-  }
-
   /**
    * Check if the API response says project has been renamed.
    * If so, redirect user to new project slug
@@ -160,7 +153,7 @@ export class Client {
     }
     let method = options.method || (options.data ? 'POST' : 'GET');
     let data = options.data;
-    let id = this.uniqueId();
+    let id = uniqueId();
     metric.mark(`api-request-start-${id}`);
 
     if (!isUndefined(data) && method !== 'GET') {
@@ -189,6 +182,8 @@ export class Client {
         contentType: 'application/json',
         headers: {
           Accept: 'application/json; charset=utf-8',
+          'X-Transaction-ID': tracing.getTransactionId(),
+          'X-Span-ID': tracing.getSpanId(),
         },
         success: (...args) => {
           let [, , xhr] = args || [];
@@ -268,7 +263,7 @@ export class Client {
   bulkDelete(params, options) {
     let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = paramsToQueryArgs(params);
-    let id = this.uniqueId();
+    let id = uniqueId();
 
     GroupActions.delete(id, params.itemIds);
 
@@ -291,7 +286,7 @@ export class Client {
   bulkUpdate(params, options) {
     let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = paramsToQueryArgs(params);
-    let id = this.uniqueId();
+    let id = uniqueId();
 
     GroupActions.update(id, params.itemIds, params.data);
 
@@ -315,7 +310,7 @@ export class Client {
   merge(params, options) {
     let path = '/projects/' + params.orgId + '/' + params.projectId + '/issues/';
     let query = paramsToQueryArgs(params);
-    let id = this.uniqueId();
+    let id = uniqueId();
 
     GroupActions.merge(id, params.itemIds);
 
diff --git a/src/sentry/static/sentry/app/main.jsx b/src/sentry/static/sentry/app/main.jsx
index b9d3eebd27..d36f11e7ab 100644
--- a/src/sentry/static/sentry/app/main.jsx
+++ b/src/sentry/static/sentry/app/main.jsx
@@ -3,10 +3,20 @@ import {Router, browserHistory} from 'react-router';
 
 import routes from 'app/routes';
 import {loadPreferencesState} from 'app/actionCreators/preferences';
+import * as tracing from 'app/utils/tracing';
 
 export default class Main extends React.Component {
   componentDidMount() {
     loadPreferencesState();
+
+    tracing.startTransaction();
+    this.unlisten = browserHistory.listen(() => tracing.startTransaction());
+  }
+
+  componentWillUnmount() {
+    if (this.unlisten) {
+      this.unlisten();
+    }
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/utils/guid.jsx b/src/sentry/static/sentry/app/utils/guid.jsx
new file mode 100644
index 0000000000..c37886c75d
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/guid.jsx
@@ -0,0 +1,8 @@
+export function uniqueId() {
+  let s4 = () => {
+    return Math.floor((1 + Math.random()) * 0x10000)
+      .toString(16)
+      .substring(1);
+  };
+  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
+}
diff --git a/src/sentry/static/sentry/app/utils/tracing.jsx b/src/sentry/static/sentry/app/utils/tracing.jsx
new file mode 100644
index 0000000000..70f8183dbf
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/tracing.jsx
@@ -0,0 +1,22 @@
+import {uniqueId} from './guid';
+
+let spanId = null;
+let transactionId = null;
+
+export function startTransaction() {
+  spanId = uniqueId();
+  transactionId = uniqueId();
+  window.Raven &&
+    window.Raven.setTagsContext({span_id: spanId, transaction_id: transactionId});
+  return {spanId, transactionId};
+}
+
+export function getTransactionId() {
+  if (!transactionId) startTransaction();
+  return transactionId;
+}
+
+export function getSpanId() {
+  if (!spanId) startTransaction();
+  return spanId;
+}
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index c036f341b4..50050632ce 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -22,6 +22,7 @@ import ResolveActions from 'app/components/actions/resolve';
 import SentryTypes from 'app/sentryTypes';
 import ShareIssue from 'app/components/shareIssue';
 import space from 'app/styles/space';
+import {uniqueId} from 'app/utils/guid';
 
 class DeleteActions extends React.Component {
   static propTypes = {
@@ -208,7 +209,7 @@ const GroupDetailsActions = createReactClass({
     let group = this.getGroup();
     let project = this.getProject();
     let org = this.getOrganization();
-    let id = this.api.uniqueId();
+    let id = uniqueId();
     let loadingIndicator = IndicatorStore.add(t('Discarding event..'));
 
     GroupActions.discard(id, group.id);
