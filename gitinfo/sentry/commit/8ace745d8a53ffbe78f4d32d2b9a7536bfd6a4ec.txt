commit 8ace745d8a53ffbe78f4d32d2b9a7536bfd6a4ec
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Nov 18 20:11:00 2019 +0000

    ref: Move column list out of Eventstore (#15617)
    
    Since this column list is relevant for Snuba queries generally and not just for
    Eventstore, let's move it out. This helps avoid the dependency of utils/snuba.py
    on Eventstore.

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index f36b8531e2..e6dca7e38c 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -20,6 +20,7 @@ from sentry.search.utils import (
     parse_datetime_value,
     InvalidQuery,
 )
+from sentry.snuba.events import get_columns_from_aliases
 from sentry.utils.dates import to_timestamp
 from sentry.utils.snuba import Dataset, DATASETS, get_snuba_column_name
 
@@ -852,7 +853,7 @@ def get_reference_event_conditions(organization, snuba_args, event_slug):
     summary graph navigation.
     """
     groupby = snuba_args.get("groupby", [])
-    columns = eventstore.get_columns_from_aliases(groupby)
+    columns = get_columns_from_aliases(groupby)
     field_names = [get_snuba_column_name(field) for field in groupby]
 
     # Fetch the reference event ensuring the fields in the groupby
diff --git a/src/sentry/eventstore/__init__.py b/src/sentry/eventstore/__init__.py
index 58637f683a..15d6395ee2 100644
--- a/src/sentry/eventstore/__init__.py
+++ b/src/sentry/eventstore/__init__.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.utils.services import LazyServiceWrapper
 
-from .base import EventStorage, Columns, Filter, get_columns_from_aliases  # NOQA
+from .base import EventStorage, Filter  # NOQA
 
 backend = LazyServiceWrapper(
     EventStorage, "sentry.eventstore.snuba.SnubaEventStorage", {}, metrics_path="eventstore"
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index 387627c8a5..989b74cdfb 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -1,130 +1,10 @@
 from __future__ import absolute_import
 
-from enum import Enum
-from collections import namedtuple
 
 from sentry import nodestore
+from sentry.snuba.events import Columns
 from sentry.utils.services import Service
 
-Column = namedtuple("Column", "event_name transaction_name discover_name alias")
-
-
-class Columns(Enum):
-    """
-    Value is a tuple of (internal Events name, internal Transaction name, internal
-    Discover name, external alias)
-    None means the column is not available in that dataset.
-    """
-
-    EVENT_ID = Column("event_id", "event_id", "event_id", "id")
-    GROUP_ID = Column("group_id", None, "group_id", "issue.id")
-    ISSUE = Column("issue", None, "group_id", "issue.id")
-    PROJECT_ID = Column("project_id", "project_id", "project_id", "project.id")
-    TIMESTAMP = Column("timestamp", "finish_ts", "timestamp", "timestamp")
-    TIME = Column("time", "bucketed_end", "time", "time")
-    CULPRIT = Column("culprit", None, "culprit", "culprit")
-    LOCATION = Column("location", None, "location", "location")
-    MESSAGE = Column("message", "transaction_name", "message", "message")
-    PLATFORM = Column("platform", "platform", "platform", "platform.name")
-    ENVIRONMENT = Column("environment", "environment", "environment", "environment")
-    RELEASE = Column("tags[sentry:release]", "release", "release", "release")
-    TITLE = Column("title", "transaction_name", "title", "title")
-    TYPE = Column("type", None, "type", "event.type")
-    TAGS_KEY = Column("tags.key", "tags.key", "tags.key", "tags.key")
-    TAGS_VALUE = Column("tags.value", "tags.value", "tags.value", "tags.value")
-    TAGS_KEYS = Column("tags_key", "tags_key", "tags_key", "tags_key")
-    TAGS_VALUES = Column("tags_value", "tags_value", "tags_value", "tags_value")
-    TRANSACTION = Column("transaction", "transaction_name", "transaction", "transaction")
-    USER = Column("tags[sentry:user]", "user", "user", "user")
-    USER_ID = Column("user_id", "user_id", "user_id", "user.id")
-    USER_EMAIL = Column("email", "user_email", "email", "user.email")
-    USER_USERNAME = Column("username", "user_name", "username", "user.username")
-    USER_IP_ADDRESS = Column("ip_address", "ip_address_v4", "ip_address", "user.ip")
-    SDK_NAME = Column("sdk_name", None, "sdk_name", "sdk.name")
-    SDK_VERSION = Column("sdk_version", None, "sdk_version", "sdk.version")
-    HTTP_METHOD = Column("http_method", None, "http_method", "http.method")
-    HTTP_REFERER = Column("http_referer", None, "http_referer", "http.url")
-    OS_BUILD = Column("os_build", None, "os_build", "os.build")
-    OS_KERNEL_VERSION = Column("os_kernel_version", None, "os_kernel_version", "os.kernel_version")
-    DEVICE_NAME = Column("device_name", None, "device_name", "device.name")
-    DEVICE_BRAND = Column("device_brand", None, "device_brand", "device.brand")
-    DEVICE_LOCALE = Column("device_locale", None, "device_locale", "device.locale")
-    DEVICE_UUID = Column("device_uuid", None, "device_uuid", "device.uuid")
-    DEVICE_ARCH = Column("device_arch", None, "device_arch", "device.arch")
-    DEVICE_BATTERY_LEVEL = Column(
-        "device_battery_level", None, "device_battery_level", "device.battery_level"
-    )
-    DEVICE_ORIENTATION = Column(
-        "device_orientation", None, "device_orientation", "device.orientation"
-    )
-    DEVICE_SIMULATOR = Column("device_simulator", None, "device_simulator", "device.simulator")
-    DEVICE_ONLINE = Column("device_online", None, "device_online", "device.online")
-    DEVICE_CHARGING = Column("device_charging", None, "device_charging", "device.charging")
-    GEO_COUNTRY_CODE = Column("geo_country_code", None, "geo_country_code", "geo.country_code")
-    GEO_REGION = Column("geo_region", None, "geo_region", "geo.region")
-    GEO_CITY = Column("geo_city", None, "geo_city", "geo.city")
-    ERROR_TYPE = Column("exception_stacks.type", None, "exception_stacks.type", "error.type")
-    ERROR_VALUE = Column("exception_stacks.value", None, "exception_stacks.value", "error.value")
-    ERROR_MECHANISM = Column(
-        "exception_stacks.mechanism_type",
-        None,
-        "exception_stacks.mechanism_type",
-        "error.mechanism",
-    )
-    ERROR_HANDLED = Column(
-        "exception_stacks.mechanism_handled",
-        None,
-        "exception_stacks.mechanism_handled",
-        "error.handled",
-    )
-    STACK_ABS_PATH = Column(
-        "exception_frames.abs_path", None, "exception_frames.abs_path", "stack.abs_path"
-    )
-    STACK_FILENAME = Column(
-        "exception_frames.filename", None, "exception_frames.filename", "stack.filename"
-    )
-    STACK_PACKAGE = Column(
-        "exception_frames.package", None, "exception_frames.package", "stack.package"
-    )
-    STACK_MODULE = Column(
-        "exception_frames.module", None, "exception_frames.module", "stack.module"
-    )
-    STACK_FUNCTION = Column(
-        "exception_frames.function", None, "exception_frames.function", "stack.function"
-    )
-    STACK_IN_APP = Column(
-        "exception_frames.in_app", None, "exception_frames.in_app", "stack.in_app"
-    )
-    STACK_COLNO = Column("exception_frames.colno", None, "exception_frames.colno", "stack.colno")
-    STACK_LINENO = Column(
-        "exception_frames.lineno", None, "exception_frames.lineno", "stack.lineno"
-    )
-    STACK_STACK_LEVEL = Column(
-        "exception_frames.stack_level", None, "exception_frames.stack_level", "stack.stack_level"
-    )
-    CONTEXTS_KEY = Column("contexts.key", "contexts.key", "contexts.key", "contexts.key")
-    CONTEXTS_VALUE = Column("contexts.value", "contexts.value", "contexts.value", "contexts.value")
-    # Transactions specific columns
-    TRANSACTION_OP = Column(None, "transaction_op", "transaction_op", "transaction.op")
-    TRANSACTION_DURATION = Column(None, "duration", "duration", "transaction.duration")
-
-
-def get_columns_from_aliases(aliases):
-    """
-    Resolve a list of aliases to the columns
-    """
-    columns = set()
-    for alias in aliases:
-        for _i, col in enumerate(Columns):
-            if col.value.alias == alias:
-                columns.add(col)
-                continue
-            # Handle as a tag if its not on the list
-            columns.add(Columns.TAGS_KEY)
-            columns.add(Columns.TAGS_VALUE)
-
-    return list(columns)
-
 
 class Filter(object):
     """
diff --git a/src/sentry/snuba/events.py b/src/sentry/snuba/events.py
new file mode 100644
index 0000000000..7bd490d979
--- /dev/null
+++ b/src/sentry/snuba/events.py
@@ -0,0 +1,123 @@
+from __future__ import absolute_import
+
+from enum import Enum
+from collections import namedtuple
+
+Column = namedtuple("Column", "event_name transaction_name discover_name alias")
+
+
+class Columns(Enum):
+    """
+    Value is a tuple of (internal Events name, internal Transaction name, internal
+    Discover name, external alias)
+    None means the column is not available in that dataset.
+    """
+
+    EVENT_ID = Column("event_id", "event_id", "event_id", "id")
+    GROUP_ID = Column("group_id", None, "group_id", "issue.id")
+    ISSUE = Column("issue", None, "group_id", "issue.id")
+    PROJECT_ID = Column("project_id", "project_id", "project_id", "project.id")
+    TIMESTAMP = Column("timestamp", "finish_ts", "timestamp", "timestamp")
+    TIME = Column("time", "bucketed_end", "time", "time")
+    CULPRIT = Column("culprit", None, "culprit", "culprit")
+    LOCATION = Column("location", None, "location", "location")
+    MESSAGE = Column("message", "transaction_name", "message", "message")
+    PLATFORM = Column("platform", "platform", "platform", "platform.name")
+    ENVIRONMENT = Column("environment", "environment", "environment", "environment")
+    RELEASE = Column("tags[sentry:release]", "release", "release", "release")
+    TITLE = Column("title", "transaction_name", "title", "title")
+    TYPE = Column("type", None, "type", "event.type")
+    TAGS_KEY = Column("tags.key", "tags.key", "tags.key", "tags.key")
+    TAGS_VALUE = Column("tags.value", "tags.value", "tags.value", "tags.value")
+    TAGS_KEYS = Column("tags_key", "tags_key", "tags_key", "tags_key")
+    TAGS_VALUES = Column("tags_value", "tags_value", "tags_value", "tags_value")
+    TRANSACTION = Column("transaction", "transaction_name", "transaction", "transaction")
+    USER = Column("tags[sentry:user]", "user", "user", "user")
+    USER_ID = Column("user_id", "user_id", "user_id", "user.id")
+    USER_EMAIL = Column("email", "user_email", "email", "user.email")
+    USER_USERNAME = Column("username", "user_name", "username", "user.username")
+    USER_IP_ADDRESS = Column("ip_address", "ip_address_v4", "ip_address", "user.ip")
+    SDK_NAME = Column("sdk_name", None, "sdk_name", "sdk.name")
+    SDK_VERSION = Column("sdk_version", None, "sdk_version", "sdk.version")
+    HTTP_METHOD = Column("http_method", None, "http_method", "http.method")
+    HTTP_REFERER = Column("http_referer", None, "http_referer", "http.url")
+    OS_BUILD = Column("os_build", None, "os_build", "os.build")
+    OS_KERNEL_VERSION = Column("os_kernel_version", None, "os_kernel_version", "os.kernel_version")
+    DEVICE_NAME = Column("device_name", None, "device_name", "device.name")
+    DEVICE_BRAND = Column("device_brand", None, "device_brand", "device.brand")
+    DEVICE_LOCALE = Column("device_locale", None, "device_locale", "device.locale")
+    DEVICE_UUID = Column("device_uuid", None, "device_uuid", "device.uuid")
+    DEVICE_ARCH = Column("device_arch", None, "device_arch", "device.arch")
+    DEVICE_BATTERY_LEVEL = Column(
+        "device_battery_level", None, "device_battery_level", "device.battery_level"
+    )
+    DEVICE_ORIENTATION = Column(
+        "device_orientation", None, "device_orientation", "device.orientation"
+    )
+    DEVICE_SIMULATOR = Column("device_simulator", None, "device_simulator", "device.simulator")
+    DEVICE_ONLINE = Column("device_online", None, "device_online", "device.online")
+    DEVICE_CHARGING = Column("device_charging", None, "device_charging", "device.charging")
+    GEO_COUNTRY_CODE = Column("geo_country_code", None, "geo_country_code", "geo.country_code")
+    GEO_REGION = Column("geo_region", None, "geo_region", "geo.region")
+    GEO_CITY = Column("geo_city", None, "geo_city", "geo.city")
+    ERROR_TYPE = Column("exception_stacks.type", None, "exception_stacks.type", "error.type")
+    ERROR_VALUE = Column("exception_stacks.value", None, "exception_stacks.value", "error.value")
+    ERROR_MECHANISM = Column(
+        "exception_stacks.mechanism_type",
+        None,
+        "exception_stacks.mechanism_type",
+        "error.mechanism",
+    )
+    ERROR_HANDLED = Column(
+        "exception_stacks.mechanism_handled",
+        None,
+        "exception_stacks.mechanism_handled",
+        "error.handled",
+    )
+    STACK_ABS_PATH = Column(
+        "exception_frames.abs_path", None, "exception_frames.abs_path", "stack.abs_path"
+    )
+    STACK_FILENAME = Column(
+        "exception_frames.filename", None, "exception_frames.filename", "stack.filename"
+    )
+    STACK_PACKAGE = Column(
+        "exception_frames.package", None, "exception_frames.package", "stack.package"
+    )
+    STACK_MODULE = Column(
+        "exception_frames.module", None, "exception_frames.module", "stack.module"
+    )
+    STACK_FUNCTION = Column(
+        "exception_frames.function", None, "exception_frames.function", "stack.function"
+    )
+    STACK_IN_APP = Column(
+        "exception_frames.in_app", None, "exception_frames.in_app", "stack.in_app"
+    )
+    STACK_COLNO = Column("exception_frames.colno", None, "exception_frames.colno", "stack.colno")
+    STACK_LINENO = Column(
+        "exception_frames.lineno", None, "exception_frames.lineno", "stack.lineno"
+    )
+    STACK_STACK_LEVEL = Column(
+        "exception_frames.stack_level", None, "exception_frames.stack_level", "stack.stack_level"
+    )
+    CONTEXTS_KEY = Column("contexts.key", "contexts.key", "contexts.key", "contexts.key")
+    CONTEXTS_VALUE = Column("contexts.value", "contexts.value", "contexts.value", "contexts.value")
+    # Transactions specific columns
+    TRANSACTION_OP = Column(None, "transaction_op", "transaction_op", "transaction.op")
+    TRANSACTION_DURATION = Column(None, "duration", "duration", "transaction.duration")
+
+
+def get_columns_from_aliases(aliases):
+    """
+    Resolve a list of aliases to the columns
+    """
+    columns = set()
+    for alias in aliases:
+        for _i, col in enumerate(Columns):
+            if col.value.alias == alias:
+                columns.add(col)
+                continue
+            # Handle as a tag if its not on the list
+            columns.add(Columns.TAGS_KEY)
+            columns.add(Columns.TAGS_VALUE)
+
+    return list(columns)
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 3de2388182..647b7dbd51 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -23,6 +23,7 @@ from sentry.models import (
     UserReport,
 )
 from sentry.similarity import features
+from sentry.snuba.events import Columns
 from sentry.tasks.base import instrumented_task
 from six.moves import reduce
 
@@ -503,7 +504,7 @@ def unmerge(
         ),
         # We need the text-only "search message" from Snuba, not the raw message
         # dict field from nodestore.
-        additional_columns=[eventstore.Columns.MESSAGE],
+        additional_columns=[Columns.MESSAGE],
         limit=batch_size,
         referrer="unmerge",
         orderby=["-timestamp", "-event_id"],
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index a41279adee..971ba911aa 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -30,7 +30,7 @@ from sentry.models import (
 from sentry.net.http import connection_from_url
 from sentry.utils import metrics, json
 from sentry.utils.dates import to_timestamp
-from sentry.eventstore.base import Columns
+from sentry.snuba.events import Columns
 
 # TODO remove this when Snuba accepts more than 500 issues
 MAX_ISSUES = 500
