commit 3977d09b8e554292b4a8157e3a1d1867b4cf6330
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 19 23:02:32 2015 -0800

    Basic initial working Google flow

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 937dfeca21..b8a004470f 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -1,7 +1,12 @@
 from __future__ import absolute_import, print_function
 
+import logging
+
+from django.core.urlresolvers import reverse
 from hashlib import md5
 
+from sentry.models import AuthProvider, Organization
+
 
 class AuthHelper(object):
     """
@@ -10,8 +15,33 @@ class AuthHelper(object):
     Designed to link provider and views as well as manage the state and
     pipeline.
     """
-    def __init__(self, request, provider):
+    @classmethod
+    def get_for_request(cls, request):
+        session = request.session.get('auth', {})
+        auth_provider_id = session.get('ap')
+        if not auth_provider_id:
+            logging.info('Invalid SSO data found')
+            return None
+
+        auth_provider = AuthProvider.objects.get(
+            id=auth_provider_id
+        )
+        organization = Organization.objects.get_from_cache(
+            id=session['org'],
+        )
+
+        return cls(request, organization, auth_provider)
+
+    def __init__(self, request, organization, auth_provider):
         self.request = request
+        self.auth_provider = auth_provider
+        self.organization = organization
+
+        provider = auth_provider.get_provider()(
+            key=auth_provider.provider,
+            **auth_provider.config
+        )
+
         self.provider = provider
         self.pipeline = provider.get_auth_pipeline()
         # we serialize the pipeline to be [AuthView().get_ident(), ...] which
@@ -20,34 +50,45 @@ class AuthHelper(object):
         self.signature = md5(' '.join(av.get_ident() for av in self.pipeline)).hexdigest()
 
     def pipeline_is_valid(self):
-        current_session = self.request.session.get('auth_pipeline', {})
-        if not current_session:
+        session = self.request.session.get('auth', {})
+        if not session:
             return False
-        return current_session.get('sig') == self.signature
+        return session.get('sig') == self.signature
 
     def reset_pipeline(self):
-        current_session = {
-            'idx': 0,
+        session = {
+            'ap': self.auth_provider.id,
+            'org': self.organization.id,
+            'idx': -1,
             'sig': self.signature,
             'state': {},
         }
-        self.request.session['auth'] = current_session
+        self.request.session['auth'] = session
         self.request.session.is_modified = True
 
     def get_current_view(self):
-        return self.provider.pipeline[self.request.session['auth']['idx']]
+        idx = self.request.session['auth']['idx']
+        return self.pipeline[idx]
 
     def get_next_url(self):
-        # each step url should be something like md5(cls_path)
-        return self.request.path
+        return self.request.build_absolute_uri(reverse('sentry-auth-sso'))
 
     def get_current_url(self):
-        return self.request.path
+        return self.request.build_absolute_uri(reverse('sentry-auth-sso'))
 
     def next_step(self):
         # TODO: this needs to somehow embed the next step
         # (it shouldnt force an exteneral redirect)
-        return self.redirect(self.get_next_url())
+        session = self.request.session['auth']
+        session['idx'] += 1
+        self.request.session.is_modified = True
+
+        idx = session['idx']
+        if idx == len(self.pipeline):
+            identity = self.provider.get_identity(session.get('state', {}))
+            raise NotImplementedError
+
+        return self.pipeline[idx].dispatch(self.request, self)
 
     def error(self, message):
         raise NotImplementedError
diff --git a/src/sentry/auth/providers/google_oauth2.py b/src/sentry/auth/providers/google_oauth2.py
index 86a118f6c7..e9d5be79b9 100644
--- a/src/sentry/auth/providers/google_oauth2.py
+++ b/src/sentry/auth/providers/google_oauth2.py
@@ -20,6 +20,7 @@ CLIENT_ID = getattr(settings, 'GOOGLE_CLIENT_ID', None)
 
 CLIENT_SECRET = getattr(settings, 'GOOGLE_CLIENT_SECRET', None)
 
+# requires Google+ API enabled
 USER_DETAILS_ENDPOINT = 'https://www.googleapis.com/plus/v1/people/me'
 
 ERR_INVALID_DOMAIN = 'The domain for your Google account is not allowed to authenticate with this provider.'
@@ -42,7 +43,7 @@ class FetchUser(AuthView):
         body = safe_urlread(req)
         data = json.loads(body)
 
-        if self.domain and self.domain != data['domain']:
+        if self.domain and self.domain != data.get('domain'):
             return helper.error(ERR_INVALID_DOMAIN)
 
         helper.bind_state('user', data)
diff --git a/src/sentry/auth/providers/oauth2.py b/src/sentry/auth/providers/oauth2.py
index 22427bccd3..761f58fe7f 100644
--- a/src/sentry/auth/providers/oauth2.py
+++ b/src/sentry/auth/providers/oauth2.py
@@ -1,12 +1,14 @@
 from __future__ import absolute_import, print_function
 
+import logging
+
 from urllib import urlencode
 from uuid import uuid4
 
 from sentry.auth import Provider, AuthView
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
-from sentry.utils.http import absolute_uri
+from sentry.utils.http import absolute_uri, safe_urlencode
 
 ERR_INVALID_STATE = 'An error occurred while validating your request.'
 
@@ -42,11 +44,14 @@ class OAuth2Login(AuthView):
         }
 
     def dispatch(self, request, helper):
+        if 'code' in request.GET:
+            return helper.next_step()
+
         state = str(uuid4())
 
-        params = self.get_authorized_params(
+        params = self.get_authorize_params(
             state=state,
-            redirect_uri=absolute_uri(self.get_next_url(request)),
+            redirect_uri=absolute_uri(helper.get_next_url()),
         )
 
         redirect_uri = self.get_authorize_url() + '?' + urlencode(params)
@@ -63,7 +68,7 @@ class OAuth2Callback(AuthView):
 
     def __init__(self, access_token_url=None, client_id=None,
                  client_secret=None, *args, **kwargs):
-        super(OAuth2Login, self).__init__(*args, **kwargs)
+        super(OAuth2Callback, self).__init__(*args, **kwargs)
         if access_token_url is not None:
             self.access_token_url = access_token_url
         if client_id is not None:
@@ -82,10 +87,10 @@ class OAuth2Callback(AuthView):
 
     def exchange_token(self, request, helper, code):
         # TODO: this needs the auth yet
-        params = self.get_token_params(
+        params = safe_urlencode(self.get_token_params(
             code=code,
-            redirect_uri=absolute_uri(helper.get_current_url(request)),
-        )
+            redirect_uri=absolute_uri(helper.get_current_url()),
+        ))
         req = safe_urlopen(self.access_token_url, data=params)
         body = safe_urlread(req)
 
@@ -104,6 +109,13 @@ class OAuth2Callback(AuthView):
 
         data = self.exchange_token(request, helper, code)
 
+        if 'error_description' in data:
+            return helper.error(data['error_description'])
+
+        if 'error' in data:
+            logging.info('Error exchanging token: %s', data['error'])
+            return helper.error('Unable to retrieve your token')
+
         # we can either expect the API to be implicit and say "im looking for
         # blah within state data" or we need to pass implementation + call a
         # hook here
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index b9173215d0..e987486651 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -22,6 +22,6 @@ class AuthProvider(Model):
         db_table = 'sentry_authprovider'
 
     def get_provider(self):
-        from sentry.auth import providers
+        from sentry.auth import manager
 
-        return providers.get(self.provider)
+        return manager.get(self.provider)
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
new file mode 100644
index 0000000000..fb25939bda
--- /dev/null
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -0,0 +1,27 @@
+from __future__ import absolute_import, print_function
+
+from django.core.urlresolvers import reverse
+
+from sentry.auth.helper import AuthHelper
+from sentry.models import Organization
+from sentry.web.frontend.base import BaseView
+
+
+class AuthOrganizationLoginView(BaseView):
+    auth_required = False
+
+    def handle(self, request, organization_slug):
+        try:
+            organization = Organization.objects.get_from_cache(
+                slug=organization_slug
+            )
+        except Organization.DoesNotExist:
+            return self.redirect(reverse('sentry-login'))
+
+        auth_provider = organization.auth_provider
+        if auth_provider is None:
+            return self.redirect(reverse('sentry-login'))
+
+        helper = AuthHelper(request, organization, auth_provider)
+        helper.reset_pipeline()
+        return helper.next_step()
diff --git a/src/sentry/web/frontend/auth_provider_login.py b/src/sentry/web/frontend/auth_provider_login.py
index c40fc5663a..3c280d84a5 100644
--- a/src/sentry/web/frontend/auth_provider_login.py
+++ b/src/sentry/web/frontend/auth_provider_login.py
@@ -3,30 +3,17 @@ from __future__ import absolute_import, print_function
 from django.core.urlresolvers import reverse
 
 from sentry.auth.helper import AuthHelper
-from sentry.models import Organization
 from sentry.web.frontend.base import BaseView
 
 
 class AuthProviderLoginView(BaseView):
     auth_required = False
 
-    def handle(self, request, organization_slug):
-        try:
-            organization = Organization.objects.get_from_cache(
-                slug=organization_slug
-            )
-        except Organization.DoesNotExist:
+    def handle(self, request):
+        helper = AuthHelper.get_for_request(request)
+        if helper is None:
             return self.redirect(reverse('sentry-login'))
 
-        auth_provider = organization.auth_provider
-        if auth_provider is None:
-            return self.redirect(reverse('sentry-login'))
-
-        provider = auth_provider.get_provider()(**auth_provider.config)
-
-        helper = AuthHelper(request, provider)
         if not helper.pipeline_is_valid():
             helper.reset_pipeline()
-
-        current_view = helper.get_current_view()
-        return current_view.dispatch(request, provider)
+        return helper.next_step()
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 08a066af6e..2e0d43856e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -40,6 +40,8 @@ from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInv
 from sentry.web.frontend.access_group_migration import AccessGroupMigrationView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.auth_logout import AuthLogoutView
+from sentry.web.frontend.auth_organization_login import AuthOrganizationLoginView
+from sentry.web.frontend.auth_provider_login import AuthProviderLoginView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
 from sentry.web.frontend.organization_auth_settings import OrganizationAuthSettingsView
@@ -98,13 +100,20 @@ urlpatterns += patterns('',
     # API
     url(r'^api/0/', include('sentry.api.urls')),
 
-    # Account
-    url(r'^login/$', AuthLoginView.as_view(),
+    # Auth
+    url(r'^auth/login/$', AuthLoginView.as_view(),
         name='sentry-login'),
+    url(r'^auth/sso/$', AuthProviderLoginView.as_view(),
+        name='sentry-auth-sso'),
+    url(r'^auth/login/(?P<organization_slug>[^/]+)/$', AuthOrganizationLoginView.as_view(),
+        name='sentry-auth-organization'),
+    url(r'^auth/logout/$', AuthLogoutView.as_view(),
+        name='sentry-logout'),
+
+
+    # Account
     url(r'^login-redirect/$', accounts.login_redirect,
         name='sentry-login-redirect'),
-    url(r'^logout/$', AuthLogoutView.as_view(),
-        name='sentry-logout'),
     url(r'^register/$', accounts.register,
         name='sentry-register'),
     url(r'^account/sudo/$', 'sudo.views.sudo',
