commit 7611c5f20bc69d27e737c90357ee7e81a99e564c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jul 27 11:46:55 2018 -0700

    feat(feature-tags): Add default message when there is no access (#9190)
    
    If user does not have access to feature tag, display a default alert message (that can be customized with a render function)

diff --git a/src/sentry/static/sentry/app/components/feature.jsx b/src/sentry/static/sentry/app/components/feature.jsx
index f544f786b3..a2196b2cfc 100644
--- a/src/sentry/static/sentry/app/components/feature.jsx
+++ b/src/sentry/static/sentry/app/components/feature.jsx
@@ -1,11 +1,19 @@
-import createReactClass from 'create-react-class';
 import PropTypes from 'prop-types';
 import React from 'react';
 import Reflux from 'reflux';
+import createReactClass from 'create-react-class';
 
+import {t} from 'app/locale';
+import Alert from 'app/components/alert';
 import ConfigStore from 'app/stores/configStore';
 import SentryTypes from 'app/sentryTypes';
 
+const DEFAULT_NO_FEATURE_MESSAGE = (
+  <Alert type="info" icon="icon-circle-info">
+    {t('This feature is coming soon!')}
+  </Alert>
+);
+
 /**
  * Interface to handle feature tags as well as user's organization access levels
  */
@@ -42,6 +50,12 @@ class Feature extends React.Component {
      */
     isSuperuser: PropTypes.bool,
 
+    /**
+     * Custom renderer function for "no feature" message OR `true` to use default message.
+     * `false` will suppress message.
+     */
+    renderNoFeatureMessage: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
+
     /**
      * If children is a function then will be treated as a render prop and passed this object:
      * {
@@ -55,6 +69,10 @@ class Feature extends React.Component {
     children: PropTypes.oneOfType([PropTypes.func, PropTypes.node]),
   };
 
+  static defaultProps = {
+    renderNoFeatureMessage: false,
+  };
+
   getAllFeatures = () => {
     let {organization, project, configFeatures} = this.props;
     return {
@@ -88,20 +106,35 @@ class Feature extends React.Component {
   };
 
   render() {
-    let {children, organization, feature, access, configUser, isSuperuser} = this.props;
+    let {
+      children,
+      organization,
+      feature,
+      access,
+      configUser,
+      isSuperuser,
+      renderNoFeatureMessage,
+    } = this.props;
     let {access: orgAccess} = organization || {access: []};
     let allFeatures = this.getAllFeatures();
     let hasFeature =
       !feature || feature.every(feat => this.hasFeature(feat, allFeatures));
     let hasAccess = !access || access.every(acc => orgAccess.includes(acc));
     let hasSuperuser = !isSuperuser || configUser.isSuperuser;
+    let renderProps = {
+      hasFeature,
+      hasAccess,
+      hasSuperuser,
+    };
+
+    if (!hasFeature && typeof renderNoFeatureMessage === 'function') {
+      return renderNoFeatureMessage(renderProps);
+    } else if (!hasFeature && renderNoFeatureMessage) {
+      return DEFAULT_NO_FEATURE_MESSAGE;
+    }
 
     if (typeof children === 'function') {
-      return children({
-        hasFeature,
-        hasAccess,
-        hasSuperuser,
-      });
+      return children(renderProps);
     }
 
     // if children is NOT a function,
diff --git a/tests/js/spec/components/feature.spec.jsx b/tests/js/spec/components/feature.spec.jsx
index cba0ec1959..c76e21afdf 100644
--- a/tests/js/spec/components/feature.spec.jsx
+++ b/tests/js/spec/components/feature.spec.jsx
@@ -114,6 +114,19 @@ describe('Feature', function() {
       });
     });
 
+    it('calls render function when no feature', function() {
+      const noFeatureRenderer = jest.fn(() => null);
+      mount(
+        <Feature feature={['org-baz']} renderNoFeatureMessage={noFeatureRenderer}>
+          {childrenMock}
+        </Feature>,
+        routerContext
+      );
+
+      expect(childrenMock).not.toHaveBeenCalled();
+      expect(noFeatureRenderer).toHaveBeenCalled();
+    });
+
     it('can specify org from props', function() {
       mount(
         <Feature
@@ -232,6 +245,22 @@ describe('Feature', function() {
         })
       );
     });
+
+    it('checks ConfigStore.config.features (e.g. `organizations:create`)', function() {
+      ConfigStore.config = {
+        features: new Set(['organizations:create']),
+      };
+      mount(
+        <Feature feature={['organizations:create']}>{childrenMock}</Feature>,
+        routerContext
+      );
+
+      expect(childrenMock).toHaveBeenCalledWith(
+        expect.objectContaining({
+          hasFeature: true,
+        })
+      );
+    });
   });
 
   describe('as React node', function() {
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
index 74da01e968..97d67c1fcb 100644
--- a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -80,6 +80,7 @@ exports[`ProjectPluginRow renders 1`] = `
           "teams": Array [],
         }
       }
+      renderNoFeatureMessage={false}
     >
       <Flex
         align="center"
diff --git a/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap b/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
index 30a9f548b5..1e10c6de13 100644
--- a/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/project/__snapshots__/projectIntegrations.spec.jsx.snap
@@ -137,6 +137,7 @@ exports[`ProjectIntegrations Renders emptystate with access 1`] = `
                                 "teams": Array [],
                               }
                             }
+                            renderNoFeatureMessage={false}
                           >
                             <Tooltip
                               disabled={true}
@@ -350,6 +351,7 @@ exports[`ProjectIntegrations Renders emptystate with access 1`] = `
                                   "teams": Array [],
                                 }
                               }
+                              renderNoFeatureMessage={false}
                             >
                               <span
                                 key="6"
@@ -540,6 +542,7 @@ exports[`ProjectIntegrations Renders emptystate with no permissions 1`] = `
                                 "teams": Array [],
                               }
                             }
+                            renderNoFeatureMessage={false}
                           >
                             <Tooltip
                               disabled={false}
@@ -746,6 +749,7 @@ exports[`ProjectIntegrations Renders emptystate with no permissions 1`] = `
                                   "teams": Array [],
                                 }
                               }
+                              renderNoFeatureMessage={false}
                             >
                               Project Integrations can be enabled here for this project. Currently no organization integrations are enabled with project-specific integration capabilities.
                             </Feature>
