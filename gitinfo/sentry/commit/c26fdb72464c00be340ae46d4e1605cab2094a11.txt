commit c26fdb72464c00be340ae46d4e1605cab2094a11
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Apr 16 10:50:50 2020 -0700

    ref(ts): Convert `globalSelectionHeader/utils` to typescript (#18301)
    
    * improves types from getParams a bit
    * adds option to `getParams` to allow empty period (instead of using default period)

diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
index b3354d6080..9dac404c7e 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/getParams.tsx
@@ -88,22 +88,23 @@ const getUtcValue = (maybe: string | string[] | undefined | null): string | unde
   return undefined;
 };
 
-interface Params {
-  start?: string | string[] | undefined | null;
-  end?: string | string[] | undefined | null;
-  period?: string | string[] | undefined | null;
-  statsPeriod?: string | string[] | undefined | null;
-  utc?: string | string[] | undefined | null;
-  [others: string]: string | string[] | undefined | null;
-}
-
-// Filters out params with null values and returns a default
-// `statsPeriod` when necessary.
-//
-// Accepts `period` and `statsPeriod` but will only return `statsPeriod`
-//
-// TODO(billy): Make period parameter name consistent
-export function getParams(params: Params): {[key: string]: string | string[]} {
+type ParamValue = string | string[] | undefined | null;
+type Params = {
+  start?: ParamValue;
+  end?: ParamValue;
+  period?: ParamValue;
+  statsPeriod?: ParamValue;
+  utc?: ParamValue;
+};
+type RestParams = {[others: string]: ParamValue};
+
+export function getParams(
+  params: Params & RestParams,
+  {allowEmptyPeriod = false}: {allowEmptyPeriod?: boolean} = {}
+): {
+  [K in keyof Params]: Exclude<NonNullable<Params[K]>, string[]>;
+} &
+  RestParams {
   const {start, end, period, statsPeriod, utc, ...otherParams} = params;
 
   // `statsPeriod` takes precendence for now
@@ -113,27 +114,22 @@ export function getParams(params: Params): {[key: string]: string | string[]} {
   const dateTimeEnd = getDateTimeString(end);
 
   if (!(dateTimeStart && dateTimeEnd)) {
-    if (!coercedPeriod) {
+    if (!coercedPeriod && !allowEmptyPeriod) {
       coercedPeriod = DEFAULT_STATS_PERIOD;
     }
   }
 
-  // Filter null values
-  return Object.entries({
-    statsPeriod: coercedPeriod,
-    start: coercedPeriod ? null : dateTimeStart,
-    end: coercedPeriod ? null : dateTimeEnd,
-    // coerce utc into a string (it can be both: a string representation from router,
-    // or a boolean from time range picker)
-    utc: getUtcValue(utc),
-    ...otherParams,
-  })
-    .filter(([_key, value]) => defined(value))
-    .reduce(
-      (acc, [key, value]) => ({
-        ...acc,
-        [key]: value,
-      }),
-      {}
-    );
+  return Object.fromEntries(
+    Object.entries({
+      statsPeriod: coercedPeriod,
+      start: coercedPeriod ? null : dateTimeStart,
+      end: coercedPeriod ? null : dateTimeEnd,
+      // coerce utc into a string (it can be both: a string representation from router,
+      // or a boolean from time range picker)
+      utc: getUtcValue(utc),
+      ...otherParams,
+    })
+      // Filter null values
+      .filter(([_key, value]) => defined(value))
+  );
 }
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
similarity index 50%
rename from src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
rename to src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
index 4a8899c134..6fa73e47bb 100644
--- a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/utils.tsx
@@ -1,40 +1,45 @@
+import {Location} from 'history';
 import pick from 'lodash/pick';
 import pickBy from 'lodash/pickBy';
 import identity from 'lodash/identity';
 
 import {defined} from 'app/utils';
 import {getUtcToLocalDateObject} from 'app/utils/dates';
-import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {URL_PARAM, DATE_TIME_KEYS} from 'app/constants/globalSelectionHeader';
 
+import {getParams} from './getParams';
+
 // Parses URL query parameters for values relevant to global selection header
-export function getStateFromQuery(query) {
-  const parsedParams = getParams(query);
+export function getStateFromQuery(
+  query: Location['query'],
+  {allowEmptyPeriod = false}: {allowEmptyPeriod?: boolean} = {}
+) {
+  const parsedParams = getParams(query, {allowEmptyPeriod});
 
-  let start = parsedParams.start;
-  let end = parsedParams.end;
-  let project = query[URL_PARAM.PROJECT];
-  let environment = query[URL_PARAM.ENVIRONMENT];
+  const projectFromQuery = query[URL_PARAM.PROJECT];
+  const environmentFromQuery = query[URL_PARAM.ENVIRONMENT];
   const period = parsedParams.statsPeriod;
   const utc = parsedParams.utc;
 
-  const hasAbsolute = !!start && !!end;
+  const hasAbsolute = !!parsedParams.start && !!parsedParams.end;
 
-  if (defined(project) && Array.isArray(project)) {
-    project = project.map(p => parseInt(p, 10));
-  } else if (defined(project)) {
-    const projectIdInt = parseInt(project, 10);
-    project = isNaN(projectIdInt) ? [] : [projectIdInt];
+  let project: number[] | null | undefined;
+  if (defined(projectFromQuery) && Array.isArray(projectFromQuery)) {
+    project = projectFromQuery.map(p => parseInt(p, 10));
+  } else if (defined(projectFromQuery)) {
+    const projectFromQueryIdInt = parseInt(projectFromQuery, 10);
+    project = isNaN(projectFromQueryIdInt) ? [] : [projectFromQueryIdInt];
+  } else {
+    project = projectFromQuery;
   }
 
-  if (defined(environment) && !Array.isArray(environment)) {
-    environment = [environment];
-  }
+  const environment =
+    defined(environmentFromQuery) && !Array.isArray(environmentFromQuery)
+      ? [environmentFromQuery]
+      : environmentFromQuery;
 
-  if (hasAbsolute) {
-    start = getUtcToLocalDateObject(start);
-    end = getUtcToLocalDateObject(end);
-  }
+  const start = hasAbsolute ? getUtcToLocalDateObject(parsedParams.start) : null;
+  const end = hasAbsolute ? getUtcToLocalDateObject(parsedParams.end) : null;
 
   return {
     project,
diff --git a/tests/js/spec/components/organizations/getParams.spec.jsx b/tests/js/spec/components/organizations/getParams.spec.jsx
index d9bc2aba08..1dc0f2c3c7 100644
--- a/tests/js/spec/components/organizations/getParams.spec.jsx
+++ b/tests/js/spec/components/organizations/getParams.spec.jsx
@@ -98,6 +98,10 @@ describe('getParams', function() {
     ).toEqual({statsPeriod: '14d'});
   });
 
+  it('does not return default statsPeriod if `allowEmptyPeriod` option is passed', function() {
+    expect(getParams({}, {allowEmptyPeriod: true})).toEqual({});
+  });
+
   it('should parse utc when it is defined', function() {
     expect(getParams({utc: 'true'})).toEqual({utc: 'true', statsPeriod: '14d'});
     expect(getParams({utc: 'false'})).toEqual({utc: 'false', statsPeriod: '14d'});
