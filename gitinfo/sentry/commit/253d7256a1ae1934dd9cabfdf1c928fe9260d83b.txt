commit 253d7256a1ae1934dd9cabfdf1c928fe9260d83b
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Dec 19 13:27:29 2017 -0800

    feat(ui): Move plugins into a store (#6769)
    
    * feat(ui): Move plugins into a store (wip)
    
    * fix merge
    
    * update snapshots
    
    * add some comments
    
    * add explicit loading state
    
    * cleanup mocks api
    
    * remove pluginnav item component
    
    * fix return types for doUpdate
    
    * fix loading
    
    * add an integration test for plugins + plugins nav
    
    * update snaps after adding `hasConfiguration` to amazon sqs plugin

diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.jsx
index 883f385264..1a22df92d7 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.jsx
@@ -50,6 +50,16 @@ class Client {
     });
   }
 
+  requestPromise(url, options) {
+    return new Promise((resolve, reject) =>
+      this.request(url, {
+        ...options,
+        success: resolve,
+        error: reject,
+      })
+    );
+  }
+
   request(url, options) {
     let response = Client.findMockResponse(url, options);
     if (!response) {
diff --git a/src/sentry/static/sentry/app/actionCreators/plugins.jsx b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
new file mode 100644
index 0000000000..10a7429376
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/plugins.jsx
@@ -0,0 +1,81 @@
+import PluginActions from '../actions/pluginActions';
+import IndicatorStore from '../stores/indicatorStore';
+
+function doUpdate(api, {orgId, projectId, pluginId, update, ...params}) {
+  PluginActions.update(pluginId, update);
+  return api
+    .requestPromise(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
+      ...params,
+    })
+    .then(() => {
+      PluginActions.updateSuccess(pluginId, update);
+    })
+    .catch(err => {
+      PluginActions.updateError(pluginId, update, err);
+      throw err;
+    });
+}
+
+/**
+ * Fetches list of available plugins for a project
+ *
+ * @param {Client} api
+ * @param {object} params
+ * @param {string} params.orgId Organization ID
+ * @param {string} params.projectId Project ID
+ * @param {string} params.pluginId Plugin ID
+ * @param {object} options
+ * @param {boolean} options.noReset Reset will set loading state = true
+ * @return Promise
+ */
+export function fetchPlugins(api, {orgId, projectId}, options) {
+  PluginActions.fetchAll(options);
+  return api
+    .requestPromise(`/projects/${orgId}/${projectId}/plugins/`, {
+      method: 'GET',
+    })
+    .then((data, _, jqXHR) => {
+      PluginActions.fetchAllSuccess(data, {
+        pageLinks: jqXHR && jqXHR.getResponseHeader('Link'),
+      });
+
+      return data;
+    })
+    .catch(err => {
+      PluginActions.fetchAllError(err);
+      throw err;
+    });
+}
+
+/**
+ * Enables a plugin
+ *
+ * @param {Client} api
+ * @param {object} params
+ * @param {string} params.orgId Organization ID
+ * @param {string} params.projectId Project ID
+ * @param {string} params.pluginId Plugin ID
+ * @return Promise
+ */
+export function enablePlugin(api, params) {
+  IndicatorStore.add('Enabling...');
+  return doUpdate(api, {...params, update: {enabled: true}, method: 'POST'})
+    .then(() => IndicatorStore.addSuccess('Plugin was enabled'))
+    .catch(() => IndicatorStore.addError('Unable to enable plugin'));
+}
+
+/**
+ * Disables a plugin
+ *
+ * @param {Client} api
+ * @param {object} params
+ * @param {string} params.orgId Organization ID
+ * @param {string} params.projectId Project ID
+ * @param {string} params.pluginId Plugin ID
+ */
+export function disablePlugin(api, params) {
+  IndicatorStore.add('Disabling...');
+  return doUpdate(api, {...params, update: {enabled: false}, method: 'DELETE'})
+    .then(() => IndicatorStore.addSuccess('Plugin was disabled'))
+    .catch(() => IndicatorStore.addError('Unable to disable plugin'));
+}
diff --git a/src/sentry/static/sentry/app/actions/pluginActions.jsx b/src/sentry/static/sentry/app/actions/pluginActions.jsx
new file mode 100644
index 0000000000..86d6f85985
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/pluginActions.jsx
@@ -0,0 +1,12 @@
+import Reflux from 'reflux';
+
+let PluginActions = Reflux.createActions([
+  'update',
+  'updateError',
+  'updateSuccess',
+  'fetchAll',
+  'fetchAllSuccess',
+  'fetchAllError',
+]);
+
+export default PluginActions;
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index bb68fb5f4c..71c051b214 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -146,6 +146,30 @@ export const NavigationObject = PropTypes.shape({
   ),
 });
 
+export const Plugin = {
+  assets: PropTypes.array,
+  author: PropTypes.shape({
+    url: PropTypes.string,
+    name: PropTypes.string,
+  }),
+  canDisable: PropTypes.bool,
+  contexts: PropTypes.array,
+  doc: PropTypes.string,
+  enabled: PropTypes.bool,
+  hasConfiguration: PropTypes.bool,
+  id: PropTypes.string,
+  isTestable: PropTypes.bool,
+  metadata: PropTypes.object,
+  name: PropTypes.string,
+  shortName: PropTypes.string,
+  slug: PropTypes.string,
+  status: PropTypes.string,
+  type: PropTypes.string,
+  version: PropTypes.string,
+};
+
+export const PluginShape = PropTypes.shape(Plugin);
+
 let SentryTypes = {
   AnyModel: PropTypes.shape({
     id: PropTypes.string.isRequired,
@@ -165,6 +189,8 @@ let SentryTypes = {
   }),
   NavigationObject,
   Member,
+  Plugin,
+  PluginShape,
   User,
 };
 
diff --git a/src/sentry/static/sentry/app/stores/pluginsStore.jsx b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
new file mode 100644
index 0000000000..edd4f4b2be
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/pluginsStore.jsx
@@ -0,0 +1,102 @@
+import Reflux from 'reflux';
+
+import PluginActions from '../actions/pluginActions';
+
+const PluginsStore = Reflux.createStore({
+  getInitialState() {
+    return this.getState();
+  },
+
+  getState() {
+    let {
+      //eslint-disable-next-line no-unused-vars
+      plugins,
+      ...state
+    } = this.state;
+
+    return {
+      ...state,
+      plugins: this.plugins ? Array.from(this.plugins.values()) : [],
+    };
+  },
+
+  init() {
+    this.reset();
+    this.listenTo(PluginActions.fetchAll, this.onFetchAll);
+    this.listenTo(PluginActions.fetchAllSuccess, this.onFetchAllSuccess);
+    this.listenTo(PluginActions.fetchAllError, this.onFetchAllError);
+    this.listenTo(PluginActions.update, this.onUpdate);
+    this.listenTo(PluginActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(PluginActions.updateError, this.onUpdateError);
+  },
+
+  reset() {
+    this.plugins = null;
+    this.state = {
+      loading: true,
+      plugins: [],
+      error: null,
+      pageLinks: null,
+    };
+    this.updating = new Map();
+    return this.state;
+  },
+
+  triggerState() {
+    this.trigger(this.getState());
+  },
+
+  onFetchAll({resetLoading} = {}) {
+    if (resetLoading) {
+      this.state.loading = true;
+      this.state.error = null;
+      this.plugins = null;
+    }
+
+    this.triggerState();
+  },
+
+  onFetchAllSuccess(data, {pageLinks}) {
+    this.plugins = new Map(data.map(plugin => [plugin.id, plugin]));
+    this.state.pageLinks = pageLinks;
+    this.state.loading = false;
+    this.triggerState();
+  },
+
+  onFetchAllError(err) {
+    this.plugins = null;
+    this.state.loading = false;
+    this.state.error = err;
+    this.triggerState();
+  },
+
+  onUpdate(id, updateObj) {
+    if (!this.plugins) return;
+
+    let plugin = this.plugins.get(id);
+    let newPlugin = {
+      ...plugin,
+      ...updateObj,
+    };
+
+    this.plugins.set(id, newPlugin);
+    this.updating.set(id, plugin);
+    this.triggerState();
+  },
+
+  onUpdateSuccess(id, updateObj) {
+    this.updating.delete(id);
+  },
+
+  onUpdateError(id, updateObj, err) {
+    let origPlugin = this.updating.get(id);
+    if (!origPlugin) return;
+
+    this.plugins.set(id, origPlugin);
+    this.updating.delete(id);
+    this.state.error = err;
+    this.triggerState();
+  },
+});
+
+export default PluginsStore;
diff --git a/src/sentry/static/sentry/app/views/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins.jsx
deleted file mode 100644
index a91a150b1e..0000000000
--- a/src/sentry/static/sentry/app/views/projectPlugins.jsx
+++ /dev/null
@@ -1,109 +0,0 @@
-import React from 'react';
-import AsyncView from './asyncView';
-import {t} from '../locale';
-import Link from '../components/link';
-import ExternalLink from '../components/externalLink';
-import Checkbox from '../components/checkbox';
-import IndicatorStore from '../stores/indicatorStore';
-
-export default class ProjectPlugins extends AsyncView {
-  getTitle() {
-    return 'Project Integration Settings';
-  }
-
-  getEndpoints() {
-    let {projectId, orgId} = this.props.params;
-    return [['plugins', `/projects/${orgId}/${projectId}/plugins/`]];
-  }
-
-  handleChange(pluginId, shouldEnable, idx) {
-    let {projectId, orgId} = this.props.params;
-
-    let method = shouldEnable ? 'POST' : 'DELETE';
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-
-    this.setState(() => {
-      let plugins = this.state.plugins.slice();
-      plugins[idx].enabled = shouldEnable;
-      return plugins;
-    });
-
-    this.api.request(`/projects/${orgId}/${projectId}/plugins/${pluginId}/`, {
-      method,
-      success: () => {
-        IndicatorStore.addSuccess(
-          t(`Plugin was ${shouldEnable ? 'enabled' : 'disabled'}`)
-        );
-      },
-      error: () => {
-        IndicatorStore.addError(t('Unable to update plugin'));
-        this.setState(() => {
-          let plugins = this.state.plugins.slice();
-          plugins[idx].enabled = !shouldEnable;
-          return plugins;
-        });
-      },
-      complete: () => IndicatorStore.remove(loadingIndicator),
-    });
-  }
-
-  renderBody() {
-    let {projectId, orgId} = this.props.params;
-
-    return (
-      <div>
-        <h2>{t('Integrations')}</h2>
-
-        <div className="panel panel-default">
-          <table className="table integrations simple">
-            <thead>
-              <tr>
-                <th colSpan={2}>{t('Integration')}</th>
-                <th className="align-right">{t('Enabled')}</th>
-              </tr>
-            </thead>
-            <tbody>
-              {this.state.plugins.map(
-                ({id, name, slug, version, author, hasConfiguration, enabled}, idx) => {
-                  return (
-                    <tr key={id} className={slug}>
-                      <td colSpan={2}>
-                        <div className={`icon-integration icon-${id}`} />
-                        <h5>
-                          {`${name} `}
-                          <span>{version ? `v${version}` : <em>{t('n/a')}</em>}</span>
-                        </h5>
-                        <p>
-                          {author && (
-                            <ExternalLink href={author.url}>{author.name}</ExternalLink>
-                          )}
-                          {hasConfiguration && (
-                            <span>
-                              {' '}
-                              &middot;{' '}
-                              <Link to={`/${orgId}/${projectId}/settings/plugins/${id}`}>
-                                Configure plugin
-                              </Link>
-                            </span>
-                          )}
-                        </p>
-                      </td>
-                      <td className="align-right">
-                        <Checkbox
-                          name={slug}
-                          checked={enabled}
-                          onChange={evt => this.handleChange(id, !enabled, idx)}
-                        />
-                      </td>
-                    </tr>
-                  );
-                }
-              )}
-            </tbody>
-          </table>
-        </div>
-      </div>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/index.jsx b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
new file mode 100644
index 0000000000..f6875deabf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectPlugins/index.jsx
@@ -0,0 +1,41 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import {fetchPlugins, enablePlugin, disablePlugin} from '../../actionCreators/plugins';
+import ApiMixin from '../../mixins/apiMixin';
+import PluginsStore from '../../stores/pluginsStore';
+import ProjectPlugins from './projectPlugins';
+
+const ProjectPluginsContainer = React.createClass({
+  mixins: [ApiMixin, Reflux.connect(PluginsStore, 'store')],
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    fetchPlugins(this.api, this.props.params);
+  },
+
+  handleChange(pluginId, shouldEnable) {
+    let {projectId, orgId} = this.props.params;
+    let actionCreator = shouldEnable ? enablePlugin : disablePlugin;
+    actionCreator(this.api, {projectId, orgId, pluginId});
+  },
+
+  render() {
+    let {store} = this.state;
+
+    return (
+      <ProjectPlugins
+        {...this.props}
+        onError={this.fetchData}
+        onChange={this.handleChange}
+        loading={store.loading}
+        error={store.error}
+        plugins={store.plugins}
+      />
+    );
+  },
+});
+
+export default ProjectPluginsContainer;
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
new file mode 100644
index 0000000000..a486b64062
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPluginRow.jsx
@@ -0,0 +1,64 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../locale';
+import Checkbox from '../../components/checkbox';
+import ExternalLink from '../../components/externalLink';
+import SentryTypes from '../../proptypes';
+
+class ProjectPluginRow extends React.PureComponent {
+  static propTypes = {
+    ...SentryTypes.Plugin,
+    onChange: PropTypes.func,
+    orgId: PropTypes.string,
+    projectId: PropTypes.string,
+  };
+
+  handleChange = () => {
+    let {onChange, id, enabled} = this.props;
+    onChange(id, !enabled);
+  };
+
+  render() {
+    let {
+      orgId,
+      projectId,
+      id,
+      name,
+      slug,
+      version,
+      author,
+      hasConfiguration,
+      enabled,
+    } = this.props;
+
+    return (
+      <tr key={id} className={slug}>
+        <td colSpan={2}>
+          <div className={`icon-integration icon-${id}`} />
+          <h5>
+            {`${name} `}
+            <span>{version ? `v${version}` : <em>{t('n/a')}</em>}</span>
+          </h5>
+          <p>
+            {author && <ExternalLink href={author.url}>{author.name}</ExternalLink>}
+            {hasConfiguration && (
+              <span>
+                {' '}
+                &middot;{' '}
+                <a href={`/${orgId}/${projectId}/settings/plugins/${id}`}>
+                  {t('Configure plugin')}
+                </a>
+              </span>
+            )}
+          </p>
+        </td>
+        <td className="align-right">
+          <Checkbox name={slug} checked={enabled} onChange={this.handleChange} />
+        </td>
+      </tr>
+    );
+  }
+}
+
+export default ProjectPluginRow;
diff --git a/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
new file mode 100644
index 0000000000..ea20e12ded
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectPlugins/projectPlugins.jsx
@@ -0,0 +1,61 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {t} from '../../locale';
+import LoadingIndicator from '../../components/loadingIndicator';
+import ProjectPluginRow from './projectPluginRow';
+import RouteError from '../routeError';
+import SentryTypes from '../../proptypes';
+
+class ProjectPlugins extends React.Component {
+  static propTypes = {
+    plugins: PropTypes.arrayOf(SentryTypes.PluginShape),
+    loading: PropTypes.bool,
+    error: PropTypes.any,
+    onChange: PropTypes.func,
+    onError: PropTypes.func,
+  };
+
+  render() {
+    let {plugins, loading, error, onError, onChange, params} = this.props;
+    let {projectId, orgId} = params;
+    let hasError = error;
+    let isLoading = !hasError && loading;
+
+    return (
+      <div>
+        <h2>{t('Integrations')}</h2>
+
+        {hasError && <RouteError error={error} component={this} onRetry={onError} />}
+        {isLoading && <LoadingIndicator />}
+
+        {!isLoading &&
+          !hasError && (
+            <div className="panel panel-default">
+              <table className="table integrations simple">
+                <thead>
+                  <tr>
+                    <th colSpan={2}>{t('Integration')}</th>
+                    <th className="align-right">{t('Enabled')}</th>
+                  </tr>
+                </thead>
+                <tbody>
+                  {plugins.map(plugin => (
+                    <ProjectPluginRow
+                      key={plugin.id}
+                      projectId={projectId}
+                      orgId={orgId}
+                      {...plugin}
+                      onChange={onChange}
+                    />
+                  ))}
+                </tbody>
+              </table>
+            </div>
+          )}
+      </div>
+    );
+  }
+}
+
+export default ProjectPlugins;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index f3678da521..24282a56ad 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,12 +1,15 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import OrganizationState from '../../mixins/organizationState';
+
+import {fetchPlugins} from '../../actionCreators/plugins';
+import {t} from '../../locale';
 import ApiMixin from '../../mixins/apiMixin';
 import Badge from '../../components/badge';
 import ListLink from '../../components/listLink';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
-import {t} from '../../locale';
+import OrganizationState from '../../mixins/organizationState';
+import PluginNavigation from './pluginNavigation';
 
 const ProjectSettings = React.createClass({
   propTypes: {
@@ -29,8 +32,15 @@ const ProjectSettings = React.createClass({
   },
 
   componentWillMount() {
-    this.props.setProjectNavSection('settings');
+    let {params, setProjectNavSection} = this.props;
+    let {projectId, orgId} = params || {};
+
+    setProjectNavSection('settings');
     this.fetchData();
+
+    // fetch list of plugins, we will also fetch everytime we are routed
+    // to plugins view (e.g. "All Integrations")
+    fetchPlugins(this.api, {projectId, orgId});
   },
 
   componentWillReceiveProps(nextProps) {
@@ -159,13 +169,7 @@ const ProjectSettings = React.createClass({
             <ListLink to={`/${orgId}/${projectId}/settings/plugins/`}>
               {t('All Integrations')}
             </ListLink>
-            {project.plugins.filter(p => p.enabled).map(plugin => {
-              return (
-                <li key={plugin.id}>
-                  <a href={`${settingsUrlRoot}/plugins/${plugin.id}/`}>{plugin.name}</a>
-                </li>
-              );
-            })}
+            <PluginNavigation urlRoot={settingsUrlRoot} />
           </ul>
         </div>
         <div className="col-md-10">
diff --git a/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
new file mode 100644
index 0000000000..2449b7c543
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectSettings/pluginNavigation.jsx
@@ -0,0 +1,30 @@
+import React from 'react';
+import Reflux from 'reflux';
+
+import PluginsStore from '../../stores/pluginsStore';
+
+const PluginNavigation = React.createClass({
+  mixins: [Reflux.connect(PluginsStore, 'store')],
+
+  render() {
+    let {store} = this.state;
+    let {urlRoot} = this.props;
+
+    if (!store || !store.plugins) return null;
+    let enabledPlugins = store.plugins.filter(p => p.enabled && p.hasConfiguration);
+
+    if (!enabledPlugins.length) return null;
+
+    return (
+      <div>
+        {enabledPlugins.map(({id, name}) => (
+          <li key={id}>
+            <a href={`${urlRoot}/plugins/${id}/`}>{name}</a>
+          </li>
+        ))}
+      </div>
+    );
+  },
+});
+
+export default PluginNavigation;
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 131aee66cf..81f0d209d7 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -215,18 +215,22 @@ window.TestStubs = {
   Tags: (...params) => {
     return [{key: 'browser', name: 'Browser'}, {key: 'device', name: 'Device'}];
   },
+  Plugin: (...params) => {
+    return {
+      author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
+      enabled: false,
+      id: 'amazon-sqs',
+      name: 'Amazon SQS',
+      slug: 'amazon-sqs',
+      version: '8.23.0.dev0',
+      assets: [],
+      hasConfiguration: true,
+      canDisable: true,
+    };
+  },
   Plugins: (...params) => {
     return [
-      {
-        author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
-        enabled: false,
-        id: 'amazon-sqs',
-        name: 'Amazon SQS',
-        slug: 'amazon-sqs',
-        version: '8.23.0.dev0',
-        assets: [],
-        canDisable: true,
-      },
+      TestStubs.Plugin(),
       {
         author: {url: 'https://github.com/getsentry/sentry', name: 'Sentry Team'},
         enabled: true,
diff --git a/tests/js/spec/stores/pluginsStore.spec.jsx b/tests/js/spec/stores/pluginsStore.spec.jsx
new file mode 100644
index 0000000000..d372d7472d
--- /dev/null
+++ b/tests/js/spec/stores/pluginsStore.spec.jsx
@@ -0,0 +1,193 @@
+import PluginsStore from 'app/stores/pluginsStore';
+import PluginActions from 'app/actions/pluginActions';
+
+describe('PluginsStore', function() {
+  let sandbox;
+
+  beforeEach(function() {
+    sandbox = sinon.sandbox.create();
+    sandbox.stub(PluginsStore, 'trigger');
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  it('has correct initial state', function() {
+    PluginsStore.reset();
+    expect(PluginsStore.getState()).toEqual({
+      loading: true,
+      error: null,
+      pageLinks: null,
+      plugins: [],
+    });
+  });
+
+  describe('fetchAll', function() {
+    beforeEach(function() {
+      PluginsStore.reset();
+    });
+
+    it('has correct state when all plugins fetched successfully', function() {
+      PluginActions.fetchAll.trigger();
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: true,
+          error: null,
+          pageLinks: null,
+          plugins: [],
+        })
+      ).toBe(true);
+
+      PluginActions.fetchAllSuccess.trigger(TestStubs.Plugins(), {pageLinks: null});
+
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: false,
+          error: null,
+          pageLinks: null,
+          plugins: TestStubs.Plugins(),
+        })
+      ).toBe(true);
+    });
+
+    it('has correct state when error in fetching all plugins', function() {
+      PluginActions.fetchAll.trigger();
+
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: true,
+          error: null,
+          pageLinks: null,
+          plugins: [],
+        })
+      ).toBe(true);
+
+      PluginActions.fetchAllError.trigger({responseJSON: {message: 'Error'}});
+
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: false,
+          error: {responseJSON: {message: 'Error'}},
+          pageLinks: null,
+          plugins: [],
+        })
+      ).toBe(true);
+    });
+
+    it('does not reset loading state on consecutive fetches', function() {
+      PluginActions.fetchAll.trigger();
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: true,
+          error: null,
+          pageLinks: null,
+          plugins: [],
+        })
+      ).toBe(true);
+
+      PluginActions.fetchAllSuccess.trigger(TestStubs.Plugins(), {pageLinks: null});
+
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: false,
+          error: null,
+          pageLinks: null,
+          plugins: TestStubs.Plugins(),
+        })
+      ).toBe(true);
+
+      PluginActions.fetchAll.trigger();
+      expect(
+        PluginsStore.trigger.calledWith({
+          loading: false,
+          error: null,
+          pageLinks: null,
+          plugins: TestStubs.Plugins(),
+        })
+      ).toBe(true);
+    });
+  });
+
+  describe('update', function() {
+    let plugin = TestStubs.Plugin();
+    beforeEach(function() {
+      PluginsStore.reset();
+      PluginsStore.plugins = new Map(TestStubs.Plugins().map(p => [p.id, p]));
+    });
+
+    it('has optimistic state when updating', function() {
+      PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
+
+      let state = PluginsStore.getState();
+      expect(state).toMatchObject({
+        error: null,
+        pageLinks: null,
+      });
+
+      expect(state.plugins[0]).toMatchObject({
+        ...plugin,
+        id: 'amazon-sqs',
+        name: 'Amazon Sqs',
+      });
+
+      // Doesn't update other plugins plz
+      expect(state.plugins[1]).toMatchObject({
+        id: 'github',
+        name: 'GitHub',
+      });
+    });
+
+    it('saves old plugin state', function() {
+      PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
+
+      let state = PluginsStore.getState();
+      expect(state).toMatchObject({
+        error: null,
+        pageLinks: null,
+      });
+
+      expect(PluginsStore.updating.get('amazon-sqs')).toMatchObject({
+        ...plugin,
+        id: 'amazon-sqs',
+        name: 'Amazon SQS',
+      });
+    });
+
+    it('removes old plugin state on successful update', function() {
+      PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
+
+      expect(PluginsStore.updating.get('amazon-sqs')).toMatchObject({
+        ...plugin,
+        id: 'amazon-sqs',
+        name: 'Amazon SQS',
+      });
+
+      PluginActions.updateSuccess.trigger('amazon-sqs');
+
+      expect(PluginsStore.getState().plugins[0]).toMatchObject({
+        id: 'amazon-sqs',
+        name: 'Amazon Sqs',
+      });
+
+      expect(PluginsStore.updating.get('amazon-sqs')).toEqual(undefined);
+    });
+
+    it('restores old plugin state when update has an error', function() {
+      PluginActions.update.trigger('amazon-sqs', {name: 'Amazon Sqs'});
+
+      expect(PluginsStore.getState().plugins[0]).toMatchObject({
+        id: 'amazon-sqs',
+        name: 'Amazon Sqs',
+      });
+
+      PluginActions.updateError.trigger('amazon-sqs');
+
+      expect(PluginsStore.getState().plugins[0]).toMatchObject({
+        id: 'amazon-sqs',
+        name: 'Amazon SQS',
+      });
+      expect(PluginsStore.updating.get('amazon-sqs')).toEqual(undefined);
+    });
+  });
+});
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index f4764c90d5..2e1adc2431 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -129,6 +129,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                 },
                 "canDisable": true,
                 "enabled": false,
+                "hasConfiguration": true,
                 "id": "amazon-sqs",
                 "name": "Amazon SQS",
                 "slug": "amazon-sqs",
@@ -219,6 +220,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                       },
                       "canDisable": true,
                       "enabled": false,
+                      "hasConfiguration": true,
                       "id": "amazon-sqs",
                       "name": "Amazon SQS",
                       "slug": "amazon-sqs",
diff --git a/tests/js/spec/views/__snapshots__/projectPlugins.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPlugins.spec.jsx.snap
deleted file mode 100644
index 023493c94d..0000000000
--- a/tests/js/spec/views/__snapshots__/projectPlugins.spec.jsx.snap
+++ /dev/null
@@ -1,146 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`ProjectPlugins renders 1`] = `
-<ProjectPlugins
-  params={
-    Object {
-      "orgId": "org-slug",
-      "projectId": "project-slug",
-    }
-  }
->
-  <DocumentTitle
-    title="Project Integration Settings"
-  >
-    <div>
-      <h2>
-        Integrations
-      </h2>
-      <div
-        className="panel panel-default"
-      >
-        <table
-          className="table integrations simple"
-        >
-          <thead>
-            <tr>
-              <th
-                colSpan={2}
-              >
-                Integration
-              </th>
-              <th
-                className="align-right"
-              >
-                Enabled
-              </th>
-            </tr>
-          </thead>
-          <tbody>
-            <tr
-              className="amazon-sqs"
-              key="amazon-sqs"
-            >
-              <td
-                colSpan={2}
-              >
-                <div
-                  className="icon-integration icon-amazon-sqs"
-                />
-                <h5>
-                  Amazon SQS 
-                  <span>
-                    v8.23.0.dev0
-                  </span>
-                </h5>
-                <p>
-                  <ExternalLink
-                    href="https://github.com/getsentry/sentry"
-                    rel="noreferrer noopener"
-                    target="_blank"
-                  >
-                    <a
-                      href="https://github.com/getsentry/sentry"
-                      rel="noreferrer noopener"
-                      target="_blank"
-                    >
-                      Sentry Team
-                    </a>
-                  </ExternalLink>
-                </p>
-              </td>
-              <td
-                className="align-right"
-              >
-                <Checkbox
-                  checked={false}
-                  name="amazon-sqs"
-                  onChange={[Function]}
-                >
-                  <input
-                    checked={false}
-                    className="chk-select"
-                    name="amazon-sqs"
-                    onChange={[Function]}
-                    type="checkbox"
-                  />
-                </Checkbox>
-              </td>
-            </tr>
-            <tr
-              className="github"
-              key="github"
-            >
-              <td
-                colSpan={2}
-              >
-                <div
-                  className="icon-integration icon-github"
-                />
-                <h5>
-                  GitHub 
-                  <span>
-                    v8.23.0.dev0
-                  </span>
-                </h5>
-                <p>
-                  <ExternalLink
-                    href="https://github.com/getsentry/sentry"
-                    rel="noreferrer noopener"
-                    target="_blank"
-                  >
-                    <a
-                      href="https://github.com/getsentry/sentry"
-                      rel="noreferrer noopener"
-                      target="_blank"
-                    >
-                      Sentry Team
-                    </a>
-                  </ExternalLink>
-                </p>
-              </td>
-              <td
-                className="align-right"
-              >
-                <Checkbox
-                  checked={true}
-                  name="github"
-                  onChange={[Function]}
-                >
-                  <input
-                    checked={true}
-                    className="chk-select"
-                    name="github"
-                    onChange={[Function]}
-                    type="checkbox"
-                  />
-                </Checkbox>
-              </td>
-            </tr>
-          </tbody>
-        </table>
-      </div>
-    </div>
-  </DocumentTitle>
-</ProjectPlugins>
-`;
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
new file mode 100644
index 0000000000..c4e442bbcb
--- /dev/null
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPlugins.spec.jsx.snap
@@ -0,0 +1,70 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectPlugins renders 1`] = `
+<div>
+  <h2>
+    Integrations
+  </h2>
+  <div
+    className="panel panel-default"
+  >
+    <table
+      className="table integrations simple"
+    >
+      <thead>
+        <tr>
+          <th
+            colSpan={2}
+          >
+            Integration
+          </th>
+          <th
+            className="align-right"
+          >
+            Enabled
+          </th>
+        </tr>
+      </thead>
+      <tbody>
+        <ProjectPluginRow
+          assets={Array []}
+          author={
+            Object {
+              "name": "Sentry Team",
+              "url": "https://github.com/getsentry/sentry",
+            }
+          }
+          canDisable={true}
+          enabled={false}
+          hasConfiguration={true}
+          id="amazon-sqs"
+          key="amazon-sqs"
+          name="Amazon SQS"
+          orgId="org-slug"
+          projectId="project-slug"
+          slug="amazon-sqs"
+          version="8.23.0.dev0"
+        />
+        <ProjectPluginRow
+          assets={Array []}
+          author={
+            Object {
+              "name": "Sentry Team",
+              "url": "https://github.com/getsentry/sentry",
+            }
+          }
+          canDisable={false}
+          enabled={true}
+          id="github"
+          key="github"
+          name="GitHub"
+          orgId="org-slug"
+          projectId="project-slug"
+          slug="github"
+          version="8.23.0.dev0"
+        />
+      </tbody>
+    </table>
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
new file mode 100644
index 0000000000..47089facf3
--- /dev/null
+++ b/tests/js/spec/views/projectPlugins/__snapshots__/projectPluginsRow.spec.jsx.snap
@@ -0,0 +1,50 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`ProjectPluginRow renders 1`] = `
+<tr
+  className="amazon-sqs"
+  key="amazon-sqs"
+>
+  <td
+    colSpan={2}
+  >
+    <div
+      className="icon-integration icon-amazon-sqs"
+    />
+    <h5>
+      Amazon SQS 
+      <span>
+        v8.23.0.dev0
+      </span>
+    </h5>
+    <p>
+      <ExternalLink
+        href="https://github.com/getsentry/sentry"
+        rel="noreferrer noopener"
+        target="_blank"
+      >
+        Sentry Team
+      </ExternalLink>
+      <span>
+         
+        ·
+         
+        <a
+          href="/org-slug/project-slug/settings/plugins/amazon-sqs"
+        >
+          Configure plugin
+        </a>
+      </span>
+    </p>
+  </td>
+  <td
+    className="align-right"
+  >
+    <Checkbox
+      checked={false}
+      name="amazon-sqs"
+      onChange={[Function]}
+    />
+  </td>
+</tr>
+`;
diff --git a/tests/js/spec/views/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/index.spec.jsx
similarity index 52%
rename from tests/js/spec/views/projectPlugins.spec.jsx
rename to tests/js/spec/views/projectPlugins/index.spec.jsx
index 9b40c5cfbb..ddedf105ad 100644
--- a/tests/js/spec/views/projectPlugins.spec.jsx
+++ b/tests/js/spec/views/projectPlugins/index.spec.jsx
@@ -1,8 +1,11 @@
 import React from 'react';
 import {mount} from 'enzyme';
 import ProjectPlugins from 'app/views/projectPlugins';
+import {fetchPlugins, enablePlugin, disablePlugin} from 'app/actionCreators/plugins';
 
-describe('ProjectPlugins', function() {
+jest.mock('app/actionCreators/plugins');
+
+describe('ProjectPluginsContainer', function() {
   let org, project, plugins, wrapper;
 
   beforeEach(function() {
@@ -32,27 +35,28 @@ describe('ProjectPlugins', function() {
       }
     );
   });
-  it('renders', function() {
-    expect(wrapper).toMatchSnapshot();
+
+  it('calls `fetchPlugins` action creator after mount', function() {
+    expect(fetchPlugins).toHaveBeenCalled();
   });
 
-  it('enables plugin', function() {
-    let checkbox = wrapper.find('input[name="amazon-sqs"]');
+  it('calls `enablePlugin` action creator when enabling plugin', function() {
+    let onChange = wrapper.find('ProjectPlugins').prop('onChange');
+
+    expect(enablePlugin).not.toHaveBeenCalled();
 
-    checkbox.simulate('change', {target: {checked: true}});
+    onChange('pluginId', true);
 
-    expect(
-      wrapper.state('plugins').find(plugin => plugin.id === 'amazon-sqs').enabled
-    ).toBe(true);
+    expect(enablePlugin).toHaveBeenCalled();
   });
 
-  it('disables plugin', function() {
-    let checkbox = wrapper.find('input[name="github"]');
+  it('calls `disablePlugin` action creator when disabling plugin', function() {
+    let onChange = wrapper.find('ProjectPlugins').prop('onChange');
 
-    checkbox.simulate('change', {target: {checked: false}});
+    expect(disablePlugin).not.toHaveBeenCalled();
 
-    expect(wrapper.state('plugins').find(plugin => plugin.id === 'github').enabled).toBe(
-      false
-    );
+    onChange('pluginId', false);
+
+    expect(disablePlugin).toHaveBeenCalled();
   });
 });
diff --git a/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
new file mode 100644
index 0000000000..50e634ffbd
--- /dev/null
+++ b/tests/js/spec/views/projectPlugins/pluginNavigation.integration.spec.jsx
@@ -0,0 +1,99 @@
+import React from 'react';
+import {mount} from 'enzyme';
+import ProjectPlugins from 'app/views/projectPlugins';
+import PluginNavigation from 'app/views/projectSettings/pluginNavigation';
+
+jest.mock('app/api');
+
+describe('PluginNavigation Integration', function() {
+  let org, project, plugins, wrapper;
+  let sandbox;
+
+  beforeEach(function() {
+    sandbox = sinon.sandbox.create();
+    org = TestStubs.Organization();
+    project = TestStubs.Project();
+    plugins = TestStubs.Plugins();
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/`,
+      method: 'GET',
+      body: plugins,
+    });
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/amazon-sqs/`,
+      method: 'POST',
+    });
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/plugins/github/`,
+      method: 'DELETE',
+    });
+  });
+
+  afterEach(function() {
+    sandbox.restore();
+  });
+
+  // Integration test with PluginNavigation
+  describe.only('with PluginNavigation', function() {
+    beforeEach(async function() {
+      let params = {orgId: org.slug, projectId: project.slug};
+
+      wrapper = mount(
+        <div>
+          <ProjectPlugins params={params} />
+          <PluginNavigation urlRoot="/" />
+        </div>,
+        {
+          context: {
+            router: TestStubs.router(),
+          },
+        }
+      );
+    });
+
+    it('has no items in <PluginNavigation />', function() {
+      expect(wrapper.find('PluginNavigation a')).toHaveLength(0);
+    });
+
+    /**
+     * This tests that ProjectPlugins and PluginNavigation respond to the same store
+     */
+    it('has Amazon in <PluginNavigation /> after enabling', function(done) {
+      let hasEnabled = false;
+
+      // Yuck, not sure of a better way to test these
+      ProjectPlugins.prototype.componentDidUpdate = function() {
+        try {
+          wrapper.update();
+          if (!hasEnabled && wrapper.find('Checkbox').length) {
+            hasEnabled = true;
+            // Enable first plugin, should be amazon
+            wrapper
+              .find('Checkbox')
+              .first()
+              .simulate('change');
+
+            wrapper.update();
+          }
+        } catch (err) {
+          // eslint-disable-next-line no-console
+          console.error(err);
+        }
+      };
+
+      PluginNavigation.prototype.componentDidUpdate = function() {
+        try {
+          wrapper.update();
+          if (wrapper.find('PluginNavigation a').length) {
+            expect(wrapper.find('PluginNavigation').find('a')).toHaveLength(1);
+            done();
+          }
+        } catch (err) {
+          // eslint-disable-next-line no-console
+          console.error(err);
+        }
+      };
+    });
+  });
+});
diff --git a/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
new file mode 100644
index 0000000000..787f170e2b
--- /dev/null
+++ b/tests/js/spec/views/projectPlugins/projectPlugins.spec.jsx
@@ -0,0 +1,49 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+import ProjectPlugins from 'app/views/projectPlugins/projectPlugins';
+
+describe('ProjectPlugins', function() {
+  let wrapper;
+  let plugins = TestStubs.Plugins();
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let params = {orgId: org.slug, projectId: project.slug};
+
+  it('renders', function() {
+    wrapper = shallow(<ProjectPlugins params={params} plugins={plugins} />);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('has loading state', function() {
+    wrapper = shallow(<ProjectPlugins params={params} loading plugins={[]} />);
+
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
+  });
+
+  it('has error state when plugins=null and loading is true', function() {
+    wrapper = shallow(
+      <ProjectPlugins
+        params={params}
+        plugins={null}
+        loading
+        error={new Error('An error')}
+      />
+    );
+
+    expect(wrapper.find('RouteError')).toHaveLength(1);
+  });
+
+  it('has error state when plugins=[]', function() {
+    wrapper = shallow(
+      <ProjectPlugins
+        params={params}
+        plugins={[]}
+        loading
+        error={new Error('An error')}
+      />
+    );
+
+    expect(wrapper.find('RouteError')).toHaveLength(1);
+  });
+});
diff --git a/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx b/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx
new file mode 100644
index 0000000000..fcf072e19f
--- /dev/null
+++ b/tests/js/spec/views/projectPlugins/projectPluginsRow.spec.jsx
@@ -0,0 +1,26 @@
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+import ProjectPluginRow from 'app/views/projectPlugins/projectPluginRow';
+
+describe('ProjectPluginRow', function() {
+  let wrapper;
+  let plugin = TestStubs.Plugin();
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project();
+  let params = {orgId: org.slug, projectId: project.slug};
+
+  it('renders', function() {
+    wrapper = shallow(<ProjectPluginRow {...params} {...plugin} />);
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('calls `onChange` when clicked', function() {
+    let onChange = jest.fn();
+    wrapper = mount(<ProjectPluginRow {...params} {...plugin} onChange={onChange} />);
+
+    expect(onChange).not.toHaveBeenCalled();
+    wrapper.find('Checkbox').simulate('change');
+    expect(onChange).toHaveBeenCalledWith('amazon-sqs', true);
+  });
+});
