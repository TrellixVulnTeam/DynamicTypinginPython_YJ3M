commit 4e9443e30d72fc97b5b862dcf2a2da8a8c22109c
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Sep 26 19:00:23 2017 -0700

    feat(react): add prop for split layout for separation (#6171)

diff --git a/docs-ui/components/splitLayout.stories.js b/docs-ui/components/splitLayout.stories.js
index fcc49b9449..c2873a2a98 100644
--- a/docs-ui/components/splitLayout.stories.js
+++ b/docs-ui/components/splitLayout.stories.js
@@ -8,7 +8,7 @@ import SplitLayout from 'sentry-ui/splitLayout';
 storiesOf('ComponentLayouts/SplitLayout', module).add(
   'default',
   withInfo('Children elements have equal size')(() => (
-    <SplitLayout style={{backgroundColor: '#fff'}}>
+    <SplitLayout splitWidth={15} style={{backgroundColor: '#fff'}}>
       <div style={{padding: 6, backgroundColor: 'rgba(0, 0, 0, 0.2)'}}>
         Split
       </div>
diff --git a/src/sentry/static/sentry/app/components/splitLayout.jsx b/src/sentry/static/sentry/app/components/splitLayout.jsx
index 8078271648..c1cd65b9c1 100644
--- a/src/sentry/static/sentry/app/components/splitLayout.jsx
+++ b/src/sentry/static/sentry/app/components/splitLayout.jsx
@@ -4,16 +4,25 @@ import classNames from 'classnames';
 import SpreadLayout from './spreadLayout';
 
 // Flexbox, use when you want your children to be equal sizes
-const SplitLayout = ({children, className, responsive, ...props}) => {
-  const cx = classNames('split-layout', className, {
+const SplitLayout = ({children, className, responsive, splitWidth, ...props}) => {
+  let cx = classNames('split-layout', className, {
     'allow-responsive': responsive
   });
+  let childCount = 0;
+  let totalChildren = React.Children.count(children);
 
   return (
     <SpreadLayout {...props} className={cx}>
       {React.Children.map(children, child => {
-        const childProps = (child && child.props) || {};
+        let childProps = (child && child.props) || {};
+        childCount++;
+        let isLastChild = childCount === totalChildren;
+
         return React.cloneElement(child, {
+          style: {
+            marginRight: isLastChild ? undefined : splitWidth,
+            ...((child.props && child.props.style) || {})
+          },
           className: classNames(childProps.className, 'split-layout-child')
         });
       })}
@@ -23,6 +32,9 @@ const SplitLayout = ({children, className, responsive, ...props}) => {
 
 SplitLayout.propTypes = {
   children: PropTypes.node,
+  /** Distance in # of pixels to separate children */
+  splitWidth: PropTypes.number,
+  /** Changes flex-direction to be column on smaller widths */
   responsive: PropTypes.bool
 };
 
diff --git a/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap
index a09a4b9f00..fd22cb5168 100644
--- a/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/splitLayout.spec.jsx.snap
@@ -1,21 +1,73 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
+exports[`SplitLayout renders with a separation width 1`] = `
+<SpreadLayout
+  className="split-layout allow-responsive"
+>
+  <div
+    className="split-layout-child"
+    style={
+      Object {
+        "marginRight": 5,
+      }
+    }
+  >
+    child #1
+  </div>
+  <div
+    className="split-layout-child"
+    style={
+      Object {
+        "marginRight": 5,
+      }
+    }
+  >
+    child #2
+  </div>
+  <div
+    className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
+  >
+    child #3
+  </div>
+</SpreadLayout>
+`;
+
 exports[`SplitLayout renders with multiple children 1`] = `
 <SpreadLayout
   className="split-layout"
 >
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #1
   </div>
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #2
   </div>
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #3
   </div>
@@ -28,6 +80,11 @@ exports[`SplitLayout renders with one child 1`] = `
 >
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child
   </div>
@@ -40,16 +97,31 @@ exports[`SplitLayout renders with responsive property 1`] = `
 >
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #1
   </div>
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #2
   </div>
   <div
     className="split-layout-child"
+    style={
+      Object {
+        "marginRight": undefined,
+      }
+    }
   >
     child #3
   </div>
diff --git a/tests/js/spec/components/splitLayout.spec.jsx b/tests/js/spec/components/splitLayout.spec.jsx
index c6a9518f76..8c669e6de6 100644
--- a/tests/js/spec/components/splitLayout.spec.jsx
+++ b/tests/js/spec/components/splitLayout.spec.jsx
@@ -37,4 +37,16 @@ describe('SplitLayout', function() {
 
     expect(toJson(component)).toMatchSnapshot();
   });
+
+  it('renders with a separation width', function() {
+    let component = shallow(
+      <SplitLayout responsive splitWidth={5}>
+        <div>child #1</div>
+        <div>child #2</div>
+        <div>child #3</div>
+      </SplitLayout>
+    );
+
+    expect(toJson(component)).toMatchSnapshot();
+  });
 });
