commit 1e53431a2b66201e0294fbb6990abd7cb273d720
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Feb 5 15:13:18 2020 -0800

    feat(integration-directory): plugin detailed view (#16821)

diff --git a/src/sentry/api/endpoints/organization_plugins_configs.py b/src/sentry/api/endpoints/organization_plugins_configs.py
index aeac723de6..7f6147b345 100644
--- a/src/sentry/api/endpoints/organization_plugins_configs.py
+++ b/src/sentry/api/endpoints/organization_plugins_configs.py
@@ -105,6 +105,7 @@ class OrganizationPluginsConfigsEndpoint(OrganizationEndpoint):
                         "projectName": project.name,  # TODO(steve): do we need?
                         "enabled": plugin_info["enabled"],
                         "configured": plugin_info["configured"],  # TODO(steve): do we need?
+                        "projectPlatform": project.platform,
                     }
                 )
             serialized_plugins.append(serialized_plugin)
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 01fdb4c9e4..023b18e30f 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -829,6 +829,20 @@ function routes() {
         </Route>
       </Route>
 
+      <Redirect from="plugins/" to="integrations/" />
+      <Route name="Integrations" path="plugins/">
+        <Route
+          name="Integration Details"
+          path=":pluginSlug/"
+          componentPromise={() =>
+            import(
+              /* webpackChunkName: "ConfigureIntegration" */ 'app/views/organizationIntegrations/pluginDetailedView'
+            )
+          }
+          component={errorHandler(LazyLoad)}
+        />
+      </Route>
+
       <Redirect from="sentry-apps/" to="integrations/" />
       <Route name="Integrations" path="sentry-apps/">
         <Route
@@ -842,6 +856,7 @@ function routes() {
           component={errorHandler(LazyLoad)}
         />
       </Route>
+
       <Route name="Integrations" path="integrations/">
         <IndexRoute
           componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5e3c2fed2d..ff838339ad 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -305,20 +305,28 @@ export type PluginNoProject = {
   isHidden: boolean;
   description?: string;
   resourceLinks?: Array<{title: string; url: string}>;
+  features: string[];
+  featureDescriptions: Array<{
+    description: string;
+    featureGate: string;
+  }>;
 };
 
 export type Plugin = PluginNoProject & {
   enabled: boolean;
 };
 
+export type PluginProjectItem = {
+  projectId: string;
+  projectSlug: string;
+  projectName: string;
+  projectPlatform: string | null;
+  enabled: boolean;
+  configured: boolean;
+};
+
 export type PluginWithProjectList = PluginNoProject & {
-  projectList: Array<{
-    projectId: string;
-    projectSlug: string;
-    projectName: string;
-    enabled: boolean;
-    configured: boolean;
-  }>;
+  projectList: PluginProjectItem[];
 };
 
 export type GlobalSelection = {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
new file mode 100644
index 0000000000..35ec29f834
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedPlugin.tsx
@@ -0,0 +1,165 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t} from 'app/locale';
+import Access from 'app/components/acl/access';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import Alert from 'app/components/alert';
+import ProjectBadge from 'app/components/idBadge/projectBadge';
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import {
+  addErrorMessage,
+  addSuccessMessage,
+  addLoadingMessage,
+} from 'app/actionCreators/indicator';
+import {PluginNoProject, PluginProjectItem, Organization, AvatarProject} from 'app/types';
+
+export type Props = {
+  api: Client;
+  plugin: PluginNoProject;
+  projectItem: PluginProjectItem;
+  organization: Organization;
+  onResetConfiguration: (projectId: string) => void;
+  onEnablePlugin: (projectId: string) => void;
+  className?: string;
+};
+
+export class InstalledPlugin extends React.Component<Props> {
+  getConfirmMessage() {
+    return (
+      <React.Fragment>
+        <Alert type="error" icon="icon-circle-exclamation">
+          {t(
+            'Deleting this installation will disable the integration for this project and remove any configurations.'
+          )}
+        </Alert>
+      </React.Fragment>
+    );
+  }
+
+  pluginUpdate = async (data: object) => {
+    const {organization, projectItem, plugin} = this.props;
+    // no try/catch so the caller will have to have it
+    await this.props.api.requestPromise(
+      `/projects/${organization.slug}/${projectItem.projectSlug}/plugins/${plugin.id}/`,
+      {
+        method: 'POST',
+        data,
+      }
+    );
+  };
+
+  handleReset = async () => {
+    try {
+      addLoadingMessage(t('Removing...'));
+      await this.pluginUpdate({reset: true});
+      addSuccessMessage(t('Configuration was removed'));
+      this.props.onResetConfiguration(this.props.projectItem.projectId);
+    } catch (_err) {
+      addErrorMessage(t('Unable to remove configuration'));
+    }
+  };
+
+  handleUninstallClick = () => {
+    //TODO: Analytics
+  };
+
+  enablePlugin = async () => {
+    try {
+      addLoadingMessage(t('Enabling...'));
+      await this.pluginUpdate({enabled: true});
+      addSuccessMessage(t('Configuration was enabled'));
+      this.props.onEnablePlugin(this.props.projectItem.projectId);
+    } catch (_err) {
+      addErrorMessage(t('Unable to enable configuration'));
+    }
+  };
+
+  get projectForBadge(): AvatarProject {
+    //this function returns the project as needed for the ProjectBadge component
+    const {projectItem} = this.props;
+    return {
+      slug: projectItem.projectSlug,
+      platform: projectItem.projectPlatform ? projectItem.projectPlatform : undefined,
+    };
+  }
+
+  render() {
+    const {className, plugin, organization, projectItem} = this.props;
+
+    return (
+      <Container>
+        <Access access={['org:integrations']}>
+          {({hasAccess}) => (
+            <IntegrationFlex className={className}>
+              <IntegrationItemBox>
+                <ProjectBadge project={this.projectForBadge} />
+              </IntegrationItemBox>
+              <div>
+                {!projectItem.enabled ? (
+                  <Button size="small" priority="primary" onClick={this.enablePlugin}>
+                    {t('Enable')}
+                  </Button>
+                ) : (
+                  <StyledButton
+                    borderless
+                    icon="icon-settings"
+                    disabled={!hasAccess}
+                    to={`/settings/${organization.slug}/projects/${projectItem.projectSlug}/plugins/${plugin.id}/`}
+                    data-test-id="integration-configure-button"
+                  >
+                    {t('Configure')}
+                  </StyledButton>
+                )}
+              </div>
+              <div>
+                <Confirm
+                  priority="danger"
+                  onConfirming={this.handleUninstallClick}
+                  disabled={!hasAccess}
+                  confirmText="Delete Installation"
+                  onConfirm={() => this.handleReset()}
+                  message={this.getConfirmMessage()}
+                >
+                  <StyledButton
+                    disabled={!hasAccess}
+                    borderless
+                    icon="icon-trash"
+                    data-test-id="integration-remove-button"
+                  >
+                    {t('Uninstall')}
+                  </StyledButton>
+                </Confirm>
+              </div>
+            </IntegrationFlex>
+          )}
+        </Access>
+      </Container>
+    );
+  }
+}
+
+export default withApi(InstalledPlugin);
+
+const Container = styled('div')`
+  margin: 10px;
+`;
+
+const StyledButton = styled(Button)`
+  color: ${p => p.theme.gray2};
+`;
+
+const IntegrationFlex = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const IntegrationItemBox = styled('div')`
+  flex: 1;
+  box-sizing: border-box;
+  display: flex;
+  flex-direction: row;
+  min-width: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
index 7c1fe6ab1e..7858d60d56 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
@@ -40,7 +40,7 @@ export default class PluginRow extends React.Component<Props> {
             <ProviderDetails>
               <Status enabled={this.isEnabled} />
               <StyledLink
-                to={`/settings/${slug}/plugins/${plugin.slug}?tab=configurations`}
+                to={`/settings/${slug}/plugins/${plugin.slug}/?tab=configurations`}
               >{`${plugin.projectList.length} Configurations`}</StyledLink>
             </ProviderDetails>
           </Container>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx
index 2025d78ef8..f24b84673f 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx
@@ -46,7 +46,7 @@ export default class ProviderRow extends React.Component<Props> {
             <ProviderDetails>
               <Status enabled={this.isEnabled} />
               <StyledLink
-                to={`/settings/${slug}/integrations/${provider.key}?tab=configurations`}
+                to={`/settings/${slug}/integrations/${provider.key}/?tab=configurations`}
               >{`${integrations.length} Configurations`}</StyledLink>
             </ProviderDetails>
           </div>
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
new file mode 100644
index 0000000000..e0bce8935e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -0,0 +1,334 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import {RouteComponentProps} from 'react-router/lib/Router';
+
+import {
+  Organization,
+  PluginWithProjectList,
+  PluginNoProject,
+  PluginProjectItem,
+} from 'app/types';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+import AsyncComponent from 'app/components/asyncComponent';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import Tag from 'app/views/settings/components/tag';
+import Access from 'app/components/acl/access';
+import Tooltip from 'app/components/tooltip';
+import Button from 'app/components/button';
+import InlineSvg from 'app/components/inlineSvg';
+import ExternalLink from 'app/components/links/externalLink';
+import InstalledPlugin from 'app/views/organizationIntegrations/installedPlugin';
+import {openModal} from 'app/actionCreators/modal';
+import ContextPickerModal from 'app/components/contextPickerModal';
+import {getIntegrationFeatureGate} from 'app/utils/integrationUtil';
+import {t} from 'app/locale';
+
+type Tab = 'information' | 'configurations';
+const tabs: Tab[] = ['information', 'configurations'];
+
+type State = {
+  plugins: PluginWithProjectList[];
+  tab: Tab;
+};
+
+type Props = {
+  organization: Organization;
+} & RouteComponentProps<{orgId: string; pluginSlug: string}, {}>;
+
+class PluginDetailedView extends AsyncComponent<
+  Props & AsyncComponent['props'],
+  State & AsyncComponent['state']
+> {
+  componentDidMount() {
+    const {location} = this.props;
+    const value =
+      location.query.tab === 'configurations' ? 'configurations' : 'information';
+
+    // eslint-disable-next-line react/no-did-mount-set-state
+    this.setState({tab: value});
+  }
+
+  getEndpoints(): ([string, string, any] | [string, string])[] {
+    const {orgId, pluginSlug} = this.props.params;
+    return [
+      ['plugins', `/organizations/${orgId}/plugins/configs/?plugins=${pluginSlug}`],
+    ];
+  }
+  get plugin() {
+    return this.state.plugins[0];
+  }
+
+  handleResetConfiguration = (projectId: string) => {
+    //make a copy of our project list
+    const projectList = this.plugin.projectList.slice();
+    //find the index of the project
+    const index = projectList.findIndex(item => item.projectId === projectId);
+    //should match but quit if it doesn't
+    if (index < 0) {
+      return;
+    }
+    //remove from array
+    projectList.splice(index, 1);
+    //update state
+    this.setState({
+      plugins: [{...this.state.plugins[0], projectList}],
+    });
+  };
+
+  handleEnablePlugin = (projectId: string) => {
+    //make a copy of our project list
+    const projectList = this.plugin.projectList.slice();
+    //find the index of the project
+    const index = projectList.findIndex(item => item.projectId === projectId);
+    //should match but quit if it doesn't
+    if (index < 0) {
+      return;
+    }
+
+    //update item in array
+    projectList[index] = {
+      ...projectList[index],
+      enabled: true,
+    };
+
+    //update state
+    this.setState({
+      plugins: [{...this.state.plugins[0], projectList}],
+    });
+  };
+
+  handleAddToProject = () => {
+    const plugin = this.plugin;
+    const {organization, router} = this.props;
+    openModal(
+      ({closeModal, Header, Body}) => (
+        <ContextPickerModal
+          Header={Header}
+          Body={Body}
+          nextPath={`/settings/${organization.slug}/projects/:projectId/plugins/${plugin.id}/`}
+          needProject
+          needOrg={false}
+          onFinish={path => {
+            closeModal();
+            router.push(path);
+          }}
+        />
+      ),
+      {}
+    );
+  };
+
+  onTabChange = (value: Tab) => {
+    this.setState({tab: value});
+  };
+
+  featureTags() {
+    return this.plugin.features.map(feature => (
+      <StyledTag key={feature}>{feature.replace(/-/g, ' ')}</StyledTag>
+    ));
+  }
+
+  mapPluginToProvider() {
+    const plugin = this.plugin;
+    return {
+      key: plugin.slug,
+    };
+  }
+
+  getTabDiplay(tab: Tab) {
+    //we want to show project configurations to make it more clear
+    if (tab === 'configurations') {
+      return 'project configurations';
+    }
+    return tab;
+  }
+
+  renderBody() {
+    const plugin = this.plugin;
+    const {tab} = this.state;
+    const {organization} = this.props;
+
+    // Prepare the features list
+    const features = plugin.featureDescriptions.map(f => ({
+      featureGate: f.featureGate,
+      description: <FeatureListItem>{f.description}</FeatureListItem>,
+    }));
+
+    const {FeatureList, IntegrationFeatures} = getIntegrationFeatureGate();
+    const featureProps = {organization, features};
+
+    return (
+      <React.Fragment>
+        <Flex>
+          <PluginIcon size={60} pluginId={plugin.slug} />
+          <TitleContainer>
+            <Title>{plugin.name}</Title>
+            <Flex>{this.featureTags()}</Flex>
+          </TitleContainer>
+          <IntegrationFeatures {...featureProps}>
+            {({disabled, disabledReason}) => (
+              <div
+                style={{
+                  marginLeft: 'auto',
+                  alignSelf: 'center',
+                }}
+              >
+                {disabled && <DisabledNotice reason={disabledReason} />}
+                <Access organization={organization} access={['org:integrations']}>
+                  {({hasAccess}) => (
+                    <Tooltip
+                      title={t(
+                        'You must be an organization owner, manager or admin to install this.'
+                      )}
+                      disabled={hasAccess}
+                    >
+                      <AddButton
+                        data-test-id="add-button"
+                        disabled={disabled || !hasAccess}
+                        onClick={this.handleAddToProject}
+                        size="small"
+                        priority="primary"
+                      >
+                        {t('Add to Project')}
+                      </AddButton>
+                    </Tooltip>
+                  )}
+                </Access>
+              </div>
+            )}
+          </IntegrationFeatures>
+        </Flex>
+        <ul className="nav nav-tabs border-bottom" style={{paddingTop: '30px'}}>
+          {tabs.map(tabName => (
+            <li
+              key={tabName}
+              className={tab === tabName ? 'active' : ''}
+              onClick={() => this.onTabChange(tabName)}
+            >
+              <a style={{textTransform: 'capitalize'}}>{t(this.getTabDiplay(tabName))}</a>
+            </li>
+          ))}
+        </ul>
+        {tab === 'information' ? (
+          <InformationCard plugin={plugin}>
+            <FeatureList {...featureProps} provider={this.mapPluginToProvider()} />
+          </InformationCard>
+        ) : (
+          <div>
+            {plugin.projectList.map((projectItem: PluginProjectItem) => (
+              <InstalledPlugin
+                key={projectItem.projectId}
+                organization={organization}
+                plugin={plugin}
+                projectItem={projectItem}
+                onResetConfiguration={this.handleResetConfiguration}
+                onEnablePlugin={this.handleEnablePlugin}
+              />
+            ))}
+          </div>
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+const Flex = styled('div')`
+  display: flex;
+`;
+
+const Title = styled('div')`
+  font-weight: bold;
+  font-size: 1.4em;
+  margin-bottom: ${space(1)};
+`;
+
+const TitleContainer = styled('div')`
+  display: flex;
+  align-items: flex-start;
+  flex-direction: column;
+  justify-content: center;
+  padding-left: ${space(2)};
+`;
+
+const StyledTag = styled(Tag)`
+  &:not(:first-child) {
+    margin-left: ${space(0.5)};
+  }
+`;
+
+const Description = styled('div')`
+  font-size: 1.5rem;
+  line-height: 2.1rem;
+  margin-bottom: ${space(2)};
+
+  li {
+    margin-bottom: 6px;
+  }
+`;
+
+const Metadata = styled(Flex)`
+  font-size: 0.9em;
+  margin-bottom: ${space(2)};
+
+  a {
+    margin-left: ${space(1)};
+  }
+`;
+
+const AuthorName = styled('div')`
+  color: ${p => p.theme.gray2};
+  flex: 1;
+`;
+
+const FeatureListItem = styled('span')`
+  line-height: 24px;
+`;
+
+const AddButton = styled(Button)`
+  margin-left: ${space(1)};
+`;
+
+const DisabledNotice = styled(({reason, ...p}: {reason: React.ReactNode}) => (
+  <div
+    style={{
+      flex: 1,
+      alignItems: 'center',
+    }}
+    {...p}
+  >
+    <InlineSvg src="icon-circle-exclamation" size="1.5em" />
+    <div style={{marginLeft: `${space(1)}`}}>{reason}</div>
+  </div>
+))`
+  color: ${p => p.theme.red};
+  font-size: 0.9em;
+`;
+
+type InformationCardProps = {
+  children: React.ReactNode;
+  plugin: PluginNoProject;
+};
+
+const InformationCard = ({children, plugin}: InformationCardProps) => {
+  return (
+    <React.Fragment>
+      <Description>{plugin.description}</Description>
+      {children}
+      <Metadata>
+        {plugin.author && <AuthorName>{t('By %s', plugin.author.name)}</AuthorName>}
+        <div>
+          {/** TODO: May want to make resource links have same title as global integrations */}
+          {plugin.resourceLinks &&
+            plugin.resourceLinks.map(({title, url}) => (
+              <ExternalLink key={url} href={url}>
+                {title}
+              </ExternalLink>
+            ))}
+        </div>
+      </Metadata>
+    </React.Fragment>
+  );
+};
+
+export default withOrganization(PluginDetailedView);
diff --git a/tests/sentry/api/endpoints/test_organization_plugins_configs.py b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
index 8662df971f..e1c15577b4 100644
--- a/tests/sentry/api/endpoints/test_organization_plugins_configs.py
+++ b/tests/sentry/api/endpoints/test_organization_plugins_configs.py
@@ -9,7 +9,7 @@ class OrganizationPluginsTest(APITestCase):
     def setUp(self):
         self.projectA = self.create_project()
         self.organization = self.projectA.organization
-        self.projectB = self.create_project(organization=self.organization)
+        self.projectB = self.create_project(organization=self.organization, platform="react")
 
         self.url = reverse(
             "sentry-api-0-organization-plugins-configs",
@@ -44,6 +44,7 @@ class OrganizationPluginsTest(APITestCase):
                 "projectName": self.projectA.name,
                 "enabled": False,
                 "configured": True,
+                "projectPlatform": None,
             }
         ]
 
@@ -58,6 +59,7 @@ class OrganizationPluginsTest(APITestCase):
                 "projectName": self.projectA.name,
                 "enabled": True,
                 "configured": True,
+                "projectPlatform": None,
             }
         ]
 
@@ -72,6 +74,7 @@ class OrganizationPluginsTest(APITestCase):
             "projectName": self.projectA.name,
             "enabled": False,
             "configured": True,
+            "projectPlatform": None,
         }
         assert filter(lambda x: x["projectId"] == self.projectB.id, projectList)[0] == {
             "projectId": self.projectB.id,
@@ -79,6 +82,7 @@ class OrganizationPluginsTest(APITestCase):
             "projectName": self.projectB.name,
             "enabled": False,
             "configured": True,
+            "projectPlatform": 'react',
         }
 
     def test_query_parameter(self):
