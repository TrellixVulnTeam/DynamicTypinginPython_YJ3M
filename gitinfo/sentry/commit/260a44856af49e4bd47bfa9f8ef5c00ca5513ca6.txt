commit 260a44856af49e4bd47bfa9f8ef5c00ca5513ca6
Author: Kamil Og√≥rek <kamil.ogorek@gmail.com>
Date:   Fri Jan 25 11:16:54 2019 +0100

    feat(sdk): Use current route name as a transaction in captured events (#11532)

diff --git a/src/sentry/static/sentry/app/components/errorBoundary.jsx b/src/sentry/static/sentry/app/components/errorBoundary.jsx
index 37cd0e2739..28355fd59d 100644
--- a/src/sentry/static/sentry/app/components/errorBoundary.jsx
+++ b/src/sentry/static/sentry/app/components/errorBoundary.jsx
@@ -31,12 +31,14 @@ class ErrorBoundary extends React.Component {
 
   componentDidMount() {
     // Listen for route changes so we can clear error
-    this.unlisten = browserHistory.listen(() => this.setState({error: null}));
+    this.unlistenBrowserHistory = browserHistory.listen(() =>
+      this.setState({error: null})
+    );
   }
 
   componentWillUnmount() {
-    if (this.unlisten) {
-      this.unlisten();
+    if (this.unlistenBrowserHistory) {
+      this.unlistenBrowserHistory();
     }
   }
 
diff --git a/src/sentry/static/sentry/app/components/globalModal.jsx b/src/sentry/static/sentry/app/components/globalModal.jsx
index 53d6cc6914..c671ef1495 100644
--- a/src/sentry/static/sentry/app/components/globalModal.jsx
+++ b/src/sentry/static/sentry/app/components/globalModal.jsx
@@ -97,12 +97,12 @@ const GlobalModalContainer = createReactClass({
 
   componentDidMount() {
     // Listen for route changes so we can dismiss modal
-    this.unlisten = browserHistory.listen(() => closeModal());
+    this.unlistenBrowserHistory = browserHistory.listen(() => closeModal());
   },
 
   componentWillUnmount() {
-    if (this.unlisten) {
-      this.unlisten();
+    if (this.unlistenBrowserHistory) {
+      this.unlistenBrowserHistory();
     }
   },
 
diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index 9d2a51f725..1347ddae5c 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -25,6 +25,7 @@ import jQuery from 'jquery';
 import moment from 'moment';
 
 import {metric} from 'app/utils/analytics';
+import * as tracing from 'app/utils/tracing';
 import ConfigStore from 'app/stores/configStore';
 import Main from 'app/main';
 import ajaxCsrfSetup from 'app/utils/ajaxCsrfSetup';
@@ -43,6 +44,14 @@ Sentry.configureScope(scope => {
   if (window.__SENTRY__VERSION) {
     scope.setTag('sentry_version', window.__SENTRY__VERSION);
   }
+
+  // There's no setTransaction API *yet*, so we have to be explicit here
+  scope.addEventProcessor(event => {
+    return {
+      ...event,
+      transaction: tracing.getRoute(),
+    };
+  });
 });
 
 function __raven_deprecated() {
diff --git a/src/sentry/static/sentry/app/main.jsx b/src/sentry/static/sentry/app/main.jsx
index 6b301403b5..56ba68ca7d 100644
--- a/src/sentry/static/sentry/app/main.jsx
+++ b/src/sentry/static/sentry/app/main.jsx
@@ -5,20 +5,10 @@ import {Router, browserHistory} from 'react-router';
 
 import routes from 'app/routes';
 import {loadPreferencesState} from 'app/actionCreators/preferences';
-import * as tracing from 'app/utils/tracing';
 
 class Main extends React.Component {
   componentDidMount() {
     loadPreferencesState();
-
-    tracing.startTransaction();
-    this.unlisten = browserHistory.listen(() => tracing.startTransaction());
-  }
-
-  componentWillUnmount() {
-    if (this.unlisten) {
-      this.unlisten();
-    }
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/utils/tracing.jsx b/src/sentry/static/sentry/app/utils/tracing.jsx
index f805da883b..11c4cf57f8 100644
--- a/src/sentry/static/sentry/app/utils/tracing.jsx
+++ b/src/sentry/static/sentry/app/utils/tracing.jsx
@@ -2,6 +2,7 @@ import {uniqueId} from './guid';
 
 let spanId = null;
 let transactionId = null;
+let route = null;
 
 export function startTransaction() {
   spanId = uniqueId();
@@ -15,6 +16,15 @@ export function startTransaction() {
   return {spanId, transactionId};
 }
 
+export function setRoute(currentRoute) {
+  route = currentRoute;
+  return route;
+}
+
+export function getRoute() {
+  return route;
+}
+
 export function getTransactionId() {
   if (!transactionId) startTransaction();
   return transactionId;
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 919affd6a0..dd07b07c5b 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -6,6 +6,7 @@ import React from 'react';
 import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
 import keydown from 'react-keydown';
+import {withRouter} from 'react-router';
 
 import {openCommandPalette} from 'app/actionCreators/modal';
 import {t} from 'app/locale';
@@ -22,6 +23,8 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 import NewsletterConsent from 'app/views/newsletterConsent';
 import OrganizationsStore from 'app/stores/organizationsStore';
 import theme from 'app/utils/theme';
+import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
+import * as tracing from 'app/utils/tracing';
 
 function getAlertTypeForProblem(problem) {
   switch (problem.severity) {
@@ -35,6 +38,10 @@ function getAlertTypeForProblem(problem) {
 const App = createReactClass({
   displayName: 'App',
 
+  propTypes: {
+    routes: PropTypes.array,
+  },
+
   childContextTypes: {
     location: PropTypes.object,
   },
@@ -127,10 +134,27 @@ const App = createReactClass({
     });
   },
 
+  componentDidMount() {
+    this.updateTracing();
+  },
+
+  componentDidUpdate() {
+    this.updateTracing();
+  },
+
   componentWillUnmount() {
     OrganizationsStore.load([]);
   },
 
+  updateTracing() {
+    tracing.startTransaction();
+
+    const route = getRouteStringFromRoutes(this.props.routes);
+    if (route) {
+      tracing.setRoute(route);
+    }
+  },
+
   onConfigStoreChange(config) {
     let newState = {};
     if (config.needsUpgrade !== undefined) newState.needsUpgrade = config.needsUpgrade;
@@ -204,4 +228,4 @@ const App = createReactClass({
   },
 });
 
-export default App;
+export default withRouter(App);
