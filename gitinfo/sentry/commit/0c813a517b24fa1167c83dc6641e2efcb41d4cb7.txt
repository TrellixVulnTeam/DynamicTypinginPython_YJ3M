commit 0c813a517b24fa1167c83dc6641e2efcb41d4cb7
Author: Mark Story <mark@sentry.io>
Date:   Mon Jun 15 16:00:09 2020 -0400

    fix(discover) Scope release markers to the current date window (#19371)
    
    If an org does many releases, they could easily have more than 100
    releases in 90 days. Then when looking at results from 30-60 days they
    would get no release data. Furthermore, we do requests and throw the
    results away. This also helps improve release marker performance for
    7 and 14 day windows by fetching only the releases that will show up.

diff --git a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
index 58307680cc..fd52da99a7 100644
--- a/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
+++ b/src/sentry/static/sentry/app/components/charts/eventsChart.tsx
@@ -345,7 +345,14 @@ class EventsChart extends React.Component<Props> {
     if (!disableReleases) {
       const previousChart = chartImplementation;
       chartImplementation = chartProps => (
-        <ReleaseSeries utc={utc} api={api} projects={projects}>
+        <ReleaseSeries
+          utc={utc}
+          period={period}
+          start={start}
+          end={end}
+          api={api}
+          projects={projects}
+        >
           {({releaseSeries}) => previousChart({...chartProps, releaseSeries})}
         </ReleaseSeries>
       );
diff --git a/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
index f9e43ab00c..4f6480dd2e 100644
--- a/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
+++ b/src/sentry/static/sentry/app/components/charts/releaseSeries.jsx
@@ -16,11 +16,13 @@ import {formatVersion} from 'app/utils/formatters';
 
 // This is not an exported action/function because releases list uses AsyncComponent
 // and this is not re-used anywhere else afaict
-function getOrganizationReleases(api, organization, projects = null) {
+function getOrganizationReleases(api, organization, conditions = null) {
   const query = {};
-  if (projects) {
-    query.project = projects;
-  }
+  Object.keys(conditions).forEach(key => {
+    if (conditions[key]) {
+      query[key] = conditions[key];
+    }
+  });
   return api.requestPromise(`/organizations/${organization.slug}/releases/`, {
     method: 'GET',
     query,
@@ -34,6 +36,9 @@ class ReleaseSeries extends React.Component {
     organization: SentryTypes.Organization,
     projects: PropTypes.arrayOf(PropTypes.number),
 
+    period: PropTypes.string,
+    start: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),
+    end: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.string]),
     utc: PropTypes.bool,
     // Array of releases, if empty, component will fetch releases itself
     releases: PropTypes.arrayOf(SentryTypes.Release),
@@ -64,9 +69,10 @@ class ReleaseSeries extends React.Component {
   }
 
   fetchData() {
-    const {api, organization, projects} = this.props;
+    const {api, organization, projects, period, start, end} = this.props;
 
-    getOrganizationReleases(api, organization, projects)
+    const conditions = {start, end, project: projects, statsPeriod: period};
+    getOrganizationReleases(api, organization, conditions)
       .then(releases => {
         this.setReleasesWithSeries(releases);
       })
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx
index 95d7bbb2d9..b3485b3b9e 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/durationChart.tsx
@@ -154,7 +154,14 @@ class DurationChart extends React.Component<Props> {
                   : [];
 
                 return (
-                  <ReleaseSeries utc={utc} api={api} projects={project}>
+                  <ReleaseSeries
+                    start={start}
+                    end={end}
+                    period={statsPeriod}
+                    utc={utc}
+                    api={api}
+                    projects={project}
+                  >
                     {({releaseSeries}) => (
                       <TransitionChart loading={loading} reloading={reloading}>
                         <TransparentLoadingMask visible={reloading} />
diff --git a/tests/js/spec/components/charts/releaseSeries.spec.jsx b/tests/js/spec/components/charts/releaseSeries.spec.jsx
index 93922e9a02..10480980fd 100644
--- a/tests/js/spec/components/charts/releaseSeries.spec.jsx
+++ b/tests/js/spec/components/charts/releaseSeries.spec.jsx
@@ -62,6 +62,42 @@ describe('ReleaseSeries', function() {
     );
   });
 
+  it('fetches releases with start and end dates', async function() {
+    const wrapper = mount(
+      <ReleaseSeries start="2020-01-01" end="2020-01-31">
+        {renderFunc}
+      </ReleaseSeries>,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(releasesMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        query: {start: '2020-01-01', end: '2020-01-31'},
+      })
+    );
+  });
+
+  it('fetches releases with period', async function() {
+    const wrapper = mount(
+      <ReleaseSeries period="14d">{renderFunc}</ReleaseSeries>,
+      routerContext
+    );
+
+    await tick();
+    wrapper.update();
+
+    expect(releasesMock).toHaveBeenCalledWith(
+      expect.anything(),
+      expect.objectContaining({
+        query: {statsPeriod: '14d'},
+      })
+    );
+  });
+
   it('generates an eCharts `markLine` series from releases', async function() {
     const wrapper = mount(<ReleaseSeries>{renderFunc}</ReleaseSeries>, routerContext);
 
