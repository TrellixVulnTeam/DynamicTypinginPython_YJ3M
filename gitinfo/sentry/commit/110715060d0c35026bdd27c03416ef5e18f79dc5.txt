commit 110715060d0c35026bdd27c03416ef5e18f79dc5
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed Jul 8 12:32:52 2020 +0200

    Ref(debugMeta): Convert debugmeta to typescript (#19759)

diff --git a/src/sentry/static/sentry/app/components/debugFileFeature.tsx b/src/sentry/static/sentry/app/components/debugFileFeature.tsx
index f0df590bf1..18c336e971 100644
--- a/src/sentry/static/sentry/app/components/debugFileFeature.tsx
+++ b/src/sentry/static/sentry/app/components/debugFileFeature.tsx
@@ -24,7 +24,7 @@ const FEATURE_TOOLTIPS = {
 
 type Props = {
   feature: 'symtab' | 'debug' | 'unwind' | 'sources';
-  available?: true;
+  available?: boolean;
 };
 
 const DebugFileFeature = ({available, feature}: Props) => {
@@ -54,6 +54,10 @@ const DebugFileFeature = ({available, feature}: Props) => {
   );
 };
 
+DebugFileFeature.defaultProps = {
+  available: true,
+};
+
 DebugFileFeature.propTypes = {
   available: PropTypes.bool,
   feature: PropTypes.oneOf(Object.keys(FEATURE_TOOLTIPS)).isRequired,
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 333fbe1964..4c71d9c02f 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -7,7 +7,7 @@ import {logException} from 'app/utils/logging';
 import {objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
 import CspInterface from 'app/components/events/interfaces/csp';
-import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
+import DebugMetaInterface from 'app/components/events/interfaces/debugMeta';
 import EventAttachments from 'app/components/events/eventAttachments';
 import EventCause from 'app/components/events/eventCause';
 import EventCauseEmpty from 'app/components/events/eventCauseEmpty';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/debugImage.tsx b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/debugImage.tsx
new file mode 100644
index 0000000000..ffb3e04364
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/debugImage.tsx
@@ -0,0 +1,338 @@
+import isNil from 'lodash/isNil';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import Access from 'app/components/acl/access';
+import Button from 'app/components/button';
+import DebugFileFeature from 'app/components/debugFileFeature';
+import {PanelItem} from 'app/components/panels';
+import Tooltip from 'app/components/tooltip';
+import {formatAddress, getImageRange} from 'app/components/events/interfaces/utils';
+import {t} from 'app/locale';
+import {IconSearch} from 'app/icons';
+import {Organization, Project} from 'app/types';
+import InlineSvg from 'app/components/inlineSvg';
+
+import {getFileName, combineStatus} from './utils';
+
+type Status = ReturnType<typeof combineStatus>;
+
+const IMAGE_ADDR_LEN = 12;
+
+function getImageStatusText(status: Status) {
+  switch (status) {
+    case 'found':
+      return t('ok');
+    case 'unused':
+      return t('unused');
+    case 'missing':
+      return t('missing');
+    case 'malformed':
+    case 'fetching_failed':
+    case 'timeout':
+    case 'other':
+      return t('failed');
+    default:
+      return null;
+  }
+}
+
+function getImageStatusDetails(status: Status) {
+  switch (status) {
+    case 'found':
+      return t('Debug information for this image was found and successfully processed.');
+    case 'unused':
+      return t('The image was not required for processing the stack trace.');
+    case 'missing':
+      return t('No debug information could be found in any of the specified sources.');
+    case 'malformed':
+      return t('The debug information file for this image failed to process.');
+    case 'timeout':
+    case 'fetching_failed':
+      return t('The debug information file for this image could not be downloaded.');
+    case 'other':
+      return t('An internal error occurred while handling this image.');
+    default:
+      return null;
+  }
+}
+
+type Props = {
+  image: Image;
+  showDetails: boolean;
+  style?: React.CSSProperties;
+  orgId?: Organization['id'];
+  projectId?: Project['id'];
+};
+
+type DebugStatus = ReturnType<typeof combineStatus>;
+
+type Image = {
+  code_id: string;
+  code_file: string;
+  debug_id: string;
+  debug_file: string;
+  features: {
+    has_sources: boolean;
+    has_debug_info: boolean;
+    has_unwind_info: boolean;
+    has_symbols: boolean;
+  };
+  image_addr: string;
+  image_size: number;
+  type: string;
+  debug_status?: DebugStatus;
+  unwind_status?: DebugStatus;
+  image_vmaddr?: string;
+  arch?: string;
+};
+
+const DebugImage = React.memo(({image, orgId, projectId, showDetails, style}: Props) => {
+  const getSettingsLink = () => {
+    if (!orgId || !projectId || !image.debug_id) {
+      return null;
+    }
+    return `/settings/${orgId}/projects/${projectId}/debug-symbols/?query=${image.debug_id}`;
+  };
+
+  const renderStatus = (title: string, status: DebugStatus) => {
+    if (isNil(status)) {
+      return null;
+    }
+
+    const text = getImageStatusText(status);
+    if (!text) {
+      return null;
+    }
+
+    return (
+      <SymbolicationStatus>
+        <Tooltip title={getImageStatusDetails(status)}>
+          <span>
+            <ImageProp>{title}</ImageProp>: {text}
+          </span>
+        </Tooltip>
+      </SymbolicationStatus>
+    );
+  };
+
+  const combinedStatus = combineStatus(image?.debug_status, image.unwind_status);
+  const [startAddress, endAddress] = getImageRange(image);
+
+  const renderIconElement = () => {
+    switch (combinedStatus) {
+      case 'unused':
+        return <ImageIcon type="muted" src="icon-circle-empty" />;
+      case 'found':
+        return <ImageIcon type="success" src="icon-circle-check" />;
+      default:
+        return <ImageIcon type="error" src="icon-circle-exclamation" />;
+    }
+  };
+
+  const codeFile = getFileName(image.code_file);
+  const debugFile = image.debug_file && getFileName(image.debug_file);
+
+  // The debug file is only realistically set on Windows. All other platforms
+  // either leave it empty or set it to a filename thats equal to the code
+  // file name. In this case, do not show it.
+  const showDebugFile = debugFile && codeFile !== debugFile;
+
+  // Availability only makes sense if the image is actually referenced.
+  // Otherwise, the processing pipeline does not resolve this kind of
+  // information and it will always be false.
+  const showAvailability = !isNil(image.features) && combinedStatus !== 'unused';
+
+  // The code id is sometimes missing, and sometimes set to the equivalent of
+  // the debug id (e.g. for Mach symbols). In this case, it is redundant
+  // information and we do not want to show it.
+  const showCodeId = !!image.code_id && image.code_id !== image.debug_id;
+
+  // Old versions of the event pipeline did not store the symbolication
+  // status. In this case, default to display the debug_id instead of stack
+  // unwind information.
+  const legacyRender = isNil(image.debug_status);
+
+  const debugIdElement = (
+    <ImageSubtext>
+      <ImageProp>{t('Debug ID')}</ImageProp>: <Formatted>{image.debug_id}</Formatted>
+    </ImageSubtext>
+  );
+
+  return (
+    <DebugImageItem style={style}>
+      <ImageInfoGroup>{renderIconElement()}</ImageInfoGroup>
+
+      <ImageInfoGroup>
+        <Formatted>{formatAddress(startAddress, IMAGE_ADDR_LEN)}</Formatted> &ndash;{' '}
+        <AddressDivider />
+        <Formatted>{formatAddress(endAddress, IMAGE_ADDR_LEN)}</Formatted>
+      </ImageInfoGroup>
+
+      <ImageInfoGroup fullWidth>
+        <ImageTitle>
+          <Tooltip title={image.code_file}>
+            <CodeFile>{codeFile}</CodeFile>
+          </Tooltip>
+          {showDebugFile && <DebugFile> ({debugFile})</DebugFile>}
+        </ImageTitle>
+
+        {legacyRender ? (
+          debugIdElement
+        ) : (
+          <StatusLine>
+            {renderStatus(t('Stack Unwinding'), image.unwind_status)}
+            {renderStatus(t('Symbolication'), image.debug_status)}
+          </StatusLine>
+        )}
+
+        {showDetails && (
+          <React.Fragment>
+            {showAvailability && (
+              <ImageSubtext>
+                <ImageProp>{t('Availability')}</ImageProp>:
+                <DebugFileFeature
+                  feature="symtab"
+                  available={image.features.has_symbols}
+                />
+                <DebugFileFeature
+                  feature="debug"
+                  available={image.features.has_debug_info}
+                />
+                <DebugFileFeature
+                  feature="unwind"
+                  available={image.features.has_unwind_info}
+                />
+                <DebugFileFeature
+                  feature="sources"
+                  available={image.features.has_sources}
+                />
+              </ImageSubtext>
+            )}
+
+            {!legacyRender && debugIdElement}
+
+            {showCodeId && (
+              <ImageSubtext>
+                <ImageProp>{t('Code ID')}</ImageProp>:{' '}
+                <Formatted>{image.code_id}</Formatted>
+              </ImageSubtext>
+            )}
+
+            {!!image.arch && (
+              <ImageSubtext>
+                <ImageProp>{t('Architecture')}</ImageProp>: {image.arch}
+              </ImageSubtext>
+            )}
+          </React.Fragment>
+        )}
+      </ImageInfoGroup>
+
+      <Access access={['project:releases']}>
+        {({hasAccess}) => {
+          if (!hasAccess) {
+            return null;
+          }
+          const settingsUrl = getSettingsLink();
+          if (!settingsUrl) {
+            return null;
+          }
+          return (
+            <ImageActions>
+              <Tooltip title={t('Search for debug files in settings')}>
+                <Button size="xsmall" icon={<IconSearch size="xs" />} to={settingsUrl} />
+              </Tooltip>
+            </ImageActions>
+          );
+        }}
+      </Access>
+    </DebugImageItem>
+  );
+});
+
+export default DebugImage;
+
+const DebugImageItem = styled(PanelItem)`
+  font-size: ${p => p.theme.fontSizeSmall};
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: grid;
+    grid-gap: ${space(1)};
+    position: relative;
+  }
+`;
+
+const Formatted = styled('span')`
+  font-family: ${p => p.theme.text.familyMono};
+`;
+
+const ImageInfoGroup = styled('div')<{fullWidth?: boolean}>`
+  margin-left: 1em;
+  flex-grow: ${p => (p.fullWidth ? 1 : null)};
+
+  &:first-child {
+    @media (min-width: ${p => p.theme.breakpoints[0]}) {
+      margin-left: 0;
+    }
+  }
+`;
+
+const ImageActions = styled(ImageInfoGroup)`
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    position: absolute;
+    top: 15px;
+    right: 20px;
+  }
+`;
+
+const ImageTitle = styled('div')`
+  font-size: ${p => p.theme.fontSizeLarge};
+`;
+
+const CodeFile = styled('span')`
+  font-weight: bold;
+`;
+
+const DebugFile = styled('span')`
+  color: ${p => p.theme.gray500};
+`;
+
+const ImageSubtext = styled('div')`
+  color: ${p => p.theme.gray500};
+`;
+
+const ImageProp = styled('span')`
+  font-weight: bold;
+`;
+
+const StatusLine = styled(ImageSubtext)`
+  display: flex;
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: grid;
+  }
+`;
+
+const AddressDivider = styled('br')`
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    display: none;
+  }
+`;
+
+const ImageIcon = styled(InlineSvg)<{type: 'muted' | 'success' | 'error'}>`
+  font-size: ${p => p.theme.fontSizeLarge};
+  color: ${p => p.theme.alert[p.type].iconColor};
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    font-size: ${p => p.theme.fontSizeExtraLarge};
+    margin-bottom: ${space(0.5)};
+  }
+`;
+
+const SymbolicationStatus = styled('span')`
+  flex-grow: 1;
+  flex-basis: 0;
+  margin-right: 1em;
+
+  ${ImageIcon} {
+    margin-left: 0.66ex;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx
new file mode 100644
index 0000000000..add8cc1cdb
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/index.tsx
@@ -0,0 +1,323 @@
+import isNil from 'lodash/isNil';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import space from 'app/styles/space';
+import GuideAnchor from 'app/components/assistant/guideAnchor';
+import Button from 'app/components/button';
+import Checkbox from 'app/components/checkbox';
+import EventDataSection from 'app/components/events/eventDataSection';
+import {Panel, PanelBody} from 'app/components/panels';
+import DebugMetaStore, {DebugMetaActions} from 'app/stores/debugMetaStore';
+import SearchBar from 'app/components/searchBar';
+import {parseAddress, getImageRange} from 'app/components/events/interfaces/utils';
+import ImageForBar from 'app/components/events/interfaces/imageForBar';
+import {t, tct} from 'app/locale';
+import ClippedBox from 'app/components/clippedBox';
+import {IconWarning} from 'app/icons';
+import {Organization, Project, Event, Frame} from 'app/types';
+
+import DebugImage from './debugImage';
+import {getFileName} from './utils';
+
+const MIN_FILTER_LEN = 3;
+const DEFAULT_CLIP_HEIGHT = 560;
+
+type Image = React.ComponentProps<typeof DebugImage>['image'];
+
+type DefaultProps = {
+  data: {
+    images: Array<Image>;
+  };
+};
+
+type Props = DefaultProps & {
+  event: Event;
+  orgId: Organization['id'];
+  projectId: Project['id'];
+};
+
+type State = {
+  showUnused: boolean;
+  showDetails: boolean;
+  filter: string;
+};
+
+class DebugMeta extends React.PureComponent<Props, State> {
+  state: State = {
+    showUnused: false,
+    showDetails: false,
+    filter: '',
+  };
+
+  componentDidMount() {
+    this.unsubscribeFromStore = DebugMetaStore.listen(this.onStoreChange);
+  }
+  componentWillUnmount() {
+    this.unsubscribeFromStore();
+  }
+
+  unsubscribeFromStore: any;
+
+  onStoreChange = (store: {filter: string}) => {
+    this.setState({
+      filter: store.filter,
+    });
+  };
+
+  filterImage(image: Image) {
+    const {showUnused, filter} = this.state;
+
+    if (!filter || filter.length < MIN_FILTER_LEN) {
+      if (showUnused) {
+        return true;
+      }
+
+      // A debug status of `null` indicates that this information is not yet
+      // available in an old event. Default to showing the image.
+      if (image.debug_status !== 'unused') {
+        return true;
+      }
+
+      // An unwind status of `null` indicates that symbolicator did not unwind.
+      // Ignore the status in this case.
+      if (!isNil(image.unwind_status) && image.unwind_status !== 'unused') {
+        return true;
+      }
+
+      return false;
+    }
+
+    // When searching for an address, check for the address range of the image
+    // instead of an exact match.
+    if (filter.indexOf('0x') === 0) {
+      const needle = parseAddress(filter);
+      if (needle > 0) {
+        const [startAddress, endAddress] = getImageRange(image);
+        return needle >= startAddress && needle < endAddress;
+      }
+    }
+
+    return (
+      // Prefix match for identifiers
+      (image.code_id || '').indexOf(filter) === 0 ||
+      (image.debug_id || '').indexOf(filter) === 0 ||
+      // Any match for file paths
+      (image.code_file || '').indexOf(filter) >= 0 ||
+      (image.debug_file || '').indexOf(filter) >= 0
+    );
+  }
+
+  handleChangeShowUnused = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const showUnused = event.target.checked;
+    this.setState({showUnused});
+  };
+
+  handleShowUnused = () => {
+    this.setState({showUnused: true});
+  };
+
+  handleChangeShowDetails = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const showDetails = event.target.checked;
+    this.setState({showDetails});
+  };
+
+  handleChangeFilter = (value = '') => {
+    DebugMetaActions.updateFilter(value);
+  };
+
+  isValidImage(image: Image) {
+    // in particular proguard images do not have a code file, skip them
+    if (image === null || image.code_file === null || image.type === 'proguard') {
+      return false;
+    }
+
+    if (getFileName(image.code_file) === 'dyld_sim') {
+      // this is only for simulator builds
+      return false;
+    }
+
+    return true;
+  }
+
+  getDebugImages() {
+    const {
+      data: {images},
+    } = this.props;
+
+    // There are a bunch of images in debug_meta that are not relevant to this
+    // component. Filter those out to reduce the noise. Most importantly, this
+    // includes proguard images, which are rendered separately.
+    const filtered = images.filter(image => this.isValidImage(image));
+
+    // Sort images by their start address. We assume that images have
+    // non-overlapping ranges. Each address is given as hex string (e.g.
+    // "0xbeef").
+    filtered.sort((a, b) => parseAddress(a.image_addr) - parseAddress(b.image_addr));
+
+    return filtered;
+  }
+
+  getNoImagesMessage(images: Array<Image>) {
+    const {filter, showUnused} = this.state;
+
+    if (images.length === 0) {
+      return t('No loaded images available.');
+    }
+
+    if (!showUnused && !filter) {
+      return tct(
+        'No images are referenced in the stack trace. [toggle: Show Unreferenced]',
+        {
+          toggle: <Button priority="link" onClick={this.handleShowUnused} />,
+        }
+      );
+    }
+
+    return t('Sorry, no images match your query.');
+  }
+
+  renderToolbar() {
+    const {filter, showDetails, showUnused} = this.state;
+    return (
+      <ToolbarWrapper>
+        <Label>
+          <Checkbox checked={showDetails} onChange={this.handleChangeShowDetails} />
+          {t('details')}
+        </Label>
+        <Label>
+          <Checkbox
+            checked={showUnused || !!filter}
+            disabled={!!filter}
+            onChange={this.handleChangeShowUnused}
+          />
+          {t('show unreferenced')}
+        </Label>
+        <SearchInputWrapper>
+          <StyledSearchBar
+            onSearch={this.handleChangeFilter}
+            placeholder={t('Search images\u2026')}
+          />
+        </SearchInputWrapper>
+      </ToolbarWrapper>
+    );
+  }
+
+  render() {
+    // skip null values indicating invalid debug images
+    const images = this.getDebugImages();
+
+    const filteredImages = images.filter(image => this.filterImage(image));
+
+    const frames: Array<Frame> | undefined = this.props.event.entries.find(
+      ({type}) => type === 'exception'
+    )?.data?.values?.[0]?.stacktrace?.frames;
+
+    const foundFrame = frames
+      ? frames.find(frame => frame.instructionAddr === this.state.filter)
+      : undefined;
+
+    return (
+      <StyledEventDataSection
+        type="packages"
+        title={
+          <GuideAnchor target="packages" position="bottom">
+            <h3>{t('Images Loaded')}</h3>
+          </GuideAnchor>
+        }
+        actions={this.renderToolbar()}
+        wrapTitle={false}
+        isCentered
+      >
+        <DebugImagesPanel>
+          <ClippedBox clipHeight={DEFAULT_CLIP_HEIGHT}>
+            <PanelBody>
+              {foundFrame && (
+                <ImageForBar
+                  frame={foundFrame}
+                  onShowAllImages={this.handleChangeFilter}
+                />
+              )}
+              {filteredImages.length > 0 ? (
+                filteredImages.map(image => (
+                  <DebugImage
+                    key={image.debug_id}
+                    image={image}
+                    orgId={this.props.orgId}
+                    projectId={this.props.projectId}
+                    showDetails={this.state.showDetails}
+                  />
+                ))
+              ) : (
+                <EmptyMessage icon={<IconWarning size="xl" />}>
+                  {this.getNoImagesMessage(images)}
+                </EmptyMessage>
+              )}
+            </PanelBody>
+          </ClippedBox>
+        </DebugImagesPanel>
+      </StyledEventDataSection>
+    );
+  }
+}
+
+export default DebugMeta;
+
+const Label = styled('label')`
+  font-weight: normal;
+  margin-right: 1em;
+  margin-bottom: 0;
+
+  > input {
+    margin-right: 1ex;
+  }
+`;
+
+const StyledEventDataSection = styled(EventDataSection)`
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    padding-bottom: ${space(4)};
+  }
+  /* to increase specificity */
+  @media (min-width: ${p => p.theme.breakpoints[0]}) {
+    padding-bottom: ${space(2)};
+  }
+`;
+
+const DebugImagesPanel = styled(Panel)`
+  margin-bottom: ${space(1)};
+  max-height: 600px;
+  overflow-y: auto;
+  overflow-x: hidden;
+`;
+
+const ToolbarWrapper = styled('div')`
+  display: flex;
+  align-items: center;
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    flex-wrap: wrap;
+    margin-top: ${space(1)};
+  }
+`;
+const SearchInputWrapper = styled('div')`
+  max-width: 180px;
+  display: inline-block;
+  @media (max-width: ${p => p.theme.breakpoints[0]}) {
+    width: 100%;
+    max-width: 100%;
+    margin-top: ${space(1)};
+  }
+`;
+// TODO(matej): remove this once we refactor SearchBar to not use css classes
+// - it could accept size as a prop
+const StyledSearchBar = styled(SearchBar)`
+  .search-input {
+    height: 30px;
+  }
+  .search-clear-form {
+    top: 5px !important;
+  }
+  .icon-search {
+    top: 8px;
+  }
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/utils.tsx
new file mode 100644
index 0000000000..167a0e3388
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugMeta/utils.tsx
@@ -0,0 +1,38 @@
+type Status =
+  | 'found'
+  | 'unused'
+  | 'missing'
+  | 'malformed'
+  | 'timeout'
+  | 'fetching_failed'
+  | 'other'
+  | null
+  | undefined;
+
+function getStatusWeight(status: Status) {
+  switch (status) {
+    case null:
+    case undefined:
+    case 'unused':
+      return 0;
+    case 'found':
+      return 1;
+    default:
+      return 2;
+  }
+}
+
+function combineStatus(debugStatus: Status, unwindStatus: Status): Status {
+  const debugWeight = getStatusWeight(debugStatus);
+  const unwindWeight = getStatusWeight(unwindStatus);
+
+  const combined = debugWeight >= unwindWeight ? debugStatus : unwindStatus;
+  return combined || 'unused';
+}
+
+function getFileName(path: string) {
+  const directorySeparator = /^([a-z]:\\|\\\\)/i.test(path) ? '\\' : '/';
+  return path.split(directorySeparator).pop();
+}
+
+export {getFileName, combineStatus};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
deleted file mode 100644
index 4a5fbade81..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ /dev/null
@@ -1,671 +0,0 @@
-import isNil from 'lodash/isNil';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-import isEqual from 'lodash/isEqual';
-
-import space from 'app/styles/space';
-import Access from 'app/components/acl/access';
-import GuideAnchor from 'app/components/assistant/guideAnchor';
-import Button from 'app/components/button';
-import Checkbox from 'app/components/checkbox';
-import DebugFileFeature from 'app/components/debugFileFeature';
-import EventDataSection from 'app/components/events/eventDataSection';
-import InlineSvg from 'app/components/inlineSvg';
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import Tooltip from 'app/components/tooltip';
-import DebugMetaStore, {DebugMetaActions} from 'app/stores/debugMetaStore';
-import SearchBar from 'app/components/searchBar';
-import {
-  formatAddress,
-  parseAddress,
-  getImageRange,
-} from 'app/components/events/interfaces/utils';
-import ImageForBar from 'app/components/events/interfaces/imageForBar';
-import {t, tct} from 'app/locale';
-import SentryTypes from 'app/sentryTypes';
-import {IconSearch} from 'app/icons';
-import ClippedBox from 'app/components/clippedBox';
-
-const IMAGE_ADDR_LEN = 12;
-const MIN_FILTER_LEN = 3;
-
-function getFileName(path) {
-  const directorySeparator = /^([a-z]:\\|\\\\)/i.test(path) ? '\\' : '/';
-  return path.split(directorySeparator).pop();
-}
-
-function getStatusWeight(status) {
-  switch (status) {
-    case null:
-    case undefined:
-    case 'unused':
-      return 0;
-    case 'found':
-      return 1;
-    default:
-      return 2;
-  }
-}
-
-function getImageStatusText(status) {
-  switch (status) {
-    case 'found':
-      return t('ok');
-    case 'unused':
-      return t('unused');
-    case 'missing':
-      return t('missing');
-    case 'malformed':
-    case 'fetching_failed':
-    case 'timeout':
-    case 'other':
-      return t('failed');
-    default:
-      return null;
-  }
-}
-
-function getImageStatusDetails(status) {
-  switch (status) {
-    case 'found':
-      return t('Debug information for this image was found and successfully processed.');
-    case 'unused':
-      return t('The image was not required for processing the stack trace.');
-    case 'missing':
-      return t('No debug information could be found in any of the specified sources.');
-    case 'malformed':
-      return t('The debug information file for this image failed to process.');
-    case 'timeout':
-    case 'fetching_failed':
-      return t('The debug information file for this image could not be downloaded.');
-    case 'other':
-      return t('An internal error occurred while handling this image.');
-    default:
-      return null;
-  }
-}
-
-export const combineStatus = (debugStatus, unwindStatus) => {
-  const debugWeight = getStatusWeight(debugStatus);
-  const unwindWeight = getStatusWeight(unwindStatus);
-
-  const combined = debugWeight >= unwindWeight ? debugStatus : unwindStatus;
-  return combined || 'unused';
-};
-
-class DebugImage extends React.Component {
-  static propTypes = {
-    image: PropTypes.object.isRequired,
-    orgId: PropTypes.string,
-    projectId: PropTypes.string,
-    showDetails: PropTypes.bool.isRequired,
-  };
-
-  shouldComponentUpdate(nextProps) {
-    return (
-      !isEqual(this.props.image, nextProps.image) ||
-      this.props.orgId !== nextProps.orgId ||
-      this.props.projectId !== nextProps.projectId ||
-      this.props.showDetails !== nextProps.showDetails
-    );
-  }
-
-  getSettingsLink(image) {
-    const {orgId, projectId} = this.props;
-    if (!orgId || !projectId || !image.debug_id) {
-      return null;
-    }
-
-    return `/settings/${orgId}/projects/${projectId}/debug-symbols/?query=${image.debug_id}`;
-  }
-
-  renderStatus(title, status) {
-    if (isNil(status)) {
-      return null;
-    }
-
-    const text = getImageStatusText(status);
-    if (!text) {
-      return null;
-    }
-
-    return (
-      <SymbolicationStatus>
-        <Tooltip title={getImageStatusDetails(status)}>
-          <span>
-            <ImageProp>{title}</ImageProp>: {text}
-          </span>
-        </Tooltip>
-      </SymbolicationStatus>
-    );
-  }
-
-  render() {
-    const {image, showDetails} = this.props;
-
-    const combinedStatus = combineStatus(image.debug_status, image.unwind_status);
-    const [startAddress, endAddress] = getImageRange(image);
-
-    let iconElement = null;
-    switch (combinedStatus) {
-      case 'unused':
-        iconElement = <ImageIcon type="muted" src="icon-circle-empty" />;
-        break;
-      case 'found':
-        iconElement = <ImageIcon type="success" src="icon-circle-check" />;
-        break;
-      default:
-        iconElement = <ImageIcon type="error" src="icon-circle-exclamation" />;
-        break;
-    }
-
-    const codeFile = getFileName(image.code_file);
-    const debugFile = image.debug_file && getFileName(image.debug_file);
-
-    // The debug file is only realistically set on Windows. All other platforms
-    // either leave it empty or set it to a filename thats equal to the code
-    // file name. In this case, do not show it.
-    const showDebugFile = debugFile && codeFile !== debugFile;
-
-    // Availability only makes sense if the image is actually referenced.
-    // Otherwise, the processing pipeline does not resolve this kind of
-    // information and it will always be false.
-    const showAvailability = !isNil(image.features) && combinedStatus !== 'unused';
-
-    // The code id is sometimes missing, and sometimes set to the equivalent of
-    // the debug id (e.g. for Mach symbols). In this case, it is redundant
-    // information and we do not want to show it.
-    const showCodeId = !!image.code_id && image.code_id !== image.debug_id;
-
-    // Old versions of the event pipeline did not store the symbolication
-    // status. In this case, default to display the debug_id instead of stack
-    // unwind information.
-    const legacyRender = isNil(image.debug_status);
-
-    const debugIdElement = (
-      <ImageSubtext>
-        <ImageProp>{t('Debug ID')}</ImageProp>: <Formatted>{image.debug_id}</Formatted>
-      </ImageSubtext>
-    );
-
-    return (
-      <DebugImageItem>
-        <ImageInfoGroup>{iconElement}</ImageInfoGroup>
-
-        <ImageInfoGroup>
-          <Formatted>{formatAddress(startAddress, IMAGE_ADDR_LEN)}</Formatted> &ndash;{' '}
-          <AddressDivider />
-          <Formatted>{formatAddress(endAddress, IMAGE_ADDR_LEN)}</Formatted>
-        </ImageInfoGroup>
-
-        <ImageInfoGroup fullWidth>
-          <ImageTitle>
-            <Tooltip title={image.code_file}>
-              <CodeFile>{codeFile}</CodeFile>
-            </Tooltip>
-            {showDebugFile && <DebugFile> ({debugFile})</DebugFile>}
-          </ImageTitle>
-
-          {legacyRender ? (
-            debugIdElement
-          ) : (
-            <StatusLine>
-              {this.renderStatus(t('Stack Unwinding'), image.unwind_status)}
-              {this.renderStatus(t('Symbolication'), image.debug_status)}
-            </StatusLine>
-          )}
-
-          {showDetails && (
-            <React.Fragment>
-              {showAvailability && (
-                <ImageSubtext>
-                  <ImageProp>{t('Availability')}</ImageProp>:
-                  <DebugFileFeature
-                    feature="symtab"
-                    available={image.features.has_symbols}
-                  />
-                  <DebugFileFeature
-                    feature="debug"
-                    available={image.features.has_debug_info}
-                  />
-                  <DebugFileFeature
-                    feature="unwind"
-                    available={image.features.has_unwind_info}
-                  />
-                  <DebugFileFeature
-                    feature="sources"
-                    available={image.features.has_sources}
-                  />
-                </ImageSubtext>
-              )}
-
-              {!legacyRender && debugIdElement}
-
-              {showCodeId && (
-                <ImageSubtext>
-                  <ImageProp>{t('Code ID')}</ImageProp>:{' '}
-                  <Formatted>{image.code_id}</Formatted>
-                </ImageSubtext>
-              )}
-
-              {!!image.arch && (
-                <ImageSubtext>
-                  <ImageProp>{t('Architecture')}</ImageProp>: {image.arch}
-                </ImageSubtext>
-              )}
-            </React.Fragment>
-          )}
-        </ImageInfoGroup>
-
-        <Access access={['project:releases']}>
-          {({hasAccess}) => {
-            if (!hasAccess) {
-              return null;
-            }
-
-            const settingsUrl = this.getSettingsLink(image);
-            if (!settingsUrl) {
-              return null;
-            }
-
-            return (
-              <ImageActions>
-                <Tooltip title={t('Search for debug files in settings')}>
-                  <Button
-                    size="xsmall"
-                    icon={<IconSearch size="xs" />}
-                    to={settingsUrl}
-                  />
-                </Tooltip>
-              </ImageActions>
-            );
-          }}
-        </Access>
-      </DebugImageItem>
-    );
-  }
-}
-
-class DebugMetaInterface extends React.PureComponent {
-  static propTypes = {
-    event: SentryTypes.Event.isRequired,
-    data: PropTypes.object.isRequired,
-    orgId: PropTypes.string,
-    projectId: PropTypes.string,
-  };
-
-  constructor(props) {
-    super(props);
-
-    this.state = {
-      filter: null,
-      showUnused: false,
-      showDetails: false,
-    };
-  }
-
-  componentDidMount() {
-    this.unsubscribeFromStore = DebugMetaStore.listen(this.onStoreChange);
-  }
-  componentWillUnmount() {
-    this.unsubscribeFromStore();
-  }
-  onStoreChange = store => {
-    this.setState({
-      filter: store.filter,
-    });
-  };
-
-  filterImage(image) {
-    const {showUnused, filter} = this.state;
-
-    if (!filter || filter.length < MIN_FILTER_LEN) {
-      if (showUnused) {
-        return true;
-      }
-
-      // A debug status of `null` indicates that this information is not yet
-      // available in an old event. Default to showing the image.
-      if (image.debug_status !== 'unused') {
-        return true;
-      }
-
-      // An unwind status of `null` indicates that symbolicator did not unwind.
-      // Ignore the status in this case.
-      if (!isNil(image.unwind_status) && image.unwind_status !== 'unused') {
-        return true;
-      }
-
-      return false;
-    }
-
-    // When searching for an address, check for the address range of the image
-    // instead of an exact match.
-    if (filter.indexOf('0x') === 0) {
-      const needle = parseAddress(filter);
-      if (needle > 0) {
-        const [startAddress, endAddress] = getImageRange(image);
-        return needle >= startAddress && needle < endAddress;
-      }
-    }
-
-    return (
-      // Prefix match for identifiers
-      (image.code_id || '').indexOf(filter) === 0 ||
-      (image.debug_id || '').indexOf(filter) === 0 ||
-      // Any match for file paths
-      (image.code_file || '').indexOf(filter) >= 0 ||
-      (image.debug_file || '').indexOf(filter) >= 0
-    );
-  }
-
-  handleChangeShowUnused = e => {
-    const showUnused = e.target.checked;
-    this.setState({showUnused});
-  };
-
-  handleShowUnused = () => {
-    this.setState({showUnused: true});
-  };
-
-  handleChangeShowDetails = e => {
-    const showDetails = e.target.checked;
-    this.setState({showDetails});
-  };
-
-  handleChangeFilter = value => {
-    DebugMetaActions.updateFilter(value || '');
-  };
-
-  isValidImage(image) {
-    // in particular proguard images do not have a code file, skip them
-    if (image === null || image.code_file === null || image.type === 'proguard') {
-      return false;
-    }
-
-    if (getFileName(image.code_file) === 'dyld_sim') {
-      // this is only for simulator builds
-      return false;
-    }
-
-    return true;
-  }
-
-  getDebugImages() {
-    const images = this.props.data.images || [];
-
-    // There are a bunch of images in debug_meta that are not relevant to this
-    // component. Filter those out to reduce the noise. Most importantly, this
-    // includes proguard images, which are rendered separately.
-    const filtered = images.filter(image => this.isValidImage(image));
-
-    // Sort images by their start address. We assume that images have
-    // non-overlapping ranges. Each address is given as hex string (e.g.
-    // "0xbeef").
-    filtered.sort((a, b) => parseAddress(a.image_addr) - parseAddress(b.image_addr));
-
-    return filtered;
-  }
-
-  getNoImagesMessage(images) {
-    const {filter, showUnused} = this.state;
-
-    if (images.length === 0) {
-      return t('No loaded images available.');
-    }
-
-    if (!showUnused && !filter) {
-      return tct(
-        'No images are referenced in the stack trace. [toggle: Show Unreferenced]',
-        {
-          toggle: <Button priority="link" onClick={this.handleShowUnused} />,
-        }
-      );
-    }
-
-    return t('Sorry, no images match your query.');
-  }
-
-  renderToolbar() {
-    const {filter, showDetails, showUnused} = this.state;
-    return (
-      <ToolbarWrapper>
-        <Label>
-          <Checkbox checked={showDetails} onChange={this.handleChangeShowDetails} />
-          {t('details')}
-        </Label>
-
-        <Label>
-          <Checkbox
-            checked={showUnused || !!filter}
-            disabled={!!filter}
-            onChange={this.handleChangeShowUnused}
-          />
-          {t('show unreferenced')}
-        </Label>
-        <SearchInputWrapper>
-          <StyledSearchBar
-            query={filter}
-            onChange={this.handleChangeFilter}
-            placeholder={t('Search images\u2026')}
-          />
-        </SearchInputWrapper>
-      </ToolbarWrapper>
-    );
-  }
-
-  render() {
-    // skip null values indicating invalid debug images
-    const images = this.getDebugImages();
-
-    const filteredImages = images.filter(image => this.filterImage(image));
-
-    const titleElement = (
-      <GuideAnchor target="packages" position="bottom">
-        <h3>{t('Images Loaded')}</h3>
-      </GuideAnchor>
-    );
-
-    const frames = this.props.event.entries.find(({type}) => type === 'exception')?.data
-      ?.values?.[0]?.stacktrace?.frames;
-    const foundFrame = frames
-      ? frames.find(frame => frame.instructionAddr === this.state.filter)
-      : null;
-
-    return (
-      <StyledEventDataSection
-        event={this.props.event}
-        type="packages"
-        title={titleElement}
-        actions={this.renderToolbar()}
-        wrapTitle={false}
-        isCentered
-      >
-        <DebugImagesPanel>
-          <ClippedBox clipHeight={560}>
-            <PanelBody>
-              {foundFrame && (
-                <ImageForBar
-                  frame={foundFrame}
-                  onShowAllImages={this.handleChangeFilter}
-                />
-              )}
-              {filteredImages.length > 0 ? (
-                filteredImages.map(image => (
-                  <DebugImage
-                    key={image.debug_id}
-                    image={image}
-                    orgId={this.props.orgId}
-                    projectId={this.props.projectId}
-                    showDetails={this.state.showDetails}
-                  />
-                ))
-              ) : (
-                <EmptyItem>
-                  <ImageIcon type="muted" src="icon-circle-exclamation" />{' '}
-                  {this.getNoImagesMessage(images)}
-                </EmptyItem>
-              )}
-            </PanelBody>
-          </ClippedBox>
-        </DebugImagesPanel>
-      </StyledEventDataSection>
-    );
-  }
-}
-
-const Label = styled('label')`
-  font-weight: normal;
-  margin-right: 1em;
-  margin-bottom: 0;
-
-  > input {
-    margin-right: 1ex;
-  }
-`;
-
-const StyledEventDataSection = styled(EventDataSection)`
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    padding-bottom: ${space(4)};
-  }
-  /* to increase specificity */
-  @media (min-width: ${p => p.theme.breakpoints[0]}) {
-    padding-bottom: ${space(2)};
-  }
-`;
-
-const DebugImagesPanel = styled(Panel)`
-  margin-bottom: ${space(1)};
-  max-height: 600px;
-  overflow-y: auto;
-  overflow-x: hidden;
-`;
-
-const DebugImageItem = styled(PanelItem)`
-  font-size: ${p => p.theme.fontSizeSmall};
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: grid;
-    grid-gap: ${space(1)};
-    position: relative;
-  }
-`;
-
-const ImageIcon = styled(InlineSvg)`
-  font-size: ${p => p.theme.fontSizeLarge};
-  color: ${p => p.theme.alert[p.type].iconColor};
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    font-size: ${p => p.theme.fontSizeExtraLarge};
-    margin-bottom: ${space(0.5)};
-  }
-`;
-
-const Formatted = styled('span')`
-  font-family: ${p => p.theme.text.familyMono};
-`;
-
-const ImageInfoGroup = styled('div')`
-  margin-left: 1em;
-  flex-grow: ${p => (p.fullWidth ? 1 : null)};
-
-  &:first-child {
-    @media (min-width: ${p => p.theme.breakpoints[0]}) {
-      margin-left: 0;
-    }
-  }
-`;
-
-const ImageActions = styled(ImageInfoGroup)`
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    position: absolute;
-    top: 15px;
-    right: 20px;
-  }
-`;
-
-const ImageTitle = styled('div')`
-  font-size: ${p => p.theme.fontSizeLarge};
-`;
-
-const CodeFile = styled('span')`
-  font-weight: bold;
-`;
-
-const DebugFile = styled('span')`
-  color: ${p => p.theme.gray500};
-`;
-
-const ImageSubtext = styled('div')`
-  color: ${p => p.theme.gray500};
-`;
-
-const ImageProp = styled('span')`
-  font-weight: bold;
-`;
-
-const StatusLine = styled(ImageSubtext)`
-  display: flex;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: grid;
-  }
-`;
-
-const AddressDivider = styled('br')`
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    display: none;
-  }
-`;
-
-const SymbolicationStatus = styled('span')`
-  flex-grow: 1;
-  flex-basis: 0;
-  margin-right: 1em;
-
-  ${ImageIcon} {
-    margin-left: 0.66ex;
-  }
-`;
-
-const EmptyItem = styled(PanelItem)`
-  display: flex;
-  align-items: center;
-  justify-content: center;
-
-  ${ImageIcon} {
-    opacity: 0.4;
-    margin-right: 1ex;
-    vertical-align: text-bottom;
-  }
-`;
-const ToolbarWrapper = styled('div')`
-  display: flex;
-  align-items: center;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    flex-wrap: wrap;
-    margin-top: ${space(1)};
-  }
-`;
-const SearchInputWrapper = styled('div')`
-  max-width: 180px;
-  display: inline-block;
-  @media (max-width: ${p => p.theme.breakpoints[0]}) {
-    width: 100%;
-    max-width: 100%;
-    margin-top: ${space(1)};
-  }
-`;
-// TODO(matej): remove this once we refactor SearchBar to not use css classes
-// - it could accept size as a prop
-const StyledSearchBar = styled(SearchBar)`
-  .search-input {
-    height: 30px;
-  }
-  .search-clear-form {
-    top: 5px !important;
-  }
-  .icon-search {
-    top: 8px;
-  }
-`;
-
-export default DebugMetaInterface;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionStacktraceContent.tsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionStacktraceContent.tsx
index 0ce82cf505..47d2367074 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionStacktraceContent.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionStacktraceContent.tsx
@@ -1,12 +1,12 @@
 import React from 'react';
 
-import {PlatformType} from 'app/components/events/interfaces/frame/types';
 import {defined} from 'app/utils';
 import StacktraceContent from 'app/components/events/interfaces/stacktraceContent';
 import {Panel} from 'app/components/panels';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import SentryTypes from 'app/sentryTypes';
 import {Stacktrace, StackViewType} from 'app/types/stacktrace';
+import {PlatformType} from 'app/types';
 
 type Props = {
   stackView: StackViewType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
index c3f71f0739..763cde59e5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
@@ -16,7 +16,7 @@ import withSentryAppComponents from 'app/utils/withSentryAppComponents';
 import {DebugMetaActions} from 'app/stores/debugMetaStore';
 import {SymbolicatorStatus} from 'app/components/events/interfaces/types';
 import InlineSvg from 'app/components/inlineSvg';
-import {combineStatus} from 'app/components/events/interfaces/debugmeta';
+import {combineStatus} from 'app/components/events/interfaces/debugMeta/utils';
 import {IconRefresh, IconAdd, IconSubtract} from 'app/icons';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
index 062fbdc3d3..5f629082db 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {css} from '@emotion/core';
 
-import {SentryAppComponent} from 'app/types';
+import {Frame, SentryAppComponent} from 'app/types';
 import {t} from 'app/locale';
 import {defined} from 'app/utils';
 import ClippedBox from 'app/components/clippedBox';
@@ -13,8 +13,6 @@ import {Assembly} from 'app/components/events/interfaces/assembly';
 import {parseAssembly} from 'app/components/events/interfaces/utils';
 import {OpenInContextLine} from 'app/components/events/interfaces/openInContextLine';
 
-import {Frame} from './types';
-
 type Props = {
   frame: Frame;
   isExpanded?: boolean;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
index 969348f352..8e814e506a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {Meta} from 'app/types';
+import {Frame, PlatformType, Meta} from 'app/types';
 import {defined, isUrl} from 'app/utils';
 import Tooltip from 'app/components/tooltip';
 import Truncate from 'app/components/truncate';
@@ -15,7 +15,6 @@ import space from 'app/styles/space';
 import FrameFunctionName from './frameFunctionName';
 import {getPlatform, trimPackage} from './utils';
 import FrameDefaultTitleOriginalSourceInfo from './frameDefaultTitleOriginalSourceInfo';
-import {Frame, PlatformType} from './types';
 
 type Props = {
   frame: Frame;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
index 10946db56b..4d0a554941 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
@@ -2,12 +2,10 @@ import React from 'react';
 import PropTypes from 'prop-types';
 
 import {t} from 'app/locale';
-import {Meta} from 'app/types';
+import {Meta, Frame} from 'app/types';
 import {getMeta} from 'app/components/events/meta/metaProxy';
 import AnnotatedText from 'app/components/events/meta/annotatedText';
 
-import {Frame} from './types';
-
 type Props = {
   frame: Frame;
   className?: string;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx
deleted file mode 100644
index 3ca5cb8f24..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx
+++ /dev/null
@@ -1,21 +0,0 @@
-export type PlatformType = 'java' | 'csharp' | 'other';
-
-export type Frame = {
-  filename: string;
-  module: string;
-  map: string;
-  preventCollapse: () => void;
-  errors: Array<any>;
-  context: Array<[number, string]>;
-  vars: {[key: string]: any};
-  inApp: boolean;
-  function?: string;
-  absPath?: string;
-  rawFunction?: string;
-  platform: PlatformType;
-  lineNo?: number;
-  colNo?: number;
-  package?: string;
-  origAbsPath?: string;
-  mapUrl?: string;
-};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx
index 3bf2b52bd4..6a55d6adde 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx
@@ -1,4 +1,4 @@
-import {PlatformType} from './types';
+import {PlatformType} from 'app/types';
 
 export function trimPackage(pkg: string) {
   const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
index c8f78ca745..847456ad38 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
@@ -3,9 +3,9 @@ import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 
 import FrameFunctionName from 'app/components/events/interfaces/frame/frameFunctionName';
-import {Frame} from 'app/components/events/interfaces/frame/types';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
+import {Frame} from 'app/types';
 
 type Props = {
   frame: Frame;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/filterThreadInfo.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/filterThreadInfo.tsx
index bf75a349a2..fa2354dc35 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/filterThreadInfo.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/filterThreadInfo.tsx
@@ -1,5 +1,5 @@
-import {Thread, Frame} from 'app/types/events';
-import {Event} from 'app/types';
+import {Thread} from 'app/types/events';
+import {Event, Frame} from 'app/types';
 import {trimPackage} from 'app/components/events/interfaces/frame/utils';
 
 import getThreadStacktrace from './getThreadStacktrace';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/getRelevantFrame.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/getRelevantFrame.tsx
index 2f493bdb82..433922b8a2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/getRelevantFrame.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/threadSelector/getRelevantFrame.tsx
@@ -1,4 +1,4 @@
-import {Frame} from 'app/types/events';
+import {Frame} from 'app/types';
 
 // TODO(ts): define correct stacktrace type
 function getRelevantFrame(stacktrace: any): Frame {
diff --git a/src/sentry/static/sentry/app/types/events.ts b/src/sentry/static/sentry/app/types/events.ts
index 6d1de190cb..e884c7b14c 100644
--- a/src/sentry/static/sentry/app/types/events.ts
+++ b/src/sentry/static/sentry/app/types/events.ts
@@ -5,10 +5,3 @@ export interface Thread {
   stacktrace?: any;
   rawStacktrace?: any;
 }
-
-export interface Frame {
-  function?: string;
-  package?: string;
-  module?: string;
-  filename?: string;
-}
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index d93f87ca6e..7e42a2218d 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1323,3 +1323,26 @@ export type Widget = {
 };
 
 export type EventGroupInfo = Record<EventGroupVariantKey, EventGroupVariant>;
+
+export type PlatformType = 'java' | 'csharp' | 'other';
+
+export type Frame = {
+  filename: string;
+  module: string;
+  map: string;
+  preventCollapse: () => void;
+  errors: Array<any>;
+  context: Array<[number, string]>;
+  vars: {[key: string]: any};
+  inApp: boolean;
+  function?: string;
+  absPath?: string;
+  rawFunction?: string;
+  platform: PlatformType;
+  lineNo?: number;
+  colNo?: number;
+  package?: string;
+  origAbsPath?: string;
+  mapUrl?: string;
+  instructionAddr?: string;
+};
diff --git a/src/sentry/static/sentry/app/types/stacktrace.tsx b/src/sentry/static/sentry/app/types/stacktrace.tsx
index 731755c74e..684c114321 100644
--- a/src/sentry/static/sentry/app/types/stacktrace.tsx
+++ b/src/sentry/static/sentry/app/types/stacktrace.tsx
@@ -1,4 +1,4 @@
-import {Frame} from 'app/components/events/interfaces/frame/types';
+import {Frame} from 'app/types';
 
 export type StackViewType = 'app' | 'full' | 'raw';
 
