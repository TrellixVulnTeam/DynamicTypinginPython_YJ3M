commit 85b5edc451c85455cac8c97e9ff397e24d79da85
Author: David Wang <davidw1339@gmail.com>
Date:   Mon Oct 21 14:21:26 2019 -0700

    feat(ui): Make withTeamsForUser HOC set team, project, and update organization stores (#15180)
    
    In order to make navigation smooth between a lightweight/heavyweight organization route tree we must have the lightweight organization pages, such as projects, hydrate the lightweight org with teams/projects to mimic the heavyweight organization.
    Right now the hydrated projects do not fully mimic the projects that would be returned from organization details. Another PR will be opened soon to make sure the functionality doesn't change.
    
    Refs SEN-1144

diff --git a/src/sentry/static/sentry/app/actions/projectActions.jsx b/src/sentry/static/sentry/app/actions/projectActions.jsx
index de1c6ef0f4..4cb356b331 100644
--- a/src/sentry/static/sentry/app/actions/projectActions.jsx
+++ b/src/sentry/static/sentry/app/actions/projectActions.jsx
@@ -1,23 +1,24 @@
 import Reflux from 'reflux';
 
 export default Reflux.createActions([
+  'addTeam',
+  'addTeamError',
+  'addTeamSuccess',
+  'changeSlug',
   'createSuccess',
-  'update',
-  'updateError',
-  'updateSuccess',
+  'loadProjects',
   'loadStats',
   'loadStatsError',
-  'loadStatsSuccess',
   'loadStatsForProjectSuccess',
+  'loadStatsSuccess',
   'removeProject',
   'removeProjectError',
   'removeProjectSuccess',
-  'setActive',
-  'changeSlug',
-  'addTeam',
-  'addTeamSuccess',
-  'addTeamError',
   'removeTeam',
-  'removeTeamSuccess',
   'removeTeamError',
+  'removeTeamSuccess',
+  'setActive',
+  'update',
+  'updateError',
+  'updateSuccess',
 ]);
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index 02cad4da16..ff0c82c816 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -1,21 +1,22 @@
 import Reflux from 'reflux';
 
 const TeamActions = Reflux.createActions([
-  'update',
-  'updateError',
-  'updateSuccess',
+  'createTeam',
+  'createTeamError',
+  'createTeamSuccess',
   'fetchAll',
-  'fetchAllSuccess',
   'fetchAllError',
+  'fetchAllSuccess',
   'fetchDetails',
-  'fetchDetailsSuccess',
   'fetchDetailsError',
-  'createTeam',
-  'createTeamSuccess',
-  'createTeamError',
+  'fetchDetailsSuccess',
+  'loadTeams',
   'removeTeam',
-  'removeTeamSuccess',
   'removeTeamError',
+  'removeTeamSuccess',
+  'update',
+  'updateError',
+  'updateSuccess',
 ]);
 
 export default TeamActions;
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
index ed5f730fb9..5975c03ea4 100644
--- a/src/sentry/static/sentry/app/stores/organizationStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -12,6 +12,10 @@ const OrganizationStore = Reflux.createStore({
     this.listenTo(OrganizationActions.fetchOrg, this.reset);
     this.listenTo(OrganizationActions.fetchOrgError, this.onFetchOrgError);
 
+    // fill in teams and projects if they are loaded
+    this.listenTo(ProjectActions.loadProjects, this.onLoadProjects);
+    this.listenTo(TeamActions.loadTeams, this.onLoadTeams);
+
     // mark the store as dirty if projects or teams change
     this.listenTo(ProjectActions.createSuccess, this.onProjectOrTeamChange);
     this.listenTo(ProjectActions.updateSuccess, this.onProjectOrTeamChange);
@@ -63,6 +67,24 @@ const OrganizationStore = Reflux.createStore({
     this.dirty = true;
   },
 
+  onLoadProjects(projects) {
+    if (this.organization) {
+      // sort projects to mimic how they are received from backend
+      projects.sort((a, b) => a.slug.localeCompare(b.slug));
+      this.organization = {...this.organization, projects};
+      this.trigger(this.get());
+    }
+  },
+
+  onLoadTeams(teams) {
+    if (this.organization) {
+      // sort teams to mimic how they are received from backend
+      teams.sort((a, b) => a.slug.localeCompare(b.slug));
+      this.organization = {...this.organization, teams};
+      this.trigger(this.get());
+    }
+  },
+
   get() {
     return {
       organization: this.organization,
diff --git a/src/sentry/static/sentry/app/stores/projectsStore.jsx b/src/sentry/static/sentry/app/stores/projectsStore.jsx
index 6ddf480747..7a31f0b7f8 100644
--- a/src/sentry/static/sentry/app/stores/projectsStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectsStore.jsx
@@ -7,12 +7,15 @@ import TeamActions from 'app/actions/teamActions';
 const ProjectsStore = Reflux.createStore({
   init() {
     this.reset();
+
+    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);
+    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);
     this.listenTo(ProjectActions.createSuccess, this.onCreateSuccess);
-    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(ProjectActions.loadProjects, this.loadInitialData);
     this.listenTo(ProjectActions.loadStatsSuccess, this.onStatsLoadSuccess);
-    this.listenTo(ProjectActions.changeSlug, this.onChangeSlug);
-    this.listenTo(ProjectActions.addTeamSuccess, this.onAddTeam);
     this.listenTo(ProjectActions.removeTeamSuccess, this.onRemoveTeam);
+    this.listenTo(ProjectActions.updateSuccess, this.onUpdateSuccess);
+
     this.listenTo(TeamActions.removeTeamSuccess, this.onDeleteTeam);
   },
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index a1245d6ad8..88a45b787b 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -6,10 +6,11 @@ const TeamStore = Reflux.createStore({
     this.initialized = false;
     this.reset();
 
-    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);
     this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
+    this.listenTo(TeamActions.loadTeams, this.loadInitialData);
     this.listenTo(TeamActions.removeTeamSuccess, this.onRemoveSuccess);
-    this.listenTo(TeamActions.createTeamSuccess, this.onCreateSuccess);
+    this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
   },
 
   reset() {
diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
index b977519a63..d8e5fc8fac 100644
--- a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -1,8 +1,11 @@
 import React from 'react';
+import _ from 'lodash';
 
+import {Client} from 'app/api';
 import {Team, Organization} from 'app/types';
 import getDisplayName from 'app/utils/getDisplayName';
-import {Client} from 'app/api';
+import ProjectActions from 'app/actions/projectActions';
+import TeamActions from 'app/actions/teamActions';
 
 // We require these props when using this HOC
 type DependentProps = {
@@ -45,6 +48,12 @@ const withTeamsForUser = <P extends InjectedTeamsProps>(
           teams,
           loadingTeams: false,
         });
+
+        // also fill up TeamStore and ProjectStore so org context does not have
+        // to refetch org details due to lack of teams/projects
+        const projects = _.uniqBy(_.flatten(teams.map(team => team.projects)), 'id');
+        ProjectActions.loadProjects(projects);
+        TeamActions.loadTeams(teams);
       } catch (error) {
         this.setState({
           error,
diff --git a/tests/js/spec/stores/organizationStore.spec.jsx b/tests/js/spec/stores/organizationStore.spec.jsx
index 62b69cd610..8cefe500b1 100644
--- a/tests/js/spec/stores/organizationStore.spec.jsx
+++ b/tests/js/spec/stores/organizationStore.spec.jsx
@@ -1,5 +1,7 @@
 import OrganizationStore from 'app/stores/organizationStore';
 import OrganizationActions from 'app/actions/organizationActions';
+import TeamActions from 'app/actions/teamActions';
+import ProjectActions from 'app/actions/projectActions';
 import {updateOrganization} from 'app/actionCreators/organizations';
 
 describe('OrganizationStore', function() {
@@ -68,4 +70,38 @@ describe('OrganizationStore', function() {
       dirty: false,
     });
   });
+
+  it('loads in sorted teams', async function() {
+    const organization = TestStubs.Organization();
+    OrganizationActions.update(organization);
+    // wait for action to get dispatched to store
+    await tick();
+
+    const teamA = TestStubs.Team({slug: 'a'});
+    const teamB = TestStubs.Team({slug: 'b'});
+    const teams = [teamB, teamA];
+    TeamActions.loadTeams(teams);
+    // wait for action to get dispatched to store
+    await tick();
+
+    // verify existence and sorted order of loaded teams
+    expect(OrganizationStore.get().organization.teams).toEqual([teamA, teamB]);
+  });
+
+  it('loads in sorted projects', async function() {
+    const organization = TestStubs.Organization();
+    OrganizationActions.update(organization);
+    // wait for action to get dispatched to store
+    await tick();
+
+    const projectA = TestStubs.Project({slug: 'a'});
+    const projectB = TestStubs.Project({slug: 'b'});
+    const projects = [projectB, projectA];
+    ProjectActions.loadProjects(projects);
+    // wait for action to get dispatched to store
+    await tick();
+
+    // verify existence and sorted order of loaded projects
+    expect(OrganizationStore.get().organization.projects).toEqual([projectA, projectB]);
+  });
 });
diff --git a/tests/js/spec/utils/withTeamsForUser.spec.jsx b/tests/js/spec/utils/withTeamsForUser.spec.jsx
index 4fd47955d3..0b1f327b78 100644
--- a/tests/js/spec/utils/withTeamsForUser.spec.jsx
+++ b/tests/js/spec/utils/withTeamsForUser.spec.jsx
@@ -1,6 +1,8 @@
 import React from 'react';
 import {mount} from 'sentry-test/enzyme';
 
+import TeamActions from 'app/actions/teamActions';
+import ProjectActions from 'app/actions/projectActions';
 import withTeamsForUser from 'app/utils/withTeamsForUser';
 
 describe('withUserTeams HoC', function() {
@@ -9,6 +11,8 @@ describe('withUserTeams HoC', function() {
 
   beforeEach(function() {
     MockApiClient.clearMockResponses();
+    jest.spyOn(ProjectActions, 'loadProjects');
+    jest.spyOn(TeamActions, 'loadTeams');
   });
 
   it('forwards errors', async function() {
@@ -28,15 +32,17 @@ describe('withUserTeams HoC', function() {
     ).not.toBeNull();
   });
 
-  it('fetches teams and works', async function() {
+  it('fetches teams and loads stores', async function() {
+    const mockProjectA = TestStubs.Project({slug: 'a', id: '1'});
+    const mockProjectB = TestStubs.Project({slug: 'b', id: '2'});
     const mockTeams = [
       {
         slug: 'sentry',
-        projects: [],
+        projects: [mockProjectB],
       },
       {
         slug: 'captainplanet',
-        projects: [],
+        projects: [mockProjectA, mockProjectB],
       },
     ];
 
@@ -55,5 +61,11 @@ describe('withUserTeams HoC', function() {
         .find('MyComponent')
         .prop('teams')
     ).toEqual(mockTeams);
+
+    expect(ProjectActions.loadProjects).toHaveBeenCalledWith([
+      mockProjectB,
+      mockProjectA,
+    ]);
+    expect(TeamActions.loadTeams).toHaveBeenCalledWith(mockTeams);
   });
 });
