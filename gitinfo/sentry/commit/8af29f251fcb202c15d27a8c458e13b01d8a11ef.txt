commit 8af29f251fcb202c15d27a8c458e13b01d8a11ef
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Dec 11 14:11:38 2015 -0800

    Put active user first in assignee list as long as filter matches (refs #2451)

diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index d5d1db5194..6e0422a4da 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -5,6 +5,7 @@ import classNames from 'classnames';
 import ApiMixin from '../mixins/apiMixin';
 import Gravatar from '../components/gravatar';
 import GroupStore from '../stores/groupStore';
+import ConfigStore from '../stores/configStore';
 import DropdownLink from './dropdownLink';
 import MemberListStore from '../stores/memberListStore';
 import MenuItem from './menuItem';
@@ -39,6 +40,19 @@ const AssigneeSelector = React.createClass({
 
         return fullName.indexOf(filter) !== -1;
       });
+    },
+
+    putSessionUserFirst(members) {
+      // If session user is in the filtered list of members, put them at the top
+      let sessionUser = ConfigStore.get('user');
+      let sessionUserIndex = members.findIndex(member => sessionUser && member.id === sessionUser.id);
+
+      if (sessionUserIndex === -1)
+        return members;
+
+      return [members[sessionUserIndex]]
+        .concat(members.slice(0, sessionUserIndex))
+        .concat(members.slice(sessionUserIndex + 1));
     }
   },
 
@@ -162,6 +176,8 @@ const AssigneeSelector = React.createClass({
     }
 
     let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
+    members = AssigneeSelector.putSessionUserFirst(members);
+
     let memberNodes = members.map((item) => {
       return (
         <MenuItem key={item.id}
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index bc37a13636..9e4c12e5b5 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -6,6 +6,7 @@ import LoadingIndicator from 'app/components/loadingIndicator';
 
 import GroupStore from 'app/stores/groupStore';
 import MemberListStore from 'app/stores/memberListStore';
+import ConfigStore from 'app/stores/configStore';
 
 import stubReactComponents from '../../helpers/stubReactComponent';
 
@@ -59,6 +60,29 @@ describe('AssigneeSelector', function() {
         expect(filterMembers([USER_1], 'jane')).to.eql([USER_1]);
       });
     });
+
+    const putSessionUserFirst = AssigneeSelector.putSessionUserFirst;
+
+    describe('putSessionUserFirst()', function () {
+      it('should place the session user at the top of the member list if present', function () {
+        this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({
+          id: 2,
+          name: 'John Smith',
+          email: 'johnsmith@example.com'
+        });
+        expect(putSessionUserFirst([USER_1, USER_2])).to.eql([USER_2, USER_1]);
+      });
+
+      it('should return the same member list if the session user isn\'t present', function () {
+        this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({
+          id: 555,
+          name: 'Here Comes a New Challenger',
+          email: 'guile@mail.us.af.mil'
+        });
+
+        expect(putSessionUserFirst([USER_1, USER_2])).to.eql([USER_1, USER_2]);
+      });
+    });
   });
 
   describe('onFilterKeyDown()', function () {
