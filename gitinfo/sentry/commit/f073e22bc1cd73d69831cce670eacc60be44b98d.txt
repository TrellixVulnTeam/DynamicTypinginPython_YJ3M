commit f073e22bc1cd73d69831cce670eacc60be44b98d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 30 19:19:55 2014 -0700

    Push initial group query through API

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 2bffa84b5f..7e998126d0 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -14,7 +14,9 @@ from sentry.constants import (
     DEFAULT_SORT_OPTION, STATUS_CHOICES, STATUS_RESOLVED
 )
 from sentry.db.models.query import create_or_update
-from sentry.models import Activity, Group, GroupBookmark, Project, TagKey
+from sentry.models import (
+    Activity, Group, GroupBookmark, GroupMeta, Project, TagKey
+)
 from sentry.search.utils import parse_query
 from sentry.utils.dates import parse_date
 
@@ -108,9 +110,11 @@ class ProjectGroupIndexEndpoint(Endpoint):
         if query is not None:
             query_kwargs.update(parse_query(query, request.user))
 
-        results = search.query(**query_kwargs)
+        results = list(search.query(**query_kwargs))
+
+        GroupMeta.objects.populate_cache(results)
 
-        return Response(serialize(list(results), request.user))
+        return Response(serialize(results, request.user))
 
     def put(self, request, project_id):
         """
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index 1da91b0b28..d9c581c9fe 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -197,6 +197,6 @@
       </div>
     </div>
     <script>
-    window.groupList = {% serialize event_list %}
+    window.groupList = {% convert_to_json event_list %};
     </script>
 {% endblock %}
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 08097179e8..bd23015107 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -32,7 +32,7 @@ from sentry import app
 from sentry.app import tsdb
 from sentry.constants import (
     MEMBER_USER, STATUS_MUTED, STATUS_UNRESOLVED, STATUS_RESOLVED,
-    EVENTS_PER_PAGE)
+)
 from sentry.coreapi import (
     project_from_auth_vars, decode_and_decompress_data,
     safely_load_json_string, validate_data, insert_data_to_database, APIError,
@@ -52,7 +52,6 @@ from sentry.utils.javascript import to_json
 from sentry.utils.http import is_valid_origin, get_origins, is_same_domain
 from sentry.utils.safe import safe_execute
 from sentry.web.decorators import has_access
-from sentry.web.frontend.groups import _get_group_list
 from sentry.web.helpers import render_to_response
 
 error_logger = logging.getLogger('sentry.errors')
@@ -361,25 +360,6 @@ class StoreView(APIView):
         return event_id
 
 
-@csrf_exempt
-@has_access
-@never_cache
-@api
-def poll(request, team, project):
-    offset = 0
-    limit = EVENTS_PER_PAGE
-
-    response = _get_group_list(
-        request=request,
-        project=project,
-    )
-
-    event_list = response['event_list']
-    event_list = list(event_list[offset:limit])
-
-    return to_json(event_list, request)
-
-
 @csrf_exempt
 @has_access(MEMBER_USER)
 @never_cache
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 2ab232dcf3..327229d339 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -11,7 +11,6 @@ TODO: Move all events.py views into here, and rename this file to events.
 """
 from __future__ import division
 
-import datetime
 import re
 
 from django.core.urlresolvers import reverse
@@ -19,22 +18,19 @@ from django.http import HttpResponse, HttpResponseRedirect, Http404
 from django.shortcuts import get_object_or_404
 from django.utils import timezone
 
-from sentry import app
 from sentry.api.serializers import serialize
 from sentry.constants import (
-    SORT_OPTIONS, MEMBER_USER, DEFAULT_SORT_OPTION, EVENTS_PER_PAGE
+    SORT_OPTIONS, MEMBER_USER
 )
 from sentry.db.models import create_or_update
 from sentry.models import (
-    Project, Group, GroupMeta, Event, Activity, EventMapping, TagKey, GroupSeen
+    Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen
 )
 from sentry.permissions import (
     can_admin_group, can_remove_group, can_create_projects
 )
 from sentry.plugins import plugins
-from sentry.search.utils import parse_query
 from sentry.utils import json
-from sentry.utils.dates import parse_date
 from sentry.web.decorators import has_access, has_group_access, login_required
 from sentry.web.forms import NewNoteForm
 from sentry.web.helpers import render_to_response, group_is_public
@@ -43,95 +39,6 @@ uuid_re = re.compile(r'^[a-z0-9]{32}$', re.I)
 event_re = re.compile(r'^(?P<event_id>[a-z0-9]{32})\$(?P<checksum>[a-z0-9]{32})$', re.I)
 
 
-def _get_group_list(request, project):
-    query_kwargs = {
-        'project': project,
-    }
-
-    status = request.GET.get('status')
-    if status:
-        query_kwargs['status'] = int(status)
-
-    if request.user.is_authenticated() and request.GET.get('bookmarks'):
-        query_kwargs['bookmarked_by'] = request.user
-
-    if request.user.is_authenticated() and request.GET.get('assigned'):
-        query_kwargs['assigned_to'] = request.user
-
-    sort_by = request.GET.get('sort') or request.session.get('streamsort')
-    if sort_by is None:
-        sort_by = DEFAULT_SORT_OPTION
-
-    # Save last sort in session
-    if sort_by != request.session.get('streamsort'):
-        request.session['streamsort'] = sort_by
-
-    query_kwargs['sort_by'] = sort_by
-
-    tags = {}
-    for tag_key in TagKey.objects.all_keys(project):
-        if request.GET.get(tag_key):
-            tags[tag_key] = request.GET[tag_key]
-    if tags:
-        query_kwargs['tags'] = tags
-
-    date_from = request.GET.get('df')
-    time_from = request.GET.get('tf')
-    date_to = request.GET.get('dt')
-    time_to = request.GET.get('tt')
-    date_filter = request.GET.get('date_type')
-
-    today = timezone.now()
-    # date format is Y-m-d
-    if any(x is not None for x in [date_from, time_from, date_to, time_to]):
-        date_from, date_to = parse_date(date_from, time_from), parse_date(date_to, time_to)
-    else:
-        date_from = today - datetime.timedelta(days=5)
-        date_to = None
-
-    query_kwargs['date_from'] = date_from
-    query_kwargs['date_to'] = date_to
-    if date_filter:
-        query_kwargs['date_filter'] = date_filter
-
-    # HACK(dcramer): this should be removed once the pagination component
-    # is abstracted from the paginator tag
-    try:
-        page = int(request.GET.get('p', 1))
-    except (ValueError, TypeError):
-        page = 1
-
-    query_kwargs['offset'] = (page - 1) * EVENTS_PER_PAGE
-    query_kwargs['limit'] = EVENTS_PER_PAGE + 1
-
-    query = request.GET.get('query', 'is:unresolved')
-    if query is not None:
-        query_kwargs.update(parse_query(query, request.user))
-
-    results = app.search.query(**query_kwargs)
-
-    if len(results) == query_kwargs['limit']:
-        next_page = page + 1
-    else:
-        next_page = None
-
-    if page > 1:
-        prev_page = page - 1
-    else:
-        prev_page = None
-
-    return {
-        'event_list': results[:EVENTS_PER_PAGE],
-        'date_from': date_from,
-        'date_to': date_to,
-        'today': today,
-        'sort': sort_by,
-        'date_type': date_filter,
-        'previous_page': prev_page,
-        'next_page': next_page,
-    }
-
-
 def render_with_group_context(group, template, context, request=None,
                               event=None, is_public=False):
     context.update({
@@ -224,61 +131,15 @@ def wall_display(request, team):
 @login_required
 @has_access
 def group_list(request, team, project):
-    try:
-        page = int(request.GET.get('p', 1))
-    except (TypeError, ValueError):
-        page = 1
-
-    query = request.GET.get('query', 'is:unresolved')
-    if query and uuid_re.match(query):
-        # Forward to event if it exists
-        try:
-            group_id = EventMapping.objects.filter(
-                project=project, event_id=query
-            ).values_list('group', flat=True)[0]
-        except IndexError:
-            pass
-        else:
-            return HttpResponseRedirect(reverse('sentry-group', kwargs={
-                'project_id': project.slug,
-                'team_slug': project.team.slug,
-                'group_id': group_id,
-            }))
-
-    response = _get_group_list(
-        request=request,
-        project=project,
-    )
-    if isinstance(response, HttpResponse):
-        return response
-
-    # XXX: this is duplicate in _get_group_list
-    sort_label = SORT_OPTIONS[response['sort']]
-
-    has_realtime = page == 1
-
-    query_dict = request.GET.copy()
-    if 'p' in query_dict:
-        del query_dict['p']
-    pageless_query_string = query_dict.urlencode()
-
-    GroupMeta.objects.populate_cache(response['event_list'])
+    from sentry.api.endpoints.project_group_index import ProjectGroupIndexEndpoint
+    endpoint = ProjectGroupIndexEndpoint()
+    request.auth = None
+    response = endpoint.get(request, project_id=project.id)
 
     return render_to_response('sentry/groups/group_list.html', {
         'team': project.team,
         'project': project,
-        'from_date': response['date_from'],
-        'to_date': response['date_to'],
-        'date_type': response['date_type'],
-        'has_realtime': has_realtime,
-        'event_list': response['event_list'],
-        'previous_page': response['previous_page'],
-        'next_page': response['next_page'],
-        'today': response['today'],
-        'sort': response['sort'],
-        'query': query,
-        'pageless_query_string': pageless_query_string,
-        'sort_label': sort_label,
+        'event_list': response.data,
         'SORT_OPTIONS': SORT_OPTIONS,
     }, request)
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 36a8efb89c..17de9f2251 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -272,8 +272,6 @@ urlpatterns += patterns('',
         name='sentry-api-crossdomain-xml'),
 
     # Generic API
-    url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/poll/$', api.poll,
-        name='sentry-api-poll'),
     url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/resolve/$', api.resolve,
         name='sentry-api-resolve'),
     url(r'^api/(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/bookmark/$', api.bookmark,
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
index 240c12dedd..350f3f68d5 100644
--- a/tests/sentry/web/frontend/groups/tests.py
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -79,28 +79,6 @@ class GroupListTest(TestCase):
         assert resp.context['project'] == self.project
         assert resp.context['team'] == self.team
 
-    def test_date_sort(self):
-        self.login()
-        resp = self.client.get(self.path + '?sort=date')
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        assert list(resp.context['event_list']) == [self.group2, self.group1]
-
-    def test_new_sort(self):
-        self.login()
-        resp = self.client.get(self.path + '?sort=new')
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        print self.group1.score, self.group2.score
-        assert list(resp.context['event_list']) == [self.group1, self.group2]
-
-    def test_freq_sort(self):
-        self.login()
-        resp = self.client.get(self.path + '?sort=freq')
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
-        assert list(resp.context['event_list']) == [self.group2, self.group1]
-
 
 class GroupEventListTest(TestCase):
     @fixture
