commit 73d36aca49b033c936787507e3f18aa17179d421
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Nov 6 18:30:28 2019 -0500

    fix(discover2): Fix flicker when updating Saved Queries

diff --git a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
index 7446b3c18d..c83e05bac7 100644
--- a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
@@ -14,6 +14,9 @@ export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuer
       method: 'GET',
     }
   );
+
+  DiscoverSavedQueryActions.startFetchSavedQueries();
+
   promise
     .then(resp => {
       DiscoverSavedQueryActions.fetchSavedQueriesSuccess(resp);
@@ -37,6 +40,9 @@ export function createSavedQuery(
       data: query,
     }
   );
+
+  DiscoverSavedQueryActions.startFetchSavedQueries();
+
   promise
     .then(resp => {
       DiscoverSavedQueryActions.createSavedQuerySuccess(resp);
@@ -59,6 +65,9 @@ export function updateSavedQuery(
       data: query,
     }
   );
+
+  DiscoverSavedQueryActions.startFetchSavedQueries();
+
   promise
     .then(resp => {
       DiscoverSavedQueryActions.updateSavedQuerySuccess(resp);
@@ -78,6 +87,9 @@ export function deleteSavedQuery(
     `/organizations/${orgId}/discover/saved/${queryId}/`,
     {method: 'DELETE'}
   );
+
+  DiscoverSavedQueryActions.startFetchSavedQueries();
+
   promise
     .then(() => {
       DiscoverSavedQueryActions.deleteSavedQuerySuccess(queryId);
diff --git a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx b/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
index b0e78c2199..4b156005bb 100644
--- a/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/discover2Item.tsx
@@ -24,6 +24,7 @@ type Props = {
   api: Client;
   organization: Organization;
   savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
 };
 
 type State = {
diff --git a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
index 96d280b25f..229e9631cf 100644
--- a/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
+++ b/src/sentry/static/sentry/app/stores/discoverSavedQueriesStore.tsx
@@ -104,6 +104,7 @@ const DiscoverSavedQueriesStore = Reflux.createStore({
     this.state = {
       ...this.state,
       savedQueries: [...this.state.savedQueries, query],
+      isLoading: false,
     };
     this.trigger(this.state);
   },
@@ -120,6 +121,7 @@ const DiscoverSavedQueriesStore = Reflux.createStore({
     this.state = {
       ...this.state,
       savedQueries,
+      isLoading: false,
     };
     this.trigger(this.state);
   },
@@ -129,6 +131,7 @@ const DiscoverSavedQueriesStore = Reflux.createStore({
     this.state = {
       ...this.state,
       savedQueries,
+      isLoading: false,
     };
     this.trigger(this.state);
   },
diff --git a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
index 48fcc386d9..e0d1822ea7 100644
--- a/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/utils/withDiscoverSavedQueries.tsx
@@ -9,10 +9,12 @@ import getDisplayName from 'app/utils/getDisplayName';
 
 type InjectedDiscoverSavedQueriesProps = {
   savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
 };
 
 type State = {
   savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
 };
 
 /**
@@ -31,8 +33,11 @@ const withDiscoverSavedQueries = <P extends InjectedDiscoverSavedQueriesProps>(
     mixins: [Reflux.listenTo(DiscoverSavedQueriesStore, 'onUpdate') as any],
 
     getInitialState() {
+      const {savedQueries, isLoading} = DiscoverSavedQueriesStore.get();
+
       return {
-        savedQueries: DiscoverSavedQueriesStore.get().savedQueries,
+        savedQueries,
+        savedQueriesLoading: isLoading,
       };
     },
 
@@ -45,15 +50,19 @@ const withDiscoverSavedQueries = <P extends InjectedDiscoverSavedQueriesProps>(
     },
 
     updateQueries() {
-      const queries = DiscoverSavedQueriesStore.get().savedQueries.filter(
-        (item: SavedQuery) => item.version === 2
-      );
-      this.setState({savedQueries: queries});
+      const {savedQueries, isLoading} = DiscoverSavedQueriesStore.get();
+
+      const queries = savedQueries.filter((item: SavedQuery) => item.version === 2);
+      this.setState({savedQueries: queries, savedQueriesLoading: isLoading});
     },
 
     render() {
       return (
-        <WrappedComponent savedQueries={this.state.savedQueries} {...this.props as P} />
+        <WrappedComponent
+          savedQueries={this.state.savedQueries}
+          savedQueriesLoading={this.state.savedQueriesLoading}
+          {...this.props as P}
+        />
       );
     },
   });
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
index b47d518f5e..8f524325d3 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -20,6 +20,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
 };
 
 const NAME_DEFAULT = t('Untitled query');
@@ -65,7 +66,6 @@ class EventInputName extends React.Component<Props> {
     handleUpdateQueryName(api, organization, nextEventView).then(
       (updatedQuery: SavedQuery) => {
         const view = EventView.fromSavedQuery(updatedQuery);
-
         // May have to delay this for the store to update.
         browserHistory.push({
           pathname: location.pathname,
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
index 70f9948cc2..80a0719f9a 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -27,6 +27,7 @@ type Props = {
   organization: Organization;
   eventView: EventView;
   savedQueries: SavedQuery[];
+  savedQueriesLoading: boolean;
 };
 type State = {
   isNewQuery: boolean;
@@ -36,10 +37,9 @@ type State = {
   queryName: string;
 };
 
-class SavedQueryButtonGroup extends React.Component<Props> {
-  static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> {
-    const {eventView: nextEventView, savedQueries} = nextProps;
-    const {queryId} = prevState;
+class SavedQueryButtonGroup extends React.PureComponent<Props, State> {
+  static getDerivedStateFromProps(nextProps: Props, prevState: State): State {
+    const {eventView: nextEventView, savedQueries, savedQueriesLoading} = nextProps;
 
     // For a new unsaved query
     const savedQuery = savedQueries.find(q => q.id === nextEventView.id);
@@ -52,8 +52,14 @@ class SavedQueryButtonGroup extends React.Component<Props> {
       };
     }
 
+    if (savedQueriesLoading) {
+      return prevState;
+    }
+
+    const savedEventView = EventView.fromSavedQuery(savedQuery);
+
     // Switching from a SavedQuery to another SavedQuery
-    if (queryId !== nextEventView.id) {
+    if (savedEventView.id !== nextEventView.id) {
       return {
         isNewQuery: false,
         isEditingQuery: false,
@@ -63,11 +69,12 @@ class SavedQueryButtonGroup extends React.Component<Props> {
     }
 
     // For modifying a SavedQuery
-    const savedEventView = EventView.fromSavedQuery(savedQuery);
     const isEqualQuery = nextEventView.isEqualTo(savedEventView);
+
     return {
       isNewQuery: false,
       isEditingQuery: !isEqualQuery,
+      queryId: nextEventView.id,
 
       // HACK(leedongwei): See comment at SavedQueryButtonGroup.onFocusInput
       queryName: prevState.queryName || '',
