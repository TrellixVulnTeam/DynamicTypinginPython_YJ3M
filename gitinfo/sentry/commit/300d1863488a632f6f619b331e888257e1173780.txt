commit 300d1863488a632f6f619b331e888257e1173780
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Oct 30 14:36:23 2015 -0700

    Convert app js to single quotes; add rule to .eslintrc

diff --git a/.eslintrc b/.eslintrc
index e408a38a52..ba89352de2 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -108,6 +108,7 @@
     "no-sequences": 2,               // http://eslint.org/docs/rules/no-sequences
     "no-throw-literal": 2,           // http://eslint.org/docs/rules/no-throw-literal
     "no-with": 2,                    // http://eslint.org/docs/rules/no-with
+    "quotes": [2, "single"],         // http://eslint.org/docs/rules/quotes.html
     "radix": 2,                      // http://eslint.org/docs/rules/radix
     "space-infix-ops": 2,            // http://eslint.org/docs/rules/space-infix-ops.html
     "vars-on-top": 0,                // http://eslint.org/docs/rules/vars-on-top
diff --git a/src/sentry/static/sentry/app/actions/alertActions.jsx b/src/sentry/static/sentry/app/actions/alertActions.jsx
index 0530f759b5..d26d0fbbcc 100644
--- a/src/sentry/static/sentry/app/actions/alertActions.jsx
+++ b/src/sentry/static/sentry/app/actions/alertActions.jsx
@@ -1,5 +1,5 @@
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
-let AlertActions = Reflux.createActions(["addAlert", "closeAlert"]);
+let AlertActions = Reflux.createActions(['addAlert', 'closeAlert']);
 
 export default AlertActions;
diff --git a/src/sentry/static/sentry/app/actions/groupActions.jsx b/src/sentry/static/sentry/app/actions/groupActions.jsx
index a7eb4e64bb..2a0ab116a8 100644
--- a/src/sentry/static/sentry/app/actions/groupActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupActions.jsx
@@ -1,22 +1,22 @@
 
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 
 // TODO(dcramer): we should probably just make every parameter update
 // work on bulk groups
 let GroupActions = Reflux.createActions([
-  "assignTo",
-  "assignToError",
-  "assignToSuccess",
-  "delete",
-  "deleteError",
-  "deleteSuccess",
-  "update",
-  "updateError",
-  "updateSuccess",
-  "merge",
-  "mergeError",
-  "mergeSuccess"
+  'assignTo',
+  'assignToError',
+  'assignToSuccess',
+  'delete',
+  'deleteError',
+  'deleteSuccess',
+  'update',
+  'updateError',
+  'updateSuccess',
+  'merge',
+  'mergeError',
+  'mergeSuccess'
 ]);
 
 
diff --git a/src/sentry/static/sentry/app/actions/streamTagActions.jsx b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
index ebc0b4dd7f..f3442a156b 100644
--- a/src/sentry/static/sentry/app/actions/streamTagActions.jsx
+++ b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
@@ -1,8 +1,8 @@
 
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 export default Reflux.createActions([
-  "loadTags",
-  "loadTagsError",
-  "loadTagsSuccess"
+  'loadTags',
+  'loadTagsError',
+  'loadTagsSuccess'
 ]);
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index 3affb3ffdc..f011c91f67 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -1,10 +1,10 @@
 
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 let TeamActions = Reflux.createActions([
-  "update",
-  "updateError",
-  "updateSuccess"
+  'update',
+  'updateError',
+  'updateSuccess'
 ]);
 
 
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 59415c5c51..19cf3c3d5f 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -1,6 +1,6 @@
-import $ from "jquery";
-import GroupActions from "./actions/groupActions";
-import TeamActions from "./actions/teamActions";
+import $ from 'jquery';
+import GroupActions from './actions/groupActions';
+import TeamActions from './actions/teamActions';
 
 class Request {
   constructor(xhr) {
@@ -19,7 +19,7 @@ class Client {
     if (typeof options === 'undefined') {
       options = {};
     }
-    this.baseUrl = options.baseUrl || "/api/0";
+    this.baseUrl = options.baseUrl || '/api/0';
     this.activeRequests = {};
   }
 
@@ -35,7 +35,7 @@ class Client {
 
   wrapCallback(id, func, cleanup) {
     /*eslint consistent-return:0*/
-    if (typeof func === "undefined") {
+    if (typeof func === 'undefined') {
       return;
     }
 
@@ -51,12 +51,12 @@ class Client {
   }
 
   request(path, options = {}) {
-    let query = $.param(options.query || "", true);
-    let method = options.method || (options.data ? "POST" : "GET");
+    let query = $.param(options.query || '', true);
+    let method = options.method || (options.data ? 'POST' : 'GET');
     let data = options.data;
     let id = this.uniqueId();
 
-    if (typeof data !== "undefined" && method !== 'GET') {
+    if (typeof data !== 'undefined' && method !== 'GET') {
       data = JSON.stringify(data);
     }
 
@@ -91,7 +91,7 @@ class Client {
   }
 
   _chain(...funcs) {
-    funcs = funcs.filter((f) => typeof f !== "undefined" && f);
+    funcs = funcs.filter((f) => typeof f !== 'undefined' && f);
     return (...args) => {
       funcs.forEach((func) => {
         func.apply(funcs, args);
@@ -100,7 +100,7 @@ class Client {
   }
 
   _wrapRequest(path, options, extraParams) {
-    if (typeof extraParams === "undefined") {
+    if (typeof extraParams === 'undefined') {
       extraParams = {};
     }
 
@@ -112,7 +112,7 @@ class Client {
   }
 
   bulkDelete(params, options) {
-    let path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -120,7 +120,7 @@ class Client {
 
     return this._wrapRequest(path, {
       query: query,
-      method: "DELETE",
+      method: 'DELETE',
       success: (response) => {
         GroupActions.deleteSuccess(id, params.itemIds, response);
       },
@@ -131,7 +131,7 @@ class Client {
   }
 
   bulkUpdate(params, options) {
-    let path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -139,7 +139,7 @@ class Client {
 
     return this._wrapRequest(path, {
       query: query,
-      method: "PUT",
+      method: 'PUT',
       data: params.data,
       success: (response) => {
         GroupActions.updateSuccess(id, params.itemIds, response);
@@ -151,7 +151,7 @@ class Client {
   }
 
   merge(params, options) {
-    let path = "/projects/" + params.orgId + "/" + params.projectId + "/groups/";
+    let path = '/projects/' + params.orgId + '/' + params.projectId + '/groups/';
     let query = (params.itemIds ? {id: params.itemIds} : undefined);
     let id = this.uniqueId();
 
@@ -159,7 +159,7 @@ class Client {
 
     return this._wrapRequest(path, {
       query: query,
-      method: "PUT",
+      method: 'PUT',
       data: {merge: 1},
       success: (response) => {
         GroupActions.mergeSuccess(id, params.itemIds, response);
@@ -171,13 +171,13 @@ class Client {
   }
 
   assignTo(params, options) {
-    let path = "/groups/" + params.id + "/";
+    let path = '/groups/' + params.id + '/';
     let id = this.uniqueId();
 
     GroupActions.assignTo(id, params.id, {email: params.email});
 
     return this._wrapRequest(path, {
-      method: "PUT",
+      method: 'PUT',
       data: {assignedTo: params.email},
       success: (response) => {
         GroupActions.assignToSuccess(id, params.id, response);
@@ -189,13 +189,13 @@ class Client {
   }
 
   joinTeam(params, options) {
-    let path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
+    let path = '/organizations/' + params.orgId + '/members/' + (params.memberId || 'me') + '/teams/' + params.teamId + '/';
     let id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
     return this._wrapRequest(path, {
-      method: "POST",
+      method: 'POST',
       success: (response) => {
         TeamActions.updateSuccess(id, params.teamId, response);
       },
@@ -206,13 +206,13 @@ class Client {
   }
 
   leaveTeam(params, options) {
-    let path = "/organizations/" + params.orgId + "/members/" + (params.memberId || 'me') + "/teams/" + params.teamId + "/";
+    let path = '/organizations/' + params.orgId + '/members/' + (params.memberId || 'me') + '/teams/' + params.teamId + '/';
     let id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
     return this._wrapRequest(path, {
-      method: "DELETE",
+      method: 'DELETE',
       success: (response) => {
         TeamActions.updateSuccess(id, params.teamId, response);
       },
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index e4e521eb7a..19ce8f7538 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 import AlertActions from '../actions/alertActions';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index 3b422ebb12..9c833d5a47 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import Reflux from "reflux";
+import React from 'react';
+import Reflux from 'reflux';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 import AlertStore from '../stores/alertStore';
@@ -8,7 +8,7 @@ import AlertMessage from './alertMessage';
 const Alerts = React.createClass({
   mixins: [
     PureRenderMixin,
-    Reflux.connect(AlertStore, "alerts")
+    Reflux.connect(AlertStore, 'alerts')
   ],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index a5cfe4207f..05868f33bb 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -1,17 +1,17 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import Reflux from "reflux";
-import classNames from "classnames";
-import api from "../api";
-import Gravatar from "../components/gravatar";
-import GroupStore from "../stores/groupStore";
-import DropdownLink from "./dropdownLink";
-import MemberListStore from "../stores/memberListStore";
-import MenuItem from "./menuItem";
-import LoadingIndicator from "../components/loadingIndicator";
-import {userDisplayName} from "../utils/formatters";
-import {valueIsEqual} from "../utils";
-import TooltipMixin from "../mixins/tooltip";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import Reflux from 'reflux';
+import classNames from 'classnames';
+import api from '../api';
+import Gravatar from '../components/gravatar';
+import GroupStore from '../stores/groupStore';
+import DropdownLink from './dropdownLink';
+import MemberListStore from '../stores/memberListStore';
+import MenuItem from './menuItem';
+import LoadingIndicator from '../components/loadingIndicator';
+import {userDisplayName} from '../utils/formatters';
+import {valueIsEqual} from '../utils';
+import TooltipMixin from '../mixins/tooltip';
 
 const AssigneeSelector = React.createClass({
   propTypes: {
@@ -19,10 +19,10 @@ const AssigneeSelector = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange"),
+    Reflux.listenTo(GroupStore, 'onGroupChange'),
     TooltipMixin({
       html: true,
-      selector: ".tip"
+      selector: '.tip'
     })
   ],
 
@@ -128,9 +128,9 @@ const AssigneeSelector = React.createClass({
     let assignedTo = this.state.assignedTo;
     let filter = this.state.filter;
 
-    let className = "assignee-selector anchor-right";
+    let className = 'assignee-selector anchor-right';
     if (!assignedTo) {
-      className += " unassigned";
+      className += ' unassigned';
     }
 
     let memberNodes = [];
@@ -157,7 +157,7 @@ const AssigneeSelector = React.createClass({
 
     return (
       <div ref="container">
-        <div className={classNames(className, "tip")} title={tooltipTitle} >
+        <div className={classNames(className, 'tip')} title={tooltipTitle} >
           {loading ?
             <LoadingIndicator mini={true} />
           :
diff --git a/src/sentry/static/sentry/app/components/autoSelectText.jsx b/src/sentry/static/sentry/app/components/autoSelectText.jsx
index 8636204748..3ea9c596c9 100644
--- a/src/sentry/static/sentry/app/components/autoSelectText.jsx
+++ b/src/sentry/static/sentry/app/components/autoSelectText.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import jQuery from "jquery";
-import ReactDOM from "react-dom";
+import React from 'react';
+import jQuery from 'jquery';
+import ReactDOM from 'react-dom';
 
 const AutoSelectText = React.createClass({
   componentDidMount() {
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 8ec24b8bd3..6e49ae0f42 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -1,7 +1,7 @@
-import moment from "moment";
-import React from "react";
-import { valueIsEqual } from "../utils";
-import TooltipMixin from "../mixins/tooltip";
+import moment from 'moment';
+import React from 'react';
+import { valueIsEqual } from '../utils';
+import TooltipMixin from '../mixins/tooltip';
 
 const BarChart = React.createClass({
   propTypes: {
@@ -24,7 +24,7 @@ const BarChart = React.createClass({
       return {
         html: true,
         placement: this.props.placement,
-        selector: ".tip",
+        selector: '.tip',
         viewport: this.props.viewport,
 
         // This callback is fired when the user hovers over the
@@ -52,10 +52,10 @@ const BarChart = React.createClass({
 
   getDefaultProps() {
     return {
-      className: "",
+      className: '',
       height: null,
-      label: "events",
-      placement: "bottom",
+      label: 'events',
+      placement: 'bottom',
       points: [],
       markers: [],
       width: null,
@@ -88,12 +88,12 @@ const BarChart = React.createClass({
 
   timeLabelAsHour(point) {
     let timeMoment = moment(point.x * 1000);
-    let nextMoment = timeMoment.clone().add(59, "minute");
+    let nextMoment = timeMoment.clone().add(59, 'minute');
 
     return (
       '<span>' +
-        timeMoment.format("LL") + '<br />' +
-        timeMoment.format("LT") + '  &#8594; ' + nextMoment.format("LT") +
+        timeMoment.format('LL') + '<br />' +
+        timeMoment.format('LT') + '  &#8594; ' + nextMoment.format('LT') +
       '</span>'
     );
   },
@@ -103,27 +103,27 @@ const BarChart = React.createClass({
 
     return (
       '<span>' +
-        timeMoment.format("LL") +
+        timeMoment.format('LL') +
       '</span>'
     );
   },
 
   timeLabelAsRange(interval, point) {
     let timeMoment = moment(point.x * 1000);
-    let nextMoment = timeMoment.clone().add(interval - 1, "second");
+    let nextMoment = timeMoment.clone().add(interval - 1, 'second');
 
     return (
       '<span>' +
         // e.g. Aug 23rd, 12:50 pm
-        timeMoment.format("MMM Do, h:mm a") +
-        ' &#8594 ' + nextMoment.format("MMM Do, h:mm a") +
+        timeMoment.format('MMM Do, h:mm a') +
+        ' &#8594 ' + nextMoment.format('MMM Do, h:mm a') +
       '</span>'
     );
   },
 
   timeLabelAsFull(point) {
     let timeMoment = moment(point.x * 1000);
-    return timeMoment.format("lll");
+    return timeMoment.format('lll');
   },
 
   getTimeLabel(point) {
@@ -150,14 +150,14 @@ const BarChart = React.createClass({
   },
 
   renderMarker(marker) {
-    let timeLabel = moment(marker.x * 1000).format("lll");
+    let timeLabel = moment(marker.x * 1000).format('lll');
     let title = (
       '<div style="width:130px">' +
         marker.label + '<br/>' +
         timeLabel +
       '</div>'
     );
-    let className = "chart-marker tip " + (marker.className || '');
+    let className = 'chart-marker tip ' + (marker.className || '');
 
     // example key: m-last-seen-22811123, m-first-seen-228191
     let key = ['m', marker.className, marker.x].join('-');
@@ -186,7 +186,7 @@ const BarChart = React.createClass({
 
   renderChartColumn(pointIdx, maxval, pointWidth) {
     let point = this.props.points[pointIdx];
-    let pct = this.floatFormat(point.y / maxval * 99, 2) + "%";
+    let pct = this.floatFormat(point.y / maxval * 99, 2) + '%';
 
     return (
       <a key={point.x}
@@ -201,7 +201,7 @@ const BarChart = React.createClass({
 
   renderChart() {
     let points = this.props.points;
-    let pointWidth = this.floatFormat(100.0 / points.length, 2) + "%";
+    let pointWidth = this.floatFormat(100.0 / points.length, 2) + '%';
 
     let maxval = this.maxPointValue();
 
@@ -226,7 +226,7 @@ const BarChart = React.createClass({
   },
 
   render() {
-    let figureClass = [this.props.className, 'barchart'].join(" ");
+    let figureClass = [this.props.className, 'barchart'].join(' ');
     let maxval = this.maxPointValue();
 
     return (
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index 217b7f54b6..650eac3b3a 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import ReactDOM from "react-dom";
+import React from 'react';
+import ReactDOM from 'react-dom';
 
 const ClippedBox = React.createClass({
   propTypes: {
@@ -40,9 +40,9 @@ const ClippedBox = React.createClass({
   },
 
   render() {
-    let className = "box-clippable";
+    let className = 'box-clippable';
     if (this.state.clipped) {
-      className += " clipped";
+      className += ' clipped';
     }
 
     return (
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index e54b08867e..69d9745e98 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const Count = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index 4e28bc378f..df9c746e72 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import moment from "moment";
-import ConfigStore from "../stores/configStore.jsx";
+import React from 'react';
+import moment from 'moment';
+import ConfigStore from '../stores/configStore.jsx';
 
 const DateTime = React.createClass({
   propTypes: {
@@ -13,7 +13,7 @@ const DateTime = React.createClass({
     let options = user ? user.options : {};
     let format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
 
-    if (typeof date === "string" || typeof date === "number") {
+    if (typeof date === 'string' || typeof date === 'number') {
       date = new Date(date);
     }
 
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index f05527d73c..6a47c4220d 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import classNames from "classnames";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import classNames from 'classnames';
 
-require("bootstrap/js/dropdown");
+require('bootstrap/js/dropdown');
 
 const DropdownLink = React.createClass({
   propTypes: {
@@ -21,11 +21,11 @@ const DropdownLink = React.createClass({
   },
 
   isOpen() {
-    return ReactDOM.findDOMNode(this).classList.contains("open");
+    return ReactDOM.findDOMNode(this).classList.contains('open');
   },
 
   close() {
-    ReactDOM.findDOMNode(this).classList.remove("open");
+    ReactDOM.findDOMNode(this).classList.remove('open');
   },
 
   onToggle(e) {
@@ -42,12 +42,12 @@ const DropdownLink = React.createClass({
 
   render() {
     let className = classNames({
-      "dropdown-toggle": true,
-      "disabled": this.props.disabled,
+      'dropdown-toggle': true,
+      'disabled': this.props.disabled,
     });
 
     let topLevelClasses = classNames({
-      "dropdown" : true,
+      'dropdown' : true,
     });
 
     return (
@@ -58,7 +58,7 @@ const DropdownLink = React.createClass({
             <i className="icon-arrow-down" />
           }
         </a>
-        <ul className={classNames(this.props.menuClasses, "dropdown-menu")}>
+        <ul className={classNames(this.props.menuClasses, 'dropdown-menu')}>
           {this.props.children}
         </ul>
       </span>
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index 4e0622159a..6b12973974 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const EventErrorItem = React.createClass({
   getInitialState(){
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index c260ac1c09..be57fe87d8 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -1,8 +1,8 @@
-import React from "react";
+import React from 'react';
 
-import EventDataSection from "./eventDataSection";
-import EventErrorItem from "./errorItem";
-import PropTypes from "../../proptypes";
+import EventDataSection from './eventDataSection';
+import EventErrorItem from './errorItem';
+import PropTypes from '../../proptypes';
 
 const EventErrors = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index 4c144a6dac..f6158e860a 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import PropTypes from "../../proptypes";
+import React from 'react';
+import PropTypes from '../../proptypes';
 
 const GroupEventDataSection = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 4af2f7908b..cd07a01185 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -1,15 +1,15 @@
-import React from "react";
+import React from 'react';
 
-import {logException} from "../../utils/logging";
-import EventDataSection from "./eventDataSection";
-import EventErrors from "./errors";
-import EventExtraData from "./extraData";
-import EventPackageData from "./packageData";
-import EventTags from "./eventTags";
-import EventMessage from "./message";
-import EventUser from "./user";
-import PropTypes from "../../proptypes";
-import utils from "../../utils";
+import {logException} from '../../utils/logging';
+import EventDataSection from './eventDataSection';
+import EventErrors from './errors';
+import EventExtraData from './extraData';
+import EventPackageData from './packageData';
+import EventTags from './eventTags';
+import EventMessage from './message';
+import EventUser from './user';
+import PropTypes from '../../proptypes';
+import utils from '../../utils';
 
 const EventEntries = React.createClass({
   propTypes: {
@@ -34,11 +34,11 @@ const EventEntries = React.createClass({
 
   // TODO(dcramer): make this extensible
   interfaces: {
-    exception: require("./interfaces/exception"),
-    request: require("./interfaces/request"),
-    stacktrace: require("./interfaces/stacktrace"),
-    template: require("./interfaces/template"),
-    csp: require("./interfaces/csp"),
+    exception: require('./interfaces/exception'),
+    request: require('./interfaces/request'),
+    stacktrace: require('./interfaces/stacktrace'),
+    template: require('./interfaces/template'),
+    csp: require('./interfaces/csp'),
   },
 
   render(){
@@ -56,7 +56,7 @@ const EventEntries = React.createClass({
         }
         return (
           <Component
-            key={"entry-" + entryIdx}
+            key={'entry-' + entryIdx}
             group={group}
             event={evt}
             type={entry.type}
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index d60b0d273c..fa7edbc2ba 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import Router from "react-router";
-import EventStore from "../../stores/eventStore";
-import Gravatar from "../gravatar";
-import TimeSince from "../timeSince";
+import React from 'react';
+import Router from 'react-router';
+import EventStore from '../../stores/eventStore';
+import Gravatar from '../gravatar';
+import TimeSince from '../timeSince';
 
 const EventRow = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index bdaff36b01..af48d9ae46 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import {Link} from "react-router";
-import _ from "underscore";
+import React from 'react';
+import {Link} from 'react-router';
+import _ from 'underscore';
 
-import PropTypes from "../../proptypes";
+import PropTypes from '../../proptypes';
 
-import EventDataSection from "./eventDataSection";
-import {isUrl} from "../../utils";
+import EventDataSection from './eventDataSection';
+import {isUrl} from '../../utils';
 
 const EventTags = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
index 9a9ada1e4e..226a3ebbb9 100644
--- a/src/sentry/static/sentry/app/components/events/extraData.jsx
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -1,9 +1,9 @@
-import React from "react";
+import React from 'react';
 
-import PropTypes from "../../proptypes";
-import {objectToArray} from "../../utils";
-import EventDataSection from "./eventDataSection";
-import DefinitionList from "./interfaces/definitionList";
+import PropTypes from '../../proptypes';
+import {objectToArray} from '../../utils';
+import EventDataSection from './eventDataSection';
+import DefinitionList from './interfaces/definitionList';
 
 const EventExtraData = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index fc540c7fcb..5f9f4d1146 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import PropTypes from "../../../proptypes";
+import React from 'react';
+import PropTypes from '../../../proptypes';
 
-import GroupEventDataSection from "../eventDataSection";
-import CSPContent from "./cspContent";
-import CSPHelp from "./cspHelp";
+import GroupEventDataSection from '../eventDataSection';
+import CSPContent from './cspContent';
+import CSPHelp from './cspHelp';
 
 function getView(view, data) {
   switch (view) {
@@ -50,9 +50,9 @@ const CSPInterface = React.createClass({
     var title = (
       <div>
         <div className="btn-group">
-          <a className={(view === "report" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleView.bind(this, "report")}>Report</a>
-          <a className={(view === "raw" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleView.bind(this, "raw")}>Raw</a>
-          <a className={(view === "help" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleView.bind(this, "help")}>Help</a>
+          <a className={(view === 'report' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'report')}>Report</a>
+          <a className={(view === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'raw')}>Raw</a>
+          <a className={(view === 'help' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'help')}>Help</a>
         </div>
         <h3>{'CSP Report'}</h3>
       </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
index 9263ae502b..129d566f54 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
@@ -1,7 +1,7 @@
-import React from "react";
+import React from 'react';
 
-import {objectToArray} from "../../../utils";
-import DefinitionList from "./definitionList";
+import {objectToArray} from '../../../utils';
+import DefinitionList from './definitionList';
 
 const CSPContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
index d338b793e5..4e4530eab3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const help = {
   'base-uri': `
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx
index 816b7b8bd1..e9c02bc163 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/definitionList.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import _ from "underscore";
+import React from 'react';
+import _ from 'underscore';
 
-import ContextData from "../../contextData";
+import ContextData from '../../contextData';
 
 const DefinitionList = React.createClass({
   propTypes: {
@@ -21,10 +21,10 @@ const DefinitionList = React.createClass({
       <dl className="vars">
         {data.map(([key, value]) => {
           return [
-            <dt key={"dt-" + key}>{key}</dt>,
+            <dt key={'dt-' + key}>{key}</dt>,
             this.props.isContextData
-              ? <dd key={"dd-" + key}><ContextData data={value}/></dd>
-              : <dd key={"dd-" + key}><pre>{'' + value || ' '}</pre></dd>
+              ? <dd key={'dd-' + key}><ContextData data={value}/></dd>
+              : <dd key={'dd-' + key}><pre>{'' + value || ' '}</pre></dd>
 
           ];
         })}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index ac6ceefb53..9a926fa620 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import ConfigStore from "../../../stores/configStore";
-import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../../proptypes";
-import ExceptionContent from "./exceptionContent";
-import RawExceptionContent from "./rawExceptionContent";
+import React from 'react';
+import ConfigStore from '../../../stores/configStore';
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import ExceptionContent from './exceptionContent';
+import RawExceptionContent from './rawExceptionContent';
 
 const ExceptionInterface = React.createClass({
   propTypes: {
@@ -14,25 +14,25 @@ const ExceptionInterface = React.createClass({
   },
 
   getInitialState() {
-    let user = ConfigStore.get("user");
+    let user = ConfigStore.get('user');
     // user may not be authenticated
     let options = user ? user.options : {};
     let platform = this.props.event.platform;
     let newestFirst;
     switch (options.stacktraceOrder) {
-      case "newestFirst":
+      case 'newestFirst':
         newestFirst = true;
         break;
-      case "newestLast":
+      case 'newestLast':
         newestFirst = false;
         break;
-      case "default":
+      case 'default':
       default:
-        newestFirst = (platform !== "python");
+        newestFirst = (platform !== 'python');
     }
 
     return {
-      stackView: (this.props.data.hasSystemFrames ? "app" : "full"),
+      stackView: (this.props.data.hasSystemFrames ? 'app' : 'full'),
       newestFirst: newestFirst
     };
   },
@@ -54,10 +54,10 @@ const ExceptionInterface = React.createClass({
       <div>
         <div className="btn-group">
           {data.hasSystemFrames &&
-            <a className={(stackView === "app" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "app")}>App Only</a>
+            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>App Only</a>
           }
-          <a className={(stackView === "full" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "full")}>Full</a>
-          <a className={(stackView === "raw" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "raw")}>Raw</a>
+          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>Full</a>
+          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>Raw</a>
         </div>
         <h3>
           {'Exception '}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 26e3af58d5..91f19a673a 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import {defined} from "../../../utils";
+import React from 'react';
+import {defined} from '../../../utils';
 
-import StacktraceContent from "./stacktraceContent";
+import StacktraceContent from './stacktraceContent';
 
 const ExceptionContent = React.createClass({
   propTypes: {
@@ -24,7 +24,7 @@ const ExceptionContent = React.createClass({
           {defined(exc.stacktrace) &&
             <StacktraceContent
                 data={exc.stacktrace}
-                includeSystemFrames={stackView === "full"}
+                includeSystemFrames={stackView === 'full'}
                 platform={this.props.platform}
                 newestFirst={this.props.newestFirst} />
           }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index cc7426e6d9..a4ea6ba3cb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import _ from "underscore";
-import classNames from "classnames";
-import {defined, objectIsEmpty, isUrl} from "../../../utils";
+import React from 'react';
+import _ from 'underscore';
+import classNames from 'classnames';
+import {defined, objectIsEmpty, isUrl} from '../../../utils';
 
-import TooltipMixin from "../../../mixins/tooltip";
-import FrameVariables from "./frameVariables";
+import TooltipMixin from '../../../mixins/tooltip';
+import FrameVariables from './frameVariables';
 
 
 const Frame = React.createClass({
@@ -15,8 +15,8 @@ const Frame = React.createClass({
   mixins: [
     TooltipMixin({
       html: true,
-      selector: ".tip",
-      trigger: "click"
+      selector: '.tip',
+      trigger: 'click'
     })
   ],
 
@@ -114,9 +114,9 @@ const Frame = React.createClass({
     let data = this.props.data;
     let context = '';
 
-    let outerClassName = "context";
+    let outerClassName = 'context';
     if (this.state.isExpanded) {
-      outerClassName += " expanded";
+      outerClassName += ' expanded';
     }
 
     let hasContextSource = defined(data.context) && data.context.length;
@@ -130,13 +130,13 @@ const Frame = React.createClass({
         <ol start={startLineNo} className={outerClassName}
             onClick={this.toggleContext}>
           {defined(data.errors) &&
-          <li className={expandable ? "expandable error" : "error"}
-              key="errors">{data.errors.join(", ")}</li>
+          <li className={expandable ? 'expandable error' : 'error'}
+              key="errors">{data.errors.join(', ')}</li>
           }
           {(data.context || []).map((line) => {
-            let liClassName = "expandable";
+            let liClassName = 'expandable';
             if (line[0] === data.lineNo) {
-              liClassName += " active";
+              liClassName += ' active';
             }
 
             let lineWs;
@@ -169,9 +169,9 @@ const Frame = React.createClass({
     let data = this.props.data;
 
     let className = classNames({
-      "frame": true,
-      "system-frame": !data.inApp,
-      "frame-errors": data.errors,
+      'frame': true,
+      'system-frame': !data.inApp,
+      'frame-errors': data.errors,
     });
 
     let context = this.renderContext();
@@ -184,7 +184,7 @@ const Frame = React.createClass({
               title="Toggle context"
               onClick={this.toggleContext}
               className="btn btn-sm btn-default btn-toggle">
-              <span className={this.state.isExpanded ? "icon-minus" : "icon-plus"}/>
+              <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'}/>
             </a>
             : ''
           }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
index 4e7ab2a9df..1dacaf9087 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
@@ -1,6 +1,6 @@
-import React from "react";
+import React from 'react';
 
-import ContextData from "../../contextData";
+import ContextData from '../../contextData';
 
 const FrameVariables = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 234c809293..97c554cd4b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import rawStacktraceContent from "./rawStacktraceContent";
+import React from 'react';
+import rawStacktraceContent from './rawStacktraceContent';
 
 const RawExceptionContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index b42530b206..fa6a4be059 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -1,4 +1,4 @@
-import {defined, trim} from "../../../utils";
+import {defined, trim} from '../../../utils';
 
 function getJavaScriptFrame(frame) {
   let result = '';
@@ -91,13 +91,13 @@ export function getJavaFrame(frame) {
 
 function getFrame(frame, platform) {
   switch (platform) {
-    case "javascript":
+    case 'javascript':
       return getJavaScriptFrame(frame);
-    case "ruby":
+    case 'ruby':
       return getRubyFrame(frame);
-    case "python":
+    case 'python':
       return getPythonFrame(frame);
-    case "java":
+    case 'java':
       return getJavaFrame(frame);
     default:
       return getPythonFrame(frame);
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index 40db701df9..4260131164 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../../proptypes";
-import RichHttpContent from "./richHttpContent";
-import {getCurlCommand} from "./utils";
+import React from 'react';
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import RichHttpContent from './richHttpContent';
+import {getCurlCommand} from './utils';
 
-import RequestActions from "./requestActions";
+import RequestActions from './requestActions';
 
 const RequestInterface = React.createClass({
   propTypes: {
@@ -22,7 +22,7 @@ const RequestInterface = React.createClass({
 
   getInitialState() {
     return {
-      view: "rich"
+      view: 'rich'
     };
   },
 
@@ -54,7 +54,7 @@ const RequestInterface = React.createClass({
     }
 
     // lol
-    let parsedUrl = document.createElement("a");
+    let parsedUrl = document.createElement('a');
     parsedUrl.href = fullUrl;
 
     let children = [];
@@ -70,10 +70,10 @@ const RequestInterface = React.createClass({
           }
         </div>,
         <div className="btn-group">
-          <a className={(view === "rich" ? "active" : "") + " btn btn-default btn-sm"}
-             onClick={this.toggleView.bind(this, "rich")}>Rich</a>
-          <a className={(view === "curl" ? "active" : "") + " btn btn-default btn-sm"}
-             onClick={this.toggleView.bind(this, "curl")}><code>curl</code></a>
+          <a className={(view === 'rich' ? 'active' : '') + ' btn btn-default btn-sm'}
+             onClick={this.toggleView.bind(this, 'rich')}>Rich</a>
+          <a className={(view === 'curl' ? 'active' : '') + ' btn btn-default btn-sm'}
+             onClick={this.toggleView.bind(this, 'curl')}><code>curl</code></a>
         </div>
       );
     }
@@ -96,7 +96,7 @@ const RequestInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {view === "curl" ?
+        {view === 'curl' ?
           <pre>{getCurlCommand(data)}</pre>
         :
           <RichHttpContent data={data} />
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx b/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
index 65bc75dd70..544049d3d1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import ConfigStore from "../../../stores/configStore";
+import React from 'react';
+import ConfigStore from '../../../stores/configStore';
 
 const RequestActions = React.createClass({
   render(){
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index e0906f7bc4..c00152eba2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -1,11 +1,11 @@
-import React from "react";
+import React from 'react';
 
-import ClippedBox from "../../clippedBox";
-import DefinitionList from "./definitionList";
-import ContextData from "../../contextData";
+import ClippedBox from '../../clippedBox';
+import DefinitionList from './definitionList';
+import ContextData from '../../contextData';
 
-import {objectIsEmpty} from "../../../utils";
-import queryString from "query-string";
+import {objectIsEmpty} from '../../../utils';
+import queryString from 'query-string';
 
 const RichHttpContent = React.createClass({
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index b220630683..8e5f75eb74 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import ConfigStore from "../../../stores/configStore";
-import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../../proptypes";
-import rawStacktraceContent from "./rawStacktraceContent";
-import StacktraceContent from "./stacktraceContent";
+import React from 'react';
+import ConfigStore from '../../../stores/configStore';
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import rawStacktraceContent from './rawStacktraceContent';
+import StacktraceContent from './stacktraceContent';
 
 const StacktraceInterface = React.createClass({
   propTypes: {
@@ -14,25 +14,25 @@ const StacktraceInterface = React.createClass({
   },
 
   getInitialState() {
-    let user = ConfigStore.get("user");
+    let user = ConfigStore.get('user');
     // user may not be authenticated
     let options = user ? user.options : {};
     let platform = this.props.event.platform;
     let newestFirst;
     switch (options.stacktraceOrder) {
-      case "newestFirst":
+      case 'newestFirst':
         newestFirst = true;
         break;
-      case "newestLast":
+      case 'newestLast':
         newestFirst = false;
         break;
-      case "default": // is "default" a valid value? or bad case statement
+      case 'default': // is "default" a valid value? or bad case statement
       default:
-        newestFirst = (platform === "python");
+        newestFirst = (platform === 'python');
     }
 
     return {
-      stackView: (this.props.data.hasSystemFrames ? "app" : "full"),
+      stackView: (this.props.data.hasSystemFrames ? 'app' : 'full'),
       newestFirst: newestFirst
     };
   },
@@ -54,10 +54,10 @@ const StacktraceInterface = React.createClass({
       <div>
         <div className="btn-group">
           {data.hasSystemFrames &&
-            <a className={(stackView === "app" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "app")}>App Only</a>
+            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'app')}>App Only</a>
           }
-          <a className={(stackView === "full" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "full")}>Full</a>
-          <a className={(stackView === "raw" ? "active" : "") + " btn btn-default btn-sm"} onClick={this.toggleStack.bind(this, "raw")}>Raw</a>
+          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'full')}>Full</a>
+          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleStack.bind(this, 'raw')}>Raw</a>
         </div>
         <h3>
           {'Stacktrace '}
@@ -77,14 +77,14 @@ const StacktraceInterface = React.createClass({
           type={this.props.type}
           title={title}
           wrapTitle={false}>
-        {stackView === "raw" ?
+        {stackView === 'raw' ?
           <pre className="traceback plain">
             {rawStacktraceContent(data, this.props.platform)}
           </pre>
         :
           <StacktraceContent
               data={data}
-              includeSystemFrames={stackView === "full"}
+              includeSystemFrames={stackView === 'full'}
               platform={evt.platform}
               newestFirst={newestFirst} />
         }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index 029d539f7f..980b2bcc0e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -1,6 +1,6 @@
-import React from "react";
+import React from 'react';
 //import GroupEventDataSection from "../eventDataSection";
-import Frame from "./frame";
+import Frame from './frame';
 
 const StacktraceContent = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index 0fd8b71131..f23e4aec97 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import GroupEventDataSection from "../eventDataSection";
-import PropTypes from "../../../proptypes";
-import Frame from "./frame";
+import React from 'react';
+import GroupEventDataSection from '../eventDataSection';
+import PropTypes from '../../../proptypes';
+import Frame from './frame';
 
 const TemplateInterface = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index c31c6da430..bc1416d12f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -1,4 +1,4 @@
-import {defined} from "../../../utils";
+import {defined} from '../../../utils';
 
 export function escapeQuotes(v) {
   return v.replace(/"/g, '\\"');
@@ -28,7 +28,7 @@ export function getCurlCommand(data) {
     result += ' \\\n -H "' + header[0] + ': ' + escapeQuotes(header[1]) + '"';
   }
 
-  if (typeof data.data === "string") {
+  if (typeof data.data === 'string') {
     result += ' \\\n --data "' + escapeQuotes(data.data) + '"';
   } else if (defined(data.data)) {
     result += ' \\\n --data "' + escapeQuotes(jQuery.param(data.data)) + '"';
diff --git a/src/sentry/static/sentry/app/components/events/message.jsx b/src/sentry/static/sentry/app/components/events/message.jsx
index 7785c99431..7b8ea87258 100644
--- a/src/sentry/static/sentry/app/components/events/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/message.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import EventDataSection from "./eventDataSection";
-import utils from "../../utils";
+import React from 'react';
+import EventDataSection from './eventDataSection';
+import utils from '../../utils';
 
 const Message = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index 2d738979c1..33af9ed61d 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import PropTypes from "../../proptypes";
+import React from 'react';
+import PropTypes from '../../proptypes';
 
-import EventDataSection from "./eventDataSection";
-import ClippedBox from "../clippedBox";
+import EventDataSection from './eventDataSection';
+import ClippedBox from '../clippedBox';
 
 const EventPackageData = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/user.jsx b/src/sentry/static/sentry/app/components/events/user.jsx
index 6575d1b70e..c2b5b8bcc9 100644
--- a/src/sentry/static/sentry/app/components/events/user.jsx
+++ b/src/sentry/static/sentry/app/components/events/user.jsx
@@ -1,8 +1,8 @@
-import _ from "underscore";
-import React from "react";
-import Gravatar from "../../components/gravatar";
-import DefinitionList from "./interfaces/definitionList";
-import EventDataSection from "./eventDataSection";
+import _ from 'underscore';
+import React from 'react';
+import Gravatar from '../../components/gravatar';
+import DefinitionList from './interfaces/definitionList';
+import EventDataSection from './eventDataSection';
 
 
 const EventUser = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/fileSize.jsx b/src/sentry/static/sentry/app/components/fileSize.jsx
index c63fca4583..42228ecc84 100644
--- a/src/sentry/static/sentry/app/components/fileSize.jsx
+++ b/src/sentry/static/sentry/app/components/fileSize.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const FileSize = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
index d2d35b09f3..a94d9c6399 100644
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ b/src/sentry/static/sentry/app/components/flotChart.jsx
@@ -10,17 +10,17 @@ require('flot/jquery.flot.time');
 require('flot-tooltip/jquery.flot.tooltip');
 
 let timeUnitSize = {
-  "second": 1000,
-  "minute": 60 * 1000,
-  "hour": 60 * 60 * 1000,
-  "day": 24 * 60 * 60 * 1000,
-  "month": 30 * 24 * 60 * 60 * 1000,
-  "quarter": 3 * 30 * 24 * 60 * 60 * 1000,
-  "year": 365.2425 * 24 * 60 * 60 * 1000
+  'second': 1000,
+  'minute': 60 * 1000,
+  'hour': 60 * 60 * 1000,
+  'day': 24 * 60 * 60 * 1000,
+  'month': 30 * 24 * 60 * 60 * 1000,
+  'quarter': 3 * 30 * 24 * 60 * 60 * 1000,
+  'year': 365.2425 * 24 * 60 * 60 * 1000
 };
 
 let numberWithCommas = function(x) {
-  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
+  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
 };
 
 let buildTooltipHandler = function(series) {
@@ -94,8 +94,8 @@ const FlotChart = React.createClass({
     let series = this.props.plotData;
     let plotOptions = {
       xaxis: {
-        mode: "time",
-        minTickSize: [1, "day"],
+        mode: 'time',
+        minTickSize: [1, 'day'],
         tickFormatter: tickFormatter
       },
       yaxis: {
diff --git a/src/sentry/static/sentry/app/components/footer.jsx b/src/sentry/static/sentry/app/components/footer.jsx
index e76761cef3..4a24db9f96 100644
--- a/src/sentry/static/sentry/app/components/footer.jsx
+++ b/src/sentry/static/sentry/app/components/footer.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import ConfigStore from "../stores/configStore";
-import HookStore from "../stores/hookStore";
+import React from 'react';
+import ConfigStore from '../stores/configStore';
+import HookStore from '../stores/hookStore';
 
 const Footer = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/components/gravatar.jsx b/src/sentry/static/sentry/app/components/gravatar.jsx
index c311460287..1565266aaa 100644
--- a/src/sentry/static/sentry/app/components/gravatar.jsx
+++ b/src/sentry/static/sentry/app/components/gravatar.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import $ from "jquery";
-import MD5 from "crypto-js/md5";
+import React from 'react';
+import $ from 'jquery';
+import MD5 from 'crypto-js/md5';
 
 const Gravatar = React.createClass({
   propTypes: {
@@ -11,13 +11,13 @@ const Gravatar = React.createClass({
 
   getDefaultProps() {
     return {
-      className: "avatar",
+      className: 'avatar',
       size: 64
     };
   },
 
   buildGravatarUrl() {
-    let url = "https://secure.gravatar.com/avatar/";
+    let url = 'https://secure.gravatar.com/avatar/';
 
     url += MD5(this.props.email.toLowerCase());
 
@@ -26,7 +26,7 @@ const Gravatar = React.createClass({
       d: this.props.default || undefined
     };
 
-    url += "?" + $.param(query);
+    url += '?' + $.param(query);
 
     return url;
   },
diff --git a/src/sentry/static/sentry/app/components/group/chart.jsx b/src/sentry/static/sentry/app/components/group/chart.jsx
index 4cbaac0b06..68ea32fa05 100644
--- a/src/sentry/static/sentry/app/components/group/chart.jsx
+++ b/src/sentry/static/sentry/app/components/group/chart.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import BarChart from "../../components/barChart";
-import PropTypes from "../../proptypes";
+import React from 'react';
+import BarChart from '../../components/barChart';
+import PropTypes from '../../proptypes';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 const GroupChart = React.createClass({
@@ -17,23 +17,23 @@ const GroupChart = React.createClass({
     let points = stats.map((point) => {
       return {x: point[0], y: point[1]};
     });
-    let className = "bar-chart group-chart " + (this.props.className || '');
+    let className = 'bar-chart group-chart ' + (this.props.className || '');
 
     let markers = [];
     let firstSeenX = new Date(this.props.firstSeen).getTime() / 1000;
     let lastSeenX = new Date(this.props.lastSeen).getTime() / 1000;
     if (firstSeenX >= points[0].x) {
       markers.push({
-        label: "First seen",
+        label: 'First seen',
         x: firstSeenX,
-        className: "first-seen"
+        className: 'first-seen'
       });
     }
     if (lastSeenX >= points[0].x) {
       markers.push({
-        label: "Last seen",
+        label: 'Last seen',
         x: lastSeenX,
-        className: "last-seen"
+        className: 'last-seen'
       });
     }
 
diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index f1cdebbcc1..e0b6130680 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import DateTime from "../../components/dateTime";
-import TimeSince from "../../components/timeSince";
-import Version from "../../components/version";
-import utils from "../../utils";
+import React from 'react';
+import DateTime from '../../components/dateTime';
+import TimeSince from '../../components/timeSince';
+import Version from '../../components/version';
+import utils from '../../utils';
 
 const SeenInfo = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index abe0e617cf..49ffca2a59 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import GroupChart from "./chart";
-import GroupState from "../../mixins/groupState";
-import SeenInfo from "./seenInfo";
-import TagDistributionMeter from "./tagDistributionMeter";
+import React from 'react';
+import GroupChart from './chart';
+import GroupState from '../../mixins/groupState';
+import SeenInfo from './seenInfo';
+import TagDistributionMeter from './tagDistributionMeter';
 
 const GroupSidebar = React.createClass({
   mixins: [GroupState],
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index f84dfd9d4d..568c98f1b5 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import {Link} from "react-router";
-import ApiMixin from "../../mixins/apiMixin";
-import PropTypes from "../../proptypes";
-import TooltipMixin from "../../mixins/tooltip";
-import {escape, percent} from "../../utils";
+import React from 'react';
+import {Link} from 'react-router';
+import ApiMixin from '../../mixins/apiMixin';
+import PropTypes from '../../proptypes';
+import TooltipMixin from '../../mixins/tooltip';
+import {escape, percent} from '../../utils';
 
 const TagDistributionMeter = React.createClass({
   propTypes: {
@@ -18,8 +18,8 @@ const TagDistributionMeter = React.createClass({
     ApiMixin,
     TooltipMixin({
       html: true,
-      selector: ".segment",
-      container: "body"
+      selector: '.segment',
+      container: 'body'
     })
   ],
 
@@ -90,7 +90,7 @@ const TagDistributionMeter = React.createClass({
           return (
             <Link
                 key={value.value}
-                className="segment" style={{width: pct + "%"}}
+                className="segment" style={{width: pct + '%'}}
                 to={`/${orgId}/${projectId}/group/${this.props.group.id}/tags/${this.props.tag}/`}
                 title={'<div class="truncate">' + escape(value.name) + '</div>' + pctLabel + '%'}>
               <span className="tag-description">
@@ -103,7 +103,7 @@ const TagDistributionMeter = React.createClass({
         {hasOther &&
           <Link
               key="other"
-              className="segment" style={{width: otherPct + "%"}}
+              className="segment" style={{width: otherPct + '%'}}
               to={`/${orgId}/${projectId}/group/${this.props.group.id}/tags/${this.props.tag}/`}
               title={'Other<br/>' + otherPctLabel + '%'}>
             <span className="tag-description">
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 44fe9ee4f9..58db2acccc 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -1,14 +1,14 @@
-import React from "react";
-import Reflux from "reflux";
-import jQuery from "jquery";
-import api from "../api";
-import GroupListHeader from "../components/groupListHeader";
-import GroupStore from "../stores/groupStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import ProjectState from "../mixins/projectState";
-import StreamGroup from "../components/stream/group";
-import utils from "../utils";
+import React from 'react';
+import Reflux from 'reflux';
+import jQuery from 'jquery';
+import api from '../api';
+import GroupListHeader from '../components/groupListHeader';
+import GroupStore from '../stores/groupStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import ProjectState from '../mixins/projectState';
+import StreamGroup from '../components/stream/group';
+import utils from '../utils';
 
 const GroupList = React.createClass({
   propTypes: {
@@ -24,7 +24,7 @@ const GroupList = React.createClass({
 
   mixins: [
     ProjectState,
-    Reflux.listenTo(GroupStore, "onGroupChange"),
+    Reflux.listenTo(GroupStore, 'onGroupChange'),
   ],
 
   getDefaultProps() {
@@ -125,7 +125,7 @@ const GroupList = React.createClass({
     let wrapperClass;
 
     if (!this.props.bulkActions) {
-      wrapperClass = "stream-no-bulk-actions";
+      wrapperClass = 'stream-no-bulk-actions';
     }
 
     let {orgId, projectId} = this.props;
diff --git a/src/sentry/static/sentry/app/components/groupListHeader.jsx b/src/sentry/static/sentry/app/components/groupListHeader.jsx
index adc21c1228..d7c7a814b6 100644
--- a/src/sentry/static/sentry/app/components/groupListHeader.jsx
+++ b/src/sentry/static/sentry/app/components/groupListHeader.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const GroupListHeader = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/components/header/broadcasts.jsx b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
index f1d4f27f53..9ecbab93fc 100644
--- a/src/sentry/static/sentry/app/components/header/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/header/broadcasts.jsx
@@ -1,8 +1,8 @@
-import React from "react";
+import React from 'react';
 
-import api from "../../api";
-import DropdownLink from "../dropdownLink";
-import LoadingIndicator from "../loadingIndicator";
+import api from '../../api';
+import DropdownLink from '../dropdownLink';
+import LoadingIndicator from '../loadingIndicator';
 
 var Broadcasts = React.createClass({
   getInitialState() {
@@ -30,7 +30,7 @@ var Broadcasts = React.createClass({
 
   fetchData() {
     api.request('/broadcasts/', {
-      method: "GET",
+      method: 'GET',
       success: (data) => {
         this.setState({
           broadcasts: data,
@@ -68,7 +68,7 @@ var Broadcasts = React.createClass({
       return;
 
     api.request('/broadcasts/', {
-      method: "PUT",
+      method: 'PUT',
       query: {id: broadcastIds},
       data: {
         hasSeen: '1'
diff --git a/src/sentry/static/sentry/app/components/header/index.jsx b/src/sentry/static/sentry/app/components/header/index.jsx
index 383c815fdf..947571b724 100644
--- a/src/sentry/static/sentry/app/components/header/index.jsx
+++ b/src/sentry/static/sentry/app/components/header/index.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import ConfigStore from "../../stores/configStore";
-import OrganizationState from "../../mixins/organizationState";
-import {Link} from "react-router";
+import React from 'react';
+import ConfigStore from '../../stores/configStore';
+import OrganizationState from '../../mixins/organizationState';
+import {Link} from 'react-router';
 
-import Broadcasts from "./broadcasts";
-import UserNav from "./userNav";
-import OrganizationSelector from "./organizationSelector";
+import Broadcasts from './broadcasts';
+import UserNav from './userNav';
+import OrganizationSelector from './organizationSelector';
 
 const Header = React.createClass({
   mixins: [OrganizationState],
diff --git a/src/sentry/static/sentry/app/components/header/organizationSelector.jsx b/src/sentry/static/sentry/app/components/header/organizationSelector.jsx
index f9f4088ae7..5714f010f9 100644
--- a/src/sentry/static/sentry/app/components/header/organizationSelector.jsx
+++ b/src/sentry/static/sentry/app/components/header/organizationSelector.jsx
@@ -1,10 +1,10 @@
-import React from "react";
+import React from 'react';
 
-import MenuItem from "../menuItem";
-import DropdownLink from "../dropdownLink";
-import AppState from "../../mixins/appState";
-import OrganizationStore from "../../stores/organizationStore";
-import ConfigStore from "../../stores/configStore";
+import MenuItem from '../menuItem';
+import DropdownLink from '../dropdownLink';
+import AppState from '../../mixins/appState';
+import OrganizationStore from '../../stores/organizationStore';
+import ConfigStore from '../../stores/configStore';
 
 const OrganizationSelector = React.createClass({
   mixins: [
@@ -29,7 +29,7 @@ const OrganizationSelector = React.createClass({
     return (
       <DropdownLink
           menuClasses="dropdown-menu-right"
-          topLevelClasses={(this.props.className || "") + " org-selector"}
+          topLevelClasses={(this.props.className || '') + ' org-selector'}
           title={activeOrg.name}>
         {OrganizationStore.getAll().map((org) => {
           return (
diff --git a/src/sentry/static/sentry/app/components/header/userNav.jsx b/src/sentry/static/sentry/app/components/header/userNav.jsx
index 8c31027d55..40abcc0184 100644
--- a/src/sentry/static/sentry/app/components/header/userNav.jsx
+++ b/src/sentry/static/sentry/app/components/header/userNav.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import ConfigStore from "../../stores/configStore";
-import DropdownLink from "../dropdownLink";
-import Gravatar from "../gravatar";
-import MenuItem from "../menuItem";
+import React from 'react';
+import ConfigStore from '../../stores/configStore';
+import DropdownLink from '../dropdownLink';
+import Gravatar from '../gravatar';
+import MenuItem from '../menuItem';
 
 const UserNav = React.createClass({
   shouldComponentUpdate(nextProps, nextState) {
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index 2992734531..0a5517e1ae 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import Reflux from "reflux";
+import React from 'react';
+import Reflux from 'reflux';
 import IndicatorStore from '../stores/indicatorStore';
 
 const Indicators = React.createClass({
   mixins: [
-    Reflux.connect(IndicatorStore, "items")
+    Reflux.connect(IndicatorStore, 'items')
   ],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 0bdce84531..49f8632263 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import Modal from "react-bootstrap/lib/Modal";
+import React from 'react';
+import Modal from 'react-bootstrap/lib/Modal';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 const LinkWithConfirmation = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 9096e08a6c..64c87ae2bd 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import {Link, History} from "react-router";
+import React from 'react';
+import {Link, History} from 'react-router';
 import classNames from 'classnames';
 
 const ListLink = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/loadingError.jsx b/src/sentry/static/sentry/app/components/loadingError.jsx
index d776933f7d..82c6943760 100644
--- a/src/sentry/static/sentry/app/components/loadingError.jsx
+++ b/src/sentry/static/sentry/app/components/loadingError.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const LoadingError = React.createClass({
   propTypes: {
@@ -8,7 +8,7 @@ const LoadingError = React.createClass({
 
   getDefaultProps() {
     return {
-      message: "There was an error loading data."
+      message: 'There was an error loading data.'
     };
   },
 
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index b3e901a1d5..d3e7eaedc9 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -1,5 +1,5 @@
-import classNames from "classnames";
-import React from "react";
+import classNames from 'classnames';
+import React from 'react';
 
 const LoadingIndicator = React.createClass({
   propTypes: {
@@ -14,10 +14,10 @@ const LoadingIndicator = React.createClass({
 
   render() {
     let className = classNames({
-      "loading": true,
-      "mini": this.props.mini,
-      "global": this.props.global,
-      "triangle": this.props.triangle,
+      'loading': true,
+      'mini': this.props.mini,
+      'global': this.props.global,
+      'triangle': this.props.triangle,
     });
 
     return (
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 5d3a2abb06..73218c12a8 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import {Link} from "react-router";
-import classNames from "classnames";
+import React from 'react';
+import {Link} from 'react-router';
+import classNames from 'classnames';
 
 const MenuItem = React.createClass({
   propTypes: {
@@ -50,9 +50,9 @@ const MenuItem = React.createClass({
 
   render() {
     let classes = {
-      "dropdown-header": this.props.header,
-      "divider": this.props.divider,
-      "active": this.props.isActive
+      'dropdown-header': this.props.header,
+      'divider': this.props.divider,
+      'active': this.props.isActive
     };
 
     let children = null;
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index c5ad20ffd2..583659eda0 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -1,7 +1,7 @@
-import React from "react";
+import React from 'react';
 
-import AlertActions from "../actions/alertActions";
-import api from "../api";
+import AlertActions from '../actions/alertActions';
+import api from '../api';
 
 const ERR_JOIN = 'There was an error while trying to join the team.';
 
@@ -46,7 +46,7 @@ const MissingProjectMembership = React.createClass({
       <div className="container">
         <div className="box alert-box">
           <span className="icon icon-exclamation"></span>
-          <p>{"You're not a member of this project."}</p>
+          <p>{'You\'re not a member of this project.'}</p>
           {openMembership ?
             <p>To view this data you must first join the {team.name} team.</p>
           :
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index c0844f7b2c..373b466745 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 const MutedBox = React.createClass({
diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 6d43c852ff..bf6a697935 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import OrganizationHomeSidebar from "./homeSidebar";
-import OrganizationState from "../../mixins/organizationState";
+import React from 'react';
+import OrganizationHomeSidebar from './homeSidebar';
+import OrganizationState from '../../mixins/organizationState';
 
 const HomeContainer = React.createClass({
   mixins: [OrganizationState],
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index f03cfa8fae..01c060f7a4 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -1,10 +1,10 @@
-import React from "react";
+import React from 'react';
 
-import ListLink from "../listLink";
-import OrganizationState from "../../mixins/organizationState";
+import ListLink from '../listLink';
+import OrganizationState from '../../mixins/organizationState';
 
-import ConfigStore from "../../stores/configStore";
-import HookStore from "../../stores/hookStore";
+import ConfigStore from '../../stores/configStore';
+import HookStore from '../../stores/hookStore';
 
 const HomeSidebar = React.createClass({
   mixins: [OrganizationState],
diff --git a/src/sentry/static/sentry/app/components/pagination.jsx b/src/sentry/static/sentry/app/components/pagination.jsx
index 17179c34f7..05cebf070a 100644
--- a/src/sentry/static/sentry/app/components/pagination.jsx
+++ b/src/sentry/static/sentry/app/components/pagination.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import utils from "../utils";
+import React from 'react';
+import utils from '../utils';
 
 const Pagination = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index bbaa8cf5dd..2b04d111d1 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import {Link} from "react-router";
-import ConfigStore from "../../stores/configStore";
+import React from 'react';
+import {Link} from 'react-router';
+import ConfigStore from '../../stores/configStore';
 
-import ProjectSelector from "./projectSelector";
+import ProjectSelector from './projectSelector';
 
 const ProjectHeader = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index fb57b09e50..0c64456ce1 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import {Link} from "react-router";
-import jQuery from "jquery";
-import ConfigStore from "../../stores/configStore";
-import DropdownLink from "../dropdownLink";
-import MenuItem from "../menuItem";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import {Link} from 'react-router';
+import jQuery from 'jquery';
+import ConfigStore from '../../stores/configStore';
+import DropdownLink from '../dropdownLink';
+import MenuItem from '../menuItem';
 
 const ProjectSelector = React.createClass({
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/components/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
index 5b9cf53978..267a2309b5 100644
--- a/src/sentry/static/sentry/app/components/searchBar.jsx
+++ b/src/sentry/static/sentry/app/components/searchBar.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import ReactDOM from "react-dom";
+import React from 'react';
+import ReactDOM from 'react-dom';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 const SearchBar = React.createClass({
@@ -8,8 +8,8 @@ const SearchBar = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: "",
-      query: "",
+      defaultQuery: '',
+      query: '',
       onSearch: function() {},
       onQueryChange: function() {}
     };
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index f85660b9dd..fea1a4fb2a 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import jQuery from "jquery";
+import React from 'react';
+import jQuery from 'jquery';
 
 const SelectInput = React.createClass({
   getDefaultProps() {
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 4a0b2210b5..55b9d6620d 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -1,18 +1,18 @@
-import jQuery from "jquery";
-import React from "react";
-import Reflux from "reflux";
-import {Link} from "react-router";
+import jQuery from 'jquery';
+import React from 'react';
+import Reflux from 'reflux';
+import {Link} from 'react-router';
 
-import AssigneeSelector from "../assigneeSelector";
-import Count from "../count";
-import GroupChart from "./groupChart";
-import GroupCheckBox from "./groupCheckBox";
-import TimeSince from "../timeSince";
+import AssigneeSelector from '../assigneeSelector';
+import Count from '../count';
+import GroupChart from './groupChart';
+import GroupCheckBox from './groupCheckBox';
+import TimeSince from '../timeSince';
 
-import GroupStore from "../../stores/groupStore";
-import SelectedGroupStore from "../../stores/selectedGroupStore";
+import GroupStore from '../../stores/groupStore';
+import SelectedGroupStore from '../../stores/selectedGroupStore';
 
-import {valueIsEqual} from "../../utils";
+import {valueIsEqual} from '../../utils';
 
 const StreamGroup = React.createClass({
   propTypes: {
@@ -24,13 +24,13 @@ const StreamGroup = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
+    Reflux.listenTo(GroupStore, 'onGroupChange')
   ],
 
   getDefaultProps() {
     return {
       canSelect: true,
-      id: "",
+      id: '',
       statsPeriod: '24h'
     };
   },
@@ -85,21 +85,21 @@ const StreamGroup = React.createClass({
     let data = this.state.data;
     let userCount = data.userCount;
 
-    let className = "group row";
+    let className = 'group row';
     if (data.isBookmarked) {
-      className += " isBookmarked";
+      className += ' isBookmarked';
     }
     if (data.hasSeen) {
-      className += " hasSeen";
+      className += ' hasSeen';
     }
-    if (data.status === "resolved") {
-      className += " isResolved";
+    if (data.status === 'resolved') {
+      className += ' isResolved';
     }
-    if (data.status === "muted") {
-      className += " isMuted";
+    if (data.status === 'muted') {
+      className += ' isMuted';
     }
 
-    className += " level-" + data.level;
+    className += ' level-' + data.level;
 
     let {id, orgId, projectId} = this.props;
 
@@ -140,7 +140,7 @@ const StreamGroup = React.createClass({
               }
               {data.logger &&
                 <li className="event-annotation">
-                  <Link to={`/${orgId}/${projectId}`} query={{query: "logger:" + data.logger}}>
+                  <Link to={`/${orgId}/${projectId}`} query={{query: 'logger:' + data.logger}}>
                     {data.logger}
                   </Link>
                 </li>
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 2ae18d7611..78ec7a30d1 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import Reflux from "reflux";
-import BarChart from "../barChart";
-import GroupStore from "../../stores/groupStore";
-import {valueIsEqual} from "../../utils";
+import React from 'react';
+import Reflux from 'reflux';
+import BarChart from '../barChart';
+import GroupStore from '../../stores/groupStore';
+import {valueIsEqual} from '../../utils';
 
 const GroupChart = React.createClass({
   propTypes: {
@@ -11,7 +11,7 @@ const GroupChart = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
+    Reflux.listenTo(GroupStore, 'onGroupChange')
   ],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
index 650019f6c1..97d84bd001 100644
--- a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import Reflux from "reflux";
+import React from 'react';
+import Reflux from 'reflux';
 
-import SelectedGroupStore from "../../stores/selectedGroupStore";
+import SelectedGroupStore from '../../stores/selectedGroupStore';
 
 const GroupCheckBox = React.createClass({
   propTypes: {
@@ -9,7 +9,7 @@ const GroupCheckBox = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(SelectedGroupStore, "onSelectedGroupChange")
+    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange')
   ],
 
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index ea85c31457..8d932d3d7d 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import moment from "moment";
+import React from 'react';
+import moment from 'moment';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 import ConfigStore from '../stores/configStore.jsx';
 
@@ -15,7 +15,7 @@ const TimeSince = React.createClass({
 
   statics: {
     getDateObj(date) {
-      if (typeof date === "string" || typeof date === "number") {
+      if (typeof date === 'string' || typeof date === 'number') {
         date = new Date(date);
       }
       return date;
diff --git a/src/sentry/static/sentry/app/components/userInfo.jsx b/src/sentry/static/sentry/app/components/userInfo.jsx
index 4ce2dd68c1..1575cc98d7 100644
--- a/src/sentry/static/sentry/app/components/userInfo.jsx
+++ b/src/sentry/static/sentry/app/components/userInfo.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 function getUserDisplayName(name) {
   let parts = name.split(/@/);
diff --git a/src/sentry/static/sentry/app/components/version.jsx b/src/sentry/static/sentry/app/components/version.jsx
index 6f7ccef4d5..a352ec5419 100644
--- a/src/sentry/static/sentry/app/components/version.jsx
+++ b/src/sentry/static/sentry/app/components/version.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import {Link} from "react-router";
+import React from 'react';
+import {Link} from 'react-router';
 
 const Version = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/mixins/apiMixin.jsx b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
index 63b5dc1ce3..0597dc0d3e 100644
--- a/src/sentry/static/sentry/app/mixins/apiMixin.jsx
+++ b/src/sentry/static/sentry/app/mixins/apiMixin.jsx
@@ -1,4 +1,4 @@
-import api from "../api";
+import api from '../api';
 
 let ApiMixin = {
   componentWillMount() {
@@ -19,7 +19,7 @@ let ApiMixin = {
     options.complete = function(...params) {
       self._pendingRequests.delete(this);
 
-      if (typeof completeFunc !== "undefined") {
+      if (typeof completeFunc !== 'undefined') {
         completeFunc.apply(this, params);
       }
     };
diff --git a/src/sentry/static/sentry/app/mixins/appState.jsx b/src/sentry/static/sentry/app/mixins/appState.jsx
index 2e3421a897..b52d2c627f 100644
--- a/src/sentry/static/sentry/app/mixins/appState.jsx
+++ b/src/sentry/static/sentry/app/mixins/appState.jsx
@@ -1,4 +1,4 @@
-import OrganizationStore from "../stores/organizationStore";
+import OrganizationStore from '../stores/organizationStore';
 
 let AppState = {
   getOrganizationList() {
diff --git a/src/sentry/static/sentry/app/mixins/groupState.jsx b/src/sentry/static/sentry/app/mixins/groupState.jsx
index 758b1c6d10..485fb65c39 100644
--- a/src/sentry/static/sentry/app/mixins/groupState.jsx
+++ b/src/sentry/static/sentry/app/mixins/groupState.jsx
@@ -1,5 +1,5 @@
-import PropTypes from "../proptypes";
-import ProjectState from "./projectState";
+import PropTypes from '../proptypes';
+import ProjectState from './projectState';
 
 let GroupState = {
   mixins: [ProjectState],
diff --git a/src/sentry/static/sentry/app/mixins/organizationState.jsx b/src/sentry/static/sentry/app/mixins/organizationState.jsx
index 08b9314759..daf9a8484e 100644
--- a/src/sentry/static/sentry/app/mixins/organizationState.jsx
+++ b/src/sentry/static/sentry/app/mixins/organizationState.jsx
@@ -1,4 +1,4 @@
-import PropTypes from "../proptypes";
+import PropTypes from '../proptypes';
 
 let OrganizationState = {
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index b217dab906..c065af1fc4 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -1,5 +1,5 @@
-import PropTypes from "../proptypes";
-import TeamState from "./teamState";
+import PropTypes from '../proptypes';
+import TeamState from './teamState';
 
 let ProjectState = {
   mixins: [TeamState],
diff --git a/src/sentry/static/sentry/app/mixins/teamState.jsx b/src/sentry/static/sentry/app/mixins/teamState.jsx
index a8eb8f3086..66f08f5b22 100644
--- a/src/sentry/static/sentry/app/mixins/teamState.jsx
+++ b/src/sentry/static/sentry/app/mixins/teamState.jsx
@@ -1,5 +1,5 @@
-import PropTypes from "../proptypes";
-import OrganizationState from "./organizationState";
+import PropTypes from '../proptypes';
+import OrganizationState from './organizationState';
 
 let TeamState = {
   mixins: [OrganizationState],
diff --git a/src/sentry/static/sentry/app/mixins/tooltip.jsx b/src/sentry/static/sentry/app/mixins/tooltip.jsx
index d67ce6b3ff..8ea10bc865 100644
--- a/src/sentry/static/sentry/app/mixins/tooltip.jsx
+++ b/src/sentry/static/sentry/app/mixins/tooltip.jsx
@@ -1,6 +1,6 @@
-import ReactDOM from "react-dom";
-import $ from "jquery";
-import "bootstrap/js/tooltip";
+import ReactDOM from 'react-dom';
+import $ from 'jquery';
+import 'bootstrap/js/tooltip';
 
 export default function (options) {
   options = options || {};
@@ -23,9 +23,9 @@ export default function (options) {
 
     removeTooltips() {
       $(ReactDOM.findDOMNode(this))
-        .tooltip("destroy") // destroy tooltips on parent ...
+        .tooltip('destroy') // destroy tooltips on parent ...
         .find(options.selector)
-          .tooltip("destroy"); // ... and descendents
+          .tooltip('destroy'); // ... and descendents
     }
   };
 }
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index 69b609e6fa..f5df533d6c 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 let PropTypes = {
   AnyModel: React.PropTypes.shape({
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index d4b288920d..b7ed7e038d 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1,35 +1,35 @@
-import React from "react";
-import { Route, IndexRoute } from "react-router";
+import React from 'react';
+import { Route, IndexRoute } from 'react-router';
 
-import Admin from "./views/admin";
-import AdminOrganizations from "./views/adminOrganizations";
-import AdminOverview from "./views/adminOverview";
-import App from "./views/app";
-import GroupActivity from "./views/groupActivity";
-import GroupDetails from "./views/groupDetails";
-import GroupEventDetails from "./views/groupEventDetails";
-import GroupEvents from "./views/groupEvents";
-import GroupTags from "./views/groupTags";
-import GroupTagValues from "./views/groupTagValues";
-import GroupUserReports from "./views/groupUserReports";
-import OrganizationDetails from "./views/organizationDetails";
-import OrganizationStats from "./views/organizationStats";
-import OrganizationTeams from "./views/organizationTeams";
-import ProjectDashboard from "./views/projectDashboard";
-import ProjectEvents from "./views/projectEvents";
-import ProjectDetails from "./views/projectDetails";
-import ProjectInstall from "./views/projectInstall";
-import ProjectInstallOverview from "./views/projectInstall/overview";
-import ProjectInstallPlatform from "./views/projectInstall/platform";
-import ProjectReleases from "./views/projectReleases";
-import ProjectSettings from "./views/projectSettings";
-import ReleaseAllEvents from "./views/releaseAllEvents";
-import ReleaseArtifacts from "./views/releaseArtifacts";
-import ReleaseDetails from "./views/releaseDetails";
-import ReleaseNewEvents from "./views/releaseNewEvents";
-import RouteNotFound from "./views/routeNotFound";
-import SharedGroupDetails from "./views/sharedGroupDetails";
-import Stream from "./views/stream";
+import Admin from './views/admin';
+import AdminOrganizations from './views/adminOrganizations';
+import AdminOverview from './views/adminOverview';
+import App from './views/app';
+import GroupActivity from './views/groupActivity';
+import GroupDetails from './views/groupDetails';
+import GroupEventDetails from './views/groupEventDetails';
+import GroupEvents from './views/groupEvents';
+import GroupTags from './views/groupTags';
+import GroupTagValues from './views/groupTagValues';
+import GroupUserReports from './views/groupUserReports';
+import OrganizationDetails from './views/organizationDetails';
+import OrganizationStats from './views/organizationStats';
+import OrganizationTeams from './views/organizationTeams';
+import ProjectDashboard from './views/projectDashboard';
+import ProjectEvents from './views/projectEvents';
+import ProjectDetails from './views/projectDetails';
+import ProjectInstall from './views/projectInstall';
+import ProjectInstallOverview from './views/projectInstall/overview';
+import ProjectInstallPlatform from './views/projectInstall/platform';
+import ProjectReleases from './views/projectReleases';
+import ProjectSettings from './views/projectSettings';
+import ReleaseAllEvents from './views/releaseAllEvents';
+import ReleaseArtifacts from './views/releaseArtifacts';
+import ReleaseDetails from './views/releaseDetails';
+import ReleaseNewEvents from './views/releaseNewEvents';
+import RouteNotFound from './views/routeNotFound';
+import SharedGroupDetails from './views/sharedGroupDetails';
+import Stream from './views/stream';
 
 let routes = (
   <Route path="/" component={App}>
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index bcf96cb7a0..de5bde4cec 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -1,4 +1,4 @@
-import Reflux from "reflux";
+import Reflux from 'reflux';
 import AlertActions from '../actions/alertActions';
 
 const AlertStore = Reflux.createStore({
diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.jsx
index 9ca18a1a34..49c93324b3 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.jsx
@@ -1,5 +1,5 @@
-import moment from "moment-timezone";
-import Reflux from "reflux";
+import moment from 'moment-timezone';
+import Reflux from 'reflux';
 
 const ConfigStore = Reflux.createStore({
   init() {
diff --git a/src/sentry/static/sentry/app/stores/eventStore.jsx b/src/sentry/static/sentry/app/stores/eventStore.jsx
index 2e66663d13..40ed2a5f1e 100644
--- a/src/sentry/static/sentry/app/stores/eventStore.jsx
+++ b/src/sentry/static/sentry/app/stores/eventStore.jsx
@@ -1,5 +1,5 @@
-import jQuery from "jquery";
-import Reflux from "reflux";
+import jQuery from 'jquery';
+import Reflux from 'reflux';
 
 const EventStore = Reflux.createStore({
   init() {
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 3c87bcd36e..aef0293cf9 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -1,8 +1,8 @@
-import jQuery from "jquery";
-import Reflux from "reflux";
-import AlertActions from "../actions/alertActions";
+import jQuery from 'jquery';
+import Reflux from 'reflux';
+import AlertActions from '../actions/alertActions';
 import GroupActions from '../actions/groupActions';
-import utils from "../utils";
+import utils from '../utils';
 
 const ERR_CHANGE_ASSIGNEE = 'Unable to change assignee. Please try again.';
 const ERR_SCHEDULE_DELETE = 'Unable to delete events. Please try again.';
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 7a1a6d44c4..0a817928ab 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -1,5 +1,5 @@
 
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 let validHookNames = new Set([
   'footer',
@@ -16,7 +16,7 @@ const HookStore = Reflux.createStore({
     if (!validHookNames.has(hookName)) {
       throw new Error('Invalid hook name: ' + hookName);
     }
-    if (typeof this.hooks[hookName] === "undefined") {
+    if (typeof this.hooks[hookName] === 'undefined') {
       this.hooks[hookName] = [];
     }
     this.hooks[hookName].push(callback);
@@ -24,7 +24,7 @@ const HookStore = Reflux.createStore({
   },
 
   remove(hookName, callback) {
-    if (typeof this.hooks[hookName] === "undefined") {
+    if (typeof this.hooks[hookName] === 'undefined') {
       return;
     }
     this.hooks[hookName] = this.hooks[hookName].filter((cb) => {
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index 00ff72af96..29121ec439 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -1,5 +1,5 @@
-import React from "react";
-import Reflux from "reflux";
+import React from 'react';
+import Reflux from 'reflux';
 import LoadingIndicator from '../components/loadingIndicator';
 
 const IndicatorStore = Reflux.createStore({
diff --git a/src/sentry/static/sentry/app/stores/memberListStore.jsx b/src/sentry/static/sentry/app/stores/memberListStore.jsx
index 3f350a43e4..e1bb1ec952 100644
--- a/src/sentry/static/sentry/app/stores/memberListStore.jsx
+++ b/src/sentry/static/sentry/app/stores/memberListStore.jsx
@@ -1,4 +1,4 @@
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 const MemberListStore = Reflux.createStore({
   // listenables: MemberActions,
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
index a32f9f9cac..cff5acb6cc 100644
--- a/src/sentry/static/sentry/app/stores/organizationStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -1,4 +1,4 @@
-import Reflux from "reflux";
+import Reflux from 'reflux';
 
 const OrganizationStore = Reflux.createStore({
   init() {
diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index bbed6ec207..e87add50e5 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -1,5 +1,5 @@
-import Reflux from "reflux";
-import GroupStore from "./groupStore";
+import Reflux from 'reflux';
+import GroupStore from './groupStore';
 
 const SelectedGroupStore = Reflux.createStore({
   init() {
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 30db09864c..df06a18315 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -1,8 +1,8 @@
-import Reflux from "reflux";
-import _ from "underscore";
+import Reflux from 'reflux';
+import _ from 'underscore';
 
-import StreamTagActions from "../actions/streamTagActions";
-import MemberListStore from "./memberListStore";
+import StreamTagActions from '../actions/streamTagActions';
+import MemberListStore from './memberListStore';
 const StreamTagStore = Reflux.createStore({
   listenables: StreamTagActions,
 
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 3c95f97836..6c63ac5a37 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -1,5 +1,5 @@
-import Reflux from "reflux";
-import TeamActions from "../actions/teamActions";
+import Reflux from 'reflux';
+import TeamActions from '../actions/teamActions';
 
 const TeamStore = Reflux.createStore({
   init() {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index ae4cacfa94..64722c0488 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -1,4 +1,4 @@
-import _ from "underscore";
+import _ from 'underscore';
 
 /*eslint no-use-before-define:0*/
 const modelsEqual = function(obj1, obj2) {
@@ -163,7 +163,7 @@ export default {
   },
 
   defined(item) {
-    return typeof item !== "undefined" && item !== null;
+    return typeof item !== 'undefined' && item !== null;
   },
 
   nl2br(str) {
diff --git a/src/sentry/static/sentry/app/utils/collection.jsx b/src/sentry/static/sentry/app/utils/collection.jsx
index 4c0a0169b6..b855a9c695 100644
--- a/src/sentry/static/sentry/app/utils/collection.jsx
+++ b/src/sentry/static/sentry/app/utils/collection.jsx
@@ -10,19 +10,19 @@ function Collection(collection, options) {
 
   Array.call(this);
 
-  if (typeof options === "undefined") {
+  if (typeof options === 'undefined') {
     options = {};
   }
 
   for (i in defaults) {
-    if (typeof options[i] === "undefined") {
+    if (typeof options[i] === 'undefined') {
       options[i] = defaults[i];
     }
   }
 
   this.options = options;
 
-  if (typeof collection !== "undefined") {
+  if (typeof collection !== 'undefined') {
     this.push(collection);
   }
 
diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index 9e779bb2ba..59b6bd9abe 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -1,4 +1,4 @@
-import _ from "underscore";
+import _ from 'underscore';
 
 /**
  * Converts a stream query to an object representation, with
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index 030a153203..ad62074966 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -24,7 +24,7 @@ class StreamManager {
     items = [].concat(items);
     if (items.length === 0) return this;
 
-    items = items.filter((item) => item.hasOwnProperty("id"));
+    items = items.filter((item) => item.hasOwnProperty('id'));
 
     items.forEach((item) => removeFromList(item.id, this.idList));
     let ids = items.map((item) => item.id);
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/admin/index.jsx
index dd33346814..ce30f002e9 100644
--- a/src/sentry/static/sentry/app/views/admin/index.jsx
+++ b/src/sentry/static/sentry/app/views/admin/index.jsx
@@ -1,10 +1,10 @@
-import DocumentTitle from "react-document-title";
-import React from "react";
+import DocumentTitle from 'react-document-title';
+import React from 'react';
 
-import ConfigStore from "../../stores/configStore";
-import Footer from "../../components/footer";
-import Header from "../../components/header";
-import ListLink from "../../components/listLink";
+import ConfigStore from '../../stores/configStore';
+import Footer from '../../components/footer';
+import Header from '../../components/header';
+import ListLink from '../../components/listLink';
 
 const Admin = React.createClass({
   getTitle() {
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
index 14e17f66dd..ac87f3239a 100644
--- a/src/sentry/static/sentry/app/views/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -1,12 +1,12 @@
-import jQuery from "jquery";
-import React from "react";
-import {Link, History} from "react-router";
-
-import api from "../api";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
-import SearchBar from "../components/searchBar.jsx";
+import jQuery from 'jquery';
+import React from 'react';
+import {Link, History} from 'react-router';
+
+import api from '../api';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
+import SearchBar from '../components/searchBar.jsx';
 
 const AdminOrganizations = React.createClass({
   mixins: [History],
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index b8f408fab9..73d216915b 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -1,9 +1,9 @@
-import React from "react";
+import React from 'react';
 
-import api from "../../api";
-import FlotChart from "../../components/flotChart";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import api from '../../api';
+import FlotChart from '../../components/flotChart';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
 const ApiChart = React.createClass({
   getInitialState() {
@@ -11,9 +11,9 @@ const ApiChart = React.createClass({
       error: false,
       loading: true,
       rawData: {
-        "client-api.all-versions.responses.2xx": null,
-        "client-api.all-versions.responses.4xx": null,
-        "client-api.all-versions.responses.5xx": null
+        'client-api.all-versions.responses.2xx': null,
+        'client-api.all-versions.responses.4xx': null,
+        'client-api.all-versions.responses.5xx': null
       },
     };
   },
@@ -24,14 +24,14 @@ const ApiChart = React.createClass({
   
   fetchData() {
     let statNameList = [
-      "client-api.all-versions.responses.2xx",
-      "client-api.all-versions.responses.4xx",
-      "client-api.all-versions.responses.5xx"
+      'client-api.all-versions.responses.2xx',
+      'client-api.all-versions.responses.4xx',
+      'client-api.all-versions.responses.5xx'
     ];
 
     statNameList.forEach((statName) => {
       api.request('/internal/stats/', {
-        method: "GET",
+        method: 'GET',
         data: {
           since: this.props.since,
           resolution: '1h',
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index 8d0024cc0b..067490bee1 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -1,10 +1,10 @@
-import jQuery from "jquery";
-import React from "react";
+import jQuery from 'jquery';
+import React from 'react';
 
-import api from "../../api";
-import FlotChart from "../../components/flotChart";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import api from '../../api';
+import FlotChart from '../../components/flotChart';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
 const EventChart = React.createClass({
   getInitialState() {
@@ -12,8 +12,8 @@ const EventChart = React.createClass({
       error: false,
       loading: true,
       rawData: {
-        "events.total": null,
-        "events.dropped": null,
+        'events.total': null,
+        'events.dropped': null,
       },
       stats: {received: [], rejected: []},
       systemTotal: {received: 0, rejected: 0, accepted: 0}
@@ -26,15 +26,15 @@ const EventChart = React.createClass({
 
   fetchData() {
     let statNameList = [
-      "events.total",
-      "events.dropped",
+      'events.total',
+      'events.dropped',
     ];
 
     statNameList.forEach((statName) => {
       // query the organization stats via a separate call as its possible the project stats
       // are too heavy
       api.request('/internal/stats/', {
-        method: "GET",
+        method: 'GET',
         data: {
           since: this.props.since,
           resolution: this.props.resolution,
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
index b6afaaf005..09ffeda12d 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -1,7 +1,7 @@
-import React from "react";
+import React from 'react';
 
-import ApiChart from "./apiChart";
-import EventChart from "./eventChart";
+import ApiChart from './apiChart';
+import EventChart from './eventChart';
 
 const AdminOverview = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index ec7c37c299..e2b2b0de20 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import api from "../api";
-import Alerts from "../components/alerts";
-import AlertActions from "../actions/alertActions.jsx";
-import Indicators from "../components/indicators";
-import LoadingIndicator from "../components/loadingIndicator";
-import OrganizationStore from "../stores/organizationStore";
+import React from 'react';
+import api from '../api';
+import Alerts from '../components/alerts';
+import AlertActions from '../actions/alertActions.jsx';
+import Indicators from '../components/indicators';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationStore from '../stores/organizationStore';
 
 const App = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 8a792e73af..33b21589f9 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -1,36 +1,36 @@
-import React from "react";
-import Gravatar from "../../components/gravatar";
-import GroupState from "../../mixins/groupState";
-import MemberListStore from "../../stores/memberListStore";
-import TimeSince from "../../components/timeSince";
-import ConfigStore from "../../stores/configStore";
+import React from 'react';
+import Gravatar from '../../components/gravatar';
+import GroupState from '../../mixins/groupState';
+import MemberListStore from '../../stores/memberListStore';
+import TimeSince from '../../components/timeSince';
+import ConfigStore from '../../stores/configStore';
 
-import NoteContainer from "./noteContainer";
-import NoteInput from "./noteInput";
+import NoteContainer from './noteContainer';
+import NoteInput from './noteInput';
 
 let formatActivity = function(item) {
   let data = item.data;
 
   switch(item.type) {
-    case "note":
-      return "left a comment";
-    case "set_resolved":
-      return "marked this event as resolved";
-    case "set_unresolved":
-      return "marked this event as unresolved";
-    case "set_muted":
-      return "marked this event as muted";
-    case "set_public":
-      return "made this event public";
-    case "set_private":
-      return "made this event private";
-    case "set_regression":
-      return "marked this event as a regression";
-    case "create_issue":
+    case 'note':
+      return 'left a comment';
+    case 'set_resolved':
+      return 'marked this event as resolved';
+    case 'set_unresolved':
+      return 'marked this event as unresolved';
+    case 'set_muted':
+      return 'marked this event as muted';
+    case 'set_public':
+      return 'made this event public';
+    case 'set_private':
+      return 'made this event private';
+    case 'set_regression':
+      return 'marked this event as a regression';
+    case 'create_issue':
       return <span>created an issue on {data.provider} titled <a href={data.location}>{data.title}</a></span>;
-    case "first_seen":
-      return "first saw this event";
-    case "assigned":
+    case 'first_seen':
+      return 'first saw this event';
+    case 'assigned':
       let assignee;
       if (data.assignee === item.user.id) {
         assignee = 'themselves';
@@ -39,10 +39,10 @@ let formatActivity = function(item) {
         assignee = (assignee ? assignee.email : 'an unknown user');
       }
       return `assigned this event to ${assignee}`;
-    case "unassigned":
-      return "unassigned this event";
+    case 'unassigned':
+      return 'unassigned this event';
     default:
-      return ""; // should never hit (?)
+      return ''; // should never hit (?)
   }
 };
 
diff --git a/src/sentry/static/sentry/app/views/groupActivity/note.jsx b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
index 76a3f08e8d..2446f653ba 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/note.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/note.jsx
@@ -1,8 +1,8 @@
-import marked from "marked";
-import React from "react";
-import TimeSince from "../../components/timeSince";
-import ConfigStore from "../../stores/configStore";
-import LinkWithConfirmation from "../../components/linkWithConfirmation";
+import marked from 'marked';
+import React from 'react';
+import TimeSince from '../../components/timeSince';
+import ConfigStore from '../../stores/configStore';
+import LinkWithConfirmation from '../../components/linkWithConfirmation';
 
 const Note = React.createClass({
   canEdit() {
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
index 0e4f3bc5c0..6937dcbffb 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import api from "../../api";
-import IndicatorStore from "../../stores/indicatorStore";
-import GroupStore from "../../stores/groupStore";
+import React from 'react';
+import api from '../../api';
+import IndicatorStore from '../../stores/indicatorStore';
+import GroupStore from '../../stores/groupStore';
 
-import Note from "./note";
-import NoteInput from "./noteInput";
+import Note from './note';
+import NoteInput from './noteInput';
 
 const NoteContainer = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
index 70fc7cd969..1933d53b1c 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
@@ -1,10 +1,10 @@
-import marked from "marked";
-import React from "react";
-import api from "../../api";
-import GroupStore from "../../stores/groupStore";
-import IndicatorStore from "../../stores/indicatorStore";
-import {logException} from "../../utils/logging";
-import {getItem, setItem} from "../../utils/localStorage";
+import marked from 'marked';
+import React from 'react';
+import api from '../../api';
+import GroupStore from '../../stores/groupStore';
+import IndicatorStore from '../../stores/indicatorStore';
+import {logException} from '../../utils/logging';
+import {getItem, setItem} from '../../utils/localStorage';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 const localStorageKey = 'noteinput:latest';
@@ -208,10 +208,10 @@ const NoteInput = React.createClass({
       <form className={classNames} onSubmit={this.onSubmit}>
         <div className="activity-notes">
           <ul className="nav nav-tabs">
-            <li className={!preview ? "active" : ""}>
-              <a onClick={this.toggleEdit}>{updating ? "Edit" : "Write"}</a>
+            <li className={!preview ? 'active' : ''}>
+              <a onClick={this.toggleEdit}>{updating ? 'Edit' : 'Write'}</a>
             </li>
-            <li className={preview ? "active" : ""}>
+            <li className={preview ? 'active' : ''}>
               <a onClick={this.togglePreview}>Preview</a>
             </li>
           </ul>
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 257bc93cee..bb95757cde 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -1,15 +1,15 @@
-import React from "react";
-import Reflux from "reflux";
-import api from "../api";
-import DocumentTitle from "react-document-title";
-import GroupHeader from "./groupDetails/header";
-import GroupStore from "../stores/groupStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import PropTypes from "../proptypes";
+import React from 'react';
+import Reflux from 'reflux';
+import api from '../api';
+import DocumentTitle from 'react-document-title';
+import GroupHeader from './groupDetails/header';
+import GroupStore from '../stores/groupStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import PropTypes from '../proptypes';
 
 let ERROR_TYPES = {
-  GROUP_NOT_FOUND: "GROUP_NOT_FOUND"
+  GROUP_NOT_FOUND: 'GROUP_NOT_FOUND'
 };
 
 const GroupDetails = React.createClass({
@@ -18,7 +18,7 @@ const GroupDetails = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange")
+    Reflux.listenTo(GroupStore, 'onGroupChange')
   ],
 
   getInitialState() {
@@ -58,7 +58,7 @@ const GroupDetails = React.createClass({
       }, error: (_, textStatus, errorThrown) => {
         let errorType = null;
         switch (errorThrown) {
-          case "NOT FOUND":
+          case 'NOT FOUND':
             errorType = ERROR_TYPES.GROUP_NOT_FOUND;
             break;
           default:
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 31d287d6c6..1c972d01f8 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import {History} from "react-router";
-import api from "../../api";
-import DropdownLink from "../../components/dropdownLink";
-import GroupState from "../../mixins/groupState";
-import IndicatorStore from "../../stores/indicatorStore";
-import MenuItem from "../../components/menuItem";
-import LinkWithConfirmation from "../../components/linkWithConfirmation";
+import React from 'react';
+import {History} from 'react-router';
+import api from '../../api';
+import DropdownLink from '../../components/dropdownLink';
+import GroupState from '../../mixins/groupState';
+import IndicatorStore from '../../stores/indicatorStore';
+import MenuItem from '../../components/menuItem';
+import LinkWithConfirmation from '../../components/linkWithConfirmation';
 
 const GroupActions = React.createClass({
   mixins: [
@@ -75,14 +75,14 @@ const GroupActions = React.createClass({
   render() {
     let group = this.getGroup();
 
-    let resolveClassName = "group-resolve btn btn-default btn-sm";
-    if (group.status === "resolved") {
-      resolveClassName += " active";
+    let resolveClassName = 'group-resolve btn btn-default btn-sm';
+    if (group.status === 'resolved') {
+      resolveClassName += ' active';
     }
 
-    let bookmarkClassName = "group-bookmark btn btn-default btn-sm";
+    let bookmarkClassName = 'group-bookmark btn btn-default btn-sm';
     if (group.isBookmarked) {
-      bookmarkClassName += " active";
+      bookmarkClassName += ' active';
     }
 
     return (
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index 0ed51e98a7..73a82a229e 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -1,8 +1,8 @@
-import {Link} from "react-router";
-import React from "react";
-import PropTypes from "../../proptypes";
-import DateTime from "../../components/dateTime";
-import FileSize from "../../components/fileSize";
+import {Link} from 'react-router';
+import React from 'react';
+import PropTypes from '../../proptypes';
+import DateTime from '../../components/dateTime';
+import FileSize from '../../components/fileSize';
 
 let GroupEventToolbar  = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index fcb9a77bd7..51dfebc5bf 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -1,14 +1,14 @@
-import React from "react";
+import React from 'react';
 // import Router from "react-router";
-import {Link, History} from "react-router";
-import api from "../../api";
-import AssigneeSelector from "../../components/assigneeSelector";
-import Count from "../../components/count";
-import GroupActions from "./actions";
-import GroupSeenBy from "./seenBy";
-import IndicatorStore from "../../stores/indicatorStore";
-import ListLink from "../../components/listLink";
-import ProjectState from "../../mixins/projectState";
+import {Link, History} from 'react-router';
+import api from '../../api';
+import AssigneeSelector from '../../components/assigneeSelector';
+import Count from '../../components/count';
+import GroupActions from './actions';
+import GroupSeenBy from './seenBy';
+import IndicatorStore from '../../stores/indicatorStore';
+import ListLink from '../../components/listLink';
+import ProjectState from '../../mixins/projectState';
 
 const GroupHeader = React.createClass({
   propTypes: {
@@ -74,15 +74,15 @@ const GroupHeader = React.createClass({
         userCount = group.userCount,
         features = this.getProjectFeatures();
 
-    let className = "group-detail level-" + group.level;
+    let className = 'group-detail level-' + group.level;
     if (group.isBookmarked) {
-      className += " isBookmarked";
+      className += ' isBookmarked';
     }
     if (group.hasSeen) {
-      className += " hasSeen";
+      className += ' hasSeen';
     }
-    if (group.status === "resolved") {
-      className += " isResolved";
+    if (group.status === 'resolved') {
+      className += ' isResolved';
     }
 
     let groupId = group.id,
@@ -101,7 +101,7 @@ const GroupHeader = React.createClass({
               <span className="message">{group.culprit}</span>
               {group.logger &&
                 <span className="event-annotation">
-                  <Link to={`/${orgId}/${projectId}/`} query={{query: "logger:" + group.logger}}>
+                  <Link to={`/${orgId}/${projectId}/`} query={{query: 'logger:' + group.logger}}>
                     {group.logger}
                   </Link>
                 </span>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
index 9a2da6e4db..927d2e9ac2 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
@@ -1,18 +1,18 @@
-import React from "react";
-import moment from "moment";
+import React from 'react';
+import moment from 'moment';
 
-import ConfigStore from "../../stores/configStore";
-import Gravatar from "../../components/gravatar";
-import GroupState from "../../mixins/groupState";
-import {userDisplayName} from "../../utils/formatters";
-import TooltipMixin from "../../mixins/tooltip";
+import ConfigStore from '../../stores/configStore';
+import Gravatar from '../../components/gravatar';
+import GroupState from '../../mixins/groupState';
+import {userDisplayName} from '../../utils/formatters';
+import TooltipMixin from '../../mixins/tooltip';
 
 const GroupSeenBy = React.createClass({
   mixins: [
     GroupState,
     TooltipMixin({
       html: true,
-      selector: ".tip"
+      selector: '.tip'
     })
   ],
 
@@ -23,7 +23,7 @@ const GroupSeenBy = React.createClass({
     let seenByNodes = group.seenBy.filter((user, userIdx) => {
       return activeUser.id !== user.id;
     }).map((user, userIdx) => {
-      let title = userDisplayName(user) + '<br/>' + moment(user.lastSeen).format("LL");
+      let title = userDisplayName(user) + '<br/>' + moment(user.lastSeen).format('LL');
       return (
         <li key={userIdx} className="tip" data-title={title}>
           <Gravatar size={52} email={user.email} />
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 4cdeba0f2a..0b94323fe2 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -1,13 +1,13 @@
-import React from "react";
-import api from "../api";
-import ApiMixin from "../mixins/apiMixin";
-import EventEntries from "../components/events/eventEntries";
-import GroupEventToolbar from "./groupDetails/eventToolbar";
-import GroupSidebar from "../components/group/sidebar";
-import GroupState from "../mixins/groupState";
-import MutedBox from "../components/mutedBox";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
+import React from 'react';
+import api from '../api';
+import ApiMixin from '../mixins/apiMixin';
+import EventEntries from '../components/events/eventEntries';
+import GroupEventToolbar from './groupDetails/eventToolbar';
+import GroupSidebar from '../components/group/sidebar';
+import GroupState from '../mixins/groupState';
+import MutedBox from '../components/mutedBox';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
 
 
 const GroupEventDetails = React.createClass({
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index 084a8f5eac..7c3e48c19f 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -1,14 +1,14 @@
-import React from "react";
-import {History, Link} from "react-router";
-import api from "../api";
+import React from 'react';
+import {History, Link} from 'react-router';
+import api from '../api';
 
-import GroupState from "../mixins/groupState";
+import GroupState from '../mixins/groupState';
 
-import DateTime from "../components/dateTime";
-import Gravatar from "../components/gravatar";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
+import DateTime from '../components/dateTime';
+import Gravatar from '../components/gravatar';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
 
 const GroupEvents = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupTagValues.jsx
index 9b21190d6e..019f78673d 100644
--- a/src/sentry/static/sentry/app/views/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupTagValues.jsx
@@ -1,14 +1,14 @@
-import React from "react";
-import {Link, History} from "react-router";
-import jQuery from "jquery";
-import api from "../api";
-import Count from "../components/count";
-import GroupState from "../mixins/groupState";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
-import TimeSince from "../components/timeSince";
-import {isUrl, percent} from "../utils";
+import React from 'react';
+import {Link, History} from 'react-router';
+import jQuery from 'jquery';
+import api from '../api';
+import Count from '../components/count';
+import GroupState from '../mixins/groupState';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
+import TimeSince from '../components/timeSince';
+import {isUrl, percent} from '../utils';
 
 const GroupTagValues = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/groupTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
index ccb3a14f03..9ba83f2c13 100644
--- a/src/sentry/static/sentry/app/views/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import {Link} from "react-router";
-import ApiMixin from "../mixins/apiMixin";
-import Count from "../components/count";
-import GroupState from "../mixins/groupState";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import {percent} from "../utils";
+import React from 'react';
+import {Link} from 'react-router';
+import ApiMixin from '../mixins/apiMixin';
+import Count from '../components/count';
+import GroupState from '../mixins/groupState';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {percent} from '../utils';
 
 const GroupTags = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index 8f14005fae..824d080bab 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -1,13 +1,13 @@
-import $ from "jquery";
-import React from "react";
-import {History} from "react-router";
-import api from "../api";
-import Gravatar from "../components/gravatar";
-import GroupState from "../mixins/groupState";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import TimeSince from "../components/timeSince";
-import utils from "../utils";
+import $ from 'jquery';
+import React from 'react';
+import {History} from 'react-router';
+import api from '../api';
+import Gravatar from '../components/gravatar';
+import GroupState from '../mixins/groupState';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import TimeSince from '../components/timeSince';
+import utils from '../utils';
 
 const GroupUserReports = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index 949930979b..e6f4530a1d 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -1,16 +1,16 @@
-import React from "react";
-import api from "../api";
-import DocumentTitle from "react-document-title";
-import Footer from "../components/footer";
-import Header from "../components/header";
-import HookStore from "../stores/hookStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import PropTypes from "../proptypes";
-import TeamStore from "../stores/teamStore";
+import React from 'react';
+import api from '../api';
+import DocumentTitle from 'react-document-title';
+import Footer from '../components/footer';
+import Header from '../components/header';
+import HookStore from '../stores/hookStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import PropTypes from '../proptypes';
+import TeamStore from '../stores/teamStore';
 
 let ERROR_TYPES = {
-  ORG_NOT_FOUND: "ORG_NOT_FOUND"
+  ORG_NOT_FOUND: 'ORG_NOT_FOUND'
 };
 
 const OrganizationDetails = React.createClass({
@@ -65,7 +65,7 @@ const OrganizationDetails = React.createClass({
       }, error: (_, textStatus, errorThrown) => {
         let errorType = null;
         switch (errorThrown) {
-          case "NOT FOUND":
+          case 'NOT FOUND':
             errorType = ERROR_TYPES.ORG_NOT_FOUND;
             break;
           default:
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index b2f699a120..78911c6d08 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -1,13 +1,13 @@
-import $ from "jquery";
-import React from "react";
-import api from "../../api";
-import FlotChart from "../../components/flotChart";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
-import OrganizationHomeContainer from "../../components/organizations/homeContainer";
-import OrganizationState from "../../mixins/organizationState";
+import $ from 'jquery';
+import React from 'react';
+import api from '../../api';
+import FlotChart from '../../components/flotChart';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationState from '../../mixins/organizationState';
 
-import ProjectTable from "./projectTable";
+import ProjectTable from './projectTable';
 
 const OrganizationStats = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
index b57f1d0dc6..8e2a7e84cf 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import ConfigStore from "../../stores/configStore";
-import Count from "../../components/count";
+import React from 'react';
+import ConfigStore from '../../stores/configStore';
+import Count from '../../components/count';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
 let getPercent = (item, total) => {
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
index d80765d124..d8eab34b95 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
@@ -1,9 +1,9 @@
-import React from "react";
+import React from 'react';
 
-import ConfigStore from "../../stores/configStore";
-import PropTypes from "../../proptypes";
+import ConfigStore from '../../stores/configStore';
+import PropTypes from '../../proptypes';
 
-import AllTeamsRow from "./allTeamsRow";
+import AllTeamsRow from './allTeamsRow';
 
 const AllTeamsList = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
index 0a9d988538..c127b291e8 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
@@ -1,7 +1,7 @@
-import React from "react";
+import React from 'react';
 
-import api from "../../api";
-import AlertActions from "../../actions/alertActions";
+import api from '../../api';
+import AlertActions from '../../actions/alertActions';
 
 // TODO(dcramer): this isnt great UX
 const ERR_JOIN = 'There was an error while trying to join the team.';
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index d505663794..8e04ec4367 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -1,12 +1,12 @@
-import React from "react";
-import {Link} from "react-router";
-import LazyLoad from "react-lazy-load";
+import React from 'react';
+import {Link} from 'react-router';
+import LazyLoad from 'react-lazy-load';
 
-import api from "../../api";
-import BarChart from "../../components/barChart";
-import ConfigStore from "../../stores/configStore";
-import PropTypes from "../../proptypes";
-import {sortArray} from "../../utils";
+import api from '../../api';
+import BarChart from '../../components/barChart';
+import ConfigStore from '../../stores/configStore';
+import PropTypes from '../../proptypes';
+import {sortArray} from '../../utils';
 
 const ExpandedTeamList = React.createClass({
   propTypes: {
@@ -73,7 +73,7 @@ const ExpandedTeamList = React.createClass({
                 <tr>
                   <td>
                     <p className="project-list-empty">
-                      {"There are no projects in this team. Get started by "}
+                      {'There are no projects in this team. Get started by '}
                       <a href={this.urlPrefix() + '/projects/new/?team=' + team.slug}>creating your first project</a>.
                     </p>
                   </td>
@@ -121,18 +121,18 @@ const ExpandedTeamList = React.createClass({
     if (this.props.hasTeams) {
       return (
         <p>
-          {"You are not a member of any teams. "}
+          {'You are not a member of any teams. '}
           <a onClick={this.showAllTeams}>Join an existing team</a>
-          {" or "}
+          {' or '}
           <a href={this.urlPrefix() + '/teams/new/'}>create a new one</a>
-          {"."}
+          {'.'}
         </p>
       );
 
     }
     return (
       <p>
-        {"You dont have any teams for this organization yet. Get started by "}
+        {'You dont have any teams for this organization yet. Get started by '}
         <a href={this.urlPrefix() + '/teams/new/'}>creating your first team</a>.
       </p>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
index 791c0b2bba..b59fdbc0e4 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
@@ -1,24 +1,24 @@
-import React from "react";
-import Reflux from "reflux";
+import React from 'react';
+import Reflux from 'reflux';
 
-import api from "../../api";
-import ConfigStore from "../../stores/configStore";
-import OrganizationHomeContainer from "../../components/organizations/homeContainer";
-import OrganizationState from "../../mixins/organizationState";
-import TeamStore from "../../stores/teamStore";
-import TooltipMixin from "../../mixins/tooltip";
-import {sortArray} from "../../utils";
+import api from '../../api';
+import ConfigStore from '../../stores/configStore';
+import OrganizationHomeContainer from '../../components/organizations/homeContainer';
+import OrganizationState from '../../mixins/organizationState';
+import TeamStore from '../../stores/teamStore';
+import TooltipMixin from '../../mixins/tooltip';
+import {sortArray} from '../../utils';
 
-import ExpandedTeamList from "./expandedTeamList";
-import AllTeamsList from "./allTeamsList";
-import OrganizationStatOverview from "./organizationStatOverview";
+import ExpandedTeamList from './expandedTeamList';
+import AllTeamsList from './allTeamsList';
+import OrganizationStatOverview from './organizationStatOverview';
 
 const OrganizationTeams = React.createClass({
   mixins: [
     OrganizationState,
-    Reflux.listenTo(TeamStore, "onTeamListChange"),
+    Reflux.listenTo(TeamStore, 'onTeamListChange'),
     TooltipMixin({
-      selector: ".tip"
+      selector: '.tip'
     })
   ],
 
@@ -118,11 +118,11 @@ const OrganizationTeams = React.createClass({
                 }
               </div>
               <ul className="nav nav-tabs border-bottom">
-                <li className={activeNav === "your-teams" && "active"}>
-                  <a onClick={this.toggleTeams.bind(this, "your-teams")}>Your Teams</a>
+                <li className={activeNav === 'your-teams' && 'active'}>
+                  <a onClick={this.toggleTeams.bind(this, 'your-teams')}>Your Teams</a>
                 </li>
-                <li className={activeNav === "all-teams" && "active"}>
-                  <a onClick={this.toggleTeams.bind(this, "all-teams")}>All Teams <span className="badge badge-soft">{allTeams.length}</span></a>
+                <li className={activeNav === 'all-teams' && 'active'}>
+                  <a onClick={this.toggleTeams.bind(this, 'all-teams')}>All Teams <span className="badge badge-soft">{allTeams.length}</span></a>
                 </li>
               </ul>
               {activeNav == 'your-teams' ?
@@ -130,7 +130,7 @@ const OrganizationTeams = React.createClass({
                     organization={org} teamList={activeTeams}
                     projectStats={this.state.projectStats}
                     hasTeams={allTeams.length !== 0}
-                    showAllTeams={this.toggleTeams.bind(this, "all-teams")} />
+                    showAllTeams={this.toggleTeams.bind(this, 'all-teams')} />
               :
                 <AllTeamsList
                   organization={org} teamList={allTeams}
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
index 7fc9acc055..c319a0671e 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import {Link} from "react-router";
-import classNames from "classnames";
+import React from 'react';
+import {Link} from 'react-router';
+import classNames from 'classnames';
 
-import api from "../../api";
-import OrganizationState from "../../mixins/organizationState";
+import api from '../../api';
+import OrganizationState from '../../mixins/organizationState';
 
-import {defined} from "../../utils";
+import {defined} from '../../utils';
 
 const OrganizationStatOverview = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 76d38a3ea1..6f31cb3237 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -1,10 +1,10 @@
-import jQuery from "jquery";
-import React from "react";
-import {Link} from "react-router";
+import jQuery from 'jquery';
+import React from 'react';
+import {Link} from 'react-router';
 
-import EventList from "./projectDashboard/eventList";
-import ProjectState from "../mixins/projectState";
-import ProjectChart from "./projectDashboard/chart";
+import EventList from './projectDashboard/eventList';
+import ProjectState from '../mixins/projectState';
+import ProjectChart from './projectDashboard/chart';
 
 
 const ProjectDashboard = React.createClass({
@@ -14,7 +14,7 @@ const ProjectDashboard = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultStatsPeriod: "24h"
+      defaultStatsPeriod: '24h'
     };
   },
 
@@ -74,21 +74,21 @@ const ProjectDashboard = React.createClass({
   getTrendingEventsEndpoint(dateSince) {
     let params = this.props.params;
     let qs = jQuery.param({
-      sort: "priority",
-      query: "is:unresolved",
+      sort: 'priority',
+      query: 'is:unresolved',
       since: dateSince
     });
-    return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
+    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + qs;
   },
 
   getNewEventsEndpoint(dateSince) {
     let params = this.props.params;
     let qs = jQuery.param({
-      sort: "new",
-      query: "is:unresolved",
+      sort: 'new',
+      query: 'is:unresolved',
       since: dateSince
     });
-    return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
+    return '/projects/' + params.orgId + '/' + params.projectId + '/groups/?' + qs;
   },
 
   render() {
@@ -108,16 +108,16 @@ const ProjectDashboard = React.createClass({
                 to={url}
                 query={jQuery.extend({}, routeQuery, {statsPeriod: '1h'})}
                 active={statsPeriod === '1h'}
-                className={"btn btn-sm btn-default" + (statsPeriod === "1h" ? " active" : "")}>1h</Link>
+                className={'btn btn-sm btn-default' + (statsPeriod === '1h' ? ' active' : '')}>1h</Link>
               <Link
                 to={url}
                 query={jQuery.extend({}, routeQuery, {statsPeriod: '24h'})}
                 active={statsPeriod === '24h'}
-                className={"btn btn-sm btn-default" + (statsPeriod === "24h" ? " active" : "")}>24h</Link>
+                className={'btn btn-sm btn-default' + (statsPeriod === '24h' ? ' active' : '')}>24h</Link>
               <Link
                 to={url}
                 query={jQuery.extend({}, routeQuery, {statsPeriod: '1w'})}
-                className={"btn btn-sm btn-default" + (statsPeriod === "1w" ? " active" : "")}>1w</Link>
+                className={'btn btn-sm btn-default' + (statsPeriod === '1w' ? ' active' : '')}>1w</Link>
             </div>
           </div>
           <h3>Overview</h3>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index b93d3d7ce2..fadbeb3c1e 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import moment from "moment";
-import api from "../../api";
-import BarChart from "../../components/barChart";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
-import ProjectState from "../../mixins/projectState";
+import React from 'react';
+import moment from 'moment';
+import api from '../../api';
+import BarChart from '../../components/barChart';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import ProjectState from '../../mixins/projectState';
 
 const ProjectChart = React.createClass({
   mixins: [
@@ -34,7 +34,7 @@ const ProjectChart = React.createClass({
   getStatsEndpoint() {
     let org = this.getOrganization();
     let project = this.getProject();
-    return "/projects/" + org.slug + "/" + project.slug + "/stats/?resolution=" + this.props.resolution;
+    return '/projects/' + org.slug + '/' + project.slug + '/stats/?resolution=' + this.props.resolution;
   },
 
   getProjectReleasesEndpoint() {
@@ -93,7 +93,7 @@ const ProjectChart = React.createClass({
           points={points}
           markers={markers}
           className="sparkline" />
-        <small className="date-legend">{moment(this.props.dateSince * 1000).format("LL")}</small>
+        <small className="date-legend">{moment(this.props.dateSince * 1000).format('LL')}</small>
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index e05854f7c6..769b90a168 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import api from "../../api";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import React from 'react';
+import api from '../../api';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
-import EventNode from "./eventNode";
+import EventNode from './eventNode';
 
 const EventList = React.createClass({
   propTypes: {
@@ -16,7 +16,7 @@ const EventList = React.createClass({
       groupList: [],
       loading: true,
       error: false,
-      statsPeriod: "24h"
+      statsPeriod: '24h'
     };
   },
 
@@ -34,15 +34,15 @@ const EventList = React.createClass({
   fetchData() {
     let minutes;
     switch(this.state.statsPeriod) {
-      case "15m":
-        minutes = "15";
+      case '15m':
+        minutes = '15';
         break;
-      case "60m":
-        minutes = "60";
+      case '60m':
+        minutes = '60';
         break;
-      case "24h":
+      case '24h':
       default:
-        minutes = "1440";
+        minutes = '1440';
         break;
     }
 
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
index 72d9ea33fe..2a20a70409 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -1,9 +1,9 @@
-import React from "react";
-import {Link} from "react-router";
-import Count from "../../components/count";
-import PropTypes from "../../proptypes";
-import TimeSince from "../../components/timeSince";
-import ProjectState from "../../mixins/projectState";
+import React from 'react';
+import {Link} from 'react-router';
+import Count from '../../components/count';
+import PropTypes from '../../proptypes';
+import TimeSince from '../../components/timeSince';
+import ProjectState from '../../mixins/projectState';
 
 const EventNode = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
index 58588c1f12..470240620c 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const TeamStatsBar = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 9897511ae6..994a6e6869 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -1,19 +1,19 @@
-import React from "react";
-import Reflux from "reflux";
-import api from "../api";
-import DocumentTitle from "react-document-title";
-import MemberListStore from "../stores/memberListStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import MissingProjectMembership from "../components/missingProjectMembership";
-import ProjectHeader from "../components/projectHeader";
-import OrganizationState from "../mixins/organizationState";
-import PropTypes from "../proptypes";
-import TeamStore from "../stores/teamStore";
+import React from 'react';
+import Reflux from 'reflux';
+import api from '../api';
+import DocumentTitle from 'react-document-title';
+import MemberListStore from '../stores/memberListStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import MissingProjectMembership from '../components/missingProjectMembership';
+import ProjectHeader from '../components/projectHeader';
+import OrganizationState from '../mixins/organizationState';
+import PropTypes from '../proptypes';
+import TeamStore from '../stores/teamStore';
 
 const ERROR_TYPES = {
-  MISSING_MEMBERSHIP: "MISSING_MEMBERSHIP",
-  PROJECT_NOT_FOUND: "PROJECT_NOT_FOUND"
+  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',
+  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND'
 };
 
 const ProjectDetails = React.createClass({
@@ -23,8 +23,8 @@ const ProjectDetails = React.createClass({
   },
 
   mixins: [
-    Reflux.connect(MemberListStore, "memberList"),
-    Reflux.listenTo(TeamStore, "onTeamChange"),
+    Reflux.connect(MemberListStore, 'memberList'),
+    Reflux.listenTo(TeamStore, 'onTeamChange'),
     OrganizationState
   ],
 
diff --git a/src/sentry/static/sentry/app/views/projectEvents.jsx b/src/sentry/static/sentry/app/views/projectEvents.jsx
index 107cb3e8bf..dc8692e70e 100644
--- a/src/sentry/static/sentry/app/views/projectEvents.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents.jsx
@@ -1,16 +1,16 @@
-import React from "react";
-import {History} from "react-router";
-import Reflux from "reflux";
-import jQuery from "jquery";
-import Cookies from "js-cookie";
-import api from "../api";
-import EventRow from "../components/events/eventRow";
-import EventActions from "./projectEvents/actions";
-import EventStore from "../stores/eventStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
-import utils from "../utils";
+import React from 'react';
+import {History} from 'react-router';
+import Reflux from 'reflux';
+import jQuery from 'jquery';
+import Cookies from 'js-cookie';
+import api from '../api';
+import EventRow from '../components/events/eventRow';
+import EventActions from './projectEvents/actions';
+import EventStore from '../stores/eventStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
+import utils from '../utils';
 
 const ProjectEvents = React.createClass({
   propTypes: {
@@ -18,7 +18,7 @@ const ProjectEvents = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(EventStore, "onEventChange"),
+    Reflux.listenTo(EventStore, 'onEventChange'),
     History
   ],
 
@@ -41,9 +41,9 @@ const ProjectEvents = React.createClass({
       endpoint: this.getEventListEndpoint()
     });
 
-    let realtime = Cookies.get("realtimeActive");
+    let realtime = Cookies.get('realtimeActive');
     if (realtime) {
-      let realtimeActive = realtime === "true";
+      let realtimeActive = realtime === 'true';
       this.setState({
         realtimeActive: realtimeActive
       });
@@ -125,7 +125,7 @@ const ProjectEvents = React.createClass({
   },
 
   onRealtimeChange(realtime) {
-    Cookies.set("realtimeActive", realtime.toString());
+    Cookies.set('realtimeActive', realtime.toString());
     this.setState({
       realtimeActive: realtime
     });
diff --git a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
index f0d49298af..6a51bf022e 100644
--- a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
diff --git a/src/sentry/static/sentry/app/views/projectInstall/index.jsx b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
index 01010aa60a..3ee133c6d7 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
@@ -1,8 +1,8 @@
-import React from "react";
+import React from 'react';
 
-import api from "../../api";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import api from '../../api';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
 const ProjectInstall = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
index f48f44c4c3..79b662bba4 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const LanguageNav = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
index 6cf123152a..a757133b43 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import {Link} from "react-router";
+import React from 'react';
+import {Link} from 'react-router';
 
-import AutoSelectText from "../../components/autoSelectText";
+import AutoSelectText from '../../components/autoSelectText';
 
 const ProjectInstallOverview = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index e381c20826..ed0fb7cc79 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -1,10 +1,10 @@
-import React from "react";
-import {Link} from "react-router";
+import React from 'react';
+import {Link} from 'react-router';
 
-import api from "../../api";
-import LanguageNav from "./languageNav";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import api from '../../api';
+import LanguageNav from './languageNav';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
 const ProjectInstallPlatform = React.createClass({
 
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index a3a6af4371..67fecdf961 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -1,13 +1,13 @@
-import jQuery from "jquery";
-import React from "react";
-import {History} from "react-router";
-import api from "../../api";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
-import Pagination from "../../components/pagination";
-import SearchBar from "../../components/searchBar.jsx";
+import jQuery from 'jquery';
+import React from 'react';
+import {History} from 'react-router';
+import api from '../../api';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import Pagination from '../../components/pagination';
+import SearchBar from '../../components/searchBar.jsx';
 
-import ReleaseList from "./releaseList";
+import ReleaseList from './releaseList';
 
 const ProjectReleases = React.createClass({
   propTypes: {
@@ -18,7 +18,7 @@ const ProjectReleases = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: ""
+      defaultQuery: ''
     };
   },
 
diff --git a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
index 96bf302d28..07ddee8849 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import Count from "../../components/count";
-import TimeSince from "../../components/timeSince";
-import Version from "../../components/version";
+import React from 'react';
+import Count from '../../components/count';
+import TimeSince from '../../components/timeSince';
+import Version from '../../components/version';
 
 const ReleaseList = React.createClass({
 
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 9ad59d6442..9e0c5e81d8 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -1,10 +1,10 @@
-import React from "react";
+import React from 'react';
 
-import api from "../../api";
-import ConfigStore from "../../stores/configStore";
-import ListLink from "../../components/listLink";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
+import api from '../../api';
+import ConfigStore from '../../stores/configStore';
+import ListLink from '../../components/listLink';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
 
 const ProjectSettings = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
index b017d9f15a..1192204071 100644
--- a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import {Link} from "react-router";
-import GroupList from "../components/groupList";
+import React from 'react';
+import {Link} from 'react-router';
+import GroupList from '../components/groupList';
 
 const ReleaseAllEvents = React.createClass({
   contextTypes: {
@@ -13,7 +13,7 @@ const ReleaseAllEvents = React.createClass({
       <div>
         <div className="alert alert-block">
           <Link to={`/${orgId}/${projectId}/`} query={{
-            query: "release:" + this.context.release.version
+            query: 'release:' + this.context.release.version
           }}>
             <span className="icon icon-open"></span> View all events seen in this release in the stream
           </Link>
diff --git a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
index 4ecec59c8b..aecc0f4a9a 100644
--- a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
@@ -1,12 +1,12 @@
-import React from "react";
-import {History} from "react-router";
-import jQuery from "jquery";
+import React from 'react';
+import {History} from 'react-router';
+import jQuery from 'jquery';
 
-import api from "../api";
-import FileSize from "../components/fileSize";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
+import api from '../api';
+import FileSize from '../components/fileSize';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
 
 const ReleaseArtifacts = React.createClass({
   contextTypes: {
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 263488020b..9fe6415646 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -1,13 +1,13 @@
-import React from "react";
-import api from "../api";
-import Count from "../components/count";
-import DocumentTitle from "react-document-title";
-import ListLink from "../components/listLink";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import ProjectState from "../mixins/projectState";
-import TimeSince from "../components/timeSince";
-import Version from "../components/version";
+import React from 'react';
+import api from '../api';
+import Count from '../components/count';
+import DocumentTitle from 'react-document-title';
+import ListLink from '../components/listLink';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import ProjectState from '../mixins/projectState';
+import TimeSince from '../components/timeSince';
+import Version from '../components/version';
 
 const ReleaseDetails = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
index a295b6206a..6e395b93c8 100644
--- a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import {Link} from "react-router";
-import GroupList from "../components/groupList";
+import React from 'react';
+import {Link} from 'react-router';
+import GroupList from '../components/groupList';
 
 const ReleaseNewEvents = React.createClass({
   contextTypes: {
@@ -13,7 +13,7 @@ const ReleaseNewEvents = React.createClass({
       <div>
         <div className="alert alert-block">
           <Link to={`/${orgId}/${projectId}/`} query={{
-            query: "first-release:" + this.context.release.version
+            query: 'first-release:' + this.context.release.version
           }}>
             <span className="icon icon-open"></span> View new events seen in this release in the stream
           </Link>
diff --git a/src/sentry/static/sentry/app/views/routeNotFound.jsx b/src/sentry/static/sentry/app/views/routeNotFound.jsx
index be550be7cd..8227abae3c 100644
--- a/src/sentry/static/sentry/app/views/routeNotFound.jsx
+++ b/src/sentry/static/sentry/app/views/routeNotFound.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import DocumentTitle from "react-document-title";
-import Footer from "../components/footer";
-import Header from "../components/header";
+import React from 'react';
+import DocumentTitle from 'react-document-title';
+import Footer from '../components/footer';
+import Header from '../components/header';
 
 const RouteNotFound = React.createClass({
   statics: {
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 1a40efeb66..2eef3f3c97 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import $ from "jquery";
-import api from "../../api";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import $ from 'jquery';
+import api from '../../api';
 import IndicatorStore from '../../stores/indicatorStore';
-import SelectInput from "../../components/selectInput";
+import SelectInput from '../../components/selectInput';
 
-import RuleNodeList from "./ruleNodeList";
+import RuleNodeList from './ruleNodeList';
 
 const RuleEditor = React.createClass({
   propTypes: {
@@ -65,7 +65,7 @@ const RuleEditor = React.createClass({
 
     let loadingIndicator = IndicatorStore.add('Saving...');
     api.request(endpoint, {
-      method: (rule.id ? "PUT" : "POST"),
+      method: (rule.id ? 'PUT' : 'POST'),
       data: data,
       success: () => {
         window.location.href = (rule.id ? '../../' : '../');
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
index 52d4465557..5c19af3808 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNode.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import $ from "jquery";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import $ from 'jquery';
 
 const RuleNode = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
index 15c47408d8..10babd73cf 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -1,7 +1,7 @@
-import React from "react";
+import React from 'react';
 
-import SelectInput from "../../components/selectInput";
-import RuleNode from "./ruleNode";
+import SelectInput from '../../components/selectInput';
+import RuleNode from './ruleNode';
 
 const RuleNodeList = React.createClass({
   getInitialState() {
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index e254e7f343..d2e59358ad 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -1,16 +1,16 @@
-import React from "react";
-import jQuery from "jquery";
-import DocumentTitle from "react-document-title";
+import React from 'react';
+import jQuery from 'jquery';
+import DocumentTitle from 'react-document-title';
 
-import api from "../../api";
-import EventEntries from "../../components/events/eventEntries";
-import Footer from "../../components/footer";
-import Header from "../../components/header";
-import LoadingError from "../../components/loadingError";
-import LoadingIndicator from "../../components/loadingIndicator";
-import PropTypes from "../../proptypes";
+import api from '../../api';
+import EventEntries from '../../components/events/eventEntries';
+import Footer from '../../components/footer';
+import Header from '../../components/header';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import PropTypes from '../../proptypes';
 
-import SharedGroupHeader from "./sharedGroupHeader";
+import SharedGroupHeader from './sharedGroupHeader';
 
 const SharedGroupDetails = React.createClass({
 
@@ -34,11 +34,11 @@ const SharedGroupDetails = React.createClass({
 
   componentWillMount() {
     this.fetchData();
-    jQuery(document.body).addClass("shared-group");
+    jQuery(document.body).addClass('shared-group');
   },
 
   componentWillUnmount() {
-    jQuery(document.body).removeClass("shared-group");
+    jQuery(document.body).removeClass('shared-group');
   },
 
   getTitle() {
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
index 1b52b1a312..c9dcc4a23d 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/sharedGroupHeader.jsx
@@ -1,6 +1,6 @@
-import React from "react";
+import React from 'react';
 
-import Count from "../../components/count";
+import Count from '../../components/count';
 
 const SharedGroupHeader = React.createClass({
   render() {
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index f2876deca1..15454f1992 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -1,25 +1,25 @@
-import React from "react";
-import Reflux from "reflux";
-import {History} from "react-router";
-import $ from "jquery";
-import Cookies from "js-cookie";
+import React from 'react';
+import Reflux from 'reflux';
+import {History} from 'react-router';
+import $ from 'jquery';
+import Cookies from 'js-cookie';
 import Sticky from 'react-sticky';
-import classNames from "classnames";
-import _ from "underscore";
+import classNames from 'classnames';
+import _ from 'underscore';
 
-import api from "../api";
+import api from '../api';
 
-import GroupStore from "../stores/groupStore";
-import LoadingError from "../components/loadingError";
-import LoadingIndicator from "../components/loadingIndicator";
-import Pagination from "../components/pagination";
+import GroupStore from '../stores/groupStore';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import Pagination from '../components/pagination';
 import StreamGroup from '../components/stream/group';
 import StreamActions from './stream/actions';
-import StreamTagActions from "../actions/streamTagActions";
-import StreamTagStore from "../stores/streamTagStore";
+import StreamTagActions from '../actions/streamTagActions';
+import StreamTagStore from '../stores/streamTagStore';
 import StreamFilters from './stream/filters';
-import StreamSidebar from "./stream/sidebar";
-import utils from "../utils";
+import StreamSidebar from './stream/sidebar';
+import utils from '../utils';
 import parseLinkHeader from '../utils/parseLinkHeader';
 
 const Stream = React.createClass({
@@ -28,18 +28,18 @@ const Stream = React.createClass({
   },
 
   mixins: [
-    Reflux.listenTo(GroupStore, "onGroupChange"),
-    Reflux.listenTo(StreamTagStore, "onStreamTagChange"),
+    Reflux.listenTo(GroupStore, 'onGroupChange'),
+    Reflux.listenTo(StreamTagStore, 'onStreamTagChange'),
     History
   ],
 
   getDefaultProps() {
     return {
       // intentional trailing whitespace / better UX for when uesrs focus on search input
-      defaultQuery: "is:unresolved ",
+      defaultQuery: 'is:unresolved ',
 
-      defaultSort: "date",
-      defaultStatsPeriod: "24h",
+      defaultSort: 'date',
+      defaultStatsPeriod: '24h',
       maxItems: 25
     };
   },
@@ -74,9 +74,9 @@ const Stream = React.createClass({
       endpoint: this.getGroupListEndpoint()
     });
 
-    let realtime = Cookies.get("realtimeActive");
+    let realtime = Cookies.get('realtimeActive');
     if (realtime) {
-      let realtimeActive = realtime === "true";
+      let realtimeActive = realtime === 'true';
       this.setState({
         realtimeActive: realtimeActive
       });
@@ -142,23 +142,23 @@ const Stream = React.createClass({
 
     let filter = {};
     if (currentQuery.bookmarks) {
-      filter = { bookmarks: "1" };
+      filter = { bookmarks: '1' };
     } else if (currentQuery.assigned) {
-      filter = { assigned: "1" };
+      filter = { assigned: '1' };
     }
 
     let query =
-      currentQuery.hasOwnProperty("query") ?
+      currentQuery.hasOwnProperty('query') ?
       currentQuery.query :
       this.props.defaultQuery;
 
     let sort =
-      currentQuery.hasOwnProperty("sort") ?
+      currentQuery.hasOwnProperty('sort') ?
       currentQuery.sort :
       this.props.defaultSort;
 
     let statsPeriod =
-      currentQuery.hasOwnProperty("statsPeriod") ?
+      currentQuery.hasOwnProperty('statsPeriod') ?
       currentQuery.statsPeriod :
       this.props.defaultStatsPeriod;
 
@@ -189,7 +189,7 @@ const Stream = React.createClass({
       statsPeriod: this.state.statsPeriod
     });
 
-    if (!requestParams.hasOwnProperty("query")) {
+    if (!requestParams.hasOwnProperty('query')) {
       requestParams.query = this.props.defaultQuery;
     }
 
@@ -246,7 +246,7 @@ const Stream = React.createClass({
   },
 
   onRealtimeChange(realtime) {
-    Cookies.set("realtimeActive", realtime.toString());
+    Cookies.set('realtimeActive', realtime.toString());
     this.setState({
       realtimeActive: realtime
     });
@@ -424,7 +424,7 @@ const Stream = React.createClass({
           />
           <div className="group-header">
             <Sticky onStickyStateChange={this.onStickyStateChange}>
-              <div className={this.state.isStickyHeader ? "container" : null}>
+              <div className={this.state.isStickyHeader ? 'container' : null}>
                 <StreamActions
                   orgId={params.orgId}
                   projectId={params.projectId}
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index 133a3c8162..b67a3da176 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -1,8 +1,8 @@
-import Modal from "react-bootstrap/lib/Modal";
+import Modal from 'react-bootstrap/lib/Modal';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
-import React from "react";
-import SelectedGroupStore from "../../stores/selectedGroupStore";
-import TooltipMixin from "../../mixins/tooltip";
+import React from 'react';
+import SelectedGroupStore from '../../stores/selectedGroupStore';
+import TooltipMixin from '../../mixins/tooltip';
 
 const ActionLink = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index caa0d8a3b7..b2e6fb8d73 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -1,12 +1,12 @@
-import React from "react";
-import Reflux from "reflux";
-import api from "../../api";
-import ActionLink from "./actionLink";
-import DropdownLink from "../../components/dropdownLink";
-import IndicatorStore from "../../stores/indicatorStore";
-import MenuItem from "../../components/menuItem";
+import React from 'react';
+import Reflux from 'reflux';
+import api from '../../api';
+import ActionLink from './actionLink';
+import DropdownLink from '../../components/dropdownLink';
+import IndicatorStore from '../../stores/indicatorStore';
+import MenuItem from '../../components/menuItem';
 import PureRenderMixin from 'react-addons-pure-render-mixin';
-import SelectedGroupStore from "../../stores/selectedGroupStore";
+import SelectedGroupStore from '../../stores/selectedGroupStore';
 
 const StreamActions = React.createClass({
   propTypes: {
@@ -144,7 +144,7 @@ const StreamActions = React.createClass({
                actionTypes={this.props.actionTypes}
                className="btn btn-default btn-sm action-resolve"
                disabled={!this.state.anySelected}
-               onAction={this.onUpdate.bind(this, {status: "resolved"})}
+               onAction={this.onUpdate.bind(this, {status: 'resolved'})}
                buttonTitle="Resolve"
                confirmLabel="Resolve"
                tooltip="Set Status to Resolved"
@@ -207,7 +207,7 @@ const StreamActions = React.createClass({
                    actionTypes={this.props.actionTypes}
                    className="action-unresolve"
                    disabled={!this.state.anySelected}
-                   onAction={this.onUpdate.bind(this, {status: "unresolved"})}
+                   onAction={this.onUpdate.bind(this, {status: 'unresolved'})}
                    neverConfirm={true}
                    confirmLabel="Unresolve"
                    onlyIfBulk={false}
@@ -222,7 +222,7 @@ const StreamActions = React.createClass({
                    actionTypes={this.props.actionTypes}
                    className="action-mute"
                    disabled={!this.state.anySelected}
-                   onAction={this.onUpdate.bind(this, {status: "muted"})}
+                   onAction={this.onUpdate.bind(this, {status: 'muted'})}
                    neverConfirm={true}
                    confirmLabel="Mute"
                    onlyIfBulk={false}
diff --git a/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx b/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx
index a943d27c83..5ff358a8b9 100644
--- a/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filterSelectLink.jsx
@@ -1,4 +1,4 @@
-import React from "react";
+import React from 'react';
 
 const FilterSelectLink = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 7b0f8c2668..d15702ac19 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -1,8 +1,8 @@
-import React from "react";
+import React from 'react';
 
-import FilterSelectLink from "./filterSelectLink";
-import SearchBar from "./searchBar";
-import SortOptions from "./sortOptions";
+import FilterSelectLink from './filterSelectLink';
+import SearchBar from './searchBar';
+import SortOptions from './sortOptions';
 
 const StreamFilters = React.createClass({
   propTypes: {
@@ -16,9 +16,9 @@ const StreamFilters = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: "",
-      sort: "",
-      filter: "",
+      defaultQuery: '',
+      sort: '',
+      filter: '',
       query: null,
       onFilterChange: function() {},
       onSortChange: function() {},
@@ -57,11 +57,11 @@ const StreamFilters = React.createClass({
                 extraClass="btn btn-all-events" />
               <FilterSelectLink label="Bookmarks"
                 isActive={activeButton === 'bookmarks'}
-                onSelect={this.onFilterChange.bind(this, {bookmarks: "1"})}
+                onSelect={this.onFilterChange.bind(this, {bookmarks: '1'})}
                 extraClass="btn btn-middle btn-bookmarks" />
               <FilterSelectLink label="Assigned"
                 isActive={activeButton === 'assigned'}
-                onSelect={this.onFilterChange.bind(this, {assigned: "1"})}
+                onSelect={this.onFilterChange.bind(this, {assigned: '1'})}
                 extraClass="btn btn-assigned" />
             </div>
           </div>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index 5f683fdb97..a37521f47e 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -1,17 +1,17 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import Reflux from "reflux";
-import _ from "underscore";
-import classNames from "classnames";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import Reflux from 'reflux';
+import _ from 'underscore';
+import classNames from 'classnames';
 
-import StreamTagStore from "../../stores/streamTagStore";
-import MemberListStore from "../../stores/memberListStore";
+import StreamTagStore from '../../stores/streamTagStore';
+import MemberListStore from '../../stores/memberListStore';
 
-import api from "../../api";
+import api from '../../api';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
-import SearchDropdown from "./searchDropdown";
+import SearchDropdown from './searchDropdown';
 
 const SearchBar = React.createClass({
   propTypes: {
@@ -47,7 +47,7 @@ const SearchBar = React.createClass({
 
   getDefaultProps() {
     return {
-      defaultQuery: "",
+      defaultQuery: '',
       query: null,
       onSearch: function() {},
       onQueryChange: function() {},
@@ -188,7 +188,7 @@ const SearchBar = React.createClass({
       data: {
         query: query
       },
-      method: "GET",
+      method: 'GET',
       success: (values) => {
         this.setState({ loading: false });
         callback(values.map((v) => {
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index f9ca5c4718..7035337569 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -1,7 +1,7 @@
-import React from "react";
-import classNames from "classnames";
+import React from 'react';
+import classNames from 'classnames';
 
-import LoadingIndicator from "../../components/loadingIndicator";
+import LoadingIndicator from '../../components/loadingIndicator';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 
@@ -47,8 +47,8 @@ const SearchDropdown = React.createClass({
             ? <li key="loading" className="search-autocomplete-item"><LoadingIndicator mini={true}/></li>
             : this.props.items.map((item) => {
               return (
-                <li key={item.value || item.desc} className={classNames("search-autocomplete-item", item.active && 'active')} onClick={this.onClick.bind(this, item.value)}>
-                  <span className={classNames("icon", item.className)}></span>
+                <li key={item.value || item.desc} className={classNames('search-autocomplete-item', item.active && 'active')} onClick={this.onClick.bind(this, item.value)}>
+                  <span className={classNames('icon', item.className)}></span>
                   <h4>{ item.title && item.title + ' - '}<span className="search-description">{this.renderDescription(item)}</span></h4>
                   {item.example ?
                     <p className="search-example">{item.example}</p> : ''
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index cbec9a6473..191a79bde7 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -1,8 +1,8 @@
-import React from "react";
-import _ from "underscore";
-import StreamTagFilter from "./tagFilter";
-import LoadingIndicator from "../../components/loadingIndicator";
-import {queryToObj, objToQuery} from "../../utils/stream";
+import React from 'react';
+import _ from 'underscore';
+import StreamTagFilter from './tagFilter';
+import LoadingIndicator from '../../components/loadingIndicator';
+import {queryToObj, objToQuery} from '../../utils/stream';
 
 
 let TEXT_FILTER_DEBOUNCE_IN_MS = 300;
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
index 733bad2e70..b6a33ffc62 100644
--- a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -1,7 +1,7 @@
 import PureRenderMixin from 'react-addons-pure-render-mixin';
-import React from "react";
-import DropdownLink from "../../components/dropdownLink";
-import MenuItem from "../../components/menuItem";
+import React from 'react';
+import DropdownLink from '../../components/dropdownLink';
+import MenuItem from '../../components/menuItem';
 
 const SortOptions = React.createClass({
   mixins: [PureRenderMixin],
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 4bc73c8302..7613efdda4 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -1,6 +1,6 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import _ from "underscore";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import _ from 'underscore';
 
 const StreamTagFilter = React.createClass({
   propTypes: {
diff --git a/tests/js/helpers/stubReactComponent.jsx b/tests/js/helpers/stubReactComponent.jsx
index 83653d16d2..7f006990cd 100644
--- a/tests/js/helpers/stubReactComponent.jsx
+++ b/tests/js/helpers/stubReactComponent.jsx
@@ -1,12 +1,12 @@
 // Inspired by TimothyRHuertas
 // https://gist.github.com/TimothyRHuertas/d7d06313c5411fe242bb
 
-let React = require("react");
-let divFactory = React.createFactory("div");
+let React = require('react');
+let divFactory = React.createFactory('div');
 let originalCreateElement = React.createElement;
 
 export default function(stubber, stubbedComponents) {
-  stubber.stub(React, "createElement", function(component, props) {
+  stubber.stub(React, 'createElement', function(component, props) {
     props = props || {};
     if (stubbedComponents.indexOf(component) === -1) {
       return originalCreateElement.apply(React, arguments);
@@ -16,7 +16,7 @@ export default function(stubber, stubbedComponents) {
 
       if (displayName) {
         if (props.className) {
-          props.className = props.className + " " + displayName;
+          props.className = props.className + ' ' + displayName;
         } else {
           props.className = displayName;
         }
diff --git a/tests/js/spec/components/barChart.spec.jsx b/tests/js/spec/components/barChart.spec.jsx
index b48feb29af..f3e6e5c746 100644
--- a/tests/js/spec/components/barChart.spec.jsx
+++ b/tests/js/spec/components/barChart.spec.jsx
@@ -1,19 +1,19 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import TestUtils from "react-addons-test-utils";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import TestUtils from 'react-addons-test-utils';
 
-import BarChart from "app/components/barChart";
+import BarChart from 'app/components/barChart';
 
-describe("BarChart", function() {
+describe('BarChart', function() {
 
-  describe("render()", function() {
+  describe('render()', function() {
 
-    it("renders with default props", function() {
+    it('renders with default props', function() {
       let comp = TestUtils.renderIntoDocument(<BarChart />);
       expect(comp).to.be.ok;
     });
 
-    it("renders with points data", function () {
+    it('renders with points data', function () {
       let points = [
         { x: 1439766000, y: 10 },
         { x: 1439769600, y: 20 },
@@ -29,7 +29,7 @@ describe("BarChart", function() {
       expect(columns[2]).to.have.property('textContent', '30');
     });
 
-    it("renders with points and markers", function () {
+    it('renders with points and markers', function () {
       let points = [
         { x: 1439769600, y: 10 },
         { x: 1439773200, y: 20 },
@@ -53,7 +53,7 @@ describe("BarChart", function() {
       expect(columns[4]).to.have.property('textContent', '30');
     });
 
-    it("renders with points and markers, when first and last seen are same data point", function () {
+    it('renders with points and markers, when first and last seen are same data point', function () {
       let points = [
         { x: 1439776800, y: 30 }
       ];
diff --git a/tests/js/spec/components/events/interfaces/definitionList.spec.jsx b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
index 81db1b82a4..94fbd1b267 100644
--- a/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
@@ -1,12 +1,12 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import TestUtils from "react-addons-test-utils";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import TestUtils from 'react-addons-test-utils';
 
-import DefinitionList from "app/components/events/interfaces/definitionList";
+import DefinitionList from 'app/components/events/interfaces/definitionList';
 
 describe('DefinitionList', function () {
-  describe("render", function () {
-    it("should render a definition list of key/value pairs", function () {
+  describe('render', function () {
+    it('should render a definition list of key/value pairs', function () {
       let data = [
         ['a', 'x'], ['b', 'y']
       ];
@@ -21,7 +21,7 @@ describe('DefinitionList', function () {
       expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
-    it("should sort sort key/value pairs", function () {
+    it('should sort sort key/value pairs', function () {
       let data = [
         ['b', 'y'], ['a', 'x']
       ];
@@ -36,7 +36,7 @@ describe('DefinitionList', function () {
       expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
-    it("should use a single space for values that are an empty string", function () {
+    it('should use a single space for values that are an empty string', function () {
       let data = [
         ['b', 'y'], ['a', ''] // empty string
       ];
@@ -51,7 +51,7 @@ describe('DefinitionList', function () {
       expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
-    it("should coerce non-strings into strings", function () {
+    it('should coerce non-strings into strings', function () {
       let data = [
         ['a', false]
       ];
@@ -64,7 +64,7 @@ describe('DefinitionList', function () {
       expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('false');
     });
 
-    it("shouldn't blow up on null", function () {
+    it('shouldn\'t blow up on null', function () {
       let data = [
         ['a', null]
       ];
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 78a1016802..868a94138c 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
-import stubReactComponents from "../../../../helpers/stubReactComponent";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import stubReactComponents from '../../../../helpers/stubReactComponent';
 
-import Frame from "app/components/events/interfaces/frame";
-import FrameVariables from "app/components/events/interfaces/frameVariables";
+import Frame from 'app/components/events/interfaces/frame';
+import FrameVariables from 'app/components/events/interfaces/frameVariables';
 
-describe("Frame", function () {
+describe('Frame', function () {
   beforeEach(function () {
     this.sandbox = sinon.sandbox.create();
     stubReactComponents(this.sandbox, [FrameVariables]);
@@ -15,7 +15,7 @@ describe("Frame", function () {
     this.sandbox.restore();
   });
 
-  describe("renderOriginalSourceInfo()", function () {
+  describe('renderOriginalSourceInfo()', function () {
     beforeEach(function () {
       this.data = {
         origAbsPath: 'https://beta.getsentry.com/_static/sentry/dist/vendor.js',
@@ -28,7 +28,7 @@ describe("Frame", function () {
       };
     });
 
-    it("should render the original source information as a HTML string", function () {
+    it('should render the original source information as a HTML string', function () {
       let frame = TestUtils.renderIntoDocument(<Frame data={this.data} />);
 
       // NOTE: indentation/whitespace intentional to match output string
@@ -45,7 +45,7 @@ describe("Frame", function () {
       <strong>Source Map</strong><br/><a href="https://beta.getsentry.com/_static/sentry/dist/vendor.js.map">vendor.js.map<br/></div>`);
     });
 
-    it("should omit a source map <a> tag if no mapUrl is provided", function () {
+    it('should omit a source map <a> tag if no mapUrl is provided', function () {
       delete this.data.mapUrl;
 
       let frame = TestUtils.renderIntoDocument(<Frame data={this.data} />);
diff --git a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
index 81c659584a..7396a8681b 100644
--- a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
@@ -1,7 +1,7 @@
-import {getJavaFrame} from "app/components/events/interfaces/rawStacktraceContent";
+import {getJavaFrame} from 'app/components/events/interfaces/rawStacktraceContent';
 
-describe("RawStacktraceContent", function() {
-  describe("getJavaFrame()", function() {
+describe('RawStacktraceContent', function() {
+  describe('getJavaFrame()', function() {
     it('should render java frames', function () {
       expect(getJavaFrame({
         module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index 4794bf0b96..2a8900f7bf 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -1,13 +1,13 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
-import stubReactComponents from "../../../../helpers/stubReactComponent";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import stubReactComponents from '../../../../helpers/stubReactComponent';
 
-import RichHttpContent from "app/components/events/interfaces/richHttpContent";
-import DefinitionList from "app/components/events/interfaces/definitionList";
-import ClippedBox from "app/components/clippedBox";
-import ContextData from "app/components/contextData";
+import RichHttpContent from 'app/components/events/interfaces/richHttpContent';
+import DefinitionList from 'app/components/events/interfaces/definitionList';
+import ClippedBox from 'app/components/clippedBox';
+import ContextData from 'app/components/contextData';
 
-describe("RichHttpContent", function () {
+describe('RichHttpContent', function () {
   beforeEach(function () {
     this.data = {
       query: '',
@@ -25,8 +25,8 @@ describe("RichHttpContent", function () {
     this.sandbox.restore();
   });
 
-  describe("objectToSortedTupleArray", function () {
-    it("should convert a key/value object to a sorted array of key/value tuples", function () {
+  describe('objectToSortedTupleArray', function () {
+    it('should convert a key/value object to a sorted array of key/value tuples', function () {
       let elem = this.elem;
       expect(elem.objectToSortedTupleArray({
         awe: 'some',
@@ -53,8 +53,8 @@ describe("RichHttpContent", function () {
     });
   });
 
-  describe("getBodySection", function () {
-    it("should return plain-text when unrecognized Content-Type and not parsable as JSON", function () {
+  describe('getBodySection', function () {
+    it('should return plain-text when unrecognized Content-Type and not parsable as JSON', function () {
       let out = this.elem.getBodySection({
         headers: [], // no content-type header,
         data: 'helloworld'
@@ -63,13 +63,13 @@ describe("RichHttpContent", function () {
       expect(out.type).to.eql('pre');
     });
 
-    it("should return a DefinitionList element when Content-Type is x-www-form-urlencoded", function () {
+    it('should return a DefinitionList element when Content-Type is x-www-form-urlencoded', function () {
       let out = this.elem.getBodySection({
         headers: [
           ['lol' , 'no'],
           ['Content-Type', 'application/x-www-form-urlencoded']
         ], // no content-type header,
-        data: "foo=bar&bar=baz"
+        data: 'foo=bar&bar=baz'
       });
 
       // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
@@ -80,7 +80,7 @@ describe("RichHttpContent", function () {
       ]);
     });
 
-    it("should return plain-text when Content-Type is x-www-form-urlencoded and query string cannot be parsed", function () {
+    it('should return plain-text when Content-Type is x-www-form-urlencoded and query string cannot be parsed', function () {
       let out = this.elem.getBodySection({
         headers: [
           ['Content-Type', 'application/x-www-form-urlencoded']
@@ -91,7 +91,7 @@ describe("RichHttpContent", function () {
       expect(out.type).to.eql('pre');
     });
 
-    it("should return a ContextData element when Content-Type is application/json", function () {
+    it('should return a ContextData element when Content-Type is application/json', function () {
       let out = this.elem.getBodySection({
         headers: [
           ['lol' , 'no'],
@@ -107,7 +107,7 @@ describe("RichHttpContent", function () {
       });
     });
 
-    it("should return a ContextData element when content is JSON, ignoring Content-Type", function () {
+    it('should return a ContextData element when content is JSON, ignoring Content-Type', function () {
       let out = this.elem.getBodySection({
         headers: [
           ['Content-Type', 'application/x-www-form-urlencoded']
@@ -122,7 +122,7 @@ describe("RichHttpContent", function () {
       });
     });
 
-    it("should return plain-text when JSON is not parsable", function () {
+    it('should return plain-text when JSON is not parsable', function () {
       let out = this.elem.getBodySection({
         headers: [
           ['lol' , 'no'],
@@ -134,7 +134,7 @@ describe("RichHttpContent", function () {
       expect(out.type).to.eql('pre');
     });
 
-    it("should now blow up in a malformed uri", function () {
+    it('should now blow up in a malformed uri', function () {
       // > decodeURIComponent('a%AFc')
       // URIError: URI malformed
       let data = {
diff --git a/tests/js/spec/components/events/interfaces/utils.spec.jsx b/tests/js/spec/components/events/interfaces/utils.spec.jsx
index 28937fa6c3..7f5a09c51f 100644
--- a/tests/js/spec/components/events/interfaces/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/utils.spec.jsx
@@ -1,42 +1,42 @@
-import {getCurlCommand} from "app/components/events/interfaces/utils";
+import {getCurlCommand} from 'app/components/events/interfaces/utils';
 
 
-describe("components/interfaces/utils", function() {
-  describe("getCurlCommand()", function() {
-    it("should convert an http request object to an equivalent unix curl command string", function () {
+describe('components/interfaces/utils', function() {
+  describe('getCurlCommand()', function() {
+    it('should convert an http request object to an equivalent unix curl command string', function () {
       getCurlCommand({
-        "cookies": [
+        'cookies': [
           [
-            "foo",
-            "bar"
+            'foo',
+            'bar'
           ],
           [
-            "biz",
-            "baz"
+            'biz',
+            'baz'
           ]
         ],
-        "url": "http:\/\/example.com\/foo",
-        "headers": [
+        'url': 'http://example.com/foo',
+        'headers': [
           [
-            "Referer",
-            "http:\/\/example.com"
+            'Referer',
+            'http://example.com'
           ],
           [
-            "User-Agent",
-            "Mozilla\/5.0 (Windows NT 6.2; WOW64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/28.0.1500.72 Safari\/537.36"
+            'User-Agent',
+            'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36'
           ],
           [
-            "Content-Type",
-            "application\/json"
+            'Content-Type',
+            'application/json'
           ],
         ],
-        "env": {
-          "ENV": "prod"
+        'env': {
+          'ENV': 'prod'
         },
-        "fragment": "",
-        "query": "foo=bar",
-        "data": "{\"hello\": \"world\"}",
-        "method": "GET"
+        'fragment': '',
+        'query': 'foo=bar',
+        'data': '{"hello": "world"}',
+        'method': 'GET'
       }).should.eql('curl \\\n' +
         ' -H "Content-Type: application/json" \\\n' +
         ' -H "Referer: http://example.com" \\\n' +
@@ -47,28 +47,28 @@ describe("components/interfaces/utils", function() {
 
       // --compressed (because Accept-Encoding: gzip)
       getCurlCommand({
-        "url": "http:\/\/example.com\/foo",
-        "headers": [
+        'url': 'http://example.com/foo',
+        'headers': [
           [
-            "Content-Type",
-            "application\/json"
+            'Content-Type',
+            'application/json'
           ],
           [
-            "Referer",
-            "http:\/\/example.com"
+            'Referer',
+            'http://example.com'
           ],
           [
-            "Accept-Encoding",
-            "gzip"
+            'Accept-Encoding',
+            'gzip'
           ]
         ],
-        "env": {
-          "ENV": "prod"
+        'env': {
+          'ENV': 'prod'
         },
-        "fragment": "",
-        "query": "foo=bar",
-        "data": "{\"hello\": \"world\"}",
-        "method": "GET"
+        'fragment': '',
+        'query': 'foo=bar',
+        'data': '{"hello": "world"}',
+        'method': 'GET'
       }).should.eql('curl \\\n' +
         ' --compressed \\\n' +
         ' -H "Accept-Encoding: gzip" \\\n' +
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index 6e2f74cba2..16ebed6d1b 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -1,20 +1,20 @@
-import React from "react";
-import ReactDOMServer from "react-dom/server";
+import React from 'react';
+import ReactDOMServer from 'react-dom/server';
 
-import TestUtils from "react-addons-test-utils";
+import TestUtils from 'react-addons-test-utils';
 
-import api from "app/api";
-import TagDistributionMeter from "app/components/group/tagDistributionMeter";
+import api from 'app/api';
+import TagDistributionMeter from 'app/components/group/tagDistributionMeter';
 
-describe("TagDistributionMeter", function() {
+describe('TagDistributionMeter', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    this.stubbedApiRequest = this.sandbox.stub(api, 'request');
 
     this.element = TestUtils.renderIntoDocument(
-      <TagDistributionMeter tag="browser" group={{id:"1337"}} orgId="123" projectId="456"/>
+      <TagDistributionMeter tag="browser" group={{id:'1337'}} orgId="123" projectId="456"/>
     );
   });
 
@@ -22,7 +22,7 @@ describe("TagDistributionMeter", function() {
     this.sandbox.restore();
   });
 
-  describe("fetchData()", function() {
+  describe('fetchData()', function() {
     it('should make a request to the groups/tags endpoint', function () {
       // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
       //       reset the request stub so that we can get an accurate count
@@ -35,7 +35,7 @@ describe("TagDistributionMeter", function() {
     });
   });
 
-  describe("renderBody()", function () {
+  describe('renderBody()', function () {
     it('should return null if loading', function (done) {
       this.element.setState({
         loading: true,
diff --git a/tests/js/spec/helpers/formatters.spec.jsx b/tests/js/spec/helpers/formatters.spec.jsx
index 11934ffe98..022967e23a 100644
--- a/tests/js/spec/helpers/formatters.spec.jsx
+++ b/tests/js/spec/helpers/formatters.spec.jsx
@@ -1,15 +1,15 @@
-import {userDisplayName} from "app/utils/formatters";
+import {userDisplayName} from 'app/utils/formatters';
 
-describe("formatters", function () {
-  describe("userDisplayName", function () {
-    it("should only show email, if name and email are the same", function () {
+describe('formatters', function () {
+  describe('userDisplayName', function () {
+    it('should only show email, if name and email are the same', function () {
       expect(userDisplayName({
         name: 'foo@bar.com',
         email: 'foo@bar.com'
       })).to.eql('foo@bar.com');
     });
 
-    it("should show name + email, if name and email differ", function () {
+    it('should show name + email, if name and email differ', function () {
       expect(userDisplayName({
         name: 'user',
         email: 'foo@bar.com'
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index 86249253c7..60b12daad9 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -31,8 +31,8 @@ describe('GroupStore', function () {
     });
   });
 
-  describe("onUpdate()", function () {
-    it("should treat undefined itemIds argument as 'all'", function () {
+  describe('onUpdate()', function () {
+    it('should treat undefined itemIds argument as \'all\'', function () {
       GroupStore.items = [
         { id: 1 },
         { id: 2 },
@@ -48,8 +48,8 @@ describe('GroupStore', function () {
     });
   });
 
-  describe("onUpdateSuccess()", function () {
-    it("should treat undefined itemIds argument as 'all'", function () {
+  describe('onUpdateSuccess()', function () {
+    it('should treat undefined itemIds argument as \'all\'', function () {
       GroupStore.items = [
         { id: 1 },
         { id: 2 },
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/streamTagStore.spec.jsx
index a532552614..1416e5f901 100644
--- a/tests/js/spec/stores/streamTagStore.spec.jsx
+++ b/tests/js/spec/stores/streamTagStore.spec.jsx
@@ -1,6 +1,6 @@
-import StreamTagStore from "app/stores/streamTagStore";
+import StreamTagStore from 'app/stores/streamTagStore';
 
-describe("StreamTagStore", function () {
+describe('StreamTagStore', function () {
   beforeEach(() => {
     StreamTagStore.reset();
     this.sandbox = sinon.sandbox.create();
@@ -10,9 +10,9 @@ describe("StreamTagStore", function () {
     this.sandbox.restore();
   });
 
-  describe("onLoadTagsSuccess()", () => {
+  describe('onLoadTagsSuccess()', () => {
 
-    it("should add a new tag with empty values and trigger the new addition", () => {
+    it('should add a new tag with empty values and trigger the new addition', () => {
       this.sandbox.stub(StreamTagStore, 'trigger');
 
       StreamTagStore.onLoadTagsSuccess([{
@@ -29,7 +29,7 @@ describe("StreamTagStore", function () {
       expect(StreamTagStore.trigger.calledOnce).to.be.ok;
     });
 
-    it("should not overwrite predefined filters", () => {
+    it('should not overwrite predefined filters', () => {
       let isTag = StreamTagStore.tags.is;
       StreamTagStore.onLoadTagsSuccess([{
         key: 'is',
diff --git a/tests/js/spec/utils/stream.spec.jsx b/tests/js/spec/utils/stream.spec.jsx
index ec5878f661..f4a806f228 100644
--- a/tests/js/spec/utils/stream.spec.jsx
+++ b/tests/js/spec/utils/stream.spec.jsx
@@ -1,8 +1,8 @@
-import {queryToObj, objToQuery} from "app/utils/stream";
+import {queryToObj, objToQuery} from 'app/utils/stream';
 
-describe("utils/stream", function () {
-  describe("queryToObj()", function () {
-    it("should convert a basic query string to a query object", function () {
+describe('utils/stream', function () {
+  describe('queryToObj()', function () {
+    it('should convert a basic query string to a query object', function () {
       expect(queryToObj('is:unresolved')).to.eql({
         is: 'unresolved'
       });
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index 833108fefb..4603b6ee98 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -1,34 +1,34 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
-import api from "app/api";
-import OrganizationTeams from "app/views/organizationTeams";
-import ExpandedTeamList from "app/views/organizationTeams/expandedTeamList";
-import AllTeamsList from "app/views/organizationTeams/allTeamsList";
-import OrganizationHomeContainer from "app/components/organizations/homeContainer";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import api from 'app/api';
+import OrganizationTeams from 'app/views/organizationTeams';
+import ExpandedTeamList from 'app/views/organizationTeams/expandedTeamList';
+import AllTeamsList from 'app/views/organizationTeams/allTeamsList';
+import OrganizationHomeContainer from 'app/components/organizations/homeContainer';
 
-import stubReactComponent from "../../helpers/stubReactComponent";
-import stubContext from "../../helpers/stubContext";
+import stubReactComponent from '../../helpers/stubReactComponent';
+import stubContext from '../../helpers/stubContext';
 
-describe("OrganizationTeams", function() {
+describe('OrganizationTeams', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    this.stubbedApiRequest = this.sandbox.stub(api, 'request');
     stubReactComponent(this.sandbox, [ExpandedTeamList, AllTeamsList, OrganizationHomeContainer]);
 
     let ContextStubbedOrganizationTeams = stubContext(OrganizationTeams, {
-      organization: { id: "1337" }
+      organization: { id: '1337' }
     });
 
-    this.Element = <ContextStubbedOrganizationTeams params={{orgId:"123"}}/>;
+    this.Element = <ContextStubbedOrganizationTeams params={{orgId:'123'}}/>;
   });
 
   afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe("fetchStats()", function() {
+  describe('fetchStats()', function() {
     it('should make a request to the organizations endpoint', function () {
       let organizationTeams = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
 
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index 7f402baf63..0e84e62f6e 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -1,24 +1,24 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
 
-import stubReactComponents from "../../helpers/stubReactComponent";
+import stubReactComponents from '../../helpers/stubReactComponent';
 
-import api from "app/api";
-import ProjectReleases from "app/views/projectReleases";
-import SearchBar from "app/views/stream/searchBar";
-import Pagination from "app/components/pagination";
+import api from 'app/api';
+import ProjectReleases from 'app/views/projectReleases';
+import SearchBar from 'app/views/stream/searchBar';
+import Pagination from 'app/components/pagination';
 
-describe("ProjectReleases", function () {
+describe('ProjectReleases', function () {
   beforeEach(function () {
     this.sandbox = sinon.sandbox.create();
 
-    this.sandbox.stub(api, "request");
+    this.sandbox.stub(api, 'request');
     stubReactComponents(this.sandbox, [SearchBar, Pagination]);
 
     this.props = {
       setProjectNavSection: function () {},
-      params: { orgId: "123", projectId: "456"},
-      location: {query: {limit: 0, query: "derp"}}
+      params: { orgId: '123', projectId: '456'},
+      location: {query: {limit: 0, query: 'derp'}}
     };
     this.projectReleases = TestUtils.renderIntoDocument(
       <ProjectReleases {...this.props}/>
@@ -29,20 +29,20 @@ describe("ProjectReleases", function () {
     this.sandbox.restore();
   });
 
-  describe("fetchData()", function () {
-    it("should call releases endpoint", function () {
+  describe('fetchData()', function () {
+    it('should call releases endpoint', function () {
       expect(api.request.args[0][0]).to.equal('/projects/123/456/releases/?limit=50&query=derp');
     });
   });
 
-  describe("getInitialState()", function () {
-    it("should take query state from query string", function () {
-      expect(this.projectReleases.state.query).to.equal("derp");
+  describe('getInitialState()', function () {
+    it('should take query state from query string', function () {
+      expect(this.projectReleases.state.query).to.equal('derp');
     });
   });
 
-  describe("onSearch", function () {
-    it("should change query string with new search parameter", function () {
+  describe('onSearch', function () {
+    it('should change query string with new search parameter', function () {
       let projectReleases = this.projectReleases;
 
       let pushState = this.sandbox.stub();
@@ -50,21 +50,21 @@ describe("ProjectReleases", function () {
         pushState: pushState
       };
 
-      projectReleases.onSearch("searchquery");
+      projectReleases.onSearch('searchquery');
 
       expect(pushState.calledOnce).to.be.ok;
       expect(pushState.args[0]).to.eql([
         null,
         '/123/456/releases/',
-        { query: "searchquery" }
+        { query: 'searchquery' }
       ]);
     });
   });
 
   // TODO: figure how to trigger componentWillReceiveProps
 
-  describe("componentWillReceiveProps()", function () {
-    it("should update state with latest query pulled from query string", function () {
+  describe('componentWillReceiveProps()', function () {
+    it('should update state with latest query pulled from query string', function () {
       let projectReleases = this.projectReleases;
 
       let setState = this.sandbox.stub(projectReleases, 'setState');
@@ -72,15 +72,15 @@ describe("ProjectReleases", function () {
       let newProps = {
         ...this.props,
         location: {
-          search: "?query=newquery",
-          query: { query: "newquery" }
+          search: '?query=newquery',
+          query: { query: 'newquery' }
         }
       };
       projectReleases.componentWillReceiveProps(newProps);
 
       expect(setState.calledOnce).to.be.ok;
       expect(setState.getCall(0).args[0]).to.eql({
-        query: "newquery"
+        query: 'newquery'
       });
     });
   });
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 78e920d895..86af5b8e12 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -1,17 +1,17 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
-import Cookies from "js-cookie";
-import Sticky from "react-sticky";  
-import Api from "app/api";
-import CursorPoller from "app/utils/cursorPoller";
-import LoadingError from "app/components/loadingError";
-import LoadingIndicator from "app/components/loadingIndicator";
-import Stream from "app/views/stream";
-import StreamGroup from "app/components/stream/group";
-import StreamFilters from "app/views/stream/filters";
-import StreamSidebar from "app/views/stream/sidebar";
-import StreamActions from "app/views/stream/actions";
-import stubReactComponents from "../../helpers/stubReactComponent";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
+import Cookies from 'js-cookie';
+import Sticky from 'react-sticky';  
+import Api from 'app/api';
+import CursorPoller from 'app/utils/cursorPoller';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import Stream from 'app/views/stream';
+import StreamGroup from 'app/components/stream/group';
+import StreamFilters from 'app/views/stream/filters';
+import StreamSidebar from 'app/views/stream/sidebar';
+import StreamActions from 'app/views/stream/actions';
+import stubReactComponents from '../../helpers/stubReactComponent';
 
 const findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 const findWithType = TestUtils.findRenderedComponentWithType;
@@ -20,19 +20,19 @@ const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:1>; rel="previous"; results="false"; cursor="1443575731:0:1", ' +
   '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
-describe("Stream", function() {
+describe('Stream', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(Api, "request");
+    this.stubbedApiRequest = this.sandbox.stub(Api, 'request');
     stubReactComponents(this.sandbox, [StreamGroup, StreamFilters, StreamSidebar, StreamActions, Sticky]);
 
     this.Element = (
       <Stream
         setProjectNavSection={function () {}}
         location={{query:{}}}
-        params={{orgId: "123", projectId: "456"}}/>
+        params={{orgId: '123', projectId: '456'}}/>
     );
   });
 
@@ -40,21 +40,21 @@ describe("Stream", function() {
     this.sandbox.restore();
   });
 
-  describe("fetchData()", function() {
+  describe('fetchData()', function() {
 
-    describe("complete handler", function () {
+    describe('complete handler', function () {
       beforeEach(function () {
         this.stubbedApiRequest.restore();
-        this.sandbox.stub(Api, "request", (url, options) => {
+        this.sandbox.stub(Api, 'request', (url, options) => {
           options.complete && options.complete({
             getResponseHeader: () => this.linkHeader
           });
         });
 
-        this.sandbox.stub(CursorPoller.prototype, "setEndpoint");
+        this.sandbox.stub(CursorPoller.prototype, 'setEndpoint');
       });
 
-      it("should reset the poller endpoint and sets cursor URL", function() {
+      it('should reset the poller endpoint and sets cursor URL', function() {
         this.linkHeader = DEFAULT_LINKS_HEADER;
 
         let stream = TestUtils.renderIntoDocument(this.Element);
@@ -65,7 +65,7 @@ describe("Stream", function() {
           .to.be.true;
       });
 
-      it("should not set the poller if the 'previous' link is missing", function () {
+      it('should not set the poller if the \'previous\' link is missing', function () {
         this.linkHeader =
         '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
@@ -76,12 +76,12 @@ describe("Stream", function() {
       });
     }); // complete handler
 
-    it("should cancel any previous, unfinished fetches", function () {
+    it('should cancel any previous, unfinished fetches', function () {
       this.stubbedApiRequest.restore();
 
       let requestCancel = this.sandbox.stub();
       let requestOptions;
-      this.sandbox.stub(Api, "request", function (url, options) {
+      this.sandbox.stub(Api, 'request', function (url, options) {
         requestOptions = options;
         return {
           cancel: requestCancel
@@ -106,9 +106,9 @@ describe("Stream", function() {
     });
   });
 
-  describe("render()", function() {
+  describe('render()', function() {
 
-    it("displays a loading indicator when component is loading", function() {
+    it('displays a loading indicator when component is loading', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
       stream.setState({ loading: true });
       let expected = findWithType(stream, LoadingIndicator);
@@ -116,7 +116,7 @@ describe("Stream", function() {
       expect(expected).to.be.ok;
     });
 
-    it("displays an error when component has errored", function() {
+    it('displays an error when component has errored', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
       stream.setState({
         error: true,
@@ -126,38 +126,38 @@ describe("Stream", function() {
       expect(expected).to.be.ok;
     });
 
-    it("displays the group list", function() {
+    it('displays the group list', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
       stream.setState({
         error: false,
-        groupIds: ["1"],
+        groupIds: ['1'],
         loading: false
       });
-      let expected = findWithClass(stream, "group-list");
+      let expected = findWithClass(stream, 'group-list');
       expect(expected).to.be.ok;
     });
 
-    it("displays empty with no ids", function() {
+    it('displays empty with no ids', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
       stream.setState({
         error: false,
         groupIds: [],
         loading: false
       });
-      let expected = findWithClass(stream, "empty-stream");
+      let expected = findWithClass(stream, 'empty-stream');
       expect(expected).to.be.ok;
     });
 
   });
 
-  describe("componentWillMount()", function() {
+  describe('componentWillMount()', function() {
 
     afterEach(function() {
-      Cookies.remove("realtimeActive");
+      Cookies.remove('realtimeActive');
     });
 
-    it("reads the realtimeActive state from a cookie", function(done) {
-      Cookies.set("realtimeActive", "false");
+    it('reads the realtimeActive state from a cookie', function(done) {
+      Cookies.set('realtimeActive', 'false');
 
       let stream = TestUtils.renderIntoDocument(this.Element);
       setTimeout(() => {
@@ -166,8 +166,8 @@ describe("Stream", function() {
       });
     });
 
-    it("reads the true realtimeActive state from a cookie", function(done) {
-      Cookies.set("realtimeActive", "true");
+    it('reads the true realtimeActive state from a cookie', function(done) {
+      Cookies.set('realtimeActive', 'true');
       let stream = TestUtils.renderIntoDocument(this.Element);
 
       setTimeout(() => {
@@ -178,25 +178,25 @@ describe("Stream", function() {
 
   });
 
-  describe("onRealtimeChange", function() {
+  describe('onRealtimeChange', function() {
 
-    it("sets the realtimeActive state", function() {
+    it('sets the realtimeActive state', function() {
       let stream = TestUtils.renderIntoDocument(this.Element);
       stream.state.realtimeActive = false;
       stream.onRealtimeChange(true);
       expect(stream.state.realtimeActive).to.eql(true);
-      expect(Cookies.get("realtimeActive")).to.eql("true");
+      expect(Cookies.get('realtimeActive')).to.eql('true');
 
       stream.onRealtimeChange(false);
       expect(stream.state.realtimeActive).to.eql(false);
-      expect(Cookies.get("realtimeActive")).to.eql("false");
+      expect(Cookies.get('realtimeActive')).to.eql('false');
     });
 
   });
 
-  describe("getInitialState", function() {
+  describe('getInitialState', function() {
 
-    it("sets the right defaults", function() {
+    it('sets the right defaults', function() {
       let expected = {
         groupIds: [],
         selectAllActive: false,
diff --git a/tests/js/spec/views/stream/actionLink.spec.jsx b/tests/js/spec/views/stream/actionLink.spec.jsx
index 1268dd117d..4960a0da1f 100644
--- a/tests/js/spec/views/stream/actionLink.spec.jsx
+++ b/tests/js/spec/views/stream/actionLink.spec.jsx
@@ -1,17 +1,17 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
 
-import api from "app/api";
-import stubReactComponents from "../../../helpers/stubReactComponent";
-import ActionLink from "app/views/stream/actionLink";
-import Modal from "react-bootstrap/lib/Modal";
+import api from 'app/api';
+import stubReactComponents from '../../../helpers/stubReactComponent';
+import ActionLink from 'app/views/stream/actionLink';
+import Modal from 'react-bootstrap/lib/Modal';
 
-describe("ActionLink", function() {
+describe('ActionLink', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    this.stubbedApiRequest = this.sandbox.stub(api, 'request');
     stubReactComponents(this.sandbox, [Modal]);
   });
 
@@ -19,7 +19,7 @@ describe("ActionLink", function() {
     this.sandbox.restore();
   });
 
-  describe("shouldConfirm()", function() {
+  describe('shouldConfirm()', function() {
     it('should always return true by default', function () {
       let actionLink = TestUtils.renderIntoDocument(
         <ActionLink onAction={function(){}} selectAllActive={false}/>
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 464a78ab1a..49c596301f 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -1,20 +1,20 @@
-import React from "react";
-import TestUtils from "react-addons-test-utils";
+import React from 'react';
+import TestUtils from 'react-addons-test-utils';
 
-import api from "app/api";
-import stubReactComponents from "../../../helpers/stubReactComponent";
-import StreamActions from "app/views/stream/actions";
-import ActionLink from "app/views/stream/actionLink";
-import DropdownLink from "app/components/dropdownLink";
-import MenuItem from "app/components/menuItem";
-import SelectedGroupStore from "app/stores/selectedGroupStore";
+import api from 'app/api';
+import stubReactComponents from '../../../helpers/stubReactComponent';
+import StreamActions from 'app/views/stream/actions';
+import ActionLink from 'app/views/stream/actionLink';
+import DropdownLink from 'app/components/dropdownLink';
+import MenuItem from 'app/components/menuItem';
+import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
-describe("StreamActions", function() {
+describe('StreamActions', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(api, "request");
+    this.stubbedApiRequest = this.sandbox.stub(api, 'request');
     stubReactComponents(this.sandbox, [ActionLink, DropdownLink, MenuItem]);
   });
 
@@ -22,7 +22,7 @@ describe("StreamActions", function() {
     this.sandbox.restore();
   });
 
-  describe("actionSelectedGroups()", function () {
+  describe('actionSelectedGroups()', function () {
     beforeEach(function() {
       this.actions = TestUtils.renderIntoDocument(
           <StreamActions
@@ -37,8 +37,8 @@ describe("StreamActions", function() {
           );
     });
 
-    describe("for all items", function () {
-      it("should invoke the callback with 'undefined' and deselect all", function () {
+    describe('for all items', function () {
+      it('should invoke the callback with \'undefined\' and deselect all', function () {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
         let callback = this.sandbox.stub();
 
@@ -49,8 +49,8 @@ describe("StreamActions", function() {
       });
     });
 
-    describe("for selected items", function () {
-      it("should invoke the callback with an array of selected items and deselect all", function () {
+    describe('for selected items', function () {
+      it('should invoke the callback with an array of selected items and deselect all', function () {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
         this.sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1,2,3]));
 
diff --git a/tests/js/spec/views/stream/filterSelectLink.spec.jsx b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
index 4f6a91b5e0..6531c790ae 100644
--- a/tests/js/spec/views/stream/filterSelectLink.spec.jsx
+++ b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
@@ -1,11 +1,11 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import TestUtils from "react-addons-test-utils";
-import FilterSelectLink from "app/views/stream/filterSelectLink";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import TestUtils from 'react-addons-test-utils';
+import FilterSelectLink from 'app/views/stream/filterSelectLink';
 
 let findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 
-describe("FilterSelectLink", function() {
+describe('FilterSelectLink', function() {
 
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
@@ -15,26 +15,26 @@ describe("FilterSelectLink", function() {
     this.sandbox.restore();
   });
 
-  describe("render()", function() {
+  describe('render()', function() {
 
-    it("shows a button", function(){
+    it('shows a button', function(){
       let wrapper = TestUtils.renderIntoDocument(<FilterSelectLink extraClass="test-btn" />);
-      let expected = findWithClass(wrapper, "test-btn");
+      let expected = findWithClass(wrapper, 'test-btn');
       expect(expected).to.be.ok;
     });
 
-    it("shows active state when passed isActive=true", function(){
+    it('shows active state when passed isActive=true', function(){
       let wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={true} />);
-      let expected = findWithClass(wrapper, "active");
+      let expected = findWithClass(wrapper, 'active');
       expect(expected).to.be.ok;
     });
 
-    it("doesn't show active state when passed isActive=false", function(){
+    it('doesn\'t show active state when passed isActive=false', function(){
       let wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={false} />);
-      expect(() => findWithClass(wrapper, "active")).to.throw();
+      expect(() => findWithClass(wrapper, 'active')).to.throw();
     });
 
-    it("calls onSelect() when anchor clicked", function(){
+    it('calls onSelect() when anchor clicked', function(){
       let onSelect = this.sandbox.spy();
       let wrapper = TestUtils.renderIntoDocument(<FilterSelectLink onSelect={onSelect} />);
 
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 75bfbb9021..5ebf18aeb7 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,24 +1,24 @@
-import React from "react";
-import ReactDOM from "react-dom";
-import TestUtils from "react-addons-test-utils";
-import api from "app/api";
-import SearchBar from "app/views/stream/searchBar";
-import SearchDropdown from "app/views/stream/searchDropdown";
-import StreamTagStore from "app/stores/streamTagStore";
-import stubReactComponents from "../../../helpers/stubReactComponent";
+import React from 'react';
+import ReactDOM from 'react-dom';
+import TestUtils from 'react-addons-test-utils';
+import api from 'app/api';
+import SearchBar from 'app/views/stream/searchBar';
+import SearchDropdown from 'app/views/stream/searchDropdown';
+import StreamTagStore from 'app/stores/streamTagStore';
+import stubReactComponents from '../../../helpers/stubReactComponent';
 
-import stubContext from "../../../helpers/stubContext";
+import stubContext from '../../../helpers/stubContext';
 
 let findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 
-describe("SearchBar", function() {
+describe('SearchBar', function() {
 
   beforeEach(function() {
     StreamTagStore.reset();
 
     this.sandbox = sinon.sandbox.create();
 
-    this.sandbox.stub(api, "request");
+    this.sandbox.stub(api, 'request');
 
     stubReactComponents(this.sandbox, [SearchDropdown]);
     this.ContextStubbedSearchBar = stubContext(SearchBar);
@@ -28,54 +28,54 @@ describe("SearchBar", function() {
     this.sandbox.restore();
   });
 
-  describe("getQueryTerms()", function () {
-    it ("should extract query terms from a query string", function () {
-      let query = "tagname: ";
-      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["tagname:"]);
+  describe('getQueryTerms()', function () {
+    it ('should extract query terms from a query string', function () {
+      let query = 'tagname: ';
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['tagname:']);
 
-      query = "tagname:derp browser:";
-      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["tagname:derp", "browser:"]);
+      query = 'tagname:derp browser:';
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['tagname:derp', 'browser:']);
 
-      query = "   browser:\"Chrome 33.0\"    ";
-      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(["browser:\"Chrome 33.0\""]);
+      query = '   browser:"Chrome 33.0"    ';
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['browser:"Chrome 33.0"']);
     });
   });
 
-  describe("getLastTermIndex()", function () {
-    it("should provide the index of the last query term, given cursor index", function () {
-      let query = "tagname:";
+  describe('getLastTermIndex()', function () {
+    it('should provide the index of the last query term, given cursor index', function () {
+      let query = 'tagname:';
       expect(SearchBar.getLastTermIndex(query, 0)).to.eql(8);
 
-      query = "tagname:foo"; // 'f' (index 9)
+      query = 'tagname:foo'; // 'f' (index 9)
       expect(SearchBar.getLastTermIndex(query, 9)).to.eql(11);
 
-      query = "tagname:foo anothertag:bar"; // 'f' (index 9)
+      query = 'tagname:foo anothertag:bar'; // 'f' (index 9)
       expect(SearchBar.getLastTermIndex(query, 9)).to.eql(11);
     });
   });
 
-  describe("clearSearch()", function() {
+  describe('clearSearch()', function() {
 
-    it("clears the query", function() {
+    it('clears the query', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "is:unresolved ruby",
-        defaultQuery: "is:unresolved"
+        orgId: '123',
+        projectId: '456',
+        query: 'is:unresolved ruby',
+        defaultQuery: 'is:unresolved'
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
 
       wrapper.clearSearch();
 
-      expect(wrapper.state.query).to.equal("is:unresolved");
+      expect(wrapper.state.query).to.equal('is:unresolved');
     });
 
-    it("calls onSearch()", function(done) {
+    it('calls onSearch()', function(done) {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "is:unresolved ruby",
-        defaultQuery: "is:unresolved",
+        orgId: '123',
+        projectId: '456',
+        query: 'is:unresolved ruby',
+        defaultQuery: 'is:unresolved',
         onSearch: this.sandbox.spy()
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
@@ -83,16 +83,16 @@ describe("SearchBar", function() {
       wrapper.clearSearch();
 
       setTimeout(() => {
-        expect(props.onSearch.calledWith("is:unresolved")).to.be.true;
+        expect(props.onSearch.calledWith('is:unresolved')).to.be.true;
         done();
       });
     });
 
   });
 
-  describe("onQueryFocus()", function() {
+  describe('onQueryFocus()', function() {
 
-    it("displays the drop down", function() {
+    it('displays the drop down', function() {
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>).refs.wrapped;
       expect(wrapper.state.dropdownVisible).to.be.false;
 
@@ -103,9 +103,9 @@ describe("SearchBar", function() {
 
   });
 
-  describe("onQueryBlur()", function() {
+  describe('onQueryBlur()', function() {
 
-    it("hides the drop down", function() {
+    it('hides the drop down', function() {
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>).refs.wrapped;
       wrapper.state.dropdownVisible = true;
 
@@ -118,9 +118,9 @@ describe("SearchBar", function() {
 
   });
 
-  describe("onKeyUp()", function () {
-    describe("escape", function () {
-      it("blurs the input", function () {
+  describe('onKeyUp()', function () {
+    describe('escape', function () {
+      it('blurs the input', function () {
         // needs to be rendered into document.body or cannot query document.activeElement
         let wrapper = ReactDOM.render(<this.ContextStubbedSearchBar orgId="123" projectId="456"/>, document.body).refs.wrapped;
         wrapper.state.dropdownVisible = true;
@@ -131,16 +131,16 @@ describe("SearchBar", function() {
 
         expect(document.activeElement).to.eql(input);
 
-        TestUtils.Simulate.keyUp(input, {key: "Escape", keyCode: "27"});
+        TestUtils.Simulate.keyUp(input, {key: 'Escape', keyCode: '27'});
 
         expect(document.activeElement).to.not.eql(input);
       });
     });
   });
 
-  describe("render()", function() {
+  describe('render()', function() {
 
-    it("invokes onSearch() when submitting the form", function() {
+    it('invokes onSearch() when submitting the form', function() {
       let stubbedOnSearch = this.sandbox.spy();
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456"/>).refs.wrapped;
 
@@ -149,43 +149,43 @@ describe("SearchBar", function() {
       expect(stubbedOnSearch.called).to.be.true;
     });
 
-    it("invokes onSearch() when search is cleared", function(done) {
+    it('invokes onSearch() when search is cleared', function(done) {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "is:unresolved",
+        orgId: '123',
+        projectId: '456',
+        query: 'is:unresolved',
         onSearch: this.sandbox.spy()
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
 
-      let cancelButton = findWithClass(wrapper, "search-clear-form");
+      let cancelButton = findWithClass(wrapper, 'search-clear-form');
       TestUtils.Simulate.click(cancelButton);
 
       setTimeout(function () {
-        expect(props.onSearch.calledWith("")).to.be.true;
+        expect(props.onSearch.calledWith('')).to.be.true;
         done();
       });
     });
 
-    it("handles an empty query", function () {
+    it('handles an empty query', function () {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "",
-        defaultQuery: "is:unresolved"
+        orgId: '123',
+        projectId: '456',
+        query: '',
+        defaultQuery: 'is:unresolved'
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
-      expect(wrapper.state.query).to.eql("");
+      expect(wrapper.state.query).to.eql('');
     });
 
   });
 
-  describe("updateAutoCompleteItems()", function() {
-    it("sets state when empty", function() {
+  describe('updateAutoCompleteItems()', function() {
+    it('sets state when empty', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "",
+        orgId: '123',
+        projectId: '456',
+        query: '',
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
@@ -194,11 +194,11 @@ describe("SearchBar", function() {
       expect(wrapper.state.activeSearchItem).to.eql(0);
     });
 
-    it("sets state when incomplete tag", function() {
+    it('sets state when incomplete tag', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "fu",
+        orgId: '123',
+        projectId: '456',
+        query: 'fu',
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
@@ -207,11 +207,11 @@ describe("SearchBar", function() {
       expect(wrapper.state.activeSearchItem).to.eql(0);
     });
 
-    it("sets state with complete tag", function() {
+    it('sets state with complete tag', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "url:\"fu\"",
+        orgId: '123',
+        projectId: '456',
+        query: 'url:"fu"',
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
@@ -220,11 +220,11 @@ describe("SearchBar", function() {
       expect(wrapper.state.activeSearchItem).to.eql(0);
     });
 
-    it("sets state when incomplete tag as second input", function() {
+    it('sets state when incomplete tag as second input', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "is:unresolved fu",
+        orgId: '123',
+        projectId: '456',
+        query: 'is:unresolved fu',
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
@@ -235,11 +235,11 @@ describe("SearchBar", function() {
       expect(wrapper.state.activeSearchItem).to.eql(0);
     });
 
-    it("sets state when value has colon", function() {
+    it('sets state when value has colon', function() {
       let props = {
-        orgId: "123",
-        projectId: "456",
-        query: "url:\"http://example.com\"",
+        orgId: '123',
+        projectId: '456',
+        query: 'url:"http://example.com"',
       };
       let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
