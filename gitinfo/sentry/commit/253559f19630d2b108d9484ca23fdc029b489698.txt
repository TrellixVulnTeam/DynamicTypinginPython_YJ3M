commit 253559f19630d2b108d9484ca23fdc029b489698
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Nov 13 12:25:51 2019 -0800

    chore(ts): convert sentry app component files (#15575)

diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx b/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx
deleted file mode 100644
index a4a06e266e..0000000000
--- a/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.jsx
+++ /dev/null
@@ -1,10 +0,0 @@
-import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
-
-export function fetchSentryAppComponents(api, orgSlug, projectId) {
-  const componentsUri = `/organizations/${orgSlug}/sentry-app-components/?projectId=${projectId}`;
-
-  return api.requestPromise(componentsUri).then(res => {
-    SentryAppComponentsActions.loadComponents(res);
-    return res;
-  });
-}
diff --git a/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.tsx b/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.tsx
new file mode 100644
index 0000000000..20676d6264
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/sentryAppComponents.tsx
@@ -0,0 +1,15 @@
+import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
+import {Client} from 'app/api';
+import {SentryAppComponent} from 'app/types';
+
+export async function fetchSentryAppComponents(
+  api: Client,
+  orgSlug: string,
+  projectId: string
+): Promise<SentryAppComponent[]> {
+  const componentsUri = `/organizations/${orgSlug}/sentry-app-components/?projectId=${projectId}`;
+
+  const res = await api.requestPromise(componentsUri);
+  SentryAppComponentsActions.loadComponents(res);
+  return res;
+}
diff --git a/src/sentry/static/sentry/app/actions/sentryAppComponentActions.jsx b/src/sentry/static/sentry/app/actions/sentryAppComponentActions.tsx
similarity index 100%
rename from src/sentry/static/sentry/app/actions/sentryAppComponentActions.jsx
rename to src/sentry/static/sentry/app/actions/sentryAppComponentActions.tsx
diff --git a/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx b/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx
deleted file mode 100644
index 882a4e6326..0000000000
--- a/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.jsx
+++ /dev/null
@@ -1,35 +0,0 @@
-import Reflux from 'reflux';
-import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
-
-const SentryAppComponentsStore = Reflux.createStore({
-  init() {
-    this.items = [];
-    this.listenTo(SentryAppComponentsActions.loadComponents, this.onLoadComponents);
-  },
-
-  getInitialState() {
-    return this.items;
-  },
-
-  onLoadComponents(items) {
-    this.items = items;
-    this.trigger(items);
-  },
-
-  get(uuid) {
-    return this.items.find(item => item.uuid === uuid);
-  },
-
-  getAll() {
-    return this.items;
-  },
-
-  getComponentByType(type) {
-    if (!type) {
-      return this.getAll();
-    }
-    return this.items.filter(item => item.type === type);
-  },
-});
-
-export default SentryAppComponentsStore;
diff --git a/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.tsx b/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.tsx
new file mode 100644
index 0000000000..ae85fb59e0
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/sentryAppComponentsStore.tsx
@@ -0,0 +1,46 @@
+import Reflux from 'reflux';
+import SentryAppComponentsActions from 'app/actions/sentryAppComponentActions';
+import {SentryAppComponent} from 'app/types';
+
+const SentryAppComponentsStore = Reflux.createStore({
+  init() {
+    this.items = [];
+    this.listenTo(SentryAppComponentsActions.loadComponents, this.onLoadComponents);
+  },
+
+  getInitialState() {
+    return this.items;
+  },
+
+  onLoadComponents(items: SentryAppComponent[]) {
+    this.items = items;
+    this.trigger(items);
+  },
+
+  get(uuid: string) {
+    const items: SentryAppComponent[] = this.items;
+    return items.find(item => item.uuid === uuid);
+  },
+
+  getAll() {
+    return this.items;
+  },
+
+  getComponentByType(type: string | undefined) {
+    if (!type) {
+      return this.getAll();
+    }
+    const items: SentryAppComponent[] = this.items;
+    return items.filter(item => item.type === type);
+  },
+});
+
+type SentryAppComponentsStoreType = Reflux.Store & {
+  onLoadComponents: (items: SentryAppComponent[]) => void;
+  getComponentByType: (type: string | undefined) => SentryAppComponent[];
+  getAll: () => SentryAppComponent[];
+  getInitialState: () => SentryAppComponent[];
+  get: () => SentryAppComponent | undefined;
+};
+
+export default SentryAppComponentsStore as SentryAppComponentsStoreType;
