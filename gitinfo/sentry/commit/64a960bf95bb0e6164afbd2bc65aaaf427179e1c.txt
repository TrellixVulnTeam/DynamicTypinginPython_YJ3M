commit 64a960bf95bb0e6164afbd2bc65aaaf427179e1c
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Apr 4 17:01:00 2018 -0700

    fix(slack): Remove flaky app.permissions.info
    
    These checks aren't actually required since Slack has confirmed that
    using {ims,groups,channels}.list will correctly return only channels the
    app has access to.

diff --git a/src/sentry/integrations/slack/notify_action.py b/src/sentry/integrations/slack/notify_action.py
index 8af6b4078c..85ec481ac8 100644
--- a/src/sentry/integrations/slack/notify_action.py
+++ b/src/sentry/integrations/slack/notify_action.py
@@ -176,17 +176,6 @@ class SlackNotifyServiceAction(EventAction):
             'token': integration.metadata['access_token'],
         }
 
-        # Get slack app resource permissions
-        resp = session.get('https://slack.com/api/apps.permissions.info', params=token_payload)
-        resp = resp.json()
-        if not resp.get('ok'):
-            extra = {'error': resp.get('error')}
-            self.logger.info('rule.slack.permission_check_failed', extra=extra)
-            return None
-
-        channel_perms = resp['info']['channel']['resources']
-        dm_perms = resp['info']['im']['resources']
-
         # Look for channel ID
         channels_payload = dict(token_payload, **{
             'exclude_archived': False,
@@ -201,27 +190,22 @@ class SlackNotifyServiceAction(EventAction):
 
         channel_id = {c['name']: c['id'] for c in resp['channels']}.get(name)
 
-        # Channel may be private, use the groups.list endpoint to find them
-        if not channel_id:
-            resp = session.get('https://slack.com/api/groups.list', params=channels_payload)
-            resp = resp.json()
-            if not resp.get('ok'):
-                self.logger.info('rule.slack.group_list_failed', extra={'error': resp.get('error')})
-                return None
-
-            channel_id = {c['name']: c['id'] for c in resp['groups']}.get(name)
-
-        # We should sufficiently have been able to find the channel by now
         if channel_id:
-            if channel_id in channel_perms['excluded_ids']:
-                return None
+            return (CHANNEL_PREFIX, channel_id)
 
-            if not channel_perms['wildcard'] and channel_id not in channel_perms['ids']:
-                return None
+        # Channel may be private
+        resp = session.get('https://slack.com/api/groups.list', params=channels_payload)
+        resp = resp.json()
+        if not resp.get('ok'):
+            self.logger.info('rule.slack.group_list_failed', extra={'error': resp.get('error')})
+            return None
 
-            return (CHANNEL_PREFIX, channel_id)
+        group_id = {c['name']: c['id'] for c in resp['groups']}.get(name)
+
+        if group_id:
+            return (CHANNEL_PREFIX, group_id)
 
-        # Look for user ID
+        # Channel may actually be a user
         resp = session.get('https://slack.com/api/users.list', params=token_payload)
         resp = resp.json()
         if not resp.get('ok'):
@@ -230,7 +214,7 @@ class SlackNotifyServiceAction(EventAction):
 
         member_id = {c['name']: c['id'] for c in resp['members']}.get(name)
 
-        if member_id and member_id in dm_perms['ids']:
+        if member_id:
             return (MEMBER_PREFIX, member_id)
 
         return None
diff --git a/tests/sentry/integrations/slack/test_notify_action.py b/tests/sentry/integrations/slack/test_notify_action.py
index 73b724e70c..02e4f05cf5 100644
--- a/tests/sentry/integrations/slack/test_notify_action.py
+++ b/tests/sentry/integrations/slack/test_notify_action.py
@@ -16,32 +16,6 @@ class SlackNotifyActionTest(RuleTestCase):
     def setUp(self):
         event = self.get_event()
 
-        self.permissions = {
-            'ok': True,
-            'info': {
-                'channel': {
-                    'resources': {
-                        'wildcard': True,
-                        'excluded_ids': [],
-                        'ids': [],
-                    },
-                },
-                'im': {
-                    'resources': {
-                        'ids': ['member-id', 'morty-id'],
-                    },
-                },
-            },
-        }
-
-        responses.add(
-            method=responses.GET,
-            url='https://slack.com/api/apps.permissions.info',
-            status=200,
-            content_type='application/json',
-            body=json.dumps(self.permissions),
-        )
-
         self.integration = Integration.objects.create(
             provider='slack',
             name='Awesome Team',
