commit e1d9c3369275ae46112416cfef4766248292609c
Author: Jan Michael Auer <account@jauer.org>
Date:   Thu Dec 6 10:26:21 2018 +0100

    ref(eventerror): Stop interpolating event error messages (#10823)
    
    Remove interpolation of values into event errors. To make errors understandable when not expanded, the `name` attribute is special cased in rendering and prepended to the error message, if available (and set).

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 1cef758f1d..5487a11401 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -156,15 +156,10 @@ class EventSerializer(Serializer):
         return results
 
     def serialize(self, obj, attrs, user):
-        errors = []
-        for error in obj.data.get('errors', []):
-            message = EventError.get_message(error)
-            error_result = {
-                'type': error['type'],
-                'message': message,
-                'data': {k: v for k, v in six.iteritems(error) if k != 'type'},
-            }
-            errors.append(error_result)
+        errors = [
+            EventError(error).get_api_context() for error
+            in get_path(obj.data, 'errors', filter=True, default=())
+        ]
 
         (message, message_meta) = self._get_legacy_message_with_meta(obj)
         (tags, tags_meta) = self._get_tags_with_meta(obj)
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index ed79b1304f..de900fd809 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -1,51 +1,44 @@
 from __future__ import absolute_import
 
 import six
-from string import Formatter
-
-
-class dontexplodedict(object):
-    """
-    A dictionary that won't throw a KeyError and will
-    return back a sensible default value to be used in
-    string formatting.
-    """
-
-    def __init__(self, d=None):
-        self.data = d or {}
-
-    def __getitem__(self, key):
-        return self.data.get(key, '')
 
 
 class EventError(object):
+    # Generic
+    UNKNOWN_ERROR = 'unknown_error'
+
+    # Schema validation
     INVALID_DATA = 'invalid_data'
     INVALID_ATTRIBUTE = 'invalid_attribute'
     MISSING_ATTRIBUTE = 'missing_attribute'
     VALUE_TOO_LONG = 'value_too_long'
-    UNKNOWN_ERROR = 'unknown_error'
-    SECURITY_VIOLATION = 'security_violation'
-    RESTRICTED_IP = 'restricted_ip'
     FUTURE_TIMESTAMP = 'future_timestamp'
     PAST_TIMESTAMP = 'past_timestamp'
     INVALID_ENVIRONMENT = 'invalid_environment'
 
-    JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'  # deprecated in favor of FETCH_GENERIC_ERROR
+    # Processing: Http
+    SECURITY_VIOLATION = 'security_violation'
+    RESTRICTED_IP = 'restricted_ip'
     FETCH_GENERIC_ERROR = 'fetch_generic_error'
-    JS_INVALID_HTTP_CODE = 'js_invalid_http_code'  # deprecated in favor of FETCH_INVALID_HTTP_CODE
     FETCH_INVALID_HTTP_CODE = 'fetch_invalid_http_code'
+    FETCH_INVALID_ENCODING = 'fetch_invalid_source_encoding'
+    FETCH_TOO_LARGE = 'fetch_too_large'
+    FETCH_TIMEOUT = 'fetch_timeout'
+
+    # Processing: JavaScript
+    JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'  # deprecated in favor of FETCH_GENERIC_ERROR
+    JS_INVALID_HTTP_CODE = 'js_invalid_http_code'  # deprecated in favor of FETCH_INVALID_HTTP_CODE
     JS_INVALID_CONTENT = 'js_invalid_content'
     JS_NO_COLUMN = 'js_no_column'
     JS_MISSING_SOURCE = 'js_no_source'
     JS_INVALID_SOURCEMAP = 'js_invalid_source'
     JS_TOO_MANY_REMOTE_SOURCES = 'js_too_many_sources'
     JS_INVALID_SOURCE_ENCODING = 'js_invalid_source_encoding'
-    FETCH_INVALID_ENCODING = 'fetch_invalid_source_encoding'
     JS_INVALID_SOURCEMAP_LOCATION = 'js_invalid_sourcemap_location'
     JS_TOO_LARGE = 'js_too_large'  # deprecated in favor of FETCH_TOO_LARGE
-    FETCH_TOO_LARGE = 'fetch_too_large'
     JS_FETCH_TIMEOUT = 'js_fetch_timeout'  # deprecated in favor of FETCH_TIMEOUT
-    FETCH_TIMEOUT = 'fetch_timeout'
+
+    # Processing: Native
     NATIVE_NO_CRASHED_THREAD = 'native_no_crashed_thread'
     NATIVE_INTERNAL_FAILURE = 'native_internal_failure'
     NATIVE_BAD_DSYM = 'native_bad_dsym'
@@ -55,42 +48,44 @@ class EventError(object):
     NATIVE_MISSING_SYMBOL = 'native_missing_symbol'
     NATIVE_SIMULATOR_FRAME = 'native_simulator_frame'
     NATIVE_UNKNOWN_IMAGE = 'native_unknown_image'
+
+    # Processing: Proguard
     PROGUARD_MISSING_MAPPING = 'proguard_missing_mapping'
     PROGUARD_MISSING_LINENO = 'proguard_missing_lineno'
 
     _messages = {
-        INVALID_DATA: u'Discarded invalid value for parameter \'{name}\'',
-        INVALID_ATTRIBUTE: u'Discarded invalid parameter \'{name}\'',
-        MISSING_ATTRIBUTE: u'Missing value for required parameter \'{name}\'',
-        VALUE_TOO_LONG: u'Discarded value for \'{name}\' due to exceeding maximum length',
         UNKNOWN_ERROR: u'Unknown error',
-        SECURITY_VIOLATION: u'Cannot fetch resource due to security violation on {url}',
-        RESTRICTED_IP: u'Cannot fetch resource due to restricted IP address on {url}',
+
+        INVALID_DATA: u'Discarded invalid value',
+        INVALID_ATTRIBUTE: u'Discarded unknown attribute',
+        MISSING_ATTRIBUTE: u'Missing value for required attribute',
+        VALUE_TOO_LONG: u'Discarded value due to exceeding maximum length',
         FUTURE_TIMESTAMP: u'Invalid timestamp (in future)',
         PAST_TIMESTAMP: u'Invalid timestamp (too old)',
-        INVALID_ENVIRONMENT: u'Environment cannot contain / or newlines.',
-        # deprecated in favor of FETCH_GENERIC_ERROR
-        JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource: {url}',
-        FETCH_GENERIC_ERROR: u'Unable to fetch resource: {url}',
-        JS_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
-        # deprecated in favor of FETCH_INVALID_HTTP_CODE
-        FETCH_INVALID_HTTP_CODE: u'HTTP returned {value} response on {url}',
-        JS_INVALID_CONTENT: u'Source file was not JavaScript: {url}',
-        JS_NO_COLUMN: u'Cannot expand sourcemap due to no column information for {url}',
-        JS_MISSING_SOURCE: u'Source code was not found for {url}',
-        JS_INVALID_SOURCEMAP: u'Sourcemap was invalid or not parseable: {url}',
+        INVALID_ENVIRONMENT: u'Environment cannot contain "/" or newlines',
+
+        SECURITY_VIOLATION: u'Cannot fetch resource due to security violation',
+        RESTRICTED_IP: u'Cannot fetch resource due to restricted IP address',
+        FETCH_GENERIC_ERROR: u'Unable to fetch HTTP resource',
+        FETCH_INVALID_HTTP_CODE: u'HTTP returned error response',
+        FETCH_INVALID_ENCODING: u'Source file was not encoded properly',
+        FETCH_TOO_LARGE: u'Remote file too large',
+        FETCH_TIMEOUT: u'Remote file took too long to load',
+
+        JS_GENERIC_FETCH_ERROR: u'Unable to fetch resource',
+        JS_INVALID_HTTP_CODE: u'HTTP returned error response',
+        JS_INVALID_CONTENT: u'Source file was not JavaScript',
+        JS_NO_COLUMN: u'Cannot expand sourcemap due to missing column information',
+        JS_MISSING_SOURCE: u'Source code was not found',
+        JS_INVALID_SOURCEMAP: u'Sourcemap was invalid or not parseable',
         JS_TOO_MANY_REMOTE_SOURCES: u'The maximum number of remote source requests was made',
-        JS_INVALID_SOURCE_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
-        FETCH_INVALID_ENCODING: u'Source file was not \'{value}\' encoding: {url}',
-        JS_INVALID_SOURCEMAP_LOCATION: u'Invalid location in sourcemap: ({column}, {row})',
-        # deprecated in favor of FETCH_TOO_LARGE
-        JS_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',
-        FETCH_TOO_LARGE: u'Remote file too large: ({max_size:g}MB, {url})',
-        # deprecated in favor of FETCH_TIMEOUT
-        JS_FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',
-        FETCH_TIMEOUT: u'Remote file took too long to load: ({timeout}s, {url})',
+        JS_INVALID_SOURCE_ENCODING: u'Source file was not encoded properly',
+        JS_INVALID_SOURCEMAP_LOCATION: u'Invalid location in sourcemap',
+        JS_TOO_LARGE: u'Remote file too large',
+        JS_FETCH_TIMEOUT: u'Remote file took too long to load',
+
         NATIVE_NO_CRASHED_THREAD: u'No crashed thread found in crash report',
-        NATIVE_INTERNAL_FAILURE: u'Internal failure when attempting to symbolicate: {error}',
+        NATIVE_INTERNAL_FAILURE: u'Internal failure when attempting to symbolicate',
         NATIVE_BAD_DSYM: u'The debug information file used was broken.',
         NATIVE_MISSING_OPTIONALLY_BUNDLED_DSYM: u'An optional debug information file was missing.',
         NATIVE_MISSING_DSYM: u'A required debug information file was missing.',
@@ -98,17 +93,33 @@ class EventError(object):
         NATIVE_MISSING_SYMBOL: u'Could not resolve one or more frames in debug information file.',
         NATIVE_SIMULATOR_FRAME: u'Encountered an unprocessable simulator frame.',
         NATIVE_UNKNOWN_IMAGE: u'A binary image is referenced that is unknown.',
+
         PROGUARD_MISSING_MAPPING: u'A proguard mapping file was missing.',
         PROGUARD_MISSING_LINENO: u'A proguard mapping file does not contain line info.',
     }
 
     @classmethod
     def get_message(cls, data):
-        return Formatter().vformat(
-            cls._messages[data['type']],
-            [],
-            dontexplodedict(data),
-        )
-
-    def to_dict(self):
-        return {k: v for k, v in six.iteritems(self) if k != 'type'}
+        return cls(data).message
+
+    def __init__(self, data):
+        self._data = data
+
+    @property
+    def type(self):
+        return self._data['type']
+
+    @property
+    def data(self):
+        return {k: v for k, v in six.iteritems(self._data) if k != 'type'}
+
+    @property
+    def message(self):
+        return self._messages.get(self._data['type'], self._messages['unknown_error'])
+
+    def get_api_context(self):
+        return {
+            'type': self.type,
+            'message': self.message,
+            'data': self.data,
+        }
diff --git a/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py b/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
index a6b243c826..95f74056ca 100644
--- a/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
+++ b/src/sentry/plugins/sentry_mail/activity/new_processing_issues.py
@@ -19,7 +19,7 @@ def summarize_issues(issues):
                 extra_info = '%s (%s)' % (extra_info, issue['data']['image_arch'], )
 
         rv.append({
-            'message': EventError.get_message(msg_d),
+            'message': EventError(msg_d).message,
             'extra_info': extra_info,
         })
     return rv
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index bd1d644074..3ab62dd33e 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -1,8 +1,8 @@
 import _ from 'lodash';
-import PropTypes from 'prop-types';
 import React from 'react';
 import KeyValueList from 'app/components/events/interfaces/keyValueList';
 import {t} from 'app/locale';
+import {EventError} from 'app/sentryTypes';
 
 const keyMapping = {
   image_uuid: 'Debug ID',
@@ -12,7 +12,7 @@ const keyMapping = {
 
 class EventErrorItem extends React.Component {
   static propTypes = {
-    error: PropTypes.object.isRequired,
+    error: EventError.isRequired,
   };
 
   constructor(...args) {
@@ -33,6 +33,11 @@ class EventErrorItem extends React.Component {
   cleanedData() {
     let data = {...this.props.error.data};
 
+    // The name is rendered as path in front of the message
+    if (typeof data.name === 'string') {
+      delete data.name;
+    }
+
     if (data.message === 'None') {
       // Python ensures a message string, but "None" doesn't make sense here
       delete data.message;
@@ -49,12 +54,28 @@ class EventErrorItem extends React.Component {
     return _.mapKeys(data, (value, key) => t(keyMapping[key] || _.startCase(key)));
   }
 
+  renderPath() {
+    let data = this.props.error.data || {};
+
+    if (!data.name || typeof data.name !== 'string') {
+      return null;
+    }
+
+    return (
+      <React.Fragment>
+        <b>{data.name}</b>
+        {': '}
+      </React.Fragment>
+    );
+  }
+
   render() {
     let error = this.props.error;
     let isOpen = this.state.isOpen;
     let data = this.cleanedData();
     return (
       <li>
+        {this.renderPath()}
         {error.message}
         {!_.isEmpty(data) && (
           <small>
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index b078204860..9e240ad9de 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -52,7 +52,7 @@ class EventErrors extends React.Component {
       >
         <span className="icon icon-alert" />
         <p>
-          <a className="pull-right" onClick={this.toggle}>
+          <a className="pull-right errors-toggle" onClick={this.toggle}>
             {isOpen ? t('Hide') : t('Show')}
           </a>
           {tn(
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 1e4539fd5b..66c10ebae1 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -174,6 +174,12 @@ export const Event = PropTypes.shape({
   user: PropTypes.object,
 });
 
+export const EventError = PropTypes.shape({
+  type: PropTypes.string.isRequired,
+  message: PropTypes.string.isRequired,
+  data: PropTypes.object,
+});
+
 export const Tag = PropTypes.shape({
   id: PropTypes.string.isRequired,
   key: PropTypes.string.isRequired,
diff --git a/tests/acceptance/test_issue_details.py b/tests/acceptance/test_issue_details.py
index 439ce19441..92f91574fb 100644
--- a/tests/acceptance/test_issue_details.py
+++ b/tests/acceptance/test_issue_details.py
@@ -158,6 +158,8 @@ class IssueDetailsTest(AcceptanceTestCase):
             u'/{}/{}/issues/{}/'.format(self.org.slug, self.project.slug, event.group.id)
         )
         self.wait_until_loaded()
+        self.browser.click('.errors-toggle')
+        self.browser.wait_until('.entries > .errors ul')
         self.browser.snapshot('issue details invalid interfaces')
 
     def test_activity_page(self):
diff --git a/tests/sentry/api/serializers/test_event.py b/tests/sentry/api/serializers/test_event.py
index 877e0e638e..e52d02e3fa 100644
--- a/tests/sentry/api/serializers/test_event.py
+++ b/tests/sentry/api/serializers/test_event.py
@@ -32,7 +32,6 @@ class EventSerializerTest(TestCase):
         assert len(result['errors']) == 1
         assert 'data' in result['errors'][0]
         assert result['errors'][0]['type'] == EventError.INVALID_DATA
-        assert u'ü' in result['errors'][0]['message']
         assert result['errors'][0]['data'] == {'name': u'ü'}
 
     def test_renamed_attributes(self):
diff --git a/tests/sentry/models/test_eventerror.py b/tests/sentry/models/test_eventerror.py
index d51f417188..432631be0d 100644
--- a/tests/sentry/models/test_eventerror.py
+++ b/tests/sentry/models/test_eventerror.py
@@ -6,21 +6,50 @@ from sentry.models import EventError
 
 
 @pytest.mark.parametrize(
-    'data,message', (
-        ({
-            'type': 'unknown_error'
-        }, u'Unknown error'), ({
-            'type': 'unknown_error',
-            'foo': 'bar'
-        }, u'Unknown error'),
-        ({
-            'type': 'invalid_data',
-            'name': 'foo'
-        }, u"Discarded invalid value for parameter 'foo'"),
-        ({
-            'type': 'invalid_data'
-        }, u"Discarded invalid value for parameter ''"),
+    'error,type,message,data', (
+        (
+            {'type': 'unknown_error'},
+            'unknown_error',
+            'Unknown error',
+            {},
+        ),
+        (
+            {'type': 'unknown_error', 'foo': 'bar'},
+            'unknown_error',
+            'Unknown error',
+            {'foo': 'bar'},
+        ),
+        (
+            {'type': 'invalid_data', 'name': 'foo'},
+            'invalid_data',
+            'Discarded invalid value',
+            {'name': 'foo'}
+        ),
+        (
+            {'type': 'invalid_data'},
+            'invalid_data',
+            'Discarded invalid value',
+            {}
+        ),
+        (
+            {'type': 'INVALID_ERROR_TYPE'},
+            'INVALID_ERROR_TYPE',
+            'Unknown error',
+            {},
+        ),
     )
 )
-def test_get_message(data, message):
-    assert EventError.get_message(data) == message
+def test_event_error(error, type, message, data):
+    assert EventError.get_message(error) == message
+    assert EventError(error).type == type
+    assert EventError(error).message == message
+    assert EventError(error).data == data
+
+
+def test_api_context():
+    error = {'type': 'unknown_error', 'foo': 'bar'}
+    assert EventError(error).get_api_context() == {
+        'type': 'unknown_error',
+        'message': 'Unknown error',
+        'data': {'foo': 'bar'}
+    }
