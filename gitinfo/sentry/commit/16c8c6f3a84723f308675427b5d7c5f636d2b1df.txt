commit 16c8c6f3a84723f308675427b5d7c5f636d2b1df
Author: Max Bittker <maxbittker@gmail.com>
Date:   Thu Oct 27 13:32:28 2016 -0400

    replace generic server error message in search (#4276)
    
    * replace generic server error message in search
    
    Invalid Query exceptions now get propagated to the user, and are raised by problems in the query parsing code. Currently, the cases covered are:
    "is:" with an unknown status code
    "ip" with a non-ip string
    "age" with a non-parsing string
    any recognized tag with no property (ex: "user: ")
    
    /cc @getsentry/team
    
    * catch in parse
    
    * granular parse errors
    
    * message tweaks
    
    * remove escape characters and fix spelling

diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 51f1c78a9c..3103201f0b 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -23,6 +23,7 @@ from sentry.models import (
 )
 from sentry.models.group import looks_like_short_id
 from sentry.search.utils import parse_query
+from sentry.search.utils import InvalidQuery
 from sentry.tasks.deletion import delete_group
 from sentry.tasks.merge import merge_group
 from sentry.utils.cursors import Cursor
@@ -143,7 +144,10 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         query = request.GET.get('query', 'is:unresolved').strip()
         if query:
-            query_kwargs.update(parse_query(project, query, request.user))
+            try:
+                query_kwargs.update(parse_query(project, query, request.user))
+            except InvalidQuery as e:
+                raise ValidationError(u'Your search query could not be parsed: {}'.format(e.message))
 
         return query_kwargs
 
diff --git a/src/sentry/search/utils.py b/src/sentry/search/utils.py
index f40755d59e..653e2b318b 100644
--- a/src/sentry/search/utils.py
+++ b/src/sentry/search/utils.py
@@ -10,6 +10,7 @@ from sentry.constants import STATUS_CHOICES
 from sentry.models import EventUser, Release, User
 from sentry.search.base import ANY, EMPTY
 from sentry.utils.auth import find_users
+from django.db import DataError
 
 
 class InvalidQuery(Exception):
@@ -39,14 +40,15 @@ def get_user_tag(project, key, value):
         )[0]
     except (KeyError, IndexError):
         return u'{}:{}'.format(key, value)
-
+    except DataError:
+        raise InvalidQuery(u"malformed '{}:' query '{}'.".format(key, value))
     return euser.tag_value
 
 
 def parse_datetime_range(value):
     try:
         flag, count, interval = value[0], int(value[1:-1]), value[-1]
-    except (ValueError, TypeError):
+    except (ValueError, TypeError, IndexError):
         raise InvalidQuery(u'{} is not a valid datetime query'.format(value))
 
     if flag not in ('+', '-'):
@@ -88,7 +90,7 @@ def parse_datetime_comparison(value):
 def parse_datetime_value(value):
     try:
         return _parse_datetime_value(value)
-    except ValueError:
+    except (ValueError, IndexError):
         raise InvalidQuery(u'{} is not a valid datetime query'.format(value))
 
 
@@ -145,6 +147,27 @@ def get_date_params(value, from_field, to_field):
         })
     return result
 
+reserved_tag_names = frozenset([
+    'query',
+    'is',
+    'assigned',
+    'bookmarks',
+    'first-release',
+    'release',
+    'level',
+    'user',
+    'user.id',
+    'user.ip',
+    'has',
+    'age',
+    'environment',
+    'browser',
+    'device',
+    'os',
+    'os.name',
+    'url',
+    'event.timestamp'])
+
 
 def tokenize_query(query):
     """
@@ -191,6 +214,8 @@ def tokenize_query(query):
         key, value = token.split(':', 1)
         if not value:
             results['query'].append(token)
+            if key in reserved_tag_names:
+                raise InvalidQuery(u"query term '{}:' found no arguments. (Terms are space delimited)".format(key))
             continue
 
         if value[0] == '"':
@@ -215,7 +240,6 @@ def parse_query(project, query, user):
     tokens = tokenize_query(query)
 
     results = {'tags': {}, 'query': []}
-
     for key, token_list in six.iteritems(tokens):
         for value in token_list:
             if key == 'query':
@@ -229,7 +253,7 @@ def parse_query(project, query, user):
                     try:
                         results['status'] = STATUS_CHOICES[value]
                     except KeyError:
-                        pass
+                        raise InvalidQuery(u"'is:' had unknown status code '{}'.".format(value))
             elif key == 'assigned':
                 if value == 'me':
                     results['assigned_to'] = user
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 81e18c8e5e..23d1b8f707 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -66,6 +66,7 @@ const MenuItem = React.createClass({
       children = this.renderAnchor();
     }
 
+
     return (
       <li role="presentation" title={null} href={null}
         className={classNames(this.props.className, classes)}
@@ -77,4 +78,3 @@ const MenuItem = React.createClass({
 });
 
 export default MenuItem;
-
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index c852d1a2d3..5e855eeabd 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -343,9 +343,11 @@ const Stream = React.createClass({
           pageLinks: jqXHR.getResponseHeader('Link'),
         });
       },
-      error: () => {
+      error: (err) => {
+        let error = err.responseJSON || true;
+        error = error.detail || true;
         this.setState({
-          error: true,
+          error,
           dataLoading: false
         });
       },
@@ -542,11 +544,12 @@ const Stream = React.createClass({
     let body;
 
     let project = this.getProject();
-
     if (this.state.dataLoading) {
       body = this.renderLoading();
     } else if (this.state.error) {
-      body = (<LoadingError onRetry={this.fetchData} />);
+      body = (<LoadingError
+        message={this.state.error}
+        onRetry={this.fetchData} />);
     } else if (!project.firstEvent) {
       body = this.renderAwaitingEvents();
     } else if (this.state.groupIds.length > 0) {
