commit ce65c4443aa43e8121aeae9988da3f0af83ae918
Author: jeffkwoh <23180853+jeffkwoh@users.noreply.github.com>
Date:   Sat Apr 18 02:26:05 2020 +0800

    Opt in to issue alerts targeting for new proj (#17885)

diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 83849f7b3c..5e8953dfb2 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -108,7 +108,7 @@ class Project(Model, PendingDeletionMixin):
             ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
             ("has_transactions", "This Project has sent transactions"),
         ),
-        default=0,
+        default=2,
         null=True,
     )
 
diff --git a/src/sentry/receivers/rules.py b/src/sentry/receivers/rules.py
index aacec9b602..3fb9ab9b7a 100644
--- a/src/sentry/receivers/rules.py
+++ b/src/sentry/receivers/rules.py
@@ -8,7 +8,13 @@ DEFAULT_RULE_LABEL = "Send a notification for new issues"
 DEFAULT_RULE_DATA = {
     "match": "all",
     "conditions": [{"id": "sentry.rules.conditions.first_seen_event.FirstSeenEventCondition"}],
-    "actions": [{"id": "sentry.rules.actions.notify_event.NotifyEventAction"}],
+    "actions": [
+        {
+            "id": "sentry.mail.actions.NotifyEmailAction",
+            "targetType": "IssueOwners",
+            "targetIdentifier": None,
+        }
+    ],
 }
 
 
diff --git a/tests/sentry/api/endpoints/test_project_rules_configuration.py b/tests/sentry/api/endpoints/test_project_rules_configuration.py
index a46dbcd809..399f173898 100644
--- a/tests/sentry/api/endpoints/test_project_rules_configuration.py
+++ b/tests/sentry/api/endpoints/test_project_rules_configuration.py
@@ -8,12 +8,16 @@ from sentry.testutils import APITestCase
 
 
 class ProjectRuleConfigurationTest(APITestCase):
+    def setUp(self):
+        self.project.flags.has_issue_alerts_targeting = False
+        self.project.save()
+
     def test_simple(self):
         self.login_as(user=self.user)
 
         team = self.create_team()
         project1 = self.create_project(teams=[team], name="foo")
-        self.create_project(teams=[team], name="bar")
+        self.create_project(teams=[team], name="baz")
 
         url = reverse(
             "sentry-api-0-project-rules-configuration",
@@ -22,7 +26,7 @@ class ProjectRuleConfigurationTest(APITestCase):
         response = self.client.get(url, format="json")
 
         assert response.status_code == 200, response.content
-        assert len(response.data["actions"]) == 4
+        assert len(response.data["actions"]) == 5
         assert len(response.data["conditions"]) == 9
 
     @property
diff --git a/tests/sentry/mail/test_utils.py b/tests/sentry/mail/test_utils.py
index 139dd36ad6..7ccde23427 100644
--- a/tests/sentry/mail/test_utils.py
+++ b/tests/sentry/mail/test_utils.py
@@ -17,6 +17,8 @@ class MigrateProjectToIssueAlertTargetingTest(TestCase):
         self.user_2 = self.create_user()
         self.team = self.create_team(self.organization, members=[self.user, self.user_2])
         self.project = self.create_project(organization=self.organization, teams=[self.team])
+        self.project.flags.has_issue_alerts_targeting = False
+        self.project.save()
         self.mail = plugins.get("mail")
 
     def create_rule(self, actions):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 3a09267ce2..f17cf75920 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -23,6 +23,7 @@ from sentry.models import (
     Organization,
     OrganizationMember,
     OrganizationMemberTeam,
+    Project,
     ProjectOption,
     ProjectOwnership,
     Repository,
@@ -263,6 +264,7 @@ class MailPluginTest(TestCase):
         assert msg.subject.startswith("[Example prefix]")
 
     def test_assignment(self):
+        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
         )
@@ -288,6 +290,7 @@ class MailPluginTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_assignment_team(self):
+        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
         )
@@ -314,6 +317,7 @@ class MailPluginTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_note(self):
+        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
         user_foo = self.create_user("foo@example.com")
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
@@ -419,6 +423,7 @@ class MailPluginSignalsTest(TestCase):
         )
 
     def test_user_feedback(self):
+        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
         report = self.create_report()
         UserOption.objects.set_value(
             user=self.user, key="workflow:notifications", value=UserOptionValue.all_conversations
@@ -446,6 +451,7 @@ class MailPluginSignalsTest(TestCase):
         assert msg.to == [self.user.email]
 
     def test_user_feedback__enhanced_privacy(self):
+        self.project.update(flags=F("flags").bitand(~Project.flags.has_issue_alerts_targeting))
         self.organization.update(flags=F("flags").bitor(Organization.flags.enhanced_privacy))
         assert self.organization.flags.enhanced_privacy.is_set is True
         UserOption.objects.set_value(
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index 55695395be..306da20246 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -5,8 +5,8 @@ from __future__ import absolute_import
 from datetime import timedelta
 from django.utils import timezone
 
+from sentry.mail.actions import ActionTargetType
 from sentry.models import GroupRuleStatus, Rule
-from sentry.plugins.base import plugins
 from sentry.testutils import TestCase
 from sentry.rules.processor import RuleProcessor
 
@@ -15,7 +15,11 @@ class RuleProcessorTest(TestCase):
     # this test relies on a few other tests passing
     def test_integrated(self):
         event = self.store_event(data={}, project_id=self.project.id)
-        action_data = {"id": "sentry.rules.actions.notify_event.NotifyEventAction"}
+        action_data = {
+            "id": "sentry.mail.actions.NotifyEmailAction",
+            "targetType": ActionTargetType.ISSUE_OWNERS.value,
+            "targetIdentifier": None,
+        }
         condition_data = {"id": "sentry.rules.conditions.every_event.EveryEventCondition"}
 
         Rule.objects.filter(project=event.project).delete()
@@ -33,7 +37,6 @@ class RuleProcessorTest(TestCase):
         results = list(rp.apply())
         assert len(results) == 1
         callback, futures = results[0]
-        assert callback == plugins.get("mail").rule_notify
         assert len(futures) == 1
         assert futures[0].rule == rule
         assert futures[0].kwargs == {}
