commit 5c5c458b7ac8074d1c4896b83a53be0fcfea2d09
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Sep 23 17:53:01 2016 -0700

    Status page in sidebar now goes to statuspage.io api

diff --git a/src/sentry/static/sentry/app/actionCreators/incidents.jsx b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
new file mode 100644
index 0000000000..b65d1b7a87
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
@@ -0,0 +1,56 @@
+import ConfigStore from '../stores/configStore';
+import IncidentActions from '../actions/incidentActions';
+import $ from 'jquery';
+
+function getIncidentsFromIncidentResponse(incidents) {
+  if (incidents === null || incidents.length == 0) {
+    return [[], 'none'];
+  }
+
+  let isMajor = false;
+  let log = [];
+  incidents.forEach((item) => {
+    if (!isMajor && item.impact === 'major') {
+      isMajor = true;
+    }
+    log.push({
+      name: item.name,
+      updates: item.incident_updates.map((update) => {
+        return update.body;
+      }),
+      url: item.shortlink,
+      status: item.status
+    });
+  });
+
+  return [log, isMajor ? 'major' : 'minor'];
+}
+
+export function load() {
+  let cfg = ConfigStore.get('statuspage');
+  if (cfg && cfg.id) {
+    IncidentActions.update();
+
+    $.ajax({
+      type: 'GET',
+      url: 'https://' + cfg.id + '.' + cfg.api_host + '/api/v2/incidents/unresolved.json',
+      crossDomain: true,
+      cache: false,
+      success: (data) => {
+        let [incidents, indicator] = getIncidentsFromIncidentResponse(data.incidents);
+        IncidentActions.updateSuccess({
+          status: {
+            incidents: incidents,
+            indicator: indicator,
+            url: data.page.url
+          }
+        });
+      },
+      error: () => {
+        IncidentActions.updateError({
+          status: null
+        });
+      }
+    });
+  }
+}
diff --git a/src/sentry/static/sentry/app/actions/incidentActions.jsx b/src/sentry/static/sentry/app/actions/incidentActions.jsx
new file mode 100644
index 0000000000..4db29bf1aa
--- /dev/null
+++ b/src/sentry/static/sentry/app/actions/incidentActions.jsx
@@ -0,0 +1,7 @@
+import Reflux from 'reflux';
+
+export default Reflux.createActions([
+  'update',
+  'updateError',
+  'updateSuccess',
+]);
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 284b4acc94..252f5e08b8 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -1,42 +1,22 @@
 import React from 'react';
+import Reflux from 'reflux';
 import $ from 'jquery';
 
 import ApiMixin from '../../mixins/apiMixin';
 import ConfigStore from '../../stores/configStore';
+import IncidentStore from '../../stores/incidentStore';
 import OrganizationState from '../../mixins/organizationState';
-// import {Link} from 'react-router';
+import {load as loadIncidents} from '../../actionCreators/incidents';
 
 import Broadcasts from './broadcasts';
-// import StatusPage from './statuspage';
 import UserNav from './userNav';
 import requiredAdminActions from '../requiredAdminActions';
 import OrganizationSelector from './organizationSelector';
 import SidebarPanel from '../sidebarPanel';
 import TodoList from '../todos';
 import IssueList from '../issueList';
-import {t} from '../../locale';
 
-const INCIDENTS = [
-  {
-    id: 1,
-    title: 'Issues delivering mail to FastMail customers',
-    url: 'http://example.com',
-    updates: [
-        {
-          id: 1,
-          status: 'Resolved',
-          message: 'FastMail has addressed the issue, and we are delivering email again.',
-          timestamp : '1 hour ago'
-        },
-        {
-          id: 2,
-          status: 'Identified',
-          message: 'FastMail customers are not getting emails. Our outbound IPs are being rate limited by FastMail. We have an open ticket with them to try and alleviate the issue. In the meantime, you may want to switch your Sentry email to something not backed by FastMail.',
-          timestamp : '2 hours ago',
-        }
-    ]
-  }
-];
+import {t} from '../../locale';
 
 const OnboardingStatus = React.createClass({
   propTypes: {
@@ -89,19 +69,24 @@ function getFirstRequiredAdminAction(org) {
 }
 
 const Sidebar = React.createClass({
-  mixins: [ApiMixin, OrganizationState],
+  mixins: [
+    ApiMixin,
+    OrganizationState,
+    Reflux.listenTo(IncidentStore, 'onIncidentChange'),
+  ],
 
   getInitialState: function() {
-    if (location.hash == '#welcome') {
-      return {showTodos: true};
-    } else {
-      return {showTodos: false};
-    }
+    return {
+      showTodos: location.hash === '#welcome',
+      status: null
+    };
   },
 
   componentDidMount() {
     $(window).on('hashchange', this.hashChangeHandler);
     $(document).on('click', this.documentClickHandler);
+
+    loadIncidents();
   },
 
   componentWillUnmount() {
@@ -123,6 +108,12 @@ const Sidebar = React.createClass({
     }
   },
 
+  onIncidentChange(status) {
+    this.setState({
+      status: {...status}
+    });
+  },
+
   toggleTodos(e) {
     this.setState({showTodos: !this.state.showTodos});
   },
@@ -161,7 +152,7 @@ const Sidebar = React.createClass({
       );
     }
 
-    let incidents = INCIDENTS;
+    let status = this.state.status;
 
     return (<div>
       <OrganizationSelector
@@ -242,24 +233,20 @@ const Sidebar = React.createClass({
             params={{orgId: org.slug}} />
         </SidebarPanel>
       }
-      {this.state.showPanel && this.state.currentPanel == 'statusupdate' &&
+      {this.state.showPanel && this.state.currentPanel == 'statusupdate' && status &&
         <SidebarPanel title={t('Recent status updates')}
                       hidePanel={()=>this.hidePanel()}>
           <ul className="incident-list list-unstyled">
-            {incidents.map((incident) =>
+            {status.incidents.map((incident) =>
               <li className="incident-item" key={incident.id}>
                 <h4>{incident.title}</h4>
                 {incident.updates ?
                   <div>
                     <h6>Latest updates:</h6>
                     <ul className="status-list list-unstyled">
-                      {incident.updates.map((update) =>
-                        <li className="status-item" key={update.id}>
-                          <p>
-                            <strong>{update.status}</strong> - &nbsp;
-                            {update.message}<br/>
-                            <small>{update.timestamp}</small>
-                          </p>
+                      {incident.updates.map((update, key) =>
+                        <li className="status-item" key={key}>
+                          <p>{update}</p>
                         </li>
                       )}
                     </ul>
@@ -323,9 +310,12 @@ const Sidebar = React.createClass({
               currentPanel={this.state.currentPanel}
               onShowPanel={()=>this.togglePanel('broadcasts')}
               hidePanel={()=>this.hidePanel()} />
-            <li className={this.state.currentPanel == 'statusupdate' ? 'active' : null }>
-              <a onClick={()=>this.togglePanel('statusupdate')} ><span className="icon icon-alert" /></a>
-            </li>
+
+            {this.state.status &&
+              <li className={this.state.currentPanel == 'statusupdate' ? 'active' : null }>
+                <a onClick={()=>this.togglePanel('statusupdate')}><span className="icon icon-alert"/></a>
+              </li>
+            }
             <li>
               <UserNav className="user-settings" />
             </li>
diff --git a/src/sentry/static/sentry/app/components/sidebar/statuspage.jsx b/src/sentry/static/sentry/app/components/sidebar/statuspage.jsx
deleted file mode 100644
index cfc87e3cd1..0000000000
--- a/src/sentry/static/sentry/app/components/sidebar/statuspage.jsx
+++ /dev/null
@@ -1,141 +0,0 @@
-import React from 'react';
-import jQuery from 'jquery';
-
-import ConfigStore from '../../stores/configStore';
-import DropdownLink from '../dropdownLink';
-import {t} from '../../locale';
-
-const StatusPage = React.createClass({
-
-  getInitialState() {
-    return {
-      status: null,
-      isLoading: false
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState(), this.fetchData);
-  },
-
-  getConfig() {
-    return ConfigStore.get('statuspage');
-  },
-
-  getIncidentsFromIncidentResponse(incidents) {
-    if (incidents === null || incidents.length == 0) {
-      return [[], 'none'];
-    }
-
-    let isMajor = false;
-    let log = [];
-    incidents.forEach((item) => {
-      if (!isMajor && item.impact === 'major') {
-        isMajor = true;
-      }
-      log.push({
-        name: item.name,
-        updates: item.incident_updates.map((update) => {
-          return update.body;
-        }),
-        url: item.shortlink,
-        status: item.status
-      });
-    });
-
-    return [log, isMajor ? 'major' : 'minor'];
-  },
-
-  fetchData(callback) {
-    let cfg = this.getConfig();
-    if (cfg && cfg.id) {
-      this.setState({
-        isLoading: true
-      });
-      jQuery.ajax({
-        type: 'GET',
-        url: 'https://' + cfg.id + '.' + cfg.api_host + '/api/v2/incidents/unresolved.json',
-        crossDomain: true,
-        cache: false,
-        success: (data) => {
-          let [incidents, indicator] = this.getIncidentsFromIncidentResponse(
-            data.incidents);
-          this.setState({
-            isLoading: false,
-            status: {
-              incidents: incidents,
-              indicator: indicator,
-              url: data.page.url
-            }
-          });
-        },
-        error: () => {
-          this.setState({
-            isLoading: false,
-            status: null
-          });
-        }
-      });
-    }
-    return;
-  },
-
-  isDisabled() {
-    return this.getConfig() === null;
-  },
-
-  getIconClass() {
-    let status = this.state.status;
-    if (!status || status.indicator == 'none') {
-      return null;
-    } else if (status.indicator == 'minor') {
-      return 'icon-triangle';
-    } else if (status.indicator == 'major') {
-      return 'icon-exclamation';
-    }
-    return null;
-  },
-
-  render() {
-    if (this.isDisabled() || this.state.isLoading) {
-      return null;
-    }
-
-    let icon = this.getIconClass();
-    if (icon === null) {
-      return null;
-    }
-
-    let title = <span className={icon} />;
-    let items = this.state.status.incidents.map((incident, i) => {
-      return (
-        <li key={i} className="incident">
-          <strong>{incident.name}</strong> [{incident.status}]
-          <ul>
-            {incident.updates.map((update, j) => {
-              return (
-                <li key={j}>{update}</li>
-              );
-            })}
-          </ul>
-          <a href={incident.url} target="_blank">{t('Read more …')}</a>
-        </li>
-      );
-    });
-
-    return (
-      <DropdownLink
-          topLevelClasses={`statuspage ${this.props.className || ''}`}
-          menuClasses="dropdown-menu-right"
-          title={title}>
-        {items}
-      </DropdownLink>
-    );
-  }
-});
-
-export default StatusPage;
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 7e500d608d..c397334ecf 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -1,7 +1,7 @@
 import jQuery from 'jquery';
 import Reflux from 'reflux';
 import GroupActions from '../actions/groupActions';
-import IndicatorStore from '../stores/indicatorStore';
+import IndicatorStore from './indicatorStore';
 import utils from '../utils';
 import {t} from '../locale';
 import _ from 'underscore';
diff --git a/src/sentry/static/sentry/app/stores/incidentStore.jsx b/src/sentry/static/sentry/app/stores/incidentStore.jsx
new file mode 100644
index 0000000000..a142e11c7c
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/incidentStore.jsx
@@ -0,0 +1,27 @@
+import Reflux from 'reflux';
+
+import IncidentActions from '../actions/incidentActions';
+
+const IncidentStore = Reflux.createStore({
+  init() {
+    this.reset();
+
+    this.listenTo(IncidentActions.updateSuccess, this.onUpdateSuccess);
+  },
+
+  reset() {
+    this.status = {};
+  },
+
+  onUpdateSuccess(data) {
+    this.status = data.status;
+    this.trigger(this.status);
+  },
+
+  getStatus() {
+    return this.status;
+  },
+});
+
+export default IncidentStore;
+
