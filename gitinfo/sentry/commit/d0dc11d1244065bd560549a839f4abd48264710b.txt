commit d0dc11d1244065bd560549a839f4abd48264710b
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Oct 12 16:52:01 2017 -0700

    feat(analytics): Add Google PubSub backend (#6150)
    
    Replaces #5420
    
    Decided that the best way moving forward was to simply write into PubSub instead of directly into BigQuery. PubSub provides being able to natively send batches asynchronously instead of BigQuery streaming inserts being done synchronously.
    
    Having events flow into PubSub also gives us significantly more flexibility like being able to attach multiple subscribers to the data to do different things with it. Like, archiving into Google Storage for long term, and writing in BQ. Or reprocessing old/raw data.

diff --git a/requirements-optional.txt b/requirements-optional.txt
index 7224ceb46c..bf6a24cd5b 100644
--- a/requirements-optional.txt
+++ b/requirements-optional.txt
@@ -1 +1,4 @@
+google-cloud-pubsub>=0.28.3,<0.29
+# See https://github.com/GoogleCloudPlatform/google-cloud-python/issues/4001
+grpcio==1.4.0
 python3-saml>=1.2.6,<1.3
diff --git a/src/sentry/analytics/event.py b/src/sentry/analytics/event.py
index c09861efed..ec3bb7b810 100644
--- a/src/sentry/analytics/event.py
+++ b/src/sentry/analytics/event.py
@@ -3,10 +3,14 @@ from __future__ import absolute_import, print_function
 __all__ = ('Attribute', 'Event', 'Map')
 
 import six
+from uuid import uuid1
+from base64 import b64encode
 
 from collections import Mapping
 from django.utils import timezone
 
+from sentry.utils.dates import to_timestamp
+
 
 class Attribute(object):
     def __init__(self, name, type=six.text_type, required=True):
@@ -68,13 +72,15 @@ class Map(Attribute):
 
 
 class Event(object):
-    __slots__ = ['attributes', 'data', 'datetime', 'type']
+    __slots__ = ['guid', 'attributes', 'data', 'datetime', 'type']
 
     type = None
 
     attributes = ()
 
     def __init__(self, type=None, datetime=None, **items):
+        self.guid = uuid1()
+
         self.datetime = datetime or timezone.now()
         if type is not None:
             self.type = type
@@ -99,12 +105,12 @@ class Event(object):
         self.data = data
 
     def serialize(self):
-        return dict(
-            {
-                'timestamp': int(self.datetime.isoformat('%s')),
-                'type': self.type,
-            }, **self.data
-        )
+        return {
+            'guid': b64encode(self.guid.bytes),
+            'timestamp': to_timestamp(self.datetime),
+            'type': self.type,
+            'data': self.data,
+        }
 
     @classmethod
     def from_instance(cls, instance, **kwargs):
diff --git a/src/sentry/analytics/pubsub.py b/src/sentry/analytics/pubsub.py
new file mode 100644
index 0000000000..0e840a9763
--- /dev/null
+++ b/src/sentry/analytics/pubsub.py
@@ -0,0 +1,26 @@
+from __future__ import absolute_import
+
+__all__ = ('PubSubAnalytics',)
+
+from sentry.utils.json import dumps
+from google.cloud import pubsub_v1
+
+from .base import Analytics
+
+
+class PubSubAnalytics(Analytics):
+    def __init__(self, project, topic, batch_max_bytes=1024 * 1024 *
+                 5, batch_max_latency=0.05, batch_max_messages=1000):
+        settings = pubsub_v1.types.BatchSettings(
+            max_bytes=batch_max_bytes,
+            max_latency=batch_max_latency,
+            max_messages=batch_max_messages,
+        )
+        self.publisher = pubsub_v1.PublisherClient(settings)
+        self.topic = self.publisher.topic_path(project, topic)
+
+    def record_event(self, event):
+        self.publisher.publish(
+            self.topic,
+            data=dumps(event.serialize()),
+        )
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 4d7a126dbb..98ea4c0b2c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -833,6 +833,7 @@ SENTRY_FILESTORE_ALIASES = {
 
 SENTRY_ANALYTICS_ALIASES = {
     'noop': 'sentry.analytics.Analytics',
+    'pubsub': 'sentry.analytics.pubsub.PubSubAnalytics',
 }
 
 # set of backends that do not support needing SMTP mail.* settings
diff --git a/tests/sentry/analytics/test_event.py b/tests/sentry/analytics/test_event.py
index 6cd8db56de..3df9de8c12 100644
--- a/tests/sentry/analytics/test_event.py
+++ b/tests/sentry/analytics/test_event.py
@@ -1,6 +1,9 @@
 from __future__ import absolute_import
 
+from datetime import datetime
+from mock import patch
 import pytest
+import pytz
 
 from sentry.analytics import Attribute, Event, Map
 from sentry.testutils import TestCase
@@ -20,8 +23,19 @@ class DummyType(object):
 
 
 class EventTest(TestCase):
-    def test_simple(self):
-        result = ExampleEvent(id='1', map={'key': 'value'}, optional=False)
+    @patch('sentry.analytics.event.uuid1')
+    def test_simple(self, mock_uuid1):
+        class uuid(object):
+            bytes = b'\x00\x01\x02'
+
+        mock_uuid1.return_value = uuid
+
+        result = ExampleEvent(
+            id='1',
+            map={'key': 'value'},
+            optional=False,
+            datetime=datetime(2001, 4, 18, tzinfo=pytz.utc)
+        )
         assert result.data == {
             'id': 1,
             'map': {
@@ -29,6 +43,18 @@ class EventTest(TestCase):
             },
             'optional': False,
         }
+        assert result.serialize() == {
+            'data': {
+                'id': 1,
+                'map': {
+                    'key': 'value',
+                },
+                'optional': False,
+            },
+            'type': 'example',
+            'timestamp': 987552000,
+            'guid': 'AAEC',
+        }
 
     def test_optional_is_optional(self):
         result = ExampleEvent(id='1', map={'key': 'value'})
