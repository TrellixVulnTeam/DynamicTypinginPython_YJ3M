commit 4b3aacb5f819969990b331204daf61d6d8e71132
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Mar 20 15:39:43 2018 -0700

     feat(environments): Query string does not display default environment (#7706)
    
    Environments are only reflected in the query string if the are not default
    All environments is represented with `?environment=__all_environments__`
    
    A number of components that use this higher order component currently rely on the environment in the querystring being the correct one, so we will need to modify these as well

diff --git a/src/sentry/static/sentry/app/constants.jsx b/src/sentry/static/sentry/app/constants.jsx
index f3a4a316e2..669a3dc254 100644
--- a/src/sentry/static/sentry/app/constants.jsx
+++ b/src/sentry/static/sentry/app/constants.jsx
@@ -33,3 +33,5 @@ export const DEFAULT_API_SCOPES = [
 export const DEFAULT_TOAST_DURATION = 6000;
 
 export const CSRF_COOKIE_NAME = window.csrfCookieName || 'sc';
+
+export const ALL_ENVIRONMENTS_KEY = '__all_environments__';
diff --git a/src/sentry/static/sentry/app/stores/environmentStore.jsx b/src/sentry/static/sentry/app/stores/environmentStore.jsx
index 205e338f45..dc26228897 100644
--- a/src/sentry/static/sentry/app/stores/environmentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/environmentStore.jsx
@@ -5,6 +5,7 @@ import ProjectActions from '../actions/projectActions';
 import EnvironmentActions from '../actions/environmentActions';
 
 import {setActiveEnvironment} from '../actionCreators/environments';
+import {ALL_ENVIRONMENTS_KEY} from '../constants';
 
 const PRODUCTION_ENV_NAMES = new Set([
   'production',
@@ -19,7 +20,7 @@ const DEFAULT_EMPTY_ROUTING_NAME = 'none';
 
 const EnvironmentStore = Reflux.createStore({
   init() {
-    this.items = null;
+    this.items = [];
     this.hidden = null;
     this.defaultEnvironment = null;
     this.listenTo(EnvironmentActions.loadData, this.loadInitialData);
@@ -31,7 +32,12 @@ const EnvironmentStore = Reflux.createStore({
   loadInitialData(items, activeEnvironmentName) {
     this.loadActiveData(items);
     // Update the default environment in the latest context store
-    const activeEnvironment = this.getByName(activeEnvironmentName) || this.getDefault();
+    // The active environment will be null (aka All Environments) if the name matches
+    // ALL_ENVIRONMENTS_KEY otherwise find the environment matching the name provided
+    let activeEnvironment = null;
+    if (activeEnvironmentName !== ALL_ENVIRONMENTS_KEY) {
+      activeEnvironment = this.getByName(activeEnvironmentName) || this.getDefault();
+    }
     setActiveEnvironment(activeEnvironment);
   },
 
@@ -59,7 +65,7 @@ const EnvironmentStore = Reflux.createStore({
   },
 
   getByName(name) {
-    const envs = this.items || [];
+    const envs = this.items;
     return envs.find(item => item.name === name) || null;
   },
 
@@ -80,7 +86,7 @@ const EnvironmentStore = Reflux.createStore({
   // Default environment is either the first based on the set of common names
   // or the first in the environment list if none match
   getDefault() {
-    let allEnvs = this.items || [];
+    let allEnvs = this.items;
 
     let defaultEnv = allEnvs.find(e => e.name === this.defaultEnvironment);
 
diff --git a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
index 3deffea906..fa0dcf8b11 100644
--- a/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
+++ b/src/sentry/static/sentry/app/utils/withEnvironmentInQueryString.jsx
@@ -5,7 +5,9 @@ import Reflux from 'reflux';
 import {browserHistory} from 'react-router';
 import qs from 'query-string';
 
+import EnvironmentStore from '../stores/environmentStore';
 import LatestContextStore from '../stores/latestContextStore';
+import {ALL_ENVIRONMENTS_KEY} from '../constants';
 
 const withEnvironmentInQueryString = WrappedComponent =>
   createReactClass({
@@ -27,17 +29,26 @@ const withEnvironmentInQueryString = WrappedComponent =>
     },
 
     componentWillMount() {
-      if (this.state.hasEnvironmentsFeature) {
+      const {hasEnvironmentsFeature, environment} = this.state;
+
+      if (hasEnvironmentsFeature) {
         const {query, pathname} = this.props.location;
 
-        if (this.state.environment) {
-          const envName = this.state.environment.name;
-          const hasValidEnvironmentInQuery =
-            'environment' in query && query.environment === envName;
+        const isDefaultEnvironment = environment === EnvironmentStore.getDefault();
 
-          // Update environment in browser history if it is not in sync with the currently active one
-          if (!hasValidEnvironmentInQuery) {
-            query.environment = this.state.environment.name;
+        // Update the query string to match environment if they are not in sync
+        if (environment) {
+          if (environment.name !== query.environment) {
+            if (isDefaultEnvironment) {
+              delete query.environment;
+            } else {
+              query.environment = environment.name;
+            }
+            browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
+          }
+        } else {
+          if (environment === null && !isDefaultEnvironment) {
+            query.environment = ALL_ENVIRONMENTS_KEY;
             browserHistory.replace(`${pathname}?${qs.stringify(query)}`);
           }
         }
@@ -48,12 +59,20 @@ const withEnvironmentInQueryString = WrappedComponent =>
       // TODO(lyn): Remove this when environments feature is active
       const hasEnvironmentsFeature = this.hasEnvironmentsFeature(organization);
 
-      if (hasEnvironmentsFeature && environment !== this.state.environment) {
+      const environmentHasChanged = environment !== this.state.environment;
+
+      const defaultEnvironment = EnvironmentStore.getDefault();
+
+      if (hasEnvironmentsFeature && environmentHasChanged) {
         const {query, pathname} = this.props.location;
-        if (environment) {
-          query.environment = environment.name;
-        } else {
+        if (environment === defaultEnvironment) {
+          // We never show environment in the query string if it's the default one
           delete query.environment;
+        } else {
+          // We show ?environment=__all_environments__ in the query string if 'All environments'
+          // is selected and that is not the default
+          const envName = environment ? environment.name : ALL_ENVIRONMENTS_KEY;
+          query.environment = envName;
         }
         browserHistory.push(`${pathname}?${qs.stringify(query)}`);
       }
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 5d19f7d39e..53d95a5033 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -133,7 +133,7 @@ const ProjectContext = createReactClass({
   },
 
   fetchData() {
-    let {orgId, projectId} = this.props;
+    let {orgId, projectId, location} = this.props;
     // we fetch core access/information from the global organization data
     let activeProject = this.identifyProject();
     let hasAccess = activeProject && activeProject.hasAccess;
@@ -164,7 +164,12 @@ const ProjectContext = createReactClass({
           // assuming here that this means the project is considered the active project
           setActiveProject(project);
 
-          loadEnvironments(envs, project.defaultEnvironment);
+          // If an environment is specified in the query string, load it instead of default
+          const queryEnv = location.query.environment;
+          const envName =
+            typeof queryEnv === 'undefined' ? project.defaultEnvironment : queryEnv;
+
+          loadEnvironments(envs, envName);
         },
         () => {
           this.setState({
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index 617ceeb821..5f768dd884 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -19,8 +19,7 @@ import Panel from '../settings/components/panel';
 import PanelBody from '../settings/components/panelBody';
 import PanelHeader from '../settings/components/panelHeader';
 import RuleNodeList from './ruleNodeList';
-
-const ALL_ENVIRONMENTS_KEY = '__all_environments__';
+import {ALL_ENVIRONMENTS_KEY} from '../../constants';
 
 const FREQUENCY_CHOICES = [
   ['5', t('5 minutes')],
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 5de4da19ea..21f2c0f825 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -40,7 +40,7 @@ window.TestStubs = {
     setRouteLeaveHook: sinon.spy(),
     isActive: sinon.spy(),
     createHref: sinon.spy(),
-    location: {},
+    location: {query: {}},
   }),
 
   location: () => ({
diff --git a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
index bcde6abca0..e9afb357af 100644
--- a/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/onboarding/configure/__snapshots__/index.spec.jsx.snap
@@ -83,7 +83,11 @@ exports[`Configure should render correctly render() should render platform docs
         }
       >
         <ProjectContext
-          location={Object {}}
+          location={
+            Object {
+              "query": Object {},
+            }
+          }
           orgId="testOrg"
           projectId="project-slug"
           router={
@@ -93,7 +97,9 @@ exports[`Configure should render correctly render() should render platform docs
               "goBack": [Function],
               "goForward": [Function],
               "isActive": [Function],
-              "location": Object {},
+              "location": Object {
+                "query": Object {},
+              },
               "push": [Function],
               "replace": [Function],
               "setRouteLeaveHook": [Function],
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index 8aa2c92579..efc08719fb 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -1,4 +1,5 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import {shallow, mount} from 'enzyme';
 
 import {Client} from 'app/api';
@@ -158,7 +159,7 @@ describe('Configure should render correctly', function() {
         childContextTypes: {
           organization: SentryTypes.Organization,
           project: SentryTypes.Project,
-          router: SentryTypes.object,
+          router: PropTypes.object,
         },
       });
 
