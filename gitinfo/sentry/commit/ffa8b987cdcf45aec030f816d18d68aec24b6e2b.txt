commit ffa8b987cdcf45aec030f816d18d68aec24b6e2b
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Jul 19 16:37:01 2017 -0500

    Add unique integration_id to go between marketing pages, documentation and events. (#5724)
    
    * Add constants for marketing/signup lookups.
    
    * Impl lookups.
    
    * Add CHANGES and tests, update fns.
    
    * Verify constant values,
    
    * Mock tests.

diff --git a/CHANGES b/CHANGES
index 22e2529dad..c1658dd101 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,6 +1,9 @@
 Version 8.19 (Unreleased)
 -------------------------
+
 - Hide project filter when there are no projects to list.
+- Added lookup methods to constants to get a unique `integration_id` for a given
+  event, and to get information (documention url, human readable name) from that id.
 
 Version 8.18
 ------------
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 5a277468fd..a077e8311e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -19,6 +19,8 @@ from django.conf import settings
 from django.utils.translation import ugettext_lazy as _
 from operator import attrgetter
 
+from sentry.utils.integrationdocs import load_doc
+
 
 def get_all_languages():
     results = []
@@ -233,6 +235,94 @@ KNOWN_DSYM_TYPES = {
 NATIVE_UNKNOWN_STRING = '<unknown>'
 
 
+# to go from an integration id (in _platforms.json) to the platform
+# data, such as documentation url or humanized name.
+# example: java-logback -> {"type": "framework",
+#                           "link": "https://docs.getsentry.com/hosted/clients/java/modules/logback/",
+#                           "id": "java-logback",
+#                           "name": "Logback"}
+INTEGRATION_ID_TO_PLATFORM_DATA = {}
+
+
+def _load_platform_data():
+    INTEGRATION_ID_TO_PLATFORM_DATA.clear()
+    data = load_doc('_platforms')
+
+    if not data:
+        return
+
+    for platform in data['platforms']:
+        integrations = platform.pop('integrations')
+        if integrations:
+            for integration in integrations:
+                integration_id = integration.pop('id')
+                INTEGRATION_ID_TO_PLATFORM_DATA[integration_id] = integration
+
+_load_platform_data()
+
+
+# special cases where the marketing slug differs from the integration id
+# (in _platforms.json). missing values (for example: "java") should assume
+# the marketing slug is the same as the integration id.
+MARKETING_SLUG_TO_INTEGRATION_ID = {
+    "kotlin": "java",
+    "scala": "java",
+    "android": "java-android",
+
+    # TODO: add more special cases...
+}
+
+
+# to go from a marketing page slug like /for/android/ to the integration id
+# (in _platforms.json), for looking up documentation urls, etc.
+def get_integration_id_for_marketing_slug(slug):
+    if slug in MARKETING_SLUG_TO_INTEGRATION_ID:
+        return MARKETING_SLUG_TO_INTEGRATION_ID[slug]
+
+    if slug in INTEGRATION_ID_TO_PLATFORM_DATA:
+        return slug
+
+
+# special cases where the integration sent with the SDK differ from
+# the integration id (in _platforms.json)
+# {PLATFORM: {INTEGRATION_SENT: integration_id, ...}, ...}
+PLATFORM_INTEGRATION_TO_INTEGRATION_ID = {
+    "java": {
+        "java.util.logging": "java-logging",
+    },
+
+    # TODO: add more special cases...
+}
+
+
+# to go from event data to the integration id (in _platforms.json),
+# for example an event like:
+# {"platform": "java",
+#  "sdk": {"name": "sentry-java",
+#          "integrations": ["java.util.logging"]}} -> java-logging
+def get_integration_id_for_event(platform, sdk_name, integrations):
+    if integrations:
+        for integration in integrations:
+            # check special cases
+            if platform in PLATFORM_INTEGRATION_TO_INTEGRATION_ID and \
+                    integration in PLATFORM_INTEGRATION_TO_INTEGRATION_ID[platform]:
+                return PLATFORM_INTEGRATION_TO_INTEGRATION_ID[platform][integration]
+
+            # try <platform>-<integration>, for example "java-log4j"
+            integration_id = "%s-%s" % (platform, integration)
+            if integration_id in INTEGRATION_ID_TO_PLATFORM_DATA:
+                return integration_id
+
+    # try sdk name, for example "sentry-java" -> "java" or "raven-java:log4j" -> "java-log4j"
+    sdk_name = sdk_name.lower().replace("sentry-", "").replace("raven-", "").replace(":", "-")
+    if sdk_name in INTEGRATION_ID_TO_PLATFORM_DATA:
+        return sdk_name
+
+    # try platform name, for example "java"
+    if platform in INTEGRATION_ID_TO_PLATFORM_DATA:
+        return platform
+
+
 class ObjectStatus(object):
     VISIBLE = 0
     HIDDEN = 1
diff --git a/tests/sentry/test_constants.py b/tests/sentry/test_constants.py
new file mode 100644
index 0000000000..1157fb3e6e
--- /dev/null
+++ b/tests/sentry/test_constants.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.constants import get_integration_id_for_marketing_slug, get_integration_id_for_event, \
+    INTEGRATION_ID_TO_PLATFORM_DATA
+from sentry.testutils import TestCase
+
+
+class ConstantsTest(TestCase):
+    mock_integration_ids = {
+        'java': {},
+        'java-log4j': {},
+        'java-log4j2': {},
+        'java-android': {},
+    }
+
+    def test_marketing_slug_to_integration_id(self):
+        with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, self.mock_integration_ids):
+            assert get_integration_id_for_marketing_slug('java') == 'java'
+            # kotlin uses the java library, too
+            assert get_integration_id_for_marketing_slug('kotlin') == 'java'
+            assert get_integration_id_for_marketing_slug('android') == 'java-android'
+            assert get_integration_id_for_marketing_slug('foobar') is None
+
+    def test_integration_id_for_event(self):
+        with patch.dict(INTEGRATION_ID_TO_PLATFORM_DATA, self.mock_integration_ids):
+            assert get_integration_id_for_event('java', 'sentry-java', None) == 'java'
+            assert get_integration_id_for_event('java', 'raven-java', None) == 'java'
+            assert get_integration_id_for_event('java', 'raven-java:log4j', None) == 'java-log4j'
+            assert get_integration_id_for_event(
+                'java', 'sentry-java', ['android']) == 'java-android'
+            assert get_integration_id_for_event(
+                'java', 'sentry-java', ['foobar', 'log4j2']) == 'java-log4j2'
+            assert get_integration_id_for_event('foobar', 'sentry-java', None) == 'java'
+            assert get_integration_id_for_event('java', 'foobar', None) == 'java'
+            assert get_integration_id_for_event('foobar', 'foobar', None) is None
