commit 0fdd73b5b20a7e5c72c4f235ce74f9e9ba372fb5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 28 19:22:02 2015 -0700

    Support scraping non-uris via releases

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 110629b28a..faf3ea7182 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -214,7 +214,7 @@ def fetch_release_file(filename, release):
     return result
 
 
-def fetch_url(url, project=None, release=None, allow_scraping=True):
+def fetch_file(url, project=None, release=None, allow_scraping=True):
     """
     Pull down a URL, returning a UrlResult object.
 
@@ -226,7 +226,7 @@ def fetch_url(url, project=None, release=None, allow_scraping=True):
 
     if release:
         result = fetch_release_file(url, release)
-    elif not allow_scraping:
+    elif not allow_scraping or not url.startswith(('http:', 'https:')):
         error = {
             'type': EventError.JS_MISSING_SOURCE,
             'url': url,
@@ -323,8 +323,8 @@ def fetch_sourcemap(url, project=None, release=None, allow_scraping=True):
     if is_data_uri(url):
         body = base64.b64decode(url[BASE64_PREAMBLE_LENGTH:])
     else:
-        result = fetch_url(url, project=project, release=release,
-                           allow_scraping=allow_scraping)
+        result = fetch_file(url, project=project, release=release,
+                            allow_scraping=allow_scraping)
         body = result.body
 
     # According to various specs[1][2] a SourceMap may be prefixed to force
@@ -421,7 +421,6 @@ class SourceProcessor(object):
             frames.extend([
                 f for f in stacktrace.frames
                 if f.lineno is not None
-                and f.is_url()
             ])
         return frames
 
@@ -615,8 +614,8 @@ class SourceProcessor(object):
             # TODO: respect cache-control/max-age headers to some extent
             logger.debug('Fetching remote source %r', filename)
             try:
-                result = fetch_url(filename, project=project, release=release,
-                                   allow_scraping=self.allow_scraping)
+                result = fetch_file(filename, project=project, release=release,
+                                    allow_scraping=self.allow_scraping)
             except BadSource as exc:
                 cache.add_error(filename, exc.data)
                 continue
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 94a4167a49..138b57021f 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -21,8 +21,8 @@ def load_fixture(name):
 
 
 class JavascriptIntegrationTest(TestCase):
-    @patch('sentry.lang.javascript.processor.fetch_url')
-    def test_source_expansion(self, mock_fetch_url):
+    @patch('sentry.lang.javascript.processor.fetch_file')
+    def test_source_expansion(self, mock_fetch_file):
         data = {
             'message': 'hello',
             'platform': 'javascript',
@@ -49,12 +49,12 @@ class JavascriptIntegrationTest(TestCase):
             }
         }
 
-        mock_fetch_url.return_value.body = '\n'.join('hello world')
+        mock_fetch_file.return_value.body = '\n'.join('hello world')
 
         resp = self._postWithHeader(data)
         assert resp.status_code, 200
 
-        mock_fetch_url.assert_called_once_with(
+        mock_fetch_file.assert_called_once_with(
             'http://example.com/foo.js',
             project=self.project,
             release=None,
@@ -75,9 +75,9 @@ class JavascriptIntegrationTest(TestCase):
         assert frame.context_line == 'h'
         assert frame.post_context == ['e', 'l', 'l', 'o', ' ']
 
-    @patch('sentry.lang.javascript.processor.fetch_url')
+    @patch('sentry.lang.javascript.processor.fetch_file')
     @patch('sentry.lang.javascript.processor.discover_sourcemap')
-    def test_inlined_sources(self, mock_discover_sourcemap, mock_fetch_url):
+    def test_inlined_sources(self, mock_discover_sourcemap, mock_fetch_file):
         data = {
             'message': 'hello',
             'platform': 'javascript',
@@ -100,13 +100,13 @@ class JavascriptIntegrationTest(TestCase):
 
         mock_discover_sourcemap.return_value = BASE64_SOURCEMAP
 
-        mock_fetch_url.return_value.url = 'http://example.com/test.min.js'
-        mock_fetch_url.return_value.body = '\n'.join('<generated source>')
+        mock_fetch_file.return_value.url = 'http://example.com/test.min.js'
+        mock_fetch_file.return_value.body = '\n'.join('<generated source>')
 
         resp = self._postWithHeader(data)
         assert resp.status_code, 200
 
-        mock_fetch_url.assert_called_once_with(
+        mock_fetch_file.assert_called_once_with(
             'http://example.com/test.min.js',
             project=self.project,
             release=None,
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index fa48035781..f2900b1052 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -5,26 +5,28 @@ from __future__ import absolute_import
 import pytest
 import responses
 
+from mock import patch
 from requests.exceptions import RequestException
 
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.lang.javascript.processor import (
-    BadSource, discover_sourcemap, fetch_sourcemap, fetch_url, generate_module,
+    BadSource, discover_sourcemap, fetch_sourcemap, fetch_file, generate_module,
     SourceProcessor, trim_line, UrlResult
 )
 from sentry.lang.javascript.sourcemaps import SourceMap, SourceMapIndex
+from sentry.models import Release
 from sentry.testutils import TestCase
 
 base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
 
 
-class FetchUrlTest(TestCase):
+class FetchFileTest(TestCase):
     @responses.activate
     def test_simple(self):
         responses.add(responses.GET, 'http://example.com', body='foo bar',
                       content_type='application/json')
 
-        result = fetch_url('http://example.com')
+        result = fetch_file('http://example.com')
 
         assert len(responses.calls) == 1
 
@@ -33,7 +35,7 @@ class FetchUrlTest(TestCase):
         assert result.headers == {'content-type': 'application/json'}
 
         # ensure we use the cached result
-        result2 = fetch_url('http://example.com')
+        result2 = fetch_file('http://example.com')
 
         assert len(responses.calls) == 1
 
@@ -47,7 +49,7 @@ class FetchUrlTest(TestCase):
         self.project.update_option('sentry:token', 'foobar')
         self.project.update_option('sentry:origins', ['*'])
 
-        result = fetch_url('http://example.com', project=self.project)
+        result = fetch_file('http://example.com', project=self.project)
 
         assert len(responses.calls) == 1
         assert responses.calls[0].request.headers['X-Sentry-Token'] == 'foobar'
@@ -61,16 +63,37 @@ class FetchUrlTest(TestCase):
         responses.add(responses.GET, 'http://example.com', body=RequestException())
 
         with pytest.raises(BadSource):
-            fetch_url('http://example.com')
+            fetch_file('http://example.com')
 
         assert len(responses.calls) == 1
 
         # ensure we use the cached domain-wide failure for the second call
         with pytest.raises(BadSource):
-            fetch_url('http://example.com/foo/bar')
+            fetch_file('http://example.com/foo/bar')
 
         assert len(responses.calls) == 1
 
+    @responses.activate
+    def test_non_url_without_release(self):
+        with pytest.raises(BadSource):
+            fetch_file('/example.js')
+
+    @responses.activate
+    @patch('sentry.lang.javascript.processor.fetch_release_file')
+    def test_non_url_with_release(self, mock_fetch_release_file):
+        mock_fetch_release_file.return_value = (
+            {'content-type': 'application/json'},
+            'foo',
+            200
+        )
+
+        release = Release.objects.create(project=self.project, version='1')
+
+        result = fetch_file('/example.js', release=release)
+        assert result.url == '/example.js'
+        assert result.body == 'foo'
+        assert result.headers == {'content-type': 'application/json'}
+
 
 class DiscoverSourcemapTest(TestCase):
     # discover_sourcemap(result)
