commit 52fb95fbfb2aa6e6b452d70ed27337a2d673bbac
Author: Ben Vinegar <ben@benv.ca>
Date:   Thu Sep 24 11:25:57 2015 -0700

    Works with predefined values, updates menu item box

diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 5bb83d28cc..ef7210abb8 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -13,9 +13,9 @@ var StreamTagStore = Reflux.createStore({
         key: 'is',
         name: 'Status',
         values: [
-          { value: 'resolved' },
-          { value: 'unresolved' },
-          { value: 'muted' }
+          'resolved',
+          'unresolved',
+          'muted'
         ],
         predefined: true
       },
@@ -23,7 +23,7 @@ var StreamTagStore = Reflux.createStore({
         key: 'assigned',
         name: 'User',
         values: MemberListStore.getAll().map(user => {
-          return { value: user.email };
+          return user.email;
         }),
         predefined: true
       }
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 69d1e9d489..f8cef9d793 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -272,7 +272,6 @@ var Stream = React.createClass({
   },
 
   onStreamTagChange(tags) {
-    console.log(tags);
     this.setState({
       tags: tags.reduce((obj, tag) => {
         obj[tag.key] = tag;
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index a3b0bc96c4..77e4223e97 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -8,6 +8,8 @@ import LoadingIndicator from "../../components/loadingIndicator";
 import {fetchTagValues} from "../../api/tags";
 import StreamTagStore from "../../stores/streamTagStore";
 
+var KEYUP_DEBOUNCE_MS = 300;
+
 var StreamTagFilter = React.createClass({
   mixins: [
     Reflux.listenTo(StreamTagStore, "onStreamTagChange")
@@ -27,13 +29,15 @@ var StreamTagFilter = React.createClass({
     return {
       tagValues: [],
       query: '',
-      loading: false
+      loading: false,
+      selectedValue: 'Select a value'
     };
   },
 
-  fetchTagValues: _.debounce(function(query) {
+  fetchTagValues: _.debounce(function() {
+    let query = this.state.query;
+
     this.setState({
-      query: query,
       loading: true
     });
 
@@ -41,19 +45,41 @@ var StreamTagFilter = React.createClass({
     fetchTagValues(params, this.props.tag.key, query, () => {
       this.setState({ loading: false });
     });
-  }, 300),
+  }, KEYUP_DEBOUNCE_MS),
 
   onFilterChange(evt) {
-    this.fetchTagValues(evt.target.value);
+    let query = evt.target.value;
+    this.setState({
+      query: query,
+    }, () => {
+      if (this.props.tag.predefined) {
+        return void this.filterTagValues();
+      }
+      this.fetchTagValues();
+    });
+  },
+
+  filterTagValues() {
+    let query = this.state.query.toLowerCase();
+    let tag = this.props.tag;
+
+    this.setState({
+      tagValues: _.filter(tag.values || [], (val) => val.toLowerCase().indexOf(query) > -1)
+    });
   },
 
   onStreamTagChange(tags) {
+    // The store broadcasts changes to *all* tags. We are only
+    // interested in changes to *this* tag.
     let tag = _.find(tags, (t) => t.key === this.props.tag.key);
     if (!tag) return;
 
-    let query = this.state.query.toLowerCase();
+    this.filterTagValues();
+  },
+
+  onSelectValue(val, evt) {
     this.setState({
-      tagValues: _.filter(tag.values || [], (val) => val.toLowerCase().indexOf(query) > -1)
+      selectedValue: val
     });
   },
 
@@ -65,15 +91,24 @@ var StreamTagFilter = React.createClass({
         <h6>{tag.name}</h6>
         <DropdownLink
           className="btn btn-default btn-sm"
-          title="Search a value...">
+          title={this.state.selectedValue}>
           <MenuItem noAnchor={true} key="filter">
-            <input type="text" className="form-control input-sm"
-                   placeholder="Filter people" ref="filter"
-                   onKeyUp={this.onFilterChange} />
+            <input type="text"
+              className="form-control input-sm"
+              placeholder={`Filter ${this.props.tag.name}`}
+              ref="filter"
+              onKeyUp={this.onFilterChange} />
           </MenuItem>
-          {this.state.loading ? <LoadingIndicator/> : this.state.tagValues.map((val) => {
-            return <MenuItem>{val}</MenuItem>;
-          })}
+          {this.state.loading
+            ? <LoadingIndicator/>
+            : this.state.tagValues.map((val) => {
+                return (
+                  <MenuItem key={val} onSelect={this.onSelectValue.bind(this, val)}>
+                  {val}
+                  </MenuItem>
+                );
+              })
+          }
         </DropdownLink>
       </div>
     );
