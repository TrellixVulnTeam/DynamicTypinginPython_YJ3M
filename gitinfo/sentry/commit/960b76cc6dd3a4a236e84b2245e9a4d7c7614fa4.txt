commit 960b76cc6dd3a4a236e84b2245e9a4d7c7614fa4
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Jun 22 08:51:32 2020 -0700

    feat(vercel): creates internal integration during installation (#19437)

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 9f2219822d..2686c9c8bc 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0085_fix_error_rate_snuba_query
+sentry: 0086_sentry_app_installation_for_provider
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 399ba4f22f..6c6298f437 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -16,9 +16,10 @@ from sentry.integrations import (
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
-from sentry.models import Project
+from sentry.models import Project, User, SentryAppInstallation, SentryAppInstallationForProvider
 from sentry.utils.compat import map
 from sentry.shared_integrations.exceptions import IntegrationError, ApiError
+from sentry.mediators.sentry_apps import InternalCreator
 
 from .client import VercelClient
 
@@ -48,6 +49,12 @@ metadata = IntegrationMetadata(
     aspects={},
 )
 
+internal_integration_overview = (
+    "This internal integration was auto-generated during the installation process of your Vercel"
+    " integration. It is needed to provide the token used to create a release. If this integration is "
+    "deleted, your Vercel integration will stop working!"
+)
+
 
 class VercelIntegration(IntegrationInstallation):
     def get_client(self):
@@ -150,6 +157,36 @@ class VercelIntegrationProvider(IntegrationProvider):
                 "installation_type": installation_type,
                 "webhook_id": webhook["id"],
             },
+            "post_install_data": {"user_id": state["user_id"]},
         }
 
         return integration
+
+    def post_install(self, integration, organization, extra=None):
+        # check if we have an installation already
+        if SentryAppInstallationForProvider.objects.filter(
+            organization=organization, provider="vercel"
+        ).exists():
+            logger.info(
+                "vercel.post_install.installation_exists",
+                extra={"organization_id": organization.id},
+            )
+            return
+
+        user = User.objects.get(id=extra.get("user_id"))
+        data = {
+            "name": "Vercel Internal Integration",
+            "author": "Auto-generated by Sentry",
+            "organization": organization,
+            "overview": internal_integration_overview.strip(),
+            "user": user,
+            "scopes": ["project:releases"],
+        }
+        # create the internal integration and link it to the join table
+        sentry_app = InternalCreator.run(**data)
+        sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=sentry_app)
+        SentryAppInstallationForProvider.objects.create(
+            sentry_app_installation=sentry_app_installation,
+            organization=organization,
+            provider="vercel",
+        )
diff --git a/src/sentry/integrations/vercel/urls.py b/src/sentry/integrations/vercel/urls.py
index a29468abe5..07f9961536 100644
--- a/src/sentry/integrations/vercel/urls.py
+++ b/src/sentry/integrations/vercel/urls.py
@@ -3,8 +3,10 @@ from __future__ import absolute_import, print_function
 from django.conf.urls import url
 
 from .webhook import VercelWebhookEndpoint
+from sentry.web.frontend.vercel_extension_configuration import VercelExtensionConfigurationView
 
 
 urlpatterns = [
     url(r"^webhook/$", VercelWebhookEndpoint.as_view()),
+    url(r"^configure/$", VercelExtensionConfigurationView.as_view()),
 ]
diff --git a/src/sentry/mediators/sentry_app_installations/destroyer.py b/src/sentry/mediators/sentry_app_installations/destroyer.py
index fce3e8e4ec..901e18965f 100644
--- a/src/sentry/mediators/sentry_app_installations/destroyer.py
+++ b/src/sentry/mediators/sentry_app_installations/destroyer.py
@@ -5,7 +5,13 @@ from requests.exceptions import RequestException
 from sentry import analytics
 from sentry.mediators import Mediator, Param
 from sentry.mediators import service_hooks, sentry_app_installation_tokens
-from sentry.models import ApiToken, AuditLogEntryEvent, SentryAppInstallationToken, ServiceHook
+from sentry.models import (
+    ApiToken,
+    AuditLogEntryEvent,
+    SentryAppInstallationToken,
+    ServiceHook,
+    SentryAppInstallationForProvider,
+)
 from sentry.mediators.sentry_app_installations.installation_notifier import InstallationNotifier
 from sentry.utils.audit import create_audit_entry
 
@@ -24,6 +30,7 @@ class Destroyer(Mediator):
         self._destroy_grant()
         self._destroy_service_hooks()
         self._destroy_api_tokens()
+        self._destroy_installation_for_provider()
         self._destroy_installation()
         return self.install
 
@@ -50,6 +57,11 @@ class Destroyer(Mediator):
                 api_token=token, user=self.user, request=self.request
             )
 
+    def _destroy_installation_for_provider(self):
+        SentryAppInstallationForProvider.objects.filter(
+            sentry_app_installation=self.install
+        ).delete()
+
     def _destroy_installation(self):
         if self.notify:
             try:
diff --git a/src/sentry/mediators/sentry_apps/internal_creator.py b/src/sentry/mediators/sentry_apps/internal_creator.py
index 33d7fa877d..c21040f91e 100644
--- a/src/sentry/mediators/sentry_apps/internal_creator.py
+++ b/src/sentry/mediators/sentry_apps/internal_creator.py
@@ -23,13 +23,13 @@ class InternalCreator(Mediator):
     is_alertable = Param(bool, default=False)
     schema = Param(dict, default=lambda self: {})
     overview = Param(six.string_types, required=False)
+    author = Param(six.string_types, required=False)
     allowed_origins = Param(Iterable, default=lambda self: [])
     request = Param("rest_framework.request.Request", required=False)
     user = Param("sentry.models.User")
 
     def call(self):
-        # SentryAppCreator expects an author so just set it to the org name
-        self.kwargs["author"] = self.organization.name
+        self.kwargs["author"] = self.kwargs.get("author") or self.organization.name
         self.kwargs["is_internal"] = True
         self.sentry_app = SentryAppCreator.run(**self.kwargs)
         self.sentry_app.verify_install = False
diff --git a/src/sentry/migrations/0086_sentry_app_installation_for_provider.py b/src/sentry/migrations/0086_sentry_app_installation_for_provider.py
new file mode 100644
index 0000000000..e374841c72
--- /dev/null
+++ b/src/sentry/migrations/0086_sentry_app_installation_for_provider.py
@@ -0,0 +1,54 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-06-17 21:46
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.db.models.deletion
+import django.utils.timezone
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = True
+
+
+    dependencies = [
+        ('sentry', '0085_fix_error_rate_snuba_query'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='SentryAppInstallationForProvider',
+            fields=[
+                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
+                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
+                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
+                ('provider', models.CharField(max_length=64)),
+                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
+                ('sentry_app_installation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.SentryAppInstallation')),
+            ],
+            options={
+                'db_table': 'sentry_sentryappinstallationforprovider',
+            },
+        ),
+        migrations.AlterUniqueTogether(
+            name='sentryappinstallationforprovider',
+            unique_together=set([('provider', 'organization')]),
+        ),
+    ]
diff --git a/src/sentry/models/sentryappinstallation.py b/src/sentry/models/sentryappinstallation.py
index 72fb698920..a4eb8ef468 100644
--- a/src/sentry/models/sentryappinstallation.py
+++ b/src/sentry/models/sentryappinstallation.py
@@ -8,13 +8,27 @@ from django.utils import timezone
 
 from sentry.constants import SentryAppInstallationStatus
 from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, ParanoidModel, Model
-from sentry.models import Project
+from sentry.models import Project, DefaultFieldsModel
 
 
 def default_uuid():
     return six.text_type(uuid.uuid4())
 
 
+# connects a sentry app installation to an organization and a provider
+class SentryAppInstallationForProvider(DefaultFieldsModel):
+    __core__ = False
+
+    sentry_app_installation = FlexibleForeignKey("sentry.SentryAppInstallation")
+    organization = FlexibleForeignKey("sentry.Organization")
+    provider = models.CharField(max_length=64)
+
+    class Meta:
+        app_label = "sentry"
+        db_table = "sentry_sentryappinstallationforprovider"
+        unique_together = (("provider", "organization"),)
+
+
 class SentryAppInstallationToken(Model):
     __core__ = False
 
diff --git a/src/sentry/web/frontend/integration_extension_configuration.py b/src/sentry/web/frontend/integration_extension_configuration.py
index 002f1a84a7..e449ed54a4 100644
--- a/src/sentry/web/frontend/integration_extension_configuration.py
+++ b/src/sentry/web/frontend/integration_extension_configuration.py
@@ -59,7 +59,6 @@ class IntegrationExtensionConfigurationView(BaseView):
             # TODO(steve): we probably should check the user has permissions and show an error page if not
             pipeline = self.init_pipeline(request, organization, request.GET.dict())
             return pipeline.current_step()
-
         return self.redirect(
             u"/extensions/{}/link/?{}".format(self.provider, urlencode(request.GET.dict()))
         )
@@ -71,6 +70,7 @@ class IntegrationExtensionConfigurationView(BaseView):
 
         pipeline.initialize()
         pipeline.bind_state(self.provider, self.map_params_to_state(params))
+        pipeline.bind_state("user_id", request.user.id)
 
         return pipeline
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index e47b26eceb..94eaeffd54 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -42,7 +42,6 @@ from sentry.web.frontend.unsubscribe_incident_notifications import (
 from sentry.web.frontend.user_avatar import UserAvatarPhotoView
 from sentry.web.frontend.setup_wizard import SetupWizardView
 from sentry.web.frontend.vsts_extension_configuration import VstsExtensionConfigurationView
-from sentry.web.frontend.vercel_extension_configuration import VercelExtensionConfigurationView
 from sentry.web.frontend.js_sdk_loader import JavaScriptSdkLoader
 from sentry.web.frontend.project_event import ProjectEventRedirect
 
@@ -598,12 +597,6 @@ urlpatterns += [
         VstsExtensionConfigurationView.as_view(),
         name="vsts-extension-configuration",
     ),
-    # vercel Marketplace extension install flow
-    url(
-        r"^extensions/vercel/configure/$",
-        VercelExtensionConfigurationView.as_view(),
-        name="vercel-extension-configuration",
-    ),
     # Generic
     url(r"^$", HomeView.as_view(), name="sentry"),
     url(r"^robots\.txt$", api.robots_txt, name="sentry-api-robots-txt"),
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index 8db27429fc..d58992ecfc 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -2,12 +2,14 @@ from __future__ import absolute_import
 
 import responses
 
-from six.moves.urllib.parse import parse_qs, urlencode
+from six.moves.urllib.parse import parse_qs
 
 from sentry.integrations.vercel import VercelIntegrationProvider
 from sentry.models import (
     Integration,
     OrganizationIntegration,
+    SentryAppInstallationForProvider,
+    SentryAppInstallation,
 )
 from sentry.testutils import IntegrationTestCase
 
@@ -17,7 +19,6 @@ class VercelIntegrationTest(IntegrationTestCase):
 
     def assert_setup_flow(self, is_team=False):
         responses.reset()
-
         access_json = {
             "user_id": "my_user_id",
             "access_token": "my_access_token",
@@ -56,7 +57,13 @@ class VercelIntegrationTest(IntegrationTestCase):
             json={"id": "webhook-id"},
         )
 
-        resp = self.client.get(u"{}?{}".format(self.setup_path, urlencode({"code": "oauth-code"}),))
+        params = {
+            "configurationId": "config_id",
+            "code": "oauth-code",
+            "next": "https://example.com",
+        }
+        self.pipeline.bind_state("user_id", self.user.id)
+        resp = self.client.get(self.setup_path, params)
 
         mock_request = responses.calls[0].request
         req_params = parse_qs(mock_request.body)
@@ -86,6 +93,9 @@ class VercelIntegrationTest(IntegrationTestCase):
         assert OrganizationIntegration.objects.get(
             integration=integration, organization=self.organization
         )
+        assert SentryAppInstallationForProvider.objects.get(
+            organization=self.organization, provider="vercel"
+        )
 
     @responses.activate
     def test_team_flow(self):
@@ -94,3 +104,17 @@ class VercelIntegrationTest(IntegrationTestCase):
     @responses.activate
     def test_user_flow(self):
         self.assert_setup_flow(is_team=False)
+
+    @responses.activate
+    def test_use_existing_installation(self):
+        sentry_app = self.create_internal_integration(
+            webhook_url=None, name="Vercel Internal Integration", organization=self.organization,
+        )
+        sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=sentry_app)
+        SentryAppInstallationForProvider.objects.create(
+            organization=self.organization,
+            provider="vercel",
+            sentry_app_installation=sentry_app_installation,
+        )
+        self.assert_setup_flow(is_team=False)
+        assert SentryAppInstallation.objects.count() == 1
diff --git a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
index c1246031af..76eaa12368 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
@@ -14,6 +14,7 @@ from sentry.models import (
     ApiToken,
     SentryAppInstallation,
     ServiceHook,
+    SentryAppInstallationForProvider,
 )
 from sentry.testutils import TestCase
 
@@ -82,6 +83,16 @@ class TestDestroyer(TestCase):
 
         assert not ApiToken.objects.filter(pk=api_token.id).exists()
 
+    @responses.activate
+    def test_deletes_installation_provider(self):
+        SentryAppInstallationForProvider.objects.create(
+            sentry_app_installation=self.install, organization=self.org, provider="vercel"
+        )
+        responses.add(responses.POST, "https://example.com/webhook")
+        self.destroyer.call()
+
+        assert not SentryAppInstallationForProvider.objects.filter()
+
     @responses.activate
     @patch("sentry.mediators.sentry_app_installations.InstallationNotifier.run")
     def test_sends_notification(self, run):
diff --git a/tests/sentry/mediators/sentry_apps/test_internal_creator.py b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
index e64bf09b3e..712e106cca 100644
--- a/tests/sentry/mediators/sentry_apps/test_internal_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_internal_creator.py
@@ -16,7 +16,6 @@ class TestInternalCreator(TestCase):
         self.creator = InternalCreator(
             name="nulldb",
             user=self.user,
-            author="Sentry",
             organization=self.org,
             scopes=("project:read",),
             webhook_url="http://example.com",
@@ -31,6 +30,7 @@ class TestInternalCreator(TestCase):
 
     def test_creates_internal_sentry_app(self):
         sentry_app = self.creator.call()
+        assert sentry_app.author == self.org.name
         assert SentryApp.objects.filter(slug=sentry_app.slug).exists()
 
     def test_installs_to_org(self):
@@ -40,6 +40,11 @@ class TestInternalCreator(TestCase):
             organization=self.org, sentry_app=sentry_app
         ).exists()
 
+    def test_author(self):
+        self.creator.kwargs["author"] = "custom"
+        sentry_app = self.creator.call()
+        assert sentry_app.author == "custom"
+
     @patch("sentry.tasks.sentry_apps.installation_webhook.delay")
     def test_does_not_notify_service(self, delay):
         self.creator.call()
diff --git a/tests/sentry/web/frontend/test_vercel_extension_configuration.py b/tests/sentry/web/frontend/test_vercel_extension_configuration.py
index 5638a7c1ce..45b8463e61 100644
--- a/tests/sentry/web/frontend/test_vercel_extension_configuration.py
+++ b/tests/sentry/web/frontend/test_vercel_extension_configuration.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 import responses
 from six.moves.urllib.parse import parse_qs
-from django.core.urlresolvers import reverse
 
 from sentry.testutils import TestCase
 from sentry.models import OrganizationMember
@@ -11,7 +10,7 @@ from sentry.models import OrganizationMember
 class VercelExtensionConfigurationTest(TestCase):
     @property
     def path(self):
-        return reverse("vercel-extension-configuration")
+        return u"/extensions/vercel/configure/"
 
     def setUp(self):
         self.user = self.create_user()
