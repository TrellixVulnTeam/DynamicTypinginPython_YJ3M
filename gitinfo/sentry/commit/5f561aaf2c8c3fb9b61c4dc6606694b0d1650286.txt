commit 5f561aaf2c8c3fb9b61c4dc6606694b0d1650286
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Nov 29 08:23:24 2018 -0800

    test(org-events): Add test for absolute date picker (#10673)
    
    ... and multiple env selector
    
    This adds a test for https://github.com/getsentry/sentry/pull/10666 and
    https://github.com/getsentry/sentry/pull/10688

diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
index 417439c0b8..4faacd6766 100644
--- a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -27,6 +27,8 @@ describe('MultipleEnvironmentSelector', function() {
   });
 
   beforeEach(function() {
+    onChange.mockReset();
+    onUpdate.mockReset();
     wrapper = mount(
       <MultipleEnvironmentSelector
         organization={organization}
@@ -76,4 +78,33 @@ describe('MultipleEnvironmentSelector', function() {
       .doUpdate();
     expect(onUpdate).toHaveBeenCalledWith();
   });
+
+  it('selects multiple environments and uses chevron to update', async function() {
+    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+
+    await wrapper
+      .find('MultipleEnvironmentSelector AutoCompleteItem MultiSelectWrapper')
+      .at(0)
+      .simulate('click');
+
+    expect(onChange).toHaveBeenLastCalledWith(['production'], expect.anything());
+
+    wrapper
+      .find('MultipleEnvironmentSelector AutoCompleteItem MultiSelectWrapper')
+      .at(1)
+      .simulate('click');
+    expect(onChange).toHaveBeenLastCalledWith(
+      ['production', 'staging'],
+      expect.anything()
+    );
+
+    wrapper.find('MultipleEnvironmentSelector StyledChevron').simulate('click');
+    expect(onUpdate).toHaveBeenCalledWith();
+  });
+
+  it('does not update when there are no changes', async function() {
+    await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector StyledChevron').simulate('click');
+    expect(onUpdate).not.toHaveBeenCalled();
+  });
 });
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index c581d17bcd..c27ce62b8b 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -269,4 +269,82 @@ describe('OrganizationEvents', function() {
       .simulate('keyDown', {key: 'Escape'});
     expect(router.push).not.toHaveBeenCalled();
   });
+
+  it('updates router when changing periods', async function() {
+    expect(wrapper.state('start')).toEqual(null);
+    expect(wrapper.state('end')).toEqual(null);
+    expect(wrapper.state('period')).toEqual('14d');
+
+    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+    expect(wrapper.find('[data-test-id="date-range"]')).toHaveLength(0);
+    wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        end: '2017-10-17T02:41:20',
+        start: '2017-10-03T02:41:20',
+        utc: 'true',
+      },
+    });
+
+    wrapper.setProps({
+      router: {
+        ...router,
+        location: {
+          pathname: '/organizations/org-slug/events/',
+          query: {
+            end: '2017-10-17T02:41:20',
+            start: '2017-10-03T02:41:20',
+            utc: 'true',
+          },
+        },
+      },
+    });
+
+    expect(wrapper.state('queryValues')).toEqual(
+      expect.objectContaining({
+        end: new Date('2017-10-17T02:41:20.000Z'),
+        start: new Date('2017-10-03T02:41:20.000Z'),
+        utc: true,
+      })
+    );
+
+    // Can switch back to relative date
+    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+    wrapper.find('SelectorItem[value="7d"]').simulate('click');
+    wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
+
+    expect(router.push).toHaveBeenCalledWith({
+      pathname: '/organizations/org-slug/events/',
+      query: {
+        statsPeriod: '7d',
+        utc: 'true',
+      },
+    });
+
+    wrapper.setProps({
+      router: {
+        ...router,
+        location: {
+          pathname: '/organizations/org-slug/events/',
+          query: {
+            statsPeriod: '7d',
+            utc: 'true',
+          },
+        },
+      },
+    });
+
+    expect(wrapper.state('queryValues')).toEqual(
+      expect.objectContaining({
+        end: null,
+        start: null,
+        period: '7d',
+        utc: true,
+      })
+    );
+  });
 });
