commit 4c10216687e08f9780ff78c48b53305d41407cb2
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Mar 11 11:18:28 2015 -0700

    Handle interface validation/rename in normalize
    
    This ensures the internal client also follows the procedures. It's a stop-gap as it now happens twice, and we need to move more logic into normalize, which will need broken out into its own helper as it'll become larger and contain most of coreapi.

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 71df6d2cc9..a348a2ec7e 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -204,3 +204,22 @@ SENTRY_RULES = (
 
 # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html + PATCH
 HTTP_METHODS = ('GET', 'POST', 'PUT', 'OPTIONS', 'HEAD', 'DELETE', 'TRACE', 'CONNECT', 'PATCH')
+
+CLIENT_RESERVED_ATTRS = (
+    'project',
+    'event_id',
+    'message',
+    'checksum',
+    'culprit',
+    'level',
+    'time_spent',
+    'logger',
+    'server_name',
+    'site',
+    'timestamp',
+    'extra',
+    'modules',
+    'tags',
+    'platform',
+    'release',
+)
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 83c782910e..d443b3940f 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -24,8 +24,9 @@ from gzip import GzipFile
 from sentry.app import env
 from sentry.cache import default_cache
 from sentry.constants import (
-    DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
-    MAX_TAG_KEY_LENGTH)
+    CLIENT_RESERVED_ATTRS, DEFAULT_LOG_LEVEL, LOG_LEVELS, MAX_TAG_VALUE_LENGTH,
+    MAX_TAG_KEY_LENGTH
+)
 from sentry.exceptions import InvalidTimestamp
 from sentry.interfaces.base import get_interface
 from sentry.models import Project, ProjectKey
@@ -40,25 +41,6 @@ logger = logging.getLogger('sentry.coreapi')
 
 LOG_LEVEL_REVERSE_MAP = dict((v, k) for k, v in LOG_LEVELS.iteritems())
 
-RESERVED_FIELDS = (
-    'project',
-    'event_id',
-    'message',
-    'checksum',
-    'culprit',
-    'level',
-    'time_spent',
-    'logger',
-    'server_name',
-    'site',
-    'timestamp',
-    'extra',
-    'modules',
-    'tags',
-    'platform',
-    'release',
-)
-
 
 class APIError(Exception):
     http_status = 400
@@ -339,7 +321,7 @@ def validate_data(project, data, client=None):
         data['tags'] = tags
 
     for k in data.keys():
-        if k in RESERVED_FIELDS:
+        if k in CLIENT_RESERVED_ATTRS:
             continue
 
         value = data.pop(k)
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 2745d0bca0..9ba42bd9d5 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -21,8 +21,10 @@ from uuid import uuid4
 
 from sentry.app import buffer, tsdb
 from sentry.constants import (
-    LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, MAX_TAG_VALUE_LENGTH
+    CLIENT_RESERVED_ATTRS, LOG_LEVELS, DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH,
+    MAX_TAG_VALUE_LENGTH
 )
+from sentry.interfaces.base import get_interface
 from sentry.models import (
     Event, EventMapping, Group, GroupHash, GroupStatus, Project
 )
@@ -140,8 +142,6 @@ class EventManager(object):
         # First we pull out our top-level (non-data attr) kwargs
         data = self.data
 
-        data['version'] = self.version
-
         if not isinstance(data.get('level'), (six.string_types, int)):
             data['level'] = logging.ERROR
         elif data['level'] not in LOG_LEVELS:
@@ -213,6 +213,26 @@ class EventManager(object):
         trim_dict(
             data['extra'], max_size=settings.SENTRY_MAX_EXTRA_VARIABLE_SIZE)
 
+        # TODO(dcramer): more of validate data needs stuffed into the manager
+        for key in data.keys():
+            if key in CLIENT_RESERVED_ATTRS:
+                continue
+
+            value = data.pop(key)
+
+            try:
+                interface = get_interface(key)()
+            except ValueError:
+                continue
+
+            try:
+                inst = interface.to_python(value)
+                data[inst.get_path()] = inst.to_json()
+            except Exception:
+                pass
+
+        data['version'] = self.version
+
         # TODO(dcramer): find a better place for this logic
         exception = data.get('sentry.interfaces.Exception')
         stacktrace = data.get('sentry.interfaces.Stacktrace')
