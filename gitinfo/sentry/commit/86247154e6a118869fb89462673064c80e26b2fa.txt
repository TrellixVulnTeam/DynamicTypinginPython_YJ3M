commit 86247154e6a118869fb89462673064c80e26b2fa
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri Mar 22 14:04:36 2019 -0700

    ref(app-platform): Allows defaults for text fields (#12462)
    
    * add textarea field and defaults

diff --git a/src/sentry/api/validators/sentry_apps/schema.py b/src/sentry/api/validators/sentry_apps/schema.py
index e67b5098c6..e358ee3183 100644
--- a/src/sentry/api/validators/sentry_apps/schema.py
+++ b/src/sentry/api/validators/sentry_apps/schema.py
@@ -36,14 +36,13 @@ SCHEMA = {
         'fieldset': {
             'type': 'array',
             'minItems': 1,
-            'items': [
-                {
-                    'anyOf': [
-                        {'$ref': '#/definitions/select'},
-                        {'$ref': '#/definitions/text'},
-                    ],
-                },
-            ],
+            'items': {
+                'anyOf': [
+                    {'$ref': '#/definitions/select'},
+                    {'$ref': '#/definitions/text'},
+                    {'$ref': '#/definitions/textarea'},
+                ],
+            },
         },
 
         # Form Components
@@ -88,6 +87,31 @@ SCHEMA = {
                 'name': {
                     'type': 'string',
                 },
+                'default': {
+                    'type': 'string',
+                    'enum': ['issue.title', 'issue.description'],
+                },
+            },
+            'required': ['type', 'label', 'name'],
+        },
+
+        'textarea': {
+            'type': 'object',
+            'properties': {
+                'type': {
+                    'type': 'string',
+                    'enum': ['textarea'],
+                },
+                'label': {
+                    'type': 'string',
+                },
+                'name': {
+                    'type': 'string',
+                },
+                'default': {
+                    'type': 'string',
+                    'enum': ['issue.title', 'issue.description'],
+                },
             },
             'required': ['type', 'label', 'name'],
         },
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx b/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
index edbd0d44df..1c6a4c471c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/openInButton.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import SentryTypes from 'app/sentryTypes';
 import Button from 'app/components/button';
-import qs from 'query-string';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import styled from 'react-emotion';
 import {t} from 'app/locale';
 
@@ -62,8 +62,7 @@ class OpenInButton extends React.Component {
       lineNo,
       filename,
     };
-    const query = qs.stringify(queryParams);
-    return components[0].schema.url + '&' + query;
+    return addQueryParamsToExistingUrl(components[0].schema.url, queryParams);
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/group/externalIssueForm.jsx b/src/sentry/static/sentry/app/components/group/externalIssueForm.jsx
index 02390cf4d8..ac1dd0c6df 100644
--- a/src/sentry/static/sentry/app/components/group/externalIssueForm.jsx
+++ b/src/sentry/static/sentry/app/components/group/externalIssueForm.jsx
@@ -4,7 +4,8 @@ import PropTypes from 'prop-types';
 import queryString from 'query-string';
 import {debounce} from 'lodash';
 
-import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import AsyncComponent from 'app/components/asyncComponent';
 import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
 import Form from 'app/views/settings/components/forms/form';
@@ -201,6 +202,29 @@ export class SentryAppExternalIssueForm extends React.Component {
     this.props.onSubmitSuccess(issue);
   };
 
+  onSubmitError = () => {
+    const appName = this.props.sentryAppInstallation.sentryApp.name;
+    addErrorMessage(t(`Unable to ${this.props.action} ${appName} issue.`));
+  };
+
+  getFieldDefault(field) {
+    const {group} = this.props;
+    if (field.type == 'textarea') {
+      field.maxRows = 10;
+      field.autosize = true;
+    }
+    switch (field.default) {
+      case 'issue.title':
+        return group.title;
+      case 'issue.description':
+        const queryParams = {referrer: this.props.sentryAppInstallation.sentryApp.name};
+        const url = addQueryParamsToExistingUrl(group.permalink, queryParams);
+        return `Sentry Issue: [${group.shortId}](${url})`;
+      default:
+        return '';
+    }
+  }
+
   render() {
     const {sentryAppInstallation} = this.props;
     const config = this.props.config[this.props.action];
@@ -216,6 +240,7 @@ export class SentryAppExternalIssueForm extends React.Component {
         apiEndpoint={`/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`}
         apiMethod="POST"
         onSubmitSuccess={this.onSubmitSuccess}
+        onSubmitError={this.onSubmitError}
         initialData={{
           action: this.props.action,
           groupId: this.props.group.id,
@@ -224,6 +249,9 @@ export class SentryAppExternalIssueForm extends React.Component {
       >
         {requiredFields.map(field => {
           field.choices = field.choices || [];
+          if (['text', 'textarea'].includes(field.type) && field.default) {
+            field.defaultValue = this.getFieldDefault(field);
+          }
 
           return (
             <FieldFromConfig
@@ -239,6 +267,9 @@ export class SentryAppExternalIssueForm extends React.Component {
 
         {optionalFields.map(field => {
           field.choices = field.choices || [];
+          if (['text', 'textarea'].includes(field.type) && field.default) {
+            field.defaultValue = this.getFieldDefault(field);
+          }
 
           return (
             <FieldFromConfig
diff --git a/src/sentry/static/sentry/app/utils/queryString.jsx b/src/sentry/static/sentry/app/utils/queryString.jsx
index 3ec84d9787..2a66be52e0 100644
--- a/src/sentry/static/sentry/app/utils/queryString.jsx
+++ b/src/sentry/static/sentry/app/utils/queryString.jsx
@@ -1,3 +1,5 @@
+import queryString from 'query-string';
+import parseurl from 'parseurl';
 // remove leading and trailing whitespace and remove double spaces
 export function formatQueryString(qs) {
   return qs.trim().replace(/\s+/g, ' ');
@@ -33,9 +35,23 @@ export function getQueryStringWithoutEnvironment(qs) {
   return formatQueryString(qs.replace(/(?:^|\s)environment:[^\s]*/g, ''));
 }
 
+export function addQueryParamsToExistingUrl(origUrl, queryParams) {
+  const url = parseurl({url: origUrl});
+  if (!url) {
+    return '';
+  }
+  // Order the query params alphabetically.
+  // Otherwise ``queryString`` orders them randomly and it's impossible to test.
+  const params = JSON.parse(JSON.stringify(queryParams));
+  const query = url.query ? {...queryString.parse(url.query), ...params} : params;
+
+  return `${url.protocol}//${url.host}${url.pathname}?${queryString.stringify(query)}`;
+}
+
 export default {
   formatQueryString,
   getQueryEnvironment,
   getQueryStringWithEnvironment,
   getQueryStringWithoutEnvironment,
+  addQueryParamsToExistingUrl,
 };
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
index f415a93b58..2028212856 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppInstallations.jsx
@@ -1,8 +1,6 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import {groupBy} from 'lodash';
-import parseurl from 'parseurl';
-import qs from 'query-string';
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import SentryApplicationRow from 'app/views/settings/organizationDeveloperSettings/sentryApplicationRow';
 import {t} from 'app/locale';
@@ -10,6 +8,7 @@ import {
   installSentryApp,
   uninstallSentryApp,
 } from 'app/actionCreators/sentryAppInstallations';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import {openSentryAppPermissionModal} from 'app/actionCreators/modal';
 import withApi from 'app/utils/withApi';
 
@@ -37,16 +36,8 @@ class SentryAppInstallations extends React.Component {
       addSuccessMessage(t(`${app.slug} successfully installed.`));
       this.setState({installs: [install, ...installs]});
     } else {
-      const url = parseurl({url: app.redirectUrl});
-      // Order the query params alphabetically.
-      // Otherwise ``qs`` orders them randomly and it's impossible to test.
-      const installQuery = JSON.parse(
-        JSON.stringify({installationId: install.uuid, code: install.code})
-      );
-      const query = {...qs.parse(url.query), ...installQuery};
-      const redirectUrl = `${url.protocol}//${url.host}${url.pathname}?${qs.stringify(
-        query
-      )}`;
+      const queryParams = {installationId: install.uuid, code: install.code};
+      const redirectUrl = addQueryParamsToExistingUrl(app.redirectUrl, queryParams);
       window.location.assign(redirectUrl);
     }
   };
diff --git a/tests/js/fixtures/sentryAppComponent.js b/tests/js/fixtures/sentryAppComponent.js
index 1923ca7008..1dfa01f189 100644
--- a/tests/js/fixtures/sentryAppComponent.js
+++ b/tests/js/fixtures/sentryAppComponent.js
@@ -3,7 +3,18 @@ export function SentryAppComponent(params = {}) {
     uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
     type: 'issue-link',
     schema: {
-      link: {required_fields: [{type: 'text', name: 'a', label: 'A'}]},
+      link: {
+        required_fields: [
+          {type: 'text', name: 'a', label: 'A', default: 'issue.title'},
+          {type: 'textarea', name: 'c', label: 'C', default: 'issue.description'},
+          {
+            type: 'select',
+            name: 'numbers',
+            label: 'Numbers',
+            options: [['one', 1], ['two', 2]],
+          },
+        ],
+      },
       create: {required_fields: [{type: 'text', name: 'b', label: 'B'}]},
     },
     sentryApp: {
diff --git a/tests/js/spec/components/events/interfaces/openInButton.spec.jsx b/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
index 025809901b..8370647a51 100644
--- a/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/openInButton.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {Client} from 'app/api';
 import {mount} from 'enzyme';
-import qs from 'query-string';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 
 import {OpenInButton} from 'app/components/events/interfaces/openInButton';
 
@@ -56,14 +56,15 @@ describe('OpenInButton', function() {
         `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${group
           .project.slug}`
       );
-      const base = `http://localhost:5000/redirection?installationId=${install.uuid}&projectSlug=${group
-        .project.slug}`;
+      const baseUrl = `http://localhost:5000/redirection`;
       const queryParams = {
+        installationId: install.uuid,
+        projectSlug: group.project.slug,
         lineNo,
         filename,
       };
-      const query = qs.stringify(queryParams);
-      expect(wrapper.find('Button').prop('href')).toEqual(base + '&' + query);
+      const url = addQueryParamsToExistingUrl(baseUrl, queryParams);
+      expect(wrapper.find('Button').prop('href')).toEqual(url);
       expect(wrapper.find('Button').text()).toEqual('Debug In Foo');
     });
   });
diff --git a/tests/js/spec/components/group/externalIssueActions.spec.jsx b/tests/js/spec/components/group/externalIssueActions.spec.jsx
index cdee2fb573..bad89a7c15 100644
--- a/tests/js/spec/components/group/externalIssueActions.spec.jsx
+++ b/tests/js/spec/components/group/externalIssueActions.spec.jsx
@@ -88,6 +88,7 @@ describe('ExternalIssueActions', function() {
 describe('SentryAppExternalIssueActions', () => {
   let group;
   let component;
+  let sentryApp;
   let install;
   let externalIssue;
   let wrapper;
@@ -95,7 +96,8 @@ describe('SentryAppExternalIssueActions', () => {
   beforeEach(() => {
     group = TestStubs.Group();
     component = TestStubs.SentryAppComponent();
-    install = TestStubs.SentryAppInstallation();
+    sentryApp = TestStubs.SentryApp();
+    install = TestStubs.SentryAppInstallation({sentryApp});
     externalIssue = TestStubs.PlatformExternalIssue({
       groupId: group.id,
       serviceType: component.sentryApp.slug,
diff --git a/tests/js/spec/components/group/externalIssueForm.spec.jsx b/tests/js/spec/components/group/externalIssueForm.spec.jsx
index 5f13ae257a..d77e74223b 100644
--- a/tests/js/spec/components/group/externalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/externalIssueForm.spec.jsx
@@ -1,18 +1,25 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import {SentryAppExternalIssueForm} from 'app/components/group/externalIssueForm';
 
 describe('SentryAppExternalIssueForm', () => {
   let wrapper;
   let group;
+  let sentryApp;
   let sentryAppInstallation;
   let component;
 
   beforeEach(() => {
-    group = TestStubs.Group();
+    group = TestStubs.Group({
+      title: 'ApiError: Broken',
+      shortId: 'SEN123',
+      permalink: 'https://sentry.io/organizations/sentry/issues/123/?project=1',
+    });
     component = TestStubs.SentryAppComponent();
-    sentryAppInstallation = TestStubs.SentryAppInstallation();
+    sentryApp = TestStubs.SentryApp();
+    sentryAppInstallation = TestStubs.SentryAppInstallation({sentryApp});
   });
 
   describe('create', () => {
@@ -48,4 +55,55 @@ describe('SentryAppExternalIssueForm', () => {
       expect(wrapper.find('Form').prop('apiMethod')).toEqual('POST');
     });
   });
+
+  describe('link', () => {
+    beforeEach(() => {
+      wrapper = mount(
+        <SentryAppExternalIssueForm
+          group={group}
+          sentryAppInstallation={sentryAppInstallation}
+          config={component.schema}
+          action="link"
+        />,
+        TestStubs.routerContext()
+      );
+    });
+
+    it('specifies the action', () => {
+      expect(wrapper.find('Form').prop('initialData').action).toEqual('link');
+    });
+
+    it('specifies the group', () => {
+      expect(wrapper.find('Form').prop('initialData').groupId).toEqual(group.id);
+    });
+
+    it('renders each required_fields field', () => {
+      component.schema.link.required_fields.forEach(field => {
+        expect(wrapper.exists(`#${field.name}`)).toBe(true);
+      });
+    });
+
+    it('renders prepopulated defaults', () => {
+      const issueTitleField = 'Input #a';
+      const issueDescriptionField = 'TextArea #c';
+      const url = addQueryParamsToExistingUrl(group.permalink, {
+        referrer: sentryApp.name,
+      });
+      const description = `Sentry Issue: [${group.shortId}](${url})`;
+
+      expect(wrapper.find(issueTitleField).prop('value')).toEqual(`${group.title}`);
+      expect(
+        wrapper
+          .find(issueDescriptionField)
+          .first()
+          .prop('value')
+      ).toEqual(description);
+    });
+
+    it('submits to the New External Issue endpoint', () => {
+      const url = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`;
+      expect(wrapper.find('Form').prop('apiEndpoint')).toEqual(url);
+      expect(wrapper.find('Form').prop('apiMethod')).toEqual('POST');
+    });
+  });
 });
diff --git a/tests/js/spec/utils/queryString.spec.js b/tests/js/spec/utils/queryString.spec.js
index cd7a36f83c..3d9a7aa6ca 100644
--- a/tests/js/spec/utils/queryString.spec.js
+++ b/tests/js/spec/utils/queryString.spec.js
@@ -97,3 +97,27 @@ describe('getQueryStringWithoutEnvironment', function() {
     );
   });
 });
+
+describe('addQueryParamsToExistingUrl', function() {
+  it('adds new query params to existing query params', function() {
+    const url = 'https://example.com?value=3';
+    const newParams = {id: 4};
+    expect(utils.addQueryParamsToExistingUrl(url, newParams)).toBe(
+      'https://example.com/?id=4&value=3'
+    );
+  });
+
+  it('adds new query params without existing query params', function() {
+    const url = 'https://example.com';
+    const newParams = {id: 4};
+    expect(utils.addQueryParamsToExistingUrl(url, newParams)).toBe(
+      'https://example.com/?id=4'
+    );
+  });
+
+  it('returns empty string no url is passed', function() {
+    let url;
+    const newParams = {id: 4};
+    expect(utils.addQueryParamsToExistingUrl(url, newParams)).toBe('');
+  });
+});
diff --git a/tests/sentry/api/validators/sentry_apps/test_text.py b/tests/sentry/api/validators/sentry_apps/test_text.py
index da51792c48..cd5364711b 100644
--- a/tests/sentry/api/validators/sentry_apps/test_text.py
+++ b/tests/sentry/api/validators/sentry_apps/test_text.py
@@ -16,6 +16,10 @@ class TestTextSchemaValidation(TestCase):
     def test_valid_schema(self):
         validate_component(self.schema)
 
+    def test_with_a_valid_default(self):
+        self.schema['default'] = 'issue.title'
+        validate_component(self.schema)
+
     @invalid_schema
     def test_missing_name(self):
         del self.schema['name']
@@ -35,3 +39,8 @@ class TestTextSchemaValidation(TestCase):
     def test_invalid_name_type(self):
         self.schema['name'] = 1
         validate_component(self.schema)
+
+    @invalid_schema
+    def test_invalid_default_option(self):
+        self.schema['default'] = 'issue.id'
+        validate_component(self.schema)
diff --git a/tests/sentry/api/validators/sentry_apps/test_textarea.py b/tests/sentry/api/validators/sentry_apps/test_textarea.py
new file mode 100644
index 0000000000..23396ac3e3
--- /dev/null
+++ b/tests/sentry/api/validators/sentry_apps/test_textarea.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+
+from .util import invalid_schema, validate_component
+
+
+class TestTextareaSchemaValidation(TestCase):
+    def setUp(self):
+        self.schema = {
+            'type': 'textarea',
+            'name': 'title',
+            'label': 'Title',
+        }
+
+    def test_valid_schema(self):
+        validate_component(self.schema)
+
+    def test_with_a_valid_default(self):
+        self.schema['default'] = 'issue.title'
+        validate_component(self.schema)
+
+    @invalid_schema
+    def test_missing_name(self):
+        del self.schema['name']
+        validate_component(self.schema)
+
+    @invalid_schema
+    def test_missing_label(self):
+        del self.schema['label']
+        validate_component(self.schema)
+
+    @invalid_schema
+    def test_invalid_label_type(self):
+        self.schema['label'] = 1
+        validate_component(self.schema)
+
+    @invalid_schema
+    def test_invalid_name_type(self):
+        self.schema['name'] = 1
+        validate_component(self.schema)
+
+    @invalid_schema
+    def test_invalid_default_option(self):
+        self.schema['default'] = 'issue.id'
+        validate_component(self.schema)
