commit 1da1cab24d59ad303c6c5e618928b1c09516c418
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Fri Nov 2 09:42:11 2018 -0700

    feat(event search): Add support for quoted strings (#10379)

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index e104b9b72a..6d8ec72f69 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -20,7 +20,9 @@ basic_filter    = search_key sep search_value
 time_filter     = "timestamp" operator date_formats
 
 search_key      = ~r"[a-z]*\.?[a-z]*"
-search_value    = ~r"\S*"
+search_value    = quoted_value / value
+value           = ~r"\S*"
+quoted_value    = ~r"\"(.*)\""s
 
 date_formats    = date_time_micro / date_time / date
 date            = ~r"\d{4}-\d{2}-\d{2}"
@@ -32,7 +34,7 @@ date_time_micro = ~r"\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{1,6}"
 # even if the operator is <=
 operator        = ">=" / "<=" / ">" / "<" / "=" / "!="
 sep             = ":"
-space           = ~r"\s"
+space           = ~r" "
 """)
 
 FIELD_LOOKUP = {
@@ -185,8 +187,14 @@ class SearchVisitor(NodeVisitor):
         return node.text
 
     def visit_search_value(self, node, children):
+        return children[0]
+
+    def visit_value(self, node, children):
         return node.text
 
+    def visit_quoted_value(self, node, children):
+        return node.match.groups()[0]
+
     def generic_visit(self, node, children):
         return children or node
 
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index 0742a6ee1f..96162b1a0f 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import datetime
 
 from django.utils import timezone
+from parsimonious.exceptions import IncompleteParseError
 
 from sentry.api.event_search import (
     convert_endpoint_params, get_snuba_query_args, parse_search_query,
@@ -97,6 +98,91 @@ class EventSearchTest(TestCase):
             ),
         ]
 
+    def test_parse_search_query_quoted_val(self):
+        assert parse_search_query('release:"a release"') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a release', type='string'),
+            ),
+        ]
+
+    def test_parse_search_query_weird_values(self):
+        # quotes within quotes
+        assert parse_search_query('release:"a"thing""') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a"thing"', type='string'),
+            ),
+        ]
+
+        # newline within quote
+        assert parse_search_query('release:"a\nrelease"') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a\nrelease', type='string')
+            ),
+        ]
+        # newline outside quote
+        with self.assertRaises(IncompleteParseError):
+            parse_search_query('release:a\nrelease')
+
+        # tab within quote
+        assert parse_search_query('release:"a\trelease"') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a\trelease', type='string')
+            ),
+        ]
+        # tab outside quote
+        assert parse_search_query('release:a\trelease') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a', type='string'),
+            ),
+            SearchFilter(
+                key=SearchKey(name='message'),
+                operator='=',
+                value=SearchValue(raw_value='\trelease', type='string')
+            ),
+        ]
+
+        # escaped quotes
+        assert parse_search_query('release:"a\"thing\""') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a"thing"', type='string')
+            ),
+        ]
+        assert parse_search_query('release:"a\"\"release"') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a""release', type='string')
+            ),
+        ]
+
+        # poorly escaped quotes
+        assert parse_search_query('release:"a release\"') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a release', type='string')
+            ),
+        ]
+        assert parse_search_query('release:\"a release "') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='=',
+                value=SearchValue(raw_value='a release ', type='string')
+            ),
+        ]
+
     def test_parse_search_query_invalid(self):
         with self.assertRaises(InvalidSearchQuery):
             parse_search_query('fruit:apple release:1.2.1')
