commit 1da08ba974c385af220fd1b912d246aaf899bacb
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Wed Feb 6 11:02:00 2019 -0600

    feat(eventstream): Add delete_tag message types and implement for Snuâ€¦ (#11903)
    
    * feat(eventstream): Add delete_tag message types and implement for Snuba tagstore backend
    
    * Add to unspported protocol handler list.
    
    * Add methods to other backends.
    
    * Move message sending to callsite.
    
    * Add note.

diff --git a/src/sentry/api/endpoints/project_tagkey_details.py b/src/sentry/api/endpoints/project_tagkey_details.py
index 44a4e412f8..ad3c01f847 100644
--- a/src/sentry/api/endpoints/project_tagkey_details.py
+++ b/src/sentry/api/endpoints/project_tagkey_details.py
@@ -41,7 +41,17 @@ class ProjectTagKeyDetailsEndpoint(ProjectEndpoint, EnvironmentMixin):
         lookup_key = tagstore.prefix_reserved_key(key)
 
         try:
+            from sentry import eventstream
+            eventstream_state = eventstream.start_delete_tag(project.id, key)
+
             deleted = tagstore.delete_tag_key(project.id, lookup_key)
+
+            # NOTE: By sending the `end_delete_tag` message here we are making
+            # the assumption that the `tagstore.delete_tag_key` does its work
+            # synchronously. As of this writing the Snuba `delete_tag_key` method
+            # is a no-op and this message itself is what causes the deletion to
+            # be done downstream.
+            eventstream.end_delete_tag(eventstream_state)
         except tagstore.TagKeyNotFound:
             raise ResourceDoesNotExist
 
diff --git a/src/sentry/eventstream/base.py b/src/sentry/eventstream/base.py
index a39ecba9df..c87fa452dc 100644
--- a/src/sentry/eventstream/base.py
+++ b/src/sentry/eventstream/base.py
@@ -64,3 +64,9 @@ class EventStream(Service):
     def relay(self, consumer_group, commit_log_topic,
               synchronize_commit_group, commit_batch_size=100, initial_offset_reset='latest'):
         raise RelayNotRequired
+
+    def start_delete_tag(self, project_id, tag):
+        pass
+
+    def end_delete_tag(self, state):
+        pass
diff --git a/src/sentry/eventstream/kafka/backend.py b/src/sentry/eventstream/kafka/backend.py
index b664b38b02..6cde145936 100644
--- a/src/sentry/eventstream/kafka/backend.py
+++ b/src/sentry/eventstream/kafka/backend.py
@@ -64,6 +64,12 @@ EVENT_PROTOCOL_VERSION = 2
 #       'hashes': [hash2, hash2]
 #       'datetime': timestamp,
 #   })
+#   Delete Tag: (2, '(start_delete_tag|end_delete_tag)', {
+#       'transaction_id': uuid,
+#       'project_id': id,
+#       'tag': 'foo',
+#       'datetime': timestamp,
+#   })
 
 
 class KafkaEventStream(EventStream):
@@ -236,6 +242,36 @@ class KafkaEventStream(EventStream):
             asynchronous=False
         )
 
+    def start_delete_tag(self, project_id, tag):
+        if not tag:
+            return
+
+        state = {
+            'transaction_id': uuid4().hex,
+            'project_id': project_id,
+            'tag': tag,
+            'datetime': datetime.now(tz=pytz.utc),
+        }
+
+        self._send(
+            project_id,
+            'start_delete_tag',
+            extra_data=(state,),
+            asynchronous=False
+        )
+
+        return state
+
+    def end_delete_tag(self, state):
+        state = state.copy()
+        state['datetime'] = datetime.now(tz=pytz.utc)
+        self._send(
+            state['project_id'],
+            'end_delete_tag',
+            extra_data=(state,),
+            asynchronous=False
+        )
+
     def relay(self, consumer_group, commit_log_topic,
               synchronize_commit_group, commit_batch_size=100, initial_offset_reset='latest'):
         logger.debug('Starting relay...')
diff --git a/src/sentry/eventstream/kafka/protocol.py b/src/sentry/eventstream/kafka/protocol.py
index 494967276f..e532600f1e 100644
--- a/src/sentry/eventstream/kafka/protocol.py
+++ b/src/sentry/eventstream/kafka/protocol.py
@@ -74,6 +74,8 @@ version_handlers = {
         'end_merge',
         'start_unmerge',
         'end_unmerge',
+        'start_delete_tag',
+        'end_delete_tag',
     ])),
 }
 
diff --git a/src/sentry/eventstream/snuba.py b/src/sentry/eventstream/snuba.py
index bf1e83b84d..6f66f6b6c4 100644
--- a/src/sentry/eventstream/snuba.py
+++ b/src/sentry/eventstream/snuba.py
@@ -42,3 +42,9 @@ class SnubaEventStream(EventStream):
 
     def end_unmerge(self, state):
         pass
+
+    def start_delete_tag(self, project_id, tag):
+        pass
+
+    def end_delete_tag(self, state):
+        pass
diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 9146c84c44..52b3ced525 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -699,7 +699,7 @@ class SnubaCompatibilityTagStorage(SnubaTagStorage):
     This is necessary since writes to Snuba occur via the event stream and an
     external writer process, instead of through this service backend. However,
     we need still to "implement" these methods (so that at least they do not
-    raise a ``NotImplementedError``, as well as providing compatibile return
+    raise a ``NotImplementedError``, as well as providing compatible return
     types when required by the call site) so that other backends that *do*
     require these methods in the application to be available can still be used.
 
@@ -735,6 +735,11 @@ class SnubaCompatibilityTagStorage(SnubaTagStorage):
         # not used.
         pass
 
+    def delete_tag_key(self, project_id, key):
+        # Called by ``ProjectTagKeyDetailsEndpoint.delete``. The return value
+        # is not used.
+        pass
+
     def incr_tag_value_times_seen(self, project_id, environment_id,
                                   key, value, extra=None, count=1):
         # Called by ``Group.add_tags``. The return value is not used.
diff --git a/tests/sentry/api/endpoints/test_project_tagkey_details.py b/tests/sentry/api/endpoints/test_project_tagkey_details.py
index 7c8d844505..99c5afbfcd 100644
--- a/tests/sentry/api/endpoints/test_project_tagkey_details.py
+++ b/tests/sentry/api/endpoints/test_project_tagkey_details.py
@@ -38,8 +38,9 @@ class ProjectTagKeyDetailsTest(APITestCase):
 
 
 class ProjectTagKeyDeleteTest(APITestCase):
+    @mock.patch('sentry.eventstream')
     @mock.patch('sentry.tagstore.tasks.delete_tag_key')
-    def test_simple(self, mock_delete_tag_key):
+    def test_simple(self, mock_delete_tag_key, mock_eventstream):
         project = self.create_project()
         tagkey = tagstore.create_tag_key(
             project_id=project.id,
@@ -48,6 +49,9 @@ class ProjectTagKeyDeleteTest(APITestCase):
 
         self.login_as(user=self.user)
 
+        eventstream_state = object()
+        mock_eventstream.start_delete_tag = mock.Mock(return_value=eventstream_state)
+
         url = reverse(
             'sentry-api-0-project-tagkey-details',
             kwargs={
@@ -75,6 +79,11 @@ class ProjectTagKeyDeleteTest(APITestCase):
             status=TagKeyStatus.PENDING_DELETION
         ).status == TagKeyStatus.PENDING_DELETION
 
+        mock_eventstream.start_delete_tag.assert_called_once_with(
+            project.id, 'foo'
+        )
+        mock_eventstream.end_delete_tag.assert_called_once_with(eventstream_state)
+
     @mock.patch('sentry.tagstore.tasks.delete_tag_key')
     def test_protected(self, mock_delete_tag_key):
         project = self.create_project()
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index cecf932d82..61e3f032c2 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -508,5 +508,4 @@ class TagStorageTest(SnubaTestCase):
             'first_seen': self.now - timedelta(seconds=2),
             'last_seen': self.now - timedelta(seconds=1),
             'times_seen': 2,
-        }
-        }
+        }}
