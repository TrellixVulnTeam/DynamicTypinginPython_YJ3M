commit 3c00225f85db4adf2f4302bd8a0a2fc2cfbb8507
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Apr 8 09:04:40 2020 +0200

    feat(ui): Add page breadcrumbs component (#18128)
    
    This PR adds page breadcrumbs component used for navigation (not to be confused with sentry's event breadcrumbs).
    
    We are using breadcrumbs in discover, performance and releases v2.
    This PR also refactors those 3 implementations to use this new reusable component and adds tests+storybook for it.

diff --git a/docs-ui/components/breadcrumbs.stories.js b/docs-ui/components/breadcrumbs.stories.js
new file mode 100644
index 0000000000..3a91eddf2b
--- /dev/null
+++ b/docs-ui/components/breadcrumbs.stories.js
@@ -0,0 +1,21 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import Breadcrumbs from 'app/components/breadcrumbs';
+
+storiesOf('UI|Breadcrumbs', module).add(
+  'default',
+  withInfo('Page breadcrumbs used for navigation')(() => {
+    return (
+      <Breadcrumbs
+        crumbs={[
+          {label: 'Test 1', to: '#'},
+          {label: 'Test 2', to: '#'},
+          {label: 'Test 3', to: '#'},
+          {label: 'Test 4', to: null},
+        ]}
+      />
+    );
+  })
+);
diff --git a/src/sentry/static/sentry/app/components/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/breadcrumbs.tsx
new file mode 100644
index 0000000000..7408a5db86
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/breadcrumbs.tsx
@@ -0,0 +1,114 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {IconChevron} from 'app/icons';
+import Link from 'app/components/links/link';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {Theme} from 'app/utils/theme';
+
+export type Crumb = {
+  /**
+   * Label of the crumb
+   */
+  label: string;
+
+  /**
+   * Link of the crumb
+   */
+  to?: React.ComponentProps<typeof Link>['to'] | null;
+
+  /**
+   * Component will try to come up with unique key, but you can provide your own
+   * (used when mapping over crumbs)
+   */
+  key?: string;
+};
+
+type Props = {
+  /**
+   * Array of crumbs that will be rendered
+   */
+  crumbs: Crumb[];
+
+  /**
+   * As a general rule of thumb we don't want the last item to be link as it most likely
+   * points to the same page we are currently on. This is by default false, so that
+   * people don't have to check if crumb is last in the array and then manually
+   * assign `to: null/undefined` when passing props to this component.
+   */
+  linkLastItem?: boolean;
+};
+
+/**
+ * Page breadcrumbs used for navigation, not to be confused with sentry's event breadcrumbs
+ */
+const Breadcrumbs = ({crumbs, linkLastItem = false}: Props) => {
+  if (crumbs.length === 0) {
+    return null;
+  }
+
+  if (!linkLastItem) {
+    crumbs[crumbs.length - 1].to = null;
+  }
+
+  return (
+    <BreadcrumbList>
+      {crumbs.map(({label, to, key}, index) => {
+        const mapKey =
+          key ?? typeof to === 'string' ? `${label}${to}` : `${label}${index}`;
+
+        return (
+          <React.Fragment key={mapKey}>
+            {to ? (
+              <BreadcrumbLink to={to}>{label}</BreadcrumbLink>
+            ) : (
+              <BreadcrumbItem>{label}</BreadcrumbItem>
+            )}
+
+            {index < crumbs.length - 1 && (
+              <BreadcrumbDividerIcon size="xs" direction="right" />
+            )}
+          </React.Fragment>
+        );
+      })}
+    </BreadcrumbList>
+  );
+};
+
+const getBreadcrumbListItemStyles = (p: {theme: Theme}) => `
+  color: ${p.theme.gray2};
+  ${overflowEllipsis};
+  width: auto;
+
+  &:last-child {
+    color: ${p.theme.gray4};
+  }
+`;
+
+const BreadcrumbList = styled('div')`
+  display: flex;
+  align-items: center;
+  padding: ${space(1)} 0;
+`;
+
+const BreadcrumbLink = styled(Link)`
+  ${getBreadcrumbListItemStyles}
+
+  &:hover,
+  &:active {
+    color: ${p => p.theme.gray3};
+  }
+`;
+
+const BreadcrumbItem = styled('span')`
+  ${getBreadcrumbListItemStyles}
+`;
+
+const BreadcrumbDividerIcon = styled(IconChevron)`
+  color: ${p => p.theme.gray2};
+  margin: 0 ${space(1)};
+  flex-shrink: 0;
+`;
+
+export default Breadcrumbs;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
index e0a1fb01f9..dc3b7b61bf 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/breadcrumb.tsx
@@ -1,13 +1,10 @@
 import React from 'react';
-import styled from '@emotion/styled';
 import {Location} from 'history';
 
 import {t} from 'app/locale';
 import {Event, Organization} from 'app/types';
-import Link from 'app/components/links/link';
-import InlineSvg from 'app/components/inlineSvg';
-import space from 'app/styles/space';
 import EventView from 'app/utils/discover/eventView';
+import Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';
 
 import {getDiscoverLandingUrl} from './utils';
 
@@ -26,10 +23,9 @@ class DiscoverBreadcrumb extends React.Component<Props> {
     event: undefined,
   };
 
-  getCrumbs(): React.ReactNode {
+  getCrumbs() {
+    const crumbs: Crumb[] = [];
     const {eventView, event, organization, location} = this.props;
-    const crumbs: React.ReactNode[] = [];
-
     const discoverTarget = organization.features.includes('discover-query')
       ? {
           pathname: getDiscoverLandingUrl(organization),
@@ -41,73 +37,30 @@ class DiscoverBreadcrumb extends React.Component<Props> {
         }
       : null;
 
-    crumbs.push(
-      <BreadcrumbItem to={discoverTarget || ''} key="eventview-home">
-        {t('Discover')}
-      </BreadcrumbItem>
-    );
+    crumbs.push({
+      to: discoverTarget,
+      label: t('Discover'),
+    });
 
     if (eventView && eventView.isValid()) {
-      const eventTarget = eventView.getResultsViewUrlTarget(organization.slug);
-      crumbs.push(
-        <span key="eventview-sep">
-          <StyledIcon src="icon-chevron-right" />
-        </span>
-      );
-
-      crumbs.push(
-        <BreadcrumbItem to={eventTarget} key="eventview-link">
-          {eventView.name}
-        </BreadcrumbItem>
-      );
+      crumbs.push({
+        to: eventView.getResultsViewUrlTarget(organization.slug),
+        label: eventView.name || '',
+      });
     }
 
     if (event) {
-      crumbs.push(
-        <span key="event-sep">
-          <StyledIcon src="icon-chevron-right" />
-        </span>
-      );
-
-      crumbs.push(
-        <BreadcrumbItem to="" key="event-name">
-          {t('Event Detail')}
-        </BreadcrumbItem>
-      );
+      crumbs.push({
+        label: t('Event Detail'),
+      });
     }
 
     return crumbs;
   }
 
   render() {
-    return <BreadcrumbList>{this.getCrumbs()}</BreadcrumbList>;
+    return <Breadcrumbs crumbs={this.getCrumbs()} />;
   }
 }
 
-const BreadcrumbList = styled('span')`
-  display: flex;
-  align-items: center;
-  height: 40px;
-`;
-
-const BreadcrumbItem = styled(Link)`
-  color: ${p => p.theme.gray2};
-
-  &:nth-last-child(2) {
-    color: ${p => p.theme.gray4};
-  }
-
-  &:hover,
-  &:active {
-    color: ${p => p.theme.gray3};
-  }
-`;
-
-const StyledIcon = styled(InlineSvg)`
-  color: inherit;
-  height: 12px;
-  width: 12px;
-  margin: 0 ${space(1)} ${space(0.5)} ${space(1)};
-`;
-
 export default DiscoverBreadcrumb;
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
index 5a73501358..5136a575aa 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/breadcrumb.tsx
@@ -1,13 +1,10 @@
 import React from 'react';
 import {Location} from 'history';
-import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import {Organization} from 'app/types';
-import Link from 'app/components/links/link';
-import InlineSvg from 'app/components/inlineSvg';
-import space from 'app/styles/space';
 import EventView from 'app/utils/discover/eventView';
+import Breadcrumbs, {Crumb} from 'app/components/breadcrumbs';
 
 import {getPerformanceLandingUrl} from '../utils';
 import {transactionSummaryRouteWithEventView} from './utils';
@@ -20,9 +17,9 @@ type Props = {
 };
 
 class Breadcrumb extends React.Component<Props> {
-  getCrumbs(): React.ReactNode {
+  getCrumbs() {
+    const crumbs: Crumb[] = [];
     const {eventView, organization, location, transactionName} = this.props;
-    const crumbs: React.ReactNode[] = [];
 
     const performanceTarget = {
       pathname: getPerformanceLandingUrl(organization),
@@ -35,11 +32,10 @@ class Breadcrumb extends React.Component<Props> {
       },
     };
 
-    crumbs.push(
-      <BreadcrumbItem to={performanceTarget} key="performance-landing">
-        {t('Performance')}
-      </BreadcrumbItem>
-    );
+    crumbs.push({
+      to: performanceTarget,
+      label: t('Performance'),
+    });
 
     const summaryTarget = transactionSummaryRouteWithEventView({
       orgSlug: organization.slug,
@@ -47,50 +43,17 @@ class Breadcrumb extends React.Component<Props> {
       projectID: eventView.project.map(id => String(id)),
     });
 
-    crumbs.push(
-      <span key="breadcrumb-sep">
-        <StyledIcon src="icon-chevron-right" />
-      </span>
-    );
-
-    crumbs.push(
-      <BreadcrumbItem to={summaryTarget} key="summary-link">
-        {t('Transaction Summary')}
-      </BreadcrumbItem>
-    );
+    crumbs.push({
+      to: summaryTarget,
+      label: t('Transaction Summary'),
+    });
 
     return crumbs;
   }
 
   render() {
-    return <BreadcrumbList>{this.getCrumbs()}</BreadcrumbList>;
+    return <Breadcrumbs crumbs={this.getCrumbs()} />;
   }
 }
 
-const BreadcrumbList = styled('span')`
-  display: flex;
-  align-items: center;
-  height: 40px;
-`;
-
-const BreadcrumbItem = styled(Link)`
-  color: ${p => p.theme.gray2};
-
-  &:nth-last-child(2) {
-    color: ${p => p.theme.gray4};
-  }
-
-  &:hover,
-  &:active {
-    color: ${p => p.theme.gray3};
-  }
-`;
-
-const StyledIcon = styled(InlineSvg)`
-  color: inherit;
-  height: 12px;
-  width: 12px;
-  margin: 0 ${space(1)} ${space(0.5)} ${space(1)};
-`;
-
 export default Breadcrumb;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx
deleted file mode 100644
index d056389cbb..0000000000
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/breadcrumbs.tsx
+++ /dev/null
@@ -1,54 +0,0 @@
-// TODO(matej): this could be moved to components to be reused in the future (also discover has something similar)
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Link from 'app/components/links/link';
-import {IconChevron} from 'app/icons';
-import space from 'app/styles/space';
-
-type Crumb = {
-  label: string;
-  to?: string;
-};
-
-type Props = {
-  crumbs: Crumb[];
-};
-
-const Breadcrumbs = ({crumbs}: Props) => (
-  <BreadcrumbList>
-    {crumbs.map((crumb, index) => (
-      <React.Fragment key={crumb.label}>
-        <BreadcrumbItem to={crumb.to || ''}>{crumb.label}</BreadcrumbItem>
-        {index < crumbs.length - 1 && <StyledIcon size="xs" direction="right" />}
-      </React.Fragment>
-    ))}
-  </BreadcrumbList>
-);
-
-export default Breadcrumbs;
-
-const BreadcrumbList = styled('span')`
-  display: flex;
-  align-items: center;
-  height: 40px;
-`;
-
-const BreadcrumbItem = styled(Link)`
-  color: ${p => p.theme.gray2};
-
-  &:last-child {
-    color: ${p => p.theme.gray4};
-    pointer-events: none;
-  }
-
-  &:hover,
-  &:active {
-    color: ${p => p.theme.gray3};
-  }
-`;
-
-const StyledIcon = styled(IconChevron)`
-  color: ${p => p.theme.gray2};
-  margin: 0 ${space(1)} ${space(0.25)} ${space(1)};
-`;
diff --git a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx
index 5dd36cb82a..9555e56072 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/detail/releaseHeader.tsx
@@ -17,9 +17,9 @@ import Badge from 'app/components/badge';
 import Count from 'app/components/count';
 import TimeSince from 'app/components/timeSince';
 import {formatVersion} from 'app/utils/formatters';
+import Breadcrumbs from 'app/components/breadcrumbs';
 
 import ReleaseStat from './releaseStat';
-import Breadcrumbs from './breadcrumbs';
 import ReleaseActions from './releaseActions';
 
 type Props = {
@@ -51,8 +51,8 @@ const ReleaseHeader = ({location, orgId, release, deploys, project}: Props) => {
         <Breadcrumbs
           crumbs={[
             {
-              label: t('Releases'),
               to: `/organizations/${orgId}/releases-v2/`,
+              label: t('Releases'),
             },
             {label: formatVersion(version)},
           ]}
diff --git a/tests/js/spec/components/breadcrumbs.spec.jsx b/tests/js/spec/components/breadcrumbs.spec.jsx
new file mode 100644
index 0000000000..94cddfbadb
--- /dev/null
+++ b/tests/js/spec/components/breadcrumbs.spec.jsx
@@ -0,0 +1,63 @@
+import React from 'react';
+
+import {shallow} from 'sentry-test/enzyme';
+import Breadcrumbs from 'app/components/breadcrumbs';
+
+describe('Breadcrumbs', () => {
+  const wrapper = shallow(
+    <Breadcrumbs
+      crumbs={[
+        {
+          label: 'Test 1',
+          to: '/test1',
+        },
+        {
+          label: 'Test 2',
+          to: '/test2',
+        },
+        {
+          label: 'Test 3',
+          to: null,
+        },
+      ]}
+    />
+  );
+
+  it('returns null when 0 crumbs', () => {
+    const empty = shallow(<Breadcrumbs crumbs={[]} />);
+
+    expect(empty.html()).toBeNull();
+  });
+
+  it('generates correct links', () => {
+    const allElements = wrapper.find('BreadcrumbList').children();
+    const links = wrapper.find('BreadcrumbLink');
+
+    expect(links.length).toBe(2);
+    expect(allElements.at(0).props().to).toBe('/test1');
+    expect(allElements.at(0).props().children).toBe('Test 1');
+    expect(allElements.at(2).props().to).toBe('/test2');
+    expect(allElements.at(2).props().children).toBe('Test 2');
+  });
+
+  it('does not make links where no `to` is provided', () => {
+    const allElements = wrapper.find('BreadcrumbList').children();
+    const notLink = wrapper.find('BreadcrumbItem');
+
+    expect(notLink.length).toBe(1);
+
+    expect(allElements.at(4).props().to).toBeUndefined();
+    expect(allElements.at(4).props().children).toBe('Test 3');
+  });
+
+  it('separates crumbs with icon', () => {
+    const allElements = wrapper.find('BreadcrumbList').children();
+    const dividers = wrapper.find('BreadcrumbDividerIcon');
+
+    expect(dividers.length).toBe(2);
+
+    expect(allElements.at(1).is('BreadcrumbDividerIcon')).toBeTruthy();
+    expect(allElements.at(3).is('BreadcrumbDividerIcon')).toBeTruthy();
+    expect(allElements.at(5).exists()).toBeFalsy();
+  });
+});
