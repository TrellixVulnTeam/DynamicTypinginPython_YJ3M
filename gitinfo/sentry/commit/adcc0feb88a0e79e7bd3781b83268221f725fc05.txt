commit adcc0feb88a0e79e7bd3781b83268221f725fc05
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 22 17:52:22 2015 -0700

    Add event attribute rule condition

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 9c40f7789f..9e83a41b82 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -200,6 +200,7 @@ SENTRY_RULES = (
     'sentry.rules.conditions.regression_event.RegressionEventCondition',
     'sentry.rules.conditions.tagged_event.TaggedEventCondition',
     'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
+    'sentry.rules.conditions.event_attribute.EventAttributeCondition',
 )
 
 # methods as defined by http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html + PATCH
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
new file mode 100644
index 0000000000..a835fb6a43
--- /dev/null
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -0,0 +1,242 @@
+"""
+sentry.rules.conditions.tagged_event
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import json
+
+from collections import OrderedDict
+from django import forms
+
+from sentry.rules.conditions.base import EventCondition
+
+
+class MatchType(object):
+    EQUAL = 'eq'
+    NOT_EQUAL = 'ne'
+    STARTS_WITH = 'sw'
+    ENDS_WITH = 'ew'
+    CONTAINS = 'co'
+    NOT_CONTAINS = 'nc'
+    IS_SET = 'is'
+    NOT_SET = 'ns'
+
+
+MATCH_CHOICES = OrderedDict([
+    (MatchType.EQUAL, 'equals'),
+    (MatchType.NOT_EQUAL, 'does not equal'),
+    (MatchType.STARTS_WITH, 'starts with'),
+    (MatchType.ENDS_WITH, 'ends with'),
+    (MatchType.CONTAINS, 'contains'),
+    (MatchType.NOT_CONTAINS, 'does not contain'),
+    (MatchType.IS_SET, 'is set'),
+    (MatchType.NOT_SET, 'is not set'),
+])
+
+ATTR_CHOICES = [
+    'message',
+    'platform',
+    'exception.type',
+    'exception.value',
+    'user.id',
+    'user.ip_address',
+    'user.email',
+    'http.method',
+    'http.url',
+    'stacktrace.code',
+    'stacktrace.module',
+    'stacktrace.filename',
+]
+
+
+class FixedTypeaheadInput(forms.TextInput):
+    def __init__(self, choices, *args, **kwargs):
+        super(FixedTypeaheadInput, self).__init__(*args, **kwargs)
+        self.attrs['data-choices'] = json.dumps(choices)
+        self.attrs['class'] = self.attrs.get('class', '') + ' typeahead'
+
+
+class EventAttributeForm(forms.Form):
+    attribute = forms.CharField(widget=FixedTypeaheadInput(
+        attrs={'style': 'width:200px', 'placeholder': 'i.e. exception.type'},
+        choices=[{'id': a, 'text': a} for a in ATTR_CHOICES],
+    ))
+    match = forms.ChoiceField(MATCH_CHOICES.items(), widget=forms.Select(
+        attrs={'style': 'width:150px'},
+    ))
+    value = forms.CharField(widget=forms.TextInput(
+        attrs={'placeholder': 'value'},
+    ), required=False)
+
+
+class EventAttributeCondition(EventCondition):
+    """
+    Attributes are a mapping of <logical-key>.<property>.
+
+    For example:
+
+    - message
+    - platform
+    - exception.{type,value}
+    - user.{id,ip_address,email,FIELD}
+    - http.{method,url}
+    - stacktrace.{code,module,filename}
+    - extra.{FIELD}
+    """
+    # TODO(dcramer): add support for stacktrace.vars.[name]
+
+    form_cls = EventAttributeForm
+    label = 'An events {attribute} value {match} {value}'
+
+    def _get_attribute_values(self, event, attr):
+        # TODO(dcramer): we should validate attributes (when we can) before
+
+        path = attr.split('.')
+
+        if path[0] in ('message', 'platform'):
+            if len(path) != 1:
+                return []
+            return [getattr(event, path[0])]
+
+        elif len(path) == 1:
+            return []
+
+        elif path[0] == 'extra':
+            path.pop(0)
+            value = event.data['extra']
+            while path:
+                bit = path.pop(0)
+                value = value.get(bit)
+                if not value:
+                    return []
+
+            if isinstance(value, (list, tuple)):
+                return value
+            return [value]
+
+        elif len(path) != 2:
+            return []
+
+        elif path[0] == 'exception':
+            if path[1] not in ('type', 'value'):
+                return []
+
+            return [
+                getattr(e, path[1])
+                for e in event.interfaces['sentry.interfaces.Exception'].values
+            ]
+
+        elif path[0] == 'user':
+            if path[1] in ('id', 'ip_address', 'email', 'username'):
+                return [
+                    getattr(event.interfaces['sentry.interfaces.User'], path[1])
+                ]
+            return [
+                getattr(event.interfaces['sentry.interfaces.User'].data, path[1])
+            ]
+
+        elif path[0] == 'http':
+            if path[1] not in ('url', 'method'):
+                return []
+
+            return [
+                getattr(event.interfaces['sentry.interfaces.Http'], path[1])
+            ]
+
+        elif path[0] == 'stacktrace':
+            stacks = event.interfaces.get('sentry.interfaces.Stacktrace')
+            if stacks:
+                stacks = [stacks]
+            else:
+                stacks = [
+                    e.stacktrace
+                    for e in event.interfaces['sentry.interfaces.Exception'].values
+                ]
+
+            result = []
+            for st in stacks:
+                for frame in st.frames:
+                    if path[1] in ('filename', 'module'):
+                        result.append(getattr(frame, path[1]))
+                    elif path[1] == 'code':
+                        if frame.pre_context:
+                            result.extend(frame.pre_context)
+                        if frame.context_line:
+                            result.append(frame.context_line)
+                        if frame.post_context:
+                            result.extend(frame.post_context)
+            return result
+        return []
+
+    def render_label(self):
+        data = {
+            'attribute': self.data['attribute'],
+            'value': self.data['value'],
+            'match': MATCH_CHOICES[self.data['match']],
+        }
+        return self.label.format(**data)
+
+    def passes(self, event, state, **kwargs):
+        attr = self.get_option('attribute')
+        match = self.get_option('match')
+        value = self.get_option('value')
+
+        if not (attr and match and value):
+            return False
+
+        value = value.lower()
+        attr = attr.lower()
+
+        try:
+            attribute_values = self._get_attribute_values(event, attr)
+        except KeyError:
+            attribute_values = []
+
+        attribute_values = [v.lower() for v in attribute_values]
+
+        if match == MatchType.EQUAL:
+            for a_value in attribute_values:
+                if a_value == value:
+                    return True
+            return False
+
+        elif match == MatchType.NOT_EQUAL:
+            for a_value in attribute_values:
+                if a_value == value:
+                    return False
+            return True
+
+        elif match == MatchType.STARTS_WITH:
+            for a_value in attribute_values:
+                if a_value.startswith(value):
+                    return True
+            return False
+
+        elif match == MatchType.ENDS_WITH:
+            for a_value in attribute_values:
+                if a_value.endswith(value):
+                    return True
+            return False
+
+        elif match == MatchType.CONTAINS:
+            for a_value in attribute_values:
+                if value in a_value:
+                    return True
+            return False
+
+        elif match == MatchType.NOT_CONTAINS:
+            for a_value in attribute_values:
+                if value in a_value:
+                    return False
+            return True
+
+        elif match == MatchType.IS_SET:
+            return bool(attribute_values)
+
+        elif match == MatchType.NOT_SET:
+            return not attribute_values
diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index c6180463fc..0aabcf0ce4 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -35,7 +35,9 @@ MATCH_CHOICES = OrderedDict([
 
 class TaggedEventForm(forms.Form):
     key = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'key'}))
-    match = forms.ChoiceField(choices=MATCH_CHOICES.items())
+    match = forms.ChoiceField(MATCH_CHOICES.items(), widget=forms.Select(
+        attrs={'style': 'width:150px'},
+    ))
     value = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'value'}))
 
 
diff --git a/src/sentry/static/sentry/less/select2.less b/src/sentry/static/sentry/less/select2.less
index 862d9a0f6c..d014db5432 100644
--- a/src/sentry/static/sentry/less/select2.less
+++ b/src/sentry/static/sentry/less/select2.less
@@ -182,6 +182,7 @@
 
 .select2-drop.select2-drop-above .select2-search input{
     margin-top:4px;
+    max-width: 100%;
 }
 
 .select2-search input.select2-active {
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index 9782a61964..35b5077323 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -703,10 +703,16 @@
             this.condition_sel.select2(select2_options);
 
             this.action_sel.change(_.bind(function(){
-                this.addAction(this.action_sel.val());
+                var val = this.action_sel.val();
+                if (val) {
+                    this.addAction(val);
+                }
             }, this));
             this.condition_sel.change(_.bind(function(){
-                this.addCondition(this.condition_sel.val());
+                var val = this.condition_sel.val();
+                if (val) {
+                    this.addCondition(val);
+                }
             }, this));
 
             this.parseFormData(data.form_data, data.form_errors);
@@ -748,15 +754,14 @@
             }, this));
         },
 
-        addCondition: function(id, options, has_errors) {
-            var node = this.conditions_by_id[id],
-                row = $('<tr></tr>'),
+        addInputRow: function(container, prefix, node, options, has_errors) {
+            var row = $('<tr></tr>'),
                 remove_btn = $('<button class="btn btn-small">Remove</button>'),
-                num = this.condition_table_body.find('tr').length,
+                num = container.find('tr').length,
                 html = $('<div>' + node.html + '</div>'),
-                prefix = 'condition[' + num + ']',
                 id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
 
+            prefix = prefix + '[' + num + ']';
             has_errors = has_errors || false;
             options = options || {};
 
@@ -764,21 +769,6 @@
                 row.addClass('error');
             }
 
-            html.find('select').each(function(){
-                var $this = $(this),
-                    options = {
-                        width: 'element',
-                        allowClear: false,
-                        minimumResultsForSearch: 10
-                    };
-
-                if ($this.attr('data-allowClear')) {
-                    options.allowClear = $this.attr('data-allowClear');
-                }
-
-                $this.select2(options);
-            });
-
             // we need to update the id of all form elements
             html.find('input, select, textarea').each(function(_, el){
                 var $el = $(el),
@@ -786,34 +776,22 @@
                 $el.attr('name', prefix + '[' + name + ']');
                 $el.val(options[name] || '');
             });
-            row.append($('<td></td>').append(html).append(id_field));
-            row.append($('<td></td>').append(remove_btn));
-            row.appendTo(this.condition_table_body);
-
-            remove_btn.click(function(){
-                row.remove();
-                return false;
-            });
-
-            this.condition_sel.data("select2").clear();
-            this.condition_table.show();
-        },
-
-        addAction: function(id, options, has_errors) {
-            var node = this.actions_by_id[id],
-                row = $('<tr></tr>'),
-                remove_btn = $('<button class="btn btn-small">Remove</button>'),
-                num = this.action_table_body.find('tr').length,
-                html = $('<div>' + node.html + '</div>'),
-                prefix = 'action[' + num + ']',
-                id_field = $('<input type="hidden" name="' + prefix + '[id]" value="' + node.id + '">');
 
-            has_errors = has_errors || false;
-            options = options || {};
+            html.find('input.typeahead').each(function(){
+                var $this = $(this),
+                    options = {
+                        initSelection: function(el, callback) {
+                            var $el = $(el);
+                            callback({id: $el.val(), text: $el.val()});
+                        },
+                        data: $this.data('choices'),
+                        createSearchChoice: function(term) {
+                            return {id: $.trim(term), text: $.trim(term)};
+                        }
+                    };
 
-            if (has_errors) {
-                row.addClass('error');
-            }
+                $this.select2(options);
+            });
 
             html.find('select').each(function(){
                 var $this = $(this),
@@ -823,28 +801,34 @@
                         minimumResultsForSearch: 10
                     };
 
-                if ($this.attr('data-allowClear')) {
-                    options.allowClear = $this.attr('data-allowClear');
+                if ($this.data('allow-clear')) {
+                    options.allowClear = $this.data('allow-clear');
                 }
 
                 $this.select2(options);
             });
 
-            // we need to update the id of all form elements
-            html.find('input, select, textarea').each(function(_, el){
-                var $el = $(el),
-                    name = $el.attr('name');
-                $el.attr('name', prefix + '[' + name + ']');
-                $el.val(options[name] || '');
-            });
             row.append($('<td></td>').append(html).append(id_field));
             row.append($('<td></td>').append(remove_btn));
-            row.appendTo(this.action_table_body);
+            row.appendTo(container);
 
             remove_btn.click(function(){
                 row.remove();
                 return false;
             });
+        },
+
+        addCondition: function(id, options, has_errors) {
+            this.addInputRow(this.condition_table_body, 'condition',
+                             this.conditions_by_id[id], options, has_errors);
+
+            this.condition_sel.data("select2").clear();
+            this.condition_table.show();
+        },
+
+        addAction: function(id, options, has_errors) {
+            this.addInputRow(this.action_table_body, 'action',
+                             this.actions_by_id[id], options, has_errors);
 
             this.action_sel.data("select2").clear();
             this.action_table.show();
diff --git a/src/sentry/templates/sentry/projects/rules/new.html b/src/sentry/templates/sentry/projects/rules/new.html
index d2d2a035f3..a291f0e155 100644
--- a/src/sentry/templates/sentry/projects/rules/new.html
+++ b/src/sentry/templates/sentry/projects/rules/new.html
@@ -5,6 +5,12 @@
 {% load sentry_helpers %}
 
 {% block inner %}
+    <style>
+    .rule-form input[type=text] {
+        width: auto;
+    }
+    </style>
+
     <div class="page-header">
         <h2>
             {% if rule.id %}
@@ -16,7 +22,7 @@
         </h2>
     </div>
     <div id="new-rule-form">
-        <form method="POST" action="">
+        <form method="POST" action="" class="rule-form">
             {% csrf_token %}
 
             {% if not form_is_valid %}
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
new file mode 100644
index 0000000000..90b21597a7
--- /dev/null
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -0,0 +1,389 @@
+from __future__ import absolute_import
+
+from sentry.testutils.cases import RuleTestCase
+from sentry.rules.conditions.event_attribute import (
+    EventAttributeCondition, MatchType
+)
+
+
+class EventAttributeConditionTest(RuleTestCase):
+    rule_cls = EventAttributeCondition
+
+    def get_event(self):
+        event = self.create_event(
+            message='hello world',
+            platform='php',
+            data={
+                'sentry.interfaces.Http': {
+                    'method': 'GET',
+                    'url': 'http://example.com',
+                },
+                'sentry.interfaces.User': {
+                    'id': '1',
+                    'ip_address': '127.0.0.1',
+                    'email': 'foo@example.com',
+                    'username': 'foo',
+                },
+                'sentry.interfaces.Exception': {
+                    'values': [
+                        {
+                            'type': 'SyntaxError',
+                            'value': 'hello world',
+                            'stacktrace': {
+                                'frames': [
+                                    {
+                                        'filename': 'example.php',
+                                        'module': 'example',
+                                        'context_line': 'echo "hello";',
+                                    }
+                                ]
+                            }
+                        },
+                    ],
+                },
+                'extra': {
+                    'foo': {
+                        'bar': 'baz',
+                    },
+                    'biz': ['baz'],
+                    'bar': 'foo',
+                }
+            },
+        )
+        return event
+
+    def test_equals(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'platform',
+            'value': 'php',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'platform',
+            'value': 'python',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_does_not_equal(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.NOT_EQUAL,
+            'attribute': 'platform',
+            'value': 'php',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.NOT_EQUAL,
+            'attribute': 'platform',
+            'value': 'python',
+        })
+        self.assertPasses(rule, event)
+
+    def test_starts_with(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.STARTS_WITH,
+            'attribute': 'platform',
+            'value': 'ph',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.STARTS_WITH,
+            'attribute': 'platform',
+            'value': 'py',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_ends_with(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.ENDS_WITH,
+            'attribute': 'platform',
+            'value': 'hp',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.ENDS_WITH,
+            'attribute': 'platform',
+            'value': 'thon',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_contains(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.CONTAINS,
+            'attribute': 'platform',
+            'value': 'p',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.CONTAINS,
+            'attribute': 'platform',
+            'value': 'z',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_does_not_contain(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.NOT_CONTAINS,
+            'attribute': 'platform',
+            'value': 'p',
+        })
+        self.assertDoesNotPass(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.NOT_CONTAINS,
+            'attribute': 'platform',
+            'value': 'z',
+        })
+        self.assertPasses(rule, event)
+
+    def test_message(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'message',
+            'value': 'hello world',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'message',
+            'value': 'php',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_http_method(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'http.method',
+            'value': 'get',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'http.method',
+            'value': 'post',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_http_url(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'http.url',
+            'value': 'http://example.com',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'http.url',
+            'value': 'http://foo.com',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_user_id(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.id',
+            'value': '1',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.id',
+            'value': '2',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_user_ip_address(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.ip_address',
+            'value': '127.0.0.1',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.ip_address',
+            'value': '2',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_user_email(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.email',
+            'value': 'foo@example.com',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.email',
+            'value': '2',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_user_username(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.username',
+            'value': 'foo',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'user.username',
+            'value': '2',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_exception_type(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'exception.type',
+            'value': 'SyntaxError',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'exception.type',
+            'value': 'TypeError',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_exception_value(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'exception.value',
+            'value': 'hello world',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'exception.value',
+            'value': 'foo bar',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_stacktrace_filename(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.filename',
+            'value': 'example.php',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.filename',
+            'value': 'foo.php',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_stacktrace_module(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.module',
+            'value': 'example',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.module',
+            'value': 'foo',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_stacktrace_code(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.code',
+            'value': 'echo "hello";',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'stacktrace.code',
+            'value': 'foo',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_extra_simple_value(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.bar',
+            'value': 'foo',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.bar',
+            'value': 'bar',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_extra_nested_value(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.foo.bar',
+            'value': 'baz',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.foo.bar',
+            'value': 'bar',
+        })
+        self.assertDoesNotPass(rule, event)
+
+    def test_extra_nested_list(self):
+        event = self.get_event()
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.biz',
+            'value': 'baz',
+        })
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule({
+            'match': MatchType.EQUAL,
+            'attribute': 'extra.biz',
+            'value': 'bar',
+        })
+        self.assertDoesNotPass(rule, event)
