commit dba6928451410c3f057667c96d36d61493f0eed2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 25 23:26:23 2016 -0700

    Hide member bound issues if project is pending removal

diff --git a/src/sentry/api/bases/organizationissues.py b/src/sentry/api/bases/organizationissues.py
index 1f687ace1e..7c7653077c 100644
--- a/src/sentry/api/bases/organizationissues.py
+++ b/src/sentry/api/bases/organizationissues.py
@@ -4,7 +4,9 @@ from rest_framework.response import Response
 
 from sentry.api.serializers import serialize, StreamGroupSerializer
 from sentry.api.paginator import OffsetPaginator
-from sentry.models import Group, GroupStatus, OrganizationMemberTeam, Project
+from sentry.models import (
+    Group, GroupStatus, OrganizationMemberTeam, Project, ProjectStatus
+)
 
 from .organizationmember import OrganizationMemberEndpoint
 
@@ -46,6 +48,11 @@ class OrganizationIssuesEndpoint(OrganizationMemberEndpoint):
         elif status:
             return Response({'status': 'Invalid status choice'}, status=400)
 
+        # hide issues if the project is pending removal
+        queryset = queryset.filter(
+            project__status=ProjectStatus.VISIBLE,
+        )
+
         return self.paginate(
             request=request,
             queryset=queryset,
diff --git a/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
new file mode 100644
index 0000000000..7077022fe2
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_member_issues_assigned.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import GroupAssignee, ProjectStatus
+from sentry.testutils import APITestCase
+
+
+class OrganizationMemberIssuesAssignedTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user('foo@example.com')
+        org = self.create_organization(name='foo')
+        team = self.create_team(name='foo', organization=org)
+        self.create_member(
+            organization=org,
+            user=user,
+            role='admin',
+            teams=[team],
+        )
+        project1 = self.create_project(name='foo', organization=org, team=team)
+        group1 = self.create_group(project=project1)
+        group2 = self.create_group(project=project1)
+        project2 = self.create_project(name='bar', organization=org, team=team,
+                                       status=ProjectStatus.PENDING_DELETION)
+        group3 = self.create_group(project=project2)
+        GroupAssignee.objects.create(
+            group=group1,
+            project=project1,
+            user=user,
+        )
+        GroupAssignee.objects.create(
+            group=group2,
+            project=project1,
+            user=user,
+        )
+        # should not show up as project is pending removal
+        GroupAssignee.objects.create(
+            group=group3,
+            project=project2,
+            user=user,
+        )
+
+        path = reverse('sentry-api-0-organization-member-issues-assigned', args=[org.slug, 'me'])
+
+        self.login_as(user)
+
+        resp = self.client.get(path)
+
+        assert resp.status_code == 200
+        assert len(resp.data) == 2
+        assert resp.data[0]['id'] == str(group2.id)
+        assert resp.data[1]['id'] == str(group1.id)
