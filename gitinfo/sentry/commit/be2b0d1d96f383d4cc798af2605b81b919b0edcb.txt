commit be2b0d1d96f383d4cc798af2605b81b919b0edcb
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 9 13:40:41 2017 +0100

    Move <unknown> into a constant

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 0e566c289c..6de35f1385 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -217,6 +217,8 @@ KNOWN_DSYM_TYPES = {
     'application/x-mach-binary': 'macho'
 }
 
+NATIVE_UNKNOWN_STRING = '<unknown>'
+
 
 class ObjectStatus(object):
     VISIBLE = 0
diff --git a/src/sentry/lang/native/applecrashreport.py b/src/sentry/lang/native/applecrashreport.py
index c811211e2a..8274f299ef 100644
--- a/src/sentry/lang/native/applecrashreport.py
+++ b/src/sentry/lang/native/applecrashreport.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from sentry.utils.compat import implements_to_string
 from sentry.utils.native import parse_addr
+from sentry.constants import NATIVE_UNKNOWN_STRING
 
 REPORT_VERSION = '104'
 
@@ -135,7 +136,8 @@ class AppleCrashReport(object):
         image_addr = slide_value + parse_addr(frame.get('image_addr'))
         offset = ''
         if frame.get('image_addr') is not None and \
-           (not self.symbolicated or (frame.get('function') or '<unknown>') == '<unknown>'):
+           (not self.symbolicated or (
+                frame.get('function') or NATIVE_UNKNOWN_STRING) == NATIVE_UNKNOWN_STRING):
             offset = ' + %s' % (
                 instruction_addr - slide_value - parse_addr(
                     frame.get('symbol_addr'))
@@ -145,16 +147,16 @@ class AppleCrashReport(object):
             file = ''
             if frame.get('filename') and frame.get('lineno'):
                 file = ' (%s:%s)' % (
-                    frame.get('filename') or '<unknown>',
+                    frame.get('filename') or NATIVE_UNKNOWN_STRING,
                     frame['lineno']
                 )
             symbol = '%s%s' % (
-                frame.get('function') or '<unknown>',
+                frame.get('function') or NATIVE_UNKNOWN_STRING,
                 file
             )
         return '%s%s%s%s%s' % (
             str(number).ljust(4, ' '),
-            (frame.get('package') or '<unknown>').rsplit('/', 1)[-1].ljust(32, ' '),
+            (frame.get('package') or NATIVE_UNKNOWN_STRING).rsplit('/', 1)[-1].ljust(32, ' '),
             hex(instruction_addr).ljust(20, ' '),
             symbol,
             offset
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index be32470076..ff36a22e82 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -18,6 +18,7 @@ from sentry.lang.native.utils import \
     APPLE_SDK_MAPPING
 from sentry.utils.native import parse_addr
 from sentry.stacktraces import StacktraceProcessor
+from sentry.constants import NATIVE_UNKNOWN_STRING
 
 
 logger = logging.getLogger(__name__)
@@ -167,7 +168,7 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
         # We only record the offset if we found a symbol but we did not
         # find a line number.  In that case it's the offset in bytes from
         # the beginning of the symbol.
-        function = frame.get('symbol_name') or '<unknown>'
+        function = frame.get('symbol_name') or NATIVE_UNKNOWN_STRING
         lineno = frame.get('line')
         offset = None
         if not lineno:
@@ -423,7 +424,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                              exc_info=True)
         else:
             symbol = sfrm.get('symbol_name') or \
-                new_frame.get('function') or '<unknown>'
+                new_frame.get('function') or NATIVE_UNKNOWN_STRING
             function = demangle_symbol(symbol, simplified=True)
 
             new_frame['function'] = function
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index d2d005efc9..224d936c56 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -11,7 +11,7 @@ from sentry.lang.native.dsymcache import dsymcache
 from sentry.utils.safe import trim
 from sentry.utils.compat import implements_to_string
 from sentry.models import DSymSymbol, EventError
-from sentry.constants import MAX_SYM
+from sentry.constants import MAX_SYM, NATIVE_UNKNOWN_STRING
 
 
 USER_FIXABLE_ERRORS = (
@@ -36,7 +36,7 @@ SIM_APP_PATH = '/Containers/Bundle/Application/'
 KNOWN_GARBAGE_SYMBOLS = set([
     '_mh_execute_header',
     '<redacted>',
-    '<unknown>',
+    NATIVE_UNKNOWN_STRING,
 ])
 
 
