commit 02089216675478eb6a13dfeceb16d8e9aa737ef4
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 30 11:12:16 2015 +0200

    Replace obj references with ids

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index ee8e5509dc..d9ec4cd2ae 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -26,13 +26,12 @@ var Stream = React.createClass({
   },
 
   propTypes: {
-    memberList: React.PropTypes.instanceOf(Array).isRequired,
     setProjectNavSection: React.PropTypes.func.isRequired
   },
 
   getInitialState() {
     return {
-      groupList: [],
+      groupIds: [],
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
@@ -45,21 +44,7 @@ var Stream = React.createClass({
   },
 
   shouldComponentUpdate(nextProps, nextState) {
-    var curState = this.state;
-    var keys = ['selectAllActive', 'multiSelected', 'anySelected', 'statsPeriod',
-                'realtimeActive', 'pageLinks', 'loading', 'error'];
-    for (var i = 0; i < keys.length; i++) {
-      if (curState[keys[i]] !== nextState[keys[i]]) {
-        return true;
-      }
-    }
-    if (curState.groupList.length != nextState.groupList.length) {
-      return true;
-    }
-    var equal = utils.compareArrays(curState.groupList, nextState.groupList, (obj, other) => {
-      return obj.id === other.id;
-    });
-    return !equal;
+    return !utils.valueIsEqual(this.state, nextState, true);
   },
 
   componentWillMount() {
@@ -155,7 +140,7 @@ var Stream = React.createClass({
 
   onAggListChange() {
     this.setState({
-      groupList: this._streamManager.getAllItems()
+      groupIds: this._streamManager.getAllItems().map((item) => item.id)
     });
   },
 
@@ -171,11 +156,10 @@ var Stream = React.createClass({
   render() {
     var router = this.context.router;
     var params = router.getCurrentParams();
-    var groupNodes = this.state.groupList.map((node) => {
+    var groupNodes = this.state.groupIds.map((id) => {
       return <StreamGroup
-          key={node.id}
-          id={node.id}
-          memberList={this.props.memberList}
+          key={id}
+          id={id}
           statsPeriod={this.state.statsPeriod} />;
     });
 
@@ -190,7 +174,7 @@ var Stream = React.createClass({
             onRealtimeChange={this.handleRealtimeChange}
             realtimeActive={this.state.realtimeActive}
             statsPeriod={this.state.statsPeriod}
-            groupList={this.state.groupList} />
+            groupIds={this.state.groupIds} />
         </div>
         {this.state.loading ?
           <LoadingIndicator />
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index ffe67979ee..26b3b0d57a 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -20,7 +20,7 @@ var ActionLink = React.createClass({
 
   propTypes: {
     actionLabel: React.PropTypes.string,
-    groupList: React.PropTypes.instanceOf(Array).isRequired,
+    groupIds: React.PropTypes.instanceOf(Array).isRequired,
     canActionAll: React.PropTypes.bool.isRequired,
     confirmLabel: React.PropTypes.string,
     disabled: React.PropTypes.bool,
@@ -55,14 +55,14 @@ var ActionLink = React.createClass({
   },
 
   handleActionAll(event) {
-    this.props.onAction(StreamActions.ALL, event);
+    this.props.onAction(event, StreamActions.ALL);
     this.setState({
       isModalOpen: false
     });
   },
 
   handleActionSelected(event) {
-    this.props.onAction(StreamActions.SELECTED, event);
+    this.props.onAction(event, StreamActions.SELECTED);
     this.setState({
       isModalOpen: false
     });
@@ -326,7 +326,7 @@ var StreamActions = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    groupList: React.PropTypes.instanceOf(Array).isRequired,
+    groupIds: React.PropTypes.instanceOf(Array).isRequired,
     onRealtimeChange: React.PropTypes.func.isRequired,
     onSelectStatsPeriod: React.PropTypes.func.isRequired,
     realtimeActive: React.PropTypes.bool.isRequired,
@@ -344,28 +344,26 @@ var StreamActions = React.createClass({
   selectStatsPeriod(period) {
     return this.props.onSelectStatsPeriod(period);
   },
-  actionSelectedGroups(callback, data) {
-    var itemIds;
-    var selectedAggList;
+  actionSelectedGroups(actionType, callback, data) {
+    var selectedIds;
 
-    if (StreamActions.ALL) {
-      selectedAggList = this.props.groupList;
-    } else {
+    if (actionType === StreamActions.ALL) {
+      selectedIds = this.props.groupIds;
+    } else if (actionType === StreamActions.SELECTED) {
       itemIdSet = SelectedGroupStore.getSelectedIds();
-      selectedAggList = this.props.groupList.filter(
-        (item) => itemIdSet.has(item.id)
-      );
-      itemIds = selectedAggList.map(
-        (item) => item.id
+      selectedIds = this.props.groupIds.filter(
+        (itemId) => itemIdSet.has(itemId)
       );
+    } else {
+      throw new Exception('Invalid selector: ' + groupIds);
     }
 
-    callback(itemIds);
+    callback(selectedIds);
 
     SelectedGroupStore.clearAll();
   },
-  onResolve(groupList, event) {
-    this.actionSelectedGroups((itemIds) => {
+  onResolve(event, actionType) {
+    this.actionSelectedGroups(actionType, (itemIds) => {
       var loadingIndicator = IndicatorStore.add('Saving changes..');
 
       api.bulkUpdate({
@@ -382,8 +380,8 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onBookmark(groupList, event) {
-    this.actionSelectedGroups((itemIds) => {
+  onBookmark(event, actionType) {
+    this.actionSelectedGroups(actionType, (itemIds) => {
       var loadingIndicator = IndicatorStore.add('Saving changes..');
 
       api.bulkUpdate({
@@ -400,10 +398,10 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onRemoveBookmark(groupList, event) {
+  onRemoveBookmark(event, actionType) {
     var loadingIndicator = IndicatorStore.add('Saving changes..');
 
-    this.actionSelectedGroups((itemIds) => {
+    this.actionSelectedGroups(actionType, (itemIds) => {
       api.bulkUpdate({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -418,7 +416,7 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onDelete(groupList, event) {
+  onDelete(event, actionType) {
     var loadingIndicator = IndicatorStore.add('Removing events..');
 
     this.actionSelectedGroups((itemIds) => {
@@ -433,10 +431,10 @@ var StreamActions = React.createClass({
       });
     });
   },
-  onMerge(groupList, event) {
+  onMerge(event, actionType) {
     var loadingIndicator = IndicatorStore.add('Merging events..');
 
-    this.actionSelectedGroups((itemIds) => {
+    this.actionSelectedGroups(actionType, (itemIds) => {
       api.merge({
         orgId: this.props.orgId,
         projectId: this.props.projectId,
@@ -476,7 +474,7 @@ var StreamActions = React.createClass({
                canActionAll={true}
                onlyIfBulk={true}
                selectAllActive={this.state.selectAllActive}
-               groupList={this.props.groupList}>
+               groupIds={this.props.groupIds}>
               <i aria-hidden="true" className="icon-checkmark"></i>
             </ActionLink>
             <ActionLink
@@ -488,7 +486,7 @@ var StreamActions = React.createClass({
                canActionAll={false}
                onlyIfBulk={true}
                selectAllActive={this.state.selectAllActive}
-               groupList={this.props.groupList}>
+               groupIds={this.props.groupIds}>
               <i aria-hidden="true" className="icon-bookmark"></i>
             </ActionLink>
 
@@ -507,7 +505,7 @@ var StreamActions = React.createClass({
                    confirmLabel="Merge"
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   groupList={this.props.groupList}>
+                   groupIds={this.props.groupIds}>
                   Merge Events
                 </ActionLink>
               </MenuItem>
@@ -521,7 +519,7 @@ var StreamActions = React.createClass({
                    onlyIfBulk={true}
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   groupList={this.props.groupList}>
+                   groupIds={this.props.groupIds}>
                   Remove from Bookmarks
                 </ActionLink>
               </MenuItem>
@@ -534,7 +532,7 @@ var StreamActions = React.createClass({
                    confirmLabel="Delete"
                    canActionAll={false}
                    selectAllActive={this.state.selectAllActive}
-                   groupList={this.props.groupList}>
+                   groupIds={this.props.groupIds}>
                   Delete Events
                 </ActionLink>
               </MenuItem>
diff --git a/src/sentry/static/sentry/app/views/stream/group.jsx b/src/sentry/static/sentry/app/views/stream/group.jsx
index f4eeaf2a91..691d2ce578 100644
--- a/src/sentry/static/sentry/app/views/stream/group.jsx
+++ b/src/sentry/static/sentry/app/views/stream/group.jsx
@@ -73,7 +73,6 @@ var StreamGroup = React.createClass({
 
   propTypes: {
     id: React.PropTypes.string.isRequired,
-    memberList: React.PropTypes.instanceOf(Array).isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
   },
 
@@ -98,10 +97,7 @@ var StreamGroup = React.createClass({
     if (!valueIsEqual(this.state.data, nextState.data, true)) {
       return true;
     }
-    var memberListEqual = compareArrays(this.props.memberList, nextProps.memberList, (obj, other) => {
-      return obj.email === other.email;
-    });
-    return !memberListEqual;
+    return false;
   },
 
   onGroupChange(itemIds) {
