commit d1326fa0c4f24ed4bfd35d56ecbf335c37d0a030
Author: Stephen Cefali <scefali@sentry.io>
Date:   Fri Nov 22 14:42:34 2019 -0800

    chore(ts): convert add integration button and child component (#15784)

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 8a87448f91..4995629089 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -410,7 +410,7 @@ export type IntegrationProvider = {
   canDisable: boolean;
   features: string[];
   aspects: any; //TODO(ts)
-  setupDialog: object; //TODO(ts)
+  setupDialog: {url: string; width: number; height: number};
   metadata: any; //TODO(ts)
 };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
similarity index 72%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
index f036da7301..3ea938ec38 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.tsx
@@ -4,8 +4,19 @@ import queryString from 'query-string';
 
 import {t} from 'app/locale';
 import IndicatorStore from 'app/stores/indicatorStore';
-
-export default class AddIntegration extends React.Component {
+import {IntegrationProvider, Integration} from 'app/types';
+
+type Props = {
+  children: (
+    openDialog: (urlParams?: {[key: string]: string}) => void
+  ) => React.ReactNode;
+  provider: IntegrationProvider;
+  onInstall: (data: Integration) => void;
+  reinstallId?: string;
+  account?: string;
+};
+
+export default class AddIntegration extends React.Component<Props> {
   static propTypes = {
     children: PropTypes.func.isRequired,
     provider: PropTypes.object.isRequired,
@@ -15,7 +26,6 @@ export default class AddIntegration extends React.Component {
   };
 
   componentDidMount() {
-    this.dialog = null;
     window.addEventListener('message', this.didReceiveMessage);
   }
 
@@ -24,10 +34,14 @@ export default class AddIntegration extends React.Component {
     this.dialog && this.dialog.close();
   }
 
-  computeCenteredWindow(width, height) {
-    const screenLeft = window.screenLeft !== undefined ? window.screenLeft : screen.left;
+  dialog: Window | null = null;
+
+  computeCenteredWindow(width: number, height: number) {
+    //Taken from: https://stackoverflow.com/questions/4068373/center-a-popup-window-on-screen
+    const screenLeft =
+      window.screenLeft !== undefined ? window.screenLeft : window.screenX;
 
-    const screenTop = window.screenTop !== undefined ? window.screenTop : screen.top;
+    const screenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;
 
     const innerWidth = window.innerWidth
       ? window.innerWidth
@@ -47,12 +61,12 @@ export default class AddIntegration extends React.Component {
     return {left, top};
   }
 
-  openDialog = urlParams => {
+  openDialog = (urlParams?: {[key: string]: string}) => {
     const name = 'sentryAddIntegration';
     const {url, width, height} = this.props.provider.setupDialog;
     const {left, top} = this.computeCenteredWindow(width, height);
 
-    const query = {...urlParams};
+    const query: {[key: string]: string} = {...urlParams};
 
     if (this.props.reinstallId) {
       query.reinstall_id = this.props.reinstallId;
@@ -66,10 +80,10 @@ export default class AddIntegration extends React.Component {
     const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;
 
     this.dialog = window.open(installUrl, name, opts);
-    this.dialog.focus();
+    this.dialog && this.dialog.focus();
   };
 
-  didReceiveMessage = message => {
+  didReceiveMessage = (message: MessageEvent) => {
     if (message.origin !== document.location.origin) {
       return;
     }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
similarity index 83%
rename from src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
rename to src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
index 454b2cf799..9efbfea1c3 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
@@ -5,8 +5,16 @@ import {t} from 'app/locale';
 import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import Button from 'app/components/button';
 import Tooltip from 'app/components/tooltip';
+import {IntegrationProvider, Integration} from 'app/types';
 
-export default class AddIntegrationButton extends React.Component {
+type Props = {
+  provider: IntegrationProvider;
+  onAddIntegration: (data: Integration) => void;
+  buttonText?: string;
+  reinstall?: boolean;
+} & React.ComponentProps<typeof Button>;
+
+export default class AddIntegrationButton extends React.Component<Props> {
   static propTypes = {
     provider: PropTypes.object.isRequired,
     onAddIntegration: PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index bebda1382b..a058debc88 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -1,4 +1,3 @@
-import {Box, Flex} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
@@ -123,17 +122,16 @@ export default class InstalledIntegration extends React.Component<Props> {
     return (
       <Access access={['org:integrations']}>
         {({hasAccess}) => (
-          <Flex align="center" key={integration.id} className={className}>
-            <Box flex={1}>
+          <IntegrationFlex key={integration.id} className={className}>
+            <IntegrationItemBox>
               <IntegrationItem compact integration={integration} />
-            </Box>
-            <Box>
+            </IntegrationItemBox>
+            <div>
               {integration.status === 'disabled' && (
                 <AddIntegrationButton
                   size="xsmall"
                   priority="success"
                   provider={provider}
-                  integration={integration}
                   onAddIntegration={this.reinstallIntegration}
                   reinstall
                 />
@@ -157,8 +155,8 @@ export default class InstalledIntegration extends React.Component<Props> {
                   </StyledButton>
                 </Tooltip>
               )}
-            </Box>
-            <Box>
+            </div>
+            <div>
               <Confirm priority="danger" disabled={!hasAccess} {...removeConfirmProps}>
                 <StyledButton
                   disabled={!hasAccess}
@@ -169,8 +167,8 @@ export default class InstalledIntegration extends React.Component<Props> {
                   Uninstall
                 </StyledButton>
               </Confirm>
-            </Box>
-          </Flex>
+            </div>
+          </IntegrationFlex>
         )}
       </Access>
     );
@@ -180,3 +178,12 @@ export default class InstalledIntegration extends React.Component<Props> {
 const StyledButton = styled(Button)`
   color: ${p => p.theme.gray2};
 `;
+
+const IntegrationFlex = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const IntegrationItemBox = styled('div')`
+  flex: 1;
+`;
