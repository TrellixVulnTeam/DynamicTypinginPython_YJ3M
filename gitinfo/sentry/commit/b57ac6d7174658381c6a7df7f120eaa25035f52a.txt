commit b57ac6d7174658381c6a7df7f120eaa25035f52a
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Wed May 10 14:09:39 2017 -0700

    Add mentions (#5255)
    
    * add mentions dropdown with members to comments
    
    * remove unused variable
    
    * add mentions serializer
    
    * actually make mentionSerializer work
    
    * add participants and tooltip for avatars
    
    * make sure only people mentioned get subscribed
    
    * styling mentions list and adjust backend subscribe actions
    
    * syntax
    
    * color comment icons for issues that you are mentioned in
    
    * do not display current user from mentions suggestion box
    
    * better naming for serialized data
    
    * remove temp dev email thangs
    
    * refactor onAdd
    
    * refactor finalMentions, add comment for clarification
    
    * refactor getMemberData
    
    * combine mentionSerialzier into noteSerializer, refactor serialized data
    
    * add validations for mentioned users
    
    * refactor componentWillMount, add getParticipantData
    
    * remove loadingIndicator from componentWillMount
    
    * refactor getInitialState, remove getMemberData
    
    * send memberList and sessionUser down as props
    
    * move mentions styles to separate file
    
    * update mentions-styles path
    
    * pass tests if no mentions are included
    
    * make sure validate_mentions doesn't break tests...again
    
    * update CHANGES
    
    * spell correctly
    
    * syntax, refactor mentions/comment endpoint
    
    * convert unicode to int for user ids
    
    * add tests for mentions
    
    * edit tests
    
    * fix indentation and grammar
    
    * additional test and comments for tests
    
    * simplify noteSerializer

diff --git a/CHANGES b/CHANGES
index 9a02c31501..c14b004b93 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,5 +1,6 @@
 Version 8.17 (Unreleased)
 -------------------------
+- Added @mentions to comments
 
 - Initial (internal) analytics abstraction.
 - Turned on reprocessing by default
diff --git a/package.json b/package.json
index 27d6cab830..7d830660d6 100644
--- a/package.json
+++ b/package.json
@@ -50,6 +50,7 @@
     "react-dom": "15.3.2",
     "react-icon-base": "^2.0.4",
     "react-lazy-load": "3.0.10",
+    "react-mentions": "^1.0.0",
     "react-router": "2.8.1",
     "react-sparklines": "1.6.0",
     "react-sticky": "5.0.4",
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index 16704b228d..2b40713b42 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -9,7 +9,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework.group_notes import NoteSerializer
-from sentry.models import Activity, GroupSubscription, GroupSubscriptionReason
+from sentry.models import Activity, GroupSubscription, GroupSubscriptionReason, User
 from sentry.utils.functional import extract_lazy_object
 
 
@@ -31,11 +31,13 @@ class GroupNotesEndpoint(GroupEndpoint):
         )
 
     def post(self, request, group):
-        serializer = NoteSerializer(data=request.DATA)
+        serializer = NoteSerializer(data=request.DATA, context={'group': group})
+
         if not serializer.is_valid():
             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
         data = dict(serializer.object)
+        mentions = data.pop('mentions', [])
 
         if Activity.objects.filter(
             group=group,
@@ -53,6 +55,15 @@ class GroupNotesEndpoint(GroupEndpoint):
             reason=GroupSubscriptionReason.comment,
         )
 
+        if mentions:
+            users = User.objects.filter(id__in=mentions)
+            for user in users:
+                GroupSubscription.objects.subscribe(
+                    group=group,
+                    user=user,
+                    reason=GroupSubscriptionReason.mentioned,
+                )
+
         activity = Activity.objects.create(
             group=group,
             project=group.project,
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index f9a5760a0a..5d615d64c7 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -26,6 +26,7 @@ SUBSCRIPTION_REASON_MAP = {
     GroupSubscriptionReason.assigned: 'assigned',
     GroupSubscriptionReason.bookmark: 'bookmarked',
     GroupSubscriptionReason.status_change: 'changed_status',
+    GroupSubscriptionReason.mentioned: 'mentioned',
 }
 
 
diff --git a/src/sentry/api/serializers/rest_framework/group_notes.py b/src/sentry/api/serializers/rest_framework/group_notes.py
index 75306223a0..10133b48b4 100644
--- a/src/sentry/api/serializers/rest_framework/group_notes.py
+++ b/src/sentry/api/serializers/rest_framework/group_notes.py
@@ -2,6 +2,20 @@ from __future__ import absolute_import
 
 from rest_framework import serializers
 
+from .list import ListField
+
 
 class NoteSerializer(serializers.Serializer):
     text = serializers.CharField()
+    mentions = ListField(required=False)
+
+    def validate_mentions(self, attrs, source):
+        if source in attrs and 'group' in self.context:
+            mentions = attrs[source]
+            project = self.context['group'].project
+            member_ids = set(project.member_set.filter(user_id__in=mentions).values_list('user_id', flat=True))
+            invalid_user_ids = [m for m in mentions if int(m) not in member_ids]
+            if invalid_user_ids:
+                raise serializers.ValidationError('Cannot mention a non-team member')
+
+        return attrs
diff --git a/src/sentry/models/groupsubscription.py b/src/sentry/models/groupsubscription.py
index 7c08bc38f1..1738fa150c 100644
--- a/src/sentry/models/groupsubscription.py
+++ b/src/sentry/models/groupsubscription.py
@@ -22,6 +22,7 @@ class GroupSubscriptionReason(object):
     bookmark = 3
     status_change = 4
     deploy_setting = 5
+    mentioned = 6
 
     descriptions = {
         implicit: u"have opted to receive updates for all issues within "
@@ -33,6 +34,7 @@ class GroupSubscriptionReason(object):
         bookmark: u"have bookmarked this issue",
         status_change: u"have changed the resolution status of this issue",
         deploy_setting: u"opted to receive all deploy notifications for this organization",
+        mentioned: u"have been mentioned in this issue",
     }
 
 
diff --git a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
index 6591590b10..10f465acb0 100644
--- a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
@@ -8,7 +8,9 @@ const NoteContainer = React.createClass({
     group: React.PropTypes.object.isRequired,
     item: React.PropTypes.object.isRequired,
     author: React.PropTypes.object.isRequired,
-    onDelete: React.PropTypes.func.isRequired
+    onDelete: React.PropTypes.func.isRequired,
+    sessionUser: React.PropTypes.object.isRequired,
+    memberList: React.PropTypes.array.isRequired
   },
 
   getInitialState() {
@@ -30,14 +32,20 @@ const NoteContainer = React.createClass({
   },
 
   render() {
-    let {group, item, author} = this.props;
+    let {group, item, author, sessionUser, memberList} = this.props;
 
     return (
       <li className="activity-note">
         {author.avatar}
         <div className="activity-bubble">
           {this.state.editing
-            ? <NoteInput group={group} item={item} onFinish={this.onFinish} />
+            ? <NoteInput
+                group={group}
+                item={item}
+                onFinish={this.onFinish}
+                sessionUser={sessionUser}
+                memberList={memberList}
+              />
             : <Note
                 item={item}
                 author={author}
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index d53bdb9970..5b0b2cf51c 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -7,6 +7,9 @@ import IndicatorStore from '../../stores/indicatorStore';
 import {logException} from '../../utils/logging';
 import localStorage from '../../utils/localStorage';
 import {t} from '../../locale';
+import mentionsStyle from '../../../styles/mentions-styles';
+
+import {MentionsInput, Mention} from 'react-mentions';
 
 import PureRenderMixin from 'react-addons-pure-render-mixin';
 const localStorageKey = 'noteinput:latest';
@@ -19,7 +22,9 @@ const NoteInput = React.createClass({
   propTypes: {
     item: React.PropTypes.object,
     group: React.PropTypes.object.isRequired,
-    onFinish: React.PropTypes.func
+    onFinish: React.PropTypes.func,
+    memberList: React.PropTypes.array.isRequired,
+    sessionUser: React.PropTypes.object.isRequired
   },
 
   mixins: [PureRenderMixin, ApiMixin],
@@ -29,6 +34,14 @@ const NoteInput = React.createClass({
     let updating = !!item;
     let defaultText = '';
 
+    let mentionsList = this.props.memberList
+      .filter(member => this.props.sessionUser.id !== member.id)
+      .map(member => ({
+        id: member.id,
+        display: member.name,
+        email: member.email
+      }));
+
     if (updating) {
       defaultText = item.data.text;
     } else {
@@ -48,7 +61,9 @@ const NoteInput = React.createClass({
       expanded: false,
       preview: false,
       updating: updating,
-      value: defaultText
+      value: defaultText,
+      mentionsList: mentionsList,
+      mentions: []
     };
   },
 
@@ -102,13 +117,15 @@ const NoteInput = React.createClass({
 
   create() {
     let {group} = this.props;
+    let mentions = this.finalMentions();
 
     let loadingIndicator = IndicatorStore.add(t('Posting comment..'));
 
     this.api.request('/issues/' + group.id + '/comments/', {
       method: 'POST',
       data: {
-        text: this.state.value
+        text: this.state.value,
+        mentions: mentions
       },
       error: error => {
         this.setState({
@@ -123,7 +140,8 @@ const NoteInput = React.createClass({
           value: '',
           preview: false,
           expanded: false,
-          loading: false
+          loading: false,
+          mentions: []
         });
         GroupStore.addActivity(group.id, data);
         this.finish();
@@ -182,10 +200,22 @@ const NoteInput = React.createClass({
     this.finish();
   },
 
+  onAdd(id, display) {
+    let mentions = this.state.mentions.concat([[id, display]]);
+    this.setState({mentions});
+  },
+
   finish() {
     this.props.onFinish && this.props.onFinish();
   },
 
+  finalMentions() {
+    // mention = [id, display]
+    return this.state.mentions
+      .filter(mention => this.state.value.indexOf(mention[1]) !== -1)
+      .map(mention => mention[0]);
+  },
+
   expand(e) {
     this.setState({expanded: true});
 
@@ -207,7 +237,7 @@ const NoteInput = React.createClass({
   },
 
   render() {
-    let {error, errorJSON, loading, preview, updating, value} = this.state;
+    let {error, errorJSON, loading, preview, updating, value, mentionsList} = this.state;
     let classNames = 'activity-field';
     if (error) {
       classNames += ' error';
@@ -223,7 +253,9 @@ const NoteInput = React.createClass({
         <div className="activity-notes">
           <ul className="nav nav-tabs">
             <li className={!preview ? 'active' : ''}>
-              <a onClick={this.toggleEdit}>{updating ? t('Edit') : t('Write')}</a>
+              <a onClick={this.toggleEdit}>
+                {updating ? t('Edit') : t('Write')}
+              </a>
             </li>
             <li className={preview ? 'active' : ''}>
               <a onClick={this.togglePreview}>{t('Preview')}</a>
@@ -239,16 +271,23 @@ const NoteInput = React.createClass({
                 className="note-preview"
                 dangerouslySetInnerHTML={{__html: marked(value)}}
               />
-            : <textarea
+            : <MentionsInput
+                style={mentionsStyle}
                 placeholder={t('Add details or updates to this event')}
                 onChange={this.onChange}
-                onKeyDown={this.onKeyDown}
-                onFocus={this.expand}
-                onBlur={this.maybeCollapse}
+                onBlur={this.onBlur}
+                value={value}
                 required={true}
                 autoFocus={true}
-                value={value}
-              />}
+                displayTransform={(id, display) => `@${display}`}
+                markup="**__display__**">
+                <Mention
+                  trigger="@"
+                  data={mentionsList}
+                  onAdd={this.onAdd}
+                  appendSpaceOnAdd={true}
+                />
+              </MentionsInput>}
           <div className="activity-actions">
             {errorJSON &&
               errorJSON.detail &&
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index 2a5baa1bdc..2c3b46c643 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -57,6 +57,11 @@ const CompactIssueHeader = React.createClass({
 
   render() {
     let {orgId, projectId, data} = this.props;
+
+    let styles = {};
+    if (data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned') {
+      styles = {color: '#57be8c'};
+    }
     return (
       <div>
         <span className="error-level truncate" title={data.level} />
@@ -76,7 +81,7 @@ const CompactIssueHeader = React.createClass({
               <Link
                 to={`/${orgId}/${projectId}/issues/${data.id}/activity/`}
                 className="comments">
-                <span className="icon icon-comments" />
+                <span className="icon icon-comments" style={styles} />
                 <span className="tag-count">{data.numComments}</span>
               </Link>
             </span>}
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
index 6d1884dfe1..8da026602b 100644
--- a/src/sentry/static/sentry/app/components/group/participants.jsx
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -1,12 +1,20 @@
 import React from 'react';
 
 import Avatar from '../avatar';
+import TooltipMixin from '../../mixins/tooltip';
+import {userDisplayName} from '../../utils/formatters';
 
 const GroupParticipants = React.createClass({
   propTypes: {
     participants: React.PropTypes.array.isRequired
   },
 
+  mixins: [
+    TooltipMixin({
+      selector: '.tip'
+    })
+  ],
+
   render() {
     let participants = this.props.participants;
 
@@ -20,7 +28,7 @@ const GroupParticipants = React.createClass({
         <ul className="faces">
           {participants.map((user, i) => {
             return (
-              <li key={i}>
+              <li key={user.username} className="tip" title={userDisplayName(user)}>
                 <Avatar size={32} user={user} />
               </li>
             );
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 324a6c7e6f..bcfba28514 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -7,6 +7,7 @@ import GroupReleaseStats from './releaseStats';
 import GroupState from '../../mixins/groupState';
 import IndicatorStore from '../../stores/indicatorStore';
 import TagDistributionMeter from './tagDistributionMeter';
+import LoadingError from '../../components/loadingError';
 import {t, tct} from '../../locale';
 
 const GroupSidebar = React.createClass({
@@ -21,12 +22,38 @@ const GroupSidebar = React.createClass({
 
   mixins: [ApiMixin, GroupState],
 
+  getInitialState() {
+    return {
+      participants: []
+    };
+  },
+
+  componentWillMount() {
+    let group = this.props.group;
+    this.api.request(`/issues/${group.id}/participants/`, {
+      success: data => {
+        this.setState({
+          participants: data,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true
+        });
+      }
+    });
+  },
+
   subscriptionReasons: {
     commented: t("You're receiving updates because you have commented on this issue."),
     assigned: t("You're receiving updates because you were assigned to this issue."),
     bookmarked: t("You're receiving updates because you have bookmarked this issue."),
     changed_status: t(
       "You're receiving updates because you have changed the status of this issue."
+    ),
+    mentioned: t(
+      "You're receiving updates because you have been mentioned in this issue."
     )
   },
 
@@ -49,7 +76,16 @@ const GroupSidebar = React.createClass({
         complete: () => {
           this.api.request(`/issues/${group.id}/participants/`, {
             success: data => {
-              this.setState({participants: data});
+              this.setState({
+                participants: data,
+                error: false
+              });
+              IndicatorStore.remove(loadingIndicator);
+            },
+            error: () => {
+              this.setState({
+                error: true
+              });
               IndicatorStore.remove(loadingIndicator);
             }
           });
@@ -65,7 +101,8 @@ const GroupSidebar = React.createClass({
       if (issue) {
         issues.push(
           <dl key={plugin.slug}>
-            <dt>{plugin.title + ': '}</dt><dd><a href={issue.url}>{issue.label}</a></dd>
+            <dt>{plugin.title + ': '}</dt>
+            <dd><a href={issue.url}>{issue.label}</a></dd>
           </dl>
         );
       }
@@ -107,13 +144,29 @@ const GroupSidebar = React.createClass({
     }
   },
 
+  renderParticipantData() {
+    let error = this.state.error;
+    let participants = (this.state || {}).participants || [];
+
+    if (!error) {
+      return (
+        participants.length !== 0 && <GroupParticipants participants={participants} />
+      );
+    } else {
+      return (
+        <LoadingError
+          message={t('There was an error while trying to load participants.')}
+        />
+      );
+    }
+  },
+
   render() {
     let project = this.getProject();
     let projectId = project.slug;
     let orgId = this.getOrganization().slug;
     let defaultEnvironment = project.defaultEnvironment;
     let group = this.getGroup();
-    let participants = (this.state || {}).participants || [];
 
     return (
       <div className="group-stats">
@@ -140,7 +193,8 @@ const GroupSidebar = React.createClass({
             />
           );
         })}
-        {participants.length !== 0 && <GroupParticipants participants={participants} />}
+
+        {this.renderParticipantData()}
 
         <h6><span>{t('Notifications')}</span></h6>
         <p className="help-block">{this.getNotificationText()}</p>
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 22f943f146..81c05832b5 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -143,6 +143,11 @@ const StreamGroup = React.createClass({
 
     let {id, orgId, projectId} = this.props;
 
+    let styles = {};
+    if (data.subscriptionDetails && data.subscriptionDetails.reason === 'mentioned') {
+      styles = {color: '#57be8c'};
+    }
+
     return (
       <li className={className} onClick={this.toggleSelect}>
         <div className="col-md-7 col-xs-8 event-details">
@@ -169,7 +174,7 @@ const StreamGroup = React.createClass({
                   <Link
                     to={`/${orgId}/${projectId}/issues/${id}/activity/`}
                     className="comments">
-                    <span className="icon icon-comments" />
+                    <span className="icon icon-comments" style={styles} />
                     <span className="tag-count">{data.numComments}</span>
                   </Link>
                 </li>}
diff --git a/src/sentry/static/sentry/app/icons/icon-close-lg.js b/src/sentry/static/sentry/app/icons/icon-close-lg.js
index d541116451..7e169ba988 100644
--- a/src/sentry/static/sentry/app/icons/icon-close-lg.js
+++ b/src/sentry/static/sentry/app/icons/icon-close-lg.js
@@ -2,7 +2,7 @@ import React from 'react';
 import Icon from 'react-icon-base';
 
 function IconCloseLg(props) {
-  return(
+  return (
     <Icon viewBox="0 0 20 20" {...props}>
       <g stroke="currentColor" fill="none">
         <path d="M0.5,0.5 L19.5,19.5" />
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 0b03d2899f..c76fa12aad 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -148,6 +148,7 @@ const GroupActivity = React.createClass({
   render() {
     let group = this.props.group;
     let me = ConfigStore.get('user');
+    let memberList = MemberListStore.getAll();
 
     let children = group.activity.map((item, itemIdx) => {
       let avatar = item.user
@@ -167,6 +168,8 @@ const GroupActivity = React.createClass({
             key={itemIdx}
             author={author}
             onDelete={this.onNoteDelete}
+            sessionUser={me}
+            memberList={memberList}
           />
         );
       } else {
@@ -197,7 +200,7 @@ const GroupActivity = React.createClass({
               <li className="activity-note" key="activity-note">
                 <Avatar user={me} size={64} className="avatar" />
                 <div className="activity-bubble">
-                  <NoteInput group={group} />
+                  <NoteInput group={group} memberList={memberList} sessionUser={me} />
                 </div>
               </li>
               {children}
diff --git a/src/sentry/static/sentry/styles/mentions-styles.js b/src/sentry/static/sentry/styles/mentions-styles.js
new file mode 100644
index 0000000000..a9e76a5a1e
--- /dev/null
+++ b/src/sentry/static/sentry/styles/mentions-styles.js
@@ -0,0 +1,64 @@
+export default {
+  control: {
+    backgroundColor: '#fff',
+    fontSize: 15,
+    fontWeight: 'normal'
+  },
+
+  input: {
+    margin: 0
+  },
+
+  '&singleLine': {
+    control: {
+      display: 'inline-block',
+
+      width: 130
+    },
+
+    highlighter: {
+      padding: 1,
+      border: '2px inset transparent'
+    },
+
+    input: {
+      padding: 1,
+      border: '2px inset'
+    }
+  },
+
+  '&multiLine': {
+    control: {
+      fontFamily: 'Lato, Avenir Next, Helvetica Neue, sans-serif'
+    },
+
+    highlighter: {
+      padding: 20
+    },
+
+    input: {
+      padding: '15px 20px 0',
+      minHeight: 140,
+      overflow: 'auto',
+      outline: 0,
+      border: 0
+    }
+  },
+
+  suggestions: {
+    list: {
+      backgroundColor: 'white',
+      border: '1px solid rgba(0,0,0,0.15)',
+      fontSize: 12
+    },
+
+    item: {
+      padding: '5px 15px',
+      borderBottom: '1px solid rgba(0,0,0,0.15)',
+
+      '&focused': {
+        backgroundColor: '#f8f6f9'
+      }
+    }
+  }
+};
diff --git a/tests/sentry/api/endpoints/test_group_notes.py b/tests/sentry/api/endpoints/test_group_notes.py
index ab466f7108..870fa771b9 100644
--- a/tests/sentry/api/endpoints/test_group_notes.py
+++ b/tests/sentry/api/endpoints/test_group_notes.py
@@ -52,3 +52,62 @@ class GroupNoteCreateTest(APITestCase):
             'text': 'hello world',
         })
         assert response.status_code == 400, response.content
+
+    def test_with_mentions(self):
+        user = self.create_user(email='hello@meow.com')
+
+        self.org = self.create_organization(
+            name='Gnarly Org',
+            owner=None,
+        )
+        self.team = self.create_team(
+            organization=self.org,
+            name='Ultra Rad Team'
+        )
+
+        # member that IS NOT part of the team
+        self.create_member(
+            user=user,
+            organization=self.org,
+            role='member',
+            teams=[],
+        )
+        # member that IS part of the team
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='member',
+            teams=[self.team],
+        )
+        group = self.group
+
+        self.login_as(user=self.user)
+
+        url = '/api/0/issues/{}/comments/'.format(group.id)
+
+        # mentioning a member that does not exist returns 400
+        response = self.client.post(url, format='json', data={
+            'text': '**meredith@getsentry.com** is fun',
+            'mentions': [u'8']
+        })
+        assert response.status_code == 400, response.content
+
+        user_id = six.text_type(self.user.id)
+
+        # mentioning a member in the correct team returns 201
+        response = self.client.post(url, format='json', data={
+            'text': '**meredith@getsentry.com** is so fun',
+            'mentions': [u'%s' % user_id]
+        })
+        assert response.status_code == 201, response.content
+
+        user_id = six.text_type(user.id)
+
+        # mentioning a member that exists but NOT in the team returns
+        # validation error
+        response = self.client.post(url, format='json', data={
+            'text': '**hello@meow.com** is not so fun',
+            'mentions': [u'%s' % user_id]
+        })
+
+        assert response.content == '{"mentions": ["Cannot mention a non-team member"]}'
diff --git a/yarn.lock b/yarn.lock
index 8b192847a2..4d48ab4d3a 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -851,6 +851,13 @@ babel-runtime@^6.0.0, babel-runtime@^6.11.6, babel-runtime@^6.18.0, babel-runtim
     core-js "^2.4.0"
     regenerator-runtime "^0.10.0"
 
+babel-runtime@^6.22.0:
+  version "6.23.0"
+  resolved "https://registry.yarnpkg.com/babel-runtime/-/babel-runtime-6.23.0.tgz#0a9489f144de70efb3ce4300accdb329e2fc543b"
+  dependencies:
+    core-js "^2.4.0"
+    regenerator-runtime "^0.10.0"
+
 babel-template@^6.14.0, babel-template@^6.15.0, babel-template@^6.16.0, babel-template@^6.3.0, babel-template@^6.8.0:
   version "6.16.0"
   resolved "https://registry.yarnpkg.com/babel-template/-/babel-template-6.16.0.tgz#e149dd1a9f03a35f817ddbc4d0481988e7ebc8ca"
@@ -2063,6 +2070,18 @@ fbjs@^0.8.4:
     setimmediate "^1.0.5"
     ua-parser-js "^0.7.9"
 
+fbjs@^0.8.9:
+  version "0.8.12"
+  resolved "https://registry.yarnpkg.com/fbjs/-/fbjs-0.8.12.tgz#10b5d92f76d45575fd63a217d4ea02bea2f8ed04"
+  dependencies:
+    core-js "^1.0.0"
+    isomorphic-fetch "^2.1.1"
+    loose-envify "^1.0.0"
+    object-assign "^4.1.0"
+    promise "^7.1.1"
+    setimmediate "^1.0.5"
+    ua-parser-js "^0.7.9"
+
 fd-slicer@~1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/fd-slicer/-/fd-slicer-1.0.1.tgz#8b5bcbd9ec327c5041bf9ab023fd6750f1177e65"
@@ -3320,7 +3339,7 @@ lodash@^3.8.0:
   version "3.10.1"
   resolved "https://registry.yarnpkg.com/lodash/-/lodash-3.10.1.tgz#5bf45e8e49ba4189e17d482789dfd15bd140b7b6"
 
-lodash@^4.0.0, lodash@^4.1.0, lodash@^4.13.1, lodash@^4.14.0, lodash@^4.2.0, lodash@^4.3.0:
+lodash@^4.0.0, lodash@^4.1.0, lodash@^4.13.1, lodash@^4.14.0, lodash@^4.2.0, lodash@^4.3.0, lodash@^4.5.1:
   version "4.16.4"
   resolved "https://registry.yarnpkg.com/lodash/-/lodash-4.16.4.tgz#01ce306b9bad1319f2a5528674f88297aeb70127"
 
@@ -4168,6 +4187,12 @@ promise@^7.0.3, promise@^7.1.1:
   dependencies:
     asap "~2.0.3"
 
+prop-types@^15.5.8:
+  version "15.5.8"
+  resolved "https://registry.yarnpkg.com/prop-types/-/prop-types-15.5.8.tgz#6b7b2e141083be38c8595aa51fc55775c7199394"
+  dependencies:
+    fbjs "^0.8.9"
+
 prr@~0.0.0:
   version "0.0.0"
   resolved "https://registry.yarnpkg.com/prr/-/prr-0.0.0.tgz#1a84b85908325501411853d0081ee3fa86e2926a"
@@ -4324,6 +4349,15 @@ react-lazy-load@3.0.10:
     lodash.debounce "^4.0.0"
     lodash.throttle "^4.0.0"
 
+react-mentions@^1.0.0:
+  version "1.0.1"
+  resolved "https://registry.yarnpkg.com/react-mentions/-/react-mentions-1.0.1.tgz#68dea0571baafff0c28cc90360313165994c5215"
+  dependencies:
+    babel-runtime "^6.22.0"
+    lodash "^4.5.1"
+    prop-types "^15.5.8"
+    substyle "^5.1.2"
+
 react-overlays@^0.6.3:
   version "0.6.10"
   resolved "https://registry.yarnpkg.com/react-overlays/-/react-overlays-0.6.10.tgz#e7e52dad47f00a0fc784eb044428c3a9e874bfa3"
@@ -4927,6 +4961,16 @@ style-loader@0.12.4:
   dependencies:
     loader-utils "^0.2.7"
 
+substyle@^5.1.2:
+  version "5.1.2"
+  resolved "https://registry.yarnpkg.com/substyle/-/substyle-5.1.2.tgz#f501de4035e41a8073db9bc21ac3d9138caf1321"
+  dependencies:
+    hoist-non-react-statics "^1.2.0"
+    invariant "^2.2.0"
+    lodash "^4.3.0"
+    prop-types "^15.5.8"
+    warning "^2.1.0"
+
 supports-color@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/supports-color/-/supports-color-2.0.0.tgz#535d045ce6b6363fa40117084629995e9df324c7"
