commit 6b437e4d1fde237971e95de322b02c990c007b89
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Nov 27 11:05:08 2018 -0800

    feat(discover): Display alert if user tries to access invalid project (#10724)
    
    Displays an alert if the user tries to access a saved query with any
    invalid project or one that they are not a member of. Previously this
    was silently dropped from the result set without any notification.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx
new file mode 100644
index 0000000000..1da9787842
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/missingProjectWarningModal.jsx
@@ -0,0 +1,41 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import Modal, {Header, Body, Footer} from 'react-bootstrap/lib/Modal';
+import Button from 'app/components/button';
+import SentryTypes from 'app/sentryTypes';
+import {t} from 'app/locale';
+
+export default class MissingProjectWarningModal extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    projects: PropTypes.arrayOf(PropTypes.number).isRequired,
+    closeModal: PropTypes.func,
+  };
+
+  renderProject(id) {
+    const project = this.props.organization.projects.find(p => p.id === id.toString());
+    return <li key={id}>{project ? project.slug : t(`Unknown project ${id}`)}</li>;
+  }
+  render() {
+    return (
+      <Modal show={true}>
+        <Header>{t('Project access')}</Header>
+        <Body>
+          <p>
+            {t(
+              `You are not currently a member of all of the projects specified by
+            this query. As a result, data for the following projects will be
+            omitted from the displayed results:`
+            )}
+          </p>
+          <ul>{this.props.projects.map(id => this.renderProject(id))}</ul>
+        </Body>
+        <Footer>
+          <Button priority="primary" onClick={this.props.closeModal}>
+            {t('View results')}
+          </Button>
+        </Footer>
+      </Modal>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
index 6a37e9b586..c1af276e6c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/queryBuilder.jsx
@@ -1,5 +1,5 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
-
+import React from 'react';
 import {uniq} from 'lodash';
 import moment from 'moment-timezone';
 
@@ -7,6 +7,9 @@ import {Client} from 'app/api';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {t} from 'app/locale';
 
+import {openModal} from 'app/actionCreators/modal';
+
+import MissingProjectWarningModal from './missingProjectWarningModal';
 import {COLUMNS, PROMOTED_TAGS, SPECIAL_TAGS} from './data';
 import {isValidAggregation} from './aggregations/utils';
 
@@ -245,11 +248,26 @@ export default function createQueryBuilder(initial = {}, organization) {
   }
 
   /**
-   * Resets the query to defaults
+   * Resets the query to defaults or the query provided
+   * Displays a warning if user does not have access to any project in the query
    *
    * @returns {Void}
    */
   function reset(q = {}) {
+    const invalidProjects = (q.projects || []).filter(
+      project => !defaultProjects.includes(project)
+    );
+
+    if (invalidProjects.length) {
+      openModal(deps => (
+        <MissingProjectWarningModal
+          organization={organization}
+          projects={invalidProjects}
+          {...deps}
+        />
+      ));
+    }
+
     query = applyDefaults(q);
   }
 }
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index b64879645c..bab214069a 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -1,6 +1,13 @@
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
+import {openModal} from 'app/actionCreators/modal';
+
+jest.mock('app/actionCreators/modal');
 
 describe('Query Builder', function() {
+  afterEach(function() {
+    jest.clearAllMocks();
+  });
+
   describe('applyDefaults()', function() {
     it('generates default query with all projects', function() {
       const queryBuilder = createQueryBuilder(
@@ -165,4 +172,40 @@ describe('Query Builder', function() {
       expect(queryBuilder.getInternal().orderby).toBe('-timestamp');
     });
   });
+
+  describe('reset()', function() {
+    let queryBuilder;
+    beforeEach(function() {
+      const project = TestStubs.Project({id: '1'});
+      const projectWithoutMembership = TestStubs.Project({id: '2', isMember: false});
+      queryBuilder = createQueryBuilder(
+        {},
+        TestStubs.Organization({projects: [project, projectWithoutMembership]})
+      );
+    });
+
+    it('displays warning if invalid project is provided', function() {
+      queryBuilder.reset({
+        fields: ['id'],
+        projects: [3],
+      });
+      expect(openModal).toHaveBeenCalled();
+    });
+
+    it('displays warning if user does not have project access', function() {
+      queryBuilder.reset({
+        fields: ['id'],
+        projects: [2],
+      });
+      expect(openModal).toHaveBeenCalled();
+    });
+
+    it('does not display warning if user has access to all requested projects', function() {
+      queryBuilder.reset({
+        fields: ['id'],
+        projects: [1],
+      });
+      expect(openModal).not.toHaveBeenCalled();
+    });
+  });
 });
