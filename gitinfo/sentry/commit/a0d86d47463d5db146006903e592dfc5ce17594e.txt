commit a0d86d47463d5db146006903e592dfc5ce17594e
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Mon Jan 29 13:43:26 2018 -0800

    ci: Add Python vulnerability scanner (#6628)

diff --git a/.travis.yml b/.travis.yml
index 1b61a5d9a1..802e78bfd9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -41,6 +41,7 @@ before_script:
 script:
   - make travis-lint-$TEST_SUITE
   - make travis-test-$TEST_SUITE
+  - make travis-scan-$TEST_SUITE
 after_success:
   - codecov -e TEST_SUITE
   - npm install -g @zeus-ci/cli
diff --git a/Makefile b/Makefile
index 939b0c42d7..a24afde8f2 100644
--- a/Makefile
+++ b/Makefile
@@ -166,6 +166,12 @@ lint-js:
 	bash -eo pipefail -c "bin/lint --js --parseable | tee eslint.checkstyle.xml"
 	@echo ""
 
+scan-python:
+	@echo "--> Running Python vulnerability scanner"
+	python -m pip install safety
+	bin/scan
+	@echo ""
+
 coverage: develop
 	$(MAKE) test-python
 	coverage html
@@ -178,7 +184,7 @@ extract-api-docs:
 	cd api-docs; python generator.py
 
 
-.PHONY: develop dev-postgres dev-docs setup-git build clean locale update-transifex update-submodules test testloop test-cli test-js test-styleguide test-python test-acceptance lint lint-python lint-js coverage publish
+.PHONY: develop dev-postgres dev-docs setup-git build clean locale update-transifex update-submodules test testloop test-cli test-js test-styleguide test-python test-acceptance lint lint-python lint-js coverage publish scan-python
 
 
 ############################
@@ -261,3 +267,18 @@ travis-test-dist:
 travis-test-django-18: travis-test-postgres
 
 .PHONY: travis-test-danger travis-test-sqlite travis-test-postgres travis-test-mysql travis-test-js travis-test-cli travis-test-dist
+
+
+# Scan steps
+travis-scan-danger: travis-noop
+travis-scan-sqlite: scan-python
+travis-scan-postgres: scan-python
+travis-scan-mysql: scan-python
+travis-scan-acceptance: travis-noop
+travis-scan-network: travis-noop
+travis-scan-js: travis-noop
+travis-scan-cli: travis-noop
+travis-scan-dist: travis-noop
+travis-scan-django-18: travis-noop
+
+.PHONY: travis-scan-danger travis-scan-sqlite travis-scan-postgres travis-scan-mysql travis-scan-acceptance travis-scan-network travis-scan-js travis-scan-cli travis-scan-dist travis-scan-django-18
diff --git a/bin/scan b/bin/scan
new file mode 100755
index 0000000000..beac728b72
--- /dev/null
+++ b/bin/scan
@@ -0,0 +1,39 @@
+#!/bin/bash
+
+ignored=(
+    # djangorestframework, installed 2.4.8, affected <3.1.1, id 25804
+    # Description: Escape tab switching cookie name in browsable API.
+    # Reason: We do not use the browsable API
+    25804
+    # django, installed 1.6.11, affected <1.7.11, id 25714
+    # Description: The get_format function in utils/formats.py in Django before 1.7.x before 1.7.11, 1.8.x before 1.8.7, and 1.9.x before 1.9rc2 might allow remote attackers to obtain sensitive application secrets via a settings key in place of a date/time format setting, as demonstrated by SECRET_KEY.
+    # Reason: We don't leverage this feature.
+    25714
+    # django, installed 1.6.11, affected <1.7.6, id 25715
+    # Description: Cross-site scripting (XSS) vulnerability in the contents function in admin/helpers.py in Django before 1.7.6 and 1.8 before 1.8b2 allows remote attackers to inject arbitrary web script or HTML via a model attribute in ModelAdmin.readonly_fields, as demonstrated by a @property.
+    # Reason: We don't leverage this feature.
+    25715
+    # django, installed 1.6.11, affected <1.8.10, id 33073
+    # Description: The utils.http.is_safe_url function in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks or possibly conduct cross-site scripting (XSS) attacks via a URL containing basic authentication, as demonstrated by http://mysite.example.com\@attacker.com.
+    # Reason: We have already patched around this and use our own `is_safe_url` function pulled from Django 1.10.
+    33073
+    # django, installed 1.6.11, affected <1.8.10, id 33074
+    # Description: The password hasher in contrib/auth/hashers.py in Django before 1.8.10 and 1.9.x before 1.9.3 allows remote attackers to enumerate users via a timing attack involving login requests
+    # Reason: We don't leverage this feature, nor would a timing attack be viable due to rate limiting.
+    33074
+    # django, installed 1.6.11, affected <1.8.15, id 25718
+    # Description: The cookie parsing code in Django before 1.8.15 and 1.9.x before 1.9.10, when used on a site with Google Analytics, allows remote attackers to bypass an intended CSRF protection mechanism by setting arbitrary cookies.
+    # TODO: This is known issue, and we need to backport the patch: https://github.com/django/django/commit/6118ab7d0676f0d622278e5be215f14fb5410b6a
+    25718
+    # django, installed 1.6.11, affected >=1.5,<1.7, id 25725
+    # Description: The session backends in Django before 1.4.21, 1.5.x through 1.6.x, 1.7.x before 1.7.9, and 1.8.x before 1.8.3 allows remote attackers to cause a denial of service (session store consumption) via multiple requests with unique session keys.
+    # Reason: This does not apply to us with the cookie based session backend.
+    25725
+)
+
+args="--full-report"
+for i in ${ignored[@]}; do
+  args="$args --ignore=${i}"
+done
+
+exec safety check ${args}
