commit 06651ffab2187b1d715c732f1d7dce234c6c9bda
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Nov 26 20:38:30 2015 +0100

    Make a file pass the linter.

diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.js
index 6299b700c0..573d58fe69 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.js
@@ -7,7 +7,7 @@ describe('SelectedGroupStore', function() {
     SelectedGroupStore.records = {};
 
     this.sandbox = sinon.sandbox.create();
-    this.trigger = this.sandbox.spy(SelectedGroupStore, "trigger");
+    this.trigger = this.sandbox.spy(SelectedGroupStore, 'trigger');
   });
 
   afterEach(function() {
@@ -16,15 +16,15 @@ describe('SelectedGroupStore', function() {
 
   describe('prune()', function() {
 
-    it("removes records no longer in the GroupStore", function() {
-      this.sandbox.stub(GroupStore, 'getAllItemIds', () => ["3"]);
+    it('removes records no longer in the GroupStore', function() {
+      this.sandbox.stub(GroupStore, 'getAllItemIds', () => ['3']);
       SelectedGroupStore.records = { 1: true, 2: true, 3: true };
       SelectedGroupStore.prune();
       expect(SelectedGroupStore.records).to.eql({ 3: true });
     });
 
-    it("doesn't have any effect when already in sync", function() {
-      this.sandbox.stub(GroupStore, "getAllItemIds", () => ["1", "2", "3"]);
+    it('doesn\'t have any effect when already in sync', function() {
+      this.sandbox.stub(GroupStore, 'getAllItemIds', () => ['1', '2', '3']);
       SelectedGroupStore.records = { 1: true, 2: true, 3: true };
       SelectedGroupStore.prune();
       expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true, 3: true });
@@ -34,13 +34,13 @@ describe('SelectedGroupStore', function() {
 
   describe('add()', function() {
 
-    it("defaults value of new ids to 'allSelected()'", function() {
+    it('defaults value of new ids to \'allSelected()\'', function() {
       SelectedGroupStore.records = { 1: true };
       SelectedGroupStore.add([2]);
       expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true });
     });
 
-    it("does not update existing ids", function() {
+    it('does not update existing ids', function() {
       SelectedGroupStore.records = { 1: false, 2: true };
       SelectedGroupStore.add([3]);
       expect(SelectedGroupStore.records).to.eql({ 1: false, 2: true, 3: false });
@@ -51,21 +51,21 @@ describe('SelectedGroupStore', function() {
   describe('onGroupChange()', function() {
 
     beforeEach(function() {
-      this.prune = this.sandbox.stub(SelectedGroupStore, "prune");
-      this.add = this.sandbox.stub(SelectedGroupStore, "add");
+      this.prune = this.sandbox.stub(SelectedGroupStore, 'prune');
+      this.add = this.sandbox.stub(SelectedGroupStore, 'add');
     });
 
-    it("adds new ids", function() {
+    it('adds new ids', function() {
       SelectedGroupStore.onGroupChange([]);
       expect(this.add.called).to.be.true;
     });
 
-    it("prunes stale records", function() {
+    it('prunes stale records', function() {
       SelectedGroupStore.onGroupChange([]);
       expect(this.prune.called).to.be.true;
     });
 
-    it("triggers an update", function() {
+    it('triggers an update', function() {
       SelectedGroupStore.onGroupChange([]);
       expect(this.trigger.called).to.be.true;
     });
@@ -74,22 +74,22 @@ describe('SelectedGroupStore', function() {
 
   describe('allSelected()', function() {
 
-    it("returns true when all ids are selected", function() {
+    it('returns true when all ids are selected', function() {
       SelectedGroupStore.records = { 1: true, 2: true };
       expect(SelectedGroupStore.allSelected()).to.be.true;
     });
 
-    it("returns false when some ids are selected", function() {
+    it('returns false when some ids are selected', function() {
       SelectedGroupStore.records = { 1: true, 2: false };
       expect(SelectedGroupStore.allSelected()).to.be.false;
     });
 
-    it("returns false when no ids are selected", function() {
+    it('returns false when no ids are selected', function() {
       SelectedGroupStore.records = { 1: false, 2: false };
       expect(SelectedGroupStore.allSelected()).to.be.false;
     });
 
-    it("returns false when there are no ids", function() {
+    it('returns false when there are no ids', function() {
       expect(SelectedGroupStore.allSelected()).to.be.false;
     });
 
@@ -97,12 +97,12 @@ describe('SelectedGroupStore', function() {
 
   describe('anySelected()', function() {
 
-    it("returns true if any ids are selected", function() {
+    it('returns true if any ids are selected', function() {
       SelectedGroupStore.records = { 1: true, 2: false };
       expect(SelectedGroupStore.anySelected()).to.be.true;
     });
 
-    it("returns false when no ids are selected", function() {
+    it('returns false when no ids are selected', function() {
       SelectedGroupStore.records = { 1: false, 2: false };
       expect(SelectedGroupStore.anySelected()).to.be.false;
     });
@@ -111,17 +111,17 @@ describe('SelectedGroupStore', function() {
 
   describe('multiSelected()', function() {
 
-    it("returns true when multiple ids are selected", function() {
+    it('returns true when multiple ids are selected', function() {
       SelectedGroupStore.records = { 1: true, 2: true, 3: false };
       expect(SelectedGroupStore.multiSelected()).to.be.true;
     });
 
-    it("returns false when a single id is selected", function() {
+    it('returns false when a single id is selected', function() {
       SelectedGroupStore.records = { 1: true, 2: false };
       expect(SelectedGroupStore.multiSelected()).to.be.false;
     });
 
-    it("returns false when no ids are selected", function() {
+    it('returns false when no ids are selected', function() {
       SelectedGroupStore.records = { 1: false, 2: false };
       expect(SelectedGroupStore.multiSelected()).to.be.false;
     });
@@ -130,20 +130,20 @@ describe('SelectedGroupStore', function() {
 
   describe('getSelectedIds()', function() {
 
-    it("returns selected ids", function() {
+    it('returns selected ids', function() {
       SelectedGroupStore.records = { 1: true, 2: false, 3: true };
       var ids = SelectedGroupStore.getSelectedIds();
 
-      expect(ids.has("1")).to.be.true;
-      expect(ids.has("3")).to.be.true;
+      expect(ids.has('1')).to.be.true;
+      expect(ids.has('3')).to.be.true;
       expect(ids.size).to.eql(2);
     });
 
-    it("returns empty set with no selected ids", function() {
+    it('returns empty set with no selected ids', function() {
       SelectedGroupStore.records = { 1: false };
       var ids = SelectedGroupStore.getSelectedIds();
 
-      expect(ids.has("1")).to.be.false;
+      expect(ids.has('1')).to.be.false;
       expect(ids.size).to.eql(0);
     });
 
@@ -151,12 +151,12 @@ describe('SelectedGroupStore', function() {
 
   describe('isSelected()', function() {
 
-    it("returns true if id is selected", function() {
+    it('returns true if id is selected', function() {
       SelectedGroupStore.records = { 1: true };
       expect(SelectedGroupStore.isSelected(1)).to.be.true;
     });
 
-    it("returns false if id is unselected or unknown", function() {
+    it('returns false if id is unselected or unknown', function() {
       SelectedGroupStore.records = { 1: false };
       expect(SelectedGroupStore.isSelected(1)).to.be.false;
       expect(SelectedGroupStore.isSelected(2)).to.be.false;
@@ -167,13 +167,13 @@ describe('SelectedGroupStore', function() {
 
   describe('deselectAll()', function() {
 
-    it("sets all records to false", function() {
+    it('sets all records to false', function() {
       SelectedGroupStore.records = { 1: true, 2: true, 3: false };
       SelectedGroupStore.deselectAll();
       expect(SelectedGroupStore.records).to.eql({ 1: false, 2: false, 3: false });
     });
 
-    it("triggers an update", function() {
+    it('triggers an update', function() {
       SelectedGroupStore.deselectAll();
       expect(this.trigger.called).to.be.true;
     });
@@ -182,26 +182,26 @@ describe('SelectedGroupStore', function() {
 
   describe('toggleSelect()', function() {
 
-    it("toggles state given pre-existing id", function() {
+    it('toggles state given pre-existing id', function() {
       SelectedGroupStore.records = { 1: true };
       SelectedGroupStore.toggleSelect(1);
       expect(SelectedGroupStore.records[1]).to.be.false;
     });
 
-    it("does not toggle state given unknown id", function() {
+    it('does not toggle state given unknown id', function() {
       SelectedGroupStore.toggleSelect(1);
       SelectedGroupStore.toggleSelect();
       SelectedGroupStore.toggleSelect(undefined);
       expect(SelectedGroupStore.records).to.eql({});
     });
 
-    it("triggers an update given pre-existing id", function() {
+    it('triggers an update given pre-existing id', function() {
       SelectedGroupStore.records = { 1: true };
       SelectedGroupStore.toggleSelect(1);
       expect(this.trigger.called).to.be.true;
     });
 
-    it("does not trigger an update given unknown id", function() {
+    it('does not trigger an update given unknown id', function() {
       SelectedGroupStore.toggleSelect();
       expect(this.trigger.called).to.be.false;
     });
@@ -209,19 +209,19 @@ describe('SelectedGroupStore', function() {
 
   describe('toggleSelectAll()', function() {
 
-    it("selects all ids if any are unselected", function() {
+    it('selects all ids if any are unselected', function() {
       SelectedGroupStore.records = { 1: true, 2: false };
       SelectedGroupStore.toggleSelectAll();
       expect(SelectedGroupStore.records).to.eql({ 1: true, 2: true });
     });
 
-    it("unselects all ids if all are selected", function() {
+    it('unselects all ids if all are selected', function() {
       SelectedGroupStore.records = { 1: true, 2: true };
       SelectedGroupStore.toggleSelectAll();
       expect(SelectedGroupStore.records).to.eql({ 1: false, 2: false });
     });
 
-    it("triggers an update", function() {
+    it('triggers an update', function() {
       SelectedGroupStore.toggleSelectAll();
       expect(this.trigger.called).to.be.true;
     });
