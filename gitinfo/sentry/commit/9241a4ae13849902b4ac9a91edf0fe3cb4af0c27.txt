commit 9241a4ae13849902b4ac9a91edf0fe3cb4af0c27
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Jan 16 12:47:32 2019 -0800

    ref(issues): Refactor group tags (#11508)
    
    Refactor group tags to make the bulk of this component sharable for
    organization level group tags. Environment filtering will be handled
    slightly differently at the org level.

diff --git a/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx b/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
index 3b637fa7dd..7aee98eae1 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/project/groupTags.jsx
@@ -1,162 +1,39 @@
 import React from 'react';
-import createReactClass from 'create-react-class';
-import {Link} from 'react-router';
-import {Box, Flex} from 'grid-emotion';
-
 import SentryTypes from 'app/sentryTypes';
-import ApiMixin from 'app/mixins/apiMixin';
-import Count from 'app/components/count';
-import DeviceName from 'app/components/deviceName';
-import ProjectState from 'app/mixins/projectState';
-import LoadingError from 'app/components/loadingError';
-import LoadingIndicator from 'app/components/loadingIndicator';
-import {percent} from 'app/utils';
-import {t, tct} from 'app/locale';
 import withEnvironmentInQueryString from 'app/utils/withEnvironmentInQueryString';
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import Alert from 'app/components/alert';
-
-const GroupTags = createReactClass({
-  displayName: 'GroupTags',
+import GroupTags from '../shared/groupTags';
 
-  propTypes: {
-    group: SentryTypes.Group,
+class ProjectGroupTags extends React.Component {
+  static propTypes = {
+    group: SentryTypes.Group.isRequired,
     environment: SentryTypes.Environment,
-  },
+  };
 
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    return {
-      tagList: null,
-      loading: true,
-      error: false,
-      environment: this.props.environment,
+  constructor(props) {
+    super(props);
+    this.state = {
+      query: this.getQueryFromEnvironment(props.environment),
     };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
+  }
   componentWillReceiveProps(nextProps) {
     if (nextProps.environment !== this.props.environment) {
-      this.setState({environment: nextProps.environment}, this.fetchData);
-    }
-  },
-
-  fetchData() {
-    this.setState({
-      loading: true,
-      error: false,
-    });
-
-    const query = {};
-    if (this.state.environment) {
-      query.environment = this.state.environment.name;
+      this.setState({query: this.getQueryFromEnvironment(nextProps.environment)});
     }
+  }
 
-    // TODO(dcramer): each tag should be a separate query as the tags endpoint
-    // is not performant
-    this.api.request('/issues/' + this.props.group.id + '/tags/', {
-      query,
-      success: data => {
-        this.setState({
-          tagList: data,
-          error: false,
-          loading: false,
-        });
-      },
-      error: error => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-      },
-    });
-  },
-
-  getTagsDocsUrl() {
-    return 'https://docs.sentry.io/hosted/learn/context/';
-  },
+  getQueryFromEnvironment(environment) {
+    return environment ? {environment: environment.name} : {};
+  }
 
   render() {
-    if (this.state.loading) {
-      return <LoadingIndicator />;
-    } else if (this.state.error) {
-      return <LoadingError onRetry={this.fetchData} />;
-    }
-
-    let children = [];
-
-    let orgId = this.getOrganization().slug;
-    let projectId = this.getProject().slug;
-    let groupId = this.props.group.id;
-
-    if (this.state.tagList) {
-      children = this.state.tagList.map((tag, tagIdx) => {
-        let valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {
-          let pct = percent(tagValue.count, tag.totalValues);
-          return (
-            <li key={tagValueIdx}>
-              <Link
-                className="tag-bar"
-                to={{
-                  pathname: `/${orgId}/${projectId}/issues/${groupId}/events/`,
-                  query: {query: tag.key + ':' + '"' + tagValue.value + '"'},
-                }}
-              >
-                <span className="tag-bar-background" style={{width: pct + '%'}} />
-                <span className="tag-bar-label">
-                  <DeviceName>{tagValue.name}</DeviceName>
-                </span>
-                <span className="tag-bar-count">
-                  <Count value={tagValue.count} />
-                </span>
-              </Link>
-            </li>
-          );
-        });
-
-        return (
-          <Box key={tagIdx} px={1} width={0.5}>
-            <Panel>
-              <PanelHeader hasButtons style={{textTransform: 'none'}}>
-                <div style={{fontSize: 16}}>{tag.key}</div>
-                <Flex>
-                  <Link
-                    className="btn btn-default btn-sm"
-                    to={`/${orgId}/${projectId}/issues/${groupId}/tags/${tag.key}/`}
-                  >
-                    {t('More Details')}
-                  </Link>
-                </Flex>
-              </PanelHeader>
-              <PanelBody disablePadding={false}>
-                <ul style={{listStyleType: 'none', padding: 0, margin: 0}}>
-                  {valueChildren}
-                </ul>
-              </PanelBody>
-            </Panel>
-          </Box>
-        );
-      });
-    }
-
     return (
-      <div>
-        <Flex wrap="wrap">{children}</Flex>
-        <Alert type="info">
-          {tct(
-            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',
-            {
-              link: <a href={this.getTagsDocsUrl()} />,
-            }
-          )}
-        </Alert>
-      </div>
+      <GroupTags
+        group={this.props.group}
+        params={this.props.params}
+        query={this.state.query}
+      />
     );
-  },
-});
+  }
+}
 
-export default withEnvironmentInQueryString(GroupTags);
+export default withEnvironmentInQueryString(ProjectGroupTags);
diff --git a/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx
new file mode 100644
index 0000000000..3ae18bbd55
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/shared/groupTags.jsx
@@ -0,0 +1,156 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+import {Link} from 'react-router';
+import {Box, Flex} from 'grid-emotion';
+
+import SentryTypes from 'app/sentryTypes';
+import Count from 'app/components/count';
+import DeviceName from 'app/components/deviceName';
+import LoadingError from 'app/components/loadingError';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import {percent} from 'app/utils';
+import {t, tct} from 'app/locale';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import Alert from 'app/components/alert';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+class GroupTags extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+    group: SentryTypes.Group.isRequired,
+    api: PropTypes.object.isRequired,
+    query: PropTypes.object.isRequired,
+    params: PropTypes.object.isRequired,
+  };
+
+  constructor() {
+    super();
+    this.state = {
+      tagList: null,
+      loading: true,
+      error: false,
+    };
+  }
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(prevProps) {
+    if (prevProps.query !== this.props.query) {
+      this.fetchData();
+    }
+  }
+
+  fetchData() {
+    const {api, query, group} = this.props;
+    this.setState({
+      loading: true,
+      error: false,
+    });
+
+    api.request('/issues/' + group.id + '/tags/', {
+      query,
+      success: data => {
+        this.setState({
+          tagList: data,
+          error: false,
+          loading: false,
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+      },
+    });
+  }
+
+  getTagsDocsUrl() {
+    return 'https://docs.sentry.io/hosted/learn/context/';
+  }
+
+  render() {
+    const {group, organization, params} = this.props;
+
+    let children = [];
+
+    const baseUrl = params.projectId
+      ? `/${organization.slug}/${group.project.slug}/issues/`
+      : `/organizations/${organization.slug}/issues/`;
+
+    if (this.state.loading) {
+      return <LoadingIndicator />;
+    } else if (this.state.error) {
+      return <LoadingError onRetry={this.fetchData} />;
+    }
+
+    if (this.state.tagList) {
+      children = this.state.tagList.map((tag, tagIdx) => {
+        let valueChildren = tag.topValues.map((tagValue, tagValueIdx) => {
+          let pct = percent(tagValue.count, tag.totalValues);
+          return (
+            <li key={tagValueIdx}>
+              <Link
+                className="tag-bar"
+                to={{
+                  pathname: `${baseUrl}${group.id}/events/`,
+                  query: {query: tag.key + ':' + '"' + tagValue.value + '"'},
+                }}
+              >
+                <span className="tag-bar-background" style={{width: pct + '%'}} />
+                <span className="tag-bar-label">
+                  <DeviceName>{tagValue.name}</DeviceName>
+                </span>
+                <span className="tag-bar-count">
+                  <Count value={tagValue.count} />
+                </span>
+              </Link>
+            </li>
+          );
+        });
+
+        return (
+          <Box key={tagIdx} px={1} width={0.5}>
+            <Panel>
+              <PanelHeader hasButtons style={{textTransform: 'none'}}>
+                <div style={{fontSize: 16}}>{tag.key}</div>
+                <Flex>
+                  <Link
+                    className="btn btn-default btn-sm"
+                    to={`${baseUrl}${group.id}/tags/${tag.key}/`}
+                  >
+                    {t('More Details')}
+                  </Link>
+                </Flex>
+              </PanelHeader>
+              <PanelBody disablePadding={false}>
+                <ul style={{listStyleType: 'none', padding: 0, margin: 0}}>
+                  {valueChildren}
+                </ul>
+              </PanelBody>
+            </Panel>
+          </Box>
+        );
+      });
+    }
+
+    return (
+      <div>
+        <Flex wrap="wrap">{children}</Flex>
+        <Alert type="info">
+          {tct(
+            'Tags are automatically indexed for searching and breakdown charts. Learn how to [link: add custom tags to issues]',
+            {
+              link: <a href={this.getTagsDocsUrl()} />,
+            }
+          )}
+        </Alert>
+      </div>
+    );
+  }
+}
+
+export default withApi(withOrganization(GroupTags));
