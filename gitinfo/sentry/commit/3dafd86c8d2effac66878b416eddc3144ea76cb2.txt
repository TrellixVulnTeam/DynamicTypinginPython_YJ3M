commit 3dafd86c8d2effac66878b416eddc3144ea76cb2
Author: Danny Lee <dlee@sentry.io>
Date:   Thu Feb 20 10:45:52 2020 -0800

    feat(discover2): Link Dashboard graphs to Discover2 (#17037)

diff --git a/.vscode/settings.json b/.vscode/settings.json
index 23078470ba..4fc679204f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -67,5 +67,6 @@
   "python.linting.enabled": true,
   "python.linting.flake8Path": "${workspaceFolder}/.venv/bin/flake8",
   "python.linting.pycodestylePath": "${workspaceFolder}/.venv/bin/pep8",
-  "python.testing.pytestPath": "${workspaceFolder}/.venv/bin/pytest"
+  "python.testing.pytestPath": "${workspaceFolder}/.venv/bin/pytest",
+  "python.formatting.provider": "black"
 }
diff --git a/src/sentry/static/sentry/app/views/dashboards/exploreWidget.jsx b/src/sentry/static/sentry/app/views/dashboards/exploreWidget.jsx
index 810179cff9..7edabdc508 100644
--- a/src/sentry/static/sentry/app/views/dashboards/exploreWidget.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/exploreWidget.jsx
@@ -2,17 +2,20 @@ import React from 'react';
 import styled from '@emotion/styled';
 import omit from 'lodash/omit';
 
-import {getDiscoverUrlPathFromDiscoverQuery} from 'app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery';
-import {getEventsUrlPathFromDiscoverQuery} from 'app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery';
 import {t} from 'app/locale';
-import Button from 'app/components/button';
-import DropdownMenu from 'app/components/dropdownMenu';
-import Feature from 'app/components/acl/feature';
-import InlineSvg from 'app/components/inlineSvg';
 import SentryTypes from 'app/sentryTypes';
 import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
+import Button from 'app/components/button';
+import DropdownMenu from 'app/components/dropdownMenu';
+import InlineSvg from 'app/components/inlineSvg';
+import {
+  getDiscoverUrlPathFromDiscoverQuery,
+  getDiscover2UrlPathFromDiscoverQuery,
+} from 'app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery';
+import {getEventsUrlPathFromDiscoverQuery} from 'app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery';
+
 class ExploreWidget extends React.Component {
   static propTypes = {
     widget: SentryTypes.Widget,
@@ -20,13 +23,11 @@ class ExploreWidget extends React.Component {
     selection: SentryTypes.GlobalSelection,
   };
 
-  getExportToDiscover = query => {
+  getExportToDiscover = (query, isDiscover2 = false) => {
     const {selection, organization} = this.props;
-    return getDiscoverUrlPathFromDiscoverQuery({
-      organization,
-      selection,
-      query,
-    });
+    return isDiscover2
+      ? getDiscover2UrlPathFromDiscoverQuery({organization, selection, query})
+      : getDiscoverUrlPathFromDiscoverQuery({organization, selection, query});
   };
 
   getExportToEvents = query => {
@@ -38,57 +39,153 @@ class ExploreWidget extends React.Component {
     });
   };
 
+  // TODO(discover1): Can be removed when Discover1 is deprecated
+  // Copied from https://github.com/getsentry/sentry/blob/8d31f8651558b3f9a5f65dc45e0f439c5ac19d55/src/sentry/static/sentry/app/components/sidebar/index.jsx#L230-L278
+  getDiscoverFlags(organization) {
+    const flags = {
+      discover1: false,
+      discover2: false,
+      events: false,
+    };
+
+    // Bail as we can't do any more checks.
+    if (!organization || !organization.features) {
+      return flags;
+    }
+
+    // Localstorage returns either null, 1 or 2. Default to 2.
+    const version = String(localStorage.getItem('discover:version') || 2);
+    const features = organization.features;
+
+    if (features.includes('discover-basic')) {
+      // If there is no opt-out state show discover2
+      if (!version || version === '2') {
+        flags.discover2 = true;
+      }
+      // User wants discover1
+      if (version === '1') {
+        flags.discover1 = true;
+        flags.events = true;
+      }
+      return flags;
+    }
+
+    // If an account has the old features they continue to have
+    // access to them.
+    if (features.includes('discover')) {
+      flags.discover1 = true;
+    }
+    if (features.includes('events')) {
+      flags.events = true;
+    }
+
+    // If an organization doesn't have events, or discover-basic
+    // Enable the tab so we can show an upsell state in saas.
+    if (!flags.events) {
+      flags.discover2 = true;
+    }
+
+    return flags;
+  }
+
+  renderActionToDiscover1(query, flags) {
+    // Hide if preference is Discover2
+    if (flags.discover2) {
+      return null;
+    }
+
+    if (!flags.discover1) {
+      return null;
+    }
+
+    return (
+      <ExploreAction
+        to={this.getExportToDiscover(query)}
+        title={
+          flags.discover1
+            ? t('Explore data in Discover')
+            : t('You do not have access to Discover')
+        }
+      >
+        <InlineSvg src="icon-discover" />
+      </ExploreAction>
+    );
+  }
+
+  renderActionToDiscover2(query, flags) {
+    // If Discover1 is the preference, do not show
+    if (flags.discover1 && flags.events && !flags.discover2) {
+      return null;
+    }
+
+    return (
+      <ExploreAction
+        to={flags.discover2 ? this.getExportToDiscover(query, true) : ''}
+        href={!flags.discover2 ? 'https://docs.sentry.io/workflow/discover2/' : ''}
+        target={!flags.discover2 ? '_blank' : ''}
+        title={
+          flags.discover2
+            ? t('Explore data in the new Discover')
+            : t('You do not have access to the new Discover. Click to learn more.')
+        }
+      >
+        <InlineSvg src="icon-telescope" />
+      </ExploreAction>
+    );
+  }
+
+  renderActionToEvent(query, flags) {
+    // Hide if preference is Discover2
+    if (flags.discover2) {
+      return null;
+    }
+
+    if (!flags.events) {
+      return null;
+    }
+
+    return (
+      <ExploreAction
+        to={this.getExportToEvents(query)}
+        title={
+          flags.events
+            ? t('Explore data in Events')
+            : t('You do not have access to Events')
+        }
+      >
+        <InlineSvg src="icon-stack" />
+      </ExploreAction>
+    );
+  }
+
   render() {
     const {organization, widget} = this.props;
     const discoverQueries = widget.queries.discover;
+    const flags = this.getDiscoverFlags(organization);
 
     return (
       <DropdownMenu>
-        {({isOpen, getRootProps, getActorProps, getMenuProps}) => {
-          return (
-            <ExploreRoot {...getRootProps()} isOpen={isOpen}>
-              <div {...getActorProps()}>
-                <ExploreButton isOpen={isOpen}>
-                  {t('Explore Data')}
-                  <Chevron isOpen={isOpen} src="icon-chevron-right" />
-                </ExploreButton>
-              </div>
-              <ExploreMenu {...getMenuProps({isOpen})}>
-                {discoverQueries.map(query => (
-                  <ExploreRow key={query.name}>
-                    <QueryName>{query.name}</QueryName>
-
-                    <Feature features={['discover']} organization={organization}>
-                      {({hasFeature}) => (
-                        <ExploreAction
-                          to={this.getExportToDiscover(query)}
-                          disabled={!hasFeature}
-                          title={
-                            hasFeature ? '' : t('You do not have access to Discover')
-                          }
-                        >
-                          <InlineSvg src="icon-discover" />
-                        </ExploreAction>
-                      )}
-                    </Feature>
-
-                    <Feature features={['events']} organization={organization}>
-                      {({hasFeature}) => (
-                        <ExploreAction
-                          to={this.getExportToEvents(query)}
-                          disabled={!hasFeature}
-                          title={hasFeature ? '' : t('You do not have access to Events')}
-                        >
-                          <InlineSvg src="icon-stack" />
-                        </ExploreAction>
-                      )}
-                    </Feature>
-                  </ExploreRow>
-                ))}
-              </ExploreMenu>
-            </ExploreRoot>
-          );
-        }}
+        {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
+          <ExploreRoot {...getRootProps()} isOpen={isOpen}>
+            <div {...getActorProps()}>
+              <ExploreButton isOpen={isOpen}>
+                {t('Explore Data')}
+                <Chevron isOpen={isOpen} src="icon-chevron-right" />
+              </ExploreButton>
+            </div>
+            <ExploreMenu {...getMenuProps({isOpen})}>
+              {discoverQueries.map(query => (
+                <ExploreRow key={query.name}>
+                  <QueryName>{query.name}</QueryName>
+
+                  {this.renderActionToDiscover1(query, flags)}
+                  {this.renderActionToDiscover2(query, flags)}
+                  {this.renderActionToEvent(query, flags)}
+                </ExploreRow>
+              ))}
+            </ExploreMenu>
+          </ExploreRoot>
+        )}
       </DropdownMenu>
     );
   }
@@ -118,7 +215,7 @@ const ExploreButton = styled(props => {
   }
 
   /* covers up borders to create a continous shape */
-  ${p => (p.isOpen ? '&, &:hover, &:active { box-shadow: 0 -1px 0 #fff; }' : '')};
+  ${p => (p.isOpen ? '&, &:hover, &:active { box-shadow: 0 -1px 0 #fff; }' : '')}
 `;
 
 const ExploreMenu = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
index b6ccca054e..bd025eb506 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
@@ -1,3 +1,5 @@
+import qs from 'query-string';
+
 import {getExternal, getInternal} from 'app/views/discover/aggregations/utils';
 import {getQueryStringFromQuery} from 'app/views/discover/utils';
 
@@ -38,3 +40,70 @@ export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, qu
     limit: 1000,
   })}&visualization=${visual}`;
 }
+
+export function getDiscover2UrlPathFromDiscoverQuery({
+  organization,
+  selection,
+  query: d1Query,
+}) {
+  const d2Query = {
+    name: d1Query.name,
+    field: ['title', ...d1Query.fields],
+    sort: d1Query.orderby,
+    statsPeriod: selection?.datetime?.period,
+  };
+
+  const queryQueries = (d1Query.conditions || []).map(c => {
+    const tag = c[0] || '';
+    const val = c[2] || '';
+
+    const operator = c[1] || '';
+    const isNot = operator.includes('!') || operator.includes('NOT');
+    const isNull = operator.includes('NULL');
+    const isLike = operator.includes('LIKE') || operator.includes('*');
+    const hasSpace = val.includes(' ');
+
+    // Put condition into the columns
+    if (!d2Query.field.includes(tag)) {
+      d2Query.field.push(tag);
+    }
+
+    // Build the query
+    const q = [];
+    if (isNot) {
+      q.push('!');
+    }
+
+    q.push(tag);
+    q.push(':');
+
+    // Quote open
+    if (isNull || hasSpace) {
+      q.push('"');
+    }
+
+    // Wildcard open
+    if (isLike) {
+      q.push('*');
+    }
+
+    q.push(val);
+
+    // Wildcard close
+    if (isLike) {
+      q.push('*');
+    }
+
+    // Quote close
+    if (isNull || hasSpace) {
+      q.push('"');
+    }
+
+    return q.join('');
+  });
+
+  d2Query.field.push('count()');
+  d2Query.query = queryQueries.join(' ');
+
+  return `/organizations/${organization.slug}/discover/results/?${qs.stringify(d2Query)}`;
+}
