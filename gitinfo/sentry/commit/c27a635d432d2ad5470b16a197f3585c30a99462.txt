commit c27a635d432d2ad5470b16a197f3585c30a99462
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Fri Jun 22 12:09:56 2018 -0700

    feat(issue sync): Add helper methods for assigning sentry issues from external

diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 8575d4301b..ef9bd60425 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -1,13 +1,15 @@
 """
 sentry.models.groupassignee
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
 :copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
 :license: BSD, see LICENSE for more details.
 """
 from __future__ import absolute_import
+import logging
 import six
 
+from collections import defaultdict
+
 from django.conf import settings
 from django.db import models
 from django.utils import timezone
@@ -18,6 +20,94 @@ from sentry.models.activity import Activity
 from sentry.signals import issue_assigned
 
 
+def get_user_project_ids(users):
+    """
+    Given a list of users, return a dict where keys are user_ids
+    and values are a set of the project_ids the user is a member of
+    """
+    from sentry.models import OrganizationMemberTeam, ProjectTeam
+    user_teams = list(OrganizationMemberTeam.objects.filter(
+        organizationmember__user__in=users,
+        is_active=True,
+    ).values('organizationmember__user', 'team'))
+
+    # team_id to list of projects
+    projects_by_team = defaultdict(set)
+    for tp in ProjectTeam.objects.filter(team__in=[ut['team'] for ut in user_teams]):
+        projects_by_team[tp.team_id].add(tp.project_id)
+
+    # user_id to projects
+    projects_by_user = defaultdict(set)
+    for ut in user_teams:
+        projects_by_user[ut['organizationmember__user']].update(projects_by_team[ut['team']])
+
+    return projects_by_user
+
+
+def sync_group_assignee_inbound(integration, email, external_issue_key, assign=True):
+    """
+    Given an integration, user email address and an external issue key,
+    assign linked groups to matching users. Checks project membership.
+    Returns a list of groups that were successfully assigned.
+    """
+    from sentry.models import Group, GroupLink, ExternalIssue, UserEmail, User
+
+    logger = logging.getLogger('sentry.integrations.%s' % integration.provider)
+
+    affected_groups = list(
+        Group.objects.filter(
+            id__in=GroupLink.objects.filter(
+                linked_id__in=ExternalIssue.objects.filter(
+                    key=external_issue_key,
+                    integration_id=integration.id,
+                    organization_id__in=integration.organizations.values_list('id', flat=True),
+                ).values_list('id', flat=True),
+            ).values_list('group_id', flat=True),
+            project__organization_id__in=integration.organizations.values_list('id', flat=True),
+        )
+    )
+
+    if not affected_groups:
+        return []
+
+    if not assign:
+        for group in affected_groups:
+            GroupAssignee.objects.deassign(group)
+        return affected_groups
+
+    users = {u.id: u for u in User.objects.filter(
+        id__in=UserEmail.objects.filter(
+            is_verified=True,
+            email=email,
+        ).values_list('user_id', flat=True),
+    )}
+
+    projects_by_user = get_user_project_ids(users.values())
+
+    groups_assigned = []
+    for group in affected_groups:
+        try:
+            user_id = [
+                user_id for user_id, projects in projects_by_user.items()
+                if group.project_id in projects
+            ][0]
+        except IndexError:
+            logger.info(
+                'assignee-not-found-inbound',
+                extra={
+                    'integration_id': integration.id,
+                    'email': email,
+                    'issue_key': external_issue_key,
+                }
+            )
+        else:
+            user = users[user_id]
+            GroupAssignee.objects.assign(group, user)
+            groups_assigned.append(group)
+
+    return groups_assigned
+
+
 def sync_group_assignee_outbound(group, user_id, assign=True):
     from sentry.tasks.integrations import sync_assignee_outbound
     from sentry.models import GroupLink
