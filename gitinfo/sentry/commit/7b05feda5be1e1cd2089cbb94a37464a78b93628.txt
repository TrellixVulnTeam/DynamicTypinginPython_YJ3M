commit 7b05feda5be1e1cd2089cbb94a37464a78b93628
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 3 12:30:24 2015 +0100

    Improve handle of filter input in project selector

diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index 2da23440fd..d493398c2f 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -11,7 +11,9 @@ var DropdownLink = React.createClass({
   propTypes: {
     title:     React.PropTypes.node,
     caret:     React.PropTypes.bool,
-    disabled:  React.PropTypes.bool
+    disabled:  React.PropTypes.bool,
+    onOpen:    React.PropTypes.func,
+    onClose:   React.PropTypes.func,
   },
 
   getDefaultProps() {
@@ -24,9 +26,12 @@ var DropdownLink = React.createClass({
   componentDidMount() {
     var $container = $(this.refs.container.getDOMNode());
     var $menu = $(this.refs.menu.getDOMNode());
-    $container.on('shown.bs.dropdown', () => {
-      $menu.find('input[type=text]').focus();
-    });
+    if (this.props.onOpen) {
+      $container.on('shown.bs.dropdown', this.props.onOpen);
+    }
+    if (this.props.onClose) {
+      $container.on('hidden.bs.dropdown', this.props.onClose);
+    }
     $(this.refs.toggle.getDOMNode()).dropdown();
   },
 
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 82247c5548..36c8d2790f 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -27,42 +27,76 @@ var ProjectSelector = React.createClass({
     };
   },
 
+  getInitialState() {
+    return {
+      filter: ''
+    };
+  },
+
+  onFilterChange(e) {
+    this.setState({
+      filter: e.target.value
+    });
+  },
+
+  getProjectNode(team, project) {
+    var org = this.props.organization;
+    var projectRouteParams = {
+      orgId: org.slug,
+      projectId: project.slug
+    };
+    return (
+      <MenuItem key={project.slug} to="projectDetails"
+                params={projectRouteParams}>
+        {project.name}
+      </MenuItem>
+    );
+  },
+
+  onOpen(event) {
+    $(event.target).find('input[type=text]').focus();
+  },
+
+  onClose(event) {
+    this.setState({
+      filter: ''
+    });
+    $(this.refs.filter.getDOMNode()).val('');
+  },
+
   render() {
     var projectId = this.props.projectId;
     var org = this.props.organization;
-    var projectList = [];
+    var urlPrefix = ConfigStore.get('urlPrefix');
+    var children = [];
     org.teams.forEach((team) => {
+      var hasTeam = false;
       team.projects.forEach((project) => {
         if (project.slug == this.props.projectId) {
           activeTeam = team;
           activeProject = project;
         }
-        projectList.push([team, project]);
+        var fullName = team.name + ' ' + project.name + ' ' + team.slug + ' ' + project.slug;
+        if (this.state.filter && fullName.indexOf(this.state.filter) === -1) {
+          return;
+        }
+        if (!hasTeam) {
+          children.push(<li className="team-name">{team.name}</li>);
+          hasTeam = true;
+        }
+        children.push(this.getProjectNode(team, project));
       });
     });
-    var urlPrefix = ConfigStore.get('urlPrefix');
     var title = <span>{activeTeam.name} / {activeProject.name}</span>;
 
     return (
-      <DropdownLink title={title} className="project-dropdown">
+      <DropdownLink title={title} className="project-dropdown"
+          onOpen={this.onOpen} onClose={this.onClose}>
         <li className="project-filter" key="filter">
-          <input type="text" placeholder="Filter projects" />
+          <input type="text" placeholder="Filter projects"
+                 onKeyUp={this.onFilterChange} ref="filter" />
         </li>
-        <li className="team-name">Captain Planet</li>
-        {projectList.map((item) => {
-          var team = item[0];
-          var project = item[1];
-          var projectRouteParams = {
-            orgId: org.slug,
-            projectId: project.slug
-          };
-          return (
-            <MenuItem key={project.slug} to="projectDetails"
-                      params={projectRouteParams}>
-              {team.name} / {project.name}
-            </MenuItem>
-          );
-        })}
+        {children}
         <li className="new-project" key="new-project">
           <a className="btn btn-primary"
              href={urlPrefix + '/organizations/' + org.slug + '/projects/new/'}>
