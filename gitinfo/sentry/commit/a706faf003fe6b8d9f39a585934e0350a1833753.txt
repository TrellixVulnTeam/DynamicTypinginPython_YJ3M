commit a706faf003fe6b8d9f39a585934e0350a1833753
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jan 18 10:58:54 2018 -0800

    fix(notifications): Unify Email Subjects (#6992)
    
    * Added shortID to exisiting messages.
    
    * Removed level tag from subjects.
    
    * Removed short_id from subject prefix test.
    
    * Added shortID to the list of things that can be added to the email subject template.

diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 1d49dcb1bb..e65963d532 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -284,6 +284,8 @@ class EventSubjectTemplateData(object):
             return self.event.project.get_full_name()
         elif name == 'projectID':
             return self.event.project.slug
+        elif name == 'shortID':
+            return self.event.group.qualified_short_id
         elif name == 'orgID':
             return self.event.organization.slug
         elif name == 'title':
@@ -291,4 +293,4 @@ class EventSubjectTemplateData(object):
         raise KeyError
 
 
-DEFAULT_SUBJECT_TEMPLATE = EventSubjectTemplate('[$project] ${tag:level}: $title')
+DEFAULT_SUBJECT_TEMPLATE = EventSubjectTemplate('$shortID - $title')
diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index 73ba07677e..0a95f0d601 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -10,7 +10,6 @@ from __future__ import absolute_import, print_function
 import logging
 import math
 import re
-import six
 import time
 import warnings
 
@@ -410,9 +409,8 @@ class Group(Model):
         return ''
 
     def get_email_subject(self):
-        return '[%s] %s: %s' % (
-            self.project.get_full_name().encode('utf-8'),
-            six.text_type(self.get_level_display()).upper().encode('utf-8'),
+        return '%s - %s' % (
+            self.qualified_short_id.encode('utf-8'),
             self.title.encode('utf-8')
         )
 
diff --git a/src/sentry/plugins/sentry_mail/activity/base.py b/src/sentry/plugins/sentry_mail/activity/base.py
index 7e712def80..78a9acffc8 100644
--- a/src/sentry/plugins/sentry_mail/activity/base.py
+++ b/src/sentry/plugins/sentry_mail/activity/base.py
@@ -102,8 +102,8 @@ class ActivityEmail(object):
     def get_subject(self):
         group = self.group
 
-        return u'[%s] %s: %s' % (
-            self.project.get_full_name(), group.get_level_display(), group.title
+        return u'%s - %s' % (
+            group.qualified_short_id, group.title
         )
 
     def get_subject_with_prefix(self):
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 377e1aa932..98899fb484 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -205,9 +205,9 @@ class MailPlugin(NotificationPlugin):
                 send_to=[user_id],
             )
 
-    def get_digest_subject(self, project, counts, date):
-        return u'[{project}] {count} new {noun} since {date}'.format(
-            project=project.get_full_name(),
+    def get_digest_subject(self, group, counts, date):
+        return u'{short_id} - {count} new {noun} since {date}'.format(
+            short_id=group.qualified_short_id,
             count=len(counts),
             noun='alert' if len(counts) == 1 else 'alerts',
             date=dateformat.format(date, 'N j, Y, P e'),
@@ -243,7 +243,8 @@ class MailPlugin(NotificationPlugin):
             'X-Sentry-Project': project.slug,
         }
 
-        subject = self.get_digest_subject(project, counts, start)
+        group = six.next(iter(counts))
+        subject = self.get_digest_subject(group, counts, start)
 
         for user_id in self.get_send_to(project):
             self.add_unsubscribe_link(context, user_id, project)
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index abafc647b1..a9aba80abe 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -103,7 +103,7 @@ class GeneralSettings extends React.Component {
               label={t('Subject template')}
               required={false}
               help={t(
-                'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'
+                'The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, $shortID, and ${tag:key}, such as ${tag:environment} or ${tag:release}.'
               )}
             />
           </ApiForm>
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index fa64fe7d18..a190342362 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -27,13 +27,13 @@ class EventTest(TestCase):
         )
         self.group.level = 30
 
-        assert event1.get_email_subject() == '[foo Bar] info: Foo bar'
-        assert event2.get_email_subject() == '[foo Bar] ERROR: Foo bar'
+        assert event1.get_email_subject() == 'BAR-1 - Foo bar'
+        assert event2.get_email_subject() == 'BAR-1 - Foo bar'
 
     def test_email_subject_with_template(self):
         self.project.update_option(
             'mail:subject_template',
-            '$project ${tag:environment}@${tag:release} $$ $title ${tag:invalid} $invalid'
+            '$shortID - ${tag:environment}@${tag:release} $$ $title ${tag:invalid} $invalid'
         )
 
         event1 = self.create_event(
@@ -45,7 +45,7 @@ class EventTest(TestCase):
             message='baz',
         )
 
-        assert event1.get_email_subject() == 'foo Bar production@0 $ baz ${tag:invalid} $invalid'
+        assert event1.get_email_subject() == 'BAR-1 - production@0 $ baz ${tag:invalid} $invalid'
 
     def test_as_dict_hides_client_ip(self):
         event = self.create_event(
diff --git a/tests/sentry/models/test_group.py b/tests/sentry/models/test_group.py
index 32cbcd1407..52b73e8279 100644
--- a/tests/sentry/models/test_group.py
+++ b/tests/sentry/models/test_group.py
@@ -224,3 +224,9 @@ class GroupTest(TestCase):
         assert group.first_release is None
         assert group.get_first_release() is None
         assert group.get_last_release() is None
+
+    def test_get_email_subject(self):
+        project = self.create_project()
+        group = self.create_group(project=project)
+
+        assert group.get_email_subject() == '%s - %s' % (group.qualified_short_id, group.title)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index ec469f7bc0..0abe390651 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -55,7 +55,7 @@ class MailPluginTest(TestCase):
             self.plugin.notify(notification)
 
         msg = mail.outbox[0]
-        assert msg.subject == '[Sentry] [foo Bar] error: Hello world'
+        assert msg.subject == '[Sentry] BAR-1 - Hello world'
         assert 'my rule' in msg.alternatives[0][0]
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
@@ -121,6 +121,7 @@ class MailPluginTest(TestCase):
             project=self.project,
             message='hello world',
             logger='root',
+            short_id=2,
         )
 
         event = Event(
@@ -142,9 +143,7 @@ class MailPluginTest(TestCase):
         args, kwargs = _send_mail.call_args
         self.assertEquals(kwargs.get('project'), self.project)
         self.assertEquals(kwargs.get('reference'), group)
-        assert kwargs.get('subject') == u"[{0} {1}] error: hello world".format(
-            self.team.name, self.project.name
-        )
+        assert kwargs.get('subject') == u'BAR-2 - hello world'
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
     def test_multiline_error(self, _send_mail):
@@ -155,6 +154,7 @@ class MailPluginTest(TestCase):
             project=self.project,
             message='hello world\nfoo bar',
             logger='root',
+            short_id=2,
         )
 
         event = Event(
@@ -174,9 +174,7 @@ class MailPluginTest(TestCase):
 
         assert _send_mail.call_count is 1
         args, kwargs = _send_mail.call_args
-        assert kwargs.get('subject') == u"[{0} {1}] error: hello world".format(
-            self.team.name, self.project.name
-        )
+        assert kwargs.get('subject') == u'BAR-2 - hello world'
 
     def test_get_sendable_users(self):
         from sentry.models import UserOption, User
@@ -241,14 +239,14 @@ class MailPluginTest(TestCase):
 
         assert len(mail.outbox) == 1
         msg = mail.outbox[0]
-        assert msg.subject == u'[Sentry] [foo Bar] error: רונית מגן'
+        assert msg.subject == u'[Sentry] BAR-1 - רונית מגן'
 
     def test_get_digest_subject(self):
         assert self.plugin.get_digest_subject(
-            mock.Mock(get_full_name=lambda: 'Rick & Morty'),
+            mock.Mock(qualified_short_id='BAR-1'),
             {mock.sentinel.group: 3},
             datetime(2016, 9, 19, 1, 2, 3, tzinfo=pytz.utc),
-        ) == '[Rick & Morty] 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC'
+        ) == 'BAR-1 - 1 new alert since Sept. 19, 2016, 1:02 a.m. UTC'
 
     @mock.patch.object(MailPlugin, 'notify', side_effect=MailPlugin.notify, autospec=True)
     def test_notify_digest(self, notify):
@@ -306,7 +304,7 @@ class MailPluginTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject.startswith('[Example prefix] [foo Bar]')
+        assert msg.subject.startswith('[Example prefix]')
 
     def test_assignment(self):
         activity = Activity.objects.create(
@@ -326,7 +324,7 @@ class MailPluginTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == 'Re: [Sentry] [foo Bar] error: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
+        assert msg.subject == 'Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
     def test_note(self):
@@ -351,7 +349,7 @@ class MailPluginTest(TestCase):
 
         msg = mail.outbox[0]
 
-        assert msg.subject == 'Re: [Sentry] [foo Bar] error: \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
+        assert msg.subject == 'Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
 
