commit 2721cba25df0e0685c1af37bc66114d18c45e394
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 31 01:25:55 2017 +0200

    Killed old root key

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 2404140e19..725c601845 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -1,16 +1,13 @@
 from __future__ import absolute_import
 
 from django.contrib.auth.models import AnonymousUser
-from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import (
     BasicAuthentication, get_authorization_header
 )
 from rest_framework.exceptions import AuthenticationFailed
 
-from sentry import options
 from sentry.app import raven
 from sentry.models import ApiKey, ApiToken
-from sentry.models.apikey import ROOT_KEY
 
 
 class QuietBasicAuthentication(BasicAuthentication):
@@ -23,11 +20,6 @@ class ApiKeyAuthentication(QuietBasicAuthentication):
         if password:
             return None
 
-        root_api_key = options.get('system.root-api-key')
-        if root_api_key:
-            if constant_time_compare(root_api_key, userid):
-                return (None, ROOT_KEY)
-
         try:
             key = ApiKey.objects.get_from_cache(key=userid)
         except ApiKey.DoesNotExist:
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 74e1040f9b..fca3359ba5 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -11,7 +11,6 @@ from sentry.models import (
     ApiKey, Organization, OrganizationMemberTeam, OrganizationStatus,
     Project, ReleaseProject, Team
 )
-from sentry.models.apikey import ROOT_KEY
 from sentry.utils import auth
 
 
@@ -41,8 +40,6 @@ class OrganizationPermission(ScopedPermission):
             )
 
         elif request.auth:
-            if request.auth is ROOT_KEY:
-                return True
             return request.auth.organization_id == organization.id
 
         else:
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index 9b502d63bb..fa10f998f5 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -4,7 +4,6 @@ from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.app import raven
 from sentry.models import Team, TeamStatus
-from sentry.models.apikey import ROOT_KEY
 
 from .organization import OrganizationPermission
 
@@ -24,8 +23,6 @@ class TeamPermission(OrganizationPermission):
             return result
 
         if not (request.user and request.user.is_authenticated()) and request.auth:
-            if request.auth is ROOT_KEY:
-                return True
             return request.auth.organization_id == team.organization.id
 
         allowed_scopes = set(self.scope_map.get(request.method, []))
diff --git a/src/sentry/api/bases/user.py b/src/sentry/api/bases/user.py
index 900903f078..57da0e77fd 100644
--- a/src/sentry/api/bases/user.py
+++ b/src/sentry/api/bases/user.py
@@ -4,13 +4,10 @@ from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
 from sentry.models import User
-from sentry.models.apikey import ROOT_KEY
 
 
 class UserPermission(ScopedPermission):
     def has_object_permission(self, request, view, user):
-        if request.auth is ROOT_KEY:
-            return True
         if request.user == user:
             return True
         if request.auth:
diff --git a/src/sentry/models/apikey.py b/src/sentry/models/apikey.py
index d510fdfa74..a1bce0253c 100644
--- a/src/sentry/models/apikey.py
+++ b/src/sentry/models/apikey.py
@@ -10,7 +10,6 @@ from __future__ import absolute_import, print_function
 import six
 
 from bitfield import BitField
-from django.conf import settings
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
@@ -106,29 +105,3 @@ class ApiKey(Model):
 
     def has_scope(self, scope):
         return scope in self.get_scopes()
-
-
-class SystemKey(object):
-    is_active = True
-    organization = None
-
-    def get_allowed_origins(self):
-        return []
-
-    def get_audit_log_data(self):
-        return {
-            'label': 'System',
-            'key': '<system>',
-            'scopes': -1,
-            'status': ApiKeyStatus.ACTIVE
-        }
-
-    def get_scopes(self):
-        # All scopes!
-        return list(settings.SENTRY_SCOPES)
-
-    def has_scope(self, scope):
-        return True
-
-
-ROOT_KEY = SystemKey()
