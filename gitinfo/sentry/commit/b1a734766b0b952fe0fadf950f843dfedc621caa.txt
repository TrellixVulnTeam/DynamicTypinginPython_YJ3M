commit b1a734766b0b952fe0fadf950f843dfedc621caa
Author: josh <josh@jrl.ninja>
Date:   Tue May 5 21:02:46 2020 +0000

    perf: speedup sentry shell initialization by ~30% (#18611)

diff --git a/src/sentry/lang/javascript/errorlocale.py b/src/sentry/lang/javascript/errorlocale.py
index af187ff549..f3db324619 100644
--- a/src/sentry/lang/javascript/errorlocale.py
+++ b/src/sentry/lang/javascript/errorlocale.py
@@ -11,31 +11,36 @@ LOCALES_DIR = os.path.join(os.path.dirname(__file__), "../../data/error-locale")
 TARGET_LOCALE = "en-US"
 
 translation_lookup_table = set()
-target_locale_lookup_table = {}
+target_locale_lookup_table = dict()
 
-for locale in os.listdir(LOCALES_DIR):
-    fn = os.path.join(LOCALES_DIR, locale)
-    if not os.path.isfile(fn):
-        continue
 
-    with io.open(fn, encoding="utf-8") as f:
-        for line in f:
-            key, translation = line.split(",", 1)
-            translation = translation.strip()
+def populate_target_locale_lookup_table():
+    for locale in os.listdir(LOCALES_DIR):
+        fn = os.path.join(LOCALES_DIR, locale)
+        if not os.path.isfile(fn):
+            continue
 
-            if TARGET_LOCALE in locale:
-                target_locale_lookup_table[key] = translation
-            else:
-                translation_regexp = re.escape(translation)
-                translation_regexp = translation_regexp.replace(
-                    "\%s", r"(?P<format_string_data>[a-zA-Z0-9-_\$]+)"
-                )
-                # Some errors are substrings of more detailed ones, so we need exact match
-                translation_regexp = re.compile("^" + translation_regexp + "$")
-                translation_lookup_table.add((translation_regexp, key))
+        with io.open(fn, encoding="utf-8") as f:
+            for line in f:
+                key, translation = line.split(",", 1)
+                translation = translation.strip()
+
+                if TARGET_LOCALE in locale:
+                    target_locale_lookup_table[key] = translation
+                else:
+                    translation_regexp = re.escape(translation)
+                    translation_regexp = translation_regexp.replace(
+                        "\%s", r"(?P<format_string_data>[a-zA-Z0-9-_\$]+)"
+                    )
+                    # Some errors are substrings of more detailed ones, so we need exact match
+                    translation_regexp = re.compile("^" + translation_regexp + "$")
+                    translation_lookup_table.add((translation_regexp, key))
 
 
 def find_translation(message):
+    if not target_locale_lookup_table:
+        populate_target_locale_lookup_table()
+
     for translation in translation_lookup_table:
         translation_regexp, key = translation
         match = translation_regexp.search(message)
