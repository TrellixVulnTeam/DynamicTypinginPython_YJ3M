commit 317c65fbcd0f0b31a4e97c415bcf35256900a286
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Nov 13 14:41:36 2018 +0100

    ref: Use canonical keys everywhere in sentry itself (#10556)

diff --git a/src/sentry/api/endpoints/event_apple_crash_report.py b/src/sentry/api/endpoints/event_apple_crash_report.py
index 0bdb0d02de..13209ec196 100644
--- a/src/sentry/api/endpoints/event_apple_crash_report.py
+++ b/src/sentry/api/endpoints/event_apple_crash_report.py
@@ -47,7 +47,7 @@ class EventAppleCrashReportEndpoint(Endpoint):
 
         threads = (event.data.get('threads') or {}).get('values')
         exceptions = (event.data.get(
-            'sentry.interfaces.Exception') or {}).get('values')
+            'exception') or {}).get('values')
 
         symbolicated = (request.GET.get('minified') not in ('1', 'true'))
         debug_images = None
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 66d128f518..4b29566af0 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -33,7 +33,7 @@ class EventSerializer(Serializer):
 
             entry = {
                 'data': data,
-                'type': interface.get_alias(),
+                'type': interface.external_type,
             }
 
             api_meta = None
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 2d38491279..5f032994aa 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -180,12 +180,12 @@ class ClientApiHelper(object):
         return self.project_key_from_auth(auth).project_id
 
     def ensure_does_not_have_ip(self, data):
-        if 'sentry.interfaces.Http' in data:
-            if 'env' in data['sentry.interfaces.Http']:
-                data['sentry.interfaces.Http']['env'].pop('REMOTE_ADDR', None)
+        if 'request' in data:
+            if 'env' in data['request']:
+                data['request']['env'].pop('REMOTE_ADDR', None)
 
-        if 'sentry.interfaces.User' in data:
-            data['sentry.interfaces.User'].pop('ip_address', None)
+        if 'user' in data:
+            data['user'].pop('ip_address', None)
 
         if 'sdk' in data:
             data['sdk'].pop('client_ip', None)
@@ -235,7 +235,7 @@ class MinidumpApiHelper(ClientApiHelper):
 
 class SecurityApiHelper(ClientApiHelper):
 
-    report_interfaces = ('sentry.interfaces.Csp', 'hpkp', 'expectct', 'expectstaple')
+    report_interfaces = ('csp', 'hpkp', 'expectct', 'expectstaple')
 
     def origin_from_request(self, request):
         # In the case of security reports, the origin is not available at the
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index f8a4e21387..07ac56ba14 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -71,7 +71,7 @@ HASH_RE = re.compile(r'^[0-9a-f]{32}$')
 DEFAULT_FINGERPRINT_VALUES = frozenset(['{{ default }}', '{{default}}'])
 ALLOWED_FUTURE_DELTA = timedelta(minutes=1)
 SECURITY_REPORT_INTERFACES = (
-    "sentry.interfaces.Csp",
+    "csp",
     "hpkp",
     "expectct",
     "expectstaple",
@@ -118,7 +118,7 @@ def get_hashes_for_event_with_reason(event):
         result = interface.compute_hashes(event.platform)
         if not result:
             continue
-        return (interface.get_path(), result)
+        return (interface.path, result)
 
     return ('no_interfaces', [''])
 
@@ -202,19 +202,19 @@ def generate_culprit(data, platform=None):
     culprit = ''
     try:
         stacktraces = [
-            e['stacktrace'] for e in data['sentry.interfaces.Exception']['values']
+            e['stacktrace'] for e in data['exception']['values']
             if e.get('stacktrace')
         ]
     except KeyError:
-        stacktrace = data.get('sentry.interfaces.Stacktrace')
+        stacktrace = data.get('stacktrace')
         if stacktrace:
             stacktraces = [stacktrace]
         else:
             stacktraces = None
 
     if not stacktraces:
-        if 'sentry.interfaces.Http' in data:
-            culprit = data['sentry.interfaces.Http'].get('url', '')
+        if 'request' in data:
+            culprit = data['request'].get('url', '')
     else:
         from sentry.interfaces.stacktrace import Stacktrace
         culprit = Stacktrace.to_python(stacktraces[-1]).get_culprit_string(
@@ -415,16 +415,16 @@ class EventManager(object):
                 'logger': 'csp',
                 'message': instance.get_message(),
                 'culprit': instance.get_culprit(),
-                instance.get_path(): instance.to_json(),
+                instance.path: instance.to_json(),
                 'tags': instance.get_tags(),
                 'errors': [],
-                'sentry.interfaces.User': {'ip_address': self._client_ip},
+                'user': {'ip_address': self._client_ip},
                 # Construct a faux Http interface based on the little information we have
                 # This is a bit weird, since we don't have nearly enough
                 # information to create an Http interface, but
                 # this automatically will pick up tags for the User-Agent
                 # which is actually important here for CSP
-                'sentry.interfaces.Http': {
+                'request': {
                     'url': instance.get_origin(),
                     'headers': clean(
                         {
@@ -513,14 +513,14 @@ class EventManager(object):
 
         # Fill in ip addresses marked as {{auto}}
         if self._client_ip:
-            if get_path(data, ['sentry.interfaces.Http', 'env', 'REMOTE_ADDR']) == '{{auto}}':
-                data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = self._client_ip
+            if get_path(data, ['request', 'env', 'REMOTE_ADDR']) == '{{auto}}':
+                data['request']['env']['REMOTE_ADDR'] = self._client_ip
 
             if get_path(data, ['request', 'env', 'REMOTE_ADDR']) == '{{auto}}':
                 data['request']['env']['REMOTE_ADDR'] = self._client_ip
 
-            if get_path(data, ['sentry.interfaces.User', 'ip_address']) == '{{auto}}':
-                data['sentry.interfaces.User']['ip_address'] = self._client_ip
+            if get_path(data, ['user', 'ip_address']) == '{{auto}}':
+                data['user']['ip_address'] = self._client_ip
 
             if get_path(data, ['user', 'ip_address']) == '{{auto}}':
                 data['user']['ip_address'] = self._client_ip
@@ -554,7 +554,7 @@ class EventManager(object):
 
             try:
                 inst = interface.to_python(value)
-                data[inst.get_path()] = inst.to_json()
+                data[inst.path] = inst.to_json()
             except Exception as e:
                 log = logger.debug if isinstance(
                     e, InterfaceValidationError) else logger.error
@@ -619,11 +619,11 @@ class EventManager(object):
         data['type'] = eventtypes.infer(data).key
         data['version'] = self.version
 
-        exception = data.get('sentry.interfaces.Exception')
-        stacktrace = data.get('sentry.interfaces.Stacktrace')
+        exception = data.get('exception')
+        stacktrace = data.get('stacktrace')
         if exception and len(exception['values']) == 1 and stacktrace:
             exception['values'][0]['stacktrace'] = stacktrace
-            del data['sentry.interfaces.Stacktrace']
+            del data['stacktrace']
 
         # Exception mechanism needs SDK information to resolve proper names in
         # exception meta (such as signal names). "SDK Information" really means
@@ -641,11 +641,11 @@ class EventManager(object):
         is_public = self._auth and self._auth.is_public
         add_ip_platforms = ('javascript', 'cocoa', 'objc')
 
-        http_ip = data.get('sentry.interfaces.Http', {}).get('env', {}).get('REMOTE_ADDR')
+        http_ip = data.get('request', {}).get('env', {}).get('REMOTE_ADDR')
         if http_ip:
-            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', http_ip)
+            data.setdefault('user', {}).setdefault('ip_address', http_ip)
         elif self._client_ip and (is_public or data.get('platform') in add_ip_platforms):
-            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', self._client_ip)
+            data.setdefault('user', {}).setdefault('ip_address', self._client_ip)
 
         # Trim values
         data['logger'] = trim(data['logger'].strip(), 64)
@@ -679,7 +679,7 @@ class EventManager(object):
         if release and not is_valid_release(self._project, release):
             return (True, FilterStatKeys.RELEASE_VERSION)
 
-        message_interface = self._data.get('sentry.interfaces.Message', {})
+        message_interface = self._data.get('logentry', {})
         error_message = message_interface.get('formatted', '') or message_interface.get(
             'message', ''
         )
@@ -687,7 +687,7 @@ class EventManager(object):
             return (True, FilterStatKeys.ERROR_MESSAGE)
 
         for exception_interface in self._data.get(
-            'sentry.interfaces.Exception', {}
+            'exception', {}
         ).get('values', []):
             message = u': '.join(
                 filter(None, map(exception_interface.get, ['type', 'value']))
@@ -849,7 +849,7 @@ class EventManager(object):
                 tags[k] = v
             # Get rid of ephemeral interface data
             if iface.ephemeral:
-                data.pop(iface.get_path(), None)
+                data.pop(iface.path, None)
 
         # tags are stored as a tuple
         tags = tags.items()
@@ -883,11 +883,11 @@ class EventManager(object):
         # index components into ``Event.message``
         # See GH-3248
         if event_type.key != 'default':
-            if 'sentry.interfaces.Message' in data and \
-                    data['sentry.interfaces.Message']['message'] != message:
+            if 'logentry' in data and \
+                    data['logentry']['message'] != message:
                 message = u'{} {}'.format(
                     message,
-                    data['sentry.interfaces.Message']['message'],
+                    data['logentry']['message'],
                 )
 
         if not message:
@@ -1158,7 +1158,7 @@ class EventManager(object):
         return event
 
     def _get_event_user(self, project, data):
-        user_data = data.get('sentry.interfaces.User')
+        user_data = data.get('user')
         if not user_data:
             return
 
diff --git a/src/sentry/eventtypes/base.py b/src/sentry/eventtypes/base.py
index 746029c905..8e76a00b00 100644
--- a/src/sentry/eventtypes/base.py
+++ b/src/sentry/eventtypes/base.py
@@ -29,7 +29,7 @@ class DefaultEvent(BaseEvent):
     def get_metadata(self):
         # See GH-3248
         message_interface = self.data.get(
-            'sentry.interfaces.Message', {
+            'logentry', {
                 'message': self.data.get('message', ''),
             }
         )
diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 99dc714938..0d9d1e5d1b 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -23,7 +23,7 @@ class ErrorEvent(BaseEvent):
 
     def has_metadata(self):
         try:
-            exception = self.data['sentry.interfaces.Exception']['values'][-1]
+            exception = self.data['exception']['values'][-1]
             exception['type']
             exception['value']
             return True
@@ -31,7 +31,7 @@ class ErrorEvent(BaseEvent):
             return False
 
     def get_metadata(self):
-        exception = self.data['sentry.interfaces.Exception']['values'][-1]
+        exception = self.data['exception']['values'][-1]
 
         # in some situations clients are submitting non-string data for these
         rv = {
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index c854467b56..784a8ec9e0 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -8,13 +8,13 @@ class CspEvent(BaseEvent):
 
     def has_metadata(self):
         # TODO(alexh) also look for 'csp' ?
-        return 'sentry.interfaces.Csp' in self.data
+        return 'csp' in self.data
 
     def get_metadata(self):
         from sentry.interfaces.security import Csp
         # TODO(dcramer): pull get message into here to avoid instantiation
         # or ensure that these get interfaces passed instead of raw data
-        csp = Csp.to_python(self.data['sentry.interfaces.Csp'])
+        csp = Csp.to_python(self.data['csp'])
 
         return {
             'directive': csp.effective_directive,
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
index 0c8e496c78..fb601499cf 100644
--- a/src/sentry/filters/browser_extensions.py
+++ b/src/sentry/filters/browser_extensions.py
@@ -79,14 +79,14 @@ class BrowserExtensionsFilter(Filter):
 
     def get_exception_value(self, data):
         try:
-            return data['sentry.interfaces.Exception']['values'][0]['value']
+            return data['exception']['values'][0]['value']
         except (LookupError, TypeError):
             return ''
 
     def get_exception_source(self, data):
         try:
-            return data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames'
-                                                                                  ][-1]['abs_path']
+            return data['exception']['values'][0]['stacktrace']['frames'
+                                                                ][-1]['abs_path']
         except (LookupError, TypeError):
             return ''
 
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 4f6d476c80..288e5cf063 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -81,7 +81,7 @@ class LegacyBrowsersFilter(Filter):
 
     def get_user_agent(self, data):
         try:
-            for key, value in data['sentry.interfaces.Http']['headers']:
+            for key, value in data['request']['headers']:
                 if key.lower() == 'user-agent':
                     return value
         except LookupError:
diff --git a/src/sentry/filters/localhost.py b/src/sentry/filters/localhost.py
index 9233a88295..8db763e318 100644
--- a/src/sentry/filters/localhost.py
+++ b/src/sentry/filters/localhost.py
@@ -15,13 +15,13 @@ class LocalhostFilter(Filter):
 
     def get_ip_address(self, data):
         try:
-            return data['sentry.interfaces.User']['ip_address']
+            return data['user']['ip_address']
         except KeyError:
             return ''
 
     def get_url(self, data):
         try:
-            return data['sentry.interfaces.Http']['url'] or ''
+            return data['request']['url'] or ''
         except KeyError:
             return ''
 
diff --git a/src/sentry/filters/web_crawlers.py b/src/sentry/filters/web_crawlers.py
index f8a47f532f..e30056f578 100644
--- a/src/sentry/filters/web_crawlers.py
+++ b/src/sentry/filters/web_crawlers.py
@@ -52,7 +52,7 @@ class WebCrawlersFilter(Filter):
 
     def get_user_agent(self, data):
         try:
-            for key, value in data['sentry.interfaces.Http']['headers']:
+            for key, value in data['request']['headers']:
                 if key.lower() == 'user-agent':
                     return value
         except LookupError:
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index 467645f0f5..57a6403b58 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -10,6 +10,7 @@ from sentry.utils.canonical import get_canonical_name
 from sentry.utils.html import escape
 from sentry.utils.imports import import_string
 from sentry.utils.safe import safe_execute
+from sentry.utils.decorators import classproperty
 
 
 def get_interface(name):
@@ -66,6 +67,18 @@ class Interface(object):
     def __init__(self, **data):
         self._data = data or {}
 
+    @classproperty
+    def path(cls):
+        """The 'path' of the interface which is the root key in the data."""
+        return cls.__name__.lower()
+
+    @classproperty
+    def external_type(cls):
+        """The external name of the interface.  This is mostly the same as
+        path with some small differences (message, debugmeta).
+        """
+        return cls.path
+
     def __eq__(self, other):
         if not isinstance(self, type(other)):
             return False
@@ -105,13 +118,6 @@ class Interface(object):
         # lists and strings get discarded as we've deemed them not important
         return dict((k, v) for k, v in six.iteritems(self._data) if (v == 0 or v))
 
-    def get_path(self):
-        cls = type(self)
-        return '%s.%s' % (cls.__module__, cls.__name__)
-
-    def get_alias(self):
-        return self.get_slug()
-
     def get_hash(self):
         return []
 
@@ -121,9 +127,6 @@ class Interface(object):
             return []
         return [result]
 
-    def get_slug(self):
-        return type(self).__name__.lower()
-
     def get_title(self):
         return _(type(self).__name__)
 
@@ -144,3 +147,21 @@ class Interface(object):
         if not body:
             return ''
         return '<pre>%s</pre>' % (escape(body), )
+
+    # deprecated stuff.  These were deprecated in late 2018, once
+    # determined they are unused we can kill them.
+
+    def get_path(self):
+        from warnings import warn
+        warn(DeprecationWarning('Replaced with .path'))
+        return self.path
+
+    def get_alias(self):
+        from warnings import warn
+        warn(DeprecationWarning('Replaced with .path'))
+        return self.path
+
+    def get_slug(self):
+        from warnings import warn
+        warn(DeprecationWarning('Replaced with .path'))
+        return self.path
diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 84c8763bcb..69b9f6f1de 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -113,12 +113,6 @@ class Breadcrumbs(Interface):
 
         return rv
 
-    def get_path(self):
-        return 'sentry.interfaces.Breadcrumbs'
-
-    def get_alias(self):
-        return 'breadcrumbs'
-
     def get_api_context(self, is_public=False):
         def _convert(x):
             return {
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 027cfbb769..645a7ede2a 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -195,6 +195,3 @@ class Contexts(Interface):
         for inst in self.iter_contexts():
             for tag in inst.iter_tags():
                 yield tag
-
-    def get_path(self):
-        return 'contexts'
diff --git a/src/sentry/interfaces/debug_meta.py b/src/sentry/interfaces/debug_meta.py
index 75d83173fe..a91b21a39a 100644
--- a/src/sentry/interfaces/debug_meta.py
+++ b/src/sentry/interfaces/debug_meta.py
@@ -95,6 +95,8 @@ class DebugMeta(Interface):
     """
 
     ephemeral = False
+    path = 'debug_meta'
+    external_type = 'debugmeta'
 
     @classmethod
     def to_python(cls, data):
@@ -142,6 +144,3 @@ class DebugMeta(Interface):
             }
         except KeyError as e:
             raise InterfaceValidationError('Missing value for sdk_info: %s' % e.args[0])
-
-    def get_path(self):
-        return 'debug_meta'
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 8e02a84ea1..0f488e3350 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -732,8 +732,6 @@ class Mechanism(Interface):
     >>> }
     """
 
-    path = 'mechanism'
-
     @classmethod
     def to_python(cls, data):
         data = upgrade_legacy_mechanism(data)
@@ -795,9 +793,6 @@ class Mechanism(Interface):
             'meta': prune_empty_keys(self.meta),
         })
 
-    def get_path(self):
-        return self.path
-
     def iter_tags(self):
         yield (self.path, self.type)
 
@@ -812,7 +807,7 @@ class SingleException(Interface):
     module namespace. Either ``type`` or ``value`` must be present.
 
     You can also optionally bind a stacktrace interface to an exception. The
-    spec is identical to ``sentry.interfaces.Stacktrace``.
+    spec is identical to ``stacktrace``.
 
     >>> {
     >>>     "type": "ValueError",
@@ -820,12 +815,12 @@ class SingleException(Interface):
     >>>     "module": "__builtins__",
     >>>     "mechanism": {},
     >>>     "stacktrace": {
-    >>>         # see sentry.interfaces.Stacktrace
+    >>>         # see stacktrace
     >>>     }
     >>> }
     """
     score = 2000
-    path = 'sentry.interfaces.Exception'
+    path = 'exception'
 
     @classmethod
     def to_python(cls, data, slim_frames=True):
@@ -949,12 +944,6 @@ class SingleException(Interface):
             'stacktrace': stacktrace_meta,
         }
 
-    def get_alias(self):
-        return 'exception'
-
-    def get_path(self):
-        return self.path
-
     def get_hash(self, platform=None):
         output = None
         if self.stacktrace:
@@ -976,7 +965,7 @@ class Exception(Interface):
     namespace.
 
     You can also optionally bind a stacktrace interface to an exception. The
-    spec is identical to ``sentry.interfaces.Stacktrace``.
+    spec is identical to ``stacktrace``.
 
     >>> {
     >>>     "values": [{
@@ -987,7 +976,7 @@ class Exception(Interface):
     >>>             # see sentry.interfaces.Mechanism
     >>>         },
     >>>         "stacktrace": {
-    >>>             # see sentry.interfaces.Stacktrace
+    >>>             # see stacktrace
     >>>         }
     >>>     }]
     >>> }
@@ -1047,12 +1036,6 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         }
 
-    def get_alias(self):
-        return 'exception'
-
-    def get_path(self):
-        return 'sentry.interfaces.Exception'
-
     def compute_hashes(self, platform):
         system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
diff --git a/src/sentry/interfaces/geo.py b/src/sentry/interfaces/geo.py
index 12c943fab2..a9a7c92922 100644
--- a/src/sentry/interfaces/geo.py
+++ b/src/sentry/interfaces/geo.py
@@ -19,9 +19,6 @@ class Geo(Interface):
     >>> }
     """
 
-    def get_path(self):
-        return 'geo'
-
     @classmethod
     def to_python(cls, data):
         kwargs = {
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index 6783ef60cd..7f860e1f21 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -118,7 +118,7 @@ class Http(Interface):
     """
     display_score = 1000
     score = 800
-    path = 'sentry.interfaces.Http'
+    path = 'request'
 
     FORM_TYPE = 'application/x-www-form-urlencoded'
 
@@ -213,9 +213,6 @@ class Http(Interface):
 
         return cls(**kwargs)
 
-    def get_path(self):
-        return self.path
-
     @property
     def full_url(self):
         url = self.url
@@ -237,9 +234,6 @@ class Http(Interface):
             }
         )
 
-    def get_alias(self):
-        return 'request'
-
     def get_title(self):
         return _('Request')
 
diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index d5c7685548..ba453ffc4b 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -38,6 +38,8 @@ class Message(Interface):
     """
     score = 0
     display_score = 2050
+    path = 'logentry'
+    external_type = 'message'
 
     @classmethod
     def to_python(cls, data):
@@ -90,9 +92,6 @@ class Message(Interface):
 
         return cls(**kwargs)
 
-    def get_path(self):
-        return 'sentry.interfaces.Message'
-
     def get_hash(self):
         return [self.message]
 
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index c8101551fb..5b91aa924a 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -665,6 +665,7 @@ then be transformed into the requisite interface.
 """
 INPUT_SCHEMAS = {
     'sentry.interfaces.Csp': CSP_SCHEMA,
+    'csp': CSP_SCHEMA,
     'hpkp': HPKP_SCHEMA,
     'expectct': EXPECT_CT_SCHEMA,
     'expectstaple': EXPECT_STAPLE_SCHEMA,
@@ -694,6 +695,7 @@ INTERFACE_SCHEMAS = {
 
     # Security reports
     'sentry.interfaces.Csp': CSP_INTERFACE_SCHEMA,
+    'csp': CSP_INTERFACE_SCHEMA,
     'hpkp': HPKP_INTERFACE_SCHEMA,
     'expectct': EXPECT_CT_INTERFACE_SCHEMA,
     'expectstaple': EXPECT_STAPLE_INTERFACE_SCHEMA,
diff --git a/src/sentry/interfaces/sdk.py b/src/sentry/interfaces/sdk.py
index 22495bab93..725ca8597e 100644
--- a/src/sentry/interfaces/sdk.py
+++ b/src/sentry/interfaces/sdk.py
@@ -68,9 +68,6 @@ class Sdk(Interface):
 
         return cls(**kwargs)
 
-    def get_path(self):
-        return 'sdk'
-
     def get_api_context(self, is_public=False):
         newest_version = get_with_prefix(settings.SDK_VERSIONS, self.name)
         newest_name = get_with_prefix(settings.DEPRECATED_SDKS, self.name, self.name)
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index 3a9d2952f5..d2aa3d2f11 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -87,7 +87,6 @@ class SecurityReport(Interface):
     A browser security violation report.
     """
 
-    path = None
     title = None
 
     @classmethod
@@ -114,9 +113,6 @@ class SecurityReport(Interface):
     def get_message(self):
         raise NotImplementedError
 
-    def get_path(self):
-        return self.path
-
     def get_tags(self):
         raise NotImplementedError
 
@@ -159,7 +155,6 @@ class Hpkp(SecurityReport):
     score = 1300
     display_score = 1300
 
-    path = 'hpkp'
     title = 'HPKP Report'
 
     @classmethod
@@ -220,7 +215,6 @@ class ExpectStaple(SecurityReport):
     score = 1300
     display_score = 1300
 
-    path = 'expectstaple'
     title = 'Expect-Staple Report'
 
     @classmethod
@@ -283,7 +277,6 @@ class ExpectCT(SecurityReport):
     score = 1300
     display_score = 1300
 
-    path = 'expectct'
     title = 'Expect-CT Report'
 
     @classmethod
@@ -342,7 +335,6 @@ class Csp(SecurityReport):
     score = 1300
     display_score = 1300
 
-    path = 'sentry.interfaces.Csp'
     title = 'CSP Report'
 
     @classmethod
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index df999a53cf..91b36dbdf8 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -285,8 +285,6 @@ def is_recursion(frame1, frame2):
 
 class Frame(Interface):
 
-    path = 'frame'
-
     @classmethod
     def to_python(cls, data, raw=False):
         is_valid, errors = validate_and_default_interface(data, cls.path)
@@ -631,7 +629,7 @@ class Stacktrace(Interface):
     OR
 
     ``module``
-      Platform-specific module path (e.g. sentry.interfaces.Stacktrace)
+      Platform-specific module path (e.g. stacktrace)
 
     The following additional attributes are supported:
 
@@ -699,7 +697,6 @@ class Stacktrace(Interface):
               to the full interface path.
     """
     score = 2000
-    path = 'sentry.interfaces.Stacktrace'
 
     def __iter__(self):
         return iter(self.frames)
@@ -791,9 +788,6 @@ class Stacktrace(Interface):
             'registers': self.registers,
         }
 
-    def get_path(self):
-        return self.path
-
     def compute_hashes(self, platform):
         system_hash = self.get_hash(platform, system_frames=True)
         if not system_hash:
diff --git a/src/sentry/interfaces/template.py b/src/sentry/interfaces/template.py
index 1c698feed6..8546643c55 100644
--- a/src/sentry/interfaces/template.py
+++ b/src/sentry/interfaces/template.py
@@ -53,12 +53,6 @@ class Template(Interface):
         }
         return cls(**kwargs)
 
-    def get_alias(self):
-        return 'template'
-
-    def get_path(self):
-        return 'sentry.interfaces.Template'
-
     def get_hash(self):
         return [self.filename, self.context_line]
 
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 18d847847f..5805c98b28 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -86,9 +86,6 @@ class Threads(Interface):
         else:
             return meta
 
-    def get_path(self):
-        return 'threads'
-
     def get_hash(self):
         if len(self.values) != 1:
             return []
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index 3897b1441c..bb5f56f4f9 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -130,9 +130,6 @@ class User(Interface):
             'data': meta.get('data'),
         }
 
-    def get_path(self):
-        return 'sentry.interfaces.User'
-
     def get_hash(self):
         return []
 
diff --git a/src/sentry/lang/javascript/errorlocale.py b/src/sentry/lang/javascript/errorlocale.py
index 4b5639b88d..1e114f9c6d 100644
--- a/src/sentry/lang/javascript/errorlocale.py
+++ b/src/sentry/lang/javascript/errorlocale.py
@@ -87,12 +87,12 @@ def translate_message(original_message):
 
 
 def translate_exception(data):
-    if 'sentry.interfaces.Message' in data:
-        data['sentry.interfaces.Message']['message'] = translate_message(
-            data['sentry.interfaces.Message']['message'])
+    if 'logentry' in data:
+        data['logentry']['message'] = translate_message(
+            data['logentry']['message'])
 
-    if 'sentry.interfaces.Exception' in data:
-        for entry in data['sentry.interfaces.Exception']['values']:
+    if 'exception' in data:
+        for entry in data['exception']['values']:
             if 'value' in entry:
                 entry['value'] = translate_message(entry['value'])
 
diff --git a/src/sentry/lang/javascript/errormapping.py b/src/sentry/lang/javascript/errormapping.py
index b7fc18c2bf..60d5f433d7 100644
--- a/src/sentry/lang/javascript/errormapping.py
+++ b/src/sentry/lang/javascript/errormapping.py
@@ -115,7 +115,7 @@ def rewrite_exception(data):
     in place and returns `True` if a modification was performed or `False`
     otherwise.
     """
-    exc_data = data.get('sentry.interfaces.Exception')
+    exc_data = data.get('exception')
     if not exc_data:
         return False
 
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 6598a7c9ed..17b16bc547 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -34,7 +34,7 @@ def generate_modules(data):
 
 
 def fix_culprit(data):
-    exc = data.get('sentry.interfaces.Exception')
+    exc = data.get('exception')
     if not exc:
         return
 
@@ -43,7 +43,7 @@ def fix_culprit(data):
 
 
 def parse_user_agent(data):
-    http = data.get('sentry.interfaces.Http')
+    http = data.get('request')
     if not http:
         return None
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index e968b56e4e..980c3ad036 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -491,14 +491,14 @@ class JavaScriptStacktraceProcessor(StacktraceProcessor):
     def get_stacktraces(self, data):
         try:
             stacktraces = [
-                e['stacktrace'] for e in data['sentry.interfaces.Exception']['values']
+                e['stacktrace'] for e in data['exception']['values']
                 if e.get('stacktrace')
             ]
         except KeyError:
             stacktraces = []
 
-        if 'sentry.interfaces.Stacktrace' in data:
-            stacktraces.append(data['sentry.interfaces.Stacktrace'])
+        if 'stacktrace' in data:
+            stacktraces.append(data['stacktrace'])
 
         return [(s, Stacktrace.to_python(s)) for s in stacktraces]
 
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 229cb566ac..e61ef8a361 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -73,7 +73,7 @@ class NativeStacktraceProcessor(StacktraceProcessor):
             # to disambiugate the first frame.  If we can get this information
             # from the mechanism we want to pass it onwards.
             signal = None
-            exc = self.data.get('sentry.interfaces.Exception')
+            exc = self.data.get('exception')
             if exc is not None:
                 mechanism = exc['values'][0].get('mechanism')
                 if mechanism and 'meta' in mechanism and \
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 105798efb4..a0ba30c827 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -41,13 +41,13 @@ def find_all_stacktraces(data):
             if processed is not None:
                 rv.append((processed, container))
 
-    exc_container = data.get('sentry.interfaces.Exception')
+    exc_container = data.get('exception')
     if exc_container:
         for exc in exc_container['values']:
             _probe_for_stacktrace(exc)
 
     # The legacy stacktrace interface does not support raw stacktraces
-    stacktrace = data.get('sentry.interfaces.Stacktrace')
+    stacktrace = data.get('stacktrace')
     if stacktrace:
         rv.append((stacktrace, None))
 
diff --git a/src/sentry/management/commands/send_fake_data.py b/src/sentry/management/commands/send_fake_data.py
index a9acb86625..e0a6855aa2 100644
--- a/src/sentry/management/commands/send_fake_data.py
+++ b/src/sentry/management/commands/send_fake_data.py
@@ -50,7 +50,7 @@ def funcs():
                 data={
                     'logger': six.next(loggers),
                     'site': 'web',
-                    'sentry.interfaces.User': {
+                    'user': {
                         'id': email,
                         'email': email,
                     }
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index dd0c68e304..c396b9cd31 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -97,7 +97,7 @@ class Event(Model):
     project = property(_get_project, _set_project)
 
     def get_legacy_message(self):
-        msg_interface = self.data.get('sentry.interfaces.Message', {
+        msg_interface = self.data.get('logentry', {
             'message': self.message,
         })
         return msg_interface.get('formatted', msg_interface['message'])
@@ -151,13 +151,13 @@ class Event(Model):
 
     @memoize
     def ip_address(self):
-        user_data = self.data.get('sentry.interfaces.User', self.data.get('user'))
+        user_data = self.data.get('user', self.data.get('user'))
         if user_data:
             value = user_data.get('ip_address')
             if value:
                 return value
 
-        http_data = self.data.get('sentry.interfaces.Http', self.data.get('http'))
+        http_data = self.data.get('request', self.data.get('http'))
         if http_data and 'env' in http_data:
             value = http_data['env'].get('REMOTE_ADDR')
             if value:
diff --git a/src/sentry/ownership/grammar.py b/src/sentry/ownership/grammar.py
index 2a20a5b6c6..32e938d2c4 100644
--- a/src/sentry/ownership/grammar.py
+++ b/src/sentry/ownership/grammar.py
@@ -96,7 +96,7 @@ class Matcher(namedtuple('Matcher', 'type pattern')):
 
     def test_url(self, data):
         try:
-            url = data['sentry.interfaces.Http']['url']
+            url = data['request']['url']
         except KeyError:
             return False
         return fnmatch(url, self.pattern)
@@ -198,13 +198,13 @@ class OwnershipVisitor(NodeVisitor):
 
 def _iter_frames(data):
     try:
-        for frame in data['sentry.interfaces.Stacktrace']['frames']:
+        for frame in data['stacktrace']['frames']:
             yield frame
     except KeyError:
         pass
 
     try:
-        values = data['sentry.interfaces.Exception']['values']
+        values = data['exception']['values']
     except KeyError:
         return
 
diff --git a/src/sentry/plugins/sentry_urls/models.py b/src/sentry/plugins/sentry_urls/models.py
index 9e99e2381c..b9aa2bd01b 100644
--- a/src/sentry/plugins/sentry_urls/models.py
+++ b/src/sentry/plugins/sentry_urls/models.py
@@ -16,7 +16,7 @@ from sentry.plugins.bases.tag import TagPlugin
 class UrlsPlugin(TagPlugin):
     """
     Automatically adds the 'url' tag from events containing interface data
-    from ``sentry.interfaces.Http``.
+    from ``request``.
     """
     slug = 'urls'
     title = 'Auto Tag: URLs'
@@ -27,7 +27,7 @@ class UrlsPlugin(TagPlugin):
     project_default_enabled = True
 
     def get_tag_values(self, event):
-        http = event.interfaces.get('sentry.interfaces.Http')
+        http = event.interfaces.get('request')
         if not http:
             return []
         if not http.url:
diff --git a/src/sentry/plugins/sentry_useragents/models.py b/src/sentry/plugins/sentry_useragents/models.py
index 153792b639..d30347fbf8 100644
--- a/src/sentry/plugins/sentry_useragents/models.py
+++ b/src/sentry/plugins/sentry_useragents/models.py
@@ -26,7 +26,7 @@ class UserAgentPlugin(TagPlugin):
         if contexts:
             return []
 
-        http = event.interfaces.get('sentry.interfaces.Http')
+        http = event.interfaces.get('request')
         if not http:
             return []
         if not http.headers:
@@ -53,7 +53,7 @@ class UserAgentPlugin(TagPlugin):
 class BrowserPlugin(UserAgentPlugin):
     """
     Automatically adds the 'browser' tag from events containing interface data
-    from ``sentry.interfaces.Http``.
+    from ``request``.
     """
     slug = 'browsers'
     title = 'Auto Tag: Browsers'
@@ -82,7 +82,7 @@ register(BrowserPlugin)
 class OsPlugin(UserAgentPlugin):
     """
     Automatically adds the 'os' tag from events containing interface data
-    from ``sentry.interfaces.Http``.
+    from ``request``.
     """
     slug = 'os'
     title = 'Auto Tag: Operating Systems'
@@ -112,7 +112,7 @@ register(OsPlugin)
 class DevicePlugin(UserAgentPlugin):
     """
     Automatically adds the 'device' tag from events containing interface data
-    from ``sentry.interfaces.Http``.
+    from ``request``.
     """
     slug = 'device'
     title = 'Auto Tag: Device'
diff --git a/src/sentry/receivers/features.py b/src/sentry/receivers/features.py
index db8ec84f6c..e3ceec8f68 100644
--- a/src/sentry/receivers/features.py
+++ b/src/sentry/receivers/features.py
@@ -73,7 +73,7 @@ def record_event_processed(project, group, event, **kwargs):
         feature_slugs.append('environment_tracking')
 
     # User Tracking
-    user_context = event.data.get('sentry.interfaces.User')
+    user_context = event.data.get('user')
     # We'd like them to tag with id or email.
     # Certain SDKs automatically tag with ip address.
     # Check to make sure more the ip address is being sent.
@@ -91,7 +91,7 @@ def record_event_processed(project, group, event, **kwargs):
         feature_slugs.append('source_maps')
 
     # Breadcrumbs
-    if event.data.get('sentry.interfaces.Breadcrumbs'):
+    if event.data.get('breadcrumbs'):
         feature_slugs.append('breadcrumbs')
 
     if not feature_slugs:
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index ab029be3df..7faab18e6b 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -222,7 +222,7 @@ def record_release_received(project, group, event, **kwargs):
 
 @event_processed.connect(weak=False)
 def record_user_context_received(project, group, event, **kwargs):
-    user_context = event.data.get('sentry.interfaces.User')
+    user_context = event.data.get('user')
     if not user_context:
         return
     # checking to see if only ip address is being sent (our js library does this automatically)
diff --git a/src/sentry/rules/conditions/event_attribute.py b/src/sentry/rules/conditions/event_attribute.py
index a06f6d51ab..625179a88c 100644
--- a/src/sentry/rules/conditions/event_attribute.py
+++ b/src/sentry/rules/conditions/event_attribute.py
@@ -158,27 +158,27 @@ class EventAttributeCondition(EventCondition):
                 return []
 
             return [
-                getattr(e, path[1]) for e in event.interfaces['sentry.interfaces.Exception'].values
+                getattr(e, path[1]) for e in event.interfaces['exception'].values
             ]
 
         elif path[0] == 'user':
             if path[1] in ('id', 'ip_address', 'email', 'username'):
-                return [getattr(event.interfaces['sentry.interfaces.User'], path[1])]
-            return [getattr(event.interfaces['sentry.interfaces.User'].data, path[1])]
+                return [getattr(event.interfaces['user'], path[1])]
+            return [getattr(event.interfaces['user'].data, path[1])]
 
         elif path[0] == 'http':
             if path[1] not in ('url', 'method'):
                 return []
 
-            return [getattr(event.interfaces['sentry.interfaces.Http'], path[1])]
+            return [getattr(event.interfaces['request'], path[1])]
 
         elif path[0] == 'stacktrace':
-            stacks = event.interfaces.get('sentry.interfaces.Stacktrace')
+            stacks = event.interfaces.get('stacktrace')
             if stacks:
                 stacks = [stacks]
             else:
                 stacks = [
-                    e.stacktrace for e in event.interfaces['sentry.interfaces.Exception'].values
+                    e.stacktrace for e in event.interfaces['exception'].values
                     if e.stacktrace
                 ]
 
diff --git a/src/sentry/similarity/features.py b/src/sentry/similarity/features.py
index 22a65fa6ee..14b7af8014 100644
--- a/src/sentry/similarity/features.py
+++ b/src/sentry/similarity/features.py
@@ -37,7 +37,7 @@ class ExceptionFeature(object):
 
     def extract(self, event):
         try:
-            interface = event.interfaces['sentry.interfaces.Exception']
+            interface = event.interfaces['exception']
         except KeyError:
             raise InterfaceDoesNotExist()
         return self.function(interface.values[0])
@@ -49,7 +49,7 @@ class MessageFeature(object):
 
     def extract(self, event):
         try:
-            interface = event.interfaces['sentry.interfaces.Message']
+            interface = event.interfaces['logentry']
         except KeyError:
             raise InterfaceDoesNotExist()
         return self.function(interface)
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 4a7853a29f..952c271fc8 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -172,14 +172,14 @@ def find_stacktraces_in_data(data, include_raw=False):
             platforms.add(frame.get('platform') or data.get('platform'))
         rv.append(StacktraceInfo(stacktrace=stacktrace, container=container, platforms=platforms))
 
-    exc_container = data.get('sentry.interfaces.Exception')
+    exc_container = data.get('exception')
     if exc_container:
         for exc in exc_container['values']:
             stacktrace = exc.get('stacktrace')
             if stacktrace:
                 _report_stack(stacktrace, exc)
 
-    stacktrace = data.get('sentry.interfaces.Stacktrace')
+    stacktrace = data.get('stacktrace')
     if stacktrace:
         _report_stack(stacktrace, None)
 
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index fefcf1c442..e76309846c 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -465,7 +465,7 @@ def collect_tsdb_data(caches, project, events):
 
         counters[event.datetime][tsdb.models.group][(event.group_id, environment.id)] += 1
 
-        user = event.data.get('sentry.interfaces.User')
+        user = event.data.get('user')
         if user:
             sets[event.datetime][tsdb.models.users_affected_by_group][(event.group_id, environment.id)].add(
                 get_event_user_from_interface(user).tag_value,
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index cf191f73b4..988cfaaf5a 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -62,7 +62,7 @@ DEFAULT_EVENT_DATA = {
     'modules': {
         'raven': '3.1.13'
     },
-    'sentry.interfaces.Http': {
+    'request': {
         'cookies': {},
         'data': {},
         'env': {},
@@ -71,7 +71,7 @@ DEFAULT_EVENT_DATA = {
         'query_string': '',
         'url': 'http://example.com',
     },
-    'sentry.interfaces.Stacktrace': {
+    'stacktrace': {
         'frames': [
             {
                 'abs_path':
@@ -90,12 +90,12 @@ DEFAULT_EVENT_DATA = {
                 'raven.base',
                 'post_context': [
                     '                },', '            })', '',
-                    "        if 'sentry.interfaces.Stacktrace' in data:",
+                    "        if 'stacktrace' in data:",
                     '            if self.include_paths:'
                 ],
                 'pre_context': [
                     '', '            data.update({',
-                    "                'sentry.interfaces.Stacktrace': {",
+                    "                'stacktrace': {",
                     "                    'frames': get_stack_info(frames,",
                     '                        list_max_length=self.list_max_length,'
                 ],
@@ -106,10 +106,10 @@ DEFAULT_EVENT_DATA = {
                     'event_type': 'raven.events.Message',
                     'frames': '<generator object iter_stack_frames at 0x103fef050>',
                     'handler': '<raven.events.Message object at 0x103feb710>',
-                    'k': 'sentry.interfaces.Message',
+                    'k': 'logentry',
                     'public_key': None,
                     'result': {
-                        'sentry.interfaces.Message':
+                        'logentry':
                         "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
                     },
                     'self': '<raven.base.Client object at 0x104397f10>',
@@ -135,12 +135,12 @@ DEFAULT_EVENT_DATA = {
                 'raven.base',
                 'post_context': [
                     '                },', '            })', '',
-                    "        if 'sentry.interfaces.Stacktrace' in data:",
+                    "        if 'stacktrace' in data:",
                     '            if self.include_paths:'
                 ],
                 'pre_context': [
                     '', '            data.update({',
-                    "                'sentry.interfaces.Stacktrace': {",
+                    "                'stacktrace': {",
                     "                    'frames': get_stack_info(frames,",
                     '                        list_max_length=self.list_max_length,'
                 ],
@@ -151,10 +151,10 @@ DEFAULT_EVENT_DATA = {
                     'event_type': 'raven.events.Message',
                     'frames': '<generator object iter_stack_frames at 0x103fef050>',
                     'handler': '<raven.events.Message object at 0x103feb710>',
-                    'k': 'sentry.interfaces.Message',
+                    'k': 'logentry',
                     'public_key': None,
                     'result': {
-                        'sentry.interfaces.Message':
+                        'logentry':
                         "{'message': 'This is a test message generated using ``raven test``', 'params': []}"
                     },
                     'self': '<raven.base.Client object at 0x104397f10>',
@@ -472,7 +472,7 @@ class Fixtures(object):
             kwargs['data']['tags'] = tags
         if kwargs.get('stacktrace'):
             stacktrace = kwargs.pop('stacktrace')
-            kwargs['data']['sentry.interfaces.Stacktrace'] = stacktrace
+            kwargs['data']['stacktrace'] = stacktrace
 
         kwargs['data'].setdefault(
             'errors', [{
@@ -483,8 +483,8 @@ class Fixtures(object):
 
         # maintain simple event fixtures by supporting the legacy message
         # parameter just like our API would
-        if 'sentry.interfaces.Message' not in kwargs['data']:
-            kwargs['data']['sentry.interfaces.Message'] = {
+        if 'logentry' not in kwargs['data']:
+            kwargs['data']['logentry'] = {
                 'message': kwargs.get('message') or '<unlabeled event>',
             }
 
@@ -493,7 +493,7 @@ class Fixtures(object):
                 {
                     'type': 'default',
                     'metadata': {
-                        'title': kwargs['data']['sentry.interfaces.Message']['message'],
+                        'title': kwargs['data']['logentry']['message'],
                     },
                 }
             )
@@ -538,7 +538,7 @@ class Fixtures(object):
                 "extra": {
                     "session:duration": 40364
                 },
-                "sentry.interfaces.Exception": {
+                "exception": {
                     "exc_omitted": null,
                     "values": [{
                         "stacktrace": {
@@ -569,20 +569,20 @@ class Fixtures(object):
                         "module": null
                     }]
                 },
-                "sentry.interfaces.Http": {
+                "request": {
                     "url": "https://sentry.io/katon-direct/localhost/issues/112734598/",
                     "headers": [
                         ["Referer", "https://sentry.io/welcome/"],
                         ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
                     ]
                 },
-                "sentry.interfaces.User": {
+                "user": {
                     "ip_address": "0.0.0.0",
                     "id": "41656",
                     "email": "test@example.com"
                 },
                 "version": "7",
-                "sentry.interfaces.Breadcrumbs": {
+                "breadcrumbs": {
                     "values": [
                         {
                             "category": "xhr",
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
index 244914b2db..d63d125119 100644
--- a/src/sentry/utils/committers.py
+++ b/src/sentry/utils/committers.py
@@ -39,10 +39,10 @@ def score_path_match_length(path_a, path_b):
 def _get_frame_paths(event):
     data = event.data
     try:
-        frames = data['sentry.interfaces.Stacktrace']['frames']
+        frames = data['stacktrace']['frames']
     except KeyError:
         try:
-            frames = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
+            frames = data['exception']['values'][0]['stacktrace']['frames']
         except (KeyError, TypeError):
             return []  # can't find stacktrace information
 
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 74fbc95ac1..c5b860318c 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -74,26 +74,26 @@ class SensitiveDataFilter(object):
 
     def apply(self, data):
         # TODO(dcramer): move this into each interface
-        if 'sentry.interfaces.Stacktrace' in data:
-            self.filter_stacktrace(data['sentry.interfaces.Stacktrace'])
+        if 'stacktrace' in data:
+            self.filter_stacktrace(data['stacktrace'])
 
-        if 'sentry.interfaces.Exception' in data:
-            for exc in data['sentry.interfaces.Exception']['values']:
+        if 'exception' in data:
+            for exc in data['exception']['values']:
                 if exc.get('stacktrace'):
                     self.filter_stacktrace(exc['stacktrace'])
 
-        if 'sentry.interfaces.Breadcrumbs' in data:
-            for crumb in data['sentry.interfaces.Breadcrumbs'].get('values') or ():
+        if 'breadcrumbs' in data:
+            for crumb in data['breadcrumbs'].get('values') or ():
                 self.filter_crumb(crumb)
 
-        if 'sentry.interfaces.Http' in data:
-            self.filter_http(data['sentry.interfaces.Http'])
+        if 'request' in data:
+            self.filter_http(data['request'])
 
-        if 'sentry.interfaces.User' in data:
-            self.filter_user(data['sentry.interfaces.User'])
+        if 'user' in data:
+            self.filter_user(data['user'])
 
-        if 'sentry.interfaces.Csp' in data:
-            self.filter_csp(data['sentry.interfaces.Csp'])
+        if 'csp' in data:
+            self.filter_csp(data['csp'])
 
         if 'extra' in data:
             data['extra'] = varmap(self.sanitize, data['extra'])
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index e38c8d030b..7bfeb91aee 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -13,9 +13,9 @@ def has_sourcemap(event):
         return False
     data = event.data
 
-    if 'sentry.interfaces.Exception' not in data:
+    if 'exception' not in data:
         return False
-    exception = data['sentry.interfaces.Exception']
+    exception = data['exception']
     for value in exception['values']:
         stacktrace = value.get('stacktrace', {})
         for frame in stacktrace.get('frames', []):
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index 0c5f788bde..7ebdc8581b 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -135,7 +135,7 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
 
     data['platform'] = platform
     data['message'] = 'This is an example %s exception' % (sample_name or platform, )
-    data['sentry.interfaces.User'] = generate_user(
+    data['user'] = generate_user(
         ip_address='127.0.0.1',
         username='sentry',
         id=1,
@@ -155,7 +155,7 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
     data['modules'] = {
         'my.package': '1.0.0',
     }
-    data['sentry.interfaces.Http'] = {
+    data['request'] = {
         "cookies": 'foo=bar;biz=baz',
         "url": "http://example.com/foo",
         "headers": {
@@ -182,7 +182,7 @@ def load_data(platform, default=None, timestamp=None, sample_name=None):
             pass
 
     # Make breadcrumb timestamps relative to right now so they make sense
-    breadcrumbs = data.get('sentry.interfaces.Breadcrumbs')
+    breadcrumbs = data.get('breadcrumbs')
     if breadcrumbs is not None:
         duration = 1000
         # At this point, breadcrumbs are not normalized. They can either be a
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index e35976ee8f..75489cc1c1 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -791,7 +791,7 @@ class SecurityReportView(StoreView):
 
     def security_report_type(self, body):
         report_type_for_key = {
-            'csp-report': 'sentry.interfaces.Csp',
+            'csp-report': 'csp',
             'expect-ct-report': 'expectct',
             'expect-staple-report': 'expectstaple',
             'known-pins': 'hpkp',
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index 1d0bf5da98..08b0286e29 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -176,7 +176,7 @@ class RavenIntegrationTest(TransactionTestCase):
         group = Group.objects.get()
         assert group.event_set.count() == 1
         instance = group.event_set.get()
-        assert instance.data['sentry.interfaces.Message']['message'] == 'foo'
+        assert instance.data['logentry']['message'] == 'foo'
 
 
 class SentryRemoteTest(TestCase):
@@ -503,7 +503,7 @@ class CspReportTest(TestCase):
         assert Event.objects.count() == 1
         e = Event.objects.all()[0]
         Event.objects.bind_nodes([e], 'data')
-        assert output['message'] == e.data['sentry.interfaces.Message']['message']
+        assert output['message'] == e.data['logentry']['message']
         for key, value in six.iteritems(output['tags']):
             assert e.get_tag(key) == value
         self.assertDictContainsSubset(output['data'], e.data, e.data)
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index dcd2e5f69e..2e01cbbfe2 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -102,7 +102,7 @@ class EventCommittersTest(APITestCase):
             data={
                 'environment': 'production',
                 'type': 'default',
-                'sentry.interfaces.Exception': {
+                'exception': {
                     'values': [
                         {
                             'type': 'ValueError',
diff --git a/tests/sentry/coreapi/test_coreapi.py b/tests/sentry/coreapi/test_coreapi.py
index 349ea27138..67a66c908e 100644
--- a/tests/sentry/coreapi/test_coreapi.py
+++ b/tests/sentry/coreapi/test_coreapi.py
@@ -87,7 +87,7 @@ def test_get_interface_does_not_let_through_disallowed_name():
 
 def test_get_interface_allows_http():
     from sentry.interfaces.http import Http
-    result = get_interface('sentry.interfaces.Http')
+    result = get_interface('request')
     assert result is Http
     result = get_interface('request')
     assert result is Http
diff --git a/tests/sentry/digests/test_utilities.py b/tests/sentry/digests/test_utilities.py
index 4767c8622e..1ce05e8964 100644
--- a/tests/sentry/digests/test_utilities.py
+++ b/tests/sentry/digests/test_utilities.py
@@ -192,7 +192,7 @@ class GetPersonalizedDigestsTestCase(TestCase):
     def create_event_data(self, filename, url='http://example.com'):
         data = {
             'tags': [('level', 'error')],
-            'sentry.interfaces.Stacktrace': {
+            'stacktrace': {
                 'frames': [
                     {
                         'lineno': 1,
@@ -200,7 +200,7 @@ class GetPersonalizedDigestsTestCase(TestCase):
                     },
                 ],
             },
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': url
             },
         }
diff --git a/tests/sentry/event_manager/test_ensure_has_ip.py b/tests/sentry/event_manager/test_ensure_has_ip.py
index a36df48d8a..c5fdf4b9dc 100644
--- a/tests/sentry/event_manager/test_ensure_has_ip.py
+++ b/tests/sentry/event_manager/test_ensure_has_ip.py
@@ -11,66 +11,66 @@ def validate_and_normalize(report, client_ip=None):
 
 def test_with_remote_addr():
     inp = {
-        "sentry.interfaces.Http": {
+        "request": {
             "url": "http://example.com/",
             "env": {"REMOTE_ADDR": "192.168.0.1"},
         }
     }
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "192.168.0.1"
+    assert out["request"]["env"]["REMOTE_ADDR"] == "192.168.0.1"
 
 
 def test_with_user_ip():
-    inp = {"sentry.interfaces.User": {"ip_address": "192.168.0.1"}}
+    inp = {"user": {"ip_address": "192.168.0.1"}}
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.User"]["ip_address"] == "192.168.0.1"
+    assert out["user"]["ip_address"] == "192.168.0.1"
 
 
 def test_with_user_auto_ip():
-    inp = {"sentry.interfaces.User": {"ip_address": "{{auto}}"}}
+    inp = {"user": {"ip_address": "{{auto}}"}}
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+    assert out["user"]["ip_address"] == "127.0.0.1"
 
     inp = {"user": {"ip_address": "{{auto}}"}}
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+    assert out["user"]["ip_address"] == "127.0.0.1"
 
 
 def test_without_ip_values():
     inp = {
         "platform": "javascript",
-        "sentry.interfaces.User": {},
-        "sentry.interfaces.Http": {"url": "http://example.com/", "env": {}},
+        "user": {},
+        "request": {"url": "http://example.com/", "env": {}},
     }
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+    assert out["user"]["ip_address"] == "127.0.0.1"
 
 
 def test_without_any_values():
     inp = {"platform": "javascript"}
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+    assert out["user"]["ip_address"] == "127.0.0.1"
 
 
 def test_with_http_auto_ip():
     inp = {
-        "sentry.interfaces.Http": {
+        "request": {
             "url": "http://example.com/",
             "env": {"REMOTE_ADDR": "{{auto}}"},
         }
     }
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
+    assert out["request"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
 
 
 def test_with_all_auto_ip():
     inp = {
-        "sentry.interfaces.User": {"ip_address": "{{auto}}"},
-        "sentry.interfaces.Http": {
+        "user": {"ip_address": "{{auto}}"},
+        "request": {
             "url": "http://example.com/",
             "env": {"REMOTE_ADDR": "{{auto}}"},
         },
     }
     out = validate_and_normalize(inp, client_ip="127.0.0.1")
-    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
-    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+    assert out["request"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
+    assert out["user"]["ip_address"] == "127.0.0.1"
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 05480b5096..c68db37eb6 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -691,7 +691,7 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(make_event(
             event_id='a',
             environment='totally unique environment',
-            **{'sentry.interfaces.User': {
+            **{'user': {
                 'id': '1',
             }}
         ))
@@ -752,7 +752,7 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(
             make_event(
                 event_id='b',
-                **{'sentry.interfaces.User': {
+                **{'user': {
                     'id': '1',
                     'name': 'jane',
                 }}
@@ -768,7 +768,7 @@ class EventManagerTest(TransactionTestCase):
         assert euser.ident == '1'
 
     def test_event_user_unicode_identifier(self):
-        manager = EventManager(make_event(**{'sentry.interfaces.User': {'username': u'foô'}}))
+        manager = EventManager(make_event(**{'user': {'username': u'foô'}}))
         manager.normalize()
         with self.tasks():
             manager.save(self.project.id)
@@ -900,7 +900,7 @@ class EventManagerTest(TransactionTestCase):
             make_event(
                 **{
                     'message': '',
-                    'sentry.interfaces.Message': {
+                    'logentry': {
                         'formatted': 'foo bar',
                         'message': 'foo %s',
                         'params': ['bar'],
@@ -922,7 +922,7 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(
             make_event(
                 **{
-                    'sentry.interfaces.Exception': {
+                    'exception': {
                         'values': [{
                             'type': 'Foo',
                             'value': 'bar',
@@ -946,7 +946,7 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(
             make_event(
                 **{
-                    'sentry.interfaces.Csp': {
+                    'csp': {
                         'effective_directive': 'script-src',
                         'blocked_uri': 'http://example.com',
                     },
@@ -988,7 +988,7 @@ class EventManagerTest(TransactionTestCase):
             make_event(
                 **{
                     'message': None,
-                    'sentry.interfaces.Message': {
+                    'logentry': {
                         'message': 'hello world',
                     },
                 }
@@ -1008,7 +1008,7 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(self.project.id)
 
         assert event.message == '1234'
-        assert event.data['sentry.interfaces.Message'] == {
+        assert event.data['logentry'] == {
             'message': '1234',
         }
 
@@ -1018,19 +1018,19 @@ class EventManagerTest(TransactionTestCase):
         }))
         manager.normalize()
         event = manager.save(self.project.id)
-        assert event.data['sentry.interfaces.Message'] == {
+        assert event.data['logentry'] == {
             'message': 'hello world',
         }
 
     def test_message_attribute_goes_to_formatted(self):
-        # The combining of 'message' and 'sentry.interfaces.Message' is a bit
+        # The combining of 'message' and 'logentry' is a bit
         # of a compatibility hack, and ideally we would just enforce a stricter
         # schema instead of combining them like this.
         manager = EventManager(
             make_event(
                 **{
                     'message': 'world hello',
-                    'sentry.interfaces.Message': {
+                    'logentry': {
                         'message': 'hello world',
                     },
                 }
@@ -1038,7 +1038,7 @@ class EventManagerTest(TransactionTestCase):
         )
         manager.normalize()
         event = manager.save(self.project.id)
-        assert event.data['sentry.interfaces.Message'] == {
+        assert event.data['logentry'] == {
             'message': 'hello world',
             'formatted': 'world hello',
         }
@@ -1047,14 +1047,14 @@ class EventManagerTest(TransactionTestCase):
         manager = EventManager(
             make_event(
                 **{
-                    'sentry.interfaces.Message': 'a plain string',
+                    'logentry': 'a plain string',
                     'message': 'another string',
                 }
             )
         )
         manager.normalize()
         event = manager.save(self.project.id)
-        assert event.data['sentry.interfaces.Message'] == {
+        assert event.data['logentry'] == {
             'message': 'a plain string',
             'formatted': 'another string',
         }
@@ -1167,7 +1167,7 @@ class EventManagerTest(TransactionTestCase):
         ]
 
         data = {
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [item.value for item in items]
             },
         }
diff --git a/tests/sentry/event_manager/test_generate_culprit.py b/tests/sentry/event_manager/test_generate_culprit.py
index cde72b21c3..ac1d33db4b 100644
--- a/tests/sentry/event_manager/test_generate_culprit.py
+++ b/tests/sentry/event_manager/test_generate_culprit.py
@@ -8,7 +8,7 @@ from sentry.event_manager import generate_culprit, md5_from_hash
 
 def test_with_exception_interface():
     data = {
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values': [
                 {
                     'stacktrace': {
@@ -26,7 +26,7 @@ def test_with_exception_interface():
                 }
             ]
         },
-        'sentry.interfaces.Stacktrace': {
+        'stacktrace': {
             'frames': [
                 {
                     'lineno': 1,
@@ -38,7 +38,7 @@ def test_with_exception_interface():
                 }
             ],
         },
-        'sentry.interfaces.Http': {
+        'request': {
             'url': 'http://example.com'
         },
     }
@@ -47,7 +47,7 @@ def test_with_exception_interface():
 
 def test_with_missing_exception_interface():
     data = {
-        'sentry.interfaces.Stacktrace': {
+        'stacktrace': {
             'frames': [
                 {
                     'lineno': 1,
@@ -59,7 +59,7 @@ def test_with_missing_exception_interface():
                 }
             ],
         },
-        'sentry.interfaces.Http': {
+        'request': {
             'url': 'http://example.com'
         },
     }
@@ -68,8 +68,8 @@ def test_with_missing_exception_interface():
 
 def test_with_empty_stacktrace():
     data = {
-        'sentry.interfaces.Stacktrace': None,
-        'sentry.interfaces.Http': {
+        'stacktrace': None,
+        'request': {
             'url': 'http://example.com'
         },
     }
@@ -78,14 +78,14 @@ def test_with_empty_stacktrace():
 
 def test_with_only_http_interface():
     data = {
-        'sentry.interfaces.Http': {
+        'request': {
             'url': 'http://example.com'
         },
     }
     assert generate_culprit(data) == 'http://example.com'
 
     data = {
-        'sentry.interfaces.Http': {},
+        'request': {},
     }
     assert generate_culprit(data) == ''
 
@@ -96,7 +96,7 @@ def test_empty_data():
 
 def test_truncation():
     data = {
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values':
             [{
                 'stacktrace': {
@@ -110,7 +110,7 @@ def test_truncation():
     assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
 
     data = {
-        'sentry.interfaces.Stacktrace': {
+        'stacktrace': {
             'frames': [{
                 'filename': 'x' * (MAX_CULPRIT_LENGTH + 1),
             }]
@@ -119,7 +119,7 @@ def test_truncation():
     assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
 
     data = {
-        'sentry.interfaces.Http': {
+        'request': {
             'url': 'x' * (MAX_CULPRIT_LENGTH + 1),
         }
     }
diff --git a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
index 5db2dda8c9..460be4d722 100644
--- a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
+++ b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
@@ -16,13 +16,13 @@ def test_stacktrace_wins_over_http(http_comp_hash, stack_comp_hash):
     stack_comp_hash.return_value = [['foo', 'bar']]
     event = Event(
         data={
-            'sentry.interfaces.Stacktrace': {
+            'stacktrace': {
                 'frames': [{
                     'lineno': 1,
                     'filename': 'foo.py',
                 }],
             },
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': 'http://example.com'
             },
         },
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index e772816dcc..01c2df2c5f 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -44,15 +44,13 @@ def test_interface_is_relabeled():
     data = manager.get_data()
 
     assert data['user'] == {'id': '1'}
-    # data is a CanonicalKeyDict, so we need to check .keys() explicitly
-    assert 'sentry.interfaces.User' not in data.keys()
 
 
 def test_does_default_ip_address_to_user():
     manager = EventManager(
         make_event(
             **{
-                'sentry.interfaces.Http': {
+                'request': {
                     'url': 'http://example.com',
                     'env': {
                         'REMOTE_ADDR': '127.0.0.1',
@@ -64,7 +62,7 @@ def test_does_default_ip_address_to_user():
     manager.normalize()
     data = manager.get_data()
 
-    assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+    assert data['user']['ip_address'] == '127.0.0.1'
 
 
 @mock.patch('sentry.interfaces.geo.Geo.from_ip_address')
@@ -81,7 +79,7 @@ def test_does_geo_from_ip(from_ip_address_mock):
     manager = EventManager(
         make_event(
             **{
-                'sentry.interfaces.User': {
+                'user': {
                     'ip_address': '192.168.0.1',
                 },
             }
@@ -90,8 +88,8 @@ def test_does_geo_from_ip(from_ip_address_mock):
 
     manager.normalize()
     data = manager.get_data()
-    assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
-    assert data['sentry.interfaces.User']['geo'] == geo
+    assert data['user']['ip_address'] == '192.168.0.1'
+    assert data['user']['geo'] == geo
 
 
 @mock.patch('sentry.interfaces.geo.geo_by_addr')
@@ -101,7 +99,7 @@ def test_skips_geo_with_no_result(geo_by_addr_mock):
     manager = EventManager(
         make_event(
             **{
-                'sentry.interfaces.User': {
+                'user': {
                     'ip_address': '127.0.0.1',
                 },
             }
@@ -109,21 +107,21 @@ def test_skips_geo_with_no_result(geo_by_addr_mock):
     )
     manager.normalize()
     data = manager.get_data()
-    assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-    assert 'geo' not in data['sentry.interfaces.User']
+    assert data['user']['ip_address'] == '127.0.0.1'
+    assert 'geo' not in data['user']
 
 
 def test_does_default_ip_address_if_present():
     manager = EventManager(
         make_event(
             **{
-                'sentry.interfaces.Http': {
+                'request': {
                     'url': 'http://example.com',
                     'env': {
                         'REMOTE_ADDR': '127.0.0.1',
                     }
                 },
-                'sentry.interfaces.User': {
+                'user': {
                     'ip_address': '192.168.0.1',
                 },
             }
@@ -131,7 +129,7 @@ def test_does_default_ip_address_if_present():
     )
     manager.normalize()
     data = manager.get_data()
-    assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
+    assert data['user']['ip_address'] == '192.168.0.1'
 
 
 def test_long_culprit():
@@ -160,7 +158,7 @@ def test_long_message():
     )
     manager.normalize()
     data = manager.get_data()
-    assert len(data['sentry.interfaces.Message']['message']) == \
+    assert len(data['logentry']['message']) == \
         settings.SENTRY_MAX_MESSAGE_LENGTH
 
 
@@ -195,8 +193,8 @@ def test_bad_interfaces_no_exception():
     manager = EventManager(
         make_event(
             **{
-                'sentry.interfaces.User': None,
-                'sentry.interfaces.Http': None,
+                'user': None,
+                'request': None,
                 'sdk': 'A string for sdk is not valid'
             }
         ),
@@ -208,7 +206,7 @@ def test_bad_interfaces_no_exception():
         make_event(
             **{
                 'errors': {},
-                'sentry.interfaces.Http': {},
+                'request': {},
             }
         )
     )
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
index 8ec02cd75c..0628c427d7 100644
--- a/tests/sentry/event_manager/test_validate_csp.py
+++ b/tests/sentry/event_manager/test_validate_csp.py
@@ -18,7 +18,7 @@ def test_csp_validate_basic():
     report = {
         "release": "abc123",
         "environment": "production",
-        "interface": 'sentry.interfaces.Csp',
+        "interface": 'csp',
         "report": {
             "csp-report": {
                 "document-uri": "http://45.55.25.245:8123/csp",
@@ -36,15 +36,15 @@ def test_csp_validate_basic():
     assert result['release'] == 'abc123'
     assert result['environment'] == 'production'
     assert result['errors'] == []
-    assert 'sentry.interfaces.Message' in result
+    assert 'logentry' in result
     assert 'culprit' in result
     assert result['tags'] == [
         ('effective-directive', 'img-src'),
         ('blocked-uri', 'http://google.com'),
     ]
-    assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
-    assert result['sentry.interfaces.Http']['url'] == 'http://45.55.25.245:8123/csp'
-    assert dict(result['sentry.interfaces.Http']['headers']) == {
+    assert result['user'] == {'ip_address': '198.51.100.0'}
+    assert result['request']['url'] == 'http://45.55.25.245:8123/csp'
+    assert dict(result['request']['headers']) == {
         'User-Agent': 'Awesome Browser',
         'Referer': 'http://example.com'
     }
@@ -53,7 +53,7 @@ def test_csp_validate_basic():
 def test_csp_validate_failure():
     report = {
         "release": "abc123",
-        "interface": 'sentry.interfaces.Csp',
+        "interface": 'csp',
         "report": {}
     }
 
@@ -67,7 +67,7 @@ def test_csp_validate_failure():
 def test_csp_tags_out_of_bounds():
     report = {
         "release": "abc123",
-        "interface": 'sentry.interfaces.Csp',
+        "interface": 'csp',
         "report": {
             "csp-report": {
                 "document-uri": "http://45.55.25.245:8123/csp",
@@ -90,7 +90,7 @@ def test_csp_tags_out_of_bounds():
 def test_csp_tag_value():
     report = {
         "release": "abc123",
-        "interface": 'sentry.interfaces.Csp',
+        "interface": 'csp',
         "report": {
             "csp-report": {
                 "document-uri": "http://45.55.25.245:8123/csp",
@@ -129,15 +129,15 @@ def test_hpkp_validate_basic():
     result = validate_and_normalize(report)
     assert result['release'] == 'abc123'
     assert result['errors'] == []
-    assert 'sentry.interfaces.Message' in result
+    assert 'logentry' in result
     assert 'culprit' in result
     assert sorted(result['tags']) == [
         ('hostname', 'www.example.com'),
         ('include-subdomains', 'false'),
         ('port', '443'),
     ]
-    assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
-    assert result['sentry.interfaces.Http'] == {
+    assert result['user'] == {'ip_address': '198.51.100.0'}
+    assert result['request'] == {
         'url': 'www.example.com',
         'headers': [
             ('User-Agent', 'Awesome Browser'),
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index 7e5cd0655a..7695acc064 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -92,12 +92,12 @@ def test_invalid_interface_name():
 
 def test_invalid_interface_import_path():
     data = validate_and_normalize(
-        {"message": "foo", "sentry.interfaces.Exception2": "bar"}
+        {"message": "foo", "exception2": "bar"}
     )
-    assert "sentry.interfaces.Exception2" not in data
+    assert "exception2" not in data
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_attribute"
-    assert data["errors"][0]["name"] == "sentry.interfaces.Exception2"
+    assert data["errors"][0]["name"] == "exception2"
 
 
 def test_does_expand_list():
@@ -109,7 +109,7 @@ def test_does_expand_list():
             ],
         }
     )
-    assert "sentry.interfaces.Exception" in data
+    assert "exception" in data
 
 
 def test_log_level_as_string():
@@ -355,18 +355,18 @@ def test_messages():
     # Just 'message': wrap it in interface
     data = validate_and_normalize({"message": "foo is bar"})
     assert "message" not in data
-    assert data["sentry.interfaces.Message"] == {"message": "foo is bar"}
+    assert data["logentry"] == {"message": "foo is bar"}
 
     # both 'message' and interface with no 'formatted' value, put 'message'
     # into 'formatted'.
     data = validate_and_normalize(
         {
             "message": "foo is bar",
-            "sentry.interfaces.Message": {"message": "something else"},
+            "logentry": {"message": "something else"},
         }
     )
     assert "message" not in data
-    assert data["sentry.interfaces.Message"] == {
+    assert data["logentry"] == {
         "message": "something else",
         "formatted": "foo is bar",
     }
@@ -375,7 +375,7 @@ def test_messages():
     data = validate_and_normalize(
         {
             "message": "foo is bar",
-            "sentry.interfaces.Message": {
+            "logentry": {
                 "message": "something else",
                 "formatted": "something else formatted",
             },
@@ -383,7 +383,7 @@ def test_messages():
     )
     assert "message" not in data
     assert len(data["errors"]) == 0
-    assert data["sentry.interfaces.Message"] == {
+    assert data["logentry"] == {
         "message": "something else",
         "formatted": "something else formatted",
     }
@@ -397,7 +397,7 @@ def test_messages_old_behavior():
     data = validate_and_normalize(
         {
             "message": "foo is bar",
-            "sentry.interfaces.Message": {
+            "logentry": {
                 "message": "something else",
                 "formatted": "something else",
             },
@@ -405,7 +405,7 @@ def test_messages_old_behavior():
     )
     assert "message" not in data
     assert len(data["errors"]) == 0
-    assert data["sentry.interfaces.Message"] == {
+    assert data["logentry"] == {
         "message": "something else",
         "formatted": "foo is bar",
     }
@@ -413,8 +413,8 @@ def test_messages_old_behavior():
     # interface discarded as invalid, replaced by new interface containing
     # wrapped 'message'
     data = validate_and_normalize(
-        {"message": "foo is bar", "sentry.interfaces.Message": {"invalid": "invalid"}}
+        {"message": "foo is bar", "logentry": {"invalid": "invalid"}}
     )
     assert "message" not in data
     assert len(data["errors"]) == 1
-    assert data["sentry.interfaces.Message"] == {"message": "foo is bar"}
+    assert data["logentry"] == {"message": "foo is bar"}
diff --git a/tests/sentry/filters/test_browser_extensions.py b/tests/sentry/filters/test_browser_extensions.py
index a5cc8e461a..a30169a6f6 100644
--- a/tests/sentry/filters/test_browser_extensions.py
+++ b/tests/sentry/filters/test_browser_extensions.py
@@ -13,7 +13,7 @@ class BrowserExtensionsFilterTest(TestCase):
     def get_mock_data(self, exc_value=None, exc_source=None):
         return {
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -71,7 +71,7 @@ class BrowserExtensionsFilterTest(TestCase):
 
     def test_filters_malformed_data(self):
         data = self.get_mock_data()
-        data['sentry.interfaces.Exception'] = None
+        data['exception'] = None
         assert not self.apply_filter(data)
 
     def test_filters_facebook_source(self):
diff --git a/tests/sentry/filters/test_legacy_browsers.py b/tests/sentry/filters/test_legacy_browsers.py
index 71dd8ae22b..51935004c3 100644
--- a/tests/sentry/filters/test_legacy_browsers.py
+++ b/tests/sentry/filters/test_legacy_browsers.py
@@ -7,6 +7,7 @@ from ua_parser.user_agent_parser import Parse
 from sentry.filters.legacy_browsers import LegacyBrowsersFilter
 from sentry.models import ProjectOption
 from sentry.testutils import APITestCase, TestCase
+from sentry.utils.canonical import CanonicalKeyView
 
 USER_AGENTS = {
     'android_2':
@@ -204,12 +205,12 @@ class LegacyBrowsersFilterTest(TestCase):
     filter_cls = LegacyBrowsersFilter
 
     def apply_filter(self, data):
-        return self.filter_cls(self.project).test(data)
+        return self.filter_cls(self.project).test(CanonicalKeyView(data))
 
     def get_mock_data(self, user_agent):
         return {
             'platform': 'javascript',
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': 'http://example.com',
                 'method': 'GET',
                 'headers': [
diff --git a/tests/sentry/filters/test_localhost.py b/tests/sentry/filters/test_localhost.py
index 2440cab104..ced97cc00f 100644
--- a/tests/sentry/filters/test_localhost.py
+++ b/tests/sentry/filters/test_localhost.py
@@ -12,10 +12,10 @@ class LocalhostFilterTest(TestCase):
 
     def get_mock_data(self, client_ip=None, url=None):
         return {
-            'sentry.interfaces.User': {
+            'user': {
                 'ip_address': client_ip,
             },
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': url,
             }
         }
diff --git a/tests/sentry/filters/test_web_crawlers.py b/tests/sentry/filters/test_web_crawlers.py
index 8688e13b9d..14421fb5a1 100644
--- a/tests/sentry/filters/test_web_crawlers.py
+++ b/tests/sentry/filters/test_web_crawlers.py
@@ -12,7 +12,7 @@ class WebCrawlersFilterTest(TestCase):
 
     def get_mock_data(self, user_agent):
         return {
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': 'http://example.com',
                 'method': 'GET',
                 'headers': [
diff --git a/tests/sentry/interfaces/test_breadcrumbs.py b/tests/sentry/interfaces/test_breadcrumbs.py
index 90e4c09e1e..9a39e31c7c 100644
--- a/tests/sentry/interfaces/test_breadcrumbs.py
+++ b/tests/sentry/interfaces/test_breadcrumbs.py
@@ -8,7 +8,7 @@ from sentry.testutils import TestCase
 
 class BreadcrumbsTest(TestCase):
     def test_path(self):
-        assert Breadcrumbs().get_path() == 'sentry.interfaces.Breadcrumbs'
+        assert Breadcrumbs().get_path() == 'breadcrumbs'
 
     def test_simple(self):
         result = Breadcrumbs.to_python(
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index f0159725bb..d7148aed52 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -65,7 +65,7 @@ class ExceptionTest(TestCase):
         }
 
     def test_path(self):
-        assert self.interface.get_path() == 'sentry.interfaces.Exception'
+        assert self.interface.get_path() == 'exception'
 
     def test_args_as_keyword_args(self):
         inst = Exception.to_python(
@@ -151,7 +151,7 @@ ValueError: hello world
         )
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert context['hasSystemFrames']
@@ -181,7 +181,7 @@ ValueError: hello world
         )
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert context['values'][0]['stacktrace']['frames'][0]['symbol'] == 'Class.myfunc'
@@ -218,7 +218,7 @@ ValueError: hello world
         )
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert not context['hasSystemFrames']
@@ -250,11 +250,11 @@ ValueError: hello world
             }
         ]
         exc = dict(values=values)
-        normalize_in_app({'sentry.interfaces.Exception': exc})
+        normalize_in_app({'exception': exc})
         inst = Exception.to_python(exc)
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert not context['hasSystemFrames']
@@ -293,7 +293,7 @@ ValueError: hello world
         )
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'
@@ -323,7 +323,7 @@ ValueError: hello world
         )
 
         self.create_event(data={
-            'sentry.interfaces.Exception': inst.to_json(),
+            'exception': inst.to_json(),
         })
         context = inst.get_api_context()
         assert context['values'][0]['mechanism']['type'] == 'generic'
diff --git a/tests/sentry/interfaces/test_http.py b/tests/sentry/interfaces/test_http.py
index 7722bca324..60013aae30 100644
--- a/tests/sentry/interfaces/test_http.py
+++ b/tests/sentry/interfaces/test_http.py
@@ -17,7 +17,7 @@ class HttpTest(TestCase):
         ))
 
     def test_path(self):
-        assert self.interface.get_path() == 'sentry.interfaces.Http'
+        assert self.interface.get_path() == 'request'
 
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
diff --git a/tests/sentry/interfaces/test_paths.py b/tests/sentry/interfaces/test_paths.py
new file mode 100644
index 0000000000..ea5912af5d
--- /dev/null
+++ b/tests/sentry/interfaces/test_paths.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+from sentry.utils.imports import import_string
+
+
+def test_paths():
+    for interface in settings.SENTRY_INTERFACES.values():
+        cls = import_string(interface)
+        assert cls.path == object.__new__(cls).get_path()
+        assert cls.path == object.__new__(cls).get_alias()
diff --git a/tests/sentry/interfaces/test_security.py b/tests/sentry/interfaces/test_security.py
index b45bf099c6..7e80cfe166 100644
--- a/tests/sentry/interfaces/test_security.py
+++ b/tests/sentry/interfaces/test_security.py
@@ -21,7 +21,7 @@ class CspTest(TestCase):
         )
 
     def test_path(self):
-        assert self.interface.get_path() == 'sentry.interfaces.Csp'
+        assert self.interface.get_path() == 'csp'
 
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 1d7df01162..62ad9db4c7 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -63,9 +63,9 @@ class StacktraceTest(TestCase):
         # Simple test to ensure legacy data works correctly with the ``Frame``
         # objects
         event = self.event
-        interface = Stacktrace.to_python(event.data['sentry.interfaces.Stacktrace'])
+        interface = Stacktrace.to_python(event.data['stacktrace'])
         assert len(interface.frames) == 2
-        assert interface == event.interfaces['sentry.interfaces.Stacktrace']
+        assert interface == event.interfaces['stacktrace']
 
     def test_filename(self):
         Stacktrace.to_python(dict(frames=[{
diff --git a/tests/sentry/interfaces/test_threads.py b/tests/sentry/interfaces/test_threads.py
index c5d316fea4..487afd33d0 100644
--- a/tests/sentry/interfaces/test_threads.py
+++ b/tests/sentry/interfaces/test_threads.py
@@ -46,7 +46,7 @@ class ThreadsTest(TestCase):
 
     def test_basics(self):
         self.create_event(data={
-            'sentry.interfaces.Exception': self.interface.to_json(),
+            'exception': self.interface.to_json(),
         })
         context = self.interface.get_api_context()
         assert context['values'][0]['stacktrace']['frames'][0]['function'] == 'main'
diff --git a/tests/sentry/interfaces/test_user.py b/tests/sentry/interfaces/test_user.py
index 7944bea714..b9a42016d3 100644
--- a/tests/sentry/interfaces/test_user.py
+++ b/tests/sentry/interfaces/test_user.py
@@ -29,7 +29,7 @@ class UserTest(TestCase):
         assert User.to_python({}).to_json() == sink
 
     def test_path(self):
-        assert self.interface.get_path() == 'sentry.interfaces.User'
+        assert self.interface.get_path() == 'user'
 
     def test_serialize_behavior(self):
         assert self.interface.to_json() == {
diff --git a/tests/sentry/lang/java/test_plugin.py b/tests/sentry/lang/java/test_plugin.py
index 182b7971bf..d956aa8d32 100644
--- a/tests/sentry/lang/java/test_plugin.py
+++ b/tests/sentry/lang/java/test_plugin.py
@@ -59,7 +59,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert len(response.data) == 1
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -71,7 +71,7 @@ class BasicResolvingIntegrationTest(TestCase):
                     "uuid": PROGUARD_UUID,
                 }]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         'stacktrace': {
@@ -118,7 +118,7 @@ class BasicResolvingIntegrationTest(TestCase):
 
         event = Event.objects.first()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == 'getClassContext'
@@ -159,7 +159,7 @@ class BasicResolvingIntegrationTest(TestCase):
         assert len(response.data) == 1
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -171,7 +171,7 @@ class BasicResolvingIntegrationTest(TestCase):
                     "uuid": PROGUARD_BUG_UUID,
                 }]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         'stacktrace': {
diff --git a/tests/sentry/lang/javascript/test_example.py b/tests/sentry/lang/javascript/test_example.py
index 3aaa4d35f7..c93b27078c 100644
--- a/tests/sentry/lang/javascript/test_example.py
+++ b/tests/sentry/lang/javascript/test_example.py
@@ -45,7 +45,7 @@ class ExampleTestCase(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -62,7 +62,7 @@ class ExampleTestCase(TestCase):
 
         event = Event.objects.get()
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         assert len(frame_list) == 4
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 2e6f504593..5601310768 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -37,7 +37,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Http': {
+            'request': {
                 'url':
                 'http://example.com',
                 'headers': [
@@ -82,7 +82,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Http': {
+            'request': {
                 'url':
                 'http://example.com',
                 'headers': [
@@ -120,7 +120,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Http': {
+            'request': {
                 'url':
                 'http://example.com',
                 'headers': [
@@ -151,7 +151,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -191,7 +191,7 @@ class JavascriptIntegrationTest(TestCase):
         )
 
         event = Event.objects.get()
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -213,7 +213,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -250,7 +250,7 @@ class JavascriptIntegrationTest(TestCase):
         )
 
         event = Event.objects.get()
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -264,10 +264,10 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Message': {
+            'logentry': {
                 'message': u'ReferenceError: Impossible de d\xe9finir une propri\xe9t\xe9 \xab foo \xbb : objet non extensible'
             },
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -286,10 +286,10 @@ class JavascriptIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        message = event.interfaces['sentry.interfaces.Message']
+        message = event.interfaces['logentry']
         assert message.message == 'ReferenceError: Cannot define property \'foo\': object is not extensible'
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         assert exception.values[0].value == 'Too many files'
         assert exception.values[1].value == 'foo: an unexpected failure occurred while trying to obtain metadata information'
 
@@ -324,7 +324,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -364,7 +364,7 @@ class JavascriptIntegrationTest(TestCase):
             }
         ]
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -406,7 +406,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -446,7 +446,7 @@ class JavascriptIntegrationTest(TestCase):
             }
         ]
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -497,7 +497,7 @@ class JavascriptIntegrationTest(TestCase):
             'message': 'hello',
             'platform': 'javascript',
             'release': 'abc',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -521,7 +521,7 @@ class JavascriptIntegrationTest(TestCase):
         event = Event.objects.get()
         assert not event.data['errors']
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         assert len(frame_list) == 1
@@ -569,7 +569,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -600,7 +600,7 @@ class JavascriptIntegrationTest(TestCase):
         event = Event.objects.get()
         assert not event.data['errors']
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -742,7 +742,7 @@ class JavascriptIntegrationTest(TestCase):
             'message': 'hello',
             'platform': 'javascript',
             'release': 'abc',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -772,7 +772,7 @@ class JavascriptIntegrationTest(TestCase):
         event = Event.objects.get()
         assert not event.data['errors']
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -900,7 +900,7 @@ class JavascriptIntegrationTest(TestCase):
             'platform': 'javascript',
             'release': 'abc',
             'dist': 'foo',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -930,7 +930,7 @@ class JavascriptIntegrationTest(TestCase):
         event = Event.objects.get()
         assert not event.data['errors']
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -975,7 +975,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1014,7 +1014,7 @@ class JavascriptIntegrationTest(TestCase):
             }
         ]
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         frame = frame_list[0]
@@ -1051,7 +1051,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1085,7 +1085,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1125,7 +1125,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1177,7 +1177,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1260,7 +1260,7 @@ class JavascriptIntegrationTest(TestCase):
             'message': 'hello',
             'platform': 'node',
             'release': 'nodeabc123',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1314,7 +1314,7 @@ class JavascriptIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         assert len(frame_list) == 6
@@ -1369,7 +1369,7 @@ class JavascriptIntegrationTest(TestCase):
         data = {
             'message': 'hello',
             'platform': 'node',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type': 'Error',
@@ -1422,7 +1422,7 @@ class JavascriptIntegrationTest(TestCase):
         assert resp.status_code, 200
 
         event = Event.objects.get()
-        exception = event.interfaces['sentry.interfaces.Exception']
+        exception = event.interfaces['exception']
         frame_list = exception.values[0].stacktrace.frames
 
         # This one should not process, so this one should be none.
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index c980cf45ec..3f93d37573 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -539,7 +539,7 @@ def test_get_culprit_is_patched():
     data = {
         'message': 'hello',
         'platform': 'javascript',
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values': [
                 {
                     'type': 'Error',
@@ -575,7 +575,7 @@ def test_ensure_module_names():
     data = {
         'message': 'hello',
         'platform': 'javascript',
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values': [
                 {
                     'type': 'Error',
@@ -601,7 +601,7 @@ def test_ensure_module_names():
         }
     }
     generate_modules(data)
-    exc = data['sentry.interfaces.Exception']['values'][0]
+    exc = data['exception']['values'][0]
     assert exc['stacktrace']['frames'][1]['module'] == 'foo/bar'
 
 
@@ -624,7 +624,7 @@ class ErrorMappingTest(TestCase):
         for x in range(3):
             data = {
                 'platform': 'javascript',
-                'sentry.interfaces.Exception': {
+                'exception': {
                     'values': [
                         {
                             'type':
@@ -659,7 +659,7 @@ class ErrorMappingTest(TestCase):
 
             assert rewrite_exception(data)
 
-            assert data['sentry.interfaces.Exception']['values'][0]['value'] == (
+            assert data['exception']['values'][0]['value'] == (
                 'Component.render(): A valid React element (or null) must be '
                 'returned. You may have returned undefined, an array or '
                 'some other invalid object.'
@@ -680,7 +680,7 @@ class ErrorMappingTest(TestCase):
 
         data = {
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type':
@@ -709,7 +709,7 @@ class ErrorMappingTest(TestCase):
 
         assert rewrite_exception(data)
 
-        assert data['sentry.interfaces.Exception']['values'][0]['value'] == (
+        assert data['exception']['values'][0]['value'] == (
             'Component.getChildContext(): key "" is not defined in '
             'childContextTypes.'
         )
@@ -729,7 +729,7 @@ class ErrorMappingTest(TestCase):
 
         data = {
             'platform': 'javascript',
-            'sentry.interfaces.Exception': {
+            'exception': {
                 'values': [
                     {
                         'type':
@@ -755,7 +755,7 @@ class ErrorMappingTest(TestCase):
 
         assert rewrite_exception(data)
 
-        assert data['sentry.interfaces.Exception']['values'][0]['value'] == (
+        assert data['exception']['values'][0]['value'] == (
             '<redacted>.getChildContext(): key "<redacted>" is not defined in '
             'childContextTypes.'
         )
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index c53aac67a9..9251d9bf41 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -43,7 +43,7 @@ class BasicResolvingIntegrationTest(TestCase):
         }]
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -70,7 +70,7 @@ class BasicResolvingIntegrationTest(TestCase):
                     "version_patchlevel": 0
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         'stacktrace': {
@@ -188,7 +188,7 @@ class BasicResolvingIntegrationTest(TestCase):
 
         event = Event.objects.first()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == '<redacted>'
@@ -250,7 +250,7 @@ class BasicResolvingIntegrationTest(TestCase):
         )
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -270,7 +270,7 @@ class BasicResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -351,7 +351,7 @@ class BasicResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == '<redacted>'
@@ -411,7 +411,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
         }]
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -438,7 +438,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     "version_patchlevel": 0
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         'stacktrace': {
@@ -544,7 +544,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == '<redacted>'
@@ -606,7 +606,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
         )
 
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -626,7 +626,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -707,7 +707,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == '<redacted>'
@@ -755,7 +755,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
         # '/private/var/containers/Bundle/Application/',
         # (kscm_|kscrash_|KSCrash |SentryClient |RNSentry )
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -775,7 +775,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -890,7 +890,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
         assert not frames[0].in_app
         assert not frames[1].in_app
@@ -938,7 +938,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
             "CrashLib.framework/Versions/A/CrashLib"
         )
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -958,7 +958,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
                     }
                 ]
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -1045,7 +1045,7 @@ class InAppHonoringResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
         assert frames[0].in_app
 
@@ -1099,7 +1099,7 @@ class RealResolvingIntegrationTest(TestCase):
                     "version_patchlevel": 4,
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         'stacktrace': {
@@ -1122,7 +1122,7 @@ class RealResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == 'main'
@@ -1189,7 +1189,7 @@ class RealResolvingIntegrationTest(TestCase):
                         "version_patchlevel": 4,
                     }
                 },
-                "sentry.interfaces.Exception": {
+                "exception": {
                     "values": [
                         {
                             'stacktrace': {
@@ -1290,7 +1290,7 @@ class RealResolvingIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
 
         assert frames[0].function == 'main'
@@ -1304,7 +1304,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
     def test_full_mechanism(self):
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -1319,7 +1319,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
                     "version_patchlevel": 0
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -1356,7 +1356,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+        mechanism = event.interfaces['exception'].values[0].mechanism
 
         assert mechanism.type == 'mach'
         assert mechanism.meta['signal']['number'] == 6
@@ -1369,7 +1369,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
     def test_mechanism_name_expansion(self):
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -1384,7 +1384,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
                     "version_patchlevel": 0
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -1419,7 +1419,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+        mechanism = event.interfaces['exception'].values[0].mechanism
 
         assert mechanism.type == 'mach'
         assert mechanism.meta['signal']['number'] == 10
@@ -1433,7 +1433,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
     def test_legacy_mechanism(self):
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -1448,7 +1448,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
                     "version_patchlevel": 0
                 }
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -1482,7 +1482,7 @@ class ExceptionMechanismIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        mechanism = event.interfaces['sentry.interfaces.Exception'].values[0].mechanism
+        mechanism = event.interfaces['exception'].values[0].mechanism
 
         # NOTE: legacy mechanisms are always classified "generic"
         assert mechanism.type == 'generic'
@@ -1540,7 +1540,7 @@ class MinidumpIntegrationTest(TestCase):
 
         event = Event.objects.get()
 
-        bt = event.interfaces['sentry.interfaces.Exception'].values[0].stacktrace
+        bt = event.interfaces['exception'].values[0].stacktrace
         frames = bt.frames
         main = frames[-1]
         assert main.function == 'main'
diff --git a/tests/sentry/lang/native/test_processor.py b/tests/sentry/lang/native/test_processor.py
index cd935354cb..1033dc2913 100644
--- a/tests/sentry/lang/native/test_processor.py
+++ b/tests/sentry/lang/native/test_processor.py
@@ -65,7 +65,7 @@ class BasicResolvingFileTest(TestCase):
     )
     def test_frame_resolution(self):
         event_data = {
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "31.172.207.97"
             },
             "extra": {},
@@ -97,7 +97,7 @@ class BasicResolvingFileTest(TestCase):
                 "sdk_info":
                 SDK_INFO,
             },
-            "sentry.interfaces.Exception": {
+            "exception": {
                 "values": [
                     {
                         "stacktrace": {
@@ -178,7 +178,7 @@ class BasicResolvingFileTest(TestCase):
         event_data = process_stacktraces(
             event_data, make_processors=make_processors)
 
-        bt = event_data['sentry.interfaces.Exception']['values'][0]['stacktrace']
+        bt = event_data['exception']['values'][0]['stacktrace']
         frames = bt['frames']
 
         assert frames[0]['function'] == '<redacted>'
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 785d3bfb9c..2c6cf53c8b 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -58,7 +58,7 @@ class EventTest(TestCase):
     def test_event_as_dict(self):
         event = self.create_event(
             data={
-                'sentry.interfaces.Message': {
+                'logentry': {
                     'message': 'Hello World!',
                 },
             }
@@ -134,7 +134,7 @@ class EventGetLegacyMessageTest(TestCase):
     def test_message_interface(self):
         event = self.create_event(
             message='biz baz',
-            data={'sentry.interfaces.Message': {
+            data={'logentry': {
                 'message': 'foo bar'
             }},
         )
@@ -144,7 +144,7 @@ class EventGetLegacyMessageTest(TestCase):
         event = self.create_event(
             message='biz baz',
             data={
-                'sentry.interfaces.Message': {
+                'logentry': {
                     'message': 'foo %s',
                     'formatted': 'foo bar',
                     'params': ['bar'],
diff --git a/tests/sentry/models/test_projectownership.py b/tests/sentry/models/test_projectownership.py
index f704fc4963..6de7a8d4be 100644
--- a/tests/sentry/models/test_projectownership.py
+++ b/tests/sentry/models/test_projectownership.py
@@ -40,7 +40,7 @@ class ProjectOwnershipTestCase(TestCase):
         # Match only rule_a
         self.assert_ownership_equals(ProjectOwnership.get_owners(
             self.project.id, {
-                'sentry.interfaces.Stacktrace': {
+                'stacktrace': {
                     'frames': [{
                         'filename': 'foo.py',
                     }]
@@ -51,7 +51,7 @@ class ProjectOwnershipTestCase(TestCase):
         # Match only rule_b
         self.assert_ownership_equals(ProjectOwnership.get_owners(
             self.project.id, {
-                'sentry.interfaces.Stacktrace': {
+                'stacktrace': {
                     'frames': [{
                         'filename': 'src/thing.txt',
                     }]
@@ -62,7 +62,7 @@ class ProjectOwnershipTestCase(TestCase):
         # Matches both rule_a and rule_b
         self.assert_ownership_equals(ProjectOwnership.get_owners(
             self.project.id, {
-                'sentry.interfaces.Stacktrace': {
+                'stacktrace': {
                     'frames': [{
                         'filename': 'src/foo.py',
                     }]
@@ -72,7 +72,7 @@ class ProjectOwnershipTestCase(TestCase):
 
         assert ProjectOwnership.get_owners(
             self.project.id, {
-                'sentry.interfaces.Stacktrace': {
+                'stacktrace': {
                     'frames': [{
                         'filename': 'xxxx',
                     }]
@@ -87,7 +87,7 @@ class ProjectOwnershipTestCase(TestCase):
 
         assert ProjectOwnership.get_owners(
             self.project.id, {
-                'sentry.interfaces.Stacktrace': {
+                'stacktrace': {
                     'frames': [{
                         'filename': 'xxxx',
                     }]
diff --git a/tests/sentry/ownership/test_grammar.py b/tests/sentry/ownership/test_grammar.py
index e85a50f822..78deb6b9aa 100644
--- a/tests/sentry/ownership/test_grammar.py
+++ b/tests/sentry/ownership/test_grammar.py
@@ -64,7 +64,7 @@ def test_load_schema():
 
 def test_matcher_test_url():
     data = {
-        'sentry.interfaces.Http': {
+        'request': {
             'url': 'http://example.com/foo.js',
         }
     }
@@ -79,7 +79,7 @@ def test_matcher_test_url():
 
 def test_matcher_test_exception():
     data = {
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values': [{
                 'stacktrace': {
                     'frames': [
@@ -102,7 +102,7 @@ def test_matcher_test_exception():
 
 def test_matcher_test_stacktrace():
     data = {
-        'sentry.interfaces.Stacktrace': {
+        'stacktrace': {
             'frames': [
                 {'filename': 'foo/file.py'},
                 {'abs_path': '/usr/local/src/other/app.py'},
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index f1413bf36b..87f67d7ecc 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -76,7 +76,7 @@ class MailPluginTest(TestCase):
         event.group = group
         event.project = self.project
         event.message = 'hello world'
-        event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
+        event.interfaces = {'stacktrace': stacktrace}
 
         notification = Notification(event=event)
 
@@ -103,7 +103,7 @@ class MailPluginTest(TestCase):
         event.group = group
         event.project = self.project
         event.message = 'Soubor ji\xc5\xbe existuje'
-        event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
+        event.interfaces = {'stacktrace': stacktrace}
 
         notification = Notification(event=event)
 
@@ -532,7 +532,7 @@ class MailPluginOwnersTest(TestCase):
     def make_event_data(self, filename, url='http://example.com'):
         data = {
             'tags': [('level', 'error')],
-            'sentry.interfaces.Stacktrace': {
+            'stacktrace': {
                 'frames': [
                     {
                         'lineno': 1,
@@ -540,7 +540,7 @@ class MailPluginOwnersTest(TestCase):
                     },
                 ],
             },
-            'sentry.interfaces.Http': {
+            'request': {
                 'url': url
             },
         }
diff --git a/tests/sentry/receivers/test_featureadoption.py b/tests/sentry/receivers/test_featureadoption.py
index 14f20414ec..117b403614 100644
--- a/tests/sentry/receivers/test_featureadoption.py
+++ b/tests/sentry/receivers/test_featureadoption.py
@@ -343,7 +343,7 @@ class FeatureAdoptionTest(TestCase):
                 "extra": {
                     "session:duration": 40364
                 },
-                "sentry.interfaces.Exception": {
+                "exception": {
                     "exc_omitted": null,
                     "values": [{
                         "stacktrace": {
@@ -374,18 +374,18 @@ class FeatureAdoptionTest(TestCase):
                         "module": null
                     }]
                 },
-                "sentry.interfaces.Http": {
+                "request": {
                     "url": "https://sentry.io/katon-direct/localhost/issues/112734598/",
                     "headers": [
                         ["Referer", "https://sentry.io/welcome/"],
                         ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
                     ]
                 },
-                "sentry.interfaces.User": {
+                "user": {
                     "ip_address": "0.0.0.0"
                 },
                 "version": "7",
-                "sentry.interfaces.Breadcrumbs": {
+                "breadcrumbs": {
                     "values": [
                         {
                             "category": "xhr",
@@ -443,7 +443,7 @@ class FeatureAdoptionTest(TestCase):
                 "extra": {
                     "session:duration": 40364
                 },
-                "sentry.interfaces.Exception": {
+                "exception": {
                     "exc_omitted": null,
                     "values": [{
                         "stacktrace": {
@@ -474,18 +474,18 @@ class FeatureAdoptionTest(TestCase):
                         "module": null
                     }]
                 },
-                "sentry.interfaces.Http": {
+                "request": {
                     "url": "https://sentry.io/katon-direct/localhost/issues/112734598/",
                     "headers": [
                         ["Referer", "https://sentry.io/welcome/"],
                         ["User-Agent", "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.109 Safari/537.36"]
                     ]
                 },
-                "sentry.interfaces.User": {
+                "user": {
                     "ip_address": "0.0.0.0"
                 },
                 "version": "7",
-                "sentry.interfaces.Breadcrumbs": {
+                "breadcrumbs": {
                     "values": [
                         {
                             "category": "xhr",
diff --git a/tests/sentry/rules/conditions/test_event_attribute.py b/tests/sentry/rules/conditions/test_event_attribute.py
index 6e8cdaad8c..a18977f064 100644
--- a/tests/sentry/rules/conditions/test_event_attribute.py
+++ b/tests/sentry/rules/conditions/test_event_attribute.py
@@ -13,17 +13,17 @@ class EventAttributeConditionTest(RuleTestCase):
             platform='php',
             data={
                 'type': 'error',
-                'sentry.interfaces.Http': {
+                'request': {
                     'method': 'GET',
                     'url': 'http://example.com',
                 },
-                'sentry.interfaces.User': {
+                'user': {
                     'id': '1',
                     'ip_address': '127.0.0.1',
                     'email': 'foo@example.com',
                     'username': 'foo',
                 },
-                'sentry.interfaces.Exception': {
+                'exception': {
                     'values': [
                         {
                             'type': 'SyntaxError',
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index 5a281590e1..bedf1dfb67 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -65,7 +65,7 @@ class EventCompatibilityProxyTest(TestCase):
         event = self.create_event(
             message='biz baz',
             data={
-                'sentry.interfaces.Message': {
+                'logentry': {
                     'message': 'foo %s',
                     'formatted': 'foo bar',
                     'params': ['bar'],
diff --git a/tests/sentry/tasks/test_unmerge.py b/tests/sentry/tasks/test_unmerge.py
index ba4919f959..a40b60116d 100644
--- a/tests/sentry/tasks/test_unmerge.py
+++ b/tests/sentry/tasks/test_unmerge.py
@@ -39,7 +39,7 @@ def test_get_fingerprint():
     assert get_fingerprint(
         Event(
             data={
-                'sentry.interfaces.Message': {
+                'logentry': {
                     'message': 'Hello world',
                 },
             },
@@ -50,7 +50,7 @@ def test_get_fingerprint():
         Event(
             data={
                 'fingerprint': ['Not hello world'],
-                'sentry.interfaces.Message': {
+                'logentry': {
                     'message': 'Hello world',
                 },
             },
@@ -246,12 +246,12 @@ class UnmergeTestCase(TestCase):
                     'metadata': {
                         'title': template % parameters,
                     },
-                    'sentry.interfaces.Message': {
+                    'logentry': {
                         'message': template,
                         'params': parameters,
                         'formatted': template % parameters,
                     },
-                    'sentry.interfaces.User': next(user_values),
+                    'user': next(user_values),
                     'tags': tags,
                 },
             )
@@ -645,7 +645,7 @@ class UnmergeTestCase(TestCase):
             aggregate = aggregate if aggregate is not None else set()
             aggregate.add(
                 get_event_user_from_interface(
-                    event.data['sentry.interfaces.User'],
+                    event.data['user'],
                 ).tag_value,
             )
             return aggregate
diff --git a/tests/sentry/test_stacktraces.py b/tests/sentry/test_stacktraces.py
index 58b3fb9984..711f4cba1d 100644
--- a/tests/sentry/test_stacktraces.py
+++ b/tests/sentry/test_stacktraces.py
@@ -7,7 +7,7 @@ def test_stacktraces_basics():
     data = {
         'message': 'hello',
         'platform': 'javascript',
-        'sentry.interfaces.Stacktrace': {
+        'stacktrace': {
             'frames': [
                 {
                     'abs_path': 'http://example.com/foo.js',
@@ -35,7 +35,7 @@ def test_get_stacktraces_returns_exception_interface():
     data = {
         'message': 'hello',
         'platform': 'javascript',
-        'sentry.interfaces.Exception': {
+        'exception': {
             'values': [
                 {
                     'type': 'Error',
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index c6bc567c54..bad4cccc23 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -62,7 +62,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_stacktrace(self):
         data = {
-            'sentry.interfaces.Stacktrace': {
+            'stacktrace': {
                 'frames': [{
                     'vars': VARS
                 }],
@@ -72,8 +72,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.Stacktrace' in data
-        stack = data['sentry.interfaces.Stacktrace']
+        assert 'stacktrace' in data
+        stack = data['stacktrace']
         assert 'frames' in stack
         assert len(stack['frames']) == 1
         frame = stack['frames'][0]
@@ -82,7 +82,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_http(self):
         data = {
-            'sentry.interfaces.Http': {
+            'request': {
                 'data': VARS,
                 'env': VARS,
                 'headers': list(VARS.items()),
@@ -93,8 +93,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.Http' in data
-        http = data['sentry.interfaces.Http']
+        assert 'request' in data
+        http = data['request']
         for n in ('data', 'env', 'cookies'):
             assert n in http
             self._check_vars_sanitized(http[n], proc)
@@ -104,7 +104,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_user(self):
         data = {
-            'sentry.interfaces.User': {
+            'user': {
                 'username': 'secret',
                 'data': VARS,
             },
@@ -113,9 +113,9 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.User' in data
-        assert data['sentry.interfaces.User']['username'] == 'secret'
-        self._check_vars_sanitized(data['sentry.interfaces.User']['data'], proc)
+        assert 'user' in data
+        assert data['user']['username'] == 'secret'
+        self._check_vars_sanitized(data['user']['data'], proc)
 
     def test_extra(self):
         data = {'extra': VARS}
@@ -145,7 +145,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_querystring_as_string(self):
         data = {
-            'sentry.interfaces.Http': {
+            'request': {
                 'query_string':
                 'foo=bar&password=hello&the_secret=hello'
                 '&a_password_here=hello&api_key=secret_key',
@@ -155,8 +155,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.Http' in data
-        http = data['sentry.interfaces.Http']
+        assert 'request' in data
+        http = data['request']
         assert http['query_string'] == (
             'foo=bar&password=%(m)s&the_secret=%(m)s'
             '&a_password_here=%(m)s&api_key=%(m)s' % {
@@ -166,7 +166,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_querystring_as_string_with_partials(self):
         data = {
-            'sentry.interfaces.Http': {
+            'request': {
                 'query_string': 'foo=bar&password&baz=bar',
             }
         }
@@ -174,8 +174,8 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.Http' in data
-        http = data['sentry.interfaces.Http']
+        assert 'request' in data
+        http = data['request']
         assert http['query_string'] == 'foo=bar&password&baz=bar'
 
     def test_sanitize_additional_sensitive_fields(self):
@@ -260,15 +260,15 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_sanitize_http_body(self):
         data = {
-            'sentry.interfaces.Http': {
+            'request': {
                 'data': '{"email":"zzzz@gmail.com","password":"zzzzz"}',
             },
         }
 
         proc = SensitiveDataFilter()
         proc.apply(data)
-        assert 'sentry.interfaces.Http' in data
-        http = data['sentry.interfaces.Http']
+        assert 'request' in data
+        http = data['request']
         assert http['data'] == FILTER_MASK
 
     def test_does_not_fail_on_non_string(self):
@@ -431,7 +431,7 @@ class SensitiveDataFilterTest(TestCase):
 
     def test_csp_blocked_uri(self):
         data = {
-            'sentry.interfaces.Csp': {
+            'csp': {
                 'blocked_uri': 'https://example.com/?foo=4571234567890111&bar=baz',
             }
         }
@@ -439,6 +439,6 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
 
-        assert 'sentry.interfaces.Csp' in data
-        csp = data['sentry.interfaces.Csp']
+        assert 'csp' in data
+        csp = data['csp']
         assert csp['blocked_uri'] == 'https://example.com/?foo=[Filtered]&bar=baz'
diff --git a/tests/sentry/utils/test_sdk.py b/tests/sentry/utils/test_sdk.py
index c186861554..877a491cab 100644
--- a/tests/sentry/utils/test_sdk.py
+++ b/tests/sentry/utils/test_sdk.py
@@ -21,7 +21,7 @@ class SentryInternalClientTest(TestCase):
         event = Event.objects.get()
         assert event.project_id == settings.SENTRY_PROJECT
         assert event.event_id == event_id
-        assert event.data['sentry.interfaces.Message']['message'] == \
+        assert event.data['logentry']['message'] == \
             'internal client test'
 
     def test_encoding(self):
@@ -38,5 +38,5 @@ class SentryInternalClientTest(TestCase):
 
         event = Event.objects.get()
         assert event.project_id == settings.SENTRY_PROJECT
-        assert event.data['sentry.interfaces.Message']['message'] == 'check the req'
+        assert event.data['logentry']['message'] == 'check the req'
         assert 'NotJSONSerializable' in event.data['extra']['request']
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 6f5ae442d3..8898e0ba59 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -234,10 +234,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "abcdefg",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -253,10 +253,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "abcdefg",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -272,10 +272,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "abcdefg",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -291,10 +291,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "1.3.2",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -310,10 +310,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "1.3.2",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -329,10 +329,10 @@ class StoreViewTest(TestCase):
         body = {
             "release": "2.1.3",
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -349,17 +349,17 @@ class StoreViewTest(TestCase):
         )
         body = {
             "release": "abcdefg",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
                     "REMOTE_ADDR": "127.0.0.1"
                 }
             },
-            "sentry.interfaces.Message": {
+            "logentry": {
                 "formatted": "ZeroDivisionError: integer division or modulo by zero",
                 "message": "%s: integer division or modulo by zero",
             },
@@ -374,17 +374,17 @@ class StoreViewTest(TestCase):
         )
         body = {
             "release": "abcdefg",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
                     "REMOTE_ADDR": "127.0.0.1"
                 }
             },
-            "sentry.interfaces.Message": {
+            "logentry": {
                 "message": "ZeroDivisionError: integer division or modulo by zero",
                 "formatted": "",
             },
@@ -402,10 +402,10 @@ class StoreViewTest(TestCase):
                 "version": "3.23.3",
                 "client_ip": "127.0.0.1"
             },
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -417,8 +417,8 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert not call_data['sentry.interfaces.User'].get('ip_address')
-        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')
+        assert not call_data['user'].get('ip_address')
+        assert not call_data['request']['env'].get('REMOTE_ADDR')
         assert not call_data['sdk'].get('client_ip')
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
@@ -427,10 +427,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:scrub_ip_address', False)
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "env": {
@@ -442,8 +442,8 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert not call_data['sentry.interfaces.User'].get('ip_address')
-        assert not call_data['sentry.interfaces.Http']['env'].get('REMOTE_ADDR')
+        assert not call_data['user'].get('ip_address')
+        assert not call_data['request']['env'].get('REMOTE_ADDR')
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database')
     def test_scrub_data_off(self, mock_insert_data_to_database):
@@ -451,10 +451,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:scrub_defaults', False)
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -464,7 +464,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['lol'],
             'foo': ['1'],
             'bar': ['2'],
@@ -477,10 +477,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:scrub_defaults', False)
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -490,7 +490,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['lol'],
             'foo': ['1'],
             'bar': ['2'],
@@ -503,10 +503,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:scrub_defaults', True)
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -516,7 +516,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['[Filtered]'],
             'foo': ['1'],
             'bar': ['2'],
@@ -530,10 +530,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -543,7 +543,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['[Filtered]'],
             'foo': ['[Filtered]'],
             'bar': ['[Filtered]'],
@@ -558,10 +558,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:scrub_defaults', False)
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -571,7 +571,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['[Filtered]'],
             'foo': ['1'],
             'bar': ['2'],
@@ -586,10 +586,10 @@ class StoreViewTest(TestCase):
         self.project.update_option('sentry:sensitive_fields', ['foo', 'bar'])
         body = {
             "message": "foo bar",
-            "sentry.interfaces.User": {
+            "user": {
                 "ip_address": "127.0.0.1"
             },
-            "sentry.interfaces.Http": {
+            "request": {
                 "method": "GET",
                 "url": "http://example.com/",
                 "data": "password=lol&foo=1&bar=2&baz=3"
@@ -599,7 +599,7 @@ class StoreViewTest(TestCase):
         assert resp.status_code == 200, (resp.status_code, resp.content)
 
         call_data = mock_insert_data_to_database.call_args[0][0]
-        assert call_data['sentry.interfaces.Http']['data'] == {
+        assert call_data['request']['data'] == {
             'password': ['[Filtered]'],
             'foo': ['[Filtered]'],
             'bar': ['[Filtered]'],
@@ -626,7 +626,7 @@ class StoreViewTest(TestCase):
 
         event_accepted.connect(mock_event_accepted)
 
-        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+        resp = self._postWithHeader({'logentry': {'message': u'hello'}})
 
         assert resp.status_code == 200, resp.content
 
@@ -646,7 +646,7 @@ class StoreViewTest(TestCase):
 
         event_dropped.connect(mock_event_dropped)
 
-        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+        resp = self._postWithHeader({'logentry': {'message': u'hello'}})
 
         assert resp.status_code == 429, resp.content
 
@@ -666,7 +666,7 @@ class StoreViewTest(TestCase):
 
         event_filtered.connect(mock_event_filtered)
 
-        resp = self._postWithHeader({'sentry.interfaces.Message': {'message': u'hello'}})
+        resp = self._postWithHeader({'logentry': {'message': u'hello'}})
 
         assert resp.status_code == 403, resp.content
 
diff --git a/tests/snuba/tagstore/test_tagstore_backend.py b/tests/snuba/tagstore/test_tagstore_backend.py
index 61d260a226..8836bbe53a 100644
--- a/tests/snuba/tagstore/test_tagstore_backend.py
+++ b/tests/snuba/tagstore/test_tagstore_backend.py
@@ -56,7 +56,7 @@ class TagStorageTest(SnubaTestCase):
                     'sentry:release': 100 * r,
                     'sentry:user': u"id:user{}".format(r),
                 },
-                'sentry.interfaces.User': {
+                'user': {
                     'id': u"user{}".format(r),
                     'email': u"user{}@sentry.io".format(r)
                 }
@@ -76,7 +76,7 @@ class TagStorageTest(SnubaTestCase):
                     'environment': self.proj1env1.name,
                     'sentry:user': "id:user1",
                 },
-                'sentry.interfaces.User': {
+                'user': {
                     'id': "user1"
                 }
             },
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index a9ec5875d9..a63ddf55b1 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -31,7 +31,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             datetime=one_second_ago,
             tags={'environment': 'production'},
             data={
-                'sentry.interfaces.Exception': {
+                'exception': {
                     'values': [
                         {
                             'type': 'ValidationError',
diff --git a/tests/snuba/tsdb/test_tsdb_backend.py b/tests/snuba/tsdb/test_tsdb_backend.py
index 39f90caedf..f8f9fcdc93 100644
--- a/tests/snuba/tsdb/test_tsdb_backend.py
+++ b/tests/snuba/tsdb/test_tsdb_backend.py
@@ -124,7 +124,7 @@ class SnubaTSDBTest(TestCase):
                     'sentry:user': u'id:user{}'.format(r // 3300),
                     'sentry:release': six.text_type(r // 3600) * 10,  # 1 per hour
                 },
-                'sentry.interfaces.User': {
+                'user': {
                     # change every 55 min so some hours have 1 user, some have 2
                     'id': u"user{}".format(r // 3300),
                     'email': u"user{}@sentry.io".format(r)
