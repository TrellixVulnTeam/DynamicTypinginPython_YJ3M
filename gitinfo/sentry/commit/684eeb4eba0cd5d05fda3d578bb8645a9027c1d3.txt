commit 684eeb4eba0cd5d05fda3d578bb8645a9027c1d3
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Mar 2 14:31:02 2015 -0800

    Move member validation abstraction to AuthIdentity

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index a5206577db..501ffd52f5 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
-from sentry.models import AuthProvider, Organization, OrganizationMember
+from sentry.models import AuthIdentity, Organization, OrganizationMember
 
 
 class OrganizationPermission(ScopedPermission):
@@ -31,15 +31,17 @@ class OrganizationPermission(ScopedPermission):
             return False
 
         try:
-            auth_provider = AuthProvider.objects.get(organization=organization)
-        except AuthProvider.DoesNotExist:
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider__organization=self.organization_id,
+            )
+        except AuthIdentity.DoesNotExist:
             pass
         else:
             # TODO(dcramer): we might simply want to change their scopes to
             # something like 'org:read' since we'd still want them to know
             # they're part of the org. Alternatively we introduce yet another
             # scope that suggests extremely limited read.
-            if not auth_provider.member_is_valid(om):
+            if not auth_identity.is_valid(om):
                 return False
 
         allowed_scopes = set(self.scope_map[request.method])
diff --git a/src/sentry/models/authidentity.py b/src/sentry/models/authidentity.py
index 37e9fb6734..b3e11dacb4 100644
--- a/src/sentry/models/authidentity.py
+++ b/src/sentry/models/authidentity.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import, print_function
 
+from datetime import timedelta
 from django.db import models
 from django.utils import timezone
 from jsonfield import JSONField
@@ -26,3 +27,17 @@ class AuthIdentity(Model):
             'user_id': self.user_id,
             'data': self.data,
         }
+
+    # TODO(dcramer): we'd like to abstract this so there's a central Role object
+    # and it doesnt require two composite db objects to talk to each other
+    def is_valid(self, member):
+        if getattr(member.flags, 'sso:invalid'):
+            return False
+        if not getattr(member.flags, 'sso:linked'):
+            return False
+
+        if not self.last_verified:
+            return False
+        if self.last_verified < timezone.now() - timedelta(hours=24):
+            return False
+        return True
diff --git a/src/sentry/models/authprovider.py b/src/sentry/models/authprovider.py
index f55b2ebe8a..18b8784dea 100644
--- a/src/sentry/models/authprovider.py
+++ b/src/sentry/models/authprovider.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import, print_function
 
-from datetime import timedelta
 from django.db import models
 from django.utils import timezone
 from jsonfield import JSONField
@@ -44,14 +43,3 @@ class AuthProvider(Model):
             'config': self.config,
             'default_Role': self.default_role,
         }
-
-    def member_is_valid(self, member):
-        if getattr(member.flags, 'sso:invalid'):
-            return False
-        if not getattr(member.flags, 'sso:linked'):
-            return False
-        if not member.last_verified:
-            return False
-        if member.last_verified < timezone.now() - timedelta(hours=24):
-            return False
-        return True
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index cc3b4bf5c3..ee3bf9e802 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -206,7 +206,7 @@ class Project(Model):
         )
 
     def has_access(self, user, access=None):
-        from sentry.models import AuthProvider, OrganizationMember
+        from sentry.models import AuthIdentity, OrganizationMember
 
         warnings.warn('Project.has_access is deprecated.', DeprecationWarning)
 
@@ -222,13 +222,13 @@ class Project(Model):
             return False
 
         try:
-            auth_provider = AuthProvider.objects.get(
-                organization=self.organization_id,
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider__organization=self.organization_id,
             )
-        except AuthProvider.DoesNotExist:
+        except AuthIdentity.DoesNotExist:
             return True
 
-        return auth_provider.member_is_valid(member)
+        return auth_identity.is_valid(member)
 
     def get_audit_log_data(self):
         return {
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index c756cc0f9b..98db476145 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -178,12 +178,10 @@ class Team(Model):
         )
 
     def has_access(self, user, access=None):
-        from sentry.models import AuthProvider, OrganizationMember
+        from sentry.models import AuthIdentity, OrganizationMember
 
         warnings.warn('Team.has_access is deprecated.', DeprecationWarning)
 
-        # TODO(dcramer): ideally this abstraction would use
-        # AuthProvider.member_is_valid
         queryset = self.member_set.filter(
             user=user,
         )
@@ -196,13 +194,13 @@ class Team(Model):
             return False
 
         try:
-            auth_provider = AuthProvider.objects.get(
-                organization=self.organization_id,
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider__organization=self.organization_id,
             )
-        except AuthProvider.DoesNotExist:
+        except AuthIdentity.DoesNotExist:
             return True
 
-        return auth_provider.member_is_valid(member)
+        return auth_identity.is_valid(member)
 
     def get_audit_log_data(self):
         return {
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index 87c7203638..2f059bb256 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -13,7 +13,7 @@ from django.views.generic import View
 from sudo.views import redirect_to_sudo
 
 from sentry.models import (
-    AuthProvider, Organization, OrganizationMember, OrganizationMemberType,
+    AuthIdentity, Organization, OrganizationMember, OrganizationMemberType,
     OrganizationStatus, Project, Team
 )
 from sentry.web.helpers import get_login_url, render_to_response
@@ -104,13 +104,13 @@ class Access(object):
             teams = member.teams.all()
 
         try:
-            auth_provider = AuthProvider.objects.get(
-                organization=member.organization_id,
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider__organization=member.organization_id,
             )
-        except AuthProvider.DoesNotExist:
+        except AuthIdentity.DoesNotExist:
             is_sso_valid = True
         else:
-            is_sso_valid = auth_provider.member_is_valid(member)
+            is_sso_valid = auth_identity.is_valid(member)
 
         return cls(
             is_global=member.has_global_access,
