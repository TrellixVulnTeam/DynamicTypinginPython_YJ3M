commit bea00cc3a23ab70f66098ca81efe6646fec5acdc
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 19 15:57:38 2016 -0800

    Coerce mixed exception values to type-based

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 9d86985311..9c1e0c7481 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -52,13 +52,19 @@ class SingleException(Interface):
         else:
             stacktrace = None
 
+        type = data.get('type')
         value = data.get('value')
+        if not type and ':' in value.split(' ', 1)[0]:
+            type, value = value.split(':', 1)
+            # in case of TypeError: foo (no space)
+            value = value.strip()
+
         if value is not None and not isinstance(value, basestring):
             value = json.dumps(value)
         value = trim(value, 4096)
 
         kwargs = {
-            'type': trim(data.get('type'), 128),
+            'type': trim(type, 128),
             'value': value,
             'module': trim(data.get('module'), 128),
             'stacktrace': stacktrace,
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index 57e91b56dd..d1a5caaa52 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -221,6 +221,19 @@ class SingleExceptionTest(TestCase):
         ))
         assert result.value == '{"unauthorized":true}'
 
+    def test_handles_type_in_value(self):
+        result = SingleException.to_python(dict(
+            value='ValueError: unauthorized',
+        ))
+        assert result.type == 'ValueError'
+        assert result.value == 'unauthorized'
+
+        result = SingleException.to_python(dict(
+            value='ValueError:unauthorized',
+        ))
+        assert result.type == 'ValueError'
+        assert result.value == 'unauthorized'
+
 
 class TrimExceptionsTest(TestCase):
     def test_under_max(self):
