commit 0e099794a1df2eda03f2b5d50b8fa3f1258f7027
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Feb 7 10:19:00 2018 -0800

    fix(ui): Fix save on blur toast msgs (#7176)
    
    * fix saveOnBlur undo
    * add simple test for saveOnBlur

diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
index c42720c1b4..a7f4719c29 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/booleanField.jsx
@@ -23,7 +23,7 @@ export default class BooleanField extends InputField {
           <Switch
             size="lg"
             {...props}
-            isActive={value}
+            isActive={!!value}
             isDisabled={disabled}
             toggle={this.onChange.bind(this, value, onChange, onBlur)}
           />
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
index 6cb0eef853..08261df137 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.jsx
@@ -283,16 +283,13 @@ class FormModel {
       .then(data => {
         this.setSaving(id, false);
 
-        // Updating initialData and save snapshot
-        let oldValue = this.initialData[id];
-        this.initialData[id] = newValue;
-
+        // save snapshot
         if (saveSnapshot) {
           saveSnapshot();
           saveSnapshot = null;
         }
 
-        return {old: oldValue, new: newValue};
+        return data;
       })
       .catch(resp => {
         // should we revert field value to last known state?
@@ -336,16 +333,22 @@ class FormModel {
     // Nothing to do if `saveOnBlur` is not on
     if (!this.options.saveOnBlur) return null;
 
+    let oldValue = this.initialData[id];
     let savePromise = this.saveField(id, currentValue);
 
     if (!savePromise) return null;
 
     return savePromise
       .then(change => {
+        let newValue = this.getValue(id);
+        this.initialData[id] = newValue;
+        let result = {old: oldValue, new: newValue};
+
         if (this.options.onSubmitSuccess) {
-          this.options.onSubmitSuccess(change, this, id);
+          this.options.onSubmitSuccess(result, this, id);
         }
-        return change;
+
+        return result;
       })
       .catch(error => {
         if (this.options.onSubmitError) {
diff --git a/tests/js/spec/views/organizationSettingsForm.spec.jsx b/tests/js/spec/views/organizationSettingsForm.spec.jsx
new file mode 100644
index 0000000000..1235988af3
--- /dev/null
+++ b/tests/js/spec/views/organizationSettingsForm.spec.jsx
@@ -0,0 +1,66 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import NewOrganizationSettingsForm from 'app/views/settings/organization/general/organizationSettingsForm';
+import {addSuccessMessage} from 'app/actionCreators/settingsIndicator';
+
+jest.mock('jquery');
+jest.mock('app/actionCreators/settingsIndicator');
+
+describe('OrganizationSettingsForm', function() {
+  let organization = TestStubs.Organization();
+  let putMock;
+  let onSave = jest.fn();
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    onSave.mockReset();
+  });
+
+  it('can change a form field', function(done) {
+    putMock = MockApiClient.addMockResponse({
+      url: '/organizations/3/',
+      method: 'PUT',
+      data: {
+        name: 'New Name',
+      },
+    });
+
+    let wrapper = mount(
+      <NewOrganizationSettingsForm
+        location={TestStubs.location()}
+        orgId={organization.id}
+        access={new Set('org:admin')}
+        initialData={TestStubs.Organization()}
+        onSave={onSave}
+      />,
+      TestStubs.routerContext()
+    );
+
+    let input = wrapper.find('input[name="name"]');
+    expect(input).toHaveLength(1);
+
+    input.simulate('change', {target: {value: 'New Name'}});
+    input.simulate('blur');
+
+    expect(putMock).toHaveBeenCalledWith(
+      '/organizations/3/',
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          name: 'New Name',
+        },
+      })
+    );
+
+    addSuccessMessage.mockImplementation((msg, duration, {model, id}) => {
+      expect(msg).toBe('Changed Name from "Organization Name" to "New Name"');
+
+      // Can call undo directly
+      expect(model.getValue('name')).toBe('New Name');
+      model.undo();
+      expect(model.getValue('name')).toBe('Organization Name');
+      done();
+    });
+  });
+});
