commit 58cffcf4f05853bd9e51b69f59792937f2ee0003
Author: David Cramer <dcramer@gmail.com>
Date:   Sun May 10 18:21:14 2015 -0700

    Migrate to new unified team list

diff --git a/src/sentry/static/sentry/app/components/organizationSidebar.jsx b/src/sentry/static/sentry/app/components/organizationSidebar.jsx
index 8693e07011..1af28060e3 100644
--- a/src/sentry/static/sentry/app/components/organizationSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizationSidebar.jsx
@@ -1,6 +1,7 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
+var Reflux = require("reflux");
 
 var AppState = require("../mixins/appState");
 var ConfigStore = require("../stores/configStore");
@@ -10,9 +11,15 @@ var Gravatar = require("./gravatar");
 var ListLink = require("./listLink");
 var OrganizationState = require("../mixins/organizationState");
 var PropTypes = require("../proptypes");
+var PureRenderMixin = require("react/addons").addons.PureRenderMixin;
+var TeamStore = require("../stores/teamStore");
 
 var OrganizationSelector = React.createClass({
-  mixins: [AppState, OrganizationState],
+  mixins: [
+    AppState,
+    OrganizationState,
+    PureRenderMixin
+  ],
 
   render() {
     var activeOrg = this.getOrganization();
@@ -36,6 +43,10 @@ var OrganizationSelector = React.createClass({
 });
 
 var UserNav = React.createClass({
+  mixins: [
+    PureRenderMixin
+  ],
+
   propTypes: {
     user: PropTypes.User.isRequired
   },
@@ -60,8 +71,26 @@ var UserNav = React.createClass({
 });
 
 var OrganizationSidebar = React.createClass({
-  mixins: [AppState, OrganizationState],
+  mixins: [
+    AppState,
+    OrganizationState,
+    PureRenderMixin,
+    Reflux.listenTo(TeamStore, "onTeamListChange")
+  ],
+
+  getInitialState() {
+    return {
+      teamList: []
+    };
+  },
 
+  onTeamListChange() {
+    var newTeamList = TeamStore.getActive();
+
+    this.setState({
+      teamList: newTeamList
+    });
+  },
   render() {
     var activeOrg = this.getOrganization();
     if (!activeOrg) {
@@ -76,7 +105,7 @@ var OrganizationSidebar = React.createClass({
         <OrganizationSelector />
         <div className="app-sidebar-content">
           <div className="teams">
-            {activeOrg.teams.map((team, teamIdx) => {
+            {this.state.teamList.map((team, teamIdx) => {
               var routeParams = {
                 orgId: activeOrg.slug,
                 teamId: team.slug
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index 9d02bd8774..dae8313c98 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -202,7 +202,7 @@ var GroupListStore = Reflux.createStore({
       delete this.statuses[itemId];
       this.clearStatus(itemId, 'delete');
     });
-    this.items.filter((item) => !itemIdSet.has(item.id));
+    this.items = this.items.filter((item) => !itemIdSet.has(item.id));
     AlertActions.addAlert(OK_SCHEDULE_DELETE, 'success');
     this.trigger();
   },
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
new file mode 100644
index 0000000000..b8920c0f1a
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -0,0 +1,43 @@
+/** @jsx React.DOM */
+
+var Reflux = require("reflux");
+
+var TeamStore = Reflux.createStore({
+  init() {
+    this.items = [];
+  },
+
+  loadInitialData(items) {
+    this.items = items;
+    this.trigger(this.items, 'initial');
+  },
+
+  getById(id) {
+    id = '' + id;
+    for (var i=0; i<this.items.length; i++) {
+      if (this.items[i].id === id) {
+        return this.items[i];
+      }
+    }
+    return null;
+  },
+
+  getBySlug(slug) {
+    for (var i=0; i<this.items.length; i++) {
+      if (this.items[i].slug === slug) {
+        return this.items[i];
+      }
+    }
+    return null;
+  },
+
+  getActive() {
+    return this.items.filter((item) => item.isMember);
+  },
+
+  getAll() {
+    return this.items;
+  }
+});
+
+module.exports = TeamStore;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index d2f2545f71..b4a1172149 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -11,6 +11,7 @@ var OrganizationState = require("../mixins/organizationState");
 var OrganizationSidebar = require("../components/organizationSidebar");
 var Footer = require("../components/footer");
 var RouteMixin = require("../mixins/routeMixin");
+var TeamStore = require("../stores/teamStore");
 
 var OrganizationDetails = React.createClass({
   mixins: [
@@ -67,6 +68,8 @@ var OrganizationDetails = React.createClass({
           loading: false
         });
 
+        TeamStore.loadInitialData(data.teams);
+
         this.setBreadcrumbs([
           {name: data.name, to: 'organizationDetails'}
         ]);
diff --git a/src/sentry/static/sentry/app/views/organizationTeams.jsx b/src/sentry/static/sentry/app/views/organizationTeams.jsx
index eca266913c..9dc055cc45 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams.jsx
@@ -1,6 +1,7 @@
 /*** @jsx React.DOM */
 
 var React = require("react");
+var Reflux = require("reflux");
 
 var api = require("../api");
 var ConfigStore = require("../stores/configStore");
@@ -8,6 +9,7 @@ var OrganizationHomeContainer = require("../components/organizationHomeContainer
 var OrganizationState = require("../mixins/organizationState");
 var PureRenderMixin = require("react/addons").addons.PureRenderMixin;
 var PropTypes = require("../proptypes");
+var TeamStore = require("../stores/teamStore");
 
 var ExpandedTeamList = React.createClass({
   mixins: [PureRenderMixin],
@@ -88,9 +90,7 @@ var SlimTeamList = React.createClass({
 
   propTypes: {
     organization: PropTypes.Organization.isRequired,
-    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired,
-    loading: React.PropTypes.bool,
-    error: React.PropTypes.bool
+    teamList: React.PropTypes.arrayOf(PropTypes.Team).isRequired
   },
 
   render() {
@@ -131,44 +131,24 @@ var SlimTeamList = React.createClass({
 });
 
 var OrganizationTeams = React.createClass({
-  mixins: [OrganizationState, PureRenderMixin],
+  mixins: [
+    OrganizationState,
+    PureRenderMixin,
+    Reflux.listenTo(TeamStore, "onTeamListChange")
+  ],
 
   getInitialState() {
     return {
       activeNav: 'your-teams',
-      loading: true,
-      error: false,
-      allTeams: []
+      teamList: []
     };
   },
 
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  routeDidChange(nextPath, nextParams) {
-    var router = this.context.router;
-    var params = router.getCurrentParams();
-    if (nextParams.orgId != params.orgId) {
-      this.fetchData();
-    }
-  },
-
-  fetchData() {
-    var org = this.getOrganization();
+  onTeamListChange() {
+    var newTeamList = TeamStore.getAll();
 
     this.setState({
-      loading: true,
-      error: false
-    });
-
-    api.request('/organizations/' + org.slug + '/teams/', {
-      success: (data) => {
-        this.setState({
-          allTeams: data,
-          loading: false
-        });
-      }
+      teamList: newTeamList
     });
   },
 
@@ -183,6 +163,8 @@ var OrganizationTeams = React.createClass({
     var urlPrefix = ConfigStore.get('urlPrefix') + '/organizations/' + org.slug;
 
     var activeNav = this.state.activeNav;
+    var allTeams = this.state.teamList;
+    var activeTeams = this.state.teamList.filter((team) => team.isMember);
 
     return (
       <OrganizationHomeContainer>
@@ -201,11 +183,10 @@ var OrganizationTeams = React.createClass({
             </li>
           </ul>
           {activeNav == 'your-teams' ?
-            <ExpandedTeamList organization={org} teamList={org.teams} />
+            <ExpandedTeamList organization={org} teamList={activeTeams} />
           :
             <SlimTeamList
-                organization={org} teamList={this.state.allTeams}
-                loading={this.state.loading} error={this.state.error} />
+                organization={org} teamList={allTeams} />
           }
         </div>
       </OrganizationHomeContainer>
