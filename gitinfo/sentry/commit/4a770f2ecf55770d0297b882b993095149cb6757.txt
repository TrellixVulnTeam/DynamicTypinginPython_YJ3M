commit 4a770f2ecf55770d0297b882b993095149cb6757
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Apr 7 22:43:47 2016 +0200

    Implement basic system symbol lookup from database

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 51337b16a5..d236445192 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -4,7 +4,7 @@ import posixpath
 
 from sentry.models import Project
 from sentry.plugins import Plugin2
-from sentry.lang.native.symbolizer import make_symbolizer, have_symsynd
+from sentry.lang.native.symbolizer import Symbolizer, have_symsynd
 
 
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
@@ -112,9 +112,9 @@ def preprocess_apple_crash_event(data):
     if crashed_thread is None:
         return
 
-    sym = make_symbolizer(project, crash_report['binary_images'],
-                          threads=[crashed_thread])
-    with sym.driver:
+    sym = Symbolizer(project, crash_report['binary_images'],
+                     threads=[crashed_thread])
+    with sym:
         bt = sym.symbolize_backtrace(crashed_thread['backtrace']['contents'])
         inject_apple_backtrace(data, bt, crash.get('diagnosis'),
                                crash.get('error'), crash_report.get('system'))
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 61b9e45897..3b452c2fdf 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -1,14 +1,64 @@
 try:
     from symsynd.driver import Driver
     from symsynd.report import ReportSymbolizer
+    from symsynd.macho.arch import get_cpu_name
     have_symsynd = True
 except ImportError:
     have_symsynd = False
 
+from django.db import connection
 from sentry import options
 from sentry.lang.native.dsymcache import dsymcache
 
 
+def find_system_symbol(img, instruction_addr):
+    """Finds a system symbol."""
+    addr = instruction_addr - img['image_addr']
+
+    uuid = img['uuid'].lower()
+    # TODO(mitsuhiko): also funnel in version info so we can fuzzy match
+    cur = connection.cursor()
+    try:
+        # First try: exact match on uuid
+        cur.execute('''
+            select symbol
+              from sentry_dsymsymbol s,
+                   sentry_dsymobject o
+             where o.uuid = %s and
+                   s.object_id = o.id and
+                   s.address <= o.vmaddr + %s and
+                   s.address >= o.vmaddr
+          order by address desc
+             limit 1;
+        ''', [uuid, addr])
+        rv = cur.fetchone()
+        if rv:
+            return rv[0]
+
+        # Second try: exact match on path and arch
+        cpu_name = get_cpu_name(img['cpu_type'],
+                                img['cpu_subtype'])
+        if cpu_name is None:
+            return
+        cur.execute('''
+            select symbol
+              from sentry_dsymsymbol s,
+                   sentry_dsymobject o
+             where o.cpu_name = %s and
+                   o.object_path = %s and
+                   s.object_id = o.id and
+                   s.address <= o.vmaddr + %s and
+                   s.address >= o.vmaddr
+          order by address desc
+             limit 1;
+        ''', [cpu_name, img['name'], addr])
+        rv = cur.fetchone()
+        if rv:
+            return rv[0]
+    finally:
+        cur.close()
+
+
 def make_symbolizer(project, binary_images, threads=None):
     """Creates a symbolizer for the given project and binary images.  If a
     list of threads is referenced (from an apple crash report) then only
@@ -35,3 +85,38 @@ def make_symbolizer(project, binary_images, threads=None):
 
     dsym_paths, loaded = dsymcache.fetch_dsyms(project, to_load)
     return ReportSymbolizer(driver, dsym_paths, binary_images)
+
+
+class Symbolizer(object):
+
+    def __init__(self, project, binary_images, threads=None):
+        self.symsynd_symbolizer = make_symbolizer(project, binary_images,
+                                                  threads=threads)
+        self.images = dict((img['image_addr'], img) for img in binary_images)
+
+    def __enter__(self):
+        return self.symsynd_symbolizer.driver.__enter__()
+
+    def __exit__(self, *args):
+        return self.symsynd_symbolizer.driver.__exit__(*args)
+
+    def symbolize_frame(self, frame):
+        # Step one: try to symbolize with cached dsym files.
+        new_frame = self.symsynd_symbolizer.symbolize_frame(frame)
+        if new_frame is not None:
+            return new_frame
+
+        # If that does not work, look up system symbols.
+        img = self.images.get(frame['object_addr'])
+        if img is not None:
+            symbol = find_system_symbol(img, frame['instruction_addr'])
+            if symbol is not None:
+                return dict(frame, symbol_name=symbol, filename=None,
+                            line=0, column=0, uuid=img['uuid'])
+
+    def symbolize_backtrace(self, backtrace):
+        rv = []
+        for frame in backtrace:
+            new_frame = self.symbolize_frame(frame)
+            rv.append(new_frame or frame)
+        return rv
diff --git a/src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_bundle_address__add_dsymsd.py b/src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_object_address__add_dsymsd.py
similarity index 96%
rename from src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_bundle_address__add_dsymsd.py
rename to src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_object_address__add_dsymsd.py
index 49f6317da8..e2086a7f4b 100644
--- a/src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_bundle_address__add_dsymsd.py
+++ b/src/sentry/migrations/0246_auto__add_dsymsymbol__add_unique_dsymsymbol_object_address__add_dsymsd.py
@@ -11,14 +11,14 @@ class Migration(SchemaMigration):
         # Adding model 'DSymSymbol'
         db.create_table('sentry_dsymsymbol', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('bundle', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.DSymBundle'])),
-            ('address', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()),
+            ('object', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.DSymObject'])),
+            ('address', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(db_index=True)),
             ('symbol', self.gf('django.db.models.fields.TextField')()),
         ))
         db.send_create_signal('sentry', ['DSymSymbol'])
 
-        # Adding unique constraint on 'DSymSymbol', fields ['bundle', 'address']
-        db.create_unique('sentry_dsymsymbol', ['bundle_id', 'address'])
+        # Adding unique constraint on 'DSymSymbol', fields ['object', 'address']
+        db.create_unique('sentry_dsymsymbol', ['object_id', 'address'])
 
         # Adding model 'DSymSDK'
         db.create_table('sentry_dsymsdk', (
@@ -35,13 +35,22 @@ class Migration(SchemaMigration):
         # Adding index on 'DSymSDK', fields ['version_major', 'version_minor', 'version_patchlevel', 'version_build']
         db.create_index('sentry_dsymsdk', ['version_major', 'version_minor', 'version_patchlevel', 'version_build'])
 
-        # Adding model 'DSymBundle'
-        db.create_table('sentry_dsymbundle', (
+        # Adding model 'DSymObject'
+        db.create_table('sentry_dsymobject', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('sdk', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.DSymSDK'])),
             ('cpu_name', self.gf('django.db.models.fields.CharField')(max_length=40)),
             ('object_path', self.gf('django.db.models.fields.TextField')(db_index=True)),
             ('uuid', self.gf('django.db.models.fields.CharField')(max_length=36, db_index=True)),
+            ('vmaddr', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True)),
+            ('vmsize', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True)),
+        ))
+        db.send_create_signal('sentry', ['DSymObject'])
+
+        # Adding model 'DSymBundle'
+        db.create_table('sentry_dsymbundle', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('sdk', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.DSymSDK'])),
+            ('object', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.DSymObject'])),
         ))
         db.send_create_signal('sentry', ['DSymBundle'])
 
@@ -50,8 +59,8 @@ class Migration(SchemaMigration):
         # Removing index on 'DSymSDK', fields ['version_major', 'version_minor', 'version_patchlevel', 'version_build']
         db.delete_index('sentry_dsymsdk', ['version_major', 'version_minor', 'version_patchlevel', 'version_build'])
 
-        # Removing unique constraint on 'DSymSymbol', fields ['bundle', 'address']
-        db.delete_unique('sentry_dsymsymbol', ['bundle_id', 'address'])
+        # Removing unique constraint on 'DSymSymbol', fields ['object', 'address']
+        db.delete_unique('sentry_dsymsymbol', ['object_id', 'address'])
 
         # Deleting model 'DSymSymbol'
         db.delete_table('sentry_dsymsymbol')
@@ -59,6 +68,9 @@ class Migration(SchemaMigration):
         # Deleting model 'DSymSDK'
         db.delete_table('sentry_dsymsdk')
 
+        # Deleting model 'DSymObject'
+        db.delete_table('sentry_dsymobject')
+
         # Deleting model 'DSymBundle'
         db.delete_table('sentry_dsymbundle')
 
@@ -128,7 +140,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 4, 13, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 4, 14, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -151,11 +163,18 @@ class Migration(SchemaMigration):
         },
         'sentry.dsymbundle': {
             'Meta': {'object_name': 'DSymBundle'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
+            'sdk': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymSDK']"})
+        },
+        'sentry.dsymobject': {
+            'Meta': {'object_name': 'DSymObject'},
             'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'object_path': ('django.db.models.fields.TextField', [], {'db_index': 'True'}),
-            'sdk': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymSDK']"}),
-            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'})
+            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36', 'db_index': 'True'}),
+            'vmaddr': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
+            'vmsize': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'})
         },
         'sentry.dsymsdk': {
             'Meta': {'object_name': 'DSymSDK', 'index_together': "[('version_major', 'version_minor', 'version_patchlevel', 'version_build')]"},
@@ -168,10 +187,10 @@ class Migration(SchemaMigration):
             'version_patchlevel': ('django.db.models.fields.IntegerField', [], {})
         },
         'sentry.dsymsymbol': {
-            'Meta': {'unique_together': "[('bundle', 'address')]", 'object_name': 'DSymSymbol'},
-            'address': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'bundle': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymBundle']"}),
+            'Meta': {'unique_together': "[('object', 'address')]", 'object_name': 'DSymSymbol'},
+            'address': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'object': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymObject']"}),
             'symbol': ('django.db.models.fields.TextField', [], {})
         },
         'sentry.event': {
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 1419ca740f..2b14bac3ea 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -15,7 +15,7 @@ import tempfile
 from django.db import models, transaction, IntegrityError
 
 try:
-    from symsynd.mach import get_macho_uuids
+    from symsynd.macho.arch import get_macho_uuids
     have_symsynd = True
 except ImportError:
     have_symsynd = False
@@ -74,12 +74,23 @@ class DSymSDK(Model):
         ]
 
 
-class DSymBundle(Model):
+class DSymObject(Model):
     __core__ = False
-    sdk = FlexibleForeignKey('sentry.DSymSDK')
     cpu_name = models.CharField(max_length=40)
     object_path = models.TextField(db_index=True)
     uuid = models.CharField(max_length=36, db_index=True)
+    vmaddr = BoundedBigIntegerField(null=True)
+    vmsize = BoundedBigIntegerField(null=True)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_dsymobject'
+
+
+class DSymBundle(Model):
+    __core__ = False
+    sdk = FlexibleForeignKey('sentry.DSymSDK')
+    object = FlexibleForeignKey('sentry.DSymObject')
 
     class Meta:
         app_label = 'sentry'
@@ -88,7 +99,7 @@ class DSymBundle(Model):
 
 class DSymSymbol(Model):
     __core__ = False
-    bundle = FlexibleForeignKey('sentry.DSymBundle')
+    object = FlexibleForeignKey('sentry.DSymObject')
     address = BoundedBigIntegerField(db_index=True)
     symbol = models.TextField()
 
@@ -96,7 +107,7 @@ class DSymSymbol(Model):
         app_label = 'sentry'
         db_table = 'sentry_dsymsymbol'
         unique_together = [
-            ('bundle', 'address'),
+            ('object', 'address'),
         ]
 
 
diff --git a/src/sentry/runner/commands/import_system_symbols.py b/src/sentry/runner/commands/import_system_symbols.py
index 9e73c882f6..ed49aa81e1 100644
--- a/src/sentry/runner/commands/import_system_symbols.py
+++ b/src/sentry/runner/commands/import_system_symbols.py
@@ -13,7 +13,7 @@ import click
 import zipfile
 import threading
 import Queue
-from django.db import connection
+from django.db import connection, IntegrityError
 from sentry.runner.decorators import configuration
 
 
@@ -21,7 +21,7 @@ SHUTDOWN = object()
 
 
 def load_bundle(q, uuid, data, sdk_info):
-    from sentry.models import DSymBundle, DSymSDK
+    from sentry.models import DSymBundle, DSymObject, DSymSDK
 
     sdk = DSymSDK.objects.get_or_create(
         dsym_type=sdk_info['dsym_type'],
@@ -32,11 +32,17 @@ def load_bundle(q, uuid, data, sdk_info):
         version_build=sdk_info['version_build'],
     )[0]
 
-    bundle = DSymBundle.objects.get_or_create(
-        sdk=sdk,
+    obj = DSymObject.objects.get_or_create(
         cpu_name=data['arch'],
-        object_path=data['image'],
+        object_path='/' + data['image'].strip('/'),
         uuid=str(uuid),
+        vmaddr=data['vmaddr'],
+        vmsize=data['vmsize'],
+    )[0]
+
+    DSymBundle.objects.get_or_create(
+        sdk=sdk,
+        object=obj
     )[0]
 
     step = 4000
@@ -44,7 +50,7 @@ def load_bundle(q, uuid, data, sdk_info):
     for idx in xrange(0, len(symbols) + step, step):
         end_idx = min(idx + step, len(symbols))
         yield [{
-            'bundle_id': bundle.id,
+            'object_id': obj.id,
             'address': symbols[x][0],
             'symbol': symbols[x][1],
         } for x in xrange(idx, end_idx)]
@@ -58,18 +64,22 @@ def process_archive(members, zip, sdk_info, threads):
         cur.execute('begin')
         cur.execute('''
             prepare add_sym(bigint, bigint, text) as
-                insert into sentry_dsymsymbol (bundle_id, address, symbol)
+                insert into sentry_dsymsymbol (object_id, address, symbol)
                 select $1, $2, $3
                 where not exists (select 1 from sentry_dsymsymbol
-                    where bundle_id = $1 and address = $2);
+                    where object_id = $1 and address = $2);
         ''')
         while 1:
             items = q.get()
             if items is SHUTDOWN:
                 break
-            cur.executemany('''
-                execute add_sym(%(bundle_id)s, %(address)s, %(symbol)s);
-            ''', items)
+            try:
+                cur.executemany('''
+                    execute add_sym(%(object_id)s, %(address)s, %(symbol)s);
+                ''', items)
+            except IntegrityError:
+                print 'warning: already seen'
+                continue
         cur.execute('commit')
 
     pool = []
