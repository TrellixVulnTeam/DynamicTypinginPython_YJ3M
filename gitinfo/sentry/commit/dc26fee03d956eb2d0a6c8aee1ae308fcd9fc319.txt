commit dc26fee03d956eb2d0a6c8aee1ae308fcd9fc319
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Jun 21 16:10:40 2018 -0700

    feat(issue sync): Support issue sync for JIRA to sentry
    
    matt fixes

diff --git a/src/sentry/integrations/jira/descriptor.py b/src/sentry/integrations/jira/descriptor.py
index e0791fbf5e..2e7640bac5 100644
--- a/src/sentry/integrations/jira/descriptor.py
+++ b/src/sentry/integrations/jira/descriptor.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.core.urlresolvers import reverse
+
 from sentry.api.base import Endpoint
 from sentry.utils.http import absolute_uri
 
@@ -37,6 +39,12 @@ class JiraDescriptorEndpoint(Endpoint):
                         },
                         'key': 'configure-sentry'
                     },
+                    'webhooks': [{
+                        'event': 'jira:issue_updated',
+                        'url': reverse('sentry-extensions-jira-issue-updated'),
+                        'excludeBody': False,
+                    }
+                    ]
                 },
                 'scopes': [
                     'read',
diff --git a/src/sentry/integrations/jira/urls.py b/src/sentry/integrations/jira/urls.py
index d214646536..8bdd44f061 100644
--- a/src/sentry/integrations/jira/urls.py
+++ b/src/sentry/integrations/jira/urls.py
@@ -6,6 +6,7 @@ from .configure import JiraConfigureView
 from .descriptor import JiraDescriptorEndpoint
 from .installed import JiraInstalledEndpoint
 from .search import JiraSearchEndpoint
+from .webhooks import JiraIssueUpdatedWebhook
 
 
 urlpatterns = patterns(
@@ -13,6 +14,8 @@ urlpatterns = patterns(
     url(r'^configure/$', JiraConfigureView.as_view()),
     url(r'^descriptor/$', JiraDescriptorEndpoint.as_view()),
     url(r'^installed/$', JiraInstalledEndpoint.as_view()),
+    url(r'^issue-updated/$', JiraIssueUpdatedWebhook.as_view(),
+        name='sentry-extensions-jira-issue-updated'),
     url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>\d+)/$',
         JiraSearchEndpoint.as_view(),
         name='sentry-extensions-jira-search'
diff --git a/src/sentry/integrations/jira/webhooks.py b/src/sentry/integrations/jira/webhooks.py
new file mode 100644
index 0000000000..39dfdc2d10
--- /dev/null
+++ b/src/sentry/integrations/jira/webhooks.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from django.views.decorators.csrf import csrf_exempt
+
+from sentry.api.base import Endpoint
+
+from sentry.integrations.atlassian_connect import AtlassianConnectValidationError, get_integration_from_jwt
+from sentry.models import sync_group_assignee_inbound
+
+
+class JiraIssueUpdatedWebhook(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(JiraIssueUpdatedWebhook, self).dispatch(request, *args, **kwargs)
+
+    def post(self, request, *args, **kwargs):
+        try:
+            token = request.META['HTTP_AUTHORIZATION'].split(' ', 1)[1]
+        except (KeyError, IndexError):
+            return self.respond(status=400)
+
+        data = request.DATA
+
+        assignee_changed = any(
+            item for item in data['changelog']['items'] if item['field'] == 'assignee'
+        )
+
+        if not assignee_changed:
+            return self.respond()
+
+        try:
+            integration = get_integration_from_jwt(
+                token, request.path, request.GET, method='POST'
+            )
+        except AtlassianConnectValidationError:
+            return self.respond(status=400)
+
+        assignee = data['issue']['fields']['assignee']
+        issue_key = data['issue']['key']
+
+        if assignee is None:
+            sync_group_assignee_inbound(
+                integration, None, issue_key, assign=False,
+            )
+        else:
+            sync_group_assignee_inbound(
+                integration, assignee['emailAddress'], issue_key, assign=True,
+            )
+
+        return self.respond()
diff --git a/tests/sentry/integrations/jira/test_webhooks.py b/tests/sentry/integrations/jira/test_webhooks.py
new file mode 100644
index 0000000000..1145905d96
--- /dev/null
+++ b/tests/sentry/integrations/jira/test_webhooks.py
@@ -0,0 +1,107 @@
+from __future__ import absolute_import
+
+import json
+
+from mock import patch
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import Integration
+from sentry.testutils import APITestCase
+
+
+SAMPLE_EDIT_ISSUE_PAYLOAD_NO_ASSIGNEE = """
+{
+    "changelog": {
+        "items": [{
+            "to": "admin",
+            "field": "assignee",
+            "toString": "Jess MacQueen",
+            "from": null,
+            "fromString": null,
+            "fieldtype": "jira",
+            "fieldId": "assignee"
+        }],
+        "id": "10172"
+    },
+    "issue": {
+        "fields": {
+            "assignee": null
+        },
+        "key": "APP-123"
+    }
+}
+"""
+
+SAMPLE_EDIT_ISSUE_PAYLOAD_ASSIGNEE = """
+{
+    "changelog": {
+        "items": [{
+            "to": "admin",
+            "field": "assignee",
+            "toString": "Jess MacQueen",
+            "from": null,
+            "fromString": null,
+            "fieldtype": "jira",
+            "fieldId": "assignee"
+        }],
+        "id": "10172"
+    },
+    "issue": {
+        "fields": {
+            "assignee": {
+                "emailAddress": "jess@sentry.io"
+            }
+        },
+        "key": "APP-123"
+    }
+}
+"""
+
+
+class JiraSearchEndpointTest(APITestCase):
+    @patch('sentry.integrations.jira.webhooks.sync_group_assignee_inbound')
+    def test_simple_assign(self, mock_sync_group_assignee_inbound):
+        org = self.organization
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example JIRA',
+        )
+        integration.add_organization(org.id)
+
+        path = reverse('sentry-extensions-jira-issue-updated')
+
+        with patch('sentry.integrations.jira.webhooks.get_integration_from_jwt', return_value=integration):
+            resp = self.client.post(
+                path,
+                data=json.loads(SAMPLE_EDIT_ISSUE_PAYLOAD_ASSIGNEE.strip()),
+                HTTP_AUTHORIZATION='JWT anexampletoken',
+            )
+            assert resp.status_code == 200
+            mock_sync_group_assignee_inbound.assert_called_with(
+                integration, 'jess@sentry.io', 'APP-123', assign=True,
+            )
+
+    @patch('sentry.integrations.jira.webhooks.sync_group_assignee_inbound')
+    def test_simple_deassign(self, mock_sync_group_assignee_inbound):
+        org = self.organization
+
+        integration = Integration.objects.create(
+            provider='jira',
+            name='Example JIRA',
+        )
+        integration.add_organization(org.id)
+
+        path = reverse('sentry-extensions-jira-issue-updated')
+
+        with patch('sentry.integrations.jira.webhooks.get_integration_from_jwt', return_value=integration):
+            resp = self.client.post(
+                path,
+                data=json.loads(SAMPLE_EDIT_ISSUE_PAYLOAD_NO_ASSIGNEE.strip()),
+                HTTP_AUTHORIZATION='JWT anexampletoken',
+            )
+            assert resp.status_code == 200
+            mock_sync_group_assignee_inbound.assert_called_with(
+                integration, None, 'APP-123', assign=False,
+            )
