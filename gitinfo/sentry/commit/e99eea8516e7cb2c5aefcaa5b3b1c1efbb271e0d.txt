commit e99eea8516e7cb2c5aefcaa5b3b1c1efbb271e0d
Author: David Cramer <dcramer@gmail.com>
Date:   Thu May 10 17:38:04 2012 -0500

    Correctly support setting things like last_seen through the buffer

diff --git a/sentry/buffer/redis.py b/sentry/buffer/redis.py
index 64bf7090bc..b9cf083460 100644
--- a/sentry/buffer/redis.py
+++ b/sentry/buffer/redis.py
@@ -10,6 +10,7 @@ from django.db import models
 from hashlib import md5
 from nydus.db import create_cluster
 from sentry.buffer import Buffer
+from sentry.utils.compat import pickle
 
 
 class RedisBuffer(Buffer):
@@ -40,19 +41,45 @@ class RedisBuffer(Buffer):
             md5('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems()))).hexdigest(),
             column)
 
-    def incr(self, model, columns, filters, **kwargs):
+    def _make_extra_key(self, model, filters):
+        return '%s:extra:%s' % (model._meta,
+            md5('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems()))).hexdigest())
+
+    def incr(self, model, columns, filters, extra=None):
         with self.conn.map() as conn:
             for column, amount in columns.iteritems():
                 conn.incr(self._make_key(model, filters, column), amount)
-        super(RedisBuffer, self).incr(model, columns, filters, **kwargs)
 
-    def process(self, model, columns, filters, **kwargs):
+            # Store extra in a hashmap so it can easily be removed
+            if extra:
+                key = self._make_extra_key(model, filters)
+                for column, value in extra.iteritems():
+                    conn.hset(key, column, pickle.dumps(value))
+        super(RedisBuffer, self).incr(model, columns, filters, extra)
+
+    def process(self, model, columns, filters, extra=None):
         results = {}
         with self.conn.map() as conn:
             for column, amount in columns.iteritems():
                 results[column] = conn.getset(self._make_key(model, filters, column), 0)
 
+            hash_key = self._make_extra_key(model, filters)
+            extra_results = conn.hgetall(hash_key)
+            conn.delete(hash_key)
+
+        # We combine the stored extra values with whatever was passed.
+        # This ensures that static values get updated to their latest value,
+        # and dynamic values (usually query expressions) are still dynamic.
+        if extra_results:
+            if not extra:
+                extra = {}
+            for key, value in extra_results.iteritems():
+                if not value:
+                    continue
+                extra[key] = pickle.loads(str(value))
+
+        # Filter out empty or zero'd results to avoid a potentially unnescesary update
         results = dict((k, int(v)) for k, v in results.iteritems() if int(v or 0) > 0)
         if not results:
             return
-        super(RedisBuffer, self).process(model, results, filters, **kwargs)
+        super(RedisBuffer, self).process(model, results, filters, extra)
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index 7b5d7ab8a6..2598fde57c 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -4,6 +4,7 @@ from __future__ import absolute_import
 
 import mock
 
+from datetime import datetime, timedelta
 from sentry.buffer.base import Buffer
 from sentry.models import Group, Project
 from sentry.tasks.process_buffer import process_incr
@@ -28,3 +29,13 @@ class BufferTest(TestCase):
         filters = {'pk': group.pk}
         self.buf.process(Group, columns, filters)
         self.assertEquals(Group.objects.get(pk=group.pk).times_seen, group.times_seen + 1)
+
+    def test_process_saves_extra(self):
+        group = Group.objects.create(project=Project(id=1))
+        columns = {'times_seen': 1}
+        filters = {'pk': group.pk}
+        the_date = datetime.now() + timedelta(days=5)
+        self.buf.process(Group, columns, filters, {'last_seen': the_date})
+        group_ = Group.objects.get(pk=group.pk)
+        self.assertEquals(group_.times_seen, group.times_seen + 1)
+        self.assertEquals(group_.last_seen, the_date)
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index e41d0ae586..186c180b0d 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -4,9 +4,11 @@ from __future__ import absolute_import
 
 import mock
 
+from datetime import datetime, timedelta
 from sentry.buffer.redis import RedisBuffer
 from sentry.models import Group, Project
 from sentry.tasks.process_buffer import process_incr
+from sentry.utils.compat import pickle
 from tests.base import TestCase
 
 
@@ -65,7 +67,7 @@ class RedisBufferTest(TestCase):
         filters = {'pk': group.pk}
         self.buf.conn.set('foo', 2)
         self.buf.process(Group, columns, filters)
-        process.assert_called_once_with(Group, {'times_seen': 2}, filters)
+        process.assert_called_once_with(Group, {'times_seen': 2}, filters, None)
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
     @mock.patch('sentry.buffer.base.Buffer.process')
@@ -76,3 +78,16 @@ class RedisBufferTest(TestCase):
         self.buf.conn.set('foo', 2)
         self.buf.process(Group, columns, filters)
         self.assertEquals(self.buf.conn.get('foo'), '0')
+
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
+    @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
+    def test_process_saves_extra(self):
+        group = Group.objects.create(project=Project(id=1))
+        columns = {'times_seen': 1}
+        filters = {'pk': group.pk}
+        the_date = datetime.now() + timedelta(days=5)
+        self.buf.conn.set('foo', 1)
+        self.buf.conn.hset('extra', 'last_seen', pickle.dumps(the_date))
+        self.buf.process(Group, columns, filters)
+        group_ = Group.objects.get(pk=group.pk)
+        self.assertEquals(group_.last_seen, the_date)
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 92c650a478..ffa927e58f 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -39,6 +39,7 @@ class SentryManagerTest(TestCase):
 
     def test_valid_only_message(self):
         event = Group.objects.from_kwargs(1, message='foo')
+        self.assertEquals(event.group.last_seen, event.datetime)
         self.assertEquals(event.message, 'foo')
         self.assertEquals(event.project_id, 1)
 
@@ -159,3 +160,4 @@ class SentryManagerTest(TestCase):
         group = Group.objects.get(pk=event.group_id)
 
         self.assertEquals(group.times_seen, 2)
+        self.assertEquals(group.last_seen, event.datetime)
