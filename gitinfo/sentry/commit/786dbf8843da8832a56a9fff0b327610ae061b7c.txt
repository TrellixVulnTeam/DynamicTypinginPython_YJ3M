commit 786dbf8843da8832a56a9fff0b327610ae061b7c
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon Dec 17 14:18:22 2018 -0800

    fix(deploys): Ensure deploy emails go out even if there are no committers

diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index 8289bbb864..0c96e05561 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -22,6 +22,8 @@ class ReleaseActivityEmail(ActivityEmail):
         super(ReleaseActivityEmail, self).__init__(activity)
         self.organization = self.project.organization
         self.user_id_team_lookup = None
+        self.email_list = {}
+        self.user_ids = {}
 
         try:
             self.deploy = Deploy.objects.get(id=activity.data['deploy_id'])
@@ -96,9 +98,6 @@ class ReleaseActivityEmail(ActivityEmail):
         return bool(self.release and self.deploy)
 
     def get_participants(self):
-        if not self.email_list:
-            return {}
-
         # collect all users with verified emails on a team in the related projects,
         users = list(
             User.objects.filter(
diff --git a/tests/sentry/plugins/mail/activity/test_release.py b/tests/sentry/plugins/mail/activity/test_release.py
index d128486266..4991fd9a92 100644
--- a/tests/sentry/plugins/mail/activity/test_release.py
+++ b/tests/sentry/plugins/mail/activity/test_release.py
@@ -93,12 +93,13 @@ class ReleaseTestCase(TestCase):
         )
         self.release.add_project(self.project)
         self.release.add_project(self.project2)
+        self.environment = Environment.objects.create(
+            name='production', organization_id=self.org.id
+        )
         self.deploy = Deploy.objects.create(
             release=self.release,
             organization_id=self.org.id,
-            environment_id=Environment.objects.create(
-                name='production', organization_id=self.org.id
-            ).id
+            environment_id=self.environment.id
         )
         repository = Repository.objects.create(
             organization_id=self.org.id,
@@ -248,3 +249,54 @@ class ReleaseTestCase(TestCase):
 
         assert email.release is None
         assert not email.should_email()
+
+    def test_no_committers(self):
+        release = Release.objects.create(
+            version='b' * 40,
+            organization_id=self.project.organization_id,
+            date_released=timezone.now(),
+        )
+        release.add_project(self.project)
+        release.add_project(self.project2)
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=self.org.id,
+            environment_id=self.environment.id,
+        )
+
+        email = ReleaseActivityEmail(
+            Activity(
+                project=self.project,
+                user=self.user,
+                type=Activity.RELEASE,
+                data={
+                    'version': release.version,
+                    'deploy_id': deploy.id,
+                },
+            )
+        )
+
+        # only user3 is included because they oped into all deploy emails
+        assert len(email.get_participants()) == 1
+
+        assert email.get_participants() == {
+            self.user3: GroupSubscriptionReason.deploy_setting,
+        }
+
+        context = email.get_context()
+        assert context['environment'] == 'production'
+        assert context['repos'] == []
+
+        user_context = email.get_user_context(self.user)
+        # make sure this only includes projects user has access to
+        assert len(user_context['projects']) == 1
+        assert user_context['projects'][0][0] == self.project
+
+        with self.tasks():
+            email.send()
+
+        assert len(mail.outbox) == 1
+
+        sent_email_addresses = {msg.to[0] for msg in mail.outbox}
+
+        assert sent_email_addresses == {self.user3.email}
