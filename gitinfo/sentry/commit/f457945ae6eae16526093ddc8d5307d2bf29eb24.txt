commit f457945ae6eae16526093ddc8d5307d2bf29eb24
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Mon Jun 29 11:19:02 2020 -0400

    fix(discover): Show default display mode if selected mode is disabled (#19579)
    
    If the current display mode is previous and you do a drag zoom, the previous
    display mode will be disabled. However, it is still shown as the current
    display mode. This change will change it back to the default display mode.

diff --git a/src/sentry/static/sentry/app/components/charts/optionSelector.tsx b/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
index a8bca10a51..cea0991c33 100644
--- a/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
+++ b/src/sentry/static/sentry/app/components/charts/optionSelector.tsx
@@ -8,15 +8,10 @@ import {InlineContainer, SectionHeading} from 'app/components/charts/styles';
 import {DropdownItem} from 'app/components/dropdownControl';
 import DropdownBubble from 'app/components/dropdownBubble';
 import space from 'app/styles/space';
-
-type Option = {
-  label: string;
-  value: string;
-  disabled?: boolean;
-};
+import {SelectValue} from 'app/types';
 
 type Props = {
-  options: Option[];
+  options: SelectValue<string>[];
   selected: string;
   onChange: (value: string) => void;
   title: string;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 79871482fa..099d5b868b 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -1036,6 +1036,7 @@ export type SavedQueryState = {
 export type SelectValue<T> = {
   label: string;
   value: T;
+  disabled?: boolean;
 };
 
 /**
diff --git a/src/sentry/static/sentry/app/utils/discover/eventView.tsx b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
index d536bcb035..0a11ee3115 100644
--- a/src/sentry/static/sentry/app/utils/discover/eventView.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/eventView.tsx
@@ -1007,7 +1007,7 @@ class EventView {
     return defaultOption;
   }
 
-  getDisplayOptions() {
+  getDisplayOptions(): SelectValue<string>[] {
     if (!this.start && !this.end) {
       return DISPLAY_MODE_OPTIONS;
     }
@@ -1018,6 +1018,15 @@ class EventView {
       return item;
     });
   }
+
+  getDisplayMode() {
+    const displayOptions = this.getDisplayOptions();
+    const selectedOption = displayOptions.find(option => option.value === this.display);
+    if (selectedOption && !selectedOption.disabled) {
+      return this.display ?? DisplayModes.DEFAULT;
+    }
+    return DisplayModes.DEFAULT;
+  }
 }
 
 export const isAPIPayloadSimilar = (
diff --git a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
index cef18415f0..e9c7e2a2dd 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/resultsChart.tsx
@@ -168,7 +168,7 @@ class ResultsChartContainer extends React.Component<ContainerProps> {
           yAxisOptions={eventView.getYAxisOptions()}
           onAxisChange={onAxisChange}
           displayOptions={displayOptions}
-          displayMode={eventView.display || DisplayModes.DEFAULT}
+          displayMode={eventView.getDisplayMode()}
           onDisplayChange={onDisplayChange}
         />
       </StyledPanel>
diff --git a/tests/js/spec/utils/discover/eventView.spec.jsx b/tests/js/spec/utils/discover/eventView.spec.jsx
index add63e903e..b1fe0fdf77 100644
--- a/tests/js/spec/utils/discover/eventView.spec.jsx
+++ b/tests/js/spec/utils/discover/eventView.spec.jsx
@@ -3,7 +3,11 @@ import EventView, {
   pickRelevantLocationQueryStrings,
 } from 'app/utils/discover/eventView';
 import {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable/utils';
-import {CHART_AXIS_OPTIONS, DISPLAY_MODE_OPTIONS} from 'app/utils/discover/types';
+import {
+  CHART_AXIS_OPTIONS,
+  DisplayModes,
+  DISPLAY_MODE_OPTIONS,
+} from 'app/utils/discover/types';
 
 const generateFields = fields =>
   fields.map(field => ({
@@ -2365,6 +2369,46 @@ describe('EventView.getDisplayOptions()', function() {
   });
 });
 
+describe('EventView.getDisplayMode()', function() {
+  const state = {
+    fields: [],
+    sorts: [],
+    query: '',
+    project: [],
+    statsPeriod: '42d',
+    environment: [],
+  };
+
+  it('should have default', function() {
+    const eventView = new EventView({
+      ...state,
+    });
+    const displayMode = eventView.getDisplayMode();
+    expect(displayMode).toEqual(DisplayModes.DEFAULT);
+  });
+
+  it('should return current mode when not disabled', function() {
+    const eventView = new EventView({
+      ...state,
+      display: DisplayModes.TOP5,
+    });
+    const displayMode = eventView.getDisplayMode();
+    expect(displayMode).toEqual(DisplayModes.TOP5);
+  });
+
+  it('should return default mode when disabled', function() {
+    const eventView = new EventView({
+      ...state,
+      // the existence of start and end will disable the PREVIOUS mode
+      end: '2020-04-13T12:13:14',
+      start: '2020-04-01T12:13:14',
+      display: DisplayModes.PREVIOUS,
+    });
+    const displayMode = eventView.getDisplayMode();
+    expect(displayMode).toEqual(DisplayModes.DEFAULT);
+  });
+});
+
 describe('EventView.getAggregateFields()', function() {
   const state = {
     fields: [
