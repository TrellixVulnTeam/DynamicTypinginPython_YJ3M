commit 80c6cc34ad72aaeda3c2f762a6ce328a04d4a08b
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Jan 15 14:24:37 2019 -0800

    Merge pull request #11473 from getsentry/feat-discover-relative-stats
    
    feat(discover): Add support for relative date ranges

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index 56f0405170..c3fa85f359 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -5,19 +5,15 @@ import six
 from functools32 import partial
 from copy import deepcopy
 
-from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
 from rest_framework.exceptions import PermissionDenied
 
-from sentry.utils.dates import (
-    parse_stats_period,
-)
-
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
 from sentry.api.paginator import GenericOffsetPaginator
+from sentry.api.utils import get_date_range_from_params, InvalidParams
 from sentry.models import Project, ProjectStatus, OrganizationMember, OrganizationMemberTeam
 from sentry.utils import snuba
 from sentry import roles
@@ -36,9 +32,12 @@ class DiscoverQuerySerializer(serializers.Serializer):
         required=True,
         allow_null=False,
     )
-    start = serializers.DateTimeField(required=False)
-    end = serializers.DateTimeField(required=False)
-    range = serializers.CharField(required=False)
+    start = serializers.CharField(required=False, allow_none=True)
+    end = serializers.CharField(required=False, allow_none=True)
+    range = serializers.CharField(required=False, allow_none=True)
+    statsPeriod = serializers.CharField(required=False, allow_none=True)
+    statsPeriodStart = serializers.CharField(required=False, allow_none=True)
+    statsPeriodEnd = serializers.CharField(required=False, allow_none=True)
     fields = ListField(
         child=serializers.CharField(),
         required=False,
@@ -88,27 +87,32 @@ class DiscoverQuerySerializer(serializers.Serializer):
     def validate(self, data):
         data['arrayjoin'] = self.arrayjoin
 
-        return data
-
-    def validate_range(self, attrs, source):
-        has_start = bool(attrs.get('start'))
-        has_end = bool(attrs.get('end'))
-        has_range = bool(attrs.get('range'))
-
-        if has_start != has_end or has_range == has_start:
+        # prevent conflicting date ranges from being supplied
+        date_fields = ['start', 'statsPeriod', 'range', 'statsPeriodStart']
+        date_fields_provided = len([data.get(f) for f in date_fields if data.get(f) is not None])
+        if date_fields_provided == 0:
+            raise serializers.ValidationError('You must specify a date filter')
+        elif date_fields_provided > 1:
+            raise serializers.ValidationError('Conflicting date filters supplied')
+
+        try:
+            start, end = get_date_range_from_params({
+                'start': data.get('start'),
+                'end': data.get('end'),
+                'statsPeriod': data.get('statsPeriod') or data.get('range'),
+                'statsPeriodStart': data.get('statsPeriodStart'),
+                'statsPeriodEnd': data.get('statsPeriodEnd'),
+            }, optional=True, validate_window=False)
+        except InvalidParams as exc:
+            raise serializers.ValidationError(exc.message)
+
+        if start is None or end is None:
             raise serializers.ValidationError('Either start and end dates or range is required')
 
-        # Populate start and end if only range is provided
-        if (attrs.get(source)):
-            delta = parse_stats_period(attrs[source])
+        data['start'] = start
+        data['end'] = end
 
-            if (delta is None):
-                raise serializers.ValidationError('Invalid range')
-
-            attrs['start'] = timezone.now() - delta
-            attrs['end'] = timezone.now()
-
-        return attrs
+        return data
 
     def validate_projects(self, attrs, source):
         organization = self.context['organization']
diff --git a/src/sentry/api/utils.py b/src/sentry/api/utils.py
index 25ca63b723..b6bef3bbde 100644
--- a/src/sentry/api/utils.py
+++ b/src/sentry/api/utils.py
@@ -26,7 +26,7 @@ def get_datetime_from_stats_period(stats_period, now=None):
     return now - stats_period
 
 
-def get_date_range_from_params(params, optional=False):
+def get_date_range_from_params(params, optional=False, validate_window=True):
     """
     Gets a date range from standard date range params we pass to the api.
 
@@ -43,6 +43,7 @@ def get_date_range_from_params(params, optional=False):
     If `start` end `end` are passed, validate them, convert to `datetime` and
     returns them if valid.
     :param optional: When True, if no params passed then return `(None, None)`.
+    :param validate_window: When True, validate against min / max time delta.
     :return: A length 2 tuple containing start/end or raises an `InvalidParams`
     exception
     """
@@ -78,8 +79,9 @@ def get_date_range_from_params(params, optional=False):
     if start > end:
         raise InvalidParams('start must be before end')
 
-    delta = end - start
-    if delta < MIN_STATS_PERIOD or delta > MAX_STATS_PERIOD:
-        raise InvalidParams(INVALID_PERIOD_ERROR)
+    if validate_window:
+        delta = end - start
+        if delta < MIN_STATS_PERIOD or delta > MAX_STATS_PERIOD:
+            raise InvalidParams(INVALID_PERIOD_ERROR)
 
     return start, end
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index 6752b1a8a4..a6c9fbd153 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -69,6 +69,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
+                'range': None,
             })
 
         assert response.status_code == 200, response.content
@@ -84,6 +85,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'fields': ['message', 'platform'],
                 'range': '1d',
                 'orderby': '-timestamp',
+                'start': None,
+                'end': None,
             })
 
         assert response.status_code == 200, response.content
@@ -105,6 +108,20 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 400, response.content
 
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['message', 'platform'],
+                'statsPeriodStart': '7d',
+                'statsPeriodEnd': '1d',
+                'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
+                'orderby': '-timestamp',
+            })
+
+        assert response.status_code == 400, response.content
+
     def test_invalid_range_value(self):
         with self.feature('organizations:discover'):
             url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
@@ -113,6 +130,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'fields': ['message', 'platform'],
                 'range': '1x',
                 'orderby': '-timestamp',
+                'start': None,
+                'end': None,
             })
 
         assert response.status_code == 400, response.content
@@ -126,6 +145,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'aggregations': [['test', 'test', 'test']],
                 'range': '14d',
                 'orderby': '-timestamp',
+                'start': None,
+                'end': None,
             })
 
         assert response.status_code == 400, response.content
@@ -140,6 +161,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
+                'range': None,
             })
 
         assert response.status_code == 200, response.content
@@ -156,6 +178,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
+                'range': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
@@ -171,6 +194,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
+                'range': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
@@ -185,6 +209,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
+                'range': None,
             })
 
         assert response.status_code == 200, response.content
@@ -198,6 +223,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'fields': ['project.name'],
                 'range': '14d',
                 'orderby': '-timestamp',
+                'start': None,
+                'end': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
@@ -212,6 +239,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'fields': ['project.name'],
                 'range': '14d',
                 'orderby': '-count',
+                'start': None,
+                'end': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
@@ -229,6 +258,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'orderby': 'time',
                 'range': '5d',
                 'rollup': 86400,
+                'start': None,
+                'end': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 6
@@ -248,6 +279,7 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'start': (self.now - timedelta(seconds=300)).strftime('%Y-%m-%dT%H:%M:%S'),
                 'end': self.now.strftime('%Y-%m-%dT%H:%M:%S'),
                 'rollup': 60,
+                'range': None,
             })
 
         assert response.status_code == 200, response.content
@@ -264,6 +296,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'aggregations': [['uniq', 'project.name', 'uniq_project_name']],
                 'range': '14d',
                 'orderby': '-uniq_project_name',
+                'start': None,
+                'end': None,
             })
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 1
@@ -278,6 +312,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'aggregations': [['count()', '', 'count']],
                 'range': '14d',
                 'orderby': '-count',
+                'start': None,
+                'end': None,
             })
         assert response.status_code == 200, response.content
         assert response.data['meta'] == [
@@ -293,6 +329,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
             'fields': ['message', 'platform'],
             'range': '14d',
             'orderby': '-timestamp',
+            'start': None,
+            'end': None,
         })
 
         assert response.status_code == 404, response.content
@@ -306,6 +344,8 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
                 'fields': ['message', 'platform'],
                 'range': '14d',
                 'orderby': '-timestamp',
+                'start': None,
+                'end': None,
             })
 
         assert response.status_code == 403, response.content
