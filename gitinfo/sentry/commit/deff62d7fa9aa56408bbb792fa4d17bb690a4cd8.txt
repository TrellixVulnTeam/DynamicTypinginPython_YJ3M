commit deff62d7fa9aa56408bbb792fa4d17bb690a4cd8
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Dec 11 14:51:49 2015 -0800

    Add basic events tab

diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index a12da0f5ec..3e75e172fb 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -38,6 +38,12 @@ class ProjectEventsEndpoint(ProjectEndpoint):
             project=project,
         )
 
+        query = request.GET.get('query')
+        if query:
+            events = events.filter(
+                message__icontains=query,
+            )
+
         return self.paginate(
             request=request,
             queryset=events,
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index c1d9b53bb2..62ff538272 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -32,6 +32,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         ))
 
         feature_list = []
+        if features.has('organizations:events', obj, actor=user):
+            feature_list.append('events')
         if features.has('organizations:sso', obj, actor=user):
             feature_list.append('sso')
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 05c7271aab..7536086bc1 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -597,6 +597,7 @@ SENTRY_CLIENT = 'sentry.utils.raven.SentryInternalClient'
 SENTRY_FEATURES = {
     'auth:register': True,
     'organizations:create': True,
+    'organizations:events': False,
     'organizations:sso': True,
     'projects:quotas': True,
     'projects:user-reports': True,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index adb8524635..8f280b0794 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -8,6 +8,7 @@ from .manager import *  # NOQA
 default_manager = FeatureManager()
 default_manager.add('auth:register')
 default_manager.add('organizations:create')
+default_manager.add('organizations:events', OrganizationFeature)
 default_manager.add('organizations:sso', OrganizationFeature)
 default_manager.add('projects:quotas', ProjectFeature)
 default_manager.add('projects:user-reports', ProjectFeature)
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 17e3d069fa..2642723ca8 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -11,6 +11,7 @@ const ProjectHeader = React.createClass({
     let urlPrefix = ConfigStore.get('urlPrefix');
     let project = this.props.project;
     let org = this.props.organization;
+    let features = new Set(org.features);
     let access = new Set(org.access);
 
     return (
@@ -29,6 +30,13 @@ const ProjectHeader = React.createClass({
                     {t('Issues')}
                   </Link>
                 </li>
+                {features.has('events') &&
+                  <li className={navSection == 'events' ? 'active' : ''}>
+                    <Link to={`/${org.slug}/${project.slug}/events/`}>
+                      {t('Events')}
+                    </Link>
+                  </li>
+                }
                 <li className={navSection == 'releases' ? 'active' : ''}>
                   <Link to={`/${org.slug}/${project.slug}/releases/`}>
                     {t('Releases')}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 919372c6ea..d075ccf542 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -22,6 +22,7 @@ import OrganizationStats from './views/organizationStats';
 import OrganizationTeams from './views/organizationTeams';
 import ProjectDashboard from './views/projectDashboard';
 import ProjectDetails from './views/projectDetails';
+import ProjectEvents from './views/projectEvents';
 import ProjectInstall from './views/projectInstall';
 import ProjectInstallOverview from './views/projectInstall/overview';
 import ProjectInstallPlatform from './views/projectInstall/platform';
@@ -66,6 +67,7 @@ let routes = (
       <Route path=":projectId/" component={ProjectDetails}>
         <IndexRoute component={Stream} />
         <Route path="dashboard/" component={ProjectDashboard} />
+        <Route path="events/" component={ProjectEvents} />
         <Route path="releases/" component={ProjectReleases} />
         <Route name="releaseDetails" path="releases/:version/" component={ReleaseDetails}>
           <IndexRoute component={ReleaseNewEvents} />
diff --git a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
deleted file mode 100644
index 6a51bf022e..0000000000
--- a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
+++ /dev/null
@@ -1,46 +0,0 @@
-import React from 'react';
-
-import PureRenderMixin from 'react-addons-pure-render-mixin';
-
-const EventActions = React.createClass({
-  propTypes: {
-    onRealtimeChange: React.PropTypes.func.isRequired,
-    realtimeActive: React.PropTypes.bool.isRequired
-  },
-
-  mixins: [
-    PureRenderMixin
-  ],
-
-  getInitialState() {
-    return {
-      datePickerActive: false
-    };
-  },
-
-  onRealtimeChange(evt) {
-    this.props.onRealtimeChange(!this.props.realtimeActive);
-  },
-
-  render() {
-    return (
-      <div className="stream-actions row">
-        <div className="stream-actions-left col-md-7 col-sm-8 col-xs-8">
-          <div className="btn-group">
-            <a className="btn btn-default btn-sm hidden-xs realtime-control"
-               onClick={this.onRealtimeChange}>
-              {(this.props.realtimeActive ?
-                <span className="icon icon-pause"></span>
-                :
-                <span className="icon icon-play"></span>
-              )}
-            </a>
-          </div>
-        </div>
-      </div>
-    );
-  }
-});
-
-export default EventActions;
-
diff --git a/src/sentry/static/sentry/app/views/projectEvents/index.jsx b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
new file mode 100644
index 0000000000..c885a919e5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
@@ -0,0 +1,214 @@
+import jQuery from 'jquery';
+import React from 'react';
+import {Link, History} from 'react-router';
+import ApiMixin from '../../mixins/apiMixin';
+import DateTime from '../../components/dateTime';
+import Gravatar from '../../components/gravatar';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import Pagination from '../../components/pagination';
+import SearchBar from '../../components/searchBar.jsx';
+import {t} from '../../locale';
+
+const ProjectEvents = React.createClass({
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func
+  },
+
+  mixins: [
+    ApiMixin,
+    History
+  ],
+
+  getDefaultProps() {
+    return {
+      defaultQuery: ''
+    };
+  },
+
+  getInitialState() {
+    let queryParams = this.props.location.query;
+
+    return {
+      eventList: [],
+      loading: true,
+      error: false,
+      query: queryParams.query || this.props.defaultQuery,
+      pageLinks: ''
+    };
+  },
+
+  componentWillMount() {
+    this.props.setProjectNavSection('events');
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.location.search !== this.props.location.search) {
+      let queryParams = nextProps.location.query;
+      this.setState({
+        query: queryParams.query
+      }, this.fetchData);
+    }
+  },
+
+  onSearch(query) {
+    let targetQueryParams = {};
+    if (query !== '')
+      targetQueryParams.query = query;
+
+    let {orgId, projectId} = this.props.params;
+    this.history.pushState(null, `/${orgId}/${projectId}/events/`, targetQueryParams);
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    this.api.request(this.getEndpoint(), {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          eventList: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  getEventTitle(event) {
+    return event.message.split('\n')[0].substr(0, 100);
+  },
+
+  getEndpoint() {
+    let params = this.props.params;
+    let queryParams = {
+      ...this.props.location.query,
+      limit: 50,
+      query: this.state.query
+    };
+
+    return `/projects/${params.orgId}/${params.projectId}/events/?${jQuery.param(queryParams)}`;
+  },
+
+  renderStreamBody() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.eventList.length > 0)
+      body = this.renderResults();
+    else if (this.state.query && this.state.query !== this.props.defaultQuery)
+      body = this.renderNoQueryResults();
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderNoQueryResults() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('Sorry, no events match your filters.')}</p>
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('There don\'t seem to be any events.')}</p>
+      </div>
+    );
+  },
+
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+
+    let children = this.state.eventList.map((event, eventIdx) => {
+      let tagMap = {};
+      event.tags.forEach((tag) => {
+        tagMap[tag.key] = tag.value;
+      });
+
+      return (
+        <tr key={eventIdx}>
+          <td style={{width: 240}}><small><DateTime date={event.dateCreated} /></small></td>
+          <td>
+            <h5>
+              <Link to={`/${orgId}/${projectId}/issues/${event.groupID}/events/${event.id}/`}>
+                {this.getEventTitle(event)}
+              </Link>
+            </h5>
+          </td>
+          <td className="event-user table-user-info" style={{textAlign: 'right'}}>
+            {event.user ?
+              <div>
+                <Gravatar email={event.user.email} size={64} className="avatar" />
+                {event.user.email}
+              </div>
+            :
+              <span>&mdash;</span>
+            }
+          </td>
+        </tr>
+      );
+    });
+
+    return (
+      <div className="event-list">
+        <table className="table">
+          <tbody>
+            {children}
+          </tbody>
+        </table>
+      </div>
+    );
+  },
+
+  render() {
+    return (
+      <div>
+        <div className="row release-list-header">
+          <div className="col-sm-7">
+            <h3>{t('Events')}</h3>
+          </div>
+          <div className="col-sm-5 release-search">
+            <SearchBar defaultQuery=""
+              placeholder="Search event message"
+              query={this.state.query}
+              onSearch={this.onSearch}
+            />
+          </div>
+        </div>
+        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        {this.renderStreamBody()}
+        <Pagination pageLinks={this.state.pageLinks} />
+      </div>
+    );
+  }
+});
+
+export default ProjectEvents;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 47b44b8434..dc37c8b7b2 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -1856,7 +1856,8 @@ table.integrations {
      background: @blue-light;
    }
 
-   .alert-error {
+   .alert-error,
+   .alert-danger {
      background: @red;
    }
  }
@@ -1934,7 +1935,12 @@ table.integrations {
   }
 }
 
-.alert-error {
+.alert-block ul {
+  padding-left: 20px;
+}
+
+.alert-error,
+.alert-danger {
   background: #FDF6F5;
   border-color: #E7C0BC;
 
