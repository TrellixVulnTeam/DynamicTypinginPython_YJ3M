commit 6589c16bdb8a2362c2e7eed52adec70acd500d3a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Oct 21 14:32:11 2019 -0700

    meta(typo): Fix multiple typos (#15197)
    
    * fix: Fix multiple typos
    
    Fixes typos in comments, string literals, test names, etc.
    
    * Revert intentional typo
    
    Revert localhost -> lolcalhost
    
    * Update src/sentry/db/models/query.py
    
    Co-Authored-By: Alberto Leal <mail4alberto@gmail.com>
    Co-Authored-By: Min ho Kim

diff --git a/CHANGES b/CHANGES
index b223aaa056..c87310dc09 100644
--- a/CHANGES
+++ b/CHANGES
@@ -273,7 +273,7 @@ Version 8.18
 - Removed support for global dsyms.
 - Moved Queue admin page to React.
 - Replaced usage of jQuery Flot library with internal graphs.
-- Expanded ignore actions to include deltas and rates for both occurances and
+- Expanded ignore actions to include deltas and rates for both occurrences and
   users impacted.
 - Add a new option (`auth.allow-registration`) for determining whether registration
   is allowed on an installation.
diff --git a/docs-ui/components/form.stories.js b/docs-ui/components/form.stories.js
index 2df12bf3f3..6c044d9662 100644
--- a/docs-ui/components/form.stories.js
+++ b/docs-ui/components/form.stories.js
@@ -401,7 +401,7 @@ storiesOf('Forms|Fields', module)
   )
   .add(
     'Without a parent Form',
-    withInfo('New form fields used withing having a parent Form')(() => {
+    withInfo('New form fields used without having a parent Form')(() => {
       return (
         <div>
           <TextField
diff --git a/docs-ui/components/getDynamicText.stories.js b/docs-ui/components/getDynamicText.stories.js
index bfd463f9f4..c1e21db889 100644
--- a/docs-ui/components/getDynamicText.stories.js
+++ b/docs-ui/components/getDynamicText.stories.js
@@ -9,7 +9,7 @@ storiesOf('Utility|getDynamicText', module).add(
   withInfo(
     `
     Use this to wrap dynamic content (i.e. dates) for acceptance/snapshot tests.
-    Currently checks for existance of PERCY_TOKEN env var.
+    Currently checks for existence of PERCY_TOKEN env var.
     (storybook webpack config has webpack.DefinePlugin for "process.env.IS_PERCY")
     `
   )(() => {
diff --git a/src/debug_toolbar/settings.py b/src/debug_toolbar/settings.py
index 7611db993c..e32214f751 100644
--- a/src/debug_toolbar/settings.py
+++ b/src/debug_toolbar/settings.py
@@ -157,7 +157,7 @@ def check_middleware():
         warnings.warn(
             "Please use an explicit setup with the "
             "debug_toolbar.middleware.DebugToolbarMiddleware "
-            "after django.middleware.gzip.GZipMiddlware "
+            "after django.middleware.gzip.GZipMiddleware "
             "in MIDDLEWARE_CLASSES.",
             Warning,
         )
diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 643a3d95f8..c1e290c432 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -245,7 +245,7 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         if not self._has_issue_feature(group.organization, request.user):
             return Response({"detail": MISSING_FEATURE_MESSAGE}, status=400)
 
-        # note here externalIssue refers to `ExternalIssue.id` wheras above
+        # note here externalIssue refers to `ExternalIssue.id` whereas above
         # it refers to the id from the provider
         external_issue_id = request.GET.get("externalIssue")
         if not external_issue_id:
diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 26a6b790bd..d100306f71 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -15,7 +15,7 @@ from sentry.utils.http import absolute_uri
 class ProjectProcessingIssuesDiscardEndpoint(ProjectEndpoint):
     def delete(self, request, project):
         """
-        This dicards all open processing issues
+        This discards all open processing issues
         """
         ProcessingIssue.objects.discard_all_processing_issue(project=project)
         return Response(status=200)
diff --git a/src/sentry/api/endpoints/project_reprocessing.py b/src/sentry/api/endpoints/project_reprocessing.py
index 27f4f18813..6f60e53894 100644
--- a/src/sentry/api/endpoints/project_reprocessing.py
+++ b/src/sentry/api/endpoints/project_reprocessing.py
@@ -11,7 +11,7 @@ class ProjectReprocessingEndpoint(ProjectEndpoint):
 
     def post(self, request, project):
         """
-        Triggers the reporcessing process as a task
+        Triggers the reprocessing process as a task
         """
         trigger_reprocessing(project)
         return Response(status=200)
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 8bb3adcde4..c27f9be5b1 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -122,7 +122,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         report = serializer.validated_data
 
-        # XXX(dcramer): enforce case insensitivty by coercing this to a lowercase string
+        # XXX(dcramer): enforce case insensitivity by coercing this to a lowercase string
         report["event_id"] = report["event_id"].lower()
         report["project"] = project
 
diff --git a/src/sentry/api/endpoints/shared_group_details.py b/src/sentry/api/endpoints/shared_group_details.py
index d941b7b1c3..9b8510c13b 100644
--- a/src/sentry/api/endpoints/shared_group_details.py
+++ b/src/sentry/api/endpoints/shared_group_details.py
@@ -24,7 +24,7 @@ class SharedGroupDetailsEndpoint(Endpoint, EnvironmentMixin):
 
             {method} {path}
 
-        Note: This is not the equivilant of what you'd receive with the standard
+        Note: This is not the equivalent of what you'd receive with the standard
         group details endpoint. Data is more restrictive and designed
         specifically for sharing.
 
diff --git a/src/sentry/api/endpoints/user_authenticator_details.py b/src/sentry/api/endpoints/user_authenticator_details.py
index 9eb2c5d37f..b08927bd1d 100644
--- a/src/sentry/api/endpoints/user_authenticator_details.py
+++ b/src/sentry/api/endpoints/user_authenticator_details.py
@@ -140,7 +140,7 @@ class UserAuthenticatorDetailsEndpoint(UserEndpoint):
             authenticator.delete()
 
             # if we delete an actual authenticator and all that
-            # remainds are backup interfaces, then we kill them in the
+            # remains are backup interfaces, then we kill them in the
             # process.
             if not interface.is_backup_interface:
                 interfaces = Authenticator.objects.all_interfaces_for_user(user)
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 07a19a68b1..402d69cda1 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -72,7 +72,7 @@ def translate(pat):
     return "^" + res + "$"
 
 
-# Explaination of quoted string regex, courtesy of Matt
+# Explanation of quoted string regex, courtesy of Matt
 # "              // literal quote
 # (              // begin capture group
 #   (?:          // begin uncaptured group
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 3fee9390cb..5aced1c99b 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -335,13 +335,13 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             }
 
         # We just return the version key here so that we cut down on response size
-        latest_release_verions = {
+        latest_release_versions = {
             release.actual_project_id: {"version": release.version}
             for release in bulk_fetch_project_latest_releases(item_list)
         }
 
         for item in item_list:
-            attrs[item]["latest_release"] = latest_release_verions.get(item.id)
+            attrs[item]["latest_release"] = latest_release_versions.get(item.id)
             attrs[item]["deploys"] = deploys_by_project.get(item.id)
             attrs[item]["environments"] = environments_by_project.get(item.id, [])
             attrs[item]["has_user_reports"] = item.id in projects_with_user_reports
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index dfe0941d78..a0b5327993 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -409,7 +409,7 @@ urlpatterns = patterns(
             ]
         ),
     ),
-    # List Authentiactors
+    # List Authenticators
     url(
         r"^authenticators/$",
         AuthenticatorIndexEndpoint.as_view(),
diff --git a/src/sentry/api/validators/sentry_apps/schema.py b/src/sentry/api/validators/sentry_apps/schema.py
index 66dbaad981..0ac6025a60 100644
--- a/src/sentry/api/validators/sentry_apps/schema.py
+++ b/src/sentry/api/validators/sentry_apps/schema.py
@@ -228,7 +228,7 @@ def validate_ui_element_schema(instance):
         raise e
     except Exception as e:
         logger.warn(
-            "Unexepcted error validating schema: %s",
+            "Unexpected error validating schema: %s",
             e,
             exc_info=True,
             extra={"schema": json.dumps(instance)},
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
index 63678ef87a..55cd718f67 100644
--- a/src/sentry/auth/manager.py
+++ b/src/sentry/auth/manager.py
@@ -8,7 +8,7 @@ from .exceptions import ProviderNotRegistered
 
 
 # Ideally this and PluginManager abstracted from the same base, but
-# InstanceManager has become convulated and wasteful
+# InstanceManager has become convoluted and wasteful
 class ProviderManager(object):
     def __init__(self):
         self.__values = {}
diff --git a/src/sentry/auth/provider.py b/src/sentry/auth/provider.py
index 19fcd4ca12..fe7c5b652c 100644
--- a/src/sentry/auth/provider.py
+++ b/src/sentry/auth/provider.py
@@ -9,7 +9,7 @@ from .view import ConfigureView
 class MigratingIdentityId(namedtuple("MigratingIdentityId", ["id", "legacy_id"])):
     """
     MigratingIdentityId may be used in the ``id`` field of an identity
-    dictionary to facilitate migrating user identites from one identifying id
+    dictionary to facilitate migrating user identities from one identifying id
     to another.
     """
 
diff --git a/src/sentry/auth/providers/saml2.py b/src/sentry/auth/providers/saml2.py
index 02680e0199..4aa670b5a8 100644
--- a/src/sentry/auth/providers/saml2.py
+++ b/src/sentry/auth/providers/saml2.py
@@ -135,7 +135,7 @@ class SAML2ACSView(AuthView):
     def dispatch(self, request, helper):
         provider = helper.provider
 
-        # If we're authenticating during the setup piepline the provider will
+        # If we're authenticating during the setup pipeline the provider will
         # not have been configured yet, build the config first from the state
         if not provider.config:
             provider.config = provider.build_config(helper.fetch_state())
@@ -275,14 +275,14 @@ class SAML2Provider(Provider):
 
         This value will be merged into the configuration by self.build_config,
         however, should a attribute_mapping exist in the helper state at
-        configuration build time, these may be overriden.
+        configuration build time, these may be overridden.
         """
         return {}
 
     def build_config(self, state):
         config = state
 
-        # Default attriute mapping if none bound
+        # Default attribute mapping if none bound
         if "attribute_mapping" not in config:
             config["attribute_mapping"] = self.attribute_mapping()
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index f92d1804eb..51b5aa89dc 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -843,7 +843,7 @@ SENTRY_FEATURES = {
     # Enable interface functionality to synchronize groups between sentry and
     # issues on external services.
     "organizations:integrations-issue-sync": True,
-    # Enable interface functionality to recieve event hooks.
+    # Enable interface functionality to receive event hooks.
     "organizations:integrations-event-hooks": False,
     # Special feature flag primarily used on the sentry.io SAAS product for
     # easily enabling features while in early development.
diff --git a/src/sentry/culprit.py b/src/sentry/culprit.py
index 82a9934404..5c1fad587b 100644
--- a/src/sentry/culprit.py
+++ b/src/sentry/culprit.py
@@ -1,7 +1,7 @@
 """
 This file implements the legacy culprit system.  The culprit at this point is
 just used as a fallback if no transaction is set.  When a transaction is set
-the culprit is overriden by the transaction value.
+the culprit is overridden by the transaction value.
 
 Over time we want to fully phase out the culprit.  Until then this is the
 code that generates it.
diff --git a/src/sentry/db/models/fields/node.py b/src/sentry/db/models/fields/node.py
index b4e8e5c409..8f2eb7f55b 100644
--- a/src/sentry/db/models/fields/node.py
+++ b/src/sentry/db/models/fields/node.py
@@ -55,7 +55,7 @@ class NodeData(collections.MutableMapping):
         data = dict(self.__dict__)
         # downgrade this into a normal dict in case it's a shim dict.
         # This is needed as older workers might not know about newer
-        # collection types.  For isntance we have events where this is a
+        # collection types.  For instance we have events where this is a
         # CanonicalKeyDict
         data.pop("data", None)
         data["_node_data_CANONICAL"] = isinstance(data["_node_data"], CANONICAL_TYPES)
diff --git a/src/sentry/db/models/query.py b/src/sentry/db/models/query.py
index 2c194500be..aa438248e4 100644
--- a/src/sentry/db/models/query.py
+++ b/src/sentry/db/models/query.py
@@ -94,8 +94,8 @@ def create_or_update(model, using=None, **kwargs):
 
 
 def in_iexact(column, values):
-    """Operator to test if any of the given values are (case-insentive) matches
-       to values in the given column."""
+    """Operator to test if any of the given values are (case-insensitive)
+       matching to values in the given column."""
     from operator import or_
 
     query = u"{}__iexact".format(column)
@@ -104,7 +104,7 @@ def in_iexact(column, values):
 
 
 def in_icontains(column, values):
-    """Operator to test if any of the given values are (case-insentively)
+    """Operator to test if any of the given values are (case-insensitively)
        contained within values in the given column."""
     from operator import or_
 
diff --git a/src/sentry/deletions/__init__.py b/src/sentry/deletions/__init__.py
index c1406ec254..0a22083694 100644
--- a/src/sentry/deletions/__init__.py
+++ b/src/sentry/deletions/__init__.py
@@ -17,7 +17,7 @@ as the task can override the behavior for it's children.
 For example, when you delete a Group, it will cascade in a more traditional
 manner. It will batch each child (such as Event). However, when you delete a
 project, it won't actually cascade to the registered Group task. It will instead
-take a more efficient approach of batch deleting its indirect descedancts, such
+take a more efficient approach of batch deleting its indirect descendants, such
 as Event, so it can more efficiently bulk delete rows.
 """
 
diff --git a/src/sentry/digests/backends/base.py b/src/sentry/digests/backends/base.py
index 0327b5dcf3..ab005a67d2 100644
--- a/src/sentry/digests/backends/base.py
+++ b/src/sentry/digests/backends/base.py
@@ -175,7 +175,7 @@ class Backend(Service):
 
         This method moves all timelines that are in the ready state back to the
         waiting state if their schedule time is prior to the deadline. (This
-        does not reschdule any tasks directly, and should generally be
+        does not reschedule any tasks directly, and should generally be
         performed as part of the scheduler task, before the ``schedule``
         call.)
 
diff --git a/src/sentry/digests/utilities.py b/src/sentry/digests/utilities.py
index 98f4154758..c74e560e21 100644
--- a/src/sentry/digests/utilities.py
+++ b/src/sentry/digests/utilities.py
@@ -31,7 +31,7 @@ def get_personalized_digests(project_id, digest, user_ids):
     """
     get_personalized_digests(project_id: Int, digest: Digest, user_ids: Set[Int]) -> Iterator[user_id: Int, digest: Digest]
     """
-    # TODO(LB): I Know this is inefficent.
+    # TODO(LB): I Know this is inefficient.
     # In the case that ProjectOwnership does exist, I do the same query twice.
     # Once with this statement and again with the call to ProjectOwnership.get_actors()
     # Will follow up with another PR to reduce the number of queries.
@@ -83,9 +83,9 @@ def build_events_by_actor(project_id, events, user_ids):
     """
     events_by_actor = defaultdict(set)
     for event in events:
-        # TODO(LB): I Know this is inefficent.
+        # TODO(LB): I Know this is inefficient.
         # ProjectOwnership.get_owners is O(n) queries and I'm doing that O(len(events)) times
-        # I will create a follow-up PR to address this method's efficency problem
+        # I will create a follow-up PR to address this method's efficiency problem
         # Just wanted to make as few changes as possible for now.
         actors, __ = ProjectOwnership.get_owners(project_id, event.data)
         if actors == ProjectOwnership.Everyone:
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index b07194c8ee..ff5f48f918 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -601,7 +601,7 @@ class EventManager(object):
         # normalize step before.  We now also make sure that the
         # fingerprint was set to `'{{ default }}' just in case someone
         # removed it from the payload.  The call to get_hashes will then
-        # look at `grouping_config` to pick the right paramters.
+        # look at `grouping_config` to pick the right parameters.
         data["fingerprint"] = data.get("fingerprint") or ["{{ default }}"]
         apply_server_fingerprinting(data, get_fingerprinting_config_for_project(project))
 
@@ -620,7 +620,7 @@ class EventManager(object):
         # derived attributes.  The reason for this is that we push this
         # data into kafka for snuba processing and our postprocessing
         # picks up the data right from the snuba topic.  For most usage
-        # however the data is dynamically overriden by Event.title and
+        # however the data is dynamically overridden by Event.title and
         # Event.location (See Event.as_dict)
         materialized_metadata = self.materialize_metadata()
         event_metadata = materialized_metadata["metadata"]
diff --git a/src/sentry/features/manager.py b/src/sentry/features/manager.py
index c1cfbf8c9d..a3fe5aaffa 100644
--- a/src/sentry/features/manager.py
+++ b/src/sentry/features/manager.py
@@ -63,7 +63,7 @@ class FeatureManager(object):
            sentry.conf.server.SENTRY_FEATURES.
 
         Depending on the Feature class, additional arguments may need to be
-        provided to assign organiation or project context to the feature.
+        provided to assign organization or project context to the feature.
 
         >>> FeatureManager.has('organizations:feature', organization, actor=request.user)
         """
diff --git a/src/sentry/filestore/s3.py b/src/sentry/filestore/s3.py
index 1053407dfd..87a9490087 100644
--- a/src/sentry/filestore/s3.py
+++ b/src/sentry/filestore/s3.py
@@ -136,7 +136,7 @@ class S3Boto3StorageFile(File):
         # NOTE(mattrobenolt): This is an explicit deviation from
         # django-storages. This adds an extra HEAD request before
         # every GET. This effectively doubles the time it takes for
-        # every chunk in our filestore. We explicilty are opting
+        # every chunk in our filestore. We explicitly are opting
         # out of this behavior to avoid this overhead.
         #
         # if 'w' not in mode:
diff --git a/src/sentry/grouping/strategies/legacy.py b/src/sentry/grouping/strategies/legacy.py
index e93645c90e..864221e1b8 100644
--- a/src/sentry/grouping/strategies/legacy.py
+++ b/src/sentry/grouping/strategies/legacy.py
@@ -193,7 +193,7 @@ def chained_exception_legacy(chained_exception, config, **meta):
         return config.get_grouping_component(exceptions[0], **meta)
 
     # Case 2: try to build a new component out of the individual
-    # errors however with a trick.  In case any exeption has a
+    # errors however with a trick.  In case any exception has a
     # stacktrace we want to ignore all other exceptions.
     any_stacktraces = False
     values = []
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 0c69489f16..9a379bbaa0 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -59,7 +59,7 @@ def is_recursion_v1(frame1, frame2):
 
 
 def get_filename_component(abs_path, filename, platform, allow_file_origin=False):
-    """Attempt to normalize filenames by detecing special filenames and by
+    """Attempt to normalize filenames by detecting special filenames and by
     using the basename only.
     """
     if filename is None:
diff --git a/src/sentry/identity/base.py b/src/sentry/identity/base.py
index 039d75e576..05b03efd59 100644
--- a/src/sentry/identity/base.py
+++ b/src/sentry/identity/base.py
@@ -9,7 +9,7 @@ from sentry.pipeline import PipelineProvider
 class MigratingIdentityId(namedtuple("MigratingIdentityId", ["id", "legacy_id"])):
     """
     MigratingIdentityId may be used in the ``id`` field of an identity
-    dictionary to facilitate migrating user identites from one identifying id
+    dictionary to facilitate migrating user identities from one identifying id
     to another.
     """
 
@@ -45,7 +45,7 @@ class Provider(PipelineProvider):
         >>>     "id":     "foo@example.com",
         >>>     "email":  "foo@example.com",
         >>>     "name":   "Foo Bar",
-        >>>     "scopes": ['emaill', ...],
+        >>>     "scopes": ['email', ...],
         >>>     "data":   { ... },
         >>> }
 
diff --git a/src/sentry/identity/oauth2.py b/src/sentry/identity/oauth2.py
index a48835af6b..d00a193c61 100644
--- a/src/sentry/identity/oauth2.py
+++ b/src/sentry/identity/oauth2.py
@@ -29,7 +29,7 @@ class OAuth2Provider(Provider):
     uses the OAuth 2.0 protocol as a means for authenticating a user.
 
     OAuth scopes are configured through the oauth_scopes class property,
-    however may be overriden using the ``config['oauth_scopes']`` object.
+    however may be overridden using the ``config['oauth_scopes']`` object.
     """
 
     oauth_access_token_url = ""
diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index 7b59822068..32c8fd3bb4 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -38,7 +38,7 @@ class BitbucketAPIPath(object):
 
 class BitbucketApiClient(ApiClient):
     """
-    The API Client for the Bitbucket Integraiton
+    The API Client for the Bitbucket Integration
 
     NOTE: repo is the fully qualified slug containing 'username/repo_slug'
     """
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index c66fab692e..574f3a5460 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -139,7 +139,7 @@ class GitHubIntegration(IntegrationInstallation, GitHubIssueBasic, RepositoryMix
         client = self.get_client()
         try:
             # make sure installation has access to this specific repo
-            # use hooks endpoint since we explicity ask for those permissions
+            # use hooks endpoint since we explicitly ask for those permissions
             # when installing the app (commits can be accessed for public repos)
             # https://developer.github.com/v3/repos/hooks/#list-hooks
             client.repo_hooks(repo.config["name"])
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 21f7fb5cec..e0e33b339f 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -23,7 +23,7 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
 
         try:
             # make sure installation has access to this specific repo
-            # use hooks endpoint since we explicity ask for those permissions
+            # use hooks endpoint since we explicitly ask for those permissions
             # when installing the app (commits can be accessed for public repos)
             # https://developer.github.com/v3/repos/hooks/#list-hooks
             client.repo_hooks(repo)
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 6619beea59..6b5f30ba25 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -187,13 +187,13 @@ class IssueBasicMixin(object):
         Returns the display name of the issue.
 
         This is not required but helpful for integrations whose external issue key
-        does not match the disired display name.
+        does not match the desired display name.
         """
         return ""
 
     def get_repository_choices(self, group, **kwargs):
         """
-        Returns the default repository and a set/subset of repositories of asscoaited with the installation
+        Returns the default repository and a set/subset of repositories of associated with the installation
         """
         try:
             repos = self.get_repositories()
diff --git a/src/sentry/integrations/jira/installed.py b/src/sentry/integrations/jira/installed.py
index d6eedb9747..6f94030966 100644
--- a/src/sentry/integrations/jira/installed.py
+++ b/src/sentry/integrations/jira/installed.py
@@ -24,7 +24,7 @@ class JiraInstalledEndpoint(Endpoint):
         integration = ensure_integration("jira", data)
 
         # Sync integration metadata from Jira. This msut be executed *after*
-        # the integration has been isntalled on Jira as the access tokens will
+        # the integration has been installed on Jira as the access tokens will
         # not work until then.
         sync_metadata.apply_async(kwargs={"integration_id": integration.id}, countdown=10)
 
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 93ae4ab440..ba8730d749 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -384,7 +384,7 @@ class JiraIntegration(IntegrationInstallation, IssueSyncMixin):
             fkwargs["url"] = self.search_url(group.organization.slug)
             fkwargs["choices"] = []
         elif schema["type"] in ["timetracking"]:
-            # TODO: Implement timetracking (currently unsupported alltogether)
+            # TODO: Implement timetracking (currently unsupported altogether)
             return None
         elif schema.get("items") in ["worklog", "attachment"]:
             # TODO: Implement worklogs and attachments someday
@@ -830,7 +830,7 @@ class JiraIntegrationProvider(IntegrationProvider):
 
     def build_integration(self, state):
         # Most information is not available during integration installation,
-        # since the integration won't have been fully configired on JIRA's side
+        # since the integration won't have been fully configured on JIRA's side
         # yet, we can't make API calls for more details like the server name or
         # Icon.
         return {
diff --git a/src/sentry/integrations/manager.py b/src/sentry/integrations/manager.py
index cb9398ca8a..9cb168f774 100644
--- a/src/sentry/integrations/manager.py
+++ b/src/sentry/integrations/manager.py
@@ -8,7 +8,7 @@ from sentry.exceptions import NotRegistered
 
 
 # Ideally this and PluginManager abstracted from the same base, but
-# InstanceManager has become convulated and wasteful
+# InstanceManager has become convoluted and wasteful
 class IntegrationManager(object):
     def __init__(self):
         self.__values = {}
diff --git a/src/sentry/integrations/repositories.py b/src/sentry/integrations/repositories.py
index 46949dee32..cb862a2573 100644
--- a/src/sentry/integrations/repositories.py
+++ b/src/sentry/integrations/repositories.py
@@ -11,7 +11,7 @@ class RepositoryMixin(object):
 
     def get_repositories(self, query=None):
         """
-        Get a list of availble repositories for an installation
+        Get a list of available repositories for an installation
 
         >>> def get_repositories(self):
         >>>     return self.get_client().get_repositories()
diff --git a/src/sentry/integrations/slack/link_identity.py b/src/sentry/integrations/slack/link_identity.py
index cb12327a13..603181a1d1 100644
--- a/src/sentry/integrations/slack/link_identity.py
+++ b/src/sentry/integrations/slack/link_identity.py
@@ -30,7 +30,7 @@ def build_linking_url(integration, organization, slack_id, channel_id, response_
     )
 
 
-class SlackLinkIdentitiyView(BaseView):
+class SlackLinkIdentityView(BaseView):
     @never_cache
     def handle(self, request, signed_params):
         params = unsign(signed_params.encode("ascii", errors="ignore"))
diff --git a/src/sentry/integrations/slack/urls.py b/src/sentry/integrations/slack/urls.py
index 68b4ed57a3..bb1d554ca9 100644
--- a/src/sentry/integrations/slack/urls.py
+++ b/src/sentry/integrations/slack/urls.py
@@ -4,7 +4,7 @@ from django.conf.urls import patterns, url
 
 from .action_endpoint import SlackActionEndpoint
 from .event_endpoint import SlackEventEndpoint
-from .link_identity import SlackLinkIdentitiyView
+from .link_identity import SlackLinkIdentityView
 
 
 urlpatterns = patterns(
@@ -13,7 +13,7 @@ urlpatterns = patterns(
     url(r"^event/$", SlackEventEndpoint.as_view()),
     url(
         r"^link-identity/(?P<signed_params>[^\/]+)/$",
-        SlackLinkIdentitiyView.as_view(),
+        SlackLinkIdentityView.as_view(),
         name="sentry-integration-slack-link-identity",
     ),
 )
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index da7393db7f..e06670d915 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -109,7 +109,7 @@ class VstsIssueSync(IssueSyncMixin):
                 instance=self.instance,
                 project=project_id,
                 title=title,
-                # Decriptions cannot easily be seen. So, a comment will be added as well.
+                # Descriptions cannot easily be seen. So, a comment will be added as well.
                 description=markdown(description),
                 comment=markdown(description),
             )
diff --git a/src/sentry/lang/javascript/errorlocale.py b/src/sentry/lang/javascript/errorlocale.py
index 88e0dd8afa..af187ff549 100644
--- a/src/sentry/lang/javascript/errorlocale.py
+++ b/src/sentry/lang/javascript/errorlocale.py
@@ -65,7 +65,7 @@ def translate_message(original_message):
     type = None
     message = original_message.strip()
 
-    # Handle both cases. Just a message and message preceeded with error type
+    # Handle both cases. Just a message and message preceded with error type
     # eg. `ReferenceError: foo`, `TypeError: bar`
     match = message_type_regexp.search(message)
 
diff --git a/src/sentry/loader/browsersdkversion.py b/src/sentry/loader/browsersdkversion.py
index b654c88503..0bf617b801 100644
--- a/src/sentry/loader/browsersdkversion.py
+++ b/src/sentry/loader/browsersdkversion.py
@@ -73,7 +73,7 @@ def get_browser_sdk_version(project_key):
     try:
         return get_highest_selected_browser_sdk_version(selected_version)
     except BaseException:
-        logger.error("error ocurred while trying to read js sdk information from the registry")
+        logger.error("error occurred while trying to read js sdk information from the registry")
         return settings.JS_SDK_LOADER_SDK_VERSION
 
 
diff --git a/src/sentry/mediators/external_requests/issue_link_requester.py b/src/sentry/mediators/external_requests/issue_link_requester.py
index 34fcc1a3b3..e39e7aedba 100644
--- a/src/sentry/mediators/external_requests/issue_link_requester.py
+++ b/src/sentry/mediators/external_requests/issue_link_requester.py
@@ -22,7 +22,7 @@ class IssueLinkRequester(Mediator):
 
     The data sent to the other service is always in the following format:
         {
-            'installtionId': <install_uuid>,
+            'installationId': <install_uuid>,
             'issueId': <sentry_group_id>,
             'webUrl': <sentry_group_web_url>,
             <fields>,
diff --git a/src/sentry/mediators/mediator.py b/src/sentry/mediators/mediator.py
index 80ab93dddd..aca1316394 100644
--- a/src/sentry/mediators/mediator.py
+++ b/src/sentry/mediators/mediator.py
@@ -15,7 +15,7 @@ from .param import Param
 
 class Mediator(object):
     """
-    Objects that encapsulte domain logic.
+    Objects that encapsulate domain logic.
 
     Mediators provide a layer between User accessible components like Endpoints
     and the database. They encapsulate the logic necessary to create domain
diff --git a/src/sentry/middleware/proxy.py b/src/sentry/middleware/proxy.py
index a2fd1bcbc3..56a7ce7aac 100644
--- a/src/sentry/middleware/proxy.py
+++ b/src/sentry/middleware/proxy.py
@@ -148,7 +148,7 @@ class ChunkedMiddleware(object):
         # If we are dealing with chunked data and we have uwsgi we assume
         # that we can read to the end of the input stream so we can bypass
         # the default limited stream.  We set the content length reasonably
-        # high so that the reads generally succeeed.  This is ugly but with
+        # high so that the reads generally succeed.  This is ugly but with
         # Django 1.6 it seems to be the best we can easily do.
         if "HTTP_TRANSFER_ENCODING" not in request.META:
             return
@@ -178,7 +178,7 @@ class DecompressBodyMiddleware(object):
             request.META["CONTENT_LENGTH"] = "4294967295"  # 0xffffffff
 
             # The original content encoding is no longer valid, so we have to
-            # remove the header. Otherwise, LazyData will attemt to re-decode
+            # remove the header. Otherwise, LazyData will attempt to re-decode
             # the body.
             del request.META["HTTP_CONTENT_ENCODING"]
 
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index e163b8c7a1..5d68e4a866 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -158,7 +158,7 @@ class EventCommon(object):
         """
         # If we have hashes stored in the data we use them, otherwise we
         # fall back to generating new ones from the data.  We can only use
-        # this if we do not force a dfferent config.
+        # this if we do not force a different config.
         if force_config is None:
             hashes = self.data.get("hashes")
             if hashes is not None:
@@ -526,7 +526,7 @@ class SnubaEvent(EventCommon):
             }
         )
 
-    # If the data for these is availablle from snuba, we asssume
+    # If the data for these is available from snuba, we assume
     # it was already normalized on the way in and we can just return
     # it, otherwise we defer to EventCommon implementation.
     def get_event_type(self):
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 0aacc775e7..6df9d841fc 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -238,7 +238,7 @@ class GroupAssignee(Model):
         if self.team:
             return u"team:{}".format(self.team_id)
 
-        raise NotImplementedError("Unkown Assignee")
+        raise NotImplementedError("Unknown Assignee")
 
     def assigned_actor(self):
         from sentry.api.fields.actor import Actor
diff --git a/src/sentry/models/groupsnooze.py b/src/sentry/models/groupsnooze.py
index d2888a48ba..b65c6bb7dd 100644
--- a/src/sentry/models/groupsnooze.py
+++ b/src/sentry/models/groupsnooze.py
@@ -22,7 +22,7 @@ class GroupSnooze(Model):
     A snooze marks an issue as ignored until a condition is hit.
 
     - If ``until`` is set, the snooze is lifted at the given datetime.
-    - If ``count`` is set, the snooze is lifted when total occurances match.
+    - If ``count`` is set, the snooze is lifted when total occurrences match.
     - If ``window`` is set (in addition to count), the snooze is lifted when
       the rate of events matches.
     - If ``user_count`` is set, the snooze is lfited when unique users match.
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 7cc74888d6..a76778c0c1 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -342,7 +342,7 @@ class Release(Model):
         # Sort commit list in reverse order
         commit_list.sort(key=lambda commit: commit.get("timestamp"), reverse=True)
 
-        # TODO(dcramer): this function could use some cleanup/refactoring as its a bit unwieldly
+        # TODO(dcramer): this function could use some cleanup/refactoring as it's a bit unwieldy
         from sentry.models import (
             Commit,
             CommitAuthor,
diff --git a/src/sentry/models/sentryapp.py b/src/sentry/models/sentryapp.py
index e44398cfa8..ef8efb11f0 100644
--- a/src/sentry/models/sentryapp.py
+++ b/src/sentry/models/sentryapp.py
@@ -89,7 +89,7 @@ class SentryApp(ParanoidModel, HasApiScopes):
 
     # does the application need to wait for verification
     # on behalf of the external service to know if its installations
-    # are successully installed ?
+    # are successfully installed ?
     verify_install = models.BooleanField(default=True)
 
     events = ArrayField(of=models.TextField, null=True)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 11da30fa41..df891fc8d4 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -67,7 +67,7 @@ class OptionsManager(object):
     def set(self, key, value, coerce=True):
         """
         Set the value for an option. If the cache is unavailable the action will
-        still suceeed.
+        still succeed.
 
         >>> from sentry import options
         >>> options.set('option', 'value')
@@ -212,7 +212,7 @@ class OptionsManager(object):
 
         # Guess type based on the default value
         if type is None:
-            # the default value would be equivilent to '' if no type / default
+            # the default value would be equivalent to '' if no type / default
             # is specified and we assume six.text_type for safety
             if default_value is None:
                 default_value = u""
diff --git a/src/sentry/pipeline/README.md b/src/sentry/pipeline/README.md
index 0c28b16f97..d22813786b 100644
--- a/src/sentry/pipeline/README.md
+++ b/src/sentry/pipeline/README.md
@@ -72,7 +72,7 @@ The model is configured by the `provider_model_cls` pipeline class attribute.
 Pipeline views are objects that implement the `PipelineView` interface and are
 used as part of the list of views that a pipeline executes. The pipeline views
 receive the executing request object when they are the step being executed,
-along with the `piepeline` instance itself.
+along with the `pipeline` instance itself.
 
 It's the job of the pipeline view to transition the pipeline to the next step
 in the pipeline and bind any data that may need to be used later in the
diff --git a/src/sentry/quotas/redis.py b/src/sentry/quotas/redis.py
index 3a0856b722..034ad00a16 100644
--- a/src/sentry/quotas/redis.py
+++ b/src/sentry/quotas/redis.py
@@ -123,7 +123,7 @@ class BasicRedisQuota(object):
 
 
 class RedisQuota(Quota):
-    #: The ``grace`` period allows accomodating for clock drift in TTL
+    #: The ``grace`` period allows accommodating for clock drift in TTL
     #: calculation since the clock on the Redis instance used to store quota
     #: metrics may not be in sync with the computer running this code.
     grace = 60
diff --git a/src/sentry/runner/commands/devservices.py b/src/sentry/runner/commands/devservices.py
index 51916e8167..f4b5b71c86 100644
--- a/src/sentry/runner/commands/devservices.py
+++ b/src/sentry/runner/commands/devservices.py
@@ -116,7 +116,7 @@ def up(project, exclude):
 
     pulled = set()
     for name, options in containers.items():
-        # HACK(mattrobenolt): special handle snuba backend becuase it needs to
+        # HACK(mattrobenolt): special handle snuba backend because it needs to
         # handle different values based on the eventstream backend
         # For snuba, we can't run the full suite of devserver, but can only
         # run the api.
diff --git a/src/sentry/runner/commands/exec.py b/src/sentry/runner/commands/exec.py
index ceac3d9e6d..50bdb7a5a3 100644
--- a/src/sentry/runner/commands/exec.py
+++ b/src/sentry/runner/commands/exec.py
@@ -28,7 +28,7 @@ def exec_(c, file):
 
     Also compatible with hashbang `#!/usr/bin/env sentry exec`
 
-    For convenience, the following preample is attached to scripts:
+    For convenience, the following example is attached to scripts:
 
     \b
       from sentry.runner import configure; configure()
@@ -106,7 +106,7 @@ def exec_(c, file):
     }
 
     # Chop off `exec` from `sys.argv` so scripts can handle
-    # this as exepcted.
+    # this as expected.
     sys.argv = sys.argv[1:]
 
     # globals context
diff --git a/src/sentry/search/snuba/backend.py b/src/sentry/search/snuba/backend.py
index 3eba5922b9..218d35d941 100644
--- a/src/sentry/search/snuba/backend.py
+++ b/src/sentry/search/snuba/backend.py
@@ -385,12 +385,12 @@ class SnubaSearchBackend(SearchBackend):
         if start == retention_date and end == retention_date:
             # Both `start` and `end` must have been trimmed to `retention_date`,
             # so this entire search was against a time range that is outside of
-            # retention. We'll return empty results to maintain backwards compatability
+            # retention. We'll return empty results to maintain backwards compatibility
             # with Django search (for now).
             return EMPTY_RESULT
 
         if start >= end:
-            # TODO: This maintains backwards compatability with Django search, but
+            # TODO: This maintains backwards compatibility with Django search, but
             # in the future we should find a way to notify the user that their search
             # is invalid.
             return EMPTY_RESULT
diff --git a/src/sentry/stacktraces/processing.py b/src/sentry/stacktraces/processing.py
index bda817ada6..147dcd37bd 100644
--- a/src/sentry/stacktraces/processing.py
+++ b/src/sentry/stacktraces/processing.py
@@ -155,7 +155,7 @@ class StacktraceProcessor(object):
         """
 
     def preprocess_step(self, processing_task):
-        """After frames are preprocesed but before frame processing kicks in
+        """After frames are preprocessed but before frame processing kicks in
         the preprocessing step is run.  This already has access to the cache
         values on the frames.
         """
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 46933b14c8..4c9860499f 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -157,7 +157,7 @@ class AutoComplete extends React.Component {
 
     // Wait until the current macrotask completes, in the case that the click
     // happened on a hovercard or some other element rendered outside of the
-    // autocomplete, but controlled by the existance of the autocomplete, we
+    // autocomplete, but controlled by the existence of the autocomplete, we
     // need to ensure any click handlers are run.
     await new Promise(resolve => setTimeout(resolve));
 
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index 8273ed5a4f..b1655e0107 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -160,7 +160,7 @@ class AvatarCropper extends React.Component {
     });
   };
 
-  // Normalize diff accross dimensions so that negative diffs
+  // Normalize diff across dimensions so that negative diffs
   // are always making the cropper smaller and positive ones
   // are making the cropper larger
   getDiffNW = (yDiff, xDiff) => {
diff --git a/src/sentry/static/sentry/app/components/button.tsx b/src/sentry/static/sentry/app/components/button.tsx
index f29158a177..03dc417875 100644
--- a/src/sentry/static/sentry/app/components/button.tsx
+++ b/src/sentry/static/sentry/app/components/button.tsx
@@ -11,7 +11,7 @@ import Tooltip from 'app/components/tooltip';
 
 /**
  * The button can actually also be an anchor or React router Link (which seems
- * to be poorly typed as `any`). So this is a bit of a workaround to recieve
+ * to be poorly typed as `any`). So this is a bit of a workaround to receive
  * the proper html attributes.
  */
 type ButtonElement = HTMLButtonElement & HTMLAnchorElement & any;
@@ -263,7 +263,7 @@ const StyledButton = styled(
       (_value, key) => key !== 'disabled' && isPropValid(key)
     );
 
-    // Get component to use based on existance of `to` or `href` properties
+    // Get component to use based on existence of `to` or `href` properties
     // Can be react-router `Link`, `a`, or `button`
     if (prop.to) {
       return <Link ref={ref} to={prop.to} {...forwardProps} />;
diff --git a/src/sentry/static/sentry/app/components/dropdownMenu.tsx b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
index 41a2991e55..dac3d453a2 100644
--- a/src/sentry/static/sentry/app/components/dropdownMenu.tsx
+++ b/src/sentry/static/sentry/app/components/dropdownMenu.tsx
@@ -206,7 +206,7 @@ class DropdownMenu extends React.Component<Props, State> {
 
     // Wait until the current macrotask completes, in the case that the click
     // happened on a hovercard or some other element rendered outside of the
-    // dropdown, but controlled by the existance of the dropdown, we need to
+    // dropdown, but controlled by the existence of the dropdown, we need to
     // ensure any click handlers are run.
     await new Promise(resolve => setTimeout(resolve));
 
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 70e47cf147..10d46569e2 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -704,7 +704,7 @@ export const EChartsAxis = PropTypes.shape({
   axisPointer: PropTypes.object,
 
   // zlevel value of all graghical elements in x axis.
-  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a seperate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
+  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
   // Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
   zlevel: PropTypes.number,
 
@@ -807,7 +807,7 @@ export const EChartsTooltip = PropTypes.shape({
   // padding: 5
   // // Set the top and bottom paddings to be 5, and left and right paddings to be 10
   // padding: [5, 10]
-  // // Set each of the four paddings seperately
+  // // Set each of the four paddings separately
   // padding: [
   // 5,  // up
   // 10, // right
@@ -830,7 +830,7 @@ export const EChartsGrid = PropTypes.shape({
   show: PropTypes.bool,
 
   // zlevel value of all graghical elements in .
-  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a seperate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
+  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
   // Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
   zlevel: PropTypes.number,
 
@@ -980,7 +980,7 @@ export const EChartsToolBox = PropTypes.shape({
   iconStyle: PropTypes.object,
 
   // zlevel value of all graghical elements in .
-  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a seperate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
+  // zlevel is used to make layers with Canvas. Graphical elements with different zlevel values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate zlevel. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid crash.
   // Canvases with bigger zlevel will be placed on Canvases with smaller zlevel.
   zlevel: PropTypes.number,
 
diff --git a/src/sentry/static/sentry/app/views/integrationInstallation.jsx b/src/sentry/static/sentry/app/views/integrationInstallation.jsx
index d58110d9ad..ed9205c8e1 100644
--- a/src/sentry/static/sentry/app/views/integrationInstallation.jsx
+++ b/src/sentry/static/sentry/app/views/integrationInstallation.jsx
@@ -129,7 +129,7 @@ export default class IntegrationInstallation extends AsyncView {
           <React.Fragment>
             <p>
               {tct(
-                'The following features will be availble for [organization] when installed.',
+                'The following features will be available for [organization] when installed.',
                 {organization: <strong>{organization.slug}</strong>}
               )}
             </p>
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index 737f7e9a9e..f5dcff5f17 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -448,7 +448,7 @@ class FormModel {
         const newValue = this.getValue(id);
         const change = {old: oldValue, new: newValue};
 
-        // Only use `allowUndo` option if explicity defined
+        // Only use `allowUndo` option if explicitly defined
         if (typeof this.options.allowUndo === 'undefined' || this.options.allowUndo) {
           saveOnBlurUndoMessage(change, this, id);
         }
diff --git a/src/sentry/tasks/clear_expired_resolutions.py b/src/sentry/tasks/clear_expired_resolutions.py
index 9a037e24e6..d154ae0e6b 100644
--- a/src/sentry/tasks/clear_expired_resolutions.py
+++ b/src/sentry/tasks/clear_expired_resolutions.py
@@ -13,7 +13,7 @@ def clear_expired_resolutions(release_id):
     the system that any pending resolutions older than the given release can now
     be safely transitioned to resolved.
 
-    This is currenlty only used for ``in_next_release`` resolutions.
+    This is currently only used for ``in_next_release`` resolutions.
     """
     try:
         release = Release.objects.get_from_cache(id=release_id)
diff --git a/src/sentry/tasks/commits.py b/src/sentry/tasks/commits.py
index 7278aa3a46..70f5e7eaf7 100644
--- a/src/sentry/tasks/commits.py
+++ b/src/sentry/tasks/commits.py
@@ -62,7 +62,7 @@ def handle_invalid_identity(identity, commit_failure=False):
 )
 @retry(exclude=(Release.DoesNotExist, User.DoesNotExist))
 def fetch_commits(release_id, user_id, refs, prev_release_id=None, **kwargs):
-    # TODO(dcramer): this function could use some cleanup/refactoring as its a bit unwieldly
+    # TODO(dcramer): this function could use some cleanup/refactoring as it's a bit unwieldy
     commit_list = []
 
     release = Release.objects.get(id=release_id)
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index cc11b30839..fab6c7859e 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -390,7 +390,7 @@ def vsts_subscription_check(integration_id, organization_id, **kwargs):
             integration.metadata["subscription"]["id"] = subscription["id"]
             integration.metadata["subscription"]["secret"] = secret
             logger.info(
-                "vsts_subscription_check.updated_diabled_subscription",
+                "vsts_subscription_check.updated_disabled_subscription",
                 extra={
                     "integration_id": integration_id,
                     "organization_id": organization_id,
diff --git a/src/sentry/tasks/sentry_apps.py b/src/sentry/tasks/sentry_apps.py
index 047e4b87bb..5bd9becdb1 100644
--- a/src/sentry/tasks/sentry_apps.py
+++ b/src/sentry/tasks/sentry_apps.py
@@ -34,7 +34,7 @@ TASK_OPTIONS = {
     "max_retries": 3,
 }
 
-# We call some models by a different name, publically, than their class name.
+# We call some models by a different name, publicly, than their class name.
 # For example the model Group is called "Issue" in the UI. We want the Service
 # Hook events to match what we externally call these primitives.
 RESOURCE_RENAMES = {"Group": "issue"}
diff --git a/src/sentry/templates/sentry/emails/setup_2fa.html b/src/sentry/templates/sentry/emails/setup_2fa.html
index fe657d0cfc..0bdbf12c23 100644
--- a/src/sentry/templates/sentry/emails/setup_2fa.html
+++ b/src/sentry/templates/sentry/emails/setup_2fa.html
@@ -7,7 +7,7 @@
     <p>
         The {{ organization.name|title }} organization now requires all members to enable
         two-factor authentication. Effective immediately, you will be unable to access
-        this organization or recieve its notifications until you enable at least
+        this organization or receive its notifications until you enable at least
         one form of 2FA.
     </p>
     <p>
diff --git a/src/sentry/templates/sentry/emails/setup_2fa.txt b/src/sentry/templates/sentry/emails/setup_2fa.txt
index d8348a1fba..245b98b8ec 100644
--- a/src/sentry/templates/sentry/emails/setup_2fa.txt
+++ b/src/sentry/templates/sentry/emails/setup_2fa.txt
@@ -2,7 +2,7 @@ Setup Two-Factor Authentication
 
 The {{ organization.name|title }} organization now requires all members to enable
 two-factor authentication. Effective immediately, you will be unable to access
-this organization or recieve its notifications until you enable at least
+this organization or receive its notifications until you enable at least
 one form of 2FA.
 
 Enable 2FA to reinstate your access and settings:
diff --git a/src/sentry/testutils/helpers/features.py b/src/sentry/testutils/helpers/features.py
index 5fdadae193..ce2c96c517 100644
--- a/src/sentry/testutils/helpers/features.py
+++ b/src/sentry/testutils/helpers/features.py
@@ -13,7 +13,7 @@ def Feature(names):
     """
     Control whether a feature is enabled.
 
-    A single feature may be conviniently enabled with
+    A single feature may be conveniently enabled with
 
     >>> with Feature('feature-1'):
     >>>   # Executes with feature-1 enabled
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index f1dad0ed66..d2536e8a93 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -379,13 +379,13 @@ class BaseTSDB(Service):
 
     def record(self, model, key, values, timestamp=None, environment_id=None):
         """
-        Record occurences of items in a single distinct counter.
+        Record occurrence of items in a single distinct counter.
         """
         raise NotImplementedError
 
     def record_multi(self, items, timestamp=None, environment_id=None):
         """
-        Record occurences of items in multiple distinct counters.
+        Record occurrence of items in multiple distinct counters.
         """
         for model, key, values in items:
             self.record(model, key, values, timestamp, environment_id=environment_id)
diff --git a/src/sentry/tsdb/redis.py b/src/sentry/tsdb/redis.py
index 0b613b1a8e..730044979b 100644
--- a/src/sentry/tsdb/redis.py
+++ b/src/sentry/tsdb/redis.py
@@ -349,7 +349,7 @@ class RedisTSDB(BaseTSDB):
 
     def record_multi(self, items, timestamp=None, environment_id=None):
         """
-        Record an occurence of an item in a distinct counter.
+        Record an occurrence of an item in a distinct counter.
         """
         self.validate_arguments([model for model, key, values in items], [environment_id])
 
@@ -421,7 +421,7 @@ class RedisTSDB(BaseTSDB):
                 # ``PFCOUNT`` correctly (although this is fixed in the Git
                 # master, so should be available in the next release) and only
                 # supports a single key argument -- not the variadic signature
-                # supported by the protocol -- so we have to call the commnand
+                # supported by the protocol -- so we have to call the command
                 # directly here instead.
                 ks = []
                 for timestamp in series:
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 83e17d1655..2320d8d92c 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -225,7 +225,7 @@ def login(request, user, passed_2fa=None, after_2fa=None, organization_id=None,
     # figure out that their passwords are expired this is still the more
     # reasonable behavior.
     #
-    # We also rememebr _after_2fa here so that we can continue the flow if
+    # We also remember _after_2fa here so that we can continue the flow if
     # someone does it in the same browser.
     if user.is_password_expired:
         raise AuthUserPasswordExpired(user)
diff --git a/src/sentry/utils/cursors.py b/src/sentry/utils/cursors.py
index ba4a4eca93..adff0ac026 100644
--- a/src/sentry/utils/cursors.py
+++ b/src/sentry/utils/cursors.py
@@ -210,7 +210,7 @@ def build_cursor(
     )
 
     if cursor.is_prev and has_prev:
-        # A prev cursor with more reults should have the first item chopped off
+        # A prev cursor with more results should have the first item chopped off
         # as this is the item that indicates we have more items before, and
         # should not be included on this page.
         results = results[1:]
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index 8bdbd343e9..03712cac3f 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -11,7 +11,7 @@ from sentry.utils.safe import get_path
 def varmap(func, var, context=None, name=None):
     """
     Executes ``func(key_name, value)`` on all values
-    recurisively discovering dict and list scoped
+    recursively discovering dict and list scoped
     values.
     """
     if context is None:
diff --git a/src/sentry/utils/distutils/commands/build_js_sdk_registry.py b/src/sentry/utils/distutils/commands/build_js_sdk_registry.py
index 99a18c4325..158189bb04 100644
--- a/src/sentry/utils/distutils/commands/build_js_sdk_registry.py
+++ b/src/sentry/utils/distutils/commands/build_js_sdk_registry.py
@@ -60,4 +60,4 @@ class BuildJsSdkRegistryCommand(BaseBuildCommand):
         try:
             sync_registry()
         except BaseException:
-            log.error("error ocurred while trying to fetch js sdk information from the registry")
+            log.error("error occurred while trying to fetch js sdk information from the registry")
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index fdadb3c3a7..4256ebff09 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -111,7 +111,7 @@ def domain_from_email(email):
 
 
 # Slightly modified version of Django's
-# `django.core.mail.message:make_msgid` becuase we need
+# `django.core.mail.message:make_msgid` because we need
 # to override the domain. If we ever upgrade to
 # django 1.8, we can/should replace this.
 def make_msgid(domain):
diff --git a/src/sentry/utils/locking/lock.py b/src/sentry/utils/locking/lock.py
index c954bf76ea..bf3e8a580c 100644
--- a/src/sentry/utils/locking/lock.py
+++ b/src/sentry/utils/locking/lock.py
@@ -51,7 +51,7 @@ class Lock(object):
         Attempt to release the lock.
 
         Any exceptions raised when attempting to release the lock are logged
-        and supressed.
+        and suppressed.
         """
         try:
             self.backend.release(self.key, self.routing_key)
diff --git a/src/sentry/utils/pytest/fixtures.py b/src/sentry/utils/pytest/fixtures.py
index fb26fa2e30..6e63df9bcc 100644
--- a/src/sentry/utils/pytest/fixtures.py
+++ b/src/sentry/utils/pytest/fixtures.py
@@ -19,7 +19,7 @@ import six
 from datetime import datetime
 
 
-# These chars cannot be used in Windows paths so repalce them:
+# These chars cannot be used in Windows paths so replace them:
 # https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file#naming-conventions
 UNSAFE_PATH_CHARS = ("<", ">", ":", '"', " | ", "?", "*")
 
diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index 9765150924..290e277483 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -216,7 +216,7 @@ def load_script(path):
     # This changes the argument order of the ``Script.__call__`` method to
     # encourage using the script with a specific Redis client, rather
     # than implicitly using the first client that the script was registered
-    # with. (This can prevent lots of bizzare behavior when dealing with
+    # with. (This can prevent lots of bizarre behavior when dealing with
     # clusters of Redis servers.)
     def call_script(client, keys, args):
         u"""
diff --git a/src/sentry/utils/services.py b/src/sentry/utils/services.py
index 1690f519a0..3df6d30254 100644
--- a/src/sentry/utils/services.py
+++ b/src/sentry/utils/services.py
@@ -188,7 +188,7 @@ class ServiceDelegator(Service):
 
     - Only method access is delegated to the individual backends. Attribute
       values are returned from the base backend. Only methods that are defined
-      on the base backend are eligble for delegation (since these methods are
+      on the base backend are eligible for delegation (since these methods are
       considered the public API.)
     - The backend makes no attempt to synchronize common backend option values
       between backends (e.g. TSDB rollup configuration) to ensure equivalency
diff --git a/src/sentry/utils/session_store.py b/src/sentry/utils/session_store.py
index 798eed3861..aed838cabb 100644
--- a/src/sentry/utils/session_store.py
+++ b/src/sentry/utils/session_store.py
@@ -10,7 +10,7 @@ EXPIRATION_TTL = 10 * 60
 
 class RedisSessionStore(object):
     """
-    RedisSessionStore provides a convinience object, which when initalized will
+    RedisSessionStore provides a convenience object, which when initalized will
     store attributes assigned to it into redis. The redis key is stored into
     the request session. Useful for storing data too large to be stored into
     the session cookie.
diff --git a/src/sentry/web/frontend/group_tag_export.py b/src/sentry/web/frontend/group_tag_export.py
index 890712281f..c50d213286 100644
--- a/src/sentry/web/frontend/group_tag_export.py
+++ b/src/sentry/web/frontend/group_tag_export.py
@@ -88,7 +88,7 @@ class GroupTagExportView(ProjectView, CsvMixin, EnvironmentMixin):
             # if the environment doesn't exist then the tag can't possibly exist
             raise Http404
 
-        # validate existance as it may be deleted
+        # validate existence as it may be deleted
         try:
             tagstore.get_tag_key(project.id, environment_id, lookup_key)
         except tagstore.TagKeyNotFound:
diff --git a/src/social_auth/backends/__init__.py b/src/social_auth/backends/__init__.py
index dd169828d0..1045dd6e69 100644
--- a/src/social_auth/backends/__init__.py
+++ b/src/social_auth/backends/__init__.py
@@ -304,7 +304,7 @@ class BaseAuth(object):
         """Return extra arguments needed on auth process, setting is per
         backend and defined by:
             <backend name in uppercase>_AUTH_EXTRA_ARGUMENTS.
-        The defaults can be overriden by GET parameters.
+        The defaults can be overridden by GET parameters.
         """
         backend_name = self.AUTH_BACKEND.name.upper().replace("-", "_")
         extra_arguments = setting(backend_name + "_AUTH_EXTRA_ARGUMENTS", {})
diff --git a/src/south/db/generic.py b/src/south/db/generic.py
index af5be2d876..298ee28091 100644
--- a/src/south/db/generic.py
+++ b/src/south/db/generic.py
@@ -433,7 +433,7 @@ class DatabaseOperations(object):
         """
         Returns a field's type suitable for ALTER COLUMN.
         By default it just returns field.db_type().
-        To be overriden by backend specific subclasses
+        To be overridden by backend specific subclasses
         @param field: The field to generate type for
         """
         try:
@@ -469,7 +469,7 @@ class DatabaseOperations(object):
         """
         Alters the given column name so it will match the given field.
         Note that conversion between the two by the database must be possible.
-        Will not automatically add _id by default; to have this behavour, pass
+        Will not automatically add _id by default; to have this behavior, pass
         explicit_name=False.
 
         @param table_name: The name of the table to add the column to
diff --git a/src/south/management/commands/schemamigration.py b/src/south/management/commands/schemamigration.py
index 4deb31b23d..398fc229a1 100644
--- a/src/south/management/commands/schemamigration.py
+++ b/src/south/management/commands/schemamigration.py
@@ -67,7 +67,7 @@ class Command(DataCommand):
         if re.search('[^_\w]', name) and name != "-":
             self.error("Migration names should contain only alphanumeric characters and underscores.")
 
-        # Make sure options are compatable
+        # Make sure options are compatible
         if initial and (added_model_list or added_field_list or auto):
             self.error("You cannot use --initial and other options together\n" + self.usage_str)
 
diff --git a/tests/integration/test_message_filters.py b/tests/integration/test_message_filters.py
index 9df62574ea..1ffc7e5d3a 100644
--- a/tests/integration/test_message_filters.py
+++ b/tests/integration/test_message_filters.py
@@ -53,7 +53,7 @@ class FilterTests(TestCase):
         )
         return message
 
-    def test_should_filter_browser_extensions_when_enbabled(self):
+    def test_should_filter_browser_extensions_when_enabled(self):
         self._set_filter_state(_browser_extensions_filter, "1")
         message = self._get_message_with_bad_extension()
         resp = self._postWithHeader(message)
diff --git a/tests/js/spec/components/createSampleEventButton.spec.jsx b/tests/js/spec/components/createSampleEventButton.spec.jsx
index 08d5d9fe26..c804965582 100644
--- a/tests/js/spec/components/createSampleEventButton.spec.jsx
+++ b/tests/js/spec/components/createSampleEventButton.spec.jsx
@@ -51,7 +51,7 @@ describe('CreateSampleEventButton', function() {
       body: {},
     });
 
-    // There is a timeout before we check for the existance of the latest
+    // There is a timeout before we check for the existence of the latest
     // event. Wait for it then wait for the request to complete
     jest.runAllTimers();
     await Promise.resolve();
diff --git a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
index f6f288f6a0..30d9b87e7a 100644
--- a/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
+++ b/tests/js/spec/components/organizations/globalSelectionHeader.spec.jsx
@@ -224,7 +224,7 @@ describe('GlobalSelectionHeader', function() {
       project: ['2', '3'],
     });
 
-    // Now change projects, first project has no enviroments
+    // Now change projects, first project has no environments
     wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
     wrapper
       .find('MultipleProjectSelector CheckboxFancy')
diff --git a/tests/js/spec/views/discover/result/utils.spec.jsx b/tests/js/spec/views/discover/result/utils.spec.jsx
index 35e0ade771..ecee9487a8 100644
--- a/tests/js/spec/views/discover/result/utils.spec.jsx
+++ b/tests/js/spec/views/discover/result/utils.spec.jsx
@@ -283,7 +283,7 @@ describe('Utils', function() {
           [
             ...raw,
             ...[...new Array(10)].map(() => ({
-              'error.type': 'Exeption',
+              'error.type': 'Exception',
               platform: `${Math.random()}`,
               count: 10,
               time: 1532070000,
@@ -300,7 +300,7 @@ describe('Utils', function() {
           [
             ...raw,
             ...[...new Array(10)].map(() => ({
-              'error.type': 'Exeption',
+              'error.type': 'Exception',
               platform: `${Math.random()}`,
               count: 10,
               time: 1532070000,
diff --git a/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx b/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx
index df29dd907e..e429bb00c7 100644
--- a/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx
+++ b/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx
@@ -74,7 +74,7 @@ describe('EventWaiter', function() {
     expect(projectApiMock).not.toHaveBeenCalled();
   });
 
-  it('recieves a first event of `true` when first even has expired', async function() {
+  it('receives a first event of `true` when first even has expired', async function() {
     const org = TestStubs.Organization();
     const project = TestStubs.ProjectDetails({
       firstEvent: '2019-05-01T00:00:00.000Z',
diff --git a/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx b/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx
index 7a28289968..7c4c44807f 100644
--- a/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx
+++ b/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx
@@ -15,7 +15,7 @@ describe('FirstEventIndicator', function() {
     expect(wrapper.find('WaitingIndicator').exists()).toBe(true);
   });
 
-  describe('recieved first event', function() {
+  describe('received first event', function() {
     it('renders', function() {
       const org = TestStubs.Organization();
 
diff --git a/tests/js/spec/views/settings/projectEnvironments.spec.jsx b/tests/js/spec/views/settings/projectEnvironments.spec.jsx
index 01c44db393..be8943d6dd 100644
--- a/tests/js/spec/views/settings/projectEnvironments.spec.jsx
+++ b/tests/js/spec/views/settings/projectEnvironments.spec.jsx
@@ -170,7 +170,7 @@ describe('ProjectEnvironments', function() {
       );
     });
 
-    it('does not have "All Enviroments" rows', function() {
+    it('does not have "All Environments" rows', function() {
       MockApiClient.addMockResponse({
         url: baseUrl,
         body: TestStubs.Environments(true),
diff --git a/tests/sentry/api/endpoints/test_auth_login.py b/tests/sentry/api/endpoints/test_auth_login.py
index 105e2e996c..33c306ee51 100644
--- a/tests/sentry/api/endpoints/test_auth_login.py
+++ b/tests/sentry/api/endpoints/test_auth_login.py
@@ -14,7 +14,7 @@ class AuthLoginEndpointTest(APITestCase):
         return reverse("sentry-api-0-auth-login")
 
     def setUp(self):
-        # Requets to set the test cookie
+        # Requests to set the test cookie
         self.client.get(reverse("sentry-api-0-auth-config"))
 
     def test_login_invalid_password(self):
diff --git a/tests/sentry/api/endpoints/test_group_user_reports.py b/tests/sentry/api/endpoints/test_group_user_reports.py
index 128c1bae23..d9a43b4a14 100644
--- a/tests/sentry/api/endpoints/test_group_user_reports.py
+++ b/tests/sentry/api/endpoints/test_group_user_reports.py
@@ -62,7 +62,7 @@ class GroupUserReport(APITestCase, SnubaTestCase):
             r.event_id for r in userreports
         )
 
-    def test_specified_enviroment(self):
+    def test_specified_environment(self):
         self.login_as(user=self.user)
 
         response = self.client.get(self.path + "?environment=" + self.env1.name)
diff --git a/tests/sentry/api/endpoints/test_organization_pinned_searches.py b/tests/sentry/api/endpoints/test_organization_pinned_searches.py
index e37a725e4d..26952c6ca2 100644
--- a/tests/sentry/api/endpoints/test_organization_pinned_searches.py
+++ b/tests/sentry/api/endpoints/test_organization_pinned_searches.py
@@ -144,7 +144,7 @@ class DeleteOrganizationPinnedSearchTest(APITestCase):
         assert not SavedSearch.objects.filter(id=saved_search.id).exists()
         assert SavedSearch.objects.filter(id=other_saved_search.id).exists()
 
-        # Test calling mulitple times works ok, doesn't cause other rows to
+        # Test calling multiple times works ok, doesn't cause other rows to
         # delete
         self.get_valid_response(type=saved_search.type, status_code=204)
         assert SavedSearch.objects.filter(id=other_saved_search.id).exists()
diff --git a/tests/sentry/api/endpoints/test_project_releases.py b/tests/sentry/api/endpoints/test_project_releases.py
index 8b5689e717..bae0ff8131 100644
--- a/tests/sentry/api/endpoints/test_project_releases.py
+++ b/tests/sentry/api/endpoints/test_project_releases.py
@@ -266,7 +266,7 @@ class ProjectReleaseListEnvironmentsTest(APITestCase):
             new_issues_count=7,
         )
 
-        # TODO(LB): This is testing all environmetns but it will not work
+        # TODO(LB): This is testing all environments but it will not work
         # given what I did with the release serializer
         # it will instead rely on tagstore. Not sure how to fix this.
         # response = self.client.get(url, format='json')
@@ -368,7 +368,7 @@ class ProjectReleaseCreateTest(APITestCase):
 
         assert response.status_code == 208, response.content
 
-    def test_duplicate_accross_org(self):
+    def test_duplicate_across_org(self):
         self.login_as(user=self.user)
 
         project = self.create_project(name="foo")
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index 02fbe5b7f0..1ca931280e 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -239,7 +239,7 @@ class UserUpdateTest(APITestCase):
 
         url = reverse("sentry-api-0-user-details", kwargs={"user_id": user2.id})
 
-        # failed authorization, user does not have permissios to delete another
+        # failed authorization, user does not have permissions to delete another
         # user
         response = self.client.delete(url, data={"hardDelete": True, "organizations": []})
         assert response.status_code == 403
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index bcd2aa97dd..44d88fcf70 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -234,7 +234,7 @@ class ProjectSummarySerializerTest(TestCase):
         result = serialize(self.project, self.user, ProjectSummarySerializer())
         assert result["hasUserReports"] is True
 
-    def test_no_enviroments(self):
+    def test_no_environments(self):
         # remove environments and related models
         Deploy.objects.all().delete()
         Release.objects.all().delete()
diff --git a/tests/sentry/api/serializers/test_pull_request.py b/tests/sentry/api/serializers/test_pull_request.py
index 2524ea6dbd..9c397fb199 100644
--- a/tests/sentry/api/serializers/test_pull_request.py
+++ b/tests/sentry/api/serializers/test_pull_request.py
@@ -51,14 +51,14 @@ class PullRequestSerializerTest(TestCase):
         repository = Repository.objects.create(
             organization_id=project.organization_id, name="test/test"
         )
-        pull_requst = PullRequest.objects.create(
+        pull_request = PullRequest.objects.create(
             organization_id=project.organization_id,
             repository_id=repository.id,
             key="abc",
             message="waddap",
         )
 
-        result = serialize(pull_requst, user)
+        result = serialize(pull_request, user)
 
         assert result["author"] == {}
 
diff --git a/tests/sentry/api/test_paginator.py b/tests/sentry/api/test_paginator.py
index 3878bc03ee..0135afbb15 100644
--- a/tests/sentry/api/test_paginator.py
+++ b/tests/sentry/api/test_paginator.py
@@ -165,7 +165,7 @@ class DateTimePaginatorTest(TestCase):
         joined = timezone.now()
 
         # The DateTime pager only has accuracy up to 1000th of a second.
-        # Everythng can't be added within less than 10 microseconds of each
+        # Everything can't be added within less than 10 microseconds of each
         # other. This is handled by the pager (see test_rounding_offset), but
         # this case shouldn't rely on it.
         res1 = self.create_user("foo@example.com", date_joined=joined)
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 19096dabe6..1149e4fbdf 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -133,7 +133,7 @@ class RedisBufferTest(TestCase):
             client.zadd("b:p:1", 1, "bar")
             client.zadd("b:p", 1, "baz")
 
-        # On first pass, we are expecing to do:
+        # On first pass, we are expecting to do:
         # * process the buffer that doesn't have a partition (b:p)
         # * queue up 2 jobs, one for each partition to process.
         self.buf.process_pending()
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 82c3600fe6..f1bcf97a16 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -74,7 +74,7 @@ class EventManagerTest(TestCase):
 
         assert event1.group_id != event2.group_id
 
-    def test_ephemral_interfaces_removed_on_save(self):
+    def test_ephemeral_interfaces_removed_on_save(self):
         manager = EventManager(make_event(platform="python"))
         manager.normalize()
         event = manager.save(1)
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index 4549e2b6bb..7c515f205f 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -201,7 +201,7 @@ def test_deprecated_attrs(key):
     assert not data.get("errors")
 
 
-def test_returns_cannonical_dict():
+def test_returns_canonical_dict():
     from sentry.utils.canonical import CanonicalKeyDict
 
     event = make_event()
diff --git a/tests/sentry/eventstream/kafka/test_consumer.py b/tests/sentry/eventstream/kafka/test_consumer.py
index e785b460d2..5ed08ffe84 100644
--- a/tests/sentry/eventstream/kafka/test_consumer.py
+++ b/tests/sentry/eventstream/kafka/test_consumer.py
@@ -586,7 +586,7 @@ def test_consumer_rebalance_from_uncommitted_offset(requires_kafka):
         message = consumer_a.poll(1)
         assert (
             message is None or message.error() is KafkaError._PARTITION_EOF
-        ), "there should be no more messages to recieve"
+        ), "there should be no more messages to receive"
 
         consumer_b = SynchronizedConsumer(
             bootstrap_servers=os.environ["SENTRY_KAFKA_HOSTS"],
@@ -614,9 +614,9 @@ def test_consumer_rebalance_from_uncommitted_offset(requires_kafka):
         message = consumer_a.poll(1)
         assert (
             message is None or message.error() is KafkaError._PARTITION_EOF
-        ), "there should be no more messages to recieve"
+        ), "there should be no more messages to receive"
 
         message = consumer_b.poll(1)
         assert (
             message is None or message.error() is KafkaError._PARTITION_EOF
-        ), "there should be no more messages to recieve"
+        ), "there should be no more messages to receive"
diff --git a/tests/sentry/grouping/test_variants.py b/tests/sentry/grouping/test_variants.py
index 637dee626a..f14ae5c68a 100644
--- a/tests/sentry/grouping/test_variants.py
+++ b/tests/sentry/grouping/test_variants.py
@@ -77,7 +77,7 @@ def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
     with open(os.path.join(_fixture_path, test_name + ".json")) as f:
         input = json.load(f)
 
-    # Cutomize grouping config from the _grouping config
+    # Customize grouping config from the _grouping config
     grouping_config = get_default_grouping_config_dict(config_name)
     grouping_info = input.pop("_grouping", None) or {}
     enhancement_base = grouping_info.get("enhancement_base")
@@ -87,7 +87,7 @@ def test_event_hash_variant(insta_snapshot, config_name, test_name, log):
         e = Enhancements.from_config_string(enhancements or "", bases=enhancement_bases)
         grouping_config["enhancements"] = e.dumps()
 
-    # Noramlize the event
+    # Normalize the event
     mgr = EventManager(data=input, grouping_config=grouping_config)
     mgr.normalize()
     data = mgr.get_data()
diff --git a/tests/sentry/incidents/test_logic.py b/tests/sentry/incidents/test_logic.py
index b4d572337f..076b176e7c 100644
--- a/tests/sentry/incidents/test_logic.py
+++ b/tests/sentry/incidents/test_logic.py
@@ -572,7 +572,7 @@ class CreateInitialEventStatsSnapshotTest(TestCase, BaseIncidentsTest):
             assert [row[1] for row in event_stat_snapshot.values] == [1, 1, 2, 1]
 
 
-class GetIncidentSuscribersTest(TestCase, BaseIncidentsTest):
+class GetIncidentSubscribersTest(TestCase, BaseIncidentsTest):
     def test_simple(self):
         incident = self.create_incident()
         assert list(get_incident_subscribers(incident)) == []
diff --git a/tests/sentry/incidents/test_tasks.py b/tests/sentry/incidents/test_tasks.py
index 94d38fdf6f..6cbe1e9a1f 100644
--- a/tests/sentry/incidents/test_tasks.py
+++ b/tests/sentry/incidents/test_tasks.py
@@ -128,13 +128,13 @@ class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
         activity = create_incident_activity(
             self.incident, IncidentActivityType.COMMENT, user=self.user, comment="hello"
         )
-        recepient = self.create_user()
+        recipient = self.create_user()
         self.run_test(
             activity,
             expected_username=activity.user.name,
             expected_action="left a comment",
             expected_comment=activity.comment,
-            expected_recipient=recepient,
+            expected_recipient=recipient,
         )
         activity.type = IncidentActivityType.STATUS_CHANGE
         activity.value = six.text_type(IncidentStatus.CLOSED.value)
@@ -145,7 +145,7 @@ class TestBuildActivityContext(BaseIncidentActivityTest, TestCase):
             expected_action="changed status from %s to %s"
             % (IncidentStatus.OPEN.name.lower(), IncidentStatus.CLOSED.name.lower()),
             expected_comment=activity.comment,
-            expected_recipient=recepient,
+            expected_recipient=recipient,
         )
 
 
diff --git a/tests/sentry/search/test_utils.py b/tests/sentry/search/test_utils.py
index 5f31fca916..045d3cb75c 100644
--- a/tests/sentry/search/test_utils.py
+++ b/tests/sentry/search/test_utils.py
@@ -71,7 +71,7 @@ class ParseQueryTest(TestCase):
         result = self.parse_query("foo:  :ba:r::foo:")
         assert result == {"tags": {}, "query": "foo:  :ba:r::foo:"}
 
-    def test_handles_space_seperation_after_useless_prefix_exception(self):
+    def test_handles_space_separation_after_useless_prefix_exception(self):
         result = self.parse_query("foo: bar foo:bar")
         assert result == {"tags": {"foo": "bar"}, "query": "foo: bar"}
 
diff --git a/tests/sentry/tasks/test_clear_expired_resolutions.py b/tests/sentry/tasks/test_clear_expired_resolutions.py
index 82667f07a1..5701454aff 100644
--- a/tests/sentry/tasks/test_clear_expired_resolutions.py
+++ b/tests/sentry/tasks/test_clear_expired_resolutions.py
@@ -58,7 +58,7 @@ class ClearExpiredResolutionsTest(TestCase):
         assert Group.objects.get(id=group2.id).status == GroupStatus.UNRESOLVED
 
         # row should be updated to the in_release type, and reflect
-        # the release it was reoslved in
+        # the release it was resolved in
         resolution1 = GroupResolution.objects.get(id=resolution1.id)
         assert resolution1.status == GroupResolution.Status.resolved
         assert resolution1.release == new_release
diff --git a/tests/sentry/templatetags/test_sentry_helpers.py b/tests/sentry/templatetags/test_sentry_helpers.py
index 45a5df9ea0..ff93fae8ce 100644
--- a/tests/sentry/templatetags/test_sentry_helpers.py
+++ b/tests/sentry/templatetags/test_sentry_helpers.py
@@ -32,7 +32,7 @@ def test_system_origin():
         ("{% absolute_uri '/{}/' who %}", "http://testserver/matt/"),
         # String substitution with missing variable
         ("{% absolute_uri '/foo/{}/' xxx %}", "http://testserver/foo//"),
-        # String substitution with multple vars
+        # String substitution with multiple vars
         ("{% absolute_uri '/{}/{}/' who desc %}", "http://testserver/matt/awesome/"),
         # Empty tag, as other var
         ("{% absolute_uri as uri %}hello {{ uri }}!", "hello http://testserver!"),
diff --git a/tests/sentry/utils/test_concurrent.py b/tests/sentry/utils/test_concurrent.py
index 379321831c..f0317a3140 100644
--- a/tests/sentry/utils/test_concurrent.py
+++ b/tests/sentry/utils/test_concurrent.py
@@ -151,7 +151,7 @@ def test_timed_future_cancel():
     assert future.get_timing() == (2.0, 1.0)
 
 
-def test_sychronous_executor():
+def test_synchronous_executor():
     executor = SynchronousExecutor()
 
     assert executor.submit(lambda: mock.sentinel.RESULT).result() is mock.sentinel.RESULT
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 51a3cc5fad..87034067fc 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -1347,7 +1347,7 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
         assert set(results) == set([self.group1, no_tag_event.group])
 
     def test_all_fields_do_not_error(self):
-        # Just a sanity check to make sure that all fields can be succesfully
+        # Just a sanity check to make sure that all fields can be successfully
         # searched on without returning type errors and other schema related
         # issues.
         def test_query(query):
diff --git a/webpack.config.js b/webpack.config.js
index e03c7f48ea..d0831f12e4 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -32,7 +32,7 @@ const USE_HOT_MODULE_RELOAD =
 const NO_DEV_SERVER = env.NO_DEV_SERVER;
 
 // Deploy previews are built using netlify. We can check if we're in netlifys
-// build process by checking the existance of the PULL_REQUEST env var.
+// build process by checking the existence of the PULL_REQUEST env var.
 //
 // See: https://www.netlify.com/docs/continuous-deployment/#environment-variables
 const DEPLOY_PREVIEW_CONFIG = env.PULL_REQUEST && {
@@ -146,7 +146,7 @@ supportedLocales
   });
 
 /**
- * Restirct translation files that are pulled in through app/translations.jsx
+ * Restrict translation files that are pulled in through app/translations.jsx
  * and through moment/locale/* to only those which we create bundles for via
  * locale/catalogs.json.
  */
@@ -311,7 +311,7 @@ const appConfig = {
     new CopyPlugin([{from: path.join(staticPrefix, 'app', 'index.html')}]),
 
     /**
-     * Defines environemnt specific flags.
+     * Defines environment specific flags.
      */
     new webpack.DefinePlugin({
       'process.env': {
@@ -324,7 +324,7 @@ const appConfig = {
 
     /**
      * See above for locale chunks. These plugins help with that
-     * funcationality.
+     * functionality.
      */
     new OptionalLocaleChunkPlugin(),
 
@@ -414,7 +414,7 @@ if (USE_HOT_MODULE_RELOAD && !NO_DEV_SERVER) {
   // XXX(epurkhiser): Sentry (development) can be run in an experimental
   // pure-SPA mode, where ONLY /api* requests are proxied directly to the API
   // backend, otherwise ALL requests are rewritten to a development index.html.
-  // Thus completely seperating the frontend from serving any pages through the
+  // Thus completely separating the frontend from serving any pages through the
   // backend.
   //
   // THIS IS EXPERIMENTAL. Various sentry pages still rely on django to serve
