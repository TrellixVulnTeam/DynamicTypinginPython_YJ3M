commit 1149e1883dd5f4d2fd9085955295a1e1dfdc12e4
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Aug 16 16:17:08 2018 -0700

    feat(vsts): VSTS Autocomplete link issue (#9398)
    
    * fixed tests
    
    * saving place.
    
    * Added Mer's recommendations.
    
    * Creating method from the client.
    
    * Added search to link issue.
    
    * Removed changes to tests
    
    * Removed Comment
    
    * removed repeat code
    
    * Instantiated Response.
    
    * Added 400 at the end of endpoint
    
    * Account name rather than instance

diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 9bf0229291..3a0e2f89a9 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -27,6 +27,7 @@ class VstsApiPath(object):
     subscriptions = u'https://{account_name}/_apis/hooks/subscriptions'
     work_items = u'https://{account_name}/DefaultCollection/_apis/wit/workitems/{id}'
     work_items_create = u'https://{account_name}/{project}/_apis/wit/workitems/${type}'
+    work_item_search = u'https://{account_name}.almsearch.visualstudio.com/_apis/search/workitemsearchresults'
     work_item_states = u'https://{account_name}/{project}/_apis/wit/workitemtypes/{type}/states'
     users = u'https://{account_name}.vssps.visualstudio.com/_apis/graph/users'
 
@@ -265,3 +266,23 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
                 subscription_id=subscription_id,
             )
         )
+
+    def search_issues(self, account_name, query=None):
+        return self.post(
+            VstsApiPath.work_item_search.format(
+                account_name=account_name,
+            ),
+            data={
+                'searchText': query,
+                '$top': 1000,
+                'filters': {
+                    'System.WorkItemType': [
+                        'Bug',
+                        'User Story',
+                        'Feature',
+                        'Task'
+                    ],
+                }
+            },
+            api_preview=True,
+        )
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index 4940303af6..261d864edc 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -3,6 +3,8 @@ from __future__ import absolute_import
 import six
 from mistune import markdown
 
+
+from django.core.urlresolvers import reverse
 from sentry.models import IntegrationExternalProject, OrganizationIntegration
 from sentry.integrations.issues import IssueSyncMixin
 
@@ -47,6 +49,14 @@ class VstsIssueSync(IssueSyncMixin):
 
     def get_link_issue_config(self, group, **kwargs):
         fields = super(VstsIssueSync, self).get_link_issue_config(group, **kwargs)
+        org = group.organization
+        autocomplete_url = reverse(
+            'sentry-extensions-vsts-search', args=[org.slug, self.model.id],
+        )
+        for field in fields:
+            if field['name'] == 'externalIssue':
+                field['url'] = autocomplete_url
+                field['type'] = 'select'
         return fields
 
     def get_issue_url(self, key, **kwargs):
diff --git a/src/sentry/integrations/vsts/search.py b/src/sentry/integrations/vsts/search.py
new file mode 100644
index 0000000000..b4f1619c64
--- /dev/null
+++ b/src/sentry/integrations/vsts/search.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationPermission
+from rest_framework.response import Response
+
+from sentry.models import Integration
+
+
+class VstsSearchEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationPermission, )
+
+    def get(self, request, organization, integration_id):
+        try:
+            integration = Integration.objects.get(
+                organizations=organization,
+                id=integration_id,
+                provider='vsts',
+            )
+        except Integration.DoesNotExist:
+            return Response(status=404)
+
+        field = request.GET.get('field')
+        query = request.GET.get('query')
+        if field is None:
+            return Response({'detail': 'field is a required parameter'}, status=400)
+        if not query:
+            return Response({'detail': 'query is a required parameter'}, status=400)
+
+        installation = integration.get_installation(organization.id)
+
+        if field == 'externalIssue':
+            if not query:
+                return Response([])
+
+            resp = installation.get_client().search_issues(integration.name, query)
+            return Response([{
+                'label': '(%s) %s' % (i['fields']['system.id'], i['fields']['system.title']),
+                'value': i['fields']['system.id'],
+            } for i in resp.get('results', [])])
+
+        return Response(status=400)
diff --git a/src/sentry/integrations/vsts/urls.py b/src/sentry/integrations/vsts/urls.py
index 349330c3cc..917d2abceb 100644
--- a/src/sentry/integrations/vsts/urls.py
+++ b/src/sentry/integrations/vsts/urls.py
@@ -1,8 +1,13 @@
 from __future__ import absolute_import, print_function
 
 from django.conf.urls import patterns, url
+from .search import VstsSearchEndpoint
 from .webhooks import WorkItemWebhook
 urlpatterns = patterns(
     '',
     url(r'^issue-updated/$', WorkItemWebhook.as_view(), name='sentry-extensions-vsts-issue-updated'),
+    url(r'^search/(?P<organization_slug>[^\/]+)/(?P<integration_id>\d+)/$',
+        VstsSearchEndpoint.as_view(),
+        name='sentry-extensions-vsts-search'
+        ),
 )
