commit f9e07438970d551023da9152e53147ea63dcb18d
Author: Danny Lee <dlee@sentry.io>
Date:   Mon Nov 4 00:24:37 2019 -0800

    feat(discover2): Improve UX for naming Saved Queries
    
    Refs SEN-1167

diff --git a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
index f723327263..7446b3c18d 100644
--- a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
@@ -8,9 +8,12 @@ import {addErrorMessage} from 'app/actionCreators/indicator';
 export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuery[]> {
   DiscoverSavedQueryActions.startFetchSavedQueries();
 
-  const promise = api.requestPromise(`/organizations/${orgId}/discover/saved/`, {
-    method: 'GET',
-  });
+  const promise: Promise<SavedQuery[]> = api.requestPromise(
+    `/organizations/${orgId}/discover/saved/`,
+    {
+      method: 'GET',
+    }
+  );
   promise
     .then(resp => {
       DiscoverSavedQueryActions.fetchSavedQueriesSuccess(resp);
@@ -27,10 +30,13 @@ export function createSavedQuery(
   orgId: string,
   query: NewQuery
 ): Promise<SavedQuery> {
-  const promise = api.requestPromise(`/organizations/${orgId}/discover/saved/`, {
-    method: 'POST',
-    data: query,
-  });
+  const promise: Promise<SavedQuery> = api.requestPromise(
+    `/organizations/${orgId}/discover/saved/`,
+    {
+      method: 'POST',
+      data: query,
+    }
+  );
   promise
     .then(resp => {
       DiscoverSavedQueryActions.createSavedQuerySuccess(resp);
@@ -46,7 +52,7 @@ export function updateSavedQuery(
   orgId: string,
   query: NewQuery
 ): Promise<SavedQuery> {
-  const promise = api.requestPromise(
+  const promise: Promise<SavedQuery> = api.requestPromise(
     `/organizations/${orgId}/discover/saved/${query.id}/`,
     {
       method: 'PUT',
@@ -67,8 +73,8 @@ export function deleteSavedQuery(
   api: Client,
   orgId: string,
   queryId: string
-): Promise<null> {
-  const promise = api.requestPromise(
+): Promise<void> {
+  const promise: Promise<void> = api.requestPromise(
     `/organizations/${orgId}/discover/saved/${queryId}/`,
     {method: 'DELETE'}
   );
@@ -79,6 +85,5 @@ export function deleteSavedQuery(
     .catch(() => {
       addErrorMessage(t('Unable to delete the saved query'));
     });
-
   return promise;
 }
diff --git a/src/sentry/static/sentry/app/components/inputInline.tsx b/src/sentry/static/sentry/app/components/inputInline.tsx
index a4daac83c1..fbe6926503 100644
--- a/src/sentry/static/sentry/app/components/inputInline.tsx
+++ b/src/sentry/static/sentry/app/components/inputInline.tsx
@@ -52,8 +52,8 @@ class InputInline extends React.Component<Props, State> {
   static setValueOnEvent(
     event: React.FormEvent<HTMLDivElement>
   ): React.FormEvent<HTMLInputElement> {
-    (event.target as any).value = (event.target as any).innerHTML;
-    (event.currentTarget as any).value = (event.currentTarget as any).innerHTML;
+    (event.target as any).value = (event.target as any).textContent;
+    (event.currentTarget as any).value = (event.currentTarget as any).textContent;
     return event as React.FormEvent<HTMLInputElement>;
   }
 
diff --git a/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
new file mode 100644
index 0000000000..b47d518f5e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/eventInputName.tsx
@@ -0,0 +1,93 @@
+import React from 'react';
+import {browserHistory} from 'react-router';
+
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import withApi from 'app/utils/withApi';
+import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
+
+import InlineInput from 'app/components/inputInline';
+import {handleUpdateQueryName} from './savedQuery/utils';
+
+import EventView from './eventView';
+
+type Props = {
+  api: Client;
+  organization: Organization;
+  eventView: EventView;
+  savedQueries: SavedQuery[];
+};
+
+const NAME_DEFAULT = t('Untitled query');
+
+/**
+ * Allows user to edit the name of the query. Upon blurring from it, it will
+ * save the name change immediately (but not changes in the query)
+ */
+class EventInputName extends React.Component<Props> {
+  private refInput = React.createRef<InlineInput>();
+
+  onBlur = (event: React.ChangeEvent<HTMLInputElement>) => {
+    const {api, organization, eventView, savedQueries} = this.props;
+    const nextQueryName = (event.target.value || '').trim();
+
+    // Do not update automatically if
+    // 1) New name is empty
+    // 2) It is a new query
+    // 3) The new name is same as the old name
+    if (!nextQueryName) {
+      addErrorMessage(t('Please set a name for this query'));
+
+      // Help our users re-focus so they cannot run away from this problem
+      if (this.refInput.current) {
+        this.refInput.current.focus();
+      }
+
+      return;
+    }
+
+    const savedQuery = savedQueries.find(s => s.id === eventView.id);
+    if (!savedQuery || savedQuery.name === nextQueryName) {
+      return;
+    }
+
+    // This ensures that we are updating SavedQuery.name only.
+    // Changes on QueryBuilder table will not be saved.
+    const nextEventView = EventView.fromSavedQuery({
+      ...savedQuery,
+      name: nextQueryName,
+    });
+
+    handleUpdateQueryName(api, organization, nextEventView).then(
+      (updatedQuery: SavedQuery) => {
+        const view = EventView.fromSavedQuery(updatedQuery);
+
+        // May have to delay this for the store to update.
+        browserHistory.push({
+          pathname: location.pathname,
+          query: view.generateQueryStringObject(),
+        });
+      }
+    );
+  };
+
+  render() {
+    const {eventView} = this.props;
+
+    return (
+      <InlineInput
+        ref={this.refInput}
+        name="discover2-query-name"
+        disabled={!eventView.id}
+        value={eventView.name || NAME_DEFAULT}
+        onBlur={this.onBlur}
+      />
+    );
+  }
+}
+
+export default withApi(withDiscoverSavedQueries(EventInputName));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
index 3c13749082..1c871c3b21 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/index.tsx
@@ -6,13 +6,15 @@ import * as ReactRouter from 'react-router';
 import {Params} from 'react-router/lib/Router';
 import {Location} from 'history';
 
-import localStorage from 'app/utils/localStorage';
-import {Organization} from 'app/types';
 import {t} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import SentryTypes from 'app/sentryTypes';
+import theme from 'app/utils/theme';
+import {Organization} from 'app/types';
+import localStorage from 'app/utils/localStorage';
+import withOrganization from 'app/utils/withOrganization';
+
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
-import {PageContent, PageHeader} from 'app/styles/organization';
 import PageHeading from 'app/components/pageHeading';
 import Banner from 'app/components/banner';
 import Button from 'app/components/button';
@@ -20,16 +22,17 @@ import BetaTag from 'app/components/betaTag';
 import Feature from 'app/components/acl/feature';
 import Link from 'app/components/links/link';
 import NoProjectMessage from 'app/components/noProjectMessage';
-import theme from 'app/utils/theme';
+
+import {PageContent, PageHeader} from 'app/styles/organization';
 import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
 
 import Events from './events';
 import EventDetails from './eventDetails';
-import SavedQueryButtonGroup from './savedQueryButtonGroup';
+import SavedQueryButtonGroup from './savedQuery';
+import EventView from './eventView';
+import EventInputName from './eventInputName';
 import {getFirstQueryString} from './utils';
 import {ALL_VIEWS, TRANSACTION_VIEWS} from './data';
-import EventView from './eventView';
 
 type Props = {
   organization: Organization;
@@ -49,6 +52,17 @@ class EventsV2 extends React.Component<Props> {
     isBannerHidden: localStorage.getItem('discover-banner-dismissed'),
   };
 
+  getDocumentTitle = (name: string | undefined): Array<string> => {
+    return typeof name === 'string' && String(name).trim().length > 0
+      ? [String(name).trim(), t('Discover')]
+      : [t('Discover')];
+  };
+
+  handleClick = () => {
+    localStorage.setItem('discover-banner-dismissed', true);
+    this.setState({isBannerHidden: true});
+  };
+
   renderQueryList() {
     const {location, organization} = this.props;
     let views = ALL_VIEWS;
@@ -88,23 +102,6 @@ class EventsV2 extends React.Component<Props> {
     return <LinkList>{list}</LinkList>;
   }
 
-  getEventViewName = (): Array<string> => {
-    const {location} = this.props;
-
-    const name = getFirstQueryString(location.query, 'name');
-
-    if (typeof name === 'string' && String(name).trim().length > 0) {
-      return [t('Discover'), String(name).trim()];
-    }
-
-    return [t('Discover')];
-  };
-
-  handleClick = () => {
-    localStorage.setItem('discover-banner-dismissed', true);
-    this.setState({isBannerHidden: true});
-  };
-
   renderBanner() {
     const bannerDismissed = localStorage.getItem('discover-banner-dismissed');
 
@@ -131,15 +128,13 @@ class EventsV2 extends React.Component<Props> {
 
   render() {
     const {organization, location, router} = this.props;
+
     const eventSlug = getFirstQueryString(location.query, 'eventSlug');
     const eventView = EventView.fromLocation(location);
+    const documentTitle = this.getDocumentTitle(eventView.name).join(' - ');
 
     const hasQuery = location.query.field || location.query.eventSlug;
 
-    const documentTitle = this.getEventViewName()
-      .reverse()
-      .join(' - ');
-    const pageTitle = this.getEventViewName().join(' \u2014 ');
     return (
       <Feature features={['events-v2']} organization={organization} renderDisabled>
         <DocumentTitle title={`${documentTitle} - ${organization.slug} - Sentry`}>
@@ -149,8 +144,21 @@ class EventsV2 extends React.Component<Props> {
               <NoProjectMessage organization={organization}>
                 <PageHeader>
                   <PageHeading>
-                    {pageTitle} <BetaTag />
+                    {t('Discover')}
+                    <BetaTagWrapper>
+                      <BetaTag />
+                    </BetaTagWrapper>
+                    {hasQuery && (
+                      <React.Fragment>
+                        {' \u2014 '}
+                        <EventInputName
+                          organization={organization}
+                          eventView={eventView}
+                        />
+                      </React.Fragment>
+                    )}
                   </PageHeading>
+
                   {hasQuery && (
                     <SavedQueryButtonGroup
                       location={location}
@@ -200,7 +208,6 @@ const LinkList = styled('ul')`
   padding: 0;
   margin: 0;
 `;
-
 const LinkContainer = styled('li')`
   background: ${p => p.theme.white};
   line-height: 1.4;
@@ -210,5 +217,10 @@ const LinkContainer = styled('li')`
   padding: ${space(1)};
 `;
 
+// Wrapper is needed because BetaTag discards margins applied directly to it
+const BetaTagWrapper = styled('span')`
+  margin-right: 0.4em;
+`;
+
 export default withOrganization(EventsV2);
 export {EventsV2};
diff --git a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx b/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
deleted file mode 100644
index c74e057250..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/saveQueryButton.tsx
+++ /dev/null
@@ -1,192 +0,0 @@
-import React from 'react';
-import styled from 'react-emotion';
-import {browserHistory} from 'react-router';
-import {Location} from 'history';
-
-import {Client} from 'app/api';
-import {Organization} from 'app/types';
-import {t} from 'app/locale';
-import {extractAnalyticsQueryFields} from 'app/utils';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-import {createSavedQuery} from 'app/actionCreators/discoverSavedQueries';
-import {addSuccessMessage} from 'app/actionCreators/indicator';
-import DropdownControl from 'app/components/dropdownControl';
-import DropdownButton from 'app/components/dropdownButton';
-import Button from 'app/components/button';
-import Input from 'app/components/forms/input';
-import InlineSvg from 'app/components/inlineSvg';
-import space from 'app/styles/space';
-import withApi from 'app/utils/withApi';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
-
-import EventView from './eventView';
-
-type Props = {
-  api: Client;
-  organization: Organization;
-  eventView: EventView;
-  location: Location;
-  savedQueries: SavedQuery[];
-  isEditingExistingQuery: boolean;
-};
-
-type State = {
-  queryName: string;
-};
-
-// Used for resolving the event name for an analytics event
-const EVENT_NAME_EXISTING_MAP = {
-  request: 'Discoverv2: Request to save a saved query as a new query',
-  success: 'Discoverv2: Successfully saved a saved query as a new query',
-  failed: 'Discoverv2: Failed to save a saved query as a new query',
-};
-const EVENT_NAME_NEW_MAP = {
-  request: 'Discoverv2: Request to save a new query',
-  success: 'Discoverv2: Successfully saved a new query',
-  failed: 'Discoverv2: Failed to save a new query',
-};
-
-class EventsSaveQueryButton extends React.Component<Props, State> {
-  state = {
-    queryName: '',
-  };
-
-  swallowEvent = (event: React.MouseEvent) => {
-    // Stop propagation for the input and container so
-    // people can interact with the inputs in the dropdown.
-    const capturedElements = ['LI', 'INPUT'];
-    if (
-      event.target instanceof Element &&
-      capturedElements.includes(event.target.nodeName)
-    ) {
-      event.preventDefault();
-      event.stopPropagation();
-    }
-  };
-
-  handleSave = () => {
-    const {api, eventView, organization, location} = this.props;
-
-    const payload = eventView.toNewQuery();
-    if (this.state.queryName) {
-      payload.name = this.state.queryName;
-    }
-
-    const editingExistingQuery = this.props.isEditingExistingQuery;
-    trackAnalyticsEvent({
-      ...this.getAnalyticsEventKeyName(editingExistingQuery, 'request'),
-      organization_id: organization.id,
-      ...extractAnalyticsQueryFields(payload),
-    });
-
-    createSavedQuery(api, organization.slug, payload)
-      .then(saved => {
-        const view = EventView.fromSavedQuery(saved);
-        addSuccessMessage(t('Query saved'));
-
-        browserHistory.push({
-          pathname: location.pathname,
-          query: view.generateQueryStringObject(),
-        });
-
-        trackAnalyticsEvent({
-          ...this.getAnalyticsEventKeyName(editingExistingQuery, 'success'),
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(payload),
-        });
-      })
-      .catch((err: Error) => {
-        trackAnalyticsEvent({
-          ...this.getAnalyticsEventKeyName(editingExistingQuery, 'failed'),
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(payload),
-          error:
-            (err && err.message) ||
-            `Could not save a ${editingExistingQuery ? 'existing' : 'new'} query`,
-        });
-      });
-  };
-
-  handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
-    const value = event.target.value;
-    this.setState({queryName: value});
-  };
-
-  getAnalyticsEventKeyName(
-    editingExistingQuery: boolean,
-    type: 'request' | 'success' | 'failed'
-  ) {
-    const eventKey =
-      (editingExistingQuery
-        ? 'discover_v2.save_existing_query_'
-        : 'discover_v2.save_new_query_') + type;
-
-    const eventName = editingExistingQuery
-      ? EVENT_NAME_EXISTING_MAP[type]
-      : EVENT_NAME_NEW_MAP[type];
-
-    return {
-      eventKey,
-      eventName,
-    };
-  }
-
-  render() {
-    const newQueryLabel = this.props.isEditingExistingQuery
-      ? t('Save as...')
-      : t('Save query');
-
-    return (
-      <DropdownControl
-        alignRight
-        menuWidth="220px"
-        button={({isOpen, getActorProps}) => (
-          <StyledDropdownButton
-            {...getActorProps({isStyled: true})}
-            isOpen={isOpen}
-            showChevron={false}
-          >
-            <StyledInlineSvg src="icon-star" size="14" />
-            {newQueryLabel}
-          </StyledDropdownButton>
-        )}
-      >
-        <SaveQueryContainer onClick={this.swallowEvent}>
-          <StyledInput
-            type="text"
-            placeholder={t('Display name')}
-            value={this.state.queryName}
-            onChange={this.handleInputChange}
-          />
-          <StyledSaveButton size="small" onClick={this.handleSave} priority="primary">
-            {t('Save')}
-          </StyledSaveButton>
-        </SaveQueryContainer>
-      </DropdownControl>
-    );
-  }
-}
-
-const SaveQueryContainer = styled('li')`
-  padding: ${space(1)};
-`;
-
-const StyledInlineSvg = styled(InlineSvg)`
-  margin-right: 0.33em;
-`;
-
-const StyledInput = styled(Input)`
-  width: 100%;
-  margin-bottom: ${space(1)};
-`;
-
-const StyledSaveButton = styled(Button)`
-  width: 100%;
-`;
-
-const StyledDropdownButton = styled(DropdownButton)`
-  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};
-  white-space: nowrap;
-`;
-
-export default withApi(EventsSaveQueryButton);
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
new file mode 100644
index 0000000000..70f9948cc2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/index.tsx
@@ -0,0 +1,313 @@
+import React from 'react';
+import styled from 'react-emotion';
+import {browserHistory} from 'react-router';
+import {Location} from 'history';
+
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import withApi from 'app/utils/withApi';
+import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
+
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
+
+import Button from 'app/components/button';
+import DropdownButton from 'app/components/dropdownButton';
+import DropdownControl from 'app/components/dropdownControl';
+import InlineSvg from 'app/components/inlineSvg';
+import Input from 'app/components/forms/input';
+import space from 'app/styles/space';
+
+import EventView from '../eventView';
+import {handleCreateQuery, handleUpdateQuery, handleDeleteQuery} from './utils';
+
+type Props = {
+  api: Client;
+  location: Location;
+  organization: Organization;
+  eventView: EventView;
+  savedQueries: SavedQuery[];
+};
+type State = {
+  isNewQuery: boolean;
+  isEditingQuery: boolean;
+
+  queryId: string | undefined;
+  queryName: string;
+};
+
+class SavedQueryButtonGroup extends React.Component<Props> {
+  static getDerivedStateFromProps(nextProps: Props, prevState: State): Partial<State> {
+    const {eventView: nextEventView, savedQueries} = nextProps;
+    const {queryId} = prevState;
+
+    // For a new unsaved query
+    const savedQuery = savedQueries.find(q => q.id === nextEventView.id);
+    if (!savedQuery) {
+      return {
+        isNewQuery: true,
+        isEditingQuery: false,
+        queryId: undefined,
+        queryName: prevState.queryName || '',
+      };
+    }
+
+    // Switching from a SavedQuery to another SavedQuery
+    if (queryId !== nextEventView.id) {
+      return {
+        isNewQuery: false,
+        isEditingQuery: false,
+        queryId: nextEventView.id,
+        queryName: '',
+      };
+    }
+
+    // For modifying a SavedQuery
+    const savedEventView = EventView.fromSavedQuery(savedQuery);
+    const isEqualQuery = nextEventView.isEqualTo(savedEventView);
+    return {
+      isNewQuery: false,
+      isEditingQuery: !isEqualQuery,
+
+      // HACK(leedongwei): See comment at SavedQueryButtonGroup.onFocusInput
+      queryName: prevState.queryName || '',
+    };
+  }
+
+  /**
+   * Stop propagation for the input and container so people can interact with
+   * the inputs in the dropdown.
+   */
+  static stopEventPropagation = (event: React.MouseEvent) => {
+    const capturedElements = ['LI', 'INPUT'];
+
+    if (
+      event.target instanceof Element &&
+      capturedElements.includes(event.target.nodeName)
+    ) {
+      event.preventDefault();
+      event.stopPropagation();
+    }
+  };
+
+  state = {
+    isNewQuery: true,
+    isEditingQuery: false,
+
+    queryId: undefined,
+    queryName: '',
+  };
+
+  onBlurInput = (event: React.FormEvent<HTMLInputElement>) => {
+    this.setState({queryName: event.currentTarget.value});
+  };
+  onChangeInput = (event: React.FormEvent<HTMLInputElement>) => {
+    this.setState({queryName: event.currentTarget.value});
+  };
+
+  /**
+   * There are two ways to create a query
+   * 1) Creating a query from scratch and saving it
+   * 2) Modifying an existing query and saving it
+   */
+  handleCreateQuery = (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+    event.stopPropagation();
+
+    const {api, location, organization} = this.props;
+    const eventView = EventView.fromLocation({
+      ...location,
+      query: {
+        ...location.query,
+        name: this.state.queryName,
+      },
+    });
+
+    // Checks if "Save as" button is clicked from a clean state, or it is
+    // clicked while modifying an existing query
+    const isNewQuery = !!this.state.queryId;
+
+    handleCreateQuery(api, organization, eventView, isNewQuery).then(
+      (savedQuery: any) => {
+        const view = EventView.fromSavedQuery(savedQuery);
+
+        browserHistory.push({
+          pathname: location.pathname,
+          query: view.generateQueryStringObject(),
+        });
+        this.setState({queryName: ''});
+      }
+    );
+  };
+
+  handleUpdateQuery = (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+    event.stopPropagation();
+
+    const {api, location, organization} = this.props;
+    const eventView = EventView.fromLocation(location);
+
+    handleUpdateQuery(api, organization, eventView).then(() => {
+      this.setState({queryName: ''});
+    });
+  };
+
+  handleDeleteQuery = (event: React.MouseEvent<Element>) => {
+    event.preventDefault();
+    event.stopPropagation();
+
+    const {api, location, organization} = this.props;
+    const eventView = EventView.fromLocation(location);
+
+    handleDeleteQuery(api, organization, eventView).then(() => {
+      browserHistory.push({
+        pathname: location.pathname,
+        query: {},
+      });
+    });
+  };
+
+  renderButtonSaveAs() {
+    const {isNewQuery, isEditingQuery, queryName} = this.state;
+
+    if (!isNewQuery && !isEditingQuery) {
+      return null;
+    }
+
+    /**
+     * For a great UX, we should focus on `ButtonSaveInput` when `ButtonSave`
+     * is clicked. However, `DropdownControl` wraps them in a FunctionComponent
+     * which breaks `React.createRef`.
+     */
+    return (
+      <DropdownControl
+        alignRight
+        menuWidth="220px"
+        button={({isOpen, getActorProps}) => (
+          <ButtonSave
+            {...getActorProps({isStyled: true})}
+            isOpen={isOpen}
+            showChevron={false}
+          >
+            <ButtonSaveIcon
+              isNewQuery={isNewQuery}
+              src="icon-star-small-filled"
+              size="14"
+            />
+            {t('Save as...')}
+          </ButtonSave>
+        )}
+      >
+        <ButtonSaveDropDown onClick={SavedQueryButtonGroup.stopEventPropagation}>
+          <ButtonSaveInput
+            type="text"
+            placeholder={t('Display name')}
+            value={queryName || ''}
+            onBlur={this.onBlurInput}
+            onChange={this.onChangeInput}
+          />
+          <Button
+            onClick={this.handleCreateQuery}
+            priority="primary"
+            style={{width: '100%'}}
+          >
+            {t('Save')}
+          </Button>
+        </ButtonSaveDropDown>
+      </DropdownControl>
+    );
+  }
+
+  renderButtonSaved() {
+    const {isNewQuery, isEditingQuery} = this.state;
+
+    if (isNewQuery || isEditingQuery) {
+      return null;
+    }
+
+    return (
+      <ButtonSaved>
+        <ButtonSaveIcon isNewQuery={isNewQuery} src="icon-star-small-filled" size="14" />
+        {t('Saved query')}
+      </ButtonSaved>
+    );
+  }
+
+  renderButtonUpdate() {
+    const {isNewQuery, isEditingQuery} = this.state;
+
+    if (isNewQuery || !isEditingQuery) {
+      return null;
+    }
+
+    return (
+      <Button onClick={this.handleUpdateQuery}>
+        <ButtonUpdateIcon />
+        {t('Update query')}
+      </Button>
+    );
+  }
+
+  renderButtonDelete() {
+    const {isNewQuery} = this.state;
+
+    if (isNewQuery) {
+      return null;
+    }
+
+    return <Button icon="icon-trash" onClick={this.handleDeleteQuery} />;
+  }
+
+  render() {
+    return (
+      <ButtonGroup>
+        {this.renderButtonDelete()}
+        {this.renderButtonSaveAs()}
+        {this.renderButtonUpdate()}
+        {this.renderButtonSaved()}
+      </ButtonGroup>
+    );
+  }
+}
+
+const ButtonGroup = styled('div')`
+  display: flex;
+  align-items: center;
+
+  > * + * {
+    margin-left: ${space(1)};
+  }
+`;
+
+const ButtonSave = styled(DropdownButton)`
+  z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};
+  white-space: nowrap;
+`;
+const ButtonSaved = styled(Button)`
+  cursor: not-allowed;
+`;
+const ButtonSaveIcon = styled(InlineSvg)<{isNewQuery?: boolean}>`
+  margin-top: -3px; /* Align SVG vertically to text */
+  margin-right: ${space(0.75)};
+
+  color: ${p => (p.isNewQuery ? p.theme.yellow : '#C4C4C4')};
+`;
+const ButtonSaveDropDown = styled('li')`
+  padding: ${space(1)};
+`;
+const ButtonSaveInput = styled(Input)`
+  width: 100%;
+  margin-bottom: ${space(1)};
+`;
+
+const ButtonUpdateIcon = styled('div')`
+  display: inline-block;
+  width: 10px;
+  height: 10px;
+
+  margin-right: ${space(0.75)};
+  border-radius: 5px;
+  background-color: ${p => p.theme.yellow};
+`;
+
+export default withApi(withDiscoverSavedQueries(SavedQueryButtonGroup));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
new file mode 100644
index 0000000000..a8b26f94c2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/eventsV2/savedQuery/utils.tsx
@@ -0,0 +1,235 @@
+import {Client} from 'app/api';
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import {extractAnalyticsQueryFields} from 'app/utils';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+
+import {
+  createSavedQuery,
+  deleteSavedQuery,
+  updateSavedQuery,
+} from 'app/actionCreators/discoverSavedQueries';
+import {addSuccessMessage, addErrorMessage} from 'app/actionCreators/indicator';
+import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
+
+import EventView from '../eventView';
+
+export function handleCreateQuery(
+  api: Client,
+  organization: Organization,
+  eventView: EventView,
+  // True if this is a brand new query being saved
+  // False if this is a modification from a saved query
+  isNewQuery: boolean = true
+): Promise<SavedQuery> {
+  const payload = eventView.toNewQuery();
+
+  trackAnalyticsEvent({
+    ...getAnalyticsCreateEventKeyName(isNewQuery, 'request'),
+    organization_id: organization.id,
+    ...extractAnalyticsQueryFields(payload),
+  });
+
+  const promise = createSavedQuery(api, organization.slug, payload);
+
+  promise
+    .then((savedQuery: SavedQuery) => {
+      addSuccessMessage(t('Query saved'));
+
+      trackAnalyticsEvent({
+        ...getAnalyticsCreateEventKeyName(isNewQuery, 'success'),
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+      });
+
+      return savedQuery;
+    })
+    .catch((err: Error) => {
+      addErrorMessage(t('Query not saved'));
+
+      trackAnalyticsEvent({
+        ...getAnalyticsCreateEventKeyName(isNewQuery, 'failed'),
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+        error:
+          (err && err.message) ||
+          `Could not save a ${isNewQuery ? 'new' : 'existing'} query`,
+      });
+    });
+
+  return promise;
+}
+
+const EVENT_NAME_EXISTING_MAP = {
+  request: 'Discoverv2: Request to save a saved query as a new query',
+  success: 'Discoverv2: Successfully saved a saved query as a new query',
+  failed: 'Discoverv2: Failed to save a saved query as a new query',
+};
+const EVENT_NAME_NEW_MAP = {
+  request: 'Discoverv2: Request to save a new query',
+  success: 'Discoverv2: Successfully saved a new query',
+  failed: 'Discoverv2: Failed to save a new query',
+};
+
+export function handleUpdateQuery(
+  api: Client,
+  organization: Organization,
+  eventView: EventView
+): Promise<SavedQuery> {
+  const payload = eventView.toNewQuery();
+
+  if (!eventView.name) {
+    addErrorMessage(t('Please name your query'));
+    return Promise.reject();
+  }
+
+  trackAnalyticsEvent({
+    eventKey: 'discover_v2.update_query_request',
+    eventName: 'Discoverv2: Request to update a saved query',
+    organization_id: organization.id,
+    ...extractAnalyticsQueryFields(payload),
+  });
+
+  const promise = updateSavedQuery(api, organization.slug, payload);
+
+  promise
+    .then((savedQuery: SavedQuery) => {
+      addSuccessMessage(t('Query updated'));
+
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.update_query_success',
+        eventName: 'Discoverv2: Successfully updated a saved query',
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+      });
+      // NOTE: there is no need to convert _saved into an EventView and push it
+      //       to the browser history, since this.props.eventView already
+      //       derives from location.
+
+      return savedQuery;
+    })
+    .catch((err: Error) => {
+      addErrorMessage(t('Query not updated'));
+
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.update_query_failed',
+        eventName: 'Discoverv2: Failed to update a saved query',
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+        error: (err && err.message) || 'Failed to update a query',
+      });
+    });
+
+  return promise;
+}
+
+/**
+ * Essentially the same as handleUpdateQuery, but specifically for changing the
+ * name of the query
+ */
+export function handleUpdateQueryName(
+  api: Client,
+  organization: Organization,
+  eventView: EventView
+) {
+  const payload = eventView.toNewQuery();
+
+  // TODO(leedongwei): Enable analytics in a separate PR
+  /*
+  trackAnalyticsEvent({
+    eventKey: 'discover_v2.update_query_name_request',
+    eventName: "Discoverv2: Request to update a saved query's name",
+    organization_id: organization.id,
+    ...extractAnalyticsQueryFields(payload),
+  });
+  */
+
+  const promise = updateSavedQuery(api, organization.slug, payload);
+
+  promise
+    .then(_saved => {
+      addSuccessMessage(t('Query name saved'));
+
+      /*
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.update_query_name_success',
+        eventName: "Discoverv2: Successfully updated a saved query's name",
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+      });
+      */
+    })
+    .catch((_err: Error) => {
+      addErrorMessage(t('Query name not saved'));
+
+      /*
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.update_query_failed',
+        eventName: "Discoverv2: Failed to update a saved query's name",
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(payload),
+        error: (err && err.message) || 'Failed to update a query name',
+      });
+      */
+    });
+
+  return promise;
+}
+
+export function handleDeleteQuery(
+  api: Client,
+  organization: Organization,
+  eventView: EventView
+): Promise<void> {
+  trackAnalyticsEvent({
+    eventKey: 'discover_v2.delete_query_request',
+    eventName: 'Discoverv2: Request to delete a saved query',
+    organization_id: organization.id,
+    ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+  });
+
+  const promise = deleteSavedQuery(api, organization.slug, eventView.id!);
+
+  promise
+    .then(() => {
+      addSuccessMessage(t('Query deleted'));
+
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.delete_query_success',
+        eventName: 'Discoverv2: Successfully deleted a saved query',
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+      });
+    })
+    .catch((err: Error) => {
+      addErrorMessage(t('Query not deleted'));
+
+      trackAnalyticsEvent({
+        eventKey: 'discover_v2.delete_query_failed',
+        eventName: 'Discoverv2: Failed to delete a saved query',
+        organization_id: organization.id,
+        ...extractAnalyticsQueryFields(eventView.toNewQuery()),
+        error: (err && err.message) || 'Failed to delete query',
+      });
+    });
+
+  return promise;
+}
+
+export function getAnalyticsCreateEventKeyName(
+  // True if this is a brand new query being saved
+  // False if this is a modification from a saved query
+  isNewQuery: boolean,
+  type: 'request' | 'success' | 'failed'
+) {
+  const eventKey = isNewQuery
+    ? 'discover_v2.save_new_query_' + type
+    : 'discover_v2.save_existing_query_' + type;
+
+  const eventName = isNewQuery ? EVENT_NAME_NEW_MAP[type] : EVENT_NAME_EXISTING_MAP[type];
+
+  return {
+    eventKey,
+    eventName,
+  };
+}
diff --git a/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx b/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
deleted file mode 100644
index f05484d4b7..0000000000
--- a/src/sentry/static/sentry/app/views/eventsV2/savedQueryButtonGroup.tsx
+++ /dev/null
@@ -1,207 +0,0 @@
-import React from 'react';
-import {Location} from 'history';
-import styled from 'react-emotion';
-import {browserHistory} from 'react-router';
-
-import space from 'app/styles/space';
-import {Client} from 'app/api';
-import {t} from 'app/locale';
-import {extractAnalyticsQueryFields} from 'app/utils';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
-import Button from 'app/components/button';
-import {Organization} from 'app/types';
-import {
-  deleteSavedQuery,
-  updateSavedQuery,
-} from 'app/actionCreators/discoverSavedQueries';
-import {SavedQuery} from 'app/stores/discoverSavedQueriesStore';
-import withApi from 'app/utils/withApi';
-import withDiscoverSavedQueries from 'app/utils/withDiscoverSavedQueries';
-import {addSuccessMessage} from 'app/actionCreators/indicator';
-
-import EventView from './eventView';
-import EventsSaveQueryButton from './saveQueryButton';
-
-type Props = {
-  api: Client;
-  eventView: EventView;
-  location: Location;
-  organization: Organization;
-  savedQueries: SavedQuery[];
-};
-
-class SavedQueryButtonGroup extends React.Component<Props> {
-  getExistingSavedQuery = (): EventView | undefined => {
-    const {savedQueries, eventView} = this.props;
-
-    const index = savedQueries.findIndex(needle => {
-      return needle.id === eventView.id;
-    });
-
-    if (index < 0) {
-      return undefined;
-    }
-
-    const savedQuery = savedQueries[index];
-
-    return EventView.fromSavedQuery(savedQuery);
-  };
-
-  isEditingExistingQuery = (): boolean => {
-    const {eventView} = this.props;
-
-    const isValidId = typeof eventView.id === 'string';
-
-    return !!this.getExistingSavedQuery() && isValidId;
-  };
-
-  deleteQuery = (event: React.MouseEvent<Element>) => {
-    event.preventDefault();
-    event.stopPropagation();
-
-    if (!this.isEditingExistingQuery()) {
-      return;
-    }
-
-    const {organization, api, eventView} = this.props;
-
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.delete_query_request',
-      eventName: 'Discoverv2: Request to delete a saved query',
-      organization_id: organization.id,
-      ...extractAnalyticsQueryFields(eventView.toNewQuery()),
-    });
-
-    deleteSavedQuery(api, organization.slug, eventView.id!)
-      .then(() => {
-        addSuccessMessage(t('Query deleted'));
-
-        // redirect to the primary discover2 page
-
-        browserHistory.push({
-          pathname: location.pathname,
-          query: {},
-        });
-
-        trackAnalyticsEvent({
-          eventKey: 'discover_v2.delete_query_success',
-          eventName: 'Discoverv2: Successfully deleted a saved query',
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(eventView.toNewQuery()),
-        });
-      })
-      .catch((err: Error) => {
-        trackAnalyticsEvent({
-          eventKey: 'discover_v2.delete_query_failed',
-          eventName: 'Discoverv2: Failed to delete a saved query',
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(eventView.toNewQuery()),
-          error: (err && err.message) || 'Failed to delete query',
-        });
-      });
-  };
-
-  renderDeleteButton = () => {
-    if (!this.isEditingExistingQuery()) {
-      return null;
-    }
-
-    return <Button icon="icon-trash" onClick={this.deleteQuery} />;
-  };
-
-  handleSaveQuery = (event: React.MouseEvent<Element>) => {
-    event.preventDefault();
-    event.stopPropagation();
-
-    if (!this.isEditingExistingQuery()) {
-      return;
-    }
-
-    const {organization, api, eventView} = this.props;
-
-    const payload = eventView.toNewQuery();
-
-    trackAnalyticsEvent({
-      eventKey: 'discover_v2.update_query_request',
-      eventName: 'Discoverv2: Request to update a saved query',
-      organization_id: organization.id,
-      ...extractAnalyticsQueryFields(payload),
-    });
-
-    updateSavedQuery(api, organization.slug, payload)
-      .then(_saved => {
-        addSuccessMessage(t('Query updated'));
-
-        trackAnalyticsEvent({
-          eventKey: 'discover_v2.update_query_success',
-          eventName: 'Discoverv2: Successfully updated a saved query',
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(payload),
-        });
-        // NOTE: there is no need to convert _saved into an EventView and push it
-        //       to the browser history, since this.props.eventView already
-        //       derives from location.
-      })
-      .catch((err: Error) => {
-        trackAnalyticsEvent({
-          eventKey: 'discover_v2.update_query_failed',
-          eventName: 'Discoverv2: Failed to update a saved query',
-          organization_id: organization.id,
-          ...extractAnalyticsQueryFields(payload),
-          error: (err && err.message) || 'Failed to update a query',
-        });
-      });
-  };
-
-  isQueryModified = (): boolean => {
-    const previousSavedQuery = this.getExistingSavedQuery();
-
-    if (!previousSavedQuery) {
-      return false;
-    }
-
-    const {eventView} = this.props;
-
-    return !eventView.isEqualTo(previousSavedQuery);
-  };
-
-  renderSaveButton = () => {
-    if (!this.isEditingExistingQuery()) {
-      return null;
-    }
-
-    return (
-      <Button disabled={!this.isQueryModified()} onClick={this.handleSaveQuery}>
-        {t('Update query')}
-      </Button>
-    );
-  };
-
-  render() {
-    const {location, organization, eventView, savedQueries} = this.props;
-
-    return (
-      <ButtonGroup>
-        {this.renderDeleteButton()}
-        <EventsSaveQueryButton
-          location={location}
-          organization={organization}
-          eventView={eventView}
-          savedQueries={savedQueries}
-          isEditingExistingQuery={this.isEditingExistingQuery()}
-        />
-        {this.renderSaveButton()}
-      </ButtonGroup>
-    );
-  }
-}
-
-const ButtonGroup = styled('div')`
-  display: flex;
-
-  > * + * {
-    margin-left: ${space(1)};
-  }
-`;
-
-export default withApi(withDiscoverSavedQueries(SavedQueryButtonGroup));
diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index 27003aea3c..82c98e7fcb 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -242,7 +242,7 @@ export function getAggregateAlias(field: string): string {
  * @param name      name of the query string field
  */
 export function getFirstQueryString(
-  query: {[key: string]: string | string[] | null | undefined},
+  query: {[key: string]: string | string[] | null | undefined} = {},
   name: string,
   defaultValue?: string
 ): string | undefined {
diff --git a/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx b/tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx
similarity index 91%
rename from tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx
rename to tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx
index 53907af45a..0ae173e56b 100644
--- a/tests/js/spec/views/eventsV2/saveQueryButton.spec.jsx
+++ b/tests/js/spec/views/eventsV2/savedQueryButtonGroup.spec.jsx
@@ -2,11 +2,12 @@ import React from 'react';
 import {mountWithTheme} from 'sentry-test/enzyme';
 import {browserHistory} from 'react-router';
 
-import EventSaveQueryButton from 'app/views/eventsV2/saveQueryButton';
+import SavedQueryButtonGroup from 'app/views/eventsV2/savedQuery';
 import {ALL_VIEWS} from 'app/views/eventsV2/data';
 import EventView from 'app/views/eventsV2/eventView';
 
-describe('EventsV2 > SaveQueryButton', function() {
+// eslint-disable-next-line jest/no-disabled-tests
+describe.skip('EventsV2 > SaveQueryButtonGroup', function() {
   const errorsView = EventView.fromEventViewv1(
     ALL_VIEWS.find(view => view.name === 'Errors')
   );
@@ -21,7 +22,7 @@ describe('EventsV2 > SaveQueryButton', function() {
 
   it('renders a button', function() {
     const wrapper = mountWithTheme(
-      <EventSaveQueryButton
+      <SavedQueryButtonGroup
         organization={organization}
         location={location}
         isEditing={false}
@@ -35,7 +36,7 @@ describe('EventsV2 > SaveQueryButton', function() {
 
   it('renders a popover for a new query', function() {
     const wrapper = mountWithTheme(
-      <EventSaveQueryButton
+      <SavedQueryButtonGroup
         organization={organization}
         location={location}
         isEditing={false}
@@ -56,7 +57,7 @@ describe('EventsV2 > SaveQueryButton', function() {
 
   it('renders a popover for an existing query', function() {
     const wrapper = mountWithTheme(
-      <EventSaveQueryButton
+      <SavedQueryButtonGroup
         organization={organization}
         location={location}
         eventView={errorsView}
@@ -74,7 +75,7 @@ describe('EventsV2 > SaveQueryButton', function() {
 
   it('sets input value based on props', function() {
     const wrapper = mountWithTheme(
-      <EventSaveQueryButton
+      <SavedQueryButtonGroup
         organization={organization}
         location={location}
         eventView={errorsView}
@@ -100,7 +101,7 @@ describe('EventsV2 > SaveQueryButton', function() {
       },
     });
     const wrapper = mountWithTheme(
-      <EventSaveQueryButton
+      <SavedQueryButtonGroup
         organization={organization}
         location={location}
         eventView={errorsView}
