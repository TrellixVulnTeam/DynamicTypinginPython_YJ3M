commit d62557e915f1a8e929e0328b8a0939eb4252813b
Author: Dena Mwangi <dena@getsentry.com>
Date:   Thu Jul 12 12:54:43 2018 -0700

    chore(js): Export jquery setup before send  (#9010)
    
    * refactor and export jquery setup before send

diff --git a/src/sentry/static/sentry/app/index.js b/src/sentry/static/sentry/app/index.js
index bac886d720..b89ed24c23 100644
--- a/src/sentry/static/sentry/app/index.js
+++ b/src/sentry/static/sentry/app/index.js
@@ -19,25 +19,16 @@ import moment from 'moment';
 
 import 'app/utils/emotion-setup';
 
-import {CSRF_COOKIE_NAME} from 'app/constants';
 import Main from 'app/main';
 import * as api from 'app/api';
-import getCookie from 'app/utils/getCookie';
+import ajaxCsrfSetup from 'app/utils/ajaxCsrfSetup';
 import * as il8n from 'app/locale';
 import plugins from 'app/plugins';
 
-function csrfSafeMethod(method) {
-  // these HTTP methods do not require CSRF protection
-  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
-}
-
 // setup jquery for CSRF tokens
 jQuery.ajaxSetup({
-  beforeSend: function(xhr, settings) {
-    if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
-      xhr.setRequestHeader('X-CSRFToken', getCookie(CSRF_COOKIE_NAME));
-    }
-  },
+  //jQuery won't allow using the ajaxCsrfSetup function directly
+  beforeSend: ajaxCsrfSetup,
 });
 
 // these get exported to a global variable, which is important as its the only
@@ -174,6 +165,7 @@ export default {
     theme: require('app/utils/theme').default,
     utils: {
       errorHandler: require('app/utils/errorHandler').default,
+      ajaxCsrfSetup: require('app/utils/ajaxCsrfSetup').default,
       logging: require('app/utils/logging'),
     },
   },
diff --git a/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx b/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx
new file mode 100644
index 0000000000..c7da981452
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/ajaxCsrfSetup.jsx
@@ -0,0 +1,13 @@
+import getCookie from 'app/utils/getCookie';
+import {CSRF_COOKIE_NAME} from 'app/constants';
+
+function csrfSafeMethod(method) {
+  // these HTTP methods do not require CSRF protection
+  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);
+}
+
+export default function ajaxCsrfSetup(xhr, settings) {
+  if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
+    xhr.setRequestHeader('X-CSRFToken', getCookie(CSRF_COOKIE_NAME));
+  }
+}
