commit ee2b9283c708672c310b8e08067c735b392d16df
Author: Danny Lee <dlee@sentry.io>
Date:   Tue Dec 17 16:52:00 2019 -0800

    feat(discover2): Move buttons to add/edit columns out of the Grid (#15690)
    
    - This commit is part of a series of small changes that'll bring the table UIUX closer to its intended design
    - This commit is dependent on #15682 to be merged

diff --git a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
index 4b2b3f1d4d..45807afd75 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/gridHeadCell.tsx
@@ -13,7 +13,6 @@ import {
   GridHeadCellResizer,
 } from './styles';
 import {GridColumnHeader} from './types';
-import AddColumnButton from './addColumnButton';
 
 export type GridHeadCellProps<Column> = {
   isColumnDragging: boolean;
@@ -132,31 +131,6 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
     return <GridHeadCellResizer isEditing={isEditing} />;
   };
 
-  renderAddColumnButton = () => {
-    const {
-      isEditing,
-      isLast,
-      openModalAddColumnAt,
-      indexColumnOrder,
-      isColumnDragging,
-    } = this.props;
-
-    if (isLast || !isEditing || isColumnDragging) {
-      return null;
-    }
-
-    return (
-      <AddColumnButton
-        align="right"
-        onClick={() => {
-          const insertIndex = indexColumnOrder + 1;
-          openModalAddColumnAt(insertIndex);
-        }}
-        data-test-id={`grid-add-column-${indexColumnOrder}`}
-      />
-    );
-  };
-
   render() {
     const {isEditing, children, column, gridHeadCellButtonProps} = this.props;
 
@@ -179,7 +153,6 @@ class GridHeadCell<Column extends GridColumnHeader> extends React.Component<
           to ensure that it is will always
           float on top of everything else */
         this.renderResizeGrabbable()}
-        {this.renderAddColumnButton()}
       </GridHeadCellWrapper>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index b706bd4b05..d54149960b 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -6,7 +6,6 @@ import {openModal} from 'app/actionCreators/modal';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import InlineSvg from 'app/components/inlineSvg';
 import LoadingContainer from 'app/components/loading/loadingContainer';
-import ToolTip from 'app/components/tooltip';
 
 import {
   GridColumn,
@@ -17,10 +16,11 @@ import {
 } from './types';
 import GridHeadCell from './gridHeadCell';
 import GridModalEditColumn from './gridModalEditColumn';
-import AddColumnButton from './addColumnButton';
 import {
-  GridPanel,
-  GridPanelBody,
+  Header,
+  HeaderTitle,
+  HeaderButton,
+  Body,
   Grid,
   GridRow,
   GridHead,
@@ -29,8 +29,6 @@ import {
   GridBodyCellSpan,
   GridBodyCellLoading,
   GridBodyErrorAlert,
-  GridEditGroup,
-  GridEditGroupButton,
 } from './styles';
 
 type GridEditableProps<DataRow, ColumnKey> = {
@@ -52,6 +50,7 @@ type GridEditableProps<DataRow, ColumnKey> = {
    * - `columnSortBy` is not used at the moment, however it might be better to
    *   move sorting into Grid for performance
    */
+  title?: string;
   columnOrder: GridColumnOrder<ColumnKey>[];
   columnSortBy: GridColumnSortBy<ColumnKey>[];
   data: DataRow[];
@@ -141,7 +140,14 @@ class GridEditable<
     this.setState({isEditing: nextValue});
   };
 
-  openModalAddColumnAt = (insertIndex: number) => {
+  /**
+   * Leave `insertIndex` as undefined to add new column to the end.
+   */
+  openModalAddColumnAt = (insertIndex: number = -1) => {
+    if (insertIndex < 0) {
+      insertIndex = this.props.columnOrder.length;
+    }
+
     return this.toggleModalEditColumn(insertIndex);
   };
 
@@ -149,174 +155,109 @@ class GridEditable<
     indexColumnOrder?: number,
     column?: GridColumn<ColumnKey>
   ): void => {
-    if (this.state.isEditing) {
-      const {modalEditColumn} = this.props;
-
-      openModal(openModalProps => (
-        <GridModalEditColumn
-          {...openModalProps}
-          indexColumnOrder={indexColumnOrder}
-          column={column}
-          renderBodyWithForm={modalEditColumn.renderBodyWithForm}
-          renderFooter={modalEditColumn.renderFooter}
-        />
-      ));
-    }
+    const {modalEditColumn} = this.props;
+
+    openModal(openModalProps => (
+      <GridModalEditColumn
+        {...openModalProps}
+        indexColumnOrder={indexColumnOrder}
+        column={column}
+        renderBodyWithForm={modalEditColumn.renderBodyWithForm}
+        renderFooter={modalEditColumn.renderFooter}
+      />
+    ));
   };
 
-  renderError = () => {
-    const {error} = this.props;
+  renderHeaderButton = () => {
+    if (!this.props.isEditable) {
+      return null;
+    }
 
     return (
-      <React.Fragment>
-        <GridPanel>
-          <Grid
-            isEditable={this.props.isEditable}
-            isEditing={this.state.isEditing}
-            numColumn={this.state.numColumn}
-          >
-            {this.renderGridHead()}
-            <GridBody>
-              <GridRow>
-                <GridBodyCellSpan>
-                  <GridBodyErrorAlert type="error" icon="icon-circle-exclamation">
-                    {error}
-                  </GridBodyErrorAlert>
-                </GridBodyCellSpan>
-              </GridRow>
-            </GridBody>
-          </Grid>
-        </GridPanel>
-      </React.Fragment>
+      <HeaderButton
+        onClick={() => this.openModalAddColumnAt()}
+        data-test-id="grid-add-column"
+      >
+        <InlineSvg src="icon-circle-add" />
+        {t('Add Column')}
+      </HeaderButton>
     );
   };
 
-  renderLoading = () => {
-    return (
-      <GridBody>
-        <GridRow>
-          <GridBodyCellSpan>
-            <GridBodyCellLoading>
-              <LoadingContainer isLoading />
-            </GridBodyCellLoading>
-          </GridBodyCellSpan>
-        </GridRow>
-      </GridBody>
-    );
-  };
+  renderGridHeadEditButtons = () => {
+    if (!this.props.isEditable) {
+      return null;
+    }
+
+    if (!this.state.isEditing) {
+      return (
+        <HeaderButton onClick={this.toggleEdit} data-test-id="grid-edit-enable">
+          <InlineSvg src="icon-edit-pencil" />
+          {t('Edit Columns')}
+        </HeaderButton>
+      );
+    }
 
-  renderEmptyData = () => {
     return (
-      <GridBody>
-        <GridRow>
-          <GridBodyCellSpan>
-            <EmptyStateWarning>
-              <p>{t('No results found')}</p>
-            </EmptyStateWarning>
-          </GridBodyCellSpan>
-        </GridRow>
-      </GridBody>
+      <HeaderButton onClick={this.toggleEdit} data-test-id="grid-edit-disable">
+        <InlineSvg src="icon-circle-close" />
+        {t('Exit Edit')}
+      </HeaderButton>
     );
   };
 
   renderGridHead = () => {
-    const {isEditable, columnOrder, actions, grid} = this.props;
+    const {columnOrder, actions, grid} = this.props;
     const {isEditing} = this.state;
 
     // Ensure that the last column cannot be removed
     const enableEdit = isEditing && columnOrder.length > 1;
 
     return (
-      <GridHead>
-        <GridRow>
-          {/* GridHeadEdit must come first.
-
-              It is a <th> that uses `position: absolute` to set its placement.
-              The CSS selectors captures the last GridHeadCell and put a
-              padding-right to provide space for GridHeadEdit to be displayed.
-
-              FAQ:
-              Instead of using `position: absolute`, why can't we just put
-              GridHeadEdit at the end so it appears on the right?
-              Because CSS Grids need to have the same number of Head/Body cells
-              for everything to align properly. Sub-grids are new and may not be
-              well supported in older browsers/
-
-              Why can't we just put GridHeadEdit somewhere else?
-              Because HTML rules mandate that <div> cannot be a nested child of
-              a <table>. This seems the best way to make it correct to satisfy
-              HTML semantics. */
-          isEditable && this.renderGridHeadEditButtons()}
-
-          {columnOrder.map((column, columnIndex) => (
-            <GridHeadCell
-              openModalAddColumnAt={this.openModalAddColumnAt}
-              isLast={columnOrder.length - 1 === columnIndex}
-              key={`${columnIndex}.${column.key}`}
-              isColumnDragging={this.props.isColumnDragging}
-              isPrimary={column.isPrimary}
-              isEditing={enableEdit}
-              indexColumnOrder={columnIndex}
-              column={column}
-              gridHeadCellButtonProps={this.props.gridHeadCellButtonProps || {}}
-              actions={{
-                moveColumnCommit: actions.moveColumnCommit,
-                onDragStart: actions.onDragStart,
-                deleteColumn: actions.deleteColumn,
-                toggleModalEditColumn: this.toggleModalEditColumn,
-              }}
-            >
-              {grid.renderHeaderCell
-                ? grid.renderHeaderCell(column, columnIndex)
-                : column.name}
-            </GridHeadCell>
-          ))}
-        </GridRow>
-      </GridHead>
+      <GridRow>
+        {columnOrder.map((column, columnIndex) => (
+          <GridHeadCell
+            openModalAddColumnAt={this.openModalAddColumnAt}
+            isLast={columnOrder.length - 1 === columnIndex}
+            key={`${columnIndex}.${column.key}`}
+            isColumnDragging={this.props.isColumnDragging}
+            isPrimary={column.isPrimary}
+            isEditing={enableEdit}
+            indexColumnOrder={columnIndex}
+            column={column}
+            gridHeadCellButtonProps={this.props.gridHeadCellButtonProps || {}}
+            actions={{
+              moveColumnCommit: actions.moveColumnCommit,
+              onDragStart: actions.onDragStart,
+              deleteColumn: actions.deleteColumn,
+              toggleModalEditColumn: this.toggleModalEditColumn,
+            }}
+          >
+            {grid.renderHeaderCell
+              ? grid.renderHeaderCell(column, columnIndex)
+              : column.name}
+          </GridHeadCell>
+        ))}
+      </GridRow>
     );
   };
 
-  renderGridHeadEditButtons = () => {
-    if (!this.props.isEditable) {
-      return null;
-    }
+  renderGridBody = () => {
+    const {data, error, isLoading} = this.props;
 
-    if (!this.state.isEditing) {
-      return (
-        <GridEditGroup>
-          <GridEditGroupButton onClick={this.toggleEdit} data-test-id="grid-edit-enable">
-            <ToolTip title={t('Edit Columns')}>
-              <InlineSvg src="icon-edit-pencil" />
-            </ToolTip>
-          </GridEditGroupButton>
-        </GridEditGroup>
-      );
+    if (error) {
+      return this.renderError();
     }
 
-    return (
-      <GridEditGroup>
-        <AddColumnButton
-          align="left"
-          onClick={() => this.toggleModalEditColumn()}
-          data-test-id="grid-add-column-right-end"
-        />
-        <GridEditGroupButton onClick={this.toggleEdit}>
-          <ToolTip title={t('Exit Edit')}>
-            <InlineSvg src="icon-close" />
-          </ToolTip>
-        </GridEditGroupButton>
-      </GridEditGroup>
-    );
-  };
-
-  renderGridBody = () => {
-    const {data} = this.props;
+    if (isLoading) {
+      return this.renderLoading();
+    }
 
     if (!data || data.length === 0) {
       return this.renderEmptyData();
     }
 
-    return <GridBody>{data.map(this.renderGridBodyRow)}</GridBody>;
+    return data.map(this.renderGridBodyRow);
   };
 
   renderGridBodyRow = (dataRow: DataRow, row: number) => {
@@ -333,24 +274,76 @@ class GridEditable<
     );
   };
 
+  renderError = () => {
+    const {error} = this.props;
+
+    return (
+      <GridRow>
+        <GridBodyCellSpan>
+          <GridBodyErrorAlert type="error" icon="icon-circle-exclamation">
+            {error}
+          </GridBodyErrorAlert>
+        </GridBodyCellSpan>
+      </GridRow>
+    );
+  };
+
+  renderLoading = () => {
+    return (
+      <GridRow>
+        <GridBodyCellSpan>
+          <GridBodyCellLoading>
+            <LoadingContainer isLoading />
+          </GridBodyCellLoading>
+        </GridBodyCellSpan>
+      </GridRow>
+    );
+  };
+
+  renderEmptyData = () => {
+    return (
+      <GridRow>
+        <GridBodyCellSpan>
+          <EmptyStateWarning>
+            <p>{t('No results found')}</p>
+          </EmptyStateWarning>
+        </GridBodyCellSpan>
+      </GridRow>
+    );
+  };
+
   render() {
-    if (this.props.error) {
-      return this.renderError();
-    }
+    const {title, isEditable} = this.props;
 
     return (
-      <GridPanel>
-        <GridPanelBody>
+      <React.Fragment>
+        <Header>
+          {/* TODO(leedongwei): Check with Bowen/Dora on what they want the
+          default title to be */}
+          <HeaderTitle>{title || t('Query Builder')}</HeaderTitle>
+
+          {/* TODO(leedongwei): This is ugly but I need to move it to work on
+          resizing columns. It will be refactored in a upcoming PR */}
+          <div style={{display: 'flex', flexDirection: 'row'}}>
+            {this.renderHeaderButton()}
+
+            <div style={{marginLeft: '16px'}}>
+              {isEditable && this.renderGridHeadEditButtons()}
+            </div>
+          </div>
+        </Header>
+
+        <Body>
           <Grid
             isEditable={this.props.isEditable}
             isEditing={this.state.isEditing}
             numColumn={this.state.numColumn}
           >
-            {this.renderGridHead()}
-            {this.props.isLoading ? this.renderLoading() : this.renderGridBody()}
+            <GridHead>{this.renderGridHead()}</GridHead>
+            <GridBody>{this.renderGridBody()}</GridBody>
           </Grid>
-        </GridPanelBody>
-      </GridPanel>
+        </Body>
+      </React.Fragment>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 614e36f980..baf6999bd3 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -1,3 +1,4 @@
+import React from 'react';
 import styled from 'react-emotion';
 
 import Alert from 'app/components/alert';
@@ -7,9 +8,6 @@ import space from 'app/styles/space';
 
 export const ADD_BUTTON_SIZE = 16; // this is an even number
 export const GRID_HEADER_HEIGHT = 45;
-const GRID_EDIT_WIDTH = 35;
-const GRID_EDIT_WIDTH_EDIT_MODE =
-  GRID_EDIT_WIDTH + ADD_BUTTON_SIZE / 2 + (12 - ADD_BUTTON_SIZE / 2);
 
 /**
  * Explanation of z-index:
@@ -17,8 +15,7 @@ const GRID_EDIT_WIDTH_EDIT_MODE =
  *  - Editable needs to float above Resizer to hide the right-most Resizer,
  */
 const Z_INDEX_RESIZER = '1';
-const Z_INDEX_EDITABLE = '10';
-export const Z_INDEX_ADD_COLUMN = '20';
+export const Z_INDEX_ADD_COLUMN = '20'; // TODO(leedongwei): Remove with addColumnButton.tsx
 
 type GridEditableProps = {
   numColumn?: number;
@@ -28,10 +25,42 @@ type GridEditableProps = {
   isDragging?: boolean;
 };
 
-export const GridPanel = styled(Panel)`
-  /* overflow: hidden; */
+export const Header = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+
+  margin-bottom: ${space(1)};
+`;
+export const HeaderTitle = styled('h2')`
+  margin: 0;
+
+  font-size: ${p => p.theme.headerFontSize};
+  font-weight: normal;
+  color: ${p => p.theme.gray3};
 `;
-export const GridPanelBody = styled(PanelBody)``;
+export const HeaderButton = styled('div')`
+  display: flex;
+  align-items: center;
+
+  color: ${p => p.theme.gray3};
+  cursor: pointer;
+
+  > svg {
+    margin-right: ${space(1)};
+  }
+
+  &:hover,
+  &:active {
+    color: ${p => p.theme.gray4};
+  }
+`;
+
+export const Body: React.FC = props => (
+  <Panel>
+    <PanelBody>{props.children}</PanelBody>
+  </Panel>
+);
 
 /**
  *
@@ -58,25 +87,6 @@ export const Grid = styled('table')<GridEditableProps>`
   margin: 0;
 
   /* background-color: ${p => p.theme.offWhite}; */
-  /* overflow: hidden; */
-
-  /* For the last column, we want to have some space on the right if column
-     is editable.
-
-     For the header, we set padding for 1 or 2 buttons depending on state
-     For the body, use "td:last-child" */
-  th:last-child {
-    ${p => {
-      if (!p.isEditable) {
-        return 'padding-right: 0px';
-      }
-      if (!p.isEditing) {
-        return `padding-right: ${GRID_EDIT_WIDTH}px;`;
-      }
-
-      return `padding-right: ${GRID_EDIT_WIDTH_EDIT_MODE}px;`;
-    }}
-  }
 `;
 export const GridRow = styled('tr')`
   display: contents;
@@ -315,52 +325,3 @@ export const GridBodyCellLoading = styled('div')`
 export const GridBodyErrorAlert = styled(Alert)`
   margin: 0;
 `;
-
-/**
- *
- * GridEditGroup are the buttons that are on the top right of the Grid that
- * allows the user to add/remove/resize the columns of the Grid
- *
- */
-export const GridEditGroup = styled('th')`
-  position: absolute;
-  top: 0;
-  right: 0;
-  display: flex;
-  height: ${GRID_HEADER_HEIGHT}px;
-
-  background-color: ${p => p.theme.offWhite};
-  border-bottom: 1px solid ${p => p.theme.borderDark};
-  border-top-right-radius: ${p => p.theme.borderRadius};
-
-  z-index: ${Z_INDEX_EDITABLE};
-`;
-export const GridEditGroupButton = styled('div')`
-  display: block;
-  width: ${GRID_EDIT_WIDTH}px;
-  height: ${GRID_HEADER_HEIGHT}px;
-
-  color: ${p => p.theme.gray2};
-  font-size: 16px;
-  cursor: pointer;
-
-  &:hover {
-    color: ${p => p.theme.gray3};
-  }
-  &:active {
-    color: ${p => p.theme.gray4};
-  }
-  &:last-child {
-    border-left: 1px solid ${p => p.theme.borderDark};
-  }
-
-  /* Targets ToolTip to ensure that it will fill up the parent element and
-     its child elements will float in its center */
-  > span {
-    display: flex;
-    justify-content: center;
-    align-items: center;
-    width: 100%;
-    height: 100%;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
index 70bf2cc8ae..b110d08fde 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/index.tsx
@@ -4,6 +4,7 @@ import {browserHistory} from 'react-router';
 import styled from 'react-emotion';
 
 import {Client} from 'app/api';
+import space from 'app/styles/space';
 import {Organization} from 'app/types';
 import withApi from 'app/utils/withApi';
 
@@ -166,4 +167,5 @@ export default withApi<TableProps>(Table);
 const Container = styled('div')`
   min-width: 0;
   overflow: hidden;
+  margin-top: ${space(1.5)};
 `;
diff --git a/tests/acceptance/test_organization_events_v2.py b/tests/acceptance/test_organization_events_v2.py
index 94b9758b5c..961037e2e9 100644
--- a/tests/acceptance/test_organization_events_v2.py
+++ b/tests/acceptance/test_organization_events_v2.py
@@ -215,7 +215,7 @@ class OrganizationEventsV2Test(AcceptanceTestCase, SnubaTestCase):
                 "events-v2 - errors query - empty state - querybuilder - column edit state"
             )
 
-            self.browser.click_when_visible('[data-test-id="grid-add-column-right-end"]')
+            self.browser.click_when_visible('[data-test-id="grid-add-column"]')
             self.browser.snapshot(
                 "events-v2 - errors query - empty state - querybuilder - add column"
             )
