commit ca21b306502b65955130cf3506fa0b70a98dc723
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue May 22 14:46:24 2018 -0700

    feat(integrations): Add general support for creating new external issues (#8492)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index defc41ce73..bb317c7b71 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -7,7 +7,8 @@ from rest_framework.response import Response
 from sentry.api.bases import GroupEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.integration import IntegrationIssueConfigSerializer
-from sentry.integrations.base import IntegrationFeatures
+from sentry.integrations import IntegrationFeatures
+from sentry.integrations.exceptions import IntegrationError
 from sentry.models import ExternalIssue, GroupLink, OrganizationIntegration
 
 
@@ -90,3 +91,50 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
         # TODO(jess): would be helpful to return serialized external issue
         # once we have description, title, etc
         return Response(status=201)
+
+    def post(self, request, group, integration_id):
+        organization_id = group.project.organization_id
+        try:
+            # check org permissions
+            # TODO(jess): should this eventually check ProjectIntegration?
+            integration = OrganizationIntegration.objects.filter(
+                integration_id=integration_id,
+                organization_id=organization_id,
+            ).select_related('integration').get().integration
+        except OrganizationIntegration.DoesNotExist:
+            return Response(status=404)
+
+        if not integration.has_feature(IntegrationFeatures.ISSUE_SYNC):
+            return Response(
+                {'detail': 'This feature is not supported for this integration.'}, status=400)
+
+        installation = integration.get_installation()
+        try:
+            data = installation.create_issue(request.DATA)
+        except IntegrationError as exc:
+            return Response({'detail': exc.message}, status=400)
+
+        external_issue = ExternalIssue.objects.get_or_create(
+            organization_id=organization_id,
+            integration_id=integration.id,
+            key=data['key'],
+            defaults={
+                'title': data.get('title'),
+                'description': data.get('description'),
+            }
+        )[0]
+
+        try:
+            with transaction.atomic():
+                GroupLink.objects.create(
+                    group_id=group.id,
+                    project_id=group.project_id,
+                    linked_type=GroupLink.LinkedType.issue,
+                    linked_id=external_issue.id,
+                    relationship=GroupLink.Relationship.references,
+                )
+        except IntegrityError:
+            return Response({'detail': 'That issue is already linked'}, status=400)
+
+        # TODO(jess): return serialized issue
+        return Response(status=201)
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index d6f7552ef4..9525e0a667 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -8,6 +8,22 @@ from enum import Enum
 
 from sentry.pipeline import PipelineProvider
 
+from .exceptions import ApiHostError, ApiError, ApiUnauthorized, UnsupportedResponseType
+
+
+ERR_INTERNAL = (
+    'An internal error occurred with the integration and the Sentry team has'
+    ' been notified'
+)
+
+ERR_UNAUTHORIZED = (
+    'Unauthorized: either your access token was invalid or you do not have'
+    ' access'
+)
+
+ERR_UNSUPPORTED_RESPONSE_TYPE = (
+    'An unsupported response type was returned: {content_type}'
+)
 
 IntegrationMetadata = namedtuple('IntegrationMetadata', [
     'description',  # A markdown description of the integration
@@ -185,3 +201,27 @@ class Integration(object):
     def get_client(self):
         # Return the api client for a given provider
         raise NotImplementedError
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiUnauthorized):
+            return ERR_UNAUTHORIZED
+        elif isinstance(exc, ApiHostError):
+            return exc.text
+        elif isinstance(exc, UnsupportedResponseType):
+            return ERR_UNSUPPORTED_RESPONSE_TYPE.format(
+                content_type=exc.content_type,
+            )
+        elif isinstance(exc, ApiError):
+            if exc.json:
+                msg = self.error_message_from_json(exc.json) or 'unknown error'
+            else:
+                msg = 'unknown error'
+            return (
+                'Error Communicating with %s (HTTP %s): %s' % (
+                    self.title,
+                    exc.code,
+                    msg
+                )
+            )
+        else:
+            return ERR_INTERNAL
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 683251b880..0243186f62 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -4,6 +4,7 @@ from django.http import HttpResponse
 from sentry.integrations import (
     Integration, IntegrationFeatures, IntegrationMetadata, IntegrationProvider
 )
+from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.issues import IssueSyncMixin
 from sentry.pipeline import PipelineView
 
@@ -45,6 +46,15 @@ class ExampleIntegration(Integration, IssueSyncMixin):
     def create_comment(self):
         pass
 
+    def create_issue(self, data, **kwargs):
+        if 'assignee' not in data:
+            raise IntegrationError('Assignee is required')
+        return {
+            'key': 'APP-123',
+            'title': 'This is a test external issue title',
+            'description': 'This is a test external issue description',
+        }
+
 
 class ExampleIntegrationProvider(IntegrationProvider):
     """
diff --git a/src/sentry/integrations/exceptions.py b/src/sentry/integrations/exceptions.py
index 9680da3cd3..59210cd32d 100644
--- a/src/sentry/integrations/exceptions.py
+++ b/src/sentry/integrations/exceptions.py
@@ -61,3 +61,7 @@ class UnsupportedResponseType(ApiError):
     @property
     def content_type(self):
         return self.text
+
+
+class IntegrationError(Exception):
+    pass
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 9f96e2a2cb..3bf3ccc35e 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -61,3 +61,21 @@ class IssueSyncMixin(object):
                 'type': 'string',
             }
         ]
+
+    def create_issue(self, data, **kwargs):
+        """
+        Create an issue via the provider's API and return the issue key,
+        title and description.
+
+        Should also handle API client exceptions and reraise as an
+        IntegrationError (using the `message_from_error` helper).
+
+        >>> def create_issue(self, data, **kwargs):
+        >>>     resp = self.get_client().create_issue(data)
+        >>>     return {
+        >>>         'key': resp['id'],
+        >>>         'title': resp['title'],
+        >>>         'description': resp['description'],
+        >>>     }
+        """
+        raise NotImplementedError
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 3d12ee36b7..ce0d0d44ce 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -109,3 +109,36 @@ class GroupIntegrationDetailsTest(APITestCase):
             group_id=group.id,
             linked_id=external_issue.id,
         ).exists()
+
+    def test_simple_post(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        path = '/api/0/issues/{}/integrations/{}/'.format(group.id, integration.id)
+
+        response = self.client.post(path, data={})
+        assert response.status_code == 400
+        assert response.data['detail'] == 'Assignee is required'
+
+        response = self.client.post(path, data={'assignee': 'foo@sentry.io'})
+        assert response.status_code == 201
+
+        external_issue = ExternalIssue.objects.get(
+            key='APP-123',
+            integration_id=integration.id,
+            organization_id=org.id,
+        )
+        assert external_issue.description == 'This is a test external issue description'
+        assert external_issue.title == 'This is a test external issue title'
+
+        assert GroupLink.objects.filter(
+            linked_type=GroupLink.LinkedType.issue,
+            group_id=group.id,
+            linked_id=external_issue.id,
+        ).exists()
