commit 0a7d896d5aa091f3df60a1c1f1589e29a6efbcf8
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 23 10:39:34 2010 -0800

    Ensure search_indexes are only registered if we've specified our backend. Added uuid as a requirement for python 2.4

diff --git a/runtests.py b/runtests.py
index 5f80dd5404..ffd8576b56 100644
--- a/runtests.py
+++ b/runtests.py
@@ -26,6 +26,7 @@ if not settings.configured:
             'indexer',
             'south',
             'djcelery', # celery client
+            # 'haystack',
 
             'sentry',
             'sentry.client',
diff --git a/sentry/search_indexes.py b/sentry/search_indexes.py
index 1d9dcd44c4..af341c5657 100644
--- a/sentry/search_indexes.py
+++ b/sentry/search_indexes.py
@@ -5,28 +5,27 @@ from haystack.sites import SearchSite
 from sentry import conf
 from sentry.models import GroupedMessage
 
-if not conf.SEARCH_ENGINE:
+if conf.SEARCH_ENGINE:
     # Ensure we stop here if we havent configure Sentry to work under haystack
-    return
 
-backend = haystack.load_backend(conf.SEARCH_ENGINE)
+    backend = haystack.load_backend(conf.SEARCH_ENGINE)
 
-class SentrySearchSite(SearchSite): pass
+    class SentrySearchSite(SearchSite): pass
 
-site = SentrySearchSite()
-site.backend = backend.SearchBackend(site, **conf.SEARCH_OPTIONS)
+    site = SentrySearchSite()
+    site.backend = backend.SearchBackend(site, **conf.SEARCH_OPTIONS)
 
-class GroupedMessageIndex(RealTimeSearchIndex):
-    text = CharField(document=True, stored=False)
-    status = CharField(stored=False, null=True)
-    first_seen = DateTimeField(model_attr='first_seen', stored=False)
-    last_seen = DateTimeField(model_attr='last_seen', stored=False)
+    class GroupedMessageIndex(RealTimeSearchIndex):
+        text = CharField(document=True, stored=False)
+        status = CharField(stored=False, null=True)
+        first_seen = DateTimeField(model_attr='first_seen', stored=False)
+        last_seen = DateTimeField(model_attr='last_seen', stored=False)
 
-    # def get_queryset(self):
-    #     """Used when the entire index for model is updated."""
-    #     return GroupedMessage.objects.all()
+        # def get_queryset(self):
+        #     """Used when the entire index for model is updated."""
+        #     return GroupedMessage.objects.all()
 
-    def prepare_text(self, instance):
-        return '\n'.join(filter(None, [instance.message, instance.class_name, instance.traceback, instance.view]))
+        def prepare_text(self, instance):
+            return '\n'.join(filter(None, [instance.message, instance.class_name, instance.traceback, instance.view]))
 
-site.register(GroupedMessage, GroupedMessageIndex)
+    site.register(GroupedMessage, GroupedMessageIndex)
diff --git a/setup.py b/setup.py
index e24045b084..8fcbd6ad70 100644
--- a/setup.py
+++ b/setup.py
@@ -19,7 +19,7 @@ class mytest(test):
 
 setup(
     name='django-sentry',
-    version='1.5.2',
+    version='1.5.3',
     author='David Cramer',
     author_email='dcramer@gmail.com',
     url='http://github.com/dcramer/django-sentry',
@@ -29,6 +29,7 @@ setup(
     install_requires=[
         'django-paging>=0.2.2',
         'django-indexer==0.2.1',
+        'uuid',
     ],
     test_suite = 'sentry.tests',
     include_package_data=True,
