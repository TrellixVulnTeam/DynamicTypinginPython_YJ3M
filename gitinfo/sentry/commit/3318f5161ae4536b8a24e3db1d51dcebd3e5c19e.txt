commit 3318f5161ae4536b8a24e3db1d51dcebd3e5c19e
Author: Bruno Garcia <github@brunogarcia.com>
Date:   Thu Jan 24 09:38:53 2019 +0100

    feat(unreal): Apple crash report (#11631)
    
    * feat: read apple crash report from symbolic

diff --git a/requirements-base.txt b/requirements-base.txt
index 20f9c90df7..2bb576972d 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -63,7 +63,7 @@ sqlparse>=0.1.16,<0.2.0
 statsd>=3.1.0,<3.2.0
 strict-rfc3339>=0.7
 structlog==16.1.0
-symbolic>=5.7.8,<6.0.0
+symbolic>=5.8.0,<6.0.0
 toronado>=0.0.11,<0.1.0
 ua-parser>=0.6.1,<0.8.0
 # for bitbucket client
diff --git a/src/sentry/lang/native/unreal.py b/src/sentry/lang/native/unreal.py
index eb3b1ad207..563bf08877 100644
--- a/src/sentry/lang/native/unreal.py
+++ b/src/sentry/lang/native/unreal.py
@@ -11,9 +11,26 @@ _portable_callstack_regexp = re.compile(
     r'((?P<package>[\w]+) )?(?P<baseaddr>0x[\da-fA-F]+) \+ (?P<offset>[\da-fA-F]+)')
 
 
-def process_unreal_crash(data):
-    """Processes the raw bytes of the unreal crash"""
-    return Unreal4Crash.from_bytes(data)
+def process_unreal_crash(payload, user_id, environment, event):
+    """Initial processing of the event from the Unreal Crash Reporter data.
+    Processes the raw bytes of the unreal crash by returning a Unreal4Crash"""
+
+    event_id = uuid.uuid4().hex
+    event['event_id'] = event_id
+    event['environment'] = environment
+
+    if user_id:
+        # https://github.com/EpicGames/UnrealEngine/blob/f509bb2d6c62806882d9a10476f3654cf1ee0634/Engine/Source/Programs/CrashReportClient/Private/CrashUpload.cpp#L769
+        parts = user_id.split('|', 2)
+        login_id, epic_account_id, machine_id = parts + [''] * (3 - len(parts))
+        event['user'] = {
+            'id': login_id if login_id else user_id,
+        }
+        if epic_account_id:
+            set_path(event, 'tags', 'epic_account_id', value=epic_account_id)
+        if machine_id:
+            set_path(event, 'tags', 'machine_id', value=machine_id)
+    return Unreal4Crash.from_bytes(payload)
 
 
 def unreal_attachment_type(unreal_file):
@@ -23,6 +40,54 @@ def unreal_attachment_type(unreal_file):
         return MINIDUMP_ATTACHMENT_TYPE
 
 
+def merge_apple_crash_report(apple_crash_report, event):
+    event['platform'] = 'native'
+
+    timestamp = apple_crash_report.get('timestamp')
+    if timestamp:
+        event['timestamp'] = timestamp
+
+    event['threads'] = []
+    for thread in apple_crash_report['threads']:
+        crashed = thread.get('crashed')
+        event['threads'].append({
+            'id': thread.get('id'),
+            'name': thread.get('name'),
+            'crashed': crashed,
+            'stacktrace': {
+                'frames': [{
+                    'function': '<unknown>',  # Required by the interface
+                    'instruction_addr': frame.get('instruction_addr'),
+                    'package': frame.get('module'),
+                    'lineno': frame.get('lineno'),
+                    'filename': frame.get('filename'),
+                } for frame in reversed(thread.get('frames', []))],
+                'registers': thread.get('registers', []),
+            },
+        })
+        if crashed:
+            event['level'] = 'fatal'
+
+    if event.get('level') is None:
+        event['level'] = 'info'
+
+    metadata = apple_crash_report.get('metadata')
+    if metadata:
+        set_path(event, 'contexts', 'os', 'raw_description', value=metadata.get('OS Version'))
+        set_path(event, 'contexts', 'device', 'model', value=metadata.get('Hardware Model'))
+
+    # Extract referenced (not all loaded) images
+    images = [{
+        'type': 'symbolic',
+        'id': module.get('uuid'),
+        'image_addr': module.get('addr'),
+        'image_size': module.get('size'),
+        'arch': module.get('arch'),
+        'name': module.get('path'),
+    } for module in apple_crash_report.get('binary_images')]
+    event.setdefault('debug_meta', {})['images'] = images
+
+
 def merge_unreal_context_event(unreal_context, event, project):
     """Merges the context from an Unreal Engine 4 crash
     with the given event."""
@@ -66,28 +131,30 @@ def merge_unreal_context_event(unreal_context, event, project):
             comments=user_desc,
         )
 
-    portable_callstack = runtime_prop.pop('portable_call_stack', None)
-    if portable_callstack is not None:
-        frames = []
+    if not any(thread.get('stacktrace') and thread.get('crashed')
+               for thread in event.get('threads', [])):
+        portable_callstack = runtime_prop.pop('portable_call_stack', None)
+        if portable_callstack is not None:
+            frames = []
 
-        for match in _portable_callstack_regexp.finditer(portable_callstack):
-            baseaddr = int(match.group('baseaddr'), 16)
-            offset = int(match.group('offset'), 16)
-            # Crashes without PDB in the client report: 0x00000000ffffffff + ffffffff
-            if baseaddr == 0xffffffff and offset == 0xffffffff:
-                continue
+            for match in _portable_callstack_regexp.finditer(portable_callstack):
+                baseaddr = int(match.group('baseaddr'), 16)
+                offset = int(match.group('offset'), 16)
+                # Crashes without PDB in the client report: 0x00000000ffffffff + ffffffff
+                if baseaddr == 0xffffffff and offset == 0xffffffff:
+                    continue
 
-            frames.append({
-                'package': match.group('package'),
-                'instruction_addr': hex(baseaddr + offset),
-            })
+                frames.append({
+                    'package': match.group('package'),
+                    'instruction_addr': hex(baseaddr + offset),
+                })
 
-            frames.reverse()
+                frames.reverse()
 
-        if len(frames) > 0:
-            event['stacktrace'] = {
-                'frames': frames
-            }
+            if len(frames) > 0:
+                event['stacktrace'] = {
+                    'frames': frames
+                }
 
     # drop modules. minidump processing adds 'images loaded'
     runtime_prop.pop('modules', None)
@@ -108,8 +175,10 @@ def merge_unreal_logs_event(unreal_logs, event):
     breadcrumbs = event['breadcrumbs']['values']
 
     for log in unreal_logs:
-        breadcrumbs.append({
-            'timestamp': log.get('timestamp'),
-            'category': log.get('component'),
-            'message': log.get('message'),
-        })
+        message = log.get('message')
+        if message:
+            breadcrumbs.append({
+                'timestamp': log.get('timestamp'),
+                'category': log.get('component'),
+                'message': message,
+            })
diff --git a/src/sentry/utils/contexts_normalization.py b/src/sentry/utils/contexts_normalization.py
index 6a7911aa0b..c1d174754b 100644
--- a/src/sentry/utils/contexts_normalization.py
+++ b/src/sentry/utils/contexts_normalization.py
@@ -6,6 +6,9 @@ from sentry.utils.safe import setdefault_path
 
 # Environment.OSVersion (GetVersionEx) or RuntimeInformation.OSDescription, on Windows
 _windows_re = re.compile('^(Microsoft )?Windows (NT )?(?P<version>\d+\.\d+\.\d+).*$')
+# Format sent by Unreal Engine on macOS
+_unreal_macos_re = re.compile(
+    '^Mac OS X (?P<version>\d+\.\d+\.\d+)( \((?P<build>[a-fA-F0-9]+)\))?$')
 # Environment.OSVersion or RuntimeInformation.OSDescription (uname)
 # on Mono and CoreCLR on macOS, iOS, Linux, etc
 _uname_re = re.compile('^(?P<name>[a-zA-Z]+) (?P<version>\d+\.\d+\.\d+(\.[1-9]+)?).*$')
@@ -24,10 +27,16 @@ def normalize_os(data):
             data['name'] = 'Windows'
             data['version'] = r.group('version')
         else:
-            r = _uname_re.search(raw_description)
+            r = _unreal_macos_re.search(raw_description)
             if r:
-                data['name'] = r.group('name')
-                data['kernel_version'] = r.group('version')
+                data['name'] = 'macOS'
+                data['version'] = r.group('version')
+                data['build'] = r.group('build')
+            else:
+                r = _uname_re.search(raw_description)
+                if r:
+                    data['name'] = r.group('name')
+                    data['kernel_version'] = r.group('version')
 
 
 def normalize_runtime(data):
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 028d105350..112754532e 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -37,7 +37,7 @@ from sentry.coreapi import (
 from sentry.event_manager import EventManager
 from sentry.interfaces import schemas
 from sentry.interfaces.base import get_interface
-from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event
+from sentry.lang.native.unreal import process_unreal_crash, merge_apple_crash_report, unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event
 from sentry.lang.native.minidump import merge_process_state_event, process_minidump, MINIDUMP_ATTACHMENT_TYPE
 from sentry.models import Project, OrganizationOption, Organization
 from sentry.signals import (
@@ -799,34 +799,28 @@ class UnrealView(StoreView):
         attachments_enabled = features.has('organizations:event-attachments',
                                            project.organization, actor=request.user)
 
-        event_id = uuid.uuid4().hex
-        data = {
-            'event_id': event_id,
-            'environment': request.GET.get('AppEnvironment'),
-        }
-        user_id = request.GET.get('UserID')
-        if user_id:
-            data['user'] = {
-                'id': user_id
-            }
-
         attachments = []
         try:
-            unreal = process_unreal_crash(request.body)
+            event = {}
+            unreal = process_unreal_crash(request.body, request.GET.get(
+                'UserID'), request.GET.get('AppEnvironment'), event)
             process_state = unreal.process_minidump()
+            if process_state:
+                merge_process_state_event(event, process_state)
+            else:
+                apple_crash_report = unreal.get_apple_crash_report()
+                if apple_crash_report:
+                    merge_apple_crash_report(apple_crash_report, event)
+                else:
+                    raise APIError("missing minidump in unreal crash report")
         except (ProcessMinidumpError, Unreal4Error) as e:
             minidumps_logger.exception(e)
             raise APIError(e.message.split('\n', 1)[0])
 
-        if process_state:
-            merge_process_state_event(data, process_state)
-        else:
-            raise APIError("missing minidump in unreal crash report")
-
         try:
             unreal_context = unreal.get_context()
             if unreal_context is not None:
-                merge_unreal_context_event(unreal_context, data, project)
+                merge_unreal_context_event(unreal_context, event, project)
         except Unreal4Error as e:
             # we'll continue without the context data
             minidumps_logger.exception(e)
@@ -834,7 +828,7 @@ class UnrealView(StoreView):
         try:
             unreal_logs = unreal.get_logs()
             if unreal_logs is not None:
-                merge_unreal_logs_event(unreal_logs, data)
+                merge_unreal_logs_event(unreal_logs, event)
         except Unreal4Error as e:
             # we'll continue without the breadcrumbs
             minidumps_logger.exception(e)
@@ -853,7 +847,7 @@ class UnrealView(StoreView):
         response_or_event_id = self.process(
             request,
             attachments=attachments,
-            data=data,
+            data=event,
             project=project,
             **kwargs)
 
diff --git a/tests/sentry/lang/native/fixtures/unreal_crash_apple b/tests/sentry/lang/native/fixtures/unreal_crash_apple
new file mode 100644
index 0000000000..df7ca60741
Binary files /dev/null and b/tests/sentry/lang/native/fixtures/unreal_crash_apple differ
diff --git a/tests/sentry/lang/native/test_unreal.py b/tests/sentry/lang/native/test_unreal.py
index 4ea82cc341..edd6d1bea3 100644
--- a/tests/sentry/lang/native/test_unreal.py
+++ b/tests/sentry/lang/native/test_unreal.py
@@ -9,7 +9,7 @@ from django.core.files.uploadedfile import SimpleUploadedFile
 
 from sentry.testutils import TestCase
 from sentry.lang.native.minidump import MINIDUMP_ATTACHMENT_TYPE
-from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event
+from sentry.lang.native.unreal import process_unreal_crash, unreal_attachment_type, merge_unreal_context_event, merge_unreal_logs_event, merge_apple_crash_report
 from sentry.models import Event, EventAttachment, UserReport
 
 
@@ -17,9 +17,13 @@ def get_unreal_crash_file():
     return os.path.join(os.path.dirname(__file__), 'fixtures', 'unreal_crash')
 
 
+def get_unreal_crash_apple_file():
+    return os.path.join(os.path.dirname(__file__), 'fixtures', 'unreal_crash_apple')
+
+
 def test_process_minidump():
     with open(get_unreal_crash_file(), 'rb') as f:
-        unreal_crash = process_unreal_crash(f.read())
+        unreal_crash = process_unreal_crash(f.read(), None, None, {})
         process_state = unreal_crash.process_minidump()
         assert 115 == process_state.module_count
         assert 54 == process_state.thread_count
@@ -43,9 +47,17 @@ class MockFile(TestCase):
 class UnrealIntegrationTest(TestCase):
     def test_merge_unreal_context_event(self):
         with open(get_unreal_crash_file(), 'rb') as f:
-            unreal_crash = process_unreal_crash(f.read())
             event = {}
+            unreal_crash = process_unreal_crash(
+                f.read(),
+                'ebff51ef3c4878627823eebd9ff40eb4|2e7d369327054a448be6c8d3601213cb|C52DC39D-DAF3-5E36-A8D3-BF5F53A5D38F',
+                'Production',
+                event)
             merge_unreal_context_event(unreal_crash.get_context(), event, self.project)
+            assert event['environment'] == 'Production'
+            assert event['tags']['machine_id'] == 'C52DC39D-DAF3-5E36-A8D3-BF5F53A5D38F'
+            assert event['tags']['epic_account_id'] == '2e7d369327054a448be6c8d3601213cb'
+            assert event['user']['id'] == 'ebff51ef3c4878627823eebd9ff40eb4'
             assert event['message'] == 'Access violation - code c0000005 (first/second chance not available)'
             assert event['user']['username'] == 'bruno'
             assert event['contexts']['device']['memory_size'] == 6896832512
@@ -118,8 +130,8 @@ class UnrealIntegrationTest(TestCase):
 
     def test_merge_unreal_logs_event(self):
         with open(get_unreal_crash_file(), 'rb') as f:
-            unreal_crash = process_unreal_crash(f.read())
             event = {}
+            unreal_crash = process_unreal_crash(f.read(), None, None, event)
             merge_unreal_logs_event(unreal_crash.get_logs(), event)
             breadcrumbs = event['breadcrumbs']['values']
             assert len(breadcrumbs) == 100
@@ -130,6 +142,30 @@ class UnrealIntegrationTest(TestCase):
             assert breadcrumbs[99]['message'] == 'Texture pool size now 1000 MB'
             assert breadcrumbs[99]['category'] == 'LogContentStreaming'
 
+    def test_merge_apple_crash_report(self):
+        with open(get_unreal_crash_apple_file(), 'rb') as f:
+            event = {}
+            unreal_crash = process_unreal_crash(f.read(), None, None, event)
+            merge_apple_crash_report(unreal_crash.get_apple_crash_report(), event)
+            assert event['platform'] == 'native'
+            assert event['timestamp'] == '2019-01-09T17:44:22Z'
+            assert event['level'] == 'fatal'
+            assert event['contexts']['os']['raw_description'] == 'Mac OS X 10.14.0 (18A391)'
+            assert event['contexts']['device']['model'] == 'MacBookPro14,3'
+            assert len(event['threads']) == 55
+            assert event['threads'][5]['crashed']
+            assert event['threads'][5]['id'] == 5
+            assert event['threads'][5]['stacktrace']['frames'][0]['instruction_addr'] == '0x7fff61c7f425'
+            assert event['threads'][5]['stacktrace']['frames'][0]['package'] == 'libsystem_pthread.dylib'
+            assert event['threads'][5]['stacktrace']['registers']['r14'] == '0x1'
+            assert len(event['debug_meta']['images']) == 272
+            assert event['debug_meta']['images'][0]['type'] == 'symbolic'
+            assert event['debug_meta']['images'][0]['id'] == '2d903291-397d-3d14-bfca-52c7fb8c5e00'
+            assert event['debug_meta']['images'][0]['image_addr'] == '0x10864e000'
+            assert event['debug_meta']['images'][0]['image_size'] == 108797951
+            assert event['debug_meta']['images'][0]['arch'] == 'x86_64'
+            assert event['debug_meta']['images'][0]['name'] == '/Users/bruno/Documents/Unreal Projects/YetAnotherMac/MacNoEditor/YetAnotherMac.app/Contents/MacOS/YetAnotherMac'
+
     def upload_symbols(self):
         url = reverse(
             'sentry-api-0-dsym-files',
diff --git a/tests/sentry/utils/test_contexts_normalization.py b/tests/sentry/utils/test_contexts_normalization.py
index 023c2245e1..b5c4652684 100644
--- a/tests/sentry/utils/test_contexts_normalization.py
+++ b/tests/sentry/utils/test_contexts_normalization.py
@@ -106,6 +106,14 @@ class NormalizeOsTests(TestCase):
         normalize_os(data)
         assert data['version'] == 'Properly defined version'
 
+    # As reported by Unreal Engine crashes from macOS
+    def test_macos_unreal(self):
+        data = {'raw_description': 'Mac OS X 10.14.2 (18C54)'}
+        normalize_os(data)
+        assert data['name'] == 'macOS'
+        assert data['version'] == '10.14.2'
+        assert data['build'] == '18C54'
+
     def test_no_name(self):
         data = {}
         normalize_os(data)
