commit 89fbf7fac0a28be08103bf2b9bd5d23bc6acfe0d
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Oct 20 14:05:39 2012 -0700

    Initial working realtime code

diff --git a/src/sentry/static/sentry/coffee/collections.coffee b/src/sentry/static/sentry/coffee/collections.coffee
index cf0f5405e9..75bc28f1cf 100644
--- a/src/sentry/static/sentry/coffee/collections.coffee
+++ b/src/sentry/static/sentry/coffee/collections.coffee
@@ -2,10 +2,10 @@ window.app = app = app || {}
 
 jQuery ->
 
-    app.GroupList = class GroupList extends Backbone.Collection
+    app.ScoredList = class ScoredList extends Backbone.Collection
 
         initialize: ->
-            _.bindAll @
+            _.bindAll(@)
 
             model = app.Group
 
diff --git a/src/sentry/static/sentry/coffee/utils.coffee b/src/sentry/static/sentry/coffee/utils.coffee
new file mode 100644
index 0000000000..f201388791
--- /dev/null
+++ b/src/sentry/static/sentry/coffee/utils.coffee
@@ -0,0 +1,57 @@
+window.app = app = app || {}
+app.utils = app.utils || {}
+
+jQuery ->
+
+    app.utils.getQueryParams = ->
+        vars = {}
+        href = window.location.href;
+        if href.indexOf('?') == -1
+            return vars
+        
+        hashes = href.slice(href.indexOf('?') + 1, (if href.indexOf('#') != -1 then href.indexOf('#') else href.length)).split('&')
+        for chunk in hashes
+            hash = chunk.split('=')
+            if !hash[0] && !hash[1]
+                return
+
+            vars[hash[0]] = if hash[1] then decodeURIComponent(hash[1]).replace(/\+/, ' ') else ''
+
+        return vars
+
+    # Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
+    # © 2011 Colin Snover <http://zetafleet.com>
+    # Released under MIT license.
+    Date ->
+        origParse = Date.parse
+        numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ]
+
+        Date.parse = (date) ->
+            struct = {}
+            minutesOffset = 0
+
+            # ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
+            # before falling back to any implementation-specific date parsing, so that's what we do, even if native
+            # implementations could be faster
+            #              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
+            if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))
+                # avoid NaN timestamps caused by "undefined" values being passed to Date.UTC
+                for k in numericKeys
+                    struct[k] = +struct[k] || 0
+
+                # allow undefined days and months
+                struct[2] = (+struct[2] || 1) - 1;
+                struct[3] = +struct[3] || 1;
+
+                if struct[8] != 'Z' && struct[9]
+                    minutesOffset = struct[10] * 60 + struct[11]
+
+                    if struct[9] == '+'
+                        minutesOffset = 0 - minutesOffset
+
+                timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7])
+            
+            else
+                timestamp = if origParse then origParse(date) else NaN
+
+            return timestamp
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
index c28050c26a..356e47f95c 100644
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ b/src/sentry/static/sentry/coffee/views.coffee
@@ -2,17 +2,16 @@ window.app = app = app || {}
 
 jQuery ->
 
-    app.GroupListView = class GroupListView extends Backbone.View
-        el: '.group-list'
-        model: app.Group
-
+    app.OrderedElementsView = class OrderedElementsView extends Backbone.View
         initialize: (data) ->
 
-            _.bindAll @
+            _.bindAll(@)
 
             @$parent = $('#' + @id)
 
-            @collection = new app.GroupList
+            @queue = new app.ScoredList
+
+            @collection = new app.ScoredList
             @collection.add(data.members || []);
             @collection.on('add', @renderMemberInContainer)
             @collection.on('remove', @unrenderMember)
@@ -20,6 +19,11 @@ jQuery ->
             @collection.on('reset', @reSortMembers)
             @collection.sort()
 
+            @realtimeEnabled = data.realtimeEnabled || true
+            @poll();
+            window.setInterval(@tick, 300);
+
+
         addMember: (member) ->
             if not @hasMember(member)
                 @collection.add(member)
@@ -47,7 +51,7 @@ jQuery ->
             new_pos = @collection.indexOf(member)
 
             # create the element if it does not yet exist
-            $el = $(@id + member.id)
+            $el = $('#' + @id + member.id)
             if !$el.length
                 $el = @renderMember(member)
 
@@ -59,17 +63,12 @@ jQuery ->
             if new_pos == 0
                 @$parent.prepend($el)
             else
-                $rel = $(@id + @collection.at(new_pos - 1))
+                $rel = $('#' + @id + @collection.at(new_pos - 1))
                 if !$rel.length
                     @$parent.append($el)
                 else
                     @$parent.insertBefore($rel)
 
-            # $row.find('.sparkline').sparkline('html', {enableTagOptions: true});
-
-            # // shiny fx
-            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
-
         renderMember: (member) ->
             view = new GroupView
                 model: member
@@ -79,7 +78,67 @@ jQuery ->
             $(out.el)
 
         unrenderMember: (member) ->
-            $(@id + member.id).remove()
+            $('#' + @id + member.id).remove()
+
+        tick: ->
+            if !@queue.length
+                return
+
+            # ensure "no messages" is cleaned up
+            $('#no_messages').remove();
+
+            @addMember(@queue.pop())
+
+            # $row.find('.sparkline').sparkline('html', {enableTagOptions: true});
+
+            # # shiny fx
+            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
+
+        getPollUrl: ->
+            app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/'
+
+        poll: ->
+            if (!@realtimeEnabled)
+                window.setTimeout(@poll, 1000);
+
+            data = app.utils.getQueryParams()
+            data.view_id = app.config.viewId || undefined;
+            data.cursor = @cursor || undefined;
+
+            $.ajax
+                url: @getPollUrl()
+                type: 'get'
+                dataType: 'json'
+                data: data
+                success: (groups) =>
+                    if !groups.length
+                        setTimeout(@poll, 5000)
+                        return
+
+                    @cursor = groups[groups.length - 1].score || undefined
+
+                    for data in groups
+                        obj = @queue.get(data.id)
+                        if obj
+                            # TODO: this code is shared in updateMember above
+                            obj.set('count', data.count)
+                            obj.set('score', data.score)
+                            @queue.sort()
+                        else
+                            @queue.add(data)
+
+                    window.setTimeout(@poll, 1000)
+
+                error: =>
+                    # if an error happened lets give the server a bit of time before we poll again
+                    window.setTimeout(@poll, 10000)
+
+            # make sure we limit the number shown
+            while @collection.length > 50
+                item = @collection.pop()
+
+
+    app.GroupListView = class GroupListView extends OrderedElementsView
 
 
     app.GroupView = class GroupView extends Backbone.View
@@ -88,8 +147,8 @@ jQuery ->
         template: _.template $('#group-template').html()
 
         initialize: ->
-            _.bindAll @
-            @model.on "change:count", @updateCount
+            _.bindAll(@)
+            @model.on("change:count", @updateCount)
 
         render: ->
             data = @model.toJSON()
diff --git a/src/sentry/static/sentry/scripts/site.js b/src/sentry/static/sentry/scripts/site.js
index b332f5e300..b9ebaff5a1 100644
--- a/src/sentry/static/sentry/scripts/site.js
+++ b/src/sentry/static/sentry/scripts/site.js
@@ -40,26 +40,26 @@
   window.app = app = app || {};
 
   jQuery(function() {
-    var GroupList;
-    return app.GroupList = GroupList = (function(_super) {
+    var ScoredList;
+    return app.ScoredList = ScoredList = (function(_super) {
 
-      __extends(GroupList, _super);
+      __extends(ScoredList, _super);
 
-      function GroupList() {
-        return GroupList.__super__.constructor.apply(this, arguments);
+      function ScoredList() {
+        return ScoredList.__super__.constructor.apply(this, arguments);
       }
 
-      GroupList.prototype.initialize = function() {
+      ScoredList.prototype.initialize = function() {
         var model;
         _.bindAll(this);
         return model = app.Group;
       };
 
-      GroupList.prototype.comparator = function(member) {
+      ScoredList.prototype.comparator = function(member) {
         return -member.get('score');
       };
 
-      return GroupList;
+      return ScoredList;
 
     })(Backbone.Collection);
   });
@@ -130,32 +130,85 @@
 
   window.app = app = app || {};
 
+  app.utils = app.utils || {};
+
   jQuery(function() {
-    var GroupListView, GroupView;
-    app.GroupListView = GroupListView = (function(_super) {
+    app.utils.getQueryParams = function() {
+      var chunk, hash, hashes, href, vars, _i, _len;
+      vars = {};
+      href = window.location.href;
+      if (href.indexOf('?') === -1) {
+        return vars;
+      }
+      hashes = href.slice(href.indexOf('?') + 1, (href.indexOf('#') !== -1 ? href.indexOf('#') : href.length)).split('&');
+      for (_i = 0, _len = hashes.length; _i < _len; _i++) {
+        chunk = hashes[_i];
+        hash = chunk.split('=');
+        if (!hash[0] && !hash[1]) {
+          return;
+        }
+        vars[hash[0]] = hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '';
+      }
+      return vars;
+    };
+    return Date(function() {
+      var numericKeys, origParse;
+      origParse = Date.parse;
+      numericKeys = [1, 4, 5, 6, 7, 10, 11];
+      return Date.parse = function(date) {
+        var k, minutesOffset, struct, timestamp, _i, _len;
+        struct = {};
+        minutesOffset = 0;
+        if ((struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date))) {
+          for (_i = 0, _len = numericKeys.length; _i < _len; _i++) {
+            k = numericKeys[_i];
+            struct[k] = +struct[k] || 0;
+          }
+          struct[2] = (+struct[2] || 1) - 1;
+          struct[3] = +struct[3] || 1;
+          if (struct[8] !== 'Z' && struct[9]) {
+            minutesOffset = struct[10] * 60 + struct[11];
+            if (struct[9] === '+') {
+              minutesOffset = 0 - minutesOffset;
+            }
+          }
+          timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
+        } else {
+          timestamp = origParse ? origParse(date) : NaN;
+        }
+        return timestamp;
+      };
+    });
+  });
 
-      __extends(GroupListView, _super);
+  window.app = app = app || {};
 
-      function GroupListView() {
-        return GroupListView.__super__.constructor.apply(this, arguments);
-      }
+  jQuery(function() {
+    var GroupListView, GroupView, OrderedElementsView;
+    app.OrderedElementsView = OrderedElementsView = (function(_super) {
 
-      GroupListView.prototype.el = '.group-list';
+      __extends(OrderedElementsView, _super);
 
-      GroupListView.prototype.model = app.Group;
+      function OrderedElementsView() {
+        return OrderedElementsView.__super__.constructor.apply(this, arguments);
+      }
 
-      GroupListView.prototype.initialize = function(data) {
+      OrderedElementsView.prototype.initialize = function(data) {
         _.bindAll(this);
         this.$parent = $('#' + this.id);
-        this.collection = new app.GroupList;
+        this.queue = new app.ScoredList;
+        this.collection = new app.ScoredList;
         this.collection.add(data.members || []);
         this.collection.on('add', this.renderMemberInContainer);
         this.collection.on('remove', this.unrenderMember);
         this.collection.on('reset', this.reSortMembers);
-        return this.collection.sort();
+        this.collection.sort();
+        this.realtimeEnabled = data.realtimeEnabled || true;
+        this.poll();
+        return window.setInterval(this.tick, 300);
       };
 
-      GroupListView.prototype.addMember = function(member) {
+      OrderedElementsView.prototype.addMember = function(member) {
         if (!this.hasMember(member)) {
           return this.collection.add(member);
         } else {
@@ -163,14 +216,14 @@
         }
       };
 
-      GroupListView.prototype.reSortMembers = function() {
+      OrderedElementsView.prototype.reSortMembers = function() {
         var _this = this;
         return this.collection.each(function(member) {
           return _this.renderMemberInContainer(member);
         });
       };
 
-      GroupListView.prototype.updateMember = function(member) {
+      OrderedElementsView.prototype.updateMember = function(member) {
         var obj;
         obj = this.collection.get(member.id);
         obj.set('count', member.get('count'));
@@ -178,7 +231,7 @@
         return this.collection.sort();
       };
 
-      GroupListView.prototype.hasMember = function(member) {
+      OrderedElementsView.prototype.hasMember = function(member) {
         if (this.collection.get(member.id)) {
           return true;
         } else {
@@ -186,14 +239,14 @@
         }
       };
 
-      GroupListView.prototype.removeMember = function(member) {
+      OrderedElementsView.prototype.removeMember = function(member) {
         return this.collection.remove(member);
       };
 
-      GroupListView.prototype.renderMemberInContainer = function(member) {
+      OrderedElementsView.prototype.renderMemberInContainer = function(member) {
         var $el, $rel, new_pos;
         new_pos = this.collection.indexOf(member);
-        $el = $(this.id + member.id);
+        $el = $('#' + this.id + member.id);
         if (!$el.length) {
           $el = this.renderMember(member);
         } else if ($el.index() === new_pos) {
@@ -202,7 +255,7 @@
         if (new_pos === 0) {
           return this.$parent.prepend($el);
         } else {
-          $rel = $(this.id + this.collection.at(new_pos - 1));
+          $rel = $('#' + this.id + this.collection.at(new_pos - 1));
           if (!$rel.length) {
             return this.$parent.append($el);
           } else {
@@ -211,7 +264,7 @@
         }
       };
 
-      GroupListView.prototype.renderMember = function(member) {
+      OrderedElementsView.prototype.renderMember = function(member) {
         var out, view;
         view = new GroupView({
           model: member,
@@ -221,13 +274,81 @@
         return $(out.el);
       };
 
-      GroupListView.prototype.unrenderMember = function(member) {
-        return $(this.id + member.id).remove();
+      OrderedElementsView.prototype.unrenderMember = function(member) {
+        return $('#' + this.id + member.id).remove();
       };
 
-      return GroupListView;
+      OrderedElementsView.prototype.tick = function() {
+        if (!this.queue.length) {
+          return;
+        }
+        $('#no_messages').remove();
+        return this.addMember(this.queue.pop());
+      };
+
+      OrderedElementsView.prototype.getPollUrl = function() {
+        return app.config.urlPrefix + '/api/' + app.config.projectId + '/poll/';
+      };
+
+      OrderedElementsView.prototype.poll = function() {
+        var data, item, _results,
+          _this = this;
+        if (!this.realtimeEnabled) {
+          window.setTimeout(this.poll, 1000);
+        }
+        data = app.utils.getQueryParams();
+        data.view_id = app.config.viewId || void 0;
+        data.cursor = this.cursor || void 0;
+        $.ajax({
+          url: this.getPollUrl(),
+          type: 'get',
+          dataType: 'json',
+          data: data,
+          success: function(groups) {
+            var obj, _i, _len;
+            if (!groups.length) {
+              setTimeout(_this.poll, 5000);
+              return;
+            }
+            _this.cursor = groups[groups.length - 1].score || void 0;
+            for (_i = 0, _len = groups.length; _i < _len; _i++) {
+              data = groups[_i];
+              obj = _this.queue.get(data.id);
+              if (obj) {
+                obj.set('count', data.count);
+                obj.set('score', data.score);
+                _this.queue.sort();
+              } else {
+                _this.queue.add(data);
+              }
+            }
+            return window.setTimeout(_this.poll, 1000);
+          },
+          error: function() {
+            return window.setTimeout(_this.poll, 10000);
+          }
+        });
+        _results = [];
+        while (this.collection.length > 50) {
+          _results.push(item = this.collection.pop());
+        }
+        return _results;
+      };
+
+      return OrderedElementsView;
 
     })(Backbone.View);
+    app.GroupListView = GroupListView = (function(_super) {
+
+      __extends(GroupListView, _super);
+
+      function GroupListView() {
+        return GroupListView.__super__.constructor.apply(this, arguments);
+      }
+
+      return GroupListView;
+
+    })(OrderedElementsView);
     return app.GroupView = GroupView = (function(_super) {
 
       __extends(GroupView, _super);
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index 02f5e70d5e..07cede05c1 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -11,8 +11,6 @@
     <script>
     {% if has_realtime %}
         app.config.hasRealtime = {{ hasRealtime|to_json|safe  }};
-        app.config.projectId = {{ project.slug|to_json|safe }};
-        app.config.viewId = {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %};
         Sentry.realtime.config({
             projectId: {{ project.slug|to_json|safe }},
             viewId: {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 31b3d1222b..12490c9560 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -47,6 +47,13 @@
             defaultImage: '{% url sentry-media "sentry" 'images/sentry.png' %}',
             popupCss: '{% url sentry-media "sentry" 'styles/popup.css' %}'
         });
+        app.config.defaultImage = '{% url sentry-media "sentry" 'images/sentry.png' %}';
+        app.config.popupCss = '{% url sentry-media "sentry" 'styles/popup.css' %}';
+        app.config.mediaUrl = '{% url sentry-media "sentry" '' %}';
+        app.config.urlPrefix = {{ URL_PREFIX|to_json|safe }};
+        app.config.hasRealtime = {{ hasRealtime|to_json|safe  }};
+        app.config.projectId = {{ project.slug|to_json|safe }};
+        app.config.viewId = {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %};
         </script>
 
         {% block meta %}
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index c042388e82..0c56b12691 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -28,6 +28,7 @@ from sentry.templatetags.sentry_helpers import with_metadata
 from sentry.utils import json
 from sentry.utils.cache import cache
 from sentry.utils.db import has_trending
+from sentry.utils.javascript import to_json
 from sentry.utils.http import is_same_domain, is_valid_origin, apply_access_control_headers
 from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
@@ -222,9 +223,9 @@ def poll(request, project):
     event_list = list(event_list[offset:limit])
     handle_before_events(request, event_list)
 
-    data = transform_groups(request, event_list)
+    data = to_json(event_list, request)
 
-    response = HttpResponse(json.dumps(data))
+    response = HttpResponse(data)
     response['Content-Type'] = 'application/json'
     return response
 
