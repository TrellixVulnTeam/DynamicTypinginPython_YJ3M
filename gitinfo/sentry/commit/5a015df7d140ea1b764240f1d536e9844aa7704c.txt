commit 5a015df7d140ea1b764240f1d536e9844aa7704c
Author: Colleen O'Rourke <colleen@sentry.io>
Date:   Mon Jul 6 09:23:57 2020 -0700

    feat(Vercel): Env vars pt 2 (#19657)
    
    * feat(Vercel): Env vars pt 2

diff --git a/src/sentry/integrations/vercel/client.py b/src/sentry/integrations/vercel/client.py
index 0074deb9e2..d3922de8df 100644
--- a/src/sentry/integrations/vercel/client.py
+++ b/src/sentry/integrations/vercel/client.py
@@ -11,25 +11,28 @@ class VercelClient(ApiClient):
 
     TEAMS_URL = "/v1/teams/%s"
     USER_URL = "/www/user"
+    PROJECT_URL = "/v1/projects/%s"
     PROJECTS_URL = "/v4/projects/"
     WEBHOOK_URL = "/v1/integrations/webhooks"
     ENV_VAR_URL = "/v4/projects/%s/env"
     GET_ENV_VAR_URL = "/v5/projects/%s/env"
     SECRETS_URL = "/v2/now/secrets"
-    GET_SECRET_URL = "/v3/now/secrets/%s"
+    DELETE_ENV_VAR_URL = "/v4/projects/%s/env/%s"
 
     def __init__(self, access_token, team_id=None):
         super(VercelClient, self).__init__()
         self.access_token = access_token
         self.team_id = team_id
 
-    def request(self, method, path, data=None, params=None):
+    def request(self, method, path, data=None, params=None, allow_text=False):
         if self.team_id:
             # always need to use the team_id as a param for requests
             params = params or {}
             params["teamId"] = self.team_id
         headers = {"Authorization": u"Bearer {}".format(self.access_token)}
-        return self._request(method, path, headers=headers, data=data, params=params)
+        return self._request(
+            method, path, headers=headers, data=data, params=params, allow_text=allow_text
+        )
 
     def get_team(self):
         assert self.team_id
@@ -42,6 +45,9 @@ class VercelClient(ApiClient):
         # TODO: we will need pagination since we are limited to 20
         return self.get(self.PROJECTS_URL)["projects"]
 
+    def get_source_code_provider(self, vercel_project_id):
+        return self.get(self.PROJECT_URL % vercel_project_id)["link"]["type"]
+
     def create_deploy_webhook(self):
         data = {
             "name": "Sentry webhook",
@@ -54,9 +60,6 @@ class VercelClient(ApiClient):
     def get_env_vars(self, vercel_project_id):
         return self.get(self.GET_ENV_VAR_URL % vercel_project_id)
 
-    def get_secret(self, name):
-        return self.get(self.GET_SECRET_URL % name.lower())["uid"]
-
     def create_secret(self, vercel_project_id, name, value):
         data = {"name": name, "value": value}
         response = self.post(self.SECRETS_URL, data=data)["uid"]
@@ -66,3 +69,11 @@ class VercelClient(ApiClient):
         data = {"key": key, "value": value, "target": "production"}
         response = self.post(self.ENV_VAR_URL % vercel_project_id, data=data)
         return response
+
+    def update_env_variable(self, vercel_project_id, key, value):
+        self.delete(
+            self.DELETE_ENV_VAR_URL % (vercel_project_id, key),
+            allow_text=True,
+            params={"target": "production"},
+        )
+        return self.create_env_variable(vercel_project_id, key, value)
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index f1a20bbf46..58fc16e3a9 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from uuid import uuid4
 import six
 import logging
 
@@ -156,7 +157,6 @@ class VercelIntegration(IntegrationInstallation):
         # data = {"project_mappings": [[sentry_project_id, vercel_project_id]]}
         vercel_client = self.get_client()
         config = self.org_integration.config
-
         new_mappings = data["project_mappings"]
         old_mappings = config.get("project_mappings") or []
 
@@ -165,49 +165,64 @@ class VercelIntegration(IntegrationInstallation):
             if mapping in old_mappings:
                 continue
             [sentry_project_id, vercel_project_id] = mapping
-
             sentry_project = Project.objects.get(id=sentry_project_id)
             enabled_dsn = ProjectKey.get_default(project=sentry_project)
             if not enabled_dsn:
                 raise IntegrationError("You must have an enabled DSN to continue!")
+            source_code_provider = self.get_source_code_provider(vercel_client, vercel_project_id)
+            if not source_code_provider:
+                raise IntegrationError(
+                    "You must connect your Vercel project to a Git repository to continue!"
+                )
             sentry_project_dsn = enabled_dsn.get_dsn(public=True)
+            uuid = uuid4().hex
 
-            org_secret = self.create_secret(
-                vercel_client, vercel_project_id, "SENTRY_ORG", sentry_project.organization.slug
+            sentry_app_installation = SentryAppInstallationForProvider.objects.get(
+                organization=sentry_project.organization.id, provider="vercel"
             )
-            project_secret = self.create_secret(
-                vercel_client,
-                vercel_project_id,
-                "SENTRY_PROJECT_%s" % sentry_project_id,
-                sentry_project.slug,
+            sentry_auth_token = sentry_app_installation.get_token(
+                self.organization_id, provider="vercel"
             )
-            dsn_secret = self.create_secret(
-                vercel_client,
-                vercel_project_id,
-                "NEXT_PUBLIC_SENTRY_DSN_%s" % sentry_project_id,
+            secret_names = [
+                "SENTRY_ORG_%s" % uuid,
+                "SENTRY_PROJECT_%s" % uuid,
+                "NEXT_PUBLIC_SENTRY_DSN_%s" % uuid,
+                "SENTRY_AUTH_TOKEN_%s" % uuid,
+            ]
+            values = [
+                sentry_project.organization.slug,
+                sentry_project.slug,
                 sentry_project_dsn,
-            )
+                sentry_auth_token,
+            ]
+            env_var_names = [
+                "SENTRY_ORG",
+                "SENTRY_PROJECT",
+                "NEXT_PUBLIC_SENTRY_DSN",
+                "SENTRY_AUTH_TOKEN",
+                "VERCEL_%s_COMMIT_SHA" % source_code_provider.upper(),
+            ]
 
-            self.create_env_var(vercel_client, vercel_project_id, "SENTRY_ORG", org_secret)
-            self.create_env_var(vercel_client, vercel_project_id, "SENTRY_PROJECT", project_secret)
-            self.create_env_var(
-                vercel_client, vercel_project_id, "NEXT_PUBLIC_SENTRY_DSN", dsn_secret
-            )
+            secrets = []
+            for name, val in zip(secret_names, values):
+                secrets.append(self.create_secret(vercel_client, vercel_project_id, name, val))
+
+            secrets.append("")
+            for secret, env_var in zip(secrets, env_var_names):
+                self.create_env_var(vercel_client, vercel_project_id, env_var, secret)
 
         config.update(data)
         self.org_integration.update(config=config)
 
+    def get_source_code_provider(self, client, vercel_project_id):
+        try:
+            return client.get_source_code_provider(vercel_project_id)
+        except KeyError:
+            return None
+
     def get_env_vars(self, client, vercel_project_id):
         return client.get_env_vars(vercel_project_id)
 
-    def get_secret(self, client, name):
-        try:
-            return client.get_secret(name)
-        except ApiError as e:
-            if e.code == 404:
-                return None
-            raise
-
     def env_var_already_exists(self, client, vercel_project_id, name):
         return any(
             [
@@ -218,15 +233,15 @@ class VercelIntegration(IntegrationInstallation):
         )
 
     def create_secret(self, client, vercel_project_id, name, value):
-        secret = self.get_secret(client, name)
-        if secret:
-            return secret
-        else:
-            return client.create_secret(vercel_project_id, name, value)
+        return client.create_secret(vercel_project_id, name, value)
 
     def create_env_var(self, client, vercel_project_id, key, value):
         if not self.env_var_already_exists(client, vercel_project_id, key):
-            client.create_env_variable(vercel_project_id, key, value)
+            return client.create_env_variable(vercel_project_id, key, value)
+        self.delete_env_variable(client, vercel_project_id, key, value)
+
+    def delete_env_variable(self, client, vercel_project_id, key, value):
+        return client.update_env_variable(vercel_project_id, key, value)
 
 
 class VercelIntegrationProvider(IntegrationProvider):
diff --git a/src/sentry/models/sentryappinstallation.py b/src/sentry/models/sentryappinstallation.py
index a4eb8ef468..e301e5f3a1 100644
--- a/src/sentry/models/sentryappinstallation.py
+++ b/src/sentry/models/sentryappinstallation.py
@@ -28,6 +28,21 @@ class SentryAppInstallationForProvider(DefaultFieldsModel):
         db_table = "sentry_sentryappinstallationforprovider"
         unique_together = (("provider", "organization"),)
 
+    @classmethod
+    def get_token(cls, organization_id, provider):
+        installation_for_provider = SentryAppInstallationForProvider.objects.select_related(
+            "sentry_app_installation"
+        ).get(organization_id=organization_id, provider=provider)
+        sentry_app_installation = installation_for_provider.sentry_app_installation
+
+        # find a token associated with the installation so we can use it for authentication
+        sentry_app_installation_token = (
+            SentryAppInstallationToken.objects.select_related("api_token")
+            .filter(sentry_app_installation=sentry_app_installation)
+            .first()
+        )
+        return sentry_app_installation_token.api_token.token
+
 
 class SentryAppInstallationToken(Model):
     __core__ = False
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index 2dc2e0b32f..3a93cbb984 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -4,6 +4,8 @@ import json
 import responses
 import six
 
+from sentry.utils.compat.mock import patch
+
 from six.moves.urllib.parse import parse_qs
 from sentry.integrations.vercel import VercelIntegrationProvider
 from sentry.models import (
@@ -24,6 +26,11 @@ class VercelIntegrationTest(IntegrationTestCase):
     provider = VercelIntegrationProvider
 
     def assert_setup_flow(self, is_team=False, multi_config_org=None):
+        class MockUuid4:
+            hex = "1234567"
+
+        self.mock_uuid4 = MockUuid4
+
         responses.reset()
         access_json = {
             "user_id": "my_user_id",
@@ -167,17 +174,21 @@ class VercelIntegrationTest(IntegrationTestCase):
         with self.tasks():
             self.assert_setup_flow()
 
-        project_id = self.project.id
+        uuid = self.mock_uuid4.hex
         secret_names = [
-            "sentry_org",
-            "sentry_project_%s" % project_id,
-            "next_public_sentry_dsn_%s" % project_id,
+            "sentry_org_%s" % uuid,
+            "sentry_project_%s" % uuid,
+            "next_public_sentry_dsn_%s" % uuid,
+            "sentry_auth_token_%s" % uuid,
         ]
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/v1/projects/%s"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={"link": {"type": "github"}},
+        )
 
         for i, name in enumerate(secret_names):
-            responses.add(
-                responses.GET, "https://api.vercel.com/v3/now/secrets/%s" % name, status=404
-            )
             responses.add(
                 responses.POST, "https://api.vercel.com/v2/now/secrets", json={"uid": "sec_%s" % i},
             )
@@ -196,21 +207,33 @@ class VercelIntegrationTest(IntegrationTestCase):
                 % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
                 json={"value": "sec_%s" % i, "target": "production", "key": name},
             )
+        responses.add(
+            responses.POST,
+            "https://api.vercel.com/v4/projects/%s/env"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={"value": "", "target": "production", "key": "VERCEL_GITHUB_COMMIT_SHA"},
+        )
 
         org = self.organization
+        project_id = self.project.id
         data = {
             "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
         }
         enabled_dsn = ProjectKey.get_default(project=Project.objects.get(id=project_id)).get_dsn(
             public=True
         )
+        sentry_auth_token = SentryAppInstallationForProvider.objects.get(
+            organization=org.id, provider="vercel"
+        )
+        sentry_auth_token = sentry_auth_token.sentry_app_installation.api_token.token
         integration = Integration.objects.get(provider=self.provider.key)
         installation = integration.get_installation(org.id)
         org_integration = OrganizationIntegration.objects.get(
             organization_id=org.id, integration_id=integration.id
         )
         assert org_integration.config == {}
-        installation.update_organization_config(data)
+        with patch("sentry.integrations.vercel.integration.uuid4", new=self.mock_uuid4):
+            installation.update_organization_config(data)
         org_integration = OrganizationIntegration.objects.get(
             organization_id=org.id, integration_id=integration.id
         )
@@ -219,32 +242,46 @@ class VercelIntegrationTest(IntegrationTestCase):
         }
 
         req_params = json.loads(responses.calls[5].request.body)
-        assert req_params["name"] == "SENTRY_ORG"
+        assert req_params["name"] == "SENTRY_ORG_%s" % uuid
         assert req_params["value"] == org.slug
 
-        req_params = json.loads(responses.calls[7].request.body)
-        assert req_params["name"] == "SENTRY_PROJECT_%s" % project_id
+        req_params = json.loads(responses.calls[6].request.body)
+        assert req_params["name"] == "SENTRY_PROJECT_%s" % uuid
         assert req_params["value"] == self.project.slug
 
-        req_params = json.loads(responses.calls[9].request.body)
-        assert req_params["name"] == "NEXT_PUBLIC_SENTRY_DSN_%s" % project_id
+        req_params = json.loads(responses.calls[7].request.body)
+        assert req_params["name"] == "NEXT_PUBLIC_SENTRY_DSN_%s" % uuid
         assert req_params["value"] == enabled_dsn
 
-        req_params = json.loads(responses.calls[11].request.body)
+        req_params = json.loads(responses.calls[8].request.body)
+        assert req_params["name"] == "SENTRY_AUTH_TOKEN_%s" % uuid
+        assert req_params["value"] == sentry_auth_token
+
+        req_params = json.loads(responses.calls[10].request.body)
         assert req_params["key"] == "SENTRY_ORG"
         assert req_params["value"] == "sec_0"
         assert req_params["target"] == "production"
 
-        req_params = json.loads(responses.calls[13].request.body)
+        req_params = json.loads(responses.calls[12].request.body)
         assert req_params["key"] == "SENTRY_PROJECT"
         assert req_params["value"] == "sec_1"
         assert req_params["target"] == "production"
 
-        req_params = json.loads(responses.calls[15].request.body)
+        req_params = json.loads(responses.calls[14].request.body)
         assert req_params["key"] == "NEXT_PUBLIC_SENTRY_DSN"
         assert req_params["value"] == "sec_2"
         assert req_params["target"] == "production"
 
+        req_params = json.loads(responses.calls[16].request.body)
+        assert req_params["key"] == "SENTRY_AUTH_TOKEN"
+        assert req_params["value"] == "sec_3"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[18].request.body)
+        assert req_params["key"] == "VERCEL_GITHUB_COMMIT_SHA"
+        assert req_params["value"] == ""
+        assert req_params["target"] == "production"
+
     @responses.activate
     def test_update_org_config_vars_exist(self):
         """Test the case wherein the secrets and env vars already exist"""
@@ -252,21 +289,31 @@ class VercelIntegrationTest(IntegrationTestCase):
         with self.tasks():
             self.assert_setup_flow()
 
-        project_id = self.project.id
+        uuid = self.mock_uuid4.hex
         secret_names = [
-            "sentry_org",
-            "sentry_project_%s" % project_id,
-            "next_public_sentry_dsn_%s" % project_id,
+            "sentry_org_%s" % uuid,
+            "sentry_project_%s" % uuid,
+            "next_public_sentry_dsn_%s" % uuid,
+            "sentry_auth_token_%s" % uuid,
+        ]
+        env_var_names = [
+            "SENTRY_ORG",
+            "SENTRY_PROJECT",
+            "NEXT_PUBLIC_SENTRY_DSN",
+            "SENTRY_AUTH_TOKEN",
         ]
-        env_var_names = ["SENTRY_ORG", "SENTRY_PROJECT", "NEXT_PUBLIC_SENTRY_DSN"]
+
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/v1/projects/%s"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={"link": {"type": "github"}},
+        )
 
         for i, name in enumerate(secret_names):
             responses.add(
-                responses.GET,
-                "https://api.vercel.com/v3/now/secrets/%s" % name,
-                json={"uid": "sec_%s" % i, "name": name},
+                responses.POST, "https://api.vercel.com/v2/now/secrets", json={"uid": "sec_%s" % i},
             )
-
         for i, env_var_name in enumerate(env_var_names):
             responses.add(
                 responses.GET,
@@ -276,8 +323,32 @@ class VercelIntegrationTest(IntegrationTestCase):
                     "envs": [{"value": "sec_%s" % i, "target": "production", "key": env_var_name}],
                 },
             )
+        for i, env_var_name in enumerate(env_var_names):
+            responses.add(
+                responses.DELETE,
+                "https://api.vercel.com/v4/projects/%s/env/%s?target=%s"
+                % ("Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H", env_var_name, "production"),
+            )
+            responses.add(
+                responses.POST,
+                "https://api.vercel.com/v4/projects/%s/env"
+                % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+                json={"value": "sec_%s" % i, "target": "production", "key": env_var_name},
+            )
+        responses.add(
+            responses.DELETE,
+            "https://api.vercel.com/v4/projects/%s/env/%s?target=%s"
+            % ("Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H", "VERCEL_GITHUB_COMMIT_SHA", ""),
+        )
+        responses.add(
+            responses.POST,
+            "https://api.vercel.com/v4/projects/%s/env"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={"value": "", "target": "production", "key": "VERCEL_GITHUB_COMMIT_SHA"},
+        )
 
         org = self.organization
+        project_id = self.project.id
         data = {
             "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
         }
@@ -287,7 +358,8 @@ class VercelIntegrationTest(IntegrationTestCase):
             organization_id=org.id, integration_id=integration.id
         )
         assert org_integration.config == {}
-        installation.update_organization_config(data)
+        with patch("sentry.integrations.vercel.integration.uuid4", new=self.mock_uuid4):
+            installation.update_organization_config(data)
         org_integration = OrganizationIntegration.objects.get(
             organization_id=org.id, integration_id=integration.id
         )
@@ -295,6 +367,31 @@ class VercelIntegrationTest(IntegrationTestCase):
             "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
         }
 
+        req_params = json.loads(responses.calls[11].request.body)
+        assert req_params["key"] == "SENTRY_ORG"
+        assert req_params["value"] == "sec_0"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[14].request.body)
+        assert req_params["key"] == "SENTRY_PROJECT"
+        assert req_params["value"] == "sec_1"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[17].request.body)
+        assert req_params["key"] == "NEXT_PUBLIC_SENTRY_DSN"
+        assert req_params["value"] == "sec_2"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[20].request.body)
+        assert req_params["key"] == "SENTRY_AUTH_TOKEN"
+        assert req_params["value"] == "sec_3"
+        assert req_params["target"] == "production"
+
+        req_params = json.loads(responses.calls[22].request.body)
+        assert req_params["key"] == "VERCEL_GITHUB_COMMIT_SHA"
+        assert req_params["value"] == ""
+        assert req_params["target"] == "production"
+
     @responses.activate
     def test_upgrade_org_config_no_dsn(self):
         """Test that the function doesn't progress if there is no active DSN"""
@@ -315,6 +412,30 @@ class VercelIntegrationTest(IntegrationTestCase):
         with self.assertRaises(IntegrationError):
             installation.update_organization_config(data)
 
+    @responses.activate
+    def test_upgrade_org_config_no_source_code_provider(self):
+        """Test that the function doesn't progress if the Vercel project hasn't been connected to a Git repository"""
+
+        with self.tasks():
+            self.assert_setup_flow()
+
+        project_id = self.project.id
+        org = self.organization
+        data = {
+            "project_mappings": [[project_id, "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H"]]
+        }
+        integration = Integration.objects.get(provider=self.provider.key)
+        installation = integration.get_installation(org.id)
+
+        responses.add(
+            responses.GET,
+            "https://api.vercel.com/v1/projects/%s"
+            % "Qme9NXBpguaRxcXssZ1NWHVaM98MAL6PHDXUs1jPrgiM8H",
+            json={},
+        )
+        with self.assertRaises(IntegrationError):
+            installation.update_organization_config(data)
+
     @responses.activate
     def test_ui_hook_options(self):
         """Test that the response to the UI hook CORS pre-flight OPTIONS request is handled correctly"""
@@ -339,6 +460,7 @@ class VercelIntegrationTest(IntegrationTestCase):
                 }
             },
         )
+
         data = b"""{"configurationId":"icfg_Gdv8qI5s0h3T3xeLZvifuhCb", "teamId":{}, "user":{"id":"hIwec0PQ34UDEma7XmhCRQ3x"}}"""
 
         resp = self.client.post(path=uihook_url, data=data, content_type="application/json")
