commit 447f1e37591c9d3ee988e84be37af2d38d85d90e
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Dec 2 13:35:41 2019 -0800

    feat(plugins): adds redmine plugin (#15894)

diff --git a/setup.py b/setup.py
index bd9600ab2d..792f96aa0b 100755
--- a/setup.py
+++ b/setup.py
@@ -144,6 +144,7 @@ setup(
             "jira_ac = sentry_plugins.jira_ac",
             "jira = sentry_plugins.jira",
             "freight = sentry_plugins.freight",
+            "redmine = sentry_plugins.redmine",
             "sessionstack = sentry_plugins.sessionstack",
             "teamwork = sentry_plugins.teamwork",
         ],
@@ -162,6 +163,7 @@ setup(
             "pagerduty = sentry_plugins.pagerduty.plugin:PagerDutyPlugin",
             "pivotal = sentry_plugins.pivotal.plugin:PivotalPlugin",
             "pushover = sentry_plugins.pushover.plugin:PushoverPlugin",
+            "redmine = sentry_plugins.redmine.plugin:RedminePlugin",
             "segment = sentry_plugins.segment.plugin:SegmentPlugin",
             "sessionstack = sentry_plugins.sessionstack.plugin:SessionStackPlugin",
             "slack = sentry_plugins.slack.plugin:SlackPlugin",
diff --git a/src/sentry_plugins/redmine/__init__.py b/src/sentry_plugins/redmine/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/sentry_plugins/redmine/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry_plugins/redmine/client.py b/src/sentry_plugins/redmine/client.py
new file mode 100644
index 0000000000..8d4f9f2235
--- /dev/null
+++ b/src/sentry_plugins/redmine/client.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from sentry import http
+from sentry.utils import json
+
+
+class RedmineClient(object):
+    def __init__(self, host, key):
+        self.host = host.rstrip("/")
+        self.key = key
+
+    def request(self, method, path, data=None):
+        headers = {"X-Redmine-API-Key": self.key, "Content-Type": "application/json"}
+        url = "{}{}".format(self.host, path)
+        session = http.build_session()
+        req = getattr(session, method.lower())(url, json=data, headers=headers)
+        return json.loads(req.text)
+
+    def get_projects(self):
+        limit = 100
+        projects = []
+
+        def get_response(limit, offset):
+            return self.request("GET", "/projects.json?limit=%s&offset=%s" % (limit, offset))
+
+        response = get_response(limit, 0)
+
+        while len(response["projects"]):
+            projects.extend(response["projects"])
+            response = get_response(limit, response["offset"] + response["limit"])
+
+        return {"projects": projects}
+
+    def get_trackers(self):
+        response = self.request("GET", "/trackers.json")
+        return response
+
+    def get_priorities(self):
+        response = self.request("GET", "/enumerations/issue_priorities.json")
+        return response
+
+    def create_issue(self, data):
+        response = self.request("POST", "/issues.json", data={"issue": data})
+
+        if "issue" not in response or "id" not in response["issue"]:
+            raise Exception("Unable to create redmine ticket")
+
+        return response
diff --git a/src/sentry_plugins/redmine/forms.py b/src/sentry_plugins/redmine/forms.py
new file mode 100644
index 0000000000..ca7bdd35c3
--- /dev/null
+++ b/src/sentry_plugins/redmine/forms.py
@@ -0,0 +1,109 @@
+from __future__ import absolute_import
+import json
+
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+
+from .client import RedmineClient
+
+
+class RedmineOptionsForm(forms.Form):
+    host = forms.URLField(help_text=_("e.g. http://bugs.redmine.org"))
+    key = forms.CharField(
+        widget=forms.TextInput(attrs={"class": "span9"}),
+        help_text="Your API key is available on your account page after enabling the Rest API (Administration -> Settings -> Authentication)",
+    )
+    project_id = forms.TypedChoiceField(label="Project", coerce=int)
+    tracker_id = forms.TypedChoiceField(label="Tracker", coerce=int)
+    default_priority = forms.TypedChoiceField(label="Default Priority", coerce=int)
+    extra_fields = forms.CharField(
+        widget=forms.Textarea(attrs={"rows": 5, "class": "span9"}),
+        help_text="Extra attributes (custom fields, status id, etc.) in JSON format",
+        label="Extra Fields",
+        required=False,
+    )
+
+    def __init__(self, data=None, *args, **kwargs):
+        super(RedmineOptionsForm, self).__init__(data=data, *args, **kwargs)
+
+        initial = kwargs.get("initial") or {}
+        for key, value in self.data.items():
+            initial[key.lstrip(self.prefix or "")] = value
+
+        has_credentials = all(initial.get(k) for k in ("host", "key"))
+        if has_credentials:
+            client = RedmineClient(initial["host"], initial["key"])
+            try:
+                projects = client.get_projects()
+            except Exception:
+                has_credentials = False
+            else:
+                project_choices = [
+                    (p["id"], "%s (%s)" % (p["name"], p["identifier"]))
+                    for p in projects["projects"]
+                ]
+                self.fields["project_id"].choices = project_choices
+
+        if has_credentials:
+            try:
+                trackers = client.get_trackers()
+            except Exception:
+                del self.fields["tracker_id"]
+            else:
+                tracker_choices = [(p["id"], p["name"]) for p in trackers["trackers"]]
+                self.fields["tracker_id"].choices = tracker_choices
+
+            try:
+                priorities = client.get_priorities()
+            except Exception:
+                del self.fields["default_priority"]
+            else:
+                tracker_choices = [(p["id"], p["name"]) for p in priorities["issue_priorities"]]
+                self.fields["default_priority"].choices = tracker_choices
+
+        if not has_credentials:
+            del self.fields["project_id"]
+            del self.fields["tracker_id"]
+            del self.fields["default_priority"]
+
+    def clean(self):
+        cd = self.cleaned_data
+        if cd.get("host") and cd.get("key"):
+            client = RedmineClient(cd["host"], cd["key"])
+            try:
+                client.get_projects()
+            except Exception:
+                raise forms.ValidationError("There was an issue authenticating with Redmine")
+        return cd
+
+    def clean_host(self):
+        """
+        Strip forward slashes off any url passed through the form.
+        """
+        url = self.cleaned_data.get("host")
+        if url:
+            return url.rstrip("/")
+        return url
+
+    def clean_extra_fields(self):
+        """
+        Ensure that the value provided is either a valid JSON dictionary,
+        or the empty string.
+        """
+        extra_fields_json = self.cleaned_data.get("extra_fields").strip()
+        if not extra_fields_json:
+            return ""
+
+        try:
+            extra_fields_dict = json.loads(extra_fields_json)
+        except ValueError:
+            raise forms.ValidationError("Invalid JSON specified")
+
+        if not isinstance(extra_fields_dict, dict):
+            raise forms.ValidationError("JSON dictionary must be specified")
+        return json.dumps(extra_fields_dict, indent=4)
+
+
+class RedmineNewIssueForm(forms.Form):
+    title = forms.CharField(max_length=200, widget=forms.TextInput(attrs={"class": "span9"}))
+    description = forms.CharField(widget=forms.Textarea(attrs={"class": "span9"}))
diff --git a/src/sentry_plugins/redmine/plugin.py b/src/sentry_plugins/redmine/plugin.py
new file mode 100644
index 0000000000..5f8a233722
--- /dev/null
+++ b/src/sentry_plugins/redmine/plugin.py
@@ -0,0 +1,225 @@
+from __future__ import absolute_import
+import json
+import six
+
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.exceptions import PluginError
+from sentry.plugins.bases.issue import IssuePlugin
+from sentry.utils.http import absolute_uri
+import sentry
+
+from .client import RedmineClient
+from .forms import RedmineNewIssueForm
+
+
+class RedminePlugin(IssuePlugin):
+    author = "Sentry"
+    author_url = "https://github.com/getsentry/sentry"
+    version = sentry.VERSION
+    description = "Integrate Redmine issue tracking by linking a user account to a project."
+    resource_links = [
+        ("Bug Tracker", "https://github.com/getsentry/sentry/issues"),
+        ("Source", "https://github.com/getsentry/sentry"),
+    ]
+
+    slug = "redmine"
+    title = _("Redmine")
+    conf_title = "Redmine"
+    conf_key = "redmine"
+
+    new_issue_form = RedmineNewIssueForm
+
+    def __init__(self):
+        super(RedminePlugin, self).__init__()
+        self.client_errors = []
+        self.fields = []
+
+    def has_project_conf(self):
+        return True
+
+    def is_configured(self, project, **kwargs):
+        return all((self.get_option(k, project) for k in ("host", "key", "project_id")))
+
+    def get_new_issue_title(self, **kwargs):
+        return "Create Redmine Task"
+
+    def get_initial_form_data(self, request, group, event, **kwargs):
+        return {
+            "description": self._get_group_description(request, group, event),
+            "title": self._get_group_title(request, group, event),
+        }
+
+    def _get_group_description(self, request, group, event):
+        output = [absolute_uri(group.get_absolute_url())]
+        body = self._get_group_body(request, group, event)
+        if body:
+            output.extend(["", "<pre>", body, "</pre>"])
+        return "\n".join(output)
+
+    def get_client(self, project):
+        return RedmineClient(
+            host=self.get_option("host", project), key=self.get_option("key", project)
+        )
+
+    def create_issue(self, group, form_data, **kwargs):
+        """
+        Create a Redmine issue
+        """
+        client = self.get_client(group.project)
+        default_priority = self.get_option("default_priority", group.project)
+        if default_priority is None:
+            default_priority = 4
+
+        issue_dict = {
+            "project_id": self.get_option("project_id", group.project),
+            "tracker_id": self.get_option("tracker_id", group.project),
+            "priority_id": default_priority,
+            "subject": form_data["title"].encode("utf-8"),
+            "description": form_data["description"].encode("utf-8"),
+        }
+
+        extra_fields_str = self.get_option("extra_fields", group.project)
+        if extra_fields_str:
+            extra_fields = json.loads(extra_fields_str)
+        else:
+            extra_fields = {}
+        issue_dict.update(extra_fields)
+
+        response = client.create_issue(issue_dict)
+        return response["issue"]["id"]
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        host = self.get_option("host", group.project)
+        return "{}/issues/{}".format(host.rstrip("/"), issue_id)
+
+    def build_config(self):
+        host = {
+            "name": "host",
+            "label": "Host",
+            "type": "text",
+            "help": "e.g. http://bugs.redmine.org",
+            "required": True,
+        }
+        key = {
+            "name": "key",
+            "label": "Key",
+            "type": "text",
+            "help": "Your API key is available on your account page after enabling the Rest API (Administration -> Settings -> Authentication)",
+            "required": True,
+        }
+        project_id = {
+            "name": "project_id",
+            "label": "Project*",
+            "type": "select",
+            "choices": [],
+            "required": False,
+        }
+        tracker_id = {
+            "name": "tracker_id",
+            "label": "Tracker*",
+            "type": "select",
+            "choices": [],
+            "required": False,
+        }
+        default_priority = {
+            "name": "default_priority",
+            "label": "Default Priority*",
+            "type": "select",
+            "choices": [],
+            "required": False,
+        }
+        extra_fields = {
+            "name": "extra_fields",
+            "label": "Extra Fields",
+            "type": "text",
+            "help": "Extra attributes (custom fields, status id, etc.) in JSON format",
+            "required": False,
+        }
+        return [host, key, project_id, tracker_id, default_priority, extra_fields]
+
+    def add_choices(self, field_name, choices, default):
+        for field in self.fields:
+            if field_name == field["name"]:
+                field["choices"] = choices
+                field["default"] = default
+                return
+
+    def remove_field(self, field_name):
+        for field in self.fields:
+            if field["name"] == field_name:
+                self.fields.remove(field)
+                return
+
+    def build_initial(self, inital_args, project):
+        initial = {}
+        fields = ["host", "key", "project_id", "tracker_id", "default_priority", "extra_fields"]
+        for field in fields:
+            value = inital_args.get(field) or self.get_option(field, project)
+            if value is not None:
+                initial[field] = value
+        return initial
+
+    def get_config(self, project, **kwargs):
+        self.client_errors = []
+        self.fields = self.build_config()
+        initial_args = kwargs.get("initial") or {}
+        initial = self.build_initial(initial_args, project)
+
+        has_credentials = all(initial.get(k) for k in ("host", "key"))
+        if has_credentials:
+            client = RedmineClient(initial["host"], initial["key"])
+            try:
+                projects = client.get_projects()
+            except Exception:
+                has_credentials = False
+                self.client_errors.append("There was an issue authenticating with Redmine")
+            else:
+                choices_value = self.get_option("project_id", project)
+                project_choices = [("", "--")] if not choices_value else []
+                project_choices += [
+                    (p["id"], "%s (%s)" % (p["name"], p["identifier"]))
+                    for p in projects["projects"]
+                ]
+                self.add_choices("project_id", project_choices, choices_value)
+
+        if has_credentials:
+            try:
+                trackers = client.get_trackers()
+            except Exception:
+                self.remove_field("tracker_id")
+            else:
+                choices_value = self.get_option("tracker_id", project)
+                tracker_choices = [("", "--")] if not choices_value else []
+                tracker_choices += [(p["id"], p["name"]) for p in trackers["trackers"]]
+                self.add_choices("tracker_id", tracker_choices, choices_value)
+
+            try:
+                priorities = client.get_priorities()
+            except Exception:
+                self.remove_field("default_priority")
+            else:
+                choices_value = self.get_option("default_priority", project)
+                tracker_choices = [("", "--")] if not choices_value else []
+                tracker_choices += [(p["id"], p["name"]) for p in priorities["issue_priorities"]]
+                self.add_choices("default_priority", tracker_choices, choices_value)
+
+        if not has_credentials:
+            for field_name in ["project_id", "tracker_id", "default_priority", "extra_fields"]:
+                self.remove_field(field_name)
+
+        return self.fields
+
+    def validate_config(self, project, config, actor):
+        super(RedminePlugin, self).validate_config(project, config, actor)
+        self.client_errors = []
+
+        for field in self.fields:
+            if field["name"] in ["project_id", "tracker_id", "default_priority"]:
+                if not config[field["name"]]:
+                    self.logger.exception(six.text_type("{} required.".format(field["name"])))
+                    self.client_errors.append(field["name"])
+
+        if self.client_errors:
+            raise PluginError(", ".join(self.client_errors) + " required.")
+        return config
