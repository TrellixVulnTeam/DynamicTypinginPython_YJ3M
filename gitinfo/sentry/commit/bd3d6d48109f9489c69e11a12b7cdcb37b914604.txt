commit bd3d6d48109f9489c69e11a12b7cdcb37b914604
Author: Tony <Zylphrex@users.noreply.github.com>
Date:   Mon Jun 8 16:33:22 2020 -0400

    feat(async-csv): Limit the number of columns for exports to 20 (#19221)

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 50df53bc1e..c8231149e0 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -21,6 +21,7 @@ from sentry.api.serializers import EventSerializer, serialize, SimpleEventSerial
 from sentry import eventstore, features
 from sentry.snuba import discover
 from sentry.utils import snuba
+from sentry.utils.snuba import MAX_FIELDS
 from sentry.utils.http import absolute_uri
 from sentry.models.project import Project
 
@@ -133,9 +134,11 @@ class OrganizationEventsV2Endpoint(OrganizationEventsV2EndpointBase):
             if not has_global_views and len(params.get("project_id", [])) > 1:
                 raise ParseError(detail="You cannot view events from multiple projects.")
 
-            if len(request.GET.getlist("field")) > 20:
+            if len(request.GET.getlist("field")) > MAX_FIELDS:
                 raise ParseError(
-                    detail="You can view up to 20 fields at a time. Please delete some and try again."
+                    detail="You can view up to {0} fields at a time. Please delete some and try again.".format(
+                        MAX_FIELDS
+                    )
                 )
 
         def data_fn(offset, limit):
diff --git a/src/sentry/data_export/endpoints/data_export.py b/src/sentry/data_export/endpoints/data_export.py
index b1f0271434..d2398e9c3f 100644
--- a/src/sentry/data_export/endpoints/data_export.py
+++ b/src/sentry/data_export/endpoints/data_export.py
@@ -4,6 +4,7 @@ import six
 from django.core.exceptions import ValidationError
 from rest_framework import serializers
 from rest_framework.response import Response
+from rest_framework.exceptions import ParseError
 from sentry import features
 from sentry.api.base import EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint, OrganizationDataExportPermission
@@ -11,6 +12,7 @@ from sentry.api.serializers import serialize
 from sentry.models import Environment
 from sentry.utils import metrics
 from sentry.utils.compat import map
+from sentry.utils.snuba import MAX_FIELDS
 
 from ..base import ExportQueryType
 from ..models import ExportedData
@@ -64,6 +66,13 @@ class DataExportEndpoint(OrganizationEndpoint, EnvironmentMixin):
         if data["query_type"] == ExportQueryType.DISCOVER_STR:
             if not features.has("organizations:discover-basic", organization, actor=request.user):
                 return Response(status=403)
+
+            if len(data["query_info"].get("field", [])) > MAX_FIELDS:
+                detail = "You can export up to {0} fields at a time. Please delete some and try again.".format(
+                    MAX_FIELDS
+                )
+                raise ParseError(detail=detail)
+
             if "project" not in data["query_info"]:
                 projects = self.get_projects(request, organization)
                 data["query_info"]["project"] = [project.id for project in projects]
diff --git a/src/sentry/static/sentry/app/components/dataExport.tsx b/src/sentry/static/sentry/app/components/dataExport.tsx
index 25fb878a41..918e55db05 100644
--- a/src/sentry/static/sentry/app/components/dataExport.tsx
+++ b/src/sentry/static/sentry/app/components/dataExport.tsx
@@ -80,10 +80,11 @@ class DataExport extends React.Component<Props, State> {
         );
         this.setState({inProgress: true, dataExportId});
       })
-      .catch(_err => {
-        addErrorMessage(
-          t("We tried our hardest, but we couldn't export your data. Give it another go.")
-        );
+      .catch(err => {
+        const message =
+          err?.responseJSON?.detail ??
+          "We tried our hardest, but we couldn't export your data. Give it another go.";
+        addErrorMessage(t(message));
       });
   };
 
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 0f9e71f12a..ef931b2d4e 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -41,6 +41,10 @@ from sentry.utils.compat import map
 MAX_ISSUES = 500
 MAX_HASHES = 5000
 
+# We limit the number of fields an user can ask for
+# in a single query to lessen the load on snuba
+MAX_FIELDS = 20
+
 SAFE_FUNCTION_RE = re.compile(r"-?[a-zA-Z_][a-zA-Z0-9_]*$")
 QUOTED_LITERAL_RE = re.compile(r"^'.*'$")
 
diff --git a/tests/js/spec/components/dataExport.spec.jsx b/tests/js/spec/components/dataExport.spec.jsx
index 8ccd98f3cf..7176a8cd2b 100644
--- a/tests/js/spec/components/dataExport.spec.jsx
+++ b/tests/js/spec/components/dataExport.spec.jsx
@@ -2,9 +2,12 @@ import React from 'react';
 
 import {mountWithTheme} from 'sentry-test/enzyme';
 
+import {addErrorMessage} from 'app/actionCreators/indicator';
 import Button from 'app/components/button';
 import WrappedDataExport, {DataExport} from 'app/components/dataExport';
 
+jest.mock('app/actionCreators/indicator');
+
 describe('DataExport', function() {
   const mockUnauthorizedOrg = TestStubs.Organization({
     features: [],
@@ -119,4 +122,39 @@ describe('DataExport', function() {
     expect(wrapper.find(DataExport).state('inProgress')).toEqual(false);
     expect(wrapper.find(DataExport).state('dataExportId')).toBeUndefined();
   });
+
+  it('should display default error message if non provided', async function() {
+    const url = `/organizations/${mockAuthorizedOrg.slug}/data-export/`;
+    MockApiClient.addMockResponse({
+      url,
+      method: 'POST',
+      statusCode: 400,
+    });
+    const wrapper = mountWithTheme(
+      <WrappedDataExport payload={mockPayload} />,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    wrapper.find('button').simulate('click');
+    await tick();
+    expect(addErrorMessage).toHaveBeenCalledWith(
+      "We tried our hardest, but we couldn't export your data. Give it another go."
+    );
+  });
+
+  it('should display provided error message', async function() {
+    const url = `/organizations/${mockAuthorizedOrg.slug}/data-export/`;
+    MockApiClient.addMockResponse({
+      url,
+      method: 'POST',
+      statusCode: 400,
+      body: {detail: 'uh oh'},
+    });
+    const wrapper = mountWithTheme(
+      <WrappedDataExport payload={mockPayload} />,
+      mockRouterContext(mockAuthorizedOrg)
+    );
+    wrapper.find('button').simulate('click');
+    await tick();
+    expect(addErrorMessage).toHaveBeenCalledWith('uh oh');
+  });
 });
diff --git a/tests/sentry/data_export/endpoints/test_data_export.py b/tests/sentry/data_export/endpoints/test_data_export.py
index 4d7075107b..31fef92216 100644
--- a/tests/sentry/data_export/endpoints/test_data_export.py
+++ b/tests/sentry/data_export/endpoints/test_data_export.py
@@ -4,13 +4,14 @@ import six
 
 from sentry.data_export.base import ExportStatus, ExportQueryType
 from sentry.data_export.models import ExportedData
+from sentry.utils.snuba import MAX_FIELDS
 from sentry.testutils import APITestCase
 
 
 class DataExportTest(APITestCase):
     endpoint = "sentry-api-0-organization-data-export"
     method = "post"
-    payload = {"query_type": "Issues-by-Tag", "query_info": {"env": "test"}}
+    payload = {"query_type": ExportQueryType.ISSUES_BY_TAG_STR, "query_info": {"env": "test"}}
 
     def setUp(self):
         self.user = self.create_user("user1@example.com")
@@ -82,3 +83,20 @@ class DataExportTest(APITestCase):
             },
             "status": data_export.status,
         }
+
+    def test_export_too_many_fields(self):
+        """
+        Ensures that if too many fields are requested, returns a 400 status code with the
+        corresponding error message.
+        """
+        payload = {
+            "query_type": ExportQueryType.DISCOVER_STR,
+            "query_info": {"env": "test", "field": ["id"] * (MAX_FIELDS + 1)},
+        }
+        with self.feature(
+            {"organizations:data-export": True, "organizations:discover-basic": True}
+        ):
+            response = self.get_valid_response(self.organization.slug, status_code=400, **payload)
+        assert response.data == {
+            "detail": "You can export up to 20 fields at a time. Please delete some and try again."
+        }
