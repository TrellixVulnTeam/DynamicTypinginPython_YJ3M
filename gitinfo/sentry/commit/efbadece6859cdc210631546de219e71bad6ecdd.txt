commit efbadece6859cdc210631546de219e71bad6ecdd
Author: Jan Michael Auer <account@jauer.org>
Date:   Fri Nov 23 11:32:55 2018 +0100

    feat(interfaces): Make most interfaces handle nulls gracefully (#10737)

diff --git a/src/sentry/interfaces/breadcrumbs.py b/src/sentry/interfaces/breadcrumbs.py
index 69b9f6f1de..6ce56ae02f 100644
--- a/src/sentry/interfaces/breadcrumbs.py
+++ b/src/sentry/interfaces/breadcrumbs.py
@@ -14,7 +14,7 @@ import six
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.utils import json
-from sentry.utils.safe import trim
+from sentry.utils.safe import get_path, trim
 from sentry.utils.dates import to_timestamp, to_datetime, parse_timestamp
 
 
@@ -52,9 +52,8 @@ class Breadcrumbs(Interface):
     @classmethod
     def to_python(cls, data):
         values = []
-        for crumb in data.get('values') or ():
-            if crumb is None:
-                continue
+        for index, crumb in enumerate(get_path(data, 'values', filter=True, default=())):
+            # TODO(ja): Handle already invalid and None breadcrumbs
 
             try:
                 values.append(cls.normalize_crumb(crumb))
diff --git a/src/sentry/interfaces/contexts.py b/src/sentry/interfaces/contexts.py
index 645a7ede2a..62aaf52bd5 100644
--- a/src/sentry/interfaces/contexts.py
+++ b/src/sentry/interfaces/contexts.py
@@ -13,9 +13,9 @@ import string
 
 from django.utils.encoding import force_text
 
-from sentry.utils.safe import trim
 from sentry.interfaces.base import Interface
 from sentry.utils.contexts_normalization import normalize_os, normalize_runtime
+from sentry.utils.safe import get_path, trim
 
 __all__ = ('Contexts', )
 
@@ -59,19 +59,18 @@ class ContextType(object):
 
     @classmethod
     def values_for_data(cls, data):
-        contexts = data.get('contexts') or {}
         rv = []
-        for context in six.itervalues(contexts):
-            if context.get('type') == cls.type:
+        for context in six.itervalues(data.get('contexts') or {}):
+            if context and context.get('type') == cls.type:
                 rv.append(context)
         return rv
 
     @classmethod
     def primary_value_for_data(cls, data):
-        contexts = data.get('contexts') or {}
-        val = contexts.get(cls.type)
+        val = get_path(data, 'contexts', cls.type)
         if val and val.get('type') == cls.type:
             return val
+
         rv = cls.values_for_data(data)
         if len(rv) == 1:
             return rv[0]
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 790d36f8aa..513271ec86 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -19,7 +19,7 @@ from sentry.interfaces.base import Interface, InterfaceValidationError
 from sentry.interfaces.schemas import validate_and_default_interface
 from sentry.interfaces.stacktrace import Stacktrace, slim_frame_data
 from sentry.utils import json
-from sentry.utils.safe import trim
+from sentry.utils.safe import get_path, trim
 
 _type_value_re = re.compile('^(\w+):(.*)$')
 
@@ -554,7 +554,7 @@ def normalize_mechanism_errno(errno, sdk):
     if not sdk:
         return
 
-    if 'name' not in errno:
+    if not errno.get('name'):
         errnos = WELL_KNOWN_ERRNO.get(sdk, {})
         name = errnos.get(errno['number'])
         if name:
@@ -565,7 +565,7 @@ def normalize_mechanism_signal(signal, sdk):
     if not sdk:
         return
 
-    if 'name' not in signal:
+    if not signal.get('name'):
         signals = WELL_KNOWN_SIGNALS.get(sdk, {})
         name = signals.get(signal['number'])
         if name:
@@ -574,7 +574,7 @@ def normalize_mechanism_signal(signal, sdk):
     if sdk != 'darwin':
         return
 
-    if 'code' in signal and 'code_name' not in signal:
+    if signal.get('code') is not None and not signal.get('code_name'):
         codes = WELL_KNOWN_SIGNAL_CODES.get(signal['number'], {})
         code_name = codes.get(signal['code'])
         if code_name:
@@ -582,18 +582,17 @@ def normalize_mechanism_signal(signal, sdk):
 
 
 def normalize_mechanism_mach_exception(mach):
-    if 'name' not in mach:
+    if not mach.get('name'):
         name = WELL_KNOWN_MACH_EXCEPTIONS.get(mach['exception'])
         if name:
             mach['name'] = name
 
 
 def normalize_mechanism_meta(mechanism, sdk_info=None):
-    if mechanism is None or 'meta' not in mechanism:
+    meta = get_path(mechanism, 'meta')
+    if not meta:
         return
 
-    meta = mechanism['meta']
-
     sdk_name = sdk_info['sdk_name'].lower() if sdk_info else ''
     if sdk_name in ('ios', 'watchos', 'tvos', 'macos'):
         sdk = 'darwin'
@@ -742,8 +741,8 @@ class Mechanism(Interface):
         if not data.get('type'):
             raise InterfaceValidationError("No 'type' present")
 
-        meta = data.get('meta', {})
-        mach_exception = meta.get('mach_exception')
+        mechanism_meta = data.get('meta') or {}
+        mach_exception = mechanism_meta.get('mach_exception')
         if mach_exception is not None:
             mach_exception = prune_empty_keys({
                 'exception': mach_exception['exception'],
@@ -752,7 +751,7 @@ class Mechanism(Interface):
                 'name': mach_exception.get('name'),
             })
 
-        signal = meta.get('signal')
+        signal = mechanism_meta.get('signal')
         if signal is not None:
             signal = prune_empty_keys({
                 'number': signal['number'],
@@ -761,7 +760,7 @@ class Mechanism(Interface):
                 'code_name': signal.get('code_name'),
             })
 
-        errno = meta.get('errno')
+        errno = mechanism_meta.get('errno')
         if errno is not None:
             errno = prune_empty_keys({
                 'number': errno['number'],
@@ -831,7 +830,7 @@ class SingleException(Interface):
         if not (data.get('type') or data.get('value')):
             raise InterfaceValidationError("No 'type' or 'value' present")
 
-        if data.get('stacktrace') and data['stacktrace'].get('frames'):
+        if get_path(data, 'stacktrace', 'frames', filter=True):
             stacktrace = Stacktrace.to_python(
                 data['stacktrace'],
                 slim_frames=slim_frames,
@@ -839,7 +838,7 @@ class SingleException(Interface):
         else:
             stacktrace = None
 
-        if data.get('raw_stacktrace') and data['raw_stacktrace'].get('frames'):
+        if get_path(data, 'raw_stacktrace', 'frames', filter=True):
             raw_stacktrace = Stacktrace.to_python(
                 data['raw_stacktrace'], slim_frames=slim_frames, raw=True
             )
@@ -990,32 +989,32 @@ class Exception(Interface):
 
     score = 2000
 
+    def _values(self):
+        return get_path(self.values, filter=True)
+
     def __getitem__(self, key):
-        return self.values[key]
+        return self._values()[key]
 
     def __iter__(self):
-        return iter(self.values)
+        return iter(self._values())
 
     def __len__(self):
-        return len(self.values)
+        return len(self._values())
 
     @classmethod
     def to_python(cls, data):
         if data and 'values' not in data and 'exc_omitted' not in data:
             data = {"values": [data]}
-        values = data.get('values', [])
-
-        if values is None:
-            values = []
 
+        values = get_path(data, 'values', default=[])
         if not isinstance(values, list):
             raise InterfaceValidationError("Invalid value for 'values'")
 
         kwargs = {
-            'values': [v and SingleException.to_python(
-                v,
-                slim_frames=False,
-            ) for v in values],
+            'values': [
+                v and SingleException.to_python(v, slim_frames=False)
+                for v in values
+            ],
         }
 
         if data.get('exc_omitted'):
@@ -1030,6 +1029,9 @@ class Exception(Interface):
         slim_exception_data(instance)
         return instance
 
+    # TODO(ja): Fix all following methods when to_python is refactored. All
+    # methods below might throw if None exceptions are in ``values``.
+
     def to_json(self):
         return {
             'values': [v and v.to_json() for v in self.values],
@@ -1051,7 +1053,7 @@ class Exception(Interface):
         # optimize around the fact that some exceptions might have stacktraces
         # while others may not and we ALWAYS want stacktraces over values
         output = []
-        for value in self.values:
+        for value in self._values():
             if not value or not value.stacktrace:
                 continue
             stack_hash = value.stacktrace.get_hash(
@@ -1063,7 +1065,7 @@ class Exception(Interface):
                 output.append(value.type)
 
         if not output:
-            for value in self.values:
+            for value in self._values():
                 if value:
                     output.extend(value.get_hash(platform=platform))
 
diff --git a/src/sentry/utils/contexts_normalization.py b/src/sentry/utils/contexts_normalization.py
index ab24e0981d..5c8302ad1f 100644
--- a/src/sentry/utils/contexts_normalization.py
+++ b/src/sentry/utils/contexts_normalization.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 import re
 
 from ua_parser.user_agent_parser import Parse
+from sentry.utils.safe import setdefault_path
 
 # Environment.OSVersion (GetVersionEx) or RuntimeInformation.OSDescription, on Windows
 _windows_re = re.compile('^(Microsoft )?Windows (NT )?(?P<version>\d+\.\d+\.\d+).*$')
@@ -107,11 +108,10 @@ def _inject_browser_context(data, user_agent):
     try:
         if ua['family'] == 'Other':
             return
-        if data.get('contexts', {}).get('browser', None) is None:
-            data['contexts']['browser'] = {
-                'name': ua['family'],
-                'version': _get_version(ua),
-            }
+        setdefault_path(data, 'contexts', 'browser', value={
+            'name': ua['family'],
+            'version': _get_version(ua),
+        })
     except KeyError:
         pass
 
@@ -121,11 +121,10 @@ def _inject_os_context(data, user_agent):
     try:
         if ua['family'] == 'Other':
             return
-        if data.get('contexts', {}).get('os', None) is None:
-            data['contexts']['os'] = {
-                'name': ua['family'],
-                'version': _get_version(ua),
-            }
+        setdefault_path(data, 'contexts', 'os', value={
+            'name': ua['family'],
+            'version': _get_version(ua),
+        })
     except KeyError:
         pass
 
@@ -135,12 +134,12 @@ def _inject_device_context(data, user_agent):
     try:
         if ua['family'] == 'Other':
             return
-        if data.get('contexts', {}).get('device', None) is None:
-            data['contexts']['device'] = {
-                'family': ua['family'],
-                'model': ua['model'],
-                'brand': ua['brand'],
-            }
+        setdefault_path(data, 'contexts', 'device', value={
+            'family': ua['family'],
+            'model': ua['model'],
+            'brand': ua['brand'],
+        })
+
     except KeyError:
         pass
 
@@ -150,7 +149,7 @@ def normalize_user_agent(data):
     if not user_agent:
         return
 
-    data.setdefault('contexts', {})
+    setdefault_path(data, 'contexts', value={})
 
     _inject_browser_context(data, user_agent)
     _inject_os_context(data, user_agent)
diff --git a/tests/sentry/interfaces/test_exception.py b/tests/sentry/interfaces/test_exception.py
index d7148aed52..d82280f740 100644
--- a/tests/sentry/interfaces/test_exception.py
+++ b/tests/sentry/interfaces/test_exception.py
@@ -75,7 +75,7 @@ class ExceptionTest(TestCase):
                 'module': 'foo.bar',
             }])
         )
-        assert type(inst.values[0]) is SingleException
+        assert isinstance(inst.values[0], SingleException)
         assert inst.values[0].type == 'ValueError'
         assert inst.values[0].value == 'hello world'
         assert inst.values[0].module == 'foo.bar'
@@ -88,7 +88,7 @@ class ExceptionTest(TestCase):
                 'module': 'foo.bar',
             }
         )
-        assert type(inst.values[0]) is SingleException
+        assert isinstance(inst.values[0], SingleException)
         assert inst.values[0].type == 'ValueError'
         assert inst.values[0].value == 'hello world'
         assert inst.values[0].module == 'foo.bar'
@@ -328,6 +328,16 @@ ValueError: hello world
         context = inst.get_api_context()
         assert context['values'][0]['mechanism']['type'] == 'generic'
 
+    def test_iteration(self):
+        inst = Exception.to_python({
+            'values': [None, {'type': 'ValueError'}, None]
+        })
+
+        assert len(inst) == 1
+        assert inst[0].type == 'ValueError'
+        for exc in inst:
+            assert exc.type == 'ValueError'
+
 
 class SingleExceptionTest(TestCase):
     @fixture
diff --git a/tests/sentry/utils/test_contexts_normalization.py b/tests/sentry/utils/test_contexts_normalization.py
index 81e1bcefb1..023c2245e1 100644
--- a/tests/sentry/utils/test_contexts_normalization.py
+++ b/tests/sentry/utils/test_contexts_normalization.py
@@ -186,6 +186,14 @@ class NormalizeUserAgentTests(TestCase):
         assert self.data['contexts']['device']['family'] == 'iPhone'
         assert self.data['contexts']['device']['model'] == 'iPhone'
 
+    def test_contexts_none(self):
+        self.data['contexts'] = None
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Chrome'
+        assert self.data['contexts']['browser']['version'] == '66.0.3359'
+        assert self.data['contexts']['os']['name'] == 'Mac OS X'
+        assert self.data['contexts']['os']['version'] == '10.13.4'
+
     def test_browser_already_set(self):
         self.data['contexts'] = {'browser': {'name': 'IE', 'version': '6'}}
         normalize_user_agent(self.data)
@@ -194,6 +202,12 @@ class NormalizeUserAgentTests(TestCase):
         assert self.data['contexts']['os']['name'] == 'Mac OS X'
         assert self.data['contexts']['os']['version'] == '10.13.4'
 
+    def test_browser_none(self):
+        self.data['contexts'] = {'browser': None}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Chrome'
+        assert self.data['contexts']['browser']['version'] == '66.0.3359'
+
     def test_os_already_set(self):
         self.data['contexts'] = {'os': {'name': 'C64', 'version': '1337'}}
         normalize_user_agent(self.data)
@@ -202,6 +216,12 @@ class NormalizeUserAgentTests(TestCase):
         assert self.data['contexts']['os']['name'] == 'C64'
         assert self.data['contexts']['os']['version'] == '1337'
 
+    def test_os_none(self):
+        self.data['contexts'] = {'os': None}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['os']['name'] == 'Mac OS X'
+        assert self.data['contexts']['os']['version'] == '10.13.4'
+
     def test_device_already_set(self):
         self.data = {'request':
                      {'headers': [
@@ -218,3 +238,18 @@ class NormalizeUserAgentTests(TestCase):
         assert self.data['contexts']['os']['name'] == 'iOS'
         assert self.data['contexts']['os']['version'] == '12.1'
         assert self.data['contexts']['device']['brand'] == 'TI Calculator'
+
+    def test_device_none(self):
+        self.data = {
+            'request': {
+                'headers': [[
+                    'User-Agent',
+                    'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',
+                ]],
+            },
+        }
+        self.data['contexts'] = {'device': None}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['device']['brand'] == 'Apple'
+        assert self.data['contexts']['device']['family'] == 'iPhone'
+        assert self.data['contexts']['device']['model'] == 'iPhone'
