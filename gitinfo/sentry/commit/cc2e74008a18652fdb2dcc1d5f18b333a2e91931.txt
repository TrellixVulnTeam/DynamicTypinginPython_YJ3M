commit cc2e74008a18652fdb2dcc1d5f18b333a2e91931
Author: Michael Hayes <michael.hayes@urbanairship.com>
Date:   Wed Oct 9 11:06:45 2013 -0700

    added support for data uris and sourcesContent to sentry sourcemaps

diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 495281f816..0f3e020c12 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -12,6 +12,7 @@ import hashlib
 import re
 import urllib2
 import zlib
+import base64
 from collections import namedtuple
 from urlparse import urljoin
 
@@ -27,6 +28,8 @@ BAD_SOURCE = -1
 LINES_OF_CONTEXT = 5
 CHARSET_RE = re.compile(r'charset=(\S+)')
 DEFAULT_ENCODING = 'utf-8'
+BASE64_SOURCEMAP_PREAMBLE = 'data:application/json;base64,'
+BASE64_PREAMBLE_LENGTH = len(BASE64_SOURCEMAP_PREAMBLE)
 
 UrlResult = namedtuple('UrlResult', ['url', 'headers', 'body'])
 
@@ -161,11 +164,15 @@ def fetch_url(url):
 
 
 def fetch_sourcemap(url):
-    result = fetch_url(url)
-    if result == BAD_SOURCE:
-        return
+    if is_data_uri(url):
+        body = base64.b64decode(url[BASE64_PREAMBLE_LENGTH:])
+    else:
+        result = fetch_url(url)
+        if result == BAD_SOURCE:
+            return
+
+        body = result.body
 
-    body = result.body
     # According to spec (https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.h7yy76c5il9v)
     # A SourceMap may be prepended with ")]}'" to cause a Javascript error.
     # If the file starts with that string, ignore the entire first line.
@@ -179,6 +186,10 @@ def fetch_sourcemap(url):
         return index
 
 
+def is_data_uri(url):
+    return url[:BASE64_PREAMBLE_LENGTH] == BASE64_SOURCEMAP_PREAMBLE
+
+
 def expand_javascript_source(data, **kwargs):
     """
     Attempt to fetch source code for javascript frames.
@@ -250,12 +261,18 @@ def expand_javascript_source(data, **kwargs):
             continue
 
         sourcemap = discover_sourcemap(result)
-        source_code[filename] = (result.body.splitlines(), sourcemap)
 
         # TODO: we're currently running splitlines twice
-        if sourcemap:
-            logger.debug('Found sourcemap %r for minified script %r', sourcemap, result.url)
-        elif sourcemap in sourmap_idxs or not sourcemap:
+        if not sourcemap:
+            source_code[filename] = (result.body.splitlines(), None)
+            continue
+        else:
+            logger.debug('Found sourcemap %r for minified script %r', sourcemap[:256], result.url)
+
+        sourcemap_key = hashlib.md5(sourcemap).hexdigest()
+        source_code[filename] = (result.body.splitlines(), sourcemap_key)
+
+        if sourcemap in sourmap_idxs:
             continue
 
         # pull down sourcemap
@@ -264,13 +281,20 @@ def expand_javascript_source(data, **kwargs):
             logger.debug('Failed parsing sourcemap index: %r', sourcemap[:15])
             continue
 
-        sourmap_idxs[sourcemap] = index
+        if is_data_uri(sourcemap):
+            sourmap_idxs[sourcemap_key] = (index, result.url)
+        else:
+            sourmap_idxs[sourcemap_key] = (index, sourcemap)
 
         # queue up additional source files for download
         for source in index.sources:
             next_filename = urljoin(result.url, source)
             if next_filename not in done_file_list:
-                pending_file_list.add(next_filename)
+                if index.content:
+                    source_code[next_filename] = (index.content[source], None)
+                    done_file_list.add(next_filename)
+                else:
+                    pending_file_list.add(next_filename)
 
     has_changes = False
     for frame in frames:
@@ -282,9 +306,9 @@ def expand_javascript_source(data, **kwargs):
 
         # may have had a failure pulling down the sourcemap previously
         if sourcemap in sourmap_idxs and frame.colno is not None:
-            state = find_source(sourmap_idxs[sourcemap], frame.lineno, frame.colno)
-            # TODO: is this urljoin right? (is it relative to the sourcemap or the originating file)
-            abs_path = urljoin(sourcemap, state.src)
+            index, relative_to = sourmap_idxs[sourcemap]
+            state = find_source(index, frame.lineno, frame.colno)
+            abs_path = urljoin(relative_to, state.src)
             logger.debug('Mapping compressed source %r to mapping in %r', frame.abs_path, abs_path)
             try:
                 source, _ = source_code[abs_path]
diff --git a/src/sentry/utils/sourcemaps.py b/src/sentry/utils/sourcemaps.py
index ba21bc2d99..065781ec1b 100644
--- a/src/sentry/utils/sourcemaps.py
+++ b/src/sentry/utils/sourcemaps.py
@@ -17,7 +17,7 @@ from sentry.utils import json
 
 
 SourceMap = namedtuple('SourceMap', ['dst_line', 'dst_col', 'src', 'src_line', 'src_col', 'name'])
-SourceMapIndex = namedtuple('SourceMapIndex', ['states', 'keys', 'sources'])
+SourceMapIndex = namedtuple('SourceMapIndex', ['states', 'keys', 'sources', 'content'])
 
 # Mapping of base64 letter -> integer value.
 B64 = dict(
@@ -59,12 +59,10 @@ def parse_vlq(segment):
     return values
 
 
-def parse_sourcemap(sourcemap):
+def parse_sourcemap(smap):
     """
-    Given a file-like object, yield SourceMap objects as they are read from it.
+    Given a sourcemap json object, yield SourceMap objects as they are read from it.
     """
-
-    smap = json.loads(sourcemap)
     sources = smap['sources']
     sourceRoot = smap.get('sourceRoot')
     names = smap['names']
@@ -108,16 +106,27 @@ def parse_sourcemap(sourcemap):
 
 
 def sourcemap_to_index(sourcemap):
+    smap = json.loads(sourcemap)
+
     state_list = []
     key_list = []
     src_list = set()
+    content = None
+
+    if 'sourcesContent' in smap:
+        content = {}
+        for idx, source in enumerate(smap['sources']):
+            if smap['sourcesContent'][idx]:
+                content[source] = smap['sourcesContent'][idx].splitlines()
+            else:
+                content[source] = []
 
-    for state in parse_sourcemap(sourcemap):
+    for state in parse_sourcemap(smap):
         state_list.append(state)
         key_list.append((state.dst_line, state.dst_col))
         src_list.add(state.src)
 
-    return SourceMapIndex(state_list, key_list, src_list)
+    return SourceMapIndex(state_list, key_list, src_list, content)
 
 
 def find_source(indexed_sourcemap, lineno, colno):
