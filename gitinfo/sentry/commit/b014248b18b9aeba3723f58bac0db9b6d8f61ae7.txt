commit b014248b18b9aeba3723f58bac0db9b6d8f61ae7
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Feb 20 11:04:51 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 8 (#17008)

diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index 025ceb2311..140cd7f74c 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -245,12 +245,14 @@ class ContextData extends React.Component {
       preserveQuotes: _preserveQuotes,
       withAnnotatedText: _withAnnotatedText,
       meta: _meta,
+      children,
       ...other
     } = this.props;
 
     return (
       <pre className="val-string" {...other}>
         {this.renderValue(data)}
+        {children}
       </pre>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 965fbfbe1c..cab7037484 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -12,7 +12,7 @@ const CONTEXT_TYPES = {
   device: require('app/components/events/contexts/device/device').default,
   os: require('app/components/events/contexts/operatingSystem/operatingSystem').default,
   runtime: require('app/components/events/contexts/runtime/runtime').default,
-  user: require('app/components/events/contexts/user').default,
+  user: require('app/components/events/contexts/user/user').default,
   gpu: require('app/components/events/contexts/gpu/gpu').default,
 };
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
deleted file mode 100644
index 2de491c45c..0000000000
--- a/src/sentry/static/sentry/app/components/events/contexts/user.jsx
+++ /dev/null
@@ -1,84 +0,0 @@
-/*eslint react/jsx-key:0*/
-import PropTypes from 'prop-types';
-import React from 'react';
-import each from 'lodash/each';
-
-import UserAvatar from 'app/components/avatar/userAvatar';
-import ErrorBoundary from 'app/components/errorBoundary';
-import ExternalLink from 'app/components/links/externalLink';
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
-import {removeFilterMaskedEntries} from 'app/components/events/interfaces/utils';
-
-const EMAIL_REGEX = /[^@]+@[^\.]+\..+/;
-
-class UserContextType extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-  };
-
-  render() {
-    const user = this.props.data;
-    const builtins = [];
-    const children = [];
-
-    // Handle our native attributes specially
-    user.id && builtins.push(['ID', <pre className="val-string">{user.id}</pre>]);
-    user.email &&
-      builtins.push([
-        'Email',
-        <pre className="val-string">
-          {user.email}
-          {EMAIL_REGEX.test(user.email) && (
-            <ExternalLink href={`mailto:${user.email}`} className="external-icon">
-              <em className="icon-envelope" />
-            </ExternalLink>
-          )}
-        </pre>,
-      ]);
-    user.username &&
-      builtins.push(['Username', <pre className="val-string">{user.username}</pre>]);
-    user.ip_address &&
-      builtins.push(['IP Address', <pre className="val-string">{user.ip_address}</pre>]);
-    user.name && builtins.push(['Name', <pre className="val-string">{user.name}</pre>]);
-
-    // We also attach user supplied data as 'user.data'
-    each(user.data, function(value, key) {
-      children.push([key, value]);
-    });
-
-    return (
-      <div className="user-widget">
-        <div className="pull-left">
-          <UserAvatar user={removeFilterMaskedEntries(user)} size={48} gravatar={false} />
-        </div>
-        <table className="key-value table">
-          <tbody>
-            {builtins.map(([key, value]) => {
-              return (
-                <tr key={key}>
-                  <td className="key" key="0">
-                    {key}
-                  </td>
-                  <td
-                    className="value"
-                    key="1"
-                    data-test-id={`user-context-${key.toLowerCase()}-value`}
-                  >
-                    {value}
-                  </td>
-                </tr>
-              );
-            })}
-          </tbody>
-        </table>
-        <ErrorBoundary mini>
-          {children && <KeyValueList data={children} isContextData />}
-        </ErrorBoundary>
-      </div>
-    );
-  }
-}
-
-UserContextType.getTitle = () => 'User';
-
-export default UserContextType;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownData.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownData.tsx
new file mode 100644
index 0000000000..f0a67499c6
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownData.tsx
@@ -0,0 +1,30 @@
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import {AvatarUser as UserType} from 'app/types';
+import {defined} from 'app/utils';
+
+import getUserKnownDataDetails from './getUserKnownDataDetails';
+import {UserKnownDataType} from './types';
+
+function getUserKnownData(data: UserType): Array<KeyValueListData> {
+  const knownData: Array<KeyValueListData> = [];
+
+  const dataKeys = Object.keys(data);
+  for (const key of dataKeys) {
+    const knownDataDetails = getUserKnownDataDetails(data, key as UserKnownDataType);
+
+    if ((knownDataDetails && !defined(knownDataDetails.value)) || !knownDataDetails) {
+      continue;
+    }
+
+    knownData.push({
+      key,
+      ...knownDataDetails,
+      meta: getMeta(data, key),
+      subjectDataTestId: `user-context-${key.toLowerCase()}-value`,
+    });
+  }
+  return knownData;
+}
+
+export default getUserKnownData;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownDataDetails.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownDataDetails.tsx
new file mode 100644
index 0000000000..d8545de5b0
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/getUserKnownDataDetails.tsx
@@ -0,0 +1,57 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {AvatarUser as UserType} from 'app/types';
+import ExternalLink from 'app/components/links/externalLink';
+
+import {UserKnownDataType} from './types';
+
+const EMAIL_REGEX = /[^@]+@[^\.]+\..+/;
+
+type Output = {
+  subject: string;
+  value: string | null;
+  subjectIcon?: React.ReactNode;
+};
+
+function getUserKnownDataDetails(
+  data: UserType,
+  type: UserKnownDataType
+): Output | undefined {
+  switch (type) {
+    case UserKnownDataType.NAME:
+      return {
+        subject: t('Name'),
+        value: data.name,
+      };
+    case UserKnownDataType.USERNAME:
+      return {
+        subject: t('Username'),
+        value: data.username,
+      };
+    case UserKnownDataType.ID:
+      return {
+        subject: t('ID'),
+        value: data.id,
+      };
+    case UserKnownDataType.IP_ADDRESS:
+      return {
+        subject: t('IP Address'),
+        value: data.ip_address,
+      };
+    case UserKnownDataType.EMAIL:
+      return {
+        subject: t('Email'),
+        value: data.email,
+        subjectIcon: EMAIL_REGEX.test(data.email) && (
+          <ExternalLink href={`mailto:${data.email}`} className="external-icon">
+            <em className="icon-envelope" />
+          </ExternalLink>
+        ),
+      };
+    default:
+      return undefined;
+  }
+}
+
+export default getUserKnownDataDetails;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/types.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/types.tsx
new file mode 100644
index 0000000000..5ac6e32ff9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/types.tsx
@@ -0,0 +1,7 @@
+export enum UserKnownDataType {
+  ID = 'id',
+  EMAIL = 'email',
+  USERNAME = 'username',
+  IP_ADDRESS = 'ip_address',
+  NAME = 'name',
+}
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
new file mode 100644
index 0000000000..63714cdb24
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/contexts/user/user.tsx
@@ -0,0 +1,47 @@
+import React from 'react';
+
+import UserAvatar from 'app/components/avatar/userAvatar';
+import {AvatarUser as UserType} from 'app/types';
+import {removeFilterMaskedEntries} from 'app/components/events/interfaces/utils';
+import ContextBlock from 'app/components/events/contexts/contextBlockV2';
+import ErrorBoundary from 'app/components/errorBoundary';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
+import {defined} from 'app/utils';
+
+import getUserKnownData from './getUserKnownData';
+
+type Props = {
+  data: Data;
+};
+
+type Data = {
+  data?: null | {[key: string]: string};
+} & UserType;
+
+const User = ({data}: Props) => {
+  if (!defined(data)) {
+    return null;
+  }
+
+  const getKeyValueData = (val: object) => {
+    Object.keys(val).map(key => [key, val[key]]);
+  };
+
+  return (
+    <div className="user-widget">
+      <div className="pull-left">
+        <UserAvatar user={removeFilterMaskedEntries(data)} size={48} gravatar={false} />
+      </div>
+      <ContextBlock knownData={getUserKnownData(data)} />
+      {defined(data?.data) && (
+        <ErrorBoundary mini>
+          <KeyValueList data={getKeyValueData(data.data)} isContextData />
+        </ErrorBoundary>
+      )}
+    </div>
+  );
+};
+
+User.getTitle = () => 'User';
+
+export default User;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
index 5eb551aeac..768f0828cd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/keyValueListV2.tsx
@@ -40,35 +40,40 @@ const KeyValueList = ({
   return (
     <table className="table key-value" onClick={onClick}>
       <tbody>
-        {getData().map(({key, subject, value = null, meta}) => (
-          <tr key={key}>
-            <TableSubject className="key" wide={longKeys}>
-              {subject}
-            </TableSubject>
-            <td className="val">
-              {isContextData ? (
-                <ContextData
-                  data={!raw ? value : JSON.stringify(value)}
-                  meta={meta}
-                  withAnnotatedText
-                />
-              ) : (
-                <pre className="val-string">
-                  {meta ? (
-                    <AnnotatedText
-                      value={value}
-                      chunks={meta.chunks}
-                      remarks={meta.rem}
-                      errors={meta.err}
-                    />
-                  ) : (
-                    value
-                  )}
-                </pre>
-              )}
-            </td>
-          </tr>
-        ))}
+        {getData().map(
+          ({key, subject, value = null, meta, subjectIcon, subjectDataTestId}) => (
+            <tr key={key}>
+              <TableSubject className="key" wide={longKeys}>
+                {subject}
+              </TableSubject>
+              <td className="val" data-test-id={subjectDataTestId}>
+                {isContextData ? (
+                  <ContextData
+                    data={!raw ? value : JSON.stringify(value)}
+                    meta={meta}
+                    withAnnotatedText
+                  >
+                    {subjectIcon}
+                  </ContextData>
+                ) : (
+                  <pre className="val-string">
+                    {meta ? (
+                      <AnnotatedText
+                        value={value}
+                        chunks={meta.chunks}
+                        remarks={meta.rem}
+                        errors={meta.err}
+                      />
+                    ) : (
+                      value
+                    )}
+                    {subjectIcon}
+                  </pre>
+                )}
+              </td>
+            </tr>
+          )
+        )}
       </tbody>
     </table>
   );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
index cc45fa1c31..b37fc0ef48 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList/types.tsx
@@ -5,4 +5,6 @@ export type KeyValueListData = {
   subject: string;
   value?: React.ReactNode;
   meta?: Meta;
+  subjectDataTestId?: string;
+  subjectIcon?: React.ReactNode;
 };
diff --git a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
index e6723c3adf..96a432561a 100644
--- a/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
+++ b/src/sentry/static/sentry/app/components/events/meta/annotatedText.jsx
@@ -98,17 +98,29 @@ function renderValue(value, chunks, errors, remarks) {
   return element;
 }
 
+function getErrorMessage(error) {
+  const errorMessage = [];
+  if (error[0]) {
+    errorMessage.push(error[0]);
+  }
+  if (error[1] && error[1].reason) {
+    errorMessage.push(error[1].reason);
+  }
+
+  return errorMessage.join(': ');
+}
+
 function renderErrors(errors) {
   if (!errors.length) {
     return null;
   }
 
   const tooltip = (
-    <div style={{'text-align': 'left'}}>
+    <div style={{textAlign: 'left'}}>
       <strong>{tn('Processing Error:', 'Processing Errors:', errors.length)}</strong>
       <ul>
-        {errors.map(e => (
-          <li key={e}>{e}</li>
+        {errors.map((error, index) => (
+          <li key={index}>{getErrorMessage(error)}</li>
         ))}
       </ul>
     </div>
@@ -122,6 +134,7 @@ function renderErrors(errors) {
 }
 
 function AnnotatedText({value, chunks, errors, remarks, props}) {
+  console.log('value', value);
   return (
     <span {...props}>
       {renderValue(value, chunks, errors, remarks)} {renderErrors(errors)}
diff --git a/tests/js/spec/components/events/interfaces/contexts.spec.jsx b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
index 67a6bd579e..924c8fa5ec 100644
--- a/tests/js/spec/components/events/interfaces/contexts.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/contexts.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'sentry-test/enzyme';
 
-import UserContextType from 'app/components/events/contexts/user';
+import UserContextType from 'app/components/events/contexts/user/user';
 import {FILTER_MASK} from 'app/constants';
 
 describe('UserContextType', function() {
