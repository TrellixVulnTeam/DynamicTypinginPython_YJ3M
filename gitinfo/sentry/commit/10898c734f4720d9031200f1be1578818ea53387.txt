commit 10898c734f4720d9031200f1be1578818ea53387
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 14 15:51:54 2015 -0800

    Add polling to stream

diff --git a/src/sentry/static/sentry/app-react/components/stream.jsx b/src/sentry/static/sentry/app-react/components/stream.jsx
index 37a623b77e..8f4237dfe2 100644
--- a/src/sentry/static/sentry/app-react/components/stream.jsx
+++ b/src/sentry/static/sentry/app-react/components/stream.jsx
@@ -9,6 +9,7 @@ var StreamActions = require('./streamActions');
 var StreamFilters = require('./streamFilters');
 var StreamPagination = require('./streamPagination');
 var TimeSince = require("./timeSince");
+var utils = require("../utils");
 
 var Aggregate = React.createClass({
   propTypes: {
@@ -79,6 +80,54 @@ var Aggregate = React.createClass({
   }
 });
 
+var StreamPoller = function(options){
+  this.options = options;
+  this._timeoutId = null;
+  this._active = true;
+  this._delay = 3000;
+  this._pollingEndpoint = options.endpoint;
+};
+StreamPoller.prototype.enable = function(){
+  this._active = true;
+  if (!this._timeoutId) {
+    this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
+  }
+};
+StreamPoller.prototype.disable = function(){
+  this._active = false;
+  if (this._timeoutId) {
+    window.clearTimeout(this._timeoutId);
+    this._timeoutId = null;
+  }
+};
+StreamPoller.prototype.poll = function() {
+  $.ajax({
+    url: this._pollingEndpoint,
+    method: 'GET',
+    success: function(data, textStatus, jqXHR){
+      // cancel in progress operation if disabled
+      if (!this._active) {
+        return;
+      }
+
+      // if theres no data, nothing changes
+      if (!data.length) {
+        return;
+      }
+
+      var links = utils.parseLinkHeader(jqXHR.getResponseHeader('Link'));
+      this._pollingEndpoint = links.previous.href;
+
+      this.options.success(data);
+    }.bind(this),
+    complete: function(){
+      if (this._active) {
+        this._timeoutId = window.setTimeout(this.poll.bind(this), this._delay);
+      }
+    }.bind(this)
+  });
+};
+
 var Stream = React.createClass({
   propTypes: {
     aggList: React.PropTypes.array.isRequired,
@@ -90,7 +139,17 @@ var Stream = React.createClass({
   },
   getInitialState: function() {
     return {
-      aggList: [],
+      aggList: new utils.Collection(this.props.aggList, {
+        sortFunc: function(data) {
+          utils.sortArray(data, function(item){
+            return [item.sortWeight];
+          });
+        },
+        equals: function(self, other) {
+          return self.id === other.id;
+        },
+        limit: 50
+      }),
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
@@ -100,8 +159,29 @@ var Stream = React.createClass({
       realtimeActive: true
     };
   },
-  componentWillMount: function() {
-    this.state.aggList = this.props.aggList || [];
+  componentDidMount: function() {
+    this._poller = new StreamPoller({
+      success: this.handleRealtimePoll,
+      endpoint: this.getPollingEndpoint()
+    });
+    if (this.state.realtimeActive) {
+      this._poller.enable();
+    }
+  },
+  componentWillUnmount: function() {
+    this._poller.disable();
+  },
+  componentDidUpdate: function(prevProps, prevState) {
+    if (prevState.realtimeActive !== this.state.realtimeActive) {
+      if (this.state.realtimeActive) {
+        this._poller.enable();
+      } else {
+        this._poller.disable();
+      }
+    }
+  },
+  getPollingEndpoint: function() {
+    return '/api/0/projects/' + this.props.project.id + '/groups/?' + window.location.search;
   },
   handleSelect: function(aggId, event) {
     var checked = $(event.target).is(':checked');
@@ -244,6 +324,11 @@ var Stream = React.createClass({
       query: value
     });
   },
+  handleRealtimePoll: function(data) {
+    this.setState({
+      aggList: this.state.aggList.extend(data)
+    });
+  },
   render: function() {
     var aggNodes = this.state.aggList.map(function(node) {
       return (
diff --git a/src/sentry/static/sentry/app-react/components/streamActions.jsx b/src/sentry/static/sentry/app-react/components/streamActions.jsx
index f425edc601..7130654b07 100644
--- a/src/sentry/static/sentry/app-react/components/streamActions.jsx
+++ b/src/sentry/static/sentry/app-react/components/streamActions.jsx
@@ -15,7 +15,7 @@ var ActionLink = React.createClass({
 
   propTypes: {
     actionLabel: React.PropTypes.string,
-    aggList: React.PropTypes.array.isRequired,
+    aggList: React.PropTypes.instanceOf(Array).isRequired,
     canActionAll: React.PropTypes.bool.isRequired,
     confirmLabel: React.PropTypes.string,
     disabled: React.PropTypes.bool,
@@ -144,7 +144,7 @@ var StreamActions = React.createClass({
   SELECTED: 'selected',
 
   propTypes: {
-    aggList: React.PropTypes.array.isRequired,
+    aggList: React.PropTypes.instanceOf(Array).isRequired,
     anySelected: React.PropTypes.bool.isRequired,
     multiSelected: React.PropTypes.bool.isRequired,
     onBookmark: React.PropTypes.func.isRequired,
diff --git a/src/sentry/static/sentry/app-react/components/streamPagination.jsx b/src/sentry/static/sentry/app-react/components/streamPagination.jsx
index 543d4978c0..481b5af84c 100644
--- a/src/sentry/static/sentry/app-react/components/streamPagination.jsx
+++ b/src/sentry/static/sentry/app-react/components/streamPagination.jsx
@@ -6,7 +6,7 @@ var utils = require("../utils");
 
 var StreamPagination = React.createClass({
   propTypes: {
-    aggList: React.PropTypes.array.isRequired,
+    aggList: React.PropTypes.instanceOf(Array).isRequired,
     pageLinks: React.PropTypes.string.isRequired
   },
 
diff --git a/src/sentry/static/sentry/app-react/utils.jsx b/src/sentry/static/sentry/app-react/utils.jsx
index 529c41016c..b3b76816a3 100644
--- a/src/sentry/static/sentry/app-react/utils.jsx
+++ b/src/sentry/static/sentry/app-react/utils.jsx
@@ -1,3 +1,5 @@
+/*** @jsx React.DOM */
+
 var getQueryParams = function() {
   var vars = {},
       href = window.location.href,
@@ -43,7 +45,33 @@ var parseLinkHeader = function(header) {
   return links;
 };
 
+var sortArray = function(arr, score_fn) {
+    arr.sort(function(a, b){
+      var a_score = score_fn(a),
+          b_score = score_fn(b);
+
+      for (var i = 0; i < a_score.length; i++) {
+        if (a_score[i] < b_score[i]) {
+          return 1;
+        }
+        if (a_score[i] > b_score[i]) {
+          return -1;
+        }
+      }
+      return 0;
+    });
+
+    return arr;
+};
+
+var escape = function(str) {
+    return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
+};
+
 module.exports = {
+  escape: escape,
   getQueryParams: getQueryParams,
-  parseLinkHeader: parseLinkHeader
+  parseLinkHeader: parseLinkHeader,
+  sortArray: sortArray,
+  Collection: require('./utils/collection')
 };
diff --git a/src/sentry/static/sentry/app-react/utils/collection.jsx b/src/sentry/static/sentry/app-react/utils/collection.jsx
new file mode 100644
index 0000000000..28cd86784f
--- /dev/null
+++ b/src/sentry/static/sentry/app-react/utils/collection.jsx
@@ -0,0 +1,101 @@
+/*** @jsx React.DOM */
+
+var defaults = {
+  sortFunc: null,
+  limit: null,
+  equals: function(item, other) {
+    return item.id == other.id;
+  },
+  canUpdate: function(current, pending) {
+    return true;
+  }
+};
+
+function Collection(collection, options) {
+  var i;
+
+  Array.call(this);
+
+  if (options === undefined) {
+    options = {};
+  }
+
+  for (i in defaults) {
+    if (options[i] === undefined) {
+      options[i] = defaults[i];
+    }
+  }
+
+  this.options = options;
+
+  if (collection !== undefined) {
+    this.extend(collection);
+  }
+
+  return this;
+}
+
+Collection.prototype = [];
+
+Collection.prototype.constructor = Collection;
+
+Collection.prototype.add = function add(item) {
+  if (this.update(item)) {
+    return;
+  }
+
+  Array.prototype.push.apply(this, arguments);
+  if (this.options.sortFunc) {
+    this.options.sortFunc(this);
+  }
+  if (this.options.limit && this.length > this.options.limit) {
+    this.splice(this.options.limit, this.length - this.options.limit);
+  }
+};
+
+Collection.prototype.remove = function remove(item) {
+  for (var i = 0; i < this.length; i++) {
+    if (this[i].id == item.id) {
+      this.splice(i, i + 1);
+      return;
+    }
+  }
+};
+
+Collection.prototype.empty = function empty() {
+  while (this.length > 0) {
+    this.pop();
+  }
+};
+
+Collection.prototype.extend = function extend(data) {
+  for (var i = 0; i < data.length; i++) {
+    this.add(data[i]);
+  }
+  return this;
+};
+
+Collection.prototype.indexOf = function indexOf(item) {
+  for (var i = 0; i < this.length; i++) {
+    if (this.options.equals(this[i], item)) {
+      return i;
+    }
+  }
+  return -1;
+};
+
+Collection.prototype.update = function update(item) {
+  // returns true if the item already existed and was updated (as configured)
+
+  var existing = this.indexOf(item);
+  if (existing !== -1) {
+    if (!this.options.canUpdate(this[existing], item)) {
+      return true;
+    }
+    $.extend(true, this[existing], item);
+    return true;
+  }
+  return false;
+};
+
+module.exports = Collection;
