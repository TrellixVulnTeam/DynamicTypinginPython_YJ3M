commit 411388178991ad14cbd7e07e814035b4282a691d
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 25 10:37:36 2013 -0700

    Clean up some queueing documentation and deprecate SENTRY_USE_QUEUE

diff --git a/docs/queue/index.rst b/docs/queue/index.rst
index c0e8ad9c23..d60445e53f 100644
--- a/docs/queue/index.rst
+++ b/docs/queue/index.rst
@@ -12,12 +12,14 @@ handle actually saving that data.
 Running a Worker
 ----------------
 
-Workers can be run by using the Sentry CLI. Specifically, you call out to celeryd,
-which the worker manager process of the Celery library.
+Workers can be run by using the Sentry CLI. Specifically, you call out to celery,
+which is the worker manager process of the Celery library.
 
 ::
 
-    sentry celeryd -B
+    sentry celery worker -B
+
+.. note:: You will need to run both celery workers and celerybeat.
 
 Enable the Queue
 ----------------
@@ -25,7 +27,7 @@ Enable the Queue
 Once you've brought up a worker, the next step is to enable the queue. This is
 done with a simple settings flag::
 
-    SENTRY_USE_QUEUE = True
+    CELERY_ALWAYS_EAGER = False
 
 It's also **highly** recommended that you switch away from the default queue settings, which
 rely on the database, and move to something more efficient. These are documented in more
diff --git a/src/sentry/app.py b/src/sentry/app.py
index 9430005c49..9f104cf4bd 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -6,7 +6,6 @@ sentry.app
 :license: BSD, see LICENSE for more details.
 """
 
-from django.conf import settings as dj_settings
 from sentry.conf import settings
 from sentry.utils.imports import import_string
 from threading import local
@@ -23,6 +22,3 @@ def get_instance(path, options):
 
 buffer = get_instance(settings.BUFFER, settings.BUFFER_OPTIONS)
 env = State()
-
-# XXX: support for Sentry's USE_QUEUE setting
-dj_settings.CELERY_ALWAYS_EAGER = not settings.USE_QUEUE
diff --git a/src/sentry/conf/defaults.py b/src/sentry/conf/defaults.py
index 6ab54d7042..f5d8a8ab93 100644
--- a/src/sentry/conf/defaults.py
+++ b/src/sentry/conf/defaults.py
@@ -110,10 +110,6 @@ ALLOW_PUBLIC_PROJECTS = True
 # manually.
 ALLOW_REGISTRATION = True
 
-# Instructs Sentry to utilize it's queue for background jobs. You will
-# need to ensure that you have workers running if you enable the queue.
-USE_QUEUE = False
-
 # Instructs Sentry to utilize it's internal search indexer on all incoming
 # events..
 USE_SEARCH = True
diff --git a/src/sentry/conf/settings.py b/src/sentry/conf/settings.py
index 8a5dbc3e27..aa5d2392b5 100644
--- a/src/sentry/conf/settings.py
+++ b/src/sentry/conf/settings.py
@@ -46,3 +46,6 @@ LANGUAGE_MAP = dict(settings.LANGUAGES)
 LANGUAGES = [(k, LANGUAGE_MAP[k]) for k in get_all_languages() if k in LANGUAGE_MAP]
 
 LOG_LEVEL_REVERSE_MAP = dict((str(v), k) for k, v in LOG_LEVELS)
+
+# XXX: legacy support for Sentry's USE_QUEUE setting
+settings.CELERY_ALWAYS_EAGER = (not locals().get('USE_QUEUE', False))
diff --git a/src/sentry/utils/runner.py b/src/sentry/utils/runner.py
index afa219ae02..eb838a4079 100644
--- a/src/sentry/utils/runner.py
+++ b/src/sentry/utils/runner.py
@@ -55,15 +55,25 @@ DATABASES = {
 #     }
 # }
 
+###########
+## Queue ##
+###########
+
+# See http://sentry.readthedocs.org/en/latest/queue/index.html for more
+# information on configuring your queue broker and workers.
+
+# You can enable queueing of jobs by turning off the always eager setting:
+# CELERY_ALWAYS_EAGER = False
+# BROKER_URL = 'redis://localhost:6379'
+
+####################
+## Update Buffers ##
+####################
+
 # Buffers (combined with queueing) act as an intermediate layer between the database and
 # the storage API. They will greatly improve efficiency on large numbers of the same events
 # being sent to the API in a short amount of time.
 
-# SENTRY_USE_QUEUE = True
-# For more information on queue options, see the documentation for Celery:
-# http://celery.readthedocs.org/en/latest/
-# BROKER_URL = 'redis://localhost:6379'
-
 # You'll need to install the required dependencies for Redis buffers:
 #   pip install redis hiredis nydus
 #
