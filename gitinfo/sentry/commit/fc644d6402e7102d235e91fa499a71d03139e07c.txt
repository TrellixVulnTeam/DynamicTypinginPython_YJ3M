commit fc644d6402e7102d235e91fa499a71d03139e07c
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Jul 10 12:33:44 2019 -0400

    fix: Data for events v2 table should properly change whenever view prop changes (#13932)
    
    Co-Authored-By: Mark Story <mark@sentry.io>

diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
index f4b4629dff..8889c3bfcd 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -212,11 +212,20 @@ export const SPECIAL_FIELDS = {
   last_seen: {
     title: 'last seen',
     fields: ['last_seen'],
-    renderFunc: data => (
-      <Container>
-        <DynamicWrapper value={<StyledDateTime date={data.last_seen} />} fixed="time" />
-      </Container>
-    ),
+    renderFunc: data => {
+      return (
+        <Container>
+          {data.last_seen ? (
+            <DynamicWrapper
+              value={<StyledDateTime date={data.last_seen} />}
+              fixed="time"
+            />
+          ) : (
+            <span>n/a</span>
+          )}
+        </Container>
+      );
+    },
   },
 };
 
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
index 4d6c11533b..aa5ed3cdc1 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/events.jsx
@@ -23,7 +23,7 @@ const CHART_AXIS_OPTIONS = [
   {label: 'Users', value: 'user_count'},
 ];
 
-export default class Events extends AsyncComponent {
+export default class Events extends React.Component {
   static propTypes = {
     router: PropTypes.object.isRequired,
     location: PropTypes.object.isRequired,
@@ -31,7 +31,53 @@ export default class Events extends AsyncComponent {
     view: SentryTypes.EventView.isRequired,
   };
 
-  shouldReload = true;
+  render() {
+    const {organization, view, location, router} = this.props;
+    const query = location.query.query || '';
+
+    return (
+      <React.Fragment>
+        <Panel>
+          {getDynamicText({
+            value: (
+              <EventsChart
+                router={router}
+                query={query}
+                organization={organization}
+                showLegend
+                yAxisOptions={CHART_AXIS_OPTIONS}
+              />
+            ),
+            fixed: 'events chart',
+          })}
+        </Panel>
+        <StyledSearchBar
+          organization={organization}
+          query={query}
+          onSearch={this.handleSearch}
+        />
+        <Container>
+          <EventsTable
+            key={view.id}
+            location={location}
+            organization={organization}
+            view={view}
+          />
+          <Tags view={view} organization={organization} location={location} />
+        </Container>
+      </React.Fragment>
+    );
+  }
+}
+
+class EventsTable extends AsyncComponent {
+  static propTypes = {
+    location: PropTypes.object.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    view: SentryTypes.EventView.isRequired,
+  };
+
+  shouldReload = false;
 
   componentDidUpdate(prevProps, prevContext) {
     // Do not update if we are just opening/closing the modal
@@ -74,45 +120,20 @@ export default class Events extends AsyncComponent {
   }
 
   renderBody() {
-    const {organization, view, location, router} = this.props;
+    const {organization, view, location} = this.props;
     const {data, dataPageLinks, loading} = this.state;
-    const query = location.query.query || '';
 
     return (
-      <React.Fragment>
-        <Panel>
-          {getDynamicText({
-            value: (
-              <EventsChart
-                router={router}
-                query={query}
-                organization={organization}
-                showLegend
-                yAxisOptions={CHART_AXIS_OPTIONS}
-              />
-            ),
-            fixed: 'events chart',
-          })}
-        </Panel>
-        <StyledSearchBar
+      <div>
+        <Table
+          view={view}
           organization={organization}
-          query={query}
-          onSearch={this.handleSearch}
+          data={data}
+          isLoading={loading}
+          location={location}
         />
-        <Container>
-          <div>
-            <Table
-              view={view}
-              organization={organization}
-              data={data}
-              isLoading={loading}
-              location={location}
-            />
-            <Pagination pageLinks={dataPageLinks} />
-          </div>
-          <Tags view={view} organization={organization} location={location} />
-        </Container>
-      </React.Fragment>
+        <Pagination pageLinks={dataPageLinks} />
+      </div>
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
index 1d59bd44cb..2f0fb144d0 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/table.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import styled, {css} from 'react-emotion';
-import {isEqual} from 'lodash';
 
 import SentryTypes from 'app/sentryTypes';
 import {Panel, PanelHeader, PanelBody, PanelItem} from 'app/components/panels';
@@ -17,33 +16,16 @@ export default class Table extends React.Component {
   static propTypes = {
     view: SentryTypes.EventView.isRequired,
     data: PropTypes.arrayOf(PropTypes.object),
-    isLoading: PropTypes.bool,
+    isLoading: PropTypes.bool.isRequired,
     organization: SentryTypes.Organization.isRequired,
     location: PropTypes.object,
   };
 
-  state = {
-    isChangingTabs: false,
-  };
-
-  componentDidUpdate(prevProps) {
-    const tabChanged = prevProps.view.id !== this.props.view.id;
-    if (!this.state.isChangingTabs && tabChanged) {
-      // eslint-disable-next-line react/no-did-update-set-state
-      this.setState({isChangingTabs: true});
-    }
-
-    if (this.state.isChangingTabs && !isEqual(prevProps.data, this.props.data)) {
-      // eslint-disable-next-line react/no-did-update-set-state
-      this.setState({isChangingTabs: false});
-    }
-  }
-
   renderBody() {
-    const {view, data, organization, location} = this.props;
+    const {view, data, organization, location, isLoading} = this.props;
     const {fields} = view.data;
 
-    if (!data) {
+    if (!data || isLoading) {
       return null;
     }
 
@@ -81,13 +63,8 @@ export default class Table extends React.Component {
   }
 
   render() {
-    const {isLoading, view, data} = this.props;
+    const {isLoading, view} = this.props;
     const {fields} = view.data;
-    const {isChangingTabs} = this.state;
-
-    // If previous state was empty or we are switching tabs, don't show the
-    // reloading state
-    const isReloading = !!(data && data.length) && isLoading && !isChangingTabs;
 
     return (
       <Panel>
@@ -100,10 +77,8 @@ export default class Table extends React.Component {
             </HeaderItem>
           ))}
         </TableHeader>
-        <StyledPanelBody isLoading={isLoading || isReloading}>
-          <LoadingContainer isLoading={isLoading} isReloading={isReloading}>
-            {this.renderBody()}
-          </LoadingContainer>
+        <StyledPanelBody isLoading={isLoading}>
+          <LoadingContainer isLoading={isLoading}>{this.renderBody()}</LoadingContainer>
         </StyledPanelBody>
       </Panel>
     );
