commit 44803b71922c295d2645312970c264c2fceab929
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jun 6 14:45:44 2016 -0700

    Add identities to user responses (superuser)
    
    @getsentry/api

diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index 4a1ae23ef0..e71cbbd646 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -31,7 +31,13 @@ def serialize(objects, user=None, serializer=None):
         else:
             return objects
 
-    attrs = serializer.get_attrs(item_list=objects, user=user)
+    attrs = serializer.get_attrs(
+        # avoid passing NoneType's to the serializer as they're allowed and
+        # filtered out of serialize()
+        item_list=[o for o in objects if o is not None],
+        user=user,
+    )
+
     return [serializer(o, attrs=attrs.get(o, {}), user=user) for o in objects]
 
 
diff --git a/src/sentry/api/serializers/models/user.py b/src/sentry/api/serializers/models/user.py
index 4855417889..bffbb7d2f1 100644
--- a/src/sentry/api/serializers/models/user.py
+++ b/src/sentry/api/serializers/models/user.py
@@ -2,13 +2,27 @@ from __future__ import absolute_import
 
 from django.conf import settings
 
+from sentry.app import env
 from sentry.api.serializers import Serializer, register
-from sentry.models import User, UserAvatar, UserOption
+from sentry.models import AuthIdentity, User, UserAvatar, UserOption
 from sentry.utils.avatar import get_gravatar_url
 
 
 @register(User)
 class UserSerializer(Serializer):
+    def _get_identities(self, item_list, user):
+        if not (env.request and env.request.is_superuser()):
+            item_list = filter(lambda x: x == user, item_list)
+
+        queryset = AuthIdentity.objects.filter(
+            user__in=item_list,
+        ).select_related('auth_provider', 'auth_provider__organization')
+
+        results = {i.id: [] for i in item_list}
+        for item in queryset:
+            results[item.user_id].append(item)
+        return results
+
     def get_attrs(self, item_list, user):
         avatars = {
             a.user_id: a
@@ -16,7 +30,15 @@ class UserSerializer(Serializer):
                 user__in=item_list
             )
         }
-        return {u: {'avatar': avatars.get(u.id)} for u in item_list if u}
+        identities = self._get_identities(item_list, user)
+
+        data = {}
+        for item in item_list:
+            data[item] = {
+                'avatar': avatars.get(item.id),
+                'identities': identities.get(item.id),
+            }
+        return data
 
     def serialize(self, obj, attrs, user):
         d = {
@@ -60,4 +82,18 @@ class UserSerializer(Serializer):
             avatar = {'avatarType': 'letter_avatar', 'avatarUuid': None}
         d['avatar'] = avatar
 
+        if attrs['identities'] is not None:
+            d['identities'] = [{
+                'id': i.ident,
+                'organization': {
+                    'slug': i.auth_provider.organization.slug,
+                },
+                'provider': {
+                    'id': i.auth_provider.provider,
+                    'name': i.auth_provider.get_provider().name,
+                },
+                'dateSynced': i.last_synced,
+                'dateVerified': i.last_verified,
+            } for i in attrs['identities']]
+
         return d
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
index 79a679ad5b..a011400ca8 100644
--- a/src/sentry/auth/manager.py
+++ b/src/sentry/auth/manager.py
@@ -28,6 +28,11 @@ class ProviderManager(object):
         self.__values[key] = cls
 
     def unregister(self, key, cls):
-        if self.__values[key] != cls:
-            raise ProviderNotRegistered(key)
+        try:
+            if self.__values[key] != cls:
+                # dont allow unregistering of arbitrary provider
+                raise ProviderNotRegistered(key)
+        except KeyError:
+            # we gracefully handle a missing provider
+            return
         del self.__values[key]
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 11b70be808..7d61634b97 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -51,6 +51,11 @@ class BaseTestCase(Fixtures, Exam):
         assert resp.status_code == 302
         assert resp['Location'].startswith('http://testserver' + reverse('sentry-login'))
 
+    @before
+    def setup_dummy_auth_provider(self):
+        auth.register('dummy', DummyProvider)
+        self.addCleanup(auth.unregister, 'dummy', DummyProvider)
+
     @before
     def setup_session(self):
         engine = import_module(settings.SESSION_ENGINE)
@@ -271,8 +276,10 @@ class AuthProviderTestCase(TestCase):
 
     def setUp(self):
         super(AuthProviderTestCase, self).setUp()
-        auth.register(self.provider_name, self.provider)
-        self.addCleanup(auth.unregister, self.provider_name, self.provider)
+        # TestCase automatically sets up dummy provider
+        if self.provider_name != 'dummy' or self.provider != DummyProvider:
+            auth.register(self.provider_name, self.provider)
+            self.addCleanup(auth.unregister, self.provider_name, self.provider)
 
 
 class RuleTestCase(TestCase):
diff --git a/tests/sentry/api/endpoints/test_user_details.py b/tests/sentry/api/endpoints/test_user_details.py
index e4e93ed0ca..a410873ac4 100644
--- a/tests/sentry/api/endpoints/test_user_details.py
+++ b/tests/sentry/api/endpoints/test_user_details.py
@@ -2,23 +2,69 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import User
+from sentry.models import AuthIdentity, AuthProvider, User
 from sentry.testutils import APITestCase
 
 
 class UserDetailsTest(APITestCase):
-    def test_simple(self):
+    # TODO(dcramer): theres currently no way to look up other users
+    # def test_simple(self):
+    #     user = self.create_user(email='a@example.com')
+    #     user2 = self.create_user(email='b@example.com')
+
+    #     self.login_as(user=user)
+
+    #     url = reverse('sentry-api-0-user-details', kwargs={
+    #         'user_id': user2.id,
+    #     })
+    #     resp = self.client.get(url, format='json')
+
+    #     assert resp.status_code == 200, resp.content
+    #     assert resp.data['id'] == str(user.id)
+    #     assert 'identities' not in resp.data
+
+    def test_lookup_self(self):
         user = self.create_user(email='a@example.com')
 
+        org = self.create_organization(owner=user)
+        auth_provider = AuthProvider.objects.create(
+            organization=org,
+            provider='dummy',
+        )
+        auth_identity = AuthIdentity.objects.create(
+            auth_provider=auth_provider,
+            ident=user.email,
+            user=user,
+        )
+
         self.login_as(user=user)
 
         url = reverse('sentry-api-0-user-details', kwargs={
             'user_id': 'me',
         })
-        response = self.client.get(url, format='json')
+        resp = self.client.get(url, format='json')
 
-        assert response.status_code == 200, response.content
-        assert response.data['id'] == str(user.id)
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == str(user.id)
+        assert 'identities' in resp.data
+        assert len(resp.data['identities']) == 1
+        assert resp.data['identities'][0]['id'] == auth_identity.ident
+
+    def test_superuser(self):
+        user = self.create_user(email='a@example.com')
+        superuser = self.create_user(email='b@example.com', is_superuser=True)
+
+        self.login_as(user=superuser)
+
+        url = reverse('sentry-api-0-user-details', kwargs={
+            'user_id': user.id,
+        })
+
+        resp = self.client.get(url)
+        assert resp.status_code == 200, resp.content
+        assert resp.data['id'] == str(user.id)
+        assert 'identities' in resp.data
+        assert len(resp.data['identities']) == 0
 
 
 class UserUpdateTest(APITestCase):
