commit c00659136c8f869593b9c1ed40c48c5ba1c35f92
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 14 14:58:13 2015 -0700

    Skip confirmation dialog when link exists

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index c46ba7765e..c537688603 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -319,18 +319,33 @@ class AuthHelper(object):
         auth_provider = self.auth_provider
         request = self.request
 
-        if request.POST.get('op') == 'confirm' and request.user.is_authenticated():
-            auth_identity = self._handle_attach_identity(identity)
-        elif request.POST.get('op') == 'newuser':
-            auth_identity = self._handle_new_user(identity)
-        else:
-            if request.user.is_authenticated():
-                return self.respond('sentry/auth-confirm-link.html', {
+        try:
+            auth_identity = AuthIdentity.objects.get(
+                auth_provider=auth_provider,
+                ident=identity['id'],
+            )
+        except AuthIdentity.DoesNotExist:
+            if request.POST.get('op') == 'confirm' and request.user.is_authenticated():
+                auth_identity = self._handle_attach_identity(identity)
+            elif request.POST.get('op') == 'newuser':
+                auth_identity = self._handle_new_user(identity)
+            else:
+                if request.user.is_authenticated():
+                    return self.respond('sentry/auth-confirm-link.html', {
+                        'identity': identity,
+                    })
+                return self.respond('sentry/auth-confirm-identity.html', {
                     'identity': identity,
                 })
-            return self.respond('sentry/auth-confirm-identity.html', {
-                'identity': identity,
-            })
+        else:
+            member = OrganizationMember.objects.get(
+                user=auth_identity.user,
+                organization=self.organization,
+            )
+            if getattr(member.flags, 'sso:invalid') or not getattr(member.flags, 'sso:linked'):
+                setattr(member.flags, 'sso:invalid', False)
+                setattr(member.flags, 'sso:linked', True)
+                member.save()
 
         user = auth_identity.user
         user.backend = settings.AUTHENTICATION_BACKENDS[0]
diff --git a/tests/sentry/web/frontend/test_auth_organization_login.py b/tests/sentry/web/frontend/test_auth_organization_login.py
index 4a0e85bdc7..ab356c0967 100644
--- a/tests/sentry/web/frontend/test_auth_organization_login.py
+++ b/tests/sentry/web/frontend/test_auth_organization_login.py
@@ -177,3 +177,40 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
+
+    def test_basic_provider_flow_as_existing_user_and_identity(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+        auth_identity = AuthIdentity.objects.create(
+            auth_provider=auth_provider,
+            ident='bar@example.com',
+            user=self.user,
+        )
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        self.login_as(self.user)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        path = reverse('sentry-auth-sso')
+
+        resp = self.client.post(path, {'email': 'bar@example.com'})
+
+        assert resp.status_code == 302
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=self.user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
