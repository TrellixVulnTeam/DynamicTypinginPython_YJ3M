commit f5cd5a3c2ea02e70766b82cdebf362c5fe64e80e
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Aug 19 11:31:25 2016 -0700

    Remove stacktrace grouping logic for inlined JS (#3937)
    
    * Remove stacktrace grouping logic for inlined JS
    
    This is rule previously only functioned if the line number was 1, but the same issue exists throughout inlined sourcecode in documents. Because extensions and dynamic rendering change pages, its unreliable to rely on the stacktrace for grouping in these situations and creates noise for which should be an uncommon situation.
    
    /cc @getsentry/javascript

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index c104dda883..463db823a1 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -683,14 +683,14 @@ class Stacktrace(Interface):
     def get_hash(self, system_frames=True):
         frames = self.frames
 
-        # TODO(dcramer): this should apply only to JS
-        # In a common case (I believe from window.onerror) we can end up with
-        # a stacktrace which includes a single frame and a reference that isnt
-        # valuable. It would generally point to the loading page, so it's possible
-        # we could improve this check using that information.
+        # TODO(dcramer): this should apply only to platform=javascript
+        # Browser JS will often throw errors (from inlined code in an HTML page)
+        # which contain only a single frame, no function name, and have the HTML
+        # document as the filename. In this case the hash is often not usable as
+        # the context cannot be trusted and the URL is dynamic (this also means
+        # the line number cannot be trusted).
         stack_invalid = (
-            len(frames) == 1 and frames[0].lineno == 1
-            and not frames[0].function and frames[0].is_url()
+            len(frames) == 1 and not frames[0].function and frames[0].is_url()
         )
 
         if stack_invalid:
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index 0e7187e7f4..c9470e34da 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -344,6 +344,27 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         assert result != []
 
+    def test_get_hash_excludes_single_frame_urls(self):
+        """
+        Browser JS will often throw errors (from inlined code in an HTML page)
+        which contain only a single frame, no function name, and have the HTML
+        document as the filename.
+
+        In this case the hash is often not usable as the context cannot be
+        trusted and the URL is dynamic.
+        """
+        interface = Stacktrace.to_python({
+            'frames': [{
+                'context_line': 'hello world',
+                'abs_path': 'http://foo.com/bar/',
+                'lineno': 107,
+                'filename': '/bar/',
+                'module': '<unknown module>',
+            }],
+        })
+        result = interface.get_hash()
+        assert result == []
+
     def test_cocoa_culprit(self):
         stacktrace = Stacktrace.to_python(dict(frames=[
             {
