commit 85195e2708cc327c0ad474db6cc1a0f9df825c8f
Author: Ben Vinegar <benvinegar@users.noreply.github.com>
Date:   Thu Jun 16 10:04:20 2016 -0700

    During artifact lookup, also consider full paths w/o host (#3489)

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 68870684cc..6bad55f792 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -187,24 +187,46 @@ def fetch_release_file(filename, release):
     cache_key = 'releasefile:v1:%s:%s' % (
         release.id,
         md5(filename).hexdigest(),
-    )
+    ),
+
+    filename_path = None
+    if filename is not None:
+        # Reconstruct url without protocol + host
+        # e.g. http://example.com/foo?bar => ~/foo?bar
+        parsed_url = urlparse(filename)
+        filename_path = '~' + parsed_url.path
+        if parsed_url.query:
+            filename_path += '?' + parsed_url.query
+
     logger.debug('Checking cache for release artifact %r (release_id=%s)',
                  filename, release.id)
     result = cache.get(cache_key)
+
     if result is None:
         logger.debug('Checking database for release artifact %r (release_id=%s)',
                      filename, release.id)
-        ident = ReleaseFile.get_ident(filename)
-        try:
-            releasefile = ReleaseFile.objects.filter(
-                release=release,
-                ident=ident,
-            ).select_related('file').get()
-        except ReleaseFile.DoesNotExist:
+
+        filename_idents = [ReleaseFile.get_ident(filename)]
+        if filename_path is not None and filename_path != filename:
+            filename_idents.append(ReleaseFile.get_ident(filename_path))
+
+        possible_files = list(ReleaseFile.objects.filter(
+            release=release,
+            ident__in=filename_idents,
+        ).select_related('file'))
+
+        if len(possible_files) == 0:
             logger.debug('Release artifact %r not found in database (release_id=%s)',
                          filename, release.id)
             cache.set(cache_key, -1, 60)
             return None
+        elif len(possible_files) == 1:
+            releasefile = possible_files[0]
+        else:
+            # Prioritize releasefile that matches full url (w/ host)
+            # over hostless releasefile
+            target_ident = filename_idents[0]
+            releasefile = next((f for f in possible_files if f.ident == target_ident))
 
         logger.debug('Found release artifact %r (id=%s, release_id=%s)',
                      filename, releasefile.id, release.id)
diff --git a/tests/sentry/lang/javascript/fixtures/empty.js b/tests/sentry/lang/javascript/fixtures/empty.js
new file mode 100644
index 0000000000..4dd4f20c3e
--- /dev/null
+++ b/tests/sentry/lang/javascript/fixtures/empty.js
@@ -0,0 +1 @@
+// empty.js
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index 000e496e40..84b53cface 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -295,12 +295,34 @@ class JavascriptIntegrationTest(TestCase):
             version='abc',
         )
 
-        f1 = File.objects.create(
+        # file.min.js
+        # ------------
+
+        f_minified = File.objects.create(
             name='file.min.js',
             type='release.file',
             headers={'Content-Type': 'application/json'},
         )
-        f1.putfile(open(get_fixture_path('file.min.js'), 'rb'))
+        f_minified.putfile(open(get_fixture_path('file.min.js'), 'rb'))
+
+        # Intentionally omit hostname - use alternate artifact path lookup instead
+        # /file1.js vs http://example.com/file1.js
+        ReleaseFile.objects.create(
+            name='~/{}?foo=bar'.format(f_minified.name),
+            release=release,
+            project=project,
+            file=f_minified,
+        )
+
+        # file1.js
+        # ---------
+
+        f1 = File.objects.create(
+            name='file1.js',
+            type='release.file',
+            headers={'Content-Type': 'application/json'},
+        )
+        f1.putfile(open(get_fixture_path('file1.js'), 'rb'))
 
         ReleaseFile.objects.create(
             name='http://example.com/{}'.format(f1.name),
@@ -309,12 +331,15 @@ class JavascriptIntegrationTest(TestCase):
             file=f1,
         )
 
+        # file2.js
+        # ----------
+
         f2 = File.objects.create(
-            name='file1.js',
+            name='file2.js',
             type='release.file',
             headers={'Content-Type': 'application/json'},
         )
-        f2.putfile(open(get_fixture_path('file1.js'), 'rb'))
+        f2.putfile(open(get_fixture_path('file2.js'), 'rb'))
         ReleaseFile.objects.create(
             name='http://example.com/{}'.format(f2.name),
             release=release,
@@ -322,30 +347,38 @@ class JavascriptIntegrationTest(TestCase):
             file=f2,
         )
 
-        f3 = File.objects.create(
-            name='file2.js',
+        # To verify that the full url has priority over the relative url,
+        # we will also add a second ReleaseFile alias for file2.js (f3) w/o
+        # hostname that points to an empty file. If the processor chooses
+        # this empty file over the correct file2.js, it will not locate
+        # context for the 2nd frame.
+        f2_empty = File.objects.create(
+            name='empty.js',
             type='release.file',
             headers={'Content-Type': 'application/json'},
         )
-        f3.putfile(open(get_fixture_path('file2.js'), 'rb'))
+        f2_empty.putfile(open(get_fixture_path('empty.js'), 'rb'))
         ReleaseFile.objects.create(
-            name='http://example.com/{}'.format(f3.name),
+            name='~/{}'.format(f2.name),  # intentionally using f2.name ("file2.js")
             release=release,
             project=project,
-            file=f3,
+            file=f2_empty,
         )
 
-        f4 = File.objects.create(
+        # sourcemap
+        # ----------
+
+        f_sourcemap = File.objects.create(
             name='file.sourcemap.js',
             type='release.file',
             headers={'Content-Type': 'application/json'},
         )
-        f4.putfile(open(get_fixture_path('file.sourcemap.js'), 'rb'))
+        f_sourcemap.putfile(open(get_fixture_path('file.sourcemap.js'), 'rb'))
         ReleaseFile.objects.create(
-            name='http://example.com/{}'.format(f4.name),
+            name='http://example.com/{}'.format(f_sourcemap.name),
             release=release,
             project=project,
-            file=f4,
+            file=f_sourcemap,
         )
 
         data = {
@@ -358,11 +391,17 @@ class JavascriptIntegrationTest(TestCase):
                     'stacktrace': {
                         'frames': [
                             {
-                                'abs_path': 'http://example.com/file.min.js',
+                                'abs_path': 'http://example.com/file.min.js?foo=bar',
                                 'filename': 'file.min.js',
                                 'lineno': 1,
                                 'colno': 39,
                             },
+                            {
+                                'abs_path': 'http://example.com/file.min.js?foo=bar',
+                                'filename': 'file.min.js',
+                                'lineno': 1,
+                                'colno': 79,
+                            }
                         ],
                     },
                 }],
@@ -386,6 +425,19 @@ class JavascriptIntegrationTest(TestCase):
         assert frame.context_line == '\treturn a + b;'
         assert frame.post_context == ['}']
 
+        frame = frame_list[1]
+        assert frame.pre_context == [
+            'function multiply(a, b) {',
+            '\t"use strict";',
+        ]
+        assert frame.context_line == '\treturn a * b;'
+        assert frame.post_context == [
+            '}',
+            'function divide(a, b) {',
+            '\t"use strict";', u'\ttry {',
+            '\t\treturn multiply(add(a, b), a, b) / c;'
+        ]
+
     @responses.activate
     def test_sourcemap_expansion_with_missing_source(self):
         """
