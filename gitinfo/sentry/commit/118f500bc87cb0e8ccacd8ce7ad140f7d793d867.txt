commit 118f500bc87cb0e8ccacd8ce7ad140f7d793d867
Author: William Mak <william@wmak.io>
Date:   Thu May 14 14:27:11 2020 -0400

    feat(discover): Adding transaction keys to tagkey (#18766)
    
    * feat(discover): Adding transaction keys to tagkey
    
    - This allows a user to get transaction values back from the tagkey
      endpoint.
    - There's a special case for transaction status since the user queries
      based on the status name (eg. "ok") rather than the codes (eg. 1)
      - They're basically numeric codes, so I could've used the fuzzy
        numeric keys, but I think its cleaner to do an `IN` since we already
        know waht values we want.
      - A query is still done to keep it compatible with order_by, paging
        etc.

diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 43039deba5..afc4443da1 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -2,13 +2,14 @@ from __future__ import absolute_import
 
 import functools
 import six
-from collections import defaultdict, Iterable
+from collections import defaultdict, Iterable, OrderedDict
 from dateutil.parser import parse as parse_datetime
 
 from django.core.cache import cache
 
 from sentry import options
 from sentry.api.utils import default_start_end_dates
+from sentry.snuba.dataset import Dataset
 from sentry.tagstore import TagKeyStatus
 from sentry.tagstore.base import TagStorage, TOP_VALUES_DEFAULT_LIMIT
 from sentry.tagstore.exceptions import (
@@ -21,6 +22,7 @@ from sentry.tagstore.types import TagKey, TagValue, GroupTagKey, GroupTagValue
 from sentry.utils import snuba, metrics
 from sentry.utils.hashlib import md5_text
 from sentry.utils.dates import to_timestamp
+from sentry_relay.consts import SPAN_STATUS_CODE_TO_NAME
 
 
 SEEN_COLUMN = "timestamp"
@@ -672,11 +674,32 @@ class SnubaTagStorage(TagStorage):
         if not order_by == "-last_seen":
             raise ValueError("Unsupported order_by: %s" % order_by)
 
+        dataset = Dataset.Events
         snuba_key = snuba.get_snuba_column_name(key)
+        if snuba_key.startswith("tags["):
+            snuba_key = snuba.get_snuba_column_name(key, dataset=Dataset.Discover)
+            if not snuba_key.startswith("tags["):
+                dataset = Dataset.Discover
 
         conditions = []
 
-        if key in FUZZY_NUMERIC_KEYS:
+        # transaction status needs a special case so that the user interacts with the names and not codes
+        transaction_status = snuba_key == "transaction_status"
+        if transaction_status:
+            conditions.append(
+                [
+                    snuba_key,
+                    "IN",
+                    # Here we want to use the status codes during filtering,
+                    # but want to do this with names that include our query
+                    [
+                        span_key
+                        for span_key, value in six.iteritems(SPAN_STATUS_CODE_TO_NAME)
+                        if (query and query in value) or (not query)
+                    ],
+                ]
+            )
+        elif key in FUZZY_NUMERIC_KEYS:
             converted_query = int(query) if query is not None and query.isdigit() else None
             if converted_query is not None:
                 conditions.append([snuba_key, ">=", converted_query - FUZZY_NUMERIC_DISTANCE])
@@ -695,6 +718,7 @@ class SnubaTagStorage(TagStorage):
             filters["environment"] = environments
 
         results = snuba.query(
+            dataset=dataset,
             start=start,
             end=end,
             groupby=[snuba_key],
@@ -712,6 +736,15 @@ class SnubaTagStorage(TagStorage):
             referrer="tagstore.get_tag_value_paginator_for_projects",
         )
 
+        # With transaction_status we need to map the ids back to their names
+        if transaction_status:
+            results = OrderedDict(
+                [
+                    (SPAN_STATUS_CODE_TO_NAME[result_key], value)
+                    for result_key, value in six.iteritems(results)
+                ]
+            )
+
         tag_values = [
             TagValue(key=key, value=six.text_type(value), **fix_tag_value_data(data))
             for value, data in six.iteritems(results)
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
index c60365228c..2d20299ccc 100644
--- a/tests/snuba/api/endpoints/test_organization_tagkey_values.py
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -5,13 +5,14 @@ from exam import fixture
 
 from sentry.testutils import APITestCase, SnubaTestCase
 from sentry.testutils.helpers.datetime import before_now, iso_format
+from sentry.utils.samples import load_data
 
 
-class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
+class OrganizationTagKeyTestCase(APITestCase, SnubaTestCase):
     endpoint = "sentry-api-0-organization-tagkey-values"
 
     def setUp(self):
-        super(OrganizationTagKeyValuesTest, self).setUp()
+        super(OrganizationTagKeyTestCase, self).setUp()
         self.min_ago = before_now(minutes=1)
         self.day_ago = before_now(days=1)
         user = self.create_user()
@@ -21,10 +22,10 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
         self.login_as(user=user)
 
     def get_response(self, key, **kwargs):
-        return super(OrganizationTagKeyValuesTest, self).get_response(self.org.slug, key)
+        return super(OrganizationTagKeyTestCase, self).get_response(self.org.slug, key, **kwargs)
 
-    def run_test(self, key, expected):
-        response = self.get_valid_response(key)
+    def run_test(self, key, expected, **kwargs):
+        response = self.get_valid_response(key, **kwargs)
         assert [(val["value"], val["count"]) for val in response.data] == expected
 
     @fixture
@@ -35,6 +36,8 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
     def group(self):
         return self.create_group(project=self.project)
 
+
+class OrganizationTagKeyValuesTest(OrganizationTagKeyTestCase):
     def test_simple(self):
         self.store_event(
             data={"timestamp": iso_format(self.day_ago), "tags": {"fruit": "apple"}},
@@ -152,3 +155,75 @@ class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
 
     def test_no_projects(self):
         self.run_test("fruit", expected=[])
+
+
+class TransactionTagKeyValues(OrganizationTagKeyTestCase):
+    def setUp(self):
+        super(TransactionTagKeyValues, self).setUp()
+        data = load_data("transaction")
+        data["timestamp"] = iso_format(before_now(minutes=1))
+        data["start_timestamp"] = iso_format(before_now(minutes=1, seconds=5))
+        self.store_event(
+            data, project_id=self.project.id,
+        )
+        self.transaction = data.copy()
+        self.transaction.update(
+            {
+                "transaction": "/city_by_code/",
+                "timestamp": iso_format(before_now(seconds=30)),
+                "start_timestamp": iso_format(before_now(seconds=35)),
+            }
+        )
+        self.transaction["contexts"]["trace"].update(
+            {"status": "unknown_error", "parent_span_id": "9000cec7cc0779c1", "op": "bar.server"}
+        )
+        self.store_event(
+            self.transaction, project_id=self.project.id,
+        )
+
+    def test_status(self):
+        self.run_test("transaction.status", expected=[("unknown_error", 1), ("ok", 1)])
+        self.run_test(
+            "transaction.status",
+            qs_params={"query": "o"},
+            expected=[("unknown_error", 1), ("ok", 1)],
+        )
+        self.run_test(
+            "transaction.status", qs_params={"query": "ow"}, expected=[("unknown_error", 1)]
+        )
+
+    def test_op(self):
+        self.run_test("transaction.op", expected=[("bar.server", 1), ("foobar", 1)])
+        self.run_test(
+            "transaction.op",
+            qs_params={"query": "bar"},
+            expected=[("bar.server", 1), ("foobar", 1)],
+        )
+        self.run_test("transaction.op", qs_params={"query": "server"}, expected=[("bar.server", 1)])
+
+    def test_duration(self):
+        self.run_test("transaction.duration", expected=[("5000", 2)])
+        self.run_test("transaction.duration", qs_params={"query": "5001"}, expected=[("5000", 2)])
+        self.run_test("transaction.duration", qs_params={"query": "50"}, expected=[])
+
+    def test_transaction_title(self):
+        self.run_test("transaction", expected=[("/city_by_code/", 1), ("/country_by_code/", 1)])
+        self.run_test(
+            "transaction",
+            qs_params={"query": "by_code"},
+            expected=[("/city_by_code/", 1), ("/country_by_code/", 1)],
+        )
+        self.run_test("transaction", qs_params={"query": "city"}, expected=[("/city_by_code/", 1)])
+
+    def test_parent_span(self):
+        self.run_test(
+            "trace.parent_span", expected=[("9000cec7cc0779c1", 1), ("8988cec7cc0779c1", 1)]
+        )
+        self.run_test(
+            "trace.parent_span",
+            qs_params={"query": "cec7cc"},
+            expected=[("9000cec7cc0779c1", 1), ("8988cec7cc0779c1", 1)],
+        )
+        self.run_test(
+            "trace.parent_span", qs_params={"query": "9000"}, expected=[("9000cec7cc0779c1", 1)]
+        )
