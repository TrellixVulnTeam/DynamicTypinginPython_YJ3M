commit fef65db516faa43176ea51a33d4cf07ea672276e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri May 17 08:32:31 2019 -0700

    tests(js): Add integration test for creating an Incident from Stream (#13253)
    
    Adds a test for creating an incident from the stream

diff --git a/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx b/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
index a3cfba615b..dfc96af098 100644
--- a/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
+++ b/src/sentry/static/sentry/app/components/modals/createIncidentModal.jsx
@@ -66,6 +66,7 @@ class CreateIncidentModal extends React.Component {
         </Header>
         <Body>
           <Form
+            data-test-id="create-new-incident-form"
             submitLabel={t('Create Incident')}
             onSubmit={this.handleSubmit}
             onSubmitSuccess={this.handleSuccess}
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index 7cb4d8d91b..452af08cc5 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -401,7 +401,7 @@ const StreamActions = createReactClass({
                     openCreateIncidentModal({organization, issues: Array.from(issues)})
                   }
                 >
-                  <InlineSvg src="icon-circle-add" />
+                  <InlineSvg data-test-id="create-incident" src="icon-circle-add" />
                 </ActionLink>
               </div>
             </Feature>
diff --git a/tests/js/spec/views/organizationStream/createIncident.spec.jsx b/tests/js/spec/views/organizationStream/createIncident.spec.jsx
new file mode 100644
index 0000000000..4ef1075719
--- /dev/null
+++ b/tests/js/spec/views/organizationStream/createIncident.spec.jsx
@@ -0,0 +1,199 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount} from 'enzyme';
+import GlobalModal from 'app/components/globalModal';
+import OrganizationStreamWithStores from 'app/views/organizationStream/overview';
+import TagStore from 'app/stores/tagStore';
+
+jest.mock('app/views/stream/sidebar', () => jest.fn(() => null));
+
+describe('OrganizationStream --> Create Incident', function() {
+  let wrapper;
+
+  const {project, router, routerContext} = initializeOrg({
+    organization: {
+      features: ['sentry10', 'global-views', 'incidents'],
+      access: ['releases'],
+      slug: 'org-slug',
+    },
+    router: {
+      location: {query: {}, search: ''},
+      params: {orgId: 'org-slug'},
+    },
+  });
+  const defaultProps = {};
+
+  const group = TestStubs.Group({project});
+  const savedSearch = TestStubs.Search({
+    id: '789',
+    query: 'is:unresolved',
+    name: 'Unresolved Issues',
+    projectId: project.id,
+  });
+
+  TagStore.init();
+
+  const createWrapper = ({params, location, ...p} = {}) => {
+    const newRouter = {
+      ...router,
+      params: {
+        ...router.params,
+        ...params,
+      },
+      location: {
+        ...router.location,
+        ...location,
+      },
+    };
+
+    wrapper = mount(
+      <div>
+        <GlobalModal />
+        <OrganizationStreamWithStores {...newRouter} {...defaultProps} {...p} />
+      </div>,
+      routerContext
+    );
+  };
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/searches/',
+      body: [savedSearch],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/recent-searches/',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/processingissues/',
+      method: 'GET',
+      body: [
+        {
+          project: 'test-project',
+          numIssues: 1,
+          hasIssues: true,
+          lastSeen: '2019-01-16T15:39:11.081Z',
+        },
+      ],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/tags/',
+      method: 'GET',
+      body: TestStubs.Tags(),
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/users/',
+      method: 'GET',
+      body: [TestStubs.Member({projects: [project.slug]})],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/recent-searches/',
+      method: 'GET',
+      body: [],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/searches/',
+      body: [savedSearch],
+    });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/issues/',
+      body: [
+        group,
+        TestStubs.Group({
+          id: '2',
+        }),
+      ],
+    });
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+    if (wrapper) {
+      wrapper.unmount();
+    }
+    wrapper = null;
+  });
+
+  it('creates an incident by selecting issues from stream', async function() {
+    const createIncident = MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      method: 'POST',
+      body: {
+        identifier: '468',
+      },
+    });
+    createWrapper({
+      selection: {
+        projects: [123],
+        environments: ['prod'],
+        datetime: {},
+      },
+      location: {query: {project: ['123'], environment: ['prod']}},
+    });
+
+    await tick();
+    await tick();
+    wrapper.update();
+
+    // Select checkboxes
+    wrapper
+      .find('GroupCheckbox')
+      .at(0)
+      .simulate('click');
+    wrapper
+      .find('GroupCheckbox')
+      .at(1)
+      .simulate('click');
+
+    wrapper
+      .find('[data-test-id="create-incident"]')
+      .at(0)
+      .simulate('click');
+
+    // Needs two ticks, one for reflux and one for dynamic import maybe? idk
+    await tick();
+    await tick();
+    wrapper.update();
+
+    wrapper
+      .find('input[name="title"]')
+      .simulate('change', {target: {value: 'New Incident'}})
+      .simulate('blur');
+    wrapper.find('DatePickerField[name="dateStarted"] input').simulate('click');
+
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('Calendar')).toHaveLength(1);
+
+    wrapper
+      .find('Calendar DayCell')
+      .at(0)
+      .simulate('mouseUp');
+    wrapper.find('Form').simulate('submit');
+
+    expect(createIncident).toHaveBeenCalledWith(
+      '/organizations/org-slug/incidents/',
+      expect.objectContaining({
+        data: {
+          dateStarted: new Date('2017-10-01T04:00:00.000Z'),
+          groups: ['1', '2'],
+          query: '',
+          title: 'New Incident',
+        },
+      })
+    );
+
+    // form model submitting requires this?
+    await tick();
+    wrapper.update();
+
+    // redirect to details
+    expect(browserHistory.push).toHaveBeenCalledWith(
+      '/organizations/org-slug/incidents/468/'
+    );
+  });
+});
