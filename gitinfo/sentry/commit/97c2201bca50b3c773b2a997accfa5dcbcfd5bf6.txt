commit 97c2201bca50b3c773b2a997accfa5dcbcfd5bf6
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 29 01:23:47 2016 +0200

    Added basic thread handling

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index fdd3d475b4..1850d90f9e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -720,6 +720,7 @@ SENTRY_INTERFACES = {
     'applecrashreport': 'sentry.interfaces.applecrash.AppleCrashReport',
     'breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'contexts': 'sentry.interfaces.contexts.Contexts',
+    'threads': 'sentry.interfaces.threads.Threads',
     'sentry.interfaces.Exception': 'sentry.interfaces.exception.Exception',
     'sentry.interfaces.Message': 'sentry.interfaces.message.Message',
     'sentry.interfaces.Stacktrace': 'sentry.interfaces.stacktrace.Stacktrace',
@@ -731,6 +732,7 @@ SENTRY_INTERFACES = {
     'sentry.interfaces.AppleCrashReport': 'sentry.interfaces.applecrash.AppleCrashReport',
     'sentry.interfaces.Breadcrumbs': 'sentry.interfaces.breadcrumbs.Breadcrumbs',
     'sentry.interfaces.Contexts': 'sentry.interfaces.contexts.Contexts',
+    'sentry.interfaces.Threads': 'sentry.interfaces.threads.Threads',
 }
 
 SENTRY_EMAIL_BACKEND_ALIASES = {
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 8fbcf3268b..fd4ddfa285 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -86,6 +86,7 @@ class SingleException(Interface):
             'module': trim(data.get('module'), 128),
             'mechanism': mechanism,
             'stacktrace': stacktrace,
+            'thread_id': trim(data.get('thread_id', 40)),
             'raw_stacktrace': raw_stacktrace,
         }
 
@@ -126,6 +127,7 @@ class SingleException(Interface):
             'type': self.type,
             'value': unicode(self.value) if self.value else None,
             'mechanism': self.mechanism or None,
+            'threadId': self.thread_id,
             'module': self.module,
             'stacktrace': stacktrace,
             'rawStacktrace': raw_stacktrace,
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
new file mode 100644
index 0000000000..f7d2a742c8
--- /dev/null
+++ b/src/sentry/interfaces/threads.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from sentry.interfaces.base import Interface
+from sentry.interfaces.stacktrace import Stacktrace
+from sentry.utils.safe import trim
+
+__all__ = ('Threads',)
+
+
+class Threads(Interface):
+    score = 3000
+
+    @classmethod
+    def to_python(cls, data):
+        threads = []
+
+        for thread in data.get('threads') or ():
+            stacktrace = None
+            if 'stacktrace' in thread:
+                stacktrace = Stacktrace.to_python(
+                    thread['stacktrace'],
+                    slim_frames=True,
+                )
+
+            threads.append({
+                'stacktrace': stacktrace,
+                'index': trim(thread.get('trim'), 20),
+                'id': trim(thread.get('id'), 40),
+                'current': bool(thread.get('current')),
+                'name': trim(thread.get('name'), 200),
+            })
+
+        return cls(threads=threads)
+
+    def to_json(self):
+        def export_thread(data):
+            rv = {
+                'index': data['index'],
+                'id': data['id'],
+                'current': data['current'],
+                'name': data['name'],
+                'stacktrace': None,
+            }
+            if data['stacktrace']:
+                rv['stacktrace'] = data['stacktrace'].to_json()
+            return data
+
+        return {
+            'threads': [export_thread(x) for x in self.threads],
+        }
+
+    def get_path(self):
+        return 'threads'
