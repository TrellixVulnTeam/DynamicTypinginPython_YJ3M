commit b4a0b23906057158588a7b9e94f561dd5943d3db
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jun 14 22:37:22 2016 -0700

    Add email notifications for user feedback
    
    - New signal subsystem
    - Add user-reports.created signal
    - Add support to mail integration for user-reports.created

diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index ee16a69199..dee8d351f9 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -134,6 +134,10 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
             )
             report = existing_report
 
+        else:
+            if report.group:
+                report.notify()
+
         user_feedback_received.send(project=report.project, group=report.group, sender=self)
 
         return Response(serialize(report, request.user, ProjectUserReportSerializer(
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 758a2c3ce9..26781e6f9e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -432,7 +432,7 @@ CELERY_IMPORTS = (
     'sentry.tasks.digests', 'sentry.tasks.email', 'sentry.tasks.merge',
     'sentry.tasks.options', 'sentry.tasks.ping', 'sentry.tasks.post_process',
     'sentry.tasks.process_buffer', 'sentry.tasks.reports', 'sentry.tasks.reprocessing',
-    'sentry.tasks.scheduler', 'sentry.tasks.store', 'sentry.tasks.unmerge',
+    'sentry.tasks.scheduler', 'sentry.tasks.signals', 'sentry.tasks.store', 'sentry.tasks.unmerge',
     'sentry.tasks.symcache_update', 'sentry.tasks.servicehooks',
 )
 CELERY_QUEUES = [
diff --git a/src/sentry/models/userreport.py b/src/sentry/models/userreport.py
index aa92e8495b..b2163303df 100644
--- a/src/sentry/models/userreport.py
+++ b/src/sentry/models/userreport.py
@@ -32,3 +32,18 @@ class UserReport(Model):
         unique_together = (('project', 'event_id'), )
 
     __repr__ = sane_repr('event_id', 'name', 'email')
+
+    def notify(self):
+        from django.contrib.auth.models import AnonymousUser
+        from sentry.api.serializers import (
+            serialize, ProjectUserReportSerializer
+        )
+        from sentry.tasks.signals import signal
+
+        signal.delay(
+            name='user-reports.created',
+            project_id=self.project_id,
+            payload={
+                'report': serialize(self, AnonymousUser(), ProjectUserReportSerializer()),
+            },
+        )
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 72a1cd7040..d406913e11 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -507,6 +507,9 @@ class IPlugin(local, PluggableViewMixin, PluginConfigMixin, PluginStatusMixin):
         self.configure(project, request.DATA)
         return Response({'message': 'Successfully updated configuration.'})
 
+    def handle_signal(self, name, payload, **kwargs):
+        pass
+
 
 @six.add_metaclass(PluginMount)
 class Plugin(IPlugin):
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 50dd5a9713..e02d968d82 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -442,6 +442,9 @@ class IPlugin2(local, PluginConfigMixin, PluginStatusMixin):
     def get_url_module(self):
         """Allows a plugin to return the import path to a URL module."""
 
+    def handle_signal(self, name, payload, **kwargs):
+        pass
+
 
 @six.add_metaclass(PluginMount)
 class Plugin2(IPlugin2):
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index 9ce576a66a..81e22321d5 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -274,6 +274,82 @@ class MailPlugin(NotificationPlugin):
         email = email_cls(activity)
         email.send()
 
+    def handle_user_report(self, payload, project, **kwargs):
+        from sentry.models import Group, GroupSubscription, GroupSubscriptionReason
+
+        group = Group.objects.get(id=payload['report']['issue']['id'])
+
+        participants = GroupSubscription.objects.get_participants(group=group)
+
+        if not participants:
+            return
+
+        context = {
+            'project': project,
+            'project_link': absolute_uri('/{}/{}/'.format(
+                project.organization.slug,
+                project.slug,
+            )),
+            'issue_link': absolute_uri('/{}/{}/issues/{}/'.format(
+                project.organization.slug,
+                project.slug,
+                payload['report']['issue']['id'],
+            )),
+            # TODO(dcramer): we dont have permalinks to feedback yet
+            'link': absolute_uri('/{}/{}/issues/{}/feedback/'.format(
+                project.organization.slug,
+                project.slug,
+                payload['report']['issue']['id'],
+            )),
+            'group': group,
+            'report': payload['report'],
+        }
+
+        subject_prefix = self.get_option('subject_prefix', project) or self._subject_prefix()
+        subject_prefix = force_text(subject_prefix)
+        subject = force_text(u'{}{} - New Feedback from {}'.format(
+            subject_prefix,
+            group.qualified_short_id,
+            payload['report']['name'],
+        ))
+
+        headers = {
+            'X-Sentry-Team': project.team.slug,
+            'X-Sentry-Project': project.slug,
+        }
+
+        # TODO(dcramer): this is copypasta'd from activity notifications
+        # and while it'd be nice to re-use all of that, they are currently
+        # coupled to <Activity> instances which makes this tough
+        for user, reason in participants.items():
+            context.update({
+                'reason': GroupSubscriptionReason.descriptions.get(
+                    reason,
+                    "are subscribed to this issue",
+                ),
+                'unsubscribe_link': generate_signed_link(
+                    user.id,
+                    'sentry-account-email-unsubscribe-issue',
+                    kwargs={'issue_id': group.id},
+                ),
+            })
+
+            msg = MessageBuilder(
+                subject=subject,
+                template='sentry/emails/activity/new-user-feedback.txt',
+                html_template='sentry/emails/activity/new-user-feedback.html',
+                headers=headers,
+                type='notify.user-report',
+                context=context,
+                reference=group,
+            )
+            msg.add_users([user.id], project=project)
+            msg.send_async()
+
+    def handle_signal(self, name, payload, **kwargs):
+        if name == 'user-reports.created':
+            self.handle_user_report(payload, **kwargs)
+
 
 # Legacy compatibility
 MailProcessor = MailPlugin
diff --git a/src/sentry/tasks/signals.py b/src/sentry/tasks/signals.py
new file mode 100644
index 0000000000..d3bb1f2e97
--- /dev/null
+++ b/src/sentry/tasks/signals.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.plugins import plugins
+from sentry.tasks.base import instrumented_task
+from sentry.utils.safe import safe_execute
+
+
+@instrumented_task(name='sentry.tasks.signal')
+def signal(name, payload, project_id=None, **kwargs):
+    from sentry.models import Project
+
+    if project_id is not None:
+        project = Project.objects.get_from_cache(id=project_id)
+    else:
+        project = None
+
+    for plugin in plugins.for_project(project, version=1):
+        safe_execute(plugin.handle_signal, name=name, payload=payload, project=project)
+
+    for plugin in plugins.for_project(project, version=2):
+        safe_execute(plugin.handle_signal, name=name, payload=payload, project=project)
diff --git a/src/sentry/templates/sentry/debug/mail/preview.html b/src/sentry/templates/sentry/debug/mail/preview.html
index e61993a73a..3ac83bdfe3 100644
--- a/src/sentry/templates/sentry/debug/mail/preview.html
+++ b/src/sentry/templates/sentry/debug/mail/preview.html
@@ -15,6 +15,7 @@
         <option value="mail/resolved-in-release/">Resolved In Release</option>
         <option value="mail/resolved-in-release/upcoming/">Resolved In Release (Upcoming)</option>
         <option value="mail/unassigned/">Unassigned</option>
+        <option value="mail/new-user-feedback/">New User Feedback</option>
         <option value="mail/new-processing-issues/">New Processing Issues</option>
         <option value="mail/new-processing-issues-no-reprocessing/">New Processing Issues (No Reprocessing)</option>
       </optgroup>
diff --git a/src/sentry/templates/sentry/emails/activity/new-user-feedback.html b/src/sentry/templates/sentry/emails/activity/new-user-feedback.html
new file mode 100644
index 0000000000..32dd9bd696
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/activity/new-user-feedback.html
@@ -0,0 +1,23 @@
+{% extends "sentry/emails/activity/generic.html" %}
+
+{% load sentry_avatars %}
+{% load sentry_helpers %}
+{% load sentry_assets %}
+
+{% block activity %}
+  <h3>New Feedback from {{ report.name }}</h3>
+
+  <table class="note">
+    <tr>
+      <td class="avatar-column">
+        {% email_avatar report.name report.email size 48 %}
+      </td>
+      <td class="notch-column">
+        <img width="7" height="48" src="{% absolute_asset_url 'sentry' 'images/email/avatar-notch.png' %}">
+      </td>
+      <td>
+        <div class="note-body">{{ report.comments|urlize|linebreaks }}</div>
+      </td>
+    </tr>
+  </table>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt b/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt
new file mode 100644
index 0000000000..8ebd281152
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/activity/new-user-feedback.txt
@@ -0,0 +1,19 @@
+{% spaceless %}
+{% autoescape off %}
+# New Feedback
+
+{{ report.name }} left a new comment:
+
+{{ report.comments }}
+
+
+## Details
+
+{{ group.message_short }}
+
+{{ link }}
+
+Unsubscribe: {{ unsubscribe_link }}
+
+{% endautoescape %}
+{% endspaceless %}
diff --git a/src/sentry/web/debug_urls.py b/src/sentry/web/debug_urls.py
index 734993dfa8..716691d6c9 100644
--- a/src/sentry/web/debug_urls.py
+++ b/src/sentry/web/debug_urls.py
@@ -14,6 +14,7 @@ from sentry.web.frontend.debug.debug_invalid_identity_email import DebugInvalidI
 from sentry.web.frontend.debug.debug_mfa_added_email import (DebugMfaAddedEmailView)
 from sentry.web.frontend.debug.debug_mfa_removed_email import (DebugMfaRemovedEmailView)
 from sentry.web.frontend.debug.debug_new_release_email import (DebugNewReleaseEmailView)
+from sentry.web.frontend.debug.debug_new_user_feedback_email import (DebugNewUserFeedbackEmailView)
 from sentry.web.frontend.debug.debug_note_email import DebugNoteEmailView
 from sentry.web.frontend.debug.debug_password_changed_email import (DebugPasswordChangedEmailView)
 from sentry.web.frontend.debug.debug_regression_email import (
@@ -46,6 +47,7 @@ urlpatterns = patterns(
     url(r'^debug/mail/alert/$', sentry.web.frontend.debug.mail.alert),
     url(r'^debug/mail/note/$', DebugNoteEmailView.as_view()),
     url(r'^debug/mail/new-release/$', DebugNewReleaseEmailView.as_view()),
+    url(r'^debug/mail/new-user-feedback/$', DebugNewUserFeedbackEmailView.as_view()),
     url(r'^debug/mail/assigned/$', DebugAssignedEmailView.as_view()),
     url(r'^debug/mail/assigned/self/$', DebugSelfAssignedEmailView.as_view()),
     url(r'^debug/mail/digest/$', sentry.web.frontend.debug.mail.digest),
diff --git a/src/sentry/web/frontend/debug/debug_new_user_feedback_email.py b/src/sentry/web/frontend/debug/debug_new_user_feedback_email.py
new file mode 100644
index 0000000000..65ba5f393b
--- /dev/null
+++ b/src/sentry/web/frontend/debug/debug_new_user_feedback_email.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from django.views.generic import View
+
+from sentry.models import Group, Organization, Project, Team
+
+from .mail import MailPreview
+
+
+class DebugNewUserFeedbackEmailView(View):
+    def get(self, request):
+        org = Organization(
+            id=1,
+            slug='organization',
+            name='My Company',
+        )
+        team = Team(
+            id=1,
+            slug='team',
+            name='My Team',
+            organization=org,
+        )
+        project = Project(
+            id=1,
+            organization=org,
+            team=team,
+            slug='project',
+            name='My Project',
+        )
+        group = Group(
+            id=1,
+            project=project,
+        )
+
+        return MailPreview(
+            html_template='sentry/emails/activity/new-user-feedback.html',
+            text_template='sentry/emails/activity/new-user-feedback.txt',
+            context={
+                'group': group,
+                'report': {
+                    'name': 'Homer Simpson',
+                    'email': 'homer.simpson@example.com',
+                    'comments': 'I hit a bug.\n\nI went to https://example.com, hit the any key, and then it stopped working. DOH!',
+                },
+            },
+        ).render(request)
diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 8973a5e558..c241400feb 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -142,6 +142,10 @@ class ErrorPageEmbedView(View):
                     date_added=timezone.now(),
                 )
 
+            else:
+                if report.group:
+                    report.notify()
+
             user_feedback_received.send(project=report.project, group=report.group, sender=self)
 
             return self._json_response(request)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 3a29543ba2..42b3bc2384 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -7,16 +7,20 @@ from datetime import datetime
 import mock
 import pytz
 import six
+from django.contrib.auth.models import AnonymousUser
 from django.core import mail
 from django.utils import timezone
 from exam import fixture
 from mock import Mock
 
+from sentry.api.serializers import (
+    serialize, ProjectUserReportSerializer
+)
 from sentry.digests.notifications import build_digest, event_to_record
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import (
     Activity, Event, Group, GroupSubscription, OrganizationMember, OrganizationMemberTeam, Rule,
-    UserOption
+    UserOption, UserReport
 )
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.activity.base import ActivityEmail
@@ -351,6 +355,42 @@ class MailPluginTest(TestCase):
         assert msg.to == [self.user.email]
 
 
+class MailPluginSignalsTest(TestCase):
+    @fixture
+    def plugin(self):
+        return MailPlugin()
+
+    def test_user_feedback(self):
+        user_foo = self.create_user('foo@example.com')
+
+        report = UserReport.objects.create(
+            project=self.project,
+            group=self.group,
+            name='Homer Simpson',
+            email='homer.simpson@example.com'
+        )
+
+        self.project.team.organization.member_set.create(user=user_foo)
+
+        with self.tasks():
+            self.plugin.handle_signal(
+                name='user-reports.created',
+                project=self.project,
+                payload={
+                    'report': serialize(report, AnonymousUser(), ProjectUserReportSerializer()),
+                },
+            )
+
+        assert len(mail.outbox) == 1
+
+        msg = mail.outbox[0]
+
+        assert msg.subject == '[Sentry] {} - New Feedback from Homer Simpson'.format(
+            self.group.qualified_short_id,
+        )
+        assert msg.to == [self.user.email]
+
+
 class ActivityEmailTestCase(TestCase):
     def get_fixture_data(self, users):
         organization = self.create_organization(owner=self.create_user())
diff --git a/tests/sentry/tasks/test_signals.py b/tests/sentry/tasks/test_signals.py
new file mode 100644
index 0000000000..2ff81e3c11
--- /dev/null
+++ b/tests/sentry/tasks/test_signals.py
@@ -0,0 +1,9 @@
+from __future__ import absolute_import
+
+from sentry.tasks.signals import signal
+from sentry.testutils import TestCase
+
+
+class SignalTest(TestCase):
+    def test_task_persistent_name(self):
+        assert signal.name == 'sentry.tasks.signal'
