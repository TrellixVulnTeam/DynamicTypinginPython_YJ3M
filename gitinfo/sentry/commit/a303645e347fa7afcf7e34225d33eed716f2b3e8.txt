commit a303645e347fa7afcf7e34225d33eed716f2b3e8
Author: Kamil Og√≥rek <kamil.ogorek@gmail.com>
Date:   Wed Jun 24 17:31:42 2020 +0200

    fix: Correctly detect filetype in JS processing pipeline

diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 3c3d473e0f..c5a82883e5 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -388,7 +388,7 @@ def fetch_file(url, project=None, release=None, dist=None, allow_scraping=True):
     # For JavaScript files, check if content is something other than JavaScript/JSON (i.e. HTML)
     # NOTE: possible to have JS files that don't actually end w/ ".js", but
     # this should catch 99% of cases
-    if url.endswith(".js"):
+    if urlsplit(url).path.endswith(".js"):
         # Check if response is HTML by looking if the first non-whitespace character is an open tag ('<').
         # This cannot parse as valid JS/JSON.
         # NOTE: not relying on Content-Type header because apps often don't set this correctly
diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index e4bd132972..cb160600f2 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -1133,6 +1133,42 @@ class JavascriptIntegrationTest(SnubaTestCase):
             {"url": u"http://example.com/file2.js", "type": "js_invalid_content"},
         ]
 
+    @responses.activate
+    def test_html_file_with_query_param_ending_with_js_extension(self):
+        responses.add(
+            responses.GET,
+            "http://example.com/file.html",
+            body=(
+                "<!doctype html><html><head></head><body><script>/*legit case*/</script></body></html>"
+            ),
+        )
+        data = {
+            "timestamp": self.min_ago,
+            "message": "hello",
+            "platform": "javascript",
+            "exception": {
+                "values": [
+                    {
+                        "type": "Error",
+                        "stacktrace": {
+                            "frames": [
+                                {
+                                    "abs_path": "http://example.com/file.html?sw=iddqd1337.js",
+                                    "filename": "file.html",
+                                    "lineno": 1,
+                                    "colno": 1,
+                                },
+                            ]
+                        },
+                    }
+                ]
+            },
+        }
+
+        event = self.post_and_retrieve_event(data)
+
+        assert "errors" not in event.data
+
     def test_node_processing(self):
         project = self.project
         release = Release.objects.create(
