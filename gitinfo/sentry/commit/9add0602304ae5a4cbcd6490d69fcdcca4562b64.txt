commit 9add0602304ae5a4cbcd6490d69fcdcca4562b64
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Dec 18 11:04:28 2014 -0800

    Allow team removal given ownership

diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index aa2f4a2a9a..8a9f3535bc 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -217,22 +217,6 @@ def can_remove_organization_member(user, member):
     return can_manage_organization_member(user, member, 'remove_organization_member')
 
 
-@requires_login
-def can_remove_team(user, team):
-    if user.is_superuser:
-        return True
-
-    # must be an owner of the team
-    if not is_team_admin(user, team):
-        return False
-
-    result = plugins.first('has_perm', user, 'remove_team', team)
-    if result is False:
-        return False
-
-    return True
-
-
 @requires_login
 def can_remove_project(user, project):
     if project.is_internal_project():
diff --git a/src/sentry/templates/sentry/teams/manage.html b/src/sentry/templates/sentry/teams/manage.html
index 24f244dbe4..5f8934065e 100644
--- a/src/sentry/templates/sentry/teams/manage.html
+++ b/src/sentry/templates/sentry/teams/manage.html
@@ -47,8 +47,6 @@
       <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
       {% if can_remove_team %}
           <a href="{% url 'sentry-remove-team' organization.slug team.slug %}" class="btn btn-danger">{% trans "Remove Team" %}</a>
-      {% else %}
-          <div class="pull-right note">{% trans "You cannot remove this team because it has projects assigned to it" %}</div>
       {% endif %}
     </fieldset>
   </form>
diff --git a/src/sentry/templatetags/sentry_permissions.py b/src/sentry/templatetags/sentry_permissions.py
index fe955c564c..63849fb839 100644
--- a/src/sentry/templatetags/sentry_permissions.py
+++ b/src/sentry/templatetags/sentry_permissions.py
@@ -11,8 +11,7 @@ from django import template
 
 from sentry.permissions import (
     can_create_organizations, can_create_teams, can_create_projects,
-    can_remove_team, can_remove_project, can_manage_project, can_manage_team,
-    can_manage_org
+    can_remove_project, can_manage_project, can_manage_team, can_manage_org
 )
 
 register = template.Library()
@@ -25,5 +24,4 @@ register.filter('can_create_projects')(lambda a, b: can_create_projects(a, b))
 register.filter('can_manage_team')(lambda a, b: can_manage_team(a, b))
 register.filter('can_manage_project')(lambda a, b: can_manage_project(a, b))
 register.filter('can_manage_org')(lambda a, b: can_manage_org(a, b))
-register.filter('can_remove_team')(lambda a, b: can_remove_team(a, b))
 register.filter('can_remove_project')(lambda a, b: can_remove_project(a, b))
diff --git a/src/sentry/web/frontend/remove_team.py b/src/sentry/web/frontend/remove_team.py
index 7e924589d6..b3ef2357bc 100644
--- a/src/sentry/web/frontend/remove_team.py
+++ b/src/sentry/web/frontend/remove_team.py
@@ -9,7 +9,6 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, TeamStatus
 )
-from sentry.permissions import can_remove_team
 from sentry.tasks.deletion import delete_team
 from sentry.web.frontend.base import TeamView
 
@@ -28,9 +27,6 @@ class RemoveTeamView(TeamView):
         return RemoveTeamForm(None)
 
     def handle(self, request, organization, team):
-        if not can_remove_team(request.user, team):
-            return HttpResponseRedirect(reverse('sentry'))
-
         form = self.get_form(request)
 
         if form.is_valid():
diff --git a/src/sentry/web/frontend/team_settings.py b/src/sentry/web/frontend/team_settings.py
index 7c10a0138f..f0ad2d5fc8 100644
--- a/src/sentry/web/frontend/team_settings.py
+++ b/src/sentry/web/frontend/team_settings.py
@@ -3,13 +3,14 @@ from __future__ import absolute_import
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
+from django.db.models import Q
 from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, Team, OrganizationMemberType
+    AuditLogEntry, AuditLogEntryEvent, Team, OrganizationMember,
+    OrganizationMemberType
 )
-from sentry.permissions import can_remove_team
 from sentry.plugins import plugins
 from sentry.web.frontend.base import TeamView
 
@@ -23,30 +24,10 @@ class EditTeamForm(forms.ModelForm):
 class TeamSettingsView(TeamView):
     required_access = OrganizationMemberType.ADMIN
 
-    def get_default_context(self, request, **kwargs):
-        context = super(TeamSettingsView, self).get_default_context(request, **kwargs)
-        context.update({
-            'can_remove_team': can_remove_team(request.user, kwargs['team']),
-        })
-        return context
-
     def get_form(self, request, team):
         return EditTeamForm(request.POST or None, instance=team)
 
-    def get(self, request, organization, team):
-        result = plugins.first('has_perm', request.user, 'edit_team', team)
-        if result is False and not request.user.is_superuser:
-            return HttpResponseRedirect(reverse('sentry'))
-
-        form = self.get_form(request, team)
-
-        context = {
-            'form': form,
-        }
-
-        return self.respond('sentry/teams/manage.html', context)
-
-    def post(self, request, organization, team):
+    def handle(self, request, organization, team):
         result = plugins.first('has_perm', request.user, 'edit_team', team)
         if result is False and not request.user.is_superuser:
             return HttpResponseRedirect(reverse('sentry'))
@@ -69,8 +50,18 @@ class TeamSettingsView(TeamView):
 
             return HttpResponseRedirect(reverse('sentry-manage-team', args=[organization.slug, team.slug]))
 
+        if request.user.is_superuser:
+            can_remove_team = True
+        else:
+            can_remove_team = OrganizationMember.objects.filter(
+                Q(has_global_access=True) | Q(teams=team),
+                user=request.user,
+                type__lte=OrganizationMemberType.OWNER,
+            ).exists()
+
         context = {
             'form': form,
+            'can_remove_team': can_remove_team,
         }
 
         return self.respond('sentry/teams/manage.html', context)
diff --git a/tests/sentry/web/frontend/test_remove_team.py b/tests/sentry/web/frontend/test_remove_team.py
index 8662e8da41..6febc60815 100644
--- a/tests/sentry/web/frontend/test_remove_team.py
+++ b/tests/sentry/web/frontend/test_remove_team.py
@@ -38,20 +38,12 @@ class RemoveTeamTest(TestCase):
         self.path = reverse('sentry-remove-team', args=[organization.slug, self.team.slug])
         self.login_as(self.organization.owner)
 
-    @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=True))
     def test_does_load(self):
         resp = self.client.get(self.path)
 
         assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/teams/remove.html')
 
-    @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=False))
-    def test_missing_permission(self):
-        resp = self.client.post(self.path)
-
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry')
-
     @mock.patch('sentry.web.frontend.remove_team.can_remove_team', mock.Mock(return_value=True))
     def test_valid_params(self):
         resp = self.client.post(self.path)
