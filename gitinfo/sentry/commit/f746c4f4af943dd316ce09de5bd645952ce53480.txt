commit f746c4f4af943dd316ce09de5bd645952ce53480
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 30 22:35:00 2012 -0700

    More test speed improvements

diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 09b7325b16..1e4a7a5937 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -9,7 +9,7 @@ from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER
 from sentry.models import Project, Team
-
+from sentry.testutils import fixture
 from tests.base import TestCase
 
 logger = logging.getLogger(__name__)
@@ -18,11 +18,16 @@ logger = logging.getLogger(__name__)
 class NewProjectTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
-    def setUp(self):
-        self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        self.user.set_password('admin')
-        self.user.save()
-        self.team = Team.objects.create(name='foo', slug='foo', owner=self.user)
+    @fixture
+    def user(self):
+        user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
+        user.set_password('admin')
+        user.save()
+        return user
+
+    @fixture
+    def team(self):
+        return Team.objects.create(name='foo', slug='foo', owner=self.user)
 
     def test_new_project(self):
         path = reverse('sentry-new-team-project', args=[self.team.slug])
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 5bef20edc6..c1ada6a87d 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -9,22 +9,37 @@ from django.core.urlresolvers import reverse
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import Team
-
+from sentry.testutils import fixture
 from tests.base import TestCase
 
 
 class BaseTeamTest(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
+    @fixture
+    def user(self):
+        user = User(username="user", email="admin@localhost", is_staff=False, is_superuser=False)
+        user.set_password('password')
+        user.save()
+        return user
+
+    @fixture
+    def user2(self):
+        user = User.objects.create(username="other", email="other@localhost")
+        self.team.member_set.create(user=user, type=MEMBER_USER)
+        return user
+
+    @fixture
+    def tm(self):
+        return self.team.member_set.get(user=self.user, type=MEMBER_OWNER)
+
+    @fixture
+    def tm2(self):
+        return self.team.member_set.get(user=self.user2)
+
     def setUp(self):
-        self.user = User(username="user", email="admin@localhost", is_staff=False, is_superuser=False)
-        self.user.set_password('user')
-        self.user.save()
-        self.user2 = User.objects.create(username="other", email="other@localhost")
         self.team = Team.objects.create(name='foo', slug='foo', owner=self.user)
-        self.tm = self.team.member_set.get_or_create(user=self.user, type=MEMBER_OWNER)[0]
-        self.tm2 = self.team.member_set.get_or_create(user=self.user2, type=MEMBER_USER)[0]
-        assert self.client.login(username='user', password='user')
+        assert self.client.login(username=self.user.username, password='password')
 
 
 class TeamListTest(BaseTeamTest):
@@ -35,21 +50,25 @@ class TeamListTest(BaseTeamTest):
 
 
 class NewTeamTest(BaseTeamTest):
+    @fixture
+    def path(self):
+        return reverse('sentry-new-team')
+
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=False))
     def test_missing_permission(self):
-        resp = self.client.post(reverse('sentry-new-team'))
+        resp = self.client.post(self.path)
         self.assertEquals(resp.status_code, 302)
         self.assertEquals(resp['Location'], 'http://testserver' + reverse('sentry'))
 
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
     def test_missing_params(self):
-        resp = self.client.post(reverse('sentry-new-team'))
+        resp = self.client.post(self.path)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/teams/new.html')
 
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
     def test_valid_params(self):
-        resp = self.client.post(reverse('sentry-new-team'), {
+        resp = self.client.post(self.path, {
             'name': 'Test Team',
             'slug': 'test',
         })
@@ -71,17 +90,14 @@ class NewTeamTest(BaseTeamTest):
     @mock.patch('sentry.web.frontend.teams.can_create_teams', mock.Mock(return_value=True))
     @mock.patch('django.contrib.auth.models.User.has_perm', mock.Mock(return_value=True))
     def test_superuser_can_set_owner(self):
-        resp = self.client.post(reverse('sentry-new-team'), {
+        resp = self.client.post(self.path, {
             'name': 'Test Team',
             'slug': 'test',
-            'owner': 'other',
+            'owner': self.user2.username,
         })
         self.assertNotEquals(resp.status_code, 200)
 
-        team = Team.objects.filter(name='Test Team')
-        self.assertTrue(team.exists())
-        team = team.get()
-
+        team = Team.objects.get(name='Test Team')
         self.assertEquals(team.owner, self.user2)
 
         member_set = list(team.member_set.all())
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 755d257984..543d8a42ec 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -10,7 +10,7 @@ from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
 from sentry.conf import settings
-from sentry.constants import MEMBER_OWNER, MEMBER_USER
+from sentry.constants import MEMBER_USER
 from sentry.models import Group, Project, TeamMember, Team
 from sentry.testutils import fixture
 from sentry.web.helpers import get_login_url
@@ -26,7 +26,7 @@ class SentryViewsTest(TestCase):
     @fixture
     def user(self):
         user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
-        user.set_password('admin')
+        user.set_password('password')
         user.save()
         return user
 
@@ -36,15 +36,15 @@ class SentryViewsTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/login.html')
 
         resp = self.client.post(reverse('sentry-login'), {
-            'username': 'admin',
-            'password': 'admin',
+            'username': self.user.username,
+            'password': 'password',
         }, follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateNotUsed(resp, 'sentry/login.html')
 
     def test_dashboard(self):
         # no projects redirects them to create new project
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/projects/new.html')
@@ -64,13 +64,13 @@ class SentryViewsTest(TestCase):
         self.assertTemplateUsed(resp, 'sentry/login.html')
 
     def test_index(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry', kwargs={'project_id': 1}) + '?sort=freq', follow=False)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/groups/group_list.html')
 
     def test_group_details(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group', kwargs={'project_id': 1, 'group_id': 2}), follow=False)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/details.html')
@@ -79,7 +79,7 @@ class SentryViewsTest(TestCase):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_event_list(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-events', kwargs={'project_id': 1, 'group_id': 2}), follow=False)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event_list.html')
@@ -88,7 +88,7 @@ class SentryViewsTest(TestCase):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_message_details(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-event', kwargs={'project_id': 1, 'group_id': 2, 'event_id': 4}), follow=True)
         self.assertEquals(resp.status_code, 200, resp.content)
         self.assertTemplateUsed(resp, 'sentry/groups/event.html')
@@ -97,7 +97,7 @@ class SentryViewsTest(TestCase):
         self.assertEquals(resp.context['group'], group)
 
     def test_group_json_multi(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-events-json', kwargs={'project_id': 1, 'group_id': 2}))
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/json')
@@ -108,51 +108,51 @@ class SentryViewsTest(TestCase):
         self.assertEquals(resp.status_code, 400)
 
     def test_group_events_details_json(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-group-event-json', kwargs={'project_id': 1, 'group_id': 2, 'event_id_or_latest': 'latest'}))
         self.assertEquals(resp.status_code, 200)
         self.assertEquals(resp['Content-Type'], 'application/json')
         self.assertEquals(json.loads(resp.content)['level'], 'error')
 
     def test_status_env(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-status'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/status/env.html')
 
     def test_status_packages(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-packages-status'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/status/packages.html')
 
     def test_status_queue(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-queue-status'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/status/queue.html')
 
     def test_stats(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-stats'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/stats.html')
 
     def test_manage_users(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-admin-users'), follow=True)
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/admin/users/list.html')
 
     def test_event_list(self):
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-events', kwargs={'project_id': 1}))
         self.assertEquals(resp.status_code, 200)
         self.assertTemplateUsed(resp, 'sentry/events/event_list.html')
 
     def test_replay_event(self):
         # bad event_id
-        self.client.login(username='admin', password='admin')
+        self.client.login(username=self.user.username, password='password')
         resp = self.client.get(reverse('sentry-replay', kwargs={'project_id': 1, 'event_id': 1}))
         self.assertEquals(resp.status_code, 302)
 
@@ -170,53 +170,49 @@ class PermissionBase(TestCase):
     fixtures = ['tests/fixtures/views.json']
 
     @fixture
-    def user(self):
+    def admin(self):
         user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
         user.set_password('admin')
         user.save()
         return user
 
     @fixture
-    def user2(self):
+    def member(self):
         user = User(username="member", email="member@localhost")
         user.set_password('member')
         user.save()
 
-        TeamMember.objects.get_or_create(
+        TeamMember.objects.create(
             user=user,
             team=self.team,
             type=MEMBER_USER,
-        )[0]
+        )
         return user
 
     @fixture
-    def user3(self):
+    def nobody(self):
         user = User(username="nobody", email="nobody@localhost")
         user.set_password('nobody')
         user.save()
         return user
 
     @fixture
-    def user4(self):
+    def owner(self):
         user = User(username="owner", email="owner@localhost")
         user.set_password('owner')
         user.save()
 
-        TeamMember.objects.get_or_create(
-            user=user,
-            team=self.team,
-            type=MEMBER_OWNER,
-        )[0]
+        Team.objects.create(owner=user, name='foo', slug='foo')
 
         return user
 
     @fixture
     def tm(self):
-        return TeamMember.objects.get(user=self.user2, team=self.team)
+        return TeamMember.objects.get(user=self.member, team=self.team)
 
     @fixture
     def team(self):
-        return Team.objects.create(owner=self.user4, name='foo', slug='foo')
+        return Team.objects.get(owner=self.owner, slug='foo')
 
     @fixture
     def project(self):
@@ -244,30 +240,36 @@ class PermissionBase(TestCase):
 
 
 class ProjectListTest(PermissionBase):
-    path = reverse('sentry-project-list')
     template = 'sentry/projects/list.html'
 
+    @fixture
+    def path(self):
+        return reverse('sentry-project-list')
+
     def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, 'admin')
+        self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_user_can_load(self):
-        self._assertPerm(self.path, self.template, 'nobody')
+        self._assertPerm(self.path, self.template, self.nobody.username)
 
     def test_anonymous_cannot_load(self):
         self._assertPerm(self.path, self.template, None, False)
 
 
 class NewProjectTest(PermissionBase):
-    path = reverse('sentry-new-project')
     template = 'sentry/projects/new.html'
 
+    @fixture
+    def path(self):
+        return reverse('sentry-new-project')
+
     def test_admin_can_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
-            self._assertPerm(self.path, self.template, 'admin')
+            self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_user_cannot_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
-            self._assertPerm(self.path, self.template, 'nobody', False)
+            self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_anonymous_cannot_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
@@ -275,11 +277,11 @@ class NewProjectTest(PermissionBase):
 
     def test_public_creation_admin_can_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
-            self._assertPerm(self.path, self.template, 'admin')
+            self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_public_creation_user_can_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
-            self._assertPerm(self.path, self.template, 'nobody')
+            self._assertPerm(self.path, self.template, self.nobody.username)
 
     def test_public_anonymous_cannot_load(self):
         with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
@@ -287,36 +289,42 @@ class NewProjectTest(PermissionBase):
 
 
 class ManageProjectTest(PermissionBase):
-    path = reverse('sentry-manage-project', kwargs={'project_id': 1})
     template = 'sentry/projects/manage.html'
 
+    @fixture
+    def path(self):
+        return reverse('sentry-manage-project', kwargs={'project_id': self.project.id})
+
     def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, 'admin')
+        self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, 'owner')
+        self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
         self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'nobody', False)
+        self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'member', False)
+        self._assertPerm(self.path, self.template, self.member.username, False)
 
 
 class RemoveProjectTest(PermissionBase):
-    path = reverse('sentry-remove-project', kwargs={'project_id': 1})
     template = 'sentry/projects/remove.html'
 
+    @fixture
+    def path(self):
+        return reverse('sentry-remove-project', kwargs={'project_id': self.project.id})
+
     def test_admin_cannot_remove_default(self):
         with self.Settings(SENTRY_PROJECT=1):
-            self._assertPerm(self.path, self.template, 'admin', False)
+            self._assertPerm(self.path, self.template, self.admin.username, False)
 
     def test_owner_cannot_remove_default(self):
         with self.Settings(SENTRY_PROJECT=1):
-            self._assertPerm(self.path, self.template, 'owner', False)
+            self._assertPerm(self.path, self.template, self.owner.username, False)
 
     def test_anonymous_cannot_remove_default(self):
         with self.Settings(SENTRY_PROJECT=1):
@@ -324,19 +332,19 @@ class RemoveProjectTest(PermissionBase):
 
     def test_user_cannot_remove_default(self):
         with self.Settings(SENTRY_PROJECT=1):
-            self._assertPerm(self.path, self.template, 'nobody', False)
+            self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_remove_default(self):
         with self.Settings(SENTRY_PROJECT=1):
-            self._assertPerm(self.path, self.template, 'member', False)
+            self._assertPerm(self.path, self.template, self.member.username, False)
 
     def test_admin_can_load(self):
         with self.Settings(SENTRY_PROJECT=2):
-            self._assertPerm(self.path, self.template, 'admin')
+            self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
         with self.Settings(SENTRY_PROJECT=2):
-            self._assertPerm(self.path, self.template, 'owner')
+            self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
         with self.Settings(SENTRY_PROJECT=2):
@@ -344,57 +352,57 @@ class RemoveProjectTest(PermissionBase):
 
     def test_user_cannot_load(self):
         with self.Settings(SENTRY_PROJECT=2):
-            self._assertPerm(self.path, self.template, 'nobody', False)
+            self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
         with self.Settings(SENTRY_PROJECT=2):
-            self._assertPerm(self.path, self.template, 'member', False)
+            self._assertPerm(self.path, self.template, self.member.username, False)
 
 
 class NewTeamMemberTest(PermissionBase):
     template = 'sentry/teams/members/new.html'
 
-    def setUp(self):
-        super(NewTeamMemberTest, self).setUp()
-        self.path = reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
+    @fixture
+    def path(self):
+        return reverse('sentry-new-team-member', kwargs={'team_slug': self.team.slug})
 
     def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, 'admin')
+        self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, 'owner')
+        self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
         self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'nobody', False)
+        self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'member', False)
+        self._assertPerm(self.path, self.template, self.member.username, False)
 
 
 class EditTeamMemberTest(PermissionBase):
     template = 'sentry/teams/members/edit.html'
 
-    def setUp(self):
-        super(EditTeamMemberTest, self).setUp()
-        self.path = reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
+    @fixture
+    def path(self):
+        return reverse('sentry-edit-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
 
     def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, 'admin')
+        self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, 'owner')
+        self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
         self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'nobody', False)
+        self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'member', False)
+        self._assertPerm(self.path, self.template, self.member.username, False)
 
 
 class RemoveTeamMemberTest(PermissionBase):
@@ -405,19 +413,19 @@ class RemoveTeamMemberTest(PermissionBase):
         return reverse('sentry-remove-team-member', kwargs={'team_slug': self.team.slug, 'member_id': self.tm.pk})
 
     def test_admin_can_load(self):
-        self._assertPerm(self.path, self.template, 'admin')
+        self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        self._assertPerm(self.path, self.template, 'owner')
+        self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
         self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'nobody', False)
+        self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        self._assertPerm(self.path, self.template, 'member', False)
+        self._assertPerm(self.path, self.template, self.member.username, False)
 
 
 class SentrySearchTest(TestCase):
