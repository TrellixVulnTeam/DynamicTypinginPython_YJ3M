commit 808153b7be02eca1e200af99fe9d8a7419b70c9e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Mar 13 14:40:11 2019 -0700

    ref(test): Remove sinon from js tests (#12383)
    
    Removes sinon + chai from our test dependencies, use jest instead

diff --git a/package.json b/package.json
index e8675bdaba..cfaa6d71eb 100644
--- a/package.json
+++ b/package.json
@@ -106,7 +106,6 @@
     "babel-gettext-extractor": "^3.0.0",
     "babel-jest": "24.1.0",
     "babel-plugin-dynamic-import-node": "^2.2.0",
-    "chai": "3.4.1",
     "enzyme": "3.5.0",
     "enzyme-adapter-react-16": "1.3.0",
     "enzyme-to-json": "3.3.1",
@@ -117,8 +116,6 @@
     "mockdate": "2.0.2",
     "prettier": "1.7.4",
     "react-test-renderer": "16.5.0",
-    "sinon": "1.17.2",
-    "sinon-chai": "2.8.0",
     "stylelint": "9.1.3",
     "stylelint-config-recommended": "^2.1.0",
     "stylelint-config-styled-components": "^0.1.1",
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 80675a8183..c62f528e78 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -1,7 +1,6 @@
 /* global __dirname */
 import {channel, createBroadcast} from 'emotion-theming';
 import jQuery from 'jquery';
-import sinon from 'sinon';
 import Adapter from 'enzyme-adapter-react-16';
 import Enzyme from 'enzyme';
 import MockDate from 'mockdate';
@@ -126,7 +125,6 @@ jest.unmock('jquery');
 window.tick = () => new Promise(resolve => setTimeout(resolve));
 
 window.$ = window.jQuery = jQuery;
-window.sinon = sinon;
 window.scrollTo = jest.fn();
 
 // this is very commonly used, so expose it globally
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index 5da27e890c..05ee02af6c 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -7,19 +7,12 @@ import {PROJECT_MOVED} from 'app/constants/apiErrorCodes';
 jest.unmock('app/api');
 
 describe('api', function() {
-  let sandbox;
   let api;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
     api = new Client();
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
-
   describe('paramsToQueryArgs()', function() {
     it('should convert itemIds properties to id array', function() {
       expect(
@@ -69,16 +62,16 @@ describe('api', function() {
 
   describe('Client', function() {
     beforeEach(function() {
-      sandbox.stub($, 'ajax');
+      jest.spyOn($, 'ajax');
     });
 
     describe('cancel()', function() {
       it('should abort any open XHR requests', function() {
         const req1 = new Request({
-          abort: sinon.stub(),
+          abort: jest.fn(),
         });
         const req2 = new Request({
-          abort: sinon.stub(),
+          abort: jest.fn(),
         });
 
         api.activeRequests = {
@@ -88,8 +81,8 @@ describe('api', function() {
 
         api.clear();
 
-        expect(req1.xhr.abort.calledOnce).toBeTruthy();
-        expect(req2.xhr.abort.calledOnce).toBeTruthy();
+        expect(req1.xhr.abort).toHaveBeenCalledTimes(1);
+        expect(req2.xhr.abort).toHaveBeenCalledTimes(1);
       });
     });
   });
@@ -112,7 +105,7 @@ describe('api', function() {
   });
 
   it('handles error callback', function() {
-    sandbox.stub(api, 'wrapCallback', (id, func) => func);
+    jest.spyOn(api, 'wrapCallback').mockImplementation((id, func) => func);
     const errorCb = jest.fn();
     const args = ['test', true, 1];
     api.handleRequestError(
@@ -125,7 +118,6 @@ describe('api', function() {
     );
 
     expect(errorCb).toHaveBeenCalledWith(...args);
-    api.wrapCallback.restore();
   });
 
   it('handles undefined error callback', function() {
@@ -144,8 +136,8 @@ describe('api', function() {
 
   describe('bulkUpdate()', function() {
     beforeEach(function() {
-      sandbox.stub(api, '_wrapRequest');
-      sandbox.stub(GroupActions, 'update'); // stub GroupActions.update call from api.update
+      jest.spyOn(api, '_wrapRequest');
+      jest.spyOn(GroupActions, 'update'); // stub GroupActions.update call from api.update
     });
 
     it('should use itemIds as query if provided', function() {
@@ -157,9 +149,12 @@ describe('api', function() {
         query: 'is:resolved',
       });
 
-      expect(api._wrapRequest.calledOnce).toBeTruthy();
-      const requestArgs = api._wrapRequest.getCall(0).args[1];
-      expect(requestArgs.query).toEqual({id: [1, 2, 3]});
+      expect(api._wrapRequest).toHaveBeenCalledTimes(1);
+      expect(api._wrapRequest).toHaveBeenCalledWith(
+        '/projects/1337/1337/issues/',
+        expect.objectContaining({query: {id: [1, 2, 3]}}),
+        undefined
+      );
     });
 
     it('should use query as query if itemIds are absent', function() {
@@ -171,9 +166,12 @@ describe('api', function() {
         query: 'is:resolved',
       });
 
-      expect(api._wrapRequest.calledOnce).toBeTruthy();
-      const requestArgs = api._wrapRequest.getCall(0).args[1];
-      expect(requestArgs.query).toEqual({query: 'is:resolved'});
+      expect(api._wrapRequest).toHaveBeenCalledTimes(1);
+      expect(api._wrapRequest).toHaveBeenCalledWith(
+        '/projects/1337/1337/issues/',
+        expect.objectContaining({query: {query: 'is:resolved'}}),
+        undefined
+      );
     });
   });
 
@@ -181,8 +179,8 @@ describe('api', function() {
     // TODO: this is totally copypasta from the test above. We need to refactor
     //       these API methods/tests.
     beforeEach(function() {
-      sandbox.stub(api, '_wrapRequest');
-      sandbox.stub(GroupActions, 'merge'); // stub GroupActions.merge call from api.merge
+      jest.spyOn(api, '_wrapRequest');
+      jest.spyOn(GroupActions, 'merge'); // stub GroupActions.merge call from api.merge
     });
 
     it('should use itemIds as query if provided', function() {
@@ -194,9 +192,12 @@ describe('api', function() {
         query: 'is:resolved',
       });
 
-      expect(api._wrapRequest.calledOnce).toBeTruthy();
-      const requestArgs = api._wrapRequest.getCall(0).args[1];
-      expect(requestArgs.query).toEqual({id: [1, 2, 3]});
+      expect(api._wrapRequest).toHaveBeenCalledTimes(1);
+      expect(api._wrapRequest).toHaveBeenCalledWith(
+        '/projects/1337/1337/issues/',
+        expect.objectContaining({query: {id: [1, 2, 3]}}),
+        undefined
+      );
     });
 
     it('should use query as query if itemIds are absent', function() {
@@ -208,9 +209,12 @@ describe('api', function() {
         query: 'is:resolved',
       });
 
-      expect(api._wrapRequest.calledOnce).toBeTruthy();
-      const requestArgs = api._wrapRequest.getCall(0).args[1];
-      expect(requestArgs.query).toEqual({query: 'is:resolved'});
+      expect(api._wrapRequest).toHaveBeenCalledTimes(1);
+      expect(api._wrapRequest).toHaveBeenCalledWith(
+        '/projects/1337/1337/issues/',
+        expect.objectContaining({query: {query: 'is:resolved'}}),
+        undefined
+      );
     });
   });
 });
diff --git a/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap b/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
index 9242ebbed5..f82520e95d 100644
--- a/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
+++ b/tests/js/spec/components/actions/__snapshots__/ignore.spec.jsx.snap
@@ -5,7 +5,7 @@ exports[`IgnoreActions with confirmation step renders 1`] = `
   confirmLabel="Ignore"
   confirmMessage="Yoooooo"
   isIgnored={false}
-  onUpdate={[Function]}
+  onUpdate={[MockFunction]}
   shouldConfirm={true}
 >
   <div
@@ -6023,7 +6023,7 @@ exports[`IgnoreActions without confirmation renders 1`] = `
 <IgnoreActions
   confirmLabel="Ignore"
   isIgnored={false}
-  onUpdate={[Function]}
+  onUpdate={[MockFunction]}
 >
   <div
     style={
diff --git a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
index bffba57bc9..52f8b230de 100644
--- a/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
+++ b/tests/js/spec/components/actions/__snapshots__/resolve.spec.jsx.snap
@@ -7,7 +7,7 @@ exports[`ResolveActions with confirmation step renders 1`] = `
   hasRelease={false}
   isAutoResolved={false}
   isResolved={false}
-  onUpdate={[Function]}
+  onUpdate={[MockFunction]}
   orgId="org-1"
   projectId="proj-1"
   shouldConfirm={true}
@@ -468,7 +468,7 @@ exports[`ResolveActions without confirmation renders 1`] = `
   hasRelease={false}
   isAutoResolved={false}
   isResolved={false}
-  onUpdate={[Function]}
+  onUpdate={[MockFunction]}
   orgId="org-1"
   projectId="proj-1"
 >
diff --git a/tests/js/spec/components/actions/ignore.spec.jsx b/tests/js/spec/components/actions/ignore.spec.jsx
index 51767324a4..64a751c27e 100644
--- a/tests/js/spec/components/actions/ignore.spec.jsx
+++ b/tests/js/spec/components/actions/ignore.spec.jsx
@@ -7,7 +7,7 @@ describe('IgnoreActions', function() {
   const routerContext = TestStubs.routerContext();
   describe('disabled', function() {
     let component, button;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} disabled={true} />, routerContext);
@@ -20,13 +20,13 @@ describe('IgnoreActions', function() {
 
     it('does not call onUpdate when clicked', function() {
       button.simulate('click');
-      expect(spy.notCalled).toBe(true);
+      expect(spy).not.toHaveBeenCalled();
     });
   });
 
   describe('ignored', function() {
     let component;
-    const spy = sinon.spy();
+    const spy = jest.fn();
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} isIgnored={true} />, routerContext);
     });
@@ -39,13 +39,13 @@ describe('IgnoreActions', function() {
 
     it('calls onUpdate with unresolved status when clicked', function() {
       component.find('a.btn.active').simulate('click');
-      expect(spy.calledWith({status: 'unresolved'})).toBeTruthy();
+      expect(spy).toHaveBeenCalledWith({status: 'unresolved'});
     });
   });
 
   describe('without confirmation', function() {
     let component;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(<IgnoreActions onUpdate={spy} />, routerContext);
@@ -58,14 +58,14 @@ describe('IgnoreActions', function() {
     it('calls spy with ignore details when clicked', function() {
       const button = component.find('a.btn.btn-default').first();
       button.simulate('click');
-      expect(spy.calledOnce).toBe(true);
-      expect(spy.calledWith({status: 'ignored'})).toBe(true);
+      expect(spy).toHaveBeenCalledTimes(1);
+      expect(spy).toHaveBeenCalledWith({status: 'ignored'});
     });
   });
 
   describe('with confirmation step', function() {
     let component, button;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(
@@ -84,12 +84,12 @@ describe('IgnoreActions', function() {
 
       const modal = $(document.body).find('.modal');
       expect(modal.text()).toContain('Yoooooo');
-      expect(spy.notCalled).toBe(true);
+      expect(spy).not.toHaveBeenCalled();
       $(document.body)
         .find('.modal button:contains("Ignore")')
         .click();
 
-      expect(spy.called).toBe(true);
+      expect(spy).toHaveBeenCalled();
     });
   });
 });
diff --git a/tests/js/spec/components/actions/resolve.spec.jsx b/tests/js/spec/components/actions/resolve.spec.jsx
index c3520d944b..75980887e6 100644
--- a/tests/js/spec/components/actions/resolve.spec.jsx
+++ b/tests/js/spec/components/actions/resolve.spec.jsx
@@ -6,7 +6,7 @@ import ResolveActions from 'app/components/actions/resolve';
 describe('ResolveActions', function() {
   describe('disabled', function() {
     let component, button;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(
@@ -28,13 +28,13 @@ describe('ResolveActions', function() {
 
     it('does not call onUpdate when clicked', function() {
       button.simulate('click');
-      expect(spy.notCalled).toBe(true);
+      expect(spy).not.toHaveBeenCalled();
     });
   });
 
   describe('disableDropdown', function() {
     let component, button;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(
@@ -57,7 +57,7 @@ describe('ResolveActions', function() {
     it('main button calls onUpdate when clicked', function() {
       button = component.find('ActionLink[title="Resolve"]');
       button.simulate('click');
-      expect(spy.called).toBe(true);
+      expect(spy).toHaveBeenCalled();
     });
 
     it('dropdown menu is disabled', function() {
@@ -68,7 +68,7 @@ describe('ResolveActions', function() {
 
   describe('resolved', function() {
     let component;
-    const spy = sinon.stub();
+    const spy = jest.fn();
     beforeEach(function() {
       component = mount(
         <ResolveActions
@@ -91,13 +91,13 @@ describe('ResolveActions', function() {
 
     it('calls onUpdate with unresolved status when clicked', function() {
       component.find('a.btn.active').simulate('click');
-      expect(spy.calledWith({status: 'unresolved'})).toBeTruthy();
+      expect(spy).toHaveBeenCalledWith({status: 'unresolved'});
     });
   });
 
   describe('auto resolved', function() {
     it('cannot be unresolved manually', function() {
-      const spy = sinon.stub();
+      const spy = jest.fn();
       const component = mount(
         <ResolveActions
           onUpdate={spy}
@@ -112,13 +112,13 @@ describe('ResolveActions', function() {
       );
 
       component.find('a.btn').simulate('click');
-      expect(spy.notCalled).toBe(true);
+      expect(spy).not.toHaveBeenCalled();
     });
   });
 
   describe('without confirmation', function() {
     let component;
-    const spy = sinon.stub();
+    const spy = jest.fn();
     beforeEach(function() {
       component = mount(
         <ResolveActions
@@ -138,14 +138,14 @@ describe('ResolveActions', function() {
     it('calls spy with resolved status when clicked', function() {
       const button = component.find('a.btn.btn-default').first();
       button.simulate('click');
-      expect(spy.calledOnce).toBe(true);
-      expect(spy.calledWith({status: 'resolved'})).toBe(true);
+      expect(spy).toHaveBeenCalledTimes(1);
+      expect(spy).toHaveBeenCalledWith({status: 'resolved'});
     });
   });
 
   describe('with confirmation step', function() {
     let component, button;
-    const spy = sinon.stub();
+    const spy = jest.fn();
 
     beforeEach(function() {
       component = mount(
@@ -171,12 +171,12 @@ describe('ResolveActions', function() {
 
       const modal = $(document.body).find('.modal');
       expect(modal.text()).toContain('Are you sure???');
-      expect(spy.notCalled).toBe(true);
+      expect(spy).not.toHaveBeenCalled();
       $(document.body)
         .find('.modal button:contains("Resolve")')
         .click();
 
-      expect(spy.called).toBe(true);
+      expect(spy).toHaveBeenCalled();
     });
   });
 
diff --git a/tests/js/spec/components/actorAvatar.spec.jsx b/tests/js/spec/components/actorAvatar.spec.jsx
index 9af681aa10..75cd74671f 100644
--- a/tests/js/spec/components/actorAvatar.spec.jsx
+++ b/tests/js/spec/components/actorAvatar.spec.jsx
@@ -5,8 +5,6 @@ import MemberListStore from 'app/stores/memberListStore';
 import TeamStore from 'app/stores/teamStore';
 
 describe('Avatar', function() {
-  let sandbox;
-
   const USER = {
     id: '1',
     name: 'Jane Doe',
@@ -23,14 +21,11 @@ describe('Avatar', function() {
     ],
   };
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
     MemberListStore.loadInitialData([USER]);
     TeamStore.loadInitialData([TEAM_1]);
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     it('should show a gravatar when actor type is a user', function() {
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index a9b9274bc2..0fbbf6fd6e 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -10,7 +10,6 @@ import ProjectsStore from 'app/stores/projectsStore';
 import TeamStore from 'app/stores/teamStore';
 
 describe('AssigneeSelector', function() {
-  let sandbox;
   let assigneeSelector;
   let assignMock;
   let openMenu;
@@ -20,8 +19,6 @@ describe('AssigneeSelector', function() {
   let GROUP_1;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
     USER_1 = TestStubs.User({
       id: '1',
       name: 'Jane Doe',
@@ -56,10 +53,10 @@ describe('AssigneeSelector', function() {
       },
     });
 
-    sandbox.stub(MemberListStore, 'getAll').returns(null);
-    sandbox.stub(TeamStore, 'getAll').returns([TEAM_1]);
-    sandbox.stub(ProjectsStore, 'getAll').returns([PROJECT_1]);
-    sandbox.stub(GroupStore, 'get').returns(GROUP_1);
+    jest.spyOn(MemberListStore, 'getAll').mockImplementation(() => null);
+    jest.spyOn(TeamStore, 'getAll').mockImplementation(() => [TEAM_1]);
+    jest.spyOn(ProjectsStore, 'getAll').mockImplementation(() => [PROJECT_1]);
+    jest.spyOn(GroupStore, 'get').mockImplementation(() => GROUP_1);
 
     assignMock = Client.addMockResponse({
       method: 'PUT',
@@ -82,7 +79,6 @@ describe('AssigneeSelector', function() {
   });
 
   afterEach(function() {
-    sandbox.restore();
     Client.clearMockResponses();
   });
 
@@ -111,28 +107,24 @@ describe('AssigneeSelector', function() {
   describe('putSessionUserFirst()', function() {
     const putSessionUserFirst = AssigneeSelectorComponent.putSessionUserFirst;
     it('should place the session user at the top of the member list if present', function() {
-      sandbox
-        .stub(ConfigStore, 'get')
-        .withArgs('user')
-        .returns({
-          id: '2',
-          name: 'John Smith',
-          email: 'johnsmith@example.com',
-        });
+      jest.spyOn(ConfigStore, 'get').mockImplementation(() => ({
+        id: '2',
+        name: 'John Smith',
+        email: 'johnsmith@example.com',
+      }));
       expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_2, USER_1]);
+      ConfigStore.get.mockRestore();
     });
 
     it("should return the same member list if the session user isn't present", function() {
-      sandbox
-        .stub(ConfigStore, 'get')
-        .withArgs('user')
-        .returns({
-          id: '555',
-          name: 'Here Comes a New Challenger',
-          email: 'guile@mail.us.af.mil',
-        });
+      jest.spyOn(ConfigStore, 'get').mockImplementation(() => ({
+        id: '555',
+        name: 'Here Comes a New Challenger',
+        email: 'guile@mail.us.af.mil',
+      }));
 
       expect(putSessionUserFirst([USER_1, USER_2])).toEqual([USER_1, USER_2]);
+      ConfigStore.get.mockRestore();
     });
   });
 
@@ -278,10 +270,7 @@ describe('AssigneeSelector', function() {
     ).toHaveLength(0);
 
     assigneeSelector.unmount();
-    sandbox
-      .stub(ConfigStore, 'get')
-      .withArgs('invitesEnabled')
-      .returns(true);
+    jest.spyOn(ConfigStore, 'get').mockImplementation(() => true);
     assigneeSelector = mount(
       <AssigneeSelectorComponent id={GROUP_1.id} />,
       routerContext
@@ -292,14 +281,12 @@ describe('AssigneeSelector', function() {
     expect(
       assigneeSelector.find('InviteMemberLink[data-test-id="invite-member"]')
     ).toHaveLength(1);
+    ConfigStore.get.mockRestore();
   });
 
   it('requires org:write to invite member', async function() {
     MemberListStore.loadInitialData([USER_1, USER_2]);
-    sandbox
-      .stub(ConfigStore, 'get')
-      .withArgs('invitesEnabled')
-      .returns(true);
+    jest.spyOn(ConfigStore, 'get').mockImplementation(() => true);
 
     // Remove org:write access permission and make sure invite member button is not shown.
     assigneeSelector.unmount();
@@ -312,6 +299,7 @@ describe('AssigneeSelector', function() {
     expect(
       assigneeSelector.find('InviteMemberLink[data-test-id="invite-member"]')
     ).toHaveLength(0);
+    ConfigStore.get.mockRestore();
   });
 
   it('filters user by email and selects with keyboard', async function() {
diff --git a/tests/js/spec/components/assistant/guideAnchor.spec.jsx b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
index aeeb9579b1..8bec9222fb 100644
--- a/tests/js/spec/components/assistant/guideAnchor.spec.jsx
+++ b/tests/js/spec/components/assistant/guideAnchor.spec.jsx
@@ -3,7 +3,6 @@ import {shallow} from 'enzyme';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
 
 describe('GuideAnchor', function() {
-  let sandbox;
   const data = {
     currentGuide: {steps: [{message: 'abc', target: 'target 1', title: 'title 1'}]},
     currentStep: 1,
@@ -12,13 +11,9 @@ describe('GuideAnchor', function() {
     guidesSeen: new Set(),
   };
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
+  beforeEach(function() {});
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const component = shallow(<GuideAnchor target="target 1" type="text" />);
diff --git a/tests/js/spec/components/dynamicWrapper.spec.jsx b/tests/js/spec/components/dynamicWrapper.spec.jsx
index 6744899a2d..aea1c7e236 100644
--- a/tests/js/spec/components/dynamicWrapper.spec.jsx
+++ b/tests/js/spec/components/dynamicWrapper.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import DynamicWrapper from 'app/components/dynamicWrapper';
 
 describe('DynamicWrapper', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders actual value', function() {
     const wrapper = shallow(<DynamicWrapper fixed="Test" value="Dynamic Content" />);
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index ebcd362c32..eb652c335b 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -4,7 +4,6 @@ import {mount, shallow} from 'enzyme';
 import RichHttpContent from 'app/components/events/interfaces/richHttpContent';
 
 describe('RichHttpContent', function() {
-  let sandbox;
   let data;
   let elem;
 
@@ -17,12 +16,9 @@ describe('RichHttpContent', function() {
       env: {},
     };
     elem = shallow(<RichHttpContent data={data} />).instance();
-    sandbox = sinon.sandbox.create();
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('getBodySection', function() {
     it('should return plain-text when given unrecognized inferred Content-Type', function() {
diff --git a/tests/js/spec/components/eventsTable/eventsTable.spec.jsx b/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
index bfdc30951c..ff5cfadddc 100644
--- a/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
+++ b/tests/js/spec/components/eventsTable/eventsTable.spec.jsx
@@ -5,15 +5,9 @@ import EventsTable from 'app/components/eventsTable/eventsTable';
 import events from '../../../mocks/events';
 
 describe('EventsTable', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(
diff --git a/tests/js/spec/components/issues/snoozeAction.spec.jsx b/tests/js/spec/components/issues/snoozeAction.spec.jsx
index 2f3350d615..88af98686d 100644
--- a/tests/js/spec/components/issues/snoozeAction.spec.jsx
+++ b/tests/js/spec/components/issues/snoozeAction.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import SnoozeAction from 'app/components/issues/snoozeAction';
 
 describe('SnoozeAction', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     it('should show a gravatar when avatar type is gravatar', function() {
diff --git a/tests/js/spec/components/modals/diffModal.spec.jsx b/tests/js/spec/components/modals/diffModal.spec.jsx
index f596d168dc..dbb38a6505 100644
--- a/tests/js/spec/components/modals/diffModal.spec.jsx
+++ b/tests/js/spec/components/modals/diffModal.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import DiffModal from 'app/components/modals/diffModal';
 
 describe('DiffModal', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(<DiffModal Body={({children}) => <div>{children}</div>} />);
diff --git a/tests/js/spec/components/modals/redirectToProject.spec.jsx b/tests/js/spec/components/modals/redirectToProject.spec.jsx
index 1d495b1770..a6f1520ae0 100644
--- a/tests/js/spec/components/modals/redirectToProject.spec.jsx
+++ b/tests/js/spec/components/modals/redirectToProject.spec.jsx
@@ -14,11 +14,11 @@ describe('RedirectToProjectModal', function() {
   ];
 
   beforeEach(function() {
-    sinon.stub(window.location, 'assign');
+    jest.spyOn(window.location, 'assign').mockImplementation(() => {});
   });
 
   afterEach(function() {
-    window.location.assign.restore();
+    window.location.assign.mockRestore();
   });
 
   it('has timer to redirect to new slug after mounting', function() {
@@ -34,10 +34,10 @@ describe('RedirectToProjectModal', function() {
     );
 
     jest.advanceTimersByTime(4900);
-    expect(window.location.assign.calledOnce).toBe(false);
+    expect(window.location.assign).not.toHaveBeenCalled();
 
     jest.advanceTimersByTime(200);
-    expect(window.location.assign.calledOnce).toBe(true);
-    expect(window.location.assign.calledWith('/org-slug/new-slug/')).toBe(true);
+    expect(window.location.assign).toHaveBeenCalledTimes(1);
+    expect(window.location.assign).toHaveBeenCalledWith('/org-slug/new-slug/');
   });
 });
diff --git a/tests/js/spec/components/scoreBar.spec.jsx b/tests/js/spec/components/scoreBar.spec.jsx
index cb02df8136..38080d387f 100644
--- a/tests/js/spec/components/scoreBar.spec.jsx
+++ b/tests/js/spec/components/scoreBar.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import ScoreBar from 'app/components/scoreBar';
 
 describe('ScoreBar', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(<ScoreBar size={60} thickness={2} score={3} />);
diff --git a/tests/js/spec/components/search/sources/formSource.spec.jsx b/tests/js/spec/components/search/sources/formSource.spec.jsx
index 7c8d269321..6e6cb29331 100644
--- a/tests/js/spec/components/search/sources/formSource.spec.jsx
+++ b/tests/js/spec/components/search/sources/formSource.spec.jsx
@@ -29,15 +29,15 @@ describe('FormSource', function() {
       },
     },
   ];
-  let loadStub;
 
   beforeEach(function() {
-    loadStub = sinon.stub(ActionCreators, 'loadSearchMap');
+    jest.spyOn(ActionCreators, 'loadSearchMap').mockImplementation(() => {});
+
     FormSearchActions.loadSearchMap(searchMap);
   });
 
   afterEach(function() {
-    loadStub.restore();
+    ActionCreators.loadSearchMap.mockRestore();
   });
 
   it('can find a form field', async function() {
@@ -47,20 +47,27 @@ describe('FormSource', function() {
     await tick();
     await tick();
     wrapper.update();
-    const calls = mock.mock.calls;
-    expect(calls[calls.length - 1][0].results[0].item).toEqual({
-      field: {
-        label: 'Test Field',
-        name: 'test-field',
-        help: 'test-help',
-      },
-      title: 'Test Field',
-      description: 'test-help',
-      route: '/route/',
-      resultType: 'field',
-      sourceType: 'field',
-      to: '/route/#test-field',
-    });
+    expect(mock).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        results: [
+          expect.objectContaining({
+            item: {
+              field: {
+                label: 'Test Field',
+                name: 'test-field',
+                help: 'test-help',
+              },
+              title: 'Test Field',
+              description: 'test-help',
+              route: '/route/',
+              resultType: 'field',
+              sourceType: 'field',
+              to: '/route/#test-field',
+            },
+          }),
+        ],
+      })
+    );
   });
 
   it('does not find any form field ', async function() {
diff --git a/tests/js/spec/components/similarScoreCard.spec.jsx b/tests/js/spec/components/similarScoreCard.spec.jsx
index 54cdfd1e2d..670ac58d3c 100644
--- a/tests/js/spec/components/similarScoreCard.spec.jsx
+++ b/tests/js/spec/components/similarScoreCard.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import SimilarScoreCard from 'app/components/similarScoreCard';
 
 describe('SimilarScoreCard', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(<SimilarScoreCard />);
diff --git a/tests/js/spec/components/similarSpectrum.spec.jsx b/tests/js/spec/components/similarSpectrum.spec.jsx
index a5fae928d3..7564435ade 100644
--- a/tests/js/spec/components/similarSpectrum.spec.jsx
+++ b/tests/js/spec/components/similarSpectrum.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import SimilarSpectrum from 'app/components/similarSpectrum';
 
 describe('SimilarSpectrum', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(<SimilarSpectrum />);
diff --git a/tests/js/spec/components/smartSearchBar.spec.jsx b/tests/js/spec/components/smartSearchBar.spec.jsx
index bced4dbd34..245a598ba9 100644
--- a/tests/js/spec/components/smartSearchBar.spec.jsx
+++ b/tests/js/spec/components/smartSearchBar.spec.jsx
@@ -33,7 +33,6 @@ describe('removeSpace()', function() {
 });
 
 describe('SmartSearchBar', function() {
-  let sandbox;
   let options;
   let environmentTagValuesMock;
   let supportedTags;
@@ -45,8 +44,6 @@ describe('SmartSearchBar', function() {
     tagValuesMock.mockClear();
     supportedTags = {};
 
-    sandbox = sinon.sandbox.create();
-
     options = {
       context: {organization: {id: '123'}},
     };
@@ -59,7 +56,6 @@ describe('SmartSearchBar', function() {
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
-    sandbox.restore();
   });
 
   describe('componentWillReceiveProps()', function() {
@@ -162,12 +158,12 @@ describe('SmartSearchBar', function() {
         query: 'is:unresolved ruby',
         defaultQuery: 'is:unresolved',
         supportedTags,
-        onSearch: sandbox.spy(),
+        onSearch: jest.fn(),
       };
       const searchBar = shallow(<SmartSearchBar {...props} />, options).instance();
 
       await searchBar.clearSearch();
-      expect(props.onSearch.calledWith('')).toBe(true);
+      expect(props.onSearch).toHaveBeenCalledWith('');
     });
   });
 
@@ -198,9 +194,9 @@ describe('SmartSearchBar', function() {
       ).instance();
       searchBar.state.dropdownVisible = true;
 
-      const clock = sandbox.useFakeTimers();
+      jest.useFakeTimers();
       searchBar.onQueryBlur();
-      clock.tick(201); // doesn't close until 200ms
+      jest.advanceTimersByTime(201); // doesn't close until 200ms
 
       expect(searchBar.state.dropdownVisible).toBe(false);
     });
@@ -216,18 +212,18 @@ describe('SmartSearchBar', function() {
         wrapper.setState({dropdownVisible: true});
 
         const instance = wrapper.instance();
-        sandbox.stub(instance, 'blur');
+        jest.spyOn(instance, 'blur');
 
         wrapper.find('input').simulate('keyup', {key: 'Escape', keyCode: '27'});
 
-        expect(instance.blur.calledOnce).toBeTruthy();
+        expect(instance.blur).toHaveBeenCalledTimes(1);
       });
     });
   });
 
   describe('render()', function() {
     it('invokes onSearch() when submitting the form', function() {
-      const stubbedOnSearch = sandbox.spy();
+      const stubbedOnSearch = jest.fn();
       const wrapper = mount(
         <SmartSearchBar
           onSearch={stubbedOnSearch}
@@ -243,25 +239,24 @@ describe('SmartSearchBar', function() {
         preventDefault() {},
       });
 
-      expect(stubbedOnSearch.calledWith('is:unresolved')).toBe(true);
+      expect(stubbedOnSearch).toHaveBeenCalledWith('is:unresolved');
     });
 
-    it('invokes onSearch() when search is cleared', function(done) {
+    it('invokes onSearch() when search is cleared', async function() {
+      jest.useRealTimers();
       const props = {
         orgId: '123',
         projectId: '456',
         query: 'is:unresolved',
         supportedTags,
-        onSearch: sandbox.spy(),
+        onSearch: jest.fn(),
       };
       const wrapper = mount(<SmartSearchBar {...props} />, options);
 
       wrapper.find('.search-clear-form').simulate('click');
 
-      setTimeout(function() {
-        expect(props.onSearch.calledWith('')).toBe(true);
-        done();
-      });
+      await tick();
+      expect(props.onSearch).toHaveBeenCalledWith('');
     });
   });
 
@@ -278,13 +273,8 @@ describe('SmartSearchBar', function() {
   });
 
   describe('updateAutoCompleteItems()', function() {
-    let clock;
-
     beforeEach(function() {
-      clock = sandbox.useFakeTimers();
-    });
-    afterEach(function() {
-      clock.restore();
+      jest.useFakeTimers();
     });
     it('sets state when empty', function() {
       const props = {
@@ -354,7 +344,7 @@ describe('SmartSearchBar', function() {
       };
       const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
-      clock.tick(301);
+      jest.advanceTimersByTime(301);
       expect(environmentTagValuesMock).not.toHaveBeenCalled();
     });
 
@@ -372,7 +362,7 @@ describe('SmartSearchBar', function() {
       };
       const searchBar = mount(<SmartSearchBar {...props} />, options).instance();
       searchBar.updateAutoCompleteItems();
-      clock.tick(301);
+      jest.advanceTimersByTime(301);
       expect(mock).not.toHaveBeenCalled();
     });
   });
diff --git a/tests/js/spec/components/splitDiff.spec.jsx b/tests/js/spec/components/splitDiff.spec.jsx
index 1e3ca42628..2cf4395beb 100644
--- a/tests/js/spec/components/splitDiff.spec.jsx
+++ b/tests/js/spec/components/splitDiff.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import SplitDiff from 'app/components/splitDiff';
 
 describe('SplitDiff', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(<SplitDiff base="restaurant" target="aura" />);
diff --git a/tests/js/spec/components/streamGroup.spec.jsx b/tests/js/spec/components/streamGroup.spec.jsx
index 8fc08a6b7c..a29d36a5bc 100644
--- a/tests/js/spec/components/streamGroup.spec.jsx
+++ b/tests/js/spec/components/streamGroup.spec.jsx
@@ -7,11 +7,9 @@ import StreamGroup from 'app/components/stream/group';
 // jest.mock('app/mixins/projectState');
 
 describe('StreamGroup', function() {
-  let sandbox;
   let GROUP_1;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
     GROUP_1 = TestStubs.Group({
       id: '1337',
       project: {
@@ -20,12 +18,10 @@ describe('StreamGroup', function() {
       },
       type: 'error',
     });
-    sandbox.stub(GroupStore, 'get').returns(GROUP_1);
+    jest.spyOn(GroupStore, 'get').mockImplementation(() => GROUP_1);
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders with anchors', function() {
     const component = shallow(
diff --git a/tests/js/spec/components/toolbar.spec.jsx b/tests/js/spec/components/toolbar.spec.jsx
index 0dfda08012..f96b2a2574 100644
--- a/tests/js/spec/components/toolbar.spec.jsx
+++ b/tests/js/spec/components/toolbar.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import Toolbar from 'app/components/toolbar';
 
 describe('Toolbar', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(
diff --git a/tests/js/spec/components/toolbarHeader.spec.jsx b/tests/js/spec/components/toolbarHeader.spec.jsx
index 82afe042b0..18ef768c8e 100644
--- a/tests/js/spec/components/toolbarHeader.spec.jsx
+++ b/tests/js/spec/components/toolbarHeader.spec.jsx
@@ -3,15 +3,9 @@ import {shallow} from 'enzyme';
 import ToolbarHeader from 'app/components/toolbarHeader';
 
 describe('ToolbarHeader', function() {
-  let sandbox;
+  beforeEach(function() {});
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', function() {
     const wrapper = shallow(
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index dbd5b52c70..fb03b55247 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -1,15 +1,8 @@
 import GroupStore from 'app/stores/groupStore';
 
 describe('GroupStore', function() {
-  let sandbox;
-
   beforeEach(function() {
     GroupStore.reset();
-    sandbox = sinon.sandbox.create();
-  });
-
-  afterEach(function() {
-    sandbox.restore();
   });
 
   describe('add()', function() {
@@ -47,48 +40,50 @@ describe('GroupStore', function() {
   });
 
   describe('update methods', function() {
+    beforeAll(function() {
+      jest.spyOn(GroupStore, 'trigger');
+    });
+    beforeEach(function() {
+      GroupStore.trigger.mockReset();
+    });
+
     beforeEach(function() {
-      GroupStore.reset();
       GroupStore.items = [{id: 1}, {id: 2}, {id: 3}];
     });
 
     describe('onUpdate()', function() {
       it("should treat undefined itemIds argument as 'all'", function() {
-        sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdate(1337, undefined, 'somedata');
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy();
-        expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
+        expect(GroupStore.trigger).toHaveBeenCalledTimes(1);
+        expect(GroupStore.trigger).toHaveBeenCalledWith(new Set([1, 2, 3]));
       });
     });
 
     describe('onUpdateSuccess()', function() {
       it("should treat undefined itemIds argument as 'all'", function() {
-        sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateSuccess(1337, undefined, 'somedata');
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy();
-        expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
+        expect(GroupStore.trigger).toHaveBeenCalledTimes(1);
+        expect(GroupStore.trigger).toHaveBeenCalledWith(new Set([1, 2, 3]));
       });
     });
 
     describe('onUpdateError()', function() {
       it("should treat undefined itemIds argument as 'all'", function() {
-        sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateError(1337, undefined, 'something failed', false);
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy();
-        expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
+        expect(GroupStore.trigger).toHaveBeenCalledTimes(1);
+        expect(GroupStore.trigger).toHaveBeenCalledWith(new Set([1, 2, 3]));
       });
     });
 
     describe('onDeleteSuccess()', function() {
       it("should treat undefined itemIds argument as 'all'", function() {
-        sandbox.stub(GroupStore, 'trigger');
         GroupStore.onDeleteSuccess(1337, undefined, 'somedata');
 
-        expect(GroupStore.trigger.calledOnce).toBeTruthy();
-        expect(GroupStore.trigger.firstCall.args[0]).toEqual(new Set([1, 2, 3]));
+        expect(GroupStore.trigger).toHaveBeenCalledTimes(1);
+        expect(GroupStore.trigger).toHaveBeenCalledWith(new Set([1, 2, 3]));
       });
     });
   });
diff --git a/tests/js/spec/stores/guideStore.spec.jsx b/tests/js/spec/stores/guideStore.spec.jsx
index 1aca60da96..4efe9de75b 100644
--- a/tests/js/spec/stores/guideStore.spec.jsx
+++ b/tests/js/spec/stores/guideStore.spec.jsx
@@ -4,7 +4,6 @@ import GuideAnchor from 'app/components/assistant/guideAnchor';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GuideStore', function() {
-  let sandbox;
   const anchor1 = <GuideAnchor target="target 1" type="text" />;
   const anchor2 = <GuideAnchor target="target 2" type="text" />;
   let data;
@@ -16,7 +15,6 @@ describe('GuideStore', function() {
       },
     };
     GuideStore.init();
-    sandbox = sinon.sandbox.create();
     data = {
       Guide1: {
         cue: 'Click here for a tour of the issue page',
@@ -59,9 +57,7 @@ describe('GuideStore', function() {
     });
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('should move through the steps in the guide', async function() {
     GuideStore.onFetchSucceeded(data);
diff --git a/tests/js/spec/stores/pluginsStore.spec.jsx b/tests/js/spec/stores/pluginsStore.spec.jsx
index 996e8391e4..32c301446f 100644
--- a/tests/js/spec/stores/pluginsStore.spec.jsx
+++ b/tests/js/spec/stores/pluginsStore.spec.jsx
@@ -2,16 +2,14 @@ import PluginsStore from 'app/stores/pluginsStore';
 import PluginActions from 'app/actions/pluginActions';
 
 describe('PluginsStore', function() {
-  let sandbox;
-
+  beforeAll(function() {
+    jest.spyOn(PluginsStore, 'trigger');
+  });
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    sandbox.stub(PluginsStore, 'trigger');
+    PluginsStore.trigger.mockReset();
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('has correct initial state', function() {
     PluginsStore.reset();
@@ -30,82 +28,68 @@ describe('PluginsStore', function() {
 
     it('has correct state when all plugins fetched successfully', function() {
       PluginActions.fetchAll.trigger();
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: true,
-          error: null,
-          pageLinks: null,
-          plugins: [],
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: true,
+        error: null,
+        pageLinks: null,
+        plugins: [],
+      });
 
       PluginActions.fetchAllSuccess.trigger(TestStubs.Plugins(), {pageLinks: null});
 
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: false,
-          error: null,
-          pageLinks: null,
-          plugins: TestStubs.Plugins(),
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: false,
+        error: null,
+        pageLinks: null,
+        plugins: TestStubs.Plugins(),
+      });
     });
 
     it('has correct state when error in fetching all plugins', function() {
       PluginActions.fetchAll.trigger();
 
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: true,
-          error: null,
-          pageLinks: null,
-          plugins: [],
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: true,
+        error: null,
+        pageLinks: null,
+        plugins: [],
+      });
 
       PluginActions.fetchAllError.trigger({responseJSON: {message: 'Error'}});
 
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: false,
-          error: {responseJSON: {message: 'Error'}},
-          pageLinks: null,
-          plugins: [],
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: false,
+        error: {responseJSON: {message: 'Error'}},
+        pageLinks: null,
+        plugins: [],
+      });
     });
 
     it('does not reset loading state on consecutive fetches', function() {
       PluginActions.fetchAll.trigger();
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: true,
-          error: null,
-          pageLinks: null,
-          plugins: [],
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: true,
+        error: null,
+        pageLinks: null,
+        plugins: [],
+      });
 
       PluginActions.fetchAllSuccess.trigger(TestStubs.Plugins(), {pageLinks: null});
 
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: false,
-          error: null,
-          pageLinks: null,
-          plugins: TestStubs.Plugins(),
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: false,
+        error: null,
+        pageLinks: null,
+        plugins: TestStubs.Plugins(),
+      });
 
       PluginActions.fetchAll.trigger();
-      expect(
-        PluginsStore.trigger.calledWith({
-          loading: false,
-          error: null,
-          pageLinks: null,
-          plugins: TestStubs.Plugins(),
-        })
-      ).toBe(true);
+      expect(PluginsStore.trigger).toHaveBeenCalledWith({
+        loading: false,
+        error: null,
+        pageLinks: null,
+        plugins: TestStubs.Plugins(),
+      });
     });
   });
 
diff --git a/tests/js/spec/stores/selectedGroupStore.spec.js b/tests/js/spec/stores/selectedGroupStore.spec.jsx
similarity index 89%
rename from tests/js/spec/stores/selectedGroupStore.spec.js
rename to tests/js/spec/stores/selectedGroupStore.spec.jsx
index aaa6494e0f..9c90da2b1d 100644
--- a/tests/js/spec/stores/selectedGroupStore.spec.js
+++ b/tests/js/spec/stores/selectedGroupStore.spec.jsx
@@ -2,30 +2,28 @@ import GroupStore from 'app/stores/groupStore';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
 describe('SelectedGroupStore', function() {
-  let sandbox;
   let trigger;
 
   beforeEach(function() {
     SelectedGroupStore.records = {};
 
-    sandbox = sinon.sandbox.create();
-    trigger = sandbox.spy(SelectedGroupStore, 'trigger');
+    trigger = jest.spyOn(SelectedGroupStore, 'trigger').mockImplementation(() => {});
   });
 
   afterEach(function() {
-    sandbox.restore();
+    SelectedGroupStore.trigger.mockRestore();
   });
 
   describe('prune()', function() {
     it('removes records no longer in the GroupStore', function() {
-      sandbox.stub(GroupStore, 'getAllItemIds', () => ['3']);
+      jest.spyOn(GroupStore, 'getAllItemIds').mockImplementation(() => ['3']);
       SelectedGroupStore.records = {1: true, 2: true, 3: true};
       SelectedGroupStore.prune();
       expect(SelectedGroupStore.records).toEqual({3: true});
     });
 
     it("doesn't have any effect when already in sync", function() {
-      sandbox.stub(GroupStore, 'getAllItemIds', () => ['1', '2', '3']);
+      jest.spyOn(GroupStore, 'getAllItemIds').mockImplementation(() => ['1', '2', '3']);
       SelectedGroupStore.records = {1: true, 2: true, 3: true};
       SelectedGroupStore.prune();
       expect(SelectedGroupStore.records).toEqual({1: true, 2: true, 3: true});
@@ -51,23 +49,25 @@ describe('SelectedGroupStore', function() {
     let add;
 
     beforeEach(function() {
-      prune = sandbox.stub(SelectedGroupStore, 'prune');
-      add = sandbox.stub(SelectedGroupStore, 'add');
+      prune = jest.spyOn(SelectedGroupStore, 'prune');
+      add = jest.spyOn(SelectedGroupStore, 'add');
     });
 
+    afterEach(function() {});
+
     it('adds new ids', function() {
       SelectedGroupStore.onGroupChange([]);
-      expect(add.called).toBe(true);
+      expect(add).toHaveBeenCalled();
     });
 
     it('prunes stale records', function() {
       SelectedGroupStore.onGroupChange([]);
-      expect(prune.called).toBe(true);
+      expect(prune).toHaveBeenCalled();
     });
 
     it('triggers an update', function() {
       SelectedGroupStore.onGroupChange([]);
-      expect(trigger.called).toBe(true);
+      expect(trigger).toHaveBeenCalled();
     });
   });
 
@@ -163,7 +163,7 @@ describe('SelectedGroupStore', function() {
 
     it('triggers an update', function() {
       SelectedGroupStore.deselectAll();
-      expect(trigger.called).toBe(true);
+      expect(trigger).toHaveBeenCalled();
     });
   });
 
@@ -184,12 +184,12 @@ describe('SelectedGroupStore', function() {
     it('triggers an update given pre-existing id', function() {
       SelectedGroupStore.records = {1: true};
       SelectedGroupStore.toggleSelect(1);
-      expect(trigger.called).toBe(true);
+      expect(trigger).toHaveBeenCalled();
     });
 
     it('does not trigger an update given unknown id', function() {
       SelectedGroupStore.toggleSelect();
-      expect(trigger.called).toBe(false);
+      expect(trigger).not.toHaveBeenCalled();
     });
   });
 
@@ -208,7 +208,7 @@ describe('SelectedGroupStore', function() {
 
     it('triggers an update', function() {
       SelectedGroupStore.toggleSelectAll();
-      expect(trigger.called).toBe(true);
+      expect(trigger).toHaveBeenCalled();
     });
   });
 });
diff --git a/tests/js/spec/stores/tagStore.spec.jsx b/tests/js/spec/stores/tagStore.spec.jsx
index 0f843185e3..1c4d3a8375 100644
--- a/tests/js/spec/stores/tagStore.spec.jsx
+++ b/tests/js/spec/stores/tagStore.spec.jsx
@@ -2,20 +2,15 @@ import TagStore from 'app/stores/tagStore';
 import MemberListStore from 'app/stores/memberListStore';
 
 describe('TagStore', function() {
-  let sandbox;
-
   beforeEach(() => {
     TagStore.reset();
-    sandbox = sinon.sandbox.create();
   });
 
-  afterEach(() => {
-    sandbox.restore();
-  });
+  afterEach(() => {});
 
   describe('onMemberListStoreChange()', () => {
     it('should map each user\'s username to the "assigned" value array', () => {
-      sandbox.stub(MemberListStore, 'getAll').returns([
+      jest.spyOn(MemberListStore, 'getAll').mockImplementation(() => [
         {
           username: 'janesmith',
           email: 'janesmith@example.org',
@@ -26,7 +21,7 @@ describe('TagStore', function() {
     });
 
     it("should fall back to email when username isn't available", () => {
-      sandbox.stub(MemberListStore, 'getAll').returns([
+      jest.spyOn(MemberListStore, 'getAll').mockImplementation(() => [
         {
           email: 'janesmith@example.org',
         },
@@ -36,7 +31,7 @@ describe('TagStore', function() {
     });
 
     it('should fall back to email when the username is a UUID', () => {
-      sandbox.stub(MemberListStore, 'getAll').returns([
+      jest.spyOn(MemberListStore, 'getAll').mockImplementation(() => [
         {
           username: '8f5c6478172d4389930c12841f45dc18',
           email: 'janesmith@example.org',
@@ -49,7 +44,7 @@ describe('TagStore', function() {
 
   describe('onLoadTagsSuccess()', () => {
     it('should add a new tag with empty values and trigger the new addition', () => {
-      sandbox.stub(TagStore, 'trigger');
+      jest.spyOn(TagStore, 'trigger');
 
       TagStore.onLoadTagsSuccess([
         {
@@ -64,7 +59,7 @@ describe('TagStore', function() {
         values: [],
       });
 
-      expect(TagStore.trigger.calledOnce).toBeTruthy();
+      expect(TagStore.trigger).toHaveBeenCalledTimes(1);
     });
 
     it('should not overwrite predefined filters', () => {
diff --git a/tests/js/spec/utils/streamManager.spec.js b/tests/js/spec/utils/streamManager.spec.jsx
similarity index 76%
rename from tests/js/spec/utils/streamManager.spec.js
rename to tests/js/spec/utils/streamManager.spec.jsx
index e82c0ca483..edf84702d6 100644
--- a/tests/js/spec/utils/streamManager.spec.js
+++ b/tests/js/spec/utils/streamManager.spec.jsx
@@ -28,34 +28,34 @@ describe('StreamManager', function() {
     });
 
     it('adds items', function() {
-      const storeAdd = sinon.spy(store, 'add');
+      const storeAdd = jest.spyOn(store, 'add');
       const mgr = new StreamManager(store);
       const items = [{id: 1}];
       mgr.push(items);
 
       expect(mgr.idList).toHaveLength(1);
-      expect(storeAdd.calledWith(items)).toBe(true);
+      expect(storeAdd).toHaveBeenCalledWith(items);
     });
 
     it('allows adding a single item', function() {
-      const storeAdd = sinon.spy(store, 'add');
+      const storeAdd = jest.spyOn(store, 'add');
       const mgr = new StreamManager(store);
       const item = {id: 1};
       mgr.push(item);
 
       expect(mgr.idList).toHaveLength(1);
-      expect(storeAdd.calledWith([item])).toBe(true);
+      expect(storeAdd).toHaveBeenCalledWith([item]);
     });
 
     it('trims after adding', function() {
       const mgr = new StreamManager(store, {limit: 1});
-      const storeRemove = sinon.spy(store, 'remove');
-      const mgrTrim = sinon.spy(mgr, 'trim');
+      const storeRemove = jest.spyOn(store, 'remove');
+      const mgrTrim = jest.spyOn(mgr, 'trim');
       mgr.push([{id: 1}, {id: 2}]);
 
       expect(mgr.idList).toHaveLength(1);
-      expect(storeRemove.calledWith(2)).toBe(true);
-      expect(mgrTrim.called).toBe(true);
+      expect(storeRemove).toHaveBeenCalledWith(2, expect.anything(), expect.anything());
+      expect(mgrTrim).toHaveBeenCalled();
     });
 
     it('preserves NEW order of duplicates', function() {
@@ -69,48 +69,46 @@ describe('StreamManager', function() {
 
   describe('trim()', function() {
     it('removes trailing items in excess of the limit', function() {
-      const storeRemove = sinon.spy(store, 'remove');
+      const storeRemove = jest.spyOn(store, 'remove');
       const mgr = new StreamManager(store, {limit: 1});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
       expect(mgr.idList).toEqual([1]);
       expect(mgr.idList).toHaveLength(1);
-      expect(storeRemove.firstCall.calledWith(2)).toBe(true);
-      expect(storeRemove.secondCall.calledWith(3)).toBe(true);
+      expect(storeRemove.mock.calls[0][0]).toEqual(2);
+      expect(storeRemove.mock.calls[1][0]).toEqual(3);
     });
 
     it('does nothing with fewer items than limit', function() {
-      const storeRemove = sinon.spy(store, 'remove');
+      const storeRemove = jest.spyOn(store, 'remove');
       const mgr = new StreamManager(store, {limit: 10});
       mgr.idList = [1, 2, 3];
       mgr.trim();
 
       expect(mgr.idList).toEqual([1, 2, 3]);
       expect(mgr.idList).toHaveLength(3);
-      expect(storeRemove.called).toBe(false);
+      expect(storeRemove).not.toHaveBeenCalled();
     });
   });
 
   describe('getAllItems()', function() {
     it('retrives ordered items from store', function() {
-      const storeGetAllItems = sinon.stub(store, 'getAllItems', function() {
-        return [{id: 1}, {id: 2}];
-      });
+      const storeGetAllItems = jest
+        .spyOn(store, 'getAllItems')
+        .mockImplementation(() => [{id: 1}, {id: 2}]);
       const mgr = new StreamManager(store);
       mgr.push({id: 2});
       mgr.push({id: 1});
       const items = mgr.getAllItems();
 
       expect(items).toEqual([{id: 2}, {id: 1}]);
-      expect(storeGetAllItems.called).toBe(true);
+      expect(storeGetAllItems).toHaveBeenCalled();
     });
 
     it('does not mutate store', function() {
       const storeItems = [{id: 1}, {id: 2}];
-      sinon.stub(store, 'getAllItems', function() {
-        return storeItems;
-      });
+      jest.spyOn(store, 'getAllItems').mockImplementation(() => storeItems);
       const mgr = new StreamManager(store);
       mgr.push([{id: 2}, {id: 1}]);
       mgr.getAllItems();
@@ -121,14 +119,14 @@ describe('StreamManager', function() {
 
   describe('unshift()', function() {
     it('adds items to the start of the list', function() {
-      const storeAdd = sinon.spy(store, 'add');
+      const storeAdd = jest.spyOn(store, 'add');
       const mgr = new StreamManager(store);
       mgr.unshift([{id: 2}]);
       mgr.unshift([{id: 1}]);
 
       expect(mgr.idList).toEqual([1, 2]);
-      expect(storeAdd.firstCall.calledWith([{id: 2}])).toBe(true);
-      expect(storeAdd.secondCall.calledWith([{id: 1}])).toBe(true);
+      expect(storeAdd.mock.calls[0][0]).toEqual([{id: 2}]);
+      expect(storeAdd.mock.calls[1][0]).toEqual([{id: 1}]);
     });
 
     it('moves duplicates to the start of the list', function() {
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index 6d15b503d0..747ab3dec4 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -7,20 +7,18 @@ import ConfigStore from 'app/stores/configStore';
 import GroupStore from 'app/stores/groupStore';
 
 describe('GroupActivity', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
-    sandbox
-      .stub(ConfigStore, 'get')
-      .withArgs('user')
-      .returns({id: '123'});
+    jest.spyOn(ConfigStore, 'get').mockImplementation(key => {
+      if (key === 'user') {
+        return {
+          id: '123',
+        };
+      }
+      return {};
+    });
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders a NoteInput', function() {
     const wrapper = shallow(
@@ -61,21 +59,22 @@ describe('GroupActivity', function() {
     });
 
     it('should do nothing if not present in GroupStore', function() {
-      sandbox.stub(GroupStore, 'removeActivity').returns(-1); // not found
-      const request = sandbox.stub(instance.api, 'request');
+      jest.spyOn(GroupStore, 'removeActivity').mockImplementation(() => -1); // not found
+      const request = jest.spyOn(instance.api, 'request');
 
       instance.onNoteDelete({id: 1});
       expect(request.calledOnce).not.toBeTruthy();
     });
 
     it('should remove remove the item from the GroupStore make a DELETE API request', function() {
-      sandbox.stub(GroupStore, 'removeActivity').returns(1);
+      const mock = MockApiClient.addMockResponse({
+        url: '/issues/1337/comments/1/',
+        method: 'DELETE',
+      });
+      jest.spyOn(GroupStore, 'removeActivity').mockImplementation(() => 1);
 
-      const request = sandbox.stub(instance.api, 'request');
       instance.onNoteDelete({id: 1});
-      expect(request.calledOnce).toBeTruthy();
-      expect(request.getCall(0).args[0]).toEqual('/issues/1337/comments/1/');
-      expect(request.getCall(0).args[1]).toHaveProperty('method', 'DELETE');
+      expect(mock).toHaveBeenCalledTimes(1);
     });
   });
 });
diff --git a/tests/js/spec/views/groupDetails/actions.spec.jsx b/tests/js/spec/views/groupDetails/actions.spec.jsx
index 0e0773f17d..9652d649f9 100644
--- a/tests/js/spec/views/groupDetails/actions.spec.jsx
+++ b/tests/js/spec/views/groupDetails/actions.spec.jsx
@@ -5,17 +5,11 @@ import GroupActions from 'app/views/groupDetails/shared/actions';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GroupActions', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
-    sandbox.stub(ConfigStore, 'get').returns([]);
+    jest.spyOn(ConfigStore, 'get').mockImplementation(() => []);
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     it('renders correctly', function() {
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index b6a2f645eb..b7fd6cf525 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -5,17 +5,11 @@ import GroupSeenBy from 'app/views/groupDetails/shared/seenBy';
 import ConfigStore from 'app/stores/configStore';
 
 describe('GroupSeenBy', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
-    sandbox.stub(ConfigStore, 'get').returns([]);
+    jest.spyOn(ConfigStore, 'get').mockImplementation(() => []);
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     it('should return null if seenBy is falsy', function() {
diff --git a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
index a96f550b9e..3bd8140e00 100644
--- a/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
+++ b/tests/js/spec/views/inviteMember/inviteMember.spec.jsx
@@ -8,7 +8,6 @@ jest.mock('app/api');
 jest.mock('jquery');
 
 describe('CreateProject', function() {
-  let sandbox;
   const baseProps = {
     params: {
       orgId: 'testOrg',
@@ -36,8 +35,10 @@ describe('CreateProject', function() {
   ]);
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: true});
+    jest.spyOn(ConfigStore, 'getConfig').mockImplementation(() => ({
+      id: 1,
+      invitesEnabled: true,
+    }));
     MockApiClient.clearMockResponses();
 
     MockApiClient.addMockResponse({
@@ -46,9 +47,7 @@ describe('CreateProject', function() {
     });
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('should render loading', function() {
     const wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
@@ -82,8 +81,10 @@ describe('CreateProject', function() {
   });
 
   it('should use invite/add language based on config', function() {
-    sandbox.restore(ConfigStore, 'getConfig');
-    sandbox.stub(ConfigStore, 'getConfig').returns({id: 1, invitesEnabled: false});
+    jest.spyOn(ConfigStore, 'getConfig').mockImplementation(() => ({
+      id: 1,
+      invitesEnabled: false,
+    }));
 
     const wrapper = shallow(<InviteMember {...baseProps} />, baseContext);
     wrapper.setState({
diff --git a/tests/js/spec/views/onboarding/configure/index.spec.jsx b/tests/js/spec/views/onboarding/configure/index.spec.jsx
index 370977ddf3..1c16644b41 100644
--- a/tests/js/spec/views/onboarding/configure/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/configure/index.spec.jsx
@@ -5,10 +5,7 @@ import Configure from 'app/views/onboarding/configure';
 import ProjectsStore from 'app/stores/projectsStore';
 
 describe('Configure should render correctly', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
     MockApiClient.addMockResponse({
       url: '/projects/testOrg/project-slug/',
       body: TestStubs.Project(),
@@ -71,7 +68,6 @@ describe('Configure should render correctly', function() {
   });
 
   afterEach(function() {
-    sandbox.restore();
     ProjectsStore.loadInitialData([]);
   });
 
@@ -105,11 +101,13 @@ describe('Configure should render correctly', function() {
 
       const component = wrapper.instance();
 
-      const handleSubmitStub = sandbox.stub(component, 'redirectToNeutralDocs', () => {});
+      const handleSubmitStub = jest
+        .spyOn(component, 'redirectToNeutralDocs')
+        .mockImplementation(() => {});
 
       wrapper.update();
       expect(wrapper).toMatchSnapshot();
-      expect(handleSubmitStub.callCount).toEqual(0);
+      expect(handleSubmitStub).toHaveBeenCalledTimes(0);
     });
 
     it('should redirect to if no matching platform', function() {
@@ -118,7 +116,7 @@ describe('Configure should render correctly', function() {
       };
       props.params.platform = 'other';
 
-      const handleSubmitStub = sandbox.stub(Configure.prototype, 'redirectToNeutralDocs');
+      const handleSubmitStub = jest.spyOn(Configure.prototype, 'redirectToNeutralDocs');
 
       // 👺 ⚠️ this is a hack to defeat the method auto binding so we can fully stub the method. It would not be neccessary with es6 class components and it relies on react internals so it's fragile - maxbittker
       const index =
@@ -135,7 +133,7 @@ describe('Configure should render correctly', function() {
       );
 
       expect(wrapper).toMatchSnapshot();
-      expect(handleSubmitStub.callCount).toEqual(1);
+      expect(handleSubmitStub).toHaveBeenCalledTimes(1);
     });
 
     it('should render platform docs', async function() {
diff --git a/tests/js/spec/views/onboarding/index.spec.jsx b/tests/js/spec/views/onboarding/index.spec.jsx
index 835c91c99e..f295cabe2a 100644
--- a/tests/js/spec/views/onboarding/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/index.spec.jsx
@@ -7,16 +7,11 @@ import OnboardingWizard from 'app/views/onboarding/';
 import Project from 'app/views/onboarding/project';
 
 describe('OnboardingWizard', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    this.stubbedApiRequest = sandbox.stub(Client.prototype, 'request');
+    this.stubbedApiRequest = jest.spyOn(Client.prototype, 'request');
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     const baseProps = {
diff --git a/tests/js/spec/views/onboarding/project/index.spec.jsx b/tests/js/spec/views/onboarding/project/index.spec.jsx
index cd855c3ca6..dddd87e728 100644
--- a/tests/js/spec/views/onboarding/project/index.spec.jsx
+++ b/tests/js/spec/views/onboarding/project/index.spec.jsx
@@ -6,16 +6,11 @@ import {Client} from 'app/api';
 import Project from 'app/views/onboarding/project';
 
 describe('Project', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    this.stubbedApiRequest = sandbox.stub(Client.prototype, 'request');
+    this.stubbedApiRequest = jest.spyOn(Client.prototype, 'request');
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     const baseProps = {
diff --git a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
index 42f10439ef..dd6d06688e 100644
--- a/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
+++ b/tests/js/spec/views/onboarding/project/platformpicker.spec.jsx
@@ -4,18 +4,14 @@ import {shallow, mount} from 'enzyme';
 
 import {Client} from 'app/api';
 import PlatformPicker from 'app/views/onboarding/project/platformpicker';
-import sinon from 'sinon';
 
 describe('PlatformPicker', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    this.stubbedApiRequest = sandbox.stub(Client.prototype, 'request');
+    this.stubbedApiRequest = jest.spyOn(Client.prototype, 'request');
   });
 
   afterEach(function() {
-    sandbox.restore();
+    Client.prototype.request.mockRestore();
   });
 
   describe('render()', function() {
diff --git a/tests/js/spec/views/projectGeneralSettings.spec.jsx b/tests/js/spec/views/projectGeneralSettings.spec.jsx
index 94a84b05a0..91a82a5b07 100644
--- a/tests/js/spec/views/projectGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/projectGeneralSettings.spec.jsx
@@ -17,7 +17,7 @@ describe('projectGeneralSettings', function() {
   let putMock;
 
   beforeEach(function() {
-    sinon.stub(window.location, 'assign');
+    jest.spyOn(window.location, 'assign');
     routerContext = TestStubs.routerContext([
       {
         router: TestStubs.router({
@@ -48,7 +48,7 @@ describe('projectGeneralSettings', function() {
   });
 
   afterEach(function() {
-    window.location.assign.restore();
+    window.location.assign.mockRestore();
   });
 
   it('renders form fields', function() {
diff --git a/tests/js/spec/views/projectInstall/newProject.spec.jsx b/tests/js/spec/views/projectInstall/newProject.spec.jsx
index 2addfcc92e..ca23de44ea 100644
--- a/tests/js/spec/views/projectInstall/newProject.spec.jsx
+++ b/tests/js/spec/views/projectInstall/newProject.spec.jsx
@@ -5,16 +5,11 @@ import {Client} from 'app/api';
 import NewProject from 'app/views/projectInstall/newProject';
 
 describe('NewProjectPlatform', function() {
-  let sandbox;
-
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-    this.stubbedApiRequest = sandbox.stub(Client.prototype, 'request');
+    this.stubbedApiRequest = jest.spyOn(Client.prototype, 'request');
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('render()', function() {
     it('should render', function() {
diff --git a/tests/js/spec/views/projectPluginDetails.spec.jsx b/tests/js/spec/views/projectPluginDetails.spec.jsx
index edb0b07e42..395f20d1fd 100644
--- a/tests/js/spec/views/projectPluginDetails.spec.jsx
+++ b/tests/js/spec/views/projectPluginDetails.spec.jsx
@@ -17,7 +17,7 @@ describe('ProjectPluginDetails', function() {
   const pluginId = plugin.id;
 
   beforeAll(function() {
-    sinon.stub(console, 'info');
+    jest.spyOn(console, 'info');
   });
 
   beforeEach(function() {
diff --git a/tests/js/spec/views/releases/list/projectReleases.spec.jsx b/tests/js/spec/views/releases/list/projectReleases.spec.jsx
index 4c1be162ff..b88ff0c1ae 100644
--- a/tests/js/spec/views/releases/list/projectReleases.spec.jsx
+++ b/tests/js/spec/views/releases/list/projectReleases.spec.jsx
@@ -2,19 +2,27 @@ import React from 'react';
 import {shallow, mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
-import {Client} from 'app/api';
 import {ProjectReleases} from 'app/views/releases/list/projectReleases';
 
 describe('ProjectReleases', function() {
-  let sandbox;
   let props;
   let projectReleases;
+  const requestMock = MockApiClient.addMockResponse({
+    url: '/projects/123/456/releases/',
+    body: [],
+  });
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
+  MockApiClient.addMockResponse({
+    url: '/promptsactivity/',
+    body: [],
+  });
 
-    sandbox.stub(Client.prototype, 'request');
+  MockApiClient.addMockResponse({
+    url: '/projects/org-slug/project-slug/releases/completion/',
+    body: [],
+  });
 
+  beforeEach(function() {
     props = {
       setProjectNavSection: function() {},
       params: {orgId: '123', projectId: '456'},
@@ -23,13 +31,12 @@ describe('ProjectReleases', function() {
     projectReleases = shallow(<ProjectReleases {...props} />, TestStubs.routerContext());
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('fetchData()', function() {
     it('should call releases endpoint', function() {
-      expect(Client.prototype.request.args[0][1]).toEqual(
+      expect(requestMock).toHaveBeenCalledWith(
+        expect.anything(),
         expect.objectContaining({
           query: {per_page: 20, query: 'derp'},
         })
@@ -59,7 +66,7 @@ describe('ProjectReleases', function() {
 
   describe('componentWillReceiveProps()', function() {
     it('should update state with latest query pulled from query string', function() {
-      const setState = sandbox.stub(projectReleases.instance(), 'setState');
+      const setState = jest.spyOn(projectReleases.instance(), 'setState');
 
       const newProps = {
         ...props,
@@ -68,12 +75,15 @@ describe('ProjectReleases', function() {
           query: {query: 'newquery'},
         },
       };
-      projectReleases.instance().componentWillReceiveProps(newProps);
+      projectReleases.setProps(newProps);
+      projectReleases.update();
 
-      expect(setState.calledOnce).toBeTruthy();
-      expect(setState.getCall(0).args[0]).toEqual({
-        query: 'newquery',
-      });
+      expect(setState).toHaveBeenCalledWith(
+        {
+          query: 'newquery',
+        },
+        expect.anything()
+      );
     });
   });
 
diff --git a/tests/js/spec/views/ruleBuilder.spec.jsx b/tests/js/spec/views/ruleBuilder.spec.jsx
index a889b709f9..2330cf54f4 100644
--- a/tests/js/spec/views/ruleBuilder.spec.jsx
+++ b/tests/js/spec/views/ruleBuilder.spec.jsx
@@ -10,8 +10,6 @@ import RuleBuilder from 'app/views/settings/project/projectOwnership/ruleBuilder
 jest.mock('jquery');
 
 describe('RuleBuilder', function() {
-  let sandbox;
-
   const organization = TestStubs.Organization();
   let project;
   let handleAdd;
@@ -50,11 +48,10 @@ describe('RuleBuilder', function() {
   });
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
     // User in project
     MemberListStore.loadInitialData([USER_1]);
     // All teams
-    sandbox.stub(TeamStore, 'getAll').returns([TEAM_1, TEAM_2]);
+    jest.spyOn(TeamStore, 'getAll').mockImplementation(() => [TEAM_1, TEAM_2]);
 
     handleAdd = jest.fn();
 
@@ -63,7 +60,7 @@ describe('RuleBuilder', function() {
       teams: [TEAM_1],
     });
     ProjectsStore.loadInitialData([project]);
-    sandbox.stub(ProjectsStore, 'getBySlug').returns(project);
+    jest.spyOn(ProjectsStore, 'getBySlug').mockImplementation(() => project);
     MockApiClient.clearMockResponses();
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/members/',
@@ -71,9 +68,7 @@ describe('RuleBuilder', function() {
     });
   });
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   it('renders', async function() {
     const wrapper = mount(
diff --git a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
index d98ae77c8b..38162a52ed 100644
--- a/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
+++ b/tests/js/spec/views/settings/organizationGeneralSettings.spec.jsx
@@ -303,7 +303,7 @@ describe('OrganizationGeneralSettings', function() {
     wrapper.find('Switch[name="require2FA"]').simulate('click');
 
     // hide console.error for this test
-    sinon.stub(console, 'error');
+    jest.spyOn(console, 'error').mockImplementation(() => {});
     // Confirm but has API failure
     wrapper
       .find(
@@ -315,6 +315,6 @@ describe('OrganizationGeneralSettings', function() {
     wrapper.update();
     expect(wrapper.find('Switch[name="require2FA"]').prop('isActive')).toBe(false);
     // eslint-disable-next-line no-console
-    console.error.restore();
+    console.error.mockRestore();
   });
 });
diff --git a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
index b34b2aecca..4cd970d522 100644
--- a/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
+++ b/tests/js/spec/views/settings/organizationMembers/index.spec.jsx
@@ -34,17 +34,11 @@ describe('OrganizationMembers', function() {
       id: 'active',
     },
   });
-  let getStub;
 
-  beforeAll(function() {
-    getStub = sinon
-      .stub(ConfigStore, 'get')
-      .withArgs('user')
-      .returns(currentUser);
-  });
+  jest.spyOn(ConfigStore, 'get').mockImplementation(() => currentUser);
 
   afterAll(function() {
-    getStub.restore();
+    ConfigStore.get.mockRestore();
   });
 
   beforeEach(function() {
@@ -93,7 +87,7 @@ describe('OrganizationMembers', function() {
   });
 
   it('can remove a member', async function() {
-    const deleteMock = Client.addMockResponse({
+    const deleteMock = MockApiClient.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
       method: 'DELETE',
     });
@@ -127,7 +121,7 @@ describe('OrganizationMembers', function() {
   });
 
   it('displays error message when failing to remove member', async function() {
-    const deleteMock = Client.addMockResponse({
+    const deleteMock = MockApiClient.addMockResponse({
       url: `/organizations/org-id/members/${members[0].id}/`,
       method: 'DELETE',
       statusCode: 500,
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index c9fea6598c..e2b9673c90 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -5,17 +5,12 @@ import StreamActions from 'app/views/stream/actions';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
 describe('StreamActions', function() {
-  let sandbox;
   let actions;
   let wrapper;
 
-  beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-  });
+  beforeEach(function() {});
 
-  afterEach(function() {
-    sandbox.restore();
-  });
+  afterEach(function() {});
 
   describe('Bulk', function() {
     describe('Total results > bulk limit', function() {
@@ -142,7 +137,12 @@ describe('StreamActions', function() {
   });
 
   describe('actionSelectedGroups()', function() {
+    beforeAll(function() {
+      jest.spyOn(SelectedGroupStore, 'deselectAll');
+    });
+
     beforeEach(function() {
+      SelectedGroupStore.deselectAll.mockReset();
       actions = shallow(
         <StreamActions
           query=""
@@ -162,17 +162,21 @@ describe('StreamActions', function() {
       ).instance();
     });
 
+    afterAll(function() {
+      SelectedGroupStore.mockRestore();
+    });
+
     describe('for all items', function() {
       it("should invoke the callback with 'undefined' and deselect all", function() {
-        sandbox.stub(SelectedGroupStore, 'deselectAll');
-        const callback = sandbox.stub();
+        const callback = jest.fn();
 
         actions.state.allInQuerySelected = true;
 
         actions.actionSelectedGroups(callback);
 
-        expect(callback.withArgs(undefined).calledOnce).toBeTruthy();
-        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy();
+        expect(callback).toHaveBeenCalledWith(undefined);
+        expect(callback).toHaveBeenCalledTimes(1);
+        expect(SelectedGroupStore.deselectAll).toHaveBeenCalledTimes(1);
 
         // all selected is reset
         expect(actions.state.allInQuerySelected).toBe(false);
@@ -181,15 +185,17 @@ describe('StreamActions', function() {
 
     describe('for page-selected items', function() {
       it('should invoke the callback with an array of selected items and deselect all', function() {
-        sandbox.stub(SelectedGroupStore, 'deselectAll');
-        sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1, 2, 3]));
+        jest
+          .spyOn(SelectedGroupStore, 'getSelectedIds')
+          .mockImplementation(() => new Set([1, 2, 3]));
 
         actions.state.allInQuerySelected = false;
-        const callback = sandbox.stub();
+        const callback = jest.fn();
         actions.actionSelectedGroups(callback);
 
-        expect(callback.withArgs([1, 2, 3]).calledOnce).toBeTruthy();
-        expect(SelectedGroupStore.deselectAll.calledOnce).toBeTruthy();
+        expect(callback).toHaveBeenCalledWith([1, 2, 3]);
+        expect(callback).toHaveBeenCalledTimes(1);
+        expect(SelectedGroupStore.deselectAll).toHaveBeenCalledTimes(1);
       });
     });
   });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index c369d5b79c..0ff53647c3 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -5,7 +5,6 @@ import SearchBar from 'app/views/stream/searchBar';
 import TagStore from 'app/stores/tagStore';
 
 describe('SearchBar', function() {
-  let sandbox;
   let options;
   let tagValuePromise;
   let supportedTags;
@@ -16,8 +15,6 @@ describe('SearchBar', function() {
     TagStore.onLoadTagsSuccess(TestStubs.Tags());
     supportedTags = TagStore.getAllTags();
 
-    sandbox = sinon.sandbox.create();
-
     options = {
       context: {organization: {id: '123'}},
     };
@@ -29,17 +26,11 @@ describe('SearchBar', function() {
 
   afterEach(function() {
     MockApiClient.clearMockResponses();
-    sandbox.restore();
   });
 
   describe('updateAutoCompleteItems()', function() {
-    let clock;
-
-    beforeEach(function() {
-      clock = sandbox.useFakeTimers();
-    });
-    afterEach(function() {
-      clock.restore();
+    beforeAll(function() {
+      jest.useFakeTimers();
     });
 
     it('sets state with complete tag', function() {
@@ -56,7 +47,7 @@ describe('SearchBar', function() {
       };
       const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
-      clock.tick(301);
+      jest.advanceTimersByTime(301);
       expect(searchBar.find('SearchDropdown').prop('searchSubstring')).toEqual('"fu"');
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
     });
@@ -83,7 +74,7 @@ describe('SearchBar', function() {
         '"http://example.com"'
       );
       expect(searchBar.find('SearchDropdown').prop('items')).toEqual([]);
-      clock.tick(301);
+      jest.advanceTimersByTime(301);
     });
 
     it('does not request values when tag is `timesSeen`', function() {
@@ -99,7 +90,7 @@ describe('SearchBar', function() {
       };
       const searchBar = mount(<SearchBar {...props} />, options);
       clickInput(searchBar);
-      clock.tick(301);
+      jest.advanceTimersByTime(301);
       expect(loader).not.toHaveBeenCalled();
     });
   });
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index dc0703848a..3d0bcd185d 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -10,7 +10,6 @@ import ErrorRobot from 'app/components/errorRobot';
 import Stream from 'app/views/stream/stream';
 import EnvironmentStore from 'app/stores/environmentStore';
 import {setActiveEnvironment} from 'app/actionCreators/environments';
-import {browserHistory} from 'react-router';
 import TagStore from 'app/stores/tagStore';
 
 jest.mock('app/stores/groupStore');
@@ -20,7 +19,6 @@ const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
 describe('Stream', function() {
-  let sandbox;
   let context;
   let wrapper;
   let props;
@@ -33,8 +31,6 @@ describe('Stream', function() {
   let groupListRequest;
 
   beforeEach(function() {
-    sandbox = sinon.sandbox.create();
-
     organization = TestStubs.Organization({
       id: '1337',
       slug: 'org-slug',
@@ -65,7 +61,6 @@ describe('Stream', function() {
       url: '/organizations/org-slug/processingissues/',
       method: 'GET',
     });
-    sandbox.stub(browserHistory, 'push');
 
     context = {
       project,
@@ -85,17 +80,24 @@ describe('Stream', function() {
   });
 
   afterEach(function() {
-    sandbox.restore();
     MockApiClient.clearMockResponses();
   });
 
   describe('fetchData()', function() {
     describe('complete handler', function() {
+      beforeAll(function() {
+        jest.spyOn(CursorPoller.prototype, 'setEndpoint');
+      });
+
       beforeEach(function() {
+        CursorPoller.prototype.setEndpoint.mockReset();
         wrapper = shallow(<Stream {...props} />, {
           context,
         });
-        sandbox.stub(CursorPoller.prototype, 'setEndpoint');
+      });
+
+      afterAll(function() {
+        CursorPoller.prototype.setEndpoint.mockRestore();
       });
 
       it('should reset the poller endpoint and sets cursor URL', function() {
@@ -105,11 +107,9 @@ describe('Stream', function() {
 
         stream.fetchData();
 
-        expect(
-          CursorPoller.prototype.setEndpoint.calledWith(
-            'http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1'
-          )
-        ).toBe(true);
+        expect(CursorPoller.prototype.setEndpoint).toHaveBeenCalledWith(
+          'http://127.0.0.1:8000/api/0/projects/org-slug/project-slug/issues/?cursor=1443575731:0:1'
+        );
       });
 
       it('should not enable the poller if realtimeActive is false', function() {
@@ -118,7 +118,7 @@ describe('Stream', function() {
         stream.state.realtimeActive = false;
         stream.fetchData();
 
-        expect(CursorPoller.prototype.setEndpoint.notCalled).toBeTruthy();
+        expect(CursorPoller.prototype.setEndpoint).not.toHaveBeenCalled();
       });
 
       it("should not enable the poller if the 'previous' link has results", function() {
@@ -147,7 +147,7 @@ describe('Stream', function() {
 
         stream.fetchData();
 
-        expect(CursorPoller.prototype.setEndpoint.notCalled).toBeTruthy();
+        expect(CursorPoller.prototype.setEndpoint).not.toHaveBeenCalled();
       });
     }); // complete handler
 
@@ -172,9 +172,9 @@ describe('Stream', function() {
     });
 
     it('should cancel any previous, unfinished fetches', function() {
-      const requestCancel = sandbox.stub();
+      const requestCancel = jest.fn();
       let requestOptions;
-      sandbox.stub(Client.prototype, 'request', function(url, options) {
+      jest.spyOn(Client.prototype, 'request').mockImplementation(function(url, options) {
         requestOptions = options;
         return {
           cancel: requestCancel,
@@ -188,7 +188,7 @@ describe('Stream', function() {
       stream.fetchData();
       stream.fetchData();
 
-      expect(requestCancel.calledOnce).toBeTruthy();
+      expect(requestCancel).toHaveBeenCalledTimes(1);
       expect(stream.lastRequest).toBeTruthy();
 
       // when request "completes", lastRequest is cleared
@@ -197,12 +197,13 @@ describe('Stream', function() {
       });
 
       expect(stream.lastRequest).toBeNull();
+      Client.prototype.request.mockRestore();
     });
 
     it('sends environment attribute', function() {
-      const requestCancel = sandbox.stub();
+      const requestCancel = jest.fn();
       let requestOptions;
-      sandbox.stub(Client.prototype, 'request', function(url, options) {
+      jest.spyOn(Client.prototype, 'request').mockImplementation(function(url, options) {
         requestOptions = options;
         return {
           cancel: requestCancel,
@@ -216,6 +217,7 @@ describe('Stream', function() {
 
       expect(requestOptions.data.query).toContain('environment:prod');
       expect(requestOptions.data.environment).toBe('prod');
+      Client.prototype.request.mockRestore();
     });
   });
 
diff --git a/tests/js/spec/views/teamSettings.spec.jsx b/tests/js/spec/views/teamSettings.spec.jsx
index 82aeb2f7b6..6bd63bdcd1 100644
--- a/tests/js/spec/views/teamSettings.spec.jsx
+++ b/tests/js/spec/views/teamSettings.spec.jsx
@@ -7,11 +7,11 @@ import TeamSettings from 'app/views/settings/organizationTeams/teamSettings';
 describe('TeamSettings', function() {
   beforeEach(function() {
     MockApiClient.clearMockResponses();
-    sinon.stub(window.location, 'assign');
+    jest.spyOn(window.location, 'assign');
   });
 
   afterEach(function() {
-    window.location.assign.restore();
+    window.location.assign.mockRestore();
   });
 
   it('can change name and slug', async function() {
@@ -96,8 +96,7 @@ describe('TeamSettings', function() {
       method: 'DELETE',
     });
     const routerPushMock = jest.fn();
-    const teamStoreTriggerMock = jest.fn();
-    sinon.stub(TeamStore, 'trigger', teamStoreTriggerMock);
+    jest.spyOn(TeamStore, 'trigger');
     TeamStore.loadInitialData([
       {
         slug: 'team-slug',
@@ -118,7 +117,7 @@ describe('TeamSettings', function() {
     // Click "Remove Team button
     wrapper.find('Button[priority="danger"]').simulate('click');
 
-    TeamStore.trigger.reset();
+    TeamStore.trigger.mockReset();
 
     // Wait for modal
     wrapper.find('ModalDialog Button[priority="danger"]').simulate('click');
@@ -135,6 +134,6 @@ describe('TeamSettings', function() {
 
     expect(TeamStore.items).toEqual([]);
 
-    TeamStore.trigger.restore();
+    TeamStore.trigger.mockRestore();
   });
 });
diff --git a/yarn.lock b/yarn.lock
index 331756e085..3eb3acbbdd 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -2318,11 +2318,6 @@ assert@^1.1.1:
   dependencies:
     util "0.10.3"
 
-assertion-error@^1.0.1:
-  version "1.0.2"
-  resolved "https://registry.yarnpkg.com/assertion-error/-/assertion-error-1.0.2.tgz#13ca515d86206da0bac66e834dd397d87581094c"
-  integrity sha1-E8pRXYYgbaC6xm6DTdOX2HWBCUw=
-
 assign-symbols@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/assign-symbols/-/assign-symbols-1.0.0.tgz#59667f41fadd4f20ccbc2bb96b8d4f7f78ec0367"
@@ -3490,15 +3485,6 @@ ccount@^1.0.0, ccount@^1.0.3:
   resolved "https://registry.yarnpkg.com/ccount/-/ccount-1.0.3.tgz#f1cec43f332e2ea5a569fd46f9f5bde4e6102aff"
   integrity sha512-Jt9tIBkRc9POUof7QA/VwWd+58fKkEEfI+/t1/eOlxKM7ZhrczNzMFefge7Ai+39y1pR/pP6cI19guHy3FSLmw==
 
-chai@3.4.1:
-  version "3.4.1"
-  resolved "https://registry.yarnpkg.com/chai/-/chai-3.4.1.tgz#330ae2f819124c26182036fa5e43a88ea4e1bd85"
-  integrity sha1-Mwri+BkSTCYYIDb6XkOojqThvYU=
-  dependencies:
-    assertion-error "^1.0.1"
-    deep-eql "^0.1.3"
-    type-detect "^1.0.0"
-
 chain-function@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/chain-function/-/chain-function-1.0.0.tgz#0d4ab37e7e18ead0bdc47b920764118ce58733dc"
@@ -4572,13 +4558,6 @@ decode-uri-component@^0.2.0:
   resolved "https://registry.yarnpkg.com/decode-uri-component/-/decode-uri-component-0.2.0.tgz#eb3913333458775cb84cd1a1fae062106bb87545"
   integrity sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=
 
-deep-eql@^0.1.3:
-  version "0.1.3"
-  resolved "https://registry.yarnpkg.com/deep-eql/-/deep-eql-0.1.3.tgz#ef558acab8de25206cd713906d74e56930eb69f2"
-  integrity sha1-71WKyrjeJSBs1xOQbXTlaTDrafI=
-  dependencies:
-    type-detect "0.1.1"
-
 deep-equal@^1.0.1:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/deep-equal/-/deep-equal-1.0.1.tgz#f5d260292b660e084eff4cdbc9f08ad3247448b5"
@@ -6103,13 +6082,6 @@ format@^0.2.2:
   resolved "https://registry.yarnpkg.com/format/-/format-0.2.2.tgz#d6170107e9efdc4ed30c9dc39016df942b5cb58b"
   integrity sha1-1hcBB+nv3E7TDJ3DkBbflCtctYs=
 
-formatio@1.1.1:
-  version "1.1.1"
-  resolved "https://registry.yarnpkg.com/formatio/-/formatio-1.1.1.tgz#5ed3ccd636551097383465d996199100e86161e9"
-  integrity sha1-XtPM1jZVEJc4NGXZlhmRAOhhYek=
-  dependencies:
-    samsam "~1.1"
-
 forwarded@~0.1.2:
   version "0.1.2"
   resolved "https://registry.yarnpkg.com/forwarded/-/forwarded-0.1.2.tgz#98c23dab1175657b8c0573e8ceccd91b0ff18c84"
@@ -8589,11 +8561,6 @@ loglevel@^1.4.1:
   resolved "https://registry.yarnpkg.com/loglevel/-/loglevel-1.6.0.tgz#ae0caa561111498c5ba13723d6fb631d24003934"
   integrity sha1-rgyqVhERSYxboTcj1vtjHSQAOTQ=
 
-lolex@1.3.2:
-  version "1.3.2"
-  resolved "https://registry.yarnpkg.com/lolex/-/lolex-1.3.2.tgz#7c3da62ffcb30f0f5a80a2566ca24e45d8a01f31"
-  integrity sha1-fD2mL/yzDw9agKJWbKJORdigHzE=
-
 longest-streak@^2.0.1:
   version "2.0.2"
   resolved "https://registry.yarnpkg.com/longest-streak/-/longest-streak-2.0.2.tgz#2421b6ba939a443bb9ffebf596585a50b4c38e2e"
@@ -12165,11 +12132,6 @@ safe-regex@^1.1.0:
   resolved "https://registry.yarnpkg.com/safer-buffer/-/safer-buffer-2.1.2.tgz#44fa161b0187b9549dd84bb91802f9bd8385cd6a"
   integrity sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==
 
-samsam@1.1.2, samsam@~1.1:
-  version "1.1.2"
-  resolved "https://registry.yarnpkg.com/samsam/-/samsam-1.1.2.tgz#bec11fdc83a9fda063401210e40176c3024d1567"
-  integrity sha1-vsEf3IOp/aBjQBIQ5AF2wwJNFWc=
-
 sane@^3.0.0:
   version "3.1.0"
   resolved "https://registry.yarnpkg.com/sane/-/sane-3.1.0.tgz#995193b7dc1445ef1fe41ddfca2faf9f111854c6"
@@ -12518,21 +12480,6 @@ simple-swizzle@^0.2.2:
   dependencies:
     is-arrayish "^0.3.1"
 
-sinon-chai@2.8.0:
-  version "2.8.0"
-  resolved "https://registry.yarnpkg.com/sinon-chai/-/sinon-chai-2.8.0.tgz#432a9bbfd51a6fc00798f4d2526a829c060687ac"
-  integrity sha1-Qyqbv9Uab8AHmPTSUmqCnAYGh6w=
-
-sinon@1.17.2:
-  version "1.17.2"
-  resolved "https://registry.yarnpkg.com/sinon/-/sinon-1.17.2.tgz#c1ea67b84a1e7b3350f6c4713efacef8e4ae8b71"
-  integrity sha1-wepnuEoeezNQ9sRxPvrO+OSui3E=
-  dependencies:
-    formatio "1.1.1"
-    lolex "1.3.2"
-    samsam "1.1.2"
-    util ">=0.10.3 <1"
-
 sisteransi@^1.0.0:
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/sisteransi/-/sisteransi-1.0.0.tgz#77d9622ff909080f1c19e5f4a1df0c1b0a27b88c"
@@ -13636,16 +13583,6 @@ type-check@~0.3.2:
   dependencies:
     prelude-ls "~1.1.2"
 
-type-detect@0.1.1:
-  version "0.1.1"
-  resolved "https://registry.yarnpkg.com/type-detect/-/type-detect-0.1.1.tgz#0ba5ec2a885640e470ea4e8505971900dac58822"
-  integrity sha1-C6XsKohWQORw6k6FBZcZANrFiCI=
-
-type-detect@^1.0.0:
-  version "1.0.0"
-  resolved "https://registry.yarnpkg.com/type-detect/-/type-detect-1.0.0.tgz#762217cc06db258ec48908a1298e8b95121e8ea2"
-  integrity sha1-diIXzAbbJY7EiQihKY6LlRIejqI=
-
 type-is@~1.6.15:
   version "1.6.15"
   resolved "https://registry.yarnpkg.com/type-is/-/type-is-1.6.15.tgz#cab10fb4909e441c82842eafe1ad646c81804410"
@@ -13965,7 +13902,7 @@ util.promisify@1.0.0, util.promisify@^1.0.0, util.promisify@~1.0.0:
     define-properties "^1.1.2"
     object.getownpropertydescriptors "^2.0.3"
 
-util@0.10.3, "util@>=0.10.3 <1", util@^0.10.3, util@~0.10.3:
+util@0.10.3, util@^0.10.3, util@~0.10.3:
   version "0.10.3"
   resolved "https://registry.yarnpkg.com/util/-/util-0.10.3.tgz#7afb1afe50805246489e3db7fe0ed379336ac0f9"
   integrity sha1-evsa/lCAUkZInj23/g7TeTNqwPk=
