commit 22576b5c1c489996e2dd339afd5d52fe91fce287
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu May 14 20:07:38 2020 +0200

    ref(pii): Expose source example data to frontend (#18815)
    
    We want to help the user understand what they're actually going to scrub by showing example data of PII sources/sourcenames in the frontend. This is a follow-up to getsentry/relay#575

diff --git a/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py b/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py
index ab8c569e0a..753eb4bfbd 100644
--- a/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py
+++ b/src/sentry/api/endpoints/data_scrubbing_selector_suggestions.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 from rest_framework.response import Response
 
 from sentry import eventstore
@@ -7,7 +8,7 @@ from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.utils.apidocs import scenario, attach_scenarios
 
-from sentry_relay import pii_selectors_from_event
+from sentry_relay import pii_selector_suggestions_from_event
 
 
 @scenario("GetSelectorSuggestionsForOrganization")
@@ -37,7 +38,7 @@ class DataScrubbingSelectorSuggestionsEndpoint(OrganizationEndpoint):
         projects = self.get_projects(request, organization)
         project_ids = [project.id for project in projects]
 
-        selectors = set()
+        suggestions = {}
 
         if event_id:
             for event in eventstore.get_events(
@@ -45,7 +46,16 @@ class DataScrubbingSelectorSuggestionsEndpoint(OrganizationEndpoint):
                     conditions=[["id", "=", event_id]], project_ids=project_ids
                 )
             ):
-                selectors.update(pii_selectors_from_event(dict(event.data)))
-
-        suggestions = [{"type": "value", "value": selector} for selector in selectors]
-        return Response({"suggestions": suggestions})
+                for selector in pii_selector_suggestions_from_event(dict(event.data)):
+                    examples_ = suggestions.setdefault(selector["path"], [])
+                    if selector["value"]:
+                        examples_.append(selector["value"])
+
+        return Response(
+            {
+                "suggestions": [
+                    {"type": "value", "value": value, "examples": examples}
+                    for value, examples in six.iteritems(suggestions)
+                ]
+            }
+        )
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
index 0d888fc8b0..615b702b08 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/dataPrivacyRulesFormSource.tsx
@@ -11,6 +11,7 @@ import {
   unaryOperatorSuggestions,
   binaryOperatorSuggestions,
 } from './dataPrivacyRulesFormSourceSuggestions';
+import SourceSuggestionExamples from './sourceSuggestionExamples';
 import {SourceSuggestion, SourceSuggestionType} from './types';
 
 type Props = {
@@ -37,10 +38,6 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
     showSuggestions: false,
   };
 
-  componentWillMount() {
-    document.addEventListener('mousedown', this.handleClickOutside, false);
-  }
-
   componentDidMount() {
     this.loadFieldValues(this.props.value);
     this.hideSuggestions();
@@ -53,10 +50,6 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
     }
   }
 
-  componentWillUnmount() {
-    document.removeEventListener('mousedown', this.handleClickOutside, false);
-  }
-
   selectorField = React.createRef<HTMLDivElement>();
   suggestionList = React.createRef<HTMLUListElement>();
 
@@ -236,15 +229,7 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
     this.props.onChange(newValue);
   };
 
-  handleClickOutside = (event: MouseEvent) => {
-    if (
-      event.target instanceof HTMLElement &&
-      this.selectorField.current &&
-      this.selectorField.current.contains(event.target)
-    ) {
-      return;
-    }
-
+  handleClickOutside = () => {
     this.setState({
       showSuggestions: false,
     });
@@ -373,23 +358,37 @@ class DataPrivacyRulesFormSource extends React.Component<Props, State> {
           disabled={disabled}
         />
         {showSuggestions && suggestions.length > 0 && (
-          <SuggestionsWrapper ref={this.suggestionList} data-test-id="source-suggestions">
-            {suggestions.slice(0, 50).map((suggestion, index) => (
-              <SuggestionItem
-                key={suggestion.value}
-                onClick={this.handleClickSuggestionItem(suggestion)}
-                active={index === activeSuggestion}
-                tabIndex={-1}
-              >
-                <TextOverflow>{suggestion.value}</TextOverflow>
-                {suggestion?.description && (
-                  <SuggestionDescription>
-                    (<TextOverflow>{suggestion.description}</TextOverflow>)
-                  </SuggestionDescription>
-                )}
-              </SuggestionItem>
-            ))}
-          </SuggestionsWrapper>
+          <React.Fragment>
+            <SuggestionsWrapper
+              ref={this.suggestionList}
+              data-test-id="source-suggestions"
+            >
+              {suggestions.slice(0, 50).map((suggestion, index) => (
+                <SuggestionItem
+                  key={suggestion.value}
+                  onClick={this.handleClickSuggestionItem(suggestion)}
+                  active={index === activeSuggestion}
+                  tabIndex={-1}
+                >
+                  <TextOverflow>{suggestion.value}</TextOverflow>
+
+                  {suggestion.description && (
+                    <SuggestionDescription>
+                      (<TextOverflow>{suggestion.description}</TextOverflow>)
+                    </SuggestionDescription>
+                  )}
+
+                  {suggestion.examples && suggestion.examples.length > 0 && (
+                    <SourceSuggestionExamples
+                      examples={suggestion.examples}
+                      sourceName={suggestion.value}
+                    />
+                  )}
+                </SuggestionItem>
+              ))}
+            </SuggestionsWrapper>
+            <SuggestionsOverlay onClick={this.handleClickOutside} />
+          </React.Fragment>
         )}
       </Wrapper>
     );
@@ -409,6 +408,8 @@ const StyledTextField = styled(TextField)`
   input {
     height: 40px;
   }
+
+  z-index: 1002;
 `;
 
 const SuggestionsWrapper = styled('ul')`
@@ -423,7 +424,7 @@ const SuggestionsWrapper = styled('ul')`
   background: ${p => p.theme.white};
   top: 35px;
   right: 0;
-  z-index: 1001;
+  z-index: 1002;
   overflow: hidden;
   max-height: 200px;
   overflow-y: auto;
@@ -431,7 +432,7 @@ const SuggestionsWrapper = styled('ul')`
 
 const SuggestionItem = styled('li')<{active: boolean}>`
   display: grid;
-  grid-template-columns: auto 1fr;
+  grid-template-columns: auto 1fr max-content;
   grid-gap: ${space(1)};
   border-bottom: 1px solid ${p => p.theme.borderLight};
   padding: ${space(1)} ${space(2)};
@@ -448,3 +449,12 @@ const SuggestionDescription = styled('div')`
   overflow: hidden;
   color: ${p => p.theme.gray2};
 `;
+
+const SuggestionsOverlay = styled('div')`
+  position: fixed;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  z-index: 1001;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/sourceSuggestionExamples.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/sourceSuggestionExamples.tsx
new file mode 100644
index 0000000000..74c7e93902
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/sourceSuggestionExamples.tsx
@@ -0,0 +1,88 @@
+import Modal from 'react-bootstrap/lib/Modal';
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+
+type Props = {
+  examples: Array<string>;
+  sourceName: string;
+};
+
+type State = {
+  isOpen: boolean;
+};
+
+class SourceSuggestionExamples extends React.Component<Props, State> {
+  state: State = {
+    isOpen: false,
+  };
+
+  toggleModal = () => {
+    this.setState({isOpen: !this.state.isOpen});
+  };
+
+  stopPropagation = (e: React.MouseEvent<HTMLSpanElement>) => {
+    // Necessary to stop propagation of click events from modal that we can't
+    // catch otherwise.
+    e.stopPropagation();
+  };
+
+  render() {
+    const {isOpen} = this.state;
+    const {examples, sourceName} = this.props;
+
+    return (
+      <Wrapper onClick={this.stopPropagation}>
+        <Button size="xsmall" onClick={this.toggleModal}>
+          {t('examples')}
+        </Button>
+        {isOpen && (
+          <StyledModal show onHide={this.toggleModal}>
+            <Modal.Header closeButton>
+              {t('Examples for %s in current event', <code>{sourceName}</code>)}
+            </Modal.Header>
+            <Modal.Body>
+              {examples.map(example => (
+                <pre key={example}>{example}</pre>
+              ))}
+            </Modal.Body>
+          </StyledModal>
+        )}
+      </Wrapper>
+    );
+  }
+}
+
+export default SourceSuggestionExamples;
+
+const StyledModal = styled(Modal)`
+  .modal-dialog {
+    position: absolute;
+    top: 50%;
+    left: 50%;
+    transform: translate(-50%, -50%) !important;
+    margin: 0;
+    z-index: 1003;
+    @media (max-width: ${p => p.theme.breakpoints[0]}) {
+      width: 100%;
+    }
+  }
+
+  .modal-body {
+    max-height: 500px;
+    overflow-y: auto;
+    padding: ${space(3)} ${space(4)};
+    margin: -${space(3)} -${space(4)};
+  }
+
+  .close {
+    outline: none;
+  }
+`;
+
+const Wrapper = styled('span')`
+  grid-column: 3/3;
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
index 1750fbf0c2..d63dd611fb 100644
--- a/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/dataPrivacyRules/dataPrivacyRulesForm/types.tsx
@@ -40,4 +40,5 @@ export type SourceSuggestion = {
   type: SourceSuggestionType;
   value: string;
   description?: string;
+  examples?: Array<string>;
 };
diff --git a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
index 6e105b96b3..2afe266dd4 100644
--- a/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
+++ b/tests/js/spec/views/settings/components/dataPrivacyRulesPanel/__snapshots__/dataPrivacyRulesFormSource.spec.tsx.snap
@@ -82,7 +82,7 @@ exports[`DataPrivacyRulesFormSource default render 1`] = `
       >
         <TextField
           autoComplete="off"
-          className="css-jvghga-StyledTextField e5vbseb1"
+          className="css-12y0yqb-StyledTextField e5vbseb1"
           disabled={false}
           hideErrorMessage={false}
           name="from"
@@ -94,7 +94,7 @@ exports[`DataPrivacyRulesFormSource default render 1`] = `
           value="$string"
         >
           <div
-            className="css-jvghga-StyledTextField e5vbseb1 control-group"
+            className="css-12y0yqb-StyledTextField e5vbseb1 control-group"
           >
             <div
               className="controls"
