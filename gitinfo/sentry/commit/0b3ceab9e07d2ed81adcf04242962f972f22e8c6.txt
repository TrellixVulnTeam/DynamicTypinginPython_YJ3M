commit 0b3ceab9e07d2ed81adcf04242962f972f22e8c6
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Sep 28 13:19:17 2018 -0700

    fix(discover): Make getQueryFromQueryString more robust (#9920)

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 889df7ad24..ad2f1d830b 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -133,9 +133,8 @@ export default class OrganizationDiscover extends React.Component {
         this.setState({data, query: queryCopy, isFetchingQuery: false});
 
         browserHistory.push({
-          pathname: `/organizations/${organization.slug}/discover/${getQueryStringFromQuery(
-            query
-          )}`,
+          pathname: `/organizations/${organization.slug}/discover/`,
+          search: getQueryStringFromQuery(query),
         });
       },
       err => {
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index f3a1a2ee38..e09ec2bdb8 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -3,17 +3,27 @@ import {Client} from 'app/api';
 import {isValidAggregation} from './aggregations/utils';
 
 export function getQueryFromQueryString(queryString) {
-  if (!queryString) {
-    return {};
-  }
+  const validQueryKeys = new Set([
+    'projects',
+    'fields',
+    'conditions',
+    'aggregations',
+    'range',
+    'start',
+    'end',
+    'orderby',
+    'limit',
+  ]);
+
+  const result = {};
   let parsedQuery = queryString;
-  let result = {};
   parsedQuery = parsedQuery.replace(/^\?|\/$/g, '').split('&');
   parsedQuery.forEach(item => {
     if (item.includes('=')) {
-      let key = item.split('=')[0];
-      let value = JSON.parse(decodeURIComponent(item.split('=')[1]));
-      result[key] = value;
+      const [key, value] = item.split('=');
+      if (validQueryKeys.has(key)) {
+        result[key] = JSON.parse(decodeURIComponent(value));
+      }
     }
   });
 
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index afad78d8bb..dadf63482b 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -75,10 +75,10 @@ describe('Discover', function() {
   describe('reset()', function() {
     let wrapper, queryBuilder;
     beforeEach(function() {
-      browserHistory.push.mockImplementation(function(url) {
+      browserHistory.push.mockImplementation(function({search}) {
         wrapper.setProps({
           location: {
-            search: url.pathname.replace('/organizations/org-slug/discover/', ''),
+            search: search || '',
             action: 'PUSH',
           },
         });
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index a558977f2a..92bf303697 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -11,6 +11,9 @@ import {COLUMNS} from 'app/views/organizationDiscover/data';
 const queryString =
   '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
 
+const queryStringWithInvalidKey =
+  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22&invalid=true';
+
 const query = {
   aggregations: [['count()', null, 'count'], ['uniq', 'os_build', 'uniq_os_build']],
   conditions: [],
@@ -30,6 +33,10 @@ describe('getQueryFromQueryString()', function() {
   it('handles aggregations', function() {
     expect(getQueryFromQueryString(queryString)).toEqual(query);
   });
+
+  it('strips invalid keys', function() {
+    expect(getQueryFromQueryString(queryStringWithInvalidKey)).toEqual(query);
+  });
 });
 
 describe('getQueryStringFromQuery()', function() {
