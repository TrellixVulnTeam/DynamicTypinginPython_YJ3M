commit bb4361bd0cc8d90d969b0e2fe4058d02c7c13604
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Mar 12 15:07:52 2018 -0700

    feat(ui): Add Teams breadcrumb in settings (#7566)
    
    * rename settingsBreadcrumb
    * feat(ui): Add `<TextLink>` component
    * fix unused arg in teamstore, fix fetchDetails

diff --git a/docs-ui/components/textLink.stories.js b/docs-ui/components/textLink.stories.js
new file mode 100644
index 0000000000..464c37a7ac
--- /dev/null
+++ b/docs-ui/components/textLink.stories.js
@@ -0,0 +1,12 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+
+import TextLink from 'sentry-ui/textLink';
+
+storiesOf('Links/TextLink', module).add(
+  'default',
+  withInfo(
+    'A react-router `Link` but styled to be more like normal text (i.e. not blue)'
+  )(() => <TextLink to="https://www.sentry.io">Sentry</TextLink>)
+);
diff --git a/src/sentry/static/sentry/app/actionCreators/teams.jsx b/src/sentry/static/sentry/app/actionCreators/teams.jsx
index 9b907e367d..cd8c8c9c9f 100644
--- a/src/sentry/static/sentry/app/actionCreators/teams.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/teams.jsx
@@ -36,19 +36,18 @@ export function fetchTeamDetails(api, params, options) {
 }
 
 export function updateTeam(api, params, options) {
-  let id = api.uniqueId();
   let endpoint = `/teams/${params.orgId}/${params.teamId}/`;
-  TeamActions.update(id, params.teamId, params.data);
+  TeamActions.update(params.teamId, params.data);
 
   return api.request(endpoint, {
     method: 'PUT',
     data: params.data,
     success: data => {
-      TeamActions.updateSuccess(id, params.teamId, data);
+      TeamActions.updateSuccess(params.teamId, data);
       doCallback(options, 'success', data);
     },
     error: error => {
-      TeamActions.updateError(id, params.teamId, error);
+      TeamActions.updateError(params.teamId, error);
       doCallback(options, 'error', error);
     },
   });
diff --git a/src/sentry/static/sentry/app/components/textLink.jsx b/src/sentry/static/sentry/app/components/textLink.jsx
new file mode 100644
index 0000000000..4e2b5d0cb5
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/textLink.jsx
@@ -0,0 +1,14 @@
+import {Link} from 'react-router';
+import styled from 'react-emotion';
+
+/**
+ * Link colored as normal text
+ */
+const TextLink = styled(Link)`
+  color: ${p => p.theme.gray3};
+  &:hover {
+    color: ${p => p.theme.gray5};
+  }
+`;
+
+export default TextLink;
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index 1c5c7c1149..ac6e3eeef6 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -8,6 +8,7 @@ const TeamStore = Reflux.createStore({
     this.reset();
 
     this.listenTo(TeamActions.updateSuccess, this.onUpdateSuccess);
+    this.listenTo(TeamActions.fetchDetailsSuccess, this.onUpdateSuccess);
     this.listenTo(ProjectsStore, this.onProject);
   },
 
@@ -28,7 +29,7 @@ const TeamStore = Reflux.createStore({
     this.trigger(new Set(items.map(item => item.id)));
   },
 
-  onUpdateSuccess(changeId, itemId, response) {
+  onUpdateSuccess(itemId, response) {
     if (!response) return;
 
     let item = this.getBySlug(itemId);
diff --git a/src/sentry/static/sentry/app/utils/withTeams.jsx b/src/sentry/static/sentry/app/utils/withTeams.jsx
new file mode 100644
index 0000000000..315760a86c
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withTeams.jsx
@@ -0,0 +1,34 @@
+import React from 'react';
+import createReactClass from 'create-react-class';
+import Reflux from 'reflux';
+
+import TeamStore from '../stores/teamStore';
+import SentryTypes from '../proptypes';
+
+/**
+ * Higher order component that uses TeamStore and provides a list of teams
+ */
+const withTeams = WrappedComponent =>
+  createReactClass({
+    displayName: 'withTeams',
+    propTypes: {
+      organization: SentryTypes.Organization,
+    },
+    mixins: [Reflux.listenTo(TeamStore, 'onTeamUpdate')],
+    getInitialState() {
+      return {
+        teams: TeamStore.getAll(),
+      };
+    },
+
+    onTeamUpdate() {
+      this.setState({
+        teams: TeamStore.getAll(),
+      });
+    },
+    render() {
+      return <WrappedComponent {...this.props} teams={this.state.teams} />;
+    },
+  });
+
+export default withTeams;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
deleted file mode 100644
index 16f5d5dde3..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb.jsx
+++ /dev/null
@@ -1,237 +0,0 @@
-import {Flex} from 'grid-emotion';
-import {browserHistory} from 'react-router';
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-
-import Crumb from './crumb.styled';
-import InlineSvg from '../../../components/inlineSvg';
-import LetterAvatar from '../../../components/letterAvatar';
-import Link from '../../../components/link';
-import LoadingIndicator from '../../../components/loadingIndicator';
-import SentryTypes from '../../../proptypes';
-import SettingsBreadcrumbDivider from './settingsBreadcrumbDivider';
-import SettingsBreadcrumbDropdown from './settingsBreadcrumbDropdown';
-import recreateRoute from '../../../utils/recreateRoute';
-import replaceRouterParams from '../../../utils/replaceRouterParams';
-import withLatestContext from '../../../utils/withLatestContext';
-import withProjects from '../../../utils/withProjects';
-
-const Breadcrumbs = styled.div`
-  display: flex;
-  align-items: center;
-`;
-
-const StyledLink = styled(Link)`
-  color: ${p => p.theme.gray3};
-  &:hover {
-    color: ${p => p.theme.gray5};
-  }
-`;
-
-const ProjectName = styled.div`
-  display: flex;
-
-  .loading {
-    width: 26px;
-    height: 24px;
-    margin: 0;
-  }
-`;
-
-const StyledInlineSvg = styled(InlineSvg)`
-  display: block;
-`;
-
-const LogoLink = styled.a`
-  padding-right: 12px;
-  margin-right: 12px;
-  color: ${p => p.theme.gray4};
-  z-index: 1;
-  position: relative;
-
-  &:after {
-    display: block;
-    content: '';
-    position: absolute;
-    right: 0;
-    top: 2px;
-    bottom: 2px;
-    width: 1px;
-    background: ${p => p.theme.borderDark};
-  }
-
-  &:hover {
-    color: ${p => p.theme.gray5};
-  }
-`;
-
-// `organizationDetails` to differeniate from the organization that comes from `OrganizationsStore` which only has
-// a fraction of an org's properties
-const ProjectCrumb = withProjects(
-  withLatestContext(
-    ({
-      organization: latestOrganization,
-      project: latestProject,
-      projects,
-      params,
-      routes,
-      route,
-      ...props
-    }) => {
-      if (!latestOrganization) return null;
-      if (!projects) return null;
-
-      let hasMenu = projects && projects.length > 1;
-
-      return (
-        <SettingsBreadcrumbDropdown
-          hasMenu={hasMenu}
-          route={route}
-          name={
-            <ProjectName>
-              {!latestProject ? (
-                <LoadingIndicator mini />
-              ) : (
-                <div>
-                  <StyledLink
-                    to={replaceRouterParams(
-                      '/settings/organization/:orgId/project/:projectId/',
-                      {
-                        orgId: latestOrganization.slug,
-                        projectId: latestProject.slug,
-                      }
-                    )}
-                  >
-                    {latestProject.slug}
-                  </StyledLink>
-                </div>
-              )}
-            </ProjectName>
-          }
-          onSelect={item => {
-            browserHistory.push(
-              recreateRoute(route, {
-                routes,
-                params: {...params, projectId: item.value},
-              })
-            );
-          }}
-          items={projects.map(project => ({
-            value: project.slug,
-            label: project.slug,
-          }))}
-          {...props}
-        />
-      );
-    }
-  )
-);
-
-ProjectCrumb.displayName = 'ProjectCrumb';
-ProjectCrumb.propTypes = {
-  organizationDetails: SentryTypes.Organization,
-  routes: PropTypes.array,
-  route: PropTypes.object,
-  isLast: PropTypes.bool,
-};
-
-const MENUS = {
-  Organization: withLatestContext(
-    ({organizations, organization, params, routes, route, isLast, ...props}) => {
-      let hasMenu = organizations.length > 1;
-
-      return (
-        <SettingsBreadcrumbDropdown
-          name={
-            <StyledLink
-              to={recreateRoute(route, {
-                routes,
-                params: {...params, orgId: organization.slug},
-              })}
-            >
-              <Flex align="center">
-                <span style={{width: 18, height: 18, marginRight: 6}}>
-                  <LetterAvatar
-                    style={{display: 'inline-block'}}
-                    displayName={organization.slug}
-                    identifier={organization.slug}
-                  />
-                </span>
-                {organization.slug}
-              </Flex>
-            </StyledLink>
-          }
-          onSelect={item => {
-            browserHistory.push(
-              recreateRoute(route, {
-                routes,
-                params: {...params, orgId: item.value},
-              })
-            );
-          }}
-          hasMenu={hasMenu}
-          route={route}
-          items={organizations.map(org => ({
-            value: org.slug,
-            label: org.slug,
-          }))}
-          {...props}
-        />
-      );
-    }
-  ),
-
-  Project: ProjectCrumb,
-};
-
-class SettingsBreadcrumb extends React.Component {
-  static propTypes = {
-    routes: PropTypes.array,
-  };
-
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
-
-  render() {
-    let {routes, params} = this.props;
-    let routesWithNames = routes.filter(({name}) => name);
-    let lastRouteIndex = routesWithNames.length - 1;
-    return (
-      <Breadcrumbs>
-        <LogoLink href="/">
-          <StyledInlineSvg src="icon-sentry" size="20px" />
-        </LogoLink>
-        {routesWithNames.map((route, i) => {
-          let isLast = i === lastRouteIndex;
-          let createMenu = MENUS[route.name];
-          let Menu = typeof createMenu === 'function' && createMenu;
-          let hasMenu = !!Menu;
-          let CrumbPicker = hasMenu
-            ? Menu
-            : () => (
-                <Crumb route={route} isLast={isLast}>
-                  <StyledLink to={recreateRoute(route, {routes, params})}>
-                    {route.name}{' '}
-                  </StyledLink>
-                  <SettingsBreadcrumbDivider isLast={isLast} />
-                </Crumb>
-              );
-
-          return (
-            <CrumbPicker
-              key={`${route.name}:${route.path}`}
-              routes={routes}
-              params={params}
-              route={route}
-              isLast={isLast}
-            />
-          );
-        })}
-      </Breadcrumbs>
-    );
-  }
-}
-
-export default SettingsBreadcrumb;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
similarity index 85%
rename from src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
rename to src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
index 3ce5057715..5bb30b39e1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/breadcrumbDropdown.jsx
@@ -1,11 +1,11 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 
-import DropdownAutoCompleteMenu from '../../../components/dropdownAutoCompleteMenu';
-import SettingsBreadcrumbDivider from './settingsBreadcrumbDivider';
-import Crumb from './crumb.styled';
+import Crumb from './crumb';
+import DropdownAutoCompleteMenu from '../../../../components/dropdownAutoCompleteMenu';
+import Divider from './divider';
 
-class SettingsBreadcrumbDropdown extends React.Component {
+class BreadcrumbDropdown extends React.Component {
   static propTypes = {
     hasMenu: PropTypes.bool,
     route: PropTypes.object,
@@ -80,7 +80,7 @@ class SettingsBreadcrumbDropdown extends React.Component {
               >
                 {name || route.name}{' '}
               </div>
-              <SettingsBreadcrumbDivider isHover={hasMenu && isOpen} isLast={isLast} />
+              <Divider isHover={hasMenu && isOpen} isLast={isLast} />
             </Crumb>
           );
         }}
@@ -89,4 +89,4 @@ class SettingsBreadcrumbDropdown extends React.Component {
   }
 }
 
-export default SettingsBreadcrumbDropdown;
+export default BreadcrumbDropdown;
diff --git a/src/sentry/static/sentry/app/views/settings/components/crumb.styled.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/settings/components/crumb.styled.jsx
rename to src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/crumb.jsx
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
similarity index 82%
rename from src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx
rename to src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
index 33388e34e4..bdca11d00d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumbDivider.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/divider.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import InlineSvg from '../../../components/inlineSvg';
+import InlineSvg from '../../../../components/inlineSvg';
 
 const StyledDivider = styled.span`
   display: inline-block;
@@ -24,7 +24,7 @@ const StyledInlineSvg = styled(InlineSvg)`
   display: block;
 `;
 
-class SettingsBreadcrumbDivider extends React.Component {
+class Divider extends React.Component {
   static propTypes = {
     isHover: PropTypes.bool,
     isLast: PropTypes.bool,
@@ -41,4 +41,4 @@ class SettingsBreadcrumbDivider extends React.Component {
   }
 }
 
-export default SettingsBreadcrumbDivider;
+export default Divider;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
new file mode 100644
index 0000000000..b5a6ac8346
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/index.jsx
@@ -0,0 +1,102 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import Crumb from './crumb';
+import Divider from './divider';
+import InlineSvg from '../../../../components/inlineSvg';
+import OrganizationCrumb from './organizationCrumb';
+import ProjectCrumb from './projectCrumb';
+import SentryTypes from '../../../../proptypes';
+import TeamCrumb from './teamCrumb';
+import TextLink from '../../../../components/textLink';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+const MENUS = {
+  Organization: OrganizationCrumb,
+  Project: ProjectCrumb,
+  Team: TeamCrumb,
+};
+
+class SettingsBreadcrumb extends React.Component {
+  static propTypes = {
+    routes: PropTypes.array,
+  };
+
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+  };
+
+  render() {
+    let {routes, params} = this.props;
+    let routesWithNames = routes.filter(({name}) => name);
+    let lastRouteIndex = routesWithNames.length - 1;
+    return (
+      <Breadcrumbs>
+        <LogoLink href="/">
+          <StyledInlineSvg src="icon-sentry" size="20px" />
+        </LogoLink>
+        {routesWithNames.map((route, i) => {
+          let isLast = i === lastRouteIndex;
+          let createMenu = MENUS[route.name];
+          let Menu = typeof createMenu === 'function' && createMenu;
+          let hasMenu = !!Menu;
+          let CrumbPicker = hasMenu
+            ? Menu
+            : () => (
+                <Crumb route={route} isLast={isLast}>
+                  <TextLink to={recreateRoute(route, {routes, params})}>
+                    {route.name}{' '}
+                  </TextLink>
+                  <Divider isLast={isLast} />
+                </Crumb>
+              );
+
+          return (
+            <CrumbPicker
+              key={`${route.name}:${route.path}`}
+              routes={routes}
+              params={params}
+              route={route}
+              isLast={isLast}
+            />
+          );
+        })}
+      </Breadcrumbs>
+    );
+  }
+}
+
+export default SettingsBreadcrumb;
+
+const Breadcrumbs = styled.div`
+  display: flex;
+  align-items: center;
+`;
+
+const StyledInlineSvg = styled(InlineSvg)`
+  display: block;
+`;
+
+const LogoLink = styled.a`
+  padding-right: 12px;
+  margin-right: 12px;
+  color: ${p => p.theme.gray4};
+  z-index: 1;
+  position: relative;
+
+  &:after {
+    display: block;
+    content: '';
+    position: absolute;
+    right: 0;
+    top: 2px;
+    bottom: 2px;
+    width: 1px;
+    background: ${p => p.theme.borderDark};
+  }
+
+  &:hover {
+    color: ${p => p.theme.gray5};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
new file mode 100644
index 0000000000..54833dedff
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/organizationCrumb.jsx
@@ -0,0 +1,68 @@
+import {Flex} from 'grid-emotion';
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import BreadcrumbDropdown from './breadcrumbDropdown';
+import LetterAvatar from '../../../../components/letterAvatar';
+import SentryTypes from '../../../../proptypes';
+import TextLink from '../../../../components/textLink';
+import recreateRoute from '../../../../utils/recreateRoute';
+import withLatestContext from '../../../../utils/withLatestContext';
+
+class OrganizationCrumb extends React.Component {
+  static propTypes = {
+    organizations: PropTypes.array,
+    organization: SentryTypes.Organization,
+    routes: PropTypes.array,
+    route: PropTypes.object,
+  };
+
+  render() {
+    let {organizations, organization, params, routes, route, ...props} = this.props;
+
+    let hasMenu = organizations.length > 1;
+
+    return (
+      <BreadcrumbDropdown
+        name={
+          <TextLink
+            to={recreateRoute(route, {
+              routes,
+              params: {...params, orgId: organization.slug},
+            })}
+          >
+            <Flex align="center">
+              <span style={{width: 18, height: 18, marginRight: 6}}>
+                <LetterAvatar
+                  style={{display: 'inline-block'}}
+                  displayName={organization.slug}
+                  identifier={organization.slug}
+                />
+              </span>
+              {organization.slug}
+            </Flex>
+          </TextLink>
+        }
+        onSelect={item => {
+          browserHistory.push(
+            recreateRoute(route, {
+              routes,
+              params: {...params, orgId: item.value},
+            })
+          );
+        }}
+        hasMenu={hasMenu}
+        route={route}
+        items={organizations.map(org => ({
+          value: org.slug,
+          label: org.slug,
+        }))}
+        {...props}
+      />
+    );
+  }
+}
+
+export {OrganizationCrumb};
+export default withLatestContext(OrganizationCrumb);
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
new file mode 100644
index 0000000000..646703abeb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/projectCrumb.jsx
@@ -0,0 +1,94 @@
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import BreadcrumbDropdown from './breadcrumbDropdown';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import SentryTypes from '../../../../proptypes';
+import TextLink from '../../../../components/textLink';
+import recreateRoute from '../../../../utils/recreateRoute';
+import replaceRouterParams from '../../../../utils/replaceRouterParams';
+import withLatestContext from '../../../../utils/withLatestContext';
+import withProjects from '../../../../utils/withProjects';
+
+const ProjectName = styled.div`
+  display: flex;
+
+  .loading {
+    width: 26px;
+    height: 24px;
+    margin: 0;
+  }
+`;
+
+class ProjectCrumb extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Projects,
+    projects: PropTypes.array,
+    routes: PropTypes.array,
+    route: PropTypes.object,
+  };
+
+  render() {
+    let {
+      organization: latestOrganization,
+      project: latestProject,
+      projects,
+      params,
+      routes,
+      route,
+      ...props
+    } = this.props;
+
+    if (!latestOrganization) return null;
+    if (!projects) return null;
+
+    let hasMenu = projects && projects.length > 1;
+
+    return (
+      <BreadcrumbDropdown
+        hasMenu={hasMenu}
+        route={route}
+        name={
+          <ProjectName>
+            {!latestProject ? (
+              <LoadingIndicator mini />
+            ) : (
+              <div>
+                <TextLink
+                  to={replaceRouterParams(
+                    '/settings/organization/:orgId/project/:projectId/',
+                    {
+                      orgId: latestOrganization.slug,
+                      projectId: latestProject.slug,
+                    }
+                  )}
+                >
+                  {latestProject.slug}
+                </TextLink>
+              </div>
+            )}
+          </ProjectName>
+        }
+        onSelect={item => {
+          browserHistory.push(
+            recreateRoute(route, {
+              routes,
+              params: {...params, projectId: item.value},
+            })
+          );
+        }}
+        items={projects.map(project => ({
+          value: project.slug,
+          label: project.slug,
+        }))}
+        {...props}
+      />
+    );
+  }
+}
+
+export {ProjectCrumb};
+export default withProjects(withLatestContext(ProjectCrumb));
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
new file mode 100644
index 0000000000..c6577d01bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsBreadcrumb/teamCrumb.jsx
@@ -0,0 +1,59 @@
+import {Flex} from 'grid-emotion';
+import {browserHistory} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import BreadcrumbDropdown from './breadcrumbDropdown';
+import TextLink from '../../../../components/textLink';
+import recreateRoute from '../../../../utils/recreateRoute';
+import withTeams from '../../../../utils/withTeams';
+
+class TeamCrumb extends React.Component {
+  static propTypes = {
+    teams: PropTypes.array,
+    routes: PropTypes.array,
+    route: PropTypes.object,
+  };
+
+  render() {
+    let {teams, params, routes, route, ...props} = this.props;
+
+    let team = teams.find(({slug}) => slug === params.teamId);
+    let hasMenu = teams.length > 1;
+
+    if (!team) return null;
+
+    return (
+      <BreadcrumbDropdown
+        name={
+          <TextLink
+            to={recreateRoute(route, {
+              routes,
+              params: {...params, teamId: team.slug},
+            })}
+          >
+            <Flex align="center">#{team.slug}</Flex>
+          </TextLink>
+        }
+        onSelect={item => {
+          browserHistory.push(
+            recreateRoute(route, {
+              routes,
+              params: {...params, teamId: item.value},
+            })
+          );
+        }}
+        hasMenu={hasMenu}
+        route={route}
+        items={teams.map(({slug}) => ({
+          value: slug,
+          label: slug,
+        }))}
+        {...props}
+      />
+    );
+  }
+}
+
+export {TeamCrumb};
+export default withTeams(TeamCrumb);
diff --git a/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
index 9d9d6d45d9..d7635e8248 100644
--- a/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
+++ b/src/sentry/static/sentry/app/views/settings/team/teamProjects.jsx
@@ -81,7 +81,7 @@ const TeamProjects = createReactClass({
         } else {
           team.projects = team.projects.filter(({id}) => id != project.id);
         }
-        TeamActions.updateSuccess(0, teamId, team);
+        TeamActions.updateSuccess(teamId, team);
         addSuccessMessage(
           action === 'add'
             ? t('Successfully added project to team.')
