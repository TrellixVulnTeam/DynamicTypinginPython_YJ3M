commit 85d7334b865eb920ad52729216df9cda4681e787
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Jul 20 08:02:10 2018 -0700

    feat(github-apps): Automatically refresh the access token (#8652)
    
    * feat(github-apps): Automatically refresh the access token

diff --git a/src/sentry/integrations/github/client.py b/src/sentry/integrations/github/client.py
index fa96f2d077..6d5eb59b20 100644
--- a/src/sentry/integrations/github/client.py
+++ b/src/sentry/integrations/github/client.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import
 
-import datetime
+from datetime import datetime
 
 from sentry.integrations.github.utils import get_jwt
 from sentry.integrations.client import ApiClient
@@ -11,6 +11,9 @@ class GitHubClientMixin(ApiClient):
 
     base_url = 'https://api.github.com'
 
+    def get_jwt(self):
+        return get_jwt()
+
     def get_last_commits(self, repo, end_sha):
         # return api request that fetches last ~30 commits
         # see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository
@@ -82,20 +85,37 @@ class GitHubClientMixin(ApiClient):
         return self._request(method, path, headers=headers, data=data, params=params)
 
     def get_token(self):
-        if not self.token or self.expires_at < datetime.datetime.utcnow():
+        """
+        Get token retrieves the active access token from the integration model.
+        Should the token have expried, a new token will be generated and
+        automatically presisted into the integration.
+        """
+        token = self.integration.metadata.get('access_token')
+        expires_at = self.integration.metadata.get('expires_at')
+
+        if expires_at is not None:
+            expires_at = datetime.strptime(expires_at, '%Y-%m-%dT%H:%M:%S')
+
+        if not token or expires_at < datetime.utcnow():
             res = self.create_token()
-            self.token = res['token']
-            self.expires_at = datetime.datetime.strptime(
+            token = res['token']
+            expires_at = datetime.strptime(
                 res['expires_at'],
                 '%Y-%m-%dT%H:%M:%SZ',
             )
 
-        return self.token
+            self.integration.metadata.update({
+                'access_token': token,
+                'expires_at': expires_at.isoformat(),
+            })
+            self.integration.save()
+
+        return token
 
     def create_token(self):
         return self.post(
             '/installations/{}/access_tokens'.format(
-                self.installation_id,
+                self.integration.external_id,
             ),
             headers={
                 'Authorization': 'Bearer %s' % self.get_jwt(),
@@ -104,14 +124,9 @@ class GitHubClientMixin(ApiClient):
             },
         )
 
-    def get_jwt(self):
-        return get_jwt()
-
 
 class GitHubAppsClient(GitHubClientMixin):
 
-    def __init__(self, installation_id):
-        self.installation_id = installation_id
-        self.token = None
-        self.expires_at = None
+    def __init__(self, integration):
+        self.integration = integration
         super(GitHubAppsClient, self).__init__()
diff --git a/src/sentry/integrations/github/integration.py b/src/sentry/integrations/github/integration.py
index 73038abe86..21331a5a4a 100644
--- a/src/sentry/integrations/github/integration.py
+++ b/src/sentry/integrations/github/integration.py
@@ -57,7 +57,7 @@ API_ERRORS = {
 class GitHubIntegration(Integration, GitHubIssueBasic, RepositoryMixin):
 
     def get_client(self):
-        return GitHubAppsClient(installation_id=self.model.external_id)
+        return GitHubAppsClient(integration=self.model)
 
     def get_repositories(self):
         return self.get_client().get_repositories()
diff --git a/src/sentry/integrations/github/webhook.py b/src/sentry/integrations/github/webhook.py
index 9d195b2a13..c7253ddc90 100644
--- a/src/sentry/integrations/github/webhook.py
+++ b/src/sentry/integrations/github/webhook.py
@@ -25,7 +25,6 @@ from sentry.utils import json
 
 from sentry.integrations.exceptions import ApiError
 from .repository import GitHubRepositoryProvider
-from .client import GitHubAppsClient
 
 logger = logging.getLogger('sentry.webhooks')
 
@@ -33,7 +32,7 @@ logger = logging.getLogger('sentry.webhooks')
 class Webhook(object):
     provider = 'github'
 
-    def _handle(self, event, organization, repo):
+    def _handle(self, integration, event, organization, repo):
         raise NotImplementedError
 
     def __call__(self, event, host=None):
@@ -65,7 +64,7 @@ class Webhook(object):
                     repo.config['name'] = event['repository']['full_name']
                     repo.save()
 
-                self._handle(event, orgs[repo.organization_id], repo, host)
+                self._handle(integration, event, orgs[repo.organization_id], repo)
 
 
 class InstallationEventWebhook(Webhook):
@@ -96,7 +95,7 @@ class InstallationEventWebhook(Webhook):
 
 class InstallationRepositoryEventWebhook(Webhook):
     # https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent
-    def _handle(self, event, organization, repo, host=None):
+    def _handle(self, integration, event, organization, repo):
         pass
 
 
@@ -109,20 +108,15 @@ class PushEventWebhook(Webhook):
     def get_external_id(self, username):
         return 'github:%s' % username
 
-    def get_idp_external_id(self, host=None):
+    def get_idp_external_id(self, integration, host=None):
         return options.get('github-app.id')
 
-    def get_client(self, event, host=None):
-        return GitHubAppsClient(event['installation']['id'])
-
     def should_ignore_commit(self, commit):
         return GitHubRepositoryProvider.should_ignore_commit(commit['message'])
 
-    def _handle(self, event, organization, repo, host=None):
+    def _handle(self, integration, event, organization, repo, host=None):
         authors = {}
-        client = self.get_client(event, host)
-        if client is None:
-            return HttpResponse(status=400)
+        client = integration.get_installation(organization_id=organization.id).get_client()
         gh_username_cache = {}
 
         for commit in event['commits']:
@@ -170,7 +164,7 @@ class PushEventWebhook(Webhook):
                                 gh_username_cache[gh_username] = None
                                 try:
                                     identity = Identity.objects.get(
-                                        external_id=gh_user['id'], idp__type=self.provider, idp__external_id=self.get_idp_external_id(host))
+                                        external_id=gh_user['id'], idp__type=self.provider, idp__external_id=self.get_idp_external_id(integration, host))
                                 except Identity.DoesNotExist:
                                     pass
                                 else:
@@ -268,10 +262,10 @@ class PullRequestEventWebhook(Webhook):
     def get_external_id(self, username):
         return 'github:%s' % username
 
-    def get_idp_external_id(self, host=None):
+    def get_idp_external_id(self, integration, host=None):
         return options.get('github-app.id')
 
-    def _handle(self, event, organization, repo, host=None):
+    def _handle(self, integration, event, organization, repo, host=None):
         pull_request = event['pull_request']
         number = pull_request['number']
         title = pull_request['title']
@@ -295,7 +289,7 @@ class PullRequestEventWebhook(Webhook):
         except CommitAuthor.DoesNotExist:
             try:
                 identity = Identity.objects.get(
-                    external_id=user['id'], idp__type=self.provider, idp__external_id=self.get_idp_external_id(host))
+                    external_id=user['id'], idp__type=self.provider, idp__external_id=self.get_idp_external_id(integration, host))
             except Identity.DoesNotExist:
                 pass
             else:
diff --git a/src/sentry/integrations/github_enterprise/client.py b/src/sentry/integrations/github_enterprise/client.py
index c6bff261ad..7738eba098 100644
--- a/src/sentry/integrations/github_enterprise/client.py
+++ b/src/sentry/integrations/github_enterprise/client.py
@@ -8,15 +8,25 @@ from sentry.integrations.github.client import GitHubClientMixin
 class GitHubEnterpriseAppsClient(GitHubClientMixin):
     base_url = None
 
-    def __init__(self, base_url, app_id, installation_id, private_key):
+    def __init__(self, base_url, integration, app_id, private_key):
         self.base_url = "https://{}/api/v3".format(base_url)
-        self.installation_id = installation_id
+        self.integration = integration
         self.app_id = app_id
         self.private_key = private_key
-        self.token = None
-        self.expires_at = None
         # verify_ssl=false is for testing purposes and should be removed before release
         super(GitHubEnterpriseAppsClient, self).__init__(verify_ssl=False)
 
     def get_jwt(self):
         return get_jwt(github_id=self.app_id, github_private_key=self.private_key)
+
+    def create_token(self):
+        return self.post(
+            '/installations/{}/access_tokens'.format(
+                self.integration.metadata['installation_id'],
+            ),
+            headers={
+                'Authorization': 'Bearer %s' % self.get_jwt(),
+                # TODO(jess): remove this whenever it's out of preview
+                'Accept': 'application/vnd.github.machine-man-preview+json',
+            },
+        )
diff --git a/src/sentry/integrations/github_enterprise/integration.py b/src/sentry/integrations/github_enterprise/integration.py
index 7f7b4c6cd4..c007990d48 100644
--- a/src/sentry/integrations/github_enterprise/integration.py
+++ b/src/sentry/integrations/github_enterprise/integration.py
@@ -50,7 +50,7 @@ class GitHubEnterpriseIntegration(Integration, GitHubIssueBasic, RepositoryMixin
         base_url = urlparse(self.model.metadata['domain_name']).netloc
         return GitHubEnterpriseAppsClient(
             base_url=base_url,
-            installation_id=self.model.metadata['installation_id'],
+            integration=self.model,
             private_key=self.model.metadata['installation']['private_key'],
             app_id=self.model.metadata['installation']['id'],
         )
diff --git a/src/sentry/integrations/github_enterprise/webhook.py b/src/sentry/integrations/github_enterprise/webhook.py
index 6585e698a7..ca32b4b599 100644
--- a/src/sentry/integrations/github_enterprise/webhook.py
+++ b/src/sentry/integrations/github_enterprise/webhook.py
@@ -16,7 +16,6 @@ from sentry.models import Integration
 from sentry.utils import json
 from sentry.integrations.github.webhook import InstallationEventWebhook, InstallationRepositoryEventWebhook, PushEventWebhook, PullRequestEventWebhook
 from .repository import GitHubEnterpriseRepositoryProvider
-from .client import GitHubEnterpriseAppsClient
 
 logger = logging.getLogger('sentry.webhooks')
 
@@ -55,21 +54,8 @@ class GitHubEnterprisePushEventWebhook(PushEventWebhook):
     def get_external_id(self, username):
         return 'github_enterprise:%s' % username
 
-    def get_idp_external_id(self, host):
-        # Todo(meredith): when we have integration will return
-        # host + integration.metadata['installation']['id']
-        return
-
-    def get_client(self, event, host):
-        metadata = get_installation_metadata(event, host)
-        if metadata is None:
-            return None
-
-        return GitHubEnterpriseAppsClient(
-            metadata['url'],
-            metadata['id'],
-            event['installation']['id'],
-            metadata['private_key'])
+    def get_idp_external_id(self, integration, host):
+        return '{}:{}'.format(host, integration.metadata['installation']['id'])
 
     def should_ignore_commit(self, commit):
         return GitHubEnterpriseRepositoryProvider.should_ignore_commit(commit['message'])
@@ -85,10 +71,8 @@ class GitHubEnterprisePullRequestEventWebhook(PullRequestEventWebhook):
     def get_external_id(self, username):
         return 'github_enterprise:%s' % username
 
-    def get_idp_external_id(self, host):
-        # Todo(meredith): when we have integration will return
-        # host + integration.metadata['installation']['id']
-        return
+    def get_idp_external_id(self, integration, host):
+        return '{}:{}'.format(host, integration.metadata['installation']['id'])
 
 
 class GitHubEnterpriseWebhookBase(View):
diff --git a/tests/sentry/integrations/github/test_client.py b/tests/sentry/integrations/github/test_client.py
new file mode 100644
index 0000000000..a539c7728e
--- /dev/null
+++ b/tests/sentry/integrations/github/test_client.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+import responses
+import mock
+
+from sentry.testutils import TestCase
+from sentry.models import Integration
+
+
+class GitHubAppsClientTest(TestCase):
+
+    @mock.patch('sentry.integrations.github.client.get_jwt', return_value='jwt_token_1')
+    @responses.activate
+    def test_save_token(self, get_jwt):
+
+        integration = Integration.objects.create(
+            provider='github',
+            name='Github Test Org',
+            external_id='1',
+            metadata={
+                'access_token': None,
+                'expires_at': None,
+            }
+        )
+
+        install = integration.get_installation(organization_id='123')
+        client = install.get_client()
+
+        responses.add(
+            method=responses.POST,
+            url='https://api.github.com/installations/1/access_tokens',
+            body='{"token": "12345token", "expires_at": "2030-01-01T00:00:00Z"}',
+            status=200,
+            content_type='application/json',
+        )
+
+        token = client.get_token()
+        assert token == '12345token'
+        assert len(responses.calls) == 1
+
+        # Second get_token doesn't have to make an API call
+        token = client.get_token()
+        assert token == '12345token'
+        assert len(responses.calls) == 1
diff --git a/tests/sentry/integrations/github/test_webhooks.py b/tests/sentry/integrations/github/test_webhooks.py
index 905e5937e4..0b0da5a15c 100644
--- a/tests/sentry/integrations/github/test_webhooks.py
+++ b/tests/sentry/integrations/github/test_webhooks.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 
 import six
 
-from datetime import datetime
+from datetime import datetime, timedelta
 from django.utils import timezone
 from sentry.models import (
     Commit,
@@ -92,9 +92,12 @@ class PushEventWebhookTest(APITestCase):
             provider='integrations:github',
             name='baxterthehacker/public-repo',
         )
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             external_id="12345",
             provider='github',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
@@ -144,10 +147,12 @@ class PushEventWebhookTest(APITestCase):
 
         options.set('github-app.webhook-secret', secret)
 
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             provider='github',
             external_id='12345',
             name='octocat',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
@@ -218,9 +223,12 @@ class PushEventWebhookTest(APITestCase):
             provider='integrations:github',
             name='baxterthehacker/public-repo',
         )
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             external_id="12345",
             provider='github',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
@@ -233,9 +241,12 @@ class PushEventWebhookTest(APITestCase):
             provider='integrations:github',
             name='another/repo',
         )
+
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             external_id="99",
             provider='github',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(org2.id)
 
@@ -275,10 +286,12 @@ class PullRequestEventWebhook(APITestCase):
         secret = 'b3002c3e321d4b7880360d397db2ccfd'
         options.set('github-app.webhook-secret', secret)
 
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             provider='github',
             external_id='12345',
             name='octocat',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
@@ -323,10 +336,12 @@ class PullRequestEventWebhook(APITestCase):
 
         options.set('github-app.webhook-secret', secret)
 
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             provider='github',
             external_id='12345',
             name='octocat',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
@@ -370,10 +385,12 @@ class PullRequestEventWebhook(APITestCase):
 
         options.set('github-app.webhook-secret', secret)
 
+        future_expires = datetime.now().replace(microsecond=0) + timedelta(minutes=5)
         integration = Integration.objects.create(
             provider='github',
             external_id='12345',
             name='octocat',
+            metadata={'access_token': '1234', 'expires_at': future_expires.isoformat()}
         )
         integration.add_organization(project.organization.id)
 
diff --git a/tests/sentry/integrations/github_enterprise/test_webhooks.py b/tests/sentry/integrations/github_enterprise/test_webhooks.py
index 0846a5ed7e..8c34e1f34e 100644
--- a/tests/sentry/integrations/github_enterprise/test_webhooks.py
+++ b/tests/sentry/integrations/github_enterprise/test_webhooks.py
@@ -92,6 +92,14 @@ class PushEventWebhookTest(APITestCase):
         integration = Integration.objects.create(
             external_id="35.232.149.196:12345",
             provider='github_enterprise',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation_id': '12345',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
@@ -150,6 +158,13 @@ class PushEventWebhookTest(APITestCase):
             provider='github_enterprise',
             external_id='35.232.149.196:12345',
             name='octocat',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
@@ -229,6 +244,14 @@ class PushEventWebhookTest(APITestCase):
         integration = Integration.objects.create(
             external_id="35.232.149.196:12345",
             provider='github_enterprise',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation_id': '12345',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
@@ -244,6 +267,14 @@ class PushEventWebhookTest(APITestCase):
         integration = Integration.objects.create(
             external_id="35.232.149.196:99",
             provider='github_enterprise',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation': {
+                    'installation_id': '99',
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(org2.id)
 
@@ -293,6 +324,13 @@ class PullRequestEventWebhook(APITestCase):
             provider='github_enterprise',
             external_id='35.232.149.196:234',
             name='octocat',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
@@ -346,6 +384,13 @@ class PullRequestEventWebhook(APITestCase):
             provider='github_enterprise',
             external_id='35.232.149.196:234',
             name='octocat',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
@@ -398,6 +443,13 @@ class PullRequestEventWebhook(APITestCase):
             provider='github_enterprise',
             external_id='35.232.149.196:234',
             name='octocat',
+            metadata={
+                'domain_name': 'https://35.232.149.196',
+                'installation': {
+                    'id': '2',
+                    'private_key': 'private_key',
+                }
+            }
         )
         integration.add_organization(project.organization.id)
 
