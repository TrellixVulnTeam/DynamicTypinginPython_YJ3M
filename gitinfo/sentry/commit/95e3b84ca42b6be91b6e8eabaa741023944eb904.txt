commit 95e3b84ca42b6be91b6e8eabaa741023944eb904
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Nov 29 17:27:43 2010 -0800

    Update docs to reflect better logging checks (fixes GH-38)

diff --git a/docs/config.rst b/docs/config.rst
index 1f9a2b972d..b0bba0b54b 100644
--- a/docs/config.rst
+++ b/docs/config.rst
@@ -44,12 +44,15 @@ django-sentry supports the ability to directly tie into the ``logging`` module.
 	import logging
 	from sentry.client.handlers import SentryHandler
 	
-	logging.getLogger().addHandler(SentryHandler())
-
-	# Add StreamHandler to sentry's default so you can catch missed exceptions
-	logger = logging.getLogger('sentry.errors')
-	logger.propagate = False
-	logger.addHandler(logging.StreamHandler())
+	logger = logging.getLogger()
+	# ensure we havent already registered the handler
+	if SentryHandler not in map(lambda x: x.__class__, logger.handlers):
+	    logger.addHandler(SentryHandler())
+	
+	    # Add StreamHandler to sentry's default so you can catch missed exceptions
+	    logger = logging.getLogger('sentry.errors')
+	    logger.propagate = False
+	    logger.addHandler(logging.StreamHandler())
 
 You can also use the ``exc_info`` and ``extra=dict(url=foo)`` arguments on your ``log`` methods. This will store the appropriate information and allow django-sentry to render it based on that information::
 
