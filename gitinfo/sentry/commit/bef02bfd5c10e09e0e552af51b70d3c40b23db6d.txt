commit bef02bfd5c10e09e0e552af51b70d3c40b23db6d
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 2 21:57:52 2013 -0700

    Add alert notifications (email)

diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index e1e52cea9b..46d3d53fc6 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -98,6 +98,9 @@ class MailProcessor(NotificationPlugin):
             fail_silently=False,
         )
 
+    def get_notification_settings_url(self):
+        return absolute_uri(reverse('sentry-account-settings-notifications'))
+
     def get_send_to(self, project=None):
         """
         Returns a list of email addresses for the users that should be notified of alerts.
@@ -137,6 +140,45 @@ class MailProcessor(NotificationPlugin):
 
         return send_to_list
 
+    def on_alert(self, alert):
+        project = alert.project
+        member_set = self.get_sendable_users(project)
+        if not member_set:
+            return
+
+        subject = '[{}] ALERT: {}'.format(
+            project.name.encode('utf-8'),
+            alert.message.encode('utf-8'),
+        )
+        body = self.get_alert_plaintext_body(alert)
+        html_body = self.get_alert_html_body(alert)
+
+        headers = {
+            'X-Sentry-Project': project.name,
+        }
+
+        self._send_mail(
+            subject=subject,
+            body=body,
+            html_body=html_body,
+            project=project,
+            fail_silently=False,
+            headers=headers,
+        )
+
+    def get_alert_plaintext_body(self, alert):
+        return render_to_string('sentry/emails/alert.txt', {
+            'alert': alert,
+            'link': alert.get_absolute_url(),
+        })
+
+    def get_alert_html_body(self, alert):
+        return UnicodeSafePynliner().from_string(render_to_string('sentry/emails/alert.html', {
+            'alert': alert,
+            'link': alert.get_absolute_url(),
+            'settings_link': self.get_notification_settings_url(),
+        })).run()
+
     def notify_users(self, group, event, fail_silently=False):
         project = group.project
 
@@ -188,8 +230,7 @@ class MailProcessor(NotificationPlugin):
             'event': event,
             'link': link,
             'interfaces': interface_list,
-            'settings_link': '%s%s' % (settings.URL_PREFIX,
-                reverse('sentry-account-settings-notifications')),
+            'settings_link': self.get_notification_settings_url(),
         })).run()
 
     def get_option(self, key, *args, **kwargs):
diff --git a/src/sentry/templates/sentry/emails/alert.html b/src/sentry/templates/sentry/emails/alert.html
new file mode 100644
index 0000000000..a541c3fb62
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/alert.html
@@ -0,0 +1,30 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block header %}
+    <h1>Sentry <small>New Alert</small></h1>
+{% endblock %}
+
+{% block inner %}
+    <pre>{{ alert.message }}</pre>
+
+    <p><a href="{{ link }}">{{ link }}</a></p>
+
+    <table class="metadata">
+        <colgroup>
+            <col style="width:25%;">
+            <col style="width:25%;">
+            <col style="width:25%;">
+            <col style="width:25%;">
+        </colgroup>
+        <tr>
+            <th>{% trans "Datetime:" %}</th>
+            <td>{{ alert.datetime }}</td>
+            <th>{% trans "Project:" %}</th>
+            <td>{{ alert.project.name }}</td>
+        </tr>
+    </table>
+
+    <p><a href="{{ settings_link }}">Notification Settings</a></p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/alert.txt b/src/sentry/templates/sentry/emails/alert.txt
new file mode 100644
index 0000000000..1172eb2fc5
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/alert.txt
@@ -0,0 +1,15 @@
+{% spaceless %}
+{% autoescape off %}
+A new alert has been reported in Sentry:
+
+    {{ alert.message }}
+
+Details
+-------
+
+{{ link }}
+
+Date: {{ alert.datetime }}
+Project: {{ alert.project.name }}
+{% endautoescape %}
+{% endspaceless %}
\ No newline at end of file
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 9630231beb..15eeac8685 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -6,25 +6,20 @@ import mock
 from mock import Mock
 from django.utils import timezone
 from sentry.interfaces import Stacktrace
-from sentry.models import Event, Group, Project, Team
+from sentry.models import Alert, Event, Group, Project
 from sentry.plugins.sentry_mail.models import MailProcessor
 from sentry.testutils import TestCase, fixture
 
 
 class MailProcessorTest(TestCase):
     @fixture
-    def team(self):
-        return Team(id=1, slug='foo', name='Team Name')
-
-    @fixture
-    def project(self):
-        return Project(id=1, name='Project Name', slug='foo', team=self.team)
+    def plugin(self):
+        return MailProcessor()
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=[]))
     def test_should_notify_no_send_to(self):
-        p = MailProcessor()
-        self.assertFalse(p.should_notify(group=Mock(), event=Mock()))
+        assert not self.plugin.should_notify(group=Mock(), event=Mock())
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
@@ -175,7 +170,7 @@ class MailProcessorTest(TestCase):
         args, kwargs = _send_mail.call_args
         self.assertEquals(kwargs.get('fail_silently'), False)
         self.assertEquals(kwargs.get('project'), self.project)
-        self.assertEquals(kwargs.get('subject'), u"[Project Name] ERROR: hello world")
+        assert kwargs.get('subject') == u"[{}] ERROR: hello world".format(self.project.name)
 
     @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
     def test_multiline_error(self, _send_mail):
@@ -200,7 +195,7 @@ class MailProcessorTest(TestCase):
 
         _send_mail.assert_called_once()
         args, kwargs = _send_mail.call_args
-        self.assertEquals(kwargs.get('subject'), u"[Project Name] ERROR: hello world")
+        assert kwargs.get('subject') == u"[{}] ERROR: hello world".format(self.project.name)
 
     @mock.patch('sentry.utils.cache.cache.get', mock.Mock(return_value=None))
     @mock.patch('sentry.models.ProjectOption.objects.get_value')
@@ -238,14 +233,13 @@ class MailProcessorTest(TestCase):
         user = User.objects.create(username='foo', email='foo@example.com')
         user2 = User.objects.create(username='baz', email='baz@example.com')
 
-        p = MailProcessor()
+        assert (sorted(self.plugin.get_emails_for_users([user.pk, user2.pk])) ==
+                sorted([user.email, user2.email]))
 
-        self.assertEquals(sorted(p.get_emails_for_users([user.pk, user2.pk])),
-                          sorted([user.email, user2.email]))
         UserOption.objects.create(key='alert_email', value='foobaz@example.com', user=user2)
 
-        self.assertEquals(sorted(p.get_emails_for_users([user.pk, user2.pk])),
-                          sorted([user.email, 'foobaz@example.com']))
+        assert (sorted(self.plugin.get_emails_for_users([user.pk, user2.pk])) ==
+                sorted([user.email, 'foobaz@example.com']))
 
     def test_get_sendable_users(self):
         from django.contrib.auth.models import User
@@ -259,13 +253,22 @@ class MailProcessorTest(TestCase):
         project.team.member_set.get_or_create(user=user2)
         project.team.member_set.get_or_create(user=user3)
 
-        p = MailProcessor()
-
         # all members
-        self.assertEqual(sorted(set([user.pk, user2.pk])),
-                         sorted(p.get_sendable_users(project)))
+        assert (sorted(set([user.pk, user2.pk])) ==
+                sorted(self.plugin.get_sendable_users(project)))
 
         # disabled user2
         UserOption.objects.create(key='mail:alert', value=0, project=project, user=user2)
-        self.assertEqual(sorted(set([user.pk])),
-                         sorted(p.get_sendable_users(project)))
+
+        assert sorted(set([user.pk])) == sorted(self.plugin.get_sendable_users(project))
+
+    @mock.patch('sentry.plugins.sentry_mail.models.MailProcessor._send_mail')
+    def test_on_alert(self, _send_mail):
+        alert = Alert.objects.create(message='This is a test alert', project=self.project)
+
+        self.plugin.on_alert(alert=alert)
+
+        _send_mail.assert_called_once()
+        args, kwargs = _send_mail.call_args
+        assert kwargs.get('subject') == u"[{}] ALERT: {}".format(
+            self.project.name, alert.message)
