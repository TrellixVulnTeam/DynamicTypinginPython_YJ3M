commit 5b76efe4a194eede558812f6dae499861fa25255
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Wed Nov 14 13:54:29 2018 -0800

    feat(api): Add OrganizationTagKeyValuesEndpoint

diff --git a/src/sentry/api/endpoints/organization_tagkey_values.py b/src/sentry/api/endpoints/organization_tagkey_values.py
new file mode 100644
index 0000000000..0d6e1a9e7e
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_tagkey_values.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+from functools32 import partial
+
+from rest_framework.response import Response
+
+from sentry.api.bases import OrganizationEventsEndpointBase, OrganizationEventsError
+from sentry.api.event_search import get_snuba_query_args, InvalidSearchQuery
+from sentry.api.paginator import GenericOffsetPaginator
+from sentry.utils.snuba import raw_query
+from sentry.tagstore.base import TAG_KEY_RE
+
+
+class OrganizationTagKeyValuesEndpoint(OrganizationEventsEndpointBase):
+
+    def get(self, request, organization, key):
+        if not TAG_KEY_RE.match(key):
+            return Response({'detail': 'Invalid tag key format for "%s"' % (key,)}, status=400)
+
+        try:
+            filter_params = self.get_filter_params(request, organization)
+        except OrganizationEventsError as exc:
+            return Response({'detail': exc.message}, status=400)
+
+        query = 'tags_key:%s' % (key,)
+
+        try:
+            snuba_args = get_snuba_query_args(query, params=filter_params)
+        except InvalidSearchQuery as exc:
+            return Response({'detail': exc.message}, status=400)
+
+        data_fn = partial(
+            # extract 'data' from raw_query result
+            lambda *args, **kwargs: raw_query(*args, **kwargs)['data'],
+            aggregations=[
+                ('count()', '', 'count'),
+            ],
+            orderby='-count',
+            groupby=['tags_value'],
+            referrer='api.organization-tags',
+            **snuba_args
+        )
+
+        return self.paginate(
+            request=request,
+            on_results=lambda results: [{
+                'value': row['tags_value'],
+                'count': row['count'],
+            } for row in results],
+            paginator=GenericOffsetPaginator(data_fn=data_fn),
+        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index ca87b8a96b..3dfee06f27 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -93,6 +93,7 @@ from .endpoints.organization_config_repositories import OrganizationConfigReposi
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
 from .endpoints.organization_sentry_apps import OrganizationSentryAppsEndpoint
+from .endpoints.organization_tagkey_values import OrganizationTagKeyValuesEndpoint
 from .endpoints.sentry_app_installations import SentryAppInstallationsEndpoint
 from .endpoints.sentry_app_installation_details import SentryAppInstallationDetailsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
@@ -646,6 +647,11 @@ urlpatterns = patterns(
         OrganizationTeamsEndpoint.as_view(),
         name='sentry-api-0-organization-teams'
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/tags/(?P<key>[^/]+)/values/$',
+        OrganizationTagKeyValuesEndpoint.as_view(),
+        name='sentry-api-0-organization-tagkey-values'
+    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/onboarding-tasks/$',
         OrganizationOnboardingTaskEndpoint.as_view(),
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
new file mode 100644
index 0000000000..ef2c6d01b1
--- /dev/null
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+from datetime import timedelta
+from django.utils import timezone
+from django.core.urlresolvers import reverse
+
+from sentry.testutils import APITestCase, SnubaTestCase
+
+
+class OrganizationTagKeyValuesTest(APITestCase, SnubaTestCase):
+    def setUp(self):
+        super(OrganizationTagKeyValuesTest, self).setUp()
+        self.min_ago = timezone.now() - timedelta(minutes=1)
+
+    def test_simple(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+
+        self.create_event(
+            'a' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'apple'}
+        )
+        self.create_event(
+            'b' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+        )
+        self.create_event(
+            'c' * 32, group=group, datetime=self.min_ago, tags={'some_tag': 'some_value'}
+        )
+        self.create_event(
+            'd' * 32, group=group, datetime=self.min_ago, tags={'fruit': 'orange'}
+        )
+
+        url = reverse(
+            'sentry-api-0-organization-tagkey-values',
+            kwargs={
+                'organization_slug': org.slug,
+                'key': 'fruit',
+            }
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200, response.content
+        assert response.data == [{'count': 2, 'value': 'orange'}, {'count': 1, 'value': 'apple'}]
+
+    def test_bad_key(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        url = reverse(
+            'sentry-api-0-organization-tagkey-values',
+            kwargs={
+                'organization_slug': org.slug,
+                'key': 'fr uit',
+            }
+        )
+
+        response = self.client.get(url, format='json')
+        assert response.status_code == 400, response.content
+        assert response.data == {'detail': 'Invalid tag key format for "fr uit"'}
