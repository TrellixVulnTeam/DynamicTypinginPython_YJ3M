commit 939ce1c02fad7ae74bed0d1fdf61a4ee00bfbd96
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Dec 12 11:16:12 2016 +0100

    Change in_app and store logic for raw stackframes

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 2713ac455e..595e330cd9 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -60,6 +60,7 @@ class SingleException(Interface):
                 data['raw_stacktrace'],
                 has_system_frames=has_system_frames,
                 slim_frames=slim_frames,
+                raw=True
             )
         else:
             raw_stacktrace = None
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 9fb7c798ed..93d9b999be 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -624,7 +624,8 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, has_system_frames=None, slim_frames=True):
+    def to_python(cls, data, has_system_frames=None, slim_frames=True,
+                  raw=False):
         if not data.get('frames'):
             raise InterfaceValidationError("No 'frames' present")
 
@@ -640,11 +641,12 @@ class Stacktrace(Interface):
             for f in data['frames']
         ]
 
-        for frame in frame_list:
-            if not has_system_frames:
-                frame.in_app = False
-            elif frame.in_app is None:
-                frame.in_app = False
+        if not raw:
+            for frame in frame_list:
+                if not has_system_frames:
+                    frame.in_app = False
+                elif frame.in_app is None:
+                    frame.in_app = False
 
         kwargs = {
             'frames': frame_list,
diff --git a/src/sentry/interfaces/threads.py b/src/sentry/interfaces/threads.py
index 77bfc61752..1083d1d433 100644
--- a/src/sentry/interfaces/threads.py
+++ b/src/sentry/interfaces/threads.py
@@ -7,12 +7,12 @@ from sentry.utils.safe import trim
 __all__ = ('Threads',)
 
 
-def get_stacktrace(value):
+def get_stacktrace(value, raw=False):
     # Special case: if the thread has no frames we set the
     # stacktrace to none.  Otherwise this will fail really
     # badly.
     if value and value.get('frames'):
-        return Stacktrace.to_python(value, slim_frames=True)
+        return Stacktrace.to_python(value, slim_frames=True, raw=raw)
 
 
 class Threads(Interface):
@@ -25,7 +25,8 @@ class Threads(Interface):
         for thread in data.get('values') or ():
             threads.append({
                 'stacktrace': get_stacktrace(thread.get('stacktrace')),
-                'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace')),
+                'raw_stacktrace': get_stacktrace(thread.get('raw_stacktrace'),
+                                                 raw=True),
                 'id': trim(thread.get('id'), 40),
                 'crashed': bool(thread.get('crashed')),
                 'current': bool(thread.get('current')),
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 4b8259bb6a..c179966b4b 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -13,7 +13,7 @@ from symsynd.demangle import demangle_symbol
 from sentry.models import Project, EventError
 from sentry.plugins import Plugin2
 from sentry.lang.native.symbolizer import Symbolizer, SymbolicationFailed
-from sentry.lang.native.utils import find_all_stacktraces, \
+from sentry.lang.native.utils import find_all_stacktraces, update_stacktrace, \
     find_apple_crash_report_referenced_images, get_sdk_from_event, \
     find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
     APPLE_SDK_MAPPING
@@ -74,6 +74,7 @@ def append_error(data, err):
 
 
 def process_posix_signal(data):
+    # XXX: kill me
     signal = data.get('signal', -1)
     signal_name = data.get('name')
     if signal_name is None:
@@ -87,6 +88,7 @@ def process_posix_signal(data):
 
 
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
+    # XXX: kill me
     rv = {}
     error = error or {}
 
@@ -137,6 +139,7 @@ def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
 
 
 def is_in_app(frame, app_uuid=None):
+    # XXX: kill me
     if app_uuid is not None:
         frame_uuid = frame.get('uuid')
         if frame_uuid == app_uuid:
@@ -151,6 +154,7 @@ def is_in_app(frame, app_uuid=None):
 
 
 def convert_stacktrace(frames, system=None, notable_addresses=None):
+    # XXX: kill me
     app_uuid = None
     if system:
         app_uuid = system.get('app_uuid')
@@ -363,30 +367,23 @@ def resolve_frame_symbols(data):
     idx = -1
 
     def report_error(exc_type, exc_value, tb):
-        if exc_value.is_user_fixable or exc_value.is_sdk_failure:
+        e = exc_value
+        if e.is_user_fixable or e.is_sdk_failure:
             errors.append({
                 'type': EventError.NATIVE_INTERNAL_FAILURE,
                 'frame': frame,
-                'error': u'frame #%d: %s' % (idx, exc_value)
+                'error': u'frame #%d: %s' % (idx, e)
+            })
+            record_processing_issue(data, 'native', 'dsym:%s' % e.image_uuid, data={
+                'image_uuid': e.image_uuid,
+                'image_path': e.image_path,
+                'type': e.type,
+                'message': e.message,
             })
         if not exc_value.is_user_fixable:
             logger.debug('Failed to symbolicate',
                          exc_info=(exc_type, exc_value, tb))
 
-    def record_broken_symbolication(frame):
-        release = data.get('release')
-        if not release:
-            return
-        img = sym.get_app_image_for_frame(frame)
-        if img is None:
-            return
-        record_processing_issue(data, 'native', 'dsym:%s' % e.image_uuid, data={
-            'image_uuid': e.image_uuid,
-            'image_path': e.image_path,
-            'type': e.type,
-            'message': e.message,
-        })
-
     with sym:
         for stacktrace, container in stacktraces:
             store_raw = False
@@ -454,14 +451,8 @@ def resolve_frame_symbols(data):
                         'error': 'The symbolicator encountered an internal failure',
                     })
 
-            # Remember the raw stacktrace.
-            if store_raw and container is not None:
-                container['raw_stacktrace'] = {
-                    'frames': stacktrace['frames'],
-                }
-
-            # Put the new frames in
-            stacktrace['frames'] = new_frames
+            update_stacktrace(stacktrace, new_frames, container=container,
+                              store_raw=store_raw)
 
     if errors:
         data.setdefault('errors', []).extend(errors)
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 07eeff5ca7..e58081cdec 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -39,10 +39,12 @@ class SymbolicationFailed(Exception):
         self.type = type
         if image is not None:
             self.image_uuid = image['uuid']
+            self.image_path = image['path']
             self.image_name = image['name'].rsplit('/', 1)[-1]
         else:
             self.image_uuid = None
             self.image_name = None
+            self.image_path = None
 
     @property
     def is_user_fixable(self):
diff --git a/src/sentry/lang/native/utils.py b/src/sentry/lang/native/utils.py
index 4ae017fe93..ff2fe3f27d 100644
--- a/src/sentry/lang/native/utils.py
+++ b/src/sentry/lang/native/utils.py
@@ -57,17 +57,26 @@ def find_stacktrace_referenced_images(debug_images, stacktraces):
 
 def find_all_stacktraces(data):
     """Given a data dictionary from an event this returns all
-    relevant stacktraces in a list.
+    relevant stacktraces in a list.  If a frame contains a raw_stacktrace
+    property it's preferred over the processed one.
     """
     rv = []
 
+    def _probe_for_stacktrace(container):
+        raw = container.get('raw_stacktrace')
+        if raw is not None:
+            rv.append((raw, container))
+        else:
+            processed = container.get('stacktrace')
+            if processed is not None:
+                rv.append((processed, container))
+
     exc_container = data.get('sentry.interfaces.Exception')
     if exc_container:
         for exc in exc_container['values']:
-            stacktrace = exc.get('stacktrace')
-            if stacktrace:
-                rv.append((stacktrace, exc))
+            _probe_for_stacktrace(exc)
 
+    # The legacy stacktrace interface does not support raw stacktraces
     stacktrace = data.get('sentry.interfaces.Stacktrace')
     if stacktrace:
         rv.append((stacktrace, None))
@@ -75,13 +84,38 @@ def find_all_stacktraces(data):
     threads = data.get('threads')
     if threads:
         for thread in threads['values']:
-            stacktrace = thread.get('stacktrace')
-            if stacktrace:
-                rv.append((stacktrace, thread))
+            _probe_for_stacktrace(thread)
 
     return rv
 
 
+def update_stacktrace(stacktrace, new_frames, container=None,
+                      store_raw=False):
+    """Utility function that can update a stacktrace with new frames
+    according to the reprocessing rules.  Best paired with
+    `find_all_stacktraces`.
+    """
+    # If we have a known stacktrace container, put us to the
+    # expected places
+    if container is not None:
+        # Update raw_stacktrace based on if we want to store stuff there.
+        if store_raw:
+            container['raw_stacktrace'] = {
+                'frames': stacktrace['frames']
+            }
+        else:
+            container.pop('raw_stacktrace', None)
+
+        # We make sure the stacktrace moves to the processed slot.
+        # If the input data was 'raw_stacktrace' we need to make
+        # sure it now moves into 'stacktrace' as we will place a
+        # new unprocessed stacktrace in that location.
+        container['stacktrace'] = stacktrace
+
+    # Put the new frames into the stacktrace object.
+    stacktrace['frames'] = new_frames
+
+
 def get_sdk_from_event(event):
     sdk_info = (event.get('debug_meta') or {}).get('sdk_info')
     if sdk_info:
diff --git a/tests/sentry/lang/native/test_plugin.py b/tests/sentry/lang/native/test_plugin.py
index b9d7dc8e97..43ec4b9ef0 100644
--- a/tests/sentry/lang/native/test_plugin.py
+++ b/tests/sentry/lang/native/test_plugin.py
@@ -54,6 +54,13 @@ class BasicResolvingIntegrationTest(TestCase):
 
     @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_app_frame')
     def test_frame_resolution(self, symbolize_frame):
+        self._do_test_frame_resolution('stacktrace', symbolize_frame)
+
+    @patch('sentry.lang.native.symbolizer.Symbolizer.symbolize_app_frame')
+    def test_frame_resolution_raw(self, symbolize_frame):
+        self._do_test_frame_resolution('raw_stacktrace', symbolize_frame)
+
+    def _do_test_frame_resolution(self, stacktrace_key, symbolize_frame):
         object_name = (
             "/var/containers/Bundle/Application/"
             "B33C37A8-F933-4B6B-9FFA-152282BFDF13/"
@@ -101,7 +108,7 @@ class BasicResolvingIntegrationTest(TestCase):
             "sentry.interfaces.Exception": {
                 "values": [
                     {
-                        "stacktrace": {
+                        stacktrace_key: {
                             "frames": [
                                 {
                                     "function": "<redacted>",
@@ -174,7 +181,7 @@ class BasicResolvingIntegrationTest(TestCase):
                 "values": [
                     {
                         "id": 39,
-                        "stacktrace": {
+                        stacktrace_key: {
                             "frames": [
                                 {
                                     "in_app": False,
