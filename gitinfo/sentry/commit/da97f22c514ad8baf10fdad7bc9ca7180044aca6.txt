commit da97f22c514ad8baf10fdad7bc9ca7180044aca6
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Mar 4 21:35:58 2012 -0800

    Abstract the core of sentry_mail into sentry.plugins.bases.notify.NotifyPlugin

diff --git a/sentry/plugins/bases/__init__.py b/sentry/plugins/bases/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/plugins/bases/notify.py b/sentry/plugins/bases/notify.py
new file mode 100644
index 0000000000..72bc9c94f8
--- /dev/null
+++ b/sentry/plugins/bases/notify.py
@@ -0,0 +1,79 @@
+"""
+sentry.plugins.bases.notify
+~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django import forms
+from django.utils.translation import ugettext_lazy as _
+from sentry.conf import settings
+from sentry.plugins import Plugin
+
+
+class NotifyConfigurationForm(forms.Form):
+    send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
+        help_text=_('Notify members of this project.'))
+    send_to_admins = forms.BooleanField(label=_('Include sentry admins'), initial=False, required=False,
+        help_text=_('Notify administrators of this Sentry server.'))
+
+
+class NotifyPlugin(Plugin):
+    description = _("Notify project members when a new event is seen for the first time, or when an "
+                   "already resolved event has changed back to unresolved.")
+    # site_conf_form = NotifyConfigurationForm
+    project_conf_form = NotifyConfigurationForm
+
+    def __init__(self, *args, **kwargs):
+        super(NotifyPlugin, self).__init__(*args, **kwargs)
+
+    def notify_users(self, group, event, fail_silently=True):
+        raise NotImplementedError
+
+    def get_send_to(self, project=None):
+        send_to_list = set()
+
+        send_to_admins = self.get_option('send_to_admins', project)
+
+        if send_to_admins:
+            send_to_list |= set(settings.ADMINS)
+
+        send_to_members = self.get_option('send_to_members', project)
+        if send_to_members:
+            send_to_list |= set(project.member_set.values_list('user__id', 'user__email'))
+
+        return filter(None, send_to_list)
+
+    def should_notify(self, group, event):
+        project = group.project
+        send_to = self.get_send_to(project)
+        if not send_to:
+            return False
+
+        min_level = self.get_option('min_level', project)
+        if min_level is not None and int(group.level) < min_level:
+            return False
+
+        include_loggers = self.get_option('include_loggers', project)
+        if include_loggers is not None and group.logger not in include_loggers:
+            return False
+
+        exclude_loggers = self.get_option('exclude_loggers', project)
+        if exclude_loggers and group.logger in exclude_loggers:
+            return False
+
+        return True
+
+    ## plugin hooks
+
+    def get_form_initial(self, project=None):
+        return {'send_to_members': True}
+
+    def post_process(self, group, event, is_new, is_sample, **kwargs):
+        if not is_new:
+            return
+
+        if not self.should_notify(group, event):
+            return
+
+        self.notify_users(group, event)
diff --git a/sentry/plugins/sentry_mail/__init__.py b/sentry/plugins/sentry_mail/__init__.py
index bceca0d77e..366829878b 100644
--- a/sentry/plugins/sentry_mail/__init__.py
+++ b/sentry/plugins/sentry_mail/__init__.py
@@ -11,7 +11,8 @@ from django.core.validators import email_re, ValidationError
 from django.template.loader import render_to_string
 from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
-from sentry.plugins import Plugin, register
+from sentry.plugins import register
+from sentry.plugins.bases.notify import NotifyPlugin, NotifyConfigurationForm
 import re
 
 import pynliner
@@ -20,15 +21,11 @@ NOTSET = object()
 split_re = re.compile(r'\s*,\s*|\s+')
 
 
-class MailConfigurationForm(forms.Form):
+class MailConfigurationForm(NotifyConfigurationForm):
     send_to = forms.CharField(label=_('Send to'), required=False,
         help_text=_('Enter one or more emails separated by commas or lines.'),
         widget=forms.Textarea(attrs={
             'placeholder': 'you@example.com\nother@example.com'}))
-    send_to_members = forms.BooleanField(label=_('Include project members'), initial=False, required=False,
-        help_text=_('Send emails to all members of this project.'))
-    send_to_admins = forms.BooleanField(label=_('Include sentry admins'), initial=False, required=False,
-        help_text=_('Send emails to all administrators of this Sentry server.'))
 
     def clean_send_to(self):
         value = self.cleaned_data['send_to']
@@ -39,12 +36,9 @@ class MailConfigurationForm(forms.Form):
         return ','.join(emails)
 
 
-class MailProcessor(Plugin):
+class MailProcessor(NotifyPlugin):
     title = _('Mail')
     conf_key = 'mail'
-    description = _("Notify project members when a new event is seen for the first time, or when an "
-                   "already resolved event has changed back to unresolved.")
-    # site_conf_form = MailConfigurationForm
     project_conf_form = MailConfigurationForm
 
     def __init__(self, min_level=NOTSET, include_loggers=NOTSET, exclude_loggers=NOTSET,
@@ -80,6 +74,14 @@ class MailProcessor(Plugin):
             msg.attach_alternative(html_body, "text/html")
         msg.send(fail_silently=fail_silently)
 
+    def send_test_mail(self, project=None):
+        self._send_mail(
+            subject='Test Email',
+            body='This email was requested as a test of Sentry\'s outgoing email',
+            project=project,
+            fail_silently=False,
+        )
+
     def get_send_to(self, project=None):
         send_to_list = self.get_option('send_to', project)
         if not send_to_list:
@@ -93,31 +95,11 @@ class MailProcessor(Plugin):
         if isinstance(send_to_list, basestring):
             send_to_list = send_to_list.split(',')
 
-        send_to_list = set(send_to_list)
-
-        send_to_admins = self.get_option('send_to_admins', project)
-        if send_to_admins is None:
-            send_to_admins = self.send_to_admins
-        if send_to_admins:
-            send_to_list |= set(settings.ADMINS)
-
-        send_to_members = self.get_option('send_to_members', project)
-        if send_to_members is None:
-            send_to_members = self.send_to_members
-        if send_to_members:
-            send_to_list |= set(project.member_set.values_list('user__email', flat=True))
+        send_to_list.extend(super(MailProcessor, self).get_send_to(project))
 
-        return filter(None, send_to_list)
+        return filter(None, set(send_to_list))
 
-    def send_test_mail(self, project=None):
-        self._send_mail(
-            subject='Test Email',
-            body='This email was requested as a test of Sentry\'s outgoing email',
-            project=project,
-            fail_silently=False,
-        )
-
-    def mail_members(self, group, event, fail_silently=True):
+    def notify_members(self, group, event, fail_silently=True):
         project = group.project
 
         interface_list = []
@@ -152,33 +134,11 @@ class MailProcessor(Plugin):
             fail_silently=fail_silently,
         )
 
-    def should_mail(self, group, event):
-        project = group.project
-        send_to = self.get_send_to(project)
-        if not send_to:
-            return False
-        min_level = self.get_option('min_level', project) or self.min_level
-        if min_level is not None and int(group.level) < min_level:
-            return False
-        include_loggers = self.get_option('include_loggers', project) or self.include_loggers
-        if include_loggers is not None and group.logger not in include_loggers:
-            return False
-        exclude_loggers = self.get_option('exclude_loggers', project) or self.exclude_loggers
-        if exclude_loggers and group.logger in exclude_loggers:
-            return False
-        return True
-
-    ## plugin hooks
-
-    def get_form_initial(self, project=None):
-        return {'send_to_members': True}
-
-    def post_process(self, group, event, is_new, is_sample, **kwargs):
-        if not is_new:
-            return
-
-        if not self.should_mail(group, event):
-            return
-
-        self.mail_members(group, event)
+    def get_option(self, key, project=None):
+        value = super(MailProcessor, self).get_option(key, project)
+        if value is None and key in ('min_level', 'include_loggers', 'exclude_loggers',
+                                     'send_to_members', 'send_to_admins', 'send_to',
+                                     'subject_prefix'):
+            value = getattr(self, key)
+        return value
 register(MailProcessor)
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 83928b3597..33bedbf361 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -15,47 +15,47 @@ from tests.base import TestCase
 class MailProcessorTest(TestCase):
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=[]))
-    def test_should_mail_no_send_to(self):
+    def test_should_notify_no_send_to(self):
         p = MailProcessor()
-        self.assertFalse(p.should_mail(group=Mock(), event=Mock()))
+        self.assertFalse(p.should_notify(group=Mock(), event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_mail_not_min_level(self):
+    def test_should_notify_not_min_level(self):
         p = MailProcessor(min_level=2)
         group = Mock(spec=Group)
         group.level = 1
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
+        self.assertFalse(p.should_notify(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_mail_not_included(self):
+    def test_should_notify_not_included(self):
         p = MailProcessor(min_level=None, include_loggers=['foo'])
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
+        self.assertFalse(p.should_notify(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_mail_excluded(self):
+    def test_should_notify_excluded(self):
         p = MailProcessor(min_level=None, exclude_loggers=['root'])
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
-        self.assertFalse(p.should_mail(group=group, event=Mock()))
+        self.assertFalse(p.should_notify(group=group, event=Mock()))
 
     @mock.patch('sentry.models.ProjectOption.objects.get_value', Mock(side_effect=lambda p, k, d: d))
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor.get_send_to', Mock(return_value=['foo@example.com']))
-    def test_should_mail_match(self):
+    def test_should_notify_match(self):
         p = MailProcessor(min_level=None)
         group = Mock(spec=Group)
         group.level = 5
         group.logger = 'root'
-        self.assertTrue(p.should_mail(group=group, event=Mock()))
+        self.assertTrue(p.should_notify(group=group, event=Mock()))
 
     @mock.patch('sentry.plugins.sentry_mail.MailProcessor._send_mail')
-    def test_mail_members_renders_interfaces(self, _send_mail):
+    def test_notify_members_renders_interfaces(self, _send_mail):
         group = Mock(spec=Group)
         group.first_seen = datetime.datetime.now()
         group.project_id = 1
@@ -71,7 +71,7 @@ class MailProcessorTest(TestCase):
 
         with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
             p = MailProcessor(send_to=['foo@example.com'])
-            p.mail_members(group, event)
+            p.notify_members(group, event)
 
         stacktrace.get_title.assert_called_once_with()
         stacktrace.to_string.assert_called_once_with(event)
@@ -90,9 +90,7 @@ class MailProcessorTest(TestCase):
             project.member_set = Mock()
             project.member_set.values_list.return_value = member_emails
 
-            with mock.patch('sentry.plugins.sentry_mail.settings') as settings:
-                settings.ADMINS = admins
-
+            with self.Settings(SENTRY_ADMINS=admins):
                 # member emails without admins
                 p = MailProcessor()
                 self.assertEqual(sorted(set(member_emails)),
