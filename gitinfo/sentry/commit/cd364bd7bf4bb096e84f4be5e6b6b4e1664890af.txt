commit cd364bd7bf4bb096e84f4be5e6b6b4e1664890af
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 18 02:27:01 2016 +0200

    Auto enroll user to backup codes.

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index 87ba7edc4e..ab340595a0 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -71,19 +71,22 @@ class AuthenticatorManager(BaseManager):
 
         return _sort(rv)
 
-    def is_missing_backup_interfaces(self, user):
-        """This checks if the user provided should add a backup interface
-        to his account.  This returns `true` essentially if at least one
-        non backup interface was added but not a single backup interface.
+    def auto_enroll_backup_interface(self, user, force=False):
+        """This automatically enrolls the recovery code backup interface
+        in case no backup interface is currently set for the user.
+        Returns the interface that was added.
         """
         has_authenticators = False
         for authenticator in Authenticator.objects.filter(user=user):
             if not authenticator.interface.is_available:
                 continue
-            if authenticator.interface.backup_interface:
-                return False
+            if authenticator.interface.is_backup_interface:
+                return
             has_authenticators = True
-        return has_authenticators
+        if has_authenticators or force:
+            interface = RecoveryCodeInterface()
+            interface.enroll(user)
+            return interface
 
     def get_interface(self, user, interface_id):
         """Looks up an interface by interface ID for a user.  If the
@@ -110,7 +113,7 @@ class AuthenticatorManager(BaseManager):
             for authenticator in Authenticator.objects.filter(user=user):
                 if not authenticator.interface.is_available:
                     continue
-                if not authenticator.interface.backup_interface:
+                if not authenticator.interface.is_backup_interface:
                     return True
             return False
         return Authenticator.objects.filter(user=user).first() is not None
@@ -143,7 +146,7 @@ class AuthenticatorInterface(object):
     interface_id = None
     name = None
     description = None
-    backup_interface = False
+    is_backup_interface = False
     enroll_button = _('Enroll')
     configure_button = _('Info')
     remove_button = _('Remove')
@@ -242,7 +245,8 @@ class RecoveryCodeInterface(AuthenticatorInterface):
                     'receive two-factor authentication codes.')
     enroll_button = _('Activate')
     configure_button = _('View Codes')
-    backup_interface = True
+    remove_button = None
+    is_backup_interface = True
 
     def __init__(self, authenticator=None):
         AuthenticatorInterface.__init__(self, authenticator)
diff --git a/src/sentry/templates/sentry/account/twofactor.html b/src/sentry/templates/sentry/account/twofactor.html
index 8b39b0e18c..72d0ccc340 100644
--- a/src/sentry/templates/sentry/account/twofactor.html
+++ b/src/sentry/templates/sentry/account/twofactor.html
@@ -32,7 +32,11 @@
           </form>
         {% endif %}
       {% else %}
-        <a href="{{ auth.interface_id }}/" class="btn btn-primary btn-sm">Add</a>
+        {% if not has_2fa and auth.is_backup_interface %}
+          <em>Backup methods can only be managed if an authenticator has been added</em>
+        {% else %}
+          <a href="{{ auth.interface_id }}/" class="btn btn-primary btn-sm">Add</a>
+        {% endif %}
       {% endif %}
       </div>
       <h4>{{ auth.name }}</h4>
diff --git a/src/sentry/templates/sentry/account/twofactor/remove.html b/src/sentry/templates/sentry/account/twofactor/remove.html
index c9eeb25868..2ee0745b5e 100644
--- a/src/sentry/templates/sentry/account/twofactor/remove.html
+++ b/src/sentry/templates/sentry/account/twofactor/remove.html
@@ -4,7 +4,6 @@
 {% load sentry_helpers %}
 
 {% block twofactor_title %}{% trans "Remove Method:" %} {{ auth.name }}{% endblock %}
-{% block twofactor_backup_warning %}{% endblock %}
 {% block twofactor_body %}
   <p>
     Do you want to remove the method?  You will no longer be able to
diff --git a/src/sentry/templates/sentry/bases/twofactor_settings.html b/src/sentry/templates/sentry/bases/twofactor_settings.html
index 1104c49870..66edc3dc3f 100644
--- a/src/sentry/templates/sentry/bases/twofactor_settings.html
+++ b/src/sentry/templates/sentry/bases/twofactor_settings.html
@@ -7,15 +7,5 @@
 
 {% block main %}
   <legend style="margin-top: 0;">{% block twofactor_title %}{% trans "Method:" %} {{ auth.name }}{% endblock %}</legend>
-  {% block twofactor_backup_warning %}
-    {% if is_missing_backup_interfaces %}
-      <div class="alert alert-warning">
-        <strong>Warning:</strong>
-        You do not have a backup authenticator enabled.
-        <a href="{% url 'sentry-account-settings-2fa-recovery' %}?enroll=yes">Click here to add recovery codes</a>.
-      </div>
-    {% endif %}
-  {% endblock %}
-
   {% block twofactor_body %}{% endblock %}
 {% endblock %}
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 1bd9114ffe..dd70e5e1ad 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -155,8 +155,6 @@ def twofactor_settings(request):
         'page': 'settings',
         'has_2fa': any(x.is_enrolled for x in interfaces),
         'interfaces': interfaces,
-        'is_missing_backup_interfaces':
-            Authenticator.objects.is_missing_backup_interfaces(request.user)
     })
     return render_to_response('sentry/account/twofactor.html', context, request)
 
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index 85276a4a78..c4d6c4c66d 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -46,8 +46,6 @@ class TwoFactorSettingsView(BaseView):
         context = csrf(request)
         context['auth'] = interface
         context['page'] = 'settings'
-        context['is_missing_backup_interfaces'] = \
-            Authenticator.objects.is_missing_backup_interfaces(request.user)
         return context
 
     def delete_authenticator(self, interface):
@@ -59,14 +57,14 @@ class TwoFactorSettingsView(BaseView):
 
         # If this was an authenticator that was a backup interface we just
         # deleted, then nothing happens.
-        if interface.backup_interface:
+        if interface.is_backup_interface:
             return
 
         # If however if we delete an actual authenticator and all that
         # remainds are backup interfaces, then we kill them in the
         # process.
         interfaces = Authenticator.objects.all_interfaces_for_user(user)
-        backup_interfaces = [x for x in interfaces if x.backup_interface]
+        backup_interfaces = [x for x in interfaces if x.is_backup_interface]
         if len(backup_interfaces) == len(interfaces):
             for iface in backup_interfaces:
                 iface.authenticator.delete()
@@ -83,7 +81,7 @@ class TwoFactorSettingsView(BaseView):
             request.user)
         other_interfaces = [x for x in all_interfaces
                             if x.interface_id != interface.interface_id]
-        backup_interfaces = [x for x in other_interfaces if x.backup_interface]
+        backup_interfaces = [x for x in other_interfaces if x.is_backup_interface]
         removes_backups = backup_interfaces and \
             len(backup_interfaces) == len(other_interfaces)
 
@@ -96,10 +94,11 @@ class TwoFactorSettingsView(BaseView):
         # Only enroll if it's either not an insecure enrollment or we are
         # enrolling a backup interface when we already had a primary one.
         if not insecure \
-           or (interface.backup_interface and
+           or (interface.is_backup_interface and
                Authenticator.objects.user_has_2fa(request.user,
                                                   ignore_backup=True)):
             interface.enroll(request.user)
+            Authenticator.objects.auto_enroll_backup_interface(request.user)
         return HttpResponseRedirect(request.path)
 
     def configure(self, request, interface):
