commit 4489c13ca969de8e5b0512ffc71b0ae27a87b57c
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Dec 2 19:12:40 2016 +0100

    Restructured event handling for group issue reporting

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 45a057f364..6c64a953d5 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -34,6 +34,7 @@ from sentry.models import (
 )
 from sentry.plugins import plugins
 from sentry.signals import first_event_received, regression_signal
+from sentry.reprocessing import store_processing_issues
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import post_process_group
 from sentry.utils.cache import default_cache
@@ -571,6 +572,8 @@ class EventManager(object):
             },
         })
 
+        processing_issues = data.pop('processing_issues', [])
+
         # If we want to put the group on hold we mark the group as such.
         # In theory this should only ever happen on new groups or for
         # groups that are already on hold.  However in case something
@@ -595,6 +598,9 @@ class EventManager(object):
             **group_kwargs
         )
 
+        if processing_issues:
+            store_processing_issues(processing_issues, group, release)
+
         event.group = group
         # store a reference to the group id to guarantee validation of isolation
         event.data.bind_ref(event)
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index dc68f00ab9..4b8259bb6a 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -18,6 +18,7 @@ from sentry.lang.native.utils import find_all_stacktraces, \
     find_stacktrace_referenced_images, get_sdk_from_apple_system_info, \
     APPLE_SDK_MAPPING
 from sentry.utils.native import parse_addr
+from sentry.reprocessing import record_processing_issue
 
 
 logger = logging.getLogger(__name__)
@@ -379,6 +380,12 @@ def resolve_frame_symbols(data):
         img = sym.get_app_image_for_frame(frame)
         if img is None:
             return
+        record_processing_issue(data, 'native', 'dsym:%s' % e.image_uuid, data={
+            'image_uuid': e.image_uuid,
+            'image_path': e.image_path,
+            'type': e.type,
+            'message': e.message,
+        })
 
     with sym:
         for stacktrace, container in stacktraces:
diff --git a/src/sentry/models/processingissue.py b/src/sentry/models/processingissue.py
new file mode 100644
index 0000000000..7aeb0128f6
--- /dev/null
+++ b/src/sentry/models/processingissue.py
@@ -0,0 +1,56 @@
+"""
+sentry.models.processingissue
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+from django.db import models
+
+from sentry.db.models import FlexibleForeignKey, Model, GzippedDictField, \
+    BaseManager
+
+
+class ReleaseProblemManager(BaseManager):
+
+    def record_problem(self, release, key, data):
+        return self.update_or_create(
+            release=release,
+            key=key,
+            defaults={'data': data},
+        )[0]
+
+
+class ProcessingIssue(Model):
+    __core__ = False
+    project = FlexibleForeignKey('sentry.Project')
+    type = models.CharField(max_length=60)
+    key = models.CharField(max_length=256)
+    data = GzippedDictField()
+
+    objects = ReleaseProblemManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_processingissue'
+        unique_together = [
+            ('project', 'type', 'key'),
+        ]
+
+
+class ProcessingIssueGroup(Model):
+    __core__ = False
+    group = FlexibleForeignKey('sentry.Group')
+    release = FlexibleForeignKey('sentry.Release', null=True)
+    issue = FlexibleForeignKey('sentry.ProcessingIssue')
+    data = GzippedDictField()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_processingissuegroup'
+        unique_together = [
+            ('group', 'release', 'issue'),
+        ]
diff --git a/src/sentry/reprocessing.py b/src/sentry/reprocessing.py
new file mode 100644
index 0000000000..eeb3e8c445
--- /dev/null
+++ b/src/sentry/reprocessing.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from sentry.models import ProcessingIssue, ProcessingIssueGroup
+
+
+def record_processing_issue(event_data, type, key, release_bound=True,
+                            data=None, group_data=None, hold_group=True):
+    """Records a processing issue with the event data.  When the event is
+    later stored we will persist these event issues in the database to
+    permit reprocessing when they are fixed.
+    """
+    if hold_group:
+        event_data['on_hold'] = True
+    event_data.setdefault('processing_issues', []).append({
+        'type': type,
+        'key': key,
+        'release_bound': release_bound,
+        'issue_data': data or {},
+        'group_data': group_data or {},
+    })
+
+
+def store_processing_issues(issues, group, release=None):
+    for d in issues:
+        issue = ProcessingIssue.objects.get_or_create(
+            project=group.project,
+            type=d['type'],
+            key=d['key'],
+            defaults={'data': d['issue_data']},
+        )[0]
+        ProcessingIssueGroup.objects.get_or_create(
+            group=group,
+            release=release,
+            issue=issue,
+            defaults={'data': d['group_data']},
+        )[0]
