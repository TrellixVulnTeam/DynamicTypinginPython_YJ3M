commit 35866182f469ae720329ee78b6719c2e39773a05
Author: Matte Noble <me@mattenoble.com>
Date:   Fri Oct 26 10:53:24 2018 -0700

    feat(app-platform): OAuth authorization endpoint (#10203)

diff --git a/src/sentry/api/bases/sentryapps.py b/src/sentry/api/bases/sentryapps.py
index c1df49e7bc..a5a1ac1b7e 100644
--- a/src/sentry/api/bases/sentryapps.py
+++ b/src/sentry/api/bases/sentryapps.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+from sentry.api.authentication import ClientIdSecretAuthentication
 from sentry.api.base import Endpoint, SessionAuthentication
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
@@ -57,12 +58,13 @@ class SentryAppInstallationDetailsEndpoint(Endpoint):
         return (args, kwargs)
 
 
-class SentryAppInstallationAuthorizationPermission(ScopedPermission):
+class SentryAppAuthorizationPermission(ScopedPermission):
     def has_object_permission(self, request, view, install):
         if not request.user.is_sentry_app:
             return False
         return request.user == install.sentry_app.proxy_user
 
 
-class SentryAppInstallationAuthorizationEndpoint(SentryAppInstallationDetailsEndpoint):
-    permission_classes = (SentryAppInstallationAuthorizationPermission, )
+class SentryAppAuthorizationEndpoint(SentryAppInstallationDetailsEndpoint):
+    authentication_classes = (ClientIdSecretAuthentication, )
+    permission_classes = (SentryAppAuthorizationPermission, )
diff --git a/src/sentry/api/endpoints/sentry_app_authorizations.py b/src/sentry/api/endpoints/sentry_app_authorizations.py
new file mode 100644
index 0000000000..e36e091ac6
--- /dev/null
+++ b/src/sentry/api/endpoints/sentry_app_authorizations.py
@@ -0,0 +1,34 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases import SentryAppAuthorizationEndpoint as BaseEndpoint
+from sentry.coreapi import APIUnauthorized
+from sentry.mediators.sentry_app_installations import Authorizer
+from sentry.api.serializers.models.apitoken import ApiTokenSerializer
+
+
+class SentryAppAuthorizationsEndpoint(BaseEndpoint):
+    def post(self, request, install):
+        try:
+            token = Authorizer.run(
+                grant_type=request.json_body.get('grant_type'),
+                code=request.json_body.get('code'),
+                client_id=request.json_body.get('client_id'),
+                user=request.user,
+                install=install,
+            )
+        except APIUnauthorized:
+            return Response({'error': 'Unauthorized'}, status=403)
+
+        return Response(
+            ApiTokenSerializer().serialize(
+                token,
+                {
+                    'state': request.json_body.get('state'),
+                    'application': None,
+                },
+                request.user,
+            ),
+            status=201
+        )
diff --git a/src/sentry/api/serializers/models/apitoken.py b/src/sentry/api/serializers/models/apitoken.py
index 6688a05760..889efa0bd4 100644
--- a/src/sentry/api/serializers/models/apitoken.py
+++ b/src/sentry/api/serializers/models/apitoken.py
@@ -28,7 +28,9 @@ class ApiTokenSerializer(Serializer):
             'application': attrs['application'],
             'expiresAt': obj.expires_at,
             'dateCreated': obj.date_added,
+            'state': attrs.get('state'),
         }
         if not attrs['application']:
             data['token'] = obj.token
+            data['refreshToken'] = obj.refresh_token
         return data
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index b694c6ae9e..ce5c29d28c 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -157,6 +157,7 @@ from .endpoints.debug_files import DebugFilesEndpoint, DifAssembleEndpoint, \
     UnknownDebugFilesEndpoint, AssociateDSymFilesEndpoint
 from .endpoints.sentry_apps import SentryAppsEndpoint
 from .endpoints.sentry_app_details import SentryAppDetailsEndpoint
+from .endpoints.sentry_app_authorizations import SentryAppAuthorizationsEndpoint
 from .endpoints.shared_group_details import SharedGroupDetailsEndpoint
 from .endpoints.system_health import SystemHealthEndpoint
 from .endpoints.system_options import SystemOptionsEndpoint
@@ -1116,6 +1117,12 @@ urlpatterns = patterns(
         name='sentry-api-0-sentry-app-details'
     ),
 
+    url(
+        r'^sentry-app-installations/(?P<uuid>[^\/]+)/authorizations/$',
+        SentryAppAuthorizationsEndpoint.as_view(),
+        name='sentry-api-0-sentry-app-authorizations'
+    ),
+
     # Internal
     url(r'^internal/health/$', SystemHealthEndpoint.as_view(),
         name='sentry-api-0-system-health'),
diff --git a/src/sentry/mediators/sentry_app_installations/authorizer.py b/src/sentry/mediators/sentry_app_installations/authorizer.py
index b24a427367..93dd546a90 100644
--- a/src/sentry/mediators/sentry_app_installations/authorizer.py
+++ b/src/sentry/mediators/sentry_app_installations/authorizer.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from datetime import datetime, timedelta
+from django.utils.crypto import constant_time_compare
 
 from sentry.coreapi import APIUnauthorized
 from sentry.mediators import Mediator, Param
@@ -49,14 +50,27 @@ class Authorizer(Mediator):
 
     def _validate_grant(self):
         if (
-            self.grant.application.owner != self.user or
-            self.grant.application.client_id != self.client_id
+            not self.grant_belongs_to_install() or
+            not self.application_owned_by_user() or
+            not self.client_id_matches()
         ):
             raise APIUnauthorized
 
         if self.grant.is_expired():
             raise APIUnauthorized
 
+    def grant_belongs_to_install(self):
+        return self.grant.sentry_app_installation == self.install
+
+    def application_owned_by_user(self):
+        return self.grant.application.owner == self.user
+
+    def client_id_matches(self):
+        return constant_time_compare(
+            self.grant.application.client_id,
+            self.client_id,
+        )
+
     @memoize
     def sentry_app(self):
         try:
@@ -74,6 +88,10 @@ class Authorizer(Mediator):
     @memoize
     def grant(self):
         try:
-            return ApiGrant.objects.get(code=self.code)
+            return ApiGrant.objects \
+                .select_related('sentry_app_installation') \
+                .select_related('application') \
+                .select_related('application__sentry_app') \
+                .get(code=self.code)
         except ApiGrant.DoesNotExist:
             raise APIUnauthorized
diff --git a/tests/sentry/api/endpoints/test_sentry_app_authorizations.py b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
new file mode 100644
index 0000000000..8f28a87025
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_sentry_app_authorizations.py
@@ -0,0 +1,138 @@
+from __future__ import absolute_import
+
+import six
+
+from datetime import datetime, timedelta
+from django.core.urlresolvers import reverse
+from django.utils import timezone
+
+from sentry.mediators.sentry_apps import Creator as SentryAppCreator
+from sentry.mediators.sentry_app_installations import Creator as \
+    SentryAppInstallationCreator
+from sentry.models import ApiApplication, ApiToken
+from sentry.testutils import APITestCase
+
+
+class TestSentryAppAuthorizations(APITestCase):
+    def setUp(self):
+        self.user = self.create_user()
+        self.org = self.create_organization()
+
+        self.sentry_app = SentryAppCreator.run(
+            name='nulldb',
+            organization=self.create_organization(),
+            scopes=('org:read', ),
+            webhook_url='http://example.com',
+        )
+
+        self.other_sentry_app = SentryAppCreator.run(
+            name='slowdb',
+            organization=self.create_organization(),
+            scopes=(),
+            webhook_url='http://example.com',
+        )
+
+        self.install, self.grant = SentryAppInstallationCreator.run(
+            organization=self.org,
+            slug='nulldb',
+        )
+
+        self.url = reverse(
+            'sentry-api-0-sentry-app-authorizations',
+            args=[self.install.uuid],
+        )
+
+    def _run_request(self, *args, **kwargs):
+        data = {
+            'client_id': self.sentry_app.application.client_id,
+            'client_secret': self.sentry_app.application.client_secret,
+            'grant_type': 'authorization_code',
+            'code': self.grant.code,
+        }
+        data.update(**kwargs)
+        return self.client.post(self.url, data, headers={
+            'Content-Type': 'application/json',
+        })
+
+    def test_exchanges_for_token_successfully(self):
+        response = self._run_request()
+
+        token = ApiToken.objects.get(
+            application=self.sentry_app.application
+        )
+
+        assert response.status_code == 201, response.content
+        assert response.data['scopes'] == self.sentry_app.scope_list
+        assert response.data['token'] == token.token
+        assert response.data['refreshToken'] == token.refresh_token
+
+        expires_at = response.data['expiresAt'].replace(
+            second=0,
+            microsecond=0,
+        )
+
+        expected_expires_at = (datetime.now() + timedelta(hours=8)).replace(
+            second=0,
+            microsecond=0,
+        )
+
+        assert expires_at == expected_expires_at
+
+    def test_incorrect_grant_type(self):
+        response = self._run_request(grant_type='notit')
+        assert response.status_code == 403
+
+    def test_invalid_installation(self):
+        self.install, _ = SentryAppInstallationCreator.run(
+            organization=self.org,
+            slug='slowdb',
+        )
+
+        # URL with this new Install's uuid in it
+        self.url = reverse(
+            'sentry-api-0-sentry-app-authorizations',
+            args=[self.install.uuid],
+        )
+
+        response = self._run_request()
+        assert response.status_code == 403
+
+    def test_non_sentry_app_user(self):
+        app = ApiApplication.objects.create(
+            owner=self.create_user()
+        )
+        response = self._run_request(
+            client_id=app.client_id,
+            client_secret=app.client_secret,
+        )
+        assert response.status_code == 401
+
+    def test_invalid_grant(self):
+        response = self._run_request(code='123')
+        assert response.status_code == 403
+
+    def test_expired_grant(self):
+        self.grant.update(expires_at=timezone.now() - timedelta(minutes=2))
+        response = self._run_request()
+        assert response.status_code == 403
+
+    def test_request_with_exchanged_access_token(self):
+        response = self._run_request()
+        token = response.data['token']
+
+        url = reverse(
+            'sentry-api-0-organization-details',
+            args=[self.org.slug],
+        )
+
+        response = self.client.get(
+            url,
+            HTTP_AUTHORIZATION='Bearer {}'.format(token),
+        )
+
+        assert response.status_code == 200
+        assert response.data['id'] == six.binary_type(self.org.id)
+
+    def test_state(self):
+        response = self._run_request(state='abc123')
+        assert response.data['state'] == 'abc123'
