commit 8ec38c3a97ed6ac03c3cd4617595e9cb2159880c
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Tue Oct 23 19:00:40 2018 +0200

    ref: Make all store normalization go through EventManager (#10165)
    
    * ref: Make all store normalization go through EventManager
    
    * fix: Remove unused import
    
    * fix: Typo
    
    * ref: Move most arguments to EventManager constructor
    
    * ref: Make decode() a private method, dont depend on helper
    
    * ref: Split up coreapi tests
    
    * ref: Undo formatter changes

diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 285c2812c5..f58a6cc993 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -11,37 +11,31 @@ sentry.coreapi
 from __future__ import absolute_import, print_function
 
 import base64
-import jsonschema
 import logging
 import re
 import six
 import zlib
 
-from collections import MutableMapping
 from django.core.exceptions import SuspiciousOperation
 from django.utils.crypto import constant_time_compare
 from gzip import GzipFile
 from six import BytesIO
 from time import time
 
-from sentry import filters
 from sentry.attachments import attachment_cache
 from sentry.cache import default_cache
-from sentry.interfaces.base import get_interface
-from sentry.event_manager import EventManager
 from sentry.models import ProjectKey
 from sentry.tasks.store import preprocess_event, \
     preprocess_event_from_reprocessing
 from sentry.utils import json
 from sentry.utils.auth import parse_auth_header
 from sentry.utils.http import origin_from_request
-from sentry.utils.data_filters import is_valid_ip, \
-    is_valid_release, is_valid_error_message, FilterStatKeys
 from sentry.utils.strings import decompress
 from sentry.utils.canonical import CANONICAL_TYPES
 
 
 _dist_re = re.compile(r'^[a-zA-Z0-9_.-]+$')
+logger = logging.getLogger("sentry.api")
 
 
 class APIError(Exception):
@@ -113,19 +107,18 @@ class ClientLogHelper(object):
     # XXX(markus): Remove. This should all be doable via scopes
     def __init__(self, context):
         self.context = context
-        self.logger = logging.getLogger('sentry.api')
 
     def debug(self, *a, **k):
-        self.logger.debug(*a, **self._metadata(**k))
+        logger.debug(*a, **self._metadata(**k))
 
     def info(self, *a, **k):
-        self.logger.info(*a, **self._metadata(**k))
+        logger.info(*a, **self._metadata(**k))
 
     def warning(self, *a, **k):
-        self.logger.warning(*a, **self._metadata(**k))
+        logger.warning(*a, **self._metadata(**k))
 
     def error(self, *a, **k):
-        self.logger.error(*a, **self._metadata(**k))
+        logger.error(*a, **self._metadata(**k))
 
     def _metadata(self, tags=None, extra=None, **kwargs):
         if not extra:
@@ -227,118 +220,6 @@ class ClientApiHelper(object):
     def project_id_from_auth(self, auth):
         return self.project_key_from_auth(auth).project_id
 
-    def decode_data(self, encoded_data):
-        try:
-            return encoded_data.decode('utf-8')
-        except UnicodeDecodeError as e:
-            # This error should be caught as it suggests that there's a
-            # bug somewhere in the client's code.
-            self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' %
-                           (type(e).__name__, e))
-
-    def decompress_deflate(self, encoded_data):
-        try:
-            return zlib.decompress(encoded_data).decode('utf-8')
-        except Exception as e:
-            # This error should be caught as it suggests that there's a
-            # bug somewhere in the client's code.
-            self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' %
-                           (type(e).__name__, e))
-
-    def decompress_gzip(self, encoded_data):
-        try:
-            fp = BytesIO(encoded_data)
-            try:
-                f = GzipFile(fileobj=fp)
-                return f.read().decode('utf-8')
-            finally:
-                f.close()
-        except Exception as e:
-            # This error should be caught as it suggests that there's a
-            # bug somewhere in the client's code.
-            self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' %
-                           (type(e).__name__, e))
-
-    def decode_and_decompress_data(self, encoded_data):
-        try:
-            try:
-                return decompress(encoded_data).decode('utf-8')
-            except zlib.error:
-                return base64.b64decode(encoded_data).decode('utf-8')
-        except Exception as e:
-            # This error should be caught as it suggests that there's a
-            # bug somewhere in the client's code.
-            self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' %
-                           (type(e).__name__, e))
-
-    def safely_load_json_string(self, json_string):
-        try:
-            if isinstance(json_string, six.binary_type):
-                json_string = json_string.decode('utf-8')
-            obj = json.loads(json_string)
-            assert isinstance(obj, dict)
-        except Exception as e:
-            # This error should be caught as it suggests that there's a
-            # bug somewhere in the client's code.
-            self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data reconstructing object (%s, %s)' %
-                           (type(e).__name__, e))
-        return obj
-
-    def parse_client_as_sdk(self, value):
-        if not value:
-            return {}
-        try:
-            name, version = value.split('/', 1)
-        except ValueError:
-            try:
-                name, version = value.split(' ', 1)
-            except ValueError:
-                return {}
-        return {
-            'name': name,
-            'version': version,
-        }
-
-    def should_filter(self, project, data, ip_address=None):
-        """
-        returns (result: bool, reason: string or None)
-        Result is True if an event should be filtered
-        The reason for filtering is passed along as a string
-        so that we can store it in metrics
-        """
-        if ip_address and not is_valid_ip(project, ip_address):
-            return (True, FilterStatKeys.IP_ADDRESS)
-
-        release = data.get('release')
-        if release and not is_valid_release(project, release):
-            return (True, FilterStatKeys.RELEASE_VERSION)
-
-        message_interface = data.get('sentry.interfaces.Message', {})
-        error_message = message_interface.get('formatted', ''
-                                              ) or message_interface.get('message', '')
-        if error_message and not is_valid_error_message(project, error_message):
-            return (True, FilterStatKeys.ERROR_MESSAGE)
-
-        for exception_interface in data.get('sentry.interfaces.Exception', {}).get('values', []):
-            message = u': '.join(filter(None, map(exception_interface.get, ['type', 'value'])))
-            if message and not is_valid_error_message(project, message):
-                return (True, FilterStatKeys.ERROR_MESSAGE)
-
-        for filter_cls in filters.all():
-            filter_obj = filter_cls(project)
-            if filter_obj.is_enabled() and filter_obj.test(data):
-                return (True, six.text_type(filter_obj.id))
-
-        return (False, None)
-
-    def validate_data(self, data):
-        return data
-
     def ensure_does_not_have_ip(self, data):
         if 'sentry.interfaces.Http' in data:
             if 'env' in data['sentry.interfaces.Http']:
@@ -356,7 +237,7 @@ class ClientApiHelper(object):
             start_time = time()
 
         # we might be passed some sublcasses of dict that fail dumping
-        if isinstance(data, DOWNGRADE_DATA_TYPES):
+        if isinstance(data, CANONICAL_TYPES):
             data = dict(data.items())
 
         cache_timeout = 3600
@@ -416,142 +297,66 @@ class SecurityApiHelper(ClientApiHelper):
         auth.client = request.META.get('HTTP_USER_AGENT')
         return auth
 
-    def should_filter(self, project, data, ip_address=None):
-        for name in self.report_interfaces:
-            if name in data:
-                interface = get_interface(name)
-                if interface.to_python(data[name]).should_filter(project):
-                    return (True, FilterStatKeys.INVALID_CSP)
 
-        return super(SecurityApiHelper, self).should_filter(project, data, ip_address)
+def decompress_deflate(encoded_data):
+    try:
+        return zlib.decompress(encoded_data).decode("utf-8")
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.debug(six.text_type(e), exc_info=True)
+        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
 
-    def validate_data(self, data):
-        try:
-            interface = get_interface(data.pop('interface'))
-            report = data.pop('report')
-        except KeyError:
-            raise APIForbidden('No report or interface data')
 
-        # To support testing, we can either accept a buillt interface instance, or the raw data in
-        # which case we build the instance ourselves
+def decompress_gzip(encoded_data):
+    try:
+        fp = BytesIO(encoded_data)
         try:
-            instance = report if isinstance(report, interface) else interface.from_raw(report)
-        except jsonschema.ValidationError as e:
-            raise APIError('Invalid security report: %s' % str(e).splitlines()[0])
-
-        def clean(d):
-            return dict(filter(lambda x: x[1], d.items()))
-
-        data.update({
-            'logger': 'csp',
-            'message': instance.get_message(),
-            'culprit': instance.get_culprit(),
-            instance.get_path(): instance.to_json(),
-            'tags': instance.get_tags(),
-            'errors': [],
-
-            'sentry.interfaces.User': {
-                'ip_address': self.context.ip_address,
-            },
-
-            # Construct a faux Http interface based on the little information we have
-            # This is a bit weird, since we don't have nearly enough
-            # information to create an Http interface, but
-            # this automatically will pick up tags for the User-Agent
-            # which is actually important here for CSP
-            'sentry.interfaces.Http': {
-                'url': instance.get_origin(),
-                'headers': clean({
-                    'User-Agent': self.context.agent,
-                    'Referer': instance.get_referrer(),
-                })
-            },
-        })
-
-        return data
-
-
-class LazyData(MutableMapping):
-    def __init__(self, data, content_encoding, helper, project, key, auth, client_ip):
-        self._data = data
-        self._content_encoding = content_encoding
-        self._helper = helper
-        self._project = project
-        self._key = key
-        self._auth = auth
-        self._client_ip = client_ip
-        self._decoded = False
-
-    def _decode(self):
-        data = self._data
-        content_encoding = self._content_encoding
-        helper = self._helper
-        auth = self._auth
-
-        # TODO(dcramer): CSP is passing already decoded JSON, which sort of
-        # defeats the purpose of a lot of lazy evaluation. It needs refactored
-        # to avoid doing that.
-        if isinstance(data, six.binary_type):
-            if content_encoding == 'gzip':
-                data = helper.decompress_gzip(data)
-            elif content_encoding == 'deflate':
-                data = helper.decompress_deflate(data)
-            elif data[0] != b'{':
-                data = helper.decode_and_decompress_data(data)
-            else:
-                data = helper.decode_data(data)
-        if isinstance(data, six.text_type):
-            data = helper.safely_load_json_string(data)
-
-        # We need data validation/etc to apply as part of LazyData so that
-        # if there are filters present, they can operate on a normalized
-        # version of the data
-
-        # mutates data
-        data = helper.validate_data(data)
-
-        data['project'] = self._project.id
-        data['key_id'] = self._key.id
-        data['sdk'] = data.get('sdk') or helper.parse_client_as_sdk(auth.client)
-
-        # does not mutate data, must use return value of normalize
-        manager = EventManager(data, version=auth.version)
-        self._data = manager.normalize(request_env={
-            'client_ip': self._client_ip,
-            'auth': self._auth,
-        })
-
-        self._decoded = True
-
-    def __getitem__(self, name):
-        if not self._decoded:
-            self._decode()
-        return self._data[name]
-
-    def __setitem__(self, name, value):
-        if not self._decoded:
-            self._decode()
-        self._data[name] = value
-
-    def __delitem__(self, name):
-        if not self._decoded:
-            self._decode()
-        del self._data[name]
-
-    def __contains__(self, name):
-        if not self._decoded:
-            self._decode()
-        return name in self._data
-
-    def __len__(self):
-        if not self._decoded:
-            self._decode()
-        return len(self._data)
-
-    def __iter__(self):
-        if not self._decoded:
-            self._decode()
-        return iter(self._data)
-
-
-DOWNGRADE_DATA_TYPES = CANONICAL_TYPES + (LazyData,)
+            f = GzipFile(fileobj=fp)
+            return f.read().decode("utf-8")
+        finally:
+            f.close()
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.debug(six.text_type(e), exc_info=True)
+        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
+
+
+def decode_and_decompress_data(encoded_data):
+    try:
+        try:
+            return decompress(encoded_data).decode("utf-8")
+        except zlib.error:
+            return base64.b64decode(encoded_data).decode("utf-8")
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.debug(six.text_type(e), exc_info=True)
+        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
+
+
+def decode_data(encoded_data):
+    try:
+        return encoded_data.decode("utf-8")
+    except UnicodeDecodeError as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.debug(six.text_type(e), exc_info=True)
+        raise APIError("Bad data decoding request (%s, %s)" % (type(e).__name__, e))
+
+
+def safely_load_json_string(json_string):
+    try:
+        if isinstance(json_string, six.binary_type):
+            json_string = json_string.decode("utf-8")
+        obj = json.loads(json_string)
+        assert isinstance(obj, dict)
+    except Exception as e:
+        # This error should be caught as it suggests that there's a
+        # bug somewhere in the client's code.
+        logger.debug(six.text_type(e), exc_info=True)
+        raise APIError(
+            "Bad data reconstructing object (%s, %s)" % (type(e).__name__, e)
+        )
+    return obj
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 4e7e03e5e2..66a9f187f6 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -9,6 +9,8 @@ from __future__ import absolute_import, print_function
 import logging
 import re
 import six
+import jsonschema
+
 
 from datetime import datetime, timedelta
 from collections import OrderedDict
@@ -18,11 +20,20 @@ from django.utils import timezone
 from django.utils.encoding import force_bytes, force_text
 from hashlib import md5
 
-from sentry import buffer, eventtypes, eventstream, features, tsdb
+from sentry import buffer, eventtypes, eventstream, features, tsdb, filters
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, LOG_LEVELS_MAP, DEFAULT_LOG_LEVEL,
     DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS
 )
+from sentry.coreapi import (
+    APIError,
+    APIForbidden,
+    decompress_gzip,
+    decompress_deflate,
+    decode_and_decompress_data,
+    decode_data,
+    safely_load_json_string,
+)
 from sentry.interfaces.base import get_interface, InterfaceValidationError
 from sentry.interfaces.exception import normalize_mechanism_meta
 from sentry.interfaces.schemas import validate_and_default_interface
@@ -30,8 +41,8 @@ from sentry.lang.native.utils import get_sdk_from_event
 from sentry.models import (
     Activity, Environment, Event, EventError, EventMapping, EventUser, Group,
     GroupEnvironment, GroupHash, GroupRelease, GroupResolution, GroupStatus,
-    Project, Release, ReleaseEnvironment, ReleaseProject, ReleaseProjectEnvironment,
-    UserReport
+    Project, Release, ReleaseEnvironment, ReleaseProject,
+    ReleaseProjectEnvironment, UserReport
 )
 from sentry.plugins import plugins
 from sentry.signals import event_discarded, event_saved, first_event_received
@@ -39,6 +50,12 @@ from sentry.tasks.integrations import kick_off_status_syncs
 from sentry.utils import metrics
 from sentry.utils.cache import default_cache
 from sentry.utils.canonical import CanonicalKeyDict
+from sentry.utils.data_filters import (
+    is_valid_ip,
+    is_valid_release,
+    is_valid_error_message,
+    FilterStatKeys,
+)
 from sentry.utils.dates import to_timestamp
 from sentry.utils.db import is_postgres, is_mysql
 from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
@@ -47,9 +64,18 @@ from sentry.utils.validators import is_float
 from sentry.stacktraces import normalize_in_app
 
 
+logger = logging.getLogger("sentry.events")
+
+
 HASH_RE = re.compile(r'^[0-9a-f]{32}$')
 DEFAULT_FINGERPRINT_VALUES = frozenset(['{{ default }}', '{{default}}'])
 ALLOWED_FUTURE_DELTA = timedelta(minutes=1)
+SECURITY_REPORT_INTERFACES = (
+    "sentry.interfaces.Csp",
+    "hpkp",
+    "expectct",
+    "expectstaple",
+)
 
 
 def count_limit(count):
@@ -141,6 +167,19 @@ def get_hashes_from_fingerprint_with_reason(event, fingerprint):
     return list(hashes.items())
 
 
+def parse_client_as_sdk(value):
+    if not value:
+        return {}
+    try:
+        name, version = value.split("/", 1)
+    except ValueError:
+        try:
+            name, version = value.split(" ", 1)
+        except ValueError:
+            return {}
+    return {"name": name, "version": version}
+
+
 if not settings.SENTRY_SAMPLE_DATA:
 
     def should_sample(current_datetime, last_seen, times_seen):
@@ -308,16 +347,106 @@ class InvalidTimestamp(Exception):
     pass
 
 
-class EventManager(object):
-    logger = logging.getLogger('sentry.events')
+def _decode_event(data, content_encoding):
+    if isinstance(data, six.binary_type):
+        if content_encoding == 'gzip':
+            data = decompress_gzip(data)
+        elif content_encoding == 'deflate':
+            data = decompress_deflate(data)
+        elif data[0] != b'{':
+            data = decode_and_decompress_data(data)
+        else:
+            data = decode_data(data)
+    if isinstance(data, six.text_type):
+        data = safely_load_json_string(data)
+
+    return CanonicalKeyDict(data)
+
 
-    def __init__(self, data, version='5'):
-        self.data = CanonicalKeyDict(data)
+class EventManager(object):
+    """
+    Handles normalization in both the store endpoint and the save task. The
+    intention is to swap this class out with a reimplementation in Rust.
+    """
+
+    def __init__(
+        self,
+        data,
+        version='5',
+        project=None,
+        client_ip=None,
+        user_agent=None,
+        auth=None,
+        key=None,
+        content_encoding=None,
+    ):
+        self._data = _decode_event(data, content_encoding=content_encoding)
         self.version = version
+        self._project = project
+        self._client_ip = client_ip
+        self._user_agent = user_agent
+        self._auth = auth
+        self._key = key
+
+    def process_csp_report(self):
+        """Only called from the CSP report endpoint."""
+        data = self._data
+
+        try:
+            interface = get_interface(data.pop('interface'))
+            report = data.pop('report')
+        except KeyError:
+            raise APIForbidden('No report or interface data')
+
+        # To support testing, we can either accept a built interface instance, or the raw data in
+        # which case we build the instance ourselves
+        try:
+            instance = (
+                report if isinstance(report, interface) else interface.from_raw(report)
+            )
+        except jsonschema.ValidationError as e:
+            raise APIError('Invalid security report: %s' % str(e).splitlines()[0])
+
+        def clean(d):
+            return dict(filter(lambda x: x[1], d.items()))
+
+        data.update(
+            {
+                'logger': 'csp',
+                'message': instance.get_message(),
+                'culprit': instance.get_culprit(),
+                instance.get_path(): instance.to_json(),
+                'tags': instance.get_tags(),
+                'errors': [],
+                'sentry.interfaces.User': {'ip_address': self._client_ip},
+                # Construct a faux Http interface based on the little information we have
+                # This is a bit weird, since we don't have nearly enough
+                # information to create an Http interface, but
+                # this automatically will pick up tags for the User-Agent
+                # which is actually important here for CSP
+                'sentry.interfaces.Http': {
+                    'url': instance.get_origin(),
+                    'headers': clean(
+                        {
+                            'User-Agent': self._user_agent,
+                            'Referer': instance.get_referrer(),
+                        }
+                    ),
+                },
+            }
+        )
+
+        self._data = data
+
+    def normalize(self):
+        data = self._data
+        if self._project is not None:
+            data['project'] = self._project.id
+        if self._key is not None:
+            data['key_id'] = self._key.id
+        if self._auth is not None:
+            data['sdk'] = data.get('sdk') or parse_client_as_sdk(self._auth.client)
 
-    def normalize(self, request_env=None):
-        request_env = request_env or {}
-        data = self.data
         errors = data['errors'] = []
 
         # Before validating with a schema, attempt to cast values to their desired types
@@ -383,19 +512,18 @@ class EventManager(object):
                             'logentry', {})['formatted'] = msg_meta
 
         # Fill in ip addresses marked as {{auto}}
-        client_ip = request_env.get('client_ip')
-        if client_ip:
+        if self._client_ip:
             if get_path(data, ['sentry.interfaces.Http', 'env', 'REMOTE_ADDR']) == '{{auto}}':
-                data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = client_ip
+                data['sentry.interfaces.Http']['env']['REMOTE_ADDR'] = self._client_ip
 
             if get_path(data, ['request', 'env', 'REMOTE_ADDR']) == '{{auto}}':
-                data['request']['env']['REMOTE_ADDR'] = client_ip
+                data['request']['env']['REMOTE_ADDR'] = self._client_ip
 
             if get_path(data, ['sentry.interfaces.User', 'ip_address']) == '{{auto}}':
-                data['sentry.interfaces.User']['ip_address'] = client_ip
+                data['sentry.interfaces.User']['ip_address'] = self._client_ip
 
             if get_path(data, ['user', 'ip_address']) == '{{auto}}':
-                data['user']['ip_address'] = client_ip
+                data['user']['ip_address'] = self._client_ip
 
         # Validate main event body and tags against schema.
         # XXX(ja): jsonschema does not like CanonicalKeyDict, so we need to pass
@@ -414,13 +542,13 @@ class EventManager(object):
             value = data.pop(k)
 
             if not value:
-                self.logger.debug('Ignored empty interface value: %s', k)
+                logger.debug('Ignored empty interface value: %s', k)
                 continue
 
             try:
                 interface = get_interface(k)
             except ValueError:
-                self.logger.debug('Ignored unknown attribute: %s', k)
+                logger.debug('Ignored unknown attribute: %s', k)
                 errors.append({'type': EventError.INVALID_ATTRIBUTE, 'name': k})
                 continue
 
@@ -428,8 +556,8 @@ class EventManager(object):
                 inst = interface.to_python(value)
                 data[inst.get_path()] = inst.to_json()
             except Exception as e:
-                log = self.logger.debug if isinstance(
-                    e, InterfaceValidationError) else self.logger.error
+                log = logger.debug if isinstance(
+                    e, InterfaceValidationError) else logger.error
                 log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
                 errors.append({'type': EventError.INVALID_DATA, 'name': k, 'value': value})
 
@@ -510,15 +638,14 @@ class EventManager(object):
 
         # If there is no User ip_addres, update it either from the Http interface
         # or the client_ip of the request.
-        auth = request_env.get('auth')
-        is_public = auth and auth.is_public
+        is_public = self._auth and self._auth.is_public
         add_ip_platforms = ('javascript', 'cocoa', 'objc')
 
         http_ip = data.get('sentry.interfaces.Http', {}).get('env', {}).get('REMOTE_ADDR')
         if http_ip:
             data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', http_ip)
-        elif client_ip and (is_public or data.get('platform') in add_ip_platforms):
-            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', client_ip)
+        elif self._client_ip and (is_public or data.get('platform') in add_ip_platforms):
+            data.setdefault('sentry.interfaces.User', {}).setdefault('ip_address', self._client_ip)
 
         # Trim values
         data['logger'] = trim(data['logger'].strip(), 64)
@@ -530,13 +657,60 @@ class EventManager(object):
         if data['transaction']:
             data['transaction'] = trim(data['transaction'], MAX_CULPRIT_LENGTH)
 
-        return data
+        self._data = data
+
+    def should_filter(self):
+        '''
+        returns (result: bool, reason: string or None)
+        Result is True if an event should be filtered
+        The reason for filtering is passed along as a string
+        so that we can store it in metrics
+        '''
+        for name in SECURITY_REPORT_INTERFACES:
+            if name in self._data:
+                interface = get_interface(name)
+                if interface.to_python(self._data[name]).should_filter(self._project):
+                    return (True, FilterStatKeys.INVALID_CSP)
+
+        if self._client_ip and not is_valid_ip(self._project, self._client_ip):
+            return (True, FilterStatKeys.IP_ADDRESS)
+
+        release = self._data.get('release')
+        if release and not is_valid_release(self._project, release):
+            return (True, FilterStatKeys.RELEASE_VERSION)
+
+        message_interface = self._data.get('sentry.interfaces.Message', {})
+        error_message = message_interface.get('formatted', '') or message_interface.get(
+            'message', ''
+        )
+        if error_message and not is_valid_error_message(self._project, error_message):
+            return (True, FilterStatKeys.ERROR_MESSAGE)
+
+        for exception_interface in self._data.get(
+            'sentry.interfaces.Exception', {}
+        ).get('values', []):
+            message = u': '.join(
+                filter(None, map(exception_interface.get, ['type', 'value']))
+            )
+            if message and not is_valid_error_message(self._project, message):
+                return (True, FilterStatKeys.ERROR_MESSAGE)
+
+        for filter_cls in filters.all():
+            filter_obj = filter_cls(self._project)
+            if filter_obj.is_enabled() and filter_obj.test(self._data):
+                return (True, six.text_type(filter_obj.id))
+
+        return (False, None)
 
-    def save(self, project, raw=False):
+    def get_data(self):
+        return self._data
+
+    def save(self, project_id, raw=False):
         from sentry.tasks.post_process import index_event_tags
-        data = self.data
 
-        project = Project.objects.get_from_cache(id=project)
+        data = self._data
+
+        project = Project.objects.get_from_cache(id=project_id)
 
         # Check to make sure we're not about to do a bunch of work that's
         # already been done if we've processed an event with this ID. (This
@@ -551,7 +725,7 @@ class EventManager(object):
         except Event.DoesNotExist:
             pass
         else:
-            self.logger.info(
+            logger.info(
                 'duplicate.found',
                 exc_info=True,
                 extra={
@@ -791,7 +965,7 @@ class EventManager(object):
                 with transaction.atomic(using=router.db_for_write(EventMapping)):
                     EventMapping.objects.create(project=project, group=group, event_id=event_id)
             except IntegrityError:
-                self.logger.info(
+                logger.info(
                     'duplicate.found',
                     exc_info=True,
                     extra={
@@ -891,7 +1065,7 @@ class EventManager(object):
                 with transaction.atomic(using=router.db_for_write(Event)):
                     event.save()
             except IntegrityError:
-                self.logger.info(
+                logger.info(
                     'duplicate.found',
                     exc_info=True,
                     extra={
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
index fb08d0913a..18ff5ff411 100644
--- a/src/sentry/filters/browser_extensions.py
+++ b/src/sentry/filters/browser_extensions.py
@@ -42,7 +42,8 @@ EXTENSION_EXC_VALUES = re.compile(
                 # See: https://forum.sentry.io/t/error-in-raven-js-plugin-setsuspendstate/481/
                 'plugin.setSuspendState is not a function',
                 # Google Translate extension
-                # See: https://medium.com/@amir.harel/a-b-target-classname-indexof-is-not-a-function-at-least-not-mine-8e52f7be64ca
+                # See:
+                # https://medium.com/@amir.harel/a-b-target-classname-indexof-is-not-a-function-at-least-not-mine-8e52f7be64ca
                 'a[b].target.className.indexOf is not a function',
             )
         )
diff --git a/src/sentry/integrations/slack/utils.py b/src/sentry/integrations/slack/utils.py
index 384b16db2e..d169c064b2 100644
--- a/src/sentry/integrations/slack/utils.py
+++ b/src/sentry/integrations/slack/utils.py
@@ -158,7 +158,9 @@ def build_attachment(group, event=None, tags=None, identity=None, actions=None,
     teams = get_team_assignees(group)
 
     logo_url = absolute_uri(get_asset_url('sentry', 'images/sentry-email-avatar.png'))
-    color = LEVEL_TO_COLOR.get(event.get_tag('level'), 'error') if event else LEVEL_TO_COLOR['error']
+    color = LEVEL_TO_COLOR.get(
+        event.get_tag('level'),
+        'error') if event else LEVEL_TO_COLOR['error']
 
     text = build_attachment_text(group, event) or ''
 
diff --git a/src/sentry/utils/samples.py b/src/sentry/utils/samples.py
index a89261f40b..0c5f788bde 100644
--- a/src/sentry/utils/samples.py
+++ b/src/sentry/utils/samples.py
@@ -14,7 +14,6 @@ from datetime import datetime, timedelta
 import six
 
 from sentry.constants import DATA_ROOT, INTEGRATION_ID_TO_PLATFORM_DATA
-from sentry.coreapi import ClientApiHelper
 from sentry.event_manager import EventManager
 from sentry.interfaces.user import User as UserInterface
 from sentry.utils import json
@@ -212,7 +211,6 @@ def create_sample_event(project, platform=None, default=None,
 
     data.update(kwargs)
 
-    data = ClientApiHelper().validate_data(data)
     manager = EventManager(data)
     manager.normalize()
     return manager.save(project.id, raw=raw)
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 1fba568c4a..5ae0ea9ecd 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -32,9 +32,9 @@ from sentry import features, quotas, tsdb, options
 from sentry.app import raven
 from sentry.attachments import CachedAttachment
 from sentry.coreapi import (
-    APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, LazyData,
-    MinidumpApiHelper,
+    APIError, APIForbidden, APIRateLimited, ClientApiHelper, SecurityApiHelper, MinidumpApiHelper, safely_load_json_string,
 )
+from sentry.event_manager import EventManager
 from sentry.interfaces import schemas
 from sentry.interfaces.base import get_interface
 from sentry.lang.native.utils import merge_minidump_event
@@ -367,6 +367,10 @@ class StoreView(APIView):
             response['X-Sentry-ID'] = response_or_event_id
         return response
 
+    def pre_normalize(self, data, helper):
+        """Mutate the given EventManager. Hook for subtypes of StoreView (CSP)"""
+        pass
+
     def process(self, request, project, key, auth, helper, data, attachments=None, **kwargs):
         metrics.incr('events.total')
 
@@ -375,25 +379,25 @@ class StoreView(APIView):
 
         remote_addr = request.META['REMOTE_ADDR']
 
-        data = LazyData(
-            data=data,
-            content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
-            helper=helper,
+        event_mgr = EventManager(
+            data,
             project=project,
             key=key,
             auth=auth,
             client_ip=remote_addr,
+            user_agent=helper.context.agent,
+            content_encoding=request.META.get('HTTP_CONTENT_ENCODING', ''),
         )
+        del data
+
+        self.pre_normalize(event_mgr, helper)
+        event_mgr.normalize()
+
+        event_received.send_robust(ip=remote_addr, project=project, sender=type(self))
 
-        event_received.send_robust(
-            ip=remote_addr,
-            project=project,
-            sender=type(self),
-        )
         start_time = time()
         tsdb_start_time = to_datetime(start_time)
-        should_filter, filter_reason = helper.should_filter(
-            project, data, ip_address=remote_addr)
+        should_filter, filter_reason = event_mgr.should_filter()
         if should_filter:
             increment_list = [
                 (tsdb.models.project_total_received, project.id),
@@ -480,6 +484,9 @@ class StoreView(APIView):
         org_options = OrganizationOption.objects.get_all_values(
             project.organization_id)
 
+        data = event_mgr.get_data()
+        del event_mgr
+
         event_id = data['event_id']
 
         # TODO(dcramer): ideally we'd only validate this if the event_id was
@@ -757,7 +764,7 @@ class SecurityReportView(StoreView):
         )
 
     def post(self, request, project, helper, **kwargs):
-        json_body = helper.safely_load_json_string(request.body)
+        json_body = safely_load_json_string(request.body)
         report_type = self.security_report_type(json_body)
         if report_type is None:
             raise APIError('Unrecognized security report type')
@@ -802,6 +809,9 @@ class SecurityReportView(StoreView):
                     return report_type_for_key[k]
         return None
 
+    def pre_normalize(self, data, helper):
+        data.process_csp_report()
+
 
 @cache_control(max_age=3600, public=True)
 def robots_txt(request):
diff --git a/tests/sentry/coreapi/__init__.py b/tests/sentry/coreapi/__init__.py
deleted file mode 100644
index c3961685ab..0000000000
--- a/tests/sentry/coreapi/__init__.py
+++ /dev/null
@@ -1 +0,0 @@
-from __future__ import absolute_import
diff --git a/tests/sentry/coreapi/test_auth_from_request.py b/tests/sentry/coreapi/test_auth_from_request.py
new file mode 100644
index 0000000000..5ccbaaf37e
--- /dev/null
+++ b/tests/sentry/coreapi/test_auth_from_request.py
@@ -0,0 +1,89 @@
+from __future__ import absolute_import
+
+import mock
+import pytest
+
+from django.core.exceptions import SuspiciousOperation
+
+from sentry.coreapi import ClientApiHelper, APIUnauthorized
+
+
+def test_valid():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
+    request.GET = {}
+    result = helper.auth_from_request(request)
+    assert result.public_key == 'value'
+
+
+def test_valid_missing_space():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,biz=baz'}
+    request.GET = {}
+    result = helper.auth_from_request(request)
+    assert result.public_key == 'value'
+
+
+def test_valid_ignore_case():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'SeNtRy sentry_key=value, biz=baz'}
+    request.GET = {}
+    result = helper.auth_from_request(request)
+    assert result.public_key == 'value'
+
+
+def test_invalid_header_defers_to_GET():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'foobar'}
+    request.GET = {'sentry_version': '1', 'foo': 'bar'}
+    result = helper.auth_from_request(request)
+    assert result.version == '1'
+
+
+def test_invalid_legacy_header_defers_to_GET():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_AUTHORIZATION': 'foobar'}
+    request.GET = {'sentry_version': '1', 'foo': 'bar'}
+    result = helper.auth_from_request(request)
+    assert result.version == '1'
+
+
+def test_invalid_header_bad_token():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentryfoo'}
+    request.GET = {}
+    with pytest.raises(APIUnauthorized):
+        helper.auth_from_request(request)
+
+
+def test_invalid_header_missing_pair():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry foo'}
+    request.GET = {}
+    with pytest.raises(APIUnauthorized):
+        helper.auth_from_request(request)
+
+
+def test_invalid_malformed_value():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,,biz=baz'}
+    request.GET = {}
+    with pytest.raises(APIUnauthorized):
+        helper.auth_from_request(request)
+
+
+def test_multiple_auth_suspicious():
+    helper = ClientApiHelper()
+    request = mock.Mock()
+    request.GET = {'sentry_version': '1', 'foo': 'bar'}
+    request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
+    with pytest.raises(SuspiciousOperation):
+        helper.auth_from_request(request)
diff --git a/tests/sentry/coreapi/test_coreapi.py b/tests/sentry/coreapi/test_coreapi.py
new file mode 100644
index 0000000000..349ea27138
--- /dev/null
+++ b/tests/sentry/coreapi/test_coreapi.py
@@ -0,0 +1,93 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import six
+import pytest
+
+from sentry.coreapi import (
+    APIError,
+    APIUnauthorized,
+    Auth,
+    ClientApiHelper,
+    decode_data,
+    safely_load_json_string
+)
+from sentry.interfaces.base import get_interface
+from sentry.testutils import TestCase
+
+
+class BaseAPITest(TestCase):
+    helper_cls = ClientApiHelper
+
+    def setUp(self):
+        self.user = self.create_user('coreapi@example.com')
+        self.team = self.create_team(name='Foo')
+        self.project = self.create_project(teams=[self.team])
+        self.pk = self.project.key_set.get_or_create()[0]
+        self.helper = self.helper_cls(agent='Awesome Browser', ip_address='198.51.100.0')
+
+
+class ProjectIdFromAuthTest(BaseAPITest):
+    def test_invalid_if_missing_key(self):
+        with pytest.raises(APIUnauthorized):
+            self.helper.project_id_from_auth(Auth({}))
+
+    def test_valid_with_key(self):
+        auth = Auth({'sentry_key': self.pk.public_key})
+        result = self.helper.project_id_from_auth(auth)
+        assert result == self.project.id
+
+    def test_invalid_key(self):
+        auth = Auth({'sentry_key': 'z'})
+        with pytest.raises(APIUnauthorized):
+            self.helper.project_id_from_auth(auth)
+
+    def test_invalid_secret(self):
+        auth = Auth({'sentry_key': self.pk.public_key, 'sentry_secret': 'z'})
+        with pytest.raises(APIUnauthorized):
+            self.helper.project_id_from_auth(auth)
+
+    def test_nonascii_key(self):
+        auth = Auth({'sentry_key': '\xc3\xbc'})
+        with pytest.raises(APIUnauthorized):
+            self.helper.project_id_from_auth(auth)
+
+
+def test_safely_load_json_string_valid_payload():
+    data = safely_load_json_string('{"foo": "bar"}')
+    assert data == {'foo': 'bar'}
+
+
+def test_safely_load_json_string_invalid_json():
+    with pytest.raises(APIError):
+        safely_load_json_string('{')
+
+
+def test_safely_load_json_string_unexpected_type():
+    with pytest.raises(APIError):
+        safely_load_json_string('1')
+
+
+def test_valid_data():
+    data = decode_data('foo')
+    assert data == u'foo'
+    assert isinstance(data, six.text_type)
+
+
+def test_invalid_data():
+    with pytest.raises(APIError):
+        decode_data('\x99')
+
+
+def test_get_interface_does_not_let_through_disallowed_name():
+    with pytest.raises(ValueError):
+        get_interface('subprocess')
+
+
+def test_get_interface_allows_http():
+    from sentry.interfaces.http import Http
+    result = get_interface('sentry.interfaces.Http')
+    assert result is Http
+    result = get_interface('request')
+    assert result is Http
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
deleted file mode 100644
index 013f5287c7..0000000000
--- a/tests/sentry/coreapi/tests.py
+++ /dev/null
@@ -1,850 +0,0 @@
-# -*- coding: utf-8 -*-
-
-from __future__ import absolute_import
-
-from datetime import datetime, timedelta
-from functools import partial
-import six
-import mock
-import pytest
-
-from django.core.exceptions import SuspiciousOperation
-from sentry.constants import VERSION_LENGTH, MAX_CULPRIT_LENGTH
-from uuid import UUID
-
-from sentry.coreapi import (
-    APIError,
-    APIUnauthorized,
-    Auth,
-    ClientApiHelper,
-    SecurityApiHelper,
-)
-from sentry.event_manager import EventManager
-from sentry.interfaces.base import get_interface
-from sentry.testutils import TestCase
-
-
-class BaseAPITest(TestCase):
-    helper_cls = ClientApiHelper
-
-    def setUp(self):
-        self.user = self.create_user('coreapi@example.com')
-        self.team = self.create_team(name='Foo')
-        self.project = self.create_project(teams=[self.team])
-        self.pk = self.project.key_set.get_or_create()[0]
-        self.helper = self.helper_cls(agent='Awesome Browser', ip_address='198.51.100.0')
-
-    def validate_and_normalize(self, data, request_env=None):
-        data = self.helper.validate_data(data)
-        return EventManager(data).normalize(request_env=request_env)
-
-
-class AuthFromRequestTest(BaseAPITest):
-    def test_valid(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
-        request.GET = {}
-        result = self.helper.auth_from_request(request)
-        assert result.public_key == 'value'
-
-    def test_valid_missing_space(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,biz=baz'}
-        request.GET = {}
-        result = self.helper.auth_from_request(request)
-        assert result.public_key == 'value'
-
-    def test_valid_ignore_case(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'SeNtRy sentry_key=value, biz=baz'}
-        request.GET = {}
-        result = self.helper.auth_from_request(request)
-        assert result.public_key == 'value'
-
-    def test_invalid_header_defers_to_GET(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'foobar'}
-        request.GET = {'sentry_version': '1', 'foo': 'bar'}
-        result = self.helper.auth_from_request(request)
-        assert result.version == '1'
-
-    def test_invalid_legacy_header_defers_to_GET(self):
-        request = mock.Mock()
-        request.META = {'HTTP_AUTHORIZATION': 'foobar'}
-        request.GET = {'sentry_version': '1', 'foo': 'bar'}
-        result = self.helper.auth_from_request(request)
-        assert result.version == '1'
-
-    def test_invalid_header_bad_token(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentryfoo'}
-        request.GET = {}
-        with self.assertRaises(APIUnauthorized):
-            self.helper.auth_from_request(request)
-
-    def test_invalid_header_missing_pair(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry foo'}
-        request.GET = {}
-        with self.assertRaises(APIUnauthorized):
-            self.helper.auth_from_request(request)
-
-    def test_invalid_malformed_value(self):
-        request = mock.Mock()
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value,,biz=baz'}
-        request.GET = {}
-        with self.assertRaises(APIUnauthorized):
-            self.helper.auth_from_request(request)
-
-    def test_multiple_auth_suspicious(self):
-        request = mock.Mock()
-        request.GET = {'sentry_version': '1', 'foo': 'bar'}
-        request.META = {'HTTP_X_SENTRY_AUTH': 'Sentry sentry_key=value, biz=baz'}
-        with pytest.raises(SuspiciousOperation):
-            self.helper.auth_from_request(request)
-
-
-class ProjectIdFromAuthTest(BaseAPITest):
-    def test_invalid_if_missing_key(self):
-        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, Auth({}))
-
-    def test_valid_with_key(self):
-        auth = Auth({'sentry_key': self.pk.public_key})
-        result = self.helper.project_id_from_auth(auth)
-        self.assertEquals(result, self.project.id)
-
-    def test_invalid_key(self):
-        auth = Auth({'sentry_key': 'z'})
-        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
-
-    def test_invalid_secret(self):
-        auth = Auth({'sentry_key': self.pk.public_key, 'sentry_secret': 'z'})
-        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
-
-    def test_nonascii_key(self):
-        auth = Auth({'sentry_key': '\xc3\xbc'})
-        self.assertRaises(APIUnauthorized, self.helper.project_id_from_auth, auth)
-
-
-class ValidateDataTest(BaseAPITest):
-    def test_timestamp(self):
-        from sentry.event_manager import process_timestamp
-        patched = partial(process_timestamp, current_datetime=datetime(2018, 4, 10, 14, 33, 18))
-        with mock.patch('sentry.event_manager.process_timestamp', patched):
-            data = self.validate_and_normalize({
-                'timestamp': '2018-04-10T14:33:18Z',
-            })
-            assert len(data['errors']) == 0
-
-        data = self.validate_and_normalize({
-            'timestamp': 'not-a-timestamp',
-        })
-        assert len(data['errors']) == 1
-
-        now = datetime.utcnow()
-        data = self.validate_and_normalize({
-            'timestamp': now.strftime('%Y-%m-%dT%H:%M:%SZ'),
-        })
-        assert len(data['errors']) == 0
-
-        future = now + timedelta(minutes=2)
-        data = self.validate_and_normalize({
-            'timestamp': future.strftime('%Y-%m-%dT%H:%M:%SZ'),
-        })
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'future_timestamp'
-
-        past = now - timedelta(days=31)
-        data = self.validate_and_normalize({
-            'timestamp': past.strftime('%Y-%m-%dT%H:%M:%SZ'),
-        })
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'past_timestamp'
-
-    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
-    def test_empty_event_id(self, uuid4):
-        data = self.validate_and_normalize({
-            'event_id': '',
-        })
-        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
-
-    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
-    def test_missing_event_id(self, uuid4):
-        data = self.validate_and_normalize({})
-        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
-
-    @mock.patch('uuid.uuid4', return_value=UUID('031667ea1758441f92c7995a428d2d14'))
-    def test_invalid_event_id(self, uuid4):
-        data = self.validate_and_normalize({
-            'event_id': 'a' * 33,
-        })
-        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == 'event_id'
-        assert data['errors'][0]['value'] == 'a' * 33
-
-        data = self.validate_and_normalize({
-            'event_id': 'xyz',
-        })
-        assert data['event_id'] == '031667ea1758441f92c7995a428d2d14'
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'event_id'
-        assert data['errors'][0]['value'] == 'xyz'
-
-    def test_unknown_attribute(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'foo': 'bar',
-        })
-        assert 'foo' not in data
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_attribute'
-        assert data['errors'][0]['name'] == 'foo'
-
-    def test_invalid_interface_name(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'foo.baz': 'bar',
-        })
-        assert 'foo.baz' not in data
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_attribute'
-        assert data['errors'][0]['name'] == 'foo.baz'
-
-    def test_invalid_interface_import_path(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'sentry.interfaces.Exception2': 'bar',
-        })
-        assert 'sentry.interfaces.Exception2' not in data
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_attribute'
-        assert data['errors'][0]['name'] == 'sentry.interfaces.Exception2'
-
-    def test_does_expand_list(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'exception':
-                [{
-                    'type': 'ValueError',
-                    'value': 'hello world',
-                    'module': 'foo.bar',
-                }]
-        })
-        assert 'sentry.interfaces.Exception' in data
-
-    def test_log_level_as_string(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'level': 'error',
-        })
-        assert data['level'] == 40
-
-    def test_invalid_log_level(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'level': 'foobar',
-        })
-        assert data['level'] == 40
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'level'
-        assert data['errors'][0]['value'] == 'foobar'
-
-    def test_tags_as_string(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': 'bar',
-        })
-        assert data['tags'] == []
-
-    def test_tags_with_spaces(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': {
-                'foo bar': 'baz bar'
-            },
-        })
-        assert data['tags'] == [('foo-bar', 'baz bar')]
-
-    def test_tags_out_of_bounds(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': {
-                'f' * 33: 'value',
-                'foo': 'v' * 201,
-                'bar': 'value'
-            },
-        })
-        assert data['tags'] == [('bar', 'value')]
-        assert len(data['errors']) == 2
-
-    def test_tags_as_invalid_pair(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': [('foo', 'bar'), ('biz', 'baz', 'boz')],
-        })
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'tags'
-        assert data['errors'][0]['value'] == [('foo', 'bar'), ('biz', 'baz', 'boz')]
-
-    def test_reserved_tags(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': [('foo', 'bar'), ('release', 'abc123')],
-        })
-        assert data['tags'] == [('foo', 'bar')]
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'tags'
-        assert data['errors'][0]['value'] == ('release', 'abc123')
-
-    def test_tag_value(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': [('foo', 'b\nar'), ('biz', 'baz')],
-        })
-        assert data['tags'] == [('biz', 'baz')]
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'tags'
-        assert data['errors'][0]['value'] == ('foo', 'b\nar')
-
-    def test_extra_as_string(self):
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'extra': 'bar',
-        })
-        assert data['extra'] == {}
-
-    def test_release_tag_max_len(self):
-        release_key = u'sentry:release'
-        release_value = ('a' * VERSION_LENGTH)
-        data = self.validate_and_normalize({
-            'message': 'foo',
-            'tags': [
-                [release_key, release_value],
-            ],
-        })
-        assert not data['errors']
-        assert data['tags'] == [(release_key, release_value)]
-
-    def test_server_name_too_long(self):
-        key = u'server_name'
-        value = ('a' * (MAX_CULPRIT_LENGTH + 1))
-        data = self.validate_and_normalize({
-            key: value,
-        })
-        assert not data.get(key)
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == key
-        assert data['errors'][0]['value'] == value
-
-    def test_site_too_long(self):
-        key = u'site'
-        value = ('a' * (MAX_CULPRIT_LENGTH + 1))
-        data = self.validate_and_normalize({
-            key: value,
-        })
-        assert not data.get(key)
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == key
-        assert data['errors'][0]['value'] == value
-
-    def test_release_too_long(self):
-        data = self.validate_and_normalize({
-            'release': 'a' * (VERSION_LENGTH + 1),
-        })
-        assert not data.get('release')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == 'release'
-        assert data['errors'][0]['value'] == 'a' * (VERSION_LENGTH + 1)
-
-    def test_release_as_non_string(self):
-        data = self.validate_and_normalize({
-            'release': 42,
-        })
-        assert data.get('release') == '42'
-
-    def test_distribution_too_long(self):
-        data = self.validate_and_normalize({
-            'release': 'a' * 62,
-            'dist': 'b' * 65,
-        })
-        assert not data.get('dist')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == 'dist'
-        assert data['errors'][0]['value'] == 'b' * 65
-
-    def test_distribution_bad_char(self):
-        data = self.validate_and_normalize({
-            'release': 'a' * 62,
-            'dist': '^%',
-        })
-        assert not data.get('dist')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'dist'
-        assert data['errors'][0]['value'] == '^%'
-
-    def test_distribution_strip(self):
-        data = self.validate_and_normalize({
-            'release': 'a' * 62,
-            'dist': ' foo ',
-        })
-        assert data.get('dist') == 'foo'
-
-    def test_distribution_as_non_string(self):
-        data = self.validate_and_normalize({
-            'release': '42',
-            'dist': 23,
-        })
-        assert data.get('release') == '42'
-        assert data.get('dist') == '23'
-
-    def test_distribution_no_release(self):
-        data = self.validate_and_normalize({
-            'dist': 23,
-        })
-        assert data.get('dist') is None
-
-    def test_valid_platform(self):
-        data = self.validate_and_normalize({
-            'platform': 'python',
-        })
-        assert data.get('platform') == 'python'
-
-    def test_no_platform(self):
-        data = self.validate_and_normalize({})
-        assert data.get('platform') == 'other'
-
-    def test_invalid_platform(self):
-        data = self.validate_and_normalize({
-            'platform': 'foobar',
-        })
-        assert data.get('platform') == 'other'
-
-    def test_environment_too_long(self):
-        data = self.validate_and_normalize({
-            'environment': 'a' * 65,
-        })
-        assert not data.get('environment')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == 'environment'
-        assert data['errors'][0]['value'] == 'a' * 65
-
-    def test_environment_invalid(self):
-        data = self.validate_and_normalize({
-            'environment': 'a/b',
-        })
-        assert not data.get('environment')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_environment'
-        assert data['errors'][0]['name'] == 'environment'
-        assert data['errors'][0]['value'] == 'a/b'
-
-    def test_environment_as_non_string(self):
-        data = self.validate_and_normalize({
-            'environment': 42,
-        })
-        assert data.get('environment') == '42'
-
-    def test_time_spent_too_large(self):
-        data = self.validate_and_normalize({
-            'time_spent': 2147483647 + 1,
-        })
-        assert not data.get('time_spent')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'value_too_long'
-        assert data['errors'][0]['name'] == 'time_spent'
-        assert data['errors'][0]['value'] == 2147483647 + 1
-
-    def test_time_spent_invalid(self):
-        data = self.validate_and_normalize({
-            'time_spent': 'lol',
-        })
-        assert not data.get('time_spent')
-        assert len(data['errors']) == 1
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'time_spent'
-        assert data['errors'][0]['value'] == 'lol'
-
-    def test_time_spent_non_int(self):
-        data = self.validate_and_normalize({
-            'time_spent': '123',
-        })
-        assert data['time_spent'] == 123
-
-    def test_fingerprints(self):
-        data = self.validate_and_normalize({
-            'fingerprint': '2012-01-01T10:30:45',
-        })
-        assert not data.get('fingerprint')
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'fingerprint'
-
-        data = self.validate_and_normalize({
-            'fingerprint': ['foo', ['bar']],
-        })
-        assert not data.get('fingerprint')
-        assert data['errors'][0]['type'] == 'invalid_data'
-        assert data['errors'][0]['name'] == 'fingerprint'
-
-        data = self.validate_and_normalize({
-            'fingerprint': ['{{default}}', 1, 'bar', 4.5, -2.7, True],
-        })
-        assert data.get('fingerprint') == ['{{default}}', '1', 'bar', '4', '-2', 'True']
-        assert len(data['errors']) == 0
-
-        data = self.validate_and_normalize({
-            'fingerprint': ['{{default}}', 1e100, -1e100, 1e10],
-        })
-        assert data.get('fingerprint') == ['{{default}}', '10000000000']
-        assert len(data['errors']) == 0
-
-        data = self.validate_and_normalize({
-            'fingerprint': [],
-        })
-        assert data.get('fingerprint') == []
-        assert len(data['errors']) == 0
-
-    def test_messages(self):
-        # Just 'message': wrap it in interface
-        data = self.validate_and_normalize({
-            'message': 'foo is bar',
-        })
-        assert 'message' not in data
-        assert data['sentry.interfaces.Message'] == {'message': 'foo is bar'}
-
-        # both 'message' and interface with no 'formatted' value, put 'message'
-        # into 'formatted'.
-        data = self.validate_and_normalize({
-            'message': 'foo is bar',
-            'sentry.interfaces.Message': {
-                'message': 'something else',
-            }
-        })
-        assert 'message' not in data
-        assert data['sentry.interfaces.Message'] == {
-            'message': 'something else',
-            'formatted': 'foo is bar'
-        }
-
-        # both 'message' and complete interface, 'message' is discarded
-        data = self.validate_and_normalize({
-            'message': 'foo is bar',
-            'sentry.interfaces.Message': {
-                'message': 'something else',
-                'formatted': 'something else formatted',
-            }
-        })
-        assert 'message' not in data
-        assert len(data['errors']) == 0
-        assert data['sentry.interfaces.Message'] == {
-            'message': 'something else',
-            'formatted': 'something else formatted'
-        }
-
-    @pytest.mark.skip(reason="Message behavior that didn't make a lot of sense.")
-    def test_messages_old_behavior(self):
-        # both 'message' and complete valid interface but interface has the same
-        # value for both keys so the 'formatted' value is discarded and ends up
-        # being replaced with 'message'
-        data = self.validate_and_normalize({
-            'message': 'foo is bar',
-            'sentry.interfaces.Message': {
-                'message': 'something else',
-                'formatted': 'something else',
-            }
-        })
-        assert 'message' not in data
-        assert len(data['errors']) == 0
-        assert data['sentry.interfaces.Message'] == {
-            'message': 'something else',
-            'formatted': 'foo is bar'
-        }
-
-        # interface discarded as invalid, replaced by new interface containing
-        # wrapped 'message'
-        data = self.validate_and_normalize({
-            'message': 'foo is bar',
-            'sentry.interfaces.Message': {
-                'invalid': 'invalid',
-            }
-        })
-        assert 'message' not in data
-        assert len(data['errors']) == 1
-        assert data['sentry.interfaces.Message'] == {
-            'message': 'foo is bar'
-        }
-
-
-class SafelyLoadJSONStringTest(BaseAPITest):
-    def test_valid_payload(self):
-        data = self.helper.safely_load_json_string('{"foo": "bar"}')
-        assert data == {'foo': 'bar'}
-
-    def test_invalid_json(self):
-        with self.assertRaises(APIError):
-            self.helper.safely_load_json_string('{')
-
-    def test_unexpected_type(self):
-        with self.assertRaises(APIError):
-            self.helper.safely_load_json_string('1')
-
-
-class DecodeDataTest(BaseAPITest):
-    def test_valid_data(self):
-        data = self.helper.decode_data('foo')
-        assert data == u'foo'
-        assert isinstance(data, six.text_type)
-
-    def test_invalid_data(self):
-        with self.assertRaises(APIError):
-            self.helper.decode_data('\x99')
-
-
-class GetInterfaceTest(TestCase):
-    def test_does_not_let_through_disallowed_name(self):
-        with self.assertRaises(ValueError):
-            get_interface('subprocess')
-
-    def test_allows_http(self):
-        from sentry.interfaces.http import Http
-        result = get_interface('sentry.interfaces.Http')
-        assert result is Http
-        result = get_interface('request')
-        assert result is Http
-
-
-class EnsureHasIpTest(BaseAPITest):
-    def test_with_remote_addr(self):
-        inp = {
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com/',
-                'env': {
-                    'REMOTE_ADDR': '192.168.0.1',
-                },
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '192.168.0.1'
-
-    def test_with_user_ip(self):
-        inp = {
-            'sentry.interfaces.User': {
-                'ip_address': '192.168.0.1',
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
-
-    def test_with_user_auto_ip(self):
-        inp = {
-            'sentry.interfaces.User': {
-                'ip_address': '{{auto}}',
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-        inp = {
-            'user': {
-                'ip_address': '{{auto}}',
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-    def test_without_ip_values(self):
-        inp = {
-            'platform': 'javascript',
-            'sentry.interfaces.User': {},
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com/',
-                'env': {},
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-    def test_without_any_values(self):
-        inp = {
-            'platform': 'javascript',
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-    def test_with_http_auto_ip(self):
-        inp = {
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com/',
-                'env': {
-                    'REMOTE_ADDR': '{{auto}}',
-                },
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
-
-    def test_with_all_auto_ip(self):
-        inp = {
-            'sentry.interfaces.User': {
-                'ip_address': '{{auto}}',
-            },
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com/',
-                'env': {
-                    'REMOTE_ADDR': '{{auto}}',
-                },
-            },
-        }
-        out = self.validate_and_normalize(inp, {'client_ip': '127.0.0.1'})
-        assert out['sentry.interfaces.Http']['env']['REMOTE_ADDR'] == '127.0.0.1'
-        assert out['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-
-class SecurityApiHelperTest(BaseAPITest):
-    helper_cls = SecurityApiHelper
-
-    def test_csp_validate_basic(self):
-        report = {
-            "release": "abc123",
-            "environment": "production",
-            "interface": 'sentry.interfaces.Csp',
-            "report": {
-                "csp-report": {
-                    "document-uri": "http://45.55.25.245:8123/csp",
-                    "referrer": "http://example.com",
-                    "violated-directive": "img-src https://45.55.25.245:8123/",
-                    "effective-directive": "img-src",
-                    "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                    "blocked-uri": "http://google.com",
-                    "status-code": 200,
-                }
-            }
-        }
-        result = self.validate_and_normalize(report)
-        assert result['logger'] == 'csp'
-        assert result['release'] == 'abc123'
-        assert result['environment'] == 'production'
-        assert result['errors'] == []
-        assert 'sentry.interfaces.Message' in result
-        assert 'culprit' in result
-        assert result['tags'] == [
-            ('effective-directive', 'img-src'),
-            ('blocked-uri', 'http://google.com'),
-        ]
-        assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
-        assert result['sentry.interfaces.Http']['url'] == 'http://45.55.25.245:8123/csp'
-        assert dict(result['sentry.interfaces.Http']['headers']) == {
-            'User-Agent': 'Awesome Browser',
-            'Referer': 'http://example.com'
-        }
-
-    def test_csp_validate_failure(self):
-        report = {
-            "release": "abc123",
-            "interface": 'sentry.interfaces.Csp',
-            "report": {}
-        }
-        with self.assertRaises(APIError):
-            self.validate_and_normalize(report)
-
-        with self.assertRaises(APIError):
-            self.validate_and_normalize({})
-
-    def test_csp_tags_out_of_bounds(self):
-        report = {
-            "release": "abc123",
-            "interface": 'sentry.interfaces.Csp',
-            "report": {
-                "csp-report": {
-                    "document-uri": "http://45.55.25.245:8123/csp",
-                    "referrer": "http://example.com",
-                    "violated-directive": "img-src https://45.55.25.245:8123/",
-                    "effective-directive": "img-src",
-                    "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                    "blocked-uri": "v" * 201,
-                    "status-code": 200,
-                }
-            }
-        }
-        result = self.validate_and_normalize(report)
-        assert result['tags'] == [
-            ('effective-directive', 'img-src'),
-        ]
-        assert len(result['errors']) == 1
-
-    def test_csp_tag_value(self):
-        report = {
-            "release": "abc123",
-            "interface": 'sentry.interfaces.Csp',
-            "report": {
-                "csp-report": {
-                    "document-uri": "http://45.55.25.245:8123/csp",
-                    "referrer": "http://example.com",
-                    "violated-directive": "img-src https://45.55.25.245:8123/",
-                    "effective-directive": "img-src",
-                    "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
-                    "blocked-uri": "http://google.com",
-                    "status-code": 200,
-                }
-            }
-        }
-        result = self.validate_and_normalize(report)
-        assert result['tags'] == [
-            ('effective-directive', 'img-src'),
-            ('blocked-uri', 'http://google.com'),
-        ]
-        assert len(result['errors']) == 0
-
-    def test_hpkp_validate_basic(self):
-        report = {
-            "release": "abc123",
-            "interface": 'hpkp',
-            "report": {
-                "date-time": "2014-04-06T13:00:50Z",
-                "hostname": "www.example.com",
-                "port": 443,
-                "effective-expiration-date": "2014-05-01T12:40:50Z",
-                "include-subdomains": False,
-                "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-                "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
-                "known-pins": ["pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\""],
-            }
-        }
-        result = self.validate_and_normalize(report)
-        assert result['release'] == 'abc123'
-        assert result['errors'] == []
-        assert 'sentry.interfaces.Message' in result
-        assert 'culprit' in result
-        assert sorted(result['tags']) == [
-            ('hostname', 'www.example.com'),
-            ('include-subdomains', 'false'),
-            ('port', '443'),
-        ]
-        assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
-        assert result['sentry.interfaces.Http'] == {
-            'url': 'www.example.com',
-            'headers': [
-                ('User-Agent', 'Awesome Browser'),
-            ]
-        }
-
-    def test_hpkp_validate_failure(self):
-        report = {
-            "release": "abc123",
-            "interface": 'hpkp',
-            "report": {}
-        }
-        with self.assertRaises(APIError):
-            self.validate_and_normalize(report)
diff --git a/tests/sentry/event_manager/test_ensure_has_ip.py b/tests/sentry/event_manager/test_ensure_has_ip.py
new file mode 100644
index 0000000000..a36df48d8a
--- /dev/null
+++ b/tests/sentry/event_manager/test_ensure_has_ip.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+from sentry.event_manager import EventManager
+
+
+def validate_and_normalize(report, client_ip=None):
+    manager = EventManager(report, client_ip=client_ip)
+    manager.normalize()
+    return manager.get_data()
+
+
+def test_with_remote_addr():
+    inp = {
+        "sentry.interfaces.Http": {
+            "url": "http://example.com/",
+            "env": {"REMOTE_ADDR": "192.168.0.1"},
+        }
+    }
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "192.168.0.1"
+
+
+def test_with_user_ip():
+    inp = {"sentry.interfaces.User": {"ip_address": "192.168.0.1"}}
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.User"]["ip_address"] == "192.168.0.1"
+
+
+def test_with_user_auto_ip():
+    inp = {"sentry.interfaces.User": {"ip_address": "{{auto}}"}}
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+
+    inp = {"user": {"ip_address": "{{auto}}"}}
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+
+
+def test_without_ip_values():
+    inp = {
+        "platform": "javascript",
+        "sentry.interfaces.User": {},
+        "sentry.interfaces.Http": {"url": "http://example.com/", "env": {}},
+    }
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+
+
+def test_without_any_values():
+    inp = {"platform": "javascript"}
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
+
+
+def test_with_http_auto_ip():
+    inp = {
+        "sentry.interfaces.Http": {
+            "url": "http://example.com/",
+            "env": {"REMOTE_ADDR": "{{auto}}"},
+        }
+    }
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
+
+
+def test_with_all_auto_ip():
+    inp = {
+        "sentry.interfaces.User": {"ip_address": "{{auto}}"},
+        "sentry.interfaces.Http": {
+            "url": "http://example.com/",
+            "env": {"REMOTE_ADDR": "{{auto}}"},
+        },
+    }
+    out = validate_and_normalize(inp, client_ip="127.0.0.1")
+    assert out["sentry.interfaces.Http"]["env"]["REMOTE_ADDR"] == "127.0.0.1"
+    assert out["sentry.interfaces.User"]["ip_address"] == "127.0.0.1"
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
similarity index 68%
rename from tests/sentry/test_event_manager.py
rename to tests/sentry/event_manager/test_event_manager.py
index 6a686283fa..fb70f89cb5 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -7,50 +7,52 @@ import mock
 import pytest
 import uuid
 
+from collections import namedtuple
 from datetime import datetime, timedelta
-from django.conf import settings
 from django.utils import timezone
 from time import time
 
 from sentry.app import tsdb
-from sentry.constants import MAX_CULPRIT_LENGTH, DEFAULT_LOGGER_NAME, VERSION_LENGTH
+from sentry.constants import VERSION_LENGTH
 from sentry.event_manager import (
-    HashDiscarded, EventManager, EventUser, InvalidTimestamp,
-    get_hashes_for_event, get_hashes_from_fingerprint, generate_culprit,
-    md5_from_hash, process_timestamp
+    HashDiscarded, EventManager, EventUser,
+    md5_from_hash
 )
 from sentry.models import (
-    Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment, GroupHash, GroupLink,
-    GroupRelease, GroupResolution, GroupStatus, GroupTombstone, EventMapping, Integration, Release,
+    Activity, Environment, Event, ExternalIssue, Group, GroupEnvironment,
+    GroupHash, GroupLink, GroupRelease, GroupResolution, GroupStatus,
+    GroupTombstone, EventMapping, Integration, Release,
     ReleaseProjectEnvironment, OrganizationIntegration, UserReport
 )
 from sentry.signals import event_discarded, event_saved
-from sentry.testutils import assert_mock_called_once_with_partial, TestCase, TransactionTestCase
+from sentry.testutils import assert_mock_called_once_with_partial, TransactionTestCase
+from sentry.utils.data_filters import FilterStatKeys
 
 
-class EventManagerTest(TransactionTestCase):
-    def make_event(self, **kwargs):
-        result = {
-            'event_id': 'a' * 32,
-            'message': 'foo',
-            'timestamp': 1403007314.570599,
-            'level': logging.ERROR,
-            'logger': 'default',
-            'tags': [],
-        }
-        result.update(kwargs)
-        return result
+def make_event(**kwargs):
+    result = {
+        'event_id': 'a' * 32,
+        'message': 'foo',
+        'timestamp': 1403007314.570599,
+        'level': logging.ERROR,
+        'logger': 'default',
+        'tags': [],
+    }
+    result.update(kwargs)
+    return result
+
 
+class EventManagerTest(TransactionTestCase):
     def make_release_event(self, release_name, project_id):
-        manager = EventManager(self.make_event(release=release_name))
+        manager = EventManager(make_event(release=release_name))
         manager.normalize()
         event = manager.save(project_id)
         return event
 
     def test_key_id_remains_in_data(self):
-        manager = EventManager(self.make_event(key_id=12345))
+        manager = EventManager(make_event(key_id=12345))
         manager.normalize()
-        assert manager.data['key_id'] == 12345
+        assert manager.get_data()['key_id'] == 12345
         event = manager.save(1)
         assert event.data['key_id'] == 12345
 
@@ -58,11 +60,11 @@ class EventManagerTest(TransactionTestCase):
         # we had a regression which caused the default hash to just be
         # 'event.message' instead of '[event.message]' which caused it to
         # generate a hash per letter
-        manager = EventManager(self.make_event(event_id='a', message='foo bar'))
+        manager = EventManager(make_event(event_id='a', message='foo bar'))
         manager.normalize()
         event1 = manager.save(1)
 
-        manager = EventManager(self.make_event(event_id='b', message='foo baz'))
+        manager = EventManager(make_event(event_id='b', message='foo baz'))
         manager.normalize()
         event2 = manager.save(1)
 
@@ -73,7 +75,7 @@ class EventManagerTest(TransactionTestCase):
         should_sample.return_value = True
         event_id = 'a' * 32
 
-        manager = EventManager(self.make_event(event_id=event_id))
+        manager = EventManager(make_event(event_id=event_id))
         event = manager.save(1)
 
         # This is a brand new event, so it is actually saved.
@@ -90,7 +92,7 @@ class EventManagerTest(TransactionTestCase):
 
         event_id = 'b' * 32
 
-        manager = EventManager(self.make_event(event_id=event_id))
+        manager = EventManager(make_event(event_id=event_id))
         event = manager.save(1)
 
         # This second is a dupe, so should be sampled
@@ -105,121 +107,9 @@ class EventManagerTest(TransactionTestCase):
             event_id=event_id,
         ).exists()
 
-    def test_tags_as_list(self):
-        manager = EventManager(self.make_event(tags=[('foo', 'bar')]))
-        data = manager.normalize()
-
-        assert data['tags'] == [('foo', 'bar')]
-
-    def test_tags_as_dict(self):
-        manager = EventManager(self.make_event(tags={'foo': 'bar'}))
-        data = manager.normalize()
-
-        assert data['tags'] == [('foo', 'bar')]
-
-    def test_interface_is_relabeled(self):
-        manager = EventManager(self.make_event(user={'id': '1'}))
-        data = manager.normalize()
-
-        assert data['user'] == {'id': '1'}
-        # data is a CanonicalKeyDict, so we need to check .keys() explicitly
-        assert 'sentry.interfaces.User' not in data.keys()
-
-    def test_does_default_ip_address_to_user(self):
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.Http': {
-                        'url': 'http://example.com',
-                        'env': {
-                            'REMOTE_ADDR': '127.0.0.1',
-                        }
-                    }
-                }
-            )
-        )
-        data = manager.normalize()
-        assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-
-    @mock.patch('sentry.interfaces.geo.Geo.from_ip_address')
-    def test_does_geo_from_ip(self, from_ip_address_mock):
-        from sentry.interfaces.geo import Geo
-
-        geo = {
-            'city': 'San Francisco',
-            'country_code': 'US',
-            'region': 'CA',
-        }
-        from_ip_address_mock.return_value = Geo.to_python(geo)
-
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.User': {
-                        'ip_address': '192.168.0.1',
-                    },
-                }
-            )
-        )
-        data = manager.normalize()
-        assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
-        assert data['sentry.interfaces.User']['geo'] == geo
-
-    @mock.patch('sentry.interfaces.geo.geo_by_addr')
-    def test_skips_geo_with_no_result(self, geo_by_addr_mock):
-        geo_by_addr_mock.return_value = None
-
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.User': {
-                        'ip_address': '127.0.0.1',
-                    },
-                }
-            )
-        )
-        data = manager.normalize()
-        assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
-        assert 'geo' not in data['sentry.interfaces.User']
-
-    def test_does_default_ip_address_if_present(self):
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.Http': {
-                        'url': 'http://example.com',
-                        'env': {
-                            'REMOTE_ADDR': '127.0.0.1',
-                        }
-                    },
-                    'sentry.interfaces.User': {
-                        'ip_address': '192.168.0.1',
-                    },
-                }
-            )
-        )
-        data = manager.normalize()
-        assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
-
-    def test_does_not_default_invalid_ip_address(self):
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.Http': {
-                        'url': 'http://example.com',
-                        'env': {
-                            'REMOTE_ADDR': '127.0.0.1, 192.168.0.1',
-                        }
-                    }
-                }
-            )
-        )
-        data = manager.normalize()
-        assert 'sentry.interfaces.User' not in data
-
     def test_platform_is_saved(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{'sentry.interfaces.AppleCrashReport': {
                     'crash': {},
                     'binary_images': []
@@ -232,7 +122,7 @@ class EventManagerTest(TransactionTestCase):
         assert 'sentry.interfacse.AppleCrashReport' not in event.interfaces
 
     def test_ephemral_interfaces_removed_on_save(self):
-        manager = EventManager(self.make_event(platform='python'))
+        manager = EventManager(make_event(platform='python'))
         event = manager.save(1)
 
         group = event.group
@@ -242,20 +132,20 @@ class EventManagerTest(TransactionTestCase):
     def test_dupe_message_id(self):
         event_id = 'a' * 32
 
-        manager = EventManager(self.make_event(event_id=event_id))
+        manager = EventManager(make_event(event_id=event_id))
         manager.save(1)
 
         assert Event.objects.count() == 1
 
         # ensure that calling it again doesn't raise a db error
-        manager = EventManager(self.make_event(event_id=event_id))
+        manager = EventManager(make_event(event_id=event_id))
         manager.save(1)
 
         assert Event.objects.count() == 1
 
     def test_updates_group(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo',
                 event_id='a' * 32,
                 checksum='a' * 32,
@@ -264,7 +154,7 @@ class EventManagerTest(TransactionTestCase):
         event = manager.save(1)
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo bar',
                 event_id='b' * 32,
                 checksum='a' * 32,
@@ -285,7 +175,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_updates_group_with_fingerprint(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo',
                 event_id='a' * 32,
                 fingerprint=['a' * 32],
@@ -295,7 +185,7 @@ class EventManagerTest(TransactionTestCase):
             event = manager.save(1)
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo bar',
                 event_id='b' * 32,
                 fingerprint=['a' * 32],
@@ -312,7 +202,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_differentiates_with_fingerprint(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo',
                 event_id='a' * 32,
                 fingerprint=['{{ default }}', 'a' * 32],
@@ -323,7 +213,7 @@ class EventManagerTest(TransactionTestCase):
             event = manager.save(1)
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo bar',
                 event_id='b' * 32,
                 fingerprint=['a' * 32],
@@ -339,7 +229,7 @@ class EventManagerTest(TransactionTestCase):
         # N.B. EventManager won't unresolve the group unless the event2 has a
         # later timestamp than event1. MySQL doesn't support microseconds.
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='a' * 32,
                 checksum='a' * 32,
                 timestamp=1403007314,
@@ -354,7 +244,7 @@ class EventManagerTest(TransactionTestCase):
         assert group.is_resolved()
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b' * 32,
                 checksum='a' * 32,
                 timestamp=1403007345,
@@ -373,7 +263,7 @@ class EventManagerTest(TransactionTestCase):
         plugin_is_regression.return_value = False
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='a' * 32,
                 checksum='a' * 32,
                 timestamp=1403007314,
@@ -388,7 +278,7 @@ class EventManagerTest(TransactionTestCase):
         assert group.is_resolved()
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b' * 32,
                 checksum='a' * 32,
                 timestamp=1403007315,
@@ -415,7 +305,7 @@ class EventManagerTest(TransactionTestCase):
         old_release.add_project(self.project)
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='a' * 32,
                 checksum='a' * 32,
                 timestamp=time() - 50000,  # need to work around active_at
@@ -441,7 +331,7 @@ class EventManagerTest(TransactionTestCase):
         )
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b' * 32,
                 checksum='a' * 32,
                 timestamp=time(),
@@ -460,7 +350,7 @@ class EventManagerTest(TransactionTestCase):
         assert GroupResolution.objects.filter(group=group).exists()
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='c' * 32,
                 checksum='a' * 32,
                 timestamp=time(),
@@ -501,7 +391,7 @@ class EventManagerTest(TransactionTestCase):
         old_release.add_project(self.project)
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='a' * 32,
                 checksum='a' * 32,
                 timestamp=time() - 50000,  # need to work around active_at
@@ -561,7 +451,7 @@ class EventManagerTest(TransactionTestCase):
         )
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b' * 32,
                 checksum='a' * 32,
                 timestamp=time(),
@@ -586,7 +476,7 @@ class EventManagerTest(TransactionTestCase):
                 assert GroupResolution.objects.filter(group=group).exists()
 
                 manager = EventManager(
-                    self.make_event(
+                    make_event(
                         event_id='c' * 32,
                         checksum='a' * 32,
                         timestamp=time(),
@@ -618,7 +508,7 @@ class EventManagerTest(TransactionTestCase):
     def test_unresolves_group_with_auto_resolve(self, mock_is_resolved):
         mock_is_resolved.return_value = False
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='a' * 32,
                 checksum='a' * 32,
                 timestamp=1403007314,
@@ -629,7 +519,7 @@ class EventManagerTest(TransactionTestCase):
 
         mock_is_resolved.return_value = True
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b' * 32,
                 checksum='a' * 32,
                 timestamp=1403007414,
@@ -642,31 +532,17 @@ class EventManagerTest(TransactionTestCase):
         group = Group.objects.get(id=event.group.id)
         assert group.active_at == event2.datetime != event.datetime
 
-    def test_long_culprit(self):
-        manager = EventManager(self.make_event(
-            culprit='x' * (MAX_CULPRIT_LENGTH + 1),
-        ))
-        data = manager.normalize()
-        assert len(data['culprit']) == MAX_CULPRIT_LENGTH
-
     def test_invalid_transaction(self):
         dict_input = {'messages': 'foo'}
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             transaction=dict_input,
         ))
         manager.normalize()
         event = manager.save(1)
         assert event.transaction is None
 
-    def test_long_transaction(self):
-        manager = EventManager(self.make_event(
-            transaction='x' * (MAX_CULPRIT_LENGTH + 1),
-        ))
-        data = manager.normalize()
-        assert len(data['transaction']) == MAX_CULPRIT_LENGTH
-
     def test_transaction_as_culprit(self):
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             transaction='foobar',
         ))
         manager.normalize()
@@ -675,7 +551,7 @@ class EventManagerTest(TransactionTestCase):
         assert event.culprit == 'foobar'
 
     def test_culprit_is_not_transaction(self):
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             culprit='foobar',
         ))
         manager.normalize()
@@ -684,7 +560,7 @@ class EventManagerTest(TransactionTestCase):
         assert event1.culprit == 'foobar'
 
     def test_transaction_and_culprit(self):
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             transaction='foobar',
             culprit='baz',
         ))
@@ -693,26 +569,6 @@ class EventManagerTest(TransactionTestCase):
         assert event1.transaction == 'foobar'
         assert event1.culprit == 'baz'
 
-    def test_long_message(self):
-        manager = EventManager(
-            self.make_event(
-                message='x' * (settings.SENTRY_MAX_MESSAGE_LENGTH + 1),
-            )
-        )
-        data = manager.normalize()
-        assert len(data['sentry.interfaces.Message']['message']) == \
-            settings.SENTRY_MAX_MESSAGE_LENGTH
-
-    def test_default_version(self):
-        manager = EventManager(self.make_event())
-        data = manager.normalize()
-        assert data['version'] == '5'
-
-    def test_explicit_version(self):
-        manager = EventManager(self.make_event(), '6')
-        data = manager.normalize()
-        assert data['version'] == '6'
-
     def test_first_release(self):
         project_id = 1
         event = self.make_release_event('1.0', project_id)
@@ -774,7 +630,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_group_release_with_env(self):
         manager = EventManager(
-            self.make_event(release='1.0', environment='prod', event_id='a' * 32)
+            make_event(release='1.0', environment='prod', event_id='a' * 32)
         )
         event = manager.save(1)
 
@@ -787,7 +643,7 @@ class EventManagerTest(TransactionTestCase):
         ).exists()
 
         manager = EventManager(
-            self.make_event(release='1.0', environment='staging', event_id='b' * 32)
+            make_event(release='1.0', environment='staging', event_id='b' * 32)
         )
         event = manager.save(1)
 
@@ -799,19 +655,9 @@ class EventManagerTest(TransactionTestCase):
             environment='staging',
         ).exists()
 
-    def test_logger(self):
-        manager = EventManager(self.make_event(logger="foo\nbar"))
-        data = manager.normalize()
-        assert data['logger'] == DEFAULT_LOGGER_NAME
-
-        manager = EventManager(self.make_event(logger=""))
-        data = manager.normalize()
-        assert data['logger'] == DEFAULT_LOGGER_NAME
-        assert not any(e.get('name') == 'logger' for e in data['errors'])
-
     def test_tsdb(self):
         project = self.project
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             fingerprint=['totally unique super duper fingerprint'],
             environment='totally unique super duper environment',
         ))
@@ -833,7 +679,7 @@ class EventManagerTest(TransactionTestCase):
     @pytest.mark.xfail
     def test_record_frequencies(self):
         project = self.project
-        manager = EventManager(self.make_event())
+        manager = EventManager(make_event())
         event = manager.save(project.id)
 
         assert tsdb.get_most_frequent(
@@ -857,7 +703,7 @@ class EventManagerTest(TransactionTestCase):
         }
 
     def test_event_user(self):
-        manager = EventManager(self.make_event(
+        manager = EventManager(make_event(
             event_id='a',
             environment='totally unique environment',
             **{'sentry.interfaces.User': {
@@ -919,7 +765,7 @@ class EventManagerTest(TransactionTestCase):
 
         # ensure event user is mapped to tags in second attempt
         manager = EventManager(
-            self.make_event(
+            make_event(
                 event_id='b',
                 **{'sentry.interfaces.User': {
                     'id': '1',
@@ -937,7 +783,7 @@ class EventManagerTest(TransactionTestCase):
         assert euser.ident == '1'
 
     def test_event_user_unicode_identifier(self):
-        manager = EventManager(self.make_event(**{'sentry.interfaces.User': {'username': u'foô'}}))
+        manager = EventManager(make_event(**{'sentry.interfaces.User': {'username': u'foô'}}))
         manager.normalize()
         with self.tasks():
             manager.save(self.project.id)
@@ -947,7 +793,7 @@ class EventManagerTest(TransactionTestCase):
         assert euser.username == u'foô'
 
     def test_environment(self):
-        manager = EventManager(self.make_event(**{
+        manager = EventManager(make_event(**{
             'environment': 'beta',
         }))
         manager.normalize()
@@ -956,7 +802,7 @@ class EventManagerTest(TransactionTestCase):
         assert dict(event.tags).get('environment') == 'beta'
 
     def test_invalid_environment(self):
-        manager = EventManager(self.make_event(**{
+        manager = EventManager(make_event(**{
             'environment': 'bad/name',
         }))
         manager.normalize()
@@ -968,7 +814,7 @@ class EventManagerTest(TransactionTestCase):
         release_version = '1.0'
 
         def save_event():
-            manager = EventManager(self.make_event(**{
+            manager = EventManager(make_event(**{
                 'event_id': uuid.uuid1().hex,  # don't deduplicate
                 'environment': 'beta',
                 'release': release_version,
@@ -1018,7 +864,7 @@ class EventManagerTest(TransactionTestCase):
         )
 
     def test_default_fingerprint(self):
-        manager = EventManager(self.make_event())
+        manager = EventManager(make_event())
         manager.normalize()
         event = manager.save(self.project.id)
 
@@ -1044,7 +890,7 @@ class EventManagerTest(TransactionTestCase):
             comments='It Broke!!!',
         )
         manager = EventManager(
-            self.make_event(
+            make_event(
                 environment=environment.name,
                 event_id=event_id,
                 group=group))
@@ -1053,8 +899,9 @@ class EventManagerTest(TransactionTestCase):
         assert UserReport.objects.get(event_id=event_id).environment == environment
 
     def test_default_event_type(self):
-        manager = EventManager(self.make_event(message='foo bar'))
-        data = manager.normalize()
+        manager = EventManager(make_event(message='foo bar'))
+        manager.normalize()
+        data = manager.get_data()
         assert data['type'] == 'default'
         event = manager.save(self.project.id)
         group = event.group
@@ -1065,7 +912,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_message_event_type(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'message': '',
                     'sentry.interfaces.Message': {
@@ -1076,7 +923,8 @@ class EventManagerTest(TransactionTestCase):
                 }
             )
         )
-        data = manager.normalize()
+        manager.normalize()
+        data = manager.get_data()
         assert data['type'] == 'default'
         event = manager.save(self.project.id)
         group = event.group
@@ -1087,7 +935,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_error_event_type(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'sentry.interfaces.Exception': {
                         'values': [{
@@ -1098,7 +946,8 @@ class EventManagerTest(TransactionTestCase):
                 }
             )
         )
-        data = manager.normalize()
+        manager.normalize()
+        data = manager.get_data()
         assert data['type'] == 'error'
         event = manager.save(self.project.id)
         group = event.group
@@ -1110,7 +959,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_csp_event_type(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'sentry.interfaces.Csp': {
                         'effective_directive': 'script-src',
@@ -1119,7 +968,8 @@ class EventManagerTest(TransactionTestCase):
                 }
             )
         )
-        data = manager.normalize()
+        manager.normalize()
+        data = manager.get_data()
         assert data['type'] == 'csp'
         event = manager.save(self.project.id)
         group = event.group
@@ -1132,7 +982,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_sdk(self):
         manager = EventManager(
-            self.make_event(**{
+            make_event(**{
                 'sdk': {
                     'name': 'sentry-unity',
                     'version': '1.0',
@@ -1150,7 +1000,7 @@ class EventManagerTest(TransactionTestCase):
     def test_no_message(self):
         # test that the message is handled gracefully
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'message': None,
                     'sentry.interfaces.Message': {
@@ -1166,7 +1016,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_bad_message(self):
         # test that the message is handled gracefully
-        manager = EventManager(self.make_event(**{
+        manager = EventManager(make_event(**{
             'message': 1234,
         }))
         manager.normalize()
@@ -1178,7 +1028,7 @@ class EventManagerTest(TransactionTestCase):
         }
 
     def test_message_attribute_goes_to_interface(self):
-        manager = EventManager(self.make_event(**{
+        manager = EventManager(make_event(**{
             'message': 'hello world',
         }))
         manager.normalize()
@@ -1192,7 +1042,7 @@ class EventManagerTest(TransactionTestCase):
         # of a compatibility hack, and ideally we would just enforce a stricter
         # schema instead of combining them like this.
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'message': 'world hello',
                     'sentry.interfaces.Message': {
@@ -1210,7 +1060,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_message_attribute_interface_both_strings(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 **{
                     'sentry.interfaces.Message': 'a plain string',
                     'message': 'another string',
@@ -1226,7 +1076,7 @@ class EventManagerTest(TransactionTestCase):
 
     def test_throws_when_matches_discarded_hash(self):
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo',
                 event_id='a' * 32,
                 fingerprint=['a' * 32],
@@ -1252,7 +1102,7 @@ class EventManagerTest(TransactionTestCase):
         )
 
         manager = EventManager(
-            self.make_event(
+            make_event(
                 message='foo',
                 event_id='b' * 32,
                 fingerprint=['a' * 32],
@@ -1280,7 +1130,7 @@ class EventManagerTest(TransactionTestCase):
         mock_event_saved = mock.Mock()
         event_saved.connect(mock_event_saved)
 
-        manager = EventManager(self.make_event(message='foo'))
+        manager = EventManager(make_event(message='foo'))
         manager.normalize()
         event = manager.save(1)
 
@@ -1291,32 +1141,10 @@ class EventManagerTest(TransactionTestCase):
             signal=event_saved,
         )
 
-    def test_bad_interfaces_no_exception(self):
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'sentry.interfaces.User': None,
-                    'sentry.interfaces.Http': None,
-                    'sdk': 'A string for sdk is not valid'
-                }
-            )
-        )
-        manager.normalize({'client_ip': '1.2.3.4'})
-
-        manager = EventManager(
-            self.make_event(
-                **{
-                    'errors': {},
-                    'sentry.interfaces.Http': {},
-                }
-            )
-        )
-        manager.normalize()
-
     def test_checksum_rehashed(self):
         checksum = 'invalid checksum hash'
         manager = EventManager(
-            self.make_event(**{
+            make_event(**{
                 'checksum': checksum,
             })
         )
@@ -1326,267 +1154,47 @@ class EventManagerTest(TransactionTestCase):
         hashes = [gh.hash for gh in GroupHash.objects.filter(group=event.group)]
         assert hashes == [md5_from_hash(checksum), checksum]
 
-    def test_event_pii(self):
-        manager = EventManager(self.make_event(
-            message='foo bar',
-            _meta={'message': {'': {'err': ['invalid']}}},
-        ))
-        data = manager.normalize()
-        assert data['_meta']['message'] == {'': {'err': ['invalid']}}
-
+    @mock.patch('sentry.event_manager.is_valid_error_message')
+    def test_should_filter_message(self, mock_is_valid_error_message):
+        TestItem = namedtuple('TestItem', 'value formatted result')
 
-class ProcessTimestampTest(TestCase):
-    def test_iso_timestamp(self):
-        self.assertEquals(
-            process_timestamp(
-                '2012-01-01T10:30:45',
-                current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+        items = [
+            TestItem(
+                {'type': 'UnfilteredException'},
+                'UnfilteredException',
+                True,
             ),
-            1325413845.0,
-        )
-
-    def test_iso_timestamp_with_ms(self):
-        self.assertEquals(
-            process_timestamp(
-                '2012-01-01T10:30:45.434',
-                current_datetime=datetime(2012, 1, 1, 10, 30, 45, 434000),
+            TestItem(
+                {'value': 'This is an unfiltered exception.'},
+                'This is an unfiltered exception.',
+                True,
             ),
-            1325413845.0,
-        )
-
-    def test_timestamp_iso_timestamp_with_Z(self):
-        self.assertEquals(
-            process_timestamp(
-                '2012-01-01T10:30:45Z',
-                current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+            TestItem(
+                {'type': 'UnfilteredException', 'value': 'This is an unfiltered exception.'},
+                'UnfilteredException: This is an unfiltered exception.',
+                True,
             ),
-            1325413845.0,
-        )
-
-    def test_invalid_timestamp(self):
-        self.assertRaises(InvalidTimestamp, process_timestamp, 'foo')
-
-    def test_invalid_numeric_timestamp(self):
-        self.assertRaises(InvalidTimestamp, process_timestamp, '100000000000000000000.0')
-
-    def test_future_timestamp(self):
-        self.assertRaises(InvalidTimestamp, process_timestamp, '2052-01-01T10:30:45Z')
-
-    def test_long_microseconds_value(self):
-        self.assertEquals(
-            process_timestamp(
-                '2012-01-01T10:30:45.341324Z',
-                current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+            TestItem(
+                {'type': 'FilteredException', 'value': 'This is a filtered exception.'},
+                'FilteredException: This is a filtered exception.',
+                False,
             ),
-            1325413845.0,
-        )
-
-
-class GetHashesFromEventTest(TestCase):
-    @mock.patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
-    @mock.patch('sentry.interfaces.http.Http.compute_hashes')
-    def test_stacktrace_wins_over_http(self, http_comp_hash, stack_comp_hash):
-        # this was a regression, and a very important one
-        http_comp_hash.return_value = [['baz']]
-        stack_comp_hash.return_value = [['foo', 'bar']]
-        event = Event(
-            data={
-                'sentry.interfaces.Stacktrace': {
-                    'frames': [{
-                        'lineno': 1,
-                        'filename': 'foo.py',
-                    }],
-                },
-                'sentry.interfaces.Http': {
-                    'url': 'http://example.com'
-                },
-            },
-            platform='python',
-            message='Foo bar',
-        )
-        hashes = get_hashes_for_event(event)
-        assert len(hashes) == 1
-        hash_one = hashes[0]
-        stack_comp_hash.assert_called_once_with('python')
-        assert not http_comp_hash.called
-        assert hash_one == ['foo', 'bar']
-
-
-class GetHashesFromFingerprintTest(TestCase):
-    def test_default_value(self):
-        event = Event(
-            data={
-                'sentry.interfaces.Stacktrace': {
-                    'frames': [
-                        {
-                            'lineno': 1,
-                            'filename': 'foo.py',
-                        }, {
-                            'lineno': 1,
-                            'filename': 'foo.py',
-                            'in_app': True,
-                        }
-                    ],
-                },
-                'sentry.interfaces.Http': {
-                    'url': 'http://example.com'
-                },
-            },
-            platform='python',
-            message='Foo bar',
-        )
-        fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}"])
-
-        def_checksums = get_hashes_for_event(event)
-        assert def_checksums == fp_checksums
-
-    def test_custom_values(self):
-        event = Event(
-            data={
-                'sentry.interfaces.Stacktrace': {
-                    'frames': [
-                        {
-                            'lineno': 1,
-                            'filename': 'foo.py',
-                        }, {
-                            'lineno': 1,
-                            'filename': 'foo.py',
-                            'in_app': True,
-                        }
-                    ],
-                },
-                'sentry.interfaces.Http': {
-                    'url': 'http://example.com'
-                },
-            },
-            platform='python',
-            message='Foo bar',
-        )
-        fp_checksums = get_hashes_from_fingerprint(event, ["{{default}}", "custom"])
+        ]
 
-        def_checksums = get_hashes_for_event(event)
-        assert len(fp_checksums) == len(def_checksums)
-        assert def_checksums != fp_checksums
-
-
-class GenerateCulpritTest(TestCase):
-    def test_with_exception_interface(self):
         data = {
             'sentry.interfaces.Exception': {
-                'values': [
-                    {
-                        'stacktrace': {
-                            'frames': [
-                                {
-                                    'lineno': 1,
-                                    'filename': 'foo.py',
-                                }, {
-                                    'lineno': 1,
-                                    'filename': 'bar.py',
-                                    'in_app': True,
-                                }
-                            ],
-                        }
-                    }
-                ]
-            },
-            'sentry.interfaces.Stacktrace': {
-                'frames': [
-                    {
-                        'lineno': 1,
-                        'filename': 'NOTME.py',
-                    }, {
-                        'lineno': 1,
-                        'filename': 'PLZNOTME.py',
-                        'in_app': True,
-                    }
-                ],
-            },
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com'
-            },
-        }
-        assert generate_culprit(data) == 'bar.py in ?'
-
-    def test_with_missing_exception_interface(self):
-        data = {
-            'sentry.interfaces.Stacktrace': {
-                'frames': [
-                    {
-                        'lineno': 1,
-                        'filename': 'NOTME.py',
-                    }, {
-                        'lineno': 1,
-                        'filename': 'PLZNOTME.py',
-                        'in_app': True,
-                    }
-                ],
-            },
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com'
-            },
-        }
-        assert generate_culprit(data) == 'PLZNOTME.py in ?'
-
-    def test_with_empty_stacktrace(self):
-        data = {
-            'sentry.interfaces.Stacktrace': None,
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com'
-            },
-        }
-        assert generate_culprit(data) == 'http://example.com'
-
-    def test_with_only_http_interface(self):
-        data = {
-            'sentry.interfaces.Http': {
-                'url': 'http://example.com'
+                'values': [item.value for item in items]
             },
         }
-        assert generate_culprit(data) == 'http://example.com'
-
-        data = {
-            'sentry.interfaces.Http': {},
-        }
-        assert generate_culprit(data) == ''
 
-    def test_empty_data(self):
-        assert generate_culprit({}) == ''
-
-    def test_truncation(self):
-        data = {
-            'sentry.interfaces.Exception': {
-                'values':
-                [{
-                    'stacktrace': {
-                        'frames': [{
-                            'filename': 'x' * (MAX_CULPRIT_LENGTH + 1),
-                        }],
-                    }
-                }],
-            }
-        }
-        assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+        manager = EventManager(data, project=self.project)
 
-        data = {
-            'sentry.interfaces.Stacktrace': {
-                'frames': [{
-                    'filename': 'x' * (MAX_CULPRIT_LENGTH + 1),
-                }]
-            }
-        }
-        assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+        mock_is_valid_error_message.side_effect = [item.result for item in items]
 
-        data = {
-            'sentry.interfaces.Http': {
-                'url': 'x' * (MAX_CULPRIT_LENGTH + 1),
-            }
-        }
-        assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+        assert manager.should_filter() == (True, FilterStatKeys.ERROR_MESSAGE)
 
-    def test_md5_from_hash(self):
-        result = md5_from_hash(['foo', 'bar', u'foô'])
-        assert result == '6d81588029ed4190110b2779ba952a00'
+        assert mock_is_valid_error_message.call_args_list == [
+            mock.call(self.project, item.formatted) for item in items]
 
 
 class ReleaseIssueTest(TransactionTestCase):
@@ -1611,7 +1219,7 @@ class ReleaseIssueTest(TransactionTestCase):
 
     def make_release_event(self, release_version='1.0',
                            environment_name='prod', project_id=1, **kwargs):
-        event = self.make_event(
+        event = make_event(
             release=release_version,
             environment=environment_name,
             event_id=uuid.uuid1().hex,
diff --git a/tests/sentry/event_manager/test_generate_culprit.py b/tests/sentry/event_manager/test_generate_culprit.py
new file mode 100644
index 0000000000..cde72b21c3
--- /dev/null
+++ b/tests/sentry/event_manager/test_generate_culprit.py
@@ -0,0 +1,131 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from sentry.constants import MAX_CULPRIT_LENGTH
+from sentry.event_manager import generate_culprit, md5_from_hash
+
+
+def test_with_exception_interface():
+    data = {
+        'sentry.interfaces.Exception': {
+            'values': [
+                {
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'lineno': 1,
+                                'filename': 'foo.py',
+                            }, {
+                                'lineno': 1,
+                                'filename': 'bar.py',
+                                'in_app': True,
+                            }
+                        ],
+                    }
+                }
+            ]
+        },
+        'sentry.interfaces.Stacktrace': {
+            'frames': [
+                {
+                    'lineno': 1,
+                    'filename': 'NOTME.py',
+                }, {
+                    'lineno': 1,
+                    'filename': 'PLZNOTME.py',
+                    'in_app': True,
+                }
+            ],
+        },
+        'sentry.interfaces.Http': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'bar.py in ?'
+
+
+def test_with_missing_exception_interface():
+    data = {
+        'sentry.interfaces.Stacktrace': {
+            'frames': [
+                {
+                    'lineno': 1,
+                    'filename': 'NOTME.py',
+                }, {
+                    'lineno': 1,
+                    'filename': 'PLZNOTME.py',
+                    'in_app': True,
+                }
+            ],
+        },
+        'sentry.interfaces.Http': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'PLZNOTME.py in ?'
+
+
+def test_with_empty_stacktrace():
+    data = {
+        'sentry.interfaces.Stacktrace': None,
+        'sentry.interfaces.Http': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'http://example.com'
+
+
+def test_with_only_http_interface():
+    data = {
+        'sentry.interfaces.Http': {
+            'url': 'http://example.com'
+        },
+    }
+    assert generate_culprit(data) == 'http://example.com'
+
+    data = {
+        'sentry.interfaces.Http': {},
+    }
+    assert generate_culprit(data) == ''
+
+
+def test_empty_data():
+    assert generate_culprit({}) == ''
+
+
+def test_truncation():
+    data = {
+        'sentry.interfaces.Exception': {
+            'values':
+            [{
+                'stacktrace': {
+                    'frames': [{
+                        'filename': 'x' * (MAX_CULPRIT_LENGTH + 1),
+                    }],
+                }
+            }],
+        }
+    }
+    assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+
+    data = {
+        'sentry.interfaces.Stacktrace': {
+            'frames': [{
+                'filename': 'x' * (MAX_CULPRIT_LENGTH + 1),
+            }]
+        }
+    }
+    assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+
+    data = {
+        'sentry.interfaces.Http': {
+            'url': 'x' * (MAX_CULPRIT_LENGTH + 1),
+        }
+    }
+    assert len(generate_culprit(data)) == MAX_CULPRIT_LENGTH
+
+
+def test_md5_from_hash():
+    result = md5_from_hash(['foo', 'bar', u'foô'])
+    assert result == '6d81588029ed4190110b2779ba952a00'
diff --git a/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
new file mode 100644
index 0000000000..5db2dda8c9
--- /dev/null
+++ b/tests/sentry/event_manager/test_get_hashes_from_fingerprint.py
@@ -0,0 +1,37 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import, print_function
+
+import mock
+
+from sentry.event_manager import get_hashes_for_event
+from sentry.models import Event
+
+
+@mock.patch('sentry.interfaces.stacktrace.Stacktrace.compute_hashes')
+@mock.patch('sentry.interfaces.http.Http.compute_hashes')
+def test_stacktrace_wins_over_http(http_comp_hash, stack_comp_hash):
+    # this was a regression, and a very important one
+    http_comp_hash.return_value = [['baz']]
+    stack_comp_hash.return_value = [['foo', 'bar']]
+    event = Event(
+        data={
+            'sentry.interfaces.Stacktrace': {
+                'frames': [{
+                    'lineno': 1,
+                    'filename': 'foo.py',
+                }],
+            },
+            'sentry.interfaces.Http': {
+                'url': 'http://example.com'
+            },
+        },
+        platform='python',
+        message='Foo bar',
+    )
+    hashes = get_hashes_for_event(event)
+    assert len(hashes) == 1
+    hash_one = hashes[0]
+    stack_comp_hash.assert_called_once_with('python')
+    assert not http_comp_hash.called
+    assert hash_one == ['foo', 'bar']
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
new file mode 100644
index 0000000000..e772816dcc
--- /dev/null
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -0,0 +1,227 @@
+from __future__ import absolute_import
+
+import mock
+import logging
+
+from django.conf import settings
+
+from sentry.constants import MAX_CULPRIT_LENGTH, DEFAULT_LOGGER_NAME
+from sentry.event_manager import EventManager
+
+
+def make_event(**kwargs):
+    result = {
+        'event_id': 'a' * 32,
+        'message': 'foo',
+        'timestamp': 1403007314.570599,
+        'level': logging.ERROR,
+        'logger': 'default',
+        'tags': [],
+    }
+    result.update(kwargs)
+    return result
+
+
+def test_tags_as_list():
+    manager = EventManager(make_event(tags=[('foo', 'bar')]))
+    manager.normalize()
+    data = manager.get_data()
+
+    assert data['tags'] == [('foo', 'bar')]
+
+
+def test_tags_as_dict():
+    manager = EventManager(make_event(tags={'foo': 'bar'}))
+    manager.normalize()
+    data = manager.get_data()
+
+    assert data['tags'] == [('foo', 'bar')]
+
+
+def test_interface_is_relabeled():
+    manager = EventManager(make_event(user={'id': '1'}))
+    manager.normalize()
+    data = manager.get_data()
+
+    assert data['user'] == {'id': '1'}
+    # data is a CanonicalKeyDict, so we need to check .keys() explicitly
+    assert 'sentry.interfaces.User' not in data.keys()
+
+
+def test_does_default_ip_address_to_user():
+    manager = EventManager(
+        make_event(
+            **{
+                'sentry.interfaces.Http': {
+                    'url': 'http://example.com',
+                    'env': {
+                        'REMOTE_ADDR': '127.0.0.1',
+                    }
+                }
+            }
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+
+    assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+
+
+@mock.patch('sentry.interfaces.geo.Geo.from_ip_address')
+def test_does_geo_from_ip(from_ip_address_mock):
+    from sentry.interfaces.geo import Geo
+
+    geo = {
+        'city': 'San Francisco',
+        'country_code': 'US',
+        'region': 'CA',
+    }
+    from_ip_address_mock.return_value = Geo.to_python(geo)
+
+    manager = EventManager(
+        make_event(
+            **{
+                'sentry.interfaces.User': {
+                    'ip_address': '192.168.0.1',
+                },
+            }
+        )
+    )
+
+    manager.normalize()
+    data = manager.get_data()
+    assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
+    assert data['sentry.interfaces.User']['geo'] == geo
+
+
+@mock.patch('sentry.interfaces.geo.geo_by_addr')
+def test_skips_geo_with_no_result(geo_by_addr_mock):
+    geo_by_addr_mock.return_value = None
+
+    manager = EventManager(
+        make_event(
+            **{
+                'sentry.interfaces.User': {
+                    'ip_address': '127.0.0.1',
+                },
+            }
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+    assert data['sentry.interfaces.User']['ip_address'] == '127.0.0.1'
+    assert 'geo' not in data['sentry.interfaces.User']
+
+
+def test_does_default_ip_address_if_present():
+    manager = EventManager(
+        make_event(
+            **{
+                'sentry.interfaces.Http': {
+                    'url': 'http://example.com',
+                    'env': {
+                        'REMOTE_ADDR': '127.0.0.1',
+                    }
+                },
+                'sentry.interfaces.User': {
+                    'ip_address': '192.168.0.1',
+                },
+            }
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+    assert data['sentry.interfaces.User']['ip_address'] == '192.168.0.1'
+
+
+def test_long_culprit():
+    manager = EventManager(make_event(
+        culprit='x' * (MAX_CULPRIT_LENGTH + 1),
+    ))
+    manager.normalize()
+    data = manager.get_data()
+    assert len(data['culprit']) == MAX_CULPRIT_LENGTH
+
+
+def test_long_transaction():
+    manager = EventManager(make_event(
+        transaction='x' * (MAX_CULPRIT_LENGTH + 1),
+    ))
+    manager.normalize()
+    data = manager.get_data()
+    assert len(data['transaction']) == MAX_CULPRIT_LENGTH
+
+
+def test_long_message():
+    manager = EventManager(
+        make_event(
+            message='x' * (settings.SENTRY_MAX_MESSAGE_LENGTH + 1),
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+    assert len(data['sentry.interfaces.Message']['message']) == \
+        settings.SENTRY_MAX_MESSAGE_LENGTH
+
+
+def test_default_version():
+    manager = EventManager(make_event())
+    manager.normalize()
+    data = manager.get_data()
+    assert data['version'] == '5'
+
+
+def test_explicit_version():
+    manager = EventManager(make_event(), '6')
+    manager.normalize()
+    data = manager.get_data()
+    assert data['version'] == '6'
+
+
+def test_logger():
+    manager = EventManager(make_event(logger="foo\nbar"))
+    manager.normalize()
+    data = manager.get_data()
+    assert data['logger'] == DEFAULT_LOGGER_NAME
+
+    manager = EventManager(make_event(logger=""))
+    manager.normalize()
+    data = manager.get_data()
+    assert data['logger'] == DEFAULT_LOGGER_NAME
+    assert not any(e.get('name') == 'logger' for e in data['errors'])
+
+
+def test_bad_interfaces_no_exception():
+    manager = EventManager(
+        make_event(
+            **{
+                'sentry.interfaces.User': None,
+                'sentry.interfaces.Http': None,
+                'sdk': 'A string for sdk is not valid'
+            }
+        ),
+        client_ip='1.2.3.4'
+    )
+    manager.normalize()
+
+    manager = EventManager(
+        make_event(
+            **{
+                'errors': {},
+                'sentry.interfaces.Http': {},
+            }
+        )
+    )
+    manager.normalize()
+
+
+def test_event_pii():
+    manager = EventManager(
+        make_event(
+            message='foo bar',
+            _meta={'message': {'': {'err': ['invalid']}}},
+        )
+    )
+    manager.normalize()
+    data = manager.get_data()
+    assert data['_meta']['message'] == {'': {'err': ['invalid']}}
diff --git a/tests/sentry/event_manager/test_process_timestamp.py b/tests/sentry/event_manager/test_process_timestamp.py
new file mode 100644
index 0000000000..0f0a0c6231
--- /dev/null
+++ b/tests/sentry/event_manager/test_process_timestamp.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+import pytest
+
+from datetime import datetime
+
+from sentry.event_manager import InvalidTimestamp, process_timestamp
+
+
+def test_iso_timestamp():
+    assert process_timestamp(
+        '2012-01-01T10:30:45',
+        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+    ) == 1325413845.0
+
+
+def test_iso_timestamp_with_ms():
+    assert process_timestamp(
+        '2012-01-01T10:30:45.434',
+        current_datetime=datetime(2012, 1, 1, 10, 30, 45, 434000),
+    ) == 1325413845.0
+
+
+def test_timestamp_iso_timestamp_with_Z():
+    assert process_timestamp(
+        '2012-01-01T10:30:45Z',
+        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+    ) == 1325413845.0
+
+
+def test_invalid_timestamp():
+    with pytest.raises(InvalidTimestamp):
+        process_timestamp('foo')
+
+
+def test_invalid_numeric_timestamp():
+    with pytest.raises(InvalidTimestamp):
+        process_timestamp('100000000000000000000.0')
+
+
+def test_future_timestamp():
+    with pytest.raises(InvalidTimestamp):
+        process_timestamp('2052-01-01T10:30:45Z')
+
+
+def test_long_microseconds_value():
+    assert process_timestamp(
+        '2012-01-01T10:30:45.341324Z',
+        current_datetime=datetime(2012, 1, 1, 10, 30, 45),
+    ) == 1325413845.0
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
new file mode 100644
index 0000000000..8ec02cd75c
--- /dev/null
+++ b/tests/sentry/event_manager/test_validate_csp.py
@@ -0,0 +1,155 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.coreapi import APIError
+from sentry.event_manager import EventManager
+
+
+def validate_and_normalize(report, client_ip='198.51.100.0',
+                           user_agent='Awesome Browser'):
+    manager = EventManager(report, client_ip=client_ip, user_agent=user_agent)
+    manager.process_csp_report()
+    manager.normalize()
+    return manager.get_data()
+
+
+def test_csp_validate_basic():
+    report = {
+        "release": "abc123",
+        "environment": "production",
+        "interface": 'sentry.interfaces.Csp',
+        "report": {
+            "csp-report": {
+                "document-uri": "http://45.55.25.245:8123/csp",
+                "referrer": "http://example.com",
+                "violated-directive": "img-src https://45.55.25.245:8123/",
+                "effective-directive": "img-src",
+                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
+                "blocked-uri": "http://google.com",
+                "status-code": 200,
+            }
+        }
+    }
+    result = validate_and_normalize(report)
+    assert result['logger'] == 'csp'
+    assert result['release'] == 'abc123'
+    assert result['environment'] == 'production'
+    assert result['errors'] == []
+    assert 'sentry.interfaces.Message' in result
+    assert 'culprit' in result
+    assert result['tags'] == [
+        ('effective-directive', 'img-src'),
+        ('blocked-uri', 'http://google.com'),
+    ]
+    assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
+    assert result['sentry.interfaces.Http']['url'] == 'http://45.55.25.245:8123/csp'
+    assert dict(result['sentry.interfaces.Http']['headers']) == {
+        'User-Agent': 'Awesome Browser',
+        'Referer': 'http://example.com'
+    }
+
+
+def test_csp_validate_failure():
+    report = {
+        "release": "abc123",
+        "interface": 'sentry.interfaces.Csp',
+        "report": {}
+    }
+
+    with pytest.raises(APIError):
+        validate_and_normalize(report)
+
+    with pytest.raises(APIError):
+        validate_and_normalize({})
+
+
+def test_csp_tags_out_of_bounds():
+    report = {
+        "release": "abc123",
+        "interface": 'sentry.interfaces.Csp',
+        "report": {
+            "csp-report": {
+                "document-uri": "http://45.55.25.245:8123/csp",
+                "referrer": "http://example.com",
+                "violated-directive": "img-src https://45.55.25.245:8123/",
+                "effective-directive": "img-src",
+                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
+                "blocked-uri": "v" * 201,
+                "status-code": 200,
+            }
+        }
+    }
+    result = validate_and_normalize(report)
+    assert result['tags'] == [
+        ('effective-directive', 'img-src'),
+    ]
+    assert len(result['errors']) == 1
+
+
+def test_csp_tag_value():
+    report = {
+        "release": "abc123",
+        "interface": 'sentry.interfaces.Csp',
+        "report": {
+            "csp-report": {
+                "document-uri": "http://45.55.25.245:8123/csp",
+                "referrer": "http://example.com",
+                "violated-directive": "img-src https://45.55.25.245:8123/",
+                "effective-directive": "img-src",
+                "original-policy": "default-src  https://45.55.25.245:8123/; child-src  https://45.55.25.245:8123/; connect-src  https://45.55.25.245:8123/; font-src  https://45.55.25.245:8123/; img-src  https://45.55.25.245:8123/; media-src  https://45.55.25.245:8123/; object-src  https://45.55.25.245:8123/; script-src  https://45.55.25.245:8123/; style-src  https://45.55.25.245:8123/; form-action  https://45.55.25.245:8123/; frame-ancestors 'none'; plugin-types 'none'; report-uri http://45.55.25.245:8123/csp-report?os=OS%20X&device=&browser_version=43.0&browser=chrome&os_version=Lion",
+                "blocked-uri": "http://google.com",
+                "status-code": 200,
+            }
+        }
+    }
+    result = validate_and_normalize(report)
+    assert result['tags'] == [
+        ('effective-directive', 'img-src'),
+        ('blocked-uri', 'http://google.com'),
+    ]
+    assert len(result['errors']) == 0
+
+
+def test_hpkp_validate_basic():
+    report = {
+        "release": "abc123",
+        "interface": 'hpkp',
+        "report": {
+            "date-time": "2014-04-06T13:00:50Z",
+            "hostname": "www.example.com",
+            "port": 443,
+            "effective-expiration-date": "2014-05-01T12:40:50Z",
+            "include-subdomains": False,
+            "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+            "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+            "known-pins": ["pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\""],
+        }
+    }
+    result = validate_and_normalize(report)
+    assert result['release'] == 'abc123'
+    assert result['errors'] == []
+    assert 'sentry.interfaces.Message' in result
+    assert 'culprit' in result
+    assert sorted(result['tags']) == [
+        ('hostname', 'www.example.com'),
+        ('include-subdomains', 'false'),
+        ('port', '443'),
+    ]
+    assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
+    assert result['sentry.interfaces.Http'] == {
+        'url': 'www.example.com',
+        'headers': [
+            ('User-Agent', 'Awesome Browser'),
+        ]
+    }
+
+
+def test_hpkp_validate_failure():
+    report = {
+        "release": "abc123",
+        "interface": 'hpkp',
+        "report": {}
+    }
+    with pytest.raises(APIError):
+        validate_and_normalize(report)
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
new file mode 100644
index 0000000000..7e5cd0655a
--- /dev/null
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -0,0 +1,420 @@
+from __future__ import absolute_import
+
+import pytest
+import mock
+
+from datetime import datetime, timedelta
+from functools import partial
+from uuid import UUID
+
+from sentry.constants import VERSION_LENGTH, MAX_CULPRIT_LENGTH
+from sentry.event_manager import EventManager
+
+
+def validate_and_normalize(data):
+    manager = EventManager(data)
+    manager.normalize()
+    return manager.get_data()
+
+
+def test_timestamp():
+    from sentry.event_manager import process_timestamp
+
+    patched = partial(
+        process_timestamp, current_datetime=datetime(2018, 4, 10, 14, 33, 18)
+    )
+    with mock.patch("sentry.event_manager.process_timestamp", patched):
+        data = validate_and_normalize({"timestamp": "2018-04-10T14:33:18Z"})
+        assert len(data["errors"]) == 0
+
+    data = validate_and_normalize({"timestamp": "not-a-timestamp"})
+    assert len(data["errors"]) == 1
+
+    now = datetime.utcnow()
+    data = validate_and_normalize({"timestamp": now.strftime("%Y-%m-%dT%H:%M:%SZ")})
+    assert len(data["errors"]) == 0
+
+    future = now + timedelta(minutes=2)
+    data = validate_and_normalize({"timestamp": future.strftime("%Y-%m-%dT%H:%M:%SZ")})
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "future_timestamp"
+
+    past = now - timedelta(days=31)
+    data = validate_and_normalize({"timestamp": past.strftime("%Y-%m-%dT%H:%M:%SZ")})
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "past_timestamp"
+
+
+@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
+def test_empty_event_id(uuid4):
+    data = validate_and_normalize({"event_id": ""})
+    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+
+
+@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
+def test_missing_event_id(uuid4):
+    data = validate_and_normalize({})
+    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+
+
+@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
+def test_invalid_event_id(uuid4):
+    data = validate_and_normalize({"event_id": "a" * 33})
+    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == "event_id"
+    assert data["errors"][0]["value"] == "a" * 33
+
+    data = validate_and_normalize({"event_id": "xyz"})
+    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "event_id"
+    assert data["errors"][0]["value"] == "xyz"
+
+
+def test_unknown_attribute():
+    data = validate_and_normalize({"message": "foo", "foo": "bar"})
+    assert "foo" not in data
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_attribute"
+    assert data["errors"][0]["name"] == "foo"
+
+
+def test_invalid_interface_name():
+    data = validate_and_normalize({"message": "foo", "foo.baz": "bar"})
+    assert "foo.baz" not in data
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_attribute"
+    assert data["errors"][0]["name"] == "foo.baz"
+
+
+def test_invalid_interface_import_path():
+    data = validate_and_normalize(
+        {"message": "foo", "sentry.interfaces.Exception2": "bar"}
+    )
+    assert "sentry.interfaces.Exception2" not in data
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_attribute"
+    assert data["errors"][0]["name"] == "sentry.interfaces.Exception2"
+
+
+def test_does_expand_list():
+    data = validate_and_normalize(
+        {
+            "message": "foo",
+            "exception": [
+                {"type": "ValueError", "value": "hello world", "module": "foo.bar"}
+            ],
+        }
+    )
+    assert "sentry.interfaces.Exception" in data
+
+
+def test_log_level_as_string():
+    data = validate_and_normalize({"message": "foo", "level": "error"})
+    assert data["level"] == 40
+
+
+def test_invalid_log_level():
+    data = validate_and_normalize({"message": "foo", "level": "foobar"})
+    assert data["level"] == 40
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "level"
+    assert data["errors"][0]["value"] == "foobar"
+
+
+def test_tags_as_string():
+    data = validate_and_normalize({"message": "foo", "tags": "bar"})
+    assert data["tags"] == []
+
+
+def test_tags_with_spaces():
+    data = validate_and_normalize({"message": "foo", "tags": {"foo bar": "baz bar"}})
+    assert data["tags"] == [("foo-bar", "baz bar")]
+
+
+def test_tags_out_of_bounds():
+    data = validate_and_normalize(
+        {
+            "message": "foo",
+            "tags": {"f" * 33: "value", "foo": "v" * 201, "bar": "value"},
+        }
+    )
+    assert data["tags"] == [("bar", "value")]
+    assert len(data["errors"]) == 2
+
+
+def test_tags_as_invalid_pair():
+    data = validate_and_normalize(
+        {"message": "foo", "tags": [("foo", "bar"), ("biz", "baz", "boz")]}
+    )
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "tags"
+    assert data["errors"][0]["value"] == [("foo", "bar"), ("biz", "baz", "boz")]
+
+
+def test_reserved_tags():
+    data = validate_and_normalize(
+        {"message": "foo", "tags": [("foo", "bar"), ("release", "abc123")]}
+    )
+    assert data["tags"] == [("foo", "bar")]
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "tags"
+    assert data["errors"][0]["value"] == ("release", "abc123")
+
+
+def test_tag_value():
+    data = validate_and_normalize(
+        {"message": "foo", "tags": [("foo", "b\nar"), ("biz", "baz")]}
+    )
+    assert data["tags"] == [("biz", "baz")]
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "tags"
+    assert data["errors"][0]["value"] == ("foo", "b\nar")
+
+
+def test_extra_as_string():
+    data = validate_and_normalize({"message": "foo", "extra": "bar"})
+    assert data["extra"] == {}
+
+
+def test_release_tag_max_len():
+    release_key = u"sentry:release"
+    release_value = "a" * VERSION_LENGTH
+    data = validate_and_normalize(
+        {"message": "foo", "tags": [[release_key, release_value]]}
+    )
+    assert not data["errors"]
+    assert data["tags"] == [(release_key, release_value)]
+
+
+def test_server_name_too_long():
+    key = u"server_name"
+    value = "a" * (MAX_CULPRIT_LENGTH + 1)
+    data = validate_and_normalize({key: value})
+    assert not data.get(key)
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == key
+    assert data["errors"][0]["value"] == value
+
+
+def test_site_too_long():
+    key = u"site"
+    value = "a" * (MAX_CULPRIT_LENGTH + 1)
+    data = validate_and_normalize({key: value})
+    assert not data.get(key)
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == key
+    assert data["errors"][0]["value"] == value
+
+
+def test_release_too_long():
+    data = validate_and_normalize({"release": "a" * (VERSION_LENGTH + 1)})
+    assert not data.get("release")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == "release"
+    assert data["errors"][0]["value"] == "a" * (VERSION_LENGTH + 1)
+
+
+def test_release_as_non_string():
+    data = validate_and_normalize({"release": 42})
+    assert data.get("release") == "42"
+
+
+def test_distribution_too_long():
+    data = validate_and_normalize({"release": "a" * 62, "dist": "b" * 65})
+    assert not data.get("dist")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == "dist"
+    assert data["errors"][0]["value"] == "b" * 65
+
+
+def test_distribution_bad_char():
+    data = validate_and_normalize({"release": "a" * 62, "dist": "^%"})
+    assert not data.get("dist")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "dist"
+    assert data["errors"][0]["value"] == "^%"
+
+
+def test_distribution_strip():
+    data = validate_and_normalize({"release": "a" * 62, "dist": " foo "})
+    assert data.get("dist") == "foo"
+
+
+def test_distribution_as_non_string():
+    data = validate_and_normalize({"release": "42", "dist": 23})
+    assert data.get("release") == "42"
+    assert data.get("dist") == "23"
+
+
+def test_distribution_no_release():
+    data = validate_and_normalize({"dist": 23})
+    assert data.get("dist") is None
+
+
+def test_valid_platform():
+    data = validate_and_normalize({"platform": "python"})
+    assert data.get("platform") == "python"
+
+
+def test_no_platform():
+    data = validate_and_normalize({})
+    assert data.get("platform") == "other"
+
+
+def test_invalid_platform():
+    data = validate_and_normalize({"platform": "foobar"})
+    assert data.get("platform") == "other"
+
+
+def test_environment_too_long():
+    data = validate_and_normalize({"environment": "a" * 65})
+    assert not data.get("environment")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == "environment"
+    assert data["errors"][0]["value"] == "a" * 65
+
+
+def test_environment_invalid():
+    data = validate_and_normalize({"environment": "a/b"})
+    assert not data.get("environment")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_environment"
+    assert data["errors"][0]["name"] == "environment"
+    assert data["errors"][0]["value"] == "a/b"
+
+
+def test_environment_as_non_string():
+    data = validate_and_normalize({"environment": 42})
+    assert data.get("environment") == "42"
+
+
+def test_time_spent_too_large():
+    data = validate_and_normalize({"time_spent": 2147483647 + 1})
+    assert not data.get("time_spent")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "value_too_long"
+    assert data["errors"][0]["name"] == "time_spent"
+    assert data["errors"][0]["value"] == 2147483647 + 1
+
+
+def test_time_spent_invalid():
+    data = validate_and_normalize({"time_spent": "lol"})
+    assert not data.get("time_spent")
+    assert len(data["errors"]) == 1
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "time_spent"
+    assert data["errors"][0]["value"] == "lol"
+
+
+def test_time_spent_non_int():
+    data = validate_and_normalize({"time_spent": "123"})
+    assert data["time_spent"] == 123
+
+
+def test_fingerprints():
+    data = validate_and_normalize({"fingerprint": "2012-01-01T10:30:45"})
+    assert not data.get("fingerprint")
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "fingerprint"
+
+    data = validate_and_normalize({"fingerprint": ["foo", ["bar"]]})
+    assert not data.get("fingerprint")
+    assert data["errors"][0]["type"] == "invalid_data"
+    assert data["errors"][0]["name"] == "fingerprint"
+
+    data = validate_and_normalize(
+        {"fingerprint": ["{{default}}", 1, "bar", 4.5, -2.7, True]}
+    )
+    assert data.get("fingerprint") == ["{{default}}", "1", "bar", "4", "-2", "True"]
+    assert len(data["errors"]) == 0
+
+    data = validate_and_normalize({"fingerprint": ["{{default}}", 1e100, -1e100, 1e10]})
+    assert data.get("fingerprint") == ["{{default}}", "10000000000"]
+    assert len(data["errors"]) == 0
+
+    data = validate_and_normalize({"fingerprint": []})
+    assert data.get("fingerprint") == []
+    assert len(data["errors"]) == 0
+
+
+def test_messages():
+    # Just 'message': wrap it in interface
+    data = validate_and_normalize({"message": "foo is bar"})
+    assert "message" not in data
+    assert data["sentry.interfaces.Message"] == {"message": "foo is bar"}
+
+    # both 'message' and interface with no 'formatted' value, put 'message'
+    # into 'formatted'.
+    data = validate_and_normalize(
+        {
+            "message": "foo is bar",
+            "sentry.interfaces.Message": {"message": "something else"},
+        }
+    )
+    assert "message" not in data
+    assert data["sentry.interfaces.Message"] == {
+        "message": "something else",
+        "formatted": "foo is bar",
+    }
+
+    # both 'message' and complete interface, 'message' is discarded
+    data = validate_and_normalize(
+        {
+            "message": "foo is bar",
+            "sentry.interfaces.Message": {
+                "message": "something else",
+                "formatted": "something else formatted",
+            },
+        }
+    )
+    assert "message" not in data
+    assert len(data["errors"]) == 0
+    assert data["sentry.interfaces.Message"] == {
+        "message": "something else",
+        "formatted": "something else formatted",
+    }
+
+
+@pytest.mark.skip(reason="Message behavior that didn't make a lot of sense.")
+def test_messages_old_behavior():
+    # both 'message' and complete valid interface but interface has the same
+    # value for both keys so the 'formatted' value is discarded and ends up
+    # being replaced with 'message'
+    data = validate_and_normalize(
+        {
+            "message": "foo is bar",
+            "sentry.interfaces.Message": {
+                "message": "something else",
+                "formatted": "something else",
+            },
+        }
+    )
+    assert "message" not in data
+    assert len(data["errors"]) == 0
+    assert data["sentry.interfaces.Message"] == {
+        "message": "something else",
+        "formatted": "foo is bar",
+    }
+
+    # interface discarded as invalid, replaced by new interface containing
+    # wrapped 'message'
+    data = validate_and_normalize(
+        {"message": "foo is bar", "sentry.interfaces.Message": {"invalid": "invalid"}}
+    )
+    assert "message" not in data
+    assert len(data["errors"]) == 1
+    assert data["sentry.interfaces.Message"] == {"message": "foo is bar"}
diff --git a/tests/sentry/test_coreapi.py b/tests/sentry/test_coreapi.py
deleted file mode 100644
index ff0b2be124..0000000000
--- a/tests/sentry/test_coreapi.py
+++ /dev/null
@@ -1,52 +0,0 @@
-from __future__ import absolute_import
-from collections import namedtuple
-
-import mock
-from sentry.coreapi import ClientApiHelper
-from sentry.testutils import TestCase
-from sentry.utils.data_filters import FilterStatKeys
-
-
-class ClientApiHelperTestCase(TestCase):
-    @mock.patch('sentry.coreapi.is_valid_error_message')
-    def test_should_filter_message(self, mock_is_valid_error_message):
-
-        TestItem = namedtuple('TestItem', 'value formatted result')
-
-        helper = ClientApiHelper()
-
-        items = [
-            TestItem(
-                {'type': 'UnfilteredException'},
-                'UnfilteredException',
-                True,
-            ),
-            TestItem(
-                {'value': 'This is an unfiltered exception.'},
-                'This is an unfiltered exception.',
-                True,
-            ),
-            TestItem(
-                {'type': 'UnfilteredException', 'value': 'This is an unfiltered exception.'},
-                'UnfilteredException: This is an unfiltered exception.',
-                True,
-            ),
-            TestItem(
-                {'type': 'FilteredException', 'value': 'This is a filtered exception.'},
-                'FilteredException: This is a filtered exception.',
-                False,
-            ),
-        ]
-
-        data = {
-            'sentry.interfaces.Exception': {
-                'values': [item.value for item in items]
-            },
-        }
-
-        mock_is_valid_error_message.side_effect = [item.result for item in items]
-
-        assert helper.should_filter(self.project, data) == (True, FilterStatKeys.ERROR_MESSAGE)
-
-        assert mock_is_valid_error_message.call_args_list == [
-            mock.call(self.project, item.formatted) for item in items]
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index e76321b8af..30292abfaa 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -224,12 +224,12 @@ class StoreViewTest(TestCase):
         self.assertIn('Access-Control-Allow-Origin', resp)
         self.assertEquals(resp['Access-Control-Allow-Origin'], 'http://foo.com')
 
-    @mock.patch('sentry.coreapi.is_valid_ip', mock.Mock(return_value=False))
+    @mock.patch('sentry.event_manager.is_valid_ip', mock.Mock(return_value=False))
     def test_request_with_blacklisted_ip(self):
         resp = self._postWithHeader({})
         assert resp.status_code == 403, (resp.status_code, resp.content)
 
-    @mock.patch('sentry.coreapi.is_valid_release', mock.Mock(return_value=False))
+    @mock.patch('sentry.event_manager.is_valid_release', mock.Mock(return_value=False))
     def test_request_with_filtered_release(self):
         body = {
             "release": "abcdefg",
@@ -248,7 +248,7 @@ class StoreViewTest(TestCase):
         resp = self._postWithHeader(body)
         assert resp.status_code == 403, (resp.status_code, resp.content)
 
-    @mock.patch('sentry.coreapi.is_valid_error_message', mock.Mock(return_value=False))
+    @mock.patch('sentry.event_manager.is_valid_error_message', mock.Mock(return_value=False))
     def test_request_with_filtered_error(self):
         body = {
             "release": "abcdefg",
@@ -658,7 +658,7 @@ class StoreViewTest(TestCase):
         )
 
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
-    @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')
+    @mock.patch('sentry.event_manager.EventManager.should_filter')
     def test_filtered_signal(self, mock_should_filter):
         mock_should_filter.return_value = (True, 'ip-address')
 
