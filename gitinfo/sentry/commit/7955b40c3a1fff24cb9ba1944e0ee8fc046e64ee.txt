commit 7955b40c3a1fff24cb9ba1944e0ee8fc046e64ee
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 22 15:23:47 2013 -0700

    Split up sentry/web/frontend/projects.py into multiple submodules

diff --git a/src/sentry/web/frontend/projects.py b/src/sentry/web/frontend/projects.py
deleted file mode 100644
index 23cd26e4c4..0000000000
--- a/src/sentry/web/frontend/projects.py
+++ /dev/null
@@ -1,423 +0,0 @@
-"""
-sentry.web.frontend.projects
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from django.contrib import messages
-from django.core.context_processors import csrf
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
-from django.views.decorators.csrf import csrf_protect
-from django.views.decorators.http import require_http_methods
-from django.utils.translation import ugettext_lazy as _
-
-from sentry import app
-from sentry.constants import (
-    MEMBER_OWNER, STATUS_HIDDEN, DEFAULT_ALERT_PROJECT_THRESHOLD)
-from sentry.models import Project, ProjectKey, Team, TagKey
-from sentry.permissions import (
-    can_remove_project, can_add_project_key, can_remove_project_key)
-from sentry.plugins import plugins
-from sentry.web.decorators import login_required, has_access
-from sentry.web.forms.projects import (
-    ProjectTagsForm, RemoveProjectForm, EditProjectForm,
-    NotificationTagValuesForm, AlertSettingsForm, ProjectQuotasForm)
-from sentry.web.helpers import render_to_response, plugin_config
-
-
-@login_required
-@has_access
-def get_started(request, team, project):
-    return render_to_response('sentry/get_started.html', {
-        'project': project,
-        'team': project.team,
-    }, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def remove_project(request, team, project):
-    if not can_remove_project(request.user, project):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    project_list = filter(lambda x: x != project, Project.objects.get_for_user(request.user))
-
-    form = RemoveProjectForm(request.user, project_list, request.POST or None)
-
-    if form.is_valid():
-        removal_type = form.cleaned_data['removal_type']
-        if removal_type == '1':
-            from sentry.tasks.deletion import delete_project
-
-            delete_project.delay(object_id=project.id)
-            project.update(status=STATUS_HIDDEN)
-
-            messages.add_message(request, messages.SUCCESS,
-                _('Deletion has been queued and should occur shortly.'))
-        elif removal_type == '2':
-            new_project = form.cleaned_data['project']
-            project.merge_to(new_project)
-        elif removal_type == '3':
-            project.update(status=STATUS_HIDDEN)
-        else:
-            raise ValueError(removal_type)
-
-        return HttpResponseRedirect(reverse('sentry-manage-team-projects', args=[project.team.slug]))
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'form': form,
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/remove.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def manage_project(request, team, project):
-    result = plugins.first('has_perm', request.user, 'edit_project', project)
-    if result is False and not request.user.has_perm('sentry.can_change_project'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    team_list = Team.objects.get_for_user(project.owner or request.user, MEMBER_OWNER)
-
-    form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
-        'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
-        'owner': project.owner,
-        'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
-    })
-
-    if form.is_valid():
-        project = form.save()
-        project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
-        project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Changes to your project were saved.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[team.slug, project.slug]))
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'can_remove_project': can_remove_project(request.user, project),
-        'page': 'details',
-        'form': form,
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/manage.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def manage_project_keys(request, team, project):
-    result = plugins.first('has_perm', request.user, 'edit_project', project)
-    if result is False and not request.user.has_perm('sentry.can_change_project'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    key_list = list(ProjectKey.objects.filter(
-        project=project,
-    ).select_related('user', 'user_added').order_by('-id'))
-
-    for key in key_list:
-        key.project = project
-        key.can_remove = can_remove_project_key(request.user, key),
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'page': 'keys',
-        'project': project,
-        'key_list': key_list,
-        'can_add_key': can_add_project_key(request.user, project),
-    })
-
-    return render_to_response('sentry/projects/keys.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def new_project_key(request, team, project):
-    if not can_add_project_key(request.user, project):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
-
-    ProjectKey.objects.create(
-        project=project,
-        user_added=request.user,
-    )
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
-
-
-@require_http_methods(['POST'])
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def remove_project_key(request, team, project, key_id):
-    try:
-        key = ProjectKey.objects.get(id=key_id)
-    except ProjectKey.DoesNotExist:
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
-
-    if not can_remove_project_key(request.user, key):
-        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
-
-    key.delete()
-    messages.add_message(
-        request, messages.SUCCESS,
-        _('The API key (%s) was revoked.') % (key.public_key,))
-
-    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
-
-
-@has_access(MEMBER_OWNER)
-def manage_project_tags(request, team, project):
-    tag_list = filter(
-        lambda x: not x.startswith('sentry:'),
-        TagKey.objects.all_keys(project))
-
-    if tag_list:
-        form = ProjectTagsForm(project, tag_list, request.POST or None)
-    else:
-        form = None
-
-    if form and form.is_valid():
-        form.save()
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-project-tags', args=[project.team.slug, project.slug]))
-
-    context = {
-        'team': team,
-        'tag_list': tag_list,
-        'page': 'tags',
-        'project': project,
-        'form': form,
-    }
-    return render_to_response('sentry/projects/manage_tags.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def notification_settings(request, team, project):
-    initial = project.get_option('notifcation:tags', {})
-
-    tag_forms = []
-    for tag in TagKey.objects.all_keys(project):
-        tag_forms.append(NotificationTagValuesForm(
-            project=project,
-            tag=tag,
-            data=request.POST or None,
-            prefix='tag-%s' % (tag,),
-            initial={
-                'values': ', '.join(initial.get(tag, [])),
-            },
-        ))
-
-    threshold, min_events = project.get_option(
-        'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
-
-    alert_form = AlertSettingsForm(
-        data=request.POST or None,
-        prefix='alert',
-        initial={
-            'pct_threshold': threshold,
-            'min_events': min_events,
-        }
-    )
-
-    if request.method == 'POST' and all(f.is_valid() for f in tag_forms) and alert_form.is_valid():
-        tags = {}
-        for form in tag_forms:
-            values = form.cleaned_data['values']
-            if values:
-                tags[form.tag] = values
-        project.update_option('notifcation:tags', tags)
-
-        project.update_option('alert:threshold', (
-            alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.team.slug, project.slug]))
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'project': project,
-        'alert_form': alert_form,
-        'tag_forms': tag_forms,
-        'page': 'notifications',
-    })
-    return render_to_response('sentry/projects/notifications.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-def manage_project_quotas(request, team, project):
-    from sentry.quotas.base import Quota
-
-    form = ProjectQuotasForm(project, request.POST or None)
-
-    if form and form.is_valid():
-        form.save()
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.team.slug, project.slug]))
-
-    context = {
-        'team': team,
-        'page': 'quotas',
-        # TODO(dcramer): has_quotas is an awful hack
-        'has_quotas': type(app.quotas) != Quota,
-        'system_quota': app.quotas.get_system_quota(),
-        'team_quota': app.quotas.get_team_quota(team),
-        'project': project,
-        'form': form,
-    }
-    return render_to_response('sentry/projects/quotas.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def manage_plugins(request, team, project):
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project)
-    if result is False and not request.user.has_perm('sentry.can_change_project'):
-        return HttpResponseRedirect(reverse('sentry'))
-
-    if request.POST:
-        enabled = set(request.POST.getlist('plugin'))
-        for plugin in plugins.all():
-            if plugin.can_enable_for_projects():
-                plugin.set_option('enabled', plugin.slug in enabled, project)
-
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'page': 'plugins',
-        'project': project,
-    })
-
-    return render_to_response('sentry/projects/plugins/list.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def configure_project_plugin(request, team, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
-
-    if not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
-
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    form = plugin.project_conf_form
-    if form is None:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
-
-    action, view = plugin_config(plugin, project, request)
-    if action == 'redirect':
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(request.path)
-
-    context = csrf(request)
-    context.update({
-        'team': team,
-        'page': 'plugin',
-        'title': plugin.get_title(),
-        'view': view,
-        'project': project,
-        'plugin': plugin,
-        'plugin_is_enabled': plugin.is_enabled(project),
-    })
-
-    return render_to_response('sentry/projects/plugins/configure.html', context, request)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def reset_project_plugin(request, team, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
-
-    if not plugin.is_enabled(project):
-        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
-
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    plugin.reset_options(project=project)
-
-    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def enable_project_plugin(request, team, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
-
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
-
-    if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
-        return HttpResponseRedirect(redirect_to)
-
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    plugin.set_option('enabled', True, project)
-
-    return HttpResponseRedirect(redirect_to)
-
-
-@has_access(MEMBER_OWNER)
-@csrf_protect
-def disable_project_plugin(request, team, project, slug):
-    try:
-        plugin = plugins.get(slug)
-    except KeyError:
-        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
-
-    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
-
-    if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
-        return HttpResponseRedirect(redirect_to)
-
-    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
-    if result is False and not request.user.is_superuser:
-        return HttpResponseRedirect(reverse('sentry'))
-
-    plugin.set_option('enabled', False, project)
-
-    return HttpResponseRedirect(redirect_to)
diff --git a/src/sentry/web/frontend/projects/__init__.py b/src/sentry/web/frontend/projects/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/web/frontend/projects/general.py b/src/sentry/web/frontend/projects/general.py
new file mode 100644
index 0000000000..5b814c0c59
--- /dev/null
+++ b/src/sentry/web/frontend/projects/general.py
@@ -0,0 +1,17 @@
+"""
+sentry.web.frontend.projects.general
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.web.decorators import has_access
+from sentry.web.helpers import render_to_response
+
+
+@has_access
+def get_started(request, team, project):
+    return render_to_response('sentry/get_started.html', {
+        'project': project,
+        'team': project.team,
+    }, request)
diff --git a/src/sentry/web/frontend/projects/keys.py b/src/sentry/web/frontend/projects/keys.py
new file mode 100644
index 0000000000..d613684816
--- /dev/null
+++ b/src/sentry/web/frontend/projects/keys.py
@@ -0,0 +1,84 @@
+"""
+sentry.web.frontend.projects.keys
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+from django.views.decorators.http import require_http_methods
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER
+from sentry.models import ProjectKey
+from sentry.permissions import (
+    can_remove_project_key, can_add_project_key
+)
+from sentry.plugins import plugins
+from sentry.web.decorators import has_access
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def manage_project_keys(request, team, project):
+    result = plugins.first('has_perm', request.user, 'edit_project', project)
+    if result is False and not request.user.has_perm('sentry.can_change_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    key_list = list(ProjectKey.objects.filter(
+        project=project,
+    ).select_related('user', 'user_added').order_by('-id'))
+
+    for key in key_list:
+        key.project = project
+        key.can_remove = can_remove_project_key(request.user, key),
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'page': 'keys',
+        'project': project,
+        'key_list': key_list,
+        'can_add_key': can_add_project_key(request.user, project),
+    })
+
+    return render_to_response('sentry/projects/keys.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def new_project_key(request, team, project):
+    if not can_add_project_key(request.user, project):
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+
+    ProjectKey.objects.create(
+        project=project,
+        user_added=request.user,
+    )
+
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+
+
+@require_http_methods(['POST'])
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def remove_project_key(request, team, project, key_id):
+    try:
+        key = ProjectKey.objects.get(id=key_id)
+    except ProjectKey.DoesNotExist:
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+
+    if not can_remove_project_key(request.user, key):
+        return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
+
+    key.delete()
+    messages.add_message(
+        request, messages.SUCCESS,
+        _('The API key (%s) was revoked.') % (key.public_key,))
+
+    return HttpResponseRedirect(reverse('sentry-manage-project-keys', args=[project.team.slug, project.slug]))
diff --git a/src/sentry/web/frontend/projects/notifications.py b/src/sentry/web/frontend/projects/notifications.py
new file mode 100644
index 0000000000..5ea8228e43
--- /dev/null
+++ b/src/sentry/web/frontend/projects/notifications.py
@@ -0,0 +1,78 @@
+"""
+sentry.web.frontend.projects.notifications
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER, DEFAULT_ALERT_PROJECT_THRESHOLD
+from sentry.models import TagKey
+from sentry.web.decorators import has_access
+from sentry.web.forms.projects import (
+    AlertSettingsForm, NotificationTagValuesForm
+)
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def notification_settings(request, team, project):
+    initial = project.get_option('notifcation:tags', {})
+
+    tag_forms = []
+    for tag in TagKey.objects.all_keys(project):
+        tag_forms.append(NotificationTagValuesForm(
+            project=project,
+            tag=tag,
+            data=request.POST or None,
+            prefix='tag-%s' % (tag,),
+            initial={
+                'values': ', '.join(initial.get(tag, [])),
+            },
+        ))
+
+    threshold, min_events = project.get_option(
+        'alert:threshold', DEFAULT_ALERT_PROJECT_THRESHOLD)
+
+    alert_form = AlertSettingsForm(
+        data=request.POST or None,
+        prefix='alert',
+        initial={
+            'pct_threshold': threshold,
+            'min_events': min_events,
+        }
+    )
+
+    if request.method == 'POST' and all(f.is_valid() for f in tag_forms) and alert_form.is_valid():
+        tags = {}
+        for form in tag_forms:
+            values = form.cleaned_data['values']
+            if values:
+                tags[form.tag] = values
+        project.update_option('notifcation:tags', tags)
+
+        project.update_option('alert:threshold', (
+            alert_form.cleaned_data['pct_threshold'], alert_form.cleaned_data['min_events']))
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(reverse('sentry-project-notifications', args=[project.team.slug, project.slug]))
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'project': project,
+        'alert_form': alert_form,
+        'tag_forms': tag_forms,
+        'page': 'notifications',
+    })
+    return render_to_response('sentry/projects/notifications.html', context, request)
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
new file mode 100644
index 0000000000..0c2d4c4760
--- /dev/null
+++ b/src/sentry/web/frontend/projects/plugins.py
@@ -0,0 +1,152 @@
+"""
+sentry.web.frontend.projects.plugins
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER
+from sentry.plugins import plugins
+from sentry.web.decorators import has_access
+from sentry.web.helpers import render_to_response, plugin_config
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def manage_plugins(request, team, project):
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project)
+    if result is False and not request.user.has_perm('sentry.can_change_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    if request.POST:
+        enabled = set(request.POST.getlist('plugin'))
+        for plugin in plugins.all():
+            if plugin.can_enable_for_projects():
+                plugin.set_option('enabled', plugin.slug in enabled, project)
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(request.path)
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'page': 'plugins',
+        'project': project,
+    })
+
+    return render_to_response('sentry/projects/plugins/list.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def configure_project_plugin(request, team, project, slug):
+    try:
+        plugin = plugins.get(slug)
+    except KeyError:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+
+    if not plugin.can_enable_for_projects():
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
+    if result is False and not request.user.is_superuser:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    form = plugin.project_conf_form
+    if form is None:
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.team.slug, project.slug]))
+
+    action, view = plugin_config(plugin, project, request)
+    if action == 'redirect':
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(request.path)
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'page': 'plugin',
+        'title': plugin.get_title(),
+        'view': view,
+        'project': project,
+        'plugin': plugin,
+        'plugin_is_enabled': plugin.is_enabled(project),
+    })
+
+    return render_to_response('sentry/projects/plugins/configure.html', context, request)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def reset_project_plugin(request, team, project, slug):
+    try:
+        plugin = plugins.get(slug)
+    except KeyError:
+        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+
+    if not plugin.is_enabled(project):
+        return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
+    if result is False and not request.user.is_superuser:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    plugin.reset_options(project=project)
+
+    return HttpResponseRedirect(reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug]))
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def enable_project_plugin(request, team, project, slug):
+    try:
+        plugin = plugins.get(slug)
+    except KeyError:
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
+
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
+
+    if plugin.is_enabled(project) or not plugin.can_enable_for_projects():
+        return HttpResponseRedirect(redirect_to)
+
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
+    if result is False and not request.user.is_superuser:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    plugin.set_option('enabled', True, project)
+
+    return HttpResponseRedirect(redirect_to)
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def disable_project_plugin(request, team, project, slug):
+    try:
+        plugin = plugins.get(slug)
+    except KeyError:
+        return HttpResponseRedirect(reverse('sentry-manage-project-plugins', args=[project.team.slug, project.slug]))
+
+    redirect_to = reverse('sentry-configure-project-plugin', args=[project.team.slug, project.slug, slug])
+
+    if not (plugin.can_disable and plugin.is_enabled(project) and plugin.can_enable_for_projects()):
+        return HttpResponseRedirect(redirect_to)
+
+    result = plugins.first('has_perm', request.user, 'configure_project_plugin', project, plugin)
+    if result is False and not request.user.is_superuser:
+        return HttpResponseRedirect(reverse('sentry'))
+
+    plugin.set_option('enabled', False, project)
+
+    return HttpResponseRedirect(redirect_to)
diff --git a/src/sentry/web/frontend/projects/quotas.py b/src/sentry/web/frontend/projects/quotas.py
new file mode 100644
index 0000000000..f79e8d3275
--- /dev/null
+++ b/src/sentry/web/frontend/projects/quotas.py
@@ -0,0 +1,45 @@
+"""
+sentry.web.frontend.projects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry import app
+from sentry.constants import MEMBER_OWNER
+from sentry.web.decorators import has_access
+from sentry.web.forms.projects import ProjectQuotasForm
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+def manage_project_quotas(request, team, project):
+    from sentry.quotas.base import Quota
+
+    form = ProjectQuotasForm(project, request.POST or None)
+
+    if form and form.is_valid():
+        form.save()
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(reverse('sentry-manage-project-quotas', args=[project.team.slug, project.slug]))
+
+    context = {
+        'team': team,
+        'page': 'quotas',
+        # TODO(dcramer): has_quotas is an awful hack
+        'has_quotas': type(app.quotas) != Quota,
+        'system_quota': app.quotas.get_system_quota(),
+        'team_quota': app.quotas.get_team_quota(team),
+        'project': project,
+        'form': form,
+    }
+    return render_to_response('sentry/projects/quotas.html', context, request)
diff --git a/src/sentry/web/frontend/projects/remove.py b/src/sentry/web/frontend/projects/remove.py
new file mode 100644
index 0000000000..b485859006
--- /dev/null
+++ b/src/sentry/web/frontend/projects/remove.py
@@ -0,0 +1,61 @@
+"""
+sentry.web.frontend.projects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER, STATUS_HIDDEN
+from sentry.models import Project
+from sentry.permissions import can_remove_project
+from sentry.web.decorators import has_access
+from sentry.web.forms.projects import RemoveProjectForm
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def remove_project(request, team, project):
+    if not can_remove_project(request.user, project):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    project_list = filter(lambda x: x != project, Project.objects.get_for_user(request.user))
+
+    form = RemoveProjectForm(request.user, project_list, request.POST or None)
+
+    if form.is_valid():
+        removal_type = form.cleaned_data['removal_type']
+        if removal_type == '1':
+            from sentry.tasks.deletion import delete_project
+
+            delete_project.delay(object_id=project.id)
+            project.update(status=STATUS_HIDDEN)
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Deletion has been queued and should occur shortly.'))
+        elif removal_type == '2':
+            new_project = form.cleaned_data['project']
+            project.merge_to(new_project)
+        elif removal_type == '3':
+            project.update(status=STATUS_HIDDEN)
+        else:
+            raise ValueError(removal_type)
+
+        return HttpResponseRedirect(reverse('sentry-manage-team-projects', args=[project.team.slug]))
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'form': form,
+        'project': project,
+    })
+
+    return render_to_response('sentry/projects/remove.html', context, request)
diff --git a/src/sentry/web/frontend/projects/settings.py b/src/sentry/web/frontend/projects/settings.py
new file mode 100644
index 0000000000..c16cbd1535
--- /dev/null
+++ b/src/sentry/web/frontend/projects/settings.py
@@ -0,0 +1,58 @@
+"""
+sentry.web.frontend.projects.settings
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER
+from sentry.models import Team
+from sentry.permissions import can_remove_project
+from sentry.plugins import plugins
+from sentry.web.decorators import has_access
+from sentry.web.forms.projects import EditProjectForm
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+@csrf_protect
+def manage_project(request, team, project):
+    result = plugins.first('has_perm', request.user, 'edit_project', project)
+    if result is False and not request.user.has_perm('sentry.can_change_project'):
+        return HttpResponseRedirect(reverse('sentry'))
+
+    team_list = Team.objects.get_for_user(project.owner or request.user, MEMBER_OWNER)
+
+    form = EditProjectForm(request, team_list, request.POST or None, instance=project, initial={
+        'origins': '\n'.join(project.get_option('sentry:origins', None) or []),
+        'owner': project.owner,
+        'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
+    })
+
+    if form.is_valid():
+        project = form.save()
+        project.update_option('sentry:origins', form.cleaned_data.get('origins') or [])
+        project.update_option('sentry:resolve_age', form.cleaned_data.get('resolve_age'))
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Changes to your project were saved.'))
+
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[team.slug, project.slug]))
+
+    context = csrf(request)
+    context.update({
+        'team': team,
+        'can_remove_project': can_remove_project(request.user, project),
+        'page': 'details',
+        'form': form,
+        'project': project,
+    })
+
+    return render_to_response('sentry/projects/manage.html', context, request)
diff --git a/src/sentry/web/frontend/projects/tags.py b/src/sentry/web/frontend/projects/tags.py
new file mode 100644
index 0000000000..f5e37327a8
--- /dev/null
+++ b/src/sentry/web/frontend/projects/tags.py
@@ -0,0 +1,47 @@
+"""
+sentry.web.frontend.projects
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2012 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.contrib import messages
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import MEMBER_OWNER
+from sentry.models import TagKey
+from sentry.web.decorators import has_access
+from sentry.web.forms.projects import ProjectTagsForm
+from sentry.web.helpers import render_to_response
+
+
+@has_access(MEMBER_OWNER)
+def manage_project_tags(request, team, project):
+    tag_list = filter(
+        lambda x: not x.startswith('sentry:'),
+        TagKey.objects.all_keys(project))
+
+    if tag_list:
+        form = ProjectTagsForm(project, tag_list, request.POST or None)
+    else:
+        form = None
+
+    if form and form.is_valid():
+        form.save()
+
+        messages.add_message(
+            request, messages.SUCCESS,
+            _('Your settings were saved successfully.'))
+
+        return HttpResponseRedirect(reverse('sentry-manage-project-tags', args=[project.team.slug, project.slug]))
+
+    context = {
+        'team': team,
+        'tag_list': tag_list,
+        'page': 'tags',
+        'project': project,
+        'form': form,
+    }
+    return render_to_response('sentry/projects/manage_tags.html', context, request)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 0f36b6127d..5f029ef2b0 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -17,7 +17,16 @@ except ImportError:
 from sentry.web import api
 from sentry.web.frontend import (
     alerts, accounts, generic, groups, events,
-    projects, admin, docs, teams, users, explore, explore_code)
+    admin, docs, teams, users, explore, explore_code)
+
+import sentry.web.frontend.projects.general
+import sentry.web.frontend.projects.keys
+import sentry.web.frontend.projects.notifications
+import sentry.web.frontend.projects.plugins
+import sentry.web.frontend.projects.quotas
+import sentry.web.frontend.projects.remove
+import sentry.web.frontend.projects.settings
+import sentry.web.frontend.projects.tags
 
 __all__ = ('urlpatterns',)
 
@@ -106,35 +115,60 @@ urlpatterns = patterns('',
         name='sentry-accept-invite'),
 
     # Settings - Projects
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/$', projects.manage_project,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/get-started/$',
+        sentry.web.frontend.projects.general.get_started,
+        name='sentry-get-started'),
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/settings/$',
+        sentry.web.frontend.projects.settings.manage_project,
         name='sentry-manage-project'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$', docs.client_help,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/$',
+        docs.client_help,
         name='sentry-project-client-help'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/docs/(?P<platform>%s)/$' % ('|'.join(re.escape(r) for r in docs.PLATFORM_LIST),),
-        docs.client_guide, name='sentry-docs-client'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$', projects.manage_project_keys,
+        docs.client_guide,
+        name='sentry-docs-client'),
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/$',
+        sentry.web.frontend.projects.keys.manage_project_keys,
         name='sentry-manage-project-keys'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/new/$', projects.new_project_key,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/new/$',
+        sentry.web.frontend.projects.keys.new_project_key,
         name='sentry-new-project-key'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$', projects.remove_project_key,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/keys/(?P<key_id>\d+)/remove/$',
+        sentry.web.frontend.projects.keys.remove_project_key,
         name='sentry-remove-project-key'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/$', projects.manage_plugins,
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/$',
+        sentry.web.frontend.projects.plugins.manage_plugins,
         name='sentry-manage-project-plugins'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/$', projects.configure_project_plugin,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/$',
+        sentry.web.frontend.projects.plugins.configure_project_plugin,
         name='sentry-configure-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/reset/$', projects.reset_project_plugin,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/reset/$',
+        sentry.web.frontend.projects.plugins.reset_project_plugin,
         name='sentry-reset-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/disable/$', projects.disable_project_plugin,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/disable/$',
+        sentry.web.frontend.projects.plugins.disable_project_plugin,
         name='sentry-disable-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/enable/$', projects.enable_project_plugin,
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/plugins/(?P<slug>[\w_-]+)/enable/$',
+        sentry.web.frontend.projects.plugins.enable_project_plugin,
         name='sentry-enable-project-plugin'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/remove/$', projects.remove_project,
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/remove/$',
+        sentry.web.frontend.projects.remove.remove_project,
         name='sentry-remove-project'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$', projects.manage_project_tags,
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/tags/$',
+        sentry.web.frontend.projects.tags.manage_project_tags,
         name='sentry-manage-project-tags'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/quotas/$', projects.manage_project_quotas,
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/quotas/$',
+        sentry.web.frontend.projects.quotas.manage_project_quotas,
         name='sentry-manage-project-quotas'),
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$', projects.notification_settings,
+
+    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/notifications/$',
+        sentry.web.frontend.projects.notifications.notification_settings,
         name='sentry-project-notifications'),
 
     # Generic
@@ -257,8 +291,6 @@ urlpatterns = patterns('',
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/explore/(?P<key>[^\/]+)/(?P<value_id>\d+)/$', explore.tag_value_details,
         name='sentry-explore-tag-value'),
 
-    url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/get-started/$', projects.get_started,
-        name='sentry-get-started'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/$', groups.group,
         name='sentry-group'),
     url(r'^(?P<team_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/$', groups.group_event_list,
