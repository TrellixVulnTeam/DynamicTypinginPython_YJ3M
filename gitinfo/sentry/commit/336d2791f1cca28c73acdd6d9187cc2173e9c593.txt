commit 336d2791f1cca28c73acdd6d9187cc2173e9c593
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 4 22:34:15 2012 -0800

    Full permission tests for project pages

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index d93ebb03fc..cccd59563e 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -102,3 +102,7 @@ VIEWS = (
     'sentry.views.Message',
     'sentry.views.Query',
 )
+
+# Should users without 'sentry.add_project' permissions be allowed
+# to create new projects
+ALLOW_PROJECT_CREATION = False
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index b16f96159b..10d1e4640e 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -15,7 +15,7 @@ def has_access(group_or_func=None):
     The default permission scope is 'user', which
     allows both 'user' and 'owner' access, but not 'system agent'.
 
-    >>> @has_access('owner')
+    >>> @has_access(MEMBER_OWNER)
     >>> def foo(request, project):
     >>>     return
 
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 017d8a60e9..2112b60a03 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -1,11 +1,11 @@
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect, HttpResponseForbidden
+from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
+from sentry.conf import settings
 from sentry.models import MEMBER_USER, MEMBER_OWNER
-from sentry.web.decorators import login_required, has_access, \
-     permission_required
+from sentry.web.decorators import login_required, has_access
 from sentry.web.forms import EditProjectForm, NewProjectForm, \
      EditProjectMemberForm, NewProjectMemberForm, RemoveProjectForm
 from sentry.web.helpers import render_to_response, get_project_list
@@ -18,9 +18,12 @@ def project_list(request):
     }, request)
 
 
-@permission_required('sentry.add_project')
+@login_required
 @csrf_protect
 def new_project(request):
+    if not (settings.ALLOW_PROJECT_CREATION or request.user.has_perm('sentry.add_project')):
+        return HttpResponseRedirect(reverse('sentry'))
+
     form = NewProjectForm(request.POST or None)
     if form.is_valid():
         project = form.save(commit=False)
@@ -42,7 +45,7 @@ def new_project(request):
 
 
 @login_required
-@has_access('owner')
+@has_access(MEMBER_OWNER)
 @csrf_protect
 def remove_project(request, project):
     project_list = filter(lambda x: x != project, get_project_list(request.user).itervalues())
@@ -73,7 +76,7 @@ def remove_project(request, project):
 
 
 @login_required
-@has_access('owner')
+@has_access(MEMBER_OWNER)
 @csrf_protect
 def manage_project(request, project):
     form = EditProjectForm(request.POST or None, instance=project)
@@ -96,7 +99,7 @@ def manage_project(request, project):
 
 
 @csrf_protect
-@has_access('owner')
+@has_access(MEMBER_OWNER)
 def new_project_member(request, project):
     form = NewProjectMemberForm(project, request.POST or None, initial={
         'type': MEMBER_USER,
@@ -118,7 +121,7 @@ def new_project_member(request, project):
 
 
 @csrf_protect
-@has_access('owner')
+@has_access(MEMBER_OWNER)
 def edit_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
 
@@ -139,11 +142,11 @@ def edit_project_member(request, project, member_id):
 
 
 @csrf_protect
-@has_access('owner')
+@has_access(MEMBER_OWNER)
 def remove_project_member(request, project, member_id):
     member = project.member_set.get(pk=member_id)
     if member.user == project.owner:
-        return HttpResponseForbidden()
+        return HttpResponseRedirect(reverse('sentry-project-list'))
 
     if request.POST:
         member.delete()
diff --git a/tests/web/tests.py b/tests/web/tests.py
index 487e644633..094601ea29 100644
--- a/tests/web/tests.py
+++ b/tests/web/tests.py
@@ -8,7 +8,8 @@ from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 
-from sentry.models import Group, Project, ProjectMember
+from sentry.models import Group, Project, ProjectMember, \
+  MEMBER_OWNER, MEMBER_USER
 from sentry.web.helpers import get_login_url
 
 from tests.base import TestCase
@@ -124,93 +125,127 @@ class SentryViewsTest(TestCase):
         # self.assertEquals(resp.status_code, 200)
         # self.assertTemplateUsed(resp, 'sentry/events/replay.html')
 
+
+class ViewPermissionTest(TestCase):
+    """
+    These tests simply ensure permission requirements for various views.
+    """
+    fixtures = ['tests/fixtures/views.json']
+
+    def setUp(self):
+        self.user = User(username="admin", email="admin@localhost", is_staff=True, is_superuser=True)
+        self.user.set_password('admin')
+        self.user.save()
+        self.user2 = User(username="member", email="member@localhost")
+        self.user2.set_password('member')
+        self.user2.save()
+        self.user3 = User(username="nobody", email="nobody@localhost")
+        self.user3.set_password('nobody')
+        self.user3.save()
+        self.user4 = User(username="owner", email="owner@localhost")
+        self.user4.set_password('owner')
+        self.user4.save()
+        self.pm = ProjectMember.objects.create(
+            user_id=2,
+            project_id=1,
+            type=MEMBER_USER,
+        )
+        self.pm = ProjectMember.objects.create(
+            user_id=4,
+            project_id=1,
+            type=MEMBER_OWNER,
+        )
+        self.project = Project.objects.get(id=1)
+        self.project.update(public=False)
+
+    def _assertPerm(self, path, template, account=None, want=True):
+        """
+        Requests ``path`` and asserts that ``template`` is
+        rendered for ``account`` (Anonymous if None) given ``want``
+        is Trueish.
+        """
+        if account:
+            self.assertTrue(self.client.login(username=account, password=account))
+        else:
+            self.client.logout()
+        resp = self.client.get(path)
+        if want:
+            self.assertEquals(resp.status_code, 200)
+            self.assertTemplateUsed(resp, template)
+        else:
+            self.assertEquals(resp.status_code, 302)
+            self.assertTemplateNotUsed(resp, template)
+
     def test_project_list(self):
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(reverse('sentry-project-list'))
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/list.html')
+        path = reverse('sentry-project-list')
+        template = 'sentry/projects/list.html'
+
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'nobody')
+        self._assertPerm(path, template, None, False)
 
     def test_new_project(self):
         path = reverse('sentry-new-project')
+        template = 'sentry/projects/new.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302)
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, None, False)
 
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/new.html')
+        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True):
+            self._assertPerm(path, template, 'admin')
+            self._assertPerm(path, template, 'nobody')
+            self._assertPerm(path, template, None, False)
 
     def test_manage_project(self):
         path = reverse('sentry-manage-project', kwargs={'project_id': 1})
+        template = 'sentry/projects/manage.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302)
-
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/manage.html')
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'owner')
+        self._assertPerm(path, template, None, False)
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, 'member', False)
 
     def test_remove_project(self):
         path = reverse('sentry-remove-project', kwargs={'project_id': 1})
+        template = 'sentry/projects/remove.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302)
-
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/remove.html')
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'owner')
+        self._assertPerm(path, template, None, False)
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, 'member', False)
 
     def test_new_project_member(self):
         path = reverse('sentry-new-project-member', kwargs={'project_id': 1})
+        template = 'sentry/projects/members/new.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302)
-
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200)
-        self.assertTemplateUsed(resp, 'sentry/projects/members/new.html')
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'owner')
+        self._assertPerm(path, template, None, False)
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, 'member', False)
 
     def test_edit_project_member(self):
-        ProjectMember.objects.create(project_id=1, user_id=1)
-
         path = reverse('sentry-edit-project-member', kwargs={'project_id': 1, 'member_id': 1})
+        template = 'sentry/projects/members/edit.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302)
-
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/projects/members/edit.html')
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'owner')
+        self._assertPerm(path, template, None, False)
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, 'member', False)
 
     def test_remove_project_member(self):
-        ProjectMember.objects.create(project_id=1, user_id=1)
-
         path = reverse('sentry-remove-project-member', kwargs={'project_id': 1, 'member_id': 1})
+        template = 'sentry/projects/members/remove.html'
 
-        # unauthenticated
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 302, resp.content)
-
-        # superuser
-        self.client.login(username='admin', password='admin')
-        resp = self.client.get(path)
-        self.assertEquals(resp.status_code, 200, resp.content)
-        self.assertTemplateUsed(resp, 'sentry/projects/members/remove.html')
+        self._assertPerm(path, template, 'admin')
+        self._assertPerm(path, template, 'owner')
+        self._assertPerm(path, template, None, False)
+        self._assertPerm(path, template, 'nobody', False)
+        self._assertPerm(path, template, 'member', False)
 
 
 class SentryFeedsTest(TestCase):
