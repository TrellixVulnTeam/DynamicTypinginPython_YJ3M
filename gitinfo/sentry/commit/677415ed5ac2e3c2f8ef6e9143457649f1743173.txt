commit 677415ed5ac2e3c2f8ef6e9143457649f1743173
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Jan 10 12:07:46 2020 -0800

    feat(alerts): Remove "Suspects" UI and endpoint (#16378)
    
    This was used on the Incidents details view, but is no longer used

diff --git a/src/sentry/api/endpoints/organization_incident_suspects_index.py b/src/sentry/api/endpoints/organization_incident_suspects_index.py
deleted file mode 100644
index 20ef08b059..0000000000
--- a/src/sentry/api/endpoints/organization_incident_suspects_index.py
+++ /dev/null
@@ -1,35 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.bases.incident import IncidentEndpoint, IncidentPermission
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.commit import CommitSerializer
-from sentry.incidents.logic import get_incident_suspects
-
-
-class OrganizationIncidentSuspectsIndexEndpoint(IncidentEndpoint):
-    permission_classes = (IncidentPermission,)
-
-    def get(self, request, organization, incident):
-        """
-        Fetches potential causes of an Incident.
-        ````````````````````````````````````````
-        Fetches potential causes of an Incident. Currently this is just suspect
-        commits for all related Groups.
-        :auth: required
-        """
-
-        # Only fetch suspects for projects that the user has access to
-        projects = [
-            project
-            for project in incident.projects.all()
-            if request.access.has_project_access(project)
-        ]
-        commits = list(get_incident_suspects(incident, projects))
-        # These are just commits for the moment, just serialize them directly
-        serialized_suspects = serialize(commits, request.user, serializer=CommitSerializer())
-
-        # TODO: For now just hard coding this format. As we add in more formats
-        # we'll handle this in a more robust way.
-        return self.respond(
-            [{"type": "commit", "data": suspect} for suspect in serialized_suspects]
-        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 2cdfacc0ed..908207698d 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -108,9 +108,6 @@ from .endpoints.organization_incident_seen import OrganizationIncidentSeenEndpoi
 from .endpoints.organization_incident_subscription_index import (
     OrganizationIncidentSubscriptionIndexEndpoint,
 )
-from .endpoints.organization_incident_suspects_index import (
-    OrganizationIncidentSuspectsIndexEndpoint,
-)
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_integration_details import OrganizationIntegrationDetailsEndpoint
 from .endpoints.organization_integration_repos import OrganizationIntegrationReposEndpoint
@@ -641,11 +638,6 @@ urlpatterns = [
                     OrganizationIncidentSubscriptionIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-incident-subscription-index",
                 ),
-                url(
-                    r"^(?P<organization_slug>[^\/]+)/incidents/(?P<incident_identifier>[^\/]+)/suspects/$",
-                    OrganizationIncidentSuspectsIndexEndpoint.as_view(),
-                    name="sentry-api-0-organization-incident-suspect-index",
-                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/chunk-upload/$",
                     ChunkUploadEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/views/incidents/details/body.tsx b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
index 7d5d274c33..dd5c3cec19 100644
--- a/src/sentry/static/sentry/app/views/incidents/details/body.tsx
+++ b/src/sentry/static/sentry/app/views/incidents/details/body.tsx
@@ -16,7 +16,6 @@ import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 
 import Activity from './activity';
-import Suspects from './suspects';
 
 import {Incident} from '../types';
 
@@ -84,8 +83,6 @@ export default class DetailsBody extends React.Component<Props> {
                 </div>
               )}
             </div>
-
-            <Suspects {...this.props} />
           </PageContent>
         </Sidebar>
       </StyledPageContent>
diff --git a/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx b/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx
deleted file mode 100644
index 6a593462b5..0000000000
--- a/src/sentry/static/sentry/app/views/incidents/details/suspects.tsx
+++ /dev/null
@@ -1,153 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from 'react-emotion';
-import {RouteComponentProps} from 'react-router/lib/Router';
-
-import {Panel, PanelBody, PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
-import AsyncComponent from 'app/components/asyncComponent';
-import CommitLink from 'app/components/commitLink';
-import IdBadge from 'app/components/idBadge';
-import Placeholder from 'app/components/placeholder';
-import SentryTypes from 'app/sentryTypes';
-import TimeSince from 'app/components/timeSince';
-import overflowEllipsis from 'app/styles/overflowEllipsis';
-import space from 'app/styles/space';
-
-import SideHeader from './sideHeader';
-import {IncidentSuspect} from '../types';
-
-type Props = {
-  className?: string;
-  loading: boolean;
-  suspects: {
-    type: 'commit';
-    data: IncidentSuspect;
-  }[];
-};
-
-class Suspects extends React.Component<Props> {
-  render() {
-    const {className, loading, suspects} = this.props;
-
-    if (!loading && !suspects.length) {
-      return null;
-    }
-
-    return (
-      <div className={className}>
-        <SideHeader loading={loading}>
-          {t('Suspects')} ({loading || !suspects ? '-' : suspects.length})
-        </SideHeader>
-        {loading ? (
-          <Placeholder height="60px" bottomGutter={1} />
-        ) : (
-          suspects &&
-          suspects.length > 0 && (
-            <Panel>
-              <PanelBody>
-                {suspects.map(({type, data}) => (
-                  <SuspectItem p={1} key={data.id}>
-                    <Type>{type}</Type>
-                    <Message type={type} suspect={data} />
-                    <AuthorRow>
-                      <IdBadge user={data.author} hideEmail />
-                      <LightTimeSince date={data.dateCreated} />
-                    </AuthorRow>
-                  </SuspectItem>
-                ))}
-              </PanelBody>
-            </Panel>
-          )
-        )}
-      </div>
-    );
-  }
-}
-
-const StyledSuspects = styled(Suspects)<Props>`
-  margin-top: ${space(1)};
-`;
-
-type SuspectsContainerProps = AsyncComponent['props'] &
-  RouteComponentProps<{incidentId: string; orgId: string}, {}>;
-
-export default class SuspectsContainer extends AsyncComponent<SuspectsContainerProps> {
-  getEndpoints(): [string, string][] {
-    const {orgId, incidentId} = this.props.params;
-
-    return [['data', `/organizations/${orgId}/incidents/${incidentId}/suspects/`]];
-  }
-
-  renderLoading() {
-    return this.renderBody();
-  }
-
-  renderError(error) {
-    return super.renderError(error, true, true);
-  }
-
-  renderBody() {
-    return (
-      <StyledSuspects
-        loading={this.state.loading}
-        suspects={this.state.data}
-        {...this.props}
-      />
-    );
-  }
-}
-
-function Message({type, suspect}) {
-  const {message, id, repository} = suspect;
-  if (type === 'commit') {
-    return (
-      <CommitRow>
-        <MessageOverflow>
-          <span>{message.split(/\n/)[0]}</span>
-        </MessageOverflow>
-        <CommitLink commitId={id} repository={repository} />
-      </CommitRow>
-    );
-  }
-
-  return null;
-}
-
-Message.propTypes = {
-  type: PropTypes.oneOf(['commit']),
-  suspect: SentryTypes.IncidentSuspectData,
-};
-
-const Type = styled('div')`
-  text-transform: uppercase;
-  color: ${p => p.theme.gray4};
-  font-size: ${p => p.theme.fontSizeMedium};
-  font-weight: bold;
-`;
-
-const FlexCenter = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-const CommitRow = styled(FlexCenter)`
-  margin: ${space(0.5)} 0;
-`;
-const AuthorRow = styled(FlexCenter)`
-  color: ${p => p.theme.gray2};
-  justify-content: space-between;
-  font-size: ${p => p.theme.fontSizeSmall};
-`;
-
-const MessageOverflow = styled('div')`
-  flex: 1;
-  ${overflowEllipsis}
-`;
-
-const SuspectItem = styled(PanelItem)`
-  flex-direction: column;
-`;
-
-const LightTimeSince = styled(TimeSince)`
-  font-size: ${p => p.theme.fontSizeSmall};
-`;
diff --git a/tests/js/sentry-test/fixtures/incidentSuspectCommit.js b/tests/js/sentry-test/fixtures/incidentSuspectCommit.js
index b38dc34dcb..e69de29bb2 100644
--- a/tests/js/sentry-test/fixtures/incidentSuspectCommit.js
+++ b/tests/js/sentry-test/fixtures/incidentSuspectCommit.js
@@ -1,18 +0,0 @@
-import {Repository} from './repository';
-import {User} from './user';
-
-export function IncidentSuspectCommit(params = []) {
-  return {
-    data: {
-      repository: Repository(),
-      author: User(),
-      dateCreated: '2019-03-28T01:36:35.457Z',
-      score: 2,
-      message:
-        'feat: Do something to raven/base.py\nvenenatis curae tincidunt feugiat duis parturient metus',
-      id: 'ec85fa0c622c13a09cd27443132711551f45f504',
-      ...params,
-    },
-    type: 'commit',
-  };
-}
diff --git a/tests/js/spec/views/incidents/details/index.spec.jsx b/tests/js/spec/views/incidents/details/index.spec.jsx
index 60aa608ff7..407906151c 100644
--- a/tests/js/spec/views/incidents/details/index.spec.jsx
+++ b/tests/js/spec/views/incidents/details/index.spec.jsx
@@ -36,18 +36,10 @@ describe('IncidentDetails', function() {
       method: 'POST',
     });
 
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/incidents/123/suspects/',
-      body: [TestStubs.IncidentSuspectCommit()],
-    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/456/',
       statusCode: 404,
     });
-    MockApiClient.addMockResponse({
-      url: '/organizations/org-slug/incidents/456/suspects/',
-      statusCode: 404,
-    });
     MockApiClient.addMockResponse({
       url: '/organizations/org-slug/incidents/456/activity/',
       statusCode: 404,
@@ -89,15 +81,6 @@ describe('IncidentDetails', function() {
         .at(2)
         .text()
     ).toBe('20');
-
-    expect(wrapper.find('SuspectItem')).toHaveLength(1);
-    expect(
-      wrapper
-        .find('SuspectItem')
-        .at(0)
-        .find('MessageOverflow')
-        .text()
-    ).toBe('feat: Do something to raven/base.py');
   });
 
   it('handles invalid incident', async function() {
diff --git a/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py b/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py
deleted file mode 100644
index 9af91869e8..0000000000
--- a/tests/sentry/api/endpoints/test_organization_incident_suspects_index.py
+++ /dev/null
@@ -1,73 +0,0 @@
-from __future__ import absolute_import
-
-from exam import fixture
-
-from sentry.api.serializers import serialize
-from sentry.api.serializers.models.commit import CommitSerializer
-from sentry.incidents.models import IncidentSuspectCommit
-from sentry.models import Commit, Repository
-from sentry.testutils import APITestCase
-
-
-class OrganizationIncidentSuspectsListEndpointTest(APITestCase):
-    endpoint = "sentry-api-0-organization-incident-suspect-index"
-    method = "get"
-
-    @fixture
-    def organization(self):
-        return self.create_organization()
-
-    @fixture
-    def project(self):
-        return self.create_project(organization=self.organization)
-
-    @fixture
-    def user(self):
-        return self.create_user()
-
-    def test_simple(self):
-        self.create_member(
-            user=self.user, organization=self.organization, role="owner", teams=[self.team]
-        )
-        self.login_as(self.user)
-        release = self.create_release(project=self.project, version="v12")
-
-        self.repo = Repository.objects.create(
-            organization_id=self.organization.id, name=self.organization.id
-        )
-        commit_id = "a" * 40
-        release.set_commits(
-            [
-                {
-                    "id": commit_id,
-                    "repository": self.repo.name,
-                    "author_email": "bob@example.com",
-                    "author_name": "Bob",
-                    "message": "i fixed a bug",
-                    "patch_set": [{"path": "src/sentry/models/release.py", "type": "M"}],
-                }
-            ]
-        )
-        incident = self.create_incident(self.organization)
-        commit = Commit.objects.get(releasecommit__release=release)
-        IncidentSuspectCommit.objects.create(incident=incident, commit=commit, order=1)
-
-        with self.feature("organizations:incidents"):
-            resp = self.get_valid_response(self.organization.slug, incident.identifier)
-        assert len(resp.data) == 1
-        suspect = resp.data[0]
-        assert suspect["type"] == "commit"
-        assert suspect["data"] == serialize(commit, self.user, serializer=CommitSerializer())
-
-    def test_access(self):
-        other_user = self.create_user()
-        self.login_as(other_user)
-        other_team = self.create_team()
-        self.create_member(
-            user=self.user, organization=self.organization, role="member", teams=[self.team]
-        )
-        other_project = self.create_project(teams=[other_team])
-        incident = self.create_incident(projects=[other_project])
-        with self.feature("organizations:incidents"):
-            resp = self.get_response(self.organization.slug, incident.identifier)
-            assert resp.status_code == 403
