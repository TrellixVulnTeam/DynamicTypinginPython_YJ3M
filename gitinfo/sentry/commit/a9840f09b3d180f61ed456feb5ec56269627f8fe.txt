commit a9840f09b3d180f61ed456feb5ec56269627f8fe
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 13 21:59:08 2014 -0800

    Various test cleanup and organization

diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
deleted file mode 100644
index 810f7b14a8..0000000000
--- a/src/sentry/testutils.py
+++ /dev/null
@@ -1,344 +0,0 @@
-"""
-sentry.testutils
-~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import
-
-import base64
-import pytest
-import os.path
-
-from exam import Exam, fixture, before  # NOQA
-from functools import wraps
-
-from django.conf import settings
-from django.contrib.auth import login
-from django.core.cache import cache
-from django.core.management import call_command
-from django.core.urlresolvers import reverse
-from django.db import connections, DEFAULT_DB_ALIAS
-from django.http import HttpRequest
-from django.test import TestCase, TransactionTestCase
-from django.test.client import Client
-from django.utils.importlib import import_module
-
-from sentry.constants import MODULE_ROOT
-from sentry.models import (
-    Activity, Project, ProjectOption, Option, Team, Group, Event, User)
-from sentry.utils import json
-from sentry.utils.compat import pickle
-from sentry.utils.strings import decompress
-
-# an example data blog from Sentry 5.4.1 (db level)
-LEGACY_DATA = pickle.loads(decompress("""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"""))
-
-
-def get_auth_header(client, api_key=None, secret_key=None):
-    header = [
-        ('sentry_client', client),
-        ('sentry_version', '5'),
-    ]
-
-    if api_key:
-        header.append(('sentry_key', api_key))
-    if secret_key:
-        header.append(('sentry_secret', secret_key))
-
-    return 'Sentry %s' % ', '.join('%s=%s' % (k, v) for k, v in header)
-
-
-def with_settings(**mapping):
-    def wrapped(func):
-        @wraps(func)
-        def _wrapped(*args, **kwargs):
-            with Settings(**mapping):
-                return func(*args, **kwargs)
-        return _wrapped
-    return wrapped
-
-
-class Settings(object):
-    """
-    Allows you to define settings that are required for this function to work.
-
-    >>> with Settings(SENTRY_LOGIN_URL='foo'): #doctest: +SKIP
-    >>>     print settings.SENTRY_LOGIN_URL #doctest: +SKIP
-    """
-
-    NotDefined = object()
-
-    def __init__(self, **overrides):
-        self.overrides = overrides
-        self._orig = {}
-
-    def __enter__(self):
-        for k, v in self.overrides.iteritems():
-            self._orig[k] = getattr(settings, k, self.NotDefined)
-            setattr(settings, k, v)
-
-    def __exit__(self, exc_type, exc_value, traceback):
-        for k, v in self._orig.iteritems():
-            if v is self.NotDefined:
-                delattr(settings, k)
-            else:
-                setattr(settings, k, v)
-
-
-class BaseTestCase(Exam):
-    urls = 'tests.sentry.web.urls'
-
-    Settings = Settings
-
-    @fixture
-    def projectkey(self):
-        return self.project.key_set.get_or_create(user=self.user)[0]
-
-    @fixture
-    def user(self):
-        return self.create_user('admin@localhost', username='admin')
-
-    @fixture
-    def team(self):
-        return Team.objects.create(
-            name='foo',
-            slug='foo',
-            owner=self.user,
-        )
-
-    @fixture
-    def project(self):
-        return Project.objects.create(
-            owner=self.user,
-            name='Bar',
-            slug='bar',
-            team=self.team,
-        )
-
-    @fixture
-    def group(self):
-        return self.create_group()
-
-    @fixture
-    def event(self):
-        return self.create_event(event_id='a' * 32)
-
-    @fixture
-    def activity(self):
-        return Activity.objects.create(
-            group=self.group, event=self.event, project=self.project,
-            type=Activity.NOTE, user=self.user,
-            data={}
-        )
-
-    def create_user(self, email, **kwargs):
-        kwargs.setdefault('username', email)
-        kwargs.setdefault('is_staff', True)
-        kwargs.setdefault('is_superuser', True)
-
-        user = User(email=email, **kwargs)
-        user.set_password('admin')
-        user.save()
-
-        return user
-
-    def create_event(self, event_id, **kwargs):
-        if 'group' not in kwargs:
-            kwargs['group'] = self.group
-        kwargs.setdefault('project', kwargs['group'].project)
-        kwargs.setdefault('message', 'Foo bar')
-        kwargs.setdefault('data', LEGACY_DATA)
-
-        return Event.objects.create(
-            event_id=event_id,
-            **kwargs
-        )
-
-    def create_group(self, project=None, **kwargs):
-        return Group.objects.create(
-            message='Foo bar',
-            project=project or self.project,
-            **kwargs
-        )
-
-    def assertRequiresAuthentication(self, path, method='GET'):
-        resp = getattr(self.client, method.lower())(path)
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
-
-    def login_as(self, user):
-        user.backend = settings.AUTHENTICATION_BACKENDS[0]
-
-        engine = import_module(settings.SESSION_ENGINE)
-
-        request = HttpRequest()
-        if self.client.session:
-            request.session = self.client.session
-        else:
-            request.session = engine.SessionStore()
-
-        login(request, user)
-
-        # Save the session values.
-        request.session.save()
-
-        # Set the cookie to represent the session.
-        session_cookie = settings.SESSION_COOKIE_NAME
-        self.client.cookies[session_cookie] = request.session.session_key
-        cookie_data = {
-            'max-age': None,
-            'path': '/',
-            'domain': settings.SESSION_COOKIE_DOMAIN,
-            'secure': settings.SESSION_COOKIE_SECURE or None,
-            'expires': None,
-        }
-        self.client.cookies[session_cookie].update(cookie_data)
-
-    def login(self):
-        self.login_as(self.user)
-
-    def load_fixture(self, filepath):
-        filepath = os.path.join(
-            MODULE_ROOT,
-            'tests',
-            'fixtures',
-            filepath,
-        )
-        with open(filepath, 'rb') as fp:
-            return fp.read()
-
-    def _pre_setup(self):
-        cache.clear()
-        ProjectOption.objects.clear_cache()
-        Option.objects.clear_cache()
-        super(BaseTestCase, self)._pre_setup()
-
-    def _makeMessage(self, data):
-        return base64.b64encode(json.dumps(data))
-
-    def _postWithKey(self, data, key=None):
-        resp = self.client.post(reverse('sentry-api-store'), {
-            'data': self._makeMessage(data),
-            'key': settings.SENTRY_KEY,
-        })
-        return resp
-
-    def _postWithHeader(self, data, key=None, secret=None):
-        if key is None:
-            key = self.projectkey.public_key
-            secret = self.projectkey.secret_key
-
-        message = self._makeMessage(data)
-        resp = self.client.post(
-            reverse('sentry-api-store'), message,
-            content_type='application/octet-stream',
-            HTTP_X_SENTRY_AUTH=get_auth_header('_postWithHeader', key, secret),
-        )
-        return resp
-
-    _postWithSignature = _postWithHeader
-    _postWithNewSignature = _postWithHeader
-
-
-class TestCase(BaseTestCase, TestCase):
-    pass
-
-
-class TransactionTestCase(BaseTestCase, TransactionTestCase):
-    """
-    Subclass of ``django.test.TransactionTestCase`` that quickly tears down
-    fixtures and doesn't `flush` on setup.  This enables tests to be run in
-    any order.
-    """
-    urls = 'tests.urls'
-
-    def __call__(self, result=None):
-        """
-        Wrapper around default __call__ method to perform common Django test
-        set up. This means that user-defined Test Cases aren't required to
-        include a call to super().setUp().
-        """
-        self.client = getattr(self, 'client_class', Client)()
-        try:
-            self._pre_setup()
-        except (KeyboardInterrupt, SystemExit):
-            raise
-        except Exception:
-            import sys
-            result.addError(self, sys.exc_info())
-            return
-        try:
-            super(TransactionTestCase, self).__call__(result)
-        finally:
-            try:
-                self._post_teardown()
-            except (KeyboardInterrupt, SystemExit):
-                raise
-            except Exception:
-                import sys
-                result.addError(self, sys.exc_info())
-
-    def _get_databases(self):
-        if getattr(self, 'multi_db', False):
-            return connections
-        return [DEFAULT_DB_ALIAS]
-
-    def _fixture_setup(self):
-        for db in self._get_databases():
-            if hasattr(self, 'fixtures') and self.fixtures:
-                # We have to use this slightly awkward syntax due to the fact
-                # that we're using *args and **kwargs together.
-                call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db})
-
-    def _fixture_teardown(self):
-        for db in self._get_databases():
-            call_command('flush', verbosity=0, interactive=False, database=db)
-
-
-def with_eager_tasks(func):
-    @wraps(func)
-    def wrapped(*args, **kwargs):
-        from celery.app import app_or_default
-
-        app = app_or_default()
-        prev = app.conf.CELERY_ALWAYS_EAGER
-        app.conf.CELERY_ALWAYS_EAGER = True
-
-        try:
-            return func(*args, **kwargs)
-        finally:
-            app.conf.CELERY_ALWAYS_EAGER = prev
-    return wrapped
-
-
-def riak_is_available():
-    import socket
-    try:
-        socket.create_connection(('127.0.0.1', 8098), 1.0)
-    except socket.error:
-        return False
-    else:
-        return True
-
-
-requires_riak = pytest.mark.skipif(
-    lambda x: not riak_is_available(),
-    reason="requires riak server running")
-
-
-def cassandra_is_available():
-    import socket
-    try:
-        socket.create_connection(('127.0.0.1', 9042), 1.0)
-    except socket.error:
-        return False
-    else:
-        return True
-
-
-requires_cassandra = pytest.mark.skipif(
-    lambda x: not cassandra_is_available(),
-    reason="requires cassandra server running")
diff --git a/src/sentry/testutils/__init__.py b/src/sentry/testutils/__init__.py
new file mode 100644
index 0000000000..ddfe7aa596
--- /dev/null
+++ b/src/sentry/testutils/__init__.py
@@ -0,0 +1,11 @@
+"""
+sentry.testutils
+~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from .asserts import *  # NOQA
+from .cases import *  # NOQA
+from .skips import *  # NOQA
diff --git a/src/sentry/testutils/asserts.py b/src/sentry/testutils/asserts.py
new file mode 100644
index 0000000000..9053fd669f
--- /dev/null
+++ b/src/sentry/testutils/asserts.py
@@ -0,0 +1,12 @@
+"""
+sentry.testutils.asserts
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+def assert_date_resembles(one, two):
+    # this is mostly intended to handle discrepencies between mysql/postgres
+    assert one.replace(microsecond=0) == two.replace(microsecond=0)
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
new file mode 100644
index 0000000000..2bffe56193
--- /dev/null
+++ b/src/sentry/testutils/cases.py
@@ -0,0 +1,175 @@
+"""
+sentry.testutils.cases
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+__all__ = ('TestCase', 'TransactionTestCase', 'APITestCase')
+
+import base64
+import os.path
+
+from django.conf import settings
+from django.contrib.auth import login
+from django.core.cache import cache
+from django.core.management import call_command
+from django.core.urlresolvers import reverse
+from django.db import connections, DEFAULT_DB_ALIAS
+from django.http import HttpRequest
+from django.test import TestCase, TransactionTestCase
+from django.test.client import Client
+from django.utils.importlib import import_module
+from exam import Exam
+from rest_framework.test import APITestCase as BaseAPITestCase
+
+from sentry.constants import MODULE_ROOT
+from sentry.models import Option, ProjectOption
+from sentry.utils import json
+
+from .fixtures import Fixtures
+from .helpers import get_auth_header
+
+
+class BaseTestCase(Fixtures, Exam):
+    urls = 'tests.sentry.web.urls'
+
+    def assertRequiresAuthentication(self, path, method='GET'):
+        resp = getattr(self.client, method.lower())(path)
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
+
+    def login_as(self, user):
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+        engine = import_module(settings.SESSION_ENGINE)
+
+        request = HttpRequest()
+        if self.client.session:
+            request.session = self.client.session
+        else:
+            request.session = engine.SessionStore()
+
+        login(request, user)
+
+        # Save the session values.
+        request.session.save()
+
+        # Set the cookie to represent the session.
+        session_cookie = settings.SESSION_COOKIE_NAME
+        self.client.cookies[session_cookie] = request.session.session_key
+        cookie_data = {
+            'max-age': None,
+            'path': '/',
+            'domain': settings.SESSION_COOKIE_DOMAIN,
+            'secure': settings.SESSION_COOKIE_SECURE or None,
+            'expires': None,
+        }
+        self.client.cookies[session_cookie].update(cookie_data)
+
+    def login(self):
+        self.login_as(self.user)
+
+    def load_fixture(self, filepath):
+        filepath = os.path.join(
+            MODULE_ROOT,
+            'tests',
+            'fixtures',
+            filepath,
+        )
+        with open(filepath, 'rb') as fp:
+            return fp.read()
+
+    def _pre_setup(self):
+        cache.clear()
+        ProjectOption.objects.clear_cache()
+        Option.objects.clear_cache()
+        super(BaseTestCase, self)._pre_setup()
+
+    def _makeMessage(self, data):
+        return base64.b64encode(json.dumps(data))
+
+    def _postWithKey(self, data, key=None):
+        resp = self.client.post(reverse('sentry-api-store'), {
+            'data': self._makeMessage(data),
+            'key': settings.SENTRY_KEY,
+        })
+        return resp
+
+    def _postWithHeader(self, data, key=None, secret=None):
+        if key is None:
+            key = self.projectkey.public_key
+            secret = self.projectkey.secret_key
+
+        message = self._makeMessage(data)
+        resp = self.client.post(
+            reverse('sentry-api-store'), message,
+            content_type='application/octet-stream',
+            HTTP_X_SENTRY_AUTH=get_auth_header('_postWithHeader', key, secret),
+        )
+        return resp
+
+    _postWithSignature = _postWithHeader
+    _postWithNewSignature = _postWithHeader
+
+
+class TestCase(BaseTestCase, TestCase):
+    pass
+
+
+class TransactionTestCase(BaseTestCase, TransactionTestCase):
+    """
+    Subclass of ``django.test.TransactionTestCase`` that quickly tears down
+    fixtures and doesn't `flush` on setup.  This enables tests to be run in
+    any order.
+    """
+    urls = 'tests.urls'
+
+    def __call__(self, result=None):
+        """
+        Wrapper around default __call__ method to perform common Django test
+        set up. This means that user-defined Test Cases aren't required to
+        include a call to super().setUp().
+        """
+        self.client = getattr(self, 'client_class', Client)()
+        try:
+            self._pre_setup()
+        except (KeyboardInterrupt, SystemExit):
+            raise
+        except Exception:
+            import sys
+            result.addError(self, sys.exc_info())
+            return
+        try:
+            super(TransactionTestCase, self).__call__(result)
+        finally:
+            try:
+                self._post_teardown()
+            except (KeyboardInterrupt, SystemExit):
+                raise
+            except Exception:
+                import sys
+                result.addError(self, sys.exc_info())
+
+    def _get_databases(self):
+        if getattr(self, 'multi_db', False):
+            return connections
+        return [DEFAULT_DB_ALIAS]
+
+    def _fixture_setup(self):
+        for db in self._get_databases():
+            if hasattr(self, 'fixtures') and self.fixtures:
+                # We have to use this slightly awkward syntax due to the fact
+                # that we're using *args and **kwargs together.
+                call_command('loaddata', *self.fixtures, **{'verbosity': 0, 'database': db})
+
+    def _fixture_teardown(self):
+        for db in self._get_databases():
+            call_command('flush', verbosity=0, interactive=False, database=db)
+
+
+class APITestCase(BaseTestCase, BaseAPITestCase):
+    pass
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
new file mode 100644
index 0000000000..dfc7ed7e65
--- /dev/null
+++ b/src/sentry/testutils/fixtures.py
@@ -0,0 +1,88 @@
+"""
+sentry.testutils.fixtures
+~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from exam import fixture
+from sentry.models import Activity, Event, Group, Project, Team, User
+from sentry.utils.compat import pickle
+from sentry.utils.strings import decompress
+
+
+# an example data blog from Sentry 5.4.1 (db level)
+LEGACY_DATA = pickle.loads(decompress("""eJy9WW1v20YS/q5fwfqLpECluMvXFSzjgKK9BrikByR3XwyDXpFLmjVFsnxxbAT57zczS0rUS+LGrU8IYu3s2+yzM8/MrGZxxSYfpo0q2vrJzIpW1YmMVGO+U00jUzWdVHwyiysbBm13IgdaH++yxoB/0mhV0xp9p5GqQtWyVbHRNVmRGre3tXxQBQ26vYW57qT5MK1kLbcNtLzJLK/8SQOyVqYoCVAicJB6bGsJEmahBoz0fGpMWacPKOU4kKFiy/80qm6WcQSLqnppPmR128lcFQ/NUp9sucmKJSmCM52JhO1AIWy42Lhr26pZLZdqE9luYtuKucyxWCJiJSPXEcIPNrFkbJXYjmUnAVOMKyfijnB47FpuYgXehkcy/oesKjNVbQ9oVG6XDHfxJhJOlJcylg8pCnzSPpj8YpnC9yzf4SzwQRdoB4FtW5YfMN63bVsEjo29sEYHZ8UFBBy8PzFekkUYbsu4yxXCyBmCxjmMGs7NESvbZCazseXQjNOb/xWwwH6XFvBgTlSW95le1SdhgNfT1TlKUA+ED9F7lNsqV3hq6LEtHHWnZAyXg23SyOZ0tQVeoW2TxEHJH52qn8KmrcFosMuFZafYEcsWjcD2aKyPoq1q78oYhQGM+ufPH/Gr+MpxPrQyugdDishwyZQcNKUEoUO9HDIkh3Rx0LKTrojarETIHFRj02V5HG4b1MvxUAG5acJKtnco8P+cAebZZlk9gd4FN/1lk7XqxwoUA5dptGEuN7JRZvWEaxK+Va3CqISDPKKdOgK1dC2CBSzWGH0QIrOr4I+afUYXYzDiwjj6fBublfH5AmbyczNpdo/XCjy8hXuCiWFWJOVMyxc42T5WbPzJs6YNt/IxBFjS9m7dqDwxj4QLVN4hM3+QZDQuWaGLVlh1mzyLwnuFELn+5D3aEQDXhu1ThZfrBoOxmyQfk5hLjBJ1eVVnCKdn7cY2UZ1VMLjuioJ8yWOTPR15fLRRhkbnoRu5Ikg2TNierXzHVVGwUZ7nKm8jg2DDNhzHkV3ffwK+ooXoJJ53QKQeWM/FC6kUEPfIUHJQDl3RQ1fkFnzzNRvcT5+hdh9Ommp69fkkZWjL1weEtDAO+IiaAx3d4Ao2riDwFAMZgV7+wC15gmPQiS412GTkP+UZKGWUm99V1BqyNaxHZjm28BNmXeEEcrI226qwqWAkivR9o4ljC28av+MYc/gy4xazFwZfGMyBP9bC8BaGDRLHF47P5jiRzOBOFnFOVx1Ye9UObeZIOztRG19rF5B51KrpctQsoPgY2JMUuPbi8+5yV8YL73VhDOFxZVzffAE4Aw0nUCbu5E7Sv2g2gXcQgwO6drzNIKCNdtQYoEVd9guW9YAJkFfdU4AeOkIpsVxCSVgj8hZE/QKDUV6mKUEvbDyDhp5iMSgm4KApBB7EEcMLYHgmtABAfQSAfmR/xEi4OPW1bkAAYilyxsV50sAhOoshWPB4weStxUZBGWViRzroB5TaEExJBvwHQJKEDYNGEYFZFDarEuhyHxMAcMoiLIxax3z7ZUEj3GNO/jInuYfy6Zjts+SZEGFkBYWa1QUu4B8vDPOJ07MiyrtYUYBsVrRZQJSeFSFkRyQQAA6dvD9MmGcFnZ5ZZ44yfHR2cBJETsR0QkZuiusWJbX55C1Hq5SUTIK/UnCPZNV2td4bre814jljaJw6gjPmHYdwAK4o2x68JgRL2OQqns0JO3aCc61AYcpjIX2UR2vh/RhrvdYub5ntw+SCRtD/8H1PsWQswOOySXXIZZBRpt+KqIzvgwfjL4sejJ8NH4xy0/S74wYmzOCmGLFTChip15/F+8ucySD1hfV2IZZhEgzbBLiN5jcGuXB6jtYYpsIv5DVms9ckNob5+DPMxiBPh6PuGC09w2OYxKdf4S7bpT7NVfaJ+WsfVkU8e/MGjZO81/ZP+EnbvTHDMdf7hOxGm/T1NLpT0X3Tbac3c1J6cA7cu+eb9Dy/UKG5MIi6wSkg8VvjfwvjzRudvmmVBC0ANOJAjqppBOqJAxoZuYfDXotNHL5nE8cenefi4oL6nTG8P9UKDAIspTAIMyOpyy0YRm8yt7cmzXFP8L66ujIi8jjz8HSz6bunfq3fOzC+O2B1sLv4hykB73jj7Qed/BG1QH1D7vjiNwTm4F18Pz+4aAM9J0CRhOyFfjWU5eAUf56+wJeoFAdnHKiLHMrlmoM+TN+XOqa5SHJAEXorSn9g0ogiFucCL5XhUJV9F2GcXendjjb+fgqB5lBU7c50xCAaFeQHgeHkY91pVNxDPoUarznPLa7/dW6BCLXnFleMuSVWidEb7s+PkaqwpJ8h2SzA4SMqXtd4RSM3p4gLZHhqvx573qewNWxETuXxr1HQMakRB/bKzs5H3MVwQ+v+70hvRNizB3pyvSHLgRJU09NWZpQxeO7fSkr9TS/1TfdX4nl7eiIvH85KdeoaPQDsynz7/pffKOvwgoNogCS8RiPRnWLcSdRcom0RP9M72sFtEZOvP1PHySPI4K/Vpxif6KpPXRbPyga/K/w6n19bN/iQwaAY3rOVjxQLNt+/u/mYbF+CEiQyf6Pr/jd1Q4IM6heRGnGPxS3NPT49fNZlSZm7j2HwcsDiX8QKJ8QVSE/0k+ndq6/nIzCa/hmE+fQC0D8xMF+jHlA432UfASHxym+ctBGnPD9uyNYCe/J/eFgN6JVFxylqf3dQwGp4yOCgFD6fwWFl/NIMLhCvmsEJ6/kMTuhKFF2H3o5Rm8v/yrzb1+5oq9HGwiBBVfvK0OSoH8J068sVLWYfJYEnL2hMHKeDZ5lCjBND4Y2oQhevYlf7zCkDE4f1DtRNfX4CXtcqM87iMJFZ3ldOQowJAEIUWMFU1XVZ/4CYgF9+i5iJMPaJgaaJvj2bL2gBNjAuPgkh4XIo0zXhXuqi/4qe5u3vIN3xDxXccnZUyi1cNttWZQ2l4hM9xusinmJPdZ+GtWrKroaIb/TDUN2Qlg2rMiP/4NY+sQb8whCfHcLQWK+NaRhimAjD6YpOt6Nl/NFFPWbtjOaPakRO2XQYYqHZAvfBVPzhATOd/vzGvhc6jRl9/zEr5mhInNGjRhji80c/9wU/53Dm6GX64NSv5NKDYY8UFt17nVB4oouvF6nVH10GSPar7Arg9Xr/ywmjV8Rz6HJ6Txx+QDi5gN07mXK4p4h+OGd6Y30RJOGEan8ZKLD1kLiMeoEDh+td8GCgu3O7A4S4t3c0zoeYPKeu4FtecHyA2REYmP6VRVPC/fUejiK973yGeQnnu7IJvsimMf8Hr5plBQ=="""))
+
+
+class Fixtures(object):
+    @fixture
+    def projectkey(self):
+        return self.project.key_set.get_or_create(user=self.user)[0]
+
+    @fixture
+    def user(self):
+        return self.create_user('admin@localhost', username='admin')
+
+    @fixture
+    def team(self):
+        return Team.objects.create(
+            name='foo',
+            slug='foo',
+            owner=self.user,
+        )
+
+    @fixture
+    def project(self):
+        return Project.objects.create(
+            owner=self.user,
+            name='Bar',
+            slug='bar',
+            team=self.team,
+        )
+
+    @fixture
+    def group(self):
+        return self.create_group()
+
+    @fixture
+    def event(self):
+        return self.create_event(event_id='a' * 32)
+
+    @fixture
+    def activity(self):
+        return Activity.objects.create(
+            group=self.group, event=self.event, project=self.project,
+            type=Activity.NOTE, user=self.user,
+            data={}
+        )
+
+    def create_user(self, email, **kwargs):
+        kwargs.setdefault('username', email)
+        kwargs.setdefault('is_staff', True)
+        kwargs.setdefault('is_superuser', True)
+
+        user = User(email=email, **kwargs)
+        user.set_password('admin')
+        user.save()
+
+        return user
+
+    def create_event(self, event_id, **kwargs):
+        if 'group' not in kwargs:
+            kwargs['group'] = self.group
+        kwargs.setdefault('project', kwargs['group'].project)
+        kwargs.setdefault('message', 'Foo bar')
+        kwargs.setdefault('data', LEGACY_DATA)
+
+        return Event.objects.create(
+            event_id=event_id,
+            **kwargs
+        )
+
+    def create_group(self, project=None, **kwargs):
+        return Group.objects.create(
+            message='Foo bar',
+            project=project or self.project,
+            **kwargs
+        )
diff --git a/src/sentry/testutils/helpers.py b/src/sentry/testutils/helpers.py
new file mode 100644
index 0000000000..6a8645f91a
--- /dev/null
+++ b/src/sentry/testutils/helpers.py
@@ -0,0 +1,21 @@
+"""
+sentry.testutils.helpers
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+def get_auth_header(client, api_key=None, secret_key=None):
+    header = [
+        ('sentry_client', client),
+        ('sentry_version', '5'),
+    ]
+
+    if api_key:
+        header.append(('sentry_key', api_key))
+    if secret_key:
+        header.append(('sentry_secret', secret_key))
+
+    return 'Sentry %s' % ', '.join('%s=%s' % (k, v) for k, v in header)
diff --git a/src/sentry/testutils/skips.py b/src/sentry/testutils/skips.py
new file mode 100644
index 0000000000..4f7befc4f8
--- /dev/null
+++ b/src/sentry/testutils/skips.py
@@ -0,0 +1,39 @@
+"""
+sentry.testutils.skips
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import pytest
+
+
+def riak_is_available():
+    import socket
+    try:
+        socket.create_connection(('127.0.0.1', 8098), 1.0)
+    except socket.error:
+        return False
+    else:
+        return True
+
+
+requires_riak = pytest.mark.skipif(
+    lambda x: not riak_is_available(),
+    reason="requires riak server running")
+
+
+def cassandra_is_available():
+    import socket
+    try:
+        socket.create_connection(('127.0.0.1', 9042), 1.0)
+    except socket.error:
+        return False
+    else:
+        return True
+
+
+requires_cassandra = pytest.mark.skipif(
+    lambda x: not cassandra_is_available(),
+    reason="requires cassandra server running")
diff --git a/tests/integration/tests.py b/tests/integration/tests.py
index eb49381a96..1ee357edf7 100644
--- a/tests/integration/tests.py
+++ b/tests/integration/tests.py
@@ -216,7 +216,7 @@ class DepdendencyTest(TestCase):
 
         import_string.side_effect = self.raise_import_error(package)
 
-        with self.Settings(**{key: setting_value}):
+        with self.settings(**{key: setting_value}):
             with self.assertRaises(ConfigurationError):
                 validate_settings(django_settings)
 
diff --git a/tests/sentry/api/endpoints/test_group_details.py b/tests/sentry/api/endpoints/test_group_details.py
index baff7b6de0..a77fc2f8ea 100644
--- a/tests/sentry/api/endpoints/test_group_details.py
+++ b/tests/sentry/api/endpoints/test_group_details.py
@@ -1,11 +1,10 @@
 from django.core.urlresolvers import reverse
-from rest_framework.test import APITestCase
 from sentry.constants import STATUS_RESOLVED
 from sentry.models import Group
-from sentry.testutils import BaseTestCase
+from sentry.testutils import APITestCase
 
 
-class GroupDetailsTest(BaseTestCase, APITestCase):
+class GroupDetailsTest(APITestCase):
     def test_simple(self):
         self.client.force_authenticate(user=self.user)
 
@@ -32,7 +31,7 @@ class GroupDetailsTest(BaseTestCase, APITestCase):
         }
 
 
-class GroupUpdateTest(BaseTestCase, APITestCase):
+class GroupUpdateTest(APITestCase):
     def test_simple(self):
         self.client.force_authenticate(user=self.user)
 
diff --git a/tests/sentry/api/endpoints/test_group_index.py b/tests/sentry/api/endpoints/test_group_index.py
index c8b75adf6f..ba4c179442 100644
--- a/tests/sentry/api/endpoints/test_group_index.py
+++ b/tests/sentry/api/endpoints/test_group_index.py
@@ -1,9 +1,8 @@
 from django.core.urlresolvers import reverse
-from rest_framework.test import APITestCase
-from sentry.testutils import BaseTestCase
+from sentry.testutils import APITestCase
 
 
-class GroupIndexTest(BaseTestCase, APITestCase):
+class GroupIndexTest(APITestCase):
     def test_simple(self):
         self.create_group(checksum='a' * 32)
         self.create_group(checksum='b' * 32)
diff --git a/tests/sentry/interfaces/exception/tests.py b/tests/sentry/interfaces/exception/tests.py
index 8511f53638..b6ba489652 100644
--- a/tests/sentry/interfaces/exception/tests.py
+++ b/tests/sentry/interfaces/exception/tests.py
@@ -2,7 +2,9 @@
 
 from __future__ import absolute_import
 
-from sentry.testutils import TestCase, fixture
+from exam import fixture
+
+from sentry.testutils import TestCase
 from sentry.interfaces import unserialize
 
 
diff --git a/tests/sentry/interfaces/message/tests.py b/tests/sentry/interfaces/message/tests.py
index 95600562de..c2db327ba2 100644
--- a/tests/sentry/interfaces/message/tests.py
+++ b/tests/sentry/interfaces/message/tests.py
@@ -2,7 +2,9 @@
 
 from __future__ import absolute_import
 
-from sentry.testutils import TestCase, fixture
+from exam import fixture
+
+from sentry.testutils import TestCase
 from sentry.interfaces import Message
 
 
diff --git a/tests/sentry/interfaces/query/tests.py b/tests/sentry/interfaces/query/tests.py
index 5a563c670f..042eeb9d8b 100644
--- a/tests/sentry/interfaces/query/tests.py
+++ b/tests/sentry/interfaces/query/tests.py
@@ -2,7 +2,9 @@
 
 from __future__ import absolute_import
 
-from sentry.testutils import TestCase, fixture
+from exam import fixture
+
+from sentry.testutils import TestCase
 from sentry.interfaces import Query
 
 
diff --git a/tests/sentry/interfaces/stacktrace/tests.py b/tests/sentry/interfaces/stacktrace/tests.py
index 9c73f4e728..85f5242d0a 100644
--- a/tests/sentry/interfaces/stacktrace/tests.py
+++ b/tests/sentry/interfaces/stacktrace/tests.py
@@ -4,9 +4,11 @@ from __future__ import absolute_import
 
 import mock
 
+from exam import fixture
+
 from sentry.interfaces import Stacktrace, Exception
 from sentry.models import Event
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 
 class StacktraceTest(TestCase):
diff --git a/tests/sentry/interfaces/tests.py b/tests/sentry/interfaces/tests.py
index 88746ba6e0..edd75a8877 100644
--- a/tests/sentry/interfaces/tests.py
+++ b/tests/sentry/interfaces/tests.py
@@ -5,9 +5,11 @@ from __future__ import absolute_import
 import mock
 import pickle
 
+from exam import fixture
+
 from sentry.interfaces import Interface, get_context
 from sentry.models import Event
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 
 class InterfaceBase(TestCase):
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 911ff39678..3a8bd3fcae 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -54,7 +54,7 @@ class SentryManagerTest(TestCase):
 
     def test_valid_timestamp_without_tz(self):
         # TODO: this doesnt error, but it will throw a warning. What should we do?
-        with self.Settings(USE_TZ=True):
+        with self.settings(USE_TZ=True):
             date = datetime.datetime.utcnow()
             event = Group.objects.from_kwargs(1, message='foo', timestamp=date)
             self.assertEquals(event.message, 'foo')
diff --git a/tests/sentry/models/tests.py b/tests/sentry/models/tests.py
index eba89b6595..dc22bce886 100644
--- a/tests/sentry/models/tests.py
+++ b/tests/sentry/models/tests.py
@@ -2,21 +2,23 @@
 
 from __future__ import absolute_import
 
-
 import mock
+
 from datetime import timedelta
 from django.conf import settings
 from django.core import mail
 from django.core.urlresolvers import reverse
 from django.db import connection
 from django.utils import timezone
+from exam import fixture
+
 from sentry.constants import MINUTE_NORMALIZATION
 from sentry.db.models.fields.node import NodeData
 from sentry.models import (
     Project, ProjectKey, Group, Event, Team,
     GroupTagValue, GroupCountByMinute, TagValue, PendingTeamMember,
     LostPasswordHash, Alert, User, create_default_project)
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 from sentry.utils.compat import pickle
 from sentry.utils.strings import compress
 
@@ -48,27 +50,27 @@ class ProjectTest(TestCase):
 class ProjectKeyTest(TestCase):
     def test_get_dsn(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.assertEquals(key.get_dsn(), 'http://public:secret@example.com/1')
 
     def test_get_dsn_with_ssl(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.Settings(SENTRY_URL_PREFIX='https://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='https://example.com'):
             self.assertEquals(key.get_dsn(), 'https://public:secret@example.com/1')
 
     def test_get_dsn_with_port(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com:81'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com:81'):
             self.assertEquals(key.get_dsn(), 'http://public:secret@example.com:81/1')
 
     def test_get_dsn_with_public_endpoint_setting(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.Settings(SENTRY_PUBLIC_ENDPOINT='http://public_endpoint.com'):
+        with self.settings(SENTRY_PUBLIC_ENDPOINT='http://public_endpoint.com'):
             self.assertEquals(key.get_dsn(public=True), 'http://public@public_endpoint.com/1')
 
     def test_get_dsn_with_endpoint_setting(self):
         key = ProjectKey(project_id=1, public_key='public', secret_key='secret')
-        with self.Settings(SENTRY_ENDPOINT='http://endpoint.com'):
+        with self.settings(SENTRY_ENDPOINT='http://endpoint.com'):
             self.assertEquals(key.get_dsn(), 'http://public:secret@endpoint.com/1')
 
     def test_key_is_created_for_project_with_existing_team(self):
@@ -86,18 +88,18 @@ class ProjectKeyTest(TestCase):
 class PendingTeamMemberTest(TestCase):
     def test_token_generation(self):
         member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.Settings(SECRET_KEY='a'):
+        with self.settings(SECRET_KEY='a'):
             self.assertEquals(member.token, 'f3f2aa3e57f4b936dfd4f42c38db003e')
 
     def test_token_generation_unicode_key(self):
         member = PendingTeamMember(id=1, team_id=1, email='foo@example.com')
-        with self.Settings(SECRET_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
+        with self.settings(SECRET_KEY="\xfc]C\x8a\xd2\x93\x04\x00\x81\xeak\x94\x02H\x1d\xcc&P'q\x12\xa2\xc0\xf2v\x7f\xbb*lX"):
             self.assertEquals(member.token, 'df41d9dfd4ba25d745321e654e15b5d0')
 
     def test_send_invite_email(self):
         team = Team(name='test', slug='test', id=1)
         member = PendingTeamMember(id=1, team=team, email='foo@example.com')
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             member.send_invite_email()
 
             self.assertEquals(len(mail.outbox), 1)
@@ -115,7 +117,7 @@ class LostPasswordTest(TestCase):
         )
 
     def test_send_recover_mail(self):
-        with self.Settings(SENTRY_URL_PREFIX='http://testserver'):
+        with self.settings(SENTRY_URL_PREFIX='http://testserver'):
             self.password_hash.send_recover_mail()
             assert len(mail.outbox) == 1
             msg = mail.outbox[0]
diff --git a/tests/sentry/permissions/tests.py b/tests/sentry/permissions/tests.py
index 6bef5113fb..77839e0b1f 100644
--- a/tests/sentry/permissions/tests.py
+++ b/tests/sentry/permissions/tests.py
@@ -18,12 +18,12 @@ class CanCreateProjectTest(TestCase):
         self.assertFalse(can_create_projects(user))
 
     def test_allow_creation_is_true(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=True):
             user = User(id=100000)
             self.assertTrue(can_create_projects(user))
 
     def test_dont_allow_creation_is_false(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=False):
             user = User(id=100000)
             self.assertFalse(can_create_projects(user))
 
@@ -38,11 +38,11 @@ class CanSetProjectPublicTest(TestCase):
         self.assertFalse(can_set_public_projects(user))
 
     def test_allow_creation_is_true(self):
-        with self.Settings(SENTRY_ALLOW_PUBLIC_PROJECTS=True):
+        with self.settings(SENTRY_ALLOW_PUBLIC_PROJECTS=True):
             user = User(id=100000)
             self.assertTrue(can_set_public_projects(user))
 
     def test_dont_allow_creation_is_false(self):
-        with self.Settings(SENTRY_ALLOW_PUBLIC_PROJECTS=False):
+        with self.settings(SENTRY_ALLOW_PUBLIC_PROJECTS=False):
             user = User(id=100000)
             self.assertFalse(can_set_public_projects(user))
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index cd2d8a0c1e..aa700bbe2f 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -3,12 +3,15 @@
 from __future__ import absolute_import
 
 import mock
-from mock import Mock
+
 from django.utils import timezone
+from exam import fixture
+from mock import Mock
+
 from sentry.interfaces import Stacktrace
 from sentry.models import Alert, Event, Group, AccessGroup
 from sentry.plugins.sentry_mail.models import MailPlugin
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 
 class MailPluginTest(TestCase):
@@ -42,7 +45,7 @@ class MailPluginTest(TestCase):
         event.site = None
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
@@ -69,7 +72,7 @@ class MailPluginTest(TestCase):
         event.site = None
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
@@ -96,7 +99,7 @@ class MailPluginTest(TestCase):
         event.site = None
         event.interfaces = {'sentry.interfaces.Stacktrace': stacktrace}
 
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.plugin.notify_users(group, event)
 
         stacktrace.get_title.assert_called_once_with()
@@ -119,7 +122,7 @@ class MailPluginTest(TestCase):
             datetime=group.last_seen,
         )
 
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.plugin.notify_users(group, event)
 
         _send_mail.assert_called_once()
@@ -146,7 +149,7 @@ class MailPluginTest(TestCase):
             datetime=group.last_seen,
         )
 
-        with self.Settings(SENTRY_URL_PREFIX='http://example.com'):
+        with self.settings(SENTRY_URL_PREFIX='http://example.com'):
             self.plugin.notify_users(group, event)
 
         _send_mail.assert_called_once()
diff --git a/tests/sentry/search/django/tests.py b/tests/sentry/search/django/tests.py
index acabeabdf7..7f3eb61042 100644
--- a/tests/sentry/search/django/tests.py
+++ b/tests/sentry/search/django/tests.py
@@ -5,12 +5,7 @@ from __future__ import absolute_import
 from exam import fixture
 
 from sentry.search.django.backend import DjangoSearchBackend
-from sentry.testutils import TestCase
-
-
-def norm_date(dt):
-    # mysql isnt playing nice
-    return dt.replace(microsecond=0)
+from sentry.testutils import TestCase, assert_date_resembles
 
 
 class SearchIndexTest(TestCase):
@@ -25,15 +20,15 @@ class SearchIndexTest(TestCase):
         assert doc.project == event.project
         assert doc.group == event.group
         assert doc.total_events == 1
-        assert norm_date(doc.date_added) == norm_date(event.group.first_seen)
-        assert norm_date(doc.date_changed) == norm_date(event.group.last_seen)
+        assert_date_resembles(doc.date_added, event.group.first_seen)
+        assert_date_resembles(doc.date_changed, event.group.last_seen)
 
         doc = self.backend.index(event.group, event)
         assert doc.project == event.project
         assert doc.group == event.group
         assert doc.total_events == 2
-        assert norm_date(doc.date_added) == norm_date(event.group.first_seen)
-        assert norm_date(doc.date_changed) == norm_date(event.group.last_seen)
+        assert_date_resembles(doc.date_added, event.group.first_seen)
+        assert_date_resembles(doc.date_changed, event.group.last_seen)
 
     def test_search(self):
         event = self.event
diff --git a/tests/sentry/udp/tests.py b/tests/sentry/udp/tests.py
index 48011fcd62..1fdd686af9 100644
--- a/tests/sentry/udp/tests.py
+++ b/tests/sentry/udp/tests.py
@@ -4,7 +4,8 @@ from __future__ import absolute_import
 
 from sentry.models import Project, User
 from sentry.services.udp import SentryUDPServer
-from sentry.testutils import TestCase, get_auth_header
+from sentry.testutils import TestCase
+from sentry.testutils.helpers import get_auth_header
 
 
 class SentryUDPTest(TestCase):
diff --git a/tests/sentry/utils/db/tests.py b/tests/sentry/utils/db/tests.py
index 5989f739be..e06a680b5a 100644
--- a/tests/sentry/utils/db/tests.py
+++ b/tests/sentry/utils/db/tests.py
@@ -8,9 +8,9 @@ from sentry.testutils import TestCase
 
 class GetDbEngineTest(TestCase):
     def test_with_dotted_path(self):
-        with self.Settings(DATABASES={'default': {'ENGINE': 'blah.sqlite3'}}):
+        with self.settings(DATABASES={'default': {'ENGINE': 'blah.sqlite3'}}):
             self.assertEquals(get_db_engine(), 'sqlite3')
 
     def test_no_path(self):
-        with self.Settings(DATABASES={'default': {'ENGINE': 'mysql'}}):
+        with self.settings(DATABASES={'default': {'ENGINE': 'mysql'}}):
             self.assertEquals(get_db_engine(), 'mysql')
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 270bdbec09..728871f242 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -5,11 +5,12 @@ from __future__ import absolute_import
 import mock
 
 from django.conf import settings
+from exam import fixture
 
 from sentry.models import Project, ProjectOption
-from sentry.testutils import TestCase, fixture
-from sentry.utils.http import (is_same_domain, is_valid_origin, get_origins,
-    absolute_uri)
+from sentry.testutils import TestCase
+from sentry.utils.http import (
+    is_same_domain, is_valid_origin, get_origins, absolute_uri)
 
 
 class AbsoluteUriTest(TestCase):
@@ -46,7 +47,7 @@ class GetOriginsTestCase(TestCase):
         project = Project.objects.get()
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
-        with self.Settings(SENTRY_ALLOW_ORIGIN=None):
+        with self.settings(SENTRY_ALLOW_ORIGIN=None):
             result = get_origins(project)
             self.assertEquals(result, frozenset(['http://foo.example']))
 
@@ -55,22 +56,22 @@ class GetOriginsTestCase(TestCase):
         project = Project.objects.get()
         ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
 
-        with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
+        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
             result = get_origins(project)
             self.assertEquals(result, frozenset(['http://foo.example', 'http://example.com']))
 
     def test_setting_empty(self):
-        with self.Settings(SENTRY_ALLOW_ORIGIN=None):
+        with self.settings(SENTRY_ALLOW_ORIGIN=None):
             result = get_origins(None)
             self.assertEquals(result, frozenset([]))
 
     def test_setting_all(self):
-        with self.Settings(SENTRY_ALLOW_ORIGIN='*'):
+        with self.settings(SENTRY_ALLOW_ORIGIN='*'):
             result = get_origins(None)
             self.assertEquals(result, frozenset(['*']))
 
     def test_setting_uri(self):
-        with self.Settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
+        with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
             result = get_origins(None)
             self.assertEquals(result, frozenset(['http://example.com']))
 
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index a7bc6a0374..425c748316 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -3,9 +3,12 @@
 from __future__ import absolute_import
 
 import mock
+
 from django.core.urlresolvers import reverse
+from exam import before, fixture
+
 from sentry.models import Team, Project, TeamMember, AccessGroup, User
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 from sentry.utils import json
 
 
diff --git a/tests/sentry/web/forms/fields/tests.py b/tests/sentry/web/forms/fields/tests.py
index c0aec76ef2..db535e4534 100644
--- a/tests/sentry/web/forms/fields/tests.py
+++ b/tests/sentry/web/forms/fields/tests.py
@@ -1,6 +1,8 @@
 from django import forms
+from exam import fixture
+
 from sentry.web.forms.fields import OriginsField
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 
 class OriginsFieldTest(TestCase):
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index 37717df98e..2dc00257d0 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -6,10 +6,12 @@ import mock
 
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
+from exam import before, fixture
+from social_auth.models import UserSocialAuth
+
 from sentry.models import UserOption, LostPasswordHash, User
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 from sentry.web.frontend.accounts import login_redirect
-from social_auth.models import UserSocialAuth
 
 
 class LoginTest(TestCase):
@@ -52,18 +54,18 @@ class RegisterTest(TestCase):
         return reverse('sentry-register')
 
     def test_redirects_if_registration_disabled(self):
-        with self.Settings(SENTRY_ALLOW_REGISTRATION=False):
+        with self.settings(SENTRY_ALLOW_REGISTRATION=False):
             resp = self.client.get(self.path)
             assert resp.status_code == 302
 
     def test_renders_correct_template(self):
-        with self.Settings(SENTRY_ALLOW_REGISTRATION=True):
+        with self.settings(SENTRY_ALLOW_REGISTRATION=True):
             resp = self.client.get(self.path)
             assert resp.status_code == 200
             self.assertTemplateUsed('sentry/register.html')
 
     def test_with_required_params(self):
-        with self.Settings(SENTRY_ALLOW_REGISTRATION=True):
+        with self.settings(SENTRY_ALLOW_REGISTRATION=True):
             resp = self.client.post(self.path, {
                 'username': 'test-a-really-long-email-address@example.com',
                 'password': 'foobar',
diff --git a/tests/sentry/web/frontend/generic/tests.py b/tests/sentry/web/frontend/generic/tests.py
index e356dbed2e..2f2f4edd60 100644
--- a/tests/sentry/web/frontend/generic/tests.py
+++ b/tests/sentry/web/frontend/generic/tests.py
@@ -1,9 +1,10 @@
 import mock
 
 from django.core.urlresolvers import reverse
+from exam import before, fixture
 
 from sentry.models import Team
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 from sentry.plugins.helpers import set_option
 
 
diff --git a/tests/sentry/web/frontend/groups/tests.py b/tests/sentry/web/frontend/groups/tests.py
index 3c9e65829d..ea8ceed87b 100644
--- a/tests/sentry/web/frontend/groups/tests.py
+++ b/tests/sentry/web/frontend/groups/tests.py
@@ -7,11 +7,11 @@ import json
 from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.utils import timezone
-from exam import before
+from exam import before, fixture
 
 from sentry.models import GroupSeen, Group
 from sentry.constants import MAX_JSON_RESULTS
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 
 class GroupDetailsTest(TestCase):
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 08640d299a..54bb07262c 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -6,10 +6,11 @@ import mock
 import logging
 
 from django.core.urlresolvers import reverse
+from exam import before, fixture
 
 from sentry.constants import STATUS_HIDDEN
 from sentry.models import Project, ProjectKey, ProjectOption, TagKey
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 
 logger = logging.getLogger(__name__)
 
diff --git a/tests/sentry/web/frontend/teams/tests.py b/tests/sentry/web/frontend/teams/tests.py
index 7ac07f3ec7..3cec3bd6da 100644
--- a/tests/sentry/web/frontend/teams/tests.py
+++ b/tests/sentry/web/frontend/teams/tests.py
@@ -5,11 +5,12 @@ from __future__ import absolute_import
 import mock
 
 from django.core.urlresolvers import reverse
+from exam import before, fixture
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
 from sentry.models import (
     Team, TeamMember, PendingTeamMember, AccessGroup, Project, User)
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 
 
 class BaseTeamTest(TestCase):
diff --git a/tests/sentry/web/frontend/tests.py b/tests/sentry/web/frontend/tests.py
index 9b8c26f679..7d9f339252 100644
--- a/tests/sentry/web/frontend/tests.py
+++ b/tests/sentry/web/frontend/tests.py
@@ -3,10 +3,11 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from exam import before, fixture
 
 from sentry.constants import MEMBER_USER
 from sentry.models import Group, Project, TeamMember, Team, User
-from sentry.testutils import TestCase, fixture, before
+from sentry.testutils import TestCase
 
 
 class EnvStatusTest(TestCase):
@@ -188,23 +189,23 @@ class NewTeamProjectTest(PermissionBase):
         return reverse('sentry-new-project', args=[self.team.slug])
 
     def test_admin_can_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
             self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_user_cannot_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
             self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_anonymous_cannot_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=False, SENTRY_ALLOW_TEAM_CREATION=False):
             self._assertPerm(self.path, self.template, None, False)
 
     def test_public_creation_admin_can_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
             self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_public_anonymous_cannot_load(self):
-        with self.Settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
+        with self.settings(SENTRY_ALLOW_PROJECT_CREATION=True, SENTRY_ALLOW_TEAM_CREATION=True):
             self._assertPerm(self.path, self.template, None, False)
 
 
@@ -239,43 +240,43 @@ class RemoveProjectTest(PermissionBase):
         return reverse('sentry-remove-project', kwargs={'team_slug': self.team.slug, 'project_id': self.project.id})
 
     def test_admin_cannot_remove_default(self):
-        with self.Settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=1):
             self._assertPerm(self.path, self.template, self.admin.username, False)
 
     def test_owner_cannot_remove_default(self):
-        with self.Settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=1):
             self._assertPerm(self.path, self.template, self.owner.username, False)
 
     def test_anonymous_cannot_remove_default(self):
-        with self.Settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=1):
             self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_remove_default(self):
-        with self.Settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=1):
             self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_remove_default(self):
-        with self.Settings(SENTRY_PROJECT=1):
+        with self.settings(SENTRY_PROJECT=1):
             self._assertPerm(self.path, self.template, self.member.username, False)
 
     def test_admin_can_load(self):
-        with self.Settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=2):
             self._assertPerm(self.path, self.template, self.admin.username)
 
     def test_owner_can_load(self):
-        with self.Settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=2):
             self._assertPerm(self.path, self.template, self.owner.username)
 
     def test_anonymous_cannot_load(self):
-        with self.Settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=2):
             self._assertPerm(self.path, self.template, None, False)
 
     def test_user_cannot_load(self):
-        with self.Settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=2):
             self._assertPerm(self.path, self.template, self.nobody.username, False)
 
     def test_member_cannot_load(self):
-        with self.Settings(SENTRY_PROJECT=2):
+        with self.settings(SENTRY_PROJECT=2):
             self._assertPerm(self.path, self.template, self.member.username, False)
 
 
diff --git a/tests/sentry/web/frontend/users/tests.py b/tests/sentry/web/frontend/users/tests.py
index f997834e6a..8d4cce25fa 100644
--- a/tests/sentry/web/frontend/users/tests.py
+++ b/tests/sentry/web/frontend/users/tests.py
@@ -5,9 +5,10 @@ from __future__ import absolute_import
 import logging
 
 from django.core.urlresolvers import reverse
+from exam import fixture
 
 from sentry.models import TagValue
-from sentry.testutils import TestCase, fixture
+from sentry.testutils import TestCase
 
 logger = logging.getLogger(__name__)
 
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index 15eb977ec1..689c16e2f7 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -12,23 +12,23 @@ from sentry.testutils import TestCase
 
 class GetLoginUrlTest(TestCase):
     def test_as_path(self):
-        with self.Settings(LOGIN_URL='/really-a-404'):
+        with self.settings(LOGIN_URL='/really-a-404'):
             url = get_login_url(True)
             self.assertEquals(url, reverse('sentry-login'))
 
     def test_as_lazy_url(self):
-        with self.Settings(LOGIN_URL=reverse('sentry-fake-login')):
+        with self.settings(LOGIN_URL=reverse('sentry-fake-login')):
             url = get_login_url(True)
             self.assertEquals(url, reverse('sentry-fake-login'))
 
     def test_cached(self):
         # should still be cached
-        with self.Settings(LOGIN_URL='/really-a-404'):
+        with self.settings(LOGIN_URL='/really-a-404'):
             url = get_login_url(False)
             self.assertNotEquals(url, '/really-a-404')
 
     def test_no_value(self):
-        with self.Settings(SENTRY_LOGIN_URL=None):
+        with self.settings(SENTRY_LOGIN_URL=None):
             url = get_login_url(True)
             self.assertEquals(url, reverse('sentry-login'))
 
@@ -76,7 +76,7 @@ class GroupIsPublicTest(TestCase):
 class GetRavenJsUrl(TestCase):
     def test_with_custom_raven_js_url(self):
         url = 'my.cdn/1.0/raven.min.js'
-        with self.Settings(SENTRY_RAVEN_JS_URL=url):
+        with self.settings(SENTRY_RAVEN_JS_URL=url):
             self.assertEquals(get_raven_js_url(), url)
 
     def test_with_default_raven_js_url(self):
