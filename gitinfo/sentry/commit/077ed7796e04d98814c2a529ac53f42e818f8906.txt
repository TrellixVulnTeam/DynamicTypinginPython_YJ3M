commit 077ed7796e04d98814c2a529ac53f42e818f8906
Author: Eric Feng <erichfeng@gmail.com>
Date:   Tue Feb 23 15:41:41 2016 -0800

    moving onboarding project field to project_id

diff --git a/src/sentry/migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py b/src/sentry/migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
index bef2d4d65e..3c0c39f63e 100644
--- a/src/sentry/migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
+++ b/src/sentry/migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
@@ -13,10 +13,10 @@ class Migration(SchemaMigration):
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('organization', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Organization'])),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'], null=True)),
-            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'], null=True)),
             ('task', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('date_completed', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True, blank=True)),
             ('data', self.gf('jsonfield.fields.JSONField')(default={})),
         ))
         db.send_create_signal('sentry', ['OrganizationOnboardingTask'])
@@ -98,7 +98,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 2, 18, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2016, 3, 1, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -177,7 +177,7 @@ class Migration(SchemaMigration):
             'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
             'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
             'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True'}),
+            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
             'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
@@ -353,7 +353,7 @@ class Migration(SchemaMigration):
             'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
             'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
             'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
@@ -377,6 +377,13 @@ class Migration(SchemaMigration):
             'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
             'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
         },
+        'sentry.projectbookmark': {
+            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
         'sentry.projectkey': {
             'Meta': {'object_name': 'ProjectKey'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
diff --git a/src/sentry/models/organizationonboardingtask.py b/src/sentry/models/organizationonboardingtask.py
index f02d7b7d4a..e68b66205a 100644
--- a/src/sentry/models/organizationonboardingtask.py
+++ b/src/sentry/models/organizationonboardingtask.py
@@ -11,6 +11,7 @@ from django.utils import timezone
 from jsonfield import JSONField
 
 from sentry.db.models import (
+    BoundedBigIntegerField,
     BoundedPositiveIntegerField,
     FlexibleForeignKey,
     Model,
@@ -75,10 +76,10 @@ class OrganizationOnboardingTask(Model):
 
     organization = FlexibleForeignKey('sentry.Organization')
     user = FlexibleForeignKey(settings.AUTH_USER_MODEL, null=True)  # user that completed
-    project = FlexibleForeignKey('sentry.Project', null=True)  # if task is associated with a project
     task = BoundedPositiveIntegerField(choices=TASK_CHOICES)
     status = BoundedPositiveIntegerField(choices=STATUS_CHOICES)
     date_completed = models.DateTimeField(default=timezone.now)
+    project_id = BoundedBigIntegerField(blank=True, null=True)
     data = JSONField()  # INVITE_MEMBER { invited_member: user.id }
 
     class Meta:
diff --git a/src/sentry/receivers/onboarding.py b/src/sentry/receivers/onboarding.py
index 2a2d6f77b7..849154aa58 100644
--- a/src/sentry/receivers/onboarding.py
+++ b/src/sentry/receivers/onboarding.py
@@ -29,7 +29,7 @@ def record_new_project(project, user, **kwargs):
                 task=OnboardingTask.FIRST_PROJECT,
                 user=user,
                 status=OnboardingTaskStatus.COMPLETE,
-                project=project,
+                project_id=project.id,
                 date_completed=timezone.now(),
             )
     except IntegrityError:
@@ -40,7 +40,7 @@ def record_new_project(project, user, **kwargs):
                     task=OnboardingTask.SECOND_PLATFORM,
                     user=user,
                     status=OnboardingTaskStatus.PENDING,
-                    project=project,
+                    project_id=project.id,
                     date_completed=timezone.now(),
                 )
         except IntegrityError:
@@ -55,7 +55,7 @@ def record_raven_installed(project, user, **kwargs):
         status=OnboardingTaskStatus.PENDING,
         defaults={
             'user': user,
-            'project': project,
+            'project_id': project.id,
             'date_completed': timezone.now()
         }
     )
@@ -77,7 +77,7 @@ def record_first_event(project, group, **kwargs):
         status=OnboardingTaskStatus.PENDING,
         values={
             'status': OnboardingTaskStatus.COMPLETE,
-            'project': project,
+            'project_id': project.id,
             'date_completed': project.first_event,
             'data': {'platform': group.platform},
         }
@@ -98,7 +98,7 @@ def record_first_event(project, group, **kwargs):
                 status=OnboardingTaskStatus.PENDING,
                 values={
                     'status': OnboardingTaskStatus.COMPLETE,
-                    'project': project,
+                    'project_id': project.id,
                     'date_completed': project.first_event,
                     'data': {'platform': group.platform},
                 }
@@ -144,7 +144,7 @@ def record_release_received(project, group, event, **kwargs):
                     organization=project.organization,
                     task=OnboardingTask.RELEASE_TRACKING,
                     status=OnboardingTaskStatus.COMPLETE,
-                    project=project,
+                    project_id=project.id,
                     date_completed=timezone.now()
                 )
         except IntegrityError:
@@ -160,7 +160,7 @@ def record_user_context_received(project, group, event, **kwargs):
                     organization=project.organization,
                     task=OnboardingTask.USER_CONTEXT,
                     status=OnboardingTaskStatus.COMPLETE,
-                    project=project,
+                    project_id=project.id,
                     date_completed=timezone.now()
                 )
         except IntegrityError:
@@ -176,7 +176,7 @@ def record_sourcemaps_received(project, group, event, **kwargs):
                     organization=project.organization,
                     task=OnboardingTask.SOURCEMAPS,
                     status=OnboardingTaskStatus.COMPLETE,
-                    project=project,
+                    project_id=project.id,
                     date_completed=timezone.now()
                 )
         except IntegrityError:
@@ -199,7 +199,7 @@ def record_plugin_enabled(plugin, project, user, **kwargs):
                 task=task,
                 status=status,
                 user=user,
-                project=project,
+                project_id=project.id,
                 date_completed=timezone.now(),
                 data={'plugin': plugin.slug}
             )
@@ -216,7 +216,7 @@ def record_issue_tracker_used(plugin, project, user, **kwargs):
         values={
             'status': OnboardingTaskStatus.COMPLETE,
             'user': user,
-            'project': project,
+            'project_id': project.id,
             'date_completed': timezone.now(),
             'data': {'plugin': plugin.slug}
         }
diff --git a/tests/sentry/receivers/test_onboarding.py b/tests/sentry/receivers/test_onboarding.py
index 29fecde846..ad2049878c 100644
--- a/tests/sentry/receivers/test_onboarding.py
+++ b/tests/sentry/receivers/test_onboarding.py
@@ -29,7 +29,7 @@ class OrganizationOnboardingTaskTest(TestCase):
             task=OnboardingTask.FIRST_EVENT
         )
         assert task.status == OnboardingTaskStatus.COMPLETE
-        assert task.project == project
+        assert task.project_id == project.id
         assert task.date_completed == project.first_event
 
     def test_existing_pending_task(self):
@@ -43,7 +43,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
 
         assert task.status == OnboardingTaskStatus.PENDING
-        assert task.project == project
+        assert task.project_id == project.id
 
         first_event_received.send(project=project, group=self.group, sender=type(project))
 
@@ -53,7 +53,7 @@ class OrganizationOnboardingTaskTest(TestCase):
         )
 
         assert task.status == OnboardingTaskStatus.COMPLETE
-        assert task.project == project
+        assert task.project_id == project.id
         assert task.date_completed == project.first_event
 
     def test_existing_complete_task(self):
@@ -68,7 +68,7 @@ class OrganizationOnboardingTaskTest(TestCase):
 
         task = OrganizationOnboardingTask.objects.get(id=task.id)
         assert task.status == OnboardingTaskStatus.COMPLETE
-        assert not task.project
+        assert not task.project_id
 
     # Tests on the receivers
     def test_event_processed(self):
