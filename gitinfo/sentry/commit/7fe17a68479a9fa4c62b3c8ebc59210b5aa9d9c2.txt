commit 7fe17a68479a9fa4c62b3c8ebc59210b5aa9d9c2
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Aug 31 11:21:42 2016 -0700

    Remove all of ReCAPTCHA (#4024)
    
    This isn't needed anymore now that we have rate limiting

diff --git a/setup.py b/setup.py
index b653677b29..5929904113 100755
--- a/setup.py
+++ b/setup.py
@@ -98,7 +98,6 @@ install_requires = [
     'django-debug-toolbar>=1.3.2,<1.4.0',
     'django-jsonfield>=0.9.13,<0.9.14',
     'django-picklefield>=0.3.0,<0.4.0',
-    'django-recaptcha>=1.0.4,<1.1.0',
     'django-sudo>=2.1.0,<3.0.0',
     'django-templatetag-sugar>=0.1.0',
     'djangorestframework>=2.3.8,<2.4.0',
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index ef23cbf025..7d7431e044 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -383,7 +383,6 @@ class AuthHelper(object):
             initial={
                 'username': existing_user.username if existing_user else None,
             },
-            captcha=bool(request.session.get('needs_captcha')),
         )
 
     def _get_display_name(self, identity):
@@ -471,10 +470,8 @@ class AuthHelper(object):
                                   after_2fa=request.build_absolute_uri()):
                     return HttpResponseRedirect(auth.get_login_redirect(
                         self.request))
-                request.session.pop('needs_captcha', None)
             else:
                 auth.log_auth_failure(request, request.POST.get('username'))
-                request.session['needs_captcha'] = 1
         else:
             op = None
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7dbe9b99ef..accd341643 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -244,7 +244,6 @@ INSTALLED_APPS = (
     'django.contrib.sites',
     'django.contrib.staticfiles',
 
-    'captcha',
     'crispy_forms',
     'debug_toolbar',
     'raven.contrib.django.raven_compat',
@@ -617,14 +616,6 @@ REST_FRAMEWORK = {
 
 CRISPY_TEMPLATE_PACK = 'bootstrap3'
 
-# django-recaptcha
-
-RECAPTCHA_PUBLIC_KEY = None
-RECAPTCHA_PRIVATE_KEY = None
-NOCAPTCHA = True
-
-CAPTCHA_WIDGET_TEMPLATE = "sentry/partial/form_captcha.html"
-
 # Percy config for visual regression testing.
 
 PERCY_DEFAULT_TESTING_WIDTHS = (1280, 375)
diff --git a/src/sentry/templates/sentry/includes/captcha.html b/src/sentry/templates/sentry/includes/captcha.html
deleted file mode 100644
index fb3ad84671..0000000000
--- a/src/sentry/templates/sentry/includes/captcha.html
+++ /dev/null
@@ -1,23 +0,0 @@
-{% if api_key %}
-<script>
-  (function(window){
-    var captchaNodes = $('.g-recaptcha');
-    if (captchaNodes.length) {
-      window.recaptchaCallback = function(){
-        var sitekey = '{{ api_key }}';
-        captchaNodes.each(function(){
-          grecaptcha.render(this, {
-            'sitekey': sitekey
-          });
-        });
-      };
-      var sNew = document.createElement("script");
-      sNew.async = true;
-      sNew.defer = true;
-      sNew.src = "https://www.google.com/recaptcha/api.js?onload=recaptchaCallback&render=explicit";
-      var s0 = document.getElementsByTagName('script')[0];
-      s0.parentNode.insertBefore(sNew, s0);
-    }
-  }(window));
-</script>
-{% endif %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 9a1e0e7374..859103d944 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -320,8 +320,6 @@
   </script>
   {% endblock %}
 
-  {% load_captcha %}
-
   {% block scripts_bottom %}{% endblock %}
 </body>
 </html>
diff --git a/src/sentry/templates/sentry/partial/form_captcha.html b/src/sentry/templates/sentry/partial/form_captcha.html
deleted file mode 100644
index 170d812b34..0000000000
--- a/src/sentry/templates/sentry/partial/form_captcha.html
+++ /dev/null
@@ -1 +0,0 @@
-<div class="g-recaptcha"></div>
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index e9775b6316..fe3903ff31 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -399,13 +399,6 @@ def format_userinfo(user):
     ))
 
 
-@register.inclusion_tag('sentry/includes/captcha.html')
-def load_captcha():
-    return {
-        'api_key': settings.RECAPTCHA_PUBLIC_KEY,
-    }
-
-
 @register.filter
 def soft_break(value, length):
     return _soft_break(
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index d88f4636d6..0d35032db4 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -10,7 +10,6 @@ def pytest_configure(config):
     # HACK: Only needed for testing!
     os.environ.setdefault('_SENTRY_SKIP_CONFIGURATION', '1')
 
-    os.environ.setdefault('RECAPTCHA_TESTING', 'True')
     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sentry.conf.server')
 
     if not settings.configured:
@@ -80,9 +79,6 @@ def pytest_configure(config):
     settings.SENTRY_TSDB = 'sentry.tsdb.inmemory.InMemoryTSDB'
     settings.SENTRY_TSDB_OPTIONS = {}
 
-    settings.RECAPTCHA_PUBLIC_KEY = 'a' * 40
-    settings.RECAPTCHA_PRIVATE_KEY = 'b' * 40
-
     settings.BROKER_BACKEND = 'memory'
     settings.BROKER_URL = None
     settings.CELERY_ALWAYS_EAGER = False
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 60b4ef7a81..91e63710b0 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -9,7 +9,6 @@ from __future__ import absolute_import
 
 import pytz
 
-from captcha.fields import ReCaptchaField
 from datetime import datetime
 from django import forms
 from django.conf import settings
@@ -43,31 +42,7 @@ def _get_timezone_choices():
 TIMEZONE_CHOICES = _get_timezone_choices()
 
 
-class CaptchaForm(forms.Form):
-    def __init__(self, *args, **kwargs):
-        has_captcha = bool(settings.RECAPTCHA_PUBLIC_KEY)
-        if has_captcha:
-            captcha = kwargs.pop('captcha', True)
-        else:
-            captcha = kwargs.pop('captcha', None)
-        super(CaptchaForm, self).__init__(*args, **kwargs)
-        if has_captcha and captcha:
-            self.fields['captcha'] = ReCaptchaField()
-
-
-class CaptchaModelForm(forms.ModelForm):
-    def __init__(self, *args, **kwargs):
-        has_captcha = bool(settings.RECAPTCHA_PUBLIC_KEY)
-        if has_captcha:
-            captcha = kwargs.pop('captcha', True)
-        else:
-            captcha = kwargs.pop('captcha', None)
-        super(CaptchaModelForm, self).__init__(*args, **kwargs)
-        if has_captcha and captcha:
-            self.fields['captcha'] = ReCaptchaField()
-
-
-class AuthenticationForm(CaptchaForm):
+class AuthenticationForm(forms.Form):
     username = forms.CharField(
         label=_('Account'), max_length=128, widget=forms.TextInput(
             attrs={'placeholder': _('username or email'),
@@ -180,7 +155,7 @@ class AuthenticationForm(CaptchaForm):
         return self.user_cache
 
 
-class RegistrationForm(CaptchaModelForm):
+class RegistrationForm(forms.ModelForm):
     username = forms.EmailField(
         label=_('Email'), max_length=128,
         widget=forms.TextInput(attrs={'placeholder': 'you@example.com'}))
@@ -208,7 +183,7 @@ class RegistrationForm(CaptchaModelForm):
         return user
 
 
-class RecoverPasswordForm(CaptchaForm):
+class RecoverPasswordForm(forms.Form):
     user = forms.CharField(label=_('Username or email'))
 
     def clean_user(self):
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 37b5c8c7ed..ba3237f4d5 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -58,21 +58,14 @@ def expired(request, user):
 
 
 def recover(request):
-    form = RecoverPasswordForm(request.POST or None,
-                               captcha=bool(request.session.get('needs_captcha')))
+    form = RecoverPasswordForm(request.POST or None)
     if form.is_valid():
         password_hash = send_password_recovery_mail(form.cleaned_data['user'])
-        request.session.pop('needs_captcha', None)
 
         return render_to_response('sentry/account/recover/sent.html', {
             'email': password_hash.user.email,
         }, request)
 
-    elif request.POST and not request.session.get('needs_captcha'):
-        request.session['needs_captcha'] = 1
-        form = RecoverPasswordForm(request.POST or None, captcha=True)
-        form.errors.pop('captcha', None)
-
     context = {
         'form': form,
     }
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 27beacec93..54130aaf04 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -44,14 +44,13 @@ class AuthLoginView(BaseView):
         op = request.POST.get('op')
         return AuthenticationForm(
             request, request.POST if op == 'login' else None,
-            captcha=bool(request.session.get('needs_captcha')),
         )
 
     def get_register_form(self, request, initial=None):
         op = request.POST.get('op')
         return RegistrationForm(
             request.POST if op == 'register' else None,
-            captcha=bool(request.session.get('needs_captcha')), initial=initial,
+            initial=initial,
         )
 
     def handle_basic_auth(self, request):
@@ -84,7 +83,6 @@ class AuthLoginView(BaseView):
             # can_register should only allow a single registration
             request.session.pop('can_register', None)
             request.session.pop('invite_email', None)
-            request.session.pop('needs_captcha', None)
 
             return self.redirect(auth.get_login_redirect(request))
 
@@ -93,29 +91,11 @@ class AuthLoginView(BaseView):
 
             auth.login(request, user)
 
-            request.session.pop('needs_captcha', None)
-
             if not user.is_active:
                 return self.redirect(reverse('sentry-reactivate-account'))
 
             return self.redirect(auth.get_login_redirect(request))
 
-        elif request.POST and not request.session.get('needs_captcha'):
-            auth.log_auth_failure(request, request.POST.get('username'))
-            request.session['needs_captcha'] = 1
-            login_form = self.get_login_form(request)
-            login_form.errors.pop('captcha', None)
-            if can_register:
-                register_form = self.get_register_form(request)
-                register_form.errors.pop('captcha', None)
-
-        # When the captcha fails, hide any other errors
-        # to prevent brute force attempts.
-        if 'captcha' in login_form.errors:
-            for k in login_form.errors.keys():
-                if k != 'captcha':
-                    login_form.errors.pop(k)
-
         request.session.set_test_cookie()
 
         context = {
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 93bb4223d9..f8c240519d 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -23,14 +23,12 @@ class AuthOrganizationLoginView(BaseView):
         op = request.POST.get('op')
         return AuthenticationForm(
             request, request.POST if op == 'login' else None,
-            captcha=bool(request.session.get('needs_captcha')),
         )
 
     def get_register_form(self, request):
         op = request.POST.get('op')
         return RegistrationForm(
             request.POST if op == 'register' else None,
-            captcha=bool(request.session.get('needs_captcha')),
         )
 
     def handle_basic_auth(self, request, organization):
@@ -64,33 +62,13 @@ class AuthOrganizationLoginView(BaseView):
             # can_register should only allow a single registration
             request.session.pop('can_register', None)
 
-            request.session.pop('needs_captcha', None)
-
             return self.redirect(auth.get_login_redirect(request))
 
         elif login_form.is_valid():
             auth.login(request, login_form.get_user())
 
-            request.session.pop('needs_captcha', None)
-
             return self.redirect(auth.get_login_redirect(request))
 
-        elif request.POST and not request.session.get('needs_captcha'):
-            auth.log_auth_failure(request, request.POST.get('username'))
-            request.session['needs_captcha'] = 1
-            login_form = self.get_login_form(request)
-            login_form.errors.pop('captcha', None)
-            if can_register:
-                register_form = self.get_register_form(request)
-                register_form.errors.pop('captcha', None)
-
-        # When the captcha fails, hide any other errors
-        # to prevent brute force attempts.
-        if 'captcha' in login_form.errors:
-            for k in login_form.errors.keys():
-                if k != 'captcha':
-                    login_form.errors.pop(k)
-
         request.session.set_test_cookie()
 
         context = {
diff --git a/tests/acceptance/test_auth.py b/tests/acceptance/test_auth.py
index d7e2bf52c6..2828f49725 100644
--- a/tests/acceptance/test_auth.py
+++ b/tests/acceptance/test_auth.py
@@ -5,13 +5,10 @@ from sentry.testutils import AcceptanceTestCase
 
 class AuthTest(AcceptanceTestCase):
     def enter_auth(self, username, password):
-        # disable captcha as it makes these tests flakey (and requires waiting
-        # on external resources)
-        with self.settings(RECAPTCHA_PUBLIC_KEY=None):
-            self.browser.get('/auth/login/')
-            self.browser.find_element_by_id('id_username').send_keys(username)
-            self.browser.find_element_by_id('id_password').send_keys(password)
-            self.browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
+        self.browser.get('/auth/login/')
+        self.browser.find_element_by_id('id_username').send_keys(username)
+        self.browser.find_element_by_id('id_password').send_keys(password)
+        self.browser.find_element_by_xpath("//button[contains(text(), 'Login')]").click()
 
     def test_renders(self):
         self.browser.get('/auth/login/')
