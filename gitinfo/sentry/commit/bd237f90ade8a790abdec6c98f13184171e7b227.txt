commit bd237f90ade8a790abdec6c98f13184171e7b227
Author: Stephen Cefali <scefali@sentry.io>
Date:   Mon Apr 27 10:05:49 2020 -0700

    feat(slack): sets up UI for slack migration (#18428)

diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index b755021a18..063eebe76c 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -76,6 +76,7 @@ default_manager.add("organizations:integrations-issue-sync", OrganizationFeature
 default_manager.add("organizations:integrations-event-hooks", OrganizationFeature)  # NOQA
 default_manager.add("organizations:data-forwarding", OrganizationFeature)  # NOQA
 default_manager.add("organizations:slack-v2", OrganizationFeature)  # NOQA
+default_manager.add("organizations:slack-migration", OrganizationFeature)  # NOQA
 default_manager.add("organizations:internal-catchall", OrganizationFeature)  # NOQA
 default_manager.add("organizations:incidents", OrganizationFeature)  # NOQA
 default_manager.add("organizations:invite-members", OrganizationFeature)  # NOQA
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
index 8bd2810c17..2ed8b494a2 100644
--- a/src/sentry/integrations/slack/integration.py
+++ b/src/sentry/integrations/slack/integration.py
@@ -11,6 +11,7 @@ from sentry.integrations import (
     IntegrationMetadata,
     IntegrationProvider,
     FeatureDescription,
+    IntegrationInstallation,
 )
 from sentry.pipeline import NestedPipelineView
 from sentry.utils.http import absolute_uri
@@ -48,6 +49,10 @@ setup_alert = {
     "text": "The Slack integration adds a new Alert Rule action to all projects. To enable automatic notifications sent to Slack you must create a rule using the slack workspace action in your project settings.",
 }
 
+reauthentication_alert = {
+    "alertText": "Slack must be re-authorized to avoid a disruption of Slack notifications",
+}
+
 metadata = IntegrationMetadata(
     description=_(DESCRIPTION.strip()),
     features=FEATURES,
@@ -55,15 +60,24 @@ metadata = IntegrationMetadata(
     noun=_("Workspace"),
     issue_url="https://github.com/getsentry/sentry/issues/new?title=Slack%20Integration:%20&labels=Component%3A%20Integrations",
     source_url="https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/slack",
-    aspects={"alerts": [setup_alert]},
+    aspects={"alerts": [setup_alert], "reauthentication_alert": reauthentication_alert},
 )
 
 
+class SlackIntegration(IntegrationInstallation):
+    def get_config_data(self):
+        metadata = self.model.metadata
+        # classic bots had a user_access_token in the metadata
+        default_installation = "classic_bot" if "user_access_token" in metadata else "workspace_app"
+        return {"installationType": metadata.get("installation_type", default_installation)}
+
+
 class SlackIntegrationProvider(IntegrationProvider):
     key = "slack"
     name = "Slack"
     metadata = metadata
     features = frozenset([IntegrationFeatures.CHAT_UNFURL, IntegrationFeatures.ALERT_RULE])
+    integration_cls = SlackIntegration
 
     # Scopes differ depending on if it's a workspace app
     wst_oauth_scopes = frozenset(
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 5e26bafeb2..d34b149eed 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -8,6 +8,7 @@ import {
   NOT_INSTALLED,
   PENDING,
 } from 'app/views/organizationIntegrations/constants';
+import {Props as AlertProps} from 'app/components/alert';
 
 declare global {
   interface Window {
@@ -657,6 +658,23 @@ export type PullRequest = {
   externalUrl: string;
 };
 
+type IntegrationDialog = {
+  actionText: string;
+  body: string;
+};
+
+type IntegrationAspects = {
+  alerts?: Array<AlertProps & {text: string}>;
+  reauthentication_alert?: {alertText: string};
+  disable_dialog?: IntegrationDialog;
+  removal_dialog?: IntegrationDialog;
+  externalInstall?: {
+    url: string;
+    buttonText: string;
+    noticeText: string;
+  };
+};
+
 type BaseIntegrationProvider = {
   key: string;
   slug: string;
@@ -675,7 +693,7 @@ export type IntegrationProvider = BaseIntegrationProvider & {
     noun: string;
     issue_url: string;
     source_url: string;
-    aspects: any; //TODO(ts)
+    aspects: IntegrationAspects;
   };
 };
 
@@ -746,10 +764,17 @@ export type Integration = {
   domainName: string;
   accountType: string;
   status: ObjectStatus;
-  provider: BaseIntegrationProvider & {aspects: any};
+  provider: BaseIntegrationProvider & {aspects: IntegrationAspects};
   configOrganization: Field[];
   //TODO(ts): This includes the initial data that is passed into the integration's configuration form
-  configData: object;
+  configData: object & {
+    //installationType is only for Slack migration and can be removed after migrations are done
+    installationType?:
+      | 'workspace_app'
+      | 'classic_bot'
+      | 'born_as_bot'
+      | 'migrated_to_bot';
+  };
 };
 
 export type IntegrationExternalIssue = {
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 175494084d..a404a98669 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -13,6 +13,8 @@ import {
   SentryApp,
   PluginWithProjectList,
   DocumentIntegration,
+  Integration,
+  IntegrationProvider,
 } from 'app/types';
 import {Hooks} from 'app/types/hooks';
 import HookStore from 'app/stores/hookStore';
@@ -275,3 +277,12 @@ export function isDocumentIntegration(
 ): integration is DocumentIntegration {
   return integration.hasOwnProperty('docUrl');
 }
+
+export function isSlackWorkspaceApp(integration: Integration) {
+  return integration.configData.installationType === 'workspace_app';
+}
+
+//returns the text in the alert asking the user to re-authenticate a first-party integration
+export function getReauthAlertText(provider: IntegrationProvider) {
+  return provider.metadata.aspects?.reauthentication_alert?.alertText;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index cf75703f60..ae6e5a4e27 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -27,6 +27,7 @@ export type Props = {
   className?: string;
 };
 
+//TODO: Replace with InstalledIntegrationInDirectory
 export default class InstalledIntegration extends React.Component<Props> {
   static propTypes = {
     organization: SentryTypes.Organization.isRequired,
@@ -122,7 +123,7 @@ export default class InstalledIntegration extends React.Component<Props> {
 
   get disableConfirmProps() {
     const {integration} = this.props;
-    const {body, actionText} = integration.provider.aspects.disable_dialog;
+    const {body, actionText} = integration.provider.aspects.disable_dialog || {};
     const message = (
       <React.Fragment>
         <Alert type="error" icon="icon-circle-exclamation">
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
index d6f422bad2..6bbabff77a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
@@ -14,6 +14,7 @@ import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
 import CircleIndicator from 'app/components/circleIndicator';
 import theme from 'app/utils/theme';
 import space from 'app/styles/space';
+import {IconWarning} from 'app/icons';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
@@ -28,6 +29,7 @@ export type Props = {
     options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>
   ) => void; //analytics callback
   className?: string;
+  showReauthMessage: boolean;
 };
 
 //TODO: Rename to InstalledIntegration when we can remove the old one
@@ -62,7 +64,7 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
     });
   };
 
-  getRemovalBodyAndText(aspects) {
+  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {
     if (aspects && aspects.removal_dialog) {
       return {
         body: aspects.removal_dialog.body,
@@ -93,7 +95,7 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
     const message = (
       <React.Fragment>
         <Alert type="error" icon="icon-circle-exclamation">
-          Deleting this integration has consequences!
+          {t('Deleting this integration has consequences!')}
         </Alert>
         {body}
       </React.Fragment>
@@ -107,11 +109,11 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
 
   get disableConfirmProps() {
     const {integration} = this.props;
-    const {body, actionText} = integration.provider.aspects.disable_dialog;
+    const {body, actionText} = integration.provider.aspects.disable_dialog || {};
     const message = (
       <React.Fragment>
         <Alert type="error" icon="icon-circle-exclamation">
-          This integration cannot be removed on Sentry
+          {t('This integration cannot be removed in Sentry')}
         </Alert>
         {body}
       </React.Fragment>
@@ -125,7 +127,13 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
   }
 
   render() {
-    const {className, integration, provider, organization} = this.props;
+    const {
+      className,
+      integration,
+      provider,
+      organization,
+      showReauthMessage,
+    } = this.props;
 
     const removeConfirmProps =
       integration.status === 'active' && integration.provider.canDisable
@@ -140,44 +148,72 @@ export default class InstalledIntegrationInDirectory extends React.Component<Pro
               <IntegrationItem integration={integration} />
             </IntegrationItemBox>
             <div>
-              {
+              {showReauthMessage && (
                 <Tooltip
-                  disabled={this.hasConfiguration()}
-                  position="left"
-                  title="Integration not configurable"
+                  disabled={hasAccess}
+                  title={t(
+                    'You must be an organization owner, manager or admin to re-authenticate'
+                  )}
                 >
-                  <StyledButton
-                    borderless
-                    icon="icon-settings"
-                    disabled={
-                      !this.hasConfiguration() ||
-                      !hasAccess ||
-                      integration.status !== 'active'
-                    }
-                    to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
-                    data-test-id="integration-configure-button"
+                  <Button
+                    disabled={!hasAccess}
+                    priority="primary"
+                    size="small"
+                    icon={<IconWarning size="sm" />}
                   >
-                    Configure
-                  </StyledButton>
+                    {t('Re-authenticate Now')}
+                  </Button>
                 </Tooltip>
-              }
-            </div>
-            <div>
-              <Confirm
-                priority="danger"
-                onConfirming={this.handleUninstallClick}
-                disabled={!hasAccess}
-                {...removeConfirmProps}
+              )}
+              <Tooltip
+                disabled={this.hasConfiguration() && hasAccess}
+                position="left"
+                title={
+                  !this.hasConfiguration()
+                    ? t('Integration not configurable')
+                    : t(
+                        'You must be an organization owner, manager or admin to configure'
+                      )
+                }
               >
                 <StyledButton
-                  disabled={!hasAccess}
                   borderless
-                  icon={<IconDelete />}
-                  data-test-id="integration-remove-button"
+                  icon="icon-settings"
+                  disabled={
+                    !this.hasConfiguration() ||
+                    !hasAccess ||
+                    integration.status !== 'active'
+                  }
+                  to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
+                  data-test-id="integration-configure-button"
                 >
-                  Uninstall
+                  {t('Configure')}
                 </StyledButton>
-              </Confirm>
+              </Tooltip>
+            </div>
+            <div>
+              <Tooltip
+                disabled={hasAccess}
+                title={t(
+                  'You must be an organization owner, manager or admin to uninstall'
+                )}
+              >
+                <Confirm
+                  priority="danger"
+                  onConfirming={this.handleUninstallClick}
+                  disabled={!hasAccess}
+                  {...removeConfirmProps}
+                >
+                  <StyledButton
+                    disabled={!hasAccess}
+                    borderless
+                    icon={<IconDelete />}
+                    data-test-id="integration-remove-button"
+                  >
+                    {t('Uninstall')}
+                  </StyledButton>
+                </Confirm>
+              </Tooltip>
             </div>
 
             <IntegrationStatus status={integration.status} />
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index 89e1172f0f..6be227aaaa 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -2,6 +2,9 @@ import React from 'react';
 import styled from '@emotion/styled';
 import keyBy from 'lodash/keyBy';
 
+import {IconWarning} from 'app/icons';
+import Feature from 'app/components/acl/feature';
+import Alert from 'app/components/alert';
 import {Integration, IntegrationProvider} from 'app/types';
 import {RequestOptions} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
@@ -12,6 +15,7 @@ import Button from 'app/components/button';
 import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegrationInDirectory';
 import withOrganization from 'app/utils/withOrganization';
 import {sortArray} from 'app/utils';
+import {isSlackWorkspaceApp, getReauthAlertText} from 'app/utils/integrationUtil';
 
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
@@ -202,23 +206,36 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
     const {organization} = this.props;
     const provider = this.provider;
     if (configurations.length) {
+      // check if we have a workspace app to render the alert
+      const hasWorkspaceApp = configurations.some(isSlackWorkspaceApp);
+
       return (
-        <div>
-          {configurations.map(integration => (
-            <InstallWrapper key={integration.id}>
-              <InstalledIntegration
-                organization={organization}
-                provider={provider}
-                integration={integration}
-                onRemove={this.onRemove}
-                onDisable={this.onDisable}
-                onReinstallIntegration={this.onInstall}
-                data-test-id={integration.id}
-                trackIntegrationEvent={this.trackIntegrationEvent}
-              />
-            </InstallWrapper>
-          ))}
-        </div>
+        <Feature organization={organization} features={['slack-migration']}>
+          {({hasFeature}) => (
+            <div>
+              {hasFeature && hasWorkspaceApp && (
+                <Alert type="warning" icon={<IconWarning size="sm" />}>
+                  {getReauthAlertText(provider)}
+                </Alert>
+              )}
+              {configurations.map(integration => (
+                <InstallWrapper key={integration.id}>
+                  <InstalledIntegration
+                    organization={organization}
+                    provider={provider}
+                    integration={integration}
+                    onRemove={this.onRemove}
+                    onDisable={this.onDisable}
+                    onReinstallIntegration={this.onInstall}
+                    data-test-id={integration.id}
+                    trackIntegrationEvent={this.trackIntegrationEvent}
+                    showReauthMessage={hasFeature && isSlackWorkspaceApp(integration)}
+                  />
+                </InstallWrapper>
+              ))}
+            </div>
+          )}
+        </Feature>
       );
     }
     return this.renderEmptyConfigurations();
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index f3ab5eadd9..4589a95f36 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -26,6 +26,8 @@ import {
   isPlugin,
   isDocumentIntegration,
   getCategoriesForIntegration,
+  isSlackWorkspaceApp,
+  getReauthAlertText,
 } from 'app/utils/integrationUtil';
 import {t, tct} from 'app/locale';
 import AsyncComponent from 'app/components/asyncComponent';
@@ -39,6 +41,7 @@ import space from 'app/styles/space';
 import SelectControl from 'app/components/forms/selectControl';
 import withExperiment from 'app/utils/withExperiment';
 import {ExperimentAssignment} from 'app/types/experiments';
+import Feature from 'app/components/acl/feature';
 
 import {POPULARITY_WEIGHT, documentIntegrations} from './constants';
 import IntegrationRow from './integrationRow';
@@ -315,19 +318,32 @@ export class IntegrationListDirectory extends AsyncComponent<
       i => i.provider.key === provider.key
     );
 
+    const hasWorkspaceApp = integrations.some(isSlackWorkspaceApp);
+
     return (
-      <IntegrationRow
+      <Feature
         key={`row-${provider.key}`}
-        data-test-id="integration-row"
         organization={organization}
-        type="firstParty"
-        slug={provider.slug}
-        displayName={provider.name}
-        status={integrations.length ? 'Installed' : 'Not Installed'}
-        publishStatus="published"
-        configurations={integrations.length}
-        categories={getCategoriesForIntegration(provider)}
-      />
+        features={['slack-migration']}
+      >
+        {({hasFeature}) => (
+          <IntegrationRow
+            key={`row-${provider.key}`}
+            data-test-id="integration-row"
+            organization={organization}
+            type="firstParty"
+            slug={provider.slug}
+            displayName={provider.name}
+            status={integrations.length ? 'Installed' : 'Not Installed'}
+            publishStatus="published"
+            configurations={integrations.length}
+            categories={getCategoriesForIntegration(provider)}
+            alertText={
+              hasFeature && hasWorkspaceApp ? getReauthAlertText(provider) : undefined
+            }
+          />
+        )}
+      </Feature>
     );
   };
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
index 05e00e786e..6547ac2b30 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
@@ -2,6 +2,9 @@ import React from 'react';
 import styled from '@emotion/styled';
 import startCase from 'lodash/startCase';
 
+import {IconWarning} from 'app/icons';
+import Button from 'app/components/button';
+import Alert from 'app/components/alert';
 import Link from 'app/components/links/link';
 import {PanelItem} from 'app/components/panels';
 import PluginIcon from 'app/plugins/components/pluginIcon';
@@ -20,6 +23,7 @@ type Props = {
   publishStatus: 'unpublished' | 'published' | 'internal';
   configurations: number;
   categories: string[];
+  alertText?: string;
 };
 
 const urlMap = {
@@ -39,6 +43,7 @@ const IntegrationRow = (props: Props) => {
     publishStatus,
     configurations,
     categories,
+    alertText,
   } = props;
 
   const baseUrl =
@@ -87,6 +92,16 @@ const IntegrationRow = (props: Props) => {
           ))}
         </InternalContainer>
       </FlexContainer>
+      {alertText && (
+        <AlertContainer>
+          <Alert type="warning" icon={<IconWarning size="sm" />}>
+            <span>{alertText}</span>
+            <ResolveNowButton href={`${baseUrl}?tab=configurations`} size="xsmall">
+              {t('Resolve Now')}
+            </ResolveNowButton>
+          </Alert>
+        </AlertContainer>
+      )}
     </PanelItem>
   );
 };
@@ -173,4 +188,14 @@ const CategoryTag = styled(
   color: ${p => (p.priority ? p.theme.white : p.theme.gray4)};
 `;
 
+const ResolveNowButton = styled(Button)`
+  color: ${p => p.theme.gray2};
+  background: #ffffff;
+  float: right;
+`;
+
+const AlertContainer = styled('div')`
+  padding: 0px ${space(3)} 0px 68px;
+`;
+
 export default IntegrationRow;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx b/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
index 1ecf033ea6..e54c30ac37 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/permissionAlert.tsx
@@ -4,6 +4,7 @@ import React from 'react';
 import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
 import Alert from 'app/components/alert';
+import {IconWarning} from 'app/icons';
 
 type Props = React.ComponentPropsWithoutRef<typeof Alert> &
   Pick<React.ComponentProps<typeof Access>, 'access'>;
@@ -12,7 +13,7 @@ const PermissionAlert = ({access = ['org:write'], ...props}: Props) => (
   <Access access={access}>
     {({hasAccess}) =>
       !hasAccess && (
-        <Alert type="warning" icon="icon-warning-sm" {...props}>
+        <Alert type="warning" icon={<IconWarning size="sm" />} {...props}>
           {t(
             'These settings can only be edited by users with the organization owner or manager role.'
           )}
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
index a943c34cfc..b969972ca5 100644
--- a/tests/sentry/integrations/slack/test_integration.py
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -6,7 +6,7 @@ import six
 from django.test.utils import override_settings
 from six.moves.urllib.parse import parse_qs, urlencode, urlparse
 
-from sentry.integrations.slack import SlackIntegrationProvider
+from sentry.integrations.slack import SlackIntegrationProvider, SlackIntegration
 from sentry.models import (
     Identity,
     IdentityProvider,
@@ -14,7 +14,7 @@ from sentry.models import (
     Integration,
     OrganizationIntegration,
 )
-from sentry.testutils import IntegrationTestCase
+from sentry.testutils import IntegrationTestCase, TestCase
 from sentry.testutils.helpers import override_options, with_feature
 
 
@@ -204,3 +204,20 @@ class SlackIntegrationTest(IntegrationTestCase):
                 expected_client_id="other-id",
                 expected_client_secret="other-secret",
             )
+
+
+class SlackIntegrationConfigTest(TestCase):
+    def setUp(self):
+        self.integration = Integration.objects.create(provider="slack", name="Slack", metadata={})
+        self.installation = SlackIntegration(self.integration, self.organization.id)
+
+    def test_config_data_workspace_app(self):
+        self.installation.get_config_data()["installationType"] = "workspace_app"
+
+    def test_config_data_user_token(self):
+        self.integration.metadata["user_access_token"] = "token"
+        self.installation.get_config_data()["installationType"] = "classic_bot"
+
+    def test_config_data_born_as_bot(self):
+        self.integration.metadata["installation_type"] = "born_as_bot"
+        self.installation.get_config_data()["installationType"] = "born_as_bot"
