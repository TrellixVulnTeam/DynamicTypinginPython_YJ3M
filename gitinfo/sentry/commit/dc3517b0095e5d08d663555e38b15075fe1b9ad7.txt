commit dc3517b0095e5d08d663555e38b15075fe1b9ad7
Author: Ted Kaemming <ted@kaemming.com>
Date:   Tue Sep 29 11:10:44 2015 -0700

    Work on making API compatible with existing Notification object.

diff --git a/digest.py b/digest.py
index cb57c42fde..5050647b37 100644
--- a/digest.py
+++ b/digest.py
@@ -24,7 +24,8 @@ records = itertools.imap(event_to_record, events)
 print '{project.organization} / {project}'.format(project=project)
 print ''
 
-for group, records in build_digest(project, records):
+digest = build_digest(project, records)
+for group, records in digest.groups.iteritems():
     print '*', group.message_short
     print ' ', group.culprit
     print ' ', group.get_absolute_url()
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
index ab58c1446a..776d406077 100644
--- a/src/sentry/digests/notifications.py
+++ b/src/sentry/digests/notifications.py
@@ -3,7 +3,10 @@ from __future__ import absolute_import
 import functools
 import itertools
 import logging
-from collections import namedtuple
+from collections import (
+    OrderedDict,
+    namedtuple,
+)
 
 from sentry.models import (
     Group,
@@ -64,5 +67,36 @@ filter_muted_groups = functools.partial(
 )
 
 
+class NotificationDigest(object):
+    def __init__(self, groups):
+        self.groups = groups
+
+    @property
+    def event(self):
+        # TODO: Probably warn about this.
+        # XXX: Need to put a ``Event`` model back together, ugh...
+        raise NotImplementedError
+
+    @property
+    def rule(self):
+        # TODO: Probably warn about this.
+        records = self.groups.values()[0]
+        return records[0].rules[0]
+
+    @property
+    def rules(self):
+        # TODO: Probably warn about this.
+        records = self.groups.values()[0]
+        return records[0].rules
+
+
 def build_digest(project, records):
-    return filter_muted_groups(associate_with_instance(project, group(records)))
+    return NotificationDigest(
+        OrderedDict(
+            sorted(
+                filter_muted_groups(associate_with_instance(project, group(records))),
+                key=lambda (group, records): (len(records), max(record.timestamp for record in records)),
+                reverse=True,
+            ),
+        )
+    )
