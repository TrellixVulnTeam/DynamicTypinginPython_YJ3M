commit 343cdf10da94dcafda3b8a25128b60078420a4b4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Apr 30 00:32:17 2015 -0700

    Improve data available for stats
    
    Conflicts:
            src/sentry/api/serializers/models/group.py

diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index fff3180f4b..940adfd7f0 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -1,9 +1,11 @@
 from __future__ import absolute_import, print_function
 
+from datetime import timedelta
 from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
 
+from sentry.app import tsdb
 from sentry.api.base import DocSection
 from sentry.api.bases.group import GroupEndpoint
 from sentry.api.fields import UserField
@@ -117,11 +119,31 @@ class GroupDetailsEndpoint(GroupEndpoint):
 
         action_list = self._get_actions(request, group)
 
+        now = timezone.now()
+        hourly_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=[group.id],
+            end=now,
+            start=now - timedelta(days=1),
+            rollup=3600,
+        )[group.id]
+        daily_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=[group.id],
+            end=now,
+            start=now - timedelta(days=30),
+            rollup=3600 * 24,
+        )[group.id]
+
         data.update({
             'firstRelease': first_release,
             'activity': serialize(activity, request.user),
             'seenBy': serialize(seen_by, request.user),
             'pluginActions': action_list,
+            'stats': {
+                '24h': hourly_stats,
+                '30d': daily_stats,
+            }
         })
 
         return Response(data)
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 6ec363480d..e4b90a1205 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -10,6 +10,7 @@ from sentry.app import search
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.serializers import serialize
+from sentry.api.serializers.models.group import StreamGroupSerializer
 from sentry.constants import (
     DEFAULT_SORT_OPTION, STATUS_CHOICES
 )
@@ -126,7 +127,7 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
 
         GroupMeta.objects.populate_cache(context)
 
-        response = Response(serialize(context, request.user))
+        response = Response(serialize(context, request.user, StreamGroupSerializer))
         response['Link'] = ', '.join([
             self.build_cursor_link(request, 'previous', cursor_result.prev),
             self.build_cursor_link(request, 'next', cursor_result.next),
diff --git a/src/sentry/api/serializers/base.py b/src/sentry/api/serializers/base.py
index 0ac3b45663..bdce540a15 100644
--- a/src/sentry/api/serializers/base.py
+++ b/src/sentry/api/serializers/base.py
@@ -6,21 +6,24 @@ from django.contrib.auth.models import AnonymousUser
 registry = {}
 
 
-def serialize(objects, user=None):
+def serialize(objects, user=None, serializer=None):
     if user is None:
         user = AnonymousUser()
 
     if not objects:
         return objects
     elif not isinstance(objects, (list, tuple)):
-        return serialize([objects], user=user)[0]
+        return serialize([objects], user=user, serializer=serializer)[0]
 
     # elif isinstance(obj, dict):
     #     return dict((k, serialize(v, request=request)) for k, v in obj.iteritems())
-    try:
-        serializer = registry[type(objects[0])]
-    except KeyError:
-        return objects
+    if serializer is None:
+        try:
+            serializer = registry[type(objects[0])]
+        except KeyError:
+            return objects
+    else:
+        serializer = serializer()
 
     attrs = serializer.get_attrs(item_list=objects, user=user)
     return [serializer(o, attrs=attrs.get(o, {}), user=user) for o in objects]
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index 6eac49dcc1..88e1938c6a 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -1,15 +1,15 @@
-from __future__ import absolute_import
+from __future__ import absolute_import, print_function
 
 from collections import defaultdict
 from datetime import timedelta
 from django.core.urlresolvers import reverse
 from django.utils import timezone
 
-from sentry.api.serializers import Serializer, register
+from sentry.api.serializers import Serializer, register, serialize
 from sentry.app import tsdb
 from sentry.constants import TAG_LABELS
 from sentry.models import (
-    Group, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus
+    Group, GroupAssignee, GroupBookmark, GroupTagKey, GroupSeen, GroupStatus
 )
 from sentry.utils.db import attach_foreignkey
 from sentry.utils.http import absolute_uri
@@ -40,22 +40,11 @@ class GroupSerializer(Serializer):
         for key, group_id, values_seen in tag_results:
             tag_counts[key][group_id] = values_seen
 
-        # we need to compute stats at 1d (1h resolution), and 14d/30d (1 day res)
-        group_ids = [g.id for g in item_list]
-        now = timezone.now()
-        hourly_stats = tsdb.get_range(
-            model=tsdb.models.group,
-            keys=group_ids,
-            end=now,
-            start=now - timedelta(days=1),
-            rollup=3600,
-        )
-        daily_stats = tsdb.get_range(
-            model=tsdb.models.group,
-            keys=group_ids,
-            end=now,
-            start=now - timedelta(days=30),
-            rollup=3600 * 24,
+        assignees = dict(
+            (a.group_id, a.user)
+            for a in GroupAssignee.objects.filter(
+                group__in=item_list,
+            ).select_related('user')
         )
 
         result = {}
@@ -75,11 +64,10 @@ class GroupSerializer(Serializer):
                 }
 
             result[item] = {
+                'assigned_to': serialize(assignees.get(item.id)),
                 'is_bookmarked': item.id in bookmarks,
                 'has_seen': seen_groups.get(item.id, active_date) > active_date,
                 'tags': tags,
-                'hourly_stats': hourly_stats[item.id],
-                'daily_stats': daily_stats[item.id],
             }
         return result
 
@@ -111,17 +99,53 @@ class GroupSerializer(Serializer):
             'level': obj.get_level_display(),
             'status': status_label,
             'isPublic': obj.is_public,
-            # 'score': getattr(obj, 'sort_value', 0),
             'project': {
                 'name': obj.project.name,
                 'slug': obj.project.slug,
             },
-            'stats': {
-                '24h': attrs['hourly_stats'],
-                '30d': attrs['daily_stats'],
-            },
+            'assignedTo': attrs['assigned_to'],
             'isBookmarked': attrs['is_bookmarked'],
             'hasSeen': attrs['has_seen'],
             'tags': attrs['tags'],
         }
         return d
+
+
+class StreamGroupSerializer(GroupSerializer):
+    def get_attrs(self, item_list, user):
+        attrs = super(StreamGroupSerializer, self).get_attrs(item_list, user)
+
+        # we need to compute stats at 1d (1h resolution), and 14d
+        group_ids = [g.id for g in item_list]
+        now = timezone.now()
+        hourly_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=group_ids,
+            end=now,
+            start=now - timedelta(days=1),
+            rollup=3600,
+        )
+        daily_stats = tsdb.get_range(
+            model=tsdb.models.group,
+            keys=group_ids,
+            end=now,
+            start=now - timedelta(days=14),
+            rollup=3600 * 24,
+        )
+
+        for item in item_list:
+            attrs[item].update({
+                'hourly_stats': hourly_stats[item.id],
+                'daily_stats': daily_stats[item.id],
+            })
+        return attrs
+
+    def serialize(self, obj, attrs, user):
+        result = super(StreamGroupSerializer, self).serialize(obj, attrs, user)
+
+        result['stats'] = {
+            '24h': attrs['hourly_stats'],
+            '14d': attrs['daily_stats'],
+        }
+
+        return result
