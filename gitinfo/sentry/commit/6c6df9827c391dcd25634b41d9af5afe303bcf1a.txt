commit 6c6df9827c391dcd25634b41d9af5afe303bcf1a
Author: Ben Vinegar <ben@benv.ca>
Date:   Sun Nov 15 21:43:14 2015 -0500

    Fallback to email for tag values when no username

diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index df06a18315..e45dec61b4 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -3,6 +3,11 @@ import _ from 'underscore';
 
 import StreamTagActions from '../actions/streamTagActions';
 import MemberListStore from './memberListStore';
+
+const getMemberListStoreUsernames = () => {
+  return MemberListStore.getAll().map(user => user.username || user.email);
+};
+
 const StreamTagStore = Reflux.createStore({
   listenables: StreamTagActions,
 
@@ -26,7 +31,7 @@ const StreamTagStore = Reflux.createStore({
       assigned: {
         key: 'assigned',
         name: 'Assigned To',
-        values: MemberListStore.getAll().map(user => user.username),
+        values: getMemberListStoreUsernames(),
         predefined: true
       }
     };
@@ -70,7 +75,7 @@ const StreamTagStore = Reflux.createStore({
 
   onMemberListStoreChange(members) {
     let assignedTag = this.tags.assigned;
-    assignedTag.values = MemberListStore.getAll().map(user => user.email);
+    assignedTag.values = getMemberListStoreUsernames();
     this.trigger(this.tags);
   }
 });
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/streamTagStore.spec.jsx
index 1416e5f901..78af34f227 100644
--- a/tests/js/spec/stores/streamTagStore.spec.jsx
+++ b/tests/js/spec/stores/streamTagStore.spec.jsx
@@ -1,4 +1,5 @@
 import StreamTagStore from 'app/stores/streamTagStore';
+import MemberListStore from 'app/stores/memberListStore';
 
 describe('StreamTagStore', function () {
   beforeEach(() => {
@@ -10,6 +11,29 @@ describe('StreamTagStore', function () {
     this.sandbox.restore();
   });
 
+  describe('onMemberListStoreChange()', () => {
+    it('should map each user\'s username to the "assigned" value array', () => {
+      this.sandbox.stub(MemberListStore, 'getAll').returns([
+        {
+          username: 'janesmith',
+          email: 'janesmith@example.org'
+        }
+      ]);
+      StreamTagStore.onMemberListStoreChange();
+      expect(StreamTagStore.tags.assigned.values).to.eql(['janesmith']);
+    });
+
+    it('should fall back to email when username isn\'t available', () => {
+      this.sandbox.stub(MemberListStore, 'getAll').returns([
+        {
+          email: 'janesmith@example.org'
+        }
+      ]);
+      StreamTagStore.onMemberListStoreChange();
+      expect(StreamTagStore.tags.assigned.values).to.eql(['janesmith@example.org']);
+    });
+  });
+
   describe('onLoadTagsSuccess()', () => {
 
     it('should add a new tag with empty values and trigger the new addition', () => {
