commit e4a842e49479d9ff8a6d8bebe4b1de59573d92c7
Author: NisanthanNanthakumar <nisanthan.nanthakumar@sentry.io>
Date:   Thu Feb 13 11:10:43 2020 -0800

    ref: Refactor row components in integration directory (#16983)
    
    Objective
    Currently we have 3 very similar components:integrationPluginRow, integrationProviderRow and IntegrationDirectorySentryAppRow.
    
    Solution
    Refactor the 3 components into 1 view component. There is a new mapping function that gives a common object with all necessary information from the 3 types of integrations.

diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx
deleted file mode 100644
index 1aa64f2322..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/IntegrationDirectorySentryAppRow.tsx
+++ /dev/null
@@ -1,139 +0,0 @@
-import React from 'react';
-import {Link} from 'react-router';
-import capitalize from 'lodash/capitalize';
-import styled from '@emotion/styled';
-
-import {PanelItem} from 'app/components/panels';
-import {t} from 'app/locale';
-import space from 'app/styles/space';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import {Organization, SentryApp, SentryAppInstallation} from 'app/types';
-
-import {NOT_INSTALLED} from './constants';
-
-import IntegrationStatus from './integrationStatus';
-
-type Props = {
-  app: SentryApp;
-  organization: Organization;
-  install?: SentryAppInstallation;
-  ['data-test-id']?: string;
-};
-
-export default class IntegrationDirectorySentryAppRow extends React.PureComponent<Props> {
-  get isInternal() {
-    return this.props.app.status === 'internal';
-  }
-
-  get isPublished() {
-    return this.props.app.status === 'published';
-  }
-
-  renderStatus() {
-    const {app} = this.props;
-    const status = this.installationStatus;
-    return (
-      <React.Fragment>
-        <IntegrationStatus status={status} />
-        {!this.isPublished && <PublishStatus status={app.status} />}
-      </React.Fragment>
-    );
-  }
-
-  get installationStatus() {
-    if (this.props.install) {
-      return capitalize(this.props.install.status) as 'Installed' | 'Pending';
-    }
-
-    return NOT_INSTALLED;
-  }
-
-  linkToEdit() {
-    const {app, organization} = this.props;
-
-    if (this.isInternal) {
-      return `/settings/${organization.slug}/developer-settings/${app.slug}/`;
-    }
-
-    return `/settings/${organization.slug}/sentry-apps/${app.slug}/`;
-    // show the link if the app is internal or we are on the developer settings page
-    // We don't want to show the link to edit on the main integrations list unless the app is internal
-  }
-
-  render() {
-    const {app} = this.props;
-    return (
-      <SentryAppItem data-test-id={app.slug}>
-        <StyledFlex>
-          <PluginIcon size={36} pluginId={app.slug} />
-          <SentryAppBox>
-            <SentryAppName>
-              <SentryAppLink to={this.linkToEdit()}>{app.name}</SentryAppLink>
-            </SentryAppName>
-            <SentryAppDetails>{this.renderStatus()}</SentryAppDetails>
-          </SentryAppBox>
-        </StyledFlex>
-      </SentryAppItem>
-    );
-  }
-}
-
-const SentryAppItem = styled(PanelItem)`
-  flex-direction: column;
-  padding: 5px;
-`;
-
-const StyledFlex = styled('div')`
-  display: flex;
-  justify-content: center;
-  padding: 10px;
-`;
-
-const SentryAppBox = styled('div')`
-  padding-left: 15px;
-  padding-right: 15px;
-  flex: 1;
-`;
-
-const SentryAppDetails = styled('div')`
-  display: flex;
-  align-items: center;
-  margin-top: 6px;
-  font-size: 0.8em;
-`;
-
-const SentryAppName = styled('div')`
-  font-weight: bold;
-  margin-top: 0px;
-`;
-
-const SentryAppLink = styled(Link)`
-  color: ${props => props.theme.textColor};
-`;
-
-const FlexContainer = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-type PublishStatusProps = {status: SentryApp['status']; theme?: any};
-
-const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
-  return (
-    <FlexContainer>
-      <div {...props}>{t(`${status}`)}</div>
-    </FlexContainer>
-  );
-})`
-  color: ${(props: PublishStatusProps) =>
-    props.status === 'published' ? props.theme.success : props.theme.gray2};
-  font-weight: light;
-  margin-right: ${space(0.75)};
-  text-transform: capitalize;
-  &:before {
-    content: '|';
-    color: ${p => p.theme.gray1};
-    margin-right: ${space(0.75)};
-    font-weight: normal;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 9fcc72d1e5..d23351460e 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -3,6 +3,7 @@ import keyBy from 'lodash/keyBy';
 import React from 'react';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
+import capitalize from 'lodash/capitalize';
 
 import {
   Organization,
@@ -23,9 +24,6 @@ import AsyncComponent from 'app/components/asyncComponent';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import MigrationWarnings from 'app/views/organizationIntegrations/migrationWarnings';
 import PermissionAlert from 'app/views/settings/organization/permissionAlert';
-import ProviderRow from 'app/views/organizationIntegrations/integrationProviderRow';
-import PluginRow from 'app/views/organizationIntegrations/integrationPluginRow';
-import IntegrationDirectorySentryAppRow from 'app/views/organizationIntegrations/IntegrationDirectorySentryAppRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import SentryTypes from 'app/sentryTypes';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
@@ -33,6 +31,7 @@ import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 import SearchInput from 'app/components/forms/searchInput';
 import {createFuzzySearch} from 'app/utils/createFuzzySearch';
+import IntegrationRow from './integrationRow';
 
 type AppOrProviderOrPlugin = SentryApp | IntegrationProvider | PluginWithProjectList;
 
@@ -244,6 +243,13 @@ class OrganizationIntegrations extends AsyncComponent<
     return this.state.appInstalls.find(i => i.app.slug === app.slug);
   };
 
+  getAppInstallStatus = (install: SentryAppInstallation | undefined) => {
+    if (install) {
+      return capitalize(install.status) as 'Installed' | 'Pending';
+    }
+    return 'Not Installed';
+  };
+
   //Returns 0 if uninstalled, 1 if pending, and 2 if installed
   getInstallValue(integration: AppOrProviderOrPlugin) {
     const {integrations} = this.state;
@@ -296,21 +302,30 @@ class OrganizationIntegrations extends AsyncComponent<
   };
   // Rendering
   renderProvider = (provider: IntegrationProvider) => {
+    const {organization} = this.props;
     //find the integration installations for that provider
     const integrations = this.state.integrations.filter(
       i => i.provider.key === provider.key
     );
+
     return (
-      <ProviderRow
+      <IntegrationRow
         key={`row-${provider.key}`}
         data-test-id="integration-row"
-        provider={provider}
-        integrations={integrations}
+        organization={organization}
+        type="firstParty"
+        slug={provider.slug}
+        displayName={provider.name}
+        status={integrations.length ? 'Installed' : 'Not Installed'}
+        publishStatus="published"
+        configurations={integrations.length}
       />
     );
   };
 
   renderPlugin = (plugin: PluginWithProjectList) => {
+    const {organization} = this.props;
+
     const legacyIds = [
       'jira',
       'bitbucket',
@@ -322,17 +337,22 @@ class OrganizationIntegrations extends AsyncComponent<
       'vsts',
     ];
     const isLegacy = legacyIds.includes(plugin.id);
+    const displayName = `${plugin.name} ${!!isLegacy ? '(Legacy)' : ''}`;
     //hide legacy integrations if we don't have any projects with them
     if (isLegacy && !plugin.projectList.length) {
       return null;
     }
     return (
-      <PluginRow
+      <IntegrationRow
         key={`row-plugin-${plugin.id}`}
         data-test-id="integration-row"
-        plugin={plugin}
-        isLegacy={isLegacy}
-        organization={this.props.organization}
+        organization={organization}
+        type="plugin"
+        slug={plugin.slug}
+        displayName={displayName}
+        status={plugin.projectList.length ? 'Installed' : 'Not Installed'}
+        publishStatus="published"
+        configurations={plugin.projectList.length}
       />
     );
   };
@@ -340,14 +360,19 @@ class OrganizationIntegrations extends AsyncComponent<
   //render either an internal or non-internal app
   renderSentryApp = (app: SentryApp) => {
     const {organization} = this.props;
+    const status = this.getAppInstallStatus(this.getAppInstall(app));
 
     return (
-      <IntegrationDirectorySentryAppRow
+      <IntegrationRow
         key={`sentry-app-row-${app.slug}`}
         data-test-id="integration-row"
         organization={organization}
-        install={this.getAppInstall(app)}
-        app={app}
+        type="sentryApp"
+        slug={app.slug}
+        displayName={app.name}
+        status={status}
+        publishStatus={app.status}
+        configurations={0}
       />
     );
   };
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
deleted file mode 100644
index 13810b17f0..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationPluginRow.tsx
+++ /dev/null
@@ -1,92 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-import Link from 'app/components/links/link';
-import {PanelItem} from 'app/components/panels';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import space from 'app/styles/space';
-import {PluginWithProjectList, Organization} from 'app/types';
-import IntegrationStatus from './integrationStatus';
-
-type Props = {
-  plugin: PluginWithProjectList;
-  isLegacy: boolean;
-  organization: Organization;
-};
-
-export default class PluginRow extends React.Component<Props> {
-  get isEnabled() {
-    // It's possible to only have items in projectList that are disabled configs (enabled=false).
-    // But for the purpose of showing things that are installed, that might be OK.
-    return this.props.plugin.projectList.length > 0;
-  }
-
-  get status() {
-    return this.isEnabled ? 'Installed' : 'Not Installed';
-  }
-
-  render() {
-    const {
-      plugin,
-      isLegacy,
-      organization: {slug},
-    } = this.props;
-
-    return (
-      <PanelItem p={0} flexDirection="column" data-test-id={plugin.id}>
-        <FlexContainer>
-          <PluginIcon size={36} pluginId={plugin.id} />
-          <Container>
-            <ProviderName to={`/settings/${slug}/plugins/${plugin.slug}/`}>
-              {`${plugin.name} ${isLegacy ? '(Legacy)' : ''}`}
-            </ProviderName>
-            <ProviderDetails>
-              <IntegrationStatus status={this.status} />
-              {plugin.projectList.length ? (
-                <StyledLink
-                  to={`/settings/${slug}/plugins/${plugin.slug}/?tab=configurations`}
-                >{`${plugin.projectList.length} Configuration${
-                  plugin.projectList.length > 1 ? 's' : ''
-                }`}</StyledLink>
-              ) : null}
-            </ProviderDetails>
-          </Container>
-        </FlexContainer>
-      </PanelItem>
-    );
-  }
-}
-
-const Flex = styled('div')`
-  display: flex;
-`;
-
-const FlexContainer = styled(Flex)`
-  align-items: center;
-  padding: ${space(2)};
-`;
-
-const Container = styled('div')`
-  flex: 1;
-  padding: 0 ${space(2)};
-`;
-
-const ProviderName = styled(Link)`
-  font-weight: bold;
-  color: ${props => props.theme.textColor};
-`;
-
-const ProviderDetails = styled(Flex)`
-  align-items: center;
-  margin-top: 6px;
-  font-size: 0.8em;
-`;
-
-const StyledLink = styled(Link)`
-  color: ${p => p.theme.gray2};
-  &:before {
-    content: '|';
-    color: ${p => p.theme.gray1};
-    margin-right: ${space(0.75)};
-    font-weight: normal;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx
deleted file mode 100644
index 48406c49fa..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationProviderRow.tsx
+++ /dev/null
@@ -1,88 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-import Link from 'app/components/links/link';
-import {PanelItem} from 'app/components/panels';
-import PluginIcon from 'app/plugins/components/pluginIcon';
-import SentryTypes from 'app/sentryTypes';
-import space from 'app/styles/space';
-import {IntegrationProvider, Integration} from 'app/types';
-import IntegrationStatus from './integrationStatus';
-
-type Props = {
-  provider: IntegrationProvider;
-  integrations: Integration[];
-};
-
-export default class ProviderRow extends React.Component<Props> {
-  static propTypes = {
-    provider: PropTypes.object.isRequired,
-    integrations: PropTypes.array.isRequired,
-  };
-
-  static contextTypes = {
-    organization: SentryTypes.Organization,
-  };
-
-  get isEnabled() {
-    return this.props.integrations.length > 0;
-  }
-
-  get status() {
-    return this.isEnabled ? 'Installed' : 'Not Installed';
-  }
-
-  render() {
-    const {provider, integrations} = this.props;
-    const {
-      organization: {slug},
-    } = this.context;
-    return (
-      <PanelItem p={0} flexDirection="column" data-test-id={provider.key}>
-        <Flex style={{alignItems: 'center', padding: '16px'}}>
-          <PluginIcon size={36} pluginId={provider.key} />
-          <div style={{flex: '1', padding: '0 16px'}}>
-            <ProviderName to={`/settings/${slug}/integrations/${provider.key}/`}>
-              {provider.name}
-            </ProviderName>
-            <ProviderDetails>
-              <IntegrationStatus status={this.status} />
-              {integrations.length ? (
-                <StyledLink
-                  to={`/settings/${slug}/integrations/${provider.key}/?tab=configurations`}
-                >{`${integrations.length} Configuration${
-                  integrations.length > 1 ? 's' : ''
-                }`}</StyledLink>
-              ) : null}
-            </ProviderDetails>
-          </div>
-        </Flex>
-      </PanelItem>
-    );
-  }
-}
-
-const Flex = styled('div')`
-  display: flex;
-`;
-
-const ProviderName = styled(Link)`
-  font-weight: bold;
-  color: ${props => props.theme.textColor};
-`;
-
-const ProviderDetails = styled(Flex)`
-  align-items: center;
-  margin-top: 6px;
-  font-size: 0.8em;
-`;
-
-const StyledLink = styled(Link)`
-  color: ${p => p.theme.gray2};
-  &:before {
-    content: '|';
-    color: ${p => p.theme.gray1};
-    margin-right: ${space(0.75)};
-    font-weight: normal;
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
new file mode 100644
index 0000000000..fa70ede970
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRow.tsx
@@ -0,0 +1,120 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Link from 'app/components/links/link';
+import {PanelItem} from 'app/components/panels';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import space from 'app/styles/space';
+import {Organization, SentryApp} from 'app/types';
+import {t} from 'app/locale';
+
+import IntegrationStatus from './integrationStatus';
+
+type Props = {
+  organization: Organization;
+  type: 'plugin' | 'firstParty' | 'sentryApp';
+  slug: string;
+  displayName: string;
+  status: 'Installed' | 'Not Installed' | 'Pending';
+  publishStatus: 'unpublished' | 'published' | 'internal';
+  configurations: number;
+};
+
+const urlMap = {
+  plugin: 'plugins',
+  firstParty: 'integrations',
+  sentryApp: 'sentry-apps',
+};
+
+const IntegrationRow = (props: Props) => {
+  const {
+    organization,
+    type,
+    slug,
+    displayName,
+    status,
+    publishStatus,
+    configurations,
+  } = props;
+
+  const baseUrl = `/settings/${organization.slug}/${urlMap[type]}/${slug}/`;
+
+  const renderDetails = () => {
+    if (type === 'sentryApp') {
+      return publishStatus !== 'published' && <PublishStatus status={publishStatus} />;
+    }
+    return configurations > 0 ? (
+      <StyledLink to={`${baseUrl}?tab=configurations`}>{`${configurations} Configuration${
+        configurations > 1 ? 's' : ''
+      }`}</StyledLink>
+    ) : null;
+  };
+
+  return (
+    <PanelItem p={0} flexDirection="column" data-test-id={slug}>
+      <FlexContainer>
+        <PluginIcon size={36} pluginId={slug} />
+        <Container>
+          <IntegrationName to={baseUrl}>{displayName}</IntegrationName>
+          <IntegrationDetails>
+            <IntegrationStatus status={status} />
+            {renderDetails()}
+          </IntegrationDetails>
+        </Container>
+      </FlexContainer>
+    </PanelItem>
+  );
+};
+
+const FlexContainer = styled('div')`
+  display: flex;
+  align-items: center;
+  padding: ${space(2)};
+`;
+
+const Container = styled('div')`
+  flex: 1;
+  padding: 0 16px;
+`;
+
+const IntegrationName = styled(Link)`
+  font-weight: bold;
+  color: ${props => props.theme.textColor};
+`;
+
+const IntegrationDetails = styled('div')`
+  display: flex;
+  align-items: center;
+  margin-top: 6px;
+  font-size: 0.8em;
+`;
+
+const StyledLink = styled(Link)`
+  color: ${p => p.theme.gray2};
+  &:before {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-right: ${space(0.75)};
+    font-weight: normal;
+  }
+`;
+
+type PublishStatusProps = {status: SentryApp['status']; theme?: any};
+
+const PublishStatus = styled(({status, ...props}: PublishStatusProps) => {
+  return <div {...props}>{t(`${status}`)}</div>;
+})`
+  color: ${(props: PublishStatusProps) =>
+    props.status === 'published' ? props.theme.success : props.theme.gray2};
+  font-weight: light;
+  margin-right: ${space(0.75)};
+  text-transform: capitalize;
+  &:before {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-right: ${space(0.75)};
+    font-weight: normal;
+  }
+`;
+
+export default IntegrationRow;
