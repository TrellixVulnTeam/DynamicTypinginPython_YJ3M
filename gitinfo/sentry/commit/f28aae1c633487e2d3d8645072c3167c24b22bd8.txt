commit f28aae1c633487e2d3d8645072c3167c24b22bd8
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jul 24 16:55:31 2015 +0200

    Add project events view (draft)

diff --git a/src/sentry/static/sentry/app/components/eventRow.jsx b/src/sentry/static/sentry/app/components/eventRow.jsx
new file mode 100644
index 0000000000..b4e3b95096
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/eventRow.jsx
@@ -0,0 +1,69 @@
+var React = require("react");
+var Router = require("react-router");
+
+var EventStore = require("../stores/eventStore");
+var Gravatar = require("./gravatar");
+var TimeSince = require("./timeSince");
+
+var EventRow = React.createClass({
+  propTypes: {
+    id: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      event: EventStore.get(this.props.id)
+    };
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.id != this.props.id) {
+      this.setState({
+        event: EventStore.get(this.props.id)
+      });
+    }
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return false;
+  },
+
+  render() {
+    var event = this.state.event;
+    var linkParams = {
+      eventId: event.id,
+      orgId: this.props.orgSlug,
+      projectId: this.props.projectSlug,
+      groupId: event.groupID
+    };
+
+    return (
+      <tr>
+        <td>
+          <h5>
+            <Router.Link to="groupEventDetails"
+                params={linkParams}>{event.message}</Router.Link>
+          </h5>
+          <small className="tagList">{event.tags.map((tag, tagIdx) => {
+            return <span key={tagIdx}>{tag[0]} = {tag[1]} </span>;
+          })}</small>
+        </td>
+        <td className="event-user table-user-info">
+          {event.user ?
+            <div>
+              <Gravatar email={event.user.email} size={64} className="avatar" />
+              {event.user.email}
+            </div>
+          :
+            <span>&mdash;</span>
+          }
+        </td>
+        <td className="align-right">
+          <TimeSince date={event.dateCreated} />
+        </td>
+      </tr>
+    );
+  }
+});
+
+module.exports = EventRow;
diff --git a/src/sentry/static/sentry/app/components/projectHeader.jsx b/src/sentry/static/sentry/app/components/projectHeader.jsx
index efd4e30b72..076169dae0 100644
--- a/src/sentry/static/sentry/app/components/projectHeader.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader.jsx
@@ -133,6 +133,11 @@ var ProjectHeader = React.createClass({
                     Stream
                   </Router.Link>
                 </li>
+                <li className={navSection == 'events' ? 'active': ''}>
+                  <Router.Link to="projectEvents" params={routeParams}>
+                    Events
+                  </Router.Link>
+                </li>
                 <li className={navSection == 'releases' ? 'active': ''}>
                   <Router.Link to="projectReleases" params={routeParams}>
                     Releases
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 2ec5692cb9..56355788b3 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -15,6 +15,7 @@ var OrganizationDetails = require("./views/organizationDetails");
 var OrganizationStats = require("./views/organizationStats");
 var OrganizationTeams = require("./views/organizationTeams");
 var ProjectDashboard = require("./views/projectDashboard");
+var ProjectEvents = require("./views/projectEvents");
 var ProjectDetails = require("./views/projectDetails");
 var ProjectReleases = require("./views/projectReleases");
 var PropTypes = require("./proptypes");
@@ -36,6 +37,7 @@ var routes = (
       <Route name="projectDetails" path=":projectId/" handler={ProjectDetails}>
         <DefaultRoute name="stream" handler={Stream} />
         <Route name="projectDashboard" path="dashboard/" handler={ProjectDashboard} />
+        <Route name="projectEvents" path="events/" handler={ProjectEvents} />
         <Route name="projectReleases" path="releases/" handler={ProjectReleases} />
         <Route name="releaseDetails" path="releases/:version/" handler={ReleaseDetails}>
           <DefaultRoute name="releaseNewEvents" handler={ReleaseNewEvents} />
diff --git a/src/sentry/static/sentry/app/stores/eventStore.jsx b/src/sentry/static/sentry/app/stores/eventStore.jsx
new file mode 100644
index 0000000000..830a8eaa8e
--- /dev/null
+++ b/src/sentry/static/sentry/app/stores/eventStore.jsx
@@ -0,0 +1,78 @@
+var jQuery = require("jquery");
+var Reflux = require("reflux");
+
+var EventStore = Reflux.createStore({
+  init() {
+    this.reset();
+  },
+
+  reset() {
+    this.items = [];
+  },
+
+  loadInitialData(items) {
+    this.reset();
+
+    var itemIds = new Set();
+    items.forEach((item) => {
+      itemIds.add(item.id);
+      this.items.push(item);
+    });
+
+    this.trigger(itemIds);
+  },
+
+  add(items) {
+    if (!items instanceof Array) {
+      items = [items];
+    }
+
+    var itemsById = {};
+    var itemIds = new Set();
+    items.forEach((item) => {
+      itemsById[item.id] = item;
+      itemIds.add(item.id);
+    });
+
+    items.forEach((item, idx) => {
+      if (itemsById[item.id]) {
+        this.items[idx] = jQuery.extend(true, {}, item, itemsById[item.id]);
+        delete itemsById[item.id];
+      }
+    });
+
+    for (var itemId in itemsById) {
+      this.items.push(itemsById[itemId]);
+    }
+
+    this.trigger(itemIds);
+  },
+
+  remove(itemId) {
+    this.items.forEach((item, idx) => {
+      if (item.id === itemId) {
+        this.items.splice(idx, idx + 1);
+      }
+    });
+
+    this.trigger(new Set([itemId]));
+  },
+
+  get(id) {
+    for (var i = 0; i < this.items.length; i++) {
+      if (this.items[i].id === id) {
+        return this.items[i];
+      }
+    }
+  },
+
+  getAllItemIds() {
+    return this.items.map((item) => item.id);
+  },
+
+  getAllItems() {
+    return this.items;
+  }
+});
+
+module.exports = EventStore;
diff --git a/src/sentry/static/sentry/app/views/projectEvents.jsx b/src/sentry/static/sentry/app/views/projectEvents.jsx
new file mode 100644
index 0000000000..93279ac142
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectEvents.jsx
@@ -0,0 +1,250 @@
+var React = require("react");
+var Reflux = require("reflux");
+var $ = require("jquery");
+var Cookies = require("js-cookie");
+
+var api = require("../api");
+var EventRow = require("../components/eventRow");
+var EventActions = require("./projectEvents/actions");
+var EventStore = require("../stores/eventStore");
+var LoadingError = require("../components/loadingError");
+var LoadingIndicator = require("../components/loadingIndicator");
+var Pagination = require("../components/pagination");
+var RouteMixin = require("../mixins/routeMixin");
+var utils = require("../utils");
+
+var ProjectEvents = React.createClass({
+  mixins: [
+    Reflux.listenTo(EventStore, "onEventChange"),
+    RouteMixin
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func.isRequired
+  },
+
+  getInitialState() {
+    return {
+      eventIds: [],
+      realtimeActive: true,
+      pageLinks: '',
+      loading: true,
+      error: false
+    };
+  },
+
+  shouldComponentUpdate(nextProps, nextState) {
+    return !utils.valueIsEqual(this.state, nextState, true);
+  },
+
+  componentWillMount() {
+    this.props.setProjectNavSection('events');
+
+    this._streamManager = new utils.StreamManager(EventStore);
+    this._poller = new utils.CursorPoller({
+      success: this.onRealtimePoll,
+      endpoint: this.getEventListEndpoint()
+    });
+
+    var realtime = Cookies.get("realtimeActive");
+    if (realtime) {
+      var realtimeActive = realtime === "true";
+      this.setState({
+        realtimeActive: realtimeActive
+      });
+      if (realtimeActive) {
+        this._poller.enable();
+      }
+    }
+
+    this.fetchData();
+  },
+
+  componentWillUnmount() {
+    this._poller.disable();
+    EventStore.reset();
+  },
+
+  routeDidChange() {
+    this._poller.disable();
+    this.fetchData();
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    this._poller.setEndpoint(this.getEventListEndpoint());
+    if (prevState.realtimeActive !== this.state.realtimeActive) {
+      if (this.state.realtimeActive) {
+        this._poller.enable();
+      } else {
+        this._poller.disable();
+      }
+    }
+  },
+
+  fetchData() {
+    EventStore.loadInitialData([]);
+
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    var url = this.getEventListEndpoint();
+
+    api.request(url, {
+      success: (data, _, jqXHR) => {
+        this._streamManager.push(data);
+
+        this.setState({
+          error: false,
+          loading: false,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      },
+      complete: () => {
+        if (this.state.realtimeActive) {
+          this._poller.setEndpoint(url);
+          this._poller.enable();
+        }
+      }
+    });
+  },
+
+  getEventListEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
+    queryParams.limit = 50;
+    var querystring = $.param(queryParams);
+
+    return '/projects/' + params.orgId + '/' + params.projectId + '/events/?' + querystring;
+  },
+
+  onRealtimeChange(realtime) {
+    Cookies.set("realtimeActive", realtime.toString());
+    this.setState({
+      realtimeActive: realtime
+    });
+  },
+
+  onRealtimePoll(data, links) {
+    this._streamManager.unshift(data);
+    if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
+      this.setState({
+        pageLinks: links,
+      });
+    }
+  },
+
+  onEventChange() {
+    var eventIds = this._streamManager.getAllItems().map((item) => item.id);
+    if (!utils.valueIsEqual(eventIds, this.state.eventIds)) {
+      this.setState({
+        eventIds: eventIds
+      });
+    }
+  },
+
+  onPage(cursor) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var queryParams = router.getCurrentQuery();
+    queryParams.cursor = cursor;
+
+    router.transitionTo('events', params, queryParams);
+  },
+
+  transitionTo() {
+    var router = this.context.router;
+    var queryParams = {};
+
+    for (var prop in this.state.filter) {
+      queryParams[prop] = this.state.filter[prop];
+    }
+
+    if (this.state.query !== this.props.defaultQuery) {
+      queryParams.query = this.state.query;
+    }
+
+    if (this.state.statsPeriod !== this.props.defaultStatsPeriod) {
+      queryParams.statsPeriod = this.state.statsPeriod;
+    }
+
+    router.transitionTo('stream', router.getCurrentParams(), queryParams);
+  },
+
+  renderEventNodes(ids) {
+    var params = this.context.router.getCurrentParams();
+    var nodes = ids.map((id) => {
+      return <EventRow key={id} id={id} orgSlug={params.orgId}
+          projectSlug={params.projectId} />;
+    });
+
+    return <table className="event-list">{nodes}</table>;
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation"></span>
+        <p>Sorry, no events match your filters.</p>
+      </div>
+    );
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderBody() {
+    var body;
+
+    if (this.state.loading) {
+      body = this.renderLoading();
+    } else if (this.state.error) {
+      body = (<LoadingError onRetry={this.fetchData} />);
+    } else if (this.state.eventIds.length > 0) {
+      body = this.renderEventNodes(this.state.eventIds);
+    } else {
+      body = this.renderEmpty();
+    }
+
+    return body;
+  },
+
+  render() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+
+    return (
+      <div>
+        <div className="group-header">
+          <EventActions
+            orgId={params.orgId}
+            projectId={params.projectId}
+            onRealtimeChange={this.onRealtimeChange}
+            realtimeActive={this.state.realtimeActive}
+            eventIds={this.state.eventIds} />
+        </div>
+        {this.renderBody()}
+        <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
+      </div>
+    );
+  }
+});
+
+module.exports = ProjectEvents;
diff --git a/src/sentry/static/sentry/app/views/projectEvents/actions.jsx b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
new file mode 100644
index 0000000000..90580bbe2f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectEvents/actions.jsx
@@ -0,0 +1,46 @@
+var React = require("react");
+var Reflux = require("reflux");
+
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+
+var EventActions = React.createClass({
+  mixins: [
+    PureRenderMixin
+  ],
+
+  propTypes: {
+    onRealtimeChange: React.PropTypes.func.isRequired,
+    realtimeActive: React.PropTypes.bool.isRequired
+  },
+
+  getInitialState() {
+    return {
+      datePickerActive: false
+    };
+  },
+
+  onRealtimeChange(event) {
+    this.props.onRealtimeChange(!this.props.realtimeActive);
+  },
+
+  render() {
+    return (
+      <div className="stream-actions row">
+        <div className="stream-actions-left col-md-7 col-sm-8 col-xs-8">
+          <div className="btn-group">
+            <a className="btn btn-default btn-sm hidden-xs realtime-control"
+               onClick={this.onRealtimeChange}>
+              {(this.props.realtimeActive ?
+                <span className="icon icon-pause"></span>
+                :
+                <span className="icon icon-play"></span>
+              )}
+            </a>
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = EventActions;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 563fc575dc..f1fc599ec3 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -413,6 +413,8 @@ urlpatterns += patterns('',
         name='sentry-release-details-all-events'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/dashboard/$', ReactPageView.as_view(),
         name='sentry-dashboard'),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/events/$', ReactPageView.as_view(),
+        name='sentry-events'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', ReactPageView.as_view(),
         name='sentry-stream'),
 
