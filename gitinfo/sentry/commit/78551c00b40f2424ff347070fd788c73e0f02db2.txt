commit 78551c00b40f2424ff347070fd788c73e0f02db2
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Sep 15 23:19:33 2015 -0700

    Added support for customizing plugin configuration.

diff --git a/src/sentry/plugins/base/configuration.py b/src/sentry/plugins/base/configuration.py
new file mode 100644
index 0000000000..34c4c17ecc
--- /dev/null
+++ b/src/sentry/plugins/base/configuration.py
@@ -0,0 +1,89 @@
+from __future__ import absolute_import
+
+import logging
+
+from sentry import options
+from sentry.models import ProjectOption
+
+from django.utils.translation import ugettext as _
+from django.utils.safestring import mark_safe
+from django.template.loader import render_to_string
+from django.core.urlresolvers import reverse
+from django.template import RequestContext
+from django.http import HttpResponseRedirect
+from django.contrib import messages
+
+
+def default_plugin_config(plugin, project, request):
+    NOTSET = object()
+
+    plugin_key = plugin.get_conf_key()
+    if project:
+        form_class = plugin.project_conf_form
+        template = plugin.project_conf_template
+    else:
+        form_class = plugin.site_conf_form
+        template = plugin.site_conf_template
+
+    if form_class is None:
+        return HttpResponseRedirect(reverse(
+            'sentry-manage-project', args=[project.organization.slug, project.slug]))
+
+    test_results = None
+
+    initials = plugin.get_form_initial(project)
+    for field in form_class.base_fields:
+        key = '%s:%s' % (plugin_key, field)
+        if project:
+            value = ProjectOption.objects.get_value(project, key, NOTSET)
+        else:
+            value = options.get(key)
+        if value is not NOTSET:
+            initials[field] = value
+
+    form = form_class(
+        request.POST if request.POST.get('plugin') == plugin.slug else None,
+        initial=initials,
+        prefix=plugin_key
+    )
+    if form.is_valid():
+        if 'action_test' in request.POST and plugin.is_testable():
+            try:
+                test_results = plugin.test_configuration(project)
+            except Exception as exc:
+                if hasattr(exc, 'read') and callable(exc.read):
+                    test_results = '%s\n%s' % (exc, exc.read())
+                else:
+                    logging.exception('Plugin(%s) raised an error during test',
+                                      plugin_key)
+                    test_results = 'There was an internal error with the Plugin'
+            if not test_results:
+                test_results = 'No errors returned'
+        else:
+            for field, value in form.cleaned_data.iteritems():
+                key = '%s:%s' % (plugin_key, field)
+                if project:
+                    ProjectOption.objects.set_value(project, key, value)
+                else:
+                    options.set(key, value)
+
+            messages.add_message(
+                request, messages.SUCCESS,
+                _('Your settings were saved successfully.'))
+            return HttpResponseRedirect(request.path)
+
+    # TODO(mattrobenolt): Reliably determine if a plugin is configured
+    # if hasattr(plugin, 'is_configured'):
+    #     is_configured = plugin.is_configured(project)
+    # else:
+    #     is_configured = True
+    is_configured = True
+
+    return mark_safe(render_to_string(template, {
+        'form': form,
+        'request': request,
+        'plugin': plugin,
+        'plugin_description': plugin.get_description() or '',
+        'plugin_test_results': test_results,
+        'plugin_is_configured': is_configured,
+    }, context_instance=RequestContext(request)))
diff --git a/src/sentry/plugins/base/v1.py b/src/sentry/plugins/base/v1.py
index 081d75c45c..9d978383de 100644
--- a/src/sentry/plugins/base/v1.py
+++ b/src/sentry/plugins/base/v1.py
@@ -18,6 +18,7 @@ from threading import local
 from sentry.auth import access
 from sentry.plugins.base.response import Response
 from sentry.plugins.base.view import PluggableViewMixin
+from sentry.plugins.base.configuration import default_plugin_config
 
 
 class PluginMount(type):
@@ -393,6 +394,10 @@ class IPlugin(local, PluggableViewMixin):
         """
         return hasattr(self, 'test_configuration')
 
+    def configure(self, request, project=None):
+        """Configures the plugin."""
+        return default_plugin_config(self, project, request)
+
 
 class Plugin(IPlugin):
     """
diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index 22e77f8ba5..a1e9b3989d 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -15,6 +15,7 @@ from django.http import HttpResponseRedirect
 from threading import local
 
 from sentry.plugins.base.response import Response
+from sentry.plugins.base.configuration import default_plugin_config
 
 
 class PluginMount(type):
@@ -323,6 +324,10 @@ class IPlugin2(local):
         """
         return []
 
+    def configure(self, project, request):
+        """Configures the plugin."""
+        return default_plugin_config(self, project, request)
+
 
 class Plugin2(IPlugin2):
     """
diff --git a/src/sentry/web/frontend/admin.py b/src/sentry/web/frontend/admin.py
index 2ba28c71f0..15d110ce56 100644
--- a/src/sentry/web/frontend/admin.py
+++ b/src/sentry/web/frontend/admin.py
@@ -19,7 +19,7 @@ from django.core.mail import send_mail
 from django.core.urlresolvers import reverse
 from django.db import transaction
 from django.db.models import Count
-from django.http import HttpResponseRedirect
+from django.http import HttpResponseRedirect, HttpResponse
 from django.utils import timezone
 from django.views.decorators.csrf import csrf_protect
 
@@ -33,7 +33,7 @@ from sentry.web.forms import (
     NewUserForm, ChangeUserForm, RemoveUserForm, TestEmailForm)
 from sentry.web.decorators import requires_admin
 from sentry.web.helpers import (
-    render_to_response, plugin_config, render_to_string)
+    render_to_response, render_to_string)
 
 
 def configure_plugin(request, slug):
@@ -41,9 +41,9 @@ def configure_plugin(request, slug):
     if not plugin.has_site_conf():
         return HttpResponseRedirect(reverse('sentry'))
 
-    action, view = plugin_config(plugin, None, request)
-    if action == 'redirect':
-        return HttpResponseRedirect(request.path)
+    view = plugin.configure(request)
+    if isinstance(view, HttpResponse):
+        return view
 
     return render_to_response('sentry/admin/plugins/configure.html', {
         'plugin': plugin,
diff --git a/src/sentry/web/frontend/project_issue_tracking.py b/src/sentry/web/frontend/project_issue_tracking.py
index cccecf4a81..4e58c3b8cf 100644
--- a/src/sentry/web/frontend/project_issue_tracking.py
+++ b/src/sentry/web/frontend/project_issue_tracking.py
@@ -1,14 +1,13 @@
 from __future__ import absolute_import
 
 from django.contrib import messages
-from django.http import HttpResponseRedirect
+from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 
 from sentry import constants
 from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins, IssueTrackingPlugin
 from sentry.web.frontend.base import ProjectView
-from sentry.web.helpers import plugin_config
 
 
 class ProjectIssueTrackingView(ProjectView):
@@ -54,13 +53,9 @@ class ProjectIssueTrackingView(ProjectView):
 
                 form = plugin.project_conf_form
                 if form is not None:
-                    action, view = plugin_config(plugin, project, request)
-                    if action == 'redirect':
-                        messages.add_message(
-                            request, messages.SUCCESS,
-                            constants.OK_PLUGIN_SAVED.format(name=plugin.get_title()),
-                        )
-                        return HttpResponseRedirect(request.path)
+                    view = plugin.configure(request, project=project)
+                    if isinstance(view, HttpResponse):
+                        return view
                 elif content:
                     enabled_plugins.append((plugin, mark_safe(content)))
                 enabled_plugins.append((plugin, mark_safe(content + view)))
diff --git a/src/sentry/web/frontend/project_notifications.py b/src/sentry/web/frontend/project_notifications.py
index d613b290a9..ea6b18eae0 100644
--- a/src/sentry/web/frontend/project_notifications.py
+++ b/src/sentry/web/frontend/project_notifications.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.conf import settings
 from django.contrib import messages
-from django.http import HttpResponseRedirect
+from django.http import HttpResponseRedirect, HttpResponse
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
@@ -11,7 +11,6 @@ from sentry.models import OrganizationMemberType
 from sentry.plugins import plugins, NotificationPlugin
 from sentry.web.forms.projects import NotificationSettingsForm
 from sentry.web.frontend.base import ProjectView
-from sentry.web.helpers import plugin_config
 
 OK_SETTINGS_SAVED = _('Your settings were saved successfully.')
 
@@ -83,13 +82,9 @@ class ProjectNotificationsView(ProjectView):
 
                 form = plugin.project_conf_form
                 if form is not None:
-                    action, view = plugin_config(plugin, project, request)
-                    if action == 'redirect':
-                        messages.add_message(
-                            request, messages.SUCCESS,
-                            constants.OK_PLUGIN_SAVED.format(name=plugin.get_title()),
-                        )
-                        return HttpResponseRedirect(request.path)
+                    view = plugin.configure(request, project=project)
+                    if isinstance(view, HttpResponse):
+                        return view
                     enabled_plugins.append((plugin, mark_safe(content + view)))
                 elif content:
                     enabled_plugins.append((plugin, mark_safe(content)))
diff --git a/src/sentry/web/frontend/projects/plugins.py b/src/sentry/web/frontend/projects/plugins.py
index 3c4a6eb956..658f26b998 100644
--- a/src/sentry/web/frontend/projects/plugins.py
+++ b/src/sentry/web/frontend/projects/plugins.py
@@ -10,14 +10,14 @@ from __future__ import absolute_import
 from django.contrib import messages
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect
+from django.http import HttpResponse, HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.constants import MEMBER_ADMIN
 from sentry.plugins import plugins
 from sentry.web.decorators import has_access
-from sentry.web.helpers import render_to_response, plugin_config
+from sentry.web.helpers import render_to_response
 
 
 @has_access(MEMBER_ADMIN)
@@ -57,17 +57,9 @@ def configure_project_plugin(request, organization, project, slug):
     if not plugin.can_enable_for_projects():
         return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
 
-    form = plugin.project_conf_form
-    if form is None:
-        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.organization.slug, project.slug]))
-
-    action, view = plugin_config(plugin, project, request)
-    if action == 'redirect':
-        messages.add_message(
-            request, messages.SUCCESS,
-            _('Your settings were saved successfully.'))
-
-        return HttpResponseRedirect(request.path)
+    view = plugin.configure(request, project=project)
+    if isinstance(view, HttpResponse):
+        return view
 
     context = csrf(request)
     context.update({
@@ -81,7 +73,8 @@ def configure_project_plugin(request, organization, project, slug):
         'plugin_is_enabled': plugin.is_enabled(project),
     })
 
-    return render_to_response('sentry/projects/plugins/configure.html', context, request)
+    return render_to_response('sentry/projects/plugins/configure.html',
+                              context, request)
 
 
 @has_access(MEMBER_ADMIN)
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 907db67bc2..1ea87fe2a0 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -13,13 +13,11 @@ from django.conf import settings
 from django.core.urlresolvers import reverse, resolve
 from django.http import HttpResponse
 from django.template import loader, RequestContext, Context
-from django.utils.safestring import mark_safe
 
-from sentry import options
 from sentry.api.serializers.base import serialize
 from sentry.auth import access
 from sentry.constants import EVENTS_PER_PAGE
-from sentry.models import AnonymousUser, Project, Team, ProjectOption
+from sentry.models import AnonymousUser, Project, Team
 
 logger = logging.getLogger('sentry')
 
@@ -160,77 +158,3 @@ def render_to_response(template, context=None, request=None, status=200,
     response.status_code = status
     response['Content-Type'] = content_type
     return response
-
-
-def plugin_config(plugin, project, request):
-    """
-    Configure the plugin site wide.
-
-    Returns a tuple composed of a redirection boolean and the content to
-    be displayed.
-    """
-    NOTSET = object()
-
-    plugin_key = plugin.get_conf_key()
-    if project:
-        form_class = plugin.project_conf_form
-        template = plugin.project_conf_template
-    else:
-        form_class = plugin.site_conf_form
-        template = plugin.site_conf_template
-
-    test_results = None
-
-    initials = plugin.get_form_initial(project)
-    for field in form_class.base_fields:
-        key = '%s:%s' % (plugin_key, field)
-        if project:
-            value = ProjectOption.objects.get_value(project, key, NOTSET)
-        else:
-            value = options.get(key)
-        if value is not NOTSET:
-            initials[field] = value
-
-    form = form_class(
-        request.POST if request.POST.get('plugin') == plugin.slug else None,
-        initial=initials,
-        prefix=plugin_key
-    )
-    if form.is_valid():
-        if 'action_test' in request.POST and plugin.is_testable():
-            try:
-                test_results = plugin.test_configuration(project)
-            except Exception as exc:
-                if hasattr(exc, 'read') and callable(exc.read):
-                    test_results = '%s\n%s' % (exc, exc.read())
-                else:
-                    logging.exception('Plugin(%s) raised an error during test', plugin_key)
-                    test_results = 'There was an internal error with the Plugin'
-            if not test_results:
-                test_results = 'No errors returned'
-        else:
-            for field, value in form.cleaned_data.iteritems():
-                key = '%s:%s' % (plugin_key, field)
-                if project:
-                    ProjectOption.objects.set_value(project, key, value)
-                else:
-                    options.set(key, value)
-
-            return ('redirect', None)
-
-    # TODO(mattrobenolt): Reliably determine if a plugin is configured
-    # if hasattr(plugin, 'is_configured'):
-    #     is_configured = plugin.is_configured(project)
-    # else:
-    #     is_configured = True
-    is_configured = True
-
-    from django.template.loader import render_to_string
-    return ('display', mark_safe(render_to_string(template, {
-        'form': form,
-        'request': request,
-        'plugin': plugin,
-        'plugin_description': plugin.get_description() or '',
-        'plugin_test_results': test_results,
-        'plugin_is_configured': is_configured,
-    }, context_instance=RequestContext(request))))
