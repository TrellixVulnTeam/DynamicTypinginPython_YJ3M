commit a4b9a727ed09c0c7de807020817f9f21318aa9d2
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 13 16:32:10 2015 -0600

    Move login view to CBV

diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index fe295ab49a..3aaecacd46 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -28,47 +28,12 @@ from sentry.web.decorators import login_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RegistrationForm, RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm, AuthenticationForm)
+    ProjectEmailOptionsForm)
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers, get_login_redirect
 from sentry.utils.safe import safe_execute
 
 
-@csrf_protect
-@never_cache
-def login(request):
-    from django.conf import settings
-
-    if request.user.is_authenticated():
-        return login_redirect(request)
-
-    form = AuthenticationForm(request, request.POST or None,
-                              captcha=bool(request.session.get('needs_captcha')))
-    if form.is_valid():
-        login_user(request, form.get_user())
-
-        request.session.pop('needs_captcha', None)
-
-        return login_redirect(request)
-
-    elif request.POST and not request.session.get('needs_captcha'):
-        request.session['needs_captcha'] = 1
-        form = AuthenticationForm(request, request.POST or None, captcha=True)
-        form.errors.pop('captcha', None)
-
-    request.session.set_test_cookie()
-
-    context = csrf(request)
-    context.update({
-        'form': form,
-        'next': request.session.get('_next'),
-        'CAN_REGISTER': settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register'),
-        'AUTH_PROVIDERS': get_auth_providers(),
-        'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
-    })
-    return render_to_response('sentry/login.html', context, request)
-
-
 @csrf_protect
 @never_cache
 @transaction.atomic
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
new file mode 100644
index 0000000000..e5e0f0d33c
--- /dev/null
+++ b/src/sentry/web/frontend/auth_login.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import, print_function
+
+from django.contrib.auth import login
+from django.conf import settings
+
+from sentry.web.forms.accounts import AuthenticationForm
+from sentry.web.frontend.base import BaseView
+from sentry.utils.auth import get_auth_providers, get_login_redirect
+
+
+class AuthLoginView(BaseView):
+    auth_required = False
+
+    def handle(self, request):
+        if request.user.is_authenticated():
+            return self.redirect(get_login_redirect(request))
+
+        form = AuthenticationForm(request, request.POST or None,
+                                  captcha=bool(request.session.get('needs_captcha')))
+        if form.is_valid():
+            login(request, form.get_user())
+
+            request.session.pop('needs_captcha', None)
+
+            return self.redirect(get_login_redirect(request))
+
+        elif request.POST and not request.session.get('needs_captcha'):
+            request.session['needs_captcha'] = 1
+            form = AuthenticationForm(request, request.POST or None, captcha=True)
+            form.errors.pop('captcha', None)
+
+        request.session.set_test_cookie()
+
+        context = {
+            'form': form,
+            'next': request.session.get('_next'),
+            'CAN_REGISTER': settings.SENTRY_ALLOW_REGISTRATION or request.session.get('can_register'),
+            'AUTH_PROVIDERS': get_auth_providers(),
+            'SOCIAL_AUTH_CREATE_USERS': settings.SOCIAL_AUTH_CREATE_USERS,
+        }
+        return self.respond('sentry/login.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index a64fa8002e..5f4792d998 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -38,6 +38,7 @@ __all__ = ('urlpatterns',)
 
 from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInviteView
 from sentry.web.frontend.access_group_migration import AccessGroupMigrationView
+from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.home import HomeView
 from sentry.web.frontend.organization_audit_log import OrganizationAuditLogView
 from sentry.web.frontend.organization_home import OrganizationHomeView
@@ -96,7 +97,7 @@ urlpatterns += patterns('',
     url(r'^api/0/', include('sentry.api.urls')),
 
     # Account
-    url(r'^login/$', accounts.login,
+    url(r'^login/$', AuthLoginView.as_view(),
         name='sentry-login'),
     url(r'^login-redirect/$', accounts.login_redirect,
         name='sentry-login-redirect'),
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index dfba1c666f..e45ba0273e 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -12,41 +12,6 @@ from sentry.models import UserOption, LostPasswordHash, User
 from sentry.testutils import TestCase
 
 
-class LoginTest(TestCase):
-    @fixture
-    def path(self):
-        return reverse('sentry-login')
-
-    def test_renders_correct_template(self):
-        resp = self.client.get(self.path)
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed('sentry/login.html')
-
-    def test_invalid_password(self):
-        # load it once for test cookie
-        self.client.get(self.path)
-
-        resp = self.client.post(self.path, {
-            'username': self.user.username,
-            'password': 'bizbar',
-        })
-        assert resp.status_code == 200
-        assert resp.context['form'].errors['__all__'] == [
-            u'Please enter a correct username and password. Note that both fields may be case-sensitive.'
-        ]
-
-    def test_valid_credentials(self):
-        # load it once for test cookie
-        self.client.get(self.path)
-
-        resp = self.client.post(self.path, {
-            'username': self.user.username,
-            'password': 'admin',
-        })
-        assert resp.status_code == 302
-
-
 class RegisterTest(TestCase):
     @fixture
     def path(self):
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
new file mode 100644
index 0000000000..f3fd60a741
--- /dev/null
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -0,0 +1,41 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import TestCase
+
+
+class AuthLoginTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-login')
+
+    def test_renders_correct_template(self):
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/login.html')
+
+    def test_invalid_password(self):
+        # load it once for test cookie
+        self.client.get(self.path)
+
+        resp = self.client.post(self.path, {
+            'username': self.user.username,
+            'password': 'bizbar',
+        })
+        assert resp.status_code == 200
+        assert resp.context['form'].errors['__all__'] == [
+            u'Please enter a correct username and password. Note that both fields may be case-sensitive.'
+        ]
+
+    def test_valid_credentials(self):
+        # load it once for test cookie
+        self.client.get(self.path)
+
+        resp = self.client.post(self.path, {
+            'username': self.user.username,
+            'password': 'admin',
+        })
+        assert resp.status_code == 302
