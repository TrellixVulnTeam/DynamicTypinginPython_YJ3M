commit 774f0ea533e8d3f5270e7b22703d7dad49d4db0a
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Mar 29 18:54:49 2016 -0700

    Expand install wizard to prompt SMTP options

diff --git a/src/sentry/api/endpoints/system_options.py b/src/sentry/api/endpoints/system_options.py
index ac802840ca..1945af9182 100644
--- a/src/sentry/api/endpoints/system_options.py
+++ b/src/sentry/api/endpoints/system_options.py
@@ -36,6 +36,9 @@ class SystemOptionsEndpoint(Endpoint):
                     # We're disabled if the disk has taken priority
                     'disabled': diskPriority,
                     'disabledReason': 'diskPriority' if diskPriority else None,
+                    'isSet': options.isset(k.name),
+                    'allowEmpty': bool(k.flags & options.FLAG_ALLOW_EMPTY),
+
                 }
             }
 
@@ -47,10 +50,7 @@ class SystemOptionsEndpoint(Endpoint):
             if v and isinstance(v, basestring):
                 v = v.strip()
             try:
-                if not v:
-                    options.delete(k)
-                else:
-                    options.set(k, v)
+                option = options.lookup_key(k)
             except options.UnknownOption:
                 # TODO(dcramer): unify API errors
                 return Response({
@@ -59,6 +59,12 @@ class SystemOptionsEndpoint(Endpoint):
                         'option': k,
                     },
                 }, status=400)
+
+            try:
+                if not (option.flags & options.FLAG_ALLOW_EMPTY) and not v:
+                    options.delete(k)
+                else:
+                    options.set(k, v)
             except TypeError as e:
                 return Response({
                     'error': 'invalid_type',
diff --git a/src/sentry/options/__init__.py b/src/sentry/options/__init__.py
index 21d1491b6c..f8e28f6996 100644
--- a/src/sentry/options/__init__.py
+++ b/src/sentry/options/__init__.py
@@ -11,11 +11,11 @@ from .store import OptionsStore
 from .manager import OptionsManager
 from .manager import (  # NOQA
     DEFAULT_FLAGS, FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_STOREONLY,
-    FLAG_REQUIRED, FLAG_PRIORITIZE_DISK, UnknownOption
+    FLAG_REQUIRED, FLAG_PRIORITIZE_DISK, FLAG_ALLOW_EMPTY, UnknownOption
 )
 
 __all__ = (
-    'get', 'set', 'delete', 'register', 'UnknownOption',
+    'get', 'set', 'delete', 'register', 'isset', 'lookup_key', 'UnknownOption',
 )
 
 # See notes in ``runner.initializer`` regarding lazy cache configuration.
@@ -32,6 +32,7 @@ register = default_manager.register
 all = default_manager.all
 filter = default_manager.filter
 isset = default_manager.isset
+lookup_key = default_manager.lookup_key
 
 
 def load_defaults():
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index f2daa09fb2..f90781a17c 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -8,7 +8,8 @@ sentry.options.defaults
 from __future__ import absolute_import, print_function
 
 from sentry.options import (
-    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_PRIORITIZE_DISK, FLAG_REQUIRED, register
+    FLAG_IMMUTABLE, FLAG_NOSTORE, FLAG_PRIORITIZE_DISK, FLAG_REQUIRED, FLAG_ALLOW_EMPTY,
+    register,
 )
 from sentry.utils.types import Dict, String
 
@@ -20,7 +21,7 @@ from sentry.utils.types import Dict, String
 register('system.admin-email', flags=FLAG_REQUIRED)
 register('system.databases', type=Dict, flags=FLAG_NOSTORE)
 # register('system.debug', default=False, flags=FLAG_NOSTORE)
-register('system.rate-limit', default=0, flags=FLAG_PRIORITIZE_DISK)
+register('system.rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('system.secret-key', flags=FLAG_NOSTORE)
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
 register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
@@ -50,12 +51,12 @@ register('dsym.cache-path', type=String, default='/tmp/sentry-dsym-cache')
 
 # Mail
 register('mail.backend', default='smtp', flags=FLAG_NOSTORE)
-register('mail.host', default='localhost', flags=FLAG_PRIORITIZE_DISK)
-register('mail.port', default=25, flags=FLAG_PRIORITIZE_DISK)
-register('mail.username', flags=FLAG_PRIORITIZE_DISK)
-register('mail.password', flags=FLAG_PRIORITIZE_DISK)
-register('mail.use-tls', default=False, flags=FLAG_PRIORITIZE_DISK)
+register('mail.host', default='localhost', flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
+register('mail.port', default=25, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
+register('mail.username', flags=FLAG_REQUIRED | FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+register('mail.password', flags=FLAG_REQUIRED | FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+register('mail.use-tls', default=False, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
 register('mail.subject-prefix', default='[Sentry] ', flags=FLAG_PRIORITIZE_DISK)
-register('mail.from', default='root@localhost', flags=FLAG_PRIORITIZE_DISK)
+register('mail.from', default='root@localhost', flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
 # register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
 register('mail.list-namespace', type=String, default='localhost', flags=FLAG_NOSTORE)
diff --git a/src/sentry/options/manager.py b/src/sentry/options/manager.py
index 82d66ad1de..ea02d1c40c 100644
--- a/src/sentry/options/manager.py
+++ b/src/sentry/options/manager.py
@@ -36,6 +36,8 @@ FLAG_REQUIRED = 1 << 4
 # If the value is defined on disk, use that and don't attempt to fetch from db.
 # This also make the value immutible to changes from web UI.
 FLAG_PRIORITIZE_DISK = 1 << 5
+# If the value is allowed to be empty to be considered valid
+FLAG_ALLOW_EMPTY = 1 << 6
 
 # How long will a cache key exist in local memory before being evicted
 DEFAULT_KEY_TTL = 10
@@ -221,6 +223,11 @@ class OptionsManager(object):
             default = type
             default_value = default()
 
+        # Boolean values need to be set to ALLOW_EMPTY becaues otherwise, "False"
+        # would be treated as a not valid value
+        if default_value is True or default_value is False:
+            flags |= FLAG_ALLOW_EMPTY
+
         settings.SENTRY_DEFAULT_OPTIONS[key] = default_value
 
         self.registry[key] = self.store.make_key(key, default, type, flags, ttl, grace)
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
new file mode 100644
index 0000000000..1424241948
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -0,0 +1,27 @@
+import React from 'react';
+import InputField from './inputField';
+
+export default class BooleanField extends InputField {
+  onChange(e) {
+    this.setState({
+      value: e.target.checked,
+    }, () => {
+      this.props.onChange(this.state.value);
+    });
+  }
+
+  getField() {
+    return (
+      <input id={this.getId()}
+          type={this.getType()}
+          style={{marginLeft: '10px'}}
+          onChange={this.onChange}
+          disabled={this.props.disabled}
+          defaultChecked={this.state.value} />
+    );
+  }
+
+  getType() {
+    return 'checkbox';
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 08bc8fee3b..6740b8c76e 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -2,3 +2,4 @@ export {default as CheckboxField} from './checkboxField';
 export {default as Form} from './form';
 export {default as EmailField} from './emailField';
 export {default as TextField} from './textField';
+export {default as BooleanField} from './booleanField';
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index ab6a325159..c03a88b156 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -7,9 +7,11 @@ export default class InputField extends FormField {
   constructor(props) {
     super(props);
 
-    this.state.value = (
-      props.value !== '' ? props.value : (props.defaultValue || '')
-    );
+    this.state.value = this.valueFromProps(props);
+  }
+
+  valueFromProps(props) {
+    return props.value !== '' ? props.value : (props.defaultValue || '');
   }
 
   // XXX(dcramer): this comes from TooltipMixin
@@ -40,6 +42,22 @@ export default class InputField extends FormField {
     });
   }
 
+  getId() {
+    return 'wizard-' + this.props.name;
+  }
+
+  getField() {
+    return (
+      <input id={this.getId()}
+          type={this.getType()}
+          className="form-control"
+          placeholder={this.props.placeholder}
+          onChange={this.onChange}
+          disabled={this.props.disabled}
+          value={this.state.value} />
+    );
+  }
+
   render() {
     let className = 'control-group';
     if (this.props.error) {
@@ -48,18 +66,13 @@ export default class InputField extends FormField {
     return (
       <div className={className}>
         <div className="controls">
-          <label className="control-label">{this.props.label}</label>
+          <label htmlFor={this.getId()} className="control-label">{this.props.label}</label>
           {this.props.disabled && this.props.disabledReason &&
             <span className="disabled-indicator tip" title={this.props.disabledReason}>
               <span className="icon-question" />
             </span>
           }
-          <input type={this.getType()}
-                 className="form-control"
-                 placeholder={this.props.placeholder}
-                 onChange={this.onChange.bind(this)}
-                 disabled={this.props.disabled}
-                 value={this.state.value} />
+          {this.getField()}
           {this.props.help &&
             <p className="help-block">{this.props.help}</p>
           }
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 4d31465fdd..a1b21cef4d 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -1,36 +1,97 @@
 import React from 'react';
+import _ from 'underscore';
 import ConfigStore from './stores/configStore';
 import {t} from './locale';
-import {EmailField, TextField} from './components/forms';
+import {EmailField, TextField, BooleanField} from './components/forms';
 
-const definitions = {
-  'system.url-prefix': {
+// This are ordered based on their display order visually
+const sections = [
+  {
+    key: 'system',
+  },
+  {
+    key: 'mail',
+    heading: t('Outbound email'),
+  }
+];
+
+// This are ordered based on their display order visually
+const definitions = [
+  {
+    key: 'system.url-prefix',
     label: t('Root URL'),
     placeholder: 'https://sentry.example.com',
     help: t('The root web address which is used to communicate with the Sentry backend.'),
     defaultValue: () => `${document.location.protocol}//${document.location.host}`,
   },
-  'system.admin-email': {
+  {
+    key: 'system.admin-email',
     label: t('Admin Email'),
     placeholder: 'admin@example.com',
     help: t('The technical contact for this Sentry installation.'),
-    // TODO(dcramer): this shoudl not be hardcoded to a component
+    // TODO(dcramer): this should not be hardcoded to a component
     component: EmailField,
     defaultValue: () => ConfigStore.get('user').email,
   },
-  'system.rate-limit': {
+  {
+    key: 'system.rate-limit',
     label: t('Rate Limit'),
     placeholder: 'e.g. 500',
     help: t('The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'),
   },
-};
+  {
+    key: 'mail.from',
+    label: t('Email From'),
+    component: EmailField,
+    defaultValue: () => `sentry@${document.location.hostname}`,
+    help: t('Email address to be used in From for all outbound email.')
+  },
+  {
+    key: 'mail.host',
+    label: t('SMTP Host'),
+    placeholder: 'localhost',
+    defaultValue: () => 'localhost',
+  },
+  {
+    key: 'mail.port',
+    label: t('SMTP Port'),
+    placeholder: '25',
+    defaultValue: () => '25',
+  },
+  {
+    key: 'mail.username',
+    label: t('SMTP Username'),
+    defaultValue: () => '',
+  },
+  {
+    key: 'mail.password',
+    label: t('SMTP Password'),
+    // TODO(mattrobenolt): We don't want to use a real password field unless
+    // there's a way to reveal it. Without being able to see the password, it's
+    // impossible to confirm if it's right.
+    // component: PasswordField,
+    defaultValue: () => '',
+  },
+  {
+    key: 'mail.use-tls',
+    label: t('Use TLS?'),
+    component: BooleanField,
+    defaultValue: () => false,
+  },
+];
+
+const definitionsMap = _.indexBy(definitions, 'key');
 
 const disabledReasons = {
   diskPriority: 'This setting is defined in config.yml and may not be changed via the web UI.',
 };
 
 export function getOption(option) {
-  return definitions[option];
+  return definitionsMap[option];
+}
+
+function optionsForSection(section) {
+  return definitions.filter(option => option.key.split('.')[0] === section.key);
 }
 
 export function getOptionField(option, onChange, value, field) {
@@ -38,6 +99,7 @@ export function getOptionField(option, onChange, value, field) {
   let Field = meta.component || TextField;
   return (
     <Field
+        name={option}
         key={option}
         label={meta.label}
         defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
@@ -51,4 +113,30 @@ export function getOptionField(option, onChange, value, field) {
   );
 }
 
-export default definitions;
+function getSectionFieldSet(section, fields) {
+  return (
+    <fieldset key={section.key}>
+      {section.heading && <legend>{section.heading}</legend>}
+      {fields}
+    </fieldset>
+  );
+}
+
+export function getForm(fields) {
+  // fields is a object mapping key name to Fields, so the goal is to split
+  // them up into multiple sections, and spit out fieldsets with a grouping of
+  // all fields, in the right order, under their section.
+  let sets = [];
+  for (let section of sections) {
+    let set = [];
+    for (let option of optionsForSection(section)) {
+      if (fields[option.key]) {
+        set.push(fields[option.key]);
+      }
+    }
+    if (set.length) {
+      sets.push(getSectionFieldSet(section, set));
+    }
+  }
+  return sets;
+}
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index cfe852e64c..a4eaeb8a22 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -7,7 +7,7 @@ import ApiMixin from '../mixins/apiMixin';
 import ConfigStore from '../stores/configStore';
 import IndicatorStore from '../stores/indicatorStore';
 import LoadingIndicator from '../components/loadingIndicator';
-import {getOption, getOptionField} from '../options';
+import {getOption, getOptionField, getForm} from '../options';
 
 const InstallWizardSettings = React.createClass({
   propTypes: {
@@ -21,8 +21,7 @@ const InstallWizardSettings = React.createClass({
     let requiredOptions = Object.keys(_.pick(options, (option) => {
       return option.field.required && !option.field.disabled;
     }));
-    let missingOptions = new Set(requiredOptions.filter(option => !options[option].value));
-    let fields = [];
+    let missingOptions = new Set(requiredOptions.filter(option => !options[option].field.isSet));
     // This is to handle the initial installation case.
     // Even if all options are filled out, we want to prompt to confirm
     // them. This is a bit of a hack because we're assuming that
@@ -31,12 +30,17 @@ const InstallWizardSettings = React.createClass({
     if (missingOptions.size === 0) {
       missingOptions = new Set(requiredOptions);
     }
+
+    // A mapping of option name to Field object
+    let fields = {};
+
     for (let key of missingOptions) {
       let option = options[key];
-      if (!option.value) {
-        option.value = getOption(key).defaultValue();
+      if (!option.field.isSet) {
+        let o = getOption(key);
+        option.value = o.defaultValue ? o.defaultValue() : '';
       }
-      fields.push(getOptionField(key, this.onFieldChange.bind(this, key), option.value, option.field));
+      fields[key] = getOptionField(key, this.onFieldChange.bind(this, key), option.value, option.field);
       // options is used for submitting to the server, and we dont submit values
       // that are deleted
       if (option.field.disabled) {
@@ -66,7 +70,7 @@ const InstallWizardSettings = React.createClass({
 
   render() {
     let {fields, required, options} = this.state;
-    let formValid = !required.filter(option => !options[option].value).length;
+    let formValid = !required.filter(option => !options[option].field.allowEmpty && !options[option].value).length;
     let disabled = !formValid || this.props.formDisabled;
 
     return (
@@ -74,7 +78,7 @@ const InstallWizardSettings = React.createClass({
         <p>Welcome to Sentry, yo! Complete setup by filling out the required
           configuration.</p>
 
-        {fields}
+        {getForm(fields)}
 
         <div className="form-actions" style={{marginTop: 25}}>
           <button className="btn btn-primary"
diff --git a/src/sentry/static/sentry/less/setup-wizard.less b/src/sentry/static/sentry/less/setup-wizard.less
index 4a26512800..9d2bdbfc4e 100644
--- a/src/sentry/static/sentry/less/setup-wizard.less
+++ b/src/sentry/static/sentry/less/setup-wizard.less
@@ -5,7 +5,8 @@
 
 body.install-wizard {
   #gradient > .horizontal(#9f73c3 , #6875be);
-  height: 100%;
+
+  background-repeat: repeat-y;
 
   .pattern {
     position: fixed;
@@ -28,10 +29,10 @@ body.install-wizard {
   border-radius: 4px;
   box-shadow: 0 5px 30px rgba(0,0,0, .3);
   position: absolute;
-  top: 50%;
+  top: 50px;
   left: 50%;
   margin-left: -300px;
-  margin-top: -250px;
+  margin-bottom: 50px;
 
   h1 {
     .clearfix;
diff --git a/src/sentry/utils/types.py b/src/sentry/utils/types.py
index 18cc56bb7c..0a54f4f666 100644
--- a/src/sentry/utils/types.py
+++ b/src/sentry/utils/types.py
@@ -73,9 +73,9 @@ class BoolType(Type):
 
     def convert(self, value):
         value = value.lower()
-        if value in ('y', 'yes', 't', 'true', '1'):
+        if value in ('y', 'yes', 't', 'true', '1', 'on'):
             return True
-        if value in ('n', 'no', 'f', 'false', '0'):
+        if value in ('n', 'no', 'f', 'false', '0', 'off'):
             return False
 
 
diff --git a/tests/sentry/utils/test_types.py b/tests/sentry/utils/test_types.py
index e487325eca..d00620dd3d 100644
--- a/tests/sentry/utils/test_types.py
+++ b/tests/sentry/utils/test_types.py
@@ -26,12 +26,14 @@ class OptionsTypesTest(TestCase):
         assert Bool('t') is True
         assert Bool('true') is True
         assert Bool('1') is True
+        assert Bool('on') is True
         assert Bool(False) is False
         assert Bool('n') is False
         assert Bool('NO') is False
         assert Bool('f') is False
         assert Bool('false') is False
         assert Bool('0') is False
+        assert Bool('off') is False
         assert Bool() is False
         assert Bool.test(None) is False
         assert Bool(True) is True
