commit 10ff343bed45f37e3ddd9705fe0e697feed6f8c5
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Thu Sep 24 15:36:57 2015 -0700

    Add blacklisted_ips to form

diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 15217cd5d2..5c121008f2 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -70,6 +70,7 @@
         {% endwith %}
         {{ form.scrape_javascript|as_crispy_field }}
         {{ form.token|as_crispy_field }}
+        {{ form.blacklisted_ips|as_crispy_field }}
       </div>
     </div>
 
diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index 6755b27d12..0c6e490739 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -8,6 +8,7 @@ sentry.web.forms.fields
 from __future__ import absolute_import
 
 import six
+from ipaddr import IPNetwork
 
 from django.core.validators import URLValidator
 from django.forms.widgets import RadioFieldRenderer, TextInput, Widget
@@ -146,3 +147,26 @@ class OriginsField(CharField):
             return False
 
         return True
+
+
+class IPNetworksField(CharField):
+    widget = Textarea(
+        attrs={
+            'placeholder': mark_safe(_('e.g. 127.0.0.1 or 10.0.0.0/8')),
+            'class': 'span8',
+        },
+    )
+
+    def clean(self, value):
+        if not value:
+            return None
+        value = value.strip()
+        if not value:
+            return None
+        values = filter(bool, (v.strip() for v in value.split('\n')))
+        for value in values:
+            try:
+                IPNetwork(value)
+            except ValueError:
+                raise ValidationError('%r is not an acceptable value' % value)
+        return values
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index e8c4624c29..2f2e91073d 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -13,7 +13,7 @@ from sentry.models import (
 )
 from sentry.permissions import can_remove_project
 from sentry.web.forms.fields import (
-    CustomTypedChoiceField, RangeField, OriginsField
+    CustomTypedChoiceField, RangeField, OriginsField, IPNetworksField,
 )
 from sentry.web.frontend.base import ProjectView
 
@@ -57,6 +57,7 @@ class EditProjectForm(forms.ModelForm):
         help_text=_('Allow Sentry to scrape missing JavaScript source context when possible.'),
         required=False,
     )
+    blacklisted_ips = IPNetworksField(label=_('Blacklisted IP Addresses'), required=False)
 
     class Meta:
         fields = ('name', 'team', 'slug')
@@ -166,13 +167,14 @@ class ProjectSettingsView(ProjectView):
         return EditProjectForm(
             request, organization, team_list, request.POST or None,
             instance=project, initial={
-                'origins': '\n'.join(project.get_option('sentry:origins', '*') or []),
+                'origins': '\n'.join(project.get_option('sentry:origins', ['*'])),
                 'token': security_token,
                 'resolve_age': int(project.get_option('sentry:resolve_age', 0)),
                 'scrub_data': bool(project.get_option('sentry:scrub_data', True)),
                 'sensitive_fields': '\n'.join(project.get_option('sentry:sensitive_fields', None) or []),
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
                 'scrape_javascript': bool(project.get_option('sentry:scrape_javascript', True)),
+                'blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
             },
         )
 
@@ -182,7 +184,7 @@ class ProjectSettingsView(ProjectView):
         if form.is_valid():
             project = form.save()
             for opt in ('origins', 'resolve_age', 'scrub_data', 'sensitive_fields',
-                        'scrape_javascript', 'scrub_ip_address', 'token'):
+                        'scrape_javascript', 'scrub_ip_address', 'token', 'blacklisted_ips'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
                     project.delete_option('sentry:%s' % (opt,))
