commit a7e996dfd11dcb50828883ccb877cf73b6572e41
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Oct 3 13:48:16 2017 -0700

    ref(redis): Wrap redis cluster initialization in a SLO

diff --git a/src/sentry/utils/redis.py b/src/sentry/utils/redis.py
index a9bf4d37d5..81de6964db 100644
--- a/src/sentry/utils/redis.py
+++ b/src/sentry/utils/redis.py
@@ -8,11 +8,11 @@ import six
 from threading import Lock
 
 import rb
+from django.utils.functional import SimpleLazyObject
 from pkg_resources import resource_string
 from redis.client import Script
 from redis.connection import ConnectionPool
 from redis.exceptions import ConnectionError, BusyLoadingError
-from rediscluster.exceptions import RedisClusterException
 from rediscluster import StrictRedisCluster
 
 from sentry import options
@@ -103,13 +103,12 @@ class _RedisCluster(object):
         hosts = config.get('hosts')
         hosts = hosts.values() if isinstance(hosts, dict) else hosts
 
-        # Redis cluster does not wait to attempt to connect, we don't want the
-        # application to fail to boot because of this, raise a KeyError
-        try:
+        # Redis cluster does not wait to attempt to connect. We'd prefer to not
+        # make TCP connections on boot. Wrap the client in a lazy proxy object.
+        def cluster_factory():
             return RetryingStrictRedisCluster(startup_nodes=hosts, decode_responses=True)
-        except RedisClusterException:
-            logger.warning('Failed to connect to Redis Cluster', exc_info=True)
-            raise KeyError('Redis Cluster could not be initalized')
+
+        return SimpleLazyObject(cluster_factory)
 
     def __str__(self):
         return 'Redis Cluster'
diff --git a/tests/sentry/utils/test_redis.py b/tests/sentry/utils/test_redis.py
index 75b821d3f9..44057715d8 100644
--- a/tests/sentry/utils/test_redis.py
+++ b/tests/sentry/utils/test_redis.py
@@ -5,8 +5,6 @@ import logging
 import mock
 import pytest
 
-from rediscluster.exceptions import RedisClusterException
-
 from sentry.exceptions import InvalidConfiguration
 from sentry.testutils.cases import TestCase
 from sentry.utils.redis import (
@@ -47,8 +45,6 @@ make_manager = functools.partial(
     },
 )
 
-rc_exception = RedisClusterException('Failed to connect')
-
 
 class ClusterManagerTestCase(TestCase):
     def test_get(self):
@@ -62,15 +58,14 @@ class ClusterManagerTestCase(TestCase):
     @mock.patch('sentry.utils.redis.RetryingStrictRedisCluster')
     def test_specific_cluster(self, cluster):
         manager = make_manager(cluster_type=_RedisCluster)
-        assert manager.get('baz') is cluster.return_value
-        with pytest.raises(KeyError):
-            manager.get('foo')
+        slo = manager.get('baz')
+
+        # We wrap the cluster in a Simple Lazy Object, force creation of the
+        # object to verify it's correct.
+        assert slo._setupfunc() is cluster.return_value
 
-    @mock.patch('sentry.utils.redis.RetryingStrictRedisCluster', side_effect=rc_exception)
-    def test_failed_redis_cluster(self, cluster):
-        manager = make_manager(cluster_type=_RedisCluster)
         with pytest.raises(KeyError):
-            manager.get('baz')
+            manager.get('foo')
 
 
 def test_get_cluster_from_options():
