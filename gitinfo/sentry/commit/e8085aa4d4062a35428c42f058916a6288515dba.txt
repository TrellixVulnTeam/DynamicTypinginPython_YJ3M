commit e8085aa4d4062a35428c42f058916a6288515dba
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Dec 18 10:25:34 2019 +0100

    fix(ui): Show symbolicator warning/error hints only on <uknown> function (#16127)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index b24425aef0..f9e9d333ed 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -430,21 +430,24 @@ export class Frame extends React.Component {
       return [t('No function name was supplied by the client SDK.'), warningType];
     }
 
-    switch (symbolicatorStatus) {
-      case SymbolicatorStatus.MISSING_SYMBOL:
-        return [t('The symbol was not found within the debug file.'), warningType];
-      case SymbolicatorStatus.UNKNOWN_IMAGE:
-        return [t('No image is specified for the address of the frame.'), warningType];
-      case SymbolicatorStatus.MISSING:
-        return [
-          t('The debug file could not be retrieved from any of the sources.'),
-          errorType,
-        ];
-      case SymbolicatorStatus.MALFORMED:
-        return [t('The retrieved debug file could not be processed.'), errorType];
-      default:
-        return [null, null];
+    if (func === '<unknown>') {
+      switch (symbolicatorStatus) {
+        case SymbolicatorStatus.MISSING_SYMBOL:
+          return [t('The symbol was not found within the debug file.'), warningType];
+        case SymbolicatorStatus.UNKNOWN_IMAGE:
+          return [t('No image is specified for the address of the frame.'), warningType];
+        case SymbolicatorStatus.MISSING:
+          return [
+            t('The debug file could not be retrieved from any of the sources.'),
+            errorType,
+          ];
+        case SymbolicatorStatus.MALFORMED:
+          return [t('The retrieved debug file could not be processed.'), errorType];
+        default:
+      }
     }
+
+    return [null, null];
   }
 
   renderLeadHint() {
