commit 20496246a0cc2b98e69ce64bbd8fe0647d635f6e
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Tue Jun 7 13:40:20 2016 -0700

    Implement structlog across the major logging components. (#3403)
    
    * Add StructLogHandler class.
    
    * Remove now unused audit logging path.
    
    * Configure structlog in initializer.
    
    * Add StructLogHandler as rootlogger's handler.
    
    * Log to structlog directly when AuditLogEntry is made.
    
    * Add structlog requirement.
    
    * Remove old tests.
    
    * Actually don't hardcode it.
    
    * Remove cruft.
    
    * Bail out at magic-ing the log function if it doesn't work.
    
    * Put in a hack statement.
    
    * Include the ExceptionPrettyPrinter processor.
    
    * Strip the timestamp.
    
    * Also bind the user or the apikey used.
    
    * Create the correct context class.
    
    * Move logger to module level.

diff --git a/setup.py b/setup.py
index 010c018a79..ea83e92216 100755
--- a/setup.py
+++ b/setup.py
@@ -129,6 +129,7 @@ install_requires = [
     'six>=1.6.0,<2.0.0',
     'setproctitle>=1.1.7,<1.2.0',
     'statsd>=3.1.0,<3.2.0',
+    'structlog==16.1.0',
     'South==1.0.1',
     'toronado>=0.0.4,<0.1.0',
     'ua-parser>=0.6.1,<0.8.0',
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 6c5324e9a0..4afdfe6c90 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -15,9 +15,9 @@ from rest_framework.parsers import JSONParser
 from rest_framework.renderers import JSONRenderer
 from rest_framework.response import Response
 from rest_framework.views import APIView
+from structlog import get_logger
 
 from sentry.app import raven, tsdb
-from sentry.logging import audit
 from sentry.models import ApiKey, AuditLogEntry
 from sentry.utils.cursors import Cursor
 from sentry.utils.http import absolute_uri, is_valid_origin
@@ -39,6 +39,8 @@ DEFAULT_AUTHENTICATION = (
     SessionAuthentication,
 )
 
+logger = get_logger()
+
 
 class DocSection(Enum):
     ACCOUNTS = 'Accounts'
@@ -105,7 +107,17 @@ class Endpoint(APIView):
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
-        audit.log_entry(entry)
+
+        if entry.actor_id:
+            logger.bind(actor_id=entry.actor_id)
+        if entry.actor_key_id:
+            logger.bind(actor_key_id=entry.actor_key_id)
+
+        logger.info(
+            name='sentry.audit.entry',
+            event=entry.get_event_display(),
+            actor_label=entry.actor_label,
+        )
 
     @csrf_exempt
     def dispatch(self, request, *args, **kwargs):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 733016b41d..5d6dabe1dc 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -515,8 +515,7 @@ LOGGING = {
         },
         'console': {
             'level': 'WARNING',
-            'class': 'logging.StreamHandler',
-            'formatter': 'simple',
+            'class': 'sentry.logging.handlers.StructLogHandler',
         },
         'sentry': {
             'level': 'ERROR',
@@ -525,13 +524,7 @@ LOGGING = {
         },
         'audit': {
             'level': 'INFO',
-            'class': 'logging.StreamHandler',
-            'formatter': 'simple',
-        },
-        'console:api': {
-            'level': 'WARNING',
-            'class': 'logging.StreamHandler',
-            'formatter': 'client_info',
+            'class': 'sentry.logging.handlers.StructLogHandler',
         },
     },
     'filters': {
@@ -539,14 +532,6 @@ LOGGING = {
             '()': 'sentry.utils.raven.SentryInternalFilter',
         },
     },
-    'formatters': {
-        'simple': {
-            'format': '[%(levelname)s] %(message)s',
-        },
-        'client_info': {
-            'format': '[%(levelname)s] [%(project)s] [%(agent)s] %(message)s',
-        },
-    },
     'root': {
         'handlers': ['console', 'sentry'],
     },
@@ -561,7 +546,7 @@ LOGGING = {
             'handlers': ['audit'],
         },
         'sentry.api': {
-            'handlers': ['console:api', 'sentry'],
+            'handlers': ['console', 'sentry'],
             'propagate': False,
         },
         'sentry.deletions': {
diff --git a/src/sentry/logging/audit.py b/src/sentry/logging/audit.py
deleted file mode 100644
index df68542984..0000000000
--- a/src/sentry/logging/audit.py
+++ /dev/null
@@ -1,74 +0,0 @@
-"""
-sentry.logging.audit
-~~~~~~~~~~~~~~~~~~~~
-:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-
-from __future__ import absolute_import
-
-import logging
-
-from django.utils.encoding import force_bytes
-
-from sentry import options
-
-logger = logging.getLogger('sentry.audit')
-
-
-def log(log_obj, logger=logger):
-    """
-    Will either log an encoded dictionary or just a line.
-    """
-    if isinstance(log_obj, dict):
-        logger.info(encode(**log_obj))
-    else:
-        logger.info(force_bytes(
-            log_obj,
-            strings_only=True,
-            errors='replace'
-        ))
-
-
-def encode(**kwargs):
-    """
-    Force complex objects into strings so log formatters don't
-    error out when serializing.
-    """
-    return {
-        key: force_bytes(value, strings_only=True, errors='replace')
-        for key, value
-        in kwargs.iteritems()
-        if value is not None
-    }
-
-
-def log_entry(entry, logger=logger):
-    """
-    Give an AuditLogEntry object to the audit logger.
-    """
-    fmt = options.get('system.logging-format')
-    if fmt == 'human':
-        log(
-            u'[Audit Log] [{org}] {user} {note}'.format(
-                org=entry.organization_id,
-                user=entry.actor_label,
-                note=entry.get_note(),
-            ),
-            logger=logger,
-        )
-    elif fmt == 'machine':
-        log(
-            dict(
-                organization_id=entry.organization_id,
-                actor_id=entry.actor_id,
-                actor_key=entry.actor_key,
-                target_object=entry.target_object,
-                target_user_id=entry.target_user_id,
-                event=entry.get_event_display(),
-                ip_address=entry.ip_address,
-                data=entry.data,
-                datetime=entry.datetime,
-            ),
-            logger=logger,
-        )
diff --git a/src/sentry/logging/handlers.py b/src/sentry/logging/handlers.py
new file mode 100644
index 0000000000..037ab7f444
--- /dev/null
+++ b/src/sentry/logging/handlers.py
@@ -0,0 +1,28 @@
+"""
+sentry.logging.handlers
+~~~~~~~~~~~~~~~~~~~~~~~
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+import logging
+
+from structlog import get_logger
+
+logger = get_logger()
+
+
+class StructLogHandler(logging.StreamHandler):
+    def emit(self, record):
+        kwargs = {
+            'name': record.name,
+        }
+        if record.exc_info:
+            kwargs['exc_info'] = record.exc_info
+        # HACK(JTCunning): Calling structlog.log instead of the corresponding level
+        # methods steps on the toes of django client loggers and their testing components.
+        log = getattr(logger, logging.getLevelName(record.levelno).lower(), None)
+        if log:
+            log(record.msg, **kwargs)
+        else:
+            super(StructLogHandler, self).emit(record)
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 8ba3807f51..3c9bd26229 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -150,11 +150,38 @@ def bootstrap_options(settings, config=None):
                 setattr(settings, options_mapper[k], v)
 
 
+def configure_structlog():
+    """
+    Make structlog comply with all of our options.
+    """
+    import structlog
+    WrappedDictClass = structlog.threadlocal.wrap_dict(dict)
+    structlog.configure(
+        processors=[
+            structlog.stdlib.add_log_level,
+            structlog.stdlib.PositionalArgumentsFormatter(),
+            structlog.processors.StackInfoRenderer(),
+            structlog.processors.format_exc_info,
+            structlog.processors.ExceptionPrettyPrinter(),
+            structlog.processors.KeyValueRenderer(key_order=[
+                'name',
+                'level',
+                'event',
+            ])
+        ],
+        context_class=WrappedDictClass,
+        wrapper_class=structlog.stdlib.BoundLogger,
+        cache_logger_on_first_use=True,
+    )
+
+
 def initialize_app(config, skip_backend_validation=False):
     settings = config['settings']
 
     bootstrap_options(settings, config['options'])
 
+    configure_structlog()
+
     fix_south(settings)
 
     apply_legacy_settings(settings)
diff --git a/tests/sentry/logging/test_audit.py b/tests/sentry/logging/test_audit.py
deleted file mode 100644
index ff216403c8..0000000000
--- a/tests/sentry/logging/test_audit.py
+++ /dev/null
@@ -1,75 +0,0 @@
-from __future__ import absolute_import
-
-from mock import patch
-
-from sentry.logging import audit
-from sentry.models import AuditLogEntry, AuditLogEntryEvent
-from sentry.testutils import TestCase
-
-
-@patch('sentry.logging.audit.logger')
-class AuditLogTestCase(TestCase):
-    def test_log_line(self, mock_logger):
-        log_obj = 'A Human Line.'
-        audit.log(log_obj, logger=mock_logger)
-        assert mock_logger.info.called
-        mock_logger.info.assert_called_with(log_obj)
-
-    def test_log_encoded_dict(self, mock_logger):
-        log_obj = {'encode_me': 1L}
-        audit.log(log_obj, logger=mock_logger)
-        # Strip the call arguments of the crazy tuple nesting.
-        call_arg = mock_logger.info.call_args
-        while isinstance(call_arg, tuple):
-            call_arg = call_arg[0]
-        assert mock_logger.info.called
-        assert call_arg == {'encode_me': '1'}
-
-
-@patch('sentry.logging.audit.logger')
-class AuditLogTestEntryCase(TestCase):
-    def test_log_entry_human(self, mock_logger):
-        self.login_as(user=self.user)
-        org = self.create_organization(owner=self.user, name='sentry')
-        self.user.username = u'\u0420'
-        self.user.save()
-        entry = AuditLogEntry.objects.create(
-            organization=org,
-            event=AuditLogEntryEvent.ORG_EDIT,
-            actor=self.user,
-        )
-
-        with self.options({'system.logging-format': 'human'}):
-            with self.assertNumQueries(0):
-                audit.log_entry(entry, logger=mock_logger)
-            mock_logger.info.assert_called_with(
-                '[Audit Log] [{org_id}] {actor_label} {note}'.format(
-                    org_id=entry.organization_id,
-                    actor_label='\xd0\xa0',  # Make sure we encode correctly.
-                    note=entry.get_note()
-                )
-            )
-
-    def test_log_entry_machine(self, mock_logger):
-        self.login_as(user=self.user)
-        org = self.create_organization(owner=self.user, name='sentry')
-        entry = AuditLogEntry.objects.create(
-            organization=org,
-            event=AuditLogEntryEvent.ORG_EDIT,
-            actor=self.user,
-        )
-
-        with self.options({'system.logging-format': 'machine'}):
-            with self.assertNumQueries(0):
-                audit.log_entry(entry, logger=mock_logger)
-            # Strip the call arguments of the crazy tuple nesting.
-            call_arg = mock_logger.info.call_args
-            while isinstance(call_arg, tuple):
-                call_arg = call_arg[0]
-            assert call_arg == {
-                'actor_id': entry.actor_id,
-                'data': '{}',
-                'datetime': str(entry.datetime),
-                'event': 'org.edit',
-                'organization_id': entry.organization_id,
-            }
