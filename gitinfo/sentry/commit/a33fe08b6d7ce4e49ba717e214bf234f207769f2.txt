commit a33fe08b6d7ce4e49ba717e214bf234f207769f2
Author: Katie Byers <katie.byers@sentry.io>
Date:   Wed Jun 12 14:06:21 2019 -0700

    fix(API): Allow range in `commit` parameter of org releases endpoint as per docs (#13618)
    
    We say in the docs that the `commit` parameter sent to the `/organizations/{organization_slug}/releases/` endpoint can be a range of the form `startSHA..endSHA` but in reality we were limiting the length to that of a single commit SHA.
    
    This fixes that and adds tests.

diff --git a/src/sentry/api/serializers/rest_framework/release.py b/src/sentry/api/serializers/rest_framework/release.py
index 370d11561a..cba3fa3d57 100644
--- a/src/sentry/api/serializers/rest_framework/release.py
+++ b/src/sentry/api/serializers/rest_framework/release.py
@@ -4,7 +4,7 @@ from rest_framework import serializers
 
 from sentry.api.serializers.rest_framework import CommitSerializer, ListField
 from sentry.api.fields.user import UserField
-from sentry.constants import MAX_COMMIT_LENGTH, MAX_VERSION_LENGTH
+from sentry.constants import COMMIT_RANGE_DELIMITER, MAX_COMMIT_LENGTH, MAX_VERSION_LENGTH
 from sentry.models import Release
 
 
@@ -15,10 +15,38 @@ class ReleaseHeadCommitSerializerDeprecated(serializers.Serializer):
 
 
 class ReleaseHeadCommitSerializer(serializers.Serializer):
-    commit = serializers.CharField(max_length=MAX_COMMIT_LENGTH)
+    commit = serializers.CharField()
     repository = serializers.CharField(max_length=200)
     previousCommit = serializers.CharField(max_length=MAX_COMMIT_LENGTH, required=False)
 
+    def validate_commit(self, attrs, source):
+        """
+        Value can be either a single commit or a commit range (1a2b3c..6f5e4d)
+        """
+        value = attrs[source]
+
+        if COMMIT_RANGE_DELIMITER in value:
+            startCommit, endCommit = value.split(COMMIT_RANGE_DELIMITER)
+
+            if not startCommit or not endCommit:
+                raise serializers.ValidationError(
+                    'Commit cannot begin or end with %s' %
+                    COMMIT_RANGE_DELIMITER)
+
+            if len(startCommit) > MAX_COMMIT_LENGTH or len(endCommit) > MAX_COMMIT_LENGTH:
+                raise serializers.ValidationError(
+                    'Start or end commit too long - max is %s chars each' %
+                    MAX_COMMIT_LENGTH)
+
+            return attrs
+
+        if len(value) > MAX_COMMIT_LENGTH:
+            raise serializers.ValidationError(
+                'Commit too long - max is %s chars' %
+                MAX_COMMIT_LENGTH)
+
+        return attrs
+
 
 class ReleaseSerializer(serializers.Serializer):
     ref = serializers.CharField(max_length=MAX_VERSION_LENGTH, required=False)
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
index 728bfeae79..777ef641e3 100644
--- a/tests/sentry/api/endpoints/test_organization_releases.py
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -10,8 +10,15 @@ from datetime import (
 from django.core.urlresolvers import reverse
 from exam import fixture
 
-from sentry.api.endpoints.organization_releases import ReleaseSerializerWithProjects
-from sentry.constants import BAD_RELEASE_CHARS, MAX_VERSION_LENGTH
+from sentry.api.endpoints.organization_releases import (
+    ReleaseHeadCommitSerializer,
+    ReleaseSerializerWithProjects,
+)
+from sentry.constants import (
+    BAD_RELEASE_CHARS,
+    MAX_COMMIT_LENGTH,
+    MAX_VERSION_LENGTH,
+)
 from sentry.models import (
     Activity,
     ApiKey,
@@ -1506,3 +1513,114 @@ class ReleaseSerializerWithProjectsTest(TestCase):
             'projects': self.projects,
         })
         assert not serializer.is_valid()
+
+
+class ReleaseHeadCommitSerializerTest(TestCase):
+    def setUp(self):
+        super(ReleaseHeadCommitSerializerTest, self).setUp()
+        self.repo_name = 'repo/name'
+        self.commit = 'b' * 40
+        self.commit_range = '%s..%s' % ('a' * 40, 'b' * 40)
+        self.prev_commit = 'a' * 40
+
+    def test_simple(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': self.prev_commit,
+            'repository': self.repo_name
+        })
+
+        assert serializer.is_valid()
+        assert sorted(serializer.fields.keys()) == sorted(
+            ['commit', 'previousCommit', 'repository'])
+        result = serializer.object
+        assert result['commit'] == self.commit
+        assert result['previousCommit'] == self.prev_commit
+        assert result['repository'] == self.repo_name
+
+    def test_prev_commit_not_required(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': None,
+            'repository': self.repo_name
+        })
+        assert serializer.is_valid()
+
+    def test_do_not_allow_null_or_empty_commit_or_repo(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': None,
+            'previousCommit': self.prev_commit,
+            'repository': self.repo_name
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '',
+            'previousCommit': self.prev_commit,
+            'repository': self.repo_name
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': self.prev_commit,
+            'repository': None
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': self.prev_commit,
+            'repository': ''
+        })
+        assert not serializer.is_valid()
+
+    def test_single_commit_limited_by_max_commit_length(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': 'b' * MAX_COMMIT_LENGTH,
+            'repository': self.repo_name,
+        })
+        assert serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': 'a' * MAX_COMMIT_LENGTH,
+            'repository': self.repo_name,
+        })
+        assert serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': 'b' * (MAX_COMMIT_LENGTH + 1),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': self.commit,
+            'previousCommit': 'a' * (MAX_COMMIT_LENGTH + 1),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
+
+    def test_commit_range_does_not_allow_empty_commits(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '%s..%s' % ('', 'b' * MAX_COMMIT_LENGTH),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '%s..%s' % ('a' * MAX_COMMIT_LENGTH, ''),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
+
+    def test_commit_range_limited_by_max_commit_length(self):
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '%s..%s' % ('a' * MAX_COMMIT_LENGTH, 'b' * MAX_COMMIT_LENGTH),
+            'repository': self.repo_name,
+        })
+        assert serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '%s..%s' % ('a' * (MAX_COMMIT_LENGTH + 1), 'b' * MAX_COMMIT_LENGTH),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
+        serializer = ReleaseHeadCommitSerializer(data={
+            'commit': '%s..%s' % ('a' * MAX_COMMIT_LENGTH, 'b' * (MAX_COMMIT_LENGTH + 1)),
+            'repository': self.repo_name,
+        })
+        assert not serializer.is_valid()
