commit 32d4841505990412cb008f82087d385578b1862d
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Tue Mar 17 10:55:13 2020 -0700

    chore(ts): Convert ErrorRobot (#17673)

diff --git a/src/sentry/static/sentry/app/components/errorRobot.jsx b/src/sentry/static/sentry/app/components/errorRobot.tsx
similarity index 64%
rename from src/sentry/static/sentry/app/components/errorRobot.jsx
rename to src/sentry/static/sentry/app/components/errorRobot.tsx
index d4df1a01c7..c84f58f38d 100644
--- a/src/sentry/static/sentry/app/components/errorRobot.jsx
+++ b/src/sentry/static/sentry/app/components/errorRobot.tsx
@@ -1,5 +1,4 @@
 import {Link} from 'react-router';
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
@@ -7,33 +6,42 @@ import {t} from 'app/locale';
 import Button from 'app/components/button';
 import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
 import withApi from 'app/utils/withApi';
-
-class ErrorRobot extends React.Component {
-  static propTypes = {
-    api: PropTypes.object,
-    org: PropTypes.object.isRequired,
-    project: PropTypes.object,
-
-    // sampleIssueId can have 3 values:
-    // - empty string to indicate it doesn't exist (render "create sample event")
-    // - non-empty string to indicate it exists (render "see sample event")
-    // - null/undefined to indicate the project API should be consulted to find out
-    sampleIssueId: PropTypes.string,
-
-    gradient: PropTypes.bool,
-  };
-
-  state = {
+import {Client} from 'app/api';
+import {LightWeightOrganization, Project} from 'app/types';
+import {defined} from 'app/utils';
+
+type Props = {
+  api: Client;
+  org: LightWeightOrganization;
+  project?: Project;
+  gradient: boolean;
+  /**
+   * sampleIssueId can have 3 values:
+   * - empty string to indicate it doesn't exist (render "create sample event")
+   * - non-empty string to indicate it exists (render "see sample event")
+   * - undefined to indicate the project API should be consulted to find out
+   */
+  sampleIssueId?: string;
+};
+
+type State = {
+  error: boolean;
+  loading: boolean;
+  sampleIssueId?: string;
+};
+
+class ErrorRobot extends React.Component<Props, State> {
+  state: State = {
     error: false,
     loading: false,
     sampleIssueId: this.props.sampleIssueId,
   };
 
-  UNSAFE_componentWillMount() {
+  componentDidMount() {
     this.fetchData();
   }
 
-  fetchData() {
+  async fetchData() {
     const {org, project} = this.props;
     const {sampleIssueId} = this.state;
 
@@ -41,39 +49,34 @@ class ErrorRobot extends React.Component {
       return;
     }
 
-    if (sampleIssueId === null || sampleIssueId === undefined) {
-      const url = '/projects/' + org.slug + '/' + project.slug + '/issues/';
-      const requestParams = {limit: 1};
+    if (defined(sampleIssueId)) {
+      return;
+    }
+
+    const url = `/projects/${org.slug}/${project.slug}/issues/`;
+
+    this.setState({loading: true});
 
-      this.setState({loading: true});
-      this.props.api.request(url, {
+    try {
+      const data = await this.props.api.requestPromise(url, {
         method: 'GET',
-        data: requestParams,
-        success: data => {
-          this.setState({
-            loading: false,
-            sampleIssueId: (data.length > 0 && data[0].id) || '',
-          });
-        },
-        error: err => {
-          let error = err.responseJSON || true;
-          error = error.detail || true;
-          this.setState({
-            error,
-            loading: false,
-          });
-        },
+        data: {limit: 1},
       });
+      this.setState({sampleIssueId: (data.length > 0 && data[0].id) || ''});
+    } catch (err) {
+      const error = err?.responseJSON?.detail ?? true;
+      this.setState({error});
     }
+
+    this.setState({loading: false});
   }
 
   render() {
     const {loading, error, sampleIssueId} = this.state;
     const {org, project, gradient} = this.props;
-    let sampleLink;
 
-    if (!loading && !error) {
-      sampleLink = sampleIssueId ? (
+    const sampleLink =
+      project && (loading || error ? null : sampleIssueId) ? (
         <p>
           <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>
             {t('Or see your sample event')}
@@ -85,17 +88,15 @@ class ErrorRobot extends React.Component {
             priority="link"
             borderless
             size="large"
-            organization={org}
             project={project}
             source="issues_list"
             disabled={!project}
-            title={!project ? t('Select a project to create a sample event') : null}
+            title={!project ? t('Select a project to create a sample event') : undefined}
           >
             {t('Create a sample event')}
           </CreateSampleEventButton>
         </p>
       );
-    }
 
     return (
       <ErrorRobotWrapper
@@ -141,7 +142,7 @@ export {ErrorRobot};
 
 export default withApi(ErrorRobot);
 
-const ErrorRobotWrapper = styled('div')`
+const ErrorRobotWrapper = styled('div')<{gradient: boolean}>`
   box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.08);
   border-radius: 0 0 3px 3px;
   ${p =>
diff --git a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
index afbc000a73..9315e8b9a0 100644
--- a/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
+++ b/src/sentry/static/sentry/app/views/issueList/noGroupsHandler/index.tsx
@@ -85,15 +85,16 @@ class NoGroupsHandler extends React.Component<Props, State> {
   }
 
   renderAwaitingEvents(projects: State['firstEventProjects']) {
-    const {organization} = this.props;
-    const project = projects && projects.length > 0 ? projects[0] : null;
+    const {organization, groupIds} = this.props;
+
+    const project = projects && projects.length > 0 ? projects[0] : undefined;
+    const sampleIssueId = groupIds.length > 0 ? groupIds[0] : undefined;
 
-    const sampleIssueId = this.props.groupIds.length > 0 ? this.props.groupIds[0] : '';
     return (
       <ErrorRobot
         org={organization}
         project={project}
-        sampleIssueId={sampleIssueId}
+        sampleIssueId={sampleIssueId?.toString() ?? ''}
         gradient
       />
     );
@@ -110,16 +111,18 @@ class NoGroupsHandler extends React.Component<Props, State> {
   render() {
     const {fetchingSentFirstEvent, sentFirstEvent, firstEventProjects} = this.state;
     const {query} = this.props;
-    // render things accordingly
+
     if (fetchingSentFirstEvent) {
       return this.renderLoading();
-    } else if (!sentFirstEvent) {
+    }
+    if (!sentFirstEvent) {
       return this.renderAwaitingEvents(firstEventProjects);
-    } else if (query === DEFAULT_QUERY) {
+    }
+    if (query === DEFAULT_QUERY) {
       return <NoUnresolvedIssues />;
-    } else {
-      return this.renderEmpty();
     }
+
+    return this.renderEmpty();
   }
 }
 
diff --git a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
index f8dd025539..f6d6fb4221 100644
--- a/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
+++ b/src/sentry/static/sentry/app/views/onboarding/createSampleEventButton.tsx
@@ -20,7 +20,7 @@ import withOrganization from 'app/utils/withOrganization';
 type Props = React.ComponentProps<typeof Button> & {
   api: Client;
   organization: Organization;
-  project: Project;
+  project?: Project;
   source: string;
 };
 
@@ -82,6 +82,10 @@ class CreateSampleEventButton extends React.Component<Props, State> {
     const {api, organization, project, source} = this.props;
     let eventData;
 
+    if (!project) {
+      return;
+    }
+
     addLoadingMessage(t('Processing sample event...'));
     this.setState({creating: true});
 
