commit 641078f6291857d852e7b79b8dabc5286ecce67b
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Tue May 29 11:21:27 2018 -0700

    feat(integrations): Added bitbucket repo provider. (#8559)
    
    * Added bitbucket repo provider.
    
    * Removed repo mixin. didn't do anything.
    
    * Added integration_id
    
    * Checked that repo worked and the calls are made. Checked test_repo.
    
    * Changed a typo in imports
    
    * fixed typo and added comment.
    
    * Added webhook methods to make sure the import works
    
    * changed name so that it is actually webhooks rather than a misspelling.

diff --git a/src/sentry/integrations/bitbucket/client.py b/src/sentry/integrations/bitbucket/client.py
index ef6d02a617..cd913a56ba 100644
--- a/src/sentry/integrations/bitbucket/client.py
+++ b/src/sentry/integrations/bitbucket/client.py
@@ -35,16 +35,16 @@ class BitbucketAPIPath(object):
     repository_hooks = u'/2.0/repositories/{repo}/hooks'
 
 
-class BitbucketAPI(ApiClient):
+class BitbucketApiClient(ApiClient):
     """
     The API Client for the Bitbucket Integraiton
 
     NOTE: repo is the fully qualified slug containing 'username/repo_slug'
     """
 
-    def __init__(self, base_url, shared_secret, subject):
+    def __init__(self, base_url, shared_secret, subject, *args, **kwargs):
         # subject is probably the clientKey
-        super(BitbucketAPI, self).__init__()
+        super(BitbucketApiClient, self).__init__(*args, **kwargs)
         self.base_url = base_url
         self.shared_secret = shared_secret
         self.subject = subject
diff --git a/src/sentry/integrations/bitbucket/integration.py b/src/sentry/integrations/bitbucket/integration.py
index a00e6393e7..85dfe306cd 100644
--- a/src/sentry/integrations/bitbucket/integration.py
+++ b/src/sentry/integrations/bitbucket/integration.py
@@ -1,11 +1,14 @@
 from __future__ import absolute_import
 
-from sentry.integrations import IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
 from sentry.pipeline import NestedPipelineView
 from sentry.identity.pipeline import IdentityProviderPipeline
 from django.utils.translation import ugettext_lazy as _
 from sentry.utils.http import absolute_uri
 
+from .repository import BitbucketRepositoryProvider
+from .client import BitbucketApiClient
+
 DESCRIPTION = """
 Bitbucket for Sentry.io
 """
@@ -26,11 +29,21 @@ scopes = (
 )
 
 
+class BitbucketIntegration(Integration):
+    def get_client(self):
+        return BitbucketApiClient(
+            self.model.metadata['base_url'],
+            self.model.metadata['shared_secret'],
+            self.model.external_id,
+        )
+
+
 class BitbucketIntegrationProvider(IntegrationProvider):
     key = 'bitbucket'
     name = 'Bitbucket'
     metadata = metadata
     scopes = scopes
+    integration_cls = BitbucketIntegration
 
     def get_pipeline_views(self):
         identity_pipeline_config = {
@@ -68,3 +81,11 @@ class BitbucketIntegrationProvider(IntegrationProvider):
             'external_id': state['identity']['bitbucket_client_key'],
             'expect_exists': True,
         }
+
+    def setup(self):
+        from sentry.plugins import bindings
+        bindings.add(
+            'integration-repository.provider',
+            BitbucketRepositoryProvider,
+            id='integrations:bitbucket',
+        )
diff --git a/src/sentry/integrations/bitbucket/repository.py b/src/sentry/integrations/bitbucket/repository.py
new file mode 100644
index 0000000000..e1805cbf50
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/repository.py
@@ -0,0 +1,164 @@
+from __future__ import absolute_import
+
+import six
+
+from uuid import uuid4
+
+from sentry.app import locks
+from sentry.models import OrganizationOption
+from sentry.plugins import providers
+from sentry.models import Integration
+from sentry.utils.http import absolute_uri
+
+from sentry.integrations.exceptions import ApiError
+
+from .webhook import parse_raw_user_email, parse_raw_user_name
+
+
+class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
+    name = 'Bitbucket v2'
+
+    def raise_error(self, error, identity):
+        # TODO(LB): This used to do a lot more. Not sure it's important to handle atm
+        raise error
+
+    def get_client(self, integration_id):
+        if integration_id is None:
+            raise ValueError('Bitbucket version 2 requires an integration id.')
+
+        try:
+            integration_model = Integration.objects.get(id=integration_id)
+        except Integration.DoesNotExistError as error:
+            self.raise_error(error)
+
+        return integration_model.get_installation().get_client()
+
+    def get_config(self, organization):
+        choices = []
+        for i in Integration.objects.filter(organizations=organization, provider='bitbucket'):
+            choices.append((i.id, i.name))
+
+        if not choices:
+            choices = [('', '')]
+        return [
+            {
+                'name': 'integration_id',
+                'label': 'Bitbucket Integration',
+                'type': 'choice',
+                'choices': choices,
+                'initial': choices[0][0],
+                'help': 'Select which Bitbucket integration to authenticate with.',
+                'required': True,
+            },
+            {
+                'name': 'name',
+                'label': 'Repository Name',
+                'type': 'text',
+                'placeholder': 'e.g. getsentry/sentry',
+                'help': 'Enter your repository name, including the owner.',
+                'required': True,
+            },
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        if config.get('name'):
+            client = self.get_client(config['integration_id'])
+            try:
+                repo = client.get_repo(config['name'])
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                config['external_id'] = six.text_type(repo['uuid'])
+        return config
+
+    def get_webhook_secret(self, organization):
+        # TODO(LB): Revisit whether Integrations V3 should be using OrganizationOption for storage
+        lock = locks.get('bitbucket:webhook-secret:{}'.format(organization.id), duration=60)
+        with lock.acquire():
+            secret = OrganizationOption.objects.get_value(
+                organization=organization,
+                key='bitbucket:webhook_secret',
+            )
+            if secret is None:
+                secret = uuid4().hex + uuid4().hex
+                OrganizationOption.objects.set_value(
+                    organization=organization,
+                    key='bitbucket:webhook_secret',
+                    value=secret,
+                )
+        return secret
+
+    def create_repository(self, organization, data, actor=None):
+        client = self.get_client(data['integration_id'])
+        try:
+            resp = client.create_hook(
+                data['name'], {
+                    'description': 'sentry-bitbucket-repo-hook',
+                    'url': absolute_uri(
+                        '/extensions/bitbucket/organizations/{}/webhook/'.format(organization.id)
+                    ),
+                    'active': True,
+                    'events': ['repo:push'],
+                }
+            )
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+        else:
+            return {
+                'name': data['name'],
+                'external_id': data['external_id'],
+                'url': 'https://bitbucket.org/{}'.format(data['name']),
+                'config': {
+                    'name': data['name'],
+                    'webhook_id': resp['uuid'],
+                },
+                'integration_id': data['integration_id'],
+            }
+
+    def delete_repository(self, repo, actor=None):
+        client = self.get_client(repo.integration_id)
+
+        try:
+            client.delete_hook(repo.config['name'], repo.config['webhook_id'])
+        except ApiError as exc:
+            if exc.code == 404:
+                return
+            raise
+
+    def _format_commits(self, repo, commit_list):
+        return [
+            {
+                'id': c['hash'],
+                'repository': repo.name,
+                'author_email': parse_raw_user_email(c['author']['raw']),
+                'author_name': parse_raw_user_name(c['author']['raw']),
+                'message': c['message'],
+                'patch_set': c.get('patch_set'),
+            } for c in commit_list
+        ]
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        client = self.get_client(repo.integration_id)
+        # use config name because that is kept in sync via webhooks
+        name = repo.config['name']
+        if start_sha is None:
+            try:
+                res = client.get_last_commits(name, end_sha)
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            else:
+                return self._format_commits(repo, res[:10])
+        else:
+            try:
+                res = client.compare_commits(name, start_sha, end_sha)
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            else:
+                return self._format_commits(repo, res)
diff --git a/src/sentry/integrations/bitbucket/webhook.py b/src/sentry/integrations/bitbucket/webhook.py
new file mode 100644
index 0000000000..ca0dcce372
--- /dev/null
+++ b/src/sentry/integrations/bitbucket/webhook.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+import re
+
+
+def parse_raw_user_email(raw):
+    # captures content between angle brackets
+    match = re.search('(?<=<).*(?=>$)', raw)
+    if match is None:
+        return
+    return match.group(0)
+
+
+def parse_raw_user_name(raw):
+    # captures content before angle bracket
+    return raw.split('<')[0].strip()
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index 3776e26e36..ec9b335fa2 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -76,6 +76,7 @@ class IntegrationRepositoryProvider(ProviderMixin):
                     url=result.get('url'),
                     config=result.get('config') or {},
                     provider=self.id,
+                    integration_id=result.get('integration_id'),
                 )
                 self.delete_repository(repo, actor=request.user)
             except PluginError:
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 753715c9b3..90fad556b3 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -198,12 +198,14 @@ def register_extensions():
     plugins.register(TestIssuePlugin2)
 
     from sentry import integrations
+    from sentry.integrations.bitbucket import BitbucketIntegrationProvider
     from sentry.integrations.example import ExampleIntegrationProvider
     from sentry.integrations.github import GitHubIntegrationProvider
     from sentry.integrations.github_enterprise import GitHubEnterpriseIntegrationProvider
     from sentry.integrations.jira import JiraIntegrationProvider
     from sentry.integrations.slack import SlackIntegrationProvider
     from sentry.integrations.vsts import VSTSIntegrationProvider
+    integrations.register(BitbucketIntegrationProvider)
     integrations.register(ExampleIntegrationProvider)
     integrations.register(GitHubIntegrationProvider)
     integrations.register(GitHubEnterpriseIntegrationProvider)
diff --git a/tests/sentry/integrations/bitbucket/test_repository.py b/tests/sentry/integrations/bitbucket/test_repository.py
new file mode 100644
index 0000000000..1495e7c3bd
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/test_repository.py
@@ -0,0 +1,73 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.models import Integration, Repository
+from sentry.testutils import TestCase
+from sentry.integrations.bitbucket.repository import BitbucketRepositoryProvider
+from .testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH
+
+
+class BitbucketRepositoryProviderTest(TestCase):
+    def setUp(self):
+        self.base_url = 'https://api.bitbucket.org'
+        self.shared_secret = '234567890'
+        self.subject = 'connect:1234567'
+        self.integration = Integration.objects.create(
+            provider='bitbucket',
+            external_id=self.subject,
+            name='MyBitBucket',
+            metadata={
+                'base_url': self.base_url,
+                'shared_secret': self.shared_secret,
+                'subject': self.subject,
+            }
+        )
+        self.integration.add_organization(self.organization.id)
+        self.repo = Repository.objects.create(
+            provider='bitbucket',
+            name='sentryuser/newsdiffs',
+            organization_id=self.organization.id,
+            config={
+                'name': 'sentryuser/newsdiffs',
+            },
+            integration_id=self.integration.id,
+        )
+
+    @fixture
+    def provider(self):
+        return BitbucketRepositoryProvider('bitbucket')
+
+    def test_get_client(self):
+        client = self.provider.get_client(self.repo.integration_id)
+        assert client.base_url == self.base_url
+        assert client.shared_secret == self.shared_secret
+        assert client.subject == self.subject
+
+    @responses.activate
+    def test_compare_commits(self):
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301',
+            body=COMPARE_COMMITS_EXAMPLE,
+        )
+        responses.add(
+            responses.GET,
+            'https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301',
+            body=COMMIT_DIFF_PATCH,
+        )
+
+        res = self.provider.compare_commits(
+            self.repo, None, 'e18e4e72de0d824edfbe0d73efe34cbd0d01d301')
+
+        assert res == [
+            {
+                'author_email': 'sentryuser@getsentry.com',
+                'author_name': 'Sentry User',
+                'message': 'README.md edited online with Bitbucket',
+                'id': 'e18e4e72de0d824edfbe0d73efe34cbd0d01d301',
+                'repository': 'sentryuser/newsdiffs',
+                'patch_set': [{'path': u'README.md', 'type': 'M'}]
+            }
+        ]
diff --git a/tests/sentry/integrations/bitbucket/testutils.py b/tests/sentry/integrations/bitbucket/testutils.py
new file mode 100644
index 0000000000..637a7ae778
--- /dev/null
+++ b/tests/sentry/integrations/bitbucket/testutils.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+
+COMPARE_COMMITS_EXAMPLE = b"""{
+"pagelen": 30,
+ "values":
+     [{"hash": "e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+      "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs"}, "avatar": {"href": "https://bitbucket.org/sentryuser/newsdiffs/avatar/32/"}}, "type": "repository", "name": "newsdiffs", "full_name": "sentryuser/newsdiffs", "uuid": "{c78dfb25-7882-4550-97b1-4e0d38f32859}"}, "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "comments": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/comments"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/patch/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/approve"}, "statuses": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/statuses"}},
+       "author": {
+            "raw": "Sentry User <sentryuser@getsentry.com>",
+            "type": "author"
+        },
+        "parents": [{"hash": "26de9b63d09aa9c787e899f149c672023e292925", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/26de9b63d09aa9c787e899f149c672023e292925"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs/commits/26de9b63d09aa9c787e899f149c672023e292925"}}}], "date": "2017-05-16T23:21:40+00:00", "message": "README.md edited online with Bitbucket", "type": "commit"}],
+  "next": "https://api.bitbucket.org/2.0/repositories/sentryuser/sentryrepo/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301?page=2"
+}
+"""
+
+GET_LAST_COMMITS_EXAMPLE = b"""{
+"pagelen": 30,
+ "values":
+     [{"hash": "e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+      "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs"}, "avatar": {"href": "https://bitbucket.org/sentryuser/newsdiffs/avatar/32/"}}, "type": "repository", "name": "newsdiffs", "full_name": "sentryuser/newsdiffs", "uuid": "{c78dfb25-7882-4550-97b1-4e0d38f32859}"}, "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "comments": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/comments"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/patch/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/approve"}, "statuses": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/statuses"}}, "author": {"raw": "Sentry User <sentryuser@getsentry.com>", "type": "author", "user": {"username": "sentryuser", "display_name": "Sentry User", "type": "user", "uuid": "{b128e0f6-196a-4dde-b72d-f42abc6dc239}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/sentryuser"}, "html": {"href": "https://bitbucket.org/sentryuser/"}, "avatar": {"href": "https://bitbucket.org/account/sentryuser/avatar/32/"}}}}, "parents": [{"hash": "26de9b63d09aa9c787e899f149c672023e292925", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commit/26de9b63d09aa9c787e899f149c672023e292925"}, "html": {"href": "https://bitbucket.org/sentryuser/newsdiffs/commits/26de9b63d09aa9c787e899f149c672023e292925"}}}], "date": "2017-05-16T23:21:40+00:00", "message": "README.md edited online with Bitbucket", "type": "commit"}],
+  "next": "https://api.bitbucket.org/2.0/repositories/sentryuser/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301?page=2"
+}
+"""
+
+COMMIT_DIFF_PATCH = b"""diff --git a/README.md b/README.md
+index 89821ce..9e09a8a 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1 @@
+-A twitter bot to when words are said by the NYT for the first time.
+\ No newline at end of file
++A twitter bot to when words are said by the NYT for the first time.sdfsdf
+\ No newline at end of file"""
