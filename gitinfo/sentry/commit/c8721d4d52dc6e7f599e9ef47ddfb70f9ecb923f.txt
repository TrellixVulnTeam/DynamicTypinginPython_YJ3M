commit c8721d4d52dc6e7f599e9ef47ddfb70f9ecb923f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon May 15 13:51:47 2017 +0200

    Restructure has_system_frames to be normalized late

diff --git a/src/sentry/data/samples/react-native.json b/src/sentry/data/samples/react-native.json
index c2569ce132..3d04ed644f 100644
--- a/src/sentry/data/samples/react-native.json
+++ b/src/sentry/data/samples/react-native.json
@@ -4161,7 +4161,6 @@
           "symbol_addr": "0x100620974",
           "instruction_addr": "0x100620a18"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x80000000",
           "pc": "0x100620a18",
@@ -4661,7 +4660,6 @@
           "symbol_addr": "0x100620974",
           "instruction_addr": "0x100620a18"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x80000000",
           "pc": "0x100620a18",
@@ -5340,7 +5338,6 @@
           "symbol_addr": "0x100620974",
           "instruction_addr": "0x100620a18"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x80000000",
           "pc": "0x100620a18",
@@ -5825,7 +5822,6 @@
           "symbol_addr": "0x100620974",
           "instruction_addr": "0x100620a18"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x80000000",
           "pc": "0x100620a18",
@@ -5889,7 +5885,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x0",
           "pc": "0x183a4fa88",
@@ -5948,7 +5943,6 @@
           "symbol_addr": "0x183a4fa80",
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x0",
           "pc": "0x183a4fa88",
@@ -6012,7 +6006,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -6071,7 +6064,6 @@
           "symbol_addr": "0x183a4fa80",
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -6135,7 +6127,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -6194,7 +6185,6 @@
           "symbol_addr": "0x183a4fa80",
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -6848,7 +6838,6 @@
           "symbol_addr": "0x1007c51f0",
           "instruction_addr": "0x1007c5208"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x20000000",
           "pc": "0x1007c5208",
@@ -7222,7 +7211,6 @@
           "symbol_addr": "0x1007c51f0",
           "instruction_addr": "0x1007c5208"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x20000000",
           "pc": "0x1007c5208",
@@ -7286,7 +7274,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -7345,7 +7332,6 @@
           "symbol_addr": "0x183a4fa80",
           "instruction_addr": "0x183a4fa88"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4fa88",
@@ -7499,7 +7485,6 @@
           "colno": 0,
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -7621,7 +7606,6 @@
           "symbol_addr": "0x183a31180",
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -7756,7 +7740,6 @@
           "colno": 0,
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -7864,7 +7847,6 @@
           "symbol_addr": "0x183a31180",
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -8028,7 +8010,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4f314"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4f314",
@@ -8157,7 +8138,6 @@
           "symbol_addr": "0x183a4f30c",
           "instruction_addr": "0x183a4f314"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4f314",
@@ -8301,7 +8281,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4ee1c"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4ee1c",
@@ -8416,7 +8395,6 @@
           "symbol_addr": "0x183a4ee14",
           "instruction_addr": "0x183a4ee1c"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4ee1c",
@@ -8560,7 +8538,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4ee1c"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4ee1c",
@@ -8675,7 +8652,6 @@
           "symbol_addr": "0x183a4ee14",
           "instruction_addr": "0x183a4ee1c"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4ee1c",
@@ -8780,7 +8756,6 @@
           "colno": 0,
           "instruction_addr": "0x183a4f314"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4f314",
@@ -8867,7 +8842,6 @@
           "symbol_addr": "0x183a4f30c",
           "instruction_addr": "0x183a4f314"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x40000000",
           "pc": "0x183a4f314",
@@ -8962,7 +8936,6 @@
           "colno": 0,
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -9042,7 +9015,6 @@
           "symbol_addr": "0x183a31180",
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -9182,7 +9154,6 @@
           "colno": 0,
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
@@ -9290,7 +9261,6 @@
           "symbol_addr": "0x183a31180",
           "instruction_addr": "0x183a31188"
         }],
-        "has_system_frames": false,
         "registers": {
           "cpsr": "0x60000000",
           "pc": "0x183a31188",
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 2766aa7a1a..bc2b049ba0 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -43,6 +43,7 @@ from sentry.utils.hashlib import md5_text
 from sentry.utils.safe import safe_execute, trim, trim_dict
 from sentry.utils.strings import truncatechars
 from sentry.utils.validators import validate_ip
+from sentry.stacktraces import normalize_in_app
 
 
 def count_limit(count):
@@ -486,6 +487,10 @@ class EventManager(object):
                 del tags['user']
             tags['sentry:user'] = event_user.tag_value
 
+        # At this point we want to normalize the in_app values in case the
+        # clients did not set this appropriately so far.
+        normalize_in_app(data)
+
         for plugin in plugins.for_project(project, version=None):
             added_tags = safe_execute(plugin.get_tags, event,
                                       _with_transaction=False)
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 2e2e71b1f4..6951e41e03 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -42,14 +42,13 @@ class SingleException(Interface):
     score = 2000
 
     @classmethod
-    def to_python(cls, data, has_system_frames=None, slim_frames=True):
+    def to_python(cls, data, slim_frames=True):
         if not (data.get('type') or data.get('value')):
             raise InterfaceValidationError("No 'type' or 'value' present")
 
         if data.get('stacktrace') and data['stacktrace'].get('frames'):
             stacktrace = Stacktrace.to_python(
                 data['stacktrace'],
-                has_system_frames=has_system_frames,
                 slim_frames=slim_frames,
             )
         else:
@@ -58,7 +57,6 @@ class SingleException(Interface):
         if data.get('raw_stacktrace') and data['raw_stacktrace'].get('frames'):
             raw_stacktrace = Stacktrace.to_python(
                 data['raw_stacktrace'],
-                has_system_frames=has_system_frames,
                 slim_frames=slim_frames,
                 raw=True
             )
@@ -207,13 +205,10 @@ class Exception(Interface):
         if not isinstance(data['values'], list):
             raise InterfaceValidationError("Invalid value for 'values'")
 
-        has_system_frames = cls.data_has_system_frames(data)
-
         kwargs = {
             'values': [
                 SingleException.to_python(
                     v,
-                    has_system_frames=has_system_frames,
                     slim_frames=False,
                 )
                 for v in data['values']
@@ -232,31 +227,6 @@ class Exception(Interface):
         slim_exception_data(instance)
         return instance
 
-    @classmethod
-    def data_has_system_frames(cls, data):
-        system_frames = 0
-        app_frames = 0
-        for exc in data['values']:
-            if not exc.get('stacktrace'):
-                continue
-
-            frames = exc['stacktrace'].get('frames')
-            if not frames:
-                continue
-
-            for frame in frames:
-                # XXX(dcramer): handle PHP sending an empty array for a frame
-                if not isinstance(frame, dict):
-                    continue
-                if frame.get('in_app') is True:
-                    app_frames += 1
-                else:
-                    system_frames += 1
-
-        # if there is a mix of frame styles then we indicate that system frames
-        # are present and should be represented as a split
-        return bool(app_frames and system_frames)
-
     def to_json(self):
         return {
             'values': [v.to_json() for v in self.values],
@@ -308,7 +278,7 @@ class Exception(Interface):
                 for v in self.values
             ],
             'hasSystemFrames': any(
-                v.stacktrace.has_system_frames
+                v.stacktrace.get_has_system_frames()
                 for v in self.values
                 if v.stacktrace
             ),
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 2b462511ed..8e99a75690 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -636,8 +636,7 @@ class Stacktrace(Interface):
         return iter(self.frames)
 
     @classmethod
-    def to_python(cls, data, has_system_frames=None, slim_frames=True,
-                  raw=False):
+    def to_python(cls, data, slim_frames=True, raw=False):
         if not data.get('frames'):
             raise InterfaceValidationError("No 'frames' present")
 
@@ -650,15 +649,6 @@ class Stacktrace(Interface):
             for f in data['frames']
         ]
 
-        if not raw:
-            if has_system_frames is None:
-                has_system_frames = cls.data_has_system_frames(data)
-            for frame in frame_list:
-                if not has_system_frames:
-                    frame.in_app = False
-                elif frame.in_app is None:
-                    frame.in_app = False
-
         kwargs = {
             'frames': frame_list,
         }
@@ -674,26 +664,17 @@ class Stacktrace(Interface):
         else:
             kwargs['frames_omitted'] = None
 
-        kwargs['has_system_frames'] = has_system_frames
-
         instance = cls(**kwargs)
         if slim_frames:
             slim_frame_data(instance)
         return instance
 
-    @classmethod
-    def data_has_system_frames(cls, data):
-        system_frames = 0
-        for frame in data['frames']:
-            # XXX(dcramer): handle PHP sending an empty array for a frame
-            if not isinstance(frame, dict):
-                continue
-            if not frame.get('in_app'):
-                system_frames += 1
-
-        if len(data['frames']) == system_frames:
-            return False
-        return bool(system_frames)
+    def get_has_system_frames(self):
+        # This is a simplified logic from how the normalizer works.
+        # Because this always works on normalized data we do not have to
+        # consider the "all frames are in_app" case.  The normalizer lives
+        # in stacktraces.normalize_in_app which will take care of that.
+        return any(frame.in_app for frame in self.frames)
 
     def get_longest_address(self):
         rv = None
@@ -714,7 +695,7 @@ class Stacktrace(Interface):
             'frames': frame_list,
             'framesOmitted': self.frames_omitted,
             'registers': self.registers,
-            'hasSystemFrames': self.has_system_frames,
+            'hasSystemFrames': self.get_has_system_frames(),
         }
 
     def to_json(self):
@@ -722,7 +703,6 @@ class Stacktrace(Interface):
             'frames': [f.to_json() for f in self.frames],
             'frames_omitted': self.frames_omitted,
             'registers': self.registers,
-            'has_system_frames': self.has_system_frames,
         }
 
     def get_path(self):
diff --git a/src/sentry/stacktraces.py b/src/sentry/stacktraces.py
index 18ee7ffa90..632708529d 100644
--- a/src/sentry/stacktraces.py
+++ b/src/sentry/stacktraces.py
@@ -151,16 +151,18 @@ class StacktraceProcessor(object):
         return False
 
 
-def find_stacktraces_in_data(data):
+def find_stacktraces_in_data(data, include_raw=False):
     """Finds all stracktraces in a given data blob and returns it
     together with some meta information.
+
+    If `include_raw` is True, then also raw stacktraces are included.
     """
     rv = []
 
     def _report_stack(stacktrace, container):
         platforms = set()
         for frame in stacktrace.get('frames') or ():
-            platforms.add(frame.get('platform') or data['platform'])
+            platforms.add(frame.get('platform') or data.get('platform'))
         rv.append(StacktraceInfo(
             stacktrace=stacktrace,
             container=container,
@@ -185,9 +187,35 @@ def find_stacktraces_in_data(data):
             if stacktrace:
                 _report_stack(stacktrace, thread)
 
+    if include_raw:
+        for stacktrace_info in rv[:]:
+            if stacktrace_info.container is None:
+                continue
+            raw = stacktrace_info.container.get('raw_stacktrace')
+            if raw:
+                _report_stack(raw, stacktrace_info.container)
+
     return rv
 
 
+def normalize_in_app(data):
+    def _get_has_system_frames(frames):
+        system_frames = 0
+        for frame in frames:
+            if not frame.get('in_app'):
+                system_frames += 1
+        return bool(system_frames) and len(frames) != system_frames
+
+    for stacktrace_info in find_stacktraces_in_data(data, include_raw=True):
+        frames = stacktrace_info.stacktrace.get('frames') or ()
+        has_system_frames = _get_has_system_frames(frames)
+        for frame in frames:
+            if not has_system_frames:
+                frame['in_app'] = False
+            elif frame.get('in_app') is None:
+                frame['in_app'] = False
+
+
 def should_process_for_stacktraces(data):
     from sentry.plugins import plugins
     infos = find_stacktraces_in_data(data)
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 614851141b..a0d4d5a1a9 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -425,7 +425,6 @@ class Fixtures(object):
                     "exc_omitted": null,
                     "values": [{
                         "stacktrace": {
-                            "has_system_frames": false,
                             "frames": [{
                                 "function": "batchedUpdates",
                                 "abs_path": "webpack:////usr/src/getsentry/src/sentry/~/react/lib/ReactUpdates.js",
