commit 5bea8f48109a13c8ebb4d0edcd3a4c52ffff5417
Author: Alex Hofsteede <alex@hofsteede.com>
Date:   Tue Dec 4 16:16:41 2018 -0800

    feat: Allow id or event_id in project events endpoint (#10898)
    
    * feat: Allow id or event_id in project events endpoint
    
    Reprise of a previous PR that failed because there is no index
    on event_id alone. Now I've added this functionality to the project
    event details endpoint where we know we always have the project id
    available, and I've made the fronted code use this endpoint instead
    of the bare /events/x/ endpoint.

diff --git a/src/sentry/api/endpoints/project_event_details.py b/src/sentry/api/endpoints/project_event_details.py
index c7e83251f6..a56f4611eb 100644
--- a/src/sentry/api/endpoints/project_event_details.py
+++ b/src/sentry/api/endpoints/project_event_details.py
@@ -7,8 +7,9 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import Event
+from sentry.models import Event, Release, UserReport
 from sentry.utils.apidocs import scenario, attach_scenarios
+from sentry.utils.validators import is_event_id
 
 
 @scenario('RetrieveEventForProject')
@@ -23,6 +24,20 @@ def retrieve_event_for_project_scenario(runner):
 class ProjectEventDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
+    def _get_release_info(self, request, event):
+        version = event.get_tag('sentry:release')
+        if not version:
+            return None
+        try:
+            release = Release.objects.get(
+                projects=event.project,
+                organization_id=event.project.organization_id,
+                version=version,
+            )
+        except Release.DoesNotExist:
+            return {'version': version}
+        return serialize(release, request.user)
+
     @attach_scenarios([retrieve_event_for_project_scenario])
     def get(self, request, project, event_id):
         """
@@ -35,16 +50,33 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
                                           event belongs to.
         :pparam string project_slug: the slug of the project the event
                                      belongs to.
-        :pparam string event_id: the hexadecimal ID of the event to
-                                 retrieve (as reported by the raven client).
+        :pparam string event_id: the id of the event to retrieve (either the
+                                 numeric primary-key or the hexadecimal id as
+                                 reported by the raven client)
         :auth: required
         """
-        try:
-            event = Event.objects.get(
-                event_id=event_id,
-                project_id=project.id,
-            )
-        except Event.DoesNotExist:
+
+        event = None
+        # If its a numeric string, check if it's an event Primary Key first
+        if event_id.isdigit():
+            try:
+                event = Event.objects.get(
+                    id=event_id,
+                    project_id=project.id,
+                )
+            except Event.DoesNotExist:
+                pass
+        # If it was not found as a PK, and its a possible event_id, search by that instead.
+        if event is None and is_event_id(event_id):
+            try:
+                event = Event.objects.get(
+                    event_id=event_id,
+                    project_id=project.id,
+                )
+            except Event.DoesNotExist:
+                pass
+
+        if event is None:
             return Response({'detail': 'Event not found'}, status=404)
 
         Event.objects.bind_nodes([event], 'data')
@@ -72,7 +104,17 @@ class ProjectEventDetailsEndpoint(ProjectEndpoint):
         except IndexError:
             prev_event = None
 
+        try:
+            user_report = UserReport.objects.get(
+                event_id=event.event_id,
+                project=event.project,
+            )
+        except UserReport.DoesNotExist:
+            user_report = None
+
         data = serialize(event, request.user)
+        data['userReport'] = serialize(user_report, request.user)
+        data['release'] = self._get_release_info(request, event)
 
         if next_event:
             data['nextEventID'] = six.text_type(next_event.event_id)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index bcfb4421f1..ca806bdadd 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -760,7 +760,7 @@ urlpatterns = patterns(
         name='sentry-api-0-project-events'
     ),
     url(
-        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/$',
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>(?:\d+|[A-Fa-f0-9]{32}))/$',
         ProjectEventDetailsEndpoint.as_view(),
         name='sentry-api-0-project-event-details'
     ),
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index 6518ac1f7e..1d9ea55863 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -38,12 +38,15 @@ const GroupEventDetails = createReactClass({
   },
 
   fetchData() {
-    let eventId = this.props.params.eventId || 'latest';
+    const eventId = this.props.params.eventId || 'latest';
+    const groupId = this.getGroup().id;
+    const orgSlug = this.getOrganization().slug;
+    const projSlug = this.getProject().slug;
 
     let url =
       eventId === 'latest' || eventId === 'oldest'
-        ? '/issues/' + this.getGroup().id + '/events/' + eventId + '/'
-        : '/events/' + eventId + '/';
+        ? `/issues/${groupId}/events/${eventId}/`
+        : `/projects/${orgSlug}/${projSlug}/events/${eventId}/`;
 
     this.setState({
       loading: true,
@@ -59,9 +62,9 @@ const GroupEventDetails = createReactClass({
         });
 
         this.api.bulkUpdate({
-          orgId: this.getOrganization().slug,
-          projectId: this.getProject().slug,
-          itemIds: [this.getGroup().id],
+          orgId: orgSlug,
+          projectId: projSlug,
+          itemIds: [groupId],
           failSilently: true,
           data: {hasSeen: true},
         });
diff --git a/tests/sentry/api/endpoints/test_project_event_details.py b/tests/sentry/api/endpoints/test_project_event_details.py
index 59744b14c5..c705461458 100644
--- a/tests/sentry/api/endpoints/test_project_event_details.py
+++ b/tests/sentry/api/endpoints/test_project_event_details.py
@@ -14,17 +14,17 @@ class ProjectEventDetailsTest(APITestCase):
 
         group = self.create_group()
         prev_event = self.create_event(
-            event_id='a',
+            event_id='a' * 32,
             group=group,
             datetime=datetime(2013, 8, 13, 3, 8, 24),
         )
         cur_event = self.create_event(
-            event_id='b',
+            event_id='b' * 32,
             group=group,
             datetime=datetime(2013, 8, 13, 3, 8, 25),
         )
         next_event = self.create_event(
-            event_id='c',
+            event_id='c' * 32,
             group=group,
             datetime=datetime(2013, 8, 13, 3, 8, 26),
         )
@@ -44,3 +44,20 @@ class ProjectEventDetailsTest(APITestCase):
         assert response.data['nextEventID'] == six.text_type(next_event.event_id)
         assert response.data['previousEventID'] == six.text_type(prev_event.event_id)
         assert response.data['groupID'] == six.text_type(group.id)
+
+        # Same event can be looked up by primary key
+        url = reverse(
+            'sentry-api-0-project-event-details',
+            kwargs={
+                'event_id': cur_event.id,
+                'project_slug': cur_event.project.slug,
+                'organization_slug': cur_event.project.organization.slug,
+            }
+        )
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == six.text_type(cur_event.id)
+        assert response.data['nextEventID'] == six.text_type(next_event.event_id)
+        assert response.data['previousEventID'] == six.text_type(prev_event.event_id)
+        assert response.data['groupID'] == six.text_type(group.id)
