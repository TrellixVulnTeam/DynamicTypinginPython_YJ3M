commit 2ec8fcee34d89331ca2590fce62bcd89d64673ef
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed May 6 18:21:43 2020 +0200

    feat(ui): Add breadcrumbs level in the filter (#18619)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
index 7ca43877c6..b2e1187868 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/types.tsx
@@ -26,7 +26,7 @@ export enum BreadcrumbType {
 
 type BreadcrumbTypeBase = {
   timestamp?: string; //it's recommended
-  category?: string;
+  category?: string | null;
   message?: string;
   level?: BreadcrumbLevelType;
   event_id?: string;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCategory.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCategory.tsx
index 145f49bf38..459d18dc4c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCategory.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbCategory.tsx
@@ -3,18 +3,23 @@ import styled from '@emotion/styled';
 
 import Tooltip from 'app/components/tooltip';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
+import {defined} from 'app/utils';
+import {t} from 'app/locale';
 
 type Props = {
-  category?: string;
+  category?: string | null;
 };
 
-const BreadcrumbCategory = ({category = 'generic'}: Props) => (
-  <div>
-    <Tooltip title={category}>
-      <Category title={category}>{category}</Category>
-    </Tooltip>
-  </div>
-);
+const BreadcrumbCategory = ({category}: Props) => {
+  const title = !defined(category) ? t('generic') : category;
+  return (
+    <div>
+      <Tooltip title={title}>
+        <Category title={title}>{title}</Category>
+      </Tooltip>
+    </div>
+  );
+};
 
 export default BreadcrumbCategory;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbData/breadcrumbDataSummary.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbData/breadcrumbDataSummary.tsx
index 79aa69aef5..7d6d6c9255 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbData/breadcrumbDataSummary.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbData/breadcrumbDataSummary.tsx
@@ -81,12 +81,10 @@ const StyledPre = styled('pre')`
   word-break: break-all;
   margin: 0;
   font-size: ${p => p.theme.fontSizeSmall};
+  display: inline;
 `;
 
 const BreadcrumbDataSummaryData = styled('div')`
-  display: grid;
-  grid-template-columns: max-content 1fr;
-  grid-gap: ${space(0.5)};
   margin: ${space(1)} 0;
   font-size: ${p => p.theme.fontSizeSmall};
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx
index fb2fd5257b..527cfd8f68 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilter.tsx
@@ -84,22 +84,31 @@ class BreadcrumbFilter extends React.Component<Props, State> {
   getDropDownButton = ({isOpen, getActorProps}) => {
     const {checkedOptionsQuantity} = this.state;
 
-    let buttonLabel = t('Filter By');
-    let buttonPriority = 'default';
+    const dropDownButtonProps = {
+      buttonLabel: t('Filter By'),
+      buttonPriority: 'default',
+      hasDarkBorderBottomColor: false,
+    };
 
     if (checkedOptionsQuantity > 0) {
-      buttonLabel = tn('%s Active Filter', '%s Active Filters', checkedOptionsQuantity);
-      buttonPriority = 'primary';
+      dropDownButtonProps.buttonLabel = tn(
+        '%s Active Filter',
+        '%s Active Filters',
+        checkedOptionsQuantity
+      );
+      dropDownButtonProps.buttonPriority = 'primary';
+      dropDownButtonProps.hasDarkBorderBottomColor = true;
     }
 
     return (
       <StyledDropdownButton
         {...getActorProps()}
         isOpen={isOpen}
+        hasDarkBorderBottomColor={dropDownButtonProps.hasDarkBorderBottomColor}
         size="small"
-        priority={buttonPriority}
+        priority={dropDownButtonProps.buttonPriority}
       >
-        {buttonLabel}
+        {dropDownButtonProps.buttonLabel}
       </StyledDropdownButton>
     );
   };
@@ -114,7 +123,7 @@ class BreadcrumbFilter extends React.Component<Props, State> {
 
     return (
       <Wrapper>
-        <DropdownControl menuWidth="20vh" blendWithActor button={this.getDropDownButton}>
+        <DropdownControl menuWidth="240px" blendWithActor button={this.getDropDownButton}>
           <React.Fragment>
             <BreadcrumbFilterHeader
               onSelectAll={this.handleSelectAll}
@@ -149,7 +158,7 @@ class BreadcrumbFilter extends React.Component<Props, State> {
 
 export default BreadcrumbFilter;
 
-const StyledDropdownButton = styled(DropdownButton)`
+const StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`
   border-right: 0;
   z-index: ${p => p.theme.zIndex.dropdownAutocomplete.actor};
   border-radius: ${p =>
@@ -164,6 +173,7 @@ const StyledDropdownButton = styled(DropdownButton)`
   }
   ${p =>
     !p.isOpen &&
+    p.hasDarkBorderBottomColor &&
     css`
       border-bottom-color: ${p.theme.button.primary.border};
     `}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx
index 1efafdcd99..472c0d0aac 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/breadcrumbFilterGroup.tsx
@@ -5,7 +5,6 @@ import space from 'app/styles/space';
 import CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';
 
 import {FilterType, FilterGroupType, FilterGroup} from './types';
-import BreadcrumbIcon from '../breadcrumbIcon';
 
 type Props = {
   groupHeaderTitle: string;
@@ -25,24 +24,17 @@ const BreadcrumbFilterGroup = ({groupHeaderTitle, data, onClick}: Props) => {
     <div>
       <FilterGroupHeader>{groupHeaderTitle}</FilterGroupHeader>
       <FilterGroupList>
-        {data.map(
-          ({type, groupType, description, isChecked, icon, color, borderColor}) => (
-            <FilterGroupListItem
-              key={type}
-              isChecked={isChecked}
-              onClick={handleClick(type, groupType)}
-            >
-              <BreadcrumbIcon
-                icon={icon}
-                color={color}
-                borderColor={borderColor}
-                size="xs"
-              />
-              <ListItemDescription>{description}</ListItemDescription>
-              <CheckboxFancy isChecked={isChecked} />
-            </FilterGroupListItem>
-          )
-        )}
+        {data.map(({type, groupType, description, isChecked, symbol}) => (
+          <FilterGroupListItem
+            key={type}
+            isChecked={isChecked}
+            onClick={handleClick(type, groupType)}
+          >
+            {symbol}
+            <ListItemDescription>{description}</ListItemDescription>
+            <CheckboxFancy isChecked={isChecked} />
+          </FilterGroupListItem>
+        ))}
       </FilterGroupList>
     </div>
   );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx
index dd6e752636..9282a7921d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbFilter/types.tsx
@@ -11,7 +11,9 @@ export enum FilterGroupType {
 
 type FilterGroupBase = {
   isChecked: boolean;
-} & BreadcrumbDetails;
+  symbol: React.ReactNode;
+  description?: string;
+};
 
 type FilterGroupTypeType = {
   groupType: FilterGroupType.TYPE;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbLevel.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbLevel.tsx
index b10c24f78a..cce24e442f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbLevel.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbLevel.tsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import Tag from 'app/views/settings/components/tag';
+import {t} from 'app/locale';
 
 import {BreadcrumbLevelType} from '../breadcrumbs/types';
 
@@ -18,7 +19,7 @@ const BreadcrumbLevelTag = ({level}: Props) => {
     case BreadcrumbLevelType.WARNING:
       return <Tag priority="warning">{level}</Tag>;
     default:
-      return <Tag>{level}</Tag>;
+      return <Tag>{level || t('undefined')}</Tag>;
   }
 };
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
index abbdbcd721..c606f22337 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
@@ -1,13 +1,16 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import omit from 'lodash/omit';
 
 import EventDataSection from 'app/components/events/eventDataSection';
 import GuideAnchor from 'app/components/assistant/guideAnchor';
-import EmptyStateWarning from 'app/components/emptyStateWarning';
+import EmptyMessage from 'app/views/settings/components/emptyMessage';
 import {t} from 'app/locale';
 import {Event} from 'app/types';
 import space from 'app/styles/space';
 import SearchBar from 'app/components/searchBar';
+import Button from 'app/components/button';
+import {IconWarning} from 'app/icons/iconWarning';
 
 import {
   Breadcrumb,
@@ -17,10 +20,12 @@ import {
 } from '../breadcrumbs/types';
 import BreadcrumbFilter from './breadcrumbFilter/breadcrumbFilter';
 import convertBreadcrumbType from './convertBreadcrumbType';
-import getBreadcrumbDetails from './getBreadcrumbDetails';
+import getBreadcrumbTypeDetails from './getBreadcrumbTypeDetails';
 import {FilterGroupType} from './breadcrumbFilter/types';
 import BreadcrumbsListHeader from './breadcrumbsListHeader';
 import BreadcrumbsListBody from './breadcrumbsListBody';
+import BreadcrumbIcon from './breadcrumbIcon';
+import BreadcrumbLevel from './breadcrumbLevel';
 
 const MAX_CRUMBS_WHEN_COLLAPSED = 10;
 
@@ -33,9 +38,9 @@ type State = {
   isCollapsed: boolean;
   searchTerm: string;
   breadcrumbs: Array<BreadcrumbWithDetails>;
-  filteredBreadcrumbsByCustomSearch: Array<BreadcrumbWithDetails>;
+  filteredByFilter: Array<BreadcrumbWithDetails>;
   filteredBreadcrumbs: Array<BreadcrumbWithDetails>;
-  breadcrumbFilterGroups: BreadcrumbFilterGroups;
+  filterGroups: BreadcrumbFilterGroups;
 };
 
 type Props = {
@@ -51,9 +56,9 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     isCollapsed: true,
     searchTerm: '',
     breadcrumbs: [],
-    filteredBreadcrumbsByCustomSearch: [],
+    filteredByFilter: [],
     filteredBreadcrumbs: [],
-    breadcrumbFilterGroups: [],
+    filterGroups: [],
   };
 
   componentDidMount() {
@@ -71,19 +76,29 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     }
 
     const breadcrumbTypes: BreadcrumbFilterGroups = [];
-
-    // TODO(Priscila): implement levels
-    //const breadcrumbLevels: BreadcrumbFilterGroups = [];
+    const breadcrumbLevels: BreadcrumbFilterGroups = [];
 
     const convertedBreadcrumbs = breadcrumbs.map((breadcrumb, index) => {
       const convertedBreadcrumb = convertBreadcrumbType(breadcrumb);
-      const breadcrumbDetails = getBreadcrumbDetails(convertedBreadcrumb.type);
+      const breadcrumbTypeDetails = getBreadcrumbTypeDetails(convertedBreadcrumb.type);
 
       if (!breadcrumbTypes.find(b => b.type === convertedBreadcrumb.type)) {
-        !breadcrumbTypes.push({
+        breadcrumbTypes.push({
           groupType: FilterGroupType.TYPE,
           type: convertedBreadcrumb.type,
-          ...breadcrumbDetails,
+          description: breadcrumbTypeDetails.description,
+          symbol: (
+            <BreadcrumbIcon {...omit(breadcrumbTypeDetails, 'description')} size="xs" />
+          ),
+          isChecked: true,
+        });
+      }
+
+      if (!breadcrumbLevels.find(b => b.type === String(convertedBreadcrumb?.level))) {
+        breadcrumbLevels.push({
+          groupType: FilterGroupType.LEVEL,
+          type: String(convertedBreadcrumb?.level) as BreadcrumbLevelType,
+          symbol: <BreadcrumbLevel level={convertedBreadcrumb.level} />,
           isChecked: true,
         });
       }
@@ -91,20 +106,23 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
       return {
         id: index,
         ...convertedBreadcrumb,
-        ...breadcrumbDetails,
+        ...breadcrumbTypeDetails,
       };
     });
 
     this.setState({
       breadcrumbs: convertedBreadcrumbs,
       filteredBreadcrumbs: convertedBreadcrumbs,
-      filteredBreadcrumbsByCustomSearch: convertedBreadcrumbs,
-      breadcrumbFilterGroups: breadcrumbTypes
-        // in case of a breadcrumb of type BreadcrumbType.DEFAULT, moves it to the last position of the array
-        .filter(crumbType => crumbType.type !== BreadcrumbType.DEFAULT)
-        .concat(
-          breadcrumbTypes.filter(crumbType => crumbType.type === BreadcrumbType.DEFAULT)
-        ),
+      filteredByFilter: convertedBreadcrumbs,
+      filterGroups: [
+        ...breadcrumbTypes
+          // in case of a breadcrumb of type BreadcrumbType.DEFAULT, moves it to the last position of the array
+          .filter(crumbType => crumbType.type !== BreadcrumbType.DEFAULT)
+          .concat(
+            breadcrumbTypes.filter(crumbType => crumbType.type === BreadcrumbType.DEFAULT)
+          ),
+        ...breadcrumbLevels,
+      ],
     });
   };
 
@@ -175,38 +193,58 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     };
   };
 
-  handleFilter = (breadcrumbFilterGroups: BreadcrumbFilterGroups) => () => {
+  handleFilter = (filterGroups: BreadcrumbFilterGroups) => () => {
     //types
-    const breadcrumbFilterGroupTypes = breadcrumbFilterGroups.filter(
-      breadcrumbFilterGroup => breadcrumbFilterGroup.groupType === 'type'
-    );
-
-    // TODO(Priscila): implement levels
-    // const breadcrumbFilterGroupLevels = breadcrumbFilterGroups
-    //   .filter(breadcrumbFilterGroup => breadcrumbFilterGroup.groupType === 'level')
-    //   .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
-
-    this.setState({
-      filteredBreadcrumbs: this.state.breadcrumbs.filter(breadcrumb => {
-        const foundBreadcrumbFilterData = breadcrumbFilterGroupTypes.find(
-          crumbFilterData => crumbFilterData.type === breadcrumb.type
+    const breadcrumbFilterGroupTypes = filterGroups
+      .filter(
+        breadcrumbFilterGroup =>
+          breadcrumbFilterGroup.groupType === 'type' && breadcrumbFilterGroup.isChecked
+      )
+      .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
+
+    //levels
+    const breadcrumbFilterGroupLevels = filterGroups
+      .filter(
+        breadcrumbFilterGroup =>
+          breadcrumbFilterGroup.groupType === 'level' && breadcrumbFilterGroup.isChecked
+      )
+      .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
+
+    const filteredByFilter = this.state.breadcrumbs.filter(({type, level}) => {
+      if (
+        breadcrumbFilterGroupLevels.length > 0 &&
+        breadcrumbFilterGroupTypes.length > 0
+      ) {
+        return (
+          breadcrumbFilterGroupTypes.includes(type) ||
+          breadcrumbFilterGroupLevels.includes(String(level) as BreadcrumbLevelType)
         );
-        if (foundBreadcrumbFilterData) {
-          return foundBreadcrumbFilterData.isChecked;
-        }
+      }
 
-        return false;
-      }),
-      breadcrumbFilterGroups,
+      if (breadcrumbFilterGroupLevels.length > 0) {
+        return breadcrumbFilterGroupLevels.includes(String(level) as BreadcrumbLevelType);
+      }
+
+      return breadcrumbFilterGroupTypes.includes(type);
     });
+
+    this.setState(
+      {
+        filteredByFilter,
+        filterGroups,
+      },
+      () => {
+        this.handleFilterBySearchTerm(this.state.searchTerm);
+      }
+    );
   };
 
-  handleFilterBySearchTerm = (value: string) => {
-    const {filteredBreadcrumbsByCustomSearch} = this.state;
+  handleFilterBySearchTerm = (value = '') => {
+    const {filteredByFilter} = this.state;
 
     const searchTerm = value.toLocaleLowerCase();
 
-    const filteredBreadcrumbs = filteredBreadcrumbsByCustomSearch.filter(
+    const filteredBreadcrumbs = filteredByFilter.filter(
       item =>
         !!['category', 'message', 'level', 'timestamp'].find(prop => {
           const searchValue = item[prop];
@@ -236,9 +274,24 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
     });
   };
 
+  handleResetFilter = () => {
+    this.setState(
+      prevState => ({
+        filteredByFilter: prevState.breadcrumbs,
+        filterGroups: prevState.filterGroups.map(filterGroup => ({
+          ...filterGroup,
+          isChecked: true,
+        })),
+      }),
+      () => {
+        this.handleFilterBySearchTerm(this.state.searchTerm);
+      }
+    );
+  };
+
   render() {
     const {type} = this.props;
-    const {breadcrumbFilterGroups, searchTerm} = this.state;
+    const {filterGroups, searchTerm} = this.state;
 
     const {
       collapsedQuantity,
@@ -257,10 +310,7 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
         }
         actions={
           <Search>
-            <BreadcrumbFilter
-              onFilter={this.handleFilter}
-              filterGroups={breadcrumbFilterGroups}
-            />
+            <BreadcrumbFilter onFilter={this.handleFilter} filterGroups={filterGroups} />
             <StyledSearchBar
               placeholder={t('Search breadcrumbs\u2026')}
               onChange={this.handleFilterBySearchTerm}
@@ -282,9 +332,16 @@ class BreadcrumbsContainer extends React.Component<Props, State> {
               />
             </BreadcrumbList>
           ) : (
-            <EmptyStateWarning small>
+            <EmptyMessage
+              icon={<IconWarning size="xl" />}
+              action={
+                <Button onClick={this.handleResetFilter} priority="primary">
+                  {t('Reset Filter')}
+                </Button>
+              }
+            >
               {t('Sorry, no breadcrumbs match your search query.')}
-            </EmptyStateWarning>
+            </EmptyMessage>
           )}
         </Content>
       </EventDataSection>
@@ -332,9 +389,10 @@ const StyledSearchBar = styled(SearchBar)`
     border-top-left-radius: 0;
     border-bottom-left-radius: 0;
   }
+  .search-clear-form,
   .icon-search {
+    top: 0 !important;
     height: 32px;
-    top: 0;
     display: flex;
     align-items: center;
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
index 12b1e629a7..d7d41a3475 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbsListHeader.tsx
@@ -11,7 +11,7 @@ const BreadcrumbsListHeader = () => {
     <BreadcrumbListHeaderWrapper>
       <BreadcrumbListHeaderItem>{t('Type')}</BreadcrumbListHeaderItem>
       <BreadcrumbListHeaderItem>{t('Category')}</BreadcrumbListHeaderItem>
-      <BreadcrumbListHeaderItem>{t('Summary')}</BreadcrumbListHeaderItem>
+      <BreadcrumbListHeaderItem>{t('Description')}</BreadcrumbListHeaderItem>
       <BreadcrumbListHeaderItem>{t('Level')}</BreadcrumbListHeaderItem>
       <BreadcrumbListHeaderItem>{t('Datetime')}</BreadcrumbListHeaderItem>
     </BreadcrumbListHeaderWrapper>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx
index 7da3639b29..82a07c5c9e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertBreadcrumbType.tsx
@@ -1,12 +1,11 @@
+import {defined} from 'app/utils';
+
 import {Breadcrumb, BreadcrumbType} from '../breadcrumbs/types';
 
 function convertBreadcrumbType(breadcrumb: Breadcrumb): Breadcrumb {
   // special case for 'ui.' and `sentry.` category breadcrumbs
   // TODO: find a better way to customize UI around non-schema data
-  if (
-    (!breadcrumb.type || breadcrumb.type === BreadcrumbType.DEFAULT) &&
-    breadcrumb.category
-  ) {
+  if (breadcrumb.type === BreadcrumbType.DEFAULT && defined(breadcrumb?.category)) {
     const [category, subcategory] = breadcrumb.category.split('.');
     if (category === 'ui') {
       return {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbTypeDetails.tsx
similarity index 92%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbTypeDetails.tsx
index 569c0657c2..3e6eff1727 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getBreadcrumbTypeDetails.tsx
@@ -10,7 +10,7 @@ import {t} from 'app/locale';
 
 import {BreadcrumbType, BreadcrumbDetails} from '../breadcrumbs/types';
 
-function getBreadcrumbDetails(breadcrumbType: BreadcrumbType): BreadcrumbDetails {
+function getBreadcrumbTypeDetails(breadcrumbType: BreadcrumbType): BreadcrumbDetails {
   switch (breadcrumbType) {
     case BreadcrumbType.USER:
     case BreadcrumbType.UI: {
@@ -71,4 +71,4 @@ function getBreadcrumbDetails(breadcrumbType: BreadcrumbType): BreadcrumbDetails
   }
 }
 
-export default getBreadcrumbDetails;
+export default getBreadcrumbTypeDetails;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
index d1d311e3ba..d521c71217 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
@@ -29,13 +29,18 @@ const BreadcrumbListItem = styled('li')<{hasError?: boolean}>`
   :last-child:before {
     bottom: calc(100% - ${space(1)});
   }
-  ${p =>
-    p.hasError &&
-    css`
-      background: #fffcfb;
-      border: 1px solid #e7c0bc;
-      margin: -1px;
-    `}
+  :last-child {
+    ${p =>
+      p.hasError
+        ? css`
+            background: #fffcfb;
+            border: 1px solid #e7c0bc;
+            margin: -1px;
+          `
+        : css`
+            border-bottom: 0;
+          `}
+  }
 `;
 
 const BreadCrumbIconWrapper = styled('div')<{
