commit 2fcb0a524f5fd394962951cfb746726437e809f8
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 1 14:00:58 2015 -0700

    Add restricted data for shared group details endpoint

diff --git a/src/sentry/api/endpoints/shared_group_details.py b/src/sentry/api/endpoints/shared_group_details.py
index c3525d1233..fed3c2ff82 100644
--- a/src/sentry/api/endpoints/shared_group_details.py
+++ b/src/sentry/api/endpoints/shared_group_details.py
@@ -1,8 +1,12 @@
 from __future__ import absolute_import, print_function
 
-from sentry.api import client
+from rest_framework.response import Response
+
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import (
+    serialize, SharedEventSerializer, SharedGroupSerializer
+)
 from sentry.models import Group
 
 
@@ -27,6 +31,11 @@ class SharedGroupDetailsEndpoint(Endpoint):
         except Group.DoesNotExist:
             raise ResourceDoesNotExist
 
+        event = group.get_latest_event()
+
+        context = serialize(group, request.user, SharedGroupSerializer)
+        context['latestEvent'] = serialize(event, request.user, SharedEventSerializer)
+
         # TODO(dcramer): use specific serializer for public group and embed
         # event details as part of api response
-        return client.get('/groups/{}/'.format(group.id), request.user, request.auth)
+        return Response(context)
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index d63ab1dc4f..17d67015a5 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -6,7 +6,7 @@ from sentry.models import Event
 
 @register(Event)
 class EventSerializer(Serializer):
-    def _get_entries(self, event, user):
+    def _get_entries(self, event, user, is_public=False):
         # XXX(dcramer): These are called entries for future-proofing
         interface_list = []
         for key, interface in event.interfaces.iteritems():
@@ -15,7 +15,7 @@ class EventSerializer(Serializer):
                 continue
 
             entry = {
-                'data': interface.get_api_context(),
+                'data': interface.get_api_context(is_public=is_public),
                 'type': interface.get_alias(),
             }
             interface_list.append((interface, entry))
@@ -23,7 +23,7 @@ class EventSerializer(Serializer):
 
         return [i[1] for i in interface_list]
 
-    def get_attrs(self, item_list, user):
+    def get_attrs(self, item_list, user, is_public=False):
         Event.objects.bind_nodes(item_list, 'data')
 
         results = {}
@@ -35,13 +35,12 @@ class EventSerializer(Serializer):
                 user_data = None
 
             results[item] = {
-                'entries': self._get_entries(item, user),
+                'entries': self._get_entries(item, user, is_public=is_public),
                 'user': user_data,
             }
         return results
 
     def serialize(self, obj, attrs, user):
-
         d = {
             'id': str(obj.id),
             'groupID': obj.group.id,
@@ -58,3 +57,16 @@ class EventSerializer(Serializer):
             'timeSpent': obj.time_spent,
         }
         return d
+
+
+class SharedEventSerializer(EventSerializer):
+    def get_attrs(self, item_list, user):
+        return super(SharedEventSerializer, self).get_attrs(
+            item_list, user, is_public=True
+        )
+
+    def serialize(self, obj, attrs, user):
+        result = super(SharedEventSerializer, self).serialize(obj, attrs, user)
+        del result['context']
+        del result['user']
+        return result
diff --git a/src/sentry/api/serializers/models/group.py b/src/sentry/api/serializers/models/group.py
index edfa757a58..afb774dada 100644
--- a/src/sentry/api/serializers/models/group.py
+++ b/src/sentry/api/serializers/models/group.py
@@ -164,3 +164,7 @@ class StreamGroupSerializer(GroupSerializer):
         }
 
         return result
+
+
+class SharedGroupSerializer(GroupSerializer):
+    pass
diff --git a/src/sentry/interfaces/base.py b/src/sentry/interfaces/base.py
index facd82c2da..76a1690d32 100644
--- a/src/sentry/interfaces/base.py
+++ b/src/sentry/interfaces/base.py
@@ -65,7 +65,7 @@ class Interface(object):
     def to_python(cls, data):
         return cls(data)
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         return self.to_json()
 
     def to_json(self):
diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index e9f0bdc464..aae2b55c0e 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -69,9 +69,9 @@ class SingleException(Interface):
             'stacktrace': stacktrace,
         }
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         if self.stacktrace:
-            stacktrace = self.stacktrace.get_api_context()
+            stacktrace = self.stacktrace.get_api_context(is_public=is_public)
         else:
             stacktrace = None
 
@@ -190,9 +190,12 @@ class Exception(Interface):
             'exc_omitted': self.exc_omitted,
         }
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         return {
-            'values': [v.get_api_context() for v in self.values],
+            'values': [
+                v.get_api_context(is_public=is_public)
+                for v in self.values
+            ],
             'excOmitted': self.exc_omitted,
         }
 
diff --git a/src/sentry/interfaces/http.py b/src/sentry/interfaces/http.py
index cdacd7083b..ad86c911fa 100644
--- a/src/sentry/interfaces/http.py
+++ b/src/sentry/interfaces/http.py
@@ -212,3 +212,20 @@ class Http(Interface):
 
     def get_title(self):
         return _('Request')
+
+    def get_api_context(self, is_public=False):
+        data = {
+            'method': self.method,
+            'url': self.url,
+            'query_string': self.query_string,
+            'fragment': self.fragment,
+            'data': self.data,
+            # TODO(dcramer): scrub headers for IPs/etc when is_public
+            'headers': self.headers,
+        }
+        if not is_public:
+            data.update({
+                'cookies': self.cookies,
+                'env': self.env,
+            })
+        return data
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 09111b039d..d596bbd53b 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -214,8 +214,8 @@ class Frame(Interface):
 
         return cls(**kwargs)
 
-    def get_api_context(self):
-        return {
+    def get_api_context(self, is_public=False):
+        data = {
             'filename': self.filename,
             'absPath': self.abs_path,
             'module': self.module,
@@ -231,9 +231,10 @@ class Frame(Interface):
             'colNo': self.colno,
             'inApp': self.in_app,
             'errors': self.errors,
-            'vars': self.vars,
-
         }
+        if not is_public:
+            data['vars'] = self.vars
+        return data
 
     def is_url(self):
         if not self.abs_path:
@@ -473,9 +474,9 @@ class Stacktrace(Interface):
 
         return cls(**kwargs)
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         return {
-            'frames': [f.get_api_context() for f in self.frames],
+            'frames': [f.get_api_context(is_public=is_public) for f in self.frames],
             'framesOmitted': self.frames_omitted,
         }
 
diff --git a/src/sentry/interfaces/user.py b/src/sentry/interfaces/user.py
index b6620ea09a..0dc4ce0c39 100644
--- a/src/sentry/interfaces/user.py
+++ b/src/sentry/interfaces/user.py
@@ -59,7 +59,7 @@ class User(Interface):
         kwargs['data'] = trim_dict(extra_data)
         return cls(**kwargs)
 
-    def get_api_context(self):
+    def get_api_context(self, is_public=False):
         return {
             'id': self.id,
             'email': self.email,
diff --git a/tests/sentry/api/endpoints/test_shared_group_details.py b/tests/sentry/api/endpoints/test_shared_group_details.py
index ccc1dc6303..21e1ad32f3 100644
--- a/tests/sentry/api/endpoints/test_shared_group_details.py
+++ b/tests/sentry/api/endpoints/test_shared_group_details.py
@@ -10,6 +10,7 @@ class SharedGroupDetailsTest(APITestCase):
         self.login_as(user=self.user)
 
         group = self.create_group()
+        event = self.create_event(group=group)
 
         url = reverse('sentry-api-0-shared-group-details', kwargs={
             'share_id': group.get_share_id(),
@@ -18,3 +19,4 @@ class SharedGroupDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
         assert response.data['id'] == str(group.id)
+        assert response.data['latestEvent']['id'] == str(event.id)
