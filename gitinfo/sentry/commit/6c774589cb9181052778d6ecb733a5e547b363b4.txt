commit 6c774589cb9181052778d6ecb733a5e547b363b4
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 22 20:08:16 2014 -0700

    Add create organization view

diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 45dc8c904d..3a608e658a 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -31,8 +31,9 @@ class Permission(object):
 
 
 class Permissions(object):
-    ADD_PROJECT = Permission('add_project', 'create new projects')
+    ADD_ORGANIZATION = Permission('add_organization', 'create new organizations')
     ADD_TEAM = Permission('add_team', 'create new teams')
+    ADD_PROJECT = Permission('add_project', 'create new projects')
 
 
 def requires_login(func):
@@ -47,19 +48,15 @@ def requires_login(func):
 
 @cached_for_request
 @requires_login
-def can_create_projects(user, team=None):
+def can_create_organizations(user):
     """
     Returns a boolean describing whether a user has the ability to
-    create new projects.
+    create new organizations.
     """
     if user.is_superuser:
         return True
 
-    # must be an owner of team
-    if team and not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
-        return False
-
-    result = plugins.first('has_perm', user, 'add_project', team)
+    result = plugins.first('has_perm', user, 'add_organization')
     if result is False:
         return result
 
@@ -71,7 +68,7 @@ def can_create_projects(user, team=None):
 def can_create_teams(user):
     """
     Returns a boolean describing whether a user has the ability to
-    create new projects.
+    create new teams.
     """
     if user.is_superuser:
         return True
@@ -83,6 +80,27 @@ def can_create_teams(user):
     return True
 
 
+@cached_for_request
+@requires_login
+def can_create_projects(user, team=None):
+    """
+    Returns a boolean describing whether a user has the ability to
+    create new projects.
+    """
+    if user.is_superuser:
+        return True
+
+    # must be an owner of team
+    if team and not team.member_set.filter(user=user, type=MEMBER_OWNER).exists():
+        return False
+
+    result = plugins.first('has_perm', user, 'add_project', team)
+    if result is False:
+        return result
+
+    return True
+
+
 @requires_login
 def can_set_public_projects(user):
     """
diff --git a/src/sentry/templates/sentry/create-organization.html b/src/sentry/templates/sentry/create-organization.html
new file mode 100644
index 0000000000..e8df22fb6c
--- /dev/null
+++ b/src/sentry/templates/sentry/create-organization.html
@@ -0,0 +1,31 @@
+{% extends "sentry/bases/modal.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "New Organization" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+    <section class="body">
+        <div class="page-header">
+            <h2>{% trans "Create a New Organization" %}</h2>
+        </div>
+
+        <p>{% blocktrans %}Organizations represent the top level in your hierarchy. You'll be able to bundle a collection of teams within an organization as well as give organization-wide permissions to users.{% endblocktrans %}</p>
+
+        <br>
+
+        <form class="form-stacked" action="" method="post">
+            {% csrf_token %}
+            <fieldset>
+                {{ form|as_crispy_errors }}
+                {% for field in form %}
+                    {{ field|as_crispy_field }}
+                {% endfor %}
+            </fieldset>
+            <div class="actions">
+                <button type="submit" class="btn btn-primary">{% trans "Create Organization" %}</button>
+            </div>
+        </form>
+    </section>
+{% endblock %}
diff --git a/src/sentry/web/frontend/base.py b/src/sentry/web/frontend/base.py
index c9d1504d9a..42efd56140 100644
--- a/src/sentry/web/frontend/base.py
+++ b/src/sentry/web/frontend/base.py
@@ -120,12 +120,26 @@ class OrganizationMixin(object):
 
 
 class BaseView(View, OrganizationMixin):
+    auth_required = True
+
     @method_decorator(csrf_protect)
     def dispatch(self, request, *args, **kwargs):
+        if self.auth_required and not request.user.is_authenticated():
+            request.session['_next'] = request.get_full_path()
+            return HttpResponseRedirect(get_login_url())
+
+        if not self.has_permission(request, *args, **kwargs):
+            redirect_uri = self.get_no_permission_url(request, *args, **kwargs)
+            return HttpResponseRedirect(redirect_uri)
+
         self.request = request
         self.default_context = self.get_context_data(request, *args, **kwargs)
+
         return super(BaseView, self).dispatch(request, *args, **kwargs)
 
+    def has_permission(self, request, *args, **kwargs):
+        return True
+
     def get_context_data(self, request, **kwargs):
         context = csrf(request)
         return context
@@ -162,10 +176,6 @@ class OrganizationView(BaseView):
         return context
 
     def dispatch(self, request, organization_id=None, *args, **kwargs):
-        if not request.user.is_authenticated():
-            request.session['_next'] = request.get_full_path()
-            return HttpResponseRedirect(get_login_url())
-
         # TODO:
         # if access is MEMBER_OWNER:
         #     _wrapped = login_required(sudo_required(_wrapped))
diff --git a/src/sentry/web/frontend/create_organization.py b/src/sentry/web/frontend/create_organization.py
new file mode 100644
index 0000000000..e9beb498d8
--- /dev/null
+++ b/src/sentry/web/frontend/create_organization.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+from django import forms
+from django.core.urlresolvers import reverse
+from django.http import HttpResponseRedirect
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.models import Organization, Team
+from sentry.permissions import can_create_organizations
+from sentry.web.frontend.base import BaseView
+
+
+class NewOrganizationForm(forms.ModelForm):
+    name = forms.CharField(label=_('Organization Name'), max_length=200,
+        widget=forms.TextInput(attrs={'placeholder': _('My Company')}))
+
+    class Meta:
+        fields = ('name',)
+        model = Organization
+
+
+class CreateOrganizationView(BaseView):
+    def get_form(self, request):
+        return NewOrganizationForm(request.POST or None)
+
+    def has_permission(self, request):
+        if not can_create_organizations(request.user):
+            return False
+        return True
+
+    def get(self, request):
+        form = self.get_form(request)
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/create-organization.html', context)
+
+    def post(self, request):
+        form = self.get_form(request)
+        if form.is_valid():
+            org = form.save(commit=False)
+            org.owner = request.user
+            org.save()
+
+            # create a default team for this org
+            team = Team.objects.create(
+                name=org.name,
+                organization=org,
+                owner=org.owner,
+            )
+            return HttpResponseRedirect(reverse('sentry-new-project', args=[team.slug]))
+
+        context = {
+            'form': form,
+        }
+
+        return self.respond('sentry/create-organization.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 42d12abbbd..b5c648d95c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -39,6 +39,7 @@ from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.organization_settings import OrganizationSettingsView
 from sentry.web.frontend.organization_teams import OrganizationTeamsView
 from sentry.web.frontend.create_access_group import CreateAccessGroupView
+from sentry.web.frontend.create_organization import CreateOrganizationView
 from sentry.web.frontend.create_project import CreateProjectView
 from sentry.web.frontend.create_team import CreateTeamView
 from sentry.web.frontend.create_team_member import CreateTeamMemberView
@@ -117,6 +118,8 @@ urlpatterns += patterns('',
     url(r'^account/settings/social/', include('social_auth.urls')),
 
     # Organizations
+    url(r'^organizations/new/$', CreateOrganizationView.as_view(),
+        name='sentry-create-organization'),
     url(r'^organizations/(?P<organization_id>\d+)/$', OrganizationHomeView.as_view(),
         name='sentry-organization-home'),
     url(r'^organizations/(?P<organization_id>\d+)/members/$', OrganizationMembersView.as_view(),
diff --git a/tests/sentry/web/frontend/test_create_organization.py b/tests/sentry/web/frontend/test_create_organization.py
new file mode 100644
index 0000000000..dfa157e79a
--- /dev/null
+++ b/tests/sentry/web/frontend/test_create_organization.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import Organization
+from sentry.testutils import TestCase
+
+
+class CreateOrganizationTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-create-organization')
+
+    def test_renders_with_context(self):
+        self.login_as(self.user)
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed(resp, 'sentry/create-organization.html')
+        assert resp.context['form']
+
+    def test_valid_params(self):
+        self.login_as(self.user)
+        resp = self.client.post(self.path, {
+            'name': 'bar',
+        })
+        assert resp.status_code == 302
+
+        org = Organization.objects.get(name='bar')
+
+        assert org.owner == self.user
+
+        team = org.team_set.get()
+
+        assert team.name == 'bar'
+        assert team.owner == org.owner
+
+        redirect_uri = reverse('sentry-new-project', args=[team.slug])
+        assert resp['Location'] == 'http://testserver' + redirect_uri
