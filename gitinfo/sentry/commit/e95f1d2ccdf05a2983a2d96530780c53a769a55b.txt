commit e95f1d2ccdf05a2983a2d96530780c53a769a55b
Author: ted kaemming <ted@kaemming.com>
Date:   Tue Jan 23 17:09:40 2018 -0800

    feat(rules): Include if environment is new for group in EventState (#7016)

diff --git a/src/sentry/rules/base.py b/src/sentry/rules/base.py
index 0fcc6d371f..f7ca8dbc5d 100644
--- a/src/sentry/rules/base.py
+++ b/src/sentry/rules/base.py
@@ -113,6 +113,7 @@ class RuleBase(object):
 
 
 class EventState(object):
-    def __init__(self, is_new, is_regression):
+    def __init__(self, is_new, is_regression, is_new_group_environment):
         self.is_new = is_new
         self.is_regression = is_regression
+        self.is_new_group_environment = is_new_group_environment
diff --git a/src/sentry/rules/processor.py b/src/sentry/rules/processor.py
index 9887cc7cb3..64aa7c4bc9 100644
--- a/src/sentry/rules/processor.py
+++ b/src/sentry/rules/processor.py
@@ -36,13 +36,14 @@ class EventCompatibilityProxy(object):
 class RuleProcessor(object):
     logger = logging.getLogger('sentry.rules')
 
-    def __init__(self, event, is_new, is_regression):
+    def __init__(self, event, is_new, is_regression, is_new_group_environment):
         self.event = EventCompatibilityProxy(event)
         self.group = event.group
         self.project = event.project
 
         self.is_new = is_new
         self.is_regression = is_regression
+        self.is_new_group_environment = is_new_group_environment
 
         self.futures_by_cb = defaultdict(list)
 
@@ -73,6 +74,7 @@ class RuleProcessor(object):
         return EventState(
             is_new=self.is_new,
             is_regression=self.is_regression,
+            is_new_group_environment=self.is_new_group_environment,
         )
 
     def apply_rule(self, rule):
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 5c53a3670c..d5b98f946e 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -52,7 +52,7 @@ def _capture_stats(event, is_new):
 
 
 @instrumented_task(name='sentry.tasks.post_process.post_process_group')
-def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
+def post_process_group(event, is_new, is_regression, is_sample, is_new_group_environment, **kwargs):
     """
     Fires post processing hooks for a group.
     """
@@ -83,7 +83,7 @@ def post_process_group(event, is_new, is_regression, is_sample, **kwargs):
     # we process snoozes before rules as it might create a regression
     process_snoozes(event.group)
 
-    rp = RuleProcessor(event, is_new, is_regression)
+    rp = RuleProcessor(event, is_new, is_regression, is_new_group_environment)
     has_alert = False
     # TODO(dcramer): ideally this would fanout, but serializing giant
     # objects back and forth isn't super efficient
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index f85553c059..c1dfecd040 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -393,6 +393,7 @@ class RuleTestCase(TestCase):
     def get_state(self, **kwargs):
         kwargs.setdefault('is_new', True)
         kwargs.setdefault('is_regression', True)
+        kwargs.setdefault('is_new_group_environment', True)
         return EventState(**kwargs)
 
     def assertPasses(self, rule, event=None, **kwargs):
diff --git a/tests/sentry/rules/test_processor.py b/tests/sentry/rules/test_processor.py
index 17fa6ec09f..c43d18d33d 100644
--- a/tests/sentry/rules/test_processor.py
+++ b/tests/sentry/rules/test_processor.py
@@ -32,7 +32,7 @@ class RuleProcessorTest(TestCase):
             }
         )
 
-        rp = RuleProcessor(event, is_new=True, is_regression=True)
+        rp = RuleProcessor(event, is_new=True, is_regression=True, is_new_group_environment=True)
         results = list(rp.apply())
         assert len(results) == 1
         callback, futures = results[0]
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 39cd36b4e4..d9636eb610 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -32,9 +32,10 @@ class PostProcessGroupTest(TestCase):
             is_new=True,
             is_regression=False,
             is_sample=False,
+            is_new_group_environment=True,
         )
 
-        mock_processor.assert_called_once_with(event, True, False)
+        mock_processor.assert_called_once_with(event, True, False, True)
         mock_processor.return_value.apply.assert_called_once_with()
 
         mock_callback.assert_called_once_with(event, mock_futures)
@@ -63,6 +64,7 @@ class PostProcessGroupTest(TestCase):
             is_new=True,
             is_regression=False,
             is_sample=False,
+            is_new_group_environment=True,
         )
 
         assert event.group == group2
@@ -82,6 +84,7 @@ class PostProcessGroupTest(TestCase):
             is_new=True,
             is_regression=False,
             is_sample=False,
+            is_new_group_environment=True,
         )
 
         assert not GroupSnooze.objects.filter(
@@ -104,6 +107,7 @@ class PostProcessGroupTest(TestCase):
             is_new=True,
             is_regression=False,
             is_sample=False,
+            is_new_group_environment=True,
         )
 
         assert GroupSnooze.objects.filter(
@@ -127,6 +131,7 @@ class PostProcessGroupTest(TestCase):
                 is_new=False,
                 is_regression=False,
                 is_sample=False,
+                is_new_group_environment=False,
             )
 
         mock_process_service_hook.delay.assert_called_once_with(
@@ -159,6 +164,7 @@ class PostProcessGroupTest(TestCase):
                 is_new=False,
                 is_regression=False,
                 is_sample=False,
+                is_new_group_environment=False,
             )
 
         mock_process_service_hook.delay.assert_called_once_with(
@@ -187,6 +193,7 @@ class PostProcessGroupTest(TestCase):
                 is_new=False,
                 is_regression=False,
                 is_sample=False,
+                is_new_group_environment=False,
             )
 
         assert not mock_process_service_hook.delay.mock_calls
@@ -208,6 +215,7 @@ class PostProcessGroupTest(TestCase):
                 is_new=True,
                 is_regression=False,
                 is_sample=False,
+                is_new_group_environment=False,
             )
 
         assert not mock_process_service_hook.delay.mock_calls
