commit c6fecbdee6bad0c37076ee74670451aa0cf5d322
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 25 16:00:13 2016 +0100

    Move symsynd behind feature flag

diff --git a/setup.py b/setup.py
index fd9c15b22d..2d3c8a1eb9 100755
--- a/setup.py
+++ b/setup.py
@@ -131,12 +131,15 @@ install_requires = [
     'urllib3>=1.14,<1.15',
     'uwsgi>2.0.0,<2.1.0',
     'rb>=1.4.0,<2.0.0',
-    'symsynd>=0.1.0,<1.0.0',
 ]
 
 postgres_requires = [
 ]
 
+dsym_requires = [
+    'symsynd>=0.1.0,<1.0.0',
+]
+
 
 class BuildJavascriptCommand(Command):
     description = 'build javascript support files'
@@ -456,6 +459,7 @@ setup(
         'tests': tests_require,
         'dev': dev_requires,
         'postgres': install_requires + postgres_requires,
+        'dsym': dsym_requires,
     },
     cmdclass=cmdclass,
     license='BSD',
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index d72c8302d7..b3901e75a0 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -4,7 +4,7 @@ import posixpath
 
 from sentry.models import Project
 from sentry.plugins import Plugin2
-from sentry.lang.native.symbolizer import make_symbolizer
+from sentry.lang.native.symbolizer import make_symbolizer, have_symsynd
 
 
 def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
@@ -81,4 +81,6 @@ class NativePlugin(Plugin2):
     can_disable = False
 
     def get_event_preprocessors(self, **kwargs):
+        if not have_symsynd:
+            return []
         return [preprocess_apple_crash_event]
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 2347c6ea4d..69789200f9 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -1,10 +1,17 @@
-from symsynd.driver import Driver
-from symsynd.report import ReportSymbolizer
+try:
+    from symsynd.driver import Driver
+    from symsynd.report import ReportSymbolizer
+    have_symsynd = True
+except ImportError:
+    have_symsynd = False
 
 from sentry.lang.native.dsymcache import dsymcache
 
 
 def make_symbolizer(project, binary_images):
+    if not have_symsynd:
+        raise RuntimeError('symsynd is unavailable.  Install sentry with '
+                           'the dsym feature flag.')
     driver = Driver()
     dsym_path, loaded = dsymcache.fetch_dsyms(project,
         [x['uuid'] for x in binary_images])
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 2b817440ae..eb023bd291 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -13,7 +13,11 @@ import shutil
 import tempfile
 from django.db import models, transaction, IntegrityError
 
-from symsynd.mach import get_macho_uuids
+try:
+    from symsynd.mach import get_macho_uuids
+    have_symsynd = True
+except ImportError:
+    have_symsynd = False
 
 from sentry.db.models import FlexibleForeignKey, Model, sane_repr
 from sentry.models.file import File
@@ -92,6 +96,9 @@ class DSymFile(Model):
         """Creates all missing dsym files from the given zip file.  This
         returns a list of all `DSymFiles` created.
         """
+        if not have_symsynd:
+            raise RuntimeError('symsynd is unavailable.  Install sentry with '
+                               'the dsym feature flag.')
         scratchpad = tempfile.mkdtemp()
         try:
             safe_extract_zip(fileobj, scratchpad)
