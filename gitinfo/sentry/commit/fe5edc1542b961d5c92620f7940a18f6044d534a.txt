commit fe5edc1542b961d5c92620f7940a18f6044d534a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Mar 6 11:40:22 2018 -0800

    feat(stream): Do not append environment name to querystring (#7469)

diff --git a/src/sentry/static/sentry/app/utils/queryString.jsx b/src/sentry/static/sentry/app/utils/queryString.jsx
index 22c3d0e13c..f7546de633 100644
--- a/src/sentry/static/sentry/app/utils/queryString.jsx
+++ b/src/sentry/static/sentry/app/utils/queryString.jsx
@@ -17,8 +17,13 @@ export function getQueryStringWithEnvironment(qs, env) {
   );
 }
 
+export function getQueryStringWithoutEnvironment(qs) {
+  return formatQueryString(qs.replace(/environment:[^\s]*/g, ''));
+}
+
 export default {
   formatQueryString,
   getQueryEnvironment,
   getQueryStringWithEnvironment,
+  getQueryStringWithoutEnvironment,
 };
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index bb03e15606..1a71d7b16e 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -80,6 +80,7 @@ const Stream = createReactClass({
       sort,
       isSidebarVisible: false,
       processingIssues: null,
+      environment: this.props.environment,
     };
   },
 
@@ -99,14 +100,9 @@ const Stream = createReactClass({
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.environment !== this.props.environment) {
-      const environment = nextProps.environment;
-      const query = queryString.getQueryStringWithEnvironment(
-        this.state.query,
-        environment === null ? null : environment.name
-      );
       this.setState(
         {
-          query,
+          environment: nextProps.environment,
         },
         this.fetchData
       );
@@ -305,8 +301,7 @@ const Stream = createReactClass({
     // Remove leading and trailing whitespace
     let query = queryString.formatQueryString(this.state.query);
 
-    let {environment} = this.props;
-    let activeEnvName = environment ? environment.name : null;
+    let {environment} = this.state;
 
     let requestParams = {
       query,
@@ -321,18 +316,8 @@ const Stream = createReactClass({
     const queryEnvironment = queryString.getQueryEnvironment(query);
 
     if (queryEnvironment !== null) {
-      // Set the global environment to the one specified by the saved search
-      if (queryEnvironment !== activeEnvName) {
-        if (this.props.hasEnvironmentsFeature) {
-          let env = EnvironmentStore.getByName(queryEnvironment);
-          setActiveEnvironment(env);
-        }
-      }
       requestParams.environment = queryEnvironment;
     } else if (environment) {
-      // Set the environment of the query to match the global settings
-      query = queryString.getQueryStringWithEnvironment(query, environment.name);
-      requestParams.query = query;
       requestParams.environment = environment.name;
     }
 
@@ -460,6 +445,17 @@ const Stream = createReactClass({
       // if query is the same, just re-fetch data
       this.fetchData();
     } else {
+      // We no longer want to support environments specified in the querystring
+      // To keep this aligned with old behavior though we'll update the global environment
+      // and remove it from the query if someone does provide it this way
+      if (this.props.hasEnvironmentsFeature) {
+        const queryEnvironment = queryString.getQueryEnvironment(query);
+        const env = EnvironmentStore.getByName(queryEnvironment);
+        setActiveEnvironment(env);
+
+        query = queryString.getQueryStringWithoutEnvironment(query);
+      }
+
       this.setState(
         {
           query,
@@ -515,7 +511,6 @@ const Stream = createReactClass({
     let path = this.state.searchId
       ? `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/`
       : `/${params.orgId}/${params.projectId}/`;
-
     browserHistory.push({
       pathname: path,
       query: queryParams,
diff --git a/tests/js/spec/utils/queryString.spec.js b/tests/js/spec/utils/queryString.spec.js
index c002ddf3d4..4bebbac1a4 100644
--- a/tests/js/spec/utils/queryString.spec.js
+++ b/tests/js/spec/utils/queryString.spec.js
@@ -52,3 +52,19 @@ describe('getQueryStringWithEnvironment', function() {
     );
   });
 });
+
+describe('getQueryStringWithoutEnvironment', function() {
+  it('removes environment from querystring', function() {
+    const qs = 'is:unresolved environment:development is:unassigned';
+    expect(utils.getQueryStringWithoutEnvironment(qs)).toBe(
+      'is:unresolved is:unassigned'
+    );
+  });
+
+  it('removes empty environment from querystring', function() {
+    const qs = 'is:unresolved environment: is:unassigned';
+    expect(utils.getQueryStringWithoutEnvironment(qs)).toBe(
+      'is:unresolved is:unassigned'
+    );
+  });
+});
