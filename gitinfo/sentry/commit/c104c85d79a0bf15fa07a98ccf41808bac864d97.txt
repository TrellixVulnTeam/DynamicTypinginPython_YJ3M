commit c104c85d79a0bf15fa07a98ccf41808bac864d97
Author: Mark Story <mark@mark-story.com>
Date:   Tue Jan 29 15:13:01 2019 -0500

    fix(issues) Separate loading states (#11766)
    
    Track saved search loading state separately from issue results. This
    lets us display a loading spinner for only the issue list when a search
    query is updated.
    
    Refs APP-1051

diff --git a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
index 3f33c8590d..132cfda1ca 100644
--- a/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStream/overview.jsx
@@ -69,16 +69,17 @@ const OrganizationStream = createReactClass({
 
     return {
       groupIds: [],
-      loading: true,
       selectAllActive: false,
       realtimeActive,
       pageLinks: '',
       queryCount: null,
       error: false,
       isSidebarVisible: false,
+      savedSearchLoading: true,
       savedSearch: null,
       savedSearchList: [],
       processingIssues: null,
+      issuesLoading: true,
       tagsLoading: true,
       memberList: {},
       tags: TagStore.getAllTags(),
@@ -151,8 +152,12 @@ const OrganizationStream = createReactClass({
       prevState.savedSearch !== this.state.savedSearch
     ) {
       this.fetchData();
-    } else if (!this.lastRequest && prevState.loading === false && this.state.loading) {
-      // Reload if we went from not loading to loading.
+    } else if (
+      !this.lastRequest &&
+      prevState.issuesLoading === false &&
+      this.state.issuesLoading
+    ) {
+      // Reload if we issues are loading or their loading state changed.
       // This can happen when transitionTo is called
       this.fetchData();
     }
@@ -237,7 +242,7 @@ const OrganizationStream = createReactClass({
     GroupStore.loadInitialData([]);
 
     this.setState({
-      loading: true,
+      issuesLoading: true,
       queryCount: null,
       error: false,
     });
@@ -289,7 +294,7 @@ const OrganizationStream = createReactClass({
 
         this.setState({
           error: false,
-          loading: false,
+          issuesLoading: false,
           queryCount:
             typeof queryCount !== 'undefined' ? parseInt(queryCount, 10) || 0 : 0,
           queryMaxCount:
@@ -300,7 +305,7 @@ const OrganizationStream = createReactClass({
       error: err => {
         this.setState({
           error: parseApiError(err),
-          loading: false,
+          issuesLoading: false,
         });
       },
       complete: jqXHR => {
@@ -355,7 +360,7 @@ const OrganizationStream = createReactClass({
   },
 
   onSavedSearchSelect(search) {
-    this.setState({savedSearch: search, loading: true}, this.transitionTo);
+    this.setState({savedSearch: search, issuesLoading: true}, this.transitionTo);
   },
 
   onRealtimeChange(realtime) {
@@ -476,7 +481,7 @@ const OrganizationStream = createReactClass({
         pathname: path,
         query,
       });
-      this.setState({loading: true});
+      this.setState({issuesLoading: true});
     }
   },
 
@@ -494,7 +499,10 @@ const OrganizationStream = createReactClass({
       let hasGuideAnchor = userDateJoined > dateCutoff && id === topIssue;
 
       let group = GroupStore.get(id);
-      let members = memberList[group.project.slug] || null;
+      let members = null;
+      if (group && group.project) {
+        members = memberList[group.project.slug] || null;
+      }
 
       return (
         <StreamGroup
@@ -528,7 +536,7 @@ const OrganizationStream = createReactClass({
     let selectedProjects = this.getGlobalSearchProjects();
     let noEvents = selectedProjects.filter(p => !p.firstEvent).length > 0;
 
-    if (this.state.loading) {
+    if (this.state.issuesLoading) {
       body = this.renderLoading();
     } else if (this.state.error) {
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
@@ -549,7 +557,7 @@ const OrganizationStream = createReactClass({
       savedSearchList => {
         let newState = {
           savedSearchList,
-          loading: true,
+          savedSearchLoading: false,
         };
 
         if (searchId) {
@@ -571,7 +579,7 @@ const OrganizationStream = createReactClass({
     this.setState({
       savedSearchList: sortBy(savedSearchList, ['name', 'projectId']),
     });
-    this.setState({savedSearch: data, loading: true}, this.transitionTo);
+    this.setState({savedSearch: data}, this.transitionTo);
   },
 
   renderProcessingIssuesHints() {
@@ -609,7 +617,7 @@ const OrganizationStream = createReactClass({
   },
 
   render() {
-    if (this.state.loading) {
+    if (this.state.savedSearchLoading) {
       return this.renderLoading();
     }
     let params = this.props.params;
diff --git a/tests/js/spec/views/organizationStream/overview.spec.jsx b/tests/js/spec/views/organizationStream/overview.spec.jsx
index e054253465..05283aa0a9 100644
--- a/tests/js/spec/views/organizationStream/overview.spec.jsx
+++ b/tests/js/spec/views/organizationStream/overview.spec.jsx
@@ -156,6 +156,7 @@ describe('OrganizationStream', function() {
 
       expect(fetchTagsRequest).toHaveBeenCalled();
       expect(instance.state.tags.assigned).toBeTruthy();
+      expect(instance.state.tagsLoading).toBeFalsy();
     });
 
     it('fetches members and sets state', async function() {
@@ -182,7 +183,6 @@ describe('OrganizationStream', function() {
     });
 
     it('fetches searches and sets the savedSearch', async function() {
-      wrapper.setState({loading: false});
       let instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
@@ -203,10 +203,9 @@ describe('OrganizationStream', function() {
     beforeEach(function() {
       props.params.searchId = '999';
       wrapper = shallow(<OrganizationStream {...props} />);
-      wrapper.setState({loading: false});
     });
 
-    it('resets the savedSearch state', async function() {
+    it('does not set the savedSearch state', async function() {
       let instance = wrapper.instance();
       await instance.componentDidMount();
       await wrapper.update();
@@ -242,12 +241,16 @@ describe('OrganizationStream', function() {
     });
 
     it('displays the loading icon', function() {
-      wrapper.setState({loading: true});
+      wrapper.setState({savedSearchLoading: true});
       expect(wrapper.find('LoadingIndicator')).toHaveLength(1);
     });
 
     it('displays an error', function() {
-      wrapper.setState({error: 'Things broke', loading: false});
+      wrapper.setState({
+        error: 'Things broke',
+        savedSearchLoading: false,
+        issuesLoading: false,
+      });
 
       let error = wrapper.find('LoadingError');
       expect(error).toHaveLength(1);
@@ -256,7 +259,8 @@ describe('OrganizationStream', function() {
 
     it('displays an empty resultset', function() {
       wrapper.setState({
-        loading: false,
+        savedSearchLoading: false,
+        issuesLoading: false,
         error: false,
         groupIds: [],
       });
@@ -279,7 +283,7 @@ describe('OrganizationStream', function() {
           datetime: {period: '14d'},
         },
       });
-      wrapper.setState({loading: false});
+      wrapper.setState({savedSearchLoading: false, issuesLoading: false});
       expect(wrapper.find('ErrorRobot')).toHaveLength(1);
     });
 
@@ -287,7 +291,8 @@ describe('OrganizationStream', function() {
       GroupStore.add([group]);
       wrapper.setState({
         error: false,
-        loading: false,
+        savedSearchLoading: false,
+        issuesLoading: false,
         groupIds: ['1'],
       });
       let groups = wrapper.find('StreamGroup');
