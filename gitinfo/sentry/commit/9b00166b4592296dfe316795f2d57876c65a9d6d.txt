commit 9b00166b4592296dfe316795f2d57876c65a9d6d
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Thu Jan 18 12:13:32 2018 -0800

    feat(ui+api): Move "Account Identities" to React (#6913)

diff --git a/src/sentry/api/endpoints/user_social_identities_index.py b/src/sentry/api/endpoints/user_social_identities_index.py
new file mode 100644
index 0000000000..4ab2b47c49
--- /dev/null
+++ b/src/sentry/api/endpoints/user_social_identities_index.py
@@ -0,0 +1,22 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+from social_auth.models import UserSocialAuth
+
+from sentry.api.bases.user import UserEndpoint
+from sentry.api.serializers import serialize
+
+
+class UserSocialIdentitiesIndexEndpoint(UserEndpoint):
+    def get(self, request, user):
+        """
+        List Account's Identities
+        `````````````````````````
+
+        List an account's associated identities (e.g. github when trying to add a repo)
+
+        :auth: required
+        """
+
+        identity_list = list(UserSocialAuth.objects.filter(user=user))
+        return Response(serialize(identity_list))
diff --git a/src/sentry/api/endpoints/user_social_identity_details.py b/src/sentry/api/endpoints/user_social_identity_details.py
new file mode 100644
index 0000000000..1943239996
--- /dev/null
+++ b/src/sentry/api/endpoints/user_social_identity_details.py
@@ -0,0 +1,62 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from rest_framework.response import Response
+from social_auth.backends import get_backend
+from social_auth.models import UserSocialAuth
+
+from sentry.api.bases.user import UserEndpoint
+
+logger = logging.getLogger('sentry.accounts')
+
+
+class UserSocialIdentityDetailsEndpoint(UserEndpoint):
+    def delete(self, request, user, identity_id):
+        """
+        Disconnect a Identity from Account
+        ```````````````````````````````````````````````````````
+
+        Disconnects a social auth identity from a sentry account
+
+        :pparam string identity_id: identity id
+        :auth: required
+        """
+
+        try:
+            auth = UserSocialAuth.objects.get(id=identity_id)
+        except UserSocialAuth.DoesNotExist:
+            return Response(status=404)
+
+        backend = get_backend(auth.provider, request, '/')
+        if backend is None:
+            raise Exception('Backend was not found for request: {}'.format(auth.provider))
+
+        # stop this from bubbling up errors to social-auth's middleware
+        # XXX(dcramer): IM SO MAD ABOUT THIS
+        try:
+            backend.disconnect(user, identity_id)
+        except Exception as exc:
+            import sys
+            exc_tb = sys.exc_info()[2]
+            six.reraise(Exception, exc, exc_tb)
+            del exc_tb
+
+        # XXX(dcramer): we experienced an issue where the identity still existed,
+        # and given that this is a cheap query, lets error hard in that case
+        assert not UserSocialAuth.objects.filter(
+            user=user,
+            id=identity_id,
+        ).exists()
+
+        logger.info(
+            'user.identity.disconnect',
+            extra={
+                'user_id': user.id,
+                'ip_address': request.META['REMOTE_ADDR'],
+                'usersocialauth_id': identity_id,
+            }
+        )
+
+        return Response(status=204)
diff --git a/src/sentry/api/serializers/models/user_social_auth.py b/src/sentry/api/serializers/models/user_social_auth.py
new file mode 100644
index 0000000000..3dd9213d8b
--- /dev/null
+++ b/src/sentry/api/serializers/models/user_social_auth.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+import six
+
+from django.conf import settings
+from social_auth.models import UserSocialAuth
+
+from sentry.api.serializers import Serializer, register
+
+
+@register(UserSocialAuth)
+class UserSocialAuthSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': six.text_type(obj.id),
+            'provider': obj.provider,
+            'providerLabel': settings.AUTH_PROVIDER_LABELS[obj.provider],
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 9b4f8aa89c..0350b42e73 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -138,6 +138,8 @@ from .endpoints.user_details import UserDetailsEndpoint
 from .endpoints.user_emails import UserEmailsEndpoint
 from .endpoints.user_organizations import UserOrganizationsEndpoint
 from .endpoints.user_notification_details import UserNotificationDetailsEndpoint
+from .endpoints.user_social_identities_index import UserSocialIdentitiesIndexEndpoint
+from .endpoints.user_social_identity_details import UserSocialIdentityDetailsEndpoint
 from .endpoints.event_file_committers import EventFileCommittersEndpoint
 from .endpoints.setup_wizard import SetupWizard
 
@@ -221,6 +223,14 @@ urlpatterns = patterns(
         UserNotificationDetailsEndpoint.as_view(),
         name='sentry-api-0-user-notifications'
     ),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/social-identities/$',
+        UserSocialIdentitiesIndexEndpoint.as_view(),
+        name='sentry-api-0-user-social-identities-index'),
+    url(
+        r'^users/(?P<user_id>[^\/]+)/social-identities/(?P<identity_id>[^\/]+)/$',
+        UserSocialIdentityDetailsEndpoint.as_view(),
+        name='sentry-api-0-user-social-identity-details'),
 
     # Organizations
     url(
diff --git a/src/sentry/static/sentry/app/actionCreators/account.jsx b/src/sentry/static/sentry/app/actionCreators/account.jsx
new file mode 100644
index 0000000000..b017d1f671
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/account.jsx
@@ -0,0 +1,19 @@
+import {Client} from '../api';
+import IndicatorStore from '../stores/indicatorStore';
+
+export function disconnectIdentity(identity) {
+  const api = new Client();
+  let request = api.requestPromise(`/users/me/social-identities/${identity.id}/`, {
+    method: 'DELETE',
+  });
+
+  request
+    .then(() => {
+      IndicatorStore.addSuccess(`Disconnected ${identity.providerLabel}`);
+    })
+    .catch(() => {
+      IndicatorStore.addError('Error disconnecting identity');
+    });
+
+  return request;
+}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index ad3f8ba432..7527fc16cd 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -164,6 +164,15 @@ const accountSettingsRoutes = [
     componentPromise={() => import('./views/settings/account/accountAuthorizations')}
     component={errorHandler(LazyLoad)}
   />,
+
+  <Route
+    key="identities/"
+    path="identities/"
+    name="Identities"
+    componentPromise={() =>
+      import(/*webpackChunkName: "AccountSocialIdentities"*/ './views/settings/account/accountIdentities')}
+    component={errorHandler(LazyLoad)}
+  />,
 ];
 
 const projectSettingsRoutes = [
diff --git a/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx b/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx
new file mode 100644
index 0000000000..26dead0087
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/account/accountIdentities.jsx
@@ -0,0 +1,89 @@
+import {Box} from 'grid-emotion';
+import React from 'react';
+
+import {disconnectIdentity} from '../../../actionCreators/account';
+import {t} from '../../../locale';
+import AsyncView from '../../asyncView';
+import Button from '../../../components/buttons/button';
+import EmptyMessage from '../components/emptyMessage';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import Row from '../components/row';
+import SettingsPageHeader from '../components/settingsPageHeader';
+
+const ENDPOINT = '/users/me/social-identities/';
+
+class AccountIdentities extends AsyncView {
+  getEndpoints() {
+    return [['identities', ENDPOINT]];
+  }
+
+  getDefaultState() {
+    return {
+      identities: [],
+    };
+  }
+
+  handleDisconnect = (identity, e) => {
+    let {identities} = this.state;
+
+    this.setState(
+      state => {
+        let newIdentities = state.identities.filter(({id}) => id !== identity.id);
+
+        return {
+          identities: newIdentities,
+        };
+      },
+      () =>
+        disconnectIdentity(identity).catch(() => {
+          this.setState({
+            identities,
+          });
+        })
+    );
+  };
+
+  renderBody() {
+    let isEmpty = this.state.identities.length === 0;
+
+    return (
+      <div>
+        <SettingsPageHeader title="Identities" />
+        <Panel>
+          <PanelHeader disablePadding>
+            <Box px={2}>{t('Identities')}</Box>
+          </PanelHeader>
+          <PanelBody>
+            {isEmpty && (
+              <EmptyMessage>
+                {t('There are no identities associated with this account')}
+              </EmptyMessage>
+            )}
+
+            {!isEmpty &&
+              this.state.identities.map(identity => (
+                <Row key={identity.id} align="center">
+                  <Box flex="1" p={2}>
+                    {identity.providerLabel}
+                  </Box>
+
+                  <Box p={2}>
+                    <Button
+                      size="small"
+                      onClick={this.handleDisconnect.bind(this, identity)}
+                    >
+                      {t('Disconnect')}
+                    </Button>
+                  </Box>
+                </Row>
+              ))}
+          </PanelBody>
+        </Panel>
+      </div>
+    );
+  }
+}
+
+export default AccountIdentities;
diff --git a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
index 6d976f500c..914f3bc001 100644
--- a/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/account/navigationConfiguration.jsx
@@ -26,6 +26,10 @@ const accountNavigation = [
         path: `${pathPrefix}/authorizations/`,
         title: t('Authorized Applications'),
       },
+      {
+        path: `${pathPrefix}/identities/`,
+        title: t('Identities'),
+      },
     ],
   },
 ];
diff --git a/tests/js/spec/views/__snapshots__/accountIdentities.spec.jsx.snap b/tests/js/spec/views/__snapshots__/accountIdentities.spec.jsx.snap
new file mode 100644
index 0000000000..0d2bac0c24
--- /dev/null
+++ b/tests/js/spec/views/__snapshots__/accountIdentities.spec.jsx.snap
@@ -0,0 +1,76 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`AccountIdentities renders empty 1`] = `
+<DocumentTitle
+  title="Sentry"
+>
+  <div>
+    <SettingsPageHeading
+      title="Identities"
+    />
+    <Styled(div)>
+      <PanelHeader
+        disablePadding={true}
+      >
+        <Box
+          px={2}
+        >
+          Identities
+        </Box>
+      </PanelHeader>
+      <Styled(div)>
+        <Styled(div)>
+          There are no identities associated with this account
+        </Styled(div)>
+      </Styled(div)>
+    </Styled(div)>
+  </div>
+</DocumentTitle>
+`;
+
+exports[`AccountIdentities renders list 1`] = `
+<DocumentTitle
+  title="Sentry"
+>
+  <div>
+    <SettingsPageHeading
+      title="Identities"
+    />
+    <Styled(div)>
+      <PanelHeader
+        disablePadding={true}
+      >
+        <Box
+          px={2}
+        >
+          Identities
+        </Box>
+      </PanelHeader>
+      <Styled(div)>
+        <Styled(Base)
+          align="center"
+          key="1"
+        >
+          <Box
+            flex="1"
+            p={2}
+          >
+            Github
+          </Box>
+          <Box
+            p={2}
+          >
+            <Button
+              disabled={false}
+              onClick={[Function]}
+              size="small"
+            >
+              Disconnect
+            </Button>
+          </Box>
+        </Styled(Base)>
+      </Styled(div)>
+    </Styled(div)>
+  </div>
+</DocumentTitle>
+`;
diff --git a/tests/js/spec/views/accountIdentities.spec.jsx b/tests/js/spec/views/accountIdentities.spec.jsx
new file mode 100644
index 0000000000..322f70ef06
--- /dev/null
+++ b/tests/js/spec/views/accountIdentities.spec.jsx
@@ -0,0 +1,102 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import {shallow, mount} from 'enzyme';
+
+import {Client} from 'app/api';
+import AccountIdentities from 'app/views/settings/account/accountIdentities';
+
+const ENDPOINT = '/users/me/social-identities/';
+
+describe('AccountIdentities', function() {
+  beforeEach(function() {
+    Client.clearMockResponses();
+  });
+
+  it('renders empty', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      method: 'GET',
+      body: [],
+    });
+
+    let wrapper = shallow(<AccountIdentities />, {
+      context: {
+        router: TestStubs.router(),
+      },
+      childContextTypes: {
+        router: PropTypes.object,
+      },
+    });
+
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('renders list', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      method: 'GET',
+      body: [
+        {
+          id: '1',
+          provider: 'github',
+          providerLabel: 'Github',
+        },
+      ],
+    });
+
+    let wrapper = shallow(<AccountIdentities />, {
+      context: {
+        router: TestStubs.router(),
+      },
+      childContextTypes: {
+        router: PropTypes.object,
+      },
+    });
+    expect(wrapper).toMatchSnapshot();
+  });
+
+  it('disconnects identity', function() {
+    Client.addMockResponse({
+      url: ENDPOINT,
+      method: 'GET',
+      body: [
+        {
+          id: '1',
+          provider: 'github',
+          providerLabel: 'Github',
+        },
+      ],
+    });
+
+    let wrapper = mount(<AccountIdentities />, {
+      context: {
+        router: TestStubs.router(),
+      },
+      childContextTypes: {
+        router: PropTypes.object,
+      },
+    });
+
+    let disconnectRequest = {
+      url: `${ENDPOINT}1/`,
+      method: 'DELETE',
+    };
+
+    let mock = Client.addMockResponse(disconnectRequest);
+
+    expect(mock).not.toHaveBeenCalled();
+
+    wrapper
+      .find('Button')
+      .first()
+      .simulate('click');
+
+    expect(mock).toHaveBeenCalledTimes(1);
+    expect(mock).toHaveBeenCalledWith(
+      `${ENDPOINT}1/`,
+      expect.objectContaining({
+        method: 'DELETE',
+      })
+    );
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_user_social_identities_index.py b/tests/sentry/api/endpoints/test_user_social_identities_index.py
new file mode 100644
index 0000000000..17cf14169d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_social_identities_index.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from social_auth.models import UserSocialAuth
+from sentry.testutils import APITestCase
+
+
+class UserSocialIdentitiesIndexTest(APITestCase):
+    def test_simple(self):
+        UserSocialAuth.create_social_auth(self.user, '1234', 'github')
+        self.login_as(self.user)
+        url = reverse('sentry-api-0-user-social-identities-index', kwargs={
+            'user_id': self.user.id,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['provider'] == 'github'
diff --git a/tests/sentry/api/endpoints/test_user_social_identity_details.py b/tests/sentry/api/endpoints/test_user_social_identity_details.py
new file mode 100644
index 0000000000..216a3dd97f
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_social_identity_details.py
@@ -0,0 +1,32 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from social_auth.models import UserSocialAuth
+from sentry.testutils import APITestCase
+
+
+class UserSocialIdentityDetailsEndpointTest(APITestCase):
+    def setUp(self):
+        self.login_as(self.user)
+
+    def test_can_disconnect(self):
+        auth = UserSocialAuth.create_social_auth(self.user, '1234', 'github')
+        url = reverse('sentry-api-0-user-social-identity-details', kwargs={
+            'user_id': self.user.id,
+            'identity_id': auth.id,
+        })
+        with self.settings(GITHUB_APP_ID='app-id', GITHUB_API_SECRET='secret'):
+            response = self.client.delete(url)
+            assert response.status_code == 204
+            assert not len(UserSocialAuth.objects.filter(user=self.user))
+
+    def test_disconnect_id_not_found(self):
+        url = reverse('sentry-api-0-user-social-identity-details', kwargs={
+            'user_id': self.user.id,
+            'identity_id': 999,
+        })
+        with self.settings(GITHUB_APP_ID='app-id', GITHUB_API_SECRET='secret'):
+            response = self.client.delete(url)
+            assert response.status_code == 404
+            assert not len(UserSocialAuth.objects.filter(user=self.user))
