commit d6d02fd60eb5267b3656bd57bce5fc8b7faa4164
Author: James Cunningham <cunninghamjt09@gmail.com>
Date:   Tue May 24 12:48:24 2016 -0700

    Add audit logger function. (#3298)
    
    Create audit logger to log in both human and machine readable formats, and hook it up to api/base.

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 0509a6067a..6c5324e9a0 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -17,6 +17,7 @@ from rest_framework.response import Response
 from rest_framework.views import APIView
 
 from sentry.app import raven, tsdb
+from sentry.logging import audit
 from sentry.models import ApiKey, AuditLogEntry
 from sentry.utils.cursors import Cursor
 from sentry.utils.http import absolute_uri, is_valid_origin
@@ -98,12 +99,13 @@ class Endpoint(APIView):
         user = request.user if request.user.is_authenticated() else None
         api_key = request.auth if isinstance(request.auth, ApiKey) else None
 
-        AuditLogEntry.objects.create(
+        entry = AuditLogEntry.objects.create(
             actor=user,
             actor_key=api_key,
             ip_address=request.META['REMOTE_ADDR'],
             **kwargs
         )
+        audit.log_entry(entry)
 
     @csrf_exempt
     def dispatch(self, request, *args, **kwargs):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index cb324e414c..fc5a6def9e 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -554,6 +554,9 @@ LOGGING = {
         'sentry': {
             'level': 'ERROR',
         },
+        'sentry.audit': {
+            'handlers': ['audit'],
+        },
         'sentry.auth': {
             'handlers': ['audit'],
         },
diff --git a/src/sentry/logging/audit.py b/src/sentry/logging/audit.py
new file mode 100644
index 0000000000..fbb5a440a9
--- /dev/null
+++ b/src/sentry/logging/audit.py
@@ -0,0 +1,74 @@
+"""
+sentry.logging.audit
+~~~~~~~~~~~~~~~~~~~~
+:copyright: (c) 2010-2016 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import logging
+
+from django.utils.encoding import force_bytes
+
+from sentry import options
+
+logger = logging.getLogger('sentry.audit')
+
+
+def log(log_obj, logger=logger):
+    """
+    Will either log an encoded dictionary or just a line.
+    """
+    if isinstance(log_obj, dict):
+        logger.info(encode(**log_obj))
+    else:
+        logger.info(force_bytes(
+            log_obj,
+            strings_only=True,
+            errors='replace'
+        ))
+
+
+def encode(**kwargs):
+    """
+    Force complex objects into strings so log formatters don't
+    error out when serializing.
+    """
+    return {
+        key: force_bytes(value, strings_only=True, errors='replace')
+        for key, value
+        in kwargs.iteritems()
+        if value is not None
+    }
+
+
+def log_entry(entry, logger=logger):
+    """
+    Give an AuditLogEntry object to the audit logger.
+    """
+    fmt = options.get('system.logging-format')
+    if fmt == 'human':
+        log(
+            "[Audit Log] [{org}] {user} {note}".format(
+                org=entry.organization_id,
+                user=entry.actor_label,
+                note=entry.get_note(),
+            ),
+            logger=logger,
+        )
+    elif fmt == 'machine':
+        log(
+            dict(
+                organization_id=entry.organization_id,
+                actor_id=entry.actor_id,
+                actor_key=entry.actor_key,
+                target_object=entry.target_object,
+                target_user_id=entry.target_user_id,
+                event=entry.get_event_display(),
+                ip_address=entry.ip_address,
+                data=entry.data,
+                datetime=entry.datetime,
+            ),
+            logger=logger,
+        )
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 5657537a9f..3c1981c656 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -26,6 +26,7 @@ register('system.secret-key', flags=FLAG_NOSTORE)
 # Absolute URL to the sentry root directory. Should not include a trailing slash.
 register('system.url-prefix', ttl=60, grace=3600, flags=FLAG_REQUIRED | FLAG_PRIORITIZE_DISK)
 register('system.root-api-key', flags=FLAG_PRIORITIZE_DISK)
+register('system.logging-format', default='human', flags=FLAG_PRIORITIZE_DISK)
 
 # Redis
 register(
diff --git a/tests/sentry/logging/__init__.py b/tests/sentry/logging/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/logging/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/logging/test_audit.py b/tests/sentry/logging/test_audit.py
new file mode 100644
index 0000000000..3b15bac3ef
--- /dev/null
+++ b/tests/sentry/logging/test_audit.py
@@ -0,0 +1,73 @@
+from __future__ import absolute_import
+
+from mock import patch
+
+from sentry.logging import audit
+from sentry.models import AuditLogEntry, AuditLogEntryEvent
+from sentry.testutils import TestCase
+
+
+@patch('sentry.logging.audit.logger')
+class AuditLogTestCase(TestCase):
+    def test_log_line(self, mock_logger):
+        log_obj = 'A Human Line.'
+        audit.log(log_obj, logger=mock_logger)
+        assert mock_logger.info.called
+        mock_logger.info.assert_called_with(log_obj)
+
+    def test_log_encoded_dict(self, mock_logger):
+        log_obj = {'encode_me': 1L}
+        audit.log(log_obj, logger=mock_logger)
+        # Strip the call arguments of the crazy tuple nesting.
+        call_arg = mock_logger.info.call_args
+        while isinstance(call_arg, tuple):
+            call_arg = call_arg[0]
+        assert mock_logger.info.called
+        assert call_arg == {'encode_me': '1'}
+
+
+@patch('sentry.logging.audit.logger')
+class AuditLogTestEntryCase(TestCase):
+    def test_log_entry_human(self, mock_logger):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='sentry')
+        entry = AuditLogEntry.objects.create(
+            organization=org,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=self.user,
+        )
+
+        with self.options({'system.logging-format': 'human'}):
+            with self.assertNumQueries(0):
+                audit.log_entry(entry, logger=mock_logger)
+            mock_logger.info.assert_called_with(
+                '[Audit Log] [{org_id}] {actor_label} {note}'.format(
+                    org_id=entry.organization_id,
+                    actor_label=entry.actor_label,
+                    note=entry.get_note()
+                )
+            )
+
+    def test_log_entry_machine(self, mock_logger):
+        self.login_as(user=self.user)
+        org = self.create_organization(owner=self.user, name='sentry')
+        entry = AuditLogEntry.objects.create(
+            organization=org,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            actor=self.user,
+        )
+
+        with self.options({'system.logging-format': 'machine'}):
+            with self.assertNumQueries(0):
+                audit.log_entry(entry, logger=mock_logger)
+            # Strip the call arguments of the crazy tuple nesting.
+            call_arg = mock_logger.info.call_args
+            while isinstance(call_arg, tuple):
+                call_arg = call_arg[0]
+            assert call_arg == {
+                'actor_id': entry.actor_id,
+                'data': '{}',
+                'datetime': str(entry.datetime),
+                'event': 'org.edit',
+                'organization_id': entry.organization_id,
+            }
