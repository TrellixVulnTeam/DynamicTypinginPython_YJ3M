commit e2fa4037a5855a53e47bb591163d098a2c03c0f2
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Thu Jan 25 11:49:06 2018 -0800

    feat(projects): Add project settings page for team management

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c668f7fd7e..b597078f80 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -228,6 +228,14 @@ const projectSettingsRoutes = [
     name="General"
     component={errorHandler(ProjectGeneralSettings)}
   />,
+  <Route
+    key="teams/"
+    path="teams/"
+    name="Teams"
+    componentPromise={() =>
+      import(/*webpackChunkName: "ProjectTeams"*/ './views/settings/project/projectTeams')}
+    component={errorHandler(LazyLoad)}
+  />,
   <Route
     key="alerts/"
     name="Alerts"
diff --git a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
index 7fe0e97593..a2a72243f1 100644
--- a/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/navigationConfiguration.jsx
@@ -13,6 +13,10 @@ export default function getConfiguration({project}) {
           path: `${pathPrefix}/settings/`,
           title: t('General'),
         },
+        {
+          path: `${pathPrefix}/teams/`,
+          title: t('Teams'),
+        },
         {
           path: `${pathPrefix}/alerts/`,
           title: t('Alerts'),
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
new file mode 100644
index 0000000000..999f45b7a5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectTeams.jsx
@@ -0,0 +1,149 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import createReactClass from 'create-react-class';
+
+import {t} from '../../../locale';
+import ApiMixin from '../../../mixins/apiMixin';
+import AsyncView from '../../asyncView';
+import Button from '../../../components/buttons/button';
+import Confirm from '../../../components/confirm';
+import EmptyMessage from '../components/emptyMessage';
+import IndicatorStore from '../../../stores/indicatorStore';
+import Panel from '../components/panel';
+import PanelBody from '../components/panelBody';
+import PanelHeader from '../components/panelHeader';
+import Row from '../components/row';
+import SettingsPageHeader from '../components/settingsPageHeader';
+
+const TeamRow = createReactClass({
+  displayName: 'TeamRow',
+
+  propTypes: {
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    team: PropTypes.object.isRequired,
+    access: PropTypes.object.isRequired,
+    onRemove: PropTypes.func.isRequired,
+  },
+
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: false,
+      error: false,
+    };
+  },
+
+  handleRemove() {
+    if (this.state.loading) return;
+
+    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+    let {orgId, projectId, team} = this.props;
+    this.api.request(`/projects/${orgId}/${projectId}/teams/${team.slug}/`, {
+      method: 'DELETE',
+      success: (d, _, jqXHR) => {
+        this.props.onRemove();
+        IndicatorStore.remove(loadingIndicator);
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+        IndicatorStore.remove(loadingIndicator);
+      },
+    });
+  },
+
+  render() {
+    let team = this.props.team;
+    return (
+      <Row p={2}>
+        <Box flex="1">
+          <h5 style={{margin: '10px 0px'}}>{team.name}</h5>
+        </Box>
+        {this.props.access.has('project:write') && (
+          <Box pl={2}>
+            <Confirm
+              message={t('Are you sure you want to remove this team?')}
+              onConfirm={this.handleRemove}
+              disabled={this.state.loading}
+            >
+              <Button>
+                <span className="icon icon-trash" /> &nbsp;{t('Remove')}
+              </Button>
+            </Confirm>
+          </Box>
+        )}
+      </Row>
+    );
+  },
+});
+
+class ProjectTeams extends AsyncView {
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [['teams', `/projects/${orgId}/${projectId}/teams/`]];
+  }
+
+  handleRemovedTeam(removedTeam) {
+    this.setState({
+      teams: this.state.teams.filter(team => {
+        return team.slug !== removedTeam.slug;
+      }),
+    });
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyMessage>{t('There are no teams with access to this project.')}</EmptyMessage>
+    );
+  }
+
+  renderResults() {
+    let {orgId, projectId} = this.props.params;
+    let access = new Set(this.props.organization.access);
+
+    return [
+      <PanelHeader key={'header'}>
+        <Flex align="center">
+          <Box px={2} flex="1">
+            {t('Team')}
+          </Box>
+        </Flex>
+      </PanelHeader>,
+      <PanelBody key={'body'}>
+        {this.state.teams.map(team => {
+          return (
+            <TeamRow
+              access={access}
+              key={team.id}
+              orgId={orgId}
+              projectId={projectId}
+              team={team}
+              onRemove={this.handleRemovedTeam.bind(this, team)}
+            />
+          );
+        })}
+      </PanelBody>,
+    ];
+  }
+
+  renderBody() {
+    let body;
+
+    if (this.state.teams.length > 0) body = this.renderResults();
+    else body = this.renderEmpty();
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('Teams')} />
+        <Panel>{body}</Panel>
+      </div>
+    );
+  }
+}
+
+export default ProjectTeams;
