commit d43606f442c760c460736e6ba31aaa29ffea2f9e
Author: Ben Vinegar <ben@benv.ca>
Date:   Sun Dec 13 15:09:15 2015 -0800

    Use airbnb/enzyme for render assertions (vs TestUtils.scry*)

diff --git a/package.json b/package.json
index f8855a0427..fbc488f511 100644
--- a/package.json
+++ b/package.json
@@ -56,6 +56,7 @@
     "babel-gettext-extractor": "^1.0.2",
     "babel-loader": "5.3.3",
     "chai": "3.4.1",
+    "enzyme": "^1.1.0",
     "js-cookie": "2.0.4",
     "karma": "0.13.15",
     "karma-chai": "0.1.0",
diff --git a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
index e4c6238182..e9b42ef44e 100644
--- a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
-import ReactDOM from 'react-dom';
-import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
 
 import KeyValueList from 'app/components/events/interfaces/keyValueList';
 
@@ -10,71 +9,59 @@ describe('KeyValueList', function () {
       let data = [
         ['a', 'x'], ['b', 'y']
       ];
-      let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
+      let wrapper = shallow(<KeyValueList data={data} />);
 
-      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
-      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
+      expect(wrapper.find('.key').at(0).text()).to.eql('a');
+      expect(wrapper.find('.key').at(1).text()).to.eql('b');
 
-      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
-      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('x');
-      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
+      expect(wrapper.find('.value').at(0).text()).to.eql('x');
+      expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
     it('should sort sort key/value pairs', function () {
       let data = [
         ['b', 'y'], ['a', 'x']
       ];
-      let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
+      let wrapper = shallow(<KeyValueList data={data} />);
 
-      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
-      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
+      expect(wrapper.find('.key').at(0).text()).to.eql('a');
+      expect(wrapper.find('.key').at(1).text()).to.eql('b');
 
-      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
-      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('x');
-      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
+      expect(wrapper.find('.value').at(0).text()).to.eql('x');
+      expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
     it('should use a single space for values that are an empty string', function () {
       let data = [
         ['b', 'y'], ['a', ''] // empty string
       ];
-      let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
+      let wrapper = shallow(<KeyValueList data={data} />);
 
-      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
-      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
-      expect(ReactDOM.findDOMNode(keys[1]).textContent).to.eql('b');
+      expect(wrapper.find('.key').at(0).text()).to.eql('a');
+      expect(wrapper.find('.key').at(1).text()).to.eql('b');
 
-      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
-      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql(' ');
-      expect(ReactDOM.findDOMNode(values[1]).textContent).to.eql('y');
+      expect(wrapper.find('.value').at(0).text()).to.eql(' ');
+      expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
     it('should coerce non-strings into strings', function () {
       let data = [
         ['a', false]
       ];
-      let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
+      let wrapper = shallow(<KeyValueList data={data} />);
 
-      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
-      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
-
-      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
-      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('false');
+      expect(wrapper.find('.key').at(0).text()).to.eql('a');
+      expect(wrapper.find('.value').at(0).text()).to.eql('false');
     });
 
     it('shouldn\'t blow up on null', function () {
       let data = [
         ['a', null]
       ];
-      let elem = TestUtils.renderIntoDocument(<KeyValueList data={data} />);
-
-      let keys = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'key');
-      expect(ReactDOM.findDOMNode(keys[0]).textContent).to.eql('a');
+      let wrapper = shallow(<KeyValueList data={data} />);
 
-      let values = TestUtils.scryRenderedDOMComponentsWithClass(elem, 'value');
-      expect(ReactDOM.findDOMNode(values[0]).textContent).to.eql('null');
+      expect(wrapper.find('.key').at(0).text()).to.eql('a');
+      expect(wrapper.find('.value').at(0).text()).to.eql('null');
     });
   });
 });
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index 73e600854b..2a626acc23 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -1,10 +1,11 @@
 import React from 'react';
-import ReactDOM from 'react-dom';
-import TestUtils from 'react-addons-test-utils';
+import {mount} from 'enzyme';
+
 import GroupSeenBy from 'app/views/groupDetails/seenBy';
 import ConfigStore from 'app/stores/configStore';
 import Gravatar from 'app/components/gravatar';
 
+
 import stubContext from '../../../helpers/stubContext';
 import stubReactComponent from '../../../helpers/stubReactComponent';
 
@@ -29,8 +30,8 @@ describe('OrganizationTeams', function() {
         team: {}
       });
 
-      let groupSeenBy = TestUtils.renderIntoDocument(<ContextStubbedGroupSeenBy/>);
-      expect(ReactDOM.findDOMNode(groupSeenBy)).to.be.null;
+      let wrapper = mount(<ContextStubbedGroupSeenBy/>);
+      expect(wrapper.children()).to.have.length(0);
     });
 
     it('should return a list of each user that saw', function () {
@@ -46,9 +47,8 @@ describe('OrganizationTeams', function() {
         team: {}
       });
 
-      let groupSeenBy = TestUtils.renderIntoDocument(<ContextStubbedGroupSeenBy/>);
-      let li = TestUtils.scryRenderedDOMComponentsWithTag(groupSeenBy, 'li');
-      expect(li).to.have.property('length', 3); // +1 for "icon-eye"
+      let wrapper = mount(<ContextStubbedGroupSeenBy/>);
+      expect(wrapper.find('li')).to.have.length(3); // +1 for "icon-eye"
     });
   });
 });
diff --git a/tests/js/spec/views/stream/actionLink.spec.jsx b/tests/js/spec/views/stream/actionLink.spec.jsx
index 6911f07c13..ab3c1d0943 100644
--- a/tests/js/spec/views/stream/actionLink.spec.jsx
+++ b/tests/js/spec/views/stream/actionLink.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
 import stubReactComponents from '../../../helpers/stubReactComponent';
@@ -21,9 +21,9 @@ describe('ActionLink', function() {
 
   describe('shouldConfirm()', function() {
     it('should always return true by default', function () {
-      let actionLink = TestUtils.renderIntoDocument(
+      let actionLink = shallow(
         <ActionLink onAction={function(){}} selectAllActive={false}/>
-      );
+      ).instance();
 
       expect(actionLink.shouldConfirm(0)).to.be.true;
       expect(actionLink.shouldConfirm(1)).to.be.true;
@@ -31,9 +31,9 @@ describe('ActionLink', function() {
     });
 
     it('should return (mostly) true when props.onlyIfBulk is true and all are selected', function () {
-      let actionLink = TestUtils.renderIntoDocument(
+      let actionLink = shallow(
         <ActionLink onlyIfBulk={true} selectAllActive={true} onAction={function(){}}/>
-      );
+      ).instance();
 
       expect(actionLink.shouldConfirm(1)).to.be.false; // EDGE CASE: if just 1, shouldn't confirm even if "all" selected
       expect(actionLink.shouldConfirm(2)).to.be.true;
@@ -41,9 +41,9 @@ describe('ActionLink', function() {
     });
 
     it('should return false when props.onlyIfBulk is true and not all are selected', function () {
-      let actionLink = TestUtils.renderIntoDocument(
+      let actionLink = shallow(
         <ActionLink onlyIfBulk={true} selectAllActive={false} onAction={function(){}}/>
-      );
+      ).instance();
 
       expect(actionLink.shouldConfirm(1)).to.be.false;
       expect(actionLink.shouldConfirm(2)).to.be.false;
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 29928b7f54..81c6310862 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -1,5 +1,5 @@
 import React from 'react';
-import TestUtils from 'react-addons-test-utils';
+import {shallow} from 'enzyme';
 
 import {Client} from 'app/api';
 import stubReactComponents from '../../../helpers/stubReactComponent';
@@ -24,7 +24,7 @@ describe('StreamActions', function() {
 
   describe('actionSelectedGroups()', function () {
     beforeEach(function() {
-      this.actions = TestUtils.renderIntoDocument(
+      this.actions = shallow(
           <StreamActions
             orgId="1337"
             projectId="1"
@@ -34,7 +34,7 @@ describe('StreamActions', function() {
             realtimeActive={false}
             statsPeriod="24h"
             />
-          );
+          ).instance();
     });
 
     describe('for all items', function () {
diff --git a/tests/karma.conf.js b/tests/karma.conf.js
index fb70aabd61..3eae0670ec 100644
--- a/tests/karma.conf.js
+++ b/tests/karma.conf.js
@@ -21,16 +21,24 @@ module.exports = function(config) {
       'tests/tests.webpack.js'
     ],
 
+    // [1]
+    // Note there's a bunch of configurations in here that in order to work
+    // around a airbnb/enzyme + webpack + sinon build bug:
+    //   https://github.com/airbnb/enzyme/issues/47#issuecomment-162529926
     webpack: {
       cache: true,
       resolve: {
         alias: {
-          "app": appPrefix
+          "app": appPrefix,
+          sinon: 'sinon/pkg/sinon' // see [1] above
         },
         modulesDirectories: ["node_modules"],
         extensions: ["", ".jsx", ".js", ".json"]
       },
       module: {
+        noParse: [
+          /node_modules\/sinon\//, // see [1] above
+        ],
         loaders: [
           {
             exclude: /(vendor|node_modules)/,
@@ -59,6 +67,11 @@ module.exports = function(config) {
           "root.jQuery": "jquery"
         })
       ],
+      externals: { // see [1] above
+        'jsdom': 'window', // can't simulate jsdom in browser
+        'cheerio': 'window',
+        'react/lib/ExecutionEnvironment': true
+      }
     },
 
     webpackMiddleware: {
