commit 3aae4dfe9202ed9c92949cecbfc00a559f23aec5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 28 09:55:08 2016 -0700

    [api] expand project and organization search endpoints (#4215)
    
    - add slug, name, platform, and id to project search
    - add id to organization search

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 86d4f387a8..da857bbbed 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -103,6 +103,8 @@ class OrganizationIndexEndpoint(Endpoint):
                             platform__in=value,
                         ).values('project_id')
                     )
+                elif key == 'id':
+                    queryset = queryset.filter(id__in=value)
 
         sort_by = request.GET.get('sortBy')
         if sort_by == 'members':
diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
index fa239169ce..6042c58587 100644
--- a/src/sentry/api/endpoints/project_index.py
+++ b/src/sentry/api/endpoints/project_index.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+import six
+
 from django.db.models import Q
 
 from sentry.api.base import DocSection, Endpoint
@@ -7,8 +9,9 @@ from sentry.api.bases.project import ProjectPermission
 from sentry.api.paginator import DateTimePaginator
 from sentry.api.serializers import serialize, ProjectWithOrganizationSerializer
 from sentry.models import (
-    Project, ProjectStatus
+    Project, ProjectPlatform, ProjectStatus
 )
+from sentry.search.utils import tokenize_query, in_iexact
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -67,9 +70,30 @@ class ProjectIndexEndpoint(Endpoint):
 
         query = request.GET.get('query')
         if query:
-            queryset = queryset.filter(
-                Q(name__icontains=query) | Q(slug__icontains=query),
-            )
+            tokens = tokenize_query(query)
+            for key, value in six.iteritems(tokens):
+                if key == 'query':
+                    value = ' '.join(value)
+                    queryset = queryset.filter(
+                        Q(name__icontains=value) |
+                        Q(slug__icontains=value)
+                    )
+                elif key == 'slug':
+                    queryset = queryset.filter(
+                        in_iexact('slug', value)
+                    )
+                elif key == 'name':
+                    queryset = queryset.filter(
+                        in_iexact('name', value)
+                    )
+                elif key == 'platform':
+                    queryset = queryset.filter(
+                        id__in=ProjectPlatform.objects.filter(
+                            platform__in=value,
+                        ).values('project_id')
+                    )
+                elif key == 'id':
+                    queryset = queryset.filter(id__in=value)
 
         return self.paginate(
             request=request,
diff --git a/tests/sentry/api/endpoints/test_project_index.py b/tests/sentry/api/endpoints/test_project_index.py
index 99ec5c819d..aa903c419f 100644
--- a/tests/sentry/api/endpoints/test_project_index.py
+++ b/tests/sentry/api/endpoints/test_project_index.py
@@ -94,3 +94,45 @@ class ProjectsListTest(APITestCase):
         response = self.client.get(self.path + '?query=baz')
         assert response.status_code == 200
         assert len(response.data) == 0
+
+    def test_slug_query(self):
+        Project.objects.all().delete()
+
+        user = self.create_user('foo@example.com', is_superuser=True)
+
+        org = self.create_organization(name='foo')
+        project1 = self.create_project(name='foo', slug='foo', organization=org)
+
+        self.create_project(name='bar', slug='bar', organization=org)
+
+        self.login_as(user=user)
+
+        response = self.client.get(self.path + '?query=slug:foo')
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(project1.id)
+
+        response = self.client.get(self.path + '?query=slug:baz')
+        assert response.status_code == 200
+        assert len(response.data) == 0
+
+    def test_id_query(self):
+        Project.objects.all().delete()
+
+        user = self.create_user('foo@example.com', is_superuser=True)
+
+        org = self.create_organization(name='foo')
+        project1 = self.create_project(name='foo', slug='foo', organization=org)
+
+        self.create_project(name='bar', slug='bar', organization=org)
+
+        self.login_as(user=user)
+
+        response = self.client.get('{}?query=id:{}'.format(self.path, project1.id))
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == six.text_type(project1.id)
+
+        response = self.client.get('{}?query=id:-1'.format(self.path))
+        assert response.status_code == 200
+        assert len(response.data) == 0
