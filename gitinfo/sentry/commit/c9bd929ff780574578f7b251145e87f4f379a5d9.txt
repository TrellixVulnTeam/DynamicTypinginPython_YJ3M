commit c9bd929ff780574578f7b251145e87f4f379a5d9
Author: Jess MacQueen <jess@getsentry.com>
Date:   Mon Jul 25 17:27:20 2016 -0700

    add tests

diff --git a/src/sentry/plugins/bases/issue2.py b/src/sentry/plugins/bases/issue2.py
index eab3ddc171..e67a38d92c 100644
--- a/src/sentry/plugins/bases/issue2.py
+++ b/src/sentry/plugins/bases/issue2.py
@@ -11,6 +11,7 @@ from sentry.api.bases.project import ProjectEndpoint
 from sentry.models import Activity, Event, GroupMeta
 from sentry.plugins import Plugin
 from sentry.plugins.base.configuration import default_issue_plugin_config
+from sentry.signals import issue_tracker_used
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.http import absolute_uri
 from sentry.utils.safe import safe_execute
@@ -26,6 +27,7 @@ class IssueGroupActionEndpoint(GroupEndpoint):
 
     def _handle(self, request, group, *args, **kwargs):
         GroupMeta.objects.populate_cache([group])
+
         return getattr(self.plugin, self.view_method_name)(request, group, *args, **kwargs)
 
     def get(self, request, group, *args, **kwargs):
@@ -250,8 +252,8 @@ class IssueTrackingPlugin2(Plugin):
             data=issue_information,
         )
 
-        # issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin)
-        return Response({'success': True, 'issue_url': self.get_issue_url(group=group, issue_id=issue_id)})
+        issue_tracker_used.send(plugin=self, project=group.project, user=request.user, sender=IssueTrackingPlugin2)
+        return Response({'issue_url': self.get_issue_url(group=group, issue_id=issue_id)})
 
     def view_unlink(self, request, group, **kwargs):
         auth_errors = self.check_config_and_auth(request, group)
@@ -260,8 +262,8 @@ class IssueTrackingPlugin2(Plugin):
         if GroupMeta.objects.get_value(group, '%s:tid' % self.get_conf_key(), None):
             if 'unlink' in self.allowed_actions:
                 GroupMeta.objects.unset_value(group, '%s:tid' % self.get_conf_key())
-                return Response({'success': True, 'message': 'Successfully unlinked issue.'})
-            return Response({'success': False, 'message': 'No issues to unlink.'})
+                return Response({'message': 'Successfully unlinked issue.'})
+        return Response({'message': 'No issues to unlink.'}, status=400)
 
     def view_link(self, request, group, **kwargs):
         auth_errors = self.check_config_and_auth(request, group)
@@ -305,13 +307,13 @@ class IssueTrackingPlugin2(Plugin):
             user=request.user,
             data=issue_information,
         )
-        return Response({'success': True, 'message': 'Successfully linked issue.'})
+        return Response({'message': 'Successfully linked issue.'})
 
     def view_configure(self, request, project, **kwargs):
         if request.method == 'GET':
             return Response(self.get_configure_plugin_fields(request, project, **kwargs))
         self.configure(project, request.DATA)
-        return Response({'sucess': True, 'message': 'Successfully updated configuration.'})
+        return Response({'message': 'Successfully updated configuration.'})
 
     def configure(self, project, form_data):
         """Configures the plugin"""
diff --git a/src/sentry/plugins/utils.py b/src/sentry/plugins/utils.py
new file mode 100644
index 0000000000..21133ea1d5
--- /dev/null
+++ b/src/sentry/plugins/utils.py
@@ -0,0 +1,6 @@
+from sentry.plugins import IssueTrackingPlugin2
+
+
+class TestIssuePlugin2(IssueTrackingPlugin2):
+    """This is only used in tests."""
+    slug = 'issuetrackingplugin2'
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index 2d3949dc84..1aad06ad3d 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -43,7 +43,7 @@ const IssuePluginConfiguration = React.createClass({
       <div>
         {this.props.plugins.map((plugin) => {
           return (
-            <div className="box">
+            <div className="box" key={plugin.slug}>
               <div className="box-header">
                 {plugin.can_disable && plugin.is_enabled &&
                   <button className="btn btn-sm btn-default pull-right"
diff --git a/src/sentry/templates/sentry/projects/plugins/configure.html b/src/sentry/templates/sentry/projects/plugins/configure.html
index 3625329c76..3830609101 100644
--- a/src/sentry/templates/sentry/projects/plugins/configure.html
+++ b/src/sentry/templates/sentry/projects/plugins/configure.html
@@ -80,13 +80,15 @@
         </div>
     </div>
 
-    <script>
-    $(function(){
-        React.render(React.createFactory(Sentry.IssuePluginConfigForm)({
-            project: {% serialize project %},
-            organization: {% serialize organization %},
-            plugin: {% serialize issue_v2_plugin %}
-        }), document.getElementById('issue_plugins'));
-    });
-    </script>
+    {% if issue_v2_plugin %}
+        <script>
+        $(function(){
+            React.render(React.createFactory(Sentry.IssuePluginConfigForm)({
+                project: {% serialize project %},
+                organization: {% serialize organization %},
+                plugin: {% serialize issue_v2_plugin %}
+            }), document.getElementById('issue_plugins'));
+        });
+        </script>
+    {% endif %}
 {% endblock %}
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index c21bcacd87..d88f4636d6 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -132,6 +132,11 @@ def pytest_configure(config):
 
     initialize_receivers()
 
+    from sentry.plugins import plugins
+    from sentry.plugins.utils import TestIssuePlugin2
+
+    plugins.register(TestIssuePlugin2)
+
     from sentry.utils.redis import clusters
 
     with clusters.get('default').all() as client:
diff --git a/tests/sentry/plugins/bases/issue/tests.py b/tests/sentry/plugins/bases/issue/tests.py
index 6013ebebf6..09073f44b2 100644
--- a/tests/sentry/plugins/bases/issue/tests.py
+++ b/tests/sentry/plugins/bases/issue/tests.py
@@ -2,12 +2,13 @@
 
 from __future__ import absolute_import
 
+import json
 import mock
 
 from social_auth.models import UserSocialAuth
 
-from sentry.models import User
-from sentry.plugins import IssueTrackingPlugin
+from sentry.models import User, GroupMeta
+from sentry.plugins import IssueTrackingPlugin, IssueTrackingPlugin2, plugins
 from sentry.testutils import TestCase
 
 
@@ -35,3 +36,130 @@ class GetAuthForUserTest(TestCase):
         p = IssueTrackingPlugin()
         p.auth_provider = 'test'
         self.assertEquals(p.get_auth_for_user(user), auth)
+
+
+class GetAuthForUserTestIssue2(TestCase):
+    def _get_mock_user(self):
+        user = mock.Mock(spec=User())
+        user.id = 1
+        user.is_authenticated.return_value = False
+        return user
+
+    def test_requires_auth_provider(self):
+        user = self._get_mock_user()
+        p = IssueTrackingPlugin2()
+        self.assertRaises(AssertionError, p.get_auth_for_user, user)
+
+    def test_returns_none_on_missing_identity(self):
+        user = self._get_mock_user()
+        p = IssueTrackingPlugin2()
+        p.auth_provider = 'test'
+        self.assertEquals(p.get_auth_for_user(user), None)
+
+    def test_returns_identity(self):
+        user = User.objects.create(username='test', email='test@example.com')
+        auth = UserSocialAuth.objects.create(provider='test', user=user)
+        p = IssueTrackingPlugin2()
+        p.auth_provider = 'test'
+        self.assertEquals(p.get_auth_for_user(user), auth)
+
+
+class IssuePlugin2GroupAction(TestCase):
+
+    def setUp(self):
+        super(IssuePlugin2GroupAction, self).setUp()
+        self.project = self.create_project()
+        self.group = self.create_group(project=self.project)
+        self.plugin_instance = plugins.get(slug='issuetrackingplugin2')
+        self.event = self.create_event(
+            event_id='a',
+            group=self.group,
+        )
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    def test_get_create(self, *args):
+        self.login_as(user=self.user)
+        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        response = self.client.get(url, format='json')
+        content = json.loads(response.content)
+        field_names = [field['name'] for field in content]
+        assert response.status_code == 200
+        assert 'title' in field_names
+        assert 'description' in field_names
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.create_issue')
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    def test_post_create_invalid(self, *args):
+        self.login_as(user=self.user)
+        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        response = self.client.post(url, data={
+            'title': '',
+            'description': ''
+        }, format='json')
+        content = json.loads(response.content)
+        assert response.status_code == 400
+        assert content['error_type'] == 'validation'
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.create_issue', return_value=1)
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.get_issue_url', return_value='')
+    def test_post_create_valid(self, *args):
+        self.login_as(user=self.user)
+        url = '/api/0/issues/%s/plugin/create/issuetrackingplugin2/' % self.group.id
+        response = self.client.post(url, data={
+            'title': 'test',
+            'description': 'test'
+        }, format='json')
+        content = json.loads(response.content)
+        assert response.status_code == 200
+        assert 'issue_url' in content
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    def test_get_link(self, *args):
+        self.login_as(user=self.user)
+        url = '/api/0/issues/%s/plugin/link/issuetrackingplugin2/' % self.group.id
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    def test_get_unlink_invalid(self, *args):
+        self.login_as(user=self.user)
+        url = '/api/0/issues/%s/plugin/unlink/issuetrackingplugin2/' % self.group.id
+        response = self.client.get(url, format='json')
+        assert response.status_code == 400
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.is_configured', return_value=True)
+    def test_get_unlink_valid(self, *args):
+        self.login_as(user=self.user)
+        id_ = '%s:tid' % self.plugin_instance.get_conf_key()
+        GroupMeta.objects.set_value(self.group, id_, 4)
+        url = '/api/0/issues/%s/plugin/unlink/issuetrackingplugin2/' % self.group.id
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+        GroupMeta.objects.populate_cache([self.group])
+        assert GroupMeta.objects.get_value(self.group, id_, None) is None
+
+
+class IssuePlugin2ProjectAction(TestCase):
+
+    def setUp(self):
+        super(IssuePlugin2ProjectAction, self).setUp()
+        self.project = self.create_project()
+        self.plugin_instance = plugins.get(slug='issuetrackingplugin2')
+
+    @mock.patch('sentry.plugins.IssueTrackingPlugin2.get_configure_plugin_fields', return_value={})
+    def test_get_configure(self, *args):
+        self.login_as(user=self.user)
+        url = ('/api/0/projects/%s/%s/plugin/'
+               'configure/issuetrackingplugin2/') % (self.project.organization.slug,
+                                                     self.project.slug)
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
+
+    def test_get_disable(self, *args):
+        self.login_as(user=self.user)
+        url = ('/api/0/projects/%s/%s/plugin/'
+               'disable/issuetrackingplugin2/') % (self.project.organization.slug,
+                                                   self.project.slug)
+        response = self.client.get(url, format='json')
+        assert response.status_code == 200
