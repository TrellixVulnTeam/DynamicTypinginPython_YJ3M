commit 632781f6e04851bd27fc8b7db34a9d8ae4e2073b
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri May 8 14:19:00 2020 -0700

    ref(ui): Replace BetaTag w/ FeatureBadge (#18687)

diff --git a/src/sentry/static/sentry/app/components/betaTag.tsx b/src/sentry/static/sentry/app/components/betaTag.tsx
deleted file mode 100644
index 2f6c697af4..0000000000
--- a/src/sentry/static/sentry/app/components/betaTag.tsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Tag from 'app/views/settings/components/tag';
-import Tooltip from 'app/components/tooltip';
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-
-type Props = {
-  title?: string | null;
-};
-
-const BetaTag = ({
-  title = t('This feature is in beta and may change in the future.'),
-}: Props) => (
-  <Tooltip title={title} disabled={!title} position="right">
-    <StyledTag priority="beta" size="small">
-      {t('beta')}
-    </StyledTag>
-  </Tooltip>
-);
-
-const StyledTag = styled(Tag)`
-  position: relative;
-  top: -1px;
-  font-size: ${p => p.theme.fontSizeSmall};
-  font-weight: normal;
-  padding: 3px ${space(0.75)};
-  margin-left: ${space(0.5)};
-  border-radius: 20px;
-`;
-
-export default BetaTag;
diff --git a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
index 8b976e07b9..5c55b18279 100644
--- a/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
+++ b/src/sentry/static/sentry/app/components/events/groupingInfo.jsx
@@ -7,7 +7,7 @@ import AsyncComponent from 'app/components/asyncComponent';
 import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
 import DropdownButton from 'app/components/dropdownButton';
 import Tooltip from 'app/components/tooltip';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
 import {t} from 'app/locale';
@@ -381,7 +381,7 @@ class EventGroupingInfo extends AsyncComponent {
     );
     const actions = (
       <Toggle onClick={this.toggle}>
-        {isOpen ? t('Hide Details') : t('Show Details')} <BetaTag />
+        {isOpen ? t('Hide Details') : t('Show Details')} <FeatureBadge type="beta" />
       </Toggle>
     );
 
diff --git a/src/sentry/static/sentry/app/components/featureBadge.tsx b/src/sentry/static/sentry/app/components/featureBadge.tsx
new file mode 100644
index 0000000000..cbcbece24e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/featureBadge.tsx
@@ -0,0 +1,57 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import Tag from 'app/views/settings/components/tag';
+import Tooltip from 'app/components/tooltip';
+import space from 'app/styles/space';
+import {t} from 'app/locale';
+import theme from 'app/utils/theme';
+import CircleIndicator from 'app/components/circleIndicator';
+
+type BadgeProps = {
+  type: 'alpha' | 'beta' | 'new';
+  variant?: 'indicator' | 'badge';
+  title?: string;
+  noTooltip?: boolean;
+};
+
+type Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof BadgeProps> & BadgeProps;
+
+const defaultTitles = {
+  alpha: t('This feature is in alpha and may be unstable'),
+  beta: t('This feature is in beta and may change in the future'),
+  new: t('This is a new feature'),
+};
+
+const labels = {
+  alpha: t('alpha'),
+  beta: t('beta'),
+  new: t('new'),
+};
+
+const FeaturedBadge = ({type, variant = 'badge', title, noTooltip, ...p}: Props) => (
+  <div {...p}>
+    <Tooltip title={title ?? defaultTitles[type]} disabled={noTooltip} position="right">
+      <React.Fragment>
+        {variant === 'badge' && <StyledTag priority={type}>{labels[type]}</StyledTag>}
+        {variant === 'indicator' && (
+          <CircleIndicator color={theme.badge[type].indicatorColor} size={8} />
+        )}
+      </React.Fragment>
+    </Tooltip>
+  </div>
+);
+
+const StyledTag = styled(Tag)`
+  padding: 3px ${space(0.75)};
+`;
+
+const StyledFeatureBadge = styled(FeaturedBadge)`
+  display: inline-flex;
+  align-items: center;
+  margin-left: ${space(0.75)};
+  position: relative;
+  top: -1px;
+`;
+
+export default StyledFeatureBadge;
diff --git a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
index 75c5c807ff..b6cc004114 100644
--- a/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
+++ b/src/sentry/static/sentry/app/components/sidebar/sidebarItem.tsx
@@ -3,11 +3,9 @@ import React from 'react';
 import styled from '@emotion/styled';
 import {css} from '@emotion/core';
 
-import Tag from 'app/views/settings/components/tag';
+import FeatureBadge from 'app/components/featureBadge';
 import HookOrDefault from 'app/components/hookOrDefault';
 import Tooltip from 'app/components/tooltip';
-import {t} from 'app/locale';
-import space from 'app/styles/space';
 import TextOverflow from 'app/components/textOverflow';
 import {Theme} from 'app/utils/theme';
 import Link from 'app/components/links/link';
@@ -114,19 +112,13 @@ const SidebarItem = ({
             <SidebarItemLabel>
               <LabelHook id={id}>
                 <TextOverflow>{label}</TextOverflow>
-                {isNew && (
-                  <StyledTag priority="beta" size="small">
-                    {t('New')}
-                  </StyledTag>
-                )}
-                {isBeta && (
-                  <StyledTag priority="beta" size="small">
-                    {t('Beta')}
-                  </StyledTag>
-                )}
+                {isNew && <FeatureBadge type="new" />}
+                {isBeta && <FeatureBadge type="beta" />}
               </LabelHook>
             </SidebarItemLabel>
           )}
+          {collapsed && isNew && <CollapsedFeatureBadge type="new" />}
+          {collapsed && isBeta && <CollapsedFeatureBadge type="beta" />}
           {badge !== undefined && badge > 0 && (
             <SidebarItemBadge collapsed={collapsed}>{badge}</SidebarItemBadge>
           )}
@@ -278,9 +270,13 @@ const SidebarItemBadge = styled(({collapsed: _, ...props}) => <span {...props} /
   ${getCollapsedBadgeStyle};
 `;
 
-const StyledTag = styled(Tag)`
-  font-weight: normal;
-  padding: 3px ${space(0.75)};
-  margin-left: ${space(0.5)};
-  border-radius: 20px;
+const CollapsedFeatureBadge = styled(FeatureBadge)`
+  position: absolute;
+  top: 0;
+  right: 0;
 `;
+
+CollapsedFeatureBadge.defaultProps = {
+  variant: 'indicator',
+  noTooltip: true,
+};
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index 6eb389764d..1999060232 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -112,10 +112,22 @@ const alert = {
     iconColor: colors.red,
     background: colors.red,
   },
+} as const;
+
+const badge = {
+  alpha: {
+    background: `linear-gradient(90deg, ${colors.orangeLight}, ${colors.orangeDark})`,
+    indicatorColor: colors.orange,
+  },
   beta: {
     background: `linear-gradient(90deg, ${colors.pink}, ${colors.purple})`,
+    indicatorColor: colors.purple,
   },
-} as const;
+  new: {
+    background: `linear-gradient(90deg, ${colors.green}, ${colors.greenDark})`,
+    indicatorColor: colors.green,
+  },
+};
 
 const aliases = {
   textColor: colors.gray5,
@@ -298,6 +310,7 @@ const theme = {
   ...aliases,
 
   alert,
+  badge,
   button,
 
   charts: {
diff --git a/src/sentry/static/sentry/app/views/alerts/list/index.tsx b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
index e04b459261..e5b2bab17c 100644
--- a/src/sentry/static/sentry/app/views/alerts/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/alerts/list/index.tsx
@@ -14,7 +14,7 @@ import {t, tct} from 'app/locale';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import Alert from 'app/components/alert';
 import AsyncComponent from 'app/components/asyncComponent';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import Button from 'app/components/button';
 import ButtonBar from 'app/components/buttonBar';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
@@ -260,10 +260,7 @@ class IncidentsListContainer extends React.Component<Props> {
           <PageContent>
             <PageHeader>
               <StyledPageHeading>
-                {t('Alerts')}{' '}
-                <BetaTag
-                  title={t('This page is in beta and may change in the future.')}
-                />
+                {t('Alerts')} <FeatureBadge type="beta" />
               </StyledPageHeading>
 
               <Actions>
diff --git a/src/sentry/static/sentry/app/views/events/index.jsx b/src/sentry/static/sentry/app/views/events/index.jsx
index e30033306d..f392203af8 100644
--- a/src/sentry/static/sentry/app/views/events/index.jsx
+++ b/src/sentry/static/sentry/app/views/events/index.jsx
@@ -6,7 +6,7 @@ import isEqual from 'lodash/isEqual';
 import {loadOrganizationTags} from 'app/actionCreators/tags';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {t} from 'app/locale';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import Feature from 'app/components/acl/feature';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import LightWeightNoProjectMessage from 'app/components/lightWeightNoProjectMessage';
@@ -68,7 +68,7 @@ class EventsContainer extends React.Component {
               <Body>
                 <PageHeader>
                   <HeaderTitle>
-                    {t('Events')} <BetaTag />
+                    {t('Events')} <FeatureBadge type="beta" />
                   </HeaderTitle>
                   <StyledSearchBar
                     organization={organization}
diff --git a/src/sentry/static/sentry/app/views/monitors/monitors.jsx b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
index 8e20230adb..a08407422e 100644
--- a/src/sentry/static/sentry/app/views/monitors/monitors.jsx
+++ b/src/sentry/static/sentry/app/views/monitors/monitors.jsx
@@ -8,7 +8,7 @@ import {Panel, PanelBody, PanelItem} from 'app/components/panels';
 import {getParams} from 'app/components/organizations/globalSelectionHeader/getParams';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import Button from 'app/components/button';
 import PageHeading from 'app/components/pageHeading';
 import Pagination from 'app/components/pagination';
@@ -67,7 +67,7 @@ class Monitors extends AsyncView {
         <PageHeader>
           <HeaderTitle>
             <div>
-              {t('Monitors')} <BetaTag />
+              {t('Monitors')} <FeatureBadge type="beta" />
             </div>
             <NewMonitorButton
               to={`/organizations/${organization.slug}/monitors/create/`}
diff --git a/src/sentry/static/sentry/app/views/performance/landing.tsx b/src/sentry/static/sentry/app/views/performance/landing.tsx
index 01dbe51ffb..72dd3b8b12 100644
--- a/src/sentry/static/sentry/app/views/performance/landing.tsx
+++ b/src/sentry/static/sentry/app/views/performance/landing.tsx
@@ -6,7 +6,7 @@ import styled from '@emotion/styled';
 import {t} from 'app/locale';
 import {Organization} from 'app/types';
 import withOrganization from 'app/utils/withOrganization';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
 import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import {PageContent} from 'app/styles/organization';
@@ -127,8 +127,7 @@ class PerformanceLanding extends React.Component<Props, State> {
             <LightWeightNoProjectMessage organization={organization}>
               <StyledPageHeader>
                 <div>
-                  {t('Performance')}
-                  <BetaTag />
+                  {t('Performance')} <FeatureBadge type="beta" />
                 </div>
                 <div>{this.renderHeaderButtons()}</div>
               </StyledPageHeader>
diff --git a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
index e40ef46e8a..04a5214214 100644
--- a/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
+++ b/src/sentry/static/sentry/app/views/releasesV2/list/index.tsx
@@ -8,7 +8,7 @@ import flatMap from 'lodash/flatMap';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
 import AsyncView from 'app/views/asyncView';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import {Organization, Release, ProjectRelease} from 'app/types';
 import routeTitleGen from 'app/utils/routeTitle';
 import SearchBar from 'app/components/searchBar';
@@ -216,7 +216,7 @@ class ReleasesList extends AsyncView<Props, State> {
           <LightWeightNoProjectMessage organization={organization}>
             <StyledPageHeader>
               <PageHeading>
-                {t('Releases')} <BetaTag />
+                {t('Releases')} <FeatureBadge type="beta" />
               </PageHeading>
               <SortAndFilterWrapper>
                 <ReleaseListSortOptions
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.tsx b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.tsx
index 9f3d368dc7..69bcc661a1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsLayout.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsLayout.tsx
@@ -66,6 +66,7 @@ const SidebarWrapper = styled('div')`
   background: ${p => p.theme.white};
   border-right: 1px solid ${p => p.theme.borderLight};
   padding: ${space(4)};
+  padding-right: ${space(2)};
 `;
 
 const HeaderContent = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
index 26d4464f22..1a3a11b6d0 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsNavItem.tsx
@@ -4,7 +4,7 @@ import styled from '@emotion/styled';
 
 import Badge from 'app/components/badge';
 import HookOrDefault from 'app/components/hookOrDefault';
-import Tag from 'app/views/settings/components/tag';
+import FeatureBadge from 'app/components/featureBadge';
 
 type Props = {
   to: React.ComponentProps<Link>['to'];
@@ -22,13 +22,7 @@ const SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {
   });
 
   const renderedBadge =
-    badge === 'new' ? (
-      <StyledTag priority="warning" size="small" border>
-        {badge}
-      </StyledTag>
-    ) : (
-      <Badge text={badge} />
-    );
+    badge === 'new' ? <FeatureBadge type="new" /> : <Badge text={badge} />;
 
   return (
     <StyledNavItem onlyActiveOnIndex={index} activeClassName="active" {...props}>
@@ -39,10 +33,6 @@ const SettingsNavItem = ({badge, label, index, id, ...props}: Props) => {
   );
 };
 
-const StyledTag = styled(Tag)`
-  margin-left: 0.25em;
-`;
-
 const StyledNavItem = styled(Link)`
   display: block;
   color: ${p => p.theme.gray2};
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.jsx b/src/sentry/static/sentry/app/views/settings/components/tag.jsx
deleted file mode 100644
index d900a7be6c..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/tag.jsx
+++ /dev/null
@@ -1,67 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import styled from '@emotion/styled';
-
-import InlineSvg from 'app/components/inlineSvg';
-
-const getMarginLeft = p => {
-  if (!p.inline) {
-    return '';
-  }
-  return `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};`;
-};
-
-const getBorder = p =>
-  p.border
-    ? `border: 1px solid ${
-        p.priority ? p.theme.alert[p.priority].border : p.theme.gray1
-      };`
-    : '';
-
-const Tag = styled(
-  ({
-    children,
-    icon,
-    inline: _inline,
-    priority: _priority,
-    size: _size,
-    border: _border,
-    ...props
-  }) => (
-    <div {...props}>
-      {icon && <StyledInlineSvg src={icon} size="12px" />}
-      {children}
-    </div>
-  )
-)`
-  display: inline-flex;
-  box-sizing: border-box;
-  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};
-  font-size: 75%;
-  line-height: 1;
-  color: ${p => (p.priority ? '#fff' : p.gray5)};
-  text-align: center;
-  white-space: nowrap;
-  vertical-align: middle;
-  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};
-  text-transform: lowercase;
-  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};
-  background: ${p =>
-    p.priority ? p.theme.alert[p.priority].background : p.theme.offWhite2};
-  ${p => getBorder(p)};
-  ${p => getMarginLeft(p)};
-`;
-
-Tag.propTypes = {
-  priority: PropTypes.string,
-  size: PropTypes.string,
-  border: PropTypes.bool,
-  icon: PropTypes.string,
-  inline: PropTypes.bool,
-};
-
-const StyledInlineSvg = styled(InlineSvg)`
-  margin-right: 4px;
-`;
-
-export default Tag;
diff --git a/src/sentry/static/sentry/app/views/settings/components/tag.tsx b/src/sentry/static/sentry/app/views/settings/components/tag.tsx
new file mode 100644
index 0000000000..109d28aae7
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/tag.tsx
@@ -0,0 +1,71 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import InlineSvg from 'app/components/inlineSvg';
+import {Theme} from 'app/utils/theme';
+
+type Props = React.HTMLAttributes<HTMLDivElement> & {
+  priority?: keyof Theme['badge'] | keyof Theme['alert'];
+  size?: string;
+  icon?: string;
+  border?: boolean;
+  inline?: boolean;
+};
+
+type StyleFuncProps = Props & {theme: Theme};
+
+/**
+ * Get priority from alerts or badge styles
+ */
+const getPriority = (p: StyleFuncProps) => {
+  if (p.priority) {
+    return p.theme.alert[p.priority] ?? p.theme.badge[p.priority] ?? null;
+  }
+
+  return null;
+};
+
+const getMarginLeft = (p: StyleFuncProps) =>
+  p.inline ? `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};` : '';
+
+const getBorder = (p: StyleFuncProps) =>
+  p.border ? `border: 1px solid ${getPriority(p)?.border ?? p.theme.gray1};` : '';
+
+const Tag = styled(
+  ({
+    children,
+    icon,
+    inline: _inline,
+    priority: _priority,
+    size: _size,
+    border: _border,
+    ...props
+  }: Props) => (
+    <div {...props}>
+      {icon && <StyledInlineSvg src={icon} size="12px" />}
+      {children}
+    </div>
+  )
+)`
+  display: inline-flex;
+  box-sizing: border-box;
+  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  line-height: 1;
+  color: ${p => (p.priority ? '#fff' : p.theme.gray5)};
+  text-align: center;
+  white-space: nowrap;
+  vertical-align: middle;
+  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};
+  text-transform: lowercase;
+  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};
+  background: ${p => getPriority(p)?.background ?? p.theme.offWhite2};
+  ${p => getBorder(p)};
+  ${p => getMarginLeft(p)};
+`;
+
+const StyledInlineSvg = styled(InlineSvg)`
+  margin-right: 4px;
+`;
+
+export default Tag;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
index c2c4e7f951..d72e50a206 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationDashboard/requestLog.tsx
@@ -18,6 +18,7 @@ import InlineSvg from 'app/components/inlineSvg';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {SentryApp, SentryAppWebhookRequest, SentryAppSchemaIssueLink} from 'app/types';
+import {Theme} from 'app/utils/theme';
 
 const ALL_EVENTS = t('All Events');
 const MAX_PER_PAGE = 10;
@@ -69,7 +70,7 @@ const getEventTypes = memoize((app: SentryApp) => {
 });
 
 const ResponseCode = ({code}: {code: number}) => {
-  let priority = 'error';
+  let priority: keyof Theme['alert'] = 'error';
   if (code <= 399 && code >= 300) {
     priority = 'warning';
   } else if (code <= 299 && code >= 100) {
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx
index 8537a8cc24..a1af727cf6 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/alertTypeChooser.tsx
@@ -7,7 +7,7 @@ import space from 'app/styles/space';
 import Radio from 'app/components/radio';
 import textStyles from 'app/styles/text';
 import BulletList from 'app/styles/bulletList';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import Tooltip from 'app/components/tooltip';
 
 type Props = {
@@ -64,7 +64,7 @@ const AlertTypeChooser = ({selected, onChange}: Props) => (
           onChange={() => onChange('metric')}
         />
         {t('Metric Alert')}
-        <BetaTag />
+        <FeatureBadge type="beta" />
       </RadioLabel>
       <p>
         {t(
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index 9d2115273e..8c3b75cf17 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -26,7 +26,7 @@ import ProjectsStore from 'app/stores/projectsStore';
 import SettingsPageHeader from 'app/views/settings/components/settingsPageHeader';
 import TextBlock from 'app/views/settings/components/text/textBlock';
 import TextField from 'app/views/settings/components/forms/textField';
-import BetaTag from 'app/components/betaTag';
+import FeatureBadge from 'app/components/featureBadge';
 import handleXhrErrorResponse from 'app/utils/handleXhrErrorResponse';
 import marked from 'app/utils/marked';
 import recreateRoute from 'app/utils/recreateRoute';
@@ -449,7 +449,7 @@ class ProjectGeneralSettings extends AsyncView {
               {...jsonFormProps}
               title={
                 <React.Fragment>
-                  {t('Grouping Settings')} <BetaTag />
+                  {t('Grouping Settings')} <FeatureBadge type="beta" />
                 </React.Fragment>
               }
               fields={[
diff --git a/tests/js/spec/components/__snapshots__/tag.spec.jsx.snap b/tests/js/spec/components/__snapshots__/tag.spec.jsx.snap
index 3d83aa9dc7..759a3810a9 100644
--- a/tests/js/spec/components/__snapshots__/tag.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/tag.spec.jsx.snap
@@ -8,12 +8,12 @@ exports[`Tag renders 1`] = `
 >
   <Component
     border={true}
-    className="css-pt19g0-Tag e6q9yfr0"
+    className="css-s0h2sd-Tag e1glkkip0"
     priority="info"
     size="small"
   >
     <div
-      className="css-pt19g0-Tag e6q9yfr0"
+      className="css-s0h2sd-Tag e1glkkip0"
     >
       Text to Copy
     </div>
