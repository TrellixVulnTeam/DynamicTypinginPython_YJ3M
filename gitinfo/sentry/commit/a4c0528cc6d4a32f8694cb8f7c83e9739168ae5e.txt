commit a4c0528cc6d4a32f8694cb8f7c83e9739168ae5e
Author: Ryan Skonnord <ryan.skonnord@sentry.io>
Date:   Mon May 11 11:27:45 2020 -0700

    perf(features): Optimize for multiple calls to features.has (#18668)
    
    This targets a performance problem where ProjectSerializer must call
    features.has a linear number of times. The cost was determined to be
    associated with getting the feature handlers from all plugins; the
    handlers may be reused because they are independent from the feature
    being checked. As a solution, allow FeatureManager to return an object
    that delays evaluation of its `has` method, storing the set of handlers.
    
    Revert changes to the project API that conditionally omitted the
    features attribute:
    * 6b8243cf38e48dfee3ccdc15543138a35d6bb07f (#18637)
    * db15fe51a13febb01f81ea414d7c525911fd7893 (#18632)
    * cb081997a11efd98ecfcabdbb125d25a7f9f030b (#18608)

diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 39f9ca67da..e2c8725196 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -5,7 +5,6 @@ import six
 from django.db.models import Q
 from rest_framework.response import Response
 
-from sentry import features
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.paginator import OffsetPaginator
@@ -106,19 +105,15 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint, EnvironmentMixin):
         # TODO(davidenwang): remove this after frontend requires only paginated projects
         get_all_projects = request.GET.get("all_projects") == "1"
 
-        include_features = not features.has("organizations:enterprise-perf", organization)
         if get_all_projects:
             queryset = queryset.order_by("slug").select_related("organization")
-            serializer = ProjectSummarySerializer(include_features=include_features)
-            return Response(serialize(list(queryset), request.user, serializer))
+            return Response(serialize(list(queryset), request.user, ProjectSummarySerializer()))
         else:
 
             def serialize_on_result(result):
                 environment_id = self._get_environment_id_from_request(request, organization.id)
                 serializer = ProjectSummarySerializer(
-                    environment_id=environment_id,
-                    stats_period=stats_period,
-                    include_features=include_features,
+                    environment_id=environment_id, stats_period=stats_period,
                 )
                 return serialize(result, request.user, serializer)
 
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 469282f393..9e930cc4ea 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -11,7 +11,7 @@ from django.utils import timezone
 
 import sentry_sdk
 
-from sentry import options, roles, tsdb, projectoptions
+from sentry import options, roles, tsdb, projectoptions, features
 from sentry.api.serializers import register, serialize, Serializer
 from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.api.serializers.models.team import get_org_roles, get_team_memberships
@@ -20,6 +20,7 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.constants import StatsPeriod
 from sentry.digests import backend as digests
 from sentry.eventstore.models import DEFAULT_SUBJECT_TEMPLATE
+from sentry.features.base import ProjectFeature
 from sentry.lang.native.utils import convert_crashreport_count
 from sentry.models import (
     EnvironmentProject,
@@ -58,13 +59,12 @@ class ProjectSerializer(Serializer):
     such as "show all projects for this organization", and its attributes be kept to a minimum.
     """
 
-    def __init__(self, environment_id=None, stats_period=None, include_features=True):
+    def __init__(self, environment_id=None, stats_period=None):
         if stats_period is not None:
             assert stats_period in STATS_PERIOD_CHOICES
 
         self.environment_id = environment_id
         self.stats_period = stats_period
-        self.include_features = include_features
 
     def get_access_by_project(self, item_list, user):
         request = env.request
@@ -100,95 +100,99 @@ class ProjectSerializer(Serializer):
         return result
 
     def get_attrs(self, item_list, user):
-        project_ids = [i.id for i in item_list]
-        if user.is_authenticated() and item_list:
-            bookmarks = set(
-                ProjectBookmark.objects.filter(user=user, project_id__in=project_ids).values_list(
-                    "project_id", flat=True
+        def measure_span(op_tag):
+            span = sentry_sdk.start_span(op="serialize.get_attrs.project.{}".format(op_tag))
+            span.set_data("Object Count", len(item_list))
+            return span
+
+        with measure_span("preamble"):
+            project_ids = [i.id for i in item_list]
+            if user.is_authenticated() and item_list:
+                bookmarks = set(
+                    ProjectBookmark.objects.filter(
+                        user=user, project_id__in=project_ids
+                    ).values_list("project_id", flat=True)
                 )
-            )
-            user_options = {
-                (u.project_id, u.key): u.value
-                for u in UserOption.objects.filter(
-                    Q(user=user, project__in=item_list, key="mail:alert")
-                    | Q(user=user, key="subscribe_by_default", project__isnull=True)
+                user_options = {
+                    (u.project_id, u.key): u.value
+                    for u in UserOption.objects.filter(
+                        Q(user=user, project__in=item_list, key="mail:alert")
+                        | Q(user=user, key="subscribe_by_default", project__isnull=True)
+                    )
+                }
+                default_subscribe = user_options.get("subscribe_by_default", "1") == "1"
+            else:
+                bookmarks = set()
+                user_options = {}
+                default_subscribe = False
+
+            if self.stats_period:
+                # we need to compute stats at 1d (1h resolution), and 14d
+                project_ids = [o.id for o in item_list]
+
+                segments, interval = STATS_PERIOD_CHOICES[self.stats_period]
+                now = timezone.now()
+                stats = tsdb.get_range(
+                    model=tsdb.models.project,
+                    keys=project_ids,
+                    end=now,
+                    start=now - ((segments - 1) * interval),
+                    rollup=int(interval.total_seconds()),
+                    environment_ids=self.environment_id and [self.environment_id],
                 )
-            }
-            default_subscribe = user_options.get("subscribe_by_default", "1") == "1"
-        else:
-            bookmarks = set()
-            user_options = {}
-            default_subscribe = False
-
-        if self.stats_period:
-            # we need to compute stats at 1d (1h resolution), and 14d
-            project_ids = [o.id for o in item_list]
-
-            segments, interval = STATS_PERIOD_CHOICES[self.stats_period]
-            now = timezone.now()
-            stats = tsdb.get_range(
-                model=tsdb.models.project,
-                keys=project_ids,
-                end=now,
-                start=now - ((segments - 1) * interval),
-                rollup=int(interval.total_seconds()),
-                environment_ids=self.environment_id and [self.environment_id],
-            )
-        else:
-            stats = None
-
-        avatars = {a.project_id: a for a in ProjectAvatar.objects.filter(project__in=item_list)}
-        project_ids = [i.id for i in item_list]
-        platforms = ProjectPlatform.objects.filter(project_id__in=project_ids).values_list(
-            "project_id", "platform"
-        )
-        platforms_by_project = defaultdict(list)
-        for project_id, platform in platforms:
-            platforms_by_project[project_id].append(platform)
+            else:
+                stats = None
 
-        result = self.get_access_by_project(item_list, user)
-        for item in item_list:
-            result[item].update(
-                {
-                    "is_bookmarked": item.id in bookmarks,
-                    "is_subscribed": bool(
-                        user_options.get((item.id, "mail:alert"), default_subscribe)
-                    ),
-                    "avatar": avatars.get(item.id),
-                    "platforms": platforms_by_project[item.id],
-                }
+            avatars = {a.project_id: a for a in ProjectAvatar.objects.filter(project__in=item_list)}
+            project_ids = [i.id for i in item_list]
+            platforms = ProjectPlatform.objects.filter(project_id__in=project_ids).values_list(
+                "project_id", "platform"
             )
-            if stats:
-                result[item]["stats"] = stats[item.id]
-        return result
-
-    def get_feature_list(self, obj, user):
-        from sentry import features
-        from sentry.features.base import ProjectFeature
+            platforms_by_project = defaultdict(list)
+            for project_id, platform in platforms:
+                platforms_by_project[project_id].append(platform)
 
-        if not self.include_features:
-            return None
+        with measure_span("access"):
+            result = self.get_access_by_project(item_list, user)
 
-        with sentry_sdk.start_span(
-            op="project_feature_list", description=getattr(obj, "name")
-        ) as span:
-            # Retrieve all registered organization features
+        with measure_span("features"):
             project_features = features.all(feature_type=ProjectFeature).keys()
-            feature_list = set()
+            feature_checker = features.build_checker()
+            for item in item_list:
+                result[item]["features"] = self.get_feature_list(
+                    item, user, project_features, feature_checker
+                )
+
+        with measure_span("other"):
+            for item in item_list:
+                result[item].update(
+                    {
+                        "is_bookmarked": item.id in bookmarks,
+                        "is_subscribed": bool(
+                            user_options.get((item.id, "mail:alert"), default_subscribe)
+                        ),
+                        "avatar": avatars.get(item.id),
+                        "platforms": platforms_by_project[item.id],
+                    }
+                )
+                if stats:
+                    result[item]["stats"] = stats[item.id]
+        return result
 
-            for feature_name in project_features:
-                if not feature_name.startswith("projects:"):
-                    continue
-                if features.has(feature_name, obj, actor=user):
-                    # Remove the project scope prefix
-                    feature_list.add(feature_name[len("projects:") :])
+    def get_feature_list(self, obj, user, project_features, feature_checker):
+        feature_list = set()
 
-            if obj.flags.has_releases:
-                feature_list.add("releases")
+        for feature_name in project_features:
+            if not feature_name.startswith("projects:"):
+                continue
+            if feature_checker.has(feature_name, obj, actor=user):
+                # Remove the project scope prefix
+                feature_list.add(feature_name[len("projects:") :])
 
-            span.set_data("Feature Count", len(feature_list))
+        if obj.flags.has_releases:
+            feature_list.add("releases")
 
-            return feature_list
+        return feature_list
 
     def serialize(self, obj, attrs, user):
         status_label = STATUS_LABELS.get(obj.status, "unknown")
@@ -210,6 +214,7 @@ class ProjectSerializer(Serializer):
             "color": obj.color,
             "dateCreated": obj.date_added,
             "firstEvent": obj.first_event,
+            "features": attrs["features"],
             "status": status_label,
             "platform": obj.platform,
             "isInternal": obj.is_internal_project(),
@@ -217,16 +222,8 @@ class ProjectSerializer(Serializer):
             "hasAccess": attrs["has_access"],
             "avatar": avatar,
         }
-        return self._add_conditional_attributes(obj, attrs, user, context)
-
-    def _add_conditional_attributes(self, obj, attrs, user, context):
-        feature_list = self.get_feature_list(obj, user)
-        if feature_list is not None:
-            context["features"] = feature_list
-
         if "stats" in attrs:
             context["stats"] = attrs["stats"]
-
         return context
 
 
@@ -378,6 +375,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             "hasAccess": attrs["has_access"],
             "dateCreated": obj.date_added,
             "environments": attrs["environments"],
+            "features": attrs["features"],
             "firstEvent": obj.first_event,
             "platform": obj.platform,
             "platforms": attrs["platforms"],
@@ -385,7 +383,9 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             "latestRelease": attrs["latest_release"],
             "hasUserReports": attrs["has_user_reports"],
         }
-        return self._add_conditional_attributes(obj, attrs, user, context)
+        if "stats" in attrs:
+            context["stats"] = attrs["stats"]
+        return context
 
 
 def bulk_fetch_project_latest_releases(projects):
diff --git a/src/sentry/api/serializers/models/team.py b/src/sentry/api/serializers/models/team.py
index 1f5d5c509a..1b766a965d 100644
--- a/src/sentry/api/serializers/models/team.py
+++ b/src/sentry/api/serializers/models/team.py
@@ -6,7 +6,7 @@ from collections import defaultdict
 from django.db.models import Count
 
 
-from sentry import roles, features
+from sentry import roles
 from sentry.app import env
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.auth.superuser import is_active_superuser
@@ -132,8 +132,6 @@ class TeamSerializer(Serializer):
 
 class TeamWithProjectsSerializer(TeamSerializer):
     def get_attrs(self, item_list, user):
-        from sentry.api.serializers.models.project import ProjectSerializer
-
         project_teams = list(
             ProjectTeam.objects.filter(team__in=item_list, project__status=ProjectStatus.VISIBLE)
             .order_by("project__name", "project__slug")
@@ -147,13 +145,9 @@ class TeamWithProjectsSerializer(TeamSerializer):
             project_team.project._organization_cache = orgs[project_team.project.organization_id]
 
         projects = [pt.project for pt in project_teams]
-        project_serializer = ProjectSerializer(
-            include_features=not all(
-                features.has("organizations:enterprise-perf", org) for org in orgs.values()
-            )
-        )
-        serialized_projects = serialize(projects, user, project_serializer)
-        projects_by_id = {project.id: data for project, data in zip(projects, serialized_projects)}
+        projects_by_id = {
+            project.id: data for project, data in zip(projects, serialize(projects, user))
+        }
 
         project_map = defaultdict(list)
         for project_team in project_teams:
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index da96cb796b..906b3a3917 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -131,3 +131,4 @@ add = default_manager.add
 get = default_manager.get
 has = default_manager.has
 all = default_manager.all
+build_checker = default_manager.build_checker
diff --git a/src/sentry/features/manager.py b/src/sentry/features/manager.py
index 02656f181c..cb77e37c3d 100644
--- a/src/sentry/features/manager.py
+++ b/src/sentry/features/manager.py
@@ -2,6 +2,8 @@ from __future__ import absolute_import
 
 __all__ = ["FeatureManager"]
 
+import itertools
+
 from django.conf import settings
 
 from sentry.utils.safe import safe_execute
@@ -66,8 +68,37 @@ class FeatureManager(object):
 
         >>> FeatureManager.has('organizations:feature', organization, actor=request.user)
         """
+        return self.build_checker().has(name, *args, **kwargs)
+
+    def build_checker(self):
+        """
+        Set up for a delayed execution of ``has``.
+
+        Successive calls to the returned checker have better performance than
+        repeatedly calling ``FeatureManager.has``, because it retains the set
+        of ``feature.handler.FeatureHandler`` objects. An instance of the
+        checker should be kept only in a short-lived context, because any
+        dynamic changes to plugins' feature handlers are not reflected in its
+        behavior.
+        """
+        return FeatureChecker(self)
+
+
+class FeatureChecker(object):
+    def __init__(self, manager):
+        from sentry.plugins.base import plugins
+
+        self.manager = manager
+
+        handlers_per_plugin = [
+            safe_execute(plugin.get_feature_hooks, _with_transaction=False) or ()
+            for plugin in plugins.all(version=2)
+        ]
+        self.handlers = tuple(itertools.chain(*handlers_per_plugin))
+
+    def has(self, name, *args, **kwargs):
         actor = kwargs.pop("actor", None)
-        feature = self.get(name, *args, **kwargs)
+        feature = self.manager.get(name, *args, **kwargs)
 
         # Check plugin feature handlers
         rv = self._get_plugin_value(feature, actor)
@@ -82,12 +113,8 @@ class FeatureManager(object):
         return False
 
     def _get_plugin_value(self, feature, actor):
-        from sentry.plugins.base import plugins
-
-        for plugin in plugins.all(version=2):
-            handlers = safe_execute(plugin.get_feature_hooks, _with_transaction=False)
-            for handler in handlers or ():
-                rv = handler(feature, actor)
-                if rv is not None:
-                    return rv
+        for handler in self.handlers:
+            rv = handler(feature, actor)
+            if rv is not None:
+                return rv
         return None
diff --git a/tests/sentry/api/endpoints/test_organization_projects.py b/tests/sentry/api/endpoints/test_organization_projects.py
index d0cb3f3b47..212494fe45 100644
--- a/tests/sentry/api/endpoints/test_organization_projects.py
+++ b/tests/sentry/api/endpoints/test_organization_projects.py
@@ -34,7 +34,6 @@ class OrganizationProjectsTest(APITestCase):
         response = self.client.get(self.path)
         self.check_valid_response(response, [project])
         assert self.client.session["activeorg"] == self.org.slug
-        assert "features" in response.data[0]
 
     def test_with_stats(self):
         self.login_as(user=self.user)
@@ -164,27 +163,6 @@ class OrganizationProjectsTest(APITestCase):
         # Verify all projects in the org are returned in sorted order
         self.check_valid_response(response, sorted_projects)
 
-        for project in response.data:
-            assert "features" in project
-
-    def test_features_are_suppressed(self):
-        self.login_as(user=self.user)
-        for i in range(3):
-            p = "project{}".format(i)
-            self.create_project(teams=[self.team], name=p, slug=p)
-
-        queries = [
-            "",
-            "?all_projects=1",
-            "?per_page=2",
-            "?all_projects=1&per_page=2",
-        ]
-        for query in queries:
-            with self.feature("organizations:enterprise-perf"):
-                response = self.client.get(self.path + query)
-            for project in response.data:
-                assert "features" not in project
-
     def test_user_projects(self):
         self.foo_user = self.create_user("foo@example.com")
         self.login_as(user=self.foo_user)
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index 78f82d737b..44d88fcf70 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -12,7 +12,6 @@ from exam import fixture
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.project import (
     bulk_fetch_project_latest_releases,
-    ProjectSerializer,
     ProjectWithOrganizationSerializer,
     ProjectWithTeamSerializer,
     ProjectSummarySerializer,
@@ -40,17 +39,6 @@ class ProjectSerializerTest(TestCase):
         assert result["slug"] == project.slug
         assert result["name"] == project.name
         assert result["id"] == six.text_type(project.id)
-        assert result["features"] is not None
-
-    def test_suppress_features(self):
-        user = self.create_user(username="foo")
-        organization = self.create_organization(owner=user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(teams=[team], organization=organization, name="foo")
-
-        result = serialize(project, user, ProjectSerializer(include_features=False))
-
-        assert "features" not in result
 
     def test_member_access(self):
         user = self.create_user(username="foo")
@@ -224,12 +212,6 @@ class ProjectSummarySerializerTest(TestCase):
         assert result["latestRelease"] == {"version": self.release.version}
         assert result["environments"] == ["production", "staging"]
 
-    def test_suppress_features(self):
-        result = serialize(
-            self.project, self.user, ProjectSummarySerializer(include_features=False)
-        )
-        assert "features" not in result
-
     def test_user_reports(self):
         result = serialize(self.project, self.user, ProjectSummarySerializer())
         assert result["hasUserReports"] is False
diff --git a/tests/sentry/api/serializers/test_team.py b/tests/sentry/api/serializers/test_team.py
index b9a55a2706..148e497575 100644
--- a/tests/sentry/api/serializers/test_team.py
+++ b/tests/sentry/api/serializers/test_team.py
@@ -6,7 +6,6 @@ import six
 
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.team import TeamWithProjectsSerializer
-from sentry.api.serializers.models.project import ProjectSerializer
 from sentry.models import InviteStatus
 from sentry.testutils import TestCase
 
@@ -170,7 +169,7 @@ class TeamSerializerTest(TestCase):
 
 
 class TeamWithProjectsSerializerTest(TestCase):
-    def test_simple(self, project_serializer=None):
+    def test_simple(self):
         user = self.create_user(username="foo")
         organization = self.create_organization(owner=user)
         team = self.create_team(organization=organization)
@@ -178,7 +177,7 @@ class TeamWithProjectsSerializerTest(TestCase):
         project2 = self.create_project(teams=[team], organization=organization, name="bar")
 
         result = serialize(team, user, TeamWithProjectsSerializer())
-        serialized_projects = serialize([project2, project], user, project_serializer)
+        serialized_projects = serialize([project2, project], user)
 
         assert result == {
             "slug": team.slug,
@@ -192,7 +191,3 @@ class TeamWithProjectsSerializerTest(TestCase):
             "memberCount": 0,
             "dateCreated": team.date_added,
         }
-
-    def test_with_performance_flag(self):
-        with self.feature("organizations:enterprise-perf"):
-            self.test_simple(ProjectSerializer(include_features=False))
