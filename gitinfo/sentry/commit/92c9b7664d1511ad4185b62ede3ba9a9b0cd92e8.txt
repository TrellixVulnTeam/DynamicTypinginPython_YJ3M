commit 92c9b7664d1511ad4185b62ede3ba9a9b0cd92e8
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Jan 30 14:48:27 2019 -0800

    feat(dashboard): Add Explore Menu to widgets [APP-1010] (#11723)
    
    This allows you to go to discover or events for each query in a widget

diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
index 1fd97b58c7..d41ea39b2d 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/anonymousUsersAffected.jsx
@@ -1,7 +1,10 @@
 /**
  * Anonymous affected users
  */
+import {t} from 'app/locale';
+
 const anonymousUsersAffectedQuery = {
+  name: t('Anonymous Users'),
   fields: [],
   conditions: [['user.email', 'IS NULL', null]],
   aggregations: [['count()', null, 'Anonymous Users']],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
index 4f315ee110..31803ae4ae 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/errorsByGeo.jsx
@@ -1,9 +1,14 @@
+import {OPERATOR} from 'app/views/organizationDiscover/data';
+import {t} from 'app/locale';
+
 /**
  * Top Errors by geo location
  */
+
 const errorsByGeo = {
+  name: t('Errors By Country'),
   fields: ['geo.country_code'],
-  conditions: [['geo.country_code', 'IS NOT NULL', null]],
+  conditions: [['geo.country_code', OPERATOR.IS_NOT_NULL, null]],
   aggregations: [['count()', null, 'count']],
   limit: 10,
 
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
index fb431e81fc..c1bed92249 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/events.jsx
@@ -1,7 +1,10 @@
 /**
  * Events by day
  */
+import {t} from 'app/locale';
+
 const events = {
+  name: t('Events'),
   fields: [],
   conditions: [],
   aggregations: [['count()', null, 'Events']],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
index 5192827c81..96ede33eb8 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/eventsByRelease.jsx
@@ -1,7 +1,10 @@
 /**
  * Events by Release
  */
+import {t} from 'app/locale';
+
 const eventsByRelease = {
+  name: t('Events by Release'),
   fields: ['release'],
   conditions: [],
   aggregations: [['count()', null, 'Events']],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
index 36385cfbfc..650cf00924 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/handledVsUnhandled.jsx
@@ -1,7 +1,10 @@
 /**
- * Events by day
+ * Handled vs Unhandled Events
  */
+import {t} from 'app/locale';
+
 const handledVsUnhandledQuery = {
+  name: t('Handled vs. Unhandled'),
   fields: ['error.handled'],
   conditions: [],
   aggregations: [['count()', null, 'count']],
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
index f7d8d6aed0..e4ca331503 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/knownUsersAffected.jsx
@@ -1,9 +1,13 @@
 /**
  * Known affected users
  */
+import {OPERATOR} from 'app/views/organizationDiscover/data';
+import {t} from 'app/locale';
+
 const knownUsersAffectedQuery = {
+  name: t('Known Users'),
   fields: [],
-  conditions: [['user.email', 'IS NOT NULL', null]],
+  conditions: [['user.email', OPERATOR.IS_NOT_NULL, null]],
   aggregations: [['uniq', 'user.email', 'Known Users']],
   limit: 2000,
 
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevicesAndBrowsers.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevicesAndBrowsers.jsx
index f2fedf5425..07660c30d6 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevicesAndBrowsers.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topDevicesAndBrowsers.jsx
@@ -1,7 +1,10 @@
 /**
- * Top Errors by Device
+ * Top Errors by Device and Browsers
  */
-const topDevices = {
+import {t} from 'app/locale';
+
+const topDevicesAndBrowsers = {
+  name: t('Top Devices and Browsers'),
   fields: ['device.family', 'browser.name'],
   conditions: [],
   aggregations: [['count()', null, 'count']],
@@ -10,4 +13,4 @@ const topDevices = {
   orderby: '-count',
 };
 
-export default topDevices;
+export default topDevicesAndBrowsers;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
deleted file mode 100644
index 389c786309..0000000000
--- a/src/sentry/static/sentry/app/views/organizationDashboard/data/queries/topTransactions.jsx
+++ /dev/null
@@ -1,15 +0,0 @@
-/**
- * Top Events by URL
- */
-const eventsQuery = {
-  fields: ['url'],
-  conditions: [],
-  aggregations: [['count()', null, 'count']],
-  limit: 2000,
-
-  orderby: '-time',
-  groupby: ['time'],
-  rollup: 86400,
-};
-
-export default eventsQuery;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
index ab247f8ea1..3651b4078b 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/exploreWidget.jsx
@@ -1,69 +1,122 @@
+import {pickBy} from 'lodash';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled, {css} from 'react-emotion';
 
+import {getEventsUrlPathFromDiscoverQuery} from 'app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery';
 import {getQueryStringFromQuery} from 'app/views/organizationDiscover/utils';
+import {t} from 'app/locale';
 import Button from 'app/components/button';
+import DropdownLink from 'app/components/dropdownLink';
 import InlineSvg from 'app/components/inlineSvg';
 import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
 import withOrganization from 'app/utils/withOrganization';
 
+const exploreMenuCss = css`
+  font-weight: normal;
+  text-transform: none;
+  white-space: nowrap;
+`;
+
 class ExploreWidget extends React.Component {
   static propTypes = {
     widget: SentryTypes.Widget,
+    queries: PropTypes.arrayOf(SentryTypes.DiscoverQuery),
     organization: SentryTypes.Organization,
     selection: SentryTypes.GlobalSelection,
     router: PropTypes.object,
   };
 
-  handleExportToDiscover = event => {
-    const {organization, widget, router} = this.props;
-    const [firstQuery] = widget.queries.discover;
+  getExportToDiscover = query => {
+    const {organization} = this.props;
     const {
       datetime,
       environments, // eslint-disable-line no-unused-vars
       ...selection
     } = this.props.selection;
 
-    event.stopPropagation();
-
     // Discover does not support importing these
     const {
       groupby, // eslint-disable-line no-unused-vars
       rollup, // eslint-disable-line no-unused-vars
       orderby,
-      ...query
-    } = firstQuery;
+      ...restQuery
+    } = query;
 
     const orderbyTimeIndex = orderby.indexOf('time');
     let visual = 'table';
 
     if (orderbyTimeIndex !== -1) {
-      query.orderby = `${orderbyTimeIndex === 0 ? '' : '-'}${query.aggregations[0][2]}`;
+      restQuery.orderby = `${orderbyTimeIndex === 0 ? '' : '-'}${restQuery
+        .aggregations[0][2]}`;
       visual = 'line-by-day';
     } else {
-      query.orderby = orderby;
+      restQuery.orderby = orderby;
     }
 
-    router.push(
-      `/organizations/${organization.slug}/discover/${getQueryStringFromQuery({
-        ...query,
+    return `/organizations/${organization.slug}/discover/${getQueryStringFromQuery(
+      pickBy({
+        ...restQuery,
         ...selection,
         start: datetime.start,
         end: datetime.end,
         range: datetime.period,
         limit: 1000,
-      })}&visual=${visual}`
-    );
+      })
+    )}&visual=${visual}`;
+  };
+
+  getExportToEvents = query => {
+    const {selection, organization} = this.props;
+    return getEventsUrlPathFromDiscoverQuery({
+      organization,
+      selection,
+      query,
+    });
   };
 
   render() {
-    // TODO(billy): This is temporary
-    // Need design followups
+    const {widget} = this.props;
+    const discoverQueries = widget.queries.discover;
+
     return (
-      <Button size="xsmall" onClick={this.handleExportToDiscover}>
-        <InlineSvg src="icon-discover" />
-      </Button>
+      <DropdownLink
+        anchorRight={true}
+        title={t('Explore')}
+        topLevelClasses={exploreMenuCss}
+      >
+        {discoverQueries.map(query => (
+          <ExploreRow key={query.name}>
+            <QueryName>{query.name}</QueryName>
+
+            <ExploreActions>
+              <Button borderless size="zero" to={this.getExportToDiscover(query)}>
+                <InlineSvg src="icon-discover" />
+              </Button>
+              <Button borderless size="zero" to={this.getExportToEvents(query)}>
+                <InlineSvg src="icon-stack" />
+              </Button>
+            </ExploreActions>
+          </ExploreRow>
+        ))}
+      </DropdownLink>
     );
   }
 }
 export default withOrganization(ExploreWidget);
+
+const ExploreRow = styled('li')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 0 ${space(0.5)};
+`;
+
+const ExploreActions = styled('div')`
+  display: flex;
+`;
+
+const QueryName = styled('span')`
+  margin-right: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
new file mode 100644
index 0000000000..83d18dd04b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.jsx
@@ -0,0 +1,39 @@
+import {
+  NEGATION_OPERATORS,
+  NULL_OPERATORS,
+  WILDCARD_OPERATORS,
+} from 'app/views/organizationDiscover/data';
+import {defined} from 'app/utils';
+
+const checkIsNegation = operator => NEGATION_OPERATORS.includes(operator);
+const checkIsNull = operator => NULL_OPERATORS.includes(operator);
+const checkIsWildcard = operator => WILDCARD_OPERATORS.includes(operator);
+
+function getDiscoverConditionToSearchString(condition = []) {
+  let [field, operator, value] = condition;
+  const isNegation = checkIsNegation(operator);
+  const negationStr = isNegation ? '!' : '';
+
+  if (checkIsNull(operator)) {
+    return `${negationStr}${field}:""`;
+  }
+
+  if (!defined(value)) {
+    value = '';
+  }
+
+  if (checkIsWildcard(operator)) {
+    // Do we support both?
+    value = value.replace(/%/g, '*');
+  }
+
+  // TODO(billy): Handle number operators on server
+  return `${negationStr}${field}:${value}`;
+}
+
+export function getDiscoverConditionsToSearchString(conditions = []) {
+  return conditions
+    .map(getDiscoverConditionToSearchString)
+    .join(' ')
+    .trim();
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.jsx
new file mode 100644
index 0000000000..189df25c96
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.jsx
@@ -0,0 +1,22 @@
+import {pickBy} from 'lodash';
+import qs from 'query-string';
+
+import {getDiscoverConditionsToSearchString} from 'app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString';
+
+export function getEventsUrlPathFromDiscoverQuery({organization, selection, query}) {
+  const {
+    datetime,
+    environments, // eslint-disable-line no-unused-vars
+    ...restSelection
+  } = selection;
+
+  return `/organizations/${organization.slug}/events/?${qs.stringify(
+    pickBy({
+      ...restSelection,
+      start: datetime.start,
+      end: datetime.end,
+      statsPeriod: datetime.period,
+      query: getDiscoverConditionsToSearchString(query.conditions),
+    })
+  )}`;
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 6aff9df54b..6ce02de55c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -92,19 +92,28 @@ export const NON_SNUBA_FIELDS = ['project.name'];
 
 export const NON_CONDITIONS_FIELDS = [...NON_SNUBA_FIELDS, 'project.id'];
 
-export const CONDITION_OPERATORS = [
-  '>',
-  '<',
-  '>=',
-  '<=',
-  '=',
-  '!=',
-  // 'IN', commented out since condition input doesn't support arrays yet :(
-  'IS NULL',
-  'IS NOT NULL',
-  'LIKE',
-  'NOT LIKE',
+export const OPERATOR = {
+  GREATER_THAN: '>',
+  LESS_THAN: '<',
+  GREATER_THAN_OR_EQUAL: '>=',
+  LESS_THAN_OR_EQUAL: '<=',
+  EQUAL: '=',
+  NOT_EQUAL: '!=',
+  IS_NULL: 'IS NULL',
+  IS_NOT_NULL: 'IS NOT NULL',
+  LIKE: 'LIKE',
+  NOT_LIKE: 'NOT LIKE',
+};
+
+export const CONDITION_OPERATORS = Object.values(OPERATOR);
+
+export const NEGATION_OPERATORS = [
+  OPERATOR.IS_NOT_NULL,
+  OPERATOR.NOT_EQUAL,
+  OPERATOR.NOT_LIKE,
 ];
+export const NULL_OPERATORS = [OPERATOR.IS_NOT_NULL, OPERATOR.IS_NULL];
+export const WILDCARD_OPERATORS = [OPERATOR.LIKE, OPERATOR.NOT_LIKE];
 
 export const ARRAY_FIELD_PREFIXES = ['error', 'stack'];
 
diff --git a/tests/js/fixtures/widget.js b/tests/js/fixtures/widget.js
index 1beb158721..d252cd263b 100644
--- a/tests/js/fixtures/widget.js
+++ b/tests/js/fixtures/widget.js
@@ -1,6 +1,7 @@
 const DEFAULT_QUERIES = {
   discover: [
     {
+      name: 'Known Users',
       fields: [],
       conditions: [['user.email', 'IS NOT NULL', null]],
       aggregations: [['uniq', 'user.email', 'Known Users']],
@@ -11,6 +12,7 @@ const DEFAULT_QUERIES = {
       rollup: 86400,
     },
     {
+      name: 'Anonymous Users',
       fields: [],
       conditions: [['user.email', 'IS NULL', null]],
       aggregations: [['count()', null, 'Anonymous Users']],
diff --git a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
index 9f37f070b8..6cc51ac83c 100644
--- a/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
+++ b/tests/js/spec/views/organizationDashboard/dashboard.spec.jsx
@@ -107,6 +107,7 @@ describe('OrganizationDashboard', function() {
               {
                 discover: [
                   {
+                    name: 'Browsers',
                     fields: ['browser.name'],
                     conditions: [],
                     aggregations: [['count()', null, 'count']],
diff --git a/tests/js/spec/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.spec.jsx b/tests/js/spec/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.spec.jsx
new file mode 100644
index 0000000000..71501f3b9b
--- /dev/null
+++ b/tests/js/spec/views/organizationDashboard/utils/getDiscoverConditionsToSearchString.spec.jsx
@@ -0,0 +1,52 @@
+import {getDiscoverConditionsToSearchString} from 'app/views/organizationDashboard/utils/getDiscoverConditionsToSearchString';
+
+describe('getDiscoverConditionsToSearchString', function() {
+  it('handles empty conditions', function() {
+    expect(getDiscoverConditionsToSearchString([])).toBe('');
+  });
+
+  it('string equality', function() {
+    expect(
+      getDiscoverConditionsToSearchString([['user.email', '=', 'billy@sentry.io']])
+    ).toBe('user.email:billy@sentry.io');
+  });
+
+  it('string equality negation', function() {
+    expect(
+      getDiscoverConditionsToSearchString([['user.email', '!=', 'billy@sentry.io']])
+    ).toBe('!user.email:billy@sentry.io');
+  });
+
+  it('searches for strings with wildcards', function() {
+    expect(
+      getDiscoverConditionsToSearchString([['user.email', 'LIKE', '%@sentry.io']])
+    ).toBe('user.email:*@sentry.io');
+  });
+
+  it('negation searches for strings with wildcards', function() {
+    expect(
+      getDiscoverConditionsToSearchString([['user.email', 'NOT LIKE', '%@sentry.io']])
+    ).toBe('!user.email:*@sentry.io');
+  });
+
+  it('is null', function() {
+    expect(getDiscoverConditionsToSearchString([['user.email', 'IS NULL', null]])).toBe(
+      'user.email:""'
+    );
+  });
+
+  it('is not null', function() {
+    expect(
+      getDiscoverConditionsToSearchString([['user.email', 'IS NOT NULL', null]])
+    ).toBe('!user.email:""');
+  });
+
+  it('handles multiple conditions', function() {
+    expect(
+      getDiscoverConditionsToSearchString([
+        ['user.email', 'IS NOT NULL', null],
+        ['user.email', 'LIKE', '%@sentry%'],
+      ])
+    ).toBe('!user.email:"" user.email:*@sentry*');
+  });
+});
diff --git a/tests/js/spec/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.spec.jsx b/tests/js/spec/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.spec.jsx
new file mode 100644
index 0000000000..181300c61b
--- /dev/null
+++ b/tests/js/spec/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery.spec.jsx
@@ -0,0 +1,34 @@
+import {getEventsUrlPathFromDiscoverQuery} from 'app/views/organizationDashboard/utils/getEventsUrlPathFromDiscoverQuery';
+
+describe('getEventsUrlPathFromDiscoverQuery', function() {
+  const organization = TestStubs.Organization();
+  const query = {
+    name: 'Known Users',
+    fields: [],
+    conditions: [['user.email', 'IS NOT NULL', null]],
+    aggregations: [['uniq', 'user.email', 'Known Users']],
+    limit: 1000,
+
+    orderby: '-time',
+    groupby: ['time'],
+    rollup: 86400,
+  };
+
+  it('handles nulls in selection', function() {
+    expect(
+      getEventsUrlPathFromDiscoverQuery({
+        organization,
+        selection: {
+          datetime: {
+            start: null,
+            end: null,
+            period: '14d',
+          },
+        },
+        query,
+      })
+    ).toBe(
+      '/organizations/org-slug/events/?query=%21user.email%3A%22%22&statsPeriod=14d'
+    );
+  });
+});
