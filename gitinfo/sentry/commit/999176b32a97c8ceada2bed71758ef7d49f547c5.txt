commit 999176b32a97c8ceada2bed71758ef7d49f547c5
Author: mikellykels <kelly@sentry.io>
Date:   Fri Apr 27 13:49:09 2018 -0700

    fix(auditlog): Handle audit log entry for org restore (#8172)
    
    * fix(auditlog): Handle audit log entry for org restore
    
    Really fix the audit log entry for when an Organization is restored after being queued for deletion.
    
    * add test

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index fb0c2859e5..f43b7d94be 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -293,7 +293,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         if serializer.is_valid():
             organization, changed_data = serializer.save()
 
-            if was_pending_deletion and organization.status == OrganizationStatus.VISIBLE:
+            if was_pending_deletion:
                 self.create_audit_entry(
                     request=request,
                     organization=organization,
diff --git a/tests/sentry/utils/audit/tests.py b/tests/sentry/utils/audit/tests.py
index cb8274a45c..30440c7142 100644
--- a/tests/sentry/utils/audit/tests.py
+++ b/tests/sentry/utils/audit/tests.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.contrib.auth.models import AnonymousUser
 
-from sentry.models import ApiKey, AuditLogEntryEvent, DeletedOrganization, DeletedTeam, DeletedProject
+from sentry.models import ApiKey, AuditLogEntryEvent, DeletedOrganization, DeletedTeam, DeletedProject, Organization, OrganizationStatus
 from sentry.testutils import TestCase
 from sentry.utils.audit import create_audit_entry
 
@@ -71,6 +71,26 @@ class CreateAuditEntryTest(TestCase):
         self.assert_valid_deleted_log(deleted_org, self.org)
 
     def test_audit_entry_org_restore_log(self):
+        Organization.objects.filter(
+            id=self.organization.id,
+        ).update(status=OrganizationStatus.PENDING_DELETION)
+
+        org = Organization.objects.get(id=self.organization.id)
+
+        Organization.objects.filter(
+            id=self.organization.id,
+        ).update(status=OrganizationStatus.DELETION_IN_PROGRESS)
+
+        org2 = Organization.objects.get(id=self.organization.id)
+
+        Organization.objects.filter(
+            id=self.organization.id,
+        ).update(status=OrganizationStatus.VISIBLE)
+
+        org3 = Organization.objects.get(id=self.organization.id)
+
+        orgs = [org, org2, org3]
+
         entry = create_audit_entry(
             request=self.req,
             organization=self.org,
@@ -79,10 +99,27 @@ class CreateAuditEntryTest(TestCase):
             data=self.org.get_audit_log_data(),
         )
 
-        assert ('restored') in entry.get_note()
-        assert entry.actor == self.user
-        assert entry.target_object == self.org.id
-        assert entry.event == AuditLogEntryEvent.ORG_RESTORE
+        entry2 = create_audit_entry(
+            request=self.req,
+            organization=self.org,
+            target_object=self.org.id,
+            event=AuditLogEntryEvent.ORG_EDIT,
+            data=self.org.get_audit_log_data(),
+        )
+
+        for i in orgs:
+            if i.status == OrganizationStatus.PENDING_DELETION or i.status == OrganizationStatus.DELETION_IN_PROGRESS:
+                assert i.status != OrganizationStatus.VISIBLE
+                assert ('restored') in entry.get_note()
+                assert entry.actor == self.user
+                assert entry.target_object == self.org.id
+                assert entry.event == AuditLogEntryEvent.ORG_RESTORE
+            else:
+                assert i.status == OrganizationStatus.VISIBLE
+                assert ('edited') in entry2.get_note()
+                assert entry2.actor == self.user
+                assert entry2.target_object == self.org.id
+                assert entry2.event == AuditLogEntryEvent.ORG_EDIT
 
     def test_audit_entry_team_delete_log(self):
         entry = create_audit_entry(
