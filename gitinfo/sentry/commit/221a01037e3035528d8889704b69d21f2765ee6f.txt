commit 221a01037e3035528d8889704b69d21f2765ee6f
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Jan 30 16:29:51 2018 -0800

    feat(templatetags): Support `as` assignment in `absolute_uri`

diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index f127571ae5..e3ee8b3a3b 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -65,10 +65,58 @@ def multiply(x, y):
     return coerce(x) * coerce(y)
 
 
-@register.simple_tag
-def absolute_uri(path='', *args):
-    from sentry.utils.http import absolute_uri
-    return absolute_uri(path.format(*args))
+class AbsoluteUriNode(template.Node):
+    def __init__(self, args, target_var):
+        self.args = args
+        self.target_var = target_var
+
+    def render(self, context):
+        from sentry.utils.http import absolute_uri
+
+        # Attempt to resolve all arguments into actual variables.
+        # This converts a value such as `"foo"` into the string `foo`
+        # and will look up a value such as `foo` from the context as
+        # the variable `foo`. If the variable does not exist, silently
+        # resolve as an empty string, which matches the behavior
+        # `SimpleTagNode`
+        args = []
+        for arg in self.args:
+            try:
+                arg = template.Variable(arg).resolve(context)
+            except template.VariableDoesNotExist:
+                arg = ''
+            args.append(arg)
+
+        # No args is just fine
+        if not args:
+            rv = ''
+        # If there's only 1 argument, there's nothing to format
+        elif len(args) == 1:
+            rv = args[0]
+        else:
+            rv = args[0].format(*args[1:])
+
+        rv = absolute_uri(rv)
+
+        # We're doing an `as foo` and we want to assign the result
+        # to a variable instead of actually returning.
+        if self.target_var is not None:
+            context[self.target_var] = rv
+            rv = ''
+
+        return rv
+
+
+@register.tag
+def absolute_uri(parser, token):
+    bits = token.split_contents()[1:]
+    # Check if the last two bits are `as {var}`
+    if len(bits) >= 2 and bits[-2] == 'as':
+        target_var = bits[-1]
+        bits = bits[:-2]
+    else:
+        target_var = None
+    return AbsoluteUriNode(bits, target_var)
 
 
 @register.simple_tag
diff --git a/tests/sentry/templatetags/test_sentry_helpers.py b/tests/sentry/templatetags/test_sentry_helpers.py
index e4a6d7e2ed..5e02f00c73 100644
--- a/tests/sentry/templatetags/test_sentry_helpers.py
+++ b/tests/sentry/templatetags/test_sentry_helpers.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import pytest
 from django.template import Context, Template
 
 
@@ -10,3 +11,38 @@ def test_system_origin():
     """).render(Context()).strip()
 
     assert result == 'http://testserver'
+
+
+@pytest.mark.parametrize(
+    'input,output', (
+        # Empty tag
+        ("{% absolute_uri %}", 'http://testserver'),
+        # Basic, no variables
+        ("{% absolute_uri '/matt/' %}", 'http://testserver/matt/'),
+        # String substitution
+        ("{% absolute_uri '/{}/' 'matt' %}", 'http://testserver/matt/'),
+        # String substitution with variable
+        ("{% absolute_uri '/{}/' who %}", 'http://testserver/matt/'),
+        # String substitution with missing variable
+        ("{% absolute_uri '/foo/{}/' xxx %}", 'http://testserver/foo//'),
+        # String substitution with multple vars
+        ("{% absolute_uri '/{}/{}/' who desc %}", 'http://testserver/matt/awesome/'),
+        # Empty tag, as other var
+        ("{% absolute_uri as uri %}hello {{ uri }}!", 'hello http://testserver!'),
+        # Basic, as other var
+        ("{% absolute_uri '/matt/' as uri %}hello {{ uri }}!", 'hello http://testserver/matt/!'),
+        # String substitution, as other var
+        ("{% absolute_uri '/{}/' 'matt' as uri %}hello {{ uri }}!", 'hello http://testserver/matt/!'),
+        # String substitution with variable, as other var
+        ("{% absolute_uri '/{}/' who as uri %}hello {{ uri }}!", 'hello http://testserver/matt/!'),
+        # Mix it all up
+        ("{% absolute_uri '/{}/{}/{}/{}/' who 'xxx' nope desc as uri %}hello {{ uri }}!",
+         'hello http://testserver/matt/xxx//awesome/!')
+    )
+)
+def test_absolute_uri(input, output):
+    prefix = '{% load sentry_helpers %}'
+    result = Template(prefix + input).render(
+        Context({'who': 'matt', 'desc': 'awesome'})
+    ).strip()
+    assert result == output
