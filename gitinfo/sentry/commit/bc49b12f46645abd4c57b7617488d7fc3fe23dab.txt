commit bc49b12f46645abd4c57b7617488d7fc3fe23dab
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 17 18:39:20 2015 -0800

    Add organization-wide API keys
    
    - Add APIKey model
    - Add permission abstractions
    - Default all endpoints to no permissions

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 1e6badd6b3..035321f952 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -5,10 +5,31 @@ from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import BasicAuthentication
 from rest_framework.exceptions import AuthenticationFailed
 
-from sentry.models import ProjectKey
+from sentry.models import ApiKey, ProjectKey
 
 
-class KeyAuthentication(BasicAuthentication):
+class QuietBasicAuthentication(BasicAuthentication):
+    def authenticate_header(self, request):
+        return 'xBasic realm="%s"' % self.www_authenticate_realm
+
+
+class ApiKeyAuthentication(QuietBasicAuthentication):
+    def authenticate_credentials(self, userid, password):
+        if password:
+            raise AuthenticationFailed('A password should not be specified')
+
+        try:
+            key = ApiKey.objects.get_from_cache(key=userid)
+        except ApiKey.DoesNotExist:
+            raise AuthenticationFailed('Invalid api key')
+
+        if not key.is_active:
+            raise AuthenticationFailed('Key is disabled')
+
+        return (AnonymousUser(), key)
+
+
+class ProjectKeyAuthentication(QuietBasicAuthentication):
     def authenticate_credentials(self, userid, password):
         try:
             pk = ProjectKey.objects.get_from_cache(public_key=userid)
@@ -25,11 +46,3 @@ class KeyAuthentication(BasicAuthentication):
             raise AuthenticationFailed('Key does not allow API access')
 
         return (AnonymousUser(), pk)
-
-    def authenticate_header(self, request):
-        return 'xBasic realm="%s"' % self.www_authenticate_realm
-
-
-class QuietBasicAuthentication(BasicAuthentication):
-    def authenticate_header(self, request):
-        return 'xBasic realm="%s"' % self.www_authenticate_realm
diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index e5ba433ddf..91abc49951 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -14,8 +14,9 @@ from rest_framework.views import APIView
 from sentry.app import tsdb
 from sentry.utils.cursors import Cursor
 
-from .authentication import KeyAuthentication
+from .authentication import ApiKeyAuthentication, ProjectKeyAuthentication
 from .paginator import Paginator
+from .permissions import NoPermission
 
 
 ONE_MINUTE = 60
@@ -35,9 +36,14 @@ class DocSection(Enum):
 
 
 class Endpoint(APIView):
-    authentication_classes = (KeyAuthentication, SessionAuthentication)
+    authentication_classes = (
+        ApiKeyAuthentication,
+        ProjectKeyAuthentication,
+        SessionAuthentication
+    )
     renderer_classes = (JSONRenderer,)
     parser_classes = (JSONParser,)
+    permission_classes = (NoPermission,)
 
     def build_cursor_link(self, request, name, cursor):
         querystring = u'&'.join(
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index c1e42b75c0..c83a36ff27 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -2,10 +2,27 @@ from __future__ import absolute_import
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import ScopedPermission
 from sentry.models import Organization
 
 
+class OrganizationPermission(ScopedPermission):
+    scope_map = {
+        'GET': ['org:read'],
+        'POST': ['org:write'],
+        'PUT': ['org:write'],
+        'DELETE': ['org:delete'],
+    }
+
+    def has_object_permission(self, request, view, organization):
+        if request.auth:
+            return request.auth.organization_id == organization.organization_id
+        return organization.has_access(request.user, self.access_map[request.method])
+
+
 class OrganizationEndpoint(Endpoint):
+    permission_classes = (OrganizationPermission,)
+
     def convert_args(self, request, organization_slug, *args, **kwargs):
         try:
             organization = Organization.objects.get_from_cache(
@@ -14,5 +31,7 @@ class OrganizationEndpoint(Endpoint):
         except Organization.DoesNotExist:
             raise ResourceDoesNotExist
 
+        self.check_object_permissions(request, organization)
+
         kwargs['organization'] = organization
         return (args, kwargs)
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 4e2b6d1606..f44b03f743 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -2,10 +2,36 @@ from __future__ import absolute_import
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import ScopedPermission
 from sentry.models import Project
 
 
+class ProjectPermission(ScopedPermission):
+    scope_map = {
+        'GET': ['project:read'],
+        'POST': ['project:write'],
+        'PUT': ['project:write'],
+        'DELETE': ['project:delete'],
+    }
+
+    def has_object_permission(self, request, view, project):
+        if request.auth:
+            return request.auth.organization_id == project.organization_id
+        return project.has_access(request.user, self.access_map[request.method])
+
+
+class ProjectEventPermission(ProjectPermission):
+    scope_map = {
+        'GET': ['event:read'],
+        'POST': ['event:write'],
+        'PUT': ['event:write'],
+        'DELETE': ['event:delete'],
+    }
+
+
 class ProjectEndpoint(Endpoint):
+    permission_classes = (ProjectPermission,)
+
     def convert_args(self, request, project_id, *args, **kwargs):
         try:
             project = Project.objects.get_from_cache(
@@ -14,5 +40,7 @@ class ProjectEndpoint(Endpoint):
         except Project.DoesNotExist:
             raise ResourceDoesNotExist
 
+        self.check_object_permissions(request, project)
+
         kwargs['project'] = project
         return (args, kwargs)
diff --git a/src/sentry/api/bases/team.py b/src/sentry/api/bases/team.py
index aa0c091ac6..2e2f5cc6d8 100644
--- a/src/sentry/api/bases/team.py
+++ b/src/sentry/api/bases/team.py
@@ -2,10 +2,27 @@ from __future__ import absolute_import
 
 from sentry.api.base import Endpoint
 from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.permissions import ScopedPermission
 from sentry.models import Team
 
 
+class TeamPermission(ScopedPermission):
+    scope_map = {
+        'GET': ['team:read'],
+        'POST': ['team:write'],
+        'PUT': ['team:write'],
+        'DELETE': ['team:delete'],
+    }
+
+    def has_object_permission(self, request, view, team):
+        if request.auth:
+            return request.auth.organization_id == team.organization_id
+        return team.has_access(request.user, self.access_map[request.method])
+
+
 class TeamEndpoint(Endpoint):
+    permission_classes = (TeamPermission,)
+
     def convert_args(self, request, organization_slug, team_slug, *args, **kwargs):
         try:
             team = Team.objects.get(
@@ -15,5 +32,7 @@ class TeamEndpoint(Endpoint):
         except Team.DoesNotExist:
             raise ResourceDoesNotExist
 
+        self.check_object_permissions(request, team)
+
         kwargs['team'] = team
         return (args, kwargs)
diff --git a/src/sentry/api/endpoints/organization_member_details.py b/src/sentry/api/endpoints/organization_member_details.py
index abad30bc98..9ab911c90a 100644
--- a/src/sentry/api/endpoints/organization_member_details.py
+++ b/src/sentry/api/endpoints/organization_member_details.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from rest_framework.response import Response
 
 from sentry.api.bases.organization import OrganizationEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, OrganizationMember,
     OrganizationMemberType
@@ -26,8 +25,6 @@ class OrganizationMemberDetailsEndpoint(OrganizationEndpoint):
         return True
 
     def delete(self, request, organization, member_id):
-        assert_perm(organization, request.user, request.auth)
-
         if request.user.is_superuser:
             authorizing_access = OrganizationMemberType.OWNER
         else:
diff --git a/src/sentry/api/endpoints/organization_projects.py b/src/sentry/api/endpoints/organization_projects.py
index 69229fa643..196b76e502 100644
--- a/src/sentry/api/endpoints/organization_projects.py
+++ b/src/sentry/api/endpoints/organization_projects.py
@@ -4,7 +4,6 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import Project, Team
 
@@ -21,8 +20,6 @@ class OrganizationProjectsEndpoint(OrganizationEndpoint):
             {method} {path}
 
         """
-        assert_perm(organization, request.user, request.auth)
-
         team_list = Team.objects.get_for_user(
             organization=organization,
             user=request.user,
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 04b6e1b35c..b0883f7e5a 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -4,14 +4,16 @@ from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint, DocSection
+from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import assert_perm
 from sentry.models import Organization, Project, Team
 
 
 class OrganizationStatsEndpoint(BaseStatsEndpoint):
     doc_section = DocSection.ORGANIZATIONS
 
+    permission_classes = (OrganizationPermission,)
+
     def get(self, request, organization_slug):
         """
         Retrieve event counts for an organization
@@ -42,7 +44,7 @@ class OrganizationStatsEndpoint(BaseStatsEndpoint):
         except Organization.DoesNotExist:
             raise ResourceDoesNotExist
 
-        assert_perm(organization, request.user, request.auth)
+        self.check_object_permissions(request, organization)
 
         group = request.GET.get('group')
         if not group:
diff --git a/src/sentry/api/endpoints/organization_teams.py b/src/sentry/api/endpoints/organization_teams.py
index c791bba7db..3319d85878 100644
--- a/src/sentry/api/endpoints/organization_teams.py
+++ b/src/sentry/api/endpoints/organization_teams.py
@@ -5,11 +5,8 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.organization import OrganizationEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Team
-)
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
 from sentry.permissions import can_create_teams
 
 
@@ -30,8 +27,6 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
             {method} {path}
 
         """
-        assert_perm(organization, request.user, request.auth)
-
         if request.auth:
             teams = [request.auth.project.team]
             if teams[0].organization != organization:
@@ -55,8 +50,6 @@ class OrganizationTeamsEndpoint(OrganizationEndpoint):
             }}
 
         """
-        assert_perm(organization, request.user, request.auth, OrganizationMemberType.ADMIN)
-
         if not can_create_teams(request.user, organization):
             return Response(status=403)
 
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 4ba9fc16ba..9457dcc28e 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -6,9 +6,7 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.decorators import sudo_required
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, Project, ProjectStatus
 )
@@ -33,8 +31,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
-        assert_perm(project, request.user, request.auth)
-
         data = serialize(project, request.user)
         data['options'] = {
             'sentry:origins': '\n'.join(project.get_option('sentry:origins', None) or []),
@@ -61,8 +57,6 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             }}
 
         """
-        assert_perm(project, request.user, request.auth, access=MEMBER_ADMIN)
-
         serializer = ProjectSerializer(project, data=request.DATA, partial=True)
 
         if serializer.is_valid():
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 7606af2009..7a70211e0b 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -8,8 +8,7 @@ from rest_framework.response import Response
 
 from sentry.app import search
 from sentry.api.base import DocSection
-from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.permissions import assert_perm
+from sentry.api.bases.project import ProjectEndpoint, ProjectEventPermission
 from sentry.api.serializers import serialize
 from sentry.constants import (
     DEFAULT_SORT_OPTION, STATUS_CHOICES
@@ -37,6 +36,8 @@ class GroupSerializer(serializers.Serializer):
 class ProjectGroupIndexEndpoint(ProjectEndpoint):
     doc_section = DocSection.EVENTS
 
+    permission_classes = (ProjectEventPermission,)
+
     # bookmarks=0/1
     # status=<x>
     # <tag>=<value>
@@ -54,8 +55,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         Any standard Sentry structured search query can be passed via the
         ``query`` parameter.
         """
-        assert_perm(project, request.user, request.auth)
-
         query_kwargs = {
             'project': project,
         }
@@ -163,8 +162,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation.
         """
-        assert_perm(project, request.user, request.auth)
-
         group_ids = request.GET.getlist('id')
         if group_ids:
             group_list = Group.objects.filter(project=project, id__in=group_ids)
@@ -301,8 +298,6 @@ class ProjectGroupIndexEndpoint(ProjectEndpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation
         """
-        assert_perm(project, request.user, request.auth)
-
         group_ids = request.GET.getlist('id')
         if group_ids:
             group_list = Group.objects.filter(project=project, id__in=group_ids)
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 4ddb6a123f..65606e4224 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -2,7 +2,6 @@ from __future__ import absolute_import
 
 from sentry.api.base import DocSection
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import Release
 
@@ -19,8 +18,6 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
             {method} {path}
 
         """
-        assert_perm(project, request.user, request.auth)
-
         queryset = Release.objects.filter(
             project=project,
         ).order_by('-date_added')
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index ab2b8a5942..ea4a151320 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -4,14 +4,16 @@ from rest_framework.response import Response
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint, DocSection
+from sentry.api.bases.project import ProjectPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import assert_perm
 from sentry.models import Project
 
 
 class ProjectStatsEndpoint(BaseStatsEndpoint):
     doc_section = DocSection.PROJECTS
 
+    permission_classes = (ProjectPermission,)
+
     def get(self, request, project_id):
         """
         Retrieve event counts for a project
@@ -41,7 +43,7 @@ class ProjectStatsEndpoint(BaseStatsEndpoint):
         except Project.DoesNotExist:
             raise ResourceDoesNotExist
 
-        assert_perm(project, request.user, request.auth)
+        self.check_object_permissions(request, project)
 
         data = tsdb.get_range(
             model=tsdb.models.project,
diff --git a/src/sentry/api/endpoints/project_tagkey_details.py b/src/sentry/api/endpoints/project_tagkey_details.py
index 357bcf7a25..f6ab9cff0e 100644
--- a/src/sentry/api/endpoints/project_tagkey_details.py
+++ b/src/sentry/api/endpoints/project_tagkey_details.py
@@ -4,7 +4,6 @@ from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import assert_perm
 from sentry.models import (
     AuditLogEntry, AuditLogEntryEvent, TagKey, TagKeyStatus
 )
@@ -27,8 +26,6 @@ class ProjectTagKeyDetailsEndpoint(ProjectEndpoint):
         except TagKey.DoesNotExist:
             raise ResourceDoesNotExist
 
-        assert_perm(tagkey, request.user, request.auth)
-
         updated = TagKey.objects.filter(
             id=tagkey.id,
             status=TagKeyStatus.VISIBLE,
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 08887295be..f5fe5b98c1 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -6,11 +6,8 @@ from rest_framework.response import Response
 from sentry.api.base import DocSection
 from sentry.api.bases.team import TeamEndpoint
 from sentry.api.decorators import sudo_required
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.models import (
-    AuditLogEntry, AuditLogEntryEvent, OrganizationMemberType, Team, TeamStatus
-)
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team, TeamStatus
 from sentry.tasks.deletion import delete_team
 
 
@@ -38,8 +35,6 @@ class TeamDetailsEndpoint(TeamEndpoint):
             {method} {path}
 
         """
-        assert_perm(team, request.user, request.auth)
-
         return Response(serialize(team, request.user))
 
     @sudo_required
@@ -55,8 +50,6 @@ class TeamDetailsEndpoint(TeamEndpoint):
             }}
 
         """
-        assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
-
         serializer = TeamSerializer(team, data=request.DATA, partial=True)
         if serializer.is_valid():
             team = serializer.save()
@@ -87,8 +80,6 @@ class TeamDetailsEndpoint(TeamEndpoint):
         However once deletion has begun the state of a project changes and will
         be hidden from most public views.
         """
-        assert_perm(team, request.user, request.auth, access=OrganizationMemberType.ADMIN)
-
         updated = Team.objects.filter(
             id=team.id,
             status=TeamStatus.VISIBLE,
diff --git a/src/sentry/api/endpoints/team_groups_new.py b/src/sentry/api/endpoints/team_groups_new.py
index 52210c099a..36a346c168 100644
--- a/src/sentry/api/endpoints/team_groups_new.py
+++ b/src/sentry/api/endpoints/team_groups_new.py
@@ -5,7 +5,6 @@ from django.utils import timezone
 from rest_framework.response import Response
 
 from sentry.api.bases.team import TeamEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import Group, GroupStatus, Project
 
@@ -19,8 +18,6 @@ class TeamGroupsNewEndpoint(TeamEndpoint):
         cutoff date, and then sort those by score, returning the highest scoring
         groups first.
         """
-        assert_perm(team, request.user, request.auth)
-
         minutes = int(request.REQUEST.get('minutes', 15))
         limit = min(100, int(request.REQUEST.get('limit', 10)))
 
diff --git a/src/sentry/api/endpoints/team_groups_trending.py b/src/sentry/api/endpoints/team_groups_trending.py
index 079221d15a..128b1671c2 100644
--- a/src/sentry/api/endpoints/team_groups_trending.py
+++ b/src/sentry/api/endpoints/team_groups_trending.py
@@ -5,7 +5,6 @@ from django.utils import timezone
 from rest_framework.response import Response
 
 from sentry.api.bases.team import TeamEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
 from sentry.models import Group, GroupStatus, Project
 
@@ -19,8 +18,6 @@ class TeamGroupsTrendingEndpoint(TeamEndpoint):
         cutoff date, and then sort those by score, returning the highest scoring
         groups first.
         """
-        assert_perm(team, request.user, request.auth)
-
         minutes = int(request.REQUEST.get('minutes', 15))
         limit = min(100, int(request.REQUEST.get('limit', 10)))
 
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index fde8166c57..ab578f9393 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -5,9 +5,7 @@ from rest_framework.response import Response
 
 from sentry.api.base import DocSection
 from sentry.api.bases.team import TeamEndpoint
-from sentry.api.permissions import assert_perm
 from sentry.api.serializers import serialize
-from sentry.constants import MEMBER_ADMIN
 from sentry.models import Project
 from sentry.permissions import can_create_projects
 
@@ -30,8 +28,6 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
             {method} {path}
 
         """
-        assert_perm(team, request.user, request.auth)
-
         results = list(Project.objects.get_for_user(team=team, user=request.user))
 
         return Response(serialize(results, request.user))
@@ -48,8 +44,6 @@ class TeamProjectIndexEndpoint(TeamEndpoint):
             }}
 
         """
-        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
-
         if not can_create_projects(user=request.user, team=team):
             return Response(status=403)
 
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index f5093a2e9c..c83549a686 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -5,14 +5,16 @@ from six.moves import range
 
 from sentry.app import tsdb
 from sentry.api.base import BaseStatsEndpoint, DocSection
+from sentry.api.bases.team import TeamPermission
 from sentry.api.exceptions import ResourceDoesNotExist
-from sentry.api.permissions import assert_perm
 from sentry.models import Team, Project
 
 
 class TeamStatsEndpoint(BaseStatsEndpoint):
     doc_section = DocSection.TEAMS
 
+    permission_classes = (TeamPermission,)
+
     def get(self, request, organization_slug, team_slug):
         """
         Retrieve event counts for a team
@@ -43,7 +45,7 @@ class TeamStatsEndpoint(BaseStatsEndpoint):
         except Team.DoesNotExist:
             raise ResourceDoesNotExist
 
-        assert_perm(team, request.user, request.auth)
+        self.check_object_permissions(request, team)
 
         projects = Project.objects.get_for_user(
             team=team,
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index a8086d2095..99eb8387fc 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -1,12 +1,54 @@
 from __future__ import absolute_import
 
+from rest_framework import permissions
 from rest_framework.exceptions import PermissionDenied
 
 from sentry.models import (
-    Organization, OrganizationMember, OrganizationMemberType, Project, Team, User
+    Organization, OrganizationMember, OrganizationMemberType, Project,
+    ProjectKey, Team, User
 )
 
 
+class NoPermission(permissions.BasePermission):
+    def has_permission(self, request, view):
+        return False
+
+
+class ScopedPermission(permissions.BasePermission):
+    scope_map = {
+        'GET': (),
+        'POST': (),
+        'PUT': (),
+        'PATCH': (),
+        'DELETE': (),
+    }
+
+    # this is the general mapping of VERB => OrganizationMemberType, it however
+    # does not enforce organization-level (i.e. has_global-access) vs project
+    # level so that should be done per subclass
+    access_map = {
+        'GET': None,
+        'POST': OrganizationMemberType.ADMIN,
+        'PUT': OrganizationMemberType.ADMIN,
+        'DELETE': OrganizationMemberType.OWNER,
+    }
+
+    def has_permission(self, request, view):
+        # session-based auth has all scopes for a logged in user
+        if not request.auth:
+            return request.user.is_authenticated()
+
+        allowed_scopes = set(self.scope_map[request.method])
+        current_scopes = request.auth.scopes
+        return any(s in allowed_scopes for s in current_scopes)
+
+    def has_object_permission(self, request, view, obj):
+        return False
+
+    def is_project_key(self, request):
+        return isinstance(request.auth, ProjectKey)
+
+
 def has_perm(object, user, project_key, access=OrganizationMemberType.MEMBER):
     if not project_key and user.is_superuser:
         return True
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 330a0d2711..aa6e136df4 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -501,6 +501,9 @@ LOGGING = {
 
 REST_FRAMEWORK = {
     'TEST_REQUEST_DEFAULT_FORMAT': 'json',
+    'DEFAULT_PERMISSION_CLASSES': (
+        'sentry.api.permissions.NoPermission',
+    )
 }
 
 # django-recaptcha
diff --git a/src/sentry/migrations/0156_auto__add_apikey.py b/src/sentry/migrations/0156_auto__add_apikey.py
new file mode 100644
index 0000000000..33977fee25
--- /dev/null
+++ b/src/sentry/migrations/0156_auto__add_apikey.py
@@ -0,0 +1,389 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        # Adding model 'ApiKey'
+        db.create_table('sentry_apikey', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('organization', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(related_name='key_set', to=orm['sentry.Organization'])),
+            ('label', self.gf('django.db.models.fields.CharField')(default='Default', max_length=64, blank=True)),
+            ('key', self.gf('django.db.models.fields.CharField')(unique=True, max_length=32)),
+            ('scopes', self.gf('django.db.models.fields.BigIntegerField')(default=None)),
+            ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0, db_index=True)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['ApiKey'])
+
+
+    def backwards(self, orm):
+        # Deleting model 'ApiKey'
+        db.delete_table('sentry_apikey')
+
+
+    models = {
+        'sentry.accessgroup': {
+            'Meta': {'unique_together': "(('team', 'name'),)", 'object_name': 'AccessGroup'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.User']", 'symmetrical': 'False'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'symmetrical': 'False'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.activity': {
+            'Meta': {'object_name': 'Activity'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Event']", 'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
+        },
+        'sentry.alert': {
+            'Meta': {'object_name': 'Alert'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'related_groups': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'related_alerts'", 'symmetrical': 'False', 'through': "orm['sentry.AlertRelatedGroup']", 'to': "orm['sentry.Group']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.alertrelatedgroup': {
+            'Meta': {'unique_together': "(('group', 'alert'),)", 'object_name': 'AlertRelatedGroup'},
+            'alert': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Alert']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
+        },
+        'sentry.apikey': {
+            'Meta': {'object_name': 'ApiKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
+        },
+        'sentry.auditlogentry': {
+            'Meta': {'object_name': 'AuditLogEntry'},
+            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'audit_actors'", 'to': "orm['sentry.User']"}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.broadcast': {
+            'Meta': {'object_name': 'Broadcast'},
+            'badge': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
+            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'})
+        },
+        'sentry.event': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group', 'datetime'),)"},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'event_set'", 'null': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
+        },
+        'sentry.eventmapping': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'EventMapping'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.file': {
+            'Meta': {'unique_together': "(('name', 'checksum'),)", 'object_name': 'File'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
+            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
+            'storage': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
+            'storage_options': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.group': {
+            'Meta': {'unique_together': "(('project', 'checksum'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'"},
+            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
+        },
+        'sentry.groupassignee': {
+            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.groupbookmark': {
+            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
+        },
+        'sentry.grouphash': {
+            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'})
+        },
+        'sentry.groupmeta': {
+            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
+        },
+        'sentry.groupseen': {
+            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
+        },
+        'sentry.grouptagkey': {
+            'Meta': {'unique_together': "(('project', 'group', 'key'),)", 'object_name': 'GroupTagKey'},
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value', 'group'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'"},
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'to': "orm['sentry.Group']"}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'grouptag'", 'null': 'True', 'to': "orm['sentry.Project']"}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.helppage': {
+            'Meta': {'object_name': 'HelpPage'},
+            'content': ('django.db.models.fields.TextField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_visible': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True'}),
+            'priority': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'title': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {'object_name': 'LostPasswordHash'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
+        },
+        'sentry.option': {
+            'Meta': {'object_name': 'Option'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
+            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {'object_name': 'Organization'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.organizationmember': {
+            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
+            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.pendingteammember': {
+            'Meta': {'unique_together': "(('team', 'email'),)", 'object_name': 'PendingTeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'pending_member_set'", 'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'})
+        },
+        'sentry.project': {
+            'Meta': {'unique_together': "(('team', 'slug'), ('organization', 'slug'))", 'object_name': 'Project'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'platform': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
+        },
+        'sentry.projectkey': {
+            'Meta': {'object_name': 'ProjectKey'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
+            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
+            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
+            'user_added': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'keys_added_set'", 'null': 'True', 'to': "orm['sentry.User']"})
+        },
+        'sentry.projectoption': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        },
+        'sentry.release': {
+            'Meta': {'unique_together': "(('project', 'version'),)", 'object_name': 'Release'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'version': ('django.db.models.fields.CharField', [], {'max_length': '64'})
+        },
+        'sentry.rule': {
+            'Meta': {'object_name': 'Rule'},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
+        'sentry.tagkey': {
+            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.tagvalue': {
+            'Meta': {'unique_together': "(('project', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'"},
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
+            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
+        },
+        'sentry.team': {
+            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
+            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
+        },
+        'sentry.teammember': {
+            'Meta': {'unique_together': "(('team', 'user'),)", 'object_name': 'TeamMember'},
+            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"}),
+            'type': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '50'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
+        },
+        'sentry.user': {
+            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
+            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
+            'first_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
+            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'last_name': ('django.db.models.fields.CharField', [], {'max_length': '30', 'blank': 'True'}),
+            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
+            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
+        },
+        'sentry.useroption': {
+            'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
+            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
+            'value': ('sentry.db.models.fields.pickle.UnicodePickledObjectField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/models/apikey.py b/src/sentry/models/apikey.py
new file mode 100644
index 0000000000..0c9c5d3e03
--- /dev/null
+++ b/src/sentry/models/apikey.py
@@ -0,0 +1,86 @@
+"""
+sentry.models.projectkey
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import, print_function
+
+import six
+
+from bitfield import BitField
+from django.db import models
+from django.utils import timezone
+from django.utils.translation import ugettext_lazy as _
+from uuid import uuid4
+
+from sentry.db.models import (
+    Model, BaseManager, BoundedPositiveIntegerField, FlexibleForeignKey,
+    sane_repr
+)
+
+
+# TODO(dcramer): pull in enum library
+class ApiKeyStatus(object):
+    ACTIVE = 0
+    INACTIVE = 1
+
+
+class ApiKey(Model):
+    organization = FlexibleForeignKey('sentry.Organization', related_name='key_set')
+    label = models.CharField(max_length=64, blank=True, default='Default')
+    key = models.CharField(max_length=32, unique=True)
+    scopes = BitField(flags=(
+        ('project:read', 'project:read'),
+        ('project:write', 'project:write'),
+        ('project:delete', 'project:delete'),
+        ('team:read', 'team:read'),
+        ('team:write', 'team:write'),
+        ('team:delete', 'team:delete'),
+        ('event:read', 'event:read'),
+        ('event:write', 'event:write'),
+        ('event:delete', 'event:delete'),
+        ('org:read', 'org:read'),
+        ('org:write', 'org:write'),
+        ('org:delete', 'org:delete'),
+    ))
+    status = BoundedPositiveIntegerField(default=0, choices=(
+        (ApiKeyStatus.ACTIVE, _('Active')),
+        (ApiKeyStatus.INACTIVE, _('Inactive')),
+    ), db_index=True)
+    date_added = models.DateTimeField(default=timezone.now)
+
+    objects = BaseManager(cache_fields=(
+        'key',
+    ))
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_apikey'
+
+    __repr__ = sane_repr('organization_id', 'key')
+
+    def __unicode__(self):
+        return six.text_type(self.key)
+
+    @classmethod
+    def generate_api_key(cls):
+        return uuid4().hex
+
+    @property
+    def is_active(self):
+        return self.status == ApiKeyStatus.ACTIVE
+
+    def save(self, *args, **kwargs):
+        if not self.key:
+            self.key = ApiKey.generate_api_key()
+        super(ApiKey, self).save(*args, **kwargs)
+
+    def get_audit_log_data(self):
+        return {
+            'label': self.label,
+            'key': self.key,
+            'roles': int(self.roles),
+            'status': self.status,
+        }
diff --git a/src/sentry/models/organization.py b/src/sentry/models/organization.py
index 141956ad80..95e5efe208 100644
--- a/src/sentry/models/organization.py
+++ b/src/sentry/models/organization.py
@@ -103,6 +103,13 @@ class Organization(Model):
             slugify_instance(self, self.name, reserved=RESERVED_ORGANIZATION_SLUGS)
         super(Organization, self).save(*args, **kwargs)
 
+    def has_access(self, user, access=None):
+        queryset = self.member_set.filter(user=user)
+        if access is not None:
+            queryset = queryset.filter(type__lte=access)
+
+        return queryset.exists()
+
     def get_audit_log_data(self):
         return {
             'slug': self.slug,
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index 59dbe4011b..1d47401f2f 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -57,6 +57,16 @@ class ProjectKey(Model):
         'secret_key',
     ))
 
+    # support legacy project keys in API
+    scopes = (
+        'project:read',
+        'project:write',
+        'project:delete',
+        'event:read',
+        'event:write',
+        'event:delete',
+    )
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_projectkey'
