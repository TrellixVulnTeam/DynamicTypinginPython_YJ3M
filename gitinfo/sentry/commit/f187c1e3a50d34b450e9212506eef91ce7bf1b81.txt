commit f187c1e3a50d34b450e9212506eef91ce7bf1b81
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 11 12:54:25 2012 -0500

    Enforce countdown of 5 seconds on buffers for queued tasks

diff --git a/sentry/buffer/base.py b/sentry/buffer/base.py
index ee11f1bffc..fae9d6d2bb 100644
--- a/sentry/buffer/base.py
+++ b/sentry/buffer/base.py
@@ -7,7 +7,7 @@ sentry.buffer.base
 """
 
 from django.db.models import F
-from sentry.utils.queue import maybe_delay
+from sentry.utils.queue import maybe_async
 from sentry.tasks.process_buffer import process_incr
 
 
@@ -31,7 +31,12 @@ class Buffer(object):
         """
         >>> incr(Group, columns={'times_seen': 1}, filters={'pk': group.pk})
         """
-        maybe_delay(process_incr, model=model, columns=columns, filters=filters, extra=extra)
+        maybe_async(process_incr, kwargs={
+            'model': model,
+            'columns': columns,
+            'filters': filters,
+            'extra': extra,
+        }, countdown=5)
 
     def process(self, model, columns, filters, extra=None):
         update_kwargs = dict((c, F(c) + v) for c, v in columns.iteritems())
diff --git a/sentry/utils/queue.py b/sentry/utils/queue.py
index af784e22e2..c0df6c62ca 100644
--- a/sentry/utils/queue.py
+++ b/sentry/utils/queue.py
@@ -13,3 +13,13 @@ def maybe_delay(func, *args, **kwargs):
     if settings.USE_QUEUE:
         return func.delay(*args, **kwargs)
     return func(*args, **kwargs)
+
+
+def maybe_async(func, args=None, kwargs=None, *fargs, **fkwargs):
+    if args is None:
+        args = []
+    if kwargs is None:
+        kwargs = {}
+    if settings.USE_QUEUE:
+        return func.apply_async(args=args, kwargs=kwargs, *fargs, **fkwargs)
+    return func(*args, **kwargs)
diff --git a/tests/sentry/buffer/base/tests.py b/tests/sentry/buffer/base/tests.py
index 2598fde57c..28588d9cd4 100644
--- a/tests/sentry/buffer/base/tests.py
+++ b/tests/sentry/buffer/base/tests.py
@@ -15,13 +15,14 @@ class BufferTest(TestCase):
     def setUp(self):
         self.buf = Buffer()
 
-    @mock.patch('sentry.buffer.base.maybe_delay')
-    def test_incr_delays_task(self, maybe_delay):
+    @mock.patch('sentry.buffer.base.maybe_async')
+    def test_incr_delays_task(self, maybe_async):
         model = mock.Mock()
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
-        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters, extra=None)
+        kwargs = dict(model=model, columns=columns, filters=filters, extra=None)
+        maybe_async.assert_called_once_with(process_incr, kwargs=kwargs, countdown=5)
 
     def test_process_saves_data(self):
         group = Group.objects.create(project=Project(id=1))
diff --git a/tests/sentry/buffer/redis/tests.py b/tests/sentry/buffer/redis/tests.py
index 301149f563..11adb84408 100644
--- a/tests/sentry/buffer/redis/tests.py
+++ b/tests/sentry/buffer/redis/tests.py
@@ -38,17 +38,18 @@ class RedisBufferTest(TestCase):
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_delay')
-    def test_incr_delays_task(self, maybe_delay):
+    @mock.patch('sentry.buffer.base.maybe_async')
+    def test_incr_delays_task(self, maybe_async):
         model = mock.Mock()
         columns = {'times_seen': 1}
         filters = {'pk': 1}
         self.buf.incr(model, columns, filters)
-        maybe_delay.assert_called_once_with(process_incr, model=model, columns=columns, filters=filters, extra=None)
+        kwargs = dict(model=model, columns=columns, filters=filters, extra=None)
+        maybe_async.assert_called_once_with(process_incr, kwargs=kwargs, countdown=5)
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_delay', mock.Mock())
+    @mock.patch('sentry.buffer.base.maybe_async', mock.Mock())
     def test_incr_does_buffer_to_conn(self):
         model = mock.Mock()
         columns = {'times_seen': 1}
@@ -90,7 +91,7 @@ class RedisBufferTest(TestCase):
 
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_extra_key', mock.Mock(return_value='extra'))
     @mock.patch('sentry.buffer.redis.RedisBuffer._make_key', mock.Mock(return_value='foo'))
-    @mock.patch('sentry.buffer.base.maybe_delay', mock.Mock())
+    @mock.patch('sentry.buffer.base.maybe_async', mock.Mock())
     def test_incr_does_buffer_extra_to_conn(self):
         model = mock.Mock()
         columns = {'times_seen': 1}
