commit 6a504d6666b2aaa1a728529c3d24233630f71b26
Author: Mark Story <mark@sentry.io>
Date:   Wed Dec 11 11:17:55 2019 -0800

    fix(discover) Add reference_event to discover.query (#16049)
    
    I forgot that this was necessary to do jump clicks on the event details
    graph view. I've also added some error cases that are currently present
    in the results endpoint but should be part of making a query.

diff --git a/src/sentry/snuba/discover.py b/src/sentry/snuba/discover.py
index 912a32295b..248846ad2d 100644
--- a/src/sentry/snuba/discover.py
+++ b/src/sentry/snuba/discover.py
@@ -245,6 +245,7 @@ def query(
     orderby=None,
     offset=None,
     limit=50,
+    reference_event=None,
     referrer=None,
     auto_fields=False,
 ):
@@ -264,6 +265,8 @@ def query(
     orderby (None|str|Sequence[str]) The field to order results by.
     offset (None|int) The record offset to read.
     limit (int) The number of records to fetch.
+    reference_event (ReferenceEvent) A reference event object. Used to generate additional
+                    conditions based on the provided reference.
     referrer (str|None) A referrer string to help locate the origin of this query.
     auto_fields (bool) Set to true to have project + eventid fields automatically added.
     """
@@ -279,8 +282,15 @@ def query(
         "filter_keys": snuba_filter.filter_keys,
         "orderby": orderby,
     }
+    if not selected_columns:
+        raise InvalidSearchQuery("No fields provided")
     snuba_args.update(resolve_field_list(selected_columns, snuba_args, auto_fields=auto_fields))
 
+    if reference_event:
+        ref_conditions = create_reference_event_conditions(reference_event)
+        if ref_conditions:
+            snuba_args["conditions"].extend(ref_conditions)
+
     # Resolve the public aliases into the discover dataset names.
     snuba_args, translated_columns = resolve_discover_aliases(snuba_args)
 
diff --git a/tests/sentry/snuba/test_discover.py b/tests/sentry/snuba/test_discover.py
index 1d4f84f2d0..76dec0f50b 100644
--- a/tests/sentry/snuba/test_discover.py
+++ b/tests/sentry/snuba/test_discover.py
@@ -144,6 +144,36 @@ class QueryIntegrationTest(SnubaTestCase, TestCase):
         assert data[0]["id"] == self.event.event_id
         assert data[0]["message"] == self.event.message
 
+    def test_reference_event(self):
+        self.store_event(
+            data={
+                "event_id": "a" * 32,
+                "message": "oh no",
+                "timestamp": iso_format(before_now(minutes=2)),
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": "b" * 32,
+                "message": "no match",
+                "timestamp": iso_format(before_now(minutes=2)),
+            },
+            project_id=self.project.id,
+        )
+        ref = discover.ReferenceEvent(
+            self.organization, "{}:{}".format(self.project.slug, "a" * 32), ["message", "count()"]
+        )
+        result = discover.query(
+            selected_columns=["id", "message"],
+            query="",
+            reference_event=ref,
+            params={"project_id": [self.project.id]},
+        )
+        assert len(result["data"]) == 2
+        for row in result["data"]:
+            assert row["message"] == "oh no"
+
 
 class QueryTransformTest(TestCase):
     """
@@ -164,6 +194,21 @@ class QueryTransformTest(TestCase):
             )
         assert mock_query.call_count == 0
 
+    @patch("sentry.snuba.discover.raw_query")
+    def test_query_no_fields(self, mock_query):
+        mock_query.return_value = {
+            "meta": [{"name": "transaction"}, {"name": "duration"}],
+            "data": [{"transaction": "api.do_things", "duration": 200}],
+        }
+        with pytest.raises(InvalidSearchQuery) as err:
+            discover.query(
+                selected_columns=[],
+                query="event.type:transaction",
+                params={"project_id": [self.project.id]},
+            )
+        assert "No fields" in six.text_type(err)
+        assert mock_query.call_count == 0
+
     @patch("sentry.snuba.discover.raw_query")
     def test_selected_columns_field_alias_macro(self, mock_query):
         mock_query.return_value = {
