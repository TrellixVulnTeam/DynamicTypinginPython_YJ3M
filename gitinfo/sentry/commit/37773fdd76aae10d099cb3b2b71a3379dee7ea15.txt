commit 37773fdd76aae10d099cb3b2b71a3379dee7ea15
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 8 21:18:40 2016 -0700

    Enforce that message value is a string
    
    @getsentry/infrastructure

diff --git a/src/sentry/interfaces/message.py b/src/sentry/interfaces/message.py
index e6f2fea47f..c1179e4252 100644
--- a/src/sentry/interfaces/message.py
+++ b/src/sentry/interfaces/message.py
@@ -13,6 +13,7 @@ __all__ = ('Message',)
 from django.conf import settings
 
 from sentry.interfaces.base import Interface, InterfaceValidationError
+from sentry.utils import json
 from sentry.utils.safe import trim
 
 
@@ -41,6 +42,11 @@ class Message(Interface):
         if not data.get('message'):
             raise InterfaceValidationError("No 'message' present")
 
+        # TODO(dcramer): some day we should stop people from sending arbitrary
+        # crap to the server
+        if not isinstance(data['message'], basestring):
+            data['message'] = json.dumps(data['message'])
+
         kwargs = {
             'message': trim(data['message'], settings.SENTRY_MAX_MESSAGE_LENGTH),
             'formatted': None,
@@ -51,7 +57,11 @@ class Message(Interface):
         else:
             kwargs['params'] = ()
 
-        if '%' in kwargs['message'] and kwargs['params']:
+        if kwargs['formatted']:
+            if not isinstance(kwargs['formatted'], basestring):
+                data['formatted'] = json.dumps(data['formatted'])
+
+        elif '%' in kwargs['message'] and kwargs['params']:
             if isinstance(kwargs['params'], list):
                 kwargs['params'] = tuple(kwargs['params'])
 
diff --git a/tests/sentry/interfaces/test_message.py b/tests/sentry/interfaces/test_message.py
index 91555a20bd..81b6514d00 100644
--- a/tests/sentry/interfaces/test_message.py
+++ b/tests/sentry/interfaces/test_message.py
@@ -29,3 +29,9 @@ class MessageTest(TestCase):
     def test_serialize_unserialize_behavior(self):
         result = type(self.interface).to_python(self.interface.to_json())
         assert result.to_json() == self.interface.to_json()
+
+    def test_serialize_non_string_for_message(self):
+        result = type(self.interface).to_python({
+            'message': {'foo': 'bar'},
+        })
+        assert result.message == '{"foo":"bar"}'
