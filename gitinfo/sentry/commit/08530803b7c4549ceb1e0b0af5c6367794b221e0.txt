commit 08530803b7c4549ceb1e0b0af5c6367794b221e0
Author: Ben Vinegar <ben@benv.ca>
Date:   Sun Aug 30 16:14:51 2015 -0700

    Re-enable no-multi-comp, break out more components into separate files

diff --git a/.eslintrc b/.eslintrc
index 235d3c7a80..1b4cfc24e4 100644
--- a/.eslintrc
+++ b/.eslintrc
@@ -115,7 +115,7 @@
      */
     "react/display-name": 0,         // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/display-name.md
     "react/jsx-quotes": [2, "double"], // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-quotes.md
-    "react/no-multi-comp": 0,        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
+    "react/no-multi-comp": 2,        // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/no-multi-comp.md
     "react/jsx-no-undef": 2,         // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-undef.md
     "react/jsx-no-duplicate-props": 2, // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-no-duplicate-props.md
     "react/jsx-uses-react": 2,       // https://github.com/yannickcr/eslint-plugin-react/blob/master/docs/rules/jsx-uses-react.md
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index c449abc0e4..a59aeb3773 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -2,72 +2,8 @@ import React from "react";
 import ConfigStore from "../../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../../proptypes";
-import rawStacktraceContent from "./rawStacktraceContent";
-import StacktraceContent from "./stacktraceContent";
-import {defined} from "../../../utils";
-
-var ExceptionContent = React.createClass({
-  propTypes: {
-    view: React.PropTypes.string.isRequired,
-    platform: React.PropTypes.string,
-    newestFirst: React.PropTypes.bool
-  },
-
-  render() {
-    var stackView = this.props.view;
-    var children = this.props.values.map((exc, excIdx) => {
-      return (
-        <div key={excIdx}>
-          <h4>
-            <span>{exc.type}</span>
-          </h4>
-          {exc.value &&
-            <pre className="exc-message">{exc.value}</pre>
-          }
-          {defined(exc.stacktrace) &&
-            <StacktraceContent
-                data={exc.stacktrace}
-                includeSystemFrames={stackView === "full"}
-                platform={this.props.platform}
-                newestFirst={this.props.newestFirst} />
-          }
-        </div>
-      );
-    });
-    if (this.props.newestFirst) {
-      children.reverse();
-    }
-
-    // TODO(dcramer): implement exceptions omitted
-    return (
-      <div>
-        {children}
-      </div>
-    );
-  }
-});
-
-var RawExceptionContent = React.createClass({
-  propTypes: {
-    platform: React.PropTypes.string
-  },
-
-  render() {
-    var children = this.props.values.map((exc, excIdx) => {
-      return (
-        <pre key={excIdx} className="traceback plain">
-          {rawStacktraceContent(exc.stacktrace, this.props.platform, exc)}
-        </pre>
-      );
-    });
-
-    return (
-      <div>
-        {children}
-      </div>
-    );
-  }
-});
+import ExceptionContent from "./exceptionContent";
+import RawExceptionContent from "./rawExceptionContent";
 
 var ExceptionInterface = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
new file mode 100644
index 0000000000..91bd3dae5d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -0,0 +1,47 @@
+import React from "react";
+import {defined} from "../../../utils";
+
+import StacktraceContent from "./stacktraceContent";
+
+var ExceptionContent = React.createClass({
+  propTypes: {
+    view: React.PropTypes.string.isRequired,
+    platform: React.PropTypes.string,
+    newestFirst: React.PropTypes.bool
+  },
+
+  render() {
+    var stackView = this.props.view;
+    var children = this.props.values.map((exc, excIdx) => {
+      return (
+        <div key={excIdx}>
+          <h4>
+            <span>{exc.type}</span>
+          </h4>
+          {exc.value &&
+            <pre className="exc-message">{exc.value}</pre>
+          }
+          {defined(exc.stacktrace) &&
+            <StacktraceContent
+                data={exc.stacktrace}
+                includeSystemFrames={stackView === "full"}
+                platform={this.props.platform}
+                newestFirst={this.props.newestFirst} />
+          }
+        </div>
+      );
+    });
+    if (this.props.newestFirst) {
+      children.reverse();
+    }
+
+    // TODO(dcramer): implement exceptions omitted
+    return (
+      <div>
+        {children}
+      </div>
+    );
+  }
+});
+
+export default ExceptionContent;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index c4cf8b4adf..a41349c9b3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,38 +1,8 @@
 import React from "react";
 import classNames from "classnames";
 import {defined, objectIsEmpty} from "../../../utils";
-import ContextData from "../../contextData";
 
-var FrameVariables = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired
-  },
-
-  // make sure that clicking on the variables does not actually do
-  // anything on the containing element.
-  preventToggling(event) {
-    event.stopPropagation();
-  },
-
-  render() {
-    var children = [];
-    var data = this.props.data;
-
-    for (var key in data) {
-      var value = data[key];
-      children.push(<dt key={'dt-' + key}>{key}</dt>);
-      children.push((
-        <dd key={'dd-' + key}>
-          <ContextData data={value} />
-        </dd>
-      ));
-    }
-
-    return (
-      <dl className="vars expandable" onClick={this.preventToggling}>{children}</dl>
-    );
-  }
-});
+import FrameVariables from "./frameVariables";
 
 var Frame = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
new file mode 100644
index 0000000000..ae1001fd88
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
@@ -0,0 +1,36 @@
+import React from "react";
+
+import ContextData from "../../contextData";
+
+var FrameVariables = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired
+  },
+
+  // make sure that clicking on the variables does not actually do
+  // anything on the containing element.
+  preventToggling(event) {
+    event.stopPropagation();
+  },
+
+  render() {
+    var children = [];
+    var data = this.props.data;
+
+    for (var key in data) {
+      var value = data[key];
+      children.push(<dt key={'dt-' + key}>{key}</dt>);
+      children.push((
+        <dd key={'dd-' + key}>
+          <ContextData data={value} />
+        </dd>
+      ));
+    }
+
+    return (
+      <dl className="vars expandable" onClick={this.preventToggling}>{children}</dl>
+    );
+  }
+});
+
+export default FrameVariables;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
new file mode 100644
index 0000000000..b6549cecd7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -0,0 +1,26 @@
+import React from "react";
+import rawStacktraceContent from "./rawStacktraceContent";
+
+var RawExceptionContent = React.createClass({
+  propTypes: {
+    platform: React.PropTypes.string
+  },
+
+  render() {
+    var children = this.props.values.map((exc, excIdx) => {
+      return (
+        <pre key={excIdx} className="traceback plain">
+          {rawStacktraceContent(exc.stacktrace, this.props.platform, exc)}
+        </pre>
+      );
+    });
+
+    return (
+      <div>
+        {children}
+      </div>
+    );
+  }
+});
+
+export default RawExceptionContent;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index bbc44e2a75..bced0f1a12 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -1,27 +1,10 @@
 import React from "react";
-import ConfigStore from "../../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../../proptypes";
 import RichHttpContent from "./richHttpContent";
 import {getCurlCommand} from "./utils";
 
-var RequestActions = React.createClass({
-  render(){
-    var org = this.props.organization;
-    var project = this.props.project;
-    var group = this.props.group;
-    var evt = this.props.event;
-    var urlPrefix = (
-      ConfigStore.get('urlPrefix') + '/' + org.slug + '/' +
-      project.slug + '/group/' + group.id
-    );
-
-    return (
-      <a href={urlPrefix + '/events/' + evt.id + '/replay/'}
-         className="btn btn-sm btn-default">Replay Request</a>
-    );
-  }
-});
+import RequestActions from "./requestActions";
 
 var RequestInterface = React.createClass({
   propTypes: {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx b/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
new file mode 100644
index 0000000000..2fe355f678
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/requestActions.jsx
@@ -0,0 +1,22 @@
+import React from "react";
+import ConfigStore from "../../../stores/configStore";
+
+var RequestActions = React.createClass({
+  render(){
+    var org = this.props.organization;
+    var project = this.props.project;
+    var group = this.props.group;
+    var evt = this.props.event;
+    var urlPrefix = (
+      ConfigStore.get('urlPrefix') + '/' + org.slug + '/' +
+      project.slug + '/group/' + group.id
+    );
+
+    return (
+      <a href={urlPrefix + '/events/' + evt.id + '/replay/'}
+         className="btn btn-sm btn-default">Replay Request</a>
+    );
+  }
+});
+
+export default RequestActions;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/groupDetails/event.jsx b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
index 888fc3ab78..037164ce44 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/event.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/event.jsx
@@ -3,66 +3,11 @@ import DateTime from "../../components/dateTime";
 import FileSize from "../../components/fileSize";
 import GroupEventEntries from "../../components/events/eventEntries";
 import GroupState from "../../mixins/groupState";
-import Gravatar from "../../components/gravatar";
 import PropTypes from "../../proptypes";
 import TimeSince from "../../components/timeSince";
-import Version from "../../components/version";
 
-
-var UserWidget = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-  },
-
-  render() {
-    var user = this.props.data;
-
-    return (
-      <div className="user-widget">
-        <div className="pull-right"><Gravatar email={user.email} size={84} /></div>
-        <h6><span>User</span></h6>
-        <dl>
-          {user.id && [
-            <dt key="id-label">ID:</dt>,
-            <dd key="id">{user.id}</dd>
-          ]}
-          {user.email && [
-            <dt key="email-label">Email:</dt>,
-            <dd key="email">{user.email}</dd>
-          ]}
-          {user.username && [
-            <dt key="username-label">Username:</dt>,
-            <dd key="username">{user.username}</dd>
-          ]}
-          {user.ipAddress && [
-            <dt key="ipAddress-label">IP:</dt>,
-            <dd key="ipAddress">{user.ipAddress}</dd>
-          ]}
-        </dl>
-        <div className="btn-group hidden">
-          <a href="#" className="btn btn-xs btn-default">Message User</a>
-          <a href="#" className="btn btn-xs btn-default">Message All</a>
-        </div>
-      </div>
-    );
-  }
-});
-
-var ReleaseWidget = React.createClass({
-  render() {
-    var release = this.props.data;
-
-    return (
-      <div className="user-widget">
-        <h6><span>Release</span></h6>
-        <dl>
-          <dt key={4}>Version:</dt>
-          <dd key={5}><Version version={release.version} /></dd>
-        </dl>
-      </div>
-    );
-  }
-});
+import UserWidget from "./userWidget";
+import ReleaseWidget from "./releaseWidget";
 
 var GroupEvent = React.createClass({
   mixins: [GroupState],
diff --git a/src/sentry/static/sentry/app/views/groupDetails/releaseWidget.jsx b/src/sentry/static/sentry/app/views/groupDetails/releaseWidget.jsx
new file mode 100644
index 0000000000..ed33577b1f
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/releaseWidget.jsx
@@ -0,0 +1,20 @@
+import React from "react";
+import Version from "../../components/version";
+
+var ReleaseWidget = React.createClass({
+  render() {
+    var release = this.props.data;
+
+    return (
+      <div className="user-widget">
+        <h6><span>Release</span></h6>
+        <dl>
+          <dt key={4}>Version:</dt>
+          <dd key={5}><Version version={release.version} /></dd>
+        </dl>
+      </div>
+    );
+  }
+});
+
+export default ReleaseWidget;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/groupDetails/userWidget.jsx b/src/sentry/static/sentry/app/views/groupDetails/userWidget.jsx
new file mode 100644
index 0000000000..1f77fd9504
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/groupDetails/userWidget.jsx
@@ -0,0 +1,43 @@
+import React from "react";
+import Gravatar from "../../components/gravatar";
+
+var UserWidget = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+  },
+
+  render() {
+    var user = this.props.data;
+
+    return (
+      <div className="user-widget">
+        <div className="pull-right"><Gravatar email={user.email} size={84} /></div>
+        <h6><span>User</span></h6>
+        <dl>
+          {user.id && [
+            <dt key="id-label">ID:</dt>,
+            <dd key="id">{user.id}</dd>
+          ]}
+          {user.email && [
+            <dt key="email-label">Email:</dt>,
+            <dd key="email">{user.email}</dd>
+          ]}
+          {user.username && [
+            <dt key="username-label">Username:</dt>,
+            <dd key="username">{user.username}</dd>
+          ]}
+          {user.ipAddress && [
+            <dt key="ipAddress-label">IP:</dt>,
+            <dd key="ipAddress">{user.ipAddress}</dd>
+          ]}
+        </dl>
+        <div className="btn-group hidden">
+          <a href="#" className="btn btn-xs btn-default">Message User</a>
+          <a href="#" className="btn btn-xs btn-default">Message All</a>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default UserWidget;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index b472e69894..c3d4245ec9 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -1,73 +1,10 @@
 import React from "react";
-import Router from "react-router";
 import api from "../../api";
-import Count from "../../components/count";
 import LoadingError from "../../components/loadingError";
 import LoadingIndicator from "../../components/loadingIndicator";
-import PropTypes from "../../proptypes";
 import RouteMixin from "../../mixins/routeMixin";
-import TimeSince from "../../components/timeSince";
-import ProjectState from "../../mixins/projectState";
 
-var EventNode = React.createClass({
-  mixins: [ProjectState],
-
-  propTypes: {
-    group: PropTypes.Group.isRequired
-  },
-
-  makeGroupLink(title) {
-    var group = this.props.group;
-    var org = this.getOrganization();
-
-    var params = {
-      orgId: org.slug,
-      projectId: group.project.slug,
-      groupId: group.id
-    };
-
-    return (
-      <Router.Link to="groupDetails" params={params}>
-        {title}
-      </Router.Link>
-    );
-  },
-
-  render() {
-    var group = this.props.group;
-
-    var userCount = (group.tags["sentry:user"] !== undefined ?
-      userCount = group.tags["sentry:user"].count :
-      0);
-
-    return (
-      <li className="group">
-        <div className="row">
-          <div className="col-xs-8 event-details">
-            <h3 className="truncate">{this.makeGroupLink(group.title)}</h3>
-            <div className="event-message">{group.culprit}</div>
-            <div className="event-extra">
-              <ul>
-                <li>
-                  <span className="icon icon-clock"></span>
-                  <TimeSince date={group.lastSeen} />
-                  &nbsp;&mdash;&nbsp;
-                  <TimeSince date={group.firstSeen} suffix="old" />
-                </li>
-              </ul>
-            </div>
-          </div>
-          <div className="col-xs-2 event-count align-right">
-            <Count value={group.count} />
-          </div>
-          <div className="col-xs-2 event-users align-right">
-            <Count value={userCount} />
-          </div>
-        </div>
-      </li>
-    );
-  }
-});
+import EventNode from "./eventNode";
 
 var EventList = React.createClass({
   mixins: [
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
new file mode 100644
index 0000000000..fced6ba902
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -0,0 +1,68 @@
+import React from "react";
+import Router from "react-router";
+import Count from "../../components/count";
+import PropTypes from "../../proptypes";
+import TimeSince from "../../components/timeSince";
+import ProjectState from "../../mixins/projectState";
+
+var EventNode = React.createClass({
+  mixins: [ProjectState],
+
+  propTypes: {
+    group: PropTypes.Group.isRequired
+  },
+
+  makeGroupLink(title) {
+    var group = this.props.group;
+    var org = this.getOrganization();
+
+    var params = {
+      orgId: org.slug,
+      projectId: group.project.slug,
+      groupId: group.id
+    };
+
+    return (
+      <Router.Link to="groupDetails" params={params}>
+        {title}
+      </Router.Link>
+    );
+  },
+
+  render() {
+    var group = this.props.group;
+
+    var userCount = (group.tags["sentry:user"] !== undefined ?
+      userCount = group.tags["sentry:user"].count :
+      0);
+
+    return (
+      <li className="group">
+        <div className="row">
+          <div className="col-xs-8 event-details">
+            <h3 className="truncate">{this.makeGroupLink(group.title)}</h3>
+            <div className="event-message">{group.culprit}</div>
+            <div className="event-extra">
+              <ul>
+                <li>
+                  <span className="icon icon-clock"></span>
+                  <TimeSince date={group.lastSeen} />
+                  &nbsp;&mdash;&nbsp;
+                  <TimeSince date={group.firstSeen} suffix="old" />
+                </li>
+              </ul>
+            </div>
+          </div>
+          <div className="col-xs-2 event-count align-right">
+            <Count value={group.count} />
+          </div>
+          <div className="col-xs-2 event-users align-right">
+            <Count value={userCount} />
+          </div>
+        </div>
+      </li>
+    );
+  }
+});
+
+export default EventNode;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/stream/customDateRange.jsx b/src/sentry/static/sentry/app/views/stream/customDateRange.jsx
new file mode 100644
index 0000000000..130069b802
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/stream/customDateRange.jsx
@@ -0,0 +1,92 @@
+var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
+import React from "react";
+import DateTimeInput from "../../components/dateTimeInput";
+import Modal from "react-bootstrap/Modal";
+import OverlayMixin from "react-bootstrap/OverlayMixin";
+
+var CustomDateRange = React.createClass({
+  mixins: [OverlayMixin, PureRenderMixin],
+
+  getInitialState() {
+    return {
+      isModalOpen: false,
+      dateFrom: this.props.dateFrom,
+      dateTo: this.props.dateTo,
+      dateType: 'last_seen'
+    };
+  },
+
+  onApply(e) {
+    this.onToggle(e);
+  },
+
+  onToggle(e) {
+    this.setState({
+      isModalOpen: !this.state.isModalOpen
+    });
+  },
+
+  onDateTypeChange(e) {
+
+  },
+
+  onDateFromChange(e) {
+
+  },
+
+  onDateToChange(e) {
+
+  },
+
+  render() {
+    return (
+      <a className={this.props.className} onClick={this.onToggle}>
+        Custom Range
+      </a>
+    );
+  },
+
+  renderOverlay() {
+    if (!this.state.isModalOpen) {
+      return null;
+    }
+    return (
+      <Modal title="Custom Date Range" animation={false} onRequestHide={this.onToggle} className="datepicker-modal">
+        <div className="modal-body">
+          <div className="datepicker-box">
+            <div className="row">
+              <div className="col-md-6">
+                <h6>Start (UTC)</h6>
+                <DateTimeInput dateTime={this.state.dateFrom} onChange={this.onDateFromChange} />
+              </div>
+              <div className="col-md-6">
+                <h6>End (UTC)</h6>
+                <DateTimeInput dateTime={this.state.dateTo} onChange={this.onDateToChange} />
+              </div>
+            </div>
+          </div>
+        </div>
+        <div className="modal-footer">
+          <div className="radio-inputs pull-left">
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "last_seen")}
+                    checked={this.state.dateType === "last_seen"} /> Last Seen
+                </label>
+                <label className="radio">
+                  <input type="radio" name="date_type"
+                    onChange={this.onDateTypeChange.bind(this, "first_seen")}
+                    checked={this.state.dateType === "first_seen"} /> First Seen
+                </label>
+              </div>
+          <button type="button" className="btn btn-default"
+                  onClick={this.onToggle}>Close</button>
+          <button type="button" className="btn btn-primary"
+                  onClick={this.onApply}>Apply</button>
+        </div>
+      </Modal>
+    );
+  }
+});
+
+export default CustomDateRange;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/stream/dateSelector.jsx b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
index 680dc2ee09..f5abcd6244 100644
--- a/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/dateSelector.jsx
@@ -1,95 +1,9 @@
 var PureRenderMixin = require('react/addons').addons.PureRenderMixin;
 import React from "react";
-import DateTimeInput from "../../components/dateTimeInput";
 import DropdownLink from "../../components/dropdownLink";
 import MenuItem from "../../components/menuItem";
-import Modal from "react-bootstrap/Modal";
-import OverlayMixin from "react-bootstrap/OverlayMixin";
 
-var CustomDateRange = React.createClass({
-  mixins: [OverlayMixin, PureRenderMixin],
-
-  getInitialState() {
-    return {
-      isModalOpen: false,
-      dateFrom: this.props.dateFrom,
-      dateTo: this.props.dateTo,
-      dateType: 'last_seen'
-    };
-  },
-
-  onApply(e) {
-    this.onToggle(e);
-  },
-
-  onToggle(e) {
-    this.setState({
-      isModalOpen: !this.state.isModalOpen
-    });
-  },
-
-  onDateTypeChange(e) {
-
-  },
-
-  onDateFromChange(e) {
-
-  },
-
-  onDateToChange(e) {
-
-  },
-
-  render() {
-    return (
-      <a className={this.props.className} onClick={this.onToggle}>
-        Custom Range
-      </a>
-    );
-  },
-
-  renderOverlay() {
-    if (!this.state.isModalOpen) {
-      return null;
-    }
-    return (
-      <Modal title="Custom Date Range" animation={false} onRequestHide={this.onToggle} className="datepicker-modal">
-        <div className="modal-body">
-          <div className="datepicker-box">
-            <div className="row">
-              <div className="col-md-6">
-                <h6>Start (UTC)</h6>
-                <DateTimeInput dateTime={this.state.dateFrom} onChange={this.onDateFromChange} />
-              </div>
-              <div className="col-md-6">
-                <h6>End (UTC)</h6>
-                <DateTimeInput dateTime={this.state.dateTo} onChange={this.onDateToChange} />
-              </div>
-            </div>
-          </div>
-        </div>
-        <div className="modal-footer">
-          <div className="radio-inputs pull-left">
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                    onChange={this.onDateTypeChange.bind(this, "last_seen")}
-                    checked={this.state.dateType === "last_seen"} /> Last Seen
-                </label>
-                <label className="radio">
-                  <input type="radio" name="date_type"
-                    onChange={this.onDateTypeChange.bind(this, "first_seen")}
-                    checked={this.state.dateType === "first_seen"} /> First Seen
-                </label>
-              </div>
-          <button type="button" className="btn btn-default"
-                  onClick={this.onToggle}>Close</button>
-          <button type="button" className="btn btn-primary"
-                  onClick={this.onApply}>Apply</button>
-        </div>
-      </Modal>
-    );
-  }
-});
+import CustomDateRange from "./customDateRange";
 
 var DateSelector = React.createClass({
   contextTypes: {
