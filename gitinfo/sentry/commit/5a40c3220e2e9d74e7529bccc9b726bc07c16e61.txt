commit 5a40c3220e2e9d74e7529bccc9b726bc07c16e61
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 6 17:21:24 2018 -0700

    Additional bitfield cleanup

diff --git a/src/sentry/api/serializers/models/auth_provider.py b/src/sentry/api/serializers/models/auth_provider.py
index 428e3aeda6..69bb730c13 100644
--- a/src/sentry/api/serializers/models/auth_provider.py
+++ b/src/sentry/api/serializers/models/auth_provider.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import six
 
 from django.core.urlresolvers import reverse
+from django.db.models import F
 
 from sentry.api.serializers import Serializer, register
 from sentry.models import AuthProvider, OrganizationMember
@@ -15,7 +16,7 @@ class AuthProviderSerializer(Serializer):
         organization = obj.organization
         pending_links_count = OrganizationMember.objects.filter(
             organization=organization,
-            flags=~getattr(OrganizationMember.flags, 'sso:linked'),
+            flags=F('flags').bitand(~OrganizationMember.flags['sso:linked']),
         ).count()
 
         return {
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index ea784ad219..127523c348 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -155,7 +155,7 @@ def handle_new_membership(auth_provider, organization, request, auth_identity):
         organization=organization,
         role=organization.default_role,
         user=user,
-        flags=getattr(OrganizationMember.flags, 'sso:linked'),
+        flags=OrganizationMember.flags['sso:linked'],
     )
 
     default_teams = auth_provider.default_teams.all()
@@ -236,8 +236,8 @@ def handle_attach_identity(auth_provider, request, organization, provider, ident
             except OrganizationMember.DoesNotExist:
                 pass
             else:
-                setattr(other_member.flags, 'sso:invalid', True)
-                setattr(other_member.flags, 'sso:linked', False)
+                other_member.flags['sso:invalid'] = True
+                other_member.flags['sso:linked'] = False
                 other_member.save()
 
         auth_identity.update(
@@ -263,7 +263,7 @@ def handle_attach_identity(auth_provider, request, organization, provider, ident
                 organization=organization,
                 role=organization.default_role,
                 user=user,
-                flags=getattr(OrganizationMember.flags, 'sso:linked'),
+                flags=OrganizationMember.flags['sso:linked'],
             )
 
             default_teams = auth_provider.default_teams.all()
diff --git a/src/sentry/tasks/auth.py b/src/sentry/tasks/auth.py
index 76968e9ce8..a61f2120b4 100644
--- a/src/sentry/tasks/auth.py
+++ b/src/sentry/tasks/auth.py
@@ -30,7 +30,7 @@ def email_missing_links(org_id, actor_id, provider_key, **kwargs):
 
     member_list = OrganizationMember.objects.filter(
         organization=org,
-        flags=F('flags').bitand(~getattr(OrganizationMember.flags, 'sso:linked')),
+        flags=F('flags').bitand(~OrganizationMember.flags['sso:linked']),
     )
     for member in member_list:
         member.send_sso_link_email(actor, provider)
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 1688089212..b2ecc0ded8 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -58,17 +58,17 @@ class OrganizationAuthSettingsView(OrganizationView):
 
         if db.is_sqlite():
             for om in OrganizationMember.objects.filter(organization=organization):
-                setattr(om.flags, 'sso:linked', False)
-                setattr(om.flags, 'sso:invalid', False)
+                om.flags['sso:linked'] = False
+                om.flags['sso:invalid'] = False
                 om.save()
         else:
             OrganizationMember.objects.filter(
                 organization=organization,
             ).update(
                 flags=F('flags').bitand(
-                    ~getattr(OrganizationMember.flags, 'sso:linked'),
+                    ~OrganizationMember.flags['sso:linked'],
                 ).bitand(
-                    ~getattr(OrganizationMember.flags, 'sso:invalid'),
+                    ~OrganizationMember.flags['sso:invalid'],
                 ),
             )
 
@@ -139,7 +139,7 @@ class OrganizationAuthSettingsView(OrganizationView):
 
         pending_links_count = OrganizationMember.objects.filter(
             organization=organization,
-            flags=F('flags').bitand(~getattr(OrganizationMember.flags, 'sso:linked')),
+            flags=F('flags').bitand(~OrganizationMember.flags['sso:linked']),
         ).count()
 
         context = {
diff --git a/tests/sentry/tasks/test_auth.py b/tests/sentry/tasks/test_auth.py
index 731a7dc5e1..9e8aed5f3e 100644
--- a/tests/sentry/tasks/test_auth.py
+++ b/tests/sentry/tasks/test_auth.py
@@ -19,16 +19,16 @@ class EmailMissingLinksTest(TestCase):
         om = OrganizationMember.objects.create(
             user=self.user,
             organization=self.organization,
-            flags=getattr(OrganizationMember.flags, 'sso:linked'),
+            flags=OrganizationMember.flags['sso:linked'],
         )
-        assert getattr(om.flags, 'sso:linked')
+        assert om.flags['sso:linked']
         self.user2 = self.create_user(email='baz@example.com')
         om2 = OrganizationMember.objects.create(
             user=self.user2,
             organization=self.organization,
             flags=0,
         )
-        assert not getattr(om2.flags, 'sso:linked')
+        assert not om2.flags['sso:linked']
 
     def test_email_missing_links(self):
         with self.tasks():
diff --git a/tests/sentry/tasks/test_check_auth.py b/tests/sentry/tasks/test_check_auth.py
index cf363c1124..6bca3bd042 100644
--- a/tests/sentry/tasks/test_check_auth.py
+++ b/tests/sentry/tasks/test_check_auth.py
@@ -23,7 +23,7 @@ class CheckAuthTest(TestCase):
         OrganizationMember.objects.create(
             user=user,
             organization=organization,
-            flags=getattr(OrganizationMember.flags, 'sso:linked'),
+            flags=OrganizationMember.flags['sso:linked'],
         )
 
         ai = AuthIdentity.objects.create(
@@ -59,7 +59,7 @@ class CheckAuthIdentityTest(TestCase):
         om = OrganizationMember.objects.create(
             user=user,
             organization=organization,
-            flags=getattr(OrganizationMember.flags, 'sso:linked'),
+            flags=OrganizationMember.flags['sso:linked'],
         )
 
         ai = AuthIdentity.objects.create(
@@ -76,8 +76,8 @@ class CheckAuthIdentityTest(TestCase):
 
         # because of an error, it should become inactive
         om = OrganizationMember.objects.get(id=om.id)
-        assert not getattr(om.flags, 'sso:linked')
-        assert getattr(om.flags, 'sso:invalid')
+        assert not om.flags['sso:linked']
+        assert om.flags['sso:invalid']
 
         updated_ai = AuthIdentity.objects.get(id=ai.id)
         assert updated_ai.last_synced != ai.last_synced
