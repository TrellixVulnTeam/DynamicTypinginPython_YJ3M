commit c00c3d008c1b40be9f0feb9030096fde14fed03d
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Apr 8 08:56:45 2020 -0700

    feat(integrations): add confirmation modal when deleting PagerDuty services (#18109)

diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index f3a8528f04..ba1f7f0b3b 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -74,6 +74,7 @@ class PagerDutyIntegration(IntegrationInstallation):
                 "addButtonText": "",
                 "columnLabels": {"service": "Service", "integration_key": "Integration Key"},
                 "columnKeys": ["service", "integration_key"],
+                "confirmDeleteMessage": "Any alert rules associated with this service will stop working. The rules will still exist but will show a `removed` service.",
             }
         ]
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
index 493d07b1ec..2bb495bb62 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -1,4 +1,3 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 import flatten from 'lodash/flatten';
@@ -10,70 +9,53 @@ import Input from 'app/views/settings/components/forms/controls/input';
 import InputField from 'app/views/settings/components/forms/inputField';
 import space from 'app/styles/space';
 import {IconAdd} from 'app/icons/iconAdd';
+import Confirm from 'app/components/confirm';
+import Alert from 'app/components/alert';
+import {singleLineRenderer} from 'app/utils/marked';
+import {TableType} from 'app/views/settings/components/forms/type';
 
 const defaultProps = {
+  /**
+   * Text used for the 'add' button. An empty string can be used
+   * to just render the "+" icon.
+   */
   addButtonText: t('Add Item'),
+  /**
+   * Automatically save even if fields are empty
+   */
   allowEmpty: false,
 };
 
 type DefaultProps = Readonly<typeof defaultProps>;
 
-type Props = {
-  columnLabels?: object;
-  columnKeys?: string[];
-} & DefaultProps &
-  InputField['props'];
+//Maybe not the best way of getting the props from TableType but it works
+type Props = DefaultProps & InputField['props'] & Omit<TableType, 'type'>;
 
 export default class TableField extends React.Component<Props> {
-  static propTypes = {
-    ...InputField.propTypes,
-    /**
-     * Text used for the 'add' button. An empty string can be used
-     * to just render the "+" icon.
-     */
-    addButtonText: PropTypes.node,
-    /**
-     * An object with of column labels (headers) for the table.
-     */
-    columnLabels: PropTypes.object.isRequired,
-    /**
-     * A list of column keys for the table, in the order that you want
-     * the columns to appear - order doesn't matter in columnLabels
-     */
-    columnKeys: PropTypes.arrayOf(PropTypes.string).isRequired,
-    /**
-     * Automatically save even if fields are empty
-     */
-    allowEmpty: PropTypes.bool,
-  };
-
-  static defaultProps = {
-    addButtonText: t('Add Item'),
-    allowEmpty: false,
-  };
+  static defaultProps = defaultProps;
 
   hasValue = value => defined(value) && !objectIsEmpty(value);
 
-  //TODO(TS): should type field props
-  renderField = props => {
+  renderField = (props: Props) => {
     const {
       onChange,
       onBlur,
       addButtonText,
       columnLabels,
       columnKeys,
-      disabled,
+      disabled: rawDisabled,
       allowEmpty,
+      confirmDeleteMessage,
     } = props;
 
-    const mappedKeys = columnKeys;
+    const mappedKeys = columnKeys || [];
     const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {id: ''});
 
     const valueIsEmpty = this.hasValue(props.value);
     const value = valueIsEmpty ? (props.value as any[]) : [];
 
     const saveChanges = (nextValue: object[]) => {
-      onChange(nextValue, []);
+      onChange?.(nextValue, []);
 
       //nextValue is an array of ObservableObjectAdministration objects
       const validValues = !flatten(Object.values(nextValue).map(Object.entries)).some(
@@ -82,7 +64,7 @@ export default class TableField extends React.Component<Props> {
 
       if (allowEmpty || validValues) {
         //TOOD: add debouncing or use a form save button
-        onBlur();
+        onBlur?.(nextValue, []);
       }
     };
 
@@ -91,7 +73,6 @@ export default class TableField extends React.Component<Props> {
     };
 
     const removeRow = rowIndex => {
-      //eslint-disable-next-line no-unused-vars
       const newValue = [...value];
       newValue.splice(rowIndex, 1);
       saveChanges(newValue);
@@ -109,6 +90,9 @@ export default class TableField extends React.Component<Props> {
       saveChanges(newValue);
     };
 
+    //should not be a function for this component
+    const disabled = typeof rawDisabled === 'function' ? false : rawDisabled;
+
     const button = (
       <Button
         icon={<IconAdd size="xs" circle />}
@@ -126,12 +110,28 @@ export default class TableField extends React.Component<Props> {
       return <div>{button}</div>;
     }
 
+    const renderConfirmMessage = () => {
+      return (
+        <React.Fragment>
+          <Alert type="error">
+            <span
+              dangerouslySetInnerHTML={{
+                __html: singleLineRenderer(
+                  confirmDeleteMessage || t('Are you sure you want to delete this item?')
+                ),
+              }}
+            />
+          </Alert>
+        </React.Fragment>
+      );
+    };
+
     return (
       <React.Fragment>
         <HeaderContainer>
           {mappedKeys.map((fieldKey, i) => (
             <Header key={fieldKey}>
-              <HeaderLabel>{columnLabels[fieldKey]}</HeaderLabel>
+              <HeaderLabel>{columnLabels?.[fieldKey]}</HeaderLabel>
               {i === mappedKeys.length - 1 && button}
             </Header>
           ))}
@@ -147,14 +147,16 @@ export default class TableField extends React.Component<Props> {
                   />
                 </RowInput>
                 {i === mappedKeys.length - 1 && (
-                  <RemoveButton>
-                    <Button
-                      icon="icon-trash"
-                      size="small"
-                      disabled={disabled}
-                      onClick={() => removeRow(rowIndex)}
-                    />
-                  </RemoveButton>
+                  <Confirm
+                    priority="danger"
+                    disabled={disabled}
+                    onConfirm={() => removeRow(rowIndex)}
+                    message={renderConfirmMessage()}
+                  >
+                    <RemoveButton>
+                      <Button icon="icon-trash" size="small" disabled={disabled} />
+                    </RemoveButton>
+                  </Confirm>
                 )}
               </Row>
             ))}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 780557a67b..7e338fdafd 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -108,10 +108,22 @@ type RangeType = {type: 'range'} & Omit<RangeSlider['props'], 'value'> & {
     value?: Pick<RangeSlider['props'], 'value'>;
   };
 
-type TableType = {
+export type TableType = {
   type: 'table';
-  columnLabels: object;
-  columnKeys: string[];
+  /**
+   * An object with of column labels (headers) for the table.
+   */
+  columnLabels?: object;
+  /**
+   * A list of column keys for the table, in the order that you want
+   * the columns to appear - order doesn't matter in columnLabels
+   */
+  columnKeys?: string[];
+  /**
+   * The confirmation message before a a row is deleted
+   */
+  confirmDeleteMessage?: string;
+  //TODO(TS): Should we have addButtonText and allowEmpty here as well?
 };
 
 export type Field = (
diff --git a/tests/js/spec/components/forms/tableField.spec.jsx b/tests/js/spec/components/forms/tableField.spec.jsx
index efa81c97f1..bb311f9aeb 100644
--- a/tests/js/spec/components/forms/tableField.spec.jsx
+++ b/tests/js/spec/components/forms/tableField.spec.jsx
@@ -80,6 +80,9 @@ describe('TableField', function() {
           .last()
           .simulate('click');
 
+        // click through confirmation
+        wrapper.find('Button[data-test-id="confirm-button"]').simulate('click');
+
         expect(wrapper.find('RowContainer[data-test-id="field-row"]')).toHaveLength(1);
       });
     });
