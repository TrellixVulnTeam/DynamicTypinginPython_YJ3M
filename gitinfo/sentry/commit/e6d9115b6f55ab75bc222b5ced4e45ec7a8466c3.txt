commit e6d9115b6f55ab75bc222b5ced4e45ec7a8466c3
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 24 16:42:07 2012 -0800

    More tests for interfaces

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 76cb7e4052..3bae143d13 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -256,19 +256,6 @@ class Stacktrace(Interface):
             if 'in_app' in frame:
                 frame['in_app'] = bool(frame['in_app'])
 
-    def _shorten(self, value, depth=1):
-        if depth > 5:
-            return type(value)
-        if isinstance(value, dict):
-            return dict((k, self._shorten(v, depth + 1)) for k, v in sorted(value.iteritems())[:100 / depth])
-        elif isinstance(value, (list, tuple, set, frozenset)):
-            return tuple(self._shorten(v, depth + 1) for v in value)[:100 / depth]
-        elif isinstance(value, (int, long, float)):
-            return value
-        elif not value:
-            return value
-        return value
-
     def serialize(self):
         return {
             'frames': self.frames,
@@ -283,17 +270,22 @@ class Stacktrace(Interface):
     def get_hash(self):
         output = []
         for frame in self.frames:
-            if frame.get('module'):
-                output.append(frame['module'])
-            else:
-                output.append(frame['filename'])
-
-            if frame.get('context_line'):
-                output.append(frame['context_line'])
-            elif frame.get('function'):
-                output.append(frame['function'])
-            elif frame.get('lineno'):
-                output.append(frame['lineno'])
+            output.extend(self.get_frame_hash(frame))
+        return output
+
+    def get_frame_hash(self, frame):
+        output = []
+        if frame.get('module'):
+            output.append(frame['module'])
+        else:
+            output.append(frame['filename'])
+
+        if frame.get('context_line'):
+            output.append(frame['context_line'])
+        elif frame.get('function'):
+            output.append(frame['function'])
+        elif frame.get('lineno'):
+            output.append(frame['lineno'])
         return output
 
     def is_newest_frame_first(self, event):
@@ -326,7 +318,7 @@ class Stacktrace(Interface):
 
             context_vars = []
             if frame.get('vars'):
-                context_vars = self._shorten(frame['vars'])
+                context_vars = frame['vars']
             else:
                 context_vars = []
 
diff --git a/tests/sentry/interfaces/tests.py b/tests/sentry/interfaces/tests.py
index f301a32050..32b7139849 100644
--- a/tests/sentry/interfaces/tests.py
+++ b/tests/sentry/interfaces/tests.py
@@ -2,6 +2,7 @@
 
 from __future__ import absolute_import
 
+import mock
 import pickle
 
 from sentry.interfaces import Interface, Message, Query, Stacktrace
@@ -39,6 +40,11 @@ class InterfaceTest(InterfaceBase):
     def test_get_search_context_default(self):
         assert self.interface.get_search_context(self.event) == {}
 
+    @mock.patch('sentry.interfaces.Interface.get_hash')
+    def test_get_composite_hash_calls_get_hash(self, get_hash):
+        assert self.interface.get_composite_hash(self.event) == get_hash.return_value
+        get_hash.assert_called_once_with()
+
 
 class MessageTest(InterfaceBase):
     @fixture
@@ -101,3 +107,31 @@ class QueryTest(InterfaceBase):
         assert self.interface.get_search_context(self.event) == {
             'text': [self.interface.query],
         }
+
+
+class StacktraceTest(InterfaceBase):
+    @fixture
+    def interface(self):
+        return Stacktrace(frames=[
+            {
+                'filename': 'foo/bar.py'
+            },
+            {
+                'filename': 'foo/baz.py',
+                'lineno': 1,
+                'in_app': True,
+            }
+        ])
+
+    def test_serialize_behavior(self):
+        assert self.interface.serialize() == {
+            'frames': self.interface.frames
+        }
+
+    @mock.patch('sentry.interfaces.Stacktrace.get_frame_hash')
+    def test_get_hash_uses_frame_hash(self, get_frame_hash):
+        get_frame_hash.side_effect = lambda x: [x]
+        assert self.interface.get_hash() == self.interface.frames
+        assert get_frame_hash.call_count == 2
+        get_frame_hash.assert_any_call(self.interface.frames[0])
+        get_frame_hash.assert_any_call(self.interface.frames[1])
