commit d96d00195ee63de98fa7687d8a1bf16818d16049
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Fri Oct 25 10:25:38 2019 -0700

    ref(api): Allow inviting members with pending invite requests

diff --git a/src/sentry/api/endpoints/organization_member_index.py b/src/sentry/api/endpoints/organization_member_index.py
index 1ca3c528cd..6596643f5e 100644
--- a/src/sentry/api/endpoints/organization_member_index.py
+++ b/src/sentry/api/endpoints/organization_member_index.py
@@ -56,12 +56,22 @@ class OrganizationMemberSerializer(serializers.Serializer):
     sendInvite = serializers.BooleanField(required=False, default=True, write_only=True)
 
     def validate_email(self, email):
-        if OrganizationMember.objects.filter(
+        queryset = OrganizationMember.objects.filter(
             Q(email=email) | Q(user__email__iexact=email, user__is_active=True),
             organization=self.context["organization"],
-        ).exists():
+        )
+
+        if queryset.filter(invite_status=InviteStatus.APPROVED.value).exists():
             raise serializers.ValidationError("The user %s is already a member" % email)
 
+        if not self.context.get("allow_existing_invite_request"):
+            if queryset.filter(
+                Q(invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value)
+                | Q(invite_status=InviteStatus.REQUESTED_TO_JOIN.value)
+            ).exists():
+                raise serializers.ValidationError(
+                    "There is an existing invite request for %s" % email
+                )
         return email
 
     def validate_teams(self, teams):
@@ -154,7 +164,11 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
 
         serializer = OrganizationMemberSerializer(
             data=request.data,
-            context={"organization": organization, "allowed_roles": allowed_roles},
+            context={
+                "organization": organization,
+                "allowed_roles": allowed_roles,
+                "allow_existing_invite_request": True,
+            },
         )
 
         if not serializer.is_valid():
@@ -162,17 +176,24 @@ class OrganizationMemberIndexEndpoint(OrganizationEndpoint):
 
         result = serializer.validated_data
 
-        om = OrganizationMember(
-            organization=organization,
-            email=result["email"],
-            role=result["role"],
-            inviter=request.user,
-        )
+        with transaction.atomic():
+            # remove any invitation requests for this email before inviting
+            OrganizationMember.objects.filter(
+                Q(invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value)
+                | Q(invite_status=InviteStatus.REQUESTED_TO_JOIN.value),
+                email=result["email"],
+                organization=organization,
+            ).delete()
 
-        if settings.SENTRY_ENABLE_INVITES:
-            om.token = om.generate_token()
+            om = OrganizationMember(
+                organization=organization,
+                email=result["email"],
+                role=result["role"],
+                inviter=request.user,
+            )
 
-        with transaction.atomic():
+            if settings.SENTRY_ENABLE_INVITES:
+                om.token = om.generate_token()
             om.save()
 
         if result["teams"]:
diff --git a/tests/sentry/api/endpoints/test_organization_invite_request_index.py b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
index 5ddfa90ccc..ff70ee9323 100644
--- a/tests/sentry/api/endpoints/test_organization_invite_request_index.py
+++ b/tests/sentry/api/endpoints/test_organization_invite_request_index.py
@@ -98,3 +98,20 @@ class OrganizationInviteRequestCreateTest(APITestCase):
         )
 
         assert resp.status_code == 400
+        assert "The user %s is already a member" % user2.email in resp.content
+
+    def test_existing_invite_request(self):
+        self.login_as(user=self.user)
+
+        invite_request = self.create_member(
+            email="foobar@example.com",
+            organization=self.org,
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+        resp = self.client.post(
+            self.url, {"email": invite_request.email, "role": "member", "teams": [self.team.slug]}
+        )
+
+        assert resp.status_code == 400
+        assert "There is an existing invite request for %s" % invite_request.email in resp.content
diff --git a/tests/sentry/api/endpoints/test_organization_member_index.py b/tests/sentry/api/endpoints/test_organization_member_index.py
index c112f6ea14..896a7d46b8 100644
--- a/tests/sentry/api/endpoints/test_organization_member_index.py
+++ b/tests/sentry/api/endpoints/test_organization_member_index.py
@@ -369,6 +369,44 @@ class OrganizationMemberListTest(APITestCase):
         assert response.status_code == 201
         assert response.data["email"] == "eric@localhost"
 
+    def test_can_invite_member_with_pending_invite_request(self):
+        self.login_as(user=self.owner_user)
+        email = "test@gmail.com"
+
+        invite_request = OrganizationMember.objects.create(
+            email=email,
+            organization=self.org,
+            invite_status=InviteStatus.REQUESTED_TO_BE_INVITED.value,
+        )
+
+        with self.settings(SENTRY_ENABLE_INVITES=True), self.tasks():
+            resp = self.client.post(
+                self.url, {"email": email, "role": "member", "teams": [self.team.slug]}
+            )
+
+        assert resp.status_code == 201
+        assert not OrganizationMember.objects.filter(id=invite_request.id).exists()
+        assert OrganizationMember.objects.filter(organization=self.org, email=email).exists()
+        assert len(mail.outbox) == 1
+
+    def test_can_invite_member_with_pending_join_request(self):
+        self.login_as(user=self.owner_user)
+        email = "test@gmail.com"
+
+        join_request = OrganizationMember.objects.create(
+            email=email, organization=self.org, invite_status=InviteStatus.REQUESTED_TO_JOIN.value
+        )
+
+        with self.settings(SENTRY_ENABLE_INVITES=True), self.tasks():
+            resp = self.client.post(
+                self.url, {"email": email, "role": "member", "teams": [self.team.slug]}
+            )
+
+        assert resp.status_code == 201
+        assert not OrganizationMember.objects.filter(id=join_request.id).exists()
+        assert OrganizationMember.objects.filter(organization=self.org, email=email).exists()
+        assert len(mail.outbox) == 1
+
 
 class OrganizationMemberListPostTest(APITestCase):
     endpoint = "sentry-api-0-organization-member-index"
