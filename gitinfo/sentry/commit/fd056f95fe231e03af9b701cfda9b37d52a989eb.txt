commit fd056f95fe231e03af9b701cfda9b37d52a989eb
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Oct 26 13:14:04 2017 -0700

    feat(sso): Add unlink notification emails

diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 3508bf36d3..d7155ff0cb 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -18,6 +18,7 @@ from django.utils.encoding import force_bytes
 from hashlib import md5
 from structlog import get_logger
 from uuid import uuid4
+from six.moves.urllib.parse import urlencode
 
 from sentry import roles
 from sentry.db.models import (
@@ -175,6 +176,39 @@ class OrganizationMember(Model):
         )
         msg.send_async([self.get_email()])
 
+    def send_sso_unlink_email(self, disabler, provider):
+        from sentry.utils.email import MessageBuilder
+        from sentry.models import LostPasswordHash
+
+        email = self.get_email()
+
+        recover_uri = '{path}?{query}'.format(
+            path=reverse('sentry-account-recover'),
+            query=urlencode({'email': email}),
+        )
+
+        context = {
+            'email': email,
+            'recover_url': absolute_uri(recover_uri),
+            'has_password': self.user.password,
+            'organization': self.organization,
+            'disabler': disabler,
+            'provider': provider,
+        }
+
+        if not self.user.password:
+            password_hash = LostPasswordHash.for_user(self.user)
+            context['set_password_url'] = password_hash.get_absolute_url(mode='set_password')
+
+        msg = MessageBuilder(
+            subject='Action Required for %s' % (self.organization.name, ),
+            template='sentry/emails/auth-sso-disabled.txt',
+            html_template='sentry/emails/auth-sso-disabled.html',
+            type='organization.auth_sso_disabled',
+            context=context,
+        )
+        msg.send_async([email])
+
     def get_display_name(self):
         if self.user_id:
             return self.user.get_display_name()
diff --git a/src/sentry/tasks/auth.py b/src/sentry/tasks/auth.py
index 8b7edff75a..83871dfb1a 100644
--- a/src/sentry/tasks/auth.py
+++ b/src/sentry/tasks/auth.py
@@ -26,3 +26,22 @@ def email_missing_links(org_id, actor_id, provider_key, **kwargs):
     )
     for member in member_list:
         member.send_sso_link_email(actor, provider)
+
+
+@instrumented_task(name='sentry.tasks.email_unlink_notifications', queue='auth')
+def email_unlink_notifications(org_id, disabler_id, provider_key):
+    try:
+        org = Organization.objects.get(id=org_id)
+        disabler = User.objects.get(id=disabler_id)
+        provider = manager.get(provider_key)
+    except(Organization.DoesNotExist, User.DoesNotExist, ProviderNotRegistered) as e:
+        logger.warning('Could not send SSO unlink emails: %s', e)
+        return
+
+    # Email all organization users, even if they never linked their accounts.
+    # This provides a better experience in the case where SSO is enabled and
+    # disabled in the timespan of users checking their email.
+    member_list = OrganizationMember.objects.filter(organization=org).select_related('user')
+
+    for member in member_list:
+        member.send_sso_unlink_email(disabler, provider)
diff --git a/src/sentry/templates/sentry/emails/auth-sso-disabled.html b/src/sentry/templates/sentry/emails/auth-sso-disabled.html
new file mode 100644
index 0000000000..af88f5a75a
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/auth-sso-disabled.html
@@ -0,0 +1,28 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block main %}
+  <h3>Single Sign-On disabled</h3>
+
+  <p>
+    <strong>{{ provider.name }}</strong> Single Sign-On has been disabled for the
+    <strong>{{ organization.name }}</strong> organization.
+  </p>
+
+  {% if has_password %}
+    <p>
+      You can now login using your email <strong>{{ email }}</strong>, and password. If you forgot
+      your password you can always <a href="{{ recover_url }}">reset it</a>.
+    </p>
+  {% else %}
+    <p>
+      You can now login using your email <strong>{{ email }}</strong>, however you'll first have to
+      set a password for your account.
+    </p>
+
+    <p><a href="{{ set_password_url }}" class="btn">Set your password</a></p>
+  {% endif %}
+
+  <p><small>SSO was disabled by <strong>{{ disabler.email }}</strong></small></p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/auth-sso-disabled.txt b/src/sentry/templates/sentry/emails/auth-sso-disabled.txt
new file mode 100644
index 0000000000..7acdf8eaf8
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/auth-sso-disabled.txt
@@ -0,0 +1,13 @@
+{{ provider.name }} Single Sign-On has been disabled for the {{ organization_name }} organization.
+
+{% if has_password %}
+You can now login using your email {{ email }}, and password. If you forgot your password you can always reset it by visiting the following url:
+
+{{ recover_url }}
+{% else %}
+You can now login using your email {{ email }}, however you'll first have to set a password for your account by visiting the following url:
+
+{{ set_password_url }}
+{% endif %}
+
+SSO was disabled by {{ disabler.email }}
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 5f153d2580..d26edb6fdd 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -14,7 +14,7 @@ from sentry.auth.helper import AuthHelper
 from sentry.auth.providers.saml2 import SAML2Provider, HAS_SAML2
 from sentry.models import AuditLogEntryEvent, AuthProvider, OrganizationMember, User
 from sentry.plugins import Response
-from sentry.tasks.auth import email_missing_links
+from sentry.tasks.auth import email_missing_links, email_unlink_notifications
 from sentry.utils import db
 from sentry.utils.http import absolute_uri
 from sentry.web.frontend.base import OrganizationView
@@ -76,6 +76,7 @@ class OrganizationAuthSettingsView(OrganizationView):
         user_ids = OrganizationMember.objects.filter(organization=organization).values('user')
         User.objects.filter(id__in=user_ids).update(is_managed=False)
 
+        email_unlink_notifications.delay(organization.id, request.user.id, auth_provider.provider)
         auth_provider.delete()
 
     def handle_existing_provider(self, request, organization, auth_provider):
diff --git a/tests/sentry/models/test_organizationmember.py b/tests/sentry/models/test_organizationmember.py
index a7c28b04e6..8b28155d45 100644
--- a/tests/sentry/models/test_organizationmember.py
+++ b/tests/sentry/models/test_organizationmember.py
@@ -3,7 +3,9 @@
 from __future__ import absolute_import
 
 from django.core import mail
+from mock import patch
 
+from sentry.auth import manager
 from sentry.models import OrganizationMember
 from sentry.testutils import TestCase
 
@@ -47,3 +49,24 @@ class OrganizationMemberTest(TestCase):
         msg = mail.outbox[0]
 
         assert msg.to == ['foo@example.com']
+
+    @patch('sentry.utils.email.MessageBuilder')
+    def test_send_sso_unlink_email(self, builder):
+        user = self.create_user(email='foo@example.com')
+        user.password = ''
+        user.save()
+
+        organization = self.create_organization()
+        member = self.create_member(user=user, organization=organization)
+        provider = manager.get('dummy')
+
+        with self.options({'system.url-prefix': 'http://example.com'}), self.tasks():
+            member.send_sso_unlink_email(user, provider)
+
+        context = builder.call_args[1]['context']
+
+        assert context['organization'] == organization
+        assert context['provider'] == provider
+
+        assert not context['has_password']
+        assert 'set_password_url' in context
diff --git a/tests/sentry/tasks/test_auth.py b/tests/sentry/tasks/test_auth.py
index 1847c5bfaf..ea2ce8cf97 100644
--- a/tests/sentry/tasks/test_auth.py
+++ b/tests/sentry/tasks/test_auth.py
@@ -4,32 +4,39 @@ from django.core import mail
 
 from sentry.models import AuthProvider, OrganizationMember
 from sentry.testutils import TestCase
-from sentry.tasks.auth import email_missing_links
+from sentry.tasks.auth import email_missing_links, email_unlink_notifications
 
 
 class EmailMissingLinksTest(TestCase):
-    def test_simple(self):
-        user = self.create_user(email='bar@example.com')
-        organization = self.create_organization(owner=user, name='Test')
-        provider = AuthProvider.objects.create(
-            organization=organization,
+    def setUp(self):
+        super(EmailMissingLinksTest, self).setUp()
+        self.user = self.create_user(email='bar@example.com')
+        self.organization = self.create_organization(owner=self.user, name='Test')
+        self.provider = AuthProvider.objects.create(
+            organization=self.organization,
             provider='dummy',
         )
         OrganizationMember.objects.create_or_update(
-            user=user,
-            organization=organization,
-            values={
-                'flags': getattr(OrganizationMember.flags, 'sso:linked'),
-            },
+            user=self.user,
+            organization=self.organization,
+            values={'flags': getattr(OrganizationMember.flags, 'sso:linked')},
         )
-        user2 = self.create_user(email='baz@example.com')
+        self.user2 = self.create_user(email='baz@example.com')
         OrganizationMember.objects.create(
-            user=user2,
-            organization=organization,
+            user=self.user2,
+            organization=self.organization,
             flags=0,
         )
+
+    def test_email_missing_links(self):
         with self.tasks():
-            email_missing_links(organization.id, user.id, provider.provider)
+            email_missing_links(self.organization.id, self.user.id, self.provider.provider)
 
         assert len(mail.outbox) == 1
-        assert mail.outbox[0].to == [user2.email]
+        assert mail.outbox[0].to == [self.user2.email]
+
+    def test_email_unlink_notifications(self):
+        with self.tasks():
+            email_unlink_notifications(self.organization.id, self.user.id, self.provider.provider)
+
+        assert len(mail.outbox) == 2
diff --git a/tests/sentry/web/frontend/test_organization_auth_settings.py b/tests/sentry/web/frontend/test_organization_auth_settings.py
index c346a55e88..08d6de6b8b 100644
--- a/tests/sentry/web/frontend/test_organization_auth_settings.py
+++ b/tests/sentry/web/frontend/test_organization_auth_settings.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
+from mock import patch
 
 from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 from sentry.testutils import AuthProviderTestCase, PermissionTestCase
@@ -99,7 +100,8 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
         assert getattr(member.flags, 'sso:linked')
         assert not getattr(member.flags, 'sso:invalid')
 
-    def test_disable_provider(self):
+    @patch('sentry.web.frontend.organization_auth_settings.email_unlink_notifications')
+    def test_disable_provider(self, email_unlink_notifications):
         self.user.update(is_managed=True)
         organization = self.create_organization(name='foo', owner=self.user)
 
@@ -137,3 +139,5 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
         assert not getattr(om.flags, 'sso:linked')
         assert not om.user.is_managed
+
+        assert email_unlink_notifications.delay.called
