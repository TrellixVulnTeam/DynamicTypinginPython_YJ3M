commit 0cbac3764d3a0b6d940b319c42d960df335e5416
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 24 14:08:21 2015 -0800

    Raise ProviderNotRegistered when missing provider

diff --git a/src/sentry/auth/exceptions.py b/src/sentry/auth/exceptions.py
new file mode 100644
index 0000000000..4a751dc41f
--- /dev/null
+++ b/src/sentry/auth/exceptions.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+__all__ = ['ProviderNotRegistered']
+
+
+class ProviderNotRegistered(Exception):
+    pass
diff --git a/src/sentry/auth/manager.py b/src/sentry/auth/manager.py
index 9fea11ccbf..47ca57f5c5 100644
--- a/src/sentry/auth/manager.py
+++ b/src/sentry/auth/manager.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import, print_function
 
-__all__ = ('ProviderManager',)
+__all__ = ['ProviderManager']
+
+from .exceptions import ProviderNotRegistered
 
 
 # Ideally this and PluginManager abstracted from the same base, but
@@ -12,16 +14,20 @@ class ProviderManager(object):
     def __iter__(self):
         return self.__values.iteritems()
 
-    def get(self, key, **kwargs):
-        return self.__values.get(key)(key=key, **kwargs)
+    def get(self, name, **kwargs):
+        try:
+            cls = self.__values[name]
+        except KeyError:
+            raise ProviderNotRegistered(name)
+        return cls(name=name, **kwargs)
 
-    def exists(self, key):
-        return key in self.__values
+    def exists(self, name):
+        return name in self.__values
 
-    def register(self, key, cls):
-        self.__values[key] = cls
+    def register(self, name, cls):
+        self.__values[name] = cls
 
-    def unregister(self, key, cls):
-        if self.__values[key] != cls:
-            raise KeyError(key)
-        del self.__values[key]
+    def unregister(self, name, cls):
+        if self.__values[name] != cls:
+            raise ProviderNotRegistered(name)
+        del self.__values[name]
