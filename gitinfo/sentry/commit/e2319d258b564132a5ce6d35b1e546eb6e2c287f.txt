commit e2319d258b564132a5ce6d35b1e546eb6e2c287f
Author: Yaniv Aknin <yaniv@aknin.name>
Date:   Fri Dec 30 18:48:39 2011 +0200

    udp: add initial udp service

diff --git a/sentry/commands/control.py b/sentry/commands/control.py
index 41e4a6aec2..382b0eef69 100644
--- a/sentry/commands/control.py
+++ b/sentry/commands/control.py
@@ -6,7 +6,7 @@ sentry.commands.control
 :license: BSD, see LICENSE for more details.
 """
 from sentry.commands.utils import options, opt, consume_args
-from sentry.services import http, worker, daemon
+from sentry.services import http, worker, daemon, udp
 import os
 import os.path
 
@@ -14,6 +14,7 @@ import os.path
 services = {
     'http': http.SentryHTTPServer,
     'worker': worker.SentryWorker,
+    'udp': udp.SentryUDPServer,
 }
 
 
diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index aa4ca0356b..f23ba3104d 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -83,6 +83,10 @@ RUN_DIR = os.path.join(ROOT, 'run')
 WEB_HOST = 'localhost'
 WEB_PORT = 9000
 
+# UDP Service
+UDP_HOST = 'localhost'
+UDP_PORT = 9001
+
 # Queue (Kombu)
 QUEUE = {
     'transport': 'djkombu.transport.DatabaseTransport',
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
new file mode 100644
index 0000000000..5a5f9de1a3
--- /dev/null
+++ b/sentry/services/udp.py
@@ -0,0 +1,52 @@
+import eventlet
+import logging
+
+from sentry.services.base import Service
+
+logger = logging.getLogger(__file__)
+
+
+class SentryUDPServer(Service):
+    name = 'udp'
+
+    def __init__(self, host=None, port=None, debug=False):
+        from sentry.conf import settings
+
+        self.debug = debug
+
+        self.host = host or settings.UDP_HOST
+        self.port = port or settings.UDP_PORT
+    def handle(self, data, address):
+        from sentry.utils.auth import parse_auth_header
+        from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data, safely_load_json_string,
+                                    ensure_valid_project_id, insert_data_to_database, APIError)
+        try:
+            try:
+                auth_header, data = data.split("\n\n", 1)
+            except ValueError:
+                raise APIError("missing auth header")
+            project = project_from_auth_vars(parse_auth_header(auth_header), data)
+
+            if not data.startswith('{'):
+                data = decode_and_decompress_data(data)
+            data = safely_load_json_string(data)
+
+            ensure_valid_project_id(project, data)
+
+            return insert_data_to_database(data)
+        except APIError, error:
+            logger.error('bad message from %s: %s' % (address, error.msg))
+            return error
+       
+    def run(self):
+        from eventlet.green import socket
+
+        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
+        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+        sock.bind((self.host, self.port))
+        pool = eventlet.GreenPool()
+        while True:
+            try:
+                pool.spawn_n(self.handle, *sock.recvfrom(2**16))
+            except (SystemExit, KeyboardInterrupt):
+                break
diff --git a/sentry/web/api.py b/sentry/web/api.py
index f01b28c385..ef81d31e67 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -10,10 +10,20 @@ from django.http import HttpResponse
 from django.views.decorators.csrf import csrf_exempt
 from django.views.decorators.http import require_http_methods
 
-from sentry.coreapi import (extract_auth_vars, project_from_auth_vars, project_from_api_key_and_id,
+from sentry.coreapi import (parse_auth_header, project_from_auth_vars, project_from_api_key_and_id,
                             project_from_id, decode_and_decompress_data, safely_load_json_string,
                             ensure_valid_project_id, insert_data_to_database, APIError, APIUnauthorized)
 
+def extract_auth_vars(request):
+    if request.META.get('HTTP_X_SENTRY_AUTH', '').startswith('Sentry'):
+        # Auth version 3.0 (same as 2.0, diff header)
+        return parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
+    elif request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+        # Auth version 2.0
+        return parse_auth_header(request.META['HTTP_AUTHORIZATION'])
+    else:
+        return None
+
 @csrf_exempt
 @require_http_methods(['POST'])
 def store(request):
diff --git a/tests/testcases.py b/tests/testcases.py
index dbba8558f7..1ff7c9f753 100644
--- a/tests/testcases.py
+++ b/tests/testcases.py
@@ -23,10 +23,14 @@ class BaseTestCase(object):
         })
         return resp
 
-    def _postWithSignature(self, data, key=None):
+    def _makeMessage(self, data, key=None):
         ts = time.time()
         message = base64.b64encode(json.dumps(data))
         sig = get_signature(message, ts, key)
+        return ts, message, sig
+
+    def _postWithSignature(self, data, key=None):
+        ts, message, sig = self._makeMessage(data, key)
 
         resp = self.client.post(reverse('sentry-store'), message,
             content_type='application/octet-stream',
@@ -35,9 +39,7 @@ class BaseTestCase(object):
         return resp
 
     def _postWithNewSignature(self, data, key=None):
-        ts = time.time()
-        message = base64.b64encode(json.dumps(data))
-        sig = get_signature(message, ts, key)
+        ts, message, sig = self._makeMessage(data, key)
 
         resp = self.client.post(reverse('sentry-store'), message,
             content_type='application/octet-stream',
@@ -96,4 +98,4 @@ class TransactionTestCase(BaseTestCase, TransactionTestCase):
 
     def _fixture_teardown(self):
         for db in self._get_databases():
-            call_command('flush', verbosity=0, interactive=False, database=db)
\ No newline at end of file
+            call_command('flush', verbosity=0, interactive=False, database=db)
diff --git a/tests/tests.py b/tests/tests.py
index 430ec6358f..75f13078b9 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -18,6 +18,8 @@ from sentry.models import Event, Group, MessageCountByMinute, \
   MessageFilterValue, Project, ProjectMember
 from sentry.web.helpers import get_login_url
 from sentry.utils import MockDjangoRequest
+from sentry.utils.auth import get_auth_header
+from sentry.services.udp import SentryUDPServer
 
 from tests.testcases import TestCase
 from tests.utils import Settings
@@ -590,3 +592,15 @@ class SentryManagerTest(TestCase):
         frame = stack['frames'][0]
         self.assertEquals(frame['filename'], 'foo.py')
         self.assertEquals(frame['function'], 'hello_world')
+
+class SentryUDPTest(TestCase):
+    def setUp(self):
+        self.address = (('0.0.0.0', 0))
+        self.server = SentryUDPServer(*self.address)
+    def test_failure(self):
+        self.assertNotEquals(None, self.server.handle('deadbeef', self.address))
+    def test_success(self):
+        data = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
+        ts, message, sig = self._makeMessage(data)
+        packet = get_auth_header(sig, ts, 'udpTest') + '\n\n' + message
+        self.assertEquals(None, self.server.handle(packet, self.address))
