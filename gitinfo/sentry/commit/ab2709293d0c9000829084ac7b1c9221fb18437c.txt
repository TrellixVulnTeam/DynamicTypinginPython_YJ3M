commit ab2709293d0c9000829084ac7b1c9221fb18437c
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 1 11:00:06 2018 -0800

    feat: Enhance suggested commits and add to alerts
    
    - Refactor components to use new shared CommitRow
    - Add Suspect Commits to alert emails
    - Refactor committers scanning code to handle various edge cases.

diff --git a/src/sentry/api/endpoints/event_file_committers.py b/src/sentry/api/endpoints/event_file_committers.py
index 7bca5ec79b..c68aa69e24 100644
--- a/src/sentry/api/endpoints/event_file_committers.py
+++ b/src/sentry/api/endpoints/event_file_committers.py
@@ -2,125 +2,12 @@ from __future__ import absolute_import
 
 from rest_framework.response import Response
 
-import operator
-import six
-
 from sentry.api.bases.project import ProjectEndpoint
-from sentry.api.serializers import serialize
-from sentry.models import (Release, ReleaseCommit, Commit, CommitFileChange, Event, Group)
-from sentry.api.serializers.models.commit import get_users_for_commits
-from sentry.utils import metrics
-
-from django.db.models import Q
-
-from itertools import izip
-from collections import defaultdict
-from six.moves import reduce
-
-
-def tokenize_path(path):
-    # TODO(maxbittker) tokenize in a smarter crossplatform way.
-    return reversed(path.split('/'))
-
-
-def score_path_match_length(path_a, path_b):
-    score = 0
-    for a, b in izip(tokenize_path(path_a), tokenize_path(path_b)):
-        if a != b:
-            break
-        score += 1
-    return score
+from sentry.models import Commit, Event, Release
+from sentry.utils.committers import get_event_file_committers
 
 
 class EventFileCommittersEndpoint(ProjectEndpoint):
-    def _get_frame_paths(self, event):
-        data = event.data
-        try:
-            frames = data['sentry.interfaces.Stacktrace']['frames']
-        except KeyError:
-            try:
-                frames = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
-            except (KeyError, TypeError):
-                return []  # can't find stacktrace information
-
-        return frames
-
-    def _get_commits(self, releases):
-        return list(Commit.objects.filter(
-            releasecommit=ReleaseCommit.objects.filter(
-                release__in=releases,
-            )
-        ).select_related('author'))
-
-    def _get_commit_file_changes(self, commits, path_name_set):
-        # build a single query to get all of the commit file that might match the first n frames
-        path_query = reduce(
-            operator.or_,
-            (Q(filename__endswith=next(tokenize_path(path))) for path in path_name_set)
-        )
-
-        commit_file_change_matches = CommitFileChange.objects.filter(
-            path_query,
-            commit__in=commits,
-        )
-
-        return list(commit_file_change_matches)
-
-    def _match_commits_path(self, commit_file_changes, path):
-        # find commits that match the run time path the best.
-        matching_commits = {}
-        best_score = 1
-        for file_change in commit_file_changes:
-            score = score_path_match_length(file_change.filename, path)
-            if score > best_score:
-                # reset matches for better match.
-                best_score = score
-                matching_commits = {}
-            if score == best_score:
-                # skip 1-score matches when file change is longer than 1 token
-                if score == 1 and len(list(tokenize_path(file_change.filename))) > 1:
-                    continue
-                #  we want a list of unique commits that tie for longest match
-                matching_commits[file_change.commit.id] = file_change.commit
-
-        return matching_commits.values()
-
-    def _get_commits_committer(self, commits, author_id):
-        committer_commit_list = [
-            serialize(commit) for commit in commits if commit.author.id == author_id
-        ]
-        return committer_commit_list
-
-    def _get_committers(self, annotated_frames, commits):
-        # extract the unique committers and return their serialized sentry accounts
-        committers = defaultdict(int)
-
-        limit = 5
-        for annotated_frame in annotated_frames:
-            if limit == 0:
-                break
-            for commit in annotated_frame['commits']:
-                committers[commit.author.id] += limit
-                limit -= 1
-                if limit == 0:
-                    break
-
-        # organize them by this heuristic (first frame is worth 5 points, second is worth 4, etc.)
-        sorted_committers = sorted(committers, key=committers.get)
-        users_by_author = get_users_for_commits(commits)
-
-        user_dicts = [
-            {
-                'author': users_by_author.get(six.text_type(author_id)),
-                'commits': self._get_commits_committer(
-                    commits,
-                    author_id,
-                )
-            } for author_id in sorted_committers
-        ]
-
-        return user_dicts
-
     def get(self, request, project, event_id):
         """
         Retrieve Committer information for an event
@@ -145,65 +32,28 @@ class EventFileCommittersEndpoint(ProjectEndpoint):
         # populate event data
         Event.objects.bind_nodes([event], 'data')
 
-        group = Group.objects.get(id=event.group_id)
-
-        first_release_version = group.get_first_release()
-
-        if not first_release_version:
-            return Response({'detail': 'Release not found'}, status=404)
-
-        releases = Release.get_closest_releases(project, first_release_version)
-
-        if not releases:
+        try:
+            committers = get_event_file_committers(
+                project,
+                event,
+                frame_limit=int(request.GET.get('frameLimit', 25)),
+            )
+        except Release.DoesNotExist:
             return Response({'detail': 'Release not found'}, status=404)
-
-        commits = self._get_commits(releases)
-
-        if not commits:
+        except Commit.DoesNotExist:
             return Response({'detail': 'No Commits found for Release'}, status=404)
 
-        frames = self._get_frame_paths(event)
-        frame_limit = int(request.GET.get('frameLimit', 25))
-        app_frames = [frame for frame in frames if frame['in_app']][-frame_limit:]
-        if not app_frames:
-            app_frames = [frame for frame in frames][-frame_limit:]
-
-        # TODO(maxbittker) return this set instead of annotated frames
-        path_set = {frame.get('filename') or frame['abs_path'] for frame in app_frames}
-
-        file_changes = []
-        if path_set:
-            file_changes = self._get_commit_file_changes(commits, path_set)
-
-        commit_path_matches = {
-            path: self._match_commits_path(file_changes, path) for path in path_set
-        }
-
-        annotated_frames = [
-            {
-                'frame': frame,
-                'commits': commit_path_matches[frame.get('filename') or frame['abs_path']]
-            } for frame in app_frames
-        ]
-
-        relevant_commits = list(
-            {commit for match in commit_path_matches for commit in commit_path_matches[match]}
-        )
-
-        committers = self._get_committers(annotated_frames, relevant_commits)
-        metrics.incr('feature.owners.has-committers', instance='hit' if committers else 'miss')
-
+        # XXX(dcramer): this data is unused, so lets not bother returning it for now
         # serialize the commit objects
-        serialized_annotated_frames = [
-            {
-                'frame': frame['frame'],
-                'commits': serialize(frame['commits'])
-            } for frame in annotated_frames
-        ]
+        # serialized_annotated_frames = [
+        #     {
+        #         'frame': frame['frame'],
+        #         'commits': serialize(frame['commits'])
+        #     } for frame in annotated_frames
+        # ]
 
         data = {
-            # map author ids to sentry user dicts
             'committers': committers,
-            'annotatedFrames': serialized_annotated_frames
+            # 'annotatedFrames': serialized_annotated_frames
         }
         return Response(data)
diff --git a/src/sentry/api/serializers/models/commit.py b/src/sentry/api/serializers/models/commit.py
index 14189936ba..93fbefa165 100644
--- a/src/sentry/api/serializers/models/commit.py
+++ b/src/sentry/api/serializers/models/commit.py
@@ -25,14 +25,24 @@ def get_users_for_commits(item_list, user=None):
 
 @register(Commit)
 class CommitSerializer(Serializer):
+    def __init__(self, exclude=None, *args, **kwargs):
+        Serializer.__init__(self, *args, **kwargs)
+        self.exclude = frozenset(exclude if exclude else ())
+
     def get_attrs(self, item_list, user):
-        users_by_author = get_users_for_commits(item_list, user)
+        if 'author' not in self.exclude:
+            users_by_author = get_users_for_commits(item_list, user)
+        else:
+            users_by_author = {}
 
-        repositories = serialize(
-            list(Repository.objects.filter(
-                id__in=[c.repository_id for c in item_list],
-            )), user
-        )
+        if 'repository' not in self.exclude:
+            repositories = serialize(
+                list(Repository.objects.filter(
+                    id__in=[c.repository_id for c in item_list],
+                )), user
+            )
+        else:
+            repositories = []
 
         repository_objs = {repository['id']: repository for repository in repositories}
 
@@ -51,8 +61,9 @@ class CommitSerializer(Serializer):
             'id': obj.key,
             'message': obj.message,
             'dateCreated': obj.date_added,
-            'repository': attrs['repository'],
-            'author': attrs['user']
         }
-
+        if 'repository' not in self.exclude:
+            d['repository'] = attrs['repository']
+        if 'author' not in self.exclude:
+            d['author'] = attrs['user']
         return d
diff --git a/src/sentry/plugins/sentry_mail/models.py b/src/sentry/plugins/sentry_mail/models.py
index d77fdd69bf..8760cd07e4 100644
--- a/src/sentry/plugins/sentry_mail/models.py
+++ b/src/sentry/plugins/sentry_mail/models.py
@@ -18,12 +18,13 @@ from django.utils import dateformat
 from django.utils.encoding import force_text
 from django.utils.safestring import mark_safe
 
-from sentry import options
+from sentry import features, options
 from sentry.digests.utilities import get_digest_metadata
 from sentry.plugins import register
 from sentry.plugins.base.structs import Notification
 from sentry.plugins.bases.notify import NotificationPlugin
 from sentry.utils.cache import cache
+from sentry.utils.committers import get_event_file_committers
 from sentry.utils.email import MessageBuilder, group_id_to_email
 from sentry.utils.http import absolute_uri
 from sentry.utils.linksign import generate_signed_link
@@ -160,6 +161,22 @@ class MailPlugin(NotificationPlugin):
 
         enhanced_privacy = org.flags.enhanced_privacy
 
+        # lets identify possibly suspect commits and owners
+        commits = []
+        if features.has('organizations:suggested-commits', org):
+            try:
+                committers = get_event_file_committers(project, event)
+            except Exception as exc:
+                logging.exception(six.text_type(exc))
+            else:
+                for committer in committers:
+                    for commit, score in committer['commits']:
+                        commit_data = commit.copy()
+                        commit_data['shortId'] = commit_data['id'][:7]
+                        commit_data['author'] = committer['author']
+                        commit_data['subject'] = commit_data['message'].split('\n', 1)[0]
+                        commits.append(commit_data)
+
         context = {
             'project_label': project.get_full_name(),
             'group': group,
@@ -167,6 +184,7 @@ class MailPlugin(NotificationPlugin):
             'link': link,
             'rules': rules,
             'enhanced_privacy': enhanced_privacy,
+            'commits': commits,
         }
 
         # if the organization has enabled enhanced privacy controls we dont send
diff --git a/src/sentry/static/sentry/app/components/commitRow.jsx b/src/sentry/static/sentry/app/components/commitRow.jsx
new file mode 100644
index 0000000000..fd24d3f2b9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/commitRow.jsx
@@ -0,0 +1,49 @@
+import idx from 'idx';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import Avatar from './avatar';
+import TimeSince from './timeSince';
+import CommitLink from './commitLink';
+import {t, tct} from '../locale';
+
+export default class CommitRow extends React.Component {
+  static propTypes = {
+    commit: PropTypes.object,
+  };
+
+  renderMessage = message => {
+    if (!message) {
+      return t('No message provided');
+    }
+
+    let firstLine = message.split(/\n/)[0];
+
+    return firstLine;
+  };
+
+  render() {
+    let {id, dateCreated, message, author, repository} = this.props.commit;
+    return (
+      <li className="list-group-item" key={id}>
+        <div className="row row-center-vertically">
+          <div className="col-xs-10 list-group-avatar">
+            <Avatar user={author} />
+            <h5 className="truncate">{this.renderMessage(message)}</h5>
+            <p>
+              {tct('[author] committed [timeago]', {
+                author: (
+                  <strong>{idx(author, _ => _.name) || t('Unknown author')}</strong>
+                ),
+                timeago: <TimeSince date={dateCreated} />,
+              })}
+            </p>
+          </div>
+          <div className="col-xs-2 hidden-xs align-right">
+            <CommitLink commitId={id} repository={repository} />
+          </div>
+        </div>
+      </li>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/components/events/eventCause.jsx b/src/sentry/static/sentry/app/components/events/eventCause.jsx
index c2be76afa7..42a0aa7a9e 100644
--- a/src/sentry/static/sentry/app/components/events/eventCause.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventCause.jsx
@@ -1,53 +1,12 @@
-import idx from 'idx';
 import PropTypes from 'prop-types';
 import React from 'react';
 import createReactClass from 'create-react-class';
-import moment from 'moment';
 
-import Avatar from '../avatar';
 import ApiMixin from '../../mixins/apiMixin';
 import GroupState from '../../mixins/groupState';
-import TimeSince from '../timeSince';
-import CommitLink from '../commitLink';
+import CommitRow from '../commitRow';
 import {t} from '../../locale';
 
-class Commit extends React.Component {
-  static propTypes = {
-    commit: PropTypes.object,
-  };
-
-  renderMessage = message => {
-    if (!message) {
-      return t('No message provided');
-    }
-
-    let firstLine = message.split(/\n/)[0];
-
-    return firstLine;
-  };
-
-  render() {
-    let {id, dateCreated, message, author, repository} = this.props.commit;
-    return (
-      <li className="list-group-item" key={id}>
-        <div className="row row-center-vertically">
-          <div className="col-xs-10 list-group-avatar">
-            <Avatar user={author} />
-            <h5 className="truncate">{this.renderMessage(message)}</h5>
-            <p>
-              <strong>{idx(author, _ => _.name) || t('Unknown author')}</strong> committed{' '}
-              <TimeSince date={dateCreated} />
-            </p>
-          </div>
-          <div className="col-xs-2 align-right">
-            <CommitLink commitId={id} repository={repository} />
-          </div>
-        </div>
-      </li>
-    );
-  }
-}
-
 export default createReactClass({
   displayName: 'EventCause',
 
@@ -103,31 +62,27 @@ export default createReactClass({
       return null;
     }
 
-    let commitsWithAge = [];
+    let commits = [];
     this.state.committers.forEach(committer => {
       committer.commits.forEach(commit => {
-        commitsWithAge.push([moment(commit.dateCreated), commit]);
+        commits.push(
+          {
+            ...commit,
+            author: committer.author,
+          },
+        );
       });
     });
-    let firstSeen = moment(this.getGroup().firstSeen);
-    commitsWithAge
-      .filter(([age, commit]) => {
-        return age < 604800;
-      })
-      .sort((a, b) => {
-        return firstSeen - a[0] - (firstSeen - b[0]);
-      });
-    if (!commitsWithAge.length) return null;
     return (
       <div className="box">
         <div className="box-header">
           <h3>
-            {t('Suspect Commits')} ({commitsWithAge.length})
+            {t('Suspect Commits')} ({commits.length})
           </h3>
         </div>
         <ul className="list-group list-group-lg commit-list">
-          {commitsWithAge.map(([age, commit]) => {
-            return <Commit key={commit.id} commit={commit} />;
+          {commits.map((commit) => {
+            return <CommitRow key={commit.id} commit={commit} />;
           })}
         </ul>
       </div>
diff --git a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
index 089c55a034..ffb31e83c2 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
@@ -1,63 +1,14 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 
 import createReactClass from 'create-react-class';
 
 import LoadingIndicator from '../../components/loadingIndicator';
 import LoadingError from '../../components/loadingError';
-import Avatar from '../../components/avatar';
-import TimeSince from '../../components/timeSince';
 import DropdownLink from '../../components/dropdownLink';
 import MenuItem from '../../components/menuItem';
 import ApiMixin from '../../mixins/apiMixin';
 
-import CommitLink from '../../components/commitLink';
-
-import {t} from '../../locale';
-
-class ReleaseCommit extends React.Component {
-  static propTypes = {
-    commitId: PropTypes.string,
-    commitMessage: PropTypes.string,
-    commitDateCreated: PropTypes.string,
-    author: PropTypes.object,
-    repository: PropTypes.object,
-  };
-
-  renderMessage = message => {
-    if (!message) {
-      return t('No message provided');
-    }
-
-    let firstLine = message.split(/\n/)[0];
-
-    return firstLine;
-  };
-
-  render() {
-    let {commitMessage} = this.props;
-    return (
-      <li className="list-group-item" key={this.props.commitId}>
-        <div className="row row-center-vertically">
-          <div className="col-xs-10 list-group-avatar">
-            <Avatar user={this.props.author} />
-            <h5 className="truncate">{this.renderMessage(commitMessage)}</h5>
-            <p>
-              <strong>{this.props.author.name || t('Unknown author')}</strong> committed{' '}
-              <TimeSince date={this.props.commitDateCreated} />
-            </p>
-          </div>
-          <div className="col-xs-2 align-right">
-            <CommitLink
-              commitId={this.props.commitId}
-              repository={this.props.repository}
-            />
-          </div>
-        </div>
-      </li>
-    );
-  }
-}
+import CommitRow from '../../components/commitRow';
 
 const ReleaseCommits = createReactClass({
   displayName: 'ReleaseCommits',
@@ -140,16 +91,7 @@ const ReleaseCommits = createReactClass({
         </div>
         <ul className="list-group list-group-lg commit-list">
           {activeCommits.map(commit => {
-            return (
-              <ReleaseCommit
-                key={commit.id}
-                commitId={commit.id}
-                author={commit.author}
-                commitMessage={commit.message}
-                commitDateCreated={commit.dateCreated}
-                repository={commit.repository}
-              />
-            );
+            return <CommitRow key={commit.id} commit={commit} />;
           })}
         </ul>
       </div>
@@ -215,4 +157,3 @@ const ReleaseCommits = createReactClass({
 });
 
 export default ReleaseCommits;
-export {ReleaseCommit};
diff --git a/src/sentry/templates/sentry/emails/email-styles.html b/src/sentry/templates/sentry/emails/email-styles.html
index efe24d3e3c..e3926a861b 100644
--- a/src/sentry/templates/sentry/emails/email-styles.html
+++ b/src/sentry/templates/sentry/emails/email-styles.html
@@ -210,7 +210,7 @@
   }
 
   h2 {
-    font-size: 26px;
+    font-size: 22px;
     font-weight: 700;
     margin: 0 0 20px;
   }
@@ -227,7 +227,7 @@
   }
 
   h3 {
-    font-size: 22px;
+    font-size: 18px;
     font-weight: 700;
     margin: 0 0 20px;
   }
diff --git a/src/sentry/templates/sentry/emails/error.html b/src/sentry/templates/sentry/emails/error.html
index 43592277ca..7c0a5f7f2b 100644
--- a/src/sentry/templates/sentry/emails/error.html
+++ b/src/sentry/templates/sentry/emails/error.html
@@ -1,5 +1,6 @@
 {% extends "sentry/emails/base.html" %}
 
+{% load sentry_avatars %}
 {% load sentry_helpers %}
 {% load i18n %}
 
@@ -87,6 +88,29 @@
         <div class="event-date">{{ event.datetime|date:"N j, Y, g:i:s a e" }}</div>
       </div>
 
+      {% if commits %}
+      <div class="committers">
+        <h3 class="title" style="margin-bottom: 10px">Suspect Commits</h3>
+        <table class="table commit-table">
+        {% for commit in commits %}
+          <tr>
+            <td style="padding:0;width:32px;">{% email_avatar commits.author.name commits.author.email size 32 %}</td>
+            <td>
+              <h5 class="truncate">{{ commit.subject }}</h5>
+              <div><small>{{ commit.shortId }}&nbsp;&mdash;&nbsp;
+                {% if commit.author %}
+                  <strong>{{ commit.author.name }}</strong>
+                {% else %}
+                  <strong>Unknown Author</strong>
+                {% endif %}
+              </small></div>
+            </td>
+          </tr>
+        {% endfor %}
+        </table>
+      </div>
+      {% endif %}
+
       {% for label, html, _ in interfaces %}
       <div class="interface">
           <h3 class="title">{{ label }}</h3>
diff --git a/src/sentry/utils/committers.py b/src/sentry/utils/committers.py
new file mode 100644
index 0000000000..2c016fea21
--- /dev/null
+++ b/src/sentry/utils/committers.py
@@ -0,0 +1,181 @@
+from __future__ import absolute_import
+
+import operator
+import six
+
+from sentry.api.serializers import serialize
+from sentry.models import (Release, ReleaseCommit, Commit, CommitFileChange, Event, Group)
+from sentry.api.serializers.models.commit import CommitSerializer, get_users_for_commits
+from sentry.utils import metrics
+
+from django.db.models import Q
+
+from itertools import izip
+from collections import defaultdict
+from six.moves import reduce
+
+
+def tokenize_path(path):
+    # TODO(maxbittker) tokenize in a smarter crossplatform way.
+    return reversed(path.split('/'))
+
+
+def score_path_match_length(path_a, path_b):
+    score = 0
+    for a, b in izip(tokenize_path(path_a), tokenize_path(path_b)):
+        if a != b:
+            break
+        score += 1
+    return score
+
+
+def _get_frame_paths(event):
+    data = event.data
+    try:
+        frames = data['sentry.interfaces.Stacktrace']['frames']
+    except KeyError:
+        try:
+            frames = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
+        except (KeyError, TypeError):
+            return []  # can't find stacktrace information
+
+    return frames
+
+
+def _get_commits(releases):
+    return list(Commit.objects.filter(
+        releasecommit=ReleaseCommit.objects.filter(
+            release__in=releases,
+        )
+    ).select_related('author'))
+
+
+def _get_commit_file_changes(commits, path_name_set):
+    # build a single query to get all of the commit file that might match the first n frames
+    path_query = reduce(
+        operator.or_,
+        (Q(filename__endswith=next(tokenize_path(path))) for path in path_name_set)
+    )
+
+    commit_file_change_matches = CommitFileChange.objects.filter(
+        path_query,
+        commit__in=commits,
+    )
+
+    return list(commit_file_change_matches)
+
+
+def _match_commits_path(commit_file_changes, path):
+    # find commits that match the run time path the best.
+    matching_commits = {}
+    best_score = 1
+    for file_change in commit_file_changes:
+        score = score_path_match_length(file_change.filename, path)
+        if score > best_score:
+            # reset matches for better match.
+            best_score = score
+            matching_commits = {}
+        if score == best_score:
+            # skip 1-score matches when file change is longer than 1 token
+            if score == 1 and len(list(tokenize_path(file_change.filename))) > 1:
+                continue
+            #  we want a list of unique commits that tie for longest match
+            matching_commits[file_change.commit.id] = (file_change.commit, score)
+
+    return matching_commits.values()
+
+
+def _get_commits_committer(commits, author_id):
+    result = serialize([
+        commit for commit, score in commits if commit.author.id == author_id
+    ], serializer=CommitSerializer(exclude=['author']))
+    for idx, row in enumerate(result):
+        row['score'] = commits[idx][1]
+    return result
+
+
+def _get_committers(annotated_frames, commits):
+    # extract the unique committers and return their serialized sentry accounts
+    committers = defaultdict(int)
+
+    limit = 5
+    for annotated_frame in annotated_frames:
+        if limit == 0:
+            break
+        for commit, score in annotated_frame['commits']:
+            committers[commit.author.id] += limit
+            limit -= 1
+            if limit == 0:
+                break
+
+    # organize them by this heuristic (first frame is worth 5 points, second is worth 4, etc.)
+    sorted_committers = sorted(committers, key=committers.get)
+    users_by_author = get_users_for_commits([c for c, _ in commits])
+
+    user_dicts = [
+        {
+            'author': users_by_author.get(six.text_type(author_id)),
+            'commits': _get_commits_committer(
+                commits,
+                author_id,
+            )
+        } for author_id in sorted_committers
+    ]
+
+    return user_dicts
+
+
+def get_event_file_committers(project, event, frame_limit=25):
+    # populate event data
+    Event.objects.bind_nodes([event], 'data')
+
+    group = Group.objects.get(id=event.group_id)
+
+    first_release_version = group.get_first_release()
+
+    if not first_release_version:
+        raise Release.DoesNotExist
+
+    releases = Release.get_closest_releases(project, first_release_version)
+
+    if not releases:
+        raise Release.DoesNotExist
+
+    commits = _get_commits(releases)
+
+    if not commits:
+        return Commit.DoesNotExist
+
+    frames = _get_frame_paths(event)
+    app_frames = [frame for frame in frames if frame['in_app']][-frame_limit:]
+    if not app_frames:
+        app_frames = [frame for frame in frames][-frame_limit:]
+
+    # TODO(maxbittker) return this set instead of annotated frames
+    # XXX(dcramer): frames may not define a filepath. For example, in Java its common
+    # to only have a module name/path
+    path_set = {f for f in (frame.get('filename') or frame.get('abs_path')
+                            for frame in app_frames) if f}
+
+    file_changes = []
+    if path_set:
+        file_changes = _get_commit_file_changes(commits, path_set)
+
+    commit_path_matches = {
+        path: _match_commits_path(file_changes, path) for path in path_set
+    }
+
+    annotated_frames = [
+        {
+            'frame': frame,
+            'commits': commit_path_matches.get(frame.get('filename') or frame.get('abs_path'))
+        } for frame in app_frames
+    ]
+
+    relevant_commits = list(
+        {match for match in commit_path_matches for match in commit_path_matches[match]}
+    )
+
+    committers = _get_committers(annotated_frames, relevant_commits)
+    metrics.incr('feature.owners.has-committers', instance='hit' if committers else 'miss')
+    return committers
diff --git a/src/sentry/web/frontend/debug/mail.py b/src/sentry/web/frontend/debug/mail.py
index 9b0bf83b0c..482106c0b1 100644
--- a/src/sentry/web/frontend/debug/mail.py
+++ b/src/sentry/web/frontend/debug/mail.py
@@ -255,24 +255,27 @@ def alert(request):
         html_template='sentry/emails/error.html',
         text_template='sentry/emails/error.txt',
         context={
-            'rule':
-            rule,
-            'group':
-            group,
-            'event':
-            event,
-            'link':
-            'http://example.com/link',
-            'interfaces':
-            interface_list,
-            'tags':
-            event.get_tags(),
-            'project_label':
-            project.name,
+            'rule': rule,
+            'group': group,
+            'event': event,
+            'link': 'http://example.com/link',
+            'interfaces': interface_list,
+            'tags': event.get_tags(),
+            'project_label': project.name,
             'tags': [
                 ('logger', 'javascript'), ('environment', 'prod'), ('level', 'error'),
                 ('device', 'Other')
-            ]
+            ],
+            'commits': [{
+                # TODO(dcramer): change to use serializer
+                "repository": {"status": "active", "name": "Example Repo", "url": "https://github.com/example/example", "dateCreated": "2018-02-28T23:39:22.402Z", "provider": {"id": "github", "name": "GitHub"}, "id": "1"},
+                "score": 2,
+                "subject": "feat: Do something to raven/base.py",
+                "message": "feat: Do something to raven/base.py\naptent vivamus vehicula tempus volutpat hac tortor",
+                "id": "1b17483ffc4a10609e7921ee21a8567bfe0ed006",
+                "shortId": "1b17483",
+                "author": {"username": "dcramer@gmail.com", "isManaged": False, "lastActive": "2018-03-01T18:25:28.149Z", "id": "1", "isActive": True, "has2fa": False, "name": "dcramer@gmail.com", "avatarUrl": "https://secure.gravatar.com/avatar/51567a4f786cd8a2c41c513b592de9f9?s=32&d=mm", "dateJoined": "2018-02-27T22:04:32.847Z", "emails": [{"is_verified": False, "id": "1", "email": "dcramer@gmail.com"}], "avatar": {"avatarUuid": None, "avatarType": "letter_avatar"}, "lastLogin": "2018-02-27T22:04:32.847Z", "email": "dcramer@gmail.com"}
+            }],
         },
     ).render(request)
 
diff --git a/tests/sentry/api/endpoints/test_event_committers.py b/tests/sentry/api/endpoints/test_event_committers.py
index a6f6c192b4..dcd2e5f69e 100644
--- a/tests/sentry/api/endpoints/test_event_committers.py
+++ b/tests/sentry/api/endpoints/test_event_committers.py
@@ -42,10 +42,10 @@ class EventCommittersTest(APITestCase):
         assert response.data['committers'][0]['commits'][0]['message'
                                                             ] == 'placeholder commit message'
 
-        assert len(response.data['annotatedFrames']) == 1
-        assert len(response.data['annotatedFrames'][0]['commits']) == 1
-        assert response.data['annotatedFrames'][0]['commits'][0]['author']['username'
-                                                                           ] == 'admin@localhost'
+        # assert len(response.data['annotatedFrames']) == 1
+        # assert len(response.data['annotatedFrames'][0]['commits']) == 1
+        # assert response.data['annotatedFrames'][0]['commits'][0]['author']['username'
+        #                                                                    ] == 'admin@localhost'
         # TODO(maxbittker) test more edge cases here
 
     def test_no_release(self):
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 28136694d5..2578112898 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -375,6 +375,26 @@ class MailPluginTest(TestCase):
         assert msg.subject == 'Re: [Sentry] BAR-1 - \xe3\x81\x93\xe3\x82\x93\xe3\x81\xab\xe3\x81\xa1\xe3\x81\xaf'
         assert msg.to == [self.user.email]
 
+    @mock.patch('sentry.plugins.sentry_mail.models.MailPlugin._send_mail')
+    def test_notify_does_not_error_with_suggested_commits(self, _send_mail):
+        group = Group(
+            id=2,
+            first_seen=timezone.now(),
+            last_seen=timezone.now(),
+            project=self.project,
+        )
+
+        event = Event()
+        event.group = group
+        event.project = self.project
+        event.message = 'hello world'
+        event.interfaces = {}
+
+        notification = Notification(event=event)
+
+        with self.options({'system.url-prefix': 'http://example.com'}), self.feature('organizations:suggested-commits'):
+            self.plugin.notify(notification)
+
 
 class MailPluginSignalsTest(TestCase):
     @fixture
