commit 95a0a8e3aedf3f878aac25e866b85bbbd8e62876
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Feb 5 13:05:57 2018 -0800

    fix(events): Validation of special tags (#7079)
    
    * Added a test to test that release tag max length is accepted. Test does not currently pass.
    
    * Fixes SENTRY-5SK.
    
    * Separated the release model column length from  the rest of version length. Revised corresponding tests in test_event_manager to use normalize. Fixed a minor bug in those test where the release version was too long and silently erroring.

diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index 6ec42abffb..b1dce7bd5d 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -37,7 +37,7 @@ def get_all_languages():
 MODULE_ROOT = os.path.dirname(__import__('sentry').__file__)
 DATA_ROOT = os.path.join(MODULE_ROOT, 'data')
 
-VERSION_LENGTH = 250
+VERSION_LENGTH = 200
 
 SORT_OPTIONS = OrderedDict(
     (
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index a69f7bff11..16bdc544a1 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -20,7 +20,6 @@ from sentry.constants import (
     MAX_TAG_KEY_LENGTH,
     MAX_TAG_VALUE_LENGTH,
     VALID_PLATFORMS,
-    VERSION_LENGTH,
 )
 from sentry.interfaces.base import InterfaceValidationError
 from sentry.models import EventError
@@ -45,6 +44,13 @@ PAIRS = {
     }
 }
 
+TAG_VALUE = {
+    'type': 'string',
+    'pattern': '^[^\n]*\Z',  # \Z because $ matches before a trailing newline
+    'minLength': 1,
+    'maxLength': MAX_TAG_VALUE_LENGTH,
+}
+
 HTTP_INTERFACE_SCHEMA = {
     'type': 'object',
     'properties': {
@@ -220,12 +226,7 @@ TAGS_DICT_SCHEMA = {
             'type': 'object',
             # TODO with draft 6 support, we can just use propertyNames/maxLength
             'patternProperties': {
-                '^[a-zA-Z0-9_\.:-]{1,%d}$' % MAX_TAG_KEY_LENGTH: {
-                    'type': 'string',
-                    'minLength': 1,
-                    'maxLength': MAX_TAG_VALUE_LENGTH,
-                    'pattern': '^[^\n]+\Z',  # \Z because $ matches before trailing newline
-                }
+                '^[a-zA-Z0-9_\.:-]{1,%d}$' % MAX_TAG_KEY_LENGTH: TAG_VALUE,
             },
             'additionalProperties': False,
         },
@@ -329,11 +330,8 @@ EVENT_SCHEMA = {
             # 'maxLength': MAX_CULPRIT_LENGTH,
             'default': lambda: apierror('Invalid value for culprit'),
         },
-        'server_name': {'type': 'string'},
-        'release': {
-            'type': 'string',
-            'maxLength': VERSION_LENGTH,
-        },
+        'server_name': TAG_VALUE,
+        'release': TAG_VALUE,
         'dist': {
             'type': 'string',
             'pattern': '^[a-zA-Z0-9_.-]+$',
@@ -387,7 +385,7 @@ EVENT_SCHEMA = {
         'key_id': {},
         'errors': {'type': 'array'},
         'checksum': {},
-        'site': {},
+        'site': TAG_VALUE,
         'received': {},
     },
     'required': ['platform', 'event_id'],
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index c6442b97cb..3d1669137b 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -24,7 +24,6 @@ from sentry.db.models import (
 
 from sentry.models import CommitFileChange
 
-from sentry.constants import VERSION_LENGTH
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
 from sentry.utils.retries import TimedRetryPolicy
@@ -34,6 +33,7 @@ logger = logging.getLogger(__name__)
 _sha1_re = re.compile(r'^[a-f0-9]{40}$')
 _dotted_path_prefix_re = re.compile(r'^([a-zA-Z][a-zA-Z0-9-]+)(\.[a-zA-Z][a-zA-Z0-9-]+)+-')
 BAD_RELEASE_CHARS = '\n\f\t/'
+DB_VERSION_LENGTH = 250
 
 
 class ReleaseProject(Model):
@@ -62,9 +62,9 @@ class Release(Model):
     )
     # DEPRECATED
     project_id = BoundedPositiveIntegerField(null=True)
-    version = models.CharField(max_length=VERSION_LENGTH)
+    version = models.CharField(max_length=DB_VERSION_LENGTH)
     # ref might be the branch name being released
-    ref = models.CharField(max_length=VERSION_LENGTH, null=True, blank=True)
+    ref = models.CharField(max_length=DB_VERSION_LENGTH, null=True, blank=True)
     url = models.URLField(null=True, blank=True)
     date_added = models.DateTimeField(default=timezone.now)
     # DEPRECATED - not available in UI or editable from API
@@ -137,7 +137,7 @@ class Release(Model):
         if release in (None, -1):
             # TODO(dcramer): if the cache result is -1 we could attempt a
             # default create here instead of default get
-            project_version = ('%s-%s' % (project.slug, version))[:VERSION_LENGTH]
+            project_version = ('%s-%s' % (project.slug, version))[:DB_VERSION_LENGTH]
             releases = list(
                 cls.objects.filter(
                     organization_id=project.organization_id,
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index 0d8e3a9b99..0844391bf2 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -7,7 +7,7 @@ import mock
 import pytest
 
 from django.core.exceptions import SuspiciousOperation
-from sentry.constants import VERSION_LENGTH
+from sentry.constants import VERSION_LENGTH, MAX_CULPRIT_LENGTH
 from uuid import UUID
 
 from sentry.coreapi import (
@@ -284,6 +284,42 @@ class ValidateDataTest(BaseAPITest):
         })
         assert data['extra'] == {}
 
+    def test_release_tag_max_len(self):
+        release_key = u'sentry:release'
+        release_value = ('a' * VERSION_LENGTH)
+        data = self.validate_and_normalize({
+            'message': 'foo',
+            'tags': [
+                [release_key, release_value],
+            ],
+        })
+        assert not data['errors']
+        assert data['tags'] == [(release_key, release_value)]
+
+    def test_server_name_too_long(self):
+        key = u'server_name'
+        value = ('a' * (MAX_CULPRIT_LENGTH + 1))
+        data = self.validate_and_normalize({
+            key: value,
+        })
+        assert not data.get(key)
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'value_too_long'
+        assert data['errors'][0]['name'] == key
+        assert data['errors'][0]['value'] == value
+
+    def test_site_too_long(self):
+        key = u'site'
+        value = ('a' * (MAX_CULPRIT_LENGTH + 1))
+        data = self.validate_and_normalize({
+            key: value,
+        })
+        assert not data.get(key)
+        assert len(data['errors']) == 1
+        assert data['errors'][0]['type'] == 'value_too_long'
+        assert data['errors'][0]['name'] == key
+        assert data['errors'][0]['value'] == value
+
     def test_release_too_long(self):
         data = self.validate_and_normalize({
             'release': 'a' * (VERSION_LENGTH + 1),
diff --git a/tests/sentry/test_event_manager.py b/tests/sentry/test_event_manager.py
index 158d5378fe..0792b90430 100644
--- a/tests/sentry/test_event_manager.py
+++ b/tests/sentry/test_event_manager.py
@@ -40,6 +40,12 @@ class EventManagerTest(TransactionTestCase):
         result.update(kwargs)
         return result
 
+    def make_release_event(self, release_name, project_id):
+        manager = EventManager(self.make_event(release=release_name))
+        manager.normalize()
+        event = manager.save(project_id)
+        return event
+
     def test_key_id_remains_in_data(self):
         manager = EventManager(self.make_event(key_id=12345))
         manager.normalize()
@@ -534,14 +540,13 @@ class EventManagerTest(TransactionTestCase):
         assert data['version'] == '6'
 
     def test_first_release(self):
-        manager = EventManager(self.make_event(release='1.0'))
-        event = manager.save(1)
+        project_id = 1
+        event = self.make_release_event('1.0', project_id)
 
         group = event.group
         assert group.first_release.version == '1.0'
 
-        manager = EventManager(self.make_event(release='2.0'))
-        event = manager.save(1)
+        event = self.make_release_event('2.0', project_id)
 
         group = event.group
         assert group.first_release.version == '1.0'
@@ -551,38 +556,36 @@ class EventManagerTest(TransactionTestCase):
         release = Release.objects.create(version='foo-1.0', organization=project.organization)
         release.add_project(project)
 
-        manager = EventManager(self.make_event(release='1.0'))
-        event = manager.save(project.id)
+        event = self.make_release_event('1.0', project.id)
 
         group = event.group
         assert group.first_release.version == 'foo-1.0'
         release_tag = [v for k, v in event.tags if k == 'sentry:release'][0]
         assert release_tag == 'foo-1.0'
 
-        manager = EventManager(self.make_event(release='2.0'))
-        event = manager.save(project.id)
+        event = self.make_release_event('2.0', project.id)
 
         group = event.group
         assert group.first_release.version == 'foo-1.0'
 
     def test_release_project_slug_long(self):
         project = self.create_project(name='foo')
+        partial_version_len = VERSION_LENGTH - 4
         release = Release.objects.create(
-            version='foo-%s' % ('a' * (VERSION_LENGTH - 4), ), organization=project.organization
+            version='foo-%s' % ('a' * partial_version_len, ), organization=project.organization
         )
         release.add_project(project)
 
-        manager = EventManager(self.make_event(release=('a' * (VERSION_LENGTH - 3))))
-        event = manager.save(project.id)
+        event = self.make_release_event('a' * partial_version_len, project.id)
 
         group = event.group
-        assert group.first_release.version == 'foo-%s' % ('a' * (VERSION_LENGTH - 4), )
+        assert group.first_release.version == 'foo-%s' % ('a' * partial_version_len, )
         release_tag = [v for k, v in event.tags if k == 'sentry:release'][0]
-        assert release_tag == 'foo-%s' % ('a' * (VERSION_LENGTH - 4), )
+        assert release_tag == 'foo-%s' % ('a' * partial_version_len, )
 
     def test_group_release_no_env(self):
-        manager = EventManager(self.make_event(release='1.0'))
-        event = manager.save(1)
+        project_id = 1
+        event = self.make_release_event('1.0', project_id)
 
         release = Release.objects.get(version='1.0', projects=event.project_id)
 
@@ -593,8 +596,7 @@ class EventManagerTest(TransactionTestCase):
         ).exists()
 
         # ensure we're not erroring on second creation
-        manager = EventManager(self.make_event(release='1.0'))
-        manager.save(1)
+        event = self.make_release_event('1.0', project_id)
 
     def test_group_release_with_env(self):
         manager = EventManager(
