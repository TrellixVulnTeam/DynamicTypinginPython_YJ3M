commit dd1d7fbe8b4610a60d27dbfdb62007cd7b9e90ba
Author: Mark Story <mark@mark-story.com>
Date:   Fri Oct 19 19:29:45 2018 +0000

    ref(releases) Remove unused PullRequestCommit class (#10166)
    
    This class was added several months back but is *never* called in the
    application code. The table contains 0 rows in production making me
    pretty confident that this is an unused code path.
    
    django 1.8 tests are failing with this model removed. I am guessing that
    I'll need to drop the table before this class can be removed entirely.

diff --git a/src/sentry/models/pullrequest.py b/src/sentry/models/pullrequest.py
index 61eebc740a..32c7d5c879 100644
--- a/src/sentry/models/pullrequest.py
+++ b/src/sentry/models/pullrequest.py
@@ -1,6 +1,6 @@
 from __future__ import absolute_import, print_function
 
-from django.db import models, transaction
+from django.db import models
 from django.utils import timezone
 
 from sentry.db.models import (BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr)
@@ -34,27 +34,9 @@ class PullRequest(Model):
         text = u'{} {}'.format(self.message, self.title)
         return find_referenced_groups(text, self.organization_id)
 
-    def set_commits(self, commit_list):
-        with transaction.atomic():
-            PullRequestCommit.objects.filter(
-                pull_request=self,
-            ).exclude(
-                commit__in=commit_list,
-            ).delete()
-            existing = set(PullRequestCommit.objects.filter(
-                pull_request=self,
-            ).values_list('commit', flat=True))
-            commits_missing = [c for c in commit_list if c.id not in existing]
-            for commit in commits_missing:
-                PullRequestCommit.objects.create(
-                    pull_request=self,
-                    commit=commit,
-                )
-
 
 class PullRequestCommit(Model):
     __core__ = False
-
     pull_request = FlexibleForeignKey('sentry.PullRequest')
     commit = FlexibleForeignKey('sentry.Commit')
 
diff --git a/tests/sentry/models/test_pullrequest.py b/tests/sentry/models/test_pullrequest.py
index f193ada02e..15f6c994f6 100644
--- a/tests/sentry/models/test_pullrequest.py
+++ b/tests/sentry/models/test_pullrequest.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from hashlib import sha1
 from uuid import uuid4
 
-from sentry.models import Commit, Repository, PullRequest, PullRequestCommit
+from sentry.models import Commit, Repository, PullRequest
 from sentry.testutils import TestCase
 
 
@@ -43,69 +43,3 @@ class FindReferencedGroupsTest(TestCase):
         groups = pr.find_referenced_groups()
         assert len(groups) == 1
         assert group2 in groups
-
-
-class SetCommitsTest(TestCase):
-    def test_simple(self):
-        org = self.organization
-
-        repo = Repository.objects.create(
-            name='example',
-            organization_id=org.id,
-        )
-
-        commit = Commit.objects.create(
-            key=sha1(uuid4().hex).hexdigest(),
-            repository_id=repo.id,
-            organization_id=org.id,
-            message='',
-        )
-        commit2 = Commit.objects.create(
-            key=sha1(uuid4().hex).hexdigest(),
-            repository_id=repo.id,
-            organization_id=org.id,
-            message='',
-        )
-        commit3 = Commit.objects.create(
-            key=sha1(uuid4().hex).hexdigest(),
-            repository_id=repo.id,
-            organization_id=org.id,
-            message='',
-        )
-
-        pr = PullRequest.objects.create(
-            key='1',
-            repository_id=repo.id,
-            organization_id=org.id,
-            title='',
-            message=''
-        )
-
-        # add initial commits
-        pr.set_commits([commit, commit2])
-
-        pr_commits = set(PullRequestCommit.objects.filter(
-            pull_request=pr,
-        ).values_list('commit', flat=True))
-        assert len(pr_commits) == 2
-        assert commit.id in pr_commits
-        assert commit2.id in pr_commits
-
-        # add a commit
-        pr.set_commits([commit, commit2, commit3])
-        pr_commits = set(PullRequestCommit.objects.filter(
-            pull_request=pr,
-        ).values_list('commit', flat=True))
-        assert len(pr_commits) == 3
-        assert commit.id in pr_commits
-        assert commit2.id in pr_commits
-        assert commit3.id in pr_commits
-
-        # remove a commit
-        pr.set_commits([commit2, commit3])
-        pr_commits = set(PullRequestCommit.objects.filter(
-            pull_request=pr,
-        ).values_list('commit', flat=True))
-        assert len(pr_commits) == 2
-        assert commit2.id in pr_commits
-        assert commit3.id in pr_commits
