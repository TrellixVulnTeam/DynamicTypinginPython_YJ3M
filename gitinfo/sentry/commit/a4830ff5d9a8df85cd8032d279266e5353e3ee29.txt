commit a4830ff5d9a8df85cd8032d279266e5353e3ee29
Author: David Wang <davidw1339@gmail.com>
Date:   Mon Sep 30 11:49:54 2019 -0700

    feat(ui): Added user teams HOC (#14859)
    
    Added a HOC which requires an organization and api in order to fetch the current user's teams using the endpoint added https://github.com/getsentry/sentry/pull/14801. This will eventually be used to improve performance of the project page. This pull request was split off from https://github.com/getsentry/sentry/pull/14839
    
    Refs: SEN-1057

diff --git a/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
new file mode 100644
index 0000000000..b977519a63
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/withTeamsForUser.tsx
@@ -0,0 +1,65 @@
+import React from 'react';
+
+import {Team, Organization} from 'app/types';
+import getDisplayName from 'app/utils/getDisplayName';
+import {Client} from 'app/api';
+
+// We require these props when using this HOC
+type DependentProps = {
+  api: Client;
+  organization: Organization;
+};
+
+type InjectedTeamsProps = {
+  teams: Team[];
+  loadingTeams: boolean;
+  error: Error | null;
+};
+
+const withTeamsForUser = <P extends InjectedTeamsProps>(
+  WrappedComponent: React.ComponentType<P>
+) =>
+  class extends React.Component<
+    Omit<P, keyof InjectedTeamsProps> & Partial<InjectedTeamsProps> & DependentProps,
+    InjectedTeamsProps
+  > {
+    static displayName = `withUsersTeams(${getDisplayName(WrappedComponent)})`;
+
+    state = {
+      teams: [],
+      loadingTeams: true,
+      error: null,
+    };
+
+    componentDidMount() {
+      this.fetchTeams();
+    }
+
+    async fetchTeams() {
+      this.setState({
+        loadingTeams: true,
+      });
+      try {
+        const teams = await this.props.api.requestPromise(this.getUsersTeamsEndpoint());
+        this.setState({
+          teams,
+          loadingTeams: false,
+        });
+      } catch (error) {
+        this.setState({
+          error,
+          loadingTeams: false,
+        });
+      }
+    }
+
+    getUsersTeamsEndpoint() {
+      return `/organizations/${this.props.organization.slug}/user-teams/`;
+    }
+
+    render() {
+      return <WrappedComponent {...this.props as (P & DependentProps)} {...this.state} />;
+    }
+  };
+
+export default withTeamsForUser;
diff --git a/tests/js/spec/utils/withTeamsForUser.spec.jsx b/tests/js/spec/utils/withTeamsForUser.spec.jsx
new file mode 100644
index 0000000000..a3225c6c0a
--- /dev/null
+++ b/tests/js/spec/utils/withTeamsForUser.spec.jsx
@@ -0,0 +1,59 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import withTeamsForUser from 'app/utils/withTeamsForUser';
+
+describe('withUserTeams HoC', function() {
+  const api = new MockApiClient();
+  const organization = TestStubs.Organization();
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('forwards errors', async function() {
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/user-teams/`,
+      statusCode: 400,
+    });
+    const MyComponent = () => null;
+    const Container = withTeamsForUser(MyComponent);
+    const wrapper = mount(<Container organization={organization} api={api} />);
+    await tick();
+    expect(
+      wrapper
+        .update()
+        .find('MyComponent')
+        .prop('error')
+    ).not.toBeNull();
+  });
+
+  it('fetches teams and works', async function() {
+    const mockTeams = [
+      {
+        slug: 'sentry',
+        projects: [],
+      },
+      {
+        slug: 'captainplanet',
+        projects: [],
+      },
+    ];
+
+    MockApiClient.addMockResponse({
+      url: `/organizations/${organization.slug}/user-teams/`,
+      body: mockTeams,
+    });
+
+    const MyComponent = () => null;
+    const Container = withTeamsForUser(MyComponent);
+    const wrapper = mount(<Container organization={organization} api={api} />);
+    await tick();
+    expect(
+      wrapper
+        .update()
+        .find('MyComponent')
+        .prop('teams')
+    ).toEqual(mockTeams);
+  });
+});
