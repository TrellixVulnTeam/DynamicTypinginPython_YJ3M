commit 5146c09da27e53beea9513f1d2a8bdebdee4871c
Author: Mark Story <mark@sentry.io>
Date:   Tue Jun 23 10:49:25 2020 -0400

    fix(discover) Improve drilldown results by only showing one id field (#19494)
    
    Currently drilldown results frequently include two id fields and sort by
    id (which is never useful). This skips adding the `id` field to
    drilldown results and relies on the implicit id field that the API
    endpoints add to all non-aggregate results.

diff --git a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
index bc20414d34..3acdfa7f97 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/utils.tsx
@@ -174,7 +174,7 @@ export function downloadAsCsv(tableData, columnOrder, filename) {
 // A map between aggregate function names and its un-aggregated form
 const TRANSFORM_AGGREGATES = {
   last_seen: 'timestamp',
-  latest_event: 'id',
+  latest_event: '',
   apdex: '',
   impact: '',
   user_misery: '',
@@ -226,7 +226,8 @@ export function getExpandedResults(
     let fieldNameAlias: string = '';
     if (exploded.kind === 'function' && isTransformAggregate(exploded.function[0])) {
       fieldNameAlias = exploded.function[0];
-    } else if (exploded.kind === 'field') {
+    } else if (exploded.kind === 'field' && exploded.field !== 'id') {
+      // Skip id fields as they are implicitly part of all non-aggregate results.
       fieldNameAlias = exploded.field;
     }
 
@@ -259,10 +260,12 @@ export function getExpandedResults(
     }
 
     if (exploded.kind === 'function') {
-      let field = exploded.function[1];
-      // edge case: transform count() into id
-      if (exploded.function[0] === 'count') {
-        field = 'id';
+      const field = exploded.function[1];
+
+      // Remove count an aggregates on id, as results have an implicit id in them.
+      if (exploded.function[0] === 'count' || field === 'id') {
+        fieldsToDelete.push(indexToUpdate);
+        return;
       }
 
       // if at least one of the parameters to the function is an available column,
@@ -278,7 +281,6 @@ export function getExpandedResults(
         fieldsToDelete.push(indexToUpdate);
         return;
       }
-
       transformedFields.add(field);
 
       const updatedColumn: Column = {
diff --git a/tests/js/spec/views/eventsV2/utils.spec.jsx b/tests/js/spec/views/eventsV2/utils.spec.jsx
index 634f921374..90c5a6f9de 100644
--- a/tests/js/spec/views/eventsV2/utils.spec.jsx
+++ b/tests/js/spec/views/eventsV2/utils.spec.jsx
@@ -196,8 +196,8 @@ describe('getExpandedResults()', function() {
     let view = new EventView(state);
 
     let result = getExpandedResults(view, {}, {});
+    // id should be omitted as it is an implicit property on unaggregated results.
     expect(result.fields).toEqual([
-      {field: 'id', width: -1}, // expect count() to be converted to id
       {field: 'timestamp', width: -1},
       {field: 'title'},
       {field: 'custom_tag'},
@@ -217,8 +217,8 @@ describe('getExpandedResults()', function() {
     });
 
     result = getExpandedResults(view, {}, {});
+    // id should be omitted as it is an implicit property on unaggregated results.
     expect(result.fields).toEqual([
-      {field: 'id', width: -1}, // expect count() to be converted to id
       {field: 'timestamp', width: -1},
       {field: 'title'},
       {field: 'custom_tag'},
@@ -251,7 +251,6 @@ describe('getExpandedResults()', function() {
     result = getExpandedResults(view, {}, {});
     expect(result.fields).toEqual([
       {field: 'timestamp', width: -1},
-      {field: 'id', width: -1},
       {field: 'title'},
       {field: 'transaction.duration', width: -1},
       {field: 'custom_tag'},
