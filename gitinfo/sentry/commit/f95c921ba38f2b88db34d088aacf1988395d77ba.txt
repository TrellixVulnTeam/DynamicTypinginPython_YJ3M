commit f95c921ba38f2b88db34d088aacf1988395d77ba
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Feb 20 14:32:16 2019 -0800

    ref(api): Use has_project_X methods in org endpoint base (#12098)

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index e6c12f3b1a..34675d7b65 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -12,8 +12,7 @@ from sentry.api.utils import (
 )
 from sentry.auth.superuser import is_active_superuser
 from sentry.models import (
-    ApiKey, Authenticator, Organization, OrganizationMemberTeam, Project,
-    ProjectStatus, ReleaseProject,
+    ApiKey, Authenticator, Organization, Project, ProjectStatus, ReleaseProject,
 )
 from sentry.utils import auth
 from sentry.utils.sdk import configure_scope
@@ -146,29 +145,27 @@ class OrganizationEndpoint(Endpoint):
 
         user = getattr(request, 'user', None)
 
-        if (
-            user and is_active_superuser(request)
-            or include_allow_joinleave and organization.flags.allow_joinleave
-            or force_global_perms
-        ):
-            qs = Project.objects.filter(
-                organization=organization,
-                status=ProjectStatus.VISIBLE,
-            )
-        else:
-            qs = Project.objects.filter(
-                organization=organization,
-                teams__in=OrganizationMemberTeam.objects.filter(
-                    organizationmember__user=user,
-                    organizationmember__organization=organization,
-                ).values_list('team'),
-                status=ProjectStatus.VISIBLE,
-            )
+        qs = Project.objects.filter(
+            organization=organization,
+            status=ProjectStatus.VISIBLE,
+        )
 
         if project_ids:
             qs = qs.filter(id__in=project_ids)
 
-        projects = list(qs)
+        if force_global_perms:
+            projects = list(qs)
+        else:
+            if (
+                user and is_active_superuser(request) or
+                requested_projects or
+                include_allow_joinleave
+            ):
+                func = request.access.has_project_access
+            else:
+                func = request.access.has_project_membership
+            projects = [p for p in qs if func(p)]
+
         project_ids = set(p.id for p in projects)
 
         if requested_projects and project_ids != requested_projects:
diff --git a/tests/sentry/api/bases/test_organization.py b/tests/sentry/api/bases/test_organization.py
index ded2ecf476..10c7d5adc0 100644
--- a/tests/sentry/api/bases/test_organization.py
+++ b/tests/sentry/api/bases/test_organization.py
@@ -15,6 +15,7 @@ from sentry.api.bases.organization import (
 )
 from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.utils import MAX_STATS_PERIOD
+from sentry.auth.access import from_request, NoAccess
 from sentry.models import ApiKey
 from sentry.testutils import TestCase
 
@@ -104,6 +105,10 @@ class BaseOrganizationEndpointTest(TestCase):
     def user(self):
         return self.create_user('tester@test.com')
 
+    @fixture
+    def member(self):
+        return self.create_user('member@test.com')
+
     @fixture
     def owner(self):
         return self.create_user('owner@test.com')
@@ -123,6 +128,7 @@ class BaseOrganizationEndpointTest(TestCase):
         if user is None:
             user = self.user
         request.user = user
+        request.access = from_request(request, self.org)
         return request
 
 
@@ -132,6 +138,7 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         self.team_1 = self.create_team(organization=self.org)
         self.team_2 = self.create_team(organization=self.org)
         self.team_3 = self.create_team(organization=self.org)
+        self.create_team_membership(user=self.member, team=self.team_2)
         self.project_1 = self.create_project(
             organization=self.org,
             teams=[self.team_1, self.team_3],
@@ -152,6 +159,7 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         request_args = {}
         if project_ids:
             request_args['project'] = project_ids
+
         result = self.endpoint.get_projects(
             self.build_request(user=user, active_superuser=active_superuser, **request_args),
             self.org,
@@ -164,12 +172,13 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
         self.run_test([])
         # Should get everything if super user
         self.run_test([self.project_1, self.project_2], user=self.user, active_superuser=True)
-        # owner only sees projects they have direct access to
-        self.run_test([], user=self.owner)
-        # Should get everything if org is public
+        # owner sees projects they have access to if they're included as query params
+        self.run_test([self.project_1, self.project_2], user=self.owner)
+        # Should get everything if org is public and ids are specified
         self.org.flags.allow_joinleave = True
         self.org.save()
-        self.run_test([self.project_1, self.project_2], include_allow_joinleave=True)
+        self.run_test([self.project_1, self.project_2], user=self.member,
+                      project_ids=[self.project_1.id, self.project_2.id])
         self.run_test([], include_allow_joinleave=False)
 
     def test_no_ids_teams(self):
@@ -185,22 +194,26 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
 
         self.run_test([self.project_1], user=self.user, project_ids=[
                       self.project_1.id], active_superuser=True)
-        # owner only sees projects they have direct access to
-        with self.assertRaises(PermissionDenied):
-            self.run_test([self.project_1], user=self.owner, project_ids=[self.project_1.id])
+
+        # owner should see project if they explicitly request it, even if the don't
+        # have membership
+        self.run_test([self.project_1], user=self.owner, project_ids=[self.project_1.id])
 
         self.org.flags.allow_joinleave = True
         self.org.save()
         self.run_test(
             [self.project_1],
+            user=self.member,
             project_ids=[self.project_1.id],
-            include_allow_joinleave=True,
         )
+
+        self.org.flags.allow_joinleave = False
+        self.org.save()
         with self.assertRaises(PermissionDenied):
             self.run_test(
                 [self.project_1],
+                user=self.member,
                 project_ids=[self.project_1.id],
-                include_allow_joinleave=False,
             )
 
     def test_ids_teams(self):
@@ -218,6 +231,7 @@ class GetProjectIdsTest(BaseOrganizationEndpointTest):
     def test_none_user(self):
         request = RequestFactory().get('/')
         request.session = {}
+        request.access = NoAccess()
         result = self.endpoint.get_projects(request, self.org)
         assert [] == result
 
@@ -295,6 +309,7 @@ class GetFilterParamsTest(BaseOrganizationEndpointTest):
             request_args['end'] = end
         if stats_period:
             request_args['statsPeriod'] = stats_period
+
         result = self.endpoint.get_filter_params(
             self.build_request(user=user, active_superuser=active_superuser, **request_args),
             self.org,
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 851c67f748..d1e156ccde 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -149,8 +149,10 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
         assert response.data['detail'] == "Parse error: 'search' (column 1)"
 
     def test_project_filtering(self):
-        user = self.create_user()
+        user = self.create_user(is_staff=False, is_superuser=False)
         org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
         team = self.create_team(organization=org)
         self.create_member(organization=org, user=user, teams=[team])
 
