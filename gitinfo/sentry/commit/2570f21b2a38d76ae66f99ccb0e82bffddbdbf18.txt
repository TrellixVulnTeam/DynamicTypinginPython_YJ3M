commit 2570f21b2a38d76ae66f99ccb0e82bffddbdbf18
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Feb 7 12:10:45 2017 +0100

    Added support for plugins to register custom contexts

diff --git a/src/sentry/plugins/base/v2.py b/src/sentry/plugins/base/v2.py
index ae70dfe5aa..4c95f6e696 100644
--- a/src/sentry/plugins/base/v2.py
+++ b/src/sentry/plugins/base/v2.py
@@ -415,6 +415,20 @@ class IPlugin2(local, PluginConfigMixin):
         """
         return []
 
+    def get_custom_contexts(self):
+        """Return a custom dictionary of context types.
+
+        from sentry.interfaces.contexts import ContextType
+
+        class MyContextType(ContextType):
+            ...
+
+        def get_custom_contexts(self):
+            return {
+                'my_type': MyContextType,
+            }
+        """
+
     def configure(self, project, request):
         """Configures the plugin."""
         return default_plugin_config(self, project, request)
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index ab83c50564..ccc4afc5b4 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -17,7 +17,7 @@ from sentry.utils.warnings import DeprecatedSettingWarning
 
 def register_plugins(settings):
     from pkg_resources import iter_entry_points
-    from sentry.plugins import bindings, plugins
+    from sentry.plugins import plugins
     # entry_points={
     #    'sentry.plugins': [
     #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
@@ -34,7 +34,19 @@ def register_plugins(settings):
             plugins.register(plugin)
 
     for plugin in plugins.all(version=None):
-        plugin.setup(bindings)
+        init_plugin(plugin)
+
+
+def init_plugin(plugin):
+    from sentry.plugins import bindings
+    plugin.setup(bindings)
+
+    # Register contexts from plugins if necessary
+    if hasattr(plugin, 'get_custom_contexts'):
+        from sentry.interfaces.contexts import contexttype
+        contexts = plugin.get_custom_contexts()
+        for key, cls in six.iteritems(contexts or {}):
+            contexttype(key)(cls)
 
 
 def initialize_receivers():
