commit efbf41ae94c0077de051dfde5228d2165f4ac1d3
Author: Lior Sion <liorsion@the-macbook-air.(none)>
Date:   Tue May 31 10:22:18 2011 +0300

    added support for clear all

diff --git a/sentry/static/scripts/global.js b/sentry/static/scripts/global.js
index ad042fa4a7..f13a859440 100644
--- a/sentry/static/scripts/global.js
+++ b/sentry/static/scripts/global.js
@@ -81,6 +81,21 @@ var Sentry = {};
     };
     
     Sentry.stream = {};
+    Sentry.stream.clear = function() {
+    	if (confirm("Are you sure you want to mark all your stream as resolved?")) {
+    		$.ajax({
+                url: Sentry.options.apiUrl,
+                type: 'post',
+                dataType: 'json',
+                data: {
+                    op: 'clear',
+                },
+                success: function(groups){
+                	window.location.reload();
+                }
+            });
+    	}
+    }
     Sentry.stream.resolve = function(gid, remove){
         if (typeof(remove) == 'undefined') {
             remove = true;
diff --git a/sentry/templates/sentry/index.html b/sentry/templates/sentry/index.html
index 6e7192e97c..0b7e57875f 100644
--- a/sentry/templates/sentry/index.html
+++ b/sentry/templates/sentry/index.html
@@ -40,6 +40,7 @@
                 </select>
                 </div>
             </form>
+            <a id="clear_feed" href="{% url sentry-ajax %}?op=clear" onclick="Sentry.stream.clear();return false;" class="realtime realtime-pause">Clear Feed</a>
             {% if has_realtime %}
                 <a id="sentry_realtime" class="realtime realtime-pause">Pause Feed</a>
             {% endif %}
diff --git a/sentry/templates/sentry/partial/_pager.html b/sentry/templates/sentry/partial/_pager.html
index 3cb9dd2bf3..7ba7eacd94 100644
--- a/sentry/templates/sentry/partial/_pager.html
+++ b/sentry/templates/sentry/partial/_pager.html
@@ -2,7 +2,7 @@
 
 {% if paginator.has_pages %}
     <div class="paging">
-        <div class="paging-meta">Page {{ paginator.page }}{% if paginator.num_pages %} of {{ paginator.num_pages }}{% endif %}</div>
+        
         {% if paginator.num_pages %}
             <ul class="paging-numeric">
                 <li class="paging-first">{% if not paginator.is_first %}<a href="?{{ query_string|escape }}&amp;p=1">{% trans "First" %}</a>{% else %}<span>{% trans "First" %}</span>{% endif %}</li>
@@ -21,5 +21,6 @@
                 <li class="paging-next">{% if paginator.has_next %}<a href="?{{ query_string|escape }}&amp;p={{ paginator.next_page }}">{% trans "Next Page" %}</a>{% else %}<span>{% trans "Next Page" %}"</span>{% endif %}</li>
             </ul>
         {% endif %}
+        <div class="paging-meta" style="float:left">Page {{ paginator.page }}{% if paginator.num_pages %} of {{ paginator.num_pages }}{% endif %}</div>
     </div>
 {% endif %}
\ No newline at end of file
diff --git a/sentry/web/views.py b/sentry/web/views.py
index bbb17480d7..2b09bb3055 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -197,15 +197,15 @@ def index(request):
 @login_required
 def ajax_handler(request):
     op = request.REQUEST.get('op')
-
-    if op == 'notification':
+    
+    def notification(request):
         return render_to_response('sentry/partial/_notification.html', request.GET)
-    elif op == 'poll':
+    
+    def poll(request):
         filters = []
         for filter_ in get_filters():
             filters.append(filter_(request))
 
-
         message_list = GroupedMessage.objects.all()
         
         sort = request.GET.get('sort')
@@ -238,8 +238,12 @@ def ajax_handler(request):
                 'count': m.times_seen,
                 'priority': p,
             }) for m, p in with_priority(message_list[0:15])]
-
-    elif op == 'resolve':
+        
+        response = HttpResponse(json.dumps(data))
+        response['Content-Type'] = 'application/json'
+        return response
+        
+    def resolve(request):
         gid = request.REQUEST.get('gid')
         if not gid:
             return HttpResponseForbidden()
@@ -262,13 +266,26 @@ def ajax_handler(request):
                 }).strip(),
                 'count': m.times_seen,
             }) for m in [group]]
+        
+        response = HttpResponse(json.dumps(data))
+        response['Content-Type'] = 'application/json'
+        return response
+    
+    def clear(request):
+        GroupedMessage.objects.all().update(status=1)
+        
+        if not request.is_ajax():
+            return HttpResponseRedirect(request.META.get('HTTP_REFERER') or reverse('sentry'))
+        
+        data = []
+        response = HttpResponse(json.dumps(data))
+        response['Content-Type'] = 'application/json'
+        return response
+        
+    if op in ['notification','poll','resolve', 'clear']:
+        return locals()[op](request)  
     else:
         return HttpResponseBadRequest()
-        
-    response = HttpResponse(json.dumps(data))
-    response['Content-Type'] = 'application/json'
-    return response
-
 @login_required
 def group(request, group_id):
     group = get_object_or_404(GroupedMessage, pk=group_id)
