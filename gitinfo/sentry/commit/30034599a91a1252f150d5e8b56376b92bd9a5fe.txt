commit 30034599a91a1252f150d5e8b56376b92bd9a5fe
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Mar 13 12:18:08 2018 -0700

    feat(ui): Refresh Inbound Filters UI (#7339)
    
    * add tests for project filters
    * use routes instead of local state for nav

diff --git a/src/sentry/static/sentry/app/data/forms/inboundFilters.jsx b/src/sentry/static/sentry/app/data/forms/inboundFilters.jsx
new file mode 100644
index 0000000000..2aa12e847f
--- /dev/null
+++ b/src/sentry/static/sentry/app/data/forms/inboundFilters.jsx
@@ -0,0 +1,75 @@
+import React from 'react';
+import {t, tct} from '../../locale';
+import ExternalLink from '../../components/externalLink';
+
+// Export route to make these forms searchable by label/help
+export const route = '/settings/organization/:orgId/project/:projectId/filters/';
+
+const newLineHelpText = t('Separate multiple entries with a newline.');
+const globHelpText = tct('Allows [link:glob pattern matching].', {
+  link: <ExternalLink href="https://en.wikipedia.org/wiki/Glob_(programming)" />,
+});
+const getOptionsData = data => ({
+  options: data,
+});
+
+const formGroups = [
+  {
+    // Form "section"/"panel"
+    title: t('Custom Filters'),
+    fields: [
+      {
+        name: 'filters:blacklisted_ips',
+        type: 'string',
+        multiline: true,
+
+        placeholder: 'e.g. 127.0.0.1 or 10.0.0.0/8',
+        label: t('IP Addresses'),
+        help: (
+          <React.Fragment>
+            {t('Filter events from these IP addresses. ')}
+            {newLineHelpText}
+          </React.Fragment>
+        ),
+        getData: getOptionsData,
+      },
+    ],
+  },
+];
+
+export default formGroups;
+
+// These require a feature flag
+export const customFilterFields = [
+  {
+    name: 'filters:releases',
+    type: 'string',
+    multiline: true,
+
+    placeholder: 'e.g. 1.* or [!3].[0-9].*',
+    label: t('Releases'),
+    help: (
+      <React.Fragment>
+        {t('Filter events from these releases. ')}
+        {newLineHelpText} {globHelpText}
+      </React.Fragment>
+    ),
+    getData: getOptionsData,
+  },
+
+  {
+    name: 'filters:error_messages',
+    type: 'string',
+    multiline: true,
+
+    placeholder: 'e.g. TypeError* or *: integer division or modulo by zero',
+    label: t('Error Message'),
+    help: (
+      <React.Fragment>
+        {t('Filter events by error messages. ')}
+        {newLineHelpText} {globHelpText}
+      </React.Fragment>
+    ),
+    getData: getOptionsData,
+  },
+];
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 200be8791a..e3beb233ef 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -69,7 +69,6 @@ import ProjectDebugSymbols from './views/projectDebugSymbols';
 import ProjectDetails from './views/projectDetails';
 import ProjectDocsContext from './views/projectInstall/docsContext';
 import ProjectEvents from './views/projectEvents';
-import ProjectFilters from './views/projectFilters';
 import ProjectGeneralSettings from './views/projectGeneralSettings';
 import ProjectGettingStarted from './views/projectInstall/gettingStarted';
 import ProjectInstallOverview from './views/projectInstall/overview';
@@ -328,11 +327,18 @@ const projectSettingsRoutes = (
         import(/*webpackChunkName: "ProjectProcessingIssues"*/ './views/settings/project/projectProcessingIssues')}
       component={errorHandler(LazyLoad)}
     />
+
     <Route
       path="filters/"
       name="Inbound Filters"
-      component={errorHandler(ProjectFilters)}
-    />
+      componentPromise={() =>
+        import(/* webpackChunkName: "ProjectFilters" */ './views/settings/project/projectFilters')}
+      component={errorHandler(LazyLoad)}
+    >
+      <IndexRedirect to="data-filters/" />
+      <Route path=":filterType/" />
+    </Route>
+
     <Route path="keys/" name="Client Keys" component={errorHandler(ProjectKeys)} />
     <Route
       path="keys/:keyId/"
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
deleted file mode 100644
index 85235260fb..0000000000
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ /dev/null
@@ -1,789 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-import ReactDOMServer from 'react-dom/server';
-import _ from 'lodash';
-import createReactClass from 'create-react-class';
-import moment from 'moment';
-
-import {FormState, TextareaField} from '../components/forms';
-import {intcomma} from '../utils';
-import {t, tn} from '../locale';
-import ApiMixin from '../mixins/apiMixin';
-import GroupTombstones from '../components/groupTombstones';
-import HookStore from '../stores/hookStore';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import ProjectState from '../mixins/projectState';
-import SettingsPageHeader from './settings/components/settingsPageHeader';
-import StackedBarChart from '../components/stackedBarChart';
-import Switch from '../components/switch';
-import TextBlock from './settings/components/text/textBlock';
-import marked from '../utils/marked';
-
-const FilterSwitch = function(props) {
-  return (
-    <Switch
-      size={props.size}
-      isActive={props.data.active}
-      toggle={function() {
-        props.onToggle(props.data, !props.data.active);
-      }}
-    />
-  );
-};
-
-FilterSwitch.propTypes = {
-  data: PropTypes.object.isRequired,
-  onToggle: PropTypes.func.isRequired,
-  size: PropTypes.string.isRequired,
-};
-
-class FilterRow extends React.Component {
-  static propTypes = {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-    onToggle: PropTypes.func.isRequired,
-    idx: PropTypes.number.isRequired,
-  };
-
-  state = {
-    loading: false,
-    error: false,
-  };
-
-  onToggleSubfilters = active => {
-    this.props.onToggle(this.props.data.subFilters, active);
-  };
-
-  render() {
-    let data = this.props.data;
-
-    return (
-      <div
-        style={
-          this.props.idx === 0
-            ? {}
-            : {borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}
-        }
-      >
-        <div className="row">
-          <div className="col-md-9">
-            <h5 style={{marginBottom: 10}}>{data.name}</h5>
-            {data.description && (
-              <small
-                className="help-block"
-                dangerouslySetInnerHTML={{
-                  __html: marked(data.description),
-                }}
-              />
-            )}
-          </div>
-          <div className="col-md-3 align-right" style={{paddingRight: '25px'}}>
-            <FilterSwitch {...this.props} size="lg" />
-          </div>
-        </div>
-      </div>
-    );
-  }
-}
-
-const LEGACY_BROWSER_SUBFILTERS = {
-  ie_pre_9: {
-    icon: 'internet-explorer',
-    helpText: 'Version 8 and lower',
-    title: 'Internet Explorer',
-  },
-  ie9: {
-    icon: 'internet-explorer',
-    helpText: 'Version 9',
-    title: 'Internet Explorer',
-  },
-  ie10: {
-    icon: 'internet-explorer',
-    helpText: 'Version 10',
-    title: 'Internet Explorer',
-  },
-  opera_pre_15: {
-    icon: 'opera',
-    helpText: 'Version 14 and lower',
-    title: 'Opera',
-  },
-  safari_pre_6: {
-    icon: 'safari',
-    helpText: 'Version 5 and lower',
-    title: 'Safari',
-  },
-  android_pre_4: {
-    icon: 'android',
-    helpText: 'Version 3 and lower',
-    title: 'Android',
-  },
-};
-
-const LEGACY_BROWSER_KEYS = Object.keys(LEGACY_BROWSER_SUBFILTERS);
-
-class LegacyBrowserFilterRow extends React.Component {
-  static propTypes = {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    data: PropTypes.object.isRequired,
-    onToggle: PropTypes.func.isRequired,
-    idx: PropTypes.number.isRequired,
-  };
-
-  constructor(props) {
-    super(props);
-    let initialSubfilters;
-    if (props.data.active === true) {
-      initialSubfilters = new Set(LEGACY_BROWSER_KEYS);
-    } else if (props.data.active === false) {
-      initialSubfilters = new Set();
-    } else {
-      initialSubfilters = new Set(props.data.active);
-    }
-
-    this.state = {
-      loading: false,
-      error: false,
-      subfilters: initialSubfilters,
-    };
-  }
-
-  onToggleSubfilters = subfilter => {
-    let {subfilters} = this.state;
-
-    if (subfilter === true) {
-      subfilters = new Set(LEGACY_BROWSER_KEYS);
-    } else if (subfilter === false) {
-      subfilters = new Set();
-    } else if (subfilters.has(subfilter)) {
-      subfilters.delete(subfilter);
-    } else {
-      subfilters.add(subfilter);
-    }
-
-    this.setState(
-      {
-        subfilters: new Set(subfilters),
-      },
-      () => {
-        this.props.onToggle(this.props.data, subfilters);
-      }
-    );
-  };
-
-  renderSubfilters = () => {
-    let entries = LEGACY_BROWSER_KEYS.map(key => {
-      let subfilter = LEGACY_BROWSER_SUBFILTERS[key];
-      return (
-        <div className="col-md-4" key={key}>
-          <div className="filter-grid-item">
-            <div className={'filter-grid-icon icon-' + subfilter.icon} />
-            <h5>{subfilter.title}</h5>
-            <p className="help-block">{subfilter.helpText}</p>
-            <Switch
-              isActive={this.state.subfilters.has(key)}
-              toggle={this.onToggleSubfilters.bind(this, key)}
-              size="lg"
-            />
-          </div>
-        </div>
-      );
-    });
-
-    // group entries into rows of 3
-    let rows = _.groupBy(entries, (entry, i) => Math.floor(i / 3));
-
-    return _.toArray(rows).map((row, i) => (
-      <div className="row m-b-1" key={i}>
-        {row}
-      </div>
-    ));
-  };
-
-  render() {
-    let data = this.props.data;
-
-    return (
-      <div
-        style={
-          this.props.idx === 0
-            ? {}
-            : {borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}
-        }
-      >
-        <div className="row">
-          <div className="col-md-9">
-            <h5 style={{marginBottom: 10}}>{data.name}</h5>
-            {data.description && (
-              <small
-                className="help-block"
-                dangerouslySetInnerHTML={{
-                  __html: marked(data.description),
-                }}
-              />
-            )}
-          </div>
-          <div className="col-md-3 align-right">
-            <div className="filter-grid-filter">
-              <strong>Filter:</strong>
-              <a onClick={this.onToggleSubfilters.bind(this, true)}>All</a>
-              <span className="divider" />
-              <a onClick={this.onToggleSubfilters.bind(this, false)}>None</a>
-            </div>
-          </div>
-        </div>
-
-        {this.renderSubfilters()}
-      </div>
-    );
-  }
-}
-
-const ProjectFiltersSettingsForm = createReactClass({
-  displayName: 'ProjectFiltersSettingsForm',
-
-  propTypes: {
-    orgId: PropTypes.string.isRequired,
-    projectId: PropTypes.string.isRequired,
-    initialData: PropTypes.object.isRequired,
-  },
-
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    let features = this.getProjectFeatures();
-    let formData = {};
-    Object.keys(this.props.initialData)
-      .filter(
-        key =>
-          // the project details endpoint can partially succeed and still return a 400
-          // if the org does not have the additional-data-filters feature enabled,
-          // so this prevents the form from sending an empty string by default
-          features.has('custom-inbound-filters') ||
-          (key !== 'filters:releases' && key !== 'filters:error_messages')
-      )
-      .forEach(key => {
-        formData[key] = this.props.initialData[key];
-      });
-    return {
-      hasChanged: false,
-      formData,
-      errors: {},
-      hooksDisabled: HookStore.get('project:custom-inbound-filters:disabled'),
-    };
-  },
-
-  onFieldChange(name, value) {
-    let formData = this.state.formData;
-    formData[name] = value;
-    this.setState({
-      formData: {...formData},
-      hasChanged: true,
-    });
-  },
-
-  onSubmit(e) {
-    e.preventDefault();
-    if (this.state.state === FormState.SAVING) {
-      return;
-    }
-    this.setState(
-      {
-        state: FormState.SAVING,
-      },
-      () => {
-        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-        let {orgId, projectId} = this.props;
-        this.api.request(`/projects/${orgId}/${projectId}/`, {
-          method: 'PUT',
-          data: {options: this.state.formData},
-          success: data => {
-            this.setState({
-              state: FormState.READY,
-              errors: {},
-              hasChanged: false,
-            });
-          },
-          error: error => {
-            this.setState({
-              state: FormState.ERROR,
-              errors: error.responseJSON,
-            });
-          },
-          complete: () => {
-            IndicatorStore.remove(loadingIndicator);
-          },
-        });
-      }
-    );
-  },
-
-  renderLinkToGlobWiki() {
-    return (
-      <span>
-        {t('Separate multiple entries with a newline. Allows ')}
-        <a href="https://en.wikipedia.org/wiki/Glob_(programming)">
-          {t('glob pattern matching.')}
-        </a>
-      </span>
-    );
-  },
-
-  renderAdditionalFilters() {
-    let errors = this.state.errors || {};
-    return (
-      <div>
-        <h5>{t('Filter events from these releases:')}</h5>
-        <TextareaField
-          key="release"
-          name="release"
-          help={this.renderLinkToGlobWiki()}
-          placeholder="e.g. 1.* or [!3].[0-9].*"
-          value={this.state.formData['filters:releases']}
-          error={errors['filters:releases']}
-          onChange={this.onFieldChange.bind(this, 'filters:releases')}
-        />
-        <h5>{t('Filter events by error message:')}</h5>
-        <TextareaField
-          key="errorMessage"
-          name="errorMessage"
-          help={this.renderLinkToGlobWiki()}
-          placeholder="e.g. TypeError* or *: integer division or modulo by zero"
-          value={this.state.formData['filters:error_messages']}
-          error={errors['filters:error_messages']}
-          onChange={this.onFieldChange.bind(this, 'filters:error_messages')}
-        />
-      </div>
-    );
-  },
-
-  renderDisabledFeature() {
-    let project = this.getProject();
-    let organization = this.getOrganization();
-    return this.state.hooksDisabled.map(hook => hook(organization, project));
-  },
-
-  render() {
-    let isSaving = this.state.state === FormState.SAVING;
-    let errors = this.state.errors || {};
-    let features = this.getProjectFeatures();
-
-    return (
-      <form onSubmit={this.onSubmit} className="form-stacked p-b-1">
-        {this.state.state === FormState.ERROR && (
-          <div className="alert alert-error alert-block">
-            {t(
-              'Unable to save your changes. Please ensure all fields are valid and try again.'
-            )}
-          </div>
-        )}
-        <fieldset>
-          <h5>{t('Filter events from these IP addresses:')}</h5>
-          <TextareaField
-            key="ip"
-            name="ip"
-            help={t('Separate multiple entries with a newline.')}
-            placeholder="e.g. 127.0.0.1 or 10.0.0.0/8"
-            value={this.state.formData['filters:blacklisted_ips']}
-            error={errors['filters:blacklisted_ips']}
-            onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')}
-          />
-          {features.has('custom-inbound-filters')
-            ? this.renderAdditionalFilters()
-            : this.renderDisabledFeature()}
-          <div className="pull-right">
-            <button
-              type="submit"
-              className="btn btn-sm btn-primary"
-              disabled={isSaving || !this.state.hasChanged}
-            >
-              {t('Save Changes')}
-            </button>
-          </div>
-        </fieldset>
-      </form>
-    );
-  },
-});
-
-const ProjectFilters = createReactClass({
-  displayName: 'ProjectFilters',
-  mixins: [ApiMixin, ProjectState],
-
-  getInitialState() {
-    let until = Math.floor(new Date().getTime() / 1000);
-    let since = until - 3600 * 24 * 30;
-
-    return {
-      expected: 3,
-      loading: true,
-      error: false,
-      statsError: false,
-      filterList: [],
-      querySince: since,
-      queryUntil: until,
-      rawStatsData: null,
-      formattedData: [],
-      projectOptions: {},
-      blankStats: true,
-      activeSection: 'data-filters',
-      tombstones: [],
-      tombstoneError: false,
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  getStatOpts() {
-    return {
-      'ip-address': 'IP Address',
-      'release-version': 'Release',
-      'error-message': 'Error Message',
-      'browser-extensions': 'Browser Extension',
-      'legacy-browsers': 'Legacy Browser',
-      localhost: 'Localhost',
-      'web-crawlers': 'Web Crawler',
-      'invalid-csp': 'Invalid CSP',
-      cors: 'CORS',
-      'discarded-hash': 'Discarded Issue',
-    };
-  },
-
-  formatData(rawData) {
-    return Object.keys(this.getStatOpts()).map(stat => {
-      return {
-        data: rawData[stat].map(([x, y]) => {
-          if (y > 0) {
-            this.setState({blankStats: false});
-          }
-
-          return {x, y};
-        }),
-        label: this.getStatOpts()[stat],
-        statName: stat,
-      };
-    });
-  },
-
-  getFilterStats() {
-    let statOptions = Object.keys(this.getStatOpts());
-    let {orgId, projectId} = this.props.params;
-    let statEndpoint = `/projects/${orgId}/${projectId}/stats/`;
-    let query = {
-      since: this.state.querySince,
-      until: this.state.queryUntil,
-      resolution: '1d',
-    };
-    $.when
-      .apply(
-        $,
-        // parallelize requests for each statistic
-        statOptions.map(stat => {
-          let deferred = $.Deferred();
-          this.api.request(statEndpoint, {
-            query: Object.assign({stat}, query),
-            success: deferred.resolve.bind(deferred),
-            error: deferred.reject.bind(deferred),
-          });
-          return deferred;
-        })
-      )
-      .done(
-        function(/* statOption1, statOption2, ... statOptionN */) {
-          let rawStatsData = {};
-          let expected = this.state.expected - 1;
-          // when there is a single request made, this is inexplicably called without being wrapped in an array
-          if (statOptions.length === 1) {
-            rawStatsData[statOptions[0]] = arguments[0];
-          } else {
-            for (let i = 0; i < statOptions.length; i++) {
-              rawStatsData[statOptions[i]] = arguments[i][0];
-            }
-          }
-
-          this.setState({
-            rawStatsData,
-            formattedData: this.formatData(rawStatsData),
-            expected,
-            loading: expected > 0,
-          });
-        }.bind(this)
-      )
-      .fail(
-        function() {
-          this.setState({error: true});
-        }.bind(this)
-      );
-  },
-
-  fetchData() {
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/filters/`, {
-      success: (data, textStatus, jqXHR) => {
-        this.setState({filterList: data});
-      },
-      error: () => {
-        this.setState({error: true});
-      },
-      complete: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-        });
-      },
-    });
-
-    this.getFilterStats();
-
-    this.api.request(`/projects/${orgId}/${projectId}/`, {
-      success: (data, textStatus, jqXHR) => {
-        this.setState({projectOptions: data.options});
-      },
-      error: () => {
-        this.setState({error: true});
-      },
-      complete: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0,
-        });
-      },
-    });
-
-    this.api.request(`/projects/${orgId}/${projectId}/tombstones/`, {
-      method: 'GET',
-      success: tombstones => {
-        this.setState({tombstones});
-      },
-      error: () => {
-        this.setState({
-          tombstoneError: true,
-        });
-      },
-    });
-  },
-
-  onToggleFilter(filter, active) {
-    if (this.state.loading) return;
-
-    let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-    let {orgId, projectId} = this.props.params;
-
-    let endpoint = `/projects/${orgId}/${projectId}/filters/${filter.id}/`; // ?id=a&id=b
-
-    let data;
-    if (typeof active === 'boolean') {
-      data = {active};
-    } else {
-      data = {subfilters: active};
-    }
-    this.api.request(endpoint, {
-      method: 'PUT',
-      data,
-      success: (d, textStatus, jqXHR) => {
-        let stateFilter = this.state.filterList.find(f => f.id === filter.id);
-        stateFilter.active = active;
-
-        this.setState({
-          filterList: [...this.state.filterList],
-        });
-        IndicatorStore.remove(loadingIndicator);
-      },
-      error: () => {
-        this.setState({
-          error: true,
-          loading: false,
-        });
-        IndicatorStore.remove(loadingIndicator);
-        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-      },
-    });
-  },
-
-  setProjectNavSection(section) {
-    this.setState({
-      activeSection: section,
-    });
-  },
-
-  renderBody() {
-    let body;
-
-    if (this.state.loading || !this.state.formattedData) body = this.renderLoading();
-    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
-    else body = this.renderResults();
-
-    return body;
-  },
-
-  renderLoading() {
-    return (
-      <div className="box">
-        <LoadingIndicator />
-      </div>
-    );
-  },
-
-  renderSection() {
-    let activeSection = this.state.activeSection;
-    let {orgId, projectId} = this.props.params;
-    if (activeSection == 'data-filters') {
-      return (
-        <div>
-          {this.state.filterList.map((filter, idx) => {
-            let props = {
-              key: filter.id,
-              data: filter,
-              orgId,
-              projectId,
-              onToggle: this.onToggleFilter,
-              idx,
-            };
-            return filter.id === 'legacy-browsers' ? (
-              <LegacyBrowserFilterRow {...props} />
-            ) : (
-              <FilterRow {...props} />
-            );
-          })}
-
-          <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
-            <ProjectFiltersSettingsForm
-              orgId={orgId}
-              projectId={projectId}
-              initialData={this.state.projectOptions}
-            />
-          </div>
-        </div>
-      );
-    } else {
-      return (
-        <GroupTombstones
-          orgId={orgId}
-          projectId={projectId}
-          tombstones={this.state.tombstones}
-          tombstoneError={this.state.tombstoneError}
-          fetchData={this.fetchData}
-        />
-      );
-    }
-  },
-
-  timeLabelAsDay(point) {
-    let timeMoment = moment(point.x * 1000);
-
-    return timeMoment.format('LL');
-  },
-
-  renderTooltip(point, pointIdx, chart) {
-    let timeLabel = this.timeLabelAsDay(point);
-    let totalY = 0;
-    for (let i = 0; i < point.y.length; i++) {
-      totalY += point.y[i];
-    }
-    let {formattedData} = this.state;
-
-    return ReactDOMServer.renderToStaticMarkup(
-      <div style={{width: '175px'}}>
-        <div className="time-label">
-          <span>{timeLabel}</span>
-        </div>
-        <div>
-          {intcomma(totalY)} {tn('total event', 'total events', totalY)}
-        </div>
-        {formattedData.map((dataPoint, i) => {
-          return (
-            point.y[i] > 0 && (
-              <dl className="legend" key={dataPoint.statName}>
-                <dt>
-                  <span className={`${dataPoint.statName} 'filter-color'`} />
-                </dt>
-                <dd style={{textAlign: 'left', position: 'absolute'}}>
-                  {dataPoint.label}{' '}
-                </dd>
-                <dd style={{textAlign: 'right', position: 'relative'}}>
-                  {point.y[i]} {tn('event', 'events', point.y[i])}
-                </dd>
-              </dl>
-            )
-          );
-        })}
-      </div>
-    );
-  },
-
-  renderResults() {
-    let navSection = this.state.activeSection;
-    let features = this.getProjectFeatures();
-
-    return (
-      <div>
-        <div className="box">
-          <div className="box-header">
-            <h5>{t('Errors filtered in the last 30 days (by day)')}</h5>
-          </div>
-          {!this.state.blankStats ? (
-            <StackedBarChart
-              series={this.state.formattedData}
-              label="events"
-              barClasses={Object.keys(this.getStatOpts())}
-              className="standard-barchart filtered-stats-barchart"
-              tooltip={this.renderTooltip}
-            />
-          ) : (
-            <div className="box-content">
-              <div className="blankslate p-y-2">
-                <h5>{t('Nothing filtered in the last 30 days.')}</h5>
-                <p className="m-b-0">
-                  {t(
-                    'Issues filtered as a result of your settings below will be shown here.'
-                  )}
-                </p>
-              </div>
-            </div>
-          )}
-        </div>
-        {features.has('discard-groups') && (
-          <ul
-            className="nav nav-tabs"
-            style={{borderBottom: '1px solid #ddd', paddingTop: '30px'}}
-          >
-            <li className={navSection === 'data-filters' ? 'active' : ''}>
-              <a onClick={() => this.setProjectNavSection('data-filters')}>
-                {t('Data Filters')}
-              </a>
-            </li>
-            <li className={navSection === 'discarded-groups' ? 'active' : ''}>
-              <a onClick={() => this.setProjectNavSection('discarded-groups')}>
-                {t('Discarded Issues')}
-              </a>
-            </li>
-          </ul>
-        )}
-        {this.renderSection()}
-      </div>
-    );
-  },
-
-  render() {
-    return (
-      <div>
-        <SettingsPageHeader title={t('Inbound Data Filters')} />
-        <TextBlock>
-          {t(
-            'Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.'
-          )}
-        </TextBlock>
-        {this.renderBody()}
-      </div>
-    );
-  },
-});
-
-export default ProjectFilters;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index a94043bf4f..0feaf8fac2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -27,10 +27,9 @@ export default class FieldFromConfig extends React.Component {
       ]),
       required: PropTypes.bool,
       multiline: PropTypes.bool,
-      label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
+      label: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
       placeholder: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
       help: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
-      extraHelp: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       showReturnButton: PropTypes.bool,
diff --git a/src/sentry/static/sentry/app/components/groupTombstones.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
similarity index 58%
rename from src/sentry/static/sentry/app/components/groupTombstones.jsx
rename to src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
index ce7561f17a..1ea1c5bfb5 100644
--- a/src/sentry/static/sentry/app/components/groupTombstones.jsx
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/groupTombstones.jsx
@@ -1,37 +1,25 @@
 import PropTypes from 'prop-types';
 import React from 'react';
-import createReactClass from 'create-react-class';
 import _ from 'lodash';
 
-import Avatar from '../components/avatar';
-import EventOrGroupHeader from '../components/eventOrGroupHeader';
-import IndicatorStore from '../stores/indicatorStore';
-import LoadingError from '../components/loadingError';
-import LinkWithConfirmation from '../components/linkWithConfirmation';
-import TooltipMixin from '../mixins/tooltip';
+import {addErrorMessage, addSuccessMessage} from '../../../../actionCreators/indicator';
+import {t} from '../../../../locale';
+import AsyncComponent from '../../../../components/asyncComponent';
+import Avatar from '../../../../components/avatar';
+import EventOrGroupHeader from '../../../../components/eventOrGroupHeader';
+import LinkWithConfirmation from '../../../../components/linkWithConfirmation';
+import Tooltip from '../../../../components/tooltip';
 
-import ApiMixin from '../mixins/apiMixin';
-
-import {t} from '../locale';
-
-const GroupTombstoneRow = createReactClass({
-  displayName: 'GroupTombstoneRow',
-
-  propTypes: {
+class GroupTombstoneRow extends React.Component {
+  static propTypes = {
     data: PropTypes.object.isRequired,
-    undiscard: PropTypes.func.isRequired,
+    onUndiscard: PropTypes.func.isRequired,
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-  },
-
-  mixins: [
-    TooltipMixin({
-      selector: '.tip',
-    }),
-  ],
+  };
 
   render() {
-    let {data, undiscard} = this.props,
+    let {data, onUndiscard} = this.props,
       actor = data.actor;
 
     return (
@@ -45,77 +33,69 @@ const GroupTombstoneRow = createReactClass({
         </div>
         <div className="col-md-1 event-actor">
           {actor && (
-            <span className="tip" title={t('Discarded by %s', actor.name || actor.email)}>
+            <Tooltip title={t('Discarded by %s', actor.name || actor.email)}>
               <Avatar user={data.actor} />
-            </span>
+            </Tooltip>
           )}
         </div>
         <div className="col-md-1 event-undiscard">
-          <span className="tip" title={t('Undiscard')}>
+          <Tooltip title={t('Undiscard')}>
             <LinkWithConfirmation
               className="group-remove btn btn-default btn-sm"
               message={t(
-                'Undiscarding this group means that ' +
+                'Undiscarding this issue means that ' +
                   'incoming events that match this will no longer be discarded. ' +
                   'New incoming events will count toward your event quota ' +
                   'and will display on your issues dashboard. ' +
                   'Are you sure you wish to continue?'
               )}
               onConfirm={() => {
-                undiscard(data.id);
+                onUndiscard(data.id);
               }}
             >
               <span className="icon-trash undiscard" />
             </LinkWithConfirmation>
-          </span>
+          </Tooltip>
         </div>
       </li>
     );
-  },
-});
+  }
+}
 
-const GroupTombstones = createReactClass({
-  displayName: 'GroupTombstones',
-
-  propTypes: {
+class GroupTombstones extends AsyncComponent {
+  static propTypes = {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
-    tombstones: PropTypes.array.isRequired,
-    tombstoneError: PropTypes.bool.isRequired,
-    fetchData: PropTypes.func.isRequired,
-  },
+  };
 
-  mixins: [ApiMixin],
+  getEndpoints() {
+    let {orgId, projectId} = this.props;
+    return [['tombstones', `/projects/${orgId}/${projectId}/tombstones/`]];
+  }
 
-  undiscard(tombstoneId) {
+  handleUndiscard = tombstoneId => {
     let {orgId, projectId} = this.props;
     let path = `/projects/${orgId}/${projectId}/tombstones/${tombstoneId}/`;
     this.api.request(path, {
       method: 'DELETE',
       success: data => {
-        IndicatorStore.add(
-          t('Events similar to these will no longer be filtered'),
-          'success',
-          {duration: 4000}
-        );
+        addSuccessMessage(t('Events similar to these will no longer be filtered'));
       },
       error: () => {
-        IndicatorStore.add(t('We were unable to undiscard this group'), 'error', {
-          duration: 4000,
-        });
+        addErrorMessage(t('We were unable to undiscard this issue'));
       },
     });
-    this.props.fetchData();
-  },
+    this.fetchData();
+  };
 
   renderEmpty() {
     return <div className="box empty">{t('You have no discarded issues')}</div>;
-  },
+  }
 
-  render() {
-    if (this.props.tombstoneError) return <LoadingError />;
+  renderBody() {
+    let {orgId, projectId} = this.props;
+    let {tombstones} = this.state;
 
-    let {tombstones, orgId, projectId} = this.props;
     return (
       <div>
         <div className="row" style={{paddingTop: 10}}>
@@ -129,7 +109,7 @@ const GroupTombstones = createReactClass({
                       data={data}
                       orgId={orgId}
                       projectId={projectId}
-                      undiscard={this.undiscard}
+                      onUndiscard={this.handleUndiscard}
                     />
                   );
                 })}
@@ -141,7 +121,7 @@ const GroupTombstones = createReactClass({
         </div>
       </div>
     );
-  },
-});
+  }
+}
 
 export default GroupTombstones;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
new file mode 100644
index 0000000000..bb3aaf949d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/index.jsx
@@ -0,0 +1,74 @@
+import {Link} from 'react-router';
+import React from 'react';
+
+import {t} from '../../../../locale';
+import GroupTombstones from './groupTombstones';
+import ProjectFiltersChart from './projectFiltersChart';
+import ProjectFiltersSettings from './projectFiltersSettings';
+import SentryTypes from '../../../../proptypes';
+import SettingsPageHeader from '../../components/settingsPageHeader';
+import TextBlock from '../../components/text/textBlock';
+import recreateRoute from '../../../../utils/recreateRoute';
+
+class ProjectFilters extends React.Component {
+  static contextTypes = {
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+  };
+
+  render() {
+    let {organization, project} = this.context;
+    let {orgId, projectId, filterType} = this.props.params;
+    if (!project) return null;
+
+    let features = new Set(project.features);
+
+    return (
+      <div>
+        <SettingsPageHeader title={t('Inbound Data Filters')} />
+        <TextBlock>
+          {t(
+            'Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.'
+          )}
+        </TextBlock>
+
+        <div>
+          <ProjectFiltersChart params={this.props.params} />
+
+          {features.has('discard-groups') && (
+            <ul
+              className="nav nav-tabs"
+              style={{borderBottom: '1px solid #ddd', paddingTop: '30px'}}
+            >
+              <li className={filterType === 'data-filters' ? 'active' : ''}>
+                <Link to={recreateRoute('data-filters/', {...this.props, stepBack: -1})}>
+                  {t('Data Filters')}
+                </Link>
+              </li>
+              <li className={filterType === 'discarded-groups' ? 'active' : ''}>
+                <Link
+                  to={recreateRoute('discarded-groups/', {...this.props, stepBack: -1})}
+                >
+                  {t('Discarded Issues')}
+                </Link>
+              </li>
+            </ul>
+          )}
+
+          {filterType == 'discarded-groups' ? (
+            <GroupTombstones orgId={orgId} projectId={projectId} />
+          ) : (
+            <ProjectFiltersSettings
+              project={project}
+              organization={organization}
+              params={this.props.params}
+              features={features}
+            />
+          )}
+        </div>
+      </div>
+    );
+  }
+}
+
+export default ProjectFilters;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
new file mode 100644
index 0000000000..b267c72ce1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersChart.jsx
@@ -0,0 +1,216 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import ReactDOMServer from 'react-dom/server';
+import createReactClass from 'create-react-class';
+import moment from 'moment';
+
+import {intcomma} from '../../../../utils';
+import {t, tn} from '../../../../locale';
+import ApiMixin from '../../../../mixins/apiMixin';
+import EmptyMessage from '../../../settings/components/emptyMessage';
+import LoadingError from '../../../../components/loadingError';
+import LoadingIndicator from '../../../../components/loadingIndicator';
+import Panel from '../../../settings/components/panel';
+import PanelBody from '../../../settings/components/panelBody';
+import PanelHeader from '../../../settings/components/panelHeader';
+import StackedBarChart from '../../../../components/stackedBarChart';
+import TextBlock from '../../../settings/components/text/textBlock';
+
+const noMarginBottom = {marginBottom: 0};
+
+const ProjectFiltersChart = createReactClass({
+  displayName: 'ProjectFiltersChart',
+  contextTypes: {
+    project: PropTypes.object,
+  },
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    let until = Math.floor(new Date().getTime() / 1000);
+    let since = until - 3600 * 24 * 30;
+
+    return {
+      loading: true,
+      error: false,
+      statsError: false,
+      querySince: since,
+      queryUntil: until,
+      rawStatsData: null,
+      formattedData: [],
+      blankStats: true,
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  getStatOpts() {
+    return {
+      'ip-address': 'IP Address',
+      'release-version': 'Release',
+      'error-message': 'Error Message',
+      'browser-extensions': 'Browser Extension',
+      'legacy-browsers': 'Legacy Browser',
+      localhost: 'Localhost',
+      'web-crawlers': 'Web Crawler',
+      'invalid-csp': 'Invalid CSP',
+      cors: 'CORS',
+      'discarded-hash': 'Discarded Issue',
+    };
+  },
+
+  formatData(rawData) {
+    return Object.keys(this.getStatOpts()).map(stat => {
+      return {
+        data: rawData[stat].map(([x, y]) => {
+          if (y > 0) {
+            this.setState({blankStats: false});
+          }
+
+          return {x, y};
+        }),
+        label: this.getStatOpts()[stat],
+        statName: stat,
+      };
+    });
+  },
+
+  getFilterStats() {
+    let statOptions = Object.keys(this.getStatOpts());
+    let {orgId, projectId} = this.props.params;
+    let statEndpoint = `/projects/${orgId}/${projectId}/stats/`;
+    let query = {
+      since: this.state.querySince,
+      until: this.state.queryUntil,
+      resolution: '1d',
+    };
+    $.when
+      .apply(
+        $,
+        // parallelize requests for each statistic
+        statOptions.map(stat => {
+          let deferred = $.Deferred();
+          this.api.request(statEndpoint, {
+            query: Object.assign({stat}, query),
+            success: deferred.resolve.bind(deferred),
+            error: deferred.reject.bind(deferred),
+          });
+          return deferred;
+        })
+      )
+      .done(
+        function(/* statOption1, statOption2, ... statOptionN */) {
+          let rawStatsData = {};
+          // when there is a single request made, this is inexplicably called without being wrapped in an array
+          if (statOptions.length === 1) {
+            rawStatsData[statOptions[0]] = arguments[0];
+          } else {
+            for (let i = 0; i < statOptions.length; i++) {
+              rawStatsData[statOptions[i]] = arguments[i][0];
+            }
+          }
+
+          this.setState({
+            rawStatsData,
+            formattedData: this.formatData(rawStatsData),
+            error: false,
+            loading: false,
+          });
+        }.bind(this)
+      )
+      .fail(
+        function() {
+          this.setState({error: true});
+        }.bind(this)
+      );
+  },
+
+  fetchData() {
+    this.getFilterStats();
+  },
+
+  timeLabelAsDay(point) {
+    let timeMoment = moment(point.x * 1000);
+
+    return timeMoment.format('LL');
+  },
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = this.timeLabelAsDay(point);
+    let totalY = 0;
+    for (let i = 0; i < point.y.length; i++) {
+      totalY += point.y[i];
+    }
+    let {formattedData} = this.state;
+
+    return ReactDOMServer.renderToStaticMarkup(
+      <div style={{width: '175px'}}>
+        <div className="time-label">
+          <span>{timeLabel}</span>
+        </div>
+        <div>
+          {intcomma(totalY)} {tn('total event', 'total events', totalY)}
+        </div>
+        {formattedData.map((dataPoint, i) => {
+          return (
+            point.y[i] > 0 && (
+              <dl className="legend" key={dataPoint.statName}>
+                <dt>
+                  <span className={`${dataPoint.statName} 'filter-color'`} />
+                </dt>
+                <dd style={{textAlign: 'left', position: 'absolute'}}>
+                  {dataPoint.label}{' '}
+                </dd>
+                <dd style={{textAlign: 'right', position: 'relative'}}>
+                  {point.y[i]} {tn('event', 'events', point.y[i])}
+                </dd>
+              </dl>
+            )
+          );
+        })}
+      </div>
+    );
+  },
+
+  render() {
+    let {loading, error} = this.state;
+    let isLoading = loading || !this.state.formattedData;
+    let hasError = !isLoading && error;
+    let hasLoaded = !isLoading && !error;
+
+    return (
+      <Panel>
+        <PanelHeader>{t('Errors filtered in the last 30 days (by day)')}</PanelHeader>
+
+        <PanelBody>
+          {isLoading && <LoadingIndicator />}
+          {hasError && <LoadingError onRetry={this.fetchData} />}
+          {hasLoaded &&
+            !this.state.blankStats && (
+              <StackedBarChart
+                series={this.state.formattedData}
+                label="events"
+                barClasses={Object.keys(this.getStatOpts())}
+                className="standard-barchart filtered-stats-barchart"
+                tooltip={this.renderTooltip}
+              />
+            )}
+          {hasLoaded &&
+            this.state.blankStats && (
+              <EmptyMessage css={{flexDirection: 'column', alignItems: 'center'}}>
+                <h3 css={noMarginBottom}>{t('Nothing filtered in the last 30 days.')}</h3>
+                <TextBlock css={{fontSize: '0.9em', ...noMarginBottom}}>
+                  {t(
+                    'Issues filtered as a result of your settings below will be shown here.'
+                  )}
+                </TextBlock>
+              </EmptyMessage>
+            )}
+        </PanelBody>
+      </Panel>
+    );
+  },
+});
+
+export default ProjectFiltersChart;
diff --git a/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
new file mode 100644
index 0000000000..348d713987
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/project/projectFilters/projectFiltersSettings.jsx
@@ -0,0 +1,343 @@
+import {Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t} from '../../../../locale';
+import AsyncComponent from '../../../../components/asyncComponent';
+import FieldFromConfig from '../../../settings/components/forms/fieldFromConfig';
+import Form from '../../../settings/components/forms/form';
+import FormField from '../../../settings/components/forms/formField';
+import HookStore from '../../../../stores/hookStore';
+import JsonForm from '../../../settings/components/forms/jsonForm';
+import Panel from '../../../settings/components/panel';
+import PanelBody from '../../../settings/components/panelBody';
+import PanelHeader from '../../../settings/components/panelHeader';
+import PanelItem from '../../../settings/components/panelItem';
+import SentryTypes from '../../../../proptypes';
+import Switch from '../../../../components/switch';
+import filterGroups, {customFilterFields} from '../../../../data/forms/inboundFilters';
+
+const LEGACY_BROWSER_SUBFILTERS = {
+  ie_pre_9: {
+    icon: 'internet-explorer',
+    helpText: 'Version 8 and lower',
+    title: 'Internet Explorer',
+  },
+  ie9: {
+    icon: 'internet-explorer',
+    helpText: 'Version 9',
+    title: 'Internet Explorer',
+  },
+  ie10: {
+    icon: 'internet-explorer',
+    helpText: 'Version 10',
+    title: 'Internet Explorer',
+  },
+  opera_pre_15: {
+    icon: 'opera',
+    helpText: 'Version 14 and lower',
+    title: 'Opera',
+  },
+  safari_pre_6: {
+    icon: 'safari',
+    helpText: 'Version 5 and lower',
+    title: 'Safari',
+  },
+  android_pre_4: {
+    icon: 'android',
+    helpText: 'Version 3 and lower',
+    title: 'Android',
+  },
+};
+
+const LEGACY_BROWSER_KEYS = Object.keys(LEGACY_BROWSER_SUBFILTERS);
+
+class LegacyBrowserFilterRow extends React.Component {
+  static propTypes = {
+    data: PropTypes.object.isRequired,
+    onToggle: PropTypes.func.isRequired,
+  };
+
+  constructor(props) {
+    super(props);
+    let initialSubfilters;
+    if (props.data.active === true) {
+      initialSubfilters = new Set(LEGACY_BROWSER_KEYS);
+    } else if (props.data.active === false) {
+      initialSubfilters = new Set();
+    } else {
+      initialSubfilters = new Set(props.data.active);
+    }
+
+    this.state = {
+      loading: false,
+      error: false,
+      subfilters: initialSubfilters,
+    };
+  }
+
+  handleToggleSubfilters = (subfilter, e) => {
+    let {subfilters} = this.state;
+
+    if (subfilter === true) {
+      subfilters = new Set(LEGACY_BROWSER_KEYS);
+    } else if (subfilter === false) {
+      subfilters = new Set();
+    } else if (subfilters.has(subfilter)) {
+      subfilters.delete(subfilter);
+    } else {
+      subfilters.add(subfilter);
+    }
+
+    this.setState(
+      {
+        subfilters: new Set(subfilters),
+      },
+      () => {
+        this.props.onToggle(this.props.data, subfilters, e);
+      }
+    );
+  };
+
+  render() {
+    return (
+      <div>
+        <BulkFilter>
+          <BulkFilterLabel>{t('Filter')}:</BulkFilterLabel>
+          <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, true)}>
+            {t('All')}
+          </BulkFilterItem>
+          <BulkFilterItem onClick={this.handleToggleSubfilters.bind(this, false)}>
+            {t('None')}
+          </BulkFilterItem>
+        </BulkFilter>
+
+        <FilterGrid>
+          {LEGACY_BROWSER_KEYS.map(key => {
+            let subfilter = LEGACY_BROWSER_SUBFILTERS[key];
+            return (
+              <FilterGridItemWrapper key={key}>
+                <FilterGridItem>
+                  <Flex align="center" flex="1">
+                    <FilterGridIcon className={`icon-${subfilter.icon}`} />
+                    <div>
+                      <FilterTitle>{subfilter.title}</FilterTitle>
+                      <FilterDescription>{subfilter.helpText}</FilterDescription>
+                    </div>
+                  </Flex>
+
+                  <Switch
+                    isActive={this.state.subfilters.has(key)}
+                    css={{flexShrink: 0, marginLeft: 6}}
+                    toggle={this.handleToggleSubfilters.bind(this, key)}
+                    size="lg"
+                  />
+                </FilterGridItem>
+              </FilterGridItemWrapper>
+            );
+          })}
+        </FilterGrid>
+      </div>
+    );
+  }
+}
+
+class ProjectFiltersSettings extends AsyncComponent {
+  static propTypes = {
+    project: SentryTypes.Project,
+    organization: SentryTypes.Organization,
+    params: PropTypes.object,
+    features: PropTypes.object,
+  };
+
+  getDefaultState() {
+    return {
+      hooksDisabled: HookStore.get('project:custom-inbound-filters:disabled'),
+    };
+  }
+  getEndpoints() {
+    let {orgId, projectId} = this.props.params;
+    return [
+      ['filterList', `/projects/${orgId}/${projectId}/filters/`],
+      ['project', `/projects/${orgId}/${projectId}/`],
+    ];
+  }
+
+  handleLegacyChange = (onChange, onBlur, filter, subfilters, e) => {
+    onChange(subfilters, e);
+    onBlur(subfilters, e);
+  };
+
+  renderDisabledFeature(fields) {
+    let {project, organization} = this.props;
+    return this.state.hooksDisabled.map(hook =>
+      hook(organization, project, null, fields)
+    );
+  }
+
+  renderBody() {
+    let {features, params} = this.props;
+    let {orgId, projectId} = params;
+    let {project} = this.state;
+
+    if (!project) return null;
+    let projectEndpoint = `/projects/${orgId}/${projectId}/`;
+    let filtersEndpoint = `${projectEndpoint}filters/`;
+
+    return (
+      <React.Fragment>
+        <Panel>
+          <PanelHeader>{t('Filters')}</PanelHeader>
+          <PanelBody>
+            {this.state.filterList.map((filter, idx) => {
+              let fieldProps = {
+                name: filter.id,
+                label: filter.name,
+                help: filter.description,
+              };
+
+              // Note by default, forms generate data in the format of:
+              // { [fieldName]: [value] }
+              // Endpoints for these filters expect data to be:
+              // { 'active': [value] }
+              return (
+                <PanelItem key={filter.id} p={0}>
+                  <NestedForm
+                    apiMethod="PUT"
+                    apiEndpoint={`${filtersEndpoint}${filter.id}/`}
+                    initialData={{[filter.id]: filter.active}}
+                    saveOnBlur
+                  >
+                    {filter.id !== 'legacy-browsers' ? (
+                      <FieldFromConfig
+                        key={filter.id}
+                        getData={data => ({active: data[filter.id]})}
+                        field={{
+                          type: 'boolean',
+                          ...fieldProps,
+                        }}
+                      />
+                    ) : (
+                      <FormField
+                        inline={false}
+                        {...fieldProps}
+                        getData={data => ({subfilters: data[filter.id]})}
+                      >
+                        {({onChange, onBlur}) => (
+                          <LegacyBrowserFilterRow
+                            key={filter.id}
+                            data={filter}
+                            onToggle={this.handleLegacyChange.bind(
+                              this,
+                              onChange,
+                              onBlur
+                            )}
+                          />
+                        )}
+                      </FormField>
+                    )}
+                  </NestedForm>
+                </PanelItem>
+              );
+            })}
+          </PanelBody>
+        </Panel>
+
+        <Form
+          apiMethod="PUT"
+          apiEndpoint={projectEndpoint}
+          initialData={this.state.project.options}
+          saveOnBlur
+        >
+          <JsonForm
+            features={features}
+            forms={filterGroups}
+            renderFooter={() => {
+              // Render additional fields that are behind a feature flag
+              let customFilters = customFilterFields.map(field => (
+                <FieldFromConfig key={field.name} field={field} />
+              ));
+
+              return features.has('custom-inbound-filters')
+                ? customFilters
+                : this.renderDisabledFeature(customFilters);
+            }}
+          />
+        </Form>
+      </React.Fragment>
+    );
+  }
+}
+
+export default ProjectFiltersSettings;
+
+const NestedForm = styled(Form)`
+  flex: 1;
+`;
+
+const FilterGrid = styled.div`
+  display: flex;
+  flex-wrap: wrap;
+`;
+
+const FilterGridItem = styled.div`
+  display: flex;
+  align-items: center;
+  background: ${p => p.theme.whiteDark};
+  border-radius: 3px;
+  flex: 1;
+  padding: 12px;
+  height: 100%;
+`;
+
+// We want this wrapper to maining 30% width
+const FilterGridItemWrapper = styled.div`
+  padding: 12px;
+  flex: 1;
+`;
+
+const FilterGridIcon = styled.div`
+  width: 38px;
+  height: 38px;
+  background-repeat: no-repeat;
+  background-position: center;
+  background-size: 38px 38px;
+  margin-right: 6px;
+  flex-shrink: 0;
+`;
+
+const FilterTitle = styled.div`
+  font-size: 14px;
+  font-weight: bold;
+  line-height: 1;
+  white-space: nowrap;
+`;
+
+const FilterDescription = styled.div`
+  color: ${p => p.theme.gray3};
+  font-size: 12px;
+  line-height: 1;
+  white-space: nowrap;
+`;
+
+const BulkFilter = styled.div`
+  text-align: right;
+  padding: 0 12px;
+`;
+
+const BulkFilterLabel = styled.span`
+  font-weight: bold;
+  margin-right: 6px;
+`;
+
+const BulkFilterItem = styled.a`
+  border-right: 1px solid #f1f2f3;
+  margin-right: 6px;
+  padding-right: 6px;
+
+  &:last-child {
+    border-right: none;
+    margin-right: 0;
+  }
+`;
diff --git a/src/sentry/static/sentry/less/shared-components.less b/src/sentry/static/sentry/less/shared-components.less
index 5111b9199d..608d4320ea 100644
--- a/src/sentry/static/sentry/less/shared-components.less
+++ b/src/sentry/static/sentry/less/shared-components.less
@@ -959,55 +959,6 @@ table.integrations {
 * Filter Grid
 * ============================================================================
 */
-
-.filter-grid-item {
-  background: #f7f8f9;
-  border-radius: 3px;
-  position: relative;
-  padding: 10px 65px 6px 58px;
-
-  h5 {
-    font-size: 14px;
-    margin: 0 0 2px;
-  }
-
-  p {
-    margin: 0;
-    font-size: 13px;
-  }
-
-  .switch {
-    background: #fff;
-    position: absolute;
-    top: 17px;
-    right: 12px;
-  }
-}
-
-.filter-grid-icon {
-  position: absolute;
-  top: 10px;
-  left: 10px;
-  width: 38px;
-  height: 38px;
-  background-repeat: no-repeat;
-  background-position: center;
-  background-size: 38px 38px;
-}
-
-.filter-grid-filter {
-  strong {
-    margin-right: 5px;
-  }
-
-  .divider {
-    display: inline-block;
-    height: 16px;
-    border-left: 1px solid #f1f2f3;
-    margin: 0 5px;
-  }
-}
-
 .inbound-filters-stats {
   .bar-chart figure a {
     height: 50px;
diff --git a/tests/js/setup.js b/tests/js/setup.js
index 0c8cfab69d..28ac30fed2 100644
--- a/tests/js/setup.js
+++ b/tests/js/setup.js
@@ -53,12 +53,14 @@ window.TestStubs = {
       location: TestStubs.location(),
       router: TestStubs.router(),
       organization: TestStubs.Organization(),
+      project: TestStubs.Project(),
       ...context,
     },
     childContextTypes: {
       router: PropTypes.object,
       location: PropTypes.object,
       organization: PropTypes.object,
+      project: PropTypes.object,
       ...childContextTypes,
     },
   }),
@@ -608,6 +610,7 @@ window.TestStubs = {
       securityToken: 'security-token',
       securityTokenHeader: 'x-security-header',
       verifySSL: true,
+      features: [],
       ...params,
     };
   },
@@ -637,6 +640,37 @@ window.TestStubs = {
     };
   },
 
+  ProjectFilters: params => [
+    {
+      active: true,
+      id: 'browser-extensions',
+      name: 'Filter out errors known to be caused by browser extensions',
+      description:
+        'Certain browser extensions will inject inline scripts and are known to cause errors.',
+    },
+    {
+      active: false,
+      id: 'localhost',
+      name: 'Filter out events coming from localhost',
+      description:
+        'This applies to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.',
+    },
+    {
+      active: ['ie_pre_9', 'ie9'],
+      id: 'legacy-browsers',
+      name: 'Filter out known errors from legacy browsers',
+      description:
+        'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.',
+    },
+    {
+      active: false,
+      id: 'web-crawlers',
+      name: 'Filter out known web crawlers',
+      description:
+        'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.',
+    },
+  ],
+
   Repository: params => {
     return {
       id: '4',
@@ -713,6 +747,64 @@ window.TestStubs = {
     };
   },
 
+  Tombstones: params => [
+    {
+      culprit: 'poll(../../sentry/scripts/views.js)',
+      level: 'error',
+      actor: {
+        username: 'billy@sentry.io',
+        emails: [
+          {is_verified: false, id: '28', email: 'test@test.com'},
+          {is_verified: false, id: '17', email: 'billy36@sentry.io'},
+          {is_verified: false, id: '11', email: 'awerawer@awe.com'},
+          {is_verified: true, id: '10', email: 'billy2@sentry.io'},
+          {is_verified: true, id: '5', email: 'billy@sentry.io'},
+        ],
+        isManaged: false,
+        lastActive: '2018-02-21T01:27:52.255Z',
+        identities: [
+          {
+            name: '79684',
+            dateVerified: '2018-02-21T00:52:40.149Z',
+            provider: {id: 'github', name: 'GitHub'},
+            dateSynced: '2018-02-21T00:52:40.149Z',
+            organization: {slug: 'default', name: 'default'},
+            id: '1',
+          },
+        ],
+        id: '1',
+        isActive: true,
+        has2fa: true,
+        name: 'billy vong',
+        avatarUrl:
+          'https://secure.gravatar.com/avatar/7b544e8eb9d08ed777be5aa82121155a?s=32&d=mm',
+        dateJoined: '2018-01-10T00:19:59Z',
+        options: {
+          timezone: 'America/Los_Angeles',
+          seenReleaseBroadcast: true,
+          stacktraceOrder: -1,
+          language: 'en',
+          clock24Hours: false,
+        },
+        avatar: {
+          avatarUuid: '483ed7478a2248d59211f538c2997e0b',
+          avatarType: 'letter_avatar',
+        },
+        lastLogin: '2018-02-14T07:09:37.536Z',
+        permissions: [],
+        email: 'billy@sentry.io',
+      },
+      message:
+        "This is an example JavaScript exception TypeError Object [object Object] has no method 'updateFrom' poll(../../sentry/scripts/views.js)",
+      type: 'error',
+      id: '1',
+      metadata: {
+        type: 'TypeError',
+        value: "Object [object Object] has no method 'updateFrom'",
+      },
+    },
+  ],
+
   UserDetails: params => ({
     username: 'billyfirefoxusername@test.com',
     emails: [
diff --git a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
index 1f50863f5c..575edfa005 100644
--- a/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationProjects.spec.jsx.snap
@@ -150,6 +150,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
           "dataScrubberDefaults": false,
           "digestsMaxDelay": 60,
           "digestsMinDelay": 5,
+          "features": Array [],
           "id": "2",
           "name": "Project Name",
           "resolveAge": 48,
@@ -422,6 +423,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                       "dataScrubberDefaults": false,
                                       "digestsMaxDelay": 60,
                                       "digestsMinDelay": 5,
+                                      "features": Array [],
                                       "id": "2",
                                       "name": "Project Name",
                                       "resolveAge": 48,
@@ -518,6 +520,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                 "dataScrubberDefaults": false,
                                                 "digestsMaxDelay": 60,
                                                 "digestsMinDelay": 5,
+                                                "features": Array [],
                                                 "id": "2",
                                                 "name": "Project Name",
                                                 "resolveAge": 48,
@@ -577,6 +580,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                   "dataScrubberDefaults": false,
                                                   "digestsMaxDelay": 60,
                                                   "digestsMinDelay": 5,
+                                                  "features": Array [],
                                                   "id": "2",
                                                   "name": "Project Name",
                                                   "resolveAge": 48,
@@ -636,6 +640,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                                     "dataScrubberDefaults": false,
                                                     "digestsMaxDelay": 60,
                                                     "digestsMinDelay": 5,
+                                                    "features": Array [],
                                                     "id": "2",
                                                     "name": "Project Name",
                                                     "resolveAge": 48,
@@ -698,6 +703,7 @@ exports[`OrganizationProjectsView render() Should render the projects in the sto
                                       "dataScrubberDefaults": false,
                                       "digestsMaxDelay": 60,
                                       "digestsMinDelay": 5,
+                                      "features": Array [],
                                       "id": "2",
                                       "name": "Project Name",
                                       "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 1651bfe54f..66bf6925df 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -381,6 +381,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                 "dataScrubberDefaults": false,
                                 "digestsMaxDelay": 60,
                                 "digestsMinDelay": 5,
+                                "features": Array [],
                                 "id": "2",
                                 "name": "Project Name",
                                 "resolveAge": 48,
@@ -477,6 +478,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                           "dataScrubberDefaults": false,
                                           "digestsMaxDelay": 60,
                                           "digestsMinDelay": 5,
+                                          "features": Array [],
                                           "id": "2",
                                           "name": "Project Name",
                                           "resolveAge": 48,
@@ -536,6 +538,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                             "dataScrubberDefaults": false,
                                             "digestsMaxDelay": 60,
                                             "digestsMinDelay": 5,
+                                            "features": Array [],
                                             "id": "2",
                                             "name": "Project Name",
                                             "resolveAge": 48,
@@ -595,6 +598,7 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                                               "dataScrubberDefaults": false,
                                               "digestsMaxDelay": 60,
                                               "digestsMinDelay": 5,
+                                              "features": Array [],
                                               "id": "2",
                                               "name": "Project Name",
                                               "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
index af6c963ac0..c36d256827 100644
--- a/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/ownershipInput.spec.jsx.snap
@@ -57,6 +57,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
       "dataScrubberDefaults": false,
       "digestsMaxDelay": 60,
       "digestsMinDelay": 5,
+      "features": Array [],
       "id": "2",
       "name": "Project Name",
       "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
index f8cb52d367..071a48c4ed 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertRuleDetails.spec.jsx.snap
@@ -134,6 +134,7 @@ exports[`ProjectAlertRuleDetails Edit alert rule renders 1`] = `
             "dataScrubberDefaults": false,
             "digestsMaxDelay": 60,
             "digestsMinDelay": 5,
+            "features": Array [],
             "id": "2",
             "name": "Project Name",
             "resolveAge": 48,
@@ -822,6 +823,7 @@ exports[`ProjectAlertRuleDetails New alert rule renders 1`] = `
             "dataScrubberDefaults": false,
             "digestsMaxDelay": 60,
             "digestsMinDelay": 5,
+            "features": Array [],
             "id": "2",
             "name": "Project Name",
             "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
index 24bad76a9b..47bbef5305 100644
--- a/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectAlertSettings.spec.jsx.snap
@@ -158,6 +158,7 @@ exports[`ProjectAlertSettings render() renders 1`] = `
           "dataScrubberDefaults": false,
           "digestsMaxDelay": 60,
           "digestsMinDelay": 5,
+          "features": Array [],
           "id": "2",
           "name": "Project Name",
           "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
index e9220d76f9..9df7c5734e 100644
--- a/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectOwnership.spec.jsx.snap
@@ -83,6 +83,7 @@ exports[`ProjectTeamsSettings render() renders 1`] = `
               "dataScrubberDefaults": false,
               "digestsMaxDelay": 60,
               "digestsMinDelay": 5,
+              "features": Array [],
               "id": "2",
               "name": "Project Name",
               "resolveAge": 48,
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index edb7d8d05b..0b0ec93c8c 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -177,6 +177,7 @@ exports[`ProjectPluginDetails renders 1`] = `
       "dataScrubberDefaults": false,
       "digestsMaxDelay": 60,
       "digestsMinDelay": 5,
+      "features": Array [],
       "id": "2",
       "name": "Project Name",
       "resolveAge": 48,
@@ -256,6 +257,7 @@ exports[`ProjectPluginDetails renders 1`] = `
         "dataScrubberDefaults": false,
         "digestsMaxDelay": 60,
         "digestsMinDelay": 5,
+        "features": Array [],
         "id": "2",
         "name": "Project Name",
         "resolveAge": 48,
@@ -471,6 +473,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                     "dataScrubberDefaults": false,
                     "digestsMaxDelay": 60,
                     "digestsMinDelay": 5,
+                    "features": Array [],
                     "id": "2",
                     "name": "Project Name",
                     "resolveAge": 48,
@@ -675,6 +678,7 @@ exports[`ProjectPluginDetails renders 1`] = `
                                   "dataScrubberDefaults": false,
                                   "digestsMaxDelay": 60,
                                   "digestsMinDelay": 5,
+                                  "features": Array [],
                                   "id": "2",
                                   "name": "Project Name",
                                   "resolveAge": 48,
diff --git a/tests/js/spec/views/projectFilters.spec.jsx b/tests/js/spec/views/projectFilters.spec.jsx
new file mode 100644
index 0000000000..8e09a39fb2
--- /dev/null
+++ b/tests/js/spec/views/projectFilters.spec.jsx
@@ -0,0 +1,258 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import ProjectFilters from 'app/views/settings/project/projectFilters';
+
+describe('ProjectFilters', function() {
+  let org = TestStubs.Organization();
+  let project = TestStubs.Project({options: {}});
+  let PROJECT_URL = `/projects/${org.slug}/${project.slug}/`;
+  let wrapper;
+
+  const getFilterEndpoint = filter => `${PROJECT_URL}filters/${filter}/`;
+
+  const createFilterMock = filter => {
+    return MockApiClient.addMockResponse({
+      url: getFilterEndpoint(filter),
+      method: 'PUT',
+    });
+  };
+
+  const creator = custom => {
+    if (custom) {
+      wrapper = custom();
+    } else {
+      wrapper = mount(
+        <ProjectFilters
+          params={{projectId: project.slug, orgId: org.slug}}
+          location={{}}
+        />,
+        TestStubs.routerContext()
+      );
+    }
+
+    return wrapper;
+  };
+
+  beforeEach(function() {
+    MockApiClient.clearMockResponses();
+    MockApiClient.addMockResponse({
+      url: PROJECT_URL,
+      body: project,
+    });
+
+    MockApiClient.addMockResponse({
+      url: `${PROJECT_URL}stats/`,
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: `${PROJECT_URL}filters/`,
+      body: TestStubs.ProjectFilters(),
+    });
+
+    MockApiClient.addMockResponse({
+      url: `${PROJECT_URL}tombstones/`,
+      body: TestStubs.Tombstones(),
+    });
+
+    creator();
+  });
+
+  it('has browser extensions enabled initially', function() {
+    let filter = 'browser-extensions';
+    let mock = createFilterMock(filter);
+    const Switch = wrapper.find(`BooleanField[name="${filter}"] Switch`);
+
+    expect(Switch.prop('isActive')).toBe(true);
+
+    // Toggle filter on
+    Switch.simulate('click');
+    expect(mock).toHaveBeenCalledWith(
+      getFilterEndpoint(filter),
+      expect.objectContaining({
+        method: 'PUT',
+        data: {
+          active: false,
+        },
+      })
+    );
+  });
+
+  it('can toggle filters: localhost, web crawlers', function() {
+    ['localhost', 'web-crawlers'].map((filter, i) => {
+      let mock = createFilterMock(filter);
+      const Switch = wrapper.find(`BooleanField[name="${filter}"] Switch`);
+
+      // Toggle filter on
+      Switch.simulate('click');
+      expect(mock).toHaveBeenCalledWith(
+        getFilterEndpoint(filter),
+        expect.objectContaining({
+          method: 'PUT',
+          data: {
+            active: true,
+          },
+        })
+      );
+    });
+  });
+
+  it('has correct legacy browsers selected', function() {
+    expect(
+      wrapper
+        .find('LegacyBrowserFilterRow Switch')
+        .at(0)
+        .prop('isActive')
+    ).toBe(true);
+    expect(
+      wrapper
+        .find('LegacyBrowserFilterRow Switch')
+        .at(1)
+        .prop('isActive')
+    ).toBe(true);
+    expect(
+      wrapper
+        .find('LegacyBrowserFilterRow Switch')
+        .at(2)
+        .prop('isActive')
+    ).toBe(false);
+  });
+
+  it('can toggle legacy browser', function() {
+    let filter = 'legacy-browsers';
+    let mock = createFilterMock(filter);
+
+    // default stubs ie_pre_9 and ie9 selected (first 2 switches)
+    const Switch = wrapper.find('LegacyBrowserFilterRow Switch').at(3);
+
+    // Toggle filter on
+    Switch.simulate('click');
+    expect(mock.mock.calls[0][0]).toBe(getFilterEndpoint(filter));
+    // Have to do this because no jest matcher for JS Set
+    expect(Array.from(mock.mock.calls[0][1].data.subfilters)).toEqual([
+      'ie_pre_9',
+      'ie9',
+      'opera_pre_15',
+    ]);
+
+    // Toggle filter off
+    wrapper
+      .find('LegacyBrowserFilterRow Switch')
+      .at(4)
+      .simulate('click');
+    expect(Array.from(mock.mock.calls[1][1].data.subfilters)).toEqual([
+      'ie_pre_9',
+      'ie9',
+      'opera_pre_15',
+      'safari_pre_6',
+    ]);
+
+    mock.mockReset();
+
+    // Click ie9 and < ie9
+    wrapper
+      .find('LegacyBrowserFilterRow Switch')
+      .at(0)
+      .simulate('click');
+    wrapper
+      .find('LegacyBrowserFilterRow Switch')
+      .at(1)
+      .simulate('click');
+
+    expect(Array.from(mock.mock.calls[1][1].data.subfilters)).toEqual([
+      'opera_pre_15',
+      'safari_pre_6',
+    ]);
+  });
+
+  it('can toggle all/none for legacy browser', function() {
+    let filter = 'legacy-browsers';
+    let mock = createFilterMock(filter);
+    const All = wrapper.find('BulkFilterItem').at(0);
+    const None = wrapper.find('BulkFilterItem').at(1);
+
+    // Click "All" filter
+    All.simulate('click');
+    expect(mock.mock.calls[0][0]).toBe(getFilterEndpoint(filter));
+    expect(Array.from(mock.mock.calls[0][1].data.subfilters)).toEqual([
+      'ie_pre_9',
+      'ie9',
+      'ie10',
+      'opera_pre_15',
+      'safari_pre_6',
+      'android_pre_4',
+    ]);
+
+    // Click "None" filter
+    None.simulate('click');
+    expect(Array.from(mock.mock.calls[1][1].data.subfilters)).toEqual([]);
+  });
+
+  it('can set ip address filter', function() {
+    let mock = MockApiClient.addMockResponse({
+      url: PROJECT_URL,
+      method: 'PUT',
+    });
+
+    wrapper
+      .find('TextArea[id="filters:blacklisted_ips"]')
+      .simulate('change', {target: {value: 'test\ntest2'}})
+      .simulate('blur');
+    expect(mock.mock.calls[0][0]).toBe(PROJECT_URL);
+    expect(mock.mock.calls[0][1].data.options['filters:blacklisted_ips']).toBe(
+      'test\ntest2'
+    );
+  });
+
+  it('does not have filter by release/error message because no hooks store', function() {
+    expect(wrapper.find('TextArea[id="filters:releases"]')).toHaveLength(0);
+    expect(wrapper.find('TextArea[id="filters:error_messages"]')).toHaveLength(0);
+  });
+
+  it('has custom inbound filters with flag + can change', function() {
+    wrapper = creator(() => {
+      return mount(
+        <ProjectFilters
+          params={{projectId: project.slug, orgId: org.slug}}
+          location={{}}
+        />,
+        {
+          context: {
+            ...TestStubs.routerContext().context,
+            project: {
+              ...project,
+              features: ['custom-inbound-filters'],
+            },
+          },
+          childContextTypes: TestStubs.routerContext().childContextTypes,
+        }
+      );
+    });
+
+    expect(wrapper.find('TextArea[id="filters:releases"]')).toHaveLength(1);
+    expect(wrapper.find('TextArea[id="filters:error_messages"]')).toHaveLength(1);
+
+    let mock = MockApiClient.addMockResponse({
+      url: PROJECT_URL,
+      method: 'PUT',
+    });
+
+    wrapper
+      .find('TextArea[id="filters:releases"]')
+      .simulate('change', {target: {value: 'release\nrelease2'}})
+      .simulate('blur');
+    expect(mock.mock.calls[0][0]).toBe(PROJECT_URL);
+    expect(mock.mock.calls[0][1].data.options['filters:releases']).toBe(
+      'release\nrelease2'
+    );
+
+    wrapper
+      .find('TextArea[id="filters:error_messages"]')
+      .simulate('change', {target: {value: 'error\nerror2'}})
+      .simulate('blur');
+    expect(mock.mock.calls[1][1].data.options['filters:error_messages']).toBe(
+      'error\nerror2'
+    );
+  });
+});
