commit 6d98f1668765cba176df2a761dbc1b311658e610
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Aug 24 16:07:22 2018 -0700

    feat(discover): Remove TopK (#9511)
    
    This doesn't work well and doesn't add a lot of value since we can retrieve the same information by a combination of order/limit

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
index b8ee21cf50..8f14f7de5a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/aggregation.jsx
@@ -5,7 +5,6 @@ import SelectControl from 'app/components/forms/selectControl';
 import {t} from 'app/locale';
 
 import {getInternal, getExternal} from './utils';
-import {TOPK_COUNTS} from '../data';
 import {PlaceholderText} from '../styles';
 
 export default class Aggregation extends React.Component {
@@ -34,7 +33,6 @@ export default class Aggregation extends React.Component {
     let optionList = [
       {value: 'count', label: 'count'},
       {value: 'uniq', label: 'uniq(...)'},
-      {value: 'topK', label: 'topK(...)'},
       {value: 'avg', label: 'avg(...)'},
     ];
 
@@ -54,24 +52,6 @@ export default class Aggregation extends React.Component {
         }));
     }
 
-    if (input.startsWith('topK')) {
-      optionList = TOPK_COUNTS.map(num => ({
-        value: `topK(${num})`,
-        label: `topK(${num})(...)`,
-      }));
-    }
-
-    const topKValueMatch = input.match(/^topK\((\d+)\)/);
-
-    if (topKValueMatch) {
-      const count = topKValueMatch[1];
-
-      optionList = this.props.columns.map(({name}) => ({
-        value: `topK(${count})(${name})`,
-        label: `topK(${count})(${name})`,
-      }));
-    }
-
     return optionList.filter(({label}) => label.includes(input));
   };
 
@@ -80,17 +60,8 @@ export default class Aggregation extends React.Component {
   }
 
   handleChange = option => {
-    const topKValues = new Set([...TOPK_COUNTS.map(num => `topK(${num})`)]);
-
-    if (option.value === 'uniq' || option.value === 'avg' || option.value === 'topK') {
+    if (option.value === 'uniq' || option.value === 'avg') {
       this.setState({inputValue: option.value}, this.focus);
-    } else if (topKValues.has(option.value)) {
-      this.setState(
-        {
-          inputValue: option.value,
-        },
-        this.focus
-      );
     } else {
       this.setState({inputValue: option.value});
       this.props.onChange(getExternal(option.value));
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
index df3fc64c03..2963526d8c 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/aggregations/utils.jsx
@@ -9,7 +9,6 @@
  */
 export function isValidAggregation(aggregation, cols) {
   const columns = new Set(cols.map(({name}) => name));
-  const topKRegex = /topK\((\d+)\)/;
 
   const [func, col] = aggregation;
 
@@ -21,7 +20,7 @@ export function isValidAggregation(aggregation, cols) {
     return col === null;
   }
 
-  if (func === 'uniq' || func.match(topKRegex)) {
+  if (func === 'uniq') {
     return columns.has(col);
   }
 
@@ -60,11 +59,6 @@ export function getInternal(external) {
     return `avg(${col})`;
   }
 
-  if (func.startsWith('topK')) {
-    const count = func.match(/topK\((\d+)\)/)[1];
-    return `topK(${count})(${col})`;
-  }
-
   return func;
 }
 
@@ -89,7 +83,6 @@ function getAlias(columnName) {
 export function getExternal(internal) {
   const uniqRegex = /^uniq\((.+)\)$/;
   const avgRegex = /^avg\((.+)\)$/;
-  const topKRegex = /^topK\((\d+)\)\((.+)\)$/;
 
   if (internal === 'count') {
     return ['count()', null, 'count'];
@@ -106,14 +99,5 @@ export function getExternal(internal) {
     return ['avg', column, `avg_${getAlias(column)}`];
   }
 
-  const topKMatch = internal.match(topKRegex);
-  if (topKMatch) {
-    return [
-      `topK(${parseInt(topKMatch[1], 10)})`,
-      topKMatch[2],
-      `topK_${topKMatch[1]}_${getAlias(topKMatch[2])}`,
-    ];
-  }
-
   return internal;
 }
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index c9937eb4cb..5c28d6ac80 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -84,6 +84,4 @@ const CONDITION_OPERATORS = [
   'NOT LIKE',
 ];
 
-const TOPK_COUNTS = [5, 10, 20, 50, 100];
-
-export {COLUMNS, PROMOTED_TAGS, CONDITION_OPERATORS, TOPK_COUNTS};
+export {COLUMNS, PROMOTED_TAGS, CONDITION_OPERATORS};
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
index 55043bc57e..6c3ef7017d 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/aggregation.spec.jsx
@@ -5,7 +5,7 @@ import Aggregation from 'app/views/organizationDiscover/aggregations/aggregation
 
 describe('Aggregation', function() {
   describe('render()', function() {
-    it('renders empty, count, topK, uniq and avg', async function() {
+    it('renders empty, count, uniq and avg', async function() {
       const data = [
         {value: [null, null, null], expectedTextValue: 'Add aggregation function...'},
         {value: ['count()', null, 'count'], expectedTextValue: 'count'},
@@ -17,10 +17,6 @@ describe('Aggregation', function() {
           value: ['avg', 'retention_days', 'avg_retention_days'],
           expectedTextValue: 'avg(retention_days)',
         },
-        {
-          value: ['topK(5)', 'environment', 'topK_5_environment'],
-          expectedTextValue: 'topK(5)(environment)',
-        },
         {
           value: ['uniq', 'tags[message]', 'uniq_tags_message'],
           expectedTextValue: 'uniq(tags[message])',
@@ -49,8 +45,8 @@ describe('Aggregation', function() {
       wrapper.setState({inputValue: ''});
       const options = wrapper.instance().filterOptions();
 
-      expect(options).toHaveLength(4);
-      expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'topK', 'avg']);
+      expect(options).toHaveLength(3);
+      expect(options.map(({value}) => value)).toEqual(['count', 'uniq', 'avg']);
     });
 
     it('displays uniq options on input `uniq`', function() {
@@ -67,21 +63,6 @@ describe('Aggregation', function() {
       expect(options).toHaveLength(1);
       expect(options[0]).toEqual({value: 'avg(col2)', label: 'avg(col2)'});
     });
-
-    it('displays TopK value options on input `topK`', function() {
-      wrapper.setState({inputValue: 'topK'});
-      const options = wrapper.instance().filterOptions();
-      expect(options).toHaveLength(5);
-      expect(options[0]).toEqual({value: 'topK(5)', label: 'topK(5)(...)'});
-    });
-
-    it('displays TopK column options on input topK(5)', function() {
-      wrapper.setState({inputValue: 'topK(5)'});
-      const options = wrapper.instance().filterOptions();
-      expect(options).toHaveLength(2);
-      expect(options[0]).toEqual({value: 'topK(5)(col1)', label: 'topK(5)(col1)'});
-      expect(options[1]).toEqual({value: 'topK(5)(col2)', label: 'topK(5)(col2)'});
-    });
   });
 
   describe('handleChange()', function() {
@@ -111,24 +92,12 @@ describe('Aggregation', function() {
         expect(wrapper.instance().state.inputValue).toBe('avg');
         expect(focusSpy).toHaveBeenCalled();
       });
-
-      it('topK without number', function() {
-        wrapper.instance().handleChange({value: 'topK'});
-        expect(wrapper.instance().state.inputValue).toBe('topK');
-        expect(focusSpy).toHaveBeenCalled();
-      });
-
-      it('topK with number', function() {
-        wrapper.instance().handleChange({value: 'topK(10)'});
-        expect(wrapper.instance().state.inputValue).toBe('topK(10)');
-        expect(focusSpy).toHaveBeenCalled();
-      });
     });
 
     describe('handles final selections', function() {
-      const validFinalSelections = ['count', 'avg(col2)', 'uniq(col1)', 'topK(10)(col2)'];
+      const validFinalSelections = ['count', 'avg(col2)', 'uniq(col1)'];
 
-      it('handles count, avg, uniq, topK', function() {
+      it('handles count, avg, uniq', function() {
         validFinalSelections.forEach(function(value) {
           wrapper.instance().handleChange({value});
           expect(wrapper.instance().state.inputValue).toBe(value);
diff --git a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
index 70b38ba996..1021c2f454 100644
--- a/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/aggregations/utils.spec.jsx
@@ -15,10 +15,6 @@ const aggregationList = [
     internal: 'uniq(message)',
     external: ['uniq', 'message', 'uniq_message'],
   },
-  {
-    internal: 'topK(10)(message)',
-    external: ['topK(10)', 'message', 'topK_10_message'],
-  },
   {
     internal: 'avg(retention_days)',
     external: ['avg', 'retention_days', 'avg_retention_days'],
@@ -51,18 +47,6 @@ describe('Aggregations', function() {
       expect(isValidAggregation(['count()', 'email', 'count'], COLUMNS)).toEqual(false);
     });
 
-    it('validates topK', function() {
-      expect(isValidAggregation(['topK(5)', 'email', 'topK_5_email'], COLUMNS)).toEqual(
-        true
-      );
-      expect(isValidAggregation(['topK()', 'email', 'topK_5_email'], COLUMNS)).toEqual(
-        false
-      );
-      expect(isValidAggregation(['topK(5)', null, 'topK_5_email'], COLUMNS)).toEqual(
-        false
-      );
-    });
-
     it('validates uniq', function() {
       expect(isValidAggregation(['uniq', 'email', 'uniq_email'], COLUMNS)).toEqual(true);
 
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index ed5d4484da..bc4c44303e 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -4,10 +4,10 @@ import {
 } from 'app/views/organizationDiscover/utils';
 
 const queryString =
-  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22topK(5)%22%2C%22os_build%22%2C%22topK_5_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
+  '?aggregations=%5B%5B%22count()%22%2Cnull%2C%22count%22%5D%2C%5B%22uniq%22%2C%22os_build%22%2C%22uniq_os_build%22%5D%5D&conditions=%5B%5D&end=%222018-07-10T01%3A18%3A04%22&fields=%5B%22event_id%22%2C%22timestamp%22%5D&limit=1000&orderby=%22-timestamp%22&projects=%5B8%5D&start=%222018-06-26T01%3A18%3A04%22';
 
 const query = {
-  aggregations: [['count()', null, 'count'], ['topK(5)', 'os_build', 'topK_5_os_build']],
+  aggregations: [['count()', null, 'count'], ['uniq', 'os_build', 'uniq_os_build']],
   conditions: [],
   end: '2018-07-10T01:18:04',
   fields: ['event_id', 'timestamp'],
