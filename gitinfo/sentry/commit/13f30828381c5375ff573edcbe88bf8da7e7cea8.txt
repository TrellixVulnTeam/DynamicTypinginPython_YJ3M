commit 13f30828381c5375ff573edcbe88bf8da7e7cea8
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Aug 24 16:35:46 2013 -0700

    Test for RedisQuota

diff --git a/tests/sentry/quotas/__init__.py b/tests/sentry/quotas/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/quotas/redis/__init__.py b/tests/sentry/quotas/redis/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/quotas/redis/tests.py b/tests/sentry/quotas/redis/tests.py
new file mode 100644
index 0000000000..5d2b3a590a
--- /dev/null
+++ b/tests/sentry/quotas/redis/tests.py
@@ -0,0 +1,55 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+
+from sentry.quotas.redis import RedisQuota
+from sentry.testutils import TestCase
+
+
+class RedisQuotaTest(TestCase):
+    def setUp(self):
+        self.quota = RedisQuota(hosts={
+            0: {'db': 9}
+        })
+        self.quota.conn.flushdb()
+
+    def test_default_host_is_local(self):
+        quota = RedisQuota()
+        self.assertEquals(len(quota.conn.hosts), 1)
+        self.assertEquals(quota.conn.hosts[0].host, 'localhost')
+
+    @mock.patch.object(RedisQuota, 'get_project_quota')
+    @mock.patch.object(RedisQuota, '_incr_project')
+    def test_bails_immediately_without_quota(self, incr, get_project_quota):
+        get_project_quota.return_value = 0
+        incr.return_value = (0, 0)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        get_project_quota.assert_called_once_with(self.project)
+        assert not incr.called
+        assert result is False
+
+    @mock.patch.object(RedisQuota, 'get_project_quota')
+    @mock.patch.object(RedisQuota, '_incr_project')
+    def test_over_quota(self, incr, get_project_quota):
+        get_project_quota.return_value = 100
+        incr.return_value = (101, 0)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        incr.assert_called_once_with(self.project)
+        assert result is True
+
+    @mock.patch.object(RedisQuota, 'get_project_quota')
+    @mock.patch.object(RedisQuota, '_incr_project')
+    def test_under_quota(self, incr, get_project_quota):
+        get_project_quota.return_value = 100
+        incr.return_value = (99, 0)
+
+        result = self.quota.is_rate_limited(self.project)
+
+        incr.assert_called_once_with(self.project)
+        assert result is False
