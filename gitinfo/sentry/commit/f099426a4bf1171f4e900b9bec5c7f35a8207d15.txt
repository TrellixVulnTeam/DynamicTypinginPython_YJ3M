commit f099426a4bf1171f4e900b9bec5c7f35a8207d15
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Aug 15 18:13:29 2018 -0700

    feat(ownership): Expand users to verified emails
    
    Also added test coverage to all of this.

diff --git a/src/sentry/models/projectownership.py b/src/sentry/models/projectownership.py
index 9a334e451b..a40778160e 100644
--- a/src/sentry/models/projectownership.py
+++ b/src/sentry/models/projectownership.py
@@ -70,46 +70,49 @@ def resolve_actors(owners, project_id):
     of {Owner: Actor} pairs. Actors not identified are returned
     as None. """
     from sentry.api.fields.actor import Actor
-    from sentry.ownership.grammar import Owner
     from sentry.models import User, Team
 
     if not owners:
         return {}
 
     users, teams = [], []
-
-    owners_to_actors = {o: None for o in owners}
+    owners_lookup = {}
 
     for owner in owners:
+        # teams aren't technical case insensitive, but teams also
+        # aren't allowed to have non-lowercase in slugs, so
+        # this kinda works itself out correctly since they won't match
+        owners_lookup[(owner.type, owner.identifier.lower())] = owner
         if owner.type == 'user':
             users.append(owner)
         elif owner.type == 'team':
             teams.append(owner)
 
-    actors = []
+    actors = {}
     if users:
-        actors.extend([
-            ('user', email, Actor(u_id, User))
+        actors.update({
+            ('user', email.lower()): Actor(u_id, User)
             for u_id, email in User.objects.filter(
                 reduce(
                     operator.or_,
-                    [Q(email__iexact=o.identifier) for o in users]
+                    [Q(emails__email__iexact=o.identifier) for o in users]
                 ),
+                emails__is_verified=True,
                 is_active=True,
                 sentry_orgmember_set__organizationmemberteam__team__projectteam__project_id=project_id,
-            ).values_list('id', 'email')
-        ])
+            ).distinct().values_list('id', 'emails__email')
+        })
 
     if teams:
-        actors.extend([
-            ('team', slug, Actor(t_id, Team))
+        actors.update({
+            ('team', slug): Actor(t_id, Team)
             for t_id, slug in Team.objects.filter(
                 slug__in=[o.identifier for o in teams],
                 projectteam__project_id=project_id,
             ).values_list('id', 'slug')
-        ])
-
-    for type, identifier, actor in actors:
-        owners_to_actors[Owner(type, identifier)] = actor
+        })
 
-    return owners_to_actors
+    return {
+        o: actors.get((o.type, o.identifier.lower()))
+        for o in owners
+    }
diff --git a/tests/sentry/models/test_projectownership.py b/tests/sentry/models/test_projectownership.py
index da0b055860..da939c410d 100644
--- a/tests/sentry/models/test_projectownership.py
+++ b/tests/sentry/models/test_projectownership.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 from sentry.testutils import TestCase
 from sentry.api.fields.actor import Actor
 from sentry.models import ProjectOwnership, User, Team
+from sentry.models.projectownership import resolve_actors
 from sentry.ownership.grammar import Rule, Owner, Matcher, dump_schema
 
 
@@ -93,3 +94,75 @@ class ProjectOwnershipTestCase(TestCase):
                 }
             }
         ) == ([], None)
+
+
+class ResolveActorsTestCase(TestCase):
+    def test_no_actors(self):
+        assert resolve_actors([], self.project.id) == {}
+
+    def test_basic(self):
+        owners = [
+            Owner('user', self.user.email),
+            Owner('team', self.team.slug),
+        ]
+        assert resolve_actors(owners, self.project.id) == {
+            owners[0]: Actor(self.user.id, User),
+            owners[1]: Actor(self.team.id, Team),
+        }
+
+    def test_teams(self):
+        # Normal team
+        owner1 = Owner('team', self.team.slug)
+        actor1 = Actor(self.team.id, Team)
+
+        # Team that doesn't exist
+        owner2 = Owner('team', 'nope')
+        actor2 = None
+
+        # A team that's not ours
+        otherteam = Team.objects.exclude(projectteam__project_id=self.project.id)[0]
+        owner3 = Owner('team', otherteam.slug)
+        actor3 = None
+
+        assert resolve_actors([owner1, owner2, owner3], self.project.id) == {
+            owner1: actor1,
+            owner2: actor2,
+            owner3: actor3,
+        }
+
+    def test_users(self):
+        # Normal user
+        owner1 = Owner('user', self.user.email)
+        actor1 = Actor(self.user.id, User)
+
+        # An extra secondary email
+        email1 = self.create_useremail(self.user, None, is_verified=True).email
+        owner2 = Owner('user', email1)
+        actor2 = actor1  # They map to the same user since it's just a secondary email
+
+        # Another secondary email, that isn't verified
+        email2 = self.create_useremail(self.user, None, is_verified=False).email
+        owner3 = Owner('user', email2)
+        actor3 = None
+
+        # An entirely unknown user
+        owner4 = Owner('user', 'nope')
+        actor4 = None
+
+        # A user that doesn't belong with us
+        otheruser = self.create_user()
+        owner5 = Owner('user', otheruser.email)
+        actor5 = None
+
+        # Case-insensitive for user
+        owner6 = Owner('user', self.user.email.upper())
+        actor6 = actor1
+
+        assert resolve_actors([owner1, owner2, owner3, owner4, owner5, owner6], self.project.id) == {
+            owner1: actor1,
+            owner2: actor2,
+            owner3: actor3,
+            owner4: actor4,
+            owner5: actor5,
+            owner6: actor6,
+        }
