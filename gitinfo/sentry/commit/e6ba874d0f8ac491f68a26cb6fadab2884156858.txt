commit e6ba874d0f8ac491f68a26cb6fadab2884156858
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Oct 23 15:32:18 2015 -0700

    Fix test (almost) all test warnings from react-0.14 upgrade

diff --git a/package.json b/package.json
index e0dd703ace..0f3329b2ee 100644
--- a/package.json
+++ b/package.json
@@ -27,6 +27,7 @@
     "raven-js": "^1.2.0",
     "react": "0.14.0",
     "react-addons-pure-render-mixin": "^0.14.0",
+    "react-addons-test-utils": "^0.14.0",
     "react-bootstrap": "^0.27.0",
     "react-document-title": "^1.0.2",
     "react-dom": "^0.14.0",
diff --git a/tests/js/spec/components/barChart.spec.jsx b/tests/js/spec/components/barChart.spec.jsx
index 20c2da075b..ccfd0a11bd 100644
--- a/tests/js/spec/components/barChart.spec.jsx
+++ b/tests/js/spec/components/barChart.spec.jsx
@@ -1,13 +1,15 @@
-import React from "react/addons";
+import React from "react";
+import ReactDOM from "react-dom";
+import TestUtils from "react-addons-test-utils";
+
 import BarChart from "app/components/barChart";
-var TestUtils = React.addons.TestUtils;
 
 describe("BarChart", function() {
 
   describe("render()", function() {
 
     it("renders with default props", function() {
-      var comp = TestUtils.renderIntoDocument(<BarChart />, document.body);
+      var comp = TestUtils.renderIntoDocument(<BarChart />);
       expect(comp).to.be.ok;
     });
 
@@ -19,7 +21,7 @@ describe("BarChart", function() {
       ];
 
       var comp = TestUtils.renderIntoDocument(<BarChart points={points}/>);
-      var columns = comp.getDOMNode().querySelectorAll('.chart-column');
+      var columns = ReactDOM.findDOMNode(comp).querySelectorAll('.chart-column');
 
       expect(columns).to.have.property('length', 3);
       expect(columns[0]).to.have.property('textContent', '10'); // check y values
@@ -38,8 +40,8 @@ describe("BarChart", function() {
         { x: 1439776800, className: 'last-seen', label: 'last seen' } // matches last point
       ];
 
-      var comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>, document.body);
-      var columns = comp.getDOMNode().getElementsByTagName('a');
+      var comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
+      var columns = ReactDOM.findDOMNode(comp).getElementsByTagName('a');
 
       expect(columns).to.have.property('length', 5);
 
@@ -60,8 +62,8 @@ describe("BarChart", function() {
         { x: 1439776800, className: 'last-seen', label: 'last seen' }
       ];
 
-      var comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>, document.body);
-      var columns = comp.getDOMNode().getElementsByTagName('a');
+      var comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
+      var columns = ReactDOM.findDOMNode(comp).getElementsByTagName('a');
 
       expect(columns).to.have.property('length', 3);
 
diff --git a/tests/js/spec/components/events/interfaces/definitionList.spec.jsx b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
index 07347a85e1..2a8a87cacd 100644
--- a/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/definitionList.spec.jsx
@@ -1,5 +1,7 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import ReactDOM from "react-dom";
+import TestUtils from "react-addons-test-utils";
+
 import DefinitionList from "app/components/events/interfaces/definitionList";
 
 describe('DefinitionList', function () {
@@ -11,12 +13,12 @@ describe('DefinitionList', function () {
       var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
 
       var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(dts[0].getDOMNode().textContent).to.eql('a');
-      expect(dts[1].getDOMNode().textContent).to.eql('b');
+      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
 
       var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(dds[0].getDOMNode().textContent).to.eql('x');
-      expect(dds[1].getDOMNode().textContent).to.eql('y');
+      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('x');
+      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
     it("should sort sort key/value pairs", function () {
@@ -26,12 +28,12 @@ describe('DefinitionList', function () {
       var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
 
       var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(dts[0].getDOMNode().textContent).to.eql('a');
-      expect(dts[1].getDOMNode().textContent).to.eql('b');
+      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
 
       var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(dds[0].getDOMNode().textContent).to.eql('x');
-      expect(dds[1].getDOMNode().textContent).to.eql('y');
+      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('x');
+      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
     it("should use a single space for values that are an empty string", function () {
@@ -41,12 +43,12 @@ describe('DefinitionList', function () {
       var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
 
       var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(dts[0].getDOMNode().textContent).to.eql('a');
-      expect(dts[1].getDOMNode().textContent).to.eql('b');
+      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(dts[1]).textContent).to.eql('b');
 
       var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(dds[0].getDOMNode().textContent).to.eql(' ');
-      expect(dds[1].getDOMNode().textContent).to.eql('y');
+      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql(' ');
+      expect(ReactDOM.findDOMNode(dds[1]).textContent).to.eql('y');
     });
 
     it("should coerce non-strings into strings", function () {
@@ -56,10 +58,10 @@ describe('DefinitionList', function () {
       var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
 
       var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(dts[0].getDOMNode().textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
 
       var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(dds[0].getDOMNode().textContent).to.eql('false');
+      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('false');
     });
 
     it("shouldn't blow up on null", function () {
@@ -69,10 +71,10 @@ describe('DefinitionList', function () {
       var elem = TestUtils.renderIntoDocument(<DefinitionList data={data} />);
 
       var dts = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dt');
-      expect(dts[0].getDOMNode().textContent).to.eql('a');
+      expect(ReactDOM.findDOMNode(dts[0]).textContent).to.eql('a');
 
       var dds = TestUtils.scryRenderedDOMComponentsWithTag(elem, 'dd');
-      expect(dds[0].getDOMNode().textContent).to.eql('null');
+      expect(ReactDOM.findDOMNode(dds[0]).textContent).to.eql('null');
     });
   });
 });
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index e5fad31e06..78a1016802 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -1,5 +1,5 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 import stubReactComponents from "../../../../helpers/stubReactComponent";
 
 import Frame from "app/components/events/interfaces/frame";
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index 59a93d26e1..b73c880ff3 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -1,5 +1,5 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 import stubReactComponents from "../../../../helpers/stubReactComponent";
 
 import RichHttpContent from "app/components/events/interfaces/richHttpContent";
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index 816125a227..8b4644a857 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -1,5 +1,7 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import ReactDOMServer from "react-dom/server";
+
+import TestUtils from "react-addons-test-utils";
 
 import api from "app/api";
 import TagDistributionMeter from "app/components/group/tagDistributionMeter";
@@ -75,7 +77,7 @@ describe("TagDistributionMeter", function() {
         }
       }, () => {
         let out = this.element.renderBody();
-        expect(React.renderToStaticMarkup(out)).to.eql('<p>No recent data.</p>');
+        expect(ReactDOMServer.renderToStaticMarkup(out)).to.eql('<p>No recent data.</p>');
         done();
       });
     });
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index e21b2bc181..63ea34867b 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -1,4 +1,5 @@
-import React from "react/addons";
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 import api from "app/api";
 import OrganizationTeams from "app/views/organizationTeams";
 import stubRouter from "../../helpers/stubRouter";
@@ -28,12 +29,11 @@ describe("OrganizationTeams", function() {
 
   afterEach(function() {
     this.sandbox.restore();
-    React.unmountComponentAtNode(document.body);
   });
 
   describe("fetchStats()", function() {
     it('should make a request to the organizations endpoint', function () {
-      var organizationTeams = React.render(this.Element, document.body).refs.wrapped;
+      var organizationTeams = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
 
       // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
       //       reset the request stub so that we can get an accurate count
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index f72aed9729..565af03c39 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -1,5 +1,5 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 
 import stubReactComponents from "../../helpers/stubReactComponent";
 import stubContext from "../../helpers/stubContext";
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 4b3763793f..4a970dcb00 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -1,4 +1,5 @@
-import React from "react/addons";
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 import Cookies from "js-cookie";
 import Api from "app/api";
 import CursorPoller from "app/utils/cursorPoller";
@@ -12,7 +13,6 @@ import stubReactComponents from "../../helpers/stubReactComponent";
 import stubContext from "../../helpers/stubContext";
 import stubRouter from "../../helpers/stubRouter";
 
-var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 var findWithType = TestUtils.findRenderedComponentWithType;
 
@@ -48,7 +48,6 @@ describe("Stream", function() {
 
   afterEach(function() {
     this.sandbox.restore();
-    React.unmountComponentAtNode(document.body);
   });
 
   describe("fetchData()", function() {
@@ -68,7 +67,7 @@ describe("Stream", function() {
       it("should reset the poller endpoint and sets cursor URL", function() {
         this.linkHeader = DEFAULT_LINKS_HEADER;
 
-        var wrapper = React.render(this.Element, document.body);
+        var wrapper = TestUtils.renderIntoDocument(this.Element);
         wrapper.refs.wrapped.fetchData();
 
         expect(CursorPoller.prototype.setEndpoint
@@ -80,7 +79,7 @@ describe("Stream", function() {
         this.linkHeader =
         '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/groups/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
-        var wrapper = React.render(this.Element, document.body);
+        var wrapper = TestUtils.renderIntoDocument(this.Element);
         wrapper.refs.wrapped.fetchData();
 
         expect(CursorPoller.prototype.setEndpoint.notCalled).to.be.ok;
@@ -100,7 +99,7 @@ describe("Stream", function() {
       });
 
       // NOTE: fetchData called once after render automatically
-      var stream = React.render(this.Element, document.body).refs.wrapped;
+      var stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
 
       // 2nd fetch should call cancel
       stream.fetchData();
@@ -120,14 +119,14 @@ describe("Stream", function() {
   describe("render()", function() {
 
     it("displays a loading indicator when component is loading", function() {
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       wrapper.refs.wrapped.setState({ loading: true });
       var expected = findWithType(wrapper, LoadingIndicator);
       expect(expected).to.be.ok;
     });
 
     it("displays an error when component has errored", function() {
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       wrapper.refs.wrapped.setState({
         error: true,
         loading: false
@@ -137,7 +136,7 @@ describe("Stream", function() {
     });
 
     it("displays the group list", function() {
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       wrapper.refs.wrapped.setState({
         error: false,
         groupIds: ["1"],
@@ -148,7 +147,7 @@ describe("Stream", function() {
     });
 
     it("displays empty with no ids", function() {
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       wrapper.refs.wrapped.setState({
         error: false,
         groupIds: [],
@@ -168,14 +167,14 @@ describe("Stream", function() {
 
     it("reads the realtimeActive state from a cookie", function() {
       Cookies.set("realtimeActive", "false");
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       var expected = findWithClass(wrapper, "icon-play");
       expect(expected).to.be.ok;
     });
 
     it("reads the true realtimeActive state from a cookie", function() {
       Cookies.set("realtimeActive", "true");
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       var expected = findWithClass(wrapper, "icon-pause");
       expect(expected).to.be.ok;
     });
@@ -185,7 +184,7 @@ describe("Stream", function() {
   describe("onRealtimeChange", function() {
 
     it("sets the realtimeActive state", function() {
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       wrapper.refs.wrapped.state.realtimeActive = false;
       wrapper.refs.wrapped.onRealtimeChange(true);
       expect(wrapper.refs.wrapped.state.realtimeActive).to.eql(true);
@@ -212,7 +211,7 @@ describe("Stream", function() {
         loading: true,
         error: false
       };
-      var wrapper = React.render(this.Element, document.body);
+      var wrapper = TestUtils.renderIntoDocument(this.Element);
       var actual = wrapper.refs.wrapped.getInitialState();
 
       for (var property in expected) {
diff --git a/tests/js/spec/views/stream/actionLink.spec.jsx b/tests/js/spec/views/stream/actionLink.spec.jsx
index 957e22bf73..19600f061e 100644
--- a/tests/js/spec/views/stream/actionLink.spec.jsx
+++ b/tests/js/spec/views/stream/actionLink.spec.jsx
@@ -1,5 +1,5 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 
 import api from "app/api";
 import stubReactComponents from "../../../helpers/stubReactComponent";
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index c56422b7ff..70f21b4652 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -1,5 +1,5 @@
-import React from "react/addons";
-var TestUtils = React.addons.TestUtils;
+import React from "react";
+import TestUtils from "react-addons-test-utils";
 
 import api from "app/api";
 import stubReactComponents from "../../../helpers/stubReactComponent";
diff --git a/tests/js/spec/views/stream/filterSelectLink.spec.jsx b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
index 17e6537f60..70d169a84e 100644
--- a/tests/js/spec/views/stream/filterSelectLink.spec.jsx
+++ b/tests/js/spec/views/stream/filterSelectLink.spec.jsx
@@ -1,7 +1,8 @@
-import React from "react/addons";
+import React from "react";
+import ReactDOM from "react-dom";
+import TestUtils from "react-addons-test-utils";
 import FilterSelectLink from "app/views/stream/filterSelectLink";
 
-var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 
 describe("FilterSelectLink", function() {
@@ -12,33 +13,32 @@ describe("FilterSelectLink", function() {
 
   afterEach(function() {
     this.sandbox.restore();
-    React.unmountComponentAtNode(document.body);
   });
 
   describe("render()", function() {
 
     it("shows a button", function(){
-      var wrapper = React.render(<FilterSelectLink extraClass="test-btn" />, document.body);
+      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink extraClass="test-btn" />);
       var expected = findWithClass(wrapper, "test-btn");
       expect(expected).to.be.ok;
     });
 
     it("shows active state when passed isActive=true", function(){
-      var wrapper = React.render(<FilterSelectLink isActive={true} />, document.body);
+      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={true} />);
       var expected = findWithClass(wrapper, "active");
       expect(expected).to.be.ok;
     });
 
     it("doesn't show active state when passed isActive=false", function(){
-      var wrapper = React.render(<FilterSelectLink isActive={false} />, document.body);
+      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink isActive={false} />);
       expect(() => findWithClass(wrapper, "active")).to.throw();
     });
 
     it("calls onSelect() when anchor clicked", function(){
       var onSelect = this.sandbox.spy();
-      var wrapper = React.render(<FilterSelectLink onSelect={onSelect} />, document.body);
+      var wrapper = TestUtils.renderIntoDocument(<FilterSelectLink onSelect={onSelect} />);
 
-      TestUtils.Simulate.click(wrapper.getDOMNode());
+      TestUtils.Simulate.click(ReactDOM.findDOMNode(wrapper));
 
       expect(onSelect.called).to.be.true;
     });
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 6be2d688cb..2e1decb7cc 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -1,5 +1,6 @@
-import React from "react/addons";
+import React from "react";
 import ReactDOM from "react-dom";
+import TestUtils from "react-addons-test-utils";
 import api from "app/api";
 import SearchBar from "app/views/stream/searchBar";
 import SearchDropdown from "app/views/stream/searchDropdown";
@@ -8,7 +9,6 @@ import stubReactComponents from "../../../helpers/stubReactComponent";
 import stubRouter from "../../../helpers/stubRouter";
 import stubContext from "../../../helpers/stubContext";
 
-var TestUtils = React.addons.TestUtils;
 var findWithClass = TestUtils.findRenderedDOMComponentWithClass;
 
 describe("SearchBar", function() {
@@ -38,8 +38,6 @@ describe("SearchBar", function() {
 
   afterEach(function() {
     this.sandbox.restore();
-
-    React.unmountComponentAtNode(document.body);
   });
 
   describe("getQueryTerms()", function () {
@@ -75,7 +73,7 @@ describe("SearchBar", function() {
         query: "is:unresolved ruby",
         defaultQuery: "is:unresolved"
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
 
       wrapper.clearSearch();
 
@@ -88,7 +86,7 @@ describe("SearchBar", function() {
         defaultQuery: "is:unresolved",
         onSearch: this.sandbox.spy()
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
 
       wrapper.clearSearch();
 
@@ -103,7 +101,7 @@ describe("SearchBar", function() {
   describe("onQueryFocus()", function() {
 
     it("displays the drop down", function() {
-      var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar />).refs.wrapped;
       expect(wrapper.state.dropdownVisible).to.be.false;
 
       wrapper.onQueryFocus();
@@ -116,7 +114,7 @@ describe("SearchBar", function() {
   describe("onQueryBlur()", function() {
 
     it("hides the drop down", function() {
-      var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar />).refs.wrapped;
       wrapper.state.dropdownVisible = true;
 
       var clock = this.sandbox.useFakeTimers();
@@ -131,7 +129,8 @@ describe("SearchBar", function() {
   describe("onKeyUp()", function () {
     describe("escape", function () {
       it("blurs the input", function () {
-        var wrapper = React.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
+        // needs to be rendered into document.body or cannot query document.activeElement
+        var wrapper = ReactDOM.render(<this.ContextStubbedSearchBar />, document.body).refs.wrapped;
         wrapper.state.dropdownVisible = true;
 
         var input = ReactDOM.findDOMNode(wrapper.refs.searchInput);
@@ -151,7 +150,7 @@ describe("SearchBar", function() {
 
     it("invokes onSearch() when submitting the form", function() {
       var stubbedOnSearch = this.sandbox.spy();
-      var wrapper = React.render(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar onSearch={stubbedOnSearch} />).refs.wrapped;
 
       TestUtils.Simulate.submit(wrapper.refs.searchForm, { preventDefault() {} });
 
@@ -163,7 +162,7 @@ describe("SearchBar", function() {
         query: "is:unresolved",
         onSearch: this.sandbox.spy()
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
 
       var cancelButton = findWithClass(wrapper, "search-clear-form");
       TestUtils.Simulate.click(cancelButton);
@@ -179,7 +178,7 @@ describe("SearchBar", function() {
         query: "",
         defaultQuery: "is:unresolved"
       };
-      let wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      let wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       expect(wrapper.state.query).to.eql("");
     });
 
@@ -190,7 +189,7 @@ describe("SearchBar", function() {
       var props = {
         query: "",
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
       expect(wrapper.state.searchTerm).to.eql('');
       expect(wrapper.state.searchItems).to.eql(wrapper.props.defaultSearchItems);
@@ -201,7 +200,7 @@ describe("SearchBar", function() {
       var props = {
         query: "fu",
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
       expect(wrapper.state.searchTerm).to.eql('fu');
       expect(wrapper.state.searchItems).to.eql([]);
@@ -212,7 +211,7 @@ describe("SearchBar", function() {
       var props = {
         query: "url:\"fu\"",
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
       expect(wrapper.state.searchTerm).to.eql('"fu"');
       expect(wrapper.state.searchItems).to.eql([]);
@@ -223,7 +222,7 @@ describe("SearchBar", function() {
       var props = {
         query: "is:unresolved fu",
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
       expect(wrapper.state.searchTerm).to.eql('unresolved');
       expect(wrapper.state.searchItems.length).to.eql(1);
@@ -236,7 +235,7 @@ describe("SearchBar", function() {
       var props = {
         query: "url:\"http://example.com\"",
       };
-      var wrapper = React.render(<this.ContextStubbedSearchBar {...props} />, document.body).refs.wrapped;
+      var wrapper = TestUtils.renderIntoDocument(<this.ContextStubbedSearchBar {...props} />).refs.wrapped;
       wrapper.updateAutoCompleteItems();
       expect(wrapper.state.searchTerm).to.eql('"http://example.com"');
       expect(wrapper.state.searchItems).to.eql([]);
