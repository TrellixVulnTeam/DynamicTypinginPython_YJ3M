commit 562a91ddf4f0c5b6ae226f1d6e8cf456daad8d15
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Jul 11 15:58:43 2019 -0700

    feat(api): Add /auth/config endpoint (#13963)

diff --git a/src/sentry/api/endpoints/auth_config.py b/src/sentry/api/endpoints/auth_config.py
new file mode 100644
index 0000000000..3f7d07e249
--- /dev/null
+++ b/src/sentry/api/endpoints/auth_config.py
@@ -0,0 +1,99 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+from django.contrib.auth import REDIRECT_FIELD_NAME
+from django.core.urlresolvers import reverse
+from rest_framework.response import Response
+
+from sentry import newsletter
+from sentry.auth.superuser import is_active_superuser
+from sentry.constants import WARN_SESSION_EXPIRED
+from sentry.http import get_server_hostname
+from sentry.utils import auth
+from sentry.models import Organization
+from sentry.api.base import Endpoint
+from sentry.web.frontend.auth_login import additional_context
+from sentry.web.frontend.base import OrganizationMixin
+
+
+class AuthConfigEndpoint(Endpoint, OrganizationMixin):
+    # Disable authentication and permission requirements.
+    permission_classes = []
+
+    def get(self, request, *args, **kwargs):
+        """
+        Get context required to show a login page. Registration is handled elsewhere.
+        """
+        if request.user.is_authenticated():
+            # if the user is a superuser, but not 'superuser authenticated' we
+            # allow them to re-authenticate to gain superuser status
+            if not request.user.is_superuser or is_active_superuser(request):
+                return self.respond_authenticated(request)
+
+        next_uri = self.get_next_uri(request)
+
+        # we always reset the state on GET so you dont end up at an odd location
+        auth.initiate_login(request, next_uri)
+
+        # Single org mode -- send them to the org-specific handler
+        if settings.SENTRY_SINGLE_ORGANIZATION:
+            org = Organization.get_default()
+            return Response({
+                'nextUri': reverse('sentry-auth-organization', args=[org.slug]),
+            })
+
+        session_expired = 'session_expired' in request.COOKIES
+        payload = self.prepare_login_context(request, *args, **kwargs)
+        response = Response(payload)
+
+        if session_expired:
+            response.delete_cookie('session_expired')
+
+        return response
+
+    def respond_authenticated(self, request):
+        next_uri = self.get_next_uri(request)
+
+        if not auth.is_valid_redirect(next_uri, host=request.get_host()):
+            next_uri = self.org_redirect_url(request)
+
+        return Response({
+            'nextUri': next_uri,
+        })
+
+    def org_redirect_url(self, request):
+        from sentry import features
+
+        organization = self.get_active_organization(request)
+        if organization:
+            return organization.get_url()
+
+        if not features.has('organizations:create'):
+            # TODO(dcramer): deal with case when the user cannot create orgs.
+            # This will likely cause an infinite loop right now.
+            return '/auth/login'
+
+        return '/organizations/new/'
+
+    def get_next_uri(self, request):
+        next_uri_fallback = None
+        if request.session.get('_next') is not None:
+            next_uri_fallback = request.session.pop('_next')
+        return request.GET.get(REDIRECT_FIELD_NAME, next_uri_fallback)
+
+    def prepare_login_context(self, request, *args, **kwargs):
+        can_register = bool(
+            auth.has_user_registration() or request.session.get('can_register'))
+
+        context = {
+            'serverHostname': get_server_hostname(),
+            'canRegister': can_register,
+            'hasNewsletter': newsletter.is_enabled(),
+        }
+
+        if 'session_expired' in request.COOKIES:
+            context['warning'] = WARN_SESSION_EXPIRED
+
+        context.update(additional_context.run_callbacks(request))
+
+        return context
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 3fbb422f48..8ea6b8a536 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -9,6 +9,7 @@ from .endpoints.api_authorizations import ApiAuthorizationsEndpoint
 from .endpoints.api_tokens import ApiTokensEndpoint
 from .endpoints.assistant import AssistantEndpoint
 from .endpoints.auth_index import AuthIndexEndpoint
+from .endpoints.auth_config import AuthConfigEndpoint
 from .endpoints.authenticator_index import AuthenticatorIndexEndpoint
 from .endpoints.broadcast_details import BroadcastDetailsEndpoint
 from .endpoints.broadcast_index import BroadcastIndexEndpoint
@@ -340,7 +341,10 @@ urlpatterns = patterns(
     ),
 
     # Auth
-    url(r'^auth/$', AuthIndexEndpoint.as_view(), name='sentry-api-0-auth'),
+    url(r'^auth/', include([
+        url(r'^$', AuthIndexEndpoint.as_view(), name='sentry-api-0-auth'),
+        url(r'^config/$', AuthConfigEndpoint.as_view(), name='sentry-api-0-auth-config'),
+    ])),
 
     # List Authentiactors
     url(r'^authenticators/$',
diff --git a/src/sentry/static/sentry/app/views/auth/login.jsx b/src/sentry/static/sentry/app/views/auth/login.jsx
index b299960c91..ec2cc4b77e 100644
--- a/src/sentry/static/sentry/app/views/auth/login.jsx
+++ b/src/sentry/static/sentry/app/views/auth/login.jsx
@@ -43,7 +43,7 @@ class Login extends React.Component {
   fetchData = async () => {
     const {api} = this.props;
     try {
-      const response = await api.requestPromise('/auth/login/');
+      const response = await api.requestPromise('/auth/config/');
 
       const {vsts_login_link, github_login_link, ...config} = response;
       const authConfig = {
diff --git a/tests/js/spec/views/auth/login.spec.jsx b/tests/js/spec/views/auth/login.spec.jsx
index e4cd83883e..01ac53b1a1 100644
--- a/tests/js/spec/views/auth/login.spec.jsx
+++ b/tests/js/spec/views/auth/login.spec.jsx
@@ -12,7 +12,7 @@ describe('Login', function() {
 
   it('renders an error if auth config cannot be loaded', async function() {
     MockApiClient.addMockResponse({
-      url: '/auth/login/',
+      url: '/auth/config/',
       statusCode: 500,
     });
 
@@ -27,7 +27,7 @@ describe('Login', function() {
 
   it('does not show register when disabled', function() {
     MockApiClient.addMockResponse({
-      url: '/auth/login/',
+      url: '/auth/config/',
       body: {canRegister: false},
     });
 
@@ -43,7 +43,7 @@ describe('Login', function() {
 
   it('shows register when canRegister is enabled', async function() {
     MockApiClient.addMockResponse({
-      url: '/auth/login/',
+      url: '/auth/config/',
       body: {canRegister: true},
     });
 
@@ -62,7 +62,7 @@ describe('Login', function() {
 
   it('toggles between tabs', async function() {
     MockApiClient.addMockResponse({
-      url: '/auth/login/',
+      url: '/auth/config/',
       body: {canRegister: true},
     });
 
diff --git a/tests/sentry/api/endpoints/test_auth_config.py b/tests/sentry/api/endpoints/test_auth_config.py
new file mode 100644
index 0000000000..f3d6fbd0f4
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_auth_config.py
@@ -0,0 +1,77 @@
+from __future__ import absolute_import
+
+import pytest
+from django.conf import settings
+from django.test.utils import override_settings
+
+from sentry import newsletter
+from sentry.testutils import APITestCase
+
+
+class AuthConfigEndpointTest(APITestCase):
+    path = '/api/0/auth/config/'
+
+    def test_logged_in(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert response.data['nextUri'] == '/organizations/new/'
+
+    def test_logged_in_active_org(self):
+        user = self.create_user('foo@example.com')
+        self.create_organization(owner=user, slug='ricks-org')
+        self.login_as(user)
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert response.data['nextUri'] == '/organizations/ricks-org/issues/'
+
+    @override_settings(SENTRY_SINGLE_ORGANIZATION=True)
+    def test_single_org(self):
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert response.data['nextUri'] == '/auth/login/sentry/'
+
+    def test_superuser_is_not_redirected(self):
+        user = self.create_user('foo@example.com', is_superuser=True)
+        self.login_as(user)
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert 'nextUri' not in response.data
+
+    def test_unauthenticated(self):
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert not response.data['canRegister']
+        assert not response.data['hasNewsletter']
+        assert response.data['serverHostname'] == 'testserver'
+
+    @pytest.mark.skipIf(lambda x: settings.SENTRY_NEWSLETTER !=
+                        'sentry.newsletter.dummy.DummyNewsletter')
+    def test_has_newsletter(self):
+        newsletter.backend.enable()
+        response = self.client.get(self.path)
+        newsletter.backend.disable()
+
+        assert response.status_code == 200
+        assert response.data['hasNewsletter']
+
+    def test_can_register(self):
+        with self.options({'auth.allow-registration': True}):
+            with self.feature('auth:register'):
+                response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert response.data['canRegister']
+
+    def test_session_expired(self):
+        self.client.cookies['session_expired'] = '1'
+        response = self.client.get(self.path)
+
+        assert response.status_code == 200
+        assert response.data['warning'] == 'Your session has expired.'
