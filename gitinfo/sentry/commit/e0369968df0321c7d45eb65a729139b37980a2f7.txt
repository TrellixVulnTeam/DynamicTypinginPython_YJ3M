commit e0369968df0321c7d45eb65a729139b37980a2f7
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 19 13:01:54 2016 -0700

    Improve data scrubbers (#4170)
    
    * Add scrubbing for private/public keys
    
    * Add scrubbing of social security numbers
    
    * Add exclude_fields (safe_fields) to data scrubber
    
    * Make SS scrubbing less greedy

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index d7dadc97f3..37a8541650 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -129,6 +129,7 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
             'sentry:resolve_age': int(project.get_option('sentry:resolve_age', 0)),
             'sentry:scrub_data': bool(project.get_option('sentry:scrub_data', True)),
             'sentry:scrub_defaults': bool(project.get_option('sentry:scrub_defaults', True)),
+            'sentry:safe_fields': project.get_option('sentry:safe_fields', []),
             'sentry:sensitive_fields': project.get_option('sentry:sensitive_fields', []),
             'sentry:csp_ignored_sources_defaults': bool(project.get_option('sentry:csp_ignored_sources_defaults', True)),
             'sentry:csp_ignored_sources': '\n'.join(project.get_option('sentry:csp_ignored_sources', []) or []),
@@ -233,6 +234,11 @@ class ProjectDetailsEndpoint(ProjectEndpoint):
                 project.update_option('sentry:scrub_data', bool(options['sentry:scrub_data']))
             if 'sentry:scrub_defaults' in options:
                 project.update_option('sentry:scrub_defaults', bool(options['sentry:scrub_defaults']))
+            if 'sentry:safe_fields' in options:
+                project.update_option(
+                    'sentry:safe_fields',
+                    [s.strip().lower() for s in options['sentry:safe_fields']]
+                )
             if 'sentry:sensitive_fields' in options:
                 project.update_option(
                     'sentry:sensitive_fields',
diff --git a/src/sentry/templates/sentry/organization-settings.html b/src/sentry/templates/sentry/organization-settings.html
index f0449c3668..3f3e5d8e42 100644
--- a/src/sentry/templates/sentry/organization-settings.html
+++ b/src/sentry/templates/sentry/organization-settings.html
@@ -39,6 +39,7 @@
         {{ form.require_scrub_data|as_crispy_field }}
         {{ form.require_scrub_defaults|as_crispy_field }}
         {{ form.sensitive_fields|as_crispy_field }}
+        {{ form.safe_fields|as_crispy_field }}
         {{ form.require_scrub_ip_address|as_crispy_field }}
 
         <fieldset class="form-actions">
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index bc9a0e9940..fd6b053aeb 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -54,6 +54,7 @@
         {{ form.scrub_data|as_crispy_field }}
         {{ form.scrub_defaults|as_crispy_field }}
         {{ form.sensitive_fields|as_crispy_field }}
+        {{ form.safe_fields|as_crispy_field }}
         {{ form.scrub_ip_address|as_crispy_field }}
       </div>
     </div>
diff --git a/src/sentry/utils/data_scrubber.py b/src/sentry/utils/data_scrubber.py
index e4ee1c53e1..5b5aed5428 100644
--- a/src/sentry/utils/data_scrubber.py
+++ b/src/sentry/utils/data_scrubber.py
@@ -46,17 +46,24 @@ class SensitiveDataFilter(object):
     Asterisk out things that look like passwords, credit card numbers,
     and API keys in frames, http, and basic extra data.
     """
-    # http://www.richardsramblings.com/regex/credit-card-numbers/
-    VALUES_RE = re.compile(r'\b(?:3[47]\d|(?:4\d|5[1-5]|65)\d{2}|6011)\d{12}\b')
+    VALUES_RE = re.compile(r'|'.join([
+        # http://www.richardsramblings.com/regex/credit-card-numbers/
+        r'\b(?:3[47]\d|(?:4\d|5[1-5]|65)\d{2}|6011)\d{12}\b',
+        # various private/public keys
+        r'-----BEGIN[A-Z ]+(PRIVATE|PUBLIC) KEY-----.+-----END[A-Z ]+(PRIVATE|PUBLIC) KEY-----',
+        # social security numbers (US)
+        r'^\b(?!(000|666|9))\d{3}-(?!00)\d{2}-(?!0000)\d{4}\b',
+    ]), re.DOTALL)
     URL_PASSWORD_RE = re.compile(r'\b((?:[a-z0-9]+:)?//[^:]+:)([^@]+)@')
 
-    def __init__(self, fields=None, include_defaults=True):
+    def __init__(self, fields=None, include_defaults=True, exclude_fields=()):
         if fields:
             fields = tuple(fields)
         else:
             fields = ()
         if include_defaults:
             fields += DEFAULT_SCRUBBED_FIELDS
+        self.exclude_fields = set(exclude_fields)
         self.fields = set(fields)
 
     def apply(self, data):
@@ -90,6 +97,9 @@ class SensitiveDataFilter(object):
         if value is None:
             return
 
+        if key in self.exclude_fields:
+            return value
+
         if isinstance(value, six.string_types):
             if self.VALUES_RE.search(value):
                 return FILTER_MASK
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 55112db189..7131f6fa41 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -370,6 +370,12 @@ class StoreView(APIView):
                 project.get_option(sensitive_fields_key, [])
             )
 
+            exclude_fields_key = 'sentry:safe_fields'
+            exclude_fields = (
+                org_options.get(exclude_fields_key, []) +
+                project.get_option(exclude_fields_key, [])
+            )
+
             if org_options.get('sentry:require_scrub_defaults', False):
                 scrub_defaults = True
             else:
@@ -378,6 +384,7 @@ class StoreView(APIView):
             inst = SensitiveDataFilter(
                 fields=sensitive_fields,
                 include_defaults=scrub_defaults,
+                exclude_fields=exclude_fields,
             )
             inst.apply(data)
 
diff --git a/src/sentry/web/frontend/organization_settings.py b/src/sentry/web/frontend/organization_settings.py
index 6f2c04438b..d3f7acd92b 100644
--- a/src/sentry/web/frontend/organization_settings.py
+++ b/src/sentry/web/frontend/organization_settings.py
@@ -59,6 +59,17 @@ class OrganizationSettingsForm(forms.ModelForm):
         }),
         required=False,
     )
+    safe_fields = forms.CharField(
+        label=_('Global safe fields'),
+        help_text=_('Field names which data scrubbers should ignore. '
+                    'Separate multiple entries with a newline.<br /><strong>Note: These fields will be used in addition to project specific fields.</strong>'),
+        widget=forms.Textarea(attrs={
+            'placeholder': mark_safe(_('e.g. email')),
+            'class': 'span8',
+            'rows': '3',
+        }),
+        required=False,
+    )
     require_scrub_ip_address = forms.BooleanField(
         label=_('Prevent Storing of IP Addresses'),
         help_text=_('Preventing IP addresses from being stored for new events on all projects.'),
@@ -86,6 +97,13 @@ class OrganizationSettingsForm(forms.ModelForm):
 
         return filter(bool, (v.lower().strip() for v in value.split('\n')))
 
+    def clean_safe_fields(self):
+        value = self.cleaned_data.get('safe_fields')
+        if not value:
+            return
+
+        return filter(bool, (v.lower().strip() for v in value.split('\n')))
+
 
 class OrganizationSettingsView(OrganizationView):
     required_scope = 'org:write'
@@ -105,6 +123,7 @@ class OrganizationSettingsView(OrganizationView):
                 'require_scrub_data': bool(organization.get_option('sentry:require_scrub_data', False)),
                 'require_scrub_defaults': bool(organization.get_option('sentry:require_scrub_defaults', False)),
                 'sensitive_fields': '\n'.join(organization.get_option('sentry:sensitive_fields', None) or []),
+                'safe_fields': '\n'.join(organization.get_option('sentry:safe_fields', None) or []),
                 'require_scrub_ip_address': bool(organization.get_option('sentry:require_scrub_ip_address', False)),
                 'early_adopter': bool(organization.flags.early_adopter),
             }
@@ -124,6 +143,7 @@ class OrganizationSettingsView(OrganizationView):
                     'require_scrub_data',
                     'require_scrub_defaults',
                     'sensitive_fields',
+                    'safe_fields',
                     'require_scrub_ip_address'):
                 value = form.cleaned_data.get(opt)
                 if value is None:
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 68ae3874a0..2082f37c22 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -53,6 +53,17 @@ class EditProjectForm(forms.ModelForm):
         }),
         required=False,
     )
+    safe_fields = forms.CharField(
+        label=_('Safe fields'),
+        help_text=_('Field names which data scrubbers should ignore. '
+                    'Separate multiple entries with a newline.'),
+        widget=forms.Textarea(attrs={
+            'placeholder': mark_safe(_('e.g. email')),
+            'class': 'span8',
+            'rows': '3',
+        }),
+        required=False,
+    )
     scrub_ip_address = forms.BooleanField(
         label=_('Don\'t store IP Addresses'),
         help_text=_('Prevent IP addresses from being stored for new events.'),
@@ -133,6 +144,13 @@ class EditProjectForm(forms.ModelForm):
 
         return filter(bool, (v.lower().strip() for v in value.split('\n')))
 
+    def clean_safe_fields(self):
+        value = self.cleaned_data.get('safe_fields')
+        if not value:
+            return
+
+        return filter(bool, (v.lower().strip() for v in value.split('\n')))
+
     def clean_team(self):
         value = self.cleaned_data.get('team')
         if not value:
@@ -195,6 +213,7 @@ class ProjectSettingsView(ProjectView):
                 'scrub_data': bool(project.get_option('sentry:scrub_data', True)),
                 'scrub_defaults': bool(project.get_option('sentry:scrub_defaults', True)),
                 'sensitive_fields': '\n'.join(project.get_option('sentry:sensitive_fields', None) or []),
+                'safe_fields': '\n'.join(project.get_option('sentry:safe_fields', None) or []),
                 'scrub_ip_address': bool(project.get_option('sentry:scrub_ip_address', False)),
                 'scrape_javascript': bool(project.get_option('sentry:scrape_javascript', True)),
                 'blacklisted_ips': '\n'.join(project.get_option('sentry:blacklisted_ips', [])),
@@ -214,6 +233,7 @@ class ProjectSettingsView(ProjectView):
                 'scrub_data',
                 'scrub_defaults',
                 'sensitive_fields',
+                'safe_fields',
                 'scrub_ip_address',
                 'scrape_javascript',
                 'blacklisted_ips',
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index fc046622d8..6a5c04d694 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -114,6 +114,7 @@ class ProjectUpdateTest(APITestCase):
             'sentry:scrub_data': False,
             'sentry:scrub_defaults': False,
             'sentry:sensitive_fields': ['foo', 'bar'],
+            'sentry:safe_fields': ['token'],
             'sentry:csp_ignored_sources_defaults': False,
             'sentry:csp_ignored_sources': 'foo\nbar',
         }
@@ -127,6 +128,7 @@ class ProjectUpdateTest(APITestCase):
         assert project.get_option('sentry:scrub_data', True) == options['sentry:scrub_data']
         assert project.get_option('sentry:scrub_defaults', True) == options['sentry:scrub_defaults']
         assert project.get_option('sentry:sensitive_fields', []) == options['sentry:sensitive_fields']
+        assert project.get_option('sentry:safe_fields', []) == options['sentry:safe_fields']
         assert project.get_option('sentry:csp_ignored_sources_defaults', True) == options['sentry:csp_ignored_sources_defaults']
         assert project.get_option('sentry:csp_ignored_sources', []) == options['sentry:csp_ignored_sources'].split('\n')
 
diff --git a/tests/sentry/utils/test_data_scrubber.py b/tests/sentry/utils/test_data_scrubber.py
index ebd2576c61..da1355e9ee 100644
--- a/tests/sentry/utils/test_data_scrubber.py
+++ b/tests/sentry/utils/test_data_scrubber.py
@@ -16,6 +16,32 @@ VARS = {
     'apiKey': 'secret_key',
 }
 
+PUBLIC_KEY = """-----BEGIN PUBLIC KEY-----
+MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA6A6TQjlPyMurLh/igZY4
+izA9sJgeZ7s5+nGydO4AI9k33gcy2DObZuadWRMnDwc3uH/qoAPw/mo3KOcgEtxU
+xdwiQeATa3HVPcQDCQiKm8xIG2Ny0oUbR0IFNvClvx7RWnPEMk05CuvsL0AA3eH5
+xn02Yg0JTLgZEtUT3whwFm8CAwEAAQ==
+-----END PUBLIC KEY-----"""
+
+PRIVATE_KEY = """-----BEGIN PRIVATE KEY-----
+MIIJRAIBADANBgkqhkiG9w0BAQEFAASCCS4wggkqAgEAAoICAQCoNFY4P+EeIXl0
+mLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h
+mLpO+i8uFqAaEFQ8ZX2VVpA13kNEHuiWXC3HPlQ+7G+O3XmAsO+Wf/xY6pCSeQ8h
+-----END PRIVATE KEY-----"""
+
+ENCRYPTED_PRIVATE_KEY = """-----BEGIN ENCRYPTED PRIVATE KEY-----
+MIIJjjBABgkqhkiG9w0BBQ0wMzAbBgkqhkiG9w0BBQwwDgQIWVhErdQOFVoCAggA
+IrlYQUV1ig4U3viYh1Y8viVvRlANKICvgj4faYNH36UterkfDjzMonb/cXNeJEOS
+YgorM2Pfuec5vtPRPKd88+Ds/ktIlZhjJwnJjHQMX+lSw5t0/juna2sLH2dpuAbi
+PSk=
+-----END ENCRYPTED PRIVATE KEY-----"""
+
+RSA_PRIVATE_KEY = """-----BEGIN RSA PRIVATE KEY-----
++wn9Iu+zgamKDUu22xc45F2gdwM04rTITlZgjAs6U1zcvOzGxk8mWJD5MqFWwAtF
+zN87YGV0VMTG6ehxnkI4Fg6i0JPU3QIDAQABAoICAQCoCPjlYrODRU+vd2YeU/gM
+THd+9FBxiHLGXNKhG/FRSyREXEt+NyYIf/0cyByc9tNksat794ddUqnLOg0vwSkv
+-----END RSA PRIVATE KEY-----"""
+
 
 class SensitiveDataFilterTest(TestCase):
 
@@ -249,3 +275,80 @@ class SensitiveDataFilterTest(TestCase):
         proc = SensitiveDataFilter()
         proc.apply(data)
         assert data['extra'] == {'foo': 1}
+
+    def test_does_sanitize_public_key(self):
+        data = {
+            'extra': {
+                's': PUBLIC_KEY,
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+        assert data['extra'] == {'s': FILTER_MASK}
+
+    def test_does_sanitize_private_key(self):
+        data = {
+            'extra': {
+                's': PRIVATE_KEY,
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+        assert data['extra'] == {'s': FILTER_MASK}
+
+    def test_does_sanitize_encrypted_private_key(self):
+        data = {
+            'extra': {
+                's': ENCRYPTED_PRIVATE_KEY,
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+        assert data['extra'] == {'s': FILTER_MASK}
+
+    def test_does_sanitize_rsa_private_key(self):
+        data = {
+            'extra': {
+                's': RSA_PRIVATE_KEY,
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+        assert data['extra'] == {'s': FILTER_MASK}
+
+    def test_does_sanitize_social_security_number(self):
+        data = {
+            'extra': {
+                's': '123-45-6789',
+            },
+        }
+
+        proc = SensitiveDataFilter()
+        proc.apply(data)
+        assert data['extra'] == {'s': FILTER_MASK}
+
+    def test_exclude_fields_on_field_name(self):
+        data = {
+            'extra': {
+                'password': '123-45-6789',
+            },
+        }
+
+        proc = SensitiveDataFilter(exclude_fields=['password'])
+        proc.apply(data)
+        assert data['extra'] == {'password': '123-45-6789'}
+
+    def test_exclude_fields_on_field_value(self):
+        data = {
+            'extra': {
+                'foobar': '123-45-6789',
+            },
+        }
+
+        proc = SensitiveDataFilter(exclude_fields=['foobar'])
+        proc.apply(data)
+        assert data['extra'] == {'foobar': '123-45-6789'}
