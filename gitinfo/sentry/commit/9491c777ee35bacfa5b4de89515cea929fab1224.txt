commit 9491c777ee35bacfa5b4de89515cea929fab1224
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Dec 6 10:31:39 2019 -0800

    ref: Use "group_id" instead of "issue" (#15922)
    
    "issue" is simply an alias for "group_id", however supporting both
    fields adds unnecessary complexity. We should move to using "group_id"
    everywhere.

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index 0d239e1118..b587292f55 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -56,7 +56,7 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
                     end=snuba_args["end"],
                     conditions=snuba_args["conditions"],
                     project_ids=snuba_args["filter_keys"].get("project_id", None),
-                    group_ids=snuba_args["filter_keys"].get("issue", None),
+                    group_ids=snuba_args["filter_keys"].get("group_id", None),
                 ),
             )
 
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index 0e613d7087..257c8b1e6e 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -46,7 +46,7 @@ class Filter(object):
             filter_keys["project_id"] = self.project_ids
 
         if self.group_ids:
-            filter_keys["issue"] = self.group_ids
+            filter_keys["group_id"] = self.group_ids
 
         if self.event_ids:
             filter_keys["event_id"] = self.event_ids
diff --git a/src/sentry/search/snuba/backend.py b/src/sentry/search/snuba/backend.py
index 86a2cd12df..8e407117e9 100644
--- a/src/sentry/search/snuba/backend.py
+++ b/src/sentry/search/snuba/backend.py
@@ -34,7 +34,7 @@ aggregation_defs = {
     # https://github.com/getsentry/sentry/blob/804c85100d0003cfdda91701911f21ed5f66f67c/src/sentry/event_manager.py#L241-L271
     "priority": ["toUInt64(plus(multiply(log(times_seen), 600), last_seen))", ""],
     # Only makes sense with WITH TOTALS, returns 1 for an individual group.
-    "total": ["uniq", "issue"],
+    "total": ["uniq", "group_id"],
 }
 issue_only_fields = set(
     [
diff --git a/src/sentry/search/snuba/executors.py b/src/sentry/search/snuba/executors.py
index c194a72fd2..97f6be90b6 100644
--- a/src/sentry/search/snuba/executors.py
+++ b/src/sentry/search/snuba/executors.py
@@ -33,7 +33,7 @@ aggregation_defs = {
     # https://github.com/getsentry/sentry/blob/804c85100d0003cfdda91701911f21ed5f66f67c/src/sentry/event_manager.py#L241-L271
     "priority": ["toUInt64(plus(multiply(log(times_seen), 600), last_seen))", ""],
     # Only makes sense with WITH TOTALS, returns 1 for an individual group.
-    "total": ["uniq", "issue"],
+    "total": ["uniq", "group_id"],
 }
 issue_only_fields = set(
     [
@@ -124,7 +124,7 @@ def snuba_search(
         filters["environment"] = environment_ids
 
     if candidate_ids:
-        filters["issue"] = sorted(candidate_ids)
+        filters["group_id"] = sorted(candidate_ids)
 
     conditions = []
     having = []
@@ -161,14 +161,14 @@ def snuba_search(
     selected_columns = []
     if get_sample:
         query_hash = md5(repr(conditions)).hexdigest()[:8]
-        selected_columns.append(("cityHash64", ("'{}'".format(query_hash), "issue"), "sample"))
+        selected_columns.append(("cityHash64", ("'{}'".format(query_hash), "group_id"), "sample"))
         sort_field = "sample"
         orderby = [sort_field]
         referrer = "search_sample"
     else:
         # Get the top matching groups by score, i.e. the actual search results
         # in the order that we want them.
-        orderby = ["-{}".format(sort_field), "issue"]  # ensure stable sort within the same score
+        orderby = ["-{}".format(sort_field), "group_id"]  # ensure stable sort within the same score
         referrer = "search"
 
     snuba_results = snuba.dataset_query(
@@ -176,7 +176,7 @@ def snuba_search(
         start=start,
         end=end,
         selected_columns=selected_columns,
-        groupby=["issue"],
+        groupby=["group_id"],
         conditions=conditions,
         having=having,
         filter_keys=filters,
@@ -195,7 +195,7 @@ def snuba_search(
     if not get_sample:
         metrics.timing("snuba.search.num_result_groups", len(rows))
 
-    return [(row["issue"], row[sort_field]) for row in rows], total
+    return [(row["group_id"], row[sort_field]) for row in rows], total
 
 
 class PostgresSnubaQueryExecutor(AbstractQueryExecutor):
diff --git a/src/sentry/snuba/events.py b/src/sentry/snuba/events.py
index 9294001c8f..5518e794eb 100644
--- a/src/sentry/snuba/events.py
+++ b/src/sentry/snuba/events.py
@@ -15,7 +15,6 @@ class Columns(Enum):
 
     EVENT_ID = Column("events.event_id", "event_id", "event_id", "event_id", "id")
     GROUP_ID = Column("events.group_id", "group_id", None, "group_id", "issue.id")
-    ISSUE = Column("events.issue", "issue", None, "group_id", "issue.id")
     PROJECT_ID = Column("events.project_id", "project_id", "project_id", "project_id", "project.id")
     TIMESTAMP = Column("events.timestamp", "timestamp", "finish_ts", "timestamp", "timestamp")
     TIME = Column("events.time", "time", "bucketed_end", "time", "time")
diff --git a/src/sentry/tsdb/snuba.py b/src/sentry/tsdb/snuba.py
index be5dac8d8d..b4d1b49d26 100644
--- a/src/sentry/tsdb/snuba.py
+++ b/src/sentry/tsdb/snuba.py
@@ -36,24 +36,24 @@ class SnubaTSDB(BaseTSDB):
     # other models.
     non_outcomes_query_settings = {
         TSDBModel.project: SnubaModelQuerySettings(snuba.Dataset.Events, "project_id", None, None),
-        TSDBModel.group: SnubaModelQuerySettings(snuba.Dataset.Events, "issue", None, None),
+        TSDBModel.group: SnubaModelQuerySettings(snuba.Dataset.Events, "group_id", None, None),
         TSDBModel.release: SnubaModelQuerySettings(
             snuba.Dataset.Events, "tags[sentry:release]", None, None
         ),
         TSDBModel.users_affected_by_group: SnubaModelQuerySettings(
-            snuba.Dataset.Events, "issue", "tags[sentry:user]", None
+            snuba.Dataset.Events, "group_id", "tags[sentry:user]", None
         ),
         TSDBModel.users_affected_by_project: SnubaModelQuerySettings(
             snuba.Dataset.Events, "project_id", "tags[sentry:user]", None
         ),
         TSDBModel.frequent_environments_by_group: SnubaModelQuerySettings(
-            snuba.Dataset.Events, "issue", "environment", None
+            snuba.Dataset.Events, "group_id", "environment", None
         ),
         TSDBModel.frequent_releases_by_group: SnubaModelQuerySettings(
-            snuba.Dataset.Events, "issue", "tags[sentry:release]", None
+            snuba.Dataset.Events, "group_id", "tags[sentry:release]", None
         ),
         TSDBModel.frequent_issues_by_project: SnubaModelQuerySettings(
-            snuba.Dataset.Events, "project_id", "issue", None
+            snuba.Dataset.Events, "project_id", "group_id", None
         ),
     }
 
diff --git a/src/sentry/utils/snuba.py b/src/sentry/utils/snuba.py
index 71e6a35ee5..4683788517 100644
--- a/src/sentry/utils/snuba.py
+++ b/src/sentry/utils/snuba.py
@@ -79,7 +79,7 @@ DATASETS = {
 # Add `group_id` to the events dataset list as we don't want to publically
 # expose that field, but it is used by eventstore and other internals.
 DATASET_FIELDS = {
-    Dataset.Events: list(SENTRY_SNUBA_MAP.values()) + ["group_id"],
+    Dataset.Events: list(SENTRY_SNUBA_MAP.values()),
     Dataset.Transactions: list(TRANSACTIONS_SENTRY_SNUBA_MAP.values()),
     Dataset.Discover: list(DISCOVER_COLUMN_MAP.values()),
 }
@@ -253,7 +253,7 @@ def get_snuba_column_name(name, dataset=Dataset.Events):
     the column is assumed to be a tag. If name is falsy or name is a quoted literal
     (e.g. "'name'"), leave unchanged.
     """
-    no_conversion = set(["issue", "project_id", "start", "end"])
+    no_conversion = set(["group_id", "project_id", "start", "end"])
 
     if name in no_conversion:
         return name
@@ -667,7 +667,7 @@ def _prepare_query_params(query_params):
     # if `shrink_time_window` pushed `start` after `end` it means the user queried
     # a Group for T1 to T2 when the group was only active for T3 to T4, so the query
     # wouldn't return any results anyway
-    new_start = shrink_time_window(query_params.filter_keys.get("issue"), start)
+    new_start = shrink_time_window(query_params.filter_keys.get("group_id"), start)
 
     # TODO (alexh) this is a quick emergency fix for an occasion where a search
     # results in only 1 django candidate, which is then passed to snuba to
@@ -1181,7 +1181,7 @@ def get_snuba_translators(filter_keys, is_grouprelease=False):
                     # returned by the query.
                     row,
                     col,
-                    trans.get((row["issue"], row[col])),
+                    trans.get((row["group_id"], row[col])),
                 )
             )(col, rev_map)
 
@@ -1231,7 +1231,7 @@ def get_related_project_ids(column, ids):
     Get the project_ids from a model that has a foreign key to project.
     """
     mappings = {
-        "issue": (Group, "id", "project_id"),
+        "group_id": (Group, "id", "project_id"),
         "tags[sentry:release]": (ReleaseProject, "release_id", "project_id"),
         "release": (ReleaseProject, "release_id", "project_id"),
     }
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index d5b11a68e0..c4b8d73e49 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -996,17 +996,17 @@ class GetSnubaQueryArgsTest(TestCase):
     def test_issue_filter(self):
         filter = get_filter("issue.id:1")
         assert not filter.conditions
-        assert filter.filter_keys == {"issue": [1]}
+        assert filter.filter_keys == {"group_id": [1]}
         assert filter.group_ids == [1]
 
         filter = get_filter("issue.id:1 issue.id:2 issue.id:3")
         assert not filter.conditions
-        assert filter.filter_keys == {"issue": [1, 2, 3]}
+        assert filter.filter_keys == {"group_id": [1, 2, 3]}
         assert filter.group_ids == [1, 2, 3]
 
         filter = get_filter("issue.id:1 user.email:foo@example.com")
         assert filter.conditions == [["user.email", "=", "foo@example.com"]]
-        assert filter.filter_keys == {"issue": [1]}
+        assert filter.filter_keys == {"group_id": [1]}
         assert filter.group_ids == [1]
 
     def test_project_name(self):
diff --git a/tests/sentry/utils/test_snuba.py b/tests/sentry/utils/test_snuba.py
index a7e95b5c25..fd71d109dd 100644
--- a/tests/sentry/utils/test_snuba.py
+++ b/tests/sentry/utils/test_snuba.py
@@ -91,7 +91,7 @@ class SnubaUtilsTest(TestCase):
         # to Releases. Reverse translation depends on multiple
         # fields.
         filter_keys = {
-            "issue": [self.proj1group1.id, self.proj1group2.id],
+            "group_id": [self.proj1group1.id, self.proj1group2.id],
             "tags[sentry:release]": [
                 self.group1release1.id,
                 self.group1release2.id,
@@ -100,7 +100,7 @@ class SnubaUtilsTest(TestCase):
         }
         forward, reverse = get_snuba_translators(filter_keys, is_grouprelease=True)
         assert forward(filter_keys) == {
-            "issue": [self.proj1group1.id, self.proj1group2.id],
+            "group_id": [self.proj1group1.id, self.proj1group2.id],
             "tags[sentry:release]": [
                 self.release1.version,
                 self.release2.version,
@@ -109,17 +109,17 @@ class SnubaUtilsTest(TestCase):
         }
         result = [
             {
-                "issue": self.proj1group1.id,
+                "group_id": self.proj1group1.id,
                 "tags[sentry:release]": self.release1.version,
                 "count": 1,
             },
             {
-                "issue": self.proj1group1.id,
+                "group_id": self.proj1group1.id,
                 "tags[sentry:release]": self.release2.version,
                 "count": 2,
             },
             {
-                "issue": self.proj1group2.id,
+                "group_id": self.proj1group2.id,
                 "tags[sentry:release]": self.release1.version,
                 "count": 3,
             },
@@ -128,17 +128,17 @@ class SnubaUtilsTest(TestCase):
         result = [reverse(r) for r in result]
         assert result == [
             {
-                "issue": self.proj1group1.id,
+                "group_id": self.proj1group1.id,
                 "tags[sentry:release]": self.group1release1.id,
                 "count": 1,
             },
             {
-                "issue": self.proj1group1.id,
+                "group_id": self.proj1group1.id,
                 "tags[sentry:release]": self.group1release2.id,
                 "count": 2,
             },
             {
-                "issue": self.proj1group2.id,
+                "group_id": self.proj1group2.id,
                 "tags[sentry:release]": self.group2release1.id,
                 "count": 3,
             },
diff --git a/tests/snuba/search/test_backend.py b/tests/snuba/search/test_backend.py
index 9b01864d8f..a951fa0373 100644
--- a/tests/snuba/search/test_backend.py
+++ b/tests/snuba/search/test_backend.py
@@ -888,10 +888,10 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
             "end": Any(datetime),
             "filter_keys": {
                 "project_id": [self.project.id],
-                "issue": [self.group1.id, self.group2.id],
+                "group_id": [self.group1.id, self.group2.id],
             },
             "referrer": "search",
-            "groupby": ["issue"],
+            "groupby": ["group_id"],
             "conditions": [[["positionCaseInsensitive", ["message", "'foo'"]], "!=", 0]],
             "selected_columns": [],
             "limit": limit,
@@ -909,9 +909,9 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
             sort_by="date",
         )
         assert query_mock.call_args == mock.call(
-            orderby=["-last_seen", "issue"],
+            orderby=["-last_seen", "group_id"],
             aggregations=[
-                ["uniq", "issue", "total"],
+                ["uniq", "group_id", "total"],
                 ["multiply(toUInt64(max(timestamp)), 1000)", "", "last_seen"],
             ],
             having=[["last_seen", ">=", Any(int)]],
@@ -920,11 +920,11 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
 
         self.make_query(search_filter_query="foo", sort_by="priority")
         assert query_mock.call_args == mock.call(
-            orderby=["-priority", "issue"],
+            orderby=["-priority", "group_id"],
             aggregations=[
                 ["toUInt64(plus(multiply(log(times_seen), 600), last_seen))", "", "priority"],
                 ["count()", "", "times_seen"],
-                ["uniq", "issue", "total"],
+                ["uniq", "group_id", "total"],
                 ["multiply(toUInt64(max(timestamp)), 1000)", "", "last_seen"],
             ],
             having=[],
@@ -933,8 +933,8 @@ class SnubaSearchTest(TestCase, SnubaTestCase):
 
         self.make_query(search_filter_query="times_seen:5 foo", sort_by="freq")
         assert query_mock.call_args == mock.call(
-            orderby=["-times_seen", "issue"],
-            aggregations=[["count()", "", "times_seen"], ["uniq", "issue", "total"]],
+            orderby=["-times_seen", "group_id"],
+            aggregations=[["count()", "", "times_seen"], ["uniq", "group_id", "total"]],
             having=[["times_seen", "=", 5]],
             **common_args
         )
diff --git a/tests/snuba/test_snuba.py b/tests/snuba/test_snuba.py
index b561bed53c..8ba595caf0 100644
--- a/tests/snuba/test_snuba.py
+++ b/tests/snuba/test_snuba.py
@@ -115,19 +115,20 @@ class BulkRawQueryTest(TestCase, SnubaTestCase):
                 snuba.SnubaQueryParams(
                     start=timezone.now() - timedelta(days=1),
                     end=timezone.now(),
-                    selected_columns=["event_id", "issue", "timestamp"],
-                    filter_keys={"project_id": [self.project.id], "issue": [event_1.group.id]},
+                    selected_columns=["event_id", "group_id", "timestamp"],
+                    filter_keys={"project_id": [self.project.id], "group_id": [event_1.group.id]},
                 ),
                 snuba.SnubaQueryParams(
                     start=timezone.now() - timedelta(days=1),
                     end=timezone.now(),
-                    selected_columns=["event_id", "issue", "timestamp"],
-                    filter_keys={"project_id": [self.project.id], "issue": [event_2.group.id]},
+                    selected_columns=["event_id", "group_id", "timestamp"],
+                    filter_keys={"project_id": [self.project.id], "group_id": [event_2.group.id]},
                 ),
             ]
         )
         assert [
-            {"issue": r["data"][0]["issue"], "event_id": r["data"][0]["event_id"]} for r in results
+            {"issue": r["data"][0]["group_id"], "event_id": r["data"][0]["event_id"]}
+            for r in results
         ] == [
             {"issue": event_1.group.id, "event_id": event_1.event_id},
             {"issue": event_2.group.id, "event_id": event_2.event_id},
