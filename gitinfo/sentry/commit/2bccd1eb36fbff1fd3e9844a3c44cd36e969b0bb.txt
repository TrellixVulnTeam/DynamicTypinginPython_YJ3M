commit 2bccd1eb36fbff1fd3e9844a3c44cd36e969b0bb
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Thu Jun 25 21:08:38 2020 -0400

    fix(apm): Add inline tracing docs (#19527)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx
new file mode 100644
index 0000000000..b73d0d8567
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/inlineDocs.tsx
@@ -0,0 +1,130 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import * as Sentry from '@sentry/browser';
+
+import withApi from 'app/utils/withApi';
+import {Client} from 'app/api';
+import {loadDocs} from 'app/actionCreators/projects';
+import {t, tct} from 'app/locale';
+import LoadingIndicator from 'app/components/loadingIndicator';
+
+type Props = {
+  api: Client;
+
+  platform: string;
+  projectSlug: string;
+  orgSlug: string;
+};
+
+type State = {
+  loading: boolean;
+  html: string | undefined;
+  link: string | undefined;
+};
+
+class InlineDocs extends React.Component<Props, State> {
+  state: State = {
+    loading: true,
+    html: undefined,
+    link: undefined,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  fetchData = async () => {
+    const {platform, api, orgSlug, projectSlug} = this.props;
+
+    if (!platform) {
+      return;
+    }
+
+    this.setState({loading: true});
+
+    let tracingPlatform = '';
+    switch (platform) {
+      case 'sentry.python': {
+        tracingPlatform = 'python-tracing';
+        break;
+      }
+      case 'sentry.javascript.node': {
+        tracingPlatform = 'node-tracing';
+        break;
+      }
+      default: {
+        this.setState({loading: false});
+        return;
+      }
+    }
+
+    try {
+      const {html, link} = await loadDocs(api, orgSlug, projectSlug, tracingPlatform);
+      this.setState({html, link});
+    } catch (error) {
+      Sentry.captureException(error);
+      this.setState({html: undefined, link: undefined});
+    }
+
+    this.setState({loading: false});
+  };
+
+  render() {
+    const {platform} = this.props;
+
+    if (!platform) {
+      return null;
+    }
+
+    if (this.state.loading) {
+      return (
+        <div>
+          <LoadingIndicator />
+        </div>
+      );
+    }
+
+    if (this.state.html) {
+      return (
+        <div>
+          <h2>{t('Requires Manual Instrumentation')}</h2>
+          <DocumentationWrapper dangerouslySetInnerHTML={{__html: this.state.html}} />
+          <p>
+            {tct(
+              `For in-depth instructions on setting up tracing, view [docLink:our documentation].`,
+              {
+                docLink: <a href={this.state.link} />,
+              }
+            )}
+          </p>
+        </div>
+      );
+    }
+
+    return (
+      <div>
+        <h2>{t('Requires Manual Instrumentation')}</h2>
+        <p>
+          {tct(
+            `To manually instrument certain regions of your code, view [docLink:our documentation].`,
+            {
+              docLink: <a href="https://docs.sentry.io/performance-monitoring/setup/" />,
+            }
+          )}
+        </p>
+      </div>
+    );
+  }
+}
+
+const DocumentationWrapper = styled('div')`
+  p {
+    line-height: 1.5;
+  }
+  pre {
+    word-break: break-all;
+    white-space: pre-wrap;
+  }
+`;
+
+export default withApi(InlineDocs);
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
index 9c23d60814..fa10c3a1e3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanDetail.tsx
@@ -25,6 +25,7 @@ import withApi from 'app/utils/withApi';
 import {ProcessedSpanType, RawSpanType, ParsedTraceType, rawSpanKeys} from './types';
 import {isGapSpan, isOrphanSpan, getTraceDateTimeRange} from './utils';
 import * as SpanEntryContext from './context';
+import InlineDocs from './inlineDocs';
 
 type TransactionResult = {
   'project.name': string;
@@ -355,8 +356,20 @@ class SpanDetail extends React.Component<Props, State> {
     );
   }
 
-  render() {
-    const {span} = this.props;
+  renderSpanDetails() {
+    const {span, event, organization} = this.props;
+
+    if (isGapSpan(span)) {
+      return (
+        <SpanDetails>
+          <InlineDocs
+            platform={event.sdk?.name || ''}
+            orgSlug={organization.slug}
+            projectSlug={event.projectSlug}
+          />
+        </SpanDetails>
+      );
+    }
 
     const startTimestamp: number = span.start_timestamp;
     const endTimestamp: number = span.timestamp;
@@ -364,22 +377,12 @@ class SpanDetail extends React.Component<Props, State> {
     const duration = (endTimestamp - startTimestamp) * 1000;
     const durationString = `${duration.toFixed(3)}ms`;
 
-    if (isGapSpan(span)) {
-      return null;
-    }
-
     const unknownKeys = Object.keys(span).filter(key => {
       return !rawSpanKeys.has(key as any);
     });
 
     return (
-      <SpanDetailContainer
-        data-component="span-detail"
-        onClick={event => {
-          // prevent toggling the span detail
-          event.stopPropagation();
-        }}
-      >
+      <React.Fragment>
         {this.renderOrphanSpanMessage()}
         {this.renderSpanErrorMessage()}
         <SpanDetails>
@@ -438,6 +441,20 @@ class SpanDetail extends React.Component<Props, State> {
             </tbody>
           </table>
         </SpanDetails>
+      </React.Fragment>
+    );
+  }
+
+  render() {
+    return (
+      <SpanDetailContainer
+        data-component="span-detail"
+        onClick={event => {
+          // prevent toggling the span detail
+          event.stopPropagation();
+        }}
+      >
+        {this.renderSpanDetails()}
       </SpanDetailContainer>
     );
   }
