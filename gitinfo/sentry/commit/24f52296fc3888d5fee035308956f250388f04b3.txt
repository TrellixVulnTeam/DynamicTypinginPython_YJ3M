commit 24f52296fc3888d5fee035308956f250388f04b3
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Wed Jun 10 10:14:26 2020 +0200

    Feat(breadcrumbs): Added crumb timestamp toggle (#19190)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
index 4749899ff9..30dbd19128 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
@@ -22,23 +22,16 @@ import {
 } from './types';
 import transformCrumbs from './transformCrumbs';
 import Filter from './filter/filter';
-import ListHeader from './listHeader';
-import ListBody from './listBody';
+import List from './list';
 import Level from './level';
 import Icon from './icon';
+import {aroundContentStyle} from './styles';
 
 const MAX_CRUMBS_WHEN_COLLAPSED = 10;
+const ISO_STRING_DATE_AND_TIME_DIVISION = 10;
 
 type FilterOptions = React.ComponentProps<typeof Filter>['options'];
 
-type State = {
-  searchTerm: string;
-  breadcrumbs: BreadcrumbsWithDetails;
-  filteredByFilter: BreadcrumbsWithDetails;
-  filteredBySearch: BreadcrumbsWithDetails;
-  filterOptions: FilterOptions;
-};
-
 type Props = {
   event: Event;
   orgId: string | null;
@@ -48,6 +41,15 @@ type Props = {
   };
 };
 
+type State = {
+  searchTerm: string;
+  breadcrumbs: BreadcrumbsWithDetails;
+  filteredByFilter: BreadcrumbsWithDetails;
+  filteredBySearch: BreadcrumbsWithDetails;
+  filterOptions: FilterOptions;
+  displayRelativeTime: boolean;
+};
+
 class Breadcrumbs extends React.Component<Props, State> {
   state: State = {
     searchTerm: '',
@@ -55,6 +57,7 @@ class Breadcrumbs extends React.Component<Props, State> {
     filteredByFilter: [],
     filteredBySearch: [],
     filterOptions: [[], []],
+    displayRelativeTime: false,
   };
 
   componentDidMount() {
@@ -70,7 +73,7 @@ class Breadcrumbs extends React.Component<Props, State> {
     }
   }
 
-  listBodyRef = React.createRef<HTMLDivElement>();
+  listRef = React.createRef<HTMLDivElement>();
 
   expandCollapsedCrumbs = () => {
     this.setState(
@@ -84,7 +87,7 @@ class Breadcrumbs extends React.Component<Props, State> {
   };
 
   scrollToTheBottom = () => {
-    const element = this.listBodyRef?.current;
+    const element = this.listRef?.current;
 
     if (!element) {
       return;
@@ -101,7 +104,7 @@ class Breadcrumbs extends React.Component<Props, State> {
     let breadcrumbs = data.values;
 
     // Add the error event as the final (virtual) breadcrumb
-    const virtualCrumb = this.getVirtualCrumb();
+    const virtualCrumb = this.getVirtualCrumb(breadcrumbs[0]);
     if (virtualCrumb) {
       breadcrumbs = [...breadcrumbs, virtualCrumb];
     }
@@ -193,9 +196,17 @@ class Breadcrumbs extends React.Component<Props, State> {
     return match[1];
   };
 
-  getVirtualCrumb = (): Breadcrumb | undefined => {
+  getVirtualCrumb = (breadcrumb: Breadcrumb): Breadcrumb | undefined => {
     const {event} = this.props;
 
+    const timestamp =
+      breadcrumb?.timestamp && event.dateCreated
+        ? `${breadcrumb.timestamp.slice(
+            0,
+            ISO_STRING_DATE_AND_TIME_DIVISION
+          )}${event.dateCreated.slice(ISO_STRING_DATE_AND_TIME_DIVISION)}`
+        : undefined;
+
     const exception = event.entries.find(
       entry => entry.type === BreadcrumbType.EXCEPTION
     );
@@ -214,7 +225,7 @@ class Breadcrumbs extends React.Component<Props, State> {
           type,
           value,
         },
-        timestamp: event.dateCreated,
+        timestamp,
       };
     }
 
@@ -225,7 +236,7 @@ class Breadcrumbs extends React.Component<Props, State> {
       level: levelTag?.value as BreadcrumbLevelType,
       category: 'message',
       message: event.message,
-      timestamp: event.dateCreated,
+      timestamp,
     };
   };
 
@@ -322,12 +333,18 @@ class Breadcrumbs extends React.Component<Props, State> {
     }));
   };
 
+  handleSwitchTimeFormat = () => {
+    this.setState(prevState => ({
+      displayRelativeTime: !prevState.displayRelativeTime,
+    }));
+  };
+
   render() {
     const {type, event, orgId} = this.props;
-    const {filterOptions, searchTerm, filteredBySearch} = this.state;
+    const {filterOptions, searchTerm, filteredBySearch, displayRelativeTime} = this.state;
 
     return (
-      <EventDataSection
+      <StyledEventDataSection
         type={type}
         title={
           <GuideAnchor target="breadcrumbs" position="bottom">
@@ -351,46 +368,40 @@ class Breadcrumbs extends React.Component<Props, State> {
         wrapTitle={false}
         isCentered
       >
-        <Content>
-          {filteredBySearch.length > 0 ? (
-            <React.Fragment>
-              <ListHeader />
-              <ListBody
-                event={event}
-                orgId={orgId}
-                breadcrumbs={filteredBySearch}
-                ref={this.listBodyRef}
-              />
-            </React.Fragment>
-          ) : (
-            <StyledEmptyMessage
-              icon={<IconWarning size="xl" />}
-              action={
-                <Button onClick={this.handleResetFilter} priority="primary">
-                  {t('Reset Filter')}
-                </Button>
-              }
-            >
-              {t('Sorry, no breadcrumbs match your search query.')}
-            </StyledEmptyMessage>
-          )}
-        </Content>
-      </EventDataSection>
+        {filteredBySearch.length > 0 ? (
+          <List
+            breadcrumbs={filteredBySearch}
+            ref={this.listRef}
+            event={event}
+            orgId={orgId}
+            onSwitchTimeFormat={this.handleSwitchTimeFormat}
+            displayRelativeTime={displayRelativeTime}
+          />
+        ) : (
+          <StyledEmptyMessage
+            icon={<IconWarning size="xl" />}
+            action={
+              <Button onClick={this.handleResetFilter} priority="primary">
+                {t('Reset Filter')}
+              </Button>
+            }
+          >
+            {t('Sorry, no breadcrumbs match your search query.')}
+          </StyledEmptyMessage>
+        )}
+      </StyledEventDataSection>
     );
   }
 }
 
 export default Breadcrumbs;
 
-const Content = styled('div')`
-  box-shadow: ${p => p.theme.dropShadowLightest};
-  border-radius: ${p => p.theme.borderRadius};
+const StyledEventDataSection = styled(EventDataSection)`
   margin-bottom: ${space(3)};
 `;
 
 const StyledEmptyMessage = styled(EmptyMessage)`
-  border: 1px solid ${p => p.theme.borderDark};
-  border-radius: ${p => p.theme.borderRadius};
+  ${aroundContentStyle};
 `;
 
 const Search = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/list.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/list.tsx
new file mode 100644
index 0000000000..df1ffbf6bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/list.tsx
@@ -0,0 +1,49 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import space from 'app/styles/space';
+
+import ListHeader from './listHeader';
+import ListBody from './listBody';
+import {aroundContentStyle} from './styles';
+
+type Props = {
+  onSwitchTimeFormat: () => void;
+} & Omit<React.ComponentProps<typeof ListBody>, 'relativeTime'>;
+
+const List = React.forwardRef(
+  (
+    {displayRelativeTime, onSwitchTimeFormat, orgId, event, breadcrumbs}: Props,
+    ref: React.Ref<HTMLDivElement>
+  ) => (
+    <Grid ref={ref}>
+      <ListHeader
+        onSwitchTimeFormat={onSwitchTimeFormat}
+        displayRelativeTime={!!displayRelativeTime}
+      />
+      <ListBody
+        event={event}
+        orgId={orgId}
+        breadcrumbs={breadcrumbs}
+        relativeTime={breadcrumbs[breadcrumbs.length - 1]?.timestamp}
+        displayRelativeTime={!!displayRelativeTime}
+      />
+    </Grid>
+  )
+);
+
+export default List;
+
+const Grid = styled('div')`
+  max-height: 500px;
+  overflow-y: auto;
+  display: grid;
+  > *:nth-last-child(5):before {
+    bottom: calc(100% - ${space(1)});
+  }
+  grid-template-columns: max-content minmax(55px, 1fr) 6fr max-content 65px;
+  @media (min-width: ${p => p.theme.breakpoints[0]}) {
+    grid-template-columns: max-content minmax(132px, 1fr) 6fr max-content max-content;
+  }
+  ${aroundContentStyle}
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
index a00b29de98..0ffe2e4a45 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
@@ -1,35 +1,33 @@
 import React from 'react';
 import styled from '@emotion/styled';
-import PropTypes from 'prop-types';
 
 import {Event} from 'app/types';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
-import SentryTypes from 'app/sentryTypes';
 
-import Time from './time';
+import Time from './time/time';
 import Data from './data/data';
 import Category from './category';
 import Icon from './icon';
 import Level from './level';
-import {Grid, GridCell, GridCellLeft} from './styles';
+import {GridCell, GridCellLeft} from './styles';
 import {Breadcrumb, BreadcrumbsWithDetails, BreadcrumbType} from './types';
 
 type Props = {
   breadcrumbs: BreadcrumbsWithDetails;
   event: Event;
   orgId: string | null;
+  relativeTime?: string;
+  displayRelativeTime?: boolean;
 };
 
-const ListBody = React.forwardRef<HTMLDivElement, Props>(function ListBody(
-  {orgId, event, breadcrumbs},
-  ref
-) {
-  return (
-    <StyledGrid ref={ref}>
+const ListBody = React.memo(
+  ({orgId, event, breadcrumbs, relativeTime, displayRelativeTime}: Props) => (
+    <React.Fragment>
       {breadcrumbs.map(({color, icon, id, ...crumb}, idx) => {
         const hasError = crumb.type === BreadcrumbType.ERROR;
         const isLastItem = breadcrumbs.length - 1 === idx;
+
         return (
           <React.Fragment key={id}>
             <GridCellLeft hasError={hasError} isLastItem={isLastItem}>
@@ -47,32 +45,23 @@ const ListBody = React.forwardRef<HTMLDivElement, Props>(function ListBody(
               <Level level={crumb.level} />
             </GridCell>
             <GridCell hasError={hasError} isLastItem={isLastItem}>
-              <Time timestamp={crumb.timestamp} />
+              <Time
+                timestamp={crumb?.timestamp}
+                relativeTime={relativeTime}
+                displayRelativeTime={displayRelativeTime}
+              />
             </GridCell>
           </React.Fragment>
         );
       })}
-    </StyledGrid>
-  );
-});
-
-export default React.memo(ListBody) as typeof ListBody;
+    </React.Fragment>
+  )
+);
 
-ListBody.propTypes = {
-  breadcrumbs: PropTypes.array.isRequired,
-  event: SentryTypes.Event.isRequired,
-  orgId: PropTypes.string.isRequired,
-};
+export default ListBody;
 
 const GridCellCategory = styled(GridCell)`
   @media (min-width: ${p => p.theme.breakpoints[0]}) {
     padding-left: ${space(1)};
   }
 `;
-
-const StyledGrid = styled(Grid)`
-  border-radius: ${p => p.theme.borderRadiusBottom};
-  border-top: 0;
-  overflow-y: auto;
-  max-height: 450px;
-`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
index 23b7c2bf13..ac70540df5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
@@ -2,23 +2,45 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
+import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
+import {IconSwitch} from 'app/icons';
 
-import {Grid, GridCell} from './styles';
+import {GridCell} from './styles';
 
-const ListHeader = () => (
-  <StyledGrid>
+const getTimeTooltipTitle = (displayRelativeTime: boolean) => {
+  if (displayRelativeTime) {
+    return t('Switch to absolute');
+  }
+  return t('Switch to relative');
+};
+
+type Props = {
+  onSwitchTimeFormat: () => void;
+  displayRelativeTime: boolean;
+};
+
+const ListHeader = React.memo(({onSwitchTimeFormat, displayRelativeTime}: Props) => (
+  <React.Fragment>
     <StyledGridCell>{t('Type')}</StyledGridCell>
-    <StyledGridCellCategory>{t('Category')}</StyledGridCellCategory>
+    <Category>{t('Category')}</Category>
     <StyledGridCell>{t('Description')}</StyledGridCell>
     <StyledGridCell>{t('Level')}</StyledGridCell>
-    <StyledGridCell>{t('Time')}</StyledGridCell>
-  </StyledGrid>
-);
+    <Time onClick={onSwitchTimeFormat}>
+      <Tooltip title={getTimeTooltipTitle(displayRelativeTime)}>
+        <StyledIconSwitch size="xs" />
+      </Tooltip>
+      <span> {t('Time')}</span>
+    </Time>
+  </React.Fragment>
+));
 
 export default ListHeader;
 
 const StyledGridCell = styled(GridCell)`
+  position: sticky;
+  z-index: ${p => p.theme.zIndex.breadcrumbs.header};
+  top: 0;
   border-bottom: 1px solid ${p => p.theme.borderDark};
   background: ${p => p.theme.gray100};
   color: ${p => p.theme.gray600};
@@ -33,13 +55,22 @@ const StyledGridCell = styled(GridCell)`
   }
 `;
 
-const StyledGridCellCategory = styled(StyledGridCell)`
+const Category = styled(StyledGridCell)`
   @media (min-width: ${p => p.theme.breakpoints[0]}) {
     padding-left: ${space(1)};
   }
 `;
 
-const StyledGrid = styled(Grid)`
-  border-radius: ${p => p.theme.borderRadiusTop};
-  margin-bottom: 0;
+const Time = styled(StyledGridCell)`
+  display: grid;
+  grid-template-columns: max-content 1fr;
+  grid-gap: ${space(1)};
+  cursor: pointer;
+`;
+
+const StyledIconSwitch = styled(IconSwitch)`
+  transition: 0.15s color;
+  &:hover {
+    color: ${p => p.theme.gray500};
+  }
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
index e8e5252c76..6d3e1e178b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
@@ -1,6 +1,7 @@
 import styled from '@emotion/styled';
+import {css} from '@emotion/core';
 
-import {Color} from 'app/utils/theme';
+import theme, {Color} from 'app/utils/theme';
 import space from 'app/styles/space';
 
 const IconWrapper = styled('div', {
@@ -17,7 +18,7 @@ const IconWrapper = styled('div', {
   background: ${p => p.theme.white};
   box-shadow: ${p => p.theme.dropShadowLightest};
   border-radius: 32px;
-  z-index: 1;
+  z-index: ${p => p.theme.zIndex.breadcrumbs.iconWrapper};
   position: relative;
   border: 1px solid ${p => p.theme.gray400};
   color: ${p => p.theme.gray800};
@@ -48,7 +49,7 @@ const GridCell = styled('div')<{
       background: #fffcfb;
       border-top: 1px solid #fa4747;
       border-bottom: 1px solid #fa4747;
-      z-index: 1;
+      z-index: ${p.theme.zIndex.breadcrumbs.gridCellError};
     `}
   ${p => p.isLastItem && `border-bottom: none`};
 `;
@@ -72,17 +73,10 @@ const GridCellLeft = styled(GridCell)`
   }
 `;
 
-const Grid = styled('div')`
-  border: 1px solid ${p => p.theme.borderDark};
-  display: grid;
-  overflow: hidden;
-  > *:nth-last-child(5):before {
-    bottom: calc(100% - ${space(1)});
-  }
-  grid-template-columns: 45px 55px 1fr 76px 65px;
-  @media (min-width: ${p => p.theme.breakpoints[0]}) {
-    grid-template-columns: 65px 132px 1fr 94px 84px;
-  }
+const aroundContentStyle = css`
+  border: 1px solid ${theme.borderDark};
+  border-radius: ${theme.borderRadius};
+  box-shadow: ${theme.dropShadowLightest};
 `;
 
-export {Grid, GridCell, GridCellLeft, IconWrapper};
+export {GridCell, GridCellLeft, IconWrapper, aroundContentStyle};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx
deleted file mode 100644
index 79f772a026..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx
+++ /dev/null
@@ -1,43 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-import moment from 'moment';
-
-import {defined} from 'app/utils';
-import Tooltip from 'app/components/tooltip';
-import getDynamicText from 'app/utils/getDynamicText';
-import TextOverflow from 'app/components/textOverflow';
-
-const getBreadcrumbTimeTooltipTitle = (timestamp: string) => {
-  const parsedTimestamp = moment(timestamp);
-  const timestampFormat = parsedTimestamp.milliseconds() ? 'll H:mm:ss.SSS A' : 'lll';
-  return parsedTimestamp.format(timestampFormat);
-};
-
-type Props = {
-  timestamp?: string;
-};
-
-const Time = React.memo(({timestamp}: Props) =>
-  defined(timestamp) ? (
-    <Wrapper>
-      <Tooltip
-        title={getBreadcrumbTimeTooltipTitle(timestamp)}
-        containerDisplayMode="inline-flex"
-      >
-        <TextOverflow>
-          {getDynamicText({
-            value: moment(timestamp).format('HH:mm:ss'),
-            fixed: '00:00:00',
-          })}
-        </TextOverflow>
-      </Tooltip>
-    </Wrapper>
-  ) : null
-);
-
-export default Time;
-
-const Wrapper = styled('div')`
-  font-size: ${p => p.theme.fontSizeSmall};
-  color: ${p => p.theme.gray700};
-`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/time.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/time.tsx
new file mode 100644
index 0000000000..6e24308169
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/time.tsx
@@ -0,0 +1,57 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {defined} from 'app/utils';
+import Tooltip from 'app/components/tooltip';
+import getDynamicText from 'app/utils/getDynamicText';
+import TextOverflow from 'app/components/textOverflow';
+import space from 'app/styles/space';
+
+import {getFormattedTimestamp} from './utils';
+
+type Props = {
+  timestamp?: string;
+  relativeTime?: string;
+  displayRelativeTime?: boolean;
+};
+
+const Time = React.memo(({timestamp, relativeTime, displayRelativeTime}: Props) => {
+  if (!(defined(timestamp) && defined(relativeTime))) {
+    return null;
+  }
+
+  const {date, time, displayTime} = getFormattedTimestamp(
+    timestamp,
+    relativeTime,
+    displayRelativeTime
+  );
+
+  return (
+    <Wrapper displayRelativeTime={displayRelativeTime}>
+      <Tooltip
+        title={
+          <div>
+            <div>{date}</div>
+            {time !== '\u2014' && <div>{time}</div>}
+          </div>
+        }
+        containerDisplayMode="inline-flex"
+      >
+        <TextOverflow>
+          {getDynamicText({
+            value: displayTime,
+            fixed: '00:00:00',
+          })}
+        </TextOverflow>
+      </Tooltip>
+    </Wrapper>
+  );
+});
+
+export default Time;
+
+const Wrapper = styled('div')<{displayRelativeTime?: boolean}>`
+  font-size: ${p => p.theme.fontSizeSmall};
+  color: ${p => p.theme.gray700};
+  ${p => p.displayRelativeTime && `padding-left: ${space(3)};`}
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/utils.tsx
new file mode 100644
index 0000000000..1840299ff8
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time/utils.tsx
@@ -0,0 +1,113 @@
+import moment from 'moment';
+
+import {use24Hours} from 'app/utils/dates';
+import {defined} from 'app/utils';
+import {t} from 'app/locale';
+
+enum TimeAbbreviation {
+  SECOND = 'second',
+  MINUTE = 'minute',
+  HOUR = 'hour',
+  DAY = 'day',
+  YEAR = 'year',
+}
+
+const timeFormat = 'HH:mm:ss';
+const timeDateFormat = `ll ${timeFormat}`;
+
+const getTimeShortString = (type: TimeAbbreviation, time: number) => {
+  switch (type) {
+    case TimeAbbreviation.SECOND:
+      return t('%s sec', time);
+    case TimeAbbreviation.MINUTE:
+      return t('%s min', time);
+    case TimeAbbreviation.HOUR:
+      return t('%s hr', time);
+    case TimeAbbreviation.DAY:
+      return t('%s d', time);
+    case TimeAbbreviation.YEAR:
+      return t('%s y', time);
+    default:
+      return '';
+  }
+};
+
+const getShortRelativeTime = (milliseconds: number) => {
+  const seconds = Math.round(milliseconds / 1000);
+  const minutes = Math.round(seconds / 60);
+  const hours = Math.round(minutes / 60);
+  const days = Math.round(hours / 24);
+  const years = Math.round(days / 365);
+
+  const args = ((seconds < 45 && [TimeAbbreviation.SECOND, seconds]) ||
+    (minutes < 45 && [TimeAbbreviation.MINUTE, minutes]) ||
+    (hours < 22 && [TimeAbbreviation.HOUR, hours]) ||
+    (days <= 300 && [TimeAbbreviation.DAY, days]) || [TimeAbbreviation.YEAR, years]) as [
+    TimeAbbreviation,
+    number
+  ];
+
+  return getTimeShortString(args[0], args[1]);
+};
+
+const getRelativeTime = (
+  parsedTime: ReturnType<typeof moment>,
+  parsedTimeToCompareWith: ReturnType<typeof moment>,
+  displayRelativeTime?: boolean
+) => {
+  // ll is necessary here, otherwise moment(x).from will throw an error
+  const formattedTime = moment(parsedTime.format(timeDateFormat));
+  const formattedTimeToCompareWith = parsedTimeToCompareWith.format(timeDateFormat);
+  const timeDiff = Math.abs(formattedTime.diff(formattedTimeToCompareWith));
+  const shortRelativeTime = getShortRelativeTime(timeDiff);
+
+  if (timeDiff !== 0) {
+    return displayRelativeTime
+      ? `-${shortRelativeTime}`
+      : t('%s before', shortRelativeTime);
+  }
+
+  return `\xA0${shortRelativeTime}`;
+};
+
+const getAbsoluteTimeFormat = (format: string) => {
+  if (use24Hours()) {
+    return format;
+  }
+  return `${format} A`;
+};
+
+const getFormattedTimestamp = (
+  timestamp: string,
+  relativeTimestamp: string,
+  displayRelativeTime?: boolean
+) => {
+  const parsedTimestamp = moment(timestamp);
+  const date = parsedTimestamp.format('ll');
+
+  const displayMilliSeconds = defined(parsedTimestamp.milliseconds());
+
+  const relativeTime = getRelativeTime(
+    parsedTimestamp,
+    moment(relativeTimestamp),
+    displayRelativeTime
+  );
+
+  if (!displayRelativeTime) {
+    return {
+      date: `${date} ${parsedTimestamp.format(getAbsoluteTimeFormat('HH:mm'))}`,
+      time: relativeTime,
+      displayTime: parsedTimestamp.format(timeFormat),
+    };
+  }
+
+  return {
+    date,
+    time: parsedTimestamp.format(
+      getAbsoluteTimeFormat(displayMilliSeconds ? `${timeFormat}.SSS` : timeFormat)
+    ),
+    displayTime: relativeTime,
+  };
+};
+
+export {getFormattedTimestamp};
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index 7b98ad81de..8f54a93b41 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -267,6 +267,11 @@ const theme = {
 
   // Try to keep these ordered plz
   zIndex: {
+    breadcrumbs: {
+      header: 2,
+      gridCellError: 1,
+      iconWrapper: 1,
+    },
     traceView: {
       spanTreeToggler: 900,
       rowInfoMessage: 900,
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap b/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
index 4345ef926b..edda61844a 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
+++ b/tests/js/spec/components/events/interfaces/breadcrumbs/__snapshots__/filter.spec.tsx.snap
@@ -715,6 +715,11 @@ exports[`Filter default render 1`] = `
                     "yellowOrangeDark": "#E08D54",
                     "yellowOrangeLight": "#FFC087",
                     "zIndex": Object {
+                      "breadcrumbs": Object {
+                        "gridCellError": 1,
+                        "header": 2,
+                        "iconWrapper": 1,
+                      },
                       "dropdown": 1001,
                       "dropdownAutocomplete": Object {
                         "actor": 1008,
