commit 66337c5baf5c258b8f03a9b84dc1eed94c806da7
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Jun 1 14:41:46 2018 -0700

    ref(services): Log unexpected exception types in secondary backends as warnings (#8639)

diff --git a/src/sentry/utils/services.py b/src/sentry/utils/services.py
index 605fbfbc61..d0ac923019 100644
--- a/src/sentry/utils/services.py
+++ b/src/sentry/utils/services.py
@@ -304,7 +304,7 @@ class ServiceDelegator(Service):
                     '{!r} is not a registered backend.'.format(
                         selected_backend_names[0]))
 
-            def call_backend_method(context, backend):
+            def call_backend_method(context, backend, is_primary):
                 # Update the thread local state in the executor to the provided
                 # context object. This allows the context to be propagated
                 # across different threads.
@@ -321,6 +321,22 @@ class ServiceDelegator(Service):
                 context.backends[base] = backend
                 try:
                     return getattr(backend, attribute_name)(*args, **kwargs)
+                except Exception as e:
+                    # If this isn't the primary backend, we log any unexpected
+                    # exceptions so that they don't pass by unnoticed. (Any
+                    # exceptions raised by the primary backend aren't logged
+                    # here, since it's assumed that the caller will log them
+                    # from the calling thread.)
+                    if not is_primary:
+                        expected_raises = getattr(base_value, '__raises__', [])
+                        if not expected_raises or not isinstance(e, tuple(expected_raises)):
+                            logger.warning('%s caught in executor while calling %r on %s.',
+                                type(e).__name__,
+                                attribute_name,
+                                type(backend).__name__,
+                                exc_info=True,
+                            )
+                    raise
                 finally:
                     type(self).__state.context = None
 
@@ -350,6 +366,7 @@ class ServiceDelegator(Service):
                             call_backend_method,
                             context.copy(),
                             backend,
+                            is_primary=False,
                         ),
                         priority=1,
                         block=False,
@@ -364,6 +381,7 @@ class ServiceDelegator(Service):
                     call_backend_method,
                     context.copy(),
                     backend,
+                    is_primary=True,
                 ),
                 priority=0,
                 block=True,
