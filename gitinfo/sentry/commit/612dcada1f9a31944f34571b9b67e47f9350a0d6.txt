commit 612dcada1f9a31944f34571b9b67e47f9350a0d6
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Thu Feb 9 14:18:06 2017 +0100

    Add reprocessingreport with bar in stream, Add UI for reprocess link

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 2c8601b192..2a0d3080c5 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -4,7 +4,7 @@ from rest_framework.response import Response
 
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize
-from sentry.models import ProcessingIssue
+from sentry.models import ProcessingIssue, ReprocessingReport
 
 
 class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
@@ -23,12 +23,16 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
         resolveable_issues, has_more = ProcessingIssue.objects \
             .find_resolved(project_id=project.id)
 
+        reprocessing_issues = ReprocessingReport.objects \
+            .filter(project_id=project.id).count()
+
         data = {
             'hasIssues': num_issues > 0,
             'numIssues': num_issues,
             'lastSeen': last_seen and serialize(last_seen.datetime) or None,
             'resolveableIssues': len(resolveable_issues),
             'hasMoreResolveableIssues': has_more,
+            'issuesProcessing': reprocessing_issues,
         }
 
         if request.GET.get('detailed') == '1':
diff --git a/src/sentry/models/reprocessingreport.py b/src/sentry/models/reprocessingreport.py
new file mode 100644
index 0000000000..6c605abf87
--- /dev/null
+++ b/src/sentry/models/reprocessingreport.py
@@ -0,0 +1,32 @@
+"""
+sentry.models.rawevent
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2017 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from django.db import models
+from django.utils import timezone
+
+from sentry.db.models import (
+    BaseManager, Model, FlexibleForeignKey, sane_repr
+)
+
+
+class ReprocessingReport(Model):
+    __core__ = False
+
+    project = FlexibleForeignKey('sentry.Project')
+    event_id = models.CharField(max_length=32, null=True)
+    datetime = models.DateTimeField(default=timezone.now)
+
+    objects = BaseManager()
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_reprocessingreport'
+        unique_together = (('project', 'event_id'),)
+
+    __repr__ = sane_repr('project_id')
diff --git a/src/sentry/south_migrations/0292_auto__add_processingissue__add_unique_processingissue_project_checksum.py b/src/sentry/south_migrations/0292_auto__add_reprocessingreport__add_unique_reprocessingreport_project_ev.py
similarity index 97%
rename from src/sentry/south_migrations/0292_auto__add_processingissue__add_unique_processingissue_project_checksum.py
rename to src/sentry/south_migrations/0292_auto__add_reprocessingreport__add_unique_reprocessingreport_project_ev.py
index 9194b49993..c776e05f4b 100644
--- a/src/sentry/south_migrations/0292_auto__add_processingissue__add_unique_processingissue_project_checksum.py
+++ b/src/sentry/south_migrations/0292_auto__add_reprocessingreport__add_unique_reprocessingreport_project_ev.py
@@ -8,19 +8,17 @@ from django.db import models
 class Migration(SchemaMigration):
 
     def forwards(self, orm):
-        # Adding model 'ProcessingIssue'
-        db.create_table('sentry_processingissue', (
+        # Adding model 'ReprocessingReport'
+        db.create_table('sentry_reprocessingreport', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'])),
-            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=40, db_index=True)),
-            ('type', self.gf('django.db.models.fields.CharField')(max_length=30)),
-            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()),
+            ('event_id', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)),
             ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
-        db.send_create_signal('sentry', ['ProcessingIssue'])
+        db.send_create_signal('sentry', ['ReprocessingReport'])
 
-        # Adding unique constraint on 'ProcessingIssue', fields ['project', 'checksum', 'type']
-        db.create_unique('sentry_processingissue', ['project_id', 'checksum', 'type'])
+        # Adding unique constraint on 'ReprocessingReport', fields ['project', 'event_id']
+        db.create_unique('sentry_reprocessingreport', ['project_id', 'event_id'])
 
         # Adding model 'RawEvent'
         db.create_table('sentry_rawevent', (
@@ -35,6 +33,20 @@ class Migration(SchemaMigration):
         # Adding unique constraint on 'RawEvent', fields ['project', 'event_id']
         db.create_unique('sentry_rawevent', ['project_id', 'event_id'])
 
+        # Adding model 'ProcessingIssue'
+        db.create_table('sentry_processingissue', (
+            ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
+            ('project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Project'])),
+            ('checksum', self.gf('django.db.models.fields.CharField')(max_length=40, db_index=True)),
+            ('type', self.gf('django.db.models.fields.CharField')(max_length=30)),
+            ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()),
+            ('datetime', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        ))
+        db.send_create_signal('sentry', ['ProcessingIssue'])
+
+        # Adding unique constraint on 'ProcessingIssue', fields ['project', 'checksum', 'type']
+        db.create_unique('sentry_processingissue', ['project_id', 'checksum', 'type'])
+
         # Adding model 'EventProcessingIssue'
         db.create_table('sentry_eventprocessingissue', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
@@ -51,18 +63,24 @@ class Migration(SchemaMigration):
         # Removing unique constraint on 'EventProcessingIssue', fields ['raw_event', 'processing_issue']
         db.delete_unique('sentry_eventprocessingissue', ['raw_event_id', 'processing_issue_id'])
 
+        # Removing unique constraint on 'ProcessingIssue', fields ['project', 'checksum', 'type']
+        db.delete_unique('sentry_processingissue', ['project_id', 'checksum', 'type'])
+
         # Removing unique constraint on 'RawEvent', fields ['project', 'event_id']
         db.delete_unique('sentry_rawevent', ['project_id', 'event_id'])
 
-        # Removing unique constraint on 'ProcessingIssue', fields ['project', 'checksum', 'type']
-        db.delete_unique('sentry_processingissue', ['project_id', 'checksum', 'type'])
+        # Removing unique constraint on 'ReprocessingReport', fields ['project', 'event_id']
+        db.delete_unique('sentry_reprocessingreport', ['project_id', 'event_id'])
 
-        # Deleting model 'ProcessingIssue'
-        db.delete_table('sentry_processingissue')
+        # Deleting model 'ReprocessingReport'
+        db.delete_table('sentry_reprocessingreport')
 
         # Deleting model 'RawEvent'
         db.delete_table('sentry_rawevent')
 
+        # Deleting model 'ProcessingIssue'
+        db.delete_table('sentry_processingissue')
+
         # Deleting model 'EventProcessingIssue'
         db.delete_table('sentry_eventprocessingissue')
 
@@ -150,7 +168,7 @@ class Migration(SchemaMigration):
         'sentry.broadcast': {
             'Meta': {'object_name': 'Broadcast'},
             'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 2, 15, 0, 0)', 'null': 'True', 'blank': 'True'}),
+            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2017, 2, 16, 0, 0)', 'null': 'True', 'blank': 'True'}),
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
             'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
@@ -672,6 +690,13 @@ class Migration(SchemaMigration):
             'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
             'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
         },
+        'sentry.reprocessingreport': {
+            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
+            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
+            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
+            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
+            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
+        },
         'sentry.rule': {
             'Meta': {'object_name': 'Rule'},
             'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
@@ -758,7 +783,7 @@ class Migration(SchemaMigration):
             'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
             'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
             'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
-            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'Ai364FIgjA5fHLxpJDcbN17YOiaTLafc'", 'max_length': '32'})
+            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'H3i1goOqLSOME8yr7RriqoUaYdvGIbev'", 'max_length': '32'})
         },
         'sentry.useroption': {
             'Meta': {'unique_together': "(('user', 'project', 'key'),)", 'object_name': 'UserOption'},
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 8d2e91f729..38dad503bd 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -34,6 +34,7 @@ const ProjectProcessingIssues = React.createClass({
   getInitialState() {
     return {
       loading: true,
+      reprocessing: false,
       error: false,
       processingIssues: null,
     };
@@ -64,14 +65,26 @@ const ProjectProcessingIssues = React.createClass({
   },
 
   sendReprocessing() {
+    this.setState({
+      reprocessing: true
+    });
     let loadingIndicator = IndicatorStore.add(t('Started reprocessing..'));
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/reprocessing/`, {
       method: 'POST',
       success: (data, _, jqXHR) => {
-
+        setTimeout(() => {
+          this.fetchData();
+          IndicatorStore.remove(loadingIndicator);
+          this.setState({
+            reprocessing: false
+          });
+        }, 1000);
       },
       error: () => {
+        this.setState({
+          reprocessing: false
+        });
         IndicatorStore.remove(loadingIndicator);
       }
     });
@@ -160,21 +173,18 @@ const ProjectProcessingIssues = React.createClass({
 
   renderResolveButton() {
     let issues = this.state.processingIssues;
-    if (issues === null) {
+    if (issues === null || this.state.reprocessing) {
       return null;
     }
-    let disabled = true;
-    let fixButton = t('Fix Events');
-    if (issues.resolveableIssues > 0) {
-      disabled = false;
-      fixButton = tn('Fix (%d) unprocessed Event', 'Fix (%d) unprocessed Events', issues.resolveableIssues);
+    if (issues.resolveableIssues <= 0) {
+      return null;
     }
+    let fixButton = tn('Click here to trigger reprocessing for %d Issue',
+      'Click here to trigger reprocessing for %d Issues',
+      issues.resolveableIssues);
     return (
-      <div className="form-actions">
-        <button className="btn btn-primary"
-                disabled={disabled}
-                onClick={this.sendReprocessing}
-                type="submit">{fixButton}</button>
+      <div className="alert alert-block alert-info">
+        Pro Tip: <a onClick={this.sendReprocessing}>{fixButton}</a>
       </div>
     );
   },
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 9d47be8f54..d5f7f97a52 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -197,7 +197,9 @@ const Stream = React.createClass({
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
       success: (data) => {
-        if (data.hasIssues || data.resolveableIssues > 0) {
+        if (data.hasIssues
+          || data.resolveableIssues > 0
+          || data.issuesProcessing > 0) {
           this.setState({
             processingIssues: data,
           });
@@ -515,37 +517,46 @@ const Stream = React.createClass({
 
     let {orgId, projectId} = this.props.params;
     let link = `/${orgId}/${projectId}/settings/processing-issues/`;
+    let showLink = false;
+    let label = t('Unprocessed Issues: ');
 
     if (pi.numIssues > 0) {
       let issues = tn('is %d problem', 'are %d problems', pi.numIssues);
 
       return (
-        <div className="processing-issues issues">
-          <strong>{t('Unprocessed Issues: ')}</strong>
+        <div className="processing-issues failing">
+          <strong>{label}</strong>
           {tct('there [issues]', {
             issues: issues
           })}
           {' '}
           <span className="last-seen">({t('last issue')}:
-            <TimeSince date={pi.lastSeen}/>)</span>
+            <TimeSince date={pi.lastSeen}/>)
+          </span>
           {' '}
           <Link to={link}>{t('show details')}</Link>
         </div>
       );
+    } else if (pi.issuesProcessing > 0) {
+      label = tn('Currently processing %d Issue...',
+        'Currently processing %d Issues...',
+        pi.issuesProcessing);
     } else if (pi.resolveableIssues > 0) {
-      let fixableEvents = tn('Fix (%d) unprocessed Event',
-        'Fix (%d) unprocessed Events',
+      label = tn('Currently pending %d Issue...',
+        'Currently pending %d Issues...',
         pi.resolveableIssues);
+      showLink = true;
+    }
 
-      return (
-        <div className="processing-issues resolveable">
-          <strong>{fixableEvents}:</strong>
-          {' '}
+    return (
+      <div className="processing-issues pending">
+        <strong>{label}</strong>
+        {' '}
+        {showLink &&
           <Link to={link}>{t('show details')}</Link>
-        </div>
-      );
-    }
-    return null;
+        }
+      </div>
+    );
   },
 
   renderGroupNodes(ids, statsPeriod) {
diff --git a/src/sentry/static/sentry/less/stream.less b/src/sentry/static/sentry/less/stream.less
index 8b65c96213..ca14a8df8c 100644
--- a/src/sentry/static/sentry/less/stream.less
+++ b/src/sentry/static/sentry/less/stream.less
@@ -200,7 +200,16 @@
   padding: 5px 10px;
   text-align: center;
 
-  &.issues {
+  &.failing {
+    border: 1px solid @orange;
+    background: lighten(@orange-light, 33%);
+    color: @orange-dark;
+    a {
+      color: @orange-dark;
+    }
+  }
+
+  &.pending {
     border: 1px solid @purple-light;
     background: lighten(@purple-lightest, 15%);
     color: @purple-dark;
@@ -209,7 +218,7 @@
     }
   }
 
-  &.resolveable {
+  &.processing {
     border: 1px solid @green;
     background: lighten(@green-light, 33%);
     color: @green-dark;
diff --git a/src/sentry/tasks/reprocessing.py b/src/sentry/tasks/reprocessing.py
index cd80ab0a9c..0a32ad0217 100644
--- a/src/sentry/tasks/reprocessing.py
+++ b/src/sentry/tasks/reprocessing.py
@@ -23,6 +23,7 @@ def reprocess_events(project_id, **kwargs):
     lock_key = 'events:reprocess_events:%s' % project_id
     have_more = False
     lock = app.locks.get(lock_key, duration=60)
+
     try:
         with lock.acquire():
             raw_events, have_more = ProcessingIssue.objects \
@@ -31,6 +32,8 @@ def reprocess_events(project_id, **kwargs):
                 helper = ClientApiHelper()
                 for raw_event in raw_events:
                     helper.insert_data_to_database(raw_event.data.data)
+                    create_reprocessing_report(project_id=project_id,
+                        event_id=raw_event.event_id)
                     raw_event.delete()
     except UnableToAcquireLock as error:
         logger.warning('reprocess_events.fail', extra={'error': error})
@@ -40,6 +43,14 @@ def reprocess_events(project_id, **kwargs):
         reprocess_events.delay(project_id=project_id)
 
 
+def create_reprocessing_report(project_id, event_id):
+    from sentry.models import ReprocessingReport
+    return ReprocessingReport.objects.create(
+        project_id=project_id,
+        event_id=event_id
+    )
+
+
 @instrumented_task(name='sentry.tasks.clear_expired_raw_events',
                    time_limit=15,
                    soft_time_limit=10)
diff --git a/src/sentry/tasks/store.py b/src/sentry/tasks/store.py
index 5dd0978f7d..bfd63cfc5e 100644
--- a/src/sentry/tasks/store.py
+++ b/src/sentry/tasks/store.py
@@ -135,11 +135,15 @@ def delete_raw_event(project_id, event_id):
         error_logger.error('process.failed_delete_raw_event',
             extra={'project_id': project_id})
         return
-    from sentry.models import RawEvent
+    from sentry.models import RawEvent, ReprocessingReport
     RawEvent.objects.filter(
         project_id=project_id,
         event_id=event_id
     ).delete()
+    ReprocessingReport.objects.filter(
+        project_id=project_id,
+        event_id=event_id
+    ).delete()
 
 
 def create_failed_event(cache_key, project, issues, event_id):
@@ -189,19 +193,21 @@ def save_event(cache_key=None, data=None, start_time=None, event_id=None, **kwar
     if cache_key:
         data = default_cache.get(cache_key)
 
+    if event_id is None and data is not None:
+        event_id = data['event_id']
+
     if data is None:
         metrics.incr('events.failed', tags={'reason': 'cache', 'stage': 'post'})
         return
 
     project = data.pop('project')
+
+    delete_raw_event(project, event_id)
+
     Raven.tags_context({
         'project': project,
     })
 
-    if event_id is None and data is not None:
-        event_id = data['event_id']
-    delete_raw_event(project, event_id)
-
     try:
         manager = EventManager(data)
         manager.save(project)
