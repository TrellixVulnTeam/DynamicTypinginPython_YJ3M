commit cf62ab69282e4fbf5242434303c7ca512136d187
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 9 15:31:33 2015 -0700

    Add update/delete client key endpoints

diff --git a/src/sentry/api/endpoints/project_key_details.py b/src/sentry/api/endpoints/project_key_details.py
new file mode 100644
index 0000000000..6c67c99d77
--- /dev/null
+++ b/src/sentry/api/endpoints/project_key_details.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import (
+    AuditLogEntry, AuditLogEntryEvent, ProjectKey, ProjectKeyStatus
+)
+
+
+class KeySerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=False)
+
+
+class ProjectKeyDetailsEndpoint(ProjectEndpoint):
+    doc_section = DocSection.PROJECTS
+
+    def put(self, request, project, key_id):
+        """
+        Update a client key
+
+        Update a client key.
+
+            {method} {path}
+            {{
+                "name": "My key label"
+            }}
+
+        """
+        try:
+            key = ProjectKey.objects.get(
+                project=project,
+                public_key=key_id,
+                status=ProjectKeyStatus.ACTIVE,
+                roles=ProjectKey.roles.store,
+            )
+        except ProjectKey.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = KeySerializer(data=request.DATA, partial=True)
+
+        if serializer.is_valid():
+            result = serializer.object
+
+            if result.get('name'):
+                key.label = result['name']
+
+            key.save()
+
+            AuditLogEntry.objects.create(
+                organization=project.organization,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=key.id,
+                event=AuditLogEntryEvent.PROJECTKEY_EDIT,
+                data=key.get_audit_log_data(),
+            )
+
+            return Response(serialize(key, request.user), status=200)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+    def delete(self, request, project, key_id):
+        """
+        Delete a client key
+
+        Delete a client key.
+
+            {method} {path}
+
+        """
+        try:
+            key = ProjectKey.objects.get(
+                project=project,
+                public_key=key_id,
+                status=ProjectKeyStatus.ACTIVE,
+                roles=ProjectKey.roles.store,
+            )
+        except ProjectKey.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        key.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/serializers/models/project_key.py b/src/sentry/api/serializers/models/project_key.py
index a75a56f6e7..63080dc2c9 100644
--- a/src/sentry/api/serializers/models/project_key.py
+++ b/src/sentry/api/serializers/models/project_key.py
@@ -8,6 +8,7 @@ from sentry.models import ProjectKey
 class ProjectKeySerializer(Serializer):
     def serialize(self, obj, attrs, user):
         d = {
+            'id': obj.public_key,
             'label': obj.label,
             'public': obj.public_key,
             'secret': obj.secret_key,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 999ce764d0..a2780eeb83 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -31,6 +31,7 @@ from .endpoints.organization_teams import OrganizationTeamsEndpoint
 from .endpoints.project_details import ProjectDetailsEndpoint
 from .endpoints.project_group_index import ProjectGroupIndexEndpoint
 from .endpoints.project_keys import ProjectKeysEndpoint
+from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
@@ -126,6 +127,9 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/keys/$',
         ProjectKeysEndpoint.as_view(),
         name='sentry-api-0-project-keys'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/keys/(?P<key_id>[^\/]+)/$',
+        ProjectKeyDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-key-details'),
     url(r'^projects/(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/members/$',
         ProjectMemberIndexEndpoint.as_view(),
         name='sentry-api-0-project-member-index'),
diff --git a/tests/sentry/api/endpoints/test_project_key_details.py b/tests/sentry/api/endpoints/test_project_key_details.py
new file mode 100644
index 0000000000..64d61acd5a
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_key_details.py
@@ -0,0 +1,37 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import ProjectKey
+from sentry.testutils import APITestCase
+
+
+class UpdateProjectKeyTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        key = ProjectKey.objects.get_or_create(project=project)[0]
+        self.login_as(user=self.user)
+        url = reverse('sentry-api-0-project-key-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'key_id': key.public_key,
+        })
+        response = self.client.put(url, {'name': 'hello world'})
+        assert response.status_code == 200
+        key = ProjectKey.objects.get(id=key.id)
+        assert key.label == 'hello world'
+
+
+class DeleteProjectKeTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project()
+        self.login_as(user=self.user)
+        key = ProjectKey.objects.get_or_create(project=project)[0]
+        url = reverse('sentry-api-0-project-key-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'key_id': key.public_key,
+        })
+        resp = self.client.delete(url)
+        assert resp.status_code == 204, resp.content
+        assert not ProjectKey.objects.filter(id=key.id).exists()
