commit 86fa040d0955bf88f864bc6b990e98d4e5d532f1
Author: Megan Heskett <meg.heskett@gmail.com>
Date:   Wed Sep 25 10:41:55 2019 -0700

    Remove event cause experiment (#14822)

diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index c4cfad636b..129188434a 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -11,6 +11,7 @@ import CspInterface from 'app/components/events/interfaces/csp';
 import DebugMetaInterface from 'app/components/events/interfaces/debugmeta';
 import EventAttachments from 'app/components/events/eventAttachments';
 import EventCause from 'app/components/events/eventCause';
+import EventCauseEmpty from 'app/components/events/eventCauseEmpty';
 import EventContextSummary from 'app/components/events/contextSummary';
 import EventContexts from 'app/components/events/contexts';
 import EventDataSection from 'app/components/events/eventDataSection';
@@ -25,7 +26,6 @@ import EventTags from 'app/components/events/eventTags';
 import EventUserFeedback from 'app/components/events/userFeedback';
 import ExceptionInterface from 'app/components/events/interfaces/exception';
 import GenericInterface from 'app/components/events/interfaces/generic';
-import Hook from 'app/components/hook';
 import MessageInterface from 'app/components/events/interfaces/message';
 import RequestInterface from 'app/components/events/interfaces/request';
 import SentryTypes from 'app/sentryTypes';
@@ -179,11 +179,7 @@ class EventEntries extends React.Component {
         {!objectIsEmpty(event.errors) && <EventErrors event={event} />}{' '}
         {!isShare &&
           (showExampleCommit ? (
-            <Hook
-              name="component:event-cause-empty"
-              organization={organization}
-              project={project}
-            />
+            <EventCauseEmpty organization={organization} project={project} />
           ) : (
             <EventCause event={event} orgId={orgId} projectId={project.slug} />
           ))}
diff --git a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
index 4ef975f46a..e29121c056 100644
--- a/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
+++ b/tests/js/spec/views/organizationGroupDetails/groupEventDetails.spec.jsx
@@ -4,7 +4,6 @@ import {browserHistory} from 'react-router';
 
 import {initializeOrg} from 'app-test/helpers/initializeOrg';
 import {GroupEventDetails} from 'app/views/organizationGroupDetails/groupEventDetails';
-import HookStore from 'app/stores/hookStore';
 
 describe('groupEventDetails', () => {
   let org;
@@ -214,19 +213,7 @@ describe('groupEventDetails', () => {
   });
 
   describe('EventCauseEmpty', () => {
-    let hookFn;
-
-    beforeEach(function() {
-      hookFn = jest.fn(() => null);
-      HookStore.hooks['component:event-cause-empty'] = [hookFn];
-    });
-
-    afterEach(function() {
-      // clear HookStore
-      HookStore.init();
-    });
-
-    it('calls event cause empty state hook', async function() {
+    it('renders empty state', async function() {
       MockApiClient.addMockResponse({
         url: `/projects/${org.slug}/${project.slug}/releases/completion/`,
         body: [
@@ -252,9 +239,8 @@ describe('groupEventDetails', () => {
       await tick();
       wrapper.update();
 
-      expect(hookFn).toHaveBeenCalledWith({organization: org, project});
       expect(wrapper.find('EventCause').exists()).toBe(false);
-      expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
+      expect(wrapper.find('EventCauseEmpty').exists()).toBe(true);
     });
 
     it('renders suspect commit', async function() {
@@ -284,7 +270,6 @@ describe('groupEventDetails', () => {
       wrapper.update();
 
       expect(wrapper.find('EventCause').exists()).toBe(true);
-      expect(hookFn).not.toHaveBeenCalled();
       expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
     });
 
@@ -311,7 +296,6 @@ describe('groupEventDetails', () => {
       wrapper.update();
 
       expect(wrapper.find('EventCause').exists()).toBe(true);
-      expect(hookFn).not.toHaveBeenCalled();
       expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
     });
 
@@ -337,7 +321,6 @@ describe('groupEventDetails', () => {
       wrapper.update();
 
       expect(wrapper.find('EventCause').exists()).toBe(true);
-      expect(hookFn).not.toHaveBeenCalled();
       expect(wrapper.find('EventCauseEmpty').exists()).toBe(false);
     });
   });
