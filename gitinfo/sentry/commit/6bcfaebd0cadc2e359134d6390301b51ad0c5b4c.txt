commit 6bcfaebd0cadc2e359134d6390301b51ad0c5b4c
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 17 01:24:47 2016 -0800

    Expand tests for initial state

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index d3d38308a9..05dfbc6ba1 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -52,7 +52,7 @@ const Stream = React.createClass({
       groupIds: [],
       searchId: searchId,
       // if we have no query then we can go ahead and fetch data
-      loading: searchId || !this.hasQuery(),
+      loading: (searchId || !this.hasQuery() ? true : false),
       savedSearchLoading: true,
       savedSearchList: [],
       selectAllActive: false,
@@ -63,7 +63,7 @@ const Stream = React.createClass({
       pageLinks: '',
       dataLoading: true,
       error: false,
-      query: '',
+      query: null,
       sort: this.props.defaultSort,
       tags: StreamTagStore.getAllTags(),
       tagsLoading: true,
@@ -137,10 +137,16 @@ const Stream = React.createClass({
         let needsData = this.state.loading;
         let searchId = this.state.searchId;
         if (searchId) {
-          let savedSearch = data.filter((search) => {
+          let match = data.filter((search) => {
             return search.id === searchId;
-          })[0];
-          newState.query = savedSearch.query;
+          });
+          if (match.length) {
+            newState.query = match.query;
+          } else {
+            // TOOD(dcramer): at this point we should likely transition as its
+            // equiv to a 404
+            newState.searchId = null;
+          }
         } else if (!this.hasQuery()) {
           let defaultResults = data.filter((search) => {
             return search.isDefault;
@@ -206,7 +212,7 @@ const Stream = React.createClass({
     let searchId = (
       hasQuery ?
       null :
-      props.params.searchId || state.searchId);
+      props.params.searchId || state.searchId || null);
 
     let sort =
       currentQuery.hasOwnProperty('sort') ?
@@ -225,7 +231,7 @@ const Stream = React.createClass({
     let newState = {
       sort: sort,
       statsPeriod: statsPeriod,
-      query: currentQuery.query,
+      query: hasQuery ? currentQuery.query : null,
       searchId: searchId,
     };
 
@@ -239,8 +245,6 @@ const Stream = React.createClass({
       })[0];
       if (savedSearch) {
         newState.query = savedSearch.query;
-      } else {
-        newState.searchId = null;
       }
     } else if (!hasQuery) {
       let defaultResult = this.state.savedSearchList.filter((search) => {
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index fadb7778c0..d220272649 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -244,7 +244,7 @@ describe('Stream', function() {
 
   describe('getInitialState', function() {
 
-    it('sets the right defaults', function() {
+    it('has correct defaults with query', function() {
       let expected = {
         groupIds: [],
         selectAllActive: false,
@@ -255,7 +255,10 @@ describe('Stream', function() {
         pageLinks: '',
         loading: false,
         dataLoading: true,
-        error: false
+        error: false,
+        searchId: null,
+        query: 'is:unresolved',
+        sort: 'date',
       };
       let stream = TestUtils.renderIntoDocument(this.Element).refs.wrapped;
       let actual = stream.getInitialState();
@@ -265,6 +268,82 @@ describe('Stream', function() {
       }
     });
 
+    it('handles waiting on default without query', function() {
+      let ContextStubbedStream = stubContext(Stream, {
+        project: this.projectContext,
+        organization: {
+          slug: 'foo-org'
+        },
+        team: {}
+      });
+
+      let Element = (
+        <ContextStubbedStream
+          setProjectNavSection={function () {}}
+          location={{query:{sort: 'freq'}, search: 'sort=freq'}}
+          params={{orgId: '123', projectId: '456'}}/>
+      );
+      let expected = {
+        groupIds: [],
+        selectAllActive: false,
+        multiSelected: false,
+        anySelected: false,
+        statsPeriod: '24h',
+        realtimeActive: false,
+        pageLinks: '',
+        loading: true,
+        dataLoading: true,
+        error: false,
+        query: null,
+        sort: 'freq',
+        searchId: null,
+      };
+      let stream = TestUtils.renderIntoDocument(Element).refs.wrapped;
+      let actual = stream.getInitialState();
+
+      for (let property in expected) {
+        expect(actual[property]).to.eql(expected[property]);
+      }
+    });
+
+    it('handles searchId in routing params', function() {
+      let ContextStubbedStream = stubContext(Stream, {
+        project: this.projectContext,
+        organization: {
+          slug: 'foo-org'
+        },
+        team: {}
+      });
+
+      let Element = (
+        <ContextStubbedStream
+          setProjectNavSection={function () {}}
+          location={{query:{sort: 'freq'}, search: 'sort=freq'}}
+          params={{orgId: '123', projectId: '456', searchId: '789'}}/>
+      );
+      let expected = {
+        groupIds: [],
+        selectAllActive: false,
+        multiSelected: false,
+        anySelected: false,
+        statsPeriod: '24h',
+        realtimeActive: false,
+        pageLinks: '',
+        loading: true,
+        dataLoading: true,
+        error: false,
+        query: null,
+        sort: 'freq',
+        searchId: '789',
+      };
+      let stream = TestUtils.renderIntoDocument(Element).refs.wrapped;
+      let actual = stream.getInitialState();
+
+      for (let property in expected) {
+        expect(actual[property]).to.eql(expected[property]);
+      }
+    });
+
   });
 
 });
