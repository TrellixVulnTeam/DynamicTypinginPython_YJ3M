commit eda4f205e50c0c9363f518801de1ee1c4125b1f5
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Tue Feb 14 13:38:12 2017 -0800

    add organization release endpoints (#4775)
    
    * wip - organization releases endpoint
    
    * fix commits in org endpoint, add more tests
    
    * add project permissions check to OrganizationReleases endpoint get
    
    * update changes
    
    * add project permissions checking to post requests
    
    * add scenarios, create base view class
    
    * add organization release details endpoint
    
    * get rid of locks when creating releases since they're not needed anymore
    
    * remove todos
    
    * lint
    
    * fix changes

diff --git a/CHANGES b/CHANGES
index 3fa18bafc2..bf4f0fc5b7 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,7 @@ Version 8.14 (Unreleased)
 - [BREAKING] Quotas must now instantiate RateLimited and NotRateLimited return values.
 - [BREAKING] Redis quota implementations now return BasicRedisQuota instead of tuples.
 - Commits using the ``Fixes SHORTID`` annotation will now be tracked appropriately.
+- Added OrganizationReleasesEndpoint
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 6b8fa39736..b92c0e57b8 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -7,7 +7,9 @@ from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.permissions import ScopedPermission
 from sentry.app import raven
 from sentry.auth import access
-from sentry.models import Organization, OrganizationStatus
+from sentry.models import (
+    Organization, OrganizationMemberTeam, OrganizationStatus, Project, Team
+)
 from sentry.models.apikey import ROOT_KEY
 from sentry.utils import auth
 
@@ -56,6 +58,18 @@ class OrganizationPermission(ScopedPermission):
         return any(request.access.has_scope(s) for s in allowed_scopes)
 
 
+# These are based on ProjectReleasePermission
+# additional checks to limit actions to releases
+# associated with projects people have access to
+class OrganizationReleasePermission(OrganizationPermission):
+    scope_map = {
+        'GET': ['project:read', 'project:write', 'project:delete', 'project:releases'],
+        'POST': ['project:write', 'project:delete', 'project:releases'],
+        'PUT': ['project:write', 'project:delete', 'project:releases'],
+        'DELETE': ['project:delete', 'project:releases'],
+    }
+
+
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission,)
 
@@ -78,3 +92,22 @@ class OrganizationEndpoint(Endpoint):
 
         kwargs['organization'] = organization
         return (args, kwargs)
+
+
+class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationReleasePermission,)
+
+    def get_allowed_projects(self, request, organization):
+        if not request.user.is_authenticated():
+            return []
+
+        if request.is_superuser() or organization.flags.allow_joinleave:
+            allowed_teams = Team.objects.filter(
+                organization=organization
+            ).values_list('id', flat=True)
+        else:
+            allowed_teams = OrganizationMemberTeam.objects.filter(
+                organizationmember__user=request.user,
+                team__organization_id=organization.id,
+            ).values_list('team_id', flat=True)
+        return Project.objects.filter(team_id__in=allowed_teams)
diff --git a/src/sentry/api/endpoints/organization_release_details.py b/src/sentry/api/endpoints/organization_release_details.py
new file mode 100644
index 0000000000..d6cb764e79
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_release_details.py
@@ -0,0 +1,186 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import CommitSerializer, ListField
+from sentry.models import Activity, Group, Release, ReleaseFile
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+ERR_RELEASE_REFERENCED = "This release is referenced by active issues and cannot be removed."
+
+
+@scenario('RetrieveOrganizationRelease')
+def retrieve_organization_release_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/organizations/%s/releases/%s/' % (
+            runner.org.slug, runner.default_release.version)
+    )
+
+
+@scenario('UpdateOrganizationRelease')
+def update_organization_release_scenario(runner):
+    release = runner.utils.create_release(runner.default_project,
+                                          runner.me, version='3000')
+    runner.request(
+        method='PUT',
+        path='/organization/%s/releases/%s/' % (
+            runner.org.slug, release.version),
+        data={
+            'url': 'https://vcshub.invalid/user/project/refs/deadbeef1337',
+            'ref': 'deadbeef1337'
+        }
+    )
+
+
+class ReleaseSerializer(serializers.Serializer):
+    ref = serializers.CharField(max_length=64, required=False)
+    url = serializers.URLField(required=False)
+    dateStarted = serializers.DateTimeField(required=False)
+    dateReleased = serializers.DateTimeField(required=False)
+    commits = ListField(child=CommitSerializer(), required=False)
+
+
+class OrganizationReleaseDetailsEndpoint(OrganizationReleasesBaseEndpoint):
+    doc_section = DocSection.RELEASES
+
+    @attach_scenarios([retrieve_organization_release_scenario])
+    def get(self, request, organization, version):
+        """
+        Retrieve an Organization's Release
+        ``````````````````````````````````
+
+        Return details on an individual release.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects__in=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(serialize(release, request.user))
+
+    @attach_scenarios([update_organization_release_scenario])
+    def put(self, request, organization, version):
+        """
+        Update an Organization's Release
+        ````````````````````````````````
+
+        Update a release. This can change some metadata associated with
+        the release (the ref, url, and dates).
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :param string ref: an optional commit reference.  This is useful if
+                           a tagged version has been provided.
+        :param url url: a URL that points to the release.  This can be the
+                        path to an online interface to the sourcecode
+                        for instance.
+        :param datetime dateStarted: an optional date that indicates when the
+                                     release process started.
+        :param datetime dateReleased: an optional date that indicates when
+                                      the release went live.  If not provided
+                                      the current time is assumed.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization,
+                projects__in=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = ReleaseSerializer(data=request.DATA, partial=True)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        was_released = bool(release.date_released)
+
+        kwargs = {}
+        if result.get('dateStarted'):
+            kwargs['date_started'] = result['dateStarted']
+        if result.get('dateReleased'):
+            kwargs['date_released'] = result['dateReleased']
+        if result.get('ref'):
+            kwargs['ref'] = result['ref']
+        if result.get('url'):
+            kwargs['url'] = result['url']
+
+        if kwargs:
+            release.update(**kwargs)
+
+        commit_list = result.get('commits')
+        if commit_list:
+            # TODO(dcramer): handle errors with release payloads
+            release.set_commits(commit_list)
+
+        if (not was_released and release.date_released):
+            for project in release.projects.all():
+                activity = Activity.objects.create(
+                    type=Activity.RELEASE,
+                    project=project,
+                    ident=release.version,
+                    data={'version': release.version},
+                    datetime=release.date_released,
+                )
+            activity.send_notification()
+
+        return Response(serialize(release, request.user))
+
+    def delete(self, request, organization, version):
+        """
+        Delete an Organization's Release
+        ````````````````````````````````
+
+        Permanently remove a release and all of its files.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :pparam string version: the version identifier of the release.
+        :auth: required
+        """
+        try:
+            release = Release.objects.get(
+                organization_id=organization.id,
+                projects__in=self.get_allowed_projects(request, organization),
+                version=version,
+            )
+        except Release.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        # we don't want to remove the first_release metadata on the Group, and
+        # while people might want to kill a release (maybe to remove files),
+        # removing the release is prevented
+        if Group.objects.filter(first_release=release).exists():
+            return Response({"detail": ERR_RELEASE_REFERENCED}, status=400)
+
+        # TODO(dcramer): this needs to happen in the queue as it could be a long
+        # and expensive operation
+        file_list = ReleaseFile.objects.filter(
+            release=release,
+        ).select_related('file')
+        for releasefile in file_list:
+            releasefile.file.delete()
+            releasefile.delete()
+        release.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/organization_releases.py b/src/sentry/api/endpoints/organization_releases.py
new file mode 100644
index 0000000000..9b7eb7fb11
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_releases.py
@@ -0,0 +1,177 @@
+from __future__ import absolute_import
+
+from django.db import IntegrityError, transaction
+
+from rest_framework.response import Response
+
+from .project_releases import ReleaseSerializer
+from sentry.api.base import DocSection
+from sentry.api.bases.organization import OrganizationReleasesBaseEndpoint
+from sentry.api.paginator import OffsetPaginator
+from sentry.api.serializers import serialize
+from sentry.api.serializers.rest_framework import ListField
+from sentry.models import Activity, Release, ReleaseProject
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('CreateNewOrganizationRelease')
+def create_new_org_release_scenario(runner):
+    runner.request(
+        method='POST',
+        path='/organizations/%s/releases/' % (runner.org.slug,),
+        data={
+            'version': '2.0rc2',
+            'ref': '6ba09a7c53235ee8a8fa5ee4c1ca8ca886e7fdbb',
+        }
+    )
+
+
+@scenario('ListOrganizationReleases')
+def list_org_releases_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/organizations/%s/releases/' % (runner.org.slug,)
+    )
+
+
+class ReleaseSerializerWithProjects(ReleaseSerializer):
+    projects = ListField()
+
+
+class OrganizationReleasesEndpoint(OrganizationReleasesBaseEndpoint):
+    doc_section = DocSection.RELEASES
+
+    @attach_scenarios([list_org_releases_scenario])
+    def get(self, request, organization):
+        """
+        List an Organizations Releases
+        ``````````````````````````````
+        Return a list of releases for a given organization.
+
+        :pparam string organization_slug: the organization short name
+        :qparam string query: this parameter can be used to create a
+                              "starts with" filter for the version.
+        """
+        query = request.GET.get('query')
+
+        queryset = Release.objects.filter(
+            organization=organization,
+            projects=self.get_allowed_projects(request, organization)
+        ).select_related('owner')
+
+        if query:
+            queryset = queryset.filter(
+                version__istartswith=query,
+            )
+
+        queryset = queryset.extra(select={
+            'sort': 'COALESCE(date_released, date_added)',
+        })
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-sort',
+            paginator_cls=OffsetPaginator,
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    @attach_scenarios([create_new_org_release_scenario])
+    def post(self, request, organization):
+        """
+        Create a New Release for an Organization
+        ````````````````````````````````````````
+        Create a new release for the given Organization.  Releases are used by
+        Sentry to improve its error reporting abilities by correlating
+        first seen events with the release that might have introduced the
+        problem.
+        Releases are also necessary for sourcemaps and other debug features
+        that require manual upload for functioning well.
+        :pparam string organization_slug: the slug of the organization the
+                                          release belongs to.
+        :param string version: a version identifier for this release.  Can
+                               be a version number, a commit hash etc.
+        :param string ref: an optional commit reference.  This is useful if
+                           a tagged version has been provided.
+        :param url url: a URL that points to the release.  This can be the
+                        path to an online interface to the sourcecode
+                        for instance.
+        :param array projects: a list of project slugs that are involved in
+                               this release
+        :param datetime dateStarted: an optional date that indicates when the
+                                     release process started.
+        :param datetime dateReleased: an optional date that indicates when
+                                      the release went live.  If not provided
+                                      the current time is assumed.
+        :auth: required
+        """
+        serializer = ReleaseSerializerWithProjects(data=request.DATA)
+
+        if serializer.is_valid():
+            result = serializer.object
+
+            allowed_projects = {
+                p.slug: p for p in self.get_allowed_projects(request, organization)
+            }
+
+            projects = []
+            for slug in result['projects']:
+                if slug not in allowed_projects:
+                    return Response({'projects': ['Invalid project slugs']}, status=400)
+                projects.append(allowed_projects[slug])
+
+            # release creation is idempotent to simplify user
+            # experiences
+            try:
+                with transaction.atomic():
+                    release, created = Release.objects.create(
+                        organization_id=organization.id,
+                        version=result['version'],
+                        ref=result.get('ref'),
+                        url=result.get('url'),
+                        owner=result.get('owner'),
+                        date_started=result.get('dateStarted'),
+                        date_released=result.get('dateReleased'),
+                    ), True
+            except IntegrityError:
+                release, created = Release.objects.get(
+                    organization_id=organization.id,
+                    version=result['version'],
+                ), False
+
+            new_projects = []
+            for project in projects:
+                try:
+                    with transaction.atomic():
+                        ReleaseProject.objects.create(project=project, release=release)
+                except IntegrityError:
+                    pass
+                else:
+                    new_projects.append(project)
+
+            if release.date_released:
+                for project in new_projects:
+                    activity = Activity.objects.create(
+                        type=Activity.RELEASE,
+                        project=project,
+                        ident=result['version'],
+                        data={'version': result['version']},
+                        datetime=release.date_released,
+                    )
+                    activity.send_notification()
+
+            commit_list = result.get('commits')
+            if commit_list:
+                release.set_commits(commit_list)
+
+            if not created and not new_projects:
+                # This is the closest status code that makes sense, and we want
+                # a unique 2xx response code so people can understand when
+                # behavior differs.
+                #   208 Already Reported (WebDAV; RFC 5842)
+                status = 208
+            else:
+                status = 201
+
+            return Response(serialize(release, request.user), status=status)
+        return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/endpoints/release_details.py b/src/sentry/api/endpoints/project_release_details.py
similarity index 96%
rename from src/sentry/api/endpoints/release_details.py
rename to src/sentry/api/endpoints/project_release_details.py
index a90293287f..4fc15ebef7 100644
--- a/src/sentry/api/endpoints/release_details.py
+++ b/src/sentry/api/endpoints/project_release_details.py
@@ -62,15 +62,15 @@ class ReleaseSerializer(serializers.Serializer):
     commits = ListField(child=CommitSerializer(), required=False)
 
 
-class ReleaseDetailsEndpoint(ProjectEndpoint):
+class ProjectReleaseDetailsEndpoint(ProjectEndpoint):
     doc_section = DocSection.RELEASES
     permission_classes = (ProjectReleasePermission,)
 
     @attach_scenarios([retrieve_release_scenario])
     def get(self, request, project, version):
         """
-        Retrieve a Release
-        ``````````````````
+        Retrieve a Project's Release
+        ````````````````````````````
 
         Return details on an individual release.
 
@@ -95,8 +95,8 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
     @attach_scenarios([update_release_scenario])
     def put(self, request, project, version):
         """
-        Update a Release
-        ````````````````
+        Update a Project's Release
+        ``````````````````````````
 
         Update a release.  This can change some metadata associated with
         the release (the ref, url, and dates).
@@ -170,8 +170,8 @@ class ReleaseDetailsEndpoint(ProjectEndpoint):
     # @attach_scenarios([delete_release_scenario])
     def delete(self, request, project, version):
         """
-        Delete a Release
-        ````````````````
+        Delete a Project's Release
+        ``````````````````````````
 
         Permanently remove a release and all of its files.
 
diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index c51b35eb8f..6d67f2ebb5 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -104,8 +104,8 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
     @attach_scenarios([create_new_release_scenario])
     def post(self, request, project):
         """
-        Create a New Release
-        ````````````````````
+        Create a New Release for a Project
+        ``````````````````````````````````
 
         Create a new release and/or associate a project with a release.
         Release versions that are the same across multiple projects
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 68d4c58246..c95cf990f4 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -41,6 +41,8 @@ from .endpoints.organization_member_team_details import OrganizationMemberTeamDe
 from .endpoints.organization_onboarding_tasks import OrganizationOnboardingTaskEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
+from .endpoints.organization_releases import OrganizationReleasesEndpoint
+from .endpoints.organization_release_details import OrganizationReleaseDetailsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
@@ -75,7 +77,7 @@ from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
 from .endpoints.project_users import ProjectUsersEndpoint
 from .endpoints.project_user_reports import ProjectUserReportsEndpoint
 from .endpoints.release_commits import ReleaseCommitsEndpoint
-from .endpoints.release_details import ReleaseDetailsEndpoint
+from .endpoints.project_release_details import ProjectReleaseDetailsEndpoint
 from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.release_file_details import ReleaseFileDetailsEndpoint
 from .endpoints.dsym_files import DSymFilesEndpoint, GlobalDSymFilesEndpoint, \
@@ -196,6 +198,12 @@ urlpatterns = patterns(
     url(r'^organizations/(?P<organization_slug>[^\/]+)/repos/(?P<repo_id>[^\/]+)/commits/$',
         OrganizationRepositoryCommitsEndpoint.as_view(),
         name='sentry-api-0-organization-repository-commits'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/releases/$',
+        OrganizationReleasesEndpoint.as_view(),
+        name='sentry-api-0-organization-releases'),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/releases/(?P<version>[^/]+)/$',
+        OrganizationReleaseDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-release-details'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/stats/$',
         OrganizationStatsEndpoint.as_view(),
         name='sentry-api-0-organization-stats'),
@@ -278,8 +286,8 @@ urlpatterns = patterns(
         ProjectReleasesEndpoint.as_view(),
         name='sentry-api-0-project-releases'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/$',
-        ReleaseDetailsEndpoint.as_view(),
-        name='sentry-api-0-release-details'),
+        ProjectReleaseDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-release-details'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/commits/$',
         ReleaseCommitsEndpoint.as_view(),
         name='sentry-api-0-release-commits'),
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 552362d081..1aec615f34 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -191,3 +191,63 @@ class Release(Model):
                 ReleaseProject.objects.create(project=project, release=self)
         except IntegrityError:
             pass
+
+    def set_commits(self, commit_list):
+        from sentry.models import Commit, CommitAuthor, ReleaseCommit, Repository
+
+        with transaction.atomic():
+            # TODO(dcramer): would be good to optimize the logic to avoid these
+            # deletes but not overly important
+            ReleaseCommit.objects.filter(
+                release=self,
+            ).delete()
+
+            authors = {}
+            repos = {}
+            for idx, data in enumerate(commit_list):
+                repo_name = data.get('repository') or 'organization-{}'.format(self.organization_id)
+                if repo_name not in repos:
+                    repos[repo_name] = repo = Repository.objects.get_or_create(
+                        organization_id=self.organization_id,
+                        name=repo_name,
+                    )[0]
+                else:
+                    repo = repos[repo_name]
+
+                author_email = data.get('author_email')
+                if author_email is None and data.get('author_name'):
+                    author_email = (re.sub(r'[^a-zA-Z0-9\-_\.]*', '', data['author_name']).lower() +
+                                    '@localhost')
+
+                if not author_email:
+                    author = None
+                elif author_email not in authors:
+                    authors[author_email] = author = CommitAuthor.objects.get_or_create(
+                        organization_id=self.organization_id,
+                        email=author_email,
+                        defaults={
+                            'name': data.get('author_name'),
+                        }
+                    )[0]
+                    if data.get('author_name') and author.name != data['author_name']:
+                        author.update(name=data['author_name'])
+                else:
+                    author = authors[author_email]
+
+                commit = Commit.objects.get_or_create(
+                    organization_id=self.organization_id,
+                    repository_id=repo.id,
+                    key=data['id'],
+                    defaults={
+                        'message': data.get('message'),
+                        'author': author,
+                        'date_added': data.get('timestamp') or timezone.now(),
+                    }
+                )[0]
+
+                ReleaseCommit.objects.create(
+                    organization_id=self.organization_id,
+                    release=self,
+                    commit=commit,
+                    order=idx,
+                )
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index de6031645e..955052f4d8 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -10,23 +10,16 @@ from __future__ import absolute_import, print_function
 
 __all__ = ['ReleaseHook']
 
-import re
-
 from django.db import IntegrityError, transaction
 from django.utils import timezone
 
-from sentry.models import (
-    Activity, Commit, CommitAuthor, Release, ReleaseCommit, Repository
-)
+from sentry.models import Activity, Release
 
 
 class ReleaseHook(object):
     def __init__(self, project):
         self.project = project
 
-    def _to_email(self, name):
-        return re.sub(r'[^a-zA-Z0-9\-_\.]*', '', name).lower() + '@localhost'
-
     def start_release(self, version, **values):
         values.setdefault('date_started', timezone.now())
         try:
@@ -68,61 +61,7 @@ class ReleaseHook(object):
             )
         release.add_project(project)
 
-        with transaction.atomic():
-            # TODO(dcramer): would be good to optimize the logic to avoid these
-            # deletes but not overly important
-            ReleaseCommit.objects.filter(
-                release=release,
-            ).delete()
-
-            authors = {}
-            repos = {}
-            for idx, data in enumerate(commit_list):
-                repo_name = data.get('repository') or 'project-{}'.format(project.id)
-                if repo_name not in repos:
-                    repos[repo_name] = repo = Repository.objects.get_or_create(
-                        organization_id=project.organization_id,
-                        name=repo_name,
-                    )[0]
-                else:
-                    repo = repos[repo_name]
-
-                author_email = data.get('author_email')
-                if author_email is None and data.get('author_name'):
-                    author_email = self._to_email(data['author_name'])
-
-                if not author_email:
-                    author = None
-                elif author_email not in authors:
-                    authors[author_email] = author = CommitAuthor.objects.get_or_create(
-                        organization_id=project.organization_id,
-                        email=author_email,
-                        defaults={
-                            'name': data.get('author_name'),
-                        }
-                    )[0]
-                    if data.get('author_name') and author.name != data['author_name']:
-                        author.update(name=data['author_name'])
-                else:
-                    author = authors[author_email]
-
-                commit = Commit.objects.get_or_create(
-                    organization_id=project.organization_id,
-                    repository_id=repo.id,
-                    key=data['id'],
-                    defaults={
-                        'message': data.get('message'),
-                        'author': author,
-                        'date_added': data.get('timestamp') or timezone.now(),
-                    }
-                )[0]
-
-                ReleaseCommit.objects.create(
-                    organization_id=project.organization_id,
-                    release=release,
-                    commit=commit,
-                    order=idx,
-                )
+        release.set_commits(commit_list)
 
     def finish_release(self, version, **values):
         values.setdefault('date_released', timezone.now())
diff --git a/tests/sentry/api/endpoints/test_organization_release_details.py b/tests/sentry/api/endpoints/test_organization_release_details.py
new file mode 100644
index 0000000000..297fccf4d8
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_release_details.py
@@ -0,0 +1,267 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+from django.core.urlresolvers import reverse
+
+from sentry.models import (
+    Activity, File, Release, ReleaseCommit, ReleaseFile, ReleaseProject
+)
+from sentry.testutils import APITestCase
+
+
+class ReleaseDetailsTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+        team2 = self.create_team(organization=org)
+
+        project = self.create_project(team=team1, organization=org)
+        project2 = self.create_project(team=team2, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='12345678',
+        )
+        release.add_project(project)
+        release2.add_project(project2)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        ReleaseProject.objects.filter(
+            project=project,
+            release=release
+        ).update(new_groups=5)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data['version'] == release.version
+        assert response.data['newGroups'] == 5
+
+        # no access
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release2.version,
+        })
+        response = self.client.get(url)
+        assert response.status_code == 404
+
+
+class UpdateReleaseDetailsTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+        team2 = self.create_team(organization=org)
+
+        project = self.create_project(team=team1, organization=org)
+        project2 = self.create_project(team=team2, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='12345678',
+        )
+        release.add_project(project)
+        release2.add_project(project2)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.put(url, {'ref': 'master'})
+
+        assert response.status_code == 200, response.content
+        assert response.data['version'] == release.version
+
+        release = Release.objects.get(id=release.id)
+        assert release.ref == 'master'
+
+        # no access
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release2.version,
+        })
+        response = self.client.put(url, {'ref': 'master'})
+        assert response.status_code == 404
+
+    def test_commits(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(team=team, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        release.add_project(project)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.put(url, data={
+            'commits': [
+                {'id': 'a' * 40},
+                {'id': 'b' * 40},
+            ],
+        })
+
+        assert response.status_code == 200, (response.status_code, response.content)
+
+        rc_list = list(ReleaseCommit.objects.filter(
+            release=release,
+        ).select_related('commit', 'commit__author').order_by('order'))
+        assert len(rc_list) == 2
+        for rc in rc_list:
+            assert rc.organization_id == org.id
+
+    def test_activity_generation(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(team=team, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        release.add_project(project)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.put(url, data={
+            'dateReleased': datetime.utcnow().isoformat() + 'Z',
+        })
+
+        assert response.status_code == 200, (response.status_code, response.content)
+
+        release = Release.objects.get(id=release.id)
+        assert release.date_released
+
+        activity = Activity.objects.filter(
+            type=Activity.RELEASE,
+            project=project,
+            ident=release.version,
+        )
+        assert activity.exists()
+
+
+class ReleaseDeleteTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(team=team, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        release.add_project(project)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+        release_file = ReleaseFile.objects.create(
+            organization_id=project.organization_id,
+            release=release,
+            file=File.objects.create(
+                name='application.js',
+                type='release.file',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.delete(url)
+
+        assert response.status_code == 204, response.content
+
+        assert not Release.objects.filter(id=release.id).exists()
+        assert not ReleaseFile.objects.filter(id=release_file.id).exists()
+
+    def test_existing_group(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(team=team, organization=org)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='abcabcabc',
+        )
+
+        release.add_project(project)
+        self.create_group(first_release=release)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-release-details', kwargs={
+            'organization_slug': org.slug,
+            'version': release.version,
+        })
+        response = self.client.delete(url)
+
+        assert response.status_code == 400, response.content
+
+        assert Release.objects.filter(id=release.id).exists()
diff --git a/tests/sentry/api/endpoints/test_organization_releases.py b/tests/sentry/api/endpoints/test_organization_releases.py
new file mode 100644
index 0000000000..b4093c047a
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_releases.py
@@ -0,0 +1,515 @@
+from __future__ import absolute_import
+
+from datetime import datetime
+from django.core.urlresolvers import reverse
+
+from sentry.models import Activity, Release, ReleaseCommit, ReleaseProject
+from sentry.testutils import APITestCase
+
+
+class OrganizationReleaseListTest(APITestCase):
+    def test_simple(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org2 = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+        team2 = self.create_team(organization=org)
+
+        project1 = self.create_project(team=team1, organization=org)
+        project2 = self.create_project(team=team2, organization=org2)
+        project3 = self.create_project(team=team1, organization=org)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        release1 = Release.objects.create(
+            organization_id=org.id,
+            version='1',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release1.add_project(project1)
+
+        release2 = Release.objects.create(
+            organization_id=org2.id,
+            version='2',
+            date_added=datetime(2013, 8, 14, 3, 8, 24, 880386),
+        )
+        release2.add_project(project2)
+
+        release3 = Release.objects.create(
+            organization_id=org.id,
+            version='3',
+            date_added=datetime(2013, 8, 12, 3, 8, 24, 880386),
+            date_released=datetime(2013, 8, 15, 3, 8, 24, 880386),
+        )
+        release3.add_project(project3)
+
+        release4 = Release.objects.create(
+            organization_id=org.id,
+            version='4',
+            date_added=datetime(2013, 8, 14, 3, 8, 24, 880386),
+        )
+        release4.add_project(project3)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        assert response.data[0]['version'] == release3.version
+        assert response.data[1]['version'] == release4.version
+        assert response.data[2]['version'] == release1.version
+
+    def test_query_filter(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+
+        project = self.create_project(team=team, organization=org)
+
+        self.create_member(teams=[team], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        release = Release.objects.create(
+            organization_id=org.id,
+            version='foobar',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release.add_project(project)
+
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='sdfsdfsdf',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release2.add_project(project)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.get(url + '?query=foo', format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['version'] == release.version
+
+        response = self.client.get(url + '?query=bar', format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 0
+
+    def test_project_permissions(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+        team2 = self.create_team(organization=org)
+
+        project1 = self.create_project(team=team1, organization=org)
+        project2 = self.create_project(team=team2, organization=org)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+        self.login_as(user=user)
+
+        release1 = Release.objects.create(
+            organization_id=org.id,
+            version='1',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release1.add_project(project1)
+
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='2',
+            date_added=datetime(2013, 8, 14, 3, 8, 24, 880386),
+        )
+        release2.add_project(project2)
+
+        release3 = Release.objects.create(
+            organization_id=org.id,
+            version='3',
+            date_added=datetime(2013, 8, 12, 3, 8, 24, 880386),
+            date_released=datetime(2013, 8, 15, 3, 8, 24, 880386),
+        )
+        release3.add_project(project1)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['version'] == release3.version
+        assert response.data[1]['version'] == release1.version
+
+
+class OrganizationReleaseCreateTest(APITestCase):
+    def test_minimal(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+        project2 = self.create_project(
+            name='bar',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug,
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug, project2.slug]
+        })
+
+        assert response.status_code == 201, response.content
+        assert response.data['version']
+
+        release = Release.objects.get(
+            version=response.data['version'],
+        )
+        assert not release.owner
+        assert release.organization == org
+        assert ReleaseProject.objects.filter(
+            release=release, project=project
+        ).exists()
+        assert ReleaseProject.objects.filter(
+            release=release, project=project2
+        ).exists()
+
+    def test_duplicate(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        release = Release.objects.create(version='1.2.1',
+                                         organization=org)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug,
+        })
+
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug]
+        })
+
+        # should be 201 because project was added
+        assert response.status_code == 201, response.content
+        assert Release.objects.filter(
+            version='1.2.1', organization=org
+        ).count() == 1
+        # make sure project was added
+        assert ReleaseProject.objects.filter(
+            release=release, project=project
+        ).exists()
+
+    def test_activity(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+        project2 = self.create_project(
+            name='bar',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        release = Release.objects.create(version='1.2.1',
+                                         date_released=datetime.utcnow(),
+                                         organization=org)
+        release.add_project(project)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug,
+        })
+
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 208, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug, project2.slug]
+        })
+
+        # should be 201 because 1 project was added
+        assert response.status_code == 201, response.content
+        assert not Activity.objects.filter(
+            type=Activity.RELEASE,
+            project=project,
+            ident=release.version
+        ).exists()
+        assert Activity.objects.filter(
+            type=Activity.RELEASE,
+            project=project2,
+            ident=release.version
+        ).exists()
+
+    def test_version_whitespace(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\n',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '\n1.2.3',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.\n2.3',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\f',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3\t',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 400, response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.3',
+            'projects': [project.slug]
+        })
+        assert response.status_code == 201, response.content
+        assert response.data['version'] == '1.2.3'
+
+        release = Release.objects.get(
+            organization_id=org.id,
+            version=response.data['version'],
+        )
+        assert not release.owner
+
+    def test_features(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'owner': self.user.email,
+            'projects': [project.slug]
+        })
+
+        assert response.status_code == 201, response.content
+        assert response.data['version']
+
+        release = Release.objects.get(
+            organization_id=org.id,
+            version=response.data['version'],
+        )
+        assert release.owner == self.user
+
+    def test_commits(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'commits': [
+                {'id': 'a' * 40},
+                {'id': 'b' * 40},
+            ],
+            'projects': [project.slug]
+        })
+
+        assert response.status_code == 201, (response.status_code, response.content)
+        assert response.data['version']
+
+        release = Release.objects.get(
+            organization_id=org.id,
+            version=response.data['version'],
+        )
+
+        rc_list = list(ReleaseCommit.objects.filter(
+            release=release,
+        ).select_related('commit', 'commit__author').order_by('order'))
+        assert len(rc_list) == 2
+        for rc in rc_list:
+            assert rc.organization_id
+
+    def test_bad_project_slug(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team = self.create_team(organization=org)
+        project = self.create_project(
+            name='foo',
+            organization=org,
+            team=team
+        )
+
+        self.create_member(teams=[team], user=user, organization=org)
+        self.login_as(user=user)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project.slug, 'banana']
+        })
+        assert response.status_code == 400
+        assert 'Invalid project slugs' in response.content
+
+    def test_project_permissions(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.create_organization()
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+        team2 = self.create_team(organization=org)
+
+        project1 = self.create_project(team=team1, organization=org)
+        project2 = self.create_project(team=team2, organization=org)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+        self.login_as(user=user)
+
+        release1 = Release.objects.create(
+            organization_id=org.id,
+            version='1',
+            date_added=datetime(2013, 8, 13, 3, 8, 24, 880386),
+        )
+        release1.add_project(project1)
+
+        release2 = Release.objects.create(
+            organization_id=org.id,
+            version='2',
+            date_added=datetime(2013, 8, 14, 3, 8, 24, 880386),
+        )
+        release2.add_project(project2)
+
+        release3 = Release.objects.create(
+            organization_id=org.id,
+            version='3',
+            date_added=datetime(2013, 8, 12, 3, 8, 24, 880386),
+            date_released=datetime(2013, 8, 15, 3, 8, 24, 880386),
+        )
+        release3.add_project(project1)
+
+        url = reverse('sentry-api-0-organization-releases', kwargs={
+            'organization_slug': org.slug
+        })
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project1.slug, project2.slug]
+        })
+
+        assert response.status_code == 400
+        assert 'Invalid project slugs' in response.content
+
+        response = self.client.post(url, data={
+            'version': '1.2.1',
+            'projects': [project1.slug]
+        })
+
+        assert response.status_code == 201, response.content
diff --git a/tests/sentry/api/endpoints/test_release_details.py b/tests/sentry/api/endpoints/test_project_release_details.py
similarity index 93%
rename from tests/sentry/api/endpoints/test_release_details.py
rename to tests/sentry/api/endpoints/test_project_release_details.py
index bb0b53f071..14e5da1245 100644
--- a/tests/sentry/api/endpoints/test_release_details.py
+++ b/tests/sentry/api/endpoints/test_project_release_details.py
@@ -29,7 +29,7 @@ class ReleaseDetailsTest(APITestCase):
             release=release
         ).update(new_groups=5)
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -56,7 +56,7 @@ class UpdateReleaseDetailsTest(APITestCase):
         release.add_project(project)
         release.add_project(project2)
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -83,7 +83,7 @@ class UpdateReleaseDetailsTest(APITestCase):
         release.add_project(project)
         release.add_project(project2)
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -118,7 +118,7 @@ class UpdateReleaseDetailsTest(APITestCase):
         release.add_project(project)
         release.add_project(project2)
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -163,7 +163,7 @@ class ReleaseDeleteTest(APITestCase):
             name='http://example.com/application.js'
         )
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
@@ -188,7 +188,7 @@ class ReleaseDeleteTest(APITestCase):
         release.add_project(project2)
         self.create_group(first_release=release)
 
-        url = reverse('sentry-api-0-release-details', kwargs={
+        url = reverse('sentry-api-0-project-release-details', kwargs={
             'organization_slug': project.organization.slug,
             'project_slug': project.slug,
             'version': release.version,
