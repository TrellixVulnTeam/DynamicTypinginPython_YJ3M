commit f72ac8ef2b9cc9a4a2cb7e9552b9bf72c0f6e62e
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Sep 11 09:40:00 2018 -0700

    feat(health): Add Errors view (#9658)
    
    Adds "Errors" view to Health

diff --git a/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx b/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx
index 54ebb646a6..7517e57941 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/errors.jsx
@@ -1,9 +1,340 @@
+import {Box, Flex} from 'grid-emotion';
+import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {t} from 'app/locale';
+import AreaChart from 'app/components/charts/areaChart';
+import Count from 'app/components/count';
+import IdBadge from 'app/components/idBadge';
+import PercentageBarChart from 'app/components/charts/percentageBarChart';
+import PieChart from 'app/components/charts/pieChart';
+import SentryTypes from 'app/sentryTypes';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+
+import Header from './styles/header';
+import HealthPanelChart from './styles/healthPanelChart';
+import HealthRequest from './util/healthRequest';
+import HealthTableChart from './styles/healthTableChart';
+import withHealth from './util/withHealth';
 
 class OrganizationHealthErrors extends React.Component {
+  static propTypes = {
+    actions: PropTypes.object,
+    organization: SentryTypes.Organization,
+  };
+
+  handleSetSpecifier = (tag, value) => {
+    this.props.actions.setSpecifier(tag, value);
+  };
+
   render() {
-    return <div>Errors</div>;
+    let {organization} = this.props;
+
+    return (
+      <React.Fragment>
+        <Flex justify="space-between">
+          <Header>{t('Errors')}</Header>
+        </Flex>
+
+        <Flex>
+          <HealthRequest
+            tag="error.handled"
+            includeTimeseries
+            interval="1d"
+            showLoading
+            getCategory={value => (value ? t('Handled') : t('Crash'))}
+          >
+            {({timeseriesData}) => {
+              return (
+                <HealthPanelChart
+                  height={200}
+                  title={t('Errors')}
+                  series={timeseriesData}
+                >
+                  {props => <AreaChart {...props} />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+
+          <HealthRequest tag="user" showLoading includeTop includeTimeseries={false}>
+            {({originalTagData: originalData, tag}) => (
+              <HealthTableChart
+                headers={[t('Most Impacted')]}
+                data={originalData.map(row => [row, row])}
+                widths={[null, 120]}
+                getValue={item => (typeof item === 'number' ? item : item && item.count)}
+                renderHeaderCell={({getValue, value, columnIndex}) => {
+                  return typeof value === 'string' ? (
+                    value
+                  ) : (
+                    <div>
+                      <IdBadge
+                        user={value[tag].value}
+                        displayName={value[tag].value && value[tag].value.label}
+                      />
+                    </div>
+                  );
+                }}
+                renderDataCell={({getValue, value}) => {
+                  return <Count value={getValue(value)} />;
+                }}
+                showRowTotal={false}
+                showColumnTotal={false}
+                shadeRowPercentage
+              />
+            )}
+          </HealthRequest>
+        </Flex>
+
+        <Flex>
+          <HealthRequest
+            tag="error.type"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            interval="1d"
+          >
+            {({tagData}) => {
+              return (
+                <HealthTableChart
+                  title={t('Error Type')}
+                  headers={[t('Error Type')]}
+                  data={tagData}
+                  widths={[null, 60, 60, 60, 60]}
+                  showColumnTotal
+                  shadeRowPercentage
+                />
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+
+        <Flex>
+          <ReleasesRequest organization={organization}>
+            {({loading, timeseriesData}) => {
+              if (loading) return null;
+              return (
+                <HealthPanelChart
+                  height={200}
+                  title={t('Releases')}
+                  series={timeseriesData}
+                >
+                  {props => <AreaChart {...props} />}
+                </HealthPanelChart>
+              );
+            }}
+          </ReleasesRequest>
+        </Flex>
+
+        <Flex>
+          <ReleasesRequest organization={organization}>
+            {({timeseriesData, loading}) => {
+              if (loading) return null;
+              return (
+                <HealthPanelChart
+                  height={200}
+                  title={t('Releases')}
+                  series={timeseriesData}
+                >
+                  {props => <PercentageBarChart {...props} />}
+                </HealthPanelChart>
+              );
+            }}
+          </ReleasesRequest>
+
+          <HealthRequest
+            tag="release"
+            includeTimeseries
+            interval="1d"
+            showLoading
+            limit={10}
+            getCategory={({shortVersion}) => shortVersion}
+          >
+            {({timeseriesData}) => {
+              return (
+                <HealthPanelChart
+                  height={200}
+                  title={t('Releases')}
+                  series={timeseriesData}
+                >
+                  {props => <PercentageBarChart {...props} />}
+                </HealthPanelChart>
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+
+        <Flex>
+          <HealthRequest
+            tag="release"
+            showLoading
+            includeTimeseries={false}
+            includeTop
+            limit={5}
+            topk={5}
+            getCategory={({shortVersion}) => shortVersion}
+          >
+            {({originalTagData: data, tag}) => {
+              return (
+                <React.Fragment>
+                  <HealthTableChart
+                    headers={[t('Errors by Release')]}
+                    data={data.map(row => [row, row])}
+                    widths={[null, 120]}
+                    getValue={item =>
+                      typeof item === 'number' ? item : item && item.count}
+                    renderHeaderCell={({getValue, value, columnIndex}) => {
+                      return (
+                        <Flex justify="space-between">
+                          <ReleaseName
+                            onClick={() =>
+                              this.handleSetSpecifier(tag, value[tag]._health_id)}
+                          >
+                            {value[tag].value.shortVersion}
+                          </ReleaseName>
+                          <Project>
+                            {value.topProjects.map(p => (
+                              <IdBadge key={p.slug} project={p} />
+                            ))}
+                          </Project>
+                        </Flex>
+                      );
+                    }}
+                    renderDataCell={({getValue, value, columnIndex}) => {
+                      return <Count value={getValue(value)} />;
+                    }}
+                    showRowTotal={false}
+                    showColumnTotal={false}
+                    shadeRowPercentage
+                  />
+                  <HealthPanelChart
+                    height={300}
+                    title={t('Errors By Release')}
+                    showLegend={false}
+                    series={[
+                      {
+                        seriesName: t('Errors By Release'),
+                        data: data.map(row => ({
+                          name: row.release.value.shortVersion,
+                          value: row.count,
+                        })),
+                      },
+                    ]}
+                  >
+                    {({series}) => (
+                      <Flex>
+                        <PieChartWrapper>
+                          <PieChart height={300} series={series} />
+                        </PieChartWrapper>
+                      </Flex>
+                    )}
+                  </HealthPanelChart>
+                </React.Fragment>
+              );
+            }}
+          </HealthRequest>
+        </Flex>
+      </React.Fragment>
+    );
   }
 }
 
-export default OrganizationHealthErrors;
+/**
+ * This is a proof of concept, unsure if we'll want this.
+ *
+ * What this does is fetch the most recent releases and then make a snuba query to
+ * fetch counts only for those releases.
+ *
+ * An alternate query is to only include the releases that contain the most error counts
+ */
+const ReleasesRequest = withApi(
+  class ReleasesRequestComponent extends React.Component {
+    static propTypes = {
+      limit: PropTypes.number,
+    };
+
+    static defaultProps = {
+      limit: 10,
+    };
+
+    constructor(props) {
+      super(props);
+      this.state = {
+        data: null,
+      };
+    }
+
+    async componentDidMount() {
+      let {api, organization, limit} = this.props;
+      if (!organization) return;
+
+      try {
+        // fetch last `limit` releases
+        const releases = await api.requestPromise(
+          `/organizations/${organization.slug}/releases/`,
+          {
+            query: {
+              per_page: limit,
+            },
+          }
+        );
+
+        // eslint-disable-next-line
+        this.setState({
+          data: releases,
+        });
+      } catch (err) {
+        addErrorMessage(t('Unable to fetch releases'));
+      }
+    }
+
+    render() {
+      let {children, limit, ...props} = this.props;
+      let {data} = this.state;
+      let loading = data === null;
+
+      if (!data) {
+        return children({
+          loading,
+        });
+      }
+
+      return (
+        <HealthRequest
+          tag="release"
+          includeTimeseries
+          interval="1d"
+          showLoading
+          limit={limit}
+          getCategory={({shortVersion}) => shortVersion}
+          specifiers={data.map(({version}) => `release:${version}`)}
+          {...props}
+        >
+          {children}
+        </HealthRequest>
+      );
+    }
+  }
+);
+
+export default withHealth(OrganizationHealthErrors);
+export {OrganizationHealthErrors};
+
+const PieChartWrapper = styled(Box)`
+  flex: 1;
+  flex-shrink: 0;
+`;
+
+const ReleaseName = styled(Box)`
+  ${overflowEllipsis};
+`;
+
+const Project = styled(Box)`
+  margin-left: ${space(1)};
+  flex-shrink: 0;
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
index 105866781f..e0f9f1433c 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/healthNavigationMenu.jsx
@@ -23,7 +23,9 @@ const HealthNavigationMenu = styled(
               <NavItem to={`/organizations/${organization.slug}/health/`}>
                 {t('Overview')}
               </NavItem>
-
+              <NavItem to={`/organizations/${organization.slug}/health/errors/`}>
+                {t('Errors')}
+              </NavItem>
               <NavItem to={`/organizations/${organization.slug}/health/transactions/`}>
                 {t('Transactions')}
               </NavItem>
@@ -33,7 +35,6 @@ const HealthNavigationMenu = styled(
               <NavItem to={`/organizations/${organization.slug}/health/browsers/`}>
                 {t('Browsers')}
               </NavItem>
-
               <NavItem to={`/organizations/${organization.slug}/health/devices/`}>
                 {t('Devices')}
               </NavItem>
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx
new file mode 100644
index 0000000000..b1a5103fa6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/styles/chartMargin.jsx
@@ -0,0 +1,12 @@
+import {css} from 'react-emotion';
+
+import space from 'app/styles/space';
+
+const chartMargin = css`
+  margin-right: ${space(2)};
+  &:last-child {
+    margin-right: 0;
+  }
+`;
+
+export default chartMargin;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx
index 51ab6a8a8e..06bd1290a0 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthPanelChart.jsx
@@ -1,17 +1,11 @@
-import styled, {css} from 'react-emotion';
+import styled from 'react-emotion';
 
 import PanelChart from 'app/components/charts/panelChart';
-import space from 'app/styles/space';
 
-const chartMarginCss = css`
-  margin-right: ${space(2)};
-  &:last-child {
-    margin-right: 0;
-  }
-`;
+import chartMargin from './chartMargin';
 
 const HealthPanelChart = styled(PanelChart)`
-  ${chartMarginCss};
+  ${chartMargin};
   flex-shrink: 0;
   overflow: hidden;
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx
new file mode 100644
index 0000000000..878a566df4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationHealth/styles/healthTableChart.jsx
@@ -0,0 +1,12 @@
+import styled from 'react-emotion';
+
+import TableChart from 'app/components/charts/tableChart';
+
+import chartMargin from './chartMargin';
+
+const HealthPanelChart = styled(TableChart)`
+  ${chartMargin};
+  flex-shrink: 0;
+  overflow: hidden;
+`;
+export default HealthPanelChart;
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx
index 4efa571e23..075cda512c 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/withHealth.jsx
@@ -1,6 +1,7 @@
 import React from 'react';
 
 import getDisplayName from 'app/utils/getDisplayName';
+import withLatestContext from 'app/utils/withLatestContext';
 
 import HealthContext from './healthContext';
 
@@ -8,11 +9,13 @@ import HealthContext from './healthContext';
  * HoC that provides component with properties from `HealthContext`
  */
 const withHealth = WrappedComponent => {
+  const WrappedWithLatestContext = withLatestContext(WrappedComponent);
+
   class WithHealth extends React.Component {
     render() {
       return (
         <HealthContext.Consumer>
-          {context => <WrappedComponent {...context} {...this.props} />}
+          {context => <WrappedWithLatestContext {...context} {...this.props} />}
         </HealthContext.Consumer>
       );
     }
diff --git a/tests/acceptance/test_health.py b/tests/acceptance/test_health.py
index d83550573e..606aed11df 100644
--- a/tests/acceptance/test_health.py
+++ b/tests/acceptance/test_health.py
@@ -39,13 +39,13 @@ class HealthTest(AcceptanceTestCase):
             self.browser.wait_until_not('.loading-indicator')
             self.browser.snapshot('health overview')
 
-    def test_errors(self):
-        with self.feature('organizations:health'):
-            self.browser.get(u'{}/errors/'.format(self.path))
-            self.browser.wait_until_not('.loading-indicator')
-            self.browser.snapshot('health errors')
-
     # TODO(billyvg): Skipping until API endpoints are ready
+    #  def test_errors(self):
+        #  with self.feature('organizations:health'):
+            #  self.browser.get('{}/errors/'.format(self.path))
+            #  self.browser.wait_until_not('.loading-indicator')
+            #  self.browser.snapshot('health errors')
+
     #  def test_transactions(self):
         #  with self.feature('organizations:health'):
             #  self.browser.get('{}/transactions/'.format(self.path))
diff --git a/tests/js/fixtures/health.js b/tests/js/fixtures/health.js
index 44806676c0..5715cbf0e6 100644
--- a/tests/js/fixtures/health.js
+++ b/tests/js/fixtures/health.js
@@ -1,13 +1,35 @@
-const COUNT_OBJ = tag => ({
-  count: 123,
-  release: {
-    _health_id: `${tag}:${tag}-slug`,
-    value: {slug: `${tag}-slug`},
-  },
-});
+const COUNT_OBJ = ({tag, topk}) => {
+  let tagObject;
 
-export function HealthTop(tag = 'release', params) {
-  const countObject = COUNT_OBJ(tag);
+  if (tag === 'user') {
+    const user = TestStubs.User();
+    tagObject = {
+      _health_id: `${tag}:${user.id}`,
+      value: user,
+    };
+  } else if (tag === 'release') {
+    const release = TestStubs.Release();
+    tagObject = {
+      _health_id: `${tag}:${release.slug}`,
+      value: release,
+    };
+  } else {
+    tagObject = {
+      _health_id: `${tag}:${tag}-slug`,
+      value: tag,
+    };
+  }
+
+  return {
+    count: 123,
+    [tag]: tagObject,
+    topProjects: topk ? [TestStubs.Project()] : [],
+  };
+};
+
+const DEFAULT_QUERY = {tag: 'release'};
+export function HealthTop(query = DEFAULT_QUERY, params) {
+  const countObject = COUNT_OBJ(query);
   return {
     data: [countObject],
     totals: {
@@ -17,8 +39,8 @@ export function HealthTop(tag = 'release', params) {
   };
 }
 
-export function HealthGraph(tag = 'release', params) {
-  const countObject = COUNT_OBJ(tag);
+export function HealthGraph(query = DEFAULT_QUERY, params) {
+  const countObject = COUNT_OBJ(query);
 
   return {
     data: [
diff --git a/tests/js/fixtures/release.js b/tests/js/fixtures/release.js
index 5e96a61b25..a9a906d652 100644
--- a/tests/js/fixtures/release.js
+++ b/tests/js/fixtures/release.js
@@ -1,5 +1,6 @@
 export function Release(params) {
   return {
+    slug: 'release-slug',
     dateReleased: null,
     commitCount: null,
     url: null,
diff --git a/tests/js/spec/views/organizationHealth/__snapshots__/errors.spec.jsx.snap b/tests/js/spec/views/organizationHealth/__snapshots__/errors.spec.jsx.snap
deleted file mode 100644
index a14bd46336..0000000000
--- a/tests/js/spec/views/organizationHealth/__snapshots__/errors.spec.jsx.snap
+++ /dev/null
@@ -1,9 +0,0 @@
-// Jest Snapshot v1, https://goo.gl/fbAQLP
-
-exports[`OrganizationHealthErrors renders 1`] = `
-<OrganizationHealthErrors>
-  <div>
-    Errors
-  </div>
-</OrganizationHealthErrors>
-`;
diff --git a/tests/js/spec/views/organizationHealth/browsers.spec.jsx b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
index a0658011d0..9d9008c042 100644
--- a/tests/js/spec/views/organizationHealth/browsers.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/browsers.spec.jsx
@@ -10,19 +10,22 @@ describe('OrganizationHealthBrowsers', function() {
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/top/',
     body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query.tag);
+      return TestStubs.HealthTop(opts.query);
     },
   });
 
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/graph/',
     body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query.tag);
+      return TestStubs.HealthGraph(opts.query);
     },
   });
 
   it('renders with PieChart, and EventTableChart', async function() {
-    let wrapper = mount(<OrganizationHealthBrowsers organization={org} />);
+    let wrapper = mount(
+      <OrganizationHealthBrowsers organization={org} />,
+      TestStubs.routerContext()
+    );
     await tick();
     wrapper.update();
     expect(wrapper.find('PieChart')).toHaveLength(2);
diff --git a/tests/js/spec/views/organizationHealth/devices.spec.jsx b/tests/js/spec/views/organizationHealth/devices.spec.jsx
index 0fc6754829..72f159fc08 100644
--- a/tests/js/spec/views/organizationHealth/devices.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/devices.spec.jsx
@@ -10,19 +10,22 @@ describe('OrganizationHealthDevices', function() {
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/top/',
     body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query.tag);
+      return TestStubs.HealthTop(opts.query);
     },
   });
 
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/graph/',
     body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query.tag);
+      return TestStubs.HealthGraph(opts.query);
     },
   });
 
   it('renders with PieChart, and EventTableChart', async function() {
-    let wrapper = mount(<OrganizationHealthDevices organization={org} />);
+    let wrapper = mount(
+      <OrganizationHealthDevices organization={org} />,
+      TestStubs.routerContext()
+    );
     await tick();
     wrapper.update();
     expect(wrapper.find('PieChart')).toHaveLength(1);
diff --git a/tests/js/spec/views/organizationHealth/errors.spec.jsx b/tests/js/spec/views/organizationHealth/errors.spec.jsx
index db18c23957..9dbe42ff70 100644
--- a/tests/js/spec/views/organizationHealth/errors.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/errors.spec.jsx
@@ -3,9 +3,31 @@ import {mount} from 'enzyme';
 
 import OrganizationHealthErrors from 'app/views/organizationHealth/errors';
 
+jest.mock('app/utils/withLatestContext');
+
 describe('OrganizationHealthErrors', function() {
-  it('renders', function() {
-    let wrapper = mount(<OrganizationHealthErrors />);
-    expect(wrapper).toMatchSnapshot();
+  const org = TestStubs.Organization();
+  MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/health/top/',
+    body: (url, opts) => {
+      return TestStubs.HealthTop(opts.query);
+    },
+  });
+
+  MockApiClient.addMockResponse({
+    url: '/organizations/org-slug/health/graph/',
+    body: (url, opts) => {
+      return TestStubs.HealthGraph(opts.query);
+    },
+  });
+
+  it('renders with PieChart, and EventTableChart', async function() {
+    let wrapper = mount(
+      <OrganizationHealthErrors organization={org} />,
+      TestStubs.routerContext()
+    );
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('LoadingIndicator')).toHaveLength(0);
   });
 });
diff --git a/tests/js/spec/views/organizationHealth/transactions.spec.jsx b/tests/js/spec/views/organizationHealth/transactions.spec.jsx
index b3797640b2..aefb18cbbc 100644
--- a/tests/js/spec/views/organizationHealth/transactions.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/transactions.spec.jsx
@@ -10,19 +10,22 @@ describe('OrganizationHealthTransactions', function() {
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/top/',
     body: (url, opts) => {
-      return TestStubs.HealthTop(opts.query.tag);
+      return TestStubs.HealthTop(opts.query);
     },
   });
 
   MockApiClient.addMockResponse({
     url: '/organizations/org-slug/health/graph/',
     body: (url, opts) => {
-      return TestStubs.HealthGraph(opts.query.tag);
+      return TestStubs.HealthGraph(opts.query);
     },
   });
 
   it('renders with LineChart, AreaChart, and TableChart', async function() {
-    let wrapper = mount(<OrganizationHealthTransactions organization={org} />);
+    let wrapper = mount(
+      <OrganizationHealthTransactions organization={org} />,
+      TestStubs.routerContext()
+    );
     await tick();
     wrapper.update();
     expect(wrapper.find('TableChart')).toHaveLength(1);
