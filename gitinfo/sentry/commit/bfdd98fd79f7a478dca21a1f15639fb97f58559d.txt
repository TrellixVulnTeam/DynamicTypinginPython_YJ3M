commit bfdd98fd79f7a478dca21a1f15639fb97f58559d
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Mon Dec 3 10:53:03 2018 -0800

    feat(discover): Save condition if valid on blur event (#10876)
    
    Updates condition if user clicks outside select box. Only applies if the
    condition is valid.

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
index 261cf671b3..5a769c3257 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/conditions/condition.jsx
@@ -155,6 +155,19 @@ export default class Condition extends React.Component {
     return value;
   };
 
+  handleBlur = evt => {
+    const external = getExternal(evt.target.value, this.props.columns);
+    const isValid = isValidCondition(external, this.props.columns);
+    if (isValid) {
+      this.setState(
+        {
+          inputValue: '',
+        },
+        this.props.onChange(external)
+      );
+    }
+  };
+
   newOptionCreator = ({label, labelKey, valueKey}) => {
     label = ignoreCase(label);
     return {
@@ -184,6 +197,7 @@ export default class Condition extends React.Component {
           inputRenderer={this.inputRenderer}
           valueRenderer={this.valueRenderer}
           onInputChange={this.handleInputChange}
+          onBlur={this.handleBlur}
           creatable={true}
           promptTextCreator={text => text}
           shouldKeyDownEventCreateNewOption={this.shouldKeyDownEventCreateNewOption}
diff --git a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
index f1810414ca..b5e99d0bb8 100644
--- a/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/conditions/condition.spec.jsx
@@ -4,6 +4,9 @@ import {mount} from 'enzyme';
 import Condition from 'app/views/organizationDiscover/conditions/condition';
 
 describe('Condition', function() {
+  afterEach(function() {
+    jest.clearAllMocks();
+  });
   describe('render()', function() {
     it('renders text', function() {
       const data = [
@@ -92,10 +95,6 @@ describe('Condition', function() {
       );
     });
 
-    afterEach(function() {
-      jest.clearAllMocks();
-    });
-
     it('handles valid final conditions', function() {
       const conditionList = [
         'col1 = test',
@@ -119,4 +118,26 @@ describe('Condition', function() {
       });
     });
   });
+
+  describe('handleBlur()', function() {
+    let wrapper;
+    let onChangeMock = jest.fn();
+    beforeEach(function() {
+      const columns = [{name: 'col1', type: 'string'}, {name: 'col2', type: 'number'}];
+      wrapper = mount(
+        <Condition value={[null, null, null]} onChange={onChangeMock} columns={columns} />
+      );
+    });
+    it('valid condition', function() {
+      const condition = 'col1 IS NULL';
+      wrapper.instance().handleBlur({target: {value: condition}});
+      expect(onChangeMock).toHaveBeenCalledWith(['col1', 'IS NULL', null]);
+    });
+
+    it('invalid condition', function() {
+      const condition = 'col1 -';
+      wrapper.instance().handleBlur({target: {value: condition}});
+      expect(onChangeMock).not.toHaveBeenCalled();
+    });
+  });
 });
