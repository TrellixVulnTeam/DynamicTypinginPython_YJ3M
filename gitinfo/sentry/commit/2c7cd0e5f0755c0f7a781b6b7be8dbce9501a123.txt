commit 2c7cd0e5f0755c0f7a781b6b7be8dbce9501a123
Author: Mark Story <mark@sentry.io>
Date:   Fri Jun 14 12:59:24 2019 -0400

    feat(events-v2) Enable clicking on graph markers (#13675)
    
    * feat(events-v2) Enable clicking on graph markers
    
    Clicking on a graph marker will now take you to an event in the selected
    timeslice. This requires an extra request to find an event in the slice.
    I've opted to use the `/latest` endpoint so that I don't have to deal
    with getting more a single result back, and we bias towards newer data
    in other event views.
    
    Refs SEN-733
    
    * Move util function to live with other date functions.
    
    * Move util function to live with other date functions
    
    * Add tests for parsePeriodToHours
    
    * Add pin marker to chart

diff --git a/src/sentry/static/sentry/app/components/charts/utils.jsx b/src/sentry/static/sentry/app/components/charts/utils.jsx
index 11fd376be4..8b06d0828e 100644
--- a/src/sentry/static/sentry/app/components/charts/utils.jsx
+++ b/src/sentry/static/sentry/app/components/charts/utils.jsx
@@ -1,7 +1,7 @@
 import moment from 'moment';
 
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
-import {parsePeriodToHours} from 'app/utils';
+import {parsePeriodToHours} from 'app/utils/dates';
 
 const DEFAULT_TRUNCATE_LENGTH = 80;
 
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index fe222c891b..fc55dd42ad 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -6,12 +6,13 @@ import styled from 'react-emotion';
 
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {analytics} from 'app/utils/analytics';
-import {defined, parsePeriodToHours} from 'app/utils';
+import {defined} from 'app/utils';
 import {
   getLocalToSystem,
   getPeriodAgo,
   getUserTimezone,
   getUtcToSystem,
+  parsePeriodToHours,
 } from 'app/utils/dates';
 import {getRelativeSummary} from 'app/components/organizations/timeRangeSelector/utils';
 import {t} from 'app/locale';
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 148be538a8..7eacc4b1df 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -239,29 +239,6 @@ export function isWebpackChunkLoadingError(error) {
   );
 }
 
-/**
- * This parses our period shorthand strings (e.g. <int><unit>)
- * and converts it into hours
- */
-export function parsePeriodToHours(str) {
-  const [, periodNumber, periodLength] = str.match(/([0-9]+)([smhdw])/);
-
-  switch (periodLength) {
-    case 's':
-      return periodNumber / (60 * 60);
-    case 'm':
-      return periodNumber / 60;
-    case 'h':
-      return periodNumber;
-    case 'd':
-      return periodNumber * 24;
-    case 'w':
-      return periodNumber * 24 * 7;
-    default:
-      return -1;
-  }
-}
-
 export function deepFreeze(object) {
   // Retrieve the property names defined on object
   const propNames = Object.getOwnPropertyNames(object);
diff --git a/src/sentry/static/sentry/app/utils/dates.jsx b/src/sentry/static/sentry/app/utils/dates.jsx
index 18120291a7..90b27e0972 100644
--- a/src/sentry/static/sentry/app/utils/dates.jsx
+++ b/src/sentry/static/sentry/app/utils/dates.jsx
@@ -144,3 +144,48 @@ export function getPeriodAgo(period, unit) {
 export function getStartOfPeriodAgo(period, unit, options) {
   return getStartOfDay(getPeriodAgo(period, unit), options);
 }
+
+/**
+ * Convert an interval string into a number of seconds.
+ * This allows us to create end timestamps from starting ones
+ * enabling us to find events in narrow windows.
+ *
+ * @param {String} interval The interval to convert.
+ * @return {Integer}
+ */
+export function intervalToMilliseconds(interval) {
+  const pattern = /^(\d+)(h|m)$/;
+  const matches = pattern.exec(interval);
+  if (!matches) {
+    return 0;
+  }
+  const [_, value, unit] = matches;
+  const multipliers = {
+    h: 60 * 60,
+    m: 60,
+  };
+  return parseInt(value, 10) * multipliers[unit] * 1000;
+}
+
+/**
+ * This parses our period shorthand strings (e.g. <int><unit>)
+ * and converts it into hours
+ */
+export function parsePeriodToHours(str) {
+  const [, periodNumber, periodLength] = str.match(/([0-9]+)([smhdw])/);
+
+  switch (periodLength) {
+    case 's':
+      return periodNumber / (60 * 60);
+    case 'm':
+      return periodNumber / 60;
+    case 'h':
+      return parseInt(periodNumber, 10);
+    case 'd':
+      return periodNumber * 24;
+    case 'w':
+      return periodNumber * 24 * 7;
+    default:
+      return -1;
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
index 0d71b51e4d..b6c5208b4d 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard/discoverQuery.jsx
@@ -5,7 +5,7 @@ import React from 'react';
 import {DEFAULT_STATS_PERIOD} from 'app/constants';
 import {getInterval} from 'app/components/charts/utils';
 import {getPeriod} from 'app/utils/getPeriod';
-import {parsePeriodToHours} from 'app/utils';
+import {parsePeriodToHours} from 'app/utils/dates';
 import SentryTypes from 'app/sentryTypes';
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx
index f243396b6e..e1a51dd8f4 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/canIncludePreviousPeriod.jsx
@@ -1,4 +1,4 @@
-import {parsePeriodToHours} from 'app/utils';
+import {parsePeriodToHours} from 'app/utils/dates';
 // Max period (in hours) before we can no long include previous period
 const MAX_PERIOD_HOURS_INCLUDE_PREVIOUS = 45 * 24;
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
index 7bade2ffa8..66eae0b8a6 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/utils/eventsRequest.jsx
@@ -46,6 +46,7 @@ class EventsRequest extends React.PureComponent {
      * Absolute start date for query
      */
     start: PropTypes.instanceOf(Date),
+
     /**
      * Absolute end date for query
      */
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
index 5bc901339e..80078a6523 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/data.jsx
@@ -9,10 +9,12 @@ import space from 'app/styles/space';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
 import UserBadge from 'app/components/idBadge/userBadge';
 import DateTime from 'app/components/dateTime';
+import pinIcon from 'app/../images/location-pin.png';
 
 import {QueryLink} from './styles';
 
 export const MODAL_QUERY_KEYS = ['eventSlug', 'groupSlug'];
+export const PIN_ICON = `image://${pinIcon}`;
 
 export const ALL_VIEWS = deepFreeze([
   {
diff --git a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
index f9b9b7a90a..89fd1f955d 100644
--- a/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEventsV2/modalLineGraph.jsx
@@ -1,10 +1,16 @@
 import React from 'react';
 import PropTypes from 'prop-types';
+import {browserHistory} from 'react-router';
+import {omit} from 'lodash';
 
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import {getInterval, useShortInterval} from 'app/components/charts/utils';
-import {getFormattedDate} from 'app/utils/dates';
+import {
+  getFormattedDate,
+  getUtcDateString,
+  intervalToMilliseconds,
+} from 'app/utils/dates';
 import EventsRequest from 'app/views/organizationEvents/utils/eventsRequest';
 import LineChart from 'app/components/charts/lineChart';
 import MarkLine from 'app/components/charts/components/markLine';
@@ -13,8 +19,12 @@ import withApi from 'app/utils/withApi';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import theme from 'app/utils/theme';
 
-const defaultGetCategory = () => t('Events');
+import {MODAL_QUERY_KEYS, PIN_ICON} from './data';
 
+/**
+ * Generate the data to display a vertical line for the current
+ * event on the graph.
+ */
 const getCurrentEventMarker = currentEvent => {
   const title = t('Current Event');
   const eventTime = +new Date(currentEvent.dateCreated);
@@ -23,8 +33,8 @@ const getCurrentEventMarker = currentEvent => {
     type: 'line',
     data: [],
     markLine: MarkLine({
-      // TODO replace the diamond with a custom image.
-      symbol: ['diamond', 'none'],
+      symbol: [PIN_ICON, 'none'],
+      symbolSize: [15, 30],
       lineStyle: {
         normal: {
           color: theme.red,
@@ -49,6 +59,55 @@ const getCurrentEventMarker = currentEvent => {
   };
 };
 
+/**
+ * Handle click events on line markers
+ *
+ * When a user clicks on a marker we want to update the modal
+ * to display an event from that time slice. While each graph slice
+ * could contain thousands of events, we use the /latest endpoint
+ * to pick one.
+ */
+const handleClick = async function(
+  series,
+  {api, organization, groupId, interval, selection, location}
+) {
+  // Get the timestamp that was clicked.
+  const value = series.value[0];
+
+  // Get events that match the clicked timestamp
+  // taking into account the group and current environment & query
+  const query = {
+    environment: selection.environments,
+    query: location.query.query,
+    group: groupId,
+    start: getUtcDateString(value),
+    end: getUtcDateString(value + intervalToMilliseconds(interval)),
+  };
+
+  const url = `/organizations/${organization.slug}/events/latest/`;
+  let response;
+  try {
+    response = await api.requestPromise(url, {
+      method: 'GET',
+      query,
+    });
+  } catch (e) {
+    // Do nothing, user could have clicked on a blank space.
+    return;
+  }
+
+  browserHistory.push({
+    pathname: location.pathname,
+    query: {
+      ...omit(location.query, MODAL_QUERY_KEYS),
+      eventSlug: `${response.projectSlug}:${response.eventID}`,
+    },
+  });
+};
+
+/**
+ * Render a graph of event volumes for the current group + event.
+ */
 const ModalLineGraph = props => {
   const {api, organization, location, selection, currentEvent} = props;
 
@@ -74,6 +133,7 @@ const ModalLineGraph = props => {
       return getFormattedDate(value, 'lll', {local: !isUtc});
     },
   };
+  const groupId = currentEvent.groupID;
 
   return (
     <Panel>
@@ -86,11 +146,10 @@ const ModalLineGraph = props => {
         start={selection.datetime.start}
         end={selection.datetime.end}
         interval={interval}
-        getCategory={defaultGetCategory}
         showLoading={true}
         query={location.query.query}
         includePrevious={false}
-        groupId={currentEvent.groupID}
+        groupId={groupId}
       >
         {({loading, reloading, timeseriesData}) => (
           <LineChart
@@ -100,6 +159,16 @@ const ModalLineGraph = props => {
             seriesOptions={{
               showSymbol: false,
             }}
+            onClick={series =>
+              handleClick(series, {
+                api,
+                organization,
+                groupId,
+                interval,
+                selection,
+                location,
+              })
+            }
             tooltip={tooltip}
             xAxis={xAxisOptions}
             grid={{
diff --git a/src/sentry/static/sentry/images/location-pin.png b/src/sentry/static/sentry/images/location-pin.png
new file mode 100644
index 0000000000..65b07a33e6
Binary files /dev/null and b/src/sentry/static/sentry/images/location-pin.png differ
diff --git a/tests/js/spec/utils/dates.spec.jsx b/tests/js/spec/utils/dates.spec.jsx
index a644fe7335..7aa2a296d7 100644
--- a/tests/js/spec/utils/dates.spec.jsx
+++ b/tests/js/spec/utils/dates.spec.jsx
@@ -1,4 +1,4 @@
-import {setDateToTime} from 'app/utils/dates';
+import {setDateToTime, intervalToMilliseconds, parsePeriodToHours} from 'app/utils/dates';
 
 describe('utils.dates', function() {
   describe('setDateToTime', function() {
@@ -20,4 +20,30 @@ describe('utils.dates', function() {
       expect(newDate).toEqual(new Date(1508166671000));
     });
   });
+
+  describe('intervalToMilliseconds()', function() {
+    it('can convert standard formats', function() {
+      expect(intervalToMilliseconds('24h')).toBe(86400000);
+      expect(intervalToMilliseconds('30m')).toBe(1800000);
+      expect(intervalToMilliseconds('15m')).toBe(900000);
+      expect(intervalToMilliseconds('5m')).toBe(300000);
+      expect(intervalToMilliseconds('1m')).toBe(60000);
+    });
+
+    it('can convert arbitrary formats', function() {
+      expect(intervalToMilliseconds('1h')).toBe(3600000);
+      expect(intervalToMilliseconds('2m')).toBe(120000);
+    });
+  });
+
+  describe('parsePeriodToHours()', function() {
+    it('can convert standard formats', function() {
+      expect(parsePeriodToHours('30s').toFixed(4)).toBe('0.0083');
+      expect(parsePeriodToHours('1m').toFixed(4)).toBe('0.0167');
+      expect(parsePeriodToHours('1h')).toBe(1);
+      expect(parsePeriodToHours('24h')).toBe(24);
+      expect(parsePeriodToHours('1d')).toBe(24);
+      expect(parsePeriodToHours('2w')).toBe(336);
+    });
+  });
 });
