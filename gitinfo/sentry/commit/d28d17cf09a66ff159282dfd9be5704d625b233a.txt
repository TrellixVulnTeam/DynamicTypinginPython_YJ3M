commit d28d17cf09a66ff159282dfd9be5704d625b233a
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Tue Dec 11 10:36:37 2018 -0800

    feat(sentry10): Persist environment and datetime selections (#10999)
    
    Adds datetime and environment to global selection store, use in Events
    and Discover

diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
index 5153bf1d9c..08c6fdfc1a 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
@@ -23,3 +23,21 @@ export function updateProjects(projects) {
 function isProjectsValid(projects) {
   return Array.isArray(projects) && projects.every(project => isInteger(project));
 }
+
+/**
+ * Updates datetime selection
+ *
+ * @param {Object} datetime Object with start, end, range keys
+ */
+export function updateDateTime(datetime) {
+  GlobalSelectionActions.updateDateTime(datetime);
+}
+
+/**
+ * Updates global environment selection
+ *
+ * @param {String[]} environments List of environments
+ */
+export function updateEnvironments(environments) {
+  GlobalSelectionActions.updateEnvironments(environments);
+}
diff --git a/src/sentry/static/sentry/app/actions/globalSelectionActions.jsx b/src/sentry/static/sentry/app/actions/globalSelectionActions.jsx
index 9bdd606592..ddd6347b22 100644
--- a/src/sentry/static/sentry/app/actions/globalSelectionActions.jsx
+++ b/src/sentry/static/sentry/app/actions/globalSelectionActions.jsx
@@ -1,3 +1,7 @@
 import Reflux from 'reflux';
 
-export default Reflux.createActions(['updateProjects']);
+export default Reflux.createActions([
+  'updateProjects',
+  'updateDateTime',
+  'updateEnvironments',
+]);
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index ea2bea0fe9..d71afa0376 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -1,5 +1,7 @@
 import Reflux from 'reflux';
 
+import {DEFAULT_STATS_PERIOD} from 'app/constants';
+
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 
 /**
@@ -10,8 +12,12 @@ const GlobalSelectionStore = Reflux.createStore({
   init() {
     this.selection = {
       projects: [],
+      environments: [],
+      datetime: {start: null, end: null, range: DEFAULT_STATS_PERIOD},
     };
     this.listenTo(GlobalSelectionActions.updateProjects, this.updateProjects);
+    this.listenTo(GlobalSelectionActions.updateDateTime, this.updateDateTime);
+    this.listenTo(GlobalSelectionActions.updateEnvironments, this.updateEnvironments);
   },
 
   get() {
@@ -22,6 +28,16 @@ const GlobalSelectionStore = Reflux.createStore({
     this.selection.projects = projects;
     this.trigger(this.selection);
   },
+
+  updateDateTime(datetime) {
+    this.selection.datetime = datetime;
+    this.trigger(this.selection);
+  },
+
+  updateEnvironments(environments = []) {
+    this.selection.environments = environments;
+    this.trigger(this.selection);
+  },
 });
 
 export default GlobalSelectionStore;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index e6193f47a0..62d80212ad 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -5,7 +5,7 @@ import {browserHistory} from 'react-router';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {getUtcDateString} from 'app/utils/dates';
-import {updateProjects} from 'app/actionCreators/globalSelection';
+import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import {t, tct} from 'app/locale';
 
 import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
@@ -119,6 +119,16 @@ export default class OrganizationDiscover extends React.Component {
     updateProjects(val);
   };
 
+  updateDateTime = ({relative, start, end}) => {
+    const datetimeFields = {
+      range: relative,
+      start: (start && getUtcDateString(start)) || start,
+      end: (end && getUtcDateString(end)) || end,
+    };
+    this.updateFields(datetimeFields);
+    updateDateTime(datetimeFields);
+  };
+
   updateField = (field, value) => {
     this.props.queryBuilder.updateField(field, value);
     this.forceUpdate();
@@ -135,14 +145,6 @@ export default class OrganizationDiscover extends React.Component {
     this.runQuery();
   };
 
-  handleUpdateTime = ({relative, start, end}) => {
-    this.updateFields({
-      range: relative,
-      start: (start && getUtcDateString(start)) || start,
-      end: (end && getUtcDateString(end)) || end,
-    });
-  };
-
   runQuery = () => {
     const {queryBuilder, organization} = this.props;
     const {resultManager} = this.state;
@@ -375,7 +377,7 @@ export default class OrganizationDiscover extends React.Component {
               start={start}
               end={end}
               relative={currentQuery.range}
-              onChange={this.handleUpdateTime}
+              onChange={this.updateDateTime}
               onUpdate={this.runQuery}
             />
           </HeaderItemPosition>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index 1bf5cd10ca..125a807acc 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -6,7 +6,7 @@ import DocumentTitle from 'react-document-title';
 import jQuery from 'jquery';
 import SentryTypes from 'app/sentryTypes';
 
-import {updateProjects} from 'app/actionCreators/globalSelection';
+import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 
 import Discover from './discover';
@@ -51,6 +51,20 @@ class OrganizationDiscoverContainer extends React.Component {
       query.projects = props.selection.projects;
     }
 
+    if (['range', 'start', 'end'].some(key => query.hasOwnProperty(key))) {
+      // Update global store with datetime from querystring
+      updateDateTime({
+        start: query.start || null,
+        end: query.end || null,
+        range: query.range || null,
+      });
+    } else {
+      // Update query with global projects
+      query.start = props.selection.datetime.start;
+      query.end = props.selection.datetime.end;
+      query.range = props.selection.datetime.range;
+    }
+
     this.queryBuilder = createQueryBuilder(query, organization);
   }
 
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 851e1b20dc..cdb4b2093c 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -19,7 +19,11 @@ import MultipleProjectSelector from 'app/components/organizations/multipleProjec
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import space from 'app/styles/space';
-import {updateProjects} from 'app/actionCreators/globalSelection';
+import {
+  updateProjects,
+  updateDateTime,
+  updateEnvironments,
+} from 'app/actionCreators/globalSelection';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 
@@ -63,9 +67,11 @@ class OrganizationEventsContainer extends React.Component {
 
   static getStateFromRouter(props) {
     const {query} = props.router.location;
-    const hasAbsolute = !!query.start && !!query.end;
+    const hasAbsolute =
+      (!!query.start && !!query.end) ||
+      (!!props.selection.start && !!props.selection.end);
     let project = props.selection.projects;
-    let environment = query.environment || [];
+    let environment = query.environment || props.selection.environments;
 
     if (defined(query.project) && Array.isArray(query.project)) {
       project = query.project.map(p => parseInt(p, 10));
@@ -78,7 +84,8 @@ class OrganizationEventsContainer extends React.Component {
       environment = [query.environment];
     }
 
-    let {start, end} = query;
+    let start = query.start || props.selection.start;
+    let end = query.end || props.selection.end;
 
     if (hasAbsolute) {
       start = getLocalDateObject(start);
@@ -88,7 +95,10 @@ class OrganizationEventsContainer extends React.Component {
     return {
       project,
       environment,
-      period: query.statsPeriod || (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
+      period:
+        query.statsPeriod ||
+        props.selection.datetime.range ||
+        (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
       query: query.query || null,
       start: start || null,
       end: end || null,
@@ -124,6 +134,8 @@ class OrganizationEventsContainer extends React.Component {
 
   componentDidMount() {
     this.handleUpdateProjects();
+    this.handleUpdateEnvironmments();
+    this.handleUpdatePeriod();
   }
 
   updateParams = obj => {
@@ -168,10 +180,16 @@ class OrganizationEventsContainer extends React.Component {
     this.setState({
       environment: environments,
     });
+    updateEnvironments(environments);
   };
 
   handleChangeTime = ({start, end, relative, utc}) => {
     this.setState({start, end, period: relative, utc});
+    updateDateTime({
+      start,
+      end,
+      range: relative,
+    });
   };
 
   handleUpdatePeriod = () => {
diff --git a/tests/js/spec/actionCreators/globalSelection.spec.jsx b/tests/js/spec/actionCreators/globalSelection.spec.jsx
index aded46a65c..52b98721ab 100644
--- a/tests/js/spec/actionCreators/globalSelection.spec.jsx
+++ b/tests/js/spec/actionCreators/globalSelection.spec.jsx
@@ -18,4 +18,6 @@ describe('GlobalSelection ActionCreators', function() {
       expect(updateProjectsMock).not.toHaveBeenCalled();
     });
   });
+
+  describe('updateEnvironments()', function() {});
 });
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index beaa1427f4..87ee4b8995 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -1,9 +1,17 @@
 import GlobalSelectionStore from 'app/stores/globalSelectionStore';
-import {updateProjects} from 'app/actionCreators/globalSelection';
+import {
+  updateProjects,
+  updateDateTime,
+  updateEnvironments,
+} from 'app/actionCreators/globalSelection';
 
 describe('GlobalSelectionStore', function() {
   it('get()', function() {
-    expect(GlobalSelectionStore.get()).toEqual({projects: []});
+    expect(GlobalSelectionStore.get()).toEqual({
+      projects: [],
+      environments: [],
+      datetime: {range: '14d', start: null, end: null},
+    });
   });
 
   it('updateProjects()', async function() {
@@ -12,4 +20,23 @@ describe('GlobalSelectionStore', function() {
     await tick();
     expect(GlobalSelectionStore.get().projects).toEqual([1]);
   });
+
+  it('updateDateTime()', async function() {
+    expect(GlobalSelectionStore.get().datetime.range).toEqual('14d');
+    updateDateTime({range: '2h', start: null, end: null});
+    await tick();
+    expect(GlobalSelectionStore.get().datetime.range).toEqual('2h');
+    updateDateTime({
+      range: null,
+      start: '2018-08-08T00:00:00',
+      end: '2018-09-08T00:00:00',
+    });
+  });
+
+  it('updateEnvironments()', async function() {
+    expect(GlobalSelectionStore.get().environments).toEqual([]);
+    updateEnvironments(['alpha']);
+    await tick();
+    expect(GlobalSelectionStore.get().environments).toEqual(['alpha']);
+  });
 });
diff --git a/tests/js/spec/utils/withGlobalSelection.spec.jsx b/tests/js/spec/utils/withGlobalSelection.spec.jsx
index 4507e14fbb..17e7124a4f 100644
--- a/tests/js/spec/utils/withGlobalSelection.spec.jsx
+++ b/tests/js/spec/utils/withGlobalSelection.spec.jsx
@@ -9,16 +9,52 @@ describe('withGlobalSelection HoC', function() {
     GlobalSelectionStore.init();
   });
 
-  it('works', function() {
+  it('handles projects', function() {
     const MyComponent = () => null;
     let Container = withGlobalSelection(MyComponent);
     let wrapper = mount(<Container />);
 
-    expect(wrapper.find('MyComponent').prop('selection')).toEqual({projects: []});
+    expect(wrapper.find('MyComponent').prop('selection').projects).toEqual([]);
 
-    // Update projects in store
     GlobalSelectionStore.updateProjects([1]);
 
-    expect(wrapper.find('MyComponent').prop('selection')).toEqual({projects: [1]});
+    expect(wrapper.find('MyComponent').prop('selection').projects).toEqual([1]);
+  });
+
+  it('handles datetime', function() {
+    const MyComponent = () => null;
+    let Container = withGlobalSelection(MyComponent);
+    let wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('selection').datetime.range).toEqual('14d');
+
+    GlobalSelectionStore.updateDateTime({
+      range: '7d',
+      start: null,
+      end: null,
+    });
+
+    expect(wrapper.find('MyComponent').prop('selection').datetime.range).toEqual('7d');
+
+    GlobalSelectionStore.updateDateTime({
+      range: null,
+      start: '2018-08-08T00:00:00',
+      end: '2018-08-08T00:00:00',
+    });
+  });
+
+  it('handles environments', function() {
+    const MyComponent = () => null;
+    let Container = withGlobalSelection(MyComponent);
+    let wrapper = mount(<Container />);
+
+    expect(wrapper.find('MyComponent').prop('selection').environments).toEqual([]);
+
+    GlobalSelectionStore.updateEnvironments(['beta', 'alpha']);
+
+    expect(wrapper.find('MyComponent').prop('selection').environments).toEqual([
+      'beta',
+      'alpha',
+    ]);
   });
 });
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index 3cd54bec9e..9ea8ce69e1 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -27,7 +27,7 @@ describe('OrganizationDiscoverContainer', function() {
         <OrganizationDiscoverContainer
           location={{query: {}, search: ''}}
           params={{}}
-          selection={{}}
+          selection={{datetime: {}}}
         />,
         TestStubs.routerContext([{organization}])
       );
@@ -46,7 +46,11 @@ describe('OrganizationDiscoverContainer', function() {
         <OrganizationDiscoverContainer
           location={{query: {}, search: ''}}
           params={{}}
-          selection={{projects: [1]}}
+          selection={{
+            projects: [1],
+            environments: [],
+            datetime: {start: null, end: null, range: '14d'},
+          }}
         />,
         TestStubs.routerContext([{organization}])
       );
@@ -80,7 +84,7 @@ describe('OrganizationDiscoverContainer', function() {
         <OrganizationDiscoverContainer
           location={{query: {}, search: ''}}
           params={{savedQueryId: 1}}
-          selection={{}}
+          selection={{datetime: {}}}
         />,
         {
           ...TestStubs.routerContext([{organization}, {organization: PropTypes.object}]),
@@ -119,7 +123,7 @@ describe('OrganizationDiscoverContainer', function() {
         <OrganizationDiscoverContainer
           location={{query: {}, search: ''}}
           params={{}}
-          selection={{}}
+          selection={{datetime: {}}}
         />,
         TestStubs.routerContext([{organization}])
       );
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index c5b9984f46..93101a7fe3 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -163,13 +163,13 @@ describe('OrganizationEventsErrors', function() {
         <OrganizationEventsContainer
           router={router}
           organization={org}
-          selection={{projects: []}}
+          selection={{projects: [], environments: [], datetime: {}}}
           location={location}
         >
           <OrganizationEvents
             location={location}
             organization={org}
-            selection={{projects: []}}
+            selection={{projects: [], environments: [], datetime: {}}}
           />
         </OrganizationEventsContainer>,
         routerContext
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index f5b7c21ce7..983dea605b 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -41,7 +41,11 @@ describe('OrganizationEvents', function() {
         <OrganizationEventsContainer
           router={router}
           organization={organization}
-          selection={{projects: []}}
+          selection={{
+            projects: [],
+            environments: [],
+            datetime: {start: null, end: null, range: '14d'},
+          }}
           location={router.location}
         >
           <div />
@@ -259,7 +263,7 @@ describe('OrganizationEvents', function() {
     });
 
     it('does not update router when toggling environment selector without changes', async function() {
-      expect(router.push).toHaveBeenCalledTimes(1);
+      const prevCallCount = router.push.mock.calls.length;
 
       wrapper.setProps({
         router: {
@@ -280,7 +284,7 @@ describe('OrganizationEvents', function() {
       wrapper
         .find('MultipleEnvironmentSelector StyledInput')
         .simulate('keyDown', {key: 'Escape'});
-      expect(router.push).toHaveBeenCalledTimes(1);
+      expect(router.push).toHaveBeenCalledTimes(prevCallCount);
     });
 
     it('updates router when changing periods', async function() {
