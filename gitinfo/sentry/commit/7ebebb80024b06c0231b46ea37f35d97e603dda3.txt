commit 7ebebb80024b06c0231b46ea37f35d97e603dda3
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Mon Mar 26 12:50:45 2018 -0700

    feat(js): Add query string support to recreateRoute

diff --git a/src/sentry/static/sentry/app/utils/recreateRoute.jsx b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
index ded0832310..4c49fdf334 100644
--- a/src/sentry/static/sentry/app/utils/recreateRoute.jsx
+++ b/src/sentry/static/sentry/app/utils/recreateRoute.jsx
@@ -8,7 +8,7 @@ import replaceRouterParams from './replaceRouterParams';
 // Can additionally specify the number of routes to move back
 //
 // See tests for examples
-export default function recreateRoute(to, {routes, params, stepBack}) {
+export default function recreateRoute(to, {routes, params, location, stepBack}) {
   let paths = routes.map(({path}) => path || '');
   let lastRootIndex = findLastIndex(paths, path => path[0] === '/');
   let routeIndex;
@@ -23,7 +23,9 @@ export default function recreateRoute(to, {routes, params, stepBack}) {
     baseRoute = baseRoute.slice(0, stepBack);
   }
 
-  let fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}`;
+  let query = typeof location !== 'undefined' && location.search ? location.search : '';
+
+  let fullRoute = `${baseRoute.join('')}${routeToRoute ? '' : to}${query}`;
 
   return replaceRouterParams(fullRoute, params);
 }
diff --git a/tests/js/spec/utils/recreateRoute.spec.jsx b/tests/js/spec/utils/recreateRoute.spec.jsx
index a616589b4f..0c2c140b5a 100644
--- a/tests/js/spec/utils/recreateRoute.spec.jsx
+++ b/tests/js/spec/utils/recreateRoute.spec.jsx
@@ -21,32 +21,46 @@ const params = {
   projectId: 'project-slug',
 };
 
+const location = {
+  search: '',
+};
+
 describe('recreateRoute', function() {
   it('returns correct path to a route object', function() {
     expect(recreateRoute(routes[4], {routes, params})).toBe(
       '/settings/org-slug/api-keys/'
     );
 
-    expect(recreateRoute(projectRoutes[4], {routes: projectRoutes, params})).toBe(
-      '/settings/org-slug/project-slug/alerts/'
-    );
+    expect(
+      recreateRoute(projectRoutes[4], {routes: projectRoutes, location, params})
+    ).toBe('/settings/org-slug/project-slug/alerts/');
   });
 
   it('returns correct path to a string (at the end of the routes)', function() {
-    expect(recreateRoute('test/', {routes, params})).toBe(
+    expect(recreateRoute('test/', {routes, location, params})).toBe(
       '/settings/org-slug/api-keys/test/'
     );
   });
 
   it('returns correct path to a string after the 2nd to last route', function() {
-    expect(recreateRoute('test/', {routes, params, stepBack: -2})).toBe(
+    expect(recreateRoute('test/', {routes, location, params, stepBack: -2})).toBe(
       '/settings/org-slug/test/'
     );
   });
 
   it('switches to new org but keeps current route', function() {
-    expect(recreateRoute(routes[4], {routes, params: {orgId: 'new-org'}})).toBe(
+    expect(recreateRoute(routes[4], {routes, location, params: {orgId: 'new-org'}})).toBe(
       '/settings/new-org/api-keys/'
     );
   });
+
+  it('maintains the query strting', function() {
+    const withSearch = {
+      search: '?key1=foo&key2=bar',
+    };
+
+    expect(recreateRoute(routes[4], {routes, params, location: withSearch})).toBe(
+      '/settings/org-slug/api-keys/?key1=foo&key2=bar'
+    );
+  });
 });
