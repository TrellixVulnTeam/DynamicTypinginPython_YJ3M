commit c9c352b377bb8225c71c63a2adab2d4255dc7114
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Mon Sep 11 10:27:36 2017 -0700

    feat(workflow): Track and display granular filter stats
    
    
    Add metrics to track why events are getting filtered at a granular level and display these on the inbound data filters chart.
    
    This is only available to superusers as of yet.

diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 20234fcdaf..ab99f1028a 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -5,6 +5,7 @@ from rest_framework.response import Response
 from sentry import tsdb
 from sentry.api.base import DocSection, StatsMixin
 from sentry.api.bases.project import ProjectEndpoint
+from sentry.utils.data_filters import FILTER_STAT_KEYS_TO_VALUES
 from sentry.utils.apidocs import scenario, attach_scenarios
 
 
@@ -12,7 +13,8 @@ from sentry.utils.apidocs import scenario, attach_scenarios
 def retrieve_event_counts_project(runner):
     runner.request(
         method='GET',
-        path='/projects/%s/%s/stats/' % (runner.org.slug, runner.default_project.slug)
+        path='/projects/%s/%s/stats/' % (runner.org.slug,
+                                         runner.default_project.slug)
     )
 
 
@@ -61,7 +63,10 @@ class ProjectStatsEndpoint(ProjectEndpoint, StatsMixin):
         elif stat == 'forwarded':
             stat_model = tsdb.models.project_total_forwarded
         else:
-            raise ValueError('Invalid stat: %s' % stat)
+            try:
+                stat_model = FILTER_STAT_KEYS_TO_VALUES[stat]
+            except KeyError:
+                raise ValueError('Invalid stat: %s' % stat)
 
         data = tsdb.get_range(
             model=stat_model, keys=[project.id], **self._parse_args(request)
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index b119f6faa4..bc41369629 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -47,7 +47,7 @@ from sentry.utils.auth import parse_auth_header
 from sentry.utils.csp import is_valid_csp_report
 from sentry.utils.http import origin_from_request
 from sentry.utils.data_filters import is_valid_ip, \
-    is_valid_release, is_valid_error_message
+    is_valid_release, is_valid_error_message, FilterStatKeys
 from sentry.utils.strings import decompress
 from sentry.utils.validators import is_float, is_event_id
 
@@ -192,15 +192,18 @@ class ClientApiHelper(object):
         self.log = ClientLogHelper(self.context)
 
     def auth_from_request(self, request):
-        result = {k: request.GET[k] for k in six.iterkeys(request.GET) if k[:7] == 'sentry_'}
+        result = {k: request.GET[k] for k in six.iterkeys(
+            request.GET) if k[:7] == 'sentry_'}
 
         if request.META.get('HTTP_X_SENTRY_AUTH', '')[:7].lower() == 'sentry ':
             if result:
-                raise SuspiciousOperation('Multiple authentication payloads were detected.')
+                raise SuspiciousOperation(
+                    'Multiple authentication payloads were detected.')
             result = parse_auth_header(request.META['HTTP_X_SENTRY_AUTH'])
         elif request.META.get('HTTP_AUTHORIZATION', '')[:7].lower() == 'sentry ':
             if result:
-                raise SuspiciousOperation('Multiple authentication payloads were detected.')
+                raise SuspiciousOperation(
+                    'Multiple authentication payloads were detected.')
             result = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
 
         if not result:
@@ -258,7 +261,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (type(e).__name__, e))
+            raise APIError('Bad data decoding request (%s, %s)' %
+                           (type(e).__name__, e))
 
     def decompress_deflate(self, encoded_data):
         try:
@@ -267,7 +271,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (type(e).__name__, e))
+            raise APIError('Bad data decoding request (%s, %s)' %
+                           (type(e).__name__, e))
 
     def decompress_gzip(self, encoded_data):
         try:
@@ -281,7 +286,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (type(e).__name__, e))
+            raise APIError('Bad data decoding request (%s, %s)' %
+                           (type(e).__name__, e))
 
     def decode_and_decompress_data(self, encoded_data):
         try:
@@ -293,7 +299,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data decoding request (%s, %s)' % (type(e).__name__, e))
+            raise APIError('Bad data decoding request (%s, %s)' %
+                           (type(e).__name__, e))
 
     def safely_load_json_string(self, json_string):
         try:
@@ -305,7 +312,8 @@ class ClientApiHelper(object):
             # This error should be caught as it suggests that there's a
             # bug somewhere in the client's code.
             self.log.debug(six.text_type(e), exc_info=True)
-            raise APIError('Bad data reconstructing object (%s, %s)' % (type(e).__name__, e))
+            raise APIError('Bad data reconstructing object (%s, %s)' %
+                           (type(e).__name__, e))
         return obj
 
     def _process_data_timestamp(self, data, current_datetime=None):
@@ -317,7 +325,8 @@ class ClientApiHelper(object):
             try:
                 value = datetime.fromtimestamp(float(value))
             except Exception:
-                raise InvalidTimestamp('Invalid value for timestamp: %r' % data['timestamp'])
+                raise InvalidTimestamp(
+                    'Invalid value for timestamp: %r' % data['timestamp'])
         elif not isinstance(value, datetime):
             # all timestamps are in UTC, but the marker is optional
             if value.endswith('Z'):
@@ -333,16 +342,19 @@ class ClientApiHelper(object):
             try:
                 value = datetime.strptime(value, fmt)
             except Exception:
-                raise InvalidTimestamp('Invalid value for timestamp: %r' % data['timestamp'])
+                raise InvalidTimestamp(
+                    'Invalid value for timestamp: %r' % data['timestamp'])
 
         if current_datetime is None:
             current_datetime = datetime.now()
 
         if value > current_datetime + timedelta(minutes=1):
-            raise InvalidTimestamp('Invalid value for timestamp (in future): %r' % value)
+            raise InvalidTimestamp(
+                'Invalid value for timestamp (in future): %r' % value)
 
         if value < current_datetime - timedelta(days=30):
-            raise InvalidTimestamp('Invalid value for timestamp (too old): %r' % value)
+            raise InvalidTimestamp(
+                'Invalid value for timestamp (too old): %r' % value)
 
         data['timestamp'] = float(value.strftime('%s'))
 
@@ -382,24 +394,24 @@ class ClientApiHelper(object):
         so that we can store it in metrics
         """
         if ip_address and not is_valid_ip(project, ip_address):
-            return (True, 'ip_address')
+            return (True, FilterStatKeys.IP_ADDRESS)
 
         release = data.get('release')
         if release and not is_valid_release(project, release):
-            return (True, 'release_version')
+            return (True, FilterStatKeys.RELEASE_VERSION)
 
         message_interface = data.get('sentry.interfaces.Message', {})
         error_message = message_interface.get('formatted', ''
                                               ) or message_interface.get('message', '')
         if error_message and not is_valid_error_message(project, error_message):
-            return (True, 'error_message')
+            return (True, FilterStatKeys.ERROR_MESSAGE)
 
         for filter_cls in filters.all():
             filter_obj = filter_cls(project)
             if filter_obj.is_enabled() and filter_obj.test(data):
-                return (True, 'other_filter')
+                return (True, six.text_type(filter_obj.id))
 
-        return (False, )
+        return (False, None)
 
     def validate_data(self, project, data):
         # TODO(dcramer): move project out of the data packet
@@ -418,7 +430,8 @@ class ClientApiHelper(object):
 
         if len(data['event_id']) > 32:
             self.log.debug(
-                'Discarded value for event_id due to length (%d chars)', len(data['event_id'])
+                'Discarded value for event_id due to length (%d chars)', len(
+                    data['event_id'])
             )
             data['errors'].append(
                 {
@@ -479,7 +492,8 @@ class ClientApiHelper(object):
             data['platform'] = 'other'
 
         if data.get('modules') and type(data['modules']) != dict:
-            self.log.debug('Discarded invalid type for modules: %s', type(data['modules']))
+            self.log.debug(
+                'Discarded invalid type for modules: %s', type(data['modules']))
             data['errors'].append(
                 {
                     'type': EventError.INVALID_DATA,
@@ -490,7 +504,8 @@ class ClientApiHelper(object):
             del data['modules']
 
         if data.get('extra') is not None and type(data['extra']) != dict:
-            self.log.debug('Discarded invalid type for extra: %s', type(data['extra']))
+            self.log.debug('Discarded invalid type for extra: %s',
+                           type(data['extra']))
             data['errors'].append(
                 {
                     'type': EventError.INVALID_DATA,
@@ -504,7 +519,8 @@ class ClientApiHelper(object):
             if type(data['tags']) == dict:
                 data['tags'] = list(data['tags'].items())
             elif not isinstance(data['tags'], (list, tuple)):
-                self.log.debug('Discarded invalid type for tags: %s', type(data['tags']))
+                self.log.debug(
+                    'Discarded invalid type for tags: %s', type(data['tags']))
                 data['errors'].append(
                     {
                         'type': EventError.INVALID_DATA,
@@ -535,7 +551,8 @@ class ClientApiHelper(object):
                     try:
                         k = six.text_type(k)
                     except Exception:
-                        self.log.debug('Discarded invalid tag key: %r', type(k))
+                        self.log.debug(
+                            'Discarded invalid tag key: %r', type(k))
                         data['errors'].append(
                             {
                                 'type': EventError.INVALID_DATA,
@@ -549,7 +566,8 @@ class ClientApiHelper(object):
                     try:
                         v = six.text_type(v)
                     except Exception:
-                        self.log.debug('Discarded invalid tag value: %s=%r', k, type(v))
+                        self.log.debug(
+                            'Discarded invalid tag value: %s=%r', k, type(v))
                         data['errors'].append(
                             {
                                 'type': EventError.INVALID_DATA,
@@ -636,7 +654,8 @@ class ClientApiHelper(object):
                 if type(value) in (list, tuple):
                     value = {'values': value}
                 else:
-                    self.log.debug('Invalid parameter for value: %s (%r)', k, type(value))
+                    self.log.debug(
+                        'Invalid parameter for value: %s (%r)', k, type(value))
                     data['errors'].append(
                         {
                             'type': EventError.INVALID_DATA,
@@ -654,7 +673,8 @@ class ClientApiHelper(object):
                     log = self.log.debug
                 else:
                     log = self.log.error
-                log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
+                log('Discarded invalid value for interface: %s (%r)',
+                    k, value, exc_info=True)
                 data['errors'].append(
                     {
                         'type': EventError.INVALID_DATA,
@@ -692,7 +712,8 @@ class ClientApiHelper(object):
                         log = self.log.debug
                     else:
                         log = self.log.error
-                    log('Discarded invalid value for interface: %s (%r)', k, value, exc_info=True)
+                    log('Discarded invalid value for interface: %s (%r)',
+                        k, value, exc_info=True)
                     data['errors'].append(
                         {
                             'type': EventError.INVALID_DATA,
@@ -715,7 +736,8 @@ class ClientApiHelper(object):
                         'value': level,
                     }
                 )
-                data['level'] = LOG_LEVELS_MAP.get(DEFAULT_LOG_LEVEL, DEFAULT_LOG_LEVEL)
+                data['level'] = LOG_LEVELS_MAP.get(
+                    DEFAULT_LOG_LEVEL, DEFAULT_LOG_LEVEL)
 
         if data.get('release'):
             data['release'] = six.text_type(data['release'])
@@ -813,7 +835,8 @@ class ClientApiHelper(object):
             got_ip = True
 
         if not got_ip and set_if_missing:
-            data.setdefault('sentry.interfaces.User', {})['ip_address'] = ip_address
+            data.setdefault('sentry.interfaces.User', {})[
+                'ip_address'] = ip_address
 
     def insert_data_to_database(self, data, from_reprocessing=False):
         # we might be passed LazyData
@@ -823,7 +846,8 @@ class ClientApiHelper(object):
         default_cache.set(cache_key, data, timeout=3600)
         task = from_reprocessing and \
             preprocess_event_from_reprocessing or preprocess_event
-        task.delay(cache_key=cache_key, start_time=time(), event_id=data['event_id'])
+        task.delay(cache_key=cache_key, start_time=time(),
+                   event_id=data['event_id'])
 
 
 class CspApiHelper(ClientApiHelper):
@@ -846,7 +870,7 @@ class CspApiHelper(ClientApiHelper):
 
     def should_filter(self, project, data, ip_address=None):
         if not is_valid_csp_report(data['sentry.interfaces.Csp'], project):
-            return (True, 'invalid_csp')
+            return (True, FilterStatKeys.INVALID_CSP)
         return super(CspApiHelper, self).should_filter(project, data, ip_address)
 
     def validate_data(self, project, data):
diff --git a/src/sentry/filters/browser_extensions.py b/src/sentry/filters/browser_extensions.py
index 499e9691f5..530f5e258e 100644
--- a/src/sentry/filters/browser_extensions.py
+++ b/src/sentry/filters/browser_extensions.py
@@ -4,6 +4,8 @@ from .base import Filter
 
 import re
 
+from sentry.utils.data_filters import FilterStatKeys
+
 EXTENSION_EXC_VALUES = re.compile(
     '|'.join(
         (
@@ -71,7 +73,7 @@ EXTENSION_EXC_SOURCES = re.compile(
 
 
 class BrowserExtensionsFilter(Filter):
-    id = 'browser-extensions'
+    id = FilterStatKeys.BROWSER_EXTENSION
     name = 'Filter out errors known to be caused by browser extensions'
     description = 'Certain browser extensions will inject inline scripts and are known to cause errors.'
 
diff --git a/src/sentry/filters/legacy_browsers.py b/src/sentry/filters/legacy_browsers.py
index 95df3680d5..2bf67f294f 100644
--- a/src/sentry/filters/legacy_browsers.py
+++ b/src/sentry/filters/legacy_browsers.py
@@ -6,6 +6,8 @@ from ua_parser.user_agent_parser import Parse
 from rest_framework import serializers
 from sentry.models import ProjectOption
 from sentry.api.fields import MultipleChoiceField
+from sentry.utils.data_filters import FilterStatKeys
+
 """
 For default (legacy) filter
 """
@@ -28,7 +30,7 @@ class LegacyBrowserFilterSerializer(serializers.Serializer):
 
 
 class LegacyBrowsersFilter(Filter):
-    id = 'legacy-browsers'
+    id = FilterStatKeys.LEGACY_BROWSER
     name = 'Filter out known errors from legacy browsers'
     description = 'Older browsers often give less accurate information, and while they may report valid issues, the context to understand them is incorrect or missing.'
     default = False
diff --git a/src/sentry/filters/localhost.py b/src/sentry/filters/localhost.py
index 297b3270d5..c12d2d824b 100644
--- a/src/sentry/filters/localhost.py
+++ b/src/sentry/filters/localhost.py
@@ -2,13 +2,14 @@ from __future__ import absolute_import
 
 from .base import Filter
 from six.moves.urllib.parse import urlparse
+from sentry.utils.data_filters import FilterStatKeys
 
 LOCAL_IPS = frozenset(['127.0.0.1', '::1'])
 LOCAL_DOMAINS = frozenset(['127.0.0.1', 'localhost'])
 
 
 class LocalhostFilter(Filter):
-    id = 'localhost'
+    id = FilterStatKeys.LOCALHOST
     name = 'Filter out errors coming from localhost'
     description = 'This applies to to both IPv4 (``127.0.0.1``) and IPv6 (``::1``) addresses.'
 
diff --git a/src/sentry/filters/web_crawlers.py b/src/sentry/filters/web_crawlers.py
index 3172201c54..51d13fc816 100644
--- a/src/sentry/filters/web_crawlers.py
+++ b/src/sentry/filters/web_crawlers.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import re
 
 from .base import Filter
+from sentry.utils.data_filters import FilterStatKeys
 
 # not all of these agents are guaranteed to execute JavaScript, but to avoid
 # overhead of identifying which ones do, and which ones will over time we simply
@@ -41,7 +42,7 @@ CRAWLERS = re.compile(
 
 
 class WebCrawlersFilter(Filter):
-    id = 'web-crawlers'
+    id = FilterStatKeys.WEB_CRAWLER
     name = 'Filter out known web crawlers'
     description = 'Some crawlers may execute pages in incompatible ways which then cause errors that are unlikely to be seen by a normal user.'
     default = True
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index ea01c5c872..b0d214c69b 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -1,6 +1,8 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import _ from 'lodash';
+import ReactDOMServer from 'react-dom/server';
+import moment from 'moment';
 
 import ApiMixin from '../mixins/apiMixin';
 import IndicatorStore from '../stores/indicatorStore';
@@ -12,6 +14,7 @@ import StackedBarChart from '../components/stackedBarChart';
 import Switch from '../components/switch';
 import {FormState, TextareaField} from '../components/forms';
 import {t} from '../locale';
+import {intcomma} from '../utils';
 import marked from '../utils/marked';
 
 const FilterSwitch = function(props) {
@@ -228,8 +231,13 @@ const ProjectFiltersSettingsForm = React.createClass({
 
   getInitialState() {
     let formData = {};
+    let features = this.getProjectFeatures()
     for (let key of Object.keys(this.props.initialData)) {
       if (key.lastIndexOf('filters:') === 0) {
+        // the project details endpoint can partially succeed and still return a 400
+        // if the org does not have the additional-data-filters feature enabled,
+        // so this prevents the form from sending an empty string by default
+        if(!features.has('additional-data-filters') && key === 'filters:error_messages' || key === 'filters:releases') continue;
         formData[key] = this.props.initialData[key];
       }
     }
@@ -251,7 +259,6 @@ const ProjectFiltersSettingsForm = React.createClass({
 
   onSubmit(e) {
     e.preventDefault();
-
     if (this.state.state === FormState.SAVING) {
       return;
     }
@@ -374,11 +381,10 @@ const ProjectFilters = React.createClass({
       filterList: [],
       querySince: since,
       queryUntil: until,
-      stats: null,
       rawStatsData: null,
-      processedStats: false,
+      formattedData: [],
       projectOptions: {},
-      blankStats: false,
+      blankStats: true,
       activeSection: 'data-filters',
       tombstones: [],
       tombstoneError: false
@@ -390,11 +396,95 @@ const ProjectFilters = React.createClass({
   },
 
   componentDidUpdate(prevProps) {
-    if (!this.state.loading && !this.state.stats) {
-      this.processStatsData();
+    if (!this.state.loading && !this.state.formattedData) {
+      this.render();
     }
   },
 
+  getStatOpts() {
+    return(
+      this.getProjectFeatures().has('additional-data-filters') ?
+      {
+        'ip-address': 'IP Address',
+        'release-version': 'Release',
+        'error-message': 'Error Message',
+        'browser-extensions': 'Browser Extension',
+        'legacy-browsers': 'Legacy Browser',
+        localhost: 'Localhost',
+        'web-crawlers': 'Web Crawler',
+        'invalid-csp': 'Invalid CSP',
+        cors: 'CORS'
+      } :
+      {'blacklisted':"Filtered Events"}
+    );
+  },
+
+  formatData(rawData) {
+    return Object.keys(this.getStatOpts()).map(stat => {
+      return {
+        data: rawData[stat].map(([x, y]) => {
+          if (y > 0) {
+            this.setState({blankStats: false});
+          }
+          return {x, y};
+        }),
+        label: this.getStatOpts()[stat],
+        statName: stat
+      };
+    });
+  },
+
+  getFilterStats() {
+    let statOptions = Object.keys(this.getStatOpts());
+    let {orgId, projectId} = this.props.params;
+    let statEndpoint = `/projects/${orgId}/${projectId}/stats/`;
+    let query = {
+      since: this.state.querySince,
+      until: this.state.queryUntil,
+      resolution: '1d'
+    };
+    $.when
+      .apply(
+        $,
+        // parallelize requests for each statistic
+        statOptions.map(stat => {
+          let deferred = $.Deferred();
+          this.api.request(statEndpoint, {
+            query: Object.assign({stat: stat}, query),
+            success: deferred.resolve.bind(deferred),
+            error: deferred.reject.bind(deferred)
+          });
+          return deferred;
+        })
+      )
+      .done(
+        function(/* statOption1, statOption2, ... statOptionN */) {
+          let rawStatsData = {};
+          let expected = this.state.expected - 1;
+          // when there is a single request made, this is inexplicably called without being wrapped in an array
+          if(statOptions.length===1){
+            rawStatsData[statOptions[0]] = arguments[0];
+          } else {
+            for (let i = 0; i < statOptions.length; i++) {
+              rawStatsData[statOptions[i]] = arguments[i][0];
+            }
+          }
+
+          this.setState({
+            rawStatsData: rawStatsData,
+            formattedData: this.formatData(rawStatsData),
+            expected: expected,
+            loading: expected > 0
+          });
+        }.bind(this)
+      )
+      .fail(
+        function() {
+          this.setState({error: true});
+        }.bind(this)
+      );
+  },
+
   fetchData() {
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/filters/`, {
@@ -413,27 +503,7 @@ const ProjectFilters = React.createClass({
       }
     });
 
-    this.api.request(`/projects/${orgId}/${projectId}/stats/`, {
-      query: {
-        since: this.state.querySince,
-        until: this.state.queryUntil,
-        resolution: '1d',
-        stat: 'blacklisted'
-      },
-      success: data => {
-        this.setState({rawStatsData: data});
-      },
-      error: () => {
-        this.setState({error: true});
-      },
-      complete: () => {
-        let expected = this.state.expected - 1;
-        this.setState({
-          expected,
-          loading: expected > 0
-        });
-      }
-    });
+    this.getFilterStats();
 
     this.api.request(`/projects/${orgId}/${projectId}/`, {
       success: (data, textStatus, jqXHR) => {
@@ -464,24 +534,6 @@ const ProjectFilters = React.createClass({
     });
   },
 
-  processStatsData() {
-    let blank = true; // Keep track if the entire graph is blank or not.
-    let points = this.state.rawStatsData.map(point => {
-      let [x, y] = point;
-      if (y > 0) {
-        blank = false;
-      }
-      return {
-        x,
-        y: [y]
-      };
-    });
-    this.setState({
-      stats: points,
-      blankStats: blank
-    });
-  },
-
   onToggleFilter(filter, active) {
     if (this.state.loading) return;
 
@@ -528,7 +580,7 @@ const ProjectFilters = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading || !this.state.stats) body = this.renderLoading();
+    if (this.state.loading || !this.state.formattedData) body = this.renderLoading();
     else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
     else body = this.renderResults();
 
@@ -584,6 +636,42 @@ const ProjectFilters = React.createClass({
     }
   },
 
+  timeLabelAsDay(point) {
+    let timeMoment = moment(point.x * 1000);
+
+    return timeMoment.format('LL');
+  },
+
+  renderTooltip(point, pointIdx, chart) {
+    let timeLabel = this.timeLabelAsDay(point);
+    let totalY = 0;
+    for (let i = 0; i < point.y.length; i++) {
+      totalY += point.y[i];
+    }
+    let {formattedData} = this.state;
+
+    return ReactDOMServer.renderToStaticMarkup(
+      <div style={{width: '150px'}}>
+        <div className="time-label"><span>{timeLabel}</span></div>
+        <div>{intcomma(totalY)} {totalY > 1 ? t('total events') : t('total event')}</div>
+        {formattedData.map((dataPoint, i) => {
+          return (
+            point.y[i] > 0 &&
+            <dl className="legend" key={dataPoint.statName}>
+              <dt><span className={`${dataPoint.statName} 'filter-color'`} /></dt>
+              <dd style={{textAlign: 'left', position: 'absolute'}}>
+                {dataPoint.label}{' '}
+              </dd>
+              <dd style={{textAlign: 'right', position: 'relative'}}>
+                {point.y[i]} {t('event')}{point.y[i] > 1 ? 's' : ''}
+              </dd>
+            </dl>
+          );
+        })}
+      </div>
+    );
+  },
+
   renderResults() {
     let navSection = this.state.activeSection;
     let features = this.getProjectFeatures();
@@ -596,11 +684,11 @@ const ProjectFilters = React.createClass({
           </div>
           {!this.state.blankStats
             ? <StackedBarChart
-                points={this.state.stats}
-                height={50}
+                series={this.state.formattedData}
                 label="events"
-                barClasses={['filtered']}
-                className="standard-barchart"
+                barClasses={Object.keys(this.getStatOpts())}
+                className="standard-barchart filtered-stats-barchart"
+                tooltip={this.renderTooltip}
               />
             : <div className="box-content">
                 <div className="blankslate p-y-2">
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index ea173dc510..aa90fadb4a 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -7,6 +7,109 @@
   padding-top: 20px;
 }
 
+/**
+* Inbound Data Filters
+* ============================================================================
+*/
+
+.filtered-stats-barchart {
+    height: 100px;
+
+    a {
+      > span {
+        left: 2px;
+        right: 2px;
+
+        &.ip-address {
+          background: @red-light;
+        }
+
+        &.release-version {
+          background: @purple-light;
+        }
+
+        &.error-message {
+          background: @purple;
+        }
+
+        &.browser-extensions {
+          background: @gray;
+        }
+
+        &.legacy-browsers {
+          background: @gray-light;
+        }
+
+        &.localhost {
+          background: @blue;
+        }
+
+        &.web-crawlers {
+          background: @red;
+        }
+
+        &.invalid-csp {
+          background: @blue-light;
+        }
+
+        &.cors {
+          background: @orange;
+        }
+      }
+    }
+  }
+
+.legend {
+  padding: 3px 0;
+  position: relative;
+  line-height: 10px;
+
+  dt {
+    margin: 0;
+    position: absolute;
+    left: 0;
+    width: 8px;
+    margin-right: 5px;
+
+    span {
+      &.ip-address {
+        background: @red-light;
+      }
+
+      &.release-version {
+        background: @purple-light;
+      }
+
+      &.error-message {
+        background: @purple;
+      }
+
+      &.browser-extensions {
+        background: @gray;
+      }
+
+      &.legacy-browsers {
+        background: @gray-light;
+      }
+
+      &.localhost {
+        background: @blue;
+      }
+
+      &.web-crawlers {
+        background: @red;
+      }
+
+      &.invalid-csp {
+        background: @blue-light;
+      }
+
+      &.cors {
+        background: @orange;
+      }
+    }
+  }
+}
 
 /**
 * Rules
diff --git a/src/sentry/tsdb/base.py b/src/sentry/tsdb/base.py
index 7cf58e3f51..330001273c 100644
--- a/src/sentry/tsdb/base.py
+++ b/src/sentry/tsdb/base.py
@@ -83,6 +83,25 @@ class TSDBModel(Enum):
     # the number of events blocked due to being blacklisted
     key_total_blacklisted = 502
 
+    # the number of events filtered by ip
+    project_total_received_ip_address = 601
+    # the number of events filtered by release
+    project_total_received_release_version = 602
+    # the number of events filtered by error message
+    project_total_received_error_message = 603
+    # the number of events filtered by browser extension
+    project_total_received_browser_extensions = 604
+    # the number of events filtered by legacy browser
+    project_total_received_legacy_browsers = 605
+    # the number of events filtered by localhost
+    project_total_received_localhost = 606
+    # the number of events filtered by web crawlers
+    project_total_received_web_crawlers = 607
+    # the number of events filtered by invalid csp
+    project_total_received_invalid_csp = 608
+    # the number of events filtered by invalid origin
+    project_total_received_cors = 609
+
 
 class BaseTSDB(Service):
     __all__ = (
diff --git a/src/sentry/utils/data_filters.py b/src/sentry/utils/data_filters.py
index 47ef2a284b..d1739ad09d 100644
--- a/src/sentry/utils/data_filters.py
+++ b/src/sentry/utils/data_filters.py
@@ -13,6 +13,32 @@ import six
 
 from django.utils.encoding import force_text
 
+from sentry import tsdb
+
+
+class FilterStatKeys(object):
+    IP_ADDRESS = 'ip-address'
+    RELEASE_VERSION = 'release-version'
+    ERROR_MESSAGE = 'error-message'
+    BROWSER_EXTENSION = 'browser-extensions'
+    LEGACY_BROWSER = 'legacy-browsers'
+    LOCALHOST = 'localhost'
+    WEB_CRAWLER = 'web-crawlers'
+    INVALID_CSP = 'invalid-csp'
+    CORS = 'cors'
+
+FILTER_STAT_KEYS_TO_VALUES = {
+    FilterStatKeys.IP_ADDRESS: tsdb.models.project_total_received_ip_address,
+    FilterStatKeys.RELEASE_VERSION: tsdb.models.project_total_received_release_version,
+    FilterStatKeys.ERROR_MESSAGE: tsdb.models.project_total_received_error_message,
+    FilterStatKeys.BROWSER_EXTENSION: tsdb.models.project_total_received_browser_extensions,
+    FilterStatKeys.LEGACY_BROWSER: tsdb.models.project_total_received_legacy_browsers,
+    FilterStatKeys.LOCALHOST: tsdb.models.project_total_received_localhost,
+    FilterStatKeys.WEB_CRAWLER: tsdb.models.project_total_received_web_crawlers,
+    FilterStatKeys.INVALID_CSP: tsdb.models.project_total_received_invalid_csp,
+    FilterStatKeys.CORS: tsdb.models.project_total_received_cors,
+}
+
 
 class FilterTypes(object):
     ERROR_MESSAGES = 'error_messages'
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 35e4d993ee..9ef211fa15 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -19,12 +19,14 @@ from raven.contrib.django.models import client as Raven
 
 from sentry import quotas, tsdb
 from sentry.coreapi import (
-    APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper, LazyData
+    APIError, APIForbidden, APIRateLimited, ClientApiHelper, CspApiHelper, LazyData,
 )
 from sentry.models import Project, OrganizationOption, Organization
-from sentry.signals import (event_accepted, event_dropped, event_filtered, event_received)
+from sentry.signals import (
+    event_accepted, event_dropped, event_filtered, event_received)
 from sentry.quotas.base import RateLimit
 from sentry.utils import json, metrics
+from sentry.utils.data_filters import FILTER_STAT_KEYS_TO_VALUES
 from sentry.utils.data_scrubber import SensitiveDataFilter
 from sentry.utils.http import (
     is_valid_origin,
@@ -127,24 +129,30 @@ class APIView(BaseView):
             else:
                 content = ''
             logger.exception(e)
-            response = HttpResponse(content, content_type='text/plain', status=500)
+            response = HttpResponse(
+                content, content_type='text/plain', status=500)
 
         # TODO(dcramer): it'd be nice if we had an incr_multi method so
         # tsdb could optimize this
         metrics.incr('client-api.all-versions.requests')
-        metrics.incr('client-api.all-versions.responses.%s' % (response.status_code, ))
+        metrics.incr('client-api.all-versions.responses.%s' %
+                     (response.status_code, ))
         metrics.incr(
-            'client-api.all-versions.responses.%sxx' % (six.text_type(response.status_code)[0], )
+            'client-api.all-versions.responses.%sxx' % (
+                six.text_type(response.status_code)[0], )
         )
 
         if helper.context.version:
-            metrics.incr('client-api.v%s.requests' % (helper.context.version, ))
+            metrics.incr('client-api.v%s.requests' %
+                         (helper.context.version, ))
             metrics.incr(
-                'client-api.v%s.responses.%s' % (helper.context.version, response.status_code)
+                'client-api.v%s.responses.%s' % (
+                    helper.context.version, response.status_code)
             )
             metrics.incr(
                 'client-api.v%s.responses.%sxx' %
-                (helper.context.version, six.text_type(response.status_code)[0])
+                (helper.context.version, six.text_type(
+                    response.status_code)[0])
             )
 
         if response.status_code != 200 and origin:
@@ -175,6 +183,8 @@ class APIView(BaseView):
             if not project:
                 raise APIError('Client must be upgraded for CORS support')
             if not is_valid_origin(origin, project):
+                tsdb.incr(tsdb.models.project_total_received_cors,
+                          project.id)
                 raise APIForbidden('Invalid origin: %s' % (origin, ))
 
         # XXX: It seems that the OPTIONS call does not always include custom headers
@@ -199,7 +209,8 @@ class APIView(BaseView):
             # this just allows us to comfortably assure that `project.organization` is safe.
             # This also allows us to pull the object from cache, instead of being
             # implicitly fetched from database.
-            project.organization = Organization.objects.get_from_cache(id=project.organization_id)
+            project.organization = Organization.objects.get_from_cache(
+                id=project.organization_id)
 
             if auth.version != '2.0':
                 if not auth.secret_key:
@@ -216,7 +227,11 @@ class APIView(BaseView):
                         )
 
                     if not is_valid_origin(origin, project):
-                        raise APIForbidden('Missing required Origin or Referer header')
+                        if project:
+                            tsdb.incr(
+                                tsdb.models.project_total_received_cors, project.id)
+                        raise APIForbidden(
+                            'Missing required Origin or Referer header')
 
             response = super(APIView, self).dispatch(
                 request=request, project=project, auth=auth, helper=helper, key=key, **kwargs
@@ -332,19 +347,31 @@ class StoreView(APIView):
             sender=type(self),
         )
 
-        should_filter = helper.should_filter(project, data, ip_address=remote_addr)
-        if should_filter[0]:
+        should_filter, filter_reason = helper.should_filter(
+            project, data, ip_address=remote_addr)
+        if should_filter:
+            increment_list = [
+                (tsdb.models.project_total_received, project.id),
+                (tsdb.models.project_total_blacklisted, project.id),
+                (tsdb.models.organization_total_received,
+                 project.organization_id),
+                (tsdb.models.organization_total_blacklisted,
+                 project.organization_id),
+                (tsdb.models.key_total_received, key.id),
+                (tsdb.models.key_total_blacklisted, key.id),
+            ]
+            try:
+                increment_list.append((FILTER_STAT_KEYS_TO_VALUES[filter_reason], project.id))
+            # should error when filter_reason does not match a key in FILTER_STAT_KEYS_TO_VALUES
+            except KeyError:
+                pass
+
             tsdb.incr_multi(
-                [
-                    (tsdb.models.project_total_received, project.id),
-                    (tsdb.models.project_total_blacklisted, project.id),
-                    (tsdb.models.organization_total_received, project.organization_id),
-                    (tsdb.models.organization_total_blacklisted, project.organization_id),
-                    (tsdb.models.key_total_received, key.id),
-                    (tsdb.models.key_total_blacklisted, key.id),
-                ]
+                increment_list
             )
-            metrics.incr('events.blacklisted', tags={'reason': should_filter[1]})
+
+            metrics.incr('events.blacklisted', tags={
+                         'reason': filter_reason})
             event_filtered.send_robust(
                 ip=remote_addr,
                 project=project,
@@ -363,13 +390,16 @@ class StoreView(APIView):
         # it cannot cascade
         if rate_limit is None or rate_limit.is_limited:
             if rate_limit is None:
-                helper.log.debug('Dropped event due to error with rate limiter')
+                helper.log.debug(
+                    'Dropped event due to error with rate limiter')
             tsdb.incr_multi(
                 [
                     (tsdb.models.project_total_received, project.id),
                     (tsdb.models.project_total_rejected, project.id),
-                    (tsdb.models.organization_total_received, project.organization_id),
-                    (tsdb.models.organization_total_rejected, project.organization_id),
+                    (tsdb.models.organization_total_received,
+                     project.organization_id),
+                    (tsdb.models.organization_total_rejected,
+                     project.organization_id),
                     (tsdb.models.key_total_received, key.id),
                     (tsdb.models.key_total_rejected, key.id),
                 ]
@@ -392,17 +422,20 @@ class StoreView(APIView):
             tsdb.incr_multi(
                 [
                     (tsdb.models.project_total_received, project.id),
-                    (tsdb.models.organization_total_received, project.organization_id),
+                    (tsdb.models.organization_total_received,
+                     project.organization_id),
                     (tsdb.models.key_total_received, key.id),
                 ]
             )
 
-        org_options = OrganizationOption.objects.get_all_values(project.organization_id)
+        org_options = OrganizationOption.objects.get_all_values(
+            project.organization_id)
 
         if org_options.get('sentry:require_scrub_ip_address', False):
             scrub_ip_address = True
         else:
-            scrub_ip_address = project.get_option('sentry:scrub_ip_address', False)
+            scrub_ip_address = project.get_option(
+                'sentry:scrub_ip_address', False)
 
         event_id = data['event_id']
 
@@ -411,7 +444,8 @@ class StoreView(APIView):
         cache_key = 'ev:%s:%s' % (project.id, event_id, )
 
         if cache.get(cache_key) is not None:
-            raise APIForbidden('An event with the same ID already exists (%s)' % (event_id, ))
+            raise APIForbidden(
+                'An event with the same ID already exists (%s)' % (event_id, ))
 
         if org_options.get('sentry:require_scrub_data', False):
             scrub_data = True
@@ -435,7 +469,8 @@ class StoreView(APIView):
             if org_options.get('sentry:require_scrub_defaults', False):
                 scrub_defaults = True
             else:
-                scrub_defaults = project.get_option('sentry:scrub_defaults', True)
+                scrub_defaults = project.get_option(
+                    'sentry:scrub_defaults', True)
 
             inst = SensitiveDataFilter(
                 fields=sensitive_fields,
@@ -521,6 +556,9 @@ class CspReportView(StoreView):
             raise APIForbidden('Invalid document-uri')
 
         if not is_valid_origin(origin, project):
+            if project:
+                tsdb.incr(tsdb.models.project_total_received_cors,
+                          project.id)
             raise APIForbidden('Invalid document-uri')
 
         # Attach on collected meta data. This data obviously isn't a part
@@ -560,7 +598,8 @@ def crossdomain_xml(request, project_id):
         return HttpResponse(status=404)
 
     origin_list = get_origins(project)
-    response = render_to_response('sentry/crossdomain.xml', {'origin_list': origin_list})
+    response = render_to_response(
+        'sentry/crossdomain.xml', {'origin_list': origin_list})
     response['Content-Type'] = 'application/xml'
 
     return response
diff --git a/tests/sentry/api/endpoints/test_project_stats.py b/tests/sentry/api/endpoints/test_project_stats.py
index b3380b8576..6991e691a1 100644
--- a/tests/sentry/api/endpoints/test_project_stats.py
+++ b/tests/sentry/api/endpoints/test_project_stats.py
@@ -30,3 +30,72 @@ class ProjectStatsTest(APITestCase):
         for point in response.data[:-1]:
             assert point[1] == 0
         assert len(response.data) == 24
+
+    def test_get_error_message_stats(self):
+        self.login_as(user=self.user)
+
+        project1 = self.create_project(name='foo')
+
+        STAT_OPTS = {
+            'ip-address': 1,
+            'release-version': 2,
+            'error-message': 3,
+            'browser-extensions': 4,
+            'legacy-browsers': 5,
+            'localhost': 6,
+            'web-crawlers': 7,
+            'invalid-csp': 8,
+        }
+
+        tsdb.incr(
+            tsdb.models.project_total_received_ip_address,
+            project1.id,
+            count=STAT_OPTS['ip-address']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_release_version,
+            project1.id,
+            count=STAT_OPTS['release-version']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_error_message,
+            project1.id,
+            count=STAT_OPTS['error-message']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_browser_extensions,
+            project1.id,
+            count=STAT_OPTS['browser-extensions']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_legacy_browsers,
+            project1.id,
+            count=STAT_OPTS['legacy-browsers']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_localhost, project1.id, count=STAT_OPTS[
+                'localhost']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_web_crawlers,
+            project1.id,
+            count=STAT_OPTS['web-crawlers']
+        )
+        tsdb.incr(
+            tsdb.models.project_total_received_invalid_csp,
+            project1.id,
+            count=STAT_OPTS['invalid-csp']
+        )
+
+        url = reverse(
+            'sentry-api-0-project-stats',
+            kwargs={
+                'organization_slug': project1.organization.slug,
+                'project_slug': project1.slug,
+            }
+        )
+        for stat in STAT_OPTS.keys():
+            response = self.client.get(url, {'stat': stat}, format='json')
+            assert response.status_code == 200, response.content
+            assert len(response.data) == 24
+            assert response.data[-1][1] == STAT_OPTS[stat], response.data
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 6cf108ae3a..3e0d4f79b9 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -533,7 +533,7 @@ class StoreViewTest(TestCase):
     @mock.patch('sentry.coreapi.ClientApiHelper.insert_data_to_database', Mock())
     @mock.patch('sentry.coreapi.ClientApiHelper.should_filter')
     def test_filtered_signal(self, mock_should_filter):
-        mock_should_filter.return_value = 'ip_address'
+        mock_should_filter.return_value = (True, 'ip-address')
 
         mock_event_filtered = Mock()
 
