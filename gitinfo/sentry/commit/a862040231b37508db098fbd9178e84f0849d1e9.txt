commit a862040231b37508db098fbd9178e84f0849d1e9
Author: Chris Fuller <cfuller@sentry.io>
Date:   Wed Jan 15 11:50:46 2020 -0500

    feat(workflow): Changes to frontend to use unified rule API for creation + editing (#16408)
    
    * FE changes for unified rule
    
    * Removing an unneccessary reference
    
    * Removing unused imports

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
index ebc38cb75a..e9f4d8c8de 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/actions.tsx
@@ -23,48 +23,10 @@ export async function addOrUpdateRule(
   }`;
   const method = isExisting ? 'PUT' : 'POST';
 
-  const savedRule: SavedIncidentRule = await api.requestPromise(endpoint, {
+  return api.requestPromise(endpoint, {
     method,
     data: rule,
   });
-
-  // TODO(incidents): New API endpoint should save triggers as well as actions in above endpoint
-  //
-  // For now save triggers and actions individually
-  const triggerPromises = rule.triggers.map(
-    async ({resolveThreshold, actions, ...trigger}) => {
-      const triggerEndpoint = `/organizations/${orgId}/alert-rules/${
-        savedRule.id
-      }/triggers/${trigger.id ? `${trigger.id}/` : ''}`;
-      const triggerMethod = trigger.id ? 'PUT' : 'POST';
-
-      // Be sure to not include actions for now (we destructure from trigger in params)
-      const savedTrigger = await api.requestPromise(triggerEndpoint, {
-        method: triggerMethod,
-        data: {
-          ...trigger,
-          // Note `resolveThreshold can be empty string, but need to remove it for API
-          ...(resolveThreshold !== '' ? {resolveThreshold} : {}),
-        },
-      });
-
-      return await Promise.all(
-        actions.map(action => {
-          const actionsEndpoint = `/organizations/${orgId}/alert-rules/${
-            savedRule.id
-          }/triggers/${savedTrigger.id}/actions/${action.id ? `${action.id}/` : ''}`;
-          const actionsMethod = action.id ? 'PUT' : 'POST';
-
-          return api.requestPromise(actionsEndpoint, {
-            method: actionsMethod,
-            data: action,
-          });
-        })
-      );
-    }
-  );
-
-  return Promise.all(triggerPromises);
 }
 
 /**
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
index 653ca4ad8b..a5753e0646 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/details.tsx
@@ -3,8 +3,6 @@ import React from 'react';
 
 import {IncidentRule} from 'app/views/settings/incidentRules/types';
 import {Organization} from 'app/types';
-import {addErrorMessage} from 'app/actionCreators/indicator';
-import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
 import RuleForm from 'app/views/settings/incidentRules/ruleForm';
 import recreateRoute from 'app/utils/recreateRoute';
@@ -50,45 +48,6 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
     router.push(recreateRoute('', {params, routes, location, stepBack: -2}));
   };
 
-  // XXX(billy): This is temporary, ideally we want actions fetched with triggers?
-  onRequestSuccess = async ({data}) => {
-    const {orgId, incidentRuleId} = this.props.params;
-
-    // fetch actions for trigger
-    this.setState({loading: true});
-
-    try {
-      const resp = data.triggers.map(async trigger => {
-        const actions = await this.api.requestPromise(
-          `/organizations/${orgId}/alert-rules/${incidentRuleId}/triggers/${
-            trigger.id
-          }/actions/`
-        );
-        return [trigger.id, actions];
-      });
-
-      const actionsTriggersTuples: [string, any][] = await Promise.all(resp);
-      this.setState({
-        actions: new Map(actionsTriggersTuples),
-      });
-    } catch (_err) {
-      addErrorMessage(t('Unable to fetch actions'));
-    }
-    this.setState({loading: false});
-  };
-
-  getActions = (rule, actions) => {
-    const triggers = rule.triggers.map(trigger => ({
-      ...trigger,
-      actions: actions.get(trigger.id) || [],
-    }));
-
-    return {
-      ...rule,
-      triggers,
-    };
-  };
-
   renderBody() {
     const {incidentRuleId} = this.props.params;
     const {rule} = this.state;
@@ -97,7 +56,7 @@ class IncidentRulesDetails extends AsyncView<Props, State> {
       <RuleForm
         {...this.props}
         incidentRuleId={incidentRuleId}
-        rule={this.getActions(rule, this.state.actions)}
+        rule={rule}
         onSubmitSuccess={this.handleSubmitSuccess}
       />
     );
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
index 0a9c13de81..046784c646 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/index.tsx
@@ -85,7 +85,7 @@ class Triggers extends React.Component<Props> {
       onAdd,
     } = this.props;
 
-    // Note we only support 2 triggers on UI - API can support many
+    // Note we only support 2 triggers max
     return (
       <React.Fragment>
         {triggers.map((trigger, index) => {
diff --git a/tests/js/spec/views/settings/incidentRules/details.spec.jsx b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
index e62d601fdc..0a9bb50d5c 100644
--- a/tests/js/spec/views/settings/incidentRules/details.spec.jsx
+++ b/tests/js/spec/views/settings/incidentRules/details.spec.jsx
@@ -52,33 +52,6 @@ describe('Incident Rules Details', function() {
       body: rule,
     });
 
-    const editTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/1/`,
-      method: 'PUT',
-      body: TestStubs.IncidentTrigger(),
-    });
-
-    const createTrigger = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${rule.id}/triggers/`,
-      method: 'POST',
-      body: TestStubs.IncidentTrigger({id: 2}),
-    });
-
-    MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${
-        rule.id
-      }/triggers/1/actions/`,
-      body: [],
-    });
-
-    const addAction = MockApiClient.addMockResponse({
-      url: `/organizations/${organization.slug}/alert-rules/${
-        rule.id
-      }/triggers/1/actions/`,
-      method: 'POST',
-      body: [],
-    });
-
     const wrapper = mountWithTheme(
       <React.Fragment>
         <GlobalModal />
@@ -176,13 +149,6 @@ describe('Incident Rules Details', function() {
     await tick();
     wrapper.update();
 
-    // TODO(incidents): This should be removed when we consolidate API
-    expect(editTrigger).toHaveBeenCalled();
-    // TODO(incidents): This should be removed when we consolidate API
-    expect(createTrigger).toHaveBeenCalled();
-    // TODO(incidents): This should be removed when we consolidate API
-    expect(addAction).toHaveBeenCalled();
-
     // Has correct values
     expect(
       wrapper
