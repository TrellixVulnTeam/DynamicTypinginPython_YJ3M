commit 8fd5782da75c6397277e3b8bd06a9d122d207497
Author: Dan Fuller <dfuller@sentry.io>
Date:   Fri Nov 1 15:37:31 2019 -0700

    feat(api): Add more validation around target types when creating trigger actions (SEN-1212)
    
    Properly handle validation of targets for actions, so that we take permissions and other validation
    into account.

diff --git a/src/sentry/incidents/endpoints/serializers.py b/src/sentry/incidents/endpoints/serializers.py
index 3d73976958..b02b27bfda 100644
--- a/src/sentry/incidents/endpoints/serializers.py
+++ b/src/sentry/incidents/endpoints/serializers.py
@@ -26,6 +26,9 @@ from sentry.incidents.models import (
     AlertRuleTriggerAction,
 )
 from sentry.models.project import Project
+from sentry.models.organizationmember import OrganizationMember
+from sentry.models.team import Team
+from sentry.models.user import User
 from sentry.snuba.models import QueryAggregations
 
 
@@ -244,6 +247,38 @@ class AlertRuleTriggerActionSerializer(CamelSnakeModelSerializer):
                 % [item.value for item in AlertRuleTriggerAction.TargetType]
             )
 
+    def validate(self, attrs):
+        if ("target_type" in attrs) != ("target_identifier" in attrs):
+            raise serializers.ValidationError(
+                "targetType and targetIdentifier must be passed together"
+            )
+        target_type = attrs.get("target_type")
+        access = self.context["access"]
+        identifier = attrs.get("target_identifier")
+        if target_type == AlertRuleTriggerAction.TargetType.TEAM:
+            try:
+                team = Team.objects.get(id=identifier)
+            except Team.DoesNotExist:
+                raise serializers.ValidationError("Team does not exist")
+            if not access.has_team(team):
+                raise serializers.ValidationError("Team does not exist")
+        elif target_type == AlertRuleTriggerAction.TargetType.USER:
+            try:
+                user = User.objects.get(id=identifier)
+            except User.DoesNotExist:
+                raise serializers.ValidationError("User does not exist")
+
+            if not OrganizationMember.objects.filter(
+                organization=self.context["organization"], user=user
+            ).exists():
+                raise serializers.ValidationError("User does not belong to this organization")
+        elif target_type == AlertRuleTriggerAction.TargetType.SPECIFIC:
+            # Compare with `type` and perform a specific validation as needed
+            # TODO: Implement these as needed
+            pass
+
+        return attrs
+
     def create(self, validated_data):
         return create_alert_rule_trigger_action(trigger=self.context["trigger"], **validated_data)
 
diff --git a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
index 4edd8630c7..b45f8e5f79 100644
--- a/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
+++ b/tests/sentry/incidents/endpoints/test_organization_alert_rule_trigger_action_details.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 from exam import fixture
 
 from sentry.api.serializers import serialize
@@ -115,12 +116,14 @@ class AlertRuleTriggerActionDetailsPutEndpointTest(AlertRuleTriggerActionDetails
                 self.alert_rule.id,
                 self.trigger.id,
                 self.action.id,
-                target_identifier="wat",
+                target_type=AlertRuleTriggerAction.TargetType.USER.value,
+                target_identifier=six.text_type(self.user.id),
             )
 
-        self.action.target_identifier = "wat"
+        self.action.target_type = AlertRuleTriggerAction.TargetType.USER.value
+        self.action.target_identifier = six.text_type(self.user.id)
         assert resp.data == serialize(self.action)
-        assert resp.data["targetIdentifier"] == "wat"
+        assert resp.data["targetIdentifier"] == six.text_type(self.user.id)
 
     def test_not_updated_fields(self):
         self.create_member(
diff --git a/tests/sentry/incidents/endpoints/test_serializers.py b/tests/sentry/incidents/endpoints/test_serializers.py
index 45bea7404b..e5a43eda52 100644
--- a/tests/sentry/incidents/endpoints/test_serializers.py
+++ b/tests/sentry/incidents/endpoints/test_serializers.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 from exam import fixture
 
 from sentry.auth.access import from_user
@@ -371,14 +372,34 @@ class TestAlertRuleTriggerActionSerializer(TestCase):
             {"type": AlertRuleTriggerAction.Type.SLACK.value},
             {"type": AlertRuleTriggerAction.Type.SLACK},
         )
-        self._run_changed_fields_test(action, {"target_type": target_type.value}, {})
+        self._run_changed_fields_test(
+            action, {"target_type": target_type.value, "target_identifier": identifier}, {}
+        )
         self._run_changed_fields_test(
             action,
-            {"target_type": AlertRuleTriggerAction.TargetType.USER.value},
-            {"target_type": AlertRuleTriggerAction.TargetType.USER},
+            {
+                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "target_identifier": six.text_type(self.user.id),
+            },
+            {
+                "target_type": AlertRuleTriggerAction.TargetType.USER,
+                "target_identifier": six.text_type(self.user.id),
+            },
         )
 
-        self._run_changed_fields_test(action, {"target_identifier": identifier}, {})
-        self._run_changed_fields_test(
-            action, {"target_identifier": "bye"}, {"target_identifier": "bye"}
+    def test_user_perms(self):
+        self.run_fail_validation_test(
+            {
+                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "target_identifier": "1234567",
+            },
+            {"nonFieldErrors": ["User does not exist"]},
+        )
+        other_user = self.create_user()
+        self.run_fail_validation_test(
+            {
+                "target_type": AlertRuleTriggerAction.TargetType.USER.value,
+                "target_identifier": six.text_type(other_user.id),
+            },
+            {"nonFieldErrors": ["User does not belong to this organization"]},
         )
