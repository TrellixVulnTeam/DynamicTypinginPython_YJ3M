commit 58d1ece78b79d16f8136825580cac43e581791f0
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Dec 18 12:31:01 2019 -0800

    ref: Remove event.get_legacy_message() (#15822)
    
    Deprecate event.get_legacy_message(). When Pagerduty customers are notified we can remove get_legacy_message() completely.

diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index ba7d136c59..2f829c2207 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -122,10 +122,9 @@ class EventCommon(object):
         return self.interfaces.get(name)
 
     def get_legacy_message(self):
-        # TODO(mitsuhiko): remove this code once it's unused.  It's still
-        # being used by plugin code and once the message rename is through
-        # plugins should instead swithc to the actual message attribute or
-        # this method could return what currently is real_message.
+        # TODO: This is only used in the pagerduty plugin. We should use event.title
+        # there and remove this function once users have been notified, since PD
+        # alert routing may be based off the message field.
         return (
             get_path(self.data, "logentry", "formatted")
             or get_path(self.data, "logentry", "message")
diff --git a/src/sentry_plugins/pushover/plugin.py b/src/sentry_plugins/pushover/plugin.py
index 1536f95500..fba9096299 100644
--- a/src/sentry_plugins/pushover/plugin.py
+++ b/src/sentry_plugins/pushover/plugin.py
@@ -94,7 +94,7 @@ class PushoverPlugin(CorePluginMixin, NotifyPlugin):
         title = "%s: %s" % (project.name, group.title)
         link = group.get_absolute_url(params={"referrer": "pushover_plugin"})
 
-        message = event.get_legacy_message()[:256]
+        message = event.title[:256]
 
         tags = event.tags
         if tags:
diff --git a/tests/sentry/models/test_event.py b/tests/sentry/models/test_event.py
index 322c734a00..9551ec4545 100644
--- a/tests/sentry/models/test_event.py
+++ b/tests/sentry/models/test_event.py
@@ -5,7 +5,6 @@ import pickle
 
 from sentry.models import Environment
 from sentry.db.models.fields.node import NodeData
-from sentry.event_manager import EventManager
 from sentry.testutils import TestCase
 from sentry.testutils.factories import Factories
 
@@ -166,47 +165,3 @@ def test_renormalization(monkeypatch, factories, task_runner, default_project):
     # that you will encounter severe performance issues during event processing
     # or postprocessing.
     assert len(normalize_mock_calls) == 1
-
-
-class EventGetLegacyMessageTest(TestCase):
-    def test_message(self):
-        event = self.create_event(message="foo bar")
-        assert event.get_legacy_message() == "foo bar"
-
-    def test_message_interface(self):
-        event = self.create_event(message="biz baz", data={"logentry": {"message": "foo bar"}})
-        assert event.get_legacy_message() == "foo bar"
-
-    def test_message_interface_with_formatting(self):
-        event = self.create_event(
-            message="biz baz",
-            data={"logentry": {"message": "foo %s", "formatted": "foo bar", "params": ["bar"]}},
-        )
-        assert event.get_legacy_message() == "foo bar"
-
-    def test_none(self):
-        event = self.create_event(data={"logentry": None})
-        assert event.get_legacy_message() == "<unlabeled event>"
-
-        event = self.create_event(data={"logentry": {"formatted": None, "message": None}})
-        assert event.get_legacy_message() == "<unlabeled event>"
-
-    def test_get_hashes(self):
-        manager = EventManager({"message": "Hello World!"})
-        manager.normalize()
-        event = manager.save(1)
-
-        # Have hashes by default
-        hashes = event.get_hashes()
-        assert hashes == ["ed076287532e86365e841e92bfc50d8c"]
-        assert event.data.data["hashes"] == ["ed076287532e86365e841e92bfc50d8c"]
-
-        # if hashes are reset, generate new ones
-        event.data.data["hashes"] = None
-        hashes = event.get_hashes()
-        assert hashes == ["ed076287532e86365e841e92bfc50d8c"]
-        assert event.data.data["hashes"] is None
-
-        # Use stored hashes
-        event.data.data["hashes"] = ["x"]
-        assert event.get_hashes() == ["x"]
diff --git a/tests/sentry_plugins/pushover/test_plugin.py b/tests/sentry_plugins/pushover/test_plugin.py
index 145db0656a..7acf3f8442 100644
--- a/tests/sentry_plugins/pushover/test_plugin.py
+++ b/tests/sentry_plugins/pushover/test_plugin.py
@@ -52,7 +52,7 @@ class PushoverPluginTest(PluginTestCase):
         request = responses.calls[0].request
         payload = parse_qs(request.body)
         assert payload == {
-            "message": ["{}\n\nTags: level=warning".format(event.get_legacy_message())],
+            "message": ["{}\n\nTags: level=warning".format(event.title)],
             "title": ["Bar: Hello world"],
             "url": [
                 "http://example.com/organizations/baz/issues/{}/?referrer=pushover_plugin".format(
@@ -89,7 +89,7 @@ class PushoverPluginTest(PluginTestCase):
         request = responses.calls[0].request
         payload = parse_qs(request.body)
         assert payload == {
-            "message": ["{}\n\nTags: level=warning".format(event.get_legacy_message())],
+            "message": ["{}\n\nTags: level=warning".format(event.title)],
             "title": ["Bar: Hello world"],
             "url": [
                 "http://example.com/organizations/baz/issues/{}/?referrer=pushover_plugin".format(
