commit bcdbd692dc491c4616ddd427648c6788d22eb13f
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Aug 31 14:20:36 2010 -0700

    Update sentry settings to use SENTRY prefix

diff --git a/README.rst b/README.rst
index 3bc0229231..cc46648694 100644
--- a/README.rst
+++ b/README.rst
@@ -48,23 +48,23 @@ Configuration
 Several options exist to configure django-sentry via your ``settings.py``:
 
 ######################
-DBLOG_CATCH_404_ERRORS
+SENTRY_CATCH_404_ERRORS
 ######################
 
 Enable catching of 404 errors in the logs. Default value is ``False``::
 
-	DBLOG_CATCH_404_ERRORS = True
+	SENTRY_CATCH_404_ERRORS = True
 
 You can skip other custom exception types by adding a ``skip_sentry = True`` attribute to them.
 
 ####################
-DBLOG_DATABASE_USING
+SENTRY_DATABASE_USING
 ####################
 
 Use a secondary database to store error logs. This is useful if you have several websites and want to aggregate error logs onto one database server::
 
 	# This should correspond to a key in your DATABASES setting
-	DBLOG_DATABASE_USING = 'default'
+	SENTRY_DATABASE_USING = 'default'
 
 You should also enable the ``DBLogRouter`` to avoid things like extraneous table creation::
 
@@ -78,18 +78,18 @@ Some things to note:
 * This functionality REQUIRES Django 1.2.
 
 #########################
-DBLOG_ENHANCED_TRACEBACKS
+SENTRY_ENHANCED_TRACEBACKS
 #########################
 
 Enables showing full embedded (enhanced) tracebacks within the administration for "Messages". These work almost identically to the default exception pages within Django's DEBUG environment::
 
 	# Disable embedded interactive tracebacks in the admin
-	DBLOG_ENHANCED_TRACEBACKS = False
+	SENTRY_ENHANCED_TRACEBACKS = False
 
 * Note: Even if you disable displaying of enhanced tracebacks, sentry will still store the entire exception stacktrace.
 
 #############
-DBLOG_LOGGING
+SENTRY_LOGGING
 #############
 
 Enabling this setting will turn off automatic database logging within the exception handler, and instead send all exceptions to the named logger ``sentry``. Use this in conjuction with ``sentry.handlers.DBLogHandler`` or your own handler to tweak how logging is dealt with.
diff --git a/sentry/manager.py b/sentry/manager.py
index 49ce7755ac..a024b68cca 100644
--- a/sentry/manager.py
+++ b/sentry/manager.py
@@ -18,7 +18,7 @@ from django.views.debug import ExceptionReporter
 from sentry import settings
 from sentry.helpers import construct_checksum
 
-assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `DBLOG_DATABASE_USING` setting requires Django >= 1.2'
+assert not settings.DATABASE_USING or django.VERSION >= (1, 2), 'The `SENTRY_DATABASE_USING` setting requires Django >= 1.2'
 
 logger = logging.getLogger('sentry')
 
diff --git a/sentry/settings.py b/sentry/settings.py
index 3f766c6005..9b36b0c43f 100644
--- a/sentry/settings.py
+++ b/sentry/settings.py
@@ -1,12 +1,12 @@
 from django.conf import settings
 
-CATCH_404_ERRORS = getattr(settings, 'DBLOG_CATCH_404_ERRORS', False)
+CATCH_404_ERRORS = getattr(settings, 'SENTRY_CATCH_404_ERRORS', False)
 
-ENHANCED_TRACEBACKS = getattr(settings, 'DBLOG_ENHANCED_TRACEBACKS', True)
+ENHANCED_TRACEBACKS = getattr(settings, 'SENTRY_ENHANCED_TRACEBACKS', True)
 
-DATABASE_USING = getattr(settings, 'DBLOG_DATABASE_USING', None)
+DATABASE_USING = getattr(settings, 'SENTRY_DATABASE_USING', None)
 
-USE_LOGGING = getattr(settings, 'DBLOG_USE_LOGGING', False)
+USE_LOGGING = getattr(settings, 'SENTRY_USE_LOGGING', False)
 
-THRASHING_TIMEOUT = getattr(settings, 'DBLOG_THRASHING_TIMEOUT', 60)
-THRASHING_LIMIT = getattr(settings, 'DBLOG_THRASHING_LIMIT', 10)
+THRASHING_TIMEOUT = getattr(settings, 'SENTRY_THRASHING_TIMEOUT', 60)
+THRASHING_LIMIT = getattr(settings, 'SENTRY_THRASHING_LIMIT', 10)
