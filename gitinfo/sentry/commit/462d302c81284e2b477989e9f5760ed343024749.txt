commit 462d302c81284e2b477989e9f5760ed343024749
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Sep 25 12:29:53 2017 -0700

    feat(integrations): Add support for text input with choices

diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index 3b4c13d9ef..0d39b67ebb 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -10,10 +10,24 @@ import PasswordField from './passwordField';
 import RangeField from './rangeField';
 import Select2FieldAutocomplete from './select2FieldAutocomplete';
 import Select2Field from './select2Field';
+import Select2TextField from './select2TextField';
 import TextField from './textField';
 import TextareaField from './textareaField';
 
-class GenericField extends React.Component {
+export default class GenericField extends React.Component {
+  static propTypes = {
+    config: PropTypes.object.isRequired,
+    formData: PropTypes.object,
+    formErrors: PropTypes.object,
+    formState: PropTypes.string.isRequired,
+    onChange: PropTypes.func
+  };
+
+  static defaultProps = {
+    formData: {},
+    formErrors: {}
+  };
+
   render() {
     let config = this.props.config;
     let required = defined(config.required) ? config.required : true;
@@ -45,6 +59,7 @@ class GenericField extends React.Component {
       case 'string':
       case 'text':
       case 'url':
+        if (props.choices) return <Select2TextField {...props} />;
         return <TextField {...props} />;
       case 'number':
         return <NumberField {...props} />;
@@ -65,13 +80,3 @@ class GenericField extends React.Component {
     }
   }
 }
-
-GenericField.propTypes = {
-  config: PropTypes.object.isRequired,
-  formData: PropTypes.object,
-  formErrors: PropTypes.object,
-  formState: PropTypes.string.isRequired,
-  onChange: PropTypes.func
-};
-
-export default GenericField;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 35d865c141..c46e3830c2 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -10,5 +10,6 @@ export {default as PasswordField} from './passwordField';
 export {default as RangeField} from './rangeField';
 export {default as Select2FieldAutocomplete} from './select2FieldAutocomplete';
 export {default as Select2Field} from './select2Field';
+export {default as Select2TextField} from './select2TextField';
 export {default as TextField} from './textField';
 export {default as TextareaField} from './textareaField';
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index 25182781be..eca7530cb1 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -4,7 +4,25 @@ import React from 'react';
 
 import InputField from './inputField';
 
-class Select2Field extends InputField {
+export default class Select2Field extends InputField {
+  static propTypes = {
+    ...InputField.propTypes,
+    choices: PropTypes.array.isRequired,
+    allowClear: PropTypes.bool,
+    allowEmpty: PropTypes.bool,
+    multiple: PropTypes.bool,
+    escapeMarkup: PropTypes.bool
+  };
+
+  static defaultProps = {
+    ...InputField.defaultProps,
+    allowClear: false,
+    allowEmpty: false,
+    placeholder: '--',
+    escapeMarkup: true,
+    multiple: false
+  };
+
   getField() {
     return (
       <select
@@ -48,6 +66,12 @@ class Select2Field extends InputField {
       allowClear: this.props.allowClear,
       allowEmpty: this.props.allowEmpty,
       width: 'element',
+      data: (this.props.choices || []).map(choice => {
+        if (Array.isArray(choice)) {
+          return {id: choice[0], text: choice[1]};
+        }
+        return {id: choice, text: choice};
+      }),
       escapeMarkup: !this.props.escapeMarkup ? m => m : undefined
     };
   }
@@ -60,23 +84,3 @@ class Select2Field extends InputField {
     jQuery(this.refs.select).select2('destroy');
   }
 }
-
-Select2Field.propTypes = Object.assign(
-  {
-    choices: PropTypes.array.isRequired,
-    allowClear: PropTypes.bool,
-    allowEmpty: PropTypes.bool,
-    multiple: PropTypes.bool,
-    escapeMarkup: PropTypes.bool
-  },
-  InputField.propTypes
-);
-
-Select2Field.defaultProps = Object.assign({}, InputField.defaultProps, {
-  allowEmpty: false,
-  placeholder: '--',
-  escapeMarkup: true,
-  multiple: false
-});
-
-export default Select2Field;
diff --git a/src/sentry/static/sentry/app/components/forms/select2TextField.jsx b/src/sentry/static/sentry/app/components/forms/select2TextField.jsx
new file mode 100644
index 0000000000..4c33bf46b3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/forms/select2TextField.jsx
@@ -0,0 +1,32 @@
+import React from 'react';
+
+import Select2Field from './select2Field';
+
+export default class Select2TextField extends Select2Field {
+  getField() {
+    return (
+      <input
+        id={this.getId()}
+        className="form-control"
+        ref="input"
+        placeholder={this.props.placeholder}
+        onChange={this.onChange.bind(this)}
+        disabled={this.props.disabled}
+        required={this.props.required}
+        value={this.state.value}
+      />
+    );
+  }
+
+  getSelect2Options() {
+    return {
+      ...super.getSelect2Options(),
+      createSearchChoice: (term, data) => {
+        if (!data.find(i => i.id !== term)) {
+          return {id: term, text: term};
+        }
+        return undefined;
+      }
+    };
+  }
+}
diff --git a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap b/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
index 6155d8fbb4..38c1541bf8 100644
--- a/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/customResolutionModal.spec.jsx.snap
@@ -46,6 +46,7 @@ exports[`CustomResolutionModal render() renders correctly 1`] = `
         </h6>
         <Select2FieldAutocomplete
           ajaxDelay={250}
+          allowClear={false}
           allowEmpty={false}
           className="form-control"
           disabled={false}
diff --git a/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap
new file mode 100644
index 0000000000..84075178f8
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/genericField.spec.jsx.snap
@@ -0,0 +1,31 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`GenericField render() renders text as TextInput 1`] = `
+<TextField
+  disabled={false}
+  formState="Ready"
+  help={null}
+  label="field label*"
+  name="field-name"
+  required={true}
+  type="text"
+/>
+`;
+
+exports[`GenericField render() renders text with choices as Select2TextInput 1`] = `
+<Select2TextField
+  allowClear={false}
+  allowEmpty={false}
+  choices={Array []}
+  disabled={false}
+  escapeMarkup={true}
+  formState="Ready"
+  help={null}
+  label="field label*"
+  multiple={false}
+  name="field-name"
+  placeholder="--"
+  required={true}
+  type="text"
+/>
+`;
diff --git a/tests/js/spec/components/forms/__snapshots__/select2Field.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/select2Field.spec.jsx.snap
new file mode 100644
index 0000000000..b36cf40935
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/select2Field.spec.jsx.snap
@@ -0,0 +1,111 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Select2Field render() renders with flat choices 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <select
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      multiple={false}
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    >
+      <option
+        value="a"
+      />
+      <option
+        value="b"
+      />
+      <option
+        value="c"
+      />
+    </select>
+  </div>
+</div>
+`;
+
+exports[`Select2Field render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <select
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      multiple={false}
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    />
+  </div>
+</div>
+`;
+
+exports[`Select2Field render() renders with paired choices 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <select
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      multiple={false}
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    >
+      <option
+        value="a"
+      >
+        abc
+      </option>
+      <option
+        value="b"
+      >
+        bcd
+      </option>
+      <option
+        value="c"
+      >
+        cde
+      </option>
+    </select>
+  </div>
+</div>
+`;
+
+exports[`Select2Field render() renders without form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <select
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      multiple={false}
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value=""
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap
new file mode 100644
index 0000000000..5ee1729cc6
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/select2TextField.spec.jsx.snap
@@ -0,0 +1,81 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`Select2TextField render() renders with flat choices 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    />
+  </div>
+</div>
+`;
+
+exports[`Select2TextField render() renders with form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    />
+  </div>
+</div>
+`;
+
+exports[`Select2TextField render() renders with paired choices 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value="fieldValue"
+    />
+  </div>
+</div>
+`;
+
+exports[`Select2TextField render() renders without form context 1`] = `
+<div
+  className="control-group"
+>
+  <div
+    className="controls"
+  >
+    <input
+      className="form-control"
+      disabled={false}
+      id="id-fieldName"
+      onChange={[Function]}
+      placeholder="--"
+      required={false}
+      value=""
+    />
+  </div>
+</div>
+`;
diff --git a/tests/js/spec/components/forms/genericField.spec.jsx b/tests/js/spec/components/forms/genericField.spec.jsx
new file mode 100644
index 0000000000..fb9db9c7bf
--- /dev/null
+++ b/tests/js/spec/components/forms/genericField.spec.jsx
@@ -0,0 +1,39 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {GenericField, FormState} from 'app/components/forms';
+
+describe('GenericField', function() {
+  describe('render()', function() {
+    it('renders text as TextInput', function() {
+      let wrapper = shallow(
+        <GenericField
+          formState={FormState.READY}
+          config={{
+            name: 'field-name',
+            label: 'field label',
+            type: 'text'
+          }}
+        />
+      );
+      expect(wrapper).toMatchSnapshot();
+      expect(wrapper.name()).toEqual('TextField');
+    });
+
+    it('renders text with choices as Select2TextInput', function() {
+      let wrapper = shallow(
+        <GenericField
+          formState={FormState.READY}
+          config={{
+            name: 'field-name',
+            label: 'field label',
+            type: 'text',
+            choices: []
+          }}
+        />
+      );
+      expect(wrapper).toMatchSnapshot();
+      expect(wrapper.name()).toEqual('Select2TextField');
+    });
+  });
+});
diff --git a/tests/js/spec/components/forms/select2Field.spec.jsx b/tests/js/spec/components/forms/select2Field.spec.jsx
new file mode 100644
index 0000000000..74b3e00680
--- /dev/null
+++ b/tests/js/spec/components/forms/select2Field.spec.jsx
@@ -0,0 +1,61 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Select2Field} from 'app/components/forms';
+
+describe('Select2Field', function() {
+  describe('render()', function() {
+    it('renders without form context', function() {
+      let wrapper = shallow(<Select2Field choices={[]} name="fieldName" />);
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<Select2Field choices={[]} name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 'fieldValue'
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with flat choices', function() {
+      let wrapper = shallow(<Select2Field choices={['a', 'b', 'c']} name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 'fieldValue'
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with paired choices', function() {
+      let wrapper = shallow(
+        <Select2Field
+          choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
+          name="fieldName"
+        />,
+        {
+          context: {
+            form: {
+              data: {
+                fieldName: 'fieldValue'
+              },
+              errors: {}
+            }
+          }
+        }
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
diff --git a/tests/js/spec/components/forms/select2TextField.spec.jsx b/tests/js/spec/components/forms/select2TextField.spec.jsx
new file mode 100644
index 0000000000..c15165b830
--- /dev/null
+++ b/tests/js/spec/components/forms/select2TextField.spec.jsx
@@ -0,0 +1,64 @@
+import React from 'react';
+import {shallow} from 'enzyme';
+
+import {Select2TextField} from 'app/components/forms';
+
+describe('Select2TextField', function() {
+  describe('render()', function() {
+    it('renders without form context', function() {
+      let wrapper = shallow(<Select2TextField choices={[]} name="fieldName" />);
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      let wrapper = shallow(<Select2TextField choices={[]} name="fieldName" />, {
+        context: {
+          form: {
+            data: {
+              fieldName: 'fieldValue'
+            },
+            errors: {}
+          }
+        }
+      });
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with flat choices', function() {
+      let wrapper = shallow(
+        <Select2TextField choices={['a', 'b', 'c']} name="fieldName" />,
+        {
+          context: {
+            form: {
+              data: {
+                fieldName: 'fieldValue'
+              },
+              errors: {}
+            }
+          }
+        }
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with paired choices', function() {
+      let wrapper = shallow(
+        <Select2TextField
+          choices={[['a', 'abc'], ['b', 'bcd'], ['c', 'cde']]}
+          name="fieldName"
+        />,
+        {
+          context: {
+            form: {
+              data: {
+                fieldName: 'fieldValue'
+              },
+              errors: {}
+            }
+          }
+        }
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+  });
+});
