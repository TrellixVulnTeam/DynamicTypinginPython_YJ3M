commit 08c071861ca8f9af159bc8f6ab8a84f4b549aa32
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jul 5 18:31:50 2017 -0700

    pep8: second pass to collect remaining whitespace misses

diff --git a/src/bitfield/models.py b/src/bitfield/models.py
index b9867c63f7..e7fd6e9cfc 100644
--- a/src/bitfield/models.py
+++ b/src/bitfield/models.py
@@ -62,6 +62,7 @@ class BitFieldCreator(object):
     an older version of the instance and a newer version of the class is
     available (usually during deploys).
     """
+
     def __init__(self, field):
         self.field = field
 
@@ -87,7 +88,10 @@ class BitField(BigIntegerField):
     def __init__(self, flags, default=None, *args, **kwargs):
         if isinstance(flags, dict):
             # Get only integer keys in correct range
-            valid_keys = (k for k in flags.keys() if isinstance(k, int) and (0 <= k < MAX_FLAG_COUNT))
+            valid_keys = (
+                k for k in flags.keys() if isinstance(
+                    k, int) and (
+                    0 <= k < MAX_FLAG_COUNT))
             if not valid_keys:
                 raise ValueError('Wrong keys or empty dictionary')
             # Fill list with values from dict or with empty values
@@ -151,7 +155,8 @@ class BitField(BigIntegerField):
                 # Django 1.7+
                 return [value.mask]
             else:
-                return BitQueryLookupWrapper(self.model._meta.db_table, self.db_column or self.name, value)
+                return BitQueryLookupWrapper(
+                    self.model._meta.db_table, self.db_column or self.name, value)
         return BigIntegerField.get_db_prep_lookup(self, lookup_type=lookup_type, value=value,
                                                   connection=connection, prepared=prepared)
 
diff --git a/src/bitfield/query.py b/src/bitfield/query.py
index 7721f08f48..ce9c1ef011 100644
--- a/src/bitfield/query.py
+++ b/src/bitfield/query.py
@@ -68,5 +68,5 @@ class BitQuerySaveWrapper(BitQueryLookupWrapper):
         if self.bit:
             return ("%s.%s | %d" % (qn(self.table_alias), qn(self.column), self.bit.mask),
                     [])
-        return ("%s.%s %s %d" % (qn(self.table_alias), qn(self.column), XOR_OPERATOR, self.bit.mask),
-                [])
+        return ("%s.%s %s %d" % (qn(self.table_alias), qn(
+            self.column), XOR_OPERATOR, self.bit.mask), [])
diff --git a/src/bitfield/types.py b/src/bitfield/types.py
index a9f7e4e247..feb4ba3d6b 100644
--- a/src/bitfield/types.py
+++ b/src/bitfield/types.py
@@ -15,6 +15,7 @@ class Bit(object):
     """
     Represents a single Bit.
     """
+
     def __init__(self, number, is_set=True):
         self.number = number
         self.is_set = bool(is_set)
@@ -122,6 +123,7 @@ class BitHandler(object):
     """
     Represents an array of bits, each as a ``Bit`` object.
     """
+
     def __init__(self, value, keys, labels=None):
         # TODO: change to bitarray?
         if value:
@@ -152,7 +154,8 @@ class BitHandler(object):
         return cmp(self._value, other)
 
     def __repr__(self):
-        return '<%s: %s>' % (self.__class__.__name__, ', '.join('%s=%s' % (k, self.get_bit(n).is_set) for n, k in enumerate(self._keys)),)
+        return '<%s: %s>' % (self.__class__.__name__, ', '.join('%s=%s' %
+                                                                (k, self.get_bit(n).is_set) for n, k in enumerate(self._keys)),)
 
     def __str__(self):
         return six.text_type(self._value)
@@ -265,6 +268,7 @@ if django.VERSION[:2] >= (1, 8):
     try:
         from django.db.backends.postgresql_psycopg2.base import Database
         Database.extensions.register_adapter(Bit, lambda x: Database.extensions.AsIs(int(x)))
-        Database.extensions.register_adapter(BitHandler, lambda x: Database.extensions.AsIs(int(x)))
+        Database.extensions.register_adapter(
+            BitHandler, lambda x: Database.extensions.AsIs(int(x)))
     except ImproperlyConfigured:
         pass
