commit f895ff93b8c98f656113cadee308bf841d733ed6
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 15 14:09:51 2010 -0700

    Redmine create issue flow now works (needs improvements yet)

diff --git a/sentry/plugins/__init__.py b/sentry/plugins/__init__.py
index 33d8e6e164..7c57e62a1c 100644
--- a/sentry/plugins/__init__.py
+++ b/sentry/plugins/__init__.py
@@ -92,6 +92,10 @@ class GroupListProvider:
         No return value.
         """
 
+    def actions(self, request, action_list, group):
+        """Modifies the action list for a grouped message."""
+        return action_list
+
     def tags(self, request, group, tags=[]):
         """
         Happens before rendering of a list of messages, but after pagination.
diff --git a/sentry/plugins/sentry_redmine/migrations/0001_initial.py b/sentry/plugins/sentry_redmine/migrations/0001_initial.py
new file mode 100644
index 0000000000..5f9e1dd9cb
--- /dev/null
+++ b/sentry/plugins/sentry_redmine/migrations/0001_initial.py
@@ -0,0 +1,51 @@
+# encoding: utf-8
+import datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+class Migration(SchemaMigration):
+
+    def forwards(self, orm):
+        
+        # Adding model 'RedmineIssue'
+        db.create_table('sentry_redmine_redmineissue', (
+            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),
+            ('group', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['sentry.GroupedMessage'])),
+            ('issue_id', self.gf('django.db.models.fields.PositiveIntegerField')()),
+        ))
+        db.send_create_signal('sentry_redmine', ['RedmineIssue'])
+
+
+    def backwards(self, orm):
+        
+        # Deleting model 'RedmineIssue'
+        db.delete_table('sentry_redmine_redmineissue')
+
+
+    models = {
+        'sentry.groupedmessage': {
+            'Meta': {'unique_together': "(('logger', 'view', 'checksum'),)", 'object_name': 'GroupedMessage'},
+            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
+            'class_name': ('django.db.models.fields.CharField', [], {'db_index': 'True', 'max_length': '128', 'null': 'True', 'blank': 'True'}),
+            'data': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
+            'level': ('django.db.models.fields.PositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
+            'logger': ('django.db.models.fields.CharField', [], {'default': "'root'", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'status': ('django.db.models.fields.PositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
+            'times_seen': ('django.db.models.fields.PositiveIntegerField', [], {'default': '1'}),
+            'traceback': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
+            'view': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
+        },
+        'sentry_redmine.redmineissue': {
+            'Meta': {'object_name': 'RedmineIssue'},
+            'group': ('django.db.models.fields.related.ForeignKey', [], {'to': "orm['sentry.GroupedMessage']"}),
+            'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),
+            'issue_id': ('django.db.models.fields.PositiveIntegerField', [], {})
+        }
+    }
+
+    complete_apps = ['sentry_redmine']
diff --git a/sentry/plugins/sentry_redmine/migrations/__init__.py b/sentry/plugins/sentry_redmine/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 313b16fc3a..0806db7071 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -1,6 +1,8 @@
 from django import forms
 from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
 from django.db import models
+from django.http import HttpResponseRedirect
 from django.shortcuts import render_to_response
 from django.utils import simplejson
 
@@ -23,7 +25,12 @@ class RedmineIssueForm(forms.Form):
 
 class CreateRedmineIssue(GroupActionProvider):
     title = 'Create Redmine Issue'
-    
+
+    def actions(self, request, action_list, group):
+        if 'redmine' not in group.data:
+            action_list.append((self.title, self.__class__.get_url(group.pk)))
+        return action_list
+
     def view(self, request, group):
         if request.POST:
             form = RedmineIssueForm(request.POST)
@@ -48,6 +55,9 @@ class CreateRedmineIssue(GroupActionProvider):
                 
                 data = simplejson.loads(response)
                 RedmineIssue.objects.create(group=group, issue_id=data['id'])
+                group.data['redmine'] = {'issue_id': data['id']}
+                group.save()
+                return HttpResponseRedirect(reverse('sentry-group', args=[group.pk]))
         else:
             description = 'Sentry Message: %s' % request.build_absolute_uri(group.get_absolute_url())
             description += '\n\n' + (group.traceback or group.message)
@@ -67,12 +77,9 @@ class CreateRedmineIssue(GroupActionProvider):
 class RedmineTagIssue(GroupListProvider):
     title = 'Redmine Issue IDs'
     
-    def before(self, request, group_list):
-        self.issues_by_group = dict(RedmineIssue.objects.filter(group__in=group_list).values_list('group', 'issue_id'))
-    
     def tags(self, request, group, tags=[]):
-        issue_id = self.issues_by_group.get(group.pk)
-        if issue_id:
+        if 'redmine' in group.data:
+            issue_id = group.data['redmine']['issue_id']
             tags.append(mark_safe('<a href="%s">#%s</a>' % (
                 '%sissues/%s' % (conf.REDMINE_URL, issue_id),
                 issue_id,
diff --git a/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html b/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
index da34b5124e..7af016c491 100644
--- a/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
+++ b/sentry/plugins/sentry_redmine/templates/sentry/plugins/redmine/create_issue.html
@@ -4,5 +4,26 @@
 
 {% block inner %}
 	<h2>Create Redmine Issue</h2>
-	<iframe src="{{ ticket_link }}" width="100%" height="400px">
+    <form method="post" action="">
+		<input type="hidden" name="next" value="{{ next }}" />
+	
+		{% csrf_token %}
+		<table>
+			<colgroup>
+				<col width="100px"/>
+				<col/>
+			</colgroup>
+			<tr>
+			    <td>{{ form.subject.label_tag }}</td>
+			    <td>{{ form.subject }}</td>
+			</tr>
+			<tr>
+			    <td>{{ form.description.label_tag }}</td>
+			    <td>{{ form.description }}</td>
+			</tr>
+		</table>
+		<div class="submit">
+		    <button type="submit" class="button">Create Issue</button>
+		</div>
+	</form>
 {% endblock %}
\ No newline at end of file
diff --git a/sentry/plugins/sentry_redmine/tests/__init__.py b/sentry/plugins/sentry_redmine/tests/__init__.py
index bbdc47c6ab..a437298e69 100644
--- a/sentry/plugins/sentry_redmine/tests/__init__.py
+++ b/sentry/plugins/sentry_redmine/tests/__init__.py
@@ -29,8 +29,11 @@ class CreateIssueTest(TestCase):
         response = self.client.post(CreateRedmineIssue.get_url(group.pk), {
             'subject': 'test',
             'description': 'foo',
-        })
+        }, follow=True)
         self.assertEquals(response.status_code, 200)
-        self.assertTemplateUsed(response, 'sentry/plugins/redmine/create_issue.html')
+        self.assertTemplateUsed(response, 'sentry/group/details.html')
+        
+        self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
         
-        self.assertTrue(RedmineIssue.objects.filter(group=group).exists())
\ No newline at end of file
+        group = GroupedMessage.objects.get(pk=group.pk)
+        self.assertTrue(group.data['redmine']['issue_id'] > 0)
\ No newline at end of file
