commit c4d99ae60a7cb4dad2b8e22c36693a3aa4869b45
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Feb 9 16:16:46 2017 +0100

    Kill instruction_offset

diff --git a/CHANGES b/CHANGES
index ef1841125f..9bc1274ba9 100644
--- a/CHANGES
+++ b/CHANGES
@@ -5,6 +5,7 @@ Version 8.14 (Unreleased)
 - Add IE10 legacy browser filter
 - Added data migration to merge legacy releases
 - Added support for symbolizing inlined frames and added heuristics for fixing up native stacktraces.
+- Removed instruction_offset as a frame attribute from stacktraces
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index 237955c92a..5b89180381 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -321,11 +321,6 @@ class Frame(Interface):
         except AssertionError:
             raise InterfaceValidationError("Invalid value for 'in_app'")
 
-        instruction_offset = data.get('instruction_offset')
-        if instruction_offset is not None and \
-           not isinstance(instruction_offset, six.integer_types):
-            raise InterfaceValidationError("Invalid value for 'instruction_offset'")
-
         kwargs = {
             'abs_path': trim(abs_path, 2048),
             'filename': trim(filename, 256),
@@ -337,7 +332,6 @@ class Frame(Interface):
             'symbol': trim(symbol, 256),
             'symbol_addr': to_hex_addr(data.get('symbol_addr')),
             'instruction_addr': to_hex_addr(data.get('instruction_addr')),
-            'instruction_offset': instruction_offset,
             'in_app': in_app,
             'context_line': context_line,
             # TODO(dcramer): trim pre/post_context
@@ -423,7 +417,6 @@ class Frame(Interface):
             'package': self.package,
             'platform': self.platform,
             'instructionAddr': pad_hex_addr(self.instruction_addr, pad_addr),
-            'instructionOffset': self.instruction_offset,
             'symbolAddr': pad_hex_addr(self.symbol_addr, pad_addr),
             'function': self.function,
             'symbol': self.symbol,
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index ff29d7403d..dd3658b798 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -168,9 +168,6 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
         # the beginning of the symbol.
         function = frame.get('symbol_name') or '<unknown>'
         lineno = frame.get('line')
-        offset = None
-        if not lineno:
-            offset = frame['instruction_addr'] - frame['symbol_addr']
 
         cframe = {
             'abs_path': fn,
@@ -183,7 +180,6 @@ def convert_stacktrace(frames, system=None, notable_addresses=None):
             'package': frame.get('object_name'),
             'symbol_addr': '0x%x' % frame['symbol_addr'],
             'instruction_addr': '0x%x' % frame['instruction_addr'],
-            'instruction_offset': offset,
             'lineno': lineno,
         }
         cframe['in_app'] = is_in_app(cframe, app_uuid)
@@ -472,9 +468,6 @@ class NativeStacktraceProcessor(StacktraceProcessor):
                     new_frame['abs_path'])
             if sfrm.get('line') is not None:
                 new_frame['lineno'] = sfrm['line']
-            instruction_offset = sfrm.get('instruction_offset')
-            if instruction_offset is not None:
-                new_frame['instruction_offset'] = instruction_offset
             if sfrm.get('column') is not None:
                 new_frame['colno'] = sfrm['column']
             new_frame['package'] = sfrm['object_name'] \
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index c02829f6fb..bc9a49ffc5 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -215,18 +215,6 @@ class Symbolizer(object):
                 rv['object_name'] = img['name']
             rv['uuid'] = img['uuid']
 
-        # XXX: this is technically incorrect because the instruction
-        # address might move away from the symbol address if we
-        # find a different symbol than the client did.  However
-        # our symbolizer cannot tell us where a symbol is so this
-        # is the best we can do for now.  Maybe we kill it?
-        symbol_addr = frame.get('symbol_addr')
-        if symbol_addr is not None:
-            symbol_addr = parse_addr(symbol_addr)
-            slide_value = parse_addr(img.get('image_vmaddr') or 0)
-            rv['instruction_offset'] = parse_addr(frame['instruction_addr']) \
-                - slide_value - symbol_addr
-
         return rv
 
     def _get_frame_package(self, frame, img):
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 8929576d1c..8520268c19 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -312,8 +312,6 @@ const Frame = React.createClass({
           </span>
           <span className="symbol">
             <code>{data.function || '<unknown>'}</code>
-            {data.instructionOffset &&
-              <span className="offset">{' + ' + data.instructionOffset}</span>}
             {data.filename &&
               <span className="filename">{data.filename}
                 {data.lineNo ? ':' + data.lineNo : ''}</span>}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index 13612cee71..eb12a61bb9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -108,9 +108,6 @@ export function getCocoaFrame(frame) {
     result += ljust(frame.instructionAddr, 12);
   }
   result += ' ' + (frame.function || frame.symbolAddr);
-  if (frame.instructionOffset) {
-    result += ' + ' + frame.instructionOffset;
-  }
   if (defined(frame.filename)) {
     result += ' (' + frame.filename;
     if (defined(frame.lineNo) && frame.lineNo >= 0) {
