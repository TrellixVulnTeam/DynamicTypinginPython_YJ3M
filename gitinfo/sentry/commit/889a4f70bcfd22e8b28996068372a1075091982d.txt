commit 889a4f70bcfd22e8b28996068372a1075091982d
Author: Mark Story <mark@sentry.io>
Date:   Mon Nov 18 13:51:22 2019 -0500

    feat(discover) Add pagination and sorting to saved queries (#15631)
    
    Enable saved queries to be sorted and paginated. This helps future proof
    the discover query list so that we don't have unbounded result sets in
    the future. I've included an escape hatch for discover1 which expects
    that it will receive *all* saved queries at once.

diff --git a/src/sentry/discover/endpoints/discover_saved_queries.py b/src/sentry/discover/endpoints/discover_saved_queries.py
index 8f04c20b49..1cc1d4e815 100644
--- a/src/sentry/discover/endpoints/discover_saved_queries.py
+++ b/src/sentry/discover/endpoints/discover_saved_queries.py
@@ -6,6 +6,7 @@ from rest_framework.response import Response
 from sentry import features
 from sentry.api.serializers import serialize
 from sentry.api.bases import OrganizationEndpoint
+from sentry.api.paginator import DateTimePaginator, OffsetPaginator
 from sentry.discover.models import DiscoverSavedQuery
 from sentry.discover.endpoints.bases import DiscoverSavedQueryPermission
 from sentry.discover.endpoints.serializers import DiscoverSavedQuerySerializer
@@ -27,10 +28,8 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
         if not self.has_feature(organization, request):
             return self.respond(status=404)
 
-        queryset = (
-            DiscoverSavedQuery.objects.filter(organization=organization)
-            .prefetch_related("projects")
-            .order_by("name")
+        queryset = DiscoverSavedQuery.objects.filter(organization=organization).prefetch_related(
+            "projects"
         )
         query = request.query_params.get("query")
         if query:
@@ -45,8 +44,32 @@ class DiscoverSavedQueriesEndpoint(OrganizationEndpoint):
                 else:
                     queryset = queryset.none()
 
-        saved_queries = list(queryset.all())
-        return Response(serialize(saved_queries), status=200)
+        sort_by = request.query_params.get("sortBy")
+        if sort_by in ("name", "-name"):
+            order_by = sort_by
+            paginator_cls = OffsetPaginator
+        elif sort_by in ("dateCreated", "-dateCreated"):
+            order_by = "-date_created" if sort_by.startswith("-") else "date_created"
+            paginator_cls = DateTimePaginator
+        elif sort_by in ("dateUpdated", "-dateUpdated"):
+            order_by = "-date_updated" if sort_by.startswith("-") else "date_updated"
+            paginator_cls = DateTimePaginator
+        else:
+            order_by = "name"
+            paginator_cls = OffsetPaginator
+
+        # Old discover expects all queries and uses this parameter.
+        if request.query_params.get("all") == "1":
+            saved_queries = list(queryset.all())
+            return Response(serialize(saved_queries), status=200)
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by=order_by,
+            paginator_cls=paginator_cls,
+            on_results=lambda x: serialize(x, request.user),
+            default_per_page=25,
+        )
 
     def post(self, request, organization):
         """
diff --git a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
index c83e05bac7..b729f87b75 100644
--- a/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/discoverSavedQueries.tsx
@@ -12,6 +12,7 @@ export function fetchSavedQueries(api: Client, orgId: string): Promise<SavedQuer
     `/organizations/${orgId}/discover/saved/`,
     {
       method: 'GET',
+      query: {query: 'version:2'},
     }
   );
 
diff --git a/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx b/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
index b9ff1c19d9..31c46d23fe 100644
--- a/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
+++ b/src/sentry/static/sentry/app/views/discover/sidebar/savedQueryList.tsx
@@ -75,7 +75,6 @@ export default class SavedQueries extends React.Component<
   fetchAll() {
     fetchSavedQueries(this.props.organization)
       .then((data: SavedQuery[]) => {
-        data = data.filter(item => item.version === 1 || item.version === undefined);
         this.setState({isLoading: false, data});
       })
       .catch(() => {
diff --git a/src/sentry/static/sentry/app/views/discover/utils.tsx b/src/sentry/static/sentry/app/views/discover/utils.tsx
index 83f65ecc03..bf9e241cba 100644
--- a/src/sentry/static/sentry/app/views/discover/utils.tsx
+++ b/src/sentry/static/sentry/app/views/discover/utils.tsx
@@ -146,6 +146,7 @@ export function fetchSavedQueries(organization: any): Promise<any> {
 
   return api.requestPromise(endpoint, {
     method: 'GET',
+    query: {all: 1, query: 'version:1'},
   } as any); // TODO: Remove as any
 }
 
diff --git a/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx b/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
index ae1a94761b..5a7afa4a57 100644
--- a/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
+++ b/tests/js/spec/views/discover/sidebar/savedQueryList.spec.jsx
@@ -30,7 +30,6 @@ describe('savedQueryList', function() {
     const savedQueries = [
       TestStubs.DiscoverSavedQuery({id: '1', name: 'one'}),
       TestStubs.DiscoverSavedQuery({id: '2', name: '2two'}),
-      TestStubs.DiscoverSavedQuery({id: '3', name: 'three v2', version: 2}),
     ];
     mockResponse.push(...savedQueries);
     const wrapper = mount(<SavedQueryList organization={organization} />);
@@ -40,7 +39,5 @@ describe('savedQueryList', function() {
     expect(text).toContain('Updated Sep 24 00:00:00 (UTC)');
     expect(text).toContain(savedQueries[0].name);
     expect(text).toContain(savedQueries[1].name);
-    // v2 queries should not be present.
-    expect(text).not.toContain(savedQueries[2].name);
   });
 });
diff --git a/tests/snuba/api/endpoints/test_discover_saved_queries.py b/tests/snuba/api/endpoints/test_discover_saved_queries.py
index d5a403b114..0a57bfdeaf 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_queries.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_queries.py
@@ -4,6 +4,7 @@ from sentry.testutils import APITestCase, SnubaTestCase
 from django.core.urlresolvers import reverse
 
 from sentry.discover.models import DiscoverSavedQuery
+from sentry.testutils.helpers.datetime import before_now
 
 
 class DiscoverSavedQueryBase(APITestCase, SnubaTestCase):
@@ -80,6 +81,63 @@ class DiscoverSavedQueriesTest(DiscoverSavedQueryBase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 0
 
+    def test_get_all_paginated(self):
+        for i in range(0, 10):
+            query = {"fields": ["test"], "conditions": [], "limit": 10}
+            model = DiscoverSavedQuery.objects.create(
+                organization=self.org,
+                created_by=self.user,
+                name="My query {}".format(i),
+                query=query,
+                version=1,
+            )
+            model.set_projects(self.project_ids)
+
+        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+        with self.feature(self.feature_name):
+            response = self.client.get(url, data={"per_page": 1})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+
+        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+        with self.feature(self.feature_name):
+            # The all parameter ignores pagination and returns all values.
+            response = self.client.get(url, data={"per_page": 1, "all": 1})
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 11
+
+    def test_get_sortby(self):
+        query = {"fields": ["message"], "query": "", "limit": 10}
+        model = DiscoverSavedQuery.objects.create(
+            organization=self.org,
+            created_by=self.user,
+            name="My query",
+            query=query,
+            version=2,
+            date_created=before_now(minutes=10),
+            date_updated=before_now(minutes=10),
+        )
+        model.set_projects(self.project_ids)
+
+        url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
+        sort_options = {
+            "dateCreated": True,
+            "-dateCreated": False,
+            "dateUpdated": True,
+            "-dateUpdated": False,
+            "name": True,
+            "-name": False,
+        }
+        for sorting, forward_sort in sort_options.items():
+            with self.feature(self.feature_name):
+                response = self.client.get(url, data={"sortBy": sorting})
+            assert response.status_code == 200
+
+            values = [row[sorting.strip("-")] for row in response.data]
+            if not forward_sort:
+                values = list(reversed(values))
+            assert list(sorted(values)) == values
+
     def test_post(self):
         with self.feature(self.feature_name):
             url = reverse("sentry-api-0-discover-saved-queries", args=[self.org.slug])
diff --git a/tests/snuba/api/endpoints/test_discover_saved_query_detail.py b/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
index 5d4103690d..5a02506485 100644
--- a/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
+++ b/tests/snuba/api/endpoints/test_discover_saved_query_detail.py
@@ -65,7 +65,7 @@ class DiscoverSavedQueryDetailTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert response.data["id"] == six.text_type(model.id)
-        assert response.data["projects"] == self.project_ids
+        assert set(response.data["projects"]) == set(self.project_ids)
         assert response.data["fields"] == ["event_id"]
         assert response.data["query"] == "event.type:error"
         assert response.data["limit"] == 10
