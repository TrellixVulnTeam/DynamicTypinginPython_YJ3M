commit 4c6303c0654011d53ac89188ac69ddd52011d2f7
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Mar 8 12:03:41 2016 +0100

    Only load symbols for symbolication referenced by the crashed thread

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 1edd2b3d78..ebf746fab0 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -65,16 +65,18 @@ def preprocess_apple_crash_event(data):
         id=data['project'],
     )
 
-    sym = make_symbolizer(project, crash_report['binary_images'])
     crash = crash_report['crash']
-
-    bt = None
+    crashed_thread = None
     for thread in crash['threads']:
         if thread['crashed']:
-            with sym.driver:
-                bt = sym.symbolize_backtrace(thread['backtrace']['contents'])
+            crashed_thread = thread
+    if crashed_thread is None:
+        return
 
-    if bt is not None:
+    sym = make_symbolizer(project, crash_report['binary_images'],
+                          threads=[crashed_thread])
+    with sym.driver:
+        bt = sym.symbolize_backtrace(crashed_thread['backtrace']['contents'])
         inject_apple_backtrace(data, bt, crash.get('diagnosis'),
                                crash.get('error'))
 
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 07c52b2284..42297248e8 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -8,11 +8,29 @@ except ImportError:
 from sentry.lang.native.dsymcache import dsymcache
 
 
-def make_symbolizer(project, binary_images):
+def make_symbolizer(project, binary_images, threads=None):
+    """Creates a symbolizer for the given project and binary images.  If a
+    list of threads is referenced (from an apple crash report) then only
+    images needed by those frames are loaded.
+    """
     if not have_symsynd:
         raise RuntimeError('symsynd is unavailable.  Install sentry with '
                            'the dsym feature flag.')
     driver = Driver()
-    dsym_paths, loaded = dsymcache.fetch_dsyms(project,
-        [x['uuid'] for x in binary_images])
+
+    if threads is None:
+        to_load = [x['uuid'] for x in binary_images]
+    else:
+        image_map = {}
+        for image in binary_images:
+            image_map[image['image_addr']] = image['uuid']
+        to_load = set()
+        for thread in threads:
+            for frame in thread['backtrace']['contents']:
+                img_uuid = image_map.get(frame['object_addr'])
+                if img_uuid is not None:
+                    to_load.add(img_uuid)
+        to_load = list(to_load)
+
+    dsym_paths, loaded = dsymcache.fetch_dsyms(project, to_load)
     return ReportSymbolizer(driver, dsym_paths, binary_images)
