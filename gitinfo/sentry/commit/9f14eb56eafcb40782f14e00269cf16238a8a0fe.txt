commit 9f14eb56eafcb40782f14e00269cf16238a8a0fe
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Apr 25 10:26:14 2019 -0700

    feat(incidents): Add skeleton of incidents list (#12924)
    
    Add basic incidents listing with links to each incident

diff --git a/src/sentry/api/endpoints/organization_incidents.py b/src/sentry/api/endpoints/organization_incidents.py
new file mode 100644
index 0000000000..95bacf724b
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incidents.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry import features
+from sentry.api.bases import OrganizationEndpoint
+
+
+class OrganizationIncidentsIndexEndpoint(OrganizationEndpoint):
+    def get(self, request, organization):
+        """
+        List saved incidents for organization
+        """
+        if not features.has('organizations:incidents', organization, actor=request.user):
+            return self.respond(status=404)
+
+        # TODO: implement
+        return self.respond([], status=200)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index f533bace17..aca0b5acdb 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -75,6 +75,7 @@ from .endpoints.organization_dashboard_details import OrganizationDashboardDetai
 from .endpoints.organization_dashboard_widget_details import OrganizationDashboardWidgetDetailsEndpoint
 from .endpoints.organization_dashboard_widgets import OrganizationDashboardWidgetsEndpoint
 from .endpoints.organization_health import OrganizationHealthTopEndpoint, OrganizationHealthGraphEndpoint
+from .endpoints.organization_incidents import OrganizationIncidentsIndexEndpoint
 from .endpoints.organization_shortid import ShortIdLookupEndpoint
 from .endpoints.organization_environments import OrganizationEnvironmentsEndpoint
 from .endpoints.organization_eventid import EventIdLookupEndpoint
@@ -471,6 +472,12 @@ urlpatterns = patterns(
         OrganizationHealthGraphEndpoint.as_view(),
         name='sentry-api-0-organization-health-graph',
     ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/$',
+        OrganizationIncidentsIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incidents',
+    ),
+
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/shortids/(?P<short_id>[^\/]+)/$',
         ShortIdLookupEndpoint.as_view(),
diff --git a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
index aa6a422e26..0255d6d6b4 100644
--- a/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIncidents/list/index.jsx
@@ -1,7 +1,66 @@
 import React from 'react';
+import {withRouter} from 'react-router';
 
-export default class OrganizationIncidents extends React.Component {
-  render() {
-    return <div />;
+import {t} from 'app/locale';
+import AsyncView from 'app/views/asyncView';
+import {Panel, PanelBody, PanelItem} from 'app/components/panels';
+import Link from 'app/components/link';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import Pagination from 'app/components/pagination';
+
+class OrganizationIncidents extends AsyncView {
+  getTitle() {
+    return `Incidents - ${this.props.params.orgId}`;
+  }
+
+  getEndpoints() {
+    const {params, location} = this.props;
+    return [
+      [
+        'incidentList',
+        `/organizations/${params.orgId}/incidents/`,
+        {
+          query: location.query,
+        },
+      ],
+    ];
+  }
+
+  renderListItem(incident) {
+    const {orgId} = this.props.params;
+
+    return (
+      <PanelItem key={incident.id}>
+        <Link to={`/organizations/${orgId}/incidents/${incident.id}/`}>
+          {incident.name}
+        </Link>
+      </PanelItem>
+    );
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning small={true}>
+        <p>{t("You don't have any incidents yet!")}</p>
+      </EmptyStateWarning>
+    );
+  }
+
+  renderBody() {
+    const {incidentList, incidentListPageLinks} = this.state;
+
+    return (
+      <React.Fragment>
+        <Panel>
+          <PanelBody>
+            {incidentList.length === 0 && this.renderEmpty()}
+            {incidentList.map(incident => this.renderListItem(incident))}
+          </PanelBody>
+        </Panel>
+        <Pagination pageLinks={incidentListPageLinks} />
+      </React.Fragment>
+    );
   }
 }
+
+export default withRouter(OrganizationIncidents);
diff --git a/tests/js/spec/views/organizationIncidents/index.spec.jsx b/tests/js/spec/views/organizationIncidents/index.spec.jsx
index 5dc59adb14..e961605253 100644
--- a/tests/js/spec/views/organizationIncidents/index.spec.jsx
+++ b/tests/js/spec/views/organizationIncidents/index.spec.jsx
@@ -5,7 +5,7 @@ import OrganizationIncidentsContainer from 'app/views/organizationIncidents/inde
 
 describe('OrganizationIncidentsContainer', function() {
   describe('no access without feature flag', function() {
-    it('display no access message', async function() {
+    it('display no access message', function() {
       const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
       const wrapper = mount(
         <OrganizationIncidentsContainer />,
diff --git a/tests/js/spec/views/organizationIncidents/list/index.spec.jsx b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
new file mode 100644
index 0000000000..4ffc94ee9d
--- /dev/null
+++ b/tests/js/spec/views/organizationIncidents/list/index.spec.jsx
@@ -0,0 +1,44 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+
+import OrganizationIncidentsList from 'app/views/organizationIncidents/list';
+
+describe('OrganizationIncidentsList', function() {
+  const {routerContext} = initializeOrg({
+    projects: [TestStubs.Project()],
+    router: {
+      params: {orgId: 'org-slug'},
+    },
+  });
+
+  afterEach(function() {
+    MockApiClient.clearMockResponses();
+  });
+
+  it('displays list', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      body: [{id: '1', name: 'First incident'}, {id: '2', name: 'Second incident'}],
+    });
+
+    const wrapper = mount(<OrganizationIncidentsList />, routerContext);
+
+    const items = wrapper.find('PanelItem');
+
+    expect(items).toHaveLength(2);
+    expect(items.at(0).text()).toBe('First incident');
+    expect(items.at(1).text()).toBe('Second incident');
+  });
+
+  it('displays empty state', function() {
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/incidents/',
+      body: [],
+    });
+    const wrapper = mount(<OrganizationIncidentsList />, routerContext);
+    expect(wrapper.find('PanelItem')).toHaveLength(0);
+    expect(wrapper.text()).toBe("You don't have any incidents yet!");
+  });
+});
