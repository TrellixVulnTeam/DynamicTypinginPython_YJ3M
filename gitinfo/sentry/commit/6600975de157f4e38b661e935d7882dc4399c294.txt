commit 6600975de157f4e38b661e935d7882dc4399c294
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Feb 14 17:19:52 2019 -0800

    feat(serializers): Added environment names to ProjectSummarySerializer. (#12083)
    
    * Added project environments to project summar serializer.
    
    * Added environment is hidden and avoided the no env.
    
    * Added empty list as default.

diff --git a/.vscode/settings.json b/.vscode/settings.json
index acf5d60b4f..3ab42ddd62 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -46,7 +46,7 @@
   "python.formatting.provider": "autopep8",
   "python.formatting.autopep8Args": ["--global-config", "${workspaceRoot}/setup.cfg"],
   // https://github.com/DonJayamanne/pythonVSCode/issues/992
-  "python.pythonPath": "${env.WORKON_HOME}/sentry/bin/python",
+  "python.pythonPath": "/usr/local/opt/python@2/bin/python2.7",
   // test discovery is sluggish and the UI around running
   // tests is often in your way and misclicked
   "python.unitTest.pyTestEnabled": false,
@@ -54,5 +54,7 @@
   "python.unitTest.nosetestsEnabled": false,
   "prettier-eslint.prettierPath":
     "${env.WORKON_HOME}/node_modules/prettier/bin/prettier.js",
-  "editor.tabSize": 4
+  "editor.tabSize": 4,
+  "restructuredtext.confPath": "",
+  "python.linting.enabled": true
 }
diff --git a/src/sentry/api/serializers/models/project.py b/src/sentry/api/serializers/models/project.py
index 2e63b28aa6..7ecbd1af7e 100644
--- a/src/sentry/api/serializers/models/project.py
+++ b/src/sentry/api/serializers/models/project.py
@@ -17,7 +17,7 @@ from sentry.auth.superuser import is_active_superuser
 from sentry.constants import StatsPeriod
 from sentry.digests import backend as digests
 from sentry.models import (
-    Project, ProjectAvatar, ProjectBookmark, ProjectOption, ProjectPlatform,
+    EnvironmentProject, Project, ProjectAvatar, ProjectBookmark, ProjectOption, ProjectPlatform,
     ProjectStatus, ProjectTeam, Release, ReleaseProjectEnvironment, Deploy, UserOption, DEFAULT_SUBJECT_TEMPLATE
 )
 from sentry.utils.data_filters import FilterTypes
@@ -269,6 +269,20 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
         attrs = super(ProjectSummarySerializer,
                       self).get_attrs(item_list, user)
 
+        project_envs = EnvironmentProject.objects.filter(
+            project_id__in=[i.id for i in item_list],
+        ).exclude(
+            is_hidden=True
+        ).exclude(
+            # HACK(lb): avoiding the no environment value
+            environment__name=''
+        ).values('project_id', 'environment__name')
+
+        environments_by_project = defaultdict(list)
+        for project_env in project_envs:
+            environments_by_project[project_env['project_id']].append(
+                project_env['environment__name'])
+
         release_project_envs = list(ReleaseProjectEnvironment.objects.filter(
             project__in=item_list,
             last_deploy_id__isnull=False
@@ -306,6 +320,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
         for item in item_list:
             attrs[item]['latest_release'] = latest_releases.get(item.id)
             attrs[item]['deploys'] = deploys_by_project.get(item.id)
+            attrs[item]['environments'] = environments_by_project.get(item.id, [])
 
         return attrs
 
@@ -321,6 +336,7 @@ class ProjectSummarySerializer(ProjectWithTeamSerializer):
             'isMember': attrs['is_member'],
             'hasAccess': attrs['has_access'],
             'dateCreated': obj.date_added,
+            'environments': attrs['environments'],
             'features': feature_list,
             'firstEvent': obj.first_event,
             'platform': obj.platform,
diff --git a/tests/sentry/api/endpoints/test_organization_details.py b/tests/sentry/api/endpoints/test_organization_details.py
index a527cde4c5..3e3b87f1c4 100644
--- a/tests/sentry/api/endpoints/test_organization_details.py
+++ b/tests/sentry/api/endpoints/test_organization_details.py
@@ -55,7 +55,7 @@ class OrganizationDetailsTest(APITestCase):
         )
         # TODO(dcramer): we need to pare this down -- lots of duplicate queries
         # for membership data
-        with self.assertNumQueries(34, using='default'):
+        with self.assertNumQueries(35, using='default'):
             from django.db import connections
             response = self.client.get(url, format='json')
             pprint(connections['default'].queries)
diff --git a/tests/sentry/api/serializers/test_project.py b/tests/sentry/api/serializers/test_project.py
index a1dd0957e8..9b0a223341 100644
--- a/tests/sentry/api/serializers/test_project.py
+++ b/tests/sentry/api/serializers/test_project.py
@@ -16,7 +16,7 @@ from sentry.api.serializers.models.project import (
     ProjectWithTeamSerializer,
     ProjectSummarySerializer,
 )
-from sentry.models import Deploy, Environment, ReleaseProjectEnvironment
+from sentry.models import Deploy, Environment, EnvironmentProject, Release, ReleaseProjectEnvironment
 from sentry.testutils import TestCase
 
 
@@ -155,49 +155,109 @@ class ProjectWithTeamSerializerTest(TestCase):
 
 
 class ProjectSummarySerializerTest(TestCase):
-    def test_simple(self):
-        date = datetime.datetime(2018, 1, 12, 3, 8, 25, tzinfo=timezone.utc)
-        user = self.create_user(username='foo')
-        organization = self.create_organization(owner=user)
-        team = self.create_team(organization=organization)
-        project = self.create_project(teams=[team], organization=organization, name='foo')
-        project.flags.has_releases = True
-        project.save()
-
-        release = self.create_release(project)
-
-        environment = Environment.objects.create(
-            organization_id=organization.id,
+    def setUp(self):
+        self.date = datetime.datetime(2018, 1, 12, 3, 8, 25, tzinfo=timezone.utc)
+        self.user = self.create_user(username='foo')
+        self.organization = self.create_organization(owner=self.user)
+        team = self.create_team(organization=self.organization)
+        self.project = self.create_project(teams=[team], organization=self.organization, name='foo')
+        self.project.flags.has_releases = True
+        self.project.save()
+
+        self.release = self.create_release(self.project)
+
+        environment_1 = Environment.objects.create(
+            organization_id=self.organization.id,
             name='production',
         )
-
+        environment_1.add_project(self.project)
+        environment_1.save()
+        environment_2 = Environment.objects.create(
+            organization_id=self.organization.id,
+            name='staging',
+        )
+        environment_2.add_project(self.project)
+        environment_2.save()
         deploy = Deploy.objects.create(
-            environment_id=environment.id,
-            organization_id=organization.id,
-            release=release,
-            date_finished=date
+            environment_id=environment_1.id,
+            organization_id=self.organization.id,
+            release=self.release,
+            date_finished=self.date
         )
-
         ReleaseProjectEnvironment.objects.create(
-            project_id=project.id,
-            release_id=release.id,
-            environment_id=environment.id,
+            project_id=self.project.id,
+            release_id=self.release.id,
+            environment_id=environment_1.id,
             last_deploy_id=deploy.id
         )
 
-        result = serialize(project, user, ProjectSummarySerializer())
+    def test_simple(self):
+        result = serialize(self.project, self.user, ProjectSummarySerializer())
 
-        assert result['id'] == six.text_type(project.id)
-        assert result['name'] == project.name
-        assert result['slug'] == project.slug
-        assert result['firstEvent'] == project.first_event
+        assert result['id'] == six.text_type(self.project.id)
+        assert result['name'] == self.project.name
+        assert result['slug'] == self.project.slug
+        assert result['firstEvent'] == self.project.first_event
+        assert 'releases' in result['features']
+        assert result['platform'] == self.project.platform
+
+        assert result['latestDeploys'] == {
+            'production': {'dateFinished': self.date, 'version': self.release.version}
+        }
+        assert result['latestRelease'] == serialize(self.release)
+        assert result['environments'] == ['production', 'staging']
+
+    def test_no_enviroments(self):
+        # remove environments and related models
+        Deploy.objects.all().delete()
+        Release.objects.all().delete()
+        Environment.objects.all().delete()
+
+        result = serialize(self.project, self.user, ProjectSummarySerializer())
+
+        assert result['id'] == six.text_type(self.project.id)
+        assert result['name'] == self.project.name
+        assert result['slug'] == self.project.slug
+        assert result['firstEvent'] == self.project.first_event
+        assert 'releases' in result['features']
+        assert result['platform'] == self.project.platform
+
+        assert result['latestDeploys'] is None
+        assert result['latestRelease'] is None
+        assert result['environments'] == []
+
+    def test_avoid_hidden_and_no_env(self):
+        hidden_env = Environment.objects.create(
+            organization_id=self.organization.id,
+            name='staging 2',
+        )
+        EnvironmentProject.objects.create(
+            project=self.project,
+            environment=hidden_env,
+            is_hidden=True,
+        )
+
+        no_env = Environment.objects.create(
+            organization_id=self.organization.id,
+            name='',
+        )
+        no_env.add_project(self.project)
+        no_env.save()
+
+        result = serialize(self.project, self.user, ProjectSummarySerializer())
+
+        assert result['id'] == six.text_type(self.project.id)
+        assert result['name'] == self.project.name
+        assert result['slug'] == self.project.slug
+        assert result['firstEvent'] == self.project.first_event
         assert 'releases' in result['features']
-        assert result['platform'] == project.platform
+        assert result['platform'] == self.project.platform
 
         assert result['latestDeploys'] == {
-            'production': {'dateFinished': date, 'version': release.version}
+            'production': {'dateFinished': self.date, 'version': self.release.version}
         }
-        assert result['latestRelease'] == serialize(release)
+        assert result['latestRelease'] == serialize(self.release)
+        assert result['environments'] == ['production', 'staging']
 
 
 class ProjectWithOrganizationSerializerTest(TestCase):
