commit 137c176dadfdea39368c50be5559817af5a7a74b
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Aug 21 17:35:44 2017 -0700

    dev: restore autopep8

diff --git a/.vscode/settings.json b/.vscode/settings.json
index b4bd03c95d..9f3c62b6c7 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -34,7 +34,7 @@
 
     "python.linting.pylintEnabled": false,
     "python.linting.flake8Enabled": true,
-    "python.formatting.provider": "yapf",
+    "python.formatting.provider": "autopep8",
     // https://github.com/DonJayamanne/pythonVSCode/issues/992
     "python.formatting.yapfArgs": ["--style", "${workspaceRoot}/setup.cfg"],
     "python.pythonPath": "${env.WORKON_HOME}/sentry/bin/python",
diff --git a/setup.cfg b/setup.cfg
index 35bc13389d..5cbfbdecaf 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -14,14 +14,14 @@ exclude = .git,*/south_migrations/*,node_modules/*,src/sentry/static/sentry/vend
 [bdist_wheel]
 python-tag = py27
 
-[yapf]
-based_on_style = pep8
-blank_line_before_nested_class_or_def = false
-blank_line_before_class_docstring = false
-coalesce_brackets = false
-column_limit = 100
-dedent_closing_brackets = true
-each_dict_entry_on_separate_line = true
-indent_dictionary_value = false
-split_before_dict_set_generator = false
-split_arguments_when_comma_terminated = false
+[pep8]
+max-line-length = 100
+# W690 is wrong (e.g. it causes functools.reduce to be imported, which is not compat with Python 3)
+# E700 isnt that important
+# E701 isnt that important
+# E711 could be incorrect
+# E712 could be incorrect
+# E721 says "always use isinstance" which is not the same as type()
+ignore = W690,E701,E70,E711,E721
+aggressive = 1
+exclude = */south_migrations/*
diff --git a/setup.py b/setup.py
index 2127dd8404..f50e96a463 100755
--- a/setup.py
+++ b/setup.py
@@ -37,12 +37,15 @@ from setuptools import setup, find_packages
 from setuptools.command.sdist import sdist as SDistCommand
 from setuptools.command.develop import develop as DevelopCommand
 
-ROOT = os.path.realpath(os.path.join(os.path.dirname(sys.modules['__main__'].__file__)))
+ROOT = os.path.realpath(os.path.join(os.path.dirname(
+    sys.modules['__main__'].__file__)))
 
 # Add Sentry to path so we can import distutils
 sys.path.insert(0, os.path.join(ROOT, 'src'))
 
-from sentry.utils.distutils import (BuildAssetsCommand, BuildIntegrationDocsCommand)
+from sentry.utils.distutils import (
+    BuildAssetsCommand, BuildIntegrationDocsCommand
+)
 
 # The version of sentry
 VERSION = '8.20.0.dev0'
@@ -60,11 +63,11 @@ for m in ('multiprocessing', 'billiard'):
 IS_LIGHT_BUILD = os.environ.get('SENTRY_LIGHT_BUILD') == '1'
 
 dev_requires = [
+    'autopep8',
     'Babel',
     'flake8>=2.6,<2.7',
     'pycodestyle>=2.0,<2.1',
     'isort>=4.2.2,<4.3.0',
-    'yapf==0.16.2',
 ]
 
 tests_require = [
@@ -84,6 +87,7 @@ tests_require = [
     'responses<0.6.2',  # 0.6.2 has a bug that causes our tests to fail.
 ]
 
+
 install_requires = [
     'botocore<1.5.71',
     'boto3>=1.4.1,<1.4.6',
@@ -106,6 +110,7 @@ install_requires = [
     'honcho>=0.7.0,<0.8.0',
     'kombu==3.0.35',
     'lxml>=3.4.1',
+
     'ipaddress>=1.0.16,<1.1.0',
     'libsourcemap>=0.7.2,<0.8.0',
     'loremipsum>=1.0.5,<1.1.0',
@@ -158,6 +163,7 @@ class SentrySDistCommand(SDistCommand):
 
 
 class SentryBuildCommand(BuildCommand):
+
     def run(self):
         BuildCommand.run(self)
         if not IS_LIGHT_BUILD:
@@ -166,6 +172,7 @@ class SentryBuildCommand(BuildCommand):
 
 
 class SentryDevelopCommand(DevelopCommand):
+
     def run(self):
         DevelopCommand.run(self)
         if not IS_LIGHT_BUILD:
@@ -181,6 +188,7 @@ cmdclass = {
     'build_integration_docs': BuildIntegrationDocsCommand,
 }
 
+
 setup(
     name='sentry',
     version=VERSION,
@@ -206,12 +214,17 @@ setup(
         'console_scripts': [
             'sentry = sentry.runner:main',
         ],
-        'flake8.extension': [],
+        'flake8.extension': [
+        ],
     },
     classifiers=[
-        'Framework :: Django', 'Intended Audience :: Developers',
-        'Intended Audience :: System Administrators', 'Operating System :: POSIX :: Linux',
-        'Programming Language :: Python :: 2', 'Programming Language :: Python :: 2.7',
-        'Programming Language :: Python :: 2 :: Only', 'Topic :: Software Development'
+        'Framework :: Django',
+        'Intended Audience :: Developers',
+        'Intended Audience :: System Administrators',
+        'Operating System :: POSIX :: Linux',
+        'Programming Language :: Python :: 2',
+        'Programming Language :: Python :: 2.7',
+        'Programming Language :: Python :: 2 :: Only',
+        'Topic :: Software Development'
     ],
 )
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
index 379441fb17..99d6a5bb9f 100644
--- a/src/sentry/lint/engine.py
+++ b/src/sentry/lint/engine.py
@@ -12,6 +12,7 @@ dependencies such as flake8/pep8.
 """
 from __future__ import absolute_import
 
+
 import os
 import sys
 import subprocess
@@ -43,11 +44,8 @@ def get_files(path):
 
 
 def get_modified_files(path):
-    return [
-        s
-        for s in check_output(['git', 'diff-index', '--cached', '--name-only', 'HEAD'])
-        .split('\n') if s
-    ]
+    return [s for s in check_output(
+        ['git', 'diff-index', '--cached', '--name-only', 'HEAD']).split('\n') if s]
 
 
 def get_files_for_list(file_list):
@@ -67,14 +65,20 @@ def get_files_for_list(file_list):
 def get_js_files(file_list=None):
     if file_list is None:
         file_list = ['tests/js', 'src/sentry/static/sentry/app']
-    return [x for x in get_files_for_list(file_list) if x.endswith(('.js', '.jsx'))]
+    return [
+        x for x in get_files_for_list(file_list)
+        if x.endswith(('.js', '.jsx'))
+    ]
     return file_list
 
 
 def get_python_files(file_list=None):
     if file_list is None:
         file_list = ['src', 'tests']
-    return [x for x in get_files_for_list(file_list) if x.endswith('.py')]
+    return [
+        x for x in get_files_for_list(file_list)
+        if x.endswith('.py')
+    ]
 
 
 def py_lint(file_list):
@@ -89,7 +93,8 @@ def py_lint(file_list):
 
 def js_lint(file_list=None):
 
-    project_root = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir)
+    project_root = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir,
+                                os.pardir)
     eslint_path = os.path.join(project_root, 'node_modules', '.bin', 'eslint')
 
     if not os.path.exists(eslint_path):
@@ -102,9 +107,8 @@ def js_lint(file_list=None):
 
     has_errors = False
     if js_file_list:
-        status = Popen(
-            [eslint_path, '--config', eslint_config, '--ext', '.jsx', '--fix'] + js_file_list
-        ).wait()
+        status = Popen([eslint_path, '--config', eslint_config, '--ext', '.jsx', '--fix']
+                       + js_file_list).wait()
         has_errors = status != 0
 
     return has_errors
@@ -125,19 +129,14 @@ def yarn_check(file_list):
         return False
 
     if 'package.json' in file_list and 'yarn.lock' not in file_list:
-        echo(
-            style(
-                """
+        echo(style("""
 Warning: package.json modified without accompanying yarn.lock modifications.
 
 If you updated a dependency/devDependency in package.json, you must run `yarn install` to update the lockfile.
 
 To skip this check, run:
 
-$ SKIP_YARN_CHECK=1 git commit [options]""",
-                fg='yellow'
-            )
-        )
+$ SKIP_YARN_CHECK=1 git commit [options]""", fg='yellow'))
         return True
 
     return False
@@ -148,14 +147,13 @@ def js_format(file_list=None):
     We only format JavaScript code as part of this pre-commit hook. It is not part
     of the lint engine.
     """
-    project_root = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir)
-    prettier_path = os.path.join(project_root, 'node_modules', '.bin', 'prettier')
+    project_root = os.path.join(os.path.dirname(
+        __file__), os.pardir, os.pardir, os.pardir)
+    prettier_path = os.path.join(
+        project_root, 'node_modules', '.bin', 'prettier')
 
     if not os.path.exists(prettier_path):
-        echo(
-            '[sentry.lint] Skipping JavaScript formatting because prettier is not installed.',
-            err=True
-        )
+        echo('[sentry.lint] Skipping JavaScript formatting because prettier is not installed.', err=True)
         return False
 
     # Get Prettier version from package.json
@@ -163,39 +161,42 @@ def js_format(file_list=None):
     package_json_path = os.path.join(project_root, 'package.json')
     with open(package_json_path) as package_json:
         try:
-            package_version = json.load(package_json)['devDependencies']['prettier']
+            package_version = json.load(package_json)[
+                'devDependencies']['prettier']
         except KeyError:
             echo('!! Prettier missing from package.json', err=True)
             return False
 
-    prettier_version = subprocess.check_output([prettier_path, '--version']).rstrip()
+    prettier_version = subprocess.check_output(
+        [prettier_path, '--version']).rstrip()
     if prettier_version != package_version:
         echo(
-            '[sentry.lint] Prettier is out of date: {} (expected {}). Please run `yarn install`.'.
-            format(prettier_version, package_version),
-            err=True
-        )
+            '[sentry.lint] Prettier is out of date: {} (expected {}). Please run `yarn install`.'.format(
+                prettier_version,
+                package_version),
+            err=True)
         return False
 
     js_file_list = get_js_files(file_list)
-    return run_formatter(
-        [
-            prettier_path, '--write', '--single-quote', '--bracket-spacing=false',
-            '--print-width=90', '--jsx-bracket-same-line=true'
-        ], js_file_list
-    )
+    return run_formatter([prettier_path,
+                          '--write',
+                          '--single-quote',
+                          '--bracket-spacing=false',
+                          '--print-width=90',
+                          '--jsx-bracket-same-line=true'],
+                         js_file_list)
 
 
 def py_format(file_list=None):
     try:
-        __import__('yapf')
+        __import__('autopep8')
     except ImportError:
-        echo('[sentry.lint] Skipping Python autoformat because yapf is not installed.', err=True)
+        echo('[sentry.lint] Skipping Python autoformat because autopep8 is not installed.', err=True)
         return False
 
     py_file_list = get_python_files(file_list)
 
-    return run_formatter(['yapf', '--in-place', '-p'], py_file_list)
+    return run_formatter(['autopep8', '--in-place', '-j0'], py_file_list)
 
 
 def run_formatter(cmd, file_list, prompt_on_changes=True):
@@ -225,11 +226,10 @@ def run_formatter(cmd, file_list, prompt_on_changes=True):
                 secho('Stage this patch and continue? [Y/n] ', bold=True)
                 if fp.readline().strip().lower() != 'y':
                     echo(
-                        '[sentry.lint] Aborted! Changes have been applied but not staged.',
-                        err=True
-                    )
+                        '[sentry.lint] Aborted! Changes have been applied but not staged.', err=True)
                     sys.exit(1)
-        status = subprocess.Popen(['git', 'update-index', '--add'] + file_list).wait()
+        status = subprocess.Popen(
+            ['git', 'update-index', '--add'] + file_list).wait()
         has_errors = status != 0
     return has_errors
 
@@ -239,7 +239,10 @@ def run(file_list=None, format=True, lint=True, js=True, py=True, yarn=True):
     old_sysargv = sys.argv
 
     try:
-        sys.argv = [os.path.join(os.path.dirname(__file__), os.pardir, os.pardir, os.pardir)]
+        sys.argv = [
+            os.path.join(os.path.dirname(__file__),
+                         os.pardir, os.pardir, os.pardir)
+        ]
         results = []
 
         # packages
