commit c9d49e2e4074007fff25ef8aeaff1b876ccc789d
Author: Alex Viscreanu <alexandru.viscreanu@kiwi.com>
Date:   Wed Aug 28 13:31:23 2019 +0200

    feat(workflow): Add availability matches for tag rules

diff --git a/src/sentry/rules/conditions/tagged_event.py b/src/sentry/rules/conditions/tagged_event.py
index 07a48bb4a3..c1ae49afb6 100644
--- a/src/sentry/rules/conditions/tagged_event.py
+++ b/src/sentry/rules/conditions/tagged_event.py
@@ -14,6 +14,8 @@ class MatchType(object):
     ENDS_WITH = "ew"
     CONTAINS = "co"
     NOT_CONTAINS = "nc"
+    IS_SET = "is"
+    NOT_SET = "ns"
 
 
 MATCH_CHOICES = OrderedDict(
@@ -24,6 +26,8 @@ MATCH_CHOICES = OrderedDict(
         (MatchType.ENDS_WITH, "ends with"),
         (MatchType.CONTAINS, "contains"),
         (MatchType.NOT_CONTAINS, "does not contain"),
+        (MatchType.IS_SET, "is set"),
+        (MatchType.NOT_SET, "is not set"),
     ]
 )
 
@@ -49,50 +53,69 @@ class TaggedEventCondition(EventCondition):
         match = self.get_option("match")
         value = self.get_option("value")
 
-        if not (key and match and value):
+        if not (key and match):
             return False
 
-        value = value.lower()
         key = key.lower()
 
         tags = (
+            k
+            for gen in (
+                (k.lower() for k, v in event.tags),
+                (tagstore.get_standardized_key(k) for k, v in event.tags),
+            )
+            for k in gen
+        )
+
+        if match == MatchType.IS_SET:
+            return key in tags
+
+        elif match == MatchType.NOT_SET:
+            return key not in tags
+
+        if not value:
+            return False
+
+        value = value.lower()
+
+        values = (
             v.lower()
             for k, v in event.tags
             if k.lower() == key or tagstore.get_standardized_key(k) == key
         )
 
         if match == MatchType.EQUAL:
-            for t_value in tags:
+            for t_value in values:
                 if t_value == value:
                     return True
             return False
 
         elif match == MatchType.NOT_EQUAL:
-            for t_value in tags:
+            for t_value in values:
                 if t_value == value:
                     return False
             return True
 
         elif match == MatchType.STARTS_WITH:
-            for t_value in tags:
+            for t_value in values:
                 if t_value.startswith(value):
                     return True
             return False
 
         elif match == MatchType.ENDS_WITH:
-            for t_value in tags:
+            for t_value in values:
                 if t_value.endswith(value):
                     return True
             return False
 
         elif match == MatchType.CONTAINS:
-            for t_value in tags:
+            for t_value in values:
                 if value in t_value:
                     return True
             return False
 
         elif match == MatchType.NOT_CONTAINS:
-            for t_value in tags:
+            for t_value in values:
                 if value in t_value:
                     return False
             return True
diff --git a/tests/sentry/rules/conditions/test_tagged_event.py b/tests/sentry/rules/conditions/test_tagged_event.py
index 7ee2cc494d..2aff12dca1 100644
--- a/tests/sentry/rules/conditions/test_tagged_event.py
+++ b/tests/sentry/rules/conditions/test_tagged_event.py
@@ -88,3 +88,20 @@ class TaggedEventConditionTest(RuleTestCase):
             data={"match": MatchType.NOT_CONTAINS, "key": "logger", "value": "bar.foo"}
         )
         self.assertPasses(rule, event)
+
+    def test_is_set(self):
+        event = self.get_event()
+
+        rule = self.get_rule(data={"match": MatchType.IS_SET, "key": "logger"})
+        self.assertPasses(rule, event)
+
+        rule = self.get_rule(data={"match": MatchType.IS_SET, "key": "missing"})
+        self.assertDoesNotPass(rule, event)
+
+    def test_is_not_set(self):
+        event = self.get_event()
+        rule = self.get_rule(data={"match": MatchType.NOT_SET, "key": "logger"})
+        self.assertDoesNotPass(rule, event)
+
+        rule = self.get_rule(data={"match": MatchType.NOT_SET, "key": "missing"})
+        self.assertPasses(rule, event)
