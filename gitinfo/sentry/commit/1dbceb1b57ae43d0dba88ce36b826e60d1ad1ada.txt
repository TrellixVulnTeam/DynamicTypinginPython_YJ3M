commit 1dbceb1b57ae43d0dba88ce36b826e60d1ad1ada
Author: Daniel Griesser <daniel.griesser.86@gmail.com>
Date:   Wed Nov 21 13:27:19 2018 +0100

    feat: Use user_agent parsing for all events (#10679)
    
    * feat: Use refactored normalization for contexts in javascript plugin
    
    * feat: Add timing metrics + sample rate to normalize
    
    * fix: Add additional flag to not trigger db query
    
    * Update src/sentry/event_manager.py
    
    Co-Authored-By: HazAT <daniel.griesser.86@gmail.com>
    
    * ref: Add more tests

diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index 3362dfd1d8..1853c10b39 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -11,7 +11,8 @@ import os
 import re
 import six
 import jsonschema
-
+import random
+import time
 
 from datetime import datetime, timedelta
 from collections import OrderedDict
@@ -21,7 +22,7 @@ from django.utils import timezone
 from django.utils.encoding import force_bytes, force_text
 from hashlib import md5
 
-from sentry import buffer, eventtypes, eventstream, features, tsdb, filters
+from sentry import buffer, eventtypes, eventstream, features, tsdb, filters, options
 from sentry.constants import (
     CLIENT_RESERVED_ATTRS, LOG_LEVELS, LOG_LEVELS_MAP, DEFAULT_LOG_LEVEL,
     DEFAULT_LOGGER_NAME, MAX_CULPRIT_LENGTH, VALID_PLATFORMS, MAX_TAG_VALUE_LENGTH
@@ -63,6 +64,7 @@ from sentry.utils.safe import safe_execute, trim, trim_dict, get_path
 from sentry.utils.strings import truncatechars
 from sentry.utils.geo import rust_geoip
 from sentry.utils.validators import is_float
+from sentry.utils.contexts_normalization import normalize_user_agent
 from sentry.stacktraces import normalize_in_app
 
 
@@ -691,6 +693,18 @@ class EventManager(object):
                 if ex is not None and 'mechanism' in ex:
                     normalize_mechanism_meta(ex['mechanism'], sdk_info)
 
+        # Please note that we eventually remove this check after we validated that it
+        # doesn't impact the load. Ultimately all events should be parsed for a UA.
+        # The check if `SENTRY_PARSE_USER_AGENT` is set needs to be there to not
+        # trigger a query by trying to fetch the sample rate from the options / db.
+        if (getattr(settings, 'SENTRY_PARSE_USER_AGENT', False) and
+                random.random() <
+                options.get('event-normalization.parse-user-agent-sample-rate')):
+            start_time = time.time()
+            normalize_user_agent(data)
+            ms = int((time.time() - start_time) * 1000)
+            metrics.timing('events.normalize.user_agent.duration', ms)
+
         # If there is no User ip_addres, update it either from the Http interface
         # or the client_ip of the request.
         is_public = self._auth and self._auth.is_public
diff --git a/src/sentry/lang/javascript/plugin.py b/src/sentry/lang/javascript/plugin.py
index 17b16bc547..5d8ddee140 100644
--- a/src/sentry/lang/javascript/plugin.py
+++ b/src/sentry/lang/javascript/plugin.py
@@ -1,9 +1,8 @@
 from __future__ import absolute_import, print_function
 
-from ua_parser.user_agent_parser import Parse
-
 from sentry.plugins import Plugin2
 from sentry.stacktraces import find_stacktraces_in_data
+from sentry.utils.contexts_normalization import normalize_user_agent
 
 from .processor import JavaScriptStacktraceProcessor
 from .errormapping import rewrite_exception
@@ -15,7 +14,7 @@ def preprocess_event(data):
     translate_exception(data)
     fix_culprit(data)
     if data.get('platform') == 'javascript':
-        inject_device_data(data)
+        normalize_user_agent(data)
     generate_modules(data)
     return data
 
@@ -42,87 +41,6 @@ def fix_culprit(data):
     data['culprit'] = generate_culprit(data)
 
 
-def parse_user_agent(data):
-    http = data.get('request')
-    if not http:
-        return None
-
-    headers = http.get('headers')
-    if not headers:
-        return None
-
-    for key, value in headers:
-        if key != 'User-Agent':
-            continue
-        ua = Parse(value)
-        if not ua:
-            continue
-        return ua
-    return None
-
-
-def _get_version(user_agent):
-    return '.'.join(
-        value for value in [
-            user_agent['major'],
-            user_agent['minor'],
-            user_agent.get('patch'),
-        ] if value
-    ) or None
-
-
-def inject_browser_context(data, user_agent):
-    ua = user_agent['user_agent']
-    try:
-        if ua['family'] == 'Other':
-            return
-        data['contexts']['browser'] = {
-            'name': ua['family'],
-            'version': _get_version(ua),
-        }
-    except KeyError:
-        pass
-
-
-def inject_os_context(data, user_agent):
-    ua = user_agent['os']
-    try:
-        if ua['family'] == 'Other':
-            return
-        data['contexts']['os'] = {
-            'name': ua['family'],
-            'version': _get_version(ua),
-        }
-    except KeyError:
-        pass
-
-
-def inject_device_context(data, user_agent):
-    ua = user_agent['device']
-    try:
-        if ua['family'] == 'Other':
-            return
-        data['contexts']['device'] = {
-            'family': ua['family'],
-            'model': ua['model'],
-            'brand': ua['brand'],
-        }
-    except KeyError:
-        pass
-
-
-def inject_device_data(data):
-    user_agent = parse_user_agent(data)
-    if not user_agent:
-        return
-
-    data.setdefault('contexts', {})
-
-    inject_browser_context(data, user_agent)
-    inject_os_context(data, user_agent)
-    inject_device_context(data, user_agent)
-
-
 class JavascriptPlugin(Plugin2):
     can_disable = False
 
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index c555c5049a..712c208644 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -151,3 +151,6 @@ register('kafka-publisher.max-event-size', default=100000)
 
 # Event Stream
 register('eventstream.kafka.send-post_process-task', type=Bool, default=True)
+
+# Event Normalization
+register('event-normalization.parse-user-agent-sample-rate', default=0.0)
diff --git a/src/sentry/utils/contexts_normalization.py b/src/sentry/utils/contexts_normalization.py
index b4e270d3ce..ab24e0981d 100644
--- a/src/sentry/utils/contexts_normalization.py
+++ b/src/sentry/utils/contexts_normalization.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 import re
 
+from ua_parser.user_agent_parser import Parse
+
 # Environment.OSVersion (GetVersionEx) or RuntimeInformation.OSDescription, on Windows
 _windows_re = re.compile('^(Microsoft )?Windows (NT )?(?P<version>\d+\.\d+\.\d+).*$')
 # Environment.OSVersion or RuntimeInformation.OSDescription (uname)
@@ -66,3 +68,90 @@ def normalize_runtime(data):
             version = version_map.get(build, None)
             if version is not None:
                 data['version'] = version
+
+
+def _get_version(user_agent):
+    return '.'.join(
+        value for value in [
+            user_agent['major'],
+            user_agent['minor'],
+            user_agent.get('patch'),
+        ] if value
+    ) or None
+
+
+def _parse_user_agent(data):
+    http = data.get('request')
+    if not http:
+        return None
+
+    headers = http.get('headers')
+    if not headers:
+        return None
+
+    try:
+        for key, value in headers:
+            if key != 'User-Agent':
+                continue
+            ua = Parse(value)
+            if not ua:
+                continue
+            return ua
+    except ValueError:
+        pass
+    return None
+
+
+def _inject_browser_context(data, user_agent):
+    ua = user_agent['user_agent']
+    try:
+        if ua['family'] == 'Other':
+            return
+        if data.get('contexts', {}).get('browser', None) is None:
+            data['contexts']['browser'] = {
+                'name': ua['family'],
+                'version': _get_version(ua),
+            }
+    except KeyError:
+        pass
+
+
+def _inject_os_context(data, user_agent):
+    ua = user_agent['os']
+    try:
+        if ua['family'] == 'Other':
+            return
+        if data.get('contexts', {}).get('os', None) is None:
+            data['contexts']['os'] = {
+                'name': ua['family'],
+                'version': _get_version(ua),
+            }
+    except KeyError:
+        pass
+
+
+def _inject_device_context(data, user_agent):
+    ua = user_agent['device']
+    try:
+        if ua['family'] == 'Other':
+            return
+        if data.get('contexts', {}).get('device', None) is None:
+            data['contexts']['device'] = {
+                'family': ua['family'],
+                'model': ua['model'],
+                'brand': ua['brand'],
+            }
+    except KeyError:
+        pass
+
+
+def normalize_user_agent(data):
+    user_agent = _parse_user_agent(data)
+    if not user_agent:
+        return
+
+    data.setdefault('contexts', {})
+
+    _inject_browser_context(data, user_agent)
+    _inject_os_context(data, user_agent)
+    _inject_device_context(data, user_agent)
diff --git a/tests/sentry/utils/test_contexts_normalization.py b/tests/sentry/utils/test_contexts_normalization.py
index 83449d7fa2..81e1bcefb1 100644
--- a/tests/sentry/utils/test_contexts_normalization.py
+++ b/tests/sentry/utils/test_contexts_normalization.py
@@ -1,5 +1,9 @@
 from __future__ import absolute_import
-from sentry.utils.contexts_normalization import normalize_os, normalize_runtime
+from sentry.utils.contexts_normalization import (
+    normalize_os,
+    normalize_runtime,
+    normalize_user_agent
+)
 from sentry.testutils import TestCase
 
 
@@ -48,7 +52,8 @@ class NormalizeOsTests(TestCase):
         assert data['name'] == 'Windows'
         assert data['version'] == '6.2.9200'
 
-    # RuntimeInformation.OSDescription on Windows 10 (CoreCLR 2.0+, .NET Framework 4.7.1+, Mono 5.4+)
+    # RuntimeInformation.OSDescription on Windows 10 (CoreCLR 2.0+, .NET
+    # Framework 4.7.1+, Mono 5.4+)
     def test_windows_10(self):
         data = {'raw_description': 'Microsoft Windows 10.0.16299'}
         normalize_os(data)
@@ -83,7 +88,8 @@ class NormalizeOsTests(TestCase):
         assert data['name'] == 'Darwin'
         assert data['kernel_version'] == '17.5.0'
 
-    # RuntimeInformation.OSDescription on Windows Subsystem for Linux (Ubuntu) (CoreCLR 2.0+, Mono 5.4+)
+    # RuntimeInformation.OSDescription on Windows Subsystem for Linux (Ubuntu)
+    # (CoreCLR 2.0+, Mono 5.4+)
     def test_wsl_ubuntu(self):
         data = {'raw_description': 'Linux 4.4.0-43-Microsoft #1-Microsoft Wed Dec 31 14:42:53 PST 2014'}
         normalize_os(data)
@@ -107,3 +113,108 @@ class NormalizeOsTests(TestCase):
         assert 'version' not in data
         assert 'kernel_version' not in data
         assert 'raw_description' not in data
+
+
+class NormalizeUserAgentTests(TestCase):
+    def setUp(self):
+        self.data = {'request':
+                     {'headers': [
+                         [
+                             'User-Agent',
+                             'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'
+                         ]
+                     ]}
+                     }
+
+    def test_no_headers(self):
+        self.data = {'request': {}}
+        normalize_user_agent(self.data)
+        assert 'contexts' not in self.data
+
+    def test_headers_but_no_ua(self):
+        self.data = {'request': {'headers': [['UA', 'a']]}}
+        normalize_user_agent(self.data)
+        assert 'contexts' not in self.data
+
+    def test_headers_wrong_format(self):
+        self.data = {'request': {'headers': ['UA', 'a']}}
+        normalize_user_agent(self.data)
+        assert 'contexts' not in self.data
+
+    def test_broken_ua(self):
+        self.data = {'request':
+                     {'headers': [
+                         [
+                             'User-Agent',
+                             'xx'
+                         ]
+                     ]}
+                     }
+        normalize_user_agent(self.data)
+        assert self.data['contexts'] == {}
+
+    def test_partial_browser_ua(self):
+        self.data = {'request':
+                     {'headers': [
+                         [
+                             'User-Agent',
+                             'Mozilla/5.0  Version/12.0 Mobile/15E148 Safari/604.1'
+                         ]
+                     ]}
+                     }
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Safari'
+        assert self.data['contexts']['browser']['version'] == '12.0'
+        assert 'os' not in self.data['contexts']
+        assert 'device' not in self.data['contexts']
+
+    def test_browser_device_os_parsed(self):
+        self.data = {'request':
+                     {'headers': [
+                         [
+                             'User-Agent',
+                             'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1'
+                         ]
+                     ]}
+                     }
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Mobile Safari'
+        assert self.data['contexts']['browser']['version'] == '12.0'
+        assert self.data['contexts']['os']['name'] == 'iOS'
+        assert self.data['contexts']['os']['version'] == '12.1'
+        assert self.data['contexts']['device']['brand'] == 'Apple'
+        assert self.data['contexts']['device']['family'] == 'iPhone'
+        assert self.data['contexts']['device']['model'] == 'iPhone'
+
+    def test_browser_already_set(self):
+        self.data['contexts'] = {'browser': {'name': 'IE', 'version': '6'}}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'IE'
+        assert self.data['contexts']['browser']['version'] == '6'
+        assert self.data['contexts']['os']['name'] == 'Mac OS X'
+        assert self.data['contexts']['os']['version'] == '10.13.4'
+
+    def test_os_already_set(self):
+        self.data['contexts'] = {'os': {'name': 'C64', 'version': '1337'}}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Chrome'
+        assert self.data['contexts']['browser']['version'] == '66.0.3359'
+        assert self.data['contexts']['os']['name'] == 'C64'
+        assert self.data['contexts']['os']['version'] == '1337'
+
+    def test_device_already_set(self):
+        self.data = {'request':
+                     {'headers': [
+                         [
+                             'User-Agent',
+                             'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1'
+                         ]
+                     ]}
+                     }
+        self.data['contexts'] = {'device': {'brand': 'TI Calculator'}}
+        normalize_user_agent(self.data)
+        assert self.data['contexts']['browser']['name'] == 'Mobile Safari'
+        assert self.data['contexts']['browser']['version'] == '12.0'
+        assert self.data['contexts']['os']['name'] == 'iOS'
+        assert self.data['contexts']['os']['version'] == '12.1'
+        assert self.data['contexts']['device']['brand'] == 'TI Calculator'
