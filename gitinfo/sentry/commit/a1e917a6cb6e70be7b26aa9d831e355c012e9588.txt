commit a1e917a6cb6e70be7b26aa9d831e355c012e9588
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Dec 6 19:57:54 2015 -0800

    Some initial framing for org dashboard

diff --git a/src/sentry/api/endpoints/organization_activity.py b/src/sentry/api/endpoints/organization_activity.py
index e31f602b33..46c6b98959 100644
--- a/src/sentry/api/endpoints/organization_activity.py
+++ b/src/sentry/api/endpoints/organization_activity.py
@@ -16,7 +16,7 @@ class OrganizationActivityEndpoint(OrganizationMemberEndpoint):
                     is_active=True,
                 ).values('team')
             )
-        ).select_related('project', 'user')
+        ).select_related('project', 'group', 'user')
 
         return self.paginate(
             request=request,
diff --git a/src/sentry/api/serializers/models/activity.py b/src/sentry/api/serializers/models/activity.py
index fc12c8f5b4..1fb0520642 100644
--- a/src/sentry/api/serializers/models/activity.py
+++ b/src/sentry/api/serializers/models/activity.py
@@ -36,18 +36,27 @@ class OrganizationActivitySerializer(ActivitySerializer):
             item_list, user,
         )
 
+        group_list = list(set([i.group for i in item_list if i.group]))
+        groups = dict(zip(
+            [g.id for g in group_list],
+            serialize(group_list, user)
+        ))
+
+        project_list = list(set([i.project for i in item_list]))
         projects = dict(zip(
-            item_list,
-            serialize([i.project for i in item_list], user)
+            [p.id for p in project_list],
+            serialize(project_list, user)
         ))
 
         for item in item_list:
-            attrs[item]['project'] = projects[item]
+            attrs[item]['issue'] = groups[item.group_id] if item.group_id else None
+            attrs[item]['project'] = projects[item.project_id]
         return attrs
 
     def serialize(self, obj, attrs, user):
         context = super(OrganizationActivitySerializer, self).serialize(
             obj, attrs, user,
         )
+        context['issue'] = attrs['issue']
         context['project'] = attrs['project']
         return context
diff --git a/src/sentry/static/sentry/app/components/activity/feed.jsx b/src/sentry/static/sentry/app/components/activity/feed.jsx
new file mode 100644
index 0000000000..44ad185f41
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/feed.jsx
@@ -0,0 +1,122 @@
+import React from 'react';
+
+import ApiMixin from '../../mixins/apiMixin';
+import ActivityItem from './item';
+import LoadingError from '../loadingError';
+import LoadingIndicator from '../loadingIndicator';
+import Pagination from '../pagination';
+import {t} from '../../locale';
+
+const ActivityFeed = React.createClass({
+  mixins: [ApiMixin],
+
+  getDefaultProps() {
+    return {
+      pagination: true,
+      query: {},
+    };
+  },
+
+  getInitialState() {
+    return {
+      itemList: [],
+      loading: true,
+      error: false,
+      pageLinks: null,
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    let location = this.props.location;
+    let nextLocation = nextProps.location;
+    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+      this.remountComponent();
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState(), this.fetchData);
+  },
+
+  fetchData() {
+    let location = this.props.location;
+    this.api.clear();
+    this.api.request(this.props.endpoint, {
+      method: 'GET',
+      query: {
+        cursor: location.query.cursor || '',
+        ...this.props.query,
+      },
+      success: (data, _, jqXHR) => {
+        this.setState({
+          loading: false,
+          error: false,
+          itemList: data,
+          pageLinks: jqXHR.getResponseHeader('Link'),
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true,
+        });
+      }
+    });
+  },
+
+  renderResults() {
+    let body;
+    let {orgId} = this.props.params;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.itemList.length > 0) {
+      body = (
+        <div className="activity-container">
+          <ul className="activity">
+            {this.state.itemList.map((item) => {
+              return (
+                <ActivityItem key={item.id} orgId={orgId} item={item} />
+              );
+            })}
+          </ul>
+        </div>
+      );
+    }
+    else
+      body = (this.props.renderEmpty || this.renderEmpty)();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />;
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return <div className="box empty">{t('Nothing to show here, move along.')}</div>;
+  },
+
+  render() {
+    return (
+      <div>
+        {this.renderResults()}
+        {this.props.pagination && this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks} {...this.props} />
+        }
+      </div>
+    );
+  }
+});
+
+export default ActivityFeed;
diff --git a/src/sentry/static/sentry/app/components/activity/index.jsx b/src/sentry/static/sentry/app/components/activity/index.jsx
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
new file mode 100644
index 0000000000..f6895d9c9d
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -0,0 +1,137 @@
+import React from 'react';
+
+import Duration from '../../components/duration';
+import Gravatar from '../../components/gravatar';
+import MemberListStore from '../../stores/memberListStore';
+import TimeSince from '../../components/timeSince';
+import Version from '../../components/version';
+
+import NoteContainer from './noteContainer';
+import {t, tn} from '../../locale';
+
+
+const ActivityItem = React.createClass({
+  formatProjectActivity(author, item) {
+    let data = item.data;
+    let orgId = this.props.orgId;
+    let project = item.project;
+
+    switch(item.type) {
+      case 'note':
+        return t('%s left a comment', author);
+      case 'set_resolved':
+        return t('%s marked this issue as resolved', author);
+      case 'set_resolved_in_release':
+        return (data.version ?
+          t('%(author)s marked this issue as resolved in %(version)s', {
+            author: author,
+            version: <Version version={data.version} orgId={orgId} projectId={project.slug} />
+          })
+        :
+          t('%s marked this issue as resolved in the upcoming release', author)
+        );
+      case 'set_unresolved':
+        return t('%s marked this issue as unresolved', author);
+      case 'set_muted':
+        if (data.snoozeDuration) {
+          return t('%(author)s snoozed this issue for %(duration)s', {
+            author: author,
+            duration: <Duration seconds={data.snoozeDuration * 60} />
+          });
+        }
+        return t('%s muted this issue', author);
+      case 'set_public':
+        return t('%s made this issue public', author);
+      case 'set_private':
+        return t('%s made this issue private', author);
+      case 'set_regression':
+        return (data.version ?
+          t('%(author)s marked this issue as a regression in %(version)s', {
+            author: author,
+            version: <Version version={data.version} orgId={orgId} projectId={project.slug} />
+          })
+        :
+          t('%s marked this issue as a regression', author)
+        );
+      case 'create_issue':
+        return t('created an issue on %(provider)s titled %(title)s', {
+          provider: data.provider,
+          title: <a href={data.location}>{data.title}</a>
+        });
+      case 'first_seen':
+        return t('%s first saw this issue', author);
+      case 'assigned':
+        let assignee;
+        if (data.assignee === item.user.id) {
+          assignee = 'themselves';
+          return t('%s assigned this event to themselves', author);
+        } else {
+          assignee = MemberListStore.getById(data.assignee);
+          if (assignee.email) {
+            return t('%(author)s assigned this event to %(assignee)s', {
+              author: author,
+              assignee: assignee.email
+            });
+          } else {
+            return t('%s assigned this event to an unknown user', author);
+          }
+        }
+        return t('%(author)s assigned this event to %(assignee)s', {
+          author: author,
+          assignee: assignee.email
+        });
+      case 'unassigned':
+        return t('%s unassigned this issue', author);
+      case 'merge':
+        return tn('%2$s merged %1$d issue into this isssue',
+                  '%2$s merged %1$d issues into this isssue',
+                  data.issues.length,
+                  author);
+      case 'release':
+        return t('%(author)s released version %(version)s of %(project)s', {
+          author: author,
+          project: project.name,
+          version: <Version version={data.version} orgId={orgId} projectId={project.slug} />
+        });
+      default:
+        return ''; // should never hit (?)
+    }
+  },
+
+  render() {
+    let item = this.props.item;
+    let issue = item.issue;
+
+    let avatar = (item.user ?
+      <Gravatar email={item.user.email} size={64} className="avatar" /> :
+      <div className="avatar sentry"><span className="icon-sentry-logo"></span></div>);
+
+    let author = {
+      name: item.user ? item.user.name : 'Sentry',
+      avatar: avatar,
+    };
+
+    if (item.type === 'note') {
+      return (
+        <NoteContainer group={issue} item={item} author={author} />
+      );
+    } else {
+      return (
+        <li className="activity-item">
+          <TimeSince date={item.dateCreated} />
+          <div className="activity-item-content">
+            {this.formatProjectActivity(
+              <span>
+                {author.avatar}
+                <span className="activity-author">{author.name}</span>
+              </span>,
+              item
+            )}
+          </div>
+        </li>
+      );
+    }
+  },
+});
+
+export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/views/groupActivity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/groupActivity/note.jsx
rename to src/sentry/static/sentry/app/components/activity/note.jsx
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/groupActivity/noteContainer.jsx
rename to src/sentry/static/sentry/app/components/activity/noteContainer.jsx
diff --git a/src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
similarity index 100%
rename from src/sentry/static/sentry/app/views/groupActivity/noteInput.jsx
rename to src/sentry/static/sentry/app/components/activity/noteInput.jsx
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 839ad8b3c3..2b7e6d1671 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -36,6 +36,7 @@ const HomeSidebar = React.createClass({
       <div>
         <h6 className="nav-header">{t('Organization')}</h6>
         <ul className="nav nav-stacked">
+          <ListLink to={`/organizations/${orgId}/dashboard/`}>{t('Dashboard')}</ListLink>
           <ListLink to={`/${orgId}/`} isActive={() => {
             // return true if path matches /slug-name/
             return /^\/[^\/]+\/$/.test(this.context.location.pathname);
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index c6f5956781..f922153cdd 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -16,6 +16,7 @@ import GroupUserReports from './views/groupUserReports';
 import MyIssuesAssignedToMe from './views/myIssues/assignedToMe';
 import MyIssuesBookmarked from './views/myIssues/bookmarked';
 import MyIssuesViewed from './views/myIssues/viewed';
+import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationStats from './views/organizationStats';
@@ -48,7 +49,6 @@ function appendTrailingSlash(nextState, replaceState) {
 
 let routes = (
   <Route path="/" component={errorHandler(App)}>
-
     <Route path="/manage/" component={errorHandler(Admin)}>
       <IndexRoute component={errorHandler(AdminOverview)} />
       <Route path="organizations/" component={errorHandler(AdminOrganizations)} />
@@ -61,6 +61,7 @@ let routes = (
     <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
       <IndexRoute component={errorHandler(OrganizationTeams)} />
 
+      <Route path="/organizations/:orgId/dashboard/" component={errorHandler(OrganizationDashboard)} />
       <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
       <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
       <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 3b1ab7bfdd..188832c271 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -8,8 +8,8 @@ import TimeSince from '../../components/timeSince';
 import ConfigStore from '../../stores/configStore';
 import Version from '../../components/version';
 
-import NoteContainer from './noteContainer';
-import NoteInput from './noteInput';
+import NoteContainer from '../../components/activity/noteContainer';
+import NoteInput from '../../components/activity/noteInput';
 import {t, tn} from '../../locale';
 
 
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
new file mode 100644
index 0000000000..b876914bb0
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
@@ -0,0 +1,101 @@
+import React from 'react';
+import {Link} from 'react-router';
+
+import ActivityFeed from '../components/activity/feed';
+import GroupStore from '../stores/groupStore';
+import IssueList from '../components/issueList';
+import OrganizationHomeContainer from '../components//organizations/homeContainer';
+
+const AssignedIssues = React.createClass({
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/`;
+  },
+
+  getViewMoreLink() {
+    return `/organizations/${this.props.params.orgId}/issues/assigned/`;
+  },
+
+  render() {
+    return (
+      <div>
+        <div className="pull-right">
+          <Link className="btn btn-sm btn-default" to={this.getViewMoreLink()}>View more</Link>
+        </div>
+        <h3>Assigned</h3>
+        <IssueList endpoint={this.getEndpoint()} query={{
+          statsPeriod: this.props.statsPeriod,
+          per_page: this.props.pageSize,
+        }} pagination={false} {...this.props} />
+      </div>
+    );
+  },
+});
+
+const NewIssues = React.createClass({
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/issues/new/`;
+  },
+
+  render() {
+    return (
+      <div>
+        <h3>New</h3>
+        <IssueList endpoint={this.getEndpoint()} query={{
+          statsPeriod: this.props.statsPeriod,
+          per_page: this.props.pageSize,
+        }} pagination={false} {...this.props} />
+      </div>
+    );
+  },
+});
+
+
+const Activity = React.createClass({
+  getEndpoint() {
+    return `/organizations/${this.props.params.orgId}/activity/`;
+  },
+
+  render() {
+    return (
+      <div>
+        <h3>Activity</h3>
+        <ActivityFeed endpoint={this.getEndpoint()} query={{
+          per_page: 20,
+        }} pagination={false} {...this.props} />
+      </div>
+    );
+  },
+});
+
+
+const OrganizationDashboard = React.createClass({
+  getDefaultProps() {
+    return {
+      statsPeriod: '24h',
+      pageSize: 5,
+    };
+  },
+
+  componentWillUnmount() {
+    GroupStore.reset();
+  },
+
+  render() {
+    return (
+      <OrganizationHomeContainer>
+        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        <div className="row">
+          <div className="col-md-8">
+            <AssignedIssues {...this.props} />
+            <NewIssues {...this.props} />
+          </div>
+          <div className="col-md-4">
+            <Activity {...this.props} />
+          </div>
+        </div>
+      </OrganizationHomeContainer>
+    );
+  },
+});
+
+export default OrganizationDashboard;
