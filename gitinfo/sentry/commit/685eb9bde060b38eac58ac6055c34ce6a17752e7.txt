commit 685eb9bde060b38eac58ac6055c34ce6a17752e7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 30 22:06:14 2012 -0700

    Initial work on appearance settings

diff --git a/src/sentry/app.py b/src/sentry/app.py
index ccbee6cf52..3b6c4329bc 100644
--- a/src/sentry/app.py
+++ b/src/sentry/app.py
@@ -8,6 +8,11 @@ sentry.app
 
 from sentry.conf import settings
 from sentry.utils.imports import import_string
+from threading import local
+
+
+class State(local):
+    request = None
 
 
 def get_buffer(path, options):
@@ -15,3 +20,4 @@ def get_buffer(path, options):
     return cls(**options)
 
 buffer = get_buffer(settings.BUFFER, settings.BUFFER_OPTIONS)
+env = State()
diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index 990537e961..856d38e179 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -15,6 +15,8 @@ import urlparse
 from django.http import QueryDict
 from django.utils.translation import ugettext_lazy as _
 
+from sentry.app import env
+from sentry.models import UserOption
 from sentry.web.helpers import render_to_string
 
 
@@ -227,6 +229,15 @@ class Stacktrace(Interface):
                 'vars': context_vars,
             })
 
+        if env.request and env.request.user.is_authenticated():
+            display = UserOption.objects.get_value(
+                user=env.request.user,
+                project=None,
+                key='stacktrace_display',
+            )
+            if display == '2':
+                frames.reverse()
+
         return render_to_string('sentry/partial/interfaces/stacktrace.html', {
             'event': event,
             'frames': frames,
diff --git a/src/sentry/middleware.py b/src/sentry/middleware.py
index 5667e9e258..3b2d4fa051 100644
--- a/src/sentry/middleware.py
+++ b/src/sentry/middleware.py
@@ -1,4 +1,6 @@
+from sentry.app import env
 from sentry.conf import settings
+from sentry.models import UserOption
 from django.core.urlresolvers import reverse
 
 
@@ -7,3 +9,16 @@ class SentryMiddleware(object):
         # HACK: bootstrap some env crud if we havent yet
         if not settings.URL_PREFIX:
             settings.URL_PREFIX = request.build_absolute_uri(reverse('sentry')).strip('/')
+
+        # bind request to env
+        env.request = request
+
+        self.load_user_conf(request)
+
+    def load_user_conf(self, request):
+        if not request.user.is_authenticated():
+            return
+
+        language = UserOption.objects.get_value(user=request.user, project=None, key='language', default=None)
+        if language:
+            request.session['django_language'] = language
diff --git a/src/sentry/templates/sentry/account/appearance.html b/src/sentry/templates/sentry/account/appearance.html
new file mode 100644
index 0000000000..f50fda9597
--- /dev/null
+++ b/src/sentry/templates/sentry/account/appearance.html
@@ -0,0 +1,53 @@
+{% extends "sentry/account/base.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block title %}{% trans "Account Settings" %} | {{ block.super }}{% endblock %}
+
+{% block breadcrumb %}
+    {{ block.super }}
+    <li class="divider">/</li>
+    <li><a href="{% url sentry-account-settings %}">{% trans "Account" %}</a></li>
+{% endblock %}
+
+{% block heading %}
+    {% trans "Account Settings" %}
+{% endblock %}
+
+{% block inner %}
+    <form action="" method="post">
+        {% csrf_token %}
+        {% if form.non_field_errors %}
+            <div class="alert alert-block alert-error">
+                <p>{% trans "There were errors saving your changes:" %}</p>
+                <ul>
+                    {% for error in form.non_field_errors %}
+                        <li>{{ error }}</li>
+                    {% endfor %}
+                </ul>
+            </div>
+        {% endif %}
+
+        <fieldset>
+            <div><legend>{% trans "Events" %}</legend></div>
+
+            {% with form.stacktrace_display as field %}
+                {% include "sentry/partial/_form_field.html" %}
+            {% endwith %}
+        </fieldset>
+
+
+        <fieldset>
+            <div><legend>{% trans "Localization" %}</legend></div>
+
+            {% with form.language as field %}
+                {% include "sentry/partial/_form_field.html" %}
+            {% endwith %}
+        </fieldset>
+
+        <fieldset class="form-actions">
+            <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
+        </fieldset>
+    </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/base.html b/src/sentry/templates/sentry/account/base.html
index 318e640d5b..2a930bb9c4 100644
--- a/src/sentry/templates/sentry/account/base.html
+++ b/src/sentry/templates/sentry/account/base.html
@@ -29,6 +29,7 @@
     <ul class="nav nav-list">
         <li class="nav-header">{% trans "Settings" %}</li>
         <li{% if page == 'settings' %} class="active"{% endif %}><a href="{% url sentry-account-settings %}">{% trans "Account" %}</a></li>
+        <li{% if page == 'appearance' %} class="active"{% endif %}><a href="{% url sentry-account-settings-appearance %}">{% trans "Appearance" %}</a></li>
         <li{% if page == 'notifications' %} class="active"{% endif %}><a href="{% url sentry-account-settings-notifications %}">{% trans "Notifications" %}</a></li>
         <li{% if page == 'identities' %} class="active"{% endif %}><a href="{% url sentry-account-settings-identities %}">{% trans "Identities" %}</a></li>
     </ul>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index fd799fcb7c..e2d0ff3d67 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -46,7 +46,6 @@ class AccountSettingsForm(forms.Form):
     first_name = forms.CharField(required=True, label=_('Name'))
     new_password1 = forms.CharField(label=_('New password'), widget=forms.PasswordInput, required=False)
     new_password2 = forms.CharField(label=_('New password confirmation'), widget=forms.PasswordInput, required=False)
-    language = forms.ChoiceField(label=_('Language'), choices=settings.LANGUAGES)
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -77,6 +76,29 @@ class AccountSettingsForm(forms.Form):
         if commit:
             self.user.save()
 
+        return self.user
+
+
+class AppearanceSettingsForm(forms.Form):
+    language = forms.ChoiceField(label=_('Language'), choices=settings.LANGUAGES, required=False)
+    stacktrace_display = forms.ChoiceField(label=_('Stacktrace display'), choices=(
+        ('', 'Default'),
+        ('1', 'Most recent call last'),
+        ('2', 'Most recent call first'),
+    ), required=False)
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(AppearanceSettingsForm, self).__init__(*args, **kwargs)
+
+    def save(self, commit=True):
+        # if self.cleaned_data['new_password2']:
+        #     self.user.set_password(self.cleaned_data['new_password1'])
+        # self.user.first_name = self.cleaned_data['first_name']
+        # self.user.email = self.cleaned_data['email']
+        # if commit:
+        #     self.user.save()
+
         # Save user language
         UserOption.objects.set_value(
             user=self.user,
@@ -85,4 +107,12 @@ class AccountSettingsForm(forms.Form):
             value=self.cleaned_data['language'],
         )
 
+        # Save stacktrace options
+        UserOption.objects.set_value(
+            user=self.user,
+            project=None,
+            key='stacktrace_display',
+            value=self.cleaned_data['stacktrace_display'],
+        )
+
         return self.user
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index 637eb23c12..2c12aacd6a 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -7,14 +7,17 @@ sentry.web.frontend.accounts
 """
 from crispy_forms.helper import FormHelper
 from django.conf import settings as dj_settings
+from django.contrib import messages
 from django.core.context_processors import csrf
 from django.core.urlresolvers import reverse
 from django.http import HttpResponseRedirect
 from django.views.decorators.csrf import csrf_protect
 
+from sentry.models import UserOption
 from sentry.plugins import plugins
 from sentry.web.decorators import login_required
-from sentry.web.forms.accounts import AccountSettingsForm, NotificationSettingsForm
+from sentry.web.forms.accounts import AccountSettingsForm, NotificationSettingsForm, \
+  AppearanceSettingsForm
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers
 from sentry.utils.safe import safe_execute
@@ -72,16 +75,11 @@ def settings(request):
     form = AccountSettingsForm(request.user, request.POST or None, initial={
         'email': request.user.email,
         'first_name': request.user.first_name,
-        'language': request.LANGUAGE_CODE,
     })
     if form.is_valid():
         form.save()
-        response = HttpResponseRedirect(reverse('sentry-account-settings') + '?success=1')
-        if hasattr(request, 'session'):
-            request.session['django_language'] = form.cleaned_data['language']
-        else:
-            response.set_cookie(dj_settings.LANGUAGE_COOKIE_NAME, form.cleaned_data['language'])
-        return response
+        messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
+        return HttpResponseRedirect(request.path)
 
     context = csrf(request)
     context.update({
@@ -91,6 +89,28 @@ def settings(request):
     return render_to_response('sentry/account/settings.html', context, request)
 
 
+@csrf_protect
+@login_required
+def appearance_settings(request):
+    options = UserOption.objects.get_all_values(user=request.user, project=None)
+
+    form = AppearanceSettingsForm(request.user, request.POST or None, initial={
+        'language': options.get('language') or request.LANGUAGE_CODE,
+        'stacktrace_display': options.get('stacktrace_display'),
+    })
+    if form.is_valid():
+        form.save()
+        messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
+        return HttpResponseRedirect(request.path)
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'page': 'appearance',
+    })
+    return render_to_response('sentry/account/appearance.html', context, request)
+
+
 @csrf_protect
 @login_required
 def notification_settings(request):
@@ -115,8 +135,8 @@ def notification_settings(request):
         if all(f.is_valid() for f, h in forms):
             for form, helper in forms:
                 form.save()
-            response = HttpResponseRedirect(reverse('sentry-account-settings-notifications') + '?success=1')
-            return response
+            messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
+            return HttpResponseRedirect(request.path)
 
     context = csrf(request)
     context.update({
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index c4af5b0663..d3cf71b115 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -50,8 +50,9 @@ urlpatterns = patterns('',
     url(r'^login-redirect/$', accounts.login_redirect, name='sentry-login-redirect'),
     url(r'^logout/$', accounts.logout, name='sentry-logout'),
     url(r'^account/settings/$', accounts.settings, name='sentry-account-settings'),
-    url(r'^account/settings/notifications/$', accounts.notification_settings, name='sentry-account-settings-notifications'),
+    url(r'^account/settings/appearance/$', accounts.appearance_settings, name='sentry-account-settings-appearance'),
     url(r'^account/settings/identities/$', accounts.list_identities, name='sentry-account-settings-identities'),
+    url(r'^account/settings/notifications/$', accounts.notification_settings, name='sentry-account-settings-notifications'),
 
     # Teams
 
diff --git a/tests/sentry/web/frontend/accounts/__init__.py b/tests/sentry/web/frontend/accounts/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
new file mode 100644
index 0000000000..5403b4b999
--- /dev/null
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -0,0 +1,39 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+from django.contrib.auth.models import User
+from django.core.urlresolvers import reverse
+from sentry.models import UserOption
+
+from tests.base import TestCase
+
+
+class AppearanceSettingsTest(TestCase):
+    def setUp(self):
+        self.user = User(username="admin", email="admin@localhost")
+        self.user.set_password('admin')
+        self.user.save()
+
+    def test_requires_auth(self):
+        resp = self.client.get(reverse('sentry-account-settings-appearance'))
+        self.assertEquals(resp.status_code, 302)
+
+    def test_does_use_template(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.get(reverse('sentry-account-settings-appearance'))
+        self.assertEquals(resp.status_code, 200)
+        self.assertTemplateUsed(resp, 'sentry/account/appearance.html')
+
+    def test_does_save_settings(self):
+        self.client.login(username='admin', password='admin')
+        resp = self.client.post(reverse('sentry-account-settings-appearance'), {
+            'language': 'en',
+            'stacktrace_display': '2',
+        })
+        self.assertEquals(resp.status_code, 302)
+
+        options = UserOption.objects.get_all_values(user=self.user, project=None)
+
+        self.assertEquals(options.get('stacktrace_display'), '2')
+        self.assertEquals(options.get('language'), 'en')
