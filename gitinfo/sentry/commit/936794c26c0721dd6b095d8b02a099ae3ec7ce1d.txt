commit 936794c26c0721dd6b095d8b02a099ae3ec7ce1d
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed May 25 18:59:35 2016 +0200

    Improved in_app detection for cocoa

diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 28b6b49d30..90556988e6 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -11,6 +11,15 @@ from sentry.models.dsymfile import SDK_MAPPING
 
 logger = logging.getLogger(__name__)
 
+APP_BUNDLE_PATHS = (
+    '/var/containers/Bundle/Application/',
+    '/private/var/containers/Bundle/Application/',
+)
+
+NON_APP_FRAMEWORKS = (
+    '/Frameworks/libswiftCore.dylib',
+)
+
 
 def append_error(data, err):
     data.setdefault('errors', []).append(err)
@@ -34,6 +43,19 @@ def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
         }
 
 
+def is_in_app(frame, app_uuid=None):
+    if app_uuid is not None:
+        frame_uuid = frame.get('uuid')
+        if frame_uuid == app_uuid:
+            return True
+    object_name = frame.get('object_name', '')
+    if not object_name.startswith(APP_BUNDLE_PATHS):
+        return False
+    if object_name.endswith(NON_APP_FRAMEWORKS):
+        return False
+    return True
+
+
 def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
                            system=None):
     # TODO:
@@ -49,12 +71,6 @@ def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
     longest_addr = 0
     for frame in reversed(frames):
         fn = frame.get('filename')
-        in_app = False
-
-        if app_uuid is not None:
-            frame_uuid = frame.get('uuid')
-            if frame_uuid == app_uuid:
-                in_app = True
 
         # We only record the offset if we found a symbol but we did not
         # find a line number.  In that case it's the offset in bytes from
@@ -66,7 +82,7 @@ def inject_apple_backtrace(data, frames, diagnosis=None, error=None,
             offset = frame['instruction_addr'] - frame['symbol_addr']
 
         cframe = {
-            'in_app': in_app,
+            'in_app': is_in_app(frame, app_uuid),
             'abs_path': fn,
             'filename': fn and posixpath.basename(fn) or None,
             # This can come back as `None` from the symbolizer, in which
diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index c3d4b5b2b3..0b54a52ad9 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -75,26 +75,33 @@ class Symbolizer(object):
     def __exit__(self, *args):
         return self.symsynd_symbolizer.driver.__exit__(*args)
 
+    def _process_frame(self, frame, img):
+        rv = trim_frame(frame)
+        if img is not None:
+            rv['object_name'] = img['name']
+            rv['uuid'] = img['uuid']
+        return rv
+
     def symbolize_frame(self, frame, system_info=None):
+        img = self.images.get(frame['object_addr'])
+
         # Step one: try to symbolize with cached dsym files.
         new_frame = self.symsynd_symbolizer.symbolize_frame(frame)
         if new_frame is not None:
-            return trim_frame(new_frame)
+            return self._process_frame(new_frame, img)
 
         # If that does not work, look up system symbols.
-        img = self.images.get(frame['object_addr'])
         if img is not None:
             symbol = find_system_symbol(img, frame['instruction_addr'],
                                         system_info)
             if symbol is not None:
                 symbol = demangle_symbol(symbol) or symbol
                 rv = dict(frame, symbol_name=symbol, filename=None,
-                          line=0, column=0, uuid=img['uuid'])
-                return trim_frame(rv)
+                          line=0, column=0, uuid=img['uuid'],
+                          object_name=img['object_name'])
+                return self._process_frame(rv, img)
+
+        return self._process_frame(frame, img)
 
     def symbolize_backtrace(self, backtrace, system_info=None):
-        rv = []
-        for frame in backtrace:
-            new_frame = self.symbolize_frame(frame, system_info)
-            rv.append(new_frame or frame)
-        return rv
+        return [self.symbolize_frame(frm, system_info) for frm in backtrace]
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index cc7b283cdd..d9e609050c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -7,6 +7,13 @@ import TooltipMixin from '../../../mixins/tooltip';
 import FrameVariables from './frameVariables';
 import {t} from '../../../locale';
 
+function trimPackage(pkg) {
+  let pieces = pkg.split(/\//g);
+  let rv = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
+  let match = rv.match(/^(.*?)\.(dylib|so|a)$/);
+  return match && match[1] || rv;
+}
+
 
 const Frame = React.createClass({
   propTypes: {
@@ -131,7 +138,7 @@ const Frame = React.createClass({
 
     if (defined(data.package)) {
       title.push(<span className="within" key="within"> {t('within')} </span>);
-      title.push(<code>{data.package}</code>);
+      title.push(<code title={data.package}>{trimPackage(data.package)}</code>);
     }
 
     if (defined(data.origAbsPath)) {
@@ -230,8 +237,8 @@ const Frame = React.createClass({
     let className = 'stacktrace-table';
     return (
       <div className={className}>
-        <div className="trace-col package">
-          {data.package}
+        <div className="trace-col package" title={data.package}>
+          {trimPackage(data.package)}
         </div>
         <div className="trace-col address">
           {data.instructionAddr}
