commit b693fee69beaa21dfb7ad738187e81879eeda16e
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 26 04:07:22 2011 -0800

    Some initial cleanup and functionality for project management pages

diff --git a/sentry/models.py b/sentry/models.py
index bf41d0ebfb..0d0ab3a313 100644
--- a/sentry/models.py
+++ b/sentry/models.py
@@ -46,7 +46,15 @@ FILTER_KEYS = (
     ('site', _('site')),
 )
 
-logger = logging.getLogger('sentry.errors')
+PERMISSIONS = (
+    ('read_message', 'View events'),
+    ('change_message_status', 'Change event status'),
+    ('add_member', 'Add project members'),
+    ('change_member', 'Change project members'),
+    ('delete_member', 'Delete project members'),
+    ('add_message', 'Store new events'),
+)
+PERMISSIONS_DICT = dict(PERMISSIONS)
 
 
 class Project(Model):
@@ -62,14 +70,7 @@ class ProjectMember(Model):
     is_superuser = models.BooleanField(default=False)
     public_key = models.CharField(max_length=32, unique=True, null=True)
     secret_key = models.CharField(max_length=32, unique=True, null=True)
-    permissions = BitField(flags=(
-        'read_message',
-        'change_message_status',
-        'add_member',
-        'change_member',
-        'delete_member',
-        'add_message',
-    ))
+    permissions = BitField(flags=[p[0] for p in PERMISSIONS])
     date_added = models.DateTimeField(default=datetime.now)
 
     class Meta:
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index a673086b7a..73cf38cf48 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -172,7 +172,6 @@ table.vars td.code { overflow: hidden; }
 table.vars td.code pre { margin-bottom: 0; }
 div.pastebin textarea { padding: 10px; background: #f9f9f9; border-color: #ddd; }
 table.vars { border-collapse: collapse; background:white; margin-bottom: 10px; }
-table tbody td, table tbody th { vertical-align:top; padding:2px 3px; }
 table.meta th { text-align: right; white-space: nowrap; }
 table.vars thead th { padding:3px 6px 3px 3px; background:#eee; text-align:left; font-weight:bold; border:1px solid #ddd; border-width: 1px 0; font-size:11px; }
 
@@ -405,33 +404,7 @@ dl.flat dd {
 }
 .login-form table { width: 295px; }
 .login-form td { padding: 2px 0; }
-form table {
-    border: 0;
-    margin: 1em 0;
-    background: inherit;
-}
-form table td { padding: 5px; }
-form .submit { text-align: right; }
-form .has-errors input,
-form .has-errors textarea { border-color: red; }
-form td .errors { color: red; margin-top: 5px; font-size: 0.9em; }
 
-form td textarea {
-    min-height: 250px;
-}
-form td textarea,
-form td input {
-    width: 100%;
-    padding: 3px;
-    border: 1px solid #ccc;
-    -moz-border-radius: 5px;
-    -webkit-border-radius: 5px;
-    border-radius: 5px;
-}
-form td textarea:focus,
-form td input:focus {
-    border-color: #333;
-}
 
 h2 .morelink { text-decoration: none; }
 
diff --git a/sentry/templates/sentry/groups/group_list.html b/sentry/templates/sentry/groups/group_list.html
index d408a4e768..46b6039063 100644
--- a/sentry/templates/sentry/groups/group_list.html
+++ b/sentry/templates/sentry/groups/group_list.html
@@ -43,7 +43,7 @@
             {% endif %}
         </li>
         <li class="dropdown pull-right" data-dropdown="dropdown">
-            <a href="#" class="dropdown-toggle">{% trans "Sort by:" %} {{ sort_label }}</a>
+            <a href="#" class="dropdown-toggle">{% blocktrans with sort_label as label %}Sort by: {{ label }}{% endblocktrans %}</a>
             <ul class="dropdown-menu">
                 <li{% ifequal sort 'priority' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}">{% trans "Priority" %}</a></li>
                 <li{% ifequal sort 'date' %} class="active"{% endifequal %}><a href="?{{ sort_querystring }}&amp;sort=date">{% trans "Last Seen" %}</a></li>
diff --git a/sentry/templates/sentry/projects/list.html b/sentry/templates/sentry/projects/list.html
index 8fa749d01d..28a24a57bc 100644
--- a/sentry/templates/sentry/projects/list.html
+++ b/sentry/templates/sentry/projects/list.html
@@ -12,10 +12,13 @@
 {% endblock %}
 
 {% block main %}
-    <h2>{% trans "Project List" %}</h2>
+    <p>You have access to the following projects:</p>
     <ul>
         {% for project in project_list %}
             <li><a href="{% url sentry-manage-project project.pk %}">{{ project.name }}</a></li>
         {% endfor %}
     </ul>
+    {% if can_create_projects %}
+        <p><a href="{% url sentry-new-project %}">Create a new project</a></p>
+    {% endif %}
 {% endblock %}
diff --git a/sentry/templates/sentry/projects/manage.html b/sentry/templates/sentry/projects/manage.html
index df6eb997e1..a98f3a3901 100644
--- a/sentry/templates/sentry/projects/manage.html
+++ b/sentry/templates/sentry/projects/manage.html
@@ -5,7 +5,7 @@
 {% block title %}{% blocktrans with project.name as name %}Manage Project: {{ name }}{% endblocktrans %} | {{ block.super }}{% endblock %}
 
 {% block heading %}
-    {% trans "Project List" %}
+    {% blocktrans with project.name as name %}Manage Project <small>{{ name }}</small>{% endblocktrans %}
 {% endblock %}
 
 {% block sidebar %}
@@ -18,58 +18,79 @@
 {% endblock %}
 
 {% block main %}
-    <h1>{% blocktrans with project.name as name %}Manage Project: {{ name }}{% endblocktrans %}</h1>
-    <form action="" method="post" style="width: 500px">
-        <div class="module">
-            <h2>{% trans "Project Details" %}</h2>
-            <div class="module-content">
-                {% csrf_token %}
-                <table style="width: 480px">
-                    <colgroup>
-                        <col width="100px"/>
-                        <col/>
-                    </colgroup>
-                    {% for field in form %}
-                        <tr{% if field.errors %} class="has-errors"{% endif %}>
-                            <td>{{ field.label_tag }}</td>
-                            <td>{{ field }}</td>
-                        </tr>
-                    {% endfor %}
-                </table>
-                <p class="submit">
-                    <button type="submit" class="button">{% trans "Save Changes" %}</button>
-                </p>
-            </div>
-        </div>
-        <div class="module">
-            <h2>{% trans "Access" %}</h2>
-            <div class="module-content">
-                <table style="width: 480px">
-                    <colgroup>
-                        <col width="100px"/>
-                        <col/>
-                    </colgroup>
-                    <thead>
-                        <tr>
-                            <th>Username</th>
-                            <th>Access</th>
-                        </tr>
-                    </thead>
-                    <tbody>
-                        <tr>
-                            <td>zeeg</td>
-                            <td><strong>superuser</strong></td>
-                        </tr>
+    <ul class="breadcrumb">
+        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a> <span class="divider">/</span></li>
+        <li class="active">{% trans "Manage Project" %}</li>
+    </ul>
+    <p>Here you can edit project information, as well as control the access list for a project with fine-grained permissions.</p>
+    <hr>
+    {% if request.GET.success %}
+        <div class="alert-message success">Changes to your project were saved successfully.</div>
+    {% else %}
+        {% if form.errors or pm_formset.errors %}
+            <div class="alert-message error">Please correct the errors below.</div>
+        {% endif %}
+    {% endif %}
+    <form class="form-stacked" action="" method="post">
+        {% csrf_token %}
+        <fieldset>
+            <legend>{% trans "Project Details" %}</legend>
+            {% for field in form %}
+                <div class="clearfix{% if field.errors %} error{% endif %}">
+                    {{ field.label_tag }}
+                    <div class="input">{{ field }}</div>
+                    {% if field.help_text %}
+                        <span class="help-block">{{ field.help_text }}</span>
+                    {% endif %}
+                </div>
+            {% endfor %}
+        </fieldset>
+        <fieldset>
+            {{ pm_formset.management_form }}
+            <legend>{% trans "Access" %}</legend>
+            <table class="bordered-table zebra-striped">
+                <colgroup>
+                    <col width="100px"/>
+                    <col/>
+                    <col width="16px"/>
+                </colgroup>
+                <thead>
+                    <tr>
+                        <th>Username</th>
+                        <th>Access</th>
+                        <th>X</th>
+                    </tr>
+                </thead>
+                <tbody>
+                    {% for pm_form in pm_formset %}
                         <tr>
-                            <td>chriskjennings</td>
-                            <td>read_message, submit_message</td>
+                            <td{% if pm_form.errors.user %} class="error"{% endif %}>
+                                {{ pm_form.user }}
+                                {% if pm_form.errors.user %}
+                                    <ul class="unstyled">
+                                        {% for error in pm_form.errors.user %}
+                                            <li>{{ error }}</li>
+                                        {% endfor %}
+                                    </ul>
+                                {% endif %}
+                            </td>
+                            <td>
+                                <div class="clearfix">
+                                    <label>{{ pm_form.is_superuser }} Superuser (all permissions)</label>
+                                </div>
+                                {{ pm_form.permissions }}
+                            </td>
+                            <td>
+                                {{ pm_form.id }}
+                                {{ pm_form.DELETE }}
+                            </td>
                         </tr>
-                    </tbody>
-                </table>
-                <p class="submit">
-                    <button type="submit" class="button">{% trans "Save Changes" %}</button>
-                </p>
-            </div>
-        </div>
+                    {% endfor %}
+                </tbody>
+            </table>
+        </fieldset>
+        <p class="actions">
+            <button type="submit" class="btn primary">{% trans "Save Changes" %}</button>
+        </p>
     </form>
 {% endblock %}
diff --git a/sentry/templates/sentry/projects/new.html b/sentry/templates/sentry/projects/new.html
new file mode 100644
index 0000000000..c281d91e09
--- /dev/null
+++ b/sentry/templates/sentry/projects/new.html
@@ -0,0 +1,36 @@
+{% extends "sentry/projects/manage.html" %}
+
+{% load i18n %}
+
+{% block title %}{% trans "New Project" %} | {{ block.super }}{% endblock %}
+
+{% block heading %}
+    {% blocktrans with project.name as name %}New Project{% endblocktrans %}
+{% endblock %}
+
+{% block main %}
+    <ul class="breadcrumb">
+        <li><a href="{% url sentry-project-list %}">{% trans "Projects" %}</a> <span class="divider">/</span></li>
+        <li class="active">{% trans "New Project" %}</li>
+    </ul>
+    <p>Use this page to create a new project within Sentry. Once done, you'll be able to add members (whether they're system or actual users), as well as configure your client to send messages to this project.</p>
+    <hr>
+    <form class="form-stacked" action="" method="post">
+        {% csrf_token %}
+        <fieldset>
+            <legend>{% trans "Project Details" %}</legend>
+            {% for field in form %}
+                <div class="clearfix{% if field.errors %} error{% endif %}">
+                    {{ field.label_tag }}
+                    <div class="input">{{ field }}</div>
+                    {% if field.help_text %}
+                        <span class="help-block">{{ field.help_text }}</span>
+                    {% endif %}
+                </div>
+            {% endfor %}
+        </fieldset>
+        <div class="actions">
+            <button type="submit" class="btn primary">{% trans "Save Changes" %}</button>
+        </div>
+    </form>
+{% endblock %}
diff --git a/sentry/web/decorators.py b/sentry/web/decorators.py
index 88b558ba18..9bd4609640 100644
--- a/sentry/web/decorators.py
+++ b/sentry/web/decorators.py
@@ -5,6 +5,7 @@ from sentry.conf import settings
 from sentry.models import Project
 from sentry.web.helpers import get_project_list, render_to_response, get_login_url
 
+
 def can_manage(perm_or_func=None):
     """
     Tests and transforms project_id for permissions based on the requesting user. Passes
@@ -48,6 +49,7 @@ def can_manage(perm_or_func=None):
         return _wrapped
     return wrapped
 
+
 def login_required(func):
     def wrapped(request, *args, **kwargs):
         if not settings.PUBLIC:
@@ -59,3 +61,19 @@ def login_required(func):
     wrapped.__doc__ = func.__doc__
     wrapped.__name__ = func.__name__
     return wrapped
+
+
+def permission_required(perm):
+    def wrapped(func):
+        def _wrapped(request, *args, **kwargs):
+            if not request.user.is_authenticated():
+                return HttpResponseRedirect(get_login_url())
+            if not request.user.has_perm('sentry.can_view'):
+                return render_to_response('sentry/missing_permissions.html', status=400)
+            if not request.user.has_perm(perm):
+                return render_to_response('sentry/missing_permissions.html', status=400)
+            return func(request, *args, **kwargs)
+        _wrapped.__doc__ = func.__doc__
+        _wrapped.__name__ = func.__name__
+        return _wrapped
+    return wrapped
diff --git a/sentry/web/forms.py b/sentry/web/forms.py
index dd6152921a..5c3ea11dc2 100644
--- a/sentry/web/forms.py
+++ b/sentry/web/forms.py
@@ -1,14 +1,136 @@
+from bitfield import BitHandler
+from itertools import chain
+
 from django import forms
+from django.contrib.auth.models import User
+from django.utils.encoding import force_unicode
+from django.utils.html import conditional_escape
+from django.utils.safestring import mark_safe
 
-from sentry.models import Project
+from sentry.models import Project, ProjectMember, PERMISSIONS
 from sentry.interfaces import Http
 
+
+class CheckboxSelectMultiple(forms.CheckboxSelectMultiple):
+    """
+    This is identical to Django's builtin widget, except that
+    it renders as <ul.inputs-list>. Would be great if we didn't
+    have to create this stupid code, but Django widgets are not
+    flexible.
+    """
+    def render(self, name, value, attrs=None, choices=()):
+        if value is None:
+            value = []
+        has_id = attrs and 'id' in attrs
+        final_attrs = self.build_attrs(attrs, name=name)
+        output = [u'<ul class="inputs-list">']
+        # Normalize to strings
+        str_values = set([force_unicode(v) for v in value])
+        for i, (option_value, option_label) in enumerate(chain(self.choices, choices)):
+            # If an ID attribute was given, add a numeric index as a suffix,
+            # so that the checkboxes don't all have the same ID attribute.
+            if has_id:
+                final_attrs = dict(final_attrs, id='%s_%s' % (attrs['id'], i))
+                label_for = u' for="%s"' % final_attrs['id']
+            else:
+                label_for = ''
+
+            cb = forms.CheckboxInput(final_attrs, check_test=lambda value: value in str_values)
+            option_value = force_unicode(option_value)
+            rendered_cb = cb.render(name, option_value)
+            option_label = conditional_escape(force_unicode(option_label))
+            output.append(u'<li><label%s>%s %s</label></li>' % (label_for, rendered_cb, option_label))
+        output.append(u'</ul>')
+        return mark_safe(u'\n'.join(output))
+
+
+class BitFieldCheckboxSelectMultiple(CheckboxSelectMultiple):
+    def render(self, name, value, attrs=None, choices=()):
+        if value is not None:
+            value = [k for k, v in value if v]
+        return super(BitFieldCheckboxSelectMultiple, self).render(
+          name, value, attrs=attrs, choices=choices)
+
+    def _has_changed(self, initial, data):
+        if initial is None:
+            initial = []
+        if data is None:
+            data = []
+        if initial != data:
+            return True
+        initial_set = set([force_unicode(value) for value in initial])
+        data_set = set([force_unicode(value) for value in data])
+        return data_set != initial_set
+
+
+class UserField(forms.CharField):
+    class widget(forms.widgets.TextInput):
+        def render(self, name, value, attrs=None):
+            if not attrs:
+                attrs = {}
+            if 'placeholder' not in attrs:
+                attrs['placeholder'] = 'username'
+            if isinstance(value, int):
+                value = unicode(User.objects.get(pk=value))
+            return super(UserField.widget, self).render(name, value, attrs)
+
+    def clean(self, value):
+        value = super(UserField, self).clean(value)
+        if not value:
+            return None
+        try:
+            return User.objects.get(username=value)
+        except User.DoesNotExist:
+            raise forms.ValidationError(u'invalid user name')
+
+
+class NewProjectForm(forms.ModelForm):
+    class Meta:
+        fields = ('name',)
+        model = Project
+
+
 class EditProjectForm(forms.ModelForm):
     class Meta:
         fields = ('name',)
         model = Project
 
 
+class ProjectMemberForm(forms.ModelForm):
+    project = forms.ModelChoiceField(queryset=Project.objects.all(), widget=forms.HiddenInput())
+    user = UserField()
+    permissions = forms.MultipleChoiceField(choices=PERMISSIONS, widget=BitFieldCheckboxSelectMultiple(), required=False)
+    is_superuser = forms.BooleanField(required=False)
+
+    class Meta:
+        fields = ('is_superuser', 'permissions', 'user')
+        model = ProjectMember
+
+    # def __init__(self, project, *args, **kwargs):
+    #     self.project = project
+    #     super(ProjectMemberForm, self).__init__(*args, **kwargs)
+
+    def clean_user(self):
+        value = self.cleaned_data['user']
+        if not value:
+            return None
+
+        # if self.project.member_set.filter(user=value).exists():
+        #     raise forms.ValidationError('User already a member of project')
+
+        return value
+
+    def clean_permissions(self):
+        value = self.cleaned_data['permissions']
+        if not value:
+            return 0
+
+        result = BitHandler(0, ProjectMember.permissions.keys())
+        for k in value:
+            setattr(result, k, True)
+        return int(result)
+
+
 class ReplayForm(forms.Form):
     url = forms.URLField()
     method = forms.ChoiceField(choices=((k, k) for k in Http.METHODS))
diff --git a/sentry/web/frontend/generic.py b/sentry/web/frontend/generic.py
index 77718ccb58..881b516f0d 100644
--- a/sentry/web/frontend/generic.py
+++ b/sentry/web/frontend/generic.py
@@ -10,7 +10,6 @@ from sentry.web.helpers import get_project_list, render_to_response
 @login_required
 def dashboard(request):
     project_list = get_project_list(request.user)
-    print project_list
     if len(project_list) == 1:
         return HttpResponseRedirect(reverse('sentry', kwargs={'project_id': project_list.keys()[0]}))
     return render_to_response('sentry/dashboard.html', {
diff --git a/sentry/web/frontend/projects.py b/sentry/web/frontend/projects.py
index 8e3fb28997..266ea0a8c1 100644
--- a/sentry/web/frontend/projects.py
+++ b/sentry/web/frontend/projects.py
@@ -1,7 +1,16 @@
+from functools import partial
+
 from django.core.context_processors import csrf
+from django.core.urlresolvers import reverse
+from django.forms.models import modelformset_factory
+from django.http import HttpResponseRedirect
+from django.views.decorators.csrf import csrf_protect
 
-from sentry.web.decorators import login_required, can_manage
-from sentry.web.forms import EditProjectForm
+from sentry.models import ProjectMember
+from sentry.web.decorators import login_required, can_manage, \
+     permission_required
+from sentry.web.forms import EditProjectForm, NewProjectForm, \
+     ProjectMemberForm
 from sentry.web.helpers import render_to_response, get_project_list
 
 
@@ -10,19 +19,72 @@ def project_list(request):
     return render_to_response('sentry/projects/list.html', {
         'project_list': get_project_list(request.user).values(),
         'request': request,
+        'can_create_projects': request.user.has_perm('sentry.add_project'),
     })
 
 
+@permission_required('sentry.add_project')
+@csrf_protect
+def new_project(request):
+    form = NewProjectForm(request.POST or None)
+    if form.is_valid():
+        project = form.save(commit=False)
+        project.owner = request.user
+        project.save()
+
+        project.member_set.create(
+            user=project.owner,
+            is_superuser=True,
+        )
+        return HttpResponseRedirect(reverse('sentry-manage-project', args=[project.pk]))
+
+    context = csrf(request)
+    context.update({
+        'form': form,
+        'project_list': get_project_list(request.user).values(),
+        'request': request,
+    })
+
+    return render_to_response('sentry/projects/new.html', context)
+
+
 @login_required
 @can_manage
+@csrf_protect
 def manage_project(request, project):
-    form = EditProjectForm(request.POST or None, instance=project)
-    if form.is_valid():
-        project = form.save()
+    ProjectMemberFormset = modelformset_factory(
+        model=ProjectMember,
+        form=ProjectMemberForm,
+        extra=1,
+        can_delete=True,
+    )
+
+    pm_formset_kwargs = dict(
+        prefix='pm:',
+        queryset=project.member_set.exclude(user=project.owner),
+    )
+
+    form = EditProjectForm(request.POST or None, instance=project, prefix='p:')
+    pm_formset = ProjectMemberFormset(
+        data=request.POST or None,
+        **pm_formset_kwargs
+    )
+
+    if all([f.is_valid() for f in [form, pm_formset]]):
+        if form.is_valid():
+            project = form.save()
+
+        if pm_formset.is_valid():
+            for instance in pm_formset.save(commit=False):
+                instance.project = project
+                instance.save()
+
+        return HttpResponseRedirect(request.path + '?success=1')
 
     context = csrf(request)
     context.update({
         'form': form,
+        'pm_formset': pm_formset,
         'project': project,
         'project_list': get_project_list(request.user).values(),
         'request': request,
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index bbe01dbd3c..a6fcac5010 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -64,6 +64,7 @@ urlpatterns = patterns('',
     # Management
 
     url(r'^projects$', projects.project_list, name='sentry-project-list'),
+    url(r'^projects/new$', projects.new_project, name='sentry-new-project'),
     url(r'^projects/(?P<project_id>\d+)/edit$', projects.manage_project, name='sentry-manage-project'),
 
     # Global
