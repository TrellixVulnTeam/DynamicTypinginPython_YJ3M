commit 3f008c90ea8292f0088781215f5f271362808e69
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Nov 12 13:23:15 2018 -0800

    feat(event search): Add support for has:<tag> (#10521)

diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 2bc454a04c..fbd4c88024 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -56,13 +56,15 @@ event_search_grammar = Grammar(r"""
 # raw_search must come at the end, otherwise other
 # search_terms will be treated as a raw query
 search          = search_term* raw_search?
-search_term     = space? (time_filter / basic_filter) space?
+search_term     = space? (time_filter / has_filter / basic_filter) space?
 raw_search      = ~r".+$"
 
 # standard key:val filter
 basic_filter    = search_key sep search_value
 # filter specifically for the timestamp
 time_filter     = "timestamp" operator date_format
+# has filter for not null type checks
+has_filter      = "has" sep (search_key / search_value)
 
 search_key      = key / quoted_key
 search_value    = quoted_value / value
@@ -170,17 +172,30 @@ class SearchVisitor(NodeVisitor):
 
     def visit_basic_filter(self, node, children):
         search_key, _, search_value = children
+
+        return SearchFilter(search_key, "=", search_value)
+
+    def visit_has_filter(self, node, children):
+        # the key is has here, which we don't need
+        _, _, (search_key,) = children
+
+        # if it matched search value instead, it's not a valid key
+        if isinstance(search_key, SearchValue):
+            raise InvalidSearchQuery(
+                'Invalid format for "has" search: %s' %
+                (search_key.raw_value,))
+
         return SearchFilter(
-            SearchKey(search_key),
-            "=",
-            SearchValue(search_value),
+            search_key,
+            '!=',
+            SearchValue(''),
         )
 
     def visit_search_key(self, node, children):
-        return children[0]
+        return SearchKey(children[0])
 
     def visit_search_value(self, node, children):
-        return children[0]
+        return SearchValue(children[0])
 
     def visit_value(self, node, children):
         return node.text
diff --git a/tests/sentry/api/test_event_search.py b/tests/sentry/api/test_event_search.py
index f1332e63e6..d00eaa78c4 100644
--- a/tests/sentry/api/test_event_search.py
+++ b/tests/sentry/api/test_event_search.py
@@ -7,7 +7,7 @@ from parsimonious.exceptions import IncompleteParseError
 
 from sentry.api.event_search import (
     convert_endpoint_params, get_snuba_query_args, parse_search_query,
-    SearchFilter, SearchKey, SearchValue
+    InvalidSearchQuery, SearchFilter, SearchKey, SearchValue
 )
 from sentry.testutils import TestCase
 
@@ -204,6 +204,29 @@ class EventSearchTest(TestCase):
             ),
         ]
 
+    def test_parse_search_query_has_tag(self):
+        # unquoted key
+        assert parse_search_query('has:release') == [
+            SearchFilter(
+                key=SearchKey(name='release'),
+                operator='!=',
+                value=SearchValue(raw_value=''),
+            ),
+        ]
+
+        # quoted key
+        assert parse_search_query('has:"hi:there"') == [
+            SearchFilter(
+                key=SearchKey(name='hi:there'),
+                operator='!=',
+                value=SearchValue(raw_value=''),
+            ),
+        ]
+
+        # malformed key
+        with self.assertRaises(InvalidSearchQuery):
+            parse_search_query('has:"hi there"')
+
     def test_get_snuba_query_args(self):
         assert get_snuba_query_args('user.email:foo@example.com release:1.2.1 fruit:apple hello', {
             'project_id': [1, 2, 3],
@@ -242,6 +265,12 @@ class EventSearchTest(TestCase):
             'filter_keys': {},
         }
 
+    def test_get_snuba_query_args_has(self):
+        assert get_snuba_query_args('has:release') == {
+            'filter_keys': {},
+            'conditions': [['tags[sentry:release]', '!=', '']]
+        }
+
     def test_convert_endpoint_params(self):
         assert convert_endpoint_params({
             'project_id': [1, 2, 3],
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index 61a16f5067..0622f90e78 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -404,3 +404,42 @@ class OrganizationEventsTest(APITestCase, SnubaTestCase):
         assert response.status_code == 200, response.content
         assert len(response.data) == 1
         self.assert_events_in_response(response, [event_2.event_id])
+
+    def test_has_tag(self):
+        user = self.create_user()
+        org = self.create_organization()
+        team = self.create_team(organization=org)
+        self.create_member(organization=org, user=user, teams=[team])
+
+        self.login_as(user=user)
+
+        project = self.create_project(organization=org, teams=[team])
+        group = self.create_group(project=project)
+
+        event_1 = self.create_event(
+            'a' * 32, group=group, datetime=self.min_ago, tags={'user': {'email': 'foo@example.com'}}
+        )
+        event_2 = self.create_event(
+            'b' * 32,
+            group=group,
+            datetime=self.min_ago,
+            tags={
+                'example_tag': 'example_value'})
+
+        base_url = reverse(
+            'sentry-api-0-organization-events',
+            kwargs={
+                'organization_slug': org.slug,
+            }
+        )
+
+        response = self.client.get('%s?query=has:user.email' % (base_url,), format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_1.event_id])
+
+        # test custom tag
+        response = self.client.get('%s?query=has:example_tag' % (base_url,), format='json')
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        self.assert_events_in_response(response, [event_2.event_id])
