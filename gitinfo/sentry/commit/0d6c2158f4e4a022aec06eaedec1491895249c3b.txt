commit 0d6c2158f4e4a022aec06eaedec1491895249c3b
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 22 18:24:21 2013 -0700

    Handle remaining integer fields and fix tests

diff --git a/src/sentry/models.py b/src/sentry/models.py
index 4690167206..a79fcf2d71 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -46,7 +46,9 @@ from sentry.signals import buffer_incr_complete, regression_signal
 from sentry.utils.cache import memoize
 from sentry.utils.db import has_trending
 from sentry.utils.http import absolute_uri
-from sentry.utils.models import Model, GzippedDictField, IntegerField, update
+from sentry.utils.models import (
+    Model, GzippedDictField, BoundedIntegerField, BoundedPositiveIntegerField,
+    update)
 from sentry.utils.imports import import_string
 from sentry.utils.safe import safe_execute
 from sentry.utils.strings import truncatechars
@@ -154,7 +156,7 @@ class AccessGroup(Model):
     """
     team = models.ForeignKey(Team)
     name = models.CharField(max_length=64)
-    type = IntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
+    type = BoundedIntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
     managed = models.BooleanField(default=False)
     data = GzippedDictField(blank=True, null=True)
     date_added = models.DateTimeField(default=timezone.now)
@@ -180,7 +182,7 @@ class TeamMember(Model):
     """
     team = models.ForeignKey(Team, related_name="member_set")
     user = models.ForeignKey(django_settings.AUTH_USER_MODEL, related_name="sentry_teammember_set")
-    type = IntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
+    type = BoundedIntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
     date_added = models.DateTimeField(default=timezone.now)
 
     objects = BaseManager()
@@ -210,7 +212,7 @@ class Project(Model):
     team = models.ForeignKey(Team, null=True)
     public = models.BooleanField(default=False)
     date_added = models.DateTimeField(default=timezone.now)
-    status = models.PositiveIntegerField(default=0, choices=(
+    status = BoundedPositiveIntegerField(default=0, choices=(
         (STATUS_VISIBLE, _('Visible')),
         (STATUS_HIDDEN, _('Hidden')),
     ), db_index=True)
@@ -401,7 +403,7 @@ class PendingTeamMember(Model):
     """
     team = models.ForeignKey(Team, related_name="pending_member_set")
     email = models.EmailField()
-    type = IntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
+    type = BoundedIntegerField(choices=MEMBER_TYPES, default=MEMBER_USER)
     date_added = models.DateTimeField(default=timezone.now)
 
     objects = BaseManager()
@@ -448,12 +450,12 @@ class EventBase(Model):
     """
     project = models.ForeignKey(Project, null=True)
     logger = models.CharField(max_length=64, blank=True, default='root', db_index=True)
-    level = models.PositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
+    level = BoundedPositiveIntegerField(choices=settings.LOG_LEVELS, default=logging.ERROR, blank=True, db_index=True)
     message = models.TextField()
     culprit = models.CharField(max_length=200, blank=True, null=True, db_column='view')
     checksum = models.CharField(max_length=32, db_index=True)
     data = GzippedDictField(blank=True, null=True)
-    num_comments = models.PositiveIntegerField(default=0, null=True)
+    num_comments = BoundedPositiveIntegerField(default=0, null=True)
     platform = models.CharField(max_length=64, null=True)
 
     class Meta:
@@ -529,16 +531,16 @@ class Group(EventBase):
     """
     Aggregated message which summarizes a set of Events.
     """
-    status = models.PositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
-    times_seen = models.PositiveIntegerField(default=1, db_index=True)
+    status = BoundedPositiveIntegerField(default=0, choices=STATUS_LEVELS, db_index=True)
+    times_seen = BoundedPositiveIntegerField(default=1, db_index=True)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True)
     first_seen = models.DateTimeField(default=timezone.now, db_index=True)
     resolved_at = models.DateTimeField(null=True, db_index=True)
     # active_at should be the same as first_seen by default
     active_at = models.DateTimeField(null=True, db_index=True)
     time_spent_total = models.FloatField(default=0)
-    time_spent_count = IntegerField(default=0)
-    score = IntegerField(default=0)
+    time_spent_count = BoundedIntegerField(default=0)
+    score = BoundedIntegerField(default=0)
     is_public = models.NullBooleanField(default=False, null=True)
 
     objects = GroupManager()
@@ -771,7 +773,7 @@ class TagKey(Model):
     """
     project = models.ForeignKey(Project)
     key = models.CharField(max_length=32)
-    values_seen = models.PositiveIntegerField(default=0)
+    values_seen = BoundedPositiveIntegerField(default=0)
 
     objects = TagKeyManager()
 
@@ -790,7 +792,7 @@ class TagValue(Model):
     key = models.CharField(max_length=32)
     value = models.CharField(max_length=200)
     data = GzippedDictField(blank=True, null=True)
-    times_seen = models.PositiveIntegerField(default=0)
+    times_seen = BoundedPositiveIntegerField(default=0)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True, null=True)
     first_seen = models.DateTimeField(default=timezone.now, db_index=True, null=True)
 
@@ -815,7 +817,7 @@ class GroupTagKey(Model):
     project = models.ForeignKey(Project, null=True)
     group = models.ForeignKey(Group)
     key = models.CharField(max_length=32)
-    values_seen = models.PositiveIntegerField(default=0)
+    values_seen = BoundedPositiveIntegerField(default=0)
 
     objects = BaseManager()
 
@@ -832,7 +834,7 @@ class GroupTag(Model):
     """
     project = models.ForeignKey(Project, null=True)
     group = models.ForeignKey(Group)
-    times_seen = models.PositiveIntegerField(default=0)
+    times_seen = BoundedPositiveIntegerField(default=0)
     key = models.CharField(max_length=32)
     value = models.CharField(max_length=200)
     last_seen = models.DateTimeField(default=timezone.now, db_index=True, null=True)
@@ -865,9 +867,9 @@ class GroupCountByMinute(Model):
     project = models.ForeignKey(Project, null=True)
     group = models.ForeignKey(Group)
     date = models.DateTimeField(db_index=True)  # normalized to HH:MM:00
-    times_seen = models.PositiveIntegerField(default=0)
+    times_seen = BoundedPositiveIntegerField(default=0)
     time_spent_total = models.FloatField(default=0)
-    time_spent_count = IntegerField(default=0)
+    time_spent_count = BoundedIntegerField(default=0)
 
     objects = BaseManager()
 
@@ -890,9 +892,9 @@ class ProjectCountByMinute(Model):
 
     project = models.ForeignKey(Project, null=True)
     date = models.DateTimeField()  # normalized to HH:MM:00
-    times_seen = models.PositiveIntegerField(default=0)
+    times_seen = BoundedPositiveIntegerField(default=0)
     time_spent_total = models.FloatField(default=0)
-    time_spent_count = IntegerField(default=0)
+    time_spent_count = BoundedIntegerField(default=0)
 
     objects = BaseManager()
 
@@ -905,8 +907,8 @@ class ProjectCountByMinute(Model):
 class SearchDocument(Model):
     project = models.ForeignKey(Project)
     group = models.ForeignKey(Group)
-    total_events = models.PositiveIntegerField(default=1)
-    status = models.PositiveIntegerField(default=0)
+    total_events = BoundedPositiveIntegerField(default=1)
+    status = BoundedPositiveIntegerField(default=0)
     date_added = models.DateTimeField(default=timezone.now)
     date_changed = models.DateTimeField(default=timezone.now)
 
@@ -922,7 +924,7 @@ class SearchToken(Model):
     document = models.ForeignKey(SearchDocument, related_name="token_set")
     field = models.CharField(max_length=64, default='text')
     token = models.CharField(max_length=128)
-    times_seen = models.PositiveIntegerField(default=1)
+    times_seen = BoundedPositiveIntegerField(default=1)
 
     objects = BaseManager()
 
@@ -1022,7 +1024,7 @@ class Activity(Model):
     group = models.ForeignKey(Group, null=True)
     event = models.ForeignKey(Event, null=True)
     # index on (type, ident)
-    type = models.PositiveIntegerField(choices=TYPE)
+    type = BoundedPositiveIntegerField(choices=TYPE)
     ident = models.CharField(max_length=64, null=True)
     # if the user is not set, it's assumed to be the system
     user = models.ForeignKey(django_settings.AUTH_USER_MODEL, null=True)
@@ -1054,7 +1056,7 @@ class Alert(Model):
     message = models.TextField()
     data = GzippedDictField(null=True)
     related_groups = models.ManyToManyField(Group, through='sentry.AlertRelatedGroup', related_name='related_alerts')
-    status = models.PositiveIntegerField(default=0, choices=(
+    status = BoundedPositiveIntegerField(default=0, choices=(
         (STATUS_UNRESOLVED, _('Unresolved')),
         (STATUS_RESOLVED, _('Resolved')),
     ), db_index=True)
diff --git a/src/sentry/utils/models.py b/src/sentry/utils/models.py
index 4fc34065ea..64e1b3614c 100644
--- a/src/sentry/utils/models.py
+++ b/src/sentry/utils/models.py
@@ -140,7 +140,85 @@ def create_or_update(model, using=None, **kwargs):
     return affected, False
 
 
+class BoundedAutoField(models.AutoField):
+    MAX_VALUE = 2147483647
+
+    def get_prep_value(self, value):
+        if value:
+            value = int(value)
+            assert value <= self.MAX_VALUE
+        return super(BoundedAutoField, self).get_prep_value(value)
+
+
+class BoundedIntegerField(models.IntegerField):
+    MAX_VALUE = 2147483647
+
+    def get_prep_value(self, value):
+        if value:
+            value = int(value)
+            assert value <= self.MAX_VALUE
+        return super(BoundedIntegerField, self).get_prep_value(value)
+
+
+class BoundedBigIntegerField(models.BigIntegerField):
+    MAX_VALUE = 9223372036854775807
+
+    def get_prep_value(self, value):
+        if value:
+            value = int(value)
+            assert value <= self.MAX_VALUE
+        return super(BoundedBigIntegerField, self).get_prep_value(value)
+
+
+class BoundedPositiveIntegerField(models.PositiveIntegerField):
+    MAX_VALUE = 2147483647
+
+    def get_prep_value(self, value):
+        if value:
+            value = int(value)
+            assert value <= self.MAX_VALUE
+        return super(BoundedPositiveIntegerField, self).get_prep_value(value)
+
+
+class GzippedDictField(models.TextField):
+    """
+    Slightly different from a JSONField in the sense that the default
+    value is a dictionary.
+    """
+    __metaclass__ = models.SubfieldBase
+
+    def to_python(self, value):
+        if isinstance(value, basestring) and value:
+            try:
+                value = pickle.loads(decompress(value))
+            except Exception, e:
+                logger.exception(e)
+                return {}
+        elif not value:
+            return {}
+        return value
+
+    def get_prep_value(self, value):
+        if not value and self.null:
+            # save ourselves some storage
+            return None
+        return compress(pickle.dumps(value))
+
+    def value_to_string(self, obj):
+        value = self._get_val_from_obj(obj)
+        return self.get_prep_value(value)
+
+    def south_field_triple(self):
+        "Returns a suitable description of this field for South."
+        from south.modelsinspector import introspector
+        field_class = "django.db.models.fields.TextField"
+        args, kwargs = introspector(self)
+        return (field_class, args, kwargs)
+
+
 class Model(models.Model):
+    id = BoundedAutoField(primary_key=True)
+
     class Meta:
         abstract = True
 
@@ -198,51 +276,3 @@ def __model_post_save(instance, **kwargs):
     instance._update_tracked_data()
 
 signals.post_save.connect(__model_post_save)
-
-
-class IntegerField(models.IntegerField):
-    MAX_VALUE = 2147483647
-
-    def to_python(self, value):
-        return int(value)
-
-    def get_prep_value(self, value):
-        assert value <= self.MAX_VALUE
-
-        return int(value)
-
-
-class GzippedDictField(models.TextField):
-    """
-    Slightly different from a JSONField in the sense that the default
-    value is a dictionary.
-    """
-    __metaclass__ = models.SubfieldBase
-
-    def to_python(self, value):
-        if isinstance(value, basestring) and value:
-            try:
-                value = pickle.loads(decompress(value))
-            except Exception, e:
-                logger.exception(e)
-                return {}
-        elif not value:
-            return {}
-        return value
-
-    def get_prep_value(self, value):
-        if not value and self.null:
-            # save ourselves some storage
-            return None
-        return compress(pickle.dumps(value))
-
-    def value_to_string(self, obj):
-        value = self._get_val_from_obj(obj)
-        return self.get_prep_value(value)
-
-    def south_field_triple(self):
-        "Returns a suitable description of this field for South."
-        from south.modelsinspector import introspector
-        field_class = "django.db.models.fields.TextField"
-        args, kwargs = introspector(self)
-        return (field_class, args, kwargs)
diff --git a/tests/sentry/utils/models/tests.py b/tests/sentry/utils/models/tests.py
index 818eb090df..f066b8129d 100644
--- a/tests/sentry/utils/models/tests.py
+++ b/tests/sentry/utils/models/tests.py
@@ -1,7 +1,9 @@
 from __future__ import absolute_import
 
 from django.db import models
-from sentry.utils.models import Model, IntegerField
+from sentry.utils.models import (
+    Model, BoundedIntegerField, BoundedBigIntegerField,
+    BoundedPositiveIntegerField)
 from sentry.testutils import TestCase
 
 
@@ -9,7 +11,9 @@ from sentry.testutils import TestCase
 # assuming it exists in these tests.
 class DummyModel(Model):
     foo = models.CharField(max_length=32)
-    normint = IntegerField(null=True)
+    normint = BoundedIntegerField(null=True)
+    bigint = BoundedBigIntegerField(null=True)
+    posint = BoundedPositiveIntegerField(null=True)
 
 
 class ModelTest(TestCase):
@@ -32,4 +36,14 @@ class ModelTest(TestCase):
         self.assertFalse(inst.has_changed('foo'))
 
     def test_large_int(self):
-        DummyModel.objects.create(normint=9223372036854775807L, foo='bar')
+        with self.assertRaises(AssertionError):
+            DummyModel.objects.create(normint=9223372036854775807L, foo='bar')
+
+        with self.assertRaises(AssertionError):
+            DummyModel.objects.create(id=9223372036854775807L, foo='bar')
+
+        with self.assertRaises(AssertionError):
+            DummyModel.objects.create(bigint=9223372036854775808L, foo='bar')
+
+        with self.assertRaises(AssertionError):
+            DummyModel.objects.create(posint=9223372036854775808L, foo='bar')
