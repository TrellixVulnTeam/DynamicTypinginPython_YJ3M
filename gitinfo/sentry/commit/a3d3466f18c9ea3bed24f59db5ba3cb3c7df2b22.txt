commit a3d3466f18c9ea3bed24f59db5ba3cb3c7df2b22
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu Aug 3 13:19:19 2017 -0700

    add support for github integrations (#5461)
    
    * add model, basic api endpoint for organization installations
    
    * regenerate migration
    
    * add post to org installations endpoint, add tests
    
    * create repos from installation
    
    * get very basic ui added
    
    * fix test
    
    * regenerate migration
    
    * regenerate migration
    
    * support multiple github ids/secrets
    
    * update UI to something somewhat useable
    
    * fix test
    
    * remove app_id, change index to be unique for provider
    
    * improve UI slightly, move some stuff into serializer
    
    * remove todo
    
    * camel case api params
    
    * matt feedback
    
    * possibly get options working
    
    * regenerate migration
    
    * move option registry to plugins
    
    * fix next redirect
    
    * update changes
    
    * add a test for when user doesn't have access to integration
    
    * update models to work for integrations other than github
    
    * get apis and UI working with new integration models
    
    * regenerate migration
    
    * switch up api to make it less crappy, fix tests
    
    * get rid of rogue CHANGES update
    
    * fix the ui to work w new api
    
    * fix a few things to support github integrations
    
    * remove re-added code from bad merge, fix test
    
    * address most feedback, put behind feature flag
    
    * add auth url to integrations page
    
    * add repository integration id index concurrently
    
    * add some tests for provider auth methods to improve coverage
    
    * correct feature flag name in server.py

diff --git a/CHANGES b/CHANGES
index c1658dd101..f897870279 100644
--- a/CHANGES
+++ b/CHANGES
@@ -5,6 +5,12 @@ Version 8.19 (Unreleased)
 - Added lookup methods to constants to get a unique `integration_id` for a given
   event, and to get information (documention url, human readable name) from that id.
 
+Schema Changes
+~~~~~~~~~~~~~~
+
+- Added ``Integration``, ``OrganizationIntegration``, and ``ProjectIntegration`` models
+- Added ``Repository(integration_id)`` column
+
 Version 8.18
 ------------
 
diff --git a/src/sentry/api/endpoints/organization_integrations.py b/src/sentry/api/endpoints/organization_integrations.py
new file mode 100644
index 0000000000..50f8c2c97b
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_integrations.py
@@ -0,0 +1,96 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.provider import ProviderSerializer
+from sentry.exceptions import PluginError
+from sentry.plugins import bindings
+
+
+class IntegrationSerializer(serializers.Serializer):
+    provider = serializers.CharField(max_length=64, required=True)
+    defaultAuthId = serializers.IntegerField(required=False)
+    integrationId = serializers.IntegerField(required=False)
+
+    def validate(self, attrs):
+        if not (attrs.get('defaultAuthId') or attrs.get('integrationId')):
+            raise serializers.ValidationError(
+                'You must either provide a defaultAuthId or an integrationId'
+            )
+        return attrs
+
+
+class OrganizationIntegrationsEndpoint(OrganizationEndpoint):
+    def has_feature(self, request, organization):
+        return features.has(
+            'organizations:integrations-v3',
+            organization=organization,
+            actor=request.user,
+        )
+
+    def get(self, request, organization):
+        if not self.has_feature(request, organization):
+            return Response({'detail': ['You do not have that feature enabled']}, status=400)
+
+        # Right now, this is just repository providers, but in
+        # theory we want it to also work for other types of plugins
+        # in the future
+        return Response(
+            serialize(
+                [
+                    provider_cls(id=provider_id)
+                    for provider_id, provider_cls in bindings.get('repository.provider').all()
+                ],
+                request.user,
+                ProviderSerializer(organization)
+            )
+        )
+
+    def post(self, request, organization):
+        if not self.has_feature(request, organization):
+            return Response({'detail': ['You do not have that feature enabled']}, status=400)
+
+        serializer = IntegrationSerializer(data=request.DATA)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        provider_id = result['provider']
+
+        try:
+            provider_cls = bindings.get('repository.provider').get(provider_id)
+        except KeyError:
+            return Response(
+                {
+                    'error_type': 'validation',
+                }, status=400
+            )
+
+        provider = provider_cls(id=provider_id)
+
+        try:
+            # raise if they're trying to link an auth they
+            # aren't allowed to
+            provider.link_auth(
+                request.user, organization, {
+                    'default_auth_id': result.get('defaultAuthId'),
+                    'integration_id': result.get('integrationId'),
+                }
+            )
+        except PluginError as exc:
+            return Response(
+                {
+                    'error_type': 'validation',
+                    'message': exc.message,
+                }, status=400
+            )
+
+        return Response(
+            serialize(provider, request.user, ProviderSerializer(organization)), status=201
+        )
diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 6fc851f096..9eeb196d27 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -91,6 +91,8 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             feature_list.append('api-keys')
         if features.has('organizations:group-unmerge', obj, actor=user):
             feature_list.append('group-unmerge')
+        if features.has('organizations:integrations-v3', obj, actor=user):
+            feature_list.append('integrations-v3')
 
         if getattr(obj.flags, 'allow_joinleave'):
             feature_list.append('open-membership')
diff --git a/src/sentry/api/serializers/models/provider.py b/src/sentry/api/serializers/models/provider.py
new file mode 100644
index 0000000000..951de1d5f7
--- /dev/null
+++ b/src/sentry/api/serializers/models/provider.py
@@ -0,0 +1,51 @@
+from __future__ import absolute_import
+
+import six
+
+from django.db.models import Q
+
+from collections import defaultdict
+
+from social_auth.models import UserSocialAuth
+
+from sentry.api.serializers import Serializer
+from sentry.models import Integration
+
+
+class ProviderSerializer(Serializer):
+    def __init__(self, organization):
+        self.organization = organization
+
+    def get_attrs(self, item_list, user, *args, **kwargs):
+        integrations = list(Integration.objects.filter(organizations=self.organization))
+        integrations_for_org = defaultdict(list)
+
+        for i in integrations:
+            integrations_for_org[i.provider].append(i)
+
+        auth_ids = [i.default_auth_id for i in integrations if i.default_auth_id is not None]
+
+        social_auths = defaultdict(list)
+        usas = UserSocialAuth.objects.filter(
+            Q(id__in=auth_ids) | Q(user=user),
+        ).select_related('user')
+        for usa in usas:
+            social_auths[usa.provider].append(usa)
+
+        return {
+            p: {
+                'integrations': integrations_for_org[p.id],
+                'social_auths': social_auths[p.id],
+            } for p in item_list
+        }
+
+    def serialize(self, obj, attrs, user):
+        integrations = attrs['integrations']
+        social_auths = attrs['social_auths']
+
+        return {
+            'id': six.text_type(obj.id),
+            'name': obj.name,
+            'auths': obj.get_available_auths(user, self.organization, integrations, social_auths),
+            'authUrl': obj.get_auth_url(user),
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 22be84d086..f58c924766 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -54,6 +54,7 @@ from .endpoints.organization_release_files import OrganizationReleaseFilesEndpoi
 from .endpoints.organization_release_file_details import OrganizationReleaseFileDetailsEndpoint
 from .endpoints.organization_release_commits import OrganizationReleaseCommitsEndpoint
 from .endpoints.organization_repositories import OrganizationRepositoriesEndpoint
+from .endpoints.organization_integrations import OrganizationIntegrationsEndpoint
 from .endpoints.organization_config_repositories import OrganizationConfigRepositoriesEndpoint
 from .endpoints.organization_repository_commits import OrganizationRepositoryCommitsEndpoint
 from .endpoints.organization_repository_details import OrganizationRepositoryDetailsEndpoint
@@ -219,10 +220,12 @@ urlpatterns = patterns(
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/issues/new/$',
         OrganizationIssuesNewEndpoint.as_view(),
-        name='sentry-api-0-organization-issues-new'
     ),
-    url(
-        r'^organizations/(?P<organization_slug>[^\/]+)/members/$',
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/integrations/$',
+        OrganizationIntegrationsEndpoint.as_view(),
+        name='sentry-api-0-organization-integrations'
+    ),
+    url(r'^organizations/(?P<organization_slug>[^\/]+)/members/$',
         OrganizationMemberIndexEndpoint.as_view(),
         name='sentry-api-0-organization-member-index'
     ),
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 164800ad19..dd5abc215b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -293,6 +293,7 @@ AUTHENTICATION_BACKENDS = (
     'sentry.utils.auth.EmailAuthBackend',
     # TODO(dcramer): we can't remove these until we rewrite more of social auth
     'social_auth.backends.github.GithubBackend',
+    'social_auth.backends.github_apps.GithubAppsBackend',
     'social_auth.backends.bitbucket.BitbucketBackend',
     'social_auth.backends.trello.TrelloBackend',
     'social_auth.backends.asana.AsanaBackend',
@@ -319,7 +320,7 @@ SOCIAL_AUTH_USER_MODEL = AUTH_USER_MODEL = 'sentry.User'
 SOCIAL_AUTH_AUTHENTICATION_BACKENDS = (
     'social_auth.backends.github.GithubBackend', 'social_auth.backends.bitbucket.BitbucketBackend',
     'social_auth.backends.trello.TrelloBackend', 'social_auth.backends.asana.AsanaBackend',
-    'social_auth.backends.slack.SlackBackend',
+    'social_auth.backends.slack.SlackBackend', 'social_auth.backends.github_apps.GithubAppsBackend',
 )
 
 SESSION_ENGINE = "django.contrib.sessions.backends.signed_cookies"
@@ -332,6 +333,9 @@ GOOGLE_OAUTH2_CLIENT_SECRET = ''
 GITHUB_APP_ID = ''
 GITHUB_API_SECRET = ''
 
+GITHUB_APPS_APP_ID = ''
+GITHUB_APPS_API_SECRET = ''
+
 TRELLO_API_KEY = ''
 TRELLO_API_SECRET = ''
 
@@ -357,6 +361,7 @@ INITIAL_CUSTOM_USER_MIGRATION = '0108_fix_user'
 # Auth engines and the settings required for them to be listed
 AUTH_PROVIDERS = {
     'github': ('GITHUB_APP_ID', 'GITHUB_API_SECRET'),
+    'github_apps': ('GITHUB_APPS_APP_ID', 'GITHUB_APPS_API_SECRET'),
     'trello': ('TRELLO_API_KEY', 'TRELLO_API_SECRET'),
     'bitbucket': ('BITBUCKET_CONSUMER_KEY', 'BITBUCKET_CONSUMER_SECRET'),
     'asana': ('ASANA_CLIENT_ID', 'ASANA_CLIENT_SECRET'),
@@ -365,6 +370,7 @@ AUTH_PROVIDERS = {
 
 AUTH_PROVIDER_LABELS = {
     'github': 'GitHub',
+    'github_apps': 'GitHub Apps',
     'trello': 'Trello',
     'bitbucket': 'Bitbucket',
     'asana': 'Asana',
@@ -708,6 +714,7 @@ SENTRY_FEATURES = {
     'organizations:sso': True,
     'organizations:callsigns': True,
     'organizations:group-unmerge': False,
+    'organizations:integrations-v3': False,
     'projects:similarity-view': True,
     'projects:global-events': False,
     'projects:plugins': True,
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 0b13fd301f..795681c42c 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -14,6 +14,7 @@ default_manager.add('organizations:callsigns', OrganizationFeature)  # NOQA
 default_manager.add('organizations:repos', OrganizationFeature)  # NOQA
 default_manager.add('organizations:release-commits', OrganizationFeature)  # NOQA
 default_manager.add('organizations:group-unmerge', OrganizationFeature)  # NOQA
+default_manager.add('organizations:integrations-v3', OrganizationFeature)  # NOQA
 default_manager.add('organizations:bitbucket-repos', OrganizationFeature)  # NOQA
 default_manager.add('projects:similarity-view', ProjectFeature)  # NOQA
 default_manager.add('projects:global-events', ProjectFeature)  # NOQA
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
new file mode 100644
index 0000000000..d3fe1636ea
--- /dev/null
+++ b/src/sentry/models/integration.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+from django.db import models, IntegrityError, transaction
+from jsonfield import JSONField
+
+from sentry.db.models import BoundedPositiveIntegerField, FlexibleForeignKey, Model
+
+
+class OrganizationIntegration(Model):
+    __core__ = False
+
+    organization = FlexibleForeignKey('sentry.Organization')
+    integration = FlexibleForeignKey('sentry.Integration')
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_organizationintegration'
+        unique_together = (('organization', 'integration'),)
+
+
+class ProjectIntegration(Model):
+    __core__ = False
+
+    project = FlexibleForeignKey('sentry.Project')
+    integration = FlexibleForeignKey('sentry.Integration')
+    config = JSONField(default=lambda: {})
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_projectintegration'
+        unique_together = (('project', 'integration'),)
+
+
+class Integration(Model):
+    __core__ = False
+
+    organizations = models.ManyToManyField('sentry.Organization',
+                                           related_name='integrations',
+                                           through=OrganizationIntegration)
+    projects = models.ManyToManyField('sentry.Project',
+                                      related_name='integrations',
+                                      through=ProjectIntegration)
+    provider = models.CharField(max_length=64)
+    external_id = models.CharField(max_length=64)
+    config = JSONField(default=lambda: {})
+    name = models.CharField(max_length=200)
+    default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
+
+    class Meta:
+        app_label = 'sentry'
+        db_table = 'sentry_integration'
+        unique_together = (('provider', 'external_id'),)
+
+    def add_organization(self, organization_id):
+        """
+        Add an organization to this integration.
+
+        Returns True if the OrganizationIntegration was created
+        """
+        try:
+            with transaction.atomic():
+                OrganizationIntegration.objects.create(
+                    organization_id=organization_id,
+                    integration_id=self.id,
+                )
+        except IntegrityError:
+            return False
+        else:
+            return True
diff --git a/src/sentry/models/repository.py b/src/sentry/models/repository.py
index f85f07c3e4..cf77dd6b8d 100644
--- a/src/sentry/models/repository.py
+++ b/src/sentry/models/repository.py
@@ -24,6 +24,7 @@ class Repository(Model):
         db_index=True,
     )
     date_added = models.DateTimeField(default=timezone.now)
+    integration_id = BoundedPositiveIntegerField(db_index=True, null=True)
 
     class Meta:
         app_label = 'sentry'
diff --git a/src/sentry/plugins/base/bindings.py b/src/sentry/plugins/base/bindings.py
index b31c539419..412b018cb7 100644
--- a/src/sentry/plugins/base/bindings.py
+++ b/src/sentry/plugins/base/bindings.py
@@ -25,6 +25,9 @@ class ProviderManager(object):
     def get(self, id):
         return self._items[id]
 
+    def all(self):
+        return six.iteritems(self._items)
+
 
 class RepositoryProviderManager(ProviderManager):
     type = providers.RepositoryProvider
diff --git a/src/sentry/plugins/providers/base.py b/src/sentry/plugins/providers/base.py
index 243d1808da..0d1d2d2889 100644
--- a/src/sentry/plugins/providers/base.py
+++ b/src/sentry/plugins/providers/base.py
@@ -6,6 +6,8 @@ from django.core.urlresolvers import reverse
 from rest_framework.response import Response
 from social_auth.models import UserSocialAuth
 
+from sentry.models import Integration, OrganizationIntegration
+
 from sentry.exceptions import InvalidIdentity, PluginError
 
 
@@ -13,6 +15,65 @@ class ProviderMixin(object):
     auth_provider = None
     logger = None
 
+    def link_auth(self, user, organization, data):
+        try:
+            usa = UserSocialAuth.objects.get(
+                user=user,
+                id=data['default_auth_id'],
+                provider=self.auth_provider,
+            )
+        except UserSocialAuth.DoesNotExist:
+            raise PluginError
+
+        integration = Integration.objects.get_or_create(
+            provider=self.auth_provider, external_id=usa.uid, defaults={'default_auth_id': usa.id}
+        )[0]
+        integration.add_organization(organization.id)
+
+    def get_available_auths(self, user, organization, integrations, social_auths, **kwargs):
+        if self.auth_provider is None:
+            return []
+
+        social_auths_by_id = {usa.id: usa for usa in social_auths}
+        linked_social_auths = set()
+
+        auths = []
+        for i in integrations:
+            associated_auth = i.default_auth_id and social_auths_by_id[i.default_auth_id]
+            if associated_auth:
+                linked_social_auths.add(associated_auth.id)
+            auths.append(
+                {
+                    'defaultAuthId': i.default_auth_id,
+                    'user': associated_auth and {
+                        'email': associated_auth.user.email,
+                    },
+                    'externalId': i.external_id,
+                    'integrationId': six.text_type(i.id),
+                    'linked': True,
+                }
+            )
+        auths.extend(
+            [
+                {
+                    'defaultAuthId': sa.id,
+                    'user': {
+                        'email': sa.user.email
+                    },
+                    'externalId': sa.uid,
+                    'integrationId': None,
+                    'linked': False,
+                } for sa in social_auths if sa.id not in linked_social_auths
+            ]
+        )
+        return auths
+
+    def get_auth_url(self, user, **kwargs):
+        if self.auth_provider is None:
+            return
+
+        return reverse('socialauth_associate', args=[self.auth_provider])
+
     def needs_auth(self, user, **kwargs):
         """
         Return ``True`` if the authenticated user needs to associate an auth
@@ -21,6 +82,15 @@ class ProviderMixin(object):
         if self.auth_provider is None:
             return False
 
+        organization = kwargs.get('organization')
+        if organization:
+            has_auth = OrganizationIntegration.objects.filter(
+                integration__provider=self.auth_provider,
+                organization=organization,
+            ).exists()
+            if has_auth:
+                return False
+
         if not user.is_authenticated():
             return True
 
@@ -29,10 +99,26 @@ class ProviderMixin(object):
             provider=self.auth_provider,
         ).exists()
 
-    def get_auth(self, user):
+    def get_auth(self, user, **kwargs):
         if self.auth_provider is None:
             return None
 
+        organization = kwargs.get('organization')
+        if organization:
+            try:
+                auth = UserSocialAuth.objects.get(
+                    id=Integration.objects.filter(
+                        id=OrganizationIntegration.objects.filter(
+                            integration__provider=self.auth_provider,
+                            organization=organization,
+                        ).values_list('integration_id', flat=True)[0],
+                    ).values_list('default_auth_id', flat=True)[0]
+                )
+            except UserSocialAuth.DoesNotExist:
+                pass
+            else:
+                return auth
+
         if not user.is_authenticated():
             return None
 
diff --git a/src/sentry/plugins/providers/dummy/repository.py b/src/sentry/plugins/providers/dummy/repository.py
index 01137d061d..11ec5e3d88 100644
--- a/src/sentry/plugins/providers/dummy/repository.py
+++ b/src/sentry/plugins/providers/dummy/repository.py
@@ -5,6 +5,7 @@ from sentry.plugins.providers.repository import RepositoryProvider
 
 class DummyRepositoryProvider(RepositoryProvider):
     name = 'Example'
+    auth_provider = 'dummy'
 
     def get_config(self):
         return [
diff --git a/src/sentry/south_migrations/0341_auto__add_organizationintegration__add_unique_organizationintegration_.py b/src/sentry/south_migrations/0341_auto__add_organizationintegration__add_unique_organizationintegration_.py
new file mode 100644
index 0000000000..43a5b721e6
--- /dev/null
+++ b/src/sentry/south_migrations/0341_auto__add_organizationintegration__add_unique_organizationintegration_.py
@@ -0,0 +1,3356 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+from sentry.utils.db import is_postgres
+
+
+class Migration(SchemaMigration):
+    def forwards(self, orm):
+        # Adding model 'OrganizationIntegration'
+        db.create_table(
+            'sentry_organizationintegration', (
+                (
+                    'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
+                        primary_key=True
+                    )
+                ), (
+                    'organization',
+                    self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                        to=orm['sentry.Organization']
+                    )
+                ), (
+                    'integration', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                        to=orm['sentry.Integration']
+                    )
+                ),
+            )
+        )
+        db.send_create_signal('sentry', ['OrganizationIntegration'])
+
+        # Adding unique constraint on 'OrganizationIntegration', fields
+        # ['organization', 'integration']
+        db.create_unique('sentry_organizationintegration', ['organization_id', 'integration_id'])
+
+        # Adding model 'Integration'
+        db.create_table(
+            'sentry_integration', (
+                (
+                    'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
+                        primary_key=True
+                    )
+                ), ('provider', self.gf('django.db.models.fields.CharField')(max_length=64)),
+                ('external_id', self.gf('django.db.models.fields.CharField')(max_length=64)),
+                ('config', self.gf('jsonfield.fields.JSONField')(default={})),
+                ('name', self.gf('django.db.models.fields.CharField')(max_length=200)), (
+                    'default_auth_id',
+                    self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
+                        null=True, db_index=True
+                    )
+                ),
+            )
+        )
+        db.send_create_signal('sentry', ['Integration'])
+
+        # Adding unique constraint on 'Integration', fields ['provider', 'external_id']
+        db.create_unique('sentry_integration', ['provider', 'external_id'])
+
+        # Adding model 'ProjectIntegration'
+        db.create_table(
+            'sentry_projectintegration', (
+                (
+                    'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
+                        primary_key=True
+                    )
+                ), (
+                    'project', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                        to=orm['sentry.Project']
+                    )
+                ), (
+                    'integration', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
+                        to=orm['sentry.Integration']
+                    )
+                ), ('config', self.gf('jsonfield.fields.JSONField')(default={})),
+            )
+        )
+        db.send_create_signal('sentry', ['ProjectIntegration'])
+
+        # Adding unique constraint on 'ProjectIntegration', fields ['project', 'integration']
+        db.create_unique('sentry_projectintegration', ['project_id', 'integration_id'])
+
+        # Adding field 'Repository.integration_id'
+        if is_postgres():
+            db.add_column(
+                'sentry_repository',
+                'integration_id',
+                self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(null=True),
+                keep_default=False
+            )
+
+            db.commit_transaction()
+            db.execute(
+                "CREATE INDEX CONCURRENTLY {} ON sentry_repository (integration_id)".format(
+                    db.create_index_name('sentry_repository', ['integration_id']),
+                )
+            )
+            db.start_transaction()
+        else:
+            db.add_column(
+                'sentry_repository',
+                'integration_id',
+                self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
+                    null=True, db_index=True
+                ),
+                keep_default=False
+            )
+
+    def backwards(self, orm):
+        # Removing unique constraint on 'ProjectIntegration', fields ['project', 'integration']
+        db.delete_unique('sentry_projectintegration', ['project_id', 'integration_id'])
+
+        # Removing unique constraint on 'Integration', fields ['provider', 'external_id']
+        db.delete_unique('sentry_integration', ['provider', 'external_id'])
+
+        # Removing unique constraint on 'OrganizationIntegration', fields
+        # ['organization', 'integration']
+        db.delete_unique('sentry_organizationintegration', ['organization_id', 'integration_id'])
+
+        # Deleting model 'OrganizationIntegration'
+        db.delete_table('sentry_organizationintegration')
+
+        # Deleting model 'Integration'
+        db.delete_table('sentry_integration')
+
+        # Deleting model 'ProjectIntegration'
+        db.delete_table('sentry_projectintegration')
+
+        # Deleting field 'Repository.integration_id'
+        db.delete_column('sentry_repository', 'integration_id')
+
+    models = {
+        'sentry.activity': {
+            'Meta': {
+                'object_name': 'Activity'
+            },
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {
+                'null': 'True'
+            }),
+            'datetime':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']",
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'null': 'True'
+                }
+            )
+        },
+        'sentry.apiapplication': {
+            'Meta': {
+                'object_name': 'ApiApplication'
+            },
+            'allowed_origins':
+            ('django.db.models.fields.TextField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'client_id': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'8e36ba930879453c968bc7193a3df5464c005fa6150c406a93996a6aaaa7bd44'",
+                    'unique': 'True',
+                    'max_length': '64'
+                }
+            ),
+            'client_secret': (
+                'sentry.db.models.fields.encrypted.EncryptedTextField', [], {
+                    'default': "'fa59c7cc3dd84364a94950b180c41d3b1625cba0805e47b3821ab8e9e1e0c8e9'"
+                }
+            ),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'homepage_url':
+            ('django.db.models.fields.URLField', [], {
+                'max_length': '200',
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'Deep Magpie'",
+                    'max_length': '64',
+                    'blank': 'True'
+                }
+            ),
+            'owner': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            ),
+            'privacy_url':
+            ('django.db.models.fields.URLField', [], {
+                'max_length': '200',
+                'null': 'True'
+            }),
+            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            ),
+            'terms_url':
+            ('django.db.models.fields.URLField', [], {
+                'max_length': '200',
+                'null': 'True'
+            })
+        },
+        'sentry.apiauthorization': {
+            'Meta': {
+                'unique_together': "(('user', 'application'),)",
+                'object_name': 'ApiAuthorization'
+            },
+            'application': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ApiApplication']",
+                    'null': 'True'
+                }
+            ),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'scope_list': (
+                'sentry.db.models.fields.array.ArrayField', [], {
+                    'of': ('django.db.models.fields.TextField', [], {})
+                }
+            ),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {
+                'default': 'None'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.apigrant': {
+            'Meta': {
+                'object_name': 'ApiGrant'
+            },
+            'application': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ApiApplication']"
+                }
+            ),
+            'code': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'ec23ba0ce354418d8f4313d86a821a20'",
+                    'max_length': '64',
+                    'db_index': 'True'
+                }
+            ),
+            'expires_at': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime(2017, 7, 19, 0, 0)',
+                    'db_index': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'redirect_uri': ('django.db.models.fields.CharField', [], {
+                'max_length': '255'
+            }),
+            'scope_list': (
+                'sentry.db.models.fields.array.ArrayField', [], {
+                    'of': ('django.db.models.fields.TextField', [], {})
+                }
+            ),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {
+                'default': 'None'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.apikey': {
+            'Meta': {
+                'object_name': 'ApiKey'
+            },
+            'allowed_origins':
+            ('django.db.models.fields.TextField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key':
+            ('django.db.models.fields.CharField', [], {
+                'unique': 'True',
+                'max_length': '32'
+            }),
+            'label': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'Default'",
+                    'max_length': '64',
+                    'blank': 'True'
+                }
+            ),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'key_set'",
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'scope_list': (
+                'sentry.db.models.fields.array.ArrayField', [], {
+                    'of': ('django.db.models.fields.TextField', [], {})
+                }
+            ),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {
+                'default': 'None'
+            }),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.apitoken': {
+            'Meta': {
+                'object_name': 'ApiToken'
+            },
+            'application': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ApiApplication']",
+                    'null': 'True'
+                }
+            ),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'expires_at': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime(2017, 8, 18, 0, 0)',
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'refresh_token': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'a7f7c8a15a6c459b8a7c1e5265a26246a39bc3e795214a49b0722d866bcd65dd'",
+                    'max_length': '64',
+                    'unique': 'True',
+                    'null': 'True'
+                }
+            ),
+            'scope_list': (
+                'sentry.db.models.fields.array.ArrayField', [], {
+                    'of': ('django.db.models.fields.TextField', [], {})
+                }
+            ),
+            'scopes': ('django.db.models.fields.BigIntegerField', [], {
+                'default': 'None'
+            }),
+            'token': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'6d92b9477a0b4167bc5b65f0040d33730fec8b03d39c4d9fa8987780c0f92732'",
+                    'unique': 'True',
+                    'max_length': '64'
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.auditlogentry': {
+            'Meta': {
+                'object_name': 'AuditLogEntry'
+            },
+            'actor': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'blank': 'True',
+                    'related_name': "'audit_actors'",
+                    'null': 'True',
+                    'to': "orm['sentry.User']"
+                }
+            ),
+            'actor_key': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ApiKey']",
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'actor_label': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '64',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ip_address': (
+                'django.db.models.fields.GenericIPAddressField', [], {
+                    'max_length': '39',
+                    'null': 'True'
+                }
+            ),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'target_object':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'target_user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'blank': 'True',
+                    'related_name': "'audit_targets'",
+                    'null': 'True',
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.authenticator': {
+            'Meta': {
+                'unique_together': "(('user', 'type'),)",
+                'object_name': 'Authenticator',
+                'db_table': "'auth_authenticator'"
+            },
+            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
+            'created_at':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_used_at': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.authidentity': {
+            'Meta': {
+                'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))",
+                'object_name': 'AuthIdentity'
+            },
+            'auth_provider': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.AuthProvider']"
+                }
+            ),
+            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'last_synced':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'last_verified':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.authprovider': {
+            'Meta': {
+                'object_name': 'AuthProvider'
+            },
+            'config':
+            ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'default_global_access':
+            ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'default_role':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '50'
+            }),
+            'default_teams': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'to': "orm['sentry.Team']",
+                    'symmetrical': 'False',
+                    'blank': 'True'
+                }
+            ),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {
+                'default': '0'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_sync': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']",
+                    'unique': 'True'
+                }
+            ),
+            'provider': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'sync_time':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            })
+        },
+        'sentry.broadcast': {
+            'Meta': {
+                'object_name': 'Broadcast'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'date_expires': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime(2017, 7, 26, 0, 0)',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_active':
+            ('django.db.models.fields.BooleanField', [], {
+                'default': 'True',
+                'db_index': 'True'
+            }),
+            'link': (
+                'django.db.models.fields.URLField', [], {
+                    'max_length': '200',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'message': ('django.db.models.fields.CharField', [], {
+                'max_length': '256'
+            }),
+            'title': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'upstream_id': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '32',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            )
+        },
+        'sentry.broadcastseen': {
+            'Meta': {
+                'unique_together': "(('broadcast', 'user'),)",
+                'object_name': 'BroadcastSeen'
+            },
+            'broadcast': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Broadcast']"
+                }
+            ),
+            'date_seen':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.commit': {
+            'Meta': {
+                'unique_together': "(('repository_id', 'key'),)",
+                'object_name': 'Commit',
+                'index_together': "(('repository_id', 'date_added'),)"
+            },
+            'author': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.CommitAuthor']",
+                    'null': 'True'
+                }
+            ),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'message': ('django.db.models.fields.TextField', [], {
+                'null': 'True'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'repository_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.commitauthor': {
+            'Meta': {
+                'unique_together':
+                "(('organization_id', 'email'), ('organization_id', 'external_id'))",
+                'object_name':
+                'CommitAuthor'
+            },
+            'email': ('django.db.models.fields.EmailField', [], {
+                'max_length': '75'
+            }),
+            'external_id':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '164',
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '128',
+                'null': 'True'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.commitfilechange': {
+            'Meta': {
+                'unique_together': "(('commit', 'filename'),)",
+                'object_name': 'CommitFileChange'
+            },
+            'commit': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Commit']"
+                }
+            ),
+            'filename': ('django.db.models.fields.CharField', [], {
+                'max_length': '255'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'type': ('django.db.models.fields.CharField', [], {
+                'max_length': '1'
+            })
+        },
+        'sentry.counter': {
+            'Meta': {
+                'object_name': 'Counter',
+                'db_table': "'sentry_projectcounter'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'unique': 'True'
+                }
+            ),
+            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.deploy': {
+            'Meta': {
+                'object_name': 'Deploy'
+            },
+            'date_finished':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'date_started':
+            ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'environment_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '64',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'notified': (
+                'django.db.models.fields.NullBooleanField', [], {
+                    'default': 'False',
+                    'null': 'True',
+                    'db_index': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            ),
+            'url': (
+                'django.db.models.fields.URLField', [], {
+                    'max_length': '200',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            )
+        },
+        'sentry.distribution': {
+            'Meta': {
+                'unique_together': "(('release', 'name'),)",
+                'object_name': 'Distribution'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            )
+        },
+        'sentry.dsymapp': {
+            'Meta': {
+                'unique_together': "(('project', 'platform', 'app_id'),)",
+                'object_name': 'DSymApp'
+            },
+            'app_id': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'data': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_synced':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'platform':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'sync_id':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            })
+        },
+        'sentry.environment': {
+            'Meta': {
+                'unique_together': "(('project_id', 'name'), ('organization_id', 'name'))",
+                'object_name': 'Environment'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'organization_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'projects': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'to': "orm['sentry.Project']",
+                    'through': "orm['sentry.EnvironmentProject']",
+                    'symmetrical': 'False'
+                }
+            )
+        },
+        'sentry.environmentproject': {
+            'Meta': {
+                'unique_together': "(('project', 'environment'),)",
+                'object_name': 'EnvironmentProject'
+            },
+            'environment': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Environment']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.event': {
+            'Meta': {
+                'unique_together': "(('project_id', 'event_id'),)",
+                'object_name': 'Event',
+                'db_table': "'sentry_message'",
+                'index_together': "(('group_id', 'datetime'),)"
+            },
+            'data':
+            ('sentry.db.models.fields.node.NodeField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'datetime': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'event_id': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '32',
+                    'null': 'True',
+                    'db_column': "'message_id'"
+                }
+            ),
+            'group_id': (
+                'sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'platform':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'project_id': (
+                'sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'time_spent':
+            ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {
+                'null': 'True'
+            })
+        },
+        'sentry.eventmapping': {
+            'Meta': {
+                'unique_together': "(('project_id', 'event_id'),)",
+                'object_name': 'EventMapping'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'event_id': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventprocessingissue': {
+            'Meta': {
+                'unique_together': "(('raw_event', 'processing_issue'),)",
+                'object_name': 'EventProcessingIssue'
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'processing_issue': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ProcessingIssue']"
+                }
+            ),
+            'raw_event': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.RawEvent']"
+                }
+            )
+        },
+        'sentry.eventtag': {
+            'Meta': {
+                'unique_together':
+                "(('event_id', 'key_id', 'value_id'),)",
+                'object_name':
+                'EventTag',
+                'index_together':
+                "(('project_id', 'key_id', 'value_id'), ('group_id', 'key_id', 'value_id'))"
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'group_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
+            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.eventuser': {
+            'Meta': {
+                'unique_together':
+                "(('project', 'ident'), ('project', 'hash'))",
+                'object_name':
+                'EventUser',
+                'index_together':
+                "(('project', 'email'), ('project', 'username'), ('project', 'ip_address'))"
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'email':
+            ('django.db.models.fields.EmailField', [], {
+                'max_length': '75',
+                'null': 'True'
+            }),
+            'hash': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '128',
+                'null': 'True'
+            }),
+            'ip_address': (
+                'django.db.models.fields.GenericIPAddressField', [], {
+                    'max_length': '39',
+                    'null': 'True'
+                }
+            ),
+            'name':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '128',
+                'null': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'username':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '128',
+                'null': 'True'
+            })
+        },
+        'sentry.featureadoption': {
+            'Meta': {
+                'unique_together': "(('organization', 'feature_id'),)",
+                'object_name': 'FeatureAdoption'
+            },
+            'applicable': ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'complete': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'data': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_completed':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'feature_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            )
+        },
+        'sentry.file': {
+            'Meta': {
+                'object_name': 'File'
+            },
+            'blob': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'legacy_blob'",
+                    'null': 'True',
+                    'to': "orm['sentry.FileBlob']"
+                }
+            ),
+            'blobs': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'to': "orm['sentry.FileBlob']",
+                    'through': "orm['sentry.FileBlobIndex']",
+                    'symmetrical': 'False'
+                }
+            ),
+            'checksum':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '40',
+                'null': 'True'
+            }),
+            'headers': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'path': ('django.db.models.fields.TextField', [], {
+                'null': 'True'
+            }),
+            'size':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'timestamp': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'type': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            })
+        },
+        'sentry.fileblob': {
+            'Meta': {
+                'object_name': 'FileBlob'
+            },
+            'checksum':
+            ('django.db.models.fields.CharField', [], {
+                'unique': 'True',
+                'max_length': '40'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'path': ('django.db.models.fields.TextField', [], {
+                'null': 'True'
+            }),
+            'size':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'timestamp': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.fileblobindex': {
+            'Meta': {
+                'unique_together': "(('file', 'blob', 'offset'),)",
+                'object_name': 'FileBlobIndex'
+            },
+            'blob': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.FileBlob']"
+                }
+            ),
+            'file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.File']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.group': {
+            'Meta': {
+                'unique_together': "(('project', 'short_id'),)",
+                'object_name': 'Group',
+                'db_table': "'sentry_groupedmessage'",
+                'index_together': "(('project', 'first_release'),)"
+            },
+            'active_at':
+            ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True',
+                'db_index': 'True'
+            }),
+            'culprit': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '200',
+                    'null': 'True',
+                    'db_column': "'view'",
+                    'blank': 'True'
+                }
+            ),
+            'data': (
+                'sentry.db.models.fields.gzippeddict.GzippedDictField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'first_release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']",
+                    'null': 'True',
+                    'on_delete': 'models.PROTECT'
+                }
+            ),
+            'first_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_public': (
+                'django.db.models.fields.NullBooleanField', [], {
+                    'default': 'False',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'last_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'level': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '40',
+                    'db_index': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'logger': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "''",
+                    'max_length': '64',
+                    'db_index': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'num_comments': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'null': 'True'
+                }
+            ),
+            'platform':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'resolved_at':
+            ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True',
+                'db_index': 'True'
+            }),
+            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {
+                'default': '0'
+            }),
+            'short_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'null': 'True'
+            }),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            ),
+            'time_spent_count':
+            ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {
+                'default': '0'
+            }),
+            'time_spent_total':
+            ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {
+                'default': '0'
+            }),
+            'times_seen': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '1',
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.groupassignee': {
+            'Meta': {
+                'object_name': 'GroupAssignee',
+                'db_table': "'sentry_groupasignee'"
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'assignee_set'",
+                    'unique': 'True',
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'assignee_set'",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'sentry_assignee_set'",
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.groupbookmark': {
+            'Meta': {
+                'unique_together': "(('project', 'user', 'group'),)",
+                'object_name': 'GroupBookmark'
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'bookmark_set'",
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'bookmark_set'",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'sentry_bookmark_set'",
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.groupcommitresolution': {
+            'Meta': {
+                'unique_together': "(('group_id', 'commit_id'),)",
+                'object_name': 'GroupCommitResolution'
+            },
+            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'datetime': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            })
+        },
+        'sentry.groupemailthread': {
+            'Meta': {
+                'unique_together': "(('email', 'group'), ('email', 'msgid'))",
+                'object_name': 'GroupEmailThread'
+            },
+            'date': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'email': ('django.db.models.fields.EmailField', [], {
+                'max_length': '75'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'groupemail_set'",
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'msgid': ('django.db.models.fields.CharField', [], {
+                'max_length': '100'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'groupemail_set'",
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.grouphash': {
+            'Meta': {
+                'unique_together': "(('project', 'hash'),)",
+                'object_name': 'GroupHash'
+            },
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']",
+                    'null': 'True'
+                }
+            ),
+            'group_tombstone_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'hash': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'state':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            })
+        },
+        'sentry.groupmeta': {
+            'Meta': {
+                'unique_together': "(('group', 'key'),)",
+                'object_name': 'GroupMeta'
+            },
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'value': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.groupredirect': {
+            'Meta': {
+                'object_name': 'GroupRedirect'
+            },
+            'group_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'db_index': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'previous_group_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'unique': 'True'
+            })
+        },
+        'sentry.grouprelease': {
+            'Meta': {
+                'unique_together': "(('group_id', 'release_id', 'environment'),)",
+                'object_name': 'GroupRelease'
+            },
+            'environment':
+            ('django.db.models.fields.CharField', [], {
+                'default': "''",
+                'max_length': '64'
+            }),
+            'first_seen':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'project_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'release_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.groupresolution': {
+            'Meta': {
+                'object_name': 'GroupResolution'
+            },
+            'actor_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'datetime': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']",
+                    'unique': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            ),
+            'status':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'type':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            })
+        },
+        'sentry.grouprulestatus': {
+            'Meta': {
+                'unique_together': "(('rule', 'group'),)",
+                'object_name': 'GroupRuleStatus'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_active': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'rule': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Rule']"
+                }
+            ),
+            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {
+                'default': '0'
+            })
+        },
+        'sentry.groupseen': {
+            'Meta': {
+                'unique_together': "(('user', 'group'),)",
+                'object_name': 'GroupSeen'
+            },
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_seen':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'db_index': 'False'
+                }
+            )
+        },
+        'sentry.groupsnooze': {
+            'Meta': {
+                'object_name': 'GroupSnooze'
+            },
+            'actor_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'count':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']",
+                    'unique': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'state': ('jsonfield.fields.JSONField', [], {
+                'null': 'True'
+            }),
+            'until': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'user_count':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'user_window':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'window':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            })
+        },
+        'sentry.groupsubscription': {
+            'Meta': {
+                'unique_together': "(('group', 'user'),)",
+                'object_name': 'GroupSubscription'
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'subscription_set'",
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_active': ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'subscription_set'",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'reason':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.grouptagkey': {
+            'Meta': {
+                'unique_together': "(('project', 'group', 'key'),)",
+                'object_name': 'GroupTagKey'
+            },
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'values_seen':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            })
+        },
+        'sentry.grouptagvalue': {
+            'Meta': {
+                'unique_together': "(('group_id', 'key', 'value'),)",
+                'object_name': 'GroupTagValue',
+                'db_table': "'sentry_messagefiltervalue'",
+                'index_together': "(('project_id', 'key', 'value', 'last_seen'),)"
+            },
+            'first_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'last_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'times_seen':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'value': ('django.db.models.fields.CharField', [], {
+                'max_length': '200'
+            })
+        },
+        'sentry.grouptombstone': {
+            'Meta': {
+                'object_name': 'GroupTombstone'
+            },
+            'actor_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'culprit': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '200',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'data': (
+                'sentry.db.models.fields.gzippeddict.GzippedDictField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'level': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '40',
+                    'blank': 'True'
+                }
+            ),
+            'message': ('django.db.models.fields.TextField', [], {}),
+            'previous_group_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'unique': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.integration': {
+            'Meta': {
+                'unique_together': "(('provider', 'external_id'),)",
+                'object_name': 'Integration'
+            },
+            'config': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'default_auth_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'external_id': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '200'
+            }),
+            'organizations': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'related_name': "'integrations'",
+                    'symmetrical': 'False',
+                    'through': "orm['sentry.OrganizationIntegration']",
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'projects': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'related_name': "'integrations'",
+                    'symmetrical': 'False',
+                    'through': "orm['sentry.ProjectIntegration']",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'provider': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            })
+        },
+        'sentry.lostpasswordhash': {
+            'Meta': {
+                'object_name': 'LostPasswordHash'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'hash': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'unique': 'True'
+                }
+            )
+        },
+        'sentry.option': {
+            'Meta': {
+                'object_name': 'Option'
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key':
+            ('django.db.models.fields.CharField', [], {
+                'unique': 'True',
+                'max_length': '64'
+            }),
+            'last_updated':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.organization': {
+            'Meta': {
+                'object_name': 'Organization'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'default_role':
+            ('django.db.models.fields.CharField', [], {
+                'default': "'member'",
+                'max_length': '32'
+            }),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {
+                'default': '1'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'members': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'related_name': "'org_memberships'",
+                    'symmetrical': 'False',
+                    'through': "orm['sentry.OrganizationMember']",
+                    'to': "orm['sentry.User']"
+                }
+            ),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'slug':
+            ('django.db.models.fields.SlugField', [], {
+                'unique': 'True',
+                'max_length': '50'
+            }),
+            'status':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            })
+        },
+        'sentry.organizationaccessrequest': {
+            'Meta': {
+                'unique_together': "(('team', 'member'),)",
+                'object_name': 'OrganizationAccessRequest'
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'member': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.OrganizationMember']"
+                }
+            ),
+            'team': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Team']"
+                }
+            )
+        },
+        'sentry.organizationavatar': {
+            'Meta': {
+                'object_name': 'OrganizationAvatar'
+            },
+            'avatar_type':
+            ('django.db.models.fields.PositiveSmallIntegerField', [], {
+                'default': '0'
+            }),
+            'file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.File']",
+                    'unique': 'True',
+                    'null': 'True',
+                    'on_delete': 'models.SET_NULL'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident': (
+                'django.db.models.fields.CharField', [], {
+                    'unique': 'True',
+                    'max_length': '32',
+                    'db_index': 'True'
+                }
+            ),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'avatar'",
+                    'unique': 'True',
+                    'to': "orm['sentry.Organization']"
+                }
+            )
+        },
+        'sentry.organizationintegration': {
+            'Meta': {
+                'unique_together': "(('organization', 'integration'),)",
+                'object_name': 'OrganizationIntegration'
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'integration': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Integration']"
+                }
+            ),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            )
+        },
+        'sentry.organizationmember': {
+            'Meta': {
+                'unique_together': "(('organization', 'user'), ('organization', 'email'))",
+                'object_name': 'OrganizationMember'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'email': (
+                'django.db.models.fields.EmailField', [], {
+                    'max_length': '75',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'flags': ('django.db.models.fields.BigIntegerField', [], {
+                'default': '0'
+            }),
+            'has_global_access': ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'member_set'",
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'role':
+            ('django.db.models.fields.CharField', [], {
+                'default': "'member'",
+                'max_length': '32'
+            }),
+            'teams': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'to': "orm['sentry.Team']",
+                    'symmetrical': 'False',
+                    'through': "orm['sentry.OrganizationMemberTeam']",
+                    'blank': 'True'
+                }
+            ),
+            'token': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '64',
+                    'unique': 'True',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'type': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '50',
+                    'blank': 'True'
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'blank': 'True',
+                    'related_name': "'sentry_orgmember_set'",
+                    'null': 'True',
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.organizationmemberteam': {
+            'Meta': {
+                'unique_together': "(('team', 'organizationmember'),)",
+                'object_name': 'OrganizationMemberTeam',
+                'db_table': "'sentry_organizationmember_teams'"
+            },
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_active': ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'organizationmember': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.OrganizationMember']"
+                }
+            ),
+            'team': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Team']"
+                }
+            )
+        },
+        'sentry.organizationonboardingtask': {
+            'Meta': {
+                'unique_together': "(('organization', 'task'),)",
+                'object_name': 'OrganizationOnboardingTask'
+            },
+            'data': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_completed':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'project_id': (
+                'sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'null': 'True'
+                }
+            )
+        },
+        'sentry.organizationoption': {
+            'Meta': {
+                'unique_together': "(('organization', 'key'),)",
+                'object_name': 'OrganizationOption',
+                'db_table': "'sentry_organizationoptions'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.processingissue': {
+            'Meta': {
+                'unique_together': "(('project', 'checksum', 'type'),)",
+                'object_name': 'ProcessingIssue'
+            },
+            'checksum':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '40',
+                'db_index': 'True'
+            }),
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'datetime':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'type': ('django.db.models.fields.CharField', [], {
+                'max_length': '30'
+            })
+        },
+        'sentry.project': {
+            'Meta': {
+                'unique_together': "(('team', 'slug'), ('organization', 'slug'))",
+                'object_name': 'Project'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'first_event': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'flags':
+            ('django.db.models.fields.BigIntegerField', [], {
+                'default': '0',
+                'null': 'True'
+            }),
+            'forced_color': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '6',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '200'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'platform':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'public': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'slug': ('django.db.models.fields.SlugField', [], {
+                'max_length': '50',
+                'null': 'True'
+            }),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            ),
+            'team': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Team']"
+                }
+            )
+        },
+        'sentry.projectbookmark': {
+            'Meta': {
+                'unique_together': "(('project_id', 'user'),)",
+                'object_name': 'ProjectBookmark'
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project_id': (
+                'sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.projectdsymfile': {
+            'Meta': {
+                'unique_together': "(('project', 'uuid'),)",
+                'object_name': 'ProjectDSymFile'
+            },
+            'cpu_name': ('django.db.models.fields.CharField', [], {
+                'max_length': '40'
+            }),
+            'file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.File']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'object_name': ('django.db.models.fields.TextField', [], {}),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'uuid': ('django.db.models.fields.CharField', [], {
+                'max_length': '36'
+            })
+        },
+        'sentry.projectintegration': {
+            'Meta': {
+                'unique_together': "(('project', 'integration'),)",
+                'object_name': 'ProjectIntegration'
+            },
+            'config': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'integration': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Integration']"
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.projectkey': {
+            'Meta': {
+                'object_name': 'ProjectKey'
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'label': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '64',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'key_set'",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'public_key': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '32',
+                    'unique': 'True',
+                    'null': 'True'
+                }
+            ),
+            'rate_limit_count':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'rate_limit_window':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'roles': ('django.db.models.fields.BigIntegerField', [], {
+                'default': '1'
+            }),
+            'secret_key': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '32',
+                    'unique': 'True',
+                    'null': 'True'
+                }
+            ),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.projectoption': {
+            'Meta': {
+                'unique_together': "(('project', 'key'),)",
+                'object_name': 'ProjectOption',
+                'db_table': "'sentry_projectoptions'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.projectplatform': {
+            'Meta': {
+                'unique_together': "(('project_id', 'platform'),)",
+                'object_name': 'ProjectPlatform'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_seen':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'platform': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.rawevent': {
+            'Meta': {
+                'unique_together': "(('project', 'event_id'),)",
+                'object_name': 'RawEvent'
+            },
+            'data':
+            ('sentry.db.models.fields.node.NodeField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'datetime':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'event_id':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '32',
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.release': {
+            'Meta': {
+                'unique_together': "(('organization', 'version'),)",
+                'object_name': 'Release'
+            },
+            'authors': (
+                'sentry.db.models.fields.array.ArrayField', [], {
+                    'of': ('django.db.models.fields.TextField', [], {})
+                }
+            ),
+            'commit_count':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'data': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'date_released':
+            ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'date_started':
+            ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True',
+                'blank': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_commit_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'last_deploy_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'new_groups':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'owner': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'projects': (
+                'django.db.models.fields.related.ManyToManyField', [], {
+                    'related_name': "'releases'",
+                    'symmetrical': 'False',
+                    'through': "orm['sentry.ReleaseProject']",
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'ref': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '64',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'total_deploys':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'url': (
+                'django.db.models.fields.URLField', [], {
+                    'max_length': '200',
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'version': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            })
+        },
+        'sentry.releasecommit': {
+            'Meta': {
+                'unique_together': "(('release', 'commit'), ('release', 'order'))",
+                'object_name': 'ReleaseCommit'
+            },
+            'commit': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Commit']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            )
+        },
+        'sentry.releaseenvironment': {
+            'Meta': {
+                'unique_together': "(('organization_id', 'release_id', 'environment_id'),)",
+                'object_name': 'ReleaseEnvironment',
+                'db_table': "'sentry_environmentrelease'"
+            },
+            'environment_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'first_seen':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'last_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'db_index': 'True'
+                }
+            ),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'release_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.releasefile': {
+            'Meta': {
+                'unique_together': "(('release', 'ident'),)",
+                'object_name': 'ReleaseFile'
+            },
+            'dist': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Distribution']",
+                    'null': 'True'
+                }
+            ),
+            'file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.File']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident': ('django.db.models.fields.CharField', [], {
+                'max_length': '40'
+            }),
+            'name': ('django.db.models.fields.TextField', [], {}),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'project_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'null': 'True'
+            }),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            )
+        },
+        'sentry.releaseheadcommit': {
+            'Meta': {
+                'unique_together': "(('repository_id', 'release'),)",
+                'object_name': 'ReleaseHeadCommit'
+            },
+            'commit': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Commit']"
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            ),
+            'repository_id':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
+        },
+        'sentry.releaseproject': {
+            'Meta': {
+                'unique_together': "(('project', 'release'),)",
+                'object_name': 'ReleaseProject',
+                'db_table': "'sentry_release_project'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'new_groups': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'null': 'True'
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'release': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Release']"
+                }
+            )
+        },
+        'sentry.repository': {
+            'Meta': {
+                'unique_together':
+                "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))",
+                'object_name':
+                'Repository'
+            },
+            'config': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'external_id':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'integration_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '200'
+            }),
+            'organization_id': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'db_index': 'True'
+                }
+            ),
+            'provider':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            ),
+            'url': ('django.db.models.fields.URLField', [], {
+                'max_length': '200',
+                'null': 'True'
+            })
+        },
+        'sentry.reprocessingreport': {
+            'Meta': {
+                'unique_together': "(('project', 'event_id'),)",
+                'object_name': 'ReprocessingReport'
+            },
+            'datetime':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'event_id':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '32',
+                'null': 'True'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.rule': {
+            'Meta': {
+                'object_name': 'Rule'
+            },
+            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'label': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'status': (
+                'sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                    'default': '0',
+                    'db_index': 'True'
+                }
+            )
+        },
+        'sentry.savedsearch': {
+            'Meta': {
+                'unique_together': "(('project', 'name'),)",
+                'object_name': 'SavedSearch'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_default': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'owner': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']",
+                    'null': 'True'
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'query': ('django.db.models.fields.TextField', [], {})
+        },
+        'sentry.savedsearchuserdefault': {
+            'Meta': {
+                'unique_together': "(('project', 'user'),)",
+                'object_name': 'SavedSearchUserDefault',
+                'db_table': "'sentry_savedsearch_userdefault'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'savedsearch': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.SavedSearch']"
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.scheduleddeletion': {
+            'Meta': {
+                'unique_together': "(('app_label', 'model_name', 'object_id'),)",
+                'object_name': 'ScheduledDeletion'
+            },
+            'aborted': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'actor_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'null': 'True'
+            }),
+            'app_label': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'data': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'date_scheduled': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime(2017, 8, 18, 0, 0)'
+                }
+            ),
+            'guid': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "'ba0a4f8923d944a184f253087c8fb039'",
+                    'unique': 'True',
+                    'max_length': '32'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'in_progress': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'model_name': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'object_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
+        },
+        'sentry.scheduledjob': {
+            'Meta': {
+                'object_name': 'ScheduledJob'
+            },
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {}),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'payload': ('jsonfield.fields.JSONField', [], {
+                'default': '{}'
+            })
+        },
+        'sentry.tagkey': {
+            'Meta': {
+                'unique_together': "(('project', 'key'),)",
+                'object_name': 'TagKey',
+                'db_table': "'sentry_filterkey'"
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'label':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '64',
+                'null': 'True'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            ),
+            'status':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'values_seen':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            })
+        },
+        'sentry.tagvalue': {
+            'Meta': {
+                'unique_together': "(('project', 'key', 'value'),)",
+                'object_name': 'TagValue',
+                'db_table': "'sentry_filtervalue'"
+            },
+            'data': (
+                'sentry.db.models.fields.gzippeddict.GzippedDictField', [], {
+                    'null': 'True',
+                    'blank': 'True'
+                }
+            ),
+            'first_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'last_seen': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True',
+                    'db_index': 'True'
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'times_seen':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            }),
+            'value': ('django.db.models.fields.CharField', [], {
+                'max_length': '200'
+            })
+        },
+        'sentry.team': {
+            'Meta': {
+                'unique_together': "(('organization', 'slug'),)",
+                'object_name': 'Team'
+            },
+            'date_added': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']"
+                }
+            ),
+            'slug': ('django.db.models.fields.SlugField', [], {
+                'max_length': '50'
+            }),
+            'status':
+            ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {
+                'default': '0'
+            })
+        },
+        'sentry.user': {
+            'Meta': {
+                'object_name': 'User',
+                'db_table': "'auth_user'"
+            },
+            'date_joined':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'email':
+            ('django.db.models.fields.EmailField', [], {
+                'max_length': '75',
+                'blank': 'True'
+            }),
+            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_active': ('django.db.models.fields.BooleanField', [], {
+                'default': 'True'
+            }),
+            'is_managed': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'is_password_expired':
+            ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'is_staff': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'is_superuser': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'last_active': (
+                'django.db.models.fields.DateTimeField', [], {
+                    'default': 'datetime.datetime.now',
+                    'null': 'True'
+                }
+            ),
+            'last_login':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'last_password_change': ('django.db.models.fields.DateTimeField', [], {
+                'null': 'True'
+            }),
+            'name': (
+                'django.db.models.fields.CharField', [], {
+                    'max_length': '200',
+                    'db_column': "'first_name'",
+                    'blank': 'True'
+                }
+            ),
+            'password': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'session_nonce':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '12',
+                'null': 'True'
+            }),
+            'username':
+            ('django.db.models.fields.CharField', [], {
+                'unique': 'True',
+                'max_length': '128'
+            })
+        },
+        'sentry.useravatar': {
+            'Meta': {
+                'object_name': 'UserAvatar'
+            },
+            'avatar_type':
+            ('django.db.models.fields.PositiveSmallIntegerField', [], {
+                'default': '0'
+            }),
+            'file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.File']",
+                    'unique': 'True',
+                    'null': 'True',
+                    'on_delete': 'models.SET_NULL'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'ident': (
+                'django.db.models.fields.CharField', [], {
+                    'unique': 'True',
+                    'max_length': '32',
+                    'db_index': 'True'
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'avatar'",
+                    'unique': 'True',
+                    'to': "orm['sentry.User']"
+                }
+            )
+        },
+        'sentry.useremail': {
+            'Meta': {
+                'unique_together': "(('user', 'email'),)",
+                'object_name': 'UserEmail'
+            },
+            'date_hash_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'email': ('django.db.models.fields.EmailField', [], {
+                'max_length': '75'
+            }),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'is_verified': ('django.db.models.fields.BooleanField', [], {
+                'default': 'False'
+            }),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'related_name': "'emails'",
+                    'to': "orm['sentry.User']"
+                }
+            ),
+            'validation_hash': (
+                'django.db.models.fields.CharField', [], {
+                    'default': "u'odjWXx2WLwjLM3PYG9EC9iXFsfH12Onf'",
+                    'max_length': '32'
+                }
+            )
+        },
+        'sentry.useroption': {
+            'Meta': {
+                'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))",
+                'object_name': 'UserOption'
+            },
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'key': ('django.db.models.fields.CharField', [], {
+                'max_length': '64'
+            }),
+            'organization': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Organization']",
+                    'null': 'True'
+                }
+            ),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']",
+                    'null': 'True'
+                }
+            ),
+            'user': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.User']"
+                }
+            ),
+            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
+        },
+        'sentry.userreport': {
+            'Meta': {
+                'unique_together': "(('project', 'event_id'),)",
+                'object_name': 'UserReport',
+                'index_together': "(('project', 'event_id'), ('project', 'date_added'))"
+            },
+            'comments': ('django.db.models.fields.TextField', [], {}),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'email': ('django.db.models.fields.EmailField', [], {
+                'max_length': '75'
+            }),
+            'event_id': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            }),
+            'event_user_id':
+            ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {
+                'null': 'True'
+            }),
+            'group': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Group']",
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'name': ('django.db.models.fields.CharField', [], {
+                'max_length': '128'
+            }),
+            'project': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.Project']"
+                }
+            )
+        },
+        'sentry.versiondsymfile': {
+            'Meta': {
+                'unique_together': "(('dsym_file', 'version', 'build'),)",
+                'object_name': 'VersionDSymFile'
+            },
+            'build':
+            ('django.db.models.fields.CharField', [], {
+                'max_length': '32',
+                'null': 'True'
+            }),
+            'date_added':
+            ('django.db.models.fields.DateTimeField', [], {
+                'default': 'datetime.datetime.now'
+            }),
+            'dsym_app': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.DSymApp']"
+                }
+            ),
+            'dsym_file': (
+                'sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {
+                    'to': "orm['sentry.ProjectDSymFile']",
+                    'null': 'True'
+                }
+            ),
+            'id':
+            ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {
+                'primary_key': 'True'
+            }),
+            'version': ('django.db.models.fields.CharField', [], {
+                'max_length': '32'
+            })
+        }
+    }
+
+    complete_apps = ['sentry']
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 332c9d1c82..a6604fe495 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -36,6 +36,7 @@ import OrganizationCreate from './views/organizationCreate';
 import OrganizationDashboard from './views/organizationDashboard';
 import OrganizationDetails from './views/organizationDetails';
 import OrganizationContext from './views/organizationContext';
+import OrganizationIntegrations from './views/organizationIntegrations';
 import OrganizationRateLimits from './views/organizationRateLimits';
 import OrganizationRepositories from './views/organizationRepositories';
 import OrganizationSettings from './views/organizationSettings';
@@ -164,6 +165,10 @@ function routes() {
           path="/organizations/:orgId/repos/"
           component={errorHandler(OrganizationRepositories)}
         />
+        <Route
+          path="/organizations/:orgId/integrations/"
+          component={errorHandler(OrganizationIntegrations)}
+        />
         <Route
           path="/organizations/:orgId/settings/"
           component={errorHandler(OrganizationSettings)}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
new file mode 100644
index 0000000000..30cf2faf04
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
@@ -0,0 +1,198 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import IndicatorStore from '../stores/indicatorStore';
+import LoadingIndicator from '../components/loadingIndicator';
+import OrganizationHomeContainer from '../components/organizations/homeContainer';
+import OrganizationState from '../mixins/organizationState';
+import {t, tct} from '../locale';
+
+const OrganizationIntegrations = React.createClass({
+  mixins: [ApiMixin, OrganizationState],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: null,
+      ingtegrationList: null
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    this.api.request(`/organizations/${this.props.params.orgId}/integrations/`, {
+      method: 'GET',
+      success: data => {
+        this.setState({
+          ingtegrationList: data,
+          loading: false
+        });
+      },
+      error: err => {
+        this.setState({
+          loading: false,
+          error: err.responseJSON
+        });
+      }
+    });
+  },
+
+  linkAuth(providerId, auth) {
+    let indicator = IndicatorStore.add(t('Saving changes..'));
+    this.api.request(`/organizations/${this.props.params.orgId}/integrations/`, {
+      method: 'POST',
+      data: {
+        providerId: providerId,
+        defaultAuthId: auth.defaultAuthId,
+        integrationId: auth.integrationId
+      },
+      success: data => {
+        // TODO(jess): we should sort this alphabetically
+        let ingtegrationList = this.state.ingtegrationList.filter(provider => {
+          return provider.id !== data.id;
+        });
+        ingtegrationList.push(data);
+        this.setState({
+          ingtegrationList: ingtegrationList
+        });
+      },
+      error: err => {
+        this.setState({
+          loading: false,
+          error: err.responseJSON
+        });
+      },
+      complete: () => {
+        IndicatorStore.remove(indicator);
+      }
+    });
+  },
+
+  toggleAuth(providerId, auth) {
+    if (auth.linked) {
+      this.disableAuth(providerId, auth);
+    } else {
+      this.linkAuth(providerId, auth);
+    }
+  },
+
+  disableAuth(providerId, auth) {
+    // TODO(jess): implement this + endpoint
+  },
+
+  renderProvider(provider) {
+    let authUrl = provider.authUrl;
+    if (authUrl.indexOf('?') === -1) {
+      authUrl += '?next=' + encodeURIComponent(document.location.pathname);
+    } else {
+      authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+    }
+    return (
+      <div key={provider.id}>
+        <div className="row">
+          <div className="col-md-6">
+            <h3>{provider.name}</h3>
+          </div>
+          <div className="col-md-6">
+            {/* TODO(jess): we might want to only show this in certain
+             situations/have diff providers be able to customize this more */}
+            <a className="btn btn-default btn-sm" href={authUrl}>
+              {t('Link another account')}
+            </a>
+          </div>
+        </div>
+        {provider.auths.length
+          ? provider.auths.map(auth => {
+              return (
+                <div className="row" key={auth.externalId}>
+                  <div className="col-md-6">
+                    {auth.externalId}
+                  </div>
+                  <div className="col-md-6">
+                    <button
+                      className="btn btn-sm btn-primary"
+                      onClick={this.toggleAuth.bind(this, provider.id, auth)}>
+                      {auth.linked ? t('Disable') : t('Enable')}
+                    </button>
+                  </div>
+                </div>
+              );
+            })
+          : <span>No available auth methods</span>}
+      </div>
+    );
+  },
+
+  renderBody() {
+    let orgFeatures = new Set(this.getOrganization().features);
+
+    if (!orgFeatures.has('integrations-v3')) {
+      return (
+        <div className="alert alert-warning m-b-1">
+          {t("Nothing to see here. You don't have access to this feature yet.")}
+        </div>
+      );
+    }
+
+    if (this.state.loading) return <LoadingIndicator />;
+
+    let error = this.state.error;
+    if (error) {
+      if (error.error_type === 'auth') {
+        let authUrl = error.auth_url;
+        if (authUrl.indexOf('?') === -1) {
+          authUrl += '?next=' + encodeURIComponent(document.location.pathname);
+        } else {
+          authUrl += '&next=' + encodeURIComponent(document.location.pathname);
+        }
+        return (
+          <div>
+            <div className="alert alert-warning m-b-1">
+              {'You need to associate an identity with ' +
+                error.title +
+                ' before you can create issues with this service.'}
+            </div>
+            <a className="btn btn-primary" href={authUrl}>
+              Associate Identity
+            </a>
+          </div>
+        );
+      } else {
+        return (
+          <div className="alert alert-error alert-block">
+            <p>
+              {error.message
+                ? error.message
+                : tct(
+                    'An unknown error occurred. Need help with this? [link:Contact support]',
+                    {
+                      link: <a href="https://sentry.io/support/" />
+                    }
+                  )}
+            </p>
+          </div>
+        );
+      }
+    }
+
+    let {ingtegrationList} = this.state;
+    return (
+      <div>
+        {ingtegrationList.map(this.renderProvider)}
+      </div>
+    );
+  },
+
+  render() {
+    return (
+      <OrganizationHomeContainer>
+        {this.renderBody()}
+      </OrganizationHomeContainer>
+    );
+  }
+});
+
+export default OrganizationIntegrations;
diff --git a/src/social_auth/backends/github_apps.py b/src/social_auth/backends/github_apps.py
new file mode 100644
index 0000000000..7ab0519569
--- /dev/null
+++ b/src/social_auth/backends/github_apps.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from social_auth.backends.github import GithubBackend, GithubAuth
+
+
+class GithubAppsBackend(GithubBackend):
+    name = 'github_apps'
+
+
+class GithubAppsAuth(GithubAuth):
+    AUTH_BACKEND = GithubAppsBackend
+    SETTINGS_KEY_NAME = 'GITHUB_APPS_APP_ID'
+    SETTINGS_SECRET_NAME = 'GITHUB_APPS_API_SECRET'
+    REDIRECT_STATE = False
+
+
+BACKENDS = {
+    'github_apps': GithubAppsAuth,
+}
diff --git a/tests/sentry/api/endpoints/test_organization_integrations.py b/tests/sentry/api/endpoints/test_organization_integrations.py
new file mode 100644
index 0000000000..c38c364dfc
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_integrations.py
@@ -0,0 +1,118 @@
+from __future__ import absolute_import
+
+import six
+
+from django.core.urlresolvers import reverse
+
+from social_auth.models import UserSocialAuth
+from sentry.models import Integration, OrganizationIntegration
+from sentry.testutils import APITestCase
+
+
+class OrganizationIntegrationsListTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        auth = UserSocialAuth.objects.create(
+            provider='dummy',
+            user=self.user,
+            uid='123456',
+        )
+
+        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
+        with self.feature('organizations:integrations-v3', True):
+            response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0] == {
+            'id':
+            'dummy',
+            'name':
+            'Example',
+            'authUrl':
+            '/account/settings/social/associate/dummy/',
+            'auths': [
+                {
+                    'externalId': auth.uid,
+                    'defaultAuthId': auth.id,
+                    'user': {
+                        'email': self.user.email
+                    },
+                    'linked': False,
+                    'integrationId': None,
+                }
+            ],
+        }
+
+
+class OrganizationIntegrationsCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        org = self.create_organization(owner=self.user, name='baz')
+        auth = UserSocialAuth.objects.create(
+            provider='dummy',
+            user=self.user,
+            uid='123456',
+        )
+
+        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
+        with self.feature('organizations:integrations-v3', True):
+            response = self.client.post(
+                url, data={
+                    'provider': 'dummy',
+                    'defaultAuthId': auth.id,
+                }
+            )
+
+        assert response.status_code == 201, response.content
+
+        assert Integration.objects.filter(default_auth_id=auth.id).exists()
+
+        assert response.data == {
+            'id':
+            u'dummy',
+            'name':
+            'Example',
+            'authUrl':
+            '/account/settings/social/associate/dummy/',
+            'auths': [
+                {
+                    'externalId': auth.uid,
+                    'defaultAuthId': auth.id,
+                    'user': {
+                        'email': self.user.email
+                    },
+                    'linked': True,
+                    'integrationId':
+                    six.text_type(Integration.objects.get(default_auth_id=auth.id).id),
+                }
+            ],
+        }
+        assert OrganizationIntegration.objects.filter(
+            integration__default_auth_id=auth.id,
+            organization_id=org.id,
+        ).exists()
+
+    def test_adding_bad_social_auth(self):
+        self.login_as(user=self.user)
+        user2 = self.create_user()
+        auth = UserSocialAuth.objects.create(
+            provider='dummy',
+            user=user2,
+            uid='123456',
+        )
+        org = self.create_organization(owner=self.user, name='baz')
+
+        url = reverse('sentry-api-0-organization-integrations', args=[org.slug])
+        with self.feature('organizations:integrations-v3', True):
+            response = self.client.post(
+                url, data={
+                    'provider': 'dummy',
+                    'defaultAuthId': auth.id,
+                }
+            )
+
+        assert response.status_code == 400
diff --git a/tests/sentry/api/endpoints/test_organization_repositories.py b/tests/sentry/api/endpoints/test_organization_repositories.py
index c627d24185..b2d3d999fe 100644
--- a/tests/sentry/api/endpoints/test_organization_repositories.py
+++ b/tests/sentry/api/endpoints/test_organization_repositories.py
@@ -2,9 +2,12 @@ from __future__ import absolute_import
 
 import six
 
+from mock import patch
+
 from django.core.urlresolvers import reverse
 
 from sentry.models import Repository
+from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
 from sentry.testutils import APITestCase
 
 
@@ -32,13 +35,14 @@ class OrganizationRepositoriesCreateTest(APITestCase):
 
         org = self.create_organization(owner=self.user, name='baz')
 
-        url = reverse('sentry-api-0-organization-repositories', args=[org.slug])
-        response = self.client.post(
-            url, data={
-                'provider': 'dummy',
-                'name': 'getsentry/sentry',
-            }
-        )
+        with patch.object(DummyRepositoryProvider, 'needs_auth', return_value=False):
+            url = reverse('sentry-api-0-organization-repositories', args=[org.slug])
+            response = self.client.post(
+                url, data={
+                    'provider': 'dummy',
+                    'name': 'getsentry/sentry',
+                }
+            )
 
         assert response.status_code == 201, (response.status_code, response.content)
         assert response.data['id']
diff --git a/tests/sentry/plugins/test_repository_provider.py b/tests/sentry/plugins/test_repository_provider.py
new file mode 100644
index 0000000000..8a26af0611
--- /dev/null
+++ b/tests/sentry/plugins/test_repository_provider.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+from social_auth.models import UserSocialAuth
+
+from sentry.models import Integration
+from sentry.plugins.providers.dummy.repository import DummyRepositoryProvider
+from sentry.testutils import TestCase
+
+
+class RepositoryProviderTest(TestCase):
+    def test_needs_auth_for_user(self):
+        user = self.create_user()
+        provider = DummyRepositoryProvider(id='dummy')
+
+        # if no org is provided, user needs auth
+        assert provider.needs_auth(user) is True
+
+        UserSocialAuth.objects.create(
+            provider='dummy',
+            user=user,
+        )
+
+        assert provider.needs_auth(user) is False
+
+    def test_needs_auth_for_organization(self):
+        user = self.create_user()
+        provider = DummyRepositoryProvider(id='dummy')
+
+        org = self.create_organization()
+        integration = Integration.objects.create(
+            provider='dummy',
+            external_id='123456',
+        )
+        integration.add_organization(org.id)
+
+        assert provider.needs_auth(user, organization=org) is False
+
+    def test_get_auth_for_user(self):
+        user = self.create_user()
+        provider = DummyRepositoryProvider(id='dummy')
+
+        assert provider.get_auth(user) is None
+
+        usa = UserSocialAuth.objects.create(
+            provider='dummy',
+            user=user,
+        )
+
+        assert provider.get_auth(user) == usa
+
+    def test_get_auth_for_organization(self):
+        user = self.create_user()
+        user2 = self.create_user()
+        provider = DummyRepositoryProvider(id='dummy')
+
+        usa = UserSocialAuth.objects.create(
+            provider='dummy',
+            user=user2,
+        )
+
+        org = self.create_organization()
+        integration = Integration.objects.create(
+            provider='dummy',
+            external_id='123456',
+            default_auth_id=usa.id,
+        )
+        integration.add_organization(org.id)
+
+        assert provider.get_auth(user, organization=org) == usa
