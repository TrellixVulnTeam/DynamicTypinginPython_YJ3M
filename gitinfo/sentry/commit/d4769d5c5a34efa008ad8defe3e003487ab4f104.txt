commit d4769d5c5a34efa008ad8defe3e003487ab4f104
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Sep 28 09:48:55 2014 -0700

    Add internal frontend project
    
    - Wire up raven.js to automatically capture errors
    - Add default 'sentry' user when no superuser is present
    - Add default 'sentry' team

diff --git a/bower.json b/bower.json
index 0cf5b88d25..b58d0b8bb0 100644
--- a/bower.json
+++ b/bower.json
@@ -13,7 +13,6 @@
     "angular-loading-bar": "~0.0.5",
     "angular-linkify": "~0.3.0",
     "angular-mocks": "1.2.9",
-    "angular-raven": "~0.5.4",
     "bootstrap": "~3.1.1",
     "bootstrap-datepicker": "~1.3.0",
     "moment": "~2.1.0",
@@ -22,7 +21,8 @@
     "selectize": "~0.10.1",
     "simple-slider": "https://github.com/loopj/jquery-simple-slider.git",
     "platformicons": "1.0.2",
-    "typeahead.js": "~0.10.5"
+    "typeahead.js": "~0.10.5",
+    "raven-js": "~1.1.16"
   },
   "resolutions": {
     "angular": "1.2.9",
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index cfb11b0b78..ea5cc11d84 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -1,4 +1,3 @@
-from django.conf import settings
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -62,8 +61,8 @@ class ProjectDetailsEndpoint(Endpoint):
     def delete(self, request, project_id):
         project = Project.objects.get(id=project_id)
 
-        if project.id == settings.SENTRY_PROJECT:
-            return Response('{"error": "Cannot remove default project."}',
+        if project.is_internal_project():
+            return Response('{"error": "Cannot remove projects internally used by Sentry."}',
                             status=status.HTTP_403_FORBIDDEN)
 
         if not (request.user.is_superuser or project.team.owner_id == request.user.id):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index d7f5cb3e91..115afce4a7 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -507,6 +507,10 @@ SENTRY_STATIC_BUNDLES = {
             ],
         },
 
+        "sentry/dist/raven.min.js": {
+            "src": ["sentry/vendor/raven-js/dist/raven.min.js"],
+        },
+
     },
     "postcompilers": {
         "*.js": ["node_modules/.bin/uglifyjs {input} --source-map-root={relroot}/ --source-map-url={name}.map{ext} --source-map={relpath}/{name}.map{ext} -o {output}"],
@@ -540,7 +544,13 @@ STATSD_CLIENT = 'django_statsd.clients.null'
 # Sentry and Raven configuration
 
 SENTRY_PUBLIC = False
+
+# Default project ID for recording internal exceptions
 SENTRY_PROJECT = 1
+
+# Project ID for recording frontend (javascript) exceptions
+SENTRY_FRONTEND_PROJECT = None
+
 SENTRY_CACHE_BACKEND = 'default'
 
 SENTRY_FILTERS = ()
@@ -676,8 +686,6 @@ SENTRY_SEARCH_OPTIONS = {}
 SENTRY_TSDB = 'sentry.tsdb.dummy.DummyTSDB'
 SENTRY_TSDB_OPTIONS = {}
 
-SENTRY_RAVEN_JS_URL = 'cdn.ravenjs.com/1.1.15/jquery,native/raven.min.js'
-
 # URI Prefixes for generating DSN URLs
 # (Defaults to URL_PREFIX by default)
 SENTRY_ENDPOINT = None
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 266543fd2c..ecebd7074a 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -110,8 +110,11 @@ class Project(Model):
             fv.delete()
         self.delete()
 
-    def is_default_project(self):
-        return str(self.id) == str(settings.SENTRY_PROJECT) or str(self.slug) == str(settings.SENTRY_PROJECT)
+    def is_internal_project(self):
+        for value in (settings.SENTRY_FRONTEND_PROJECT, settings.SENTRY_PROJECT):
+            if str(self.id) == str(value) or str(self.slug) == str(value):
+                return True
+        return False
 
     def get_tags(self):
         from sentry.models import TagKey
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 5a64d7afca..70ad03b9ef 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -159,7 +159,7 @@ def can_remove_team(user, team):
 
 @requires_login
 def can_remove_project(user, project):
-    if project.is_default_project():
+    if project.is_internal_project():
         return False
 
     if user.is_superuser:
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index d97eeca450..1f06d45fa6 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -23,26 +23,58 @@ SELECT setval('sentry_project_id_seq', (
 """
 
 
-def create_default_project(created_models, verbosity=2, **kwargs):
+def create_default_projects(created_models, verbosity=2, **kwargs):
     if Project not in created_models:
         return
 
-    if Project.objects.filter(id=settings.SENTRY_PROJECT).exists():
+    create_default_project(
+        id=settings.SENTRY_PROJECT,
+        name='Backend',
+        slug='backend',
+        verbosity=verbosity,
+        platform='django',
+    )
+    if settings.SENTRY_FRONTEND_PROJECT:
+        project = create_default_project(
+            id=settings.SENTRY_FRONTEND_PROJECT,
+            name='Frontend',
+            slug='frontend',
+            verbosity=verbosity,
+            platform='javascript'
+        )
+
+
+def create_default_project(id, name, slug, verbosity=2, **kwargs):
+    if Project.objects.filter(id=id).exists():
         return
 
     try:
         user = User.objects.filter(is_superuser=True)[0]
     except IndexError:
-        user = None
+        user, _ = User.objects.get_or_create(
+            username='sentry',
+            defaults={
+                'email': 'sentry@localhost',
+            }
+        )
+
+    team, _ = Team.objects.get_or_create(
+        name='sentry',
+        defaults={
+            'owner': user,
+        }
+    )
 
     project = Project.objects.create(
-        id=settings.SENTRY_PROJECT,
+        id=id,
         public=False,
-        name='Sentry (Internal)',
-        slug='sentry',
+        name=name,
+        slug=slug,
         owner=user,
-        platform='django',
+        team=team,
+        **kwargs
     )
+
     # HACK: manually update the ID after insert due to Postgres
     # sequence issues. Seriously, fuck everything about this.
     connection = connections[project._state.db]
@@ -50,9 +82,13 @@ def create_default_project(created_models, verbosity=2, **kwargs):
         cursor = connection.cursor()
         cursor.execute(PROJECT_SEQUENCE_FIX)
 
+    project.update_option('sentry:origins', ['*'])
+
     if verbosity > 0:
         print('Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id))
 
+    return project
+
 
 def set_sentry_version(latest=None, **kwargs):
     import sentry
@@ -71,6 +107,11 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
     if not created or kwargs.get('raw'):
         return
 
+    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
+        ProjectKey.objects.create(
+            project=instance,
+        )
+
     if not instance.owner:
         return
 
@@ -80,11 +121,6 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
         team.save()
         update(instance, team=team)
 
-    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
-        ProjectKey.objects.create(
-            project=instance,
-        )
-
 
 def create_team_member_for_owner(instance, created, **kwargs):
     if not created:
@@ -171,7 +207,7 @@ def on_alert_creation(instance, **kwargs):
 
 # Signal registration
 post_syncdb.connect(
-    create_default_project,
+    create_default_projects,
     dispatch_uid="create_default_project",
     weak=False,
 )
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index d5c4769051..ae6db60cf6 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -1,5 +1,6 @@
 {% load i18n %}
 {% load sentry_api %}
+{% load sentry_dsn %}
 {% load sentry_helpers %}
 {% load static_compiler %}
 
@@ -54,7 +55,62 @@
             {% staticbundle 'sentry/dist/app.min.js' %}
             {% staticbundle 'sentry/dist/legacy-app.min.js' %}
 
-            <script src="{% url 'sentry-media' 'sentry' 'vendor/raven/raven.js' %}"></script>
+            {% staticbundle 'sentry/dist/raven.min.js' %}
+
+            <script>
+            Raven.config('{% public_dsn %}', {
+                tags: {
+                    sentry_version: '{{ sentry_version.current }}'
+                },
+                whitelistUrls: {% convert_to_json ALLOWED_HOSTS %},
+                ignoreErrors: [
+                  // Random plugins/extensions
+                  'top.GLOBALS',
+                  // See: http://blog.errorception.com/2012/03/tale-of-unfindable-js-error. html
+                  'originalCreateNotification',
+                  'canvas.contentDocument',
+                  'MyApp_RemoveAllHighlights',
+                  'http://tt.epicplay.com',
+                  'Can\'t find variable: ZiteReader',
+                  'jigsaw is not defined',
+                  'ComboSearch is not defined',
+                  'http://loading.retry.widdit.com/',
+                  'atomicFindClose',
+                  // Facebook borked
+                  'fb_xd_fragment',
+                  // ISP "optimizing" proxy - `Cache-Control: no-transform` seems to reduce this. (thanks @acdha)
+                  // See http://stackoverflow.com/questions/4113268/how-to-stop-javascript-injection-from-vodafone-proxy
+                  'bmi_SafeAddOnload',
+                  'EBCallBackMessageReceived',
+                  // See http://toolbar.conduit.com/Developer/HtmlAndGadget/Methods/JSInjection.aspx
+                  'conduitPage'
+                ],
+                ignoreUrls: [
+                  // Facebook flakiness
+                  /graph\.facebook\.com/i,
+                  // Facebook blocked
+                  /connect\.facebook\.net\/en_US\/all\.js/i,
+                  // Woopra flakiness
+                  /eatdifferent\.com\.woopra-ns\.com/i,
+                  /static\.woopra\.com\/js\/woopra\.js/i,
+                  // Chrome extensions
+                  /extensions\//i,
+                  /^chrome:\/\//i,
+                  // Other plugins
+                  /127\.0\.0\.1:4001\/isrunning/i,  // Cacaoweb
+                  /webappstoolbarba\.texthelp\.com\//i,
+                  /metrics\.itunes\.apple\.com\.edgesuite\.net\//i
+                ]
+            }).install();
+
+            {% if request.user.is_authenticated %}
+            Raven.setUser({
+                email: '{{ request.user.email }}',
+                id: '{{ request.user.id }}',
+                ip_address: '{{ request.META.REMOTE_ADDR }}'
+            });
+            {% endif %}
+            </script>
         {% endblock %}
 
         {% block meta %}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index f42e9cf879..24c6682802 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -48,7 +48,7 @@
             </fieldset>
             <div class="form-actions">
                 <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-                {% if not project.is_default_project %}
+                {% if not project.is_internal_project %}
                     <a href="{% url 'sentry-remove-project' project.team.slug project.slug %}" class="btn btn-danger">{% trans "Remove Project" %}</a>
                 {% else %}
                     <p class="pull-right">{% trans "This project cannot be removed. It is used internally by the Sentry server." %}</p>
diff --git a/src/sentry/templatetags/sentry_dsn.py b/src/sentry/templatetags/sentry_dsn.py
new file mode 100644
index 0000000000..137d4017a1
--- /dev/null
+++ b/src/sentry/templatetags/sentry_dsn.py
@@ -0,0 +1,36 @@
+from __future__ import absolute_import
+
+from django import template
+from django.conf import settings
+
+from sentry.app import cache
+from sentry.models import ProjectKey
+
+
+register = template.Library()
+
+
+def _get_project_key(project_id):
+    try:
+        return ProjectKey.objects.filter(
+            project=project_id,
+            roles=ProjectKey.roles.store,
+        )[0]
+    except IndexError:
+        return None
+
+
+@register.simple_tag()
+def public_dsn():
+    project_id = settings.SENTRY_FRONTEND_PROJECT or settings.SENTRY_PROJECT
+    cache_key = 'dsn:%s' % (project_id,)
+
+    result = cache.get(cache_key)
+    if result is None:
+        key = _get_project_key(project_id)
+        if key:
+            result = key.dsn_public
+        else:
+            result = ''
+        cache.set(cache_key, result, 60)
+    return result
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 6dc70d3802..a0da86d8c0 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -91,6 +91,7 @@ def get_default_context(request, existing_context=None, team=None):
         'URL_PREFIX': settings.SENTRY_URL_PREFIX,
         'PLUGINS': plugins,
         'STATUS_HIDDEN': STATUS_HIDDEN,
+        'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
     }
 
     if existing_context:
@@ -234,7 +235,3 @@ def plugin_config(plugin, project, request):
         'plugin_test_results': test_results,
         'plugin_is_configured': is_configured,
     }, context_instance=RequestContext(request))))
-
-
-def get_raven_js_url():
-    return settings.SENTRY_RAVEN_JS_URL
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index c070bf46d0..bb2868a9f0 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -4,25 +4,26 @@ from __future__ import absolute_import
 
 from django.conf import settings
 
-from sentry.models import Project, ProjectKey, User
-from sentry.receivers.core import create_default_project
+from sentry.models import Project, ProjectKey, Team, User
+from sentry.receivers.core import create_default_projects
 from sentry.testutils import TestCase
 
 
-class CreateDefaultProjectTest(TestCase):
+class CreateDefaultProjectsTest(TestCase):
     def test_simple(self):
         user, _ = User.objects.get_or_create(is_superuser=True, defaults={
             'username': 'test'
         })
+        Team.objects.filter(slug='sentry').delete()
         Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
 
-        create_default_project(created_models=[Project])
+        create_default_projects(created_models=[Project])
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
         assert project.owner == user
         assert project.public is False
-        assert project.name == 'Sentry (Internal)'
-        assert project.slug == 'sentry'
+        assert project.name == 'Backend'
+        assert project.slug == 'backend'
         team = project.team
         assert team.owner == user
         assert team.slug == 'sentry'
@@ -31,3 +32,32 @@ class CreateDefaultProjectTest(TestCase):
         assert not pk.roles.api
         assert pk.roles.store
         assert pk.user is None
+
+        # ensure that we dont hit an error here
+        create_default_projects(created_models=[Project])
+
+    def test_without_user(self):
+        User.objects.filter(is_superuser=True).delete()
+        Team.objects.filter(slug='sentry').delete()
+        Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+
+        create_default_projects(created_models=[Project])
+
+        user = User.objects.get(username='sentry')
+
+        project = Project.objects.get(id=settings.SENTRY_PROJECT)
+        assert project.owner == user
+        assert project.public is False
+        assert project.name == 'Backend'
+        assert project.slug == 'backend'
+        team = project.team
+        assert team.owner == user
+        assert team.slug == 'sentry'
+
+        pk = ProjectKey.objects.get(project=project)
+        assert not pk.roles.api
+        assert pk.roles.store
+        assert pk.user is None
+
+        # ensure that we dont hit an error here
+        create_default_projects(created_models=[Project])
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 728871f242..ebd8beb9cf 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -7,7 +7,7 @@ import mock
 from django.conf import settings
 from exam import fixture
 
-from sentry.models import Project, ProjectOption
+from sentry.models import Project
 from sentry.testutils import TestCase
 from sentry.utils.http import (
     is_same_domain, is_valid_origin, get_origins, absolute_uri)
@@ -45,16 +45,15 @@ class GetOriginsTestCase(TestCase):
 
     def test_project(self):
         project = Project.objects.get()
-        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+        project.update_option('sentry:origins', ['http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN=None):
             result = get_origins(project)
             self.assertEquals(result, frozenset(['http://foo.example']))
 
     def test_project_and_setting(self):
-        from sentry.models import Project, ProjectOption
         project = Project.objects.get()
-        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+        project.update_option('sentry:origins', ['http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
             result = get_origins(project)
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
index fbc8abccef..2503a3bbbd 100644
--- a/tests/sentry/web/helpers/tests.py
+++ b/tests/sentry/web/helpers/tests.py
@@ -6,7 +6,7 @@ import mock
 
 from django.contrib.auth.models import AnonymousUser
 from django.core.urlresolvers import reverse
-from sentry.web.helpers import get_login_url, group_is_public, get_raven_js_url
+from sentry.web.helpers import get_login_url, group_is_public
 from sentry.testutils import TestCase
 
 
@@ -71,13 +71,3 @@ class GroupIsPublicTest(TestCase):
         self.group.is_public = True
         result = group_is_public(self.group, AnonymousUser())
         assert result is True
-
-
-class GetRavenJsUrl(TestCase):
-    def test_with_custom_raven_js_url(self):
-        url = 'my.cdn/1.0/raven.min.js'
-        with self.settings(SENTRY_RAVEN_JS_URL=url):
-            self.assertEquals(get_raven_js_url(), url)
-
-    def test_with_default_raven_js_url(self):
-        self.assertEquals(get_raven_js_url(), 'cdn.ravenjs.com/1.1.15/jquery,native/raven.min.js')
