commit c56295259f00aff5a2254320a09eac622986aa56
Author: Dan Fuller <dfuller@sentry.io>
Date:   Thu May 2 15:59:39 2019 -0700

    feat(api): Add endpoint to return details of a specific incident. (SEN-520)
    
    This endpoint returns details about a specific incident. Same format as the list endpoint.

diff --git a/src/sentry/api/bases/incident.py b/src/sentry/api/bases/incident.py
new file mode 100644
index 0000000000..aecb1cc348
--- /dev/null
+++ b/src/sentry/api/bases/incident.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from sentry.api.bases.organization import OrganizationPermission
+
+
+class IncidentPermission(OrganizationPermission):
+    scope_map = {
+        'GET': ['org:read', 'org:write', 'org:admin'],
+        'POST': ['org:write', 'org:admin'],
+        'PUT': ['org:write', 'org:admin'],
+    }
diff --git a/src/sentry/api/endpoints/organization_incident_details.py b/src/sentry/api/endpoints/organization_incident_details.py
new file mode 100644
index 0000000000..f9ae48fb55
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_incident_details.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry import features
+from sentry.api.bases.incident import IncidentPermission
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.incidents.models import Incident
+
+
+class OrganizationIncidentDetailsEndpoint(OrganizationEndpoint):
+    permission_classes = (IncidentPermission, )
+
+    def convert_args(self, request, incident_id, *args, **kwargs):
+        args, kwargs = super(OrganizationIncidentDetailsEndpoint, self).convert_args(
+            request,
+            *args,
+            **kwargs
+        )
+        organization = kwargs['organization']
+
+        if not features.has('organizations:incidents', organization, actor=request.user):
+            raise ResourceDoesNotExist
+
+        try:
+            kwargs['incident'] = Incident.objects.get(
+                organization=organization,
+                id=incident_id,
+            )
+        except Incident.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return args, kwargs
+
+    def get(self, request, organization, incident):
+        """
+        Fetch an Incident.
+        ``````````````````
+        :auth: required
+        """
+
+        return Response(serialize(incident, request.user))
diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index 16a73eadee..5f901a6891 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -5,10 +5,9 @@ from rest_framework.exceptions import PermissionDenied
 from rest_framework.response import Response
 
 from sentry import features
-from sentry.api.bases.organization import (
-    OrganizationEndpoint,
-    OrganizationPermission,
-)
+from sentry.api.bases.incident import IncidentPermission
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
 from sentry.api.paginator import OffsetPaginator
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import ListField
@@ -21,13 +20,6 @@ from sentry.models.group import Group
 from sentry.models.project import Project
 
 
-class OrganizationIncidentPermission(OrganizationPermission):
-    scope_map = {
-        'GET': ['org:read', 'org:write', 'org:admin'],
-        'POST': ['org:write', 'org:admin'],
-    }
-
-
 class IncidentSerializer(serializers.Serializer):
     projects = ListField(
         child=serializers.CharField(),
@@ -70,7 +62,7 @@ class IncidentSerializer(serializers.Serializer):
 
 
 class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
-    permission_classes = (OrganizationIncidentPermission, )
+    permission_classes = (IncidentPermission, )
 
     def get(self, request, organization):
         """
@@ -81,7 +73,7 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
         :auth: required
         """
         if not features.has('organizations:incidents', organization, actor=request.user):
-            return self.respond(status=404)
+            raise ResourceDoesNotExist
 
         incidents = Incident.objects.fetch_for_organization(
             organization,
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 62016b8eef..181783ed6e 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -48,6 +48,7 @@ from .endpoints.group_tagkey_values import GroupTagKeyValuesEndpoint
 from .endpoints.group_tombstone_details import GroupTombstoneDetailsEndpoint
 from .endpoints.group_tombstone import GroupTombstoneEndpoint
 from .endpoints.group_user_reports import GroupUserReportsEndpoint
+from .endpoints.organization_incident_details import OrganizationIncidentDetailsEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.internal_queue_tasks import InternalQueueTasksEndpoint
 from .endpoints.internal_quotas import InternalQuotasEndpoint
@@ -412,6 +413,18 @@ urlpatterns = patterns(
         name='sentry-api-0-user-subscriptions'
     ),
 
+    # Incidents
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/$',
+        OrganizationIncidentIndexEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-index'
+    ),
+    url(
+        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/(?P<incident_id>[^\/]+)/$',
+        OrganizationIncidentDetailsEndpoint.as_view(),
+        name='sentry-api-0-organization-incident-details'
+    ),
+
     # Organizations
 
     url(
@@ -571,11 +584,6 @@ urlpatterns = patterns(
         OrganizationGroupIndexEndpoint.as_view(),
         name='sentry-api-0-organization-group-index'
     ),
-    url(
-        r'^organizations/(?P<organization_slug>[^\/]+)/incidents/$',
-        OrganizationIncidentIndexEndpoint.as_view(),
-        name='sentry-api-0-organization-incident-index'
-    ),
     url(
         r'^organizations/(?P<organization_slug>[^\/]+)/integrations/$',
         OrganizationIntegrationsEndpoint.as_view(),
diff --git a/tests/sentry/api/endpoints/test_organization_incident_details.py b/tests/sentry/api/endpoints/test_organization_incident_details.py
new file mode 100644
index 0000000000..a54eedd1cc
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_incident_details.py
@@ -0,0 +1,44 @@
+from __future__ import absolute_import
+
+from exam import fixture
+
+from sentry.api.serializers import serialize
+from sentry.testutils import APITestCase
+
+
+class IncidentDetailsTest(APITestCase):
+    endpoint = 'sentry-api-0-organization-incident-details'
+
+    @fixture
+    def organization(self):
+        return self.create_organization(owner=self.create_user())
+
+    @fixture
+    def project(self):
+        return self.create_project(organization=self.organization)
+
+    @fixture
+    def user(self):
+        return self.create_user()
+
+    def test_simple(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        incident = self.create_incident()
+        self.login_as(self.user)
+        with self.feature('organizations:incidents'):
+            resp = self.get_valid_response(incident.organization.slug, incident.id)
+        assert resp.data == serialize(incident)
+
+    def test_no_perms(self):
+        incident = self.create_incident()
+        self.login_as(self.create_user())
+        with self.feature('organizations:incidents'):
+            resp = self.get_response(incident.organization.slug, incident.id)
+        assert resp.status_code == 403
+
+    def test_no_feature(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        incident = self.create_incident()
+        self.login_as(self.user)
+        resp = self.get_response(incident.organization.slug, incident.id)
+        assert resp.status_code == 404
