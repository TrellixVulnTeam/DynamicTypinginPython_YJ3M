commit 2c6933ed7ae221c458d78f91fe4ae466220cd5f8
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Jun 8 12:11:57 2017 +0200

    Added skeleton of java processor

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index af02ad62b0..015d5b1fee 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -287,6 +287,7 @@ INSTALLED_APPS = (
     'sentry.analytics.events',
     'sentry.nodestore',
     'sentry.search',
+    'sentry.lang.java',
     'sentry.lang.javascript',
     'sentry.lang.native',
     'sentry.plugins.sentry_interface_types',
diff --git a/src/sentry/lang/java/__init__.py b/src/sentry/lang/java/__init__.py
new file mode 100644
index 0000000000..40dd8a87ec
--- /dev/null
+++ b/src/sentry/lang/java/__init__.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from sentry.plugins import register
+
+from .plugin import JavaPlugin
+
+register(JavaPlugin)
diff --git a/src/sentry/lang/java/plugin.py b/src/sentry/lang/java/plugin.py
new file mode 100644
index 0000000000..9b6228eff3
--- /dev/null
+++ b/src/sentry/lang/java/plugin.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from sentry.plugins import Plugin2
+from sentry.stacktraces import StacktraceProcessor
+
+
+FRAME_CACHE_VERSION = 1
+
+
+class JavaStacktraceProcessor(StacktraceProcessor):
+
+    def __init__(self, *args, **kwargs):
+        StacktraceProcessor.__init__(self, *args, **kwargs)
+        debug_meta = self.data.get('debug_meta')
+        if debug_meta:
+            self.available = True
+            self.debug_meta = debug_meta
+        else:
+            self.available = False
+
+    def handles_frame(self, frame, stacktrace_info):
+        platform = frame.get('platform') or self.data.get('platform')
+        return (
+            platform == 'java' and
+            self.available and
+            'function' in frame
+        )
+
+    def preprocess_frame(self, processable_frame):
+        pass
+
+    def preprocess_step(self, processing_task):
+        if not self.available:
+            return False
+
+    def process_frame(self, processable_frame, processing_task):
+        pass
+
+
+class JavaPlugin(Plugin2):
+    can_disable = False
+
+    def get_stacktrace_processors(self, data, stacktrace_infos,
+                                  platforms, **kwargs):
+        if 'java' in platforms:
+            return [JavaStacktraceProcessor]
