commit b688edc63865d5ddee62e5c24969de7b486c4963
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Jun 8 23:12:00 2016 +0200

    Added exception mechanism to UI

diff --git a/src/sentry/interfaces/exception.py b/src/sentry/interfaces/exception.py
index 8b52302893..7692c0d918 100644
--- a/src/sentry/interfaces/exception.py
+++ b/src/sentry/interfaces/exception.py
@@ -106,6 +106,7 @@ class SingleException(Interface):
         return {
             'type': self.type,
             'value': self.value,
+            'mechanism': self.mechanism or None,
             'module': self.module,
             'stacktrace': stacktrace,
             'raw_stacktrace': raw_stacktrace,
@@ -125,6 +126,7 @@ class SingleException(Interface):
         return {
             'type': self.type,
             'value': unicode(self.value) if self.value else None,
+            'mechanism': self.mechanism or None,
             'module': self.module,
             'stacktrace': stacktrace,
             'rawStacktrace': raw_stacktrace,
diff --git a/src/sentry/lang/native/plugin.py b/src/sentry/lang/native/plugin.py
index 75d6d9fccf..57ebe073d5 100644
--- a/src/sentry/lang/native/plugin.py
+++ b/src/sentry/lang/native/plugin.py
@@ -37,15 +37,15 @@ def exception_from_apple_error_or_diagnosis(error, diagnosis=None):
             if 'value' in nsexception:
                 rv['value'] = nsexception['value']
 
-    if 'reason' in error and 'value' in rv:
+    if 'reason' in error and 'value' not in rv:
         rv['value'] = error['reason']
-    if 'diagnosis' in error and 'value' in rv:
+    if 'diagnosis' in error and 'value' not in rv:
         rv['value'] = error['diagnosis']
 
-    if 'mach' in rv:
-        rv['mach_exception'] = rv['mach']
-    if 'signal' in rv:
-        rv['posix_signal'] = rv['signal']
+    if 'mach' in error:
+        mechanism['mach_exception'] = error['mach']
+    if 'signal' in error:
+        mechanism['posix_signal'] = error['signal']
 
     if mechanism:
         mechanism.setdefault('type', 'cocoa')
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index e4eecce81d..dcdc5cf34c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -2,6 +2,7 @@ import React from 'react';
 import {defined} from '../../../utils';
 
 import StacktraceContent from './stacktraceContent';
+import ExceptionMechanism from './exceptionMechanism';
 
 const ExceptionContent = React.createClass({
   propTypes: {
@@ -23,6 +24,11 @@ const ExceptionContent = React.createClass({
           {exc.value &&
             <pre className="exc-message">{exc.value}</pre>
           }
+          {exc.mechanism &&
+            <ExceptionMechanism
+              data={exc.mechanism}
+              platform={this.props.platform}/>
+          }
           {defined(exc.stacktrace) &&
             <StacktraceContent
                 data={this.props.type === 'original' ? exc.stacktrace : exc.rawStacktrace}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
new file mode 100644
index 0000000000..7e467ba2af
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -0,0 +1,49 @@
+import React from 'react';
+
+const ExceptionMechanism = React.createClass({
+  propTypes: {
+    data: React.PropTypes.object.isRequired,
+    platform: React.PropTypes.string,
+  },
+
+  renderMachException(data) {
+    return (
+      <p>
+        <strong>Mach Exception</strong>: <code>{data.exception_name} ({data.exception})</code>
+      </p>
+    );
+  },
+
+  renderPosixSignal(data) {
+    return (
+      <p>
+        <strong>Posix Signal</strong>: <code>{data.name} ({data.signal})</code>
+      </p>
+    );
+  },
+
+  render() {
+    let elements = [];
+
+    if (this.props.data.mach_exception) {
+      elements.push(this.renderMachException(this.props.data.mach_exception));
+    }
+    if (this.props.data.posix_signal) {
+      elements.push(this.renderPosixSignal(this.props.data.posix_signal));
+    }
+
+    if (elements.length === 0) {
+      return null;
+    }
+
+    return (
+      <div className="exception-mechanism">
+        <ul>{elements.map((item, idx) => {
+          return <li key={idx}>{item}</li>;
+        })}</ul>
+      </div>
+    );
+  }
+});
+
+export default ExceptionMechanism;
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index cf6520ccc7..9a67b7ac62 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -1249,6 +1249,19 @@ ol.context-line {
   background: lighten(@blue-light, 30);
 }
 
+.exception-mechanism {
+  margin: 15px 0;
+  ul {
+    list-style: none;
+    margin: 0;
+    padding: 0;
+    li, li p {
+      margin: 0;
+      padding: 0;
+    }
+  }
+}
+
 #full-message {
   line-height: 1.5em;
 
