commit 9de8938a5bb9a901dd3b68860e995fcd65addc24
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jan 28 11:23:24 2012 -0800

    Added some initial support for worker use withing insert_data_to_database

diff --git a/sentry/conf/defaults.py b/sentry/conf/defaults.py
index 2f6a09de8b..492933bca6 100644
--- a/sentry/conf/defaults.py
+++ b/sentry/conf/defaults.py
@@ -102,3 +102,7 @@ VIEWS = (
 # Should users without 'sentry.add_project' permissions be allowed
 # to create new projects
 ALLOW_PROJECT_CREATION = False
+
+# Instructs Sentry to utilize it's queue for background jobs. You will
+# need to ensure that you have workers running if you enable the queue.
+USE_QUEUE = False
diff --git a/sentry/coreapi.py b/sentry/coreapi.py
index 778487834e..2487c5ded5 100644
--- a/sentry/coreapi.py
+++ b/sentry/coreapi.py
@@ -16,6 +16,7 @@ from django.utils.encoding import smart_str
 from sentry.conf import settings
 from sentry.exceptions import InvalidData, InvalidInterface
 from sentry.models import Group, ProjectMember
+from sentry.queue.client import delay
 from sentry.utils import is_float, json
 from sentry.utils.auth import get_signature, parse_auth_header
 
@@ -158,31 +159,47 @@ def ensure_valid_project_id(desired_project, data):
         data['project'] = 1
 
 
-def insert_data_to_database(data):
-    def process_data_timestamp(data):
-        if is_float(data['timestamp']):
-            try:
-                data['timestamp'] = datetime.fromtimestamp(float(data['timestamp']))
-            except:
-                logger.exception('Failed reading timestamp')
-                del data['timestamp']
-        elif not isinstance(data['timestamp'], datetime):
-            if '.' in data['timestamp']:
-                format = '%Y-%m-%dT%H:%M:%S.%f'
-            else:
-                format = '%Y-%m-%dT%H:%M:%S'
-            if 'Z' in data['timestamp']:
-                # support UTC market, but not other timestamps
-                format += 'Z'
-            try:
-                data['timestamp'] = datetime.strptime(data['timestamp'], format)
-            except:
-                logger.exception('Failed reading timestamp')
-                del data['timestamp']
+def process_data_timestamp(data):
+    if is_float(data['timestamp']):
+        try:
+            data['timestamp'] = datetime.fromtimestamp(float(data['timestamp']))
+        except:
+            logger.exception('Failed reading timestamp')
+            del data['timestamp']
+    elif not isinstance(data['timestamp'], datetime):
+        if '.' in data['timestamp']:
+            format = '%Y-%m-%dT%H:%M:%S.%f'
+        else:
+            format = '%Y-%m-%dT%H:%M:%S'
+        if 'Z' in data['timestamp']:
+            # support UTC market, but not other timestamps
+            format += 'Z'
+        try:
+            data['timestamp'] = datetime.strptime(data['timestamp'], format)
+        except:
+            logger.exception('Failed reading timestamp')
+            del data['timestamp']
+
+    return data
+
+
+def validate_data(project, data):
+    ensure_valid_project_id(project, data)
+
     if 'timestamp' in data:
         process_data_timestamp(data)
 
-    try:
-        Group.objects.from_kwargs(**data)
-    except (InvalidInterface, InvalidData), e:
-        raise APIError(e)
+    return data
+
+
+def insert_data_to_database(data, queue=None):
+    if queue is None:
+        queue = settings.USE_QUEUE
+
+    if queue:
+        delay(insert_data_to_database, data, queue=False)
+    else:
+        try:
+            Group.objects.from_kwargs(**data)
+        except (InvalidInterface, InvalidData), e:
+            raise APIError(e)
diff --git a/sentry/queue/client.py b/sentry/queue/client.py
index 7accca6832..474fb41563 100644
--- a/sentry/queue/client.py
+++ b/sentry/queue/client.py
@@ -37,3 +37,4 @@ class Broker(object):
             )
 
 broker = Broker(settings.QUEUE)
+delay = broker.delay
diff --git a/sentry/services/udp.py b/sentry/services/udp.py
index c30505155b..9907ecfcfb 100644
--- a/sentry/services/udp.py
+++ b/sentry/services/udp.py
@@ -28,7 +28,7 @@ class SentryUDPServer(Service):
     def handle(self, data, address):
         from sentry.utils.auth import parse_auth_header
         from sentry.coreapi import (project_from_auth_vars, decode_and_decompress_data, safely_load_json_string,
-                                    ensure_valid_project_id, insert_data_to_database, APIError)
+                                    validate_data, insert_data_to_database, APIError)
         try:
             try:
                 auth_header, data = data.split("\n\n", 1)
@@ -40,7 +40,7 @@ class SentryUDPServer(Service):
                 data = decode_and_decompress_data(data)
             data = safely_load_json_string(data)
 
-            ensure_valid_project_id(project, data)
+            validate_data(project, data)
 
             return insert_data_to_database(data)
         except APIError, error:
diff --git a/sentry/web/api.py b/sentry/web/api.py
index 648bc2465c..1a8baee400 100644
--- a/sentry/web/api.py
+++ b/sentry/web/api.py
@@ -15,7 +15,7 @@ from django.views.decorators.http import require_http_methods
 from sentry.conf import settings
 from sentry.coreapi import project_from_auth_vars, project_from_api_key_and_id, \
   project_from_id, decode_and_decompress_data, safely_load_json_string, \
-  ensure_valid_project_id, insert_data_to_database, APIError, APIUnauthorized, \
+  validate_data, insert_data_to_database, APIError, APIUnauthorized, \
   extract_auth_vars
 from sentry.models import Group, GroupBookmark, Project, View
 from sentry.utils import json
@@ -55,7 +55,7 @@ def store(request):
             data = decode_and_decompress_data(data)
         data = safely_load_json_string(data)
 
-        ensure_valid_project_id(project, data)
+        validate_data(project, data)
 
         insert_data_to_database(data)
     except APIError, error:
diff --git a/tests/api/tests.py b/tests/api/tests.py
index 4229906838..67ade94c96 100644
--- a/tests/api/tests.py
+++ b/tests/api/tests.py
@@ -2,15 +2,18 @@
 
 from __future__ import absolute_import
 
+import datetime
 import mock
 import time
 
 from django.contrib.auth.models import User
+from djkombu.models import Message
 
 from sentry.models import Project
 from sentry.coreapi import project_from_id, project_from_api_key_and_id, \
   extract_auth_vars, project_from_auth_vars, validate_hmac, APIUnauthorized, \
-  APIForbidden, APITimestampExpired, APIError
+  APIForbidden, APITimestampExpired, APIError, process_data_timestamp, \
+  insert_data_to_database
 from sentry.utils.auth import get_signature
 
 from tests.base import TestCase
@@ -134,3 +137,40 @@ class APITest(TestCase):
 
             with self.assertRaises(APIError):
                 validate_hmac('foo', 'signature', 'foo', 'foo')
+
+    def test_process_data_timestamp_iso_timestamp(self):
+        data = process_data_timestamp({
+            'timestamp': '2012-01-01T10:30:45'
+        })
+        d = datetime.datetime(2012, 01, 01, 10, 30, 45)
+        self.assertTrue('timestamp' in data)
+        self.assertEquals(data['timestamp'], d)
+
+    def test_process_data_timestamp_iso_timestamp_with_ms(self):
+        data = process_data_timestamp({
+            'timestamp': '2012-01-01T10:30:45.434'
+        })
+        d = datetime.datetime(2012, 01, 01, 10, 30, 45, 434000)
+        self.assertTrue('timestamp' in data)
+        self.assertEquals(data['timestamp'], d)
+
+    def test_process_data_timestamp_iso_timestamp_with_Z(self):
+        data = process_data_timestamp({
+            'timestamp': '2012-01-01T10:30:45Z'
+        })
+        d = datetime.datetime(2012, 01, 01, 10, 30, 45)
+        self.assertTrue('timestamp' in data)
+        self.assertEquals(data['timestamp'], d)
+
+    def test_insert_data_to_database_with_queue(self):
+        insert_data_to_database({
+            'foo': 'bar'
+        }, True)
+        self.assertEquals(Message.objects.filter(visible=True).count(), 1)
+
+    def test_insert_data_to_database_without_queue(self):
+        with mock.patch('sentry.models.Group.objects.from_kwargs') as from_kwargs:
+            insert_data_to_database({
+                'foo': 'bar'
+            }, False)
+            from_kwargs.assert_called_once_with(foo='bar')
