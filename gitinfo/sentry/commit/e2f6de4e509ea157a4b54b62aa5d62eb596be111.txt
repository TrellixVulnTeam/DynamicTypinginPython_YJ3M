commit e2f6de4e509ea157a4b54b62aa5d62eb596be111
Author: Jess MacQueen <jess@getsentry.com>
Date:   Tue Sep 6 17:30:46 2016 -0700

    pr feedback - more test coverage + limit to only teams user has joined

diff --git a/src/sentry/api/endpoints/organization_user_issues_search.py b/src/sentry/api/endpoints/organization_user_issues_search.py
index a473051f51..2e5f5f361c 100644
--- a/src/sentry/api/endpoints/organization_user_issues_search.py
+++ b/src/sentry/api/endpoints/organization_user_issues_search.py
@@ -5,7 +5,10 @@ from rest_framework.response import Response
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.group import StreamGroupSerializer
-from sentry.models import EventUser, Group, GroupTagValue, Project
+from sentry.models import (
+    EventUser, Group, GroupTagValue, OrganizationMember,
+    OrganizationMemberTeam, Project, Team
+)
 
 
 class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint):
@@ -18,13 +21,22 @@ class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint):
 
         limit = request.GET.get('limit', 100)
 
-        team_list = list(request.access.teams)
+        # limit to only teams user has opted into
+        member = OrganizationMember.objects.get(user=request.user,
+                                                organization=organization)
+        teams = Team.objects.filter(
+            id__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=member,
+                is_active=True,
+            ).values('team')
+        )
+
         projects = Project.objects.filter(
-            team__in=team_list,
+            team__in=list(teams),
         )
 
         event_users = EventUser.objects.filter(email=email,
-                                               project_id__in=[p.id for p in projects])
+                                               project_id__in=[p.id for p in projects])[:1000]
 
         projects = list(set([e.project_id for e in event_users]))
 
diff --git a/tests/sentry/api/endpoints/test_organization_user_issues_search.py b/tests/sentry/api/endpoints/test_organization_user_issues_search.py
index 75f3aca0bc..82936e0f5c 100644
--- a/tests/sentry/api/endpoints/test_organization_user_issues_search.py
+++ b/tests/sentry/api/endpoints/test_organization_user_issues_search.py
@@ -2,57 +2,88 @@ from __future__ import absolute_import
 
 from six.moves.urllib.parse import urlencode
 
+from datetime import timedelta
 from django.core.urlresolvers import reverse
+from django.utils import timezone
 
 from sentry.models import EventUser, GroupTagValue, OrganizationMemberTeam
 from sentry.testutils import APITestCase
 
 
 class OrganizationUserIssuesSearchTest(APITestCase):
-    def test_simple(self):
-        org = self.create_organization(name='baz')
-        org.flags.allow_joinleave = False
-        org.save()
-        team = self.create_team(organization=org)
-        project1 = self.create_project(team=team)
-        project2 = self.create_project(team=team)
-        group1 = self.create_group(project=project1)
-        group2 = self.create_group(project=project2)
+    def setUp(self):
+        super(OrganizationUserIssuesSearchTest, self).setUp()
+        self.org = self.create_organization()
+        self.org.flags.allow_joinleave = False
+        self.org.save()
+        self.team1 = self.create_team(organization=self.org)
+        self.team2 = self.create_team(organization=self.org)
+        self.project1 = self.create_project(team=self.team1)
+        self.project2 = self.create_project(team=self.team2)
+        group1 = self.create_group(project=self.project1,
+                                   last_seen=timezone.now() - timedelta(minutes=1))
+        group2 = self.create_group(project=self.project2)
 
-        user = self.create_user()
-        member = self.create_member(user=user, organization=org)
-        self.login_as(user=user)
-
-        EventUser.objects.create(email='foo@example.com', project=project1)
-        EventUser.objects.create(email='foo@example.com', project=project2)
+        EventUser.objects.create(email='foo@example.com', project=self.project1)
+        EventUser.objects.create(email='bar@example.com', project=self.project1)
+        EventUser.objects.create(email='foo@example.com', project=self.project2)
 
         GroupTagValue.objects.create(key='sentry:user',
                                      value='email:foo@example.com',
                                      group=group1,
-                                     project=project1)
+                                     project=self.project1)
+        GroupTagValue.objects.create(key='sentry:user',
+                                     value='email:bar@example.com',
+                                     group=group1,
+                                     project=self.project1)
         GroupTagValue.objects.create(key='sentry:user',
                                      value='email:foo@example.com',
                                      group=group2,
-                                     project=project2)
+                                     project=self.project2)
 
-        url = reverse('sentry-api-0-organization-issue-search', args=[org.slug])
-        url = '%s?%s' % (url, urlencode({'email': 'foo@example.com'}))
+    def get_url(self):
+        return reverse('sentry-api-0-organization-issue-search', args=[self.org.slug])
+
+    def test_no_team_access(self):
+        user = self.create_user()
+        self.create_member(user=user, organization=self.org)
+        self.login_as(user=user)
+
+        url = '%s?%s' % (self.get_url(), urlencode({'email': 'foo@example.com'}))
 
-        # User has no team/project access yet
         response = self.client.get(url, format='json')
         assert response.status_code == 200
         assert len(response.data) == 0
 
+    def test_has_access(self):
+        user = self.create_user()
+        member = self.create_member(user=user, organization=self.org)
+        self.login_as(user=user)
+
+        OrganizationMemberTeam.objects.create(
+            team=self.team1,
+            organizationmember=member,
+            is_active=True,
+        )
+
+        url = '%s?%s' % (self.get_url(), urlencode({'email': 'foo@example.com'}))
+        response = self.client.get(url, format='json')
+
+        # result shouldn't include results from team2/project2 or bar@example.com
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['project']['slug'] == self.project1.slug
+
         OrganizationMemberTeam.objects.create(
-            team=team,
+            team=self.team2,
             organizationmember=member,
             is_active=True,
         )
 
         response = self.client.get(url, format='json')
 
-        # now user has team/project access
+        # now result should include results from team2/project2
         assert response.status_code == 200
         assert len(response.data) == 2
-        assert response.data[0]['project']['slug'] == project2.slug
-        assert response.data[1]['project']['slug'] == project1.slug
+        assert response.data[0]['project']['slug'] == self.project2.slug
+        assert response.data[1]['project']['slug'] == self.project1.slug
