commit 9d13ff31f0ba56a2315f88bf2df7ce7769c7a8dd
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Tue Aug 13 11:10:29 2019 -0400

    chore(ts): api.jsx to api.tsx (#14148)

diff --git a/package.json b/package.json
index f55b7a9565..93adda6c87 100644
--- a/package.json
+++ b/package.json
@@ -22,6 +22,7 @@
     "@sentry/integrations": "5.6.0-beta.4",
     "@types/echarts": "^4.1.10",
     "@types/classnames": "^2.2.0",
+    "@types/jest": "^24.0.17",
     "@types/jquery": "^2.0.53",
     "@types/lodash": "^4.14.134",
     "@types/moment-timezone": "^0.5.12",
diff --git a/src/sentry/static/sentry/app/__mocks__/api.jsx b/src/sentry/static/sentry/app/__mocks__/api.tsx
similarity index 55%
rename from src/sentry/static/sentry/app/__mocks__/api.jsx
rename to src/sentry/static/sentry/app/__mocks__/api.tsx
index 67f0258bcf..c17162ae13 100644
--- a/src/sentry/static/sentry/app/__mocks__/api.jsx
+++ b/src/sentry/static/sentry/app/__mocks__/api.tsx
@@ -1,8 +1,10 @@
-const RealClient = require.requireActual('app/api');
+import * as ImportedClient from 'app/api';
+
+const RealClient: typeof ImportedClient = jest.requireActual('app/api');
 
 export class Request {}
 
-const respond = (isAsync, fn, ...args) => {
+const respond = (isAsync: boolean, fn, ...args): void => {
   if (fn) {
     if (isAsync) {
       setTimeout(() => fn(...args), 1);
@@ -16,8 +18,25 @@ const DEFAULT_MOCK_RESPONSE_OPTIONS = {
   predicate: () => true,
 };
 
+const mergeMock = jest.fn();
+
+type ResponseType = JQueryXHR & {
+  url: string;
+  statusCode: number;
+  method: string;
+  callCount: 0;
+  body: any;
+  headers: {[key: string]: string};
+};
+
 class Client {
-  static mockResponses = [];
+  static mockResponses: Array<
+    [
+      ResponseType,
+      jest.Mock,
+      (url: string, options: Readonly<ImportedClient.RequestOptions>) => boolean
+    ]
+  > = [];
 
   static clearMockResponses() {
     Client.mockResponses = [];
@@ -42,8 +61,8 @@ class Client {
     return mock;
   }
 
-  static findMockResponse(url, options) {
-    return Client.mockResponses.find(([response, mock, predicate]) => {
+  static findMockResponse(url: string, options: Readonly<ImportedClient.RequestOptions>) {
+    return Client.mockResponses.find(([response, _mock, predicate]) => {
       const matchesURL = url === response.url;
       const matchesMethod = (options.method || 'GET') === response.method;
       const matchesPredicate = predicate(url, options);
@@ -61,8 +80,9 @@ class Client {
 
   static mockAsync = false;
 
-  wrapCallback(id, error) {
+  wrapCallback(_id, error) {
     return (...args) => {
+      // @ts-ignore
       if (this.hasProjectBeenRenamed(...args)) {
         return;
       }
@@ -70,24 +90,33 @@ class Client {
     };
   }
 
-  requestPromise(path, {includeAllArgs, ...options} = {}) {
+  requestPromise(
+    path,
+    {
+      includeAllArgs,
+      ...options
+    }: {includeAllArgs?: boolean} & Readonly<ImportedClient.RequestOptions> = {}
+  ) {
     return new Promise((resolve, reject) => {
       this.request(path, {
         ...options,
         success: (data, ...args) => {
           includeAllArgs ? resolve([data, ...args]) : resolve(data);
         },
-        error: (error, ...args) => {
+        error: (error, ..._args) => {
           reject(error);
         },
       });
     });
   }
 
-  request(url, options) {
-    const [response, mock] = Client.findMockResponse(url, options) || [];
+  request(url, options: Readonly<ImportedClient.RequestOptions> = {}) {
+    const [response, mock] = Client.findMockResponse(url, options) || [
+      undefined,
+      undefined,
+    ];
 
-    if (!response) {
+    if (!response || !mock) {
       // Endpoints need to be mocked
       throw new Error(
         `No mocked response found for request:\n\t${options.method || 'GET'} ${url}`
@@ -103,17 +132,33 @@ class Client {
 
       if (response.statusCode !== 200) {
         response.callCount++;
-        const resp = {
-          status: response.statusCode,
-          responseText: JSON.stringify(body),
-          responseJSON: body,
-        };
+
+        const deferred = $.Deferred();
+
+        const errorResponse: JQueryXHR = Object.assign(
+          {
+            status: response.statusCode,
+            responseText: JSON.stringify(body),
+            responseJSON: body,
+          },
+          {
+            overrideMimeType: () => {},
+            abort: () => {},
+            then: () => {},
+            error: () => {},
+          },
+          deferred,
+          new XMLHttpRequest()
+        );
         this.handleRequestError(
           {
+            id: '1234',
             path: url,
             requestOptions: options,
           },
-          resp
+          errorResponse,
+          'error',
+          'error'
         );
       } else {
         response.callCount++;
@@ -131,15 +176,18 @@ class Client {
 
     respond(Client.mockAsync, options.complete);
   }
-}
 
-Client.prototype.handleRequestError = RealClient.Client.prototype.handleRequestError;
-Client.prototype.uniqueId = RealClient.Client.prototype.uniqueId;
-Client.prototype.bulkUpdate = RealClient.Client.prototype.bulkUpdate;
-Client.prototype._chain = RealClient.Client.prototype._chain;
-Client.prototype._wrapRequest = RealClient.Client.prototype._wrapRequest;
-Client.prototype.hasProjectBeenRenamed =
-  RealClient.Client.prototype.hasProjectBeenRenamed;
-Client.prototype.merge = RealClient.Client.prototype.merge;
+  hasProjectBeenRenamed = RealClient.Client.prototype.hasProjectBeenRenamed;
+  handleRequestError = RealClient.Client.prototype.handleRequestError;
+  bulkUpdate = RealClient.Client.prototype.bulkUpdate;
+  _chain = RealClient.Client.prototype._chain;
+  _wrapRequest = RealClient.Client.prototype._wrapRequest;
+
+  merge(params, options) {
+    mergeMock(params, options);
+
+    return RealClient.Client.prototype.merge.call(this, params, options);
+  }
+}
 
-export {Client};
+export {Client, mergeMock};
diff --git a/src/sentry/static/sentry/app/actionCreators/events.tsx b/src/sentry/static/sentry/app/actionCreators/events.tsx
index bc2c754c1d..cfceaad0eb 100644
--- a/src/sentry/static/sentry/app/actionCreators/events.tsx
+++ b/src/sentry/static/sentry/app/actionCreators/events.tsx
@@ -1,3 +1,4 @@
+import {Client} from 'app/api';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {getPeriod} from 'app/utils/getPeriod';
 import {EventsStats, Organization} from 'app/types';
@@ -33,8 +34,7 @@ type Options = {
  * @param {String} options.query Search query
  */
 export const doEventsRequest = (
-  // TODO(ts): Update when we type `app/api`
-  api: any,
+  api: Client,
   {
     organization,
     project,
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.tsx
similarity index 66%
rename from src/sentry/static/sentry/app/api.jsx
rename to src/sentry/static/sentry/app/api.tsx
index 2cf6e0d9c8..75e399042c 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.tsx
@@ -14,7 +14,10 @@ import GroupActions from 'app/actions/groupActions';
 import createRequestError from 'app/utils/requestError/createRequestError';
 
 export class Request {
-  constructor(xhr) {
+  alive: boolean;
+  xhr: JQueryXHR;
+
+  constructor(xhr: JQueryXHR) {
     this.xhr = xhr;
     this.alive = true;
   }
@@ -26,12 +29,35 @@ export class Request {
   }
 }
 
+type ParamsType = {
+  itemIds?: Array<number>;
+  query?: string;
+  environment?: string | null;
+  project?: Array<number> | null;
+};
+
+type QueryArgs =
+  | {
+      query: string;
+      environment?: string;
+      project?: Array<number>;
+    }
+  | {
+      id: Array<number>;
+      environment?: string;
+      project?: Array<number>;
+    }
+  | {
+      environment?: string;
+      project?: Array<number>;
+    };
+
 /**
  * Converts input parameters to API-compatible query arguments
  * @param params
  */
-export function paramsToQueryArgs(params) {
-  const p = params.itemIds
+export function paramsToQueryArgs(params: ParamsType): QueryArgs {
+  const p: QueryArgs = params.itemIds
     ? {id: params.itemIds} // items matching array of itemids
     : params.query
     ? {query: params.query} // items matching search query
@@ -58,8 +84,30 @@ export function paramsToQueryArgs(params) {
   return p;
 }
 
+// TODO: move this somewhere
+type APIRequestMethod = 'POST' | 'GET' | 'DELETE' | 'PUT';
+
+type FunctionCallback<Args extends any[] = any[]> = (...args: Args) => void;
+
+type RequestCallbacks = {
+  success?: (data: any, textStatus?: string, xhr?: JQueryXHR) => void;
+  complete?: (jqXHR: JQueryXHR, textStatus: string) => void;
+  // TODO(ts): Update this when sentry is mostly migrated to TS
+  error?: FunctionCallback;
+};
+
+export type RequestOptions = {
+  method?: APIRequestMethod;
+  data?: any;
+  query?: Array<any> | object;
+  preservedError?: Error;
+} & RequestCallbacks;
+
 export class Client {
-  constructor(options) {
+  baseUrl: string;
+  activeRequests: {[ids: string]: Request};
+
+  constructor(options: {baseUrl?: string} = {}) {
     if (isUndefined(options)) {
       options = {};
     }
@@ -71,7 +119,8 @@ export class Client {
    * Check if the API response says project has been renamed.
    * If so, redirect user to new project slug
    */
-  hasProjectBeenRenamed(response) {
+  // TODO: refine this type later
+  hasProjectBeenRenamed(response: JQueryXHR) {
     const code = get(response, 'responseJSON.detail.code');
 
     // XXX(billy): This actually will never happen because we can't intercept the 302
@@ -86,8 +135,12 @@ export class Client {
     return true;
   }
 
-  wrapCallback(id, func, cleanup) {
-    return (...args) => {
+  wrapCallback<T extends any[]>(
+    id: string,
+    func: FunctionCallback<T> | undefined,
+    cleanup: boolean = false
+  ) {
+    return (...args: T) => {
       const req = this.activeRequests[id];
       if (cleanup === true) {
         delete this.activeRequests[id];
@@ -96,6 +149,7 @@ export class Client {
       if (req && req.alive) {
         // Check if API response is a 302 -- means project slug was renamed and user
         // needs to be redirected
+        // @ts-ignore
         if (this.hasProjectBeenRenamed(...args)) {
           return;
         }
@@ -113,13 +167,22 @@ export class Client {
   /**
    * Attempt to cancel all active XHR requests
    */
-  clear() {
+  clear(): void {
     for (const id in this.activeRequests) {
       this.activeRequests[id].cancel();
     }
   }
 
-  handleRequestError({id, path, requestOptions}, response, ...responseArgs) {
+  handleRequestError(
+    {
+      id,
+      path,
+      requestOptions,
+    }: {id: string; path: string; requestOptions: Readonly<RequestOptions>},
+    response: JQueryXHR,
+    textStatus: string,
+    errorThrown: string
+  ) {
     const code = get(response, 'responseJSON.detail.code');
     const isSudoRequired = code === SUDO_REQUIRED || code === SUPERUSER_REQUIRED;
 
@@ -129,18 +192,18 @@ export class Client {
         sudo: code === SUDO_REQUIRED,
         retryRequest: () => {
           return this.requestPromise(path, requestOptions)
-            .then((...args) => {
+            .then(data => {
               if (typeof requestOptions.success !== 'function') {
                 return;
               }
 
-              requestOptions.success(...args);
+              requestOptions.success(data);
             })
-            .catch((...args) => {
+            .catch(err => {
               if (typeof requestOptions.error !== 'function') {
                 return;
               }
-              requestOptions.error(...args);
+              requestOptions.error(err);
             });
         },
         onClose: () => {
@@ -155,14 +218,17 @@ export class Client {
     }
 
     // Call normal error callback
-    const errorCb = this.wrapCallback(id, requestOptions.error);
+    const errorCb = this.wrapCallback<[JQueryXHR, string, string]>(
+      id,
+      requestOptions.error
+    );
     if (typeof errorCb !== 'function') {
       return;
     }
-    errorCb(response, ...responseArgs);
+    errorCb(response, textStatus, errorThrown);
   }
 
-  request(path, options = {}) {
+  request(path: string, options: Readonly<RequestOptions> = {}): Request {
     const method = options.method || (options.data ? 'POST' : 'GET');
     let data = options.data;
 
@@ -170,7 +236,7 @@ export class Client {
       data = JSON.stringify(data);
     }
 
-    let query;
+    let query: string;
     try {
       query = $.param(options.query || [], true);
     } catch (err) {
@@ -182,10 +248,10 @@ export class Client {
       throw err;
     }
 
-    const id = uniqueId();
+    const id: string = uniqueId();
     metric.mark(`api-request-start-${id}`);
 
-    let fullUrl;
+    let fullUrl: string;
     if (path.indexOf(this.baseUrl) === -1) {
       fullUrl = this.baseUrl + path;
     } else {
@@ -218,8 +284,7 @@ export class Client {
         headers: {
           Accept: 'application/json; charset=utf-8',
         },
-        success: (...args) => {
-          const [, , xhr] = args || [];
+        success: (responseData: any, textStatus: string, xhr: JQueryXHR) => {
           metric.measure({
             name: 'app.api.request-success',
             start: `api-request-start-${id}`,
@@ -228,11 +293,14 @@ export class Client {
             },
           });
           if (!isUndefined(options.success)) {
-            this.wrapCallback(id, options.success)(...args);
+            this.wrapCallback<[any, string, JQueryXHR]>(id, options.success)(
+              responseData,
+              textStatus,
+              xhr
+            );
           }
         },
-        error: (...args) => {
-          const [resp] = args || [];
+        error: (resp: JQueryXHR, textStatus: string, errorThrown: string) => {
           metric.measure({
             name: 'app.api.request-error',
             start: `api-request-start-${id}`,
@@ -248,15 +316,15 @@ export class Client {
             const errorObjectToUse = createRequestError(
               resp,
               preservedError.stack,
-              options.method,
+              method,
               path
             );
 
             errorObjectToUse.removeFrames(2);
 
             // Setting this to warning because we are going to capture all failed requests
-            scope.setLevel('warning');
-            scope.setTag('http.statusCode', resp.status);
+            scope.setLevel(Sentry.Severity.Warning);
+            scope.setTag('http.statusCode', String(resp.status));
             Sentry.captureException(errorObjectToUse);
           });
 
@@ -266,12 +334,17 @@ export class Client {
               path,
               requestOptions: options,
             },
-            ...args
+            resp,
+            textStatus,
+            errorThrown
           );
         },
-        complete: (...args) => {
+        complete: (jqXHR: JQueryXHR, textStatus: string) => {
           Sentry.finishSpan(requestSpan);
-          return this.wrapCallback(id, options.complete, true)(...args);
+          return this.wrapCallback<[JQueryXHR, string]>(id, options.complete, true)(
+            jqXHR,
+            textStatus
+          );
         },
       })
     );
@@ -279,7 +352,17 @@ export class Client {
     return this.activeRequests[id];
   }
 
-  requestPromise(path, {includeAllArgs, ...options} = {}) {
+  requestPromise<IncludeAllArgsType extends boolean>(
+    path: string,
+    {
+      includeAllArgs,
+      ...options
+    }: {includeAllArgs?: IncludeAllArgsType} & Readonly<RequestOptions> = {}
+  ): Promise<
+    IncludeAllArgsType extends true
+      ? [any, string | undefined, JQueryXHR | undefined]
+      : any
+  > {
     // Create an error object here before we make any async calls so
     // that we have a helpful stacktrace if it errors
     //
@@ -292,10 +375,10 @@ export class Client {
       this.request(path, {
         ...options,
         preservedError,
-        success: (data, ...args) => {
-          includeAllArgs ? resolve([data, ...args]) : resolve(data);
+        success: (data, textStatus, xhr) => {
+          includeAllArgs ? resolve([data, textStatus, xhr] as any) : resolve(data);
         },
-        error: (resp, ...args) => {
+        error: (resp: JQueryXHR) => {
           const errorObjectToUse = createRequestError(
             resp,
             preservedError.stack,
@@ -312,16 +395,24 @@ export class Client {
     });
   }
 
-  _chain(...funcs) {
-    funcs = funcs.filter(f => !isUndefined(f) && f);
-    return (...args) => {
-      funcs.forEach(func => {
+  _chain<Args extends any[]>(...funcs: Array<((...args: Args) => any) | undefined>) {
+    const filteredFuncs = funcs.filter(
+      (f): f is (...args: Args) => any => {
+        return typeof f === 'function';
+      }
+    );
+    return (...args: Args): void => {
+      filteredFuncs.forEach(func => {
         func.apply(funcs, args);
       });
     };
   }
 
-  _wrapRequest(path, options, extraParams) {
+  _wrapRequest(
+    path: string,
+    options: RequestOptions,
+    extraParams: RequestCallbacks
+  ): Request {
     if (isUndefined(extraParams)) {
       extraParams = {};
     }
@@ -333,13 +424,16 @@ export class Client {
     return this.request(path, options);
   }
 
-  bulkDelete(params, options) {
-    const path = params.projectId
+  bulkDelete(
+    params: ParamsType & {orgId: string; projectId?: string},
+    options: RequestCallbacks
+  ): Request {
+    const path: string = params.projectId
       ? `/projects/${params.orgId}/${params.projectId}/issues/`
       : `/organizations/${params.orgId}/issues/`;
 
-    const query = paramsToQueryArgs(params);
-    const id = uniqueId();
+    const query: QueryArgs = paramsToQueryArgs(params);
+    const id: string = uniqueId();
 
     GroupActions.delete(id, params.itemIds);
 
@@ -359,13 +453,21 @@ export class Client {
     );
   }
 
-  bulkUpdate(params, options) {
-    const path = params.projectId
+  bulkUpdate(
+    params: ParamsType & {
+      orgId: string;
+      projectId?: string;
+      failSilently?: boolean;
+      data?: any;
+    },
+    options: RequestCallbacks
+  ): Request {
+    const path: string = params.projectId
       ? `/projects/${params.orgId}/${params.projectId}/issues/`
       : `/organizations/${params.orgId}/issues/`;
 
-    const query = paramsToQueryArgs(params);
-    const id = uniqueId();
+    const query: QueryArgs = paramsToQueryArgs(params);
+    const id: string = uniqueId();
 
     GroupActions.update(id, params.itemIds, params.data);
 
@@ -386,13 +488,19 @@ export class Client {
     );
   }
 
-  merge(params, options) {
-    const path = params.projectId
+  merge(
+    params: ParamsType & {
+      orgId: string;
+      projectId?: string;
+    },
+    options: RequestCallbacks
+  ): Request {
+    const path: string = params.projectId
       ? `/projects/${params.orgId}/${params.projectId}/issues/`
       : `/organizations/${params.orgId}/issues/`;
 
-    const query = paramsToQueryArgs(params);
-    const id = uniqueId();
+    const query: QueryArgs = paramsToQueryArgs(params);
+    const id: string = uniqueId();
 
     GroupActions.merge(id, params.itemIds);
 
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 2151ced43b..94709d42de 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -163,7 +163,7 @@ export default class AsyncComponent<
     document.removeEventListener('visibilitychange', this.visibilityReloader);
   }
 
-  api: any;
+  api: Client = new Client();
   private _measurement: any;
 
   // XXX: cant call this getInitialState as React whines
diff --git a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
index 6a519a7eda..feee2d3e41 100644
--- a/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
+++ b/src/sentry/static/sentry/app/views/events/utils/eventsRequest.tsx
@@ -5,6 +5,7 @@ import React from 'react';
 import {Organization, EventsStats, EventsStatsData} from 'app/types';
 import {Series, SeriesDataUnit} from 'app/types/echarts';
 
+import {Client} from 'app/api';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {canIncludePreviousPeriod} from 'app/views/events/utils/canIncludePreviousPeriod';
 import {doEventsRequest} from 'app/actionCreators/events';
@@ -28,8 +29,7 @@ type RenderProps = {
 };
 
 type EventsRequestPartialProps = {
-  // TODO(ts): Update when we type `app/api`
-  api: object;
+  api: Client;
   organization: Organization;
 
   project?: number[];
diff --git a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts
index d960b2e920..7d542235bf 100644
--- a/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts
+++ b/src/sentry/static/sentry/app/views/settings/projectIncidentRules/actions.ts
@@ -1,8 +1,9 @@
+import {Client} from 'app/api';
 import {IncidentRule} from './types';
 
-// TODO(ts): type api and response
+// TODO(ts): type response
 export function deleteRule(
-  api: any,
+  api: Client,
   orgId: string,
   projectId: string,
   rule: IncidentRule
diff --git a/tests/js/spec/components/__snapshots__/createProject.spec.jsx.snap b/tests/js/spec/components/__snapshots__/createProject.spec.jsx.snap
index 9895aff0fc..26bf291176 100644
--- a/tests/js/spec/components/__snapshots__/createProject.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/createProject.spec.jsx.snap
@@ -92,7 +92,15 @@ exports[`CreateProject should block if you have access to no teams 1`] = `
 
 exports[`CreateProject should deal with incorrect platform name if its provided by url 1`] = `
 <CreateProject
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "query": Object {},
@@ -1672,7 +1680,15 @@ exports[`CreateProject should deal with incorrect platform name if its provided
 
 exports[`CreateProject should fill in platform name if its provided by url 1`] = `
 <CreateProject
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "query": Object {},
@@ -2661,7 +2677,15 @@ exports[`CreateProject should fill in platform name if its provided by url 1`] =
 
 exports[`CreateProject should fill in project name if its empty when platform is chosen 1`] = `
 <CreateProject
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "query": Object {},
diff --git a/tests/js/spec/components/__snapshots__/issueDiff.spec.jsx.snap b/tests/js/spec/components/__snapshots__/issueDiff.spec.jsx.snap
index d25c2ae3cc..a86a31e27a 100644
--- a/tests/js/spec/components/__snapshots__/issueDiff.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/issueDiff.spec.jsx.snap
@@ -2,7 +2,15 @@
 
 exports[`IssueDiff can diff message 1`] = `
 <IssueDiff
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   baseEventId="latest"
   baseIssueId="base"
   orgId="org-slug"
@@ -131,7 +139,15 @@ exports[`IssueDiff can diff message 1`] = `
 
 exports[`IssueDiff can dynamically import SplitDiff 1`] = `
 <IssueDiff
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   baseEventId="latest"
   baseIssueId="base"
   orgId="org-slug"
diff --git a/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
index 2c102fe460..9dc3da5e0a 100644
--- a/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
+++ b/tests/js/spec/components/forms/__snapshots__/formField.spec.jsx.snap
@@ -7,7 +7,13 @@ exports[`FormField + model renders with Form 1`] = `
   className="form-stacked"
   model={
     FormModel {
-      "api": Client {},
+      "api": Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      },
       "errors": Object {},
       "fieldDescriptor": Map {
         "fieldName" => Object {
@@ -102,7 +108,13 @@ exports[`FormField + model renders with Form 1`] = `
                             <ControlState
                               model={
                                 FormModel {
-                                  "api": Client {},
+                                  "api": Client {
+                                    "_chain": [Function],
+                                    "_wrapRequest": [Function],
+                                    "bulkUpdate": [Function],
+                                    "handleRequestError": [Function],
+                                    "hasProjectBeenRenamed": [Function],
+                                  },
                                   "errors": Object {},
                                   "fieldDescriptor": Map {
                                     "fieldName" => Object {
@@ -247,7 +259,13 @@ exports[`FormField + model renders with Form 1`] = `
                                                         <ControlState
                                                           model={
                                                             FormModel {
-                                                              "api": Client {},
+                                                              "api": Client {
+                                                                "_chain": [Function],
+                                                                "_wrapRequest": [Function],
+                                                                "bulkUpdate": [Function],
+                                                                "handleRequestError": [Function],
+                                                                "hasProjectBeenRenamed": [Function],
+                                                              },
                                                               "errors": Object {},
                                                               "fieldDescriptor": Map {
                                                                 "fieldName" => Object {
diff --git a/tests/js/spec/components/projects/__snapshots__/bookmarkStar.spec.jsx.snap b/tests/js/spec/components/projects/__snapshots__/bookmarkStar.spec.jsx.snap
index 70161680b6..0c812a7482 100644
--- a/tests/js/spec/components/projects/__snapshots__/bookmarkStar.spec.jsx.snap
+++ b/tests/js/spec/components/projects/__snapshots__/bookmarkStar.spec.jsx.snap
@@ -44,7 +44,15 @@ exports[`BookmarkStar renders 1`] = `
   }
 >
   <BookmarkStar
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     organization={
       Object {
         "access": Array [
diff --git a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
index 36cbb6e022..3fa99ce0bc 100644
--- a/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/components/sidebar/__snapshots__/index.spec.jsx.snap
@@ -1369,10 +1369,26 @@ exports[`Sidebar can have onboarding feature 1`] = `
           >
             <withApi(WithOrganizationMockWrapper)>
               <WithOrganizationMockWrapper
-                api={Client {}}
+                api={
+                  Client {
+                    "_chain": [Function],
+                    "_wrapRequest": [Function],
+                    "bulkUpdate": [Function],
+                    "handleRequestError": [Function],
+                    "hasProjectBeenRenamed": [Function],
+                  }
+                }
               >
                 <TodoList
-                  api={Client {}}
+                  api={
+                    Client {
+                      "_chain": [Function],
+                      "_wrapRequest": [Function],
+                      "bulkUpdate": [Function],
+                      "handleRequestError": [Function],
+                      "hasProjectBeenRenamed": [Function],
+                    }
+                  }
                   organization={
                     Object {
                       "access": Array [
diff --git a/tests/js/spec/stores/groupingStore.spec.jsx b/tests/js/spec/stores/groupingStore.spec.jsx
index b72cd7131d..ee9704c346 100644
--- a/tests/js/spec/stores/groupingStore.spec.jsx
+++ b/tests/js/spec/stores/groupingStore.spec.jsx
@@ -1,5 +1,5 @@
 import GroupingStore from 'app/stores/groupingStore';
-import {Client} from 'app/api';
+import {Client, mergeMock} from 'app/api';
 
 describe('Grouping Store', function() {
   let trigger;
@@ -318,7 +318,6 @@ describe('Grouping Store', function() {
 
     describe('onMerge', function() {
       beforeEach(function() {
-        jest.spyOn(Client.prototype, 'merge');
         Client.clearMockResponses();
         Client.addMockResponse({
           method: 'PUT',
@@ -360,7 +359,7 @@ describe('Grouping Store', function() {
 
         await promise;
 
-        expect(Client.prototype.merge).toHaveBeenCalledWith(
+        expect(mergeMock).toHaveBeenCalledWith(
           {
             orgId: 'orgId',
             projectId: 'projectId',
diff --git a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
index 58c4b54b1b..4c9f885c36 100644
--- a/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationTeamProjects.spec.jsx.snap
@@ -2,7 +2,15 @@
 
 exports[`OrganizationTeamProjects Should render 1`] = `
 <TeamProjects
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "query": Object {},
@@ -459,7 +467,15 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                             }
                           >
                             <BookmarkStar
-                              api={Client {}}
+                              api={
+                                Client {
+                                  "_chain": [Function],
+                                  "_wrapRequest": [Function],
+                                  "bulkUpdate": [Function],
+                                  "handleRequestError": [Function],
+                                  "hasProjectBeenRenamed": [Function],
+                                }
+                              }
                               className="css-10z01iz-BookmarkLink enngb6z1"
                               isBookmarked={false}
                               onToggle={[Function]}
@@ -840,7 +856,15 @@ exports[`OrganizationTeamProjects Should render 1`] = `
                             }
                           >
                             <BookmarkStar
-                              api={Client {}}
+                              api={
+                                Client {
+                                  "_chain": [Function],
+                                  "_wrapRequest": [Function],
+                                  "bulkUpdate": [Function],
+                                  "handleRequestError": [Function],
+                                  "hasProjectBeenRenamed": [Function],
+                                }
+                              }
                               className="css-10z01iz-BookmarkLink enngb6z1"
                               isBookmarked={false}
                               onToggle={[Function]}
@@ -1071,7 +1095,15 @@ exports[`OrganizationTeamProjects Should render 1`] = `
     </Component>
   </Panel>
   <Pagination
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     className="css-1yt0wm7-streamCss"
     location={
       Object {
diff --git a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
index 4b90d1df7e..8aad124593 100644
--- a/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectDebugFiles.spec.jsx.snap
@@ -152,7 +152,15 @@ exports[`ProjectDebugFiles renders 1`] = `
                         is={null}
                       >
                         <withRouter(AsyncComponentSearchInput)
-                          api={Client {}}
+                          api={
+                            Client {
+                              "_chain": [Function],
+                              "_wrapRequest": [Function],
+                              "bulkUpdate": [Function],
+                              "handleRequestError": [Function],
+                              "hasProjectBeenRenamed": [Function],
+                            }
+                          }
                           className="search"
                           onError={[Function]}
                           onSuccess={[Function]}
@@ -162,7 +170,15 @@ exports[`ProjectDebugFiles renders 1`] = `
                           url="/projects/org/project/"
                         >
                           <AsyncComponentSearchInput
-                            api={Client {}}
+                            api={
+                              Client {
+                                "_chain": [Function],
+                                "_wrapRequest": [Function],
+                                "bulkUpdate": [Function],
+                                "handleRequestError": [Function],
+                                "hasProjectBeenRenamed": [Function],
+                              }
+                            }
                             className="search"
                             debounceWait={200}
                             location={
@@ -328,7 +344,15 @@ exports[`ProjectDebugFiles renders empty 1`] = `
       </Box>
       <Box>
         <withRouter(AsyncComponentSearchInput)
-          api={Client {}}
+          api={
+            Client {
+              "_chain": [Function],
+              "_wrapRequest": [Function],
+              "bulkUpdate": [Function],
+              "handleRequestError": [Function],
+              "hasProjectBeenRenamed": [Function],
+            }
+          }
           className="search"
           onError={[Function]}
           onSuccess={[Function]}
diff --git a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
index af65954be0..ce5f588d81 100644
--- a/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/projectPluginDetails.spec.jsx.snap
@@ -508,7 +508,15 @@ exports[`ProjectPluginDetails renders 1`] = `
                     }
                   >
                     <PluginConfig
-                      api={Client {}}
+                      api={
+                        Client {
+                          "_chain": [Function],
+                          "_wrapRequest": [Function],
+                          "bulkUpdate": [Function],
+                          "handleRequestError": [Function],
+                          "hasProjectBeenRenamed": [Function],
+                        }
+                      }
                       data={
                         Object {
                           "assets": Array [],
diff --git a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
index 3643838bdd..d0b0e8e878 100644
--- a/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
+++ b/tests/js/spec/views/inviteMember/__snapshots__/inviteMember.spec.jsx.snap
@@ -15,7 +15,15 @@ exports[`InviteMember should render loading 1`] = `
 
 exports[`InviteMember should render roles when available and allowed, and handle submitting 1`] = `
 <InviteMember
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "query": Object {},
@@ -434,7 +442,15 @@ exports[`InviteMember should render roles when available and allowed, and handle
         selectedTeams={Array []}
       >
         <TeamSelect
-          api={Client {}}
+          api={
+            Client {
+              "_chain": [Function],
+              "_wrapRequest": [Function],
+              "bulkUpdate": [Function],
+              "handleRequestError": [Function],
+              "hasProjectBeenRenamed": [Function],
+            }
+          }
           onAddTeam={[Function]}
           onRemoveTeam={[Function]}
           organization={
diff --git a/tests/js/spec/views/organizationGroupDetails/__snapshots__/actions.spec.jsx.snap b/tests/js/spec/views/organizationGroupDetails/__snapshots__/actions.spec.jsx.snap
index 62acd57ee6..b5fe49a40e 100644
--- a/tests/js/spec/views/organizationGroupDetails/__snapshots__/actions.spec.jsx.snap
+++ b/tests/js/spec/views/organizationGroupDetails/__snapshots__/actions.spec.jsx.snap
@@ -2,7 +2,15 @@
 
 exports[`GroupActions render() renders correctly 1`] = `
 <WithOrganizationMockWrapper
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   group={
     Object {
       "activity": Array [],
diff --git a/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap b/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
index fc2cca11f9..fb6fa78409 100644
--- a/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
+++ b/tests/js/spec/views/organizationReleases/detail/__snapshots__/releaseCommits.spec.jsx.snap
@@ -11,7 +11,15 @@ exports[`ReleaseCommits organization release commits 1`] = `
   }
 >
   <ReleaseCommits
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     location={Object {}}
     params={
       Object {
@@ -374,7 +382,15 @@ exports[`ReleaseCommits project release commits 1`] = `
   }
 >
   <ReleaseCommits
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     location={Object {}}
     params={
       Object {
diff --git a/tests/js/spec/views/projectsDashboard/__snapshots__/projectCard.spec.jsx.snap b/tests/js/spec/views/projectsDashboard/__snapshots__/projectCard.spec.jsx.snap
index 11fc96c134..70f0f6ffbe 100644
--- a/tests/js/spec/views/projectsDashboard/__snapshots__/projectCard.spec.jsx.snap
+++ b/tests/js/spec/views/projectsDashboard/__snapshots__/projectCard.spec.jsx.snap
@@ -478,7 +478,15 @@ exports[`ProjectCard renders 1`] = `
                   }
                 >
                   <BookmarkStar
-                    api={Client {}}
+                    api={
+                      Client {
+                        "_chain": [Function],
+                        "_wrapRequest": [Function],
+                        "bulkUpdate": [Function],
+                        "handleRequestError": [Function],
+                        "hasProjectBeenRenamed": [Function],
+                      }
+                    }
                     organization={
                       Object {
                         "access": Array [
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
index 5ffc7e15b7..2f97f5b672 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationProjects.spec.jsx.snap
@@ -270,7 +270,15 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                         >
                           Projects
                           <withRouter(AsyncComponentSearchInput)
-                            api={Client {}}
+                            api={
+                              Client {
+                                "_chain": [Function],
+                                "_wrapRequest": [Function],
+                                "bulkUpdate": [Function],
+                                "handleRequestError": [Function],
+                                "hasProjectBeenRenamed": [Function],
+                              }
+                            }
                             className="search"
                             onError={[Function]}
                             onSuccess={[Function]}
@@ -280,7 +288,15 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                             url="/organizations/org-slug/projects/"
                           >
                             <AsyncComponentSearchInput
-                              api={Client {}}
+                              api={
+                                Client {
+                                  "_chain": [Function],
+                                  "_wrapRequest": [Function],
+                                  "bulkUpdate": [Function],
+                                  "handleRequestError": [Function],
+                                  "hasProjectBeenRenamed": [Function],
+                                }
+                              }
                               className="search"
                               debounceWait={200}
                               location={
@@ -533,7 +549,15 @@ exports[`OrganizationProjects Should render the projects in the store 1`] = `
                                           }
                                         >
                                           <BookmarkStar
-                                            api={Client {}}
+                                            api={
+                                              Client {
+                                                "_chain": [Function],
+                                                "_wrapRequest": [Function],
+                                                "bulkUpdate": [Function],
+                                                "handleRequestError": [Function],
+                                                "hasProjectBeenRenamed": [Function],
+                                              }
+                                            }
                                             className="css-10z01iz-BookmarkLink enngb6z1"
                                             isBookmarked={false}
                                             onToggle={[Function]}
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
index 0a86476cda..7bf51d130c 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -31,7 +31,15 @@ exports[`OrganizationRepositories renders with a repository 1`] = `
     >
       <Box>
         <RepositoryRow
-          api={Client {}}
+          api={
+            Client {
+              "_chain": [Function],
+              "_wrapRequest": [Function],
+              "bulkUpdate": [Function],
+              "handleRequestError": [Function],
+              "hasProjectBeenRenamed": [Function],
+            }
+          }
           key="4"
           orgId="org-slug"
           repository={
diff --git a/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
index ce5b6455d7..a8a4b51f5d 100644
--- a/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/organizationRepositoriesContainer.spec.jsx.snap
@@ -5,7 +5,15 @@ exports[`OrganizationRepositoriesContainer render() without any providers is loa
   title="Repositories - Sentry"
 >
   <OrganizationRepositories
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     error={false}
     errors={Object {}}
     itemList={Array []}
diff --git a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
index a9e5a85294..c2ea3a6559 100644
--- a/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
+++ b/tests/js/spec/views/settings/__snapshots__/projectEnvironments.spec.jsx.snap
@@ -2,7 +2,15 @@
 
 exports[`ProjectEnvironments render active renders empty message 1`] = `
 <ProjectEnvironments
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "pathname": "environments/",
@@ -401,7 +409,15 @@ exports[`ProjectEnvironments render active renders empty message 1`] = `
 
 exports[`ProjectEnvironments render hidden renders empty message 1`] = `
 <ProjectEnvironments
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "pathname": "environments/hidden/",
@@ -800,7 +816,15 @@ exports[`ProjectEnvironments render hidden renders empty message 1`] = `
 
 exports[`ProjectEnvironments render hidden renders environment list 1`] = `
 <ProjectEnvironments
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   location={
     Object {
       "pathname": "environments/hidden/",
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index ddf8737805..356b8e0c93 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -2,7 +2,15 @@
 
 exports[`Sentry App Installations when Apps exist displays all Apps owned by the Org 1`] = `
 <SentryAppInstallations
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   applications={
     Array [
       Object {
@@ -862,7 +870,15 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
 
 exports[`Sentry App Installations when no Apps exist no row is displayed 1`] = `
 <SentryAppInstallations
-  api={Client {}}
+  api={
+    Client {
+      "_chain": [Function],
+      "_wrapRequest": [Function],
+      "bulkUpdate": [Function],
+      "handleRequestError": [Function],
+      "hasProjectBeenRenamed": [Function],
+    }
+  }
   applications={Array []}
   installs={Array []}
   organization={
diff --git a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
index 8852d1e0f1..8a4d1f58c7 100644
--- a/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
+++ b/tests/js/spec/views/sharedGroupDetails/__snapshots__/index.spec.jsx.snap
@@ -9,7 +9,15 @@ exports[`SharedGroupDetails renders 1`] = `
   }
 >
   <SharedGroupDetails
-    api={Client {}}
+    api={
+      Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      }
+    }
     params={
       Object {
         "shareId": "a",
@@ -495,7 +503,15 @@ exports[`SharedGroupDetails renders 1`] = `
                           }
                         >
                           <EventEntries
-                            api={Client {}}
+                            api={
+                              Client {
+                                "_chain": [Function],
+                                "_wrapRequest": [Function],
+                                "bulkUpdate": [Function],
+                                "handleRequestError": [Function],
+                                "hasProjectBeenRenamed": [Function],
+                              }
+                            }
                             event={
                               Object {
                                 "dateCreated": "2019-05-21T18:01:48.762Z",
diff --git a/yarn.lock b/yarn.lock
index 8284b9c04f..7641a3dc16 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1714,6 +1714,11 @@
   resolved "https://registry.yarnpkg.com/@types/anymatch/-/anymatch-1.3.1.tgz#336badc1beecb9dacc38bea2cf32adf627a8421a"
   integrity sha512-/+CRPXpBDpo2RK9C68N3b2cOvO0Cf5B9aPijHsoDQTHivnGSObdOF2BRQOYjojWTDy6nQvMjmqRXIxH55VjxxA==
 
+"@types/classnames@^2.2.0":
+  version "2.2.9"
+  resolved "https://registry.yarnpkg.com/@types/classnames/-/classnames-2.2.9.tgz#d868b6febb02666330410fe7f58f3c4b8258be7b"
+  integrity sha512-MNl+rT5UmZeilaPxAVs6YaPC2m6aA8rofviZbhbxpPpl61uKodfdQVsBtgJGTqGizEf02oW3tsVe7FYB8kK14A==
+
 "@types/echarts@^4.1.10":
   version "4.1.10"
   resolved "https://registry.yarnpkg.com/@types/echarts/-/echarts-4.1.10.tgz#ee71911eb8b1717c7c12c0bd81fc83db872f4d3b"
@@ -1721,11 +1726,6 @@
   dependencies:
     "@types/zrender" "*"
 
-"@types/classnames@2.2.0":
-  version "2.2.0"
-  resolved "https://registry.yarnpkg.com/@types/classnames/-/classnames-2.2.0.tgz#f2312039e780bdf89d7d4102a26ec11de5ec58aa"
-  integrity sha1-8jEgOeeAvfidfUECom7BHeXsWKo=
-
 "@types/eslint-visitor-keys@^1.0.0":
   version "1.0.0"
   resolved "https://registry.yarnpkg.com/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz#1ee30d79544ca84d68d4b3cdb0af4f205663dd2d"
@@ -1755,6 +1755,18 @@
   resolved "https://registry.yarnpkg.com/@types/invariant/-/invariant-2.2.29.tgz#aa845204cd0a289f65d47e0de63a6a815e30cc66"
   integrity sha512-lRVw09gOvgviOfeUrKc/pmTiRZ7g7oDOU6OAutyuSHpm1/o2RaBQvRhgK8QEdu+FFuw/wnWb29A/iuxv9i8OpQ==
 
+"@types/jest-diff@*":
+  version "20.0.1"
+  resolved "https://registry.yarnpkg.com/@types/jest-diff/-/jest-diff-20.0.1.tgz#35cc15b9c4f30a18ef21852e255fdb02f6d59b89"
+  integrity sha512-yALhelO3i0hqZwhjtcr6dYyaLoCHbAMshwtj6cGxTvHZAKXHsYGdff6E8EPw3xLKY0ELUTQ69Q1rQiJENnccMA==
+
+"@types/jest@^24.0.17":
+  version "24.0.17"
+  resolved "https://registry.yarnpkg.com/@types/jest/-/jest-24.0.17.tgz#b66ea026efb746eb5db1356ee28518aaff7af416"
+  integrity sha512-1cy3xkOAfSYn78dsBWy4M3h/QF/HeWPchNFDjysVtp3GHeTdSmtluNnELfCmfNRRHo0OWEcpf+NsEJQvwQfdqQ==
+  dependencies:
+    "@types/jest-diff" "*"
+
 "@types/jquery@^2.0.53":
   version "2.0.53"
   resolved "https://registry.yarnpkg.com/@types/jquery/-/jquery-2.0.53.tgz#89c53bc83d820e50c3b667ae2fdf4276df8b3aba"
