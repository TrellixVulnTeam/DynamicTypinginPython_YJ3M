commit a1e6c8b134cbe7192ef776b081d9146594d1c446
Author: Mark Story <mark@sentry.io>
Date:   Tue Jul 2 16:26:57 2019 -0400

    fix(jira) Add validation around consumer key (#13881)
    
    Some customers are putting long hash-like data into the consumer-key and
    hitting errors. I've opted to use validation instead of setting the
    `max_length` on the field as `maxlength` will truncate data to fit which
    will result in the integration connection failing later during setup.
    
    Fixes SENTRY-B7B

diff --git a/src/sentry/integrations/jira_server/integration.py b/src/sentry/integrations/jira_server/integration.py
index dd7d21aefa..0005221566 100644
--- a/src/sentry/integrations/jira_server/integration.py
+++ b/src/sentry/integrations/jira_server/integration.py
@@ -103,9 +103,8 @@ class InstallationForm(forms.Form):
     consumer_key = forms.CharField(
         label=_('Jira Consumer Key'),
         widget=forms.TextInput(
-            attrs={'placeholder': _(
-                'sentry-consumer-key')}
-        )
+            attrs={'placeholder': _('sentry-consumer-key')}
+        ),
     )
     private_key = forms.CharField(
         label=_('Jira Consumer Private Key'),
@@ -129,6 +128,12 @@ class InstallationForm(forms.Form):
                 'Private key must be a valid SSH private key encoded in a PEM format.')
         return data
 
+    def clean_consumer_key(self):
+        data = self.cleaned_data['consumer_key']
+        if len(data) > 200:
+            raise forms.ValidationError('Consumer key is limited to 200 characters.')
+        return data
+
 
 class InstallationConfigView(PipelineView):
     """
diff --git a/tests/sentry/integrations/jira_server/test_integration.py b/tests/sentry/integrations/jira_server/test_integration.py
index bed10fcb7a..ae7ae607f7 100644
--- a/tests/sentry/integrations/jira_server/test_integration.py
+++ b/tests/sentry/integrations/jira_server/test_integration.py
@@ -66,6 +66,22 @@ class JiraServerIntegrationTest(IntegrationTestCase):
         self.assertContains(
             resp, 'Private key must be a valid SSH private key encoded in a PEM format.')
 
+    @responses.activate
+    def test_validate_consumer_key_length(self):
+        # Start pipeline and go to setup page.
+        self.client.get(self.setup_path)
+
+        # Submit credentials
+        data = {
+            'url': 'jira.example.com/',
+            'verify_ssl': False,
+            'consumer_key': 'x' * 201,
+            'private_key': EXAMPLE_PRIVATE_KEY
+        }
+        resp = self.client.post(self.setup_path, data=data)
+        assert resp.status_code == 200
+        self.assertContains(resp, 'Consumer key is limited to 200')
+
     @responses.activate
     def test_authentication_request_token_timeout(self):
         timeout = ReadTimeout('Read timed out. (read timeout=30)')
