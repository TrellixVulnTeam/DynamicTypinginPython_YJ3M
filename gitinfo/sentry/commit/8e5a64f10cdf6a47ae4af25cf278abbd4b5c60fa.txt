commit 8e5a64f10cdf6a47ae4af25cf278abbd4b5c60fa
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed May 22 12:49:48 2019 -0700

    feat(events): Allow Event Graph to show either User count or Event count  (#13289)
    
    * Saving place
    
    * Added user counts
    
    * Changed y_axis to YAxis

diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index da33a276ec..abbfa40fb0 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -108,10 +108,20 @@ class OrganizationEventsStatsEndpoint(OrganizationEventsEndpointBase):
 
         rollup = int(interval.total_seconds())
 
+        y_axis = request.GET.get('yAxis', None)
+        if not y_axis or y_axis == 'event_count':
+            aggregations = [('count()', '', 'count')]
+        elif y_axis == 'user_count':
+            aggregations = [
+                ('uniq', 'tags[sentry:user]', 'count'),
+            ]
+            snuba_args['filter_keys']['tags_key'] = ['sentry:user']
+        else:
+            return Response(
+                {'detail': 'Param yAxis value %s not recognized.' % y_axis}, status=400)
+
         result = raw_query(
-            aggregations=[
-                ('count()', '', 'count'),
-            ],
+            aggregations=aggregations,
             orderby='time',
             groupby=['time'],
             rollup=rollup,
diff --git a/tests/snuba/api/endpoints/test_organization_events.py b/tests/snuba/api/endpoints/test_organization_events.py
index eaf4676d98..9dbd5ef6a9 100644
--- a/tests/snuba/api/endpoints/test_organization_events.py
+++ b/tests/snuba/api/endpoints/test_organization_events.py
@@ -660,40 +660,49 @@ class OrganizationEventsEndpointTest(OrganizationEventsTestBase):
 
 
 class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
-    def test_simple(self):
+    def setUp(self):
+        super(OrganizationEventsStatsEndpointTest, self).setUp()
         self.login_as(user=self.user)
 
-        day_ago = self.day_ago.replace(hour=10, minute=0, second=0, microsecond=0)
+        self.day_ago = self.day_ago.replace(hour=10, minute=0, second=0, microsecond=0)
 
-        project = self.create_project()
-        project2 = self.create_project()
-        group = self.create_group(project=project)
-        group2 = self.create_group(project=project2)
+        self.project = self.create_project()
+        self.project2 = self.create_project()
+
+        self.group = self.create_group(project=self.project)
+        self.group2 = self.create_group(project=self.project2)
+
+        self.user = self.create_user()
+        self.user2 = self.create_user()
         self.create_event(
             event_id='a' * 32,
-            group=group,
-            datetime=day_ago + timedelta(minutes=1)
+            group=self.group,
+            datetime=self.day_ago + timedelta(minutes=1),
+            tags={'sentry:user': self.user.email},
         )
         self.create_event(
             event_id='b' * 32,
-            group=group2,
-            datetime=day_ago + timedelta(hours=1, minutes=1)
+            group=self.group2,
+            datetime=self.day_ago + timedelta(hours=1, minutes=1),
+            tags={'sentry:user': self.user2.email},
         )
         self.create_event(
             event_id='c' * 32,
-            group=group2,
-            datetime=day_ago + timedelta(hours=1, minutes=2)
+            group=self.group2,
+            datetime=self.day_ago + timedelta(hours=1, minutes=2),
+            tags={'sentry:user': self.user2.email},
         )
 
+    def test_simple(self):
         url = reverse(
             'sentry-api-0-organization-events-stats',
             kwargs={
-                'organization_slug': project.organization.slug,
+                'organization_slug': self.project.organization.slug,
             }
         )
         response = self.client.get('%s?%s' % (url, urlencode({
-            'start': day_ago.isoformat()[:19],
-            'end': (day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
             'interval': '1h',
         })), format='json')
 
@@ -719,6 +728,55 @@ class OrganizationEventsStatsEndpointTest(OrganizationEventsTestBase):
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 0
 
+    def test_user_count(self):
+        self.create_event(
+            event_id='d' * 32,
+            group=self.group2,
+            datetime=self.day_ago + timedelta(minutes=2),
+            tags={'sentry:user': self.user2.email},
+        )
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'user_count',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 2}],
+            [{'count': 1}],
+        ]
+
+    def test_with_event_count_flag(self):
+        url = reverse(
+            'sentry-api-0-organization-events-stats',
+            kwargs={
+                'organization_slug': self.project.organization.slug,
+            }
+        )
+        response = self.client.get('%s?%s' % (url, urlencode({
+            'start': self.day_ago.isoformat()[:19],
+            'end': (self.day_ago + timedelta(hours=1, minutes=59)).isoformat()[:19],
+            'interval': '1h',
+            'yAxis': 'event_count',
+        })), format='json')
+
+        assert response.status_code == 200, response.content
+        assert [attrs for time, attrs in response.data['data']] == [
+            [],
+            [{'count': 1}],
+            [{'count': 2}],
+        ]
+
 
 class OrganizationEventsMetaEndpoint(OrganizationEventsTestBase):
     def test_simple(self):
