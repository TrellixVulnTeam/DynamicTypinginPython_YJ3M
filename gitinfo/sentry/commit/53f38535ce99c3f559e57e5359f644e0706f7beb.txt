commit 53f38535ce99c3f559e57e5359f644e0706f7beb
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Jul 25 13:19:54 2018 -0700

    feat(forms): Add MappedChoice field type (#9115)
    
    This is a somewhat specific (but still generalized) form field type that
    is used for mapping a set of values to some set of choice options (could
    later be generalised to any field type) using a grid-like interface.
    
    This does not currently support any kind of validation.

diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
new file mode 100644
index 0000000000..80bbf30934
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
@@ -0,0 +1,186 @@
+import {Flex, Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {defined, objectIsEmpty} from 'app/utils';
+import {t} from 'app/locale';
+import Button from 'app/components/buttons/button';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import DropdownButton from 'app/components/dropdownButton';
+import InputField from 'app/views/settings/components/forms/inputField';
+import SelectControl from 'app/components/forms/selectControl';
+
+export default class ChoiceMapper extends React.Component {
+  static propTypes = {
+    ...InputField.propTypes,
+    /**
+     * Text used for the 'add row' button.
+     */
+    addButtonText: PropTypes.node,
+    /**
+     * Configuration for the add item dropdown.
+     */
+    addDropdown: PropTypes.shape(DropdownAutoComplete.propTypes).isRequired,
+    /**
+     * The label to show above the row name selected from the dropdown.
+     */
+    mappedColumnLabel: PropTypes.node,
+    /**
+     * A list of column labels (headers) for the multichoice table. This should
+     * have the same number of items as the mappedSelectors prop.
+     */
+    columnLabels: PropTypes.objectOf(PropTypes.node).isRequired,
+    /**
+     * A list of select field properties that should be used to render the
+     * select field for each column in the row.
+     */
+    mappedSelectors: PropTypes.objectOf(PropTypes.shape(SelectControl.propTypes))
+      .isRequired,
+  };
+
+  static defaultProps = {
+    addButtonText: t('Add Item'),
+  };
+
+  hasValue = value => defined(value) && !objectIsEmpty(value);
+
+  renderField = props => {
+    const {
+      onChange,
+      onBlur,
+      addButtonText,
+      addDropdown,
+      mappedColumnLabel,
+      columnLabels,
+      mappedSelectors,
+      disabled,
+    } = props;
+
+    const mappedKeys = Object.keys(mappedSelectors);
+    const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {});
+
+    const valueIsEmpty = this.hasValue(props.value);
+    const value = valueIsEmpty ? props.value : {};
+
+    const addRow = data => {
+      onChange({...value, [data.value]: emptyValue}, {});
+      onBlur();
+    };
+
+    const removeRow = itemKey => {
+      //eslint-disable-next-line no-unused-vars
+      const {[itemKey]: _, ...updatedValue} = value;
+      onChange(updatedValue, {});
+      onBlur();
+    };
+
+    const setValue = (itemKey, fieldKey, fieldValue) => {
+      onChange({...value, [itemKey]: {...value[itemKey], [fieldKey]: fieldValue}}, {});
+      onBlur();
+    };
+
+    // Remove already added values from the items list
+    const selectableValues = addDropdown.items.filter(
+      i => !value.hasOwnProperty(i.value)
+    );
+
+    const valueMap = addDropdown.items.reduce((map, item) => {
+      map[item.value] = item.label;
+      return map;
+    }, {});
+
+    const dropdown = (
+      <DropdownAutoComplete
+        {...addDropdown}
+        alignMenu={valueIsEmpty ? 'right' : 'left'}
+        items={selectableValues}
+        onSelect={addRow}
+        disabled={disabled}
+      >
+        {({isOpen}) => (
+          <DropdownButton
+            icon="icon-circle-add"
+            isOpen={isOpen}
+            size="xsmall"
+            disabled={disabled}
+          >
+            {addButtonText}
+          </DropdownButton>
+        )}
+      </DropdownAutoComplete>
+    );
+
+    // The field will be set to inline when there is no value set for the
+    // field, just show the dropdown.
+    if (!valueIsEmpty) return <Box>{dropdown}</Box>;
+
+    return (
+      <React.Fragment>
+        <Flex align="center">
+          <LabelColumn>
+            <StyledHeader>{mappedColumnLabel}</StyledHeader>
+          </LabelColumn>
+          {mappedKeys.map((fieldKey, i) => (
+            <Flex
+              key={fieldKey}
+              ml={1}
+              flex="1 0 0"
+              align="center"
+              justify="space-between"
+            >
+              <StyledHeader>{columnLabels[fieldKey]}</StyledHeader>
+              {i === mappedKeys.length - 1 && dropdown}
+            </Flex>
+          ))}
+        </Flex>
+        {Object.keys(value).map(itemKey => (
+          <Flex key={itemKey} align="center" mt={1}>
+            <LabelColumn>{valueMap[itemKey]}</LabelColumn>
+            {mappedKeys.map((fieldKey, i) => (
+              <Flex key={fieldKey} align="center" ml={1} flex="1 0 0">
+                <Box flex={1}>
+                  <SelectControl
+                    {...mappedSelectors[fieldKey]}
+                    height={30}
+                    disabled={disabled}
+                    onChange={v => setValue(itemKey, fieldKey, v ? v.value : null)}
+                    value={value[itemKey][fieldKey]}
+                  />
+                </Box>
+                {i === mappedKeys.length - 1 && (
+                  <Box ml={1}>
+                    <Button
+                      icon="icon-trash"
+                      size="small"
+                      disabled={disabled}
+                      onClick={() => removeRow(itemKey)}
+                    />
+                  </Box>
+                )}
+              </Flex>
+            ))}
+          </Flex>
+        ))}
+      </React.Fragment>
+    );
+  };
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        inline={model => !this.hasValue(model.getValue(this.props.name))}
+        field={this.renderField}
+      />
+    );
+  }
+}
+
+const LabelColumn = styled(p => <Box flex="0 0 200px" {...p} />)``;
+
+const StyledHeader = styled(Box)`
+  font-size: 0.8em;
+  text-transform: uppercase;
+  color: ${p => p.theme.gray3};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index c17eba7b4f..711d1bea75 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -8,6 +8,7 @@ import TextField from 'app/views/settings/components/forms/textField';
 import TextareaField from 'app/views/settings/components/forms/textareaField';
 import RadioField from 'app/views/settings/components/forms/radioField';
 import InputField from 'app/views/settings/components/forms/inputField';
+import ChoiceMapper from 'app/views/settings/components/forms/choiceMapper';
 
 export default class FieldFromConfig extends React.Component {
   static propTypes = {
@@ -22,6 +23,7 @@ export default class FieldFromConfig extends React.Component {
         'choice',
         'select',
         'multichoice',
+        'choice_mapper',
         'range',
       ]),
       required: PropTypes.bool,
@@ -91,6 +93,8 @@ export default class FieldFromConfig extends React.Component {
         // }
 
         return <SelectField {...props} />;
+      case 'choice_mapper':
+        return <ChoiceMapper {...props} />;
       case 'radio':
         return <RadioField {...props} />;
       default:
