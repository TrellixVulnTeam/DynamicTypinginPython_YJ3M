commit 9355bc4bb6b31a64b3351be8a23d3fce67de4d72
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Apr 5 12:09:03 2014 -0700

    Improve deletions with retry support

diff --git a/src/sentry/models/group.py b/src/sentry/models/group.py
index ec2f992631..0d8eab9960 100644
--- a/src/sentry/models/group.py
+++ b/src/sentry/models/group.py
@@ -89,23 +89,6 @@ class Group(Model):
             self.message = self.message.splitlines()[0][:255]
         super(Group, self).save(*args, **kwargs)
 
-    def delete(self):
-        from sentry.models import (
-            GroupTagKey, GroupTagValue, GroupCountByMinute, EventMapping, Event
-        )
-        model_list = (
-            GroupTagKey, GroupTagValue, GroupCountByMinute, EventMapping, Event
-        )
-        for model in model_list:
-            logging.info('Removing %r objects where group=%s', model, self.id)
-            has_results = True
-            while has_results:
-                has_results = False
-                for obj in model.objects.filter(group=self)[:1000]:
-                    obj.delete()
-                    has_results = True
-        super(Group, self).delete()
-
     def get_absolute_url(self):
         return absolute_uri(reverse('sentry-group', args=[
             self.team.slug, self.project.slug, self.id]))
diff --git a/src/sentry/tasks/deletion.py b/src/sentry/tasks/deletion.py
index 71348f5e63..b8d73ae9df 100644
--- a/src/sentry/tasks/deletion.py
+++ b/src/sentry/tasks/deletion.py
@@ -11,7 +11,8 @@ from __future__ import absolute_import
 from sentry.tasks.base import instrumented_task
 
 
-@instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup')
+@instrumented_task(name='sentry.tasks.deletion.delete_project', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
 def delete_project(object_id, **kwargs):
     from sentry.constants import STATUS_HIDDEN
     from sentry.models import (
@@ -30,31 +31,61 @@ def delete_project(object_id, **kwargs):
 
     logger = delete_project.get_logger()
 
-    # This handles cascades properly
-    # TODO: this doesn't clean up the index
-    for model in (
-            ProjectKey, TagKey, TagValue, GroupTagKey, GroupTagValue,
-            GroupCountByMinute, ProjectCountByMinute, Activity, EventMapping,
-            Event, Group):
-        logger.info('Removing %r objects where project=%s', model, p.id)
-        has_results = False
-        for obj in model.objects.filter(project=p)[:1000]:
-            obj.delete()
-            has_results = True
+    model_list = (
+        ProjectKey, TagKey, TagValue, GroupTagKey, GroupTagValue,
+        GroupCountByMinute, ProjectCountByMinute, Activity, EventMapping,
+        Event, Group
+    )
 
-        if has_results:
-            delete_project.delay(object_id=object_id)
-            return
-    p.delete()
+    try:
+        for model in model_list:
+            logger.info('Removing %r objects where project=%s', model, p.id)
+            has_results = False
+            for obj in model.objects.filter(project=p)[:1000]:
+                obj.delete()
+                has_results = True
+
+            if has_results:
+                delete_project.delay(object_id=object_id)
+                return
 
+        p.delete()
+    except Exception as exc:
+        delete_project.retry(exc=exc)
 
-@instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup')
+
+@instrumented_task(name='sentry.tasks.deletion.delete_group', queue='cleanup',
+                   default_retry_delay=60 * 5, max_retries=None)
 def delete_group(object_id, **kwargs):
-    from sentry.models import Group
+    from sentry.models import (
+        Group, GroupTagKey, GroupTagValue, GroupCountByMinute, EventMapping, Event
+    )
 
     try:
-        g = Group.objects.get(id=object_id)
+        group = Group.objects.get(id=object_id)
     except Group.DoesNotExist:
         return
 
-    g.delete()
+    logger = delete_group.get_logger()
+
+    model_list = (
+        GroupTagValue, GroupTagKey, GroupCountByMinute, EventMapping, Event
+    )
+
+    try:
+        for model in model_list:
+            logger.info('Removing %r objects where group=%s', model, group.id)
+            has_results = True
+            while has_results:
+                has_results = False
+                for obj in model.objects.filter(group=group)[:1000]:
+                    obj.delete()
+                    has_results = True
+
+            if has_results:
+                delete_group.delay(object_id=object_id)
+                return
+
+        group.delete()
+    except Exception as exc:
+        delete_group.retry(exc=exc)
