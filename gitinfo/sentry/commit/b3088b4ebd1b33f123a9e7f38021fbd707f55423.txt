commit b3088b4ebd1b33f123a9e7f38021fbd707f55423
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 17 16:58:12 2014 +0200

    Add internal frontend project
    
    - Add default 'sentry' user when no superuser is present
    - Add default 'sentry' team
    
    Ref d4769d5c

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index a4ab571292..43cf71f48c 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -1,6 +1,5 @@
 from __future__ import absolute_import
 
-from django.conf import settings
 from rest_framework import serializers, status
 from rest_framework.response import Response
 
@@ -64,8 +63,8 @@ class ProjectDetailsEndpoint(Endpoint):
     def delete(self, request, project_id):
         project = Project.objects.get(id=project_id)
 
-        if project.id == settings.SENTRY_PROJECT:
-            return Response('{"error": "Cannot remove default project."}',
+        if project.is_internal_project():
+            return Response('{"error": "Cannot remove projects internally used by Sentry."}',
                             status=status.HTTP_403_FORBIDDEN)
 
         if not (request.user.is_superuser or project.team.owner_id == request.user.id):
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 7d94a2303c..351d52d650 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -511,7 +511,13 @@ STATSD_CLIENT = 'django_statsd.clients.null'
 # Sentry and Raven configuration
 
 SENTRY_PUBLIC = False
+
+# Default project ID for recording internal exceptions
 SENTRY_PROJECT = 1
+
+# Project ID for recording frontend (javascript) exceptions
+SENTRY_FRONTEND_PROJECT = None
+
 SENTRY_CACHE_BACKEND = 'default'
 
 SENTRY_FILTERS = (
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 3cde07699c..01d3db1fd0 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -111,8 +111,11 @@ class Project(Model):
             fv.delete()
         self.delete()
 
-    def is_default_project(self):
-        return str(self.id) == str(settings.SENTRY_PROJECT) or str(self.slug) == str(settings.SENTRY_PROJECT)
+    def is_internal_project(self):
+        for value in (settings.SENTRY_FRONTEND_PROJECT, settings.SENTRY_PROJECT):
+            if str(self.id) == str(value) or str(self.slug) == str(value):
+                return True
+        return False
 
     def get_tags(self):
         from sentry.models import TagKey
diff --git a/src/sentry/permissions.py b/src/sentry/permissions.py
index 687691e6ca..3dbc89baba 100644
--- a/src/sentry/permissions.py
+++ b/src/sentry/permissions.py
@@ -160,7 +160,7 @@ def can_remove_team(user, team):
 
 @requires_login
 def can_remove_project(user, project):
-    if project.is_default_project():
+    if project.is_internal_project():
         return False
 
     if user.is_superuser:
diff --git a/src/sentry/receivers/core.py b/src/sentry/receivers/core.py
index 31baae318c..a62874df60 100644
--- a/src/sentry/receivers/core.py
+++ b/src/sentry/receivers/core.py
@@ -23,26 +23,58 @@ SELECT setval('sentry_project_id_seq', (
 """
 
 
-def create_default_project(created_models, verbosity=2, **kwargs):
+def create_default_projects(created_models, verbosity=2, **kwargs):
     if Project not in created_models:
         return
 
-    if Project.objects.filter(id=settings.SENTRY_PROJECT).exists():
+    create_default_project(
+        id=settings.SENTRY_PROJECT,
+        name='Backend',
+        slug='backend',
+        verbosity=verbosity,
+        platform='django',
+    )
+    if settings.SENTRY_FRONTEND_PROJECT:
+        project = create_default_project(
+            id=settings.SENTRY_FRONTEND_PROJECT,
+            name='Frontend',
+            slug='frontend',
+            verbosity=verbosity,
+            platform='javascript'
+        )
+
+
+def create_default_project(id, name, slug, verbosity=2, **kwargs):
+    if Project.objects.filter(id=id).exists():
         return
 
     try:
         user = User.objects.filter(is_superuser=True)[0]
     except IndexError:
-        user = None
+        user, _ = User.objects.get_or_create(
+            username='sentry',
+            defaults={
+                'email': 'sentry@localhost',
+            }
+        )
+
+    team, _ = Team.objects.get_or_create(
+        name='sentry',
+        defaults={
+            'owner': user,
+        }
+    )
 
     project = Project.objects.create(
-        id=settings.SENTRY_PROJECT,
+        id=id,
         public=False,
-        name='Sentry (Internal)',
-        slug='sentry',
+        name=name,
+        slug=slug,
         owner=user,
-        platform='django',
+        team=team,
+        **kwargs
     )
+
     # HACK: manually update the ID after insert due to Postgres
     # sequence issues. Seriously, fuck everything about this.
     connection = connections[project._state.db]
@@ -50,9 +82,13 @@ def create_default_project(created_models, verbosity=2, **kwargs):
         cursor = connection.cursor()
         cursor.execute(PROJECT_SEQUENCE_FIX)
 
+    project.update_option('sentry:origins', ['*'])
+
     if verbosity > 0:
         print('Created internal Sentry project (slug=%s, id=%s)' % (project.slug, project.id))
 
+    return project
+
 
 def set_sentry_version(latest=None, **kwargs):
     import sentry
@@ -71,6 +107,11 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
     if not created or kwargs.get('raw'):
         return
 
+    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
+        ProjectKey.objects.create(
+            project=instance,
+        )
+
     if not instance.owner:
         return
 
@@ -80,11 +121,6 @@ def create_team_and_keys_for_project(instance, created, **kwargs):
         team.save()
         update(instance, team=team)
 
-    if not ProjectKey.objects.filter(project=instance, user__isnull=True).exists():
-        ProjectKey.objects.create(
-            project=instance,
-        )
-
 
 def create_team_member_for_owner(instance, created, **kwargs):
     if not created:
@@ -171,7 +207,7 @@ def on_alert_creation(instance, **kwargs):
 
 # Signal registration
 post_syncdb.connect(
-    create_default_project,
+    create_default_projects,
     dispatch_uid="create_default_project",
     weak=False,
 )
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index fed69b09c9..773c892b3d 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -46,7 +46,7 @@
             </fieldset>
             <div class="form-actions">
                 <button type="submit" class="btn btn-primary">{% trans "Save Changes" %}</button>
-                {% if not project.is_default_project %}
+                {% if not project.is_internal_project %}
                     <a href="{% url 'sentry-remove-project' project.team.slug project.slug %}" class="btn btn-danger">{% trans "Remove Project" %}</a>
                 {% else %}
                     <p class="pull-right">{% trans "This project cannot be removed. It is used internally by the Sentry server." %}</p>
diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 1f7808634a..fc18740709 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -105,6 +105,7 @@ def get_default_context(request, existing_context=None, team=None):
         'URL_PREFIX': settings.SENTRY_URL_PREFIX,
         'PLUGINS': plugins,
         'STATUS_HIDDEN': STATUS_HIDDEN,
+        'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
     }
 
     if request:
diff --git a/tests/sentry/receivers/test_core.py b/tests/sentry/receivers/test_core.py
index c070bf46d0..bb2868a9f0 100644
--- a/tests/sentry/receivers/test_core.py
+++ b/tests/sentry/receivers/test_core.py
@@ -4,25 +4,26 @@ from __future__ import absolute_import
 
 from django.conf import settings
 
-from sentry.models import Project, ProjectKey, User
-from sentry.receivers.core import create_default_project
+from sentry.models import Project, ProjectKey, Team, User
+from sentry.receivers.core import create_default_projects
 from sentry.testutils import TestCase
 
 
-class CreateDefaultProjectTest(TestCase):
+class CreateDefaultProjectsTest(TestCase):
     def test_simple(self):
         user, _ = User.objects.get_or_create(is_superuser=True, defaults={
             'username': 'test'
         })
+        Team.objects.filter(slug='sentry').delete()
         Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
 
-        create_default_project(created_models=[Project])
+        create_default_projects(created_models=[Project])
 
         project = Project.objects.get(id=settings.SENTRY_PROJECT)
         assert project.owner == user
         assert project.public is False
-        assert project.name == 'Sentry (Internal)'
-        assert project.slug == 'sentry'
+        assert project.name == 'Backend'
+        assert project.slug == 'backend'
         team = project.team
         assert team.owner == user
         assert team.slug == 'sentry'
@@ -31,3 +32,32 @@ class CreateDefaultProjectTest(TestCase):
         assert not pk.roles.api
         assert pk.roles.store
         assert pk.user is None
+
+        # ensure that we dont hit an error here
+        create_default_projects(created_models=[Project])
+
+    def test_without_user(self):
+        User.objects.filter(is_superuser=True).delete()
+        Team.objects.filter(slug='sentry').delete()
+        Project.objects.filter(id=settings.SENTRY_PROJECT).delete()
+
+        create_default_projects(created_models=[Project])
+
+        user = User.objects.get(username='sentry')
+
+        project = Project.objects.get(id=settings.SENTRY_PROJECT)
+        assert project.owner == user
+        assert project.public is False
+        assert project.name == 'Backend'
+        assert project.slug == 'backend'
+        team = project.team
+        assert team.owner == user
+        assert team.slug == 'sentry'
+
+        pk = ProjectKey.objects.get(project=project)
+        assert not pk.roles.api
+        assert pk.roles.store
+        assert pk.user is None
+
+        # ensure that we dont hit an error here
+        create_default_projects(created_models=[Project])
diff --git a/tests/sentry/utils/http/tests.py b/tests/sentry/utils/http/tests.py
index 728871f242..ebd8beb9cf 100644
--- a/tests/sentry/utils/http/tests.py
+++ b/tests/sentry/utils/http/tests.py
@@ -7,7 +7,7 @@ import mock
 from django.conf import settings
 from exam import fixture
 
-from sentry.models import Project, ProjectOption
+from sentry.models import Project
 from sentry.testutils import TestCase
 from sentry.utils.http import (
     is_same_domain, is_valid_origin, get_origins, absolute_uri)
@@ -45,16 +45,15 @@ class GetOriginsTestCase(TestCase):
 
     def test_project(self):
         project = Project.objects.get()
-        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+        project.update_option('sentry:origins', ['http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN=None):
             result = get_origins(project)
             self.assertEquals(result, frozenset(['http://foo.example']))
 
     def test_project_and_setting(self):
-        from sentry.models import Project, ProjectOption
         project = Project.objects.get()
-        ProjectOption.objects.create(project=project, key='sentry:origins', value=['http://foo.example'])
+        project.update_option('sentry:origins', ['http://foo.example'])
 
         with self.settings(SENTRY_ALLOW_ORIGIN='http://example.com'):
             result = get_origins(project)
