commit 2169881d3f6ff4dff65150cdd6b18af6a6ce7f6c
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Wed Feb 6 10:36:45 2019 -0800

    feat: Add feature list to organization serializer (#11908)
    
    This change returns the features list for the organization index endpoint.
    Since the home route for each organization now depends on which features
    are active, we need to return the list of features in order to make the
    organization switcher work.

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 4120e004e0..d0c9103b71 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -40,6 +40,9 @@ class OrganizationSerializer(Serializer):
         return data
 
     def serialize(self, obj, attrs, user):
+        from sentry import features
+        from sentry.features.base import OrganizationFeature
+
         if attrs.get('avatar'):
             avatar = {
                 'avatarType': attrs['avatar'].get_avatar_type_display(),
@@ -53,6 +56,37 @@ class OrganizationSerializer(Serializer):
 
         status = OrganizationStatus(obj.status)
 
+        # Retrieve all registered organization features
+        org_features = features.all(feature_type=OrganizationFeature).keys()
+        feature_list = set()
+
+        for feature_name in org_features:
+            if not feature_name.startswith('organizations:'):
+                continue
+            if features.has(feature_name, obj, actor=user):
+                # Remove the organization scope prefix
+                feature_list.add(feature_name[len('organizations:'):])
+
+        # Do not include the onboarding feature if OrganizationOptions exist
+        if 'onboarding' in feature_list and \
+                OrganizationOption.objects.filter(organization=obj).exists():
+            feature_list.remove('onboarding')
+
+        # Include api-keys feature if they previously had any api-keys
+        if 'api-keys' not in feature_list and ApiKey.objects.filter(organization=obj).exists():
+            feature_list.add('api-keys')
+
+        # Organization flag features (not provided through the features module)
+        if OrganizationOption.objects.filter(
+                organization=obj, key__in=LEGACY_RATE_LIMIT_OPTIONS).exists():
+            feature_list.add('legacy-rate-limits')
+        if getattr(obj.flags, 'allow_joinleave'):
+            feature_list.add('open-membership')
+        if not getattr(obj.flags, 'disable_shared_issues'):
+            feature_list.add('shared-issues')
+        if getattr(obj.flags, 'require_2fa'):
+            feature_list.add('require-2fa')
+
         return {
             'id': six.text_type(obj.id),
             'slug': obj.slug,
@@ -65,6 +99,7 @@ class OrganizationSerializer(Serializer):
             'isEarlyAdopter': bool(obj.flags.early_adopter),
             'require2FA': bool(obj.flags.require_2fa),
             'avatar': avatar,
+            'features': feature_list
         }
 
 
@@ -81,8 +116,7 @@ class OnboardingTasksSerializer(Serializer):
 
 class DetailedOrganizationSerializer(OrganizationSerializer):
     def serialize(self, obj, attrs, user):
-        from sentry import features, experiments
-        from sentry.features.base import OrganizationFeature
+        from sentry import experiments
         from sentry.app import env
         from sentry.api.serializers.models.project import ProjectSummarySerializer
         from sentry.api.serializers.models.team import TeamSerializer
@@ -109,37 +143,6 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             ).select_related('user')
         )
 
-        # Retrieve all registered organization features
-        org_features = features.all(feature_type=OrganizationFeature).keys()
-        feature_list = set()
-
-        for feature_name in org_features:
-            if not feature_name.startswith('organizations:'):
-                continue
-            if features.has(feature_name, obj, actor=user):
-                # Remove the organization scope prefix
-                feature_list.add(feature_name[len('organizations:'):])
-
-        # Do not include the onboarding feature if OrganizationOptions exist
-        if 'onboarding' in feature_list and \
-                OrganizationOption.objects.filter(organization=obj).exists():
-            feature_list.remove('onboarding')
-
-        # Include api-keys feature if they previously had any api-keys
-        if 'api-keys' not in feature_list and ApiKey.objects.filter(organization=obj).exists():
-            feature_list.add('api-keys')
-
-        # Organization flag features (not provided through the features module)
-        if OrganizationOption.objects.filter(
-                organization=obj, key__in=LEGACY_RATE_LIMIT_OPTIONS).exists():
-            feature_list.add('legacy-rate-limits')
-        if getattr(obj.flags, 'allow_joinleave'):
-            feature_list.add('open-membership')
-        if not getattr(obj.flags, 'disable_shared_issues'):
-            feature_list.add('shared-issues')
-        if getattr(obj.flags, 'require_2fa'):
-            feature_list.add('require-2fa')
-
         experiment_assignments = experiments.all(org=obj, actor=user)
 
         context = super(DetailedOrganizationSerializer, self).serialize(obj, attrs, user)
@@ -190,7 +193,6 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
             context['access'] = access.from_request(env.request, obj).scopes
         else:
             context['access'] = access.from_user(user, obj).scopes
-        context['features'] = feature_list
         context['pendingAccessRequests'] = OrganizationAccessRequest.objects.filter(
             team__organization=obj,
         ).count()
diff --git a/tests/sentry/api/serializers/test_organization.py b/tests/sentry/api/serializers/test_organization.py
index 222a4e03b1..dbc6706818 100644
--- a/tests/sentry/api/serializers/test_organization.py
+++ b/tests/sentry/api/serializers/test_organization.py
@@ -14,4 +14,15 @@ class OrganizationSerializerTest(TestCase):
         organization = self.create_organization(owner=user)
 
         result = serialize(organization, user)
+
         assert result['id'] == six.text_type(organization.id)
+        assert result['features'] == set([
+            'new-teams',
+            'shared-issues',
+            'repos',
+            'open-membership',
+            'invite-members',
+            'sso-saml2',
+            'sso-basic',
+            'suggested-commits'
+        ])
