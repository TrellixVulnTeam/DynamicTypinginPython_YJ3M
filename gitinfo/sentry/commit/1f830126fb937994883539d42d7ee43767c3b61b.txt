commit 1f830126fb937994883539d42d7ee43767c3b61b
Author: Matej Minar <matej.minar@sentry.io>
Date:   Wed Jan 15 15:16:08 2020 +0100

    feat(ui): Adds Health project feature flag, menu item, dummy screens (#16407)
    
    * feat(ui): Adds Health project feature flag, menu item, sreen
    
    * feat(ui): Project health dummy detail, refactored listing
    
    * removed trailing space in translation

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index d383152b14..0194581f60 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -831,6 +831,8 @@ SENTRY_FEATURES = {
     "organizations:tweak-grouping-config": True,
     # Lets organizations manage grouping configs
     "organizations:set-grouping-config": False,
+    # Enable health feature
+    "organizations:health": False,
     # Enable incidents feature
     "organizations:incidents": False,
     # Enable integration functionality to create and link groups to issues on
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 58cee96e8f..d84e32cff6 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -64,6 +64,7 @@ default_manager.add("organizations:event-attachments", OrganizationFeature)  # N
 default_manager.add("organizations:symbol-sources", OrganizationFeature)  # NOQA
 default_manager.add("organizations:custom-symbol-sources", OrganizationFeature)  # NOQA
 default_manager.add("organizations:global-views", OrganizationFeature)  # NOQA
+default_manager.add("organizations:health", OrganizationFeature)  # NOQA
 default_manager.add("organizations:incidents", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-basic", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-issue-sync", OrganizationFeature)  # NOQA
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 95d5095371..93b049fa9f 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -164,6 +164,7 @@ class Sidebar extends React.Component {
       'releases',
       'user-feedback',
       'eventsv2',
+      'health',
     ].map(route => `/organizations/${this.props.organization.slug}/${route}/`);
 
     // Only keep the querystring if the current route matches one of the above
@@ -384,7 +385,23 @@ class Sidebar extends React.Component {
                       id="monitors"
                     />
                   </Feature>
+                  <Feature features={['health']} organization={organization}>
+                    <SidebarItem
+                      {...sidebarItemProps}
+                      onClick={(_id, evt) =>
+                        this.navigateWithGlobalSelection(
+                          `/organizations/${organization.slug}/health/`,
+                          evt
+                        )
+                      }
+                      icon={<InlineSvg src="icon-health" />} // this needs to have different icon, because health is already taken (Dashboards)
+                      label={t('Health')}
+                      to={`/organizations/${organization.slug}/health/`}
+                      id="health"
+                    />
+                  </Feature>
                 </SidebarSection>
+
                 <SidebarSection>
                   <SidebarItem
                     {...sidebarItemProps}
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 6696f0c033..08163248ce 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1222,6 +1222,27 @@ function routes() {
               component={errorHandler(LazyLoad)}
             />
           </Route>
+          <Route
+            path="/organizations/:orgId/health/"
+            componentPromise={() =>
+              import(/* webpackChunkName: "HealthContainer" */ 'app/views/health')
+            }
+            component={errorHandler(LazyLoad)}
+          >
+            <IndexRoute
+              componentPromise={() =>
+                import(/* webpackChunkName: "HealthLanding" */ 'app/views/health/landing')
+              }
+              component={errorHandler(LazyLoad)}
+            />
+            <Route
+              path=":healthSlug/"
+              componentPromise={() =>
+                import(/* webpackChunkName: "HealthDetail" */ 'app/views/health/detail')
+              }
+              component={errorHandler(LazyLoad)}
+            />
+          </Route>
           <Route
             path="/organizations/:orgId/incidents/"
             componentPromise={() =>
diff --git a/src/sentry/static/sentry/app/views/health/detail/index.tsx b/src/sentry/static/sentry/app/views/health/detail/index.tsx
new file mode 100644
index 0000000000..62586dc71e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/health/detail/index.tsx
@@ -0,0 +1,98 @@
+import React from 'react';
+import * as ReactRouter from 'react-router';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import AsyncView from 'app/views/asyncView';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import NoProjectMessage from 'app/components/noProjectMessage';
+import {PageContent, PageHeader} from 'app/styles/organization';
+import PageHeading from 'app/components/pageHeading';
+import withOrganization from 'app/utils/withOrganization';
+import routeTitleGen from 'app/utils/routeTitle';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  router: ReactRouter.InjectedRouter;
+  params: Params;
+} & AsyncView['props'];
+
+type State = {} & AsyncView['state'];
+
+class HealthDetail extends AsyncView<Props, State> {
+  getTitle() {
+    return routeTitleGen(t('Health Detail'), this.props.organization.slug, false);
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+    };
+  }
+
+  getEndpoints(): [string, string][] {
+    return [['dummy', '/organizations/sentry/projects/']];
+  }
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning small>
+        {t('There are no dummy health something.')}
+      </EmptyStateWarning>
+    );
+  }
+
+  renderInnerBody() {
+    const {loading, dummy} = this.state;
+
+    if (loading) {
+      return <LoadingIndicator />;
+    }
+
+    if (!dummy.length) {
+      return this.renderEmpty();
+    }
+
+    return (
+      <p>
+        Results: Lorem, ipsum dolor sit amet consectetur adipisicing elit. Illo dicta
+        pariatur incidunt sit vitae laborum, suscipit ducimus atque dolor nostrum rem
+        minima reiciendis nihil omnis eius, consequuntur eos nobis molestias!
+      </p>
+    );
+  }
+
+  renderBody() {
+    const {organization} = this.props;
+
+    return (
+      <React.Fragment>
+        <GlobalSelectionHeader organization={organization} />
+
+        <NoProjectMessage organization={organization}>
+          <PageContent>
+            <PageHeader>
+              <PageHeading withMargins>
+                {t('Health Detail')} {this.props.params.healthSlug}
+              </PageHeading>
+            </PageHeader>
+
+            {this.renderInnerBody()}
+          </PageContent>
+        </NoProjectMessage>
+      </React.Fragment>
+    );
+  }
+}
+
+export default withOrganization(HealthDetail);
+export {HealthDetail};
diff --git a/src/sentry/static/sentry/app/views/health/index.tsx b/src/sentry/static/sentry/app/views/health/index.tsx
new file mode 100644
index 0000000000..8202ffb07a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/health/index.tsx
@@ -0,0 +1,43 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import {PageContent} from 'app/styles/organization';
+import SentryTypes from 'app/sentryTypes';
+import Feature from 'app/components/acl/feature';
+import Alert from 'app/components/alert';
+import withOrganization from 'app/utils/withOrganization';
+
+type Props = {
+  organization: Organization;
+};
+
+class HealthContainer extends React.Component<Props> {
+  static propTypes = {
+    organization: SentryTypes.Organization.isRequired,
+  };
+
+  renderNoAccess() {
+    return (
+      <PageContent>
+        <Alert type="warning">{t("You don't have access to this feature")}</Alert>
+      </PageContent>
+    );
+  }
+
+  render() {
+    const {organization, children} = this.props;
+
+    return (
+      <Feature
+        features={['health']}
+        organization={organization}
+        renderDisabled={this.renderNoAccess}
+      >
+        {children}
+      </Feature>
+    );
+  }
+}
+
+export default withOrganization(HealthContainer);
diff --git a/src/sentry/static/sentry/app/views/health/landing.tsx b/src/sentry/static/sentry/app/views/health/landing.tsx
new file mode 100644
index 0000000000..a374cd2c67
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/health/landing.tsx
@@ -0,0 +1,158 @@
+import React from 'react';
+import styled from '@emotion/styled';
+import * as ReactRouter from 'react-router';
+import {Params} from 'react-router/lib/Router';
+import {Location} from 'history';
+
+import {t} from 'app/locale';
+import {Organization} from 'app/types';
+import localStorage from 'app/utils/localStorage';
+import AsyncView from 'app/views/asyncView';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
+import Banner from 'app/components/banner';
+import NoProjectMessage from 'app/components/noProjectMessage';
+import {PageContent, PageHeader} from 'app/styles/organization';
+import PageHeading from 'app/components/pageHeading';
+import space from 'app/styles/space';
+import withOrganization from 'app/utils/withOrganization';
+import GlobalSelectionLink from 'app/components/globalSelectionLink';
+import LoadingIndicator from 'app/components/loadingIndicator';
+import EmptyStateWarning from 'app/components/emptyStateWarning';
+import routeTitleGen from 'app/utils/routeTitle';
+
+const BANNER_DISMISSED_KEY = 'health-banner-dismissed';
+
+type Props = {
+  organization: Organization;
+  location: Location;
+  router: ReactRouter.InjectedRouter;
+  params: Params;
+} & AsyncView['props'];
+
+type State = {
+  isBannerHidden: boolean;
+} & AsyncView['state'];
+
+class HealthLanding extends AsyncView<Props, State> {
+  getTitle() {
+    return routeTitleGen(t('Health'), this.props.organization.slug, false);
+  }
+
+  getDefaultState() {
+    return {
+      ...super.getDefaultState(),
+      isBannerHidden: localStorage.getItem(BANNER_DISMISSED_KEY) === 'true',
+    };
+  }
+
+  getEndpoints(): [string, string][] {
+    return [['dummy', '/organizations/sentry/projects/']];
+  }
+
+  handleBannerCloseClick = () => {
+    localStorage.setItem(BANNER_DISMISSED_KEY, 'true');
+    this.setState({isBannerHidden: true});
+  };
+
+  renderLoading() {
+    return this.renderBody();
+  }
+
+  renderEmpty() {
+    return (
+      <EmptyStateWarning small>
+        {t('There are no dummy health something.')}
+      </EmptyStateWarning>
+    );
+  }
+
+  renderBanner() {
+    const bannerDismissed = this.state.isBannerHidden;
+
+    if (bannerDismissed) {
+      return null;
+    }
+
+    return (
+      <Banner
+        title={t('Health')}
+        subtitle={t('Monitoring the health of your application')}
+        onCloseClick={this.handleBannerCloseClick}
+      />
+    );
+  }
+
+  renderInnerBody() {
+    const {organization} = this.props;
+    const {loading, dummy} = this.state;
+
+    if (loading) {
+      return <LoadingIndicator />;
+    }
+
+    if (!dummy.length) {
+      return this.renderEmpty();
+    }
+
+    return (
+      <React.Fragment>
+        {this.renderBanner()}
+
+        <StyledGrid>
+          {[1, 2, 3, 4].map(number => (
+            <div key={number}>
+              <GlobalSelectionLink
+                to={`/organizations/${organization.slug}/health/${number}/`}
+              >
+                Dummy
+              </GlobalSelectionLink>
+              <p>
+                Lorem ipsum dolor sit amet consectetur adipisicing elit. Vel neque nostrum
+                repellendus non optio. Est consectetur, amet excepturi delectus animi
+                soluta reprehenderit repellendus nostrum veniam? Odio incidunt consequatur
+                necessitatibus ea.
+              </p>
+            </div>
+          ))}
+        </StyledGrid>
+      </React.Fragment>
+    );
+  }
+
+  renderBody() {
+    const {organization} = this.props;
+
+    return (
+      <React.Fragment>
+        <GlobalSelectionHeader organization={organization} />
+
+        <NoProjectMessage organization={organization}>
+          <PageContent>
+            <PageHeader>
+              <PageHeading withMargins>{t('Health')}</PageHeading>
+            </PageHeader>
+
+            {this.renderInnerBody()}
+          </PageContent>
+        </NoProjectMessage>
+      </React.Fragment>
+    );
+  }
+}
+
+const StyledGrid = styled('div')`
+  display: grid;
+  grid-template-columns: minmax(100px, 1fr);
+  grid-gap: ${space(3)};
+
+  @media (min-width: ${p => p.theme.breakpoints[1]}) {
+    grid-template-columns: repeat(2, minmax(100px, 1fr));
+  }
+
+  @media (min-width: ${p => p.theme.breakpoints[2]}) {
+    grid-template-columns: repeat(3, minmax(100px, 1fr));
+  }
+`;
+
+export default withOrganization(HealthLanding);
+export {HealthLanding};
