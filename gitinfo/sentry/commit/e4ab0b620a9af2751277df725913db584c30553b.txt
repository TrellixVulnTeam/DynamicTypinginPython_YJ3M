commit e4ab0b620a9af2751277df725913db584c30553b
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Thu May 17 14:41:56 2018 -0700

    feat(api): Return basic fields required for issue create for new integrations (#8469)

diff --git a/src/sentry/api/endpoints/group_integration_details.py b/src/sentry/api/endpoints/group_integration_details.py
index 57959678bf..defc41ce73 100644
--- a/src/sentry/api/endpoints/group_integration_details.py
+++ b/src/sentry/api/endpoints/group_integration_details.py
@@ -37,7 +37,11 @@ class GroupIntegrationDetailsEndpoint(GroupEndpoint):
 
         # TODO(jess): add create issue config to serializer
         return Response(
-            serialize(integration, request.user, IntegrationIssueConfigSerializer(group, action))
+            serialize(
+                integration,
+                request.user,
+                IntegrationIssueConfigSerializer(group, action, params=request.GET),
+            )
         )
 
     # was thinking put for link an existing issue, post for create new issue?
diff --git a/src/sentry/api/serializers/models/integration.py b/src/sentry/api/serializers/models/integration.py
index 9e3e181c04..7bec97fb24 100644
--- a/src/sentry/api/serializers/models/integration.py
+++ b/src/sentry/api/serializers/models/integration.py
@@ -24,16 +24,26 @@ class IntegrationSerializer(Serializer):
 
 
 class IntegrationIssueConfigSerializer(IntegrationSerializer):
-    def __init__(self, group, action):
+    def __init__(self, group, action, params=None):
         self.group = group
         self.action = action
+        self.params = params
 
     def serialize(self, obj, attrs, user):
         data = super(IntegrationIssueConfigSerializer, self).serialize(obj, attrs, user)
         installation = obj.get_installation()
 
         if self.action == 'link':
-            data['linkIssueConfig'] = installation.get_link_issue_config(self.group)
+            data['linkIssueConfig'] = installation.get_link_issue_config(
+                self.group,
+                params=self.params,
+            )
+
+        if self.action == 'create':
+            data['createIssueConfig'] = installation.get_create_issue_config(
+                self.group,
+                params=self.params,
+            )
 
         return data
 
diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index 16ef17489a..41a5a61d81 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -4,6 +4,7 @@ from django.http import HttpResponse
 from sentry.integrations import (
     Integration, IntegrationFeatures, IntegrationMetadata, IntegrationProvider
 )
+from sentry.integrations.issues import IssueSyncMixin
 from sentry.pipeline import PipelineView
 
 
@@ -40,11 +41,11 @@ metadata = IntegrationMetadata(
 )
 
 
-class ExampleIntegration(Integration):
+class ExampleIntegration(Integration, IssueSyncMixin):
     def create_comment(self):
         pass
 
-    def get_link_issue_config(self, group):
+    def get_link_issue_config(self, group, **kwargs):
         return [
             {
                 'name': 'externalIssue',
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
new file mode 100644
index 0000000000..b4b9e41ead
--- /dev/null
+++ b/src/sentry/integrations/issues.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.models import Event
+from sentry.utils.http import absolute_uri
+from sentry.utils.safe import safe_execute
+
+
+class IssueSyncMixin(object):
+    def get_group_title(self, group, event, **kwargs):
+        return event.error()
+
+    def get_group_body(self, group, event, **kwargs):
+        result = []
+        for interface in six.itervalues(event.interfaces):
+            output = safe_execute(interface.to_string, event, _with_transaction=False)
+            if output:
+                result.append(output)
+        return '\n\n'.join(result)
+
+    def get_group_description(self, group, event, **kwargs):
+        output = [
+            absolute_uri(group.get_absolute_url()),
+        ]
+        body = self.get_group_body(group, event)
+        if body:
+            output.extend([
+                '',
+                '```',
+                body,
+                '```',
+            ])
+        return '\n'.join(output)
+
+    def get_create_issue_config(self, group, **kwargs):
+        event = group.get_latest_event()
+        if event is not None:
+            Event.objects.bind_nodes([event], 'data')
+
+        return [
+            {
+                'name': 'title',
+                'label': 'Title',
+                'default': self.get_group_title(group, event, **kwargs),
+                'type': 'string',
+            }, {
+                'name': 'description',
+                'label': 'Description',
+                'default': self.get_group_description(group, event, **kwargs),
+                'type': 'textarea',
+            }
+        ]
diff --git a/tests/sentry/api/endpoints/test_group_integration_details.py b/tests/sentry/api/endpoints/test_group_integration_details.py
index 7741c0038c..3d12ee36b7 100644
--- a/tests/sentry/api/endpoints/test_group_integration_details.py
+++ b/tests/sentry/api/endpoints/test_group_integration_details.py
@@ -4,10 +4,11 @@ import six
 
 from sentry.models import ExternalIssue, GroupLink, Integration
 from sentry.testutils import APITestCase
+from sentry.utils.http import absolute_uri
 
 
 class GroupIntegrationDetailsTest(APITestCase):
-    def test_simple_get(self):
+    def test_simple_get_link(self):
         self.login_as(user=self.user)
         org = self.organization
         group = self.create_group()
@@ -38,6 +39,49 @@ class GroupIntegrationDetailsTest(APITestCase):
             }]
         }
 
+    def test_simple_get_create(self):
+        self.login_as(user=self.user)
+        org = self.organization
+        group = self.create_group()
+        self.create_event(group=group)
+        integration = Integration.objects.create(
+            provider='example',
+            name='Example',
+        )
+        integration.add_organization(org.id)
+
+        path = '/api/0/issues/{}/integrations/{}/?action=create'.format(group.id, integration.id)
+
+        response = self.client.get(path)
+
+        assert response.data == {
+            'id': six.text_type(integration.id),
+            'name': integration.name,
+            'icon': integration.metadata.get('icon'),
+            'domain_name': integration.metadata.get('domain_name'),
+            'provider': {
+                'key': integration.get_provider().key,
+                'name': integration.get_provider().name,
+            },
+            'createIssueConfig': [
+                {
+                    'default': 'message',
+                    'type': 'string',
+                    'name': 'title',
+                    'label': 'Title',
+                }, {
+                    'default': ('%s\n\n```\n'
+                                'Stacktrace (most recent call last):\n\n  '
+                                'File "sentry/models/foo.py", line 29, in build_msg\n    '
+                                'string_max_length=self.string_max_length)\n\nmessage\n```'
+                                ) % (absolute_uri(group.get_absolute_url()),),
+                    'type': 'textarea',
+                    'name': 'description',
+                    'label': 'Description',
+                }
+            ]
+        }
+
     def test_simple_put(self):
         self.login_as(user=self.user)
         org = self.organization
