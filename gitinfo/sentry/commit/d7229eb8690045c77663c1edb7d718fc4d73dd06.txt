commit d7229eb8690045c77663c1edb7d718fc4d73dd06
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Fri May 1 15:21:17 2020 -0700

    ref(db): Add DefaultFieldsModel  (#18535)
    
    * ref(migration): Add new base model with date_updated

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 90cf336317..e8cd71bcce 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0070_incident_snapshot_support
+sentry: 0071_add_default_fields_model_subclass
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/db/models/base.py b/src/sentry/db/models/base.py
index fd865ffd2f..e902944536 100644
--- a/src/sentry/db/models/base.py
+++ b/src/sentry/db/models/base.py
@@ -8,12 +8,13 @@ from bitfield.types import BitHandler
 from django.db import models
 from django.db.models import signals
 from django.db.models.query_utils import DeferredAttribute
+from django.utils import timezone
 
 from .fields.bounded import BoundedBigAutoField
 from .manager import BaseManager
 from .query import update
 
-__all__ = ("BaseModel", "Model", "sane_repr")
+__all__ = ("BaseModel", "Model", "DefaultFieldsModel", "sane_repr")
 
 UNSAVED = object()
 
@@ -127,6 +128,20 @@ class Model(BaseModel):
     __repr__ = sane_repr("id")
 
 
+class DefaultFieldsModel(Model):
+    date_updated = models.DateTimeField(default=timezone.now)
+    date_added = models.DateTimeField(default=timezone.now, null=True)
+
+    class Meta:
+        abstract = True
+
+
+def __model_pre_save(instance, **kwargs):
+    if not isinstance(instance, DefaultFieldsModel):
+        return
+    instance.date_updated = timezone.now()
+
+
 def __model_post_save(instance, **kwargs):
     if not isinstance(instance, BaseModel):
         return
@@ -141,5 +156,6 @@ def __model_class_prepared(sender, **kwargs):
         raise ValueError(u"{!r} model has not defined __core__".format(sender))
 
 
+signals.pre_save.connect(__model_pre_save)
 signals.post_save.connect(__model_post_save)
 signals.class_prepared.connect(__model_class_prepared)
diff --git a/src/sentry/migrations/0071_add_default_fields_model_subclass.py b/src/sentry/migrations/0071_add_default_fields_model_subclass.py
new file mode 100644
index 0000000000..83335e50f7
--- /dev/null
+++ b/src/sentry/migrations/0071_add_default_fields_model_subclass.py
@@ -0,0 +1,53 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.29 on 2020-05-01 16:14
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import django.utils.timezone
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = False
+
+
+    dependencies = [
+        ('sentry', '0070_incident_snapshot_support'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='integration',
+            name='date_updated',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+        migrations.AddField(
+            model_name='integrationexternalproject',
+            name='date_updated',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+        migrations.AddField(
+            model_name='organizationintegration',
+            name='date_updated',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+        migrations.AddField(
+            model_name='pagerdutyservice',
+            name='date_updated',
+            field=models.DateTimeField(default=django.utils.timezone.now),
+        ),
+    ]
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index c81d9b4290..029fa5758a 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -11,6 +11,7 @@ from sentry.db.models import (
     EncryptedJsonField,
     FlexibleForeignKey,
     Model,
+    DefaultFieldsModel,
 )
 from sentry.signals import integration_added
 
@@ -18,7 +19,7 @@ from sentry.signals import integration_added
 logger = logging.getLogger(__name__)
 
 
-class PagerDutyService(Model):
+class PagerDutyService(DefaultFieldsModel):
     __core__ = False
 
     organization_integration = FlexibleForeignKey("sentry.OrganizationIntegration")
@@ -31,7 +32,7 @@ class PagerDutyService(Model):
         db_table = "sentry_pagerdutyservice"
 
 
-class IntegrationExternalProject(Model):
+class IntegrationExternalProject(DefaultFieldsModel):
     __core__ = False
 
     organization_integration_id = BoundedPositiveIntegerField(db_index=True)
@@ -47,7 +48,7 @@ class IntegrationExternalProject(Model):
         unique_together = (("organization_integration_id", "external_id"),)
 
 
-class OrganizationIntegration(Model):
+class OrganizationIntegration(DefaultFieldsModel):
     __core__ = False
 
     organization = FlexibleForeignKey("sentry.Organization")
@@ -55,7 +56,6 @@ class OrganizationIntegration(Model):
     config = EncryptedJsonField(default=dict)
 
     default_auth_id = BoundedPositiveIntegerField(db_index=True, null=True)
-    date_added = models.DateTimeField(default=timezone.now, null=True)
     status = BoundedPositiveIntegerField(
         default=ObjectStatus.VISIBLE, choices=ObjectStatus.as_choices()
     )
@@ -81,7 +81,7 @@ class ProjectIntegration(Model):
         unique_together = (("project", "integration"),)
 
 
-class Integration(Model):
+class Integration(DefaultFieldsModel):
     __core__ = False
 
     organizations = models.ManyToManyField(
@@ -100,7 +100,6 @@ class Integration(Model):
     status = BoundedPositiveIntegerField(
         default=ObjectStatus.VISIBLE, choices=ObjectStatus.as_choices(), null=True
     )
-    date_added = models.DateTimeField(default=timezone.now, null=True)
 
     class Meta:
         app_label = "sentry"
diff --git a/tests/sentry/integrations/test_base.py b/tests/sentry/integrations/test_base.py
index 21e3a90ed7..ce330f01b5 100644
--- a/tests/sentry/integrations/test_base.py
+++ b/tests/sentry/integrations/test_base.py
@@ -35,3 +35,16 @@ class IntegrationTestCase(TestCase):
         assert integration.model == self.model
         assert integration.org_integration == self.org_integration
         assert integration.get_default_identity() == self.identity
+
+    def test_model_default_fields(self):
+        # These fields are added through the DefaultFieldsModel
+        # and date_updated should get automatically updated any
+        # time the model is saved
+        assert self.model.date_added
+        assert self.model.date_updated
+
+        inital_value = self.model.date_updated
+        self.model.name = "cooler_name"
+        self.model.save()
+
+        assert inital_value < Integration.objects.get(id=self.model.id).date_updated
