commit 26c0d1593f1f9cc2deeda788c11a75f4f97e18ba
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Oct 31 11:16:48 2019 -0700

    Feat/sentry plugin migration v1 (#15299)

diff --git a/.travis.yml b/.travis.yml
index 36ba4bc0fa..af68428ae5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -173,6 +173,11 @@ matrix:
       name: 'Django 1.9 Acceptance'
       env: DJANGO_VERSION=">=1.9,<1.10" TEST_SUITE=acceptance USE_SNUBA=1
 
+    # allowed to fail
+    - <<: *acceptance_default
+      name: 'Plugins'
+      env: TEST_SUITE=plugins DB=postgres PERCY_TOKEN=${PLUGIN_PERCY_TOKEN}
+
     - python: 2.7
       name: 'Frontend'
       env: TEST_SUITE=js
@@ -258,6 +263,7 @@ matrix:
     - name: 'Django 1.9 Backend [Postgres] (1/2)'
     - name: 'Django 1.9 Backend [Postgres] (2/2)'
     - name: 'Django 1.9 Acceptance'
+    - name: 'Plugins'
 
 notifications:
   webhooks:
diff --git a/Makefile b/Makefile
index f74efbfeab..1c7fa37189 100644
--- a/Makefile
+++ b/Makefile
@@ -180,6 +180,13 @@ endif
 
 	@echo ""
 
+test-plugins:
+	@echo "--> Building static assets"
+	@$(WEBPACK) --display errors-only
+	@echo "--> Running plugin tests"
+	py.test tests/sentry_plugins -vv --cov . --cov-report="xml:.artifacts/plugins.coverage.xml" --junit-xml=".artifacts/plugins.junit.xml"
+	@echo ""
+
 lint: lint-python lint-js
 
 # configuration for flake8 can be found in setup.cfg
@@ -230,6 +237,7 @@ travis-test-snuba: test-snuba
 travis-test-symbolicator: test-symbolicator
 travis-test-js: test-js
 travis-test-cli: test-cli
+travis-test-plugins: test-plugins
 travis-test-dist:
 	# NOTE: We quiet down output here to workaround an issue in travis that
 	# causes the build to fail with a EAGAIN when writing a large amount of
@@ -253,3 +261,4 @@ travis-scan-js: travis-noop
 travis-scan-cli: travis-noop
 travis-scan-dist: travis-noop
 travis-scan-lint: scan-python
+travis-scan-plugins: travis-noop
diff --git a/conftest.py b/conftest.py
index 7f4a51aa4c..696605e10f 100644
--- a/conftest.py
+++ b/conftest.py
@@ -18,6 +18,37 @@ def pytest_configure(config):
     # being used
     warnings.filterwarnings("error", "", Warning, r"^(?!(|kombu|raven|sentry))")
 
+    # if we are running any tests for plugins, we need to make sure we install them first
+    if any("tests/sentry_plugins" in s for s in config.getoption("file_or_dir")):
+        install_sentry_plugins()
+
+
+def install_sentry_plugins():
+    # Sentry's pytest plugin explicitly doesn't load plugins, so let's load all of them
+    # and ignore the fact that we're not *just* testing our own
+    # Note: We could manually register/configure INSTALLED_APPS by traversing our entry points
+    # or package directories, but this is easier assuming Sentry doesn't change APIs.
+    # Note: Order of operations matters here.
+    from sentry.runner.importer import install_plugin_apps
+    from django.conf import settings
+
+    install_plugin_apps("sentry.new_apps", settings)
+
+    from sentry.runner.initializer import register_plugins
+
+    register_plugins(settings, test_plugins=True)
+
+    settings.ASANA_CLIENT_ID = "abc"
+    settings.ASANA_CLIENT_SECRET = "123"
+    settings.BITBUCKET_CONSUMER_KEY = "abc"
+    settings.BITBUCKET_CONSUMER_SECRET = "123"
+    settings.GITHUB_APP_ID = "abc"
+    settings.GITHUB_API_SECRET = "123"
+    settings.GITHUB_APPS_APP_ID = "abc"
+    settings.GITHUB_APPS_API_SECRET = "123"
+    # this isn't the real secret
+    settings.SENTRY_OPTIONS["github.integration-hook-secret"] = "b3002c3e321d4b7880360d397db2ccfd"
+
 
 def pytest_collection_modifyitems(items):
     for item in items:
diff --git a/requirements-base.txt b/requirements-base.txt
index 0b37ccadef..f462092c59 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -79,3 +79,7 @@ ua-parser>=0.6.1,<0.8.0
 unidiff>=0.5.4
 urllib3==1.24.2
 uwsgi>2.0.0,<2.1.0
+
+# sentry-plugins specific dependencies
+cached-property
+phabricator>=0.6.0,<1.0
diff --git a/setup.py b/setup.py
index 8dcf866eb9..8863752344 100755
--- a/setup.py
+++ b/setup.py
@@ -138,7 +138,35 @@ setup(
     cmdclass=cmdclass,
     license="BSD",
     include_package_data=True,
-    entry_points={"console_scripts": ["sentry = sentry.runner:main"]},
+    entry_points={
+        "console_scripts": ["sentry = sentry.runner:main"],
+        "sentry.new_apps": [
+            "jira_ac = new_sentry_plugins.jira_ac",
+            "jira = new_sentry_plugins.jira",
+            "sessionstack = new_sentry_plugins.sessionstack",
+        ],
+        "sentry.new_plugins": [
+            "amazon_sqs = new_sentry_plugins.amazon_sqs.plugin:AmazonSQSPlugin",
+            "asana = new_sentry_plugins.asana.plugin:AsanaPlugin",
+            "bitbucket = new_sentry_plugins.bitbucket.plugin:BitbucketPlugin",
+            "clubhouse = new_sentry_plugins.clubhouse.plugin:ClubhousePlugin",
+            "github = new_sentry_plugins.github.plugin:GitHubPlugin",
+            "gitlab = new_sentry_plugins.gitlab.plugin:GitLabPlugin",
+            "heroku = new_sentry_plugins.heroku.plugin:HerokuPlugin",
+            "jira = new_sentry_plugins.jira.plugin:JiraPlugin",
+            "jira_ac = new_sentry_plugins.jira_ac.plugin:JiraACPlugin",
+            "pagerduty = new_sentry_plugins.pagerduty.plugin:PagerDutyPlugin",
+            "phabricator = new_sentry_plugins.phabricator.plugin:PhabricatorPlugin",
+            "pivotal = new_sentry_plugins.pivotal.plugin:PivotalPlugin",
+            "pushover = new_sentry_plugins.pushover.plugin:PushoverPlugin",
+            "segment = new_sentry_plugins.segment.plugin:SegmentPlugin",
+            "sessionstack = new_sentry_plugins.sessionstack.plugin:SessionStackPlugin",
+            "slack = new_sentry_plugins.slack.plugin:SlackPlugin",
+            "splunk = new_sentry_plugins.splunk.plugin:SplunkPlugin",
+            "victorops = new_sentry_plugins.victorops.plugin:VictorOpsPlugin",
+            "vsts = new_sentry_plugins.vsts.plugin:VstsPlugin",
+        ],
+    },
     classifiers=[
         "Framework :: Django",
         "Intended Audience :: Developers",
diff --git a/src/new_sentry_plugins/__init__.py b/src/new_sentry_plugins/__init__.py
new file mode 100644
index 0000000000..436cc44f0e
--- /dev/null
+++ b/src/new_sentry_plugins/__init__.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+
+try:
+    VERSION = __import__("pkg_resources").get_distribution("sentry-plugins").version
+except Exception:
+    VERSION = "unknown"
+
+# Try to hook our webhook watcher into the rest of the watchers
+# iff this module is installed in editable mode.
+if "site-packages" not in __file__:
+    import os
+
+    root = os.path.normpath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))
+    node_modules = os.path.join(root, "node_modules")
+
+    if os.path.isdir(node_modules):
+        from django.conf import settings
+
+        settings.SENTRY_WATCHERS += (
+            (
+                "webpack.plugins",
+                [
+                    os.path.join(node_modules, ".bin", "webpack"),
+                    "--output-pathinfo",
+                    "--watch",
+                    "--config={}".format(os.path.join(root, "webpack.config.js")),
+                ],
+            ),
+        )
diff --git a/src/new_sentry_plugins/amazon_sqs/__init__.py b/src/new_sentry_plugins/amazon_sqs/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/amazon_sqs/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/amazon_sqs/plugin.py b/src/new_sentry_plugins/amazon_sqs/plugin.py
new file mode 100644
index 0000000000..53f1c1dd51
--- /dev/null
+++ b/src/new_sentry_plugins/amazon_sqs/plugin.py
@@ -0,0 +1,138 @@
+from __future__ import absolute_import
+
+import logging
+
+import boto3
+from botocore.client import ClientError
+from new_sentry_plugins.base import CorePluginMixin
+from sentry.plugins.bases.data_forwarding import DataForwardingPlugin
+from new_sentry_plugins.utils import get_secret_field_config
+from sentry.utils import json, metrics
+
+logger = logging.getLogger(__name__)
+
+
+def get_regions():
+    return boto3.session.Session().get_available_regions("sqs")
+
+
+class AmazonSQSPlugin(CorePluginMixin, DataForwardingPlugin):
+    title = "Amazon SQS"
+    slug = "amazon-sqs"
+    description = "Forward Sentry events to Amazon SQS."
+    conf_key = "amazon-sqs"
+
+    def get_config(self, project, **kwargs):
+        return [
+            {
+                "name": "queue_url",
+                "label": "Queue URL",
+                "type": "url",
+                "placeholder": "https://sqs-us-east-1.amazonaws.com/12345678/myqueue",
+            },
+            {
+                "name": "region",
+                "label": "Region",
+                "type": "select",
+                "choices": tuple((z, z) for z in get_regions()),
+            },
+            get_secret_field_config(
+                name="access_key", label="Access Key", secret=self.get_option("access_key", project)
+            ),
+            get_secret_field_config(
+                name="secret_key", label="Secret Key", secret=self.get_option("secret_key", project)
+            ),
+            {
+                "name": "message_group_id",
+                "label": "Message Group ID",
+                "type": "text",
+                "required": False,
+                "placeholder": "Required for FIFO queues, exclude for standard queues",
+            },
+        ]
+
+    def forward_event(self, event, payload):
+        queue_url = self.get_option("queue_url", event.project)
+        access_key = self.get_option("access_key", event.project)
+        secret_key = self.get_option("secret_key", event.project)
+        region = self.get_option("region", event.project)
+        message_group_id = self.get_option("message_group_id", event.project)
+
+        if not all((queue_url, access_key, secret_key, region)):
+            return
+
+        # TODO(dcramer): Amazon doesnt support payloads larger than 256kb
+        # We could support this by simply trimming it and allowing upload
+        # to S3
+        message = json.dumps(payload)
+        if len(message) > 256 * 1024:
+            return False
+
+        try:
+            client = boto3.client(
+                service_name="sqs",
+                aws_access_key_id=access_key,
+                aws_secret_access_key=secret_key,
+                region_name=region,
+            )
+
+            message = {"QueueUrl": queue_url, "MessageBody": message}
+
+            # need a MessageGroupId for FIFO queues
+            # note that if MessageGroupId is specified for non-FIFO, this will fail
+            if message_group_id:
+                from uuid import uuid4
+
+                message["MessageGroupId"] = message_group_id
+                # if content based de-duplication is not enabled, we need to provide a
+                # MessageDeduplicationId
+                message["MessageDeduplicationId"] = uuid4().hex
+
+            client.send_message(**message)
+        except ClientError as e:
+            if e.message.startswith("An error occurred (AccessDenied)"):
+                # If there's an issue with the user's token then we can't do
+                # anything to recover. Just log and continue.
+                metrics_name = "new_sentry_plugins.amazon_sqs.access_token_invalid"
+                logger.info(
+                    metrics_name,
+                    extra={
+                        "queue_url": queue_url,
+                        "access_key": access_key,
+                        "region": region,
+                        "project_id": event.project.id,
+                        "organization_id": event.project.organization_id,
+                    },
+                )
+                metrics.incr(
+                    metrics_name,
+                    tags={
+                        "project_id": event.project_id,
+                        "organization_id": event.project.organization_id,
+                    },
+                )
+                return False
+            elif e.message.endswith("must contain the parameter MessageGroupId."):
+                metrics_name = "new_sentry_plugins.amazon_sqs.missing_message_group_id"
+                logger.info(
+                    metrics_name,
+                    extra={
+                        "queue_url": queue_url,
+                        "access_key": access_key,
+                        "region": region,
+                        "project_id": event.project.id,
+                        "organization_id": event.project.organization_id,
+                        "message_group_id": message_group_id,
+                    },
+                )
+                metrics.incr(
+                    metrics_name,
+                    tags={
+                        "project_id": event.project_id,
+                        "organization_id": event.project.organization_id,
+                    },
+                )
+                return False
+            raise
+
+        return True
diff --git a/src/new_sentry_plugins/anonymizeip.py b/src/new_sentry_plugins/anonymizeip.py
new file mode 100644
index 0000000000..77b3a79e3a
--- /dev/null
+++ b/src/new_sentry_plugins/anonymizeip.py
@@ -0,0 +1,126 @@
+# Port of https://github.com/samuelmeuli/anonymize-ip to Python 2
+"""
+MIT License
+
+Copyright (c) 2018 Samuel Meuli
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+"""
+from __future__ import absolute_import, unicode_literals
+
+import six
+
+from ipaddress import ip_address
+
+
+def anonymize_ip(
+    address, ipv4_mask="255.255.255.0", ipv6_mask="ffff:ffff:ffff:0000:0000:0000:0000:0000"
+):
+    """
+    Anonymize the provided IPv4 or IPv6 address by setting parts of the
+    address to 0
+    :param str|int address: IP address to be anonymized
+    :param str ipv4_mask: Mask that defines which parts of an IPv4 address are
+    set to 0 (default: "255.255.255.0")
+    :param str ipv6_mask: Mask that defines which parts of an IPv6 address are
+    set to 0 (default: "ffff:ffff:ffff:0000:0000:0000:0000:0000")
+    :return: Anonymized IP address
+    :rtype: str
+    """
+
+    # IP address to be anonymized
+    address_packed = ip_address(six.text_type(address)).packed
+    address_len = len(address_packed)
+
+    if address_len == 4:
+        # IPv4
+        ipv4_mask_packed = ip_address(ipv4_mask).packed
+        __validate_ipv4_mask(ipv4_mask_packed)
+        return __apply_mask(address_packed, ipv4_mask_packed, 4)
+    elif address_len == 16:
+        # IPv6
+        ipv6_mask_packed = ip_address(ipv6_mask).packed
+        __validate_ipv6_mask(ipv6_mask_packed)
+        return __apply_mask(address_packed, ipv6_mask_packed, 16)
+    else:
+        # Invalid address
+        raise ValueError("Address does not consist of 4 (IPv4) or 16 (IPv6) " "octets")
+
+
+def __apply_mask(address_packed, mask_packed, nr_bytes):
+    """
+    Perform a bitwise AND operation on all corresponding bytes between the
+    mask and the provided address. Mask parts set to 0 will become 0 in the
+    anonymized IP address as well
+    :param bytes address_packed: Binary representation of the IP address to
+    be anonymized
+    :param bytes mask_packed: Binary representation of the corresponding IP
+    address mask
+    :param int nr_bytes: Number of bytes in the address (4 for IPv4, 16 for
+    IPv6)
+    :return: Anonymized IP address
+    :rtype: str
+    """
+
+    anon_packed = bytearray()
+    for i in range(0, nr_bytes):
+        anon_packed.append(ord(mask_packed[i]) & ord(address_packed[i]))
+    return six.text_type(ip_address(six.binary_type(anon_packed)))
+
+
+def __validate_ipv4_mask(mask_packed):
+    # Test that mask only contains valid numbers
+    for byte in mask_packed:
+        if byte != b"\x00" and byte != b"\xff":
+            raise ValueError("ipv4_mask must only contain numbers 0 or 255")
+
+    # Test that IP address does not get anonymized completely
+    if mask_packed == b"\x00\x00\x00\x00":
+        raise ValueError(
+            'ipv4_mask cannot be set to "0.0.0.0" (all ' "anonymized addresses will be 0.0.0.0)"
+        )
+
+    # Test that IP address is changed by anonymization
+    if mask_packed == b"\xff\xff\xff\xff":
+        raise ValueError(
+            'ipv4_mask cannot be set to "255.255.255.255" ' "(addresses will not be anonymized)"
+        )
+
+
+def __validate_ipv6_mask(mask_packed):
+    # Test that mask only contains valid numbers
+    for byte in mask_packed:
+        if byte != b"\x00" and byte != b"\xff":
+            raise ValueError("ipv6_mask must only contain numbers 0 or ffff")
+
+    # Test that IP address does not get anonymized completely
+    if mask_packed == b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00":
+        raise ValueError(
+            "ipv6_mask cannot be set to "
+            '"0000:0000:0000:0000:0000:0000:0000:0000" (all '
+            "anonymized addresses will be 0.0.0.0)"
+        )
+
+    # Test that IP address is changed by anonymization
+    if mask_packed == b"\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff":
+        raise ValueError(
+            "ipv6_mask cannot be set to "
+            '"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff" '
+            "(addresses will not be anonymized)"
+        )
diff --git a/src/new_sentry_plugins/asana/README.rst b/src/new_sentry_plugins/asana/README.rst
new file mode 100644
index 0000000000..d8b17cc64b
--- /dev/null
+++ b/src/new_sentry_plugins/asana/README.rst
@@ -0,0 +1,8 @@
+You'll have to create an application in Asana to get a client ID and secret. Use the following for the redirect URL::
+
+    <URL_TO_SENTRY>/account/settings/social/associate/complete/asana/
+
+Ensure you've configured Asana auth in Sentry::
+
+    ASANA_CLIENT_ID = 'Asana Client ID'
+    ASANA_CLIENT_SECRET = 'Asana Client Secret'
diff --git a/src/new_sentry_plugins/asana/__init__.py b/src/new_sentry_plugins/asana/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/asana/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/asana/client.py b/src/new_sentry_plugins/asana/client.py
new file mode 100644
index 0000000000..e13a23b5fc
--- /dev/null
+++ b/src/new_sentry_plugins/asana/client.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.client import AuthApiClient
+from six import text_type
+
+
+class AsanaClient(AuthApiClient):
+    base_url = u"https://app.asana.com/api/1.0"
+    plugin_name = "asana"
+
+    def get_workspaces(self):
+        return self.get("/workspaces")
+
+    def get_issue(self, issue_id):
+        return self.get("/tasks/%s" % issue_id)
+
+    def create_issue(self, workspace, data):
+        asana_data = {"name": data["title"], "notes": data["description"], "workspace": text_type(workspace)}
+        if data.get("project"):
+            asana_data["projects"] = [text_type(data["project"])]
+
+        if data.get("assignee"):
+            asana_data["assignee"] = text_type(data["assignee"])
+
+        return self.post("/tasks", data={"data": asana_data})
+
+    def create_comment(self, issue_id, data):
+        return self.post("/tasks/%s/stories/" % issue_id, data={"data": data})
+
+    def search(self, workspace, object_type, query):
+        return self.get(
+            "/workspaces/%s/typeahead" % workspace, params={"type": object_type, "query": query}
+        )
diff --git a/src/new_sentry_plugins/asana/plugin.py b/src/new_sentry_plugins/asana/plugin.py
new file mode 100644
index 0000000000..472a4bfbd8
--- /dev/null
+++ b/src/new_sentry_plugins/asana/plugin.py
@@ -0,0 +1,233 @@
+from __future__ import absolute_import
+
+import six
+
+from rest_framework.response import Response
+
+from sentry.exceptions import PluginError, PluginIdentityRequired
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from .client import AsanaClient
+
+
+ERR_AUTH_NOT_CONFIGURED = "You still need to associate an Asana identity with this account."
+
+
+class AsanaPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Integrate Asana issues by linking a repository to a project."
+    slug = "asana"
+    title = "Asana"
+    conf_title = title
+    conf_key = "asana"
+    auth_provider = "asana"
+
+    def get_group_urls(self):
+        return super(AsanaPlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def is_configured(self, request, project, **kwargs):
+        return bool(self.get_option("workspace", project))
+
+    def has_workspace_access(self, workspace, choices):
+        for c, _ in choices:
+            if workspace == c:
+                return True
+        return False
+
+    def get_workspace_choices(self, workspaces):
+        return [(w["gid"], w["name"]) for w in workspaces["data"]]
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(AsanaPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        client = self.get_client(request.user)
+        workspaces = client.get_workspaces()
+        workspace_choices = self.get_workspace_choices(workspaces)
+        workspace = self.get_option("workspace", group.project)
+        if workspace and not self.has_workspace_access(workspace, workspace_choices):
+            workspace_choices.append((workspace, workspace))
+
+        # use labels that are more applicable to asana
+        for field in fields:
+            if field["name"] == "title":
+                field["label"] = "Name"
+            if field["name"] == "description":
+                field["label"] = "Notes"
+                field["required"] = False
+
+        return (
+            [
+                {
+                    "name": "workspace",
+                    "label": "Asana Workspace",
+                    "default": workspace,
+                    "type": "select",
+                    "choices": workspace_choices,
+                    "readonly": True,
+                }
+            ]
+            + fields
+            + [
+                {
+                    "name": "project",
+                    "label": "Project",
+                    "type": "select",
+                    "has_autocomplete": True,
+                    "required": False,
+                    "placeholder": "Start typing to search for a project",
+                },
+                {
+                    "name": "assignee",
+                    "label": "Assignee",
+                    "type": "select",
+                    "has_autocomplete": True,
+                    "required": False,
+                    "placeholder": "Start typing to search for a user",
+                },
+            ]
+        )
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Task",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(
+                    group.get_absolute_url(params={"referrer": "asana_plugin"})
+                ),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the Asana issue."),
+                "required": False,
+            },
+        ]
+
+    def get_client(self, user):
+        auth = self.get_auth_for_user(user=user)
+        if auth is None:
+            raise PluginIdentityRequired(ERR_AUTH_NOT_CONFIGURED)
+        return AsanaClient(auth=auth)
+
+    def error_message_from_json(self, data):
+        errors = data.get("errors")
+        if errors:
+            return " ".join([e["message"] for e in errors])
+        return "unknown error"
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+
+        try:
+            response = client.create_issue(
+                workspace=self.get_option("workspace", group.project), data=form_data
+            )
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        return response["data"]["gid"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+        try:
+            issue = client.get_issue(issue_id=form_data["issue_id"])["data"]
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_comment(issue["gid"], {"text": comment})
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+
+        return {"title": issue["name"]}
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "Asana Issue"
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        return "https://app.asana.com/0/0/%s" % issue_id
+
+    def validate_config(self, project, config, actor):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        try:
+            int(config["workspace"])
+        except ValueError as exc:
+            self.logger.exception(six.text_type(exc))
+            raise PluginError("Non-numeric workspace value")
+        return config
+
+    def get_config(self, *args, **kwargs):
+        user = kwargs["user"]
+        try:
+            client = self.get_client(user)
+        except PluginIdentityRequired as e:
+            self.raise_error(e)
+        workspaces = client.get_workspaces()
+        workspace_choices = self.get_workspace_choices(workspaces)
+        workspace = self.get_option("workspace", kwargs["project"])
+        # check to make sure the current user has access to the workspace
+        helptext = None
+        if workspace and not self.has_workspace_access(workspace, workspace_choices):
+            workspace_choices.append((workspace, workspace))
+            helptext = (
+                "This plugin has been configured for an Asana workspace "
+                "that either you don't have access to or doesn't "
+                "exist. You can edit the configuration, but you will not "
+                "be able to change it back to the current configuration "
+                "unless a teammate grants you access to the workspace in Asana."
+            )
+        return [
+            {
+                "name": "workspace",
+                "label": "Workspace",
+                "type": "select",
+                "choices": workspace_choices,
+                "default": workspace or workspaces["data"][0]["gid"],
+                "help": helptext,
+            }
+        ]
+
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+
+        client = self.get_client(request.user)
+        workspace = self.get_option("workspace", group.project)
+        results = []
+        field_name = field
+        if field == "issue_id":
+            field_name = "task"
+        elif field == "assignee":
+            field_name = "user"
+        try:
+            response = client.search(workspace, field_name, query.encode("utf-8"))
+        except Exception as e:
+            return Response(
+                {"error_type": "validation", "errors": [{"__all__": self.message_from_error(e)}]},
+                status=400,
+            )
+        else:
+            results = [
+                {"text": "(#%s) %s" % (i["gid"], i["name"]), "id": i["gid"]}
+                for i in response.get("data", [])
+            ]
+
+        return Response({field: results})
diff --git a/src/new_sentry_plugins/assets.json b/src/new_sentry_plugins/assets.json
new file mode 100644
index 0000000000..c837fa1cff
--- /dev/null
+++ b/src/new_sentry_plugins/assets.json
@@ -0,0 +1 @@
+{"version": "10.0.0.dev0", "build": "f9267a11769be041ba5464548e1a8c16fc4f584f", "createdAt": "2019-10-25T00:08:56.751575Z"}
\ No newline at end of file
diff --git a/src/new_sentry_plugins/base.py b/src/new_sentry_plugins/base.py
new file mode 100644
index 0000000000..d0aca3544d
--- /dev/null
+++ b/src/new_sentry_plugins/base.py
@@ -0,0 +1,77 @@
+from __future__ import absolute_import
+
+import pkg_resources
+import new_sentry_plugins
+import six
+import sys
+
+from sentry.exceptions import InvalidIdentity, PluginError
+
+from new_sentry_plugins.constants import ERR_INTERNAL, ERR_UNAUTHORIZED, ERR_UNSUPPORTED_RESPONSE_TYPE
+from new_sentry_plugins.exceptions import (
+    ApiError,
+    ApiHostError,
+    ApiUnauthorized,
+    UnsupportedResponseType,
+)
+
+
+class CorePluginMixin(object):
+    author = "Sentry Team"
+    author_url = "https://github.com/getsentry/sentry-plugins"
+    version = new_sentry_plugins.VERSION
+    resource_links = [
+        ("Bug Tracker", "https://github.com/getsentry/sentry-plugins/issues"),
+        ("Source", "https://github.com/getsentry/sentry-plugins"),
+    ]
+
+    # HACK(dcramer): work around MRO issue with plugin metaclass
+    logger = None
+
+    # TODO(dcramer): The following is a possible "better implementation" of the
+    # core issue implementation, though it would need a compat layer to push
+    # it upstream
+    def error_message_from_json(self, data):
+        return data.get("message", "unknown error")
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiUnauthorized):
+            return ERR_UNAUTHORIZED
+        elif isinstance(exc, ApiHostError):
+            return exc.text
+        elif isinstance(exc, UnsupportedResponseType):
+            return ERR_UNSUPPORTED_RESPONSE_TYPE.format(content_type=exc.content_type)
+        elif isinstance(exc, ApiError):
+            if exc.json:
+                msg = self.error_message_from_json(exc.json) or "unknown error"
+            else:
+                msg = "unknown error"
+            return "Error Communicating with %s (HTTP %s): %s" % (self.title, exc.code, msg)
+        else:
+            return ERR_INTERNAL
+
+    def raise_error(self, exc, identity=None):
+        if isinstance(exc, ApiUnauthorized):
+            six.reraise(
+                InvalidIdentity,
+                InvalidIdentity(self.message_from_error(exc), identity=identity),
+                sys.exc_info()[2],
+            )
+        elif isinstance(exc, ApiError):
+            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
+        elif isinstance(exc, PluginError):
+            raise
+        else:
+            self.logger.exception(six.text_type(exc))
+            six.reraise(PluginError, PluginError(self.message_from_error(exc)), sys.exc_info()[2])
+
+
+def assert_package_not_installed(name):
+    try:
+        pkg_resources.get_distribution(name)
+    except pkg_resources.DistributionNotFound:
+        return
+    else:
+        raise RuntimeError(
+            "Found %r. This has been superseded by 'sentry-plugins', so please uninstall." % name
+        )
diff --git a/src/new_sentry_plugins/bitbucket/README.rst b/src/new_sentry_plugins/bitbucket/README.rst
new file mode 100644
index 0000000000..de50bb3dc1
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/README.rst
@@ -0,0 +1,14 @@
+**Note**: This plugin has been deprecated in favor of the `Bitbucket Global Integration <https://docs.sentry.io/workflow/integrations/global-integrations/#bitbucket>`_.
+
+Go to https://bitbucket.org/account/user/**YOUR_USERNAME**/api
+
+Create OAuth consumer key and secret and then put
+
+::
+
+    BITBUCKET_CONSUMER_KEY = '<Key>'
+    BITBUCKET_CONSUMER_SECRET = '<Secret>'
+
+
+into ``sentry.conf.py``
+
diff --git a/src/new_sentry_plugins/bitbucket/__init__.py b/src/new_sentry_plugins/bitbucket/__init__.py
new file mode 100644
index 0000000000..12350e2bd6
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-bitbucket")
diff --git a/src/new_sentry_plugins/bitbucket/client.py b/src/new_sentry_plugins/bitbucket/client.py
new file mode 100644
index 0000000000..4befa9e3dd
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/client.py
@@ -0,0 +1,121 @@
+from __future__ import absolute_import
+
+import six
+
+from django.conf import settings
+from requests_oauthlib import OAuth1
+from unidiff import PatchSet
+
+from new_sentry_plugins.client import AuthApiClient
+
+
+class BitbucketClient(AuthApiClient):
+    base_url = "https://api.bitbucket.org"
+    plugin_name = "bitbucket"
+
+    def has_auth(self):
+        return (
+            self.auth
+            and "oauth_token" in self.auth.tokens
+            and "oauth_token_secret" in self.auth.tokens
+        )
+
+    def bind_auth(self, **kwargs):
+        kwargs["auth"] = OAuth1(
+            six.text_type(settings.BITBUCKET_CONSUMER_KEY),
+            six.text_type(settings.BITBUCKET_CONSUMER_SECRET),
+            self.auth.tokens["oauth_token"],
+            self.auth.tokens["oauth_token_secret"],
+            signature_type="auth_header",
+        )
+        return kwargs
+
+    def get_issue(self, repo, issue_id):
+        return self.get("/1.0/repositories/%s/issues/%s" % (repo, issue_id))
+
+    def create_issue(self, repo, data):
+        data = {
+            "title": data["title"],
+            "content": data["description"],
+            "kind": data["issue_type"],
+            "priority": data["priority"],
+        }
+        return self.post("/1.0/repositories/{}/issues".format(repo), data=data, json=False)
+
+    def search_issues(self, repo, query):
+        return self.get("/1.0/repositories/{}/issues".format(repo), params={"search": query})
+
+    def create_comment(self, repo, issue_id, data):
+        return self.post(
+            "/1.0/repositories/%s/issues/%s/comments" % (repo, issue_id), data=data, json=False
+        )
+
+    def get_repo(self, repo):
+        return self.get("/2.0/repositories/{}".format(repo))
+
+    def create_hook(self, repo, data):
+        return self.post("/2.0/repositories/{}/hooks".format(repo), data=data)
+
+    def delete_hook(self, repo, id):
+        return self.delete("/2.0/repositories/{}/hooks/{}".format(repo, id))
+
+    def transform_patchset(self, patch_set):
+        file_changes = []
+        for patched_file in patch_set.added_files:
+            file_changes.append({"path": patched_file.path, "type": "A"})
+
+        for patched_file in patch_set.removed_files:
+            file_changes.append({"path": patched_file.path, "type": "D"})
+
+        for patched_file in patch_set.modified_files:
+            file_changes.append({"path": patched_file.path, "type": "M"})
+
+        return file_changes
+
+    def get_commit_filechanges(self, repo, sha):
+        # returns unidiff file
+
+        resp = self.get("/2.0/repositories/{}/diff/{}".format(repo, sha), allow_text=True)
+
+        diff_file = resp.text
+        ps = PatchSet.from_string(diff_file)
+        return self.transform_patchset(ps)
+
+    def zip_commit_data(self, repo, commit_list):
+        for commit in commit_list:
+            commit.update({"patch_set": self.get_commit_filechanges(repo, commit["hash"])})
+        return commit_list
+
+    def get_last_commits(self, repo, end_sha):
+        # return api request that fetches last ~30 commits
+        # see https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D
+        # using end_sha as parameter
+        data = self.get("/2.0/repositories/{}/commits/{}".format(repo, end_sha))
+
+        return self.zip_commit_data(repo, data["values"])
+
+    def compare_commits(self, repo, start_sha, end_sha):
+        # where start_sha is oldest and end_sha is most recent
+        # see
+        # https://developer.atlassian.com/bitbucket/api/2/reference/resource/repositories/%7Busername%7D/%7Brepo_slug%7D/commits/%7Brevision%7D
+        commits = []
+        done = False
+
+        url = "/2.0/repositories/{}/commits/{}".format(repo, end_sha)
+
+        while not done and len(commits) < 90:
+            data = self.get(url)
+
+            for commit in data["values"]:
+                if commit["hash"].startswith(start_sha):
+                    done = True
+                    break
+                commits.append(commit)
+
+            # move page forward
+            try:
+                url = data["next"]
+            except KeyError:
+                break
+
+        return self.zip_commit_data(repo, commits)
diff --git a/src/new_sentry_plugins/bitbucket/endpoints/__init__.py b/src/new_sentry_plugins/bitbucket/endpoints/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/endpoints/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/bitbucket/endpoints/webhook.py b/src/new_sentry_plugins/bitbucket/endpoints/webhook.py
new file mode 100644
index 0000000000..3ec29a7044
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/endpoints/webhook.py
@@ -0,0 +1,175 @@
+from __future__ import absolute_import
+
+import dateutil.parser
+import logging
+import six
+import re
+
+import ipaddress
+
+from django.db import IntegrityError, transaction
+from django.http import HttpResponse, Http404
+from django.utils.decorators import method_decorator
+from django.views.decorators.csrf import csrf_exempt
+from django.views.generic import View
+from django.utils import timezone
+from simplejson import JSONDecodeError
+from sentry.models import Commit, CommitAuthor, Organization, Repository
+from sentry.plugins.providers import RepositoryProvider
+from sentry.utils import json
+
+logger = logging.getLogger("sentry.webhooks")
+
+# Bitbucket Cloud IP range:
+# https://confluence.atlassian.com/bitbucket/manage-webhooks-735643732.html#Managewebhooks-trigger_webhookTriggeringwebhooks
+# Bitbucket Cloud IP range:
+# https://confluence.atlassian.com/bitbucket/manage-webhooks-735643732.html#Managewebhooks-trigger_webhookTriggeringwebhooks
+BITBUCKET_IP_RANGES = (
+    ipaddress.ip_network(u"104.192.136.0/21"),
+    # Not documented in the webhook docs, but defined here:
+    # https://bitbucket.org/blog/new-ip-addresses-bitbucket-cloud
+    ipaddress.ip_network(u"18.205.93.0/25"),
+    ipaddress.ip_network(u"18.234.32.128/25"),
+    ipaddress.ip_network(u"13.52.5.0/25"),
+)
+BITBUCKET_IPS = [u"34.198.203.127", u"34.198.178.64", u"34.198.32.85"]
+
+
+class Webhook(object):
+    def __call__(self, organization, event):
+        raise NotImplementedError
+
+
+def parse_raw_user_email(raw):
+    # captures content between angle brackets
+    match = re.search("(?<=<).*(?=>$)", raw)
+    if match is None:
+        return
+    return match.group(0)
+
+
+def parse_raw_user_name(raw):
+    # captures content before angle bracket
+    return raw.split("<")[0].strip()
+
+
+class PushEventWebhook(Webhook):
+    # https://confluence.atlassian.com/bitbucket/event-payloads-740262817.html#EventPayloads-Push
+    def __call__(self, organization, event):
+        authors = {}
+
+        try:
+            repo = Repository.objects.get(
+                organization_id=organization.id,
+                provider="bitbucket",
+                external_id=six.text_type(event["repository"]["uuid"]),
+            )
+        except Repository.DoesNotExist:
+            raise Http404()
+
+        if repo.config.get("name") != event["repository"]["full_name"]:
+            repo.config["name"] = event["repository"]["full_name"]
+            repo.save()
+
+        for change in event["push"]["changes"]:
+            for commit in change.get("commits", []):
+                if RepositoryProvider.should_ignore_commit(commit["message"]):
+                    continue
+
+                author_email = parse_raw_user_email(commit["author"]["raw"])
+
+                # TODO(dcramer): we need to deal with bad values here, but since
+                # its optional, lets just throw it out for now
+                if author_email is None or len(author_email) > 75:
+                    author = None
+                elif author_email not in authors:
+                    authors[author_email] = author = CommitAuthor.objects.get_or_create(
+                        organization_id=organization.id,
+                        email=author_email,
+                        defaults={"name": commit["author"]["raw"].split("<")[0].strip()},
+                    )[0]
+                else:
+                    author = authors[author_email]
+                try:
+                    with transaction.atomic():
+
+                        Commit.objects.create(
+                            repository_id=repo.id,
+                            organization_id=organization.id,
+                            key=commit["hash"],
+                            message=commit["message"],
+                            author=author,
+                            date_added=dateutil.parser.parse(commit["date"]).astimezone(
+                                timezone.utc
+                            ),
+                        )
+
+                except IntegrityError:
+                    pass
+
+
+class BitbucketWebhookEndpoint(View):
+    _handlers = {"repo:push": PushEventWebhook}
+
+    def get_handler(self, event_type):
+        return self._handlers.get(event_type)
+
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, *args, **kwargs):
+        if request.method != "POST":
+            return HttpResponse(status=405)
+
+        return super(BitbucketWebhookEndpoint, self).dispatch(request, *args, **kwargs)
+
+    def post(self, request, organization_id):
+        try:
+            organization = Organization.objects.get_from_cache(id=organization_id)
+        except Organization.DoesNotExist:
+            logger.error(
+                "bitbucket.webhook.invalid-organization", extra={"organization_id": organization_id}
+            )
+            return HttpResponse(status=400)
+
+        body = six.binary_type(request.body)
+        if not body:
+            logger.error(
+                "bitbucket.webhook.missing-body", extra={"organization_id": organization.id}
+            )
+            return HttpResponse(status=400)
+
+        try:
+            handler = self.get_handler(request.META["HTTP_X_EVENT_KEY"])
+        except KeyError:
+            logger.error(
+                "bitbucket.webhook.missing-event", extra={"organization_id": organization.id}
+            )
+            return HttpResponse(status=400)
+
+        if not handler:
+            return HttpResponse(status=204)
+
+        address_string = six.text_type(request.META["REMOTE_ADDR"])
+        ip = ipaddress.ip_address(address_string)
+        valid_ip = False
+        for ip_range in BITBUCKET_IP_RANGES:
+            if ip in ip_range:
+                valid_ip = True
+                break
+        if not valid_ip and address_string not in BITBUCKET_IPS:
+            logger.error(
+                "bitbucket.webhook.invalid-ip-range", extra={"organization_id": organization.id}
+            )
+            return HttpResponse(status=401)
+
+        try:
+            event = json.loads(body.decode("utf-8"))
+        except JSONDecodeError:
+            logger.error(
+                "bitbucket.webhook.invalid-json",
+                extra={"organization_id": organization.id},
+                exc_info=True,
+            )
+            return HttpResponse(status=400)
+
+        handler()(organization, event)
+        return HttpResponse(status=204)
diff --git a/src/new_sentry_plugins/bitbucket/mixins.py b/src/new_sentry_plugins/bitbucket/mixins.py
new file mode 100644
index 0000000000..3a194be704
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/mixins.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+import logging
+
+from sentry.exceptions import PluginError
+
+from new_sentry_plugins.base import CorePluginMixin
+
+from .client import BitbucketClient
+
+
+class BitbucketMixin(CorePluginMixin):
+    logger = logging.getLogger("sentry.plugins.bitbucket")
+
+    title = "Bitbucket"
+
+    def get_client(self, user):
+        auth = self.get_auth(user=user)
+        if auth is None:
+            raise PluginError("You still need to associate an identity with Bitbucket.")
+        return BitbucketClient(auth)
diff --git a/src/new_sentry_plugins/bitbucket/plugin.py b/src/new_sentry_plugins/bitbucket/plugin.py
new file mode 100644
index 0000000000..d7c75319a3
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/plugin.py
@@ -0,0 +1,189 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.exceptions import ApiError
+
+from .mixins import BitbucketMixin
+from .repository_provider import BitbucketRepositoryProvider
+
+
+ISSUE_TYPES = (
+    ("bug", "Bug"),
+    ("enhancement", "Enhancement"),
+    ("proposal", "Proposal"),
+    ("task", "Task"),
+)
+
+PRIORITIES = (
+    ("trivial", "Trivial"),
+    ("minor", "Minor"),
+    ("major", "Major"),
+    ("critical", "Critical"),
+    ("blocker", "Blocker"),
+)
+
+ERR_404 = (
+    "Bitbucket returned a 404. Please make sure that "
+    "the repo exists, you have access to it, and it has "
+    "issue tracking enabled."
+)
+
+
+class BitbucketPlugin(BitbucketMixin, IssuePlugin2):
+    description = "Integrate Bitbucket issues by linking a repository to a project."
+    slug = "bitbucket"
+    conf_title = BitbucketMixin.title
+    conf_key = "bitbucket"
+    auth_provider = "bitbucket"
+
+    def get_group_urls(self):
+        return super(BitbucketPlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def get_url_module(self):
+        return "new_sentry_plugins.bitbucket.urls"
+
+    def is_configured(self, request, project, **kwargs):
+        return bool(self.get_option("repo", project))
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(BitbucketPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        return (
+            [
+                {
+                    "name": "repo",
+                    "label": "Bitbucket Repository",
+                    "default": self.get_option("repo", group.project),
+                    "type": "text",
+                    "readonly": True,
+                }
+            ]
+            + fields
+            + [
+                {
+                    "name": "issue_type",
+                    "label": "Issue type",
+                    "default": ISSUE_TYPES[0][0],
+                    "type": "select",
+                    "choices": ISSUE_TYPES,
+                },
+                {
+                    "name": "priority",
+                    "label": "Priority",
+                    "default": PRIORITIES[0][0],
+                    "type": "select",
+                    "choices": PRIORITIES,
+                },
+            ]
+        )
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Issue",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(
+                    group.get_absolute_url(params={"referrer": "bitbucket_plugin"})
+                ),
+                "type": "textarea",
+                "help": (
+                    "Leave blank if you don't want to " "add a comment to the Bitbucket issue."
+                ),
+                "required": False,
+            },
+        ]
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiError) and exc.code == 404:
+            return ERR_404
+        return super(BitbucketPlugin, self).message_from_error(exc)
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+
+        try:
+            response = client.create_issue(
+                repo=self.get_option("repo", group.project), data=form_data
+            )
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        return response["local_id"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+        repo = self.get_option("repo", group.project)
+        try:
+            issue = client.get_issue(repo=repo, issue_id=form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_comment(repo, issue["local_id"], {"content": comment})
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+
+        return {"title": issue["title"]}
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "Bitbucket-%s" % issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        repo = self.get_option("repo", group.project)
+        return "https://bitbucket.org/%s/issue/%s/" % (repo, issue_id)
+
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+        if field != "issue_id" or not query:
+            return Response({"issue_id": []})
+
+        repo = self.get_option("repo", group.project)
+        client = self.get_client(request.user)
+
+        try:
+            response = client.search_issues(repo, query.encode("utf-8"))
+        except Exception as e:
+            return Response(
+                {"error_type": "validation", "errors": [{"__all__": self.message_from_error(e)}]},
+                status=400,
+            )
+
+        issues = [
+            {"text": "(#%s) %s" % (i["local_id"], i["title"]), "id": i["local_id"]}
+            for i in response.get("issues", [])
+        ]
+
+        return Response({field: issues})
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        return [
+            {
+                "name": "repo",
+                "label": "Repository Name",
+                "type": "text",
+                "placeholder": "e.g. getsentry/sentry",
+                "help": "Enter your repository name, including the owner.",
+                "required": True,
+            }
+        ]
+
+    def setup(self, bindings):
+        bindings.add("repository.provider", BitbucketRepositoryProvider, id="bitbucket")
diff --git a/src/new_sentry_plugins/bitbucket/repository_provider.py b/src/new_sentry_plugins/bitbucket/repository_provider.py
new file mode 100644
index 0000000000..a6bbe3afa5
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/repository_provider.py
@@ -0,0 +1,137 @@
+from __future__ import absolute_import
+
+import six
+
+from uuid import uuid4
+
+from sentry.app import locks
+from sentry.models import OrganizationOption
+from sentry.plugins import providers
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.exceptions import ApiError
+
+from .endpoints.webhook import parse_raw_user_email, parse_raw_user_name
+from .mixins import BitbucketMixin
+
+
+class BitbucketRepositoryProvider(BitbucketMixin, providers.RepositoryProvider):
+    name = "Bitbucket"
+    auth_provider = "bitbucket"
+
+    def get_config(self):
+        return [
+            {
+                "name": "name",
+                "label": "Repository Name",
+                "type": "text",
+                "placeholder": "e.g. getsentry/sentry",
+                "help": "Enter your repository name, including the owner.",
+                "required": True,
+            }
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        if config.get("name"):
+            client = self.get_client(actor)
+            try:
+                repo = client.get_repo(config["name"])
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            else:
+                config["external_id"] = six.text_type(repo["uuid"])
+        return config
+
+    def get_webhook_secret(self, organization):
+        lock = locks.get("bitbucket:webhook-secret:{}".format(organization.id), duration=60)
+        with lock.acquire():
+            secret = OrganizationOption.objects.get_value(
+                organization=organization, key="bitbucket:webhook_secret"
+            )
+            if secret is None:
+                secret = uuid4().hex + uuid4().hex
+                OrganizationOption.objects.set_value(
+                    organization=organization, key="bitbucket:webhook_secret", value=secret
+                )
+        return secret
+
+    def create_repository(self, organization, data, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot create a repository anonymously")
+
+        client = self.get_client(actor)
+        try:
+            resp = client.create_hook(
+                data["name"],
+                {
+                    "description": "sentry-bitbucket-repo-hook",
+                    "url": absolute_uri(
+                        "/plugins/bitbucket/organizations/{}/webhook/".format(organization.id)
+                    ),
+                    "active": True,
+                    "events": ["repo:push"],
+                },
+            )
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+        else:
+            return {
+                "name": data["name"],
+                "external_id": data["external_id"],
+                "url": "https://bitbucket.org/{}".format(data["name"]),
+                "config": {"name": data["name"], "webhook_id": resp["uuid"]},
+            }
+
+    def delete_repository(self, repo, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot delete a repository anonymously")
+
+        client = self.get_client(actor)
+        try:
+            client.delete_hook(repo.config["name"], repo.config["webhook_id"])
+        except ApiError as exc:
+            if exc.code == 404:
+                return
+            raise
+
+    def _format_commits(self, repo, commit_list):
+        return [
+            {
+                "id": c["hash"],
+                "repository": repo.name,
+                "author_email": parse_raw_user_email(c["author"]["raw"]),
+                "author_name": parse_raw_user_name(c["author"]["raw"]),
+                "message": c["message"],
+                "patch_set": c.get("patch_set"),
+            }
+            for c in commit_list
+        ]
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot fetch commits anonymously")
+
+        client = self.get_client(actor)
+        # use config name because that is kept in sync via webhooks
+        name = repo.config["name"]
+        if start_sha is None:
+            try:
+                res = client.get_last_commits(name, end_sha)
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            else:
+                return self._format_commits(repo, res[:10])
+        else:
+            try:
+                res = client.compare_commits(name, start_sha, end_sha)
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            else:
+                return self._format_commits(repo, res)
diff --git a/src/new_sentry_plugins/bitbucket/testutils.py b/src/new_sentry_plugins/bitbucket/testutils.py
new file mode 100644
index 0000000000..79a7b5dacf
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/testutils.py
@@ -0,0 +1,274 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+PUSH_EVENT_EXAMPLE = b"""{
+    "push": {
+        "changes": [
+            {
+                "links": {
+                    "html": {
+                        "href": "https://bitbucket.org/maxbittker/newsdiffs/branches/compare/e0e377d186e4f0e937bdb487a23384fe002df649..8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                    },
+                    "commits": {
+                        "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits?include=e0e377d186e4f0e937bdb487a23384fe002df649&exclude=8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                    },
+                    "diff": {
+                        "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/diff/e0e377d186e4f0e937bdb487a23384fe002df649..8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                    }
+                },
+                "commits": [
+                    {
+                        "links": {
+                            "approve": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e0e377d186e4f0e937bdb487a23384fe002df649/approve"
+                            },
+                            "statuses": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e0e377d186e4f0e937bdb487a23384fe002df649/statuses"
+                            },
+                            "comments": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e0e377d186e4f0e937bdb487a23384fe002df649/comments"
+                            },
+                            "self": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            },
+                            "patch": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/patch/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            },
+                            "html": {
+                                "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            },
+                            "diff": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/diff/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            }
+                        },
+                        "date": "2017-05-24T01:05:47+00:00",
+                        "hash": "e0e377d186e4f0e937bdb487a23384fe002df649",
+                        "parents": [
+                            {
+                                "type": "commit",
+                                "links": {
+                                    "html": {
+                                        "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                                    },
+                                    "self": {
+                                        "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                                    }
+                                },
+                                "hash": "8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                            }
+                        ],
+                        "type": "commit",
+                        "message": "README.md edited online with Bitbucket",
+                        "author": {
+                            "type": "author",
+                            "user": {
+                                "type": "user",
+                                "display_name": "Max Bittker",
+                                "uuid": "{b128e0f6-196a-4dde-b72d-f42abc6dc239}",
+                                "username": "maxbittker",
+                                "links": {
+                                    "html": {
+                                        "href": "https://bitbucket.org/maxbittker/"
+                                    },
+                                    "avatar": {
+                                        "href": "https://bitbucket.org/account/maxbittker/avatar/32/"
+                                    },
+                                    "self": {
+                                        "href": "https://api.bitbucket.org/2.0/users/maxbittker"
+                                    }
+                                }
+                            },
+                            "raw": "Max Bittker <max@getsentry.com>"
+                        }
+                    }
+                ],
+                "old": {
+                    "type": "branch",
+                    "links": {
+                        "html": {
+                            "href": "https://bitbucket.org/maxbittker/newsdiffs/branch/master"
+                        },
+                        "commits": {
+                            "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits/master"
+                        },
+                        "self": {
+                            "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/refs/branches/master"
+                        }
+                    },
+                    "target": {
+                        "links": {
+                            "html": {
+                                "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                            },
+                            "self": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                            }
+                        },
+                        "date": "2017-05-19T22:53:22+00:00",
+                        "hash": "8f5952f4dcffd7b311181d48eb0394b0cca21410",
+                        "parents": [
+                            {
+                                "type": "commit",
+                                "links": {
+                                    "html": {
+                                        "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/1cdfa36e62e615cdc73a1d5fcff1c706965b186d"
+                                    },
+                                    "self": {
+                                        "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/1cdfa36e62e615cdc73a1d5fcff1c706965b186d"
+                                    }
+                                },
+                                "hash": "1cdfa36e62e615cdc73a1d5fcff1c706965b186d"
+                            }
+                        ],
+                        "type": "commit",
+                        "message": "README.md edited online with Bitbucket",
+                        "author": {
+                            "type": "author",
+                            "raw": "Max Bittker <max@getsentry.com>"
+                        }
+                    },
+                    "name": "master"
+                },
+                "truncated": false,
+                "new": {
+                    "type": "branch",
+                    "links": {
+                        "html": {
+                            "href": "https://bitbucket.org/maxbittker/newsdiffs/branch/master"
+                        },
+                        "commits": {
+                            "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits/master"
+                        },
+                        "self": {
+                            "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/refs/branches/master"
+                        }
+                    },
+                    "target": {
+                        "links": {
+                            "html": {
+                                "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            },
+                            "self": {
+                                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e0e377d186e4f0e937bdb487a23384fe002df649"
+                            }
+                        },
+                        "date": "2017-05-24T01:05:47+00:00",
+                        "hash": "e0e377d186e4f0e937bdb487a23384fe002df649",
+                        "parents": [
+                            {
+                                "type": "commit",
+                                "links": {
+                                    "html": {
+                                        "href": "https://bitbucket.org/maxbittker/newsdiffs/commits/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                                    },
+                                    "self": {
+                                        "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                                    }
+                                },
+                                "hash": "8f5952f4dcffd7b311181d48eb0394b0cca21410"
+                            }
+                        ],
+                        "type": "commit",
+                        "message": "README.md edited online with Bitbucket",
+                        "author": {
+                            "type": "author",
+                            "raw": "Max Bittker <max@getsentry.com>"
+                        }
+                    },
+                    "name": "master"
+                },
+                "created": false,
+                "forced": false,
+                "closed": false
+            }
+        ]
+    },
+    "repository": {
+        "links": {
+            "html": {
+                "href": "https://bitbucket.org/maxbittker/newsdiffs"
+            },
+            "avatar": {
+                "href": "https://bitbucket.org/maxbittker/newsdiffs/avatar/32/"
+            },
+            "self": {
+                "href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs"
+            }
+        },
+        "full_name": "maxbittker/newsdiffs",
+        "scm": "git",
+        "uuid": "{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+        "type": "repository",
+        "is_private": false,
+        "owner": {
+            "type": "user",
+            "display_name": "Max Bittker",
+            "uuid": "{b128e0f6-196a-4dde-b72d-f42abc6dc239}",
+            "username": "maxbittker",
+            "links": {
+                "html": {
+                    "href": "https://bitbucket.org/maxbittker/"
+                },
+                "avatar": {
+                    "href": "https://bitbucket.org/account/maxbittker/avatar/32/"
+                },
+                "self": {
+                    "href": "https://api.bitbucket.org/2.0/users/maxbittker"
+                }
+            }
+        },
+        "name": "newsdiffs",
+        "website": ""
+    },
+    "actor": {
+        "type": "user",
+        "display_name": "Max Bittker",
+        "uuid": "{b128e0f6-196a-4dde-b72d-f42abc6dc239}",
+        "username": "maxbittker",
+        "links": {
+            "html": {
+                "href": "https://bitbucket.org/maxbittker/"
+            },
+            "avatar": {
+                "href": "https://bitbucket.org/account/maxbittker/avatar/32/"
+            },
+            "self": {
+                "href": "https://api.bitbucket.org/2.0/users/maxbittker"
+            }
+        }
+    }
+}
+"""
+
+COMPARE_COMMITS_EXAMPLE = b"""{
+"pagelen": 30,
+ "values":
+     [{"hash": "e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+      "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs"}, "avatar": {"href": "https://bitbucket.org/maxbittker/newsdiffs/avatar/32/"}}, "type": "repository", "name": "newsdiffs", "full_name": "maxbittker/newsdiffs", "uuid": "{c78dfb25-7882-4550-97b1-4e0d38f32859}"}, "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "comments": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/comments"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/patch/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/approve"}, "statuses": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/statuses"}},
+       "author": {
+            "raw": "Max Bittker <max@getsentry.com>",
+            "type": "author"
+        },
+        "parents": [{"hash": "26de9b63d09aa9c787e899f149c672023e292925", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/26de9b63d09aa9c787e899f149c672023e292925"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs/commits/26de9b63d09aa9c787e899f149c672023e292925"}}}], "date": "2017-05-16T23:21:40+00:00", "message": "README.md edited online with Bitbucket", "type": "commit"}],
+  "next": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301?page=2"
+}
+"""
+
+GET_LAST_COMMITS_EXAMPLE = b"""{
+"pagelen": 30,
+ "values":
+     [{"hash": "e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+      "repository": {"links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs"}, "avatar": {"href": "https://bitbucket.org/maxbittker/newsdiffs/avatar/32/"}}, "type": "repository", "name": "newsdiffs", "full_name": "maxbittker/newsdiffs", "uuid": "{c78dfb25-7882-4550-97b1-4e0d38f32859}"}, "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "comments": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/comments"}, "patch": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/patch/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/approve"}, "statuses": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/e18e4e72de0d824edfbe0d73efe34cbd0d01d301/statuses"}}, "author": {"raw": "Max Bittker <max@getsentry.com>", "type": "author", "user": {"username": "maxbittker", "display_name": "Max Bittker", "type": "user", "uuid": "{b128e0f6-196a-4dde-b72d-f42abc6dc239}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/maxbittker"}, "html": {"href": "https://bitbucket.org/maxbittker/"}, "avatar": {"href": "https://bitbucket.org/account/maxbittker/avatar/32/"}}}}, "parents": [{"hash": "26de9b63d09aa9c787e899f149c672023e292925", "type": "commit", "links": {"self": {"href": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commit/26de9b63d09aa9c787e899f149c672023e292925"}, "html": {"href": "https://bitbucket.org/maxbittker/newsdiffs/commits/26de9b63d09aa9c787e899f149c672023e292925"}}}], "date": "2017-05-16T23:21:40+00:00", "message": "README.md edited online with Bitbucket", "type": "commit"}],
+  "next": "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301?page=2"
+}
+"""
+
+COMMIT_DIFF_PATCH = b"""diff --git a/README.md b/README.md
+index 89821ce..9e09a8a 100644
+--- a/README.md
++++ b/README.md
+@@ -1 +1 @@
+-A twitter bot to when words are said by the NYT for the first time.
+\\ No newline at end of file
++A twitter bot to when words are said by the NYT for the first time.sdfsdf
+\\ No newline at end of file"""
diff --git a/src/new_sentry_plugins/bitbucket/urls.py b/src/new_sentry_plugins/bitbucket/urls.py
new file mode 100644
index 0000000000..8e84141a29
--- /dev/null
+++ b/src/new_sentry_plugins/bitbucket/urls.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, url
+
+from .endpoints.webhook import BitbucketWebhookEndpoint
+
+urlpatterns = patterns(
+    "",
+    url(
+        r"^organizations/(?P<organization_id>[^\/]+)/webhook/$", BitbucketWebhookEndpoint.as_view()
+    ),
+)
diff --git a/src/new_sentry_plugins/client.py b/src/new_sentry_plugins/client.py
new file mode 100644
index 0000000000..b098dfd508
--- /dev/null
+++ b/src/new_sentry_plugins/client.py
@@ -0,0 +1,260 @@
+from __future__ import absolute_import
+
+import logging
+import json
+import requests
+
+from BeautifulSoup import BeautifulStoneSoup
+from cached_property import cached_property
+from django.utils.datastructures import SortedDict
+from requests.exceptions import ConnectionError, HTTPError
+
+from sentry.http import build_session
+from sentry.utils import metrics
+
+from .exceptions import ApiHostError, ApiError, ApiUnauthorized, UnsupportedResponseType
+
+
+class BaseApiResponse(object):
+    text = ""
+
+    def __init__(self, headers=None, status_code=None):
+        self.headers = headers
+        self.status_code = status_code
+
+    def __repr__(self):
+        return u"<%s: code=%s, content_type=%s>" % (
+            type(self).__name__,
+            self.status_code,
+            self.headers.get("Content-Type", "") if self.headers else "",
+        )
+
+    @cached_property
+    def rel(self):
+        if not self.headers:
+            return {}
+        link_header = self.headers.get("Link")
+        if not link_header:
+            return {}
+        return {item["rel"]: item["url"] for item in requests.utils.parse_header_links(link_header)}
+
+    @classmethod
+    def from_response(self, response, allow_text=False):
+        # XXX(dcramer): this doesnt handle leading spaces, but they're not common
+        # paths so its ok
+        if response.text.startswith(u"<?xml"):
+            return XmlApiResponse(response.text, response.headers, response.status_code)
+        elif response.text.startswith("<"):
+            if not allow_text:
+                raise ValueError("Not a valid response type: {}".format(response.text[:128]))
+            elif response.status_code < 200 or response.status_code >= 300:
+                raise ValueError(
+                    "Received unexpected plaintext response for code {}".format(
+                        response.status_code
+                    )
+                )
+            return TextApiResponse(response.text, response.headers, response.status_code)
+
+        # Some APIs will return JSON with an invalid content-type, so we try
+        # to decode it anyways
+        if "application/json" not in response.headers["Content-Type"]:
+            try:
+                data = json.loads(response.text, object_pairs_hook=SortedDict)
+            except (TypeError, ValueError):
+                if allow_text:
+                    return TextApiResponse(response.text, response.headers, response.status_code)
+                raise UnsupportedResponseType(
+                    response.headers["Content-Type"], response.status_code
+                )
+        else:
+            data = json.loads(response.text, object_pairs_hook=SortedDict)
+
+        if isinstance(data, dict):
+            return MappingApiResponse(data, response.headers, response.status_code)
+        elif isinstance(data, (list, tuple)):
+            return SequenceApiResponse(data, response.headers, response.status_code)
+        else:
+            raise NotImplementedError
+
+
+class TextApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.text = text
+        super(TextApiResponse, self).__init__(*args, **kwargs)
+
+
+class XmlApiResponse(BaseApiResponse):
+    def __init__(self, text, *args, **kwargs):
+        self.xml = BeautifulStoneSoup(text)
+        super(XmlApiResponse, self).__init__(*args, **kwargs)
+
+
+class MappingApiResponse(dict, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        dict.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+class SequenceApiResponse(list, BaseApiResponse):
+    def __init__(self, data, *args, **kwargs):
+        list.__init__(self, data)
+        BaseApiResponse.__init__(self, *args, **kwargs)
+
+    @property
+    def json(self):
+        return self
+
+
+def track_response_metric(plugin, code):
+    metrics.incr("sentry-plugins.http_response", tags={"status": code, "plugin": plugin})
+
+
+class ApiClient(object):
+    base_url = None
+
+    allow_text = False
+
+    allow_redirects = None
+
+    logger = logging.getLogger("sentry.plugins")
+
+    plugin_name = "undefined"
+
+    def __init__(self, verify_ssl=True):
+        self.verify_ssl = verify_ssl
+
+    def build_url(self, path):
+        if path.startswith("/"):
+            if not self.base_url:
+                raise ValueError("Invalid URL: {}".format(path))
+            return "{}{}".format(self.base_url, path)
+        return path
+
+    def _request(
+        self,
+        method,
+        path,
+        headers=None,
+        data=None,
+        params=None,
+        auth=None,
+        json=True,
+        allow_text=None,
+        allow_redirects=None,
+    ):
+
+        if allow_text is None:
+            allow_text = self.allow_text
+
+        if allow_redirects is None:
+            allow_redirects = self.allow_redirects
+
+        if allow_redirects is None:  # is still None
+            allow_redirects = method.upper() == "GET"
+
+        full_url = self.build_url(path)
+        metrics.incr("sentry-plugins.http_request", tags={"plugin": self.plugin_name})
+
+        session = build_session()
+        try:
+            resp = getattr(session, method.lower())(
+                url=full_url,
+                headers=headers,
+                json=data if json else None,
+                data=data if not json else None,
+                params=params,
+                auth=auth,
+                verify=self.verify_ssl,
+                allow_redirects=allow_redirects,
+            )
+            resp.raise_for_status()
+        except ConnectionError as e:
+            raise ApiHostError.from_exception(e)
+        except HTTPError as e:
+            resp = e.response
+            if resp is None:
+                track_response_metric(self.plugin_name, "unknown")
+                self.logger.exception(
+                    "request.error", extra={"plugin": self.plugin_name, "url": full_url}
+                )
+                raise ApiError("Internal Error")
+            track_response_metric(self.plugin_name, resp.status_code)
+            raise ApiError.from_response(resp)
+
+        track_response_metric(self.plugin_name, resp.status_code)
+        if resp.status_code == 204:
+            return {}
+
+        return BaseApiResponse.from_response(resp, allow_text=allow_text)
+
+    # subclasses should override ``request``
+    def request(self, *args, **kwargs):
+        return self._request(*args, **kwargs)
+
+    def delete(self, *args, **kwargs):
+        return self.request("DELETE", *args, **kwargs)
+
+    def get(self, *args, **kwargs):
+        return self.request("GET", *args, **kwargs)
+
+    def patch(self, *args, **kwargs):
+        return self.request("PATCH", *args, **kwargs)
+
+    def post(self, *args, **kwargs):
+        return self.request("POST", *args, **kwargs)
+
+    def put(self, *args, **kwargs):
+        return self.request("PUT", *args, **kwargs)
+
+
+class AuthApiClient(ApiClient):
+    auth = None
+
+    def __init__(self, auth=None, *args, **kwargs):
+        self.auth = auth
+        super(AuthApiClient, self).__init__(*args, **kwargs)
+
+    def has_auth(self):
+        return self.auth and "access_token" in self.auth.tokens
+
+    def exception_means_unauthorized(self, exc):
+        return isinstance(exc, ApiUnauthorized)
+
+    def ensure_auth(self, **kwargs):
+        headers = kwargs["headers"]
+        if "Authorization" not in headers and self.has_auth() and "auth" not in kwargs:
+            kwargs = self.bind_auth(**kwargs)
+        return kwargs
+
+    def bind_auth(self, **kwargs):
+        token = self.auth.tokens["access_token"]
+        kwargs["headers"]["Authorization"] = "Bearer {}".format(token)
+        return kwargs
+
+    def _request(self, method, path, **kwargs):
+        headers = kwargs.setdefault("headers", {})
+        headers.setdefault("Accept", "application/json, application/xml")
+
+        # TODO(dcramer): we could proactively refresh the token if we knew
+        # about expires
+        kwargs = self.ensure_auth(**kwargs)
+
+        try:
+            return ApiClient._request(self, method, path, **kwargs)
+        except Exception as exc:
+            if not self.exception_means_unauthorized(exc):
+                raise
+            if not self.auth:
+                raise
+
+        # refresh token
+        self.logger.info(
+            "token.refresh", extra={"auth_id": self.auth.id, "provider": self.auth.provider}
+        )
+        self.auth.refresh_token()
+        kwargs = self.bind_auth(**kwargs)
+        return ApiClient._request(self, method, path, **kwargs)
diff --git a/src/new_sentry_plugins/clubhouse/__init__.py b/src/new_sentry_plugins/clubhouse/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/clubhouse/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/clubhouse/client.py b/src/new_sentry_plugins/clubhouse/client.py
new file mode 100644
index 0000000000..9137c6be1f
--- /dev/null
+++ b/src/new_sentry_plugins/clubhouse/client.py
@@ -0,0 +1,38 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.client import ApiClient
+
+
+class ClubhouseClient(ApiClient):
+    base_url = u"https://api.clubhouse.io/api/v2"
+    plugin_name = "clubhouse"
+
+    def __init__(self, token):
+        self.token = token
+        super(ClubhouseClient, self).__init__()
+
+    def request(self, method, path, data=None, params=None):
+        params = {"token": self.token}
+        return self._request(method, path, data=data, params=params)
+
+    def get_story(self, story_id):
+        return self.get("/stories/%s" % story_id)
+
+    def create_story(self, project, data):
+        story_data = {
+            "project_id": project,
+            "name": data["title"],
+            "description": data["description"],
+            "story_type": "bug",
+        }
+        return self.post("/stories", data=story_data)
+
+    # returns [SearchResults] https://clubhouse.io/api/rest/v2/#SearchResults
+    # containing a list of [StorySearch] results https://clubhouse.io/api/rest/v2/#StorySearch
+    def search_stories(self, query):
+        return self.get("/search/stories", data={"query": query})
+
+    def add_comment(self, story_id, comment):
+        story_url = "/stories/{}/comments".format(story_id)
+        comment_data = {"text": comment}
+        return self.post(story_url, data=comment_data)
diff --git a/src/new_sentry_plugins/clubhouse/plugin.py b/src/new_sentry_plugins/clubhouse/plugin.py
new file mode 100644
index 0000000000..054c8d49ff
--- /dev/null
+++ b/src/new_sentry_plugins/clubhouse/plugin.py
@@ -0,0 +1,164 @@
+from __future__ import absolute_import
+
+import six
+
+from rest_framework.response import Response
+
+from sentry.exceptions import PluginError
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+from .client import ClubhouseClient
+
+
+class ClubhousePlugin(CorePluginMixin, IssuePlugin2):
+    description = "Create Clubhouse Stories from a project."
+    slug = "clubhouse"
+    title = "Clubhouse"
+    conf_title = title
+    conf_key = "clubhouse"
+
+    issue_fields = frozenset(["id", "title", "url"])
+
+    def get_group_urls(self):
+        return super(ClubhousePlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        token = self.get_option("token", project)
+        helptext = "Enter your API Token (found on " "your account Settings, under API Tokens)."
+        secret_field = get_secret_field_config(token, helptext, include_prefix=True)
+        secret_field.update(
+            {
+                "name": "token",
+                "label": "API Token",
+                "placeholder": "e.g. 12345678-1234-1234-1234-1234567890AB",
+            }
+        )
+        return [
+            secret_field,
+            {
+                "name": "project",
+                "label": "Project ID",
+                "default": self.get_option("project", project),
+                "type": "text",
+                "placeholder": "e.g. 639281",
+                "help": "Enter your project's numerical ID.",
+            },
+        ]
+
+    def is_configured(self, request, project, **kwargs):
+        return all(self.get_option(k, project) for k in ("token", "project"))
+
+    def get_client(self, project):
+        token = self.get_option("token", project)
+        return ClubhouseClient(token)
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(group.project)
+
+        try:
+            response = client.create_story(
+                project=self.get_option("project", group.project), data=form_data
+            )
+        except Exception as e:
+            self.raise_error(e)
+
+        return {"id": response["id"], "title": response["name"], "url": response["app_url"]}
+
+    def get_issue_label(self, group, issue, **kwargs):
+        return "Clubhouse Story #%s" % issue["id"]
+
+    def get_issue_url(self, group, issue, **kwargs):
+        return issue["url"]
+
+    def validate_config(self, project, config, actor):
+        try:
+            config["project"] = int(config["project"])
+        except ValueError as exc:
+            self.logger.exception(six.text_type(exc))
+            raise PluginError(
+                "Invalid Project ID. "
+                "Project IDs are numbers-only, and can be found on the Project's page"
+            )
+        return config
+
+    # This drives the `Link` UI
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Story",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+                "help": (
+                    "You can use any syntax supported by Clubhouse's "
+                    '<a href="https://help.clubhouse.io/hc/en-us/articles/360000046646-Search-Operators" '
+                    'target="_blank">search operators.</a>'
+                ),
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(
+                    group.get_absolute_url(params={"referrer": "clubhouse_plugin"})
+                ),
+                "type": "textarea",
+                "help": (
+                    "Leave blank if you don't want to " "add a comment to the Clubhouse story."
+                ),
+                "required": False,
+            },
+        ]
+
+    # Handle the incoming search terms, make requests and build responses
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+        if field != "issue_id" or not query:
+            return Response({"issue_id": []})
+
+        project = self.get_option("project", group.project)
+
+        client = self.get_client(group.project)
+
+        # TODO: Something about the search API won't allow an explicit number search.
+        # Should it switch the search mechanism from search_stories(text) to get_story(id)?
+        try:
+            response = client.search_stories(
+                query=(u"project:%s %s" % (project, query)).encode("utf-8")
+            )
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        issues = [
+            {"text": "(#%s) %s" % (i["id"], i["name"]), "id": i["id"]}
+            for i in response.get("data", [])
+        ]
+
+        return Response({field: issues})
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(group.project)
+
+        try:
+            story = client.get_story(story_id=form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.add_comment(story_id=story["id"], comment=comment)
+            except Exception as e:
+                self.raise_error(e)
+
+        return {"id": story["id"], "title": story["name"], "url": story["app_url"]}
diff --git a/src/new_sentry_plugins/constants.py b/src/new_sentry_plugins/constants.py
new file mode 100644
index 0000000000..70f837ed28
--- /dev/null
+++ b/src/new_sentry_plugins/constants.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import
+
+
+ERR_INTERNAL = (
+    "An internal error occurred with the integration and the Sentry team has" " been notified"
+)
+
+ERR_UNAUTHORIZED = "Unauthorized: either your access token was invalid or you do not have" " access"
+
+ERR_UNSUPPORTED_RESPONSE_TYPE = "An unsupported response type was returned: {content_type}"
diff --git a/src/new_sentry_plugins/exceptions.py b/src/new_sentry_plugins/exceptions.py
new file mode 100644
index 0000000000..c5066dfed2
--- /dev/null
+++ b/src/new_sentry_plugins/exceptions.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+from BeautifulSoup import BeautifulStoneSoup
+from collections import OrderedDict
+from simplejson.decoder import JSONDecodeError
+from six.moves.urllib.parse import urlparse
+from sentry.utils import json
+
+
+class ApiError(Exception):
+    code = None
+    json = None
+    xml = None
+
+    def __init__(self, text, code=None):
+        if code is not None:
+            self.code = code
+        self.text = text
+        self.xml = None
+        # TODO(dcramer): pull in XML support from Jira
+        if text:
+            try:
+                self.json = json.loads(text, object_pairs_hook=OrderedDict)
+            except (JSONDecodeError, ValueError):
+                if self.text[:5] == "<?xml":
+                    # perhaps it's XML?
+                    self.xml = BeautifulStoneSoup(self.text)
+                # must be an awful code.
+                self.json = None
+        else:
+            self.json = None
+        super(ApiError, self).__init__(text[:128])
+
+    @classmethod
+    def from_response(cls, response):
+        if response.status_code == 401:
+            return ApiUnauthorized(response.text)
+        return cls(response.text, response.status_code)
+
+
+class ApiHostError(ApiError):
+    code = 503
+
+    @classmethod
+    def from_exception(cls, exception):
+        if hasattr(exception, "request"):
+            return cls.from_request(exception.request)
+        return cls("Unable to reach host")
+
+    @classmethod
+    def from_request(cls, request):
+        host = urlparse(request.url).netloc
+        return cls("Unable to reach host: {}".format(host))
+
+
+class ApiUnauthorized(ApiError):
+    code = 401
+
+
+class UnsupportedResponseType(ApiError):
+    @property
+    def content_type(self):
+        return self.text
diff --git a/src/new_sentry_plugins/github/README.rst b/src/new_sentry_plugins/github/README.rst
new file mode 100644
index 0000000000..2ab3b55b69
--- /dev/null
+++ b/src/new_sentry_plugins/github/README.rst
@@ -0,0 +1,36 @@
+**Note**: This plugin has been deprecated in favor of the `GitHub Global Integration <https://docs.sentry.io/server/integrations/github/>`_.
+
+You'll have to create an application in GitHub to get the app ID and API secret. Use the following for the Authentication redirect URL::
+
+    <URL_TO_SENTRY>/account/settings/social/associate/complete/github/
+
+Ensure you've configured GitHub auth in Sentry::
+
+    GITHUB_APP_ID = 'GitHub Application Client ID'
+    GITHUB_API_SECRET = 'GitHub Application Client Secret'
+    GITHUB_EXTENDED_PERMISSIONS = ['repo']
+
+If the callback URL you've registered with GitHub uses HTTPS, you'll need this in your config::
+
+    SOCIAL_AUTH_REDIRECT_IS_HTTPS = True
+
+If your server is behind a reverse proxy, you'll need to enable the X-Forwarded-Proto
+and X-Forwarded-Host headers, and use this config::
+
+    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
+    USE_X_FORWARDED_HOST = True
+
+
+Associate your account with GitHub (if you haven't already) via Account -> Identities. If you had
+already associated your account, and you hadn't configured extended permissions, you'll need to
+disconnect and reconnect the account.
+
+You'll now see a new action on groups which allows quick creation of GitHub issues.
+
+
+Caveats
+~~~~~~~
+
+If you have multiple GitHub identities associated in Sentry, the plugin will just select
+one to use.
+
diff --git a/src/new_sentry_plugins/github/__init__.py b/src/new_sentry_plugins/github/__init__.py
new file mode 100644
index 0000000000..6c2cba01b4
--- /dev/null
+++ b/src/new_sentry_plugins/github/__init__.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-github")
+
+from new_sentry_plugins.github import options  # NOQA
diff --git a/src/new_sentry_plugins/github/client.py b/src/new_sentry_plugins/github/client.py
new file mode 100644
index 0000000000..d81b042462
--- /dev/null
+++ b/src/new_sentry_plugins/github/client.py
@@ -0,0 +1,139 @@
+from __future__ import absolute_import
+
+import calendar
+import datetime
+import jwt
+import time
+
+from django.conf import settings
+from sentry import options
+
+from new_sentry_plugins.client import ApiClient, AuthApiClient
+
+
+class GitHubClientMixin(AuthApiClient):
+    allow_redirects = True
+
+    base_url = "https://api.github.com"
+    plugin_name = "github"
+
+    def get_last_commits(self, repo, end_sha):
+        # return api request that fetches last ~30 commits
+        # see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository
+        # using end_sha as parameter
+        return self.get("/repos/{}/commits".format(repo), params={"sha": end_sha})
+
+    def compare_commits(self, repo, start_sha, end_sha):
+        # see https://developer.github.com/v3/repos/commits/#compare-two-commits
+        # where start sha is oldest and end is most recent
+        return self.get("/repos/{}/compare/{}...{}".format(repo, start_sha, end_sha))
+
+    def get_pr_commits(self, repo, num):
+        # see https://developer.github.com/v3/pulls/#list-commits-on-a-pull-request
+        # Max: 250 Commits
+        return self.get("/repos/{}/pulls/{}/commits".format(repo, num))
+
+
+class GitHubClient(GitHubClientMixin, AuthApiClient):
+    def __init__(self, url=None, auth=None):
+        if url is not None:
+            self.base_url = url.rstrip("/")
+        super(GitHubClient, self).__init__(auth=auth)
+
+    def request_no_auth(self, method, path, data=None, params=None):
+        if params is None:
+            params = {}
+
+        params.update(
+            {"client_id": settings.GITHUB_APP_ID, "client_secret": settings.GITHUB_API_SECRET}
+        )
+
+        return self._request(method, path, auth=None, data=data, params=params)
+
+    def get_repo(self, repo):
+        return self.get("/repos/{}".format(repo))
+
+    def get_issue(self, repo, issue_id):
+        return self.get("/repos/{}/issues/{}".format(repo, issue_id))
+
+    def create_issue(self, repo, data):
+        return self.post("/repos/{}/issues".format(repo), data=data)
+
+    def create_comment(self, repo, issue_id, data):
+        return self.post("/repos/{}/issues/{}/comments".format(repo, issue_id), data=data)
+
+    def list_assignees(self, repo):
+        return self.get("/repos/{}/assignees?per_page=100".format(repo))
+
+    def search_issues(self, query):
+        return self.get("/search/issues", params={"q": query})
+
+    def create_hook(self, repo, data):
+        return self.post("/repos/{}/hooks".format(repo), data=data)
+
+    def update_hook(self, repo, hook_id, data):
+        return self.patch("/repos/{}/hooks/{}".format(repo, hook_id), data=data)
+
+    def delete_hook(self, repo, id):
+        return self.delete("/repos/{}/hooks/{}".format(repo, id))
+
+    def get_installations(self):
+        # TODO(jess): remove this whenever it's out of preview
+        headers = {"Accept": "application/vnd.github.machine-man-preview+json"}
+
+        params = {"access_token": self.auth.tokens["access_token"]}
+
+        return self._request("GET", "/user/installations", headers=headers, params=params)
+
+
+class GitHubAppsClient(GitHubClientMixin, ApiClient):
+    def __init__(self, integration):
+        self.integration = integration
+        self.token = None
+        self.expires_at = None
+        super(GitHubAppsClient, self).__init__()
+
+    def get_token(self):
+        if not self.token or self.expires_at < datetime.datetime.utcnow():
+            res = self.create_token()
+            self.token = res["token"]
+            self.expires_at = datetime.datetime.strptime(res["expires_at"], "%Y-%m-%dT%H:%M:%SZ")
+
+        return self.token
+
+    def get_jwt(self):
+        exp = datetime.datetime.utcnow() + datetime.timedelta(minutes=10)
+        exp = calendar.timegm(exp.timetuple())
+        # Generate the JWT
+        payload = {
+            # issued at time
+            "iat": int(time.time()),
+            # JWT expiration time (10 minute maximum)
+            "exp": exp,
+            # Integration's GitHub identifier
+            "iss": options.get("github.integration-app-id"),
+        }
+
+        return jwt.encode(payload, options.get("github.integration-private-key"), algorithm="RS256")
+
+    def request(self, method, path, headers=None, data=None, params=None):
+        if headers is None:
+            headers = {
+                "Authorization": "token %s" % self.get_token(),
+                # TODO(jess): remove this whenever it's out of preview
+                "Accept": "application/vnd.github.machine-man-preview+json",
+            }
+        return self._request(method, path, headers=headers, data=data, params=params)
+
+    def create_token(self):
+        return self.post(
+            "/installations/{}/access_tokens".format(self.integration.external_id),
+            headers={
+                "Authorization": "Bearer %s" % self.get_jwt(),
+                # TODO(jess): remove this whenever it's out of preview
+                "Accept": "application/vnd.github.machine-man-preview+json",
+            },
+        )
+
+    def get_repositories(self):
+        return self.get("/installation/repositories")
diff --git a/src/new_sentry_plugins/github/endpoints/__init__.py b/src/new_sentry_plugins/github/endpoints/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/github/endpoints/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/github/endpoints/webhook.py b/src/new_sentry_plugins/github/endpoints/webhook.py
new file mode 100644
index 0000000000..01ade861de
--- /dev/null
+++ b/src/new_sentry_plugins/github/endpoints/webhook.py
@@ -0,0 +1,466 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+import dateutil.parser
+import hashlib
+import hmac
+import logging
+import six
+
+from django.db import IntegrityError, transaction
+from django.http import HttpResponse, Http404
+from django.utils.crypto import constant_time_compare
+from django.utils.decorators import method_decorator
+from django.views.decorators.csrf import csrf_exempt
+from django.views.generic import View
+from django.utils import timezone
+from simplejson import JSONDecodeError
+from sentry import options
+from sentry.models import (
+    Commit,
+    CommitAuthor,
+    CommitFileChange,
+    Integration,
+    Organization,
+    OrganizationOption,
+    Repository,
+    User,
+    PullRequest,
+)
+from sentry.plugins.providers import RepositoryProvider
+from sentry.utils import json
+
+from new_sentry_plugins.exceptions import ApiError
+from new_sentry_plugins.github.client import GitHubClient
+
+logger = logging.getLogger("sentry.webhooks")
+
+
+def is_anonymous_email(email):
+    return email[-25:] == "@users.noreply.github.com"
+
+
+def get_external_id(username):
+    return "github:%s" % username
+
+
+class Webhook(object):
+    def __call__(self, event, organization=None):
+        raise NotImplementedError
+
+
+class InstallationEventWebhook(Webhook):
+    # https://developer.github.com/v3/activity/events/types/#installationevent
+    def __call__(self, event, organization=None):
+        action = event["action"]
+        installation = event["installation"]
+        # TODO(jess): handle uninstalls
+        if action == "created":
+            try:
+                with transaction.atomic():
+                    Integration.objects.create(
+                        provider="github_apps",
+                        external_id=installation["id"],
+                        name=installation["account"]["login"],
+                    )
+            except IntegrityError:
+                pass
+
+
+class InstallationRepositoryEventWebhook(Webhook):
+    # https://developer.github.com/v3/activity/events/types/#installationrepositoriesevent
+    def __call__(self, event, organization=None):
+        installation = event["installation"]
+
+        integration = Integration.objects.get(
+            external_id=installation["id"], provider="github_apps"
+        )
+
+        repos_added = event["repositories_added"]
+
+        if repos_added:
+            for org_id in integration.organizations.values_list("id", flat=True):
+                for r in repos_added:
+                    config = {"name": r["full_name"]}
+                    repo, created = Repository.objects.get_or_create(
+                        organization_id=org_id,
+                        name=r["full_name"],
+                        provider="github",
+                        external_id=r["id"],
+                        defaults={
+                            "url": "https://github.com/%s" % (r["full_name"],),
+                            "config": config,
+                            "integration_id": integration.id,
+                        },
+                    )
+                    if not created:
+                        repo.config.update(config)
+                        repo.integration_id = integration.id
+                        repo.save()
+        # TODO(jess): what do we want to do when they're removed?
+        # maybe signify that we've lost access but not deleted?
+
+
+class PushEventWebhook(Webhook):
+    def _handle(self, event, organization, is_apps):
+        authors = {}
+
+        client = GitHubClient()
+        gh_username_cache = {}
+
+        try:
+            repo = Repository.objects.get(
+                organization_id=organization.id,
+                provider="github_apps" if is_apps else "github",
+                external_id=six.text_type(event["repository"]["id"]),
+            )
+        except Repository.DoesNotExist:
+            raise Http404()
+
+        # We need to track GitHub's "full_name" which is the repository slug.
+        # This is needed to access the API since `external_id` isn't sufficient.
+        if repo.config.get("name") != event["repository"]["full_name"]:
+            repo.config["name"] = event["repository"]["full_name"]
+            repo.save()
+
+        for commit in event["commits"]:
+            if not commit["distinct"]:
+                continue
+
+            if RepositoryProvider.should_ignore_commit(commit["message"]):
+                continue
+
+            author_email = commit["author"]["email"]
+            if "@" not in author_email:
+                author_email = u"{}@localhost".format(author_email[:65])
+            # try to figure out who anonymous emails are
+            elif is_anonymous_email(author_email):
+                gh_username = commit["author"].get("username")
+                # bot users don't have usernames
+                if gh_username:
+                    external_id = get_external_id(gh_username)
+                    if gh_username in gh_username_cache:
+                        author_email = gh_username_cache[gh_username] or author_email
+                    else:
+                        try:
+                            commit_author = CommitAuthor.objects.get(
+                                external_id=external_id, organization_id=organization.id
+                            )
+                        except CommitAuthor.DoesNotExist:
+                            commit_author = None
+
+                        if commit_author is not None and not is_anonymous_email(
+                            commit_author.email
+                        ):
+                            author_email = commit_author.email
+                            gh_username_cache[gh_username] = author_email
+                        else:
+                            try:
+                                gh_user = client.request_no_auth("GET", "/users/%s" % gh_username)
+                            except ApiError as exc:
+                                logger.exception(six.text_type(exc))
+                            else:
+                                # even if we can't find a user, set to none so we
+                                # don't re-query
+                                gh_username_cache[gh_username] = None
+                                try:
+                                    user = User.objects.filter(
+                                        social_auth__provider="github",
+                                        social_auth__uid=gh_user["id"],
+                                        org_memberships=organization,
+                                    )[0]
+                                except IndexError:
+                                    pass
+                                else:
+                                    author_email = user.email
+                                    gh_username_cache[gh_username] = author_email
+                                    if commit_author is not None:
+                                        try:
+                                            with transaction.atomic():
+                                                commit_author.update(
+                                                    email=author_email, external_id=external_id
+                                                )
+                                        except IntegrityError:
+                                            pass
+
+                        if commit_author is not None:
+                            authors[author_email] = commit_author
+
+            # TODO(dcramer): we need to deal with bad values here, but since
+            # its optional, lets just throw it out for now
+            if len(author_email) > 75:
+                author = None
+            elif author_email not in authors:
+                authors[author_email] = author = CommitAuthor.objects.get_or_create(
+                    organization_id=organization.id,
+                    email=author_email,
+                    defaults={"name": commit["author"]["name"][:128]},
+                )[0]
+
+                update_kwargs = {}
+
+                if author.name != commit["author"]["name"][:128]:
+                    update_kwargs["name"] = commit["author"]["name"][:128]
+
+                gh_username = commit["author"].get("username")
+                if gh_username:
+                    external_id = get_external_id(gh_username)
+                    if author.external_id != external_id and not is_anonymous_email(author.email):
+                        update_kwargs["external_id"] = external_id
+
+                if update_kwargs:
+                    try:
+                        with transaction.atomic():
+                            author.update(**update_kwargs)
+                    except IntegrityError:
+                        pass
+            else:
+                author = authors[author_email]
+
+            try:
+                with transaction.atomic():
+                    c = Commit.objects.create(
+                        repository_id=repo.id,
+                        organization_id=organization.id,
+                        key=commit["id"],
+                        message=commit["message"],
+                        author=author,
+                        date_added=dateutil.parser.parse(commit["timestamp"]).astimezone(
+                            timezone.utc
+                        ),
+                    )
+                    for fname in commit["added"]:
+                        CommitFileChange.objects.create(
+                            organization_id=organization.id, commit=c, filename=fname, type="A"
+                        )
+                    for fname in commit["removed"]:
+                        CommitFileChange.objects.create(
+                            organization_id=organization.id, commit=c, filename=fname, type="D"
+                        )
+                    for fname in commit["modified"]:
+                        CommitFileChange.objects.create(
+                            organization_id=organization.id, commit=c, filename=fname, type="M"
+                        )
+            except IntegrityError:
+                pass
+
+    # https://developer.github.com/v3/activity/events/types/#pushevent
+    def __call__(self, event, organization=None):
+        is_apps = "installation" in event
+        if organization is None:
+            if "installation" not in event:
+                return
+
+            integration = Integration.objects.get(
+                external_id=event["installation"]["id"], provider="github_apps"
+            )
+            organizations = list(integration.organizations.all())
+        else:
+            organizations = [organization]
+
+        for org in organizations:
+            self._handle(event, org, is_apps)
+
+
+class PullRequestEventWebhook(Webhook):
+    # https://developer.github.com/v3/activity/events/types/#pullrequestevent
+    def __call__(self, event, organization):
+        # TODO(maxbittker) handle is_apps correctly (What does this comment mean?)
+        is_apps = "installation" in event
+        try:
+            repo = Repository.objects.get(
+                organization_id=organization.id,
+                provider="github_apps" if is_apps else "github",
+                external_id=six.text_type(event["repository"]["id"]),
+            )
+
+        except Repository.DoesNotExist:
+            raise Http404()
+
+        # We need to track GitHub's "full_name" which is the repository slug.
+        # This is needed to access the API since `external_id` isn't sufficient.
+        if repo.config.get("name") != event["repository"]["full_name"]:
+            repo.config["name"] = event["repository"]["full_name"]
+            repo.save()
+
+        pull_request = event["pull_request"]
+        number = pull_request["number"]
+        title = pull_request["title"]
+        body = pull_request["body"]
+        user = pull_request["user"]
+        # The value of the merge_commit_sha attribute changes depending on the state of the pull request. Before a pull request is merged, the merge_commit_sha attribute holds the SHA of the test merge commit. After a pull request is merged, the attribute changes depending on how the pull request was merged:
+        # - If the pull request was merged as a merge commit, the attribute represents the SHA of the merge commit.
+        # - If the pull request was merged via a squash, the attribute represents the SHA of the squashed commit on the base branch.
+        # - If the pull request was rebased, the attribute represents the commit that the base branch was updated to.
+        # https://developer.github.com/v3/pulls/#get-a-single-pull-request
+        merge_commit_sha = pull_request["merge_commit_sha"] if pull_request["merged"] else None
+
+        author_email = u"{}@localhost".format(user["login"][:65])
+        try:
+            commit_author = CommitAuthor.objects.get(
+                external_id=get_external_id(user["login"]), organization_id=organization.id
+            )
+            author_email = commit_author.email
+        except CommitAuthor.DoesNotExist:
+            try:
+                user_model = User.objects.filter(
+                    social_auth__provider="github",
+                    social_auth__uid=user["id"],
+                    org_memberships=organization,
+                )[0]
+            except IndexError:
+                pass
+            else:
+                author_email = user_model.email
+
+        try:
+            author = CommitAuthor.objects.get(
+                organization_id=organization.id, external_id=get_external_id(user["login"])
+            )
+        except CommitAuthor.DoesNotExist:
+            try:
+                author = CommitAuthor.objects.get(
+                    organization_id=organization.id, email=author_email
+                )
+            except CommitAuthor.DoesNotExist:
+                author = CommitAuthor.objects.create(
+                    organization_id=organization.id,
+                    email=author_email,
+                    external_id=get_external_id(user["login"]),
+                    name=user["login"][:128],
+                )
+
+        try:
+            PullRequest.objects.create_or_update(
+                repository_id=repo.id,
+                key=number,
+                values={
+                    "organization_id": organization.id,
+                    "title": title,
+                    "author": author,
+                    "message": body,
+                    "merge_commit_sha": merge_commit_sha,
+                },
+            )
+        except IntegrityError:
+            pass
+
+
+class GithubWebhookBase(View):
+    _handlers = {"push": PushEventWebhook, "pull_request": PullRequestEventWebhook}
+
+    # https://developer.github.com/webhooks/
+    def get_handler(self, event_type):
+        return self._handlers.get(event_type)
+
+    def is_valid_signature(self, method, body, secret, signature):
+        if method == "sha1":
+            mod = hashlib.sha1
+        else:
+            raise NotImplementedError("signature method %s is not supported" % (method,))
+        expected = hmac.new(key=secret.encode("utf-8"), msg=body, digestmod=mod).hexdigest()
+        return constant_time_compare(expected, signature)
+
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, *args, **kwargs):
+        if request.method != "POST":
+            return HttpResponse(status=405)
+
+        return super(GithubWebhookBase, self).dispatch(request, *args, **kwargs)
+
+    def get_logging_data(self, organization):
+        pass
+
+    def get_secret(self, organization):
+        raise NotImplementedError
+
+    def handle(self, request, organization=None):
+        secret = self.get_secret(organization)
+
+        if secret is None:
+            logger.error("github.webhook.missing-secret", extra=self.get_logging_data(organization))
+            return HttpResponse(status=401)
+
+        body = six.binary_type(request.body)
+        if not body:
+            logger.error("github.webhook.missing-body", extra=self.get_logging_data(organization))
+            return HttpResponse(status=400)
+
+        try:
+            handler = self.get_handler(request.META["HTTP_X_GITHUB_EVENT"])
+        except KeyError:
+            logger.error("github.webhook.missing-event", extra=self.get_logging_data(organization))
+            return HttpResponse(status=400)
+
+        if not handler:
+            return HttpResponse(status=204)
+
+        try:
+            method, signature = request.META["HTTP_X_HUB_SIGNATURE"].split("=", 1)
+        except (KeyError, IndexError):
+            logger.error(
+                "github.webhook.missing-signature", extra=self.get_logging_data(organization)
+            )
+            return HttpResponse(status=400)
+
+        if not self.is_valid_signature(method, body, self.get_secret(organization), signature):
+            logger.error(
+                "github.webhook.invalid-signature", extra=self.get_logging_data(organization)
+            )
+            return HttpResponse(status=401)
+
+        try:
+            event = json.loads(body.decode("utf-8"))
+        except JSONDecodeError:
+            logger.error(
+                "github.webhook.invalid-json",
+                extra=self.get_logging_data(organization),
+                exc_info=True,
+            )
+            return HttpResponse(status=400)
+
+        handler()(event, organization=organization)
+        return HttpResponse(status=204)
+
+
+# non-integration version
+class GithubWebhookEndpoint(GithubWebhookBase):
+    def get_logging_data(self, organization):
+        return {"organization_id": organization.id}
+
+    def get_secret(self, organization):
+        return OrganizationOption.objects.get_value(
+            organization=organization, key="github:webhook_secret"
+        )
+
+    def post(self, request, organization_id):
+        try:
+            organization = Organization.objects.get_from_cache(id=organization_id)
+        except Organization.DoesNotExist:
+            logger.error(
+                "github.webhook.invalid-organization", extra={"organization_id": organization_id}
+            )
+            return HttpResponse(status=400)
+
+        return self.handle(request, organization=organization)
+
+
+class GithubIntegrationsWebhookEndpoint(GithubWebhookBase):
+    _handlers = {
+        "push": PushEventWebhook,
+        "installation": InstallationEventWebhook,
+        "installation_repositories": InstallationRepositoryEventWebhook,
+    }
+
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, *args, **kwargs):
+        if request.method != "POST":
+            return HttpResponse(status=405)
+
+        return super(GithubIntegrationsWebhookEndpoint, self).dispatch(request, *args, **kwargs)
+
+    def get_secret(self, organization):
+        return options.get("github.integration-hook-secret")
+
+    def post(self, request):
+        return self.handle(request)
diff --git a/src/new_sentry_plugins/github/options.py b/src/new_sentry_plugins/github/options.py
new file mode 100644
index 0000000000..8ec7353e44
--- /dev/null
+++ b/src/new_sentry_plugins/github/options.py
@@ -0,0 +1,9 @@
+from __future__ import absolute_import
+
+from sentry.options import FLAG_PRIORITIZE_DISK, register
+
+
+register("github.integration-private-key", default="", flags=FLAG_PRIORITIZE_DISK)
+register("github.integration-hook-secret", default="", flags=FLAG_PRIORITIZE_DISK)
+register("github.integration-app-id", default=0, flags=FLAG_PRIORITIZE_DISK)
+register("github.apps-install-url", default="", flags=FLAG_PRIORITIZE_DISK)
diff --git a/src/new_sentry_plugins/github/plugin.py b/src/new_sentry_plugins/github/plugin.py
new file mode 100644
index 0000000000..5764cb1cf2
--- /dev/null
+++ b/src/new_sentry_plugins/github/plugin.py
@@ -0,0 +1,549 @@
+from __future__ import absolute_import
+
+import logging
+import six
+
+from rest_framework.response import Response
+from uuid import uuid4
+
+from social_auth.models import UserSocialAuth
+
+from sentry import options
+from sentry.app import locks
+from sentry.exceptions import PluginError
+from sentry.models import Integration, Organization, OrganizationOption, Repository
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry.plugins import providers
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.constants import ERR_UNAUTHORIZED, ERR_INTERNAL
+from new_sentry_plugins.exceptions import ApiError
+
+from .client import GitHubClient, GitHubAppsClient
+
+API_ERRORS = {
+    404: "GitHub returned a 404 Not Found error. If this repository exists, ensure"
+    " you have Admin or Owner permissions on the repository, and that Sentry is"
+    " an authorized OAuth app in your GitHub account settings (https://github.com/settings/applications).",
+    422: "GitHub returned a 422 Validation failed. This usually means that there is "
+    "already a webhook set up for Sentry for this repository. Please go to your "
+    "repository settings, click on the Webhooks tab, and delete the existing webhook "
+    "before adding the repository again.",
+    401: ERR_UNAUTHORIZED,
+}
+
+WEBHOOK_EVENTS = ["push", "pull_request"]
+
+
+class GitHubMixin(CorePluginMixin):
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiError):
+            message = API_ERRORS.get(exc.code)
+            if message:
+                return message
+            return "Error Communicating with GitHub (HTTP %s): %s" % (
+                exc.code,
+                exc.json.get("message", "unknown error") if exc.json else "unknown error",
+            )
+        else:
+            return ERR_INTERNAL
+
+    def get_client(self, user):
+        auth = self.get_auth(user=user)
+        if auth is None:
+            raise PluginError(API_ERRORS[401])
+        return GitHubClient(auth=auth)
+
+
+# TODO(dcramer): half of this plugin is for the issue tracking integration
+# (which is a singular entry) and the other half is generic GitHub. It'd be nice
+# if plugins were entirely generic, and simply registered the various hooks.
+class GitHubPlugin(GitHubMixin, IssuePlugin2):
+    description = "Integrate GitHub issues by linking a repository to a project."
+    slug = "github"
+    title = "GitHub"
+    conf_title = title
+    conf_key = "github"
+    auth_provider = "github"
+    logger = logging.getLogger("sentry.plugins.github")
+
+    def get_group_urls(self):
+        return super(GitHubPlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def get_url_module(self):
+        return "new_sentry_plugins.github.urls"
+
+    def is_configured(self, request, project, **kwargs):
+        return bool(self.get_option("repo", project))
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(GitHubPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        return (
+            [
+                {
+                    "name": "repo",
+                    "label": "GitHub Repository",
+                    "default": self.get_option("repo", group.project),
+                    "type": "text",
+                    "readonly": True,
+                }
+            ]
+            + fields
+            + [
+                {
+                    "name": "assignee",
+                    "label": "Assignee",
+                    "default": "",
+                    "type": "select",
+                    "required": False,
+                    "choices": self.get_allowed_assignees(request, group),
+                }
+            ]
+        )
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Issue",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+                "help": (
+                    "You can use any syntax supported by GitHub's "
+                    '<a href="https://help.github.com/articles/searching-issues/" '
+                    'target="_blank">issue search.</a>'
+                ),
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": u"Sentry issue: [{issue_id}]({url})".format(
+                    url=absolute_uri(group.get_absolute_url(params={"referrer": "github_plugin"})),
+                    issue_id=group.qualified_short_id,
+                ),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the GitHub issue."),
+                "required": False,
+            },
+        ]
+
+    def get_allowed_assignees(self, request, group):
+        client = self.get_client(request.user)
+        try:
+            response = client.list_assignees(repo=self.get_option("repo", group.project))
+        except Exception as e:
+            self.raise_error(e)
+
+        users = tuple((u["login"], u["login"]) for u in response)
+
+        return (("", "Unassigned"),) + users
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        # TODO: support multiple identities via a selection input in the form?
+        client = self.get_client(request.user)
+
+        try:
+            response = client.create_issue(
+                repo=self.get_option("repo", group.project),
+                data={
+                    "title": form_data["title"],
+                    "body": form_data["description"],
+                    "assignee": form_data.get("assignee"),
+                },
+            )
+        except Exception as e:
+            self.raise_error(e)
+
+        return response["number"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+        repo = self.get_option("repo", group.project)
+        try:
+            issue = client.get_issue(repo=repo, issue_id=form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_comment(repo=repo, issue_id=issue["number"], data={"body": comment})
+            except Exception as e:
+                self.raise_error(e)
+
+        return {"title": issue["title"]}
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "GH-%s" % issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        # XXX: get_option may need tweaked in Sentry so that it can be pre-fetched in bulk
+        repo = self.get_option("repo", group.project)
+
+        return "https://github.com/%s/issues/%s" % (repo, issue_id)
+
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+        if field != "issue_id" or not query:
+            return Response({"issue_id": []})
+
+        repo = self.get_option("repo", group.project)
+        client = self.get_client(request.user)
+
+        try:
+            response = client.search_issues(query=(u"repo:%s %s" % (repo, query)).encode("utf-8"))
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        issues = [
+            {"text": "(#%s) %s" % (i["number"], i["title"]), "id": i["number"]}
+            for i in response.get("items", [])
+        ]
+
+        return Response({field: issues})
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        return [
+            {
+                "name": "repo",
+                "label": "Repository Name",
+                "default": self.get_option("repo", project),
+                "type": "text",
+                "placeholder": "e.g. getsentry/sentry",
+                "help": (
+                    "Enter your repository name, including the owner. "
+                    "<p><b>Looking to integrate commit data with releases?</b> You'll need to configure this through our"
+                    '<a href="/organizations/{}/repos/" '
+                    "> repos page</a>.</p>"
+                ).format(project.organization.slug),
+                "required": True,
+            }
+        ]
+
+    def has_apps_configured(self):
+        return bool(
+            options.get("github.apps-install-url")
+            and options.get("github.integration-app-id")
+            and options.get("github.integration-hook-secret")
+            and options.get("github.integration-private-key")
+        )
+
+    def setup(self, bindings):
+        bindings.add("repository.provider", GitHubRepositoryProvider, id="github")
+        if self.has_apps_configured():
+            bindings.add("repository.provider", GitHubAppsRepositoryProvider, id="github_apps")
+        else:
+            self.logger.info("apps-not-configured")
+
+
+class GitHubRepositoryProvider(GitHubMixin, providers.RepositoryProvider):
+    name = "GitHub"
+    auth_provider = "github"
+    logger = logging.getLogger("sentry.plugins.github")
+
+    def get_config(self):
+        return [
+            {
+                "name": "name",
+                "label": "Repository Name",
+                "type": "text",
+                "placeholder": "e.g. getsentry/sentry",
+                "help": "Enter your repository name, including the owner.",
+                "required": True,
+            }
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        if config.get("name"):
+            client = self.get_client(actor)
+            try:
+                repo = client.get_repo(config["name"])
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                config["external_id"] = six.text_type(repo["id"])
+        return config
+
+    def get_webhook_secret(self, organization):
+        lock = locks.get("github:webhook-secret:{}".format(organization.id), duration=60)
+        with lock.acquire():
+            # TODO(dcramer): get_or_create would be a useful native solution
+            secret = OrganizationOption.objects.get_value(
+                organization=organization, key="github:webhook_secret"
+            )
+            if secret is None:
+                secret = uuid4().hex + uuid4().hex
+                OrganizationOption.objects.set_value(
+                    organization=organization, key="github:webhook_secret", value=secret
+                )
+        return secret
+
+    def _build_webhook_config(self, organization):
+        return {
+            "name": "web",
+            "active": True,
+            "events": WEBHOOK_EVENTS,
+            "config": {
+                "url": absolute_uri(
+                    "/plugins/github/organizations/{}/webhook/".format(organization.id)
+                ),
+                "content_type": "json",
+                "secret": self.get_webhook_secret(organization),
+            },
+        }
+
+    def _create_webhook(self, client, organization, repo_name):
+        return client.create_hook(repo_name, self._build_webhook_config(organization))
+
+    def _update_webhook(self, client, organization, repo_name, webhook_id):
+        return client.update_hook(repo_name, webhook_id, self._build_webhook_config(organization))
+
+    def create_repository(self, organization, data, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot create a repository anonymously")
+
+        client = self.get_client(actor)
+
+        try:
+            resp = self._create_webhook(client, organization, data["name"])
+        except Exception as e:
+            self.logger.exception(
+                "github.webhook.create-failure",
+                extra={
+                    "organization_id": organization.id,
+                    "repository": data["name"],
+                    "status_code": getattr(e, "code", None),
+                },
+            )
+
+            self.raise_error(e)
+        else:
+            return {
+                "name": data["name"],
+                "external_id": data["external_id"],
+                "url": "https://github.com/{}".format(data["name"]),
+                "config": {
+                    "name": data["name"],
+                    "webhook_id": resp["id"],
+                    "webhook_events": resp["events"],
+                },
+            }
+
+    # TODO(dcramer): let's make this core functionality and move the actual database
+    # updates into Sentry core
+    def update_repository(self, repo, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot update a repository anonymously")
+
+        client = self.get_client(actor)
+        org = Organization.objects.get(id=repo.organization_id)
+        webhook_id = repo.config.get("webhook_id")
+        if not webhook_id:
+            resp = self._create_webhook(client, org, repo.config["name"])
+        else:
+            resp = self._update_webhook(client, org, repo.config["name"], repo.config["webhook_id"])
+        repo.config.update({"webhook_id": resp["id"], "webhook_events": resp["events"]})
+        repo.update(config=repo.config)
+
+    def delete_repository(self, repo, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot delete a repository anonymously")
+
+        if "webhook_id" in repo.config:
+            client = self.get_client(actor)
+            try:
+                client.delete_hook(repo.config["name"], repo.config["webhook_id"])
+            except ApiError as exc:
+                if exc.code == 404:
+                    return
+                raise
+
+    def _format_commits(self, repo, commit_list):
+        return [
+            {
+                "id": c["sha"],
+                "repository": repo.name,
+                "author_email": c["commit"]["author"].get("email"),
+                "author_name": c["commit"]["author"].get("name"),
+                "message": c["commit"]["message"],
+            }
+            for c in commit_list
+        ]
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot fetch commits anonymously")
+        client = self.get_client(actor)
+
+        # use config name because that is kept in sync via webhooks
+        name = repo.config["name"]
+        if start_sha is None:
+            try:
+                res = client.get_last_commits(name, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res[:10])
+        else:
+            try:
+                res = client.compare_commits(name, start_sha, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res["commits"])
+
+        def get_pr_commits(self, repo, number, actor=None):
+            # (not currently used by sentry)
+            if actor is None:
+                raise NotImplementedError("Cannot fetch commits anonymously")
+            client = self.get_client(actor)
+
+            # use config name because that is kept in sync via webhooks
+            name = repo.config["name"]
+            try:
+                res = client.get_pr_commits(name, number)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res)
+
+
+class GitHubAppsRepositoryProvider(GitHubRepositoryProvider):
+    name = "GitHub Apps"
+    auth_provider = "github_apps"
+    logger = logging.getLogger("sentry.plugins.github_apps")
+
+    def get_install_url(self):
+        return options.get("github.apps-install-url")
+
+    def get_available_auths(self, user, organization, integrations, social_auths, **kwargs):
+        allowed_gh_installations = set(self.get_installations(user))
+
+        linked_integrations = {i.id for i in integrations}
+
+        _integrations = list(Integration.objects.filter(external_id__in=allowed_gh_installations))
+
+        # add in integrations that might have been set up for org
+        # by users w diff permissions
+        _integrations.extend(
+            [i for i in integrations if i.external_id not in allowed_gh_installations]
+        )
+
+        return [
+            {
+                "defaultAuthId": None,
+                "user": None,
+                "externalId": i.external_id,
+                "integrationId": six.text_type(i.id),
+                "linked": i.id in linked_integrations,
+            }
+            for i in _integrations
+        ]
+
+    def link_auth(self, user, organization, data):
+        integration_id = data["integration_id"]
+
+        try:
+            integration = Integration.objects.get(provider=self.auth_provider, id=integration_id)
+        except Integration.DoesNotExist:
+            raise PluginError("Invalid integration id")
+
+        # check that user actually has access to add
+        allowed_gh_installations = set(self.get_installations(user))
+        if int(integration.external_id) not in allowed_gh_installations:
+            raise PluginError("You do not have access to that integration")
+
+        integration.add_organization(organization)
+
+        for repo in self.get_repositories(integration):
+            # TODO(jess): figure out way to migrate from github --> github apps
+            Repository.objects.create_or_update(
+                organization_id=organization.id,
+                name=repo["name"],
+                external_id=repo["external_id"],
+                provider="github_apps",
+                values={
+                    "integration_id": integration.id,
+                    "url": repo["url"],
+                    "config": repo["config"],
+                },
+            )
+
+    def delete_repository(self, repo, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot delete a repository anonymously")
+
+        # there isn't a webhook to delete for integrations
+        if not repo.config.get("webhook_id") and repo.integration_id is not None:
+            return
+
+        return super(GitHubAppsRepositoryProvider, self).delete_repository(repo, actor=actor)
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        integration_id = repo.integration_id
+        if integration_id is None:
+            raise NotImplementedError("GitHub apps requires an integration id to fetch commits")
+
+        client = GitHubAppsClient(Integration.objects.get(id=integration_id))
+
+        # use config name because that is kept in sync via webhooks
+        name = repo.config["name"]
+        if start_sha is None:
+            try:
+                res = client.get_last_commits(name, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res[:10])
+        else:
+            try:
+                res = client.compare_commits(name, start_sha, end_sha)
+            except Exception as e:
+                self.raise_error(e)
+            else:
+                return self._format_commits(repo, res["commits"])
+
+    def get_installations(self, actor):
+        if not actor.is_authenticated():
+            raise PluginError(API_ERRORS[401])
+
+        auth = UserSocialAuth.objects.filter(user=actor, provider="github_apps").first()
+
+        if not auth:
+            self.logger.warn("get_installations.no-linked-auth")
+            return []
+
+        client = GitHubClient(auth=auth)
+
+        res = client.get_installations()
+
+        return [install["id"] for install in res["installations"]]
+
+    def get_repositories(self, integration):
+        client = GitHubAppsClient(integration)
+
+        res = client.get_repositories()
+        return [
+            {
+                "name": "%s/%s" % (r["owner"]["login"], r["name"]),
+                "external_id": r["id"],
+                "url": r["html_url"],
+                "config": {"name": "%s/%s" % (r["owner"]["login"], r["name"])},
+            }
+            for r in res["repositories"]
+        ]
diff --git a/src/new_sentry_plugins/github/testutils.py b/src/new_sentry_plugins/github/testutils.py
new file mode 100644
index 0000000000..47bea4272c
--- /dev/null
+++ b/src/new_sentry_plugins/github/testutils.py
@@ -0,0 +1,2307 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+# we keep this as a raw string as order matters for hmac signing
+PUSH_EVENT_EXAMPLE = r"""{
+  "ref": "refs/heads/changes",
+  "before": "9049f1265b7d61be4a8904a9a27120d2064dab3b",
+  "after": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+  "created": false,
+  "deleted": false,
+  "forced": false,
+  "base_ref": null,
+  "compare": "https://github.com/baxterthehacker/public-repo/compare/9049f1265b7d...0d1a26e67d8f",
+  "commits": [
+    {
+      "id": "133d60480286590a610a0eb7352ff6e02b9674c4",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "Update README.md (àgain)",
+      "timestamp": "2015-05-05T19:45:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/133d60480286590a610a0eb7352ff6e02b9674c4",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    },
+    {
+      "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "Update README.md",
+      "timestamp": "2015-05-05T19:40:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    },
+    {
+      "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "fix widget #skipsentry",
+      "timestamp": "2015-05-05T19:40:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    }
+  ],
+  "head_commit": {
+    "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+    "distinct": true,
+    "message": "Update README.md",
+    "timestamp": "2015-05-05T19:40:15-04:00",
+    "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "author": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com",
+      "username": "baxterthehacker"
+    },
+    "committer": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com",
+      "username": "baxterthehacker"
+    },
+    "added": [
+
+    ],
+    "removed": [
+
+    ],
+    "modified": [
+      "README.md"
+    ]
+  },
+  "repository": {
+    "id": 35129377,
+    "name": "public-repo",
+    "full_name": "baxterthehacker/public-repo",
+    "owner": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com"
+    },
+    "private": false,
+    "html_url": "https://github.com/baxterthehacker/public-repo",
+    "description": "",
+    "fork": false,
+    "url": "https://github.com/baxterthehacker/public-repo",
+    "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+    "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+    "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+    "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+    "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+    "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+    "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+    "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+    "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+    "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+    "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+    "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+    "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+    "created_at": 1430869212,
+    "updated_at": "2015-05-05T23:40:12Z",
+    "pushed_at": 1430869217,
+    "git_url": "git://github.com/baxterthehacker/public-repo.git",
+    "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+    "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+    "svn_url": "https://github.com/baxterthehacker/public-repo",
+    "homepage": null,
+    "size": 0,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": null,
+    "has_issues": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": true,
+    "forks_count": 0,
+    "mirror_url": null,
+    "open_issues_count": 0,
+    "forks": 0,
+    "open_issues": 0,
+    "watchers": 0,
+    "default_branch": "master",
+    "stargazers": 0,
+    "master_branch": "master"
+  },
+  "pusher": {
+    "name": "baxterthehacker",
+    "email": "baxterthehacker@users.noreply.github.com"
+  },
+  "sender": {
+    "login": "baxterthehacker",
+    "id": 6752317,
+    "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/baxterthehacker",
+    "html_url": "https://github.com/baxterthehacker",
+    "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+    "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+    "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+    "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+    "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+    "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+    "type": "User",
+    "site_admin": false
+  }
+}"""
+
+PUSH_EVENT_EXAMPLE_INSTALLATION = r"""{
+  "ref": "refs/heads/changes",
+  "installation" : {
+    "id": 12345
+  },
+  "before": "9049f1265b7d61be4a8904a9a27120d2064dab3b",
+  "after": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+  "created": false,
+  "deleted": false,
+  "forced": false,
+  "base_ref": null,
+  "compare": "https://github.com/baxterthehacker/public-repo/compare/9049f1265b7d...0d1a26e67d8f",
+  "commits": [
+    {
+      "id": "133d60480286590a610a0eb7352ff6e02b9674c4",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "Update README.md (àgain)",
+      "timestamp": "2015-05-05T19:45:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/133d60480286590a610a0eb7352ff6e02b9674c4",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    },
+    {
+      "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "Update README.md",
+      "timestamp": "2015-05-05T19:40:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    },
+    {
+      "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+      "distinct": true,
+      "message": "fix widget #skipsentry",
+      "timestamp": "2015-05-05T19:40:15-04:00",
+      "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "author": {
+        "name": "bàxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "committer": {
+        "name": "baxterthehacker",
+        "email": "baxterthehacker@users.noreply.github.com",
+        "username": "baxterthehacker"
+      },
+      "added": [
+
+      ],
+      "removed": [
+
+      ],
+      "modified": [
+        "README.md"
+      ]
+    }
+  ],
+  "head_commit": {
+    "id": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "tree_id": "f9d2a07e9488b91af2641b26b9407fe22a451433",
+    "distinct": true,
+    "message": "Update README.md",
+    "timestamp": "2015-05-05T19:40:15-04:00",
+    "url": "https://github.com/baxterthehacker/public-repo/commit/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "author": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com",
+      "username": "baxterthehacker"
+    },
+    "committer": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com",
+      "username": "baxterthehacker"
+    },
+    "added": [
+
+    ],
+    "removed": [
+
+    ],
+    "modified": [
+      "README.md"
+    ]
+  },
+  "repository": {
+    "id": 35129377,
+    "name": "public-repo",
+    "full_name": "baxterthehacker/public-repo",
+    "owner": {
+      "name": "baxterthehacker",
+      "email": "baxterthehacker@users.noreply.github.com"
+    },
+    "private": false,
+    "html_url": "https://github.com/baxterthehacker/public-repo",
+    "description": "",
+    "fork": false,
+    "url": "https://github.com/baxterthehacker/public-repo",
+    "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+    "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+    "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+    "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+    "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+    "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+    "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+    "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+    "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+    "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+    "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+    "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+    "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+    "created_at": 1430869212,
+    "updated_at": "2015-05-05T23:40:12Z",
+    "pushed_at": 1430869217,
+    "git_url": "git://github.com/baxterthehacker/public-repo.git",
+    "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+    "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+    "svn_url": "https://github.com/baxterthehacker/public-repo",
+    "homepage": null,
+    "size": 0,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": null,
+    "has_issues": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": true,
+    "forks_count": 0,
+    "mirror_url": null,
+    "open_issues_count": 0,
+    "forks": 0,
+    "open_issues": 0,
+    "watchers": 0,
+    "default_branch": "master",
+    "stargazers": 0,
+    "master_branch": "master"
+  },
+  "pusher": {
+    "name": "baxterthehacker",
+    "email": "baxterthehacker@users.noreply.github.com"
+  },
+  "sender": {
+    "login": "baxterthehacker",
+    "id": 6752317,
+    "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/baxterthehacker",
+    "html_url": "https://github.com/baxterthehacker",
+    "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+    "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+    "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+    "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+    "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+    "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+    "type": "User",
+    "site_admin": false
+  }
+}"""
+
+COMPARE_COMMITS_EXAMPLE = """{
+  "url": "https://api.github.com/repos/octocat/Hello-World/compare/master...topic",
+  "html_url": "https://github.com/octocat/Hello-World/compare/master...topic",
+  "permalink_url": "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17",
+  "diff_url": "https://github.com/octocat/Hello-World/compare/master...topic.diff",
+  "patch_url": "https://github.com/octocat/Hello-World/compare/master...topic.patch",
+  "base_commit": {
+    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
+    "commit": {
+      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "author": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "committer": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "message": "Fix all the bugs",
+      "tree": {
+        "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      },
+      "comment_count": 0,
+      "verification": {
+        "verified": true,
+        "reason": "valid",
+        "signature": "-----BEGIN PGP MESSAGE----------END PGP MESSAGE-----",
+        "payload": "tree 6dcb09b5b57875f334f61aebed695e2e4193db5e..."
+      }
+    },
+    "author": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "committer": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "parents": [
+      {
+        "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      }
+    ]
+  },
+  "merge_base_commit": {
+    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
+    "commit": {
+      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "author": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "committer": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "message": "Fix all the bugs",
+      "tree": {
+        "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      },
+      "comment_count": 0,
+      "verification": {
+        "verified": true,
+        "reason": "valid",
+        "signature": "-----BEGIN PGP MESSAGE----------END PGP MESSAGE-----",
+        "payload": "tree 6dcb09b5b57875f334f61aebed695e2e4193db5e..."
+      }
+    },
+    "author": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "committer": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "parents": [
+      {
+        "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      }
+    ]
+  },
+  "status": "behind",
+  "ahead_by": 1,
+  "behind_by": 2,
+  "total_commits": 1,
+  "commits": [
+    {
+      "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
+      "commit": {
+        "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "author": {
+          "name": "Monalisa Octocat",
+          "email": "support@github.com",
+          "date": "2011-04-14T16:00:49Z"
+        },
+        "committer": {
+          "name": "Monalisa Octocat",
+          "email": "support@github.com",
+          "date": "2011-04-14T16:00:49Z"
+        },
+        "message": "Fix all the bugs",
+        "tree": {
+          "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+        },
+        "comment_count": 0,
+        "verification": {
+          "verified": true,
+          "reason": "valid",
+          "signature": "-----BEGIN PGP MESSAGE----------END PGP MESSAGE-----",
+          "payload": "tree 6dcb09b5b57875f334f61aebed695e2e4193db5e..."
+        }
+      },
+      "author": {
+        "login": "octocat",
+        "id": 1,
+        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/octocat",
+        "html_url": "https://github.com/octocat",
+        "followers_url": "https://api.github.com/users/octocat/followers",
+        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+        "organizations_url": "https://api.github.com/users/octocat/orgs",
+        "repos_url": "https://api.github.com/users/octocat/repos",
+        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/octocat/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "committer": {
+        "login": "octocat",
+        "id": 1,
+        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/octocat",
+        "html_url": "https://github.com/octocat",
+        "followers_url": "https://api.github.com/users/octocat/followers",
+        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+        "organizations_url": "https://api.github.com/users/octocat/orgs",
+        "repos_url": "https://api.github.com/users/octocat/repos",
+        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/octocat/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "parents": [
+        {
+          "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+          "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+        }
+      ]
+    }
+  ],
+  "files": [
+    {
+      "sha": "bbcd538c8e72b8c175046e27cc8f907076331401",
+      "filename": "file1.txt",
+      "status": "added",
+      "additions": 103,
+      "deletions": 21,
+      "changes": 124,
+      "blob_url": "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
+      "raw_url": "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt",
+      "contents_url": "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "patch": "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
+    }
+  ]
+}"""
+
+GET_LAST_COMMITS_EXAMPLE = """[
+  {
+    "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "html_url": "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+    "comments_url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments",
+    "commit": {
+      "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+      "author": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "committer": {
+        "name": "Monalisa Octocat",
+        "email": "support@github.com",
+        "date": "2011-04-14T16:00:49Z"
+      },
+      "message": "Fix all the bugs",
+      "tree": {
+        "url": "https://api.github.com/repos/octocat/Hello-World/tree/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      },
+      "comment_count": 0,
+      "verification": {
+        "verified": true,
+        "reason": "valid",
+        "signature": "-----BEGIN PGP MESSAGE----------END PGP MESSAGE-----",
+        "payload": "tree 6dcb09b5b57875f334f61aebed695e2e4193db5e..."
+      }
+    },
+    "author": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "committer": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "parents": [
+      {
+        "url": "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e",
+        "sha": "6dcb09b5b57875f334f61aebed695e2e4193db5e"
+      }
+    ]
+  }
+]"""
+
+INSTALLATION_EVENT_EXAMPLE = """{
+  "action": "created",
+  "installation": {
+    "id": 2,
+    "account": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "access_tokens_url": "https://api.github.com/installations/2/access_tokens",
+    "repositories_url": "https://api.github.com/installation/repositories"
+  },
+  "sender": {
+    "login": "octocat",
+    "id": 1,
+    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/octocat",
+    "html_url": "https://github.com/octocat",
+    "followers_url": "https://api.github.com/users/octocat/followers",
+    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+    "organizations_url": "https://api.github.com/users/octocat/orgs",
+    "repos_url": "https://api.github.com/users/octocat/repos",
+    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/octocat/received_events",
+    "type": "User",
+    "site_admin": false
+  }
+}"""
+
+INSTALLATION_REPO_EVENT = """{
+  "action": "added",
+  "installation": {
+    "id": 2,
+    "account": {
+      "login": "octocat",
+      "id": 1,
+      "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/octocat",
+      "html_url": "https://github.com/octocat",
+      "followers_url": "https://api.github.com/users/octocat/followers",
+      "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+      "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+      "organizations_url": "https://api.github.com/users/octocat/orgs",
+      "repos_url": "https://api.github.com/users/octocat/repos",
+      "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/octocat/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "access_tokens_url": "https://api.github.com/installations/2/access_tokens",
+    "repositories_url": "https://api.github.com/installation/repositories",
+    "html_url": "https://github.com/settings/installations/2"
+  },
+  "repository_selection": "selected",
+  "repositories_added": [
+    {
+      "id": 1296269,
+      "name": "Hello-World",
+      "full_name": "octocat/Hello-World"
+    }
+  ],
+  "repositories_removed": [
+
+  ],
+  "sender": {
+    "login": "octocat",
+    "id": 1,
+    "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/octocat",
+    "html_url": "https://github.com/octocat",
+    "followers_url": "https://api.github.com/users/octocat/followers",
+    "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+    "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+    "organizations_url": "https://api.github.com/users/octocat/orgs",
+    "repos_url": "https://api.github.com/users/octocat/repos",
+    "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/octocat/received_events",
+    "type": "User",
+    "site_admin": false
+  }
+}"""
+
+INTSTALLATION_REPOSITORIES_API_RESPONSE = """{
+  "total_count": 1,
+  "repositories": [
+    {
+      "id": 1296269,
+      "owner": {
+        "login": "octocat",
+        "id": 1,
+        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/octocat",
+        "html_url": "https://github.com/octocat",
+        "followers_url": "https://api.github.com/users/octocat/followers",
+        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+        "organizations_url": "https://api.github.com/users/octocat/orgs",
+        "repos_url": "https://api.github.com/users/octocat/repos",
+        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/octocat/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "name": "Hello-World",
+      "full_name": "octocat/Hello-World",
+      "description": "This your first repo!",
+      "private": false,
+      "fork": false,
+      "url": "https://api.github.com/repos/octocat/Hello-World",
+      "html_url": "https://github.com/octocat/Hello-World",
+      "archive_url": "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}",
+      "assignees_url": "http://api.github.com/repos/octocat/Hello-World/assignees{/user}",
+      "blobs_url": "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}",
+      "branches_url": "http://api.github.com/repos/octocat/Hello-World/branches{/branch}",
+      "clone_url": "https://github.com/octocat/Hello-World.git",
+      "collaborators_url": "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}",
+      "comments_url": "http://api.github.com/repos/octocat/Hello-World/comments{/number}",
+      "commits_url": "http://api.github.com/repos/octocat/Hello-World/commits{/sha}",
+      "compare_url": "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}",
+      "contents_url": "http://api.github.com/repos/octocat/Hello-World/contents/{+path}",
+      "contributors_url": "http://api.github.com/repos/octocat/Hello-World/contributors",
+      "deployments_url": "http://api.github.com/repos/octocat/Hello-World/deployments",
+      "downloads_url": "http://api.github.com/repos/octocat/Hello-World/downloads",
+      "events_url": "http://api.github.com/repos/octocat/Hello-World/events",
+      "forks_url": "http://api.github.com/repos/octocat/Hello-World/forks",
+      "git_commits_url": "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}",
+      "git_refs_url": "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}",
+      "git_tags_url": "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}",
+      "git_url": "git:github.com/octocat/Hello-World.git",
+      "hooks_url": "http://api.github.com/repos/octocat/Hello-World/hooks",
+      "issue_comment_url": "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}",
+      "issue_events_url": "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}",
+      "issues_url": "http://api.github.com/repos/octocat/Hello-World/issues{/number}",
+      "keys_url": "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}",
+      "labels_url": "http://api.github.com/repos/octocat/Hello-World/labels{/name}",
+      "languages_url": "http://api.github.com/repos/octocat/Hello-World/languages",
+      "merges_url": "http://api.github.com/repos/octocat/Hello-World/merges",
+      "milestones_url": "http://api.github.com/repos/octocat/Hello-World/milestones{/number}",
+      "mirror_url": "git:git.example.com/octocat/Hello-World",
+      "notifications_url": "http://api.github.com/repos/octocat/Hello-World/notifications{?since, all, participating}",
+      "pulls_url": "http://api.github.com/repos/octocat/Hello-World/pulls{/number}",
+      "releases_url": "http://api.github.com/repos/octocat/Hello-World/releases{/id}",
+      "ssh_url": "git@github.com:octocat/Hello-World.git",
+      "stargazers_url": "http://api.github.com/repos/octocat/Hello-World/stargazers",
+      "statuses_url": "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}",
+      "subscribers_url": "http://api.github.com/repos/octocat/Hello-World/subscribers",
+      "subscription_url": "http://api.github.com/repos/octocat/Hello-World/subscription",
+      "svn_url": "https://svn.github.com/octocat/Hello-World",
+      "tags_url": "http://api.github.com/repos/octocat/Hello-World/tags",
+      "teams_url": "http://api.github.com/repos/octocat/Hello-World/teams",
+      "trees_url": "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}",
+      "homepage": "https://github.com",
+      "language": null,
+      "forks_count": 9,
+      "stargazers_count": 80,
+      "watchers_count": 80,
+      "size": 108,
+      "default_branch": "master",
+      "open_issues_count": 0,
+      "topics": [
+        "octocat",
+        "atom",
+        "electron",
+        "API"
+      ],
+      "has_issues": true,
+      "has_wiki": true,
+      "has_pages": false,
+      "has_downloads": true,
+      "pushed_at": "2011-01-26T19:06:43Z",
+      "created_at": "2011-01-26T19:01:12Z",
+      "updated_at": "2011-01-26T19:14:43Z",
+      "allow_rebase_merge": true,
+      "allow_squash_merge": true,
+      "allow_merge_commit": true,
+      "subscribers_count": 42,
+      "network_count": 0
+    }
+  ]
+}"""
+
+LIST_INSTALLATION_API_RESPONSE = """{
+  "total_count": 2,
+  "installations": [
+    {
+      "id": 1,
+      "account": {
+        "login": "github",
+        "id": 1,
+        "url": "https://api.github.com/orgs/github",
+        "repos_url": "https://api.github.com/orgs/github/repos",
+        "events_url": "https://api.github.com/orgs/github/events",
+        "hooks_url": "https://api.github.com/orgs/github/hooks",
+        "issues_url": "https://api.github.com/orgs/github/issues",
+        "members_url": "https://api.github.com/orgs/github/members{/member}",
+        "public_members_url": "https://api.github.com/orgs/github/public_members{/member}",
+        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+        "description": "A great organization"
+      },
+      "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
+      "repositories_url": "https://api.github.com/installation/repositories",
+      "html_url": "https://github.com/organizations/github/settings/installations/1",
+      "app_id": 1,
+      "target_id": 1,
+      "target_type": "Organization",
+      "permissions": {
+        "metadata": "read",
+        "contents": "read",
+        "issues": "write",
+        "single_file": "write"
+      },
+      "events": [
+        "push",
+        "pull_request"
+      ],
+      "single_file_name": "config.yml"
+    },
+    {
+      "id": 3,
+      "account": {
+        "login": "octocat",
+        "id": 2,
+        "avatar_url": "https://github.com/images/error/octocat_happy.gif",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/octocat",
+        "html_url": "https://github.com/octocat",
+        "followers_url": "https://api.github.com/users/octocat/followers",
+        "following_url": "https://api.github.com/users/octocat/following{/other_user}",
+        "gists_url": "https://api.github.com/users/octocat/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/octocat/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/octocat/subscriptions",
+        "organizations_url": "https://api.github.com/users/octocat/orgs",
+        "repos_url": "https://api.github.com/users/octocat/repos",
+        "events_url": "https://api.github.com/users/octocat/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/octocat/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "access_tokens_url": "https://api.github.com/installations/1/access_tokens",
+      "repositories_url": "https://api.github.com/installation/repositories",
+      "html_url": "https://github.com/organizations/github/settings/installations/1",
+      "app_id": 1,
+      "target_id": 1,
+      "target_type": "Organization",
+      "permissions": {
+        "metadata": "read",
+        "contents": "read",
+        "issues": "write",
+        "single_file": "write"
+      },
+      "events": [
+        "push",
+        "pull_request"
+      ],
+      "single_file_name": "config.yml"
+    }
+  ]
+}"""
+
+PULL_REQUEST_OPENED_EVENT_EXAMPLE = r"""{
+  "action": "opened",
+  "number": 1,
+  "pull_request": {
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1",
+    "id": 34778301,
+    "html_url": "https://github.com/baxterthehacker/public-repo/pull/1",
+    "diff_url": "https://github.com/baxterthehacker/public-repo/pull/1.diff",
+    "patch_url": "https://github.com/baxterthehacker/public-repo/pull/1.patch",
+    "issue_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1",
+    "number": 1,
+    "state": "open",
+    "locked": false,
+    "title": "Update the README with new information",
+    "user": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "body": "This is a pretty simple change that we need to pull into master.",
+    "created_at": "2015-05-05T23:40:27Z",
+    "updated_at": "2015-05-05T23:40:27Z",
+    "closed_at": null,
+    "merged_at": null,
+    "merge_commit_sha": null,
+    "assignee": null,
+    "milestone": null,
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits",
+    "review_comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments",
+    "review_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "head": {
+      "label": "baxterthehacker:changes",
+      "ref": "changes",
+      "sha": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "base": {
+      "label": "baxterthehacker:master",
+      "ref": "master",
+      "sha": "9049f1265b7d61be4a8904a9a27120d2064dab3b",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "_links": {
+      "self": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1"
+      },
+      "html": {
+        "href": "https://github.com/baxterthehacker/public-repo/pull/1"
+      },
+      "issue": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1"
+      },
+      "comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments"
+      },
+      "review_comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments"
+      },
+      "review_comment": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}"
+      },
+      "commits": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits"
+      },
+      "statuses": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+      }
+    },
+    "merged": false,
+    "mergeable": null,
+    "mergeable_state": "unknown",
+    "merged_by": null,
+    "comments": 0,
+    "review_comments": 0,
+    "commits": 1,
+    "additions": 1,
+    "deletions": 1,
+    "changed_files": 1
+  },
+  "repository": {
+    "id": 35129377,
+    "name": "public-repo",
+    "full_name": "baxterthehacker/public-repo",
+    "owner": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "private": false,
+    "html_url": "https://github.com/baxterthehacker/public-repo",
+    "description": "",
+    "fork": false,
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+    "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+    "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+    "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+    "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+    "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+    "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+    "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+    "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+    "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+    "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+    "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+    "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+    "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+    "created_at": "2015-05-05T23:40:12Z",
+    "updated_at": "2015-05-05T23:40:12Z",
+    "pushed_at": "2015-05-05T23:40:26Z",
+    "git_url": "git://github.com/baxterthehacker/public-repo.git",
+    "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+    "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+    "svn_url": "https://github.com/baxterthehacker/public-repo",
+    "homepage": null,
+    "size": 0,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": null,
+    "has_issues": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": true,
+    "forks_count": 0,
+    "mirror_url": null,
+    "open_issues_count": 1,
+    "forks": 0,
+    "open_issues": 1,
+    "watchers": 0,
+    "default_branch": "master"
+  },
+  "sender": {
+    "login": "baxterthehacker",
+    "id": 6752317,
+    "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/baxterthehacker",
+    "html_url": "https://github.com/baxterthehacker",
+    "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+    "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+    "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+    "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+    "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+    "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+    "type": "User",
+    "site_admin": false
+  },
+  "installation": {
+    "id": 234
+  }
+}"""
+
+PULL_REQUEST_EDITED_EVENT_EXAMPLE = r"""{
+  "action": "edited",
+  "number": 1,
+  "pull_request": {
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1",
+    "id": 34778301,
+    "html_url": "https://github.com/baxterthehacker/public-repo/pull/1",
+    "diff_url": "https://github.com/baxterthehacker/public-repo/pull/1.diff",
+    "patch_url": "https://github.com/baxterthehacker/public-repo/pull/1.patch",
+    "issue_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1",
+    "number": 1,
+    "state": "open",
+    "locked": false,
+    "title": "new edited title",
+    "user": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "body": "new edited body",
+    "created_at": "2015-05-05T23:40:27Z",
+    "updated_at": "2015-05-05T23:40:27Z",
+    "closed_at": null,
+    "merged_at": null,
+    "merge_commit_sha": null,
+    "assignee": null,
+    "milestone": null,
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits",
+    "review_comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments",
+    "review_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "head": {
+      "label": "baxterthehacker:changes",
+      "ref": "changes",
+      "sha": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "base": {
+      "label": "baxterthehacker:master",
+      "ref": "master",
+      "sha": "9049f1265b7d61be4a8904a9a27120d2064dab3b",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "_links": {
+      "self": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1"
+      },
+      "html": {
+        "href": "https://github.com/baxterthehacker/public-repo/pull/1"
+      },
+      "issue": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1"
+      },
+      "comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments"
+      },
+      "review_comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments"
+      },
+      "review_comment": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}"
+      },
+      "commits": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits"
+      },
+      "statuses": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+      }
+    },
+    "merged": false,
+    "mergeable": null,
+    "mergeable_state": "unknown",
+    "merged_by": null,
+    "comments": 0,
+    "review_comments": 0,
+    "commits": 1,
+    "additions": 1,
+    "deletions": 1,
+    "changed_files": 1
+  },
+  "repository": {
+    "id": 35129377,
+    "name": "public-repo",
+    "full_name": "baxterthehacker/public-repo",
+    "owner": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "private": false,
+    "html_url": "https://github.com/baxterthehacker/public-repo",
+    "description": "",
+    "fork": false,
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+    "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+    "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+    "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+    "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+    "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+    "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+    "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+    "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+    "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+    "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+    "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+    "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+    "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+    "created_at": "2015-05-05T23:40:12Z",
+    "updated_at": "2015-05-05T23:40:12Z",
+    "pushed_at": "2015-05-05T23:40:26Z",
+    "git_url": "git://github.com/baxterthehacker/public-repo.git",
+    "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+    "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+    "svn_url": "https://github.com/baxterthehacker/public-repo",
+    "homepage": null,
+    "size": 0,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": null,
+    "has_issues": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": true,
+    "forks_count": 0,
+    "mirror_url": null,
+    "open_issues_count": 1,
+    "forks": 0,
+    "open_issues": 1,
+    "watchers": 0,
+    "default_branch": "master"
+  },
+  "sender": {
+    "login": "baxterthehacker",
+    "id": 6752317,
+    "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/baxterthehacker",
+    "html_url": "https://github.com/baxterthehacker",
+    "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+    "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+    "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+    "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+    "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+    "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+    "type": "User",
+    "site_admin": false
+  },
+  "installation": {
+    "id": 234
+  }
+}"""
+
+PULL_REQUEST_CLOSED_EVENT_EXAMPLE = r"""{
+  "action": "closed",
+  "number": 1,
+  "pull_request": {
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1",
+    "id": 34778301,
+    "html_url": "https://github.com/baxterthehacker/public-repo/pull/1",
+    "diff_url": "https://github.com/baxterthehacker/public-repo/pull/1.diff",
+    "patch_url": "https://github.com/baxterthehacker/public-repo/pull/1.patch",
+    "issue_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1",
+    "number": 1,
+    "state": "open",
+    "locked": false,
+    "title": "new closed title",
+    "user": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "body": "new closed body",
+    "created_at": "2015-05-05T23:40:27Z",
+    "updated_at": "2015-05-05T23:40:27Z",
+    "closed_at": "2015-05-05T23:40:27Z",
+    "merged_at": "2015-05-05T23:40:27Z",
+    "merge_commit_sha": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "assignee": null,
+    "milestone": null,
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits",
+    "review_comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments",
+    "review_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+    "head": {
+      "label": "baxterthehacker:changes",
+      "ref": "changes",
+      "sha": "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "base": {
+      "label": "baxterthehacker:master",
+      "ref": "master",
+      "sha": "9049f1265b7d61be4a8904a9a27120d2064dab3b",
+      "user": {
+        "login": "baxterthehacker",
+        "id": 6752317,
+        "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+        "gravatar_id": "",
+        "url": "https://api.github.com/users/baxterthehacker",
+        "html_url": "https://github.com/baxterthehacker",
+        "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+        "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+        "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+        "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+        "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+        "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+        "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+        "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+        "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+        "type": "User",
+        "site_admin": false
+      },
+      "repo": {
+        "id": 35129377,
+        "name": "public-repo",
+        "full_name": "baxterthehacker/public-repo",
+        "owner": {
+          "login": "baxterthehacker",
+          "id": 6752317,
+          "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+          "gravatar_id": "",
+          "url": "https://api.github.com/users/baxterthehacker",
+          "html_url": "https://github.com/baxterthehacker",
+          "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+          "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+          "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+          "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+          "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+          "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+          "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+          "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+          "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+          "type": "User",
+          "site_admin": false
+        },
+        "private": false,
+        "html_url": "https://github.com/baxterthehacker/public-repo",
+        "description": "",
+        "fork": false,
+        "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+        "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+        "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+        "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+        "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+        "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+        "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+        "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+        "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+        "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+        "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+        "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+        "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+        "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+        "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+        "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+        "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+        "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+        "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+        "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+        "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+        "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+        "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+        "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+        "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+        "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+        "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+        "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+        "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+        "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+        "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+        "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+        "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+        "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+        "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+        "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+        "created_at": "2015-05-05T23:40:12Z",
+        "updated_at": "2015-05-05T23:40:12Z",
+        "pushed_at": "2015-05-05T23:40:26Z",
+        "git_url": "git://github.com/baxterthehacker/public-repo.git",
+        "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+        "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+        "svn_url": "https://github.com/baxterthehacker/public-repo",
+        "homepage": null,
+        "size": 0,
+        "stargazers_count": 0,
+        "watchers_count": 0,
+        "language": null,
+        "has_issues": true,
+        "has_downloads": true,
+        "has_wiki": true,
+        "has_pages": true,
+        "forks_count": 0,
+        "mirror_url": null,
+        "open_issues_count": 1,
+        "forks": 0,
+        "open_issues": 1,
+        "watchers": 0,
+        "default_branch": "master"
+      }
+    },
+    "_links": {
+      "self": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1"
+      },
+      "html": {
+        "href": "https://github.com/baxterthehacker/public-repo/pull/1"
+      },
+      "issue": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1"
+      },
+      "comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/issues/1/comments"
+      },
+      "review_comments": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/comments"
+      },
+      "review_comment": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/comments{/number}"
+      },
+      "commits": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/pulls/1/commits"
+      },
+      "statuses": {
+        "href": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+      }
+    },
+    "merged": true,
+    "mergeable": null,
+    "mergeable_state": "unknown",
+    "merged_by": null,
+    "comments": 0,
+    "review_comments": 0,
+    "commits": 1,
+    "additions": 1,
+    "deletions": 1,
+    "changed_files": 1
+  },
+  "repository": {
+    "id": 35129377,
+    "name": "public-repo",
+    "full_name": "baxterthehacker/public-repo",
+    "owner": {
+      "login": "baxterthehacker",
+      "id": 6752317,
+      "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+      "gravatar_id": "",
+      "url": "https://api.github.com/users/baxterthehacker",
+      "html_url": "https://github.com/baxterthehacker",
+      "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+      "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+      "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+      "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+      "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+      "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+      "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+      "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+      "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+      "type": "User",
+      "site_admin": false
+    },
+    "private": false,
+    "html_url": "https://github.com/baxterthehacker/public-repo",
+    "description": "",
+    "fork": false,
+    "url": "https://api.github.com/repos/baxterthehacker/public-repo",
+    "forks_url": "https://api.github.com/repos/baxterthehacker/public-repo/forks",
+    "keys_url": "https://api.github.com/repos/baxterthehacker/public-repo/keys{/key_id}",
+    "collaborators_url": "https://api.github.com/repos/baxterthehacker/public-repo/collaborators{/collaborator}",
+    "teams_url": "https://api.github.com/repos/baxterthehacker/public-repo/teams",
+    "hooks_url": "https://api.github.com/repos/baxterthehacker/public-repo/hooks",
+    "issue_events_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/events{/number}",
+    "events_url": "https://api.github.com/repos/baxterthehacker/public-repo/events",
+    "assignees_url": "https://api.github.com/repos/baxterthehacker/public-repo/assignees{/user}",
+    "branches_url": "https://api.github.com/repos/baxterthehacker/public-repo/branches{/branch}",
+    "tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/tags",
+    "blobs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/blobs{/sha}",
+    "git_tags_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/tags{/sha}",
+    "git_refs_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/refs{/sha}",
+    "trees_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/trees{/sha}",
+    "statuses_url": "https://api.github.com/repos/baxterthehacker/public-repo/statuses/{sha}",
+    "languages_url": "https://api.github.com/repos/baxterthehacker/public-repo/languages",
+    "stargazers_url": "https://api.github.com/repos/baxterthehacker/public-repo/stargazers",
+    "contributors_url": "https://api.github.com/repos/baxterthehacker/public-repo/contributors",
+    "subscribers_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscribers",
+    "subscription_url": "https://api.github.com/repos/baxterthehacker/public-repo/subscription",
+    "commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/commits{/sha}",
+    "git_commits_url": "https://api.github.com/repos/baxterthehacker/public-repo/git/commits{/sha}",
+    "comments_url": "https://api.github.com/repos/baxterthehacker/public-repo/comments{/number}",
+    "issue_comment_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues/comments{/number}",
+    "contents_url": "https://api.github.com/repos/baxterthehacker/public-repo/contents/{+path}",
+    "compare_url": "https://api.github.com/repos/baxterthehacker/public-repo/compare/{base}...{head}",
+    "merges_url": "https://api.github.com/repos/baxterthehacker/public-repo/merges",
+    "archive_url": "https://api.github.com/repos/baxterthehacker/public-repo/{archive_format}{/ref}",
+    "downloads_url": "https://api.github.com/repos/baxterthehacker/public-repo/downloads",
+    "issues_url": "https://api.github.com/repos/baxterthehacker/public-repo/issues{/number}",
+    "pulls_url": "https://api.github.com/repos/baxterthehacker/public-repo/pulls{/number}",
+    "milestones_url": "https://api.github.com/repos/baxterthehacker/public-repo/milestones{/number}",
+    "notifications_url": "https://api.github.com/repos/baxterthehacker/public-repo/notifications{?since,all,participating}",
+    "labels_url": "https://api.github.com/repos/baxterthehacker/public-repo/labels{/name}",
+    "releases_url": "https://api.github.com/repos/baxterthehacker/public-repo/releases{/id}",
+    "created_at": "2015-05-05T23:40:12Z",
+    "updated_at": "2015-05-05T23:40:12Z",
+    "pushed_at": "2015-05-05T23:40:26Z",
+    "git_url": "git://github.com/baxterthehacker/public-repo.git",
+    "ssh_url": "git@github.com:baxterthehacker/public-repo.git",
+    "clone_url": "https://github.com/baxterthehacker/public-repo.git",
+    "svn_url": "https://github.com/baxterthehacker/public-repo",
+    "homepage": null,
+    "size": 0,
+    "stargazers_count": 0,
+    "watchers_count": 0,
+    "language": null,
+    "has_issues": true,
+    "has_downloads": true,
+    "has_wiki": true,
+    "has_pages": true,
+    "forks_count": 0,
+    "mirror_url": null,
+    "open_issues_count": 1,
+    "forks": 0,
+    "open_issues": 1,
+    "watchers": 0,
+    "default_branch": "master"
+  },
+  "sender": {
+    "login": "baxterthehacker",
+    "id": 6752317,
+    "avatar_url": "https://avatars.githubusercontent.com/u/6752317?v=3",
+    "gravatar_id": "",
+    "url": "https://api.github.com/users/baxterthehacker",
+    "html_url": "https://github.com/baxterthehacker",
+    "followers_url": "https://api.github.com/users/baxterthehacker/followers",
+    "following_url": "https://api.github.com/users/baxterthehacker/following{/other_user}",
+    "gists_url": "https://api.github.com/users/baxterthehacker/gists{/gist_id}",
+    "starred_url": "https://api.github.com/users/baxterthehacker/starred{/owner}{/repo}",
+    "subscriptions_url": "https://api.github.com/users/baxterthehacker/subscriptions",
+    "organizations_url": "https://api.github.com/users/baxterthehacker/orgs",
+    "repos_url": "https://api.github.com/users/baxterthehacker/repos",
+    "events_url": "https://api.github.com/users/baxterthehacker/events{/privacy}",
+    "received_events_url": "https://api.github.com/users/baxterthehacker/received_events",
+    "type": "User",
+    "site_admin": false
+  },
+  "installation": {
+    "id": 234
+  }
+}"""
diff --git a/src/new_sentry_plugins/github/urls.py b/src/new_sentry_plugins/github/urls.py
new file mode 100644
index 0000000000..3a59cfeb1e
--- /dev/null
+++ b/src/new_sentry_plugins/github/urls.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, url
+
+from .endpoints.webhook import GithubIntegrationsWebhookEndpoint, GithubWebhookEndpoint
+
+urlpatterns = patterns(
+    "",
+    url(r"^organizations/(?P<organization_id>[^\/]+)/webhook/$", GithubWebhookEndpoint.as_view()),
+    url(r"^installations/webhook/$", GithubIntegrationsWebhookEndpoint.as_view()),
+)
diff --git a/src/new_sentry_plugins/gitlab/README.rst b/src/new_sentry_plugins/gitlab/README.rst
new file mode 100644
index 0000000000..8fd0385ef7
--- /dev/null
+++ b/src/new_sentry_plugins/gitlab/README.rst
@@ -0,0 +1,9 @@
+**Note**: This plugin has been deprecated in favor of the `Gitlab Global Integration <https://docs.sentry.io/workflow/integrations/global-integrations/#gitlab>`_.
+
+Go to your project's configuration page (Projects -> [Project] -> Issue Tracking) and select
+GitLab. Enter the required credentials (use a `personal access
+token<https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html>`_)
+and click save changes.
+
+It's recommended to create a specific user for Sentry with only `Reporter` privileges on your projects.
+
diff --git a/src/new_sentry_plugins/gitlab/__init__.py b/src/new_sentry_plugins/gitlab/__init__.py
new file mode 100644
index 0000000000..250c582cc4
--- /dev/null
+++ b/src/new_sentry_plugins/gitlab/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-gitlab")
diff --git a/src/new_sentry_plugins/gitlab/client.py b/src/new_sentry_plugins/gitlab/client.py
new file mode 100644
index 0000000000..3565a41e9f
--- /dev/null
+++ b/src/new_sentry_plugins/gitlab/client.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import quote
+from new_sentry_plugins.client import ApiClient
+
+from new_sentry_plugins.exceptions import ApiError
+
+
+class GitLabClient(ApiClient):
+    allow_redirects = False
+    plugin_name = "gitlab"
+
+    def __init__(self, url, token):
+        super(GitLabClient, self).__init__()
+        self.base_url = url
+        self.token = token
+
+    def build_url(self, path):
+        return "{}/api/v4/{}".format(self.base_url, path.lstrip("/"))
+
+    def request(self, method, path, data=None, params=None):
+        headers = {"Private-Token": self.token}
+        return self._request(method, path, headers=headers, params=params, data=data)
+
+    def auth(self):
+        return self.request("GET", "/user")
+
+    def get_project(self, repo):
+        return self.request("GET", "/projects/{}".format(quote(repo, safe="")))
+
+    def get_issue(self, repo, issue_id):
+        try:
+            return self.request(
+                "GET", "/projects/{}/issues/{}".format(quote(repo, safe=""), issue_id)
+            )
+        except IndexError:
+            raise ApiError("Issue not found with ID", 404)
+
+    def create_issue(self, repo, data):
+        return self.request("POST", "/projects/{}/issues".format(quote(repo, safe="")), data=data)
+
+    def create_note(self, repo, issue_iid, data):
+        return self.request(
+            "POST",
+            "/projects/{}/issues/{}/notes".format(quote(repo, safe=""), issue_iid),
+            data=data,
+        )
+
+    def list_project_members(self, repo):
+        return self.request(
+            "GET", "/projects/{}/members/all/?per_page=100".format(quote(repo, safe=""))
+        )
diff --git a/src/new_sentry_plugins/gitlab/endpoints.py b/src/new_sentry_plugins/gitlab/endpoints.py
new file mode 100644
index 0000000000..84d63a24e7
--- /dev/null
+++ b/src/new_sentry_plugins/gitlab/endpoints.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+# from rest_framework.response import Response
+# from sentry.exceptions import PluginError
+# from sentry.plugins.bases.issue2 import IssueGroupActionEndpoint
+# from six.moves.urllib.parse import urlencode
+
+# class GitlabIssueSearchEndpoint(IssueGroupActionEndpoint):
+#     def get(self, request, group, **kwargs):
+#         field = request.GET.get('autocomplete_field')
+#         query = request.GET.get('autocomplete_query')
+#         if field != 'issue_id' or not query:
+#             return Response({'issue_id': []})
+
+#         repo = self.get_option('repo', group.project)
+#         client = self.plugin.get_client(group.project)
+#         response = client.search_issues(repo, query)
+
+#         issues = [{
+#             'text': '(#%s) %s' % (i['number'], i['title']),
+#             'id': i['number']
+#         } for i in response.get('items', [])]
+
+#         return Response({field: issues})
diff --git a/src/new_sentry_plugins/gitlab/plugin.py b/src/new_sentry_plugins/gitlab/plugin.py
new file mode 100644
index 0000000000..8a32ac9a65
--- /dev/null
+++ b/src/new_sentry_plugins/gitlab/plugin.py
@@ -0,0 +1,199 @@
+from __future__ import absolute_import
+
+from sentry.plugins.bases.issue2 import IssuePlugin2
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.exceptions import ApiError
+from new_sentry_plugins.utils import get_secret_field_config
+
+from .client import GitLabClient
+
+
+class GitLabPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Integrate GitLab issues by linking a repository to a project"
+    slug = "gitlab"
+    title = "GitLab"
+    conf_title = title
+    conf_key = "gitlab"
+
+    def is_configured(self, request, project, **kwargs):
+        return bool(
+            self.get_option("gitlab_repo", project)
+            and self.get_option("gitlab_token", project)
+            and self.get_option("gitlab_url", project)
+        )
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(GitLabPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        return (
+            [
+                {
+                    "name": "repo",
+                    "label": "Repository",
+                    "default": self.get_option("gitlab_repo", group.project),
+                    "type": "text",
+                    "readonly": True,
+                }
+            ]
+            + fields
+            + [
+                {
+                    "name": "assignee",
+                    "label": "Assignee",
+                    "default": "",
+                    "type": "select",
+                    "required": False,
+                    "choices": self.get_allowed_assignees(request, group),
+                },
+                {
+                    "name": "labels",
+                    "label": "Labels",
+                    "default": self.get_option("gitlab_labels", group.project),
+                    "type": "text",
+                    "placeholder": "e.g. high, bug",
+                    "required": False,
+                },
+            ]
+        )
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Issue #",
+                "default": "",
+                "placeholder": "e.g. 1543",
+                "type": "text",
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(
+                    group.get_absolute_url(params={"referrer": "gitlab_plugin"})
+                ),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the GitLab issue."),
+                "required": False,
+            },
+        ]
+
+    def get_allowed_assignees(self, request, group):
+        repo = self.get_option("gitlab_repo", group.project)
+        client = self.get_client(group.project)
+        try:
+            response = client.list_project_members(repo)
+        except ApiError as e:
+            self.raise_error(e)
+        users = tuple((u["id"], u["username"]) for u in response)
+
+        return (("", "(Unassigned)"),) + users
+
+    def get_new_issue_title(self, **kwargs):
+        return "Create GitLab Issue"
+
+    def get_client(self, project):
+        url = self.get_option("gitlab_url", project).rstrip("/")
+        token = self.get_option("gitlab_token", project)
+
+        return GitLabClient(url, token)
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        repo = self.get_option("gitlab_repo", group.project)
+
+        client = self.get_client(group.project)
+
+        try:
+            response = client.create_issue(
+                repo,
+                {
+                    "title": form_data["title"],
+                    "description": form_data["description"],
+                    "labels": form_data.get("labels"),
+                    "assignee_id": form_data.get("assignee"),
+                },
+            )
+        except Exception as e:
+            self.raise_error(e)
+
+        return response["iid"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(group.project)
+        repo = self.get_option("gitlab_repo", group.project)
+        try:
+            issue = client.get_issue(repo=repo, issue_id=form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_note(repo=repo, issue_iid=issue["iid"], data={"body": comment})
+            except Exception as e:
+                self.raise_error(e)
+
+        return {"title": issue["title"]}
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "GL-{}".format(issue_id)
+
+    def get_issue_url(self, group, issue_iid, **kwargs):
+        url = self.get_option("gitlab_url", group.project).rstrip("/")
+        repo = self.get_option("gitlab_repo", group.project)
+
+        return "{}/{}/issues/{}".format(url, repo, issue_iid)
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        gitlab_token = self.get_option("gitlab_token", project)
+        secret_field = get_secret_field_config(
+            gitlab_token, "Enter your GitLab API token.", include_prefix=True
+        )
+        secret_field.update(
+            {
+                "name": "gitlab_token",
+                "label": "Access Token",
+                "placeholder": "e.g. g5DWFtLzaztgYFrqhVfE",
+            }
+        )
+
+        return [
+            {
+                "name": "gitlab_url",
+                "label": "GitLab URL",
+                "type": "url",
+                "default": "https://gitlab.com",
+                "placeholder": "e.g. https://gitlab.example.com",
+                "required": True,
+                "help": "Enter the URL for your GitLab server.",
+            },
+            secret_field,
+            {
+                "name": "gitlab_repo",
+                "label": "Repository Name",
+                "type": "text",
+                "placeholder": "e.g. getsentry/sentry",
+                "required": True,
+                "help": "Enter your repository name, including the owner.",
+            },
+            {
+                "name": "gitlab_labels",
+                "label": "Issue Labels",
+                "type": "text",
+                "placeholder": "e.g. high, bug",
+                "required": False,
+                "help": "Enter the labels you want to auto assign to new issues.",
+            },
+        ]
+
+    def validate_config(self, project, config, actor=None):
+        url = config["gitlab_url"].rstrip("/")
+        token = config["gitlab_token"]
+        repo = config["gitlab_repo"]
+
+        client = GitLabClient(url, token)
+        try:
+            client.get_project(repo)
+        except Exception as e:
+            self.raise_error(e)
+        return config
diff --git a/src/new_sentry_plugins/heroku/__init__.py b/src/new_sentry_plugins/heroku/__init__.py
new file mode 100644
index 0000000000..eac7bc3a61
--- /dev/null
+++ b/src/new_sentry_plugins/heroku/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-heroku")
diff --git a/src/new_sentry_plugins/heroku/plugin.py b/src/new_sentry_plugins/heroku/plugin.py
new file mode 100644
index 0000000000..089761ec92
--- /dev/null
+++ b/src/new_sentry_plugins/heroku/plugin.py
@@ -0,0 +1,137 @@
+from __future__ import absolute_import
+
+import logging
+
+from sentry.api import client
+
+from sentry.models import ApiKey, User, ProjectOption, Repository
+from sentry.plugins.interfaces.releasehook import ReleaseHook
+from new_sentry_plugins.base import CorePluginMixin
+from sentry.plugins.base.configuration import react_plugin_config
+from sentry.plugins.bases import ReleaseTrackingPlugin
+
+logger = logging.getLogger("sentry.plugins.heroku")
+
+
+class HerokuReleaseHook(ReleaseHook):
+    def handle(self, request):
+        email = request.POST["user"]
+        try:
+            user = User.objects.get(
+                email__iexact=email, sentry_orgmember_set__organization__project=self.project
+            )
+        except (User.DoesNotExist, User.MultipleObjectsReturned):
+            user = None
+        self.finish_release(version=request.POST["head_long"], url=request.POST["url"], owner=user)
+
+    def set_refs(self, release, **values):
+        # check if user exists, and then try to get refs based on version
+        if values.get("owner", None):
+            repo_project_option = ProjectOption.objects.get_value(
+                project=self.project, key="heroku:repository"
+            )
+            deploy_project_option = (
+                ProjectOption.objects.get_value(
+                    project=self.project, key="heroku:environment", default="production"
+                )
+                or "production"
+            )
+            if repo_project_option:
+                try:
+                    repository = Repository.objects.get(
+                        organization_id=self.project.organization_id, name=repo_project_option
+                    )
+                except Repository.DoesNotExist:
+                    logger.info(
+                        "repository.missing",
+                        extra={
+                            "organization_id": self.project.organization_id,
+                            "project_id": self.project.id,
+                            "repository": repo_project_option,
+                        },
+                    )
+                else:
+                    release.set_refs(
+                        refs=[{"commit": release.version, "repository": repository.name}],
+                        user=values["owner"],
+                        fetch=True,
+                    )
+            # create deploy associated with release via ReleaseDeploysEndpoint
+            endpoint = "/organizations/{}/releases/{}/deploys/".format(
+                self.project.organization.slug, release.version
+            )
+            auth = ApiKey(organization=self.project.organization, scope_list=["project:write"])
+            client.post(endpoint, data={"environment": deploy_project_option}, auth=auth)
+        else:
+            logger.info(
+                "owner.missing",
+                extra={
+                    "organization_id": self.project.organization_id,
+                    "project_id": self.project.id,
+                },
+            )
+
+
+class HerokuPlugin(CorePluginMixin, ReleaseTrackingPlugin):
+    author = "Sentry Team"
+    author_url = "https://github.com/getsentry"
+    resource_links = (
+        ("Bug Tracker", "https://github.com/getsentry/sentry-heroku/issues"),
+        ("Source", "https://github.com/getsentry/sentry-heroku"),
+    )
+
+    title = "Heroku"
+    slug = "heroku"
+    description = "Integrate Heroku release tracking."
+
+    def configure(self, project, request):
+        return react_plugin_config(self, project, request)
+
+    def can_enable_for_projects(self):
+        return True
+
+    def can_configure_for_project(self, project):
+        return True
+
+    def has_project_conf(self):
+        return True
+
+    def get_conf_key(self):
+        return "heroku"
+
+    def get_config(self, project, **kwargs):
+        repo_list = list(Repository.objects.filter(organization_id=project.organization_id))
+        if not ProjectOption.objects.get_value(project=project, key="heroku:repository"):
+            choices = [("", "select a repo")]
+        else:
+            choices = []
+        choices.extend([(repo.name, repo.name) for repo in repo_list])
+        return [
+            {
+                "name": "repository",
+                "label": "Respository",
+                "type": "select",
+                "required": True,
+                "choices": choices,
+                "help": "Select which repository you would like to be associated with this project",
+            },
+            {
+                "name": "environment",
+                "label": "Deploy Environment",
+                "type": "text",
+                "required": False,
+                "default": "production",
+                "help": "Specify an environment name for your Heroku deploys",
+            },
+        ]
+
+    def get_release_doc_html(self, hook_url):
+        return """
+        <p>Add Sentry as a deploy hook to automatically track new releases.</p>
+        <pre class="clippy">heroku addons:create deployhooks:http --url={hook_url}</pre>
+        """.format(
+            hook_url=hook_url
+        )
+
+    def get_release_hook(self):
+        return HerokuReleaseHook
diff --git a/src/new_sentry_plugins/jira/__init__.py b/src/new_sentry_plugins/jira/__init__.py
new file mode 100644
index 0000000000..55004ee429
--- /dev/null
+++ b/src/new_sentry_plugins/jira/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-jira")
diff --git a/src/new_sentry_plugins/jira/client.py b/src/new_sentry_plugins/jira/client.py
new file mode 100644
index 0000000000..b528860921
--- /dev/null
+++ b/src/new_sentry_plugins/jira/client.py
@@ -0,0 +1,115 @@
+from __future__ import absolute_import
+
+import logging
+import re
+from hashlib import md5 as _md5
+
+from sentry.utils.cache import cache
+from django.utils.encoding import force_bytes
+
+from new_sentry_plugins.exceptions import ApiError
+from new_sentry_plugins.client import ApiClient
+
+log = logging.getLogger(__name__)
+
+
+def md5(*bits):
+    return _md5(":".join((force_bytes(bit, errors="replace") for bit in bits)))
+
+
+class JiraClient(ApiClient):
+    """
+    The JIRA API Client, so you don't have to.
+    """
+
+    PROJECT_URL = "/rest/api/2/project"
+    META_URL = "/rest/api/2/issue/createmeta"
+    CREATE_URL = "/rest/api/2/issue"
+    PRIORITIES_URL = "/rest/api/2/priority"
+    VERSIONS_URL = "/rest/api/2/project/%s/versions"
+    USERS_URL = "/rest/api/2/user/assignable/search"
+    ISSUE_URL = "/rest/api/2/issue/%s"
+    SEARCH_URL = "/rest/api/2/search/"
+    COMMENT_URL = "/rest/api/2/issue/%s/comment"
+    HTTP_TIMEOUT = 5
+    plugin_name = "jira"
+
+    def __init__(self, instance_uri, username, password):
+        self.base_url = instance_uri.rstrip("/")
+        self.username = username
+        self.password = password
+        super(JiraClient, self).__init__(verify_ssl=False)
+
+    def request(self, method, path, data=None, params=None):
+        if self.username and self.password:
+            auth = self.username.encode("utf8"), self.password.encode("utf8")
+        else:
+            auth = None
+        return self._request(method, path, data=data, params=params, auth=auth)
+
+    def get_projects_list(self):
+        return self.get_cached(self.PROJECT_URL)
+
+    def get_create_meta(self, project):
+        return self.get(
+            self.META_URL, params={"projectKeys": project, "expand": "projects.issuetypes.fields"}
+        )
+
+    def get_create_meta_for_project(self, project):
+        metas = self.get_create_meta(project)
+        # We saw an empty JSON response come back from the API :(
+        if not metas:
+            return None
+
+        # XXX(dcramer): document how this is possible, if it even is
+        if len(metas["projects"]) > 1:
+            raise ApiError("More than one project found.")
+
+        try:
+            return metas["projects"][0]
+        except IndexError:
+            return None
+
+    def get_versions(self, project):
+        return self.get_cached(self.VERSIONS_URL % project)
+
+    def get_priorities(self):
+        return self.get_cached(self.PRIORITIES_URL)
+
+    def get_users_for_project(self, project):
+        return self.get(self.USERS_URL, params={"project": project})
+
+    def search_users_for_project(self, project, username):
+        return self.get(self.USERS_URL, params={"project": project, "username": username})
+
+    def create_issue(self, raw_form_data):
+        data = {"fields": raw_form_data}
+        return self.post(self.CREATE_URL, data=data)
+
+    def get_issue(self, key):
+        return self.get(self.ISSUE_URL % key)
+
+    def create_comment(self, issue_key, comment):
+        return self.post(self.COMMENT_URL % issue_key, data={"body": comment})
+
+    def search_issues(self, project, query):
+        # check if it looks like an issue id
+        if re.search(r"^[A-Za-z]+-\d+$", query) and project.lower() in query.lower():
+            jql = 'id="%s"' % query.replace('"', '\\"')
+        else:
+            jql = 'text ~ "%s"' % query.replace('"', '\\"')
+        jql = 'project="%s" AND %s' % (project, jql)
+        return self.get(self.SEARCH_URL, params={"jql": jql})
+
+    def get_cached(self, full_url):
+        """
+        Basic Caching mechanism for requests and responses. It only caches responses
+        based on URL
+        TODO: Implement GET attr in cache as well. (see self.create_meta for example)
+        """
+        key = "sentry-jira:" + md5(full_url, self.base_url).hexdigest()
+        cached_result = cache.get(key)
+        if not cached_result:
+            cached_result = self.get(full_url)
+            cache.set(key, cached_result, 60)
+        return cached_result
diff --git a/src/new_sentry_plugins/jira/plugin.py b/src/new_sentry_plugins/jira/plugin.py
new file mode 100644
index 0000000000..ee247c909f
--- /dev/null
+++ b/src/new_sentry_plugins/jira/plugin.py
@@ -0,0 +1,668 @@
+from __future__ import absolute_import
+
+import logging
+import re
+
+from django.conf import settings
+from django.conf.urls import url
+from rest_framework.response import Response
+from six.moves.urllib.parse import (
+    parse_qs,
+    quote_plus,
+    unquote_plus,
+    urlencode,
+    urlsplit,
+    urlunsplit,
+)
+
+from sentry.models import GroupMeta
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint, PluginError
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.exceptions import ApiError, ApiUnauthorized
+from new_sentry_plugins.jira.client import JiraClient
+from new_sentry_plugins.utils import get_secret_field_config
+
+# A list of common builtin custom field types for JIRA for easy reference.
+JIRA_CUSTOM_FIELD_TYPES = {
+    "select": "com.atlassian.jira.plugin.system.customfieldtypes:select",
+    "textarea": "com.atlassian.jira.plugin.system.customfieldtypes:textarea",
+    "multiuserpicker": "com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker",
+    "tempo_account": "com.tempoplugin.tempo-accounts:accounts.customfield",
+}
+
+
+class JiraPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Integrate JIRA issues by linking a project."
+    slug = "jira"
+    title = "JIRA"
+    conf_title = title
+    conf_key = slug
+
+    asset_key = "jira"
+    assets = ["dist/jira.js"]
+
+    def get_group_urls(self):
+        _patterns = super(JiraPlugin, self).get_group_urls()
+        _patterns.append(
+            url(
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        )
+        return _patterns
+
+    def is_configured(self, request, project, **kwargs):
+        if not self.get_option("default_project", project):
+            return False
+        return True
+
+    def get_group_description(self, request, group, event):
+        # mostly the same as parent class, but change ``` to {code}
+        output = [absolute_uri(group.get_absolute_url(params={"referrer": "jira_plugin"}))]
+        body = self.get_group_body(request, group, event)
+        if body:
+            output.extend(["", "{code}", body, "{code}"])
+        return "\n".join(output)
+
+    def build_dynamic_field(self, group, field_meta):
+        """
+        Builds a field based on JIRA's meta field information
+        """
+        schema = field_meta["schema"]
+
+        # set up some defaults for form fields
+        fieldtype = "text"
+        fkwargs = {"label": field_meta["name"], "required": field_meta["required"]}
+        # override defaults based on field configuration
+        if (
+            schema["type"] in ["securitylevel", "priority"]
+            or schema.get("custom") == JIRA_CUSTOM_FIELD_TYPES["select"]
+        ):
+            fieldtype = "select"
+            fkwargs["choices"] = self.make_choices(field_meta.get("allowedValues"))
+        elif field_meta.get("autoCompleteUrl") and (
+            schema.get("items") == "user" or schema["type"] == "user"
+        ):
+            fieldtype = "select"
+            sentry_url = "/api/0/issues/%s/plugins/%s/autocomplete" % (group.id, self.slug)
+            fkwargs["url"] = "%s?jira_url=%s" % (
+                sentry_url,
+                quote_plus(field_meta["autoCompleteUrl"]),
+            )
+            fkwargs["has_autocomplete"] = True
+            fkwargs["placeholder"] = "Start typing to search for a user"
+        elif schema["type"] in ["timetracking"]:
+            # TODO: Implement timetracking (currently unsupported alltogether)
+            return None
+        elif schema.get("items") in ["worklog", "attachment"]:
+            # TODO: Implement worklogs and attachments someday
+            return None
+        elif schema["type"] == "array" and schema["items"] != "string":
+            fieldtype = "select"
+            fkwargs.update(
+                {
+                    "multiple": True,
+                    "choices": self.make_choices(field_meta.get("allowedValues")),
+                    "default": [],
+                }
+            )
+
+        # break this out, since multiple field types could additionally
+        # be configured to use a custom property instead of a default.
+        if schema.get("custom"):
+            if schema["custom"] == JIRA_CUSTOM_FIELD_TYPES["textarea"]:
+                fieldtype = "textarea"
+
+        fkwargs["type"] = fieldtype
+        return fkwargs
+
+    def get_issue_type_meta(self, issue_type, meta):
+        issue_types = meta["issuetypes"]
+        issue_type_meta = None
+        if issue_type:
+            matching_type = [t for t in issue_types if t["id"] == issue_type]
+            issue_type_meta = matching_type[0] if len(matching_type) > 0 else None
+
+        # still no issue type? just use the first one.
+        if not issue_type_meta:
+            issue_type_meta = issue_types[0]
+
+        return issue_type_meta
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(JiraPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+
+        jira_project_key = self.get_option("default_project", group.project)
+
+        client = self.get_jira_client(group.project)
+        try:
+            meta = client.get_create_meta_for_project(jira_project_key)
+        except ApiError as e:
+            raise PluginError(
+                u"JIRA responded with an error. We received a status code of {}".format(e.code)
+            )
+        except ApiUnauthorized:
+            raise PluginError(
+                "JIRA returned: Unauthorized. "
+                "Please check your username, password, "
+                "instance and project in your configuration settings."
+            )
+
+        if not meta:
+            raise PluginError(
+                "Error in JIRA configuration, no projects " "found for user %s." % client.username
+            )
+
+        # check if the issuetype was passed as a GET parameter
+        issue_type = None
+        if request is not None:
+            if request.method == "POST":
+                issue_type = request.data.get("issuetype")
+            else:
+                issue_type = request.GET.get("issuetype")
+
+        if issue_type is None:
+            issue_type = self.get_option("default_issue_type", group.project)
+
+        issue_type_meta = self.get_issue_type_meta(issue_type, meta)
+
+        issue_type_choices = self.make_choices(meta["issuetypes"])
+
+        # make sure default issue type is actually
+        # one that is allowed for project
+        if issue_type:
+            if not any((c for c in issue_type_choices if c[0] == issue_type)):
+                issue_type = issue_type_meta["id"]
+
+        fields = (
+            [
+                {
+                    "name": "project",
+                    "label": "Jira Project",
+                    "choices": ((meta["id"], jira_project_key),),
+                    "default": meta["id"],
+                    "type": "select",
+                    "readonly": True,
+                }
+            ]
+            + fields
+            + [
+                {
+                    "name": "issuetype",
+                    "label": "Issue Type",
+                    "default": issue_type or issue_type_meta["id"],
+                    "type": "select",
+                    "choices": issue_type_choices,
+                }
+            ]
+        )
+
+        # title is renamed to summary before sending to JIRA
+        standard_fields = [f["name"] for f in fields] + ["summary"]
+        ignored_fields = (self.get_option("ignored_fields", group.project) or "").split(",")
+
+        # apply ordering to fields based on some known built-in JIRA fields.
+        # otherwise weird ordering occurs.
+        anti_gravity = {"priority": -150, "fixVersions": -125, "components": -100, "security": -50}
+
+        dynamic_fields = issue_type_meta.get("fields").keys()
+        dynamic_fields.sort(key=lambda f: anti_gravity.get(f) or 0)
+        # build up some dynamic fields based on required shit.
+        for field in dynamic_fields:
+            if field in standard_fields or field in [x.strip() for x in ignored_fields]:
+                # don't overwrite the fixed fields for the form.
+                continue
+            mb_field = self.build_dynamic_field(group, issue_type_meta["fields"][field])
+            if mb_field:
+                mb_field["name"] = field
+                fields.append(mb_field)
+
+        for field in fields:
+            if field["name"] == "priority":
+                # whenever priorities are available, put the available ones in the list.
+                # allowedValues for some reason doesn't pass enough info.
+                field["choices"] = self.make_choices(client.get_priorities())
+                field["default"] = self.get_option("default_priority", group.project) or ""
+            elif field["name"] == "fixVersions":
+                field["choices"] = self.make_choices(client.get_versions(jira_project_key))
+
+        return fields
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Issue",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": absolute_uri(group.get_absolute_url(params={"referrer": "jira_plugin"})),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the JIRA issue."),
+                "required": False,
+            },
+        ]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_jira_client(group.project)
+        try:
+            issue = client.get_issue(form_data["issue_id"])
+        except Exception as e:
+            self.raise_error(e)
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                client.create_comment(issue["key"], comment)
+            except Exception as e:
+                self.raise_error(e)
+
+        return {"title": issue["fields"]["summary"]}
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        instance = self.get_option("instance_url", group.project)
+        return "%s/browse/%s" % (instance, issue_id)
+
+    def _get_formatted_user(self, user):
+        display = "%s %s(%s)" % (
+            user.get("displayName", user["name"]),
+            "- %s " % user.get("emailAddress") if user.get("emailAddress") else "",
+            user["name"],
+        )
+        return {"id": user["name"], "text": display}
+
+    def view_autocomplete(self, request, group, **kwargs):
+        query = request.GET.get("autocomplete_query")
+        field = request.GET.get("autocomplete_field")
+        project = self.get_option("default_project", group.project)
+
+        if field == "issue_id":
+            client = self.get_jira_client(group.project)
+            try:
+                response = client.search_issues(project, query)
+            except ApiError as e:
+                return Response(
+                    {
+                        "error_type": "validation",
+                        "errors": [{"__all__": self.message_from_error(e)}],
+                    },
+                    status=400,
+                )
+            else:
+                issues = [
+                    {"text": "(%s) %s" % (i["key"], i["fields"]["summary"]), "id": i["key"]}
+                    for i in response.get("issues", [])
+                ]
+                return Response({field: issues})
+
+        jira_url = request.GET.get("jira_url")
+        if jira_url:
+            jira_url = unquote_plus(jira_url)
+            parsed = list(urlsplit(jira_url))
+            jira_query = parse_qs(parsed[3])
+
+            jira_client = self.get_jira_client(group.project)
+
+            is_user_api = re.search("/rest/api/(latest|[0-9])/user/", jira_url)
+
+            is_user_picker = "/rest/api/1.0/users/picker" in jira_url
+
+            if is_user_api:  # its the JSON version of the autocompleter
+                is_xml = False
+                jira_query["username"] = query.encode("utf8")
+                jira_query.pop(
+                    "issueKey", False
+                )  # some reason JIRA complains if this key is in the URL.
+                jira_query["project"] = project.encode("utf8")
+            elif is_user_picker:
+                is_xml = False
+                # for whatever reason, the create meta api returns an
+                # invalid path, so let's just use the correct, documented one here:
+                # https://docs.atlassian.com/jira/REST/cloud/#api/2/user
+                # also, only pass path so saved instance url will be used
+                parsed[0] = ""
+                parsed[1] = ""
+                parsed[2] = "/rest/api/2/user/picker"
+                jira_query["query"] = query.encode("utf8")
+            else:  # its the stupid XML version of the API.
+                is_xml = True
+                jira_query["query"] = query.encode("utf8")
+                if jira_query.get("fieldName"):
+                    # for some reason its a list.
+                    jira_query["fieldName"] = jira_query["fieldName"][0]
+
+            parsed[3] = urlencode(jira_query)
+            final_url = urlunsplit(parsed)
+
+            autocomplete_response = jira_client.get_cached(final_url)
+
+            if is_user_picker:
+                autocomplete_response = autocomplete_response["users"]
+
+            users = []
+
+            if is_xml:
+                for userxml in autocomplete_response.xml.findAll("users"):
+                    users.append(
+                        {"id": userxml.find("name").text, "text": userxml.find("html").text}
+                    )
+            else:
+                for user in autocomplete_response:
+                    if user.get("name"):
+                        users.append(self._get_formatted_user(user))
+
+            # if JIRA user doesn't have proper permission for user api,
+            # try the assignee api instead
+            if not users and is_user_api:
+                try:
+                    autocomplete_response = jira_client.search_users_for_project(
+                        jira_query.get("project"), jira_query.get("username")
+                    )
+                except (ApiUnauthorized, ApiError) as e:
+                    return Response(
+                        {
+                            "error_type": "validation",
+                            "errors": [{"__all__": self.message_from_error(e)}],
+                        },
+                        status=400,
+                    )
+
+                for user in autocomplete_response:
+                    if user.get("name"):
+                        users.append(self._get_formatted_user(user))
+
+            return Response({field: users})
+
+    def message_from_error(self, exc):
+        if isinstance(exc, ApiUnauthorized):
+            return "Unauthorized: either your username and password were invalid or you do not have access"
+        return super(JiraPlugin, self).message_from_error(exc)
+
+    def error_message_from_json(self, data):
+        message = ""
+        if data.get("errorMessages"):
+            message = " ".join(data["errorMessages"])
+        if data.get("errors"):
+            if message:
+                message += " "
+            message += " ".join(["%s: %s" % (k, v) for k, v in data.get("errors").items()])
+        return message
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        cleaned_data = {}
+
+        # protect against mis-configured plugin submitting a form without an
+        # issuetype assigned.
+        if not form_data.get("issuetype"):
+            raise PluginError("Issue Type is required.")
+
+        jira_project_key = self.get_option("default_project", group.project)
+        client = self.get_jira_client(group.project)
+        meta = client.get_create_meta_for_project(jira_project_key)
+
+        if not meta:
+            raise PluginError("Something went wrong. Check your plugin configuration.")
+
+        issue_type_meta = self.get_issue_type_meta(form_data["issuetype"], meta)
+
+        fs = issue_type_meta["fields"]
+        for field in fs.keys():
+            f = fs[field]
+            if field == "description":
+                cleaned_data[field] = form_data[field]
+                continue
+            elif field == "summary":
+                cleaned_data["summary"] = form_data["title"]
+                continue
+            if field in form_data.keys():
+                v = form_data.get(field)
+                if v:
+                    schema = f["schema"]
+                    if schema.get("type") == "string" and not schema.get("custom"):
+                        cleaned_data[field] = v
+                        continue
+                    if schema["type"] == "user" or schema.get("items") == "user":
+                        v = {"name": v}
+                    elif schema.get("custom") == JIRA_CUSTOM_FIELD_TYPES.get("multiuserpicker"):
+                        # custom multi-picker
+                        v = [{"name": v}]
+                    elif schema["type"] == "array" and schema.get("items") != "string":
+                        v = [{"id": vx} for vx in v]
+                    elif schema["type"] == "array" and schema.get("items") == "string":
+                        v = [v]
+                    elif schema.get("custom") == JIRA_CUSTOM_FIELD_TYPES.get("textarea"):
+                        v = v
+                    elif (
+                        schema["type"] == "number"
+                        or schema.get("custom") == JIRA_CUSTOM_FIELD_TYPES["tempo_account"]
+                    ):
+                        try:
+                            if "." in v:
+                                v = float(v)
+                            else:
+                                v = int(v)
+                        except ValueError:
+                            pass
+                    elif (
+                        schema.get("type") != "string"
+                        or (schema.get("items") and schema.get("items") != "string")
+                        or schema.get("custom") == JIRA_CUSTOM_FIELD_TYPES.get("select")
+                    ):
+                        v = {"id": v}
+                    cleaned_data[field] = v
+
+        if not (isinstance(cleaned_data["issuetype"], dict) and "id" in cleaned_data["issuetype"]):
+            # something fishy is going on with this field, working on some JIRA
+            # instances, and some not.
+            # testing against 5.1.5 and 5.1.4 does not convert (perhaps is no longer included
+            # in the projectmeta API call, and would normally be converted in the
+            # above clean method.)
+            cleaned_data["issuetype"] = {"id": cleaned_data["issuetype"]}
+
+        try:
+            response = client.create_issue(cleaned_data)
+        except Exception as e:
+            self.raise_error(e)
+
+        return response.get("key")
+
+    def get_jira_client(self, project):
+        instance = self.get_option("instance_url", project)
+        username = self.get_option("username", project)
+        pw = self.get_option("password", project)
+        return JiraClient(instance, username, pw)
+
+    def make_choices(self, x):
+        return [(y["id"], y["name"] if "name" in y else y["value"]) for y in x] if x else []
+
+    def validate_config_field(self, project, name, value, actor=None):
+        value = super(JiraPlugin, self).validate_config_field(project, name, value, actor)
+        # Don't make people update password every time
+        if name == "password":
+            value = value or self.get_option("password", project)
+        return value
+
+    def validate_config(self, project, config, actor=None):
+        """
+        ```
+        if config['foo'] and not config['bar']:
+            raise PluginError('You cannot configure foo with bar')
+        return config
+        ```
+        """
+        client = JiraClient(config["instance_url"], config["username"], config["password"])
+        try:
+            client.get_projects_list()
+        except ApiError as e:
+            self.raise_error(e)
+
+        return config
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        instance = self.get_option("instance_url", project)
+        username = self.get_option("username", project)
+        pw = self.get_option("password", project)
+        jira_project = self.get_option("default_project", project)
+
+        default_priority = self.get_option("default_priority", project)
+
+        default_issue_type = self.get_option("default_issue_type", project)
+
+        project_choices = []
+        priority_choices = []
+        issue_type_choices = []
+        if instance and username and pw:
+            client = JiraClient(instance, username, pw)
+            try:
+                projects = client.get_projects_list()
+            except ApiError:
+                projects = None
+            else:
+                if projects:
+                    project_choices = [
+                        (p.get("key"), "%s (%s)" % (p.get("name"), p.get("key"))) for p in projects
+                    ]
+                    jira_project = jira_project or projects[0]["key"]
+
+            if jira_project:
+                try:
+                    priorities = client.get_priorities()
+                except ApiError:
+                    priorities = None
+                else:
+                    if priorities:
+                        priority_choices = [
+                            (p.get("id"), "%s" % (p.get("name"))) for p in priorities
+                        ]
+
+                        default_priority = default_priority or priorities[0]["id"]
+
+                try:
+                    meta = client.get_create_meta_for_project(jira_project)
+                except ApiError:
+                    meta = None
+                else:
+                    if meta:
+                        issue_type_choices = self.make_choices(meta["issuetypes"])
+                        if issue_type_choices:
+                            default_issue_type = default_issue_type or issue_type_choices[0][0]
+
+        secret_field = get_secret_field_config(pw, "")
+        secret_field.update({"name": "password", "label": "Password/API Token"})
+
+        return [
+            {
+                "name": "instance_url",
+                "label": "JIRA Instance URL",
+                "default": instance,
+                "type": "text",
+                "placeholder": 'e.g. "https://jira.atlassian.com"',
+                "help": "It must be visible to the Sentry server",
+            },
+            {
+                "name": "username",
+                "label": "Username/Email",
+                "default": username,
+                "type": "text",
+                "help": "Ensure the JIRA user has admin permissions on the project",
+            },
+            secret_field,
+            {
+                "name": "default_project",
+                "label": "Linked Project",
+                "type": "select",
+                "choices": project_choices,
+                "default": jira_project,
+                "required": False,
+            },
+            {
+                "name": "ignored_fields",
+                "label": "Ignored Fields",
+                "type": "textarea",
+                "required": False,
+                "placeholder": 'e.g. "components, security, customfield_10006"',
+                "default": self.get_option("ignored_fields", project),
+                "help": "Comma-separated list of properties that you don't want to show in the form",
+            },
+            {
+                "name": "default_priority",
+                "label": "Default Priority",
+                "type": "select",
+                "choices": priority_choices,
+                "required": False,
+                "default": default_priority,
+            },
+            {
+                "name": "default_issue_type",
+                "label": "Default Issue Type",
+                "type": "select",
+                "choices": issue_type_choices,
+                "required": False,
+                "default": default_issue_type,
+            },
+            {
+                "name": "auto_create",
+                "label": "Automatically create JIRA Tickets",
+                "default": self.get_option("auto_create", project) or False,
+                "type": "bool",
+                "required": False,
+                "help": "Automatically create a JIRA ticket for EVERY new issue",
+            },
+        ]
+
+    def should_create(self, group, event, is_new):
+        if not is_new:
+            return False
+
+        if not self.get_option("auto_create", group.project):
+            return False
+
+        # XXX(dcramer): Sentry doesn't expect GroupMeta referenced here so we
+        # need to populate the cache
+        GroupMeta.objects.populate_cache([group])
+        if GroupMeta.objects.get_value(group, "%s:tid" % self.get_conf_key(), None):
+            return False
+
+        return True
+
+    def post_process(self, group, event, is_new, **kwargs):
+        if not self.should_create(group, event, is_new):
+            return
+
+        fields = self.get_new_issue_fields(None, group, event, **kwargs)
+
+        post_data = {}
+        included_fields = set(["priority", "issuetype", "title", "description", "project"])
+        for field in fields:
+            name = field["name"]
+            if name in included_fields:
+                post_data[name] = field.get("default")
+
+        if not (
+            post_data.get("priority") and post_data.get("issuetype") and post_data.get("project")
+        ):
+            return
+
+        interface = event.interfaces.get("sentry.interfaces.Exception")
+
+        if interface:
+            post_data["description"] += "\n{code}%s{code}" % interface.get_stacktrace(
+                event, system_frames=False, max_frames=settings.SENTRY_MAX_STACKTRACE_FRAMES
+            )
+
+        try:
+            issue_id = self.create_issue(request={}, group=group, form_data=post_data)
+        except PluginError as e:
+            logging.exception("Error creating JIRA ticket: %s", e)
+        else:
+            prefix = self.get_conf_key()
+            GroupMeta.objects.set_value(group, "%s:tid" % prefix, issue_id)
diff --git a/src/new_sentry_plugins/jira/static/jira/components/issueActions.jsx b/src/new_sentry_plugins/jira/static/jira/components/issueActions.jsx
new file mode 100644
index 0000000000..b7924518fb
--- /dev/null
+++ b/src/new_sentry_plugins/jira/static/jira/components/issueActions.jsx
@@ -0,0 +1,96 @@
+import React from 'react';
+import {Form, FormState, plugins} from 'sentry';
+
+
+class IssueActions extends plugins.DefaultIssuePlugin.DefaultIssueActions {
+  changeField(action, name, value) {
+    let key = action + 'FormData';
+    let formData = {
+      ...this.state[key],
+      [name]: value
+    };
+    let state = {
+      [key]: formData
+    };
+    if (name === 'issuetype') {
+      state.state = FormState.LOADING;
+      this.setState(state, this.onLoad.bind(this, () => {
+        this.api.request((this.getPluginCreateEndpoint() +
+                          '?issuetype=' + encodeURIComponent(value)), {
+          success: (data) => {
+            // Try not to change things the user might have edited
+            // unless they're no longer valid
+            let oldData = this.state.createFormData;
+            let createFormData = {};
+            data.forEach((field) => {
+              let val;
+              if (field.choices && !field.choices.find(c => c[0] === oldData[field.name])) {
+                val = field.default;
+              } else {
+                val = oldData[field.name] || field.default;
+              }
+              createFormData[field.name] = val;
+            });
+            this.setState({
+              createFieldList: data,
+              error: null,
+              loading: false,
+              createFormData: createFormData
+            }, this.onLoadSuccess);
+          },
+          error: this.errorHandler
+        });
+      }))
+      return;
+    }
+    this.setState(state);
+  }
+
+  renderForm() {
+    let form;
+
+    // For create form, split into required and optional fields
+    if (this.props.actionType === 'create') {
+      if (this.state.createFieldList) {
+        let renderField = (field) => {
+          if (field.has_autocomplete) {
+            field = Object.assign({
+              url: ('/api/0/issues/' + this.getGroup().id +
+                    '/plugins/' + this.props.plugin.slug + '/autocomplete')
+            }, field);
+          }
+          return (
+            <div key={field.name}>
+              {this.renderField({
+                config: field,
+                formData: this.state.createFormData,
+                onChange: this.changeField.bind(this, 'create', field.name)
+              })}
+            </div>
+          );
+        };
+        let isRequired = (f) => {
+          return f.required != null ? f.required : true;
+        };
+
+        let fields = this.state.createFieldList;
+        let requiredFields = fields.filter(f => isRequired(f)).map(f => renderField(f));
+        let optionalFields = fields.filter(f => !isRequired(f)).map(f => renderField(f));
+        form = (
+          <Form onSubmit={this.createIssue} submitLabel='Create Issue' footerClass="">
+            <h5>Required Fields</h5>
+            {requiredFields}
+            {optionalFields.length ? <h5>Optional Fields</h5> : null}
+            {optionalFields}
+          </Form>
+        );
+      }
+    } else {
+      form = super.renderForm();
+    }
+
+    return form;
+  }
+}
+
+export default IssueActions;
diff --git a/src/new_sentry_plugins/jira/static/jira/components/settings.jsx b/src/new_sentry_plugins/jira/static/jira/components/settings.jsx
new file mode 100644
index 0000000000..eb67f8eece
--- /dev/null
+++ b/src/new_sentry_plugins/jira/static/jira/components/settings.jsx
@@ -0,0 +1,180 @@
+import React from 'react';
+import _ from 'lodash';
+import {Form, FormState, LoadingIndicator, plugins} from 'sentry';
+
+
+class Settings extends plugins.BasePlugin.DefaultSettings {
+  constructor(props) {
+    super(props);
+    this.PAGE_FIELD_LIST = {
+      '0': ['instance_url', 'username', 'password'],
+      '1': ['default_project'],
+      '2': ['ignored_fields','default_priority', 'default_issue_type', 'auto_create']
+    }
+
+    this.back = this.back.bind(this);
+    this.startEditing = this.startEditing.bind(this);
+    this.isLastPage = this.isLastPage.bind(this);
+
+    Object.assign(this.state, {
+      page: 0
+    });
+  }
+
+  isConfigured(state) {
+    state = state || this.state;
+    return !!(this.state.formData && this.state.formData.default_project);
+  }
+
+  isLastPage() {
+    return this.state.page === 2;
+  }
+
+  fetchData() {
+    // This is mostly copy paste of parent class
+    // except for setting edit state
+    this.api.request(this.getPluginEndpoint(), {
+      success: data => {
+        let formData = {};
+        let initialData = {};
+        data.config.forEach((field) => {
+          formData[field.name] = field.value || field.defaultValue;
+          initialData[field.name] = field.value;
+        });
+        this.setState({
+          fieldList: data.config,
+          formData: formData,
+          initialData: initialData,
+          // start off in edit mode if there isn't a project set
+          editing: !(formData && formData.default_project),
+        // call this here to prevent FormState.READY from being
+        // set before fieldList is
+        }, this.onLoadSuccess);
+      },
+      error: this.onLoadError
+    });
+  }
+
+  startEditing() {
+    this.setState({editing: true});
+  }
+
+  onSubmit() {
+    if (_.isEqual(this.state.initialData, this.state.formData)) {
+      if (this.isLastPage()) {
+        this.setState({editing: false, page: 0})
+      } else {
+        this.setState({page: this.state.page + 1});
+      }
+      this.onSaveSuccess(this.onSaveComplete);
+      return;
+    }
+    let formData = Object.assign({}, this.state.formData);
+    // if the project has changed, it's likely these values aren't valid anymore
+    if (formData.default_project !== this.state.initialData.default_project) {
+      formData.default_issue_type = null;
+      formData.default_priority = null;
+    }
+    this.api.request(this.getPluginEndpoint(), {
+      data: formData,
+      method: 'PUT',
+      success: this.onSaveSuccess.bind(this, data => {
+        let formData = {};
+        let initialData = {};
+        data.config.forEach((field) => {
+          formData[field.name] = field.value || field.defaultValue;
+          initialData[field.name] = field.value;
+        });
+        let state = {
+          formData: formData,
+          initialData: initialData,
+          errors: {},
+          fieldList: data.config
+        };
+        if (this.isLastPage()) {
+          state.editing = false;
+          state.page = 0;
+        } else {
+          state.page = this.state.page + 1;
+        }
+        this.setState(state);
+      }),
+      error: this.onSaveError.bind(this, error => {
+        this.setState({
+          errors: (error.responseJSON || {}).errors || {},
+        });
+      }),
+      complete: this.onSaveComplete
+    });
+  }
+
+  back(ev) {
+    ev.preventDefault();
+    if (this.state.state === FormState.SAVING) {
+      return;
+    }
+    this.setState({
+      page: this.state.page - 1
+    });
+  }
+
+  render() {
+    if (this.state.state === FormState.LOADING) {
+      return <LoadingIndicator />;
+    }
+
+    if (this.state.state === FormState.ERROR && !this.state.fieldList) {
+      return (
+        <div className="alert alert-error m-b-1">
+          An unknown error occurred. Need help with this? <a href="https://sentry.io/support/">Contact support</a>
+        </div>
+      );
+    }
+
+    let isSaving = this.state.state === FormState.SAVING;
+
+    let fields;
+    let onSubmit;
+    let submitLabel;
+    if (this.state.editing) {
+      fields = this.state.fieldList.filter(f => {
+        return this.PAGE_FIELD_LIST[this.state.page].includes(f.name);
+      });
+      onSubmit = this.onSubmit;
+      submitLabel = this.isLastPage() ? 'Finish' : 'Save and Continue';
+    } else {
+      fields = this.state.fieldList.map(f => {
+        return Object.assign({}, f, {readonly: true});
+      });
+      onSubmit = this.startEditing;
+      submitLabel = 'Edit';
+    }
+    return (
+      <Form onSubmit={onSubmit}
+            submitDisabled={isSaving}
+            submitLabel={submitLabel}
+            extraButton={this.state.page === 0 ? null :
+                         <a href="#"
+                            className={'btn btn-default pull-left' + (isSaving ? ' disabled' : '')}
+                            onClick={this.back}>Back</a>}>
+        {this.state.errors.__all__ &&
+          <div className="alert alert-block alert-error">
+            <ul>
+              <li>{this.state.errors.__all__}</li>
+            </ul>
+          </div>
+        }
+        {fields.map(f => {
+          return this.renderField({
+            config: f,
+            formData: this.state.formData,
+            formErrors: this.state.errors,
+            onChange: this.changeField.bind(this, f.name)
+          });
+        })}
+      </Form>
+    );
+  }
+}
+
+export default Settings;
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js b/src/new_sentry_plugins/jira/static/jira/dist/jira.js
new file mode 100644
index 0000000000..c873c4a4a7
--- /dev/null
+++ b/src/new_sentry_plugins/jira/static/jira/dist/jira.js
@@ -0,0 +1,2 @@
+!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=27)}([function(t,e){t.exports=React},function(t,e){t.exports=SentryApp},function(t,e,n){var r=n(10);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){var r=n(5);t.exports=function(t,e){return r(t,e)}},function(t,e,n){var r=n(6),o=n(26);t.exports=function t(e,n,i,a,u){return e===n||(null==e||null==n||!o(e)&&!o(n)?e!=e&&n!=n:r(e,n,i,a,t,u))}},function(t,e,n){var r=n(7),o=n(14),i=n(19),a=n(20),u=n(23),c=n(3),s=n(24),f=n(25),l=1,p="[object Arguments]",y="[object Array]",b="[object Object]",v=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,h,g,m){var d=c(t),O=c(e),S=d?y:u(t),j=O?y:u(e),_=(S=S==p?b:S)==b,P=(j=j==p?b:j)==b,w=S==j;if(w&&s(t)){if(!s(e))return!1;d=!0,_=!1}if(w&&!_)return m||(m=new r),d||f(t)?o(t,e,n,h,g,m):i(t,e,S,n,h,g,m);if(!(n&l)){var E=_&&v.call(t,"__wrapped__"),D=P&&v.call(e,"__wrapped__");if(E||D){var L=E?t.value():t,k=D?e.value():e;return m||(m=new r),g(L,k,n,h,m)}}return!!w&&(m||(m=new r),a(t,e,n,h,g,m))}},function(t,e,n){var r=n(8),o=n(9),i=n(11),a=n(12),u=n(13);function c(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=o,c.prototype.get=i,c.prototype.has=a,c.prototype.set=u,t.exports=c},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(2),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():o.call(e,n,1),--this.size,0))}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(2);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(2);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(2);t.exports=function(t,e){var n=this.__data__,o=r(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this}},function(t,e,n){var r=n(15),o=n(16),i=n(17),a=1,u=2;t.exports=function(t,e,n,c,s,f){var l=n&a,p=t.length,y=e.length;if(p!=y&&!(l&&y>p))return!1;var b=f.get(t);if(b&&f.get(e))return b==e;var v=-1,h=!0,g=n&u?new r:void 0;for(f.set(t,e),f.set(e,t);++v<p;){var m=t[v],d=e[v];if(c)var O=l?c(d,m,v,e,t,f):c(m,d,v,t,e,f);if(void 0!==O){if(O)continue;h=!1;break}if(g){if(!o(e,function(t,e){if(!i(g,e)&&(m===t||s(m,t,n,c,f)))return g.push(e)})){h=!1;break}}else if(m!==d&&!s(m,d,n,c,f)){h=!1;break}}return f.delete(t),f.delete(e),h}},function(t,e,n){var r=n(3);t.exports=function(){if(!arguments.length)return[];var t=arguments[0];return r(t)?t:[t]}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(18);t.exports=function(t,e){return!(null==t||!t.length)&&r(t,e,0)>-1}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,o=t.length;++r<o;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(21),o=1,i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,a,u,c){var s=n&o,f=r(t),l=f.length;if(l!=r(e).length&&!s)return!1;for(var p=l;p--;){var y=f[p];if(!(s?y in e:i.call(e,y)))return!1}var b=c.get(t);if(b&&c.get(e))return b==e;var v=!0;c.set(t,e),c.set(e,t);for(var h=s;++p<l;){var g=t[y=f[p]],m=e[y];if(a)var d=s?a(m,g,y,e,t,c):a(g,m,y,t,e,c);if(!(void 0===d?g===m||u(g,m,n,a,c):d)){v=!1;break}h||(h="constructor"==y)}if(v&&!h){var O=t.constructor,S=e.constructor;O!=S&&"constructor"in t&&"constructor"in e&&!("function"==typeof O&&O instanceof O&&"function"==typeof S&&S instanceof S)&&(v=!1)}return c.delete(t),c.delete(e),v}},function(t,e,n){var r=n(22)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){t.exports=function(){return!1}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(1),a=n(4),u=n.n(a);function c(t){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function p(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var y=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,(n=!(o=f(e).call(this,t))||"object"!==c(o)&&"function"!=typeof o?p(r):o).PAGE_FIELD_LIST={0:["instance_url","username","password"],1:["default_project"],2:["ignored_fields","default_priority","default_issue_type","auto_create"]},n.back=n.back.bind(p(p(n))),n.startEditing=n.startEditing.bind(p(p(n))),n.isLastPage=n.isLastPage.bind(p(p(n))),Object.assign(n.state,{page:0}),n}var n,r,a;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,i["plugins"].BasePlugin.DefaultSettings),n=e,(r=[{key:"isConfigured",value:function(t){return t=t||this.state,!(!this.state.formData||!this.state.formData.default_project)}},{key:"isLastPage",value:function(){return 2===this.state.page}},{key:"fetchData",value:function(){var t=this;this.api.request(this.getPluginEndpoint(),{success:function(e){var n={},r={};e.config.forEach(function(t){n[t.name]=t.value||t.defaultValue,r[t.name]=t.value}),t.setState({fieldList:e.config,formData:n,initialData:r,editing:!(n&&n.default_project)},t.onLoadSuccess)},error:this.onLoadError})}},{key:"startEditing",value:function(){this.setState({editing:!0})}},{key:"onSubmit",value:function(){var t=this;if(u()(this.state.initialData,this.state.formData))return this.isLastPage()?this.setState({editing:!1,page:0}):this.setState({page:this.state.page+1}),void this.onSaveSuccess(this.onSaveComplete);var e=Object.assign({},this.state.formData);e.default_project!==this.state.initialData.default_project&&(e.default_issue_type=null,e.default_priority=null),this.api.request(this.getPluginEndpoint(),{data:e,method:"PUT",success:this.onSaveSuccess.bind(this,function(e){var n={},r={};e.config.forEach(function(t){n[t.name]=t.value||t.defaultValue,r[t.name]=t.value});var o={formData:n,initialData:r,errors:{},fieldList:e.config};t.isLastPage()?(o.editing=!1,o.page=0):o.page=t.state.page+1,t.setState(o)}),error:this.onSaveError.bind(this,function(e){t.setState({errors:(e.responseJSON||{}).errors||{}})}),complete:this.onSaveComplete})}},{key:"back",value:function(t){t.preventDefault(),this.state.state!==i.FormState.SAVING&&this.setState({page:this.state.page-1})}},{key:"render",value:function(){var t=this;if(this.state.state===i.FormState.LOADING)return o.a.createElement(i.LoadingIndicator,null);if(this.state.state===i.FormState.ERROR&&!this.state.fieldList)return o.a.createElement("div",{className:"alert alert-error m-b-1"},"An unknown error occurred. Need help with this? ",o.a.createElement("a",{href:"https://sentry.io/support/"},"Contact support"));var e,n,r,a=this.state.state===i.FormState.SAVING;return this.state.editing?(e=this.state.fieldList.filter(function(e){return t.PAGE_FIELD_LIST[t.state.page].includes(e.name)}),n=this.onSubmit,r=this.isLastPage()?"Finish":"Save and Continue"):(e=this.state.fieldList.map(function(t){return Object.assign({},t,{readonly:!0})}),n=this.startEditing,r="Edit"),o.a.createElement(i.Form,{onSubmit:n,submitDisabled:a,submitLabel:r,extraButton:0===this.state.page?null:o.a.createElement("a",{href:"#",className:"btn btn-default pull-left"+(a?" disabled":""),onClick:this.back},"Back")},this.state.errors.__all__&&o.a.createElement("div",{className:"alert alert-block alert-error"},o.a.createElement("ul",null,o.a.createElement("li",null,this.state.errors.__all__))),e.map(function(e){return t.renderField({config:e,formData:t.state.formData,formErrors:t.state.errors,onChange:t.changeField.bind(t,e.name)})}))}}])&&s(n.prototype,r),a&&s(n,a),e}();function b(t){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function h(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function g(t,e){return!e||"object"!==b(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function m(t,e,n){return(m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=d(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function d(t){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function O(t,e){return(O=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var S=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),g(this,d(e).apply(this,arguments))}var n,r,a;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&O(t,e)}(e,i["plugins"].DefaultIssuePlugin.DefaultIssueActions),n=e,(r=[{key:"changeField",value:function(t,e,n){var r=this,o=t+"FormData",a=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){v(t,e,n[e])})}return t}({},this.state[o],v({},e,n)),u=v({},o,a);if("issuetype"===e)return u.state=i.FormState.LOADING,void this.setState(u,this.onLoad.bind(this,function(){r.api.request(r.getPluginCreateEndpoint()+"?issuetype="+encodeURIComponent(n),{success:function(t){var e=r.state.createFormData,n={};t.forEach(function(t){var r;r=t.choices&&!t.choices.find(function(n){return n[0]===e[t.name]})?t.default:e[t.name]||t.default,n[t.name]=r}),r.setState({createFieldList:t,error:null,loading:!1,createFormData:n},r.onLoadSuccess)},error:r.errorHandler})}));this.setState(u)}},{key:"renderForm",value:function(){var t,n=this;if("create"===this.props.actionType){if(this.state.createFieldList){var r=function(t){return t.has_autocomplete&&(t=Object.assign({url:"/api/0/issues/"+n.getGroup().id+"/plugins/"+n.props.plugin.slug+"/autocomplete"},t)),o.a.createElement("div",{key:t.name},n.renderField({config:t,formData:n.state.createFormData,onChange:n.changeField.bind(n,"create",t.name)}))},a=function(t){return null==t.required||t.required},u=this.state.createFieldList,c=u.filter(function(t){return a(t)}).map(function(t){return r(t)}),s=u.filter(function(t){return!a(t)}).map(function(t){return r(t)});t=o.a.createElement(i.Form,{onSubmit:this.createIssue,submitLabel:"Create Issue",footerClass:""},o.a.createElement("h5",null,"Required Fields"),c,s.length?o.a.createElement("h5",null,"Optional Fields"):null,s)}}else t=m(d(e.prototype),"renderForm",this).call(this);return t}}])&&h(n.prototype,r),a&&h(n,a),e}();function j(t){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _(){return(_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function P(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e){return!e||"object"!==j(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function E(t){return(E=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function D(t,e){return(D=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var L=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),w(this,E(e).apply(this,arguments))}var n,r,a;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&D(t,e)}(e,i["plugins"].DefaultIssuePlugin),n=e,(r=[{key:"renderSettings",value:function(t){return o.a.createElement(y,_({plugin:this},t))}},{key:"renderGroupActions",value:function(t){return o.a.createElement(S,_({plugin:this},t))}}])&&P(n.prototype,r),a&&P(n,a),e}();L.displayName="Jira",i.plugins.add("jira",L);e.default=L}]);
+//# sourceMappingURL=jira.js.map
\ No newline at end of file
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.gz b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.gz
new file mode 100644
index 0000000000..82d142b47f
Binary files /dev/null and b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.gz differ
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map
new file mode 100644
index 0000000000..a5e771f6bd
--- /dev/null
+++ b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///external \"SentryApp\"","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_assocIndexOf.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isArray.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isEqual.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIsEqual.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIsEqualDeep.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_Stack.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheClear.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheDelete.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/eq.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheGet.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheHas.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheSet.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalArrays.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_SetCache.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_arraySome.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_cacheHas.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIndexOf.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalByTag.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalObjects.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_getAllKeys.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_overArg.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_getTag.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isBuffer.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isTypedArray.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isObjectLike.js","webpack:///./components/settings.jsx","webpack:///./components/issueActions.jsx","webpack:///./jira.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","SentryApp","eq","array","length","isArray","Array","baseIsEqual","other","baseIsEqualDeep","isObjectLike","bitmask","customizer","stack","Stack","equalArrays","equalByTag","equalObjects","getTag","isBuffer","isTypedArray","COMPARE_PARTIAL_FLAG","argsTag","arrayTag","objectTag","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","ListCache","entries","index","this","clear","entry","set","has","__data__","size","assocIndexOf","splice","data","pop","undefined","push","SetCache","arraySome","cacheHas","COMPARE_UNORDERED_FLAG","isPartial","arrLength","othLength","stacked","result","seen","arrValue","othValue","compared","othIndex","arguments","predicate","baseIndexOf","fromIndex","getAllKeys","objProps","objLength","skipCtor","objValue","objCtor","constructor","othCtor","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","Settings","props","_this","_classCallCheck","_getPrototypeOf","PAGE_FIELD_LIST","0","1","2","back","_assertThisInitialized","startEditing","isLastPage","assign","state","page","plugins","BasePlugin","DefaultSettings","formData","default_project","_this2","api","request","getPluginEndpoint","success","initialData","config","forEach","field","defaultValue","setState","fieldList","editing","onLoadSuccess","error","onLoadError","_this3","isEqual_default","onSaveSuccess","onSaveComplete","default_issue_type","default_priority","method","errors","onSaveError","responseJSON","complete","ev","preventDefault","FormState","SAVING","_this4","LOADING","external_React_default","a","createElement","external_SentryApp_","ERROR","className","href","fields","onSubmit","submitLabel","isSaving","filter","f","includes","map","readonly","submitDisabled","extraButton","onClick","__all__","renderField","formErrors","onChange","changeField","IssueActions","DefaultIssuePlugin","DefaultIssueActions","action","_objectSpread","_defineProperty","onLoad","getPluginCreateEndpoint","encodeURIComponent","oldData","createFormData","val","choices","find","default","createFieldList","loading","errorHandler","form","actionType","has_autocomplete","url","getGroup","id","plugin","slug","isRequired","required","requiredFields","optionalFields","createIssue","footerClass","_get","issueActions_getPrototypeOf","Jira","settings","_extends","issueActions","displayName","add"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oBClFAhC,EAAAD,QAAAkC,qBCAAjC,EAAAD,QAAAmC,2BCAA,IAAAC,EAAStC,EAAQ,IAoBjBG,EAAAD,QAVA,SAAAqC,EAAAZ,GAEA,IADA,IAAAa,EAAAD,EAAAC,OACAA,KACA,GAAAF,EAAAC,EAAAC,GAAA,GAAAb,GACA,OAAAa,EAGA,yBCMA,IAAAC,EAAAC,MAAAD,QAEAtC,EAAAD,QAAAuC,mBCzBA,IAAAE,EAAkB3C,EAAQ,GAkC1BG,EAAAD,QAJA,SAAAmB,EAAAuB,GACA,OAAAD,EAAAtB,EAAAuB,qBC/BA,IAAAC,EAAsB7C,EAAQ,GAC9B8C,EAAmB9C,EAAQ,IA0B3BG,EAAAD,QAVA,SAAAyC,EAAAtB,EAAAuB,EAAAG,EAAAC,EAAAC,GACA,OAAA5B,IAAAuB,IAGA,MAAAvB,GAAA,MAAAuB,IAAAE,EAAAzB,KAAAyB,EAAAF,GACAvB,MAAAuB,KAEAC,EAAAxB,EAAAuB,EAAAG,EAAAC,EAAAL,EAAAM,sBCxBA,IAAAC,EAAYlD,EAAQ,GACpBmD,EAAkBnD,EAAQ,IAC1BoD,EAAiBpD,EAAQ,IACzBqD,EAAmBrD,EAAQ,IAC3BsD,EAAatD,EAAQ,IACrByC,EAAczC,EAAQ,GACtBuD,EAAevD,EAAQ,IACvBwD,EAAmBxD,EAAQ,IAG3ByD,EAAA,EAGAC,EAAA,qBACAC,EAAA,iBACAC,EAAA,kBAMA3B,EAHAnB,OAAAkB,UAGAC,eA6DA9B,EAAAD,QA7CA,SAAA4B,EAAAc,EAAAG,EAAAC,EAAAa,EAAAZ,GACA,IAAAa,EAAArB,EAAAX,GACAiC,EAAAtB,EAAAG,GACAoB,EAAAF,EAAAH,EAAAL,EAAAxB,GACAmC,EAAAF,EAAAJ,EAAAL,EAAAV,GAKAsB,GAHAF,KAAAN,EAAAE,EAAAI,IAGAJ,EACAO,GAHAF,KAAAP,EAAAE,EAAAK,IAGAL,EACAQ,EAAAJ,GAAAC,EAEA,GAAAG,GAAAb,EAAAzB,GAAA,CACA,IAAAyB,EAAAX,GACA,SAEAkB,GAAA,EACAI,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADAjB,MAAA,IAAAC,GACAY,GAAAN,EAAA1B,GACAqB,EAAArB,EAAAc,EAAAG,EAAAC,EAAAa,EAAAZ,GACAG,EAAAtB,EAAAc,EAAAoB,EAAAjB,EAAAC,EAAAa,EAAAZ,GAEA,KAAAF,EAAAU,GAAA,CACA,IAAAY,EAAAH,GAAAjC,EAAA1B,KAAAuB,EAAA,eACAwC,EAAAH,GAAAlC,EAAA1B,KAAAqC,EAAA,eAEA,GAAAyB,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAAvC,EAAAT,QAAAS,EACA0C,EAAAF,EAAA1B,EAAAvB,QAAAuB,EAGA,OADAK,MAAA,IAAAC,GACAW,EAAAU,EAAAC,EAAAzB,EAAAC,EAAAC,IAGA,QAAAmB,IAGAnB,MAAA,IAAAC,GACAG,EAAAvB,EAAAc,EAAAG,EAAAC,EAAAa,EAAAZ,sBC/EA,IAAAwB,EAAqBzE,EAAQ,GAC7B0E,EAAsB1E,EAAQ,GAC9B2E,EAAmB3E,EAAQ,IAC3B4E,EAAmB5E,EAAQ,IAC3B6E,EAAmB7E,EAAQ,IAS3B,SAAA8E,EAAAC,GACA,IAAAC,GAAA,EACAxC,EAAA,MAAAuC,EAAA,EAAAA,EAAAvC,OAGA,IADAyC,KAAAC,UACAF,EAAAxC,GAAA,CACA,IAAA2C,EAAAJ,EAAAC,GACAC,KAAAG,IAAAD,EAAA,GAAAA,EAAA,KAKAL,EAAA9C,UAAAkD,MAAAT,EACAK,EAAA9C,UAAA,OAAA0C,EACAI,EAAA9C,UAAAf,IAAA0D,EACAG,EAAA9C,UAAAqD,IAAAT,EACAE,EAAA9C,UAAAoD,IAAAP,EAEA1E,EAAAD,QAAA4E,iBCnBA3E,EAAAD,QALA,WACA+E,KAAAK,SAAA,GACAL,KAAAM,KAAA,oBCTA,IAAAC,EAAmBxF,EAAQ,GAM3ByF,EAHA/C,MAAAV,UAGAyD,OA4BAtF,EAAAD,QAjBA,SAAAyB,GACA,IAAA+D,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAA/D,GAEA,QAAAqD,EAAA,IAIAA,GADAU,EAAAlD,OAAA,EAEAkD,EAAAC,MAEAF,EAAAlF,KAAAmF,EAAAV,EAAA,KAEAC,KAAAM,KACA,oBCKApF,EAAAD,QAJA,SAAAmB,EAAAuB,GACA,OAAAvB,IAAAuB,GAAAvB,MAAAuB,uBCjCA,IAAA4C,EAAmBxF,EAAQ,GAkB3BG,EAAAD,QAPA,SAAAyB,GACA,IAAA+D,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAA/D,GAEA,OAAAqD,EAAA,OAAAY,EAAAF,EAAAV,GAAA,qBCfA,IAAAQ,EAAmBxF,EAAQ,GAe3BG,EAAAD,QAJA,SAAAyB,GACA,OAAA6D,EAAAP,KAAAK,SAAA3D,IAAA,oBCZA,IAAA6D,EAAmBxF,EAAQ,GAyB3BG,EAAAD,QAbA,SAAAyB,EAAAN,GACA,IAAAqE,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAA/D,GAQA,OANAqD,EAAA,KACAC,KAAAM,KACAG,EAAAG,KAAA,CAAAlE,EAAAN,KAEAqE,EAAAV,GAAA,GAAA3D,EAEA4D,uBCtBA,IAAAa,EAAe9F,EAAQ,IACvB+F,EAAgB/F,EAAQ,IACxBgG,EAAehG,EAAQ,IAGvByD,EAAA,EACAwC,EAAA,EA4EA9F,EAAAD,QA7DA,SAAAqC,EAAAK,EAAAG,EAAAC,EAAAa,EAAAZ,GACA,IAAAiD,EAAAnD,EAAAU,EACA0C,EAAA5D,EAAAC,OACA4D,EAAAxD,EAAAJ,OAEA,GAAA2D,GAAAC,KAAAF,GAAAE,EAAAD,GACA,SAGA,IAAAE,EAAApD,EAAAhC,IAAAsB,GACA,GAAA8D,GAAApD,EAAAhC,IAAA2B,GACA,OAAAyD,GAAAzD,EAEA,IAAAoC,GAAA,EACAsB,GAAA,EACAC,EAAAxD,EAAAkD,EAAA,IAAAH,OAAAF,EAMA,IAJA3C,EAAAmC,IAAA7C,EAAAK,GACAK,EAAAmC,IAAAxC,EAAAL,KAGAyC,EAAAmB,GAAA,CACA,IAAAK,EAAAjE,EAAAyC,GACAyB,EAAA7D,EAAAoC,GAEA,GAAAhC,EACA,IAAA0D,EAAAR,EACAlD,EAAAyD,EAAAD,EAAAxB,EAAApC,EAAAL,EAAAU,GACAD,EAAAwD,EAAAC,EAAAzB,EAAAzC,EAAAK,EAAAK,GAEA,QAAA2C,IAAAc,EAAA,CACA,GAAAA,EACA,SAEAJ,GAAA,EACA,MAGA,GAAAC,GACA,IAAAR,EAAAnD,EAAA,SAAA6D,EAAAE,GACA,IAAAX,EAAAO,EAAAI,KACAH,IAAAC,GAAA5C,EAAA2C,EAAAC,EAAA1D,EAAAC,EAAAC,IACA,OAAAsD,EAAAV,KAAAc,KAEW,CACXL,GAAA,EACA,YAEK,GACLE,IAAAC,IACA5C,EAAA2C,EAAAC,EAAA1D,EAAAC,EAAAC,GACA,CACAqD,GAAA,EACA,OAKA,OAFArD,EAAA,OAAAV,GACAU,EAAA,OAAAL,GACA0D,oBC/EA,IAAA7D,EAAczC,EAAQ,GA2CtBG,EAAAD,QARA,WACA,IAAA0G,UAAApE,OACA,SAEA,IAAAnB,EAAAuF,UAAA,GACA,OAAAnE,EAAApB,KAAA,CAAAA,mBClBAlB,EAAAD,QAZA,SAAAqC,EAAAsE,GAIA,IAHA,IAAA7B,GAAA,EACAxC,EAAA,MAAAD,EAAA,EAAAA,EAAAC,SAEAwC,EAAAxC,GACA,GAAAqE,EAAAtE,EAAAyC,KAAAzC,GACA,SAGA,2BCnBA,IAAAuE,EAAkB9G,EAAQ,IAgB1BG,EAAAD,QALA,SAAAqC,EAAAlB,GAEA,QADA,MAAAkB,MAAAC,SACAsE,EAAAvE,EAAAlB,EAAA,sBCSAlB,EAAAD,QAZA,SAAAqC,EAAAlB,EAAA0F,GAIA,IAHA,IAAA/B,EAAA+B,EAAA,EACAvE,EAAAD,EAAAC,SAEAwC,EAAAxC,GACA,GAAAD,EAAAyC,KAAA3D,EACA,OAAA2D,EAGA,yBCiBA7E,EAAAD,QAJA,SAAAmB,EAAAuB,GACA,OAAAvB,IAAAuB,GAAAvB,MAAAuB,uBCjCA,IAAAoE,EAAiBhH,EAAQ,IAGzByD,EAAA,EAMAxB,EAHAnB,OAAAkB,UAGAC,eA+EA9B,EAAAD,QAhEA,SAAA4B,EAAAc,EAAAG,EAAAC,EAAAa,EAAAZ,GACA,IAAAiD,EAAAnD,EAAAU,EACAwD,EAAAD,EAAAlF,GACAoF,EAAAD,EAAAzE,OAIA,GAAA0E,GAHAF,EAAApE,GACAJ,SAEA0D,EACA,SAGA,IADA,IAAAlB,EAAAkC,EACAlC,KAAA,CACA,IAAArD,EAAAsF,EAAAjC,GACA,KAAAkB,EAAAvE,KAAAiB,EAAAX,EAAA1B,KAAAqC,EAAAjB,IACA,SAIA,IAAA0E,EAAApD,EAAAhC,IAAAa,GACA,GAAAuE,GAAApD,EAAAhC,IAAA2B,GACA,OAAAyD,GAAAzD,EAEA,IAAA0D,GAAA,EACArD,EAAAmC,IAAAtD,EAAAc,GACAK,EAAAmC,IAAAxC,EAAAd,GAGA,IADA,IAAAqF,EAAAjB,IACAlB,EAAAkC,GAAA,CAEA,IAAAE,EAAAtF,EADAH,EAAAsF,EAAAjC,IAEAyB,EAAA7D,EAAAjB,GAEA,GAAAqB,EACA,IAAA0D,EAAAR,EACAlD,EAAAyD,EAAAW,EAAAzF,EAAAiB,EAAAd,EAAAmB,GACAD,EAAAoE,EAAAX,EAAA9E,EAAAG,EAAAc,EAAAK,GAGA,UAAA2C,IAAAc,EACAU,IAAAX,GAAA5C,EAAAuD,EAAAX,EAAA1D,EAAAC,EAAAC,GACAyD,GACA,CACAJ,GAAA,EACA,MAEAa,MAAA,eAAAxF,GAEA,GAAA2E,IAAAa,EAAA,CACA,IAAAE,EAAAvF,EAAAwF,YACAC,EAAA3E,EAAA0E,YAGAD,GAAAE,GACA,gBAAAzF,GAAA,gBAAAc,KACA,mBAAAyE,mBACA,mBAAAE,qBACAjB,GAAA,GAKA,OAFArD,EAAA,OAAAnB,GACAmB,EAAA,OAAAL,GACA0D,oBCrFA,IAGAkB,EAHcxH,EAAQ,GAGtByH,CAAA3G,OAAA4G,KAAA5G,QAEAX,EAAAD,QAAAsH,iBCSArH,EAAAD,QANA,SAAAyH,EAAAC,GACA,gBAAAC,GACA,OAAAF,EAAAC,EAAAC,qBCTA,IAOAC,EAPAhH,OAAAkB,UAOA+F,SAaA5H,EAAAD,QAJA,SAAAmB,GACA,OAAAyG,EAAAvH,KAAAc,mBCDAlB,EAAAD,QAJA,WACA,yBCGAC,EAAAD,QAJA,WACA,yBCcAC,EAAAD,QAJA,SAAAmB,GACA,aAAAA,GAAA,iBAAAA,0zBC0Je2G,cA7Kb,SAAAA,EAAYC,GAAO,IAAAC,MAAA,mGAAAC,CAAAlD,KAAA+C,KACjB/C,MAAAiD,MAAAE,EAAAJ,GAAAzH,KAAA0E,KAAMgD,mDACDI,gBAAkB,CACrBC,EAAK,CAAC,eAAgB,WAAY,YAClCC,EAAK,CAAC,mBACNC,EAAK,CAAC,iBAAiB,mBAAoB,qBAAsB,gBAGnEN,EAAKO,KAAOP,EAAKO,KAAK7G,KAAV8G,IAAAR,KACZA,EAAKS,aAAeT,EAAKS,aAAa/G,KAAlB8G,IAAAR,KACpBA,EAAKU,WAAaV,EAAKU,WAAWhH,KAAhB8G,IAAAR,KAElBpH,OAAO+H,OAAOX,EAAKY,MAAO,CACxBC,KAAM,IAbSb,wPADEc,aAAQC,WAAWC,4DAkB3BJ,GAEX,OADAA,EAAQA,GAAS7D,KAAK6D,SACZ7D,KAAK6D,MAAMK,WAAYlE,KAAK6D,MAAMK,SAASC,sDAIrD,OAA2B,IAApBnE,KAAK6D,MAAMC,yCAGR,IAAAM,EAAApE,KAGVA,KAAKqE,IAAIC,QAAQtE,KAAKuE,oBAAqB,CACzCC,QAAS,SAAA/D,GACP,IAAIyD,EAAW,GACXO,EAAc,GAClBhE,EAAKiE,OAAOC,QAAQ,SAACC,GACnBV,EAASU,EAAMlJ,MAAQkJ,EAAMxI,OAASwI,EAAMC,aAC5CJ,EAAYG,EAAMlJ,MAAQkJ,EAAMxI,QAElCgI,EAAKU,SAAS,CACZC,UAAWtE,EAAKiE,OAChBR,SAAUA,EACVO,YAAaA,EAEbO,UAAWd,GAAYA,EAASC,kBAG/BC,EAAKa,gBAEVC,MAAOlF,KAAKmF,qDAKdnF,KAAK8E,SAAS,CAACE,SAAS,uCAGf,IAAAI,EAAApF,KACT,GAAIqF,IAAUrF,KAAK6D,MAAMY,YAAazE,KAAK6D,MAAMK,UAO/C,OANIlE,KAAK2D,aACP3D,KAAK8E,SAAS,CAACE,SAAS,EAAOlB,KAAM,IAErC9D,KAAK8E,SAAS,CAAChB,KAAM9D,KAAK6D,MAAMC,KAAO,SAEzC9D,KAAKsF,cAActF,KAAKuF,gBAG1B,IAAIrB,EAAWrI,OAAO+H,OAAO,GAAI5D,KAAK6D,MAAMK,UAExCA,EAASC,kBAAoBnE,KAAK6D,MAAMY,YAAYN,kBACtDD,EAASsB,mBAAqB,KAC9BtB,EAASuB,iBAAmB,MAE9BzF,KAAKqE,IAAIC,QAAQtE,KAAKuE,oBAAqB,CACzC9D,KAAMyD,EACNwB,OAAQ,MACRlB,QAASxE,KAAKsF,cAAc3I,KAAKqD,KAAM,SAAAS,GACrC,IAAIyD,EAAW,GACXO,EAAc,GAClBhE,EAAKiE,OAAOC,QAAQ,SAACC,GACnBV,EAASU,EAAMlJ,MAAQkJ,EAAMxI,OAASwI,EAAMC,aAC5CJ,EAAYG,EAAMlJ,MAAQkJ,EAAMxI,QAElC,IAAIyH,EAAQ,CACVK,SAAUA,EACVO,YAAaA,EACbkB,OAAQ,GACRZ,UAAWtE,EAAKiE,QAEdU,EAAKzB,cACPE,EAAMmB,SAAU,EAChBnB,EAAMC,KAAO,GAEbD,EAAMC,KAAOsB,EAAKvB,MAAMC,KAAO,EAEjCsB,EAAKN,SAASjB,KAEhBqB,MAAOlF,KAAK4F,YAAYjJ,KAAKqD,KAAM,SAAAkF,GACjCE,EAAKN,SAAS,CACZa,QAAST,EAAMW,cAAgB,IAAIF,QAAU,OAGjDG,SAAU9F,KAAKuF,8CAIdQ,GACHA,EAAGC,iBACChG,KAAK6D,MAAMA,QAAUoC,YAAUC,QAGnClG,KAAK8E,SAAS,CACZhB,KAAM9D,KAAK6D,MAAMC,KAAO,qCAInB,IAAAqC,EAAAnG,KACP,GAAIA,KAAK6D,MAAMA,QAAUoC,YAAUG,QACjC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,iBAAD,MAGT,GAAIxG,KAAK6D,MAAMA,QAAUoC,YAAUQ,QAAUzG,KAAK6D,MAAMkB,UACtD,OACEsB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,2BAAf,mDACkDL,EAAAC,EAAAC,cAAA,KAAGI,KAAK,8BAAR,oBAKtD,IAEIC,EACAC,EACAC,EAJAC,EAAW/G,KAAK6D,MAAMA,QAAUoC,YAAUC,OAkB9C,OAbIlG,KAAK6D,MAAMmB,SACb4B,EAAS5G,KAAK6D,MAAMkB,UAAUiC,OAAO,SAAAC,GACnC,OAAOd,EAAK/C,gBAAgB+C,EAAKtC,MAAMC,MAAMoD,SAASD,EAAEvL,QAE1DmL,EAAW7G,KAAK6G,SAChBC,EAAc9G,KAAK2D,aAAe,SAAW,sBAE7CiD,EAAS5G,KAAK6D,MAAMkB,UAAUoC,IAAI,SAAAF,GAChC,OAAOpL,OAAO+H,OAAO,GAAIqD,EAAG,CAACG,UAAU,MAEzCP,EAAW7G,KAAK0D,aAChBoD,EAAc,QAGdT,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMK,SAAUA,EACVQ,eAAgBN,EAChBD,YAAaA,EACbQ,YAAiC,IAApBtH,KAAK6D,MAAMC,KAAa,KACxBuC,EAAAC,EAAAC,cAAA,KAAGI,KAAK,IACLD,UAAW,6BAA+BK,EAAW,YAAc,IACnEQ,QAASvH,KAAKwD,MAFjB,SAGhBxD,KAAK6D,MAAM8B,OAAO6B,SACjBnB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iCACbL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKvG,KAAK6D,MAAM8B,OAAO6B,WAI5BZ,EAAOO,IAAI,SAAAF,GACV,OAAOd,EAAKsB,YAAY,CACtB/C,OAAQuC,EACR/C,SAAUiC,EAAKtC,MAAMK,SACrBwD,WAAYvB,EAAKtC,MAAM8B,OACvBgC,SAAUxB,EAAKyB,YAAYjL,KAAKwJ,EAAMc,EAAEvL,0vCC5ErCmM,gaA3FY9D,aAAQ+D,mBAAmBC,+DACxCC,EAAQtM,EAAMU,GAAO,IAAA6G,EAAAjD,KAC3BtD,EAAMsL,EAAS,WACf9D,oUAAQ+D,CAAA,GACPjI,KAAK6D,MAAMnH,GADJwL,EAAA,GAETxM,EAAOU,IAENyH,EAAKqE,EAAA,GACNxL,EAAMwH,GAET,GAAa,cAATxI,EA6BF,OA5BAmI,EAAMA,MAAQoC,YAAUG,aACxBpG,KAAK8E,SAASjB,EAAO7D,KAAKmI,OAAOxL,KAAKqD,KAAM,WAC1CiD,EAAKoB,IAAIC,QAASrB,EAAKmF,0BACL,cAAgBC,mBAAmBjM,GAAS,CAC5DoI,QAAS,SAAC/D,GAGR,IAAI6H,EAAUrF,EAAKY,MAAM0E,eACrBA,EAAiB,GACrB9H,EAAKkE,QAAQ,SAACC,GACZ,IAAI4D,EAEFA,EADE5D,EAAM6D,UAAY7D,EAAM6D,QAAQC,KAAK,SAAAlN,GAAC,OAAIA,EAAE,KAAO8M,EAAQ1D,EAAMlJ,QAC7DkJ,EAAM+D,QAENL,EAAQ1D,EAAMlJ,OAASkJ,EAAM+D,QAErCJ,EAAe3D,EAAMlJ,MAAQ8M,IAE/BvF,EAAK6B,SAAS,CACZ8D,gBAAiBnI,EACjByE,MAAO,KACP2D,SAAS,EACTN,eAAgBA,GACftF,EAAKgC,gBAEVC,MAAOjC,EAAK6F,kBAKlB9I,KAAK8E,SAASjB,wCAGH,IACPkF,EADO3E,EAAApE,KAIX,GAA8B,WAA1BA,KAAKgD,MAAMgG,YACb,GAAIhJ,KAAK6D,MAAM+E,gBAAiB,CAC9B,IAAInB,EAAc,SAAC7C,GAOjB,OANIA,EAAMqE,mBACRrE,EAAQ/I,OAAO+H,OAAO,CACpBsF,IAAM,iBAAmB9E,EAAK+E,WAAWC,GACnC,YAAchF,EAAKpB,MAAMqG,OAAOC,KAAO,iBAC5C1E,IAGHyB,EAAAC,EAAAC,cAAA,OAAK7J,IAAKkI,EAAMlJ,MACb0I,EAAKqD,YAAY,CAChB/C,OAAQE,EACRV,SAAUE,EAAKP,MAAM0E,eACrBZ,SAAUvD,EAAKwD,YAAYjL,KAAKyH,EAAM,SAAUQ,EAAMlJ,UAK1D6N,EAAa,SAACtC,GAChB,OAAqB,MAAdA,EAAEuC,UAAmBvC,EAAEuC,UAG5B5C,EAAS5G,KAAK6D,MAAM+E,gBACpBa,EAAiB7C,EAAOI,OAAO,SAAAC,GAAC,OAAIsC,EAAWtC,KAAIE,IAAI,SAAAF,GAAC,OAAIQ,EAAYR,KACxEyC,EAAiB9C,EAAOI,OAAO,SAAAC,GAAC,OAAKsC,EAAWtC,KAAIE,IAAI,SAAAF,GAAC,OAAIQ,EAAYR,KAC7E8B,EACE1C,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMK,SAAU7G,KAAK2J,YAAa7C,YAAY,eAAe8C,YAAY,IACvEvD,EAAAC,EAAAC,cAAA,6BACCkD,EACAC,EAAenM,OAAS8I,EAAAC,EAAAC,cAAA,6BAA2B,KACnDmD,SAKPX,EAAIc,EAAAC,EAAAjC,EAAA9K,WAAA,aAAAiD,MAAA1E,KAAA0E,MAGN,OAAO+I,iiCCrFLgB,gaAAahG,aAAQ+D,iEACR9E,GACX,OAAOqD,EAAAC,EAAAC,cAACyD,EAADC,EAAA,CAAUZ,OAAQrJ,MAAUgD,+CAGpBA,GACf,OAAOqD,EAAAC,EAAAC,cAAC2D,EAADD,EAAA,CAAcZ,OAAQrJ,MAAUgD,yCAI/C+G,EAAKI,YAAc,OAEnBpG,UAAQqG,IAAI,OAAQL,GAELA","file":"jira.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = React;","module.exports = SentryApp;","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Form, FormState, LoadingIndicator, plugins} from 'sentry';\n\n\nclass Settings extends plugins.BasePlugin.DefaultSettings {\n  constructor(props) {\n    super(props);\n    this.PAGE_FIELD_LIST = {\n      '0': ['instance_url', 'username', 'password'],\n      '1': ['default_project'],\n      '2': ['ignored_fields','default_priority', 'default_issue_type', 'auto_create']\n    }\n\n    this.back = this.back.bind(this);\n    this.startEditing = this.startEditing.bind(this);\n    this.isLastPage = this.isLastPage.bind(this);\n\n    Object.assign(this.state, {\n      page: 0\n    });\n  }\n\n  isConfigured(state) {\n    state = state || this.state;\n    return !!(this.state.formData && this.state.formData.default_project);\n  }\n\n  isLastPage() {\n    return this.state.page === 2;\n  }\n\n  fetchData() {\n    // This is mostly copy paste of parent class\n    // except for setting edit state\n    this.api.request(this.getPluginEndpoint(), {\n      success: data => {\n        let formData = {};\n        let initialData = {};\n        data.config.forEach((field) => {\n          formData[field.name] = field.value || field.defaultValue;\n          initialData[field.name] = field.value;\n        });\n        this.setState({\n          fieldList: data.config,\n          formData: formData,\n          initialData: initialData,\n          // start off in edit mode if there isn't a project set\n          editing: !(formData && formData.default_project),\n        // call this here to prevent FormState.READY from being\n        // set before fieldList is\n        }, this.onLoadSuccess);\n      },\n      error: this.onLoadError\n    });\n  }\n\n  startEditing() {\n    this.setState({editing: true});\n  }\n\n  onSubmit() {\n    if (_.isEqual(this.state.initialData, this.state.formData)) {\n      if (this.isLastPage()) {\n        this.setState({editing: false, page: 0})\n      } else {\n        this.setState({page: this.state.page + 1});\n      }\n      this.onSaveSuccess(this.onSaveComplete);\n      return;\n    }\n    let formData = Object.assign({}, this.state.formData);\n    // if the project has changed, it's likely these values aren't valid anymore\n    if (formData.default_project !== this.state.initialData.default_project) {\n      formData.default_issue_type = null;\n      formData.default_priority = null;\n    }\n    this.api.request(this.getPluginEndpoint(), {\n      data: formData,\n      method: 'PUT',\n      success: this.onSaveSuccess.bind(this, data => {\n        let formData = {};\n        let initialData = {};\n        data.config.forEach((field) => {\n          formData[field.name] = field.value || field.defaultValue;\n          initialData[field.name] = field.value;\n        });\n        let state = {\n          formData: formData,\n          initialData: initialData,\n          errors: {},\n          fieldList: data.config\n        };\n        if (this.isLastPage()) {\n          state.editing = false;\n          state.page = 0;\n        } else {\n          state.page = this.state.page + 1;\n        }\n        this.setState(state);\n      }),\n      error: this.onSaveError.bind(this, error => {\n        this.setState({\n          errors: (error.responseJSON || {}).errors || {},\n        });\n      }),\n      complete: this.onSaveComplete\n    });\n  }\n\n  back(ev) {\n    ev.preventDefault();\n    if (this.state.state === FormState.SAVING) {\n      return;\n    }\n    this.setState({\n      page: this.state.page - 1\n    });\n  }\n\n  render() {\n    if (this.state.state === FormState.LOADING) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.state === FormState.ERROR && !this.state.fieldList) {\n      return (\n        <div className=\"alert alert-error m-b-1\">\n          An unknown error occurred. Need help with this? <a href=\"https://sentry.io/support/\">Contact support</a>\n        </div>\n      );\n    }\n\n    let isSaving = this.state.state === FormState.SAVING;\n\n    let fields;\n    let onSubmit;\n    let submitLabel;\n    if (this.state.editing) {\n      fields = this.state.fieldList.filter(f => {\n        return this.PAGE_FIELD_LIST[this.state.page].includes(f.name);\n      });\n      onSubmit = this.onSubmit;\n      submitLabel = this.isLastPage() ? 'Finish' : 'Save and Continue';\n    } else {\n      fields = this.state.fieldList.map(f => {\n        return Object.assign({}, f, {readonly: true});\n      });\n      onSubmit = this.startEditing;\n      submitLabel = 'Edit';\n    }\n    return (\n      <Form onSubmit={onSubmit}\n            submitDisabled={isSaving}\n            submitLabel={submitLabel}\n            extraButton={this.state.page === 0 ? null :\n                         <a href=\"#\"\n                            className={'btn btn-default pull-left' + (isSaving ? ' disabled' : '')}\n                            onClick={this.back}>Back</a>}>\n        {this.state.errors.__all__ &&\n          <div className=\"alert alert-block alert-error\">\n            <ul>\n              <li>{this.state.errors.__all__}</li>\n            </ul>\n          </div>\n        }\n        {fields.map(f => {\n          return this.renderField({\n            config: f,\n            formData: this.state.formData,\n            formErrors: this.state.errors,\n            onChange: this.changeField.bind(this, f.name)\n          });\n        })}\n      </Form>\n    );\n  }\n}\n\nexport default Settings;\n","import React from 'react';\nimport {Form, FormState, plugins} from 'sentry';\n\n\nclass IssueActions extends plugins.DefaultIssuePlugin.DefaultIssueActions {\n  changeField(action, name, value) {\n    let key = action + 'FormData';\n    let formData = {\n      ...this.state[key],\n      [name]: value\n    };\n    let state = {\n      [key]: formData\n    };\n    if (name === 'issuetype') {\n      state.state = FormState.LOADING;\n      this.setState(state, this.onLoad.bind(this, () => {\n        this.api.request((this.getPluginCreateEndpoint() +\n                          '?issuetype=' + encodeURIComponent(value)), {\n          success: (data) => {\n            // Try not to change things the user might have edited\n            // unless they're no longer valid\n            let oldData = this.state.createFormData;\n            let createFormData = {};\n            data.forEach((field) => {\n              let val;\n              if (field.choices && !field.choices.find(c => c[0] === oldData[field.name])) {\n                val = field.default;\n              } else {\n                val = oldData[field.name] || field.default;\n              }\n              createFormData[field.name] = val;\n            });\n            this.setState({\n              createFieldList: data,\n              error: null,\n              loading: false,\n              createFormData: createFormData\n            }, this.onLoadSuccess);\n          },\n          error: this.errorHandler\n        });\n      }))\n      return;\n    }\n    this.setState(state);\n  }\n\n  renderForm() {\n    let form;\n\n    // For create form, split into required and optional fields\n    if (this.props.actionType === 'create') {\n      if (this.state.createFieldList) {\n        let renderField = (field) => {\n          if (field.has_autocomplete) {\n            field = Object.assign({\n              url: ('/api/0/issues/' + this.getGroup().id +\n                    '/plugins/' + this.props.plugin.slug + '/autocomplete')\n            }, field);\n          }\n          return (\n            <div key={field.name}>\n              {this.renderField({\n                config: field,\n                formData: this.state.createFormData,\n                onChange: this.changeField.bind(this, 'create', field.name)\n              })}\n            </div>\n          );\n        };\n        let isRequired = (f) => {\n          return f.required != null ? f.required : true;\n        };\n\n        let fields = this.state.createFieldList;\n        let requiredFields = fields.filter(f => isRequired(f)).map(f => renderField(f));\n        let optionalFields = fields.filter(f => !isRequired(f)).map(f => renderField(f));\n        form = (\n          <Form onSubmit={this.createIssue} submitLabel='Create Issue' footerClass=\"\">\n            <h5>Required Fields</h5>\n            {requiredFields}\n            {optionalFields.length ? <h5>Optional Fields</h5> : null}\n            {optionalFields}\n          </Form>\n        );\n      }\n    } else {\n      form = super.renderForm();\n    }\n\n    return form;\n  }\n}\n\nexport default IssueActions;\n","import React from 'react';\nimport {plugins} from 'sentry';\n\nimport Settings from './components/settings';\nimport IssueActions from './components/issueActions';\n\nclass Jira extends plugins.DefaultIssuePlugin {\n    renderSettings(props) {\n        return <Settings plugin={this} {...props} />;\n    }\n\n    renderGroupActions(props) {\n        return <IssueActions plugin={this} {...props} />\n    }\n}\n\nJira.displayName = 'Jira';\n\nplugins.add('jira', Jira);\n\nexport default Jira;\n"],"sourceRoot":""}
\ No newline at end of file
diff --git a/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map.gz b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map.gz
new file mode 100644
index 0000000000..7c78ddae86
Binary files /dev/null and b/src/new_sentry_plugins/jira/static/jira/dist/jira.js.map.gz differ
diff --git a/src/new_sentry_plugins/jira/static/jira/jira.jsx b/src/new_sentry_plugins/jira/static/jira/jira.jsx
new file mode 100644
index 0000000000..ff155cd002
--- /dev/null
+++ b/src/new_sentry_plugins/jira/static/jira/jira.jsx
@@ -0,0 +1,21 @@
+import React from 'react';
+import {plugins} from 'sentry';
+
+import Settings from './components/settings';
+import IssueActions from './components/issueActions';
+
+class Jira extends plugins.DefaultIssuePlugin {
+    renderSettings(props) {
+        return <Settings plugin={this} {...props} />;
+    }
+
+    renderGroupActions(props) {
+        return <IssueActions plugin={this} {...props} />
+    }
+}
+
+Jira.displayName = 'Jira';
+
+plugins.add('jira', Jira);
+
+export default Jira;
diff --git a/src/new_sentry_plugins/jira_ac/__init__.py b/src/new_sentry_plugins/jira_ac/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/jira_ac/forms.py b/src/new_sentry_plugins/jira_ac/forms.py
new file mode 100644
index 0000000000..5ade282010
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/forms.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import
+from django import forms
+
+
+class JiraConfigForm(forms.Form):
+    organization = forms.ChoiceField(
+        label="Sentry Organization", choices=tuple(), widget=forms.Select(attrs={"class": "select"})
+    )
+
+    def __init__(self, organizations, *args, **kwargs):
+        super(JiraConfigForm, self).__init__(*args, **kwargs)
+        self.fields["organization"].choices = organizations
diff --git a/src/new_sentry_plugins/jira_ac/migrations/0001_initial.py b/src/new_sentry_plugins/jira_ac/migrations/0001_initial.py
new file mode 100644
index 0000000000..ffb89f892f
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/migrations/0001_initial.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+from __future__ import unicode_literals
+
+from django.db import migrations, models
+import sentry.db.models.fields.bounded
+import sentry.db.models.fields.foreignkey
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Adding indexes to large tables. These indexes should be created concurrently,
+    #   unfortunately we can't run migrations outside of a transaction until Django
+    #   1.10. So until then these should be run manually.
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    dependencies = [("sentry", "0003_auto_20191022_0122")]
+
+    operations = [
+        migrations.CreateModel(
+            name="JiraTenant",
+            fields=[
+                (
+                    "id",
+                    sentry.db.models.fields.bounded.BoundedBigAutoField(
+                        serialize=False, primary_key=True
+                    ),
+                ),
+                ("client_key", models.CharField(unique=True, max_length=50)),
+                ("secret", models.CharField(max_length=100)),
+                ("base_url", models.CharField(max_length=60)),
+                ("public_key", models.CharField(max_length=250)),
+                (
+                    "organization",
+                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
+                        related_name="jira_tenant_set",
+                        blank=True,
+                        to="sentry.Organization",
+                        null=True,
+                    ),
+                ),
+            ],
+            options={"db_table": "jira_ac_tenant"},
+        )
+    ]
diff --git a/src/new_sentry_plugins/jira_ac/migrations/__init__.py b/src/new_sentry_plugins/jira_ac/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/new_sentry_plugins/jira_ac/models.py b/src/new_sentry_plugins/jira_ac/models.py
new file mode 100644
index 0000000000..7f4e94f4a2
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/models.py
@@ -0,0 +1,39 @@
+from __future__ import absolute_import
+
+from time import time
+
+import jwt
+
+from django.db import models
+
+from sentry.db.models import Model, FlexibleForeignKey
+from new_sentry_plugins.jira_ac.utils import get_query_hash
+
+
+class JiraTenant(Model):
+    __core__ = False
+    organization = FlexibleForeignKey(
+        "sentry.Organization", null=True, blank=True, related_name="jira_tenant_set"
+    )
+    client_key = models.CharField(max_length=50, unique=True)
+    secret = models.CharField(max_length=100)
+    base_url = models.CharField(max_length=60)
+    public_key = models.CharField(max_length=250)
+
+    class Meta:
+        app_label = "jira_ac"
+        db_table = "jira_ac_tenant"
+
+    def get_token(self, issuer, uri, method):
+        now = int(time())
+        payload = {
+            "iss": issuer,
+            "iat": now,
+            "exp": now + 60 * 60,
+            "qsh": get_query_hash(uri, method),
+            "aud": issuer,
+        }
+        return jwt.encode(payload, self.secret, algorithm="HS256")
+
+    def is_configured(self):
+        return self.organization is not None
diff --git a/src/new_sentry_plugins/jira_ac/plugin.py b/src/new_sentry_plugins/jira_ac/plugin.py
new file mode 100644
index 0000000000..0ce9a064e7
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/plugin.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+from sentry.plugins.base import Plugin
+
+from new_sentry_plugins.base import CorePluginMixin
+
+
+class JiraACPlugin(CorePluginMixin, Plugin):
+    description = "Add a Sentry UI Plugin to JIRA"
+    slug = "jira-ac"
+    title = "JIRA Atlassian Connect"
+    conf_title = title
+    conf_key = "jira-ac"
+
+    def get_url_module(self):
+        return "new_sentry_plugins.jira_ac.urls"
diff --git a/src/new_sentry_plugins/jira_ac/south_migrations/0001_initial.py b/src/new_sentry_plugins/jira_ac/south_migrations/0001_initial.py
new file mode 100644
index 0000000000..2f09cdfa6e
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/south_migrations/0001_initial.py
@@ -0,0 +1,260 @@
+# -*- coding: utf-8 -*-
+from south.utils import datetime_utils as datetime
+from south.db import db
+from south.v2 import SchemaMigration
+from django.db import models
+
+
+class Migration(SchemaMigration):
+    def forwards(self, orm):
+        # Adding model 'JiraTenant'
+        db.create_table(
+            "jira_ac_tenant",
+            (
+                (
+                    "id",
+                    self.gf("sentry.db.models.fields.bounded.BoundedBigAutoField")(
+                        primary_key=True
+                    ),
+                ),
+                (
+                    "organization",
+                    self.gf("sentry.db.models.fields.foreignkey.FlexibleForeignKey")(
+                        blank=True,
+                        related_name="jira_tenant_set",
+                        null=True,
+                        to=orm["sentry.Organization"],
+                    ),
+                ),
+                (
+                    "client_key",
+                    self.gf("django.db.models.fields.CharField")(unique=True, max_length=50),
+                ),
+                ("secret", self.gf("django.db.models.fields.CharField")(max_length=100)),
+                ("base_url", self.gf("django.db.models.fields.CharField")(max_length=60)),
+                ("public_key", self.gf("django.db.models.fields.CharField")(max_length=250)),
+            ),
+        )
+        db.send_create_signal("jira_ac", ["JiraTenant"])
+
+    def backwards(self, orm):
+        # Deleting model 'JiraTenant'
+        db.delete_table("jira_ac_tenant")
+
+    models = {
+        "jira_ac.jiratenant": {
+            "Meta": {"object_name": "JiraTenant", "db_table": "'jira_ac_tenant'"},
+            "base_url": ("django.db.models.fields.CharField", [], {"max_length": "60"}),
+            "client_key": (
+                "django.db.models.fields.CharField",
+                [],
+                {"unique": "True", "max_length": "50"},
+            ),
+            "id": (
+                "sentry.db.models.fields.bounded.BoundedBigAutoField",
+                [],
+                {"primary_key": "True"},
+            ),
+            "organization": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {
+                    "blank": "True",
+                    "related_name": "'jira_tenant_set'",
+                    "null": "True",
+                    "to": "orm['sentry.Organization']",
+                },
+            ),
+            "public_key": ("django.db.models.fields.CharField", [], {"max_length": "250"}),
+            "secret": ("django.db.models.fields.CharField", [], {"max_length": "100"}),
+        },
+        "sentry.organization": {
+            "Meta": {"object_name": "Organization"},
+            "date_added": (
+                "django.db.models.fields.DateTimeField",
+                [],
+                {"default": "datetime.datetime.now"},
+            ),
+            "default_role": (
+                "django.db.models.fields.CharField",
+                [],
+                {"default": "'member'", "max_length": "32"},
+            ),
+            "flags": ("django.db.models.fields.BigIntegerField", [], {"default": "1"}),
+            "id": (
+                "sentry.db.models.fields.bounded.BoundedBigAutoField",
+                [],
+                {"primary_key": "True"},
+            ),
+            "members": (
+                "django.db.models.fields.related.ManyToManyField",
+                [],
+                {
+                    "related_name": "'org_memberships'",
+                    "symmetrical": "False",
+                    "through": "orm['sentry.OrganizationMember']",
+                    "to": "orm['sentry.User']",
+                },
+            ),
+            "name": ("django.db.models.fields.CharField", [], {"max_length": "64"}),
+            "slug": (
+                "django.db.models.fields.SlugField",
+                [],
+                {"unique": "True", "max_length": "50"},
+            ),
+            "status": (
+                "sentry.db.models.fields.bounded.BoundedPositiveIntegerField",
+                [],
+                {"default": "0"},
+            ),
+        },
+        "sentry.organizationmember": {
+            "Meta": {
+                "unique_together": "(('organization', 'user'), ('organization', 'email'))",
+                "object_name": "OrganizationMember",
+            },
+            "date_added": (
+                "django.db.models.fields.DateTimeField",
+                [],
+                {"default": "datetime.datetime.now"},
+            ),
+            "email": (
+                "django.db.models.fields.EmailField",
+                [],
+                {"max_length": "75", "null": "True", "blank": "True"},
+            ),
+            "flags": ("django.db.models.fields.BigIntegerField", [], {"default": "0"}),
+            "has_global_access": ("django.db.models.fields.BooleanField", [], {"default": "True"}),
+            "id": (
+                "sentry.db.models.fields.bounded.BoundedBigAutoField",
+                [],
+                {"primary_key": "True"},
+            ),
+            "organization": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {"related_name": "'member_set'", "to": "orm['sentry.Organization']"},
+            ),
+            "role": (
+                "django.db.models.fields.CharField",
+                [],
+                {"default": "'member'", "max_length": "32"},
+            ),
+            "teams": (
+                "django.db.models.fields.related.ManyToManyField",
+                [],
+                {
+                    "to": "orm['sentry.Team']",
+                    "symmetrical": "False",
+                    "through": "orm['sentry.OrganizationMemberTeam']",
+                    "blank": "True",
+                },
+            ),
+            "token": (
+                "django.db.models.fields.CharField",
+                [],
+                {"max_length": "64", "unique": "True", "null": "True", "blank": "True"},
+            ),
+            "type": (
+                "sentry.db.models.fields.bounded.BoundedPositiveIntegerField",
+                [],
+                {"default": "50", "blank": "True"},
+            ),
+            "user": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {
+                    "blank": "True",
+                    "related_name": "'sentry_orgmember_set'",
+                    "null": "True",
+                    "to": "orm['sentry.User']",
+                },
+            ),
+        },
+        "sentry.organizationmemberteam": {
+            "Meta": {
+                "unique_together": "(('team', 'organizationmember'),)",
+                "object_name": "OrganizationMemberTeam",
+                "db_table": "'sentry_organizationmember_teams'",
+            },
+            "id": ("sentry.db.models.fields.bounded.BoundedAutoField", [], {"primary_key": "True"}),
+            "is_active": ("django.db.models.fields.BooleanField", [], {"default": "True"}),
+            "organizationmember": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {"to": "orm['sentry.OrganizationMember']"},
+            ),
+            "team": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {"to": "orm['sentry.Team']"},
+            ),
+        },
+        "sentry.team": {
+            "Meta": {"unique_together": "(('organization', 'slug'),)", "object_name": "Team"},
+            "date_added": (
+                "django.db.models.fields.DateTimeField",
+                [],
+                {"default": "datetime.datetime.now", "null": "True"},
+            ),
+            "id": (
+                "sentry.db.models.fields.bounded.BoundedBigAutoField",
+                [],
+                {"primary_key": "True"},
+            ),
+            "name": ("django.db.models.fields.CharField", [], {"max_length": "64"}),
+            "organization": (
+                "sentry.db.models.fields.foreignkey.FlexibleForeignKey",
+                [],
+                {"to": "orm['sentry.Organization']"},
+            ),
+            "slug": ("django.db.models.fields.SlugField", [], {"max_length": "50"}),
+            "status": (
+                "sentry.db.models.fields.bounded.BoundedPositiveIntegerField",
+                [],
+                {"default": "0"},
+            ),
+        },
+        "sentry.user": {
+            "Meta": {"object_name": "User", "db_table": "'auth_user'"},
+            "date_joined": (
+                "django.db.models.fields.DateTimeField",
+                [],
+                {"default": "datetime.datetime.now"},
+            ),
+            "email": (
+                "django.db.models.fields.EmailField",
+                [],
+                {"max_length": "75", "blank": "True"},
+            ),
+            "id": ("sentry.db.models.fields.bounded.BoundedAutoField", [], {"primary_key": "True"}),
+            "is_active": ("django.db.models.fields.BooleanField", [], {"default": "True"}),
+            "is_managed": ("django.db.models.fields.BooleanField", [], {"default": "False"}),
+            "is_password_expired": (
+                "django.db.models.fields.BooleanField",
+                [],
+                {"default": "False"},
+            ),
+            "is_staff": ("django.db.models.fields.BooleanField", [], {"default": "False"}),
+            "is_superuser": ("django.db.models.fields.BooleanField", [], {"default": "False"}),
+            "last_login": (
+                "django.db.models.fields.DateTimeField",
+                [],
+                {"default": "datetime.datetime.now"},
+            ),
+            "last_password_change": ("django.db.models.fields.DateTimeField", [], {"null": "True"}),
+            "name": (
+                "django.db.models.fields.CharField",
+                [],
+                {"max_length": "200", "db_column": "'first_name'", "blank": "True"},
+            ),
+            "password": ("django.db.models.fields.CharField", [], {"max_length": "128"}),
+            "username": (
+                "django.db.models.fields.CharField",
+                [],
+                {"unique": "True", "max_length": "128"},
+            ),
+        },
+    }
+
+    complete_apps = ["jira_ac"]
diff --git a/src/new_sentry_plugins/jira_ac/south_migrations/__init__.py b/src/new_sentry_plugins/jira_ac/south_migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/new_sentry_plugins/jira_ac/templates/base.html b/src/new_sentry_plugins/jira_ac/templates/base.html
new file mode 100644
index 0000000000..00eb5cecce
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/templates/base.html
@@ -0,0 +1,132 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+  <link rel="stylesheet" href="//aui-cdn.atlassian.com/aui-adg/5.10.1/css/aui.min.css" media="all">
+  <style type="text/css">
+    ul {
+      padding-left: 0px;
+    }
+    ul li.aui-group {
+      border-top: 1px solid #e9e9e9;
+      list-style-type: none;
+      margin: 0px;
+      padding: 10px 0px;
+    }
+
+    .reporter {
+      position: relative;
+    }
+
+    .reporter img {
+      border-radius: 3px;
+      position: absolute;
+      left: 0;
+      top: 4px;
+      width: 32px;
+      height: 32px;
+    }
+
+    .reporter span {
+      display: block;
+      padding-left: 42px;
+      min-height: 32px;
+    }
+
+    .aui-item.error-level {
+      padding-top: 2px;
+      width: 14px;
+    }
+
+    .aui-item.error-level span {
+      width: 14px;
+      height: 14px;
+      display: inline-block;
+      border-radius: 30px;
+    }
+
+    .aui-group>.aui-item+.aui-item {
+      padding-left: 10px;
+    }
+
+    .aui-item.error-level .sentry-error {
+      background-color: #d04437;
+    }
+
+    .aui-item.error-level .sentry-info {
+      background-color: #205081;
+    }
+
+    .aui-item.error-level .sentry-warning {
+      background-color: #f6c342;
+    }
+
+    #content {
+      background-color: #ffffff;
+    }
+
+    .last-seen {
+      color: #999ca0;
+    }
+
+    #login .aui-page-panel {
+      border: none;
+      min-height: 150px;
+    }
+
+    body {
+      /* fixes scroll twitching */
+      overflow: hidden;
+    }
+
+    body.aui-page-focused.aui-page-size-medium #page {
+      padding-bottom: 25px;
+    }
+
+  </style>
+  <script src="{{ ac_js_src }}"></script>
+  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
+  <script src="//aui-cdn.atlassian.com/aui-adg/5.10.1/js/aui.min.js"></script>
+  <script type="text/javascript">
+    /*
+     * JavaScript Pretty Date
+     * Copyright (c) 2011 John Resig (ejohn.org)
+     * Licensed under the MIT and GPL licenses.
+     * http://ejohn.org/files/pretty.js
+     */
+
+    // Takes an ISO time and returns a string representing how
+    // long ago the date represents.
+
+    // modified to work with our UTC timestamps,
+    // fix 1 weeks ago pluralization, add month
+    // functionality and tweak language
+    function prettyDate(time){
+      var date = new Date((time || "").replace(/-/g,"/").replace(/[TZ]/g," ")),
+          utcNow = new Date((new Date()).toISOString().replace(/-/g,"/").replace(/[TZ]/g," ")),
+        diff = (utcNow.getTime() - date.getTime()) / 1000,
+        day_diff = Math.floor(diff / 86400);
+
+      if ( isNaN(day_diff) || day_diff < 0)
+        return;
+
+      return day_diff == 0 && (
+          diff < 60 && "seconds" ||
+          diff < 120 && "1 minute" ||
+          diff < 3600 && Math.floor( diff / 60 ) + " minutes" ||
+          diff < 7200 && "1 hour" ||
+          diff < 86400 && Math.floor( diff / 3600 ) + " hours") ||
+        day_diff == 1 && "a day" ||
+        day_diff < 7 && day_diff + " days" ||
+        day_diff < 31 && (Math.ceil( day_diff / 7 ) + " week" +
+                          (Math.ceil( day_diff / 7 ) === 1 ? "" : "s")) ||
+        day_diff < 60 && "a month" || (Math.ceil(day_diff / 30)) + ' months';
+    }
+  </script>
+</head>
+<body class="{{ body_class }}">
+  <section id="content" role="main">
+    {% block content %}{% endblock %}
+  </section>
+  {% block javascript %}{% endblock %}
+</body>
+</html>
diff --git a/src/new_sentry_plugins/jira_ac/templates/config.html b/src/new_sentry_plugins/jira_ac/templates/config.html
new file mode 100644
index 0000000000..c0dbd880ec
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/templates/config.html
@@ -0,0 +1,38 @@
+{% extends 'base.html' %}
+
+{% block content %}
+  <div id="page">
+    <div class="aui-page-panel">
+      <div class="aui-page-panel-inner">
+        <section class="aui-page-panel-content">
+          {% if is_configured %}
+            <section class="aui-page-panel-item">
+              <div class="aui-message aui-message-info">
+                  <p>This plugin has already been configured, but you can update the Sentry organization.</p>
+              </div>
+            </section>
+          {% endif %}
+            <form class="aui" action="" method="post">
+              {% csrf_token %}
+              {% for field in form %}
+                <div class="field-group">
+                  {{ field.errors }}
+                  {{ field.label_tag }} {{ field }}
+                  <div class="description">Choose which Sentry Organization to link</div>
+                </div>
+              {% endfor %}
+              <div class="field-group">
+                <button class="aui-button aui-button-primary" type="submit">
+                  {% if is_configured %}
+                    Update Plugin
+                  {% else %}
+                    Configure Plugin
+                  {% endif %}
+                </button>
+              </div>
+            </form>
+        </section>
+      </div>
+    </div>
+  </div>
+{% endblock %}
diff --git a/src/new_sentry_plugins/jira_ac/templates/error.html b/src/new_sentry_plugins/jira_ac/templates/error.html
new file mode 100644
index 0000000000..4f9591801a
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/templates/error.html
@@ -0,0 +1,13 @@
+{% extends 'base.html' %}
+
+{% block content %}
+  <div class="aui-message aui-message-error">
+      <p>
+        {% if error_message %}
+          {{ error_message }}
+        {% else %}
+          An unknown error occurred
+        {% endif %}
+      </p>
+  </div>
+{% endblock %}
diff --git a/src/new_sentry_plugins/jira_ac/templates/signin.html b/src/new_sentry_plugins/jira_ac/templates/signin.html
new file mode 100644
index 0000000000..a222d4dbd2
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/templates/signin.html
@@ -0,0 +1,48 @@
+{% extends 'base.html' %}
+
+{% block content %}
+  <div id="login">
+    <div class="aui-page-panel">
+      <div class="aui-page-panel-inner">
+        <div class="aui-group">
+          <div class="aui-message aui-message-info">
+              <p>In order to use this plugin, you must be signed into Sentry.</p>
+          </div>
+        </div>
+        <div class="aui-group">
+          <div class="aui-item">
+            <a class="aui-button aui-button-default" href="{{ login_url }}" target="_blank">
+              Sign In to Sentry
+            </a>
+          </div>
+        </div>
+      </div>
+    </div>
+  </div>
+{% endblock %}
+{% block javascript %}
+  <script type="text/javascript">
+    (function() {
+      var hidden, visibilityChange;
+      if (typeof document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support
+        hidden = 'hidden';
+        visibilityChange = 'visibilitychange';
+      } else if (typeof document.mozHidden !== 'undefined') {
+        hidden = 'mozHidden';
+        visibilityChange = 'mozvisibilitychange';
+      } else if (typeof document.msHidden !== 'undefined') {
+        hidden = 'msHidden';
+        visibilityChange = 'msvisibilitychange';
+      } else if (typeof document.webkitHidden !== 'undefined') {
+        hidden = 'webkitHidden';
+        visibilityChange = 'webkitvisibilitychange';
+      }
+      document.addEventListener(visibilityChange, function() {
+        // see if they've logged in while away from tab
+        if (!document[hidden]) {
+          window.location.reload();
+        }
+      });
+    })();
+  </script>
+{% endblock %}
diff --git a/src/new_sentry_plugins/jira_ac/templates/widget.html b/src/new_sentry_plugins/jira_ac/templates/widget.html
new file mode 100644
index 0000000000..35bfc7da92
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/templates/widget.html
@@ -0,0 +1,71 @@
+{% extends 'base.html' %}
+
+{% block content %}
+  <div id="reporter"></div>
+  <ul id="sentry-issues">
+  </ul>
+{% endblock %}
+{% block javascript %}
+  <script type="text/x-template" title="reporter-template">
+    <div class="reporter">
+      <img src="{avatarURL}"/>
+      <span><strong>{email}</strong> experienced {count}</span>
+    </div>
+  </script>
+  <script type="text/x-template" title="issue-template">
+    <li class="aui-group">
+      <div class="aui-item error-level">
+        <span class="sentry-{level}"></span>
+      </div>
+      <div class="aui-item">
+        <div><a href="{permalink}" target="_blank">{title}</a></div>
+        <div class="last-seen">{lastSeen} - {firstSeen}</div>
+      </div>
+    </li>
+  </script>
+  <script type="text/javascript">
+    (function() {
+      var issueKey = '{{ issue_key }}',
+          MAX_ISSUES = 5;
+
+      AP.require('request', function(request) {
+        request({
+          url: '/rest/api/latest/issue/' + issueKey,
+          success: function(responseText) {
+            var issue = JSON.parse(responseText),
+                reporter = issue.fields.reporter,
+                email = reporter.emailAddress,
+                url = ('{{ sentry_api_url }}' + '?limit=' + (MAX_ISSUES + 1) +
+                       '&email=' + encodeURIComponent(email));
+            $.get(url).done(function(issues) {
+              var $issuesEl = $('#sentry-issues'),
+                  $reporter = $('#reporter'),
+                  count = issues.length > MAX_ISSUES ? '5+' : issues.length;
+              $reporter.append(AJS.template.load('reporter-template').fill({
+                avatarURL: reporter.avatarUrls['48x48'],
+                email: email,
+                count: (count + ' issue' + (issues.length === 1 ? '' : 's') +
+                        (issues.length ? ':' : ''))
+              }));
+
+              var issue, level;
+              for (var i = 0; i < Math.min(issues.length, MAX_ISSUES); i++) {
+                issue = issues[i];
+                level = issue.level;
+                $issuesEl.append(AJS.template.load('issue-template').fill({
+                  level: level === 'fatal' ? 'error' : level,
+                  permalink: issue.permalink,
+                  title: issue.title,
+                  lastSeen: prettyDate(issue.lastSeen) + ' ago',
+                  firstSeen: prettyDate(issue.firstSeen) + ' old'
+                }));
+              }
+            }).fail(function() {
+              $('#reporter').text('Unable to fetch related issues. Please try again.')
+            });
+          }
+        });
+      });
+    })();
+  </script>
+{% endblock %}
diff --git a/src/new_sentry_plugins/jira_ac/urls.py b/src/new_sentry_plugins/jira_ac/urls.py
new file mode 100644
index 0000000000..e1f4e48edb
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/urls.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from django.conf.urls import patterns, url
+
+from new_sentry_plugins.jira_ac.views import (
+    JiraConfigView,
+    JiraDescriptorView,
+    JiraInstalledCallback,
+    JiraUIWidgetView,
+)
+
+urlpatterns = patterns(
+    "",
+    url(r"^plugin$", JiraUIWidgetView.as_view()),
+    url(r"^config$", JiraConfigView.as_view()),
+    url(r"^atlassian-connect\.json$", JiraDescriptorView.as_view()),
+    url(r"^installed$", JiraInstalledCallback.as_view()),
+)
diff --git a/src/new_sentry_plugins/jira_ac/utils.py b/src/new_sentry_plugins/jira_ac/utils.py
new file mode 100644
index 0000000000..5012531483
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/utils.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+import hashlib
+import jwt
+
+from six.moves.urllib.parse import quote
+
+from new_sentry_plugins.exceptions import ApiError
+
+
+def percent_encode(val):
+    # see https://en.wikipedia.org/wiki/Percent-encoding
+    return quote(val.encode("utf8", errors="replace")).replace("%7E", "~").replace("/", "%2F")
+
+
+def get_query_hash(uri, method, query_params=None):
+    # see
+    # https://developer.atlassian.com/static/connect/docs/latest/concepts/understanding-jwt.html#qsh
+    uri = uri.rstrip("/")
+    method = method.upper()
+    if query_params is None:
+        query_params = {}
+
+    sorted_query = []
+    for k, v in sorted(query_params.items()):
+        # don't include jwt query param
+        if k != "jwt":
+            if isinstance(v, list):
+                param_val = [percent_encode(val) for val in v].join(",")
+            else:
+                param_val = percent_encode(v)
+            sorted_query.append("%s=%s" % (percent_encode(k), param_val))
+
+    query_string = "%s&%s&%s" % (method, uri, "&".join(sorted_query))
+    return hashlib.sha256(query_string.encode("utf8")).hexdigest()
+
+
+def get_jira_auth_from_request(request):
+    # https://developer.atlassian.com/static/connect/docs/latest/concepts/authentication.html
+    # Extract the JWT token from the request's jwt query
+    # parameter or the authorization header.
+    token = request.GET.get("jwt")
+    if token is None:
+        raise ApiError("No token parameter")
+    # Decode the JWT token, without verification. This gives
+    # you a header JSON object, a claims JSON object, and a signature.
+    decoded = jwt.decode(token, verify=False)
+    # Extract the issuer ('iss') claim from the decoded, unverified
+    # claims object. This is the clientKey for the tenant - an identifier
+    # for the Atlassian application making the call
+    issuer = decoded["iss"]
+    # Look up the sharedSecret for the clientKey, as stored
+    # by the add-on during the installation handshake
+    from new_sentry_plugins.jira_ac.models import JiraTenant
+
+    jira_auth = JiraTenant.objects.get(client_key=issuer)
+    # Verify the signature with the sharedSecret and
+    # the algorithm specified in the header's alg field.
+    decoded_verified = jwt.decode(token, jira_auth.secret)
+    # Verify the query has not been tampered by Creating a Query Hash
+    # and comparing it against the qsh claim on the verified token.
+
+    # TODO: probably shouldn't need to hardcode get... for post maybe
+    # the secret should just be a hidden field in the form ?
+    qsh = get_query_hash(request.path, "GET", request.GET)
+    # qsh = get_query_hash(request.path, request.method, request.GET)
+    if qsh != decoded_verified["qsh"]:
+        raise ApiError("Query hash mismatch")
+
+    return jira_auth
diff --git a/src/new_sentry_plugins/jira_ac/views.py b/src/new_sentry_plugins/jira_ac/views.py
new file mode 100644
index 0000000000..2bfe41209c
--- /dev/null
+++ b/src/new_sentry_plugins/jira_ac/views.py
@@ -0,0 +1,194 @@
+from __future__ import absolute_import
+
+import json
+
+from six.moves.urllib.parse import urlparse
+
+from django.forms.utils import ErrorList
+from django.http import HttpResponse
+from django.views.decorators.csrf import csrf_exempt
+from django.views.generic import View
+from django.core.urlresolvers import reverse
+from django.utils.decorators import method_decorator
+
+from sentry.models import Organization
+from sentry.utils.http import absolute_uri
+from sentry.web.helpers import render_to_response
+
+from new_sentry_plugins.jira_ac.forms import JiraConfigForm
+from new_sentry_plugins.jira_ac.models import JiraTenant
+from new_sentry_plugins.jira_ac.utils import get_jira_auth_from_request, ApiError
+from jwt.exceptions import ExpiredSignatureError
+
+JIRA_KEY = "%s.jira_ac" % (urlparse(absolute_uri()).hostname,)
+
+
+class BaseJiraWidgetView(View):
+    jira_auth = None
+
+    def get_jira_auth(self):
+        if self.jira_auth is None:
+            self.jira_auth = get_jira_auth_from_request(self.request)
+        return self.jira_auth
+
+    def get_context(self):
+        return {
+            "ac_js_src": "%s%s%s"
+            % (
+                self.request.GET["xdm_e"],
+                self.request.GET.get("cp", ""),
+                "/atlassian-connect/all.js",
+            ),
+            "login_url": absolute_uri(reverse("sentry-login")),
+            "body_class": "",
+        }
+
+    def get_response(self, template, context=None):
+        context = context or self.get_context()
+        res = render_to_response(template, context, self.request)
+        res["X-Frame-Options"] = "ALLOW-FROM %s" % self.request.GET["xdm_e"]
+        return res
+
+
+class JiraUIWidgetView(BaseJiraWidgetView):
+    def get(self, request, *args, **kwargs):
+        try:
+            # make sure this exists and is valid
+            jira_auth = self.get_jira_auth()
+        except (ApiError, JiraTenant.DoesNotExist, ExpiredSignatureError):
+            return self.get_response("error.html")
+
+        if request.user.is_anonymous():
+            return self.get_response("signin.html")
+
+        org = jira_auth.organization
+        context = self.get_context()
+        if org is None:
+            context.update(
+                {
+                    "error_message": (
+                        "You still need to configure this plugin, which "
+                        "can be done from the Manage Add-ons page."
+                    )
+                }
+            )
+            return self.get_response("error.html", context)
+
+        context.update(
+            {
+                "sentry_api_url": absolute_uri(
+                    "/api/0/organizations/%s/users/issues/" % (org.slug,)
+                ),
+                "issue_key": self.request.GET.get("issueKey"),
+            }
+        )
+
+        return self.get_response("widget.html", context)
+
+
+class JiraConfigView(BaseJiraWidgetView):
+    def get_context(self):
+        context = super(JiraConfigView, self).get_context()
+        context["body_class"] = "aui-page-focused aui-page-size-medium"
+        return context
+
+    def get(self, request, *args, **kwargs):
+        try:
+            jira_auth = self.get_jira_auth()
+        except (ApiError, JiraTenant.DoesNotExist):
+            return self.get_response("error.html")
+
+        if request.user.is_anonymous():
+            return self.get_response("signin.html")
+
+        org = jira_auth.organization
+        form_context = None
+        if org:
+            form_context = {"organization": org.id}
+
+        form = JiraConfigForm([(o.id, o.name) for o in request.user.get_orgs()], form_context)
+        context = self.get_context()
+        context.update({"is_configured": jira_auth.is_configured(), "form": form})
+
+        return self.get_response("config.html", context)
+
+    def post(self, request, *args, **kwargs):
+        try:
+            jira_auth = get_jira_auth_from_request(request)
+        except (ApiError, JiraTenant.DoesNotExist):
+            self.get_response("error.html")
+
+        if request.user.is_anonymous():
+            return self.get_response("signin.html")
+
+        orgs = self.request.user.get_orgs()
+
+        form = JiraConfigForm([(o.id, o.name) for o in orgs], self.request.POST)
+
+        if form.is_valid():
+            try:
+                org = orgs.get(id=form.cleaned_data["organization"])
+            except Organization.DoesNotExist:
+                errors = form._errors.setdefault("organization", ErrorList())
+                errors.append("Invalid organization")
+            else:
+                jira_auth.update(organization=org)
+
+        context = self.get_context()
+        context.update({"is_configured": jira_auth.is_configured(), "form": form})
+
+        return self.get_response("config.html", context)
+
+
+class JiraDescriptorView(View):
+    def get(self, request, *args, **kwargs):
+        return HttpResponse(
+            json.dumps(
+                {
+                    "name": "Sentry for JIRA",
+                    "description": "Sentry add-on for JIRA",
+                    "key": JIRA_KEY,
+                    "baseUrl": absolute_uri(),
+                    "vendor": {"name": "Sentry", "url": "https://sentry.io"},
+                    "authentication": {"type": "jwt"},
+                    "lifecycle": {"installed": "/plugins/jira-ac/installed"},
+                    "apiVersion": 1,
+                    "modules": {
+                        "webPanels": [
+                            {
+                                "key": "sentry-issues",
+                                "location": "atl.jira.view.issue.right.context",
+                                "name": {"value": "Related Sentry Issues"},
+                                "url": "/plugins/jira-ac/plugin?issueKey={issue.key}",
+                            }
+                        ],
+                        "configurePage": {
+                            "url": "/plugins/jira-ac/config",
+                            "name": {"value": "Configure Sentry Add-on"},
+                            "key": "configure-sentry",
+                        },
+                    },
+                    "scopes": ["read"],
+                }
+            ),
+            content_type="application/json",
+        )
+
+
+class JiraInstalledCallback(View):
+    @method_decorator(csrf_exempt)
+    def dispatch(self, request, *args, **kwargs):
+        return super(JiraInstalledCallback, self).dispatch(request, *args, **kwargs)
+
+    @method_decorator(csrf_exempt)
+    def post(self, request, *args, **kwargs):
+        registration_info = json.loads(request.body)
+        JiraTenant.objects.create_or_update(
+            client_key=registration_info["clientKey"],
+            values={
+                "secret": registration_info["sharedSecret"],
+                "base_url": registration_info["baseUrl"],
+                "public_key": registration_info["publicKey"],
+            },
+        )
+        return HttpResponse(json.dumps({}), content_type="application/json")
diff --git a/src/new_sentry_plugins/pagerduty/__init__.py b/src/new_sentry_plugins/pagerduty/__init__.py
new file mode 100644
index 0000000000..97157bb135
--- /dev/null
+++ b/src/new_sentry_plugins/pagerduty/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-pagerduty")
diff --git a/src/new_sentry_plugins/pagerduty/client.py b/src/new_sentry_plugins/pagerduty/client.py
new file mode 100644
index 0000000000..6f0fbf31e2
--- /dev/null
+++ b/src/new_sentry_plugins/pagerduty/client.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+from sentry.utils.http import absolute_uri
+from new_sentry_plugins.client import ApiClient
+
+# https://v2.developer.pagerduty.com/docs/events-api
+INTEGRATION_API_URL = "https://events.pagerduty.com/generic/2010-04-15/create_event.json"
+
+
+class PagerDutyClient(ApiClient):
+    client = "sentry"
+    plugin_name = "pagerduty"
+    allow_redirects = False
+
+    def __init__(self, service_key=None):
+        self.service_key = service_key
+        super(PagerDutyClient, self).__init__()
+
+    def build_url(self, path):
+        return INTEGRATION_API_URL
+
+    def request(self, data):
+        payload = {"service_key": self.service_key}
+        payload.update(data)
+
+        return self._request(path="", method="post", data=payload)
+
+    def trigger_incident(
+        self,
+        description,
+        event_type,
+        details,
+        incident_key,
+        client=None,
+        client_url=None,
+        contexts=None,
+    ):
+        return self.request(
+            {
+                "event_type": event_type,
+                "description": description,
+                "details": details,
+                "incident_key": incident_key,
+                "client": client or self.client,
+                "client_url": client_url or absolute_uri(),
+                "contexts": contexts,
+            }
+        )
diff --git a/src/new_sentry_plugins/pagerduty/plugin.py b/src/new_sentry_plugins/pagerduty/plugin.py
new file mode 100644
index 0000000000..d8ad220e3c
--- /dev/null
+++ b/src/new_sentry_plugins/pagerduty/plugin.py
@@ -0,0 +1,97 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.plugins.bases.notify import NotifyPlugin
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+from .client import PagerDutyClient
+
+
+class PagerDutyPlugin(CorePluginMixin, NotifyPlugin):
+    description = "Send alerts to PagerDuty."
+    slug = "pagerduty"
+    title = "PagerDuty"
+    conf_key = slug
+    conf_title = title
+
+    def is_configured(self, project, **kwargs):
+        return bool(self.get_option("service_key", project))
+
+    def get_config(self, **kwargs):
+        service_key = self.get_option("service_key", kwargs["project"])
+        secret_field = get_secret_field_config(
+            service_key, "PagerDuty's Sentry service Integration Key", include_prefix=True
+        )
+        secret_field.update({"name": "service_key", "label": "Service Key"})
+        return [
+            secret_field,
+            {
+                "name": "routes",
+                "label": "Tag routing",
+                "type": "textarea",
+                "placeholder": "environment,production,KEY1\ndevice,Other,KEY2",
+                "required": False,
+                "help": (
+                    "Route each event to a different PagerDuty service key based "
+                    "on the event's tags. Each line should contain a tag, "
+                    "value, and service key separated by commas. The first "
+                    "line that matches a tag's key and value will send to that "
+                    "integration key instead of the main service key above."
+                ),
+            },
+        ]
+
+    def notify_users(self, group, event, fail_silently=False, **kwargs):
+        if not self.is_configured(group.project):
+            return
+
+        description = event.get_legacy_message()[:1024]
+
+        tags = dict(event.get_tags())
+        details = {
+            "event_id": event.event_id,
+            "project": group.project.name,
+            "release": event.get_tag("sentry:release"),
+            "platform": event.platform,
+            "culprit": event.culprit,
+            "datetime": event.datetime.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
+            "tags": tags,
+            "url": group.get_absolute_url(params={"referrer": "pagerduty_plugin"}),
+        }
+
+        service_key = self.get_option("service_key", group.project)
+
+        routes = self.get_option("routes", group.project) or ""
+        for route in (r.strip() for r in routes.split("\n")):
+            fields = [f.strip() for f in route.split(",")]
+            if len(fields) != 3:
+                continue
+            tag_key, tag_value, route_service_key = fields
+            if tag_key in tags and tags[tag_key] == tag_value:
+                service_key = route_service_key
+                break
+
+        client = PagerDutyClient(service_key=service_key)
+        try:
+            response = client.trigger_incident(
+                description=description,
+                event_type="trigger",
+                incident_key=six.text_type(group.id),
+                details=details,
+                contexts=[
+                    {
+                        "type": "link",
+                        "href": absolute_uri(
+                            group.get_absolute_url(params={"referrer": "pagerduty_plugin"})
+                        ),
+                        "text": "Issue Details",
+                    }
+                ],
+            )
+            assert response["status"] == "success"
+        except Exception as e:
+            self.raise_error(e)
diff --git a/src/new_sentry_plugins/phabricator/__init__.py b/src/new_sentry_plugins/phabricator/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/phabricator/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/phabricator/plugin.py b/src/new_sentry_plugins/phabricator/plugin.py
new file mode 100644
index 0000000000..e870819fc4
--- /dev/null
+++ b/src/new_sentry_plugins/phabricator/plugin.py
@@ -0,0 +1,238 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+from sentry.exceptions import PluginError
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
+from sentry.utils.http import absolute_uri
+from six.moves.urllib.parse import urljoin
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+import httplib
+import json
+import phabricator
+
+
+def query_to_result(field, result):
+    if field == "issue_id":
+        return u"T{}: {}".format(result["id"], result["fields"]["name"])
+
+    if field == "assignee":
+        return u"{} ({})".format(result["fields"]["realName"], result["fields"]["username"])
+
+    return result["fields"]["name"]
+
+
+class PhabricatorPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Integrate Phabricator issue tracking by linking a user account to a project."
+
+    slug = "phabricator"
+    title = "Phabricator"
+    conf_title = "Phabricator"
+    conf_key = "phabricator"
+
+    def get_api(self, project):
+        return phabricator.Phabricator(
+            host=urljoin(self.get_option("host", project), "api/"),
+            username=self.get_option("username", project),
+            certificate=self.get_option("certificate", project),
+            token=self.get_option("token", project),
+        )
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        token = self.get_option("token", project)
+        helptext = "You may generate a Conduit API Token from your account settings in Phabricator."
+        secret_field = get_secret_field_config(token, helptext, include_prefix=True)
+        secret_field.update({"name": "token", "label": "Token", "required": False})
+
+        return [
+            {
+                "name": "host",
+                "label": "Host",
+                "type": "text",
+                "placeholder": "e.g. http://secure.phabricator.org",
+                "required": True,
+            },
+            secret_field,
+            {
+                "name": "username",
+                "label": "Username",
+                "type": "text",
+                "help": "For token-based authentication you do not need to fill in username.",
+                "required": False,
+            },
+            {
+                "name": "certificate",
+                "label": "Certificate",
+                "type": "textarea",
+                "help": "For token-based authentication you do not need to fill in certificate.",
+                "required": False,
+            },
+        ]
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(PhabricatorPlugin, self).get_new_issue_fields(
+            request, group, event, **kwargs
+        )
+        return fields + [
+            {
+                "name": "tags",
+                "label": "Tags",
+                "type": "select",
+                "placeholder": "Start typing to search for a project",
+                "multi": True,
+                "required": False,
+                "has_autocomplete": True,
+            },
+            {
+                "name": "assignee",
+                "label": "Assignee",
+                "default": "",
+                "type": "select",
+                "placeholder": "Start typing to search for an assignee",
+                "required": False,
+                "has_autocomplete": True,
+            },
+        ]
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Task",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": u"Sentry issue: [{issue_id}]({url})".format(
+                    url=absolute_uri(
+                        group.get_absolute_url(params={"referrer": "phabricator_plugin"})
+                    ),
+                    issue_id=group.qualified_short_id,
+                ),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the task."),
+                "required": False,
+            },
+        ]
+
+    def get_group_urls(self):
+        return super(PhabricatorPlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def validate_config(self, project, config, actor):
+        projectPHIDs = config.get("projectPHIDs")
+        if projectPHIDs:
+            try:
+                json.loads(projectPHIDs)
+            except ValueError:
+                raise PluginError("projectPHIDs field must be a valid JSON if present")
+        if config.get("host") and (
+            (config.get("username") and config.get("certificate")) or config.get("token")
+        ):
+            api = phabricator.Phabricator(
+                host=urljoin(config["host"], "api/"),
+                username=config.get("username"),
+                certificate=config.get("certificate"),
+                token=config.get("token"),
+            )
+            try:
+                api.user.whoami()
+            except phabricator.APIError as e:
+                raise PluginError("%s %s" % (e.code, e))
+            except httplib.HTTPException as e:
+                raise PluginError("Unable to reach Phabricator host: %s" % (e,))
+            except Exception as e:
+                raise PluginError("Unhandled error from Phabricator: %s" % (e,))
+        return config
+
+    def is_configured(self, request, project, **kwargs):
+        if not self.get_option("host", project):
+            return False
+        if self.get_option("token", project):
+            return True
+        if self.get_option("username", project) and self.get_option("certificate", project):
+            return True
+        return False
+
+    def get_new_issue_title(self, **kwargs):
+        return "Create Maniphest Task"
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "T%s" % issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        host = self.get_option("host", group.project)
+        return urljoin(host, "T%s" % issue_id)
+
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+
+        try:
+            api = self.get_api(group.project)
+            if field == "tags":
+                response = api.project.search(constraints={"name": query})
+            elif field == "issue_id":
+                response = api.maniphest.search(constraints={"query": query})
+            elif field == "assignee":
+                response = api.user.search(constraints={"nameLike": query})
+
+        except Exception as e:
+            return self.handle_api_error(e)
+
+        results = [
+            {"text": query_to_result(field, i), "id": i["phid"]} for i in response.get("data", [])
+        ]
+
+        return Response({field: results})
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        api = self.get_api(group.project)
+        try:
+            data = api.maniphest.createtask(
+                title=form_data["title"].encode("utf-8"),
+                description=form_data["description"].encode("utf-8"),
+                ownerPHID=form_data.get("assignee"),
+                projectPHIDs=form_data.get("tags"),
+            )
+        except phabricator.APIError as e:
+            raise PluginError("%s %s" % (e.code, e))
+        except httplib.HTTPException as e:
+            raise PluginError("Unable to reach Phabricator host: %s" % e)
+
+        return data["id"]
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        api = self.get_api(group.project)
+
+        try:
+            results = api.maniphest.search(constraints={"phids": [form_data["issue_id"]]})
+        except Exception as e:
+            self.raise_error(e)
+
+        task = results["data"][0]
+
+        comment = form_data.get("comment")
+        if comment:
+            try:
+                api.maniphest.edit(
+                    objectIdentifier=form_data["issue_id"],
+                    transactions=[{"type": "comment", "value": comment}],
+                )
+            except Exception as e:
+                self.raise_error(e)
+
+        return {
+            "id": task["id"],
+            "title": task["fields"]["name"],
+            "url": self.get_issue_url(group, task["id"]),
+        }
diff --git a/src/new_sentry_plugins/pivotal/__init__.py b/src/new_sentry_plugins/pivotal/__init__.py
new file mode 100644
index 0000000000..49b0760b46
--- /dev/null
+++ b/src/new_sentry_plugins/pivotal/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-pivotal")
diff --git a/src/new_sentry_plugins/pivotal/plugin.py b/src/new_sentry_plugins/pivotal/plugin.py
new file mode 100644
index 0000000000..ef6856439f
--- /dev/null
+++ b/src/new_sentry_plugins/pivotal/plugin.py
@@ -0,0 +1,186 @@
+from __future__ import absolute_import
+
+import requests
+import six
+
+from django.utils.encoding import force_text
+from rest_framework.response import Response
+from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint, PluginError
+from sentry.http import safe_urlopen, safe_urlread
+from sentry.utils import json
+from six.moves.urllib.parse import urlencode
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+
+class PivotalPlugin(CorePluginMixin, IssuePlugin2):
+    description = "Integrate Pivotal Tracker stories by linking a project and account."
+    slug = "pivotal"
+    title = "Pivotal Tracker"
+    conf_title = title
+    conf_key = "pivotal"
+
+    def get_group_urls(self):
+        return super(PivotalPlugin, self).get_group_urls() + [
+            (
+                r"^autocomplete",
+                IssueGroupActionEndpoint.as_view(view_method_name="view_autocomplete", plugin=self),
+            )
+        ]
+
+    def is_configured(self, request, project, **kwargs):
+        return all(self.get_option(k, project) for k in ("token", "project"))
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {
+                "name": "issue_id",
+                "label": "Story",
+                "default": "",
+                "type": "select",
+                "has_autocomplete": True,
+                "help": "Search Pivotal Stories by name or description.",
+            },
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": group.get_absolute_url(params={"referrer": "pivotal_plugin"}),
+                "type": "textarea",
+                "help": ("Leave blank if you don't want to " "add a comment to the Pivotal story."),
+                "required": False,
+            },
+        ]
+
+    def handle_api_error(self, error):
+        msg = u"Error communicating with Pivotal Tracker"
+        status = 400 if isinstance(error, PluginError) else 502
+        return Response({"error_type": "validation", "errors": {"__all__": msg}}, status=status)
+
+    def view_autocomplete(self, request, group, **kwargs):
+        field = request.GET.get("autocomplete_field")
+        query = request.GET.get("autocomplete_query")
+        if field != "issue_id" or not query:
+            return Response({"issue_id": []})
+        query = query.encode("utf-8")
+        _url = "%s?%s" % (self.build_api_url(group, "search"), urlencode({"query": query}))
+        try:
+            req = self.make_api_request(group.project, _url)
+            body = safe_urlread(req)
+        except (requests.RequestException, PluginError) as e:
+            return self.handle_api_error(e)
+
+        try:
+            json_resp = json.loads(body)
+
+        except ValueError as e:
+            return self.handle_api_error(e)
+
+        resp = json_resp.get("stories", {})
+        stories = resp.get("stories", [])
+        issues = [{"text": "(#%s) %s" % (i["id"], i["name"]), "id": i["id"]} for i in stories]
+
+        return Response({field: issues})
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        comment = form_data.get("comment")
+        if not comment:
+            return
+        _url = "%s/%s/comments" % (self.build_api_url(group, "stories"), form_data["issue_id"])
+        try:
+            req = self.make_api_request(group.project, _url, json_data={"text": comment})
+            body = safe_urlread(req)
+        except requests.RequestException as e:
+            msg = six.text_type(e)
+            raise PluginError("Error communicating with Pivotal: %s" % (msg,))
+
+        try:
+            json_resp = json.loads(body)
+        except ValueError as e:
+            msg = six.text_type(e)
+            raise PluginError("Error communicating with Pivotal: %s" % (msg,))
+
+        if req.status_code > 399:
+            raise PluginError(json_resp["error"])
+
+    def build_api_url(self, group, pivotal_api=None):
+        project = self.get_option("project", group.project)
+
+        _url = "https://www.pivotaltracker.com/services/v5/projects/%s/%s" % (project, pivotal_api)
+
+        return _url
+
+    def make_api_request(self, project, _url, json_data=None):
+        req_headers = {
+            "X-TrackerToken": six.text_type(self.get_option("token", project)),
+            "Content-Type": "application/json",
+        }
+        return safe_urlopen(_url, json=json_data, headers=req_headers, allow_redirects=True)
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        json_data = {
+            "story_type": "bug",
+            "name": force_text(form_data["title"], encoding="utf-8", errors="replace"),
+            "description": force_text(form_data["description"], encoding="utf-8", errors="replace"),
+            "labels": ["sentry"],
+        }
+
+        try:
+            _url = self.build_api_url(group, "stories")
+            req = self.make_api_request(group.project, _url, json_data=json_data)
+            body = safe_urlread(req)
+        except requests.RequestException as e:
+            msg = six.text_type(e)
+            raise PluginError("Error communicating with Pivotal: %s" % (msg,))
+
+        try:
+            json_resp = json.loads(body)
+        except ValueError as e:
+            msg = six.text_type(e)
+            raise PluginError("Error communicating with Pivotal: %s" % (msg,))
+
+        if req.status_code > 399:
+            raise PluginError(json_resp["error"])
+
+        return json_resp["id"]
+
+    def get_issue_label(self, group, issue_id, **kwargs):
+        return "#%s" % issue_id
+
+    def get_issue_url(self, group, issue_id, **kwargs):
+        return "https://www.pivotaltracker.com/story/show/%s" % issue_id
+
+    def get_issue_title_by_id(self, request, group, issue_id):
+        _url = "%s/%s" % (self.build_api_url(group, "stories"), issue_id)
+        req = self.make_api_request(group.project, _url)
+
+        body = safe_urlread(req)
+        json_resp = json.loads(body)
+        return json_resp["name"]
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        token = self.get_option("token", project)
+        helptext = (
+            "Enter your API Token (found on "
+            '<a href="https://www.pivotaltracker.com/profile"'
+            ">pivotaltracker.com/profile</a>)."
+        )
+        secret_field = get_secret_field_config(token, helptext, include_prefix=True)
+        secret_field.update(
+            {
+                "name": "token",
+                "label": "API Token",
+                "placeholder": "e.g. a9877d72b6d13b23410a7109b35e88bc",
+            }
+        )
+        return [
+            secret_field,
+            {
+                "name": "project",
+                "label": "Project ID",
+                "default": self.get_option("project", project),
+                "type": "text",
+                "placeholder": "e.g. 639281",
+                "help": "Enter your project's numerical ID.",
+            },
+        ]
diff --git a/src/new_sentry_plugins/pushover/__init__.py b/src/new_sentry_plugins/pushover/__init__.py
new file mode 100644
index 0000000000..9b498c7e99
--- /dev/null
+++ b/src/new_sentry_plugins/pushover/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-pushover")
diff --git a/src/new_sentry_plugins/pushover/client.py b/src/new_sentry_plugins/pushover/client.py
new file mode 100644
index 0000000000..e2f33cbb9b
--- /dev/null
+++ b/src/new_sentry_plugins/pushover/client.py
@@ -0,0 +1,25 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.client import ApiClient
+
+
+class PushoverClient(ApiClient):
+    base_url = "https://api.pushover.net/1"
+    allow_redirects = False
+    plugin_name = "pushover"
+
+    def __init__(self, userkey=None, apikey=None):
+        self.userkey = userkey
+        self.apikey = apikey
+        super(PushoverClient, self).__init__()
+
+    def request(self, method, path, data):
+        # see https://pushover.net/api
+        # We can no longer send JSON because pushover disabled incoming
+        # JSON data: http://updates.pushover.net/post/39822700181/
+        payload = {"user": self.userkey, "token": self.apikey}
+        payload.update(data)
+        return self._request(path=path, method=method, data=payload, json=False)
+
+    def send_message(self, data):
+        return self.request("POST", "/messages.json", data)
diff --git a/src/new_sentry_plugins/pushover/plugin.py b/src/new_sentry_plugins/pushover/plugin.py
new file mode 100644
index 0000000000..1037a20bd0
--- /dev/null
+++ b/src/new_sentry_plugins/pushover/plugin.py
@@ -0,0 +1,115 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.plugins.bases.notify import NotifyPlugin
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+from .client import PushoverClient
+
+from sentry.exceptions import PluginError
+
+
+class PushoverPlugin(CorePluginMixin, NotifyPlugin):
+    slug = "pushover"
+    title = "Pushover"
+    conf_title = "Pushover"
+    conf_key = "pushover"
+
+    def is_configured(self, project):
+        return all(self.get_option(key, project) for key in ("userkey", "apikey"))
+
+    def get_config(self, **kwargs):
+        userkey = self.get_option("userkey", kwargs["project"])
+        apikey = self.get_option("apikey", kwargs["project"])
+
+        userkey_field = get_secret_field_config(
+            userkey, "Your user key. See https://pushover.net/", include_prefix=True
+        )
+        userkey_field.update({"name": "userkey", "label": "User Key"})
+
+        apikey_field = get_secret_field_config(
+            apikey, "Application API token. See https://pushover.net/apps/", include_prefix=True
+        )
+
+        apikey_field.update({"name": "apikey", "label": "API Key"})
+
+        return [
+            userkey_field,
+            apikey_field,
+            {
+                "name": "priority",
+                "label": "Message Priority",
+                "type": "choice",
+                "required": True,
+                "choices": [
+                    ("-2", "Lowest"),
+                    ("-1", "Low"),
+                    ("0", "Normal"),
+                    ("1", "High"),
+                    ("2", "Emergency"),
+                ],
+                "default": "0",
+            },
+            {
+                "name": "retry",
+                "label": "Retry",
+                "type": "number",
+                "required": False,
+                "placeholder": "e.g. 30",
+                "help": 'How often (in seconds) you will receive the same notification. Minimum of 30 seconds. Only required for "Emergency" level priority.',
+            },
+            {
+                "name": "expire",
+                "label": "Expire",
+                "type": "number",
+                "required": False,
+                "placeholder": "e.g. 9000",
+                "help": 'How many seconds your notification will continue to be retried for. Maximum of 10800 seconds. Only required for "Emergency" level priority.',
+            },
+        ]
+
+    def validate_config(self, project, config, actor):
+        if int(config["priority"]) == 2 and config["retry"] < 30:
+            retry = six.binary_type(config["retry"])
+            self.logger.exception(six.text_type("Retry not 30 or higher. It is {}.".format(retry)))
+            raise PluginError("Retry must be 30 or higher. It is {}.".format(retry))
+        return config
+
+    def get_client(self, project):
+        return PushoverClient(
+            apikey=self.get_option("apikey", project), userkey=self.get_option("userkey", project)
+        )
+
+    def notify(self, notification):
+        event = notification.event
+        group = event.group
+        project = group.project
+        priority = int(self.get_option("priority", project) or 0)
+        retry = int(self.get_option("retry", project) or 30)
+        expire = int(self.get_option("expire", project) or 90)
+
+        title = "%s: %s" % (project.name, group.title)
+        link = group.get_absolute_url(params={"referrer": "pushover_plugin"})
+
+        message = event.get_legacy_message()[:256]
+
+        tags = event.get_tags()
+        if tags:
+            message += "\n\nTags: %s" % (", ".join("%s=%s" % (k, v) for (k, v) in tags))
+
+        client = self.get_client(project)
+        response = client.send_message(
+            {
+                "message": message[:1024],
+                "title": title[:250],
+                "url": link,
+                "url_title": "Issue Details",
+                "priority": priority,
+                "retry": retry,
+                "expire": expire,
+            }
+        )
+        assert response["status"]
diff --git a/src/new_sentry_plugins/segment/__init__.py b/src/new_sentry_plugins/segment/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/segment/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/segment/plugin.py b/src/new_sentry_plugins/segment/plugin.py
new file mode 100644
index 0000000000..f609698d3c
--- /dev/null
+++ b/src/new_sentry_plugins/segment/plugin.py
@@ -0,0 +1,132 @@
+from __future__ import absolute_import
+
+from sentry import http
+from sentry.plugins.bases.data_forwarding import DataForwardingPlugin
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+
+
+class SegmentPlugin(CorePluginMixin, DataForwardingPlugin):
+    title = "Segment"
+    slug = "segment"
+    description = "Send Sentry events into Segment."
+    conf_key = "segment"
+
+    endpoint = "https://api.segment.io/v1/track"
+
+    def get_config(self, project, **kwargs):
+        return [
+            get_secret_field_config(
+                name="write_key",
+                label="Write Key",
+                secret=self.get_option("write_key", project),
+                help_text="Your Segment write key",
+            )
+        ]
+
+    def get_rate_limit(self):
+        # number of requests, number of seconds (window)
+        return (50, 1)
+
+    def get_event_props(self, event):
+        props = {
+            "eventId": event.event_id,
+            "transaction": event.get_tag("transaction") or "",
+            "release": event.get_tag("sentry:release") or "",
+            "environment": event.get_tag("environment") or "",
+        }
+        if "sentry.interfaces.Http" in event.interfaces:
+            http = event.interfaces["sentry.interfaces.Http"]
+            headers = http.headers
+            if not isinstance(headers, dict):
+                headers = dict(headers or ())
+
+            props.update(
+                {
+                    "requestUrl": http.url,
+                    "requestMethod": http.method,
+                    "requestReferer": headers.get("Referer", ""),
+                }
+            )
+        if "sentry.interfaces.Exception" in event.interfaces:
+            exc = event.interfaces["sentry.interfaces.Exception"].values[0]
+            props.update({"exceptionType": exc.type})
+        return props
+
+    # https://segment.com/docs/spec/track/
+    def get_event_payload(self, event):
+        context = {"library": {"name": "sentry", "version": self.version}}
+
+        props = {
+            "eventId": event.event_id,
+            "transaction": event.get_tag("transaction") or "",
+            "release": event.get_tag("sentry:release") or "",
+            "environment": event.get_tag("environment") or "",
+        }
+
+        if "sentry.interfaces.User" in event.interfaces:
+            user = event.interfaces["sentry.interfaces.User"]
+            if user.ip_address:
+                context["ip"] = user.ip_address
+            user_id = user.id
+        else:
+            user_id = None
+
+        if "sentry.interfaces.Http" in event.interfaces:
+            http = event.interfaces["sentry.interfaces.Http"]
+            headers = http.headers
+            if not isinstance(headers, dict):
+                headers = dict(headers or ())
+
+            context.update(
+                {
+                    "userAgent": headers.get("User-Agent", ""),
+                    "page": {
+                        "url": http.url,
+                        "method": http.method,
+                        "search": http.query_string or "",
+                        "referrer": headers.get("Referer", ""),
+                    },
+                }
+            )
+
+        if "sentry.interfaces.Exception" in event.interfaces:
+            exc = event.interfaces["sentry.interfaces.Exception"].values[0]
+            props.update({"exceptionType": exc.type})
+
+        return {
+            "context": context,
+            "userId": user_id,
+            "event": "Error Captured",
+            "properties": props,
+            "integration": {"name": "sentry", "version": self.version},
+            "timestamp": event.datetime.isoformat() + "Z",
+        }
+
+    def forward_event(self, event, payload, **kwargs):
+        # TODO(dcramer): we currently only support authenticated events, as the
+        # value of anonymous errors/crashes/etc is much less meaningful in the
+        # context of Segment
+
+        # we currently only support errors
+        if event.get_event_type() != "error":
+            return
+
+        # we avoid instantiating interfaces here as they're only going to be
+        # used if there's a User present
+        user_interface = event.data.get("sentry.interfaces.User")
+        if not user_interface:
+            return
+
+        user_id = user_interface.get("id")
+
+        if not user_id:
+            return
+
+        write_key = self.get_option("write_key", event.project)
+        if not write_key:
+            return
+
+        session = http.build_session()
+        session.post(self.endpoint, json=payload, auth=(write_key, ""))
diff --git a/src/new_sentry_plugins/sessionstack/__init__.py b/src/new_sentry_plugins/sessionstack/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/sessionstack/client.py b/src/new_sentry_plugins/sessionstack/client.py
new file mode 100644
index 0000000000..e4b12a196a
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/client.py
@@ -0,0 +1,141 @@
+from __future__ import absolute_import
+
+import json
+import requests
+
+from sentry.http import safe_urlopen
+
+from .utils import get_basic_auth, remove_trailing_slashes, add_query_params
+
+ACCESS_TOKEN_NAME = "Sentry"
+
+API_URL = "https://api.sessionstack.com"
+PLAYER_URL = "https://app.sessionstack.com/player"
+
+WEBSITES_ENDPOINT = "/v1/websites/{}"
+SESSION_ENDPOINT = "/v1/websites/{}/sessions/{}"
+ACCESS_TOKENS_ENDPOINT = "/v1/websites/{}/sessions/{}/access_tokens"
+SESSION_URL_PATH = "/#/sessions/"
+
+MILLISECONDS_BEFORE_EVENT = 5000
+
+
+class SessionStackClient(object):
+    def __init__(self, account_email, api_token, website_id, **kwargs):
+        self.website_id = website_id
+
+        api_url = kwargs.get("api_url") or API_URL
+        self.api_url = remove_trailing_slashes(api_url)
+
+        player_url = kwargs.get("player_url") or PLAYER_URL
+        self.player_url = remove_trailing_slashes(player_url)
+
+        self.request_headers = {
+            "Authorization": get_basic_auth(account_email, api_token),
+            "Content-Type": "application/json",
+        }
+
+    def validate_api_access(self):
+        website_endpoint = WEBSITES_ENDPOINT.format(self.website_id)
+
+        try:
+            response = self._make_request(website_endpoint, "GET")
+        except requests.exceptions.ConnectionError:
+            raise InvalidApiUrlError
+
+        if response.status_code == requests.codes.UNAUTHORIZED:
+            raise UnauthorizedError
+        elif response.status_code == requests.codes.BAD_REQUEST:
+            raise InvalidWebsiteIdError
+        elif response.status_code == requests.codes.NOT_FOUND:
+            raise InvalidApiUrlError
+
+        response.raise_for_status()
+
+    def get_session_url(self, session_id, event_timestamp):
+
+        player_url = self.player_url + SESSION_URL_PATH + session_id
+        query_params = {}
+
+        access_token = self._get_access_token(session_id)
+        if access_token is not None:
+            query_params["access_token"] = access_token
+
+        if event_timestamp is not None:
+            start_timestamp = self._get_session_start_timestamp(session_id)
+            if start_timestamp is not None:
+                pause_at = event_timestamp - start_timestamp
+                play_from = pause_at - MILLISECONDS_BEFORE_EVENT
+
+                query_params["pause_at"] = pause_at
+                query_params["play_from"] = play_from
+
+        return add_query_params(player_url, query_params)
+
+    def _get_access_token(self, session_id):
+        access_token = self._create_access_token(session_id)
+        if not access_token:
+            access_token = self._get_existing_access_token(session_id)
+
+        return access_token
+
+    def _get_existing_access_token(self, session_id):
+        response = self._make_access_tokens_request(session_id, "GET")
+
+        if response.status_code != requests.codes.OK:
+            return None
+
+        access_tokens = json.loads(response.content).get("data")
+        for token in access_tokens:
+            token_name = token.get("name")
+            if token_name == ACCESS_TOKEN_NAME:
+                return token.get("access_token")
+
+        return None
+
+    def _create_access_token(self, session_id):
+        response = self._make_access_tokens_request(
+            session_id=session_id, method="POST", body={"name": ACCESS_TOKEN_NAME}
+        )
+
+        if response.status_code != requests.codes.OK:
+            return None
+
+        return json.loads(response.content).get("access_token")
+
+    def _make_access_tokens_request(self, session_id, method, **kwargs):
+        access_tokens_endpoint = self._get_access_tokens_endpoint(session_id)
+        return self._make_request(access_tokens_endpoint, method, **kwargs)
+
+    def _get_access_tokens_endpoint(self, session_id):
+        return ACCESS_TOKENS_ENDPOINT.format(self.website_id, session_id)
+
+    def _get_session_start_timestamp(self, session_id):
+        endpoint = SESSION_ENDPOINT.format(self.website_id, session_id)
+        response = self._make_request(endpoint, "GET")
+
+        if response.status_code == requests.codes.OK:
+            return json.loads(response.content).get("client_start")
+
+    def _make_request(self, endpoint, method, **kwargs):
+        url = self.api_url + endpoint
+
+        request_kwargs = {"method": method, "headers": self.request_headers}
+
+        body = kwargs.get("body")
+        if body:
+            request_kwargs["json"] = body
+
+        return safe_urlopen(url, **request_kwargs)
+
+
+class UnauthorizedError(Exception):
+    pass
+
+
+class InvalidWebsiteIdError(Exception):
+    pass
+
+
+class InvalidApiUrlError(Exception):
+    pass
diff --git a/src/new_sentry_plugins/sessionstack/plugin.py b/src/new_sentry_plugins/sessionstack/plugin.py
new file mode 100644
index 0000000000..c1a2913f94
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/plugin.py
@@ -0,0 +1,185 @@
+from __future__ import absolute_import
+
+from django.conf import settings
+
+from sentry.models import Project
+from sentry.interfaces.contexts import ContextType
+from sentry.plugins.base import Plugin2
+from sentry.plugins.base.configuration import react_plugin_config
+from sentry.exceptions import PluginError
+
+from new_sentry_plugins.base import CorePluginMixin
+
+from .client import SessionStackClient, UnauthorizedError, InvalidWebsiteIdError, InvalidApiUrlError
+
+UNAUTHORIZED_ERROR = (
+    "Unauthorized: either the combination of your account email and "
+    "access token is invalid or you do not have access"
+)
+
+INVALID_API_URL_ERROR = "The provided API URL is invalid"
+
+INVALID_WEBSITE_ID_ERROR = "The provided website ID is invalid"
+
+UNEXPECTED_ERROR = "Unexpected error occurred. Please try again."
+
+
+class SessionStackPlugin(CorePluginMixin, Plugin2):
+    description = "Watch SessionStack recordings in Sentry."
+    title = "SessionStack"
+    slug = "sessionstack"
+    conf_title = title
+    conf_key = slug
+
+    asset_key = "sessionstack"
+    assets = ["dist/sessionstack.js"]
+
+    sessionstack_resource_links = [
+        ("Documentation", "http://docs.sessionstack.com/integrations/sentry/")
+    ]
+
+    def get_resource_links(self):
+        return self.resource_links + self.sessionstack_resource_links
+
+    def configure(self, project, request):
+        return react_plugin_config(self, project, request)
+
+    def has_project_conf(self):
+        return True
+
+    def get_custom_contexts(self):
+        return [SessionStackContextType]
+
+    def reset_options(self, project=None, user=None):
+        self.disable(project)
+
+        self.set_option("account_email", "", project)
+        self.set_option("api_token", "", project)
+        self.set_option("website_id", "", project)
+        self.set_option("player_url", "", project)
+        self.set_option("api_url", "", project)
+
+    def is_testable(self, **kwargs):
+        return False
+
+    def validate_config(self, project, config, actor=None):
+        sessionstack_client = SessionStackClient(
+            account_email=config.get("account_email"),
+            api_token=config.get("api_token"),
+            website_id=config.get("website_id"),
+            api_url=config.get("api_url"),
+            player_url=config.get("player_url"),
+        )
+
+        try:
+            sessionstack_client.validate_api_access()
+        except UnauthorizedError:
+            raise PluginError(UNAUTHORIZED_ERROR)
+        except InvalidApiUrlError:
+            raise PluginError(INVALID_API_URL_ERROR)
+        except InvalidWebsiteIdError:
+            raise PluginError(INVALID_WEBSITE_ID_ERROR)
+        except Exception:
+            raise PluginError(UNEXPECTED_ERROR)
+
+        return config
+
+    def get_config(self, project, **kwargs):
+        account_email = self.get_option("account_email", project)
+        api_token = self.get_option("api_token", project)
+        website_id = self.get_option("website_id", project)
+        api_url = self.get_option("api_url", project)
+        player_url = self.get_option("player_url", project)
+
+        configurations = [
+            {
+                "name": "account_email",
+                "label": "Account Email",
+                "default": account_email,
+                "type": "text",
+                "placeholder": 'e.g. "user@example.com"',
+                "required": True,
+            },
+            {
+                "name": "api_token",
+                "label": "API Token",
+                "default": api_token,
+                "type": "text",
+                "help": "SessionStack generated API token.",
+                "required": True,
+            },
+            {
+                "name": "website_id",
+                "label": "Website ID",
+                "default": website_id,
+                "type": "number",
+                "help": "ID of the corresponding website in SessionStack.",
+                "required": True,
+            },
+        ]
+
+        if settings.SENTRY_ONPREMISE:
+            configurations.extend(
+                [
+                    {
+                        "name": "api_url",
+                        "label": "SessionStack API URL",
+                        "default": api_url,
+                        "type": "text",
+                        "help": "URL to SessionStack's REST API. The default "
+                        'value is "https://api.sessionstack.com/"',
+                        "required": False,
+                    },
+                    {
+                        "name": "player_url",
+                        "label": "SessionStack Player URL",
+                        "default": player_url,
+                        "type": "text",
+                        "help": "URL to SessionStack's session player. The default "
+                        'value is "http://app.sessionstack.com/player/"',
+                        "required": False,
+                    },
+                ]
+            )
+
+        return configurations
+
+    def get_event_preprocessors(self, data, **kwargs):
+        context = SessionStackContextType.primary_value_for_data(data)
+        if not context:
+            return []
+
+        session_id = context.get("session_id")
+        if not session_id:
+            return []
+
+        project = Project.objects.get_from_cache(id=data.get("project"))
+        if not self.is_enabled(project):
+            return []
+
+        def preprocess_event(event):
+            sessionstack_client = SessionStackClient(
+                account_email=self.get_option("account_email", project),
+                api_token=self.get_option("api_token", project),
+                website_id=self.get_option("website_id", project),
+                api_url=self.get_option("api_url", project),
+                player_url=self.get_option("player_url", project),
+            )
+
+            session_url = sessionstack_client.get_session_url(
+                session_id=session_id, event_timestamp=context.get("timestamp")
+            )
+
+            context["session_url"] = session_url
+
+            contexts = event.get("contexts") or {}
+            contexts["sessionstack"] = context
+            event["contexts"] = contexts
+
+            return event
+
+        return [preprocess_event]
+
+
+class SessionStackContextType(ContextType):
+    type = "sessionstack"
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/components/settings.jsx b/src/new_sentry_plugins/sessionstack/static/sessionstack/components/settings.jsx
new file mode 100644
index 0000000000..9f3510eaf1
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/static/sessionstack/components/settings.jsx
@@ -0,0 +1,83 @@
+import React from 'react';
+import _ from 'lodash';
+import {Form, FormState, LoadingIndicator, plugins} from 'sentry';
+
+
+class Settings extends plugins.BasePlugin.DefaultSettings {
+  constructor(props) {
+    super(props);
+
+    this.REQUIRED_FIELDS = ['account_email', 'api_token', 'website_id'];
+    this.ON_PREMISES_FIELDS = ['api_url', 'player_url'];
+
+    this.toggleOnPremisesConfiguration = this.toggleOnPremisesConfiguration.bind(this);
+  }
+
+  renderFields(fields) {
+    return fields.map(f => {
+      return this.renderField({
+        config: f,
+        formData: this.state.formData,
+        formErrors: this.state.errors,
+        onChange: this.changeField.bind(this, f.name)
+      });
+    })
+  }
+
+  filterFields(fields, fieldNames) {
+    return fields.filter(field => {
+      return fieldNames.includes(field.name);
+    })
+  }
+
+  toggleOnPremisesConfiguration() {
+    this.setState({
+      showOnPremisesConfiguration: !this.state.showOnPremisesConfiguration
+    });
+  }
+
+  render() {
+    if (this.state.state === FormState.LOADING) {
+      return <LoadingIndicator />;
+    }
+
+    if (this.state.state === FormState.ERROR && !this.state.fieldList) {
+      return (
+        <div className="alert alert-error m-b-1">
+          An unknown error occurred. Need help with this? <a href="https://sentry.io/support/">Contact support</a>
+        </div>
+      );
+    }
+
+    let isSaving = this.state.state === FormState.SAVING;
+    let hasChanges = !_.isEqual(this.state.initialData, this.state.formData);
+
+    let requiredFields = this.filterFields(this.state.fieldList, this.REQUIRED_FIELDS);
+    let onPremisesFields = this.filterFields(this.state.fieldList, this.ON_PREMISES_FIELDS);
+
+    return (
+      <Form onSubmit={this.onSubmit}
+            submitDisabled={isSaving || !hasChanges}>
+        {this.state.errors.__all__ &&
+          <div className="alert alert-block alert-error">
+            <ul>
+              <li>{this.state.errors.__all__}</li>
+            </ul>
+          </div>
+        }
+        {this.renderFields(requiredFields)}
+        {onPremisesFields.length > 0 ?
+            <div className="control-group">
+              <button className="btn btn-default" type="button" onClick={this.toggleOnPremisesConfiguration}>
+                Configure on-premises
+              </button>
+            </div>
+            : null
+        }
+        {this.state.showOnPremisesConfiguration ? this.renderFields(onPremisesFields) : null}
+      </Form>
+    );
+  }
+}
+
+export default Settings;
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx b/src/new_sentry_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx
new file mode 100644
index 0000000000..c6b2f1b943
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/static/sessionstack/contexts/sessionstack.jsx
@@ -0,0 +1,85 @@
+import React from "react";
+import ReactDOM from "react-dom";
+import PropTypes from "prop-types";
+
+const ASPECT_RATIO = 16 / 9;
+
+class SessionStackContextType extends React.Component {
+  static propTypes() {
+    return {
+      alias: PropTypes.string.isRequired,
+      data: PropTypes.object.isRequired
+    };
+  }
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      showIframe: false
+    };
+  }
+
+  componentDidMount() {
+    this.parentNode = ReactDOM.findDOMNode(this).parentNode;
+    window.addEventListener("resize", () => this.setIframeSize(), false);
+    this.setIframeSize();
+  }
+
+  componentWillUnmount() {
+    window.removeEventListener("resize", () => this.setIframeSize(), false);
+  }
+
+  setIframeSize() {
+    if (!this.showIframe) {
+      let parentWidth = $(this.parentNode).width();
+
+      this.setState({
+        width: parentWidth,
+        height: parentWidth / ASPECT_RATIO
+      });
+    }
+  }
+
+  playSession() {
+    this.setState({
+      showIframe: true
+    });
+
+    this.setIframeSize();
+  }
+
+  render() {
+    let { session_url } = this.props.data;
+
+    if (!session_url) {
+      return <h4>Session not found.</h4>;
+    }
+
+    return (
+      <div className="panel-group">
+        {this.state.showIframe ? (
+          <iframe
+            src={session_url}
+            sandbox="allow-scripts allow-same-origin"
+            width={this.state.width}
+            height={this.state.height}
+          />
+        ) : (
+          <button
+            className="btn btn-default"
+            type="button"
+            onClick={() => this.playSession()}
+          >
+            Play session
+          </button>
+        )}
+      </div>
+    );
+  }
+}
+
+SessionStackContextType.getTitle = function(value) {
+  return "SessionStack";
+};
+
+export default SessionStackContextType;
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js
new file mode 100644
index 0000000000..71d8578d05
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js
@@ -0,0 +1,2 @@
+!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=29)}([function(t,e){t.exports=React},function(t,e){t.exports=SentryApp},function(t,e,n){var r=n(12);t.exports=function(t,e){for(var n=t.length;n--;)if(r(t[n][0],e))return n;return-1}},function(t,e){t.exports=PropTypes},function(t,e){var n=Array.isArray;t.exports=n},function(t,e,n){var r=n(7);t.exports=function(t,e){return r(t,e)}},function(t,e){t.exports=ReactDOM},function(t,e,n){var r=n(8),o=n(28);t.exports=function t(e,n,i,u,a){return e===n||(null==e||null==n||!o(e)&&!o(n)?e!=e&&n!=n:r(e,n,i,u,t,a))}},function(t,e,n){var r=n(9),o=n(16),i=n(21),u=n(22),a=n(25),s=n(4),f=n(26),c=n(27),l=1,p="[object Arguments]",y="[object Array]",b="[object Object]",h=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,v,d,m){var g=s(t),_=s(e),O=g?y:a(t),w=_?y:a(e),S=(O=O==p?b:O)==b,j=(w=w==p?b:w)==b,E=O==w;if(E&&f(t)){if(!f(e))return!1;g=!0,S=!1}if(E&&!S)return m||(m=new r),g||c(t)?o(t,e,n,v,d,m):i(t,e,O,n,v,d,m);if(!(n&l)){var P=S&&h.call(t,"__wrapped__"),x=j&&h.call(e,"__wrapped__");if(P||x){var k=P?t.value():t,C=x?e.value():e;return m||(m=new r),d(k,C,n,v,m)}}return!!E&&(m||(m=new r),u(t,e,n,v,d,m))}},function(t,e,n){var r=n(10),o=n(11),i=n(13),u=n(14),a=n(15);function s(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}s.prototype.clear=r,s.prototype.delete=o,s.prototype.get=i,s.prototype.has=u,s.prototype.set=a,t.exports=s},function(t,e){t.exports=function(){this.__data__=[],this.size=0}},function(t,e,n){var r=n(2),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,n=r(e,t);return!(n<0||(n==e.length-1?e.pop():o.call(e,n,1),--this.size,0))}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(2);t.exports=function(t){var e=this.__data__,n=r(e,t);return n<0?void 0:e[n][1]}},function(t,e,n){var r=n(2);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,e,n){var r=n(2);t.exports=function(t,e){var n=this.__data__,o=r(n,t);return o<0?(++this.size,n.push([t,e])):n[o][1]=e,this}},function(t,e,n){var r=n(17),o=n(18),i=n(19),u=1,a=2;t.exports=function(t,e,n,s,f,c){var l=n&u,p=t.length,y=e.length;if(p!=y&&!(l&&y>p))return!1;var b=c.get(t);if(b&&c.get(e))return b==e;var h=-1,v=!0,d=n&a?new r:void 0;for(c.set(t,e),c.set(e,t);++h<p;){var m=t[h],g=e[h];if(s)var _=l?s(g,m,h,e,t,c):s(m,g,h,t,e,c);if(void 0!==_){if(_)continue;v=!1;break}if(d){if(!o(e,function(t,e){if(!i(d,e)&&(m===t||f(m,t,n,s,c)))return d.push(e)})){v=!1;break}}else if(m!==g&&!f(m,g,n,s,c)){v=!1;break}}return c.delete(t),c.delete(e),v}},function(t,e,n){var r=n(4);t.exports=function(){if(!arguments.length)return[];var t=arguments[0];return r(t)?t:[t]}},function(t,e){t.exports=function(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}},function(t,e,n){var r=n(20);t.exports=function(t,e){return!(null==t||!t.length)&&r(t,e,0)>-1}},function(t,e){t.exports=function(t,e,n){for(var r=n-1,o=t.length;++r<o;)if(t[r]===e)return r;return-1}},function(t,e){t.exports=function(t,e){return t===e||t!=t&&e!=e}},function(t,e,n){var r=n(23),o=1,i=Object.prototype.hasOwnProperty;t.exports=function(t,e,n,u,a,s){var f=n&o,c=r(t),l=c.length;if(l!=r(e).length&&!f)return!1;for(var p=l;p--;){var y=c[p];if(!(f?y in e:i.call(e,y)))return!1}var b=s.get(t);if(b&&s.get(e))return b==e;var h=!0;s.set(t,e),s.set(e,t);for(var v=f;++p<l;){var d=t[y=c[p]],m=e[y];if(u)var g=f?u(m,d,y,e,t,s):u(d,m,y,t,e,s);if(!(void 0===g?d===m||a(d,m,n,u,s):g)){h=!1;break}v||(v="constructor"==y)}if(h&&!v){var _=t.constructor,O=e.constructor;_!=O&&"constructor"in t&&"constructor"in e&&!("function"==typeof _&&_ instanceof _&&"function"==typeof O&&O instanceof O)&&(h=!1)}return s.delete(t),s.delete(e),h}},function(t,e,n){var r=n(24)(Object.keys,Object);t.exports=r},function(t,e){t.exports=function(t,e){return function(n){return t(e(n))}}},function(t,e){var n=Object.prototype.toString;t.exports=function(t){return n.call(t)}},function(t,e){t.exports=function(){return!1}},function(t,e){t.exports=function(){return!1}},function(t,e){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n.n(r),i=n(1),u=n(5),a=n.n(u);function s(t){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function p(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}var y=function(t){function e(t){var n,r,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),r=this,(n=!(o=c(e).call(this,t))||"object"!==s(o)&&"function"!=typeof o?p(r):o).REQUIRED_FIELDS=["account_email","api_token","website_id"],n.ON_PREMISES_FIELDS=["api_url","player_url"],n.toggleOnPremisesConfiguration=n.toggleOnPremisesConfiguration.bind(p(p(n))),n}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,i["plugins"].BasePlugin.DefaultSettings),n=e,(r=[{key:"renderFields",value:function(t){var e=this;return t.map(function(t){return e.renderField({config:t,formData:e.state.formData,formErrors:e.state.errors,onChange:e.changeField.bind(e,t.name)})})}},{key:"filterFields",value:function(t,e){return t.filter(function(t){return e.includes(t.name)})}},{key:"toggleOnPremisesConfiguration",value:function(){this.setState({showOnPremisesConfiguration:!this.state.showOnPremisesConfiguration})}},{key:"render",value:function(){if(this.state.state===i.FormState.LOADING)return o.a.createElement(i.LoadingIndicator,null);if(this.state.state===i.FormState.ERROR&&!this.state.fieldList)return o.a.createElement("div",{className:"alert alert-error m-b-1"},"An unknown error occurred. Need help with this? ",o.a.createElement("a",{href:"https://sentry.io/support/"},"Contact support"));var t=this.state.state===i.FormState.SAVING,e=!a()(this.state.initialData,this.state.formData),n=this.filterFields(this.state.fieldList,this.REQUIRED_FIELDS),r=this.filterFields(this.state.fieldList,this.ON_PREMISES_FIELDS);return o.a.createElement(i.Form,{onSubmit:this.onSubmit,submitDisabled:t||!e},this.state.errors.__all__&&o.a.createElement("div",{className:"alert alert-block alert-error"},o.a.createElement("ul",null,o.a.createElement("li",null,this.state.errors.__all__))),this.renderFields(n),r.length>0?o.a.createElement("div",{className:"control-group"},o.a.createElement("button",{className:"btn btn-default",type:"button",onClick:this.toggleOnPremisesConfiguration},"Configure on-premises")):null,this.state.showOnPremisesConfiguration?this.renderFields(r):null)}}])&&f(n.prototype,r),u&&f(n,u),e}(),b=n(6),h=n.n(b),v=n(3),d=n.n(v);function m(t){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function g(t,e){return!e||"object"!==m(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function _(t){return(_=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function O(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function w(t,e,n){return e&&O(t.prototype,e),n&&O(t,n),t}function S(t,e){return(S=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var j=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=g(this,_(e).call(this,t))).state={showIframe:!1},n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&S(t,e)}(e,o.a.Component),w(e,null,[{key:"propTypes",value:function(){return{alias:d.a.string.isRequired,data:d.a.object.isRequired}}}]),w(e,[{key:"componentDidMount",value:function(){var t=this;this.parentNode=h.a.findDOMNode(this).parentNode,window.addEventListener("resize",function(){return t.setIframeSize()},!1),this.setIframeSize()}},{key:"componentWillUnmount",value:function(){var t=this;window.removeEventListener("resize",function(){return t.setIframeSize()},!1)}},{key:"setIframeSize",value:function(){if(!this.showIframe){var t=$(this.parentNode).width();this.setState({width:t,height:t/(16/9)})}}},{key:"playSession",value:function(){this.setState({showIframe:!0}),this.setIframeSize()}},{key:"render",value:function(){var t=this,e=this.props.data.session_url;return e?o.a.createElement("div",{className:"panel-group"},this.state.showIframe?o.a.createElement("iframe",{src:e,sandbox:"allow-scripts allow-same-origin",width:this.state.width,height:this.state.height}):o.a.createElement("button",{className:"btn btn-default",type:"button",onClick:function(){return t.playSession()}},"Play session")):o.a.createElement("h4",null,"Session not found.")}}]),e}();j.getTitle=function(t){return"SessionStack"};var E=j;function P(t){return(P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function x(){return(x=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}function k(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function C(t,e){return!e||"object"!==P(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function D(t){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function N(t,e){return(N=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var R=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),C(this,D(e).apply(this,arguments))}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&N(t,e)}(e,i["plugins"].BasePlugin),n=e,(r=[{key:"renderSettings",value:function(t){return o.a.createElement(y,x({plugin:this},t))}}])&&k(n.prototype,r),u&&k(n,u),e}();R.displayName="SessionStack",i.plugins.add("sessionstack",R),i.plugins.addContext("sessionstack",E);e.default=R}]);
+//# sourceMappingURL=sessionstack.js.map
\ No newline at end of file
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz
new file mode 100644
index 0000000000..63231d2cb4
Binary files /dev/null and b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.gz differ
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map
new file mode 100644
index 0000000000..b99ab52703
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///external \"SentryApp\"","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_assocIndexOf.js","webpack:///external \"PropTypes\"","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isArray.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isEqual.js","webpack:///external \"ReactDOM\"","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIsEqual.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIsEqualDeep.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_Stack.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheClear.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheDelete.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/eq.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheGet.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheHas.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_listCacheSet.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalArrays.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_SetCache.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_arraySome.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_cacheHas.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_baseIndexOf.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalByTag.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_equalObjects.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_getAllKeys.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_overArg.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/_getTag.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isBuffer.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isTypedArray.js","webpack:////Users/scefali/Work/sentry-plugins/node_modules/lodash/isObjectLike.js","webpack:///./components/settings.jsx","webpack:///./contexts/sessionstack.jsx","webpack:///./sessionstack.jsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","SentryApp","eq","array","length","PropTypes","isArray","Array","baseIsEqual","other","ReactDOM","baseIsEqualDeep","isObjectLike","bitmask","customizer","stack","Stack","equalArrays","equalByTag","equalObjects","getTag","isBuffer","isTypedArray","COMPARE_PARTIAL_FLAG","argsTag","arrayTag","objectTag","equalFunc","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","ListCache","entries","index","this","clear","entry","set","has","__data__","size","assocIndexOf","splice","data","pop","undefined","push","SetCache","arraySome","cacheHas","COMPARE_UNORDERED_FLAG","isPartial","arrLength","othLength","stacked","result","seen","arrValue","othValue","compared","othIndex","arguments","predicate","baseIndexOf","fromIndex","getAllKeys","objProps","objLength","skipCtor","objValue","objCtor","constructor","othCtor","nativeKeys","overArg","keys","func","transform","arg","nativeObjectToString","toString","Settings","props","_this","_classCallCheck","_getPrototypeOf","REQUIRED_FIELDS","ON_PREMISES_FIELDS","toggleOnPremisesConfiguration","_assertThisInitialized","plugins","BasePlugin","DefaultSettings","fields","_this2","map","f","renderField","config","formData","state","formErrors","errors","onChange","changeField","fieldNames","filter","field","includes","setState","showOnPremisesConfiguration","FormState","LOADING","external_React_default","a","createElement","external_SentryApp_","ERROR","fieldList","className","href","isSaving","SAVING","hasChanges","isEqual_default","initialData","requiredFields","filterFields","onPremisesFields","onSubmit","submitDisabled","__all__","renderFields","type","onClick","SessionStackContextType","sessionstack_classCallCheck","sessionstack_possibleConstructorReturn","sessionstack_getPrototypeOf","showIframe","Component","alias","string","isRequired","parentNode","findDOMNode","window","addEventListener","setIframeSize","_this3","removeEventListener","parentWidth","$","width","height","_this4","session_url","src","sandbox","playSession","getTitle","SessionStackPlugin","settings","_extends","plugin","displayName","add","addContext"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oBClFAhC,EAAAD,QAAAkC,qBCAAjC,EAAAD,QAAAmC,2BCAA,IAAAC,EAAStC,EAAQ,IAoBjBG,EAAAD,QAVA,SAAAqC,EAAAZ,GAEA,IADA,IAAAa,EAAAD,EAAAC,OACAA,KACA,GAAAF,EAAAC,EAAAC,GAAA,GAAAb,GACA,OAAAa,EAGA,yBCjBArC,EAAAD,QAAAuC,yBCuBA,IAAAC,EAAAC,MAAAD,QAEAvC,EAAAD,QAAAwC,mBCzBA,IAAAE,EAAkB5C,EAAQ,GAkC1BG,EAAAD,QAJA,SAAAmB,EAAAwB,GACA,OAAAD,EAAAvB,EAAAwB,mBC/BA1C,EAAAD,QAAA4C,0BCAA,IAAAC,EAAsB/C,EAAQ,GAC9BgD,EAAmBhD,EAAQ,IA0B3BG,EAAAD,QAVA,SAAA0C,EAAAvB,EAAAwB,EAAAI,EAAAC,EAAAC,GACA,OAAA9B,IAAAwB,IAGA,MAAAxB,GAAA,MAAAwB,IAAAG,EAAA3B,KAAA2B,EAAAH,GACAxB,MAAAwB,KAEAE,EAAA1B,EAAAwB,EAAAI,EAAAC,EAAAN,EAAAO,sBCxBA,IAAAC,EAAYpD,EAAQ,GACpBqD,EAAkBrD,EAAQ,IAC1BsD,EAAiBtD,EAAQ,IACzBuD,EAAmBvD,EAAQ,IAC3BwD,EAAaxD,EAAQ,IACrB0C,EAAc1C,EAAQ,GACtByD,EAAezD,EAAQ,IACvB0D,EAAmB1D,EAAQ,IAG3B2D,EAAA,EAGAC,EAAA,qBACAC,EAAA,iBACAC,EAAA,kBAMA7B,EAHAnB,OAAAkB,UAGAC,eA6DA9B,EAAAD,QA7CA,SAAA4B,EAAAe,EAAAI,EAAAC,EAAAa,EAAAZ,GACA,IAAAa,EAAAtB,EAAAZ,GACAmC,EAAAvB,EAAAG,GACAqB,EAAAF,EAAAH,EAAAL,EAAA1B,GACAqC,EAAAF,EAAAJ,EAAAL,EAAAX,GAKAuB,GAHAF,KAAAN,EAAAE,EAAAI,IAGAJ,EACAO,GAHAF,KAAAP,EAAAE,EAAAK,IAGAL,EACAQ,EAAAJ,GAAAC,EAEA,GAAAG,GAAAb,EAAA3B,GAAA,CACA,IAAA2B,EAAAZ,GACA,SAEAmB,GAAA,EACAI,GAAA,EAEA,GAAAE,IAAAF,EAEA,OADAjB,MAAA,IAAAC,GACAY,GAAAN,EAAA5B,GACAuB,EAAAvB,EAAAe,EAAAI,EAAAC,EAAAa,EAAAZ,GACAG,EAAAxB,EAAAe,EAAAqB,EAAAjB,EAAAC,EAAAa,EAAAZ,GAEA,KAAAF,EAAAU,GAAA,CACA,IAAAY,EAAAH,GAAAnC,EAAA1B,KAAAuB,EAAA,eACA0C,EAAAH,GAAApC,EAAA1B,KAAAsC,EAAA,eAEA,GAAA0B,GAAAC,EAAA,CACA,IAAAC,EAAAF,EAAAzC,EAAAT,QAAAS,EACA4C,EAAAF,EAAA3B,EAAAxB,QAAAwB,EAGA,OADAM,MAAA,IAAAC,GACAW,EAAAU,EAAAC,EAAAzB,EAAAC,EAAAC,IAGA,QAAAmB,IAGAnB,MAAA,IAAAC,GACAG,EAAAzB,EAAAe,EAAAI,EAAAC,EAAAa,EAAAZ,sBC/EA,IAAAwB,EAAqB3E,EAAQ,IAC7B4E,EAAsB5E,EAAQ,IAC9B6E,EAAmB7E,EAAQ,IAC3B8E,EAAmB9E,EAAQ,IAC3B+E,EAAmB/E,EAAQ,IAS3B,SAAAgF,EAAAC,GACA,IAAAC,GAAA,EACA1C,EAAA,MAAAyC,EAAA,EAAAA,EAAAzC,OAGA,IADA2C,KAAAC,UACAF,EAAA1C,GAAA,CACA,IAAA6C,EAAAJ,EAAAC,GACAC,KAAAG,IAAAD,EAAA,GAAAA,EAAA,KAKAL,EAAAhD,UAAAoD,MAAAT,EACAK,EAAAhD,UAAA,OAAA4C,EACAI,EAAAhD,UAAAf,IAAA4D,EACAG,EAAAhD,UAAAuD,IAAAT,EACAE,EAAAhD,UAAAsD,IAAAP,EAEA5E,EAAAD,QAAA8E,iBCnBA7E,EAAAD,QALA,WACAiF,KAAAK,SAAA,GACAL,KAAAM,KAAA,oBCTA,IAAAC,EAAmB1F,EAAQ,GAM3B2F,EAHAhD,MAAAX,UAGA2D,OA4BAxF,EAAAD,QAjBA,SAAAyB,GACA,IAAAiE,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAAjE,GAEA,QAAAuD,EAAA,IAIAA,GADAU,EAAApD,OAAA,EAEAoD,EAAAC,MAEAF,EAAApF,KAAAqF,EAAAV,EAAA,KAEAC,KAAAM,KACA,oBCKAtF,EAAAD,QAJA,SAAAmB,EAAAwB,GACA,OAAAxB,IAAAwB,GAAAxB,MAAAwB,uBCjCA,IAAA6C,EAAmB1F,EAAQ,GAkB3BG,EAAAD,QAPA,SAAAyB,GACA,IAAAiE,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAAjE,GAEA,OAAAuD,EAAA,OAAAY,EAAAF,EAAAV,GAAA,qBCfA,IAAAQ,EAAmB1F,EAAQ,GAe3BG,EAAAD,QAJA,SAAAyB,GACA,OAAA+D,EAAAP,KAAAK,SAAA7D,IAAA,oBCZA,IAAA+D,EAAmB1F,EAAQ,GAyB3BG,EAAAD,QAbA,SAAAyB,EAAAN,GACA,IAAAuE,EAAAT,KAAAK,SACAN,EAAAQ,EAAAE,EAAAjE,GAQA,OANAuD,EAAA,KACAC,KAAAM,KACAG,EAAAG,KAAA,CAAApE,EAAAN,KAEAuE,EAAAV,GAAA,GAAA7D,EAEA8D,uBCtBA,IAAAa,EAAehG,EAAQ,IACvBiG,EAAgBjG,EAAQ,IACxBkG,EAAelG,EAAQ,IAGvB2D,EAAA,EACAwC,EAAA,EA4EAhG,EAAAD,QA7DA,SAAAqC,EAAAM,EAAAI,EAAAC,EAAAa,EAAAZ,GACA,IAAAiD,EAAAnD,EAAAU,EACA0C,EAAA9D,EAAAC,OACA8D,EAAAzD,EAAAL,OAEA,GAAA6D,GAAAC,KAAAF,GAAAE,EAAAD,GACA,SAGA,IAAAE,EAAApD,EAAAlC,IAAAsB,GACA,GAAAgE,GAAApD,EAAAlC,IAAA4B,GACA,OAAA0D,GAAA1D,EAEA,IAAAqC,GAAA,EACAsB,GAAA,EACAC,EAAAxD,EAAAkD,EAAA,IAAAH,OAAAF,EAMA,IAJA3C,EAAAmC,IAAA/C,EAAAM,GACAM,EAAAmC,IAAAzC,EAAAN,KAGA2C,EAAAmB,GAAA,CACA,IAAAK,EAAAnE,EAAA2C,GACAyB,EAAA9D,EAAAqC,GAEA,GAAAhC,EACA,IAAA0D,EAAAR,EACAlD,EAAAyD,EAAAD,EAAAxB,EAAArC,EAAAN,EAAAY,GACAD,EAAAwD,EAAAC,EAAAzB,EAAA3C,EAAAM,EAAAM,GAEA,QAAA2C,IAAAc,EAAA,CACA,GAAAA,EACA,SAEAJ,GAAA,EACA,MAGA,GAAAC,GACA,IAAAR,EAAApD,EAAA,SAAA8D,EAAAE,GACA,IAAAX,EAAAO,EAAAI,KACAH,IAAAC,GAAA5C,EAAA2C,EAAAC,EAAA1D,EAAAC,EAAAC,IACA,OAAAsD,EAAAV,KAAAc,KAEW,CACXL,GAAA,EACA,YAEK,GACLE,IAAAC,IACA5C,EAAA2C,EAAAC,EAAA1D,EAAAC,EAAAC,GACA,CACAqD,GAAA,EACA,OAKA,OAFArD,EAAA,OAAAZ,GACAY,EAAA,OAAAN,GACA2D,oBC/EA,IAAA9D,EAAc1C,EAAQ,GA2CtBG,EAAAD,QARA,WACA,IAAA4G,UAAAtE,OACA,SAEA,IAAAnB,EAAAyF,UAAA,GACA,OAAApE,EAAArB,KAAA,CAAAA,mBClBAlB,EAAAD,QAZA,SAAAqC,EAAAwE,GAIA,IAHA,IAAA7B,GAAA,EACA1C,EAAA,MAAAD,EAAA,EAAAA,EAAAC,SAEA0C,EAAA1C,GACA,GAAAuE,EAAAxE,EAAA2C,KAAA3C,GACA,SAGA,2BCnBA,IAAAyE,EAAkBhH,EAAQ,IAgB1BG,EAAAD,QALA,SAAAqC,EAAAlB,GAEA,QADA,MAAAkB,MAAAC,SACAwE,EAAAzE,EAAAlB,EAAA,sBCSAlB,EAAAD,QAZA,SAAAqC,EAAAlB,EAAA4F,GAIA,IAHA,IAAA/B,EAAA+B,EAAA,EACAzE,EAAAD,EAAAC,SAEA0C,EAAA1C,GACA,GAAAD,EAAA2C,KAAA7D,EACA,OAAA6D,EAGA,yBCiBA/E,EAAAD,QAJA,SAAAmB,EAAAwB,GACA,OAAAxB,IAAAwB,GAAAxB,MAAAwB,uBCjCA,IAAAqE,EAAiBlH,EAAQ,IAGzB2D,EAAA,EAMA1B,EAHAnB,OAAAkB,UAGAC,eA+EA9B,EAAAD,QAhEA,SAAA4B,EAAAe,EAAAI,EAAAC,EAAAa,EAAAZ,GACA,IAAAiD,EAAAnD,EAAAU,EACAwD,EAAAD,EAAApF,GACAsF,EAAAD,EAAA3E,OAIA,GAAA4E,GAHAF,EAAArE,GACAL,SAEA4D,EACA,SAGA,IADA,IAAAlB,EAAAkC,EACAlC,KAAA,CACA,IAAAvD,EAAAwF,EAAAjC,GACA,KAAAkB,EAAAzE,KAAAkB,EAAAZ,EAAA1B,KAAAsC,EAAAlB,IACA,SAIA,IAAA4E,EAAApD,EAAAlC,IAAAa,GACA,GAAAyE,GAAApD,EAAAlC,IAAA4B,GACA,OAAA0D,GAAA1D,EAEA,IAAA2D,GAAA,EACArD,EAAAmC,IAAAxD,EAAAe,GACAM,EAAAmC,IAAAzC,EAAAf,GAGA,IADA,IAAAuF,EAAAjB,IACAlB,EAAAkC,GAAA,CAEA,IAAAE,EAAAxF,EADAH,EAAAwF,EAAAjC,IAEAyB,EAAA9D,EAAAlB,GAEA,GAAAuB,EACA,IAAA0D,EAAAR,EACAlD,EAAAyD,EAAAW,EAAA3F,EAAAkB,EAAAf,EAAAqB,GACAD,EAAAoE,EAAAX,EAAAhF,EAAAG,EAAAe,EAAAM,GAGA,UAAA2C,IAAAc,EACAU,IAAAX,GAAA5C,EAAAuD,EAAAX,EAAA1D,EAAAC,EAAAC,GACAyD,GACA,CACAJ,GAAA,EACA,MAEAa,MAAA,eAAA1F,GAEA,GAAA6E,IAAAa,EAAA,CACA,IAAAE,EAAAzF,EAAA0F,YACAC,EAAA5E,EAAA2E,YAGAD,GAAAE,GACA,gBAAA3F,GAAA,gBAAAe,KACA,mBAAA0E,mBACA,mBAAAE,qBACAjB,GAAA,GAKA,OAFArD,EAAA,OAAArB,GACAqB,EAAA,OAAAN,GACA2D,oBCrFA,IAGAkB,EAHc1H,EAAQ,GAGtB2H,CAAA7G,OAAA8G,KAAA9G,QAEAX,EAAAD,QAAAwH,iBCSAvH,EAAAD,QANA,SAAA2H,EAAAC,GACA,gBAAAC,GACA,OAAAF,EAAAC,EAAAC,qBCTA,IAOAC,EAPAlH,OAAAkB,UAOAiG,SAaA9H,EAAAD,QAJA,SAAAmB,GACA,OAAA2G,EAAAzH,KAAAc,mBCDAlB,EAAAD,QAJA,WACA,yBCGAC,EAAAD,QAJA,WACA,yBCcAC,EAAAD,QAJA,SAAAmB,GACA,aAAAA,GAAA,iBAAAA,0zBCyDe6G,cA5Eb,SAAAA,EAAYC,GAAO,IAAAC,MAAA,mGAAAC,CAAAlD,KAAA+C,KACjB/C,MAAAiD,MAAAE,EAAAJ,GAAA3H,KAAA4E,KAAMgD,mDAEDI,gBAAkB,CAAC,gBAAiB,YAAa,cACtDH,EAAKI,mBAAqB,CAAC,UAAW,cAEtCJ,EAAKK,8BAAgCL,EAAKK,8BAA8B7G,KAAnC8G,IAAAN,KANpBA,wPADEO,aAAQC,WAAWC,4DAU3BC,GAAQ,IAAAC,EAAA5D,KACnB,OAAO2D,EAAOE,IAAI,SAAAC,GAChB,OAAOF,EAAKG,YAAY,CACtBC,OAAQF,EACRG,SAAUL,EAAKM,MAAMD,SACrBE,WAAYP,EAAKM,MAAME,OACvBC,SAAUT,EAAKU,YAAY7H,KAAKmH,EAAME,EAAEtI,+CAKjCmI,EAAQY,GACnB,OAAOZ,EAAOa,OAAO,SAAAC,GACnB,OAAOF,EAAWG,SAASD,EAAMjJ,gEAKnCwE,KAAK2E,SAAS,CACZC,6BAA8B5E,KAAKkE,MAAMU,+DAK3C,GAAI5E,KAAKkE,MAAMA,QAAUW,YAAUC,QACjC,OAAOC,EAAAC,EAAAC,cAACC,EAAA,iBAAD,MAGT,GAAIlF,KAAKkE,MAAMA,QAAUW,YAAUM,QAAUnF,KAAKkE,MAAMkB,UACtD,OACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,2BAAf,mDACkDN,EAAAC,EAAAC,cAAA,KAAGK,KAAK,8BAAR,oBAKtD,IAAIC,EAAWvF,KAAKkE,MAAMA,QAAUW,YAAUW,OAC1CC,GAAcC,IAAU1F,KAAKkE,MAAMyB,YAAa3F,KAAKkE,MAAMD,UAE3D2B,EAAiB5F,KAAK6F,aAAa7F,KAAKkE,MAAMkB,UAAWpF,KAAKoD,iBAC9D0C,EAAmB9F,KAAK6F,aAAa7F,KAAKkE,MAAMkB,UAAWpF,KAAKqD,oBAEpE,OACE0B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMa,SAAU/F,KAAK+F,SACfC,eAAgBT,IAAaE,GAChCzF,KAAKkE,MAAME,OAAO6B,SACjBlB,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iCACbN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKjF,KAAKkE,MAAME,OAAO6B,WAI5BjG,KAAKkG,aAAaN,GAClBE,EAAiBzI,OAAS,EACvB0H,EAAAC,EAAAC,cAAA,OAAKI,UAAU,iBACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,kBAAkBc,KAAK,SAASC,QAASpG,KAAKsD,+BAAhE,0BAIA,KAELtD,KAAKkE,MAAMU,4BAA8B5E,KAAKkG,aAAaJ,GAAoB,26BCxExF,IAEMO,cAQJ,SAAAA,EAAYrD,GAAO,IAAAC,EAAA,mGAAAqD,CAAAtG,KAAAqG,IACjBpD,EAAAsD,EAAAvG,KAAAwG,EAAAH,GAAAjL,KAAA4E,KAAMgD,KACDkB,MAAQ,CACXuC,YAAY,GAHGxD,8OARiBhG,IAAMyJ,uDAExC,MAAO,CACLC,MAAOrJ,IAAUsJ,OAAOC,WACxBpG,KAAMnD,IAAUX,OAAOkK,+DAWP,IAAAjD,EAAA5D,KAClBA,KAAK8G,WAAanJ,IAASoJ,YAAY/G,MAAM8G,WAC7CE,OAAOC,iBAAiB,SAAU,kBAAMrD,EAAKsD,kBAAiB,GAC9DlH,KAAKkH,+DAGgB,IAAAC,EAAAnH,KACrBgH,OAAOI,oBAAoB,SAAU,kBAAMD,EAAKD,kBAAiB,2CAIjE,IAAKlH,KAAKyG,WAAY,CACpB,IAAIY,EAAcC,EAAEtH,KAAK8G,YAAYS,QAErCvH,KAAK2E,SAAS,CACZ4C,MAAOF,EACPG,OAAQH,GAjCK,GAAK,4CAuCtBrH,KAAK2E,SAAS,CACZ8B,YAAY,IAGdzG,KAAKkH,iDAGE,IAAAO,EAAAzH,KACD0H,EAAgB1H,KAAKgD,MAAMvC,KAA3BiH,YAEN,OAAKA,EAKH3C,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACZrF,KAAKkE,MAAMuC,WACV1B,EAAAC,EAAAC,cAAA,UACE0C,IAAKD,EACLE,QAAQ,kCACRL,MAAOvH,KAAKkE,MAAMqD,MAClBC,OAAQxH,KAAKkE,MAAMsD,SAGrBzC,EAAAC,EAAAC,cAAA,UACEI,UAAU,kBACVc,KAAK,SACLC,QAAS,kBAAMqB,EAAKI,gBAHtB,iBAbG9C,EAAAC,EAAAC,cAAA,yCA0BboB,EAAwByB,SAAW,SAAS5L,GAC1C,MAAO,gBAGMmK,kgCC9ET0B,gaAA2BvE,aAAQC,yDACxBT,GACb,OAAO+B,EAAAC,EAAAC,cAAC+C,EAADC,EAAA,CAAUC,OAAQlI,MAAUgD,yCAIvC+E,EAAmBI,YAAc,eAEjC3E,UAAQ4E,IAAI,eAAgBL,GAC5BvE,UAAQ6E,WAAW,eAAgBhC,GAEpB0B","file":"sessionstack.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 29);\n","module.exports = React;","module.exports = SentryApp;","var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n","module.exports = PropTypes;","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n","var baseIsEqual = require('./_baseIsEqual');\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nmodule.exports = isEqual;\n","module.exports = ReactDOM;","var baseIsEqualDeep = require('./_baseIsEqualDeep'),\n    isObjectLike = require('./isObjectLike');\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nmodule.exports = baseIsEqual;\n","var Stack = require('./_Stack'),\n    equalArrays = require('./_equalArrays'),\n    equalByTag = require('./_equalByTag'),\n    equalObjects = require('./_equalObjects'),\n    getTag = require('./_getTag'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isTypedArray = require('./isTypedArray');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nmodule.exports = baseIsEqualDeep;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n","var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n","var SetCache = require('./_SetCache'),\n    arraySome = require('./_arraySome'),\n    cacheHas = require('./_cacheHas');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalArrays;\n","var isArray = require('./isArray');\n\n/**\n * Casts `value` as an array if it's not one.\n *\n * @static\n * @memberOf _\n * @since 4.4.0\n * @category Lang\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast array.\n * @example\n *\n * _.castArray(1);\n * // => [1]\n *\n * _.castArray({ 'a': 1 });\n * // => [{ 'a': 1 }]\n *\n * _.castArray('abc');\n * // => ['abc']\n *\n * _.castArray(null);\n * // => [null]\n *\n * _.castArray(undefined);\n * // => [undefined]\n *\n * _.castArray();\n * // => []\n *\n * var array = [1, 2, 3];\n * console.log(_.castArray(array) === array);\n * // => true\n */\nfunction castArray() {\n  if (!arguments.length) {\n    return [];\n  }\n  var value = arguments[0];\n  return isArray(value) ? value : [value];\n}\n\nmodule.exports = castArray;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arraySome;\n","var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n","var getAllKeys = require('./_getAllKeys');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nmodule.exports = equalObjects;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","import React from 'react';\nimport _ from 'lodash';\nimport {Form, FormState, LoadingIndicator, plugins} from 'sentry';\n\n\nclass Settings extends plugins.BasePlugin.DefaultSettings {\n  constructor(props) {\n    super(props);\n\n    this.REQUIRED_FIELDS = ['account_email', 'api_token', 'website_id'];\n    this.ON_PREMISES_FIELDS = ['api_url', 'player_url'];\n\n    this.toggleOnPremisesConfiguration = this.toggleOnPremisesConfiguration.bind(this);\n  }\n\n  renderFields(fields) {\n    return fields.map(f => {\n      return this.renderField({\n        config: f,\n        formData: this.state.formData,\n        formErrors: this.state.errors,\n        onChange: this.changeField.bind(this, f.name)\n      });\n    })\n  }\n\n  filterFields(fields, fieldNames) {\n    return fields.filter(field => {\n      return fieldNames.includes(field.name);\n    })\n  }\n\n  toggleOnPremisesConfiguration() {\n    this.setState({\n      showOnPremisesConfiguration: !this.state.showOnPremisesConfiguration\n    });\n  }\n\n  render() {\n    if (this.state.state === FormState.LOADING) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.state === FormState.ERROR && !this.state.fieldList) {\n      return (\n        <div className=\"alert alert-error m-b-1\">\n          An unknown error occurred. Need help with this? <a href=\"https://sentry.io/support/\">Contact support</a>\n        </div>\n      );\n    }\n\n    let isSaving = this.state.state === FormState.SAVING;\n    let hasChanges = !_.isEqual(this.state.initialData, this.state.formData);\n\n    let requiredFields = this.filterFields(this.state.fieldList, this.REQUIRED_FIELDS);\n    let onPremisesFields = this.filterFields(this.state.fieldList, this.ON_PREMISES_FIELDS);\n\n    return (\n      <Form onSubmit={this.onSubmit}\n            submitDisabled={isSaving || !hasChanges}>\n        {this.state.errors.__all__ &&\n          <div className=\"alert alert-block alert-error\">\n            <ul>\n              <li>{this.state.errors.__all__}</li>\n            </ul>\n          </div>\n        }\n        {this.renderFields(requiredFields)}\n        {onPremisesFields.length > 0 ?\n            <div className=\"control-group\">\n              <button className=\"btn btn-default\" type=\"button\" onClick={this.toggleOnPremisesConfiguration}>\n                Configure on-premises\n              </button>\n            </div>\n            : null\n        }\n        {this.state.showOnPremisesConfiguration ? this.renderFields(onPremisesFields) : null}\n      </Form>\n    );\n  }\n}\n\nexport default Settings;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\nconst ASPECT_RATIO = 16 / 9;\n\nclass SessionStackContextType extends React.Component {\n  static propTypes() {\n    return {\n      alias: PropTypes.string.isRequired,\n      data: PropTypes.object.isRequired\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      showIframe: false\n    };\n  }\n\n  componentDidMount() {\n    this.parentNode = ReactDOM.findDOMNode(this).parentNode;\n    window.addEventListener(\"resize\", () => this.setIframeSize(), false);\n    this.setIframeSize();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () => this.setIframeSize(), false);\n  }\n\n  setIframeSize() {\n    if (!this.showIframe) {\n      let parentWidth = $(this.parentNode).width();\n\n      this.setState({\n        width: parentWidth,\n        height: parentWidth / ASPECT_RATIO\n      });\n    }\n  }\n\n  playSession() {\n    this.setState({\n      showIframe: true\n    });\n\n    this.setIframeSize();\n  }\n\n  render() {\n    let { session_url } = this.props.data;\n\n    if (!session_url) {\n      return <h4>Session not found.</h4>;\n    }\n\n    return (\n      <div className=\"panel-group\">\n        {this.state.showIframe ? (\n          <iframe\n            src={session_url}\n            sandbox=\"allow-scripts allow-same-origin\"\n            width={this.state.width}\n            height={this.state.height}\n          />\n        ) : (\n          <button\n            className=\"btn btn-default\"\n            type=\"button\"\n            onClick={() => this.playSession()}\n          >\n            Play session\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nSessionStackContextType.getTitle = function(value) {\n  return \"SessionStack\";\n};\n\nexport default SessionStackContextType;\n","import React from 'react';\nimport {plugins} from 'sentry';\n\nimport Settings from './components/settings';\nimport SessionStackContextType from './contexts/sessionstack';\n\nclass SessionStackPlugin extends plugins.BasePlugin {\n  renderSettings(props) {\n    return <Settings plugin={this} {...props} />;\n  }\n}\n\nSessionStackPlugin.displayName = 'SessionStack';\n\nplugins.add('sessionstack', SessionStackPlugin);\nplugins.addContext('sessionstack', SessionStackContextType);\n\nexport default SessionStackPlugin;\n"],"sourceRoot":""}
\ No newline at end of file
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz
new file mode 100644
index 0000000000..a41f107961
Binary files /dev/null and b/src/new_sentry_plugins/sessionstack/static/sessionstack/dist/sessionstack.js.map.gz differ
diff --git a/src/new_sentry_plugins/sessionstack/static/sessionstack/sessionstack.jsx b/src/new_sentry_plugins/sessionstack/static/sessionstack/sessionstack.jsx
new file mode 100644
index 0000000000..cf10947fb9
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/static/sessionstack/sessionstack.jsx
@@ -0,0 +1,18 @@
+import React from 'react';
+import {plugins} from 'sentry';
+
+import Settings from './components/settings';
+import SessionStackContextType from './contexts/sessionstack';
+
+class SessionStackPlugin extends plugins.BasePlugin {
+  renderSettings(props) {
+    return <Settings plugin={this} {...props} />;
+  }
+}
+
+SessionStackPlugin.displayName = 'SessionStack';
+
+plugins.add('sessionstack', SessionStackPlugin);
+plugins.addContext('sessionstack', SessionStackContextType);
+
+export default SessionStackPlugin;
diff --git a/src/new_sentry_plugins/sessionstack/utils.py b/src/new_sentry_plugins/sessionstack/utils.py
new file mode 100644
index 0000000000..6174cabb92
--- /dev/null
+++ b/src/new_sentry_plugins/sessionstack/utils.py
@@ -0,0 +1,19 @@
+from __future__ import absolute_import
+
+from base64 import b64encode
+from six.moves.urllib.parse import urlencode
+
+
+def get_basic_auth(username, password):
+    basic_auth = b64encode(username + ":" + password).decode("ascii")
+
+    return "Basic %s" % basic_auth
+
+
+def remove_trailing_slashes(url):
+    return url.strip().rstrip("/")
+
+
+def add_query_params(url, query_params):
+    query_string = urlencode(query_params)
+    return url + "?" + query_string
diff --git a/src/new_sentry_plugins/slack/README.rst b/src/new_sentry_plugins/slack/README.rst
new file mode 100644
index 0000000000..eceb445627
--- /dev/null
+++ b/src/new_sentry_plugins/slack/README.rst
@@ -0,0 +1,3 @@
+**Note**: This plugin has been deprecated in favor of the `Slack Global Integration <https://docs.sentry.io/workflow/integrations/global-integrations/#slack>`_.
+
+Go to your project's configuration page (Projects -> [Project]) and select the Slack tab. Enter the required credentials and click save changes.
diff --git a/src/new_sentry_plugins/slack/__init__.py b/src/new_sentry_plugins/slack/__init__.py
new file mode 100644
index 0000000000..a37e36c003
--- /dev/null
+++ b/src/new_sentry_plugins/slack/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.base import assert_package_not_installed
+
+assert_package_not_installed("sentry-slack")
diff --git a/src/new_sentry_plugins/slack/plugin.py b/src/new_sentry_plugins/slack/plugin.py
new file mode 100644
index 0000000000..02b667345c
--- /dev/null
+++ b/src/new_sentry_plugins/slack/plugin.py
@@ -0,0 +1,244 @@
+from __future__ import absolute_import
+
+from sentry import http, tagstore
+from sentry.plugins.bases import notify
+from sentry.utils import json
+from sentry.utils.http import absolute_uri
+
+from new_sentry_plugins.base import CorePluginMixin
+
+LEVEL_TO_COLOR = {
+    "debug": "cfd3da",
+    "info": "2788ce",
+    "warning": "f18500",
+    "error": "f43f20",
+    "fatal": "d20f2a",
+}
+
+
+class SlackPlugin(CorePluginMixin, notify.NotificationPlugin):
+    title = "Slack"
+    slug = "slack"
+    description = "Post notifications to a Slack channel."
+    conf_key = "slack"
+
+    def is_configured(self, project):
+        return bool(self.get_option("webhook", project))
+
+    def get_config(self, project, **kwargs):
+        return [
+            {
+                "name": "webhook",
+                "label": "Webhook URL",
+                "type": "url",
+                "placeholder": "e.g. https://hooks.slack.com/services/000000000/000000000/00000000000000000",
+                "required": True,
+                "help": "Your custom Slack webhook URL.",
+            },
+            {
+                "name": "username",
+                "label": "Bot Name",
+                "type": "string",
+                "placeholder": "e.g. Sentry",
+                "default": "Sentry",
+                "required": False,
+                "help": "The name used when publishing messages.",
+            },
+            {
+                "name": "icon_url",
+                "label": "Icon URL",
+                "type": "url",
+                "required": False,
+                "help": (
+                    "The url of the icon to appear beside your bot (32px png), "
+                    "leave empty for none.<br />You may use "
+                    "http://myovchev.github.io/sentry-slack/images/logo32.png"
+                ),
+            },
+            {
+                "name": "channel",
+                "label": "Destination",
+                "type": "string",
+                "placeholder": "e.g. #engineering",
+                "required": False,
+                "help": "Optional #channel name or @user",
+            },
+            {
+                "name": "custom_message",
+                "label": "Custom Message",
+                "type": "string",
+                "placeholder": "e.g. Hey <!everyone> there is something wrong",
+                "required": False,
+                "help": "Optional - Slack message formatting can be used",
+            },
+            {
+                "name": "include_tags",
+                "label": "Include Tags",
+                "type": "bool",
+                "required": False,
+                "help": "Include tags with notifications",
+            },
+            {
+                "name": "included_tag_keys",
+                "label": "Included Tags",
+                "type": "string",
+                "required": False,
+                "help": (
+                    "Only include these tags (comma separated list). " "Leave empty to include all."
+                ),
+            },
+            {
+                "name": "excluded_tag_keys",
+                "label": "Excluded Tags",
+                "type": "string",
+                "required": False,
+                "help": "Exclude these tags (comma separated list).",
+            },
+            {
+                "name": "include_rules",
+                "label": "Include Rules",
+                "type": "bool",
+                "required": False,
+                "help": "Include triggering rules with notifications.",
+            },
+            {
+                "name": "exclude_project",
+                "label": "Exclude Project Name",
+                "type": "bool",
+                "default": False,
+                "required": False,
+                "help": "Exclude project name with notifications.",
+            },
+            {
+                "name": "exclude_culprit",
+                "label": "Exclude Culprit",
+                "type": "bool",
+                "default": False,
+                "required": False,
+                "help": "Exclude culprit with notifications.",
+            },
+        ]
+
+    def color_for_event(self, event):
+        return "#" + LEVEL_TO_COLOR.get(event.get_tag("level"), "error")
+
+    def _get_tags(self, event):
+        tag_list = event.get_tags()
+        if not tag_list:
+            return ()
+
+        return (
+            (tagstore.get_tag_key_label(k), tagstore.get_tag_value_label(k, v)) for k, v in tag_list
+        )
+
+    def get_tag_list(self, name, project):
+        option = self.get_option(name, project)
+        if not option:
+            return None
+        return set(tag.strip().lower() for tag in option.split(","))
+
+    def notify(self, notification):
+        event = notification.event
+        group = event.group
+        project = group.project
+
+        if not self.is_configured(project):
+            return
+
+        webhook = self.get_option("webhook", project)
+        username = (self.get_option("username", project) or "Sentry").strip()
+        icon_url = self.get_option("icon_url", project)
+        channel = (self.get_option("channel", project) or "").strip()
+
+        title = event.title.encode("utf-8")
+        # TODO(dcramer): we'd like this to be the event culprit, but Sentry
+        # does not currently retain it
+        if group.culprit:
+            culprit = group.culprit.encode("utf-8")
+        else:
+            culprit = None
+        project_name = project.get_full_name().encode("utf-8")
+
+        fields = []
+
+        # They can be the same if there is no culprit
+        # So we set culprit to an empty string instead of duplicating the text
+        if not self.get_option("exclude_culprit", project) and culprit and title != culprit:
+            fields.append({"title": "Culprit", "value": culprit, "short": False})
+        if not self.get_option("exclude_project", project):
+            fields.append({"title": "Project", "value": project_name, "short": True})
+
+        if self.get_option("custom_message", project):
+            fields.append(
+                {
+                    "title": "Custom message",
+                    "value": self.get_option("custom_message", project),
+                    "short": False,
+                }
+            )
+
+        if self.get_option("include_rules", project):
+            rules = []
+            for rule in notification.rules:
+                rule_link = "/%s/%s/settings/alerts/rules/%s/" % (
+                    group.organization.slug,
+                    project.slug,
+                    rule.id,
+                )
+
+                # Make sure it's an absolute uri since we're sending this
+                # outside of Sentry into Slack
+                rule_link = absolute_uri(rule_link)
+                rules.append((rule_link, rule.label))
+
+            if rules:
+                value = u", ".join(u"<{} | {}>".format(*r) for r in rules)
+
+                fields.append(
+                    {"title": "Triggered By", "value": value.encode("utf-8"), "short": False}
+                )
+
+        if self.get_option("include_tags", project):
+            included_tags = set(self.get_tag_list("included_tag_keys", project) or [])
+            excluded_tags = set(self.get_tag_list("excluded_tag_keys", project) or [])
+            for tag_key, tag_value in self._get_tags(event):
+                key = tag_key.lower()
+                std_key = tagstore.get_standardized_key(key)
+                if included_tags and key not in included_tags and std_key not in included_tags:
+                    continue
+                if excluded_tags and (key in excluded_tags or std_key in excluded_tags):
+                    continue
+                fields.append(
+                    {
+                        "title": tag_key.encode("utf-8"),
+                        "value": tag_value.encode("utf-8"),
+                        "short": True,
+                    }
+                )
+
+        payload = {
+            "attachments": [
+                {
+                    "fallback": "[%s] %s" % (project_name, title),
+                    "title": title,
+                    "title_link": group.get_absolute_url(params={"referrer": "slack"}),
+                    "color": self.color_for_event(event),
+                    "fields": fields,
+                }
+            ]
+        }
+
+        if username:
+            payload["username"] = username.encode("utf-8")
+
+        if channel:
+            payload["channel"] = channel
+
+        if icon_url:
+            payload["icon_url"] = icon_url
+
+        values = {"payload": json.dumps(payload)}
+
+        # Apparently we've stored some bad data from before we used `URLField`.
+        webhook = webhook.strip(" ")
+        return http.safe_urlopen(webhook, method="POST", data=values, timeout=5)
diff --git a/src/new_sentry_plugins/splunk/README.rst b/src/new_sentry_plugins/splunk/README.rst
new file mode 100644
index 0000000000..26ccc919b5
--- /dev/null
+++ b/src/new_sentry_plugins/splunk/README.rst
@@ -0,0 +1,8 @@
+These docs are specific to a Splunk Cloud (self-service) instance. For more details on the HEC endpoint, see the `official docs <https://docs.splunk.com/Documentation/Splunk/latest/Data/UsetheHTTPEventCollector#Send_data_to_HTTP_Event_Collector_on_Splunk_Cloud_instances>`_.
+
+- In your Splunk instance, navigate to Settings -> Data Inputs -> HTTP Event Collector
+- Create a new token; enter a name ("sentry") and select an index ("main")
+- Under Global Settings, Enable the HEC endpoint noting the port (8088), and SSL requirement (true)
+- In Sentry, enable the Splunk plugin, and paste the newly acquired token.
+- For the endpoint, use https://input-[splunk-instance].cloud.splunk.com:8088
+- Ensure that `enable indexer acknowledgement` is not checked.
diff --git a/src/new_sentry_plugins/splunk/__init__.py b/src/new_sentry_plugins/splunk/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/splunk/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/splunk/plugin.py b/src/new_sentry_plugins/splunk/plugin.py
new file mode 100644
index 0000000000..4adccc4190
--- /dev/null
+++ b/src/new_sentry_plugins/splunk/plugin.py
@@ -0,0 +1,288 @@
+"""
+- Turn on HTTP Event Collector by enabling its endpoint. HEC is not enabled by default.
+  - http://dev.splunk.com/view/event-collector/SP-CAAAE7F
+  - Settings > Data Inputs > HTTP Event Collector > Add new
+    - Name: Sentry
+  - You'll be given an HEC token, which is needed to configure Sentry.
+- On the client that will log to HEC, create a POST request, and set its authentication header or key/value pair to include the HEC token.
+- POST data to the HEC token receiver.
+
+Note: Managed Splunk Cloud customers can turn on HTTP Event Collector by filing a request ticket with Splunk Support.
+Note: Managed Splunk Cloud customers can create a HEC token by filing a request ticket with Splunk Support.
+
+For more details on the payload: http://dev.splunk.com/view/event-collector/SP-CAAAE6M
+"""
+
+from __future__ import absolute_import
+
+import logging
+
+import six
+from requests.exceptions import ReadTimeout
+
+from sentry import http, tagstore
+from sentry.app import ratelimiter
+from sentry.plugins.base import Plugin
+from sentry.plugins.base.configuration import react_plugin_config
+from sentry.utils import metrics
+from sentry.utils.hashlib import md5_text
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.utils import get_secret_field_config
+from new_sentry_plugins.anonymizeip import anonymize_ip
+
+logger = logging.getLogger(__name__)
+
+
+class SplunkError(Exception):
+    def __init__(self, status_code, code=0, text="unknown error"):
+        self.status_code = status_code
+        self.code = code
+        self.text = text
+        super(SplunkError, self).__init__(text)
+
+    @classmethod
+    def from_response(cls, response):
+        try:
+            body = response.json()
+        except Exception:
+            return cls(
+                status_code=response.status_code, code=0, text="Unable to parse response body"
+            )
+
+        code = body.get("code")
+        if code in SplunkInvalidToken.KNOWN_CODES:
+            cls = SplunkInvalidToken
+        elif code in SplunkServerBusy.KNOWN_CODES:
+            cls = SplunkInvalidToken
+        elif code in SplunkConfigError.KNOWN_CODES:
+            cls = SplunkConfigError
+        return cls(status_code=response.status_code, code=code, text=body.get("text"))
+
+    def __repr__(self):
+        return "<%s: status_code=%s, code=%s, text=%s>" % (
+            type(self).__name__,
+            self.status_code,
+            self.code,
+            self.text,
+        )
+
+
+class SplunkInvalidToken(SplunkError):
+    # 1 - token disabled
+    # 2 - token required (should never happen)
+    # 3 - invalid authorization (should never happen)
+    # 4 - invalid token
+    KNOWN_CODES = frozenset([1, 2, 3, 4])
+
+
+class SplunkServerBusy(SplunkError):
+    # 9 - server is busy
+    KNOWN_CODES = frozenset([9])
+
+
+class SplunkConfigError(SplunkError):
+    # 7 - incorrect index
+    # 10 - data channel missing
+    # 11 - invalid data channel
+    KNOWN_CODES = frozenset([7, 10, 11])
+
+
+class SplunkPlugin(CorePluginMixin, Plugin):
+    title = "Splunk"
+    slug = "splunk"
+    description = "Send Sentry events into Splunk."
+    conf_key = "splunk"
+
+    def configure(self, project, request):
+        return react_plugin_config(self, project, request)
+
+    def has_project_conf(self):
+        return True
+
+    def get_plugin_type(self):
+        return "data-forwarding"
+
+    def get_config(self, project, **kwargs):
+        return [
+            {
+                "name": "instance",
+                "label": "Instance URL",
+                "type": "url",
+                "required": True,
+                "help": "The HTTP Event Collector endpoint for your Splunk instance.",
+                "placeholder": "e.g. https://input-foo.cloud.splunk.com:8088",
+            },
+            {
+                "name": "index",
+                "label": "Index",
+                "type": "string",
+                "required": True,
+                "default": "main",
+            },
+            {
+                "name": "source",
+                "label": "Source",
+                "type": "string",
+                "required": True,
+                "default": "sentry",
+            },
+            get_secret_field_config(
+                name="token", label="Token", secret=self.get_option("token", project)
+            ),
+        ]
+
+    def get_host_for_splunk(self, event):
+        host = event.get_tag("server_name")
+        if host:
+            return host
+
+        user_interface = event.interfaces.get("sentry.interfaces.User")
+        if user_interface:
+            host = user_interface.ip_address
+            if host:
+                return host
+
+        return None
+
+    def get_event_payload(self, event):
+        props = {
+            "event_id": event.event_id,
+            "issue_id": event.group_id,
+            "project_id": event.project.slug,
+            "transaction": event.get_tag("transaction") or "",
+            "release": event.get_tag("sentry:release") or "",
+            "environment": event.get_tag("environment") or "",
+            "type": event.get_event_type(),
+        }
+        props["tags"] = [
+            [k.format(tagstore.get_standardized_key(k)), v] for k, v in event.get_tags()
+        ]
+        for key, value in six.iteritems(event.interfaces):
+            if key == "request":
+                headers = value.headers
+                if not isinstance(headers, dict):
+                    headers = dict(headers or ())
+
+                props.update(
+                    {
+                        "request_url": value.url,
+                        "request_method": value.method,
+                        "request_referer": headers.get("Referer", ""),
+                    }
+                )
+            elif key == "exception":
+                exc = value.values[0]
+                props.update({"exception_type": exc.type, "exception_value": exc.value})
+            elif key == "logentry":
+                props.update({"message": value.formatted or value.message})
+            elif key in ("csp", "expectct", "expectstable", "hpkp"):
+                props.update(
+                    {
+                        "{}_{}".format(key.rsplit(".", 1)[-1].lower(), k): v
+                        for k, v in six.iteritems(value.to_json())
+                    }
+                )
+            elif key == "user":
+                user_payload = {}
+                if value.id:
+                    user_payload["user_id"] = value.id
+                if value.email:
+                    user_payload["user_email_hash"] = md5_text(value.email).hexdigest()
+                if value.ip_address:
+                    user_payload["user_ip_trunc"] = anonymize_ip(value.ip_address)
+                if user_payload:
+                    props.update(user_payload)
+        return props
+
+    # http://dev.splunk.com/view/event-collector/SP-CAAAE6M
+    def post_process(self, event, **kwargs):
+        token = self.get_option("token", event.project)
+        index = self.get_option("index", event.project)
+        instance = self.get_option("instance", event.project)
+        if not (token and index and instance):
+            metrics.incr(
+                "integrations.splunk.forward-event.unconfigured",
+                tags={
+                    "project_id": event.project_id,
+                    "organization_id": event.project.organization_id,
+                    "event_type": event.get_event_type(),
+                },
+            )
+            return
+
+        if not instance.endswith("/services/collector"):
+            instance = instance.rstrip("/") + "/services/collector"
+
+        source = self.get_option("source", event.project) or "sentry"
+
+        rl_key = "splunk:{}".format(md5_text(token).hexdigest())
+        # limit splunk to 50 requests/second
+        if ratelimiter.is_limited(rl_key, limit=1000, window=1):
+            metrics.incr(
+                "integrations.splunk.forward-event.rate-limited",
+                tags={
+                    "project_id": event.project_id,
+                    "organization_id": event.project.organization_id,
+                    "event_type": event.get_event_type(),
+                },
+            )
+            return
+
+        payload = {
+            "time": int(event.datetime.strftime("%s")),
+            "source": source,
+            "index": index,
+            "event": self.get_event_payload(event),
+        }
+        host = self.get_host_for_splunk(event)
+        if host:
+            payload["host"] = host
+
+        session = http.build_session()
+        try:
+            # https://docs.splunk.com/Documentation/Splunk/7.2.3/Data/TroubleshootHTTPEventCollector
+            resp = session.post(
+                instance,
+                json=payload,
+                # Splunk cloud instances certifcates dont play nicely
+                verify=False,
+                headers={"Authorization": "Splunk {}".format(token)},
+                timeout=5,
+            )
+            if resp.status_code != 200:
+                raise SplunkError.from_response(resp)
+        except Exception as exc:
+            metric = "integrations.splunk.forward-event.error"
+            metrics.incr(
+                metric,
+                tags={
+                    "project_id": event.project_id,
+                    "organization_id": event.project.organization_id,
+                    "event_type": event.get_event_type(),
+                    "error_code": getattr(exc, "code", None),
+                },
+            )
+            logger.info(
+                metric,
+                extra={
+                    "instance": instance,
+                    "project_id": event.project_id,
+                    "organization_id": event.project.organization_id,
+                },
+            )
+
+            if isinstance(exc, ReadTimeout):
+                # If we get a ReadTimeout we don't need to raise an error here.
+                # Just log and return.
+                return
+            raise
+
+        metrics.incr(
+            "integrations.splunk.forward-event.success",
+            tags={
+                "project_id": event.project_id,
+                "organization_id": event.project.organization_id,
+                "event_type": event.get_event_type(),
+            },
+        )
diff --git a/src/new_sentry_plugins/utils.py b/src/new_sentry_plugins/utils.py
new file mode 100644
index 0000000000..89ddf1e08d
--- /dev/null
+++ b/src/new_sentry_plugins/utils.py
@@ -0,0 +1,16 @@
+from __future__ import absolute_import
+
+
+def get_secret_field_config(secret, help_text=None, include_prefix=False, **kwargs):
+    has_saved_value = bool(secret)
+    saved_text = "Only enter a new value if you wish to update the existing one. "
+    context = {
+        "type": "secret",
+        "has_saved_value": has_saved_value,
+        "prefix": (secret or "")[:4] if include_prefix else "",
+        "required": not has_saved_value,
+    }
+    if help_text:
+        context["help"] = "%s%s" % ((saved_text if has_saved_value else ""), help_text)
+    context.update(kwargs)
+    return context
diff --git a/src/new_sentry_plugins/victorops/__init__.py b/src/new_sentry_plugins/victorops/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/victorops/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/victorops/client.py b/src/new_sentry_plugins/victorops/client.py
new file mode 100644
index 0000000000..a80b04569a
--- /dev/null
+++ b/src/new_sentry_plugins/victorops/client.py
@@ -0,0 +1,50 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.client import ApiClient
+
+
+class VictorOpsClient(ApiClient):
+    monitoring_tool = "sentry"
+    routing_key = "everyone"
+    plugin_name = "victorops"
+    allow_redirects = False
+
+    def __init__(self, api_key, routing_key=None):
+        self.api_key = api_key
+
+        if routing_key:
+            self.routing_key = routing_key
+        super(VictorOpsClient, self).__init__()
+
+    def build_url(self, path):
+        # http://victorops.force.com/knowledgebase/articles/Integration/Alert-Ingestion-API-Documentation/
+        return "https://alert.victorops.com/integrations/generic/20131114/alert/{}/{}".format(
+            self.api_key, self.routing_key
+        )
+
+    def request(self, data):
+        return self._request(path="", method="post", data=data)
+
+    def trigger_incident(
+        self,
+        message_type,
+        entity_id,
+        timestamp,
+        state_message,
+        entity_display_name=None,
+        monitoring_tool=None,
+        issue_url=None,
+        **kwargs
+    ):
+        kwargs.update(
+            {
+                "message_type": message_type,
+                "entity_id": entity_id,
+                "entity_display_name": entity_display_name,
+                "timestamp": timestamp,
+                "state_message": state_message,
+                "monitoring_tool": monitoring_tool or self.monitoring_tool,
+                "issue_url": issue_url,
+            }
+        )
+        return self.request(kwargs)
diff --git a/src/new_sentry_plugins/victorops/plugin.py b/src/new_sentry_plugins/victorops/plugin.py
new file mode 100644
index 0000000000..6dc5050884
--- /dev/null
+++ b/src/new_sentry_plugins/victorops/plugin.py
@@ -0,0 +1,97 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.exceptions import PluginError
+from sentry.plugins.bases.notify import NotifyPlugin
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.exceptions import ApiError
+from new_sentry_plugins.utils import get_secret_field_config
+
+from .client import VictorOpsClient
+
+ENHANCED_PRIVACY_BODY = """
+Details about this issue are not shown in this notification since enhanced
+privacy controls are enabled. For more details about this issue, view this
+issue on Sentry.
+""".strip()
+
+
+class VictorOpsPlugin(CorePluginMixin, NotifyPlugin):
+    description = "Send alerts to VictorOps."
+    slug = "victorops"
+    title = "VictorOps"
+    conf_key = slug
+    conf_title = title
+
+    def is_configured(self, project, **kwargs):
+        return bool(self.get_option("api_key", project))
+
+    def get_config(self, **kwargs):
+        return [
+            get_secret_field_config(
+                name="api_key",
+                label="API Key",
+                secret=self.get_option("api_key", kwargs["project"]),
+                help_text="VictorOps's Sentry API Key",
+                include_prefix=True,
+            ),
+            {
+                "name": "routing_key",
+                "label": "Routing Key",
+                "type": "string",
+                "default": "everyone",
+                "required": False,
+            },
+        ]
+
+    def get_client(self, project):
+        return VictorOpsClient(
+            api_key=self.get_option("api_key", project),
+            routing_key=self.get_option("routing_key", project),
+        )
+
+    def build_description(self, event):
+        enhanced_privacy = event.organization.flags.enhanced_privacy
+        if enhanced_privacy:
+            return ENHANCED_PRIVACY_BODY
+
+        interface_list = []
+        for interface in six.itervalues(event.interfaces):
+            body = interface.to_string(event)
+            if not body:
+                continue
+            interface_list.append((interface.get_title(), body))
+
+        return u"\n\n".join((u"{}\n-----------\n\n{}".format(k, v) for k, v in interface_list))
+
+    def notify_users(self, group, event, fail_silently=False, **kwargs):
+        if not self.is_configured(group.project):
+            return
+
+        level = event.get_tag("level")
+        if level in ("info", "debug"):
+            message_type = "INFO"
+        if level == "warning":
+            message_type = "WARNING"
+        else:
+            message_type = "CRITICAL"
+
+        client = self.get_client(group.project)
+        try:
+            response = client.trigger_incident(
+                message_type=message_type,
+                entity_id=group.id,
+                entity_display_name=event.title,
+                state_message=self.build_description(event),
+                timestamp=int(event.datetime.strftime("%s")),
+                issue_url=group.get_absolute_url(),
+                issue_id=group.id,
+                project_id=group.project.id
+            )
+        except ApiError as e:
+            message = "Could not communicate with victorops. Got %s" % e
+            raise PluginError(message)
+
+        assert response["result"] == "success"
diff --git a/src/new_sentry_plugins/vsts/.gitignore b/src/new_sentry_plugins/vsts/.gitignore
new file mode 100644
index 0000000000..52998c1085
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/.gitignore
@@ -0,0 +1,33 @@
+*.py[cod]
+
+# C extensions
+*.so
+
+# Packages
+*.egg
+*.egg-info
+dist
+build
+eggs
+parts
+bin
+var
+sdist
+develop-eggs
+.installed.cfg
+lib
+lib64
+
+# Installer logs
+pip-log.txt
+
+# Unit test / coverage reports
+.coverage
+.tox
+nosetests.xml
+
+#Translations
+*.mo
+
+#Mr Developer
+.mr.developer.cfg
diff --git a/src/new_sentry_plugins/vsts/LICENSE b/src/new_sentry_plugins/vsts/LICENSE
new file mode 100644
index 0000000000..4cdfc253dc
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/LICENSE
@@ -0,0 +1,22 @@
+MIT License
+
+Copyright (c) 2017 Functional Software, Inc.
+Copyright (c) 2017 Casey Boyle
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/src/new_sentry_plugins/vsts/README.rst b/src/new_sentry_plugins/vsts/README.rst
new file mode 100644
index 0000000000..fc2531c5d2
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/README.rst
@@ -0,0 +1,26 @@
+**Note**: This plugin has been deprecated in favor of the `Azure DevOps Global Integration<https://docs.sentry.io/workflow/integrations/global-integrations/#azure-devops>`_.
+
+You'll have to `create an application in Visual Studio <https://app.vsaex.visualstudio.com/app/register>`_ to get a client ID and secret.
+
+**Redirect URL:**
+
+::
+
+    <URL_TO_SENTRY>/account/settings/social/associate/complete/visualstudio/
+
+
+**Scopes:**
+
+- Code (read) -- ``vso.code``
+- Work items (read and write) -- ``vso.work_write``
+- Project and Team (read) -- ``vso.project``
+- Releases (read) -- ``vso.release``
+
+Add the configured application credentials to your Sentry config:
+
+.. code-block:: python
+
+    VISUALSTUDIO_APP_ID = 'App ID'
+    VISUALSTUDIO_APP_SECRET = 'App Secret'
+    VISUALSTUDIO_CLIENT_SECRET = 'Client Secret'
+    VISUALSTUDIO_SCOPES = ['vso.project', 'vso.work_write', 'vso.code', 'vso.release']
diff --git a/src/new_sentry_plugins/vsts/__init__.py b/src/new_sentry_plugins/vsts/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/new_sentry_plugins/vsts/client.py b/src/new_sentry_plugins/vsts/client.py
new file mode 100644
index 0000000000..1352ff953a
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/client.py
@@ -0,0 +1,130 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.client import AuthApiClient
+
+UNSET = object()
+
+FIELD_MAP = {
+    "title": "/fields/System.Title",
+    "description": "/fields/System.Description",
+    "comment": "/fields/System.History",
+    "link": "/relations/-",
+}
+
+
+class VstsClient(AuthApiClient):
+    api_version = "4.1"
+    plugin_name = "vsts"
+
+    def request(self, method, path, data=None, params=None):
+        headers = {
+            "Accept": "application/json; api-version={}".format(self.api_version),
+            "Content-Type": "application/json-patch+json"
+            if method == "PATCH"
+            else "application/json",
+            "X-HTTP-Method-Override": method,
+            "X-TFS-FedAuthRedirect": "Suppress",
+        }
+        return self._request(method, path, headers=headers, data=data, params=params)
+
+    def create_work_item(
+        self, instance, project, title=None, description=None, comment=None, link=None
+    ):
+        data = []
+        if title:
+            data.append({"op": "add", "path": FIELD_MAP["title"], "value": title})
+        if description:
+            data.append({"op": "add", "path": FIELD_MAP["description"], "value": description})
+        if comment:
+            data.append({"op": "add", "path": FIELD_MAP["comment"], "value": comment})
+        # XXX: Link is not yet used, as we can't explicitly bind it to Sentry.
+        # if link:
+        #     data.append({
+        #         'op': 'add',
+        #         'path': FIELD_MAP['link'],
+        #         'value': {
+        #             'rel': 'Hyperlink',
+        #             'url': link,
+        #         }
+        #     })
+
+        return self.patch(
+            "https://{}/{}/_apis/wit/workitems/$Bug".format(instance, project), data=data
+        )
+
+    def update_work_item(
+        self, instance, id, title=UNSET, description=UNSET, link=UNSET, comment=UNSET
+    ):
+        data = []
+
+        for f_name, f_value in (("title", title), ("description", description), ("link", link)):
+            if f_name == "link":
+                # XXX: Link is not yet used, as we can't explicitly bind it to Sentry.
+                continue
+            elif f_value is None:
+                data.append({"op": "remove", "path": FIELD_MAP[f_name]})
+            elif f_value is not UNSET:
+                data.append(
+                    {
+                        # TODO(dcramer): this is problematic when the link already exists
+                        "op": "replace" if f_name != "link" else "add",
+                        "path": FIELD_MAP[f_name],
+                        "value": {"rel": "Hyperlink", "url": f_value}
+                        if f_name == "link"
+                        else f_value,
+                    }
+                )
+
+        if comment is not UNSET and comment:
+            data.append({"op": "add", "path": FIELD_MAP["comment"], "value": comment})
+
+        return self.patch(
+            "https://{}/DefaultCollection/_apis/wit/workitems/{}".format(instance, id), data=data
+        )
+
+    def get_work_item(self, instance, id):
+        return self.get("https://{}/DefaultCollection/_apis/wit/workitems/{}".format(instance, id))
+
+    def get_repo(self, instance, name_or_id, project=None):
+        return self.get(
+            "https://{}/DefaultCollection/{}_apis/git/repositories/{}".format(
+                instance, "{}/".format(project) if project else "", name_or_id
+            )
+        )
+
+    def get_commits(self, instance, repo_id, commit, limit=100):
+        return self.get(
+            "https://{}/DefaultCollection/_apis/git/repositories/{}/commits".format(
+                instance, repo_id
+            ),
+            params={"commit": commit, "$top": limit},
+        )
+
+    def get_commit_filechanges(self, instance, repo_id, commit):
+
+        resp = self.get(
+            "https://{}/DefaultCollection/_apis/git/repositories/{}/commits/{}/changes".format(
+                instance, repo_id, commit
+            )
+        )
+        changes = resp["changes"]
+        return changes
+
+    def get_commit_range(self, instance, repo_id, start_sha, end_sha):
+        return self.post(
+            "https://{}/DefaultCollection/_apis/git/repositories/{}/commitsBatch".format(
+                instance, repo_id
+            ),
+            data={
+                "itemVersion": {"versionType": "commit", "version": start_sha},
+                "compareVersion": {"versionType": "commit", "version": end_sha},
+            },
+        )
+
+    def get_projects(self, instance):
+        # TODO(dcramer): VSTS doesn't provide a way to search, so we're
+        # making the assumption that a user has 100 or less projects today.
+        return self.get(
+            "https://{}/DefaultCollection/_apis/projects".format(instance),
+            params={"stateFilter": "WellFormed"},
+        )
diff --git a/src/new_sentry_plugins/vsts/mixins.py b/src/new_sentry_plugins/vsts/mixins.py
new file mode 100644
index 0000000000..5d1b802c07
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/mixins.py
@@ -0,0 +1,28 @@
+from __future__ import absolute_import
+
+import logging
+
+from sentry.exceptions import PluginError
+
+from new_sentry_plugins.base import CorePluginMixin
+from new_sentry_plugins.constants import ERR_UNAUTHORIZED
+
+from .client import VstsClient
+
+
+class VisualStudioMixin(CorePluginMixin):
+    logger = logging.getLogger("sentry.plugins.visualstudio")
+    title = "Visual Studio Team Services"
+    short_title = "VSTS"
+
+    def get_client(self, user):
+        auth = self.get_auth(user=user)
+        if auth is None:
+            raise PluginError(ERR_UNAUTHORIZED)
+        return VstsClient(auth)
+
+    def get_title(self):
+        return self.title
+
+    def get_short_title(self):
+        return self.short_title
diff --git a/src/new_sentry_plugins/vsts/plugin.py b/src/new_sentry_plugins/vsts/plugin.py
new file mode 100644
index 0000000000..eb8c41ed3e
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/plugin.py
@@ -0,0 +1,150 @@
+""" A plugin to incorporate work-item creation in VSTS
+easily out of issues detected from Sentry.io """
+
+from __future__ import absolute_import
+
+from mistune import markdown
+from sentry.plugins.bases.issue2 import IssueTrackingPlugin2
+from sentry.utils.http import absolute_uri
+
+from .mixins import VisualStudioMixin
+from .repository_provider import VisualStudioRepositoryProvider
+
+
+class VstsPlugin(VisualStudioMixin, IssueTrackingPlugin2):
+    description = "Integrate Visual Studio Team Services work items by linking a project."
+    slug = "vsts"
+    conf_key = slug
+    auth_provider = "visualstudio"
+
+    issue_fields = frozenset(["id", "title", "url"])
+
+    def get_configure_plugin_fields(self, request, project, **kwargs):
+        # TODO(dcramer): Both Account and Project can query the API an access
+        # token, and could likely be moved to the 'Create Issue' form
+        return [
+            {
+                "name": "instance",
+                "label": "Instance",
+                "type": "text",
+                "placeholder": "example.visualstudio.com",
+                "required": True,
+                "help": "VS Team Services account ({account}.visualstudio.com) or TFS server ({server:port}).",
+            },
+            {
+                "name": "default_project",
+                "label": "Default Project Name",
+                "type": "text",
+                "placeholder": "MyProject",
+                "required": False,
+                "help": (
+                    "Enter the Visual Studio Team Services project name that you wish "
+                    "to use as a default for new work items"
+                ),
+            },
+        ]
+
+    def is_configured(self, request, project, **kwargs):
+        for o in ("instance",):
+            if not bool(self.get_option(o, project)):
+                return False
+        return True
+
+    def get_issue_label(self, group, issue, **kwargs):
+        return "Bug {}".format(issue["id"])
+
+    def get_issue_url(self, group, issue, **kwargs):
+        return issue["url"]
+
+    def get_new_issue_fields(self, request, group, event, **kwargs):
+        fields = super(VstsPlugin, self).get_new_issue_fields(request, group, event, **kwargs)
+        client = self.get_client(request.user)
+        instance = self.get_option("instance", group.project)
+
+        try:
+            projects = client.get_projects(instance)
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        return [
+            {
+                "name": "project",
+                "label": "Project",
+                "default": self.get_option("default_project", group.project),
+                "type": "text",
+                "choices": [i["name"] for i in projects["value"]],
+                "required": True,
+            }
+        ] + fields
+
+    def get_link_existing_issue_fields(self, request, group, event, **kwargs):
+        return [
+            {"name": "item_id", "label": "Work Item ID", "default": "", "type": "text"},
+            {
+                "name": "comment",
+                "label": "Comment",
+                "default": "I've identified this issue in Sentry: {}".format(
+                    absolute_uri(group.get_absolute_url(params={"referrer": "vsts_plugin"}))
+                ),
+                "type": "textarea",
+                "help": ("Markdown is supported. Leave blank if you don't want to add a comment."),
+                "required": False,
+            },
+        ]
+
+    def create_issue(self, request, group, form_data, **kwargs):
+        """
+        Creates the issue on the remote service and returns an issue ID.
+        """
+        instance = self.get_option("instance", group.project)
+        project = form_data.get("project") or self.get_option("default_project", group.project)
+
+        client = self.get_client(request.user)
+
+        title = form_data["title"]
+        description = form_data["description"]
+        link = absolute_uri(group.get_absolute_url(params={"referrer": "vsts_plugin"}))
+        try:
+            created_item = client.create_work_item(
+                instance=instance,
+                project=project,
+                title=title,
+                comment=markdown(description),
+                link=link,
+            )
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        return {
+            "id": created_item["id"],
+            "url": created_item["_links"]["html"]["href"],
+            "title": title,
+        }
+
+    def link_issue(self, request, group, form_data, **kwargs):
+        client = self.get_client(request.user)
+        instance = self.get_option("instance", group.project)
+        if form_data.get("comment"):
+            try:
+                work_item = client.update_work_item(
+                    instance=instance,
+                    id=form_data["item_id"],
+                    link=absolute_uri(group.get_absolute_url(params={"referrer": "vsts_plugin"})),
+                    comment=markdown(form_data["comment"]) if form_data.get("comment") else None,
+                )
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+        else:
+            try:
+                work_item = client.get_work_item(instance=instance, id=form_data["item_id"])
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+
+        return {
+            "id": work_item["id"],
+            "url": work_item["_links"]["html"]["href"],
+            "title": work_item["fields"]["System.Title"],
+        }
+
+    def setup(self, bindings):
+        bindings.add("repository.provider", VisualStudioRepositoryProvider, id="visualstudio")
diff --git a/src/new_sentry_plugins/vsts/repository_provider.py b/src/new_sentry_plugins/vsts/repository_provider.py
new file mode 100644
index 0000000000..900d2f0ee9
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/repository_provider.py
@@ -0,0 +1,139 @@
+from __future__ import absolute_import
+
+import six
+
+from sentry.plugins import providers
+from six.moves.urllib.parse import urlparse
+
+from .mixins import VisualStudioMixin
+
+MAX_COMMIT_DATA_REQUESTS = 90
+
+
+class VisualStudioRepositoryProvider(VisualStudioMixin, providers.RepositoryProvider):
+    name = "Visual Studio Team Services"
+    auth_provider = "visualstudio"
+
+    def get_config(self):
+        return [
+            {
+                "name": "url",
+                "label": "Repository URL",
+                "type": "text",
+                "placeholder": "e.g. https://example.visualstudio.com/_git/MyFirstProject",
+                "required": True,
+            },
+            {
+                "name": "project",
+                "label": "Project Name",
+                "type": "text",
+                "placeholder": "e.g. MyFirstProject",
+                "help": "Optional project name if it does not match the repository name",
+                "required": False,
+            },
+        ]
+
+    def validate_config(self, organization, config, actor=None):
+        if config.get("url"):
+            client = self.get_client(actor)
+            # parse out the repo name and the instance
+            parts = urlparse(config["url"])
+            instance = parts.netloc
+            name = parts.path.rsplit("_git/", 1)[-1]
+            project = config.get("project") or name
+
+            try:
+                repo = client.get_repo(instance, name, project)
+            except Exception as e:
+                self.raise_error(e, identity=client.auth)
+            config.update(
+                {
+                    "instance": instance,
+                    "project": project,
+                    "name": repo["name"],
+                    "external_id": six.text_type(repo["id"]),
+                    "url": repo["_links"]["web"]["href"],
+                }
+            )
+        return config
+
+    def create_repository(self, organization, data, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot create a repository anonymously")
+
+        return {
+            "name": data["name"],
+            "external_id": data["external_id"],
+            "url": data["url"],
+            "config": {
+                "instance": data["instance"],
+                "project": data["project"],
+                "name": data["name"],
+            },
+        }
+
+    def delete_repository(self, repo, actor=None):
+        pass
+
+    def transform_changes(self, patch_set):
+        type_mapping = {"add": "A", "delete": "D", "edit": "M"}
+        file_changes = []
+        # https://docs.microsoft.com/en-us/rest/api/vsts/git/commits/get%20changes#versioncontrolchangetype
+        for change in patch_set:
+            change_type = type_mapping.get(change["changeType"])
+
+            if change_type and change.get("item") and change["item"]["gitObjectType"] == "blob":
+                file_changes.append({"path": change["item"]["path"], "type": change_type})
+
+        return file_changes
+
+    def zip_commit_data(self, repo, commit_list, actor):
+        client = self.get_client(actor)
+        n = 0
+        for commit in commit_list:
+            commit.update(
+                {
+                    "patch_set": self.transform_changes(
+                        client.get_commit_filechanges(
+                            repo.config["instance"], repo.external_id, commit["commitId"]
+                        )
+                    )
+                }
+            )
+
+            n += 1
+            if n > MAX_COMMIT_DATA_REQUESTS:
+                break
+
+        return commit_list
+
+    def compare_commits(self, repo, start_sha, end_sha, actor=None):
+        if actor is None:
+            raise NotImplementedError("Cannot fetch commits anonymously")
+
+        client = self.get_client(actor)
+        instance = repo.config["instance"]
+
+        try:
+            if start_sha is None:
+                res = client.get_commits(instance, repo.external_id, commit=end_sha, limit=10)
+            else:
+                res = client.get_commit_range(instance, repo.external_id, start_sha, end_sha)
+        except Exception as e:
+            self.raise_error(e, identity=client.auth)
+
+        commits = self.zip_commit_data(repo, res["value"], actor)
+        return self._format_commits(repo, commits)
+
+    def _format_commits(self, repo, commit_list):
+        return [
+            {
+                "id": c["commitId"],
+                "repository": repo.name,
+                "author_email": c["author"]["email"],
+                "author_name": c["author"]["name"],
+                "message": c["comment"],
+                "patch_set": c.get("patch_set"),
+            }
+            for c in commit_list
+        ]
diff --git a/src/new_sentry_plugins/vsts/testutils.py b/src/new_sentry_plugins/vsts/testutils.py
new file mode 100644
index 0000000000..907faf4b6f
--- /dev/null
+++ b/src/new_sentry_plugins/vsts/testutils.py
@@ -0,0 +1,52 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+COMPARE_COMMITS_EXAMPLE = b"""
+{
+  "count": 1,
+  "value": [
+    {
+      "commitId": "6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+      "author": {
+        "name": "max bittker",
+        "email": "max@sentry.io",
+        "date": "2018-04-24T00:03:18Z"
+      },
+      "committer": {
+        "name": "max bittker",
+        "email": "max@sentry.io",
+        "date": "2018-04-24T00:03:18Z"
+      },
+      "comment": "Updated README.md",
+      "changeCounts": {"Add": 0, "Edit": 1, "Delete": 0},
+      "url":
+        "https://mbittker.visualstudio.com/_apis/git/repositories/b1e25999-c080-4ea1-8c61-597c4ec41f06/commits/6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+      "remoteUrl":
+        "https://mbittker.visualstudio.com/_git/MyFirstProject/commit/6c36052c58bde5e57040ebe6bdb9f6a52c906fff"
+    }
+  ]
+}
+
+"""
+
+
+FILE_CHANGES_EXAMPLE = b"""
+{
+  "changeCounts": {"Edit": 1},
+  "changes": [
+    {
+      "item": {
+        "objectId": "b48e843656a0a12926a0bcedefe8ef3710fe2867",
+        "originalObjectId": "270b590a4edf3f19aa7acc7b57379729e34fc681",
+        "gitObjectType": "blob",
+        "commitId": "6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+        "path": "/README.md",
+        "url":
+          "https://mbittker.visualstudio.com/DefaultCollection/_apis/git/repositories/b1e25999-c080-4ea1-8c61-597c4ec41f06/items/README.md?versionType=Commit&version=6c36052c58bde5e57040ebe6bdb9f6a52c906fff"
+      },
+      "changeType": "edit"
+    }
+  ]
+}
+
+"""
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 52c2bf5e50..974b5d90e6 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -11,7 +11,7 @@ from sentry.utils.sdk import configure_sdk
 from sentry.utils.warnings import DeprecatedSettingWarning
 
 
-def register_plugins(settings):
+def register_plugins(settings, test_plugins=False):
     from pkg_resources import iter_entry_points
     from sentry.plugins.base import plugins
 
@@ -20,8 +20,9 @@ def register_plugins(settings):
     #         'phabricator = sentry_phabricator.plugins:PhabricatorPlugin'
     #     ],
     # },
-
-    for ep in iter_entry_points("sentry.plugins"):
+    # TODO (Steve): Remove option for test_plugins
+    entry_point = "sentry.new_plugins" if test_plugins else "sentry.plugins"
+    for ep in iter_entry_points(entry_point):
         try:
             plugin = ep.load()
         except Exception:
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index c4bb7fafd9..9ff3a8d685 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -663,7 +663,7 @@ class PluginTestCase(TestCase):
             self.addCleanup(plugins.unregister, self.plugin)
 
     def assertAppInstalled(self, name, path):
-        for ep in iter_entry_points("sentry.apps"):
+        for ep in iter_entry_points("sentry.new_apps"):
             if ep.name == name:
                 ep_path = ep.module_name
                 if ep_path == path:
@@ -676,7 +676,8 @@ class PluginTestCase(TestCase):
 
     def assertPluginInstalled(self, name, plugin):
         path = type(plugin).__module__ + ":" + type(plugin).__name__
-        for ep in iter_entry_points("sentry.plugins"):
+        # TODO (Steve): change new_plugins to plugins
+        for ep in iter_entry_points("sentry.new_plugins"):
             if ep.name == name:
                 ep_path = ep.module_name + ":" + ".".join(ep.attrs)
                 if ep_path == path:
diff --git a/tests/sentry_plugins/__init__.py b/tests/sentry_plugins/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/acceptance/__init__.py b/tests/sentry_plugins/acceptance/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/acceptance/test_amazon_sqs.py b/tests/sentry_plugins/acceptance/test_amazon_sqs.py
new file mode 100644
index 0000000000..af5f269245
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_amazon_sqs.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class AmazonSQSTest(AcceptanceTestCase):
+    def setUp(self):
+        super(AmazonSQSTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/amazon-sqs/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("amazon sqs settings")
+        assert self.browser.element_exists(".ref-plugin-config-amazon-sqs")
diff --git a/tests/sentry_plugins/acceptance/test_asana.py b/tests/sentry_plugins/acceptance/test_asana.py
new file mode 100644
index 0000000000..ddbb4fd9e2
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_asana.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class AsanaTest(AcceptanceTestCase):
+    def setUp(self):
+        super(AsanaTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/asana/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("asana settings")
+        assert self.browser.element_exists(".ref-plugin-config-asana")
diff --git a/tests/sentry_plugins/acceptance/test_bitbucket.py b/tests/sentry_plugins/acceptance/test_bitbucket.py
new file mode 100644
index 0000000000..e16394c1cc
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_bitbucket.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class BitbucketTest(AcceptanceTestCase):
+    def setUp(self):
+        super(BitbucketTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/bitbucket/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("bitbucket settings")
+        assert self.browser.element_exists(".ref-plugin-config-bitbucket")
diff --git a/tests/sentry_plugins/acceptance/test_clubhouse.py b/tests/sentry_plugins/acceptance/test_clubhouse.py
new file mode 100644
index 0000000000..4ba74a0b7b
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_clubhouse.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class ClubhouseTest(AcceptanceTestCase):
+    def setUp(self):
+        super(ClubhouseTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/clubhouse/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("clubhouse settings")
+        assert self.browser.element_exists(".ref-plugin-config-clubhouse")
diff --git a/tests/sentry_plugins/acceptance/test_github.py b/tests/sentry_plugins/acceptance/test_github.py
new file mode 100644
index 0000000000..9ddddd3dc4
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_github.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class GitHubTest(AcceptanceTestCase):
+    def setUp(self):
+        super(GitHubTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/github/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("github settings")
+        assert self.browser.element_exists(".ref-plugin-config-github")
diff --git a/tests/sentry_plugins/acceptance/test_gitlab.py b/tests/sentry_plugins/acceptance/test_gitlab.py
new file mode 100644
index 0000000000..bc2b13db24
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_gitlab.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class GitLabTest(AcceptanceTestCase):
+    def setUp(self):
+        super(GitLabTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/gitlab/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("gitlab settings")
+        assert self.browser.element_exists(".ref-plugin-config-gitlab")
diff --git a/tests/sentry_plugins/acceptance/test_jira.py b/tests/sentry_plugins/acceptance/test_jira.py
new file mode 100644
index 0000000000..d69e36d8e6
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_jira.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class JIRATest(AcceptanceTestCase):
+    def setUp(self):
+        super(JIRATest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/jira/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("jira settings")
+        assert self.browser.element_exists(".ref-plugin-config-jira")
diff --git a/tests/sentry_plugins/acceptance/test_pagerduty.py b/tests/sentry_plugins/acceptance/test_pagerduty.py
new file mode 100644
index 0000000000..04fb73f6b2
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_pagerduty.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class PagerDutyTest(AcceptanceTestCase):
+    def setUp(self):
+        super(PagerDutyTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/pagerduty/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("pagerduty settings")
+        assert self.browser.element_exists(".ref-plugin-config-pagerduty")
diff --git a/tests/sentry_plugins/acceptance/test_phabricator.py b/tests/sentry_plugins/acceptance/test_phabricator.py
new file mode 100644
index 0000000000..2898588e13
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_phabricator.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class PhabricatorTest(AcceptanceTestCase):
+    def setUp(self):
+        super(PhabricatorTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/phabricator/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("phabricator settings")
+        assert self.browser.element_exists(".ref-plugin-config-phabricator")
diff --git a/tests/sentry_plugins/acceptance/test_pivotal.py b/tests/sentry_plugins/acceptance/test_pivotal.py
new file mode 100644
index 0000000000..98f048bf57
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_pivotal.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class PivotalTest(AcceptanceTestCase):
+    def setUp(self):
+        super(PivotalTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/pivotal/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("pivotal settings")
+        assert self.browser.element_exists(".ref-plugin-config-pivotal")
diff --git a/tests/sentry_plugins/acceptance/test_pushover.py b/tests/sentry_plugins/acceptance/test_pushover.py
new file mode 100644
index 0000000000..1b17750029
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_pushover.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class PushoverTest(AcceptanceTestCase):
+    def setUp(self):
+        super(PushoverTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/pushover/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("pushover settings")
+        assert self.browser.element_exists(".ref-plugin-config-pushover")
diff --git a/tests/sentry_plugins/acceptance/test_segment.py b/tests/sentry_plugins/acceptance/test_segment.py
new file mode 100644
index 0000000000..3ae83ff3c7
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_segment.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class SegmentTest(AcceptanceTestCase):
+    def setUp(self):
+        super(SegmentTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/segment/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("segment settings")
+        assert self.browser.element_exists(".ref-plugin-config-segment")
diff --git a/tests/sentry_plugins/acceptance/test_sessionstack.py b/tests/sentry_plugins/acceptance/test_sessionstack.py
new file mode 100644
index 0000000000..992ba5ea3b
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_sessionstack.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class SessionStackTest(AcceptanceTestCase):
+    def setUp(self):
+        super(SessionStackTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/sessionstack/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("sessionstack settings")
+        assert self.browser.element_exists(".ref-plugin-config-sessionstack")
diff --git a/tests/sentry_plugins/acceptance/test_slack.py b/tests/sentry_plugins/acceptance/test_slack.py
new file mode 100644
index 0000000000..6aac6d62c2
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_slack.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class SlackTest(AcceptanceTestCase):
+    def setUp(self):
+        super(SlackTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/slack/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("slack settings")
+        assert self.browser.element_exists(".ref-plugin-config-slack")
diff --git a/tests/sentry_plugins/acceptance/test_splunk.py b/tests/sentry_plugins/acceptance/test_splunk.py
new file mode 100644
index 0000000000..84cf84d4f3
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_splunk.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class SplunkTest(AcceptanceTestCase):
+    def setUp(self):
+        super(SplunkTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/splunk/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("splunk settings")
+        assert self.browser.element_exists(".ref-plugin-config-splunk")
diff --git a/tests/sentry_plugins/acceptance/test_victorops.py b/tests/sentry_plugins/acceptance/test_victorops.py
new file mode 100644
index 0000000000..ebd7194027
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_victorops.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class VictorOpsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(VictorOpsTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/victorops/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("victorops settings")
+        assert self.browser.element_exists(".ref-plugin-config-victorops")
diff --git a/tests/sentry_plugins/acceptance/test_vsts.py b/tests/sentry_plugins/acceptance/test_vsts.py
new file mode 100644
index 0000000000..cc084684f2
--- /dev/null
+++ b/tests/sentry_plugins/acceptance/test_vsts.py
@@ -0,0 +1,21 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class VstsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(VstsTest, self).setUp()
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(name="Rowdy Tiger", owner=None)
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.create_member(user=self.user, organization=self.org, role="owner", teams=[self.team])
+        self.login_as(self.user)
+        self.path = "/{}/{}/settings/plugins/vsts/".format(self.org.slug, self.project.slug)
+
+    def test_simple(self):
+        self.browser.get(self.path)
+        self.browser.wait_until_not(".loading-indicator")
+        self.browser.snapshot("vsts settings")
+        assert self.browser.element_exists(".ref-plugin-config-vsts")
diff --git a/tests/sentry_plugins/amazon_sqs/__init__.py b/tests/sentry_plugins/amazon_sqs/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/amazon_sqs/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/amazon_sqs/test_plugin.py b/tests/sentry_plugins/amazon_sqs/test_plugin.py
new file mode 100644
index 0000000000..c4ac78a415
--- /dev/null
+++ b/tests/sentry_plugins/amazon_sqs/test_plugin.py
@@ -0,0 +1,117 @@
+from __future__ import absolute_import
+
+from botocore.client import ClientError
+from exam import fixture
+from mock import patch
+
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.amazon_sqs.plugin import AmazonSQSPlugin
+
+
+class AmazonSQSPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return AmazonSQSPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "amazon-sqs"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("amazon_sqs", self.plugin)
+
+    def run_test(self):
+        self.plugin.set_option("access_key", "access-key", self.project)
+        self.plugin.set_option("secret_key", "secret-key", self.project)
+        self.plugin.set_option("region", "us-east-1", self.project)
+        self.plugin.set_option(
+            "queue_url", "https://sqs-us-east-1.amazonaws.com/12345678/myqueue", self.project
+        )
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(
+            group=group,
+            data={
+                "sentry.interfaces.Exception": {"type": "ValueError", "value": "foo bar"},
+                "sentry.interfaces.User": {"id": "1", "email": "foo@example.com"},
+                "type": "error",
+                "metadata": {"type": "ValueError", "value": "foo bar"},
+            },
+            tags={"level": "warning"},
+        )
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.post_process(event)
+        return event
+
+    @patch("boto3.client")
+    def test_simple_notification(self, mock_client):
+        event = self.run_test()
+        mock_client.assert_called_once_with(
+            service_name="sqs",
+            region_name="us-east-1",
+            aws_access_key_id="access-key",
+            aws_secret_access_key="secret-key",
+        )
+        mock_client.return_value.send_message.assert_called_once_with(
+            QueueUrl="https://sqs-us-east-1.amazonaws.com/12345678/myqueue",
+            MessageBody=json.dumps(self.plugin.get_event_payload(event)),
+        )
+
+    @patch("new_sentry_plugins.amazon_sqs.plugin.logger")
+    @patch("boto3.client")
+    def test_token_error(self, mock_client, logger):
+        mock_client.return_value.send_message.side_effect = ClientError(
+            {"Error": {"Code": "Hello", "Message": "hello"}}, "SendMessage"
+        )
+        with self.assertRaises(ClientError):
+            self.run_test()
+        assert not logger.info.called
+
+        mock_client.return_value.send_message.side_effect = ClientError(
+            {"Error": {"Code": "AccessDenied", "Message": "Hello"}}, "SendMessage"
+        )
+        self.run_test()
+        assert len(logger.info.call_args_list) == 1
+        assert (
+            logger.info.call_args_list[0][0][0] == "new_sentry_plugins.amazon_sqs.access_token_invalid"
+        )
+
+    @patch("new_sentry_plugins.amazon_sqs.plugin.logger")
+    @patch("boto3.client")
+    def test_message_group_error(self, mock_client, logger):
+        mock_client.return_value.send_message.side_effect = ClientError(
+            {
+                "Error": {
+                    "Code": "MissingParameter",
+                    "Message": "The request must contain the parameter MessageGroupId.",
+                }
+            },
+            "SendMessage",
+        )
+
+        self.run_test()
+
+        assert len(logger.info.call_args_list) == 1
+        assert (
+            logger.info.call_args_list[0][0][0]
+            == "new_sentry_plugins.amazon_sqs.missing_message_group_id"
+        )
+
+    @patch("uuid.uuid4")
+    @patch("boto3.client")
+    def test_pass_message_group_id(self, mock_client, mock_uuid):
+        class uuid(object):
+            hex = "some-uuid"
+
+        mock_uuid.return_value = uuid
+        self.plugin.set_option("message_group_id", "my_group", self.project)
+        event = self.run_test()
+
+        mock_client.return_value.send_message.assert_called_once_with(
+            QueueUrl="https://sqs-us-east-1.amazonaws.com/12345678/myqueue",
+            MessageBody=json.dumps(self.plugin.get_event_payload(event)),
+            MessageGroupId="my_group",
+            MessageDeduplicationId="some-uuid",
+        )
diff --git a/tests/sentry_plugins/asana/__init__.py b/tests/sentry_plugins/asana/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/asana/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/asana/test_plugin.py b/tests/sentry_plugins/asana/test_plugin.py
new file mode 100644
index 0000000000..bfe1723a5f
--- /dev/null
+++ b/tests/sentry_plugins/asana/test_plugin.py
@@ -0,0 +1,104 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.test import RequestFactory
+from sentry.plugins.bases.issue2 import PluginError
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+from social_auth.models import UserSocialAuth
+
+from new_sentry_plugins.asana.plugin import AsanaPlugin
+
+
+class AsanaPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return AsanaPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "asana"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("asana", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "Asana Issue"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("repo", "getsentry/sentry", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_url(group, 1) == "https://app.asana.com/0/0/1"
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("workspace", 12345678, self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.POST,
+            "https://app.asana.com/api/1.0/tasks",
+            json={"data": {"name": "Hello world!", "notes": "Fix this.", "gid": 1}},
+        )
+
+        self.plugin.set_option("workspace", "12345678", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"title": "Hello", "description": "Fix this."}
+        with self.assertRaises(PluginError):
+            self.plugin.create_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user, provider=self.plugin.auth_provider, extra_data={"access_token": "foo"}
+        )
+
+        assert self.plugin.create_issue(request, group, form_data) == 1
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert payload == {"data": {"notes": "Fix this.", "name": "Hello", "workspace": "12345678"}}
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://app.asana.com/api/1.0/tasks/1",
+            json={"data": {"gid": 1, "name": "Hello", "notes": "Fix this."}},
+        )
+        responses.add(
+            responses.POST,
+            "https://app.asana.com/api/1.0/tasks/1/stories/",
+            json={"data": {"text": "hello"}},
+        )
+
+        self.plugin.set_option("workspace", 12345678, self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"comment": "please fix this", "issue_id": "1"}
+        with self.assertRaises(PluginError):
+            self.plugin.link_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user, provider=self.plugin.auth_provider, extra_data={"access_token": "foo"}
+        )
+
+        assert self.plugin.link_issue(request, group, form_data) == {"title": "Hello"}
+        request = responses.calls[-1].request
+        payload = json.loads(request.body)
+        assert payload == {"data": {"text": "please fix this"}}
diff --git a/tests/sentry_plugins/bitbucket/__init__.py b/tests/sentry_plugins/bitbucket/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/bitbucket/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/bitbucket/endpoints/__init__.py b/tests/sentry_plugins/bitbucket/endpoints/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/bitbucket/endpoints/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py b/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py
new file mode 100644
index 0000000000..c92d6d73fa
--- /dev/null
+++ b/tests/sentry_plugins/bitbucket/endpoints/test_webhooks.py
@@ -0,0 +1,162 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+from datetime import datetime
+from django.utils import timezone
+from sentry.models import Commit, CommitAuthor, Repository
+from sentry.testutils import APITestCase, TestCase
+
+from new_sentry_plugins.bitbucket.endpoints.webhook import parse_raw_user_email, parse_raw_user_name
+from new_sentry_plugins.bitbucket.testutils import PUSH_EVENT_EXAMPLE
+
+BAD_IP = "109.111.111.10"
+BITBUCKET_IP_IN_RANGE = "104.192.143.10"
+BITBUCKET_IP = "34.198.178.64"
+
+
+class UtilityFunctionTest(TestCase):
+    def test_parse_raw_user_email(self):
+        assert parse_raw_user_email("Max Bittker <max@getsentry.com>") == "max@getsentry.com"
+
+        assert parse_raw_user_email("Jess MacQueen@JessMacqueen") is None
+
+    def parse_raw_user_name(self):
+        assert parse_raw_user_name("Max Bittker <max@getsentry.com>") == "Max Bittker"
+
+
+class WebhookTest(APITestCase):
+    def test_get(self):
+        project = self.project  # force creation
+
+        url = "/plugins/bitbucket/organizations/{}/webhook/".format(project.organization.id)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 405
+
+    def test_unregistered_event(self):
+        project = self.project  # force creation
+        url = "/plugins/bitbucket/organizations/{}/webhook/".format(project.organization.id)
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="UnregisteredEvent",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="UnregisteredEvent",
+            REMOTE_ADDR=BITBUCKET_IP_IN_RANGE,
+        )
+
+        assert response.status_code == 204
+
+    def test_invalid_signature_ip(self):
+        project = self.project  # force creation
+
+        url = "/plugins/bitbucket/organizations/{}/webhook/".format(project.organization.id)
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BAD_IP,
+        )
+
+        assert response.status_code == 401
+
+
+class PushEventWebhookTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+
+        url = "/plugins/bitbucket/organizations/{}/webhook/".format(project.organization.id)
+
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+            provider="bitbucket",
+            name="maxbittker/newsdiffs",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(organization_id=project.organization_id)
+            .select_related("author")
+            .order_by("-date_added")
+        )
+
+        assert len(commit_list) == 1
+
+        commit = commit_list[0]
+
+        assert commit.key == "e0e377d186e4f0e937bdb487a23384fe002df649"
+        assert commit.message == u"README.md edited online with Bitbucket"
+        assert commit.author.name == u"Max Bittker"
+        assert commit.author.email == "max@getsentry.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2017, 5, 24, 1, 5, 47, tzinfo=timezone.utc)
+
+    def test_anonymous_lookup(self):
+        project = self.project  # force creation
+
+        url = "/plugins/bitbucket/organizations/{}/webhook/".format(project.organization.id)
+
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="{c78dfb25-7882-4550-97b1-4e0d38f32859}",
+            provider="bitbucket",
+            name="maxbittker/newsdiffs",
+        )
+
+        CommitAuthor.objects.create(
+            external_id="bitbucket:baxterthehacker",
+            organization_id=project.organization_id,
+            email="baxterthehacker@example.com",
+            name=u"bàxterthehacker",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_EVENT_KEY="repo:push",
+            REMOTE_ADDR=BITBUCKET_IP,
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(organization_id=project.organization_id)
+            .select_related("author")
+            .order_by("-date_added")
+        )
+
+        # should be skipping the #skipsentry commit
+        assert len(commit_list) == 1
+
+        commit = commit_list[0]
+
+        assert commit.key == "e0e377d186e4f0e937bdb487a23384fe002df649"
+        assert commit.message == u"README.md edited online with Bitbucket"
+        assert commit.author.name == u"Max Bittker"
+        assert commit.author.email == "max@getsentry.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2017, 5, 24, 1, 5, 47, tzinfo=timezone.utc)
diff --git a/tests/sentry_plugins/bitbucket/test_plugin.py b/tests/sentry_plugins/bitbucket/test_plugin.py
new file mode 100644
index 0000000000..2aaea1a11f
--- /dev/null
+++ b/tests/sentry_plugins/bitbucket/test_plugin.py
@@ -0,0 +1,124 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.test import RequestFactory
+from sentry.plugins.bases.issue2 import PluginError
+from sentry.testutils import PluginTestCase
+
+from social_auth.models import UserSocialAuth
+
+from new_sentry_plugins.bitbucket.plugin import BitbucketPlugin
+
+
+class BitbucketPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return BitbucketPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "bitbucket"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("bitbucket", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "Bitbucket-1"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("repo", "maxbittker/newsdiffs", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert (
+            self.plugin.get_issue_url(group, 1)
+            == "https://bitbucket.org/maxbittker/newsdiffs/issue/1/"
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("repo", "maxbittker/newsdiffs", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.POST,
+            "https://api.bitbucket.org/1.0/repositories/maxbittker/newsdiffs/issues",
+            json={"local_id": 1, "title": "Hello world"},
+        )
+
+        self.plugin.set_option("repo", "maxbittker/newsdiffs", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {
+            "title": "Hello",
+            "description": "Fix this.",
+            "issue_type": "bug",
+            "priority": "trivial",
+        }
+        with self.assertRaises(PluginError):
+            self.plugin.create_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            extra_data={
+                "access_token": (
+                    "oauth_token=123456789abcdefghi&"
+                    "oauth_token_secret="
+                    "123456789123456789abcdefghijklmn"
+                )
+            },
+        )
+
+        assert self.plugin.create_issue(request, group, form_data) == 1
+
+        request = responses.calls[-1].request
+        assert request.headers.get("Authorization", "").startswith("OAuth ")
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://api.bitbucket.org/1.0/repositories/maxbittker/newsdiffs/issues/1",
+            json={"local_id": 1, "title": "Hello world"},
+        )
+        responses.add(
+            responses.POST,
+            "https://api.bitbucket.org/1.0/repositories/maxbittker/newsdiffs/issues/1/comments",
+            json={"body": "Hello"},
+        )
+
+        self.plugin.set_option("repo", "maxbittker/newsdiffs", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"comment": "Hello", "issue_id": "1"}
+        with self.assertRaises(PluginError):
+            self.plugin.link_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            extra_data={
+                "access_token": (
+                    "oauth_token=123456789abcdefghi&oauth_token_secret="
+                    "123456789123456789abcdefghijklmn"
+                )
+            },
+        )
+
+        assert self.plugin.link_issue(request, group, form_data) == {"title": "Hello world"}
diff --git a/tests/sentry_plugins/bitbucket/test_repository_provider.py b/tests/sentry_plugins/bitbucket/test_repository_provider.py
new file mode 100644
index 0000000000..57ba6a1699
--- /dev/null
+++ b/tests/sentry_plugins/bitbucket/test_repository_provider.py
@@ -0,0 +1,60 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.models import Repository
+from sentry.testutils import PluginTestCase
+from social_auth.models import UserSocialAuth
+
+from new_sentry_plugins.bitbucket.plugin import BitbucketRepositoryProvider
+from new_sentry_plugins.bitbucket.testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH
+
+
+class BitbucketPluginTest(PluginTestCase):
+    @fixture
+    def provider(self):
+        return BitbucketRepositoryProvider("bitbucket")
+
+    @responses.activate
+    def test_compare_commits(self):
+        responses.add(
+            responses.GET,
+            "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/commits/e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+            body=COMPARE_COMMITS_EXAMPLE,
+        )
+        responses.add(
+            responses.GET,
+            "https://api.bitbucket.org/2.0/repositories/maxbittker/newsdiffs/diff/e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+            body=COMMIT_DIFF_PATCH,
+        )
+        repo = Repository.objects.create(
+            provider="bitbucket",
+            name="maxbittker/newsdiffs",
+            organization_id=1,
+            config={"name": "maxbittker/newsdiffs"},
+        )
+        user = self.user
+        UserSocialAuth.objects.create(
+            provider="bitbucket",
+            user=user,
+            uid="1",
+            extra_data={
+                "access_token": "oauth_token=oauth-token&oauth_token_secret=oauth-token-secret"
+            },
+        )
+
+        res = self.provider.compare_commits(
+            repo, None, "e18e4e72de0d824edfbe0d73efe34cbd0d01d301", actor=user
+        )
+
+        assert res == [
+            {
+                "author_email": "max@getsentry.com",
+                "author_name": "Max Bittker",
+                "message": "README.md edited online with Bitbucket",
+                "id": "e18e4e72de0d824edfbe0d73efe34cbd0d01d301",
+                "repository": "maxbittker/newsdiffs",
+                "patch_set": [{"path": u"README.md", "type": "M"}],
+            }
+        ]
diff --git a/tests/sentry_plugins/clubhouse/__init__.py b/tests/sentry_plugins/clubhouse/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/clubhouse/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/clubhouse/test_plugin.py b/tests/sentry_plugins/clubhouse/test_plugin.py
new file mode 100644
index 0000000000..b842f304a5
--- /dev/null
+++ b/tests/sentry_plugins/clubhouse/test_plugin.py
@@ -0,0 +1,140 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.test import RequestFactory
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.clubhouse.plugin import ClubhousePlugin
+
+
+class ClubhousePluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return ClubhousePlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "clubhouse"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("clubhouse", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, {"id": 1}) == "Clubhouse Story #1"
+
+    @responses.activate
+    def test_get_issue_url(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert (
+            self.plugin.get_issue_url(
+                group, {"id": 1, "url": "https://app.clubhouse.io/example-org/story/1"}
+            )
+            == "https://app.clubhouse.io/example-org/story/1"
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("token", "12345678-1234-1234-1234-1234567890AB", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("project", "1234", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    def test_validate_config(self):
+        # TODO: add method to validate that the config is actually valid.
+        # It's unclear what method to call to on the plugin to ensure that the config inputs are indeed valid.
+        # See `validate_config()` in plugin.py
+        # self.plugin.set_option('token', '12345678-1234-1234-1234-1234567890AB', self.project)
+        # self.plugin.set_option('project', 'ABCD123', self.project)
+        # assert self.plugin.validate_config(None, self.project, <what to pass in
+        # here>, None) is False
+        pass
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.POST,
+            "https://api.clubhouse.io/api/v2/stories",
+            json={
+                "app_url": "https://app.clubhouse.io/example/story/567/hello",
+                "id": 567,
+                "name": "Hello",
+                "notes": "Fix this.",
+                "project_id": 123,
+            },
+        )
+
+        self.plugin.set_option("token", "12345678-1234-1234-1234-1234567890AB", self.project)
+        self.plugin.set_option("project", 123, self.project)
+        group = self.create_group(message="Hello", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"title": "Hello", "description": "Fix this."}
+
+        assert self.plugin.create_issue(request, group, form_data) == {
+            "id": 567,
+            "title": "Hello",
+            "url": "https://app.clubhouse.io/example/story/567/hello",
+        }
+
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert payload == {
+            "description": "Fix this.",
+            "name": "Hello",
+            "project_id": 123,
+            "story_type": "bug",
+        }
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://api.clubhouse.io/api/v2/search/stories",
+            json={
+                "data": [
+                    {
+                        "id": 11,
+                        "name": "Create Hello World page",
+                        "app_url": "https://app.clubhouse.io/example/story/11/create-hello-world-page",
+                    }
+                ]
+            },
+        )
+        responses.add(
+            responses.GET,
+            "https://api.clubhouse.io/api/v2/stories/11",
+            json={
+                "id": 11,
+                "name": "Create Hello World page",
+                "app_url": "https://app.clubhouse.io/example/story/11/create-hello-world-page",
+            },
+        )
+        responses.add(
+            responses.POST, "https://api.clubhouse.io/api/v2/stories/11/comments", json={}
+        )
+
+        self.plugin.set_option("token", "12345678-1234-1234-1234-1234567890AB", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"comment": "Hello, this is a comment.", "issue_id": "11"}
+
+        assert self.plugin.link_issue(request, group, form_data) == {
+            "id": 11,
+            "title": "Create Hello World page",
+            "url": "https://app.clubhouse.io/example/story/11/create-hello-world-page",
+        }
+
+        request = responses.calls[-1].request
+        payload = json.loads(request.body)
+        assert payload == {"text": "Hello, this is a comment."}
diff --git a/tests/sentry_plugins/github/__init__.py b/tests/sentry_plugins/github/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/github/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/github/endpoints/__init__.py b/tests/sentry_plugins/github/endpoints/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/github/endpoints/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/github/endpoints/test_webhooks.py b/tests/sentry_plugins/github/endpoints/test_webhooks.py
new file mode 100644
index 0000000000..7101cd58df
--- /dev/null
+++ b/tests/sentry_plugins/github/endpoints/test_webhooks.py
@@ -0,0 +1,468 @@
+# -*- coding: utf-8 -*-
+from __future__ import absolute_import
+
+import six
+
+from datetime import datetime
+from django.utils import timezone
+from sentry.models import (
+    Commit,
+    CommitAuthor,
+    Integration,
+    OrganizationOption,
+    PullRequest,
+    Repository,
+)
+from sentry.testutils import APITestCase
+from uuid import uuid4
+
+from new_sentry_plugins.github.testutils import (
+    INSTALLATION_EVENT_EXAMPLE,
+    INSTALLATION_REPO_EVENT,
+    PUSH_EVENT_EXAMPLE,
+    PUSH_EVENT_EXAMPLE_INSTALLATION,
+    PULL_REQUEST_OPENED_EVENT_EXAMPLE,
+    PULL_REQUEST_EDITED_EVENT_EXAMPLE,
+    PULL_REQUEST_CLOSED_EVENT_EXAMPLE,
+)
+
+
+class WebhookTest(APITestCase):
+    def test_get(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 405
+
+    def test_unregistered_event(self):
+        project = self.project  # force creation
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="UnregisteredEvent",
+            HTTP_X_HUB_SIGNATURE="sha1=98196e70369945ffa6b248cf70f7dc5e46dff241",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+    def test_invalid_signature_event(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "2d7565c3537847b789d6995dca8d9f84"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="push",
+            HTTP_X_HUB_SIGNATURE="sha1=33521abeaaf9a57c2abf486e0ccd54d23cf36fec",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 401
+
+
+class PushEventWebhookTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github",
+            name="baxterthehacker/public-repo",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="push",
+            HTTP_X_HUB_SIGNATURE="sha1=98196e70369945ffa6b248cf70f7dc5e46dff241",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(organization_id=project.organization_id)
+            .select_related("author")
+            .order_by("-date_added")
+        )
+
+        assert len(commit_list) == 2
+
+        commit = commit_list[0]
+
+        assert commit.key == "133d60480286590a610a0eb7352ff6e02b9674c4"
+        assert commit.message == u"Update README.md (àgain)"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@users.noreply.github.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2015, 5, 5, 23, 45, 15, tzinfo=timezone.utc)
+
+        commit = commit_list[1]
+
+        assert commit.key == "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+        assert commit.message == "Update README.md"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@users.noreply.github.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2015, 5, 5, 23, 40, 15, tzinfo=timezone.utc)
+
+    def test_anonymous_lookup(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github",
+            name="baxterthehacker/public-repo",
+        )
+
+        CommitAuthor.objects.create(
+            external_id="github:baxterthehacker",
+            organization_id=project.organization_id,
+            email="baxterthehacker@example.com",
+            name=u"bàxterthehacker",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="push",
+            HTTP_X_HUB_SIGNATURE="sha1=98196e70369945ffa6b248cf70f7dc5e46dff241",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(organization_id=project.organization_id)
+            .select_related("author")
+            .order_by("-date_added")
+        )
+
+        # should be skipping the #skipsentry commit
+        assert len(commit_list) == 2
+
+        commit = commit_list[0]
+
+        assert commit.key == "133d60480286590a610a0eb7352ff6e02b9674c4"
+        assert commit.message == u"Update README.md (àgain)"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@example.com"
+        assert commit.date_added == datetime(2015, 5, 5, 23, 45, 15, tzinfo=timezone.utc)
+
+        commit = commit_list[1]
+
+        assert commit.key == "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+        assert commit.message == "Update README.md"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@example.com"
+        assert commit.date_added == datetime(2015, 5, 5, 23, 40, 15, tzinfo=timezone.utc)
+
+
+class InstallationPushEventWebhookTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/installations/webhook/"
+
+        inst = Integration.objects.create(
+            provider="github_apps", external_id="12345", name="dummyorg"
+        )
+
+        inst.add_organization(self.project.organization)
+
+        Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github_apps",
+            name="baxterthehacker/public-repo",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PUSH_EVENT_EXAMPLE_INSTALLATION,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="push",
+            HTTP_X_HUB_SIGNATURE="sha1=56a3df597e02adbc17fb617502c70e19d96a6136",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        commit_list = list(
+            Commit.objects.filter(organization_id=project.organization_id)
+            .select_related("author")
+            .order_by("-date_added")
+        )
+
+        assert len(commit_list) == 2
+
+        commit = commit_list[0]
+
+        assert commit.key == "133d60480286590a610a0eb7352ff6e02b9674c4"
+        assert commit.message == u"Update README.md (àgain)"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@users.noreply.github.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2015, 5, 5, 23, 45, 15, tzinfo=timezone.utc)
+
+        commit = commit_list[1]
+
+        assert commit.key == "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
+        assert commit.message == "Update README.md"
+        assert commit.author.name == u"bàxterthehacker"
+        assert commit.author.email == "baxterthehacker@users.noreply.github.com"
+        assert commit.author.external_id is None
+        assert commit.date_added == datetime(2015, 5, 5, 23, 40, 15, tzinfo=timezone.utc)
+
+
+class InstallationInstallEventWebhookTest(APITestCase):
+    def test_simple(self):
+        url = "/plugins/github/installations/webhook/"
+
+        response = self.client.post(
+            path=url,
+            data=INSTALLATION_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="installation",
+            HTTP_X_HUB_SIGNATURE="sha1=348e46312df2901e8cb945616ee84ce30d9987c9",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        assert Integration.objects.filter(
+            provider="github_apps", external_id=2, name="octocat"
+        ).exists()
+
+
+class InstallationRepoInstallEventWebhookTest(APITestCase):
+    def test_simple(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/installations/webhook/"
+
+        integration = Integration.objects.create(
+            provider="github_apps", external_id="2", name="octocat"
+        )
+
+        integration.add_organization(project.organization)
+
+        response = self.client.post(
+            path=url,
+            data=INSTALLATION_REPO_EVENT,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="installation_repositories",
+            HTTP_X_HUB_SIGNATURE="sha1=6899797a97dc5bb6aab3af927e92e881d03a3bd2",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        assert Repository.objects.filter(
+            provider="github",
+            name="octocat/Hello-World",
+            external_id=1296269,
+            organization_id=project.organization_id,
+        ).exists()
+
+    def test_updates_existing_repo(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/installations/webhook/"
+
+        integration = Integration.objects.create(
+            provider="github_apps", external_id="2", name="octocat"
+        )
+
+        integration.add_organization(project.organization)
+
+        repo = Repository.objects.create(
+            provider="github",
+            name="octocat/Hello-World",
+            external_id=1296269,
+            organization_id=project.organization_id,
+        )
+        assert "name" not in repo.config
+
+        response = self.client.post(
+            path=url,
+            data=INSTALLATION_REPO_EVENT,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="installation_repositories",
+            HTTP_X_HUB_SIGNATURE="sha1=6899797a97dc5bb6aab3af927e92e881d03a3bd2",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        repo = Repository.objects.get(id=repo.id)
+        assert repo.integration_id == integration.id
+        assert repo.config["name"] == repo.name
+
+
+class PullRequestEventWebhook(APITestCase):
+    def test_opened(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        repo = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github_apps",
+            name="baxterthehacker/public-repo",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_OPENED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=aa5b11bc52b9fac082cb59f9ee8667cb222c3aff",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        prs = PullRequest.objects.filter(
+            repository_id=repo.id, organization_id=project.organization.id
+        )
+
+        assert len(prs) == 1
+
+        pr = prs[0]
+
+        assert pr.key == "1"
+        assert pr.message == u"This is a pretty simple change that we need to pull into master."
+        assert pr.title == u"Update the README with new information"
+        assert pr.author.name == u"baxterthehacker"
+
+    def test_edited(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        repo = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github_apps",
+            name="baxterthehacker/public-repo",
+        )
+
+        pr = PullRequest.objects.create(
+            key="1", repository_id=repo.id, organization_id=project.organization.id
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_EDITED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=b50a13afd33b514e8e62e603827ea62530f0690e",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        pr = PullRequest.objects.get(id=pr.id)
+
+        assert pr.key == "1"
+        assert pr.message == u"new edited body"
+        assert pr.title == u"new edited title"
+        assert pr.author.name == u"baxterthehacker"
+
+    def test_closed(self):
+        project = self.project  # force creation
+
+        url = "/plugins/github/organizations/{}/webhook/".format(project.organization.id)
+
+        secret = "b3002c3e321d4b7880360d397db2ccfd"
+
+        OrganizationOption.objects.set_value(
+            organization=project.organization, key="github:webhook_secret", value=secret
+        )
+
+        repo = Repository.objects.create(
+            organization_id=project.organization.id,
+            external_id="35129377",
+            provider="github_apps",
+            name="baxterthehacker/public-repo",
+        )
+
+        response = self.client.post(
+            path=url,
+            data=PULL_REQUEST_CLOSED_EVENT_EXAMPLE,
+            content_type="application/json",
+            HTTP_X_GITHUB_EVENT="pull_request",
+            HTTP_X_HUB_SIGNATURE="sha1=dff1c803cf1e48c1b9aefe4a17952ea132758806",
+            HTTP_X_GITHUB_DELIVERY=six.text_type(uuid4()),
+        )
+
+        assert response.status_code == 204
+
+        prs = PullRequest.objects.filter(
+            repository_id=repo.id, organization_id=project.organization.id
+        )
+
+        assert len(prs) == 1
+
+        pr = prs[0]
+
+        assert pr.key == "1"
+        assert pr.message == u"new closed body"
+        assert pr.title == u"new closed title"
+        assert pr.author.name == u"baxterthehacker"
+        assert pr.merge_commit_sha == "0d1a26e67d8f5eaf1f6ba5c57fc3c7d91ac0fd1c"
diff --git a/tests/sentry_plugins/github/test_plugin.py b/tests/sentry_plugins/github/test_plugin.py
new file mode 100644
index 0000000000..b8cf0851f4
--- /dev/null
+++ b/tests/sentry_plugins/github/test_plugin.py
@@ -0,0 +1,106 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.test import RequestFactory
+from sentry.plugins.bases.issue2 import PluginError
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+from social_auth.models import UserSocialAuth
+
+from new_sentry_plugins.github.plugin import GitHubPlugin
+
+
+class GitHubPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return GitHubPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "github"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("github", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "GH-1"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("repo", "getsentry/sentry", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_url(group, 1) == "https://github.com/getsentry/sentry/issues/1"
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("repo", "getsentry/sentry", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.POST,
+            "https://api.github.com/repos/getsentry/sentry/issues",
+            json={"number": 1, "title": "Hello world"},
+        )
+
+        self.plugin.set_option("repo", "getsentry/sentry", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"title": "Hello", "description": "Fix this."}
+        with self.assertRaises(PluginError):
+            self.plugin.create_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user, provider=self.plugin.auth_provider, extra_data={"access_token": "foo"}
+        )
+
+        assert self.plugin.create_issue(request, group, form_data) == 1
+        request = responses.calls[0].request
+        assert request.headers["Authorization"] == "Bearer foo"
+        payload = json.loads(request.body)
+        assert payload == {"title": "Hello", "body": "Fix this.", "assignee": None}
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://api.github.com/repos/getsentry/sentry/issues/1",
+            json={"number": 1, "title": "Hello world"},
+        )
+        responses.add(
+            responses.POST,
+            "https://api.github.com/repos/getsentry/sentry/issues/1/comments",
+            json={"body": "Hello"},
+        )
+
+        self.plugin.set_option("repo", "getsentry/sentry", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"comment": "Hello", "issue_id": "1"}
+        with self.assertRaises(PluginError):
+            self.plugin.link_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user, provider=self.plugin.auth_provider, extra_data={"access_token": "foo"}
+        )
+
+        assert self.plugin.link_issue(request, group, form_data) == {"title": "Hello world"}
+        request = responses.calls[-1].request
+        assert request.headers["Authorization"] == "Bearer foo"
+        payload = json.loads(request.body)
+        assert payload == {"body": "Hello"}
diff --git a/tests/sentry_plugins/github/test_provider.py b/tests/sentry_plugins/github/test_provider.py
new file mode 100644
index 0000000000..101a03c7ad
--- /dev/null
+++ b/tests/sentry_plugins/github/test_provider.py
@@ -0,0 +1,247 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from mock import patch
+from social_auth.models import UserSocialAuth
+from sentry.models import Integration, OrganizationIntegration, Repository
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.github.client import GitHubClient, GitHubAppsClient
+from new_sentry_plugins.github.plugin import GitHubAppsRepositoryProvider, GitHubRepositoryProvider
+from new_sentry_plugins.github.testutils import (
+    COMPARE_COMMITS_EXAMPLE,
+    GET_LAST_COMMITS_EXAMPLE,
+    INTSTALLATION_REPOSITORIES_API_RESPONSE,
+    LIST_INSTALLATION_API_RESPONSE,
+)
+
+
+class GitHubPluginTest(PluginTestCase):
+    @fixture
+    def provider(self):
+        return GitHubRepositoryProvider("github")
+
+    def test_compare_commits(self):
+        repo = Repository.objects.create(provider="github", name="example", organization_id=1)
+
+        res = self.provider._format_commits(repo, json.loads(COMPARE_COMMITS_EXAMPLE)["commits"])
+
+        assert res == [
+            {
+                "author_email": "support@github.com",
+                "author_name": "Monalisa Octocat",
+                "message": "Fix all the bugs",
+                "id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+                "repository": "example",
+            }
+        ]
+
+    def test_get_last_commits(self):
+        repo = Repository.objects.create(provider="github", name="example", organization_id=1)
+
+        res = self.provider._format_commits(repo, json.loads(GET_LAST_COMMITS_EXAMPLE)[:10])
+
+        assert res == [
+            {
+                "author_email": "support@github.com",
+                "author_name": "Monalisa Octocat",
+                "message": "Fix all the bugs",
+                "id": "6dcb09b5b57875f334f61aebed695e2e4193db5e",
+                "repository": "example",
+            }
+        ]
+
+    @responses.activate
+    def test_create_repository(self):
+        responses.add(
+            responses.POST,
+            "https://api.github.com/repos/getsentry/example-repo/hooks",
+            json={"id": "123456", "events": ["push", "pull_request"]},
+        )
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="github", extra_data={"access_token": "abcdefg"}
+        )
+        data = {"name": "getsentry/example-repo", "external_id": "654321"}
+        data = self.provider.create_repository(organization, data, user)
+        assert data == {
+            "config": {
+                "name": "getsentry/example-repo",
+                "webhook_id": "123456",
+                "webhook_events": ["push", "pull_request"],
+            },
+            "external_id": "654321",
+            "name": "getsentry/example-repo",
+            "url": "https://github.com/getsentry/example-repo",
+        }
+
+        request = responses.calls[-1].request
+        req_json = json.loads(request.body)
+        assert req_json == {
+            "active": True,
+            "config": {
+                "url": "http://testserver/plugins/github/organizations/{}/webhook/".format(
+                    organization.id
+                ),
+                "secret": self.provider.get_webhook_secret(organization),
+                "content_type": "json",
+            },
+            "name": "web",
+            "events": ["push", "pull_request"],
+        }
+
+    @responses.activate
+    def test_delete_repository(self):
+        responses.add(
+            responses.DELETE,
+            "https://api.github.com/repos/getsentry/example-repo/hooks/123456",
+            json={},
+        )
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="github", extra_data={"access_token": "abcdefg"}
+        )
+        repo = Repository.objects.create(
+            provider="github",
+            name="example-repo",
+            organization_id=organization.id,
+            config={
+                "name": "getsentry/example-repo",
+                "external_id": "654321",
+                "webhook_id": "123456",
+            },
+        )
+
+        self.provider.delete_repository(repo, user)
+
+    @responses.activate
+    def test_update_repository_without_webhook(self):
+        responses.add(
+            responses.POST,
+            "https://api.github.com/repos/getsentry/example-repo/hooks",
+            json={"id": "123456", "events": ["push", "pull_request"]},
+        )
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="github", extra_data={"access_token": "abcdefg"}
+        )
+        repo = Repository.objects.create(
+            provider="github",
+            name="example-repo",
+            organization_id=organization.id,
+            config={"name": "getsentry/example-repo", "external_id": "654321"},
+        )
+
+        self.provider.update_repository(repo, user)
+
+        assert repo.config["webhook_id"] == "123456"
+        assert repo.config["webhook_events"] == ["push", "pull_request"]
+
+    @responses.activate
+    def test_update_repository_with_webhook(self):
+        responses.add(
+            responses.PATCH,
+            "https://api.github.com/repos/getsentry/example-repo/hooks/123456",
+            json={"id": "123456", "events": ["push", "pull_request"]},
+        )
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="github", extra_data={"access_token": "abcdefg"}
+        )
+        repo = Repository.objects.create(
+            provider="github",
+            name="example-repo",
+            organization_id=organization.id,
+            config={
+                "name": "getsentry/example-repo",
+                "external_id": "654321",
+                "webhook_id": "123456",
+            },
+        )
+
+        self.provider.update_repository(repo, user)
+
+        assert repo.config["webhook_id"] == "123456"
+        assert repo.config["webhook_events"] == ["push", "pull_request"]
+
+
+class GitHubAppsProviderTest(PluginTestCase):
+    @fixture
+    def provider(self):
+        return GitHubAppsRepositoryProvider("github_apps")
+
+    @patch.object(
+        GitHubAppsClient,
+        "get_repositories",
+        return_value=json.loads(INTSTALLATION_REPOSITORIES_API_RESPONSE),
+    )
+    @patch.object(
+        GitHubClient, "get_installations", return_value=json.loads(LIST_INSTALLATION_API_RESPONSE)
+    )
+    def test_link_auth(self, *args):
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="github_apps", extra_data={"access_token": "abcdefg"}
+        )
+
+        integration = Integration.objects.create(provider="github_apps", external_id="1")
+
+        self.provider.link_auth(user, organization, {"integration_id": integration.id})
+
+        assert OrganizationIntegration.objects.filter(
+            organization=organization, integration=integration
+        ).exists()
+
+    def test_delete_repository(self):
+        user = self.create_user()
+        organization = self.create_organization()
+        integration = Integration.objects.create(provider="github_apps", external_id="1")
+        repo = Repository.objects.create(
+            name="example-repo",
+            provider="github_apps",
+            organization_id=organization.id,
+            integration_id=integration.id,
+        )
+
+        # just check that it doesn't throw / try to delete a webhook
+        assert self.provider.delete_repository(repo=repo, actor=user) is None
+
+    @patch.object(GitHubAppsClient, "get_last_commits", return_value=[])
+    def test_compare_commits_no_start(self, mock_get_last_commits):
+        organization = self.create_organization()
+        integration = Integration.objects.create(provider="github_apps", external_id="1")
+        repo = Repository.objects.create(
+            name="example-repo",
+            provider="github_apps",
+            organization_id=organization.id,
+            integration_id=integration.id,
+            config={"name": "example-repo"},
+        )
+
+        self.provider.compare_commits(repo, None, "a" * 40)
+
+        assert mock_get_last_commits.called
+
+    @patch.object(GitHubAppsClient, "compare_commits", return_value={"commits": []})
+    def test_compare_commits(self, mock_compare_commits):
+        organization = self.create_organization()
+        integration = Integration.objects.create(provider="github_apps", external_id="1")
+        repo = Repository.objects.create(
+            name="example-repo",
+            provider="github_apps",
+            organization_id=organization.id,
+            integration_id=integration.id,
+            config={"name": "example-repo"},
+        )
+
+        self.provider.compare_commits(repo, "b" * 40, "a" * 40)
+
+        assert mock_compare_commits.called
diff --git a/tests/sentry_plugins/gitlab/__init__.py b/tests/sentry_plugins/gitlab/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/gitlab/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/gitlab/test_plugin.py b/tests/sentry_plugins/gitlab/test_plugin.py
new file mode 100644
index 0000000000..f8b29782bc
--- /dev/null
+++ b/tests/sentry_plugins/gitlab/test_plugin.py
@@ -0,0 +1,128 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.core.urlresolvers import reverse
+from django.test import RequestFactory
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.gitlab.plugin import GitLabPlugin
+
+
+class GitLabPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return GitLabPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "gitlab"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("gitlab", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "GL-1"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("gitlab_url", "https://gitlab.com", self.project)
+        self.plugin.set_option("gitlab_repo", "getsentry/sentry", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert (
+            self.plugin.get_issue_url(group, group.id)
+            == "https://gitlab.com/getsentry/sentry/issues/%s" % group.id
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("gitlab_url", "https://gitlab.com", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("gitlab_repo", "getsentry/sentry", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("gitlab_token", "abcdefg", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.POST,
+            "https://gitlab.com/api/v4/projects/getsentry%2Fsentry/issues",
+            body='{"iid": 1, "id": "10"}',
+        )
+
+        self.plugin.set_option("gitlab_url", "https://gitlab.com", self.project)
+        self.plugin.set_option("gitlab_repo", "getsentry/sentry", self.project)
+        self.plugin.set_option("gitlab_token", "abcdefg", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = self.user
+        form_data = {"title": "Hello", "description": "Fix this."}
+
+        self.login_as(self.user)
+
+        assert self.plugin.create_issue(request, group, form_data) == 1
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert payload == {
+            "title": "Hello",
+            "description": "Fix this.",
+            "labels": None,
+            "assignee_id": None,
+        }
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://gitlab.com/api/v4/projects/getsentry%2Fsentry/issues/1",
+            body='{"iid": 1, "id": "10", "title": "Hello world"}',
+            match_querystring=True,
+        )
+        responses.add(
+            responses.POST,
+            "https://gitlab.com/api/v4/projects/getsentry%2Fsentry/issues/1/notes",
+            body='{"body": "Hello"}',
+        )
+
+        self.plugin.set_option("gitlab_url", "https://gitlab.com", self.project)
+        self.plugin.set_option("gitlab_repo", "getsentry/sentry", self.project)
+        self.plugin.set_option("gitlab_token", "abcdefg", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = self.user
+        form_data = {"comment": "Hello", "issue_id": "1"}
+
+        self.login_as(self.user)
+
+        assert self.plugin.link_issue(request, group, form_data) == {"title": "Hello world"}
+        request = responses.calls[-1].request
+        payload = json.loads(request.body)
+        assert payload == {"body": "Hello"}
+
+    def test_no_secrets(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.plugin.set_option("gitlab_url", "https://gitlab.com", self.project)
+        self.plugin.set_option("gitlab_repo", "getsentry/sentry", self.project)
+        self.plugin.set_option("gitlab_token", "abcdefg", self.project)
+        url = reverse(
+            "sentry-api-0-project-plugin-details", args=[self.org.slug, self.project.slug, "gitlab"]
+        )
+        res = self.client.get(url)
+        config = json.loads(res.content)["config"]
+        token_config = [item for item in config if item["name"] == "gitlab_token"][0]
+        assert token_config.get("type") == "secret"
+        assert token_config.get("value") is None
+        assert token_config.get("hasSavedValue") is True
+        assert token_config.get("prefix") == "abcd"
diff --git a/tests/sentry_plugins/heroku/__init__.py b/tests/sentry_plugins/heroku/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/heroku/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/heroku/test_plugin.py b/tests/sentry_plugins/heroku/test_plugin.py
new file mode 100644
index 0000000000..4773d0f817
--- /dev/null
+++ b/tests/sentry_plugins/heroku/test_plugin.py
@@ -0,0 +1,138 @@
+from __future__ import absolute_import
+
+from mock import Mock, patch
+
+from django.utils import timezone
+
+from datetime import timedelta
+
+from sentry.exceptions import HookValidationError
+from sentry.models import (
+    Commit,
+    Deploy,
+    Environment,
+    ProjectOption,
+    Release,
+    ReleaseCommit,
+    ReleaseHeadCommit,
+    Repository,
+    User,
+)
+from sentry.testutils import TestCase
+
+from new_sentry_plugins.heroku.plugin import HerokuReleaseHook
+
+
+class SetRefsTest(TestCase):
+    """
+    tests that when finish_release is called on a release hook,
+    we try to get the previous commits based on the version ref
+    and that we create `ReleaseHeadCommit`s for the version
+    """
+
+    @patch("sentry.tasks.commits.fetch_commits")
+    def test_minimal(self, mock_fetch_commits):
+        project = self.create_project()
+        version = "bbee5b51f84611e4b14834363b8514c2"
+        data_list = [
+            {
+                "id": "c7155651831549cf8a5e47889fce17eb",
+                "message": "foo",
+                "author_email": "jane@example.com",
+            },
+            {
+                "id": "62de626b7c7cfb8e77efb4273b1a3df4123e6216",
+                "message": "hello",
+                "author_name": "Jess",
+            },
+            {
+                "id": "58de626b7c7cfb8e77efb4273b1a3df4123e6345",
+                "message": "bar",
+                "author_name": "Joe^^",
+            },
+            {
+                "id": "bbee5b51f84611e4b14834363b8514c2",
+                "message": "blah",
+                "author_email": "katie@example.com",
+            },
+        ]
+        user = User.objects.create(email="stebe@sentry.io")
+        repo = Repository.objects.create(
+            organization_id=project.organization_id, name=project.name, provider="dummy"
+        )
+        ProjectOption.objects.set_value(key="heroku:repository", project=project, value=repo.name)
+        for data in data_list:
+            Commit.objects.create(
+                key=data["id"], organization_id=self.project.organization_id, repository_id=repo.id
+            )
+
+        old_release = Release.objects.create(
+            version="a" * 40,
+            organization_id=project.organization_id,
+            date_added=timezone.now() - timedelta(minutes=30),
+        )
+        old_release.add_project(project)
+
+        ReleaseCommit.objects.create(
+            organization_id=project.organization_id,
+            project_id=project.id,
+            release=old_release,
+            commit=Commit.objects.get(key="c7155651831549cf8a5e47889fce17eb"),
+            order=0,
+        )
+        ReleaseHeadCommit.objects.create(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            release=old_release,
+            commit=Commit.objects.get(key="c7155651831549cf8a5e47889fce17eb"),
+        )
+        release_heads = ReleaseHeadCommit.objects.filter(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            commit=Commit.objects.get(key="bbee5b51f84611e4b14834363b8514c2"),
+        )
+
+        assert len(release_heads) == 0
+        hook = HerokuReleaseHook(project)
+        hook.finish_release(version=version, owner=user)
+
+        release = Release.objects.get(projects=project, version=version)
+
+        new_release_heads = ReleaseHeadCommit.objects.filter(
+            organization_id=project.organization_id,
+            repository_id=repo.id,
+            release=release,
+            commit=Commit.objects.get(key="bbee5b51f84611e4b14834363b8514c2"),
+        )
+        assert len(new_release_heads) == 1
+        assert release.version == "bbee5b51f84611e4b14834363b8514c2"
+
+        deploy = Deploy.objects.filter(
+            organization_id=project.organization_id,
+            release=release,
+            environment_id=Environment.objects.get(
+                organization_id=project.organization_id, name="production"
+            ).id,
+        )
+        assert len(deploy) == 1
+
+        mock_fetch_commits.apply_async.assert_called_with(
+            kwargs={
+                "release_id": release.id,
+                "user_id": user.id,
+                "refs": [{"commit": "bbee5b51f84611e4b14834363b8514c2", "repository": repo.name}],
+                "prev_release_id": old_release.id,
+            }
+        )
+
+
+class HookHandleTest(TestCase):
+    def test_bad_version(self):
+        project = self.create_project()
+        user = self.create_user()
+        hook = HerokuReleaseHook(project)
+
+        req = Mock()
+        req.POST = {"head_long": "", "url": "http://example.com", "user": user.email}
+        with self.assertRaises(HookValidationError):
+            hook.handle(req)
diff --git a/tests/sentry_plugins/jira/__init__.py b/tests/sentry_plugins/jira/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/jira/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/jira/test_plugin.py b/tests/sentry_plugins/jira/test_plugin.py
new file mode 100644
index 0000000000..c029f8dab2
--- /dev/null
+++ b/tests/sentry_plugins/jira/test_plugin.py
@@ -0,0 +1,297 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.core.urlresolvers import reverse
+from django.test import RequestFactory
+from sentry.testutils import TestCase
+from sentry.utils import json
+
+from new_sentry_plugins.jira.plugin import JiraPlugin
+
+create_meta_response = {
+    "expand": "projects",
+    "projects": [
+        {
+            "expand": "issuetypes",
+            "self": "https://getsentry.atlassian.net/rest/api/2/project/10000",
+            "id": "10000",
+            "key": "SEN",
+            "name": "Sentry",
+            "avatarUrls": {
+                "48x48": "https://getsentry.atlassian.net/secure/projectavatar?avatarId=10324",
+                "24x24": "https://getsentry.atlassian.net/secure/projectavatar?size=small&avatarId=10324",
+                "16x16": "https://getsentry.atlassian.net/secure/projectavatar?size=xsmall&avatarId=10324",
+                "32x32": "https://getsentry.atlassian.net/secure/projectavatar?size=medium&avatarId=10324",
+            },
+            "issuetypes": [
+                {
+                    "self": "https://getsentry.atlassian.net/rest/api/2/issuetype/10002",
+                    "id": "10002",
+                    "description": "A task that needs to be done.",
+                    "iconUrl": "https://getsentry.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype",
+                    "name": "Task",
+                    "subtask": False,
+                    "expand": "fields",
+                    "fields": {
+                        "summary": {
+                            "required": True,
+                            "schema": {"type": "string", "system": "summary"},
+                            "name": "Summary",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                        },
+                        "issuetype": {
+                            "required": True,
+                            "schema": {"type": "issuetype", "system": "issuetype"},
+                            "name": "Issue Type",
+                            "hasDefaultValue": False,
+                            "operations": [],
+                            "allowedValues": [
+                                {
+                                    "self": "https://getsentry.atlassian.net/rest/api/2/issuetype/10002",
+                                    "id": "10002",
+                                    "description": "A task that needs to be done.",
+                                    "iconUrl": "https://getsentry.atlassian.net/secure/viewavatar?size=xsmall&avatarId=10318&avatarType=issuetype",
+                                    "name": "Task",
+                                    "subtask": False,
+                                    "avatarId": 10318,
+                                }
+                            ],
+                        },
+                        "components": {
+                            "required": False,
+                            "schema": {
+                                "type": "array",
+                                "items": "component",
+                                "system": "components",
+                            },
+                            "name": "Component/s",
+                            "hasDefaultValue": False,
+                            "operations": ["add", "set", "remove"],
+                            "allowedValues": [],
+                        },
+                        "description": {
+                            "required": False,
+                            "schema": {"type": "string", "system": "description"},
+                            "name": "Description",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                        },
+                        "project": {
+                            "required": True,
+                            "schema": {"type": "project", "system": "project"},
+                            "name": "Project",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                            "allowedValues": [
+                                {
+                                    "self": "https://getsentry.atlassian.net/rest/api/2/project/10000",
+                                    "id": "10000",
+                                    "key": "SEN",
+                                    "name": "Sentry",
+                                    "avatarUrls": {
+                                        "48x48": "https://getsentry.atlassian.net/secure/projectavatar?avatarId=10324",
+                                        "24x24": "https://getsentry.atlassian.net/secure/projectavatar?size=small&avatarId=10324",
+                                        "16x16": "https://getsentry.atlassian.net/secure/projectavatar?size=xsmall&avatarId=10324",
+                                        "32x32": "https://getsentry.atlassian.net/secure/projectavatar?size=medium&avatarId=10324",
+                                    },
+                                }
+                            ],
+                        },
+                        "reporter": {
+                            "required": True,
+                            "schema": {"type": "user", "system": "reporter"},
+                            "name": "Reporter",
+                            "autoCompleteUrl": "https://getsentry.atlassian.net/rest/api/latest/user/search?username=",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                        },
+                        "fixVersions": {
+                            "required": False,
+                            "schema": {
+                                "type": "array",
+                                "items": "version",
+                                "system": "fixVersions",
+                            },
+                            "name": "Fix Version/s",
+                            "hasDefaultValue": False,
+                            "operations": ["set", "add", "remove"],
+                            "allowedValues": [],
+                        },
+                        "priority": {
+                            "required": False,
+                            "schema": {"type": "priority", "system": "priority"},
+                            "name": "Priority",
+                            "hasDefaultValue": True,
+                            "operations": ["set"],
+                            "allowedValues": [
+                                {
+                                    "self": "https://getsentry.atlassian.net/rest/api/2/priority/1",
+                                    "iconUrl": "https://getsentry.atlassian.net/images/icons/priorities/highest.svg",
+                                    "name": "Highest",
+                                    "id": "1",
+                                }
+                            ],
+                        },
+                        "customfield_10003": {
+                            "required": False,
+                            "schema": {
+                                "type": "array",
+                                "items": "string",
+                                "custom": "com.pyxis.greenhopper.jira:gh-sprint",
+                                "customId": 10003,
+                            },
+                            "name": "Sprint",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                        },
+                        "labels": {
+                            "required": False,
+                            "schema": {"type": "array", "items": "string", "system": "labels"},
+                            "name": "Labels",
+                            "autoCompleteUrl": "https://getsentry.atlassian.net/rest/api/1.0/labels/suggest?query=",
+                            "hasDefaultValue": False,
+                            "operations": ["add", "set", "remove"],
+                        },
+                        "attachment": {
+                            "required": False,
+                            "schema": {
+                                "type": "array",
+                                "items": "attachment",
+                                "system": "attachment",
+                            },
+                            "name": "Attachment",
+                            "hasDefaultValue": False,
+                            "operations": [],
+                        },
+                        "assignee": {
+                            "required": False,
+                            "schema": {"type": "user", "system": "assignee"},
+                            "name": "Assignee",
+                            "autoCompleteUrl": "https://getsentry.atlassian.net/rest/api/latest/user/assignable/search?issueKey=null&username=",
+                            "hasDefaultValue": False,
+                            "operations": ["set"],
+                        },
+                    },
+                }
+            ],
+        }
+    ],
+}
+
+issue_response = {
+    "key": "SEN-19",
+    "id": "10708",
+    "fields": {"summary": "TypeError: 'set' object has no attribute '__getitem__'"},
+}
+
+
+class JiraPluginTest(TestCase):
+    @fixture
+    def plugin(self):
+        return JiraPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "jira"
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, "SEN-1") == "SEN-1"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("instance_url", "https://getsentry.atlassian.net", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert (
+            self.plugin.get_issue_url(group, "SEN-1")
+            == "https://getsentry.atlassian.net/browse/SEN-1"
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("default_project", "SEN", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.GET,
+            "https://getsentry.atlassian.net/rest/api/2/issue/createmeta",
+            json=create_meta_response,
+        )
+        responses.add(
+            responses.POST,
+            "https://getsentry.atlassian.net/rest/api/2/issue",
+            json={"key": "SEN-1"},
+        )
+        self.plugin.set_option("instance_url", "https://getsentry.atlassian.net", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {
+            "title": "Hello",
+            "description": "Fix this.",
+            "issuetype": "bug",
+            "project": "SEN",
+        }
+        assert self.plugin.create_issue(request, group, form_data) == "SEN-1"
+
+    @responses.activate
+    def test_link_issue(self):
+        responses.add(
+            responses.GET,
+            "https://getsentry.atlassian.net/rest/api/2/issue/SEN-19",
+            json=issue_response,
+        )
+        self.plugin.set_option("instance_url", "https://getsentry.atlassian.net", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"issue_id": "SEN-19"}
+        assert (
+            self.plugin.link_issue(request, group, form_data)["title"]
+            == issue_response["fields"]["summary"]
+        )
+
+    def test_no_secrets(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.plugin.set_option("password", "abcdef", self.project)
+        url = reverse(
+            "sentry-api-0-project-plugin-details", args=[self.org.slug, self.project.slug, "jira"]
+        )
+        res = self.client.get(url)
+        config = json.loads(res.content)["config"]
+        password_config = [item for item in config if item["name"] == "password"][0]
+        assert password_config.get("type") == "secret"
+        assert password_config.get("value") is None
+        assert password_config.get("hasSavedValue") is True
+        assert password_config.get("prefix") == ""
+
+    def test_get_formatted_user(self):
+        assert self.plugin._get_formatted_user(
+            {"displayName": "Foo Bar", "emailAddress": "foo@sentry.io", "name": "foobar"}
+        ) == {"text": "Foo Bar - foo@sentry.io (foobar)", "id": "foobar"}
+
+        # test weird addon users that don't have email addresses
+        assert self.plugin._get_formatted_user(
+            {
+                "name": "robot",
+                "avatarUrls": {
+                    "16x16": "https://avatar-cdn.atlassian.com/someid",
+                    "24x24": "https://avatar-cdn.atlassian.com/someotherid",
+                },
+                "self": "https://something.atlassian.net/rest/api/2/user?username=someaddon",
+            }
+        ) == {"id": "robot", "text": "robot (robot)"}
diff --git a/tests/sentry_plugins/jira_ac/__init__.py b/tests/sentry_plugins/jira_ac/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/jira_ac/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/jira_ac/test_plugin.py b/tests/sentry_plugins/jira_ac/test_plugin.py
new file mode 100644
index 0000000000..7b326c66e3
--- /dev/null
+++ b/tests/sentry_plugins/jira_ac/test_plugin.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from django.test import RequestFactory
+from sentry.testutils import PluginTestCase
+
+from new_sentry_plugins.jira_ac.plugin import JiraACPlugin
+
+
+class JiraPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return JiraACPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "jira-ac"
+
+    def test_entry_point(self):
+        self.assertAppInstalled("jira_ac", "new_sentry_plugins.jira_ac")
+        self.assertPluginInstalled("jira_ac", self.plugin)
diff --git a/tests/sentry_plugins/pagerduty/__init__.py b/tests/sentry_plugins/pagerduty/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/pagerduty/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/pagerduty/test_plugin.py b/tests/sentry_plugins/pagerduty/test_plugin.py
new file mode 100644
index 0000000000..5dd169680b
--- /dev/null
+++ b/tests/sentry_plugins/pagerduty/test_plugin.py
@@ -0,0 +1,115 @@
+from __future__ import absolute_import
+
+import responses
+import six
+
+from exam import fixture
+from django.core.urlresolvers import reverse
+from sentry.models import Rule
+from sentry.plugins.base import Notification
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.pagerduty.plugin import PagerDutyPlugin
+
+INVALID_METHOD = (
+    '{"status":"invalid method","message":"You must use HTTP POST to submit your event"}'
+)
+
+SUCCESS = """{
+  "status": "success",
+  "message": "Event processed",
+  "incident_key": "73af7a305bd7012d7c06002500d5d1a6"
+}"""
+
+
+class PagerDutyPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return PagerDutyPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "pagerduty"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("pagerduty", self.plugin)
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(self.project) is False
+        self.plugin.set_option("service_key", "abcdef", self.project)
+        assert self.plugin.is_configured(self.project) is True
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add(
+            "GET",
+            "https://events.pagerduty.com/generic/2010-04-15/create_event.json",
+            body=INVALID_METHOD,
+        )
+        responses.add(
+            "POST",
+            "https://events.pagerduty.com/generic/2010-04-15/create_event.json",
+            body=SUCCESS,
+        )
+        self.plugin.set_option("service_key", "abcdef", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert payload == {
+            "client_url": "http://example.com",
+            "event_type": "trigger",
+            "contexts": [
+                {
+                    "text": "Issue Details",
+                    "href": "http://example.com/organizations/baz/issues/{}/?referrer=pagerduty_plugin".format(
+                        group.id
+                    ),
+                    "type": "link",
+                }
+            ],
+            "incident_key": six.text_type(group.id),
+            "client": "sentry",
+            "details": {
+                "project": self.project.name,
+                "release": None,
+                "url": "http://example.com/organizations/baz/issues/{}/?referrer=pagerduty_plugin".format(
+                    group.id
+                ),
+                "culprit": group.culprit,
+                "platform": "python",
+                "event_id": event.event_id,
+                "tags": {"level": "warning"},
+                "datetime": event.datetime.strftime("%Y-%m-%dT%H:%M:%S.%fZ"),
+            },
+            "service_key": "abcdef",
+            "description": event.get_legacy_message(),
+        }
+
+    def test_no_secrets(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.plugin.set_option("service_key", "abcdef", self.project)
+        url = reverse(
+            "sentry-api-0-project-plugin-details",
+            args=[self.org.slug, self.project.slug, "pagerduty"],
+        )
+        res = self.client.get(url)
+        config = json.loads(res.content)["config"]
+        key_config = [item for item in config if item["name"] == "service_key"][0]
+        assert key_config.get("type") == "secret"
+        assert key_config.get("value") is None
+        assert key_config.get("hasSavedValue") is True
+        assert key_config.get("prefix") == "abcd"
diff --git a/tests/sentry_plugins/phabricator/__init__.py b/tests/sentry_plugins/phabricator/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/phabricator/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/phabricator/test_plugin.py b/tests/sentry_plugins/phabricator/test_plugin.py
new file mode 100644
index 0000000000..4bb93064e9
--- /dev/null
+++ b/tests/sentry_plugins/phabricator/test_plugin.py
@@ -0,0 +1,47 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.test import RequestFactory
+from sentry.testutils import PluginTestCase
+
+from new_sentry_plugins.phabricator.plugin import PhabricatorPlugin
+
+
+class PhabricatorPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return PhabricatorPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "phabricator"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("phabricator", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "T1"
+
+    @responses.activate
+    def test_get_issue_url(self):
+        self.plugin.set_option("host", "http://secure.phabricator.org", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_url(group, "1") == "http://secure.phabricator.org/T1"
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("host", "http://secure.phabricator.org", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("token", "12345678-1234-1234-1234-1234567890AB", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+        self.plugin.unset_option("token", self.project)
+        self.plugin.set_option("username", "a-user", self.project)
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("certificate", "a-certificate", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
diff --git a/tests/sentry_plugins/pivotal/__init__.py b/tests/sentry_plugins/pivotal/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/pivotal/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/pivotal/test_pivotal_plugin.py b/tests/sentry_plugins/pivotal/test_pivotal_plugin.py
new file mode 100644
index 0000000000..7d2f6e4deb
--- /dev/null
+++ b/tests/sentry_plugins/pivotal/test_pivotal_plugin.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from exam import fixture
+from django.core.urlresolvers import reverse
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.pivotal.plugin import PivotalPlugin
+
+
+class PivotalPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return PivotalPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "pivotal"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("pivotal", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, 1) == "#1"
+
+    def test_get_issue_url(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_url(group, 1) == "https://www.pivotaltracker.com/story/show/1"
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("token", "1", self.project)
+        self.plugin.set_option("project", "1", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    def test_no_secrets(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.plugin.set_option("token", "abcdef", self.project)
+        url = reverse(
+            "sentry-api-0-project-plugin-details",
+            args=[self.org.slug, self.project.slug, "pivotal"],
+        )
+        res = self.client.get(url)
+        config = json.loads(res.content)["config"]
+        token_config = [item for item in config if item["name"] == "token"][0]
+        assert token_config.get("type") == "secret"
+        assert token_config.get("value") is None
+        assert token_config.get("hasSavedValue") is True
+        assert token_config.get("prefix") == "abcd"
diff --git a/tests/sentry_plugins/pushover/__init__.py b/tests/sentry_plugins/pushover/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/pushover/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/pushover/test_plugin.py b/tests/sentry_plugins/pushover/test_plugin.py
new file mode 100644
index 0000000000..aea4acf552
--- /dev/null
+++ b/tests/sentry_plugins/pushover/test_plugin.py
@@ -0,0 +1,130 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.core.urlresolvers import reverse
+from sentry.models import Rule
+from sentry.plugins.base import Notification
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+from six.moves.urllib.parse import parse_qs
+
+from new_sentry_plugins.pushover.plugin import PushoverPlugin
+
+SUCCESS = """{"status":1,"request":"e460545a8b333d0da2f3602aff3133d6"}"""
+
+
+class PushoverPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return PushoverPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "pushover"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("pushover", self.plugin)
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(self.project) is False
+        self.plugin.set_option("apikey", "abcdef", self.project)
+        assert self.plugin.is_configured(self.project) is False
+        self.plugin.set_option("userkey", "abcdef", self.project)
+        assert self.plugin.is_configured(self.project) is True
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add("POST", "https://api.pushover.net/1/messages.json", body=SUCCESS)
+        self.plugin.set_option("userkey", "abcdef", self.project)
+        self.plugin.set_option("apikey", "ghijkl", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = parse_qs(request.body)
+        assert payload == {
+            "message": ["{}\n\nTags: level=warning".format(event.get_legacy_message())],
+            "title": ["Bar: Hello world"],
+            "url": [
+                "http://example.com/organizations/baz/issues/{}/?referrer=pushover_plugin".format(
+                    group.id
+                )
+            ],
+            "url_title": ["Issue Details"],
+            "priority": ["0"],
+            "user": ["abcdef"],
+            "token": ["ghijkl"],
+            "expire": ["90"],
+            "retry": ["30"],
+        }
+
+    @responses.activate
+    def test_emergency_notification(self):
+        responses.add("POST", "https://api.pushover.net/1/messages.json", body=SUCCESS)
+        self.plugin.set_option("userkey", "abcdef", self.project)
+        self.plugin.set_option("apikey", "ghijkl", self.project)
+        self.plugin.set_option("priority", "2", self.project)
+        self.plugin.set_option("expire", 90, self.project)
+        self.plugin.set_option("retry", 30, self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = parse_qs(request.body)
+        assert payload == {
+            "message": ["{}\n\nTags: level=warning".format(event.get_legacy_message())],
+            "title": ["Bar: Hello world"],
+            "url": [
+                "http://example.com/organizations/baz/issues/{}/?referrer=pushover_plugin".format(
+                    group.id
+                )
+            ],
+            "url_title": ["Issue Details"],
+            "priority": ["2"],
+            "user": ["abcdef"],
+            "token": ["ghijkl"],
+            "expire": ["90"],
+            "retry": ["30"],
+        }
+
+    def test_no_secrets(self):
+        self.user = self.create_user("foo@example.com")
+        self.org = self.create_organization(owner=self.user, name="Rowdy Tiger")
+        self.team = self.create_team(organization=self.org, name="Mariachi Band")
+        self.project = self.create_project(organization=self.org, teams=[self.team], name="Bengal")
+        self.login_as(self.user)
+        self.plugin.set_option("userkey", "abcdef", self.project)
+        self.plugin.set_option("apikey", "abcdef", self.project)
+        url = reverse(
+            "sentry-api-0-project-plugin-details",
+            args=[self.org.slug, self.project.slug, "pushover"],
+        )
+        res = self.client.get(url)
+        config = json.loads(res.content)["config"]
+        userkey_config = [item for item in config if item["name"] == "userkey"][0]
+        apikey_config = [item for item in config if item["name"] == "apikey"][0]
+        assert userkey_config.get("type") == "secret"
+        assert userkey_config.get("value") is None
+        assert userkey_config.get("hasSavedValue") is True
+        assert userkey_config.get("prefix") == "abcd"
+        assert apikey_config.get("type") == "secret"
+        assert apikey_config.get("value") is None
+        assert apikey_config.get("hasSavedValue") is True
+        assert apikey_config.get("prefix") == "abcd"
diff --git a/tests/sentry_plugins/segment/__init__.py b/tests/sentry_plugins/segment/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/segment/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/segment/test_plugin.py b/tests/sentry_plugins/segment/test_plugin.py
new file mode 100644
index 0000000000..a3c22f4ef2
--- /dev/null
+++ b/tests/sentry_plugins/segment/test_plugin.py
@@ -0,0 +1,59 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.segment.plugin import SegmentPlugin
+
+
+class SegmentPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return SegmentPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "segment"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("segment", self.plugin)
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add(responses.POST, "https://api.segment.io/v1/track")
+
+        self.plugin.set_option("write_key", "secret-api-key", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(
+            group=group,
+            data={
+                "sentry.interfaces.Exception": {"type": "ValueError", "value": "foo bar"},
+                "sentry.interfaces.User": {"id": "1", "email": "foo@example.com"},
+                "type": "error",
+                "metadata": {"type": "ValueError", "value": "foo bar"},
+            },
+            tags={"level": "warning"},
+        )
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.post_process(event)
+
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert {
+            "userId": "1",
+            "event": "Error Captured",
+            "context": {"library": {"name": "sentry", "version": self.plugin.version}},
+            "properties": {
+                "environment": "",
+                "eventId": event.event_id,
+                "exceptionType": "ValueError",
+                "release": "",
+                "transaction": "",
+            },
+            "integration": {"name": "sentry", "version": self.plugin.version},
+            "timestamp": event.datetime.isoformat() + "Z",
+        } == payload
diff --git a/tests/sentry_plugins/sessionstack/__init__.py b/tests/sentry_plugins/sessionstack/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/sessionstack/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/sessionstack/test_plugin.py b/tests/sentry_plugins/sessionstack/test_plugin.py
new file mode 100644
index 0000000000..8d21347766
--- /dev/null
+++ b/tests/sentry_plugins/sessionstack/test_plugin.py
@@ -0,0 +1,78 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.testutils import PluginTestCase
+
+from new_sentry_plugins.sessionstack.plugin import SessionStackPlugin
+
+EXPECTED_SESSION_URL = (
+    "https://app.sessionstack.com/player/#/sessions/588778a6c5762c1d566653ff"
+    "?access_token=example-access-token"
+)
+
+ACCESS_TOKENS_URL = (
+    "https://api.sessionstack.com/v1/websites/0/sessions/" "588778a6c5762c1d566653ff/access_tokens"
+)
+
+
+class SessionStackPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return SessionStackPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "sessionstack"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("sessionstack", self.plugin)
+
+    @responses.activate
+    def test_config_validation(self):
+        responses.add(responses.GET, "https://api.sessionstack.com/v1/websites/0")
+
+        config = {
+            "account_email": "user@example.com",
+            "api_token": "example-api-token",
+            "website_id": 0,
+        }
+
+        self.plugin.validate_config(self.project, config)
+
+    @responses.activate
+    def test_event_preprocessing(self):
+        responses.add(
+            responses.GET,
+            ACCESS_TOKENS_URL,
+            json={"data": [{"name": "Sentry", "access_token": "example-access-token"}]},
+        )
+        responses.add(
+            responses.POST,
+            ACCESS_TOKENS_URL,
+            json={"data": [{"name": "Sentry", "access_token": "example-access-token"}]},
+        )
+
+        self.plugin.enable(self.project)
+        self.plugin.set_option("account_email", "user@example.com", self.project)
+        self.plugin.set_option("api_token", "example-api-token", self.project)
+        self.plugin.set_option("website_id", 0, self.project)
+
+        event = {
+            "project": self.project.id,
+            "contexts": {
+                "sessionstack": {"session_id": "588778a6c5762c1d566653ff", "type": "sessionstack"}
+            },
+            "platform": "javascript",
+        }
+
+        event_preprocessors = self.plugin.get_event_preprocessors(event)
+        add_sessionstack_context = event_preprocessors[0]
+
+        processed_event = add_sessionstack_context(event)
+
+        event_contexts = processed_event.get("contexts")
+        sessionstack_context = event_contexts.get("sessionstack")
+        session_url = sessionstack_context.get("session_url")
+
+        assert session_url == EXPECTED_SESSION_URL
diff --git a/tests/sentry_plugins/slack/__init__.py b/tests/sentry_plugins/slack/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/slack/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/slack/test_plugin.py b/tests/sentry_plugins/slack/test_plugin.py
new file mode 100644
index 0000000000..79d42985cb
--- /dev/null
+++ b/tests/sentry_plugins/slack/test_plugin.py
@@ -0,0 +1,122 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.models import Rule
+from sentry.plugins.base import Notification
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+from six.moves.urllib.parse import parse_qs
+
+from new_sentry_plugins.slack.plugin import SlackPlugin
+
+
+class SlackPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return SlackPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "slack"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("slack", self.plugin)
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add("POST", "http://example.com/slack")
+        self.plugin.set_option("webhook", "http://example.com/slack", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = json.loads(parse_qs(request.body)["payload"][0])
+        assert payload == {
+            "username": "Sentry",
+            "attachments": [
+                {
+                    "color": "#f18500",
+                    "fields": [
+                        {"short": False, "value": "foo.bar", "title": "Culprit"},
+                        {"short": True, "value": "bar", "title": "Project"},
+                    ],
+                    "fallback": "[bar] Hello world",
+                    "title": "Hello world",
+                    "title_link": "http://example.com/organizations/baz/issues/%s/?referrer=slack"
+                    % group.id,
+                }
+            ],
+        }
+
+    @responses.activate
+    def test_notification_without_culprit(self):
+        responses.add("POST", "http://example.com/slack")
+        self.plugin.set_option("webhook", "http://example.com/slack", self.project)
+        self.plugin.set_option("exclude_culprit", True, self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = json.loads(parse_qs(request.body)["payload"][0])
+        assert payload == {
+            "username": "Sentry",
+            "attachments": [
+                {
+                    "color": "#f18500",
+                    "fields": [{"short": True, "value": "bar", "title": "Project"}],
+                    "fallback": "[bar] Hello world",
+                    "title": "Hello world",
+                    "title_link": "http://example.com/organizations/baz/issues/%s/?referrer=slack"
+                    % group.id,
+                }
+            ],
+        }
+
+    @responses.activate
+    def test_notification_without_project(self):
+        responses.add("POST", "http://example.com/slack")
+        self.plugin.set_option("webhook", "http://example.com/slack", self.project)
+        self.plugin.set_option("exclude_project", True, self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = json.loads(parse_qs(request.body)["payload"][0])
+        assert payload == {
+            "username": "Sentry",
+            "attachments": [
+                {
+                    "color": "#f18500",
+                    "fields": [{"short": False, "value": "foo.bar", "title": "Culprit"}],
+                    "fallback": "[bar] Hello world",
+                    "title": "Hello world",
+                    "title_link": "http://example.com/organizations/baz/issues/%s/?referrer=slack"
+                    % group.id,
+                }
+            ],
+        }
diff --git a/tests/sentry_plugins/splunk/__init__.py b/tests/sentry_plugins/splunk/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/splunk/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/splunk/test_plugin.py b/tests/sentry_plugins/splunk/test_plugin.py
new file mode 100644
index 0000000000..36f684b0b0
--- /dev/null
+++ b/tests/sentry_plugins/splunk/test_plugin.py
@@ -0,0 +1,125 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.splunk.plugin import SplunkPlugin
+
+
+class SplunkPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return SplunkPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "splunk"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("splunk", self.plugin)
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add(responses.POST, "https://splunk.example.com:8088/services/collector")
+
+        self.plugin.set_option("token", "12345678-1234-1234-1234-1234567890AB", self.project)
+        self.plugin.set_option("index", "main", self.project)
+        self.plugin.set_option("instance", "https://splunk.example.com:8088", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(
+            group=group,
+            data={
+                "sentry.interfaces.Exception": {"type": "ValueError", "value": "foo bar"},
+                "sentry.interfaces.User": {"id": "1", "email": "foo@example.com"},
+                "type": "error",
+            },
+            tags={"level": "warning"},
+        )
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.post_process(event)
+
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert payload == {
+            "index": "main",
+            "source": "sentry",
+            "time": int(event.datetime.strftime("%s")),
+            "event": self.plugin.get_event_payload(event),
+        }
+        headers = request.headers
+        assert headers["Authorization"] == "Splunk 12345678-1234-1234-1234-1234567890AB"
+
+    def test_http_payload(self):
+        event = self.create_event(
+            group=self.group,
+            data={
+                "sentry.interfaces.Http": {
+                    "url": "http://example.com",
+                    "method": "POST",
+                    "headers": {"Referer": "http://example.com/foo"},
+                }
+            },
+        )
+
+        result = self.plugin.get_event_payload(event)
+        assert result["request_url"] == "http://example.com/"
+        assert result["request_method"] == "POST"
+        assert result["request_referer"] == "http://example.com/foo"
+
+    def test_error_payload(self):
+        event = self.create_event(
+            group=self.group,
+            data={
+                "sentry.interfaces.Exception": {
+                    "values": [{"type": "ValueError", "value": "foo bar"}]
+                },
+                "type": "error",
+            },
+        )
+
+        result = self.plugin.get_event_payload(event)
+        assert result["type"] == "error"
+        assert result["exception_type"] == "ValueError"
+        assert result["exception_value"] == "foo bar"
+
+    def test_csp_payload(self):
+        event = self.create_event(
+            group=self.group,
+            data={
+                "csp": {
+                    "document_uri": "http://example.com/",
+                    "violated_directive": "style-src cdn.example.com",
+                    "blocked_uri": "http://example.com/style.css",
+                    "effective_directive": "style-src",
+                },
+                "type": "csp",
+            },
+        )
+
+        result = self.plugin.get_event_payload(event)
+        assert result["type"] == "csp"
+        assert result["csp_document_uri"] == "http://example.com/"
+        assert result["csp_violated_directive"] == "style-src cdn.example.com"
+        assert result["csp_blocked_uri"] == "http://example.com/style.css"
+        assert result["csp_effective_directive"] == "style-src"
+
+    def test_user_payload(self):
+        event = self.create_event(
+            group=self.group,
+            data={
+                "sentry.interfaces.User": {
+                    "id": "1",
+                    "email": "foo@example.com",
+                    "ip_address": "127.0.0.1",
+                }
+            },
+        )
+
+        result = self.plugin.get_event_payload(event)
+        assert result["user_id"] == "1"
+        assert result["user_email_hash"] == "b48def645758b95537d4424c84d1a9ff"
+        assert result["user_ip_trunc"] == "127.0.0.0"
diff --git a/tests/sentry_plugins/test_anonymizeip.py b/tests/sentry_plugins/test_anonymizeip.py
new file mode 100644
index 0000000000..2d9f8e38cd
--- /dev/null
+++ b/tests/sentry_plugins/test_anonymizeip.py
@@ -0,0 +1,11 @@
+from __future__ import absolute_import
+
+from new_sentry_plugins.anonymizeip import anonymize_ip
+
+
+def test_ipv6():
+    assert anonymize_ip(u"5219:3a94:fdc5:19e1:70a3:b2c4:40ef:ae03") == u"5219:3a94:fdc5::"
+
+
+def test_ipv4():
+    assert anonymize_ip(u"192.168.128.193") == u"192.168.128.0"
diff --git a/tests/sentry_plugins/test_client.py b/tests/sentry_plugins/test_client.py
new file mode 100644
index 0000000000..a17ee294cf
--- /dev/null
+++ b/tests/sentry_plugins/test_client.py
@@ -0,0 +1,113 @@
+from __future__ import absolute_import
+
+import pytest
+import responses
+
+from mock import Mock
+from sentry.testutils import TestCase
+
+from new_sentry_plugins.exceptions import (
+    ApiError,
+    ApiHostError,
+    ApiUnauthorized,
+    UnsupportedResponseType,
+)
+from new_sentry_plugins.client import ApiClient, AuthApiClient
+
+
+class ApiClientTest(TestCase):
+    @responses.activate
+    def test_get(self):
+        responses.add(responses.GET, "http://example.com", json={})
+
+        resp = ApiClient().get("http://example.com")
+        assert resp.status_code == 200
+
+    @responses.activate
+    def test_post(self):
+        responses.add(responses.POST, "http://example.com", json={})
+
+        resp = ApiClient().post("http://example.com")
+        assert resp.status_code == 200
+
+    @responses.activate
+    def test_delete(self):
+        responses.add(responses.DELETE, "http://example.com", json={})
+
+        resp = ApiClient().delete("http://example.com")
+        assert resp.status_code == 200
+
+    @responses.activate
+    def test_put(self):
+        responses.add(responses.PUT, "http://example.com", json={})
+
+        resp = ApiClient().put("http://example.com")
+        assert resp.status_code == 200
+
+    @responses.activate
+    def test_patch(self):
+        responses.add(responses.PATCH, "http://example.com", json={})
+
+        resp = ApiClient().patch("http://example.com")
+        assert resp.status_code == 200
+
+
+class AuthApiClientTest(TestCase):
+    @responses.activate
+    def test_without_authorization(self):
+        responses.add(responses.GET, "http://example.com", json={})
+
+        resp = AuthApiClient().get("http://example.com")
+        assert resp.status_code == 200
+
+        request = responses.calls[-1].request
+        assert not request.headers.get("Authorization")
+
+    @responses.activate
+    def test_with_authorization(self):
+        responses.add(responses.GET, "http://example.com", json={})
+
+        auth = Mock()
+        auth.tokens = {"access_token": "access-token"}
+
+        resp = AuthApiClient(auth=auth).get("http://example.com")
+        assert resp.status_code == 200
+
+        request = responses.calls[-1].request
+        assert request.headers.get("Authorization") == "Bearer access-token"
+
+    @responses.activate
+    def test_with_authorization_and_no_auth(self):
+        responses.add(responses.GET, "http://example.com", json={})
+
+        auth = Mock()
+        auth.tokens = {"access_token": "access-token"}
+
+        resp = AuthApiClient(auth=auth).get("http://example.com", auth=None)
+        assert resp.status_code == 200
+
+        request = responses.calls[-1].request
+        assert not request.headers.get("Authorization")
+
+    @responses.activate
+    def test_invalid_host(self):
+        with pytest.raises(ApiHostError):
+            AuthApiClient().get("http://example.com")
+
+    @responses.activate
+    def test_unauthorized(self):
+        responses.add(responses.GET, "http://example.com", status=404)
+        with pytest.raises(ApiError):
+            AuthApiClient().get("http://example.com")
+
+    @responses.activate
+    def test_forbidden(self):
+        responses.add(responses.GET, "http://example.com", status=401)
+        with pytest.raises(ApiUnauthorized):
+            AuthApiClient().get("http://example.com")
+
+    @responses.activate
+    def test_invalid_plaintext(self):
+        responses.add(responses.GET, "http://example.com", body="")
+        with pytest.raises(UnsupportedResponseType):
+            AuthApiClient().get("http://example.com")
diff --git a/tests/sentry_plugins/victorops/__init__.py b/tests/sentry_plugins/victorops/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/victorops/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/victorops/test_plugin.py b/tests/sentry_plugins/victorops/test_plugin.py
new file mode 100644
index 0000000000..4d9980bf41
--- /dev/null
+++ b/tests/sentry_plugins/victorops/test_plugin.py
@@ -0,0 +1,89 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from sentry.models import Rule
+from sentry.plugins.base import Notification
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+
+from new_sentry_plugins.victorops.plugin import VictorOpsPlugin
+
+SUCCESS = """{
+  "result":"success",
+  "entity_id":"86dc4115-72d3-4219-9d8e-44939c1c409d"
+}"""
+
+
+class UnicodeTestInterface(object):
+    def __init__(self, title, body):
+        self.title = title
+        self.body = body
+
+    def to_string(self, event):
+        return self.body
+
+    def get_title(self):
+        return self.title
+
+
+class VictorOpsPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return VictorOpsPlugin()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "victorops"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("victorops", self.plugin)
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(self.project) is False
+        self.plugin.set_option("api_key", "abcdef", self.project)
+        assert self.plugin.is_configured(self.project) is True
+
+    @responses.activate
+    def test_simple_notification(self):
+        responses.add(
+            "POST",
+            "https://alert.victorops.com/integrations/generic/20131114/alert/secret-api-key/everyone",
+            body=SUCCESS,
+        )
+        self.plugin.set_option("api_key", "secret-api-key", self.project)
+        self.plugin.set_option("routing_key", "everyone", self.project)
+
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        event = self.create_event(group=group, message="Hello world", tags={"level": "warning"})
+
+        rule = Rule.objects.create(project=self.project, label="my rule")
+
+        notification = Notification(event=event, rule=rule)
+
+        with self.options({"system.url-prefix": "http://example.com"}):
+            self.plugin.notify(notification)
+
+        request = responses.calls[0].request
+        payload = json.loads(request.body)
+        assert {
+            "message_type": "WARNING",
+            "entity_id": group.id,
+            "entity_display_name": "Hello world",
+            "monitoring_tool": "sentry",
+            "state_message": 'Stacktrace\n-----------\n\nStacktrace (most recent call last):\n\n  File "sentry/models/foo.py", line 29, in build_msg\n    string_max_length=self.string_max_length)\n\nMessage\n-----------\n\nHello world',
+            "timestamp": int(event.datetime.strftime("%s")),
+            "issue_url": "http://example.com/organizations/baz/issues/%s/" % group.id,
+            "issue_id": group.id,
+            "project_id": group.project.id,
+        } == payload
+
+    def test_build_description_unicode(self):
+        group = self.create_group(message=u"Message", culprit=u"foo.bar")
+        event = self.create_event(group=group, message=u"Messages", tags={u"level": u"error"})
+        event.interfaces = {
+            u"Message": UnicodeTestInterface(u"abcd\xde\xb4", u"\xdc\xea\x80\x80abcd\xde\xb4")
+        }
+
+        description = self.plugin.build_description(event)
+        assert description == u"abcd\xde\xb4\n-----------\n\n\xdc\xea\x80\x80abcd\xde\xb4"
diff --git a/tests/sentry_plugins/vsts/__init__.py b/tests/sentry_plugins/vsts/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry_plugins/vsts/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry_plugins/vsts/fixtures/code-pushed-webhook.json b/tests/sentry_plugins/vsts/fixtures/code-pushed-webhook.json
new file mode 100644
index 0000000000..045408f595
--- /dev/null
+++ b/tests/sentry_plugins/vsts/fixtures/code-pushed-webhook.json
@@ -0,0 +1,76 @@
+{
+  "id": "03c164c2-8912-4d5e-8009-3707d5f83734",
+  "eventType": "git.push",
+  "publisherId": "tfs",
+  "scope": "all",
+  "message": {
+    "text": "Jamal Hartnett pushed updates to branch master of repository Fabrikam-Fiber-Git.",
+    "html": "Jamal Hartnett pushed updates to branch master of repository Fabrikam-Fiber-Git.",
+    "markdown": "Jamal Hartnett pushed updates to branch `master` of repository `Fabrikam-Fiber-Git`."
+  },
+  "detailedMessage": {
+    "text": "Jamal Hartnett pushed 1 commit to branch master of repository Fabrikam-Fiber-Git.\n - Fixed bug in web.config file 33b55f7c",
+    "html": "Jamal Hartnett pushed 1 commit to branch <a href=\"https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/#version=GBmaster\">master</a> of repository <a href=\"https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/\">Fabrikam-Fiber-Git</a>.\n<ul>\n<li>Fixed bug in web.config file <a href=\"https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/commit/33b55f7cb7e7e245323987634f960cf4a6e6bc74\">33b55f7c</a>\n</ul>",
+    "markdown": "Jamal Hartnett pushed 1 commit to branch [master](https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/#version=GBmaster) of repository [Fabrikam-Fiber-Git](https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/).\n* Fixed bug in web.config file [33b55f7c](https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/commit/33b55f7cb7e7e245323987634f960cf4a6e6bc74)"
+  },
+  "resource": {
+    "commits": [
+      {
+        "commitId": "33b55f7cb7e7e245323987634f960cf4a6e6bc74",
+        "author": {
+          "name": "Jamal Hartnett",
+          "email": "fabrikamfiber4@hotmail.com",
+          "date": "2015-02-25T19:01:00Z"
+        },
+        "committer": {
+          "name": "Jamal Hartnett",
+          "email": "fabrikamfiber4@hotmail.com",
+          "date": "2015-02-25T19:01:00Z"
+        },
+        "comment": "Fixed bug in web.config file",
+        "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git/commit/33b55f7cb7e7e245323987634f960cf4a6e6bc74"
+      }
+    ],
+    "refUpdates": [
+      {
+        "name": "refs/heads/master",
+        "oldObjectId": "aad331d8d3b131fa9ae03cf5e53965b51942618a",
+        "newObjectId": "33b55f7cb7e7e245323987634f960cf4a6e6bc74"
+      }
+    ],
+    "repository": {
+      "id": "278d5cd2-584d-4b63-824a-2ba458937249",
+      "name": "Fabrikam-Fiber-Git",
+      "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/278d5cd2-584d-4b63-824a-2ba458937249",
+      "project": {
+        "id": "6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c",
+        "name": "Fabrikam-Fiber-Git",
+        "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/projects/6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c",
+        "state": "wellFormed"
+      },
+      "defaultBranch": "refs/heads/master",
+      "remoteUrl": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_git/Fabrikam-Fiber-Git"
+    },
+    "pushedBy": {
+      "id": "00067FFED5C7AF52@Live.com",
+      "displayName": "Jamal Hartnett",
+      "uniqueName": "Windows Live ID\\fabrikamfiber4@hotmail.com"
+    },
+    "pushId": 14,
+    "date": "2014-05-02T19:17:13.3309587Z",
+    "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/git/repositories/278d5cd2-584d-4b63-824a-2ba458937249/pushes/14"
+  },
+  "resourceVersion": "1.0",
+  "resourceContainers": {
+    "collection": {
+      "id": "c12d0eb8-e382-443b-9f9c-c52cba5014c2"
+    },
+    "account": {
+      "id": "f844ec47-a9db-4511-8281-8b63f4eaf94e"
+    },
+    "project": {
+      "id": "be9b3917-87e6-42a4-a549-2bc06a7a878f"
+    }
+  },
+  "createdDate": "2016-09-19T13:03:27.0379153Z"
+}
diff --git a/tests/sentry_plugins/vsts/test_plugin.py b/tests/sentry_plugins/vsts/test_plugin.py
new file mode 100644
index 0000000000..dc3fdd3c12
--- /dev/null
+++ b/tests/sentry_plugins/vsts/test_plugin.py
@@ -0,0 +1,254 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from django.contrib.auth.models import AnonymousUser
+from django.test import RequestFactory
+from sentry.exceptions import PluginError
+from sentry.models import GroupMeta
+from sentry.testutils import PluginTestCase
+from sentry.utils import json
+from social_auth.models import UserSocialAuth
+
+from new_sentry_plugins.vsts.plugin import VstsPlugin
+
+WORK_ITEM_RESPONSE = """{
+  "id": 309,
+  "rev": 1,
+  "fields": {
+    "System.AreaPath": "Fabrikam-Fiber-Git",
+    "System.TeamProject": "Fabrikam-Fiber-Git",
+    "System.IterationPath": "Fabrikam-Fiber-Git",
+    "System.WorkItemType": "Product Backlog Item",
+    "System.State": "New",
+    "System.Reason": "New backlog item",
+    "System.CreatedDate": "2015-01-07T18:13:01.807Z",
+    "System.CreatedBy": "Jamal Hartnett <fabrikamfiber4@hotmail.com>",
+    "System.ChangedDate": "2015-01-07T18:13:01.807Z",
+    "System.ChangedBy": "Jamal Hartnett <fabrikamfiber4@hotmail.com>",
+    "System.Title": "Customer can sign in using their Microsoft Account",
+    "Microsoft.VSTS.Scheduling.Effort": 8,
+    "WEF_6CB513B6E70E43499D9FC94E5BBFB784_Kanban.Column": "New",
+    "System.Description": "Our authorization logic needs to allow for users with Microsoft accounts (formerly Live Ids) - http://msdn.microsoft.com/en-us/library/live/hh826547.aspx"
+  },
+  "_links": {
+    "self": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309"
+    },
+    "workItemUpdates": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/updates"
+    },
+    "workItemRevisions": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/revisions"
+    },
+    "workItemHistory": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309/history"
+    },
+    "html": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309"
+    },
+    "workItemType": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/6ce954b1-ce1f-45d1-b94d-e6bf2464ba2c/_apis/wit/workItemTypes/Product%20Backlog%20Item"
+    },
+    "fields": {
+      "href": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/fields"
+    }
+  },
+  "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workItems/309"
+}"""
+
+
+class VstsPluginTest(PluginTestCase):
+    @fixture
+    def plugin(self):
+        return VstsPlugin()
+
+    @fixture
+    def request(self):
+        return RequestFactory()
+
+    def test_conf_key(self):
+        assert self.plugin.conf_key == "vsts"
+
+    def test_entry_point(self):
+        self.assertPluginInstalled("vsts", self.plugin)
+
+    def test_get_issue_label(self):
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert self.plugin.get_issue_label(group, {"id": 309}) == "Bug 309"
+
+    def test_get_issue_url(self):
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        assert (
+            self.plugin.get_issue_url(
+                group,
+                {
+                    "id": 309,
+                    "url": "https://fabrikam-fiber-inc.visualstudio.com/DefaultProject/_workitems?id=309",
+                },
+            )
+            == "https://fabrikam-fiber-inc.visualstudio.com/DefaultProject/_workitems?id=309"
+        )
+
+    def test_is_configured(self):
+        assert self.plugin.is_configured(None, self.project) is False
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        assert self.plugin.is_configured(None, self.project) is True
+
+    @responses.activate
+    def test_create_issue(self):
+        responses.add(
+            responses.PATCH,
+            "https://fabrikam-fiber-inc.visualstudio.com/DefaultProject/_apis/wit/workitems/$Bug",
+            body=WORK_ITEM_RESPONSE,
+            content_type="application/json",
+        )
+
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        self.plugin.set_option("default_project", "DefaultProject", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"title": "Hello", "description": "Fix this."}
+        with self.assertRaises(PluginError):
+            self.plugin.create_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            uid="a89e7204-9ca0-4680-ba7a-cfcf6b3c7445",
+            extra_data={"access_token": "foo", "refresh_token": "bar"},
+        )
+
+        assert self.plugin.create_issue(request, group, form_data) == {
+            "id": 309,
+            "url": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309",
+            "title": "Hello",
+        }
+        request = responses.calls[-1].request
+        assert request.headers["Content-Type"] == "application/json-patch+json"
+        payload = json.loads(request.body)
+        assert payload == [
+            {"op": "add", "path": "/fields/System.Title", "value": "Hello"},
+            {"op": "add", "path": "/fields/System.History", "value": "<p>Fix this.</p>\n"},
+            # {
+            #     "op": "add",
+            #     "path": "/relations/-",
+            #     "value": {
+            #         "rel": "Hyperlink",
+            #         "url": 'http://testserver/baz/bar/issues/1/',
+            #     }
+            # }
+        ]
+
+    @responses.activate
+    def test_link_issue_without_comment(self):
+        responses.add(
+            responses.GET,
+            "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/309",
+            body=WORK_ITEM_RESPONSE,
+            content_type="application/json",
+        )
+
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"item_id": "309"}
+        with self.assertRaises(PluginError):
+            self.plugin.link_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            uid="a89e7204-9ca0-4680-ba7a-cfcf6b3c7445",
+            extra_data={"access_token": "foo", "refresh_token": "bar"},
+        )
+
+        assert self.plugin.link_issue(request, group, form_data) == {
+            "id": 309,
+            "title": "Customer can sign in using their Microsoft Account",
+            "url": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309",
+        }
+
+    @responses.activate
+    def test_link_issue_with_comment(self):
+        responses.add(
+            responses.PATCH,
+            "https://fabrikam-fiber-inc.visualstudio.com/DefaultCollection/_apis/wit/workitems/309",
+            body=WORK_ITEM_RESPONSE,
+            content_type="application/json",
+        )
+
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+
+        request = self.request.get("/")
+        request.user = AnonymousUser()
+        form_data = {"item_id": "309", "comment": "Fix this."}
+        with self.assertRaises(PluginError):
+            self.plugin.link_issue(request, group, form_data)
+
+        request.user = self.user
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            uid="a89e7204-9ca0-4680-ba7a-cfcf6b3c7445",
+            extra_data={"access_token": "foo", "refresh_token": "bar"},
+        )
+
+        assert self.plugin.link_issue(request, group, form_data) == {
+            "id": 309,
+            "title": "Customer can sign in using their Microsoft Account",
+            "url": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309",
+        }
+        request = responses.calls[-1].request
+        assert request.headers["Content-Type"] == "application/json-patch+json"
+        payload = json.loads(request.body)
+        assert payload == [
+            {"op": "add", "path": "/fields/System.History", "value": "<p>Fix this.</p>\n"},
+            # {
+            #     "op": "add",
+            #     "path": "/relations/-",
+            #     "value": {
+            #         "rel": "Hyperlink",
+            #         "url": 'http://testserver/baz/bar/issues/1/',
+            #     }
+            # }
+        ]
+
+    @responses.activate
+    def test_unlink_issue(self):
+        self.plugin.set_option("instance", "fabrikam-fiber-inc.visualstudio.com", self.project)
+        group = self.create_group(message="Hello world", culprit="foo.bar")
+        GroupMeta.objects.create(group=group, key="vsts:issue_id", value="309")
+
+        request = self.request.get("/")
+        request.user = self.user
+
+        self.login_as(self.user)
+        UserSocialAuth.objects.create(
+            user=self.user,
+            provider=self.plugin.auth_provider,
+            uid="a89e7204-9ca0-4680-ba7a-cfcf6b3c7445",
+            extra_data={"access_token": "foo", "refresh_token": "bar"},
+        )
+
+        assert self.plugin.unlink_issue(
+            request,
+            group,
+            {
+                "id": 309,
+                "title": "Customer can sign in using their Microsoft Account",
+                "url": "https://fabrikam-fiber-inc.visualstudio.com/web/wi.aspx?pcguid=d81542e4-cdfa-4333-b082-1ae2d6c3ad16&id=309",
+            },
+        )
diff --git a/tests/sentry_plugins/vsts/test_provider.py b/tests/sentry_plugins/vsts/test_provider.py
new file mode 100644
index 0000000000..ae4209fb4d
--- /dev/null
+++ b/tests/sentry_plugins/vsts/test_provider.py
@@ -0,0 +1,86 @@
+from __future__ import absolute_import
+
+import responses
+
+from exam import fixture
+from social_auth.models import UserSocialAuth
+from sentry.testutils import PluginTestCase
+from sentry.models import Repository
+
+from new_sentry_plugins.vsts.repository_provider import VisualStudioRepositoryProvider
+from new_sentry_plugins.vsts.testutils import COMPARE_COMMITS_EXAMPLE, FILE_CHANGES_EXAMPLE
+
+
+class VisualStudioRepositoryProviderPluginTest(PluginTestCase):
+    @fixture
+    def provider(self):
+        return VisualStudioRepositoryProvider("visualstudio")
+
+    @responses.activate
+    def test_compare_commits(self):
+
+        responses.add(
+            responses.POST,
+            "https://visualstudio.com/DefaultCollection/_apis/git/repositories/None/commitsBatch",
+            body=COMPARE_COMMITS_EXAMPLE,
+        )
+        responses.add(
+            responses.GET,
+            "https://visualstudio.com/DefaultCollection/_apis/git/repositories/None/commits/6c36052c58bde5e57040ebe6bdb9f6a52c906fff/changes",
+            body=FILE_CHANGES_EXAMPLE,
+        )
+
+        repo = Repository.objects.create(
+            provider="visualstudio",
+            name="example",
+            organization_id=1,
+            config={"instance": "visualstudio.com", "project": "project-name", "name": "example"},
+        )
+
+        user = self.create_user()
+
+        UserSocialAuth.objects.create(
+            user=user, provider="visualstudio", extra_data={"access_token": "abcdefg"}
+        )
+
+        res = self.provider.compare_commits(repo, "a", "b", user)
+
+        assert res == [
+            {
+                "patch_set": [{"path": u"/README.md", "type": "M"}],
+                "author_email": "max@sentry.io",
+                "author_name": "max bittker",
+                "message": "Updated README.md",
+                "id": "6c36052c58bde5e57040ebe6bdb9f6a52c906fff",
+                "repository": "example",
+            }
+        ]
+
+    @responses.activate
+    def test_create_repository(self):
+
+        user = self.create_user()
+        organization = self.create_organization()
+        UserSocialAuth.objects.create(
+            user=user, provider="visualstudio", extra_data={"access_token": "abcdefg"}
+        )
+
+        data = {
+            "name": "MyFirstProject",
+            "external_id": "654321",
+            "url": "https://mbittker.visualstudio.com/_git/MyFirstProject/",
+            "instance": "https://visualstudio.com",
+            "project": "MyFirstProject",
+        }
+        data = self.provider.create_repository(organization, data, user)
+
+        assert data == {
+            "name": "MyFirstProject",
+            "external_id": "654321",
+            "url": "https://mbittker.visualstudio.com/_git/MyFirstProject/",
+            "config": {
+                "project": "MyFirstProject",
+                "name": "MyFirstProject",
+                "instance": "https://visualstudio.com",
+            },
+        }
