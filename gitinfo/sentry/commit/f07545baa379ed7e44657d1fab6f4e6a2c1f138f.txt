commit f07545baa379ed7e44657d1fab6f4e6a2c1f138f
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Tue Dec 13 21:41:47 2016 +0100

    Added UI for processing issues in project settings

diff --git a/src/sentry/lang/native/symbolizer.py b/src/sentry/lang/native/symbolizer.py
index 27a6e33b08..7441770527 100644
--- a/src/sentry/lang/native/symbolizer.py
+++ b/src/sentry/lang/native/symbolizer.py
@@ -49,7 +49,8 @@ class SymbolicationFailed(Exception):
     @property
     def is_user_fixable(self):
         """These are errors that a user can fix themselves."""
-        return self.type in ('missing-dsym', 'bad-dsym')
+        return self.type in ('missing-dsym', 'bad-dsym',
+                             'missing-symbol')
 
     @property
     def is_sdk_failure(self):
@@ -172,9 +173,6 @@ class Symbolizer(object):
         if frame['object_addr'] not in self.symsynd_symbolizer.images:
             raise SymbolicationFailed(
                 type='missing-dsym',
-                message=(
-                    'Frame references a missing dSYM file.'
-                ),
                 image=img
             )
 
@@ -184,16 +182,13 @@ class Symbolizer(object):
         except SymbolicationError as e:
             raise SymbolicationFailed(
                 type='bad-dsym',
-                message='Symbolication failed due to bad dsym: %s' % e,
+                message=six.text_type(e),
                 image=img
             )
 
         if new_frame is None:
             raise SymbolicationFailed(
                 type='missing-symbol',
-                message=(
-                    'Upon symbolication a frame could not be resolved.'
-                ),
                 image=img
             )
 
@@ -206,17 +201,10 @@ class Symbolizer(object):
             # Simulator frames cannot be symbolicated
             if self._is_simulator_frame(frame, img):
                 type = 'simulator-frame'
-                message = 'Cannot symbolicate simulator system frames.'
             else:
                 type = 'missing-system-dsym'
-                message = (
-                    'Attempted to look up system in the system symbols but '
-                    'no symbol could be found.  This might happen with beta '
-                    'releases of SDKs.'
-                )
             raise SymbolicationFailed(
                 type=type,
-                message=message,
                 image=img
             )
 
@@ -229,11 +217,7 @@ class Symbolizer(object):
         img = self.images.get(frame['object_addr'])
         if img is None:
             raise SymbolicationFailed(
-                type='unknown-image',
-                message=(
-                    'The stacktrace referred to an object at an address '
-                    'that was not registered in the debug meta information.'
-                )
+                type='unknown-image'
             )
 
         # If we are dealing with a frame that is not bundled with the app
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index b3ce7a09f7..ae4fba96af 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -47,6 +47,7 @@ import ProjectInstallPlatform from './views/projectInstall/platform';
 import ProjectReleases from './views/projectReleases';
 import ProjectSavedSearches from './views/projectSavedSearches';
 import ProjectDebugSymbols from './views/projectDebugSymbols';
+import ProjectProcessingIssues from './views/projectProcessingIssues';
 import ProjectSettings from './views/projectSettings';
 import ProjectUserReports from './views/projectUserReports';
 import ProjectUserReportSettings from './views/projectUserReportSettings';
@@ -158,6 +159,7 @@ function routes() {
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
             <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
             <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
+            <Route path="processing-issues/" component={errorHandler(ProjectProcessingIssues)} />
             <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
             <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
             <Route path="install/" component={errorHandler(ProjectDocsContext)}>
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
new file mode 100644
index 0000000000..aad4e25598
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -0,0 +1,176 @@
+import React from 'react';
+
+import ApiMixin from '../mixins/apiMixin';
+import LoadingError from '../components/loadingError';
+import LoadingIndicator from '../components/loadingIndicator';
+import {t} from '../locale';
+
+const MESSAGES = {
+  'native:missing-dsym': t('Missing dSYM file'),
+  'native:bad-dsym': t('Bad dSYM file'),
+  'native:missing-symbol': t('Missing symbol in dSYM file'),
+};
+
+const HELP_LINKS = {
+  'native:missing-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
+  'native:bad-dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
+};
+
+
+const ProjectProcessingIssues = React.createClass({
+  mixins: [ApiMixin],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      processingIssues: null,
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let {orgId, projectId} = this.props.params;
+    this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
+      success: (data, _, jqXHR) => {
+        this.setState({
+          error: false,
+          loading: false,
+          processingIssues: data,
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false
+        });
+      }
+    });
+  },
+
+  renderDebugTable() {
+    let body;
+
+    if (this.state.loading)
+      body = this.renderLoading();
+    else if (this.state.error)
+      body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.processingIssues.hasIssues)
+      body = this.renderResults();
+    else
+      body = this.renderEmpty();
+
+    return body;
+  },
+
+  renderLoading() {
+    return (
+      <div className="box">
+        <LoadingIndicator />
+      </div>
+    );
+  },
+
+  renderEmpty() {
+    return (
+      <div className="box empty-stream">
+        <span className="icon icon-exclamation" />
+        <p>{t('Good news! There are no processing issues.')}</p>
+      </div>
+    );
+  },
+
+  getProblemDescription(item) {
+    let msg = MESSAGES[item.type + ':' + item.data.type];
+    return msg || item.message || 'Unknown Error';
+  },
+
+  getImageName(path) {
+    let match = path.match(/\/Frameworks\/(.*?)(\/|$)/);
+    if (match) {
+      return match[1];
+    }
+    let pathSegments = path.split(/\//g);
+    return pathSegments[pathSegments.length - 1];
+  },
+
+  renderProblem(item) {
+    let description = this.getProblemDescription(item);
+    let helpLink = HELP_LINKS[item.type + ':' + item.data.type];
+    return (
+      <div className="processing-issue">
+        <span className="description">{description}</span>
+        {helpLink &&
+          <a href={helpLink} className="help-link"><span className="icon-question" /></a>}
+      </div>
+    );
+  },
+
+  renderLocation(item) {
+    let dsymUUID = null;
+    let dsymName = null;
+
+    if (item.type === 'native') {
+      if (item.data.image_uuid) {
+        dsymUUID = <code className="uuid">{item.data.image_uuid}</code>;
+      }
+      if (item.data.image_path) {
+        dsymName = <em>{this.getImageName(item.data.image_path)}</em>;
+      }
+    }
+
+    return (
+      <span>
+        {dsymUUID && <span> {dsymUUID}</span>}
+        {dsymName && <span> (for {dsymName})</span>}
+      </span>
+    );
+  },
+
+  renderResults() {
+    return (
+      <table className="table processing-issues">
+        <thead>
+          <tr>
+            <th>{t('Problem')}</th>
+            <th>{t('Location')}</th>
+            <th>{t('Issues')}</th>
+          </tr>
+        </thead>
+        <tbody>
+          {this.state.processingIssues.issues.map((item, idx) => {
+            return (
+              <tr key={idx}>
+                <td>{this.renderProblem(item)}</td>
+                <td>{this.renderLocation(item)}</td>
+                <td>{item.affectedGroups + ''}</td>
+              </tr>
+            );
+          })}
+        </tbody>
+      </table>
+    );
+  },
+
+  render() {
+    return (
+      <div>
+        <h1>{t('Processing Issues')}</h1>
+        <p>{t(`
+          For some platforms the event processing requires configuration or
+          manual action.  If a misconfiguration happens or some necessary
+          steps are skipped issues can occur during processing.  In these
+          cases you can see all the problems here with guides of how to correct
+          them.
+        `)}</p>
+        {this.renderDebugTable()}
+      </div>
+    );
+  }
+});
+
+export default ProjectProcessingIssues;
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index b037c438fb..ea49ee1149 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -95,6 +95,7 @@ const ProjectSettings = React.createClass({
             <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
             <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>{t('Saved Searches')}</ListLink>
             <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>{t('Debug Symbols')}</ListLink>
+            <ListLink to={`/${orgId}/${projectId}/settings/processing-issues/`}>{t('Processing Issues')}</ListLink>
           </ul>
           <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
diff --git a/src/sentry/static/sentry/less/project-settings.less b/src/sentry/static/sentry/less/project-settings.less
index ea173dc510..cff5074850 100644
--- a/src/sentry/static/sentry/less/project-settings.less
+++ b/src/sentry/static/sentry/less/project-settings.less
@@ -227,3 +227,21 @@
       opacity: 0.5;
     }
   }
+
+/**
+ * Processing Issues
+ * ============================================================================
+ */
+table.processing-issues {
+  tbody tr td {
+    padding: 7px 20px;
+  }
+  a.help-link {
+    margin-left: 6px;
+  }
+  code.uuid {
+    font-size: 12px;
+    font-weight: bold;
+    border-radius: 2px;
+  }
+}
diff --git a/src/sentry/templates/sentry/projects/manage.html b/src/sentry/templates/sentry/projects/manage.html
index 3f43cf68ca..0d42c2dbac 100644
--- a/src/sentry/templates/sentry/projects/manage.html
+++ b/src/sentry/templates/sentry/projects/manage.html
@@ -202,6 +202,9 @@
     <li>
         <a href="{% absolute_uri '/{}/{}/settings/debug-symbols/' project.organization.slug project.slug %}">{% trans "Debug Symbols" %}</a>
     </li>
+    <li>
+        <a href="{% absolute_uri '/{}/{}/settings/processing-issues/' project.organization.slug project.slug %}">{% trans "Processing Issues" %}</a>
+    </li>
   </ul>
   <h6 class="nav-header">{% trans "Data" %}</h6>
   <ul class="nav nav-stacked">
