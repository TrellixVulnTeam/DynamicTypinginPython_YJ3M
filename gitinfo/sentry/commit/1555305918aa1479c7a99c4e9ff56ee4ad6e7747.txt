commit 1555305918aa1479c7a99c4e9ff56ee4ad6e7747
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Fri Mar 13 16:48:20 2020 -0700

    chore(ts): Correct typings on ConfigStore (#17661)

diff --git a/src/sentry/static/sentry/app/components/dateTime.tsx b/src/sentry/static/sentry/app/components/dateTime.tsx
index 6808c1f536..07c82c63cf 100644
--- a/src/sentry/static/sentry/app/components/dateTime.tsx
+++ b/src/sentry/static/sentry/app/components/dateTime.tsx
@@ -71,14 +71,14 @@ class DateTime extends React.Component<Props> {
       ...carriedProps
     } = this.props;
     const user = ConfigStore.get('user');
-    const options = user ? user.options : {};
+    const options = user?.options;
     const format = this.getFormat(options);
 
     return (
       <time {...carriedProps}>
         {utc
           ? moment.utc(date).format(format)
-          : moment.tz(date, options.timezone).format(format)}
+          : moment.tz(date, options?.timezone ?? '').format(format)}
       </time>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/timeSince.tsx b/src/sentry/static/sentry/app/components/timeSince.tsx
index 3db2b3f382..3290a3f27f 100644
--- a/src/sentry/static/sentry/app/components/timeSince.tsx
+++ b/src/sentry/static/sentry/app/components/timeSince.tsx
@@ -80,13 +80,13 @@ class TimeSince extends React.PureComponent<Props, State> {
     const {date, suffix: _suffix, className, ...props} = this.props;
     const dateObj = getDateObj(date);
     const user = ConfigStore.get('user');
-    const options = user ? user.options : {};
-    const format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
+    const options = user ? user.options : null;
+    const format = options?.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : 'LLL z';
 
     return (
       <time
         dateTime={dateObj.toISOString()}
-        title={moment.tz(dateObj, options.timezone).format(format)}
+        title={moment.tz(dateObj, options?.timezone ?? '').format(format)}
         className={className}
         {...props}
       >
diff --git a/src/sentry/static/sentry/app/stores/configStore.tsx b/src/sentry/static/sentry/app/stores/configStore.tsx
index fd0a2873e5..19d0aabfbb 100644
--- a/src/sentry/static/sentry/app/stores/configStore.tsx
+++ b/src/sentry/static/sentry/app/stores/configStore.tsx
@@ -5,23 +5,34 @@ import qs from 'query-string';
 import {setLocale} from 'app/locale';
 import {Config} from 'app/types';
 
-const ConfigStore = Reflux.createStore({
+type ConfigStoreInterface = {
+  config: Config;
+
+  get<K extends keyof Config>(key: K): Config[K];
+  set<K extends keyof Config>(key: K, value: Config[K]): void;
+  getConfig(): Config;
+  loadInitialData(config: Config): void;
+};
+
+const configStoreConfig: Reflux.StoreDefinition & ConfigStoreInterface = {
+  // When the app is booted we will _immediately_ hydrate the config store,
+  // effecively ensureing this is not empty.
+  config: {} as Config,
+
   init(): void {
-    this.config = {};
+    this.config = {} as Config;
   },
 
-  get(key: string): any {
+  get(key) {
     return this.config[key];
   },
 
-  set(key: string, value: any): void {
+  set(key, value) {
     this.config[key] = value;
-    const out = {};
-    out[key] = value;
-    this.trigger(out);
+    this.trigger({[key]: value});
   },
 
-  getConfig(): Config {
+  getConfig() {
     return this.config;
   },
 
@@ -63,7 +74,8 @@ const ConfigStore = Reflux.createStore({
 
     this.trigger(config);
   },
-});
+};
+
+type ConfigStore = Reflux.Store & ConfigStoreInterface;
 
-// TODO(ts): This should be properly typed
-export default ConfigStore as any;
+export default Reflux.createStore(configStoreConfig) as ConfigStore;
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index b1924c3fa2..5b944474f3 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -457,7 +457,7 @@ export type Config = {
   invitesEnabled: boolean;
   privacyUrl: string | null;
   isOnPremise: boolean;
-  lastOrganization: string;
+  lastOrganization: string | null;
   gravatarBaseUrl: string;
   messages: string[];
   dsn: string;
@@ -470,7 +470,10 @@ export type Config = {
     upgradeAvailable: boolean;
     latest: string;
   };
-  statuspage: string | null;
+  statuspage?: {
+    id: string;
+    api_host: string;
+  };
   sentryConfig: {
     dsn: string;
     release: string;
