commit c74a184787d6507b69094a8fffad7cfa4285e752
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Oct 9 14:35:04 2017 -0500

    ref: Extract EventTag interactions out to TagStorage abstraction (#6287)

diff --git a/src/sentry/tagstore/base.py b/src/sentry/tagstore/base.py
index 5f6a76c66a..7cbfb41c6c 100644
--- a/src/sentry/tagstore/base.py
+++ b/src/sentry/tagstore/base.py
@@ -44,6 +44,7 @@ class TagStorage(Service):
         'get_or_create_group_tag_key',
         'create_group_tag_value',
         'get_or_create_group_tag_value',
+        'create_event_tag',
 
         'get_tag_key',
         'get_tag_keys',
@@ -75,6 +76,7 @@ class TagStorage(Service):
         'get_group_ids_for_users',
         'get_group_tag_values_for_users',
         'get_tags_for_search_filter',
+        'get_event_tag_qs',
     )
 
     def is_valid_key(self, key):
@@ -146,6 +148,12 @@ class TagStorage(Service):
         """
         raise NotImplementedError
 
+    def create_event_tag(self, project_id, group_id, event_id, key_id, value_id):
+        """
+        >>> create_event_tag(1, 2, 3, 4, 5)
+        """
+        raise NotImplementedError
+
     def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
         """
         >>> get_tag_key(1, "key1")
@@ -317,3 +325,9 @@ class TagStorage(Service):
         >>> get_tags_for_search_filter(1, [('key1', 'value1'), ('key2', 'value2')])
         """
         raise NotImplementedError
+
+    def get_event_tag_qs(self, **kwargs):
+        """
+        >>> get_event_tag_qs(event_id=1, key_id=2)
+        """
+        raise NotImplementedError
diff --git a/src/sentry/tagstore/legacy/backend.py b/src/sentry/tagstore/legacy/backend.py
index 4fb691db53..a5310ea525 100644
--- a/src/sentry/tagstore/legacy/backend.py
+++ b/src/sentry/tagstore/legacy/backend.py
@@ -12,7 +12,7 @@ import six
 
 from collections import defaultdict, Iterable
 from datetime import timedelta
-from django.db import connections, router
+from django.db import connections, router, IntegrityError, transaction
 from django.db.models import Q, Sum
 from django.utils import timezone
 from operator import or_
@@ -57,6 +57,20 @@ class LegacyTagStorage(TagStorage):
         return GroupTagValue.objects.get_or_create(
             project_id=project_id, group_id=group_id, key=key, value=value, **kwargs)
 
+    def create_event_tag(self, project_id, group_id, event_id, key_id, value_id):
+        try:
+            # don't let a duplicate break the outer transaction
+            with transaction.atomic():
+                EventTag.objects.create(
+                    project_id=project_id,
+                    group_id=group_id,
+                    event_id=event_id,
+                    key_id=key_id,
+                    value_id=value_id,
+                )
+        except IntegrityError:
+            pass
+
     def get_tag_key(self, project_id, key, status=TagKeyStatus.VISIBLE):
         from sentry.tagstore.exceptions import TagKeyNotFound
 
@@ -490,3 +504,6 @@ class LegacyTagStorage(TagStorage):
                 return None
 
         return matches
+
+    def get_event_tag_qs(self, **kwargs):
+        return EventTag.objects.filter(**kwargs)
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index 405eb75ebe..832b65049c 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -11,7 +11,6 @@ from __future__ import absolute_import, print_function
 import logging
 import six
 
-from django.db import IntegrityError, transaction
 from raven.contrib.django.models import client as Raven
 
 from sentry.plugins import plugins
@@ -139,7 +138,6 @@ def plugin_post_process_group(plugin_slug, event, **kwargs):
 )
 def index_event_tags(organization_id, project_id, event_id, tags, group_id=None, **kwargs):
     from sentry import tagstore
-    from sentry.models import EventTag
 
     Raven.tags_context({
         'project': project_id,
@@ -149,15 +147,10 @@ def index_event_tags(organization_id, project_id, event_id, tags, group_id=None,
         tagkey, _ = tagstore.get_or_create_tag_key(project_id, key)
         tagvalue, _ = tagstore.get_or_create_tag_value(project_id, key, value)
 
-        try:
-            # handle replaying of this task
-            with transaction.atomic():
-                EventTag.objects.create(
-                    project_id=project_id,
-                    group_id=group_id,
-                    event_id=event_id,
-                    key_id=tagkey.id,
-                    value_id=tagvalue.id,
-                )
-        except IntegrityError:
-            pass
+        tagstore.create_event_tag(
+            project_id=project_id,
+            group_id=group_id,
+            event_id=event_id,
+            key_id=tagkey.id,
+            value_id=tagvalue.id,
+        )
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index fcf142530b..06809d5b60 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -13,7 +13,7 @@ from sentry.event_manager import (
     ScoreClause, generate_culprit, get_hashes_for_event, md5_from_hash
 )
 from sentry.models import (
-    Activity, Environment, Event, EventMapping, EventTag, EventUser, Group, GroupHash, GroupRelease,
+    Activity, Environment, Event, EventMapping, EventUser, Group, GroupHash, GroupRelease,
     GroupTagValue, Project, Release, UserReport
 )
 from sentry.similarity import features
@@ -217,7 +217,7 @@ def migrate_events(caches, project, source_id, destination_id, fingerprints, eve
     for event in events:
         event.group = destination
 
-    EventTag.objects.filter(
+    tagstore.get_event_tag_qs(
         project_id=project.id,
         event_id__in=event_id_set,
     ).update(group_id=destination_id)
diff --git a/tests/sentry/api/endpoints/test_group_events.py b/tests/sentry/api/endpoints/test_group_events.py
index 4575d617d8..46f855bc3e 100644
--- a/tests/sentry/api/endpoints/test_group_events.py
+++ b/tests/sentry/api/endpoints/test_group_events.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 import six
 
 from sentry import tagstore
-from sentry.models import EventTag
 from sentry.testutils import APITestCase
 
 
@@ -40,21 +39,21 @@ class GroupEventsTest(APITestCase):
         tagvalue_2 = tagstore.create_tag_value(project_id=group.project_id, key='bar', value='biz')
         tagvalue_3 = tagstore.create_tag_value(project_id=group.project_id, key='bar', value='buz')
 
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             project_id=group.project_id,
             group_id=group.id,
             event_id=event_1.id,
             key_id=tagkey_1.id,
             value_id=tagvalue_1.id,
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             project_id=group.project_id,
             group_id=group.id,
             event_id=event_2.id,
             key_id=tagkey_2.id,
             value_id=tagvalue_2.id,
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             project_id=group.project_id,
             group_id=group.id,
             event_id=event_1.id,
diff --git a/tests/sentry/deletions/test_group.py b/tests/sentry/deletions/test_group.py
index 89ec897360..a554e50360 100644
--- a/tests/sentry/deletions/test_group.py
+++ b/tests/sentry/deletions/test_group.py
@@ -2,8 +2,9 @@ from __future__ import absolute_import
 
 from uuid import uuid4
 
+from sentry import tagstore
 from sentry.models import (
-    Event, EventMapping, EventTag, Group, GroupAssignee, GroupHash, GroupMeta, GroupRedirect,
+    Event, EventMapping, Group, GroupAssignee, GroupHash, GroupMeta, GroupRedirect,
     ScheduledDeletion
 )
 from sentry.tasks.deletion import run_deletion
@@ -22,8 +23,9 @@ class DeleteGroupTest(TestCase):
             event_id='a' * 32,
             group_id=group.id,
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             event_id=event.id,
+            group_id=group.id,
             project_id=project.id,
             key_id=1,
             value_id=1,
@@ -59,7 +61,7 @@ class DeleteGroupTest(TestCase):
             event_id='a' * 32,
             group_id=group.id,
         ).exists()
-        assert not EventTag.objects.filter(event_id=event.id).exists()
+        assert not tagstore.get_event_tag_qs(event_id=event.id).exists()
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
         assert not GroupHash.objects.filter(group_id=group.id).exists()
         assert not Group.objects.filter(id=group.id).exists()
diff --git a/tests/sentry/deletions/test_tagkey.py b/tests/sentry/deletions/test_tagkey.py
index e7b2d48584..3294a2927f 100644
--- a/tests/sentry/deletions/test_tagkey.py
+++ b/tests/sentry/deletions/test_tagkey.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry import tagstore
-from sentry.models import EventTag, ScheduledDeletion
+from sentry.models import ScheduledDeletion
 from sentry.tasks.deletion import run_deletion
 from sentry.testutils import TestCase
 
@@ -19,7 +19,7 @@ class DeleteTagKeyTest(TestCase):
         tagstore.create_group_tag_value(
             key=key, value=value, group_id=group.id, project_id=project.id
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             key_id=tk.id,
             group_id=group.id,
             value_id=1,
@@ -34,7 +34,7 @@ class DeleteTagKeyTest(TestCase):
         tagstore.create_group_tag_value(
             key=key, value=value, group_id=group2.id, project_id=project2.id
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             key_id=tk2.id,
             group_id=group2.id,
             value_id=1,
@@ -68,9 +68,9 @@ class DeleteTagKeyTest(TestCase):
             assert False  # verify exception thrown
         except tagstore.TagKeyNotFound:
             pass
-        assert not EventTag.objects.filter(key_id=tk.id).exists()
+        assert not tagstore.get_event_tag_qs(key_id=tk.id).exists()
 
         assert tagstore.get_tag_key(project2.id, key) is not None
         assert tagstore.get_group_tag_key(group2.id, key) is not None
         assert tagstore.get_group_tag_value(group2.id, key, value) is not None
-        assert EventTag.objects.filter(key_id=tk2.id).exists()
+        assert tagstore.get_event_tag_qs(key_id=tk2.id).exists()
diff --git a/tests/sentry/tasks/post_process/tests.py b/tests/sentry/tasks/post_process/tests.py
index 9d7f8a0947..13b95a6cee 100644
--- a/tests/sentry/tasks/post_process/tests.py
+++ b/tests/sentry/tasks/post_process/tests.py
@@ -7,7 +7,7 @@ from django.utils import timezone
 from mock import Mock, patch
 
 from sentry import tagstore
-from sentry.models import EventTag, Group, GroupSnooze, GroupStatus
+from sentry.models import Group, GroupSnooze, GroupStatus
 from sentry.testutils import TestCase
 from sentry.tasks.merge import merge_group
 from sentry.tasks.post_process import index_event_tags, post_process_group
@@ -124,7 +124,7 @@ class IndexEventTagsTest(TestCase):
                 tags=[('foo', 'bar'), ('biz', 'baz')],
             )
 
-        tags = list(EventTag.objects.filter(
+        tags = list(tagstore.get_event_tag_qs(
             event_id=event.id,
         ).values_list('key_id', 'value_id'))
         assert len(tags) == 2
@@ -161,7 +161,7 @@ class IndexEventTagsTest(TestCase):
                 tags=[('foo', 'bar'), ('biz', 'baz')],
             )
 
-        queryset = EventTag.objects.filter(
+        queryset = tagstore.get_event_tag_qs(
             event_id=event.id,
         )
         assert queryset.count() == 2
diff --git a/tests/sentry/tasks/test_deletion.py b/tests/sentry/tasks/test_deletion.py
index e00866afa6..ecb8abc1b2 100644
--- a/tests/sentry/tasks/test_deletion.py
+++ b/tests/sentry/tasks/test_deletion.py
@@ -11,7 +11,7 @@ from sentry.constants import ObjectStatus
 from sentry.exceptions import DeleteAborted
 from sentry.models import (
     ApiApplication, ApiApplicationStatus, ApiGrant, ApiToken, Commit, CommitAuthor, Environment,
-    EnvironmentProject, Event, EventMapping, EventTag, Group, GroupAssignee, GroupHash, GroupMeta,
+    EnvironmentProject, Event, EventMapping, Group, GroupAssignee, GroupHash, GroupMeta,
     GroupRedirect, GroupResolution, GroupStatus, Organization, OrganizationStatus, Project,
     ProjectStatus, Release, ReleaseCommit, ReleaseEnvironment, Repository, Team, TeamStatus
 )
@@ -195,7 +195,7 @@ class DeleteTagKeyTest(TestCase):
         tagstore.create_group_tag_value(
             key=key, value=value, group_id=group.id, project_id=project.id
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             key_id=tk.id,
             group_id=group.id,
             value_id=1,
@@ -210,7 +210,7 @@ class DeleteTagKeyTest(TestCase):
         tagstore.create_group_tag_value(
             key=key, value=value, group_id=group2.id, project_id=project2.id
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             key_id=tk2.id,
             group_id=group2.id,
             value_id=1,
@@ -236,7 +236,7 @@ class DeleteTagKeyTest(TestCase):
                 assert False  # verify exception thrown
             except tagstore.TagValueNotFound:
                 pass
-            assert not EventTag.objects.filter(key_id=tk.id).exists()
+            assert not tagstore.get_event_tag_qs(key_id=tk.id).exists()
             try:
                 tagstore.get_tag_key(project.id, key)
                 assert False  # verify exception thrown
@@ -246,7 +246,7 @@ class DeleteTagKeyTest(TestCase):
         assert tagstore.get_tag_key(project2.id, key) is not None
         assert tagstore.get_group_tag_key(group2.id, key) is not None
         assert tagstore.get_group_tag_value(group2.id, key, value) is not None
-        assert EventTag.objects.filter(key_id=tk2.id).exists()
+        assert tagstore.get_event_tag_qs(key_id=tk2.id).exists()
 
 
 class DeleteGroupTest(TestCase):
@@ -262,8 +262,9 @@ class DeleteGroupTest(TestCase):
             event_id='a' * 32,
             group_id=group.id,
         )
-        EventTag.objects.create(
+        tagstore.create_event_tag(
             event_id=event.id,
+            group_id=group.id,
             project_id=project.id,
             key_id=1,
             value_id=1,
@@ -296,7 +297,7 @@ class DeleteGroupTest(TestCase):
             event_id='a' * 32,
             group_id=group.id,
         ).exists()
-        assert not EventTag.objects.filter(event_id=event.id).exists()
+        assert not tagstore.get_event_tag_qs(event_id=event.id).exists()
         assert not GroupRedirect.objects.filter(group_id=group.id).exists()
         assert not GroupHash.objects.filter(group_id=group.id).exists()
         assert not Group.objects.filter(id=group.id).exists()
