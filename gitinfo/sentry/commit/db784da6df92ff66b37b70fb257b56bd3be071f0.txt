commit db784da6df92ff66b37b70fb257b56bd3be071f0
Author: Mark Story <mark@sentry.io>
Date:   Thu Apr 2 15:40:50 2020 -0400

    fix(heroku) Fix KeyError when trying to read user data (#18046)
    
    In addition to not failing on the `user` key missing add fallbacks
    for actor.email as that comes in a lot of our hook events.
    
    Fixes SENTRY-BRW

diff --git a/src/sentry_plugins/heroku/plugin.py b/src/sentry_plugins/heroku/plugin.py
index ce7701490c..9e9deb7f9a 100644
--- a/src/sentry_plugins/heroku/plugin.py
+++ b/src/sentry_plugins/heroku/plugin.py
@@ -17,7 +17,11 @@ logger = logging.getLogger("sentry.plugins.heroku")
 
 class HerokuReleaseHook(ReleaseHook):
     def handle(self, request):
-        email = request.POST["user"]
+        email = None
+        if "user" in request.POST:
+            email = request.POST["user"]
+        elif "actor" in request.POST:
+            email = request.POST["actor"].get("email")
         try:
             user = User.objects.get(
                 email__iexact=email, sentry_orgmember_set__organization__project=self.project
diff --git a/tests/sentry_plugins/heroku/test_plugin.py b/tests/sentry_plugins/heroku/test_plugin.py
index e91310c3ec..1f56c24694 100644
--- a/tests/sentry_plugins/heroku/test_plugin.py
+++ b/tests/sentry_plugins/heroku/test_plugin.py
@@ -127,6 +127,47 @@ class SetRefsTest(TestCase):
 
 
 class HookHandleTest(TestCase):
+    def test_user_success(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=user)
+        project = self.create_project(organization=organization)
+        hook = HerokuReleaseHook(project)
+        hook.set_refs = Mock()
+
+        req = Mock()
+        req.POST = {"head_long": "abcd123", "url": "http://example.com", "user": user.email}
+        hook.handle(req)
+        assert Release.objects.filter(version=req.POST["head_long"]).exists()
+        assert hook.set_refs.call_count == 1
+
+    def test_actor_email_success(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=user)
+        project = self.create_project(organization=organization)
+        hook = HerokuReleaseHook(project)
+        hook.set_refs = Mock()
+
+        req = Mock()
+        req.POST = {
+            "head_long": "v999",
+            "url": "http://example.com",
+            "actor": {"email": user.email},
+        }
+        hook.handle(req)
+        assert Release.objects.filter(version=req.POST["head_long"]).exists()
+        assert hook.set_refs.call_count == 1
+
+    def test_email_mismatch(self):
+        user = self.create_user()
+        organization = self.create_organization(owner=user)
+        project = self.create_project(organization=organization)
+        hook = HerokuReleaseHook(project)
+
+        req = Mock()
+        req.POST = {"head_long": "v999", "url": "http://example.com", "user": "wrong@example.com"}
+        hook.handle(req)
+        assert Release.objects.filter(version=req.POST["head_long"]).exists()
+
     def test_bad_version(self):
         project = self.create_project()
         user = self.create_user()
