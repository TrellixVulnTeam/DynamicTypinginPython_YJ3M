commit 8d0505ac3b8d9bae5bb87dadb25378cbf3afefab
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jun 3 15:42:42 2015 +0100

    Remove usage of AccessGroup

diff --git a/CHANGES b/CHANGES
index ffb436cebe..c70d910290 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,7 +1,10 @@
 Version 7.6.0
 -------------
 
+This releases entirely removes Access Groups. If you're upgrading form an installation that had yet to migrate away from this system you should first upgrade to a previous version, run the migration wizard, and then continue the upgrade.
+
 - The project-wide Alert system has been removed (to be re-implemented in the future).
+- Access groups have been permanently removed.
 
 Version 7.5.3
 -------------
diff --git a/bin/load-mocks b/bin/load-mocks
index adb55c7bb0..de2fdbd2d0 100755
--- a/bin/load-mocks
+++ b/bin/load-mocks
@@ -9,7 +9,7 @@ from random import randint
 
 from sentry.app import tsdb
 from sentry.models import (
-    AccessGroup, Activity, User, Organization, OrganizationAccessRequest,
+    Activity, User, Organization, OrganizationAccessRequest,
     OrganizationMember, Project, Team
 )
 from sentry.utils.samples import create_sample_event
@@ -131,13 +131,6 @@ def main():
 
             event3 = create_sample_event(project, 'java')
 
-        accessgroup, _ = AccessGroup.objects.get_or_create(
-            name='Example',
-            team=team,
-        )
-        accessgroup.projects.add(project)
-        accessgroup.members.add(dummy_user)
-
         OrganizationAccessRequest.objects.create_or_update(
             member=dummy_member,
             team=team,
diff --git a/src/sentry/api/serializers/models/access_group.py b/src/sentry/api/serializers/models/access_group.py
deleted file mode 100644
index 0a60f7fbfd..0000000000
--- a/src/sentry/api/serializers/models/access_group.py
+++ /dev/null
@@ -1,17 +0,0 @@
-from __future__ import absolute_import
-
-from sentry.api.serializers import Serializer, register
-from sentry.models import AccessGroup
-
-
-@register(AccessGroup)
-class AccessGroupSerializer(Serializer):
-    def serialize(self, obj, attrs, user):
-        d = {
-            'id': str(obj.id),
-            'name': obj.name,
-            'access': obj.get_type_display(),
-            'managed': obj.managed,
-            'dateCreated': obj.date_added,
-        }
-        return d
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 7754e363bf..486070078c 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -47,19 +47,10 @@ class ProjectManager(BaseManager):
                 logging.info('User does not have access to team: %s', team.id)
                 return []
 
-        # Identify access groups
-        if getattr(team, 'is_access_group', False):
-            logging.warning('Team is using deprecated access groups: %s', team.id)
-            base_qs = Project.objects.filter(
-                accessgroup__team=team,
-                accessgroup__members=user,
-                status=ProjectStatus.VISIBLE,
-            )
-        else:
-            base_qs = self.filter(
-                team=team,
-                status=ProjectStatus.VISIBLE,
-            )
+        base_qs = self.filter(
+            team=team,
+            status=ProjectStatus.VISIBLE,
+        )
 
         project_list = []
         for project in base_qs:
diff --git a/src/sentry/models/team.py b/src/sentry/models/team.py
index bb5c2a209d..397d3bcd04 100644
--- a/src/sentry/models/team.py
+++ b/src/sentry/models/team.py
@@ -25,8 +25,7 @@ from sentry.utils.http import absolute_uri
 
 
 class TeamManager(BaseManager):
-    def get_for_user(self, organization, user, access=None, access_groups=True,
-                     with_projects=False):
+    def get_for_user(self, organization, user, access=None, with_projects=False):
         """
         Returns a list of all teams a user has some level of access to.
 
@@ -34,7 +33,7 @@ class TeamManager(BaseManager):
         OrganizationMemberType value.
         """
         from sentry.models import (
-            AccessGroup, OrganizationMember, OrganizationMemberTeam,
+            OrganizationMember, OrganizationMemberTeam,
             OrganizationMemberType, Project
         )
 
@@ -85,24 +84,6 @@ class TeamManager(BaseManager):
 
             team_list = set(team_qs)
 
-            # TODO(dcramer): remove all of this junk when access groups are
-            # killed
-            ag_qs = AccessGroup.objects.filter(
-                members=user,
-                team__organization=organization,
-                team__status=TeamStatus.VISIBLE,
-            ).select_related('team')
-            if access is not None:
-                ag_qs = ag_qs.filter(type__lte=access)
-
-            for ag in ag_qs:
-                if ag.team in team_list:
-                    continue
-
-                ag.team.is_access_group = True
-                ag.team.access_type = ag.type
-                team_list.add(ag.team)
-
         results = sorted(team_list, key=lambda x: x.name.lower())
 
         if with_projects:
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 9a0d64c517..9b00bd2f14 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -14,7 +14,7 @@ from django.utils.translation import ugettext_lazy as _
 
 from sentry.app import ratelimiter
 from sentry.plugins import Notification, Plugin
-from sentry.models import UserOption, AccessGroup
+from sentry.models import UserOption
 
 
 class NotificationConfigurationForm(forms.Form):
@@ -74,13 +74,7 @@ class NotificationPlugin(Plugin):
 
         disabled = set(u for u, v in alert_settings.iteritems() if v == 0)
 
-        # fetch access group members
-        member_set = set(AccessGroup.objects.filter(
-            projects=project,
-            members__is_active=True,
-        ).exclude(members__in=disabled).values_list('members', flat=True))
-
-        member_set |= set(project.member_set.exclude(
+        member_set = set(project.member_set.exclude(
             user__in=disabled,
         ).values_list('user', flat=True))
 
diff --git a/src/sentry/static/sentry/scripts/app.js b/src/sentry/static/sentry/scripts/app.js
index f525d25ed4..338b014b4f 100644
--- a/src/sentry/static/sentry/scripts/app.js
+++ b/src/sentry/static/sentry/scripts/app.js
@@ -511,15 +511,6 @@
                 }, this)
             });
         }
-
-    });
-
-    app.AccessGroupMembersPage = BasePage.extend({
-        initialize: function(){
-            BasePage.prototype.initialize.apply(this, arguments);
-
-            app.utils.makeSearchableUsersInput('form input[name=user]');
-        }
     });
 
     app.TeamDetailsPage = BasePage.extend({
diff --git a/src/sentry/templates/sentry/access-group-migration.html b/src/sentry/templates/sentry/access-group-migration.html
deleted file mode 100644
index a415897bb9..0000000000
--- a/src/sentry/templates/sentry/access-group-migration.html
+++ /dev/null
@@ -1,115 +0,0 @@
-{% extends "sentry/bases/modal.html" %}
-
-{% load i18n %}
-
-{% block title %}{% trans "Access Group Migration" %} | {{ block.super }}{% endblock %}
-
-{% block inner %}
-  <div class="page-header">
-    <div class="pull-right">
-      <a href="{% url 'sentry-organization-home' organization.slug %}">Back to Organization Home</a>
-    </div>
-    <h2>{% trans "Access Group Migration" %}</h2>
-  </div>
-
-  {% if member_list %}
-    <p>Below is a list of all members who are part of any access group within this organization. You'll need to select which team(s) they should gain access to. Alternatively you can choose to remove the user if they no longer need access.</p>
-
-    <p>Note: Unlike access groups, organization membership cannot be restricted per-project. If you need to refine access to that level you should create additional teams and transfer the projects where applicable.</p>
-
-    <form method="POST" action=".">
-      {% csrf_token %}
-
-      <table class="table table-striped access-group-migration">
-        <thead>
-          <tr>
-            <th></th>
-            <th style="width:200px"></th>
-            <th style="width:100px"></th>
-            <th style="width:100px;text-align:center">Remove?</th>
-          </tr>
-        </thead>
-        {% for member, project_list in member_list %}
-          <tr>
-            <td>
-              <h4>{{ member.get_display_name }}</h4>
-              <label class="checkbox">
-                <input type="checkbox" name="user[{{ member.id }}][global_access]" value="1" class="checkboxinput global-access">
-                <strong>All Teams</strong>
-              </label>
-              <fieldset class="team-choices">
-                {% for team in team_list %}
-                  <label class="checkbox">
-                    <input type="checkbox" name="user[{{ member.id }}][team]" value="{{ team.slug }}" class="checkboxinput">
-                    {{ team.slug }}
-                  </label>
-                {% endfor %}
-              </fieldset>
-            </td>
-            <td style="vertical-align:top">
-              <select name="user[{{ member.id }}][type]" style="width:150px">
-                <option value="member">Member</option>
-                <option value="admin">Admin</option>
-              </select>
-            </td>
-            <td style="vertical-align:top">
-              <a class="tip" title="{% for project in project_list %}{{ project.team.slug }} / {{ project.slug }}<br>{% endfor %}"
-                 style="line-height:28px;">{{ project_list|length }} project(s)</a>
-            </td>
-            <td style="text-align:center;vertical-align:top">
-              <input type="checkbox" name="user[{{ member.id }}][remove]" value="1" class="checkboxinput">
-            </td>
-          </tr>
-        {% endfor %}
-      </table>
-
-      <fieldset class="form-actions">
-        <button type="submit" class="btn btn-primary" name="action_save">{% trans "Save Changes" %}</button>
-      </fieldset>
-    </form>
-  {% else %}
-    <p>Your work is done here! There are no access groups which need migrated.</p>
-  {% endif %}
-
-  <style>
-  table.access-group-migration td,
-  table.access-group-migration th {
-    padding: 8px;
-  }
-  .access-group-migration td > h4 {
-    margin-bottom: 10px;
-    display: block;
-  }
-  .access-group-migration fieldset {
-    margin-left: 20px;
-  }
-  .access-group-migration label {
-    font-weight: normal;
-  }
-  </style>
-
-  <script>
-  $(function(){
-    var selectedTeamsByParent = {};
-    $('input.global-access').change(function(){
-      var $this = $(this);
-      var $parent = $this.parent().parent();
-      var checked = $this.is(':checked');
-      var selector = $parent.find('.team-choices input[type=checkbox]');
-
-      if (checked) {
-        selectedTeamsByParent[$parent] = $parent.find('.team-choices input[type=checkbox]:checked').slice(0, selector.length);
-        selector.prop('checked', true);
-      } else {
-        selector.prop('checked', false);
-        $(selectedTeamsByParent[$parent]).prop('checked', true);
-        selectedTeamsByParent[$parent] = [];
-      }
-
-      $('.team-choices').prop('disabled', checked);
-
-    }).change();
-  });
-  </script>
-
-{% endblock %}
diff --git a/src/sentry/templates/sentry/bases/organization.html b/src/sentry/templates/sentry/bases/organization.html
index f62846e26c..864a685e89 100644
--- a/src/sentry/templates/sentry/bases/organization.html
+++ b/src/sentry/templates/sentry/bases/organization.html
@@ -91,11 +91,6 @@
 
 {% block main %}
   <section class="body">
-    {% if request.user|needs_access_group_migration:organization %}
-      <div class="alert alert-block alert-info">
-        <p>You have access groups that need to be migrated into the new organization structure. <a href="{% url 'sentry-organization-access-group-migration' organization.slug %}">Get Started</a></p>
-      </div>
-    {% endif %}
     {% block inner %}{% endblock %}
   </section>
 {% endblock %}
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 9be311a209..56866a1d9e 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -462,25 +462,6 @@ def list_organizations(user):
     return Organization.objects.get_for_user(user)
 
 
-@register.filter
-def needs_access_group_migration(user, organization):
-    from sentry.models import AccessGroup, OrganizationMember, OrganizationMemberType
-
-    has_org_access_queryset = OrganizationMember.objects.filter(
-        user=user,
-        organization=organization,
-        has_global_access=True,
-        type__lte=OrganizationMemberType.ADMIN,
-    )
-
-    if not (user.is_superuser or has_org_access_queryset.exists()):
-        return False
-
-    return AccessGroup.objects.filter(
-        team__organization=organization
-    ).exists()
-
-
 @register.filter
 def count_pending_access_requests(organization):
     from sentry.models import OrganizationAccessRequest
diff --git a/src/sentry/web/forms/teams.py b/src/sentry/web/forms/teams.py
deleted file mode 100644
index 0e8eee328d..0000000000
--- a/src/sentry/web/forms/teams.py
+++ /dev/null
@@ -1,64 +0,0 @@
-"""
-sentry.web.forms.teams
-~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
-from __future__ import absolute_import
-
-from django import forms
-from django.utils.translation import ugettext_lazy as _
-
-from sentry.constants import MEMBER_TYPES
-from sentry.models import AccessGroup, Project
-from sentry.web.forms.fields import UserField
-
-
-class BaseAccessGroupForm(forms.ModelForm):
-    name = forms.CharField(label=_('Group Name'), max_length=200,
-        widget=forms.TextInput(attrs={'placeholder': _('API Team')}))
-    type = forms.ChoiceField(label=_('Access Type'), choices=MEMBER_TYPES,
-        help_text=_('Members will gain this level of access to all projects assigned to this group.'))
-
-    class Meta:
-        fields = ('name', 'type')
-        model = AccessGroup
-
-
-class EditAccessGroupForm(BaseAccessGroupForm):
-    pass
-
-
-class RemoveAccessGroupForm(forms.Form):
-    pass
-
-
-class NewAccessGroupMemberForm(forms.Form):
-    user = UserField()
-
-
-class NewAccessGroupProjectForm(forms.Form):
-    project = forms.TypedChoiceField(choices=(), coerce=int)
-
-    def __init__(self, group, *args, **kwargs):
-        super(NewAccessGroupProjectForm, self).__init__(*args, **kwargs)
-        self.group = group
-        self.project_list = dict(
-            (p.id, p) for p in Project.objects.filter(
-                team=group.team,
-            )
-        )
-        self.fields['project'].choices = [
-            (k, p.name) for k, p in sorted(self.project_list.iteritems())
-        ]
-        self.fields['project'].widget.choices = self.fields['project'].choices
-
-    def clean_project(self):
-        value = self.cleaned_data.get('project')
-        if not value:
-            return None
-        try:
-            return self.project_list[value]
-        except KeyError:
-            raise forms.ValidationError(_('Invalid project'))
diff --git a/src/sentry/web/frontend/access_group_migration.py b/src/sentry/web/frontend/access_group_migration.py
deleted file mode 100644
index 1e62df8983..0000000000
--- a/src/sentry/web/frontend/access_group_migration.py
+++ /dev/null
@@ -1,103 +0,0 @@
-from __future__ import absolute_import
-
-from collections import defaultdict
-
-from sentry.models import (
-    AccessGroup, OrganizationMember, OrganizationMemberTeam,
-    OrganizationMemberType, Team
-)
-from sentry.web.frontend.base import OrganizationView
-
-
-class AccessGroupMigrationView(OrganizationView):
-    required_access = OrganizationMemberType.ADMIN
-
-    def process_posted_member(self, request, organization, member):
-        global_access = request.POST.get('user[%s][global_access]' % member.user_id)
-        teams = request.POST.getlist('user[%s][team]' % member.user_id)
-        remove = request.POST.get('user[%s][remove]' % member.user_id)
-        access_type = request.POST.get('user[%s][type]' % member.user_id)
-
-        if not access_type:
-            return
-
-        if remove != '1':
-            if access_type == 'member':
-                access_type = OrganizationMemberType.MEMBER
-            elif access_type == 'admin':
-                access_type = OrganizationMemberType.ADMIN
-            else:
-                return
-
-            global_access = global_access == '1'
-
-            om, created = OrganizationMember.objects.get_or_create(
-                organization=organization,
-                user=member.user,
-                defaults={
-                    'has_global_access': global_access,
-                    'type': access_type,
-                }
-            )
-
-            if created and not global_access:
-                for team in teams:
-                    OrganizationMemberTeam.objects.create(
-                        team=Team.objects.get_from_cache(slug=team),
-                        organizationmember=om,
-                    )
-
-        member.delete()
-
-    def handle(self, request, organization):
-        member_list = list(AccessGroup.members.through.objects.filter(
-            accessgroup__team__organization=organization,
-        ).select_related('user', 'accessgroup', 'accessgroup__team'))
-
-        if not member_list:
-            # Fix an issue where empty groups would show up
-            AccessGroup.objects.filter(
-                team__organization=organization,
-            ).delete()
-
-        if request.method == 'POST':
-            for member in member_list:
-                self.process_posted_member(request, organization, member)
-
-            for ag in AccessGroup.objects.filter(team__organization=organization):
-                if not ag.members.exists():
-                    ag.delete()
-
-            return self.redirect(request.path)
-
-        group_list = set(m.accessgroup for m in member_list)
-
-        team_list = organization.team_set.all()
-
-        project_list = list(AccessGroup.projects.through.objects.filter(
-            accessgroup__in=group_list,
-        ).select_related('project', 'project__team'))
-
-        # sort projects by group
-        projects_by_group = defaultdict(list)
-        for obj in project_list:
-            projects_by_group[obj.accessgroup_id].append(obj.project)
-
-        projects_by_user = defaultdict(list)
-        for member in member_list:
-            projects_by_user[member.user_id].extend(projects_by_group[member.accessgroup_id])
-
-        results = []
-        for member in member_list:
-            results.append((
-                member.user,
-                projects_by_user[member.user_id],
-            ))
-
-        context = {
-            'member_list': results,
-            'group_list': group_list,
-            'team_list': team_list,
-        }
-
-        return self.respond('sentry/access-group-migration.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 7cae6d242c..82b63aebba 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -31,7 +31,6 @@ import sentry.web.frontend.projects.tags
 __all__ = ('urlpatterns',)
 
 from sentry.web.frontend.accept_organization_invite import AcceptOrganizationInviteView
-from sentry.web.frontend.access_group_migration import AccessGroupMigrationView
 from sentry.web.frontend.auth_link_identity import AuthLinkIdentityView
 from sentry.web.frontend.auth_login import AuthLoginView
 from sentry.web.frontend.auth_logout import AuthLogoutView
@@ -201,8 +200,6 @@ urlpatterns += patterns('',
         name='sentry-organization-home'),
     url(r'^organizations/new/$', CreateOrganizationView.as_view(),
         name='sentry-create-organization'),
-    url(r'^organizations/(?P<organization_slug>[\w_-]+)/access-groups/$', AccessGroupMigrationView.as_view(),
-        name='sentry-organization-access-group-migration'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/$', OrganizationApiKeysView.as_view(),
         name='sentry-organization-api-keys'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/api-keys/(?P<key_id>[\w_-]+)$', OrganizationApiKeySettingsView.as_view(),
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 13defadc92..5446aaa5a2 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -3,9 +3,7 @@
 from __future__ import absolute_import
 
 from sentry.constants import MEMBER_OWNER, MEMBER_USER
-from sentry.models import (
-    Group, Team, User, AccessGroup, GroupTagValue
-)
+from sentry.models import Group, GroupTagValue, Team, User
 from sentry.testutils import TestCase
 
 
@@ -48,8 +46,6 @@ class TeamManagerTest(TestCase):
         user3 = User.objects.create(username='baz')
         org = self.create_organization(owner=user)
         team = self.create_team(organization=org, name='Test')
-        group = AccessGroup.objects.create(name='Test', type=MEMBER_USER, team=team)
-        group.members.add(user2)
 
         result = Team.objects.get_for_user(
             organization=org,
diff --git a/tests/sentry/plugins/mail/tests.py b/tests/sentry/plugins/mail/tests.py
index 6b92709ff0..6b28b3fd16 100644
--- a/tests/sentry/plugins/mail/tests.py
+++ b/tests/sentry/plugins/mail/tests.py
@@ -10,7 +10,7 @@ from exam import fixture
 from mock import Mock
 
 from sentry.interfaces.stacktrace import Stacktrace
-from sentry.models import AccessGroup, Event, Group, Rule
+from sentry.models import Event, Group, Rule
 from sentry.plugins import Notification
 from sentry.plugins.sentry_mail.models import MailPlugin
 from sentry.testutils import TestCase
@@ -173,12 +173,8 @@ class MailPluginTest(TestCase):
         organization.member_set.get_or_create(user=user)
         organization.member_set.get_or_create(user=user2)
 
-        ag = AccessGroup.objects.create(team=team)
-        ag.members.add(user3)
-        ag.projects.add(project)
-
         # all members
-        assert (sorted(set([user.pk, user2.pk, user3.pk])) ==
+        assert (sorted(set([user.pk, user2.pk])) ==
                 sorted(self.plugin.get_sendable_users(project)))
 
         # disabled user2
