commit 45e6eddceb50e3a26d73a9ce214f6f77bb7a2209
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Mar 5 17:28:06 2015 -0800

    Add release files list and create endpoints

diff --git a/src/sentry/api/endpoints/release_files.py b/src/sentry/api/endpoints/release_files.py
new file mode 100644
index 0000000000..1cdab37ebc
--- /dev/null
+++ b/src/sentry/api/endpoints/release_files.py
@@ -0,0 +1,97 @@
+from __future__ import absolute_import
+
+from rest_framework.negotiation import DefaultContentNegotiation
+from rest_framework.parsers import FormParser, MultiPartParser
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection, Endpoint
+from sentry.api.bases.project import ProjectPermission
+from sentry.api.serializers import serialize
+from sentry.models import File, Release, ReleaseFile
+
+
+class ConditionalContentNegotiation(DefaultContentNegotiation):
+    """
+    Overrides the parsers on POST to support file uploads.
+    """
+    def select_parser(self, request, parsers):
+        if request.method == 'POST':
+            parsers = [FormParser(), MultiPartParser()]
+
+        return super(ConditionalContentNegotiation, self).select_parser(
+            request, parsers
+        )
+
+
+class ReleaseFilesEndpoint(Endpoint):
+    doc_section = DocSection.RELEASES
+
+    content_negotiation_class = ConditionalContentNegotiation
+    permission_classes = (ProjectPermission,)
+
+    def get(self, request, release_id):
+        """
+        List a release's files
+
+        Retrieve a list of files for a given release.
+
+            {method} {path}
+
+        """
+        release = Release.objects.get(id=release_id)
+
+        self.check_object_permissions(request, release.project)
+
+        file_list = list(ReleaseFile.objects.filter(
+            release=release,
+        ).select_related('file').order_by('name'))
+
+        return Response(serialize(file_list, request.user))
+
+    def post(self, request, release_id):
+        """
+        Upload a new file
+
+        Upload a new file for the given release.
+
+            {method} {path}
+            name=http%3A%2F%2Fexample.com%2Fapplication.js
+
+            # ...
+
+        Unlike other API requests, files must be uploaded using the traditional
+        multipart/form-data content-type.
+
+        The optional 'name' attribute should reflect the absolute path that this
+        file will be referenced as. For example, in the case of JavaScript you
+        might specify the full web URI.
+        """
+        release = Release.objects.get(id=release_id)
+
+        self.check_object_permissions(request, release.project)
+
+        if 'file' not in request.FILES:
+            return Response(status=400)
+
+        fileobj = request.FILES['file']
+
+        full_name = request.DATA.get('name', fileobj.name)
+        name = full_name.rsplit('/', 1)[-1]
+
+        file = File(
+            name=name,
+            type='source',
+            headers={
+                'Content-Type': fileobj.content_type,
+            }
+        )
+        file.putfile(fileobj)
+
+        releasefile = ReleaseFile.objects.create(
+            project=release.project,
+            release=release,
+            file=file,
+            name=full_name,
+        )
+
+        return Response(serialize(releasefile, request.user), status=201)
diff --git a/src/sentry/api/serializers/models/release_file.py b/src/sentry/api/serializers/models/release_file.py
new file mode 100644
index 0000000000..2fbfbd6e1e
--- /dev/null
+++ b/src/sentry/api/serializers/models/release_file.py
@@ -0,0 +1,18 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import ReleaseFile
+
+
+@register(ReleaseFile)
+class ReleaseFileSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        d = {
+            'id': str(obj.id),
+            'name': obj.name,
+            'headers': obj.file.headers,
+            'size': obj.file.size,
+            'sha1': obj.file.checksum,
+            'dateCreated': obj.file.timestamp,
+        }
+        return d
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 923ace1673..fddbd2dd28 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -30,6 +30,7 @@ from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
 from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
 from .endpoints.release_details import ReleaseDetailsEndpoint
+from .endpoints.release_files import ReleaseFilesEndpoint
 from .endpoints.team_details import TeamDetailsEndpoint
 from .endpoints.team_groups_new import TeamGroupsNewEndpoint
 from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
@@ -117,6 +118,9 @@ urlpatterns = patterns(
     url(r'^releases/(?P<release_id>\d+)/$',
         ReleaseDetailsEndpoint.as_view(),
         name='sentry-api-0-release-details'),
+    url(r'^releases/(?P<release_id>\d+)/files/$',
+        ReleaseFilesEndpoint.as_view(),
+        name='sentry-api-0-release-files'),
 
     # Groups
     url(r'^groups/(?P<group_id>\d+)/$',
diff --git a/tests/sentry/api/endpoints/test_release_files.py b/tests/sentry/api/endpoints/test_release_files.py
new file mode 100644
index 0000000000..64e10882e9
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_release_files.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+from django.core.files.uploadedfile import SimpleUploadedFile
+from django.core.urlresolvers import reverse
+
+from sentry.models import File, Release, ReleaseFile
+from sentry.testutils import APITestCase
+
+
+class ReleaseFilesListTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            project=project,
+            version='1',
+        )
+
+        releasefile = ReleaseFile.objects.create(
+            project=project,
+            release=release,
+            file=File.objects.create(
+                path='http://example.com',
+                name='application.js',
+                type='source',
+            ),
+            name='http://example.com/application.js'
+        )
+
+        url = reverse('sentry-api-0-release-files', kwargs={
+            'release_id': release.id,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(releasefile.id)
+
+
+class ReleaseFileCreateTest(APITestCase):
+    def test_simple(self):
+        project = self.create_project(name='foo')
+
+        release = Release.objects.create(
+            project=project,
+            version='1',
+        )
+
+        url = reverse('sentry-api-0-release-files', kwargs={
+            'release_id': release.id,
+        })
+
+        self.login_as(user=self.user)
+
+        response = self.client.post(url, {
+            'name': 'http://example.com/application.js',
+            'file': SimpleUploadedFile('application.js', 'function() { }',
+                                       content_type='application/javascript'),
+        }, format='multipart')
+
+        assert response.status_code == 201, response.content
+
+        releasefile = ReleaseFile.objects.get(release=release)
+        assert releasefile.name == 'http://example.com/application.js'
+        assert releasefile.file.headers == {
+            'Content-Type': 'application/javascript',
+        }
