commit e300b2c298636c07e08530d604b520372671f715
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Jan 19 12:06:30 2015 -0800

    Document testing for plugins

diff --git a/CHANGES b/CHANGES
index 7deead0e22..769f355058 100644
--- a/CHANGES
+++ b/CHANGES
@@ -1,8 +1,15 @@
+Version 7.2.0
+-------------
+
+- A py.test plugin now exists to make extension testing easier.
+
+
 Version 7.1.1
 -------------
 
 - Suggest realip module over X-Forwarded-For
 
+
 Version 7.1.0
 -------------
 
diff --git a/docs/developer/plugins/index.rst b/docs/developer/plugins/index.rst
index 83440cc99e..c0f3035896 100644
--- a/docs/developer/plugins/index.rst
+++ b/docs/developer/plugins/index.rst
@@ -88,5 +88,6 @@ Dig into the rest of the plugin documentation, and take a look at existing plugi
    v1interface
    v2interface
    permissions
+   testing
 
 More and better docs coming soon..
diff --git a/docs/developer/plugins/testing.rst b/docs/developer/plugins/testing.rst
new file mode 100644
index 0000000000..18d871e06f
--- /dev/null
+++ b/docs/developer/plugins/testing.rst
@@ -0,0 +1,71 @@
+Testing
+=======
+
+Sentry provides a basic py.test-based testing framework for extensions.
+
+.. versionadded:: 7.1.0
+
+In a simple project, you'll need to do a few things to get it working:
+
+setup.py
+--------
+
+Augment your setup.py to ensure at least the following:
+
+.. code-block:: python
+
+   setup(
+       # ...
+      install_requires=[
+          'sentry>=7.2.0',
+      ]
+   )
+
+
+conftest.py
+-----------
+
+The ``conftest.py`` file is our main entry-point for py.test. We need to configure it to load the Sentry pytest configuration:
+
+.. code-block:: python
+
+   from __future__ import absolute_import
+
+   pytest_plugins = [
+       'sentry.utils.pytest'
+   ]
+
+
+Test Cases
+----------
+
+You can now inherit from Sentry's core test classes. These are Django-based and ensure the database and other basic utilities are in a clean state:
+
+.. code-block:: python
+
+   # test_myextension.py
+   from __future__ import absolute_import
+
+   from sentry.testutils import TestCase
+
+   class MyExtensionTest(TestCase):
+       def test_simple(self):
+          assert 1 != 2
+
+
+Running Tests
+-------------
+
+Running tests follows the py.test standard. As long as your test files and methods are named appropriately (``test_filename.py`` and ``test_function()``) you can simply call out to py.test:
+
+```
+$ py.test -v
+============================== test session starts ==============================
+platform darwin -- Python 2.7.9 -- py-1.4.26 -- pytest-2.6.4/python2.7
+plugins: django
+collected 1 items
+
+tests/test_myextension.py::MyExtensionTest::test_simple PASSED
+
+=========================== 1 passed in 0.35 seconds ============================
+```
