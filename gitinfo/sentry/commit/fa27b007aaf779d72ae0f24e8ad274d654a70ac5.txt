commit fa27b007aaf779d72ae0f24e8ad274d654a70ac5
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Dec 19 14:24:52 2018 -0800

    ref(ui): Move Discover/Events header into a component (#11001)
    
    ...moved into GlobalSelectionHeader

diff --git a/package.json b/package.json
index 4234a8eae3..a14ffb5768 100644
--- a/package.json
+++ b/package.json
@@ -126,6 +126,8 @@
       "enzyme-to-json/serializer"
     ],
     "moduleNameMapper": {
+      "^app-test/(.*)": "<rootDir>/tests/js/$1",
+      "^app-test-helpers(.*)": "<rootDir>/tests/js/helpers$1",
       "\\.(css|less|png)$": "<rootDir>/tests/js/helpers/importStyleMock.js",
       "\\.(svg)$": "<rootDir>/tests/js/helpers/svgMock.js",
       "jquery": "<rootDir>/src/sentry/static/sentry/__mocks__/jquery.jsx",
diff --git a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
index c3a40a686d..d419e27fde 100644
--- a/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/globalSelection.jsx
@@ -1,15 +1,36 @@
 /*eslint no-use-before-define: ["error", { "functions": false }]*/
-
+import {isEqual, isInteger} from 'lodash';
 import * as Sentry from '@sentry/browser';
-import {isInteger} from 'lodash';
+
+import {getParams} from 'app/views/organizationEvents/utils/getParams';
+import {getUtcDateString} from 'app/utils/dates';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 
+const isEqualWithEmptyArrays = (newQuery, current) => {
+  // We will only get empty arrays from `newQuery`
+  // Can't use isEqualWith because keys are unbalanced (guessing)
+  return isEqual(
+    Object.entries(newQuery)
+      .filter(([, value]) => !Array.isArray(value) || !!value.length)
+      .reduce(
+        (acc, [key, value]) => ({
+          ...acc,
+          [key]: value,
+        }),
+        {}
+      ),
+    current
+  );
+};
+
 /**
- * Updates global project selection
+ * Updates global project selection URL param if `router` is supplied
+ * OTHERWISE fire action to update projects
  *
  * @param {Number[]} projects List of project ids
+ * @param {Object} [router] Router object
  */
-export function updateProjects(projects) {
+export function updateProjects(projects, router) {
   if (!isProjectsValid(projects)) {
     Sentry.withScope(scope => {
       scope.setExtra('projects', projects);
@@ -18,7 +39,10 @@ export function updateProjects(projects) {
     return;
   }
 
-  GlobalSelectionActions.updateProjects(projects);
+  if (!router) {
+    GlobalSelectionActions.updateProjects(projects);
+  }
+  updateParams({project: projects}, router);
 }
 
 function isProjectsValid(projects) {
@@ -26,19 +50,85 @@ function isProjectsValid(projects) {
 }
 
 /**
- * Updates datetime selection
+ * Updates global datetime selection URL param if `router` is supplied
+ * OTHERWISE fire action to update projects
  *
  * @param {Object} datetime Object with start, end, range keys
+ * @param {Object} [router] Router object
  */
-export function updateDateTime(datetime) {
-  GlobalSelectionActions.updateDateTime(datetime);
+export function updateDateTime(datetime, router) {
+  if (!router) {
+    GlobalSelectionActions.updateDateTime(datetime);
+  }
+  updateParams(datetime, router);
 }
 
 /**
- * Updates global environment selection
+ * Updates global environment selection URL param if `router` is supplied
+ * OTHERWISE fire action to update projects
  *
  * @param {String[]} environments List of environments
+ * @param {Object} [router] Router object
+ */
+export function updateEnvironments(environment, router) {
+  if (!router) {
+    GlobalSelectionActions.updateEnvironments(environment);
+  }
+  updateParams({environment}, router);
+}
+
+/**
+ * Updates router/URL with new query params
+ *
+ * @param {Object} obj New query params
+ * @param {Object} [router] React router object
+ */
+export function updateParams(obj, router) {
+  // Allow another component to handle routing
+  if (!router) {
+    return;
+  }
+
+  const newQuery = getNewQueryParams(obj, router.location.query);
+
+  // Only push new location if query params has changed because this will cause a heavy re-render
+  if (isEqualWithEmptyArrays(newQuery, router.location.query)) {
+    return;
+  }
+
+  router.push({
+    pathname: router.location.pathname,
+    query: newQuery,
+  });
+}
+
+/**
+ * Creates a new query parameter object given new params and old params
+ * Preserves the old query params, except for `cursor`
+ *
+ * TODO(billy): Add option for other keys to reset
+ *
+ * @param {Object} obj New query params
+ * @param {Object} oldQueryParams Old query params
  */
-export function updateEnvironments(environments) {
-  GlobalSelectionActions.updateEnvironments(environments);
+function getNewQueryParams(obj, oldQueryParams) {
+  // Reset cursor when changing parameters
+  // eslint-disable-next-line no-unused-vars
+  const {cursor, statsPeriod, ...oldQuery} = oldQueryParams;
+
+  const newQuery = getParams({
+    ...oldQuery,
+    period: !obj.start && !obj.end ? obj.period || statsPeriod : null,
+    ...obj,
+  });
+
+  if (newQuery.start) {
+    newQuery.start = getUtcDateString(newQuery.start);
+  }
+
+  if (newQuery.end) {
+    newQuery.end = getUtcDateString(newQuery.end);
+  }
+
+  return newQuery;
 }
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 0dfb9ccbc9..6c17e0448b 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -8,14 +8,12 @@
  * This component handles logic like when the dropdown menu should be displayed, as well as handling keyboard input, how
  * it is rendered should be left to the child.
  */
-import React from 'react';
 import PropTypes from 'prop-types';
+import React from 'react';
 
+import {callIfFunction} from 'app/utils/callIfFunction';
 import DropdownMenu from 'app/components/dropdownMenu';
 
-// Checks if `fn` is a function and calls it with `args`
-const callIfFunction = (fn, ...args) => typeof fn === 'function' && fn(...args);
-
 class AutoComplete extends React.Component {
   static propTypes = {
     /**
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx
new file mode 100644
index 0000000000..554fd5c3e8
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/constants.jsx
@@ -0,0 +1,17 @@
+export const URL_PARAM = {
+  START: 'start',
+  END: 'end',
+  UTC: 'utc',
+  PERIOD: 'statsPeriod',
+  PROJECT: 'project',
+  ENVIRONMENT: 'environment',
+};
+
+export const DATE_TIME = {
+  START: 'start',
+  END: 'end',
+  PERIOD: 'period',
+  UTC: 'utc',
+};
+
+export const DATE_TIME_KEYS = Object.values(DATE_TIME);
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
new file mode 100644
index 0000000000..83fd7d3ec3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/globalSelectionHeader.jsx
@@ -0,0 +1,321 @@
+import {pick, isEqual} from 'lodash';
+import {withRouter} from 'react-router';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {
+  DATE_TIME_KEYS,
+  URL_PARAM,
+} from 'app/components/organizations/globalSelectionHeader/constants';
+import {callIfFunction} from 'app/utils/callIfFunction';
+import {defined} from 'app/utils';
+import {getLocalDateObject} from 'app/utils/dates';
+import {isEqualWithDates} from 'app/utils/isEqualWithDates';
+import {
+  updateDateTime,
+  updateEnvironments,
+  updateParams,
+  updateProjects,
+} from 'app/actionCreators/globalSelection';
+import Header from 'app/components/organizations/header';
+import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
+import HeaderSeparator from 'app/components/organizations/headerSeparator';
+import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
+import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
+import SentryTypes from 'app/sentryTypes';
+import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
+import withGlobalSelection from 'app/utils/withGlobalSelection';
+
+class GlobalSelectionHeader extends React.Component {
+  static propTypes = {
+    organization: SentryTypes.Organization,
+    router: PropTypes.object,
+
+    /**
+     * List of projects to display in project selector
+     */
+    projects: PropTypes.arrayOf(SentryTypes.Project),
+
+    /**
+     * Currently selected values(s)
+     */
+    selection: SentryTypes.GlobalSelection,
+
+    // Display Environment selector?
+    showEnvironmentSelector: PropTypes.bool,
+
+    // Disable automatic routing
+    hasCustomRouting: PropTypes.bool,
+
+    // Props passed to child components //
+    /**
+     * Show absolute date selectors
+     */
+    showAbsolute: PropTypes.bool,
+    /**
+     * Show relative date selectors
+     */
+    showRelative: PropTypes.bool,
+
+    // Callbacks //
+    onChangeProjects: PropTypes.func,
+    onUpdateProjects: PropTypes.func,
+    onChangeEnvironments: PropTypes.func,
+    onUpdateEnvironments: PropTypes.func,
+    onChangeTime: PropTypes.func,
+    onUpdateTime: PropTypes.func,
+  };
+
+  static defaultProps = {
+    hasCustomRouting: false,
+    showEnvironmentSelector: true,
+  };
+
+  // Parses URL query parameters for values relevant to global selection header
+  static getStateFromRouter(props) {
+    const {query} = props.location;
+    let start = query[URL_PARAM.START] !== 'null' && query[URL_PARAM.START];
+    let end = query[URL_PARAM.END] !== 'null' && query[URL_PARAM.END];
+    let project = query[URL_PARAM.PROJECT];
+    let environment = query[URL_PARAM.ENVIRONMENT];
+    let period = query[URL_PARAM.PERIOD];
+    let utc = query[URL_PARAM.UTC];
+
+    const hasAbsolute = !!start && !!end;
+
+    if (defined(project) && Array.isArray(project)) {
+      project = project.map(p => parseInt(p, 10));
+    } else if (defined(project)) {
+      const projectIdInt = parseInt(project, 10);
+      project = isNaN(projectIdInt) ? [] : [projectIdInt];
+    }
+
+    if (defined(environment) && !Array.isArray(environment)) {
+      environment = [environment];
+    }
+
+    if (hasAbsolute) {
+      start = getLocalDateObject(start);
+      end = getLocalDateObject(end);
+    }
+
+    return {
+      project,
+      environment,
+      period: period || null,
+      start: start || null,
+      end: end || null,
+
+      // params from URL will be a string
+      utc: typeof utc !== 'undefined' ? utc === 'true' : null,
+    };
+  }
+
+  constructor(props) {
+    super(props);
+    this.state = {};
+  }
+
+  componentDidMount() {
+    if (this.props.hasCustomRouting) {
+      return;
+    }
+
+    const stateFromRouter = GlobalSelectionHeader.getStateFromRouter(this.props);
+    // We should update store if there are any relevant URL parameters when component
+    // is mounted
+    if (Object.values(stateFromRouter).some(i => !!i)) {
+      const {project, environment, start, end, period, utc} = stateFromRouter;
+
+      // This will update store with values from URL parameters
+      updateDateTime({start, end, period, utc});
+      updateEnvironments(environment);
+      updateProjects(project);
+    } else {
+      // Otherwise, we can update URL with values from store
+      //
+      // e.g. when switching to a new view that uses this component,
+      // update URL parameters to reflect current store
+      const {datetime, environments, projects} = this.props.selection;
+      updateParams(
+        {project: projects, environment: environments, ...datetime},
+        this.getRouter()
+      );
+    }
+  }
+
+  shouldComponentUpdate(nextProps, nextState) {
+    // Update if state changes
+    if (this.state !== nextState) {
+      return true;
+    }
+
+    // Update if URL parameters change
+    if (this.didQueryChange(this.props, nextProps)) {
+      return true;
+    }
+
+    const nonDateKeys = ['projects', 'environments'];
+    // Update if selection values change
+    if (
+      !isEqual(
+        pick(this.props.selection, nonDateKeys),
+        pick(nextProps.selection, nonDateKeys)
+      ) ||
+      !isEqualWithDates(
+        pick(this.props.selection.datetime, DATE_TIME_KEYS),
+        pick(nextProps.selection.datetime, DATE_TIME_KEYS)
+      )
+    ) {
+      return true;
+    }
+
+    return false;
+  }
+
+  componentDidUpdate(prevProps) {
+    if (this.props.hasCustomRouting) {
+      return;
+    }
+
+    // If component has updated (e.g. due to re-render from a router action),
+    // update store values with values from router. Router should be source of truth
+    this.updateStoreIfChange(prevProps, this.props);
+  }
+
+  didQueryChange = (prevProps, nextProps) => {
+    const urlParamKeys = Object.values(URL_PARAM);
+    return !isEqual(
+      pick(prevProps.location.query, urlParamKeys),
+      pick(nextProps.location.query, urlParamKeys)
+    );
+  };
+
+  updateStoreIfChange = (prevProps, nextProps) => {
+    // Don't do anything if query parameters have not changed
+    //
+    // e.g. if selection store changed, don't trigger more actions
+    // to update global selection store (otherwise we'll get recursive updates)
+    if (!this.didQueryChange(prevProps, nextProps)) {
+      return;
+    }
+
+    const {
+      project,
+      environment,
+      period,
+      start,
+      end,
+      utc,
+    } = GlobalSelectionHeader.getStateFromRouter(nextProps);
+
+    if (start || end || period || utc) {
+      // Don't attempt to update date if all of these values are empty
+      updateDateTime({start, end, period, utc});
+    }
+
+    updateEnvironments(environment || []);
+    updateProjects(project || []);
+  };
+
+  // Returns `router` from props if `hasCustomRouting` property is false
+  getRouter = () => (!this.props.hasCustomRouting ? this.props.router : null);
+
+  handleChangeProjects = projects => {
+    this.setState({
+      projects,
+    });
+    callIfFunction(this.props.onChangeProjects, projects);
+  };
+
+  handleChangeEnvironments = environments => {
+    this.setState({
+      environments,
+    });
+    callIfFunction(this.props.onChangeEnvironments, environments);
+  };
+
+  handleChangeTime = ({start, end, relative: period, utc}) => {
+    callIfFunction(this.props.onChangeTime, {start, end, period, utc});
+  };
+
+  handleUpdateTime = ({relative: period, start, end, utc} = {}) => {
+    const newValueObj = {
+      ...(defined(period) ? {period} : {start, end}),
+      utc,
+    };
+
+    updateDateTime(newValueObj, this.getRouter());
+    callIfFunction(this.props.onUpdateTime, newValueObj);
+  };
+
+  handleUpdateEnvironmments = () => {
+    const {environments} = this.state;
+    updateEnvironments(environments, this.getRouter());
+    this.setState({environments: null});
+    callIfFunction(this.props.onUpdateEnvironments, environments);
+  };
+
+  handleUpdateProjects = () => {
+    const {projects} = this.state;
+    updateProjects(projects, this.getRouter());
+    this.setState({projects: null});
+    callIfFunction(this.props.onUpdateProjects, projects);
+  };
+
+  render() {
+    const {
+      className,
+      organization,
+      projects,
+      showAbsolute,
+      showRelative,
+      showEnvironmentSelector,
+    } = this.props;
+    const {period, start, end, utc} = this.props.selection.datetime || {};
+
+    return (
+      <Header className={className}>
+        <HeaderItemPosition>
+          <MultipleProjectSelector
+            organization={organization}
+            projects={projects}
+            value={this.state.projects || this.props.selection.projects}
+            onChange={this.handleChangeProjects}
+            onUpdate={this.handleUpdateProjects}
+          />
+        </HeaderItemPosition>
+
+        {showEnvironmentSelector && (
+          <React.Fragment>
+            <HeaderSeparator />
+            <HeaderItemPosition>
+              <MultipleEnvironmentSelector
+                organization={organization}
+                value={this.state.environments || this.props.selection.environments}
+                onChange={this.handleChangeEnvironments}
+                onUpdate={this.handleUpdateEnvironmments}
+              />
+            </HeaderItemPosition>
+          </React.Fragment>
+        )}
+
+        <HeaderSeparator />
+        <HeaderItemPosition>
+          <TimeRangeSelector
+            key={`period:${period}-start:${start}-end:${end}-utc:${utc}`}
+            showAbsolute={showAbsolute}
+            showRelative={showRelative}
+            relative={period}
+            start={start}
+            end={end}
+            utc={utc}
+            onChange={this.handleChangeTime}
+            onUpdate={this.handleUpdateTime}
+          />
+        </HeaderItemPosition>
+      </Header>
+    );
+  }
+}
+export default withRouter(withGlobalSelection(GlobalSelectionHeader));
diff --git a/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
new file mode 100644
index 0000000000..bebf0928f9
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/organizations/globalSelectionHeader/index.jsx
@@ -0,0 +1 @@
+export {default} from './globalSelectionHeader';
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
index 57c21d0feb..4257e71fe0 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/dateRange/dateRange.jsx
@@ -241,8 +241,7 @@ const StyledDateRangePicker = styled(DateRangePicker)`
   .rdrDayStartOfMonth,
   .rdrDayStartOfWeek,
   .rdrDayStartOfWeek {
-    .rdrInRange,
-    .rdrEndEdge {
+    .rdrInRange {
       border-top-left-radius: 0;
       border-bottom-left-radius: 0;
     }
@@ -252,8 +251,7 @@ const StyledDateRangePicker = styled(DateRangePicker)`
   .rdrDayEndOfMonth,
   .rdrDayEndOfWeek,
   .rdrDayEndOfWeek {
-    .rdrInRange,
-    .rdrEndEdge {
+    .rdrInRange {
       border-top-right-radius: 0;
       border-bottom-right-radius: 0;
     }
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 96058c5502..2b6685712e 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -9,6 +9,7 @@ import {
   DEFAULT_USE_UTC,
 } from 'app/constants';
 import {analytics} from 'app/utils/analytics';
+import {callIfFunction} from 'app/utils/callIfFunction';
 import {getLocalToUtc, getPeriodAgo, getUtcInLocal} from 'app/utils/dates';
 import {parsePeriodToHours} from 'app/utils';
 import {t} from 'app/locale';
@@ -80,29 +81,34 @@ class TimeRangeSelector extends React.PureComponent {
     this.state = {
       utc: props.utc,
       isOpen: false,
+      hasChanges: false,
+      start: props.start,
+      end: props.end,
+      relative: props.relative,
     };
   }
 
-  getSelectedStateFromProps = props => {
-    const {start, end, relative} = props || this.props;
-    return !!start && !!end ? 'absolute' : relative;
-  };
-
   handleCloseMenu = () => {
-    this.handleUpdate();
+    const {relative, start, end, utc} = this.state;
+
+    if (this.state.hasChanges) {
+      // Only call update if we close when absolute date is selected
+      this.handleUpdate({relative, start, end, utc});
+    } else {
+      this.setState({isOpen: false});
+    }
   };
 
-  handleUpdate = () => {
+  handleUpdate = datetime => {
     const {onUpdate} = this.props;
 
     this.setState(
       {
         isOpen: false,
+        hasChanges: false,
       },
       () => {
-        if (typeof onUpdate === 'function') {
-          onUpdate();
-        }
+        callIfFunction(onUpdate, datetime);
       }
     );
   };
@@ -112,7 +118,7 @@ class TimeRangeSelector extends React.PureComponent {
 
     // Set default range to equivalent of last relative period,
     // or use default stats period
-    onChange({
+    const newDateTime = {
       relative: null,
       start: getPeriodAgo(
         parsePeriodToHours(relative || DEFAULT_STATS_PERIOD),
@@ -120,29 +126,34 @@ class TimeRangeSelector extends React.PureComponent {
       ).toDate(),
       end: new Date(),
       utc: this.state.utc,
-    });
+    };
+    this.setState({hasChanges: true, ...newDateTime});
+    callIfFunction(onChange, newDateTime);
   };
 
   handleSelectRelative = value => {
     const {onChange} = this.props;
-    onChange({
+    const newDateTime = {
       relative: value,
       start: null,
       end: null,
       utc: this.state.utc,
-    });
-    this.handleUpdate();
+    };
+    callIfFunction(onChange, newDateTime);
+    this.handleUpdate(newDateTime);
   };
 
   handleSelectDateRange = ({start, end}) => {
     const {onChange} = this.props;
 
-    onChange({
+    const newDateTime = {
       relative: null,
       start,
       end,
       utc: this.state.utc,
-    });
+    };
+    this.setState({hasChanges: true, ...newDateTime});
+    callIfFunction(onChange, newDateTime);
   };
 
   handleUseUtc = () => {
@@ -153,22 +164,24 @@ class TimeRangeSelector extends React.PureComponent {
       analytics('dateselector.utc_changed', {
         utc,
       });
-
-      onChange({
+      const newDateTime = {
         relative: null,
         start: utc ? getLocalToUtc(start) : getUtcInLocal(start),
         end: utc ? getLocalToUtc(end) : getUtcInLocal(end),
         utc,
-      });
+      };
+      callIfFunction(onChange, newDateTime);
 
       return {
-        utc,
+        hasChanges: true,
+        ...newDateTime,
       };
     });
   };
 
   render() {
-    const {start, end, relative, showAbsolute, showRelative} = this.props;
+    const {showAbsolute, showRelative} = this.props;
+    const {start, end, relative} = this.state;
 
     const shouldShowAbsolute = showAbsolute;
     const shouldShowRelative = showRelative;
@@ -193,7 +206,9 @@ class TimeRangeSelector extends React.PureComponent {
               icon={<StyledInlineSvg src="icon-calendar" />}
               isOpen={isOpen}
               hasSelected={true}
+              hasChanges={this.state.hasChanges}
               allowClear={false}
+              onSubmit={this.handleCloseMenu}
               {...getActorProps({isStyled: true})}
             >
               {getDynamicText({value: summary, fixed: 'start to end'})}
diff --git a/src/sentry/static/sentry/app/sentryTypes.jsx b/src/sentry/static/sentry/app/sentryTypes.jsx
index 66c10ebae1..c825842aff 100644
--- a/src/sentry/static/sentry/app/sentryTypes.jsx
+++ b/src/sentry/static/sentry/app/sentryTypes.jsx
@@ -350,6 +350,17 @@ export const SentryApplication = PropTypes.shape({
   status: PropTypes.string,
 });
 
+export const GlobalSelection = PropTypes.shape({
+  projects: PropTypes.arrayOf(PropTypes.number),
+  environments: PropTypes.arrayOf(PropTypes.string),
+  datetime: PropTypes.shape({
+    period: PropTypes.string,
+    start: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
+    end: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
+    utc: PropTypes.bool,
+  }),
+});
+
 export const EChartsData = PropTypes.arrayOf(
   PropTypes.oneOfType([
     // `PercentageBarChart` has a fixed dataset of 0, 25, 50, 100
@@ -857,6 +868,7 @@ let SentryTypes = {
   Organization: PropTypes.shape({
     id: PropTypes.string.isRequired,
   }),
+  GlobalSelection,
   Group,
   Tag,
   PageLinks,
diff --git a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
index d71afa0376..219bb9c5e2 100644
--- a/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
+++ b/src/sentry/static/sentry/app/stores/globalSelectionStore.jsx
@@ -1,41 +1,78 @@
+import {isEqual} from 'lodash';
 import Reflux from 'reflux';
 
-import {DEFAULT_STATS_PERIOD} from 'app/constants';
-
+import {DATE_TIME} from 'app/components/organizations/globalSelectionHeader/constants';
+import {DEFAULT_STATS_PERIOD, DEFAULT_USE_UTC} from 'app/constants';
+import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import GlobalSelectionActions from 'app/actions/globalSelectionActions';
 
+const DEFAULT_SELECTION = {
+  projects: [],
+  environments: [],
+  datetime: {
+    [DATE_TIME.START]: null,
+    [DATE_TIME.END]: null,
+    [DATE_TIME.PERIOD]: DEFAULT_STATS_PERIOD,
+    [DATE_TIME.UTC]: DEFAULT_USE_UTC,
+  },
+};
+
 /**
  * Store for global selections
  * Currently stores active project ids for Discover and EventStream
  */
 const GlobalSelectionStore = Reflux.createStore({
   init() {
-    this.selection = {
-      projects: [],
-      environments: [],
-      datetime: {start: null, end: null, range: DEFAULT_STATS_PERIOD},
-    };
+    this.reset();
     this.listenTo(GlobalSelectionActions.updateProjects, this.updateProjects);
     this.listenTo(GlobalSelectionActions.updateDateTime, this.updateDateTime);
     this.listenTo(GlobalSelectionActions.updateEnvironments, this.updateEnvironments);
   },
 
+  reset(state) {
+    this.selection = state || DEFAULT_SELECTION;
+  },
+
   get() {
     return this.selection;
   },
 
   updateProjects(projects = []) {
-    this.selection.projects = projects;
+    if (isEqual(this.selection.projects, projects)) {
+      return;
+    }
+
+    this.selection = {
+      ...this.selection,
+      projects,
+    };
     this.trigger(this.selection);
   },
 
   updateDateTime(datetime) {
-    this.selection.datetime = datetime;
+    if (isEqualWithDates(this.selection.datetime, datetime)) {
+      return;
+    }
+
+    this.selection = {
+      ...this.selection,
+      datetime: {
+        ...this.selection.datetime,
+        ...datetime,
+      },
+    };
     this.trigger(this.selection);
   },
 
   updateEnvironments(environments = []) {
-    this.selection.environments = environments;
+    if (isEqual(this.selection.environments, environments)) {
+      return;
+    }
+
+    this.selection = {
+      ...this.selection,
+      environments,
+    };
     this.trigger(this.selection);
   },
 });
diff --git a/src/sentry/static/sentry/app/utils/callIfFunction.jsx b/src/sentry/static/sentry/app/utils/callIfFunction.jsx
new file mode 100644
index 0000000000..84a67a6b8e
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/callIfFunction.jsx
@@ -0,0 +1,4 @@
+// Checks if `fn` is a function and calls it with `args`
+export function callIfFunction(fn, ...args) {
+  return typeof fn === 'function' && fn(...args);
+}
diff --git a/src/sentry/static/sentry/app/utils/isEqualWithDates.jsx b/src/sentry/static/sentry/app/utils/isEqualWithDates.jsx
new file mode 100644
index 0000000000..869f0f7790
--- /dev/null
+++ b/src/sentry/static/sentry/app/utils/isEqualWithDates.jsx
@@ -0,0 +1,18 @@
+import {isDate, isEqualWith} from 'lodash';
+
+// `lodash.isEqual` does not compare date objects
+const dateComparator = (value, other) => {
+  if (isDate(value) && isDate(other)) {
+    return +value === +other;
+  }
+
+  // Loose checking
+  if (!value && !other) {
+    return true;
+  }
+
+  // returning undefined will use default comparator
+  return undefined;
+};
+
+export const isEqualWithDates = (a, b) => isEqualWith(a, b, dateComparator);
diff --git a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx b/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
index 934684eabd..7d0e83f5ab 100644
--- a/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
+++ b/src/sentry/static/sentry/app/utils/withGlobalSelection.jsx
@@ -25,7 +25,7 @@ const withGlobalSelection = WrappedComponent =>
       });
     },
     render() {
-      return <WrappedComponent {...this.props} selection={this.state.selection} />;
+      return <WrappedComponent selection={this.state.selection} {...this.props} />;
     },
   });
 
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index 62d80212ad..36660b1909 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -1,40 +1,18 @@
+import {browserHistory} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment';
-import {browserHistory} from 'react-router';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
 import {getUtcDateString} from 'app/utils/dates';
-import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import {t, tct} from 'app/locale';
-
-import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
-import HeaderSeparator from 'app/components/organizations/headerSeparator';
-import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
-import SentryTypes from 'app/sentryTypes';
-import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
+import {updateProjects, updateDateTime} from 'app/actionCreators/globalSelection';
 import BetaTag from 'app/components/betaTag';
+import SentryTypes from 'app/sentryTypes';
 
-import Result from './result';
-import ResultLoading from './result/loading';
-import Intro from './intro';
-import NewQuery from './sidebar/newQuery';
-import EditSavedQuery from './sidebar/editSavedQuery';
-import SavedQueryList from './sidebar/savedQueryList';
-import QueryPanel from './sidebar/queryPanel';
-
-import createResultManager from './resultManager';
-import {
-  getQueryStringFromQuery,
-  getQueryFromQueryString,
-  deleteSavedQuery,
-  updateSavedQuery,
-} from './utils';
-import {isValidCondition} from './conditions/utils';
-import {isValidAggregation} from './aggregations/utils';
 import {
   DiscoverContainer,
-  DiscoverHeader,
+  DiscoverGlobalSelectionHeader,
   Body,
   BodyContent,
   HeadingContainer,
@@ -43,8 +21,23 @@ import {
   SidebarTabs,
   SavedQueryWrapper,
 } from './styles';
-
+import {
+  getQueryStringFromQuery,
+  getQueryFromQueryString,
+  deleteSavedQuery,
+  updateSavedQuery,
+} from './utils';
+import {isValidAggregation} from './aggregations/utils';
+import {isValidCondition} from './conditions/utils';
 import {trackQuery} from './analytics';
+import EditSavedQuery from './sidebar/editSavedQuery';
+import Intro from './intro';
+import NewQuery from './sidebar/newQuery';
+import QueryPanel from './sidebar/queryPanel';
+import Result from './result';
+import ResultLoading from './result/loading';
+import SavedQueryList from './sidebar/savedQueryList';
+import createResultManager from './resultManager';
 
 export default class OrganizationDiscover extends React.Component {
   static propTypes = {
@@ -103,14 +96,37 @@ export default class OrganizationDiscover extends React.Component {
       return;
     }
 
+    const newQuery = getQueryFromQueryString(search);
     // Clear data only if location.search is empty (reset has been called)
     if (!search && !params.savedQueryId) {
-      const newQuery = getQueryFromQueryString(search);
       queryBuilder.reset(newQuery);
       resultManager.reset();
       this.setState({
         data: resultManager.getAll(),
       });
+    } else if (search) {
+      // This indicates navigation changes (e.g. back button on browser)
+      // We need to update our search store and probably runQuery
+      const {projects, range, start, end} = newQuery;
+      let hasChange = false;
+
+      if (projects) {
+        this.updateProjects(projects);
+        hasChange = true;
+      }
+
+      if (range || (end && start)) {
+        this.updateDateTime({
+          period: range || null,
+          start: start || null,
+          end: end || null,
+        });
+        hasChange = true;
+      }
+
+      if (hasChange) {
+        this.runQuery();
+      }
     }
   }
 
@@ -119,14 +135,30 @@ export default class OrganizationDiscover extends React.Component {
     updateProjects(val);
   };
 
-  updateDateTime = ({relative, start, end}) => {
-    const datetimeFields = {
-      range: relative,
-      start: (start && getUtcDateString(start)) || start,
-      end: (end && getUtcDateString(end)) || end,
-    };
-    this.updateFields(datetimeFields);
-    updateDateTime(datetimeFields);
+  getDateTimeFields = ({period, start, end}) => ({
+    range: period || null,
+    start: (start && getUtcDateString(start)) || null,
+    end: (end && getUtcDateString(end)) || null,
+  });
+
+  changeTime = datetime => {
+    this.updateFields(this.getDateTimeFields(datetime));
+  };
+
+  updateDateTime = datetime => {
+    const {start, end, range} = this.getDateTimeFields(datetime);
+
+    this.updateFields({start, end, range});
+    updateDateTime({
+      start,
+      end,
+      period: range,
+    });
+  };
+
+  updateDateTimeAndRun = datetime => {
+    this.updateDateTime(datetime);
+    this.runQuery();
   };
 
   updateField = (field, value) => {
@@ -358,31 +390,25 @@ export default class OrganizationDiscover extends React.Component {
               </QueryPanel>
             )}
         </Sidebar>
-        <DiscoverHeader>
-          <HeaderItemPosition>
-            <MultipleProjectSelector
-              value={currentQuery.projects}
-              organization={organization}
-              projects={projects}
-              onChange={this.updateProjects}
-              onUpdate={this.runQuery}
-            />
-          </HeaderItemPosition>
-          <HeaderSeparator />
-          <HeaderItemPosition>
-            <TimeRangeSelector
-              showAbsolute={true}
-              showRelative={true}
-              useUtc={true}
-              start={start}
-              end={end}
-              relative={currentQuery.range}
-              onChange={this.updateDateTime}
-              onUpdate={this.runQuery}
-            />
-          </HeaderItemPosition>
-          <HeaderSeparator />
-        </DiscoverHeader>
+
+        <DiscoverGlobalSelectionHeader
+          organization={organization}
+          projects={projects}
+          project={currentQuery.projects}
+          hasCustomRouting={true}
+          showAbsolute={true}
+          showRelative={true}
+          relative={currentQuery.range}
+          start={start}
+          end={end}
+          utc={true}
+          showEnvironmentSelector={false}
+          onChangeProjects={this.updateProjects}
+          onUpdateProjects={this.runQuery}
+          onChangeTime={this.changeTime}
+          onUpdateTime={this.updateDateTimeAndRun}
+        />
+
         <Body>
           <BodyContent>
             {shouldDisplayResult && (
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
index 125a807acc..bf100b93b8 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/index.jsx
@@ -56,13 +56,13 @@ class OrganizationDiscoverContainer extends React.Component {
       updateDateTime({
         start: query.start || null,
         end: query.end || null,
-        range: query.range || null,
+        period: query.range || null,
       });
     } else {
       // Update query with global projects
       query.start = props.selection.datetime.start;
       query.end = props.selection.datetime.end;
-      query.range = props.selection.datetime.range;
+      query.range = props.selection.datetime.period;
     }
 
     this.queryBuilder = createQueryBuilder(query, organization);
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 08deaea5dd..cba372ba0a 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -1,16 +1,15 @@
-import React from 'react';
-import styled from 'react-emotion';
 import {Flex, Box} from 'grid-emotion';
 import {keyframes} from 'emotion';
-
-import space from 'app/styles/space';
-import {slideInLeft} from 'app/styles/animations';
+import React from 'react';
+import styled from 'react-emotion';
 
 import {Panel, PanelItem} from 'app/components/panels';
+import {slideInLeft} from 'app/styles/animations';
 import Button from 'app/components/button';
-import NavTabs from 'app/components/navTabs';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import Link from 'app/components/link';
-import Header from 'app/components/organizations/header';
+import NavTabs from 'app/components/navTabs';
+import space from 'app/styles/space';
 import theme from 'app/utils/theme';
 import InlineSvg from 'app/components/inlineSvg';
 import ExternalLink from 'app/components/externalLink';
@@ -33,7 +32,7 @@ export const DiscoverContainer = styled(Flex)`
   }
 `;
 
-export const DiscoverHeader = styled(Header)`
+export const DiscoverGlobalSelectionHeader = styled(GlobalSelectionHeader)`
   position: absolute;
   top: 0;
   left: 0;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
index 8a4be03255..11ed33e117 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/events.jsx
@@ -149,7 +149,11 @@ class OrganizationEvents extends AsyncView {
       <React.Fragment>
         {error && super.renderError(new Error('Unable to load all required endpoints'))}
         <Panel>
-          <EventsChart organization={organization} onZoom={this.handleZoom} />
+          <EventsChart
+            zoom={!!location.query.zoom}
+            organization={organization}
+            onZoom={this.handleZoom}
+          />
         </Panel>
 
         <EventsTable
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
index 50932421f7..60f66e0ba4 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/eventsChart.jsx
@@ -1,44 +1,37 @@
-import {pick, isDate, isEqual, isEqualWith} from 'lodash';
+import {pick, isEqual} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import moment from 'moment';
 
 import {getFormattedDate} from 'app/utils/dates';
+import {isEqualWithDates} from 'app/utils/isEqualWithDates';
 import {t} from 'app/locale';
+import {updateParams} from 'app/actionCreators/globalSelection';
 import DataZoom from 'app/components/charts/components/dataZoom';
 import LineChart from 'app/components/charts/lineChart';
 import SentryTypes from 'app/sentryTypes';
 import ToolBox from 'app/components/charts/components/toolBox';
 import withApi from 'app/utils/withApi';
 
-import EventsRequest from './utils/eventsRequest';
 import EventsContext from './utils/eventsContext';
+import EventsRequest from './utils/eventsRequest';
 
 const DEFAULT_GET_CATEGORY = () => t('Events');
 
-const dateComparator = (value, other) => {
-  if (isDate(value) && isDate(other)) {
-    return +value === +other;
-  }
-
-  // returning undefined will use default comparator
-  return undefined;
-};
-
-const isEqualWithDates = (a, b) => isEqualWith(a, b, dateComparator);
 const getDate = date =>
   date ? moment.utc(date).format(moment.HTML5_FMT.DATETIME_LOCAL_SECONDS) : null;
 
 class EventsChart extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
-    actions: PropTypes.object,
+    router: PropTypes.object,
     period: PropTypes.string,
     query: PropTypes.string,
     start: PropTypes.instanceOf(Date),
     end: PropTypes.instanceOf(Date),
     utc: PropTypes.bool,
+    zoom: PropTypes.bool,
 
     // Callback for when chart has been zoomed
     onZoom: PropTypes.func,
@@ -61,24 +54,22 @@ class EventsChart extends React.Component {
     const nextPeriod = pick(nextProps, periodKeys);
     const currentPeriod = pick(this.props, periodKeys);
     const otherKeys = ['query', 'project', 'environment'];
+    const zoom = nextProps.zoom;
 
     // Exception for these parameters -- needs to re-render chart
-    if (
-      !nextProps.zoom &&
-      !isEqual(pick(nextProps, otherKeys), pick(this.props, otherKeys))
-    ) {
+    if (!zoom && !isEqual(pick(nextProps, otherKeys), pick(this.props, otherKeys))) {
       return true;
     }
 
     if (
-      nextProps.zoom &&
+      zoom &&
       this.useHourlyInterval(nextProps) !== this.useHourlyInterval(this.props)
     ) {
       return true;
     }
 
     // do not update if we are zooming or if period via props does not change
-    if (nextProps.zoom || isEqualWithDates(currentPeriod, nextPeriod)) {
+    if (zoom || isEqualWithDates(currentPeriod, nextPeriod)) {
       return false;
     }
 
@@ -146,12 +137,15 @@ class EventsChart extends React.Component {
     }
 
     this.zooming = () => {
-      this.props.actions.updateParams({
-        statsPeriod: period,
-        start: startFormatted,
-        end: endFormatted,
-        zoom: '1',
-      });
+      updateParams(
+        {
+          period,
+          start: startFormatted,
+          end: endFormatted,
+          zoom: '1',
+        },
+        this.props.router
+      );
 
       this.saveCurrentPeriod({period, start, end});
     };
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index cdb4b2093c..6bd9822054 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -1,217 +1,35 @@
 import {Flex} from 'grid-emotion';
-import {isDate, isEqual, isEqualWith} from 'lodash';
 import {withRouter} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {DEFAULT_STATS_PERIOD, DEFAULT_USE_UTC} from 'app/constants';
-import {defined} from 'app/utils';
-import {getLocalDateObject, getUtcDateString} from 'app/utils/dates';
+import {getParams} from 'app/views/organizationEvents/utils/getParams';
 import {t} from 'app/locale';
 import BetaTag from 'app/components/betaTag';
 import Feature from 'app/components/acl/feature';
-import Header from 'app/components/organizations/header';
-import HeaderSeparator from 'app/components/organizations/headerSeparator';
-import HeaderItemPosition from 'app/components/organizations/headerItemPosition';
-import MultipleEnvironmentSelector from 'app/components/organizations/multipleEnvironmentSelector';
-import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
+import GlobalSelectionHeader from 'app/components/organizations/globalSelectionHeader';
 import SentryTypes from 'app/sentryTypes';
-import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
 import space from 'app/styles/space';
-import {
-  updateProjects,
-  updateDateTime,
-  updateEnvironments,
-} from 'app/actionCreators/globalSelection';
 import withGlobalSelection from 'app/utils/withGlobalSelection';
 import withOrganization from 'app/utils/withOrganization';
 
-import SearchBar from './searchBar';
-import {getParams} from './utils/getParams';
 import EventsContext from './utils/eventsContext';
-
-// `lodash.isEqual` does not compare date objects properly?
-const dateComparator = (value, other) => {
-  if (isDate(value) && isDate(other)) {
-    return +value === +other;
-  }
-
-  // returning undefined will use default comparator
-  return undefined;
-};
-
-const isEqualWithDates = (a, b) => isEqualWith(a, b, dateComparator);
-const isEqualWithEmptyArrays = (newQuery, current) => {
-  // We will only get empty arrays from `newQuery`
-  // Can't use isEqualWith because keys are unbalanced (guessing)
-  return isEqual(
-    Object.entries(newQuery)
-      .filter(([, value]) => !Array.isArray(value) || !!value.length)
-      .reduce(
-        (acc, [key, value]) => ({
-          ...acc,
-          [key]: value,
-        }),
-        {}
-      ),
-    current
-  );
-};
+import SearchBar from './searchBar';
 
 class OrganizationEventsContainer extends React.Component {
   static propTypes = {
     organization: SentryTypes.Organization,
+    selection: SentryTypes.GlobalSelection,
     router: PropTypes.object,
   };
 
-  static getStateFromRouter(props) {
-    const {query} = props.router.location;
-    const hasAbsolute =
-      (!!query.start && !!query.end) ||
-      (!!props.selection.start && !!props.selection.end);
-    let project = props.selection.projects;
-    let environment = query.environment || props.selection.environments;
-
-    if (defined(query.project) && Array.isArray(query.project)) {
-      project = query.project.map(p => parseInt(p, 10));
-    } else if (defined(query.project)) {
-      const projectIdInt = parseInt(query.project, 10);
-      project = isNaN(projectIdInt) ? [] : [projectIdInt];
-    }
-
-    if (defined(query.environment) && !Array.isArray(query.environment)) {
-      environment = [query.environment];
-    }
-
-    let start = query.start || props.selection.start;
-    let end = query.end || props.selection.end;
-
-    if (hasAbsolute) {
-      start = getLocalDateObject(start);
-      end = getLocalDateObject(end);
-    }
-
-    return {
-      project,
-      environment,
-      period:
-        query.statsPeriod ||
-        props.selection.datetime.range ||
-        (hasAbsolute ? null : DEFAULT_STATS_PERIOD),
-      query: query.query || null,
-      start: start || null,
-      end: end || null,
-
-      // params from URL will be a string
-      utc: typeof query.utc !== 'undefined' ? query.utc === 'true' : DEFAULT_USE_UTC,
-      zoom: typeof query.zoom !== 'undefined' ? query.zoom === '1' : null,
-    };
-  }
-
-  static getDerivedStateFromProps(props, state) {
-    const values = OrganizationEventsContainer.getStateFromRouter(props);
-
-    // Update `queryValues` if URL parameters change
-    if (!isEqualWithDates(state.queryValues, values)) {
-      return {
-        ...values,
-        queryValues: values,
-      };
-    }
-
-    return null;
-  }
-
   constructor(props) {
     super(props);
 
-    this.actions = {
-      updateParams: this.updateParams,
-    };
     this.state = {};
   }
 
-  componentDidMount() {
-    this.handleUpdateProjects();
-    this.handleUpdateEnvironmments();
-    this.handleUpdatePeriod();
-  }
-
-  updateParams = obj => {
-    const {router} = this.props;
-    // Reset cursor when changing parameters
-    // eslint-disable-next-line no-unused-vars
-    const {cursor, statsPeriod, ...oldQuery} = router.location.query;
-
-    const newQuery = getParams({
-      ...oldQuery,
-      period: !obj.start && !obj.end ? obj.period || statsPeriod : null,
-      ...obj,
-    });
-
-    if (newQuery.start) {
-      newQuery.start = getUtcDateString(newQuery.start);
-    }
-
-    if (newQuery.end) {
-      newQuery.end = getUtcDateString(newQuery.end);
-    }
-
-    // Only push new location if query params has changed because this will cause a heavy re-render
-    if (isEqualWithEmptyArrays(newQuery, router.location.query)) {
-      return;
-    }
-
-    router.push({
-      pathname: router.location.pathname,
-      query: newQuery,
-    });
-  };
-
-  handleChangeProjects = projects => {
-    this.setState({
-      project: projects,
-    });
-    updateProjects(projects);
-  };
-
-  handleChangeEnvironments = environments => {
-    this.setState({
-      environment: environments,
-    });
-    updateEnvironments(environments);
-  };
-
-  handleChangeTime = ({start, end, relative, utc}) => {
-    this.setState({start, end, period: relative, utc});
-    updateDateTime({
-      start,
-      end,
-      range: relative,
-    });
-  };
-
-  handleUpdatePeriod = () => {
-    let {period, start, end, utc} = this.state;
-    let newValueObj = {
-      ...(defined(period) ? {period} : {start, end}),
-      utc,
-      zoom: null,
-    };
-
-    this.updateParams(newValueObj);
-  };
-
-  handleUpdate = type => {
-    let newValueObj = {[type]: this.state[type], zoom: null};
-    this.updateParams(newValueObj);
-  };
-
-  handleUpdateEnvironmments = () => this.handleUpdate('environment');
-
-  handleUpdateProjects = () => this.handleUpdate('project');
-
   handleSearch = query => {
     let {router, location} = this.props;
     router.push({
@@ -225,49 +43,29 @@ class OrganizationEventsContainer extends React.Component {
   };
 
   render() {
-    const {organization, location, children} = this.props;
-    const {period, start, end, utc} = this.state;
+    const {organization, location, selection, children} = this.props;
 
     const projects =
       organization.projects && organization.projects.filter(({isMember}) => isMember);
 
     return (
-      <EventsContext.Provider value={{actions: this.actions, ...this.state.queryValues}}>
+      <EventsContext.Provider
+        value={{
+          project: selection.projects,
+          environment: selection.environments,
+          ...selection.datetime,
+        }}
+      >
         <OrganizationEventsContent>
           <Feature features={['global-views']} renderDisabled>
-            <Header>
-              <HeaderItemPosition>
-                <MultipleProjectSelector
-                  organization={organization}
-                  projects={projects}
-                  value={this.state.project}
-                  onChange={this.handleChangeProjects}
-                  onUpdate={this.handleUpdateProjects}
-                />
-              </HeaderItemPosition>
-              <HeaderSeparator />
-              <HeaderItemPosition>
-                <MultipleEnvironmentSelector
-                  organization={organization}
-                  value={this.state.environment}
-                  onChange={this.handleChangeEnvironments}
-                  onUpdate={this.handleUpdateEnvironmments}
-                />
-              </HeaderItemPosition>
-              <HeaderSeparator />
-              <HeaderItemPosition>
-                <TimeRangeSelector
-                  showAbsolute
-                  showRelative
-                  relative={period}
-                  start={start}
-                  end={end}
-                  utc={utc}
-                  onChange={this.handleChangeTime}
-                  onUpdate={this.handleUpdatePeriod}
-                />
-              </HeaderItemPosition>
-            </Header>
+            <GlobalSelectionHeader
+              organization={organization}
+              projects={projects}
+              initializeWithUrlParams={true}
+              showAbsolute={true}
+              showRelative={true}
+            />
+
             <Body>
               <Flex align="center" justify="space-between" mb={2}>
                 <HeaderTitle>
diff --git a/tests/js/helpers/index.jsx b/tests/js/helpers/index.jsx
new file mode 100644
index 0000000000..bd8dbed2fc
--- /dev/null
+++ b/tests/js/helpers/index.jsx
@@ -0,0 +1,4 @@
+export * from './charts';
+export * from './initializeOrg';
+export * from './mockRouterPush';
+export * from './select';
diff --git a/tests/js/helpers/initializeOrg.jsx b/tests/js/helpers/initializeOrg.jsx
new file mode 100644
index 0000000000..d662132c95
--- /dev/null
+++ b/tests/js/helpers/initializeOrg.jsx
@@ -0,0 +1,43 @@
+/**
+ * Creates stubs for:
+ *   - a project or projects
+ *   - organization owning above projects
+ *   - router
+ *   - context that contains org + projects + router
+ */
+export function initializeOrg(
+  {
+    organization: additionalOrg,
+    project: additionalProject,
+    projects: additionalProjects,
+    router: additionalRouter,
+  } = {}
+) {
+  const projects = (additionalProjects ||
+    (additionalProject && [additionalProject]) || [{}]
+  ).map(p => TestStubs.Project(p));
+  const [project] = projects;
+  const organization = TestStubs.Organization({
+    projects,
+    ...additionalOrg,
+  });
+  const router = TestStubs.router(additionalRouter);
+
+  const routerContext = TestStubs.routerContext([
+    {
+      organization,
+      project,
+      router,
+      location: router.location,
+    },
+  ]);
+
+  return {
+    org: organization,
+    organization,
+    project,
+    projects,
+    router,
+    routerContext,
+  };
+}
diff --git a/tests/js/helpers/mockRouterPush.jsx b/tests/js/helpers/mockRouterPush.jsx
new file mode 100644
index 0000000000..369558fa17
--- /dev/null
+++ b/tests/js/helpers/mockRouterPush.jsx
@@ -0,0 +1,21 @@
+// More closely mocks a router push -- updates wrapper's props/context
+// with updated `router` and calls `wrapper.update()`
+export function mockRouterPush(wrapper, router) {
+  router.push.mockImplementation(({pathname, query}) => {
+    const location = {
+      ...router.location,
+      query,
+    };
+    let newRouter = {
+      router: {
+        ...router,
+        location,
+      },
+      location,
+    };
+    wrapper.setProps(newRouter);
+    wrapper.setContext(newRouter);
+
+    wrapper.update();
+  });
+}
diff --git a/tests/js/spec/stores/globalSelectionStore.spec.jsx b/tests/js/spec/stores/globalSelectionStore.spec.jsx
index 87ee4b8995..460c4d2a6e 100644
--- a/tests/js/spec/stores/globalSelectionStore.spec.jsx
+++ b/tests/js/spec/stores/globalSelectionStore.spec.jsx
@@ -10,7 +10,7 @@ describe('GlobalSelectionStore', function() {
     expect(GlobalSelectionStore.get()).toEqual({
       projects: [],
       environments: [],
-      datetime: {range: '14d', start: null, end: null},
+      datetime: {period: '14d', start: null, end: null, utc: true},
     });
   });
 
@@ -22,12 +22,12 @@ describe('GlobalSelectionStore', function() {
   });
 
   it('updateDateTime()', async function() {
-    expect(GlobalSelectionStore.get().datetime.range).toEqual('14d');
-    updateDateTime({range: '2h', start: null, end: null});
+    expect(GlobalSelectionStore.get().datetime.period).toEqual('14d');
+    updateDateTime({period: '2h', start: null, end: null});
     await tick();
-    expect(GlobalSelectionStore.get().datetime.range).toEqual('2h');
+    expect(GlobalSelectionStore.get().datetime.period).toEqual('2h');
     updateDateTime({
-      range: null,
+      period: null,
       start: '2018-08-08T00:00:00',
       end: '2018-09-08T00:00:00',
     });
diff --git a/tests/js/spec/utils/withGlobalSelection.spec.jsx b/tests/js/spec/utils/withGlobalSelection.spec.jsx
index 17e7124a4f..99a129b1a8 100644
--- a/tests/js/spec/utils/withGlobalSelection.spec.jsx
+++ b/tests/js/spec/utils/withGlobalSelection.spec.jsx
@@ -17,6 +17,7 @@ describe('withGlobalSelection HoC', function() {
     expect(wrapper.find('MyComponent').prop('selection').projects).toEqual([]);
 
     GlobalSelectionStore.updateProjects([1]);
+    wrapper.update();
 
     expect(wrapper.find('MyComponent').prop('selection').projects).toEqual([1]);
   });
@@ -26,18 +27,19 @@ describe('withGlobalSelection HoC', function() {
     let Container = withGlobalSelection(MyComponent);
     let wrapper = mount(<Container />);
 
-    expect(wrapper.find('MyComponent').prop('selection').datetime.range).toEqual('14d');
+    expect(wrapper.find('MyComponent').prop('selection').datetime.period).toEqual('14d');
 
     GlobalSelectionStore.updateDateTime({
-      range: '7d',
+      period: '7d',
       start: null,
       end: null,
     });
+    wrapper.update();
 
-    expect(wrapper.find('MyComponent').prop('selection').datetime.range).toEqual('7d');
+    expect(wrapper.find('MyComponent').prop('selection').datetime.period).toEqual('7d');
 
     GlobalSelectionStore.updateDateTime({
-      range: null,
+      period: null,
       start: '2018-08-08T00:00:00',
       end: '2018-08-08T00:00:00',
     });
@@ -51,6 +53,7 @@ describe('withGlobalSelection HoC', function() {
     expect(wrapper.find('MyComponent').prop('selection').environments).toEqual([]);
 
     GlobalSelectionStore.updateEnvironments(['beta', 'alpha']);
+    wrapper.update();
 
     expect(wrapper.find('MyComponent').prop('selection').environments).toEqual([
       'beta',
diff --git a/tests/js/spec/views/organizationDiscover/discover.spec.jsx b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
index 9e7dc6fe5d..30fba4a544 100644
--- a/tests/js/spec/views/organizationDiscover/discover.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/discover.spec.jsx
@@ -1,8 +1,9 @@
-import React from 'react';
-import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
+import React from 'react';
 
+import {mount} from 'enzyme';
 import Discover from 'app/views/organizationDiscover/discover';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
 import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
 describe('Discover', function() {
@@ -11,6 +12,7 @@ describe('Discover', function() {
     project = TestStubs.Project();
     organization = TestStubs.Organization({projects: [project]});
     queryBuilder = createQueryBuilder({}, organization);
+    GlobalSelectionStore.reset();
   });
 
   afterEach(function() {
@@ -92,6 +94,34 @@ describe('Discover', function() {
       expect(wrapper.find('NewQuery')).toHaveLength(0);
       expect(wrapper.find('EditSavedQuery')).toHaveLength(1);
     });
+
+    it('handles navigating to new date', async function() {
+      const wrapper = mount(
+        <Discover
+          queryBuilder={queryBuilder}
+          organization={organization}
+          updateSavedQueryData={jest.fn()}
+          location={{search: ''}}
+          params={{}}
+          toggleEditMode={jest.fn()}
+          isLoading={false}
+        />,
+        TestStubs.routerContext([{organization}])
+      );
+
+      expect(wrapper.find('TimeRangeSelector').text()).toEqual('Last 14 days');
+      wrapper.setProps({
+        location: {
+          search:
+            'projects=%5B%5D&fields=%5B%22id%22%2C%22issue.id%22%2C%22project.name%22%2C%22platform%22%2C%22timestamp%22%5D&conditions=%5B%5D&aggregations=%5B%5D&range=%227d%22&orderby=%22-timestamp%22&limit=1000&start=null&end=null',
+        },
+      });
+      await tick();
+      wrapper.update();
+      expect(wrapper.find('TimeRangeSelector').text()).toEqual('Last 7 days');
+
+      // TODO: check that query is run with correct params
+    });
   });
 
   describe('Pagination', function() {
@@ -553,13 +583,19 @@ describe('Discover', function() {
         })
       );
 
+      query.mockClear();
+
       // Select absolute date
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
-      wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+      await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
+
+      expect(query).not.toHaveBeenCalled();
 
       // Hide date picker
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
+      await tick();
+
       // Should make request for the last 14 days as an absolute date range
       expect(query).toHaveBeenLastCalledWith(
         expect.anything(),
@@ -586,6 +622,9 @@ describe('Discover', function() {
       // Hide date picker
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
+      await tick();
+      wrapper.update();
+
       // Should make request for the last 14 days as an absolute date range
       expect(query).toHaveBeenLastCalledWith(
         expect.anything(),
diff --git a/tests/js/spec/views/organizationDiscover/index.spec.jsx b/tests/js/spec/views/organizationDiscover/index.spec.jsx
index 9a7f8d69e8..e321666995 100644
--- a/tests/js/spec/views/organizationDiscover/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/index.spec.jsx
@@ -3,7 +3,10 @@ import PropTypes from 'prop-types';
 import {mount} from 'enzyme';
 import {browserHistory} from 'react-router';
 
-import {OrganizationDiscoverContainer} from 'app/views/organizationDiscover';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
+import OrganizationDiscoverContainerWithStore, {
+  OrganizationDiscoverContainer,
+} from 'app/views/organizationDiscover';
 
 describe('OrganizationDiscoverContainer', function() {
   beforeEach(function() {
@@ -46,16 +49,17 @@ describe('OrganizationDiscoverContainer', function() {
       expect(queryBuilder.getColumns().some(column => column.name === 'tag2')).toBe(true);
     });
 
-    it('sets active projects from global selection', function() {
+    it('sets active projects from global selection', async function() {
+      GlobalSelectionStore.reset({
+        projects: [1],
+        environments: [],
+        datetime: {start: null, end: null, period: '14d'},
+      });
+
       wrapper = mount(
-        <OrganizationDiscoverContainer
+        <OrganizationDiscoverContainerWithStore
           location={{query: {}, search: ''}}
           params={{}}
-          selection={{
-            projects: [1],
-            environments: [],
-            datetime: {start: null, end: null, range: '14d'},
-          }}
         />,
         TestStubs.routerContext([{organization}])
       );
diff --git a/tests/js/spec/views/organizationEvents/events.spec.jsx b/tests/js/spec/views/organizationEvents/events.spec.jsx
index 93101a7fe3..0c6e8adf26 100644
--- a/tests/js/spec/views/organizationEvents/events.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/events.spec.jsx
@@ -3,11 +3,12 @@ import React from 'react';
 import {EventsChart} from 'app/views/organizationEvents/eventsChart';
 import {EventsTable} from 'app/views/organizationEvents/eventsTable';
 import {OrganizationEvents, parseRowFromLinks} from 'app/views/organizationEvents/events';
-import {OrganizationEventsContainer} from 'app/views/organizationEvents';
+import {chart, doZoom} from 'app-test-helpers/charts';
+import {initializeOrg} from 'app-test-helpers/initializeOrg';
 import {getLocalDateObject} from 'app/utils/dates';
+import {mockRouterPush} from 'app-test-helpers/mockRouterPush';
 import {mount} from 'enzyme';
-
-import {chart, doZoom} from '../../../helpers/charts';
+import OrganizationEventsContainer from 'app/views/organizationEvents';
 
 jest.mock('app/utils/withLatestContext');
 
@@ -20,9 +21,20 @@ const pageTwoLinks =
   '<https://sentry.io/api/0/organizations/sentry/events/?statsPeriod=14d&cursor=0:200:0>; rel="next"; results="false"; cursor="0:200:0"';
 
 describe('OrganizationEventsErrors', function() {
-  const project = TestStubs.Project({isMember: true});
-  const org = TestStubs.Organization({projects: [project], features: ['global-views']});
-  const routerContext = TestStubs.routerContext([{organization: org}]);
+  const {organization, router, routerContext} = initializeOrg({
+    projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
+    organization: {
+      features: ['global-views'],
+    },
+    router: {
+      location: {
+        pathname: '/organizations/org-slug/events/',
+        query: {},
+      },
+    },
+  });
+  const org = organization;
+
   let eventsMock;
   let eventsStatsMock;
   let eventsMetaMock;
@@ -143,13 +155,6 @@ describe('OrganizationEventsErrors', function() {
   });
 
   describe('Events Integration', function() {
-    const location = {
-      pathname: '/organizations/org-slug/events/',
-      query: {},
-    };
-    const router = TestStubs.router({
-      location,
-    });
     let chartRender = jest.spyOn(EventsChart.prototype, 'render');
     let tableRender = jest.spyOn(EventsTable.prototype, 'render');
     let wrapper;
@@ -158,22 +163,19 @@ describe('OrganizationEventsErrors', function() {
     beforeEach(function() {
       chartRender.mockClear();
       tableRender.mockClear();
+      router.location.query.zoom = '1';
 
       wrapper = mount(
         <OrganizationEventsContainer
           router={router}
           organization={org}
-          selection={{projects: [], environments: [], datetime: {}}}
-          location={location}
+          location={router.location}
         >
-          <OrganizationEvents
-            location={location}
-            organization={org}
-            selection={{projects: [], environments: [], datetime: {}}}
-          />
+          <OrganizationEvents location={router.location} organization={org} />
         </OrganizationEventsContainer>,
         routerContext
       );
+      mockRouterPush(wrapper, router);
     });
 
     it('renders', function() {
@@ -189,6 +191,7 @@ describe('OrganizationEventsErrors', function() {
       wrapper.update();
 
       doZoom(wrapper.find('EventsChart').first(), chart);
+      await tick();
       wrapper.update();
 
       // After zooming, chart should not re-render, but table does
@@ -204,25 +207,13 @@ describe('OrganizationEventsErrors', function() {
         end: '2018-12-02T00:00:00',
       };
 
-      expect(router.push).toHaveBeenLastCalledWith(
+      expect(routerContext.context.router.push).toHaveBeenLastCalledWith(
         expect.objectContaining({
           query: newParams,
         })
       );
 
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            ...router.location,
-            query: newParams,
-          },
-        },
-      });
-
       wrapper.update();
-      expect(wrapper.state('start')).toEqual(getLocalDateObject('2018-11-29T00:00:00'));
-      expect(wrapper.state('end')).toEqual(getLocalDateObject('2018-12-02T00:00:00'));
 
       expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(
         getLocalDateObject('2018-11-29T00:00:00')
diff --git a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
index a356fd0619..fc2f4974c5 100644
--- a/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/eventsChart.spec.jsx
@@ -1,17 +1,23 @@
 import {mount} from 'enzyme';
 import React from 'react';
 
+import {chart, doZoom, mockZoomRange} from 'app-test-helpers/charts';
+import {initializeOrg} from 'app-test-helpers/initializeOrg';
+
 import {EventsChart} from 'app/views/organizationEvents/eventsChart';
 import {getLocalDateObject} from 'app/utils/dates';
-import {chart, doZoom, mockZoomRange} from '../../../helpers/charts';
+import {updateParams} from 'app/actionCreators/globalSelection';
 
 jest.mock('app/views/organizationEvents/utils/eventsRequest', () => jest.fn(() => null));
 
+jest.mock('app/actionCreators/globalSelection', () => ({
+  updateParams: jest.fn(),
+}));
+
 describe('EventsChart', function() {
-  let wrapper;
-  let org = TestStubs.Organization();
-  let updateParams = jest.fn();
+  const {router, routerContext, org} = initializeOrg();
   let render = jest.spyOn(EventsChart.prototype, 'render');
+  let wrapper;
 
   beforeEach(function() {
     render.mockClear();
@@ -23,12 +29,13 @@ describe('EventsChart', function() {
         organization={org}
         project={[]}
         environment={[]}
-        actions={{updateParams}}
         period="14d"
         start={null}
         end={null}
         utc={false}
-      />
+        router={router}
+      />,
+      routerContext
     );
   });
 
@@ -57,17 +64,17 @@ describe('EventsChart', function() {
   it('does not re-render if zoomed', function() {
     doZoom(wrapper, chart);
     let newParams = {
-      statsPeriod: null,
+      period: null,
       start: '2018-11-29T00:00:00',
       end: '2018-12-02T00:00:00',
       zoom: '1',
     };
-    expect(updateParams).toHaveBeenCalledWith(newParams);
+    expect(updateParams).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
-      period: newParams.statsPeriod,
+      period: newParams.period,
       start: getLocalDateObject(newParams.start),
       end: getLocalDateObject(newParams.end),
-      zoom: '1',
+      zoom: true,
     });
     wrapper.update();
 
@@ -111,17 +118,17 @@ describe('EventsChart', function() {
     expect(wrapper.instance().currentPeriod.start).toEqual('2018-11-29T00:00:00');
     expect(wrapper.instance().currentPeriod.end).toEqual('2018-12-02T00:00:00');
     newParams = {
-      statsPeriod: null,
+      period: null,
       start: '2018-11-29T00:00:00',
       end: '2018-12-02T00:00:00',
       zoom: '1',
     };
-    expect(updateParams).toHaveBeenCalledWith(newParams);
+    expect(updateParams).toHaveBeenCalledWith(newParams, router);
     wrapper.setProps({
-      period: newParams.statsPeriod,
+      period: newParams.period,
       start: getLocalDateObject(newParams.start),
       end: getLocalDateObject(newParams.end),
-      zoom: '1',
+      zoom: true,
     });
     wrapper.update();
 
@@ -149,13 +156,18 @@ describe('EventsChart', function() {
       end: null,
     });
     newParams = {
-      statsPeriod: '14d',
+      period: '14d',
       start: null,
       end: null,
       zoom: '1',
     };
-    expect(updateParams).toHaveBeenCalledWith(newParams);
-    wrapper.setProps(newParams);
+    expect(updateParams).toHaveBeenCalledWith(newParams, router);
+    wrapper.setProps({
+      period: '14d',
+      start: null,
+      end: null,
+      zoom: true,
+    });
     wrapper.update();
 
     expect(wrapper.instance().history).toHaveLength(0);
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 983dea605b..2bdaaf7f69 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -1,18 +1,26 @@
 import React from 'react';
 
-import {OrganizationEventsContainer} from 'app/views/organizationEvents';
+import {initializeOrg} from 'app-test-helpers/initializeOrg';
+import {mockRouterPush} from 'app-test-helpers/mockRouterPush';
 import {mount} from 'enzyme';
 import {setActiveOrganization} from 'app/actionCreators/organizations';
+import GlobalSelectionStore from 'app/stores/globalSelectionStore';
+import OrganizationEventsContainer from 'app/views/organizationEvents';
 
 describe('OrganizationEvents', function() {
   let wrapper;
-  let router;
-  const project = TestStubs.Project({isMember: true});
-  const organization = TestStubs.Organization({
-    features: ['global-views'],
-    projects: [project, TestStubs.Project({isMember: true, slug: 'new-project', id: 3})],
+  const {organization, router, routerContext} = initializeOrg({
+    projects: [{isMember: true}, {isMember: true, slug: 'new-project', id: 3}],
+    organization: {
+      features: ['global-views'],
+    },
+    router: {
+      location: {
+        pathname: '/organizations/org-slug/events/',
+        query: {},
+      },
+    },
   });
-  const routerContext = TestStubs.routerContext([{organization}]);
 
   beforeAll(async function() {
     MockApiClient.addMockResponse({
@@ -30,28 +38,24 @@ describe('OrganizationEvents', function() {
 
   describe('Header', function() {
     beforeEach(function() {
-      router = TestStubs.router({
-        location: {
-          pathname: '/organizations/org-slug/events/',
-          query: {},
-        },
-      });
+      GlobalSelectionStore.reset();
 
+      router.location = {
+        pathname: '/organizations/org-slug/events/',
+        query: {},
+      };
       wrapper = mount(
         <OrganizationEventsContainer
           router={router}
           organization={organization}
-          selection={{
-            projects: [],
-            environments: [],
-            datetime: {start: null, end: null, range: '14d'},
-          }}
           location={router.location}
         >
           <div />
         </OrganizationEventsContainer>,
         routerContext
       );
+
+      mockRouterPush(wrapper, router);
     });
 
     it('renders', function() {
@@ -59,7 +63,7 @@ describe('OrganizationEvents', function() {
     });
 
     it('updates router when changing environments', async function() {
-      expect(wrapper.state('environment')).toEqual([]);
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([]);
 
       wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
       await tick();
@@ -70,7 +74,10 @@ describe('OrganizationEvents', function() {
         .at(0)
         .simulate('click');
 
-      expect(router.push).toHaveBeenCalledWith({
+      await tick();
+      wrapper.update();
+
+      expect(router.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
           environment: ['production'],
@@ -78,38 +85,35 @@ describe('OrganizationEvents', function() {
         },
       });
 
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            ...router.location,
-            query: {
-              environment: ['production'],
-              statsPeriod: '14d',
-            },
-          },
-        },
-      });
+      await tick();
+      wrapper.update();
 
-      expect(wrapper.state('queryValues')).toEqual(
-        expect.objectContaining({environment: ['production']})
-      );
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([
+        'production',
+      ]);
 
       // Select a second environment, "staging"
-      await wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+      await tick();
       wrapper.update();
       wrapper
         .find('EnvironmentSelectorItem')
         .at(1)
         .find('MultiSelect')
         .simulate('click');
-      // selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
-      expect(wrapper.state('environment')).toEqual(['production', 'staging']);
+
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([
+        'production',
+        'staging',
+      ]);
 
       // close dropdown
       wrapper
         .find('MultipleEnvironmentSelector StyledInput')
         .simulate('keyDown', {key: 'Escape'});
+
+      await tick();
+      wrapper.update();
       expect(router.push).toHaveBeenLastCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -118,47 +122,24 @@ describe('OrganizationEvents', function() {
         },
       });
 
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            ...router.location,
-            query: {
-              environment: ['production', 'staging'],
-              statsPeriod: '14d',
-            },
-          },
-        },
-      });
-
-      expect(wrapper.state('queryValues')).toEqual(
-        expect.objectContaining({environment: ['production', 'staging']})
-      );
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([
+        'production',
+        'staging',
+      ]);
 
       // Can clear
       wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
       await tick();
       wrapper.update();
+
       wrapper
         .find('MultipleEnvironmentSelector HeaderItem StyledClose')
         .simulate('click');
 
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            ...router.location,
-            query: {
-              environment: [],
-              statsPeriod: '14d',
-            },
-          },
-        },
-      });
+      await tick();
+      wrapper.update();
 
-      expect(wrapper.state('queryValues')).toEqual(
-        expect.objectContaining({environment: []})
-      );
+      expect(wrapper.find('MultipleEnvironmentSelector').prop('value')).toEqual([]);
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -168,8 +149,8 @@ describe('OrganizationEvents', function() {
       });
     });
 
-    it('updates router when changing projects', function() {
-      expect(wrapper.state('project')).toEqual([]);
+    it('updates router when changing projects', async function() {
+      expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([]);
 
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
@@ -178,6 +159,9 @@ describe('OrganizationEvents', function() {
         .at(0)
         .simulate('click');
 
+      await tick();
+      wrapper.update();
+
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -185,27 +169,11 @@ describe('OrganizationEvents', function() {
           statsPeriod: '14d',
         },
       });
-
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            pathname: '/organizations/org-slug/events/',
-            query: {
-              project: [2],
-              statsPeriod: '14d',
-            },
-          },
-        },
-      });
-
-      expect(wrapper.state('queryValues')).toEqual(
-        expect.objectContaining({project: [2]})
-      );
+      expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([2]);
     });
 
     it('selects multiple projects', async function() {
-      expect(wrapper.state('project')).toEqual([]);
+      expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([]);
 
       wrapper.find('MultipleProjectSelector HeaderItem').simulate('click');
 
@@ -213,13 +181,15 @@ describe('OrganizationEvents', function() {
         .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
         .at(0)
         .simulate('click');
-      expect(wrapper.state('project')).toEqual([2]);
+
+      expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([2]);
 
       wrapper
         .find('MultipleProjectSelector AutoCompleteItem MultiSelectWrapper')
         .at(1)
         .simulate('click');
-      expect(wrapper.state('project')).toEqual([2, 3]);
+
+      expect(wrapper.find('MultipleProjectSelector').prop('value')).toEqual([2, 3]);
 
       wrapper.find('MultipleProjectSelector StyledChevron').simulate('click');
 
@@ -235,7 +205,6 @@ describe('OrganizationEvents', function() {
     it('changes to absolute time (utc is default)', async function() {
       const start = new Date('2017-10-01T00:00:00.000Z');
       const end = new Date('2017-10-01T23:59:59.000Z');
-
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
       await wrapper.find('SelectorItem[value="absolute"]').simulate('click');
@@ -246,12 +215,11 @@ describe('OrganizationEvents', function() {
         .at(0)
         .simulate('mouseUp');
 
-      expect(wrapper.state('period')).toEqual(null);
-      expect(wrapper.state('start')).toEqual(start);
-      expect(wrapper.state('end')).toEqual(end);
-
       wrapper.find('TimeRangeSelector StyledChevron').simulate('click');
 
+      await tick();
+      wrapper.update();
+
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -260,6 +228,10 @@ describe('OrganizationEvents', function() {
           utc: 'true',
         },
       });
+
+      expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(start);
+      expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(end);
+      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual(null);
     });
 
     it('does not update router when toggling environment selector without changes', async function() {
@@ -288,9 +260,9 @@ describe('OrganizationEvents', function() {
     });
 
     it('updates router when changing periods', async function() {
-      expect(wrapper.state('start')).toEqual(null);
-      expect(wrapper.state('end')).toEqual(null);
-      expect(wrapper.state('period')).toEqual('14d');
+      expect(wrapper.find('TimeRangeSelector').prop('start')).toEqual(null);
+      expect(wrapper.find('TimeRangeSelector').prop('end')).toEqual(null);
+      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual('14d');
 
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
@@ -298,6 +270,9 @@ describe('OrganizationEvents', function() {
       wrapper.find('SelectorItem[value="absolute"]').simulate('click');
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
+      await tick();
+      wrapper.update();
+
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -307,21 +282,7 @@ describe('OrganizationEvents', function() {
         },
       });
 
-      wrapper.setProps({
-        router: {
-          ...router,
-          location: {
-            pathname: '/organizations/org-slug/events/',
-            query: {
-              end: '2017-10-17T02:41:20',
-              start: '2017-10-03T02:41:20',
-              utc: 'true',
-            },
-          },
-        },
-      });
-
-      expect(wrapper.state('queryValues')).toEqual(
+      expect(wrapper.find('TimeRangeSelector').props()).toEqual(
         expect.objectContaining({
           end: new Date('2017-10-17T02:41:20.000Z'),
           start: new Date('2017-10-03T02:41:20.000Z'),
@@ -334,6 +295,11 @@ describe('OrganizationEvents', function() {
       wrapper.find('SelectorItem[value="7d"]').simulate('click');
       wrapper.find('TimeRangeSelector HeaderItem').simulate('click');
 
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('TimeRangeSelector').prop('relative')).toEqual('7d');
+
       expect(router.push).toHaveBeenCalledWith({
         pathname: '/organizations/org-slug/events/',
         query: {
@@ -342,27 +308,62 @@ describe('OrganizationEvents', function() {
         },
       });
 
-      wrapper.setProps({
+      expect(wrapper.find('TimeRangeSelector').props()).toEqual(
+        expect.objectContaining({
+          end: null,
+          start: null,
+          relative: '7d',
+          utc: true,
+        })
+      );
+    });
+
+    it('updates TimeRangeSelector when changing routes', async function() {
+      let newRouter = {
+        router: {
+          ...router,
+          location: {
+            pathname: '/organizations/org-slug/events2/',
+            query: {
+              end: '2017-10-17T02:41:20',
+              start: '2017-10-03T02:41:20',
+              utc: 'true',
+            },
+          },
+        },
+      };
+      wrapper.setProps(newRouter);
+      wrapper.setContext(newRouter);
+
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('TimeRangeSelector').text()).toEqual(
+        'Oct 3, 201702:41toOct 17, 201702:41'
+      );
+
+      newRouter = {
         router: {
           ...router,
           location: {
             pathname: '/organizations/org-slug/events/',
             query: {
               statsPeriod: '7d',
+              end: null,
+              start: null,
               utc: 'true',
             },
           },
         },
-      });
+      };
 
-      expect(wrapper.state('queryValues')).toEqual(
-        expect.objectContaining({
-          end: null,
-          start: null,
-          period: '7d',
-          utc: true,
-        })
-      );
+      wrapper.setProps(newRouter);
+      wrapper.setContext(newRouter);
+
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find('TimeRangeSelector').text()).toEqual('Last 7 days');
     });
   });
 });
diff --git a/webpack.config.js b/webpack.config.js
index 992fd323e0..4a35d0a97e 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -211,6 +211,8 @@ var appConfig = {
   resolve: {
     alias: {
       app: path.join(__dirname, 'src', 'sentry', 'static', 'sentry', 'app'),
+      'app-test': path.join(__dirname, 'tests', 'js'),
+      'app-test-helpers': path.join(__dirname, 'tests', 'js', 'helpers'),
       'sentry-locale': path.join(__dirname, 'src', 'sentry', 'locale'),
       'integration-docs-platforms': IS_TEST
         ? path.join(__dirname, 'tests/fixtures/integration-docs/_platforms.json')
