commit 9641d3b7b666ad707ff3a0ef1ae0d43167f96633
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon Nov 26 11:33:47 2018 -0800

    ref(integrations): Prevent Integration Repository Errors from 500ing (#10551)
    
    * changed gitlab repo 500 errors in tests to their appropriate error codes. changed bitbucket and vsts so that they behave appropriately as well
    
    * corrected organizations in bitbucket.
    
    * Added tests for repo errors.
    
    * Added not implemented error
    
    * Called super

diff --git a/src/sentry/integrations/bitbucket/repository.py b/src/sentry/integrations/bitbucket/repository.py
index 52f70d3999..00abeb9883 100644
--- a/src/sentry/integrations/bitbucket/repository.py
+++ b/src/sentry/integrations/bitbucket/repository.py
@@ -7,7 +7,7 @@ from sentry.plugins import providers
 from sentry.models import Integration
 from sentry.utils.http import absolute_uri
 
-from sentry.integrations.exceptions import ApiError
+from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.models.apitoken import generate_token
 
 from .webhook import parse_raw_user_email, parse_raw_user_name
@@ -18,17 +18,17 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
 
     def get_installation(self, integration_id, organization_id):
         if integration_id is None:
-            raise ValueError('Bitbucket requires an integration id.')
-
-        try:
-            integration_model = Integration.objects.get(id=integration_id)
-        except Integration.DoesNotExist as error:
-            self.handle_api_error(error)
+            raise IntegrationError('Bitbucket requires an integration id.')
+        integration_model = Integration.objects.get(
+            id=integration_id,
+            organizations=organization_id,
+            provider='bitbucket',
+        )
 
         return integration_model.get_installation(organization_id)
 
     def get_repository_data(self, organization, config):
-        installation = self.get_installation(config['installation'], organization.id)
+        installation = self.get_installation(config.get('installation'), organization.id)
         client = installation.get_client()
         try:
             repo = client.get_repo(config['identifier'])
@@ -57,7 +57,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         return secret
 
     def build_repository_config(self, organization, data):
-        installation = self.get_installation(data['installation'], organization.id)
+        installation = self.get_installation(data.get('installation'), organization.id)
         client = installation.get_client()
         try:
             resp = client.create_hook(
diff --git a/src/sentry/integrations/gitlab/repository.py b/src/sentry/integrations/gitlab/repository.py
index 4881c02c53..9af6b4bd19 100644
--- a/src/sentry/integrations/gitlab/repository.py
+++ b/src/sentry/integrations/gitlab/repository.py
@@ -4,7 +4,7 @@ import dateutil.parser
 
 from django.utils import timezone
 
-from sentry.integrations.exceptions import ApiError
+from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.plugins import providers
 from sentry.models import Integration
 
@@ -14,20 +14,18 @@ class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
 
     def get_installation(self, integration_id, organization_id):
         if integration_id is None:
-            raise ValueError('%s requires an integration_id' % self.name)
+            raise IntegrationError('%s requires an integration id.' % self.name)
 
-        try:
-            integration_model = Integration.objects.get(
-                id=integration_id,
-                organizations=organization_id,
-            )
-        except Integration.DoesNotExist as error:
-            self.handle_api_error(error)
+        integration_model = Integration.objects.get(
+            id=integration_id,
+            organizations=organization_id,
+            provider='gitlab',
+        )
 
         return integration_model.get_installation(organization_id)
 
     def get_repository_data(self, organization, config):
-        installation = self.get_installation(config['installation'], organization.id)
+        installation = self.get_installation(config.get('installation'), organization.id)
         client = installation.get_client()
 
         repo_id = config['identifier']
@@ -48,7 +46,8 @@ class GitlabRepositoryProvider(providers.IntegrationRepositoryProvider):
         return config
 
     def build_repository_config(self, organization, data):
-        installation = self.get_installation(data['installation'],
+
+        installation = self.get_installation(data.get('installation'),
                                              organization.id)
         client = installation.get_client()
         hook_id = None
diff --git a/src/sentry/integrations/vsts/repository.py b/src/sentry/integrations/vsts/repository.py
index b0d690d6d3..00dd9843f7 100644
--- a/src/sentry/integrations/vsts/repository.py
+++ b/src/sentry/integrations/vsts/repository.py
@@ -4,6 +4,7 @@ import six
 
 from sentry.plugins import providers
 from sentry.models import Integration
+from sentry.integrations.exceptions import IntegrationError
 
 MAX_COMMIT_DATA_REQUESTS = 90
 
@@ -13,17 +14,18 @@ class VstsRepositoryProvider(providers.IntegrationRepositoryProvider):
 
     def get_installation(self, integration_id, organization_id):
         if integration_id is None:
-            raise ValueError('%s requires an integration_id' % self.name)
+            raise IntegrationError('%s requires an integration id.' % self.name)
 
-        try:
-            integration_model = Integration.objects.get(id=integration_id)
-        except Integration.DoesNotExist as error:
-            self.handle_api_error(error)
+        integration_model = Integration.objects.get(
+            id=integration_id,
+            organizations=organization_id,
+            provider='vsts',
+        )
 
         return integration_model.get_installation(organization_id)
 
     def get_repository_data(self, organization, config):
-        installation = self.get_installation(config['installation'], organization.id)
+        installation = self.get_installation(config.get('installation'), organization.id)
         client = installation.get_client()
         instance = installation.instance
 
diff --git a/src/sentry/plugins/providers/integration_repository.py b/src/sentry/plugins/providers/integration_repository.py
index 5a6fed8fa1..d8edda145b 100644
--- a/src/sentry/plugins/providers/integration_repository.py
+++ b/src/sentry/plugins/providers/integration_repository.py
@@ -7,7 +7,7 @@ from rest_framework.response import Response
 from sentry import analytics
 from sentry.api.serializers import serialize
 from sentry.integrations.exceptions import IntegrationError
-from sentry.models import Repository
+from sentry.models import Repository, Integration
 from sentry.signals import repo_linked
 
 
@@ -26,22 +26,12 @@ class IntegrationRepositoryProvider(object):
     def dispatch(self, request, organization, **kwargs):
         try:
             config = self.get_repository_data(organization, request.DATA)
-        except Exception as e:
-            return self.handle_api_error(e)
-
-        try:
             result = self.build_repository_config(
                 organization=organization,
                 data=config,
             )
-        except IntegrationError as e:
-            return Response(
-                {
-                    'errors': {
-                        '__all__': e.message
-                    },
-                }, status=400
-            )
+        except Exception as e:
+            return self.handle_api_error(e)
 
         try:
             with transaction.atomic():
@@ -88,15 +78,33 @@ class IntegrationRepositoryProvider(object):
         context = {
             'error_type': 'unknown',
         }
+
         if isinstance(error, IntegrationError):
-            # TODO(dcramer): we should have a proper validation error
+            if '503' in error.message:
+                context.update({
+                    'error_type': 'service unavailable',
+                    'errors': {
+                        '__all__': error.message
+                    },
+                })
+                status = 503
+            else:
+                # TODO(dcramer): we should have a proper validation error
+                context.update({
+                    'error_type': 'validation',
+                    'errors': {
+                        '__all__': error.message
+                    },
+                })
+                status = 400
+        elif isinstance(error, Integration.DoesNotExist):
             context.update({
-                'error_type': 'validation',
+                'error_type': 'not found',
                 'errors': {
                     '__all__': error.message
                 },
             })
-            status = 400
+            status = 404
         else:
             if self.logger:
                 self.logger.exception(six.text_type(error))
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 20fc30275f..2776b185f5 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'TwoFactorAPITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
-    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase',
+    'IntegrationTestCase', 'UserReportEnvironmentTestCase', 'SnubaTestCase', 'IntegrationRepositoryTestCase',
 )
 
 import base64
@@ -884,3 +884,42 @@ class SnubaTestCase(TestCase):
             settings.SENTRY_SNUBA + '/tests/insert',
             data=json.dumps(events)
         ).status_code == 200
+
+
+class IntegrationRepositoryTestCase(APITestCase):
+    def setUp(self):
+        super(IntegrationRepositoryTestCase, self).setUp()
+        self.login_as(self.user)
+
+    def add_create_repository_responses(self, repository_config):
+        raise NotImplementedError
+
+    def create_repository(self, repository_config, integration_id,
+                          organization_slug=None, add_responses=True):
+        if add_responses:
+            self.add_create_repository_responses(repository_config)
+        with self.feature({'organizations:repos': True}):
+            if not integration_id:
+                data = {
+                    'provider': self.provider_name,
+                    'identifier': repository_config['id'],
+                }
+            else:
+                data = {
+                    'provider': self.provider_name,
+                    'installation': integration_id,
+                    'identifier': repository_config['id'],
+                }
+
+            response = self.client.post(
+                path=reverse(
+                    'sentry-api-0-organization-repositories',
+                    args=[organization_slug or self.organization.slug]
+                ),
+                data=data
+            )
+        return response
+
+    def assert_error_message(self, response, error_type, error_message):
+        assert response.data['error_type'] == error_type
+        assert error_message in response.data['errors']['__all__']
diff --git a/tests/sentry/integrations/bitbucket/test_repository.py b/tests/sentry/integrations/bitbucket/test_repository.py
index be361668a7..ee6b904e96 100644
--- a/tests/sentry/integrations/bitbucket/test_repository.py
+++ b/tests/sentry/integrations/bitbucket/test_repository.py
@@ -1,16 +1,21 @@
 from __future__ import absolute_import
 
 import responses
+import pytest
+import six
 
 from exam import fixture
 from sentry.models import Integration, Repository
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, IntegrationRepositoryTestCase
 from sentry.integrations.bitbucket.repository import BitbucketRepositoryProvider
+from sentry.integrations.exceptions import IntegrationError
 from .testutils import COMPARE_COMMITS_EXAMPLE, COMMIT_DIFF_PATCH, REPO
 
 
 class BitbucketRepositoryProviderTest(TestCase):
+
     def setUp(self):
+        super(BitbucketRepositoryProviderTest, self).setUp()
         self.base_url = 'https://api.bitbucket.org'
         self.shared_secret = '234567890'
         self.subject = 'connect:1234567'
@@ -99,6 +104,7 @@ class BitbucketRepositoryProviderTest(TestCase):
                 'shared_secret': '23456789',
             }
         )
+        integration.add_organization(organization)
         data = {
             'provider': 'integrations:bitbucket',
             'identifier': full_repo_name,
@@ -128,3 +134,71 @@ class BitbucketRepositoryProviderTest(TestCase):
     def test_repository_external_slug(self):
         result = self.provider.repository_external_slug(self.repo)
         assert result == self.repo.name
+
+    def test_get_repository_data_no_installation_id(self):
+        with pytest.raises(IntegrationError) as e:
+            self.provider.get_repository_data(self.organization, {})
+            assert 'requires an integration id' in six.text_type(e)
+
+
+class BitbucketCreateRepositoryTestCase(IntegrationRepositoryTestCase):
+    provider_name = 'integrations:bitbucket'
+
+    def setUp(self):
+        super(BitbucketCreateRepositoryTestCase, self).setUp()
+        self.base_url = 'https://api.bitbucket.org'
+        self.shared_secret = '234567890'
+        self.subject = 'connect:1234567'
+        self.integration = Integration.objects.create(
+            provider='bitbucket',
+            external_id=self.subject,
+            name='MyBitBucket',
+            metadata={
+                'base_url': self.base_url,
+                'shared_secret': self.shared_secret,
+                'subject': self.subject,
+            }
+        )
+        self.integration.get_provider().setup()
+        self.integration.add_organization(self.organization, self.user)
+        self.repo = Repository.objects.create(
+            provider='bitbucket',
+            name='sentryuser/newsdiffs',
+            organization_id=self.organization.id,
+            config={
+                'name': 'sentryuser/newsdiffs',
+            },
+            integration_id=self.integration.id,
+        )
+        self.default_repository_config = {
+            'full_name': 'getsentry/example-repo',
+            'id': '123',
+        }
+
+    def add_create_repository_responses(self, repository_config):
+        responses.add(
+            responses.GET,
+            '%s/2.0/repositories/%s' % (self.base_url, self.repo.name),
+            json=repository_config,
+        )
+        responses.add(
+            responses.POST,
+            u'%s/2.0/repositories/%s/hooks' % (self.base_url, self.repo.name),
+            json={'uuid': '99'}
+        )
+
+    def test_create_repository_data_no_installation_id(self):
+        response = self.create_repository(self.default_repository_config, None)
+        assert response.status_code == 400
+        self.assert_error_message(response, 'validation', 'requires an integration id')
+
+    def test_create_repository_data_integration_does_not_exist(self):
+        integration_id = self.integration.id
+        self.integration.delete()
+
+        response = self.create_repository(self.default_repository_config, integration_id)
+        assert response.status_code == 404
+        self.assert_error_message(
+            response,
+            'not found',
+            'Integration matching query does not exist.')
diff --git a/tests/sentry/integrations/gitlab/test_repository.py b/tests/sentry/integrations/gitlab/test_repository.py
index 8f24229b22..252e157b6c 100644
--- a/tests/sentry/integrations/gitlab/test_repository.py
+++ b/tests/sentry/integrations/gitlab/test_repository.py
@@ -5,7 +5,6 @@ import pytest
 
 from exam import fixture
 
-from django.core.urlresolvers import reverse
 
 from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.gitlab.repository import GitlabRepositoryProvider
@@ -16,7 +15,7 @@ from sentry.models import (
     PullRequest,
     Repository,
 )
-from sentry.testutils import PluginTestCase
+from sentry.testutils import IntegrationRepositoryTestCase
 from sentry.testutils.asserts import assert_commit_shape
 from sentry.utils import json
 
@@ -27,13 +26,11 @@ from .testutils import (
 )
 
 
-class GitLabRepositoryProviderTest(PluginTestCase):
+class GitLabRepositoryProviderTest(IntegrationRepositoryTestCase):
     provider_name = 'integrations:gitlab'
 
     def setUp(self):
-        responses.reset()
         super(GitLabRepositoryProviderTest, self).setUp()
-        self.login_as(self.user)
         self.integration = Integration.objects.create(
             provider='gitlab',
             name='Example GitLab',
@@ -74,7 +71,11 @@ class GitLabRepositoryProviderTest(PluginTestCase):
     def provider(self):
         return GitlabRepositoryProvider('gitlab')
 
-    def create_repository(self, repository_config, integration_id, organization_slug=None):
+    def tearDown(self):
+        super(GitLabRepositoryProviderTest, self).tearDown()
+        responses.reset()
+
+    def add_create_repository_responses(self, repository_config):
         responses.add(
             responses.GET,
             u'https://example.gitlab.com/api/v4/projects/%s' % self.gitlab_id,
@@ -86,20 +87,6 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             json={'id': 99}
         )
 
-        with self.feature({'organizations:repos': True}):
-            response = self.client.post(
-                path=reverse(
-                    'sentry-api-0-organization-repositories',
-                    args=[organization_slug or self.organization.slug]
-                ),
-                data={
-                    'provider': self.provider_name,
-                    'installation': integration_id,
-                    'identifier': repository_config['id'],
-                }
-            )
-        return response
-
     def assert_repository(self, repository_config, organization_id=None):
         instance = self.integration.metadata['instance']
 
@@ -147,16 +134,21 @@ class GitLabRepositoryProviderTest(PluginTestCase):
         assert response.status_code == 201
         self.assert_repository(self.default_repository_config)
 
-    def test_create_repository_null_installation_id(self):
+    def test_create_repository_data_no_installation_id(self):
         response = self.create_repository(self.default_repository_config, None)
-        assert response.status_code == 500
+        assert response.status_code == 400
+        self.assert_error_message(response, 'validation', 'requires an integration id')
 
-    def test_create_repository_integration_does_not_exist(self):
+    def test_create_repository_data_integration_does_not_exist(self):
         integration_id = self.integration.id
         self.integration.delete()
 
         response = self.create_repository(self.default_repository_config, integration_id)
-        assert response.status_code == 500  # TODO(lb): shouldn't this result in a 404?
+        assert response.status_code == 404
+        self.assert_error_message(
+            response,
+            'not found',
+            'Integration matching query does not exist.')
 
     def test_create_repository_org_given_has_no_installation(self):
         organization = self.create_organization(owner=self.user)
@@ -164,7 +156,7 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             self.default_repository_config,
             self.integration.id,
             organization.slug)
-        assert response.status_code == 500
+        assert response.status_code == 404
 
     @responses.activate
     def test_create_repository_get_project_request_fails(self):
@@ -173,20 +165,27 @@ class GitLabRepositoryProviderTest(PluginTestCase):
             u'https://example.gitlab.com/api/v4/projects/%s' % self.gitlab_id,
             status=503,
         )
-        response = self.create_repository(self.default_repository_config, self.integration.id)
-        # TODO(lb): it gives a 400 which I'm not sure makes sense here
-        assert response.status_code == 400
+        response = self.create_repository(
+            self.default_repository_config,
+            self.integration.id,
+            add_responses=False)
+        assert response.status_code == 503
 
     @responses.activate
     def test_create_repository_integration_create_webhook_failure(self):
+        responses.add(
+            responses.GET,
+            u'https://example.gitlab.com/api/v4/projects/%s' % self.gitlab_id,
+            json=self.default_repository_config
+        )
         responses.add(
             responses.POST,
             u'https://example.gitlab.com/api/v4/projects/%s/hooks' % self.gitlab_id,
             status=503,
         )
         response = self.create_repository(self.default_repository_config,
-                                          self.integration.id)
-        assert response.status_code == 400
+                                          self.integration.id, add_responses=False)
+        assert response.status_code == 503
 
     @responses.activate
     def test_on_delete_repository_remove_webhook(self):
diff --git a/tests/sentry/integrations/vsts/test_repository.py b/tests/sentry/integrations/vsts/test_repository.py
index ee6cc1ed9e..7fab39325e 100644
--- a/tests/sentry/integrations/vsts/test_repository.py
+++ b/tests/sentry/integrations/vsts/test_repository.py
@@ -5,7 +5,7 @@ import responses
 from exam import fixture
 from time import time
 
-from sentry.testutils import TestCase
+from sentry.testutils import IntegrationRepositoryTestCase, TestCase
 from sentry.models import Identity, IdentityProvider, Integration, Repository
 from sentry.integrations.vsts.repository import VstsRepositoryProvider
 
@@ -125,3 +125,132 @@ class VisualStudioRepositoryProviderTest(TestCase):
             external_id=self.vsts_external_id)
         result = self.provider.repository_external_slug(repo)
         assert result == repo.external_id
+
+
+class AzureDevOpsRepositoryProviderTest(IntegrationRepositoryTestCase):
+    provider_name = 'integrations:vsts'
+
+    def setUp(self):
+        super(AzureDevOpsRepositoryProviderTest, self).setUp()
+        self.base_url = 'https://visualstudio.com/'
+        self.vsts_external_id = '654321'
+        self.integration = Integration.objects.create(
+            provider='vsts',
+            external_id=self.vsts_external_id,
+            name='Hello world',
+            metadata={
+                'domain_name': self.base_url,
+            }
+        )
+        default_auth = Identity.objects.create(
+            idp=IdentityProvider.objects.create(
+                type='vsts',
+                config={},
+            ),
+            user=self.user,
+            external_id='123',
+            data={
+                'access_token': '123456789',
+                'expires': int(time()) + 3600,
+                'refresh_token': 'rxxx-xxxx',
+                'token_type': 'jwt-bearer',
+            },
+        )
+        self.integration.add_organization(self.organization, self.user, default_auth.id)
+        self.repo = Repository.objects.create(
+            provider='visualstudio',
+            name='example',
+            organization_id=self.organization.id,
+            config={
+                'instance': self.base_url,
+                'project': 'project-name',
+                'name': 'example',
+            },
+            integration_id=self.integration.id,
+        )
+        self.integration.get_provider().setup()
+
+        self.default_repository_config = {
+            'project': {'name': 'getsentry'},
+            'name': 'example-repo',
+            'id': '123',
+            '_links': {'web': {
+                'href': 'https://example.gitlab.com/getsentry/projects/example-repo'
+            }},
+        }
+        self.login_as(self.user)
+
+    @fixture
+    def provider(self):
+        return VstsRepositoryProvider('integrations:vsts')
+
+    def tearDown(self):
+        super(AzureDevOpsRepositoryProviderTest, self).tearDown()
+        responses.reset()
+
+    def add_create_repository_responses(self, repository_config):
+        responses.add(
+            responses.GET,
+            'https://visualstudio.com/_apis/git/repositories/123',
+            json=repository_config
+        )
+
+    def assert_repository(self, repository_config, organization_id=None):
+        repo = Repository.objects.get(
+            organization_id=organization_id or self.organization.id,
+            provider=self.provider_name,
+            external_id=repository_config['id'],
+        )
+        assert repo.name == repository_config['name']
+        assert repo.url == repository_config['_links']['web']['href']
+        assert repo.integration_id == self.integration.id
+        assert repo.config == {
+            'instance': self.base_url,
+            'project': repository_config['project']['name'],
+            'name': repository_config['name'],
+        }
+
+    @responses.activate
+    def test_create_repository(self):
+        response = self.create_repository(self.default_repository_config, self.integration.id)
+        assert response.status_code == 201
+        self.assert_repository(self.default_repository_config)
+
+    def test_data_has_no_installation_id(self):
+        response = self.create_repository(self.default_repository_config, None)
+        assert response.status_code == 400
+        self.assert_error_message(response, 'validation', 'requires an integration id')
+
+    def test_data_integration_does_not_exist(self):
+        integration_id = self.integration.id
+        self.integration.delete()
+
+        response = self.create_repository(self.default_repository_config, integration_id)
+        assert response.status_code == 404
+        self.assert_error_message(
+            response,
+            'not found',
+            'Integration matching query does not exist.')
+
+    def test_org_given_has_no_installation(self):
+        organization = self.create_organization(owner=self.user)
+        response = self.create_repository(
+            self.default_repository_config,
+            self.integration.id,
+            organization.slug
+        )
+        assert response.status_code == 404
+
+    @responses.activate
+    def test_get_repo_request_fails(self):
+        responses.add(
+            responses.GET,
+            'https://visualstudio.com/_apis/git/repositories/123',
+            json=self.default_repository_config,
+            status=503,
+        )
+        response = self.create_repository(
+            self.default_repository_config,
+            self.integration.id,
+            add_responses=False)
+        assert response.status_code == 503
