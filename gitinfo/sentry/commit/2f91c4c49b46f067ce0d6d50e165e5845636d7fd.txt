commit 2f91c4c49b46f067ce0d6d50e165e5845636d7fd
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue May 12 08:46:04 2020 -0700

    ref(integrations): cleans up integration directory code (#18746)

diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index f931d6cf9d..91358e3eda 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -1,19 +1,19 @@
-import PropTypes from 'prop-types';
 import React from 'react';
 import styled from '@emotion/styled';
 
 import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
 import Alert from 'app/components/alert';
 import Button from 'app/components/button';
 import Confirm from 'app/components/confirm';
-import {IconDelete, IconSettings} from 'app/icons';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration, Organization} from 'app/types';
-import SentryTypes from 'app/sentryTypes';
-import {trackIntegrationEvent} from 'app/utils/integrationUtil';
+import {IntegrationProvider, Integration, Organization, ObjectStatus} from 'app/types';
+import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
+import CircleIndicator from 'app/components/circleIndicator';
+import theme from 'app/utils/theme';
+import space from 'app/styles/space';
+import {IconDelete, IconSettings, IconWarning} from 'app/icons';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
@@ -24,20 +24,14 @@ export type Props = {
   onRemove: (integration: Integration) => void;
   onDisable: (integration: Integration) => void;
   onReinstallIntegration: (integration: Integration) => void;
+  trackIntegrationEvent: (
+    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>
+  ) => void; //analytics callback
   className?: string;
+  showReauthMessage: boolean;
 };
 
-//TODO: Replace with InstalledIntegrationInDirectory
 export default class InstalledIntegration extends React.Component<Props> {
-  static propTypes = {
-    organization: SentryTypes.Organization.isRequired,
-    provider: PropTypes.object.isRequired,
-    integration: PropTypes.object.isRequired,
-    onRemove: PropTypes.func.isRequired,
-    onDisable: PropTypes.func.isRequired,
-    onReinstallIntegration: PropTypes.func.isRequired,
-  };
-
   /**
    * Integrations have additional configuration when any of the conditions are
    * met:
@@ -62,18 +56,13 @@ export default class InstalledIntegration extends React.Component<Props> {
   };
 
   handleUninstallClick = () => {
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.uninstall_clicked',
-        eventName: 'Integrations: Uninstall Clicked',
-        integration: this.props.provider.key,
-        integration_type: 'first_party',
-      },
-      this.props.organization
-    );
+    this.props.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_clicked',
+      eventName: 'Integrations: Uninstall Clicked',
+    });
   };
 
-  getRemovalBodyAndText(aspects) {
+  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {
     if (aspects && aspects.removal_dialog) {
       return {
         body: aspects.removal_dialog.body,
@@ -91,15 +80,10 @@ export default class InstalledIntegration extends React.Component<Props> {
 
   handleRemove(integration: Integration) {
     this.props.onRemove(integration);
-    trackIntegrationEvent(
-      {
-        eventKey: 'integrations.uninstall_completed',
-        eventName: 'Integrations: Uninstall Completed',
-        integration: this.props.provider.key,
-        integration_type: 'first_party',
-      },
-      this.props.organization
-    );
+    this.props.trackIntegrationEvent({
+      eventKey: 'integrations.uninstall_completed',
+      eventName: 'Integrations: Uninstall Completed',
+    });
   }
 
   get removeConfirmProps() {
@@ -109,7 +93,7 @@ export default class InstalledIntegration extends React.Component<Props> {
     const message = (
       <React.Fragment>
         <Alert type="error" icon="icon-circle-exclamation">
-          Deleting this integration has consequences!
+          {t('Deleting this integration has consequences!')}
         </Alert>
         {body}
       </React.Fragment>
@@ -127,7 +111,7 @@ export default class InstalledIntegration extends React.Component<Props> {
     const message = (
       <React.Fragment>
         <Alert type="error" icon="icon-circle-exclamation">
-          This integration cannot be removed on Sentry
+          {t('This integration cannot be removed in Sentry')}
         </Alert>
         {body}
       </React.Fragment>
@@ -141,7 +125,13 @@ export default class InstalledIntegration extends React.Component<Props> {
   }
 
   render() {
-    const {className, integration, provider, organization} = this.props;
+    const {
+      className,
+      integration,
+      provider,
+      organization,
+      showReauthMessage,
+    } = this.props;
 
     const removeConfirmProps =
       integration.status === 'active' && integration.provider.canDisable
@@ -153,53 +143,78 @@ export default class InstalledIntegration extends React.Component<Props> {
         {({hasAccess}) => (
           <IntegrationFlex key={integration.id} className={className}>
             <IntegrationItemBox>
-              <IntegrationItem compact integration={integration} />
+              <IntegrationItem integration={integration} />
             </IntegrationItemBox>
             <div>
-              {integration.status === 'disabled' && (
-                <AddIntegrationButton
-                  size="xsmall"
-                  priority="success"
-                  provider={provider}
-                  onAddIntegration={this.reinstallIntegration}
-                  reinstall
-                />
-              )}
-              {integration.status === 'active' && (
+              {showReauthMessage && (
                 <Tooltip
-                  disabled={this.hasConfiguration()}
-                  position="left"
-                  title="Integration not configurable"
+                  disabled={hasAccess}
+                  title={t(
+                    'You must be an organization owner, manager or admin to re-authenticate'
+                  )}
                 >
-                  <StyledButton
-                    borderless
-                    icon={<IconSettings />}
-                    disabled={!this.hasConfiguration() || !hasAccess}
-                    to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
-                    data-test-id="integration-configure-button"
+                  <Button
+                    disabled={!hasAccess}
+                    priority="primary"
+                    size="small"
+                    icon={<IconWarning size="sm" />}
                   >
-                    Configure
-                  </StyledButton>
+                    {t('Re-authenticate Now')}
+                  </Button>
                 </Tooltip>
               )}
-            </div>
-            <div>
-              <Confirm
-                priority="danger"
-                onConfirming={this.handleUninstallClick}
-                disabled={!hasAccess}
-                {...removeConfirmProps}
+              <Tooltip
+                disabled={this.hasConfiguration() && hasAccess}
+                position="left"
+                title={
+                  !this.hasConfiguration()
+                    ? t('Integration not configurable')
+                    : t(
+                        'You must be an organization owner, manager or admin to configure'
+                      )
+                }
               >
                 <StyledButton
-                  disabled={!hasAccess}
                   borderless
-                  icon={<IconDelete />}
-                  data-test-id="integration-remove-button"
+                  icon={<IconSettings />}
+                  disabled={
+                    !this.hasConfiguration() ||
+                    !hasAccess ||
+                    integration.status !== 'active'
+                  }
+                  to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
+                  data-test-id="integration-configure-button"
                 >
-                  Uninstall
+                  {t('Configure')}
                 </StyledButton>
-              </Confirm>
+              </Tooltip>
+            </div>
+            <div>
+              <Tooltip
+                disabled={hasAccess}
+                title={t(
+                  'You must be an organization owner, manager or admin to uninstall'
+                )}
+              >
+                <Confirm
+                  priority="danger"
+                  onConfirming={this.handleUninstallClick}
+                  disabled={!hasAccess}
+                  {...removeConfirmProps}
+                >
+                  <StyledButton
+                    disabled={!hasAccess}
+                    borderless
+                    icon={<IconDelete />}
+                    data-test-id="integration-remove-button"
+                  >
+                    {t('Uninstall')}
+                  </StyledButton>
+                </Confirm>
+              </Tooltip>
             </div>
+
+            <IntegrationStatus status={integration.status} />
           </IntegrationFlex>
         )}
       </Access>
@@ -219,3 +234,40 @@ const IntegrationFlex = styled('div')`
 const IntegrationItemBox = styled('div')`
   flex: 1;
 `;
+
+const IntegrationStatus = styled(
+  (props: React.HTMLAttributes<HTMLElement> & {status: ObjectStatus}) => {
+    const {status, ...p} = props;
+    const color = status === 'active' ? theme.success : theme.gray2;
+    const titleText =
+      status === 'active'
+        ? t('This Integration can be disabled by clicking the Uninstall button')
+        : t('This Integration has been disconnected from the external provider');
+    return (
+      <Tooltip title={titleText}>
+        <div {...p}>
+          <CircleIndicator size={6} color={color} />
+          <IntegrationStatusText>{`${
+            status === 'active' ? t('enabled') : t('disabled')
+          }`}</IntegrationStatusText>
+        </div>
+      </Tooltip>
+    );
+  }
+)`
+  display: flex;
+  align-items: center;
+  color: ${p => p.theme.gray2};
+  font-weight: light;
+  text-transform: capitalize;
+  &:before {
+    content: '|';
+    color: ${p => p.theme.gray1};
+    margin-right: ${space(1)};
+    font-weight: normal;
+  }
+`;
+
+const IntegrationStatusText = styled('div')`
+  margin: 0 ${space(0.75)} 0 ${space(0.5)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
deleted file mode 100644
index 032bb701bb..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegrationInDirectory.tsx
+++ /dev/null
@@ -1,274 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import {t} from 'app/locale';
-import Access from 'app/components/acl/access';
-import Alert from 'app/components/alert';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
-import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration, Organization, ObjectStatus} from 'app/types';
-import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
-import CircleIndicator from 'app/components/circleIndicator';
-import theme from 'app/utils/theme';
-import space from 'app/styles/space';
-import {IconDelete, IconSettings, IconWarning} from 'app/icons';
-
-const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
-
-export type Props = {
-  organization: Organization;
-  provider: IntegrationProvider;
-  integration: Integration;
-  onRemove: (integration: Integration) => void;
-  onDisable: (integration: Integration) => void;
-  onReinstallIntegration: (integration: Integration) => void;
-  trackIntegrationEvent: (
-    options: Pick<SingleIntegrationEvent, 'eventKey' | 'eventName'>
-  ) => void; //analytics callback
-  className?: string;
-  showReauthMessage: boolean;
-};
-
-//TODO: Rename to InstalledIntegration when we can remove the old one
-export default class InstalledIntegrationInDirectory extends React.Component<Props> {
-  /**
-   * Integrations have additional configuration when any of the conditions are
-   * met:
-   *
-   * - The Integration has organization-specific configuration options.
-   * - The Integration has configurable features
-   */
-  hasConfiguration() {
-    const {integration, provider} = this.props;
-
-    return (
-      integration.configOrganization.length > 0 ||
-      provider.features.filter(f => CONFIGURABLE_FEATURES.includes(f)).length > 0
-    );
-  }
-
-  reinstallIntegration = () => {
-    const activeIntegration = Object.assign({}, this.props.integration, {
-      status: 'active',
-    });
-    this.props.onReinstallIntegration(activeIntegration);
-  };
-
-  handleUninstallClick = () => {
-    this.props.trackIntegrationEvent({
-      eventKey: 'integrations.uninstall_clicked',
-      eventName: 'Integrations: Uninstall Clicked',
-    });
-  };
-
-  getRemovalBodyAndText(aspects: Integration['provider']['aspects']) {
-    if (aspects && aspects.removal_dialog) {
-      return {
-        body: aspects.removal_dialog.body,
-        actionText: aspects.removal_dialog.actionText,
-      };
-    } else {
-      return {
-        body: t(
-          'Deleting this integration will remove any project associated data. This action cannot be undone. Are you sure you want to delete this integration?'
-        ),
-        actionText: t('Delete'),
-      };
-    }
-  }
-
-  handleRemove(integration: Integration) {
-    this.props.onRemove(integration);
-    this.props.trackIntegrationEvent({
-      eventKey: 'integrations.uninstall_completed',
-      eventName: 'Integrations: Uninstall Completed',
-    });
-  }
-
-  get removeConfirmProps() {
-    const {integration} = this.props;
-    const {body, actionText} = this.getRemovalBodyAndText(integration.provider.aspects);
-
-    const message = (
-      <React.Fragment>
-        <Alert type="error" icon="icon-circle-exclamation">
-          {t('Deleting this integration has consequences!')}
-        </Alert>
-        {body}
-      </React.Fragment>
-    );
-    return {
-      message,
-      confirmText: actionText,
-      onConfirm: () => this.handleRemove(integration),
-    };
-  }
-
-  get disableConfirmProps() {
-    const {integration} = this.props;
-    const {body, actionText} = integration.provider.aspects.disable_dialog || {};
-    const message = (
-      <React.Fragment>
-        <Alert type="error" icon="icon-circle-exclamation">
-          {t('This integration cannot be removed in Sentry')}
-        </Alert>
-        {body}
-      </React.Fragment>
-    );
-
-    return {
-      message,
-      confirmText: actionText,
-      onConfirm: () => this.props.onDisable(integration),
-    };
-  }
-
-  render() {
-    const {
-      className,
-      integration,
-      provider,
-      organization,
-      showReauthMessage,
-    } = this.props;
-
-    const removeConfirmProps =
-      integration.status === 'active' && integration.provider.canDisable
-        ? this.disableConfirmProps
-        : this.removeConfirmProps;
-
-    return (
-      <Access access={['org:integrations']}>
-        {({hasAccess}) => (
-          <IntegrationFlex key={integration.id} className={className}>
-            <IntegrationItemBox>
-              <IntegrationItem integration={integration} />
-            </IntegrationItemBox>
-            <div>
-              {showReauthMessage && (
-                <Tooltip
-                  disabled={hasAccess}
-                  title={t(
-                    'You must be an organization owner, manager or admin to re-authenticate'
-                  )}
-                >
-                  <Button
-                    disabled={!hasAccess}
-                    priority="primary"
-                    size="small"
-                    icon={<IconWarning size="sm" />}
-                  >
-                    {t('Re-authenticate Now')}
-                  </Button>
-                </Tooltip>
-              )}
-              <Tooltip
-                disabled={this.hasConfiguration() && hasAccess}
-                position="left"
-                title={
-                  !this.hasConfiguration()
-                    ? t('Integration not configurable')
-                    : t(
-                        'You must be an organization owner, manager or admin to configure'
-                      )
-                }
-              >
-                <StyledButton
-                  borderless
-                  icon={<IconSettings />}
-                  disabled={
-                    !this.hasConfiguration() ||
-                    !hasAccess ||
-                    integration.status !== 'active'
-                  }
-                  to={`/settings/${organization.slug}/integrations/${provider.key}/${integration.id}/`}
-                  data-test-id="integration-configure-button"
-                >
-                  {t('Configure')}
-                </StyledButton>
-              </Tooltip>
-            </div>
-            <div>
-              <Tooltip
-                disabled={hasAccess}
-                title={t(
-                  'You must be an organization owner, manager or admin to uninstall'
-                )}
-              >
-                <Confirm
-                  priority="danger"
-                  onConfirming={this.handleUninstallClick}
-                  disabled={!hasAccess}
-                  {...removeConfirmProps}
-                >
-                  <StyledButton
-                    disabled={!hasAccess}
-                    borderless
-                    icon={<IconDelete />}
-                    data-test-id="integration-remove-button"
-                  >
-                    {t('Uninstall')}
-                  </StyledButton>
-                </Confirm>
-              </Tooltip>
-            </div>
-
-            <IntegrationStatus status={integration.status} />
-          </IntegrationFlex>
-        )}
-      </Access>
-    );
-  }
-}
-
-const StyledButton = styled(Button)`
-  color: ${p => p.theme.gray2};
-`;
-
-const IntegrationFlex = styled('div')`
-  display: flex;
-  align-items: center;
-`;
-
-const IntegrationItemBox = styled('div')`
-  flex: 1;
-`;
-
-const IntegrationStatus = styled(
-  (props: React.HTMLAttributes<HTMLElement> & {status: ObjectStatus}) => {
-    const {status, ...p} = props;
-    const color = status === 'active' ? theme.success : theme.gray2;
-    const titleText =
-      status === 'active'
-        ? t('This Integration can be disabled by clicking the Uninstall button')
-        : t('This Integration has been disconnected from the external provider');
-    return (
-      <Tooltip title={titleText}>
-        <div {...p}>
-          <CircleIndicator size={6} color={color} />
-          <IntegrationStatusText>{`${
-            status === 'active' ? t('enabled') : t('disabled')
-          }`}</IntegrationStatusText>
-        </div>
-      </Tooltip>
-    );
-  }
-)`
-  display: flex;
-  align-items: center;
-  color: ${p => p.theme.gray2};
-  font-weight: light;
-  text-transform: capitalize;
-  &:before {
-    content: '|';
-    color: ${p => p.theme.gray1};
-    margin-right: ${space(1)};
-    font-weight: normal;
-  }
-`;
-
-const IntegrationStatusText = styled('div')`
-  margin: 0 ${space(0.75)} 0 ${space(0.5)};
-`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index 6be227aaaa..d8af82b3c7 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -12,7 +12,7 @@ import {t} from 'app/locale';
 import space from 'app/styles/space';
 import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
 import Button from 'app/components/button';
-import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegrationInDirectory';
+import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
 import withOrganization from 'app/utils/withOrganization';
 import {sortArray} from 'app/utils';
 import {isSlackWorkspaceApp, getReauthAlertText} from 'app/utils/integrationUtil';
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
index 8c2b83935b..7f49de0d5c 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationListDirectory.tsx
@@ -52,7 +52,6 @@ type Props = RouteComponentProps<{orgId: string}, {}> & {
 
 type State = {
   integrations: Integration[];
-  newlyInstalledIntegrationId: string;
   plugins: PluginWithProjectList[];
   appInstalls: SentryAppInstallation[];
   orgOwnedApps: SentryApp[];
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index f7331fd0e6..e49be4297e 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -17,8 +17,9 @@ import withOrganization from 'app/utils/withOrganization';
 import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
 import {openModal} from 'app/actionCreators/modal';
 import {getSentryAppInstallStatus} from 'app/utils/integrationUtil';
+import Confirm from 'app/components/confirm';
+import {IconSubtract} from 'app/icons';
 
-import {UninstallAppButton} from '../settings/organizationDeveloperSettings/sentryApplicationRow/installButtons';
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 
 type State = {
@@ -234,7 +235,8 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
   }
 
   renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
-    return !this.install ? (
+    const install = this.install;
+    return !install ? (
       <InstallButton
         size="small"
         priority="primary"
@@ -246,13 +248,20 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
         {t('Accept & Install')}
       </InstallButton>
     ) : (
-      <UninstallAppButton
-        install={this.install}
-        app={this.sentryApp}
-        onClickUninstall={this.handleUninstall}
-        onUninstallModalOpen={this.recordUninstallClicked}
+      <Confirm
+        message={tct('Are you sure you want to remove the [slug] installation?', {
+          slug: this.integrationSlug,
+        })}
+        priority="danger"
+        onConfirm={() => this.handleUninstall(install)} //called when the user confirms the action
+        onConfirming={this.recordUninstallClicked} //called when the confirm modal opens
         disabled={!userHasAccess}
-      />
+      >
+        <StyledUninstallButton size="small" data-test-id="sentry-app-uninstall">
+          <IconSubtract isCircled style={{marginRight: space(0.75)}} />
+          {t('Uninstall')}
+        </StyledUninstallButton>
+      </Confirm>
     );
   }
 
@@ -288,4 +297,14 @@ const InstallButton = styled(Button)`
   margin-left: ${space(1)};
 `;
 
+const StyledUninstallButton = styled(Button)`
+  color: ${p => p.theme.gray2};
+  background: #ffffff;
+
+  border: ${p => `1px solid ${p.theme.gray2}`};
+  box-sizing: border-box;
+  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);
+  border-radius: 4px;
+`;
+
 export default withOrganization(SentryAppDetailedView);
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/shared/styledComponents.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/shared/styledComponents.tsx
deleted file mode 100644
index 328ec6a513..0000000000
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/shared/styledComponents.tsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import space from 'app/styles/space';
-
-export const TagsContainer = styled('div')`
-  display: flex;
-  flex-wrap: wrap;
-  padding-top: ${space(3)};
-  padding-bottom: ${space(1)};
-`;
-
-export const Tag = styled(p => <span {...p} />)`
-  transition: border-color 0.15s ease;
-  font-size: 14px;
-  line-height: 1;
-  padding: ${space(1)};
-  margin: 0 ${space(1)} ${space(1)} 0;
-  border: 1px solid ${p => p.theme.borderDark};
-  border-radius: 30px;
-  height: 28px;
-  box-shadow: inset ${p => p.theme.dropShadowLight};
-  cursor: pointer;
-
-  &:focus {
-    outline: none;
-    border: 1px solid ${p => p.theme.gray1};
-  }
-
-  &::placeholder {
-    color: ${p => p.theme.gray2};
-  }
-`;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx b/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
deleted file mode 100644
index 134e64bd1b..0000000000
--- a/src/sentry/static/sentry/app/views/settings/organizationDeveloperSettings/sentryApplicationRow/installButtons.tsx
+++ /dev/null
@@ -1,56 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import {t, tct} from 'app/locale';
-import {SentryApp, SentryAppInstallation} from 'app/types';
-import {IconSubtract} from 'app/icons';
-import space from 'app/styles/space';
-
-//TODO(Steve): Should move somewhere else
-
-type UninstallButtonProps = {
-  install: SentryAppInstallation;
-  app: SentryApp;
-  onClickUninstall?: (install: SentryAppInstallation) => void;
-  onUninstallModalOpen?: () => void; //used for analytics
-  disabled?: boolean;
-};
-
-export const UninstallAppButton = ({
-  install,
-  app,
-  onClickUninstall,
-  onUninstallModalOpen,
-  disabled,
-}: UninstallButtonProps) => {
-  const message = tct('Are you sure you want to remove the [slug] installation?', {
-    slug: app.slug,
-  });
-
-  return (
-    <Confirm
-      message={message}
-      priority="danger"
-      onConfirm={() => onClickUninstall && install && onClickUninstall(install)} //called when the user confirms the action
-      onConfirming={onUninstallModalOpen} //called when the confirm modal opens
-      disabled={disabled}
-    >
-      <StyledUninstallButton size="small" data-test-id="sentry-app-uninstall">
-        <IconSubtract isCircled style={{marginRight: space(0.75)}} />
-        {t('Uninstall')}
-      </StyledUninstallButton>
-    </Confirm>
-  );
-};
-
-const StyledUninstallButton = styled(Button)`
-  color: ${p => p.theme.gray2};
-  background: #ffffff;
-
-  border: ${p => `1px solid ${p.theme.gray2}`};
-  box-sizing: border-box;
-  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);
-  border-radius: 4px;
-`;
diff --git a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
index 8ca83d5312..4b21b12410 100644
--- a/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/sentryAppDetailedView.spec.jsx
@@ -126,15 +126,13 @@ describe('SentryAppDetailedView', function() {
         wrapper.update();
         wrapperState = wrapper;
         expect(wrapper.find('IntegrationStatus').props().status).toEqual('Installed');
-        expect(wrapper.find('UninstallAppButton').exists()).toEqual(true);
+        expect(wrapper.find('StyledUninstallButton').exists()).toEqual(true);
       });
 
       it('uninstalls app', async function() {
-        expect(wrapperState.find('UninstallAppButton')).toHaveLength(1);
-        wrapperState
-          .find('UninstallAppButton')
-          .props()
-          .onClickUninstall();
+        expect(wrapperState.find('StyledUninstallButton')).toHaveLength(1);
+        wrapperState.find('StyledUninstallButton').simulate('click');
+
         await tick();
         wrapperState
           .find('Confirm')
@@ -299,7 +297,7 @@ describe('SentryAppDetailedView', function() {
       expect(createRequest).toHaveBeenCalled();
       wrapper.update();
       expect(wrapper.find('IntegrationStatus').props().status).toEqual('Installed');
-      expect(wrapper.find('UninstallAppButton').exists()).toEqual(true);
+      expect(wrapper.find('StyledUninstallButton').exists()).toEqual(true);
     });
   });
 
