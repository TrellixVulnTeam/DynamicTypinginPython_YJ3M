commit 744cb9451d4570697e6caad56d38961823f832e0
Author: Phillip Jones <djones.phillip@gmail.com>
Date:   Tue Feb 18 13:16:35 2020 -0800

    API-691: Add descriptions and FeatureDescription's to plugins that were missing them. (#17027)

diff --git a/src/sentry/plugins/sentry_webhooks/plugin.py b/src/sentry/plugins/sentry_webhooks/plugin.py
index 4d7a0b4da6..d775cc97dc 100644
--- a/src/sentry/plugins/sentry_webhooks/plugin.py
+++ b/src/sentry/plugins/sentry_webhooks/plugin.py
@@ -12,6 +12,14 @@ from sentry.exceptions import PluginError
 from sentry.plugins.bases import notify
 from sentry.http import is_valid_url, safe_urlopen
 from sentry.utils.safe import safe_execute
+from sentry.integrations import FeatureDescription, IntegrationFeatures
+
+DESCRIPTION = """
+Trigger outgoing HTTP POST requests from Sentry.
+
+Note: To configure webhooks over multiple projects, we recommend setting up an
+[Internal Integration](https://docs.sentry.io/workflow/integrations/integration-platform/#internal-integrations).
+"""
 
 
 def split_urls(value):
@@ -41,7 +49,7 @@ class WebHooksPlugin(notify.NotificationPlugin):
     author = "Sentry Team"
     author_url = "https://github.com/getsentry/sentry"
     version = sentry.VERSION
-    description = "Integrates web hooks."
+    description = DESCRIPTION
     resource_links = [
         ("Report Issue", "https://github.com/getsentry/sentry/issues"),
         (
@@ -60,6 +68,14 @@ class WebHooksPlugin(notify.NotificationPlugin):
     logger = logging.getLogger("sentry.plugins.webhooks")
     user_agent = "sentry-webhooks/%s" % version
     required_field = "urls"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Configure rule based outgoing HTTP POST requests from Sentry.
+            """,
+            IntegrationFeatures.ALERT_RULE,
+        )
+    ]
 
     def is_configured(self, project, **kwargs):
         return bool(self.get_option("urls", project))
diff --git a/src/sentry_plugins/amazon_sqs/plugin.py b/src/sentry_plugins/amazon_sqs/plugin.py
index 93673d31d4..7ff4a9ee4b 100644
--- a/src/sentry_plugins/amazon_sqs/plugin.py
+++ b/src/sentry_plugins/amazon_sqs/plugin.py
@@ -14,6 +14,14 @@ from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 logger = logging.getLogger(__name__)
 
+DESCRIPTION = """
+Forward Sentry events to Amazon SQS.
+
+Amazon Simple Queue Service (SQS) is a fully managed message
+queuing service that enables you to decouple and scale microservices,
+distributed systems, and serverless applications.
+"""
+
 
 def get_regions():
     public_region_list = boto3.session.Session().get_available_regions("sqs")
@@ -24,10 +32,9 @@ def get_regions():
 class AmazonSQSPlugin(CorePluginMixin, DataForwardingPlugin):
     title = "Amazon SQS"
     slug = "amazon-sqs"
-    description = "Forward Sentry events to Amazon SQS."
+    description = DESCRIPTION
     conf_key = "amazon-sqs"
     required_field = "queue_url"
-    # TODO(phillip): Probably need a better feature description
     feature_descriptions = [
         FeatureDescription(
             """
diff --git a/src/sentry_plugins/asana/plugin.py b/src/sentry_plugins/asana/plugin.py
index f5f58502ad..8a5ce41b1f 100644
--- a/src/sentry_plugins/asana/plugin.py
+++ b/src/sentry_plugins/asana/plugin.py
@@ -16,9 +16,15 @@ from .client import AsanaClient
 
 ERR_AUTH_NOT_CONFIGURED = "You still need to associate an Asana identity with this account."
 
+DESCRIPTION = """
+Improve your productivity by creating tasks in Asana directly
+from Sentry issues. This integration also allows you to link Sentry
+issues to existing tasks in Asana.
+"""
+
 
 class AsanaPlugin(CorePluginMixin, IssuePlugin2):
-    description = "Integrate Asana issues by linking a repository to a project."
+    description = DESCRIPTION
     slug = "asana"
     title = "Asana"
     conf_title = title
diff --git a/src/sentry_plugins/opsgenie/plugin.py b/src/sentry_plugins/opsgenie/plugin.py
index dd9d5ab6a1..1ba2ff0222 100644
--- a/src/sentry_plugins/opsgenie/plugin.py
+++ b/src/sentry_plugins/opsgenie/plugin.py
@@ -13,6 +13,14 @@ from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import OpsGenieApiClient
 
+DESCRIPTION = """
+Trigger alerts in Opsgenie from Sentry.
+
+Opsgenie is a cloud-based service for dev & ops teams, providing reliable
+alerts, on-call schedule management and escalations. OpsGenie integrates with
+monitoring tools & services, ensures the right people are notified.
+"""
+
 
 class OpsGenieOptionsForm(notify.NotificationConfigurationForm):
     api_key = forms.CharField(
@@ -41,7 +49,7 @@ class OpsGeniePlugin(CorePluginMixin, notify.NotificationPlugin):
     author_url = "https://github.com/getsentry"
     title = "OpsGenie"
     slug = "opsgenie"
-    description = "Create OpsGenie alerts out of notifications."
+    description = DESCRIPTION
     conf_key = "opsgenie"
     version = sentry.VERSION
     project_conf_form = OpsGenieOptionsForm
@@ -49,7 +57,7 @@ class OpsGeniePlugin(CorePluginMixin, notify.NotificationPlugin):
     feature_descriptions = [
         FeatureDescription(
             """
-            Configure rule based OpsGenie alerts to automatically be triggered in a specific service
+            Configure rule based OpsGenie alerts to automatically be triggered.
             """,
             IntegrationFeatures.ALERT_RULE,
         )
diff --git a/src/sentry_plugins/phabricator/plugin.py b/src/sentry_plugins/phabricator/plugin.py
index 8038afa0fb..ef38c051d5 100644
--- a/src/sentry_plugins/phabricator/plugin.py
+++ b/src/sentry_plugins/phabricator/plugin.py
@@ -6,6 +6,7 @@ from rest_framework.response import Response
 from sentry.exceptions import PluginError
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint
 from sentry.utils.http import absolute_uri
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 from six.moves.urllib.parse import urljoin
 
 from sentry_plugins.base import CorePluginMixin
@@ -15,6 +16,14 @@ import httplib
 import json
 import phabricator
 
+DESCRIPTION = """
+Improve your productivity by creating tickets in Phabricator directly from Sentry issues.
+This integration also allows you to link Sentry issues to existing tickets in Phabricator.
+
+Phabricator is a set of tools for developing software. It includes applications for
+code review, repository hosting, bug tracking, project management, and more.
+"""
+
 
 def query_to_result(field, result):
     if field == "issue_id":
@@ -27,13 +36,28 @@ def query_to_result(field, result):
 
 
 class PhabricatorPlugin(CorePluginMixin, IssuePlugin2):
-    description = "Integrate Phabricator issue tracking by linking a user account to a project."
+    description = DESCRIPTION
 
     slug = "phabricator"
     title = "Phabricator"
     conf_title = "Phabricator"
     conf_key = "phabricator"
     required_field = "host"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Create and link Sentry issue groups directly to a Phabricator ticket in any of your
+            projects, providing a quick way to jump from a Sentry bug to tracked ticket!
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+        FeatureDescription(
+            """
+            Link Sentry issues to existing Phabricator tickets.
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+    ]
 
     def get_api(self, project):
         return phabricator.Phabricator(
diff --git a/src/sentry_plugins/pivotal/plugin.py b/src/sentry_plugins/pivotal/plugin.py
index b2d8c2cb09..a02c2b1cae 100644
--- a/src/sentry_plugins/pivotal/plugin.py
+++ b/src/sentry_plugins/pivotal/plugin.py
@@ -10,19 +10,46 @@ from rest_framework.response import Response
 from sentry.plugins.bases.issue2 import IssuePlugin2, IssueGroupActionEndpoint, PluginError
 from sentry.http import safe_urlopen, safe_urlread
 from sentry.utils import json
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 from six.moves.urllib.parse import urlencode
 
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.utils import get_secret_field_config
 
+DESCRIPTION = """
+Improve your productivity by creating tickets in Pivotal Tracker directly from Sentry issues.
+This integration also allows you to link Sentry issues to existing tickets in Pivotal Tracker.
+
+Pivotal Tracker is a straightforward project-planning tool that helps software development
+teams form realistic expectations about when work might be completed based on the teams
+ongoing performance. Tracker visualizes your projects in the form of stories
+moving through your workflow, encouraging you to break down projects into manageable
+chunks and have important conversations about deliverables and scope.
+"""
+
 
 class PivotalPlugin(CorePluginMixin, IssuePlugin2):
-    description = "Integrate Pivotal Tracker stories by linking a project and account."
+    description = DESCRIPTION
     slug = "pivotal"
     title = "Pivotal Tracker"
     conf_title = title
     conf_key = "pivotal"
     required_field = "token"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Create and link Sentry issue groups directly to a Pivotal Tracker ticket in any of your
+            projects, providing a quick way to jump from a Sentry bug to tracked ticket!
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+        FeatureDescription(
+            """
+            Link Sentry issues to existing Pivotal Tracker tickets.
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+    ]
 
     def get_group_urls(self):
         return super(PivotalPlugin, self).get_group_urls() + [
diff --git a/src/sentry_plugins/pushover/plugin.py b/src/sentry_plugins/pushover/plugin.py
index 9f5f2240f7..28205115fb 100644
--- a/src/sentry_plugins/pushover/plugin.py
+++ b/src/sentry_plugins/pushover/plugin.py
@@ -6,18 +6,34 @@ from sentry.plugins.bases.notify import NotifyPlugin
 
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.utils import get_secret_field_config
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import PushoverClient
 
 from sentry.exceptions import PluginError
 
+DESCRIPTION = """
+Get notified of Sentry alerts on any device using the Pushover integration.
+
+Pushover makes it easy to get real-time notifications on your Android, iPhone, iPad, and Desktop.
+"""
+
 
 class PushoverPlugin(CorePluginMixin, NotifyPlugin):
+    description = DESCRIPTION
     slug = "pushover"
     title = "Pushover"
     conf_title = "Pushover"
     conf_key = "pushover"
     required_field = "apikey"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Configure rule based Pushover notifications to be sent.
+            """,
+            IntegrationFeatures.ALERT_RULE,
+        )
+    ]
 
     def is_configured(self, project):
         return all(self.get_option(key, project) for key in ("userkey", "apikey"))
diff --git a/src/sentry_plugins/redmine/plugin.py b/src/sentry_plugins/redmine/plugin.py
index 9aeb9fb299..49b29e360b 100644
--- a/src/sentry_plugins/redmine/plugin.py
+++ b/src/sentry_plugins/redmine/plugin.py
@@ -8,23 +8,47 @@ from sentry.exceptions import PluginError
 from sentry.plugins.bases.issue import IssuePlugin
 from sentry_plugins.base import CorePluginMixin
 from sentry.utils.http import absolute_uri
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 import sentry
 
 from .client import RedmineClient
 from .forms import RedmineNewIssueForm
 
+DESCRIPTION = """
+Create issues in Redmine directly from Sentry. This integration also
+allows you to link Sentry issues to existing tickets in Redmine.
+
+Redmine is a flexible project management web application. Written using
+the Ruby on Rails framework, it is cross-platform and cross-database.
+"""
+
 
 class RedminePlugin(CorePluginMixin, IssuePlugin):
     author = "Sentry"
     author_url = "https://github.com/getsentry/sentry"
     version = sentry.VERSION
-    description = "Integrate Redmine issue tracking by linking a user account to a project."
+    description = DESCRIPTION
 
     slug = "redmine"
     title = _("Redmine")
     conf_title = "Redmine"
     conf_key = "redmine"
     required_field = "host"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Create and link Sentry issue groups directly to an Redmine issue in any of your
+            projects, providing a quick way to jump from a Sentry bug to tracked ticket!
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+        FeatureDescription(
+            """
+            Link Sentry issues to existing Redmine issue.
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+    ]
 
     new_issue_form = RedmineNewIssueForm
 
diff --git a/src/sentry_plugins/segment/plugin.py b/src/sentry_plugins/segment/plugin.py
index e4fa7ed324..a5693e90d1 100644
--- a/src/sentry_plugins/segment/plugin.py
+++ b/src/sentry_plugins/segment/plugin.py
@@ -5,16 +5,34 @@ from sentry.plugins.bases.data_forwarding import DataForwardingPlugin
 
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.utils import get_secret_field_config
+from sentry.integrations import FeatureDescription, IntegrationFeatures
+
+DESCRIPTION = """
+Send Sentry events to Segment. This integration allows you to collect all your client-side data
+for Sentry automatically without the need to install the Sentry client library.
+Enable Sentry in your Segment settings to asynchronously load Raven.js onto your page without
+touching the code in your application.
+
+Segment is a customer data platform (CDP) that helps you collect, clean, and control your customer data.
+"""
 
 
 class SegmentPlugin(CorePluginMixin, DataForwardingPlugin):
     title = "Segment"
     slug = "segment"
-    description = "Send Sentry events into Segment."
+    description = DESCRIPTION
     conf_key = "segment"
     required_field = "write_key"
 
     endpoint = "https://api.segment.io/v1/track"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Forward Sentry errors and events to Segment.
+            """,
+            IntegrationFeatures.DATA_FORWARDING,
+        )
+    ]
 
     def get_config(self, project, **kwargs):
         return [
diff --git a/src/sentry_plugins/splunk/plugin.py b/src/sentry_plugins/splunk/plugin.py
index ba3c7c93c7..5ba549cb11 100644
--- a/src/sentry_plugins/splunk/plugin.py
+++ b/src/sentry_plugins/splunk/plugin.py
@@ -30,11 +30,17 @@ from sentry.utils.hashlib import md5_text
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.utils import get_secret_field_config
 from sentry_plugins.anonymizeip import anonymize_ip
+from sentry.integrations import FeatureDescription, IntegrationFeatures
+
 
 logger = logging.getLogger(__name__)
 
 SETUP_URL = "https://github.com/getsentry/sentry/blob/master/src/sentry_plugins/splunk/Splunk_Instructions.rst"
 
+DESCRIPTION = """
+Send Sentry events to Splunk.
+"""
+
 
 class SplunkError(Exception):
     def __init__(self, status_code, code=0, text="unknown error"):
@@ -93,10 +99,18 @@ class SplunkConfigError(SplunkError):
 class SplunkPlugin(CorePluginMixin, Plugin):
     title = "Splunk"
     slug = "splunk"
-    description = "Send Sentry events into Splunk."
+    description = DESCRIPTION
     conf_key = "splunk"
     resource_links = [("Splunk Setup Instructions", SETUP_URL)] + CorePluginMixin.resource_links
     required_field = "instance"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Forward Sentry errors and events to Splunk.
+            """,
+            IntegrationFeatures.DATA_FORWARDING,
+        )
+    ]
 
     def configure(self, project, request):
         return react_plugin_config(self, project, request)
diff --git a/src/sentry_plugins/teamwork/plugin.py b/src/sentry_plugins/teamwork/plugin.py
index 75e758e7ac..7ba9a6f4fd 100644
--- a/src/sentry_plugins/teamwork/plugin.py
+++ b/src/sentry_plugins/teamwork/plugin.py
@@ -12,9 +12,18 @@ from sentry_plugins.base import CorePluginMixin
 from sentry.plugins.base import JSONResponse
 from sentry.plugins.bases.issue import IssuePlugin, NewIssueForm
 from sentry.utils.http import absolute_uri
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import TeamworkClient
 
+DESCRIPTION = """
+Create issues in Teamwork directly from Sentry. This integration also allows
+you to link Sentry issues to existing tickets in Teamwork.
+
+Teamwork is a work and project management tool that helps teams improve
+collaboration, visibility, accountability and ultimately results.
+"""
+
 
 class TeamworkSettingsForm(forms.Form):
     url = forms.URLField(label=_("Teamwork URL"), help_text=("i.e. http://sentry.teamwork.com"))
@@ -61,9 +70,24 @@ class TeamworkPlugin(CorePluginMixin, IssuePlugin):
     author = "Sentry Team"
     author_url = "https://github.com/getsentry/sentry"
     title = _("Teamwork")
-    description = _("Create Teamwork Tasks.")
+    description = DESCRIPTION
     slug = "teamwork"
     required_field = "url"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Create and link Sentry issue groups directly to an Teamwork ticket in any of your
+            projects, providing a quick way to jump from a Sentry bug to tracked ticket!
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+        FeatureDescription(
+            """
+            Link Sentry issues to existing Teamwork tickets.
+            """,
+            IntegrationFeatures.ISSUE_BASIC,
+        ),
+    ]
 
     conf_title = title
     conf_key = slug
diff --git a/src/sentry_plugins/trello/plugin.py b/src/sentry_plugins/trello/plugin.py
index 016c6cf2e7..1bdaee71e3 100644
--- a/src/sentry_plugins/trello/plugin.py
+++ b/src/sentry_plugins/trello/plugin.py
@@ -16,9 +16,17 @@ SETUP_URL = "https://github.com/getsentry/sentry/blob/master/src/sentry_plugins/
 
 LABLEX_REGEX = re.compile(r"\w+/https://trello\.com/")
 
+DESCRIPTION = """
+Create cards in Trello directly from Sentry. This integration also allows
+you to link Sentry issues to existing cards in Trello.
+
+Trello is the easy, free, flexible, and visual way to manage your projects
+and organize anything, trusted by millions of people from all over the world.
+"""
+
 
 class TrelloPlugin(CorePluginMixin, IssuePlugin2):
-    description = "Create Trello cards on issues"
+    description = DESCRIPTION
     slug = "trello"
     title = "Trello"
     conf_title = title
diff --git a/src/sentry_plugins/twilio/plugin.py b/src/sentry_plugins/twilio/plugin.py
index 594a7804b5..78e5f5ccc5 100644
--- a/src/sentry_plugins/twilio/plugin.py
+++ b/src/sentry_plugins/twilio/plugin.py
@@ -7,6 +7,7 @@ from django import forms
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.plugins.bases.notify import NotificationPlugin
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import TwilioApiClient
 from sentry_plugins.base import CorePluginMixin
@@ -16,6 +17,13 @@ import sentry
 DEFAULT_REGION = "US"
 MAX_SMS_LENGTH = 160
 
+DESCRIPTION = """
+Get notified of Sentry alerts via SMS.
+
+Twilio allows users to send and receive text messages globally with
+the API that over a million developers depend on.
+"""
+
 
 def validate_phone(phone):
     try:
@@ -92,7 +100,7 @@ class TwilioPlugin(CorePluginMixin, NotificationPlugin):
     author = "Matt Robenolt"
     author_url = "https://github.com/mattrobenolt"
     version = sentry.VERSION
-    description = "A plugin for Sentry which sends SMS notifications via Twilio"
+    description = DESCRIPTION
     resource_links = (
         (
             "Documentation",
@@ -112,6 +120,14 @@ class TwilioPlugin(CorePluginMixin, NotificationPlugin):
     conf_key = "twilio"
     required_field = "account_sid"
     project_conf_form = TwilioConfigurationForm
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Configure rule based SMS notifications to be sent via Twilio.
+            """,
+            IntegrationFeatures.ALERT_RULE,
+        )
+    ]
 
     def is_configured(self, project, **kwargs):
         return all(
diff --git a/src/sentry_plugins/victorops/plugin.py b/src/sentry_plugins/victorops/plugin.py
index 1ba6b70896..41d20461b3 100644
--- a/src/sentry_plugins/victorops/plugin.py
+++ b/src/sentry_plugins/victorops/plugin.py
@@ -7,6 +7,7 @@ from sentry.plugins.bases.notify import NotifyPlugin
 from sentry_plugins.base import CorePluginMixin
 from sentry_plugins.exceptions import ApiError
 from sentry_plugins.utils import get_secret_field_config
+from sentry.integrations import FeatureDescription, IntegrationFeatures
 
 from .client import VictorOpsClient
 
@@ -16,14 +17,30 @@ privacy controls are enabled. For more details about this issue, view this
 issue on Sentry.
 """.strip()
 
+DESCRIPTION = """
+Trigger alerts in VictorOps from Sentry.
+
+VictorOps is incident response software purpose-built for teams powering the
+evolution of software. With on-call basics, cross-team collaboration, and
+streamlined visibility, we champion the engineers powering innovation and uptime.
+"""
+
 
 class VictorOpsPlugin(CorePluginMixin, NotifyPlugin):
-    description = "Send alerts to VictorOps."
+    description = DESCRIPTION
     slug = "victorops"
     title = "VictorOps"
     conf_key = slug
     conf_title = title
     required_field = "api_key"
+    feature_descriptions = [
+        FeatureDescription(
+            """
+            Configure rule based VictorOps alerts to automatically be triggered.
+            """,
+            IntegrationFeatures.ALERT_RULE,
+        )
+    ]
 
     def is_configured(self, project, **kwargs):
         return bool(self.get_option("api_key", project))
