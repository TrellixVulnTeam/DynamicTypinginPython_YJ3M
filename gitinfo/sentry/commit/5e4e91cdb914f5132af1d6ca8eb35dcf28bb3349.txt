commit 5e4e91cdb914f5132af1d6ca8eb35dcf28bb3349
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Apr 23 17:53:03 2013 -0700

    Improve validate settings and correct tests

diff --git a/src/sentry/services/http.py b/src/sentry/services/http.py
index 5a1aed82ae..b905255eba 100644
--- a/src/sentry/services/http.py
+++ b/src/sentry/services/http.py
@@ -9,33 +9,22 @@ sentry.services.http
 from django.core.management import call_command
 
 from sentry.services.base import Service
-from sentry.utils.settings import validate_settings
 
 
 class SentryHTTPServer(Service):
     name = 'http'
 
-    def __init__(self, host=None, port=None, debug=False, workers=None):
+    def __init__(self, host=None, port=None, debug=False, workers=None,
+                 validate=True):
         from sentry.conf import settings
 
-        validate_settings(settings)
+        if validate:
+            self.validate_settings()
 
         self.host = host or settings.WEB_HOST
         self.port = port or settings.WEB_PORT
         self.workers = workers
 
-        # import cProfile, os
-
-        # def post_fork(server, worker):
-        #     orig_init_process_ = worker.init_process
-
-        #     def profiling_init_process(self):
-        #         orig_init_process = orig_init_process_
-        #         ofile = '/tmp/.profile%s' % (os.getpid(),)
-        #         print 'Profiling worker %s, output file: %s' % (worker, ofile)
-        #         cProfile.runctx('orig_init_process()', globals(), locals(), ofile)
-        #     worker.init_process = profiling_init_process.__get__(worker)
-
         options = (settings.WEB_OPTIONS or {}).copy()
         options['debug'] = debug
         options.setdefault('bind', '%s:%s' % (self.host, self.port))
@@ -47,5 +36,11 @@ class SentryHTTPServer(Service):
 
         self.options = options
 
+    def validate_settings(self):
+        from django.conf import settings as django_settings
+        from sentry.utils.settings import validate_settings
+
+        validate_settings(django_settings)
+
     def run(self):
         call_command('run_gunicorn', **self.options)
diff --git a/src/sentry/utils/settings.py b/src/sentry/utils/settings.py
index 2bc6190d50..c54cb6260a 100644
--- a/src/sentry/utils/settings.py
+++ b/src/sentry/utils/settings.py
@@ -51,29 +51,30 @@ def validate_settings(settings):
     for key, engine_key, engine_type in \
             [('DATABASES', 'ENGINE', 'database engine'), ('CACHES', 'BACKEND', 'caching backend')]:
 
-        items = settings.get(key, {})
-
-        for item in items.keys():
-            engine = items[item][engine_key]
+        value = getattr(settings, key, {})
+        for alias in value:
+            engine = value[alias][engine_key]
             if engine not in PACKAGES:
                 continue
             validate_dependency(settings, engine_type, engine, PACKAGES[engine])
 
 
 def validate_dependency(settings, dependency_type, dependency, package):
-        try:
-            import_string(package)
-        except ImportError:
-            reraise_as(ConfigurationError(ConfigurationError.get_error_message("%s %s" % (dependency_type, dependency), package)))
+    try:
+        import_string(package)
+    except ImportError:
+        msg = ConfigurationError.get_error_message("%s %s" % (dependency_type, dependency), package)
+        reraise_as(ConfigurationError(msg))
 
 
 class ConfigurationError(ValueError):
-    '''
+    """
     This error is thrown whenever a sentry configuration is wrong, or requires a third-party library
     that's not installed properly or can't be found.
-    '''
-    pass
-
+    """
     @classmethod
-    def get_error_message(self, dependency, package):
-        return """Python could not find %(package)s in your current environment (required by %(dependency)s). If you have it installed, maybe you are using the wrong python binary to run sentry?""" % {"dependency": dependency, "package": package}
+    def get_error_message(cls, dependency, package):
+        return """Python could not find %(package)s in your current environment (required by %(dependency)s). If you have it installed, maybe you are using the wrong python binary to run sentry?""" % {
+            "dependency": dependency,
+            "package": package
+        }
diff --git a/tests/sentry/http/tests.py b/tests/sentry/http/tests.py
index 3927e22083..de5c5de609 100644
--- a/tests/sentry/http/tests.py
+++ b/tests/sentry/http/tests.py
@@ -5,6 +5,7 @@ from __future__ import absolute_import
 import datetime
 import mock
 
+from django.conf import settings as django_settings
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
 from django.utils import timezone
@@ -12,8 +13,7 @@ from django.utils import timezone
 from raven import Client
 from sentry.models import Group, Event, Project
 from sentry.testutils import TestCase
-from sentry.services.http import SentryHTTPServer
-from sentry.utils.settings import ConfigurationError
+from sentry.utils.settings import validate_settings, ConfigurationError
 
 
 class RavenIntegrationTest(TestCase):
@@ -210,40 +210,28 @@ class HttpServiceTest(TestCase):
             raise ImportError(msg)
         return callable
 
-    def validate_dependency(self, import_string, settings, key, package, dependency_type, dependency, setting_value):
+    @mock.patch('sentry.conf.settings')
+    @mock.patch('sentry.utils.settings.import_string')
+    def validate_dependency(self, key, package, dependency_type, dependency,
+                            setting_value, import_string, settings):
+
         import_string.side_effect = self.raise_import_error(package)
 
-        settings.get = lambda setting, default: setting == key and setting_value or {}
+        with self.Settings(**{key: setting_value}):
+            with self.assertRaises(ConfigurationError):
+                validate_settings(django_settings)
 
-        try:
-            SentryHTTPServer()
-        except ConfigurationError, err:
-            self.assertEquals(str(err), "Python could not find %s in your current environment (required by %s %s). If you have it installed, maybe you are using the wrong python binary to run sentry?" % (package, dependency_type, dependency))
-            return
+    def test_validate_fails_on_postgres(self):
+        self.validate_dependency(*TEST_DATA['postgresql'])
 
-        assert False, "Should not have gotten this far"
+    def test_validate_fails_on_mysql(self):
+        self.validate_dependency(*TEST_DATA['mysql'])
 
-    @mock.patch('sentry.conf.settings')
-    @mock.patch('sentry.utils.imports.import_string')
-    def test_validate_fails_on_postgres(self, import_string, settings):
-        self.validate_dependency(import_string, settings, *TEST_DATA['postgresql'])
+    def test_validate_fails_on_oracle(self):
+        self.validate_dependency(*TEST_DATA['oracle'])
 
-    @mock.patch('sentry.conf.settings')
-    @mock.patch('sentry.utils.imports.import_string')
-    def test_validate_fails_on_mysql(self, import_string, settings):
-        self.validate_dependency(import_string, settings, *TEST_DATA['mysql'])
+    def test_validate_fails_on_memcache(self):
+        self.validate_dependency(*TEST_DATA['memcache'])
 
-    @mock.patch('sentry.conf.settings')
-    @mock.patch('sentry.utils.imports.import_string')
-    def test_validate_fails_on_oracle(self, import_string, settings):
-        self.validate_dependency(import_string, settings, *TEST_DATA['oracle'])
-
-    @mock.patch('sentry.conf.settings')
-    @mock.patch('sentry.utils.imports.import_string')
-    def test_validate_fails_on_memcache(self, import_string, settings):
-        self.validate_dependency(import_string, settings, *TEST_DATA['memcache'])
-
-    @mock.patch('sentry.conf.settings')
-    @mock.patch('sentry.utils.imports.import_string')
-    def test_validate_fails_on_pylibmc(self, import_string, settings):
-        self.validate_dependency(import_string, settings, *TEST_DATA['pylibmc'])
+    def test_validate_fails_on_pylibmc(self):
+        self.validate_dependency(*TEST_DATA['pylibmc'])
