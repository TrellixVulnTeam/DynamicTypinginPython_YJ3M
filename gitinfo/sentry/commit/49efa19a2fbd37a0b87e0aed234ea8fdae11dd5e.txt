commit 49efa19a2fbd37a0b87e0aed234ea8fdae11dd5e
Author: Ben Vinegar <ben.vinegar@gmail.com>
Date:   Sun Apr 16 16:37:15 2017 -0700

    Add prettier to lint engine, prettify existing files (#5247)

diff --git a/package.json b/package.json
index 920684a86e..4d2256ef11 100644
--- a/package.json
+++ b/package.json
@@ -87,6 +87,7 @@
     "karma-webpack": "2.0.1",
     "mocha": "2.3.4",
     "phantomjs-prebuilt": "2.1.14",
+    "prettier": "1.1.0",
     "sinon": "1.17.2",
     "sinon-chai": "2.8.0"
   }
diff --git a/src/sentry/lint/engine.py b/src/sentry/lint/engine.py
index 11f0989ebc..5ec83c93bd 100644
--- a/src/sentry/lint/engine.py
+++ b/src/sentry/lint/engine.py
@@ -68,7 +68,40 @@ def py_lint(file_list):
     return report.total_errors != 0
 
 
+def get_js_file_list(file_list=None):
+    if file_list is None:
+        file_list = ['tests/js', 'src/sentry/static/sentry/app']
+    file_list = get_files_for_list(file_list)
+    file_list = [
+        x for x in file_list
+        if x.endswith(('.js', '.jsx'))
+    ]
+    return file_list
+
+
+def js_beautify(file_list=None):
+    project_root = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir,
+                                os.pardir)
+    prettier_path = os.path.join(project_root, 'node_modules', '.bin', 'prettier')
+
+    if not os.path.exists(prettier_path):
+        from click import echo
+        echo('!! Skipping JavaScript beautification because eslint is not installed.')
+        return False
+
+    file_list = get_js_file_list(file_list)
+
+    has_errors = False
+    if file_list:
+        status = Popen([prettier_path, '--write', '--single-quote', '--bracket-spacing=false', '--print-width=90']
+                       + file_list).wait()
+        has_errors = status != 0
+
+    return has_errors
+
+
 def js_lint(file_list=None):
+
     project_root = os.path.join(os.path.dirname(__file__), os.pardir, os.pardir,
                                 os.pardir)
     eslint_path = os.path.join(project_root, 'node_modules', '.bin', 'eslint')
@@ -78,20 +111,12 @@ def js_lint(file_list=None):
         echo('!! Skipping JavaScript linting because eslint is not installed.')
         return False
 
-    if file_list is None:
-        file_list = ['tests/js', 'src/sentry/static/sentry/app']
-    file_list = get_files_for_list(file_list)
-
     eslint_config = os.path.join(project_root, '.eslintrc')
+    file_list = get_js_file_list(file_list)
 
     has_errors = False
-    file_list = [
-        x for x in file_list
-        if x.endswith(('.js', '.jsx'))
-    ]
-
     if file_list:
-        status = Popen([eslint_path, '--config', eslint_config, '--ext', '.jsx']
+        status = Popen([eslint_path, '--config', eslint_config, '--ext', '.jsx', '--fix']
                        + file_list).wait()
         has_errors = status != 0
 
@@ -109,6 +134,7 @@ def check_files(file_list=None, js=True, py=True):
     if py:
         linters.append(py_lint(file_list))
     if js:
+        linters.append(js_beautify(file_list))
         linters.append(js_lint(file_list))
 
     try:
diff --git a/src/sentry/static/sentry/app/actionCreators/incidents.jsx b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
index b65d1b7a87..5c6302c094 100644
--- a/src/sentry/static/sentry/app/actionCreators/incidents.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/incidents.jsx
@@ -9,13 +9,13 @@ function getIncidentsFromIncidentResponse(incidents) {
 
   let isMajor = false;
   let log = [];
-  incidents.forEach((item) => {
+  incidents.forEach(item => {
     if (!isMajor && item.impact === 'major') {
       isMajor = true;
     }
     log.push({
       name: item.name,
-      updates: item.incident_updates.map((update) => {
+      updates: item.incident_updates.map(update => {
         return update.body;
       }),
       url: item.shortlink,
@@ -36,7 +36,7 @@ export function load() {
       url: 'https://' + cfg.id + '.' + cfg.api_host + '/api/v2/incidents/unresolved.json',
       crossDomain: true,
       cache: false,
-      success: (data) => {
+      success: data => {
         let [incidents, indicator] = getIncidentsFromIncidentResponse(data.incidents);
         IncidentActions.updateSuccess({
           status: {
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 9e4f288d78..651e796e4c 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -7,10 +7,10 @@ export function update(api, params) {
   api.request(endpoint, {
     method: 'PUT',
     data: params.data,
-    success: (data) => {
+    success: data => {
       ProjectActions.updateSuccess(data);
     },
-    error: (data) => {
+    error: data => {
       ProjectActions.updateError(data);
     }
   });
@@ -22,10 +22,10 @@ export function loadStats(api, params) {
   let endpoint = `/organizations/${params.orgId}/stats/`;
   api.request(endpoint, {
     query: params.query,
-    success: (data) => {
+    success: data => {
       ProjectActions.loadStatsSuccess(data);
     },
-    error: (data) => {
+    error: data => {
       ProjectActions.loadStatsError(data);
     }
   });
diff --git a/src/sentry/static/sentry/app/actions/groupActions.jsx b/src/sentry/static/sentry/app/actions/groupActions.jsx
index 2a0ab116a8..ebe08a0514 100644
--- a/src/sentry/static/sentry/app/actions/groupActions.jsx
+++ b/src/sentry/static/sentry/app/actions/groupActions.jsx
@@ -1,7 +1,5 @@
-
 import Reflux from 'reflux';
 
-
 // TODO(dcramer): we should probably just make every parameter update
 // work on bulk groups
 let GroupActions = Reflux.createActions([
@@ -19,6 +17,4 @@ let GroupActions = Reflux.createActions([
   'mergeSuccess'
 ]);
 
-
 export default GroupActions;
-
diff --git a/src/sentry/static/sentry/app/actions/incidentActions.jsx b/src/sentry/static/sentry/app/actions/incidentActions.jsx
index 4db29bf1aa..897b8e2fc7 100644
--- a/src/sentry/static/sentry/app/actions/incidentActions.jsx
+++ b/src/sentry/static/sentry/app/actions/incidentActions.jsx
@@ -1,7 +1,3 @@
 import Reflux from 'reflux';
 
-export default Reflux.createActions([
-  'update',
-  'updateError',
-  'updateSuccess',
-]);
+export default Reflux.createActions(['update', 'updateError', 'updateSuccess']);
diff --git a/src/sentry/static/sentry/app/actions/streamTagActions.jsx b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
index f3442a156b..25fa6042c6 100644
--- a/src/sentry/static/sentry/app/actions/streamTagActions.jsx
+++ b/src/sentry/static/sentry/app/actions/streamTagActions.jsx
@@ -1,8 +1,3 @@
-
 import Reflux from 'reflux';
 
-export default Reflux.createActions([
-  'loadTags',
-  'loadTagsError',
-  'loadTagsSuccess'
-]);
+export default Reflux.createActions(['loadTags', 'loadTagsError', 'loadTagsSuccess']);
diff --git a/src/sentry/static/sentry/app/actions/teamActions.jsx b/src/sentry/static/sentry/app/actions/teamActions.jsx
index 09ba97c5ba..964acdc396 100644
--- a/src/sentry/static/sentry/app/actions/teamActions.jsx
+++ b/src/sentry/static/sentry/app/actions/teamActions.jsx
@@ -1,10 +1,5 @@
 import Reflux from 'reflux';
 
-let TeamActions = Reflux.createActions([
-  'update',
-  'updateError',
-  'updateSuccess'
-]);
-
+let TeamActions = Reflux.createActions(['update', 'updateError', 'updateSuccess']);
 
 export default TeamActions;
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
index 5baef03304..b4ac23ed8e 100644
--- a/src/sentry/static/sentry/app/api.jsx
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -21,10 +21,10 @@ export class Request {
  */
 export function paramsToQueryArgs(params) {
   return params.itemIds
-      ? {id: params.itemIds}    // items matching array of itemids
-      : params.query
+    ? {id: params.itemIds} // items matching array of itemids
+    : params.query
         ? {query: params.query} // items matching search query
-        : undefined;            // all items
+        : undefined; // all items
 }
 
 export class Client {
@@ -38,12 +38,9 @@ export class Client {
 
   uniqueId() {
     let s4 = () => {
-      return Math.floor((1 + Math.random()) * 0x10000)
-                 .toString(16)
-                 .substring(1);
+      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
     };
-    return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
-           s4() + '-' + s4() + s4() + s4();
+    return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
   }
 
   wrapCallback(id, func, cleanup) {
@@ -93,26 +90,28 @@ export class Client {
       }
     }
 
-    this.activeRequests[id] = new Request($.ajax({
-      url: fullUrl,
-      method: method,
-      data: data,
-      contentType: 'application/json',
-      headers: {
-        'Accept': 'application/json; charset=utf-8'
-      },
-      success: this.wrapCallback(id, options.success),
-      error: this.wrapCallback(id, options.error),
-      complete: this.wrapCallback(id, options.complete, true)
-    }));
+    this.activeRequests[id] = new Request(
+      $.ajax({
+        url: fullUrl,
+        method: method,
+        data: data,
+        contentType: 'application/json',
+        headers: {
+          Accept: 'application/json; charset=utf-8'
+        },
+        success: this.wrapCallback(id, options.success),
+        error: this.wrapCallback(id, options.error),
+        complete: this.wrapCallback(id, options.complete, true)
+      })
+    );
 
     return this.activeRequests[id];
   }
 
   _chain(...funcs) {
-    funcs = funcs.filter((f) => !_.isUndefined(f) && f);
+    funcs = funcs.filter(f => !_.isUndefined(f) && f);
     return (...args) => {
-      funcs.forEach((func) => {
+      funcs.forEach(func => {
         func.apply(funcs, args);
       });
     };
@@ -137,16 +136,20 @@ export class Client {
 
     GroupActions.delete(id, params.itemIds);
 
-    return this._wrapRequest(path, {
-      query: query,
-      method: 'DELETE',
-      success: (response) => {
-        GroupActions.deleteSuccess(id, params.itemIds, response);
+    return this._wrapRequest(
+      path,
+      {
+        query: query,
+        method: 'DELETE',
+        success: response => {
+          GroupActions.deleteSuccess(id, params.itemIds, response);
+        },
+        error: error => {
+          GroupActions.deleteError(id, params.itemIds, error);
+        }
       },
-      error: (error) => {
-        GroupActions.deleteError(id, params.itemIds, error);
-      }
-    }, options);
+      options
+    );
   }
 
   bulkUpdate(params, options) {
@@ -156,17 +159,21 @@ export class Client {
 
     GroupActions.update(id, params.itemIds, params.data);
 
-    return this._wrapRequest(path, {
-      query: query,
-      method: 'PUT',
-      data: params.data,
-      success: (response) => {
-        GroupActions.updateSuccess(id, params.itemIds, response);
+    return this._wrapRequest(
+      path,
+      {
+        query: query,
+        method: 'PUT',
+        data: params.data,
+        success: response => {
+          GroupActions.updateSuccess(id, params.itemIds, response);
+        },
+        error: error => {
+          GroupActions.updateError(id, params.itemIds, error, params.failSilently);
+        }
       },
-      error: (error) => {
-        GroupActions.updateError(id, params.itemIds, error, params.failSilently);
-      }
-    }, options);
+      options
+    );
   }
 
   merge(params, options) {
@@ -176,72 +183,103 @@ export class Client {
 
     GroupActions.merge(id, params.itemIds);
 
-    return this._wrapRequest(path, {
-      query: query,
-      method: 'PUT',
-      data: {merge: 1},
-      success: (response) => {
-        GroupActions.mergeSuccess(id, params.itemIds, response);
+    return this._wrapRequest(
+      path,
+      {
+        query: query,
+        method: 'PUT',
+        data: {merge: 1},
+        success: response => {
+          GroupActions.mergeSuccess(id, params.itemIds, response);
+        },
+        error: error => {
+          GroupActions.mergeError(id, params.itemIds, error);
+        }
       },
-      error: (error) => {
-        GroupActions.mergeError(id, params.itemIds, error);
-      }
-    }, options);
+      options
+    );
   }
 
   assignTo(params, options) {
     let path = '/issues/' + params.id + '/';
     let id = this.uniqueId();
 
-    GroupActions.assignTo(id, params.id, {email: params.member && params.member.email || ''});
-
-    return this._wrapRequest(path, {
-      method: 'PUT',
-      // Sending an empty value to assignedTo is the same as "clear",
-      // so if no member exists, that implies that we want to clear the
-      // current assignee.
-      data: {assignedTo: params.member && params.member.id || ''},
-      success: (response) => {
-        GroupActions.assignToSuccess(id, params.id, response);
+    GroupActions.assignTo(id, params.id, {
+      email: (params.member && params.member.email) || ''
+    });
+
+    return this._wrapRequest(
+      path,
+      {
+        method: 'PUT',
+        // Sending an empty value to assignedTo is the same as "clear",
+        // so if no member exists, that implies that we want to clear the
+        // current assignee.
+        data: {assignedTo: (params.member && params.member.id) || ''},
+        success: response => {
+          GroupActions.assignToSuccess(id, params.id, response);
+        },
+        error: error => {
+          GroupActions.assignToError(id, params.id, error);
+        }
       },
-      error: (error) => {
-        GroupActions.assignToError(id, params.id, error);
-      }
-    }, options);
+      options
+    );
   }
 
   joinTeam(params, options) {
-    let path = '/organizations/' + params.orgId + '/members/' + (params.memberId || 'me') + '/teams/' + params.teamId + '/';
+    let path =
+      '/organizations/' +
+      params.orgId +
+      '/members/' +
+      (params.memberId || 'me') +
+      '/teams/' +
+      params.teamId +
+      '/';
     let id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
-    return this._wrapRequest(path, {
-      method: 'POST',
-      success: (response) => {
-        TeamActions.updateSuccess(id, params.teamId, response);
+    return this._wrapRequest(
+      path,
+      {
+        method: 'POST',
+        success: response => {
+          TeamActions.updateSuccess(id, params.teamId, response);
+        },
+        error: error => {
+          TeamActions.updateError(id, params.teamId, error);
+        }
       },
-      error: (error) => {
-        TeamActions.updateError(id, params.teamId, error);
-      }
-    }, options);
+      options
+    );
   }
 
   leaveTeam(params, options) {
-    let path = '/organizations/' + params.orgId + '/members/' + (params.memberId || 'me') + '/teams/' + params.teamId + '/';
+    let path =
+      '/organizations/' +
+      params.orgId +
+      '/members/' +
+      (params.memberId || 'me') +
+      '/teams/' +
+      params.teamId +
+      '/';
     let id = this.uniqueId();
 
     TeamActions.update(id, params.teamId);
 
-    return this._wrapRequest(path, {
-      method: 'DELETE',
-      success: (response) => {
-        TeamActions.updateSuccess(id, params.teamId, response);
+    return this._wrapRequest(
+      path,
+      {
+        method: 'DELETE',
+        success: response => {
+          TeamActions.updateSuccess(id, params.teamId, response);
+        },
+        error: error => {
+          TeamActions.updateError(id, params.teamId, error);
+        }
       },
-      error: (error) => {
-        TeamActions.updateError(id, params.teamId, error);
-      }
-    }, options);
+      options
+    );
   }
 }
-
diff --git a/src/sentry/static/sentry/app/components/actionOverlay.jsx b/src/sentry/static/sentry/app/components/actionOverlay.jsx
index 4c7c09f318..b42fdde50f 100644
--- a/src/sentry/static/sentry/app/components/actionOverlay.jsx
+++ b/src/sentry/static/sentry/app/components/actionOverlay.jsx
@@ -47,21 +47,21 @@ const ActionOverlay = React.createClass({
 
     return (
       <div className={className} {...other}>
-        <div className="pattern"/>
+        <div className="pattern" />
         <div className="container">
           <div className="dialog">
             <div className="dialog-contents">
               <div className="discard-bar">
-                <a href={orgUrl} onClick={this.onDoThisLater}>{
-                  t('Do this later …')}</a>
+                <a href={orgUrl} onClick={this.onDoThisLater}>{t('Do this later …')}</a>
               </div>
               <div className="content">
                 {children}
               </div>
-              {isLoading ?
-                <div className="loading-overlay">
-                  <LoadingIndicator/>
-                </div> : null}
+              {isLoading
+                ? <div className="loading-overlay">
+                    <LoadingIndicator />
+                  </div>
+                : null}
             </div>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/components/activity/feed.jsx b/src/sentry/static/sentry/app/components/activity/feed.jsx
index cbfcea9600..8ab6ce9182 100644
--- a/src/sentry/static/sentry/app/components/activity/feed.jsx
+++ b/src/sentry/static/sentry/app/components/activity/feed.jsx
@@ -21,7 +21,7 @@ const ActivityFeed = React.createClass({
   getDefaultProps() {
     return {
       pagination: true,
-      query: {},
+      query: {}
     };
   },
 
@@ -30,7 +30,7 @@ const ActivityFeed = React.createClass({
       itemList: [],
       loading: true,
       error: false,
-      pageLinks: null,
+      pageLinks: null
     };
   },
 
@@ -41,7 +41,9 @@ const ActivityFeed = React.createClass({
   componentWillReceiveProps(nextProps) {
     let location = this.props.location;
     let nextLocation = nextProps.location;
-    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+    if (
+      location.pathname != nextLocation.pathname || location.search != nextLocation.search
+    ) {
       this.remountComponent();
     }
   },
@@ -57,20 +59,20 @@ const ActivityFeed = React.createClass({
       method: 'GET',
       query: {
         cursor: location.query.cursor || '',
-        ...this.props.query,
+        ...this.props.query
       },
       success: (data, _, jqXHR) => {
         this.setState({
           loading: false,
           error: false,
           itemList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -80,19 +82,15 @@ const ActivityFeed = React.createClass({
     let body;
     let {orgId} = this.props.params;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
     else if (this.state.itemList.length > 0) {
       body = (
         <div className="activity-container">
           <ul className="activity">
-            {this.state.itemList.map((item) => {
+            {this.state.itemList.map(item => {
               try {
-                return (
-                  <ActivityItem key={item.id} orgId={orgId} item={item} />
-                );
+                return <ActivityItem key={item.id} orgId={orgId} item={item} />;
               } catch (ex) {
                 logException(ex, {
                   itemId: item.id
@@ -103,9 +101,7 @@ const ActivityFeed = React.createClass({
           </ul>
         </div>
       );
-    }
-    else
-      body = (this.props.renderEmpty || this.renderEmpty)();
+    } else body = (this.props.renderEmpty || this.renderEmpty)();
 
     return body;
   },
@@ -126,9 +122,9 @@ const ActivityFeed = React.createClass({
     return (
       <div>
         {this.renderResults()}
-        {this.props.pagination && this.state.pageLinks &&
-          <Pagination pageLinks={this.state.pageLinks} {...this.props} />
-        }
+        {this.props.pagination &&
+          this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks} {...this.props} />}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/activity/item.jsx b/src/sentry/static/sentry/app/components/activity/item.jsx
index 59e9c2fe47..f687202204 100644
--- a/src/sentry/static/sentry/app/components/activity/item.jsx
+++ b/src/sentry/static/sentry/app/components/activity/item.jsx
@@ -10,7 +10,6 @@ import Version from '../../components/version';
 
 import {tct} from '../../locale';
 
-
 const ActivityItem = React.createClass({
   propTypes: {
     clipHeight: React.PropTypes.number,
@@ -36,7 +35,7 @@ const ActivityItem = React.createClass({
     if (this.refs.activityBubble) {
       let bubbleHeight = this.refs.activityBubble.offsetHeight;
 
-      if (bubbleHeight > this.props.clipHeight ) {
+      if (bubbleHeight > this.props.clipHeight) {
         /*eslint react/no-did-mount-set-state:0*/
         // okay if this causes re-render; cannot determine until
         // rendered first anyways
@@ -53,11 +52,15 @@ const ActivityItem = React.createClass({
     let project = item.project;
     let issue = item.issue;
 
-    switch(item.type) {
+    switch (item.type) {
       case 'note':
         return tct('[author] commented on [link:an issue]', {
           author: author,
-          link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/activity/#event_${item.id}`} />
+          link: (
+            <Link
+              to={`/${orgId}/${project.slug}/issues/${issue.id}/activity/#event_${item.id}`}
+            />
+          )
         });
       case 'set_resolved':
         return tct('[author] marked [link:an issue] as resolved', {
@@ -73,14 +76,19 @@ const ActivityItem = React.createClass({
         if (data.version) {
           return tct('[author] marked [link:an issue] as resolved in [version]', {
             author: author,
-            version: <Version version={data.version} orgId={orgId} projectId={project.slug} />,
+            version: (
+              <Version version={data.version} orgId={orgId} projectId={project.slug} />
+            ),
             link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
           });
         }
-        return tct('[author] marked [link:an issue] as resolved in the upcoming release', {
-          author: author,
-          link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
-        });
+        return tct(
+          '[author] marked [link:an issue] as resolved in the upcoming release',
+          {
+            author: author,
+            link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
+          }
+        );
       case 'set_resolved_in_commit':
         return tct('[author] marked [link:an issue] as fixed in [version]', {
           author: author,
@@ -118,7 +126,9 @@ const ActivityItem = React.createClass({
         if (data.version) {
           return tct('[author] marked [link:an issue] as a regression in [version]', {
             author: author,
-            version: <Version version={data.version} orgId={orgId} projectId={project.slug} />,
+            version: (
+              <Version version={data.version} orgId={orgId} projectId={project.slug} />
+            ),
             link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
           });
         }
@@ -152,8 +162,7 @@ const ActivityItem = React.createClass({
             assignee: <span title={assignee.email}>{assignee.name}</span>,
             link: <Link to={`/${orgId}/${project.slug}/issues/${issue.id}/`} />
           });
-        }
-        else if (data.assigneeEmail) {
+        } else if (data.assigneeEmail) {
           return tct('[author] assigned [link:an issue] to [assignee]', {
             author: author,
             assignee: data.assigneeEmail,
@@ -179,12 +188,16 @@ const ActivityItem = React.createClass({
       case 'release':
         return tct('[author] released version [version]', {
           author: author,
-          version: <Version version={data.version} orgId={orgId} projectId={project.slug} />
+          version: (
+            <Version version={data.version} orgId={orgId} projectId={project.slug} />
+          )
         });
       case 'deploy':
         return tct('[author] deployed version [version] to [environment].', {
           author: author,
-          version: <Version version={data.version} orgId={orgId} projectId={project.slug} />,
+          version: (
+            <Version version={data.version} orgId={orgId} projectId={project.slug} />
+          ),
           environment: data.environment || 'Default Environment'
         });
       default:
@@ -201,13 +214,13 @@ const ActivityItem = React.createClass({
       bubbleClassName += ' clipped';
     }
 
-    let avatar = (item.user ?
-      <Avatar user={item.user} size={64} className="avatar" /> :
-      <div className="avatar sentry"><span className="icon-sentry-logo" /></div>);
+    let avatar = item.user
+      ? <Avatar user={item.user} size={64} className="avatar" />
+      : <div className="avatar sentry"><span className="icon-sentry-logo" /></div>;
 
     let author = {
       name: item.user ? item.user.name : 'Sentry',
-      avatar: avatar,
+      avatar: avatar
     };
 
     if (item.type === 'note') {
@@ -222,11 +235,15 @@ const ActivityItem = React.createClass({
               </span>,
               item
             )}
-            <div className={bubbleClassName} ref="activityBubble" dangerouslySetInnerHTML={{__html: noteBody}} />
+            <div
+              className={bubbleClassName}
+              ref="activityBubble"
+              dangerouslySetInnerHTML={{__html: noteBody}}
+            />
             <div className="activity-meta">
-              <Link
-                className="project"
-                to={`/${orgId}/${item.project.slug}/`}>{item.project.name}</Link>
+              <Link className="project" to={`/${orgId}/${item.project.slug}/`}>
+                {item.project.name}
+              </Link>
               <span className="bullet" />
               <TimeSince date={item.dateCreated} />
             </div>
@@ -248,9 +265,9 @@ const ActivityItem = React.createClass({
               <a href={item.data.location}>{item.data.title}</a>
             </div>
             <div className="activity-meta">
-              <Link
-                className="project"
-                to={`/${orgId}/${item.project.slug}/`}>{item.project.name}</Link>
+              <Link className="project" to={`/${orgId}/${item.project.slug}/`}>
+                {item.project.name}
+              </Link>
               <span className="bullet" />
               <TimeSince date={item.dateCreated} />
             </div>
@@ -269,9 +286,9 @@ const ActivityItem = React.createClass({
               item
             )}
             <div className="activity-meta">
-              <Link
-                className="project"
-                to={`/${orgId}/${item.project.slug}/`}>{item.project.name}</Link>
+              <Link className="project" to={`/${orgId}/${item.project.slug}/`}>
+                {item.project.name}
+              </Link>
               <span className="bullet" />
               <TimeSince date={item.dateCreated} />
             </div>
@@ -279,7 +296,7 @@ const ActivityItem = React.createClass({
         </li>
       );
     }
-  },
+  }
 });
 
 export default ActivityItem;
diff --git a/src/sentry/static/sentry/app/components/activity/note.jsx b/src/sentry/static/sentry/app/components/activity/note.jsx
index cb4408ed5d..53e702a4b5 100644
--- a/src/sentry/static/sentry/app/components/activity/note.jsx
+++ b/src/sentry/static/sentry/app/components/activity/note.jsx
@@ -11,7 +11,7 @@ const Note = React.createClass({
     author: React.PropTypes.object.isRequired,
     item: React.PropTypes.object.isRequired,
     onEdit: React.PropTypes.func.isRequired,
-    onDelete: React.PropTypes.func.isRequired,
+    onDelete: React.PropTypes.func.isRequired
   },
 
   canEdit() {
@@ -26,16 +26,19 @@ const Note = React.createClass({
     return (
       <div>
         <TimeSince date={item.dateCreated} />
-        <div className="activity-author">{author.name}
-        {this.canEdit() &&
-          <span className="editor-tools">
-            <a onClick={onEdit}>{t('Edit')}</a>
-            <LinkWithConfirmation
-              className="danger"
-              message={t('Are you sure you wish to delete this comment?')}
-              onConfirm={onDelete}>{t('Remove')}</LinkWithConfirmation>
-          </span>
-        }
+        <div className="activity-author">
+          {author.name}
+          {this.canEdit() &&
+            <span className="editor-tools">
+              <a onClick={onEdit}>{t('Edit')}</a>
+              <LinkWithConfirmation
+                className="danger"
+                message={t('Are you sure you wish to delete this comment?')}
+                onConfirm={onDelete}
+              >
+                {t('Remove')}
+              </LinkWithConfirmation>
+            </span>}
         </div>
         <div dangerouslySetInnerHTML={{__html: noteBody}} />
       </div>
diff --git a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
index 21f77c7f25..6591590b10 100644
--- a/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteContainer.jsx
@@ -36,18 +36,14 @@ const NoteContainer = React.createClass({
       <li className="activity-note">
         {author.avatar}
         <div className="activity-bubble">
-        {this.state.editing ?
-          <NoteInput
-            group={group}
-            item={item}
-            onFinish={this.onFinish} />
-        :
-          <Note
-            item={item}
-            author={author}
-            onEdit={this.onEdit}
-            onDelete={this.onDelete} />
-        }
+          {this.state.editing
+            ? <NoteInput group={group} item={item} onFinish={this.onFinish} />
+            : <Note
+                item={item}
+                author={author}
+                onEdit={this.onEdit}
+                onDelete={this.onDelete}
+              />}
         </div>
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/activity/noteInput.jsx b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
index 246768ea60..d53bdb9970 100644
--- a/src/sentry/static/sentry/app/components/activity/noteInput.jsx
+++ b/src/sentry/static/sentry/app/components/activity/noteInput.jsx
@@ -22,10 +22,7 @@ const NoteInput = React.createClass({
     onFinish: React.PropTypes.func
   },
 
-  mixins: [
-    PureRenderMixin,
-    ApiMixin
-  ],
+  mixins: [PureRenderMixin, ApiMixin],
 
   getInitialState() {
     let {item, group} = this.props;
@@ -64,11 +61,14 @@ const NoteInput = React.createClass({
     if (this.state.value === nextState.value) return;
 
     try {
-      localStorage.setItem(localStorageKey, JSON.stringify({
-        groupId: this.props.group.id,
-        value: nextState.value
-      }));
-    } catch(ex) {
+      localStorage.setItem(
+        localStorageKey,
+        JSON.stringify({
+          groupId: this.props.group.id,
+          value: nextState.value
+        })
+      );
+    } catch (ex) {
       logException(ex);
     }
   },
@@ -90,7 +90,7 @@ const NoteInput = React.createClass({
     this.setState({
       loading: true,
       error: false,
-      errorJSON: null,
+      errorJSON: null
     });
 
     if (this.state.updating) {
@@ -110,7 +110,7 @@ const NoteInput = React.createClass({
       data: {
         text: this.state.value
       },
-      error: (error) => {
+      error: error => {
         this.setState({
           loading: false,
           preview: false,
@@ -118,7 +118,7 @@ const NoteInput = React.createClass({
           errorJSON: error.responseJSON || makeDefaultErrorJson()
         });
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           value: '',
           preview: false,
@@ -144,7 +144,7 @@ const NoteInput = React.createClass({
       data: {
         text: this.state.value
       },
-      error: (error) => {
+      error: error => {
         this.setState({
           loading: false,
           preview: false,
@@ -153,7 +153,7 @@ const NoteInput = React.createClass({
         });
         IndicatorStore.remove(loadingIndicator);
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           preview: false,
           expanded: false,
@@ -198,7 +198,6 @@ const NoteInput = React.createClass({
       e.target.value = '';
       e.target.value = value;
     }
-
   },
 
   maybeCollapse() {
@@ -235,26 +234,32 @@ const NoteInput = React.createClass({
               </span>
             </li>
           </ul>
-          {preview ?
-            <div className="note-preview"
-                 dangerouslySetInnerHTML={{__html: marked(value)}} />
-          :
-            <textarea placeholder={t('Add details or updates to this event')}
-                      onChange={this.onChange}
-                      onKeyDown={this.onKeyDown}
-                      onFocus={this.expand} onBlur={this.maybeCollapse}
-                      required={true}
-                      autoFocus={true}
-                      value={value} />
-          }
+          {preview
+            ? <div
+                className="note-preview"
+                dangerouslySetInnerHTML={{__html: marked(value)}}
+              />
+            : <textarea
+                placeholder={t('Add details or updates to this event')}
+                onChange={this.onChange}
+                onKeyDown={this.onKeyDown}
+                onFocus={this.expand}
+                onBlur={this.maybeCollapse}
+                required={true}
+                autoFocus={true}
+                value={value}
+              />}
           <div className="activity-actions">
-            {errorJSON && errorJSON.detail &&
-              <small className="error">{errorJSON.detail}</small>
-            }
-            <button className="btn btn-default" type="submit"
-                    disabled={loading}>{btnText}</button>
+            {errorJSON &&
+              errorJSON.detail &&
+              <small className="error">{errorJSON.detail}</small>}
+            <button className="btn btn-default" type="submit" disabled={loading}>
+              {btnText}
+            </button>
             {updating &&
-              <button className="btn btn-danger" onClick={this.onCancel}>{t('Cancel')}</button>}
+              <button className="btn btn-danger" onClick={this.onCancel}>
+                {t('Cancel')}
+              </button>}
           </div>
         </div>
       </form>
diff --git a/src/sentry/static/sentry/app/components/alertMessage.jsx b/src/sentry/static/sentry/app/components/alertMessage.jsx
index 0fe31b340f..ba1551712a 100644
--- a/src/sentry/static/sentry/app/components/alertMessage.jsx
+++ b/src/sentry/static/sentry/app/components/alertMessage.jsx
@@ -8,11 +8,7 @@ const AlertMessage = React.createClass({
     alert: React.PropTypes.shape({
       id: React.PropTypes.string,
       message: React.PropTypes.string.isRequired,
-      type: React.PropTypes.oneOf([
-        'success',
-        'error',
-        'warning'
-      ]),
+      type: React.PropTypes.oneOf(['success', 'error', 'warning']),
       url: React.PropTypes.string
     })
   },
@@ -32,11 +28,15 @@ const AlertMessage = React.createClass({
     return (
       <div className={className}>
         <div className="container">
-          <button type="button" className="close" aria-label={t('Close')}
-                  onClick={this.closeAlert}>
-            <span aria-hidden="true">&times;</span>
+          <button
+            type="button"
+            className="close"
+            aria-label={t('Close')}
+            onClick={this.closeAlert}
+          >
+            <span aria-hidden="true">×</span>
           </button>
-          <span className="icon"></span>
+          <span className="icon" />
           {this.props.alert.url
             ? <a href={this.props.alert.url}>{this.props.alert.message}</a>
             : this.props.alert.message}
diff --git a/src/sentry/static/sentry/app/components/alerts.jsx b/src/sentry/static/sentry/app/components/alerts.jsx
index f6a605f858..a00b33d22a 100644
--- a/src/sentry/static/sentry/app/components/alerts.jsx
+++ b/src/sentry/static/sentry/app/components/alerts.jsx
@@ -6,10 +6,7 @@ import AlertStore from '../stores/alertStore';
 import AlertMessage from './alertMessage';
 
 const Alerts = React.createClass({
-  mixins: [
-    PureRenderMixin,
-    Reflux.connect(AlertStore, 'alerts')
-  ],
+  mixins: [PureRenderMixin, Reflux.connect(AlertStore, 'alerts')],
 
   getInitialState() {
     return {
@@ -21,7 +18,7 @@ const Alerts = React.createClass({
     return (
       <div {...this.props}>
         {this.state.alerts.map(function(alert) {
-           return <AlertMessage alert={alert} key={alert.key} />;
+          return <AlertMessage alert={alert} key={alert.key} />;
         })}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
index ab9a7f612b..f96b835316 100644
--- a/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/alerts/toastIndicator.jsx
@@ -4,7 +4,7 @@ import React from 'react';
 function ToastIndicator({type, children}) {
   return (
     <div className={classNames('toast', type)}>
-      <span className="icon"></span>
+      <span className="icon" />
       <div className="toast-message">{children}</div>
     </div>
   );
diff --git a/src/sentry/static/sentry/app/components/assigneeSelector.jsx b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
index 8fc0c71ba4..81bc1a5fd2 100644
--- a/src/sentry/static/sentry/app/components/assigneeSelector.jsx
+++ b/src/sentry/static/sentry/app/components/assigneeSelector.jsx
@@ -30,8 +30,7 @@ const AssigneeSelector = React.createClass({
 
   statics: {
     filterMembers(memberList, filter) {
-      if (!filter)
-        return memberList;
+      if (!filter) return memberList;
 
       filter = filter.toLowerCase();
       return memberList.filter(item => {
@@ -44,10 +43,11 @@ const AssigneeSelector = React.createClass({
     putSessionUserFirst(members) {
       // If session user is in the filtered list of members, put them at the top
       let sessionUser = ConfigStore.get('user');
-      let sessionUserIndex = members.findIndex(member => sessionUser && member.id === sessionUser.id);
+      let sessionUserIndex = members.findIndex(
+        member => sessionUser && member.id === sessionUser.id
+      );
 
-      if (sessionUserIndex === -1)
-        return members;
+      if (sessionUserIndex === -1) return members;
 
       return [members[sessionUserIndex]]
         .concat(members.slice(0, sessionUserIndex))
@@ -136,7 +136,10 @@ const AssigneeSelector = React.createClass({
 
   onFilterKeyDown(evt) {
     if (evt.key === 'Enter' && this.state.filter) {
-      let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
+      let members = AssigneeSelector.filterMembers(
+        this.state.memberList,
+        this.state.filter
+      );
       if (members.length > 0) {
         this.assignTo(members[0]);
       }
@@ -182,14 +185,19 @@ const AssigneeSelector = React.createClass({
       className += ' unassigned';
     }
 
-    let members = AssigneeSelector.filterMembers(this.state.memberList, this.state.filter);
+    let members = AssigneeSelector.filterMembers(
+      this.state.memberList,
+      this.state.filter
+    );
     members = AssigneeSelector.putSessionUserFirst(members);
 
-    let memberNodes = members.map((item) => {
+    let memberNodes = members.map(item => {
       return (
-        <MenuItem key={item.id}
-                  disabled={loading}
-                  onSelect={this.assignTo.bind(this, item)} >
+        <MenuItem
+          key={item.id}
+          disabled={loading}
+          onSelect={this.assignTo.bind(this, item)}
+        >
           <Avatar user={item} className="avatar" size={48} />
           {this.highlight(item.name || item.email, this.state.filter)}
         </MenuItem>
@@ -198,7 +206,9 @@ const AssigneeSelector = React.createClass({
 
     if (memberNodes.length === 0) {
       memberNodes = [
-        <li className="not-found" key="no-user"><span>{t('No matching users found.')}</span></li>
+        <li className="not-found" key="no-user">
+          <span>{t('No matching users found.')}</span>
+        </li>
       ];
     }
 
@@ -209,39 +219,44 @@ const AssigneeSelector = React.createClass({
 
     return (
       <div ref="container">
-        <div className={classNames(className, 'tip')} title={tooltipTitle} >
-          {loading ?
-            <LoadingIndicator mini={true} />
-          :
-            <DropdownLink
-              ref="dropdown"
-              className="assignee-selector-toggle"
-              onOpen={this.onDropdownOpen}
-              onClose={this.onDropdownClose}
-              title={assignedTo ?
-                <Avatar user={assignedTo} className="avatar" size={48} />
-                :
-                <span className="icon-user" />
-              }>
-              <MenuItem noAnchor={true} key="filter">
-                <input type="text" className="form-control input-sm"
-                       placeholder={t('Filter people')} ref="filter"
-                       onKeyDown={this.onFilterKeyDown}
-                       onKeyUp={this.onFilterKeyUp} />
-              </MenuItem>
-              {assignedTo ?
-                <MenuItem key="clear"
-                          className="clear-assignee"
-                          disabled={!loading}
-                          onSelect={this.clearAssignTo}>
-                  <span className="icon-circle-cross"/> {t('Clear Assignee')}
+        <div className={classNames(className, 'tip')} title={tooltipTitle}>
+          {loading
+            ? <LoadingIndicator mini={true} />
+            : <DropdownLink
+                ref="dropdown"
+                className="assignee-selector-toggle"
+                onOpen={this.onDropdownOpen}
+                onClose={this.onDropdownClose}
+                title={
+                  assignedTo
+                    ? <Avatar user={assignedTo} className="avatar" size={48} />
+                    : <span className="icon-user" />
+                }
+              >
+                <MenuItem noAnchor={true} key="filter">
+                  <input
+                    type="text"
+                    className="form-control input-sm"
+                    placeholder={t('Filter people')}
+                    ref="filter"
+                    onKeyDown={this.onFilterKeyDown}
+                    onKeyUp={this.onFilterKeyUp}
+                  />
                 </MenuItem>
-              : ''}
-              <li>
-                <ul>{memberNodes}</ul>
-              </li>
-            </DropdownLink>
-          }
+                {assignedTo
+                  ? <MenuItem
+                      key="clear"
+                      className="clear-assignee"
+                      disabled={!loading}
+                      onSelect={this.clearAssignTo}
+                    >
+                      <span className="icon-circle-cross" /> {t('Clear Assignee')}
+                    </MenuItem>
+                  : ''}
+                <li>
+                  <ul>{memberNodes}</ul>
+                </li>
+              </DropdownLink>}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/avatar.jsx b/src/sentry/static/sentry/app/components/avatar.jsx
index ce87dda877..96acc54fdb 100644
--- a/src/sentry/static/sentry/app/components/avatar.jsx
+++ b/src/sentry/static/sentry/app/components/avatar.jsx
@@ -10,14 +10,14 @@ const Avatar = React.createClass({
     size: React.PropTypes.number,
     default: React.PropTypes.string,
     title: React.PropTypes.string,
-    gravatar: React.PropTypes.bool,
+    gravatar: React.PropTypes.bool
   },
 
   getDefaultProps() {
     return {
       className: 'avatar',
       size: 64,
-      gravatar: true,
+      gravatar: true
     };
   },
 
@@ -68,22 +68,22 @@ const Avatar = React.createClass({
     if (user.avatar) {
       avatarType = user.avatar.avatarType;
     } else {
-      avatarType = (
-        (user.email && this.props.gravatar) ?
-          'gravatar' :
-          'letter_avatar'
-      );
+      avatarType = user.email && this.props.gravatar ? 'gravatar' : 'letter_avatar';
     }
-    let props = {title: this.props.title, onError: this.onError, onLoad: this.onLoad};
+    let props = {
+      title: this.props.title,
+      onError: this.onError,
+      onLoad: this.onLoad
+    };
     if (user.options && user.options.avatarType) {
       avatarType = user.options.avatarType;
     }
     if (avatarType === 'gravatar') {
-      return <img src={this.buildGravatarUrl()} {...props}/>;
+      return <img src={this.buildGravatarUrl()} {...props} />;
     } else if (avatarType === 'upload') {
-      return <img src={this.buildProfileUrl()} {...props}/>;
+      return <img src={this.buildProfileUrl()} {...props} />;
     } else {
-      return <UserLetterAvatar user={user}/>;
+      return <UserLetterAvatar user={user} />;
     }
   },
 
@@ -95,7 +95,7 @@ const Avatar = React.createClass({
 
     return (
       <span className={this.props.className}>
-        {this.state.showBackupAvatar && <UserLetterAvatar user={user}/>}
+        {this.state.showBackupAvatar && <UserLetterAvatar user={user} />}
         {this.renderImg()}
       </span>
     );
diff --git a/src/sentry/static/sentry/app/components/avatarCropper.jsx b/src/sentry/static/sentry/app/components/avatarCropper.jsx
index d227d9f5df..e4ceb74fc1 100644
--- a/src/sentry/static/sentry/app/components/avatarCropper.jsx
+++ b/src/sentry/static/sentry/app/components/avatarCropper.jsx
@@ -3,7 +3,6 @@ import React from 'react';
 import AlertActions from '../actions/alertActions';
 import {t} from '../locale';
 
-
 const AvatarCropper = React.createClass({
   propTypes: {
     user: React.PropTypes.object.isRequired,
@@ -37,19 +36,21 @@ const AvatarCropper = React.createClass({
     /*eslint consistent-return:0*/
     let file = ev.target.files[0];
 
-    if (!file)
-      return; // No file selected (e.g. user clicked "cancel")
+    if (!file) return; // No file selected (e.g. user clicked "cancel")
 
     if (!/^image\//.test(file.type))
       return void this.handleError('That is not a supported file type.');
 
     this.revokeObjectUrl();
-    this.setState({
-      file: file,
-      objectURL: window.URL.createObjectURL(file)
-    }, () => {
-      this.props.updateDataUrlState({savedDataUrl: null});
-    });
+    this.setState(
+      {
+        file: file,
+        objectURL: window.URL.createObjectURL(file)
+      },
+      () => {
+        this.props.updateDataUrlState({savedDataUrl: null});
+      }
+    );
   },
 
   revokeObjectUrl() {
@@ -96,10 +97,12 @@ const AvatarCropper = React.createClass({
 
   onMouseDown(ev) {
     ev.preventDefault();
-    this.setState({mousePosition: {
-      pageY: ev.pageY,
-      pageX: ev.pageX
-    }});
+    this.setState({
+      mousePosition: {
+        pageY: ev.pageY,
+        pageX: ev.pageX
+      }
+    });
     this.startMove();
   },
 
@@ -145,15 +148,15 @@ const AvatarCropper = React.createClass({
   // are always making the cropper smaller and positive ones
   // are making the cropper larger
   getDiffNW(yDiff, xDiff) {
-    return ((yDiff - (yDiff * 2)) + (xDiff - (xDiff * 2))) / 2;
+    return (yDiff - yDiff * 2 + (xDiff - xDiff * 2)) / 2;
   },
 
   getDiffNE(yDiff, xDiff) {
-    return ((yDiff - (yDiff * 2)) + xDiff) / 2;
+    return (yDiff - yDiff * 2 + xDiff) / 2;
   },
 
   getDiffSW(yDiff, xDiff) {
-    return (yDiff + (xDiff - (xDiff * 2))) / 2;
+    return (yDiff + (xDiff - xDiff * 2)) / 2;
   },
 
   getDiffSE(yDiff, xDiff) {
@@ -232,15 +235,23 @@ const AvatarCropper = React.createClass({
 
   validateImage() {
     let img = this.refs.image;
-    if (img.naturalWidth < this.MIN_DIMENSION ||
-          img.naturalHeight < this.MIN_DIMENSION) {
-      return ('Please upload an image larger than ' +
-              (this.MIN_DIMENSION - 1) + 'px by ' + (this.MIN_DIMENSION - 1) + 'px.');
+    if (img.naturalWidth < this.MIN_DIMENSION || img.naturalHeight < this.MIN_DIMENSION) {
+      return (
+        'Please upload an image larger than ' +
+        (this.MIN_DIMENSION - 1) +
+        'px by ' +
+        (this.MIN_DIMENSION - 1) +
+        'px.'
+      );
     }
-    if (img.naturalWidth > this.MAX_DIMENSION ||
-          img.naturalHeight > this.MAX_DIMENSION) {
-      return ('Please upload an image smaller than ' +
-              this.MAX_DIMENSION + 'px by ' + this.MAX_DIMENSION + 'px.');
+    if (img.naturalWidth > this.MAX_DIMENSION || img.naturalHeight > this.MAX_DIMENSION) {
+      return (
+        'Please upload an image smaller than ' +
+        this.MAX_DIMENSION +
+        'px by ' +
+        this.MAX_DIMENSION +
+        'px.'
+      );
     }
   },
 
@@ -254,9 +265,12 @@ const AvatarCropper = React.createClass({
     }
     let $img = $(this.refs.image);
     let dimension = Math.min($img.height(), $img.width());
-    this.setState({
-      resizeDimensions: Object.assign({size: dimension, top: 0, left: 0})
-    }, this.drawToCanvas);
+    this.setState(
+      {
+        resizeDimensions: Object.assign({size: dimension, top: 0, left: 0})
+      },
+      this.drawToCanvas
+    );
   },
 
   drawToCanvas() {
@@ -264,18 +278,23 @@ const AvatarCropper = React.createClass({
     let resizeDimensions = this.state.resizeDimensions;
     let img = this.refs.image;
     // Calculate difference between natural dimensions and rendered dimensions
-    let imgRatio = (img.naturalHeight / $(img).height() +
-                    img.naturalWidth / $(img).width()) / 2;
+    let imgRatio =
+      (img.naturalHeight / $(img).height() + img.naturalWidth / $(img).width()) / 2;
     canvas.width = resizeDimensions.size * imgRatio;
     canvas.height = resizeDimensions.size * imgRatio;
-    canvas.getContext('2d').drawImage(img,
-                                      resizeDimensions.left * imgRatio,
-                                      resizeDimensions.top * imgRatio,
-                                      resizeDimensions.size * imgRatio,
-                                      resizeDimensions.size * imgRatio,
-                                      0, 0,
-                                      resizeDimensions.size * imgRatio,
-                                      resizeDimensions.size * imgRatio);
+    canvas
+      .getContext('2d')
+      .drawImage(
+        img,
+        resizeDimensions.left * imgRatio,
+        resizeDimensions.top * imgRatio,
+        resizeDimensions.size * imgRatio,
+        resizeDimensions.size * imgRatio,
+        0,
+        0,
+        resizeDimensions.size * imgRatio,
+        resizeDimensions.size * imgRatio
+      );
     this.finishCrop();
   },
 
@@ -310,14 +329,19 @@ const AvatarCropper = React.createClass({
       <div className="image-cropper">
         <div className="crop-container" ref="cropContainer">
           <div className="image-container">
-            <img className="preview" ref="image" src={src}
-                 onLoad={this.onLoad} onDragStart={this.onImgDrag}/>
+            <img
+              className="preview"
+              ref="image"
+              src={src}
+              onLoad={this.onLoad}
+              onDragStart={this.onImgDrag}
+            />
           </div>
           <div className="cropper" style={style} onMouseDown={this.onMouseDown}>
-            <div onMouseDown={this.startResize.bind(this, 'nw')} className="resizer nw"></div>
-            <div onMouseDown={this.startResize.bind(this, 'ne')} className="resizer ne"></div>
-            <div onMouseDown={this.startResize.bind(this, 'se')} className="resizer se"></div>
-            <div onMouseDown={this.startResize.bind(this, 'sw')} className="resizer sw"></div>
+            <div onMouseDown={this.startResize.bind(this, 'nw')} className="resizer nw" />
+            <div onMouseDown={this.startResize.bind(this, 'ne')} className="resizer ne" />
+            <div onMouseDown={this.startResize.bind(this, 'se')} className="resizer se" />
+            <div onMouseDown={this.startResize.bind(this, 'sw')} className="resizer sw" />
           </div>
         </div>
       </div>
@@ -335,7 +359,7 @@ const AvatarCropper = React.createClass({
     }
     return (
       <div className="canvas-container">
-        <canvas ref="canvas"></canvas>
+        <canvas ref="canvas" />
       </div>
     );
   },
@@ -343,20 +367,30 @@ const AvatarCropper = React.createClass({
   render() {
     let src = this.getImgSrc();
     let style = {
-        position : 'absolute'
+      position: 'absolute'
     };
 
     return (
       <div>
         {!src &&
-        <div className="image-well well blankslate">
-          <p><a onClick={this.uploadClick}><strong>Upload a photo</strong></a> to get started.</p>
-        </div>}
+          <div className="image-well well blankslate">
+            <p>
+              <a onClick={this.uploadClick}><strong>Upload a photo</strong></a>
+              {' '}
+              to get started.
+            </p>
+          </div>}
         {this.renderImageCrop()}
         {this.renderCanvas()}
         <div className="form-group">
           {src && <a onClick={this.uploadClick}>{t('Change Photo')}</a>}
-          <input ref="file" type="file" accept="image/gif,image/jpeg,image/png" onChange={this.onChange} style={style}/>
+          <input
+            ref="file"
+            type="file"
+            accept="image/gif,image/jpeg,image/png"
+            onChange={this.onChange}
+            style={style}
+          />
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/avatarRadio.jsx b/src/sentry/static/sentry/app/components/avatarRadio.jsx
index d34de89a2c..59a9ef7eb5 100644
--- a/src/sentry/static/sentry/app/components/avatarRadio.jsx
+++ b/src/sentry/static/sentry/app/components/avatarRadio.jsx
@@ -2,7 +2,6 @@ import React from 'react';
 
 import {t} from '../locale';
 
-
 const AvatarRadio = React.createClass({
   propTypes: {
     user: React.PropTypes.object.isRequired,
@@ -27,8 +26,13 @@ const AvatarRadio = React.createClass({
       radios.push(
         <li className="radio" key={opt}>
           <label>
-            <input type="radio" name="avatar-type" value={opt} onChange={this.onChange}
-                   checked={this.props.user.avatar.avatarType === opt}/>
+            <input
+              type="radio"
+              name="avatar-type"
+              value={opt}
+              onChange={this.onChange}
+              checked={this.props.user.avatar.avatarType === opt}
+            />
             {this.OPTIONS[opt]}
           </label>
         </li>
diff --git a/src/sentry/static/sentry/app/components/avatarSettings.jsx b/src/sentry/static/sentry/app/components/avatarSettings.jsx
index 5cb66f8139..f41ca904a2 100644
--- a/src/sentry/static/sentry/app/components/avatarSettings.jsx
+++ b/src/sentry/static/sentry/app/components/avatarSettings.jsx
@@ -8,7 +8,6 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
-
 const AvatarSettings = React.createClass({
   propTypes: {
     userId: React.PropTypes.number
@@ -75,7 +74,7 @@ const AvatarSettings = React.createClass({
         avatar_photo: avatarPhoto,
         avatar_type: this.state.user.avatar.avatarType
       },
-      success: (user) => {
+      success: user => {
         this.setState({savedDataUrl: this.state.dataUrl});
         this.handleSuccess(user);
       },
@@ -101,15 +100,21 @@ const AvatarSettings = React.createClass({
     return (
       <div>
         <form>
-          <AvatarRadio user={this.state.user} updateUser={this.updateUserState}/>
+          <AvatarRadio user={this.state.user} updateUser={this.updateUserState} />
 
           {this.state.user.avatar.avatarType === 'gravatar' && gravatarMessage}
 
           {this.state.user.avatar.avatarType === 'upload' &&
-            <AvatarCropper {...this.props} user={this.state.user} savedDataUrl={this.state.savedDataUrl}
-                           updateDataUrlState={this.updateDataUrlState}/>}
+            <AvatarCropper
+              {...this.props}
+              user={this.state.user}
+              savedDataUrl={this.state.savedDataUrl}
+              updateDataUrlState={this.updateDataUrlState}
+            />}
           <fieldset className="form-actions">
-            <button className="btn btn-primary" onClick={this.saveSettings}>{t('Done')}</button>
+            <button className="btn btn-primary" onClick={this.saveSettings}>
+              {t('Done')}
+            </button>
           </fieldset>
         </form>
       </div>
diff --git a/src/sentry/static/sentry/app/components/badge.jsx b/src/sentry/static/sentry/app/components/badge.jsx
index 3592848395..ce3904467f 100644
--- a/src/sentry/static/sentry/app/components/badge.jsx
+++ b/src/sentry/static/sentry/app/components/badge.jsx
@@ -1,10 +1,9 @@
 import React from 'react';
 
 const Badge = React.createClass({
-
   propTypes: {
     text: React.PropTypes.string,
-    isNew: React.PropTypes.bool,
+    isNew: React.PropTypes.bool
   },
 
   render() {
@@ -12,9 +11,7 @@ const Badge = React.createClass({
     if (this.props.isNew) {
       className += ' new';
     }
-    return (
-        <span className={className}>{this.props.text}</span>
-    );
+    return <span className={className}>{this.props.text}</span>;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/barChart.jsx b/src/sentry/static/sentry/app/components/barChart.jsx
index 0b12d24581..4c98f00af2 100644
--- a/src/sentry/static/sentry/app/components/barChart.jsx
+++ b/src/sentry/static/sentry/app/components/barChart.jsx
@@ -3,37 +3,39 @@ import StackedBarChart from '../components/stackedBarChart';
 
 const BarChart = React.createClass({
   propTypes: {
-    points: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      y: React.PropTypes.number.isRequired,
-      label: React.PropTypes.string
-    })),
+    points: React.PropTypes.arrayOf(
+      React.PropTypes.shape({
+        x: React.PropTypes.number.isRequired,
+        y: React.PropTypes.number.isRequired,
+        label: React.PropTypes.string
+      })
+    ),
     interval: React.PropTypes.string,
     height: React.PropTypes.number,
     width: React.PropTypes.number,
     placement: React.PropTypes.string,
     label: React.PropTypes.string,
-    markers: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      label: React.PropTypes.string
-    }))
+    markers: React.PropTypes.arrayOf(
+      React.PropTypes.shape({
+        x: React.PropTypes.number.isRequired,
+        label: React.PropTypes.string
+      })
+    )
   },
 
   getDefaultProps() {
     return {
-      points: [],
+      points: []
     };
   },
 
-
   render() {
-    let points = this.props.points.map((point) => {
+    let points = this.props.points.map(point => {
       return {x: point.x, y: [point.y]};
     });
     let props = Object.assign({}, this.props, {points: points});
     return <StackedBarChart {...props} />;
   }
-
 });
 
 export default BarChart;
diff --git a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
index 2a47bc3385..e86b98d811 100644
--- a/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
+++ b/src/sentry/static/sentry/app/components/bases/pluginComponentBase.jsx
@@ -6,7 +6,6 @@ import {FormState, GenericField} from '../../components/forms';
 import IndicatorStore from '../../stores/indicatorStore';
 import {t} from '../../locale';
 
-
 const callbackWithArgs = function(callback, ...args) {
   if (_.isFunction(callback)) {
     callback = callback.bind(this, ...args);
@@ -16,18 +15,19 @@ const callbackWithArgs = function(callback, ...args) {
   return callback;
 };
 
-
 class PluginComponentBase extends React.Component {
   constructor(props) {
     super(props);
 
-    ['onLoadSuccess',
-     'onLoadError',
-     'onSave',
-     'onSaveSuccess',
-     'onSaveError',
-     'onSaveComplete',
-     'renderField'].map(method => this[method] = this[method].bind(this));
+    [
+      'onLoadSuccess',
+      'onLoadError',
+      'onSave',
+      'onSaveSuccess',
+      'onSaveError',
+      'onSaveComplete',
+      'renderField'
+    ].map(method => this[method] = this[method].bind(this));
 
     if (this.fetchData) {
       this.fetchData = this.onLoad.bind(this, this.fetchData.bind(this));
@@ -50,21 +50,30 @@ class PluginComponentBase extends React.Component {
   }
 
   onLoad(callback, ...args) {
-    this.setState({
-      state: FormState.LOADING
-    }, callbackWithArgs(callback, ...args));
+    this.setState(
+      {
+        state: FormState.LOADING
+      },
+      callbackWithArgs(callback, ...args)
+    );
   }
 
   onLoadSuccess(callback, ...args) {
-    this.setState({
-      state: FormState.READY
-    }, callbackWithArgs(callback, ...args));
+    this.setState(
+      {
+        state: FormState.READY
+      },
+      callbackWithArgs(callback, ...args)
+    );
   }
 
   onLoadError(callback, ...args) {
-    this.setState({
-      state: FormState.ERROR
-    }, callbackWithArgs(callback, ...args));
+    this.setState(
+      {
+        state: FormState.ERROR
+      },
+      callbackWithArgs(callback, ...args)
+    );
     IndicatorStore.add(t('An error occurred.'), 'error', {
       duration: 3000
     });
@@ -75,18 +84,24 @@ class PluginComponentBase extends React.Component {
       return;
     }
     callback = callbackWithArgs(callback, ...args);
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      this._loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      callback && callback();
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        this._loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        callback && callback();
+      }
+    );
   }
 
   onSaveSuccess(callback, ...args) {
-    this.setState({
-      state: FormState.READY
-    }, callbackWithArgs(callback, ...args));
+    this.setState(
+      {
+        state: FormState.READY
+      },
+      callbackWithArgs(callback, ...args)
+    );
     IndicatorStore.add(t('Success!'), 'success', {
       duration: 3000
     });
@@ -94,14 +109,17 @@ class PluginComponentBase extends React.Component {
 
   onSaveError(callback, ...args) {
     callback = callbackWithArgs(callback, ...args);
-    this.setState({
-      state: FormState.ERROR,
-    }, () => {
-      IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-        duration: 3000
-      });
-      callback && callback();
-    });
+    this.setState(
+      {
+        state: FormState.ERROR
+      },
+      () => {
+        IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+          duration: 3000
+        });
+        callback && callback();
+      }
+    );
   }
 
   onSaveComplete(callback, ...args) {
@@ -113,7 +131,7 @@ class PluginComponentBase extends React.Component {
   renderField(props) {
     props = {...props};
     props.formState = this.state.state;
-    return <GenericField {...props}/>;
+    return <GenericField {...props} />;
   }
 }
 
diff --git a/src/sentry/static/sentry/app/components/clippedBox.jsx b/src/sentry/static/sentry/app/components/clippedBox.jsx
index d18f3b9aca..c25c98b7ed 100644
--- a/src/sentry/static/sentry/app/components/clippedBox.jsx
+++ b/src/sentry/static/sentry/app/components/clippedBox.jsx
@@ -20,14 +20,14 @@ const ClippedBox = React.createClass({
   getInitialState() {
     return {
       clipped: this.props.defaultClipped,
-      revealed: false, // True once user has clicked "Show More" button
+      revealed: false // True once user has clicked "Show More" button
     };
   },
 
   componentDidMount() {
     let renderedHeight = ReactDOM.findDOMNode(this).offsetHeight;
 
-    if (renderedHeight > this.props.clipHeight ) {
+    if (renderedHeight > this.props.clipHeight) {
       /*eslint react/no-did-mount-set-state:0*/
       // okay if this causes re-render; cannot determine until
       // rendered first anyways
@@ -57,9 +57,7 @@ const ClippedBox = React.createClass({
 
     return (
       <div className={className}>
-        {this.props.title &&
-          <h5>{this.props.title}</h5>
-        }
+        {this.props.title && <h5>{this.props.title}</h5>}
         {this.props.children}
 
         {this.state.clipped &&
@@ -67,8 +65,7 @@ const ClippedBox = React.createClass({
             <a onClick={this.reveal} className="show-more btn btn-primary btn-xs">
               {t('Show more')}
             </a>
-          </div>
-        }
+          </div>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
index 6597c1b86e..c9d75a9a3e 100644
--- a/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
+++ b/src/sentry/static/sentry/app/components/commitAuthorStats.jsx
@@ -17,11 +17,9 @@ const CommitBar = React.createClass({
 
   render() {
     let barStyle = {};
-    barStyle.width = (this.props.authorCommits / this.props.totalCommits * 100) + '%';
+    barStyle.width = this.props.authorCommits / this.props.totalCommits * 100 + '%';
 
-    return (
-      <div className="commit-bar" style={barStyle}/>
-    );
+    return <div className="commit-bar" style={barStyle} />;
   }
 });
 
@@ -29,20 +27,20 @@ const CommitAuthorStats = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
-    version: React.PropTypes.string.isRequired,
+    version: React.PropTypes.string.isRequired
   },
 
   mixins: [
     ApiMixin,
     TooltipMixin({
       selector: '.tip'
-    }),
+    })
   ],
 
   getInitialState() {
     return {
       loading: true,
-      error: false,
+      error: false
     };
   },
 
@@ -73,12 +71,9 @@ const CommitAuthorStats = React.createClass({
   },
 
   render() {
+    if (this.state.loading) return <LoadingIndicator />;
 
-    if (this.state.loading)
-      return <LoadingIndicator/>;
-
-    if (this.state.error)
-      return <LoadingError/>;
+    if (this.state.error) return <LoadingError />;
 
     let {commitList} = this.state;
 
@@ -89,8 +84,7 @@ const CommitAuthorStats = React.createClass({
           commitCount: 1,
           author: author
         };
-      }
-      else {
+      } else {
         _commitAuthors[author.email].commitCount += 1;
       }
       return _commitAuthors;
@@ -108,22 +102,25 @@ const CommitAuthorStats = React.createClass({
         <h6 className="nav-header m-b-1">Commits by Author</h6>
         {!commitAuthorValues.length && this.renderEmpty()}
         <ul className="list-group">
-        {commitAuthorValues.map(commitAuthor => {
-          let {author, commitCount} = commitAuthor;
-          return (
-            <li className="list-group-item list-group-item-sm list-group-avatar">
-              <div className="row row-flex row-center-vertically">
-                <div className="col-sm-8">
-                  <Avatar user={author} size={32} />
-                  <CommitBar totalCommits={commitList.length} authorCommits={commitCount}/>
-                </div>
-                <div className="col-sm-4 align-right">
-                  {commitCount}
+          {commitAuthorValues.map(commitAuthor => {
+            let {author, commitCount} = commitAuthor;
+            return (
+              <li className="list-group-item list-group-item-sm list-group-avatar">
+                <div className="row row-flex row-center-vertically">
+                  <div className="col-sm-8">
+                    <Avatar user={author} size={32} />
+                    <CommitBar
+                      totalCommits={commitList.length}
+                      authorCommits={commitCount}
+                    />
+                  </div>
+                  <div className="col-sm-4 align-right">
+                    {commitCount}
+                  </div>
                 </div>
-              </div>
-            </li>
-          );
-        })}
+              </li>
+            );
+          })}
         </ul>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/compactIssue.jsx b/src/sentry/static/sentry/app/components/compactIssue.jsx
index 47bd35d97f..92eed58a57 100644
--- a/src/sentry/static/sentry/app/components/compactIssue.jsx
+++ b/src/sentry/static/sentry/app/components/compactIssue.jsx
@@ -14,7 +14,7 @@ const CompactIssueHeader = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
     orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired
   },
 
   getTitle() {
@@ -25,14 +25,14 @@ const CompactIssueHeader = React.createClass({
         return (
           <span>
             <span style={{marginRight: 10}}>{metadata.type}</span>
-            <em>{data.culprit}</em><br/>
+            <em>{data.culprit}</em><br />
           </span>
         );
       case 'csp':
         return (
           <span>
             <span style={{marginRight: 10}}>{metadata.directive}</span>
-            <em>{metadata.uri}</em><br/>
+            <em>{metadata.uri}</em><br />
           </span>
         );
       case 'default':
@@ -73,12 +73,14 @@ const CompactIssueHeader = React.createClass({
           </span>
           {data.numComments !== 0 &&
             <span>
-              <Link to={`/${orgId}/${projectId}/issues/${data.id}/activity/`} className="comments">
+              <Link
+                to={`/${orgId}/${projectId}/issues/${data.id}/activity/`}
+                className="comments"
+              >
                 <span className="icon icon-comments" />
                 <span className="tag-count">{data.numComments}</span>
               </Link>
-            </span>
-          }
+            </span>}
           <span className="culprit">{this.getMessage()}</span>
         </div>
       </div>
@@ -95,10 +97,7 @@ const CompactIssue = React.createClass({
     showActions: React.PropTypes.bool
   },
 
-  mixins: [
-    ApiMixin,
-    Reflux.listenTo(GroupStore, 'onGroupChange')
-  ],
+  mixins: [ApiMixin, Reflux.listenTo(GroupStore, 'onGroupChange')],
 
   getInitialState() {
     return {
@@ -121,7 +120,7 @@ const CompactIssue = React.createClass({
     let id = this.props.id;
     let issue = GroupStore.get(id);
     this.setState({
-      issue: issue,
+      issue: issue
     });
   },
 
@@ -130,8 +129,7 @@ const CompactIssue = React.createClass({
       status: 'ignored'
     };
 
-    if (duration)
-      data.ignoreDuration = duration;
+    if (duration) data.ignoreDuration = duration;
 
     this.onUpdate(data);
   },
@@ -140,16 +138,19 @@ const CompactIssue = React.createClass({
     let issue = this.state.issue;
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.api.bulkUpdate({
-      orgId: this.props.orgId,
-      projectId: issue.project.slug,
-      itemIds: [issue.id],
-        data: data,
-    }, {
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
+    this.api.bulkUpdate(
+      {
+        orgId: this.props.orgId,
+        projectId: issue.project.slug,
+        itemIds: [issue.id],
+        data: data
+      },
+      {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       }
-    });
+    );
   },
 
   render() {
@@ -177,31 +178,41 @@ const CompactIssue = React.createClass({
 
     let {id, orgId} = this.props;
     let projectId = issue.project.slug;
-    let title = <span className="icon-more"></span>;
+    let title = <span className="icon-more" />;
 
     return (
       <li className={className} onClick={this.toggleSelect}>
         <CompactIssueHeader data={issue} orgId={orgId} projectId={projectId} />
         {this.props.statsPeriod &&
           <div className="event-graph">
-            <GroupChart id={id} statsPeriod={this.props.statsPeriod} data={this.props.data}/>
-          </div>
-        }
+            <GroupChart
+              id={id}
+              statsPeriod={this.props.statsPeriod}
+              data={this.props.data}
+            />
+          </div>}
         {this.props.showActions &&
           <div className="more-menu-container align-right">
             <DropdownLink
               topLevelClasses="more-menu"
               className="more-menu-toggle"
               caret={false}
-              title={title}>
+              title={title}
+            >
               <li>
-                <a onClick={this.onUpdate.bind(this, {status: issue.status !== 'resolved' ? 'resolved' : 'unresolved'})}>
-                  <span className="icon-checkmark"/>
+                <a
+                  onClick={this.onUpdate.bind(this, {
+                    status: issue.status !== 'resolved' ? 'resolved' : 'unresolved'
+                  })}
+                >
+                  <span className="icon-checkmark" />
                 </a>
               </li>
               <li>
-                <a onClick={this.onUpdate.bind(this, {isBookmarked: !issue.isBookmarked})}>
-                  <span className="icon-star-solid"/>
+                <a
+                  onClick={this.onUpdate.bind(this, {isBookmarked: !issue.isBookmarked})}
+                >
+                  <span className="icon-star-solid" />
                 </a>
               </li>
               <li>
@@ -209,14 +220,12 @@ const CompactIssue = React.createClass({
                   orgId={orgId}
                   projectId={projectId}
                   groupId={id}
-                  onSnooze={this.onSnooze}/>
+                  onSnooze={this.onSnooze}
+                />
               </li>
-              {false &&
-              <li><a href="#"><span className="icon-user"/></a></li>
-              }
+              {false && <li><a href="#"><span className="icon-user" /></a></li>}
             </DropdownLink>
-          </div>
-        }
+          </div>}
         {this.props.children}
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx b/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
index 7be0ccc617..682e0cda85 100644
--- a/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
+++ b/src/sentry/static/sentry/app/components/confirms/numberConfirm.jsx
@@ -7,52 +7,61 @@ const NumberConfirm = React.createClass({
   propTypes: {
     digits: React.PropTypes.number.isRequired,
     show: React.PropTypes.bool,
-    onFinished: React.PropTypes.func,
+    onFinished: React.PropTypes.func
   },
 
   getInitialState() {
     return {
-      showModal: this.props.show || false,
+      showModal: this.props.show || false
     };
   },
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.show != this.props.show) {
       this.setState({
-        showModal: nextProps.show,
+        showModal: nextProps.show
       });
     }
   },
 
   closeModal() {
     this.setState({
-      showModal: false,
+      showModal: false
     });
   },
 
   onChange(number) {
     if (number === undefined && !Number.isInteger(number)) {
-        return;
+      return;
     }
     if (number.length === this.props.digits) {
-        if (this.props.onFinished) {
-            this.props.onFinished(number);
-        }
-        this.closeModal();
+      if (this.props.onFinished) {
+        this.props.onFinished(number);
+      }
+      this.closeModal();
     }
   },
 
   render() {
     return (
-      <Modal show={this.state.showModal} onHide={this.closeModal}
-        animation={true} backdrop="static" enforceFocus={true} bsSize="sm">
-          <Modal.Header closeButton>
-            <Modal.Title>{t('Please enter your code:')}</Modal.Title>
-          </Modal.Header>
-          <Modal.Body>
-            <ReactCodeInput type="number" digits={this.props.digits}
-              onChange={this.onChange} />
-          </Modal.Body>
+      <Modal
+        show={this.state.showModal}
+        onHide={this.closeModal}
+        animation={true}
+        backdrop="static"
+        enforceFocus={true}
+        bsSize="sm"
+      >
+        <Modal.Header closeButton>
+          <Modal.Title>{t('Please enter your code:')}</Modal.Title>
+        </Modal.Header>
+        <Modal.Body>
+          <ReactCodeInput
+            type="number"
+            digits={this.props.digits}
+            onChange={this.onChange}
+          />
+        </Modal.Body>
       </Modal>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/contextData.jsx b/src/sentry/static/sentry/app/components/contextData.jsx
index 5b528c8c06..d6d59c6f6f 100644
--- a/src/sentry/static/sentry/app/components/contextData.jsx
+++ b/src/sentry/static/sentry/app/components/contextData.jsx
@@ -68,7 +68,6 @@ function analyzeStringForRepr(value) {
   return rv;
 }
 
-
 const ContextData = React.createClass({
   propTypes: {
     data: React.PropTypes.any
@@ -95,7 +94,7 @@ const ContextData = React.createClass({
       }
       return (
         <span className="val-toggle">
-          <a href="#" className="val-toggle-link" onClick={toggle}></a>
+          <a href="#" className="val-toggle-link" onClick={toggle} />
           {children}
         </span>
       );
@@ -111,11 +110,18 @@ const ContextData = React.createClass({
       } else if (_.isString(value)) {
         let valueInfo = analyzeStringForRepr(value);
 
-        let out = [<span key="value" className={
-            (valueInfo.isString ? 'val-string' : 'val-repr') +
-            (valueInfo.isStripped ? ' val-stripped' : '') +
-            (valueInfo.isMultiLine ? ' val-string-multiline' : '')}>{
-              valueInfo.repr}</span>];
+        let out = [
+          <span
+            key="value"
+            className={
+              (valueInfo.isString ? 'val-string' : 'val-repr') +
+                (valueInfo.isStripped ? ' val-stripped' : '') +
+                (valueInfo.isMultiLine ? ' val-string-multiline' : '')
+            }
+          >
+            {valueInfo.repr}
+          </span>
+        ];
 
         if (valueInfo.isString && isUrl(value)) {
           out.push(
@@ -133,15 +139,20 @@ const ContextData = React.createClass({
           children.push(
             <span className="val-array-item" key={i}>
               {walk(value[i], depth + 1)}
-              {i < value.length - 1 ? <span className="val-array-sep">{', '}</span> : null}
+              {i < value.length - 1
+                ? <span className="val-array-sep">{', '}</span>
+                : null}
             </span>
           );
         }
         return (
           <span className="val-array">
             <span className="val-array-marker">{'['}</span>
-            {makeToggle(depth <= 2, children.length,
-                        <span className="val-array-items">{children}</span>)}
+            {makeToggle(
+              depth <= 2,
+              children.length,
+              <span className="val-array-items">{children}</span>
+            )}
             <span className="val-array-marker">{']'}</span>
           </span>
         );
@@ -158,7 +169,9 @@ const ContextData = React.createClass({
               <span className="val-dict-col">{': '}</span>
               <span className="val-dict-value">
                 {walk(value[key], depth + 1)}
-                {i < keys.length - 1 ? <span className="val-dict-sep">{', '}</span> : null}
+                {i < keys.length - 1
+                  ? <span className="val-dict-sep">{', '}</span>
+                  : null}
               </span>
             </span>
           );
@@ -166,8 +179,11 @@ const ContextData = React.createClass({
         return (
           <span className="val-dict">
             <span className="val-dict-marker">{'{'}</span>
-            {makeToggle(depth <= 1, children.length,
-                        <span className="val-dict-items">{children}</span>)}
+            {makeToggle(
+              depth <= 1,
+              children.length,
+              <span className="val-dict-items">{children}</span>
+            )}
             <span className="val-dict-marker">{'}'}</span>
           </span>
         );
@@ -196,9 +212,7 @@ const ContextData = React.createClass({
     }
     other.className = 'val ' + (className || '');
 
-    return (
-      <pre {...other}>{this.renderValue(data)}</pre>
-    );
+    return <pre {...other}>{this.renderValue(data)}</pre>;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/count.jsx b/src/sentry/static/sentry/app/components/count.jsx
index 69d9745e98..3fbe3414dc 100644
--- a/src/sentry/static/sentry/app/components/count.jsx
+++ b/src/sentry/static/sentry/app/components/count.jsx
@@ -9,41 +9,34 @@ const Count = React.createClass({
     return this.props.value !== nextProps.value;
   },
 
-  numberFormats: [
-      [1000000000, 'b'],
-      [1000000, 'm'],
-      [1000, 'k']
-  ],
+  numberFormats: [[1000000000, 'b'], [1000000, 'm'], [1000, 'k']],
 
   floatFormat(number, places) {
-      let multi = Math.pow(10, places);
-      return parseInt(number * multi, 10) / multi;
+    let multi = Math.pow(10, places);
+    return parseInt(number * multi, 10) / multi;
   },
 
-  formatNumber(number){
-      let b, x, y, o, p;
-
-      number = parseInt(number, 10);
-
-      /*eslint no-cond-assign:0*/
-      for (let i = 0; (b = this.numberFormats[i]); i++){
-          x = b[0];
-          y = b[1];
-          o = Math.floor(number / x);
-          p = number % x;
-          if (o > 0) {
-              if (o / 10 > 1 || !p)
-                  return '' + o + y;
-              return '' + this.floatFormat(number / x, 1) + y;
-          }
+  formatNumber(number) {
+    let b, x, y, o, p;
+
+    number = parseInt(number, 10);
+
+    /*eslint no-cond-assign:0*/
+    for (let i = 0; (b = this.numberFormats[i]); i++) {
+      x = b[0];
+      y = b[1];
+      o = Math.floor(number / x);
+      p = number % x;
+      if (o > 0) {
+        if (o / 10 > 1 || !p) return '' + o + y;
+        return '' + this.floatFormat(number / x, 1) + y;
       }
-      return '' + number;
+    }
+    return '' + number;
   },
 
   render() {
-    return (
-      <span>{this.formatNumber(this.props.value)}</span>
-    );
+    return <span>{this.formatNumber(this.props.value)}</span>;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/customSnoozeModal.jsx b/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
index a0cec55355..54876c2795 100644
--- a/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
+++ b/src/sentry/static/sentry/app/components/customSnoozeModal.jsx
@@ -7,7 +7,7 @@ const CustomSnoozeModal = React.createClass({
   propTypes: {
     onSelected: React.PropTypes.func,
     onCanceled: React.PropTypes.func,
-    show: React.PropTypes.bool,
+    show: React.PropTypes.bool
   },
 
   getInitialState() {
@@ -51,13 +51,14 @@ const CustomSnoozeModal = React.createClass({
     defaultDate.setSeconds(0);
     defaultDate.setMilliseconds(0);
 
-    const defaultDateVal = sprintf('%d-%02d-%02d',
-        defaultDate.getUTCFullYear(),
-        defaultDate.getUTCMonth() + 1,
-        defaultDate.getUTCDate());
+    const defaultDateVal = sprintf(
+      '%d-%02d-%02d',
+      defaultDate.getUTCFullYear(),
+      defaultDate.getUTCMonth() + 1,
+      defaultDate.getUTCDate()
+    );
 
-    const defaultTimeVal = sprintf('%02d:00',
-        defaultDate.getUTCHours());
+    const defaultTimeVal = sprintf('%02d:00', defaultDate.getUTCHours());
 
     return (
       <Modal show={this.props.show} animation={false} bsSize="sm">
@@ -67,29 +68,33 @@ const CustomSnoozeModal = React.createClass({
         <div className="modal-body">
           <form className="form-horizontal">
             <div className="form-group">
-              <label htmlFor="snooze-until-date"
-                     className="col-sm-4 control-label">{t('Date:')}</label>
-                   <div className="col-sm-8">
-                <input className="form-control"
-                       type="date"
-                       id="snooze-until-date"
-                       defaultValue={defaultDateVal}
-                       ref="snoozeDateInput"
-                       style={{padding: '0 10px'}}
-                       />
+              <label htmlFor="snooze-until-date" className="col-sm-4 control-label">
+                {t('Date:')}
+              </label>
+              <div className="col-sm-8">
+                <input
+                  className="form-control"
+                  type="date"
+                  id="snooze-until-date"
+                  defaultValue={defaultDateVal}
+                  ref="snoozeDateInput"
+                  style={{padding: '0 10px'}}
+                />
               </div>
             </div>
             <div className="form-group m-b-1">
-              <label htmlFor="snooze-until-time"
-                     className="col-sm-4 control-label">{t('Time (UTC):')}</label>
-                   <div className="col-sm-8">
-                <input className="form-control"
-                       type="time"
-                       id="snooze-until-time"
-                       defaultValue={defaultTimeVal}
-                       ref="snoozeTimeInput"
-                       style={{padding: '0 10px'}}
-                       />
+              <label htmlFor="snooze-until-time" className="col-sm-4 control-label">
+                {t('Time (UTC):')}
+              </label>
+              <div className="col-sm-8">
+                <input
+                  className="form-control"
+                  type="time"
+                  id="snooze-until-time"
+                  defaultValue={defaultTimeVal}
+                  ref="snoozeTimeInput"
+                  style={{padding: '0 10px'}}
+                />
               </div>
             </div>
           </form>
@@ -99,15 +104,20 @@ const CustomSnoozeModal = React.createClass({
             {t('Please enter a valid date in the future')}
           </div>}
         <div className="modal-footer">
-          <button type="button" className="btn btn-default"
-                  onClick={this.props.onCanceled}>{t('Cancel')}</button>
-          <button type="button" className="btn btn-primary"
-                  onClick={this.snoozeClicked}>{t('Ignore')}</button>
+          <button
+            type="button"
+            className="btn btn-default"
+            onClick={this.props.onCanceled}
+          >
+            {t('Cancel')}
+          </button>
+          <button type="button" className="btn btn-primary" onClick={this.snoozeClicked}>
+            {t('Ignore')}
+          </button>
         </div>
       </Modal>
     );
-  },
-
+  }
 });
 
 export default CustomSnoozeModal;
diff --git a/src/sentry/static/sentry/app/components/dateTime.jsx b/src/sentry/static/sentry/app/components/dateTime.jsx
index 160f75b388..f8b14c63dc 100644
--- a/src/sentry/static/sentry/app/components/dateTime.jsx
+++ b/src/sentry/static/sentry/app/components/dateTime.jsx
@@ -11,7 +11,7 @@ const DateTime = React.createClass({
 
   getDefaultProps() {
     return {
-      seconds: true,
+      seconds: true
     };
   },
 
@@ -23,18 +23,17 @@ const DateTime = React.createClass({
     let date = this.props.date;
     let user = ConfigStore.get('user');
     let options = user ? user.options : {};
-    let format = options.clock24Hours ? 'MMMM D YYYY HH:mm:ss z' : this.getDefaultFormat();
+    let format = options.clock24Hours
+      ? 'MMMM D YYYY HH:mm:ss z'
+      : this.getDefaultFormat();
 
     if (_.isString(date) || _.isNumber(date)) {
       date = new Date(date);
     }
 
     let carriedProps = _.omit(this.props, 'date', 'seconds');
-    return (
-      <time {...carriedProps}>{moment(date).format(format)}</time>
-    );
+    return <time {...carriedProps}>{moment(date).format(format)}</time>;
   }
 });
 
 export default DateTime;
-
diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index 283afee24a..7a4126ae6e 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -18,38 +18,38 @@ const DropdownLink = React.createClass({
   getDefaultProps() {
     return {
       disabled: false,
-      caret: true,
+      caret: true
     };
   },
   getInitialState() {
     return {
-      isOpen: false,
+      isOpen: false
     };
   },
 
   componentDidMount() {
     jQuery(this.refs.dropdownToggle).dropdown();
-    jQuery(this.refs.dropdownToggle.parentNode).on(
-      'shown.bs.dropdown', (e) => {
+    jQuery(this.refs.dropdownToggle.parentNode)
+      .on('shown.bs.dropdown', e => {
         this.setState({
-          isOpen: true,
+          isOpen: true
         });
         this.props.onOpen && this.props.onOpen(e);
-      }).on(
-      'hidden.bs.dropdown', (e) => {
+      })
+      .on('hidden.bs.dropdown', e => {
         setTimeout(() => {
           if (!this.isMounted()) {
             return;
           }
           this.setState({
-            isOpen: false,
+            isOpen: false
           });
           this.props.onClose && this.props.onClose(e);
         });
       });
   },
 
-  componentWillUnmount(){
+  componentWillUnmount() {
     jQuery(this.refs.dropdownToggle.parentNode).off();
   },
 
@@ -60,23 +60,23 @@ const DropdownLink = React.createClass({
   render() {
     let className = classNames({
       'dropdown-toggle': true,
-      'disabled': this.props.disabled,
+      disabled: this.props.disabled
     });
 
     let topLevelClasses = classNames({
-      'dropdown' : true,
-      'open': this.state.isOpen,
+      dropdown: true,
+      open: this.state.isOpen
     });
 
     return (
       <span className={classNames(this.props.topLevelClasses, topLevelClasses)}>
-        <a className={classNames(this.props.className, className)}
-           data-toggle="dropdown"
-           ref="dropdownToggle">
+        <a
+          className={classNames(this.props.className, className)}
+          data-toggle="dropdown"
+          ref="dropdownToggle"
+        >
           {this.props.title}
-          {this.props.caret &&
-            <i className="icon-arrow-down" />
-          }
+          {this.props.caret && <i className="icon-arrow-down" />}
         </a>
         <ul className={classNames(this.props.menuClasses, 'dropdown-menu')}>
           {this.props.children}
diff --git a/src/sentry/static/sentry/app/components/duration.jsx b/src/sentry/static/sentry/app/components/duration.jsx
index f1036cce52..c8828a781e 100644
--- a/src/sentry/static/sentry/app/components/duration.jsx
+++ b/src/sentry/static/sentry/app/components/duration.jsx
@@ -9,21 +9,23 @@ const Duration = React.createClass({
     let value = Math.abs(this.props.seconds * 1000);
     let result = '';
 
-    if (value >= 604800000) {  // one week
+    if (value >= 604800000) {
+      // one week
       result = Math.round(value / 604800000);
-      result = (result !== 1 ? result + ' weeks' : result + ' week');
-    } else if (value >= 172800000) {  // two days
+      result = result !== 1 ? result + ' weeks' : result + ' week';
+    } else if (value >= 172800000) {
+      // two days
       result = Math.round(value / 86400000);
-      result = (result !== 1 ? result + ' days' : result + ' day');
-    }  else if (value >= 7200000) {
+      result = result !== 1 ? result + ' days' : result + ' day';
+    } else if (value >= 7200000) {
       result = Math.round(value / 3600000);
-      result = (result !== 1 ? result + ' hours' : result + ' hour');
+      result = result !== 1 ? result + ' hours' : result + ' hour';
     } else if (value >= 120000) {
       result = Math.round(value / 60000);
-      result = (result !== 1 ? result + ' minutes' : result + ' minute');
+      result = result !== 1 ? result + ' minutes' : result + ' minute';
     } else if (value >= 1000) {
       result = Math.round(value / 1000);
-      result = (result !== 1 ? result + ' seconds' : result + ' second');
+      result = result !== 1 ? result + ' seconds' : result + ' second';
     } else {
       result = Math.round(value) + ' ms';
     }
@@ -32,9 +34,7 @@ const Duration = React.createClass({
   },
 
   render() {
-    return (
-      <span className={this.props.className}>{this.getDuration()}</span>
-    );
+    return <span className={this.props.className}>{this.getDuration()}</span>;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/errors/notFound.jsx b/src/sentry/static/sentry/app/components/errors/notFound.jsx
index 20af582585..89053f9bf4 100644
--- a/src/sentry/static/sentry/app/components/errors/notFound.jsx
+++ b/src/sentry/static/sentry/app/components/errors/notFound.jsx
@@ -12,9 +12,19 @@ const NotFound = React.createClass({
         <p>The page you are looking for was not found.</p>
         <p>You may wish to try the following:</p>
         <ul>
-            <li>If you entered the address manually, double check the path. Did you forget a trailing slash?</li>
-            <li>If you followed a link here, try hitting back and reloading the page. It's possible the resource was moved out from under you.</li>
-            <li>If all else fails, <a href="http://github.com/getsentry/sentry/issues">create an issue</a> with more details.</li>
+          <li>
+            If you entered the address manually, double check the path. Did you forget a trailing slash?
+          </li>
+          <li>
+            If you followed a link here, try hitting back and reloading the page. It's possible the resource was moved out from under you.
+          </li>
+          <li>
+            If all else fails,
+            {' '}
+            <a href="http://github.com/getsentry/sentry/issues">create an issue</a>
+            {' '}
+            with more details.
+          </li>
         </ul>
         <p>Not sure what to do? <a href="/">Return to the dashboard</a></p>
       </div>
diff --git a/src/sentry/static/sentry/app/components/events/contextSummary.jsx b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
index 55a4a1aa95..ca886c7591 100644
--- a/src/sentry/static/sentry/app/components/events/contextSummary.jsx
+++ b/src/sentry/static/sentry/app/components/events/contextSummary.jsx
@@ -6,12 +6,16 @@ import {t} from '../../locale';
 import {objectIsEmpty, deviceNameMapper} from '../../utils';
 
 const generateClassName = function(name) {
-  return name.split(/\d/)[0].toLowerCase().replace(/[^a-z0-9\-]+/g, '-').replace(/\-+$/, '');
+  return name
+    .split(/\d/)[0]
+    .toLowerCase()
+    .replace(/[^a-z0-9\-]+/g, '-')
+    .replace(/\-+$/, '');
 };
 
 const NoSummary = React.createClass({
   propTypes: {
-    title: React.PropTypes.string.isRequired,
+    title: React.PropTypes.string.isRequired
   },
 
   render() {
@@ -27,7 +31,7 @@ const NoSummary = React.createClass({
 const GenericSummary = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
-    unknownTitle: React.PropTypes.string.isRequired,
+    unknownTitle: React.PropTypes.string.isRequired
   },
 
   render() {
@@ -46,12 +50,12 @@ const GenericSummary = React.createClass({
         <p><strong>{t('Version:')}</strong> {data.version || t('Unknown')}</p>
       </div>
     );
-  },
+  }
 });
 
 const UserSummary = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -61,9 +65,7 @@ const UserSummary = React.createClass({
       return <NoSummary title={t('Unknown User')} />;
     }
 
-    let userTitle = (user.email ?
-      user.email :
-      user.ip_address || user.id || user.username);
+    let userTitle = user.email ? user.email : user.ip_address || user.id || user.username;
 
     if (!userTitle) {
       return <NoSummary title={t('Unknown User')} />;
@@ -71,26 +73,28 @@ const UserSummary = React.createClass({
 
     return (
       <div className="context-item user">
-        {userTitle ?
-          <Avatar user={user} size={48} className="context-item-icon"
-                  gravatar={false} />
-        :
-          <span className="context-item-icon" />
-        }
+        {userTitle
+          ? <Avatar
+              user={user}
+              size={48}
+              className="context-item-icon"
+              gravatar={false}
+            />
+          : <span className="context-item-icon" />}
         <h3>{userTitle}</h3>
-        {user.id && user.id !== userTitle ?
-          <p><strong>{t('ID:')}</strong> {user.id}</p>
-        : (user.username && user.username !== userTitle &&
-          <p><strong>{t('Username:')}</strong> {user.username}</p>
-        )}
+        {user.id && user.id !== userTitle
+          ? <p><strong>{t('ID:')}</strong> {user.id}</p>
+          : user.username &&
+              user.username !== userTitle &&
+              <p><strong>{t('Username:')}</strong> {user.username}</p>}
       </div>
     );
-  },
+  }
 });
 
 const DeviceSummary = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -110,13 +114,13 @@ const DeviceSummary = React.createClass({
         <p>{data.arch || data.model_id || ''}</p>
       </div>
     );
-  },
+  }
 });
 
 const EventContextSummary = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
+    event: PropTypes.Event.isRequired
   },
 
   render() {
@@ -126,70 +130,54 @@ const EventContextSummary = React.createClass({
     let children = [<UserSummary key="user" data={evt.user} />];
     switch (evt.platform) {
       case 'cocoa':
-        children.push((
-          <DeviceSummary
-            key="device"
-            data={contexts.device} />
-        ));
-        children.push((
-          <GenericSummary
-            key="os"
-            data={contexts.os}
-            unknownTitle={t('Unknown OS')} />
-        ));
+        children.push(<DeviceSummary key="device" data={contexts.device} />);
+        children.push(
+          <GenericSummary key="os" data={contexts.os} unknownTitle={t('Unknown OS')} />
+        );
         break;
       case 'java':
         if (contexts.os && contexts.os.name === 'Android') {
-          children.push((
-            <DeviceSummary
-              key="device"
-              data={contexts.device} />
-          ));
-          children.push((
-            <GenericSummary
-              key="os"
-              data={contexts.os}
-              unknownTitle={t('Unknown OS')} />
-          ));
+          children.push(<DeviceSummary key="device" data={contexts.device} />);
+          children.push(
+            <GenericSummary key="os" data={contexts.os} unknownTitle={t('Unknown OS')} />
+          );
         }
         break;
       case 'javascript':
-        children.push((
+        children.push(
           <GenericSummary
             key="browser"
             data={contexts.browser}
-            unknownTitle={t('Unknown Browser')} />
-        ));
-        children.push((
-          contexts.os ?
-            <GenericSummary
-              key="os"
-              data={contexts.os}
-              unknownTitle={t('Unknown OS')} />
-          :
-            <DeviceSummary
-              key="device"
-              data={contexts.device} />
-        ));
+            unknownTitle={t('Unknown Browser')}
+          />
+        );
+        children.push(
+          contexts.os
+            ? <GenericSummary
+                key="os"
+                data={contexts.os}
+                unknownTitle={t('Unknown OS')}
+              />
+            : <DeviceSummary key="device" data={contexts.device} />
+        );
         break;
       default:
-        children.push((
+        children.push(
           <GenericSummary
             key="runtime"
             data={contexts.runtime}
-            unknownTitle={t('Unknown Runtime')} />
-        ));
-        children.push((
-          contexts.os ?
-            <GenericSummary
-              key="os"
-              data={contexts.os}
-              unknownTitle={t('Unknown OS')} />
-          :
-            <DeviceSummary
-              key="device"
-              data={contexts.device} />
-        ));
+            unknownTitle={t('Unknown Runtime')}
+          />
+        );
+        children.push(
+          contexts.os
+            ? <GenericSummary
+                key="os"
+                data={contexts.os}
+                unknownTitle={t('Unknown OS')}
+              />
+            : <DeviceSummary key="device" data={contexts.device} />
+        );
         break;
     }
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts.jsx b/src/sentry/static/sentry/app/components/events/contexts.jsx
index 001a21c5e6..1234790430 100644
--- a/src/sentry/static/sentry/app/components/events/contexts.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts.jsx
@@ -5,12 +5,12 @@ import plugins from '../../plugins';
 import {objectIsEmpty, toTitleCase, defined} from '../../utils';
 
 const CONTEXT_TYPES = {
-  'default': require('./contexts/default').default,
-  'app': require('./contexts/app').default,
-  'device': require('./contexts/device').default,
-  'os': require('./contexts/os').default,
-  'runtime': require('./contexts/runtime').default,
-  'user': require('./contexts/user').default,
+  default: require('./contexts/default').default,
+  app: require('./contexts/app').default,
+  device: require('./contexts/device').default,
+  os: require('./contexts/os').default,
+  runtime: require('./contexts/runtime').default,
+  user: require('./contexts/user').default
 };
 
 function getContextComponent(type) {
@@ -35,7 +35,7 @@ const ContextChunk = React.createClass({
     group: React.PropTypes.object.isRequired,
     type: React.PropTypes.string.isRequired,
     alias: React.PropTypes.string.isRequired,
-    value: React.PropTypes.object.isRequired,
+    value: React.PropTypes.object.isRequired
   },
 
   getInitialState() {
@@ -49,27 +49,28 @@ const ContextChunk = React.createClass({
   },
 
   componentDidUpdate(prevProps, prevState) {
-    if (prevProps.group.id != this.props.group.id ||
-        prevProps.type != this.props.type) {
+    if (prevProps.group.id != this.props.group.id || prevProps.type != this.props.type) {
       this.syncPlugin();
     }
   },
 
   syncPlugin() {
-    let sourcePlugin = getSourcePlugin(
-      this.props.group.pluginContexts, this.props.type);
+    let sourcePlugin = getSourcePlugin(this.props.group.pluginContexts, this.props.type);
     if (!sourcePlugin) {
       this.setState({
         pluginLoading: false
       });
     } else {
-      this.setState({
-        pluginLoading: true,
-      }, () => {
-        plugins.load(sourcePlugin, () => {
-          this.setState({pluginLoading: false});
-        });
-      });
+      this.setState(
+        {
+          pluginLoading: true
+        },
+        () => {
+          plugins.load(sourcePlugin, () => {
+            this.setState({pluginLoading: false});
+          });
+        }
+      );
     }
   },
 
@@ -113,15 +114,16 @@ const ContextChunk = React.createClass({
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={evt}
-          key={`context-${alias}`}
-          type={`context-${alias}`}
-          title={this.renderTitle(Component)}>
+        group={group}
+        event={evt}
+        key={`context-${alias}`}
+        type={`context-${alias}`}
+        title={this.renderTitle(Component)}
+      >
         <Component alias={alias} data={value} />
       </GroupEventDataSection>
     );
-  },
+  }
 });
 
 const ContextsInterface = React.createClass({
@@ -135,33 +137,35 @@ const ContextsInterface = React.createClass({
     let evt = this.props.event;
     let children = [];
     if (!objectIsEmpty(evt.user)) {
-      children.push((
+      children.push(
         <ContextChunk
           group={group}
           event={evt}
           type="user"
           alias="user"
           value={evt.user}
-          key="user" />
-      ));
+          key="user"
+        />
+      );
     }
 
     let value = null;
     for (let key in evt.contexts) {
       value = evt.contexts[key];
-      children.push((
+      children.push(
         <ContextChunk
           group={group}
           event={evt}
           type={value.type}
           alias={key}
           value={value}
-          key={key} />
-      ));
+          key={key}
+        />
+      );
     }
 
     return <div>{children}</div>;
-  },
+  }
 });
 
 export default ContextsInterface;
diff --git a/src/sentry/static/sentry/app/components/events/contexts/app.jsx b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
index aa8338ffba..a0bb34ebe4 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/app.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/app.jsx
@@ -5,13 +5,21 @@ import ContextBlock from './contextBlock';
 const AppContextType = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
-    let {app_id, app_start_time, device_app_hash, build_type,
-      app_identifier, app_name, app_version,
-      app_build, ...data} = this.props.data;
+    let {
+      app_id,
+      app_start_time,
+      device_app_hash,
+      build_type,
+      app_identifier,
+      app_name,
+      app_version,
+      app_build,
+      ...data
+    } = this.props.data;
     return (
       <ContextBlock
         data={data}
@@ -23,9 +31,10 @@ const AppContextType = React.createClass({
           ['?Bundle ID', app_identifier],
           ['?Bundle Name', app_name],
           ['?Version', app_version],
-          ['?Build', app_build],
+          ['?Build', app_build]
         ]}
-        alias={this.props.alias} />
+        alias={this.props.alias}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
index a139a9c855..154124576c 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/contextBlock.jsx
@@ -8,7 +8,7 @@ const ContextBlock = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
     data: React.PropTypes.object.isRequired,
-    knownData: React.PropTypes.array,
+    knownData: React.PropTypes.array
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/contexts/default.jsx b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
index 40798f5f22..bfd903a4f7 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/default.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/default.jsx
@@ -5,13 +5,11 @@ import ContextBlock from './contextBlock';
 const DefaultContextType = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
-    return (
-      <ContextBlock data={this.props.data} alias={this.props.alias} />
-    );
+    return <ContextBlock data={this.props.data} alias={this.props.alias} />;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/events/contexts/device.jsx b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
index 56e388d976..2d32b95fd0 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/device.jsx
@@ -6,44 +6,77 @@ import {defined, formatBytes} from '../../../utils';
 const DeviceContextType = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   formatMemory(memory_size, free_memory, usable_memory) {
-    if (!Number.isInteger(memory_size) || memory_size <= 0 ||
-        !Number.isInteger(free_memory) || free_memory <= 0) {
+    if (
+      !Number.isInteger(memory_size) ||
+      memory_size <= 0 ||
+      !Number.isInteger(free_memory) ||
+      free_memory <= 0
+    ) {
       return null;
     }
 
     let memory = `Total: ${formatBytes(memory_size)} / Free: ${formatBytes(free_memory)}`;
     if (Number.isInteger(usable_memory) && usable_memory > 0)
-        memory += ` / Usable: ${formatBytes(usable_memory)}`;
+      memory += ` / Usable: ${formatBytes(usable_memory)}`;
 
     return memory;
   },
 
-  formatStorage(storage_size, free_storage, external_storage_size, external_free_storage) {
-    if (!Number.isInteger(storage_size) || storage_size <= 0)
-      return null;
+  formatStorage(
+    storage_size,
+    free_storage,
+    external_storage_size,
+    external_free_storage
+  ) {
+    if (!Number.isInteger(storage_size) || storage_size <= 0) return null;
 
     let storage = `Total: ${formatBytes(storage_size)}`;
     if (Number.isInteger(free_storage) && free_storage > 0)
       storage += ` / Free: ${formatBytes(free_storage)}`;
 
-    if (Number.isInteger(external_storage_size) && external_storage_size > 0 &&
-        Number.isInteger(external_free_storage) && external_free_storage > 0)
+    if (
+      Number.isInteger(external_storage_size) &&
+      external_storage_size > 0 &&
+      Number.isInteger(external_free_storage) &&
+      external_free_storage > 0
+    )
       storage += ` (External Total: ${formatBytes(external_storage_size)} / Free: ${formatBytes(external_free_storage)})`;
 
     return storage;
   },
 
   render() {
-    let {name, family, model, model_id, arch, battery_level, orientation,
-      simulator, memory_size, free_memory, usable_memory, storage_size,
-      free_storage, external_storage_size, external_free_storage,
-      boot_time, timezone, ...data} = this.props.data;
-      let memory = this.formatMemory(memory_size, free_memory, usable_memory);
-      let storage = this.formatStorage(storage_size, free_storage, external_storage_size, external_free_storage);
+    let {
+      name,
+      family,
+      model,
+      model_id,
+      arch,
+      battery_level,
+      orientation,
+      simulator,
+      memory_size,
+      free_memory,
+      usable_memory,
+      storage_size,
+      free_storage,
+      external_storage_size,
+      external_free_storage,
+      boot_time,
+      timezone,
+      ...data
+    } = this.props.data;
+    let memory = this.formatMemory(memory_size, free_memory, usable_memory);
+    let storage = this.formatStorage(
+      storage_size,
+      free_storage,
+      external_storage_size,
+      external_free_storage
+    );
     return (
       <ContextBlock
         data={data}
@@ -52,16 +85,16 @@ const DeviceContextType = React.createClass({
           ['Family', family],
           ['Model', model + (model_id ? ` (${model_id})` : '')],
           ['Architecture', arch],
-          ['?Battery Level', defined(battery_level)
-            ? `${battery_level}%` : null],
+          ['?Battery Level', defined(battery_level) ? `${battery_level}%` : null],
           ['?Orientation', orientation],
           ['?Memory', memory],
           ['?Capacity', storage],
           ['?Simulator', simulator],
           ['?Boot Time', boot_time],
-          ['?Timezone', timezone],
+          ['?Timezone', timezone]
         ]}
-        alias={this.props.alias} />
+        alias={this.props.alias}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/contexts/os.jsx b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
index be7395affd..e32e3dfa9b 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/os.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/os.jsx
@@ -6,7 +6,7 @@ import {defined} from '../../../utils';
 const OsContextType = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -18,9 +18,10 @@ const OsContextType = React.createClass({
           ['?Name', name],
           ['Version', version + (build ? ` (${build})` : '')],
           ['Kernel Version', kernel_version],
-          ['?Rooted', defined(rooted) ? (rooted ? 'yes' : 'no') : null],
+          ['?Rooted', defined(rooted) ? rooted ? 'yes' : 'no' : null]
         ]}
-        alias={this.props.alias} />
+        alias={this.props.alias}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
index 620093d7a1..067bd50b51 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/runtime.jsx
@@ -5,7 +5,7 @@ import ContextBlock from './contextBlock';
 const RuntimeContextType = React.createClass({
   propTypes: {
     alias: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -13,11 +13,9 @@ const RuntimeContextType = React.createClass({
     return (
       <ContextBlock
         data={data}
-        knownData={[
-          ['Name', name],
-          ['Version', version + (build ? ` (${build})` : '')],
-        ]}
-        alias={this.props.alias} />
+        knownData={[['Name', name], ['Version', version + (build ? ` (${build})` : '')]]}
+        alias={this.props.alias}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/contexts/user.jsx b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
index 78c916204f..46cb6c680b 100644
--- a/src/sentry/static/sentry/app/components/events/contexts/user.jsx
+++ b/src/sentry/static/sentry/app/components/events/contexts/user.jsx
@@ -7,7 +7,7 @@ import KeyValueList from '../interfaces/keyValueList';
 
 const UserContextType = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -17,15 +17,16 @@ const UserContextType = React.createClass({
 
     // Handle our native attributes special
     user.id && builtins.push(['ID', <pre>{user.id}</pre>]);
-    user.email && builtins.push([
-      'Email',
-      <pre>
-        {user.email}
-        <a href={`mailto:${user.email}`} target="_blank" className="external-icon">
-          <em className="icon-envelope" />
-        </a>
-      </pre>
-    ]);
+    user.email &&
+      builtins.push([
+        'Email',
+        <pre>
+          {user.email}
+          <a href={`mailto:${user.email}`} target="_blank" className="external-icon">
+            <em className="icon-envelope" />
+          </a>
+        </pre>
+      ]);
     user.username && builtins.push(['Username', <pre>{user.username}</pre>]);
     user.ip_address && builtins.push(['IP Address', <pre>{user.ip_address}</pre>]);
 
@@ -49,9 +50,7 @@ const UserContextType = React.createClass({
             );
           })}
         </table>
-        {children &&
-          <KeyValueList data={children} isContextData={true} />
-        }
+        {children && <KeyValueList data={children} isContextData={true} />}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/device.jsx b/src/sentry/static/sentry/app/components/events/device.jsx
index 5c125a3e2f..4af3260772 100644
--- a/src/sentry/static/sentry/app/components/events/device.jsx
+++ b/src/sentry/static/sentry/app/components/events/device.jsx
@@ -5,7 +5,7 @@ import PropTypes from '../../proptypes';
 import {t} from '../../locale';
 import ContextData from '../contextData';
 
-// TODO(hazat): Is this interface used somewhere? If not delete it? 
+// TODO(hazat): Is this interface used somewhere? If not delete it?
 const DeviceInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -19,7 +19,7 @@ const DeviceInterface = React.createClass({
   render() {
     let {group, event} = this.props;
     let data = event.device;
-    let extras = Object.keys(data.data || {}).map((key) => {
+    let extras = Object.keys(data.data || {}).map(key => {
       let value = data.data[key];
       return (
         <tr key={key}>
@@ -35,7 +35,8 @@ const DeviceInterface = React.createClass({
         event={event}
         type="device"
         title={t('Device')}
-        wrapTitle={true}>
+        wrapTitle={true}
+      >
         <table className="table key-value">
           <tbody>
             {data.name &&
@@ -43,7 +44,7 @@ const DeviceInterface = React.createClass({
                 <td className="key">Name</td>
                 <td className="value"><pre>{data.name}</pre></td>
               </tr>}
-            {data.version && 
+            {data.version &&
               <tr>
                 <td className="key">Version</td>
                 <td className="value"><pre>{data.version}</pre></td>
diff --git a/src/sentry/static/sentry/app/components/events/errorItem.jsx b/src/sentry/static/sentry/app/components/events/errorItem.jsx
index 3463a62b40..96bd76ba80 100644
--- a/src/sentry/static/sentry/app/components/events/errorItem.jsx
+++ b/src/sentry/static/sentry/app/components/events/errorItem.jsx
@@ -6,9 +6,9 @@ const EventErrorItem = React.createClass({
     error: React.PropTypes.object.isRequired
   },
 
-  getInitialState(){
+  getInitialState() {
     return {
-      isOpen: false,
+      isOpen: false
     };
   },
 
@@ -26,8 +26,15 @@ const EventErrorItem = React.createClass({
     return (
       <li>
         {error.message}
-        <small> <a style={{marginLeft: 10}} onClick={this.toggle}>{isOpen ? t('Collapse') : t('Expand')}</a></small>
-        <pre style={{display: isOpen ? 'block' : 'none'}}>{JSON.stringify(error.data, null, 2)}</pre>
+        <small>
+          {' '}
+          <a style={{marginLeft: 10}} onClick={this.toggle}>
+            {isOpen ? t('Collapse') : t('Expand')}
+          </a>
+        </small>
+        <pre style={{display: isOpen ? 'block' : 'none'}}>
+          {JSON.stringify(error.data, null, 2)}
+        </pre>
       </li>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/errors.jsx b/src/sentry/static/sentry/app/components/events/errors.jsx
index bd0df7280f..5ce0da9b88 100644
--- a/src/sentry/static/sentry/app/components/events/errors.jsx
+++ b/src/sentry/static/sentry/app/components/events/errors.jsx
@@ -11,9 +11,9 @@ const EventErrors = React.createClass({
     event: PropTypes.Event.isRequired
   },
 
-  getInitialState(){
+  getInitialState() {
     return {
-      isOpen: false,
+      isOpen: false
     };
   },
 
@@ -34,24 +34,25 @@ const EventErrors = React.createClass({
     let isOpen = this.state.isOpen;
     return (
       <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="errors"
-          className="errors">
-          <span className="icon icon-alert" />
+        group={this.props.group}
+        event={this.props.event}
+        type="errors"
+        className="errors"
+      >
+        <span className="icon icon-alert" />
         <p>
-          <a className="pull-right" onClick={this.toggle}>{isOpen ? t('Hide') : t('Show')}</a>
-          {
-            tn('There was %d error encountered while processing this event',
-               'There were %d errors encountered while processing this event',
-               numErrors)
-          }
+          <a className="pull-right" onClick={this.toggle}>
+            {isOpen ? t('Hide') : t('Show')}
+          </a>
+          {tn(
+            'There was %d error encountered while processing this event',
+            'There were %d errors encountered while processing this event',
+            numErrors
+          )}
         </p>
         <ul style={{display: isOpen ? 'block' : 'none'}}>
           {errors.map((error, errorIdx) => {
-            return (
-              <EventErrorItem key={errorIdx} error={error} />
-            );
+            return <EventErrorItem key={errorIdx} error={error} />;
           })}
         </ul>
       </EventDataSection>
diff --git a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
index dbf42608ec..5078abb5ed 100644
--- a/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventDataSection.jsx
@@ -18,19 +18,21 @@ const GroupEventDataSection = React.createClass({
 
   componentDidMount() {
     if (location.hash) {
-        let [, hash] = location.hash.split('#');
+      let [, hash] = location.hash.split('#');
 
-        try {
-          let anchorElement = hash && document.querySelector('div#' + hash);
-          if (anchorElement) { anchorElement.scrollIntoView(); }
-        } catch(e) {
-          // Since we're blindly taking the hash from the url and shoving
-          // it into a querySelector, it's possible that this may
-          // raise an exception if the input is invalid. So let's just ignore
-          // this instead of blowing up.
-          // e.g. `document.querySelector('div#=')`
-          // > Uncaught DOMException: Failed to execute 'querySelector' on 'Document': 'div#=' is not a valid selector.
+      try {
+        let anchorElement = hash && document.querySelector('div#' + hash);
+        if (anchorElement) {
+          anchorElement.scrollIntoView();
         }
+      } catch (e) {
+        // Since we're blindly taking the hash from the url and shoving
+        // it into a querySelector, it's possible that this may
+        // raise an exception if the input is invalid. So let's just ignore
+        // this instead of blowing up.
+        // e.g. `document.querySelector('div#=')`
+        // > Uncaught DOMException: Failed to execute 'querySelector' on 'Document': 'div#=' is not a valid selector.
+      }
     }
   },
 
@@ -42,13 +44,10 @@ const GroupEventDataSection = React.createClass({
             <a href={'#' + this.props.type} className="permalink">
               <em className="icon-anchor" />
             </a>
-            {this.props.wrapTitle ?
-              <h3>{this.props.title}</h3>
-            :
-              <div>{this.props.title}</div>
-            }
-          </div>
-        }
+            {this.props.wrapTitle
+              ? <h3>{this.props.title}</h3>
+              : <div>{this.props.title}</div>}
+          </div>}
         <div className="box-content with-padding">
           {this.props.children}
         </div>
diff --git a/src/sentry/static/sentry/app/components/events/eventEntries.jsx b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
index 33b4ae3d11..519fe4ea0e 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntries.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntries.jsx
@@ -35,7 +35,7 @@ export const INTERFACES = {
   csp: CspInterface,
   breadcrumbs: BreadcrumbsInterface,
   threads: ThreadsInterface,
-  debugmeta: DebugMetaInterface,
+  debugmeta: DebugMetaInterface
 };
 
 const EventEntries = React.createClass({
@@ -72,7 +72,9 @@ const EventEntries = React.createClass({
         let Component = this.interfaces[entry.type];
         if (!Component) {
           /*eslint no-console:0*/
-          window.console && console.error && console.error('Unregistered interface: ' + entry.type);
+          window.console &&
+            console.error &&
+            console.error('Unregistered interface: ' + entry.type);
           return null;
         }
         return (
@@ -82,95 +84,71 @@ const EventEntries = React.createClass({
             event={evt}
             type={entry.type}
             data={entry.data}
-            isShare={isShare} />
+            isShare={isShare}
+          />
         );
       } catch (ex) {
         logException(ex);
         return (
           <EventDataSection
-              group={group}
-              event={evt}
-              type={entry.type}
-              title={entry.type}>
+            group={group}
+            event={evt}
+            type={entry.type}
+            title={entry.type}
+          >
             <p>{t('There was an error rendering this data.')}</p>
           </EventDataSection>
         );
       }
     });
 
-    let hasContext = (
-      !utils.objectIsEmpty(evt.user) || !utils.objectIsEmpty(evt.contexts)
-    );
+    let hasContext = !utils.objectIsEmpty(evt.user) || !utils.objectIsEmpty(evt.contexts);
 
-    let hasContextSummary = (
-      hasContext && (evt.platform === 'cocoa' || evt.platform === 'javascript' || evt.platform === 'java')
-    );
+    let hasContextSummary =
+      hasContext &&
+      (evt.platform === 'cocoa' ||
+        evt.platform === 'javascript' ||
+        evt.platform === 'java');
 
     return (
       <div className="entries">
-        {evt.userReport &&
-          <EventUserReport
-            group={group}
-            event={evt} />
-        }
+        {evt.userReport && <EventUserReport group={group} event={evt} />}
         {!utils.objectIsEmpty(evt.errors) &&
           <ReprocessingHint
             group={group}
             event={evt}
             orgId={this.props.orgId}
-            projectId={project.slug} />
-        }
-        {!utils.objectIsEmpty(evt.errors) &&
-          <EventErrors
-            group={group}
-            event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.sdk) && evt.sdk.upstream.isNewer &&
+            projectId={project.slug}
+          />}
+        {!utils.objectIsEmpty(evt.errors) && <EventErrors group={group} event={evt} />}
+        {!utils.objectIsEmpty(evt.sdk) &&
+          evt.sdk.upstream.isNewer &&
           <div className="alert-block alert-info box">
-            <span className="icon-exclamation"/>
-            {t('This event was reported with an old version of the %s SDK.', evt.platform)}
+            <span className="icon-exclamation" />
+            {t(
+              'This event was reported with an old version of the %s SDK.',
+              evt.platform
+            )}
             {evt.sdk.upstream.url &&
-              <a href={evt.sdk.upstream.url}
-                 className="btn btn-sm btn-default">{t('Learn More')}</a>
-            }
-          </div>
-        }
-        {hasContextSummary &&
-          <EventContextSummary
-            group={group}
-            event={evt} />
-        }
+              <a href={evt.sdk.upstream.url} className="btn btn-sm btn-default">
+                {t('Learn More')}
+              </a>}
+          </div>}
+        {hasContextSummary && <EventContextSummary group={group} event={evt} />}
         <EventTags
           group={group}
           event={evt}
           orgId={this.props.orgId}
-          projectId={project.slug} />
+          projectId={project.slug}
+        />
         {entries}
-        {hasContext &&
-          <EventContexts
-            group={group}
-            event={evt} />
-        }
+        {hasContext && <EventContexts group={group} event={evt} />}
         {!utils.objectIsEmpty(evt.context) &&
-          <EventExtraData
-            group={group}
-            event={evt} />
-        }
+          <EventExtraData group={group} event={evt} />}
         {!utils.objectIsEmpty(evt.packages) &&
-          <EventPackageData
-            group={group}
-            event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.device) &&
-          <EventDevice
-            group={group}
-            event={evt} />
-        }
-        {!utils.objectIsEmpty(evt.sdk) &&
-          <EventSdk
-            group={group}
-            event={evt} />
-        }
+          <EventPackageData group={group} event={evt} />}
+        {!utils.objectIsEmpty(evt.device) && <EventDevice group={group} event={evt} />}
+        {!utils.objectIsEmpty(evt.sdk) && <EventSdk group={group} event={evt} />}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/eventRow.jsx b/src/sentry/static/sentry/app/components/events/eventRow.jsx
index 7666f3bcfb..a6d63d20c4 100644
--- a/src/sentry/static/sentry/app/components/events/eventRow.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventRow.jsx
@@ -44,19 +44,19 @@ const EventRow = React.createClass({
           <h5>
             <Router.Link to={eventLink}>{event.message}</Router.Link>
           </h5>
-          <small className="tagList">{tagList.map((tag) => {
-            return <span key={tag[0]}>{tag[0]} = {tag[1]} </span>;
-          })}</small>
+          <small className="tagList">
+            {tagList.map(tag => {
+              return <span key={tag[0]}>{tag[0]} = {tag[1]} </span>;
+            })}
+          </small>
         </td>
         <td className="event-user table-user-info">
-          {event.user ?
-            <div>
-              <Avatar user={event.user} size={64} className="avatar" />
-              {event.user.email}
-            </div>
-          :
-            <span>&mdash;</span>
-          }
+          {event.user
+            ? <div>
+                <Avatar user={event.user} size={64} className="avatar" />
+                {event.user.email}
+              </div>
+            : <span>—</span>}
         </td>
         <td className="align-right">
           <TimeSince date={event.dateCreated} />
diff --git a/src/sentry/static/sentry/app/components/events/eventTags.jsx b/src/sentry/static/sentry/app/components/events/eventTags.jsx
index 8f6da207b0..de62e91396 100644
--- a/src/sentry/static/sentry/app/components/events/eventTags.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventTags.jsx
@@ -20,34 +20,33 @@ const EventTags = React.createClass({
 
   render() {
     let tags = this.props.event.tags;
-    if (_.isEmpty(tags))
-      return null;
+    if (_.isEmpty(tags)) return null;
 
     let {orgId, projectId} = this.props;
     return (
       <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          title={t('Tags')}
-          type="tags"
-          className="p-b-1"
-          >
+        group={this.props.group}
+        event={this.props.event}
+        title={t('Tags')}
+        type="tags"
+        className="p-b-1"
+      >
         <Pills className="no-margin">
-          {tags.map((tag) => {
+          {tags.map(tag => {
             return (
               <Pill key={tag.key} name={tag.key}>
                 <Link
                   to={{
                     pathname: `/${orgId}/${projectId}/`,
                     query: {query: `${tag.key}:"${tag.value}"`}
-                  }}>
-                    {deviceNameMapper(tag.value)}
+                  }}
+                >
+                  {deviceNameMapper(tag.value)}
                 </Link>
                 {isUrl(tag.value) &&
                   <a href={tag.value} className="external-icon">
                     <em className="icon-open" />
-                  </a>
-                }
+                  </a>}
               </Pill>
             );
           })}
diff --git a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
index 9c4c9d794e..c46414a8e2 100644
--- a/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
+++ b/src/sentry/static/sentry/app/components/events/eventsPerHour.jsx
@@ -9,9 +9,7 @@ import OrganizationState from '../../mixins/organizationState';
 
 import {t} from '../../locale';
 
-
 const EventsPerHour = React.createClass({
-
   mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
@@ -40,30 +38,39 @@ const EventsPerHour = React.createClass({
     let query = {
       since: this.state.querySince,
       until: this.state.queryUntil,
-      resolution: '1h',
+      resolution: '1h'
     };
 
-    $.when.apply($, this.STAT_OPTS.map(stat => {
-        let deferred = $.Deferred();
-        this.api.request(statEndpoint, {
-          query: Object.assign({stat: stat}, query),
-          success: deferred.resolve.bind(deferred),
-          error: deferred.reject.bind(deferred)
-        });
-        return deferred;
-      }
-    )).done(function() {
-      let rawOrgData = {};
-      for (let i = 0; i < this.STAT_OPTS.length; i++) {
-        rawOrgData[this.STAT_OPTS[i]] = arguments[i][0];
-      }
-      this.setState({
-        rawOrgData: rawOrgData,
-        formattedData: this.formatData(rawOrgData)
-      });
-    }.bind(this)).fail(function() {
-      this.setState({error: true});
-    }.bind(this));
+    $.when
+      .apply(
+        $,
+        this.STAT_OPTS.map(stat => {
+          let deferred = $.Deferred();
+          this.api.request(statEndpoint, {
+            query: Object.assign({stat: stat}, query),
+            success: deferred.resolve.bind(deferred),
+            error: deferred.reject.bind(deferred)
+          });
+          return deferred;
+        })
+      )
+      .done(
+        function() {
+          let rawOrgData = {};
+          for (let i = 0; i < this.STAT_OPTS.length; i++) {
+            rawOrgData[this.STAT_OPTS[i]] = arguments[i][0];
+          }
+          this.setState({
+            rawOrgData: rawOrgData,
+            formattedData: this.formatData(rawOrgData)
+          });
+        }.bind(this)
+      )
+      .fail(
+        function() {
+          this.setState({error: true});
+        }.bind(this)
+      );
   },
 
   getEndpoint() {
@@ -76,10 +83,11 @@ const EventsPerHour = React.createClass({
     let valueLookup = {};
     this.STAT_OPTS.forEach(stat => {
       valueLookup[stat] = {};
-      rawData[stat] && rawData[stat].forEach(point => {
-        allXValues[point[0]] = null;
-        valueLookup[stat][point[0]] = point[1];
-      });
+      rawData[stat] &&
+        rawData[stat].forEach(point => {
+          allXValues[point[0]] = null;
+          valueLookup[stat][point[0]] = point[1];
+        });
     });
     allXValues = Object.keys(allXValues);
 
@@ -87,7 +95,8 @@ const EventsPerHour = React.createClass({
     allXValues.forEach(x => {
       let point = {x: +x, y: []};
       // convert received --> accepted
-      let acceptedY = valueLookup.received[x] - valueLookup.rejected[x] - valueLookup.blacklisted[x];
+      let acceptedY =
+        valueLookup.received[x] - valueLookup.rejected[x] - valueLookup.blacklisted[x];
       point.y.push(acceptedY);
       ['rejected', 'blacklisted'].forEach(stat => {
         let yVal = valueLookup[stat][x] || 0;
@@ -121,12 +130,18 @@ const EventsPerHour = React.createClass({
 
     return (
       <div>
-        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/stats/`}>{t('View Stats')}</Link>
+        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/stats/`}>
+          {t('View Stats')}
+        </Link>
         <h6 className="nav-header">{t('Events Per Hour')}</h6>
-          <StackedBarChart points={this.state.formattedData} className="sparkline dashboard-sparkline" barClasses={this.STAT_OPTS} />
+        <StackedBarChart
+          points={this.state.formattedData}
+          className="sparkline dashboard-sparkline"
+          barClasses={this.STAT_OPTS}
+        />
       </div>
     );
-  },
+  }
 });
 
 export default EventsPerHour;
diff --git a/src/sentry/static/sentry/app/components/events/extraData.jsx b/src/sentry/static/sentry/app/components/events/extraData.jsx
index 44de9f32ce..aebef01b03 100644
--- a/src/sentry/static/sentry/app/components/events/extraData.jsx
+++ b/src/sentry/static/sentry/app/components/events/extraData.jsx
@@ -21,13 +21,12 @@ const EventExtraData = React.createClass({
 
     return (
       <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="extra"
-          title={t('Additional Data')}>
-          <KeyValueList
-              data={extraDataArray}
-              isContextData={true}/>
+        group={this.props.group}
+        event={this.props.event}
+        type="extra"
+        title={t('Additional Data')}
+      >
+        <KeyValueList data={extraDataArray} isContextData={true} />
       </EventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
index e37a242f00..903b666688 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs.jsx
@@ -8,7 +8,7 @@ function Collapsed(props) {
   return (
     <li className="crumbs-collapsed">
       <span className="icon-container">
-        <span className="icon icon-ellipsis"/>
+        <span className="icon icon-ellipsis" />
       </span>
       <a onClick={props.onClick}>Show {props.count} collapsed crumbs</a>
     </li>
@@ -65,15 +65,22 @@ const BreadcrumbsInterface = React.createClass({
   renderBreadcrumbs(crumbs) {
     // reverse array to get consistent idx between collapsed/expanded state
     // (indexes begin and increment from last breadcrumb)
-    return crumbs.reverse().map((item, idx) => {
-      return <Breadcrumb key={idx} crumb={item} />;
-    }).reverse(); // un-reverse rendered result
+    return crumbs
+      .reverse()
+      .map((item, idx) => {
+        return <Breadcrumb key={idx} crumb={item} />;
+      })
+      .reverse(); // un-reverse rendered result
   },
 
   renderNoMatch() {
     return (
       <li className="crumb-empty">
-        <p><span className="icon icon-exclamation" /> {t('Sorry, no breadcrumbs match your search query.')}</p>
+        <p>
+          <span className="icon icon-exclamation" />
+          {' '}
+          {t('Sorry, no breadcrumbs match your search query.')}
+        </p>
       </li>
     );
   },
@@ -141,20 +148,21 @@ const BreadcrumbsInterface = React.createClass({
   getSearchField() {
     return (
       <div className="breadcrumb-filter">
-        <input type="text" className="search-input form-control"
+        <input
+          type="text"
+          className="search-input form-control"
           placeholder={t('Search breadcrumbs...')}
           autoComplete="off"
           value={this.state.queryValue}
           onChange={this.setQuery}
-          />
+        />
         <span className="icon-search" />
         {this.state.queryValue &&
           <div>
             <a className="search-clear-form" onClick={this.clearSearch}>
               <span className="icon-circle-cross" />
             </a>
-          </div>
-        }
+          </div>}
       </div>
     );
   },
@@ -184,9 +192,7 @@ const BreadcrumbsInterface = React.createClass({
 
     // filter breadcrumbs on text input
     let {queryValue} = this.state;
-    let filtered = queryValue
-      ? this.filterCrumbs(all, queryValue.toLowerCase())
-        : all;
+    let filtered = queryValue ? this.filterCrumbs(all, queryValue.toLowerCase()) : all;
 
     // cap max number of breadcrumbs to show
     const MAX = BreadcrumbsInterface.MAX_CRUMBS_WHEN_COLLAPSED;
@@ -205,14 +211,16 @@ const BreadcrumbsInterface = React.createClass({
     }
     return (
       <GroupEventDataSection
-          className="breadcrumb-box"
-          group={group}
-          event={evt}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}>
+        className="breadcrumb-box"
+        group={group}
+        event={evt}
+        type={this.props.type}
+        title={title}
+        wrapTitle={false}
+      >
         <ul className="crumbs">
-          {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
+          {numCollapsed > 0 &&
+            <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />}
           {crumbContent}
         </ul>
       </GroupEventDataSection>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
index ffb7ec584a..61cbe70723 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/breadcrumb.jsx
@@ -7,13 +7,12 @@ import DefaultRenderer from './defaultRenderer';
 
 const CUSTOM_RENDERERS = {
   http: HttpRenderer,
-  error: ErrorRenderer,
+  error: ErrorRenderer
 };
 
-
 const Breadcrumb = React.createClass({
   propTypes: {
-    crumb: React.PropTypes.object.isRequired,
+    crumb: React.PropTypes.object.isRequired
   },
 
   getClassName() {
@@ -42,16 +41,14 @@ const Breadcrumb = React.createClass({
   renderType() {
     let {crumb} = this.props;
     let Renderer = CUSTOM_RENDERERS[crumb.type] || DefaultRenderer;
-    return (
-      <Renderer crumb={crumb} />
-    );
+    return <Renderer crumb={crumb} />;
   },
 
   render() {
     return (
       <li className={this.getClassName()}>
         <span className="icon-container">
-          <span className="icon"/>
+          <span className="icon" />
         </span>
         <span className="dt">
           {moment(this.props.crumb.timestamp).format('HH:mm:ss')}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
index 3bee3519bc..9e0c0f3307 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/category.jsx
@@ -21,9 +21,7 @@ const Category = React.createClass({
     } else {
       title = value;
     }
-    return (
-      <span className="crumb-category" title={title}>{title}</span>
-    );
+    return <span className="crumb-category" title={title}>{title}</span>;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
index b4a1667c10..66b2487df9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/crumbTable.jsx
@@ -3,13 +3,12 @@ import _ from 'underscore';
 
 import Category from './category';
 
-
 const CrumbTable = React.createClass({
   propTypes: {
     crumb: React.PropTypes.object,
     title: React.PropTypes.string,
     kvData: React.PropTypes.object,
-    summary: React.PropTypes.object,
+    summary: React.PropTypes.object
   },
 
   renderData() {
@@ -35,7 +34,7 @@ const CrumbTable = React.createClass({
         <thead>
           <tr>
             <td className="key">
-              <Category value={this.props.crumb.category}/>
+              <Category value={this.props.crumb.category} />
             </td>
             <td className="value">{this.props.summary}</td>
           </tr>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
index 876d605250..2c555639c1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/defaultRenderer.jsx
@@ -3,11 +3,10 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-
 const DefaultRenderer = React.createClass({
   propTypes: {
     crumb: React.PropTypes.object.isRequired,
-    kvData: React.PropTypes.object,
+    kvData: React.PropTypes.object
   },
 
   getTitle() {
@@ -15,9 +14,12 @@ const DefaultRenderer = React.createClass({
     if (crumb.type === 'default') {
       return null;
     }
-    return crumb.type.split(/[_-\s]+/g).map((word) => {
-      return word.substr(0, 1).toUpperCase() + word.substr(1);
-    }).join(' ');
+    return crumb.type
+      .split(/[_-\s]+/g)
+      .map(word => {
+        return word.substr(0, 1).toUpperCase() + word.substr(1);
+      })
+      .join(' ');
   },
 
   renderSummary() {
@@ -36,7 +38,8 @@ const DefaultRenderer = React.createClass({
         title={this.getTitle()}
         summary={this.renderSummary()}
         kvData={this.props.crumb.data || {}}
-        {...this.props} />
+        {...this.props}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
index ba132b69bf..d637289ad3 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/errorRenderer.jsx
@@ -3,18 +3,13 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-
 const ErrorRenderer = React.createClass({
   propTypes: {
-    crumb: React.PropTypes.object.isRequired,
+    crumb: React.PropTypes.object.isRequired
   },
 
   renderUrl(url) {
-    return (
-      url.match(/^https?:\/\//)
-        ? <a href={url}>{url}</a>
-        : <em>{url}</em>
-    );
+    return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
   },
 
   render() {
@@ -40,13 +35,7 @@ const ErrorRenderer = React.createClass({
       </SummaryLine>
     );
 
-    return (
-      <CrumbTable
-        title="Error"
-        summary={summary}
-        kvData={extra}
-        {...this.props} />
-    );
+    return <CrumbTable title="Error" summary={summary} kvData={extra} {...this.props} />;
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
index 22d1eb8b7f..c76a4b7c4d 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/httpRenderer.jsx
@@ -3,23 +3,18 @@ import React from 'react';
 import CrumbTable from './crumbTable';
 import SummaryLine from './summaryLine';
 
-
 const HttpRenderer = React.createClass({
   propTypes: {
-    crumb: React.PropTypes.object.isRequired,
+    crumb: React.PropTypes.object.isRequired
   },
 
   renderUrl(url) {
-    return (
-      url.match(/^https?:\/\//)
-        ? <a href={url}>{url}</a>
-        : <em>{url}</em>
-    );
+    return url.match(/^https?:\/\//) ? <a href={url}>{url}</a> : <em>{url}</em>;
   },
 
   render() {
     let {crumb} = this.props;
-    let {method, status_code, url, ...extra} = (crumb.data || {});
+    let {method, status_code, url, ...extra} = crumb.data || {};
     let summary = (
       <SummaryLine crumb={crumb}>
         <pre>
@@ -33,11 +28,7 @@ const HttpRenderer = React.createClass({
     );
 
     return (
-      <CrumbTable
-        title="HTTP Request"
-        summary={summary}
-        kvData={extra}
-        {...this.props} />
+      <CrumbTable title="HTTP Request" summary={summary} kvData={extra} {...this.props} />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
index 97063d10f9..d12bc2a409 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbs/summaryLine.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 
-
 function isOverflowing(el) {
   // XXX(mitsuhiko): subtract one because of reasons. Not sure which ones.
   return el.offsetHeight < el.scrollHeight - 1;
@@ -63,7 +62,8 @@ const SummaryLine = React.createClass({
       <div
         className={className}
         onClick={this.onToggle}
-        ref={this.makeSummariesGreatAgain}>
+        ref={this.makeSummariesGreatAgain}
+      >
         {this.props.children}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
index 00b7c6618f..4400ec12d7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashContent.jsx
@@ -5,7 +5,6 @@ import StacktraceContent from './stacktraceContent';
 import ExceptionContent from './exceptionContent';
 import RawExceptionContent from './rawExceptionContent';
 
-
 const CrashContent = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -14,40 +13,40 @@ const CrashContent = React.createClass({
     stackType: React.PropTypes.string,
     newestFirst: React.PropTypes.bool.isRequired,
     exception: React.PropTypes.object,
-    stacktrace: React.PropTypes.object,
+    stacktrace: React.PropTypes.object
   },
 
   renderException() {
     const {event, stackView, stackType, newestFirst, exception} = this.props;
-    return (
-      stackView === 'raw' ?
-        <RawExceptionContent
+    return stackView === 'raw'
+      ? <RawExceptionContent
           eventId={event.id}
           type={stackType}
           values={exception.values}
-          platform={event.platform} /> :
-        <ExceptionContent
+          platform={event.platform}
+        />
+      : <ExceptionContent
           type={stackType}
           view={stackView}
           values={exception.values}
           platform={event.platform}
-          newestFirst={newestFirst} />
-    );
+          newestFirst={newestFirst}
+        />;
   },
 
   renderStacktrace() {
     const {event, stackView, newestFirst, stacktrace} = this.props;
-    return (
-      stackView === 'raw' ?
-        <pre className="traceback plain">
-          {rawStacktraceContent(stacktrace, event.platform)}</pre> :
-        <StacktraceContent
+    return stackView === 'raw'
+      ? <pre className="traceback plain">
+          {rawStacktraceContent(stacktrace, event.platform)}
+        </pre>
+      : <StacktraceContent
           data={stacktrace}
           className="no-exception"
           includeSystemFrames={stackView === 'full'}
           platform={event.platform}
-          newestFirst={newestFirst} />
-    );
+          newestFirst={newestFirst}
+        />;
   },
 
   render() {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 95c6d3f3d4..f0f20f8ff5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -15,21 +15,24 @@ const CrashHeader = React.createClass({
     stackView: React.PropTypes.string.isRequired,
     newestFirst: React.PropTypes.bool.isRequired,
     stackType: React.PropTypes.string, // 'original', 'minified', or falsy (none)
-    onChange: React.PropTypes.func,
+    onChange: React.PropTypes.func
   },
 
-  mixins: [TooltipMixin({
-    html: false,
-    selector: '.tip',
-    trigger: 'hover'
-  })],
+  mixins: [
+    TooltipMixin({
+      html: false,
+      selector: '.tip',
+      trigger: 'hover'
+    })
+  ],
 
   hasSystemFrames() {
     const {stacktrace, thread, exception} = this.props;
     return (
       (stacktrace && stacktrace.hasSystemFrames) ||
       (thread && thread.stacktrace && thread.stacktrace.hasSystemFrames) ||
-      (exception && exception.values.find(x => !!(x.stacktrace && x.stacktrace.hasSystemFrames)))
+      (exception &&
+        exception.values.find(x => !!(x.stacktrace && x.stacktrace.hasSystemFrames)))
     );
   },
 
@@ -93,29 +96,60 @@ const CrashHeader = React.createClass({
         <h3 className="pull-left">
           {this.props.title !== undefined ? this.props.title : t('Exception')}
           <small style={{marginLeft: 5}}>
-            (<a onClick={this.toggleOrder} className="tip" title={t('Toggle stacktrace order')} style={{borderBottom: '1px dotted #aaa'}}>
-              {newestFirst ?
-                t('most recent call first')
-              :
-                t('most recent call last')
-              }
+            (<a
+              onClick={this.toggleOrder}
+              className="tip"
+              title={t('Toggle stacktrace order')}
+              style={{borderBottom: '1px dotted #aaa'}}
+            >
+              {newestFirst ? t('most recent call first') : t('most recent call last')}
             </a>)
           </small>
         </h3>
-        <div className="btn-group" style={{marginLeft:10}}>
+        <div className="btn-group" style={{marginLeft: 10}}>
           {this.hasSystemFrames() &&
-            <a className={(stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'app')}>{t('App Only')}</a>
-          }
-          <a className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'full')}>{t('Full')}</a>
-          <a className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.setStackView.bind(this, 'raw')}>{t('Raw')}</a>
+            <a
+              className={
+                (stackView === 'app' ? 'active' : '') + ' btn btn-default btn-sm'
+              }
+              onClick={this.setStackView.bind(this, 'app')}
+            >
+              {t('App Only')}
+            </a>}
+          <a
+            className={(stackView === 'full' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.setStackView.bind(this, 'full')}
+          >
+            {t('Full')}
+          </a>
+          <a
+            className={(stackView === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.setStackView.bind(this, 'raw')}
+          >
+            {t('Raw')}
+          </a>
         </div>
         <div className="btn-group">
-          {this.hasMinified() &&
-            [
-              <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('original')}>{this.getOriginalButtonLabel()}</a>,
-              <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('minified')}>{this.getMinifiedButtonLabel()}</a>
-            ]
-          }
+          {this.hasMinified() && [
+            <a
+              key="original"
+              className={
+                (stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'
+              }
+              onClick={() => this.setStackType('original')}
+            >
+              {this.getOriginalButtonLabel()}
+            </a>,
+            <a
+              key="minified"
+              className={
+                (stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'
+              }
+              onClick={() => this.setStackType('minified')}
+            >
+              {this.getMinifiedButtonLabel()}
+            </a>
+          ]}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
index 42868fdd69..fb4f7851a4 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/csp.jsx
@@ -24,7 +24,7 @@ const CSPInterface = React.createClass({
     group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     type: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   getInitialState() {
@@ -51,9 +51,24 @@ const CSPInterface = React.createClass({
     let title = (
       <div>
         <div className="btn-group">
-          <a className={(view === 'report' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'report')}>{t('Report')}</a>
-          <a className={(view === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'raw')}>{t('Raw')}</a>
-          <a className={(view === 'help' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={this.toggleView.bind(this, 'help')}>{t('Help')}</a>
+          <a
+            className={(view === 'report' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.toggleView.bind(this, 'report')}
+          >
+            {t('Report')}
+          </a>
+          <a
+            className={(view === 'raw' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.toggleView.bind(this, 'raw')}
+          >
+            {t('Raw')}
+          </a>
+          <a
+            className={(view === 'help' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.toggleView.bind(this, 'help')}
+          >
+            {t('Help')}
+          </a>
         </div>
         <h3>{t('CSP Report')}</h3>
       </div>
@@ -63,12 +78,13 @@ const CSPInterface = React.createClass({
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={event}
-          type="csp"
-          title={title}
-          wrapTitle={false}>
-          {children}
+        group={group}
+        event={event}
+        type="csp"
+        title={title}
+        wrapTitle={false}
+      >
+        {children}
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
index 6a3f935abd..fbe7334081 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspContent.jsx
@@ -5,7 +5,7 @@ import KeyValueList from './keyValueList';
 
 const CSPContent = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -15,7 +15,7 @@ const CSPContent = React.createClass({
         <h4>
           <span>{data.effective_directive}</span>
         </h4>
-        <KeyValueList data={objectToArray(data)} isContextData={true}/>
+        <KeyValueList data={objectToArray(data)} isContextData={true} />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
index 3c69b46049..09fb802fb7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/cspHelp.jsx
@@ -5,58 +5,85 @@ import {t} from '../../../locale';
 // TODO: Not sure what we're going to do here re: translations. - Ben
 
 const help = {
-  'base-uri': t(`
+  'base-uri': t(
+    `
 The <code>base-uri</code> directive defines the URIs that a user agent
 may use as the document base URL. If this value is absent, then any URI
 is allowed. If this directive is absent, the user agent will use the
-value in the <code>base</code> element.`),
-  'child-src': t(`
+value in the <code>base</code> element.`
+  ),
+  'child-src': t(
+    `
 The <code>child-src</code> directive defines the valid sources for web
 workers and nested browsing contexts loaded using elements such as
 <frame> and <iframe>. This directive is preferred over the
 <code>frame-src</code> directive, which is deprecated. For workers,
-non-compliant requests are treated as fatal network errors by the user agent.`),
-  'connect-src': t(`
+non-compliant requests are treated as fatal network errors by the user agent.`
+  ),
+  'connect-src': t(
+    `
 The <code>connect-src</code> directive defines valid sources for fetch,
 <code>XMLHttpRequest</code>, <code>WebSocket</code>, and
-<code>EventSource</code> connections.`),
-  'font-src': t(`
+<code>EventSource</code> connections.`
+  ),
+  'font-src': t(
+    `
 The <code>font-src</code> directive specifies valid sources for fonts
-loaded using <code>@font-face</code>.`),
-  'form-action': t(`
+loaded using <code>@font-face</code>.`
+  ),
+  'form-action': t(
+    `
 The <code>form-action</code> directive specifies valid endpoints for
-<code>&lt;form&gt;</code> submissions.`),
-  'frame-ancestors': t(`
+<code>&lt;form&gt;</code> submissions.`
+  ),
+  'frame-ancestors': t(
+    `
 The <code>frame-ancestors</code> directive specifies valid parents that
 may embed a page using the <code>&lt;frame&gt;</code> and
-<code>&lt;iframe&gt;</code> elements.`),
-  'img-src': t(`
+<code>&lt;iframe&gt;</code> elements.`
+  ),
+  'img-src': t(
+    `
 The <code>img-src</code> directive specifies valid sources of images and
-favicons.`),
-  'manifest-src': t(`
+favicons.`
+  ),
+  'manifest-src': t(
+    `
 The <code>manifest-src</code> directive specifies which manifest can be
-applied to the resource.`),
-  'media-src': t(`
+applied to the resource.`
+  ),
+  'media-src': t(
+    `
 The <code>media-src</code> directive specifies valid sources for loading
 media using the <code>&lt;audio&gt;</code> and <code>&lt;video&gt;</code>
-elements.`),
-  'object-src': t(`
+elements.`
+  ),
+  'object-src': t(
+    `
 The <code>object-src</code> directive specifies valid sources for the
 <code>&lt;object&gt;</code>, <code>&lt;embed&gt;</code>, and
-<code>&lt;applet&gt;</code> elements.`),
-  'plugin-types': t(`
+<code>&lt;applet&gt;</code> elements.`
+  ),
+  'plugin-types': t(
+    `
 The <code>plugin-types</code> directive specifies the valid plugins that
-the user agent may invoke.`),
-  'referrer': t(`
+the user agent may invoke.`
+  ),
+  referrer: t(
+    `
 The <code>referrer</code> directive specifies information in the
-<code>Referer</code> header for links away from a page.`),
-  'script-src': t(`
+<code>Referer</code> header for links away from a page.`
+  ),
+  'script-src': t(
+    `
 The <code>script-src</code> directive specifies valid sources
 for JavaScript. When either the <code>script-src</code> or the
 <code>default-src</code> directive is included, inline script and
 <code>eval()</code> are disabled unless you specify 'unsafe-inline'
-and 'unsafe-eval', respectively.`),
-  'style-src': t(`
+and 'unsafe-eval', respectively.`
+  ),
+  'style-src': t(
+    `
 The <code>style-src</code> directive specifies valid sources for
 stylesheets. This includes both externally-loaded stylesheets and inline
 use of the <code>&lt;style&gt;</code> element and HTML style attributes.
@@ -64,11 +91,12 @@ Stylesheets from sources that aren't included in the source list are not
 requested or loaded. When either the <code>style-src</code> or the
 <code>default-src</code> directive is included, inline use of the
 <code>&lt;style&gt;</code> element and HTML style attributes are disabled
-unless you specify 'unsafe-inline'.`),
+unless you specify 'unsafe-inline'.`
+  )
 };
 
 const linkOverrides = {
-  'script-src': 'script-src_2',
+  'script-src': 'script-src_2'
 };
 
 function getHelp(key) {
@@ -100,7 +128,7 @@ function getLink(key) {
 
 const CSPHelp = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -111,9 +139,9 @@ const CSPHelp = React.createClass({
         <h4>
           <code>{key}</code>
         </h4>
-        <blockquote dangerouslySetInnerHTML={getHelp(key)}/>
+        <blockquote dangerouslySetInnerHTML={getHelp(key)} />
         <p style={{textAlign: 'right'}}>
-          &mdash; MDN ({getLink(key)})
+          — MDN ({getLink(key)})
         </p>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
index 01d7caa16d..18c8dd13cb 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/debugmeta.jsx
@@ -15,49 +15,50 @@ const DebugMetaInterface = React.createClass({
   getImageDetail(img, evt) {
     let name = img.name.split('/').pop();
 
-    if (name == 'dyld_sim')
-      return null; // this is only for simulator builds
+    if (name == 'dyld_sim') return null; // this is only for simulator builds
 
     let version = null;
 
-    if (Number.isInteger(img.major_version) &&
+    if (
+      Number.isInteger(img.major_version) &&
       Number.isInteger(img.minor_version) &&
-      Number.isInteger(img.revision_version)) {
-      if (img.major_version == 0 &&
-        img.minor_version == 0 &&
-        img.revision_version == 0) { // we show the version
-        version = evt.release && evt.release.version || 'unknown';
+      Number.isInteger(img.revision_version)
+    ) {
+      if (img.major_version == 0 && img.minor_version == 0 && img.revision_version == 0) {
+        // we show the version
+        version = (evt.release && evt.release.version) || 'unknown';
       } else
         version = `${img.major_version}.${img.minor_version}.${img.revision_version}`;
-    } else
-      version = img.uuid;
+    } else version = img.uuid;
 
-    if (version)
-      return [name, version];
+    if (version) return [name, version];
 
     return null;
   },
 
   render() {
     let data = this.props.data;
-    let images = data.images.map(
-        (img) => this.getImageDetail(img, this.props.event)
-    ).filter(img => img); // removes null values
+    let images = data.images
+      .map(img => this.getImageDetail(img, this.props.event))
+      .filter(img => img); // removes null values
 
     let result = null;
 
     if (images.length > 0) {
-      result = (<div>
-        <EventDataSection
+      result = (
+        <div>
+          <EventDataSection
             group={this.props.group}
             event={this.props.event}
             type="packages"
-            title={t('Images Loaded')}>
+            title={t('Images Loaded')}
+          >
             <ClippedBox>
-                <KeyValueList data={images} isSorted={false} />
+              <KeyValueList data={images} isSorted={false} />
             </ClippedBox>
-        </EventDataSection>
-      </div>);
+          </EventDataSection>
+        </div>
+      );
     }
 
     return result;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index ce191c8e85..566180f7f7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -10,14 +10,14 @@ const ExceptionInterface = React.createClass({
     group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     type: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   getInitialState() {
     return {
       stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
       newestFirst: isStacktraceNewestFirst(),
-      stackType: 'original',
+      stackType: 'original'
     };
   },
 
@@ -48,7 +48,7 @@ const ExceptionInterface = React.createClass({
         stackView={stackView}
         newestFirst={newestFirst}
         stackType={stackType}
-        onChange={(newState) => {
+        onChange={newState => {
           this.setState(newState);
         }}
       />
@@ -56,18 +56,20 @@ const ExceptionInterface = React.createClass({
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={event}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}>
+        group={group}
+        event={event}
+        type={this.props.type}
+        title={title}
+        wrapTitle={false}
+      >
         <CrashContent
           group={group}
           event={event}
           stackType={stackType}
           stackView={stackView}
           newestFirst={newestFirst}
-          exception={data} />
+          exception={data}
+        />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index f1a4ad5c03..d2b4fa8bd1 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -23,23 +23,21 @@ const ExceptionContent = React.createClass({
             <span>{exc.type}</span>
           </h5>
           {exc.value &&
-            <pre className="exc-message" style={{marginTop: 0}}>{exc.value}</pre>
-          }
+            <pre className="exc-message" style={{marginTop: 0}}>{exc.value}</pre>}
           {exc.mechanism &&
-            <ExceptionMechanism
-              data={exc.mechanism}
-              platform={this.props.platform}/>
-          }
+            <ExceptionMechanism data={exc.mechanism} platform={this.props.platform} />}
           {defined(exc.stacktrace) &&
             <StacktraceContent
-                data={this.props.type === 'original'
+              data={
+                this.props.type === 'original'
                   ? exc.stacktrace
-                  : (exc.rawStacktrace || exc.stacktrace)}
-                expandFirstFrame={excIdx === 0}
-                includeSystemFrames={stackView === 'full'}
-                platform={this.props.platform}
-                newestFirst={newestFirst} />
-          }
+                  : exc.rawStacktrace || exc.stacktrace
+              }
+              expandFirstFrame={excIdx === 0}
+              includeSystemFrames={stackView === 'full'}
+              platform={this.props.platform}
+              newestFirst={newestFirst}
+            />}
         </div>
       );
     });
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
index 9f726f60c0..fdaaf15f35 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionMechanism.jsx
@@ -5,7 +5,7 @@ import Pill from '../../pill';
 const ExceptionMechanism = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
-    platform: React.PropTypes.string,
+    platform: React.PropTypes.string
   },
 
   render() {
@@ -14,30 +14,29 @@ const ExceptionMechanism = React.createClass({
     if (this.props.data.mach_exception) {
       const {mach_exception} = this.props.data;
       if (mach_exception.exception_name) {
-        pills.push(<Pill
-          key="mach-exception"
-          name="mach exception"
-          value={mach_exception.exception_name}
-        />);
+        pills.push(
+          <Pill
+            key="mach-exception"
+            name="mach exception"
+            value={mach_exception.exception_name}
+          />
+        );
       }
       if (mach_exception.code_name) {
-        pills.push(<Pill
-          key="mach-code"
-          name="mach code"
-          value={mach_exception.code_name}
-        />);
+        pills.push(
+          <Pill key="mach-code" name="mach code" value={mach_exception.code_name} />
+        );
       }
     }
     if (this.props.data.posix_signal) {
       const {posix_signal} = this.props.data;
-      pills.push(<Pill
-        key="signal"
-        name="signal"
-        >
-        {posix_signal.name}
-        {' '}
-        <em>({posix_signal.signal})</em>
-      </Pill>);
+      pills.push(
+        <Pill key="signal" name="signal">
+          {posix_signal.name}
+          {' '}
+          <em>({posix_signal.signal})</em>
+        </Pill>
+      );
     }
 
     if (pills.length === 0) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 6540c5a182..c59c1cf380 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -16,10 +16,9 @@ export function trimPackage(pkg) {
   let pieces = pkg.split(/\//g);
   let rv = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
   let match = rv.match(/^(.*?)\.(dylib|so|a)$/);
-  return match && match[1] || rv;
+  return (match && match[1]) || rv;
 }
 
-
 const Frame = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
@@ -29,7 +28,7 @@ const Frame = React.createClass({
     isExpanded: React.PropTypes.bool,
     emptySourceNotation: React.PropTypes.bool,
     isOnlyFrame: React.PropTypes.bool,
-    timesRepeated: React.PropTypes.number,
+    timesRepeated: React.PropTypes.number
   },
 
   mixins: [
@@ -74,9 +73,9 @@ const Frame = React.createClass({
 
   isExpandable() {
     return (
-      (!this.props.isOnlyFrame && this.props.emptySourceNotation)
-      || this.hasContextSource()
-      || this.hasContextVars()
+      (!this.props.isOnlyFrame && this.props.emptySourceNotation) ||
+      this.hasContextSource() ||
+      this.hasContextVars()
     );
   },
 
@@ -90,10 +89,8 @@ const Frame = React.createClass({
       <strong>${sourceMapText}</strong><br/>`;
 
     // mapUrl not always present; e.g. uploaded source maps
-    if (data.mapUrl)
-      out += `${_.escape(data.mapUrl)}<br/>`;
-    else
-      out += `${_.escape(data.map)}<br/>`;
+    if (data.mapUrl) out += `${_.escape(data.mapUrl)}<br/>`;
+    else out += `${_.escape(data.map)}<br/>`;
 
     out += '</div>';
 
@@ -130,29 +127,40 @@ const Frame = React.createClass({
     if (defined(data.filename || data.module)) {
       // prioritize module name for Java as filename is often only basename
       let shouldPrioritizeModuleName = this.shouldPrioritizeModuleName();
-      let pathName = (
-        shouldPrioritizeModuleName ?
-        (data.module || data.filename) :
-        (data.filename || data.module));
+      let pathName = shouldPrioritizeModuleName
+        ? data.module || data.filename
+        : data.filename || data.module;
 
-      title.push((
+      title.push(
         <code key="filename" className="filename">
           <Truncate value={pathName} maxLength={100} leftTrim={true} />
         </code>
-      ));
+      );
 
       // in case we prioritized the module name but we also have a filename info
       // we want to show a litle (?) icon that on hover shows the actual filename
       if (shouldPrioritizeModuleName && data.filename) {
         title.push(
-          <a key="real-filename" className="in-at tip real-filename" data-title={_.escape(data.filename)}>
+          <a
+            key="real-filename"
+            className="in-at tip real-filename"
+            data-title={_.escape(data.filename)}
+          >
             <span className="icon-question" />
           </a>
         );
       }
 
       if (isUrl(data.absPath)) {
-        title.push(<a href={data.absPath} className="icon-open" key="share" target="_blank" onClick={this.preventCollapse}/>);
+        title.push(
+          <a
+            href={data.absPath}
+            className="icon-open"
+            key="share"
+            target="_blank"
+            onClick={this.preventCollapse}
+          />
+        );
       }
       if (defined(data.function)) {
         title.push(<span className="in-at" key="in"> in </span>);
@@ -168,21 +176,29 @@ const Frame = React.createClass({
     // TODO(mitsuhiko): only do this for events from native platforms?
     if (defined(data.lineNo) && data.lineNo != 0) {
       title.push(<span className="in-at in-at-line" key="no"> at line </span>);
-      title.push((
+      title.push(
         <code key="line" className="lineno">
           {defined(data.colNo) ? `${data.lineNo}:${data.colNo}` : data.lineNo}
         </code>
-      ));
+      );
     }
 
     if (defined(data.package)) {
       title.push(<span className="within" key="within"> within </span>);
-      title.push(<code title={data.package} className="package" key="package">{trimPackage(data.package)}</code>);
+      title.push(
+        <code title={data.package} className="package" key="package">
+          {trimPackage(data.package)}
+        </code>
+      );
     }
 
     if (defined(data.origAbsPath)) {
       title.push(
-        <a key="original-src" className="in-at tip original-src" data-title={this.renderOriginalSourceInfo()}>
+        <a
+          key="original-src"
+          className="in-at tip original-src"
+          data-title={this.renderOriginalSourceInfo()}
+        >
           <span className="icon-question" />
         </a>
       );
@@ -216,17 +232,21 @@ const Frame = React.createClass({
       context = (
         <ol start={startLineNo} className={outerClassName}>
           {defined(data.errors) &&
-          <li className={expandable ? 'expandable error' : 'error'}
-              key="errors">{data.errors.join(', ')}</li>
-          }
+            <li className={expandable ? 'expandable error' : 'error'} key="errors">
+              {data.errors.join(', ')}
+            </li>}
 
-          {data.context && contextLines.map((line, index) => {
-            return <ContextLine key={index} line={line} isActive={data.lineNo === line[0]} />;
-          })}
+          {data.context &&
+            contextLines.map((line, index) => {
+              return (
+                <ContextLine key={index} line={line} isActive={data.lineNo === line[0]} />
+              );
+            })}
 
           {hasContextVars &&
-            <ClippedBox clipHeight={100}><FrameVariables data={data.vars} key="vars" /></ClippedBox>
-          }
+            <ClippedBox clipHeight={100}>
+              <FrameVariables data={data.vars} key="vars" />
+            </ClippedBox>}
         </ol>
       );
     } else if (this.props.emptySourceNotation) {
@@ -249,21 +269,23 @@ const Frame = React.createClass({
         key="expander"
         title={t('Toggle context')}
         onClick={this.toggleContext}
-        className="btn btn-sm btn-default btn-toggle">
-        <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'}/>
+        className="btn btn-sm btn-default btn-toggle"
+      >
+        <span className={this.state.isExpanded ? 'icon-minus' : 'icon-plus'} />
       </a>
     );
   },
 
   leadsToApp() {
-    return !this.props.data.inApp && this.props.nextFrame
-      && this.props.nextFrame.inApp;
+    return !this.props.data.inApp && this.props.nextFrame && this.props.nextFrame.inApp;
   },
 
   isInlineFrame() {
-    return this.props.prevFrame &&
+    return (
+      this.props.prevFrame &&
       this.getPlatform() == (this.props.prevFrame.platform || this.props.platform) &&
-      this.props.data.instructionAddr == this.props.prevFrame.instructionAddr;
+      this.props.data.instructionAddr == this.props.prevFrame.instructionAddr
+    );
   },
 
   getFrameHint() {
@@ -298,10 +320,12 @@ const Frame = React.createClass({
   renderRepeats() {
     if (this.props.timesRepeated > 0) {
       return (
-        <span className="repeated-frames"
-          title={`Frame repeated ${this.props.timesRepeated} times`}>
-            <span className="icon-refresh"/>
-            <span>{this.props.timesRepeated}</span>
+        <span
+          className="repeated-frames"
+          title={`Frame repeated ${this.props.timesRepeated} times`}
+        >
+          <span className="icon-refresh" />
+          <span>{this.props.timesRepeated}</span>
         </span>
       );
     } else return null;
@@ -327,26 +351,24 @@ const Frame = React.createClass({
         <div className="title as-table">
           {this.renderLeadHint()}
           {defined(data.package)
-            ? (
-              <span className="package" title={data.package}>
+            ? <span className="package" title={data.package}>
                 {trimPackage(data.package)}
               </span>
-            ) : (
-              <span className="package"/>
-            )
-          }
+            : <span className="package" />}
           <span className="address">
             {data.instructionAddr}
           </span>
           <span className="symbol">
             <code>{data.function || '<unknown>'}</code>
             {data.filename &&
-              <span className="filename">{data.filename}
-                {data.lineNo ? ':' + data.lineNo : ''}</span>}
-            {hint !== null ?
-              <a key="inline" className="tip" data-title={_.escape(hint)}>
-                {' '}<span className="icon-question" />
-              </a>
+              <span className="filename">
+                {data.filename}
+                {data.lineNo ? ':' + data.lineNo : ''}
+              </span>}
+            {hint !== null
+              ? <a key="inline" className="tip" data-title={_.escape(hint)}>
+                  {' '}<span className="icon-question" />
+                </a>
               : null}
             {this.renderExpander()}
           </span>
@@ -368,10 +390,10 @@ const Frame = React.createClass({
   render() {
     let data = this.props.data;
     let className = classNames({
-      'frame': true,
+      frame: true,
       'is-expandable': this.isExpandable(),
-      'expanded': this.state.isExpanded,
-      'collapsed': !this.state.isExpanded,
+      expanded: this.state.isExpanded,
+      collapsed: !this.state.isExpanded,
       'system-frame': !data.inApp,
       'frame-errors': data.errors,
       'leads-to-app': this.leadsToApp(),
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
index a32a1ec00d..de626b05b5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/keyValueList.jsx
@@ -27,32 +27,34 @@ const KeyValueList = React.createClass({
     if (data === undefined || data === null) {
       data = [];
     } else if (!(data instanceof Array)) {
-      data = Object.keys(data).map((key) => [key, data[key]]);
+      data = Object.keys(data).map(key => [key, data[key]]);
     }
 
     data = this.props.isSorted ? _.sortBy(data, (key, value) => key) : data;
 
-    const props = (this.props.onClick) ? {onClick: this.props.onClick} : {};
+    const props = this.props.onClick ? {onClick: this.props.onClick} : {};
     return (
       <table className="table key-value" {...props}>
         <tbody>
-        {data.map(([key, value]) => {
-          if (this.props.isContextData) {
-            return [
-              <tr key={key}>
-                <td className="key">{key}</td>
-                <td className="value"><ContextData data={value}/></td>
-              </tr>
-            ];
-          } else {
-            return [
-              <tr key={key}>
-                <td className="key">{key}</td>
-                <td className="value"><pre>{deviceNameMapper('' + value || ' ')}</pre></td>
-              </tr>
-            ];
-          }
-        })}
+          {data.map(([key, value]) => {
+            if (this.props.isContextData) {
+              return [
+                <tr key={key}>
+                  <td className="key">{key}</td>
+                  <td className="value"><ContextData data={value} /></td>
+                </tr>
+              ];
+            } else {
+              return [
+                <tr key={key}>
+                  <td className="key">{key}</td>
+                  <td className="value">
+                    <pre>{deviceNameMapper('' + value || ' ')}</pre>
+                  </td>
+                </tr>
+              ];
+            }
+          })}
         </tbody>
       </table>
     );
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
index 7f069167fc..c3ff65b657 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/message.jsx
@@ -10,26 +10,32 @@ const MessageInterface = React.createClass({
     group: PropTypes.Group.isRequired,
     event: PropTypes.Event.isRequired,
     type: React.PropTypes.string.isRequired,
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
     let data = this.props.data;
     return (
       <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="message"
-          title={t('Message')}>
-        <pre className="plain" dangerouslySetInnerHTML={{
-          __html: utils.nl2br(utils.urlize(utils.escape(data.formatted || data.message)))
-        }} />
-        {data.params && !data.formatted &&
+        group={this.props.group}
+        event={this.props.event}
+        type="message"
+        title={t('Message')}
+      >
+        <pre
+          className="plain"
+          dangerouslySetInnerHTML={{
+            __html: utils.nl2br(
+              utils.urlize(utils.escape(data.formatted || data.message))
+            )
+          }}
+        />
+        {data.params &&
+          !data.formatted &&
           <div>
             <h5>{t('Params')}</h5>
             <pre className="plain">{JSON.stringify(data.params, null, 2)}</pre>
-          </div>
-        }
+          </div>}
       </EventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
index 5c9a1e48c1..c27dcd54f2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawExceptionContent.jsx
@@ -10,7 +10,7 @@ const RawExceptionContent = React.createClass({
     type: React.PropTypes.oneOf(['original', 'minified']),
     platform: React.PropTypes.string,
     eventId: React.PropTypes.string,
-    values: React.PropTypes.array.isRequired,
+    values: React.PropTypes.array.isRequired
   },
 
   mixins: [ApiMixin],
@@ -48,7 +48,7 @@ const RawExceptionContent = React.createClass({
     });
     this.api.request(this.getAppleCrashReportEndpoint(), {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           error: false,
           loading: false,
@@ -68,23 +68,31 @@ const RawExceptionContent = React.createClass({
     let {type} = this.props;
     let downloadButton;
     let children = this.props.values.map((exc, excIdx) => {
-      let content = exc.stacktrace && rawStacktraceContent(type === 'original' ? exc.stacktrace : exc.rawStacktrace, this.props.platform, exc);
+      let content =
+        exc.stacktrace &&
+        rawStacktraceContent(
+          type === 'original' ? exc.stacktrace : exc.rawStacktrace,
+          this.props.platform,
+          exc
+        );
       if (this.props.platform == 'cocoa') {
-        if (this.state.loading)
-          content = <LoadingIndicator />;
-        else if (this.state.error)
-          content = <LoadingError onRetry={this.fetchData} />;
+        if (this.state.loading) content = <LoadingIndicator />;
+        else if (this.state.error) content = <LoadingError onRetry={this.fetchData} />;
         else if (!this.state.loading && this.state.crashReport != '') {
-          content = (<ClippedBox clipHeight={250}>
-            {this.state.crashReport}
-          </ClippedBox>);
-          downloadButton = (<a
-            href={this.api.baseUrl + this.getAppleCrashReportEndpoint() + `&download=1`}
-            className="btn btn-default btn-sm pull-right">
+          content = (
+            <ClippedBox clipHeight={250}>
+              {this.state.crashReport}
+            </ClippedBox>
+          );
+          downloadButton = (
+            <a
+              href={this.api.baseUrl + this.getAppleCrashReportEndpoint() + `&download=1`}
+              className="btn btn-default btn-sm pull-right"
+            >
               Download
-          </a>);
+            </a>
+          );
         }
-
       }
 
       return (
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index eb12a61bb9..367c8e8a5f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -45,7 +45,7 @@ function getRubyFrame(frame) {
 }
 
 export function getPHPFrame(frame, idx) {
-  let funcName = (frame.function === 'null' ? '{main}' : frame.function);
+  let funcName = frame.function === 'null' ? '{main}' : frame.function;
   return `#${idx} ${frame.filename || frame.module}(${frame.lineNo}): ${funcName}`;
 }
 
@@ -68,7 +68,7 @@ export function getPythonFrame(frame) {
     result += ', in ' + frame.function;
   }
   if (defined(frame.context)) {
-    frame.context.forEach((item) => {
+    frame.context.forEach(item => {
       if (item[0] === frame.lineNo) {
         result += '\n    ' + trim(item[1]);
       }
@@ -158,7 +158,7 @@ function getFrame(frame, frameIdx, platform) {
   }
 }
 
-export default function render (data, platform, exception) {
+export default function render(data, platform, exception) {
   let firstFrameOmitted, lastFrameOmitted;
   let frames = [];
 
@@ -173,11 +173,14 @@ export default function render (data, platform, exception) {
   data.frames.forEach((frame, frameIdx) => {
     frames.push(getFrame(frame, frameIdx, platform));
     if (frameIdx === firstFrameOmitted) {
-      frames.push((
-        '.. frames ' + firstFrameOmitted + ' until ' + lastFrameOmitted + ' were omitted and not available ..'
-      ));
+      frames.push(
+        '.. frames ' +
+          firstFrameOmitted +
+          ' until ' +
+          lastFrameOmitted +
+          ' were omitted and not available ..'
+      );
     }
-
   });
 
   if (platform !== 'python') {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
index eb7382f6ca..be62ab7124 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/request.jsx
@@ -67,12 +67,19 @@ const RequestInterface = React.createClass({
     if (!this.isPartial() && isValidUrl) {
       children.push(
         <div key="view-buttons" className="btn-group">
-          <a className={(view === 'rich' ? 'active' : '') + ' btn btn-default btn-sm'}
-            onClick={this.toggleView.bind(this, 'rich')}>{
-              /* Translators: this means "rich" rendering (fancy tables) */
-              t('Rich')}</a>
-          <a className={(view === 'curl' ? 'active' : '') + ' btn btn-default btn-sm'}
-             onClick={this.toggleView.bind(this, 'curl')}><code>{'curl'}</code></a>
+          <a
+            className={(view === 'rich' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.toggleView.bind(this, 'rich')}
+          >
+            {/* Translators: this means "rich" rendering (fancy tables) */
+            t('Rich')}
+          </a>
+          <a
+            className={(view === 'curl' ? 'active' : '') + ' btn btn-default btn-sm'}
+            onClick={this.toggleView.bind(this, 'curl')}
+          >
+            <code>{'curl'}</code>
+          </a>
         </div>
       );
     }
@@ -80,36 +87,33 @@ const RequestInterface = React.createClass({
     children.push(
       <h3 key="title">
         <a href={isValidUrl ? fullUrl : null} title={fullUrl}>
-          <span className="path"><strong>{data.method || 'GET'}</strong>
+          <span className="path">
+            <strong>{data.method || 'GET'}</strong>
             <Truncate value={parsedUrl.pathname} maxLength={36} leftTrim={true} />
           </span>
           {isValidUrl &&
             <span className="external-icon">
               <em className="icon-open" />
-            </span>
-          }
+            </span>}
         </a>
         <small style={{marginLeft: 10}} className="host">{parsedUrl.hostname}</small>
       </h3>
     );
 
-    let title = (
-      <div>{children}</div>
-    );
+    let title = <div>{children}</div>;
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={evt}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}
-          className="request">
-        {view === 'curl' ?
-          <pre>{getCurlCommand(data)}</pre>
-        :
-          <RichHttpContent data={data} />
-        }
+        group={group}
+        event={evt}
+        type={this.props.type}
+        title={title}
+        wrapTitle={false}
+        className="request"
+      >
+        {view === 'curl'
+          ? <pre>{getCurlCommand(data)}</pre>
+          : <RichHttpContent data={data} />}
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
index b4ee061aa3..baaf2ac162 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/richHttpContent.jsx
@@ -23,16 +23,18 @@ const RichHttpContent = React.createClass({
    * This method accounts for this.
    */
   objectToSortedTupleArray(obj) {
-    return Object.keys(obj).reduce((out, k) => {
-      let val = obj[k];
-      return out.concat(
-        {}.toString.call(val) === '[object Array]' ?
-          val.map(v => [k, v]) : // key has multiple values (array)
-          [[k, val]]             // key has single value
-      );
-    }, []).sort(function ([keyA], [keyB]) {
-      return keyA < keyB ? -1 : 1;
-    });
+    return Object.keys(obj)
+      .reduce((out, k) => {
+        let val = obj[k];
+        return out.concat(
+          {}.toString.call(val) === '[object Array]'
+            ? val.map(v => [k, v]) // key has multiple values (array)
+            : [[k, val]] // key has single value
+        );
+      }, [])
+      .sort(function([keyA], [keyB]) {
+        return keyA < keyB ? -1 : 1;
+      });
   },
 
   getBodySection(data) {
@@ -58,48 +60,45 @@ const RichHttpContent = React.createClass({
     try {
       // Sentry API abbreviates long query string values, sometimes resulting in
       // an un-parsable querystring ... stay safe kids
-      return <KeyValueList data={this.objectToSortedTupleArray(queryString.parse(data))}/>;
+      return (
+        <KeyValueList data={this.objectToSortedTupleArray(queryString.parse(data))} />
+      );
     } catch (e) {
       return <pre>{data}</pre>;
     }
   },
 
-  render(){
+  render() {
     let data = this.props.data;
     return (
       <div>
         {data.query &&
           <ClippedBox title={t('Query String')}>
             {this.getQueryStringOrRaw(data.query)}
-          </ClippedBox>
-        }
+          </ClippedBox>}
         {data.fragment &&
           <ClippedBox title={t('Fragment')}>
             <pre>{data.fragment}</pre>
-          </ClippedBox>
-        }
+          </ClippedBox>}
 
         {data.data &&
           <ClippedBox title={t('Body')}>
             {this.getBodySection(data)}
-          </ClippedBox>
-        }
+          </ClippedBox>}
 
-        {data.cookies && !objectIsEmpty(data.cookies) &&
+        {data.cookies &&
+          !objectIsEmpty(data.cookies) &&
           <ClippedBox title={t('Cookies')} defaultCollapsed>
             <KeyValueList data={data.cookies} />
-          </ClippedBox>
-        }
+          </ClippedBox>}
         {!objectIsEmpty(data.headers) &&
           <ClippedBox title={t('Headers')}>
             <KeyValueList data={data.headers} />
-          </ClippedBox>
-        }
+          </ClippedBox>}
         {!objectIsEmpty(data.env) &&
           <ClippedBox title={t('Environment')} defaultCollapsed>
-            <KeyValueList data={this.objectToSortedTupleArray(data.env)}/>
-          </ClippedBox>
-        }
+            <KeyValueList data={this.objectToSortedTupleArray(data.env)} />
+          </ClippedBox>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index a900e63c1b..6580e4f5a7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -6,7 +6,6 @@ import {t} from '../../../locale';
 import CrashHeader from './crashHeader';
 import CrashContent from './crashContent';
 
-
 export function isStacktraceNewestFirst() {
   let user = ConfigStore.get('user');
   // user may not be authenticated
@@ -22,7 +21,6 @@ export function isStacktraceNewestFirst() {
   }
 }
 
-
 const StacktraceInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -35,7 +33,7 @@ const StacktraceInterface = React.createClass({
   getInitialState() {
     return {
       stackView: this.props.data.hasSystemFrames ? 'app' : 'full',
-      newestFirst: isStacktraceNewestFirst(),
+      newestFirst: isStacktraceNewestFirst()
     };
   },
 
@@ -60,7 +58,7 @@ const StacktraceInterface = React.createClass({
         stacktrace={data}
         stackView={stackView}
         newestFirst={newestFirst}
-        onChange={(newState) => {
+        onChange={newState => {
           this.setState(newState);
         }}
       />
@@ -68,17 +66,19 @@ const StacktraceInterface = React.createClass({
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={evt}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}>
+        group={group}
+        event={evt}
+        type={this.props.type}
+        title={title}
+        wrapTitle={false}
+      >
         <CrashContent
           group={group}
           event={evt}
           stackView={stackView}
           newestFirst={newestFirst}
-          stacktrace={data} />
+          stacktrace={data}
+        />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index d04fe2a97d..e0720acb37 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -4,7 +4,6 @@ import Frame from './frame';
 import {t} from '../../../locale';
 import OrganizationState from '../../../mixins/organizationState';
 
-
 const StacktraceContent = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
@@ -18,7 +17,7 @@ const StacktraceContent = React.createClass({
   getDefaultProps() {
     return {
       includeSystemFrames: true,
-      expandFirstFrame: true,
+      expandFirstFrame: true
     };
   },
 
@@ -31,16 +30,17 @@ const StacktraceContent = React.createClass({
       className: 'frame frames-omitted',
       key: 'omitted'
     };
-    let text = t('Frames %d until %d were omitted and not available.',
-                 firstFrameOmitted, lastFrameOmitted);
+    let text = t(
+      'Frames %d until %d were omitted and not available.',
+      firstFrameOmitted,
+      lastFrameOmitted
+    );
     return <li {...props}>{text}</li>;
   },
 
   frameIsVisible(frame, nextFrame) {
     return (
-      this.props.includeSystemFrames ||
-      frame.inApp ||
-      (nextFrame && nextFrame.inApp)
+      this.props.includeSystemFrames || frame.inApp || (nextFrame && nextFrame.inApp)
     );
   },
 
@@ -70,15 +70,16 @@ const StacktraceContent = React.createClass({
     data.frames.forEach((frame, frameIdx) => {
       let prevFrame = data.frames[frameIdx - 1];
       let nextFrame = data.frames[frameIdx + 1];
-      let repeatedFrame = nextFrame &&
-       frame.lineNo === nextFrame.lineNo &&
-       frame.function === nextFrame.function;
+      let repeatedFrame =
+        nextFrame &&
+        frame.lineNo === nextFrame.lineNo &&
+        frame.function === nextFrame.function;
 
       if (repeatedFrame) {
         nRepeats++;
       }
 
-      if (this.frameIsVisible(frame, nextFrame) && !repeatedFrame ){
+      if (this.frameIsVisible(frame, nextFrame) && !repeatedFrame) {
         frames.push(
           <Frame
             key={frameIdx}
@@ -89,17 +90,17 @@ const StacktraceContent = React.createClass({
             nextFrame={nextFrame}
             prevFrame={prevFrame}
             platform={this.props.platform}
-            timesRepeated={nRepeats}/>
+            timesRepeated={nRepeats}
+          />
         );
       }
 
-      if(!repeatedFrame){
+      if (!repeatedFrame) {
         nRepeats = 0;
       }
 
       if (frameIdx === firstFrameOmitted) {
-        frames.push(this.renderOmittedFrames(
-          firstFrameOmitted, lastFrameOmitted));
+        frames.push(this.renderOmittedFrames(firstFrameOmitted, lastFrameOmitted));
       }
     });
     if (this.props.newestFirst) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index f342af038d..d2b5c3f0f2 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -22,10 +22,11 @@ const TemplateInterface = React.createClass({
         group={this.props.group}
         event={this.props.event}
         type={this.props.type}
-        title={<div>{t('Template')}</div>}>
+        title={<div>{t('Template')}</div>}
+      >
         <div className="traceback no-exception">
           <ul>
-            <Frame data={this.props.data} isExpanded={true}/>
+            <Frame data={this.props.data} isExpanded={true} />
           </ul>
         </div>
       </GroupEventDataSection>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index 6e5f20eab1..16103c7c85 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -78,11 +78,13 @@ function getThreadTitle(thread, event, simplified) {
       let frame = findRelevantFrame(stacktrace);
       bits.push(' — ');
       bits.push(
-        <em key="location">{frame.filename
-          ? trimFilename(frame.filename)
-          : frame.package
-            ? trimPackage(frame.package)
-            : frame.module ? frame.module : '<unknown>'}</em>
+        <em key="location">
+          {frame.filename
+            ? trimFilename(frame.filename)
+            : frame.package
+                ? trimPackage(frame.package)
+                : frame.module ? frame.module : '<unknown>'}
+        </em>
       );
     }
 
@@ -102,7 +104,7 @@ function getThreadTitle(thread, event, simplified) {
 
 function getIntendedStackView(thread, event) {
   const stacktrace = findThreadStacktrace(thread, event, false);
-  return (stacktrace && stacktrace.hasSystemFrames) ? 'app' : 'full';
+  return stacktrace && stacktrace.hasSystemFrames ? 'app' : 'full';
 }
 
 function findBestThread(threads) {
@@ -119,7 +121,6 @@ function findBestThread(threads) {
   return threads[0];
 }
 
-
 const Thread = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -129,7 +130,7 @@ const Thread = React.createClass({
     stackType: React.PropTypes.string,
     newestFirst: React.PropTypes.bool,
     exception: React.PropTypes.object,
-    stacktrace: React.PropTypes.object,
+    stacktrace: React.PropTypes.object
   },
 
   renderMissingStacktrace() {
@@ -139,9 +140,7 @@ const Thread = React.createClass({
           <li className="frame missing-frame">
             <div className="title">
               <span className="informal">
-                {this.props.data.crashed
-                  ? 'Thread Crashed'
-                  : 'No or unknown stacktrace'}
+                {this.props.data.crashed ? 'Thread Crashed' : 'No or unknown stacktrace'}
               </span>
             </div>
           </li>
@@ -156,27 +155,37 @@ const Thread = React.createClass({
   },
 
   render() {
-    const {data, group, event, stackView, stackType,
-      newestFirst, exception, stacktrace} = this.props;
+    const {
+      data,
+      group,
+      event,
+      stackView,
+      stackType,
+      newestFirst,
+      exception,
+      stacktrace
+    } = this.props;
     return (
       <div className="thread">
         <Pills>
           <Pill name="id" value={data.id} />
           <Pill name="name" value={data.name} />
           <Pill name="was active" value={data.current} />
-          <Pill name="crashed" className={data.crashed ? 'false' : 'true'
-            }>{data.crashed ? 'yes' : 'no'}</Pill>
+          <Pill name="crashed" className={data.crashed ? 'false' : 'true'}>
+            {data.crashed ? 'yes' : 'no'}
+          </Pill>
         </Pills>
-        {this.hasMissingStacktrace() ?
-          this.renderMissingStacktrace() :
-          <CrashContent
-            group={group}
-            event={event}
-            stackType={stackType}
-            stackView={stackView}
-            newestFirst={newestFirst}
-            exception={exception}
-            stacktrace={stacktrace} />}
+        {this.hasMissingStacktrace()
+          ? this.renderMissingStacktrace()
+          : <CrashContent
+              group={group}
+              event={event}
+              stackType={stackType}
+              stackView={stackView}
+              newestFirst={newestFirst}
+              exception={exception}
+              stacktrace={stacktrace}
+            />}
       </div>
     );
   }
@@ -197,7 +206,7 @@ const ThreadsInterface = React.createClass({
       activeThread: thread,
       stackView: getIntendedStackView(thread, this.props.event),
       stackType: 'original',
-      newestFirst: isStacktraceNewestFirst(),
+      newestFirst: isStacktraceNewestFirst()
     };
   },
 
@@ -208,8 +217,11 @@ const ThreadsInterface = React.createClass({
   },
 
   getStacktrace() {
-    return findThreadStacktrace(this.state.activeThread, this.props.event,
-      this.state.stackType !== 'original');
+    return findThreadStacktrace(
+      this.state.activeThread,
+      this.props.event,
+      this.state.stackType !== 'original'
+    );
   },
 
   getException() {
@@ -224,7 +236,7 @@ const ThreadsInterface = React.createClass({
     this.setState({
       activeThread: thread,
       stackView: newStackView,
-      stackType: 'original',
+      stackType: 'original'
     });
   },
 
@@ -237,16 +249,18 @@ const ThreadsInterface = React.createClass({
 
     let threadSelector = (
       <div className="pull-left btn-group">
-        <DropdownLink 
+        <DropdownLink
           btnGroup={true}
           caret={true}
           className="btn btn-default btn-sm"
-          title={getThreadTitle(activeThread, this.props.event, true)}>
+          title={getThreadTitle(activeThread, this.props.event, true)}
+        >
           {this.props.data.values.map((thread, idx) => {
             return (
               <MenuItem key={idx} noAnchor={true}>
-                <a onClick={this.onSelectNewThread.bind(this, thread)
-                  }>{getThreadTitle(thread, this.props.event, false)}</a>
+                <a onClick={this.onSelectNewThread.bind(this, thread)}>
+                  {getThreadTitle(thread, this.props.event, false)}
+                </a>
               </MenuItem>
             );
           })}
@@ -266,18 +280,20 @@ const ThreadsInterface = React.createClass({
         stackView={stackView}
         newestFirst={newestFirst}
         stackType={stackType}
-        onChange={(newState) => {
+        onChange={newState => {
           this.setState(newState);
-        }} />
+        }}
+      />
     );
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={evt}
-          type={this.props.type}
-          title={title}
-          wrapTitle={false}>
+        group={group}
+        event={evt}
+        type={this.props.type}
+        title={title}
+        wrapTitle={false}
+      >
         <Thread
           group={group}
           data={activeThread}
@@ -286,7 +302,8 @@ const ThreadsInterface = React.createClass({
           stackType={stackType}
           stacktrace={stacktrace}
           event={evt}
-          newestFirst={newestFirst} />
+          newestFirst={newestFirst}
+        />
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
index ce26232bc7..6d6856ac32 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/utils.jsx
@@ -14,15 +14,16 @@ export function getCurlCommand(data) {
   }
 
   // TODO(benvinegar): just gzip? what about deflate?
-  let compressed = data.headers.find(h => h[0] === 'Accept-Encoding' && h[1].indexOf('gzip') !== -1);
+  let compressed = data.headers.find(
+    h => h[0] === 'Accept-Encoding' && h[1].indexOf('gzip') !== -1
+  );
   if (compressed) {
     result += ' \\\n --compressed';
   }
 
   // sort headers
-  let headers = data.headers.sort(function (a, b) {
-    return a[0] === b[0] ? 0 :
-      a[0] < b[0] ? -1 : 1;
+  let headers = data.headers.sort(function(a, b) {
+    return a[0] === b[0] ? 0 : a[0] < b[0] ? -1 : 1;
   });
 
   for (let header of headers) {
diff --git a/src/sentry/static/sentry/app/components/events/packageData.jsx b/src/sentry/static/sentry/app/components/events/packageData.jsx
index b9b1b04d11..e8b929b584 100644
--- a/src/sentry/static/sentry/app/components/events/packageData.jsx
+++ b/src/sentry/static/sentry/app/components/events/packageData.jsx
@@ -22,10 +22,11 @@ const EventPackageData = React.createClass({
 
     return (
       <EventDataSection
-          group={this.props.group}
-          event={this.props.event}
-          type="packages"
-          title={t('Packages')}>
+        group={this.props.group}
+        event={this.props.event}
+        type="packages"
+        title={t('Packages')}
+      >
         <ClippedBox>
           <KeyValueList data={packages} />
         </ClippedBox>
diff --git a/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx b/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
index e924028862..073e22b180 100644
--- a/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
+++ b/src/sentry/static/sentry/app/components/events/reprocessingHint.jsx
@@ -15,16 +15,13 @@ const ReprocessingHint = React.createClass({
     projectId: React.PropTypes.string.isRequired
   },
 
-  mixins: [
-    ProjectState,
-    ApiMixin
-  ],
+  mixins: [ProjectState, ApiMixin],
 
-  getInitialState(){
+  getInitialState() {
     return {
       hideHint: false,
       loading: true,
-      projectSettings: null,
+      projectSettings: null
     };
   },
 
@@ -50,17 +47,17 @@ const ReprocessingHint = React.createClass({
       return;
     }
     this.setState({
-      loading: true,
+      loading: true
     });
     this.api.request(`/projects/${this.props.orgId}/${this.props.projectId}/`, {
       success: (data, _, jqXHR) => {
         this.setState({
-          projectSettings: data.options,
+          projectSettings: data.options
         });
       },
       complete: () => {
         this.setState({
-          loading: false,
+          loading: false
         });
       }
     });
@@ -78,22 +75,21 @@ const ReprocessingHint = React.createClass({
   renderHint() {
     let link = `/${this.props.orgId}/${this.props.projectId}/settings/processing-issues/`;
 
-    return(
+    return (
       <EventDataSection
-            group={this.props.group}
-            event={this.props.event}
-            type="hint"
-            className="errors hint">
-            <span className="icon icon-question event" />
-          <p>
-            <a className="pull-right" onClick={this.hide}>{t('Dismiss')}</a>
-            {
-              t('Errors like these can be fixed with reprocessing')
-            }
-            {' '}
-            <small><a style={{marginLeft: 10}} href={link}>{t('Show me')}</a></small>
-          </p>
-        </EventDataSection>
+        group={this.props.group}
+        event={this.props.event}
+        type="hint"
+        className="errors hint"
+      >
+        <span className="icon icon-question event" />
+        <p>
+          <a className="pull-right" onClick={this.hide}>{t('Dismiss')}</a>
+          {t('Errors like these can be fixed with reprocessing')}
+          {' '}
+          <small><a style={{marginLeft: 10}} href={link}>{t('Show me')}</a></small>
+        </p>
+      </EventDataSection>
     );
   },
 
@@ -106,14 +102,16 @@ const ReprocessingHint = React.createClass({
       shouldRender = false;
     }
 
-    if (this.state.projectSettings !== null &&
+    if (
+      this.state.projectSettings !== null &&
       (this.state.projectSettings['sentry:reprocessing_show_hint'] === false ||
-      this.state.projectSettings['sentry:reprocessing_active'] === true)) {
+        this.state.projectSettings['sentry:reprocessing_active'] === true)
+    ) {
       shouldRender = false;
     }
 
     let reprocessingFixable = false;
-    errors.map((error) => {
+    errors.map(error => {
       if (error.type == 'native_missing_dsym') {
         reprocessingFixable = true;
       }
@@ -122,7 +120,11 @@ const ReprocessingHint = React.createClass({
     shouldRender = shouldRender && reprocessingFixable;
 
     return (
-      <ReactCSSTransitionGroup transitionName="hint" transitionEnterTimeout={500} transitionLeaveTimeout={500}>
+      <ReactCSSTransitionGroup
+        transitionName="hint"
+        transitionEnterTimeout={500}
+        transitionLeaveTimeout={500}
+      >
         {shouldRender ? this.renderHint() : null}
       </ReactCSSTransitionGroup>
     );
diff --git a/src/sentry/static/sentry/app/components/events/sdk.jsx b/src/sentry/static/sentry/app/components/events/sdk.jsx
index 80b05ce581..cf8a96a64f 100644
--- a/src/sentry/static/sentry/app/components/events/sdk.jsx
+++ b/src/sentry/static/sentry/app/components/events/sdk.jsx
@@ -7,7 +7,7 @@ import {t} from '../../locale';
 const EventSdk = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
+    event: PropTypes.Event.isRequired
   },
 
   render() {
@@ -16,11 +16,12 @@ const EventSdk = React.createClass({
 
     return (
       <GroupEventDataSection
-          group={group}
-          event={event}
-          type="sdk"
-          title={t('SDK')}
-          wrapTitle={true}>
+        group={group}
+        event={event}
+        type="sdk"
+        title={t('SDK')}
+        wrapTitle={true}
+      >
         <table className="table key-value">
           <tbody>
             <tr key="name">
@@ -35,8 +36,7 @@ const EventSdk = React.createClass({
               <tr key="clientIP">
                 <td className="key">Client IP</td>
                 <td className="value"><pre>{data.clientIP}</pre></td>
-              </tr>
-            }
+              </tr>}
           </tbody>
         </table>
       </GroupEventDataSection>
diff --git a/src/sentry/static/sentry/app/components/events/userReport.jsx b/src/sentry/static/sentry/app/components/events/userReport.jsx
index 0db06fb3ae..c9598ec0cb 100644
--- a/src/sentry/static/sentry/app/components/events/userReport.jsx
+++ b/src/sentry/static/sentry/app/components/events/userReport.jsx
@@ -3,7 +3,6 @@ import Avatar from '../../components/avatar';
 import TimeSince from '../../components/timeSince';
 import utils from '../../utils';
 
-
 const EventUserReport = React.createClass({
   propTypes: {
     event: React.PropTypes.object.isRequired
@@ -20,8 +19,14 @@ const EventUserReport = React.createClass({
               <Avatar user={report} size={64} className="avatar" />
               <div className="activity-bubble">
                 <TimeSince date={report.dateCreated} />
-                <div className="activity-author">{report.name} <small>{report.email}</small></div>
-                <p dangerouslySetInnerHTML={{__html: utils.nl2br(utils.urlize(utils.escape(report.comments)))}} />
+                <div className="activity-author">
+                  {report.name} <small>{report.email}</small>
+                </div>
+                <p
+                  dangerouslySetInnerHTML={{
+                    __html: utils.nl2br(utils.urlize(utils.escape(report.comments)))
+                  }}
+                />
               </div>
             </li>
           </ul>
diff --git a/src/sentry/static/sentry/app/components/fileChange.jsx b/src/sentry/static/sentry/app/components/fileChange.jsx
index ec535c9d30..f034077580 100644
--- a/src/sentry/static/sentry/app/components/fileChange.jsx
+++ b/src/sentry/static/sentry/app/components/fileChange.jsx
@@ -9,19 +9,19 @@ const FileChange = React.createClass({
   propTypes: {
     filename: React.PropTypes.string.isRequired,
     authors: React.PropTypes.array.isRequired,
-    types: React.PropTypes.object.isRequired,
+    types: React.PropTypes.object.isRequired
   },
 
   mixins: [
     ApiMixin,
     TooltipMixin({
       selector: '.tip'
-    }),
+    })
   ],
 
   getInitialState() {
     return {
-      loading: true,
+      loading: true
     };
   },
 
@@ -32,17 +32,20 @@ const FileChange = React.createClass({
       <li className="list-group-item list-group-item-sm release-file-change">
         <div className="row row-flex row-center-vertically">
           <div className="col-sm-9 truncate">
-            <IconFileGeneric className="icon-file-generic" size={15}/>
+            <IconFileGeneric className="icon-file-generic" size={15} />
             <span className="file-name">{filename}</span>
           </div>
           <div className="col-sm-3 avatar-grid align-right">
-          {authors.map(author => {
+            {authors.map(author => {
               return (
-                <span className="avatar-grid-item m-b-0 tip"
-                     title={author.name + ' ' + author.email}>
-                  <Avatar user={author}/>
-                </span>);
-          })}
+                <span
+                  className="avatar-grid-item m-b-0 tip"
+                  title={author.name + ' ' + author.email}
+                >
+                  <Avatar user={author} />
+                </span>
+              );
+            })}
           </div>
           {/* <div className="col-sm-3">
           {types.map(type => {
diff --git a/src/sentry/static/sentry/app/components/fileSize.jsx b/src/sentry/static/sentry/app/components/fileSize.jsx
index f988df7c84..3613df4519 100644
--- a/src/sentry/static/sentry/app/components/fileSize.jsx
+++ b/src/sentry/static/sentry/app/components/fileSize.jsx
@@ -7,11 +7,8 @@ const FileSize = React.createClass({
   },
 
   render: function() {
-    return (
-      <span>{formatBytes(this.props.bytes)}</span>
-    );
+    return <span>{formatBytes(this.props.bytes)}</span>;
   }
 });
 
 export default FileSize;
-
diff --git a/src/sentry/static/sentry/app/components/flotChart.jsx b/src/sentry/static/sentry/app/components/flotChart.jsx
index c76c935d28..efb9875f63 100644
--- a/src/sentry/static/sentry/app/components/flotChart.jsx
+++ b/src/sentry/static/sentry/app/components/flotChart.jsx
@@ -10,13 +10,13 @@ require('flot/jquery.flot.time');
 require('flot-tooltip/jquery.flot.tooltip');
 
 let timeUnitSize = {
-  'second': 1000,
-  'minute': 60 * 1000,
-  'hour': 60 * 60 * 1000,
-  'day': 24 * 60 * 60 * 1000,
-  'month': 30 * 24 * 60 * 60 * 1000,
-  'quarter': 3 * 30 * 24 * 60 * 60 * 1000,
-  'year': 365.2425 * 24 * 60 * 60 * 1000
+  second: 1000,
+  minute: 60 * 1000,
+  hour: 60 * 60 * 1000,
+  day: 24 * 60 * 60 * 1000,
+  month: 30 * 24 * 60 * 60 * 1000,
+  quarter: 3 * 30 * 24 * 60 * 60 * 1000,
+  year: 365.2425 * 24 * 60 * 60 * 1000
 };
 
 let numberWithCommas = function(x) {
@@ -26,11 +26,19 @@ let numberWithCommas = function(x) {
 let buildTooltipHandler = function(series) {
   return function(_l, xval, _y, flotItem) {
     let yval;
-    let content = '<h6>' + moment(parseInt(xval, 10)).format('MMMM D YYYY HH:mm z') + '</h6>';
+    let content =
+      '<h6>' + moment(parseInt(xval, 10)).format('MMMM D YYYY HH:mm z') + '</h6>';
     for (let i = 0; i < series.length; i++) {
       // we're assuming series are identical
       yval = numberWithCommas(series[i].data[flotItem.dataIndex][1] || 0);
-      content += '<strong style="color:' + series[i].color + '">' + series[i].label + ':</strong> ' + yval + '<br>';
+      content +=
+        '<strong style="color:' +
+        series[i].color +
+        '">' +
+        series[i].label +
+        ':</strong> ' +
+        yval +
+        '<br>';
     }
     return content;
   };
@@ -102,12 +110,12 @@ const FlotChart = React.createClass({
       yaxis: {
         min: 0,
         minTickSize: 1,
-        tickFormatter: (value) => {
+        tickFormatter: value => {
           if (value > 999999) {
-            return (value / 1000000) + 'mm';
+            return value / 1000000 + 'mm';
           }
           if (value > 999) {
-            return (value / 1000) + 'k';
+            return value / 1000 + 'k';
           }
           return value;
         }
@@ -130,7 +138,7 @@ const FlotChart = React.createClass({
         noColumns: series.length,
         position: 'nw'
       },
-      lines: {show: false},
+      lines: {show: false}
     };
 
     let chart = ReactDOM.findDOMNode(this.refs.chartNode);
@@ -142,7 +150,8 @@ const FlotChart = React.createClass({
       <figure
         className={this.props.className || 'chart'}
         style={this.props.style}
-        ref="chartNode" />
+        ref="chartNode"
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/footer.jsx b/src/sentry/static/sentry/app/components/footer.jsx
index fe76d8b7a0..7566a74afa 100644
--- a/src/sentry/static/sentry/app/components/footer.jsx
+++ b/src/sentry/static/sentry/app/components/footer.jsx
@@ -7,12 +7,12 @@ const Footer = React.createClass({
   getInitialState() {
     // Allow injection via getsentry et all
     let hooks = [];
-    HookStore.get('footer').forEach((cb) => {
+    HookStore.get('footer').forEach(cb => {
       hooks.push(cb());
     });
 
     return {
-      hooks: hooks,
+      hooks: hooks
     };
   },
 
@@ -24,15 +24,20 @@ const Footer = React.createClass({
           <div className="pull-right">
             <a className="hidden-xs" href="/api/">{t('API')}</a>
             <a href="/docs/">{t('Docs')}</a>
-            <a  className="hidden-xs" href="https://github.com/getsentry/sentry" rel="noreferrer">{t('Contribute')}</a>
+            <a
+              className="hidden-xs"
+              href="https://github.com/getsentry/sentry"
+              rel="noreferrer"
+            >
+              {t('Contribute')}
+            </a>
             {config.isOnPremise &&
-              <a className="hidden-xs" href="/out/">{t('Migrate to SaaS')}</a>
-            }
+              <a className="hidden-xs" href="/out/">{t('Migrate to SaaS')}</a>}
           </div>
           <div className="version pull-left">
             {'Sentry'} {config.version.current}
           </div>
-          <a href="/" className="icon-sentry-logo"></a>
+          <a href="/" className="icon-sentry-logo" />
           {this.state.hooks}
         </div>
       </footer>
diff --git a/src/sentry/static/sentry/app/components/forms/booleanField.jsx b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
index 878c8a839e..ba8159263c 100644
--- a/src/sentry/static/sentry/app/components/forms/booleanField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/booleanField.jsx
@@ -11,24 +11,28 @@ export default class BooleanField extends InputField {
   }
 
   onChange(e) {
-    this.setState({
-      value: e.target.checked,
-    }, () => {
-      this.props.onChange(this.state.value);
-    });
+    this.setState(
+      {
+        value: e.target.checked
+      },
+      () => {
+        this.props.onChange(this.state.value);
+      }
+    );
   }
 
   getField() {
     return (
-      <input id={this.getId()}
-          type={this.getType()}
-          onChange={this.onChange.bind(this)}
-          disabled={this.props.disabled}
-          defaultChecked={this.state.value} />
+      <input
+        id={this.getId()}
+        type={this.getType()}
+        onChange={this.onChange.bind(this)}
+        disabled={this.props.disabled}
+        defaultChecked={this.state.value}
+      />
     );
   }
 
-
   render() {
     let className = this.getClassName();
     if (this.props.error) {
@@ -40,18 +44,14 @@ export default class BooleanField extends InputField {
           <label className="control-label">
             {this.getField()}
             {this.props.label}
-            {this.props.disabled && this.props.disabledReason &&
+            {this.props.disabled &&
+              this.props.disabledReason &&
               <span className="disabled-indicator tip" title={this.props.disabledReason}>
                 <span className="icon-question" />
-              </span>
-            }
+              </span>}
           </label>
-          {defined(this.props.help) &&
-            <p className="help-block">{this.props.help}</p>
-          }
-          {this.props.error &&
-            <p className="error">{this.props.error}</p>
-          }
+          {defined(this.props.help) && <p className="help-block">{this.props.help}</p>}
+          {this.props.error && <p className="error">{this.props.error}</p>}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/forms/form.jsx b/src/sentry/static/sentry/app/components/forms/form.jsx
index 6e4b4af7a5..15b96c2cd4 100644
--- a/src/sentry/static/sentry/app/components/forms/form.jsx
+++ b/src/sentry/static/sentry/app/components/forms/form.jsx
@@ -29,9 +29,13 @@ const Form = React.createClass({
       <form onSubmit={this.onSubmit}>
         {this.props.children}
         <div className={this.props.footerClass} style={{marginTop: 25}}>
-          <button className="btn btn-primary"
-                  disabled={this.props.submitDisabled}
-                  type="submit">{this.props.submitLabel}</button>
+          <button
+            className="btn btn-primary"
+            disabled={this.props.submitDisabled}
+            type="submit"
+          >
+            {this.props.submitLabel}
+          </button>
           {this.props.extraButton}
         </div>
       </form>
diff --git a/src/sentry/static/sentry/app/components/forms/formField.jsx b/src/sentry/static/sentry/app/components/forms/formField.jsx
index d6e4b8d821..c65950f5d6 100644
--- a/src/sentry/static/sentry/app/components/forms/formField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/formField.jsx
@@ -14,19 +14,16 @@ FormField.propTypes = {
   defaultValue: React.PropTypes.any,
   disabled: React.PropTypes.bool,
   error: React.PropTypes.string,
-  help: React.PropTypes.oneOfType([
-    React.PropTypes.string,
-    React.PropTypes.element,
-  ]),
+  help: React.PropTypes.oneOfType([React.PropTypes.string, React.PropTypes.element]),
   onChange: React.PropTypes.func,
   required: React.PropTypes.bool,
-  value: React.PropTypes.any,
+  value: React.PropTypes.any
 };
 
 FormField.defaultProps = {
   disabled: false,
-  onChange: (value) => {},
-  required: false,
+  onChange: value => {},
+  required: false
 };
 
 export default FormField;
diff --git a/src/sentry/static/sentry/app/components/forms/genericField.jsx b/src/sentry/static/sentry/app/components/forms/genericField.jsx
index ba3bdf6e22..883428f6b4 100644
--- a/src/sentry/static/sentry/app/components/forms/genericField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/genericField.jsx
@@ -27,11 +27,9 @@ class GenericField extends React.Component {
       disabled: config.readonly,
       key: config.name,
       formState: this.props.formState,
-      help: (
-        (defined(config.help) && config.help !== '')
-          ? <span dangerouslySetInnerHTML={{__html: config.help}}/>
-          : null
-      ),
+      help: defined(config.help) && config.help !== ''
+        ? <span dangerouslySetInnerHTML={{__html: config.help}} />
+        : null
     });
 
     switch (config.type) {
@@ -68,11 +66,11 @@ class GenericField extends React.Component {
 }
 
 GenericField.propTypes = {
-    config: React.PropTypes.object.isRequired,
-    formData: React.PropTypes.object,
-    formErrors: React.PropTypes.object,
-    formState: React.PropTypes.string.isRequired,
-    onChange: React.PropTypes.func,
+  config: React.PropTypes.object.isRequired,
+  formData: React.PropTypes.object,
+  formErrors: React.PropTypes.object,
+  formState: React.PropTypes.string.isRequired,
+  onChange: React.PropTypes.func
 };
 
 export default GenericField;
diff --git a/src/sentry/static/sentry/app/components/forms/index.jsx b/src/sentry/static/sentry/app/components/forms/index.jsx
index 2caf80c583..a09d80eb06 100644
--- a/src/sentry/static/sentry/app/components/forms/index.jsx
+++ b/src/sentry/static/sentry/app/components/forms/index.jsx
@@ -2,7 +2,7 @@ const FormState = {
   LOADING: 'Loading',
   READY: 'Ready',
   SAVING: 'Saving',
-  ERROR: 'Error',
+  ERROR: 'Error'
 };
 
 export {default as BooleanField} from './booleanField';
@@ -18,4 +18,4 @@ export {default as Select2Field} from './select2Field';
 export {default as TextField} from './textField';
 export {default as TextareaField} from './textareaField';
 
-export {FormState as FormState};
+export {FormState};
diff --git a/src/sentry/static/sentry/app/components/forms/inputField.jsx b/src/sentry/static/sentry/app/components/forms/inputField.jsx
index 1ee1810ccf..5e4451e38f 100644
--- a/src/sentry/static/sentry/app/components/forms/inputField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/inputField.jsx
@@ -15,7 +15,7 @@ class InputField extends FormField {
   }
 
   valueFromProps(props) {
-    return defined(props.value) ? props.value : (props.defaultValue || '');
+    return defined(props.value) ? props.value : props.defaultValue || '';
   }
 
   // XXX(dcramer): this comes from TooltipMixin
@@ -29,21 +29,22 @@ class InputField extends FormField {
   }
 
   attachTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip();
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip();
   }
 
   removeTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip('destroy');
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip('destroy');
   }
 
   onChange(e) {
-    this.setState({
-      value: e.target.value,
-    }, () => {
-      this.props.onChange(this.state.value);
-    });
+    this.setState(
+      {
+        value: e.target.value
+      },
+      () => {
+        this.props.onChange(this.state.value);
+      }
+    );
   }
 
   getId() {
@@ -56,17 +57,19 @@ class InputField extends FormField {
 
   getField() {
     return (
-      <input id={this.getId()}
-          type={this.getType()}
-          className="form-control"
-          placeholder={this.props.placeholder}
-          onChange={this.onChange}
-          disabled={this.props.disabled}
-          ref="input"
-          required={this.props.required}
-          value={this.state.value}
-          style={this.props.inputStyle}
-          {...this.getAttributes()} />
+      <input
+        id={this.getId()}
+        type={this.getType()}
+        className="form-control"
+        placeholder={this.props.placeholder}
+        onChange={this.onChange}
+        disabled={this.props.disabled}
+        ref="input"
+        required={this.props.required}
+        value={this.state.value}
+        style={this.props.inputStyle}
+        {...this.getAttributes()}
+      />
     );
   }
 
@@ -83,29 +86,28 @@ class InputField extends FormField {
       <div className={className}>
         <div className="controls">
           {this.props.label &&
-            <label htmlFor={this.getId()} className="control-label">{this.props.label}</label>
-          }
+            <label htmlFor={this.getId()} className="control-label">
+              {this.props.label}
+            </label>}
           {this.getField()}
-          {this.props.disabled && this.props.disabledReason &&
-            <span className="disabled-indicator tip"
-                  title={this.props.disabledReason}>
+          {this.props.disabled &&
+            this.props.disabledReason &&
+            <span className="disabled-indicator tip" title={this.props.disabledReason}>
               <span className="icon-question" />
-            </span>
-          }
-          {defined(this.props.help) &&
-            <p className="help-block">{this.props.help}</p>
-          }
-          {this.props.error &&
-            <p className="error">{this.props.error}</p>
-          }
+            </span>}
+          {defined(this.props.help) && <p className="help-block">{this.props.help}</p>}
+          {this.props.error && <p className="error">{this.props.error}</p>}
         </div>
       </div>
     );
   }
 }
 
-InputField.propTypes = Object.assign({
-  placeholder: React.PropTypes.string,
-}, FormField.propTypes);
+InputField.propTypes = Object.assign(
+  {
+    placeholder: React.PropTypes.string
+  },
+  FormField.propTypes
+);
 
 export default InputField;
diff --git a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
index 4e696dc61e..98ed859fbb 100644
--- a/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/multipleCheckboxField.jsx
@@ -21,25 +21,24 @@ export default class MultipleCheckboxField extends FormField {
   }
 
   attachTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip();
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip();
   }
 
   removeTooltips() {
-    jQuery('.tip', ReactDOM.findDOMNode(this))
-      .tooltip('destroy');
+    jQuery('.tip', ReactDOM.findDOMNode(this)).tooltip('destroy');
   }
 
   onChange(value, e) {
-    if (e.target.checked)
-      this.state.value.add(value);
-    else
-      this.state.value.delete(value);
-    this.setState({
-      value: this.state.value,
-    }, () => {
-      this.props.onChange(Array.from(this.state.value.keys()));
-    });
+    if (e.target.checked) this.state.value.add(value);
+    else this.state.value.delete(value);
+    this.setState(
+      {
+        value: this.state.value
+      },
+      () => {
+        this.props.onChange(Array.from(this.state.value.keys()));
+      }
+    );
   }
 
   render() {
@@ -51,24 +50,24 @@ export default class MultipleCheckboxField extends FormField {
       <div className={className}>
         <label className="control-label">
           {this.props.label}
-          {this.props.disabled && this.props.disabledReason &&
+          {this.props.disabled &&
+            this.props.disabledReason &&
             <span className="disabled-indicator tip" title={this.props.disabledReason}>
               <span className="icon-question" />
-            </span>
-          }
+            </span>}
         </label>
-        {this.props.help &&
-          <p className="help-block">{this.props.help}</p>
-        }
+        {this.props.help && <p className="help-block">{this.props.help}</p>}
         <div className="controls control-list">
-          {this.props.choices.map((choice) => {
+          {this.props.choices.map(choice => {
             return (
               <label className="checkbox" key={choice[0]}>
-                <input type="checkbox"
-                       value={choice[0]}
-                       onChange={this.onChange.bind(this, choice[0])}
-                       disabled={this.props.disabled}
-                       checked={this.state.value.has(choice[0])} />
+                <input
+                  type="checkbox"
+                  value={choice[0]}
+                  onChange={this.onChange.bind(this, choice[0])}
+                  disabled={this.props.disabled}
+                  checked={this.state.value.has(choice[0])}
+                />
                 {choice[1]}
               </label>
             );
diff --git a/src/sentry/static/sentry/app/components/forms/numberField.jsx b/src/sentry/static/sentry/app/components/forms/numberField.jsx
index 27d74af6c2..bf77e406e0 100644
--- a/src/sentry/static/sentry/app/components/forms/numberField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/numberField.jsx
@@ -7,8 +7,8 @@ export default class NumberField extends InputField {
 
   getAttributes() {
     return {
-        min: this.props.min || undefined,
-        max: this.props.max || undefined,
+      min: this.props.min || undefined,
+      max: this.props.max || undefined
     };
   }
 }
diff --git a/src/sentry/static/sentry/app/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
index 95cea9c8ee..930d1f6eed 100644
--- a/src/sentry/static/sentry/app/components/forms/passwordField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
@@ -18,17 +18,22 @@ class PasswordField extends InputField {
 
   cancelEdit(ev) {
     ev.preventDefault();
-    this.setState({
-      value: '',
-      editing: false
-    }, () => {
-      this.props.onChange('');
-    });
+    this.setState(
+      {
+        value: '',
+        editing: false
+      },
+      () => {
+        this.props.onChange('');
+      }
+    );
   }
 
   componentWillReceiveProps(nextProps) {
     // close edit mode after successful save
-    if (this.props.formState === FormState.SAVING && nextProps.formState === FormState.READY) {
+    if (
+      this.props.formState === FormState.SAVING && nextProps.formState === FormState.READY
+    ) {
       this.setState({
         editing: false
       });
@@ -61,9 +66,10 @@ class PasswordField extends InputField {
     } else {
       return (
         <div className="form-password saved">
-          <span>{this.props.prefix + new Array(21 - this.props.prefix.length).join('*')}</span>
-          {!this.props.disabled &&
-            <a href="#" onClick={this.startEdit}>Edit</a>}
+          <span>
+            {this.props.prefix + new Array(21 - this.props.prefix.length).join('*')}
+          </span>
+          {!this.props.disabled && <a href="#" onClick={this.startEdit}>Edit</a>}
         </div>
       );
     }
@@ -71,8 +77,8 @@ class PasswordField extends InputField {
 }
 
 PasswordField.defaultProps = Object.assign({}, InputField.defaultProps, {
-  'has_saved_value': false,
-  'prefix': ''
+  has_saved_value: false,
+  prefix: ''
 });
 
 export default PasswordField;
diff --git a/src/sentry/static/sentry/app/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
index 4bad0c3929..ea1ad67b04 100644
--- a/src/sentry/static/sentry/app/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/rangeField.jsx
@@ -20,22 +20,25 @@ export default class RangeField extends InputField {
     if (this.props.disabled) {
       suffixClassNames += ' disabled';
     }
-    jQuery(ReactDOM.findDOMNode(this.refs.input)).on('slider:ready', (e, data) => {
-      let value = parseInt(data.value, 10);
-      $value.appendTo(data.el);
-      $value.html(this.props.formatLabel(value));
-    }).on('slider:changed', (e, data) => {
-      let value = parseInt(data.value, 10);
-      $value.html(this.props.formatLabel(value));
-      this.props.onChange(value);
-    }).simpleSlider({
-      value: this.props.defaultValue || this.props.value,
-      range: [this.props.min, this.props.max],
-      step: this.props.step,
-      snap: this.props.snap,
-      allowedValues: this.props.allowedValues,
-      classSuffix: suffixClassNames
-    });
+    jQuery(ReactDOM.findDOMNode(this.refs.input))
+      .on('slider:ready', (e, data) => {
+        let value = parseInt(data.value, 10);
+        $value.appendTo(data.el);
+        $value.html(this.props.formatLabel(value));
+      })
+      .on('slider:changed', (e, data) => {
+        let value = parseInt(data.value, 10);
+        $value.html(this.props.formatLabel(value));
+        this.props.onChange(value);
+      })
+      .simpleSlider({
+        value: this.props.defaultValue || this.props.value,
+        range: [this.props.min, this.props.max],
+        step: this.props.step,
+        snap: this.props.snap,
+        allowedValues: this.props.allowedValues,
+        classSuffix: suffixClassNames
+      });
   }
 
   removeSlider() {
@@ -47,7 +50,7 @@ export default class RangeField extends InputField {
     return {
       min: this.props.min,
       max: this.props.max,
-      step: this.props.step,
+      step: this.props.step
     };
   }
 
@@ -56,14 +59,14 @@ export default class RangeField extends InputField {
   }
 }
 
-RangeField.formatMinutes = (value) => {
+RangeField.formatMinutes = value => {
   value = value / 60;
-  return `${value} minute${(value != 1 ? 's' : '')}`;
+  return `${value} minute${value != 1 ? 's' : ''}`;
 };
 
 RangeField.defaultProps = {
-  onChange: (value) => {},
-  formatLabel: (value) => value,
+  onChange: value => {},
+  formatLabel: value => value,
   min: 0,
   max: 100,
   step: 1,
diff --git a/src/sentry/static/sentry/app/components/forms/select2Field.jsx b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
index bedc18089d..b9161045f7 100644
--- a/src/sentry/static/sentry/app/components/forms/select2Field.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2Field.jsx
@@ -6,19 +6,20 @@ import InputField from './inputField';
 class Select2Field extends InputField {
   getField() {
     return (
-      <select id={this.getId()}
-          className="form-control"
-          ref="input"
-          placeholder={this.props.placeholder}
-          onChange={this.onChange.bind(this)}
-          disabled={this.props.disabled}
-          required={this.props.required}
-          multiple={this.props.multiple || false}
-          value={this.state.value}>
-        {(this.props.choices || []).map((choice) => {
+      <select
+        id={this.getId()}
+        className="form-control"
+        ref="input"
+        placeholder={this.props.placeholder}
+        onChange={this.onChange.bind(this)}
+        disabled={this.props.disabled}
+        required={this.props.required}
+        multiple={this.props.multiple || false}
+        value={this.state.value}
+      >
+        {(this.props.choices || []).map(choice => {
           return (
-            <option key={choice[0]}
-                    value={choice[0]}>
+            <option key={choice[0]} value={choice[0]}>
               {choice[1]}
             </option>
           );
@@ -36,11 +37,14 @@ class Select2Field extends InputField {
           value.push(options[i].value);
         }
       }
-      this.setState({
-        value: value,
-      }, () => {
-        this.props.onChange(this.state.value);
-      });
+      this.setState(
+        {
+          value: value
+        },
+        () => {
+          this.props.onChange(this.state.value);
+        }
+      );
       return;
     }
     super.onChange(e);
@@ -55,8 +59,11 @@ class Select2Field extends InputField {
   }
 }
 
-Select2Field.propTypes = Object.assign({
-  choices: React.PropTypes.array.isRequired,
-}, InputField.propTypes);
+Select2Field.propTypes = Object.assign(
+  {
+    choices: React.PropTypes.array.isRequired
+  },
+  InputField.propTypes
+);
 
 export default Select2Field;
diff --git a/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx b/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
index d7e29db222..264286d038 100644
--- a/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
+++ b/src/sentry/static/sentry/app/components/forms/select2FieldAutocomplete.jsx
@@ -19,14 +19,14 @@ export default class Select2FieldAutocomplete extends InputField {
         quietMillis: 100,
         url: url,
         dataType: 'json',
-        data: (q) => {
+        data: q => {
           return {autocomplete_query: q};
         },
-        results: (data) => {
+        results: data => {
           return {results: data[this.props.name]};
         }
       },
-      formatAjaxError: (error) => {
+      formatAjaxError: error => {
         let resp = error.responseJSON;
         if (resp && resp.error_type === 'validation') {
           let message = resp.errors[0] && resp.errors[0].__all__;
diff --git a/src/sentry/static/sentry/app/components/forms/textareaField.jsx b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
index 8b12bf1a88..1f8ab136b8 100644
--- a/src/sentry/static/sentry/app/components/forms/textareaField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/textareaField.jsx
@@ -13,7 +13,8 @@ export default class TextareaField extends InputField {
         required={this.props.required}
         placeholder={this.props.placeholder}
         onChange={this.onChange.bind(this)}
-        {...this.getAttributes} />
+        {...this.getAttributes}
+      />
     );
   }
 }
diff --git a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
index c8365a8135..7dceb28754 100644
--- a/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
+++ b/src/sentry/static/sentry/app/components/group/issuePluginActions.jsx
@@ -8,16 +8,12 @@ import plugins from '../../plugins';
 import {t} from '../../locale';
 import {toTitleCase} from '../../utils';
 
-
 const IssuePluginActions = React.createClass({
   propTypes: {
     plugin: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
@@ -44,13 +40,16 @@ const IssuePluginActions = React.createClass({
   },
 
   loadPlugin(data) {
-    this.setState({
-      pluginLoading: true,
-    }, () => {
-      plugins.load(data, () => {
-        this.setState({pluginLoading: false});
-      });
-    });
+    this.setState(
+      {
+        pluginLoading: true
+      },
+      () => {
+        plugins.load(data, () => {
+          this.setState({pluginLoading: false});
+        });
+      }
+    );
   },
 
   openModal(action) {
@@ -75,16 +74,16 @@ const IssuePluginActions = React.createClass({
     }
 
     let allowedActions = plugin.allowed_actions.filter(
-      plugin.issue
-        ? action => action === 'unlink'
-        : action => action !== 'unlink'
+      plugin.issue ? action => action === 'unlink' : action => action !== 'unlink'
     );
 
     let button;
     if (allowedActions.length === 1) {
       button = (
-        <button className={'btn btn-default btn-sm btn-plugin-' + plugin.slug}
-                onClick={this.openModal.bind(this, allowedActions[0])}>
+        <button
+          className={'btn btn-default btn-sm btn-plugin-' + plugin.slug}
+          onClick={this.openModal.bind(this, allowedActions[0])}
+        >
           {toTitleCase(allowedActions[0]) + ' ' + plugin.title + ' Issue'}
         </button>
       );
@@ -94,14 +93,22 @@ const IssuePluginActions = React.createClass({
           <DropdownLink
             caret={false}
             className="btn btn-default btn-sm"
-            title={<span>
-                     {plugin.title}
-                     <span className="icon-arrow-down" style={{marginLeft: 3, marginRight: -3}} />
-                   </span>}>
+            title={
+              <span>
+                {plugin.title}
+                <span
+                  className="icon-arrow-down"
+                  style={{marginLeft: 3, marginRight: -3}}
+                />
+              </span>
+            }
+          >
             {allowedActions.map(action => {
               return (
                 <MenuItem key={action} noAnchor={true}>
-                  <a onClick={this.openModal.bind(this, action)}>{this.ACTION_LABELS[action]}</a>
+                  <a onClick={this.openModal.bind(this, action)}>
+                    {this.ACTION_LABELS[action]}
+                  </a>
                 </MenuItem>
               );
             })}
@@ -113,23 +120,27 @@ const IssuePluginActions = React.createClass({
     return (
       <span>
         {button}
-        <Modal show={this.state.showModal} onHide={this.closeModal}
-               animation={false} backdrop="static" enforceFocus={false}>
+        <Modal
+          show={this.state.showModal}
+          onHide={this.closeModal}
+          animation={false}
+          backdrop="static"
+          enforceFocus={false}
+        >
           <Modal.Header closeButton>
             <Modal.Title>{plugin.title + ' Issue'}</Modal.Title>
           </Modal.Header>
           <Modal.Body>
             {!this.state.pluginLoading &&
-                this.state.actionType &&
-                plugins.get(this.props.plugin).renderGroupActions({
-                    plugin: this.props.plugin,
-                    group: this.getGroup(),
-                    project: this.getProject(),
-                    organization: this.getOrganization(),
-                    actionType: this.state.actionType,
-                    onSuccess: this.closeModal
-                })
-            }
+              this.state.actionType &&
+              plugins.get(this.props.plugin).renderGroupActions({
+                plugin: this.props.plugin,
+                group: this.getGroup(),
+                project: this.getProject(),
+                organization: this.getOrganization(),
+                actionType: this.state.actionType,
+                onSuccess: this.closeModal
+              })}
           </Modal.Body>
         </Modal>
       </span>
diff --git a/src/sentry/static/sentry/app/components/group/participants.jsx b/src/sentry/static/sentry/app/components/group/participants.jsx
index 06c4e7b3cd..b530c3f784 100644
--- a/src/sentry/static/sentry/app/components/group/participants.jsx
+++ b/src/sentry/static/sentry/app/components/group/participants.jsx
@@ -4,7 +4,7 @@ import Avatar from '../avatar';
 
 const GroupParticipants = React.createClass({
   propTypes: {
-    participants: React.PropTypes.array.isRequired,
+    participants: React.PropTypes.array.isRequired
   },
 
   render() {
@@ -12,10 +12,13 @@ const GroupParticipants = React.createClass({
 
     return (
       <div>
-        <h6><span>{participants.length} {'Participant' +
-                                         (participants.length === 1 ? '' : 's')}</span></h6>
+        <h6>
+          <span>
+            {participants.length} {'Participant' + (participants.length === 1 ? '' : 's')}
+          </span>
+        </h6>
         <ul className="faces">
-          {participants.map((user) => {
+          {participants.map(user => {
             return (
               <li>
                 <Avatar size={32} user={user} />
@@ -25,7 +28,7 @@ const GroupParticipants = React.createClass({
         </ul>
       </div>
     );
-  },
+  }
 });
 
 export default GroupParticipants;
diff --git a/src/sentry/static/sentry/app/components/group/releaseChart.jsx b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
index 5ce77936cb..391c03f9ad 100644
--- a/src/sentry/static/sentry/app/components/group/releaseChart.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseChart.jsx
@@ -9,7 +9,7 @@ const GroupReleaseChart = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
     release: React.PropTypes.shape({
-      version: React.PropTypes.string.isRequired,
+      version: React.PropTypes.string.isRequired
     }),
     releaseStats: React.PropTypes.object,
     statsPeriod: React.PropTypes.string.isRequired,
@@ -25,7 +25,7 @@ const GroupReleaseChart = React.createClass({
     let releaseStats = props.releaseStats;
     let releasePoints = {};
     if (defined(releaseStats)) {
-      releaseStats[this.props.statsPeriod].forEach((point) => {
+      releaseStats[this.props.statsPeriod].forEach(point => {
         releasePoints[point[0]] = point[1];
       });
     }
@@ -33,14 +33,14 @@ const GroupReleaseChart = React.createClass({
     let envStats = props.environmentStats;
     let envPoints = {};
     if (defined(envStats)) {
-      envStats[this.props.statsPeriod].forEach((point) => {
+      envStats[this.props.statsPeriod].forEach(point => {
         envPoints[point[0]] = point[1];
       });
     }
 
     return {
       releasePoints: releasePoints,
-      envPoints: envPoints,
+      envPoints: envPoints
     };
   },
 
@@ -68,21 +68,21 @@ const GroupReleaseChart = React.createClass({
 
     return (
       '<div style="width:150px">' +
-        `<div class="time-label">${timeLabel}</div>` +
-        '<dl class="legend">' +
-          '<dt class="inactive"><span></span></dt>' +
-          `<dd>${intcomma(totalY)} event${totalY !== 1 ? 's' : ''}</dd>` +
-          (environment ? (
-            '<dt class="environment"><span></span></dt>' +
+      `<div class="time-label">${timeLabel}</div>` +
+      '<dl class="legend">' +
+      '<dt class="inactive"><span></span></dt>' +
+      `<dd>${intcomma(totalY)} event${totalY !== 1 ? 's' : ''}</dd>` +
+      (environment
+        ? '<dt class="environment"><span></span></dt>' +
             `<dd>${intcomma(envPoints[point.x] || 0)} event${envPoints[point.x] !== 1 ? 's' : ''}` +
             `<small>in ${escape(environment)}</small></dd>`
-          ) : '') +
-          (release ? (
-            '<dt class="active"><span></span></dt>' +
+        : '') +
+      (release
+        ? '<dt class="active"><span></span></dt>' +
             `<dd>${intcomma(releasePoints[point.x] || 0)} event${releasePoints[point.x] !== 1 ? 's' : ''}` +
             `<small>in ${escape(release.version.substr(0, 12))}</small></dd>`
-          ) : '') +
-        '</dl>' +
+        : '') +
+      '</dl>' +
       '</div>'
     );
   },
@@ -96,18 +96,14 @@ const GroupReleaseChart = React.createClass({
 
     let {releasePoints, envPoints} = this.state;
 
-    let points = stats.map((point) => {
+    let points = stats.map(point => {
       let rData = releasePoints[point[0]] || 0;
       let eData = (envPoints[point[0]] || 0) - rData;
       if (eData < 0) eData = 0;
       let remaining = point[1] - rData - eData;
       return {
         x: point[0],
-        y: [
-          rData,
-          eData,
-          remaining >= 0 ? remaining : 0,
-        ],
+        y: [rData, eData, remaining >= 0 ? remaining : 0]
       };
     });
 
@@ -144,7 +140,8 @@ const GroupReleaseChart = React.createClass({
           className="sparkline"
           markers={markers}
           barClasses={['release', 'environment', 'inactive']}
-          tooltip={this.renderTooltip} />
+          tooltip={this.renderTooltip}
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/group/releaseStats.jsx b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
index 6dddaa53c3..2034724291 100644
--- a/src/sentry/static/sentry/app/components/group/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/group/releaseStats.jsx
@@ -20,7 +20,7 @@ const PRODUCTION_ENV_NAMES = new Set([
   'prod',
   'release',
   'master',
-  'trunk',
+  'trunk'
 ]);
 
 // TODO(dcramer): this should listen to EnvironmentStore
@@ -28,17 +28,14 @@ const PRODUCTION_ENV_NAMES = new Set([
 const GroupReleaseStats = React.createClass({
   propTypes: {
     defaultEnvironment: React.PropTypes.string,
-    group: React.PropTypes.object,
+    group: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getDefaultProps() {
     return {
-      defaultEnvironment: '',
+      defaultEnvironment: ''
     };
   },
 
@@ -46,12 +43,14 @@ const GroupReleaseStats = React.createClass({
     let envList = EnvironmentStore.getAll();
     let queryParams = this.props.location.query;
 
-    let selectedEnvironment = (
-        queryParams.hasOwnProperty('environment') ?
-        queryParams.environment :
-        this.props.defaultEnvironment);
+    let selectedEnvironment = queryParams.hasOwnProperty('environment')
+      ? queryParams.environment
+      : this.props.defaultEnvironment;
 
-    if (selectedEnvironment && envList.filter(e => e.name === selectedEnvironment).length === 0) {
+    if (
+      selectedEnvironment &&
+      envList.filter(e => e.name === selectedEnvironment).length === 0
+    ) {
       selectedEnvironment = null;
     }
 
@@ -69,7 +68,7 @@ const GroupReleaseStats = React.createClass({
       error: false,
       data: null,
       envList: envList,
-      environment: selectedEnvironment || '',
+      environment: selectedEnvironment || ''
     };
   },
 
@@ -82,11 +81,14 @@ const GroupReleaseStats = React.createClass({
   componentWillReceiveProps(nextProps) {
     let queryParams = nextProps.location.query;
     if (queryParams.environment !== this.props.location.query.environment) {
-      this.setState({
-        environment: queryParams.environment,
-        loading: true,
-        error: false,
-      }, this.fetchData);
+      this.setState(
+        {
+          environment: queryParams.environment,
+          loading: true,
+          error: false
+        },
+        this.fetchData
+      );
     }
   },
 
@@ -109,28 +111,27 @@ const GroupReleaseStats = React.createClass({
 
     this.api.request(`/issues/${group.id}/environments/${env}/`, {
       query: {
-        until: until,
+        until: until
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           data: data,
           loading: false,
-          error: false,
+          error: false
         });
       },
       error: () => {
         this.setState({
           data: null,
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
   },
 
   switchEnv(env) {
-    if (this.state.environment === env)
-      return;
+    if (this.state.environment === env) return;
 
     let queryParams = Object.assign({}, this.props.location.query);
     queryParams.environment = env;
@@ -152,84 +153,91 @@ const GroupReleaseStats = React.createClass({
 
     return (
       <div className="env-stats">
-        <h6><span>
-          <DropdownLink title={environment ? toTitleCase(environment) : DEFAULT_ENV_NAME}>
-            {envList.map((e) => {
-              return (
-                <MenuItem
+        <h6>
+          <span>
+            <DropdownLink
+              title={environment ? toTitleCase(environment) : DEFAULT_ENV_NAME}
+            >
+              {envList.map(e => {
+                return (
+                  <MenuItem
                     key={e.name}
                     isActive={environment === e.name}
-                    onClick={this.switchEnv.bind(this, e.name)}>
-                  {toTitleCase(e.name) || DEFAULT_ENV_NAME}
-                </MenuItem>
-              );
-            })}
-          </DropdownLink>
-        </span></h6>
+                    onClick={this.switchEnv.bind(this, e.name)}
+                  >
+                    {toTitleCase(e.name) || DEFAULT_ENV_NAME}
+                  </MenuItem>
+                );
+              })}
+            </DropdownLink>
+          </span>
+        </h6>
         <div className="env-content">
-          {this.state.loading ?
-            <LoadingIndicator />
-          : (this.state.error ?
-            <LoadingError />
-          :
-            <div>
-              <GroupReleaseChart
-                  group={group}
-                  environment={environment}
-                  environmentStats={data.environment.stats}
-                  release={data.currentRelease ? data.currentRelease.release : null}
-                  releaseStats={data.currentRelease ? data.currentRelease.stats : null}
-                  statsPeriod="24h"
-                  title={t('Last 24 Hours')}
-                  firstSeen={group.firstSeen}
-                  lastSeen={group.lastSeen} />
-
-              <GroupReleaseChart
-                  group={group}
-                  environment={environment}
-                  environmentStats={data.environment.stats}
-                  release={data.currentRelease ? data.currentRelease.release : null}
-                  releaseStats={data.currentRelease ? data.currentRelease.stats : null}
-                  statsPeriod="30d"
-                  title={t('Last 30 Days')}
-                  className="bar-chart-small"
-                  firstSeen={group.firstSeen}
-                  lastSeen={group.lastSeen} />
-
-              <h6>
-                <span>{t('First seen')}</span>
-                {environment &&
-                  <small>({environment})</small>
-                }
-              </h6>
-
-              <SeenInfo
-                  orgId={orgId}
-                  projectId={projectId}
-                  date={firstSeenEnv}
-                  dateGlobal={group.firstSeen}
-                  hasRelease={hasRelease}
-                  environment={environment}
-                  release={data.firstRelease ? data.firstRelease.release : null}
-                  title={t('First seen')} />
-
-              <h6>
-                <span>{t('Last seen')}</span>
-                {environment &&
-                  <small>({environment})</small>
-                }
-              </h6>
-              <SeenInfo
-                  orgId={orgId}
-                  projectId={projectId}
-                  date={lastSeenEnv}
-                  dateGlobal={group.lastSeen}
-                  hasRelease={hasRelease}
-                  environment={environment}
-                  release={data.lastRelease ? data.lastRelease.release : null}
-                  title={t('Last seen')} />
-            </div>
-          )}
+          {this.state.loading
+            ? <LoadingIndicator />
+            : this.state.error
+                ? <LoadingError />
+                : <div>
+                    <GroupReleaseChart
+                      group={group}
+                      environment={environment}
+                      environmentStats={data.environment.stats}
+                      release={data.currentRelease ? data.currentRelease.release : null}
+                      releaseStats={
+                        data.currentRelease ? data.currentRelease.stats : null
+                      }
+                      statsPeriod="24h"
+                      title={t('Last 24 Hours')}
+                      firstSeen={group.firstSeen}
+                      lastSeen={group.lastSeen}
+                    />
+
+                    <GroupReleaseChart
+                      group={group}
+                      environment={environment}
+                      environmentStats={data.environment.stats}
+                      release={data.currentRelease ? data.currentRelease.release : null}
+                      releaseStats={
+                        data.currentRelease ? data.currentRelease.stats : null
+                      }
+                      statsPeriod="30d"
+                      title={t('Last 30 Days')}
+                      className="bar-chart-small"
+                      firstSeen={group.firstSeen}
+                      lastSeen={group.lastSeen}
+                    />
+
+                    <h6>
+                      <span>{t('First seen')}</span>
+                      {environment && <small>({environment})</small>}
+                    </h6>
+
+                    <SeenInfo
+                      orgId={orgId}
+                      projectId={projectId}
+                      date={firstSeenEnv}
+                      dateGlobal={group.firstSeen}
+                      hasRelease={hasRelease}
+                      environment={environment}
+                      release={data.firstRelease ? data.firstRelease.release : null}
+                      title={t('First seen')}
+                    />
+
+                    <h6>
+                      <span>{t('Last seen')}</span>
+                      {environment && <small>({environment})</small>}
+                    </h6>
+                    <SeenInfo
+                      orgId={orgId}
+                      projectId={projectId}
+                      date={lastSeenEnv}
+                      dateGlobal={group.lastSeen}
+                      hasRelease={hasRelease}
+                      environment={environment}
+                      release={data.lastRelease ? data.lastRelease.release : null}
+                      title={t('Last seen')}
+                    />
+                  </div>}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/group/seenInfo.jsx b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
index 4668b6cafe..b1c066926c 100644
--- a/src/sentry/static/sentry/app/components/group/seenInfo.jsx
+++ b/src/sentry/static/sentry/app/components/group/seenInfo.jsx
@@ -18,16 +18,15 @@ const SeenInfo = React.createClass({
       version: React.PropTypes.string.isRequired
     }),
     environment: React.PropTypes.string,
-    hasRelease: React.PropTypes.bool.isRequired,
+    hasRelease: React.PropTypes.bool.isRequired
   },
 
-
   contextTypes: {
-    organization: React.PropTypes.object,
+    organization: React.PropTypes.object
   },
 
   mixins: [
-    TooltipMixin(function () {
+    TooltipMixin(function() {
       let instance = this;
 
       return {
@@ -75,38 +74,45 @@ const SeenInfo = React.createClass({
     return (
       <dl className="seen-info">
         <dt key={0}>{t('When')}:</dt>
-        {date ?
-          <dd key={1}>
-            <span className="tip"><TimeSince date={date} /></span><br />
-            <small><DateTime date={date} seconds={true} /></small>
-          </dd>
-        : (dateGlobal && environment === '' ?
-          <dd key={1}>
-            <span className="tip"><TimeSince date={dateGlobal} /></span><br />
-            <small><DateTime date={dateGlobal} seconds={true} /></small>
-          </dd>
-        :
-          <dd key={1}>n/a</dd>
-        )}
+        {date
+          ? <dd key={1}>
+              <span className="tip"><TimeSince date={date} /></span><br />
+              <small><DateTime date={date} seconds={true} /></small>
+            </dd>
+          : dateGlobal && environment === ''
+              ? <dd key={1}>
+                  <span className="tip"><TimeSince date={dateGlobal} /></span><br />
+                  <small><DateTime date={dateGlobal} seconds={true} /></small>
+                </dd>
+              : <dd key={1}>n/a</dd>}
         <dt key={4}>{t('Release')}:</dt>
-        {defined(release) ?
-          <dd key={5}>
-          {new Set(this.context.organization.features).has('release-commits') ?
-            <VersionHoverCard
-              orgId={orgId}
-              projectId={projectId}
-              version={release.version}>
-              <Version orgId={orgId} projectId={projectId} version={release.version}/>
-            </VersionHoverCard>
-          :
-            <Version orgId={orgId} projectId={projectId} version={release.version}/>
-          }
-          </dd>
-        : (!this.props.hasRelease ?
-          <dd key={5}><small style={{marginLeft: 5, fontStyle: 'italic'}}><a href={this.getReleaseTrackingUrl()}>not configured</a></small></dd>
-        :
-          <dd key={5}>n/a</dd>
-        )}
+        {defined(release)
+          ? <dd key={5}>
+              {new Set(this.context.organization.features).has('release-commits')
+                ? <VersionHoverCard
+                    orgId={orgId}
+                    projectId={projectId}
+                    version={release.version}
+                  >
+                    <Version
+                      orgId={orgId}
+                      projectId={projectId}
+                      version={release.version}
+                    />
+                  </VersionHoverCard>
+                : <Version
+                    orgId={orgId}
+                    projectId={projectId}
+                    version={release.version}
+                  />}
+            </dd>
+          : !this.props.hasRelease
+              ? <dd key={5}>
+                  <small style={{marginLeft: 5, fontStyle: 'italic'}}>
+                    <a href={this.getReleaseTrackingUrl()}>not configured</a>
+                  </small>
+                </dd>
+              : <dd key={5}>n/a</dd>}
       </dl>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/group/sidebar.jsx b/src/sentry/static/sentry/app/components/group/sidebar.jsx
index 059f6e32b5..4dc1deba08 100644
--- a/src/sentry/static/sentry/app/components/group/sidebar.jsx
+++ b/src/sentry/static/sentry/app/components/group/sidebar.jsx
@@ -12,23 +12,22 @@ import {t, tct} from '../../locale';
 const GroupSidebar = React.createClass({
   propTypes: {
     group: React.PropTypes.object,
-    event: React.PropTypes.object,
+    event: React.PropTypes.object
   },
 
   contextTypes: {
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   subscriptionReasons: {
     commented: t('You\'re receiving updates because you have commented on this issue.'),
     assigned: t('You\'re receiving updates because you were assigned to this issue.'),
     bookmarked: t('You\'re receiving updates because you have bookmarked this issue.'),
-    changed_status: t('You\'re receiving updates because you have changed the status of this issue.'),
+    changed_status: t(
+      'You\'re receiving updates because you have changed the status of this issue.'
+    )
   },
 
   toggleSubscription() {
@@ -37,28 +36,31 @@ const GroupSidebar = React.createClass({
     let org = this.getOrganization();
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.api.bulkUpdate({
-      orgId: org.slug,
-      projectId: project.slug,
-      itemIds: [group.id],
-      data: {
-        isSubscribed: !group.isSubscribed
-      }
-    }, {
-      complete: () => {
-        this.api.request(`/issues/${group.id}/participants/`, {
-          success: (data) => {
-            this.setState({participants: data});
-            IndicatorStore.remove(loadingIndicator);
-          }
-        });
+    this.api.bulkUpdate(
+      {
+        orgId: org.slug,
+        projectId: project.slug,
+        itemIds: [group.id],
+        data: {
+          isSubscribed: !group.isSubscribed
+        }
+      },
+      {
+        complete: () => {
+          this.api.request(`/issues/${group.id}/participants/`, {
+            success: data => {
+              this.setState({participants: data});
+              IndicatorStore.remove(loadingIndicator);
+            }
+          });
+        }
       }
-    });
+    );
   },
 
   renderPluginIssue() {
     let issues = [];
-    (this.props.group.pluginIssues || []).forEach((plugin) => {
+    (this.props.group.pluginIssues || []).forEach(plugin => {
       let issue = plugin.issue;
       if (issue) {
         issues.push(
@@ -82,16 +84,21 @@ const GroupSidebar = React.createClass({
     let group = this.getGroup();
 
     if (group.isSubscribed) {
-      let result = t('You\'re receiving updates because you are subscribed to this issue.');
+      let result = t(
+        'You\'re receiving updates because you are subscribed to this issue.'
+      );
       if (group.subscriptionDetails) {
         let reason = group.subscriptionDetails.reason;
         if (this.subscriptionReasons.hasOwnProperty(reason)) {
           result = this.subscriptionReasons[reason];
         }
       } else {
-        result = tct('You\'re receiving updates because you are [link:subscribed to workflow notifications] for this project.', {
-          link: <a href="/account/settings/notifications/" />,
-        });
+        result = tct(
+          'You\'re receiving updates because you are [link:subscribed to workflow notifications] for this project.',
+          {
+            link: <a href="/account/settings/notifications/" />
+          }
+        );
       }
       return result;
     } else {
@@ -109,19 +116,19 @@ const GroupSidebar = React.createClass({
 
     return (
       <div className="group-stats">
-        {(new Set(this.context.organization.features)).has('release-commits') &&
-         <SuggestedOwners event={this.props.event}/>
-        }
+        {new Set(this.context.organization.features).has('release-commits') &&
+          <SuggestedOwners event={this.props.event} />}
 
         <GroupReleaseStats
-            group={group}
-            location={this.context.location}
-            defaultEnvironment={defaultEnvironment} />
+          group={group}
+          location={this.context.location}
+          defaultEnvironment={defaultEnvironment}
+        />
 
         {this.renderPluginIssue()}
 
         <h6><span>{t('Tags')}</span></h6>
-        {group.tags.map((data) => {
+        {group.tags.map(data => {
           return (
             <TagDistributionMeter
               key={data.key}
@@ -129,18 +136,21 @@ const GroupSidebar = React.createClass({
               projectId={projectId}
               group={group}
               name={data.name}
-              tag={data.key} />
+              tag={data.key}
+            />
           );
         })}
-        {participants.length !== 0 &&
-          <GroupParticipants participants={participants} />
-        }
+        {participants.length !== 0 && <GroupParticipants participants={participants} />}
 
         <h6><span>{t('Notifications')}</span></h6>
         <p className="help-block">{this.getNotificationText()}</p>
-        <a className={`btn btn-default btn-subscribe ${group.isSubscribed && 'subscribed'}`}
-           onClick={this.toggleSubscription}>
-          <span className="icon-signal" /> {group.isSubscribed ? t('Unsubscribe') : t('Subscribe')}
+        <a
+          className={`btn btn-default btn-subscribe ${group.isSubscribed && 'subscribed'}`}
+          onClick={this.toggleSubscription}
+        >
+          <span className="icon-signal" />
+          {' '}
+          {group.isSubscribed ? t('Unsubscribe') : t('Subscribe')}
         </a>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
index 0df088735a..155881c653 100644
--- a/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
+++ b/src/sentry/static/sentry/app/components/group/suggestedOwners.jsx
@@ -10,7 +10,7 @@ import {t} from '../../locale';
 
 const SuggestedOwners = React.createClass({
   propTypes: {
-    event: React.PropTypes.object,
+    event: React.PropTypes.object
   },
 
   mixins: [
@@ -20,12 +20,12 @@ const SuggestedOwners = React.createClass({
       selector: '.tip',
       html: true,
       container: 'body',
-      template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner tooltip-owners"></div></div>',
+      template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner tooltip-owners"></div></div>'
     })
   ],
 
   getInitialState() {
-      return {owners: undefined};
+    return {owners: undefined};
   },
 
   componentDidMount() {
@@ -56,18 +56,21 @@ const SuggestedOwners = React.createClass({
     if (!event) return;
     let org = this.getOrganization();
     let project = this.getProject();
-    this.api.request(`/projects/${org.slug}/${project.slug}/events/${event.id}/committers/`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          owners: data.committers,
-        });
-      },
-      error: (error) => {
-        this.setState({
-          owners: undefined,
-        });
+    this.api.request(
+      `/projects/${org.slug}/${project.slug}/events/${event.id}/committers/`,
+      {
+        success: (data, _, jqXHR) => {
+          this.setState({
+            owners: data.committers
+          });
+        },
+        error: error => {
+          this.setState({
+            owners: undefined
+          });
+        }
       }
-    });
+    );
   },
 
   assignTo(member) {
@@ -78,45 +81,56 @@ const SuggestedOwners = React.createClass({
 
   renderCommitter({author, commits}) {
     return (
-      <span key={author.id || author.email} className="avatar-grid-item tip" onClick={() => this.assignTo(author)} title={
-        ReactDOMServer.renderToStaticMarkup(
+      <span
+        key={author.id || author.email}
+        className="avatar-grid-item tip"
+        onClick={() => this.assignTo(author)}
+        title={ReactDOMServer.renderToStaticMarkup(
           <div>
-            {author.id ?
-              ( <div className="tooltip-owners-name">
+            {author.id
+              ? <div className="tooltip-owners-name">
                   {author.name}
-                </div>)  :
-                (<div className="tooltip-owners-unknown">
+                </div>
+              : <div className="tooltip-owners-unknown">
                   <p className="tooltip-owners-unknown-email">
                     <span className="icon icon-circle-cross" />
                     <strong>{author.email}</strong>
                   </p>
-                  <p>Sorry, we don't recognize this member. Make sure to link alternative emails in Account Settings.</p>
-                  <hr/>
-                </div>)
-              }
+                  <p>
+                    Sorry, we don't recognize this member. Make sure to link alternative emails in Account Settings.
+                  </p>
+                  <hr />
+                </div>}
             <ul className="tooltip-owners-commits">
-              {commits.slice(0, 6).map( c => {
+              {commits.slice(0, 6).map(c => {
                 return (
                   <li key={c.id} className="tooltip-owners-commit">
                     {c.message}
-                    <span className="tooltip-owners-date"> - {moment(c.dateCreated).fromNow()}</span>
+                    <span className="tooltip-owners-date">
+                      {' '}- {moment(c.dateCreated).fromNow()}
+                    </span>
                   </li>
                 );
               })}
             </ul>
-          </div>)
-        }>
-        <Avatar user={author}/>
-      </span>);
+          </div>
+        )}
+      >
+        <Avatar user={author} />
+      </span>
+    );
   },
 
   render() {
     if (!(this.state.owners && this.state.owners.length)) {
       return null;
     }
-    return(
+    return (
       <div className="m-b-1">
-        <h6><span>{t('Suggested Owners')}</span><small style={{background: '#FFFFFF'}}>Click to assign</small></h6>
+        <h6>
+          <span>{t('Suggested Owners')}</span>
+          <small style={{background: '#FFFFFF'}}>Click to assign</small>
+        </h6>
         <div className="avatar-grid">
           {this.state.owners.map(c => this.renderCommitter(c))}
         </div>
diff --git a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
index 87d1da448f..3b7484e535 100644
--- a/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
+++ b/src/sentry/static/sentry/app/components/group/tagDistributionMeter.jsx
@@ -46,7 +46,12 @@ const TagDistributionMeter = React.createClass({
   },
 
   fetchData() {
-    let url = '/issues/' + this.props.group.id + '/tags/' + encodeURIComponent(this.props.tag) + '/';
+    let url =
+      '/issues/' +
+      this.props.group.id +
+      '/tags/' +
+      encodeURIComponent(this.props.tag) +
+      '/';
 
     this.setState({
       loading: true,
@@ -100,10 +105,18 @@ const TagDistributionMeter = React.createClass({
 
           return (
             <Link
-                key={value.id}
-                className={className} style={{width: pct + '%'}}
-                to={`/${orgId}/${projectId}/issues/${this.props.group.id}/tags/${this.props.tag}/`}
-                title={'<div class="truncate">' + escape(deviceNameMapper(value.name)) + '</div>' + pctLabel + '%'}>
+              key={value.id}
+              className={className}
+              style={{width: pct + '%'}}
+              to={`/${orgId}/${projectId}/issues/${this.props.group.id}/tags/${this.props.tag}/`}
+              title={
+                '<div class="truncate">' +
+                  escape(deviceNameMapper(value.name)) +
+                  '</div>' +
+                  pctLabel +
+                  '%'
+              }
+            >
               <span className="tag-description">
                 <span className="tag-percentage">{pctLabel}%</span>
                 <span className="tag-label">{deviceNameMapper(value.name)}</span>
@@ -113,31 +126,29 @@ const TagDistributionMeter = React.createClass({
         })}
         {hasOther &&
           <Link
-              key="other"
-              className="segment segment-9" style={{width: otherPct + '%'}}
-              to={`/${orgId}/${projectId}/issues/${this.props.group.id}/tags/${this.props.tag}/`}
-              title={'Other<br/>' + otherPctLabel + '%'}>
+            key="other"
+            className="segment segment-9"
+            style={{width: otherPct + '%'}}
+            to={`/${orgId}/${projectId}/issues/${this.props.group.id}/tags/${this.props.tag}/`}
+            title={'Other<br/>' + otherPctLabel + '%'}
+          >
             <span className="tag-description">
               <span className="tag-percentage">{otherPctLabel}%</span>
               <span className="tag-label">{t('Other')}</span>
             </span>
-          </Link>
-        }
+          </Link>}
       </div>
     );
   },
 
   renderBody() {
-    if (this.state.loading || this.state.error)
-      return null;
+    if (this.state.loading || this.state.error) return null;
 
-    if (!this.state.data.totalValues)
-      return <p>{t('No recent data.')}</p>;
+    if (!this.state.data.totalValues) return <p>{t('No recent data.')}</p>;
 
     return this.renderSegments();
   },
 
-
   render() {
     return (
       <div className="distribution-graph">
diff --git a/src/sentry/static/sentry/app/components/group/title.jsx b/src/sentry/static/sentry/app/components/group/title.jsx
index 2d733bb3e3..e06374e2c7 100644
--- a/src/sentry/static/sentry/app/components/group/title.jsx
+++ b/src/sentry/static/sentry/app/components/group/title.jsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 const GroupTitle = React.createClass({
   propTypes: {
-    data: React.PropTypes.object.isRequired,
+    data: React.PropTypes.object.isRequired
   },
 
   render() {
@@ -23,12 +23,12 @@ const GroupTitle = React.createClass({
       return (
         <span>
           <span style={{marginRight: 10}}>{title}</span>
-          <em>{subtitle}</em><br/>
+          <em>{subtitle}</em><br />
         </span>
       );
     }
     return <span>{title}</span>;
-  },
+  }
 });
 
 export default GroupTitle;
diff --git a/src/sentry/static/sentry/app/components/groupList.jsx b/src/sentry/static/sentry/app/components/groupList.jsx
index 77d089f81d..037b97376e 100644
--- a/src/sentry/static/sentry/app/components/groupList.jsx
+++ b/src/sentry/static/sentry/app/components/groupList.jsx
@@ -25,11 +25,7 @@ const GroupList = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ProjectState,
-    Reflux.listenTo(GroupStore, 'onGroupChange'),
-    ApiMixin
-  ],
+  mixins: [ProjectState, Reflux.listenTo(GroupStore, 'onGroupChange'), ApiMixin],
 
   getDefaultProps() {
     return {
@@ -56,8 +52,9 @@ const GroupList = React.createClass({
   },
 
   componentDidUpdate(prevProps) {
-    if (prevProps.orgId !== this.props.orgId ||
-      prevProps.projectId !== this.props.projectId) {
+    if (
+      prevProps.orgId !== this.props.orgId || prevProps.projectId !== this.props.projectId
+    ) {
       this.fetchData();
     }
   },
@@ -105,7 +102,7 @@ const GroupList = React.createClass({
   },
 
   onGroupChange() {
-    let groupIds = this._streamManager.getAllItems().map((item) => item.id);
+    let groupIds = this._streamManager.getAllItems().map(item => item.id);
     if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
       this.setState({
         groupIds: groupIds
@@ -114,14 +111,12 @@ const GroupList = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
     else if (this.state.groupIds.length === 0)
       return (
         <div className="box empty-stream">
-          <span className="icon icon-exclamation"></span>
+          <span className="icon icon-exclamation" />
           <p>{t('There doesn\'t seem to be any events fitting the query.')}</p>
         </div>
       );
@@ -138,7 +133,7 @@ const GroupList = React.createClass({
       <div className={wrapperClass}>
         <GroupListHeader />
         <ul className="group-list">
-          {this.state.groupIds.map((id) => {
+          {this.state.groupIds.map(id => {
             return (
               <StreamGroup
                 key={id}
diff --git a/src/sentry/static/sentry/app/components/groupListHeader.jsx b/src/sentry/static/sentry/app/components/groupListHeader.jsx
index 0669ff0108..f68c734471 100644
--- a/src/sentry/static/sentry/app/components/groupListHeader.jsx
+++ b/src/sentry/static/sentry/app/components/groupListHeader.jsx
@@ -12,8 +12,12 @@ const GroupListHeader = React.createClass({
           <div className="hidden-sm hidden-xs stream-actions-graph col-md-2 col-md-offset-1 align-right nav-header">
             {t('Last 24 hours')}
           </div>
-          <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">{t('events')}</div>
-          <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">{t('users')}</div>
+          <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">
+            {t('events')}
+          </div>
+          <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">
+            {t('users')}
+          </div>
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/indicators.jsx b/src/sentry/static/sentry/app/components/indicators.jsx
index a0b5e7ce36..a59e5d0ff0 100644
--- a/src/sentry/static/sentry/app/components/indicators.jsx
+++ b/src/sentry/static/sentry/app/components/indicators.jsx
@@ -8,28 +8,34 @@ import ToastIndicator from '../components/alerts/toastIndicator';
 import IndicatorStore from '../stores/indicatorStore';
 
 const Indicators = React.createClass({
-  mixins: [
-    Reflux.connect(IndicatorStore, 'items')
-  ],
+  mixins: [Reflux.connect(IndicatorStore, 'items')],
 
   getInitialState() {
-      return {
-          items: []
-      };
+    return {
+      items: []
+    };
   },
 
   render() {
     return (
       <div {...this.props}>
-        <ReactCSSTransitionGroup transitionName="toast" transitionEnter={false} transitionLeaveTimeout={500}>
-          {this.state.items.map((indicator) => {
+        <ReactCSSTransitionGroup
+          transitionName="toast"
+          transitionEnter={false}
+          transitionLeaveTimeout={500}
+        >
+          {this.state.items.map(indicator => {
             if (indicator.type === 'error' || indicator.type === 'success') {
               return (
-                <ToastIndicator type={indicator.type} key={indicator.id}>{indicator.message}</ToastIndicator>
+                <ToastIndicator type={indicator.type} key={indicator.id}>
+                  {indicator.message}
+                </ToastIndicator>
               );
             } else {
               return (
-                <LoadingIndicator className="toast" key={indicator.id}>{indicator.message}</LoadingIndicator>
+                <LoadingIndicator className="toast" key={indicator.id}>
+                  {indicator.message}
+                </LoadingIndicator>
               );
             }
           })}
@@ -40,4 +46,3 @@ const Indicators = React.createClass({
 });
 
 export default Indicators;
-
diff --git a/src/sentry/static/sentry/app/components/issueList.jsx b/src/sentry/static/sentry/app/components/issueList.jsx
index e0cd8451b0..01e78cbd1b 100644
--- a/src/sentry/static/sentry/app/components/issueList.jsx
+++ b/src/sentry/static/sentry/app/components/issueList.jsx
@@ -22,7 +22,7 @@ const IssueList = React.createClass({
   getDefaultProps() {
     return {
       pagination: true,
-      query: {},
+      query: {}
     };
   },
 
@@ -31,7 +31,7 @@ const IssueList = React.createClass({
       issueIds: [],
       loading: true,
       error: false,
-      pageLinks: null,
+      pageLinks: null
     };
   },
 
@@ -42,10 +42,11 @@ const IssueList = React.createClass({
   componentWillReceiveProps(nextProps) {
     let location = this.props.location;
     let nextLocation = nextProps.location;
-    if (!location)
-      return;
+    if (!location) return;
 
-    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+    if (
+      location.pathname != nextLocation.pathname || location.search != nextLocation.search
+    ) {
       this.remountComponent();
     }
   },
@@ -61,7 +62,7 @@ const IssueList = React.createClass({
       method: 'GET',
       query: {
         cursor: (location && location.query && location.query.cursor) || '',
-        ...this.props.query,
+        ...this.props.query
       },
       success: (data, _, jqXHR) => {
         this.setState({
@@ -69,13 +70,13 @@ const IssueList = React.createClass({
           loading: false,
           error: false,
           issueIds: data.map(item => item.id),
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -85,14 +86,12 @@ const IssueList = React.createClass({
     let body;
     let params = this.props.params;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
     else if (this.state.issueIds.length > 0) {
       body = (
         <ul className="issue-list">
-          {this.state.data.map((issue) => {
+          {this.state.data.map(issue => {
             return (
               <CompactIssue
                 key={issue.id}
@@ -106,9 +105,7 @@ const IssueList = React.createClass({
           })}
         </ul>
       );
-    }
-    else
-      body = (this.props.renderEmpty || this.renderEmpty)();
+    } else body = (this.props.renderEmpty || this.renderEmpty)();
 
     return body;
   },
@@ -129,9 +126,9 @@ const IssueList = React.createClass({
     return (
       <div>
         {this.renderResults()}
-        {this.props.pagination && this.state.pageLinks &&
-          <Pagination pageLinks={this.state.pageLinks} {...this.props} />
-        }
+        {this.props.pagination &&
+          this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks} {...this.props} />}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
index 19cf359bd0..abbcd85c73 100644
--- a/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
+++ b/src/sentry/static/sentry/app/components/issues/snoozeAction.jsx
@@ -6,7 +6,7 @@ const Snooze = {
   // all values in minutes
   '30MINUTES': 30,
   '2HOURS': 60 * 2,
-  '24HOURS': 60 * 24,
+  '24HOURS': 60 * 24
 };
 
 const SnoozeAction = React.createClass({
@@ -40,29 +40,47 @@ const SnoozeAction = React.createClass({
     this.closeModal();
   },
 
-  render(){
+  render() {
     return (
-      <a title={this.props.tooltip}
-         className={this.props.className}
-         disabled={this.props.disabled}
-         onClick={this.toggleModal}>
+      <a
+        title={this.props.tooltip}
+        className={this.props.className}
+        disabled={this.props.disabled}
+        onClick={this.toggleModal}
+      >
         <span>{t('zZz')}</span>
 
-        <Modal show={this.state.isModalOpen} title={t('Please confirm')} animation={false}
-               onHide={this.closeModal} bsSize="sm">
+        <Modal
+          show={this.state.isModalOpen}
+          title={t('Please confirm')}
+          animation={false}
+          onHide={this.closeModal}
+          bsSize="sm"
+        >
           <div className="modal-body">
             <h5>{t('How long should we ignore this issue?')}</h5>
             <ul className="nav nav-stacked nav-pills">
-              <li><a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>{t('30 minutes')}</a></li>
-              <li><a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>{t('2 hours')}</a></li>
-              <li><a onClick={this.onSnooze.bind(this, Snooze['24HOURS'])}>{t('24 hours')}</a></li>
+              <li>
+                <a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>
+                  {t('30 minutes')}
+                </a>
+              </li>
+              <li>
+                <a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>{t('2 hours')}</a>
+              </li>
+              <li>
+                <a onClick={this.onSnooze.bind(this, Snooze['24HOURS'])}>
+                  {t('24 hours')}
+                </a>
+              </li>
               {/* override click event object w/ undefined to indicate "no duration" */}
               <li><a onClick={this.onSnooze.bind(this, undefined)}>{t('Forever')}</a></li>
             </ul>
           </div>
           <div className="modal-footer">
-            <button type="button" className="btn btn-default"
-                    onClick={this.closeModal}>{t('Cancel')}</button>
+            <button type="button" className="btn btn-default" onClick={this.closeModal}>
+              {t('Cancel')}
+            </button>
           </div>
         </Modal>
       </a>
diff --git a/src/sentry/static/sentry/app/components/letterAvatar.jsx b/src/sentry/static/sentry/app/components/letterAvatar.jsx
index 41310f7d6c..0ed08a271d 100644
--- a/src/sentry/static/sentry/app/components/letterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/letterAvatar.jsx
@@ -23,7 +23,7 @@ const LetterAvatar = React.createClass({
     '#6c5fc7', // purple
     '#4e3fb4', // purple_dark
     '#57b1be', // teal
-    '#847a8c'  // gray
+    '#847a8c' // gray
   ],
 
   getColor() {
@@ -31,7 +31,6 @@ const LetterAvatar = React.createClass({
     return this.COLORS[id % this.COLORS.length];
   },
 
-
   hashIdentifier(identifier) {
     identifier += '';
     let hash = 0;
@@ -50,9 +49,25 @@ const LetterAvatar = React.createClass({
   render() {
     return (
       <svg viewBox="0 0 120 120" className={this.props.className}>
-        <rect x="0" y="0" width="120" height="120" rx="15" ry="15" fill={this.getColor()}/>
-        <text x="50%" y="50%" fontSize="65" style={{'dominantBaseline': 'central'}}
-              textAnchor="middle" fill="#FFFFFF">{this.getInitials()}</text>
+        <rect
+          x="0"
+          y="0"
+          width="120"
+          height="120"
+          rx="15"
+          ry="15"
+          fill={this.getColor()}
+        />
+        <text
+          x="50%"
+          y="50%"
+          fontSize="65"
+          style={{dominantBaseline: 'central'}}
+          textAnchor="middle"
+          fill="#FFFFFF"
+        >
+          {this.getInitials()}
+        </text>
       </svg>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
index 85244b97e6..8a04445d9d 100644
--- a/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
+++ b/src/sentry/static/sentry/app/components/linkWithConfirmation.jsx
@@ -42,17 +42,29 @@ const LinkWithConfirmation = React.createClass({
       className += ' disabled';
     }
     return (
-      <a className={className} disabled={this.props.disabled} onClick={this.onToggle} title={this.props.title}>
+      <a
+        className={className}
+        disabled={this.props.disabled}
+        onClick={this.onToggle}
+        title={this.props.title}
+      >
         {this.props.children}
-        <Modal show={this.state.isModalOpen} title={t('Please confirm')} animation={false} onHide={this.onToggle}>
+        <Modal
+          show={this.state.isModalOpen}
+          title={t('Please confirm')}
+          animation={false}
+          onHide={this.onToggle}
+        >
           <div className="modal-body">
             <p><strong>{this.props.message}</strong></p>
           </div>
           <div className="modal-footer">
-            <button type="button" className="btn btn-default"
-                    onClick={this.onToggle}>{t('Cancel')}</button>
-            <button type="button" className="btn btn-primary"
-                    onClick={this.onConfirm}>{t('Confirm')}</button>
+            <button type="button" className="btn btn-default" onClick={this.onToggle}>
+              {t('Cancel')}
+            </button>
+            <button type="button" className="btn btn-primary" onClick={this.onConfirm}>
+              {t('Confirm')}
+            </button>
           </div>
         </Modal>
       </a>
diff --git a/src/sentry/static/sentry/app/components/listLink.jsx b/src/sentry/static/sentry/app/components/listLink.jsx
index 8a476f0dcb..133c2a4b0a 100644
--- a/src/sentry/static/sentry/app/components/listLink.jsx
+++ b/src/sentry/static/sentry/app/components/listLink.jsx
@@ -26,24 +26,23 @@ const ListLink = React.createClass({
   getDefaultProps() {
     return {
       activeClassName: 'active',
-      index: false,
+      index: false
     };
   },
 
   isActive() {
     return (this.props.isActive || this.context.router.isActive)(
-      {pathname: this.props.to, query: this.props.query}, this.props.index
+      {pathname: this.props.to, query: this.props.query},
+      this.props.index
     );
   },
 
   getClassName() {
     let _classNames = {};
 
-    if (this.props.className)
-      _classNames[this.props.className] = true;
+    if (this.props.className) _classNames[this.props.className] = true;
 
-    if (this.isActive())
-      _classNames[this.props.activeClassName] = true;
+    if (this.isActive()) _classNames[this.props.activeClassName] = true;
 
     return classNames(_classNames);
   },
@@ -52,11 +51,12 @@ const ListLink = React.createClass({
     let carriedProps = _.omit(this.props, 'activeClassName', 'isActive', 'index');
     return (
       <li className={this.getClassName()}>
-        <Link {...carriedProps} onlyActiveOnIndex={this.props.index}>{this.props.children}</Link>
+        <Link {...carriedProps} onlyActiveOnIndex={this.props.index}>
+          {this.props.children}
+        </Link>
       </li>
     );
   }
 });
 
 export default ListLink;
-
diff --git a/src/sentry/static/sentry/app/components/loadingError.jsx b/src/sentry/static/sentry/app/components/loadingError.jsx
index 270e92f8cc..5869a4b0f3 100644
--- a/src/sentry/static/sentry/app/components/loadingError.jsx
+++ b/src/sentry/static/sentry/app/components/loadingError.jsx
@@ -23,9 +23,13 @@ const LoadingError = React.createClass({
         <p>
           {this.props.message}
           {this.props.onRetry &&
-            <a onClick={this.props.onRetry} className="btn btn-default btn-sm"
-               style={{marginLeft: 5}}>{t('Retry')}</a>
-          }
+            <a
+              onClick={this.props.onRetry}
+              className="btn btn-default btn-sm"
+              style={{marginLeft: 5}}
+            >
+              {t('Retry')}
+            </a>}
         </p>
       </div>
     );
@@ -33,4 +37,3 @@ const LoadingError = React.createClass({
 });
 
 export default LoadingError;
-
diff --git a/src/sentry/static/sentry/app/components/loadingIndicator.jsx b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
index 54917bdd9d..a471bd02a4 100644
--- a/src/sentry/static/sentry/app/components/loadingIndicator.jsx
+++ b/src/sentry/static/sentry/app/components/loadingIndicator.jsx
@@ -11,7 +11,7 @@ function LoadingIndicator(props) {
 
   return (
     <div className={classNames(props.className, classes)}>
-      <div className="loading-indicator"></div>
+      <div className="loading-indicator" />
       <div className="loading-message">{props.children}</div>
     </div>
   );
@@ -23,4 +23,3 @@ LoadingIndicator.propTypes = {
 };
 
 export default LoadingIndicator;
-
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index f5fdce02fe..cca5948362 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -17,7 +17,7 @@ const MenuItem = React.createClass({
     to: React.PropTypes.string,
     query: React.PropTypes.object,
     linkClassName: React.PropTypes.string,
-    onClick: React.PropTypes.func,
+    onClick: React.PropTypes.func
   },
 
   handleClick(e) {
@@ -31,19 +31,24 @@ const MenuItem = React.createClass({
     if (this.props.to) {
       return (
         <Link
-            to={{pathname: this.props.to, query: this.props.query}}
-            title={this.props.title}
-            onClick={this.handleClick}
-            className={this.props.linkClassName}
-            tabIndex="-1">
+          to={{pathname: this.props.to, query: this.props.query}}
+          title={this.props.title}
+          onClick={this.handleClick}
+          className={this.props.linkClassName}
+          tabIndex="-1"
+        >
           {this.props.children}
         </Link>
       );
     }
     return (
-      <a title={this.props.title} onClick={this.handleClick}
-          href={this.props.href} className={this.props.linkClassName}
-          tabIndex="-1">
+      <a
+        title={this.props.title}
+        onClick={this.handleClick}
+        href={this.props.href}
+        className={this.props.linkClassName}
+        tabIndex="-1"
+      >
         {this.props.children}
       </a>
     );
@@ -52,8 +57,8 @@ const MenuItem = React.createClass({
   render() {
     let classes = {
       'dropdown-header': this.props.header,
-      'divider': this.props.divider,
-      'active': this.props.isActive
+      divider: this.props.divider,
+      active: this.props.isActive
     };
 
     let children = null;
@@ -65,11 +70,14 @@ const MenuItem = React.createClass({
       children = this.renderAnchor();
     }
 
-
     return (
-      <li role="presentation" title={null} href={null}
+      <li
+        role="presentation"
+        title={null}
+        href={null}
         className={classNames(this.props.className, classes)}
-        onClick={this.props.onClick}>
+        onClick={this.props.onClick}
+      >
         {children}
       </li>
     );
diff --git a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
index 1ab5079164..dc1c713635 100644
--- a/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
+++ b/src/sentry/static/sentry/app/components/missingProjectMembership.jsx
@@ -10,9 +10,7 @@ const MissingProjectMembership = React.createClass({
     team: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -26,27 +24,30 @@ const MissingProjectMembership = React.createClass({
       loading: true
     });
 
-    this.api.joinTeam({
-      orgId: this.props.organization.slug,
-      teamId: this.props.team.slug
-    }, {
-      success: () => {
-        this.setState({
-          loading: false,
-          error: false
-        });
+    this.api.joinTeam(
+      {
+        orgId: this.props.organization.slug,
+        teamId: this.props.team.slug
       },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-        AlertActions.addAlert({
+      {
+        success: () => {
+          this.setState({
+            loading: false,
+            error: false
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true
+          });
+          AlertActions.addAlert({
             message: 'There was an error while trying to join the team.',
             type: 'error'
-        });
+          });
+        }
       }
-    });
+    );
   },
 
   render() {
@@ -56,25 +57,28 @@ const MissingProjectMembership = React.createClass({
     return (
       <div className="container">
         <div className="box alert-box">
-          <span className="icon icon-exclamation"></span>
-          <p>{'You\'re not a member of this project.'}</p>
-          {openMembership ?
-            <p>{t('To view this data you must first join the %s team.', team.name)}</p>
-          :
-            <p>{t('To view this data you must first request access to the %s team.', team.name)}</p>
-          }
+          <span className="icon icon-exclamation" />
+          <p>{"You're not a member of this project."}</p>
+          {openMembership
+            ? <p>{t('To view this data you must first join the %s team.', team.name)}</p>
+            : <p>
+                {t(
+                  'To view this data you must first request access to the %s team.',
+                  team.name
+                )}
+              </p>}
           <p>
-            {this.state.loading ?
-              <a className="btn btn-default btn-loading btn-disabled">...</a>
-            : (team.isPending ?
-              <a className="btn btn-default btn-disabled">{t('Request Pending')}</a>
-            : (openMembership ?
-              <a className="btn btn-default"
-                 onClick={this.joinTeam}>{t('Join Team')}</a>
-            :
-              <a className="btn btn-default"
-                 onClick={this.joinTeam}>{t('Request Access')}</a>
-            ))}
+            {this.state.loading
+              ? <a className="btn btn-default btn-loading btn-disabled">...</a>
+              : team.isPending
+                  ? <a className="btn btn-default btn-disabled">{t('Request Pending')}</a>
+                  : openMembership
+                      ? <a className="btn btn-default" onClick={this.joinTeam}>
+                          {t('Join Team')}
+                        </a>
+                      : <a className="btn btn-default" onClick={this.joinTeam}>
+                          {t('Request Access')}
+                        </a>}
           </p>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/mutedBox.jsx b/src/sentry/static/sentry/app/components/mutedBox.jsx
index e68b16beed..44a5769fd0 100644
--- a/src/sentry/static/sentry/app/components/mutedBox.jsx
+++ b/src/sentry/static/sentry/app/components/mutedBox.jsx
@@ -17,15 +17,20 @@ const MutedBox = React.createClass({
       <div className="box">
         <span className="icon icon-soundoff" />
         <p>
-          {statusDetails.ignoreUntil ?
-            <span>{t(
-              'This issue has been ignored until %s',
-              <strong><DateTime date={statusDetails.ignoreUntil} /></strong>
-            )} &mdash; </span>
-          :
-            <span>{t('This issue has been ignored')} &mdash; </span>
-          }
-          {t('You will not be notified of any changes and it will not show up by default in feeds.')}
+          {statusDetails.ignoreUntil
+            ? <span>
+                {t(
+                  'This issue has been ignored until %s',
+                  <strong><DateTime date={statusDetails.ignoreUntil} /></strong>
+                )}
+                {' '}
+                —
+                {' '}
+              </span>
+            : <span>{t('This issue has been ignored')} — </span>}
+          {t(
+            'You will not be notified of any changes and it will not show up by default in feeds.'
+          )}
         </p>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/narrowLayout.jsx b/src/sentry/static/sentry/app/components/narrowLayout.jsx
index 4a2d9a4704..6bf3b8d3fe 100644
--- a/src/sentry/static/sentry/app/components/narrowLayout.jsx
+++ b/src/sentry/static/sentry/app/components/narrowLayout.jsx
@@ -15,7 +15,7 @@ const NarryLayout = React.createClass({
   render() {
     return (
       <div className="app">
-        <div className="pattern-bg"/>
+        <div className="pattern-bg" />
         <div className="container">
           <div className="box box-modal">
             <div className="box-header">
diff --git a/src/sentry/static/sentry/app/components/organizationIssueList.jsx b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
index 74172b86a1..48f7b8c421 100644
--- a/src/sentry/static/sentry/app/components/organizationIssueList.jsx
+++ b/src/sentry/static/sentry/app/components/organizationIssueList.jsx
@@ -29,11 +29,11 @@ const OrganizationIssueList = React.createClass({
 
   getQueryStringState(props) {
     let location = props.location;
-    let status = (location.query.hasOwnProperty('status')
+    let status = location.query.hasOwnProperty('status')
       ? location.query.status
-      : 'unresolved');
+      : 'unresolved';
     return {
-      status: status,
+      status: status
     };
   },
 
@@ -44,22 +44,33 @@ const OrganizationIssueList = React.createClass({
       <OrganizationHomeContainer>
         <div className="pull-right">
           <div className="btn-group">
-            <Link to={path}
-                  className={'btn btn-sm btn-default' + (status === 'unresolved' ? ' active' : '')}>
+            <Link
+              to={path}
+              className={
+                'btn btn-sm btn-default' + (status === 'unresolved' ? ' active' : '')
+              }
+            >
               {t('Unresolved')}
             </Link>
-            <Link to={{pathname: path, query: {status: ''}}}
-                  className={'btn btn-sm btn-default' + (status === '' ? ' active' : '')}>
+            <Link
+              to={{pathname: path, query: {status: ''}}}
+              className={'btn btn-sm btn-default' + (status === '' ? ' active' : '')}
+            >
               {t('All Issues')}
             </Link>
           </div>
         </div>
         <h3>{this.props.title}</h3>
-        <IssueList endpoint={this.props.endpoint} query={{
-          status: this.state.status,
-          statsPeriod: '24h',
-          per_page: this.props.pageSize || 25,
-        }} statsPeriod="24h" {...this.props} />
+        <IssueList
+          endpoint={this.props.endpoint}
+          query={{
+            status: this.state.status,
+            statsPeriod: '24h',
+            per_page: this.props.pageSize || 25
+          }}
+          statsPeriod="24h"
+          {...this.props}
+        />
       </OrganizationHomeContainer>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 230db31dba..a1a8d1db60 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -21,32 +21,39 @@ const HomeContainer = React.createClass({
       <div className="organization-home">
         <div className="sub-header flex flex-container flex-vertically-centered">
           <div>
-            <ProjectSelector
-                organization={org} />
+            <ProjectSelector organization={org} />
           </div>
           <div className="align-right hidden-xs">
-            {access.has('project:write') ?
-              <a href={`/organizations/${org.slug}/projects/new/`} className="btn btn-primary"
-                 style={{marginRight: 5}}>
-                {t('New Project')}
-              </a>
-            :
-              <a className="btn btn-primary btn-disabled tip" data-placement="bottom"
-                 title={t('You do not have enough permission to create new projects')}
-                 style={{marginRight: 5}}>
-                {t('New Project')}
-              </a>
-            }
-            {access.has('team:write') ?
-              <a href={`/organizations/${org.slug}/teams/new/`} className="btn btn-primary">
-                {t('New Team')}
-              </a>
-            :
-              <a className="btn btn-primary btn-disabled tip" data-placement="bottom"
-                 title={t('You do not have enough permission to create new teams')}>
-                {t('New Team')}
-              </a>
-            }
+            {access.has('project:write')
+              ? <a
+                  href={`/organizations/${org.slug}/projects/new/`}
+                  className="btn btn-primary"
+                  style={{marginRight: 5}}
+                >
+                  {t('New Project')}
+                </a>
+              : <a
+                  className="btn btn-primary btn-disabled tip"
+                  data-placement="bottom"
+                  title={t('You do not have enough permission to create new projects')}
+                  style={{marginRight: 5}}
+                >
+                  {t('New Project')}
+                </a>}
+            {access.has('team:write')
+              ? <a
+                  href={`/organizations/${org.slug}/teams/new/`}
+                  className="btn btn-primary"
+                >
+                  {t('New Team')}
+                </a>
+              : <a
+                  className="btn btn-primary btn-disabled tip"
+                  data-placement="bottom"
+                  title={t('You do not have enough permission to create new teams')}
+                >
+                  {t('New Team')}
+                </a>}
           </div>
         </div>
         <div className="container">
diff --git a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
index 62b1fd216f..3aa4b22873 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeSidebar.jsx
@@ -15,12 +15,12 @@ const HomeSidebar = React.createClass({
     // Allow injection via getsentry et all
     let org = this.getOrganization();
     let hooks = [];
-    HookStore.get('organization:sidebar').forEach((cb) => {
+    HookStore.get('organization:sidebar').forEach(cb => {
       hooks.push(cb(org));
     });
 
     return {
-      hooks: hooks,
+      hooks: hooks
     };
   },
 
@@ -34,24 +34,41 @@ const HomeSidebar = React.createClass({
       <div>
         <h6 className="nav-header">{t('Organization')}</h6>
         <ul className="nav nav-stacked">
-          <ListLink to={`/${orgId}/`} isActive={() => {
-            // return true if path matches /organizations/slug-name/teams/ OR /organizations/slug-name/all-teams/
-            return /^\/[^\/]+\/$/.test(this.context.location.pathname);
-          }}>{t('Dashboard')}</ListLink>
-          <ListLink to={`/organizations/${orgId}/teams/`} isActive={() => {
-            // return true if path matches /organizations/slug-name/teams/ OR /organizations/slug-name/all-teams/
-            return /^\/organizations\/[^\/]+\/(teams|all-teams)\/$/.test(this.context.location.pathname);
-          }}>{t('Projects & Teams')}</ListLink>
+          <ListLink
+            to={`/${orgId}/`}
+            isActive={() => {
+              // return true if path matches /organizations/slug-name/teams/ OR /organizations/slug-name/all-teams/
+              return /^\/[^\/]+\/$/.test(this.context.location.pathname);
+            }}
+          >
+            {t('Dashboard')}
+          </ListLink>
+          <ListLink
+            to={`/organizations/${orgId}/teams/`}
+            isActive={() => {
+              // return true if path matches /organizations/slug-name/teams/ OR /organizations/slug-name/all-teams/
+              return /^\/organizations\/[^\/]+\/(teams|all-teams)\/$/.test(
+                this.context.location.pathname
+              );
+            }}
+          >
+            {t('Projects & Teams')}
+          </ListLink>
           {access.has('org:read') &&
-            <ListLink to={`/organizations/${orgId}/stats/`}>{t('Stats')}</ListLink>
-          }
+            <ListLink to={`/organizations/${orgId}/stats/`}>{t('Stats')}</ListLink>}
         </ul>
         <div>
           <h6 className="nav-header with-divider">{t('Issues')}</h6>
           <ul className="nav nav-stacked">
-            <ListLink to={`/organizations/${orgId}/issues/assigned/`}>{t('Assigned to Me')}</ListLink>
-            <ListLink to={`/organizations/${orgId}/issues/bookmarks/`}>{t('Bookmarks')}</ListLink>
-            <ListLink to={`/organizations/${orgId}/issues/history/`}>{t('History')}</ListLink>
+            <ListLink to={`/organizations/${orgId}/issues/assigned/`}>
+              {t('Assigned to Me')}
+            </ListLink>
+            <ListLink to={`/organizations/${orgId}/issues/bookmarks/`}>
+              {t('Bookmarks')}
+            </ListLink>
+            <ListLink to={`/organizations/${orgId}/issues/history/`}>
+              {t('History')}
+            </ListLink>
           </ul>
         </div>
         {access.has('org:read') &&
@@ -62,33 +79,40 @@ const HomeSidebar = React.createClass({
                 <li>
                   <a href={`/organizations/${orgId}/members/`}>
                     {t('Members')}&nbsp;
-                    {access.has('org:write') && org.pendingAccessRequests > 0 &&
-                      <span className="badge" style={{marginLeft: 5}}>{org.pendingAccessRequests}</span>
-                    }
+                    {access.has('org:write') &&
+                      org.pendingAccessRequests > 0 &&
+                      <span className="badge" style={{marginLeft: 5}}>
+                        {org.pendingAccessRequests}
+                      </span>}
                   </a>
-                </li>
-              }
-              {features.has('sso') && access.has('org:admin') &&
-                <li><a href={`/organizations/${orgId}/auth/`}>{t('Auth')}</a></li>
-              }
-              {access.has('org:admin') && features.has('api-keys') &&
-                <li><a href={`/organizations/${orgId}/api-keys/`}>{t('API Keys')}</a></li>
-              }
+                </li>}
+              {features.has('sso') &&
+                access.has('org:admin') &&
+                <li><a href={`/organizations/${orgId}/auth/`}>{t('Auth')}</a></li>}
+              {access.has('org:admin') &&
+                features.has('api-keys') &&
+                <li>
+                  <a href={`/organizations/${orgId}/api-keys/`}>{t('API Keys')}</a>
+                </li>}
               {access.has('org:write') &&
-                <ListLink to={`/organizations/${orgId}/audit-log/`}>{t('Audit Log')}</ListLink>
-              }
+                <ListLink to={`/organizations/${orgId}/audit-log/`}>
+                  {t('Audit Log')}
+                </ListLink>}
               {access.has('org:write') &&
-                <ListLink to={`/organizations/${orgId}/rate-limits/`}>{t('Rate Limits')}</ListLink>
-              }
-              {features.has('repos') && access.has('org:write') &&
-                <ListLink to={`/organizations/${orgId}/repos/`}>{t('Repositories')}</ListLink>
-              }
+                <ListLink to={`/organizations/${orgId}/rate-limits/`}>
+                  {t('Rate Limits')}
+                </ListLink>}
+              {features.has('repos') &&
+                access.has('org:write') &&
+                <ListLink to={`/organizations/${orgId}/repos/`}>
+                  {t('Repositories')}
+                </ListLink>}
               {access.has('org:write') &&
-                <ListLink to={`/organizations/${orgId}/settings/`}>{t('Settings')}</ListLink>
-              }
+                <ListLink to={`/organizations/${orgId}/settings/`}>
+                  {t('Settings')}
+                </ListLink>}
             </ul>
-          </div>
-        }
+          </div>}
         {this.state.hooks}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
index d27ae5a352..0236a7c289 100644
--- a/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/organizationsLoader.jsx
@@ -9,12 +9,12 @@ const OrganizationsLoader = React.createClass({
   componentWillMount() {
     this.api.request('/organizations/', {
       query: {
-        'member': '1'
+        member: '1'
       },
-      success: (data) => {
+      success: data => {
         OrganizationStore.load(data);
         this.setState({
-          loading: false,
+          loading: false
         });
       },
       error: () => {
diff --git a/src/sentry/static/sentry/app/components/pagination.jsx b/src/sentry/static/sentry/app/components/pagination.jsx
index f2a3061d11..ce8b03807d 100644
--- a/src/sentry/static/sentry/app/components/pagination.jsx
+++ b/src/sentry/static/sentry/app/components/pagination.jsx
@@ -13,7 +13,7 @@ const Pagination = React.createClass({
     location: React.PropTypes.object
   },
 
-  render(){
+  render() {
     if (!this.props.pageLinks) {
       return null;
     }
@@ -40,16 +40,19 @@ const Pagination = React.createClass({
               query: {...location.query, cursor: links.previous.cursor}
             }}
             className={previousPageClassName}
-            disabled={links.previous.results === false}>
-            <span title={t('Previous')} className="icon-arrow-left"></span>
+            disabled={links.previous.results === false}
+          >
+            <span title={t('Previous')} className="icon-arrow-left" />
           </Link>
-          <Link to={{
+          <Link
+            to={{
               pathname: this.props.to || location.pathname,
               query: {...location.query, cursor: links.next.cursor}
             }}
             className={nextPageClassName}
-            disabled={links.next.results === false}>
-            <span title={t('Next')} className="icon-arrow-right"></span>
+            disabled={links.next.results === false}
+          >
+            <span title={t('Next')} className="icon-arrow-right" />
           </Link>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/pill.jsx b/src/sentry/static/sentry/app/components/pill.jsx
index 68306832eb..46d8dfd21f 100644
--- a/src/sentry/static/sentry/app/components/pill.jsx
+++ b/src/sentry/static/sentry/app/components/pill.jsx
@@ -1,11 +1,10 @@
 import React from 'react';
 
-
 const Pill = React.createClass({
   propTypes: {
     className: React.PropTypes.string,
     name: React.PropTypes.string,
-    value: React.PropTypes.any,
+    value: React.PropTypes.any
   },
 
   renderValue() {
@@ -32,8 +31,7 @@ const Pill = React.createClass({
     let [extraClass, renderedValue] = this.renderValue();
 
     return (
-      <li className={
-        (className || '') + (extraClass ? ' ' + extraClass : '')} {...props}>
+      <li className={(className || '') + (extraClass ? ' ' + extraClass : '')} {...props}>
         <span className="key">{name}</span>
         <span className="value">{renderedValue}{children}</span>
       </li>
diff --git a/src/sentry/static/sentry/app/components/pills.jsx b/src/sentry/static/sentry/app/components/pills.jsx
index 57cc6b24d9..869c53b73e 100644
--- a/src/sentry/static/sentry/app/components/pills.jsx
+++ b/src/sentry/static/sentry/app/components/pills.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 
-
 const Pills = React.createClass({
   render() {
     return (
diff --git a/src/sentry/static/sentry/app/components/pluginConfig.jsx b/src/sentry/static/sentry/app/components/pluginConfig.jsx
index 77672305bf..d290f719d7 100644
--- a/src/sentry/static/sentry/app/components/pluginConfig.jsx
+++ b/src/sentry/static/sentry/app/components/pluginConfig.jsx
@@ -12,7 +12,7 @@ const PluginConfig = React.createClass({
     organization: React.PropTypes.object.isRequired,
     project: React.PropTypes.object.isRequired,
     data: React.PropTypes.object.isRequired,
-    onDisablePlugin: React.PropTypes.func,
+    onDisablePlugin: React.PropTypes.func
   },
 
   mixins: [ApiMixin],
@@ -21,7 +21,7 @@ const PluginConfig = React.createClass({
     return {
       onDisablePlugin: () => {
         window.location.reload();
-      },
+      }
     };
   },
 
@@ -43,29 +43,28 @@ const PluginConfig = React.createClass({
 
   shouldComponentUpdate(nextProps, nextState) {
     return (
-      !_.isEqual(nextState, this.state) ||
-      !_.isEqual(nextProps.data, this.props.data)
+      !_.isEqual(nextState, this.state) || !_.isEqual(nextProps.data, this.props.data)
     );
   },
 
   loadPlugin(data) {
-    if (plugins.isLoaded(data))
-      return;
+    if (plugins.isLoaded(data)) return;
 
-    this.setState({
-      loading: true,
-    }, () => {
-      plugins.load(data, () => {
-        this.setState({loading: false});
-      });
-    });
+    this.setState(
+      {
+        loading: true
+      },
+      () => {
+        plugins.load(data, () => {
+          this.setState({loading: false});
+        });
+      }
+    );
   },
 
   getPluginEndpoint() {
     let {organization, project, data} = this.props;
-    return (
-      `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`
-    );
+    return `/projects/${organization.slug}/${project.slug}/plugins/${data.id}/`;
   },
 
   disablePlugin() {
@@ -76,7 +75,7 @@ const PluginConfig = React.createClass({
         this.props.onDisablePlugin();
         IndicatorStore.remove(loadingIndicator);
       },
-      error: (error) => {
+      error: error => {
         IndicatorStore.add(t('Unable to disable plugin. Please try again.'), 'error');
       }
     });
@@ -88,23 +87,22 @@ const PluginConfig = React.createClass({
     return (
       <div className={`box ref-plugin-config-${data.id}`}>
         <div className="box-header">
-          {data.canDisable && data.enabled &&
+          {data.canDisable &&
+            data.enabled &&
             <div className="pull-right">
-              <a className="btn btn-sm btn-default"
-                 onClick={this.disablePlugin}>{t('Disable')}</a>
-            </div>
-          }
+              <a className="btn btn-sm btn-default" onClick={this.disablePlugin}>
+                {t('Disable')}
+              </a>
+            </div>}
           <h3>{data.name}</h3>
         </div>
         <div className="box-content with-padding">
-          {this.state.loading ?
-            <LoadingIndicator />
-          :
-            plugins.get(data).renderSettings({
-              organization: this.props.organization,
-              project: this.props.project,
-            })
-          }
+          {this.state.loading
+            ? <LoadingIndicator />
+            : plugins.get(data).renderSettings({
+                organization: this.props.organization,
+                project: this.props.project
+              })}
         </div>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/components/projectHeader/index.jsx b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
index 180f3f40f7..60e68fe318 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/index.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/index.jsx
@@ -1,7 +1,6 @@
 import React from 'react';
 import {Link} from 'react-router';
 
-
 import ProjectSelector from './projectSelector';
 import BookmarkToggle from '../projects/bookmarkToggle';
 
@@ -22,61 +21,68 @@ const ProjectHeader = React.createClass({
     let access = new Set(org.access);
 
     return (
-        <div className="sub-header flex flex-container flex-vertically-centered">
-          <div className="p-t-1">
-            <ProjectSelector
-                organization={org}
-                projectId={project.slug}/>
+      <div className="sub-header flex flex-container flex-vertically-centered">
+        <div className="p-t-1">
+          <ProjectSelector organization={org} projectId={project.slug} />
 
-              <ul className="nav nav-tabs">
-              <li className={navSection == 'stream' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/`}>
-                  {t('Issues')}
-                </Link>
-              </li>
-              {features.has('global-events') &&
-                <li className={navSection == 'events' ? 'active' : ''}>
-                  <Link to={`/${org.slug}/${project.slug}/events/`}>
-                    {t('Events')}
-                  </Link>
-                </li>
-              }
-              <li className={navSection == 'dashboard' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/dashboard/`}>
-                  {t('Overview')}
-                </Link>
-              </li>
-              <li className={navSection == 'user-feedback' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
-                  {t('User Feedback')}
+          <ul className="nav nav-tabs">
+            <li className={navSection == 'stream' ? 'active' : ''}>
+              <Link to={`/${org.slug}/${project.slug}/`}>
+                {t('Issues')}
+              </Link>
+            </li>
+            {features.has('global-events') &&
+              <li className={navSection == 'events' ? 'active' : ''}>
+                <Link to={`/${org.slug}/${project.slug}/events/`}>
+                  {t('Events')}
                 </Link>
-              </li>
-              <li className={navSection == 'releases' ? 'active' : ''}>
-                <Link to={`/${org.slug}/${project.slug}/releases/`}>
-                  {t('Releases')}
-                </Link>
-              </li>
-            </ul>
-          </div>
+              </li>}
+            <li className={navSection == 'dashboard' ? 'active' : ''}>
+              <Link to={`/${org.slug}/${project.slug}/dashboard/`}>
+                {t('Overview')}
+              </Link>
+            </li>
+            <li className={navSection == 'user-feedback' ? 'active' : ''}>
+              <Link to={`/${org.slug}/${project.slug}/user-feedback/`}>
+                {t('User Feedback')}
+              </Link>
+            </li>
+            <li className={navSection == 'releases' ? 'active' : ''}>
+              <Link to={`/${org.slug}/${project.slug}/releases/`}>
+                {t('Releases')}
+              </Link>
+            </li>
+          </ul>
+        </div>
 
-          <div className="align-right project-actions">
-            <BookmarkToggle orgId={org.slug} project={project}>
-              <a className="btn btn-sm btn-default">
-                <span className={project.isBookmarked ? 'icon icon-star-solid active' : 'icon icon-star-solid'}/>
-                {project.isBookmarked ?
-                  <span>{t('Unstar Project')}</span>
-                :
-                  <span>{t('Star Project')}</span>
+        <div className="align-right project-actions">
+          <BookmarkToggle orgId={org.slug} project={project}>
+            <a className="btn btn-sm btn-default">
+              <span
+                className={
+                  project.isBookmarked
+                    ? 'icon icon-star-solid active'
+                    : 'icon icon-star-solid'
                 }
-              </a>
-            </BookmarkToggle>
-            {access.has('project:write') &&
-              <a className={navSection == 'settings' ? 'btn btn-sm btn-default active' : 'btn btn-sm btn-default'} href={`/${org.slug}/${project.slug}/settings/`}>
-                <span className="icon icon-settings" /> {t('Project Settings')}
-              </a>
-            }
-          </div>
+              />
+              {project.isBookmarked
+                ? <span>{t('Unstar Project')}</span>
+                : <span>{t('Star Project')}</span>}
+            </a>
+          </BookmarkToggle>
+          {access.has('project:write') &&
+            <a
+              className={
+                navSection == 'settings'
+                  ? 'btn btn-sm btn-default active'
+                  : 'btn btn-sm btn-default'
+              }
+              href={`/${org.slug}/${project.slug}/settings/`}
+            >
+              <span className="icon icon-settings" /> {t('Project Settings')}
+            </a>}
         </div>
+      </div>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index 78ce70743f..daa38833a8 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -93,8 +93,7 @@ const ProjectSelector = React.createClass({
 
   getProjectNode(team, project, highlightText, hasSingleTeam, isSelected) {
     let projectId = project.slug;
-    let label = this.getProjectLabel(team, project, hasSingleTeam,
-                                     highlightText);
+    let label = this.getProjectLabel(team, project, hasSingleTeam, highlightText);
 
     let menuItemProps = {
       key: projectId, // TODO: what if two projects w/ same name under diff orgs?
@@ -110,7 +109,7 @@ const ProjectSelector = React.createClass({
 
     return (
       <MenuItem {...menuItemProps}>
-        {project.isBookmarked && <span className="icon-star-solid bookmark "></span>}
+        {project.isBookmarked && <span className="icon-star-solid bookmark " />}
         {label}
       </MenuItem>
     );
@@ -120,8 +119,13 @@ const ProjectSelector = React.createClass({
     let label, text;
     if (!hasSingleTeam && project.name.indexOf(team.name) === -1) {
       label = (
-        <span>{team.name} / <ProjectLabel
-            project={project} organization={this.props.organization}/></span>
+        <span>
+          {team.name}
+          {' '}
+          /
+          {' '}
+          <ProjectLabel project={project} organization={this.props.organization} />
+        </span>
       );
       text = team.name + ' / ' + project.name;
     } else {
@@ -236,16 +240,18 @@ const ProjectSelector = React.createClass({
     let projectList = [];
     let activeTeam;
     let activeProject;
-    org.teams.forEach((team) => {
+    org.teams.forEach(team => {
       if (!team.isMember) {
         return;
       }
-      team.projects.forEach((project) => {
+      team.projects.forEach(project => {
         if (project.slug == this.props.projectId) {
           activeProject = project;
           activeTeam = team;
         }
-        let fullName = [team.name, project.name, team.slug, project.slug].join(' ').toLowerCase();
+        let fullName = [team.name, project.name, team.slug, project.slug]
+          .join(' ')
+          .toLowerCase();
         if (filter && fullName.indexOf(filter) === -1) {
           return;
         }
@@ -268,7 +274,13 @@ const ProjectSelector = React.createClass({
     });
 
     let children = projectList.map(([team, project], index) => {
-      return this.getProjectNode(team, project, this.state.filter, hasSingleTeam, this.state.currentIndex === index);
+      return this.getProjectNode(
+        team,
+        project,
+        this.state.filter,
+        hasSingleTeam,
+        this.state.currentIndex === index
+      );
     });
     return (
       <div className="project-select" ref="container">
@@ -276,13 +288,16 @@ const ProjectSelector = React.createClass({
           <Link to={`/${org.slug}/`} className="home-crumb">
             <span className="icon-home" />
           </Link>
-          {this.state.activeProject ?
-            this.getLinkNode(this.state.activeTeam, this.state.activeProject)
-          :
-            t('Select a project')
-          }
-          <DropdownLink ref="dropdownLink" title="" topLevelClasses="project-dropdown"
-              onOpen={this.onOpen} onClose={this.onClose}>
+          {this.state.activeProject
+            ? this.getLinkNode(this.state.activeTeam, this.state.activeProject)
+            : t('Select a project')}
+          <DropdownLink
+            ref="dropdownLink"
+            title=""
+            topLevelClasses="project-dropdown"
+            onOpen={this.onOpen}
+            onClose={this.onClose}
+          >
             <li className="project-filter" key="_filter">
               <input
                 value={this.state.filter}
@@ -292,7 +307,8 @@ const ProjectSelector = React.createClass({
                 onKeyUp={this.onKeyUp}
                 onKeyDown={this.onKeyDown}
                 onBlur={this.onFilterBlur}
-                ref="filter" />
+                ref="filter"
+              />
             </li>
             {children}
           </DropdownLink>
diff --git a/src/sentry/static/sentry/app/components/projectLabel.jsx b/src/sentry/static/sentry/app/components/projectLabel.jsx
index daa998f94e..4a681606dd 100644
--- a/src/sentry/static/sentry/app/components/projectLabel.jsx
+++ b/src/sentry/static/sentry/app/components/projectLabel.jsx
@@ -4,12 +4,10 @@ import PureRenderMixin from 'react-addons-pure-render-mixin';
 const ProjectLabel = React.createClass({
   propTypes: {
     project: React.PropTypes.object,
-    organization: React.PropTypes.object,
+    organization: React.PropTypes.object
   },
 
-  mixins: [
-    PureRenderMixin
-  ],
+  mixins: [PureRenderMixin],
 
   render() {
     let project = this.props.project;
diff --git a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
index bdcf217bd5..0feb60306a 100644
--- a/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
+++ b/src/sentry/static/sentry/app/components/projects/bookmarkToggle.jsx
@@ -7,12 +7,10 @@ import {update as projectUpdate} from '../../actionCreators/projects';
 const BookmarkToggle = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
-    project: React.PropTypes.object.isRequired,
+    project: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   handleBookmarkClick() {
     let {project} = this.props;
@@ -33,7 +31,6 @@ const BookmarkToggle = React.createClass({
         {this.props.children}
       </span>
     );
-
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
index 02c304b293..b29f6f9036 100644
--- a/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
+++ b/src/sentry/static/sentry/app/components/releaseProjectStatSparkline.jsx
@@ -13,7 +13,7 @@ const ReleaseProjectStatSparkline = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string,
     project: React.PropTypes.object,
-    version: React.PropTypes.string,
+    version: React.PropTypes.string
   },
 
   mixins: [ApiMixin],
@@ -23,7 +23,7 @@ const ReleaseProjectStatSparkline = React.createClass({
       loading: true,
       error: false,
       stats: [],
-      newIssueCount: null,
+      newIssueCount: null
     };
   },
 
@@ -36,13 +36,13 @@ const ReleaseProjectStatSparkline = React.createClass({
       data: 'stat=received',
       success: (data, _, jqXHR) => {
         this.setState({
-          stats: data,
+          stats: data
         });
         this.getNewIssuesCount();
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -57,12 +57,12 @@ const ReleaseProjectStatSparkline = React.createClass({
       success: (data, _, jqXHR) => {
         this.setState({
           newIssueCount: data.newGroups,
-          loading: false,
+          loading: false
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -72,24 +72,28 @@ const ReleaseProjectStatSparkline = React.createClass({
     let {orgId, project, version} = this.props;
     let newIssueCount = this.state.newIssueCount;
     let values = this.state.stats.map(tuple => tuple[1]);
-    if (this.state.loading)
-      return <LoadingIndicator/>;
+    if (this.state.loading) return <LoadingIndicator />;
 
-    if (this.state.error)
-      return <LoadingError/>;
+    if (this.state.error) return <LoadingError />;
     return (
       <li>
         <div className="sparkline pull-right" style={{width: 96}}>
           <Sparklines data={values} width={100} height={32}>
-            <SparklinesLine style={{stroke: '#8f85d4', fill: 'none', strokeWidth: 3}}/>
+            <SparklinesLine style={{stroke: '#8f85d4', fill: 'none', strokeWidth: 3}} />
           </Sparklines>
         </div>
-        <Link to={`/${orgId}/${project.slug}/releases/${encodeURIComponent(version)}/overview/`}>
+        <Link
+          to={`/${orgId}/${project.slug}/releases/${encodeURIComponent(version)}/overview/`}
+        >
           <h6 className="m-b-0">
             {project.name}
           </h6>
           <p className="m-b-0 text-muted">
-            <small>{newIssueCount > 0 ? tn('%d new issue', '%d new issues', newIssueCount) : t('No new issues')}</small>
+            <small>
+              {newIssueCount > 0
+                ? tn('%d new issue', '%d new issues', newIssueCount)
+                : t('No new issues')}
+            </small>
           </p>
         </Link>
       </li>
diff --git a/src/sentry/static/sentry/app/components/releaseStats.jsx b/src/sentry/static/sentry/app/components/releaseStats.jsx
index e972ea8a78..26fef7f7a7 100644
--- a/src/sentry/static/sentry/app/components/releaseStats.jsx
+++ b/src/sentry/static/sentry/app/components/releaseStats.jsx
@@ -5,28 +5,29 @@ import {t} from '../locale';
 
 const ReleaseStats = React.createClass({
   propTypes: {
-    release: React.PropTypes.object,
+    release: React.PropTypes.object
   },
 
   mixins: [
     TooltipMixin({
       selector: '.tip'
-    }),
+    })
   ],
 
   render() {
     let release = this.props.release;
     let commitCount = release.commitCount || 0;
-    let authorCount = release.authors && release.authors.length || 0;
+    let authorCount = (release.authors && release.authors.length) || 0;
     if (commitCount === 0) {
       return null;
     }
 
-    let releaseSummary = (
+    let releaseSummary =
       commitCount +
       t(commitCount !== 1 ? ' commits ' : ' commit ') +
-      t('by ') + authorCount +
-      t(authorCount !== 1 ? ' authors' : ' author'));
+      t('by ') +
+      authorCount +
+      t(authorCount !== 1 ? ' authors' : ' author');
 
     return (
       <div className="release-stats">
@@ -34,9 +35,11 @@ const ReleaseStats = React.createClass({
         <div className="avatar-grid">
           {release.authors.map(author => {
             return (
-              <span className="avatar-grid-item tip"
-                   title={author.name + ' ' + author.email}>
-                <Avatar user={author}/>
+              <span
+                className="avatar-grid-item tip"
+                title={author.name + ' ' + author.email}
+              >
+                <Avatar user={author} />
               </span>
             );
           })}
diff --git a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
index 2e8b349c47..6bdf657898 100644
--- a/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
+++ b/src/sentry/static/sentry/app/components/repositoryFileSummary.jsx
@@ -5,9 +5,10 @@ import {t, tn} from '../locale';
 function Collapsed(props) {
   return (
     <li className="list-group-item list-group-item-sm align-center">
-      <span className="icon-container">
-      </span>
-      <a onClick={props.onClick}>{tn(('Show %d collapsed file'), ('Show %d collapsed files'), props.count)}</a>
+      <span className="icon-container" />
+      <a onClick={props.onClick}>
+        {tn('Show %d collapsed file', 'Show %d collapsed files', props.count)}
+      </a>
     </li>
   );
 }
@@ -20,7 +21,7 @@ Collapsed.propTypes = {
 const RepositoryFileSummary = React.createClass({
   propTypes: {
     fileChangeSummary: React.PropTypes.object,
-    repository: React.PropTypes.string,
+    repository: React.PropTypes.string
   },
 
   statics: {
@@ -30,7 +31,7 @@ const RepositoryFileSummary = React.createClass({
   getInitialState() {
     return {
       loading: true,
-      collapsed: true,
+      collapsed: true
     };
   },
 
@@ -51,33 +52,39 @@ const RepositoryFileSummary = React.createClass({
     }
     let numCollapsed = fileCount - files.length;
     let canCollapse = fileCount > MAX;
-    return(
+    return (
       <div>
         <h5>
-          {tn(('%d file changed in ' + repository), ('%d files changed in ' + repository), fileCount)}
+          {tn(
+            '%d file changed in ' + repository,
+            '%d files changed in ' + repository,
+            fileCount
+          )}
         </h5>
         <ul className="list-group list-group-striped m-b-2">
-        {files.map(filename => {
-          let {id, authors, types} = fileChangeSummary[filename];
-          return (
-            <FileChange
-              key={id}
-              filename={filename}
-              authors={Object.values(authors)}
-              types={types}
+          {files.map(filename => {
+            let {id, authors, types} = fileChangeSummary[filename];
+            return (
+              <FileChange
+                key={id}
+                filename={filename}
+                authors={Object.values(authors)}
+                types={types}
               />
-          );
-        })}
-        {numCollapsed > 0 && <Collapsed onClick={this.onCollapseToggle} count={numCollapsed}/>}
-        {numCollapsed === 0 && canCollapse &&
-          <li className="list-group-item list-group-item-sm align-center">
-            <span className="icon-container"></span>
-            <a onClick={this.onCollapseToggle}>{t('Collapse')}</a>
-          </li>
-        }
+            );
+          })}
+          {numCollapsed > 0 &&
+            <Collapsed onClick={this.onCollapseToggle} count={numCollapsed} />}
+          {numCollapsed === 0 &&
+            canCollapse &&
+            <li className="list-group-item list-group-item-sm align-center">
+              <span className="icon-container" />
+              <a onClick={this.onCollapseToggle}>{t('Collapse')}</a>
+            </li>}
         </ul>
-      </div>);
-}
+      </div>
+    );
+  }
 });
 
 export default RepositoryFileSummary;
diff --git a/src/sentry/static/sentry/app/components/resultGrid.jsx b/src/sentry/static/sentry/app/components/resultGrid.jsx
index a24914c2fc..6c4c5a4236 100644
--- a/src/sentry/static/sentry/app/components/resultGrid.jsx
+++ b/src/sentry/static/sentry/app/components/resultGrid.jsx
@@ -13,11 +13,11 @@ const Filter = React.createClass({
     queryKey: React.PropTypes.string.isRequired,
     options: React.PropTypes.array.isRequired,
     path: React.PropTypes.string.isRequired,
-    value: React.PropTypes.any,
+    value: React.PropTypes.any
   },
 
   getCurrentLabel() {
-    let selected = this.props.options.filter((item) => {
+    let selected = this.props.options.filter(item => {
       return item[0] === (this.props.value || '');
     })[0];
     if (selected) return this.props.name + ': ' + selected[1];
@@ -25,25 +25,28 @@ const Filter = React.createClass({
   },
 
   getDefaultItem() {
-      let query = $.extend({}, this.props.location.query, {
-        cursor: ''
-      });
-      delete query[this.props.queryKey];
+    let query = $.extend({}, this.props.location.query, {
+      cursor: ''
+    });
+    delete query[this.props.queryKey];
 
-      return (
-        <MenuItem
-          key=""
-          isActive={this.props.value === '' || !this.props.value}
-          to={this.props.path}
-          query={query}>Any</MenuItem>
-      );
+    return (
+      <MenuItem
+        key=""
+        isActive={this.props.value === '' || !this.props.value}
+        to={this.props.path}
+        query={query}
+      >
+        Any
+      </MenuItem>
+    );
   },
 
   getSelector() {
     return (
       <DropdownLink title={this.getCurrentLabel()}>
         {this.getDefaultItem()}
-        {this.props.options.map((item) => {
+        {this.props.options.map(item => {
           let filterQuery = {};
           filterQuery[this.props.queryKey] = item[0];
           filterQuery.cursor = '';
@@ -53,7 +56,10 @@ const Filter = React.createClass({
               key={item[0]}
               isActive={this.props.value === item[0]}
               to={this.props.path}
-              query={query}>{item[1]}</MenuItem>
+              query={query}
+            >
+              {item[1]}
+            </MenuItem>
           );
         })}
       </DropdownLink>
@@ -63,11 +69,9 @@ const Filter = React.createClass({
   render() {
     return (
       <div className="filter-options">
-        {this.props.options.length === 1 ?
-          <strong>{this.getCurrentLabel()}</strong>
-        :
-          this.getSelector()
-        }
+        {this.props.options.length === 1
+          ? <strong>{this.getCurrentLabel()}</strong>
+          : this.getSelector()}
       </div>
     );
   }
@@ -78,11 +82,11 @@ const SortBy = React.createClass({
     options: React.PropTypes.array.isRequired,
     path: React.PropTypes.string.isRequired,
     location: React.PropTypes.string.isRequired,
-    value: React.PropTypes.any,
+    value: React.PropTypes.any
   },
 
   getCurrentSortLabel() {
-    return this.props.options.filter((item) => {
+    return this.props.options.filter(item => {
       return item[0] === this.props.value;
     })[0][1];
   },
@@ -90,17 +94,20 @@ const SortBy = React.createClass({
   getSortBySelector() {
     return (
       <DropdownLink title={this.getCurrentSortLabel()} className="sorted-by">
-        {this.props.options.map((item) => {
+        {this.props.options.map(item => {
           let query = $.extend({}, this.props.location.query, {
             sortBy: item[0],
-            cursor: '',
+            cursor: ''
           });
           return (
             <MenuItem
               isActive={this.props.value === item[0]}
               key={item[0]}
               to={this.props.path}
-              query={query}>{item[1]}</MenuItem>
+              query={query}
+            >
+              {item[1]}
+            </MenuItem>
           );
         })}
       </DropdownLink>
@@ -108,17 +115,14 @@ const SortBy = React.createClass({
   },
 
   render() {
-    if (this.props.options.length === 0)
-      return null;
+    if (this.props.options.length === 0) return null;
 
     return (
       <div className="sort-options">
         Showing results sorted by
-        {this.props.options.length === 1 ?
-          <strong className="sorted-by">{this.getCurrentSortLabel()}</strong>
-        :
-          this.getSortBySelector()
-        }
+        {this.props.options.length === 1
+          ? <strong className="sorted-by">{this.getCurrentSortLabel()}</strong>
+          : this.getSortBySelector()}
       </div>
     );
   }
@@ -139,7 +143,7 @@ const ResultGrid = React.createClass({
     method: React.PropTypes.string,
     options: React.PropTypes.array,
     path: React.PropTypes.string,
-    sortOptions: React.PropTypes.array,
+    sortOptions: React.PropTypes.array
   },
 
   mixins: [ApiMixin],
@@ -153,13 +157,17 @@ const ResultGrid = React.createClass({
       sortOptions: [],
       filters: {},
       defaultSort: '',
-      keyForRow: function(row) { return row.id; },
-      columnsForRow: function(row) { return []; },
+      keyForRow: function(row) {
+        return row.id;
+      },
+      columnsForRow: function(row) {
+        return [];
+      },
       defaultParams: {
-        per_page: 50,
+        per_page: 50
       },
       hasPagination: true,
-      hasSearch: false,
+      hasSearch: false
     };
   },
 
@@ -173,7 +181,7 @@ const ResultGrid = React.createClass({
       pageLinks: null,
       query: queryParams.query || '',
       sortBy: queryParams.sortBy || this.props.defaultSort,
-      filters: Object.assign({}, queryParams),
+      filters: Object.assign({}, queryParams)
     };
   },
 
@@ -183,14 +191,17 @@ const ResultGrid = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     let queryParams = (nextProps.location || {}).query || {};
-    this.setState({
-      query: queryParams.query || '',
-      sortBy: queryParams.sortBy || this.props.defaultSort,
-      filters: Object.assign({}, queryParams),
-      pageLinks: null,
-      loading: true,
-      error: false,
-    }, this.fetchData);
+    this.setState(
+      {
+        query: queryParams.query || '',
+        sortBy: queryParams.sortBy || this.props.defaultSort,
+        filters: Object.assign({}, queryParams),
+        pageLinks: null,
+        loading: true,
+        error: false
+      },
+      this.fetchData
+    );
   },
 
   remountComponent() {
@@ -198,16 +209,22 @@ const ResultGrid = React.createClass({
   },
 
   refresh() {
-    this.setState({
-      loading: true,
-    }, this.fetchData());
+    this.setState(
+      {
+        loading: true
+      },
+      this.fetchData()
+    );
   },
 
   fetchData() {
     // TODO(dcramer): this should whitelist filters/sortBy/cursor/perPage
-    let queryParams = $.extend({}, this.props.defaultParams,
+    let queryParams = $.extend(
+      {},
+      this.props.defaultParams,
       {sortBy: this.state.sortBy},
-      (this.props.location || {}).query || {});
+      (this.props.location || {}).query || {}
+    );
 
     this.api.request(this.props.endpoint, {
       method: this.props.method,
@@ -217,13 +234,13 @@ const ResultGrid = React.createClass({
           loading: false,
           error: false,
           rows: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -234,7 +251,7 @@ const ResultGrid = React.createClass({
     let {query} = this.state;
     let targetQueryParams = jQuery.extend({}, location.query || {}, {
       query: query,
-      cursor: '',
+      cursor: ''
     });
 
     e.preventDefault();
@@ -280,7 +297,7 @@ const ResultGrid = React.createClass({
   },
 
   renderResults() {
-    return this.state.rows.map((row) => {
+    return this.state.rows.map(row => {
       return (
         <tr key={this.props.keyForRow(row)}>
           {this.props.columnsForRow(row)}
@@ -298,27 +315,30 @@ const ResultGrid = React.createClass({
             <div className="result-grid-search">
               <form onSubmit={this.onSearch}>
                 <div className="form-group">
-                  <input type="text"
-                         className="form-control input-search"
-                         placeholder="search"
-                         style={{width: 300}}
-                         name="query"
-                         ref="searchInput"
-                         autoComplete="off"
-                         value={this.state.query}
-                         onChange={this.onQueryChange} />
+                  <input
+                    type="text"
+                    className="form-control input-search"
+                    placeholder="search"
+                    style={{width: 300}}
+                    name="query"
+                    ref="searchInput"
+                    autoComplete="off"
+                    value={this.state.query}
+                    onChange={this.onQueryChange}
+                  />
                   <button type="submit" className="btn btn-sm btn-primary">
                     <span className="icon-search" />
                   </button>
                 </div>
               </form>
-            </div>
-          }
-          <SortBy options={this.props.sortOptions}
-                  value={this.state.sortBy}
-                  path={this.props.path}
-                  location={this.props.location} />
-          {Object.keys(filters).map((filterKey) => {
+            </div>}
+          <SortBy
+            options={this.props.sortOptions}
+            value={this.state.sortBy}
+            path={this.props.path}
+            location={this.props.location}
+          />
+          {Object.keys(filters).map(filterKey => {
             return (
               <Filter
                 key={filterKey}
@@ -326,8 +346,9 @@ const ResultGrid = React.createClass({
                 value={this.state.filters[filterKey]}
                 path={this.props.path}
                 location={this.props.location}
-                {...filters[filterKey]} />
-              );
+                {...filters[filterKey]}
+              />
+            );
           })}
         </div>
 
@@ -338,24 +359,21 @@ const ResultGrid = React.createClass({
             </tr>
           </thead>
           <tbody>
-            {this.state.loading ?
-              this.renderLoading()
-            : (this.state.error ?
-              this.renderError()
-            : (this.state.rows.length === 0 ?
-              this.renderNoResults()
-            :
-              this.renderResults()
-            ))}
+            {this.state.loading
+              ? this.renderLoading()
+              : this.state.error
+                  ? this.renderError()
+                  : this.state.rows.length === 0
+                      ? this.renderNoResults()
+                      : this.renderResults()}
           </tbody>
         </table>
-        {this.props.hasPagination && this.state.pageLinks &&
-          <Pagination pageLinks={this.state.pageLinks}/>
-        }
+        {this.props.hasPagination &&
+          this.state.pageLinks &&
+          <Pagination pageLinks={this.state.pageLinks} />}
       </div>
     );
   }
 });
 
 export default ResultGrid;
-
diff --git a/src/sentry/static/sentry/app/components/searchBar.jsx b/src/sentry/static/sentry/app/components/searchBar.jsx
index 34edc3e7fe..b4b9339a64 100644
--- a/src/sentry/static/sentry/app/components/searchBar.jsx
+++ b/src/sentry/static/sentry/app/components/searchBar.jsx
@@ -39,9 +39,8 @@ const SearchBar = React.createClass({
   },
 
   clearSearch() {
-    this.setState(
-      {query: this.props.defaultQuery},
-      () => this.props.onSearch(this.state.query)
+    this.setState({query: this.props.defaultQuery}, () =>
+      this.props.onSearch(this.state.query)
     );
   },
 
@@ -64,7 +63,9 @@ const SearchBar = React.createClass({
       <div className="search">
         <form className="form-horizontal" ref="searchForm" onSubmit={this.onSubmit}>
           <div>
-            <input type="text" className="search-input form-control"
+            <input
+              type="text"
+              className="search-input form-control"
               placeholder={this.props.placeholder}
               name="query"
               ref="searchInput"
@@ -72,15 +73,14 @@ const SearchBar = React.createClass({
               value={this.state.query}
               onBlur={this.onQueryBlur}
               onChange={this.onQueryChange}
-              />
+            />
             <span className="icon-search" />
             {this.state.query !== this.props.defaultQuery &&
               <div>
                 <a className="search-clear-form" onClick={this.clearSearch}>
                   <span className="icon-circle-cross" />
                 </a>
-              </div>
-            }
+              </div>}
           </div>
         </form>
       </div>
diff --git a/src/sentry/static/sentry/app/components/selectInput.jsx b/src/sentry/static/sentry/app/components/selectInput.jsx
index 8bf2db19f3..3817125658 100644
--- a/src/sentry/static/sentry/app/components/selectInput.jsx
+++ b/src/sentry/static/sentry/app/components/selectInput.jsx
@@ -8,7 +8,7 @@ const SelectInput = React.createClass({
     required: React.PropTypes.bool,
     placeholder: React.PropTypes.string,
     value: React.PropTypes.string,
-    onChange: React.PropTypes.func,
+    onChange: React.PropTypes.func
   },
 
   getDefaultProps() {
@@ -35,11 +35,11 @@ const SelectInput = React.createClass({
     if (this.refs.select) {
       let selectedIndex = this.refs.select.selectedIndex;
       if (selectedIndex >= 0) {
-       let options = this.refs.select.options;
-       let tempIndex = (selectedIndex + 1) % options.length;
+        let options = this.refs.select.options;
+        let tempIndex = (selectedIndex + 1) % options.length;
 
-       options[tempIndex].selected = true;
-       options[selectedIndex].selected = true;
+        options[tempIndex].selected = true;
+        options[selectedIndex].selected = true;
       }
     }
   },
diff --git a/src/sentry/static/sentry/app/components/shortId.jsx b/src/sentry/static/sentry/app/components/shortId.jsx
index 1b692ec8cf..2e8b1b9844 100644
--- a/src/sentry/static/sentry/app/components/shortId.jsx
+++ b/src/sentry/static/sentry/app/components/shortId.jsx
@@ -10,10 +10,7 @@ const ShortId = React.createClass({
     project: React.PropTypes.object
   },
 
-  mixins: [
-    PureRenderMixin,
-    ProjectState
-  ],
+  mixins: [PureRenderMixin, ProjectState],
 
   preventPropagation(e) {
     // this is a hack for the stream so the click handler doesn't
diff --git a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
index 33ed8b59d3..4a263e4388 100644
--- a/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/broadcasts.jsx
@@ -18,9 +18,7 @@ const Broadcasts = React.createClass({
     onShowPanel: React.PropTypes.func.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -55,7 +53,7 @@ const Broadcasts = React.createClass({
     }
     this.api.request('/broadcasts/', {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           broadcasts: data,
           loading: false
@@ -78,17 +76,18 @@ const Broadcasts = React.createClass({
   },
 
   getUnseenIds() {
-    return this.state.broadcasts.filter((item) => {
-      return !item.hasSeen;
-    }).map((item) => {
-      return item.id;
-    });
+    return this.state.broadcasts
+      .filter(item => {
+        return !item.hasSeen;
+      })
+      .map(item => {
+        return item.id;
+      });
   },
 
   markSeen() {
     let unseenBroadcastIds = this.getUnseenIds();
-    if (unseenBroadcastIds.length === 0)
-      return;
+    if (unseenBroadcastIds.length === 0) return;
 
     this.api.request('/broadcasts/', {
       method: 'PUT',
@@ -98,46 +97,51 @@ const Broadcasts = React.createClass({
       },
       success: () => {
         this.setState({
-          broadcasts: this.state.broadcasts.map((item) => {
+          broadcasts: this.state.broadcasts.map(item => {
             item.hasSeen = true;
             return item;
           })
         });
-      },
+      }
     });
   },
 
   render() {
     let {broadcasts, loading} = this.state;
     return (
-      <li className={this.props.currentPanel == 'broadcasts' ? 'active' : null }>
-        <a className="broadcasts-toggle" onClick={this.onShowPanel} title="Updates from Sentry">
-          <span className="icon icon-globe"/>
-          {this.getUnseenIds() > 0 &&
-            <span className="activity-indicator"/>
-          }
+      <li className={this.props.currentPanel == 'broadcasts' ? 'active' : null}>
+        <a
+          className="broadcasts-toggle"
+          onClick={this.onShowPanel}
+          title="Updates from Sentry"
+        >
+          <span className="icon icon-globe" />
+          {this.getUnseenIds() > 0 && <span className="activity-indicator" />}
         </a>
-        {this.props.showPanel && this.props.currentPanel == 'broadcasts' &&
-          <SidebarPanel title={t('Recent updates from Sentry')}
-                        hidePanel={this.props.hidePanel}>
-              {loading ?
-                <LoadingIndicator />
-              : (broadcasts.length === 0 ?
-                <div className="sidebar-panel-empty">{t('No recent updates from the Sentry team.')}</div>
-              :
-                broadcasts.map((item) => {
-                  return (
-                    <SidebarPanelItem
-                      key={item.id}
-                      className={!item.hasSeen && 'unseen'}
-                      title={item.title}
-                      message={item.message}
-                      link={item.link}/>
-                  );
-                })
-              )}
-          </SidebarPanel>
-        }
+        {this.props.showPanel &&
+          this.props.currentPanel == 'broadcasts' &&
+          <SidebarPanel
+            title={t('Recent updates from Sentry')}
+            hidePanel={this.props.hidePanel}
+          >
+            {loading
+              ? <LoadingIndicator />
+              : broadcasts.length === 0
+                  ? <div className="sidebar-panel-empty">
+                      {t('No recent updates from the Sentry team.')}
+                    </div>
+                  : broadcasts.map(item => {
+                      return (
+                        <SidebarPanelItem
+                          key={item.id}
+                          className={!item.hasSeen && 'unseen'}
+                          title={item.title}
+                          message={item.message}
+                          link={item.link}
+                        />
+                      );
+                    })}
+          </SidebarPanel>}
       </li>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
index a095839c92..e8f382f608 100644
--- a/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/incidents.jsx
@@ -14,9 +14,7 @@ const Incidents = React.createClass({
     onShowPanel: React.PropTypes.func.isRequired
   },
 
-  mixins: [
-    Reflux.listenTo(IncidentStore, 'onIncidentChange'),
-  ],
+  mixins: [Reflux.listenTo(IncidentStore, 'onIncidentChange')],
 
   getInitialState() {
     return {
@@ -34,39 +32,47 @@ const Incidents = React.createClass({
     let {status} = this.state;
     if (!status) return null;
 
-    return status && status.incidents.length > 0 &&
-      <li className={this.props.currentPanel == 'statusupdate' ? 'active' : null }>
-        <a onClick={this.props.onShowPanel}><span className="icon icon-alert animated pulse infinite"/></a>
-        {this.props.showPanel && this.props.currentPanel == 'statusupdate' && status &&
-          <SidebarPanel title={t('Recent status updates')}
-                        hidePanel={this.props.hidePanel}>
+    return (
+      status &&
+      status.incidents.length > 0 &&
+      <li className={this.props.currentPanel == 'statusupdate' ? 'active' : null}>
+        <a onClick={this.props.onShowPanel}>
+          <span className="icon icon-alert animated pulse infinite" />
+        </a>
+        {this.props.showPanel &&
+          this.props.currentPanel == 'statusupdate' &&
+          status &&
+          <SidebarPanel
+            title={t('Recent status updates')}
+            hidePanel={this.props.hidePanel}
+          >
             <ul className="incident-list list-unstyled">
-              {status.incidents.map((incident) =>
+              {status.incidents.map(incident => (
                 <li className="incident-item" key={incident.id}>
                   <h4>{incident.title}</h4>
-                  {incident.updates ?
-                    <div>
-                      <h6>Latest updates:</h6>
-                      <ul className="status-list list-unstyled">
-                        {incident.updates.map((update, key) =>
-                          <li className="status-item" key={key}>
-                            <p>{update}</p>
-                          </li>
-                        )}
-                      </ul>
-                    </div>
-                    :
-                    null
-                  }
+                  {incident.updates
+                    ? <div>
+                        <h6>Latest updates:</h6>
+                        <ul className="status-list list-unstyled">
+                          {incident.updates.map((update, key) => (
+                            <li className="status-item" key={key}>
+                              <p>{update}</p>
+                            </li>
+                          ))}
+                        </ul>
+                      </div>
+                    : null}
                   <p>
-                    <a href={incident.url} className="btn btn-default btn-sm">Learn more</a>
+                    <a href={incident.url} className="btn btn-default btn-sm">
+                      Learn more
+                    </a>
                   </p>
                 </li>
-              )}
+              ))}
             </ul>
-          </SidebarPanel>
-        }
-      </li>;
+          </SidebarPanel>}
+      </li>
+    );
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/sidebar/index.jsx b/src/sentry/static/sentry/app/components/sidebar/index.jsx
index 795757b614..dd93998798 100644
--- a/src/sentry/static/sentry/app/components/sidebar/index.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/index.jsx
@@ -28,30 +28,35 @@ const OnboardingStatus = React.createClass({
 
   render() {
     let org = this.props.org;
-    if (org.features.indexOf('onboarding') === -1)
-      return null;
+    if (org.features.indexOf('onboarding') === -1) return null;
 
     let percentage = Math.round(
-      ((org.onboardingTasks || []).filter(
-        task => task.status === 'complete' || task.status === 'skipped'
-      ).length) / TodoList.TASKS.length * 100
+      (org.onboardingTasks || [])
+        .filter(task => task.status === 'complete' || task.status === 'skipped').length /
+        TodoList.TASKS.length *
+        100
     ).toString();
     let style = {
-      height: percentage + '%',
+      height: percentage + '%'
     };
 
     return (
-      <li className={this.props.currentPanel == 'todos' ? 'onboarding active' : 'onboarding' }>
+      <li
+        className={
+          this.props.currentPanel == 'todos' ? 'onboarding active' : 'onboarding'
+        }
+      >
         <div className="onboarding-progress-bar" onClick={this.props.onShowPanel}>
           <div className="slider" style={style} />
         </div>
-        {this.props.showPanel && this.props.currentPanel == 'todos' &&
+        {this.props.showPanel &&
+          this.props.currentPanel == 'todos' &&
           <SidebarPanel
             title="Getting Started with Sentry"
-            hidePanel={this.props.hidePanel}>
+            hidePanel={this.props.hidePanel}
+          >
             <TodoList />
-          </SidebarPanel>
-        }
+          </SidebarPanel>}
       </li>
     );
   }
@@ -72,10 +77,7 @@ const Sidebar = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    OrganizationState,
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState: function() {
     return {
@@ -138,10 +140,8 @@ const Sidebar = React.createClass({
   },
 
   togglePanel(panel) {
-    if (this.state.currentPanel === panel)
-      this.hidePanel();
-    else
-      this.showPanel(panel);
+    if (this.state.currentPanel === panel) this.hidePanel();
+    else this.showPanel(panel);
   },
 
   renderBody() {
@@ -152,108 +152,141 @@ const Sidebar = React.createClass({
       // When no organization, just render Sentry logo at top
       return (
         <ul className="navbar-nav">
-          <li><a className="logo" href="/"><span className="icon-sentry-logo"/></a></li>
+          <li><a className="logo" href="/"><span className="icon-sentry-logo" /></a></li>
         </ul>
       );
     }
 
-    return (<div>
-      <OrganizationSelector
-        organization={org}
-        showPanel={this.state.showPanel}
-        currentPanel={this.state.currentPanel}
-        togglePanel={()=>this.togglePanel('org-selector')}
-        hidePanel={()=>this.hidePanel()}/>
-
-      {/* Top nav links */}
-      <ul className="navbar-nav divider-bottom">
-        <li className={this.state.currentPanel == 'assigned' ? 'active' : null }>
-          <a title="Assigned to me">
-            <span className="icon icon-user" onClick={()=>this.togglePanel('assigned')} />
-          </a>
-        </li>
-        <li className={this.state.currentPanel == 'bookmarks' ? 'active' : null }>
-          <a title="My Bookmarks">
-            <span className="icon icon-star-solid" onClick={()=>this.togglePanel('bookmarks')} />
-          </a>
-        </li>
-        <li className={this.state.currentPanel == 'history' ? 'active' : null }>
-          <a title="Recently Viewed">
-            <span className="icon icon-av_timer" onClick={()=>this.togglePanel('history')} />
-          </a>
-        </li>
-      </ul>
-      <ul className="navbar-nav">
-        <Broadcasts
-          showPanel={this.state.showPanel}
-          currentPanel={this.state.currentPanel}
-          onShowPanel={()=>this.togglePanel('broadcasts')}
-          hidePanel={()=>this.hidePanel()} />
-        <Incidents
+    return (
+      <div>
+        <OrganizationSelector
+          organization={org}
           showPanel={this.state.showPanel}
           currentPanel={this.state.currentPanel}
-          onShowPanel={()=>this.togglePanel('statusupdate')}
-          hidePanel={()=>this.hidePanel()} />
-        <li>
-          <a title="Support" href={!config.isOnPremise ? `/organizations/${org.slug}/support/` : 'https://forum.sentry.io/'}>
-            <span className="icon icon-support" />
-          </a>
-        </li>
-      </ul>
-
-      {/* Panel bodies */}
-      {this.state.showPanel && this.state.currentPanel == 'assigned' &&
-        <SidebarPanel title={t('Assigned to me')}
-                      hidePanel={()=>this.hidePanel()}>
-          <IssueList
-            endpoint={`/organizations/${org.slug}/members/me/issues/assigned/`}
-            query={{
-              statsPeriod: '24h',
-              per_page: 10,
-              status: 'unresolved',
-            }}
-            pagination={false}
-            renderEmpty={() => <div className="sidebar-panel-empty" key="none">{t('No issues have been assigned to you.')}</div>}
-            ref="issueList"
-            showActions={false}
-            params={{orgId: org.slug}} />
-        </SidebarPanel>
-      }
-      {this.state.showPanel && this.state.currentPanel == 'bookmarks' &&
-        <SidebarPanel title={t('My Bookmarks')}
-                      hidePanel={()=>this.hidePanel()}>
-          <IssueList
-            endpoint={`/organizations/${org.slug}/members/me/issues/bookmarked/`}
-            query={{
-              statsPeriod: '24h',
-              per_page: 10,
-              status: 'unresolved',
-            }}
-            pagination={false}
-            renderEmpty={() => <div className="sidebar-panel-empty" key="no">{t('You have no bookmarked issues.')}</div>}
-            ref="issueList"
-            showActions={false}
-            params={{orgId: org.slug}} />
-        </SidebarPanel>
-      }
-      {this.state.showPanel && this.state.currentPanel == 'history' &&
-        <SidebarPanel title={t('Recently Viewed')}
-                      hidePanel={()=>this.hidePanel()}>
-          <IssueList
-            endpoint={`/organizations/${org.slug}/members/me/issues/viewed/`}
-            query={{
-              statsPeriod: '24h',
-              per_page: 10,
-              status: 'unresolved',
-            }}
-            pagination={false}
-            renderEmpty={() => <div className="sidebar-panel-empty" key="none">{t('No recently viewed issues.')}</div>}
-            ref="issueList"
-            showActions={false}
-            params={{orgId: org.slug}} />
-        </SidebarPanel>
-      }
-    </div>);
+          togglePanel={() => this.togglePanel('org-selector')}
+          hidePanel={() => this.hidePanel()}
+        />
+
+        {/* Top nav links */}
+        <ul className="navbar-nav divider-bottom">
+          <li className={this.state.currentPanel == 'assigned' ? 'active' : null}>
+            <a title="Assigned to me">
+              <span
+                className="icon icon-user"
+                onClick={() => this.togglePanel('assigned')}
+              />
+            </a>
+          </li>
+          <li className={this.state.currentPanel == 'bookmarks' ? 'active' : null}>
+            <a title="My Bookmarks">
+              <span
+                className="icon icon-star-solid"
+                onClick={() => this.togglePanel('bookmarks')}
+              />
+            </a>
+          </li>
+          <li className={this.state.currentPanel == 'history' ? 'active' : null}>
+            <a title="Recently Viewed">
+              <span
+                className="icon icon-av_timer"
+                onClick={() => this.togglePanel('history')}
+              />
+            </a>
+          </li>
+        </ul>
+        <ul className="navbar-nav">
+          <Broadcasts
+            showPanel={this.state.showPanel}
+            currentPanel={this.state.currentPanel}
+            onShowPanel={() => this.togglePanel('broadcasts')}
+            hidePanel={() => this.hidePanel()}
+          />
+          <Incidents
+            showPanel={this.state.showPanel}
+            currentPanel={this.state.currentPanel}
+            onShowPanel={() => this.togglePanel('statusupdate')}
+            hidePanel={() => this.hidePanel()}
+          />
+          <li>
+            <a
+              title="Support"
+              href={
+                !config.isOnPremise
+                  ? `/organizations/${org.slug}/support/`
+                  : 'https://forum.sentry.io/'
+              }
+            >
+              <span className="icon icon-support" />
+            </a>
+          </li>
+        </ul>
+
+        {/* Panel bodies */}
+        {this.state.showPanel &&
+          this.state.currentPanel == 'assigned' &&
+          <SidebarPanel title={t('Assigned to me')} hidePanel={() => this.hidePanel()}>
+            <IssueList
+              endpoint={`/organizations/${org.slug}/members/me/issues/assigned/`}
+              query={{
+                statsPeriod: '24h',
+                per_page: 10,
+                status: 'unresolved'
+              }}
+              pagination={false}
+              renderEmpty={() => (
+                <div className="sidebar-panel-empty" key="none">
+                  {t('No issues have been assigned to you.')}
+                </div>
+              )}
+              ref="issueList"
+              showActions={false}
+              params={{orgId: org.slug}}
+            />
+          </SidebarPanel>}
+        {this.state.showPanel &&
+          this.state.currentPanel == 'bookmarks' &&
+          <SidebarPanel title={t('My Bookmarks')} hidePanel={() => this.hidePanel()}>
+            <IssueList
+              endpoint={`/organizations/${org.slug}/members/me/issues/bookmarked/`}
+              query={{
+                statsPeriod: '24h',
+                per_page: 10,
+                status: 'unresolved'
+              }}
+              pagination={false}
+              renderEmpty={() => (
+                <div className="sidebar-panel-empty" key="no">
+                  {t('You have no bookmarked issues.')}
+                </div>
+              )}
+              ref="issueList"
+              showActions={false}
+              params={{orgId: org.slug}}
+            />
+          </SidebarPanel>}
+        {this.state.showPanel &&
+          this.state.currentPanel == 'history' &&
+          <SidebarPanel title={t('Recently Viewed')} hidePanel={() => this.hidePanel()}>
+            <IssueList
+              endpoint={`/organizations/${org.slug}/members/me/issues/viewed/`}
+              query={{
+                statsPeriod: '24h',
+                per_page: 10,
+                status: 'unresolved'
+              }}
+              pagination={false}
+              renderEmpty={() => (
+                <div className="sidebar-panel-empty" key="none">
+                  {t('No recently viewed issues.')}
+                </div>
+              )}
+              ref="issueList"
+              showActions={false}
+              params={{orgId: org.slug}}
+            />
+          </SidebarPanel>}
+      </div>
+    );
   },
 
   renderRequiredActions() {
@@ -266,8 +299,9 @@ const Sidebar = React.createClass({
       let url = `/organizations/${org.slug}/actions/${slugId}/`;
       return (
         <span className="admin-action-message">
-          <a href={url}>{t('Required Action:')}{' '}{
-            requiredAction.getActionLinkTitle()}</a>
+          <a href={url}>
+            {t('Required Action:')}{' '}{requiredAction.getActionLinkTitle()}
+          </a>
         </span>
       );
     }
@@ -293,9 +327,9 @@ const Sidebar = React.createClass({
                 org={org}
                 showPanel={this.state.showPanel}
                 currentPanel={this.state.currentPanel}
-                onShowPanel={()=>this.togglePanel('todos')}
-                hidePanel={()=>this.hidePanel()} />
-            }
+                onShowPanel={() => this.togglePanel('todos')}
+                hidePanel={() => this.hidePanel()}
+              />}
 
             <li>
               <UserNav className="user-settings" />
diff --git a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
index 519c7b92e0..156e147bc4 100644
--- a/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/organizationSelector.jsx
@@ -23,9 +23,7 @@ const OrganizationSelector = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    AppState,
-  ],
+  mixins: [AppState],
 
   getLinkNode(org, child, className) {
     let url = `/${org.slug}/`;
@@ -47,32 +45,38 @@ const OrganizationSelector = React.createClass({
     let features = ConfigStore.get('features');
 
     let classNames = 'org-selector divider-bottom';
-    if(this.props.currentPanel == 'org-selector') {
+    if (this.props.currentPanel == 'org-selector') {
       classNames += ' active';
     }
 
     return (
       <div className={classNames}>
         <a className="active-org" onClick={this.props.togglePanel}>
-          <LetterAvatar displayName={activeOrg.name} identifier={activeOrg.slug}/>
+          <LetterAvatar displayName={activeOrg.name} identifier={activeOrg.slug} />
         </a>
 
-        {this.props.showPanel && this.props.currentPanel == 'org-selector' &&
-          <SidebarPanel
-            title={t('Organizations')}
-            hidePanel={this.props.hidePanel}>
+        {this.props.showPanel &&
+          this.props.currentPanel == 'org-selector' &&
+          <SidebarPanel title={t('Organizations')} hidePanel={this.props.hidePanel}>
             <ul className="org-list list-unstyled">
-              {OrganizationStore.getAll().map((org) => {
+              {OrganizationStore.getAll().map(org => {
                 return (
-                  <li className={activeOrg.id === org.id ? 'org active' : 'org'} key={org.slug}>
-                    {this.getLinkNode(org, <LetterAvatar displayName={org.name} identifier={org.slug}/>, 'org-avatar')}
+                  <li
+                    className={activeOrg.id === org.id ? 'org active' : 'org'}
+                    key={org.slug}
+                  >
+                    {this.getLinkNode(
+                      org,
+                      <LetterAvatar displayName={org.name} identifier={org.slug} />,
+                      'org-avatar'
+                    )}
                     <h5>{this.getLinkNode(org, org.name)}</h5>
                     <p>
                       <a href={`/organizations/${org.slug}/settings/`}>
-                        <span className="icon-settings"/> {t('Settings')}
+                        <span className="icon-settings" /> {t('Settings')}
                       </a>
                       <a href={`/organizations/${org.slug}/members/`}>
-                        <span className="icon-users"/> {t('Members')}
+                        <span className="icon-users" /> {t('Members')}
                       </a>
                     </p>
                   </li>
@@ -81,12 +85,12 @@ const OrganizationSelector = React.createClass({
 
               {features.has('organizations:create') &&
                 <li className="org-create">
-                  <a href="/organizations/new/" className="btn btn-default btn-block">{t('New Organization')}</a>
-                </li>
-              }
+                  <a href="/organizations/new/" className="btn btn-default btn-block">
+                    {t('New Organization')}
+                  </a>
+                </li>}
             </ul>
-          </SidebarPanel>
-        }
+          </SidebarPanel>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/sidebar/userNav.jsx b/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
index 4285b1598e..a64ec7054a 100644
--- a/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
+++ b/src/sentry/static/sentry/app/components/sidebar/userNav.jsx
@@ -22,25 +22,17 @@ const UserNav = React.createClass({
       return null;
     }
 
-    let title = (
-      <Avatar user={user} className="avatar" />
-    );
+    let title = <Avatar user={user} className="avatar" />;
 
     // "to" attribute => in-app router
     // "href" attribute => Django-powered views
-    let to = (url) => this.context.location ? {to: url} : {href: url};
+    let to = url => (this.context.location ? {to: url} : {href: url});
 
     return (
-      <DropdownLink
-          topLevelClasses={this.props.className}
-          title={title}
-          caret={false}
-          >
+      <DropdownLink topLevelClasses={this.props.className} title={title} caret={false}>
         <MenuItem href="/account/settings/">{t('Account')}</MenuItem>
         <MenuItem {...to('/api/')}>{t('API')}</MenuItem>
-        {user.isSuperuser &&
-          <MenuItem {...to('/manage/')}>{t('Admin')}</MenuItem>
-        }
+        {user.isSuperuser && <MenuItem {...to('/manage/')}>{t('Admin')}</MenuItem>}
         <MenuItem href="/auth/logout/">{t('Sign out')}</MenuItem>
       </DropdownLink>
     );
diff --git a/src/sentry/static/sentry/app/components/sidebarPanel.jsx b/src/sentry/static/sentry/app/components/sidebarPanel.jsx
index 4711a83077..13d70f4c26 100644
--- a/src/sentry/static/sentry/app/components/sidebarPanel.jsx
+++ b/src/sentry/static/sentry/app/components/sidebarPanel.jsx
@@ -12,15 +12,16 @@ const SidebarPanel = React.createClass({
     return (
       <div className="sidebar-panel">
         <div className="sidebar-panel-header">
-          <a className="close pull-right" onClick={this.props.hidePanel}><span className="icon-close" /></a>
+          <a className="close pull-right" onClick={this.props.hidePanel}>
+            <span className="icon-close" />
+          </a>
           <h2>{this.props.title}</h2>
         </div>
         <div className="sidebar-panel-body">
           {!this.props.children &&
             <div className="sidebar-panel-items">
               <SidebarPanelItem />
-            </div>
-          }
+            </div>}
           {this.props.children}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx b/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
index 47d2e25224..bdc75e8f8f 100644
--- a/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
+++ b/src/sentry/static/sentry/app/components/sidebarPanelItem.jsx
@@ -17,21 +17,14 @@ const SidebarPanelItem = React.createClass({
 
     return (
       <div className={className}>
-        {this.props.title &&
-          <h3>{this.props.title}</h3>
-        }
-        {this.props.image &&
-          <div className="image"><img src={this.props.image} /></div>
-        }
-        {this.props.message &&
-          <p className="message">{this.props.message}</p>
-        }
+        {this.props.title && <h3>{this.props.title}</h3>}
+        {this.props.image && <div className="image"><img src={this.props.image} /></div>}
+        {this.props.message && <p className="message">{this.props.message}</p>}
 
         {this.props.link &&
           <p className="link">
             <a href={this.props.link} target="_blank">Read More</a>
-          </p>
-        }
+          </p>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/stackedBarChart.jsx b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
index a6751fabb7..5eb2070edf 100644
--- a/src/sentry/static/sentry/app/components/stackedBarChart.jsx
+++ b/src/sentry/static/sentry/app/components/stackedBarChart.jsx
@@ -6,26 +6,30 @@ import ConfigStore from '../stores/configStore.jsx';
 
 const StackedBarChart = React.createClass({
   propTypes: {
-    points: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      y: React.PropTypes.array.isRequired,
-      label: React.PropTypes.string
-    })),
+    points: React.PropTypes.arrayOf(
+      React.PropTypes.shape({
+        x: React.PropTypes.number.isRequired,
+        y: React.PropTypes.array.isRequired,
+        label: React.PropTypes.string
+      })
+    ),
     interval: React.PropTypes.string,
     height: React.PropTypes.number,
     width: React.PropTypes.number,
     placement: React.PropTypes.string,
     label: React.PropTypes.string,
-    markers: React.PropTypes.arrayOf(React.PropTypes.shape({
-      x: React.PropTypes.number.isRequired,
-      label: React.PropTypes.string
-    })),
+    markers: React.PropTypes.arrayOf(
+      React.PropTypes.shape({
+        x: React.PropTypes.number.isRequired,
+        label: React.PropTypes.string
+      })
+    ),
     tooltip: React.PropTypes.func,
     barClasses: React.PropTypes.array
   },
 
   mixins: [
-    TooltipMixin(function () {
+    TooltipMixin(function() {
       let chart = this;
 
       return {
@@ -38,19 +42,13 @@ const StackedBarChart = React.createClass({
         // barchart / triggers tooltip rendering. This is better
         // than using data-title, which renders up-front for each
         // StackedBarChart (slow).
-        title: function (instance) {
+        title: function(instance) {
           // `this` is the targeted element
           let pointIdx = this.getAttribute('data-point-index');
           let tooltipFunc = chart.props.tooltip || chart.renderTooltip;
 
-          if (pointIdx)
-            return tooltipFunc(
-              chart.props.points[pointIdx],
-              pointIdx,
-              chart,
-          );
-          else
-            return this.getAttribute('data-title');
+          if (pointIdx) return tooltipFunc(chart.props.points[pointIdx], pointIdx, chart);
+          else return this.getAttribute('data-title');
         }
       };
     })
@@ -72,7 +70,7 @@ const StackedBarChart = React.createClass({
       markers: [],
       width: null,
       barClasses: ['chart-bar'],
-      tooltip: this.renderTooltip,
+      tooltip: this.renderTooltip
     };
   },
 
@@ -112,8 +110,11 @@ const StackedBarChart = React.createClass({
 
     return (
       '<span>' +
-        timeMoment.format('LL') + '<br />' +
-        timeMoment.format(format) + '  &#8594; ' + nextMoment.format(format) +
+      timeMoment.format('LL') +
+      '<br />' +
+      timeMoment.format(format) +
+      '  &#8594; ' +
+      nextMoment.format(format) +
       '</span>'
     );
   },
@@ -121,11 +122,7 @@ const StackedBarChart = React.createClass({
   timeLabelAsDay(point) {
     let timeMoment = moment(point.x * 1000);
 
-    return (
-      '<span>' +
-        timeMoment.format('LL') +
-      '</span>'
-    );
+    return '<span>' + timeMoment.format('LL') + '</span>';
   },
 
   timeLabelAsRange(interval, point) {
@@ -135,9 +132,10 @@ const StackedBarChart = React.createClass({
 
     return (
       '<span>' +
-        // e.g. Aug 23rd, 12:50 pm
-        timeMoment.format(format) +
-        ' &#8594 ' + nextMoment.format(format) +
+      // e.g. Aug 23rd, 12:50 pm
+      timeMoment.format(format) +
+      ' &#8594 ' +
+      nextMoment.format(format) +
       '</span>'
     );
   },
@@ -162,9 +160,9 @@ const StackedBarChart = React.createClass({
 
   maxPointValue() {
     let maxval = 10;
-    this.props.points.forEach((point) => {
+    this.props.points.forEach(point => {
       let totalY = 0;
-      point.y.forEach((y) => {
+      point.y.forEach(y => {
         totalY += y;
       });
       if (totalY > maxval) {
@@ -176,12 +174,8 @@ const StackedBarChart = React.createClass({
 
   renderMarker(marker) {
     let timeLabel = moment(marker.x * 1000).format('lll');
-    let title = (
-      '<div style="width:130px">' +
-        marker.label + '<br/>' +
-        timeLabel +
-      '</div>'
-    );
+    let title =
+      '<div style="width:130px">' + marker.label + '<br/>' + timeLabel + '</div>';
     let className = 'chart-marker tip ' + (marker.className || '');
 
     // example key: m-last-seen-22811123, m-first-seen-228191
@@ -200,12 +194,11 @@ const StackedBarChart = React.createClass({
     for (let i = 0; i < point.y.length; i++) {
       totalY += point.y[i];
     }
-    let title = (
+    let title =
       '<div style="width:130px">' +
-        `<div class="time-label">${timeLabel}</div>` +
-        `<div class="value-label">${intcomma(totalY)} ${this.props.label}</div>` +
-      '</div>'
-    );
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${intcomma(totalY)} ${this.props.label}</div>` +
+      '</div>';
     if (point.label) {
       title += '<div>(' + point.label + ')</div>';
     }
@@ -221,21 +214,27 @@ const StackedBarChart = React.createClass({
     let totalPct = totalY / maxval;
     let prevPct = 0;
     let pts = point.y.map((y, i) => {
-        let pct = totalY && this.floatFormat((y / totalY) * totalPct * 99, 2);
-        let pt = (
-          <span key={i} className={this.props.barClasses[i]}
-                style={{height: pct + '%', bottom: prevPct + '%'}}>{y}</span>
-        );
-        prevPct += pct;
-        return pt;
-     });
+      let pct = totalY && this.floatFormat(y / totalY * totalPct * 99, 2);
+      let pt = (
+        <span
+          key={i}
+          className={this.props.barClasses[i]}
+          style={{height: pct + '%', bottom: prevPct + '%'}}
+        >
+          {y}
+        </span>
+      );
+      prevPct += pct;
+      return pt;
+    });
     return (
-      <a key={point.x}
-         className="chart-column tip"
-         data-point-index={pointIdx}
-         style={{width: pointWidth}}
-       >
-       {pts}
+      <a
+        key={point.x}
+        className="chart-column tip"
+        data-point-index={pointIdx}
+        style={{width: pointWidth}}
+      >
+        {pts}
       </a>
     );
   },
@@ -250,7 +249,7 @@ const StackedBarChart = React.createClass({
 
     let children = [];
     points.forEach((point, pointIdx) => {
-      while(markers.length && markers[0].x <= point.x) {
+      while (markers.length && markers[0].x <= point.x) {
         children.push(this.renderMarker(markers.shift()));
       }
 
@@ -259,7 +258,7 @@ const StackedBarChart = React.createClass({
 
     // in bizarre case where markers never got rendered, render them last
     // NOTE: should this ever happen?
-    markers.forEach((marker) => {
+    markers.forEach(marker => {
       children.push(this.renderMarker(marker));
     });
 
diff --git a/src/sentry/static/sentry/app/components/stream/group.jsx b/src/sentry/static/sentry/app/components/stream/group.jsx
index 3d8b6001ef..25a3344c8b 100644
--- a/src/sentry/static/sentry/app/components/stream/group.jsx
+++ b/src/sentry/static/sentry/app/components/stream/group.jsx
@@ -20,7 +20,7 @@ const StreamGroupHeader = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired,
     orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired
   },
 
   getMessage() {
@@ -52,8 +52,7 @@ const StreamGroupHeader = React.createClass({
         {message &&
           <div className="event-message truncate">
             <span className="message">{this.getMessage()}</span>
-          </div>
-        }
+          </div>}
       </div>
     );
   }
@@ -68,10 +67,7 @@ const StreamGroup = React.createClass({
     canSelect: React.PropTypes.bool
   },
 
-  mixins: [
-    Reflux.listenTo(GroupStore, 'onGroupChange'),
-    ProjectState
-  ],
+  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ProjectState],
 
   getDefaultProps() {
     return {
@@ -112,17 +108,14 @@ const StreamGroup = React.createClass({
     let id = this.props.id;
     let data = GroupStore.get(id);
     this.setState({
-      data: data,
+      data: data
     });
   },
 
   toggleSelect(evt) {
-    if (evt.target.tagName === 'A')
-      return;
-    if (evt.target.tagName === 'INPUT')
-      return;
-    if (jQuery(evt.target).parents('a').length !== 0)
-      return;
+    if (evt.target.tagName === 'A') return;
+    if (evt.target.tagName === 'INPUT') return;
+    if (jQuery(evt.target).parents('a').length !== 0) return;
 
     SelectedGroupStore.toggleSelect(this.state.data.id);
   },
@@ -156,45 +149,49 @@ const StreamGroup = React.createClass({
           {this.props.canSelect &&
             <div className="checkbox">
               <GroupCheckBox id={data.id} />
-            </div>
-          }
-          <StreamGroupHeader
-            orgId={orgId}
-            projectId={projectId}
-            data={data} />
+            </div>}
+          <StreamGroupHeader orgId={orgId} projectId={projectId} data={data} />
           <div className="event-extra">
             <ul>
-              {this.getFeatures().has('callsigns') && data.shortId &&
+              {this.getFeatures().has('callsigns') &&
+                data.shortId &&
                 <li>
                   <ShortId shortId={data.shortId} />
-                </li>
-              }
+                </li>}
               <li>
-                <span className="icon icon-clock"></span>
+                <span className="icon icon-clock" />
                 <TimeSince date={data.lastSeen} />
-                &nbsp;&mdash;&nbsp;
+                &nbsp;—&nbsp;
                 <TimeSince date={data.firstSeen} suffix="old" />
               </li>
               {data.numComments !== 0 &&
                 <li>
-                  <Link to={`/${orgId}/${projectId}/issues/${id}/activity/`} className="comments">
-                    <span className="icon icon-comments"></span>
+                  <Link
+                    to={`/${orgId}/${projectId}/issues/${id}/activity/`}
+                    className="comments"
+                  >
+                    <span className="icon icon-comments" />
                     <span className="tag-count">{data.numComments}</span>
                   </Link>
-                </li>
-              }
+                </li>}
               {data.logger &&
                 <li className="event-annotation">
-                  <Link to={{pathname: `/${orgId}/${projectId}/`, query: {query: 'logger:' + data.logger}}}>
+                  <Link
+                    to={{
+                      pathname: `/${orgId}/${projectId}/`,
+                      query: {query: 'logger:' + data.logger}
+                    }}
+                  >
                     {data.logger}
                   </Link>
-                </li>
-              }
+                </li>}
               {data.annotations.map((annotation, key) => {
                 return (
-                  <li className="event-annotation"
-                      dangerouslySetInnerHTML={{__html: annotation}}
-                      key={key} />
+                  <li
+                    className="event-annotation"
+                    dangerouslySetInnerHTML={{__html: annotation}}
+                    key={key}
+                  />
                 );
               })}
             </ul>
@@ -204,7 +201,7 @@ const StreamGroup = React.createClass({
           <AssigneeSelector id={data.id} />
         </div>
         <div className="col-md-2 hidden-sm hidden-xs event-graph align-right">
-          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} data={data}/>
+          <GroupChart id={data.id} statsPeriod={this.props.statsPeriod} data={data} />
         </div>
         <div className="col-md-1 col-xs-2 event-count align-right">
           <Count value={data.count} />
diff --git a/src/sentry/static/sentry/app/components/stream/groupChart.jsx b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
index 62d20ed7f0..4cdb140743 100644
--- a/src/sentry/static/sentry/app/components/stream/groupChart.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupChart.jsx
@@ -17,11 +17,12 @@ const GroupChart = React.createClass({
   },
 
   render() {
-    let stats = this.props.statsPeriod ? this.props.data.stats[this.props.statsPeriod] : null;
-    if (!stats || !stats.length)
-      return null;
+    let stats = this.props.statsPeriod
+      ? this.props.data.stats[this.props.statsPeriod]
+      : null;
+    if (!stats || !stats.length) return null;
 
-    let chartData = stats.map((point) => {
+    let chartData = stats.map(point => {
       return {x: point[0], y: point[1]};
     });
 
diff --git a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
index 97d84bd001..6c7356921a 100644
--- a/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
+++ b/src/sentry/static/sentry/app/components/stream/groupCheckBox.jsx
@@ -8,9 +8,7 @@ const GroupCheckBox = React.createClass({
     id: React.PropTypes.string.isRequired
   },
 
-  mixins: [
-    Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange')
-  ],
+  mixins: [Reflux.listenTo(SelectedGroupStore, 'onSelectedGroupChange')],
 
   getInitialState() {
     return {
@@ -27,14 +25,14 @@ const GroupCheckBox = React.createClass({
   },
 
   shouldComponentUpdate(nextProps, nextState) {
-    return (nextState.isSelected !== this.state.isSelected);
+    return nextState.isSelected !== this.state.isSelected;
   },
 
   onSelectedGroupChange() {
     let isSelected = SelectedGroupStore.isSelected(this.props.id);
     if (isSelected !== this.state.isSelected) {
       this.setState({
-        isSelected: isSelected,
+        isSelected: isSelected
       });
     }
   },
@@ -46,9 +44,13 @@ const GroupCheckBox = React.createClass({
 
   render() {
     return (
-      <input type="checkbox" className="chk-select" value={this.props.id}
-             checked={this.state.isSelected}
-             onChange={this.onSelect} />
+      <input
+        type="checkbox"
+        className="chk-select"
+        value={this.props.id}
+        checked={this.state.isSelected}
+        onChange={this.onSelect}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/strictClick.jsx b/src/sentry/static/sentry/app/components/strictClick.jsx
index 8a7a309c5b..8167810675 100644
--- a/src/sentry/static/sentry/app/components/strictClick.jsx
+++ b/src/sentry/static/sentry/app/components/strictClick.jsx
@@ -12,9 +12,7 @@ const StrictClick = React.createClass({
     onClick: React.PropTypes.func
   },
 
-  mixins: [
-    PureRenderMixin
-  ],
+  mixins: [PureRenderMixin],
 
   statics: {
     MAX_DELTA_X: 10,
@@ -66,4 +64,3 @@ const StrictClick = React.createClass({
 });
 
 export default StrictClick;
-
diff --git a/src/sentry/static/sentry/app/components/switch.jsx b/src/sentry/static/sentry/app/components/switch.jsx
index 7579712e72..8f6aa3f1e5 100644
--- a/src/sentry/static/sentry/app/components/switch.jsx
+++ b/src/sentry/static/sentry/app/components/switch.jsx
@@ -6,11 +6,10 @@ const Switch = React.createClass({
     isActive: React.PropTypes.bool,
     isLoading: React.PropTypes.bool,
     isDisabled: React.PropTypes.bool,
-    toggle: React.PropTypes.func.isRequired,
+    toggle: React.PropTypes.func.isRequired
   },
 
   render() {
-
     let switchClasses = 'switch';
 
     if (this.props.size) {
@@ -30,10 +29,13 @@ const Switch = React.createClass({
     }
 
     return (
-      <div className={switchClasses}
-          onClick={this.props.isDisabled ? null : this.props.toggle}
-          role="checkbox" aria-checked={this.props.isActive}>
-        <span className="switch-toggle"/>
+      <div
+        className={switchClasses}
+        onClick={this.props.isDisabled ? null : this.props.toggle}
+        role="checkbox"
+        aria-checked={this.props.isActive}
+      >
+        <span className="switch-toggle" />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/timeSince.jsx b/src/sentry/static/sentry/app/components/timeSince.jsx
index 993684c254..62edd57303 100644
--- a/src/sentry/static/sentry/app/components/timeSince.jsx
+++ b/src/sentry/static/sentry/app/components/timeSince.jsx
@@ -11,9 +11,7 @@ const TimeSince = React.createClass({
     suffix: React.PropTypes.string
   },
 
-  mixins: [
-    PureRenderMixin
-  ],
+  mixins: [PureRenderMixin],
 
   statics: {
     getDateObj(date) {
@@ -81,10 +79,12 @@ const TimeSince = React.createClass({
       <time
         dateTime={date.toISOString()}
         title={moment(date).format(format)}
-        className={this.props.className} >{this.state.relative}</time>
+        className={this.props.className}
+      >
+        {this.state.relative}
+      </time>
     );
   }
 });
 
 export default TimeSince;
-
diff --git a/src/sentry/static/sentry/app/components/todos.jsx b/src/sentry/static/sentry/app/components/todos.jsx
index c5b7b25316..ace726402b 100644
--- a/src/sentry/static/sentry/app/components/todos.jsx
+++ b/src/sentry/static/sentry/app/components/todos.jsx
@@ -34,26 +34,26 @@ const TodoItem = React.createClass({
     let classNames = '';
     let description;
 
-    switch(this.props.task.status) {
+    switch (this.props.task.status) {
       case 'complete':
         classNames += ' checked';
         description = tct('[user] completed [dateCompleted]', {
           user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow(),
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
         });
         break;
       case 'pending':
         classNames += ' pending';
         description = tct('[user] kicked off [dateCompleted]', {
           user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow(),
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
         });
         break;
       case 'skipped':
         classNames += ' skipped';
         description = tct('[user] skipped [dateCompleted]', {
           user: this.props.task.user,
-          dateCompleted: moment(this.props.task.dateCompleted).fromNow(),
+          dateCompleted: moment(this.props.task.dateCompleted).fromNow()
         });
         break;
       default:
@@ -66,32 +66,47 @@ const TodoItem = React.createClass({
 
     let learnMoreUrl = '';
     if (this.props.task.featureLocation === 'project') {
-      learnMoreUrl = '/organizations/' + org.slug + '/projects/choose/?onboarding=1&task=' + this.props.task.task;
+      learnMoreUrl =
+        '/organizations/' +
+        org.slug +
+        '/projects/choose/?onboarding=1&task=' +
+        this.props.task.task;
     } else if (this.props.task.featureLocation === 'organization') {
       learnMoreUrl = '/organizations/' + org.slug + '/' + this.props.task.location;
     } else if (this.props.task.featureLocation === 'absolute') {
       learnMoreUrl = this.props.task.location;
     }
 
-    let showSkipButton = this.props.task.skippable && this.props.task.status != 'skipped' &&
-      this.props.task.status != 'complete' && !this.state.showConfirmation;
+    let showSkipButton =
+      this.props.task.skippable &&
+      this.props.task.status != 'skipped' &&
+      this.props.task.status != 'complete' &&
+      !this.state.showConfirmation;
 
     return (
       <li className={classNames}>
-        { this.props.task.status == 'pending' && <div className="pending-bar" /> }
+        {this.props.task.status == 'pending' && <div className="pending-bar" />}
         <div className="todo-content">
           <div className="ob-checkbox">
-            { this.props.task.status == 'complete' && <span className="icon-checkmark" /> }
-            { this.props.task.status == 'skipped' && <span className="icon-x" /> }
-            { this.props.task.status == 'pending' && <span className="icon-ellipsis" /> }
+            {this.props.task.status == 'complete' && <span className="icon-checkmark" />}
+            {this.props.task.status == 'skipped' && <span className="icon-x" />}
+            {this.props.task.status == 'pending' && <span className="icon-ellipsis" />}
           </div>
-          <a href={learnMoreUrl}><h4>{ this.props.task.title }</h4></a>
+          <a href={learnMoreUrl}><h4>{this.props.task.title}</h4></a>
           <p>
-            { description }
+            {description}
           </p>
-          { showSkipButton && <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>{t('Skip')}</a> }
+          {showSkipButton &&
+            <a className="skip-btn btn btn-default" onClick={this.toggleConfirmation}>
+              {t('Skip')}
+            </a>}
         </div>
-        { this.state.showConfirmation && <Confirmation task={this.props.task.task} onSkip={this.skip} dismiss={this.toggleConfirmation} /> }
+        {this.state.showConfirmation &&
+          <Confirmation
+            task={this.props.task.task}
+            onSkip={this.skip}
+            dismiss={this.toggleConfirmation}
+          />}
       </li>
     );
   }
@@ -117,7 +132,15 @@ const Confirmation = React.createClass({
     return (
       <div className="ob-confirmation" onClick={this.dismiss}>
         <h3>{t('Need help?')}</h3>
-        <p><a href="mailto:support@sentry.io?subject=Help with onboarding">{t('Ask us!')}</a> &middot; <a onClick={this.skip}>{t('Skip')}</a></p>
+        <p>
+          <a href="mailto:support@sentry.io?subject=Help with onboarding">
+            {t('Ask us!')}
+          </a>
+          {' '}
+          ·
+          {' '}
+          <a onClick={this.skip}>{t('Skip')}</a>
+        </p>
       </div>
     );
   }
@@ -129,67 +152,67 @@ const TodoList = React.createClass({
   statics: {
     TASKS: [
       {
-        'task': 1,
-        'title': t('Create a project'),
-        'description': t('Create your first Sentry project'),
-        'skippable': false,
-        'prereq': [],
-        'featureLocation': 'organization',
-        'location': 'projects/new/',
+        task: 1,
+        title: t('Create a project'),
+        description: t('Create your first Sentry project'),
+        skippable: false,
+        prereq: [],
+        featureLocation: 'organization',
+        location: 'projects/new/'
       },
       {
-        'task': 2,
-        'title': t('Send your first event'),
-        'description': t('Install Sentry\'s client and send an event'),
-        'skippable': false,
-        'prereq': [1],
-        'featureLocation': 'project',
-        'location': 'settings/install/',
+        task: 2,
+        title: t('Send your first event'),
+        description: t('Install Sentry\'s client and send an event'),
+        skippable: false,
+        prereq: [1],
+        featureLocation: 'project',
+        location: 'settings/install/'
       },
       {
-        'task': 3,
-        'title': t('Invite team member'),
-        'description': t('Bring your team aboard'),
-        'skippable': true,
-        'prereq': [],
-        'featureLocation': 'organization',
-        'location': 'members/',
+        task: 3,
+        title: t('Invite team member'),
+        description: t('Bring your team aboard'),
+        skippable: true,
+        prereq: [],
+        featureLocation: 'organization',
+        location: 'members/'
       },
       {
-        'task': 4,
-        'title': t('Add a second platform'),
-        'description': t('Add Sentry to a second platform'),
-        'skippable': true,
-        'prereq': [1, 2],
-        'featureLocation': 'organization',
-        'location': 'projects/new/',
+        task: 4,
+        title: t('Add a second platform'),
+        description: t('Add Sentry to a second platform'),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'organization',
+        location: 'projects/new/'
       },
       {
-        'task': 5,
-        'title': t('Add user context'),
-        'description': t('Know who is being affected by crashes'),
-        'skippable': true,
-        'prereq': [1, 2],
-        'featureLocation': 'absolute',
-        'location': 'https://docs.sentry.io/hosted/learn/context/#capturing-the-user',
+        task: 5,
+        title: t('Add user context'),
+        description: t('Know who is being affected by crashes'),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'absolute',
+        location: 'https://docs.sentry.io/hosted/learn/context/#capturing-the-user'
       },
       {
-        'task': 6,
-        'title': t('Set up release tracking'),
-        'description': t('See what releases are generating errors.'),
-        'skippable': true,
-        'prereq': [1, 2],
-        'featureLocation': 'project',
-        'location': 'settings/release-tracking/',
+        task: 6,
+        title: t('Set up release tracking'),
+        description: t('See what releases are generating errors.'),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'project',
+        location: 'settings/release-tracking/'
       },
       {
-        'task': 7,
-        'title': t('Upload sourcemaps'),
-        'description': t('Deminify javascript stacktraces'),
-        'skippable': true,
-        'prereq': [1, 2], // Is one of the platforms javascript?
-        'featureLocation': 'absolute',
-        'location': 'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/'
+        task: 7,
+        title: t('Upload sourcemaps'),
+        description: t('Deminify javascript stacktraces'),
+        skippable: true,
+        prereq: [1, 2], // Is one of the platforms javascript?
+        featureLocation: 'absolute',
+        location: 'https://docs.sentry.io/hosted/clients/javascript/sourcemaps/'
       },
       // {
       //   'task': 8,
@@ -201,37 +224,37 @@ const TodoList = React.createClass({
       //   'location': 'settings/user-reports/'
       // },
       {
-        'task': 9,
-        'title': t('Set up issue tracking'),
-        'description': t('Link to Sentry issues within your issue tracker'),
-        'skippable': true,
-        'prereq': [1, 2],
-        'featureLocation': 'project',
-        'location': 'settings/issue-tracking/',
+        task: 9,
+        title: t('Set up issue tracking'),
+        description: t('Link to Sentry issues within your issue tracker'),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'project',
+        location: 'settings/issue-tracking/'
       },
       {
-        'task': 10,
-        'title': t('Set up an alerts service'),
-        'description': t('Receive Sentry alerts in Slack or HipChat'),
-        'skippable': true,
-        'prereq': [1, 2],
-        'featureLocation': 'project',
-        'location': 'settings/alerts/',
-      },
+        task: 10,
+        title: t('Set up an alerts service'),
+        description: t('Receive Sentry alerts in Slack or HipChat'),
+        skippable: true,
+        prereq: [1, 2],
+        featureLocation: 'project',
+        location: 'settings/alerts/'
+      }
     ]
   },
 
   getInitialState() {
     return {
       tasks: [],
-      seeAll: false,  // Show all tasks, included those completed
+      seeAll: false // Show all tasks, included those completed
     };
   },
 
   componentWillMount() {
     // Map server task state (who finished what) to TodoList.TASK objects
     let org = this.getOrganization();
-    let tasks = TodoList.TASKS.map((task) => {
+    let tasks = TodoList.TASKS.map(task => {
       for (let server_task of org.onboardingTasks) {
         if (server_task.task == task.task) {
           Object.assign(task, server_task);
@@ -247,9 +270,9 @@ const TodoList = React.createClass({
     let org = this.getOrganization();
     this.api.request('/organizations/' + org.slug + '/onboarding-tasks/', {
       method: 'POST',
-      data: {'task': skipped_task, 'status': 'skipped'},
+      data: {task: skipped_task, status: 'skipped'},
       success: () => {
-        let new_state = this.state.tasks.map( (task) => {
+        let new_state = this.state.tasks.map(task => {
           if (task.task == skipped_task) {
             task.status = 'skipped';
           }
@@ -269,8 +292,8 @@ const TodoList = React.createClass({
   render() {
     let nextTasks = this.state.tasks;
 
-    let todo_list = nextTasks.map( (task) => {
-      return (<TodoItem key={task.task} task={task} onSkip={this.skipTask} />);
+    let todo_list = nextTasks.map(task => {
+      return <TodoItem key={task.task} task={task} onSkip={this.skipTask} />;
     }, this);
 
     return (
diff --git a/src/sentry/static/sentry/app/components/truncate.jsx b/src/sentry/static/sentry/app/components/truncate.jsx
index 47922b4643..c22f2882b9 100644
--- a/src/sentry/static/sentry/app/components/truncate.jsx
+++ b/src/sentry/static/sentry/app/components/truncate.jsx
@@ -4,19 +4,19 @@ const Truncate = React.createClass({
   propTypes: {
     value: React.PropTypes.string.isRequired,
     leftTrim: React.PropTypes.bool,
-    maxLength: React.PropTypes.number,
+    maxLength: React.PropTypes.number
   },
 
   getDefaultProps() {
     return {
       leftTrim: false,
-      maxLength: 50,
+      maxLength: 50
     };
   },
 
   getInitialState() {
     return {
-      isExpanded: false,
+      isExpanded: false
     };
   },
 
@@ -27,20 +27,21 @@ const Truncate = React.createClass({
   },
 
   onBlur(e) {
-    if (this.state.isExpanded)
-      this.setState({isExpanded: false});
+    if (this.state.isExpanded) this.setState({isExpanded: false});
   },
 
   render() {
     let {leftTrim, maxLength, value} = this.props;
-    let isTruncated = (value.length > maxLength);
+    let isTruncated = value.length > maxLength;
     let shortValue = '';
 
     if (isTruncated) {
       if (leftTrim) {
-        shortValue = <span>&hellip; {value.slice(value.length - (maxLength - 4), value.length)}</span>;
+        shortValue = (
+          <span>… {value.slice(value.length - (maxLength - 4), value.length)}</span>
+        );
       } else {
-        shortValue = <span>{value.slice(0, maxLength - 4)} &hellip;</span>;
+        shortValue = <span>{value.slice(0, maxLength - 4)} …</span>;
       }
     } else {
       shortValue = value;
@@ -48,8 +49,7 @@ const Truncate = React.createClass({
 
     let className = this.props.className || '';
     className += ' truncated';
-    if (this.state.isExpanded)
-      className += ' expanded';
+    if (this.state.isExpanded) className += ' expanded';
 
     return (
       <span
@@ -57,15 +57,13 @@ const Truncate = React.createClass({
         onMouseOver={this.onFocus}
         onMouseOut={this.onBlur}
         onFocus={this.onFocus}
-        onBlur={this.onBlur}>
+        onBlur={this.onBlur}
+      >
         <span className="short-value">{shortValue}</span>
-        {isTruncated &&
-          <span className="full-value">{value}</span>
-        }
+        {isTruncated && <span className="full-value">{value}</span>}
       </span>
     );
   }
 });
 
 export default Truncate;
-
diff --git a/src/sentry/static/sentry/app/components/u2fenrollment.jsx b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
index c7441a9bd6..81653351ac 100644
--- a/src/sentry/static/sentry/app/components/u2fenrollment.jsx
+++ b/src/sentry/static/sentry/app/components/u2fenrollment.jsx
@@ -10,14 +10,14 @@ const U2fEnrollment = React.createClass({
 
   render() {
     return (
-      <U2fInterface
-        challengeData={this.props.enrollmentData}
-        flowMode={'enroll'}>
+      <U2fInterface challengeData={this.props.enrollmentData} flowMode={'enroll'}>
         <p>
-          {t(`
+          {t(
+            `
             To enroll your U2F device insert it now or tap the button on it
             to activate it.
-          `)}
+          `
+          )}
         </p>
       </U2fInterface>
     );
diff --git a/src/sentry/static/sentry/app/components/u2finterface.jsx b/src/sentry/static/sentry/app/components/u2finterface.jsx
index d21824d3c9..dc6fdcc1c5 100644
--- a/src/sentry/static/sentry/app/components/u2finterface.jsx
+++ b/src/sentry/static/sentry/app/components/u2finterface.jsx
@@ -30,7 +30,7 @@ const U2fInterface = React.createClass({
   },
 
   componentDidMount() {
-    u2f.isSupported().then((supported) => {
+    u2f.isSupported().then(supported => {
       this.setState({
         isSupported: supported
       });
@@ -42,12 +42,15 @@ const U2fInterface = React.createClass({
   },
 
   onTryAgain() {
-    this.setState({
-      hasBeenTapped: false,
-      deviceFailure: null,
-    }, () => {
-      this.invokeU2fFlow();
-    });
+    this.setState(
+      {
+        hasBeenTapped: false,
+        deviceFailure: null
+      },
+      () => {
+        this.invokeU2fFlow();
+      }
+    );
   },
 
   invokeU2fFlow() {
@@ -60,32 +63,36 @@ const U2fInterface = React.createClass({
     } else {
       throw new Error(`Unsupported flow mode '${this.props.flowMode}'`);
     }
-    promise.then((data) => {
-      this.setState({
-        hasBeenTapped: true
-      }, () => {
-        this.state.responseElement.value = JSON.stringify(data);
-        if (!this.props.onTap || this.props.onTap()) {
-          this.state.formElement.submit();
+    promise
+      .then(data => {
+        this.setState(
+          {
+            hasBeenTapped: true
+          },
+          () => {
+            this.state.responseElement.value = JSON.stringify(data);
+            if (!this.props.onTap || this.props.onTap()) {
+              this.state.formElement.submit();
+            }
+          }
+        );
+      })
+      .catch(err => {
+        let failure = 'DEVICE_ERROR';
+        if (err.metaData.type === 'DEVICE_INELIGIBLE') {
+          if (this.props.flowMode === 'enroll') {
+            failure = 'DUPLICATE_DEVICE';
+          } else {
+            failure = 'UNKNOWN_DEVICE';
+          }
+        } else if (err.metaData.type === 'BAD_REQUEST') {
+          failure = 'BAD_APPID';
         }
+        this.setState({
+          deviceFailure: failure,
+          hasBeenTapped: false
+        });
       });
-    })
-    .catch((err) => {
-      let failure = 'DEVICE_ERROR';
-      if (err.metaData.type === 'DEVICE_INELIGIBLE') {
-        if (this.props.flowMode === 'enroll') {
-          failure = 'DUPLICATE_DEVICE';
-        } else {
-          failure = 'UNKNOWN_DEVICE';
-        }
-      } else if (err.metaData.type === 'BAD_REQUEST') {
-        failure = 'BAD_APPID';
-      }
-      this.setState({
-        deviceFailure: failure,
-        hasBeenTapped: false,
-      });
-    });
   },
 
   bindChallengeElement(ref) {
@@ -110,11 +117,13 @@ const U2fInterface = React.createClass({
       <div className="u2f-box">
         <div className="inner">
           <p className="error">
-            {t(`
+            {t(
+              `
              Unfortunately your browser does not support U2F. You need to use
              a different two-factor method or switch to a browser that supports
              it (Google Chrome or Microsoft Edge).
-            `)}
+            `
+            )}
           </p>
         </div>
       </div>
@@ -133,25 +142,31 @@ const U2fInterface = React.createClass({
       : <span>{t('Support')}</span>;
     return (
       <div className="failure-message">
-        <p><strong>{t('Error: ')}</strong> {{
-          'DEVICE_ERROR': t('Your U2F device reported an error.'),
-          'DUPLICATE_DEVICE': t('This device is already in use.'),
-          'UNKNOWN_DEVICE': t('The device you used for sign-in is unknown.'),
-          'BAD_APPID': tct(
-            '[p1:The Sentry server administrator modified the ' +
-            'device registrations.]' + 
-            '[p2:You need to remove and re-add the device to continue ' +
-            'using your U2F device. Use a different sign-in method or ' +
-            'contact [support] for assistance.]',
+        <p>
+          <strong>{t('Error: ')}</strong> {
             {
-              p1: <p/>,
-              p2: <p/>,
-              support: support,
-            }
-          ),
-        }[deviceFailure]}</p>
+              DEVICE_ERROR: t('Your U2F device reported an error.'),
+              DUPLICATE_DEVICE: t('This device is already in use.'),
+              UNKNOWN_DEVICE: t('The device you used for sign-in is unknown.'),
+              BAD_APPID: tct(
+                '[p1:The Sentry server administrator modified the ' +
+                  'device registrations.]' +
+                  '[p2:You need to remove and re-add the device to continue ' +
+                  'using your U2F device. Use a different sign-in method or ' +
+                  'contact [support] for assistance.]',
+                {
+                  p1: <p />,
+                  p2: <p />,
+                  support: support
+                }
+              )
+            }[deviceFailure]
+          }
+        </p>
         {this.canTryAgain() &&
-          <p><a onClick={this.onTryAgain} className="btn btn-primary">{t('Try Again')}</a></p>}
+          <p>
+            <a onClick={this.onTryAgain} className="btn btn-primary">{t('Try Again')}</a>
+          </p>}
       </div>
     );
   },
@@ -166,19 +181,24 @@ const U2fInterface = React.createClass({
 
   renderPrompt() {
     return (
-      <div className={'u2f-box' + (this.state.hasBeenTapped ? ' tapped' : '')
-          + (this.state.deviceFailure ? ' device-failure' : '')}>
+      <div
+        className={
+          'u2f-box' +
+            (this.state.hasBeenTapped ? ' tapped' : '') +
+            (this.state.deviceFailure ? ' device-failure' : '')
+        }
+      >
         <div className="device-animation-frame">
-          <div className="device-failed"/>
-          <div className="device-animation"/>
+          <div className="device-failed" />
+          <div className="device-animation" />
           <div className="loading-dots">
             <span className="dot" />
             <span className="dot" />
             <span className="dot" />
           </div>
         </div>
-        <input type="hidden" name="challenge" ref={this.bindChallengeElement}/>
-        <input type="hidden" name="response" ref={this.bindResponseElement}/>
+        <input type="hidden" name="challenge" ref={this.bindChallengeElement} />
+        <input type="hidden" name="response" ref={this.bindResponseElement} />
         <div className="inner">
           {this.renderBody()}
         </div>
diff --git a/src/sentry/static/sentry/app/components/u2fsign.jsx b/src/sentry/static/sentry/app/components/u2fsign.jsx
index e6ad9b1c94..7b58faa919 100644
--- a/src/sentry/static/sentry/app/components/u2fsign.jsx
+++ b/src/sentry/static/sentry/app/components/u2fsign.jsx
@@ -6,7 +6,7 @@ import {t} from '../locale';
 const U2fSign = React.createClass({
   propTypes: {
     challengeData: React.PropTypes.object,
-    displayMode: React.PropTypes.string,
+    displayMode: React.PropTypes.string
   },
 
   getDefaultProps() {
@@ -21,14 +21,23 @@ const U2fSign = React.createClass({
       <U2fInterface
         challengeData={this.props.challengeData}
         silentIfUnsupported={displayMode === 'sudo'}
-        flowMode={'sign'}>
+        flowMode={'sign'}
+      >
         <p>
-          {displayMode === 'signin' ? t(`
+          {displayMode === 'signin'
+            ? t(
+                `
             Insert your U2F device or tap the button on it to confirm the
             sign-in request.
-          `) : displayMode === 'sudo' ? t(`
+          `
+              )
+            : displayMode === 'sudo'
+                ? t(
+                    `
             Alternatively you can use your U2F device to confirm the action.
-          `) : null}
+          `
+                  )
+                : null}
         </p>
       </U2fInterface>
     );
diff --git a/src/sentry/static/sentry/app/components/userInfo.jsx b/src/sentry/static/sentry/app/components/userInfo.jsx
index 1575cc98d7..6b04cbfd31 100644
--- a/src/sentry/static/sentry/app/components/userInfo.jsx
+++ b/src/sentry/static/sentry/app/components/userInfo.jsx
@@ -27,11 +27,8 @@ const UserInfo = React.createClass({
     let name = user.name || user.email;
     let displayName = getUserDisplayName(name);
 
-    return (
-      <span title={name} {...other}>{displayName}</span>
-    );
+    return <span title={name} {...other}>{displayName}</span>;
   }
 });
 
 export default UserInfo;
-
diff --git a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
index f8c89a8348..fef2a17710 100644
--- a/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
+++ b/src/sentry/static/sentry/app/components/userLetterAvatar.jsx
@@ -20,7 +20,8 @@ const UserLetterAvatar = React.createClass({
     return (
       <LetterAvatar
         identifier={this.getIdentifier()}
-        displayName={this.getDisplayName()}/>
+        displayName={this.getDisplayName()}
+      />
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/components/version.jsx b/src/sentry/static/sentry/app/components/version.jsx
index 5d0a2c196c..c1abe8ab80 100644
--- a/src/sentry/static/sentry/app/components/version.jsx
+++ b/src/sentry/static/sentry/app/components/version.jsx
@@ -8,12 +8,12 @@ const Version = React.createClass({
     anchor: React.PropTypes.bool,
     version: React.PropTypes.string.isRequired,
     orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired
   },
 
   getDefaultProps() {
     return {
-      anchor: true,
+      anchor: true
     };
   },
 
@@ -25,9 +25,11 @@ const Version = React.createClass({
       return (
         // NOTE: version is encoded because it can contain slashes "/",
         //       which can interfere with URL construction
+        (
           <Link to={`/${orgId}/${projectId}/releases/${encodeURIComponent(version)}/`}>
             <span title={version}>{shortVersion}</span>
           </Link>
+        )
       );
     }
     return <span title={version}>{shortVersion}</span>;
diff --git a/src/sentry/static/sentry/app/components/versionHoverCard.jsx b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
index bca22f71d0..918ccde7bb 100644
--- a/src/sentry/static/sentry/app/components/versionHoverCard.jsx
+++ b/src/sentry/static/sentry/app/components/versionHoverCard.jsx
@@ -16,7 +16,7 @@ const VersionHoverCard = React.createClass({
   propTypes: {
     version: React.PropTypes.string.isRequired,
     orgId: React.PropTypes.string.isRequired,
-    projectId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired
   },
 
   mixins: [ApiMixin],
@@ -27,7 +27,7 @@ const VersionHoverCard = React.createClass({
       error: false,
       data: {},
       visible: false,
-      hasRepos: false,
+      hasRepos: false
     };
   },
 
@@ -45,14 +45,14 @@ const VersionHoverCard = React.createClass({
     let releasePath = `/projects/${orgId}/${projectId}/releases/${encodeURIComponent(version)}/`;
     this.api.request(releasePath, {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
-          release: data,
+          release: data
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       },
       complete: done
@@ -62,23 +62,23 @@ const VersionHoverCard = React.createClass({
     let repoPath = `/organizations/${orgId}/repos/`;
     this.api.request(repoPath, {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
-          hasRepos: data.length > 0,
+          hasRepos: data.length > 0
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       },
       complete: done
     });
   },
 
-  toggleHovercard () {
+  toggleHovercard() {
     this.setState({
-      visible: !this.state.visible,
+      visible: !this.state.visible
     });
   },
 
@@ -87,9 +87,10 @@ const VersionHoverCard = React.createClass({
     return (
       <div className="version-hovercard blankslate m-a-0 p-x-1 p-y-1 align-center">
         <h5>Releases are better with commit data!</h5>
-        <p>Connect a repository to see commit info, files changed, and authors involved in future releases.</p>
-        <a className="btn btn-primary"
-          href={`/organizations/${orgId}/repos/`}>
+        <p>
+          Connect a repository to see commit info, files changed, and authors involved in future releases.
+        </p>
+        <a className="btn btn-primary" href={`/organizations/${orgId}/repos/`}>
           Connect a repository
         </a>
       </div>
@@ -128,49 +129,64 @@ const VersionHoverCard = React.createClass({
           <span>Release {shortVersion}</span>
         </div>
         <div className="hovercard-body">
-          {this.state.loading ? <LoadingIndicator mini={true}/> :
-            (this.state.error ? <LoadingError /> :
-              <div>
-              <div className="row row-flex">
-                <div className="col-xs-4">
-                  <h6>New Issues</h6>
-                  <div className="count">{release.newGroups}</div>
-                </div>
-                <div className="col-xs-8">
-                  <h6>{release.commitCount} {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')} {release.authors.length} {release.authors.length !== 1 ? t('authors') : t('author')} </h6>
-                  <div className="avatar-grid">
-                    {release.authors.map(author => {
-                      return (
-                        <span className="avatar-grid-item tip"
-                             title={author.name + ' ' + author.email}>
-                          <Avatar user={author}/>
-                        </span>
-                      );
-                    })}
-                  </div>
-                </div>
-              </div>
-              {lastCommit &&
-                <div>
-                  <h6 className="commit-heading">Last commit</h6>
-                  <div className="commit">
-                    <div className="commit-avatar">
-                      <Avatar user={commitAuthor || {'username': '?'}}/>
+          {this.state.loading
+            ? <LoadingIndicator mini={true} />
+            : this.state.error
+                ? <LoadingError />
+                : <div>
+                    <div className="row row-flex">
+                      <div className="col-xs-4">
+                        <h6>New Issues</h6>
+                        <div className="count">{release.newGroups}</div>
+                      </div>
+                      <div className="col-xs-8">
+                        <h6>
+                          {release.commitCount}
+                          {' '}
+                          {release.commitCount !== 1 ? t('commits ') : t('commit ')}
+                          {' '}
+                          {t('by ')}
+                          {' '}
+                          {release.authors.length}
+                          {' '}
+                          {release.authors.length !== 1 ? t('authors') : t('author')}
+                          {' '}
+                        </h6>
+                        <div className="avatar-grid">
+                          {release.authors.map(author => {
+                            return (
+                              <span
+                                className="avatar-grid-item tip"
+                                title={author.name + ' ' + author.email}
+                              >
+                                <Avatar user={author} />
+                              </span>
+                            );
+                          })}
+                        </div>
+                      </div>
                     </div>
-                    <div className="commit-message">
-                      {this.renderMessage(lastCommit.message)}
-                    </div>
-                    <div className="commit-meta">
-                      <strong>{(commitAuthor && commitAuthor.name) || t('Unknown Author')}</strong>&nbsp;
-                      <TimeSince date={lastCommit.dateCreated} />
-                    </div>
-                  </div>
-                </div>}
-            </div>
-            )
-          }
+                    {lastCommit &&
+                      <div>
+                        <h6 className="commit-heading">Last commit</h6>
+                        <div className="commit">
+                          <div className="commit-avatar">
+                            <Avatar user={commitAuthor || {username: '?'}} />
+                          </div>
+                          <div className="commit-message">
+                            {this.renderMessage(lastCommit.message)}
+                          </div>
+                          <div className="commit-meta">
+                            <strong>
+                              {(commitAuthor && commitAuthor.name) || t('Unknown Author')}
+                            </strong>&nbsp;
+                            <TimeSince date={lastCommit.dateCreated} />
+                          </div>
+                        </div>
+                      </div>}
+                  </div>}
         </div>
-    </div>
+      </div>
     );
   },
 
@@ -180,11 +196,10 @@ const VersionHoverCard = React.createClass({
       <span onMouseEnter={this.toggleHovercard} onMouseLeave={this.toggleHovercard}>
         {this.props.children}
         {visible &&
-          <div className="hovercard" >
+          <div className="hovercard">
             <div className="hovercard-hoverlap" />
             {this.state.hasRepos ? this.renderBody() : this.renderRepoLink()}
-          </div>
-        }
+          </div>}
       </span>
     );
   }
diff --git a/src/sentry/static/sentry/app/locale.jsx b/src/sentry/static/sentry/app/locale.jsx
index 93d178fb35..6059846733 100644
--- a/src/sentry/static/sentry/app/locale.jsx
+++ b/src/sentry/static/sentry/app/locale.jsx
@@ -1,3 +1,4 @@
+/*eslint no-cond-assign:0*/
 import Jed from 'jed';
 import React from 'react';
 import {getTranslations} from './translations';
@@ -13,21 +14,22 @@ if (sessionStorage && sessionStorage.getItem('localeDebug') == '1') {
 export function setLocaleDebug(value) {
   sessionStorage.setItem('localeDebug', value ? '1' : '0');
   /*eslint no-console:0*/
-  console.log('Locale debug is: ', value ? 'on' : 'off',
-              '. Reload page to apply changes!');
+  console.log(
+    'Locale debug is: ',
+    value ? 'on' : 'off',
+    '. Reload page to apply changes!'
+  );
 }
 
 let i18n = null;
 
-
 export function setLocale(locale) {
   let translations = getTranslations(locale);
   i18n = new Jed({
-    'domain' : 'sentry',
-    'missing_key_callback' : function(key) {
-    },
-    'locale_data': {
-      'sentry': translations
+    domain: 'sentry',
+    missing_key_callback: function(key) {},
+    locale_data: {
+      sentry: translations
     }
   });
 }
@@ -55,16 +57,18 @@ function formatForReact(formatString, args) {
       // this points to a react element!
       if (React.isValidElement(arg)) {
         rv.push(React.cloneElement(arg, {key: idx}));
-      // not a react element, fuck around with it so that sprintf.format
-      // can format it for us.  We make sure match[2] is null so that we
-      // do not go down the object path, and we set match[1] to the first
-      // index and then pass an array with two items in.
+        // not a react element, fuck around with it so that sprintf.format
+        // can format it for us.  We make sure match[2] is null so that we
+        // do not go down the object path, and we set match[1] to the first
+        // index and then pass an array with two items in.
       } else {
         match[2] = null;
         match[1] = 1;
-        rv.push(<span key={idx++}>
-          {sprintf.format([match], [null, arg])}
-        </span>);
+        rv.push(
+          <span key={idx++}>
+            {sprintf.format([match], [null, arg])}
+          </span>
+        );
       }
     }
   });
@@ -77,7 +81,7 @@ function argsInvolveReact(args) {
     return true;
   }
   if (args.length == 1 && _.isObject(args[0])) {
-    return Object.keys(args[0]).some((key) => {
+    return Object.keys(args[0]).some(key => {
       return React.isValidElement(args[0][key]);
     });
   }
@@ -93,8 +97,8 @@ export function parseComponentTemplate(string) {
     let buf = [];
     let satisfied = false;
 
-    let pos = regex.lastIndex = startPos;
-    while ((match = regex.exec(string)) !== null) { // eslint-disable-line no-cond-assign
+    let pos = (regex.lastIndex = startPos);
+    while ((match = regex.exec(string)) !== null) {
       let substr = string.substr(pos, match.index - pos);
       if (substr !== '') {
         buf.push(substr);
@@ -141,7 +145,7 @@ export function renderComponentTemplate(template, components) {
   function renderGroup(group) {
     let children = [];
 
-    (template[group] || []).forEach((item) => {
+    (template[group] || []).forEach(item => {
       if (_.isString(item)) {
         children.push(<span key={idx++}>{item}</span>);
       } else {
diff --git a/src/sentry/static/sentry/app/mixins/groupState.jsx b/src/sentry/static/sentry/app/mixins/groupState.jsx
index 485fb65c39..43df6329e0 100644
--- a/src/sentry/static/sentry/app/mixins/groupState.jsx
+++ b/src/sentry/static/sentry/app/mixins/groupState.jsx
@@ -5,7 +5,7 @@ let GroupState = {
   mixins: [ProjectState],
 
   contextTypes: {
-    group: PropTypes.Group.isRequired,
+    group: PropTypes.Group.isRequired
   },
 
   getGroup() {
@@ -14,4 +14,3 @@ let GroupState = {
 };
 
 export default GroupState;
-
diff --git a/src/sentry/static/sentry/app/mixins/organizationState.jsx b/src/sentry/static/sentry/app/mixins/organizationState.jsx
index 04947bc68c..1ff551d732 100644
--- a/src/sentry/static/sentry/app/mixins/organizationState.jsx
+++ b/src/sentry/static/sentry/app/mixins/organizationState.jsx
@@ -2,7 +2,7 @@ import PropTypes from '../proptypes';
 
 let OrganizationState = {
   contextTypes: {
-    organization: PropTypes.Organization,
+    organization: PropTypes.Organization
   },
 
   getOrganization() {
@@ -19,8 +19,7 @@ let OrganizationState = {
 
   getOnboardingTasks() {
     return new Set(this.context.organization.onboardingTasks);
-  },
+  }
 };
 
 export default OrganizationState;
-
diff --git a/src/sentry/static/sentry/app/mixins/projectState.jsx b/src/sentry/static/sentry/app/mixins/projectState.jsx
index c065af1fc4..0d99a6b96e 100644
--- a/src/sentry/static/sentry/app/mixins/projectState.jsx
+++ b/src/sentry/static/sentry/app/mixins/projectState.jsx
@@ -5,7 +5,7 @@ let ProjectState = {
   mixins: [TeamState],
 
   contextTypes: {
-    project: PropTypes.Project,
+    project: PropTypes.Project
   },
 
   getProjectFeatures() {
@@ -18,4 +18,3 @@ let ProjectState = {
 };
 
 export default ProjectState;
-
diff --git a/src/sentry/static/sentry/app/mixins/teamState.jsx b/src/sentry/static/sentry/app/mixins/teamState.jsx
index 66f08f5b22..a56aaaa409 100644
--- a/src/sentry/static/sentry/app/mixins/teamState.jsx
+++ b/src/sentry/static/sentry/app/mixins/teamState.jsx
@@ -5,7 +5,7 @@ let TeamState = {
   mixins: [OrganizationState],
 
   contextTypes: {
-    team: PropTypes.Team.isRequired,
+    team: PropTypes.Team.isRequired
   },
 
   getTeam() {
@@ -14,4 +14,3 @@ let TeamState = {
 };
 
 export default TeamState;
-
diff --git a/src/sentry/static/sentry/app/mixins/tooltip.jsx b/src/sentry/static/sentry/app/mixins/tooltip.jsx
index 8ea10bc865..4f35e990f0 100644
--- a/src/sentry/static/sentry/app/mixins/tooltip.jsx
+++ b/src/sentry/static/sentry/app/mixins/tooltip.jsx
@@ -2,7 +2,7 @@ import ReactDOM from 'react-dom';
 import $ from 'jquery';
 import 'bootstrap/js/tooltip';
 
-export default function (options) {
+export default function(options) {
   options = options || {};
   return {
     componentDidMount() {
@@ -16,8 +16,9 @@ export default function (options) {
 
     attachTooltips() {
       $(ReactDOM.findDOMNode(this)).tooltip(
-        Object.prototype.toString.call(options) === '[object Function]' ?
-          options.call(this) : options
+        Object.prototype.toString.call(options) === '[object Function]'
+          ? options.call(this)
+          : options
       );
     },
 
@@ -25,7 +26,7 @@ export default function (options) {
       $(ReactDOM.findDOMNode(this))
         .tooltip('destroy') // destroy tooltips on parent ...
         .find(options.selector)
-          .tooltip('destroy'); // ... and descendents
+        .tooltip('destroy'); // ... and descendents
     }
   };
 }
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 24e41c3366..7428fc6ad7 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -7,11 +7,11 @@ import {EmailField, TextField, BooleanField} from './components/forms';
 // This are ordered based on their display order visually
 const sections = [
   {
-    key: 'system',
+    key: 'system'
   },
   {
     key: 'mail',
-    heading: t('Outbound email'),
+    heading: t('Outbound email')
   }
 ];
 
@@ -22,7 +22,7 @@ const definitions = [
     label: t('Root URL'),
     placeholder: 'https://sentry.example.com',
     help: t('The root web address which is used to communicate with the Sentry backend.'),
-    defaultValue: () => `${document.location.protocol}//${document.location.host}`,
+    defaultValue: () => `${document.location.protocol}//${document.location.host}`
   },
   {
     key: 'system.admin-email',
@@ -31,7 +31,7 @@ const definitions = [
     help: t('The technical contact for this Sentry installation.'),
     // TODO(dcramer): this should not be hardcoded to a component
     component: EmailField,
-    defaultValue: () => ConfigStore.get('user').email,
+    defaultValue: () => ConfigStore.get('user').email
   },
   {
     key: 'system.support-email',
@@ -40,7 +40,7 @@ const definitions = [
     help: t('The support contact for this Sentry installation.'),
     // TODO(dcramer): this should not be hardcoded to a component
     component: EmailField,
-    defaultValue: () => ConfigStore.get('user').email,
+    defaultValue: () => ConfigStore.get('user').email
   },
   {
     key: 'system.security-email',
@@ -49,31 +49,39 @@ const definitions = [
     help: t('The security contact for this Sentry installation.'),
     // TODO(dcramer): this should not be hardcoded to a component
     component: EmailField,
-    defaultValue: () => ConfigStore.get('user').email,
+    defaultValue: () => ConfigStore.get('user').email
   },
   {
     key: 'system.rate-limit',
     label: t('Rate Limit'),
     placeholder: 'e.g. 500',
-    help: t('The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'),
+    help: t(
+      'The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'
+    )
   },
   {
     key: 'auth.ip-rate-limit',
     label: t('IP Rate Limit'),
     placeholder: 'e.g. 10',
-    help: t('The maximum number of times an authentication attempt may be made by a single IP address in a 60 second window.'),
+    help: t(
+      'The maximum number of times an authentication attempt may be made by a single IP address in a 60 second window.'
+    )
   },
   {
     key: 'auth.user-rate-limit',
     label: t('User Rate Limit'),
     placeholder: 'e.g. 10',
-    help: t('The maximum number of times an authentication attempt may be made against a single account in a 60 second window.'),
+    help: t(
+      'The maximum number of times an authentication attempt may be made against a single account in a 60 second window.'
+    )
   },
   {
     key: 'api.rate-limit.org-create',
     label: 'Organization Creation Rate Limit',
     placeholder: 'e.g. 5',
-    help: t('The maximum number of organizations which may be created by a single account in a one hour window.'),
+    help: t(
+      'The maximum number of organizations which may be created by a single account in a one hour window.'
+    )
   },
   {
     key: 'mail.from',
@@ -86,18 +94,18 @@ const definitions = [
     key: 'mail.host',
     label: t('SMTP Host'),
     placeholder: 'localhost',
-    defaultValue: () => 'localhost',
+    defaultValue: () => 'localhost'
   },
   {
     key: 'mail.port',
     label: t('SMTP Port'),
     placeholder: '25',
-    defaultValue: () => '25',
+    defaultValue: () => '25'
   },
   {
     key: 'mail.username',
     label: t('SMTP Username'),
-    defaultValue: () => '',
+    defaultValue: () => ''
   },
   {
     key: 'mail.password',
@@ -106,21 +114,21 @@ const definitions = [
     // there's a way to reveal it. Without being able to see the password, it's
     // impossible to confirm if it's right.
     // component: PasswordField,
-    defaultValue: () => '',
+    defaultValue: () => ''
   },
   {
     key: 'mail.use-tls',
     label: t('Use TLS?'),
     component: BooleanField,
-    defaultValue: () => false,
-  },
+    defaultValue: () => false
+  }
 ];
 
 const definitionsMap = _.indexBy(definitions, 'key');
 
 const disabledReasons = {
   diskPriority: 'This setting is defined in config.yml and may not be changed via the web UI.',
-  smtpDisabled: 'SMTP mail has been disabled, so this option is unavailable',
+  smtpDisabled: 'SMTP mail has been disabled, so this option is unavailable'
 };
 
 export function getOption(option) {
@@ -136,17 +144,18 @@ export function getOptionField(option, onChange, value, field) {
   let Field = meta.component || TextField;
   return (
     <Field
-        name={option}
-        key={option}
-        label={meta.label}
-        defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
-        placeholder={meta.placeholder}
-        help={meta.help}
-        onChange={onChange}
-        required={meta.required && !meta.allowEmpty}
-        value={value}
-        disabled={meta.disabled}
-        disabledReason={meta.disabledReason && disabledReasons[meta.disabledReason]} />
+      name={option}
+      key={option}
+      label={meta.label}
+      defaultValue={meta.defaultValue ? meta.defaultValue() : undefined}
+      placeholder={meta.placeholder}
+      help={meta.help}
+      onChange={onChange}
+      required={meta.required && !meta.allowEmpty}
+      value={value}
+      disabled={meta.disabled}
+      disabledReason={meta.disabledReason && disabledReasons[meta.disabledReason]}
+    />
   );
 }
 
diff --git a/src/sentry/static/sentry/app/plugins/baseContext.jsx b/src/sentry/static/sentry/app/plugins/baseContext.jsx
index 829ebfbc6c..771150dbd0 100644
--- a/src/sentry/static/sentry/app/plugins/baseContext.jsx
+++ b/src/sentry/static/sentry/app/plugins/baseContext.jsx
@@ -12,7 +12,7 @@ BaseContext.displayName = 'BaseContext';
 
 BaseContext.propTypes = {
   alias: React.PropTypes.string.isRequired,
-  data: React.PropTypes.object.isRequired,
+  data: React.PropTypes.object.isRequired
 };
 
 BaseContext.getTitle = function(value) {
diff --git a/src/sentry/static/sentry/app/plugins/basePlugin.jsx b/src/sentry/static/sentry/app/plugins/basePlugin.jsx
index 906c9fef32..09d715e415 100644
--- a/src/sentry/static/sentry/app/plugins/basePlugin.jsx
+++ b/src/sentry/static/sentry/app/plugins/basePlugin.jsx
@@ -3,13 +3,13 @@ import React from 'react';
 import Settings from './components/settings';
 
 class BasePlugin {
-    constructor(data) {
-        Object.assign(this, data);
-    }
+  constructor(data) {
+    Object.assign(this, data);
+  }
 
-    renderSettings(props) {
-        return <Settings plugin={this} {...props} />;
-    }
+  renderSettings(props) {
+    return <Settings plugin={this} {...props} />;
+  }
 }
 
 BasePlugin.DefaultSettings = Settings;
diff --git a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
index b2fa6cec00..6429c61ad6 100644
--- a/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/issueActions.jsx
@@ -1,9 +1,6 @@
 import React from 'react';
 
-import {
-  Form,
-  FormState
-} from '../../components/forms';
+import {Form, FormState} from '../../components/forms';
 import GroupActions from '../../actions/groupActions';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -24,8 +21,9 @@ class IssueActions extends PluginComponentBase {
       createFieldList: null,
       linkFieldList: null,
       loading: ['link', 'create'].includes(this.props.actionType),
-      state: (['link', 'create'].includes(this.props.actionType) ?
-              FormState.LOADING : FormState.READY),
+      state: ['link', 'create'].includes(this.props.actionType)
+        ? FormState.LOADING
+        : FormState.READY,
       error: null,
       createFormData: {},
       linkFormData: {}
@@ -52,18 +50,21 @@ class IssueActions extends PluginComponentBase {
   }
 
   getPluginCreateEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/create/');
+    return (
+      '/issues/' + this.getGroup().id + '/plugins/' + this.props.plugin.slug + '/create/'
+    );
   }
 
   getPluginLinkEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/link/');
+    return (
+      '/issues/' + this.getGroup().id + '/plugins/' + this.props.plugin.slug + '/link/'
+    );
   }
 
   getPluginUnlinkEndpoint() {
-    return ('/issues/' + this.getGroup().id +
-            '/plugins/' + this.props.plugin.slug + '/unlink/');
+    return (
+      '/issues/' + this.getGroup().id + '/plugins/' + this.props.plugin.slug + '/unlink/'
+    );
   }
 
   setError(error, defaultMessage) {
@@ -91,33 +92,39 @@ class IssueActions extends PluginComponentBase {
   fetchData() {
     if (this.props.actionType === 'create') {
       this.api.request(this.getPluginCreateEndpoint(), {
-        success: (data) => {
+        success: data => {
           let createFormData = {};
-          data.forEach((field) => {
+          data.forEach(field => {
             createFormData[field.name] = field.default;
           });
-          this.setState({
-            createFieldList: data,
-            error: null,
-            loading: false,
-            createFormData: createFormData
-          }, this.onLoadSuccess);
+          this.setState(
+            {
+              createFieldList: data,
+              error: null,
+              loading: false,
+              createFormData: createFormData
+            },
+            this.onLoadSuccess
+          );
         },
         error: this.errorHandler
       });
     } else if (this.props.actionType === 'link') {
       this.api.request(this.getPluginLinkEndpoint(), {
-        success: (data) => {
+        success: data => {
           let linkFormData = {};
-          data.forEach((field) => {
+          data.forEach(field => {
             linkFormData[field.name] = field.default;
           });
-          this.setState({
-            linkFieldList: data,
-            error: null,
-            loading: false,
-            linkFormData: linkFormData
-          }, this.onLoadSuccess);
+          this.setState(
+            {
+              linkFieldList: data,
+              error: null,
+              loading: false,
+              linkFormData: linkFormData
+            },
+            this.onLoadSuccess
+          );
         },
         error: this.errorHandler
       });
@@ -176,14 +183,23 @@ class IssueActions extends PluginComponentBase {
       case 'create':
         if (this.state.createFieldList) {
           form = (
-            <Form onSubmit={this.createIssue} submitLabel={t('Create Issue')}
-                  footerClass="">
-              {this.state.createFieldList.map((field) => {
+            <Form
+              onSubmit={this.createIssue}
+              submitLabel={t('Create Issue')}
+              footerClass=""
+            >
+              {this.state.createFieldList.map(field => {
                 if (field.has_autocomplete) {
-                  field = Object.assign({
-                    url: ('/api/0/issues/' + this.getGroup().id +
-                          '/plugins/' + this.props.plugin.slug + '/autocomplete')
-                  }, field);
+                  field = Object.assign(
+                    {
+                      url: '/api/0/issues/' +
+                        this.getGroup().id +
+                        '/plugins/' +
+                        this.props.plugin.slug +
+                        '/autocomplete'
+                    },
+                    field
+                  );
                 }
                 return (
                   <div key={field.name}>
@@ -202,14 +218,19 @@ class IssueActions extends PluginComponentBase {
       case 'link':
         if (this.state.linkFieldList) {
           form = (
-            <Form onSubmit={this.linkIssue} submitLabel={t('Link Issue')}
-                  footerClass="">
-              {this.state.linkFieldList.map((field) => {
+            <Form onSubmit={this.linkIssue} submitLabel={t('Link Issue')} footerClass="">
+              {this.state.linkFieldList.map(field => {
                 if (field.has_autocomplete) {
-                  field = Object.assign({
-                    url: ('/api/0/issues/' + this.getGroup().id +
-                          '/plugins/' + this.props.plugin.slug + '/autocomplete')
-                  }, field);
+                  field = Object.assign(
+                    {
+                      url: '/api/0/issues/' +
+                        this.getGroup().id +
+                        '/plugins/' +
+                        this.props.plugin.slug +
+                        '/autocomplete'
+                    },
+                    field
+                  );
                 }
                 return (
                   <div key={field.name}>
@@ -229,8 +250,9 @@ class IssueActions extends PluginComponentBase {
         form = (
           <div>
             <p>{t('Are you sure you want to unlink this issue?')}</p>
-            <button onClick={this.unlinkIssue}
-                    className="btn btn-danger">{t('Unlink Issue')}</button>
+            <button onClick={this.unlinkIssue} className="btn btn-danger">
+              {t('Unlink Issue')}
+            </button>
           </div>
         );
         break;
@@ -262,8 +284,9 @@ class IssueActions extends PluginComponentBase {
       return (
         <div>
           <div className="alert alert-warning m-b-1">
-            {'You need to associate an identity with ' + error.title +
-             ' before you can create issues with this service.'}
+            {'You need to associate an identity with ' +
+              error.title +
+              ' before you can create issues with this service.'}
           </div>
           <a className="btn btn-primary" href={authUrl}>
             Associate Identity
@@ -273,17 +296,29 @@ class IssueActions extends PluginComponentBase {
     } else if (error.error_type === 'config') {
       return (
         <div className="alert alert-block">
-            {!error.has_auth_configured ?
-                <div>
-                  <p>{'Your server administrator will need to configure authentication with '}
-                  <strong>{error.auth_provider}</strong>{' before you can use this plugin.'}</p>
-                  <p>The following settings must be configured:</p>
-                  <ul>{error.required_auth_settings.map((setting) => {
+          {!error.has_auth_configured
+            ? <div>
+                <p>
+                  {
+                    'Your server administrator will need to configure authentication with '
+                  }
+                  <strong>{error.auth_provider}</strong>
+                  {' before you can use this plugin.'}
+                </p>
+                <p>The following settings must be configured:</p>
+                <ul>
+                  {error.required_auth_settings.map(setting => {
                     return <li><code>{setting}</code></li>;
-                  })}</ul>
-                </div>
-              :
-              <p>You still need to <a href={this.getPluginConfigureUrl()}>configure this plugin</a> before you can use it.</p>}
+                  })}
+                </ul>
+              </div>
+            : <p>
+                You still need to
+                {' '}
+                <a href={this.getPluginConfigureUrl()}>configure this plugin</a>
+                {' '}
+                before you can use it.
+              </p>}
         </div>
       );
     } else if (error.error_type === 'validation') {
@@ -303,7 +338,7 @@ class IssueActions extends PluginComponentBase {
         </div>
       );
     }
-    return <LoadingError/>;
+    return <LoadingError />;
   }
 
   render() {
diff --git a/src/sentry/static/sentry/app/plugins/components/settings.jsx b/src/sentry/static/sentry/app/plugins/components/settings.jsx
index b240ea735f..7415959b2e 100644
--- a/src/sentry/static/sentry/app/plugins/components/settings.jsx
+++ b/src/sentry/static/sentry/app/plugins/components/settings.jsx
@@ -1,15 +1,11 @@
 import React from 'react';
 import underscore from 'underscore';
 
-import {
-  Form,
-  FormState
-} from '../../components/forms';
+import {Form, FormState} from '../../components/forms';
 import PluginComponentBase from '../../components/bases/pluginComponentBase';
 import LoadingIndicator from '../../components/loadingIndicator';
 import {t, tct} from '../../locale';
 
-
 class PluginSettings extends PluginComponentBase {
   constructor(props) {
     super(props);
@@ -33,9 +29,7 @@ class PluginSettings extends PluginComponentBase {
   getPluginEndpoint() {
     let org = this.props.organization;
     let project = this.props.project;
-    return (
-      `/projects/${org.slug}/${project.slug}/plugins/${this.props.plugin.id}/`
-    );
+    return `/projects/${org.slug}/${project.slug}/plugins/${this.props.plugin.id}/`;
   }
 
   changeField(name, value) {
@@ -54,7 +48,7 @@ class PluginSettings extends PluginComponentBase {
       success: this.onSaveSuccess.bind(this, data => {
         let formData = {};
         let initialData = {};
-        data.config.forEach((field) => {
+        data.config.forEach(field => {
           formData[field.name] = field.value || field.defaultValue;
           initialData[field.name] = field.value;
         });
@@ -67,7 +61,7 @@ class PluginSettings extends PluginComponentBase {
       }),
       error: this.onSaveError.bind(this, error => {
         this.setState({
-          errors: (error.responseJSON || {}).errors || {},
+          errors: (error.responseJSON || {}).errors || {}
         });
       }),
       complete: this.onSaveComplete
@@ -78,24 +72,30 @@ class PluginSettings extends PluginComponentBase {
     this.api.request(this.getPluginEndpoint(), {
       success: data => {
         if (!data.config) {
-          this.setState({
-            rawData: data
-          }, this.onLoadSuccess);
+          this.setState(
+            {
+              rawData: data
+            },
+            this.onLoadSuccess
+          );
           return;
         }
         let formData = {};
         let initialData = {};
-        data.config.forEach((field) => {
+        data.config.forEach(field => {
           formData[field.name] = field.value || field.defaultValue;
           initialData[field.name] = field.value;
         });
-        this.setState({
-          fieldList: data.config,
-          formData: formData,
-          initialData: initialData
-        // call this here to prevent FormState.READY from being
-        // set before fieldList is
-        }, this.onLoadSuccess);
+        this.setState(
+          {
+            fieldList: data.config,
+            formData: formData,
+            initialData: initialData
+            // call this here to prevent FormState.READY from being
+            // set before fieldList is
+          },
+          this.onLoadSuccess
+        );
       },
       error: this.onLoadError
     });
@@ -132,7 +132,7 @@ class PluginSettings extends PluginComponentBase {
       return (
         <div className="alert alert-error m-b-1">
           {tct('An unknown error occurred. Need help with this? [link:Contact support]', {
-            link: <a href="https://sentry.io/support/"/>
+            link: <a href="https://sentry.io/support/" />
           })}
         </div>
       );
@@ -144,8 +144,7 @@ class PluginSettings extends PluginComponentBase {
             <ul>
               <li>{this.state.errors.__all__}</li>
             </ul>
-          </div>
-        }
+          </div>}
         {this.state.fieldList.map(f => {
           return this.renderField({
             key: f.name,
@@ -163,7 +162,7 @@ class PluginSettings extends PluginComponentBase {
 PluginSettings.propTypes = {
   organization: React.PropTypes.object.isRequired,
   project: React.PropTypes.object.isRequired,
-  plugin: React.PropTypes.object.isRequired,
+  plugin: React.PropTypes.object.isRequired
 };
 
 export default PluginSettings;
diff --git a/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx b/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx
index f74c0f1ce7..2f9153e736 100644
--- a/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx
+++ b/src/sentry/static/sentry/app/plugins/defaultIssuePlugin.jsx
@@ -3,11 +3,10 @@ import React from 'react';
 import BasePlugin from './basePlugin';
 import IssueActions from './components/issueActions';
 
-
 export class DefaultIssuePlugin extends BasePlugin {
-    renderGroupActions(props) {
-        return <IssueActions plugin={this} {...props} />;
-    }
+  renderGroupActions(props) {
+    return <IssueActions plugin={this} {...props} />;
+  }
 }
 
 DefaultIssuePlugin.DefaultIssueActions = IssueActions;
diff --git a/src/sentry/static/sentry/app/plugins/index.jsx b/src/sentry/static/sentry/app/plugins/index.jsx
index cb72810d3e..91b6724ecf 100644
--- a/src/sentry/static/sentry/app/plugins/index.jsx
+++ b/src/sentry/static/sentry/app/plugins/index.jsx
@@ -9,17 +9,17 @@ const registry = new Registry();
 export {BasePlugin, registry, DefaultIssuePlugin};
 
 export default {
-    BaseContext: BaseContext,
-    BasePlugin: BasePlugin,
-    DefaultIssuePlugin: DefaultIssuePlugin,
+  BaseContext: BaseContext,
+  BasePlugin: BasePlugin,
+  DefaultIssuePlugin: DefaultIssuePlugin,
 
-    add: registry.add.bind(registry),
-    addContext: function(id, component) {
-        contexts[id] = component;
-    },
-    contexts: contexts,
-    get: registry.get.bind(registry),
-    isLoaded: registry.isLoaded.bind(registry),
-    load: registry.load.bind(registry),
-    loadAll: registry.loadAll.bind(registry),
+  add: registry.add.bind(registry),
+  addContext: function(id, component) {
+    contexts[id] = component;
+  },
+  contexts: contexts,
+  get: registry.get.bind(registry),
+  isLoaded: registry.isLoaded.bind(registry),
+  load: registry.load.bind(registry),
+  loadAll: registry.loadAll.bind(registry)
 };
diff --git a/src/sentry/static/sentry/app/plugins/registry.jsx b/src/sentry/static/sentry/app/plugins/registry.jsx
index a7d604ffae..b8891f97e6 100644
--- a/src/sentry/static/sentry/app/plugins/registry.jsx
+++ b/src/sentry/static/sentry/app/plugins/registry.jsx
@@ -16,8 +16,8 @@ export default class Registry {
   loadAll(dataList, callback) {
     let remaining = dataList.length;
     let pluginList = [];
-    dataList.map((data) => {
-      this.load(data, (plugin) => {
+    dataList.map(data => {
+      this.load(data, plugin => {
         remaining--;
         pluginList.push(plugin);
         if (remaining === 0) {
@@ -38,7 +38,9 @@ export default class Registry {
           this.plugins[data.id] = DefaultPlugin;
         }
       }
-      console.info('[plugins] Loaded ' + data.id + ' as {' + this.plugins[data.id].name + '}');
+      console.info(
+        '[plugins] Loaded ' + data.id + ' as {' + this.plugins[data.id].name + '}'
+      );
       callback(this.get(data));
     }.bind(this);
 
@@ -63,7 +65,7 @@ export default class Registry {
     };
 
     // TODO(dcramer): what do we do on failed asset loading?
-    data.assets.forEach((asset) => {
+    data.assets.forEach(asset => {
       if (!defined(this.assetCache[asset.url])) {
         console.info('[plugins] Loading asset for ' + data.id + ': ' + asset.url);
         let s = document.createElement('script');
diff --git a/src/sentry/static/sentry/app/proptypes.jsx b/src/sentry/static/sentry/app/proptypes.jsx
index f5df533d6c..d2a25b13d7 100644
--- a/src/sentry/static/sentry/app/proptypes.jsx
+++ b/src/sentry/static/sentry/app/proptypes.jsx
@@ -28,4 +28,3 @@ let PropTypes = {
 };
 
 export default PropTypes;
-
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 77a00926a5..cec5f91c07 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -83,17 +83,17 @@ function appendTrailingSlash(nextState, replaceState) {
 
 function routes() {
   let hooksRoutes = [];
-  HookStore.get('routes').forEach((cb) => {
+  HookStore.get('routes').forEach(cb => {
     hooksRoutes.push(cb());
   });
 
   let hooksAdminRoutes = [];
-  HookStore.get('routes:admin').forEach((cb) => {
+  HookStore.get('routes:admin').forEach(cb => {
     hooksAdminRoutes.push(cb());
   });
 
   let hooksOrgRoutes = [];
-  HookStore.get('routes:organization').forEach((cb) => {
+  HookStore.get('routes:organization').forEach(cb => {
     hooksOrgRoutes.push(cb());
   });
 
@@ -106,7 +106,10 @@ function routes() {
       <Route path="/api/" component={errorHandler(ApiLayout)}>
         <IndexRoute component={errorHandler(ApiTokens)} />
         <Route path="applications/" component={errorHandler(ApiApplications)} />
-        <Route path="applications/:appId/" component={errorHandler(ApiApplicationDetails)} />
+        <Route
+          path="applications/:appId/"
+          component={errorHandler(ApiApplicationDetails)}
+        />
       </Route>
 
       <Route path="/api/new-token/" component={errorHandler(ApiNewToken)} />
@@ -125,36 +128,78 @@ function routes() {
       <Route path="/share/issue/:shareId/" component={errorHandler(SharedGroupDetails)} />
 
       <Route path="/:orgId/" component={errorHandler(OrganizationDetails)}>
-        <IndexRoute component={errorHandler(OrganizationDashboard)}/>
+        <IndexRoute component={errorHandler(OrganizationDashboard)} />
 
-        <Route path="/organizations/:orgId/audit-log/" component={errorHandler(OrganizationAuditLog)} />
-        <Route path="/organizations/:orgId/repos/" component={errorHandler(OrganizationRepositories)} />
-        <Route path="/organizations/:orgId/settings/" component={errorHandler(OrganizationSettings)} />
-        <Route path="/organizations/:orgId/teams/" component={errorHandler(OrganizationTeams)} />
-        <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
+        <Route
+          path="/organizations/:orgId/audit-log/"
+          component={errorHandler(OrganizationAuditLog)}
+        />
+        <Route
+          path="/organizations/:orgId/repos/"
+          component={errorHandler(OrganizationRepositories)}
+        />
+        <Route
+          path="/organizations/:orgId/settings/"
+          component={errorHandler(OrganizationSettings)}
+        />
+        <Route
+          path="/organizations/:orgId/teams/"
+          component={errorHandler(OrganizationTeams)}
+        />
+        <Route
+          path="/organizations/:orgId/teams/:teamId/"
+          component={errorHandler(TeamDetails)}
+        >
           <IndexRedirect to="settings/" />
           <Route path="settings/" component={errorHandler(TeamSettings)} />
           <Route path="members/" component={errorHandler(TeamMembers)} />
         </Route>
 
-        <Route path="/organizations/:orgId/all-teams/" component={errorHandler(OrganizationTeams)}>
-          <IndexRoute component={errorHandler(AllTeamsList)}/>
+        <Route
+          path="/organizations/:orgId/all-teams/"
+          component={errorHandler(OrganizationTeams)}
+        >
+          <IndexRoute component={errorHandler(AllTeamsList)} />
         </Route>
-        <Route path="/organizations/:orgId/issues/assigned/" component={errorHandler(MyIssuesAssignedToMe)} />
-        <Route path="/organizations/:orgId/issues/bookmarks/" component={errorHandler(MyIssuesBookmarked)} />
-        <Route path="/organizations/:orgId/issues/history/" component={errorHandler(MyIssuesViewed)} />
+        <Route
+          path="/organizations/:orgId/issues/assigned/"
+          component={errorHandler(MyIssuesAssignedToMe)}
+        />
+        <Route
+          path="/organizations/:orgId/issues/bookmarks/"
+          component={errorHandler(MyIssuesBookmarked)}
+        />
+        <Route
+          path="/organizations/:orgId/issues/history/"
+          component={errorHandler(MyIssuesViewed)}
+        />
 
-        <Route path="/organizations/:orgId/projects/choose/" component={errorHandler(ProjectChooser)} />
-        <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
-        <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
+        <Route
+          path="/organizations/:orgId/projects/choose/"
+          component={errorHandler(ProjectChooser)}
+        />
+        <Route
+          path="/organizations/:orgId/rate-limits/"
+          component={errorHandler(OrganizationRateLimits)}
+        />
+        <Route
+          path="/organizations/:orgId/stats/"
+          component={errorHandler(OrganizationStats)}
+        />
 
-        <Route path="/organizations/:orgId/actions/set-callsigns/" component={errorHandler(SetCallsignsAction)} />
+        <Route
+          path="/organizations/:orgId/actions/set-callsigns/"
+          component={errorHandler(SetCallsignsAction)}
+        />
 
         {hooksOrgRoutes}
 
-        <Route path=":projectId/getting-started/" component={errorHandler(ProjectGettingStarted)}>
-          <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
-          <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
+        <Route
+          path=":projectId/getting-started/"
+          component={errorHandler(ProjectGettingStarted)}
+        >
+          <IndexRoute component={errorHandler(ProjectInstallOverview)} />
+          <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)} />
         </Route>
 
         <Route path=":projectId/" component={errorHandler(ProjectDetails)}>
@@ -164,45 +209,61 @@ function routes() {
           <Route path="events/" component={errorHandler(ProjectEvents)} />
           <Route path="releases/" component={errorHandler(ProjectReleases)} />
           {/* TODO(jess): take this out when we release releases to everyone */}
-          <Route name="releaseDetails" path="releases/:version/" component={errorHandler(ReleaseDetails)}
-                 getIndexRoute={(partialNextState, cb) => {
-                  let client = new this.api.Client();
-                  let orgId = partialNextState.params.orgId;
-                  client.request(`/organizations/${orgId}/`, {
-                      method: 'GET',
-                      success: (data, _, jqXHR) => {
-                        if (new Set(data.features).has('release-commits')) {
-                          cb(null, {component: errorHandler(ReleaseOverview)});
-                        } else {
-                          cb(null, {component: errorHandler(ReleaseNewEvents)});
-                        }
-                      }
-                  });
-                 }}>
+          <Route
+            name="releaseDetails"
+            path="releases/:version/"
+            component={errorHandler(ReleaseDetails)}
+            getIndexRoute={(partialNextState, cb) => {
+              let client = new this.api.Client();
+              let orgId = partialNextState.params.orgId;
+              client.request(`/organizations/${orgId}/`, {
+                method: 'GET',
+                success: (data, _, jqXHR) => {
+                  if (new Set(data.features).has('release-commits')) {
+                    cb(null, {component: errorHandler(ReleaseOverview)});
+                  } else {
+                    cb(null, {component: errorHandler(ReleaseNewEvents)});
+                  }
+                }
+              });
+            }}
+          >
             <Route path="new-events/" component={errorHandler(ReleaseNewEvents)} />
             <Route path="overview/" component={errorHandler(ReleaseOverview)} />
             <Route path="all-events/" component={errorHandler(ReleaseAllEvents)} />
             <Route path="artifacts/" component={errorHandler(ReleaseArtifacts)} />
-            <Route path="commits/" component={errorHandler(ReleaseCommits)}/>
+            <Route path="commits/" component={errorHandler(ReleaseCommits)} />
           </Route>
           <Route path="user-feedback/" component={errorHandler(ProjectUserReports)} />
           <Route path="settings/" component={errorHandler(ProjectSettings)}>
             <Route path="alerts/" component={errorHandler(ProjectAlertSettings)} />
             <Route path="alerts/rules/" component={errorHandler(ProjectAlertRules)} />
             <Route path="filters/" component={errorHandler(ProjectFilters)} />
-            <Route path="saved-searches/" component={errorHandler(ProjectSavedSearches)} />
+            <Route
+              path="saved-searches/"
+              component={errorHandler(ProjectSavedSearches)}
+            />
             <Route path="debug-symbols/" component={errorHandler(ProjectDebugSymbols)} />
-            <Route path="processing-issues/" component={errorHandler(ProjectProcessingIssues)} />
-            <Route path="user-feedback/" component={errorHandler(ProjectUserReportSettings)} />
+            <Route
+              path="processing-issues/"
+              component={errorHandler(ProjectProcessingIssues)}
+            />
+            <Route
+              path="user-feedback/"
+              component={errorHandler(ProjectUserReportSettings)}
+            />
             <Route path="csp/" component={errorHandler(ProjectCspSettings)} />
             <Route path="install/" component={errorHandler(ProjectDocsContext)}>
-              <IndexRoute component={errorHandler(ProjectInstallOverview)}/>
-              <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)}/>
+              <IndexRoute component={errorHandler(ProjectInstallOverview)} />
+              <Route path=":platform/" component={errorHandler(ProjectInstallPlatform)} />
             </Route>
           </Route>
           <Redirect from="group/:groupId/" to="issues/:groupId/" />
-          <Route path="issues/:groupId/" component={errorHandler(GroupDetails)}
-                 ignoreScrollBehavior>
+          <Route
+            path="issues/:groupId/"
+            component={errorHandler(GroupDetails)}
+            ignoreScrollBehavior
+          >
             <IndexRoute component={errorHandler(GroupEventDetails)} />
 
             <Route path="activity/" component={errorHandler(GroupActivity)} />
@@ -218,7 +279,11 @@ function routes() {
 
       {hooksRoutes}
 
-      <Route path="*" component={errorHandler(RouteNotFound)} onEnter={appendTrailingSlash}/>
+      <Route
+        path="*"
+        component={errorHandler(RouteNotFound)}
+        onEnter={appendTrailingSlash}
+      />
     </Route>
   );
 }
diff --git a/src/sentry/static/sentry/app/stores/alertStore.jsx b/src/sentry/static/sentry/app/stores/alertStore.jsx
index 6dc7fa40fd..dcc702f392 100644
--- a/src/sentry/static/sentry/app/stores/alertStore.jsx
+++ b/src/sentry/static/sentry/app/stores/alertStore.jsx
@@ -67,7 +67,7 @@ const AlertStore = Reflux.createStore({
     // TODO(dcramer): we need some animations here for closing alerts
     this.alerts = this.alerts.filter(item => alert !== item);
     this.trigger(this.alerts);
-  },
+  }
 });
 
 export default AlertStore;
diff --git a/src/sentry/static/sentry/app/stores/configStore.jsx b/src/sentry/static/sentry/app/stores/configStore.jsx
index 71948967b3..eb3ba04769 100644
--- a/src/sentry/static/sentry/app/stores/configStore.jsx
+++ b/src/sentry/static/sentry/app/stores/configStore.jsx
@@ -37,4 +37,3 @@ const ConfigStore = Reflux.createStore({
 });
 
 export default ConfigStore;
-
diff --git a/src/sentry/static/sentry/app/stores/eventStore.jsx b/src/sentry/static/sentry/app/stores/eventStore.jsx
index f97bd7698d..1fdc149490 100644
--- a/src/sentry/static/sentry/app/stores/eventStore.jsx
+++ b/src/sentry/static/sentry/app/stores/eventStore.jsx
@@ -15,7 +15,7 @@ const EventStore = Reflux.createStore({
     this.reset();
 
     let itemIds = new Set();
-    items.forEach((item) => {
+    items.forEach(item => {
       itemIds.add(item.id);
       this.items.push(item);
     });
@@ -30,7 +30,7 @@ const EventStore = Reflux.createStore({
 
     let itemsById = {};
     let itemIds = new Set();
-    items.forEach((item) => {
+    items.forEach(item => {
       itemsById[item.id] = item;
       itemIds.add(item.id);
     });
@@ -68,7 +68,7 @@ const EventStore = Reflux.createStore({
   },
 
   getAllItemIds() {
-    return this.items.map((item) => item.id);
+    return this.items.map(item => item.id);
   },
 
   getAllItems() {
@@ -77,4 +77,3 @@ const EventStore = Reflux.createStore({
 });
 
 export default EventStore;
-
diff --git a/src/sentry/static/sentry/app/stores/groupStore.jsx b/src/sentry/static/sentry/app/stores/groupStore.jsx
index c397334ecf..2a243317c6 100644
--- a/src/sentry/static/sentry/app/stores/groupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/groupStore.jsx
@@ -6,7 +6,6 @@ import utils from '../utils';
 import {t} from '../locale';
 import _ from 'underscore';
 
-
 function showAlert(msg, type) {
   IndicatorStore.add(msg, type, {
     duration: 4000
@@ -33,7 +32,7 @@ const GroupStore = Reflux.createStore({
     this.reset();
 
     let itemIds = new Set();
-    items.forEach((item) => {
+    items.forEach(item => {
       itemIds.add(item.id);
       this.items.push(item);
     });
@@ -48,7 +47,7 @@ const GroupStore = Reflux.createStore({
 
     let itemsById = {};
     let itemIds = new Set();
-    items.forEach((item) => {
+    items.forEach(item => {
       itemsById[item.id] = item;
       itemIds.add(item.id);
     });
@@ -122,8 +121,7 @@ const GroupStore = Reflux.createStore({
     } else {
       group.activity.splice(index, 0, data);
     }
-    if (data.type === 'note')
-      group.numComments++;
+    if (data.type === 'note') group.numComments++;
 
     this.trigger(new Set([id]));
   },
@@ -151,8 +149,7 @@ const GroupStore = Reflux.createStore({
 
     let activity = group.activity.splice(index, 1);
 
-    if (activity[0].type === 'note')
-      group.numComments--;
+    if (activity[0].type === 'note') group.numComments--;
 
     this.trigger(new Set([group.id]));
     return index;
@@ -183,7 +180,7 @@ const GroupStore = Reflux.createStore({
   },
 
   getAllItemIds() {
-    return this.items.map((item) => item.id);
+    return this.items.map(item => item.id);
   },
 
   getAllItems() {
@@ -251,7 +248,7 @@ const GroupStore = Reflux.createStore({
       delete this.statuses[itemId];
       this.clearStatus(itemId, 'delete');
     });
-    this.items = this.items.filter((item) => !itemIdSet.has(item.id));
+    this.items = this.items.filter(item => !itemIdSet.has(item.id));
     showAlert(t('The selected events have been scheduled for deletion.'), 'success');
     this.trigger(new Set(itemIds));
   },
@@ -285,7 +282,7 @@ const GroupStore = Reflux.createStore({
     // Remove all but parent id (items were merged into this one)
     let mergedIdSet = new Set(mergedIds);
     this.items = this.items.filter(
-      (item) => !mergedIdSet.has(item.id) || item.id === response.merge.parent
+      item => !mergedIdSet.has(item.id) || item.id === response.merge.parent
     );
 
     showAlert(t('The selected events have been scheduled for merge.'), 'success');
@@ -337,7 +334,6 @@ const GroupStore = Reflux.createStore({
     this.pendingChanges.remove(changeId);
     this.trigger(new Set(itemIds));
   }
-
 });
 
 export default GroupStore;
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 48b8c614bc..0add917667 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -30,7 +30,7 @@ const HookStore = Reflux.createStore({
     if (_.isUndefined(this.hooks[hookName])) {
       return;
     }
-    this.hooks[hookName] = this.hooks[hookName].filter((cb) => {
+    this.hooks[hookName] = this.hooks[hookName].filter(cb => {
       return cb !== callback;
     });
     this.trigger(hookName, this.hooks[hookName]);
@@ -42,4 +42,3 @@ const HookStore = Reflux.createStore({
 });
 
 export default HookStore;
-
diff --git a/src/sentry/static/sentry/app/stores/incidentStore.jsx b/src/sentry/static/sentry/app/stores/incidentStore.jsx
index a142e11c7c..6ebec76b4c 100644
--- a/src/sentry/static/sentry/app/stores/incidentStore.jsx
+++ b/src/sentry/static/sentry/app/stores/incidentStore.jsx
@@ -20,8 +20,7 @@ const IncidentStore = Reflux.createStore({
 
   getStatus() {
     return this.status;
-  },
+  }
 });
 
 export default IncidentStore;
-
diff --git a/src/sentry/static/sentry/app/stores/indicatorStore.jsx b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
index a8ded397cd..e4b4d22c81 100644
--- a/src/sentry/static/sentry/app/stores/indicatorStore.jsx
+++ b/src/sentry/static/sentry/app/stores/indicatorStore.jsx
@@ -27,7 +27,7 @@ const IndicatorStore = Reflux.createStore({
   },
 
   remove(indicator) {
-    this.items = this.items.filter((item) => {
+    this.items = this.items.filter(item => {
       return item !== indicator;
     });
     this.trigger(this.items);
diff --git a/src/sentry/static/sentry/app/stores/organizationStore.jsx b/src/sentry/static/sentry/app/stores/organizationStore.jsx
index 7d41c655fe..ce7f9acddf 100644
--- a/src/sentry/static/sentry/app/stores/organizationStore.jsx
+++ b/src/sentry/static/sentry/app/stores/organizationStore.jsx
@@ -35,4 +35,3 @@ const OrganizationStore = Reflux.createStore({
 });
 
 export default OrganizationStore;
-
diff --git a/src/sentry/static/sentry/app/stores/projectStore.jsx b/src/sentry/static/sentry/app/stores/projectStore.jsx
index 0208b4e185..bf2a7f32ed 100644
--- a/src/sentry/static/sentry/app/stores/projectStore.jsx
+++ b/src/sentry/static/sentry/app/stores/projectStore.jsx
@@ -56,4 +56,3 @@ const ProjectStore = Reflux.createStore({
 });
 
 export default ProjectStore;
-
diff --git a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
index 64a5b66b1b..f8e3e5e9e5 100644
--- a/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
+++ b/src/sentry/static/sentry/app/stores/selectedGroupStore.jsx
@@ -16,7 +16,7 @@ const SelectedGroupStore = Reflux.createStore({
 
   add(ids) {
     let allSelected = this.allSelected();
-    ids.forEach((id) => {
+    ids.forEach(id => {
       if (!this.records.hasOwnProperty(id)) {
         this.records[id] = allSelected;
       }
@@ -93,4 +93,3 @@ const SelectedGroupStore = Reflux.createStore({
 });
 
 export default SelectedGroupStore;
-
diff --git a/src/sentry/static/sentry/app/stores/streamTagStore.jsx b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
index 3b80f2a1b2..62d808ce1e 100644
--- a/src/sentry/static/sentry/app/stores/streamTagStore.jsx
+++ b/src/sentry/static/sentry/app/stores/streamTagStore.jsx
@@ -37,7 +37,7 @@ const StreamTagStore = Reflux.createStore({
         key: 'has',
         name: 'Has Tag',
         values: [],
-        predefined: true,
+        predefined: true
       },
       assigned: {
         key: 'assigned',
@@ -72,20 +72,28 @@ const StreamTagStore = Reflux.createStore({
   },
 
   onLoadTagsSuccess(data) {
-    Object.assign(this.tags, _.reduce(data, (obj, tag) => {
-
-      tag = Object.assign({
-        values: []
-      }, tag);
-
-      let old = this.tags[tag.key];
-
-      // Don't override predefined filters (e.g. "is")
-      if (!old || !old.predefined)
-        obj[tag.key] = tag;
-
-      return obj;
-    }, {}));
+    Object.assign(
+      this.tags,
+      _.reduce(
+        data,
+        (obj, tag) => {
+          tag = Object.assign(
+            {
+              values: []
+            },
+            tag
+          );
+
+          let old = this.tags[tag.key];
+
+          // Don't override predefined filters (e.g. "is")
+          if (!old || !old.predefined) obj[tag.key] = tag;
+
+          return obj;
+        },
+        {}
+      )
+    );
     this.tags.has.values = data.map(tag => tag.key);
     this.trigger(this.tags);
   },
diff --git a/src/sentry/static/sentry/app/stores/teamStore.jsx b/src/sentry/static/sentry/app/stores/teamStore.jsx
index aec80228b8..7637627f87 100644
--- a/src/sentry/static/sentry/app/stores/teamStore.jsx
+++ b/src/sentry/static/sentry/app/stores/teamStore.jsx
@@ -26,8 +26,7 @@ const TeamStore = Reflux.createStore({
   },
 
   onUpdateSuccess(changeId, itemId, response) {
-    if (!response)
-      return;
+    if (!response) return;
 
     let item = this.getBySlug(itemId);
     if (!item) {
@@ -63,7 +62,7 @@ const TeamStore = Reflux.createStore({
   },
 
   getActive() {
-    return this.items.filter((item) => item.isMember);
+    return this.items.filter(item => item.isMember);
   },
 
   getAll() {
@@ -74,4 +73,3 @@ const TeamStore = Reflux.createStore({
 window.TeamStore = TeamStore;
 
 export default TeamStore;
-
diff --git a/src/sentry/static/sentry/app/translations.jsx b/src/sentry/static/sentry/app/translations.jsx
index ccff3245cf..119af21b04 100644
--- a/src/sentry/static/sentry/app/translations.jsx
+++ b/src/sentry/static/sentry/app/translations.jsx
@@ -1,9 +1,7 @@
 // zh-cn => zh_CN
 function convertToDjangoLocaleFormat(language) {
   let [left, right] = language.split('-');
-  return left + (
-    right ? '_' + right.toUpperCase() : ''
-  );
+  return left + (right ? '_' + right.toUpperCase() : '');
 }
 
 export function getTranslations(language) {
diff --git a/src/sentry/static/sentry/app/utils.jsx b/src/sentry/static/sentry/app/utils.jsx
index 6979a77c30..65578de69b 100644
--- a/src/sentry/static/sentry/app/utils.jsx
+++ b/src/sentry/static/sentry/app/utils.jsx
@@ -2,12 +2,9 @@ import _ from 'underscore';
 
 /*eslint no-use-before-define:0*/
 export const modelsEqual = function(obj1, obj2) {
-  if (!obj1 && !obj2)
-    return true;
-  if (obj1.id && !obj2)
-    return false;
-  if (obj2.id && !obj1)
-    return false;
+  if (!obj1 && !obj2) return true;
+  if (obj1.id && !obj2) return false;
+  if (obj2.id && !obj1) return false;
   return obj1.id === obj2.id;
 };
 
@@ -46,7 +43,7 @@ export const valueIsEqual = function(value, other, deep) {
   return false;
 };
 
-export const objectMatchesSubset = function(obj, other, deep){
+export const objectMatchesSubset = function(obj, other, deep) {
   let k;
 
   if (obj === other) {
@@ -114,28 +111,31 @@ export const compareArrays = function(arr1, arr2, compFunc) {
 };
 
 export const intcomma = function(x) {
-    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
+  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
 };
 
 export function getQueryParams() {
   let hashes, hash;
   let vars = {}, href = window.location.href;
 
-  if (href.indexOf('?') == -1)
-    return vars;
+  if (href.indexOf('?') == -1) return vars;
 
-  hashes = href.slice(
-    href.indexOf('?') + 1,
-    (href.indexOf('#') != -1 ? href.indexOf('#') : href.length)
-  ).split('&');
+  hashes = href
+    .slice(
+      href.indexOf('?') + 1,
+      href.indexOf('#') != -1 ? href.indexOf('#') : href.length
+    )
+    .split('&');
 
-  hashes.forEach((chunk) => {
+  hashes.forEach(chunk => {
     hash = chunk.split('=');
     if (!hash[0] && !hash[1]) {
       return;
     }
 
-    vars[decodeURIComponent(hash[0])] = (hash[1] ? decodeURIComponent(hash[1]).replace(/\+/, ' ') : '');
+    vars[decodeURIComponent(hash[0])] = hash[1]
+      ? decodeURIComponent(hash[1]).replace(/\+/, ' ')
+      : '';
   });
 
   return vars;
@@ -170,7 +170,7 @@ export function objectIsEmpty(obj) {
 }
 
 export function trim(str) {
-  return str.replace(/^\s+|\s+$/g,'');
+  return str.replace(/^\s+|\s+$/g, '');
 }
 
 export function defined(item) {
@@ -182,11 +182,15 @@ export function nl2br(str) {
 }
 
 export function isUrl(str) {
-  return !!str && _.isString(str) && (str.indexOf('http://') === 0 || str.indexOf('https://') === 0);
+  return (
+    !!str &&
+    _.isString(str) &&
+    (str.indexOf('http://') === 0 || str.indexOf('https://') === 0)
+  );
 }
 
 export function escape(str) {
-  return str.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
+  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
 }
 
 export function percent(value, totalValue, precise) {
@@ -199,13 +203,13 @@ export function urlize(str) {
 }
 
 export function toTitleCase(str) {
-  return str.replace(/\w\S*/g, (txt) => {
+  return str.replace(/\w\S*/g, txt => {
     return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
   });
 }
 
 export function formatBytes(bytes) {
-  let units = ['KB','MB','GB','TB','PB','EB','ZB','YB'];
+  let units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
   let thresh = 1024;
   if (bytes < thresh) {
     return bytes + ' B';
@@ -240,14 +244,7 @@ import CursorPoller from './utils/cursorPoller';
 import StreamManager from './utils/streamManager';
 
 // re-export under utils
-export {
-  parseLinkHeader,
-  deviceNameMapper,
-  Collection,
-  PendingChangeQueue,
-  CursorPoller
-};
-
+export {parseLinkHeader, deviceNameMapper, Collection, PendingChangeQueue, CursorPoller};
 
 // backwards compatible default export for use w/ getsentry (exported
 // as a single object w/ function refs for consumption by getsentry)
diff --git a/src/sentry/static/sentry/app/utils/collection.jsx b/src/sentry/static/sentry/app/utils/collection.jsx
index ce83008cb9..62862aa3b9 100644
--- a/src/sentry/static/sentry/app/utils/collection.jsx
+++ b/src/sentry/static/sentry/app/utils/collection.jsx
@@ -46,14 +46,16 @@ Collection.prototype.push = function push(items) {
     items = [items];
   }
 
-  items.forEach(function(item){
-    let existing = this.pop(item);
-    if (existing) {
-      $.extend(true, existing, item);
-      item = existing;
-    }
-    Array.prototype.push.apply(this, [item]);
-  }.bind(this));
+  items.forEach(
+    function(item) {
+      let existing = this.pop(item);
+      if (existing) {
+        $.extend(true, existing, item);
+        item = existing;
+      }
+      Array.prototype.push.apply(this, [item]);
+    }.bind(this)
+  );
   this._refresh();
   return this;
 };
@@ -62,14 +64,16 @@ Collection.prototype.unshift = function unshift(items) {
   if (!_.isArray(items)) {
     items = [items];
   }
-  items.reverse().forEach(function(item){
-    let existing = this.pop(item);
-    if (existing) {
-      $.extend(true, existing, item);
-      item = existing;
-    }
-    Array.prototype.unshift.apply(this, [item]);
-  }.bind(this));
+  items.reverse().forEach(
+    function(item) {
+      let existing = this.pop(item);
+      if (existing) {
+        $.extend(true, existing, item);
+        item = existing;
+      }
+      Array.prototype.unshift.apply(this, [item]);
+    }.bind(this)
+  );
   this._refresh();
   return this;
 };
diff --git a/src/sentry/static/sentry/app/utils/cursorPoller.jsx b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
index e7646d488d..d2a6655dfd 100644
--- a/src/sentry/static/sentry/app/utils/cursorPoller.jsx
+++ b/src/sentry/static/sentry/app/utils/cursorPoller.jsx
@@ -76,4 +76,3 @@ class CursorPoller {
 }
 
 export default CursorPoller;
-
diff --git a/src/sentry/static/sentry/app/utils/errorHandler.jsx b/src/sentry/static/sentry/app/utils/errorHandler.jsx
index 95bcf1ea81..40d3ca0323 100644
--- a/src/sentry/static/sentry/app/utils/errorHandler.jsx
+++ b/src/sentry/static/sentry/app/utils/errorHandler.jsx
@@ -8,7 +8,9 @@ export default function errorHandler(Component) {
       return originalRender.apply(this, arguments);
     } catch (err) {
       /*eslint no-console:0*/
-      setTimeout(() => { throw err; });
+      setTimeout(() => {
+        throw err;
+      });
       return <RouteError error={err} component={this} />;
     }
   };
diff --git a/src/sentry/static/sentry/app/utils/formatters.jsx b/src/sentry/static/sentry/app/utils/formatters.jsx
index d1c92dc1c6..d9125ec24e 100644
--- a/src/sentry/static/sentry/app/utils/formatters.jsx
+++ b/src/sentry/static/sentry/app/utils/formatters.jsx
@@ -4,4 +4,4 @@ export function userDisplayName(user) {
     displayName += ' (' + user.email + ')';
   }
   return displayName;
-}
\ No newline at end of file
+}
diff --git a/src/sentry/static/sentry/app/utils/localStorage.jsx b/src/sentry/static/sentry/app/utils/localStorage.jsx
index d336f30bd9..b025f11f55 100644
--- a/src/sentry/static/sentry/app/utils/localStorage.jsx
+++ b/src/sentry/static/sentry/app/utils/localStorage.jsx
@@ -9,12 +9,16 @@ try {
     setItem: localStorage.setItem.bind(localStorage),
     getItem: localStorage.getItem.bind(localStorage)
   };
-} catch(e) {
+} catch (e) {
   functions = {
-    setItem() { return; },
+    setItem() {
+      return;
+    },
     // Returns null if key doesn't exist:
     // https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem
-    getItem() { return null; }
+    getItem() {
+      return null;
+    }
   };
 }
 
diff --git a/src/sentry/static/sentry/app/utils/logging.jsx b/src/sentry/static/sentry/app/utils/logging.jsx
index f26c386d01..8c2df18a64 100644
--- a/src/sentry/static/sentry/app/utils/logging.jsx
+++ b/src/sentry/static/sentry/app/utils/logging.jsx
@@ -9,11 +9,9 @@ export function logException(ex, context) {
 }
 
 export function logAjaxError(error, context) {
-  let errorString = error.responseJSON ?
-    (error.responseJSON.detail || JSON.stringify(error.responseJSON, null, 2)) :
-    error.responseText ?
-      error.responseText.substr(0, 255) :
-      '<unknown response>'; // occassionally responseText is undefined
+  let errorString = error.responseJSON
+    ? error.responseJSON.detail || JSON.stringify(error.responseJSON, null, 2)
+    : error.responseText ? error.responseText.substr(0, 255) : '<unknown response>'; // occassionally responseText is undefined
 
   let message = `HTTP ${error.status}: ${errorString}`;
   Raven.captureMessage(message, {
diff --git a/src/sentry/static/sentry/app/utils/marked.jsx b/src/sentry/static/sentry/app/utils/marked.jsx
index 8f15096b88..eabf242941 100644
--- a/src/sentry/static/sentry/app/utils/marked.jsx
+++ b/src/sentry/static/sentry/app/utils/marked.jsx
@@ -3,12 +3,11 @@ import marked from 'marked';
 function isSafeHref(href, pattern) {
   try {
     return pattern.test(decodeURIComponent(unescape(href)));
-  } catch(e) {
+  } catch (e) {
     return false;
   }
 }
 
-
 // We need to implement our own marked Renderer to not render
 // potentially malicious uris.
 // This is copy/pasted from
@@ -34,7 +33,6 @@ Renderer.prototype.link = function(href, title, text) {
   return out;
 };
 
-
 // Only allow http(s) for image tags
 const safeImagePattern = /^https?:\/\/./i;
 
diff --git a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
index 9ad4242e1d..588fee4614 100644
--- a/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
+++ b/src/sentry/static/sentry/app/utils/parseLinkHeader.jsx
@@ -5,9 +5,11 @@ export default function(header) {
 
   let header_vals = header.split(','), links = {};
 
-  header_vals.forEach((val) => {
-    let match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(val);
-    let hasResults = (match[3] === 'true' ? true : (match[3] === 'false' ? false : null));
+  header_vals.forEach(val => {
+    let match = /<([^>]+)>; rel="([^"]+)"(?:; results="([^"]+)")?(?:; cursor="([^"]+)")?/g.exec(
+      val
+    );
+    let hasResults = match[3] === 'true' ? true : match[3] === 'false' ? false : null;
 
     links[match[2]] = {
       href: match[1],
@@ -18,4 +20,3 @@ export default function(header) {
 
   return links;
 }
-
diff --git a/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx b/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx
index b6d3a6cea1..cc1c45056a 100644
--- a/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx
+++ b/src/sentry/static/sentry/app/utils/pendingChangeQueue.jsx
@@ -9,9 +9,7 @@ class PendingChangeQueue extends Array {
   }
 
   getForItem(itemId) {
-    return this.changes.filter(
-      (change) => (change[1] === itemId)
-    );
+    return this.changes.filter(change => change[1] === itemId);
   }
 
   push(changeId, itemId, data) {
@@ -20,10 +18,9 @@ class PendingChangeQueue extends Array {
 
   remove(changeId, itemId) {
     this.changes = this.changes.filter(
-      (change) => change[0] != changeId || change[1] != itemId
+      change => change[0] != changeId || change[1] != itemId
     );
   }
 }
 
 export default PendingChangeQueue;
-
diff --git a/src/sentry/static/sentry/app/utils/stream.jsx b/src/sentry/static/sentry/app/utils/stream.jsx
index 59b6bd9abe..2483a41816 100644
--- a/src/sentry/static/sentry/app/utils/stream.jsx
+++ b/src/sentry/static/sentry/app/utils/stream.jsx
@@ -19,20 +19,23 @@ export function queryToObj(queryStr) {
   let text = [];
 
   let queryItems = queryStr.match(/\S+:"[^"]*"?|\S+/g);
-  let queryObj = _.inject(queryItems, (obj, item) => {
-    let index = item.indexOf(':');
-    if (index === -1) {
-      text.push(item);
-    } else {
-      let tagKey = item.slice(0, index);
-      let value = item.slice(index + 1).replace(/^"|"$/g, '');
-      obj[tagKey] = value;
-    }
-    return obj;
-  }, {});
-
-  if (text.length)
-    queryObj.__text = text.join(' ');
+  let queryObj = _.inject(
+    queryItems,
+    (obj, item) => {
+      let index = item.indexOf(':');
+      if (index === -1) {
+        text.push(item);
+      } else {
+        let tagKey = item.slice(0, index);
+        let value = item.slice(index + 1).replace(/^"|"$/g, '');
+        obj[tagKey] = value;
+      }
+      return obj;
+    },
+    {}
+  );
+
+  if (text.length) queryObj.__text = text.join(' ');
 
   return queryObj;
 }
@@ -45,14 +48,12 @@ export function objToQuery(queryObj) {
   let tags = _.omit(queryObj, '__text');
 
   let parts = _.map(tags, (value, tagKey) => {
-      if (value.indexOf(' ') > -1)
-        value = `"${value}"`;
+    if (value.indexOf(' ') > -1) value = `"${value}"`;
 
-      return `${tagKey}:${value}`;
-    });
+    return `${tagKey}:${value}`;
+  });
 
-  if (queryObj.__text)
-    parts.push(queryObj.__text);
+  if (queryObj.__text) parts.push(queryObj.__text);
 
   return parts.join(' ');
 }
diff --git a/src/sentry/static/sentry/app/utils/streamManager.jsx b/src/sentry/static/sentry/app/utils/streamManager.jsx
index ad62074966..cbc0986ba1 100644
--- a/src/sentry/static/sentry/app/utils/streamManager.jsx
+++ b/src/sentry/static/sentry/app/utils/streamManager.jsx
@@ -24,10 +24,10 @@ class StreamManager {
     items = [].concat(items);
     if (items.length === 0) return this;
 
-    items = items.filter((item) => item.hasOwnProperty('id'));
+    items = items.filter(item => item.hasOwnProperty('id'));
 
-    items.forEach((item) => removeFromList(item.id, this.idList));
-    let ids = items.map((item) => item.id);
+    items.forEach(item => removeFromList(item.id, this.idList));
+    let ids = items.map(item => item.id);
     this.idList = [].concat(this.idList, ids);
 
     this.trim();
@@ -45,8 +45,8 @@ class StreamManager {
     items = [].concat(items);
     if (items.length === 0) return this;
 
-    items.forEach((item) => removeFromList(item.id, this.idList));
-    let ids = items.map((item) => item.id);
+    items.forEach(item => removeFromList(item.id, this.idList));
+    let ids = items.map(item => item.id);
     this.idList = [].concat(ids, this.idList);
 
     this.trim();
@@ -56,4 +56,3 @@ class StreamManager {
 }
 
 export default StreamManager;
-
diff --git a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
index 9b335ca586..78e211f632 100644
--- a/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
+++ b/src/sentry/static/sentry/app/views/accountAuthorizations.jsx
@@ -17,7 +17,7 @@ const AuthorizationRow = React.createClass({
 
   getInitialState() {
     return {
-      loading: false,
+      loading: false
     };
   },
 
@@ -26,31 +26,33 @@ const AuthorizationRow = React.createClass({
 
     let {authorization} = this.props;
 
-    this.setState({
-      loading: true,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      this.api.request('/api-authorizations/', {
-        method: 'DELETE',
-        data: {authorization: authorization.id},
-        success: (data) => {
-          IndicatorStore.remove(loadingIndicator);
-          this.props.onRevoke();
-        },
-        error: () => {
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
-        }
-      });
-    });
+    this.setState(
+      {
+        loading: true
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request('/api-authorizations/', {
+          method: 'DELETE',
+          data: {authorization: authorization.id},
+          success: data => {
+            IndicatorStore.remove(loadingIndicator);
+            this.props.onRevoke();
+          },
+          error: () => {
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
+          }
+        });
+      }
+    );
   },
 
   render() {
     let authorization = this.props.authorization;
 
     let btnClassName = 'btn btn-default';
-    if (this.state.loading)
-      btnClassName += ' disabled';
+    if (this.state.loading) btnClassName += ' disabled';
 
     return (
       <tr>
@@ -58,17 +60,20 @@ const AuthorizationRow = React.createClass({
           <h5 style={{marginBottom: 5}}>{authorization.application.name}</h5>
           {authorization.homepageUrl &&
             <div style={{marginBottom: 5}}>
-              <small><a href={authorization.homepageUrl}>{authorization.homepageUrl}</a></small>
-            </div>
-          }
+              <small>
+                <a href={authorization.homepageUrl}>{authorization.homepageUrl}</a>
+              </small>
+            </div>}
           <div>
             <small style={{color: '#999'}}>{authorization.scopes.join(', ')}</small>
           </div>
         </td>
         <td style={{width: 32}}>
-          <a onClick={this.onRevoke.bind(this, authorization)}
-             className={btnClassName}
-             disabled={this.state.loading}>
+          <a
+            onClick={this.onRevoke.bind(this, authorization)}
+            className={btnClassName}
+            disabled={this.state.loading}
+          >
             <span className="icon icon-trash" />
           </a>
         </td>
@@ -84,7 +89,7 @@ const AccountAuthorizations = React.createClass({
     return {
       loading: true,
       error: false,
-      authorizationList: [],
+      authorizationList: []
     };
   },
 
@@ -98,7 +103,7 @@ const AccountAuthorizations = React.createClass({
 
   fetchData() {
     this.setState({
-      loading: true,
+      loading: true
     });
 
     this.api.request('/api-authorizations/', {
@@ -112,7 +117,7 @@ const AccountAuthorizations = React.createClass({
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -121,8 +126,8 @@ const AccountAuthorizations = React.createClass({
   onRevoke(authorization) {
     this.setState({
       authorizationList: this.state.authorizationList.filter(
-        (a) => a.id !== authorization.id
-      ),
+        a => a.id !== authorization.id
+      )
     });
   },
 
@@ -147,14 +152,15 @@ const AccountAuthorizations = React.createClass({
         <h4>Approved Applications</h4>
         <table className="table">
           <tbody>
-          {authorizationList.map((authorization) => {
-            return (
-              <AuthorizationRow
-                key={authorization.id}
-                authorization={authorization}
-                onRevoke={this.onRevoke.bind(this, authorization)} />
-            );
-          })}
+            {authorizationList.map(authorization => {
+              return (
+                <AuthorizationRow
+                  key={authorization.id}
+                  authorization={authorization}
+                  onRevoke={this.onRevoke.bind(this, authorization)}
+                />
+              );
+            })}
           </tbody>
         </table>
       </div>
@@ -169,14 +175,19 @@ const AccountAuthorizations = React.createClass({
     return (
       <DocumentTitle title={this.getTitle()}>
         <div>
-          {(this.state.loading ?
-            <LoadingIndicator />
-          : (this.state.error ?
-            <LoadingError onRetry={this.fetchData} />
-          :
-            this.renderResults()
-          ))}
-          <p><small>You can manage your own applications via the <a href="/api/">API dashboard</a>.</small></p>
+          {this.state.loading
+            ? <LoadingIndicator />
+            : this.state.error
+                ? <LoadingError onRetry={this.fetchData} />
+                : this.renderResults()}
+          <p>
+            <small>
+              You can manage your own applications via the
+              {' '}
+              <a href="/api/">API dashboard</a>
+              .
+            </small>
+          </p>
         </div>
       </DocumentTitle>
     );
diff --git a/src/sentry/static/sentry/app/views/accountLayout.jsx b/src/sentry/static/sentry/app/views/accountLayout.jsx
index 7fa51f7d32..e613907cb5 100644
--- a/src/sentry/static/sentry/app/views/accountLayout.jsx
+++ b/src/sentry/static/sentry/app/views/accountLayout.jsx
@@ -13,7 +13,7 @@ const AccountLayout = React.createClass({
           <a href="/account/logout/">{t('Sign out')}</a>
         </div>
         <a href="/">
-          <span className="icon-sentry-logo"></span>
+          <span className="icon-sentry-logo" />
           <span className="back-to">{t('Back to organization')}</span>
         </a>
       </div>
@@ -23,7 +23,9 @@ const AccountLayout = React.createClass({
       <NarrowLayout header={header}>
         <h3>{t('My Settings')}</h3>
         <DropdownLink topLevelClasses="anchor-right pull-right" title={t('More')}>
-          <MenuItem to="/account/authorizations/">{t('Authorized Applications')}</MenuItem>
+          <MenuItem to="/account/authorizations/">
+            {t('Authorized Applications')}
+          </MenuItem>
           <MenuItem href="/account/settings/identities/">{t('Identities')}</MenuItem>
           <MenuItem href="/account/remove/">{t('Close Account')}</MenuItem>
         </DropdownLink>
@@ -43,4 +45,3 @@ const AccountLayout = React.createClass({
 });
 
 export default AccountLayout;
-
diff --git a/src/sentry/static/sentry/app/views/admin/index.jsx b/src/sentry/static/sentry/app/views/admin/index.jsx
index acb56b714a..df6830745a 100644
--- a/src/sentry/static/sentry/app/views/admin/index.jsx
+++ b/src/sentry/static/sentry/app/views/admin/index.jsx
@@ -11,12 +11,12 @@ const Admin = React.createClass({
   getInitialState() {
     // Allow injection via getsentry et all
     let hooksManage = [];
-    HookStore.get('admin:sidebar:manage').forEach((cb) => {
+    HookStore.get('admin:sidebar:manage').forEach(cb => {
       hooksManage.push(cb());
     });
 
     return {
-      hooksManage: hooksManage,
+      hooksManage: hooksManage
     };
   },
 
diff --git a/src/sentry/static/sentry/app/views/adminBuffer.jsx b/src/sentry/static/sentry/app/views/adminBuffer.jsx
index 6b0f512165..e41ca9c780 100644
--- a/src/sentry/static/sentry/app/views/adminBuffer.jsx
+++ b/src/sentry/static/sentry/app/views/adminBuffer.jsx
@@ -20,7 +20,7 @@ const InternalChart = React.createClass({
     return {
       error: false,
       loading: true,
-      data: null,
+      data: null
     };
   },
 
@@ -34,16 +34,16 @@ const InternalChart = React.createClass({
       data: {
         since: this.props.since,
         resolution: this.props.resolution,
-        key: this.props.stat,
+        key: this.props.stat
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           data: data,
           loading: false,
-          error: false,
+          error: false
         });
       },
-      error: (data) => {
+      error: data => {
         this.setState({
           error: true
         });
@@ -52,12 +52,10 @@ const InternalChart = React.createClass({
   },
 
   getChartPoints() {
-    let points = this.state.data.map((point) => {
+    let points = this.state.data.map(point => {
       return [point[0] * 1000, point[1]];
     });
 
-
-
     return [
       {
         data: points,
@@ -75,16 +73,13 @@ const InternalChart = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
   }
 });
 
-
 const AdminBuffer = React.createClass({
   getInitialState() {
     return {
@@ -105,7 +100,12 @@ const AdminBuffer = React.createClass({
           </div>
 
           <div className="box-content with-padding">
-            <p>Sentry buffers are responsible for making changes to cardinality counters &mdash; such as an issues event count &mdash; as well as updating attributes like <em>last seen</em>. These are flushed on a regularly interval, and are directly affected by the queue backlog.</p>
+            <p>
+              Sentry buffers are responsible for making changes to cardinality counters — such as an issues event count — as well as updating attributes like
+              {' '}
+              <em>last seen</em>
+              . These are flushed on a regularly interval, and are directly affected by the queue backlog.
+            </p>
           </div>
         </div>
 
@@ -114,10 +114,12 @@ const AdminBuffer = React.createClass({
             <h4>Updates Processed</h4>
           </div>
           <div className="box-content with-padding">
-            <InternalChart since={this.state.since}
-                           resolution={this.state.resolution}
-                           stat="jobs.finished.sentry.tasks.process_buffer.process_incr"
-                           label="Jobs" />
+            <InternalChart
+              since={this.state.since}
+              resolution={this.state.resolution}
+              stat="jobs.finished.sentry.tasks.process_buffer.process_incr"
+              label="Jobs"
+            />
           </div>
         </div>
 
@@ -126,10 +128,12 @@ const AdminBuffer = React.createClass({
             <h4>Revoked Updates</h4>
           </div>
           <div className="box-content with-padding">
-            <InternalChart since={this.state.since}
-                           resolution={this.state.resolution}
-                           stat="buffer.revoked"
-                           label="Jobs" />
+            <InternalChart
+              since={this.state.since}
+              resolution={this.state.resolution}
+              stat="buffer.revoked"
+              label="Jobs"
+            />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/adminOrganizations.jsx b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
index e0f7aafa4a..3ceb1cfa64 100644
--- a/src/sentry/static/sentry/app/views/adminOrganizations.jsx
+++ b/src/sentry/static/sentry/app/views/adminOrganizations.jsx
@@ -10,18 +10,18 @@ const AdminOrganizations = React.createClass({
   getRow(row) {
     return [
       <td>
-        <strong><Link to={`/${row.slug}/`}>
-          {row.name}
-        </Link></strong><br />
+        <strong>
+          <Link to={`/${row.slug}/`}>
+            {row.name}
+          </Link>
+        </strong><br />
         <small>{row.slug}</small>
       </td>
     ];
   },
 
   render() {
-    let columns = [
-      <th>Organization</th>,
-    ];
+    let columns = [<th>Organization</th>];
 
     return (
       <div>
@@ -38,13 +38,14 @@ const AdminOrganizations = React.createClass({
             ['members', 'Members'],
             ['events', 'Events'],
             ['projects', 'Projects'],
-            ['employees', 'Employees'],
+            ['employees', 'Employees']
           ]}
           defaultSort="date"
-          {...this.props} />
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
 export default AdminOrganizations;
diff --git a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
index 295046cabb..5dd4171103 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/apiChart.jsx
@@ -10,9 +10,7 @@ const ApiChart = React.createClass({
     since: React.PropTypes.number.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -22,14 +20,14 @@ const ApiChart = React.createClass({
         'client-api.all-versions.responses.2xx': null,
         'client-api.all-versions.responses.4xx': null,
         'client-api.all-versions.responses.5xx': null
-      },
+      }
     };
   },
 
   componentWillMount() {
     this.fetchData();
   },
-  
+
   fetchData() {
     let statNameList = [
       'client-api.all-versions.responses.2xx',
@@ -37,7 +35,7 @@ const ApiChart = React.createClass({
       'client-api.all-versions.responses.5xx'
     ];
 
-    statNameList.forEach((statName) => {
+    statNameList.forEach(statName => {
       this.api.request('/internal/stats/', {
         method: 'GET',
         data: {
@@ -45,13 +43,16 @@ const ApiChart = React.createClass({
           resolution: '1h',
           key: statName
         },
-        success: (data) => {
+        success: data => {
           this.state.rawData[statName] = data;
-          this.setState({
-            rawData: this.state.rawData,
-          }, this.requestFinished);
+          this.setState(
+            {
+              rawData: this.state.rawData
+            },
+            this.requestFinished
+          );
         },
-        error: (data) => {
+        error: data => {
           this.setState({
             error: true
           });
@@ -65,7 +66,11 @@ const ApiChart = React.createClass({
     if (rawData['events.total'] && rawData['events.dropped']) {
       this.processOrgData();
     }
-    if (rawData['client-api.all-versions.responses.2xx'] && rawData['client-api.all-versions.responses.4xx'] && rawData['client-api.all-versions.responses.5xx']) {
+    if (
+      rawData['client-api.all-versions.responses.2xx'] &&
+      rawData['client-api.all-versions.responses.4xx'] &&
+      rawData['client-api.all-versions.responses.5xx']
+    ) {
       this.setState({
         loading: false
       });
@@ -73,7 +78,7 @@ const ApiChart = React.createClass({
   },
 
   processRawSeries(series) {
-    return series.map((item) => {
+    return series.map(item => {
       return [item[0] * 1000, item[1]];
     });
   },
@@ -121,10 +126,8 @@ const ApiChart = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
     return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
   }
 });
diff --git a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
index 1f58dd9bf9..06fb48dfe8 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/eventChart.jsx
@@ -12,9 +12,7 @@ const EventChart = React.createClass({
     resolution: React.PropTypes.string.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -22,7 +20,7 @@ const EventChart = React.createClass({
       loading: true,
       rawData: {
         'events.total': null,
-        'events.dropped': null,
+        'events.dropped': null
       },
       stats: {received: [], rejected: []},
       systemTotal: {received: 0, rejected: 0, accepted: 0}
@@ -34,12 +32,9 @@ const EventChart = React.createClass({
   },
 
   fetchData() {
-    let statNameList = [
-      'events.total',
-      'events.dropped',
-    ];
+    let statNameList = ['events.total', 'events.dropped'];
 
-    statNameList.forEach((statName) => {
+    statNameList.forEach(statName => {
       // query the organization stats via a separate call as its possible the project stats
       // are too heavy
       this.api.request('/internal/stats/', {
@@ -49,13 +44,16 @@ const EventChart = React.createClass({
           resolution: this.props.resolution,
           key: statName
         },
-        success: (data) => {
+        success: data => {
           this.state.rawData[statName] = data;
-          this.setState({
-            rawData: this.state.rawData,
-          }, this.requestFinished);
+          this.setState(
+            {
+              rawData: this.state.rawData
+            },
+            this.requestFinished
+          );
         },
-        error: (data) => {
+        error: data => {
           this.setState({
             error: true
           });
@@ -78,7 +76,7 @@ const EventChart = React.createClass({
     let sReceived = {};
     let sRejected = {};
     let aReceived = [0, 0]; // received, points
-    jQuery.each(rawData['events.total'], function(idx, point){
+    jQuery.each(rawData['events.total'], function(idx, point) {
       let dReceived = point[1];
       let dRejected = rawData['events.dropped'][idx][1];
       let ts = point[0] * 1000;
@@ -101,7 +99,7 @@ const EventChart = React.createClass({
         received: oReceived,
         rejected: oRejected,
         accepted: oReceived - oRejected,
-        avgRate: parseInt((aReceived[0] / aReceived[1]) / 60, 10)
+        avgRate: parseInt(aReceived[0] / aReceived[1] / 60, 10)
       },
       stats: {
         rejected: jQuery.map(sRejected, function(value, ts) {
@@ -148,10 +146,8 @@ const EventChart = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     return <FlotChart style={{height: 250}} plotData={this.getChartPoints()} />;
   }
diff --git a/src/sentry/static/sentry/app/views/adminOverview/index.jsx b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
index a46473dfee..b9e885cccf 100644
--- a/src/sentry/static/sentry/app/views/adminOverview/index.jsx
+++ b/src/sentry/static/sentry/app/views/adminOverview/index.jsx
@@ -21,12 +21,11 @@ const AdminOverview = React.createClass({
           <div className="box-header">
             <h4>
               Event Throughput
-              <span id="rate" className="pull-right"></span>
+              <span id="rate" className="pull-right" />
             </h4>
           </div>
           <div className="box-content with-padding">
-            <EventChart since={this.state.since}
-                        resolution={this.state.resolution} />
+            <EventChart since={this.state.since} resolution={this.state.resolution} />
           </div>
         </div>
 
@@ -35,8 +34,7 @@ const AdminOverview = React.createClass({
             <h4>API Responses</h4>
           </div>
           <div className="box-content with-padding">
-            <ApiChart since={this.state.since}
-                      resolution={this.state.resolution} />
+            <ApiChart since={this.state.since} resolution={this.state.resolution} />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/adminProjects.jsx b/src/sentry/static/sentry/app/views/adminProjects.jsx
index 39f45795b3..6a37f881c2 100644
--- a/src/sentry/static/sentry/app/views/adminProjects.jsx
+++ b/src/sentry/static/sentry/app/views/adminProjects.jsx
@@ -7,20 +7,22 @@ import ResultGrid from '../components/resultGrid';
 import {t} from '../locale';
 
 export const prettyDate = function(x) {
-    return moment(x).format('ll');
+  return moment(x).format('ll');
 };
 
 const AdminProjects = React.createClass({
   getRow(row) {
     return [
       <td>
-        <strong><a href={`/${row.organization.slug}/${row.slug}/`}>
-          {row.name}
-        </a></strong><br />
+        <strong>
+          <a href={`/${row.organization.slug}/${row.slug}/`}>
+            {row.name}
+          </a>
+        </strong><br />
         <small>{row.organization.name}</small>
       </td>,
       <td style={{textAlign: 'center'}}>{row.status}</td>,
-      <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>,
+      <td style={{textAlign: 'right'}}>{prettyDate(row.dateCreated)}</td>
     ];
   },
 
@@ -28,7 +30,7 @@ const AdminProjects = React.createClass({
     let columns = [
       <th>Project</th>,
       <th style={{width: 150, textAlign: 'center'}}>Status</th>,
-      <th style={{width: 200, textAlign: 'right'}}>Created</th>,
+      <th style={{width: 200, textAlign: 'right'}}>Created</th>
     ];
 
     return (
@@ -44,20 +46,16 @@ const AdminProjects = React.createClass({
           filters={{
             status: {
               name: 'Status',
-              options: [
-                ['active', 'Active'],
-                ['deleted', 'Deleted'],
-              ],
-            },
+              options: [['active', 'Active'], ['deleted', 'Deleted']]
+            }
           }}
-          sortOptions={[
-            ['date', 'Date Created'],
-          ]}
+          sortOptions={[['date', 'Date Created']]}
           defaultSort="date"
-          {...this.props} />
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
 export default AdminProjects;
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 9a600f95f0..62c6d15962 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -17,14 +17,14 @@ const optionsAvailable = [
   'system.rate-limit',
   'auth.ip-rate-limit',
   'auth.user-rate-limit',
-  'api.rate-limit.org-create',
+  'api.rate-limit.org-create'
 ];
 
 const SettingsList = React.createClass({
   propTypes: {
     formDisabled: React.PropTypes.bool,
     options: React.PropTypes.object.isRequired,
-    onSubmit: React.PropTypes.func.isRequired,
+    onSubmit: React.PropTypes.func.isRequired
   },
 
   getInitialState() {
@@ -44,13 +44,18 @@ const SettingsList = React.createClass({
       if (option.field.required) {
         required.push(key);
       }
-      fields[key] = getOptionField(key, this.onFieldChange.bind(this, key), formData[key], option.field);
+      fields[key] = getOptionField(
+        key,
+        this.onFieldChange.bind(this, key),
+        formData[key],
+        option.field
+      );
     }
 
     return {
       required: required,
       formData: formData,
-      fields: fields,
+      fields: fields
     };
   },
 
@@ -80,7 +85,7 @@ const SettingsList = React.createClass({
         {fields['system.security-email']}
         {fields['system.rate-limit']}
 
-        <h4>Security &amp; Abuse</h4>
+        <h4>Security & Abuse</h4>
         {fields['auth.ip-rate-limit']}
         {fields['auth.user-rate-limit']}
         {fields['api.rate-limit.org-create']}
@@ -90,9 +95,7 @@ const SettingsList = React.createClass({
 });
 
 const AdminSettings = React.createClass({
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -115,7 +118,7 @@ const AdminSettings = React.createClass({
   fetchData(callback) {
     this.api.request('/internal/options/', {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           options: data,
           loading: false,
@@ -134,7 +137,7 @@ const AdminSettings = React.createClass({
   onSubmit(formData) {
     this.setState({
       submitInProgress: true,
-      submitError: false,
+      submitError: false
     });
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
@@ -147,17 +150,17 @@ const AdminSettings = React.createClass({
       data: formData,
       success: () => {
         this.setState({
-          submitInProgress: false,
+          submitInProgress: false
         });
         AlertActions.addAlert({
-            message: t('Your changes were saved, and will propagate to services shortly.'),
-            type: 'success'
+          message: t('Your changes were saved, and will propagate to services shortly.'),
+          type: 'success'
         });
       },
       error: () => {
         this.setState({
           submitInProgress: false,
-          submitError: true,
+          submitError: true
         });
       },
       complete: () => {
@@ -173,26 +176,30 @@ const AdminSettings = React.createClass({
       <div>
         <h3>{t('Settings')}</h3>
 
-        {loading ?
-          <LoadingIndicator>
-            {t('Please wait while we load configuration.')}
-          </LoadingIndicator>
-        : (error ?
-          <div className="loading-error">
-            <span className="icon" />
-            {t('We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.')}
-          </div>
-        :
-          <div>
-            {submitError &&
-              <div className="alert alert-block alert-error">{t('We were unable to submit your changes to the Sentry server. Please take a look at the service logs.')}</div>
-            }
-            <SettingsList
-                options={options}
-                onSubmit={this.onSubmit}
-                formDisabled={submitInProgress} />
-          </div>
-        )}
+        {loading
+          ? <LoadingIndicator>
+              {t('Please wait while we load configuration.')}
+            </LoadingIndicator>
+          : error
+              ? <div className="loading-error">
+                  <span className="icon" />
+                  {t(
+                    'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'
+                  )}
+                </div>
+              : <div>
+                  {submitError &&
+                    <div className="alert alert-block alert-error">
+                      {t(
+                        'We were unable to submit your changes to the Sentry server. Please take a look at the service logs.'
+                      )}
+                    </div>}
+                  <SettingsList
+                    options={options}
+                    onSubmit={this.onSubmit}
+                    formDisabled={submitInProgress}
+                  />
+                </div>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/adminUsers.jsx b/src/sentry/static/sentry/app/views/adminUsers.jsx
index c7ea299bc6..2df1c1b11b 100644
--- a/src/sentry/static/sentry/app/views/adminUsers.jsx
+++ b/src/sentry/static/sentry/app/views/adminUsers.jsx
@@ -7,19 +7,19 @@ import ResultGrid from '../components/resultGrid';
 import {t} from '../locale';
 
 export const prettyDate = function(x) {
-    return moment(x).format('ll');
+  return moment(x).format('ll');
 };
 
 const AdminUsers = React.createClass({
   getRow(row) {
     return [
       <td>
-        <strong><a href={`/manage/users/${row.id}/`}>
-          {row.username}
-        </a></strong><br />
-        {row.email !== row.username &&
-          <small>{row.email}</small>
-        }
+        <strong>
+          <a href={`/manage/users/${row.id}/`}>
+            {row.username}
+          </a>
+        </strong><br />
+        {row.email !== row.username && <small>{row.email}</small>}
       </td>,
       <td style={{textAlign: 'center'}}>{prettyDate(row.dateJoined)}</td>,
       <td style={{textAlign: 'center'}}>{prettyDate(row.lastLogin)}</td>
@@ -46,20 +46,16 @@ const AdminUsers = React.createClass({
           filters={{
             status: {
               name: 'Status',
-              options: [
-                ['active', 'Active'],
-                ['disabled', 'Disabled'],
-              ],
-            },
+              options: [['active', 'Active'], ['disabled', 'Disabled']]
+            }
           }}
-          sortOptions={[
-            ['date', 'Date Joined'],
-          ]}
+          sortOptions={[['date', 'Date Joined']]}
           defaultSort="date"
-          {...this.props} />
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
 export default AdminUsers;
diff --git a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
index 3aa92e49ef..70f60dc2c3 100644
--- a/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/apiApplicationDetails.jsx
@@ -23,7 +23,7 @@ const ApiApplicationDetails = React.createClass({
       error: false,
       app: null,
       formData: null,
-      errors: {},
+      errors: {}
     };
   },
 
@@ -42,13 +42,13 @@ const ApiApplicationDetails = React.createClass({
       privacyUrl: app.privacyUrl,
       termsUrl: app.termsUrl,
       allowedOrigins: app.allowedOrigins.join('\n'),
-      redirectUris: app.redirectUris.join('\n'),
+      redirectUris: app.redirectUris.join('\n')
     };
   },
 
   fetchData() {
     this.setState({
-      loading: true,
+      loading: true
     });
 
     this.api.request(`/api-applications/${this.props.params.appId}/`, {
@@ -58,13 +58,13 @@ const ApiApplicationDetails = React.createClass({
           error: false,
           app: data,
           formData: {...this.getFormData(data)},
-          errors: {},
+          errors: {}
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -74,7 +74,7 @@ const ApiApplicationDetails = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -84,51 +84,50 @@ const ApiApplicationDetails = React.createClass({
     if (this.state.state == FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let formData = this.state.formData;
-      this.api.request(`/api-applications/${this.props.params.appId}/`, {
-        method: 'PUT',
-        data: {
-          ...formData,
-          allowedOrigins: formData.allowedOrigins.split('\n').filter(v => v),
-          redirectUris: formData.redirectUris.split('\n').filter(v => v),
-        },
-        success: (data) => {
-          IndicatorStore.remove(loadingIndicator);
-          this.setState({
-            state: FormState.READY,
-            formData: {...this.getFormData(data)},
-            errors: {},
-          });
-          this.context.router.push('/api/applications/');
-        },
-        error: (error) => {
-          IndicatorStore.remove(loadingIndicator);
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let formData = this.state.formData;
+        this.api.request(`/api-applications/${this.props.params.appId}/`, {
+          method: 'PUT',
+          data: {
+            ...formData,
+            allowedOrigins: formData.allowedOrigins.split('\n').filter(v => v),
+            redirectUris: formData.redirectUris.split('\n').filter(v => v)
+          },
+          success: data => {
+            IndicatorStore.remove(loadingIndicator);
+            this.setState({
+              state: FormState.READY,
+              formData: {...this.getFormData(data)},
+              errors: {}
+            });
+            this.context.router.push('/api/applications/');
+          },
+          error: error => {
+            IndicatorStore.remove(loadingIndicator);
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          }
+        });
+      }
+    );
   },
 
-  onRemoveApplication(app) {
-
-  },
+  onRemoveApplication(app) {},
 
   getTitle() {
     return 'Application Details - Sentry';
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let app = this.state.app;
     let isSaving = this.state.state === FormState.SAVING;
@@ -143,9 +142,10 @@ const ApiApplicationDetails = React.createClass({
             <h4>Application Details</h4>
             {this.state.state === FormState.ERROR &&
               <div className="alert alert-error alert-block">
-                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-              </div>
-            }
+                {t(
+                  'Unable to save your changes. Please ensure all fields are valid and try again.'
+                )}
+              </div>}
             <fieldset>
               <TextField
                 key="name"
@@ -155,7 +155,8 @@ const ApiApplicationDetails = React.createClass({
                 value={this.state.formData.name}
                 required={true}
                 error={errors.name}
-                onChange={this.onFieldChange.bind(this, 'name')} />
+                onChange={this.onFieldChange.bind(this, 'name')}
+              />
               <TextField
                 key="homepageUrl"
                 name="homepageUrl"
@@ -165,7 +166,8 @@ const ApiApplicationDetails = React.createClass({
                 help="An optional link to your website's homepage"
                 required={false}
                 error={errors.homepageUrl}
-                onChange={this.onFieldChange.bind(this, 'homepageUrl')} />
+                onChange={this.onFieldChange.bind(this, 'homepageUrl')}
+              />
               <TextField
                 key="privacyUrl"
                 name="privacyUrl"
@@ -175,7 +177,8 @@ const ApiApplicationDetails = React.createClass({
                 help="An optional link to your Privacy Policy"
                 required={false}
                 error={errors.privacyUrl}
-                onChange={this.onFieldChange.bind(this, 'privacyUrl')} />
+                onChange={this.onFieldChange.bind(this, 'privacyUrl')}
+              />
               <TextField
                 key="termsUrl"
                 name="termsUrl"
@@ -185,7 +188,8 @@ const ApiApplicationDetails = React.createClass({
                 help="An optional link to your Terms of Service"
                 required={false}
                 error={errors.termsUrl}
-                onChange={this.onFieldChange.bind(this, 'termsUrl')} />
+                onChange={this.onFieldChange.bind(this, 'termsUrl')}
+              />
             </fieldset>
             <fieldset>
               <legend>Credentials</legend>
@@ -198,11 +202,9 @@ const ApiApplicationDetails = React.createClass({
               <div className="control-group">
                 <label htmlFor="api-key">Client Secret</label>
                 <div className="form-control disabled">
-                  {app.clientSecret ?
-                    <AutoSelectText>{app.clientSecret}</AutoSelectText>
-                  :
-                    <em>hidden</em>
-                  }
+                  {app.clientSecret
+                    ? <AutoSelectText>{app.clientSecret}</AutoSelectText>
+                    : <em>hidden</em>}
                 </div>
                 <p className="help-block">
                   Your secret is only available briefly after application creation. Make sure to save this value!
@@ -234,7 +236,8 @@ const ApiApplicationDetails = React.createClass({
                 help={t('Separate multiple entries with a newline.')}
                 placeholder={t('e.g. https://example.com/oauth/complete')}
                 error={errors.redirectUris}
-                onChange={this.onFieldChange.bind(this, 'redirectUris')} />
+                onChange={this.onFieldChange.bind(this, 'redirectUris')}
+              />
               <TextareaField
                 key="allowedOrigins"
                 name="allowedOrigins"
@@ -244,11 +247,13 @@ const ApiApplicationDetails = React.createClass({
                 help={t('Separate multiple entries with a newline.')}
                 placeholder={t('e.g. example.com')}
                 error={errors.allowedOrigins}
-                onChange={this.onFieldChange.bind(this, 'allowedOrigins')} />
+                onChange={this.onFieldChange.bind(this, 'allowedOrigins')}
+              />
             </fieldset>
             <fieldset className="form-actions">
-              <button type="submit" className="btn btn-primary"
-                    disabled={isSaving}>{t('Save Changes')}</button>
+              <button type="submit" className="btn btn-primary" disabled={isSaving}>
+                {t('Save Changes')}
+              </button>
             </fieldset>
           </form>
         </div>
diff --git a/src/sentry/static/sentry/app/views/apiApplications.jsx b/src/sentry/static/sentry/app/views/apiApplications.jsx
index d0419a5907..7809816b66 100644
--- a/src/sentry/static/sentry/app/views/apiApplications.jsx
+++ b/src/sentry/static/sentry/app/views/apiApplications.jsx
@@ -18,7 +18,7 @@ const ApiApplicationRow = React.createClass({
 
   getInitialState() {
     return {
-      loading: false,
+      loading: false
     };
   },
 
@@ -27,32 +27,38 @@ const ApiApplicationRow = React.createClass({
 
     let app = this.props.app;
 
-    this.setState({
-      loading: true,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      this.api.request(`/api-applications/${app.id}/`, {
-        method: 'DELETE',
-        success: (data) => {
-          IndicatorStore.remove(loadingIndicator);
-          this.props.onRemove();
-        },
-        error: () => {
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error', {
-            duration: 3000
-          });
-        }
-      });
-    });
+    this.setState(
+      {
+        loading: true
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request(`/api-applications/${app.id}/`, {
+          method: 'DELETE',
+          success: data => {
+            IndicatorStore.remove(loadingIndicator);
+            this.props.onRemove();
+          },
+          error: () => {
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(
+              t('Unable to remove application. Please try again.'),
+              'error',
+              {
+                duration: 3000
+              }
+            );
+          }
+        });
+      }
+    );
   },
 
   render() {
     let app = this.props.app;
 
     let btnClassName = 'btn btn-default';
-    if (this.state.loading)
-      btnClassName += ' disabled';
+    if (this.state.loading) btnClassName += ' disabled';
 
     return (
       <tr>
@@ -63,9 +69,11 @@ const ApiApplicationRow = React.createClass({
           <small style={{color: '#999'}}>{app.clientID}</small>
         </td>
         <td style={{width: 32}}>
-          <a onClick={this.onRemove.bind(this, app)}
-             className={btnClassName}
-             disabled={this.state.loading}>
+          <a
+            onClick={this.onRemove.bind(this, app)}
+            className={btnClassName}
+            disabled={this.state.loading}
+          >
             <span className="icon icon-trash" />
           </a>
         </td>
@@ -85,7 +93,7 @@ const ApiApplications = React.createClass({
     return {
       loading: true,
       error: false,
-      appList: [],
+      appList: []
     };
   },
 
@@ -99,7 +107,7 @@ const ApiApplications = React.createClass({
 
   fetchData() {
     this.setState({
-      loading: true,
+      loading: true
     });
 
     this.api.request('/api-applications/', {
@@ -113,7 +121,7 @@ const ApiApplications = React.createClass({
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -123,11 +131,11 @@ const ApiApplications = React.createClass({
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request('/api-applications/', {
       method: 'POST',
-      success: (app) => {
+      success: app => {
         IndicatorStore.remove(loadingIndicator);
         this.context.router.push(`/api/applications/${app.id}/`);
       },
-      error: (error) => {
+      error: error => {
         IndicatorStore.remove(loadingIndicator);
         IndicatorStore.add(t('Unable to remove application. Please try again.'), 'error');
       }
@@ -136,7 +144,7 @@ const ApiApplications = React.createClass({
 
   onRemoveApplication(app) {
     this.setState({
-      appList: this.state.appList.filter((a) => a.id !== app.id),
+      appList: this.state.appList.filter(a => a.id !== app.id)
     });
   },
 
@@ -151,12 +159,13 @@ const ApiApplications = React.createClass({
       );
     }
 
-    return this.state.appList.map((app) => {
+    return this.state.appList.map(app => {
       return (
         <ApiApplicationRow
           key={app.id}
           app={app}
-          onRemove={this.onRemoveApplication.bind(this, app)} />
+          onRemove={this.onRemoveApplication.bind(this, app)}
+        />
       );
     });
   },
@@ -171,19 +180,23 @@ const ApiApplications = React.createClass({
         <div>
           <table className="table">
             <tbody>
-              {(this.state.loading ?
-                <tr><td colSpan="2"><LoadingIndicator /></td></tr>
-              : (this.state.error ?
-                <tr><td colSpan="2"><LoadingError onRetry={this.fetchData} /></td></tr>
-              :
-                this.renderResults()
-              ))}
+              {this.state.loading
+                ? <tr><td colSpan="2"><LoadingIndicator /></td></tr>
+                : this.state.error
+                    ? <tr>
+                        <td colSpan="2"><LoadingError onRetry={this.fetchData} /></td>
+                      </tr>
+                    : this.renderResults()}
             </tbody>
           </table>
 
           <div className="form-actions" style={{textAlign: 'right'}}>
-            <a className="btn btn-primary ref-create-application"
-               onClick={this.createApplication}>{t('Create New Application')}</a>
+            <a
+              className="btn btn-primary ref-create-application"
+              onClick={this.createApplication}
+            >
+              {t('Create New Application')}
+            </a>
           </div>
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/apiLayout.jsx b/src/sentry/static/sentry/app/views/apiLayout.jsx
index 2ca1f24555..cd8f59cb80 100644
--- a/src/sentry/static/sentry/app/views/apiLayout.jsx
+++ b/src/sentry/static/sentry/app/views/apiLayout.jsx
@@ -20,4 +20,3 @@ const ApiDashboard = React.createClass({
 });
 
 export default ApiDashboard;
-
diff --git a/src/sentry/static/sentry/app/views/apiNewToken.jsx b/src/sentry/static/sentry/app/views/apiNewToken.jsx
index daba2839bc..5e82eee197 100644
--- a/src/sentry/static/sentry/app/views/apiNewToken.jsx
+++ b/src/sentry/static/sentry/app/views/apiNewToken.jsx
@@ -32,7 +32,7 @@ const DEFAULT_SCOPES = new Set([
   'project:releases',
   'org:read',
   'team:read',
-  'member:read',
+  'member:read'
 ]);
 
 const TokenForm = React.createClass({
@@ -47,7 +47,7 @@ const TokenForm = React.createClass({
   getInitialState() {
     return {
       formData: Object.assign({}, this.props.initialData),
-      errors: {},
+      errors: {}
     };
   },
 
@@ -55,7 +55,7 @@ const TokenForm = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -65,30 +65,33 @@ const TokenForm = React.createClass({
     if (this.state.state == FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      this.api.request('/api-tokens/', {
-        method: 'POST',
-        data: this.state.formData,
-        success: (data) => {
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-          IndicatorStore.remove(loadingIndicator);
-          this.props.onSave(data);
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request('/api-tokens/', {
+          method: 'POST',
+          data: this.state.formData,
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+            IndicatorStore.remove(loadingIndicator);
+            this.props.onSave(data);
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -99,24 +102,36 @@ const TokenForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked api-new-token">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <MultipleCheckboxField
             key="scopes"
-            choices={Array.from(SCOPES.keys()).map((s) => [s, s])}
+            choices={Array.from(SCOPES.keys()).map(s => [s, s])}
             label={t('Scopes')}
             value={this.state.formData.scopes}
             required={true}
             error={errors.scopes}
-            onChange={this.onFieldChange.bind(this, 'scopes')} />
-       </fieldset>
+            onChange={this.onFieldChange.bind(this, 'scopes')}
+          />
+        </fieldset>
         <fieldset className="form-actions">
-          <button className="btn btn-default"
-                  disabled={isSaving} onClick={this.props.onCancel}>{t('Cancel')}</button>
-          <button type="submit" className="btn btn-primary pull-right"
-                  disabled={isSaving}>{t('Save Changes')}</button>
+          <button
+            className="btn btn-default"
+            disabled={isSaving}
+            onClick={this.props.onCancel}
+          >
+            {t('Cancel')}
+          </button>
+          <button
+            type="submit"
+            className="btn btn-primary pull-right"
+            disabled={isSaving}
+          >
+            {t('Save Changes')}
+          </button>
         </fieldset>
       </form>
     );
@@ -129,7 +144,7 @@ const ApiNewToken = React.createClass({
   getInitialState() {
     return {
       loading: true,
-      error: false,
+      error: false
     };
   },
 
@@ -156,17 +171,27 @@ const ApiNewToken = React.createClass({
 
           <hr />
 
-          <p>{t('Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They\'re the easiest way to get started using the API.')}</p>
-          <p>{tct('For more information on how to use the web API, see our [link:documentation].', {
-            link: <a href="https://docs.sentry.io/hosted/api/" />
-          })}</p>
+          <p>
+            {t(
+              'Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They\'re the easiest way to get started using the API.'
+            )}
+          </p>
+          <p>
+            {tct(
+              'For more information on how to use the web API, see our [link:documentation].',
+              {
+                link: <a href="https://docs.sentry.io/hosted/api/" />
+              }
+            )}
+          </p>
 
           <TokenForm
             initialData={{
-              scopes: defaultScopes,
+              scopes: defaultScopes
             }}
             onCancel={this.onCancel}
-            onSave={this.onSave} />
+            onSave={this.onSave}
+          />
 
         </NarrowLayout>
       </DocumentTitle>
@@ -175,4 +200,3 @@ const ApiNewToken = React.createClass({
 });
 
 export default ApiNewToken;
-
diff --git a/src/sentry/static/sentry/app/views/apiTokens.jsx b/src/sentry/static/sentry/app/views/apiTokens.jsx
index 767875d0eb..765623f901 100644
--- a/src/sentry/static/sentry/app/views/apiTokens.jsx
+++ b/src/sentry/static/sentry/app/views/apiTokens.jsx
@@ -20,7 +20,7 @@ const ApiTokenRow = React.createClass({
 
   getInitialState() {
     return {
-      loading: false,
+      loading: false
     };
   },
 
@@ -29,31 +29,33 @@ const ApiTokenRow = React.createClass({
 
     let token = this.props.token;
 
-    this.setState({
-      loading: true,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      this.api.request('/api-tokens/', {
-        method: 'DELETE',
-        data: {token: token.token},
-        success: (data) => {
-          IndicatorStore.remove(loadingIndicator);
-          this.props.onRemove();
-        },
-        error: () => {
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to remove token. Please try again.'), 'error');
-        }
-      });
-    });
+    this.setState(
+      {
+        loading: true
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        this.api.request('/api-tokens/', {
+          method: 'DELETE',
+          data: {token: token.token},
+          success: data => {
+            IndicatorStore.remove(loadingIndicator);
+            this.props.onRemove();
+          },
+          error: () => {
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to remove token. Please try again.'), 'error');
+          }
+        });
+      }
+    );
   },
 
   render() {
     let token = this.props.token;
 
     let btnClassName = 'btn btn-default';
-    if (this.state.loading)
-      btnClassName += ' disabled';
+    if (this.state.loading) btnClassName += ' disabled';
 
     return (
       <tr>
@@ -69,9 +71,11 @@ const ApiTokenRow = React.createClass({
           </div>
         </td>
         <td style={{width: 32}}>
-          <a onClick={this.onRemove.bind(this, token)}
-             className={btnClassName}
-             disabled={this.state.loading}>
+          <a
+            onClick={this.onRemove.bind(this, token)}
+            className={btnClassName}
+            disabled={this.state.loading}
+          >
             <span className="icon icon-trash" />
           </a>
         </td>
@@ -87,7 +91,7 @@ const ApiTokens = React.createClass({
     return {
       loading: true,
       error: false,
-      tokenList: [],
+      tokenList: []
     };
   },
 
@@ -101,7 +105,7 @@ const ApiTokens = React.createClass({
 
   fetchData() {
     this.setState({
-      loading: true,
+      loading: true
     });
 
     this.api.request('/api-tokens/', {
@@ -115,7 +119,7 @@ const ApiTokens = React.createClass({
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -123,7 +127,7 @@ const ApiTokens = React.createClass({
 
   onRemoveToken(token) {
     this.setState({
-      tokenList: this.state.tokenList.filter((tk) => tk.token !== token.token),
+      tokenList: this.state.tokenList.filter(tk => tk.token !== token.token)
     });
   },
 
@@ -148,14 +152,15 @@ const ApiTokens = React.createClass({
       <div>
         <table className="table">
           <tbody>
-          {tokenList.map((token) => {
-            return (
-              <ApiTokenRow
-                key={token.token}
-                token={token}
-                onRemove={this.onRemoveToken.bind(this, token)} />
-            );
-          })}
+            {tokenList.map(token => {
+              return (
+                <ApiTokenRow
+                  key={token.token}
+                  token={token}
+                  onRemove={this.onRemoveToken.bind(this, token)}
+                />
+              );
+            })}
           </tbody>
         </table>
       </div>
@@ -170,23 +175,43 @@ const ApiTokens = React.createClass({
     return (
       <DocumentTitle title={this.getTitle()}>
         <div>
-          <p>{t('Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They\'re the easiest way to get started using the API.')}</p>
-          <p>{tct('For more information on how to use the web API, see our [link:documentation].', {
-            link: <a href="https://docs.sentry.io/hosted/api/" />
-          })}</p>
-
-          <p><small>psst. Looking for the <strong>DSN</strong> for an SDK? You'll find that under <strong>[Project] &raquo; Settings &raquo; Client Keys</strong>.</small></p>
-
-          {(this.state.loading ?
-            <LoadingIndicator />
-          : (this.state.error ?
-            <LoadingError onRetry={this.fetchData} />
-          :
-            this.renderResults()
-          ))}
+          <p>
+            {t(
+              'Authentication tokens allow you to perform actions against the Sentry API on behalf of your account. They\'re the easiest way to get started using the API.'
+            )}
+          </p>
+          <p>
+            {tct(
+              'For more information on how to use the web API, see our [link:documentation].',
+              {
+                link: <a href="https://docs.sentry.io/hosted/api/" />
+              }
+            )}
+          </p>
+
+          <p>
+            <small>
+              psst. Looking for the
+              {' '}
+              <strong>DSN</strong>
+              {' '}
+              for an SDK? You'll find that under
+              {' '}
+              <strong>[Project] » Settings » Client Keys</strong>
+              .
+            </small>
+          </p>
+
+          {this.state.loading
+            ? <LoadingIndicator />
+            : this.state.error
+                ? <LoadingError onRetry={this.fetchData} />
+                : this.renderResults()}
 
           <div className="form-actions" style={{textAlign: 'right'}}>
-            <Link to="/api/new-token/" className="btn btn-primary ref-create-token">{t('Create New Token')}</Link>
+            <Link to="/api/new-token/" className="btn btn-primary ref-create-token">
+              {t('Create New Token')}
+            </Link>
           </div>
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/app.jsx b/src/sentry/static/sentry/app/views/app.jsx
index 702aaacb56..1cfeb75e9c 100644
--- a/src/sentry/static/sentry/app/views/app.jsx
+++ b/src/sentry/static/sentry/app/views/app.jsx
@@ -28,15 +28,13 @@ const App = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
       loading: false,
       error: false,
-      needsUpgrade: ConfigStore.get('needsUpgrade'),
+      needsUpgrade: ConfigStore.get('needsUpgrade')
     };
   },
 
@@ -49,12 +47,12 @@ const App = React.createClass({
   componentWillMount() {
     this.api.request('/organizations/', {
       query: {
-        'member': '1'
+        member: '1'
       },
-      success: (data) => {
+      success: data => {
         OrganizationStore.load(data);
         this.setState({
-          loading: false,
+          loading: false
         });
       },
       error: () => {
@@ -66,7 +64,7 @@ const App = React.createClass({
     });
 
     this.api.request('/internal/health/', {
-      success: (data) => {
+      success: data => {
         if (data && data.problems) {
           data.problems.forEach(problem => {
             AlertActions.addAlert({
@@ -81,14 +79,14 @@ const App = React.createClass({
       error: () => {} // TODO: do something?
     });
 
-    ConfigStore.get('messages').forEach((msg) => {
+    ConfigStore.get('messages').forEach(msg => {
       AlertActions.addAlert({
         message: msg.message,
         type: msg.level
       });
     });
 
-    $(document).ajaxError(function (evt, jqXHR) {
+    $(document).ajaxError(function(evt, jqXHR) {
       // TODO: Need better way of identifying anonymous pages
       //       that don't trigger redirect
       let pageAllowsAnon = /^\/share\//.test(window.location.pathname);
diff --git a/src/sentry/static/sentry/app/views/groupActivity/index.jsx b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
index 47813f54c4..767601983f 100644
--- a/src/sentry/static/sentry/app/views/groupActivity/index.jsx
+++ b/src/sentry/static/sentry/app/views/groupActivity/index.jsx
@@ -23,33 +23,30 @@ const GroupActivity = React.createClass({
     group: React.PropTypes.object
   },
 
-  mixins: [
-    GroupState,
-    ApiMixin
-  ],
+  mixins: [GroupState, ApiMixin],
 
   formatActivity(author, item, params) {
     let data = item.data;
     let {orgId, projectId} = params;
 
-    switch(item.type) {
+    switch (item.type) {
       case 'note':
         return t('%s left a comment', author);
       case 'set_resolved':
         return t('%s marked this issue as resolved', author);
       case 'set_resolved_by_age':
         return t('%(author)s marked this issue as resolved due to inactivity', {
-          author: author,
+          author: author
         });
       case 'set_resolved_in_release':
-        return (data.version ?
-          t('%(author)s marked this issue as resolved in %(version)s', {
-            author: author,
-            version: <Version version={data.version} orgId={orgId} projectId={projectId} />
-          })
-        :
-          t('%s marked this issue as resolved in the upcoming release', author)
-        );
+        return data.version
+          ? t('%(author)s marked this issue as resolved in %(version)s', {
+              author: author,
+              version: (
+                <Version version={data.version} orgId={orgId} projectId={projectId} />
+              )
+            })
+          : t('%s marked this issue as resolved in the upcoming release', author);
       case 'set_resolved_in_commit':
         return t('%(author)s marked this issue as fixed in %(version)s', {
           author: author,
@@ -70,14 +67,14 @@ const GroupActivity = React.createClass({
       case 'set_private':
         return t('%s made this issue private', author);
       case 'set_regression':
-        return (data.version ?
-          t('%(author)s marked this issue as a regression in %(version)s', {
-            author: author,
-            version: <Version version={data.version} orgId={orgId} projectId={projectId} />
-          })
-        :
-          t('%s marked this issue as a regression', author)
-        );
+        return data.version
+          ? t('%(author)s marked this issue as a regression in %(version)s', {
+              author: author,
+              version: (
+                <Version version={data.version} orgId={orgId} projectId={projectId} />
+              )
+            })
+          : t('%s marked this issue as a regression', author);
       case 'create_issue':
         return t('%(author)s created an issue on %(provider)s titled %(title)s', {
           author: author,
@@ -109,10 +106,12 @@ const GroupActivity = React.createClass({
       case 'unassigned':
         return t('%s unassigned this issue', author);
       case 'merge':
-        return tn('%2$s merged %1$d issue into this issue',
-                  '%2$s merged %1$d issues into this issue',
-                  data.issues.length,
-                  author);
+        return tn(
+          '%2$s merged %1$d issue into this issue',
+          '%2$s merged %1$d issues into this issue',
+          data.issues.length,
+          author
+        );
       default:
         return ''; // should never hit (?)
     }
@@ -130,9 +129,9 @@ const GroupActivity = React.createClass({
 
     let loadingIndicator = IndicatorStore.add(t('Removing comment..'));
 
-    this.api.request('/issues/' + group.id + '/comments/' + item.id + '/' , {
+    this.api.request('/issues/' + group.id + '/comments/' + item.id + '/', {
       method: 'DELETE',
-      error: (error) => {
+      error: error => {
         // TODO(mattrobenolt): Show an actual error that this failed,
         // but just bring it back in place for now
         GroupStore.addActivity(group.id, item, index);
@@ -148,18 +147,24 @@ const GroupActivity = React.createClass({
     let me = ConfigStore.get('user');
 
     let children = group.activity.map((item, itemIdx) => {
-      let avatar = (item.user ?
-        <Avatar user={item.user} size={64} className="avatar" /> :
-        <div className="avatar sentry"><span className="icon-sentry-logo"></span></div>);
+      let avatar = item.user
+        ? <Avatar user={item.user} size={64} className="avatar" />
+        : <div className="avatar sentry"><span className="icon-sentry-logo" /></div>;
 
       let author = {
         name: item.user ? item.user.name : 'Sentry',
-        avatar: avatar,
+        avatar: avatar
       };
 
       if (item.type === 'note') {
         return (
-          <NoteContainer group={group} item={item} key={itemIdx} author={author} onDelete={this.onNoteDelete} />
+          <NoteContainer
+            group={group}
+            item={item}
+            key={itemIdx}
+            author={author}
+            onDelete={this.onNoteDelete}
+          />
         );
       } else {
         return (
diff --git a/src/sentry/static/sentry/app/views/groupDetails.jsx b/src/sentry/static/sentry/app/views/groupDetails.jsx
index 10e9005bb7..38c7bb7281 100644
--- a/src/sentry/static/sentry/app/views/groupDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails.jsx
@@ -25,10 +25,7 @@ const GroupDetails = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    Reflux.listenTo(GroupStore, 'onGroupChange')
-  ],
+  mixins: [ApiMixin, Reflux.listenTo(GroupStore, 'onGroupChange')],
 
   getInitialState() {
     return {
@@ -69,7 +66,7 @@ const GroupDetails = React.createClass({
 
   fetchData() {
     this.api.request(this.getGroupDetailsEndpoint(), {
-      success: (data) => {
+      success: data => {
         // TODO: Ideally, this would rebuild the route before parameter
         // interpolation, replace the `groupId` field of `this.routeParams`,
         // and use `formatPattern` from `react-router` to rebuild the URL,
@@ -83,7 +80,9 @@ const GroupDetails = React.createClass({
             location.pathname.replace(
               `/issues/${this.props.params.groupId}/`,
               `/issues/${data.id}/`
-            ) + location.search + location.hash
+            ) +
+              location.search +
+              location.hash
           );
         }
 
@@ -94,7 +93,8 @@ const GroupDetails = React.createClass({
         });
 
         GroupStore.loadInitialData([data]);
-      }, error: (_, textStatus, errorThrown) => {
+      },
+      error: (_, textStatus, errorThrown) => {
         let errorType = null;
         switch (errorThrown) {
           case 'NOT FOUND':
@@ -120,7 +120,7 @@ const GroupDetails = React.createClass({
         return;
       }
       this.setState({
-        group: group,
+        group: group
       });
     }
   },
@@ -134,8 +134,7 @@ const GroupDetails = React.createClass({
   getTitle() {
     let group = this.state.group;
 
-    if (!group)
-      return 'Sentry';
+    if (!group) return 'Sentry';
 
     switch (group.type) {
       case 'error':
@@ -166,20 +165,20 @@ const GroupDetails = React.createClass({
         default:
           return <LoadingError onRetry={this.remountComponent} />;
       }
-    } else if (this.state.loading || !group)
-      return <LoadingIndicator />;
+    } else if (this.state.loading || !group) return <LoadingIndicator />;
 
     return (
       <DocumentTitle title={this.getTitle()}>
         <div className={this.props.className}>
           <GroupHeader
-              orgId={params.orgId}
-              projectId={params.projectId}
-              group={group}
-              memberList={this.props.memberList} />
+            orgId={params.orgId}
+            projectId={params.projectId}
+            group={group}
+            memberList={this.props.memberList}
+          />
           {React.cloneElement(this.props.children, {
-              memberList: this.props.memberList,
-              group: group
+            memberList: this.props.memberList,
+            group: group
           })}
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
index 2f2871cb41..e557d23471 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/actions.jsx
@@ -16,7 +16,7 @@ const Snooze = {
   '30MINUTES': 30,
   '2HOURS': 60 * 2,
   '24HOURS': 60 * 24,
-  'ONEWEEK': 60 * 24 * 7,
+  ONEWEEK: 60 * 24 * 7
 };
 
 const GroupActions = React.createClass({
@@ -25,8 +25,8 @@ const GroupActions = React.createClass({
     GroupState,
     TooltipMixin({
       selector: '.tip',
-      container: 'body',
-    }),
+      container: 'body'
+    })
   ],
 
   onDelete() {
@@ -35,17 +35,20 @@ const GroupActions = React.createClass({
     let org = this.getOrganization();
     let loadingIndicator = IndicatorStore.add(t('Delete event..'));
 
-    this.api.bulkDelete({
-      orgId: org.slug,
-      projectId: project.slug,
-      itemIds: [group.id]
-    }, {
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
+    this.api.bulkDelete(
+      {
+        orgId: org.slug,
+        projectId: project.slug,
+        itemIds: [group.id]
+      },
+      {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
 
-        browserHistory.pushState(null, `/${org.slug}/${project.slug}/`);
+          browserHistory.pushState(null, `/${org.slug}/${project.slug}/`);
+        }
       }
-    });
+    );
   },
 
   onUpdate(data) {
@@ -54,16 +57,19 @@ const GroupActions = React.createClass({
     let org = this.getOrganization();
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.api.bulkUpdate({
-      orgId: org.slug,
-      projectId: project.slug,
-      itemIds: [group.id],
-      data: data,
-    }, {
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
+    this.api.bulkUpdate(
+      {
+        orgId: org.slug,
+        projectId: project.slug,
+        itemIds: [group.id],
+        data: data
+      },
+      {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       }
-    });
+    );
   },
 
   onToggleBookmark() {
@@ -73,7 +79,7 @@ const GroupActions = React.createClass({
   onSnooze(duration) {
     this.onUpdate({
       status: 'ignored',
-      ignoreDuration: duration,
+      ignoreDuration: duration
     });
   },
 
@@ -115,7 +121,12 @@ const GroupActions = React.createClass({
     }
 
     let hasRelease = this.getProjectFeatures().has('releases');
-    let releaseTrackingUrl = '/' + this.getOrganization().slug + '/' + this.getProject().slug + '/settings/release-tracking/';
+    let releaseTrackingUrl =
+      '/' +
+      this.getOrganization().slug +
+      '/' +
+      this.getProject().slug +
+      '/settings/release-tracking/';
 
     // account for both old and new style plugins
     let hasIssueTracking = group.pluginActions.length || group.pluginIssues.length;
@@ -123,142 +134,183 @@ const GroupActions = React.createClass({
     return (
       <div className="group-actions">
         <CustomSnoozeModal
-            show={this.state && this.state.isCustomSnoozeModalOpen}
-            onSelected={this.customSnoozeSelected}
-            onCanceled={this.customSnoozeCanceled}/>
+          show={this.state && this.state.isCustomSnoozeModalOpen}
+          onSelected={this.customSnoozeSelected}
+          onCanceled={this.customSnoozeCanceled}
+        />
         <div className="btn-group">
-          {group.status === 'resolved' ? (
-            group.statusDetails.autoResolved ?
-             <a className={resolveClassName + ' tip'}
-                 title={t('This event is resolved due to the Auto Resolve configuration for this project')}>
-                <span className="icon-checkmark" />
-              </a>
-            :
-              <a className={resolveClassName}
-                 title={t('Unresolve')}
-                 onClick={this.onUpdate.bind(this, {status: 'unresolved'})}>
-                <span className="icon-checkmark" />
-              </a>
-            )
-          :
-            [
-              <a key="resolve-button"
-                 className={resolveClassName}
-                 title={t('Resolve')}
-                 onClick={this.onUpdate.bind(this, {status: 'resolved'})}>
-                <span className="icon-checkmark" style={{marginRight: 5}} />
-                {t('Resolve')}
-              </a>,
-              <DropdownLink
-                key="resolve-dropdown"
-                caret={true}
-                className={resolveClassName}
-                topLevelClasses={resolveDropdownClasses}
-                title="">
-                <MenuItem noAnchor={true}>
-                  {hasRelease ?
-                    <a onClick={this.onUpdate.bind(this, {status: 'resolvedInNextRelease'})}>
-                      <strong>{t('Resolved in next release')}</strong>
-                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
-                    </a>
-                  :
-                    <a href={releaseTrackingUrl} className="disabled tip" title={t('Set up release tracking in order to use this feature.')}>
-                      <strong>{t('Resolved in next release.')}</strong>
-                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
-                    </a>
-                  }
-                </MenuItem>
-              </DropdownLink>
-            ]
-          }
+          {group.status === 'resolved'
+            ? group.statusDetails.autoResolved
+                ? <a
+                    className={resolveClassName + ' tip'}
+                    title={t(
+                      'This event is resolved due to the Auto Resolve configuration for this project'
+                    )}
+                  >
+                    <span className="icon-checkmark" />
+                  </a>
+                : <a
+                    className={resolveClassName}
+                    title={t('Unresolve')}
+                    onClick={this.onUpdate.bind(this, {status: 'unresolved'})}
+                  >
+                    <span className="icon-checkmark" />
+                  </a>
+            : [
+                <a
+                  key="resolve-button"
+                  className={resolveClassName}
+                  title={t('Resolve')}
+                  onClick={this.onUpdate.bind(this, {status: 'resolved'})}
+                >
+                  <span className="icon-checkmark" style={{marginRight: 5}} />
+                  {t('Resolve')}
+                </a>,
+                <DropdownLink
+                  key="resolve-dropdown"
+                  caret={true}
+                  className={resolveClassName}
+                  topLevelClasses={resolveDropdownClasses}
+                  title=""
+                >
+                  <MenuItem noAnchor={true}>
+                    {hasRelease
+                      ? <a
+                          onClick={this.onUpdate.bind(this, {
+                            status: 'resolvedInNextRelease'
+                          })}
+                        >
+                          <strong>{t('Resolved in next release')}</strong>
+                          <div className="help-text">
+                            {t(
+                              'Snooze notifications until this issue reoccurs in a future release.'
+                            )}
+                          </div>
+                        </a>
+                      : <a
+                          href={releaseTrackingUrl}
+                          className="disabled tip"
+                          title={t(
+                            'Set up release tracking in order to use this feature.'
+                          )}
+                        >
+                          <strong>{t('Resolved in next release.')}</strong>
+                          <div className="help-text">
+                            {t(
+                              'Snooze notifications until this issue reoccurs in a future release.'
+                            )}
+                          </div>
+                        </a>}
+                  </MenuItem>
+                </DropdownLink>
+              ]}
         </div>
         <div className="btn-group">
-          {group.status === 'ignored' ?
-            <a className={ignoreClassName}
-               title={t('Remove Ignored Status')}
-               onClick={this.onUpdate.bind(this, {status: 'unresolved'})}>
-             {t('Ignore')}
-            </a>
-          :
-            <DropdownLink
-              caret={false}
-              className={ignoreClassName}
-              title={<span>
+          {group.status === 'ignored'
+            ? <a
+                className={ignoreClassName}
+                title={t('Remove Ignored Status')}
+                onClick={this.onUpdate.bind(this, {status: 'unresolved'})}
+              >
                 {t('Ignore')}
-                <span className="icon-arrow-down" style={{marginLeft: 3, marginRight: -3}} />
-              </span>}>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>{t('for 30 minutes')}</a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>{t('for 2 hours')}</a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.onSnooze.bind(this, Snooze['24HOURS'])}>{t('for 24 hours')}</a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.onSnooze.bind(this, Snooze.ONEWEEK)}>{t('for 1 week')}</a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.customSnoozeClicked}>{t('until custom date...')}</a>
-              </MenuItem>
-              <MenuItem noAnchor={true}>
-                <a onClick={this.onUpdate.bind(this, {status: 'ignored'})}>{t('forever')}</a>
-              </MenuItem>
-            </DropdownLink>
-          }
+              </a>
+            : <DropdownLink
+                caret={false}
+                className={ignoreClassName}
+                title={
+                  <span>
+                    {t('Ignore')}
+                    <span
+                      className="icon-arrow-down"
+                      style={{marginLeft: 3, marginRight: -3}}
+                    />
+                  </span>
+                }
+              >
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.onSnooze.bind(this, Snooze['30MINUTES'])}>
+                    {t('for 30 minutes')}
+                  </a>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.onSnooze.bind(this, Snooze['2HOURS'])}>
+                    {t('for 2 hours')}
+                  </a>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.onSnooze.bind(this, Snooze['24HOURS'])}>
+                    {t('for 24 hours')}
+                  </a>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.onSnooze.bind(this, Snooze.ONEWEEK)}>
+                    {t('for 1 week')}
+                  </a>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.customSnoozeClicked}>{t('until custom date...')}</a>
+                </MenuItem>
+                <MenuItem noAnchor={true}>
+                  <a onClick={this.onUpdate.bind(this, {status: 'ignored'})}>
+                    {t('forever')}
+                  </a>
+                </MenuItem>
+              </DropdownLink>}
         </div>
         <div className="btn-group">
-          <a className={bookmarkClassName}
-             title={t('Bookmark')}
-             onClick={this.onToggleBookmark}>
+          <a
+            className={bookmarkClassName}
+            title={t('Bookmark')}
+            onClick={this.onToggleBookmark}
+          >
             <span className="icon-star-solid" />
           </a>
         </div>
         <div className="btn-group">
           <LinkWithConfirmation
-               className="group-remove btn btn-default btn-sm"
-               title={t('Delete')}
-               message={t('Deleting this event is permanent. Are you sure you wish to continue?')}
-               onConfirm={this.onDelete}>
-            <span className="icon-trash"></span>
+            className="group-remove btn btn-default btn-sm"
+            title={t('Delete')}
+            message={t(
+              'Deleting this event is permanent. Are you sure you wish to continue?'
+            )}
+            onConfirm={this.onDelete}
+          >
+            <span className="icon-trash" />
           </LinkWithConfirmation>
         </div>
-        {group.pluginActions.length > 1 ?
-          <div className="btn-group more">
-            <DropdownLink
-                className="btn btn-default btn-sm"
-                title={t('More')}>
-              {group.pluginActions.map((action, actionIdx) => {
+        {group.pluginActions.length > 1
+          ? <div className="btn-group more">
+              <DropdownLink className="btn btn-default btn-sm" title={t('More')}>
+                {group.pluginActions.map((action, actionIdx) => {
+                  return (
+                    <MenuItem key={actionIdx} href={action[1]}>
+                      {action[0]}
+                    </MenuItem>
+                  );
+                })}
+              </DropdownLink>
+            </div>
+          : group.pluginActions.length !== 0 &&
+              group.pluginActions.map((action, actionIdx) => {
                 return (
-                  <MenuItem key={actionIdx} href={action[1]}>
-                    {action[0]}
-                  </MenuItem>
+                  <div className="btn-group" key={actionIdx}>
+                    <a className="btn btn-default btn-sm" href={action[1]}>
+                      {action[0]}
+                    </a>
+                  </div>
                 );
               })}
-            </DropdownLink>
-          </div>
-        : group.pluginActions.length !== 0 &&
-          group.pluginActions.map((action, actionIdx) => {
-            return (
-              <div className="btn-group" key={actionIdx}>
-                <a className="btn btn-default btn-sm"
-                   href={action[1]}>
-                  {action[0]}
-                </a>
-              </div>
-            );
-          })
-        }
-        {group.pluginIssues && group.pluginIssues.map((plugin) => {
-          return <IssuePluginActions key={plugin.slug} plugin={plugin}/>;
-        })}
+        {group.pluginIssues &&
+          group.pluginIssues.map(plugin => {
+            return <IssuePluginActions key={plugin.slug} plugin={plugin} />;
+          })}
         {!hasIssueTracking &&
-          <a href={`/${this.getOrganization().slug}/${this.getProject().slug}/settings/issue-tracking/`}
-             className={'btn btn-default btn-sm btn-config-issue-tracking'}>
+          <a
+            href={`/${this.getOrganization().slug}/${this.getProject().slug}/settings/issue-tracking/`}
+            className={'btn btn-default btn-sm btn-config-issue-tracking'}
+          >
             {t('Link Issue Tracker')}
-          </a>
-        }
+          </a>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
index b0f57af797..c56585f9b3 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/eventToolbar.jsx
@@ -30,19 +30,19 @@ let formatDateDelta = (reference, observed) => {
   return results.join(', ');
 };
 
-let GroupEventToolbar  = React.createClass({
+let GroupEventToolbar = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
     group: PropTypes.Group.isRequired,
-    event: PropTypes.Event.isRequired,
+    event: PropTypes.Event.isRequired
   },
 
   mixins: [
     TooltipMixin({
       html: true,
       selector: '.tip'
-    }),
+    })
   ],
 
   shouldComponentUpdate(nextProps, nextState) {
@@ -55,21 +55,27 @@ let GroupEventToolbar  = React.createClass({
     let options = user ? user.options : {};
     let format = options.clock24Hours ? 'HH:mm:ss z' : 'LTS z';
     let dateCreated = moment(evt.dateCreated);
-    let resp = (
+    let resp =
       '<dl class="flat" style="text-align:left;margin:0;min-width:200px">' +
-        '<dt>Occurred</dt>' +
-        '<dd>' + dateCreated.format('ll') + '<br />' +
-          dateCreated.format(format) + '</dd>'
-    );
+      '<dt>Occurred</dt>' +
+      '<dd>' +
+      dateCreated.format('ll') +
+      '<br />' +
+      dateCreated.format(format) +
+      '</dd>';
     if (evt.dateReceived) {
       let dateReceived = moment(evt.dateReceived);
-      resp += (
+      resp +=
         '<dt>Received</dt>' +
-        '<dd>' + dateReceived.format('ll') + '<br />' +
-          dateReceived.format(format) + '</dd>' +
+        '<dd>' +
+        dateReceived.format('ll') +
+        '<br />' +
+        dateReceived.format(format) +
+        '</dd>' +
         '<dt>Latency</dt>' +
-        '<dd>' + formatDateDelta(dateCreated, dateReceived) + '</dd>'
-      );
+        '<dd>' +
+        formatDateDelta(dateCreated, dateReceived) +
+        '</dd>';
     }
     return resp + '</dl>';
   },
@@ -81,48 +87,48 @@ let GroupEventToolbar  = React.createClass({
     let groupId = this.props.group.id;
 
     let eventNavNodes = [
-      (evt.previousEventID ?
-        <Link
+      evt.previousEventID
+        ? <Link
             key="oldest"
             to={`/${orgId}/${projectId}/issues/${groupId}/events/oldest/`}
             className="btn btn-default"
-            title={t('Oldest')}>
-            <span className="icon-skip-back"></span>
-        </Link>
-      :
-        <a key="oldest"
-          className="btn btn-default disabled"><span className="icon-skip-back"></span></a>
-      ),
-      (evt.previousEventID ?
-        <Link
+            title={t('Oldest')}
+          >
+            <span className="icon-skip-back" />
+          </Link>
+        : <a key="oldest" className="btn btn-default disabled">
+            <span className="icon-skip-back" />
+          </a>,
+      evt.previousEventID
+        ? <Link
             key="prev"
             to={`/${orgId}/${projectId}/issues/${groupId}/events/${evt.previousEventID}/`}
-            className="btn btn-default">{t('Older')}</Link>
-      :
-        <a key="prev"
-           className="btn btn-default disabled">{t('Older')}</a>
-      ),
-      (evt.nextEventID ?
-        <Link
+            className="btn btn-default"
+          >
+            {t('Older')}
+          </Link>
+        : <a key="prev" className="btn btn-default disabled">{t('Older')}</a>,
+      evt.nextEventID
+        ? <Link
             key="next"
             to={`/${orgId}/${projectId}/issues/${groupId}/events/${evt.nextEventID}/`}
-            className="btn btn-default">{t('Newer')}</Link>
-      :
-        <a key="next"
-           className="btn btn-default disabled">{t('Newer')}</a>
-      ),
-      (evt.nextEventID ?
-        <Link
-          key="latest"
-          to={`/${orgId}/${projectId}/issues/${groupId}/events/latest/`}
-          className="btn btn-default"
-          title={t('Newest')}>
-          <span className="icon-skip-forward"></span>
-        </Link>
-      :
-        <a key="latest"
-          className="btn btn-default disabled"><span className="icon-skip-forward"></span></a>
-      )
+            className="btn btn-default"
+          >
+            {t('Newer')}
+          </Link>
+        : <a key="next" className="btn btn-default disabled">{t('Newer')}</a>,
+      evt.nextEventID
+        ? <Link
+            key="latest"
+            to={`/${orgId}/${projectId}/issues/${groupId}/events/latest/`}
+            className="btn btn-default"
+            title={t('Newest')}
+          >
+            <span className="icon-skip-forward" />
+          </Link>
+        : <a key="latest" className="btn btn-default disabled">
+            <span className="icon-skip-forward" />
+          </a>
     ];
 
     // TODO: possible to define this as a route in react-router, but without a corresponding
@@ -132,8 +138,10 @@ let GroupEventToolbar  = React.createClass({
       borderBottom: '1px dotted #dfe3ea'
     };
 
-    let latencyThreshold = 30 * 60 * 1000;  // 30 minutes
-    let isOverLatencyThreshold = evt.dateReceived && Math.abs(+moment(evt.dateReceived) - +moment(evt.dateCreated)) > latencyThreshold;
+    let latencyThreshold = 30 * 60 * 1000; // 30 minutes
+    let isOverLatencyThreshold =
+      evt.dateReceived &&
+      Math.abs(+moment(evt.dateReceived) - +moment(evt.dateCreated)) > latencyThreshold;
 
     return (
       <div className="event-toolbar">
@@ -149,11 +157,13 @@ let GroupEventToolbar  = React.createClass({
             <DateTime date={evt.dateCreated} style={style} />
             {isOverLatencyThreshold && <span className="icon-alert" />}
           </span>
-          <a href={jsonUrl} target="_blank" className="json-link">{'JSON'} &#40;<FileSize bytes={evt.size} />&#41;</a>
+          <a href={jsonUrl} target="_blank" className="json-link">
+            {'JSON'} (<FileSize bytes={evt.size} />)
+          </a>
         </span>
       </div>
     );
   }
 });
 
-export default GroupEventToolbar ;
+export default GroupEventToolbar;
diff --git a/src/sentry/static/sentry/app/views/groupDetails/header.jsx b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
index 7ad206e9ab..5627f887ce 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/header.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/header.jsx
@@ -22,10 +22,7 @@ const GroupHeader = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    ProjectState
-  ],
+  mixins: [ApiMixin, ProjectState],
 
   onToggleMute() {
     let group = this.props.group;
@@ -33,18 +30,21 @@ const GroupHeader = React.createClass({
     let org = this.getOrganization();
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.api.bulkUpdate({
-      orgId: org.slug,
-      projectId: project.slug,
-      itemIds: [group.id],
-      data: {
-        status: group.status === 'ignored' ? 'unresolved' : 'ignored'
-      }
-    }, {
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
+    this.api.bulkUpdate(
+      {
+        orgId: org.slug,
+        projectId: project.slug,
+        itemIds: [group.id],
+        data: {
+          status: group.status === 'ignored' ? 'unresolved' : 'ignored'
+        }
+      },
+      {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       }
-    });
+    );
   },
 
   onShare() {
@@ -58,18 +58,21 @@ const GroupHeader = React.createClass({
     let org = this.getOrganization();
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-    this.api.bulkUpdate({
-      orgId: org.slug,
-      projectId: project.slug,
-      itemIds: [group.id],
-      data: {
-        isPublic: !group.isPublic
-      }
-    }, {
-      complete: () => {
-        IndicatorStore.remove(loadingIndicator);
+    this.api.bulkUpdate(
+      {
+        orgId: org.slug,
+        projectId: project.slug,
+        itemIds: [group.id],
+        data: {
+          isPublic: !group.isPublic
+        }
+      },
+      {
+        complete: () => {
+          IndicatorStore.remove(loadingIndicator);
+        }
       }
-    });
+    );
   },
 
   getMessage() {
@@ -87,8 +90,8 @@ const GroupHeader = React.createClass({
 
   render() {
     let group = this.props.group,
-        orgFeatures = new Set(this.getOrganization().features),
-        userCount = group.userCount;
+      orgFeatures = new Set(this.getOrganization().features),
+      userCount = group.userCount;
 
     let className = 'group-detail';
 
@@ -120,35 +123,37 @@ const GroupHeader = React.createClass({
             </h3>
             <div className="event-message">
               <span className="error-level">{group.level}</span>
-              {message &&
-                <span className="message">{message}</span>
-              }
+              {message && <span className="message">{message}</span>}
               {group.logger &&
                 <span className="event-annotation">
-                  <Link to={{
-                      pathname:`/${orgId}/${projectId}/`,
+                  <Link
+                    to={{
+                      pathname: `/${orgId}/${projectId}/`,
                       query: {query: 'logger:' + group.logger}
-                    }}>
+                    }}
+                  >
                     {group.logger}
                   </Link>
-                </span>
-              }
+                </span>}
               {group.annotations.map((annotation, i) => {
                 return (
-                  <span className="event-annotation" key={i}
-                      dangerouslySetInnerHTML={{__html: annotation}} />
+                  <span
+                    className="event-annotation"
+                    key={i}
+                    dangerouslySetInnerHTML={{__html: annotation}}
+                  />
                 );
               })}
             </div>
           </div>
           <div className="col-sm-5 stats">
             <div className="flex flex-justify-right">
-              {group.shortId && this.getFeatures().has('callsigns') &&
+              {group.shortId &&
+                this.getFeatures().has('callsigns') &&
                 <div className="short-id-box count align-right">
                   <h6 className="nav-header">{t('Issue #')}</h6>
                   <ShortId shortId={group.shortId} />
-                </div>
-              }
+                </div>}
               <div className="assigned-to">
                 <h6 className="nav-header">{t('Assigned')}</h6>
                 <AssigneeSelector id={group.id} />
@@ -161,13 +166,11 @@ const GroupHeader = React.createClass({
               </div>
               <div className="count align-right">
                 <h6 className="nav-header">{t('Users')}</h6>
-                {userCount !== 0 ?
-                  <Link to={`/${orgId}/${projectId}/issues/${groupId}/tags/user/`}>
-                    <Count className="count" value={userCount} />
-                  </Link>
-                :
-                  <span>0</span>
-                }
+                {userCount !== 0
+                  ? <Link to={`/${orgId}/${projectId}/issues/${groupId}/tags/user/`}>
+                      <Count className="count" value={userCount} />
+                    </Link>
+                  : <span>0</span>}
               </div>
             </div>
           </div>
@@ -181,23 +184,27 @@ const GroupHeader = React.createClass({
                 <span className="icon" /> {t('Share this event')}
               </a>
             </div>
-          </div>
-        }
+          </div>}
         <ul className="nav nav-tabs">
-          <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/`} isActive={() => {
-            let rootGroupPath = `/${orgId}/${projectId}/issues/${groupId}/`;
-            let pathname = this.context.location.pathname;
-
-            // Because react-router 1.0 removes router.isActive(route)
-            return pathname === rootGroupPath || /events\/\w+\/$/.test(pathname);
-          }}>
+          <ListLink
+            to={`/${orgId}/${projectId}/issues/${groupId}/`}
+            isActive={() => {
+              let rootGroupPath = `/${orgId}/${projectId}/issues/${groupId}/`;
+              let pathname = this.context.location.pathname;
+
+              // Because react-router 1.0 removes router.isActive(route)
+              return pathname === rootGroupPath || /events\/\w+\/$/.test(pathname);
+            }}
+          >
             {t('Details')}
           </ListLink>
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/activity/`}>
             {t('Comments')} <span className="badge animated">{group.numComments}</span>
           </ListLink>
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/feedback/`}>
-            {t('User Feedback')} <span className="badge animated">{group.userReportCount}</span>
+            {t('User Feedback')}
+            {' '}
+            <span className="badge animated">{group.userReportCount}</span>
           </ListLink>
           <ListLink to={`/${orgId}/${projectId}/issues/${groupId}/tags/`}>
             {t('Tags')}
diff --git a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
index 982ded915f..f305001c1b 100644
--- a/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
+++ b/src/sentry/static/sentry/app/views/groupDetails/seenBy.jsx
@@ -33,16 +33,21 @@ const GroupSeenBy = React.createClass({
       return null;
     }
 
-    let seenByNodes = seenBy.filter((user, userIdx) => {
-      return activeUser.id !== user.id;
-    }).map((user, userIdx) => {
-      let title = _.escape(userDisplayName(user)) + '<br/>' + _.escape(moment(user.lastSeen).format('LL'));
-      return (
-        <li key={userIdx} className="tip" data-title={title}>
-          <Avatar size={52} user={user} />
-        </li>
-      );
-    });
+    let seenByNodes = seenBy
+      .filter((user, userIdx) => {
+        return activeUser.id !== user.id;
+      })
+      .map((user, userIdx) => {
+        let title =
+          _.escape(userDisplayName(user)) +
+          '<br/>' +
+          _.escape(moment(user.lastSeen).format('LL'));
+        return (
+          <li key={userIdx} className="tip" data-title={title}>
+            <Avatar size={52} user={user} />
+          </li>
+        );
+      });
 
     return (
       <div className="seen-by">
@@ -56,4 +61,3 @@ const GroupSeenBy = React.createClass({
 });
 
 export default GroupSeenBy;
-
diff --git a/src/sentry/static/sentry/app/views/groupEventDetails.jsx b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
index c5c7b2ae23..8833cbc9e6 100644
--- a/src/sentry/static/sentry/app/views/groupEventDetails.jsx
+++ b/src/sentry/static/sentry/app/views/groupEventDetails.jsx
@@ -9,12 +9,8 @@ import LoadingError from '../components/loadingError';
 import LoadingIndicator from '../components/loadingIndicator';
 import {t} from '../locale';
 
-
 const GroupEventDetails = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
@@ -35,13 +31,12 @@ const GroupEventDetails = React.createClass({
     }
   },
 
-
   fetchData() {
     let eventId = this.props.params.eventId || 'latest';
 
-    let url = (eventId === 'latest' || eventId === 'oldest' ?
-      '/issues/' + this.getGroup().id + '/events/' + eventId + '/' :
-      '/events/' + eventId + '/');
+    let url = eventId === 'latest' || eventId === 'oldest'
+      ? '/issues/' + this.getGroup().id + '/events/' + eventId + '/'
+      : '/events/' + eventId + '/';
 
     this.setState({
       loading: true,
@@ -84,44 +79,49 @@ const GroupEventDetails = React.createClass({
           <div className="primary">
             {evt &&
               <GroupEventToolbar
-                  group={group}
-                  event={evt}
-                  orgId={params.orgId}
-                  projectId={params.projectId} />
-            }
+                group={group}
+                event={evt}
+                orgId={params.orgId}
+                projectId={params.projectId}
+              />}
             {group.status != 'unresolved' &&
               <div className="issue-status">
                 {group.status === 'ignored' &&
-                  <MutedBox statusDetails={group.statusDetails} />
-                }
-                {group.status === 'resolved' && group.statusDetails.inNextRelease &&
+                  <MutedBox statusDetails={group.statusDetails} />}
+                {group.status === 'resolved' &&
+                  group.statusDetails.inNextRelease &&
                   <div className="box">
                     <span className="icon icon-checkmark" />
-                    <p>{t(`This issue has been marked as being resolved in the next
+                    <p>
+                      {t(
+                        `This issue has been marked as being resolved in the next
                       release. Until then, you will not get notified about new
-                      occurrences.`)}</p>
-                  </div>
-                }
-                {group.status === 'resolved' && group.statusDetails.autoResolved &&
+                      occurrences.`
+                      )}
+                    </p>
+                  </div>}
+                {group.status === 'resolved' &&
+                  group.statusDetails.autoResolved &&
                   <div className="box">
                     <span className="icon icon-checkmark" />
-                    <p>{t(`This issue was automatically marked as resolved due to
-                      the Auto Resolve configuration for this project.`)}</p>
-                  </div>
-                }
-              </div>
-            }
-            {this.state.loading ?
-              <LoadingIndicator />
-            : (this.state.error ?
-              <LoadingError onRetry={this.fetchData} />
-            :
-              <EventEntries
-                group={group}
-                event={evt}
-                orgId={params.orgId}
-                project={this.getProject()} />
-            )}
+                    <p>
+                      {t(
+                        `This issue was automatically marked as resolved due to
+                      the Auto Resolve configuration for this project.`
+                      )}
+                    </p>
+                  </div>}
+              </div>}
+            {this.state.loading
+              ? <LoadingIndicator />
+              : this.state.error
+                  ? <LoadingError onRetry={this.fetchData} />
+                  : <EventEntries
+                      group={group}
+                      event={evt}
+                      orgId={params.orgId}
+                      project={this.getProject()}
+                    />}
           </div>
           <div className="secondary">
             <GroupSidebar group={group} event={evt} />
diff --git a/src/sentry/static/sentry/app/views/groupEvents.jsx b/src/sentry/static/sentry/app/views/groupEvents.jsx
index 8810d8d02b..4f17f91021 100644
--- a/src/sentry/static/sentry/app/views/groupEvents.jsx
+++ b/src/sentry/static/sentry/app/views/groupEvents.jsx
@@ -13,10 +13,7 @@ import {t} from '../locale';
 import {deviceNameMapper} from '../utils';
 
 const GroupEvents = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     let queryParams = this.props.location.query;
@@ -25,7 +22,7 @@ const GroupEvents = React.createClass({
       loading: true,
       error: false,
       pageLinks: '',
-      query: queryParams.query || '',
+      query: queryParams.query || ''
     };
   },
 
@@ -34,22 +31,30 @@ const GroupEvents = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.params.groupId !== this.props.params.groupId ||
-        nextProps.location.search !== this.props.location.search) {
+    if (
+      nextProps.params.groupId !== this.props.params.groupId ||
+      nextProps.location.search !== this.props.location.search
+    ) {
       let queryParams = nextProps.location.query;
-      this.setState({
-        query: queryParams.query
-      }, this.fetchData);
+      this.setState(
+        {
+          query: queryParams.query
+        },
+        this.fetchData
+      );
     }
   },
 
   onSearch(query) {
     let targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
+    if (query !== '') targetQueryParams.query = query;
 
     let {groupId, orgId, projectId} = this.props.params;
-    browserHistory.pushState(null, `/${orgId}/${projectId}/issues/${groupId}/events/`, targetQueryParams);
+    browserHistory.pushState(
+      null,
+      `/${orgId}/${projectId}/issues/${groupId}/events/`,
+      targetQueryParams
+    );
   },
 
   getEndpoint() {
@@ -82,7 +87,7 @@ const GroupEvents = React.createClass({
           pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
-      error: (err) => {
+      error: err => {
         let error = err.responseJSON || true;
         error = error.detail || true;
         this.setState({
@@ -128,7 +133,7 @@ const GroupEvents = React.createClass({
 
   renderResults() {
     let group = this.getGroup();
-    let tagList = group.tags.filter((tag) => {
+    let tagList = group.tags.filter(tag => {
       return tag.key !== 'user';
     });
 
@@ -142,9 +147,9 @@ const GroupEvents = React.createClass({
 
     let {orgId, projectId, groupId} = this.props.params;
 
-    let children = this.state.eventList.map((event) => {
+    let children = this.state.eventList.map(event => {
       let tagMap = {};
-      event.tags.forEach((tag) => {
+      event.tags.forEach(tag => {
         tagMap[tag.key] = tag.value;
       });
 
@@ -158,26 +163,29 @@ const GroupEvents = React.createClass({
               <small>{(this.getEventTitle(event) || '').substr(0, 100)}</small>
             </h5>
           </td>
-          {tagList.map((tag) => {
+          {tagList.map(tag => {
             return (
               <td key={tag.key}>
-                {tag.key === 'device' ? deviceNameMapper(tagMap[tag.key]) : tagMap[tag.key]}
+                {tag.key === 'device'
+                  ? deviceNameMapper(tagMap[tag.key])
+                  : tagMap[tag.key]}
               </td>
             );
           })}
           {hasUser &&
             <td className="event-user table-user-info">
-              {event.user ?
-                <div>
-                  <Avatar user={event.user} size={64} className="avatar"
-                          gravatar={false} />
-                  {event.user.email}
-                </div>
-              :
-                <span>&mdash;</span>
-              }
-            </td>
-          }
+              {event.user
+                ? <div>
+                    <Avatar
+                      user={event.user}
+                      size={64}
+                      className="avatar"
+                      gravatar={false}
+                    />
+                    {event.user.email}
+                  </div>
+                : <span>—</span>}
+            </td>}
         </tr>
       );
     });
@@ -189,16 +197,14 @@ const GroupEvents = React.createClass({
             <thead>
               <tr>
                 <th>{t('ID')}</th>
-                {tagList.map((tag) => {
+                {tagList.map(tag => {
                   return (
                     <th key={tag.key}>
                       {tag.name}
                     </th>
                   );
                 })}
-                {hasUser &&
-                  <th>{t('User')}</th>
-                }
+                {hasUser && <th>{t('User')}</th>}
               </tr>
             </thead>
             <tbody>
@@ -206,7 +212,7 @@ const GroupEvents = React.createClass({
             </tbody>
           </table>
         </div>
-        <Pagination pageLinks={this.state.pageLinks}/>
+        <Pagination pageLinks={this.state.pageLinks} />
       </div>
     );
   },
@@ -214,16 +220,13 @@ const GroupEvents = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading)
-      body = <LoadingIndicator />;
+    if (this.state.loading) body = <LoadingIndicator />;
     else if (this.state.error)
       body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
-    else if (this.state.eventList.length > 0)
-      body = this.renderResults();
+    else if (this.state.eventList.length > 0) body = this.renderResults();
     else if (this.state.query && this.state.query !== '')
       body = this.renderNoQueryResults();
-    else
-      body = this.renderEmpty();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -232,10 +235,12 @@ const GroupEvents = React.createClass({
     return (
       <div>
         <div style={{marginBottom: 20}}>
-          <SearchBar defaultQuery=""
+          <SearchBar
+            defaultQuery=""
             placeholder={t('search event message or tags')}
             query={this.state.query}
-            onSearch={this.onSearch} />
+            onSearch={this.onSearch}
+          />
         </div>
         {this.renderBody()}
       </div>
diff --git a/src/sentry/static/sentry/app/views/groupHashes.jsx b/src/sentry/static/sentry/app/views/groupHashes.jsx
index 29a3c38454..7da2633f14 100644
--- a/src/sentry/static/sentry/app/views/groupHashes.jsx
+++ b/src/sentry/static/sentry/app/views/groupHashes.jsx
@@ -8,17 +8,14 @@ import Pagination from '../components/pagination';
 import {t} from '../locale';
 
 const GroupHashes = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
       hashList: [],
       loading: true,
       error: false,
-      pageLinks: '',
+      pageLinks: ''
     };
   },
 
@@ -28,11 +25,14 @@ const GroupHashes = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.params.groupId !== this.props.params.groupId) {
-      this.setState({
-        hashList: [],
-        loading: true,
-        error: false,
-      }, this.fetchData);
+      this.setState(
+        {
+          hashList: [],
+          loading: true,
+          error: false
+        },
+        this.fetchData
+      );
     }
   },
 
@@ -40,7 +40,7 @@ const GroupHashes = React.createClass({
     let params = this.props.params;
     let queryParams = {
       ...this.props.location.query,
-      limit: 50,
+      limit: 50
     };
 
     return `/issues/${params.groupId}/hashes/?${jQuery.param(queryParams)}`;
@@ -65,7 +65,7 @@ const GroupHashes = React.createClass({
           pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
-      error: (error) => {
+      error: error => {
         this.setState({
           error: true,
           loading: false
@@ -84,7 +84,7 @@ const GroupHashes = React.createClass({
   },
 
   renderResults() {
-    let children = this.state.hashList.map((hash) => {
+    let children = this.state.hashList.map(hash => {
       return (
         <tr key={hash.id}>
           <td>
@@ -106,7 +106,7 @@ const GroupHashes = React.createClass({
             {children}
           </tbody>
         </table>
-        <Pagination pageLinks={this.state.pageLinks}/>
+        <Pagination pageLinks={this.state.pageLinks} />
       </div>
     );
   },
@@ -114,14 +114,10 @@ const GroupHashes = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading)
-      body = <LoadingIndicator />;
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.hashList.length > 0)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
+    if (this.state.loading) body = <LoadingIndicator />;
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.hashList.length > 0) body = this.renderResults();
+    else body = this.renderEmpty();
 
     return body;
   },
diff --git a/src/sentry/static/sentry/app/views/groupTagValues.jsx b/src/sentry/static/sentry/app/views/groupTagValues.jsx
index 7d1b58c0df..70521f5c20 100644
--- a/src/sentry/static/sentry/app/views/groupTagValues.jsx
+++ b/src/sentry/static/sentry/app/views/groupTagValues.jsx
@@ -12,9 +12,7 @@ import {isUrl, percent, deviceNameMapper} from '../utils';
 import {t} from '../locale';
 
 const GroupTagValues = React.createClass({
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -31,8 +29,10 @@ const GroupTagValues = React.createClass({
   },
 
   componentDidUpdate(prevProps) {
-    if (prevProps.location.search !== this.props.location.search ||
-      prevProps.params.tagKey !== this.props.params.tagKey) {
+    if (
+      prevProps.location.search !== this.props.location.search ||
+      prevProps.params.tagKey !== this.props.params.tagKey
+    ) {
       this.fetchData();
     }
   },
@@ -48,13 +48,13 @@ const GroupTagValues = React.createClass({
     });
 
     this.api.request(`/issues/${params.groupId}/tags/${params.tagKey}/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           tagKey: data,
           loading: this.state.tagValueList === null
         });
       },
-      error: (error) => {
+      error: error => {
         this.setState({
           error: true,
           loading: false
@@ -62,21 +62,24 @@ const GroupTagValues = React.createClass({
       }
     });
 
-    this.api.request(`/issues/${params.groupId}/tags/${params.tagKey}/values/?${querystring}`, {
-      success: (data, _, jqXHR) => {
-        this.setState({
-          tagValueList: data,
-          loading: this.state.tagKey === null,
-          pageLinks: jqXHR.getResponseHeader('Link')
-        });
-      },
-      error: (error) => {
-        this.setState({
-          error: true,
-          loading: false
-        });
+    this.api.request(
+      `/issues/${params.groupId}/tags/${params.tagKey}/values/?${querystring}`,
+      {
+        success: (data, _, jqXHR) => {
+          this.setState({
+            tagValueList: data,
+            loading: this.state.tagKey === null,
+            pageLinks: jqXHR.getResponseHeader('Link')
+          });
+        },
+        error: error => {
+          this.setState({
+            error: true,
+            loading: false
+          });
+        }
       }
-    });
+    );
   },
 
   getUserDisplayName(item) {
@@ -97,32 +100,37 @@ const GroupTagValues = React.createClass({
       return (
         <tr key={tagValueIdx}>
           <td className="bar-cell">
-            <span className="bar" style={{width: pct + '%'}}></span>
+            <span className="bar" style={{width: pct + '%'}} />
             <span className="label">{pct}%</span>
           </td>
           <td>
             <Link
-                to={{
-                  pathname: `/${orgId}/${projectId}/`,
-                  query: {query: `${tagKey.key}:"${tagValue.value}"`}
-                }}>
-              {tagKey.key === 'user' ? [
-                <Avatar user={tagValue} size={20} className="avatar" />,
-                <span style={{marginLeft: 10}}>{this.getUserDisplayName(tagValue)}</span>
-              ] :
-                deviceNameMapper(tagValue.name)
-              }
+              to={{
+                pathname: `/${orgId}/${projectId}/`,
+                query: {query: `${tagKey.key}:"${tagValue.value}"`}
+              }}
+            >
+              {tagKey.key === 'user'
+                ? [
+                    <Avatar user={tagValue} size={20} className="avatar" />,
+                    <span style={{marginLeft: 10}}>
+                      {this.getUserDisplayName(tagValue)}
+                    </span>
+                  ]
+                : deviceNameMapper(tagValue.name)}
             </Link>
             {tagValue.email &&
-              <a href={`mailto:${tagValue.email}`} target="_blank" className="external-icon">
+              <a
+                href={`mailto:${tagValue.email}`}
+                target="_blank"
+                className="external-icon"
+              >
                 <em className="icon-envelope" />
-              </a>
-            }
+              </a>}
             {isUrl(tagValue.value) &&
               <a href={tagValue.value} className="external-icon">
                 <em className="icon-open" />
-              </a>
-            }
+              </a>}
           </td>
           <td>
             <TimeSince date={tagValue.lastSeen} />
@@ -135,14 +143,15 @@ const GroupTagValues = React.createClass({
       <div>
         <h3>
           {tagKey.key == 'user' ? t('Affected Users') : tagKey.name}
-          <a href="export/" className="btn btn-default btn-sm"
-             style={{marginLeft: 10}}>{t('Export to CSV')}</a>
+          <a href="export/" className="btn btn-default btn-sm" style={{marginLeft: 10}}>
+            {t('Export to CSV')}
+          </a>
         </h3>
         <table className="table table-striped">
           <thead>
             <tr>
               <th style={{width: 30}}>%</th>
-              <th></th>
+              <th />
               <th style={{width: 200}}>{t('Last Seen')}</th>
             </tr>
           </thead>
@@ -150,8 +159,12 @@ const GroupTagValues = React.createClass({
             {children}
           </tbody>
         </table>
-        <Pagination pageLinks={this.state.pageLinks}/>
-        <p><small>{t('Note: Percentage of issue is based on events seen in the last 7 days.')}</small></p>
+        <Pagination pageLinks={this.state.pageLinks} />
+        <p>
+          <small>
+            {t('Note: Percentage of issue is based on events seen in the last 7 days.')}
+          </small>
+        </p>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/groupTags.jsx b/src/sentry/static/sentry/app/views/groupTags.jsx
index 3e64cba08a..ac3ff5e66d 100644
--- a/src/sentry/static/sentry/app/views/groupTags.jsx
+++ b/src/sentry/static/sentry/app/views/groupTags.jsx
@@ -9,10 +9,7 @@ import {percent, deviceNameMapper} from '../utils';
 import {t} from '../locale';
 
 const GroupTags = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
@@ -35,7 +32,7 @@ const GroupTags = React.createClass({
     // TODO(dcramer): each tag should be a separate query as the tags endpoint
     // is not performant
     this.api.request('/issues/' + this.getGroup().id + '/tags/', {
-      success: (data) => {
+      success: data => {
         if (!this.isMounted()) {
           return;
         }
@@ -45,7 +42,7 @@ const GroupTags = React.createClass({
           loading: false
         });
       },
-      error: (error) => {
+      error: error => {
         if (!this.isMounted()) {
           return;
         }
@@ -81,12 +78,13 @@ const GroupTags = React.createClass({
           return (
             <li key={tagValueIdx}>
               <Link
-                  className="tag-bar"
-                  to={{
-                    pathname: `/${orgId}/${projectId}/`,
-                    query: {query: tag.key + ':' + '"' + tagValue.value + '"'}
-                  }}>
-                <span className="tag-bar-background" style={{width: pct + '%'}}></span>
+                className="tag-bar"
+                to={{
+                  pathname: `/${orgId}/${projectId}/`,
+                  query: {query: tag.key + ':' + '"' + tagValue.value + '"'}
+                }}
+              >
+                <span className="tag-bar-background" style={{width: pct + '%'}} />
                 <span className="tag-bar-label">{deviceNameMapper(tagValue.name)}</span>
                 <span className="tag-bar-count"><Count value={tagValue.count} /></span>
               </Link>
@@ -99,7 +97,12 @@ const GroupTags = React.createClass({
             <div className="box">
               <div className="box-header">
                 <span className="pull-right">
-                  <Link className="btn btn-default btn-sm" to={`/${orgId}/${projectId}/issues/${groupId}/tags/${tag.key}/`}>{t('More Details')}</Link>
+                  <Link
+                    className="btn btn-default btn-sm"
+                    to={`/${orgId}/${projectId}/issues/${groupId}/tags/${tag.key}/`}
+                  >
+                    {t('More Details')}
+                  </Link>
                 </span>
                 <h5>{tag.name} (<Count value={tag.uniqueValues} />)</h5>
               </div>
diff --git a/src/sentry/static/sentry/app/views/groupUserReports.jsx b/src/sentry/static/sentry/app/views/groupUserReports.jsx
index d36f238668..d792b92bca 100644
--- a/src/sentry/static/sentry/app/views/groupUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/groupUserReports.jsx
@@ -11,17 +11,14 @@ import utils from '../utils';
 import {t} from '../locale';
 
 const GroupUserReports = React.createClass({
-  mixins: [
-    ApiMixin,
-    GroupState
-  ],
+  mixins: [ApiMixin, GroupState],
 
   getInitialState() {
     return {
       loading: true,
       error: false,
       reportList: [],
-      pageLinks: '',
+      pageLinks: ''
     };
   },
 
@@ -53,7 +50,7 @@ const GroupUserReports = React.createClass({
           pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
-      error: (error) => {
+      error: error => {
         this.setState({
           error: true,
           loading: false
@@ -107,7 +104,11 @@ const GroupUserReports = React.createClass({
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('No user reports have been collected for this event.')}</p>
-        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Feedback')}</Link></p>
+        <p>
+          <Link to={this.getUserReportsUrl()}>
+            {t('Learn how to integrate User Feedback')}
+          </Link>
+        </p>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/installWizard.jsx b/src/sentry/static/sentry/app/views/installWizard.jsx
index a4eaeb8a22..79a76b6ce1 100644
--- a/src/sentry/static/sentry/app/views/installWizard.jsx
+++ b/src/sentry/static/sentry/app/views/installWizard.jsx
@@ -18,10 +18,14 @@ const InstallWizardSettings = React.createClass({
 
   getInitialState() {
     let options = {...this.props.options};
-    let requiredOptions = Object.keys(_.pick(options, (option) => {
-      return option.field.required && !option.field.disabled;
-    }));
-    let missingOptions = new Set(requiredOptions.filter(option => !options[option].field.isSet));
+    let requiredOptions = Object.keys(
+      _.pick(options, option => {
+        return option.field.required && !option.field.disabled;
+      })
+    );
+    let missingOptions = new Set(
+      requiredOptions.filter(option => !options[option].field.isSet)
+    );
     // This is to handle the initial installation case.
     // Even if all options are filled out, we want to prompt to confirm
     // them. This is a bit of a hack because we're assuming that
@@ -40,7 +44,12 @@ const InstallWizardSettings = React.createClass({
         let o = getOption(key);
         option.value = o.defaultValue ? o.defaultValue() : '';
       }
-      fields[key] = getOptionField(key, this.onFieldChange.bind(this, key), option.value, option.field);
+      fields[key] = getOptionField(
+        key,
+        this.onFieldChange.bind(this, key),
+        option.value,
+        option.field
+      );
       // options is used for submitting to the server, and we dont submit values
       // that are deleted
       if (option.field.disabled) {
@@ -51,7 +60,7 @@ const InstallWizardSettings = React.createClass({
     return {
       options: options,
       required: requiredOptions,
-      fields: fields,
+      fields: fields
     };
   },
 
@@ -70,20 +79,24 @@ const InstallWizardSettings = React.createClass({
 
   render() {
     let {fields, required, options} = this.state;
-    let formValid = !required.filter(option => !options[option].field.allowEmpty && !options[option].value).length;
+    let formValid = !required.filter(
+      option => !options[option].field.allowEmpty && !options[option].value
+    ).length;
     let disabled = !formValid || this.props.formDisabled;
 
     return (
       <form onSubmit={this.onSubmit}>
-        <p>Welcome to Sentry, yo! Complete setup by filling out the required
-          configuration.</p>
+        <p>
+          Welcome to Sentry, yo! Complete setup by filling out the required
+          configuration.
+        </p>
 
         {getForm(fields)}
 
         <div className="form-actions" style={{marginTop: 25}}>
-          <button className="btn btn-primary"
-                  disabled={disabled}
-                  type="submit">{t('Continue')}</button>
+          <button className="btn btn-primary" disabled={disabled} type="submit">
+            {t('Continue')}
+          </button>
         </div>
       </form>
     );
@@ -95,9 +108,7 @@ const InstallWizard = React.createClass({
     onConfigured: React.PropTypes.func.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -106,7 +117,7 @@ const InstallWizard = React.createClass({
       options: {},
       submitError: false,
       submitErrorType: null,
-      submitInProgress: false,
+      submitInProgress: false
     };
   },
 
@@ -128,7 +139,7 @@ const InstallWizard = React.createClass({
     // already configured
     this.api.request('/internal/options/?query=is:required', {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           options: data,
           loading: false,
@@ -147,7 +158,7 @@ const InstallWizard = React.createClass({
   onSubmit(options) {
     this.setState({
       submitInProgress: true,
-      submitError: false,
+      submitError: false
     });
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
@@ -161,7 +172,7 @@ const InstallWizard = React.createClass({
       data: data,
       success: () => {
         this.setState({
-          submitInProgress: false,
+          submitInProgress: false
         });
         this.props.onConfigured();
       },
@@ -169,7 +180,7 @@ const InstallWizard = React.createClass({
         let err = {};
         try {
           err = xhr.responseJSON;
-        } catch(ex) {
+        } catch (ex) {
           // ...
         }
         let errorMessage = '';
@@ -180,22 +191,28 @@ const InstallWizard = React.createClass({
         } else {
           switch (err.error) {
             case 'unknown_option':
-              errorMessage = t('An invalid option (%s) was passed to the server. Please report this issue to the Sentry team.',
-                               err.errorDetail.option);
+              errorMessage = t(
+                'An invalid option (%s) was passed to the server. Please report this issue to the Sentry team.',
+                err.errorDetail.option
+              );
               break;
             case 'invalid_type':
-              errorMessage = t('An invalid value for (%s) was passed to the server.',
-                               err.errorDetail.option);
+              errorMessage = t(
+                'An invalid value for (%s) was passed to the server.',
+                err.errorDetail.option
+              );
               break;
             default:
-              errorMessage = t('An unknown error occurred. Please take a look at the service logs.');
+              errorMessage = t(
+                'An unknown error occurred. Please take a look at the service logs.'
+              );
           }
         }
         this.setState({
           submitInProgress: false,
           submitError: true,
           submitErrorMessage: errorMessage,
-          submitErrorType: err.error,
+          submitErrorType: err.error
         });
       },
       complete: () => {
@@ -205,7 +222,14 @@ const InstallWizard = React.createClass({
   },
 
   render() {
-    let {error, loading, options, submitError, submitErrorMessage, submitInProgress} = this.state;
+    let {
+      error,
+      loading,
+      options,
+      submitError,
+      submitErrorMessage,
+      submitInProgress
+    } = this.state;
     let version = ConfigStore.get('version');
     return (
       <DocumentTitle title={t('Sentry Setup')}>
@@ -216,28 +240,28 @@ const InstallWizard = React.createClass({
               <span>{t('Welcome to Sentry')}</span>
               <small>{version.current}</small>
             </h1>
-            {loading ?
-              <LoadingIndicator>
-                {t('Please wait while we load configuration.')}
-              </LoadingIndicator>
-            : (error ?
-              <div className="loading-error">
-                <span className="icon-exclamation" />
-                {t('We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.')}
-              </div>
-            :
-              <div>
-                {submitError &&
-                  <div className="alert alert-block alert-error">
-                    {submitErrorMessage}
-                  </div>
-                }
-                <InstallWizardSettings
-                    options={options}
-                    onSubmit={this.onSubmit}
-                    formDisabled={submitInProgress} />
-              </div>
-            )}
+            {loading
+              ? <LoadingIndicator>
+                  {t('Please wait while we load configuration.')}
+                </LoadingIndicator>
+              : error
+                  ? <div className="loading-error">
+                      <span className="icon-exclamation" />
+                      {t(
+                        'We were unable to load the required configuration from the Sentry server. Please take a look at the service logs.'
+                      )}
+                    </div>
+                  : <div>
+                      {submitError &&
+                        <div className="alert alert-block alert-error">
+                          {submitErrorMessage}
+                        </div>}
+                      <InstallWizardSettings
+                        options={options}
+                        onSubmit={this.onSubmit}
+                        formDisabled={submitInProgress}
+                      />
+                    </div>}
           </div>
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
index 0ffad3ec19..e04180e5bb 100644
--- a/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/assignedToMe.jsx
@@ -17,9 +17,10 @@ const AssignedToMe = React.createClass({
       <OrganizationIssueList
         title={this.getTitle()}
         endpoint={this.getEndpoint()}
-        {...this.props} />
+        {...this.props}
+      />
     );
-  },
+  }
 });
 
 export default AssignedToMe;
diff --git a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
index b4de1631ff..f23cd343b5 100644
--- a/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/bookmarked.jsx
@@ -17,9 +17,10 @@ const Bookmarked = React.createClass({
       <OrganizationIssueList
         title={this.getTitle()}
         endpoint={this.getEndpoint()}
-        {...this.props} />
+        {...this.props}
+      />
     );
-  },
+  }
 });
 
 export default Bookmarked;
diff --git a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
index 733aac895b..62edfb9351 100644
--- a/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
+++ b/src/sentry/static/sentry/app/views/myIssues/viewed.jsx
@@ -17,9 +17,10 @@ const Viewed = React.createClass({
       <OrganizationIssueList
         title={this.getTitle()}
         endpoint={this.getEndpoint()}
-        {...this.props} />
+        {...this.props}
+      />
     );
-  },
+  }
 });
 
 export default Viewed;
diff --git a/src/sentry/static/sentry/app/views/organizationAuditLog.jsx b/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
index 62d51a4868..9e2a64a9d2 100644
--- a/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
+++ b/src/sentry/static/sentry/app/views/organizationAuditLog.jsx
@@ -48,18 +48,14 @@ const EVENT_TYPES = [
   'api-key.remove'
 ].sort();
 
-
 const OrganizationAuditLog = React.createClass({
-  mixins: [
-    ApiMixin,
-    OrganizationState,
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
       loading: true,
       error: false,
-      entryList: [],
+      entryList: []
     };
   },
 
@@ -68,8 +64,10 @@ const OrganizationAuditLog = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.location.search !== this.props.location.search ||
-        nextProps.params.orgId !== this.props.params.orgId) {
+    if (
+      nextProps.location.search !== this.props.location.search ||
+      nextProps.params.orgId !== this.props.params.orgId
+    ) {
       this.remountComponent();
     }
   },
@@ -80,7 +78,7 @@ const OrganizationAuditLog = React.createClass({
 
   fetchData() {
     this.setState({
-      loading: true,
+      loading: true
     });
 
     this.api.request(this.getEndpoint(), {
@@ -90,13 +88,13 @@ const OrganizationAuditLog = React.createClass({
           loading: false,
           error: false,
           entryList: data,
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -117,7 +115,7 @@ const OrganizationAuditLog = React.createClass({
       return;
     }
     let queryParams = {
-      event: value,
+      event: value
     };
     browserHistory.pushState(null, this.props.location.pathname, queryParams);
   },
@@ -127,13 +125,11 @@ const OrganizationAuditLog = React.createClass({
       return <tr><td colSpan="4">{t('No results found.')}</td></tr>;
     }
 
-    return this.state.entryList.map((entry) => {
+    return this.state.entryList.map(entry => {
       return (
         <tr key={entry.id}>
           <td className="table-user-info">
-            {entry.actor.email &&
-              <Avatar user={entry.actor} />
-            }
+            {entry.actor.email && <Avatar user={entry.actor} />}
             <h5>{entry.actor.name}</h5>
             {entry.note}
           </td>
@@ -159,10 +155,14 @@ const OrganizationAuditLog = React.createClass({
             <form className="form-horizontal" style={{marginBottom: 20}}>
               <div className="control-group">
                 <div className="controls">
-                  <SelectInput name="event" onChange={this.onEventSelect}
-                               value={currentEventType} style={{width: 250}}>
+                  <SelectInput
+                    name="event"
+                    onChange={this.onEventSelect}
+                    value={currentEventType}
+                    style={{width: 250}}
+                  >
                     <option key="any" value="">{t('Any')}</option>
-                    {EVENT_TYPES.map((eventType) => {
+                    {EVENT_TYPES.map(eventType => {
                       return <option key={eventType}>{eventType}</option>;
                     })}
                   </SelectInput>
@@ -184,23 +184,22 @@ const OrganizationAuditLog = React.createClass({
                 </tr>
               </thead>
               <tbody>
-                {(this.state.loading ?
-                  <tr><td colSpan="4"><LoadingIndicator /></td></tr>
-                : (this.state.error ?
-                  <tr><td colSpan="4"><LoadingError onRetry={this.fetchData} /></td></tr>
-                :
-                  this.renderResults()
-                ))}
+                {this.state.loading
+                  ? <tr><td colSpan="4"><LoadingIndicator /></td></tr>
+                  : this.state.error
+                      ? <tr>
+                          <td colSpan="4"><LoadingError onRetry={this.fetchData} /></td>
+                        </tr>
+                      : this.renderResults()}
               </tbody>
             </table>
           </div>
           {this.state.pageLinks &&
-            <Pagination pageLinks={this.state.pageLinks} {...this.props} />
-          }
+            <Pagination pageLinks={this.state.pageLinks} {...this.props} />}
         </OrganizationHomeContainer>
       </DocumentTitle>
     );
-  },
+  }
 });
 
 export default OrganizationAuditLog;
diff --git a/src/sentry/static/sentry/app/views/organizationDashboard.jsx b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
index 03ac310d34..1d2aa96a63 100644
--- a/src/sentry/static/sentry/app/views/organizationDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDashboard.jsx
@@ -24,7 +24,6 @@ const AssignedIssues = React.createClass({
     pageSize: React.PropTypes.number
   },
 
-
   getEndpoint() {
     return `/organizations/${this.props.params.orgId}/members/me/issues/assigned/?`;
   },
@@ -45,22 +44,33 @@ const AssignedIssues = React.createClass({
     return (
       <div>
         <div className="pull-right">
-          <Link className="btn btn-sm btn-default" to={this.getViewMoreLink()}>{t('View more')}</Link>
-          <a className="btn btn-sm btn-default" style={{marginLeft: 5}}
-             onClick={this.refresh}>
+          <Link className="btn btn-sm btn-default" to={this.getViewMoreLink()}>
+            {t('View more')}
+          </Link>
+          <a
+            className="btn btn-sm btn-default"
+            style={{marginLeft: 5}}
+            onClick={this.refresh}
+          >
             <span className="icon icon-refresh" />
           </a>
         </div>
         <h4>Assigned to me</h4>
-        <IssueList endpoint={this.getEndpoint()} query={{
-          statsPeriod: this.props.statsPeriod,
-          per_page: this.props.pageSize,
-          status: 'unresolved',
-        }} pagination={false} renderEmpty={this.renderEmpty}
-           ref="issueList" {...this.props} />
+        <IssueList
+          endpoint={this.getEndpoint()}
+          query={{
+            statsPeriod: this.props.statsPeriod,
+            per_page: this.props.pageSize,
+            status: 'unresolved'
+          }}
+          pagination={false}
+          renderEmpty={this.renderEmpty}
+          ref="issueList"
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
 const NewIssues = React.createClass({
@@ -74,7 +84,11 @@ const NewIssues = React.createClass({
   },
 
   renderEmpty() {
-    return <div className="box empty">{t('No new issues have been seen in the last week.')}</div>;
+    return (
+      <div className="box empty">
+        {t('No new issues have been seen in the last week.')}
+      </div>
+    );
   },
 
   refresh() {
@@ -85,21 +99,30 @@ const NewIssues = React.createClass({
     return (
       <div>
         <div className="pull-right">
-          <a className="btn btn-sm btn-default" style={{marginLeft: 5}}
-             onClick={this.refresh}>
+          <a
+            className="btn btn-sm btn-default"
+            style={{marginLeft: 5}}
+            onClick={this.refresh}
+          >
             <span className="icon icon-refresh" />
           </a>
         </div>
         <h4>New this week</h4>
-        <IssueList endpoint={this.getEndpoint()} query={{
-          statsPeriod: this.props.statsPeriod,
-          per_page: this.props.pageSize,
-          status: 'unresolved',
-        }} pagination={false} renderEmpty={this.renderEmpty}
-           ref="issueList" {...this.props} />
+        <IssueList
+          endpoint={this.getEndpoint()}
+          query={{
+            statsPeriod: this.props.statsPeriod,
+            per_page: this.props.pageSize,
+            status: 'unresolved'
+          }}
+          pagination={false}
+          renderEmpty={this.renderEmpty}
+          ref="issueList"
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
 function ProjectSparkline(props) {
@@ -107,7 +130,10 @@ function ProjectSparkline(props) {
 
   return (
     <Sparklines data={values} width={100} height={32}>
-      <SparklinesLine {...props} style={{stroke: '#8f85d4', fill: 'none', strokeWidth: 3}}/>
+      <SparklinesLine
+        {...props}
+        style={{stroke: '#8f85d4', fill: 'none', strokeWidth: 3}}
+      />
     </Sparklines>
   );
 }
@@ -141,7 +167,7 @@ const ProjectList = React.createClass({
       }
     });
 
-    projects = sortArray(projects, (item) => {
+    projects = sortArray(projects, item => {
       return [!item.isBookmarked, item.teamName, item.name];
     });
 
@@ -151,32 +177,38 @@ const ProjectList = React.createClass({
 
     let bookmarkedProjects = projects.filter(p => p.isBookmarked);
     if (bookmarkedProjects.length < maxProjects) {
-      projects = bookmarkedProjects.concat(projects.slice(bookmarkedProjects.length, maxProjects));
+      projects = bookmarkedProjects.concat(
+        projects.slice(bookmarkedProjects.length, maxProjects)
+      );
     } else {
       projects = bookmarkedProjects;
     }
 
     return (
       <div className="organization-dashboard-projects">
-        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/teams/`}>View All</Link>
+        <Link className="btn-sidebar-header" to={`/organizations/${org.slug}/teams/`}>
+          View All
+        </Link>
         <h6 className="nav-header">Projects</h6>
         {bookmarkedProjects.length === 0 &&
           <div className="alert alert-info" style={{marginBottom: 10}}>
-            Bookmark your most used <Link to={`/organizations/${org.slug}/teams/`}>projects</Link> to have them appear here.
-          </div>
-        }
+            Bookmark your most used
+            {' '}
+            <Link to={`/organizations/${org.slug}/teams/`}>projects</Link>
+            {' '}
+            to have them appear here.
+          </div>}
         <ul className="nav nav-stacked">
-          {projects.map((project) => {
+          {projects.map(project => {
             return (
               <li key={project.id}>
                 <div className="pull-right sparkline">
-                  {project.stats &&
-                    <ProjectSparkline data={project.stats} />
-                  }
+                  {project.stats && <ProjectSparkline data={project.stats} />}
                 </div>
                 <Link to={`/${org.slug}/${project.slug}/`}>
                   <h4>
-                    {project.isBookmarked && <span className="bookmark icon-star-solid" />}
+                    {project.isBookmarked &&
+                      <span className="bookmark icon-star-solid" />}
                     {project.name}
                   </h4>
                   <h5>{project.teamName}</h5>
@@ -187,11 +219,10 @@ const ProjectList = React.createClass({
         </ul>
       </div>
     );
-  },
+  }
 });
 
 const Activity = React.createClass({
-
   getEndpoint() {
     return `/organizations/${this.props.params.orgId}/activity/`;
   },
@@ -204,26 +235,31 @@ const Activity = React.createClass({
     return (
       <div>
         <div className="pull-right">
-          <a className="btn btn-sm btn-default" style={{marginLeft: 5}}
-             onClick={this.refresh}>
+          <a
+            className="btn btn-sm btn-default"
+            style={{marginLeft: 5}}
+            onClick={this.refresh}
+          >
             <span className="icon icon-refresh" />
           </a>
         </div>
         <h4>Recent activity</h4>
-        <ActivityFeed ref="activityFeed" endpoint={this.getEndpoint()} query={{
-          per_page: 10,
-        }} pagination={false} {...this.props} />
+        <ActivityFeed
+          ref="activityFeed"
+          endpoint={this.getEndpoint()}
+          query={{
+            per_page: 10
+          }}
+          pagination={false}
+          {...this.props}
+        />
       </div>
     );
-  },
+  }
 });
 
-
 const OrganizationDashboard = React.createClass({
-  mixins: [
-    ApiMixin,
-    Reflux.listenTo(TeamStore, 'onTeamListChange'),
-  ],
+  mixins: [ApiMixin, Reflux.listenTo(TeamStore, 'onTeamListChange')],
 
   getDefaultProps() {
     return {
@@ -253,7 +289,6 @@ const OrganizationDashboard = React.createClass({
     GroupStore.reset();
   },
 
-
   onTeamListChange() {
     this.setState({
       teams: TeamStore.getAll()
@@ -270,14 +305,14 @@ const OrganizationDashboard = React.createClass({
             <Activity {...this.props} />
           </div>
           <div className="col-md-4">
-            <EventsPerHour {...this.props}/>
+            <EventsPerHour {...this.props} />
             <hr />
             <ProjectList {...this.props} teams={this.state.teams} />
           </div>
         </div>
       </OrganizationHomeContainer>
     );
-  },
+  }
 });
 
 export default OrganizationDashboard;
diff --git a/src/sentry/static/sentry/app/views/organizationDetails.jsx b/src/sentry/static/sentry/app/views/organizationDetails.jsx
index d4ac7ddef4..0cf744f853 100644
--- a/src/sentry/static/sentry/app/views/organizationDetails.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDetails.jsx
@@ -39,9 +39,7 @@ const OrganizationDetails = React.createClass({
     organization: PropTypes.Organization
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -63,8 +61,10 @@ const OrganizationDetails = React.createClass({
   },
 
   componentWillReceiveProps(nextProps) {
-    if (nextProps.params.orgId !== this.props.params.orgId ||
-        nextProps.location.state === 'refresh') {
+    if (
+      nextProps.params.orgId !== this.props.params.orgId ||
+      nextProps.location.state === 'refresh'
+    ) {
       this.remountComponent();
     }
   },
@@ -79,10 +79,10 @@ const OrganizationDetails = React.createClass({
 
   fetchData() {
     this.api.request(this.getOrganizationDetailsEndpoint(), {
-      success: (data) => {
+      success: data => {
         // Allow injection via getsentry et all
         let hooks = [];
-        HookStore.get('organization:header').forEach((cb) => {
+        HookStore.get('organization:header').forEach(cb => {
           hooks.push(cb(data));
         });
 
@@ -93,14 +93,17 @@ const OrganizationDetails = React.createClass({
           loading: false,
           error: false,
           errorType: null,
-          hooks: hooks,
+          hooks: hooks
         });
 
         TeamStore.loadInitialData(data.teams);
-        ProjectStore.loadInitialData(data.teams.reduce((out, team) => {
-          return out.concat(team.projects);
-        }, []));
-      }, error: (_, textStatus, errorThrown) => {
+        ProjectStore.loadInitialData(
+          data.teams.reduce((out, team) => {
+            return out.concat(team.projects);
+          }, [])
+        );
+      },
+      error: (_, textStatus, errorThrown) => {
         let errorType = null;
         switch (errorThrown) {
           case 'NOT FOUND':
@@ -111,7 +114,7 @@ const OrganizationDetails = React.createClass({
         this.setState({
           loading: false,
           error: true,
-          errorType: errorType,
+          errorType: errorType
         });
       }
     });
@@ -122,18 +125,17 @@ const OrganizationDetails = React.createClass({
   },
 
   getTitle() {
-    if (this.state.organization)
-      return this.state.organization.name;
+    if (this.state.organization) return this.state.organization.name;
     return 'Sentry';
   },
 
   render() {
     if (this.state.loading) {
-        return (
-          <LoadingIndicator triangle={true}>
-            {t('Loading data for your organization.')}
-          </LoadingIndicator>
-        );
+      return (
+        <LoadingIndicator triangle={true}>
+          {t('Loading data for your organization.')}
+        </LoadingIndicator>
+      );
     } else if (this.state.error) {
       switch (this.state.errorType) {
         case ERROR_TYPES.ORG_NOT_FOUND:
@@ -153,7 +155,7 @@ const OrganizationDetails = React.createClass({
       <DocumentTitle title={this.getTitle()}>
         <div className="app">
           {this.state.hooks}
-          <Sidebar/>
+          <Sidebar />
           {this.props.children}
           <Footer />
         </div>
diff --git a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
index 0fcbd33cb5..990d6803b5 100644
--- a/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRateLimits/index.jsx
@@ -10,7 +10,7 @@ import {t} from '../../locale';
 const AccountLimit = React.createClass({
   propTypes: {
     value: React.PropTypes.number,
-    onChange: React.PropTypes.func.isRequired,
+    onChange: React.PropTypes.func.isRequired
   },
 
   getRateLimitValues() {
@@ -32,18 +32,21 @@ const AccountLimit = React.createClass({
   render() {
     return (
       <RangeField
-          name="accountLimit"
-          min={0}
-          max={1000000}
-          value={this.props.value}
-          allowedValues={this.getRateLimitValues()}
-          help="The maximum number of events to accept across this entire organization."
-          placeholder="e.g. 500"
-          onChange={this.props.onChange}
-          inputClassName="col-md-3"
-          formatLabel={(value) => { return !value ? 'No Limit' : `${value.toLocaleString()} per hour`; }} />
+        name="accountLimit"
+        min={0}
+        max={1000000}
+        value={this.props.value}
+        allowedValues={this.getRateLimitValues()}
+        help="The maximum number of events to accept across this entire organization."
+        placeholder="e.g. 500"
+        onChange={this.props.onChange}
+        inputClassName="col-md-3"
+        formatLabel={value => {
+          return !value ? 'No Limit' : `${value.toLocaleString()} per hour`;
+        }}
+      />
     );
-  },
+  }
 });
 
 const RateLimitEditor = React.createClass({
@@ -63,19 +66,19 @@ const RateLimitEditor = React.createClass({
       savedProjectLimit: projectLimit,
       currentAccountLimit: accountLimit,
       savedAccountLimit: accountLimit,
-      saving: false,
+      saving: false
     };
   },
 
   onProjectLimitChange(value) {
     this.setState({
-      currentProjectLimit: value,
+      currentProjectLimit: value
     });
   },
 
   onAccountLimitChange(value) {
     this.setState({
-      currentAccountLimit: value,
+      currentAccountLimit: value
     });
   },
 
@@ -84,35 +87,38 @@ const RateLimitEditor = React.createClass({
 
     let loadingIndicator = IndicatorStore.add(t('Saving..'));
 
-    this.setState({
-      saving: true,
-      error: false,
-    }, () => {
-      this.api.request(`/organizations/${this.props.organization.slug}/`, {
-        method: 'PUT',
-        data: {
-          projectRateLimit: this.state.currentProjectLimit,
-          accountRateLimit: this.state.currentAccountLimit,
-        },
-        success: (data) => {
-          // TODO(dcramer): propagate this change correctly (how??)
-          IndicatorStore.remove(loadingIndicator);
-          this.props.organization.quota = data.quota;
-          this.setState({
-            saving: false,
-            savedProjectLimit: data.quota.projectLimit,
-            savedAccountLimit: data.quota.accountLimit,
-          });
-        },
-        error: () => {
-          this.setState({saving: false});
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-            duration: 3000
-          });
-        }
-      });
-    });
+    this.setState(
+      {
+        saving: true,
+        error: false
+      },
+      () => {
+        this.api.request(`/organizations/${this.props.organization.slug}/`, {
+          method: 'PUT',
+          data: {
+            projectRateLimit: this.state.currentProjectLimit,
+            accountRateLimit: this.state.currentAccountLimit
+          },
+          success: data => {
+            // TODO(dcramer): propagate this change correctly (how??)
+            IndicatorStore.remove(loadingIndicator);
+            this.props.organization.quota = data.quota;
+            this.setState({
+              saving: false,
+              savedProjectLimit: data.quota.projectLimit,
+              savedAccountLimit: data.quota.accountLimit
+            });
+          },
+          error: () => {
+            this.setState({saving: false});
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+              duration: 3000
+            });
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -121,44 +127,63 @@ const RateLimitEditor = React.createClass({
       savedProjectLimit,
       currentAccountLimit,
       savedAccountLimit,
-      saving,
+      saving
     } = this.state;
     let {maxRate, maxRateInterval} = this.props.organization.quota;
-    let canSave = (
-      savedProjectLimit !== currentProjectLimit ||
-      savedAccountLimit !== currentAccountLimit
-    ) && !saving;
+    let canSave =
+      (savedProjectLimit !== currentProjectLimit ||
+        savedAccountLimit !== currentAccountLimit) &&
+      !saving;
 
     return (
       <form onSubmit={this.onSubmit} className="ref-rate-limit-editor">
-        <p>Rate limits allow you to control how much data is stored for this organization. When a rate is exceeded the system will begin discarding data until the next interval.</p>
+        <p>
+          Rate limits allow you to control how much data is stored for this organization. When a rate is exceeded the system will begin discarding data until the next interval.
+        </p>
 
         <h5>Account Limit</h5>
 
-        {!maxRate ?
-          <AccountLimit value={currentAccountLimit} onChange={this.onAccountLimitChange} />
-        :
-          <p>Your account is limited to a maximum of {maxRate} events per {maxRateInterval} seconds.</p>
-        }
+        {!maxRate
+          ? <AccountLimit
+              value={currentAccountLimit}
+              onChange={this.onAccountLimitChange}
+            />
+          : <p>
+              Your account is limited to a maximum of
+              {' '}
+              {maxRate}
+              {' '}
+              events per
+              {' '}
+              {maxRateInterval}
+              {' '}
+              seconds.
+            </p>}
 
         <h5>Per-Project Limit</h5>
 
         <RangeField
-            name="projectLimit"
-            value={savedProjectLimit || 100}
-            onChange={this.onProjectLimitChange}
-            step={5}
-            min={50}
-            max={100}
-            formatLabel={(value) => { return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%'; }} />
-
-        <div className="help-block">{t('The maximum percentage of your account quota an individual project can consume.')}</div>
+          name="projectLimit"
+          value={savedProjectLimit || 100}
+          onChange={this.onProjectLimitChange}
+          step={5}
+          min={50}
+          max={100}
+          formatLabel={value => {
+            return value !== 100 ? `${value}%` : 'No Limit &mdash; 100%';
+          }}
+        />
+
+        <div className="help-block">
+          {t(
+            'The maximum percentage of your account quota an individual project can consume.'
+          )}
+        </div>
 
         <div className="form-actions" style={{marginTop: 25}}>
-          <button
-            type="submit"
-            className="btn btn-primary"
-            disabled={!canSave}>{t('Apply Changes')}</button>
+          <button type="submit" className="btn btn-primary" disabled={!canSave}>
+            {t('Apply Changes')}
+          </button>
         </div>
       </form>
     );
@@ -169,8 +194,7 @@ const OrganizationRateLimits = React.createClass({
   mixins: [OrganizationState],
 
   render() {
-    if (!this.context.organization)
-      return null;
+    if (!this.context.organization) return null;
 
     let org = this.context.organization;
 
@@ -186,8 +210,7 @@ const OrganizationRateLimits = React.createClass({
         </div>
       </OrganizationHomeContainer>
     );
-  },
+  }
 });
 
-
 export default OrganizationRateLimits;
diff --git a/src/sentry/static/sentry/app/views/organizationRepositories.jsx b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
index fd2419efb3..153aa7640c 100644
--- a/src/sentry/static/sentry/app/views/organizationRepositories.jsx
+++ b/src/sentry/static/sentry/app/views/organizationRepositories.jsx
@@ -13,7 +13,7 @@ import {t, tct} from '../locale';
 import {sortArray} from '../utils';
 
 const UNKNOWN_ERROR = {
-  error_type: 'unknown',
+  error_type: 'unknown'
 };
 
 class AddRepositoryLink extends PluginComponentBase {
@@ -26,13 +26,12 @@ class AddRepositoryLink extends PluginComponentBase {
       loading: true,
       state: FormState.LOADING,
       error: {},
-      formData: {},
+      formData: {}
     });
 
-    ['onOpen',
-     'onCancel',
-     'formSubmit',
-     'changeField'].map(method => this[method] = this[method].bind(this));
+    ['onOpen', 'onCancel', 'formSubmit', 'changeField'].map(
+      method => this[method] = this[method].bind(this)
+    );
   }
 
   onOpen() {
@@ -52,28 +51,31 @@ class AddRepositoryLink extends PluginComponentBase {
 
   onSubmit() {
     // TODO(dcramer): set form saving state
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      this.api.request(`/organizations/${this.props.orgId}/repos/`, {
-        data: {
-          provider: this.props.provider.id,
-          ...this.state.formData,
-        },
-        method: 'POST',
-        success: this.onSaveSuccess.bind(this, data => {
-          this.setState({isModalOpen: false});
-          this.props.onSuccess(data);
-        }),
-        error: this.onSaveError.bind(this, error => {
-          this.setState({
-            error: (error.responseJSON || UNKNOWN_ERROR) || UNKNOWN_ERROR,
-            state: FormState.error,
-          });
-        }),
-        complete: this.onSaveComplete
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        this.api.request(`/organizations/${this.props.orgId}/repos/`, {
+          data: {
+            provider: this.props.provider.id,
+            ...this.state.formData
+          },
+          method: 'POST',
+          success: this.onSaveSuccess.bind(this, data => {
+            this.setState({isModalOpen: false});
+            this.props.onSuccess(data);
+          }),
+          error: this.onSaveError.bind(this, error => {
+            this.setState({
+              error: error.responseJSON || UNKNOWN_ERROR || UNKNOWN_ERROR,
+              state: FormState.error
+            });
+          }),
+          complete: this.onSaveComplete
+        });
+      }
+    );
   }
 
   changeField(name, value) {
@@ -90,9 +92,8 @@ class AddRepositoryLink extends PluginComponentBase {
         {errors.__all__ &&
           <div className="alert alert-error alert-block" key="_errors">
             <p>{errors.__all__}</p>
-          </div>
-        }
-        {provider.config.map((field) => {
+          </div>}
+        {provider.config.map(field => {
           return (
             <div key={field.name}>
               {this.renderField({
@@ -120,8 +121,9 @@ class AddRepositoryLink extends PluginComponentBase {
       return (
         <div>
           <div className="alert alert-warning m-b-1">
-            {'You need to associate an identity with ' + error.title +
-             ' before you can create issues with this service.'}
+            {'You need to associate an identity with ' +
+              error.title +
+              ' before you can create issues with this service.'}
           </div>
           <a className="btn btn-primary" href={authUrl}>
             Associate Identity
@@ -132,13 +134,14 @@ class AddRepositoryLink extends PluginComponentBase {
       return (
         <div className="alert alert-error alert-block">
           <p>
-            {error.message ?
-              error.message
-            :
-              tct('An unknown error occurred. Need help with this? [link:Contact support]', {
-                link: <a href="https://sentry.io/support/"/>
-              })
-            }
+            {error.message
+              ? error.message
+              : tct(
+                  'An unknown error occurred. Need help with this? [link:Contact support]',
+                  {
+                    link: <a href="https://sentry.io/support/" />
+                  }
+                )}
           </p>
         </div>
       );
@@ -157,12 +160,22 @@ class AddRepositoryLink extends PluginComponentBase {
           {this.renderBody()}
         </div>
         <div className="modal-footer">
-          <button type="button" className="btn btn-default"
-                  onClick={this.onCancel}
-                  disabled={state === FormState.SAVING}>{t('Cancel')}</button>
-          <button type="button" className="btn btn-primary"
-                  onClick={this.onSubmit}
-                  disabled={state === FormState.SAVING}>{t('Save Changes')}</button>
+          <button
+            type="button"
+            className="btn btn-default"
+            onClick={this.onCancel}
+            disabled={state === FormState.SAVING}
+          >
+            {t('Cancel')}
+          </button>
+          <button
+            type="button"
+            className="btn btn-primary"
+            onClick={this.onSubmit}
+            disabled={state === FormState.SAVING}
+          >
+            {t('Save Changes')}
+          </button>
         </div>
       </Modal>
     );
@@ -180,20 +193,18 @@ class AddRepositoryLink extends PluginComponentBase {
 }
 
 AddRepositoryLink.propTypes = {
-  provider: React.PropTypes.object.isRequired,
+  provider: React.PropTypes.object.isRequired
 };
 
 const OrganizationRepositories = React.createClass({
-  mixins: [
-    ApiMixin,
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
       loading: true,
       error: false,
       itemList: null,
-      repoConfig: null,
+      repoConfig: null
     };
   },
 
@@ -204,52 +215,51 @@ const OrganizationRepositories = React.createClass({
   fetchData() {
     this.api.request(`/organizations/${this.props.params.orgId}/repos/?status=`, {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           itemList: data,
-          loading: !this.state.repoConfig,
+          loading: !this.state.repoConfig
         });
       },
       error: () => {
         this.setState({
           loading: !this.state.repoConfig,
-          error: true,
+          error: true
         });
       }
     });
     this.api.request(`/organizations/${this.props.params.orgId}/config/repos/`, {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           repoConfig: data,
-          loading: !this.state.itemList,
+          loading: !this.state.itemList
         });
       },
       error: () => {
         this.setState({
           loading: !this.state.itemList,
-          error: true,
+          error: true
         });
       }
     });
   },
 
   deleteRepo(repo) {
-    if (!confirm(t('Are you sure you want to remove this repository?')))
-      return;
+    if (!confirm(t('Are you sure you want to remove this repository?'))) return;
 
     let indicator = IndicatorStore.add(t('Saving changes..'));
     this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
       method: 'DELETE',
-      success: (data) => {
+      success: data => {
         let itemList = this.state.itemList;
-        itemList.forEach((item) => {
+        itemList.forEach(item => {
           if (item.id === data.id) {
             item.status = data.status;
           }
         });
         this.setState({
-          itemList: itemList,
+          itemList: itemList
         });
       },
       error: () => {
@@ -268,15 +278,15 @@ const OrganizationRepositories = React.createClass({
     this.api.request(`/organizations/${this.props.params.orgId}/repos/${repo.id}/`, {
       method: 'PUT',
       data: {status: 'visible'},
-      success: (data) => {
+      success: data => {
         let itemList = this.state.itemList;
-        itemList.forEach((item) => {
+        itemList.forEach(item => {
           if (item.id === data.id) {
             item.status = data.status;
           }
         });
         this.setState({
-          itemList: itemList,
+          itemList: itemList
         });
       },
       error: () => {
@@ -294,7 +304,7 @@ const OrganizationRepositories = React.createClass({
     let itemList = this.state.itemList;
     itemList.push(repo);
     this.setState({
-      itemList: sortArray(itemList, item => item.name),
+      itemList: sortArray(itemList, item => item.name)
     });
   },
 
@@ -312,8 +322,7 @@ const OrganizationRepositories = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
+    if (this.state.loading) return <LoadingIndicator />;
 
     let orgId = this.props.params.orgId;
     let itemList = this.state.itemList;
@@ -322,13 +331,18 @@ const OrganizationRepositories = React.createClass({
       <OrganizationHomeContainer>
         <div className="pull-right">
           <DropdownLink
-              topLevelClasses="anchor-right"
-              className="btn btn-primary btn-sm"
-              title={t('Add Repository')}>
-            {this.state.repoConfig.providers.map((provider) => {
+            topLevelClasses="anchor-right"
+            className="btn btn-primary btn-sm"
+            title={t('Add Repository')}
+          >
+            {this.state.repoConfig.providers.map(provider => {
               return (
                 <MenuItem noAnchor={true} key={provider.id}>
-                  <AddRepositoryLink provider={provider} orgId={orgId} onSuccess={this.onAddRepo} />
+                  <AddRepositoryLink
+                    provider={provider}
+                    orgId={orgId}
+                    onSuccess={this.onAddRepo}
+                  />
                 </MenuItem>
               );
             })}
@@ -337,65 +351,82 @@ const OrganizationRepositories = React.createClass({
         <h3 className="m-b-2">{t('Repositories')}</h3>
         {itemList.length > 0 &&
           <div className="m-b-2">
-            <p>{t('Connecting a repository allows Sentry to capture commit data via webhooks. ' +
-               'This enables features like suggested assignees and resolving issues via commit message. ' +
-               'Once you\'ve connected a repository, you can associate commits with releases via the API.')}
-               &nbsp;
-               {tct('See our [link:documentation] for more details.', {
-                 link: <a href="https://docs.sentry.io/learn/releases/"/>
-               })}
+            <p>
+              {t(
+                'Connecting a repository allows Sentry to capture commit data via webhooks. ' +
+                  'This enables features like suggested assignees and resolving issues via commit message. ' +
+                  'Once you\'ve connected a repository, you can associate commits with releases via the API.'
+              )}
+              &nbsp;
+              {tct('See our [link:documentation] for more details.', {
+                link: <a href="https://docs.sentry.io/learn/releases/" />
+              })}
             </p>
           </div>}
-        {itemList.length > 0 ?
-          <div className="panel panel-default">
-            <table className="table">
-              <tbody>
-                {itemList.map((repo) => {
-                  return (
-                    <tr key={repo.id}>
-                      <td>
-                        <strong>{repo.name}</strong>
-                        {repo.status !== 'visible' &&
-                          <small> &mdash; {this.getStatusLabel(repo)}</small>
-                        }
-                        {repo.status === 'pending_deletion' &&
-                          <small> (<a onClick={this.cancelDelete.bind(this, repo)}>{t('Cancel')}</a>)</small>
-                        }<br />
-                        <small>{repo.provider.name}</small>
-                        {repo.url &&
-                          <small> &mdash; <a href={repo.url}>{repo.url}</a></small>
-                        }
-                      </td>
-                      <td style={{width: 60}}>
-                        {repo.status === 'visible' ?
-                          <button onClick={this.deleteRepo.bind(this, repo)}
-                                  className="btn btn-default btn-xs">
-                            <span className="icon icon-trash" />
-                          </button>
-                        :
-                          <button onClick={this.deleteRepo.bind(this, repo)}
-                                  disabled={true}
-                                  className="btn btn-default btn-xs btn-disabled">
-                            <span className="icon icon-trash" />
-                          </button>
-                        }
-                      </td>
-                    </tr>
-                  );
-                })}
-              </tbody>
-            </table>
-          </div>
-          :
-          <div className="well blankslate align-center p-x-2 p-y-1">
-            <div className="icon icon-lg icon-git-commit" />
-            <h3>{t('Sentry is better with commit data')}</h3>
-            <p>{t('Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.')}</p>
-            <p className="m-b-1">
-              <a className="btn btn-default" href="https://docs.sentry.io/learn/releases/">Learn more</a>
-            </p>
-          </div>
-        }
+        {itemList.length > 0
+          ? <div className="panel panel-default">
+              <table className="table">
+                <tbody>
+                  {itemList.map(repo => {
+                    return (
+                      <tr key={repo.id}>
+                        <td>
+                          <strong>{repo.name}</strong>
+                          {repo.status !== 'visible' &&
+                            <small> — {this.getStatusLabel(repo)}</small>}
+                          {repo.status === 'pending_deletion' &&
+                            <small>
+                              {' '}
+                              (
+                              <a onClick={this.cancelDelete.bind(this, repo)}>
+                                {t('Cancel')}
+                              </a>
+                              )
+                            </small>}
+                          <br />
+                          <small>{repo.provider.name}</small>
+                          {repo.url &&
+                            <small> — <a href={repo.url}>{repo.url}</a></small>}
+                        </td>
+                        <td style={{width: 60}}>
+                          {repo.status === 'visible'
+                            ? <button
+                                onClick={this.deleteRepo.bind(this, repo)}
+                                className="btn btn-default btn-xs"
+                              >
+                                <span className="icon icon-trash" />
+                              </button>
+                            : <button
+                                onClick={this.deleteRepo.bind(this, repo)}
+                                disabled={true}
+                                className="btn btn-default btn-xs btn-disabled"
+                              >
+                                <span className="icon icon-trash" />
+                              </button>}
+                        </td>
+                      </tr>
+                    );
+                  })}
+                </tbody>
+              </table>
+            </div>
+          : <div className="well blankslate align-center p-x-2 p-y-1">
+              <div className="icon icon-lg icon-git-commit" />
+              <h3>{t('Sentry is better with commit data')}</h3>
+              <p>
+                {t(
+                  'Adding one or more repositories will enable enhanced releases and the ability to resolve Sentry Issues via git message.'
+                )}
+              </p>
+              <p className="m-b-1">
+                <a
+                  className="btn btn-default"
+                  href="https://docs.sentry.io/learn/releases/"
+                >
+                  Learn more
+                </a>
+              </p>
+            </div>}
       </OrganizationHomeContainer>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationSettings.jsx b/src/sentry/static/sentry/app/views/organizationSettings.jsx
index 950922fa28..74683a66fe 100644
--- a/src/sentry/static/sentry/app/views/organizationSettings.jsx
+++ b/src/sentry/static/sentry/app/views/organizationSettings.jsx
@@ -15,7 +15,6 @@ import OrganizationStore from '../stores/organizationStore';
 import {t} from '../locale';
 import {extractMultilineFields} from '../utils';
 
-
 const OrganizationSettingsForm = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
@@ -30,7 +29,7 @@ const OrganizationSettingsForm = React.createClass({
     return {
       formData: this.buildFormData(this.props.initialData),
       errors: {},
-      hasChanges: false,
+      hasChanges: false
     };
   },
 
@@ -46,7 +45,7 @@ const OrganizationSettingsForm = React.createClass({
       dataScrubberDefaults: data.dataScrubberDefaults,
       scrubIPAddresses: data.scrubIPAddresses,
       safeFields: data.safeFields.join('\n'),
-      sensitiveFields: data.sensitiveFields.join('\n'),
+      sensitiveFields: data.sensitiveFields.join('\n')
     };
     if (this.props.access.has('org:admin')) {
       result.defaultRole = data.defaultRole;
@@ -61,7 +60,7 @@ const OrganizationSettingsForm = React.createClass({
     };
     this.setState({
       hasChanges: true,
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -72,43 +71,46 @@ const OrganizationSettingsForm = React.createClass({
       return;
     }
 
-    this.setState({
-      state: FormState.SAVING,
-      hasChanges: false,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId} = this.props;
-      let formData = this.state.formData;
-      this.api.request(`/organizations/${orgId}/`, {
-        method: 'PUT',
-        data: {
-          ...formData,
-          safeFields: extractMultilineFields(formData.safeFields),
-          sensitiveFields: extractMultilineFields(formData.sensitiveFields),
-        },
-        success: (data) => {
-          this.props.onSave(data);
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Changes saved.'), 'success', {
-            duration: 1500
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-          IndicatorStore.remove(loadingIndicator);
-          IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
-            duration: 3000
-          });
-        },
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING,
+        hasChanges: false
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId} = this.props;
+        let formData = this.state.formData;
+        this.api.request(`/organizations/${orgId}/`, {
+          method: 'PUT',
+          data: {
+            ...formData,
+            safeFields: extractMultilineFields(formData.safeFields),
+            sensitiveFields: extractMultilineFields(formData.sensitiveFields)
+          },
+          success: data => {
+            this.props.onSave(data);
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Changes saved.'), 'success', {
+              duration: 1500
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+            IndicatorStore.remove(loadingIndicator);
+            IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error', {
+              duration: 3000
+            });
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -118,15 +120,25 @@ const OrganizationSettingsForm = React.createClass({
 
     let sensitiveFieldsHelp = (
       <span>
-        {t('Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.')}<br />
-        <strong>{t('Note: These fields will be used in addition to project specific fields.')}</strong>
+        {t(
+          'Additional field names to match against when scrubbing data for all projects. Separate multiple entries with a newline.'
+        )}
+        <br />
+        <strong>
+          {t('Note: These fields will be used in addition to project specific fields.')}
+        </strong>
       </span>
     );
 
     let safeFieldsHelp = (
       <span>
-        {t('Field names which data scrubbers should ignore. Separate multiple entries with a newline.')}<br />
-        <strong>{t('Note: These fields will be used in addition to project specific fields.')}</strong>
+        {t(
+          'Field names which data scrubbers should ignore. Separate multiple entries with a newline.'
+        )}
+        <br />
+        <strong>
+          {t('Note: These fields will be used in addition to project specific fields.')}
+        </strong>
       </span>
     );
 
@@ -134,9 +146,10 @@ const OrganizationSettingsForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked ref-organization-settings">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <legend style={{marginTop: 0}}>{t('General')}</legend>
 
@@ -148,7 +161,8 @@ const OrganizationSettingsForm = React.createClass({
             value={formData.name}
             required={true}
             error={errors.name}
-            onChange={this.onFieldChange.bind(this, 'name')} />
+            onChange={this.onFieldChange.bind(this, 'name')}
+          />
           <TextField
             key="slug"
             name="slug"
@@ -157,7 +171,8 @@ const OrganizationSettingsForm = React.createClass({
             help={t('A unique ID used to identify this organization.')}
             required={true}
             error={errors.slug}
-            onChange={this.onFieldChange.bind(this, 'slug')} />
+            onChange={this.onFieldChange.bind(this, 'slug')}
+          />
           <BooleanField
             key="isEarlyAdopter"
             name="isEarlyAdopter"
@@ -166,7 +181,8 @@ const OrganizationSettingsForm = React.createClass({
             help={t('Opt-in to new features before they\'re released to the public.')}
             required={false}
             error={errors.isEarlyAdopter}
-            onChange={this.onFieldChange.bind(this, 'isEarlyAdopter')} />
+            onChange={this.onFieldChange.bind(this, 'isEarlyAdopter')}
+          />
 
           <legend>{t('Membership')}</legend>
 
@@ -180,8 +196,8 @@ const OrganizationSettingsForm = React.createClass({
               help={t('The default role new members will receive.')}
               required={true}
               error={errors.defaultRole}
-              onChange={this.onFieldChange.bind(this, 'defaultRole')} />
-          }
+              onChange={this.onFieldChange.bind(this, 'defaultRole')}
+            />}
 
           <BooleanField
             key="openMembership"
@@ -191,7 +207,8 @@ const OrganizationSettingsForm = React.createClass({
             help={t('Allow organization members to freely join or leave any team.')}
             required={true}
             error={errors.openMembership}
-            onChange={this.onFieldChange.bind(this, 'openMembership')} />
+            onChange={this.onFieldChange.bind(this, 'openMembership')}
+          />
 
           <legend>{t('Security & Privacy')}</legend>
 
@@ -203,17 +220,21 @@ const OrganizationSettingsForm = React.createClass({
             help={t('Enable sharing of limited details on issues to anonymous users.')}
             required={false}
             error={errors.allowSharedIssues}
-            onChange={this.onFieldChange.bind(this, 'allowSharedIssues')} />
+            onChange={this.onFieldChange.bind(this, 'allowSharedIssues')}
+          />
 
           <BooleanField
             key="enhancedPrivacy"
             name="enhancedPrivacy"
             label={t('Enhanced Privacy')}
             value={formData.enhancedPrivacy}
-            help={t('Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.')}
+            help={t(
+              'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'
+            )}
             required={false}
             error={errors.enhancedPrivacy}
-            onChange={this.onFieldChange.bind(this, 'enhancedPrivacy')} />
+            onChange={this.onFieldChange.bind(this, 'enhancedPrivacy')}
+          />
 
           <BooleanField
             key="dataScrubber"
@@ -223,17 +244,21 @@ const OrganizationSettingsForm = React.createClass({
             help={t('Require server-side data scrubbing be enabled for all projects.')}
             required={false}
             error={errors.dataScrubber}
-            onChange={this.onFieldChange.bind(this, 'dataScrubber')} />
+            onChange={this.onFieldChange.bind(this, 'dataScrubber')}
+          />
 
           <BooleanField
             key="dataScrubberDefaults"
             name="dataScrubberDefaults"
             label={t('Require Using Default Scrubbers')}
             value={formData.dataScrubberDefaults}
-            help={t('Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.')}
+            help={t(
+              'Require the default scrubbers be applied to prevent things like passwords and credit cards from being stored for all projects.'
+            )}
             required={true}
             error={errors.dataScrubberDefaults}
-            onChange={this.onFieldChange.bind(this, 'dataScrubberDefaults')} />
+            onChange={this.onFieldChange.bind(this, 'dataScrubberDefaults')}
+          />
 
           <TextareaField
             key="sensitiveFields"
@@ -244,7 +269,8 @@ const OrganizationSettingsForm = React.createClass({
             placeholder={t('e.g. email')}
             required={false}
             error={errors.sensitiveFields}
-            onChange={this.onFieldChange.bind(this, 'sensitiveFields')} />
+            onChange={this.onFieldChange.bind(this, 'sensitiveFields')}
+          />
 
           <TextareaField
             key="safeFields"
@@ -255,21 +281,30 @@ const OrganizationSettingsForm = React.createClass({
             placeholder={t('e.g. email')}
             required={false}
             error={errors.safeFields}
-            onChange={this.onFieldChange.bind(this, 'safeFields')} />
+            onChange={this.onFieldChange.bind(this, 'safeFields')}
+          />
 
           <BooleanField
             key="scrubIPAddresses"
             name="scrubIPAddresses"
             label={t('Prevent Storing of IP Addresses')}
             value={formData.scrubIPAddresses}
-            help={t('Preventing IP addresses from being stored for new events on all projects.')}
+            help={t(
+              'Preventing IP addresses from being stored for new events on all projects.'
+            )}
             required={false}
             error={errors.scrubIPAddresses}
-            onChange={this.onFieldChange.bind(this, 'scrubIPAddresses')} />
+            onChange={this.onFieldChange.bind(this, 'scrubIPAddresses')}
+          />
         </fieldset>
         <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary"
-                  disabled={isSaving || !this.state.hasChanges}>{t('Save Changes')}</button>
+          <button
+            type="submit"
+            className="btn btn-primary"
+            disabled={isSaving || !this.state.hasChanges}
+          >
+            {t('Save Changes')}
+          </button>
         </fieldset>
       </form>
     );
@@ -277,15 +312,13 @@ const OrganizationSettingsForm = React.createClass({
 });
 
 const OrganizationSettings = React.createClass({
-  mixins: [
-    ApiMixin,
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
       loading: true,
       error: false,
-      data: null,
+      data: null
     };
   },
 
@@ -296,16 +329,16 @@ const OrganizationSettings = React.createClass({
   fetchData() {
     this.api.request(`/organizations/${this.props.params.orgId}/`, {
       method: 'GET',
-      success: (data) => {
+      success: data => {
         this.setState({
           data: data,
-          loading: false,
+          loading: false
         });
       },
       error: () => {
         this.setState({
           loading: false,
-          error: true,
+          error: true
         });
       }
     });
@@ -318,8 +351,7 @@ const OrganizationSettings = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
+    if (this.state.loading) return <LoadingIndicator />;
 
     let data = this.state.data;
     let orgId = this.props.params.orgId;
@@ -334,24 +366,31 @@ const OrganizationSettings = React.createClass({
               initialData={data}
               orgId={orgId}
               access={access}
-              onSave={this.onSave} />
+              onSave={this.onSave}
+            />
           </div>
         </div>
 
-        {access.has('org:admin') && !data.isDefault &&
+        {access.has('org:admin') &&
+          !data.isDefault &&
           <div className="box">
             <div className="box-header">
               <h3>{t('Remove Organization')}</h3>
             </div>
             <div className="box-content with-padding">
-              <p>{t('Removing this organization will delete all data including projects and their associated events.')}</p>
+              <p>
+                {t(
+                  'Removing this organization will delete all data including projects and their associated events.'
+                )}
+              </p>
 
               <fieldset className="form-actions">
-                <a href={`/organizations/${orgId}/remove/`} className="btn btn-danger">{t('Remove Organization')}</a>
+                <a href={`/organizations/${orgId}/remove/`} className="btn btn-danger">
+                  {t('Remove Organization')}
+                </a>
               </fieldset>
             </div>
-          </div>
-        }
+          </div>}
       </OrganizationHomeContainer>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationStats/index.jsx b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
index f3391a9afc..e48b88e16c 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/index.jsx
@@ -12,10 +12,7 @@ import {t} from '../../locale';
 import {intcomma} from '../../utils';
 
 const OrganizationStats = React.createClass({
-  mixins: [
-    ApiMixin,
-    OrganizationState
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     let until = Math.floor(new Date().getTime() / 1000);
@@ -71,7 +68,7 @@ const OrganizationStats = React.createClass({
 
     let statEndpoint = this.getOrganizationStatsEndpoint();
 
-    $.each(this.state.rawOrgData, (statName) => {
+    $.each(this.state.rawOrgData, statName => {
       this.api.request(statEndpoint, {
         query: {
           since: this.state.querySince,
@@ -79,7 +76,7 @@ const OrganizationStats = React.createClass({
           resolution: '1h',
           stat: statName
         },
-        success: (data) => {
+        success: data => {
           this.state.rawOrgData[statName] = data;
           this.state.statsRequestsPending -= 1;
           this.setState({
@@ -95,7 +92,7 @@ const OrganizationStats = React.createClass({
       });
     });
 
-    $.each(this.state.rawProjectData, (statName) => {
+    $.each(this.state.rawProjectData, statName => {
       this.api.request(statEndpoint, {
         query: {
           since: this.state.querySince,
@@ -103,7 +100,7 @@ const OrganizationStats = React.createClass({
           stat: statName,
           group: 'project'
         },
-        success: (data) => {
+        success: data => {
           this.state.rawProjectData[statName] = data;
           this.state.projectsRequestsPending -= 1;
           this.setState({
@@ -120,9 +117,9 @@ const OrganizationStats = React.createClass({
     });
 
     this.api.request(this.getOrganizationProjectsEndpoint(), {
-      success: (data) => {
+      success: data => {
         let projectMap = {};
-        data.forEach((project) => {
+        data.forEach(project => {
           projectMap[project.id] = project;
         });
 
@@ -154,7 +151,7 @@ const OrganizationStats = React.createClass({
     let oReceived = 0;
     let oRejected = 0;
     let oBlacklisted = 0;
-    let orgPoints = [];  // accepted, rejected, blacklisted
+    let orgPoints = []; // accepted, rejected, blacklisted
     let aReceived = [0, 0]; // received, points
     let rawOrgData = this.state.rawOrgData;
     $.each(rawOrgData.received, (idx, point) => {
@@ -164,11 +161,7 @@ const OrganizationStats = React.createClass({
       let dAccepted = Math.max(0, dReceived - dRejected - dBlacklisted);
       orgPoints.push({
         x: point[0],
-        y: [
-          dAccepted,
-          dRejected,
-          dBlacklisted
-        ]
+        y: [dAccepted, dRejected, dBlacklisted]
       });
       oReceived += dReceived;
       oRejected += dRejected;
@@ -185,7 +178,7 @@ const OrganizationStats = React.createClass({
         rejected: oRejected,
         blacklisted: oBlacklisted,
         accepted: Math.max(0, oReceived - oRejected - oBlacklisted),
-        avgRate: (aReceived[1] ? parseInt((aReceived[0] / aReceived[1]) / 60, 10) : 0)
+        avgRate: aReceived[1] ? parseInt(aReceived[0] / aReceived[1] / 60, 10) : 0
       },
       statsLoading: false
     });
@@ -231,8 +224,8 @@ const OrganizationStats = React.createClass({
 
     return (
       '<div style="width:150px">' +
-        `<div class="time-label">${timeLabel}</div>` +
-        `<div class="value-label">${value}</div>` +
+      `<div class="time-label">${timeLabel}</div>` +
+      `<div class="value-label">${value}</div>` +
       '</div>'
     );
   },
@@ -243,35 +236,37 @@ const OrganizationStats = React.createClass({
         <h3>{t('Stats')}</h3>
         <div className="row">
           <div className="col-md-9">
-            <p>{t(`The chart below reflects events the system has received
+            <p>
+              {t(
+                `The chart below reflects events the system has received
             across your entire organization. Events are broken down into
             three categories: Accepted, Rate Limited, and Filtered. Rate
             Limited events are entries that the system threw away due to quotas
             being hit, and Filtered events are events that were blocked
-            due to your inbound data filter rules.`)}</p>
+            due to your inbound data filter rules.`
+              )}
+            </p>
           </div>
           {!this.state.statsLoading &&
             <div className="col-md-3 stats-column">
               <h6 className="nav-header">{t('Events per minute')}</h6>
               <p className="count">{this.state.orgTotal.avgRate}</p>
-            </div>
-          }
+            </div>}
         </div>
         <div className="organization-stats">
-            {this.state.statsLoading ?
-              <LoadingIndicator />
-            : (this.state.statsError ?
-              <LoadingError onRetry={this.fetchData} />
-            :
-              <div className="bar-chart">
-                <StackedBarChart
-                  points={this.state.orgStats}
-                  height={150}
-                  barClasses={['accepted', 'rate-limited', 'black-listed']}
-                  className="sparkline"
-                  tooltip={this.renderTooltip} />
-              </div>
-            )}
+          {this.state.statsLoading
+            ? <LoadingIndicator />
+            : this.state.statsError
+                ? <LoadingError onRetry={this.fetchData} />
+                : <div className="bar-chart">
+                    <StackedBarChart
+                      points={this.state.orgStats}
+                      height={150}
+                      barClasses={['accepted', 'rate-limited', 'black-listed']}
+                      className="sparkline"
+                      tooltip={this.renderTooltip}
+                    />
+                  </div>}
         </div>
 
         <div className="box">
@@ -279,17 +274,16 @@ const OrganizationStats = React.createClass({
             <h3>{t('Events by Project')}</h3>
           </div>
           <div className="box-content">
-            {this.state.statsLoading || this.state.projectsLoading ?
-              <LoadingIndicator />
-            : (this.state.projectsError ?
-              <LoadingError onRetry={this.fetchData} />
-            :
-              <ProjectTable
-                  projectTotals={this.state.projectTotals}
-                  orgTotal={this.state.orgTotal}
-                  organization={this.getOrganization()}
-                  projectMap={this.state.projectMap} />
-            )}
+            {this.state.statsLoading || this.state.projectsLoading
+              ? <LoadingIndicator />
+              : this.state.projectsError
+                  ? <LoadingError onRetry={this.fetchData} />
+                  : <ProjectTable
+                      projectTotals={this.state.projectTotals}
+                      orgTotal={this.state.orgTotal}
+                      organization={this.getOrganization()}
+                      projectMap={this.state.projectMap}
+                    />}
           </div>
         </div>
       </OrganizationHomeContainer>
diff --git a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
index 8c3e98bf0c..e264405ec9 100644
--- a/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
+++ b/src/sentry/static/sentry/app/views/organizationStats/projectTable.jsx
@@ -31,7 +31,7 @@ const ProjectTable = React.createClass({
     let org = this.props.organization;
 
     if (!projectTotals) {
-      return <div/>;
+      return <div />;
     }
 
     // Sort based on # events received in desc order
@@ -45,34 +45,36 @@ const ProjectTable = React.createClass({
           <tr>
             <th>{t('Project')}</th>
             <th className="align-right">{t('Accepted')}</th>
-            <th className="align-right">{t('Dropped')}<br/>{t('(Rate Limit)')}</th>
-            <th className="align-right">{t('Dropped')}<br/>{t('(Filters)')}</th>
+            <th className="align-right">{t('Dropped')}<br />{t('(Rate Limit)')}</th>
+            <th className="align-right">{t('Dropped')}<br />{t('(Filters)')}</th>
             <th className="align-right">{t('Total')}</th>
           </tr>
         </thead>
         <tbody>
-          {projectTotals.map((item) => {
+          {projectTotals.map(item => {
             let project = projectMap[item.id];
 
             return (
               <tr key={item.id}>
                 <td>
-                  <Link to={`/${org.slug}/${project.slug}/`}>{project.team.name} / {project.name}</Link>
+                  <Link to={`/${org.slug}/${project.slug}/`}>
+                    {project.team.name} / {project.name}
+                  </Link>
                 </td>
                 <td className="align-right">
-                  <Count value={item.accepted} /><br/>
+                  <Count value={item.accepted} /><br />
                   <small>{getPercent(item.accepted, orgTotal.accepted)}</small>
                 </td>
                 <td className="align-right">
-                  <Count value={item.rejected} /><br/>
+                  <Count value={item.rejected} /><br />
                   <small>{getPercent(item.rejected, orgTotal.rejected)}</small>
                 </td>
                 <td className="align-right">
-                  <Count value={item.blacklisted} /><br/>
+                  <Count value={item.blacklisted} /><br />
                   <small>{getPercent(item.blacklisted, orgTotal.blacklisted)}</small>
                 </td>
                 <td className="align-right">
-                  <Count value={item.received} /><br/>
+                  <Count value={item.received} /><br />
                   <small>{getPercent(item.received, orgTotal.received)}</small>
                 </td>
               </tr>
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
index ea6849fa9d..aabf020094 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsList.jsx
@@ -22,7 +22,8 @@ const AllTeamsList = React.createClass({
           team={team}
           organization={organization}
           openMembership={openMembership}
-          key={team.slug} />
+          key={team.slug}
+        />
       );
     });
 
@@ -38,10 +39,13 @@ const AllTeamsList = React.createClass({
       );
     }
 
-    return tct('You don\'t have any teams for this organization yet. Get started by [link:creating your first team].', {
-      root: <p />,
-      link: <a href={`/organizations/${organization.slug}/teams/new/`} />
-    });
+    return tct(
+      'You don\'t have any teams for this organization yet. Get started by [link:creating your first team].',
+      {
+        root: <p />,
+        link: <a href={`/organizations/${organization.slug}/teams/new/`} />
+      }
+    );
   }
 });
 
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
index 7de0b71f58..788e1f5205 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/allTeamsRow.jsx
@@ -15,9 +15,7 @@ const AllTeamsRow = React.createClass({
     openMembership: React.PropTypes.bool.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -31,27 +29,30 @@ const AllTeamsRow = React.createClass({
       loading: true
     });
 
-    this.api.joinTeam({
-      orgId: this.props.organization.slug,
-      teamId: this.props.team.slug
-    }, {
-      success: () => {
-        this.setState({
-          loading: false,
-          error: false
-        });
+    this.api.joinTeam(
+      {
+        orgId: this.props.organization.slug,
+        teamId: this.props.team.slug
       },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-        AlertActions.addAlert({
-          message: t('There was an error while trying to join the team.'),
-          type: 'error'
-        });
+      {
+        success: () => {
+          this.setState({
+            loading: false,
+            error: false
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true
+          });
+          AlertActions.addAlert({
+            message: t('There was an error while trying to join the team.'),
+            type: 'error'
+          });
+        }
       }
-    });
+    );
   },
 
   leaveTeam() {
@@ -59,58 +60,69 @@ const AllTeamsRow = React.createClass({
       loading: true
     });
 
-    this.api.leaveTeam({
-      orgId: this.props.organization.slug,
-      teamId: this.props.team.slug
-    }, {
-      success: () => {
-        this.setState({
-          loading: false,
-          error: false
-        });
+    this.api.leaveTeam(
+      {
+        orgId: this.props.organization.slug,
+        teamId: this.props.team.slug
       },
-      error: () => {
-        this.setState({
-          loading: false,
-          error: true
-        });
-        AlertActions.addAlert({
-          message: t('There was an error while trying to leave the team.'),
-          type: 'error'
-        });
+      {
+        success: () => {
+          this.setState({
+            loading: false,
+            error: false
+          });
+        },
+        error: () => {
+          this.setState({
+            loading: false,
+            error: true
+          });
+          AlertActions.addAlert({
+            message: t('There was an error while trying to leave the team.'),
+            type: 'error'
+          });
+        }
       }
-    });
+    );
   },
 
   render() {
     let {access, team, openMembership} = this.props;
     let orgId = this.props.organization.slug;
     return (
-     <tr>
+      <tr>
         <td>
           <h5>{team.name}</h5>
         </td>
         <td className="actions align-right">
-          {this.state.loading ?
-            <a className="btn btn-default btn-sm btn-loading btn-disabled">...</a>
-          : (team.isMember ?
-            <a className="leave-team btn btn-default btn-sm"
-               onClick={this.leaveTeam}>{t('Leave Team')}</a>
-          : (team.isPending ?
-            <a className="btn btn-default btn-sm btn-disabled">{t('Request Pending')}</a>
-          : (openMembership ?
-            <a className="btn btn-default btn-sm"
-               onClick={this.joinTeam}>{t('Join Team')}</a>
-          :
-            <a className="btn btn-default btn-sm"
-               onClick={this.joinTeam}>{t('Request Access')}</a>
-          )))}
+          {this.state.loading
+            ? <a className="btn btn-default btn-sm btn-loading btn-disabled">...</a>
+            : team.isMember
+                ? <a
+                    className="leave-team btn btn-default btn-sm"
+                    onClick={this.leaveTeam}
+                  >
+                    {t('Leave Team')}
+                  </a>
+                : team.isPending
+                    ? <a className="btn btn-default btn-sm btn-disabled">
+                        {t('Request Pending')}
+                      </a>
+                    : openMembership
+                        ? <a className="btn btn-default btn-sm" onClick={this.joinTeam}>
+                            {t('Join Team')}
+                          </a>
+                        : <a className="btn btn-default btn-sm" onClick={this.joinTeam}>
+                            {t('Request Access')}
+                          </a>}
           {access.has('team:write') &&
-            <Link className="btn btn-default btn-sm" to={`/organizations/${orgId}/teams/${team.slug}/settings/`}
-               style={{marginLeft: 5}}>
+            <Link
+              className="btn btn-default btn-sm"
+              to={`/organizations/${orgId}/teams/${team.slug}/settings/`}
+              style={{marginLeft: 5}}
+            >
               {t('Team Settings')}
-            </Link>
-          }
+            </Link>}
         </td>
       </tr>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
index 5a05db26c0..08f7ff157f 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/expandedTeamList.jsx
@@ -22,12 +22,13 @@ const ExpandedTeamList = React.createClass({
 
   mixins: [
     ApiMixin,
-    TooltipMixin(function () {
+    TooltipMixin(function() {
       return {
         selector: '.tip',
-        title: function (instance) {
-          return (this.getAttribute('data-isbookmarked') === 'true' ?
-            'Remove from bookmarks' : 'Add to bookmarks');
+        title: function(instance) {
+          return this.getAttribute('data-isbookmarked') === 'true'
+            ? 'Remove from bookmarks'
+            : 'Add to bookmarks';
         }
       };
     })
@@ -62,9 +63,12 @@ const ExpandedTeamList = React.createClass({
         <tr>
           <td>
             <p className="project-list-empty">
-              {tct('There are no projects in this team. Get started by [link:creating your first project].', {
-                link: <a href={this.urlPrefix() + '/projects/new/?team=' + team.slug} />
-              })}
+              {tct(
+                'There are no projects in this team. Get started by [link:creating your first project].',
+                {
+                  link: <a href={this.urlPrefix() + '/projects/new/?team=' + team.slug} />
+                }
+              )}
             </p>
           </td>
         </tr>
@@ -84,20 +88,20 @@ const ExpandedTeamList = React.createClass({
               {t('Leave Team')}
             </a>
             {access.has('team:write') &&
-              <Link className="team-settings" to={`/organizations/${orgId}/teams/${team.slug}/settings/`}>
+              <Link
+                className="team-settings"
+                to={`/organizations/${orgId}/teams/${team.slug}/settings/`}
+              >
                 {t('Team Settings')}
-              </Link>
-            }
+              </Link>}
           </div>
           <h3>{team.name}</h3>
         </div>
         <div className="box-content">
           <table className="table table-no-top-border m-b-0">
-            {team.projects.length ?
-              this.renderProjectList(team)
-            :
-              this.renderNoProjects(team)
-            }
+            {team.projects.length
+              ? this.renderProjectList(team)
+              : this.renderNoProjects(team)}
           </table>
         </div>
       </div>
@@ -116,26 +120,33 @@ const ExpandedTeamList = React.createClass({
 
   renderProject(project) {
     let org = this.props.organization;
-    let chartData = project.stats && project.stats.map(point => {
-      return {x: point[0], y: point[1]};
-    });
+    let chartData =
+      project.stats &&
+      project.stats.map(point => {
+        return {x: point[0], y: point[1]};
+      });
 
     return (
       <tr key={project.id} className={project.isBookmarked ? 'isBookmarked' : null}>
         <td>
           <h5>
-            <a onClick={this.toggleBookmark.bind(this, project)}
-               className="tip"
-               data-isbookmarked={project.isBookmarked}>
-              {project.isBookmarked ? <span className="icon-star-solid bookmark" /> : <span className="icon-star-outline bookmark" />}
+            <a
+              onClick={this.toggleBookmark.bind(this, project)}
+              className="tip"
+              data-isbookmarked={project.isBookmarked}
+            >
+              {project.isBookmarked
+                ? <span className="icon-star-solid bookmark" />
+                : <span className="icon-star-outline bookmark" />}
             </a>
             <Link to={`/${org.slug}/${project.slug}/`}>
-              <ProjectLabel project={project} organization={this.props.organization}/>
+              <ProjectLabel project={project} organization={this.props.organization} />
             </Link>
           </h5>
         </td>
         <td className="align-right project-chart">
-          {chartData && <LazyLoad><BarChart points={chartData} className="sparkline" /></LazyLoad> }
+          {chartData &&
+            <LazyLoad><BarChart points={chartData} className="sparkline" /></LazyLoad>}
         </td>
       </tr>
     );
@@ -145,31 +156,42 @@ const ExpandedTeamList = React.createClass({
     if (this.props.hasTeams) {
       return (
         <p>
-          {this.props.access.has('project:write') ?
-            tct('You are not a member of any teams. [joinLink:Join an existing team] or [createLink:create a new one].', {
-                joinLink: <Link to={`/organizations/${this.props.organization.slug}/all-teams/`}/>,
-                createLink: <a href={this.urlPrefix() + '/teams/new/'} />
-              })
-            :
-            tct('You are not a member of any teams. [joinLink:Join a team].', {
-              joinLink: <Link to={`/organizations/${this.props.organization.slug}/all-teams/`}/>,
-            })
-          }
+          {this.props.access.has('project:write')
+            ? tct(
+                'You are not a member of any teams. [joinLink:Join an existing team] or [createLink:create a new one].',
+                {
+                  joinLink: (
+                    <Link
+                      to={`/organizations/${this.props.organization.slug}/all-teams/`}
+                    />
+                  ),
+                  createLink: <a href={this.urlPrefix() + '/teams/new/'} />
+                }
+              )
+            : tct('You are not a member of any teams. [joinLink:Join a team].', {
+                joinLink: (
+                  <Link
+                    to={`/organizations/${this.props.organization.slug}/all-teams/`}
+                  />
+                )
+              })}
         </p>
       );
-
     }
     return (
       <p>
-        {tct('You dont have any teams for this organization yet. Get started by [link:creating your first team].', {
-          link: <a href={this.urlPrefix() + '/teams/new/'} />
-        })}
+        {tct(
+          'You dont have any teams for this organization yet. Get started by [link:creating your first team].',
+          {
+            link: <a href={this.urlPrefix() + '/teams/new/'} />
+          }
+        )}
       </p>
     );
   },
 
   renderTeamNodes() {
-    return this.props.teamList.map((team) => {
+    return this.props.teamList.map(team => {
       return this.renderTeamNode(team);
     });
   },
@@ -179,7 +201,7 @@ const ExpandedTeamList = React.createClass({
 
     return (
       <div>
-        {hasTeams ? this.renderTeamNodes() : this.renderEmpty() }
+        {hasTeams ? this.renderTeamNodes() : this.renderEmpty()}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
index 14b7342699..f01cfe6a27 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/index.jsx
@@ -14,18 +14,14 @@ import OrganizationStatOverview from './organizationStatOverview';
 import {loadStats} from '../../actionCreators/projects';
 
 const OrganizationTeams = React.createClass({
-  mixins: [
-    ApiMixin,
-    OrganizationState,
-    Reflux.listenTo(TeamStore, 'onTeamListChange')
-  ],
+  mixins: [ApiMixin, OrganizationState, Reflux.listenTo(TeamStore, 'onTeamListChange')],
 
   getInitialState() {
     return {
       teamList: sortArray(TeamStore.getAll(), function(o) {
         return o.name;
       }),
-      projectStats: {},
+      projectStats: {}
     };
   },
 
@@ -55,15 +51,14 @@ const OrganizationTeams = React.createClass({
   },
 
   render() {
-    if (!this.context.organization)
-      return null;
+    if (!this.context.organization) return null;
 
     let access = this.getAccess();
     let features = this.getFeatures();
     let org = this.getOrganization();
 
     let allTeams = this.state.teamList;
-    let activeTeams = this.state.teamList.filter((team) => team.isMember);
+    let activeTeams = this.state.teamList.filter(team => team.isMember);
 
     return (
       <OrganizationHomeContainer>
@@ -71,25 +66,36 @@ const OrganizationTeams = React.createClass({
           <div className="col-md-9">
             <div className="team-list">
               <ul className="nav nav-tabs border-bottom">
-                <ListLink to={`/organizations/${org.slug}/teams/`}>{t('Your Teams')}</ListLink>
-                <ListLink to={`/organizations/${org.slug}/all-teams/`}>{t('All Teams')} <span className="badge badge-soft">{allTeams.length}</span></ListLink>
+                <ListLink to={`/organizations/${org.slug}/teams/`}>
+                  {t('Your Teams')}
+                </ListLink>
+                <ListLink to={`/organizations/${org.slug}/all-teams/`}>
+                  {t('All Teams')}
+                  {' '}
+                  <span className="badge badge-soft">{allTeams.length}</span>
+                </ListLink>
               </ul>
-              {this.props.children ? /* should be AllTeamsList */
-                React.cloneElement(this.props.children, {
-                  organization: org,
-                  teamList: allTeams,
-                  access: access,
-                  openMembership: features.has('open-membership') || access.has('org:write')
-                }) :
-                <ExpandedTeamList
-                  organization={org} teamList={activeTeams}
-                  projectStats={this.state.projectStats}
-                  hasTeams={allTeams.length !== 0}
-                  access={access}/>
-              }
+              {this.props.children /* should be AllTeamsList */
+                ? React.cloneElement(this.props.children, {
+                    organization: org,
+                    teamList: allTeams,
+                    access: access,
+                    openMembership: features.has('open-membership') ||
+                      access.has('org:write')
+                  })
+                : <ExpandedTeamList
+                    organization={org}
+                    teamList={activeTeams}
+                    projectStats={this.state.projectStats}
+                    hasTeams={allTeams.length !== 0}
+                    access={access}
+                  />}
             </div>
           </div>
-          <OrganizationStatOverview orgId={this.props.params.orgId} className="col-md-3 stats-column" />
+          <OrganizationStatOverview
+            orgId={this.props.params.orgId}
+            className="col-md-3 stats-column"
+          />
         </div>
       </OrganizationHomeContainer>
     );
diff --git a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
index 5aa9368df7..3e6203c05a 100644
--- a/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
+++ b/src/sentry/static/sentry/app/views/organizationTeams/organizationStatOverview.jsx
@@ -17,10 +17,7 @@ const OrganizationStatOverview = React.createClass({
     location: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    OrganizationState
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -44,9 +41,9 @@ const OrganizationStatOverview = React.createClass({
         since: new Date().getTime() / 1000 - 3600 * 24,
         stat: 'rejected'
       },
-      success: (data) => {
+      success: data => {
         let totalRejected = 0;
-        data.forEach((point) => {
+        data.forEach(point => {
           totalRejected += point[1];
         });
         this.setState({totalRejected: totalRejected});
@@ -58,29 +55,27 @@ const OrganizationStatOverview = React.createClass({
         resolution: '1h',
         stat: 'received'
       },
-      success: (data) => {
+      success: data => {
         let received = [0, 0];
-        data.forEach((point) => {
+        data.forEach(point => {
           if (point[1] > 0) {
             received[0] += point[1];
             received[1] += 1;
           }
         });
-        let epm = (received[1] ? parseInt((received[0] / received[1]) / 60, 10) : 0);
+        let epm = received[1] ? parseInt(received[0] / received[1] / 60, 10) : 0;
         this.setState({epm: epm});
       }
     });
   },
 
   render() {
-    if (!defined(this.state.epm) || !defined(this.state.totalRejected))
-      return null;
+    if (!defined(this.state.epm) || !defined(this.state.totalRejected)) return null;
 
     let access = this.getAccess();
 
     let rejectedClasses = ['count'];
-    if (this.state.totalRejected > 0)
-      rejectedClasses.push('rejected');
+    if (this.state.totalRejected > 0) rejectedClasses.push('rejected');
 
     return (
       <div className={this.props.className}>
@@ -91,8 +86,7 @@ const OrganizationStatOverview = React.createClass({
         {access.has('org:read') &&
           <Link to={`/organizations/${this.props.orgId}/stats/`} className="stats-link">
             {t('View all stats')}
-          </Link>
-        }
+          </Link>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
index 51b8e27c91..4a92cc05db 100644
--- a/src/sentry/static/sentry/app/views/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertRules.jsx
@@ -13,26 +13,22 @@ const RuleRow = React.createClass({
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
     data: React.PropTypes.object.isRequired,
-    onDelete: React.PropTypes.func.isRequired,
+    onDelete: React.PropTypes.func.isRequired
   },
 
-  mixins: [
-    ApiMixin,
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
       loading: false,
-      error: false,
+      error: false
     };
   },
 
   onDelete() {
     /* eslint no-alert:0*/
-    if (!confirm('Are you sure you want to remove this rule?'))
-      return;
-    if (this.state.loading)
-      return;
+    if (!confirm('Are you sure you want to remove this rule?')) return;
+    if (this.state.loading) return;
 
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     let {orgId, projectId, data} = this.props;
@@ -60,10 +56,8 @@ const RuleRow = React.createClass({
       <div className="box">
         <div className="box-header">
           <div className="pull-right">
-            <a className="btn btn-sm btn-default"
-                href={editLink}>{t('Edit Rule')}</a>
-            <a className="btn btn-sm btn-default"
-               onClick={this.onDelete}>
+            <a className="btn btn-sm btn-default" href={editLink}>{t('Edit Rule')}</a>
+            <a className="btn btn-sm btn-default" onClick={this.onDelete}>
               <span className="icon-trash" style={{marginRight: 3}} />
             </a>
           </div>
@@ -74,34 +68,40 @@ const RuleRow = React.createClass({
             <div className="col-md-6">
               {data.conditions.length !== 0 &&
                 <div>
-                  <h6>When <strong>{data.actionMatch}</strong> of these conditions are met:</h6>
+                  <h6>
+                    When <strong>{data.actionMatch}</strong> of these conditions are met:
+                  </h6>
                   <table className="conditions-list table">
-                  {data.conditions.map((condition) => {
-                    return (
-                      <tr>
-                        <td>{condition.name}</td>
-                      </tr>
-                    );
-                  })}
+                    {data.conditions.map(condition => {
+                      return (
+                        <tr>
+                          <td>{condition.name}</td>
+                        </tr>
+                      );
+                    })}
                   </table>
-                </div>
-              }
+                </div>}
             </div>
             <div className="col-md-6">
               {data.actions.length !== 0 &&
                 <div>
-                  <h6>Take these actions at most <strong>once every <Duration seconds={data.frequency * 60} /></strong> for an issue:</h6>
+                  <h6>
+                    Take these actions at most
+                    {' '}
+                    <strong>once every <Duration seconds={data.frequency * 60} /></strong>
+                    {' '}
+                    for an issue:
+                  </h6>
                   <table className="actions-list table">
-                  {data.actions.map((action) => {
-                    return (
-                      <tr>
-                        <td>{action.name}</td>
-                      </tr>
-                    );
-                  })}
+                    {data.actions.map(action => {
+                      return (
+                        <tr>
+                          <td>{action.name}</td>
+                        </tr>
+                      );
+                    })}
                   </table>
-                </div>
-              }
+                </div>}
             </div>
           </div>
         </div>
@@ -117,7 +117,7 @@ const ProjectAlertRules = React.createClass({
     return {
       loading: true,
       error: false,
-      ruleList: [],
+      ruleList: []
     };
   },
 
@@ -153,14 +153,10 @@ const ProjectAlertRules = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.ruleList.length)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.ruleList.length) body = this.renderResults();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -186,14 +182,15 @@ const ProjectAlertRules = React.createClass({
     let {orgId, projectId} = this.props.params;
     return (
       <div className="rules-list">
-        {this.state.ruleList.map((rule) => {
+        {this.state.ruleList.map(rule => {
           return (
             <RuleRow
               key={rule.id}
               data={rule}
               orgId={orgId}
               projectId={projectId}
-              onDelete={this.onDeleteRule.bind(this, rule)} />
+              onDelete={this.onDeleteRule.bind(this, rule)}
+            />
           );
         })}
       </div>
@@ -204,17 +201,22 @@ const ProjectAlertRules = React.createClass({
     let {orgId, projectId} = this.props.params;
     return (
       <div>
-        <a href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
-           className="btn pull-right btn-primary btn-sm">
+        <a
+          href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
+          className="btn pull-right btn-primary btn-sm"
+        >
           <span className="icon-plus" />
           {t('New Alert Rule')}
         </a>
         <h2>{t('Alerts')}</h2>
 
         <ul className="nav nav-tabs" style={{borderBottom: '1px solid #ddd'}}>
-          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
-                    index={true}>{t('Settings')}</ListLink>
-          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>{t('Rules')}</ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`} index={true}>
+            {t('Settings')}
+          </ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>
+            {t('Rules')}
+          </ListLink>
         </ul>
 
         {this.renderBody()}
diff --git a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
index 9d54aa312b..b266680524 100644
--- a/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectAlertSettings.jsx
@@ -21,7 +21,7 @@ const DigestSettings = React.createClass({
   getInitialState() {
     return {
       formData: Object.assign({}, this.props.initialData),
-      errors: {},
+      errors: {}
     };
   },
 
@@ -29,7 +29,7 @@ const DigestSettings = React.createClass({
     this.setState({
       formData: {
         ...this.state.formData,
-        [name]: value,
+        [name]: value
       }
     });
   },
@@ -40,35 +40,37 @@ const DigestSettings = React.createClass({
     if (this.state.state == FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: this.state.formData,
-        success: (data) => {
-          this.props.onSave(data);
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: this.state.formData,
+          success: data => {
+            this.props.onSave(data);
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
-
   render() {
     let isSaving = this.state.state === FormState.SAVING;
     let {errors, formData} = this.state;
@@ -82,18 +84,19 @@ const DigestSettings = React.createClass({
           <p>
             {t(
               'Sentry will automatically digest alerts sent ' +
-              'by some services to avoid flooding your inbox ' +
-              'with individual issue notifications. To control ' +
-              'how frequently notifications are delivered, use ' +
-              'the sliders below.'
+                'by some services to avoid flooding your inbox ' +
+                'with individual issue notifications. To control ' +
+                'how frequently notifications are delivered, use ' +
+                'the sliders below.'
             )}
           </p>
           <form onSubmit={this.onSubmit} className="form-stacked">
             {this.state.state === FormState.ERROR &&
               <div className="alert alert-error alert-block">
-                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-              </div>
-            }
+                {t(
+                  'Unable to save your changes. Please ensure all fields are valid and try again.'
+                )}
+              </div>}
             <div className="row">
               <div className="col-md-6">
                 <RangeField
@@ -107,7 +110,8 @@ const DigestSettings = React.createClass({
                   value={formData.digestsMinDelay}
                   error={errors.digestsMinDelay}
                   formatLabel={RangeField.formatMinutes}
-                  onChange={this.onFieldChange.bind(this, 'digestsMinDelay')} />
+                  onChange={this.onFieldChange.bind(this, 'digestsMinDelay')}
+                />
               </div>
               <div className="col-md-6">
                 <RangeField
@@ -121,19 +125,25 @@ const DigestSettings = React.createClass({
                   value={formData.digestsMaxDelay}
                   error={errors.digestsMaxDelay}
                   formatLabel={RangeField.formatMinutes}
-                  onChange={this.onFieldChange.bind(this, 'digestsMaxDelay')} />
+                  onChange={this.onFieldChange.bind(this, 'digestsMaxDelay')}
+                />
               </div>
             </div>
 
             <fieldset className="form-actions align-right">
-              <button type="submit" className="btn btn-primary"
-                      disabled={isSaving || !hasChanges}>{t('Save Changes')}</button>
+              <button
+                type="submit"
+                className="btn btn-primary"
+                disabled={isSaving || !hasChanges}
+              >
+                {t('Save Changes')}
+              </button>
             </fieldset>
           </form>
         </div>
       </div>
     );
-  },
+  }
 });
 
 const GeneralSettings = React.createClass({
@@ -149,7 +159,7 @@ const GeneralSettings = React.createClass({
   getInitialState() {
     return {
       formData: Object.assign({}, this.props.initialData),
-      errors: {},
+      errors: {}
     };
   },
 
@@ -157,7 +167,7 @@ const GeneralSettings = React.createClass({
     this.setState({
       formData: {
         ...this.state.formData,
-        [name]: value,
+        [name]: value
       }
     });
   },
@@ -168,35 +178,37 @@ const GeneralSettings = React.createClass({
     if (this.state.state == FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: this.state.formData,
-        success: (data) => {
-          this.props.onSave(data);
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: this.state.formData,
+          success: data => {
+            this.props.onSave(data);
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
-
   render() {
     let isSaving = this.state.state === FormState.SAVING;
     let {errors, formData} = this.state;
@@ -211,34 +223,41 @@ const GeneralSettings = React.createClass({
           <form onSubmit={this.onSubmit} className="form-stacked">
             {this.state.state === FormState.ERROR &&
               <div className="alert alert-error alert-block">
-                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-              </div>
-            }
+                {t(
+                  'Unable to save your changes. Please ensure all fields are valid and try again.'
+                )}
+              </div>}
 
             <TextField
-                key="subjectTemplate"
-                label={t('Subject template')}
-                value={formData.subjectTemplate}
-                required={false}
-                error={errors.subjectTemplate}
-                onChange={this.onFieldChange.bind(this, 'subjectTemplate')}
-                help="The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, and ${tag:key}, such as ${tag:environment} or ${tag:release}." />
+              key="subjectTemplate"
+              label={t('Subject template')}
+              value={formData.subjectTemplate}
+              required={false}
+              error={errors.subjectTemplate}
+              onChange={this.onFieldChange.bind(this, 'subjectTemplate')}
+              help="The email subject to use (excluding the prefix) for individual alerts. Usable variables include: $project, $title, and ${tag:key}, such as ${tag:environment} or ${tag:release}."
+            />
 
             <fieldset className="form-actions align-right">
-              <button type="submit" className="btn btn-primary"
-                      disabled={isSaving || !hasChanges}>{t('Save Changes')}</button>
+              <button
+                type="submit"
+                className="btn btn-primary"
+                disabled={isSaving || !hasChanges}
+              >
+                {t('Save Changes')}
+              </button>
             </fieldset>
           </form>
         </div>
       </div>
     );
-  },
+  }
 });
 
 const InactivePlugins = React.createClass({
   propTypes: {
     plugins: React.PropTypes.array.isRequired,
-    onEnablePlugin: React.PropTypes.func.isRequired,
+    onEnablePlugin: React.PropTypes.func.isRequired
   },
 
   enablePlugin(plugin) {
@@ -247,8 +266,7 @@ const InactivePlugins = React.createClass({
 
   render() {
     let plugins = this.props.plugins;
-    if (plugins.length === 0)
-      return null;
+    if (plugins.length === 0) return null;
     return (
       <div className="box">
         <div className="box-header">
@@ -256,10 +274,13 @@ const InactivePlugins = React.createClass({
         </div>
         <div className="box-content with-padding">
           <ul className="integration-list">
-            {plugins.map((plugin) => {
+            {plugins.map(plugin => {
               return (
                 <li key={plugin.id}>
-                  <button onClick={this.enablePlugin.bind(this, plugin)} className={`ref-plugin-enable-${plugin.id}`}>
+                  <button
+                    onClick={this.enablePlugin.bind(this, plugin)}
+                    className={`ref-plugin-enable-${plugin.id}`}
+                  >
                     {plugin.name}
                   </button>
                 </li>
@@ -278,14 +299,14 @@ const ProjectAlertSettings = React.createClass({
     // not initially defining them (though they are bound before) ever
     // rendered
     organization: React.PropTypes.object,
-    project: React.PropTypes.object,
+    project: React.PropTypes.object
   },
 
   mixins: [ApiMixin],
 
   getInitialState() {
     return {
-      project: this.props.project,
+      project: this.props.project
     };
   },
 
@@ -295,8 +316,8 @@ const ProjectAlertSettings = React.createClass({
       project: {
         ...this.state.project,
         digestsMinDelay: data.digestsMinDelay,
-        digestsMaxDelay: data.digestsMaxDelay,
-      },
+        digestsMaxDelay: data.digestsMaxDelay
+      }
     });
   },
 
@@ -305,8 +326,8 @@ const ProjectAlertSettings = React.createClass({
     this.setState({
       project: {
         ...this.state.project,
-        subjectTemplate: data.subjectTemplate,
-      },
+        subjectTemplate: data.subjectTemplate
+      }
     });
   },
 
@@ -316,13 +337,13 @@ const ProjectAlertSettings = React.createClass({
     this.api.request(`/projects/${orgId}/${projectId}/plugins/${plugin.id}/`, {
       method: 'POST',
       data: this.state.formData,
-      success: (data) => {
+      success: data => {
         // TODO(dcramer): propagate this in a more correct way
         plugin = this.state.project.plugins.find(p => p.id === plugin.id);
         plugin.enabled = true;
         this.setState({project: this.state.project});
       },
-      error: (error) => {
+      error: error => {
         IndicatorStore.add(t('Unable to save changes. Please try again.'), 'error');
       },
       complete: () => {
@@ -345,24 +366,29 @@ const ProjectAlertSettings = React.createClass({
     let plugins = project.plugins.filter(p => p.type == 'notification');
     return (
       <div>
-        <a href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
-           className="btn pull-right btn-primary btn-sm">
+        <a
+          href={`/${orgId}/${projectId}/settings/alerts/rules/new/`}
+          className="btn pull-right btn-primary btn-sm"
+        >
           <span className="icon-plus" />
           {t('New Alert Rule')}
         </a>
         <h2>{t('Alerts')}</h2>
 
         <ul className="nav nav-tabs" style={{borderBottom: '1px solid #ddd'}}>
-          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
-                    index={true}>{t('Settings')}</ListLink>
-          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>{t('Rules')}</ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/`} index={true}>
+            {t('Settings')}
+          </ListLink>
+          <ListLink to={`/${orgId}/${projectId}/settings/alerts/rules/`}>
+            {t('Rules')}
+          </ListLink>
         </ul>
 
         <div className="alert alert-block alert-info">
           {tct(
             'These settings cover rule-based alerts. If you\'re ' +
-            'looking to change which notifications you receive ' +
-            'you may do so from your [link:account settings].',
+              'looking to change which notifications you receive ' +
+              'you may do so from your [link:account settings].',
             {
               link: <a href="/account/settings/notifications/" />
             }
@@ -373,33 +399,37 @@ const ProjectAlertSettings = React.createClass({
           orgId={orgId}
           projectId={projectId}
           initialData={{
-            'subjectTemplate': project.subjectTemplate
+            subjectTemplate: project.subjectTemplate
           }}
-          onSave={this.onGeneralChange} />
+          onSave={this.onGeneralChange}
+        />
 
         <DigestSettings
           orgId={orgId}
           projectId={projectId}
           initialData={{
-            'digestsMinDelay': project.digestsMinDelay,
-            'digestsMaxDelay': project.digestsMaxDelay
+            digestsMinDelay: project.digestsMinDelay,
+            digestsMaxDelay: project.digestsMaxDelay
           }}
-          onSave={this.onDigestsChange} />
+          onSave={this.onDigestsChange}
+        />
 
-        {plugins.filter(p => p.enabled).map((data) => {
+        {plugins.filter(p => p.enabled).map(data => {
           return (
             <PluginConfig
               data={data}
               organization={organization}
               project={project}
               key={data.id}
-              onDisablePlugin={this.onDisablePlugin.bind(this, data)} />
+              onDisablePlugin={this.onDisablePlugin.bind(this, data)}
+            />
           );
         })}
 
         <InactivePlugins
           plugins={plugins.filter(p => !p.enabled)}
-          onEnablePlugin={this.enablePlugin} />
+          onEnablePlugin={this.enablePlugin}
+        />
 
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/projectChooser.jsx b/src/sentry/static/sentry/app/views/projectChooser.jsx
index e549a66592..287aeda28e 100644
--- a/src/sentry/static/sentry/app/views/projectChooser.jsx
+++ b/src/sentry/static/sentry/app/views/projectChooser.jsx
@@ -21,20 +21,29 @@ const ProjectChooser = React.createClass({
 
     // Expect onboarding=1 and task=<task id> parameters and task.featureLocation == 'project'
     // TODO throw up report dialog if not true
-    let task = TodoList.TASKS.filter((task_inst) => task_inst.task == this.props.location.query.task)[0];
+    let task = TodoList.TASKS.filter(
+      task_inst => task_inst.task == this.props.location.query.task
+    )[0];
     if (task.featureLocation != 'project') {
       throw new Error('User arrived on project chooser without a valid task id.');
     }
-    let teamProjectList = org.teams.map((team) => {
-
+    let teamProjectList = org.teams.map(team => {
       // Get list of projects per team
       let projectList = team.projects.map(project => {
-        return (<tr key={project.id}><td><h5>
-          <a href={`/${org.slug}/${project.slug}/${task.location}`}>{project.name}</a>
-        </h5></td></tr>);
+        return (
+          <tr key={project.id}>
+            <td>
+              <h5>
+                <a href={`/${org.slug}/${project.slug}/${task.location}`}>
+                  {project.name}
+                </a>
+              </h5>
+            </td>
+          </tr>
+        );
       });
 
-      return(
+      return (
         <div className="box">
           <div key={team.id}>
             <div className="box-header" key={team.id}>
@@ -48,7 +57,8 @@ const ProjectChooser = React.createClass({
               </table>
             </div>
           </div>
-        </div>);
+        </div>
+      );
     });
 
     return (
@@ -59,7 +69,7 @@ const ProjectChooser = React.createClass({
         </div>
       </div>
     );
-  },
+  }
 });
 
 export default ProjectChooser;
diff --git a/src/sentry/static/sentry/app/views/projectCspSettings.jsx b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
index 575c66a9ba..59a4897c83 100644
--- a/src/sentry/static/sentry/app/views/projectCspSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectCspSettings.jsx
@@ -25,7 +25,7 @@ const ProjectCspSettingsForm = React.createClass({
     }
     return {
       formData: formData,
-      errors: {},
+      errors: {}
     };
   },
 
@@ -33,7 +33,7 @@ const ProjectCspSettingsForm = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -43,31 +43,34 @@ const ProjectCspSettingsForm = React.createClass({
     if (this.state.state === FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: {options: this.state.formData},
-        success: (data) => {
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: {options: this.state.formData},
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -77,18 +80,25 @@ const ProjectCspSettingsForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <BooleanField
             key="ignored-sources-defaults"
             name="ignored-sources-defaults"
             label={t('Use Default Ignored Sources')}
-            help={t('Our default list will attempt to ignore common issues and reduce noise.')}
+            help={t(
+              'Our default list will attempt to ignore common issues and reduce noise.'
+            )}
             value={this.state.formData['sentry:csp_ignored_sources_defaults']}
             error={errors['sentry:csp_ignored_sources_defaults']}
-            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources_defaults')} />
+            onChange={this.onFieldChange.bind(
+              this,
+              'sentry:csp_ignored_sources_defaults'
+            )}
+          />
           <TextareaField
             key="ignored-sources"
             name="ignored-sources"
@@ -98,11 +108,13 @@ const ProjectCspSettingsForm = React.createClass({
             value={this.state.formData['sentry:csp_ignored_sources']}
             placeholder="e.g. file://*, *.example.com, example.com, etc"
             error={errors['sentry:csp_ignored_sources']}
-            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources')} />
+            onChange={this.onFieldChange.bind(this, 'sentry:csp_ignored_sources')}
+          />
         </fieldset>
         <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary"
-                  disabled={isSaving}>{t('Save Changes')}</button>
+          <button type="submit" className="btn btn-primary" disabled={isSaving}>
+            {t('Save Changes')}
+          </button>
         </fieldset>
       </form>
     );
@@ -122,7 +134,7 @@ const ProjectCspSettings = React.createClass({
       expected: 2,
       error: false,
       keyList: [],
-      projectOptions: {},
+      projectOptions: {}
     };
   },
 
@@ -135,7 +147,9 @@ const ProjectCspSettings = React.createClass({
   componentWillReceiveProps(nextProps) {
     let location = this.props.location;
     let nextLocation = nextProps.location;
-    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+    if (
+      location.pathname != nextLocation.pathname || location.search != nextLocation.search
+    ) {
       this.remountComponent();
     }
   },
@@ -152,7 +166,7 @@ const ProjectCspSettings = React.createClass({
         this.setState({
           expected: expected,
           loading: expected > 0,
-          keyList: data,
+          keyList: data
         });
       },
       error: () => {
@@ -171,7 +185,7 @@ const ProjectCspSettings = React.createClass({
         this.setState({
           expected: expected,
           loading: expected > 0,
-          projectOptions: data.options,
+          projectOptions: data.options
         });
       },
       error: () => {
@@ -186,32 +200,36 @@ const ProjectCspSettings = React.createClass({
   },
 
   getInstructions() {
-    let endpoint = (this.state.keyList.length ?
-      this.state.keyList[0].dsn.csp :
-      'https://sentry.example.com/api/csp-report/');
+    let endpoint = this.state.keyList.length
+      ? this.state.keyList[0].dsn.csp
+      : 'https://sentry.example.com/api/csp-report/';
 
     return (
       'def middleware(request, response):\n' +
       '    response[\'Content-Security-Policy\'] = \\\n' +
-      '        \"default-src *; \" \\\n' +
-      '        \"script-src \'self\' \'unsafe-eval\' \'unsafe-inline\' cdn.example.com cdn.ravenjs.com; \" \\\n' +
-      '        \"style-src \'self\' \'unsafe-inline\' cdn.example.com; \" \\\n' +
-      '        \"img-src * data:; \" \\\n' +
-      '        \"report-uri ' + endpoint + '\"\n' +
+      '        "default-src *; " \\\n' +
+      '        "script-src \'self\' \'unsafe-eval\' \'unsafe-inline\' cdn.example.com cdn.ravenjs.com; " \\\n' +
+      '        "style-src \'self\' \'unsafe-inline\' cdn.example.com; " \\\n' +
+      '        "img-src * data:; " \\\n' +
+      '        "report-uri ' +
+      endpoint +
+      '"\n' +
       '    return response\n'
     );
   },
 
   getReportOnlyInstructions() {
-    let endpoint = (this.state.keyList.length ?
-      this.state.keyList[0].dsn.csp :
-      'https://sentry.example.com/api/csp-report/');
+    let endpoint = this.state.keyList.length
+      ? this.state.keyList[0].dsn.csp
+      : 'https://sentry.example.com/api/csp-report/';
 
     return (
       'def middleware(request, response):\n' +
       '    response[\'Content-Security-Policy-Report-Only\'] = \\\n' +
-      '        \"default-src \'self\'; \" \\\n' +
-      '        \"report-uri ' + endpoint + '\"\n' +
+      '        "default-src \'self\'; " \\\n' +
+      '        "report-uri ' +
+      endpoint +
+      '"\n' +
       '    return response\n'
     );
   },
@@ -225,8 +243,7 @@ const ProjectCspSettings = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return this.renderLoading();
+    if (this.state.loading) return this.renderLoading();
 
     let {orgId, projectId} = this.props.params;
 
@@ -235,9 +252,17 @@ const ProjectCspSettings = React.createClass({
       <div>
         <h1>{t('CSP Reports')}</h1>
 
-        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        <div className="alert alert-block alert-info">
+          Psst! This feature is still a work-in-progress. Thanks for being an early adopter!
+        </div>
 
-        <p><a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a> (CSP) is a security standard which helps prevent cross-site scripting (XSS), clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context. It's enforced by browser vendors, and Sentry supports capturing CSP violations using the standard reporting hooks.</p>
+        <p>
+          <a href="https://en.wikipedia.org/wiki/Content_Security_Policy">
+            Content Security Policy
+          </a>
+          {' '}
+          (CSP) is a security standard which helps prevent cross-site scripting (XSS), clickjacking and other code injection attacks resulting from execution of malicious content in the trusted web page context. It's enforced by browser vendors, and Sentry supports capturing CSP violations using the standard reporting hooks.
+        </p>
 
         <div className="box">
           <div className="box-header">
@@ -247,28 +272,45 @@ const ProjectCspSettings = React.createClass({
             <ProjectCspSettingsForm
               orgId={orgId}
               projectId={projectId}
-              initialData={this.state.projectOptions} />
+              initialData={this.state.projectOptions}
+            />
           </div>
         </div>
 
-
         <div className="box">
           <div className="box-header">
             <h3>{t('Integration')}</h3>
           </div>
 
           <div className="box-content with-padding">
-            <p>To configure <acronym title="Content Security Policy">CSP</acronym> reports in Sentry, you'll need to send a header from your server describing your policy, as well specifying the authenticated Sentry endpoint.</p>
-
-            <p>For example, in Python you might achieve this via a simple web middleware:</p>
+            <p>
+              To configure
+              {' '}
+              <acronym title="Content Security Policy">CSP</acronym>
+              {' '}
+              reports in Sentry, you'll need to send a header from your server describing your policy, as well specifying the authenticated Sentry endpoint.
+            </p>
+
+            <p>
+              For example, in Python you might achieve this via a simple web middleware:
+            </p>
 
             <pre>{this.getInstructions()}</pre>
 
-            <p>Alternatively you can setup CSP reports to simply send reports rather than actually enforcing the policy:</p>
+            <p>
+              Alternatively you can setup CSP reports to simply send reports rather than actually enforcing the policy:
+            </p>
 
             <pre>{this.getReportOnlyInstructions()}</pre>
 
-            <p>We recommend setting this up to only run on a percentage of requests, as otherwise you may find that you've quickly exhausted your quota. For more information, take a look at <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">the article on html5rocks.com</a>.</p>
+            <p>
+              We recommend setting this up to only run on a percentage of requests, as otherwise you may find that you've quickly exhausted your quota. For more information, take a look at
+              {' '}
+              <a href="http://www.html5rocks.com/en/tutorials/security/content-security-policy/">
+                the article on html5rocks.com
+              </a>
+              .
+            </p>
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
index 601a1549b4..eef4feb9b3 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -12,16 +12,13 @@ const PERIOD_DAY = '1d';
 const PERIOD_WEEK = '1w';
 const PERIODS = new Set([PERIOD_HOUR, PERIOD_DAY, PERIOD_WEEK]);
 
-
 const ProjectDashboard = React.createClass({
   propTypes: {
     defaultStatsPeriod: React.PropTypes.string,
     setProjectNavSection: React.PropTypes.func
   },
 
-  mixins: [
-    ProjectState
-  ],
+  mixins: [ProjectState],
 
   getDefaultProps() {
     return {
@@ -123,8 +120,10 @@ const ProjectDashboard = React.createClass({
                 }}
                 active={statsPeriod === PERIOD_HOUR}
                 className={
-                  'btn btn-sm btn-default' + (
-                    statsPeriod === PERIOD_HOUR ? ' active' : '')}>
+                  'btn btn-sm btn-default' +
+                    (statsPeriod === PERIOD_HOUR ? ' active' : '')
+                }
+              >
                 {t('1 hour')}
               </Link>
               <Link
@@ -134,8 +133,9 @@ const ProjectDashboard = React.createClass({
                 }}
                 active={statsPeriod === PERIOD_DAY}
                 className={
-                  'btn btn-sm btn-default' + (
-                    statsPeriod === PERIOD_DAY ? ' active' : '')}>
+                  'btn btn-sm btn-default' + (statsPeriod === PERIOD_DAY ? ' active' : '')
+                }
+              >
                 {t('1 day')}
               </Link>
               <Link
@@ -144,27 +144,29 @@ const ProjectDashboard = React.createClass({
                   query: {...routeQuery, statsPeriod: PERIOD_WEEK}
                 }}
                 className={
-                  'btn btn-sm btn-default' + (
-                    statsPeriod === PERIOD_WEEK ? ' active' : '')}>
-                    {t('1 week')}
+                  'btn btn-sm btn-default' +
+                    (statsPeriod === PERIOD_WEEK ? ' active' : '')
+                }
+              >
+                {t('1 week')}
               </Link>
             </div>
           </div>
           <h3>{t('Overview')}</h3>
         </div>
-        <ProjectChart
-            dateSince={dateSince}
-            resolution={resolution} />
+        <ProjectChart dateSince={dateSince} resolution={resolution} />
         <div className="row">
           <div className="col-md-6">
             <EventList
-                title={t('Trending Issues')}
-                endpoint={this.getTrendingIssuesEndpoint(dateSince)} />
+              title={t('Trending Issues')}
+              endpoint={this.getTrendingIssuesEndpoint(dateSince)}
+            />
           </div>
           <div className="col-md-6">
             <EventList
-                title={t('New Issues')}
-                endpoint={this.getNewIssuesEndpoint(dateSince)} />
+              title={t('New Issues')}
+              endpoint={this.getNewIssuesEndpoint(dateSince)}
+            />
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
index 9515505e87..32e000ee13 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -12,10 +12,7 @@ const ProjectChart = React.createClass({
     resolution: React.PropTypes.string.isRequired
   },
 
-  mixins: [
-    ApiMixin,
-    ProjectState
-  ],
+  mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
     return {
@@ -31,10 +28,13 @@ const ProjectChart = React.createClass({
   },
 
   componentWillReceiveProps() {
-    this.setState({
-      loading: true,
-      error: false
-    }, this.fetchData);
+    this.setState(
+      {
+        loading: true,
+        error: false
+      },
+      this.fetchData
+    );
   },
 
   getStatsEndpoint() {
@@ -54,9 +54,9 @@ const ProjectChart = React.createClass({
       query: {
         since: this.props.dateSince,
         resolution: this.props.resolution,
-        stat: 'generated',
+        stat: 'generated'
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           stats: data,
           error: false,
@@ -74,34 +74,35 @@ const ProjectChart = React.createClass({
     this.api.request(this.getProjectReleasesEndpoint(), {
       success: (data, _, jqXHR) => {
         this.setState({
-          releaseList: data,
+          releaseList: data
         });
       }
     });
   },
 
   renderChart() {
-    let points = this.state.stats.map((point) => {
+    let points = this.state.stats.map(point => {
       return {x: point[0], y: point[1]};
     });
-    let startX = (new Date().getTime() / 1000) - 3600 * 24 * 7;
-    let markers = this.state.releaseList.filter((release) => {
-      let date = new Date(release.dateCreated).getTime() / 1000;
-      return date >= startX;
-    }).map((release) => {
-      return {
-        label: 'Version ' + release.shortVersion,
-        x: new Date(release.dateCreated).getTime() / 1000
-      };
-    });
+    let startX = new Date().getTime() / 1000 - 3600 * 24 * 7;
+    let markers = this.state.releaseList
+      .filter(release => {
+        let date = new Date(release.dateCreated).getTime() / 1000;
+        return date >= startX;
+      })
+      .map(release => {
+        return {
+          label: 'Version ' + release.shortVersion,
+          x: new Date(release.dateCreated).getTime() / 1000
+        };
+      });
 
     return (
       <div className="chart-wrapper">
-        <BarChart
-          points={points}
-          markers={markers}
-          className="sparkline" />
-        <small className="date-legend">{moment(this.props.dateSince * 1000).format('LL')}</small>
+        <BarChart points={points} markers={markers} className="sparkline" />
+        <small className="date-legend">
+          {moment(this.props.dateSince * 1000).format('LL')}
+        </small>
       </div>
     );
   },
@@ -111,13 +112,11 @@ const ProjectChart = React.createClass({
       <div className="box project-chart">
         <div className="box-content with-padding">
           <div className="bar-chart">
-            {this.state.loading ?
-              <LoadingIndicator />
-            : (this.state.error ?
-              <LoadingError onRetry={this.fetchData} />
-            :
-              this.renderChart()
-            )}
+            {this.state.loading
+              ? <LoadingIndicator />
+              : this.state.error
+                  ? <LoadingError onRetry={this.fetchData} />
+                  : this.renderChart()}
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
index be26f150df..5d1a9cd352 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -12,9 +12,7 @@ const EventList = React.createClass({
     endpoint: React.PropTypes.string.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -30,15 +28,18 @@ const EventList = React.createClass({
   },
 
   componentWillReceiveProps() {
-    this.setState({
-      loading: true,
-      error: false
-    }, this.fetchData);
+    this.setState(
+      {
+        loading: true,
+        error: false
+      },
+      this.fetchData
+    );
   },
 
   fetchData() {
     let minutes;
-    switch(this.state.statsPeriod) {
+    switch (this.state.statsPeriod) {
       case '15m':
         minutes = '15';
         break;
@@ -56,7 +57,7 @@ const EventList = React.createClass({
         limit: 5,
         minutes: minutes
       },
-      success: (data) => {
+      success: data => {
         this.setState({
           groupList: data,
           loading: false,
@@ -79,7 +80,7 @@ const EventList = React.createClass({
   },
 
   render() {
-    let eventNodes = this.state.groupList.map((item) => {
+    let eventNodes = this.state.groupList.map(item => {
       return <EventNode group={item} key={item.id} />;
     });
 
@@ -96,17 +97,15 @@ const EventList = React.createClass({
         </div>
         <div className="box-content">
           <div className="tab-pane active">
-            {this.state.loading ?
-              <LoadingIndicator />
-            : (this.state.error ?
-              <LoadingError onRetry={this.fetchData} />
-            : (eventNodes.length ?
-              <ul className="group-list group-list-small">
-                {eventNodes}
-              </ul>
-            :
-              <div className="group-list-empty">{t('No data available.')}</div>
-            ))}
+            {this.state.loading
+              ? <LoadingIndicator />
+              : this.state.error
+                  ? <LoadingError onRetry={this.fetchData} />
+                  : eventNodes.length
+                      ? <ul className="group-list group-list-small">
+                          {eventNodes}
+                        </ul>
+                      : <div className="group-list-empty">{t('No data available.')}</div>}
           </div>
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
index 841de849ba..20245055bf 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventNode.jsx
@@ -40,9 +40,9 @@ const EventNode = React.createClass({
             <div className="event-extra">
               <ul>
                 <li>
-                  <span className="icon icon-clock"></span>
+                  <span className="icon icon-clock" />
                   <TimeSince date={group.lastSeen} />
-                  &nbsp;&mdash;&nbsp;
+                  &nbsp;—&nbsp;
                   <TimeSince date={group.firstSeen} suffix="old" />
                 </li>
               </ul>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
index 4478f0a620..d9d7d351f3 100644
--- a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
+++ b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
@@ -28,4 +28,3 @@ const TeamStatsBar = React.createClass({
 });
 
 export default TeamStatsBar;
-
diff --git a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
index d0f42b082c..f9c4aebbe4 100644
--- a/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
+++ b/src/sentry/static/sentry/app/views/projectDebugSymbols.jsx
@@ -24,7 +24,7 @@ const ProjectDebugSymbols = React.createClass({
       activeVersion: null,
       activeBuilds: null,
       activeBuild: null,
-      activeDsyms: null,
+      activeDsyms: null
     };
   },
 
@@ -58,7 +58,7 @@ const ProjectDebugSymbols = React.createClass({
     this.setState({
       activeAppID: appID,
       activeVersion: version,
-      activeBuilds: builds,
+      activeBuilds: builds
     });
   },
 
@@ -66,13 +66,13 @@ const ProjectDebugSymbols = React.createClass({
     this.setState({
       showModal: true,
       activeBuild: build,
-      activeDsyms: dsyms,
+      activeDsyms: dsyms
     });
   },
 
   closeModal() {
     this.setState({
-      showModal: false,
+      showModal: false
     });
   },
 
@@ -113,7 +113,7 @@ const ProjectDebugSymbols = React.createClass({
     if (object === undefined) {
       return [];
     }
-    return Object.keys(object).map(function (key) {
+    return Object.keys(object).map(function(key) {
       return callback(object[key], key);
     });
   },
@@ -140,7 +140,7 @@ const ProjectDebugSymbols = React.createClass({
       });
     }
 
-    return indexedApps.map((app) => {
+    return indexedApps.map(app => {
       return (
         <div className="box dashboard-widget" key={app.id}>
           <div className="box-content">
@@ -149,61 +149,75 @@ const ProjectDebugSymbols = React.createClass({
                 <div className="box-header clearfix">
                   <div className="row">
                     <h3 className="debug-symbols">
-                      <div className="app-icon" style={app.iconUrl && {backgroundImage: `url(${app.iconUrl})`}} />
+                      <div
+                        className="app-icon"
+                        style={app.iconUrl && {backgroundImage: `url(${app.iconUrl})`}}
+                      />
                       {app.name} <small>({app.appId})</small>
                     </h3>
                   </div>
                 </div>
-                  {this.mapObject(groupedDsyms[app.id], (builds, version) => {
-                    let symbolsInVersion = 0;
-                    let lastSeen = null;
-                    this.mapObject(groupedDsyms[app.id][version], (dsyms, build) => {
-                      symbolsInVersion += Object.keys(dsyms).length;
-                      if (lastSeen === null ||
-                          (lastSeen && new Date(dsyms[0].dateAdded).getTime() > new Date(lastSeen).getTime())) {
-                        lastSeen = dsyms[0].dateAdded;
-                      }
-                    });
-                    let row = (
-                      <li className="group hoverable" onClick={() => this.setActive(app.id, version, builds)}>
-                        <div className="row">
-                          <div className="col-xs-8 event-details">
-                            <h3 className="truncate">{version}</h3>
-                            <div className="event-message">{t('Builds')}: {Object.keys(builds).length}</div>
-                            <div className="event-extra">
-                              <ul>
-                                <li>
-                                  <span className="icon icon-clock"></span>
-                                  <TimeSince date={lastSeen} />
-                                </li>
-                              </ul>
-                            </div>
+                {this.mapObject(groupedDsyms[app.id], (builds, version) => {
+                  let symbolsInVersion = 0;
+                  let lastSeen = null;
+                  this.mapObject(groupedDsyms[app.id][version], (dsyms, build) => {
+                    symbolsInVersion += Object.keys(dsyms).length;
+                    if (
+                      lastSeen === null ||
+                      (lastSeen &&
+                        new Date(dsyms[0].dateAdded).getTime() >
+                          new Date(lastSeen).getTime())
+                    ) {
+                      lastSeen = dsyms[0].dateAdded;
+                    }
+                  });
+                  let row = (
+                    <li
+                      className="group hoverable"
+                      onClick={() => this.setActive(app.id, version, builds)}
+                    >
+                      <div className="row">
+                        <div className="col-xs-8 event-details">
+                          <h3 className="truncate">{version}</h3>
+                          <div className="event-message">
+                            {t('Builds')}: {Object.keys(builds).length}
                           </div>
-                          <div className="col-xs-4 event-count align-right">
-                            {t('Debug Symbol Files')}: {symbolsInVersion}
+                          <div className="event-extra">
+                            <ul>
+                              <li>
+                                <span className="icon icon-clock" />
+                                <TimeSince date={lastSeen} />
+                              </li>
+                            </ul>
                           </div>
                         </div>
-                      </li>
-                    );
-
-                    let buildRows = '';
-                    if (this.state.activeVersion &&
-                        this.state.activeBuilds &&
-                        this.state.activeVersion == version &&
-                        this.state.activeAppID == app.id) {
-                      buildRows = this.renderBuilds(version, this.state.activeBuilds);
-                    }
-                    return (
-                      <div className="box-content" key={version}>
-                        <div className="tab-pane active">
-                          <ul className="group-list group-list-small">
-                            {row}
-                            {buildRows}
-                          </ul>
+                        <div className="col-xs-4 event-count align-right">
+                          {t('Debug Symbol Files')}: {symbolsInVersion}
                         </div>
                       </div>
-                    );
-                  })}
+                    </li>
+                  );
+
+                  let buildRows = '';
+                  if (
+                    this.state.activeVersion &&
+                    this.state.activeBuilds &&
+                    this.state.activeVersion == version &&
+                    this.state.activeAppID == app.id
+                  ) {
+                    buildRows = this.renderBuilds(version, this.state.activeBuilds);
+                  }
+                  return (
+                    <div className="box-content" key={version}>
+                      <div className="tab-pane active">
+                        <ul className="group-list group-list-small">
+                          {row}
+                          {buildRows}
+                        </ul>
+                      </div>
+                    </div>
+                  );
+                })}
               </div>
             </div>
           </div>
@@ -216,14 +230,21 @@ const ProjectDebugSymbols = React.createClass({
     let buildRows = [];
     let dateAdded = null;
     this.mapObject(builds, (dsyms, build) => {
-      if (dateAdded === null ||
-          (dateAdded && new Date(dsyms[0].dateAdded).getTime() > new Date(dateAdded).getTime())) {
+      if (
+        dateAdded === null ||
+        (dateAdded &&
+          new Date(dsyms[0].dateAdded).getTime() > new Date(dateAdded).getTime())
+      ) {
         dateAdded = dsyms[0].dateAdded;
       }
     });
     this.mapObject(builds, (dsyms, build) => {
       buildRows.push(
-        <li className="group hoverable" key={build} onClick={() => this.openModal(build, dsyms)}>
+        <li
+          className="group hoverable"
+          key={build}
+          onClick={() => this.openModal(build, dsyms)}
+        >
           <div className="row">
             <div className="col-xs-8 event-details">
               <div className="event-message">
@@ -232,7 +253,7 @@ const ProjectDebugSymbols = React.createClass({
               <div className="event-extra">
                 <ul>
                   <li>
-                    <span className="icon icon-clock"></span>
+                    <span className="icon icon-clock" />
                     <TimeSince date={dateAdded} />
                   </li>
                 </ul>
@@ -240,7 +261,9 @@ const ProjectDebugSymbols = React.createClass({
             </div>
             <div className="col-xs-4 event-details">
               <div className="event-message">
-                <span className="align-right pull-right" style={{paddingRight: 16}}>{t('Debug Symbol Files')}: {dsyms.length}</span>
+                <span className="align-right pull-right" style={{paddingRight: 16}}>
+                  {t('Debug Symbol Files')}: {dsyms.length}
+                </span>
               </div>
             </div>
           </div>
@@ -274,8 +297,8 @@ const ProjectDebugSymbols = React.createClass({
           <td><code className="small">{dsym.uuid}</code></td>
           <td>{dsym.objectName}</td>
           <td>{dsym.cpuName} ({dsym.symbolType})</td>
-          <td><DateTime date={dsym.dateCreated}/></td>
-          <td><FileSize bytes={dsym.size}/></td>
+          <td><DateTime date={dsym.dateCreated} /></td>
+          <td><FileSize bytes={dsym.size} /></td>
         </tr>
       );
     });
@@ -291,13 +314,17 @@ const ProjectDebugSymbols = React.createClass({
     return (
       <div>
         <h3>{t('Unreferenced Debug Symbols')}</h3>
-        <p>{t(`
+        <p>
+          {t(
+            `
           This list represents all Debug Symbols which are not assigned to an
           app version. We will still find these debug symbols for symbolication
           but we can't tell you which versions they belong to.  This happens
           if you upload them with an old verison of sentry-cli or if sentry-cli
           can't locate the Info.plist file at the time of upload.
-        `)}</p>
+        `
+          )}
+        </p>
         <table className="table">
           <thead>
             <tr>
@@ -320,19 +347,30 @@ const ProjectDebugSymbols = React.createClass({
     return (
       <div>
         <h1>{t('Debug Symbols')}</h1>
-        <p>{t(`
+        <p>
+          {t(
+            `
           Here you can find uploaded debug information (for instance debug
           symbol files).  This is used to convert addresses from crash dumps
           into function names and locations.  For JavaScript debug support
           look at releases instead.
-        `)}</p>
+        `
+          )}
+        </p>
         {this.renderDebugTable()}
         {this.renderUnreferencedDebugSymbols()}
-        <Modal show={this.state.showModal} onHide={this.closeModal}
-               animation={false} backdrop="static" enforceFocus={false}
-               bsSize="lg">
+        <Modal
+          show={this.state.showModal}
+          onHide={this.closeModal}
+          animation={false}
+          backdrop="static"
+          enforceFocus={false}
+          bsSize="lg"
+        >
           <Modal.Header closeButton>
-            <Modal.Title>{this.state.activeVersion} ({this.state.activeBuild})</Modal.Title>
+            <Modal.Title>
+              {this.state.activeVersion} ({this.state.activeBuild})
+            </Modal.Title>
           </Modal.Header>
           <Modal.Body>
             <table className="table">
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index f25d6ca1a8..04395707ea 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -5,9 +5,7 @@ import ProjectHeader from '../components/projectHeader';
 import ProjectState from '../mixins/projectState';
 
 const ProjectDetailsLayout = React.createClass({
-  mixins: [
-    ProjectState
-  ],
+  mixins: [ProjectState],
 
   getInitialState() {
     return {
@@ -27,15 +25,15 @@ const ProjectDetailsLayout = React.createClass({
   },
 
   render() {
-    if (!this.context.project)
-      return null;
+    if (!this.context.project) return null;
 
     return (
-     <div>
+      <div>
         <ProjectHeader
           activeSection={this.state.projectNavSection}
           project={this.context.project}
-          organization={this.getOrganization()} />
+          organization={this.getOrganization()}
+        />
         <div className="container">
           <div className="content">
             {React.cloneElement(this.props.children, {
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
index 3e02c9870d..93e1953ab4 100644
--- a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -4,9 +4,7 @@ import ProjectHeader from '../components/projectHeader';
 import ProjectState from '../mixins/projectState';
 
 const ProjectDetailsLayout = React.createClass({
-  mixins: [
-    ProjectState
-  ],
+  mixins: [ProjectState],
 
   getInitialState() {
     return {
@@ -26,15 +24,15 @@ const ProjectDetailsLayout = React.createClass({
   },
 
   render() {
-    if (!this.context.project)
-      return null;
+    if (!this.context.project) return null;
 
     return (
-     <div>
+      <div>
         <ProjectHeader
           activeSection={this.state.projectNavSection}
           project={this.context.project}
-          organization={this.getOrganization()} />
+          organization={this.getOrganization()}
+        />
         <div className="container">
           <div className="content">
             {React.cloneElement(this.props.children, {
diff --git a/src/sentry/static/sentry/app/views/projectEvents/index.jsx b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
index 08fcf5c74b..5ac5db7477 100644
--- a/src/sentry/static/sentry/app/views/projectEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectEvents/index.jsx
@@ -44,16 +44,18 @@ const ProjectEvents = React.createClass({
   componentWillReceiveProps(nextProps) {
     if (nextProps.location.search !== this.props.location.search) {
       let queryParams = nextProps.location.query;
-      this.setState({
-        query: queryParams.query
-      }, this.fetchData);
+      this.setState(
+        {
+          query: queryParams.query
+        },
+        this.fetchData
+      );
     }
   },
 
   onSearch(query) {
     let targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
+    if (query !== '') targetQueryParams.query = query;
 
     let {orgId, projectId} = this.props.params;
     browserHistory.pushState(null, `/${orgId}/${projectId}/events/`, targetQueryParams);
@@ -101,16 +103,12 @@ const ProjectEvents = React.createClass({
   renderStreamBody() {
     let body;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.eventList.length > 0)
-      body = this.renderResults();
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.eventList.length > 0) body = this.renderResults();
     else if (this.state.query && this.state.query !== this.props.defaultQuery)
       body = this.renderNoQueryResults();
-    else
-      body = this.renderEmpty();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -141,30 +139,31 @@ const ProjectEvents = React.createClass({
     );
   },
 
-
   renderResults() {
     let {orgId, projectId} = this.props.params;
 
     let children = this.state.eventList.map((event, eventIdx) => {
       return (
         <tr key={event.id}>
-          <td style={{width: 240}}><small><DateTime date={event.dateCreated} /></small></td>
+          <td style={{width: 240}}>
+            <small><DateTime date={event.dateCreated} /></small>
+          </td>
           <td>
             <h5>
-              <Link to={`/${orgId}/${projectId}/issues/${event.groupID}/events/${event.id}/`}>
+              <Link
+                to={`/${orgId}/${projectId}/issues/${event.groupID}/events/${event.id}/`}
+              >
                 {this.getEventTitle(event)}
               </Link>
             </h5>
           </td>
           <td className="event-user table-user-info" style={{textAlign: 'right'}}>
-            {event.user ?
-              <div>
-                <Avatar user={event.user} size={64} className="avatar" />
-                {event.user.email}
-              </div>
-            :
-              <span>&mdash;</span>
-            }
+            {event.user
+              ? <div>
+                  <Avatar user={event.user} size={64} className="avatar" />
+                  {event.user.email}
+                </div>
+              : <span>—</span>}
           </td>
         </tr>
       );
@@ -189,14 +188,17 @@ const ProjectEvents = React.createClass({
             <h3>{t('Events')}</h3>
           </div>
           <div className="col-sm-5 release-search">
-            <SearchBar defaultQuery=""
+            <SearchBar
+              defaultQuery=""
               placeholder="Search event message"
               query={this.state.query}
               onSearch={this.onSearch}
             />
           </div>
         </div>
-        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        <div className="alert alert-block alert-info">
+          Psst! This feature is still a work-in-progress. Thanks for being an early adopter!
+        </div>
         {this.renderStreamBody()}
         <Pagination pageLinks={this.state.pageLinks} />
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectFilters.jsx b/src/sentry/static/sentry/app/views/projectFilters.jsx
index d584e50797..37b88b543a 100644
--- a/src/sentry/static/sentry/app/views/projectFilters.jsx
+++ b/src/sentry/static/sentry/app/views/projectFilters.jsx
@@ -13,11 +13,13 @@ import marked from '../utils/marked';
 
 const FilterSwitch = function(props) {
   return (
-    <Switch size={props.size}
+    <Switch
+      size={props.size}
       isActive={props.data.active}
-      toggle={function () {
+      toggle={function() {
         props.onToggle(props.data, !props.data.active);
-      }} />
+      }}
+    />
   );
 };
 
@@ -27,19 +29,18 @@ FilterSwitch.propTypes = {
   size: React.PropTypes.string.isRequired
 };
 
-
 const FilterRow = React.createClass({
   propTypes: {
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
     data: React.PropTypes.object.isRequired,
-    onToggle: React.PropTypes.func.isRequired,
+    onToggle: React.PropTypes.func.isRequired
   },
 
   getInitialState() {
     return {
       loading: false,
-      error: false,
+      error: false
     };
   },
 
@@ -56,13 +57,15 @@ const FilterRow = React.createClass({
           <div className="col-md-9">
             <h5 style={{marginBottom: 10}}>{data.name}</h5>
             {data.description &&
-              <small className="help-block" dangerouslySetInnerHTML={{
-                __html: marked(data.description)
-              }} />
-            }
+              <small
+                className="help-block"
+                dangerouslySetInnerHTML={{
+                  __html: marked(data.description)
+                }}
+              />}
           </div>
           <div className="col-md-3 align-right" style={{paddingRight: '25px'}}>
-            <FilterSwitch {...this.props} size="lg"/>
+            <FilterSwitch {...this.props} size="lg" />
           </div>
         </div>
       </div>
@@ -71,36 +74,36 @@ const FilterRow = React.createClass({
 });
 
 const LEGACY_BROWSER_SUBFILTERS = {
-  'ie_pre_9': {
+  ie_pre_9: {
     icon: 'internet-explorer',
     helpText: 'Version 8 and lower',
-    title: 'Internet Explorer',
+    title: 'Internet Explorer'
   },
-  'ie9': {
+  ie9: {
     icon: 'internet-explorer',
     helpText: 'Version 9',
-    title: 'Internet Explorer',
+    title: 'Internet Explorer'
   },
-  'ie10': {
+  ie10: {
     icon: 'internet-explorer',
     helpText: 'Version 10',
-    title: 'Internet Explorer',
+    title: 'Internet Explorer'
   },
-  'opera_pre_15': {
+  opera_pre_15: {
     icon: 'opera',
     helpText: 'Version 14 and lower',
-    title: 'Opera',
+    title: 'Opera'
   },
-  'safari_pre_6': {
+  safari_pre_6: {
     icon: 'safari',
     helpText: 'Version 5 and lower',
-    title: 'Safari',
+    title: 'Safari'
   },
-  'android_pre_4': {
+  android_pre_4: {
     icon: 'android',
     helpText: 'Version 3 and lower',
-    title: 'Android',
-  },
+    title: 'Android'
+  }
 };
 
 const LEGACY_BROWSER_KEYS = Object.keys(LEGACY_BROWSER_SUBFILTERS);
@@ -110,7 +113,7 @@ const LegacyBrowserFilterRow = React.createClass({
     orgId: React.PropTypes.string.isRequired,
     projectId: React.PropTypes.string.isRequired,
     data: React.PropTypes.object.isRequired,
-    onToggle: React.PropTypes.func.isRequired,
+    onToggle: React.PropTypes.func.isRequired
   },
 
   getInitialState() {
@@ -125,7 +128,7 @@ const LegacyBrowserFilterRow = React.createClass({
     return {
       loading: false,
       error: false,
-      subfilters: initialSubfilters,
+      subfilters: initialSubfilters
     };
   },
 
@@ -142,11 +145,14 @@ const LegacyBrowserFilterRow = React.createClass({
       subfilters.add(subfilter);
     }
 
-    this.setState({
-      subfilters: new Set(subfilters)
-    }, () => {
-      this.props.onToggle(this.props.data, subfilters);
-    });
+    this.setState(
+      {
+        subfilters: new Set(subfilters)
+      },
+      () => {
+        this.props.onToggle(this.props.data, subfilters);
+      }
+    );
   },
 
   renderSubfilters() {
@@ -158,7 +164,11 @@ const LegacyBrowserFilterRow = React.createClass({
             <div className={'filter-grid-icon icon-' + subfilter.icon} />
             <h5>{subfilter.title}</h5>
             <p className="help-block">{subfilter.helpText}</p>
-            <Switch isActive={this.state.subfilters.has(key)} toggle={this.onToggleSubfilters.bind(this, key)} size="lg"/>
+            <Switch
+              isActive={this.state.subfilters.has(key)}
+              toggle={this.onToggleSubfilters.bind(this, key)}
+              size="lg"
+            />
           </div>
         </div>
       );
@@ -167,7 +177,9 @@ const LegacyBrowserFilterRow = React.createClass({
     // group entries into rows of 3
     let rows = _.groupBy(entries, (entry, i) => Math.floor(i / 3));
 
-    return _.toArray(rows).map((row, i) => <div className="row m-b-1" key={i}>{row}</div>);
+    return _.toArray(rows).map((row, i) => (
+      <div className="row m-b-1" key={i}>{row}</div>
+    ));
   },
 
   render() {
@@ -179,10 +191,12 @@ const LegacyBrowserFilterRow = React.createClass({
           <div className="col-md-9">
             <h5 style={{marginBottom: 10}}>{data.name}</h5>
             {data.description &&
-              <small className="help-block" dangerouslySetInnerHTML={{
-                __html: marked(data.description)
-              }} />
-            }
+              <small
+                className="help-block"
+                dangerouslySetInnerHTML={{
+                  __html: marked(data.description)
+                }}
+              />}
           </div>
           <div className="col-md-3 align-right">
             <div className="filter-grid-filter">
@@ -219,7 +233,7 @@ const ProjectFiltersSettingsForm = React.createClass({
     return {
       hasChanged: false,
       formData: formData,
-      errors: {},
+      errors: {}
     };
   },
 
@@ -228,7 +242,7 @@ const ProjectFiltersSettingsForm = React.createClass({
     formData[name] = value;
     this.setState({
       formData: {...formData},
-      hasChanged: true,
+      hasChanged: true
     });
   },
 
@@ -238,32 +252,35 @@ const ProjectFiltersSettingsForm = React.createClass({
     if (this.state.state === FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: {options: this.state.formData},
-        success: (data) => {
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-            hasChanged: false
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: {options: this.state.formData},
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {},
+              hasChanged: false
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -273,14 +290,20 @@ const ProjectFiltersSettingsForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked p-b-1">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <div className="pull-right">
 
-              <button type="submit" className="btn btn-sm btn-primary"
-                      disabled={isSaving || !this.state.hasChanged}>{t('Save Changes')}</button>
+            <button
+              type="submit"
+              className="btn btn-sm btn-primary"
+              disabled={isSaving || !this.state.hasChanged}
+            >
+              {t('Save Changes')}
+            </button>
 
           </div>
           <h5>{t('Filter errors from these IP addresses:')}</h5>
@@ -291,7 +314,8 @@ const ProjectFiltersSettingsForm = React.createClass({
             placeholder="e.g. 127.0.0.1 or 10.0.0.0/8"
             value={this.state.formData['filters:blacklisted_ips']}
             error={errors['filters:blacklisted_ips']}
-            onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')} />
+            onChange={this.onFieldChange.bind(this, 'filters:blacklisted_ips')}
+          />
         </fieldset>
       </form>
     );
@@ -317,7 +341,7 @@ const ProjectFilters = React.createClass({
       rawStatsData: null,
       processedStats: false,
       projectOptions: {},
-      blankStats: false,
+      blankStats: false
     };
   },
 
@@ -344,7 +368,7 @@ const ProjectFilters = React.createClass({
         let expected = this.state.expected - 1;
         this.setState({
           expected: expected,
-          loading: expected > 0,
+          loading: expected > 0
         });
       }
     });
@@ -354,9 +378,9 @@ const ProjectFilters = React.createClass({
         since: this.state.querySince,
         until: this.state.queryUntil,
         resolution: '1d',
-        stat: 'blacklisted',
+        stat: 'blacklisted'
       },
-      success: (data) => {
+      success: data => {
         this.setState({rawStatsData: data});
       },
       error: () => {
@@ -366,7 +390,7 @@ const ProjectFilters = React.createClass({
         let expected = this.state.expected - 1;
         this.setState({
           expected: expected,
-          loading: expected > 0,
+          loading: expected > 0
         });
       }
     });
@@ -382,7 +406,7 @@ const ProjectFilters = React.createClass({
         let expected = this.state.expected - 1;
         this.setState({
           expected: expected,
-          loading: expected > 0,
+          loading: expected > 0
         });
       }
     });
@@ -397,18 +421,17 @@ const ProjectFilters = React.createClass({
       }
       return {
         x: x,
-        y: [y],
+        y: [y]
       };
     });
     this.setState({
       stats: points,
-      blankStats: blank,
+      blankStats: blank
     });
   },
 
   onToggleFilter(filter, active) {
-    if (this.state.loading)
-      return;
+    if (this.state.loading) return;
 
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     let {orgId, projectId} = this.props.params;
@@ -447,12 +470,9 @@ const ProjectFilters = React.createClass({
   renderBody() {
     let body;
 
-    if (this.state.loading || !this.state.stats)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else
-      body = this.renderResults();
+    if (this.state.loading || !this.state.stats) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else body = this.renderResults();
 
     return body;
   },
@@ -475,21 +495,25 @@ const ProjectFilters = React.createClass({
             <h6>{t('Errors filtered in the last 30 days (by day)')}</h6>
           </div>
           <div className="panel-body p-a-0">
-          {!this.state.blankStats ?
-            <div className="inbound-filters-stats p-a-1">
-              <div className="bar-chart">
-                <StackedBarChart
-                  points={this.state.stats}
-                  height={50}
-                  barClasses={['filtered']}
-                  className="sparkline m-b-0" />
-              </div>
-            </div> :
-            <div className="blankslate p-y-2">
-              <h5>{t('Nothing filtered in the last 30 days.')}</h5>
-              <p className="m-b-0">{t('Issues filtered as a result of your settings below will be shown here.')}</p>
-            </div>
-          }
+            {!this.state.blankStats
+              ? <div className="inbound-filters-stats p-a-1">
+                  <div className="bar-chart">
+                    <StackedBarChart
+                      points={this.state.stats}
+                      height={50}
+                      barClasses={['filtered']}
+                      className="sparkline m-b-0"
+                    />
+                  </div>
+                </div>
+              : <div className="blankslate p-y-2">
+                  <h5>{t('Nothing filtered in the last 30 days.')}</h5>
+                  <p className="m-b-0">
+                    {t(
+                      'Issues filtered as a result of your settings below will be shown here.'
+                    )}
+                  </p>
+                </div>}
           </div>
         </div>
         {this.state.filterList.map(filter => {
@@ -501,15 +525,16 @@ const ProjectFilters = React.createClass({
             onToggle: this.onToggleFilter
           };
           return filter.id === 'legacy-browsers'
-            ? <LegacyBrowserFilterRow {...props}/>
-            : <FilterRow {...props}/>;
+            ? <LegacyBrowserFilterRow {...props} />
+            : <FilterRow {...props} />;
         })}
 
         <div style={{borderTop: '1px solid #f2f3f4', padding: '20px 0 0'}}>
           <ProjectFiltersSettingsForm
             orgId={orgId}
             projectId={projectId}
-            initialData={this.state.projectOptions} />
+            initialData={this.state.projectOptions}
+          />
         </div>
       </div>
     );
@@ -520,7 +545,9 @@ const ProjectFilters = React.createClass({
     return (
       <div>
         <h1>{t('Inbound Data Filters')}</h1>
-        <p>Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.</p>
+        <p>
+          Filters allow you to prevent Sentry from storing events in certain situations. Filtered events are tracked separately from rate limits, and do not apply to any project quotas.
+        </p>
         {this.renderBody()}
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
index 3bf1c8e86c..c93d127c01 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/docsContext.jsx
@@ -7,10 +7,7 @@ import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
 
 const ProjectDocsContext = React.createClass({
-  mixins: [
-    ApiMixin,
-    ProjectState
-  ],
+  mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
     return {
@@ -35,7 +32,7 @@ const ProjectDocsContext = React.createClass({
     let projectId = this.context.project.slug;
 
     this.api.request(`/projects/${orgId}/${projectId}/docs/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           loading: false,
           data: data
@@ -45,10 +42,8 @@ const ProjectDocsContext = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let data = this.state.data;
     return React.cloneElement(this.props.children, {
diff --git a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
index 33eb949fee..314b2dd199 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/gettingStarted.jsx
@@ -16,10 +16,7 @@ const GettingStartedBody = React.createClass({
       <div className="getting-started">
         <div className="sub-header flex flex-container flex-vertically-centered">
           <div className="p-t-1 p-b-1">
-            <ProjectSelector
-              organization={organization}
-              projectId={project.slug}
-              />
+            <ProjectSelector organization={organization} projectId={project.slug} />
           </div>
         </div>
         <div className="container">
diff --git a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
index 70e61a86ae..7ec615be9f 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/languageNav.jsx
@@ -24,18 +24,18 @@ const LanguageNav = React.createClass({
           <li className="list-group-item list-group-header">
             <a onClick={this.toggle} style={{display: 'block'}}>
               <span className="pull-right">
-                {isVisible ?
-                  <span className="icon-minus"/>
-                :
-                  <span className="icon-plus"/>
-                }
+                {isVisible
+                  ? <span className="icon-minus" />
+                  : <span className="icon-plus" />}
               </span>
               <strong>{this.props.name}</strong>
             </a>
           </li>
-          <span style={{
-            display: (isVisible ? 'block' : 'none')
-          }}>
+          <span
+            style={{
+              display: isVisible ? 'block' : 'none'
+            }}
+          >
             {this.props.children}
           </span>
         </ul>
diff --git a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
index e6a2f10c25..4651ac2c26 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/overview.jsx
@@ -27,7 +27,7 @@ const ProjectInstallOverview = React.createClass({
     }
     return (
       <li className={`${root} ${platform}`} key={platform}>
-        <span className={`platformicon platformicon-${platform}`}/>
+        <span className={`platformicon platformicon-${platform}`} />
         <Link to={`${rootUrl}/${platform}/`}>
           {display}
         </Link>
@@ -43,10 +43,9 @@ const ProjectInstallOverview = React.createClass({
     let data = this.state.data;
     let frameworkList = [];
     let languageList = [];
-    data.platforms.forEach((platform) => {
-      platform.integrations.forEach((integration) => {
-        if (integration.type === 'framework')
-          frameworkList.push([platform, integration]);
+    data.platforms.forEach(platform => {
+      platform.integrations.forEach(integration => {
+        if (integration.type === 'framework') frameworkList.push([platform, integration]);
         else if (integration.type === 'language')
           languageList.push([platform, integration]);
       });
@@ -56,28 +55,40 @@ const ProjectInstallOverview = React.createClass({
       <div>
         <h1>{t('Configure your application')}</h1>
 
-        <p>{t('Get started by selecting the platform or language that powers your application.')}</p>
-
-        {this.state.showDsn ?
-          <div>
-            <h3>{t('DSN')}</h3>
-
-            <div className="control-group">
-              <label>{t('DSN')}</label>
-              <AutoSelectText className="form-control disabled">{data.dsn}</AutoSelectText>
-            </div>
+        <p>
+          {t(
+            'Get started by selecting the platform or language that powers your application.'
+          )}
+        </p>
 
-            <div className="control-group">
-              <label>{t('Public DSN')}</label>
-              <AutoSelectText className="form-control disabled">{data.dsnPublic}</AutoSelectText>
-              <div className="help-block">{t('Your public DSN should be used with JavaScript and ActionScript.')}</div>
+        {this.state.showDsn
+          ? <div>
+              <h3>{t('DSN')}</h3>
+
+              <div className="control-group">
+                <label>{t('DSN')}</label>
+                <AutoSelectText className="form-control disabled">
+                  {data.dsn}
+                </AutoSelectText>
+              </div>
+
+              <div className="control-group">
+                <label>{t('Public DSN')}</label>
+                <AutoSelectText className="form-control disabled">
+                  {data.dsnPublic}
+                </AutoSelectText>
+                <div className="help-block">
+                  {t('Your public DSN should be used with JavaScript and ActionScript.')}
+                </div>
+              </div>
             </div>
-          </div>
-        :
-          <p><small>{tct('Already have things setup? [link:Get your DSN].', {
-            link: <a onClick={this.toggleDsn} />
-          })}</small></p>
-        }
+          : <p>
+              <small>
+                {tct('Already have things setup? [link:Get your DSN].', {
+                  link: <a onClick={this.toggleDsn} />
+                })}
+              </small>
+            </p>}
 
         <h3>{t('Popular')}</h3>
 
@@ -93,7 +104,7 @@ const ProjectInstallOverview = React.createClass({
 
         <h3>{t('Frameworks')}</h3>
         <ul className="client-platform-list">
-          {frameworkList.map((item) => {
+          {frameworkList.map(item => {
             let [platform, integration] = item;
             return this.getIntegrationLink(platform.id, integration.id, integration.name);
           })}
@@ -101,19 +112,22 @@ const ProjectInstallOverview = React.createClass({
 
         <h3>{t('Languages')}</h3>
         <ul className="client-platform-list">
-          {languageList.map((item) => {
+          {languageList.map(item => {
             let [platform, integration] = item;
             return this.getIntegrationLink(platform.id, integration.id, integration.name);
           })}
         </ul>
 
         <p>
-          {tct(`
+          {tct(
+            `
              For a complete list of
              client integrations, please visit see [docLink:our in-depth documentation].
-          `, {
-            docLink: <a href="https://docs.sentry.io" />
-          })}
+          `,
+            {
+              docLink: <a href="https://docs.sentry.io" />
+            }
+          )}
         </p>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
index 496c06a778..1c9a45900c 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/platform.jsx
@@ -13,9 +13,7 @@ const ProjectInstallPlatform = React.createClass({
     platformData: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState(props) {
     props = props || this.props;
@@ -24,11 +22,11 @@ const ProjectInstallPlatform = React.createClass({
     let integration;
     let platform;
 
-    props.platformData.platforms.forEach((p_item) => {
+    props.platformData.platforms.forEach(p_item => {
       if (integration) {
         return;
       }
-      integration = p_item.integrations.filter((i_item) => {
+      integration = p_item.integrations.filter(i_item => {
         return i_item.id == key;
       })[0];
       if (integration) {
@@ -64,7 +62,7 @@ const ProjectInstallPlatform = React.createClass({
   fetchData() {
     let {orgId, projectId, platform} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/docs/${platform}/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           loading: false,
           error: false,
@@ -86,8 +84,9 @@ const ProjectInstallPlatform = React.createClass({
       <Link
         key={platform}
         to={`/${orgId}/${projectId}/settings/install/${platform}/`}
-        className="list-group-item">
-          {display || platform}
+        className="list-group-item"
+      >
+        {display || platform}
       </Link>
     );
   },
@@ -96,11 +95,18 @@ const ProjectInstallPlatform = React.createClass({
     let platform = this.state.platform;
     return (
       <div className="install-sidebar col-md-2">
-        {this.props.platformData.platforms.map((p_item) => {
+        {this.props.platformData.platforms.map(p_item => {
           return (
-            <LanguageNav key={p_item.id} name={p_item.name} active={platform && platform.id === p_item.id}>
-              {p_item.integrations.map((i_item) => {
-                return this.getPlatformLink(i_item.id, (i_item.id === p_item.id ? t('Generic') : i_item.name));
+            <LanguageNav
+              key={p_item.id}
+              name={p_item.name}
+              active={platform && platform.id === p_item.id}
+            >
+              {p_item.integrations.map(i_item => {
+                return this.getPlatformLink(
+                  i_item.id,
+                  i_item.id === p_item.id ? t('Generic') : i_item.name
+                );
               })}
             </LanguageNav>
           );
@@ -121,30 +127,33 @@ const ProjectInstallPlatform = React.createClass({
       <div className="box">
         <div className="box-header">
           <div className="pull-right">
-            <a href={integration.link} className="btn btn-sm btn-default">{t('Full Documentation')}</a>
+            <a href={integration.link} className="btn btn-sm btn-default">
+              {t('Full Documentation')}
+            </a>
           </div>
 
           <h3>{t('Configure %(integration)s', {integration: integration.name})}</h3>
         </div>
         <div className="box-content with-padding">
           <p>
-            {tct(`
+            {tct(
+              `
              This is a quick getting started guide. For in-depth instructions
              on integrating Sentry with [integration], view
              [docLink:our complete documentation].
-            `, {
-              integration: integration.name,
-              docLink: <a href={integration.link} />
-            })}
+            `,
+              {
+                integration: integration.name,
+                docLink: <a href={integration.link} />
+              }
+            )}
           </p>
 
-          {this.state.loading ?
-            <LoadingIndicator />
-          : (this.state.error ?
-            <LoadingError onRetry={this.fetchData} />
-          :
-            <div dangerouslySetInnerHTML={{__html: this.state.html}}/>
-          )}
+          {this.state.loading
+            ? <LoadingIndicator />
+            : this.state.error
+                ? <LoadingError onRetry={this.fetchData} />
+                : <div dangerouslySetInnerHTML={{__html: this.state.html}} />}
 
           {this.isGettingStarted() &&
             // Using <a /> instead of <Link /> as hashchange events are not
@@ -152,8 +161,9 @@ const ProjectInstallPlatform = React.createClass({
             <p>
               <Link
                 to={`/${orgId}/${projectId}/#welcome`}
-                className="btn btn-primary btn-lg">
-                  {t('Got it! Take me to the Issue Stream.')}
+                className="btn btn-primary btn-lg"
+              >
+                {t('Got it! Take me to the Issue Stream.')}
               </Link>
             </p>}
         </div>
diff --git a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
index ab7372fa4d..6b92bf51b3 100644
--- a/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
+++ b/src/sentry/static/sentry/app/views/projectIssueTracking.jsx
@@ -15,7 +15,7 @@ const ProjectIssueTracking = React.createClass({
 
     return (
       <div>
-        {this.props.dataList.map((data) => {
+        {this.props.dataList.map(data => {
           return <PluginConfig data={data} {...this.props} key={data.id} />;
         })}
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
index 5926caa66b..c770f01e00 100644
--- a/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
+++ b/src/sentry/static/sentry/app/views/projectProcessingIssues.jsx
@@ -11,26 +11,25 @@ import Switch from '../components/switch';
 import {t, tn} from '../locale';
 
 const MESSAGES = {
-    'native_no_crashed_thread': t('No crashed thread found in crash report'),
-    'native_internal_failure': t('Internal failure when attempting to symbolicate: {error}'),
-    'native_no_symsynd': t('The symbolizer is not configured for this system.'),
-    'native_bad_dsym': t('The debug symbol file used was broken.'),
-    'native_missing_optionally_bundled_dsym': t('An optional debug symbol file was missing.'),
-    'native_missing_dsym': t('A required debug symbol file was missing.'),
-    'native_missing_system_dsym': t('A system debug symbol file was missing.'),
-    'native_missing_symbol': t('Unable to resolve a symbol.'),
-    'native_simulator_frame': t('Encountered an unprocessable simulator frame.'),
-    'native_unknown_image': t('An binary image is referenced that is unknown.')
+  native_no_crashed_thread: t('No crashed thread found in crash report'),
+  native_internal_failure: t('Internal failure when attempting to symbolicate: {error}'),
+  native_no_symsynd: t('The symbolizer is not configured for this system.'),
+  native_bad_dsym: t('The debug symbol file used was broken.'),
+  native_missing_optionally_bundled_dsym: t('An optional debug symbol file was missing.'),
+  native_missing_dsym: t('A required debug symbol file was missing.'),
+  native_missing_system_dsym: t('A system debug symbol file was missing.'),
+  native_missing_symbol: t('Unable to resolve a symbol.'),
+  native_simulator_frame: t('Encountered an unprocessable simulator frame.'),
+  native_unknown_image: t('An binary image is referenced that is unknown.')
 };
 
 const HELP_LINKS = {
-  'native_missing_dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
-  'native_bad_dsym': 'https://docs.sentry.io/clients/cocoa/dsym/',
-  'native_missing_system_dsym': 'https://docs.sentry.io/server/dsym/',
-  'native_missing_symbol': 'https://docs.sentry.io/server/dsym/',
+  native_missing_dsym: 'https://docs.sentry.io/clients/cocoa/dsym/',
+  native_bad_dsym: 'https://docs.sentry.io/clients/cocoa/dsym/',
+  native_missing_system_dsym: 'https://docs.sentry.io/server/dsym/',
+  native_missing_symbol: 'https://docs.sentry.io/server/dsym/'
 };
 
-
 const ProjectProcessingIssues = React.createClass({
   mixins: [ApiMixin, OrganizationState],
 
@@ -41,7 +40,7 @@ const ProjectProcessingIssues = React.createClass({
       reprocessing: false,
       expected: 0,
       error: false,
-      processingIssues: null,
+      processingIssues: null
     };
   },
 
@@ -53,7 +52,7 @@ const ProjectProcessingIssues = React.createClass({
     let formData = this.state.formData;
     formData[name] = !this.state.formData['sentry:reprocessing_active'];
     this.setState({
-      formData: formData,
+      formData: formData
     });
     this.switchReporcessing();
   },
@@ -61,7 +60,7 @@ const ProjectProcessingIssues = React.createClass({
   fetchData() {
     let {orgId, projectId} = this.props.params;
     this.setState({
-      expected: (this.state.expected + 2),
+      expected: this.state.expected + 2
     });
     this.api.request(`/projects/${orgId}/${projectId}/`, {
       success: (data, _, jqXHR) => {
@@ -69,7 +68,7 @@ const ProjectProcessingIssues = React.createClass({
         this.setState({
           expected: expected,
           loading: expected > 0,
-          formData: data.options,
+          formData: data.options
         });
       },
       error: () => {
@@ -122,7 +121,8 @@ const ProjectProcessingIssues = React.createClass({
         this.setState({
           reprocessing: false
         });
-      }, complete: () => {
+      },
+      complete: () => {
         IndicatorStore.remove(loadingIndicator);
       }
     });
@@ -131,7 +131,7 @@ const ProjectProcessingIssues = React.createClass({
   deleteProcessingIssues() {
     let {orgId, projectId} = this.props.params;
     this.setState({
-      expected: (this.state.expected + 1),
+      expected: this.state.expected + 1
     });
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/?detailed=1`, {
       method: 'DELETE',
@@ -140,7 +140,7 @@ const ProjectProcessingIssues = React.createClass({
         this.setState({
           expected: expected,
           error: false,
-          loading: expected > 0,
+          loading: expected > 0
         });
         // we reload to get rid of the badge in the sidebar
         window.location.reload();
@@ -159,14 +159,10 @@ const ProjectProcessingIssues = React.createClass({
   renderDebugTable() {
     let body;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.processingIssues.hasIssues)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.processingIssues.hasIssues) body = this.renderResults();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -245,9 +241,11 @@ const ProjectProcessingIssues = React.createClass({
     if (issues.resolveableIssues <= 0) {
       return null;
     }
-    let fixButton = tn('Click here to trigger processing for %d pending event',
+    let fixButton = tn(
+      'Click here to trigger processing for %d pending event',
       'Click here to trigger processing for %d pending events',
-      issues.resolveableIssues);
+      issues.resolveableIssues
+    );
     return (
       <div className="alert alert-block alert-info">
         Pro Tip: <a onClick={this.sendReprocessing}>{fixButton}</a>
@@ -273,7 +271,7 @@ const ProjectProcessingIssues = React.createClass({
                 <td>{this.renderProblem(item)}</td>
                 <td>{this.renderDetails(item)}</td>
                 <td>{item.numEvents + ''}</td>
-                <td><TimeSince date={item.lastSeen}/></td>
+                <td><TimeSince date={item.lastSeen} /></td>
               </tr>
             );
           })}
@@ -297,24 +295,29 @@ const ProjectProcessingIssues = React.createClass({
           <div className="row">
             {this.state.state === FormState.ERROR &&
               <div className="alert alert-error alert-block">
-                {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-              </div>
-            }
+                {t(
+                  'Unable to save your changes. Please ensure all fields are valid and try again.'
+                )}
+              </div>}
             <div className="col-md-9" style={{marginBottom: 20}}>
               <h5 style={{marginBottom: 10}}>Reprocessing active</h5>
-              {t(`If reprocessing is enabled, Events with fixable issues will be
+              {t(
+                `If reprocessing is enabled, Events with fixable issues will be
                 held back until you resolve them. Processing issues will then
                 show up in the list above with hints how to fix them.
                 If reprocessing is disabled Events with unresolved issues will also
                 show up in the stream.
-                `)}
+                `
+              )}
             </div>
             <div className="col-md-3 align-right" style={{paddingRight: '25px'}}>
-              <Switch size="lg"
+              <Switch
+                size="lg"
                 isDisabled={!access.has('project:write')}
                 isActive={this.state.formData['sentry:reprocessing_active']}
                 isLoading={isSaving}
-                toggle={this.onFieldChange.bind(this, 'sentry:reprocessing_active')} />
+                toggle={this.onFieldChange.bind(this, 'sentry:reprocessing_active')}
+              />
             </div>
           </div>
           {!access.has('project:write') &&
@@ -333,45 +336,52 @@ const ProjectProcessingIssues = React.createClass({
     if (this.state.formState === FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props.params;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: {options: this.state.formData},
-        success: (data) => {
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-          this.deleteProcessingIssues();
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props.params;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: {options: this.state.formData},
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+            this.deleteProcessingIssues();
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
     return (
       <div>
         <h1>{t('Processing Issues')}</h1>
-        <p>{t(`
+        <p>
+          {t(
+            `
           For some platforms the event processing requires configuration or
           manual action.  If a misconfiguration happens or some necessary
           steps are skipped issues can occur during processing.  In these
           cases you can see all the problems here with guides of how to correct
           them.
-        `)}</p>
+        `
+          )}
+        </p>
         {this.renderDebugTable()}
         {this.renderResolveButton()}
         {this.renderReprocessingSettings()}
diff --git a/src/sentry/static/sentry/app/views/projectReleases/index.jsx b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
index 11c35f034c..f64b96dcce 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/index.jsx
@@ -45,16 +45,18 @@ const ProjectReleases = React.createClass({
   componentWillReceiveProps(nextProps) {
     if (nextProps.location.search !== this.props.location.search) {
       let queryParams = nextProps.location.query;
-      this.setState({
-        query: queryParams.query
-      }, this.fetchData);
+      this.setState(
+        {
+          query: queryParams.query
+        },
+        this.fetchData
+      );
     }
   },
 
   onSearch(query) {
     let targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
+    if (query !== '') targetQueryParams.query = query;
 
     let {orgId, projectId} = this.props.params;
     browserHistory.pushState(null, `/${orgId}/${projectId}/releases/`, targetQueryParams);
@@ -92,7 +94,14 @@ const ProjectReleases = React.createClass({
       query: this.state.query
     };
 
-    return '/projects/' + params.orgId + '/' + params.projectId + '/releases/?' + jQuery.param(queryParams);
+    return (
+      '/projects/' +
+      params.orgId +
+      '/' +
+      params.projectId +
+      '/releases/?' +
+      jQuery.param(queryParams)
+    );
   },
 
   getReleaseTrackingUrl() {
@@ -106,16 +115,19 @@ const ProjectReleases = React.createClass({
 
     let params = this.props.params;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
     else if (this.state.releaseList.length > 0)
-      body = <ReleaseList orgId={params.orgId} projectId={params.projectId} releaseList={this.state.releaseList} />;
+      body = (
+        <ReleaseList
+          orgId={params.orgId}
+          projectId={params.projectId}
+          releaseList={this.state.releaseList}
+        />
+      );
     else if (this.state.query && this.state.query !== this.props.defaultQuery)
       body = this.renderNoQueryResults();
-    else
-      body = this.renderEmpty();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -142,9 +154,11 @@ const ProjectReleases = React.createClass({
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('There don\'t seem to be any releases yet.')}</p>
-        <p><a href={this.getReleaseTrackingUrl()}>
-          {t('Learn how to integrate Release Tracking')}
-        </a></p>
+        <p>
+          <a href={this.getReleaseTrackingUrl()}>
+            {t('Learn how to integrate Release Tracking')}
+          </a>
+        </p>
       </div>
     );
   },
@@ -157,7 +171,8 @@ const ProjectReleases = React.createClass({
             <h3>{t('Releases')}</h3>
           </div>
           <div className="col-sm-5 release-search">
-            <SearchBar defaultQuery=""
+            <SearchBar
+              defaultQuery=""
               placeholder={t('Search for a release.')}
               query={this.state.query}
               onSearch={this.onSearch}
diff --git a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
index 2abf920373..ff323ba7f5 100644
--- a/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
+++ b/src/sentry/static/sentry/app/views/projectReleases/releaseList.jsx
@@ -16,33 +16,39 @@ const ReleaseList = React.createClass({
 
     return (
       <ul className="list-group list-group-lg">
-          {this.props.releaseList.map((release) => {
-            return (
-              <li className="list-group-item" key={release.version}>
-                <div className="row row-center-vertically">
-                  <div className="col-sm-4 col-xs-6">
-                    <h2><Version orgId={orgId} projectId={projectId} version={release.version} /></h2>
-                    <p className="m-b-0 text-light">
-                      <span className="icon icon-clock"></span> <TimeSince date={release.dateCreated} />
-                    </p>
-                  </div>
-                  <div className="col-sm-4 hidden-xs">
-                    <ReleaseStats release={release}/>
-                  </div>
-                  <div className="col-sm-2 col-xs-3 text-big text-light">
-                    <Count className="release-count" value={release.newGroups} />
-                  </div>
-                  <div className="col-sm-2 col-xs-3 text-light">
-                    {release.lastEvent ?
-                      <TimeSince date={release.lastEvent} />
-                    :
-                      <span>&mdash;</span>
-                    }
-                  </div>
+        {this.props.releaseList.map(release => {
+          return (
+            <li className="list-group-item" key={release.version}>
+              <div className="row row-center-vertically">
+                <div className="col-sm-4 col-xs-6">
+                  <h2>
+                    <Version
+                      orgId={orgId}
+                      projectId={projectId}
+                      version={release.version}
+                    />
+                  </h2>
+                  <p className="m-b-0 text-light">
+                    <span className="icon icon-clock" />
+                    {' '}
+                    <TimeSince date={release.dateCreated} />
+                  </p>
                 </div>
-              </li>
-            );
-          })}
+                <div className="col-sm-4 hidden-xs">
+                  <ReleaseStats release={release} />
+                </div>
+                <div className="col-sm-2 col-xs-3 text-big text-light">
+                  <Count className="release-count" value={release.newGroups} />
+                </div>
+                <div className="col-sm-2 col-xs-3 text-light">
+                  {release.lastEvent
+                    ? <TimeSince date={release.lastEvent} />
+                    : <span>—</span>}
+                </div>
+              </div>
+            </li>
+          );
+        })}
       </ul>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
index 6904b7b10f..b2b5a675c6 100644
--- a/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
+++ b/src/sentry/static/sentry/app/views/projectSavedSearches.jsx
@@ -15,7 +15,7 @@ const SavedSearchRow = React.createClass({
     access: React.PropTypes.object.isRequired,
     onDefault: React.PropTypes.func.isRequired,
     onUserDefault: React.PropTypes.func.isRequired,
-    onRemove: React.PropTypes.func.isRequired,
+    onRemove: React.PropTypes.func.isRequired
   },
 
   mixins: [ApiMixin],
@@ -23,18 +23,16 @@ const SavedSearchRow = React.createClass({
   getInitialState() {
     return {
       loading: false,
-      error: false,
+      error: false
     };
   },
 
   handleRemove(e) {
     e.preventDefault();
-    if (this.state.loading)
-      return;
+    if (this.state.loading) return;
 
     /* eslint no-alert:0*/
-    if (!window.confirm('Are you sure you want to remove this?'))
-      return;
+    if (!window.confirm('Are you sure you want to remove this?')) return;
 
     let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
     let {orgId, projectId, data} = this.props;
@@ -76,15 +74,21 @@ const SavedSearchRow = React.createClass({
   },
 
   handleDefault() {
-    this.handleUpdate({
-      isDefault: true,
-    }, this.props.onDefault);
+    this.handleUpdate(
+      {
+        isDefault: true
+      },
+      this.props.onDefault
+    );
   },
 
   handleUserDefault() {
-    this.handleUpdate({
-      isUserDefault: true,
-    }, this.props.onUserDefault);
+    this.handleUpdate(
+      {
+        isUserDefault: true
+      },
+      this.props.onUserDefault
+    );
   },
 
   render() {
@@ -96,23 +100,32 @@ const SavedSearchRow = React.createClass({
           <code>{data.query}</code>
         </td>
         <td style={{textAlign: 'center'}}>
-          <input type="radio" name="userDefault" checked={data.isUserDefault}
-                 onChange={this.handleUserDefault}/>
+          <input
+            type="radio"
+            name="userDefault"
+            checked={data.isUserDefault}
+            onChange={this.handleUserDefault}
+          />
         </td>
         {this.props.access.has('project:write') &&
           <td style={{textAlign: 'center'}}>
-            <input type="radio" name="default" checked={data.isDefault}
-                   onChange={this.handleDefault} />
-          </td>
-        }
+            <input
+              type="radio"
+              name="default"
+              checked={data.isDefault}
+              onChange={this.handleDefault}
+            />
+          </td>}
         {this.props.access.has('project:write') &&
           <td style={{textAlign: 'right'}}>
-            <a className="btn btn-sm btn-default" onClick={this.handleRemove}
-               disabled={this.state.loading}>
+            <a
+              className="btn btn-sm btn-default"
+              onClick={this.handleRemove}
+              disabled={this.state.loading}
+            >
               <span className="icon icon-trash" /> &nbsp;{t('Remove')}
             </a>
-          </td>
-        }
+          </td>}
       </tr>
     );
   }
@@ -125,7 +138,7 @@ const ProjectSavedSearches = React.createClass({
     return {
       loading: true,
       error: false,
-      savedSearchList: [],
+      savedSearchList: []
     };
   },
 
@@ -156,43 +169,39 @@ const ProjectSavedSearches = React.createClass({
   handleRemovedSearch(data) {
     let savedSearchList = this.state.savedSearchList;
     this.setState({
-      savedSearchList: savedSearchList.filter((search) => {
+      savedSearchList: savedSearchList.filter(search => {
         return search.id !== data.id;
-      }),
+      })
     });
   },
 
   handleDefaultSearch(data) {
     let savedSearchList = this.state.savedSearchList;
-    savedSearchList.forEach((search) => {
+    savedSearchList.forEach(search => {
       search.isDefault = data.id === search.id;
     });
     this.setState({
-      savedSearchList: savedSearchList,
+      savedSearchList: savedSearchList
     });
   },
 
   handleUserDefaultSearch(data) {
     let savedSearchList = this.state.savedSearchList;
-    savedSearchList.forEach((search) => {
+    savedSearchList.forEach(search => {
       search.isUserDefault = data.id === search.id;
     });
     this.setState({
-      savedSearchList: savedSearchList,
+      savedSearchList: savedSearchList
     });
   },
 
   renderBody() {
     let body;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.savedSearchList.length > 0)
-      body = this.renderResults();
-    else
-      body = this.renderEmpty();
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.savedSearchList.length > 0) body = this.renderResults();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -225,15 +234,12 @@ const ProjectSavedSearches = React.createClass({
               <th>Search</th>
               <th style={{textAlign: 'center', width: 140}}>My Default</th>
               {access.has('project:write') &&
-                <th style={{textAlign: 'center', width: 140}}>Team Default</th>
-              }
-              {access.has('project:write') &&
-                <th style={{width: 120}}/>
-              }
+                <th style={{textAlign: 'center', width: 140}}>Team Default</th>}
+              {access.has('project:write') && <th style={{width: 120}} />}
             </tr>
           </thead>
           <tbody>
-            {this.state.savedSearchList.map((search) => {
+            {this.state.savedSearchList.map(search => {
               return (
                 <SavedSearchRow
                   access={access}
@@ -243,7 +249,8 @@ const ProjectSavedSearches = React.createClass({
                   data={search}
                   onUserDefault={this.handleUserDefaultSearch.bind(this, search)}
                   onDefault={this.handleDefaultSearch.bind(this, search)}
-                  onRemove={this.handleRemovedSearch.bind(this, search)} />
+                  onRemove={this.handleRemovedSearch.bind(this, search)}
+                />
               );
             })}
           </tbody>
diff --git a/src/sentry/static/sentry/app/views/projectSettings/index.jsx b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
index 7dc2d3f0ee..b2846cd507 100644
--- a/src/sentry/static/sentry/app/views/projectSettings/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectSettings/index.jsx
@@ -14,12 +14,10 @@ const ProjectSettings = React.createClass({
 
   contextTypes: {
     location: React.PropTypes.object,
-    organization: React.PropTypes.object,
+    organization: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -36,12 +34,17 @@ const ProjectSettings = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     let params = this.props.params;
-    if (nextProps.params.projectId !== params.projectId ||
-        nextProps.params.orgId !== params.orgId) {
-      this.setState({
-        loading: true,
-        error: false
-      }, this.fetchData);
+    if (
+      nextProps.params.projectId !== params.projectId ||
+      nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(
+        {
+          loading: true,
+          error: false
+        },
+        this.fetchData
+      );
     }
   },
 
@@ -49,7 +52,7 @@ const ProjectSettings = React.createClass({
     let params = this.props.params;
 
     this.api.request(`/projects/${params.orgId}/${params.projectId}/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           project: data,
           loading: false,
@@ -67,10 +70,8 @@ const ProjectSettings = React.createClass({
 
   render() {
     // TODO(dcramer): move sidebar into component
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let {orgId, projectId} = this.props.params;
     let settingsUrlRoot = `/${orgId}/${projectId}/settings`;
@@ -87,41 +88,71 @@ const ProjectSettings = React.createClass({
           <h6 className="nav-header">{t('Configuration')}</h6>
           <ul className="nav nav-stacked">
             <li><a href={`${settingsUrlRoot}/`}>{t('General')}</a></li>
-            <ListLink to={`/${orgId}/${projectId}/settings/alerts/`}
-                      isActive={loc => path.indexOf(loc.pathname) === 0}>{t('Alerts')}</ListLink>
+            <ListLink
+              to={`/${orgId}/${projectId}/settings/alerts/`}
+              isActive={loc => path.indexOf(loc.pathname) === 0}
+            >
+              {t('Alerts')}
+            </ListLink>
             {features.has('quotas') &&
-              <li><a href={`${settingsUrlRoot}/quotas/`}>{t('Rate Limits')}</a></li>
-            }
+              <li><a href={`${settingsUrlRoot}/quotas/`}>{t('Rate Limits')}</a></li>}
             <li><a href={`${settingsUrlRoot}/tags/`}>{t('Tags')}</a></li>
-            <li><a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a></li>
-            <li><a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a></li>
-            <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>{t('Saved Searches')}</ListLink>
-            <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>{t('Debug Symbols')}</ListLink>
-            <ListLink className="badged" to={`/${orgId}/${projectId}/settings/processing-issues/`}>
+            <li>
+              <a href={`${settingsUrlRoot}/issue-tracking/`}>{t('Issue Tracking')}</a>
+            </li>
+            <li>
+              <a href={`${settingsUrlRoot}/release-tracking/`}>{t('Release Tracking')}</a>
+            </li>
+            <ListLink to={`/${orgId}/${projectId}/settings/saved-searches/`}>
+              {t('Saved Searches')}
+            </ListLink>
+            <ListLink to={`/${orgId}/${projectId}/settings/debug-symbols/`}>
+              {t('Debug Symbols')}
+            </ListLink>
+            <ListLink
+              className="badged"
+              to={`/${orgId}/${projectId}/settings/processing-issues/`}
+            >
               {t('Processing Issues')}
               {processingIssues > 0 &&
-                <Badge text={processingIssues > 99 ? '99+' : processingIssues + ''} isNew={true} />
-              }
+                <Badge
+                  text={processingIssues > 99 ? '99+' : processingIssues + ''}
+                  isNew={true}
+                />}
             </ListLink>
           </ul>
           <h6 className="nav-header">{t('Data')}</h6>
           <ul className="nav nav-stacked">
-            <ListLink to={rootInstallPath} isActive={(loc) => {
-              // Because react-router 1.0 removes router.isActive(route)
-              return path === rootInstallPath || /install\/[\w\-]+\/$/.test(path);
-            }}>{t('Error Tracking')}</ListLink>
+            <ListLink
+              to={rootInstallPath}
+              isActive={loc => {
+                // Because react-router 1.0 removes router.isActive(route)
+                return path === rootInstallPath || /install\/[\w\-]+\/$/.test(path);
+              }}
+            >
+              {t('Error Tracking')}
+            </ListLink>
             {isEarlyAdopter &&
-              <ListLink to={`/${orgId}/${projectId}/settings/csp/`}>{t('CSP Reports')}</ListLink>
-            }
-            <ListLink to={`/${orgId}/${projectId}/settings/user-feedback/`}>{t('User Feedback')}</ListLink>
-            <ListLink to={`/${orgId}/${projectId}/settings/filters/`}>{t('Inbound Filters')}</ListLink>
+              <ListLink to={`/${orgId}/${projectId}/settings/csp/`}>
+                {t('CSP Reports')}
+              </ListLink>}
+            <ListLink to={`/${orgId}/${projectId}/settings/user-feedback/`}>
+              {t('User Feedback')}
+            </ListLink>
+            <ListLink to={`/${orgId}/${projectId}/settings/filters/`}>
+              {t('Inbound Filters')}
+            </ListLink>
             <li><a href={`${settingsUrlRoot}/keys/`}>{t('Client Keys')} (DSN)</a></li>
           </ul>
           <h6 className="nav-header">{t('Integrations')}</h6>
           <ul className="nav nav-stacked">
             <li><a href={`${settingsUrlRoot}/plugins/`}>{t('All Integrations')}</a></li>
-            {project.plugins.filter(p => p.enabled).map((plugin) => {
-              return <li key={plugin.id}><a href={`${settingsUrlRoot}/plugins/${plugin.id}/`}>{plugin.name}</a></li>;
+            {project.plugins.filter(p => p.enabled).map(plugin => {
+              return (
+                <li key={plugin.id}>
+                  <a href={`${settingsUrlRoot}/plugins/${plugin.id}/`}>{plugin.name}</a>
+                </li>
+              );
             })}
           </ul>
         </div>
@@ -129,7 +160,7 @@ const ProjectSettings = React.createClass({
           {React.cloneElement(this.props.children, {
             setProjectNavSection: this.props.setProjectNavSection,
             project: project,
-            organization: this.context.organization,
+            organization: this.context.organization
           })}
         </div>
       </div>
diff --git a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
index 84b710203b..e5bbbc2cb7 100644
--- a/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReportSettings.jsx
@@ -25,7 +25,7 @@ const ProjectFeedbackSettingsForm = React.createClass({
     }
     return {
       formData: formData,
-      errors: {},
+      errors: {}
     };
   },
 
@@ -33,7 +33,7 @@ const ProjectFeedbackSettingsForm = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -43,31 +43,34 @@ const ProjectFeedbackSettingsForm = React.createClass({
     if (this.state.state === FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/`, {
-        method: 'PUT',
-        data: {options: this.state.formData},
-        success: (data) => {
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/`, {
+          method: 'PUT',
+          data: {options: this.state.formData},
+          success: data => {
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -77,22 +80,27 @@ const ProjectFeedbackSettingsForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <BooleanField
             key="branding"
             name="branding"
             label={t('Show Sentry Branding')}
-            help={t('Show "powered by Sentry" within the feedback dialog. We appreciate you helping get the word out about Sentry! <3')}
+            help={t(
+              'Show "powered by Sentry" within the feedback dialog. We appreciate you helping get the word out about Sentry! <3'
+            )}
             value={this.state.formData['feedback:branding']}
             error={errors['feedback:branding']}
-            onChange={this.onFieldChange.bind(this, 'feedback:branding')} />
+            onChange={this.onFieldChange.bind(this, 'feedback:branding')}
+          />
         </fieldset>
         <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary"
-                  disabled={isSaving}>{t('Save Changes')}</button>
+          <button type="submit" className="btn btn-primary" disabled={isSaving}>
+            {t('Save Changes')}
+          </button>
         </fieldset>
       </form>
     );
@@ -113,7 +121,7 @@ const ProjectUserReportSettings = React.createClass({
       expected: 2,
 
       keyList: [],
-      projectOptions: {},
+      projectOptions: {}
     };
   },
 
@@ -123,15 +131,18 @@ const ProjectUserReportSettings = React.createClass({
   },
 
   componentDidMount() {
-    window.sentryEmbedCallback = function (embed) {
+    window.sentryEmbedCallback = function(embed) {
       // Mock the embed's submit xhr to always be successful
       // NOTE: this will not have errors if the form is empty
-      embed.submit = function (body) {
+      embed.submit = function(body) {
         this._submitInProgress = true;
-        setTimeout(function () {
-          this._submitInProgress = false;
-          this.onSuccess();
-        }.bind(this), 500);
+        setTimeout(
+          function() {
+            this._submitInProgress = false;
+            this.onSuccess();
+          }.bind(this),
+          500
+        );
       };
     };
   },
@@ -140,7 +151,9 @@ const ProjectUserReportSettings = React.createClass({
   componentWillReceiveProps(nextProps) {
     let location = this.props.location;
     let nextLocation = nextProps.location;
-    if (location.pathname != nextLocation.pathname || location.search != nextLocation.search) {
+    if (
+      location.pathname != nextLocation.pathname || location.search != nextLocation.search
+    ) {
       this.remountComponent();
     }
   },
@@ -161,7 +174,7 @@ const ProjectUserReportSettings = React.createClass({
         this.setState({
           expected: expected,
           loading: expected > 0,
-          keyList: data,
+          keyList: data
         });
       },
       error: () => {
@@ -169,7 +182,7 @@ const ProjectUserReportSettings = React.createClass({
         this.setState({
           error: true,
           expected: expected,
-          loading: expected > 0,
+          loading: expected > 0
         });
       }
     });
@@ -180,7 +193,7 @@ const ProjectUserReportSettings = React.createClass({
         this.setState({
           expected: expected,
           loading: expected > 0,
-          projectOptions: data.options,
+          projectOptions: data.options
         });
       },
       error: () => {
@@ -195,9 +208,9 @@ const ProjectUserReportSettings = React.createClass({
   },
 
   getInstructions() {
-    let dsn = (this.state.keyList.length ?
-      this.state.keyList[0].dsn.public :
-      'https://public@sentry.example.com/1');
+    let dsn = this.state.keyList.length
+      ? this.state.keyList[0].dsn.public
+      : 'https://public@sentry.example.com/1';
 
     return (
       '<!-- Sentry JS SDK 2.1.+ required -->\n' +
@@ -208,7 +221,9 @@ const ProjectUserReportSettings = React.createClass({
       '    // grab the eventId generated by the Sentry SDK\n' +
       '    eventId: \'{{ request.sentry.id }}\',\n\n' +
       '    // use the public DSN (dont include your secret!)\n' +
-      '    dsn: \'' + dsn + '\'\n' +
+      '    dsn: \'' +
+      dsn +
+      '\'\n' +
       '  });\n' +
       '  </script>\n' +
       '{% endif %}\n'
@@ -216,16 +231,18 @@ const ProjectUserReportSettings = React.createClass({
   },
 
   getBrowserJSInstructions() {
-    let dsn = (this.state.keyList.length ?
-      this.state.keyList[0].dsn.public :
-      'https://public@sentry.example.com/1');
+    let dsn = this.state.keyList.length
+      ? this.state.keyList[0].dsn.public
+      : 'https://public@sentry.example.com/1';
 
     return (
       '<!-- Sentry JS SDK 2.1.+ required -->\n' +
       '<script src="https://cdn.ravenjs.com/2.1.0/raven.min.js"></script>\n\n' +
       '<script>\n' +
       '// configure the SDK as you normally would\n' +
-      'Raven.config(\'' + dsn + '\').install();\n\n' +
+      'Raven.config(\'' +
+      dsn +
+      '\').install();\n\n' +
       '/**\n' +
       ' * Report a routing error to Sentry and show a feedback dialog to\n' +
       ' * the user.\n' +
@@ -260,8 +277,7 @@ const ProjectUserReportSettings = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return this.renderLoading();
+    if (this.state.loading) return this.renderLoading();
 
     let {orgId, projectId} = this.props.params;
 
@@ -270,20 +286,34 @@ const ProjectUserReportSettings = React.createClass({
       <div>
         <h1>{t('User Feedback')}</h1>
 
-        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        <div className="alert alert-block alert-info">
+          Psst! This feature is still a work-in-progress. Thanks for being an early adopter!
+        </div>
 
-        <p>Enabling User Feedback allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.</p>
-        <p>When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry</p>
-        <p><a className="btn btn-primary" onClick={this.handleClick}>See the report dialog in action</a></p>
+        <p>
+          Enabling User Feedback allows you to interact with your users on an unprecedented level. Collect additional details about issues affecting them, and more importantly reach out to them with resolutions.
+        </p>
+        <p>
+          When configured, your users will be presented with a dialog prompting them for additional information. That information will get attached to the issue in Sentry
+        </p>
+        <p>
+          <a className="btn btn-primary" onClick={this.handleClick}>
+            See the report dialog in action
+          </a>
+        </p>
 
         <div className="box">
           <div className="box-header">
             <h3>{t('Integration')}</h3>
           </div>
           <div className="box-content with-padding">
-            <p>The following example uses our Django integration. Check the documentation for the SDK you're using for more details.</p>
+            <p>
+              The following example uses our Django integration. Check the documentation for the SDK you're using for more details.
+            </p>
             <pre>{this.getInstructions()}</pre>
-            <p>If you're capturing an error with our Browser JS SDK, things get even simpler:</p>
+            <p>
+              If you're capturing an error with our Browser JS SDK, things get even simpler:
+            </p>
             <pre>{this.getBrowserJSInstructions()}</pre>
           </div>
         </div>
@@ -296,7 +326,8 @@ const ProjectUserReportSettings = React.createClass({
             <ProjectFeedbackSettingsForm
               orgId={orgId}
               projectId={projectId}
-              initialData={this.state.projectOptions} />
+              initialData={this.state.projectOptions}
+            />
           </div>
         </div>
 
diff --git a/src/sentry/static/sentry/app/views/projectUserReports.jsx b/src/sentry/static/sentry/app/views/projectUserReports.jsx
index 1c2e0919c1..7987f2d8e9 100644
--- a/src/sentry/static/sentry/app/views/projectUserReports.jsx
+++ b/src/sentry/static/sentry/app/views/projectUserReports.jsx
@@ -24,7 +24,7 @@ const ProjectUserReports = React.createClass({
   getDefaultProps() {
     return {
       defaultQuery: '',
-      defaultStatus: 'unresolved',
+      defaultStatus: 'unresolved'
     };
   },
 
@@ -53,27 +53,30 @@ const ProjectUserReports = React.createClass({
 
   getQueryStringState(props) {
     let location = props.location;
-    let status = (location.query.hasOwnProperty('status')
+    let status = location.query.hasOwnProperty('status')
       ? location.query.status
-      : this.props.defaultStatus);
-    let query = (location.query.hasOwnProperty('query')
+      : this.props.defaultStatus;
+    let query = location.query.hasOwnProperty('query')
       ? location.query.query
-      : this.props.defaultQuery);
+      : this.props.defaultQuery;
     return {
       query: query,
-      status: status,
+      status: status
     };
   },
 
   onSearch(query) {
     let targetQueryParams = {};
-    if (query !== '')
-      targetQueryParams.query = query;
+    if (query !== '') targetQueryParams.query = query;
     if (this.state.status !== this.props.defaultStatus)
       targetQueryParams.status = this.state.status;
 
     let {orgId, projectId} = this.props.params;
-    browserHistory.pushState(null, `/${orgId}/${projectId}/user-feedback/`, targetQueryParams);
+    browserHistory.pushState(
+      null,
+      `/${orgId}/${projectId}/user-feedback/`,
+      targetQueryParams
+    );
   },
 
   fetchData() {
@@ -108,7 +111,7 @@ const ProjectUserReports = React.createClass({
       ...this.props.location.query,
       limit: 50,
       query: this.state.query,
-      status: this.state.status,
+      status: this.state.status
     };
 
     return `/projects/${params.orgId}/${params.projectId}/user-reports/?${jQuery.param(queryParams)}`;
@@ -123,16 +126,12 @@ const ProjectUserReports = React.createClass({
   renderStreamBody() {
     let body;
 
-    if (this.state.loading)
-      body = this.renderLoading();
-    else if (this.state.error)
-      body = <LoadingError onRetry={this.fetchData} />;
-    else if (this.state.reportList.length > 0)
-      body = this.renderResults();
+    if (this.state.loading) body = this.renderLoading();
+    else if (this.state.error) body = <LoadingError onRetry={this.fetchData} />;
+    else if (this.state.reportList.length > 0) body = this.renderResults();
     else if (this.state.query && this.state.query !== this.props.defaultQuery)
       body = this.renderNoQueryResults();
-    else
-      body = this.renderEmpty();
+    else body = this.renderEmpty();
 
     return body;
   },
@@ -159,7 +158,11 @@ const ProjectUserReports = React.createClass({
       <div className="box empty-stream">
         <span className="icon icon-exclamation" />
         <p>{t('No user reports have been collected for this project.')}</p>
-        <p><Link to={this.getUserReportsUrl()}>{t('Learn how to integrate User Feedback')}</Link></p>
+        <p>
+          <Link to={this.getUserReportsUrl()}>
+            {t('Learn how to integrate User Feedback')}
+          </Link>
+        </p>
       </div>
     );
   },
@@ -172,18 +175,21 @@ const ProjectUserReports = React.createClass({
 
       return (
         <CompactIssue
-            key={item.id}
-            id={issue.id}
-            data={issue}
-            orgId={orgId}
-            projectId={projectId}>
+          key={item.id}
+          id={issue.id}
+          data={issue}
+          orgId={orgId}
+          projectId={projectId}
+        >
           <div className="activity-container" style={{margin: '10px 0 5px'}}>
             <ul className="activity">
               <li className="activity-note" style={{paddingBottom: 0}}>
                 <Avatar user={item} size={64} className="avatar" />
                 <div className="activity-bubble">
                   <TimeSince date={item.dateCreated} />
-                  <div className="activity-author">{item.name} <small>{item.email}</small></div>
+                  <div className="activity-author">
+                    {item.name} <small>{item.email}</small>
+                  </div>
                   <p dangerouslySetInnerHTML={{__html: body}} />
                 </div>
               </li>
@@ -211,18 +217,26 @@ const ProjectUserReports = React.createClass({
           </div>
           <div className="col-sm-3" style={{textAlign: 'right'}}>
             <div className="btn-group">
-              <Link to={path}
-                    className={'btn btn-sm btn-default' + (status === 'unresolved' ? ' active' : '')}>
+              <Link
+                to={path}
+                className={
+                  'btn btn-sm btn-default' + (status === 'unresolved' ? ' active' : '')
+                }
+              >
                 {t('Unresolved')}
               </Link>
-              <Link to={{pathname: path, query: {status: ''}}}
-                    className={'btn btn-sm btn-default' + (status === '' ? ' active' : '')}>
+              <Link
+                to={{pathname: path, query: {status: ''}}}
+                className={'btn btn-sm btn-default' + (status === '' ? ' active' : '')}
+              >
                 {t('All Issues')}
               </Link>
             </div>
           </div>
         </div>
-        <div className="alert alert-block alert-info">Psst! This feature is still a work-in-progress. Thanks for being an early adopter!</div>
+        <div className="alert alert-block alert-info">
+          Psst! This feature is still a work-in-progress. Thanks for being an early adopter!
+        </div>
         {this.renderStreamBody()}
         <Pagination pageLinks={this.state.pageLinks} />
       </div>
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
index 952fbe75a7..8f60be27fd 100644
--- a/src/sentry/static/sentry/app/views/projects/projectContext.jsx
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -88,8 +88,10 @@ const ProjectContext = React.createClass({
     // See: https://github.com/gaearon/react-document-title/issues/35
 
     // intentionally shallow comparing references
-    if (prevState.project !== this.state.project ||
-      prevState.organization !== this.state.organization) {
+    if (
+      prevState.project !== this.state.project ||
+      prevState.organization !== this.state.organization
+    ) {
       let docTitle = this.refs.docTitle;
       if (docTitle) docTitle.forceUpdate();
     }
@@ -100,8 +102,7 @@ const ProjectContext = React.createClass({
   },
 
   getTitle() {
-    if (this.state.project)
-      return this.state.team.name + ' / ' + this.state.project.name;
+    if (this.state.project) return this.state.team.name + ' / ' + this.state.project.name;
     return 'Sentry';
   },
 
@@ -129,8 +130,8 @@ const ProjectContext = React.createClass({
     let activeProject = null;
     let activeTeam = null;
     let org = this.context.organization;
-    org.teams.forEach((team) => {
-      team.projects.forEach((project) => {
+    org.teams.forEach(team => {
+      team.projects.forEach(project => {
         if (project.slug == projectSlug) {
           activeProject = project;
           activeTeam = team;
@@ -157,13 +158,13 @@ const ProjectContext = React.createClass({
     if (activeProject && hasAccess) {
       // TODO(dcramer): move member list to organization level
       this.api.request(this.getMemberListEndpoint(), {
-        success: (data) => {
-          MemberListStore.loadInitialData(data.filter((m) => m.user).map((m) => m.user));
+        success: data => {
+          MemberListStore.loadInitialData(data.filter(m => m.user).map(m => m.user));
         }
       });
 
       this.api.request(this.getEnvironmentListEndpoint(), {
-        success: (data) => {
+        success: data => {
           EnvironmentStore.loadInitialData(data);
         }
       });
@@ -205,8 +206,7 @@ const ProjectContext = React.createClass({
   },
 
   renderBody() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
+    if (this.state.loading) return <LoadingIndicator />;
     else if (this.state.error) {
       switch (this.state.errorType) {
         case ERROR_TYPES.PROJECT_NOT_FOUND:
@@ -222,9 +222,10 @@ const ProjectContext = React.createClass({
           // out into a reusable missing access error component
           return (
             <MissingProjectMembership
-                organization={this.getOrganization()}
-                team={this.state.team}
-                project={this.state.project} />
+              organization={this.getOrganization()}
+              team={this.state.team}
+              project={this.state.project}
+            />
           );
         default:
           return <LoadingError onRetry={this.remountComponent} />;
@@ -235,7 +236,11 @@ const ProjectContext = React.createClass({
   },
 
   render() {
-    return <DocumentTitle ref="docTitle" title={this.getTitle()}>{this.renderBody()}</DocumentTitle>;
+    return (
+      <DocumentTitle ref="docTitle" title={this.getTitle()}>
+        {this.renderBody()}
+      </DocumentTitle>
+    );
   }
 });
 
diff --git a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
index 74993c9b58..3ad02bb6cf 100644
--- a/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseAllEvents.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {Link} from 'react-router';
 import GroupList from '../components/groupList';
-import{t} from '../locale';
+import {t} from '../locale';
 
 const ReleaseAllEvents = React.createClass({
   contextTypes: {
@@ -13,11 +13,13 @@ const ReleaseAllEvents = React.createClass({
     return (
       <div>
         <div className="alert alert-block">
-          <Link to={{
-                  pathname: `/${orgId}/${projectId}/`,
-                  query: {query: 'release:' + this.context.release.version}
-                }}>
-            <span className="icon icon-open"></span>
+          <Link
+            to={{
+              pathname: `/${orgId}/${projectId}/`,
+              query: {query: 'release:' + this.context.release.version}
+            }}
+          >
+            <span className="icon icon-open" />
             {t('View all events seen in this release in the stream')}
           </Link>
         </div>
@@ -25,7 +27,9 @@ const ReleaseAllEvents = React.createClass({
           orgId={orgId}
           projectId={projectId}
           query={'release:"' + this.context.release.version + '"'}
-          canSelectGroups={false} bulkActions={false} />
+          canSelectGroups={false}
+          bulkActions={false}
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
index bd51af481d..81b481c12c 100644
--- a/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
+++ b/src/sentry/static/sentry/app/views/releaseArtifacts.jsx
@@ -83,7 +83,7 @@ const ReleaseArtifacts = React.createClass({
     this.api.request(this.getFilesEndpoint() + `${id}/`, {
       method: 'DELETE',
       success: () => {
-        let fileList = this.state.fileList.filter((file) => {
+        let fileList = this.state.fileList.filter(file => {
           return file.id !== id;
         });
 
@@ -107,14 +107,12 @@ const ReleaseArtifacts = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
     else if (this.state.fileList.length === 0)
       return (
         <div className="box empty-stream">
-          <span className="icon icon-exclamation"></span>
+          <span className="icon icon-exclamation" />
           <p>{t('There are no artifacts uploaded for this release.')}</p>
         </div>
       );
@@ -129,46 +127,58 @@ const ReleaseArtifacts = React.createClass({
             <div className="row">
               <div className="col-sm-8 col-xs-7">{'Name'}</div>
               <div className="col-sm-2 col-xs-2">{'Size'}</div>
-              <div className="col-sm-2 col-xs-3 align-right"></div>
+              <div className="col-sm-2 col-xs-3 align-right" />
             </div>
           </div>
           <ul className="list-group">
-          {this.state.fileList.map((file) => {
-            return (
-              <li className="list-group-item" key={file.id}>
-                <div className="row row-flex row-center-vertically">
-                  <div className="col-md-8 col-sm-9" style={{wordWrap: 'break-word'}}><strong>{file.name || '(empty)'}</strong></div>
-                  <div className="col-md-2 col-sm-12"><FileSize bytes={file.size} /></div>
-                  <div className="col-md-2 col-sm-3 align-right list-group-actions">
-                    {access.has('project:write') ?
-                      <a
-                          href={this.api.baseUrl + this.getFilesEndpoint() + `${file.id}/?download=1`}
-                          className="btn btn-sm btn-default">
-                          <span className="icon icon-open" />
-                      </a>
-                      :
-                      <div
-                        className="btn btn-sm btn-default disabled tip" title={t('You do not have the required permission to download this artifact.')}>
-                        <span className="icon icon-open" />
-                      </div>
-                    }
-                    <LinkWithConfirmation
-                      className="btn btn-sm btn-default"
-                      title={t('Delete artifact')}
-                      message={t('Are you sure you want to remove this artifact?')}
-                      onConfirm={this.handleRemove.bind(this, file.id)}>
-
-                      <span className="icon icon-trash" />
-                    </LinkWithConfirmation>
+            {this.state.fileList.map(file => {
+              return (
+                <li className="list-group-item" key={file.id}>
+                  <div className="row row-flex row-center-vertically">
+                    <div className="col-md-8 col-sm-9" style={{wordWrap: 'break-word'}}>
+                      <strong>{file.name || '(empty)'}</strong>
+                    </div>
+                    <div className="col-md-2 col-sm-12">
+                      <FileSize bytes={file.size} />
+                    </div>
+                    <div className="col-md-2 col-sm-3 align-right list-group-actions">
+                      {access.has('project:write')
+                        ? <a
+                            href={
+                              this.api.baseUrl +
+                                this.getFilesEndpoint() +
+                                `${file.id}/?download=1`
+                            }
+                            className="btn btn-sm btn-default"
+                          >
+                            <span className="icon icon-open" />
+                          </a>
+                        : <div
+                            className="btn btn-sm btn-default disabled tip"
+                            title={t(
+                              'You do not have the required permission to download this artifact.'
+                            )}
+                          >
+                            <span className="icon icon-open" />
+                          </div>}
+                      <LinkWithConfirmation
+                        className="btn btn-sm btn-default"
+                        title={t('Delete artifact')}
+                        message={t('Are you sure you want to remove this artifact?')}
+                        onConfirm={this.handleRemove.bind(this, file.id)}
+                      >
+
+                        <span className="icon icon-trash" />
+                      </LinkWithConfirmation>
+                    </div>
                   </div>
-                </div>
-              </li>
-            );
-          })}
-        </ul>
+                </li>
+              );
+            })}
+          </ul>
+        </div>
+        <Pagination pageLinks={this.state.pageLinks} />
       </div>
-      <Pagination pageLinks={this.state.pageLinks}/>
-    </div>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/releaseDetails.jsx b/src/sentry/static/sentry/app/views/releaseDetails.jsx
index 3e84a31626..1d1f1aa28e 100644
--- a/src/sentry/static/sentry/app/views/releaseDetails.jsx
+++ b/src/sentry/static/sentry/app/views/releaseDetails.jsx
@@ -24,10 +24,7 @@ const ReleaseDetails = React.createClass({
     release: React.PropTypes.object
   },
 
-  mixins: [
-    ApiMixin,
-    ProjectState
-  ],
+  mixins: [ApiMixin, ProjectState],
 
   getInitialState() {
     return {
@@ -62,12 +59,13 @@ const ReleaseDetails = React.createClass({
     });
 
     this.api.request(this.getReleaseDetailsEndpoint(), {
-      success: (data) => {
+      success: data => {
         this.setState({
           loading: false,
           release: data
         });
-      }, error: () => {
+      },
+      error: () => {
         this.setState({
           loading: false,
           error: true
@@ -82,18 +80,24 @@ const ReleaseDetails = React.createClass({
     let projectId = params.projectId;
     let version = params.version;
 
-    return '/projects/' + orgId + '/' + projectId + '/releases/' + encodeURIComponent(version) + '/';
+    return (
+      '/projects/' +
+      orgId +
+      '/' +
+      projectId +
+      '/releases/' +
+      encodeURIComponent(version) +
+      '/'
+    );
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let release = this.state.release;
     let {orgId, projectId} = this.props.params;
-    let hasReleases = (new Set(this.context.organization.features)).has('release-commits');
+    let hasReleases = new Set(this.context.organization.features).has('release-commits');
     let basePath = `/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/`;
     return (
       <DocumentTitle title={this.getTitle()}>
@@ -101,68 +105,105 @@ const ReleaseDetails = React.createClass({
           <div className="release-details">
             <div className="row">
               <div className="col-sm-4 col-xs-12">
-                <h3>{t('Release')} <strong><Version orgId={orgId} projectId={projectId} version={release.version} anchor={false} /></strong></h3>
+                <h3>
+                  {t('Release')}
+                  {' '}
+                  <strong>
+                    <Version
+                      orgId={orgId}
+                      projectId={projectId}
+                      version={release.version}
+                      anchor={false}
+                    />
+                  </strong>
+                </h3>
                 <div className="release-meta">
-                  <span className="icon icon-clock"></span> <TimeSince date={release.dateCreated} />
+                  <span className="icon icon-clock" />
+                  {' '}
+                  <TimeSince date={release.dateCreated} />
                 </div>
               </div>
               <div className="col-sm-2 hidden-xs">
-                <ReleaseStats release={release}/>
+                <ReleaseStats release={release} />
               </div>
               <div className="col-sm-2 hidden-xs">
                 <div className="release-stats">
                   <h6 className="nav-header">{t('New Issues')}</h6>
-                  <span className="stream-count"><Count value={release.newGroups} /></span>
+                  <span className="stream-count">
+                    <Count value={release.newGroups} />
+                  </span>
                 </div>
               </div>
               <div className="col-sm-2 hidden-xs">
                 <div className="release-stats">
                   <h6 className="nav-header">{t('First Event')}</h6>
-                  {release.firstEvent ?
-                    <span className="stream-count"><TimeSince date={release.firstEvent} /></span>
-                  :
-                    <span>&mdash;</span>
-                  }
+                  {release.firstEvent
+                    ? <span className="stream-count">
+                        <TimeSince date={release.firstEvent} />
+                      </span>
+                    : <span>—</span>}
                 </div>
               </div>
               <div className="col-sm-2 hidden-xs">
                 <div className="release-stats">
                   <h6 className="nav-header">{t('Last Event')}</h6>
-                  {release.lastEvent ?
-                    <span className="stream-count"><TimeSince date={release.lastEvent} /></span>
-                  :
-                    <span>&mdash;</span>
-                  }
+                  {release.lastEvent
+                    ? <span className="stream-count">
+                        <TimeSince date={release.lastEvent} />
+                      </span>
+                    : <span>—</span>}
                 </div>
               </div>
             </div>
             <ul className="nav nav-tabs">
               {hasReleases &&
                 <ListLink
-                    to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/overview/`} isActive={(loc) => {
-                // react-router isActive will return true for any route that is part of the active route
-                // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
-                return (hasReleases && this.props.location.pathname === basePath) ||
-                       (loc.pathname === this.props.location.pathname);
-              }}>{t('Overview')}</ListLink>
-              }
-              <ListLink to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/new-events/`} isActive={(loc) => {
-                // react-router isActive will return true for any route that is part of the active route
-                // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
-                return (!hasReleases && this.props.location.pathname === basePath) ||
-                       (loc.pathname === this.props.location.pathname);
-              }}>{t('New Issues')}</ListLink>
-              <ListLink to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/all-events/`}>{t('All Issues')}</ListLink>
-              <ListLink to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/artifacts/`}>{t('Artifacts')}</ListLink>
-
-              {(new Set(this.context.organization.features)).has('release-commits') &&
+                  to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/overview/`}
+                  isActive={loc => {
+                    // react-router isActive will return true for any route that is part of the active route
+                    // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
+                    return (
+                      (hasReleases && this.props.location.pathname === basePath) ||
+                      loc.pathname === this.props.location.pathname
+                    );
+                  }}
+                >
+                  {t('Overview')}
+                </ListLink>}
+              <ListLink
+                to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/new-events/`}
+                isActive={loc => {
+                  // react-router isActive will return true for any route that is part of the active route
+                  // e.g. parent routes. To avoid matching on sub-routes, insist on strict path equality.
+                  return (
+                    (!hasReleases && this.props.location.pathname === basePath) ||
+                    loc.pathname === this.props.location.pathname
+                  );
+                }}
+              >
+                {t('New Issues')}
+              </ListLink>
+              <ListLink
+                to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/all-events/`}
+              >
+                {t('All Issues')}
+              </ListLink>
+              <ListLink
+                to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/artifacts/`}
+              >
+                {t('Artifacts')}
+              </ListLink>
+
+              {new Set(this.context.organization.features).has('release-commits') &&
                 <ListLink
-                  to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/commits/`}>{t('Commits')}</ListLink>
-              }
+                  to={`/${orgId}/${projectId}/releases/${encodeURIComponent(release.version)}/commits/`}
+                >
+                  {t('Commits')}
+                </ListLink>}
             </ul>
           </div>
           {React.cloneElement(this.props.children, {
-            release: release,
+            release: release
           })}
         </div>
       </DocumentTitle>
diff --git a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
index 86ec92fa4c..976c53870e 100644
--- a/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
+++ b/src/sentry/static/sentry/app/views/releaseNewEvents.jsx
@@ -13,11 +13,13 @@ const ReleaseNewEvents = React.createClass({
     return (
       <div>
         <div className="alert alert-block">
-          <Link to={{
-                  pathname: `/${orgId}/${projectId}/`,
-                  query: {query: 'first-release:' + this.context.release.version}
-                }}>
-            <span className="icon icon-open"></span>
+          <Link
+            to={{
+              pathname: `/${orgId}/${projectId}/`,
+              query: {query: 'first-release:' + this.context.release.version}
+            }}
+          >
+            <span className="icon icon-open" />
             {t('View new events seen in this release in the stream')}
           </Link>
         </div>
@@ -25,7 +27,9 @@ const ReleaseNewEvents = React.createClass({
           orgId={orgId}
           projectId={projectId}
           query={'first-release:"' + this.context.release.version + '"'}
-          canSelectGroups={false} bulkActions={false} />
+          canSelectGroups={false}
+          bulkActions={false}
+        />
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
index a1c48ec074..29c0990c0b 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseCommits.jsx
@@ -12,7 +12,7 @@ import {t} from '../../locale';
 const CommitLink = React.createClass({
   propTypes: {
     commitId: React.PropTypes.string,
-    repository: React.PropTypes.object,
+    repository: React.PropTypes.object
   },
 
   getCommitUrl() {
@@ -26,12 +26,14 @@ const CommitLink = React.createClass({
     let commitUrl = this.getCommitUrl();
     let shortId = this.props.commitId.slice(0, 7);
 
-    return (commitUrl ?
-              <a className="btn btn-default btn-sm"
-                 href={commitUrl}
-                 target="_blank"><span
-                 className={'icon-mark-' + this.props.repository.provider.id}/>&nbsp; {shortId}</a> :
-              <span>{shortId}</span>);
+    return commitUrl
+      ? <a className="btn btn-default btn-sm" href={commitUrl} target="_blank">
+          <span className={'icon-mark-' + this.props.repository.provider.id} />
+          &nbsp;
+          {' '}
+          {shortId}
+        </a>
+      : <span>{shortId}</span>;
   }
 });
 
@@ -41,7 +43,7 @@ const ReleaseCommit = React.createClass({
     commitMessage: React.PropTypes.string,
     commitDateCreated: React.PropTypes.string,
     author: React.PropTypes.object,
-    repository: React.PropTypes.object,
+    repository: React.PropTypes.object
   },
 
   render() {
@@ -49,13 +51,24 @@ const ReleaseCommit = React.createClass({
       <li className="list-group-item" key={this.props.commitId}>
         <div className="row row-center-vertically">
           <div className="col-xs-8 list-group-avatar">
-            <Avatar user={this.props.author}/>
+            <Avatar user={this.props.author} />
             <h5>{this.props.commitMessage || t('No message provided')}</h5>
-            <p><strong>{this.props.author.name || t('Unknown author')}</strong> committed <TimeSince date={this.props.commitDateCreated} /></p>
+            <p>
+              <strong>{this.props.author.name || t('Unknown author')}</strong>
+              {' '}
+              committed
+              {' '}
+              <TimeSince date={this.props.commitDateCreated} />
+            </p>
+          </div>
+          <div className="col-xs-2">
+            <span className="repo-label">{this.props.repository.name}</span>
           </div>
-          <div className="col-xs-2"><span className="repo-label">{this.props.repository.name}</span></div>
           <div className="col-xs-2 align-right">
-            <CommitLink commitId={this.props.commitId} repository={this.props.repository}/>
+            <CommitLink
+              commitId={this.props.commitId}
+              repository={this.props.repository}
+            />
           </div>
         </div>
       </li>
@@ -99,7 +112,7 @@ const ReleaseCommits = React.createClass({
   },
 
   emptyState() {
-    return(
+    return (
       <div className="box empty-stream m-y-0">
         <span className="icon icon-exclamation" />
         <p>There are no commits associated with this release.</p>
@@ -109,16 +122,13 @@ const ReleaseCommits = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator/>;
+    if (this.state.loading) return <LoadingIndicator />;
 
-    if (this.state.error)
-      return <LoadingError/>;
+    if (this.state.error) return <LoadingError />;
 
     let {commitList} = this.state;
 
-    if (!commitList.length)
-      return <this.emptyState/>;
+    if (!commitList.length) return <this.emptyState />;
 
     return (
       <div className="panel panel-default">
@@ -145,7 +155,7 @@ const ReleaseCommits = React.createClass({
                 commitMessage={commit.message}
                 commitDateCreated={commit.dateCreated}
                 repository={commit.repository}
-                />
+              />
             );
           })}
         </ul>
diff --git a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
index bc7092165b..12a51991bd 100644
--- a/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
+++ b/src/sentry/static/sentry/app/views/releases/releaseOverview.jsx
@@ -14,7 +14,6 @@ import ApiMixin from '../../mixins/apiMixin';
 import {t} from '../../locale';
 
 const ReleaseOverview = React.createClass({
-
   mixins: [ApiMixin],
 
   getInitialState() {
@@ -24,7 +23,7 @@ const ReleaseOverview = React.createClass({
       projects: [],
       fileList: [],
       deploys: [],
-      hasRepos: false,
+      hasRepos: false
     };
   },
 
@@ -37,12 +36,12 @@ const ReleaseOverview = React.createClass({
       data: this.props.location.query,
       success: (data, _, jqXHR) => {
         this.setState({
-          fileList: data,
+          fileList: data
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -58,12 +57,12 @@ const ReleaseOverview = React.createClass({
       method: 'GET',
       success: (data, _, jqXHR) => {
         this.setState({
-          projects: data.projects,
+          projects: data.projects
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -77,12 +76,12 @@ const ReleaseOverview = React.createClass({
       success: (data, _, jqXHR) => {
         this.setState({
           deploys: data,
-          loading: false,
+          loading: false
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -95,12 +94,12 @@ const ReleaseOverview = React.createClass({
       method: 'GET',
       success: (data, _, jqXHR) => {
         this.setState({
-          hasRepos: data.length > 0,
+          hasRepos: data.length > 0
         });
       },
       error: () => {
         this.setState({
-          error: true,
+          error: true
         });
       }
     });
@@ -113,25 +112,25 @@ const ReleaseOverview = React.createClass({
   render() {
     let {orgId, projectId, version} = this.props.params;
 
-    if (this.state.loading)
-      return <LoadingIndicator/>;
+    if (this.state.loading) return <LoadingIndicator />;
 
-    if (this.state.error)
-      return <LoadingError/>;
+    if (this.state.error) return <LoadingError />;
 
     let {fileList, projects, hasRepos} = this.state;
 
     // convert list of individual file changes (can be
     // multiple changes to a single file) into a per-file
     // summary grouped by repository
-    let filesByRepository = fileList.reduce(function (fbr, file) {
+    let filesByRepository = fileList.reduce(function(fbr, file) {
       let {filename, repoName, author, type} = file;
       if (!fbr.hasOwnProperty(repoName)) {
         fbr[repoName] = {};
       }
       if (!fbr[repoName].hasOwnProperty(filename)) {
-          fbr[repoName][filename] = {
-          authors: {}, types: new Set(), repos: new Set(),
+        fbr[repoName][filename] = {
+          authors: {},
+          types: new Set(),
+          repos: new Set()
         };
       }
 
@@ -150,99 +149,118 @@ const ReleaseOverview = React.createClass({
             <IssueList
               endpoint={`/projects/${orgId}/${projectId}/releases/${encodeURIComponent(version)}/resolved/`}
               pagination={false}
-              renderEmpty={() => <div className="box empty m-b-2" key="none">{t('No issues resolved')}</div>}
+              renderEmpty={() => (
+                <div className="box empty m-b-2" key="none">
+                  {t('No issues resolved')}
+                </div>
+              )}
               ref="issueList"
               showActions={false}
               params={{orgId: orgId}}
               className="m-b-2"
-              />
+            />
             <h5>{t('New Issues in this Release')}</h5>
             <IssueList
               endpoint={`/projects/${orgId}/${projectId}/issues/`}
               query={{
                 query: 'first-release:"' + version + '"',
-                limit: 5,
+                limit: 5
               }}
               statsPeriod="0"
               pagination={false}
-              renderEmpty={() => <div className="box empty m-b-2" key="none">{t('No new issues')}</div>}
+              renderEmpty={() => (
+                <div className="box empty m-b-2" key="none">{t('No new issues')}</div>
+              )}
               ref="issueList"
               showActions={false}
               params={{orgId: orgId}}
               className="m-b-2"
-              />
+            />
             {hasRepos &&
               <div>
                 {Object.keys(filesByRepository).map(repository => {
-                  return (<RepositoryFileSummary
-                            repository={repository}
-                            fileChangeSummary={filesByRepository[repository]}/>);
+                  return (
+                    <RepositoryFileSummary
+                      repository={repository}
+                      fileChangeSummary={filesByRepository[repository]}
+                    />
+                  );
                 })}
-              </div>
-            }
+              </div>}
           </div>
           <div className="col-sm-4">
-            { hasRepos ?
-              <div>
-                <CommitAuthorStats
-                  orgId={orgId}
-                  projectId={projectId}
-                  version={version}
-                />
-                <h6 className="nav-header m-b-1">Other Projects Affected</h6>
-                <ul className="nav nav-stacked">
-                { projects.length === 1 ? this.renderEmpty() :
-                  projects.map((project) => {
-                    if (project.slug === projectId) {
-                      return null;
-                    }
-                    return (
-                      <ReleaseProjectStatSparkline
-                        key={project.id}
-                        orgId={orgId}
-                        project={project}
-                        version={version}
-                      />
-                    );
-                  })
-                }
-                </ul>
-              </div>
-              :
-              <div className="well blankslate m-t-2 m-b-2 p-x-2 p-t-1 p-b-2 align-center">
-                <span className="icon icon-git-commit" />
-                <h5>Releases are better with commit data!</h5>
-                <p>Connect a repository to see commit info, files changed, and authors involved in future releases.</p>
-                <a className="btn btn-primary"
-                  href={`/organizations/${orgId}/repos/`}>
-                  Connect a repository
-                </a>
-              </div>
-            }
+            {hasRepos
+              ? <div>
+                  <CommitAuthorStats
+                    orgId={orgId}
+                    projectId={projectId}
+                    version={version}
+                  />
+                  <h6 className="nav-header m-b-1">Other Projects Affected</h6>
+                  <ul className="nav nav-stacked">
+                    {projects.length === 1
+                      ? this.renderEmpty()
+                      : projects.map(project => {
+                          if (project.slug === projectId) {
+                            return null;
+                          }
+                          return (
+                            <ReleaseProjectStatSparkline
+                              key={project.id}
+                              orgId={orgId}
+                              project={project}
+                              version={version}
+                            />
+                          );
+                        })}
+                  </ul>
+                </div>
+              : <div className="well blankslate m-t-2 m-b-2 p-x-2 p-t-1 p-b-2 align-center">
+                  <span className="icon icon-git-commit" />
+                  <h5>Releases are better with commit data!</h5>
+                  <p>
+                    Connect a repository to see commit info, files changed, and authors involved in future releases.
+                  </p>
+                  <a className="btn btn-primary" href={`/organizations/${orgId}/repos/`}>
+                    Connect a repository
+                  </a>
+                </div>}
             <h6 className="nav-header m-b-1">{t('Deploys')}</h6>
             <ul className="nav nav-stacked">
-              { !deploys.length ? this.renderEmpty() :
-                deploys.map(deploy => {
-                  let query = encodeURIComponent(`environment:${deploy.environment} release:${version}`);
-                  return (
-                    <li key={deploy.id}>
-                      <a href={`/${orgId}/${projectId}/?query=${query}`} title={t('View in stream')}>
-                        <div className="row row-flex row-center-vertically">
-                          <div className="col-xs-6">
-                            <span className="repo-label" style={{verticalAlign: 'bottom'}}>
-                              {deploy.environment}
-                              <IconOpen className="icon-open" size={11} style={{marginLeft: 6}}/>
-                            </span>
-                          </div>
-                          <div className="col-xs-6 align-right">
-                            <small><TimeSince date={deploy.dateFinished}/></small>
+              {!deploys.length
+                ? this.renderEmpty()
+                : deploys.map(deploy => {
+                    let query = encodeURIComponent(
+                      `environment:${deploy.environment} release:${version}`
+                    );
+                    return (
+                      <li key={deploy.id}>
+                        <a
+                          href={`/${orgId}/${projectId}/?query=${query}`}
+                          title={t('View in stream')}
+                        >
+                          <div className="row row-flex row-center-vertically">
+                            <div className="col-xs-6">
+                              <span
+                                className="repo-label"
+                                style={{verticalAlign: 'bottom'}}
+                              >
+                                {deploy.environment}
+                                <IconOpen
+                                  className="icon-open"
+                                  size={11}
+                                  style={{marginLeft: 6}}
+                                />
+                              </span>
+                            </div>
+                            <div className="col-xs-6 align-right">
+                              <small><TimeSince date={deploy.dateFinished} /></small>
+                            </div>
                           </div>
-                        </div>
-                      </a>
-                    </li>
-                  );
-                })
-              }
+                        </a>
+                      </li>
+                    );
+                  })}
             </ul>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
index f8fc46b8ef..9aadcf436e 100644
--- a/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
+++ b/src/sentry/static/sentry/app/views/requiredAdminActions/setCallsigns.jsx
@@ -6,7 +6,6 @@ import ApiMixin from '../../mixins/apiMixin';
 import {t} from '../../locale';
 import update from 'react-addons-update';
 
-
 /* given an organization find information about the projects that are
    needed for callsign review.  Splits up projects you are a member of or
    not into different lists. */
@@ -15,7 +14,7 @@ function getProjectInfoForReview(org) {
   let nonMemberProjects = [];
   let requiresReview = 0;
   let canReviewAnything = false;
-  let canWriteProjects = (new Set(org.access)).has('project:write');
+  let canWriteProjects = new Set(org.access).has('project:write');
 
   for (let team of org.teams) {
     for (let project of team.projects) {
@@ -51,7 +50,6 @@ function getProjectInfoForReview(org) {
   };
 }
 
-
 const SetCallsignsAction = React.createClass({
   mixins: [ApiMixin, OrganizationState],
 
@@ -76,10 +74,10 @@ const SetCallsignsAction = React.createClass({
     this.api.request(`/organizations/${orgId}/slugs/`, {
       method: 'PUT',
       data: {slugs: this.state.slugs},
-      success: (data) => {
+      success: data => {
         browserHistory.pushState('refresh', `/${orgId}/`);
       },
-      error: (error) => {
+      error: error => {
         /*eslint no-console:0*/
         console.log('Failed to set slugs:', error);
         /*eslint no-alert:0*/
@@ -97,21 +95,21 @@ const SetCallsignsAction = React.createClass({
     this.setState({
       slugs: update(this.state.slugs, {
         [projectId]: {$set: event.target.value.toUpperCase().trim()}
-      }),
+      })
     });
   },
 
   fetchData() {
     let info = getProjectInfoForReview(this.getOrganization());
     let slugs = {};
-    info.memberProjects.forEach((project) => {
+    info.memberProjects.forEach(project => {
       slugs[project.projectId] = project.callSign;
     });
 
     this.setState({
       info: info,
       slugs: slugs,
-      isLoading: false,
+      isLoading: false
     });
   },
 
@@ -128,7 +126,7 @@ const SetCallsignsAction = React.createClass({
       }
     }
 
-    this.state.info.nonMemberProjects.forEach((project) => {
+    this.state.info.nonMemberProjects.forEach(project => {
       if (project.callSign === callsign) {
         found++;
       }
@@ -145,12 +143,18 @@ const SetCallsignsAction = React.createClass({
     return (
       <ActionOverlay actionId="SET_CALLSIGNS" isLoading={this.state.isLoading}>
         <h1>{t('Review Call Signs for Projects')}</h1>
-        <p>{t('Sentry now requires you to specify a call sign (short name) for each project in the organization “%s”. These short names are used to identify the project in the issue IDs.  Ideally they are two or three letter long.', org.name)}</p>
+        <p>
+          {t(
+            'Sentry now requires you to specify a call sign (short name) for each project in the organization “%s”. These short names are used to identify the project in the issue IDs.  Ideally they are two or three letter long.',
+            org.name
+          )}
+        </p>
         {info.hasNonMemberProjects
-          ? <p>{t('Projects of teams you are not a member of are not shown.')}</p> : null}
+          ? <p>{t('Projects of teams you are not a member of are not shown.')}</p>
+          : null}
         <p>{t('Projects which have been previously reviewed are shown in green.')}</p>
         <form className="form-horizontal">
-          {info.memberProjects.map((project) => {
+          {info.memberProjects.map(project => {
             let inputId = 'input-' + project.projectId;
             let className = 'form-group short-id-form-group';
             let callsign = this.state.slugs[project.projectId] || '';
@@ -168,25 +172,31 @@ const SetCallsignsAction = React.createClass({
 
             return (
               <div className={className} key={project.projectId}>
-                <label htmlFor={inputId}
-                  className="col-sm-6 col-sm-offset-2 control-label">
+                <label
+                  htmlFor={inputId}
+                  className="col-sm-6 col-sm-offset-2 control-label"
+                >
                   {project.teamName} / {project.projectName}
                 </label>
                 <div className="col-sm-2">
-                  <input type="text"
+                  <input
+                    type="text"
                     id={inputId}
                     className="form-control"
                     onChange={this.onSetShortName.bind(this, project.projectId)}
-                    value={callsign}/>
+                    value={callsign}
+                  />
                 </div>
               </div>
             );
           })}
           <div className="actions">
-            <button type="button"
+            <button
+              type="button"
               onClick={this.onSubmit}
               className="btn btn-primary btn-lg"
-              disabled={!canSubmit}>
+              disabled={!canSubmit}
+            >
               {t('Set Call Signs')}
             </button>
           </div>
@@ -198,8 +208,11 @@ const SetCallsignsAction = React.createClass({
 
 SetCallsignsAction.requiresAction = function(org) {
   let info = getProjectInfoForReview(org);
-  return info.requiresReview > 0 && info.canReviewAnything &&
-    (new Set(org.access)).has('callsigns');
+  return (
+    info.requiresReview > 0 &&
+    info.canReviewAnything &&
+    new Set(org.access).has('callsigns')
+  );
 };
 
 SetCallsignsAction.getActionLinkTitle = function() {
diff --git a/src/sentry/static/sentry/app/views/routeError.jsx b/src/sentry/static/sentry/app/views/routeError.jsx
index 245bcc633a..a59713627a 100644
--- a/src/sentry/static/sentry/app/views/routeError.jsx
+++ b/src/sentry/static/sentry/app/views/routeError.jsx
@@ -11,12 +11,14 @@ const RouteError = React.createClass({
     // TODO(dcramer): show something in addition to embed (that contains it?)
     // TODO(dcramer): capture better context
     // throw this in a timeout so if it errors we dont fall over
-    this._timeout = window.setTimeout(function(){
-      Raven.captureException(this.props.error);
-      // TODO(dcramer): we do not have errorId until send() is called which
-      // has latency in production so this will literally never fire
-      Raven.showReportDialog();
-    }.bind(this));
+    this._timeout = window.setTimeout(
+      function() {
+        Raven.captureException(this.props.error);
+        // TODO(dcramer): we do not have errorId until send() is called which
+        // has latency in production so this will literally never fire
+        Raven.showReportDialog();
+      }.bind(this)
+    );
   },
 
   componentWillUnmount() {
@@ -35,23 +37,38 @@ const RouteError = React.createClass({
           <span className="icon-exclamation" style={{fontSize: 20, marginRight: 10}} />
           <span>Oops! Something went wrong</span>
         </div>
-        <p>It looks like you've hit an issue in our client application. Don't worry
+        <p>
+          It looks like you've hit an issue in our client application. Don't worry
           though! We use Sentry to monitor Sentry and it's likely we're already
-          looking into this!</p>
+          looking into this!
+        </p>
         <p>If you're daring, you may want to try the following:</p>
         <ul>
-          {window && window.adblockSuspected &&
-            <li>We detected something AdBlock-like. Try disabling it, as it's known to cause issues.</li>
-          }
-          <li>Give it a few seconds and <a onClick={() => {
-              window.location.href = window.location.href;
-            }}>reload the page</a>.</li>
-          <li>If all else fails, <a href="http://github.com/getsentry/sentry/issues">create an issue</a> with more details.</li>
+          {window &&
+            window.adblockSuspected &&
+            <li>
+              We detected something AdBlock-like. Try disabling it, as it's known to cause issues.
+            </li>}
+          <li>
+            Give it a few seconds and <a
+              onClick={() => {
+                window.location.href = window.location.href;
+              }}
+            >
+              reload the page
+            </a>.
+          </li>
+          <li>
+            If all else fails,
+            {' '}
+            <a href="http://github.com/getsentry/sentry/issues">create an issue</a>
+            {' '}
+            with more details.
+          </li>
         </ul>
       </div>
     );
-  },
+  }
 });
 
 export default RouteError;
-
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
index c05a1d5e14..4d92d81f5c 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/index.jsx
@@ -17,9 +17,7 @@ const RuleEditor = React.createClass({
     organization: React.PropTypes.object.isRequired
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -75,14 +73,14 @@ const RuleEditor = React.createClass({
 
     let loadingIndicator = IndicatorStore.add('Saving...');
     this.api.request(endpoint, {
-      method: (rule.id ? 'PUT' : 'POST'),
+      method: rule.id ? 'PUT' : 'POST',
       data: data,
       success: () => {
         window.location.href = '../';
       },
-      error: (response) => {
+      error: response => {
         this.setState({
-          error: response.responseJSON || {'__all__': 'Unknown error'},
+          error: response.responseJSON || {__all__: 'Unknown error'},
           loading: false
         });
       },
@@ -114,28 +112,37 @@ const RuleEditor = React.createClass({
           <div className="box-content with-padding">
             {error &&
               <div className="alert alert-block alert-error">
-                <p>{t('There was an error saving your changes. Make sure all fields are valid and try again.')}</p>
-              </div>
-            }
+                <p>
+                  {t(
+                    'There was an error saving your changes. Make sure all fields are valid and try again.'
+                  )}
+                </p>
+              </div>}
             <h6>{t('Rule name')}:</h6>
             <div className="control-group">
-              <input ref="name"
-                     type="text" className="form-control"
-                     defaultValue={name}
-                     required={true}
-                     placeholder={t('My Rule Name')} />
+              <input
+                ref="name"
+                type="text"
+                className="form-control"
+                defaultValue={name}
+                required={true}
+                placeholder={t('My Rule Name')}
+              />
             </div>
 
             <hr />
 
             <div className="node-match-selector">
               <h6>
-                {t('Every time %s of these conditions are met:',
-                  <SelectInput ref="actionMatch"
-                        className={(this.hasError('actionMatch') ? ' error' : '')}
-                        value={actionMatch}
-                        style={{width:80}}
-                        required={true}>
+                {t(
+                  'Every time %s of these conditions are met:',
+                  <SelectInput
+                    ref="actionMatch"
+                    className={this.hasError('actionMatch') ? ' error' : ''}
+                    value={actionMatch}
+                    style={{width: 80}}
+                    required={true}
+                  >
                     <option value="all">{t('all')}</option>
                     <option value="any">{t('any')}</option>
                     <option value="none">{t('none')}</option>
@@ -145,56 +152,72 @@ const RuleEditor = React.createClass({
             </div>
 
             {this.hasError('conditions') &&
-              <p className="error">{t('Ensure at least one condition is enabled and all required fields are filled in.')}</p>
-            }
+              <p className="error">
+                {t(
+                  'Ensure at least one condition is enabled and all required fields are filled in.'
+                )}
+              </p>}
 
-            <RuleNodeList nodes={this.props.conditions}
+            <RuleNodeList
+              nodes={this.props.conditions}
               initialItems={conditions}
               className="rule-condition-list"
-              onChange={this.onConditionsChange} />
+              onChange={this.onConditionsChange}
+            />
 
             <hr />
 
             <h6>{t('Take these actions:')}</h6>
 
             {this.hasError('actions') &&
-              <p className="error">{t('Ensure at least one action is enabled and all required fields are filled in.')}</p>
-            }
+              <p className="error">
+                {t(
+                  'Ensure at least one action is enabled and all required fields are filled in.'
+                )}
+              </p>}
 
-            <RuleNodeList nodes={this.props.actions}
+            <RuleNodeList
+              nodes={this.props.actions}
               initialItems={actions}
               className="rule-action-list"
-              onChange={this.onActionsChange} />
+              onChange={this.onActionsChange}
+            />
 
             <hr />
 
             <div className="node-frequency-selector">
               <h6>
-                {tct('Perform these actions at most once every [frequency] for an issue.', {
-                  frequency: (
-                    <SelectInput ref="frequency"
-                          className={(this.hasError('frequency') ? ' error' : '')}
-                          value={frequency}
-                          style={{width:150}}
-                          required={true}>
-                      <option value="5">{t('5 minutes')}</option>
-                      <option value="10">{t('10 minutes')}</option>
-                      <option value="30">{t('30 minutes')}</option>
-                      <option value="60">{t('60 minutes')}</option>
-                      <option value="180">{t('3 hours')}</option>
-                      <option value="720">{t('12 hours')}</option>
-                      <option value="1440">{t('24 hours')}</option>
-                      <option value="10080">{t('one week')}</option>
-                      <option value="43200">{t('30 days')}</option>
-                    </SelectInput>
-                  )
-                })}
+                {tct(
+                  'Perform these actions at most once every [frequency] for an issue.',
+                  {
+                    frequency: (
+                      <SelectInput
+                        ref="frequency"
+                        className={this.hasError('frequency') ? ' error' : ''}
+                        value={frequency}
+                        style={{width: 150}}
+                        required={true}
+                      >
+                        <option value="5">{t('5 minutes')}</option>
+                        <option value="10">{t('10 minutes')}</option>
+                        <option value="30">{t('30 minutes')}</option>
+                        <option value="60">{t('60 minutes')}</option>
+                        <option value="180">{t('3 hours')}</option>
+                        <option value="720">{t('12 hours')}</option>
+                        <option value="1440">{t('24 hours')}</option>
+                        <option value="10080">{t('one week')}</option>
+                        <option value="43200">{t('30 days')}</option>
+                      </SelectInput>
+                    )
+                  }
+                )}
               </h6>
             </div>
 
             <div className="actions">
-              <button className="btn btn-primary btn-lg"
-                      disabled={loading}>{t('Save Rule')}</button>
+              <button className="btn btn-primary btn-lg" disabled={loading}>
+                {t('Save Rule')}
+              </button>
             </div>
           </div>
         </div>
diff --git a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
index 0205128d8b..d516b070d7 100644
--- a/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
+++ b/src/sentry/static/sentry/app/views/ruleEditor/ruleNodeList.jsx
@@ -24,7 +24,7 @@ const RuleNodeList = React.createClass({
   componentWillMount() {
     this._nodesById = {};
 
-    this.props.nodes.forEach((node) => {
+    this.props.nodes.forEach(node => {
       this._nodesById[node.id] = node;
     });
   },
@@ -67,10 +67,12 @@ const RuleNodeList = React.createClass({
           <tbody>
             {this.state.items.map((item, idx) => {
               return (
-                <RuleNode key={item.key_attr}
+                <RuleNode
+                  key={item.key_attr}
                   node={this.getNode(item.id)}
                   onDelete={this.onDeleteRow.bind(this, idx)}
-                  data={item} />
+                  data={item}
+                />
               );
             })}
           </tbody>
@@ -78,10 +80,8 @@ const RuleNodeList = React.createClass({
         <fieldset className="node-selector">
           <SelectInput onChange={this.onAddRow} style={{width: '100%'}}>
             <option key="blank" />
-            {this.props.nodes.map((node) => {
-              return (
-                <option value={node.id} key={node.id}>{node.label}</option>
-              );
+            {this.props.nodes.map(node => {
+              return <option value={node.id} key={node.id}>{node.label}</option>;
             })}
           </SelectInput>
         </fieldset>
diff --git a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
index 367c5ec438..57060208a9 100644
--- a/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
+++ b/src/sentry/static/sentry/app/views/sharedGroupDetails/index.jsx
@@ -13,12 +13,10 @@ import SharedGroupHeader from './sharedGroupHeader';
 
 const SharedGroupDetails = React.createClass({
   childContextTypes: {
-    group: PropTypes.Group,
+    group: PropTypes.Group
   },
 
-  mixins: [
-    ApiMixin
-  ],
+  mixins: [ApiMixin],
 
   getInitialState() {
     return {
@@ -30,7 +28,7 @@ const SharedGroupDetails = React.createClass({
 
   getChildContext() {
     return {
-      group: this.state.group,
+      group: this.state.group
     };
   },
 
@@ -44,8 +42,7 @@ const SharedGroupDetails = React.createClass({
   },
 
   getTitle() {
-    if (this.state.group)
-      return this.state.group.title;
+    if (this.state.group) return this.state.group.title;
     return 'Sentry';
   },
 
@@ -56,12 +53,13 @@ const SharedGroupDetails = React.createClass({
     });
 
     this.api.request(this.getGroupDetailsEndpoint(), {
-      success: (data) => {
+      success: data => {
         this.setState({
           loading: false,
           group: data
         });
-      }, error: () => {
+      },
+      error: () => {
         this.setState({
           loading: false,
           error: true
@@ -79,10 +77,8 @@ const SharedGroupDetails = React.createClass({
   render() {
     let group = this.state.group;
 
-    if (this.state.loading || !group)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading || !group) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let evt = this.state.group.latestEvent;
 
@@ -96,11 +92,10 @@ const SharedGroupDetails = React.createClass({
                 <a href="/">
                   <span className="icon-sentry-logo-full" />
                 </a>
-               {this.state.group.permalink &&
-                <a className="pull-right" href={this.state.group.permalink}>
-                  Details
-                </a>
-               }
+                {this.state.group.permalink &&
+                  <a className="pull-right" href={this.state.group.permalink}>
+                    Details
+                  </a>}
               </div>
               <div className="box-content">
                 <div className="content">
@@ -112,7 +107,8 @@ const SharedGroupDetails = React.createClass({
                         event={evt}
                         orgId={group.project.organization.slug}
                         project={group.project}
-                        isShare={true} />
+                        isShare={true}
+                      />
                     </div>
                   </div>
                   <Footer />
diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index 821c34bffe..ee2b80f031 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -57,7 +57,7 @@ const Stream = React.createClass({
       isDefaultSearch: null,
       searchId: searchId,
       // if we have no query then we can go ahead and fetch data
-      loading: (searchId || !this.hasQuery() ? true : false),
+      loading: searchId || !this.hasQuery() ? true : false,
       savedSearchLoading: true,
       savedSearchList: [],
       selectAllActive: false,
@@ -102,8 +102,9 @@ const Stream = React.createClass({
       return;
     }
 
-    let searchIdChanged = this.state.isDefaultSearch ?
-      nextProps.params.searchId : nextProps.params.searchId !== this.state.searchId;
+    let searchIdChanged = this.state.isDefaultSearch
+      ? nextProps.params.searchId
+      : nextProps.params.searchId !== this.state.searchId;
 
     if (searchIdChanged || nextProps.location.search !== this.props.location.search) {
       // TODO(dcramer): handle 404 from popState on searchId
@@ -133,40 +134,43 @@ const Stream = React.createClass({
 
   fetchSavedSearches() {
     this.setState({
-      savedSearchLoading: true,
+      savedSearchLoading: true
     });
 
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
-      success: (data) => {
+      success: data => {
         let newState = {
           isDefaultSearch: false,
           savedSearchLoading: false,
           savedSearchList: data,
-          loading: false,
+          loading: false
         };
         let needsData = this.state.loading;
         let searchId = this.state.searchId;
         if (searchId) {
-          let match = data.filter((search) => {
+          let match = data.filter(search => {
             return search.id === searchId;
           });
           if (match.length) {
             newState.query = match[0].query;
           } else {
-            return void this.setState({
-              savedSearchLoading: false,
-              savedSearchList: data,
-              searchId: null,
-              isDefaultSearch: true,
-            }, this.transitionTo);
+            return void this.setState(
+              {
+                savedSearchLoading: false,
+                savedSearchList: data,
+                searchId: null,
+                isDefaultSearch: true
+              },
+              this.transitionTo
+            );
           }
         } else if (!this.hasQuery()) {
-          let defaultResults = data.filter((search) => {
+          let defaultResults = data.filter(search => {
             return search.isUserDefault;
           });
           if (!defaultResults.length) {
-            defaultResults = data.filter((search) => {
+            defaultResults = data.filter(search => {
               return search.isDefault;
             });
           }
@@ -178,7 +182,7 @@ const Stream = React.createClass({
         }
         this.setState(newState, needsData ? this.fetchData : null);
       },
-      error: (error) => {
+      error: error => {
         // XXX(dcramer): fail gracefully by still loading the stream
         logAjaxError(error);
         this.setState({
@@ -196,16 +200,14 @@ const Stream = React.createClass({
   fetchProcessingIssues() {
     let {orgId, projectId} = this.props.params;
     this.api.request(`/projects/${orgId}/${projectId}/processingissues/`, {
-      success: (data) => {
-        if (data.hasIssues
-          || data.resolveableIssues > 0
-          || data.issuesProcessing > 0) {
+      success: data => {
+        if (data.hasIssues || data.resolveableIssues > 0 || data.issuesProcessing > 0) {
           this.setState({
-            processingIssues: data,
+            processingIssues: data
           });
         }
       },
-      error: (error) => {
+      error: error => {
         logAjaxError(error);
         // this is okay. it's just a ui hint
       }
@@ -222,11 +224,11 @@ const Stream = React.createClass({
 
     let params = this.props.params;
     this.api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
-      success: (tags) => {
+      success: tags => {
         this.setState({tagsLoading: false});
         StreamTagActions.loadTagsSuccess(tags);
       },
-      error: (error) => {
+      error: error => {
         this.setState({tagsLoading: false});
         StreamTagActions.loadTagsError();
       }
@@ -243,7 +245,7 @@ const Stream = React.createClass({
     savedSearchList.push(data);
     // TODO(dcramer): sort
     this.setState({
-      savedSearchList: savedSearchList,
+      savedSearchList: savedSearchList
     });
     browserHistory.pushState(null, `/${orgId}/${projectId}/searches/${data.id}/`);
   },
@@ -256,20 +258,15 @@ const Stream = React.createClass({
 
     let hasQuery = currentQuery.hasOwnProperty('query');
 
-    let searchId = (
-      hasQuery ?
-      null :
-      props.params.searchId || state.searchId || null);
+    let searchId = hasQuery ? null : props.params.searchId || state.searchId || null;
 
-    let sort =
-      currentQuery.hasOwnProperty('sort') ?
-      currentQuery.sort :
-      this.props.defaultSort;
+    let sort = currentQuery.hasOwnProperty('sort')
+      ? currentQuery.sort
+      : this.props.defaultSort;
 
-    let statsPeriod =
-      currentQuery.hasOwnProperty('statsPeriod') ?
-      currentQuery.statsPeriod :
-      this.props.defaultStatsPeriod;
+    let statsPeriod = currentQuery.hasOwnProperty('statsPeriod')
+      ? currentQuery.statsPeriod
+      : this.props.defaultStatsPeriod;
 
     if (statsPeriod !== '14d' && statsPeriod !== '24h') {
       statsPeriod = this.props.defaultStatsPeriod;
@@ -284,11 +281,10 @@ const Stream = React.createClass({
     };
 
     // state is not yet defined
-    if (this.state === null)
-      return newState;
+    if (this.state === null) return newState;
 
     if (searchId) {
-      let searchResult = this.state.savedSearchList.filter((search) => {
+      let searchResult = this.state.savedSearchList.filter(search => {
         return search.id === searchId;
       });
       if (searchResult.length) {
@@ -297,7 +293,7 @@ const Stream = React.createClass({
         newState.searchId = null;
       }
     } else if (!hasQuery) {
-      let defaultResult = this.state.savedSearchList.filter((search) => {
+      let defaultResult = this.state.savedSearchList.filter(search => {
         return search.isDefault;
       });
       if (defaultResult.length) {
@@ -333,7 +329,7 @@ const Stream = React.createClass({
       limit: this.props.maxItems,
       sort: this.state.sort,
       statsPeriod: this.state.statsPeriod,
-      shortIdLookup: '1',
+      shortIdLookup: '1'
     };
 
     let currentQuery = this.props.location.query || {};
@@ -356,12 +352,16 @@ const Stream = React.createClass({
         // the current props one as the shortIdLookup can return results for
         // different projects.
         if (jqXHR.getResponseHeader('X-Sentry-Direct-Hit') === '1') {
-           if (data[0].matchingEventId){
-            return void browserHistory.pushState(null,
-              `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0].id}/events/${data[0].matchingEventId}/`);
+          if (data[0].matchingEventId) {
+            return void browserHistory.pushState(
+              null,
+              `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0].id}/events/${data[0].matchingEventId}/`
+            );
           }
-          return void browserHistory.pushState(null,
-            `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0].id}/`);
+          return void browserHistory.pushState(
+            null,
+            `/${this.props.params.orgId}/${data[0].project.slug}/issues/${data[0].id}/`
+          );
         }
 
         this._streamManager.push(data);
@@ -369,10 +369,10 @@ const Stream = React.createClass({
         this.setState({
           error: false,
           dataLoading: false,
-          pageLinks: jqXHR.getResponseHeader('Link'),
+          pageLinks: jqXHR.getResponseHeader('Link')
         });
       },
-      error: (err) => {
+      error: err => {
         let error = err.responseJSON || true;
         error = error.detail || true;
         this.setState({
@@ -380,7 +380,7 @@ const Stream = React.createClass({
           dataLoading: false
         });
       },
-      complete: (jqXHR) => {
+      complete: jqXHR => {
         this.lastRequest = null;
 
         this.resumePolling();
@@ -389,8 +389,7 @@ const Stream = React.createClass({
   },
 
   resumePolling() {
-    if (!this.state.pageLinks)
-      return;
+    if (!this.state.pageLinks) return;
 
     // Only resume polling if we're on the first page of results
     let links = parseLinkHeader(this.state.pageLinks);
@@ -416,11 +415,14 @@ const Stream = React.createClass({
   onSelectStatsPeriod(period) {
     if (period != this.state.statsPeriod) {
       // TODO(dcramer): all charts should now suggest "loading"
-      this.setState({
-        statsPeriod: period
-      }, function() {
-        this.transitionTo();
-      });
+      this.setState(
+        {
+          statsPeriod: period
+        },
+        function() {
+          this.transitionTo();
+        }
+      );
     }
   },
 
@@ -428,13 +430,13 @@ const Stream = React.createClass({
     this._streamManager.unshift(data);
     if (!utils.valueIsEqual(this.state.pageLinks, links, true)) {
       this.setState({
-        pageLinks: links,
+        pageLinks: links
       });
     }
   },
 
   onGroupChange() {
-    let groupIds = this._streamManager.getAllItems().map((item) => item.id);
+    let groupIds = this._streamManager.getAllItems().map(item => item.id);
     if (!utils.valueIsEqual(groupIds, this.state.groupIds)) {
       this.setState({
         groupIds: groupIds
@@ -454,17 +456,23 @@ const Stream = React.createClass({
       // if query is the same, just re-fetch data
       this.fetchData();
     } else {
-      this.setState({
-        query: query,
-        searchId: null,
-      }, this.transitionTo);
+      this.setState(
+        {
+          query: query,
+          searchId: null
+        },
+        this.transitionTo
+      );
     }
   },
 
   onSortChange(sort) {
-    this.setState({
-      sort: sort
-    }, this.transitionTo);
+    this.setState(
+      {
+        sort: sort
+      },
+      this.transitionTo
+    );
   },
 
   onSidebarToggle() {
@@ -483,8 +491,7 @@ const Stream = React.createClass({
    * Returns true if all results in the current query are visible/on this page
    */
   allResultsVisible() {
-    if (!this.state.pageLinks)
-      return false;
+    if (!this.state.pageLinks) return false;
 
     let links = parseLinkHeader(this.state.pageLinks);
     return links && !links.previous.results && !links.next.results;
@@ -506,9 +513,9 @@ const Stream = React.createClass({
     }
 
     let params = this.props.params;
-    let path = (this.state.searchId ?
-      `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/` :
-      `/${params.orgId}/${params.projectId}/`);
+    let path = this.state.searchId
+      ? `/${params.orgId}/${params.projectId}/searches/${this.state.searchId}/`
+      : `/${params.orgId}/${params.projectId}/`;
 
     browserHistory.pushState(null, path, queryParams);
   },
@@ -524,7 +531,7 @@ const Stream = React.createClass({
     let showButton = false;
     let className = {
       'processing-issues': true,
-      'alert': true
+      alert: true
     };
     let issues = null;
     let lastEvent = null;
@@ -532,13 +539,16 @@ const Stream = React.createClass({
 
     if (pi.numIssues > 0) {
       icon = <span className="icon icon-alert" />;
-      issues = tn('There is %d issue blocking event processing',
-                  'There are %d issues blocking event processing',
-                  pi.numIssues);
+      issues = tn(
+        'There is %d issue blocking event processing',
+        'There are %d issues blocking event processing',
+        pi.numIssues
+      );
       lastEvent = (
-        <span className="last-seen">({tct('last event from [ago]', {
-          ago: <TimeSince date={pi.lastSeen}/>
-        })})
+        <span className="last-seen">
+          ({tct('last event from [ago]', {
+            ago: <TimeSince date={pi.lastSeen} />
+          })})
         </span>
       );
       className['alert-error'] = true;
@@ -546,15 +556,19 @@ const Stream = React.createClass({
     } else if (pi.issuesProcessing > 0) {
       icon = <span className="icon icon-processing play" />;
       className['alert-info'] = true;
-      issues = tn('Reprocessing %d event …',
+      issues = tn(
+        'Reprocessing %d event …',
         'Reprocessing %d events …',
-        pi.issuesProcessing);
+        pi.issuesProcessing
+      );
     } else if (pi.resolveableIssues > 0) {
       icon = <span className="icon icon-processing" />;
       className['alert-warning'] = true;
-      issues = tn('There is %d event pending reprocessing.',
+      issues = tn(
+        'There is %d event pending reprocessing.',
         'There are %d events pending reprocessing.',
-        pi.resolveableIssues);
+        pi.resolveableIssues
+      );
       showButton = true;
     } else {
       /* we should not go here but what do we know */
@@ -564,9 +578,9 @@ const Stream = React.createClass({
     return (
       <div className={classNames(className)}>
         {showButton &&
-          <Link to={link} className="btn btn-default btn-sm pull-right">{
-            t('Show details')}</Link>
-        }
+          <Link to={link} className="btn btn-default btn-sm pull-right">
+            {t('Show details')}
+          </Link>}
         {icon}
         {' '}
         <strong>{issues}</strong>
@@ -579,18 +593,19 @@ const Stream = React.createClass({
 
   renderGroupNodes(ids, statsPeriod) {
     let {orgId, projectId} = this.props.params;
-    let groupNodes = ids.map((id) => {
+    let groupNodes = ids.map(id => {
       return (
         <StreamGroup
           key={id}
           id={id}
           orgId={orgId}
           projectId={projectId}
-          statsPeriod={statsPeriod} />
+          statsPeriod={statsPeriod}
+        />
       );
     });
 
-    return (<ul className="group-list" ref="groupList">{groupNodes}</ul>);
+    return <ul className="group-list" ref="groupList">{groupNodes}</ul>;
   },
 
   renderAwaitingEvents() {
@@ -600,7 +615,13 @@ const Stream = React.createClass({
 
     if (this.state.groupIds.length > 0) {
       let sampleIssueId = this.state.groupIds[0];
-      sampleLink = <p><Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>{t('Or see a sample Javascript event')}</Link></p>;
+      sampleLink = (
+        <p>
+          <Link to={`/${org.slug}/${project.slug}/issues/${sampleIssueId}/?sample`}>
+            {t('Or see a sample Javascript event')}
+          </Link>
+        </p>
+      );
     }
 
     return (
@@ -608,8 +629,20 @@ const Stream = React.createClass({
         <div className="wrap">
           <div className="robot"><span className="eye" /></div>
           <h3>{t('Waiting for events…')}</h3>
-          <p>{tct('Our error robot is waiting to [cross:devour] receive your first event.', {cross: <span className="strikethrough"/>})}</p>
-          <p><Link to={`/${org.slug}/${project.slug}/getting-started/`} className="btn btn-primary btn-lg">{t('Installation Instructions')}</Link></p>
+          <p>
+            {tct(
+              'Our error robot is waiting to [cross:devour] receive your first event.',
+              {cross: <span className="strikethrough" />}
+            )}
+          </p>
+          <p>
+            <Link
+              to={`/${org.slug}/${project.slug}/getting-started/`}
+              className="btn btn-primary btn-lg"
+            >
+              {t('Installation Instructions')}
+            </Link>
+          </p>
           {sampleLink}
         </div>
       </div>
@@ -619,7 +652,7 @@ const Stream = React.createClass({
   renderEmpty() {
     return (
       <div className="box empty-stream">
-        <span className="icon icon-exclamation"></span>
+        <span className="icon icon-exclamation" />
         <p>{t('Sorry, no events match your filters.')}</p>
       </div>
     );
@@ -640,9 +673,7 @@ const Stream = React.createClass({
     if (this.state.dataLoading) {
       body = this.renderLoading();
     } else if (this.state.error) {
-      body = (<LoadingError
-        message={this.state.error}
-        onRetry={this.fetchData} />);
+      body = <LoadingError message={this.state.error} onRetry={this.fetchData} />;
     } else if (!project.firstEvent) {
       body = this.renderAwaitingEvents();
     } else if (this.state.groupIds.length > 0) {
@@ -663,8 +694,7 @@ const Stream = React.createClass({
     let params = this.props.params;
 
     let classes = ['stream-row'];
-    if (this.state.isSidebarVisible)
-      classes.push('show-sidebar');
+    if (this.state.isSidebarVisible) classes.push('show-sidebar');
 
     let {orgId, projectId} = this.props.params;
     let searchId = this.state.searchId;
@@ -704,13 +734,14 @@ const Stream = React.createClass({
                     realtimeActive={this.state.realtimeActive}
                     statsPeriod={this.state.statsPeriod}
                     groupIds={this.state.groupIds}
-                    allResultsVisible={this.allResultsVisible()}/>
+                    allResultsVisible={this.allResultsVisible()}
+                  />
                 </div>
               </div>
             </Sticky>
             {this.renderProcessingIssuesHint()}
             {this.renderStreamBody()}
-            <Pagination pageLinks={this.state.pageLinks}/>
+            <Pagination pageLinks={this.state.pageLinks} />
           </div>
           <StreamSidebar
             loading={this.state.tagsLoading}
@@ -719,12 +750,11 @@ const Stream = React.createClass({
             onQueryChange={this.onSearch}
             orgId={params.orgId}
             projectId={params.projectId}
-            />
+          />
         </div>
       </StickyContainer>
     );
   }
-
 });
 
 export default Stream;
diff --git a/src/sentry/static/sentry/app/views/stream/actionLink.jsx b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
index b35ab316ad..ffedd97363 100644
--- a/src/sentry/static/sentry/app/views/stream/actionLink.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actionLink.jsx
@@ -33,7 +33,7 @@ const ActionLink = React.createClass({
       buttonTitle: null, // title="..." (optional)
       onlyIfBulk: false,
       disabled: false,
-      extraDescription: null,
+      extraDescription: null
     };
   },
 
@@ -73,7 +73,10 @@ const ActionLink = React.createClass({
     let shouldConfirm = true;
 
     // Unless `onlyIfBulk` is true, then return false if all items are not selected
-    if (this.props.onlyIfBulk === true && (!this.props.selectAllActive || numSelectedItems === 1)) {
+    if (
+      this.props.onlyIfBulk === true &&
+      (!this.props.selectAllActive || numSelectedItems === 1)
+    ) {
       shouldConfirm = false;
     }
 
@@ -99,25 +102,31 @@ const ActionLink = React.createClass({
     let confirmationQuestion = resolveLabel(this.props.confirmationQuestion);
 
     return (
-      <a title={this.props.tooltip !== null ? this.props.tooltip : this.props.buttonTitle}
-         className={className}
-         disabled={this.props.disabled}
-         onClick={this.handleClick}
-         data-placement="bottom"
-         >
+      <a
+        title={this.props.tooltip !== null ? this.props.tooltip : this.props.buttonTitle}
+        className={className}
+        disabled={this.props.disabled}
+        onClick={this.handleClick}
+        data-placement="bottom"
+      >
         {this.props.children}
 
-        <Modal show={this.state.isModalOpen} title={t('Please confirm')} animation={false} onHide={this.handleToggle}>
+        <Modal
+          show={this.state.isModalOpen}
+          title={t('Please confirm')}
+          animation={false}
+          onHide={this.handleToggle}
+        >
           <div className="modal-body">
             <p><strong>{confirmationQuestion}</strong></p>
             {this.props.extraDescription}
             <p>{t('This action cannot be undone.')}</p>
           </div>
           <div className="modal-footer">
-            <button type="button" className="btn btn-default"
-                    onClick={this.handleToggle}>{t('Cancel')}</button>
-            <button type="button" className="btn btn-primary"
-                    onClick={this.handleAction}>
+            <button type="button" className="btn btn-default" onClick={this.handleToggle}>
+              {t('Cancel')}
+            </button>
+            <button type="button" className="btn btn-primary" onClick={this.handleAction}>
               {resolveLabel(this.props.confirmLabel)}
             </button>
           </div>
diff --git a/src/sentry/static/sentry/app/views/stream/actions.jsx b/src/sentry/static/sentry/app/views/stream/actions.jsx
index e06c670cd6..82c88e9097 100644
--- a/src/sentry/static/sentry/app/views/stream/actions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/actions.jsx
@@ -20,7 +20,7 @@ const StreamActions = React.createClass({
     realtimeActive: React.PropTypes.bool.isRequired,
     statsPeriod: React.PropTypes.string.isRequired,
     query: React.PropTypes.string.isRequired,
-    hasReleases: React.PropTypes.bool,
+    hasReleases: React.PropTypes.bool
   },
 
   mixins: [
@@ -36,7 +36,7 @@ const StreamActions = React.createClass({
       anySelected: false,
       multiSelected: false, // more than one selected
       pageSelected: false, // all on current page selected (e.g. 25)
-      allInQuerySelected: false, // all in current search query selected (e.g. 1000+)
+      allInQuerySelected: false // all in current search query selected (e.g. 1000+)
     };
   },
 
@@ -57,9 +57,7 @@ const StreamActions = React.createClass({
       selectedIds = undefined; // undefined means "all"
     } else {
       let itemIdSet = SelectedGroupStore.getSelectedIds();
-      selectedIds = this.props.groupIds.filter(
-        (itemId) => itemIdSet.has(itemId)
-      );
+      selectedIds = this.props.groupIds.filter(itemId => itemIdSet.has(itemId));
     }
 
     callback(selectedIds);
@@ -73,54 +71,63 @@ const StreamActions = React.createClass({
   },
 
   onUpdate(data, event) {
-    this.actionSelectedGroups((itemIds) => {
+    this.actionSelectedGroups(itemIds => {
       let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
 
-      this.api.bulkUpdate({
-        orgId: this.props.orgId,
-        projectId: this.props.projectId,
-        itemIds: itemIds,
-        data: data,
-        query: this.props.query
-      }, {
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
+      this.api.bulkUpdate(
+        {
+          orgId: this.props.orgId,
+          projectId: this.props.projectId,
+          itemIds: itemIds,
+          data: data,
+          query: this.props.query
+        },
+        {
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
         }
-      });
+      );
     });
   },
 
   onDelete(event) {
     let loadingIndicator = IndicatorStore.add(t('Removing events..'));
 
-    this.actionSelectedGroups((itemIds) => {
-      this.api.bulkDelete({
-        orgId: this.props.orgId,
-        projectId: this.props.projectId,
-        itemIds: itemIds,
-        query: this.props.query
-      }, {
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
+    this.actionSelectedGroups(itemIds => {
+      this.api.bulkDelete(
+        {
+          orgId: this.props.orgId,
+          projectId: this.props.projectId,
+          itemIds: itemIds,
+          query: this.props.query
+        },
+        {
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
         }
-      });
+      );
     });
   },
 
   onMerge(event) {
     let loadingIndicator = IndicatorStore.add(t('Merging events..'));
 
-    this.actionSelectedGroups((itemIds) => {
-      this.api.merge({
-        orgId: this.props.orgId,
-        projectId: this.props.projectId,
-        itemIds: itemIds,
-        query: this.props.query
-      }, {
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
+    this.actionSelectedGroups(itemIds => {
+      this.api.merge(
+        {
+          orgId: this.props.orgId,
+          projectId: this.props.projectId,
+          itemIds: itemIds,
+          query: this.props.query
+        },
+        {
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
         }
-      });
+      );
     });
   },
 
@@ -148,14 +155,14 @@ const StreamActions = React.createClass({
     let releaseTrackingUrl = `/${this.props.orgId}/${this.props.projectId}/settings/release-tracking/`;
     let extraDescription = null;
     if (this.state.allInQuerySelected) {
-      extraDescription = (this.props.query ? (
-        <div>
-          <p>{t('This will apply to the current search query:')}</p>
-          <pre>{this.props.query}</pre>
-        </div>
-      ) : (
-        <p className="error"><strong>{t('This will apply to ALL issues in this project!')}</strong></p>
-      ));
+      extraDescription = this.props.query
+        ? <div>
+            <p>{t('This will apply to the current search query:')}</p>
+            <pre>{this.props.query}</pre>
+          </div>
+        : <p className="error">
+            <strong>{t('This will apply to ALL issues in this project!')}</strong>
+          </p>;
     }
 
     return (
@@ -163,36 +170,46 @@ const StreamActions = React.createClass({
         <div className="stream-actions row">
           <div className="stream-actions-left col-md-6 col-sm-8 col-xs-8">
             <div className="checkbox">
-              <input type="checkbox" className="chk-select-all"
-                     onChange={this.onSelectAll}
-                     checked={this.state.pageSelected} />
+              <input
+                type="checkbox"
+                className="chk-select-all"
+                onChange={this.onSelectAll}
+                checked={this.state.pageSelected}
+              />
             </div>
             <div className="btn-group">
               <ActionLink
-                 className="btn btn-default btn-sm action-resolve"
-                 disabled={!this.state.anySelected}
-                 onAction={this.onUpdate.bind(this, {status: 'resolved'})}
-                 buttonTitle={t('Resolve')}
-                 extraDescription={extraDescription}
-                 confirmationQuestion={
+                className="btn btn-default btn-sm action-resolve"
+                disabled={!this.state.anySelected}
+                onAction={this.onUpdate.bind(this, {status: 'resolved'})}
+                buttonTitle={t('Resolve')}
+                extraDescription={extraDescription}
+                confirmationQuestion={
                   this.state.allInQuerySelected
-                    ? t('Are you sure you want to resolve all issues matching this search query?')
-                    : (count) =>
-                        tn('Are you sure you want to resolve this %d issue?',
-                           'Are you sure you want to resolve these %d issues?',
-                           count)
-                 }
-                 confirmLabel={
+                    ? t(
+                        'Are you sure you want to resolve all issues matching this search query?'
+                      )
+                    : count =>
+                        tn(
+                          'Are you sure you want to resolve this %d issue?',
+                          'Are you sure you want to resolve these %d issues?',
+                          count
+                        )
+                }
+                confirmLabel={
                   this.state.allInQuerySelected
                     ? t('Resolve all issues')
-                    : (count) =>
-                        tn('Resolve %d selected issue',
-                           'Resolve %d selected issues',
-                           count)
-                 }
-                 tooltip={t('Set Status to Resolved')}
-                 onlyIfBulk={true}
-                 selectAllActive={this.state.pageSelected}>
+                    : count =>
+                        tn(
+                          'Resolve %d selected issue',
+                          'Resolve %d selected issues',
+                          count
+                        )
+                }
+                tooltip={t('Set Status to Resolved')}
+                onlyIfBulk={true}
+                selectAllActive={this.state.pageSelected}
+              >
                 <span className="icon-checkmark" style={{marginRight: 5}} />
                 {t('Resolve')}
               </ActionLink>
@@ -201,72 +218,99 @@ const StreamActions = React.createClass({
                 className="btn btn-default btn-sm action-resolve"
                 topLevelClasses="resolve-dropdown"
                 disabled={!this.state.anySelected}
-                title="">
+                title=""
+              >
                 <MenuItem noAnchor={true}>
-                  {hasRelease ?
-                    <ActionLink
+                  {hasRelease
+                    ? <ActionLink
                         disabled={!this.state.anySelected}
-                        onAction={this.onUpdate.bind(this, {status: 'resolvedInNextRelease'})}
+                        onAction={this.onUpdate.bind(this, {
+                          status: 'resolvedInNextRelease'
+                        })}
                         buttonTitle={t('Resolve')}
                         tooltip=""
                         extraDescription={extraDescription}
                         confirmationQuestion={
                           this.state.allInQuerySelected
-                            ? t('Are you sure you want to resolve all issues matching this search query?')
-                            : (count) =>
-                                tn('Are you sure you want to resolve this %d issue?',
-                                   'Are you sure you want to resolve these %d issues?',
-                                   count)
+                            ? t(
+                                'Are you sure you want to resolve all issues matching this search query?'
+                              )
+                            : count =>
+                                tn(
+                                  'Are you sure you want to resolve this %d issue?',
+                                  'Are you sure you want to resolve these %d issues?',
+                                  count
+                                )
                         }
                         confirmLabel={
                           this.state.allInQuerySelected
                             ? t('Resolve all issues')
-                            : (count) =>
-                                tn('Resolve %d selected issue',
-                                   'Resolve %d selected issues',
-                                   count)
+                            : count =>
+                                tn(
+                                  'Resolve %d selected issue',
+                                  'Resolve %d selected issues',
+                                  count
+                                )
                         }
                         onlyIfBulk={true}
-                        selectAllActive={this.state.pageSelected}>
-                      <strong>{t('Resolved in next release')}</strong>
-                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
-                    </ActionLink>
-                  :
-                    <a href={releaseTrackingUrl} className="disabled tip" title={t('Set up release tracking in order to use this feature.')}>
-                      <strong>{t('Resolved in next release.')}</strong>
-                      <div className="help-text">{t('Snooze notifications until this issue reoccurs in a future release.')}</div>
-                    </a>
-                  }
+                        selectAllActive={this.state.pageSelected}
+                      >
+                        <strong>{t('Resolved in next release')}</strong>
+                        <div className="help-text">
+                          {t(
+                            'Snooze notifications until this issue reoccurs in a future release.'
+                          )}
+                        </div>
+                      </ActionLink>
+                    : <a
+                        href={releaseTrackingUrl}
+                        className="disabled tip"
+                        title={t('Set up release tracking in order to use this feature.')}
+                      >
+                        <strong>{t('Resolved in next release.')}</strong>
+                        <div className="help-text">
+                          {t(
+                            'Snooze notifications until this issue reoccurs in a future release.'
+                          )}
+                        </div>
+                      </a>}
                 </MenuItem>
               </DropdownLink>
             </div>
             <div className="btn-group">
               <ActionLink
-                 className="btn btn-default btn-sm action-bookmark"
-                 disabled={!this.state.anySelected}
-                 onAction={this.onUpdate.bind(this, {isBookmarked: true})}
-                 buttonTitle={t('Bookmark')}
-                 extraDescription={extraDescription}
-                 confirmationQuestion={
+                className="btn btn-default btn-sm action-bookmark"
+                disabled={!this.state.anySelected}
+                onAction={this.onUpdate.bind(this, {isBookmarked: true})}
+                buttonTitle={t('Bookmark')}
+                extraDescription={extraDescription}
+                confirmationQuestion={
                   this.state.allInQuerySelected
-                    ? t('Are you sure you want to bookmark all issues matching this search query?')
-                    : (count) =>
-                        tn('Are you sure you want to bookmark this %d issue?',
-                           'Are you sure you want to bookmark these %d issues?',
-                           count)
-                 }
-                 confirmLabel={
+                    ? t(
+                        'Are you sure you want to bookmark all issues matching this search query?'
+                      )
+                    : count =>
+                        tn(
+                          'Are you sure you want to bookmark this %d issue?',
+                          'Are you sure you want to bookmark these %d issues?',
+                          count
+                        )
+                }
+                confirmLabel={
                   this.state.allInQuerySelected
                     ? t('Bookmark all issues')
-                    : (count) =>
-                        tn('Bookmark %d selected issue',
-                           'Bookmark %d selected issues',
-                            count)
-                 }
-                 tooltip={t('Add to Bookmarks')}
-                 onlyIfBulk={true}
-                 selectAllActive={this.state.pageSelected}>
-                <i aria-hidden="true" className="icon-star-solid"></i>
+                    : count =>
+                        tn(
+                          'Bookmark %d selected issue',
+                          'Bookmark %d selected issues',
+                          count
+                        )
+                }
+                tooltip={t('Add to Bookmarks')}
+                onlyIfBulk={true}
+                selectAllActive={this.state.pageSelected}
+              >
+                <i aria-hidden="true" className="icon-star-solid" />
               </ActionLink>
             </div>
             <div className="btn-group">
@@ -275,7 +319,8 @@ const StreamActions = React.createClass({
                 btnGroup={true}
                 caret={false}
                 className="btn btn-sm btn-default hidden-xs action-more"
-                title={<span className="icon-ellipsis"></span>}>
+                title={<span className="icon-ellipsis" />}
+              >
                 <MenuItem noAnchor={true}>
                   <ActionLink
                     className="action-merge"
@@ -284,21 +329,28 @@ const StreamActions = React.createClass({
                     extraDescription={extraDescription}
                     confirmationQuestion={
                       this.state.allInQuerySelected
-                        ? t('Are you sure you want to merge all issues matching this search query?')
-                        : (count) =>
-                            tn('Are you sure you want to merge %d issue?',
-                               'Are you sure you want to merge %d issues?',
-                               count)
+                        ? t(
+                            'Are you sure you want to merge all issues matching this search query?'
+                          )
+                        : count =>
+                            tn(
+                              'Are you sure you want to merge %d issue?',
+                              'Are you sure you want to merge %d issues?',
+                              count
+                            )
                     }
                     confirmLabel={
                       this.state.allInQuerySelected
                         ? t('Merge all issues')
-                        : (count) =>
-                            tn('Merge %d selected issue',
-                               'Merge %d selected issues',
-                               count)
+                        : count =>
+                            tn(
+                              'Merge %d selected issue',
+                              'Merge %d selected issues',
+                              count
+                            )
                     }
-                    selectAllActive={this.state.pageSelected}>
+                    selectAllActive={this.state.pageSelected}
+                  >
                     {t('Merge Events')}
                   </ActionLink>
                 </MenuItem>
@@ -310,23 +362,30 @@ const StreamActions = React.createClass({
                     extraDescription={extraDescription}
                     confirmationQuestion={
                       this.state.allInQuerySelected
-                        ? t('Are you sure you want to remove all issues matching this search query from your bookmarks?')
-                        : (count) =>
-                            tn('Are you sure you want to remove this %d issue from your bookmarks?',
-                               'Are you sure you want to remove these %d issues from your bookmarks?',
-                               count)
+                        ? t(
+                            'Are you sure you want to remove all issues matching this search query from your bookmarks?'
+                          )
+                        : count =>
+                            tn(
+                              'Are you sure you want to remove this %d issue from your bookmarks?',
+                              'Are you sure you want to remove these %d issues from your bookmarks?',
+                              count
+                            )
                     }
                     confirmLabel={
                       this.state.allInQuerySelected
                         ? t('Remove all issues from bookmarks')
-                        : (count) =>
-                            tn('Remove %d selected issue from bookmarks',
-                               'Remove %d selected issues from bookmarks',
-                               count)
+                        : count =>
+                            tn(
+                              'Remove %d selected issue from bookmarks',
+                              'Remove %d selected issues from bookmarks',
+                              count
+                            )
                     }
                     onlyIfBulk={true}
-                    selectAllActive={this.state.pageSelected}>
-                   {t('Remove from Bookmarks')}
+                    selectAllActive={this.state.pageSelected}
+                  >
+                    {t('Remove from Bookmarks')}
                   </ActionLink>
                 </MenuItem>
                 <MenuItem divider={true} />
@@ -338,24 +397,31 @@ const StreamActions = React.createClass({
                     extraDescription={extraDescription}
                     confirmationQuestion={
                       this.state.allInQuerySelected
-                        ? t('Are you sure you want to unresolve all issues matching this search query?')
-                        : (count) =>
-                          tn('Are you sure you want to unresolve this %d issue?',
-                             'Are you sure you want to unresolve these %d issues?',
-                             count)
+                        ? t(
+                            'Are you sure you want to unresolve all issues matching this search query?'
+                          )
+                        : count =>
+                            tn(
+                              'Are you sure you want to unresolve this %d issue?',
+                              'Are you sure you want to unresolve these %d issues?',
+                              count
+                            )
                     }
                     confirmLabel={
                       this.state.allInQuerySelected
                         ? t('Unresolve all issues')
-                        : (count) =>
-                            tn('Unresolve %d selected issue',
-                               'Unresolve %d selected issues',
-                               count)
+                        : count =>
+                            tn(
+                              'Unresolve %d selected issue',
+                              'Unresolve %d selected issues',
+                              count
+                            )
                     }
                     onlyIfBulk={true}
                     selectAllActive={this.state.pageSelected}
-                    groupIds={this.props.groupIds}>
-                   {t('Set status to: Unresolved')}
+                    groupIds={this.props.groupIds}
+                  >
+                    {t('Set status to: Unresolved')}
                   </ActionLink>
                 </MenuItem>
                 <MenuItem noAnchor={true}>
@@ -366,23 +432,30 @@ const StreamActions = React.createClass({
                     extraDescription={extraDescription}
                     confirmationQuestion={
                       this.state.allInQuerySelected
-                        ? t('Are you sure you want to ignore all issues matching this search query?')
-                        : (count) =>
-                             tn('Are you sure you want to ignore this %d issue?',
-                                'Are you sure you want to ignore these %d issues?',
-                                count)
+                        ? t(
+                            'Are you sure you want to ignore all issues matching this search query?'
+                          )
+                        : count =>
+                            tn(
+                              'Are you sure you want to ignore this %d issue?',
+                              'Are you sure you want to ignore these %d issues?',
+                              count
+                            )
                     }
                     confirmLabel={
                       this.state.allInQuerySelected
                         ? t('Ignore all issues')
-                        : (count) =>
-                            tn('Ignore %d selected issue',
-                               'Ignore %d selected issues',
-                               count)
+                        : count =>
+                            tn(
+                              'Ignore %d selected issue',
+                              'Ignore %d selected issues',
+                              count
+                            )
                     }
                     onlyIfBulk={true}
-                    selectAllActive={this.state.pageSelected}>
-                   {t('Set status to: Ignored')}
+                    selectAllActive={this.state.pageSelected}
+                  >
+                    {t('Set status to: Ignored')}
                   </ActionLink>
                 </MenuItem>
                 <MenuItem divider={true} />
@@ -392,38 +465,35 @@ const StreamActions = React.createClass({
                     disabled={!this.state.anySelected || this.state.allInQuerySelected}
                     onAction={this.onDelete}
                     extraDescription={extraDescription}
-                    confirmationQuestion={
-                      (count) =>
-                        tn('Are you sure you want to delete %d issue?',
-                           'Are you sure you want to delete %d issues?',
-                           count)
-                    }
-                    confirmLabel={
-                      (count) =>
-                        tn('Delete %d selected issue',
-                           'Delete %d selected issues',
-                           count)
-                    }
-                    selectAllActive={this.state.pageSelected}>
-                   {t('Delete Events')}
+                    confirmationQuestion={count =>
+                      tn(
+                        'Are you sure you want to delete %d issue?',
+                        'Are you sure you want to delete %d issues?',
+                        count
+                      )}
+                    confirmLabel={count =>
+                      tn('Delete %d selected issue', 'Delete %d selected issues', count)}
+                    selectAllActive={this.state.pageSelected}
+                  >
+                    {t('Delete Events')}
                   </ActionLink>
                 </MenuItem>
               </DropdownLink>
             </div>
 
             <div className="btn-group">
-              <a className="btn btn-default btn-sm hidden-xs realtime-control"
-                 onClick={this.onRealtimeChange}>
-                {(this.props.realtimeActive ?
-                  <span className="icon icon-pause"></span>
-                  :
-                  <span className="icon icon-play"></span>
-                )}
+              <a
+                className="btn btn-default btn-sm hidden-xs realtime-control"
+                onClick={this.onRealtimeChange}
+              >
+                {this.props.realtimeActive
+                  ? <span className="icon icon-pause" />
+                  : <span className="icon icon-play" />}
               </a>
             </div>
           </div>
-          <div className="hidden-sm stream-actions-assignee col-md-1"></div>
-          <div className="stream-actions-level col-md-1 hidden-xs"></div>
+          <div className="hidden-sm stream-actions-assignee col-md-1" />
+          <div className="stream-actions-level col-md-1 hidden-xs" />
           <div className="hidden-sm hidden-xs stream-actions-graph col-md-2">
             <span className="stream-actions-graph-label">{t('Graph:')}</span>
             <ul className="toggle-graph">
@@ -435,25 +505,31 @@ const StreamActions = React.createClass({
               </li>
             </ul>
           </div>
-          <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">{t('Events')}</div>
-          <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">{t('Users')}</div>
+          <div className="stream-actions-count align-right col-md-1 col-sm-2 col-xs-2">
+            {t('Events')}
+          </div>
+          <div className="stream-actions-users align-right col-md-1 col-sm-2 col-xs-2">
+            {t('Users')}
+          </div>
         </div>
-        {!this.props.allResultsVisible && this.state.pageSelected &&
-          <div className="row stream-select-all-notice" >
+        {!this.props.allResultsVisible &&
+          this.state.pageSelected &&
+          <div className="row stream-select-all-notice">
             <div className="col-md-12">
               {this.state.allInQuerySelected
                 ? <strong>{t('All issues matching this search query selected.')}</strong>
                 : <span>
-                    {tn('%d issue on this page selected.',
-                        '%d issues on this page selected.', numIssues)}
+                    {tn(
+                      '%d issue on this page selected.',
+                      '%d issues on this page selected.',
+                      numIssues
+                    )}
                     <a onClick={this.selectAll}>
                       {t('Select all issues matching this search query.')}
                     </a>
-                  </span>
-              }
+                  </span>}
             </div>
-          </div>
-        }
+          </div>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 888302485b..dded0e6376 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -39,7 +39,7 @@ const StreamFilters = React.createClass({
       query: null,
       onSortChange: function() {},
       onSearch: function() {},
-      onSidebarToggle: function () {}
+      onSidebarToggle: function() {}
     };
   },
 
@@ -57,14 +57,13 @@ const StreamFilters = React.createClass({
               searchId={searchId}
               query={this.props.query}
               onSavedSearchCreate={this.props.onSavedSearchCreate}
-              savedSearchList={this.props.savedSearchList} />
+              savedSearchList={this.props.savedSearchList}
+            />
           </div>
           <div className="col-sm-7">
             <div className="search-container">
               <div className="stream-sort">
-                <SortOptions
-                  sort={this.props.sort}
-                  onSelect={this.props.onSortChange} />
+                <SortOptions sort={this.props.sort} onSelect={this.props.onSortChange} />
               </div>
 
               <SearchBar
@@ -76,8 +75,12 @@ const StreamFilters = React.createClass({
                 placeholder={t('Search for events, users, tags, and everything else.')}
                 query={this.props.query || ''}
                 onSearch={this.props.onSearch}
-                disabled={this.props.isSearchDisabled} />
-              <a className="btn btn-default toggle-stream-sidebar" onClick={this.props.onSidebarToggle}>
+                disabled={this.props.isSearchDisabled}
+              />
+              <a
+                className="btn btn-default toggle-stream-sidebar"
+                onClick={this.props.onSidebarToggle}
+              >
                 <span className="icon-filter" />
               </a>
             </div>
diff --git a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
index 012467b3a8..6b4538e566 100644
--- a/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
+++ b/src/sentry/static/sentry/app/views/stream/savedSearchSelector.jsx
@@ -12,7 +12,7 @@ import {BooleanField, TextField} from '../../components/forms';
 const SaveSearchState = {
   READY: 'Ready',
   SAVING: 'Saving',
-  ERROR: 'Error',
+  ERROR: 'Error'
 };
 
 const SaveSearchButton = React.createClass({
@@ -26,7 +26,7 @@ const SaveSearchButton = React.createClass({
     tooltip: React.PropTypes.string,
     buttonTitle: React.PropTypes.string,
 
-    onSave: React.PropTypes.func.isRequired,
+    onSave: React.PropTypes.func.isRequired
   },
 
   mixins: [ApiMixin],
@@ -36,8 +36,8 @@ const SaveSearchButton = React.createClass({
       isModalOpen: false,
       state: SaveSearchState.READY,
       formData: {
-        query: this.props.query,
-      },
+        query: this.props.query
+      }
     };
   },
 
@@ -49,8 +49,8 @@ const SaveSearchButton = React.createClass({
       isModalOpen: !this.state.isModalOpen,
       state: SaveSearchState.READY,
       formData: {
-        query: this.props.query,
-      },
+        query: this.props.query
+      }
     });
   },
 
@@ -58,7 +58,7 @@ const SaveSearchButton = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -76,78 +76,94 @@ const SaveSearchButton = React.createClass({
     if (this.state.state == SaveSearchState.SAVING) {
       return;
     }
-    this.setState({
-      state: SaveSearchState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, projectId} = this.props;
-      this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
-        method: 'POST',
-        data: this.state.formData,
-        success: (data) => {
-          this.onToggle();
-          this.props.onSave(data);
-        },
-        complete: () => {
-          this.setState({state: SaveSearchState.ERROR});
-          IndicatorStore.remove(loadingIndicator);
-        },
-      });
-    });
+    this.setState(
+      {
+        state: SaveSearchState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, projectId} = this.props;
+        this.api.request(`/projects/${orgId}/${projectId}/searches/`, {
+          method: 'POST',
+          data: this.state.formData,
+          success: data => {
+            this.onToggle();
+            this.props.onSave(data);
+          },
+          complete: () => {
+            this.setState({state: SaveSearchState.ERROR});
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
     let isSaving = this.state.state === SaveSearchState.SAVING;
     return (
-      <a title={this.props.tooltip || this.props.buttonTitle}
-         className={this.props.className}
-         disabled={this.props.disabled}
-         onClick={this.onToggle}
-         style={this.props.style}>
+      <a
+        title={this.props.tooltip || this.props.buttonTitle}
+        className={this.props.className}
+        disabled={this.props.disabled}
+        onClick={this.onToggle}
+        style={this.props.style}
+      >
         {this.props.children}
 
-        <Modal show={this.state.isModalOpen}
-               animation={false}
-               onHide={this.onToggle}>
+        <Modal show={this.state.isModalOpen} animation={false} onHide={this.onToggle}>
           <form onSubmit={this.onSubmit}>
             <div className="modal-header">
               <h4>{t('Save Current Search')}</h4>
             </div>
             <div className="modal-body">
-              <p>{t('Saving this search will give you and your team quick access to it in the future.')}</p>
+              <p>
+                {t(
+                  'Saving this search will give you and your team quick access to it in the future.'
+                )}
+              </p>
               <TextField
                 key="name"
                 name="name"
                 label={t('Name')}
                 placeholder="e.g. My Search Results"
                 required={true}
-                onChange={this.onFieldChange.bind(this, 'name')} />
+                onChange={this.onFieldChange.bind(this, 'name')}
+              />
               <TextField
                 key="query"
                 name="query"
                 label={t('Query')}
                 value={this.state.formData.query}
                 required={true}
-                onChange={this.onFieldChange.bind(this, 'query')} />
+                onChange={this.onFieldChange.bind(this, 'query')}
+              />
               <BooleanField
                 key="isUserDefault"
                 name="is-user-default"
                 label={t('Make this the default view for myself.')}
-                onChange={this.onFieldChange.bind(this, 'isUserDefault')} />
+                onChange={this.onFieldChange.bind(this, 'isUserDefault')}
+              />
               {this.props.access.has('project:write') &&
                 <BooleanField
                   key="isDefault"
                   name="is-default"
                   label={t('Make this the default view for my team.')}
-                  onChange={this.onFieldChange.bind(this, 'isDefault')} />
-              }
+                  onChange={this.onFieldChange.bind(this, 'isDefault')}
+                />}
             </div>
             <div className="modal-footer">
-              <button type="button" className="btn btn-default"
-                      disabled={isSaving}
-                      onClick={this.onToggle}>{t('Cancel')}</button>
-              <button type="submit" className="btn btn-primary"
-                      disabled={isSaving}>{t('Save')}</button>
+              <button
+                type="button"
+                className="btn btn-default"
+                disabled={isSaving}
+                onClick={this.onToggle}
+              >
+                {t('Cancel')}
+              </button>
+              <button type="submit" className="btn btn-primary" disabled={isSaving}>
+                {t('Save')}
+              </button>
             </div>
           </form>
         </Modal>
@@ -171,7 +187,7 @@ const SavedSearchSelector = React.createClass({
   getTitle() {
     let searchId = this.props.searchId || null;
     if (!searchId) return t('Custom Search');
-    let results = this.props.savedSearchList.filter((search) => {
+    let results = this.props.savedSearchList.filter(search => {
       return searchId === search.id;
     });
     return results.length ? results[0].name : t('Custom Search');
@@ -179,12 +195,11 @@ const SavedSearchSelector = React.createClass({
 
   render() {
     let {access, orgId, projectId} = this.props;
-    let children = this.props.savedSearchList.map((search) => {
+    let children = this.props.savedSearchList.map(search => {
       // TODO(dcramer): we want these to link directly to the saved
       // search ID, and pass that into the backend (probably)
       return (
-        <MenuItem to={`/${orgId}/${projectId}/searches/${search.id}/`}
-                  key={search.id}>
+        <MenuItem to={`/${orgId}/${projectId}/searches/${search.id}/`} key={search.id}>
           <strong>{search.name}</strong>
           <code>{search.query}</code>
         </MenuItem>
@@ -193,26 +208,30 @@ const SavedSearchSelector = React.createClass({
     return (
       <div className="saved-search-selector">
         <DropdownLink title={this.getTitle()}>
-          {children.length ?
-            children
-          :
-            <li className="empty">{t('There don\'t seem to be any saved searches yet.')}</li>
-          }
-          {access.has('project:write') &&
-            <MenuItem divider={true} />
-          }
+          {children.length
+            ? children
+            : <li className="empty">
+                {t('There don\'t seem to be any saved searches yet.')}
+              </li>}
+          {access.has('project:write') && <MenuItem divider={true} />}
           <li>
             <div className="row">
               <div className="col-md-7">
                 <SaveSearchButton
-                    className="btn btn-sm btn-default"
-                    onSave={this.props.onSavedSearchCreate}
-                    {...this.props}>{t('Save Current Search')}</SaveSearchButton>
+                  className="btn btn-sm btn-default"
+                  onSave={this.props.onSavedSearchCreate}
+                  {...this.props}
+                >
+                  {t('Save Current Search')}
+                </SaveSearchButton>
               </div>
               <div className="col-md-5">
                 <Link
                   to={`/${orgId}/${projectId}/settings/saved-searches/`}
-                  className="btn btn-sm btn-default">{t('Manage')}</Link>
+                  className="btn btn-sm btn-default"
+                >
+                  {t('Manage')}
+                </Link>
               </div>
             </div>
           </li>
diff --git a/src/sentry/static/sentry/app/views/stream/searchBar.jsx b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
index b784f5c9ce..5aa0e8e023 100644
--- a/src/sentry/static/sentry/app/views/stream/searchBar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchBar.jsx
@@ -32,7 +32,7 @@ const SearchBar = React.createClass({
   mixins: [
     ApiMixin,
     PureRenderMixin,
-    Reflux.listenTo(MemberListStore, 'onMemberListStoreChange'),
+    Reflux.listenTo(MemberListStore, 'onMemberListStoreChange')
   ],
 
   statics: {
@@ -139,10 +139,7 @@ const SearchBar = React.createClass({
   },
 
   clearSearch() {
-    this.setState(
-      {query: ''},
-      () => this.props.onSearch(this.state.query)
-    );
+    this.setState({query: ''}, () => this.props.onSearch(this.state.query));
   },
 
   onQueryFocus() {
@@ -161,10 +158,7 @@ const SearchBar = React.createClass({
   },
 
   onQueryChange(evt) {
-    this.setState(
-      {query: evt.target.value},
-      () => this.updateAutoCompleteItems()
-    );
+    this.setState({query: evt.target.value}, () => this.updateAutoCompleteItems());
   },
 
   onKeyUp(evt) {
@@ -183,7 +177,7 @@ const SearchBar = React.createClass({
    *
    * e.g. ['is:', 'assigned:', 'url:', 'release:']
    */
-  getTagKeys: function (query) {
+  getTagKeys: function(query) {
     return StreamTagStore.getTagKeys()
       .map(key => key + ':')
       .filter(key => key.indexOf(query) > -1);
@@ -193,7 +187,7 @@ const SearchBar = React.createClass({
    * Returns array of tag values that substring match `query`; invokes `callback`
    * with data when ready
    */
-  getTagValues: _.debounce(function (tag, query, callback) {
+  getTagValues: _.debounce(function(tag, query, callback) {
     // Strip double quotes if there are any
     query = query.replace('"', '').trim();
 
@@ -207,12 +201,16 @@ const SearchBar = React.createClass({
         query: query
       },
       method: 'GET',
-      success: (values) => {
+      success: values => {
         this.setState({loading: false});
-        callback(values.map((v) => {
-          // Wrap in quotes if there is a space
-          return v.value.indexOf(' ') > -1 ? `"${v.value}"` : v.value;
-        }), tag.key, query);
+        callback(
+          values.map(v => {
+            // Wrap in quotes if there is a space
+            return v.value.indexOf(' ') > -1 ? `"${v.value}"` : v.value;
+          }),
+          tag.key,
+          query
+        );
       }
     });
   }, 300),
@@ -221,9 +219,8 @@ const SearchBar = React.createClass({
    * Returns array of tag values that substring match `query`; invokes `callback`
    * with results
    */
-  getPredefinedTagValues: function (tag, query, callback) {
-    let values = tag.values
-      .filter(value => value.indexOf(query) > -1);
+  getPredefinedTagValues: function(tag, query, callback) {
+    let values = tag.values.filter(value => value.indexOf(query) > -1);
 
     callback(values, tag.key);
   },
@@ -231,16 +228,18 @@ const SearchBar = React.createClass({
   onInputClick() {
     let cursor = this.getCursorPosition();
 
-    if (cursor === this.state.query.length && this.state.query.charAt(cursor - 1) !== ' ') {
+    if (
+      cursor === this.state.query.length && this.state.query.charAt(cursor - 1) !== ' '
+    ) {
       // If the cursor lands at the end of the input value, and the preceding character
       // is not whitespace, then add a space and move the cursor beyond that space.
-      this.setState(
-        {query: this.state.query + ' '},
-        () => {
-          ReactDOM.findDOMNode(this.refs.searchInput).setSelectionRange(cursor + 1, cursor + 1);
-          this.updateAutoCompleteItems();
-        }
-      );
+      this.setState({query: this.state.query + ' '}, () => {
+        ReactDOM.findDOMNode(this.refs.searchInput).setSelectionRange(
+          cursor + 1,
+          cursor + 1
+        );
+        this.updateAutoCompleteItems();
+      });
     } else {
       this.updateAutoCompleteItems();
     }
@@ -258,11 +257,13 @@ const SearchBar = React.createClass({
     let lastTermIndex = SearchBar.getLastTermIndex(query, cursor);
     let terms = SearchBar.getQueryTerms(query.slice(0, lastTermIndex));
 
-    if (!terms || // no terms
-        terms.length === 0 || // no terms
-        terms.length === 1 && terms[0] === this.props.defaultQuery || // default term
-        /^\s+$/.test(query.slice(cursor - 1, cursor + 1))) // cursor on whitespace
-    {
+    if (
+      !terms || // no terms
+      terms.length === 0 || // no terms
+      (terms.length === 1 && terms[0] === this.props.defaultQuery) || // default term
+      /^\s+$/.test(query.slice(cursor - 1, cursor + 1))
+    ) {
+      // cursor on whitespace
       // show default "help" search terms
       return void this.setState({
         searchTerm: '',
@@ -290,7 +291,9 @@ const SearchBar = React.createClass({
 
       // filter existing items immediately, until API can return
       // with actual tag value results
-      let filteredSearchItems = this.state.searchItems.filter(item => query && item.value.indexOf(query) !== -1);
+      let filteredSearchItems = this.state.searchItems.filter(
+        item => query && item.value.indexOf(query) !== -1
+      );
 
       this.setState({
         searchTerm: query,
@@ -298,14 +301,13 @@ const SearchBar = React.createClass({
       });
 
       let tag = StreamTagStore.getTag(tagName);
-      if (!tag)
-        return undefined;
-
-      return void (
-        tag.predefined
-          ? this.getPredefinedTagValues
-          : this.getTagValues
-        )(tag, query, this.updateAutoCompleteState);
+      if (!tag) return undefined;
+
+      return void (tag.predefined ? this.getPredefinedTagValues : this.getTagValues)(
+        tag,
+        query,
+        this.updateAutoCompleteState
+      );
     }
   },
 
@@ -317,7 +319,7 @@ const SearchBar = React.createClass({
     autoCompleteItems = autoCompleteItems.map(item => {
       let out = {
         desc: item,
-        value: item,
+        value: item
       };
 
       // Specify icons according to tag value
@@ -349,8 +351,7 @@ const SearchBar = React.createClass({
     let state = this.state;
     let searchItems = state.searchItems;
 
-    if (!searchItems.length)
-      return;
+    if (!searchItems.length) return;
 
     if (evt.key === 'ArrowDown' || evt.key === 'ArrowUp') {
       evt.preventDefault();
@@ -364,7 +365,6 @@ const SearchBar = React.createClass({
 
       searchItems[state.activeSearchItem].active = true;
       this.setState({searchItems: searchItems.slice(0)});
-
     } else if (evt.key === 'Tab' && !this.isDefaultDropdown()) {
       evt.preventDefault();
 
@@ -391,30 +391,36 @@ const SearchBar = React.createClass({
       newQuery = query.slice(0, lastTermIndex); // get text preceding last term
 
       newQuery = last.indexOf(':') > -1
-        // tag key present: replace everything after colon with replaceText
-        ? newQuery.replace(/\:"[^"]*"?$|\:\S*$/, ':' + replaceText)
-        // no tag key present: replace last token with replaceText
-        : newQuery.replace(/\S+$/, replaceText);
+        ? // tag key present: replace everything after colon with replaceText
+          newQuery.replace(/\:"[^"]*"?$|\:\S*$/, ':' + replaceText)
+        : // no tag key present: replace last token with replaceText
+          newQuery.replace(/\S+$/, replaceText);
 
       newQuery = newQuery.concat(query.slice(lastTermIndex));
     }
 
-    this.setState({
-      query: newQuery
-    }, () => {
-      // setting a new input value will lose focus; restore it
-      let node = ReactDOM.findDOMNode(this.refs.searchInput);
-      node.focus();
+    this.setState(
+      {
+        query: newQuery
+      },
+      () => {
+        // setting a new input value will lose focus; restore it
+        let node = ReactDOM.findDOMNode(this.refs.searchInput);
+        node.focus();
 
-      // then update the autocomplete box with new contextTypes
-      this.updateAutoCompleteItems();
-    });
+        // then update the autocomplete box with new contextTypes
+        this.updateAutoCompleteItems();
+      }
+    );
   },
 
   onMemberListStoreChange(members) {
-    this.setState({
-      members: members
-    }, this.updateAutoCompleteItems);
+    this.setState(
+      {
+        members: members
+      },
+      this.updateAutoCompleteItems
+    );
   },
 
   render() {
@@ -423,14 +429,15 @@ const SearchBar = React.createClass({
     };
 
     let rootClassNames = ['search'];
-    if (this.props.disabled)
-      rootClassNames.push('disabled');
+    if (this.props.disabled) rootClassNames.push('disabled');
 
     return (
       <div className={classNames(rootClassNames)}>
         <form className="form-horizontal" ref="searchForm" onSubmit={this.onSubmit}>
           <div>
-            <input type="text" className="search-input form-control"
+            <input
+              type="text"
+              className="search-input form-control"
               placeholder={this.props.placeholder}
               name="query"
               ref="searchInput"
@@ -443,15 +450,14 @@ const SearchBar = React.createClass({
               onChange={this.onQueryChange}
               onClick={this.onInputClick}
               disabled={this.props.disabled}
-              />
+            />
             <span className="icon-search" />
             {this.state.query !== '' &&
               <div>
                 <a className="search-clear-form" onClick={this.clearSearch}>
                   <span className="icon-circle-cross" />
                 </a>
-              </div>
-            }
+              </div>}
           </div>
 
           {(this.state.loading || this.state.searchItems.length > 0) &&
@@ -462,9 +468,8 @@ const SearchBar = React.createClass({
                 onClick={this.onAutoComplete}
                 loading={this.state.loading}
                 searchSubstring={this.state.searchTerm}
-                />
-            </div>
-          }
+              />
+            </div>}
         </form>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
index fc84ec035d..e888bc0b22 100644
--- a/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
+++ b/src/sentry/static/sentry/app/views/stream/searchDropdown.jsx
@@ -18,7 +18,7 @@ const SearchDropdown = React.createClass({
   getDefaultProps() {
     return {
       searchSubstring: '',
-      onClick: function () {}
+      onClick: function() {}
     };
   },
 
@@ -28,14 +28,12 @@ const SearchDropdown = React.createClass({
 
   renderDescription(item) {
     let searchSubstring = this.props.searchSubstring;
-    if (!searchSubstring)
-      return item.desc;
+    if (!searchSubstring) return item.desc;
 
     let text = item.desc;
     let idx = text.toLowerCase().indexOf(searchSubstring.toLowerCase());
 
-    if (idx === -1)
-      return item.desc;
+    if (idx === -1) return item.desc;
 
     return (
       <span>
@@ -51,18 +49,30 @@ const SearchDropdown = React.createClass({
       <div className="search-dropdown">
         <ul className="search-helper search-autocomplete-list">
           {this.props.loading
-            ? <li key="loading" className="search-autocomplete-item"><LoadingIndicator mini={true}/></li>
-            : this.props.items.map((item) => {
-              return (
-                <li key={item.value || item.desc} className={classNames('search-autocomplete-item', item.active && 'active')} onClick={this.onClick.bind(this, item.value)}>
-                  <span className={classNames('icon', item.className)}></span>
-                  <h4>{ item.title && item.title + ' - '}<span className="search-description">{this.renderDescription(item)}</span></h4>
-                  {item.example ?
-                    <p className="search-example">{item.example}</p> : ''
-                  }
-                </li>
-              );
-            })}
+            ? <li key="loading" className="search-autocomplete-item">
+                <LoadingIndicator mini={true} />
+              </li>
+            : this.props.items.map(item => {
+                return (
+                  <li
+                    key={item.value || item.desc}
+                    className={classNames(
+                      'search-autocomplete-item',
+                      item.active && 'active'
+                    )}
+                    onClick={this.onClick.bind(this, item.value)}
+                  >
+                    <span className={classNames('icon', item.className)} />
+                    <h4>
+                      {item.title && item.title + ' - '}
+                      <span className="search-description">
+                        {this.renderDescription(item)}
+                      </span>
+                    </h4>
+                    {item.example ? <p className="search-example">{item.example}</p> : ''}
+                  </li>
+                );
+              })}
         </ul>
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index d7900b3171..636e52328d 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -5,7 +5,6 @@ import LoadingIndicator from '../../components/loadingIndicator';
 import {queryToObj, objToQuery} from '../../utils/stream';
 import {t} from '../../locale';
 
-
 let TEXT_FILTER_DEBOUNCE_IN_MS = 300;
 
 const StreamSidebar = React.createClass({
@@ -24,7 +23,7 @@ const StreamSidebar = React.createClass({
     return {
       tags: {},
       query: '',
-      onQueryChange: function () {}
+      onQueryChange: function() {}
     };
   },
 
@@ -52,24 +51,28 @@ const StreamSidebar = React.createClass({
 
   onSelectTag(tag, value) {
     let newQuery = {...this.state.queryObj};
-    if (value)
-      newQuery[tag.key] = value;
-    else
-      delete newQuery[tag.key];
-
-    this.setState({
-      queryObj: newQuery,
-    }, this.onQueryChange);
+    if (value) newQuery[tag.key] = value;
+    else delete newQuery[tag.key];
+
+    this.setState(
+      {
+        queryObj: newQuery
+      },
+      this.onQueryChange
+    );
   },
 
-  onTextChange: function (evt) {
+  onTextChange: function(evt) {
     this.setState({textFilter: evt.target.value});
   },
 
   debouncedTextChange: _.debounce(function(text) {
-    this.setState({
-      queryObj: {...this.state.queryObj, __text:text}
-    }, this.onQueryChange);
+    this.setState(
+      {
+        queryObj: {...this.state.queryObj, __text: text}
+      },
+      this.onQueryChange
+    );
   }, TEXT_FILTER_DEBOUNCE_IN_MS),
 
   onTextFilterSubmit(evt) {
@@ -80,9 +83,12 @@ const StreamSidebar = React.createClass({
       __text: this.state.textFilter
     };
 
-    this.setState({
-      queryObj: newQueryObj
-    }, this.onQueryChange);
+    this.setState(
+      {
+        queryObj: newQueryObj
+      },
+      this.onQueryChange
+    );
   },
 
   onQueryChange() {
@@ -91,50 +97,50 @@ const StreamSidebar = React.createClass({
   },
 
   onClearSearch() {
-    this.setState({
-      textFilter: ''
-    }, this.onTextFilterSubmit);
+    this.setState(
+      {
+        textFilter: ''
+      },
+      this.onTextFilterSubmit
+    );
   },
 
   render() {
     return (
       <div className="stream-sidebar">
-        {this.props.loading ?
-          <LoadingIndicator/>
-        :
-          <div>
-            <div className="stream-tag-filter">
-              <h6 className="nav-header">{t('Text')}</h6>
-              <form onSubmit={this.onTextFilterSubmit}>
-                <input
-                  className="form-control"
-                  placeholder={t('Search title and culprit text body')}
-                  onChange={this.onTextChange}
-                  value={this.state.textFilter}
-                />
-                {this.state.textFilter &&
-                  <a className="search-clear-form" onClick={this.onClearSearch}>
-                    <span className="icon-circle-cross" />
-                  </a>
-                }
-              </form>
-              <hr/>
-            </div>
-
-            {_.map(this.props.tags, (tag) => {
-              return (
-                <StreamTagFilter
-                  value={this.state.queryObj[tag.key]}
-                  key={tag.key}
-                  tag={tag}
-                  onSelect={this.onSelectTag}
-                  orgId={this.props.orgId}
-                  projectId={this.props.projectId}
-                />
-              );
-            })}
-          </div>
-        }
+        {this.props.loading
+          ? <LoadingIndicator />
+          : <div>
+              <div className="stream-tag-filter">
+                <h6 className="nav-header">{t('Text')}</h6>
+                <form onSubmit={this.onTextFilterSubmit}>
+                  <input
+                    className="form-control"
+                    placeholder={t('Search title and culprit text body')}
+                    onChange={this.onTextChange}
+                    value={this.state.textFilter}
+                  />
+                  {this.state.textFilter &&
+                    <a className="search-clear-form" onClick={this.onClearSearch}>
+                      <span className="icon-circle-cross" />
+                    </a>}
+                </form>
+                <hr />
+              </div>
+
+              {_.map(this.props.tags, tag => {
+                return (
+                  <StreamTagFilter
+                    value={this.state.queryObj[tag.key]}
+                    key={tag.key}
+                    tag={tag}
+                    onSelect={this.onSelectTag}
+                    orgId={this.props.orgId}
+                    projectId={this.props.projectId}
+                  />
+                );
+              })}
+            </div>}
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
index 2290ff7972..c13acf43fd 100644
--- a/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sortOptions.jsx
@@ -20,13 +20,17 @@ const SortOptions = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     this.setState({
-      sortKey: nextProps.sort || 'date',
+      sortKey: nextProps.sort || 'date'
     });
   },
 
   getMenuItem(key) {
     return (
-      <MenuItem onSelect={this.onSelect} eventKey={key} isActive={this.state.sortKey === key}>
+      <MenuItem
+        onSelect={this.onSelect}
+        eventKey={key}
+        isActive={this.state.sortKey === key}
+      >
         {this.getSortLabel(key)}
       </MenuItem>
     );
@@ -62,9 +66,7 @@ const SortOptions = React.createClass({
     );
 
     return (
-      <DropdownLink
-          btnGroup={true}
-          title={dropdownTitle}>
+      <DropdownLink btnGroup={true} title={dropdownTitle}>
         {this.getMenuItem('priority')}
         {this.getMenuItem('date')}
         {this.getMenuItem('new')}
@@ -75,4 +77,3 @@ const SortOptions = React.createClass({
 });
 
 export default SortOptions;
-
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 4904a5813f..213659e20a 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -12,7 +12,7 @@ const StreamTagFilter = React.createClass({
   },
 
   statics: {
-    tagValueToSelect2Format: (key) => {
+    tagValueToSelect2Format: key => {
       return {
         id: key,
         text: key
@@ -60,7 +60,9 @@ const StreamTagFilter = React.createClass({
           results: (data, page) => {
             // parse the results into the format expected by Select2
             return {
-              results: _.map(data, (val) => StreamTagFilter.tagValueToSelect2Format(val.value))
+              results: _.map(data, val =>
+                StreamTagFilter.tagValueToSelect2Format(val.value)
+              )
             };
           },
           cache: true
@@ -76,12 +78,15 @@ const StreamTagFilter = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     if (nextProps.value !== this.state.value) {
-      this.setState({
-        value: nextProps.value
-      }, () => {
-        let select = this.refs.select;
-        $(select).select2('val', this.state.value);
-      });
+      this.setState(
+        {
+          value: nextProps.value
+        },
+        () => {
+          let select = this.refs.select;
+          $(select).select2('val', this.state.value);
+        }
+      );
     }
   },
 
@@ -112,18 +117,14 @@ const StreamTagFilter = React.createClass({
       <div className="stream-tag-filter">
         <h6 className="nav-header">{tag.name}</h6>
 
-        {this.props.tag.predefined ?
-
-          <select ref="select" onChange={function(){}}>
-            <option key="empty"></option>
-            {this.props.tag.values.map((val) => {
-              return (
-                <option key={val}>{val}</option>
-              );
-            })}
-          </select> :
-          <input type="hidden" ref="select" value={this.props.value}/>
-        }
+        {this.props.tag.predefined
+          ? <select ref="select" onChange={function() {}}>
+              <option key="empty" />
+              {this.props.tag.values.map(val => {
+                return <option key={val}>{val}</option>;
+              })}
+            </select>
+          : <input type="hidden" ref="select" value={this.props.value} />}
 
       </div>
     );
diff --git a/src/sentry/static/sentry/app/views/teamDetails.jsx b/src/sentry/static/sentry/app/views/teamDetails.jsx
index a1ed4cbe35..09a3b80a7b 100644
--- a/src/sentry/static/sentry/app/views/teamDetails.jsx
+++ b/src/sentry/static/sentry/app/views/teamDetails.jsx
@@ -12,10 +12,7 @@ import OrganizationHomeContainer from '../components/organizations/homeContainer
 import {t} from '../locale';
 
 const TeamDetails = React.createClass({
-  mixins: [
-    ApiMixin,
-    OrganizationState
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
@@ -31,12 +28,16 @@ const TeamDetails = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     let params = this.props.params;
-    if (nextProps.params.teamId !== params.teamId ||
-        nextProps.params.orgId !== params.orgId) {
-      this.setState({
-        loading: true,
-        error: false
-      }, this.fetchData);
+    if (
+      nextProps.params.teamId !== params.teamId || nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(
+        {
+          loading: true,
+          error: false
+        },
+        this.fetchData
+      );
     }
   },
 
@@ -44,7 +45,7 @@ const TeamDetails = React.createClass({
     let params = this.props.params;
 
     this.api.request(`/teams/${params.orgId}/${params.teamId}/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           team: data,
           loading: false,
@@ -64,7 +65,10 @@ const TeamDetails = React.createClass({
     let team = this.state.team;
     if (data.slug !== team.slug) {
       let orgId = this.props.params.orgId;
-      browserHistory.pushState(null, `/organizations/${orgId}/teams/${data.slug}/settings/`);
+      browserHistory.pushState(
+        null,
+        `/organizations/${orgId}/teams/${data.slug}/settings/`
+      );
     } else {
       Object.assign({}, team, data);
       this.setState({team: team});
@@ -72,10 +76,8 @@ const TeamDetails = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let team = this.state.team;
     let {orgId, teamId} = this.props.params;
@@ -87,10 +89,13 @@ const TeamDetails = React.createClass({
         <h3>{team.name}</h3>
 
         {access.has('team:admin') &&
-          <DropdownLink topLevelClasses="pull-right anchor-right" className="dropdown-menu-right" title={t('More')}>
+          <DropdownLink
+            topLevelClasses="pull-right anchor-right"
+            className="dropdown-menu-right"
+            title={t('More')}
+          >
             <MenuItem href={`${routePrefix}/remove/`}>{t('Remove Team')}</MenuItem>
-          </DropdownLink>
-        }
+          </DropdownLink>}
 
         <ul className="nav nav-tabs border-bottom">
           <ListLink to={`${routePrefix}/settings/`}>{t('Settings')}</ListLink>
@@ -99,7 +104,7 @@ const TeamDetails = React.createClass({
 
         {React.cloneElement(this.props.children, {
           team: team,
-          onTeamChange: this.onTeamChange,
+          onTeamChange: this.onTeamChange
         })}
       </OrganizationHomeContainer>
     );
diff --git a/src/sentry/static/sentry/app/views/teamMembers.jsx b/src/sentry/static/sentry/app/views/teamMembers.jsx
index ed565ccd00..86ec97d6bb 100644
--- a/src/sentry/static/sentry/app/views/teamMembers.jsx
+++ b/src/sentry/static/sentry/app/views/teamMembers.jsx
@@ -8,16 +8,13 @@ import OrganizationState from '../mixins/organizationState';
 import {t} from '../locale';
 
 const TeamMembers = React.createClass({
-  mixins: [
-    ApiMixin,
-    OrganizationState
-  ],
+  mixins: [ApiMixin, OrganizationState],
 
   getInitialState() {
     return {
       loading: true,
       error: false,
-      memberList: null,
+      memberList: null
     };
   },
 
@@ -27,12 +24,16 @@ const TeamMembers = React.createClass({
 
   componentWillReceiveProps(nextProps) {
     let params = this.props.params;
-    if (nextProps.params.teamId !== params.teamId ||
-        nextProps.params.orgId !== params.orgId) {
-      this.setState({
-        loading: true,
-        error: false
-      }, this.fetchData);
+    if (
+      nextProps.params.teamId !== params.teamId || nextProps.params.orgId !== params.orgId
+    ) {
+      this.setState(
+        {
+          loading: true,
+          error: false
+        },
+        this.fetchData
+      );
     }
   },
 
@@ -40,7 +41,7 @@ const TeamMembers = React.createClass({
     let params = this.props.params;
 
     this.api.request(`/teams/${params.orgId}/${params.teamId}/members/`, {
-      success: (data) => {
+      success: data => {
         this.setState({
           memberList: data,
           loading: false,
@@ -57,10 +58,8 @@ const TeamMembers = React.createClass({
   },
 
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
+    if (this.state.loading) return <LoadingIndicator />;
+    else if (this.state.error) return <LoadingError onRetry={this.fetchData} />;
 
     let {orgId} = this.props.params;
     let memberPrefix = `/organizations/${orgId}/members`;
@@ -69,22 +68,25 @@ const TeamMembers = React.createClass({
     return (
       <div>
         <div style={{marginBottom: 20}} className="clearfix">
-          {access.has('org:write') ?
-            <a className="btn btn-primary btn-sm pull-right" href={`${memberPrefix}/new/`}>
-              <span className="icon-plus" /> {t('Invite Member')}
-            </a>
-          :
-            <a className="btn btn-primary btn-sm btn-disabled tip pull-right"
-               title={t('You do not have enough permission to add new members')}>
-              <span className="icon-plus" /> {t('Invite Member')}
-            </a>
-          }
+          {access.has('org:write')
+            ? <a
+                className="btn btn-primary btn-sm pull-right"
+                href={`${memberPrefix}/new/`}
+              >
+                <span className="icon-plus" /> {t('Invite Member')}
+              </a>
+            : <a
+                className="btn btn-primary btn-sm btn-disabled tip pull-right"
+                title={t('You do not have enough permission to add new members')}
+              >
+                <span className="icon-plus" /> {t('Invite Member')}
+              </a>}
         </div>
 
         <table className="table member-list">
           <colgroup>
             <col />
-            <col width="150"/>
+            <col width="150" />
           </colgroup>
           <thead>
             <tr>
@@ -93,7 +95,7 @@ const TeamMembers = React.createClass({
             </tr>
           </thead>
           <tbody>
-            {this.state.memberList.map((member) => {
+            {this.state.memberList.map(member => {
               return (
                 <tr>
                   <td className="table-user-info">
diff --git a/src/sentry/static/sentry/app/views/teamSettings.jsx b/src/sentry/static/sentry/app/views/teamSettings.jsx
index 357f2909aa..138f9a72ea 100644
--- a/src/sentry/static/sentry/app/views/teamSettings.jsx
+++ b/src/sentry/static/sentry/app/views/teamSettings.jsx
@@ -18,7 +18,7 @@ const TeamSettingsForm = React.createClass({
   getInitialState() {
     return {
       formData: Object.assign({}, this.props.initialData),
-      errors: {},
+      errors: {}
     };
   },
 
@@ -26,7 +26,7 @@ const TeamSettingsForm = React.createClass({
     let formData = this.state.formData;
     formData[name] = value;
     this.setState({
-      formData: formData,
+      formData: formData
     });
   },
 
@@ -36,32 +36,35 @@ const TeamSettingsForm = React.createClass({
     if (this.state.state == FormState.SAVING) {
       return;
     }
-    this.setState({
-      state: FormState.SAVING,
-    }, () => {
-      let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
-      let {orgId, teamId} = this.props;
-      this.api.request(`/teams/${orgId}/${teamId}/`, {
-        method: 'PUT',
-        data: this.state.formData,
-        success: (data) => {
-          this.props.onSave(data);
-          this.setState({
-            state: FormState.READY,
-            errors: {},
-          });
-        },
-        error: (error) => {
-          this.setState({
-            state: FormState.ERROR,
-            errors: error.responseJSON,
-          });
-        },
-        complete: () => {
-          IndicatorStore.remove(loadingIndicator);
-        }
-      });
-    });
+    this.setState(
+      {
+        state: FormState.SAVING
+      },
+      () => {
+        let loadingIndicator = IndicatorStore.add(t('Saving changes..'));
+        let {orgId, teamId} = this.props;
+        this.api.request(`/teams/${orgId}/${teamId}/`, {
+          method: 'PUT',
+          data: this.state.formData,
+          success: data => {
+            this.props.onSave(data);
+            this.setState({
+              state: FormState.READY,
+              errors: {}
+            });
+          },
+          error: error => {
+            this.setState({
+              state: FormState.ERROR,
+              errors: error.responseJSON
+            });
+          },
+          complete: () => {
+            IndicatorStore.remove(loadingIndicator);
+          }
+        });
+      }
+    );
   },
 
   render() {
@@ -71,9 +74,10 @@ const TeamSettingsForm = React.createClass({
       <form onSubmit={this.onSubmit} className="form-stacked">
         {this.state.state === FormState.ERROR &&
           <div className="alert alert-error alert-block">
-            {t('Unable to save your changes. Please ensure all fields are valid and try again.')}
-          </div>
-        }
+            {t(
+              'Unable to save your changes. Please ensure all fields are valid and try again.'
+            )}
+          </div>}
         <fieldset>
           <TextField
             key="name"
@@ -82,18 +86,21 @@ const TeamSettingsForm = React.createClass({
             value={this.state.formData.name}
             required={true}
             error={errors.name}
-            onChange={this.onFieldChange.bind(this, 'name')} />
+            onChange={this.onFieldChange.bind(this, 'name')}
+          />
           <TextField
             key="slug"
             label={t('Short name')}
             value={this.state.formData.slug}
             required={true}
             error={errors.slug}
-            onChange={this.onFieldChange.bind(this, 'slug')} />
-       </fieldset>
+            onChange={this.onFieldChange.bind(this, 'slug')}
+          />
+        </fieldset>
         <fieldset className="form-actions">
-          <button type="submit" className="btn btn-primary"
-                  disabled={isSaving}>{t('Save Changes')}</button>
+          <button type="submit" className="btn btn-primary" disabled={isSaving}>
+            {t('Save Changes')}
+          </button>
         </fieldset>
       </form>
     );
@@ -118,7 +125,8 @@ const TeamSettings = React.createClass({
               orgId={orgId}
               teamId={teamId}
               initialData={team}
-              onSave={this.props.onTeamChange} />
+              onSave={this.props.onTeamChange}
+            />
           </div>
         </div>
       </div>
diff --git a/tests/js/spec/api.spec.jsx b/tests/js/spec/api.spec.jsx
index 81852a6f02..fb45ebd533 100644
--- a/tests/js/spec/api.spec.jsx
+++ b/tests/js/spec/api.spec.jsx
@@ -2,47 +2,53 @@ import $ from 'jquery';
 import {Client, Request, paramsToQueryArgs} from 'app/api';
 import GroupActions from 'app/actions/groupActions';
 
-describe('api', function () {
-  beforeEach(function () {
+describe('api', function() {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
     this.api = new Client();
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('paramsToQueryArgs()', function () {
-    it('should convert itemIds properties to id array', function () {
-      expect(paramsToQueryArgs({
-        itemIds: [1, 2, 3],
-        query: 'is:unresolved' // itemIds takes precedence
-      })).to.eql({id: [1, 2, 3]});
+  describe('paramsToQueryArgs()', function() {
+    it('should convert itemIds properties to id array', function() {
+      expect(
+        paramsToQueryArgs({
+          itemIds: [1, 2, 3],
+          query: 'is:unresolved' // itemIds takes precedence
+        })
+      ).to.eql({id: [1, 2, 3]});
     });
 
-    it('should extract query property if no itemIds', function () {
-      expect(paramsToQueryArgs({
-        query: 'is:unresolved',
-        foo: 'bar'
-      })).to.eql({query: 'is:unresolved'});
+    it('should extract query property if no itemIds', function() {
+      expect(
+        paramsToQueryArgs({
+          query: 'is:unresolved',
+          foo: 'bar'
+        })
+      ).to.eql({query: 'is:unresolved'});
     });
 
-    it('should convert params w/o itemIds or query to undefined', function () {
-      expect(paramsToQueryArgs({
-        foo: 'bar',
-        bar: 'baz' // paramsToQueryArgs ignores these
-      })).to.be.undefined;
+    it('should convert params w/o itemIds or query to undefined', function() {
+      expect(
+        paramsToQueryArgs({
+          foo: 'bar',
+          bar: 'baz' // paramsToQueryArgs ignores these
+        })
+      ).to.be.undefined;
     });
   });
 
-  describe('Client', function () {
-    beforeEach(function () {
+  describe('Client', function() {
+    beforeEach(function() {
       this.sandbox.stub($, 'ajax');
     });
 
-    describe('cancel()', function () {
-      it('should abort any open XHR requests', function () {
+    describe('cancel()', function() {
+      it('should abort any open XHR requests', function() {
         let req1 = new Request({
           abort: sinon.stub()
         });
@@ -63,17 +69,17 @@ describe('api', function () {
     });
   });
 
-  describe('bulkUpdate()', function () {
-    beforeEach(function () {
+  describe('bulkUpdate()', function() {
+    beforeEach(function() {
       this.sandbox.stub(this.api, '_wrapRequest');
       this.sandbox.stub(GroupActions, 'update'); // stub GroupActions.update call from api.update
     });
 
-    it('should use itemIds as query if provided', function () {
+    it('should use itemIds as query if provided', function() {
       this.api.bulkUpdate({
         orgId: '1337',
         projectId: '1337',
-        itemIds: [1,2,3],
+        itemIds: [1, 2, 3],
         data: {status: 'unresolved'},
         query: 'is:resolved'
       });
@@ -83,7 +89,7 @@ describe('api', function () {
       expect(requestArgs.query).to.eql({id: [1, 2, 3]});
     });
 
-    it('should use query as query if itemIds are absent', function () {
+    it('should use query as query if itemIds are absent', function() {
       this.api.bulkUpdate({
         orgId: '1337',
         projectId: '1337',
@@ -98,19 +104,19 @@ describe('api', function () {
     });
   });
 
-  describe('merge()', function () {
+  describe('merge()', function() {
     // TODO: this is totally copypasta from the test above. We need to refactor
     //       these API methods/tests.
-    beforeEach(function () {
+    beforeEach(function() {
       this.sandbox.stub(this.api, '_wrapRequest');
       this.sandbox.stub(GroupActions, 'merge'); // stub GroupActions.merge call from api.merge
     });
 
-    it('should use itemIds as query if provided', function () {
+    it('should use itemIds as query if provided', function() {
       this.api.merge({
         orgId: '1337',
         projectId: '1337',
-        itemIds: [1,2,3],
+        itemIds: [1, 2, 3],
         data: {status: 'unresolved'},
         query: 'is:resolved'
       });
@@ -120,7 +126,7 @@ describe('api', function () {
       expect(requestArgs.query).to.eql({id: [1, 2, 3]});
     });
 
-    it('should use query as query if itemIds are absent', function () {
+    it('should use query as query if itemIds are absent', function() {
       this.api.merge({
         orgId: '1337',
         projectId: '1337',
diff --git a/tests/js/spec/components/assigneeSelector.spec.jsx b/tests/js/spec/components/assigneeSelector.spec.jsx
index a87d9b9de0..89416f7235 100644
--- a/tests/js/spec/components/assigneeSelector.spec.jsx
+++ b/tests/js/spec/components/assigneeSelector.spec.jsx
@@ -22,7 +22,7 @@ describe('AssigneeSelector', function() {
     email: 'johnsmith@example.com'
   };
 
-  beforeEach(function () {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
     stubReactComponents(this.sandbox, [LoadingIndicator]);
 
@@ -33,29 +33,29 @@ describe('AssigneeSelector', function() {
     });
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('statics', function () {
+  describe('statics', function() {
     const filterMembers = AssigneeSelector.filterMembers;
 
-    describe('filterMembers()', function () {
-      it('should return the full array when filter is falsy', function () {
+    describe('filterMembers()', function() {
+      it('should return the full array when filter is falsy', function() {
         expect(filterMembers([USER_1, USER_2], '')).to.eql([USER_1, USER_2]);
         expect(filterMembers([USER_1, USER_2], null)).to.eql([USER_1, USER_2]);
         expect(filterMembers([USER_1, USER_2], undefined)).to.eql([USER_1, USER_2]);
       });
 
-      it('should match on email', function () {
+      it('should match on email', function() {
         expect(filterMembers([USER_1, USER_2], 'johnsmith@example.com')).to.eql([USER_2]);
       });
 
-      it('should match on name', function () {
+      it('should match on name', function() {
         expect(filterMembers([USER_1, USER_2], 'John Smith')).to.eql([USER_2]);
       });
 
-      it('should ignore capitalization', function () {
+      it('should ignore capitalization', function() {
         expect(filterMembers([USER_1], 'Jane')).to.eql([USER_1]);
         expect(filterMembers([USER_1], 'jane')).to.eql([USER_1]);
       });
@@ -63,8 +63,8 @@ describe('AssigneeSelector', function() {
 
     const putSessionUserFirst = AssigneeSelector.putSessionUserFirst;
 
-    describe('putSessionUserFirst()', function () {
-      it('should place the session user at the top of the member list if present', function () {
+    describe('putSessionUserFirst()', function() {
+      it('should place the session user at the top of the member list if present', function() {
         this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({
           id: 2,
           name: 'John Smith',
@@ -73,7 +73,7 @@ describe('AssigneeSelector', function() {
         expect(putSessionUserFirst([USER_1, USER_2])).to.eql([USER_2, USER_1]);
       });
 
-      it('should return the same member list if the session user isn\'t present', function () {
+      it('should return the same member list if the session user isn\'t present', function() {
         this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({
           id: 555,
           name: 'Here Comes a New Challenger',
@@ -85,53 +85,64 @@ describe('AssigneeSelector', function() {
     });
   });
 
-  describe('onFilterKeyDown()', function () {
-    beforeEach(function () {
-      let assigneeSelector = this.assigneeSelector =
-        TestUtils.renderIntoDocument(<AssigneeSelector id="1337"/>);
+  describe('onFilterKeyDown()', function() {
+    beforeEach(function() {
+      let assigneeSelector = (this.assigneeSelector = TestUtils.renderIntoDocument(
+        <AssigneeSelector id="1337" />
+      ));
 
       this.sandbox.stub(assigneeSelector, 'assignTo');
     });
 
-    it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function () {
+    it('should assign the first filtered member when the Enter key is pressed and filter is truthy', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = 'Jane';
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
-        {key: 'Enter', keyCode: 13, which: 13}
-      );
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
+        key: 'Enter',
+        keyCode: 13,
+        which: 13
+      });
       expect(assigneeSelector.assignTo.calledOnce).to.be.ok;
-      expect(assigneeSelector.assignTo.lastCall.args[0]).to.have.property('name', 'Jane Doe');
+      expect(assigneeSelector.assignTo.lastCall.args[0]).to.have.property(
+        'name',
+        'Jane Doe'
+      );
     });
 
-    it('should do nothing when the Enter key is pressed, but filter is the empty string', function () {
+    it('should do nothing when the Enter key is pressed, but filter is the empty string', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = '';
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
-        {key: 'Enter', keyCode: 13, which: 13}
-      );
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
+        key: 'Enter',
+        keyCode: 13,
+        which: 13
+      });
       expect(assigneeSelector.assignTo.notCalled).to.be.ok;
     });
 
-    it('should do nothing if a non-Enter key is pressed', function () {
+    it('should do nothing if a non-Enter key is pressed', function() {
       let assigneeSelector = this.assigneeSelector;
       assigneeSelector.state.filter = 'Jane';
 
-      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter,
-        {key: 'h', keyCode: 72, which: 72}
-      );
+      TestUtils.Simulate.keyDown(assigneeSelector.refs.filter, {
+        key: 'h',
+        keyCode: 72,
+        which: 72
+      });
       expect(assigneeSelector.assignTo.notCalled).to.be.ok;
     });
   });
 
-  describe('onFilterKeyUp()', function () {
-    beforeEach(function () {
-      this.assigneeSelector =
-        TestUtils.renderIntoDocument(<AssigneeSelector id="1337"/>);
+  describe('onFilterKeyUp()', function() {
+    beforeEach(function() {
+      this.assigneeSelector = TestUtils.renderIntoDocument(
+        <AssigneeSelector id="1337" />
+      );
     });
 
-    it('should close the dropdown when keyup is triggered with the Escape key', function () {
+    it('should close the dropdown when keyup is triggered with the Escape key', function() {
       let assigneeSelector = this.assigneeSelector;
       this.sandbox.stub(assigneeSelector.refs.dropdown, 'close');
 
@@ -140,7 +151,7 @@ describe('AssigneeSelector', function() {
       expect(assigneeSelector.refs.dropdown.close.calledOnce).to.be.ok;
     });
 
-    it('should update the local filter state if any other key is pressed', function () {
+    it('should update the local filter state if any other key is pressed', function() {
       let assigneeSelector = this.assigneeSelector;
 
       TestUtils.Simulate.keyUp(assigneeSelector.refs.filter, {target: {value: 'foo'}});
@@ -150,10 +161,14 @@ describe('AssigneeSelector', function() {
 
   describe('componentDidUpdate()', function() {
     beforeEach(function() {
-      this.assigneeSelector = TestUtils.renderIntoDocument(<AssigneeSelector id="1337"/>);
+      this.assigneeSelector = TestUtils.renderIntoDocument(
+        <AssigneeSelector id="1337" />
+      );
     });
 
-    it('should destroy old assignee tooltip and create a new assignee tooltip', function(done) {
+    it('should destroy old assignee tooltip and create a new assignee tooltip', function(
+      done
+    ) {
       this.sandbox.spy(this.assigneeSelector, 'attachTooltips');
       this.sandbox.spy(this.assigneeSelector, 'removeTooltips');
 
@@ -165,4 +180,3 @@ describe('AssigneeSelector', function() {
     });
   });
 });
-
diff --git a/tests/js/spec/components/avatar.spec.jsx b/tests/js/spec/components/avatar.spec.jsx
index 0e4696030e..98c1c802d2 100644
--- a/tests/js/spec/components/avatar.spec.jsx
+++ b/tests/js/spec/components/avatar.spec.jsx
@@ -9,11 +9,11 @@ describe('Avatar', function() {
     email: 'janedoe@example.com'
   };
 
-  beforeEach(function () {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
@@ -25,7 +25,7 @@ describe('Avatar', function() {
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
-      let avatar = shallow(<Avatar user={user}/>).instance();
+      let avatar = shallow(<Avatar user={user} />).instance();
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
@@ -40,7 +40,7 @@ describe('Avatar', function() {
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
-      let avatar = shallow(<Avatar user={user}/>).instance();
+      let avatar = shallow(<Avatar user={user} />).instance();
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
@@ -55,7 +55,7 @@ describe('Avatar', function() {
           avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
         }
       });
-      let avatar = shallow(<Avatar user={user}/>).instance();
+      let avatar = shallow(<Avatar user={user} />).instance();
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
@@ -64,7 +64,7 @@ describe('Avatar', function() {
     });
 
     it('should show a gravatar when no avatar type is set and user has an email address', function() {
-      let avatar = shallow(<Avatar user={USER}/>).instance();
+      let avatar = shallow(<Avatar user={USER} />).instance();
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
@@ -75,7 +75,7 @@ describe('Avatar', function() {
     it('should not show a gravatar when no avatar type is set and user has no email address', function() {
       let user = Object.assign({}, USER);
       delete user.email;
-      let avatar = shallow(<Avatar user={user}/>).instance();
+      let avatar = shallow(<Avatar user={user} />).instance();
       this.sandbox.stub(avatar, 'buildGravatarUrl');
       this.sandbox.stub(avatar, 'buildProfileUrl');
       avatar.renderImg();
diff --git a/tests/js/spec/components/avatarCropper.spec.jsx b/tests/js/spec/components/avatarCropper.spec.jsx
index e16f0fa20c..74560b6647 100644
--- a/tests/js/spec/components/avatarCropper.spec.jsx
+++ b/tests/js/spec/components/avatarCropper.spec.jsx
@@ -2,93 +2,116 @@ import React from 'react';
 import {shallow} from 'enzyme';
 import AvatarCropper from 'app/components/avatarCropper';
 
-
 describe('AvatarCropper', function() {
   const USER = {
     email: 'a@example.com',
-      avatar: {
-        avatarType: 'gravatar',
-        avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
-      }
+    avatar: {
+      avatarType: 'gravatar',
+      avatarUuid: '2d641b5d-8c74-44de-9cb6-fbd54701b35e'
+    }
   };
 
   describe('getDiffNW', function() {
-    it(('should return a negative diff when yDiff and xDiff ' +
-        'are positive (cropper is getting smaller)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffNW(4, 5);
-      expect(diff).to.equal(-4.5);
-    });
+    it(
+      'should return a negative diff when yDiff and xDiff ' +
+        'are positive (cropper is getting smaller)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffNW(4, 5);
+        expect(diff).to.equal(-4.5);
+      }
+    );
 
-    it('should return a positive diff when yDiff and xDiff ' +
-       'are negative (cropper is getting bigger)', function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffNW(-4, -5);
-      expect(diff).to.equal(4.5);
-    });
+    it(
+      'should return a positive diff when yDiff and xDiff ' +
+        'are negative (cropper is getting bigger)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffNW(-4, -5);
+        expect(diff).to.equal(4.5);
+      }
+    );
   });
 
   describe('getDiffNE', function() {
-    it(('should return a positive diff when yDiff is negative and ' +
-        'xDiff is positive (cropper is getting bigger)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffNE(-4, 5);
-      expect(diff).to.equal(4.5);
-    });
+    it(
+      'should return a positive diff when yDiff is negative and ' +
+        'xDiff is positive (cropper is getting bigger)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffNE(-4, 5);
+        expect(diff).to.equal(4.5);
+      }
+    );
 
-    it(('should return a negative diff when yDiff is positive and ' +
-        'xDiff is negative (cropper is getting smaller)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffNE(4, -5);
-      expect(diff).to.equal(-4.5);
-    });
+    it(
+      'should return a negative diff when yDiff is positive and ' +
+        'xDiff is negative (cropper is getting smaller)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffNE(4, -5);
+        expect(diff).to.equal(-4.5);
+      }
+    );
   });
 
   describe('getDiffSE', function() {
-    it(('should return a positive diff when yDiff and ' +
-        'xDiff are positive (cropper is getting bigger)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffSE(4, 5);
-      expect(diff).to.equal(4.5);
-    });
+    it(
+      'should return a positive diff when yDiff and ' +
+        'xDiff are positive (cropper is getting bigger)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffSE(4, 5);
+        expect(diff).to.equal(4.5);
+      }
+    );
 
-    it(('should return a negative diff when yDiff and ' +
-        'xDiff are negative (cropper is getting smaller)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffSE(-4, -5);
-      expect(diff).to.equal(-4.5);
-    });
+    it(
+      'should return a negative diff when yDiff and ' +
+        'xDiff are negative (cropper is getting smaller)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffSE(-4, -5);
+        expect(diff).to.equal(-4.5);
+      }
+    );
   });
 
   describe('getDiffSW', function() {
-    it(('should return a positive diff when yDiff is positive and ' +
-        'xDiff is negative (cropper is getting bigger)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffSW(4, -5);
-      expect(diff).to.equal(4.5);
-    });
+    it(
+      'should return a positive diff when yDiff is positive and ' +
+        'xDiff is negative (cropper is getting bigger)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffSW(4, -5);
+        expect(diff).to.equal(4.5);
+      }
+    );
 
-    it(('should return a negative diff when yDiff is negative and' +
-        'xDiff is positive (cropper is getting smaller)'), function() {
-      let cropper = shallow(
-        <AvatarCropper user={USER} updateDataUrlState={function() {}}/>
-      ).instance();
-      let diff = cropper.getDiffSW(-4, 5);
-      expect(diff).to.equal(-4.5);
-    });
+    it(
+      'should return a negative diff when yDiff is negative and' +
+        'xDiff is positive (cropper is getting smaller)',
+      function() {
+        let cropper = shallow(
+          <AvatarCropper user={USER} updateDataUrlState={function() {}} />
+        ).instance();
+        let diff = cropper.getDiffSW(-4, 5);
+        expect(diff).to.equal(-4.5);
+      }
+    );
   });
 });
diff --git a/tests/js/spec/components/barChart.spec.jsx b/tests/js/spec/components/barChart.spec.jsx
index aff628b342..2c5f4a6a14 100644
--- a/tests/js/spec/components/barChart.spec.jsx
+++ b/tests/js/spec/components/barChart.spec.jsx
@@ -5,22 +5,20 @@ import TestUtils from 'react-addons-test-utils';
 import BarChart from 'app/components/barChart';
 
 describe('BarChart', function() {
-
   describe('render()', function() {
-
     it('renders with default props', function() {
       let comp = TestUtils.renderIntoDocument(<BarChart />);
       expect(comp).to.be.ok;
     });
 
-    it('renders with points data', function () {
+    it('renders with points data', function() {
       let points = [
         {x: 1439766000, y: 10},
         {x: 1439769600, y: 20},
-        {x: 1439773200, y: 30},
+        {x: 1439773200, y: 30}
       ];
 
-      let comp = TestUtils.renderIntoDocument(<BarChart points={points}/>);
+      let comp = TestUtils.renderIntoDocument(<BarChart points={points} />);
       let columns = ReactDOM.findDOMNode(comp).querySelectorAll('.chart-column');
 
       expect(columns).to.have.property('length', 3);
@@ -29,7 +27,7 @@ describe('BarChart', function() {
       expect(columns[2]).to.have.property('textContent', '30');
     });
 
-    it('renders with points and markers', function () {
+    it('renders with points and markers', function() {
       let points = [
         {x: 1439769600, y: 10},
         {x: 1439773200, y: 20},
@@ -40,7 +38,9 @@ describe('BarChart', function() {
         {x: 1439776800, className: 'last-seen', label: 'last seen'} // matches last point
       ];
 
-      let comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
+      let comp = TestUtils.renderIntoDocument(
+        <BarChart points={points} markers={markers} />
+      );
       let columns = ReactDOM.findDOMNode(comp).getElementsByTagName('a');
 
       expect(columns).to.have.property('length', 5);
@@ -53,16 +53,16 @@ describe('BarChart', function() {
       expect(columns[4]).to.have.property('textContent', '30');
     });
 
-    it('renders with points and markers, when first and last seen are same data point', function () {
-      let points = [
-        {x: 1439776800, y: 30}
-      ];
+    it('renders with points and markers, when first and last seen are same data point', function() {
+      let points = [{x: 1439776800, y: 30}];
       let markers = [
         {x: 1439776800, className: 'first-seen', label: 'first seen'},
         {x: 1439776800, className: 'last-seen', label: 'last seen'}
       ];
 
-      let comp = TestUtils.renderIntoDocument(<BarChart points={points} markers={markers}/>);
+      let comp = TestUtils.renderIntoDocument(
+        <BarChart points={points} markers={markers} />
+      );
       let columns = ReactDOM.findDOMNode(comp).getElementsByTagName('a');
 
       expect(columns).to.have.property('length', 3);
@@ -73,6 +73,4 @@ describe('BarChart', function() {
       expect(columns[2]).to.have.property('textContent', '30');
     });
   });
-
 });
-
diff --git a/tests/js/spec/components/contextData.spec.jsx b/tests/js/spec/components/contextData.spec.jsx
index 3c3aec0ccc..6fb11c6667 100644
--- a/tests/js/spec/components/contextData.spec.jsx
+++ b/tests/js/spec/components/contextData.spec.jsx
@@ -5,12 +5,11 @@ import TestUtils from 'react-addons-test-utils';
 import ContextData from 'app/components/contextData';
 
 describe('ContextData', function() {
-
   describe('render()', function() {
-    describe('strings', function () {
-      it('should render urls w/ an additional <a> link', function () {
+    describe('strings', function() {
+      it('should render urls w/ an additional <a> link', function() {
         const URL = 'https://example.org/foo/bar/';
-        let ctxData = TestUtils.renderIntoDocument(<ContextData data={URL}/>);
+        let ctxData = TestUtils.renderIntoDocument(<ContextData data={URL} />);
 
         let node = ReactDOM.findDOMNode(ctxData);
 
@@ -19,6 +18,4 @@ describe('ContextData', function() {
       });
     });
   });
-
 });
-
diff --git a/tests/js/spec/components/dropdownLink.spec.jsx b/tests/js/spec/components/dropdownLink.spec.jsx
index ca91524d60..ef31b42d38 100644
--- a/tests/js/spec/components/dropdownLink.spec.jsx
+++ b/tests/js/spec/components/dropdownLink.spec.jsx
@@ -5,16 +5,15 @@ import DropdownLink from 'app/components/dropdownLink';
 describe('DropdownLink', function() {
   const INPUT_1 = {
     title: 'test',
-    onOpen: ()=>{},
-    onClose: ()=>{},
+    onOpen: () => {},
+    onClose: () => {},
     topLevelClasses: 'React.PropTypes.string',
     menuClasses: ''
   };
 
-
   describe('componentWillUnmount()', function() {
     it('should remove event handlers before unmounting', function() {
-      let dropdownlink = TestUtils.renderIntoDocument(<DropdownLink {...INPUT_1}/>);
+      let dropdownlink = TestUtils.renderIntoDocument(<DropdownLink {...INPUT_1} />);
 
       let handlers = jQuery._data(dropdownlink.refs.dropdownToggle.parentNode, 'events');
       expect(handlers).to.be.an('object');
@@ -25,5 +24,4 @@ describe('DropdownLink', function() {
       expect(handlers).to.be.an('undefined');
     });
   });
-
 });
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
index 5be7c48022..1cda15e2b0 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/breadcrumbs.spec.jsx
@@ -14,55 +14,55 @@ describe('BreadcrumbsInterface', function() {
     },
     type: 'blah',
     data: {
-      values: [{message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'hey', category: 'error', level: 'info'},
-               {message: 'hello', category: 'default', level: 'extreme'},
-               {message: 'bye', category: 'default', level: 'extreme'},
-               {message: 'ok', category: 'error', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'},
-               {message: 'sup', category: 'default', level: 'extreme'}]
+      values: [
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'hey', category: 'error', level: 'info'},
+        {message: 'hello', category: 'default', level: 'extreme'},
+        {message: 'bye', category: 'default', level: 'extreme'},
+        {message: 'ok', category: 'error', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'},
+        {message: 'sup', category: 'default', level: 'extreme'}
+      ]
     }
   };
   describe('filterCrumbs', function() {
     it('should filter crumbs based on crumb message', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'up')).to.have.length(13);
     });
 
     it('should filter crumbs based on crumb level', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'ext')).to.have.length(16);
     });
 
     it('should filter crumbs based on crumb category', function() {
-      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS}/>).instance();
+      const breadcrumbs = shallow(<BreadcrumbsInterface {...PROPS} />).instance();
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'hi')).to.have.length(0);
       expect(breadcrumbs.filterCrumbs(PROPS.data.values, 'error')).to.have.length(2);
     });
-
   });
 
-
   describe('render', function() {
     it('should display the correct number of crumbs with no filter', function() {
-      const wrapper = shallow(<BreadcrumbsInterface {...PROPS}/>);
+      const wrapper = shallow(<BreadcrumbsInterface {...PROPS} />);
       expect(wrapper.find(Breadcrumb)).to.have.length(10);
     });
 
     it('should display the correct number of crumbs with a filter', function() {
-      const wrapper = shallow(<BreadcrumbsInterface {...PROPS}/>);
+      const wrapper = shallow(<BreadcrumbsInterface {...PROPS} />);
       wrapper.setState({queryValue: 'sup'});
       expect(wrapper.find(Breadcrumb)).to.have.length(10);
       wrapper.setState({queryValue: 'sup', collapsed: false});
diff --git a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
index e9e454c8fe..a922f7b4c2 100644
--- a/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/breadcrumbComponents/httpRenderer.spec.jsx
@@ -4,15 +4,19 @@ import HttpRenderer from 'app/components/events/interfaces/breadcrumbs/httpRende
 
 describe('HttpRenderer', function() {
   describe('render()', function() {
-    it('should work', function () {
-      let httpRendererWrapper = shallow(<HttpRenderer crumb={{
-        data: {
-          method: 'POST',
-          url: 'http://example.com/foo',
-          // status_code 0 is possible via broken client-side XHR; should still render as '[0]'
-          status_code: 0
-        }
-      }}/>);
+    it('should work', function() {
+      let httpRendererWrapper = shallow(
+        <HttpRenderer
+          crumb={{
+            data: {
+              method: 'POST',
+              url: 'http://example.com/foo',
+              // status_code 0 is possible via broken client-side XHR; should still render as '[0]'
+              status_code: 0
+            }
+          }}
+        />
+      );
 
       let summaryLine = httpRendererWrapper.prop('summary');
 
@@ -22,11 +26,15 @@ describe('HttpRenderer', function() {
       expect(summaryLineWrapper.find('span').text()).to.eql(' [0]');
     });
 
-    it('shouldn\'t blow up if crumb.data is missing', function () {
-      let httpRendererWrapper = mount(<HttpRenderer crumb={{
-        category: 'xhr',
-        type: 'http'
-      }}/>);
+    it('shouldn\'t blow up if crumb.data is missing', function() {
+      let httpRendererWrapper = mount(
+        <HttpRenderer
+          crumb={{
+            category: 'xhr',
+            type: 'http'
+          }}
+        />
+      );
 
       expect(httpRendererWrapper.find('.crumb-category').text()).to.eql('xhr');
     });
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index 30226e5ac0..08d5be09f8 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -5,18 +5,18 @@ import stubReactComponents from '../../../../helpers/stubReactComponent';
 import Frame from 'app/components/events/interfaces/frame';
 import FrameVariables from 'app/components/events/interfaces/frameVariables';
 
-describe('Frame', function () {
-  beforeEach(function () {
+describe('Frame', function() {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
     stubReactComponents(this.sandbox, [FrameVariables]);
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('renderOriginalSourceInfo()', function () {
-    beforeEach(function () {
+  describe('renderOriginalSourceInfo()', function() {
+    beforeEach(function() {
       this.data = {
         origAbsPath: 'https://beta.getsentry.com/_static/sentry/dist/vendor.js',
         origColNo: 2503,
@@ -28,12 +28,13 @@ describe('Frame', function () {
       };
     });
 
-    it('should render the source map information as a HTML string', function () {
+    it('should render the source map information as a HTML string', function() {
       let frame = TestUtils.renderIntoDocument(<Frame data={this.data} />);
 
       // NOTE: indentation/whitespace intentional to match output string
-      expect(frame.renderOriginalSourceInfo()).to.eql(`\n    <div>\n      <strong>Source Map</strong><br/>https://beta.getsentry.com/_static/sentry/dist/vendor.js.map<br/></div>`);
+      expect(frame.renderOriginalSourceInfo()).to.eql(
+        `\n    <div>\n      <strong>Source Map</strong><br/>https://beta.getsentry.com/_static/sentry/dist/vendor.js.map<br/></div>`
+      );
     });
   });
 });
-
diff --git a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
index e9b42ef44e..9b024c2277 100644
--- a/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/keyValueList.spec.jsx
@@ -3,12 +3,10 @@ import {shallow} from 'enzyme';
 
 import KeyValueList from 'app/components/events/interfaces/keyValueList';
 
-describe('KeyValueList', function () {
-  describe('render', function () {
-    it('should render a definition list of key/value pairs', function () {
-      let data = [
-        ['a', 'x'], ['b', 'y']
-      ];
+describe('KeyValueList', function() {
+  describe('render', function() {
+    it('should render a definition list of key/value pairs', function() {
+      let data = [['a', 'x'], ['b', 'y']];
       let wrapper = shallow(<KeyValueList data={data} />);
 
       expect(wrapper.find('.key').at(0).text()).to.eql('a');
@@ -18,10 +16,8 @@ describe('KeyValueList', function () {
       expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
-    it('should sort sort key/value pairs', function () {
-      let data = [
-        ['b', 'y'], ['a', 'x']
-      ];
+    it('should sort sort key/value pairs', function() {
+      let data = [['b', 'y'], ['a', 'x']];
       let wrapper = shallow(<KeyValueList data={data} />);
 
       expect(wrapper.find('.key').at(0).text()).to.eql('a');
@@ -31,9 +27,10 @@ describe('KeyValueList', function () {
       expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
-    it('should use a single space for values that are an empty string', function () {
+    it('should use a single space for values that are an empty string', function() {
       let data = [
-        ['b', 'y'], ['a', ''] // empty string
+        ['b', 'y'],
+        ['a', ''] // empty string
       ];
       let wrapper = shallow(<KeyValueList data={data} />);
 
@@ -44,20 +41,16 @@ describe('KeyValueList', function () {
       expect(wrapper.find('.value').at(1).text()).to.eql('y');
     });
 
-    it('should coerce non-strings into strings', function () {
-      let data = [
-        ['a', false]
-      ];
+    it('should coerce non-strings into strings', function() {
+      let data = [['a', false]];
       let wrapper = shallow(<KeyValueList data={data} />);
 
       expect(wrapper.find('.key').at(0).text()).to.eql('a');
       expect(wrapper.find('.value').at(0).text()).to.eql('false');
     });
 
-    it('shouldn\'t blow up on null', function () {
-      let data = [
-        ['a', null]
-      ];
+    it('shouldn\'t blow up on null', function() {
+      let data = [['a', null]];
       let wrapper = shallow(<KeyValueList data={data} />);
 
       expect(wrapper.find('.key').at(0).text()).to.eql('a');
diff --git a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
index 89b587b81b..898bca9b6b 100644
--- a/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/rawStacktraceContent.spec.jsx
@@ -1,75 +1,93 @@
-import render, {getJavaFrame, getJavaPreamble} from 'app/components/events/interfaces/rawStacktraceContent';
+import render, {
+  getJavaFrame,
+  getJavaPreamble
+} from 'app/components/events/interfaces/rawStacktraceContent';
 
 describe('RawStacktraceContent', function() {
   describe('getJavaFrame()', function() {
-    it('should render java frames', function () {
-      expect(getJavaFrame({
-        module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
-        function: 'run',
-        filename: 'QueuedThreadPool.java',
-        lineNo: 582
-      })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)');
+    it('should render java frames', function() {
+      expect(
+        getJavaFrame({
+          module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
+          function: 'run',
+          filename: 'QueuedThreadPool.java',
+          lineNo: 582
+        })
+      ).to.eql(
+        '    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)'
+      );
 
       // without line number
-      expect(getJavaFrame({
-        module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
-        function: 'run',
-        filename: 'QueuedThreadPool.java'
-      })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java)');
+      expect(
+        getJavaFrame({
+          module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
+          function: 'run',
+          filename: 'QueuedThreadPool.java'
+        })
+      ).to.eql(
+        '    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java)'
+      );
 
       // without line number and filename
-      expect(getJavaFrame({
-        module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
-        function: 'run'
-      })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run');
+      expect(
+        getJavaFrame({
+          module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
+          function: 'run'
+        })
+      ).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run');
     });
   });
 
-  describe('getJavaPreamble()', function () {
-    expect(getJavaPreamble({
-      type: 'Baz',
-      value: 'message'
-    })).to.eql('Baz: message');
+  describe('getJavaPreamble()', function() {
+    expect(
+      getJavaPreamble({
+        type: 'Baz',
+        value: 'message'
+      })
+    ).to.eql('Baz: message');
 
-    expect(getJavaPreamble({
-      module: 'foo.bar',
-      type: 'Baz',
-      value: 'message'
-    })).to.eql('foo.bar.Baz: message');
+    expect(
+      getJavaPreamble({
+        module: 'foo.bar',
+        type: 'Baz',
+        value: 'message'
+      })
+    ).to.eql('foo.bar.Baz: message');
   });
 
-  describe('render()', function () {
+  describe('render()', function() {
     let exception = {
-          module: 'example.application',
-          type: 'Error',
-          value: 'an error occurred'
-        },
-        data = {
-          frames: [
-            {
-              function: 'main',
-              module: 'example.application',
-              lineNo: 1,
-              filename: 'application'
-            },
-            {
-              function: 'doThing',
-              module: 'example.application',
-              lineNo: 2,
-              filename: 'application'
-            }
-          ]
-        };
+      module: 'example.application',
+      type: 'Error',
+      value: 'an error occurred'
+    },
+      data = {
+        frames: [
+          {
+            function: 'main',
+            module: 'example.application',
+            lineNo: 1,
+            filename: 'application'
+          },
+          {
+            function: 'doThing',
+            module: 'example.application',
+            lineNo: 2,
+            filename: 'application'
+          }
+        ]
+      };
 
     expect(render(data, 'java', exception)).to.eql(
-`example.application.Error: an error occurred
+      `example.application.Error: an error occurred
     at example.application.doThing(application:2)
-    at example.application.main(application:1)`);
+    at example.application.main(application:1)`
+    );
 
     expect(render(data, 'python', exception)).to.eql(
-`Error: an error occurred
+      `Error: an error occurred
   File "application", line 1, in main
-  File "application", line 2, in doThing`);
+  File "application", line 2, in doThing`
+    );
   });
 });
-
diff --git a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
index 745a21d2d5..0f341e0969 100644
--- a/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/richHttpContent.spec.jsx
@@ -3,8 +3,8 @@ import {mount, shallow} from 'enzyme';
 
 import RichHttpContent from 'app/components/events/interfaces/richHttpContent';
 
-describe('RichHttpContent', function () {
-  beforeEach(function () {
+describe('RichHttpContent', function() {
+  beforeEach(function() {
     this.data = {
       query: '',
       data: '',
@@ -16,40 +16,42 @@ describe('RichHttpContent', function () {
     this.sandbox = sinon.sandbox.create();
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('objectToSortedTupleArray', function () {
-    it('should convert a key/value object to a sorted array of key/value tuples', function () {
+  describe('objectToSortedTupleArray', function() {
+    it('should convert a key/value object to a sorted array of key/value tuples', function() {
       let elem = this.elem;
-      expect(elem.objectToSortedTupleArray({
-        awe: 'some',
-        foo: 'bar',
-        bar: 'baz'
-      })).to.eql([
+      expect(
+        elem.objectToSortedTupleArray({
+          awe: 'some',
+          foo: 'bar',
+          bar: 'baz'
+        })
+      ).to.eql([
         // note sorted alphabetically by key
         ['awe', 'some'],
         ['bar', 'baz'],
         ['foo', 'bar']
       ]);
 
-      expect(elem.objectToSortedTupleArray({
-        foo: ['bar', 'baz']
-      })).to.eql([
-        ['foo', 'bar'], ['foo', 'baz']
-      ]);
-
-      expect(elem.objectToSortedTupleArray({
-        foo: ''
-      })).to.eql([
-        ['foo', '']
-      ]);
+      expect(
+        elem.objectToSortedTupleArray({
+          foo: ['bar', 'baz']
+        })
+      ).to.eql([['foo', 'bar'], ['foo', 'baz']]);
+
+      expect(
+        elem.objectToSortedTupleArray({
+          foo: ''
+        })
+      ).to.eql([['foo', '']]);
     });
   });
 
-  describe('getBodySection', function () {
-    it('should return plain-text when unrecognized Content-Type and not parsable as JSON', function () {
+  describe('getBodySection', function() {
+    it('should return plain-text when unrecognized Content-Type and not parsable as JSON', function() {
       let out = this.elem.getBodySection({
         headers: [], // no content-type header,
         data: 'helloworld'
@@ -58,40 +60,29 @@ describe('RichHttpContent', function () {
       expect(out.type).to.eql('pre');
     });
 
-    it('should return a KeyValueList element when Content-Type is x-www-form-urlencoded', function () {
+    it('should return a KeyValueList element when Content-Type is x-www-form-urlencoded', function() {
       let out = this.elem.getBodySection({
-        headers: [
-          ['lol' , 'no'],
-          ['Content-Type', 'application/x-www-form-urlencoded']
-        ], // no content-type header,
+        headers: [['lol', 'no'], ['Content-Type', 'application/x-www-form-urlencoded']], // no content-type header,
         data: 'foo=bar&bar=baz'
       });
 
       // NOTE: ContextData is stubbed in tests; instead returns <div className="ContextData"/>
       expect(out.type.displayName).to.eql('KeyValueList');
-      expect(out.props.data).to.eql([
-        ['bar', 'baz'],
-        ['foo', 'bar']
-      ]);
+      expect(out.props.data).to.eql([['bar', 'baz'], ['foo', 'bar']]);
     });
 
-    it('should return plain-text when Content-Type is x-www-form-urlencoded and query string cannot be parsed', function () {
+    it('should return plain-text when Content-Type is x-www-form-urlencoded and query string cannot be parsed', function() {
       let out = this.elem.getBodySection({
-        headers: [
-          ['Content-Type', 'application/x-www-form-urlencoded']
-        ],
+        headers: [['Content-Type', 'application/x-www-form-urlencoded']],
         data: 'foo=hello%2...' // note: broken URL encoded value (%2 vs %2F)
       });
 
       expect(out.type).to.eql('pre');
     });
 
-    it('should return a ContextData element when Content-Type is application/json', function () {
+    it('should return a ContextData element when Content-Type is application/json', function() {
       let out = this.elem.getBodySection({
-        headers: [
-          ['lol' , 'no'],
-          ['Content-Type', 'application/json']
-        ], // no content-type header,
+        headers: [['lol', 'no'], ['Content-Type', 'application/json']], // no content-type header,
         data: JSON.stringify({foo: 'bar'})
       });
 
@@ -102,11 +93,9 @@ describe('RichHttpContent', function () {
       });
     });
 
-    it('should return a ContextData element when content is JSON, ignoring Content-Type', function () {
+    it('should return a ContextData element when content is JSON, ignoring Content-Type', function() {
       let out = this.elem.getBodySection({
-        headers: [
-          ['Content-Type', 'application/x-www-form-urlencoded']
-        ], // no content-type header,
+        headers: [['Content-Type', 'application/x-www-form-urlencoded']], // no content-type header,
         data: JSON.stringify({foo: 'bar'})
       });
 
@@ -117,19 +106,16 @@ describe('RichHttpContent', function () {
       });
     });
 
-    it('should return plain-text when JSON is not parsable', function () {
+    it('should return plain-text when JSON is not parsable', function() {
       let out = this.elem.getBodySection({
-        headers: [
-          ['lol' , 'no'],
-          ['Content-Type', 'application/json']
-        ],
+        headers: [['lol', 'no'], ['Content-Type', 'application/json']],
         data: 'lol not json'
       });
 
       expect(out.type).to.eql('pre');
     });
 
-    it('should now blow up in a malformed uri', function () {
+    it('should now blow up in a malformed uri', function() {
       // > decodeURIComponent('a%AFc')
       // URIError: URI malformed
       let data = {
@@ -145,7 +131,7 @@ describe('RichHttpContent', function () {
     it('should not cause an invariant violation if data.data isn\'t a string', function() {
       let data = {
         query: '',
-        data: [{'foo': 'bar', 'baz': 1}],
+        data: [{foo: 'bar', baz: 1}],
         headers: [],
         cookies: [],
         env: {}
diff --git a/tests/js/spec/components/events/interfaces/utils.spec.jsx b/tests/js/spec/components/events/interfaces/utils.spec.jsx
index 7f5a09c51f..a0d2106530 100644
--- a/tests/js/spec/components/events/interfaces/utils.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/utils.spec.jsx
@@ -1,83 +1,59 @@
 import {getCurlCommand} from 'app/components/events/interfaces/utils';
 
-
 describe('components/interfaces/utils', function() {
   describe('getCurlCommand()', function() {
-    it('should convert an http request object to an equivalent unix curl command string', function () {
+    it('should convert an http request object to an equivalent unix curl command string', function() {
       getCurlCommand({
-        'cookies': [
-          [
-            'foo',
-            'bar'
-          ],
-          [
-            'biz',
-            'baz'
-          ]
-        ],
-        'url': 'http://example.com/foo',
-        'headers': [
-          [
-            'Referer',
-            'http://example.com'
-          ],
+        cookies: [['foo', 'bar'], ['biz', 'baz']],
+        url: 'http://example.com/foo',
+        headers: [
+          ['Referer', 'http://example.com'],
           [
             'User-Agent',
             'Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36'
           ],
-          [
-            'Content-Type',
-            'application/json'
-          ],
+          ['Content-Type', 'application/json']
         ],
-        'env': {
-          'ENV': 'prod'
+        env: {
+          ENV: 'prod'
         },
-        'fragment': '',
-        'query': 'foo=bar',
-        'data': '{"hello": "world"}',
-        'method': 'GET'
-      }).should.eql('curl \\\n' +
-        ' -H "Content-Type: application/json" \\\n' +
-        ' -H "Referer: http://example.com" \\\n' +
-        ' -H "User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36" \\\n' +
-        ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
-        ' "http://example.com/foo?foo=bar"'
+        fragment: '',
+        query: 'foo=bar',
+        data: '{"hello": "world"}',
+        method: 'GET'
+      }).should.eql(
+        'curl \\\n' +
+          ' -H "Content-Type: application/json" \\\n' +
+          ' -H "Referer: http://example.com" \\\n' +
+          ' -H "User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.72 Safari/537.36" \\\n' +
+          ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
+          ' "http://example.com/foo?foo=bar"'
       );
 
       // --compressed (because Accept-Encoding: gzip)
       getCurlCommand({
-        'url': 'http://example.com/foo',
-        'headers': [
-          [
-            'Content-Type',
-            'application/json'
-          ],
-          [
-            'Referer',
-            'http://example.com'
-          ],
-          [
-            'Accept-Encoding',
-            'gzip'
-          ]
+        url: 'http://example.com/foo',
+        headers: [
+          ['Content-Type', 'application/json'],
+          ['Referer', 'http://example.com'],
+          ['Accept-Encoding', 'gzip']
         ],
-        'env': {
-          'ENV': 'prod'
+        env: {
+          ENV: 'prod'
         },
-        'fragment': '',
-        'query': 'foo=bar',
-        'data': '{"hello": "world"}',
-        'method': 'GET'
-      }).should.eql('curl \\\n' +
-        ' --compressed \\\n' +
-        ' -H "Accept-Encoding: gzip" \\\n' +
-        ' -H "Content-Type: application/json" \\\n' +
-        ' -H "Referer: http://example.com" \\\n' +
-        ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
-        ' "http://example.com/foo?foo=bar"'
+        fragment: '',
+        query: 'foo=bar',
+        data: '{"hello": "world"}',
+        method: 'GET'
+      }).should.eql(
+        'curl \\\n' +
+          ' --compressed \\\n' +
+          ' -H "Accept-Encoding: gzip" \\\n' +
+          ' -H "Content-Type: application/json" \\\n' +
+          ' -H "Referer: http://example.com" \\\n' +
+          ' --data "{\\"hello\\": \\"world\\"}" \\\n' +
+          ' "http://example.com/foo?foo=bar"'
       );
     });
   });
 });
-
diff --git a/tests/js/spec/components/eventsPerHour.spec.jsx b/tests/js/spec/components/eventsPerHour.spec.jsx
index e836e6dd5f..ada539239a 100644
--- a/tests/js/spec/components/eventsPerHour.spec.jsx
+++ b/tests/js/spec/components/eventsPerHour.spec.jsx
@@ -9,10 +9,12 @@ describe('EventsPerHour', function() {
     rejected: [[1461099600, 2867], [1461103200, 2742]]
   };
 
-  it('should work', function () {
+  it('should work', function() {
     sinon.stub(EventsPerHour.prototype, 'fetchData');
-    let eventsPerHour = shallow(<EventsPerHour/>).instance();
-    expect(eventsPerHour.formatData(data)).to.deep.equal([{x: 1461099600, y: [28867, 2867, 0]},
-                                                          {x: 1461103200, y: [34048, 2742, 0]}]);
+    let eventsPerHour = shallow(<EventsPerHour />).instance();
+    expect(eventsPerHour.formatData(data)).to.deep.equal([
+      {x: 1461099600, y: [28867, 2867, 0]},
+      {x: 1461103200, y: [34048, 2742, 0]}
+    ]);
   });
 });
diff --git a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
index 81203a34fd..732692a447 100644
--- a/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
+++ b/tests/js/spec/components/group/tagDistributionMeter.spec.jsx
@@ -7,14 +7,18 @@ import {Client} from 'app/api';
 import TagDistributionMeter from 'app/components/group/tagDistributionMeter';
 
 describe('TagDistributionMeter', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
     this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request');
 
     this.element = TestUtils.renderIntoDocument(
-      <TagDistributionMeter tag="browser" group={{id:'1337'}} orgId="123" projectId="456"/>
+      <TagDistributionMeter
+        tag="browser"
+        group={{id: '1337'}}
+        orgId="123"
+        projectId="456"
+      />
     );
   });
 
@@ -23,7 +27,7 @@ describe('TagDistributionMeter', function() {
   });
 
   describe('fetchData()', function() {
-    it('should make a request to the groups/tags endpoint', function () {
+    it('should make a request to the groups/tags endpoint', function() {
       // NOTE: creation of OrganizationTeams causes a bunch of API requests to fire ...
       //       reset the request stub so that we can get an accurate count
       this.stubbedApiRequest.reset();
@@ -31,60 +35,75 @@ describe('TagDistributionMeter', function() {
       this.element.fetchData();
 
       expect(this.stubbedApiRequest.callCount).to.equal(1);
-      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/issues/1337/tags/browser/');
+      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal(
+        '/issues/1337/tags/browser/'
+      );
     });
   });
 
-  describe('renderBody()', function () {
-    it('should return null if loading', function (done) {
-      this.element.setState({
-        loading: true,
-        error: false
-      }, () => {
-        expect(this.element.renderBody()).to.be.null;
-        done();
-      });
+  describe('renderBody()', function() {
+    it('should return null if loading', function(done) {
+      this.element.setState(
+        {
+          loading: true,
+          error: false
+        },
+        () => {
+          expect(this.element.renderBody()).to.be.null;
+          done();
+        }
+      );
     });
 
-    it('should return null if in an error state', function (done) {
-      this.element.setState({
-        error: true,
-        loading: false
-      }, () => {
-        expect(this.element.renderBody()).to.be.null;
-        done();
-      });
+    it('should return null if in an error state', function(done) {
+      this.element.setState(
+        {
+          error: true,
+          loading: false
+        },
+        () => {
+          expect(this.element.renderBody()).to.be.null;
+          done();
+        }
+      );
     });
 
-    it('should return "no recent data" if no total values present', function (done) {
-      this.element.setState({
-        error: false,
-        loading: false,
-        data: {
-          totalValues: 0
+    it('should return "no recent data" if no total values present', function(done) {
+      this.element.setState(
+        {
+          error: false,
+          loading: false,
+          data: {
+            totalValues: 0
+          }
+        },
+        () => {
+          let out = this.element.renderBody();
+          expect(ReactDOMServer.renderToStaticMarkup(out)).to.eql(
+            '<p>No recent data.</p>'
+          );
+          done();
         }
-      }, () => {
-        let out = this.element.renderBody();
-        expect(ReactDOMServer.renderToStaticMarkup(out)).to.eql('<p>No recent data.</p>');
-        done();
-      });
+      );
     });
 
-    it('should call renderSegments() if values present', function (done) {
+    it('should call renderSegments() if values present', function(done) {
       this.sandbox.stub(this.element, 'renderSegments');
 
-      this.element.setState({
-        error: false,
-        loading: false,
-        data: {
-          totalValues: 100
+      this.element.setState(
+        {
+          error: false,
+          loading: false,
+          data: {
+            totalValues: 100
+          }
+        },
+        () => {
+          this.element.renderBody();
+          expect(this.element.renderSegments.calledOnce);
+          done();
         }
-      }, () => {
-        this.element.renderBody();
-        expect(this.element.renderSegments.calledOnce);
-        done();
-      });
+      );
     });
   });
 });
-
diff --git a/tests/js/spec/components/issues/snoozeAction.spec.jsx b/tests/js/spec/components/issues/snoozeAction.spec.jsx
index 66c3f13cf0..cd2ded1075 100644
--- a/tests/js/spec/components/issues/snoozeAction.spec.jsx
+++ b/tests/js/spec/components/issues/snoozeAction.spec.jsx
@@ -3,36 +3,44 @@ import {shallow} from 'enzyme';
 import SnoozeAction from 'app/components/issues/snoozeAction';
 
 describe('SnoozeAction', function() {
-  beforeEach(function () {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
   describe('render()', function() {
-    it('should show a gravatar when avatar type is gravatar', function () {
-      let wrapper = shallow(<SnoozeAction onSnooze={function(){}}/>);
+    it('should show a gravatar when avatar type is gravatar', function() {
+      let wrapper = shallow(<SnoozeAction onSnooze={function() {}} />);
       expect(wrapper.find('h5').text()).to.equal('How long should we ignore this issue?');
     });
   });
 
-  describe('click handlers', function () {
-    it('30m link should call prop w/ value 30', function (done) {
-      let wrapper = shallow(<SnoozeAction onSnooze={function(duration){
-        expect(duration).to.equal(30);
-        done();
-      }}/>);
+  describe('click handlers', function() {
+    it('30m link should call prop w/ value 30', function(done) {
+      let wrapper = shallow(
+        <SnoozeAction
+          onSnooze={function(duration) {
+            expect(duration).to.equal(30);
+            done();
+          }}
+        />
+      );
 
       wrapper.find('ul').childAt(0).find('a').simulate('click');
     });
 
-    it('forever link should call prop w/ value undefined', function (done) {
-      let wrapper = shallow(<SnoozeAction onSnooze={function(duration){
-        expect(duration).to.equal(undefined);
-        done();
-      }}/>);
+    it('forever link should call prop w/ value undefined', function(done) {
+      let wrapper = shallow(
+        <SnoozeAction
+          onSnooze={function(duration) {
+            expect(duration).to.equal(undefined);
+            done();
+          }}
+        />
+      );
 
       wrapper.find('ul').childAt(3).find('a').simulate('click');
     });
diff --git a/tests/js/spec/components/letterAvatar.spec.jsx b/tests/js/spec/components/letterAvatar.spec.jsx
index 45d0fb58b0..1db5acf435 100644
--- a/tests/js/spec/components/letterAvatar.spec.jsx
+++ b/tests/js/spec/components/letterAvatar.spec.jsx
@@ -5,7 +5,7 @@ import LetterAvatar from 'app/components/letterAvatar';
 describe('LetterAvatar', function() {
   const USER_1 = {
     identifier: 'janedoe@example.com',
-    displayName: 'Jane Doe',
+    displayName: 'Jane Doe'
   };
   const USER_2 = {
     identifier: 'johnsmith@example.com',
@@ -25,7 +25,7 @@ describe('LetterAvatar', function() {
   };
   const USER_6 = {
     identifier: 'janedoe@example.com',
-    displayName: 'Jane Doe ',
+    displayName: 'Jane Doe '
   };
   const USER_7 = {
     identifier: 'janedoe@example.com',
@@ -34,57 +34,55 @@ describe('LetterAvatar', function() {
 
   describe('getInitials()', function() {
     it('should get initials based on name', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
       expect(letterAvatar.getInitials()).to.eql('JD');
     });
 
     it('should get initials based on email', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_2}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_2} />);
       expect(letterAvatar.getInitials()).to.eql('J');
     });
 
     it('should get initials based on username', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
       expect(letterAvatar.getInitials()).to.eql('F');
     });
 
     it('should show question mark if user has no display name', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
       expect(letterAvatar.getInitials()).to.eql('?');
     });
 
     it('should show question mark even if display name is a space', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_7}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_7} />);
       expect(letterAvatar.getInitials()).to.eql('?');
     });
 
     it('should get initials based on name even if there are trailing spaces', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_6}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_6} />);
       expect(letterAvatar.getInitials()).to.eql('JD');
     });
   });
 
-
   describe('getColor()', function() {
     it('should return a color based on email', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_1} />);
       expect(letterAvatar.getColor()).to.eql('#f868bc');
     });
 
     it('should return a color based on username', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_3} />);
       expect(letterAvatar.getColor()).to.eql('#315cac');
     });
 
     it('should return a color based on id', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_4} />);
       expect(letterAvatar.getColor()).to.eql('#57be8c');
     });
 
     it('should return a color based on ip address', function() {
-      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_5}/>);
+      let letterAvatar = TestUtils.renderIntoDocument(<LetterAvatar {...USER_5} />);
       expect(letterAvatar.getColor()).to.eql('#ec5e44');
     });
   });
-
 });
diff --git a/tests/js/spec/components/userLetterAvatar.spec.jsx b/tests/js/spec/components/userLetterAvatar.spec.jsx
index f92d4bbb23..4a730ae88e 100644
--- a/tests/js/spec/components/userLetterAvatar.spec.jsx
+++ b/tests/js/spec/components/userLetterAvatar.spec.jsx
@@ -25,47 +25,61 @@ describe('LetterAvatar', function() {
 
   describe('getDisplayName()', function() {
     it('should set displayName based on name', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_1}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_1} />
+      );
       expect(this.letterAvatar.getDisplayName()).to.eql('Jane Doe');
     });
 
     it('should set displayName based on email', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_2}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_2} />
+      );
       expect(this.letterAvatar.getDisplayName()).to.eql('johnsmith@example.com');
     });
 
     it('should set displayName based on username', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_3}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_3} />
+      );
       expect(this.letterAvatar.getDisplayName()).to.eql('foo@example.com');
     });
 
     it('should set displayName to empty string if nothing useful', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_4}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_4} />
+      );
       expect(this.letterAvatar.getDisplayName()).to.eql('');
     });
   });
 
-
   describe('getIdentifier()', function() {
     it('should use email', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_1}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_1} />
+      );
       expect(this.letterAvatar.getIdentifier()).to.eql('janedoe@example.com');
     });
 
     it('should use username', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_3}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_3} />
+      );
       expect(this.letterAvatar.getIdentifier()).to.eql('foo@example.com');
     });
 
     it('should use id', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_4}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_4} />
+      );
       expect(this.letterAvatar.getIdentifier()).to.eql(2);
     });
 
     it('should use ip address', function() {
-      this.letterAvatar = TestUtils.renderIntoDocument(<UserLetterAvatar user={USER_5}/>);
+      this.letterAvatar = TestUtils.renderIntoDocument(
+        <UserLetterAvatar user={USER_5} />
+      );
       expect(this.letterAvatar.getIdentifier()).to.eql('127.0.0.1');
     });
   });
-
 });
diff --git a/tests/js/spec/helpers/formatters.spec.jsx b/tests/js/spec/helpers/formatters.spec.jsx
index 022967e23a..da21e6d1d9 100644
--- a/tests/js/spec/helpers/formatters.spec.jsx
+++ b/tests/js/spec/helpers/formatters.spec.jsx
@@ -1,19 +1,23 @@
 import {userDisplayName} from 'app/utils/formatters';
 
-describe('formatters', function () {
-  describe('userDisplayName', function () {
-    it('should only show email, if name and email are the same', function () {
-      expect(userDisplayName({
-        name: 'foo@bar.com',
-        email: 'foo@bar.com'
-      })).to.eql('foo@bar.com');
+describe('formatters', function() {
+  describe('userDisplayName', function() {
+    it('should only show email, if name and email are the same', function() {
+      expect(
+        userDisplayName({
+          name: 'foo@bar.com',
+          email: 'foo@bar.com'
+        })
+      ).to.eql('foo@bar.com');
     });
 
-    it('should show name + email, if name and email differ', function () {
-      expect(userDisplayName({
-        name: 'user',
-        email: 'foo@bar.com'
-      })).to.eql('user (foo@bar.com)');
+    it('should show name + email, if name and email differ', function() {
+      expect(
+        userDisplayName({
+          name: 'user',
+          email: 'foo@bar.com'
+        })
+      ).to.eql('user (foo@bar.com)');
     });
   });
 });
diff --git a/tests/js/spec/stores/groupStore.spec.jsx b/tests/js/spec/stores/groupStore.spec.jsx
index a101f66438..c009af4060 100644
--- a/tests/js/spec/stores/groupStore.spec.jsx
+++ b/tests/js/spec/stores/groupStore.spec.jsx
@@ -1,7 +1,7 @@
 import GroupStore from 'app/stores/groupStore';
 
-describe('GroupStore', function () {
-  beforeEach(function () {
+describe('GroupStore', function() {
+  beforeEach(function() {
     GroupStore.reset();
     this.sandbox = sinon.sandbox.create();
   });
@@ -10,49 +10,29 @@ describe('GroupStore', function () {
     this.sandbox.restore();
   });
 
-  describe('add()', function () {
-    it('should add new entries', function () {
+  describe('add()', function() {
+    it('should add new entries', function() {
       GroupStore.items = [];
-      GroupStore.add([
-        {id: 1},
-        {id: 2},
-      ]);
+      GroupStore.add([{id: 1}, {id: 2}]);
 
-      expect(GroupStore.items).to.eql([
-        {id: 1},
-        {id: 2},
-      ]);
+      expect(GroupStore.items).to.eql([{id: 1}, {id: 2}]);
     });
 
-    it('should update matching existing entries', function () {
-      GroupStore.items = [
-        {id: 1},
-        {id: 2},
-      ];
+    it('should update matching existing entries', function() {
+      GroupStore.items = [{id: 1}, {id: 2}];
 
-      GroupStore.add([
-        {id: 1, foo: 'bar'},
-        {id: 3},
-      ]);
+      GroupStore.add([{id: 1, foo: 'bar'}, {id: 3}]);
 
-      expect(GroupStore.items).to.eql([
-        {id: 1, foo: 'bar'},
-        {id: 2},
-        {id: 3},
-      ]);
+      expect(GroupStore.items).to.eql([{id: 1, foo: 'bar'}, {id: 2}, {id: 3}]);
     });
   });
 
-  describe('onMergeSuccess()', function () {
-    it('should remove the non-parent merged ids', function () {
-      GroupStore.items = [
-        {id: 1},
-        {id: 2},
-        {id: 3},
-        {id: 4}
-      ];
+  describe('onMergeSuccess()', function() {
+    it('should remove the non-parent merged ids', function() {
+      GroupStore.items = [{id: 1}, {id: 2}, {id: 3}, {id: 4}];
 
-      GroupStore.onMergeSuccess(null,
+      GroupStore.onMergeSuccess(
+        null,
         [2, 3, 4], // items merged
         {merge: {parent: 3}} // merge API response
       );
@@ -64,44 +44,39 @@ describe('GroupStore', function () {
     });
   });
 
-  describe('update methods', function () {
-    beforeEach(function () {
-      GroupStore.items = [
-        {id: 1},
-        {id: 2},
-        {id: 3},
-      ];
+  describe('update methods', function() {
+    beforeEach(function() {
+      GroupStore.items = [{id: 1}, {id: 2}, {id: 3}];
     });
 
-    describe('onUpdate()', function () {
-      it('should treat undefined itemIds argument as \'all\'', function () {
+    describe('onUpdate()', function() {
+      it('should treat undefined itemIds argument as \'all\'', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdate(1337, undefined, 'somedata');
 
         expect(GroupStore.trigger.calledOnce).to.be.ok;
-        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1,2,3]));
+        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1, 2, 3]));
       });
     });
 
-    describe('onUpdateSuccess()', function () {
-      it('should treat undefined itemIds argument as \'all\'', function () {
+    describe('onUpdateSuccess()', function() {
+      it('should treat undefined itemIds argument as \'all\'', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateSuccess(1337, undefined, 'somedata');
 
         expect(GroupStore.trigger.calledOnce).to.be.ok;
-        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1,2,3]));
+        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1, 2, 3]));
       });
     });
 
-    describe('onUpdateError()', function () {
-      it('should treat undefined itemIds argument as \'all\'', function () {
+    describe('onUpdateError()', function() {
+      it('should treat undefined itemIds argument as \'all\'', function() {
         this.sandbox.stub(GroupStore, 'trigger');
         GroupStore.onUpdateError(1337, undefined, 'something failed', false);
 
         expect(GroupStore.trigger.calledOnce).to.be.ok;
-        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1,2,3]));
+        expect(GroupStore.trigger.firstCall.args[0]).to.eql(new Set([1, 2, 3]));
       });
     });
   });
 });
-
diff --git a/tests/js/spec/stores/streamTagStore.spec.jsx b/tests/js/spec/stores/streamTagStore.spec.jsx
index 33a1318745..b243b79be8 100644
--- a/tests/js/spec/stores/streamTagStore.spec.jsx
+++ b/tests/js/spec/stores/streamTagStore.spec.jsx
@@ -1,7 +1,7 @@
 import StreamTagStore from 'app/stores/streamTagStore';
 import MemberListStore from 'app/stores/memberListStore';
 
-describe('StreamTagStore', function () {
+describe('StreamTagStore', function() {
   beforeEach(() => {
     StreamTagStore.reset();
     this.sandbox = sinon.sandbox.create();
@@ -35,14 +35,15 @@ describe('StreamTagStore', function () {
   });
 
   describe('onLoadTagsSuccess()', () => {
-
     it('should add a new tag with empty values and trigger the new addition', () => {
       this.sandbox.stub(StreamTagStore, 'trigger');
 
-      StreamTagStore.onLoadTagsSuccess([{
-        key: 'mytag',
-        name: 'My Custom Tag'
-      }]);
+      StreamTagStore.onLoadTagsSuccess([
+        {
+          key: 'mytag',
+          name: 'My Custom Tag'
+        }
+      ]);
 
       expect(StreamTagStore.tags.mytag).to.eql({
         key: 'mytag',
@@ -55,10 +56,12 @@ describe('StreamTagStore', function () {
 
     it('should not overwrite predefined filters', () => {
       let isTag = StreamTagStore.tags.is;
-      StreamTagStore.onLoadTagsSuccess([{
-        key: 'is',
-        name: 'Custom Assigned To'
-      }]);
+      StreamTagStore.onLoadTagsSuccess([
+        {
+          key: 'is',
+          name: 'Custom Assigned To'
+        }
+      ]);
 
       expect(StreamTagStore.tags.is).to.equal(isTag);
     });
diff --git a/tests/js/spec/utils/logging.spec.jsx b/tests/js/spec/utils/logging.spec.jsx
index 7ab4cb05a5..887473b823 100644
--- a/tests/js/spec/utils/logging.spec.jsx
+++ b/tests/js/spec/utils/logging.spec.jsx
@@ -1,47 +1,59 @@
 import {logAjaxError} from 'app/utils/logging';
 import Raven from 'raven-js';
 
-describe('logging', function () {
-  beforeEach(function () {
+describe('logging', function() {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
     this.sandbox.stub(Raven, 'captureMessage');
     this.sandbox.stub(window.console, 'error');
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('logAjaxError()', function () {
-    it('should handle (Sentry) JSON responses', function () {
-      logAjaxError({
-        status: 500,
-        responseJSON: {detail: 'A bad thing happened'}
-      }, {foo: 'bar'} /* context */);
+  describe('logAjaxError()', function() {
+    it('should handle (Sentry) JSON responses', function() {
+      logAjaxError(
+        {
+          status: 500,
+          responseJSON: {detail: 'A bad thing happened'}
+        },
+        {foo: 'bar'} /* context */
+      );
 
       expect(Raven.captureMessage.calledOnce).to.be.ok;
-      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 500: A bad thing happened');
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql(
+        'HTTP 500: A bad thing happened'
+      );
       expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
     });
 
-    it('should handle text/html responses', function () {
-      logAjaxError({
-        status: 401,
-        responseText: 'You are not authenticated'
-      }, {foo: 'bar'} /* context */);
+    it('should handle text/html responses', function() {
+      logAjaxError(
+        {
+          status: 401,
+          responseText: 'You are not authenticated'
+        },
+        {foo: 'bar'} /* context */
+      );
 
       expect(Raven.captureMessage.calledOnce).to.be.ok;
-      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 401: You are not authenticated');
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql(
+        'HTTP 401: You are not authenticated'
+      );
       expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
     });
 
-    it('should handle responseJSON/responseText undefined (bad content type?)', function () {
+    it('should handle responseJSON/responseText undefined (bad content type?)', function() {
       logAjaxError({status: 404}, {foo: 'bar'} /* context */);
 
       expect(Raven.captureMessage.calledOnce).to.be.ok;
-      expect(Raven.captureMessage.getCall(0).args[0]).to.eql('HTTP 404: <unknown response>');
+      expect(Raven.captureMessage.getCall(0).args[0]).to.eql(
+        'HTTP 404: <unknown response>'
+      );
       expect(Raven.captureMessage.getCall(0).args[1].extra).to.eql({foo: 'bar'});
     });
   });
-});
\ No newline at end of file
+});
diff --git a/tests/js/spec/utils/marked.spec.jsx b/tests/js/spec/utils/marked.spec.jsx
index d202b45dac..18b2efed3a 100644
--- a/tests/js/spec/utils/marked.spec.jsx
+++ b/tests/js/spec/utils/marked.spec.jsx
@@ -6,41 +6,39 @@ function expectMarkdown(test) {
   expect(marked(test[0])).to.eql('<p>' + test[1] + '</p>\n');
 }
 
-describe('marked', function () {
-  it('normal links get rendered as html', function () {
+describe('marked', function() {
+  it('normal links get rendered as html', function() {
     for (let test of [
       ['[x](http://example.com)', '<a href="http://example.com">x</a>'],
       ['[x](https://example.com)', '<a href="https://example.com">x</a>'],
-      ['[x](mailto:foo@example.com)', '<a href="mailto:foo@example.com">x</a>'],
+      ['[x](mailto:foo@example.com)', '<a href="mailto:foo@example.com">x</a>']
     ]) {
       expectMarkdown(test);
     }
   });
 
-  it('rejected links should be rendered as plain text', function () {
+  it('rejected links should be rendered as plain text', function() {
     for (let test of [
       ['[x](javascript:foo)', 'javascript:foo'],
       ['[x](data:foo)', 'data:foo'],
-      ['[x](vbscript:foo)', 'vbscript:foo'],
+      ['[x](vbscript:foo)', 'vbscript:foo']
     ]) {
       expectMarkdown(test);
     }
   });
 
-  it('normal images get rendered as html', function () {
+  it('normal images get rendered as html', function() {
     for (let test of [
       ['![](http://example.com)', '<img src="http://example.com" alt="">'],
       ['![x](http://example.com)', '<img src="http://example.com" alt="x">'],
-      ['![x](https://example.com)', '<img src="https://example.com" alt="x">'],
+      ['![x](https://example.com)', '<img src="https://example.com" alt="x">']
     ]) {
       expectMarkdown(test);
     }
   });
 
   it('rejected images shouldn\'t be rendered at all', function() {
-    for (let test of [
-      ['![x](javascript:foo)', ''],
-    ]) {
+    for (let test of [['![x](javascript:foo)', '']]) {
       expectMarkdown(test);
     }
   });
diff --git a/tests/js/spec/utils/stream.spec.jsx b/tests/js/spec/utils/stream.spec.jsx
index f4a806f228..8c544886f8 100644
--- a/tests/js/spec/utils/stream.spec.jsx
+++ b/tests/js/spec/utils/stream.spec.jsx
@@ -1,8 +1,8 @@
 import {queryToObj, objToQuery} from 'app/utils/stream';
 
-describe('utils/stream', function () {
-  describe('queryToObj()', function () {
-    it('should convert a basic query string to a query object', function () {
+describe('utils/stream', function() {
+  describe('queryToObj()', function() {
+    it('should convert a basic query string to a query object', function() {
       expect(queryToObj('is:unresolved')).to.eql({
         is: 'unresolved'
       });
@@ -19,7 +19,7 @@ describe('utils/stream', function () {
       });
     });
 
-    it('should convert separate query tokens into a single __text property', function () {
+    it('should convert separate query tokens into a single __text property', function() {
       expect(queryToObj('python    exception')).to.eql({
         __text: 'python exception'
       });
@@ -32,27 +32,35 @@ describe('utils/stream', function () {
     });
   });
 
-  describe('objToQuery()', function () {
-    it('should convert a query object to a query string', function () {
-      expect(objToQuery({
-        is: 'unresolved'
-      })).to.eql('is:unresolved');
+  describe('objToQuery()', function() {
+    it('should convert a query object to a query string', function() {
+      expect(
+        objToQuery({
+          is: 'unresolved'
+        })
+      ).to.eql('is:unresolved');
 
-      expect(objToQuery({
-        is: 'unresolved',
-        assigned: 'foo@bar.com'
-      })).to.eql('is:unresolved assigned:foo@bar.com');
+      expect(
+        objToQuery({
+          is: 'unresolved',
+          assigned: 'foo@bar.com'
+        })
+      ).to.eql('is:unresolved assigned:foo@bar.com');
 
-      expect(objToQuery({
-        is: 'unresolved',
-        __text: 'python exception'
-      })).to.eql('is:unresolved python exception');
+      expect(
+        objToQuery({
+          is: 'unresolved',
+          __text: 'python exception'
+        })
+      ).to.eql('is:unresolved python exception');
     });
 
-    it('should quote query values that contain spaces', function () {
-      expect(objToQuery({
-        browser: 'Chrome 36'
-      })).to.eql('browser:"Chrome 36"');
+    it('should quote query values that contain spaces', function() {
+      expect(
+        objToQuery({
+          browser: 'Chrome 36'
+        })
+      ).to.eql('browser:"Chrome 36"');
     });
   });
-});
\ No newline at end of file
+});
diff --git a/tests/js/spec/utils/utils.spec.jsx b/tests/js/spec/utils/utils.spec.jsx
index ac26d3bf3c..21760c303d 100644
--- a/tests/js/spec/utils/utils.spec.jsx
+++ b/tests/js/spec/utils/utils.spec.jsx
@@ -1,68 +1,83 @@
 import {valueIsEqual, extractMultilineFields} from 'app/utils';
 
 describe('utils.valueIsEqual', function() {
-
   it('should return true when objects are deeply equal', function() {
-    let isEqual = valueIsEqual({
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: {
-        avatarType: 'gravatar',
-        avatarUuid: null
-      }
-    }, {
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: {
-        avatarType: 'gravatar',
-        avatarUuid: null
-      }
-    }, true);
+    let isEqual = valueIsEqual(
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: {
+          avatarType: 'gravatar',
+          avatarUuid: null
+        }
+      },
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: {
+          avatarType: 'gravatar',
+          avatarUuid: null
+        }
+      },
+      true
+    );
     expect(isEqual).to.be.true;
   });
 
   it('should return false when objects are not deeply equal', function() {
-    let isEqual = valueIsEqual({
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: {
-        avatarType: 'gravatar',
-        avatarUuid: null
-      }
-  }, {
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: {
-        avatarType: 'notGravatar',
-        avatarUuid: null
-      }
-    }, true);
+    let isEqual = valueIsEqual(
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: {
+          avatarType: 'gravatar',
+          avatarUuid: null
+        }
+      },
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: {
+          avatarType: 'notGravatar',
+          avatarUuid: null
+        }
+      },
+      true
+    );
     expect(isEqual).to.be.false;
   });
 
   it('should return true when objects are shalowly equal', function() {
-    let isEqual = valueIsEqual({
-      username: 'foo',
-      team: 'bar',
-      avatar: 'gravatar'
-    }, {
-      username: 'foo',
-      team: 'bar',
-      avatar: 'gravatar'
-    }, false);
+    let isEqual = valueIsEqual(
+      {
+        username: 'foo',
+        team: 'bar',
+        avatar: 'gravatar'
+      },
+      {
+        username: 'foo',
+        team: 'bar',
+        avatar: 'gravatar'
+      },
+      false
+    );
     expect(isEqual).to.be.true;
   });
 
   it('should return false when objects are not shalowly equal', function() {
-    let isEqual = valueIsEqual({
-      username: 'foo',
-      team: 'bar',
-      avatar: 'gravatar'
-    }, {
-      username: 'foo',
-      team: 'bar',
-      avatar: 'notGravatar'
-    }, false);
+    let isEqual = valueIsEqual(
+      {
+        username: 'foo',
+        team: 'bar',
+        avatar: 'gravatar'
+      },
+      {
+        username: 'foo',
+        team: 'bar',
+        avatar: 'notGravatar'
+      },
+      false
+    );
     expect(isEqual).to.be.false;
   });
 
@@ -70,38 +85,50 @@ describe('utils.valueIsEqual', function() {
     let isEqual = valueIsEqual(null, {username: 'foo'}, true);
     expect(isEqual).to.be.false;
 
-    isEqual = valueIsEqual({
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: null
-    }, {
-      username: 'foo',
-      teams: ['bar', 'baz'],
-      avatar: {
-        avatarType: 'notGravatar',
-        avatarUuid: null
-      }
-    }, true);
+    isEqual = valueIsEqual(
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: null
+      },
+      {
+        username: 'foo',
+        teams: ['bar', 'baz'],
+        avatar: {
+          avatarType: 'notGravatar',
+          avatarUuid: null
+        }
+      },
+      true
+    );
     expect(isEqual).to.be.false;
   });
 });
 
-describe('utils.extractMultilineFields', function () {
-  it('should work for basic, simple values', function () {
-    expect(extractMultilineFields('one\ntwo\nthree')).to.deep.equal(['one', 'two', 'three']);
+describe('utils.extractMultilineFields', function() {
+  it('should work for basic, simple values', function() {
+    expect(extractMultilineFields('one\ntwo\nthree')).to.deep.equal([
+      'one',
+      'two',
+      'three'
+    ]);
   });
 
-  it('should return an empty array if only whitespace', function () {
+  it('should return an empty array if only whitespace', function() {
     expect(extractMultilineFields('    \n    \n\n\n   \n')).to.deep.equal([]);
   });
 
-  it('should trim values and ignore empty lines', function () {
-    expect(extractMultilineFields(`one
+  it('should trim values and ignore empty lines', function() {
+    expect(
+      extractMultilineFields(
+        `one
   two
 
 three
         four
 
-five`)).to.deep.equal(['one', 'two', 'three', 'four', 'five']);
+five`
+      )
+    ).to.deep.equal(['one', 'two', 'three', 'four', 'five']);
   });
-});
\ No newline at end of file
+});
diff --git a/tests/js/spec/views/groupActivity/index.spec.jsx b/tests/js/spec/views/groupActivity/index.spec.jsx
index fcb1e1a3fd..93a1df4acc 100644
--- a/tests/js/spec/views/groupActivity/index.spec.jsx
+++ b/tests/js/spec/views/groupActivity/index.spec.jsx
@@ -13,35 +13,35 @@ describe('GroupActivity', function() {
     this.sandbox.stub(ConfigStore, 'get').withArgs('user').returns({});
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  it('renders a NoteInput', function () {
-    let wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}}/>, {
+  it('renders a NoteInput', function() {
+    let wrapper = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
       context: {
         group: {id: '1337'},
         project: {id: 'foo'},
         team: {id: '1'},
-        organization: {id:'bar'}
+        organization: {id: 'bar'}
       }
     });
     expect(wrapper.find(NoteInput)).to.have.length(1);
   });
 
-  describe('onNoteDelete()', function () {
-    beforeEach(function () {
-      this.instance = shallow(<GroupActivity group={{id: '1337', activity: []}}/>, {
+  describe('onNoteDelete()', function() {
+    beforeEach(function() {
+      this.instance = shallow(<GroupActivity group={{id: '1337', activity: []}} />, {
         context: {
           group: {id: '1337'},
           project: {id: 'foo'},
           team: {id: '1'},
-          organization: {id:'bar'}
+          organization: {id: 'bar'}
         }
       }).instance();
     });
 
-    it('should do nothing if not present in GroupStore', function () {
+    it('should do nothing if not present in GroupStore', function() {
       let instance = this.instance;
 
       this.sandbox.stub(GroupStore, 'removeActivity').returns(-1); // not found
@@ -51,7 +51,7 @@ describe('GroupActivity', function() {
       expect(request.calledOnce).to.not.be.ok;
     });
 
-    it('should remove remove the item from the GroupStore make a DELETE API request', function () {
+    it('should remove remove the item from the GroupStore make a DELETE API request', function() {
       let instance = this.instance;
 
       this.sandbox.stub(GroupStore, 'removeActivity').returns(1);
diff --git a/tests/js/spec/views/groupDetails/seenBy.spec.jsx b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
index ca61b7bbd6..cdaae17a53 100644
--- a/tests/js/spec/views/groupDetails/seenBy.spec.jsx
+++ b/tests/js/spec/views/groupDetails/seenBy.spec.jsx
@@ -5,7 +5,6 @@ import GroupSeenBy from 'app/views/groupDetails/seenBy';
 import ConfigStore from 'app/stores/configStore';
 
 describe('OrganizationTeams', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
@@ -17,8 +16,8 @@ describe('OrganizationTeams', function() {
   });
 
   describe('render()', function() {
-    it('should return null if seenBy is falsy', function () {
-      let wrapper = shallow(<GroupSeenBy/>, {
+    it('should return null if seenBy is falsy', function() {
+      let wrapper = shallow(<GroupSeenBy />, {
         context: {
           group: {id: '1337'},
           project: {id: '2448'},
@@ -28,8 +27,8 @@ describe('OrganizationTeams', function() {
       expect(wrapper.children()).to.have.length(0);
     });
 
-    it('should return a list of each user that saw', function () {
-      let wrapper = shallow(<GroupSeenBy/>, {
+    it('should return a list of each user that saw', function() {
+      let wrapper = shallow(<GroupSeenBy />, {
         context: {
           group: {
             id: '1337',
diff --git a/tests/js/spec/views/organizationTeams.spec.jsx b/tests/js/spec/views/organizationTeams.spec.jsx
index 80f9d4da3a..be837346f4 100644
--- a/tests/js/spec/views/organizationTeams.spec.jsx
+++ b/tests/js/spec/views/organizationTeams.spec.jsx
@@ -5,7 +5,6 @@ import {Client} from 'app/api';
 import OrganizationTeams from 'app/views/organizationTeams';
 
 describe('OrganizationTeams', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
@@ -17,8 +16,8 @@ describe('OrganizationTeams', function() {
   });
 
   describe('fetchStats()', function() {
-    it('should make a request to the organizations endpoint', function () {
-      let organizationTeams = shallow(<OrganizationTeams params={{orgId:'123'}}/>, {
+    it('should make a request to the organizations endpoint', function() {
+      let organizationTeams = shallow(<OrganizationTeams params={{orgId: '123'}} />, {
         organization: {id: '1337'}
       }).instance();
 
@@ -29,8 +28,9 @@ describe('OrganizationTeams', function() {
       organizationTeams.fetchStats();
 
       expect(this.stubbedApiRequest.callCount).to.equal(1);
-      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal('/organizations/123/stats/');
+      expect(this.stubbedApiRequest.getCall(0).args[0]).to.equal(
+        '/organizations/123/stats/'
+      );
     });
   });
 });
-
diff --git a/tests/js/spec/views/projectInstall/platform.spec.jsx b/tests/js/spec/views/projectInstall/platform.spec.jsx
index f176da5edb..aa764f4112 100644
--- a/tests/js/spec/views/projectInstall/platform.spec.jsx
+++ b/tests/js/spec/views/projectInstall/platform.spec.jsx
@@ -5,7 +5,6 @@ import {Client} from 'app/api';
 import ProjectInstallPlatform from 'app/views/projectInstall/platform';
 
 describe('ProjectInstallPlatform', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
@@ -20,28 +19,36 @@ describe('ProjectInstallPlatform', function() {
     const baseProps = {
       location: {query: {}},
       platformData: {
-        platforms: [{
-          id: 'csharp',
-          name: 'C#',
-          integrations: [{
+        platforms: [
+          {
             id: 'csharp',
-            type: 'language'
-          }]
-        }, {
-          id: 'node',
-          name: 'Node.js',
-          integrations: [{
+            name: 'C#',
+            integrations: [
+              {
+                id: 'csharp',
+                type: 'language'
+              }
+            ]
+          },
+          {
             id: 'node',
-            type: 'language'
-          }, {
-            id: 'node-connect',
-            type: 'framework'
-          }]
-        }]
+            name: 'Node.js',
+            integrations: [
+              {
+                id: 'node',
+                type: 'language'
+              },
+              {
+                id: 'node-connect',
+                type: 'framework'
+              }
+            ]
+          }
+        ]
       }
     };
 
-    it('should render NotFound if no matching integration/platform', function () {
+    it('should render NotFound if no matching integration/platform', function() {
       let props = {
         ...baseProps,
         params: {
@@ -49,14 +56,14 @@ describe('ProjectInstallPlatform', function() {
         }
       };
 
-      let wrapper = shallow(<ProjectInstallPlatform {...props}/>, {
+      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
         organization: {id: '1337'}
       });
 
       expect(wrapper.find('NotFound')).to.have.length(1);
     });
 
-    it('should rendering Loading if integration/platform exists', function () {
+    it('should rendering Loading if integration/platform exists', function() {
       let props = {
         ...baseProps,
         params: {
@@ -64,7 +71,7 @@ describe('ProjectInstallPlatform', function() {
         }
       };
 
-      let wrapper = shallow(<ProjectInstallPlatform {...props}/>, {
+      let wrapper = shallow(<ProjectInstallPlatform {...props} />, {
         organization: {id: '1337'}
       });
 
diff --git a/tests/js/spec/views/projectReleases.spec.jsx b/tests/js/spec/views/projectReleases.spec.jsx
index ceb83de139..1d1359fec6 100644
--- a/tests/js/spec/views/projectReleases.spec.jsx
+++ b/tests/js/spec/views/projectReleases.spec.jsx
@@ -9,8 +9,8 @@ import ProjectReleases from 'app/views/projectReleases';
 import SearchBar from 'app/views/stream/searchBar';
 import Pagination from 'app/components/pagination';
 
-describe('ProjectReleases', function () {
-  beforeEach(function () {
+describe('ProjectReleases', function() {
+  beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
     this.sandbox.stub(Client.prototype, 'request');
@@ -18,33 +18,35 @@ describe('ProjectReleases', function () {
     this.sandbox.stub(browserHistory, 'pushState');
 
     this.props = {
-      setProjectNavSection: function () {},
+      setProjectNavSection: function() {},
       params: {orgId: '123', projectId: '456'},
       location: {query: {per_page: 0, query: 'derp'}}
     };
     this.projectReleases = TestUtils.renderIntoDocument(
-      <ProjectReleases {...this.props}/>
+      <ProjectReleases {...this.props} />
     );
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('fetchData()', function () {
-    it('should call releases endpoint', function () {
-      expect(Client.prototype.request.args[0][0]).to.equal('/projects/123/456/releases/?per_page=20&query=derp');
+  describe('fetchData()', function() {
+    it('should call releases endpoint', function() {
+      expect(Client.prototype.request.args[0][0]).to.equal(
+        '/projects/123/456/releases/?per_page=20&query=derp'
+      );
     });
   });
 
-  describe('getInitialState()', function () {
-    it('should take query state from query string', function () {
+  describe('getInitialState()', function() {
+    it('should take query state from query string', function() {
       expect(this.projectReleases.state.query).to.equal('derp');
     });
   });
 
-  describe('onSearch', function () {
-    it('should change query string with new search parameter', function () {
+  describe('onSearch', function() {
+    it('should change query string with new search parameter', function() {
       let projectReleases = this.projectReleases;
 
       projectReleases.onSearch('searchquery');
@@ -60,8 +62,8 @@ describe('ProjectReleases', function () {
 
   // TODO: figure how to trigger componentWillReceiveProps
 
-  describe('componentWillReceiveProps()', function () {
-    it('should update state with latest query pulled from query string', function () {
+  describe('componentWillReceiveProps()', function() {
+    it('should update state with latest query pulled from query string', function() {
       let projectReleases = this.projectReleases;
 
       let setState = this.sandbox.stub(projectReleases, 'setState');
@@ -82,4 +84,3 @@ describe('ProjectReleases', function () {
     });
   });
 });
-
diff --git a/tests/js/spec/views/releaseArtifacts.spec.jsx b/tests/js/spec/views/releaseArtifacts.spec.jsx
index 866b44861f..a82ce4b4ff 100644
--- a/tests/js/spec/views/releaseArtifacts.spec.jsx
+++ b/tests/js/spec/views/releaseArtifacts.spec.jsx
@@ -5,114 +5,133 @@ import {Client} from 'app/api';
 import ReleaseArtifacts from 'app/views/releaseArtifacts';
 
 describe('ReleaseArtifacts', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
     this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request');
 
-    this.wrapper = shallow(<ReleaseArtifacts
-      location={{query: {cursor: '0:0:100'}}}
-      params={{orgId: '123', projectId: '456', version: 'abcdef'}}/>, {
-      context: {
-        group: {id: '1337'},
-        project: {id: 'foo'},
-        team: {id: '1'},
-        organization: {id:'bar'}
+    this.wrapper = shallow(
+      <ReleaseArtifacts
+        location={{query: {cursor: '0:0:100'}}}
+        params={{orgId: '123', projectId: '456', version: 'abcdef'}}
+      />,
+      {
+        context: {
+          group: {id: '1337'},
+          project: {id: 'foo'},
+          team: {id: '1'},
+          organization: {id: 'bar'}
+        }
       }
-    });
-
-    this.wrapperWithPermission = shallow(<ReleaseArtifacts
-      location={{query: {cursor: '0:0:100'}}}
-      params={{orgId: '123', projectId: '456', version: 'abcdef'}}/>, {
-      context: {
-        group: {id: '1337'},
-        project: {id: 'foo'},
-        team: {id: '1'},
-        organization: {id:'bar', access: ['project:write']}
+    );
+
+    this.wrapperWithPermission = shallow(
+      <ReleaseArtifacts
+        location={{query: {cursor: '0:0:100'}}}
+        params={{orgId: '123', projectId: '456', version: 'abcdef'}}
+      />,
+      {
+        context: {
+          group: {id: '1337'},
+          project: {id: 'foo'},
+          team: {id: '1'},
+          organization: {id: 'bar', access: ['project:write']}
+        }
       }
-    });
+    );
   });
 
   afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('render()', function () {
-    it('should render a row for each file', function () {
+  describe('render()', function() {
+    it('should render a row for each file', function() {
       let wrapper = this.wrapper;
       wrapper.setState({
         loading: false,
-        fileList: [{
-          id: '1',
-          name: 'foo.js',
-          size: 150000
-        }, {
-          id: '2',
-          name: 'bar.js',
-          size: 30000
-        }]
+        fileList: [
+          {
+            id: '1',
+            name: 'foo.js',
+            size: 150000
+          },
+          {
+            id: '2',
+            name: 'bar.js',
+            size: 30000
+          }
+        ]
       });
 
       expect(wrapper.find('.list-group-item')).to.have.length(2);
     });
 
-    it('should have no permission to download', function () {
+    it('should have no permission to download', function() {
       let wrapper = this.wrapper;
       wrapper.setState({
         loading: false,
-        fileList: [{
-          id: '1',
-          name: 'foo.js',
-          size: 150000
-        }, {
-          id: '2',
-          name: 'bar.js',
-          size: 30000
-        }]
+        fileList: [
+          {
+            id: '1',
+            name: 'foo.js',
+            size: 150000
+          },
+          {
+            id: '2',
+            name: 'bar.js',
+            size: 30000
+          }
+        ]
       });
 
       expect(wrapper.find('div.btn > .icon-open')).to.have.length(2);
     });
 
-    it('should have permission to download', function () {
+    it('should have permission to download', function() {
       let wrapper = this.wrapperWithPermission;
       wrapper.setState({
         loading: false,
-        fileList: [{
-          id: '1',
-          name: 'foo.js',
-          size: 150000
-        }, {
-          id: '2',
-          name: 'bar.js',
-          size: 30000
-        }]
+        fileList: [
+          {
+            id: '1',
+            name: 'foo.js',
+            size: 150000
+          },
+          {
+            id: '2',
+            name: 'bar.js',
+            size: 30000
+          }
+        ]
       });
 
       expect(wrapper.find('a.btn > .icon-open')).to.have.length(2);
     });
   });
 
-  describe('handleRemove()', function () {
-    it('should remove the file from the file list', function () {
+  describe('handleRemove()', function() {
+    it('should remove the file from the file list', function() {
       let wrapper = this.wrapper;
       wrapper.setState({
         loading: false,
-        fileList: [{
-          id: '1',
-          name: 'foo.js',
-          size: 150000
-        }, {
-          id: '2',
-          name: 'bar.js',
-          size: 30000
-        }]
+        fileList: [
+          {
+            id: '1',
+            name: 'foo.js',
+            size: 150000
+          },
+          {
+            id: '2',
+            name: 'bar.js',
+            size: 30000
+          }
+        ]
       });
 
       let instance = wrapper.instance();
       this.stubbedApiRequest.restore();
-      this.sandbox.stub(instance.api, 'request', function (url, options) {
+      this.sandbox.stub(instance.api, 'request', function(url, options) {
         // emulate successful api completion
         options.success();
         options.complete();
@@ -135,5 +154,4 @@ describe('ReleaseArtifacts', function() {
       expect(apiArgs[1].data).to.have.property('cursor', '0:0:100');
     });
   });
-
 });
diff --git a/tests/js/spec/views/ruleEditor/ruleNodeList.spec.jsx b/tests/js/spec/views/ruleEditor/ruleNodeList.spec.jsx
index 725fd7e811..b41db17f41 100644
--- a/tests/js/spec/views/ruleEditor/ruleNodeList.spec.jsx
+++ b/tests/js/spec/views/ruleEditor/ruleNodeList.spec.jsx
@@ -4,7 +4,6 @@ import {shallow} from 'enzyme';
 import RuleNodeList from 'app/views/ruleEditor/ruleNodeList';
 
 describe('RuleNodeList', function() {
-
   beforeEach(function() {
     this.sampleNodes = [
       {
@@ -16,13 +15,13 @@ describe('RuleNodeList', function() {
         id: 'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
         label: 'An event is seen more than {value} times in {interval}',
         html: 'An event is seen more than <input id="id_value" name="value" placeholder="100" type="number" /> times ' +
-              'in <select id="id_interval" name="interval">↵<option value="1m">one minute</option>↵<option value="1h">one hour</option>↵</select>'
+          'in <select id="id_interval" name="interval">↵<option value="1m">one minute</option>↵<option value="1h">one hour</option>↵</select>'
       }
     ];
   });
 
-  describe('getInitialItems()', function () {
-    it('should give each initial item a unique incremented key_attr, and set state.counter', function () {
+  describe('getInitialItems()', function() {
+    it('should give each initial item a unique incremented key_attr, and set state.counter', function() {
       let initialItems = [
         {
           id: 'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
@@ -34,7 +33,9 @@ describe('RuleNodeList', function() {
         }
       ];
 
-      let wrapper = shallow(<RuleNodeList nodes={this.sampleNodes} initialItems={initialItems}/>);
+      let wrapper = shallow(
+        <RuleNodeList nodes={this.sampleNodes} initialItems={initialItems} />
+      );
 
       expect(wrapper.state('items')[0]).to.have.property('key_attr', 0);
       expect(wrapper.state('items')[1]).to.have.property('key_attr', 1);
@@ -43,7 +44,7 @@ describe('RuleNodeList', function() {
   });
 
   describe('onAddRow()', function() {
-    it('should add a new item with key_attr value equal to state.counter, and increment state.counter', function () {
+    it('should add a new item with key_attr value equal to state.counter, and increment state.counter', function() {
       let wrapper = shallow(<RuleNodeList nodes={this.sampleNodes} />);
 
       wrapper.setState({
@@ -51,7 +52,7 @@ describe('RuleNodeList', function() {
       });
 
       wrapper.instance().onAddRow({
-        val: function () {
+        val: function() {
           return 'sentry.rules.conditions.every_event.EveryEventCondition';
         }
       });
@@ -64,4 +65,3 @@ describe('RuleNodeList', function() {
     });
   });
 });
-
diff --git a/tests/js/spec/views/stream.spec.jsx b/tests/js/spec/views/stream.spec.jsx
index 16186eac7d..487e175028 100644
--- a/tests/js/spec/views/stream.spec.jsx
+++ b/tests/js/spec/views/stream.spec.jsx
@@ -13,16 +13,23 @@ const DEFAULT_LINKS_HEADER =
   '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:0>; rel="next"; results="true"; cursor="1443575731:0:0';
 
 describe('Stream', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
-    this.stubbedApiRequest = this.sandbox.stub(Client.prototype, 'request', (url, options) => {
-      if (url === 'http://127.0.0.1/api/0/projects/sentry/ludic-science/searches/' && options.method === 'GET') {
-        options.success && options.success([{'id': '789', 'query': 'is:unresolved', 'name': 'test'}]);
+    this.stubbedApiRequest = this.sandbox.stub(
+      Client.prototype,
+      'request',
+      (url, options) => {
+        if (
+          url === 'http://127.0.0.1/api/0/projects/sentry/ludic-science/searches/' &&
+          options.method === 'GET'
+        ) {
+          options.success &&
+            options.success([{id: '789', query: 'is:unresolved', name: 'test'}]);
+        }
+        options.complete && options.complete();
       }
-      options.complete && options.complete();
-    });
+    );
 
     this.context = {
       project: {
@@ -38,12 +45,12 @@ describe('Stream', function() {
     };
 
     let props = {
-      setProjectNavSection: function () {},
+      setProjectNavSection: function() {},
       location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
       params: {orgId: '123', projectId: '456'}
     };
 
-    this.wrapper = shallow(<Stream {...props}/>, {
+    this.wrapper = shallow(<Stream {...props} />, {
       context: this.context
     });
   });
@@ -53,8 +60,8 @@ describe('Stream', function() {
   });
 
   describe('fetchData()', function() {
-    describe('complete handler', function () {
-      beforeEach(function () {
+    describe('complete handler', function() {
+      beforeEach(function() {
         this.sandbox.stub(CursorPoller.prototype, 'setEndpoint');
       });
 
@@ -64,12 +71,14 @@ describe('Stream', function() {
         stream.state.realtimeActive = true;
         stream.fetchData();
 
-        expect(CursorPoller.prototype.setEndpoint
-          .calledWith('http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1'))
-          .to.be.true;
+        expect(
+          CursorPoller.prototype.setEndpoint.calledWith(
+            'http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1'
+          )
+        ).to.be.true;
       });
 
-      it('should not enable the poller if realtimeActive is false', function () {
+      it('should not enable the poller if realtimeActive is false', function() {
         let stream = this.wrapper.instance();
         stream.state.pageLinks = DEFAULT_LINKS_HEADER;
         stream.state.realtimeActive = false;
@@ -78,7 +87,7 @@ describe('Stream', function() {
         expect(CursorPoller.prototype.setEndpoint.notCalled).to.be.ok;
       });
 
-      it('should not enable the poller if the \'previous\' link has results', function () {
+      it('should not enable the poller if the \'previous\' link has results', function() {
         let stream = this.wrapper.instance();
         stream.state.pageLinks =
           '<http://127.0.0.1:8000/api/0/projects/sentry/ludic-science/issues/?cursor=1443575731:0:1>; rel="previous"; results="true"; cursor="1443575731:0:1", ' +
@@ -91,12 +100,12 @@ describe('Stream', function() {
       });
     }); // complete handler
 
-    it('should cancel any previous, unfinished fetches', function () {
+    it('should cancel any previous, unfinished fetches', function() {
       this.stubbedApiRequest.restore();
 
       let requestCancel = this.sandbox.stub();
       let requestOptions;
-      this.sandbox.stub(Client.prototype, 'request', function (url, options) {
+      this.sandbox.stub(Client.prototype, 'request', function(url, options) {
         requestOptions = options;
         return {
           cancel: requestCancel
@@ -123,7 +132,6 @@ describe('Stream', function() {
   });
 
   describe('render()', function() {
-
     it('displays a loading indicator when component is loading', function() {
       let wrapper = this.wrapper;
       wrapper.setState({loading: true});
@@ -141,7 +149,7 @@ describe('Stream', function() {
       wrapper.setState({
         error: true,
         loading: false,
-        dataLoading: false,
+        dataLoading: false
       });
       expect(wrapper.find(LoadingError).length).to.be.ok;
     });
@@ -152,7 +160,7 @@ describe('Stream', function() {
         error: false,
         groupIds: ['1'],
         loading: false,
-        dataLoading: false,
+        dataLoading: false
       });
       expect(wrapper.find('.group-list').length).to.be.ok;
     });
@@ -164,7 +172,7 @@ describe('Stream', function() {
         error: false,
         groupIds: [],
         loading: false,
-        dataLoading: false,
+        dataLoading: false
       });
       expect(wrapper.find('.empty-stream').length).to.be.ok;
     });
@@ -178,18 +186,16 @@ describe('Stream', function() {
         error: false,
         groupIds: [],
         loading: false,
-        dataLoading: false,
+        dataLoading: false
       });
 
       expect(this.wrapper.find('.awaiting-events').length).to.equal(1);
 
       this.context.project.firstEvent = true; // Reset for other tests
     });
-
   });
 
   describe('componentWillMount()', function() {
-
     afterEach(function() {
       Cookies.remove('realtimeActive');
     });
@@ -207,11 +213,9 @@ describe('Stream', function() {
       let stream = this.wrapper.instance();
       expect(stream.getInitialState()).to.have.property('realtimeActive', true);
     });
-
   });
 
   describe('onRealtimeChange', function() {
-
     it('sets the realtimeActive state', function() {
       let stream = this.wrapper.instance();
       stream.state.realtimeActive = false;
@@ -223,7 +227,6 @@ describe('Stream', function() {
       expect(stream.state.realtimeActive).to.eql(false);
       expect(Cookies.get('realtimeActive')).to.eql('false');
     });
-
   });
 
   describe('getInitialState', function() {
@@ -241,7 +244,7 @@ describe('Stream', function() {
         error: false,
         searchId: null,
         query: 'is:unresolved',
-        sort: 'date',
+        sort: 'date'
       };
 
       let actual = this.wrapper.instance().getInitialState();
@@ -250,7 +253,7 @@ describe('Stream', function() {
 
     it('handles no searchId or query', function() {
       let props = {
-        setProjectNavSection: function () {},
+        setProjectNavSection: function() {},
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: '123', projectId: '456'}
       };
@@ -268,10 +271,10 @@ describe('Stream', function() {
         error: false,
         query: '',
         sort: 'freq',
-        searchId: null,
+        searchId: null
       };
 
-      let stream = shallow(<Stream {...props}/>, {
+      let stream = shallow(<Stream {...props} />, {
         context: this.context
       }).instance();
 
@@ -281,7 +284,7 @@ describe('Stream', function() {
 
     it('handles valid searchId in routing params', function() {
       let props = {
-        setProjectNavSection: function () {},
+        setProjectNavSection: function() {},
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: '123', projectId: '456', searchId: '789'}
       };
@@ -299,17 +302,15 @@ describe('Stream', function() {
         error: false,
         query: 'is:unresolved',
         sort: 'freq',
-        searchId: '789',
+        searchId: '789'
       };
 
-      let wrapper = shallow(<Stream {...props}/>, {
+      let wrapper = shallow(<Stream {...props} />, {
         context: this.context
       });
 
       wrapper.setState({
-        savedSearchList: [
-          {id: '789', query: 'is:unresolved', name: 'test'}
-        ]
+        savedSearchList: [{id: '789', query: 'is:unresolved', name: 'test'}]
       });
 
       let actual = wrapper.instance().getInitialState();
@@ -318,7 +319,7 @@ describe('Stream', function() {
 
     it('handles invalid searchId in routing params', function() {
       let props = {
-        setProjectNavSection: function () {},
+        setProjectNavSection: function() {},
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: '123', projectId: '456', searchId: '799'}
       };
@@ -336,10 +337,10 @@ describe('Stream', function() {
         error: false,
         query: '',
         sort: 'freq',
-        searchId: null,
+        searchId: null
       };
 
-      let stream = shallow(<Stream {...props}/>, {
+      let stream = shallow(<Stream {...props} />, {
         context: this.context
       }).instance();
 
@@ -347,5 +348,4 @@ describe('Stream', function() {
       expect(_.pick(actual, _.keys(expected))).to.eql(expected);
     });
   });
-
 });
diff --git a/tests/js/spec/views/stream/actionLink.spec.jsx b/tests/js/spec/views/stream/actionLink.spec.jsx
index 9ef94d21c6..a1b0d08497 100644
--- a/tests/js/spec/views/stream/actionLink.spec.jsx
+++ b/tests/js/spec/views/stream/actionLink.spec.jsx
@@ -5,7 +5,6 @@ import {Client} from 'app/api';
 import ActionLink from 'app/views/stream/actionLink';
 
 describe('ActionLink', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
@@ -17,9 +16,9 @@ describe('ActionLink', function() {
   });
 
   describe('shouldConfirm()', function() {
-    it('should always return true by default', function () {
+    it('should always return true by default', function() {
       let actionLink = shallow(
-        <ActionLink onAction={function(){}} selectAllActive={false}/>
+        <ActionLink onAction={function() {}} selectAllActive={false} />
       ).instance();
 
       expect(actionLink.shouldConfirm(0)).to.be.true;
@@ -27,9 +26,9 @@ describe('ActionLink', function() {
       expect(actionLink.shouldConfirm(25)).to.be.true;
     });
 
-    it('should return (mostly) true when props.onlyIfBulk is true and all are selected', function () {
+    it('should return (mostly) true when props.onlyIfBulk is true and all are selected', function() {
       let actionLink = shallow(
-        <ActionLink onlyIfBulk={true} selectAllActive={true} onAction={function(){}}/>
+        <ActionLink onlyIfBulk={true} selectAllActive={true} onAction={function() {}} />
       ).instance();
 
       expect(actionLink.shouldConfirm(1)).to.be.false; // EDGE CASE: if just 1, shouldn't confirm even if "all" selected
@@ -37,9 +36,9 @@ describe('ActionLink', function() {
       expect(actionLink.shouldConfirm(25)).to.be.true;
     });
 
-    it('should return false when props.onlyIfBulk is true and not all are selected', function () {
+    it('should return false when props.onlyIfBulk is true and not all are selected', function() {
       let actionLink = shallow(
-        <ActionLink onlyIfBulk={true} selectAllActive={false} onAction={function(){}}/>
+        <ActionLink onlyIfBulk={true} selectAllActive={false} onAction={function() {}} />
       ).instance();
 
       expect(actionLink.shouldConfirm(1)).to.be.false;
@@ -48,4 +47,3 @@ describe('ActionLink', function() {
     });
   });
 });
-
diff --git a/tests/js/spec/views/stream/actions.spec.jsx b/tests/js/spec/views/stream/actions.spec.jsx
index 806d1d9cf1..1ccf3abb32 100644
--- a/tests/js/spec/views/stream/actions.spec.jsx
+++ b/tests/js/spec/views/stream/actions.spec.jsx
@@ -6,7 +6,6 @@ import StreamActions from 'app/views/stream/actions';
 import SelectedGroupStore from 'app/stores/selectedGroupStore';
 
 describe('StreamActions', function() {
-
   beforeEach(function() {
     this.sandbox = sinon.sandbox.create();
 
@@ -17,24 +16,24 @@ describe('StreamActions', function() {
     this.sandbox.restore();
   });
 
-  describe('actionSelectedGroups()', function () {
+  describe('actionSelectedGroups()', function() {
     beforeEach(function() {
       this.actions = shallow(
-          <StreamActions
-            query=""
-            orgId="1337"
-            projectId="1"
-            groupIds={[1,2,3]}
-            onRealtimeChange={function(){}}
-            onSelectStatsPeriod={function(){}}
-            realtimeActive={false}
-            statsPeriod="24h"
-            />
-          ).instance();
+        <StreamActions
+          query=""
+          orgId="1337"
+          projectId="1"
+          groupIds={[1, 2, 3]}
+          onRealtimeChange={function() {}}
+          onSelectStatsPeriod={function() {}}
+          realtimeActive={false}
+          statsPeriod="24h"
+        />
+      ).instance();
     });
 
-    describe('for all items', function () {
-      it('should invoke the callback with \'undefined\' and deselect all', function () {
+    describe('for all items', function() {
+      it('should invoke the callback with \'undefined\' and deselect all', function() {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
         let callback = this.sandbox.stub();
 
@@ -50,20 +49,20 @@ describe('StreamActions', function() {
       });
     });
 
-    describe('for page-selected items', function () {
-      it('should invoke the callback with an array of selected items and deselect all', function () {
+    describe('for page-selected items', function() {
+      it('should invoke the callback with an array of selected items and deselect all', function() {
         this.sandbox.stub(SelectedGroupStore, 'deselectAll');
-        this.sandbox.stub(SelectedGroupStore, 'getSelectedIds').returns(new Set([1,2,3]));
+        this.sandbox
+          .stub(SelectedGroupStore, 'getSelectedIds')
+          .returns(new Set([1, 2, 3]));
 
         this.actions.state.allInQuerySelected = false;
         let callback = this.sandbox.stub();
         this.actions.actionSelectedGroups(callback);
 
-        expect(callback.withArgs([1,2,3]).calledOnce).to.be.ok;
+        expect(callback.withArgs([1, 2, 3]).calledOnce).to.be.ok;
         expect(SelectedGroupStore.deselectAll.calledOnce).to.be.ok;
       });
     });
   });
 });
-
-
diff --git a/tests/js/spec/views/stream/searchBar.spec.jsx b/tests/js/spec/views/stream/searchBar.spec.jsx
index 8e40489bf6..379564d264 100644
--- a/tests/js/spec/views/stream/searchBar.spec.jsx
+++ b/tests/js/spec/views/stream/searchBar.spec.jsx
@@ -6,8 +6,7 @@ import SearchBar from 'app/views/stream/searchBar';
 import StreamTagStore from 'app/stores/streamTagStore';
 
 describe('SearchBar', function() {
-
-  beforeEach(function () {
+  beforeEach(function() {
     StreamTagStore.reset();
 
     this.sandbox = sinon.sandbox.create();
@@ -15,25 +14,30 @@ describe('SearchBar', function() {
     this.sandbox.stub(Client.prototype, 'request');
   });
 
-  afterEach(function () {
+  afterEach(function() {
     this.sandbox.restore();
   });
 
-  describe('getQueryTerms()', function () {
-    it('should extract query terms from a query string', function () {
+  describe('getQueryTerms()', function() {
+    it('should extract query terms from a query string', function() {
       let query = 'tagname: ';
       expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['tagname:']);
 
       query = 'tagname:derp browser:';
-      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['tagname:derp', 'browser:']);
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql([
+        'tagname:derp',
+        'browser:'
+      ]);
 
       query = '   browser:"Chrome 33.0"    ';
-      expect(SearchBar.getQueryTerms(query, query.length)).to.eql(['browser:"Chrome 33.0"']);
+      expect(SearchBar.getQueryTerms(query, query.length)).to.eql([
+        'browser:"Chrome 33.0"'
+      ]);
     });
   });
 
-  describe('getLastTermIndex()', function () {
-    it('should provide the index of the last query term, given cursor index', function () {
+  describe('getLastTermIndex()', function() {
+    it('should provide the index of the last query term, given cursor index', function() {
       let query = 'tagname:';
       expect(SearchBar.getLastTermIndex(query, 0)).to.eql(8);
 
@@ -45,9 +49,8 @@ describe('SearchBar', function() {
     });
   });
 
-  describe('clearSearch()', function () {
-
-    it('clears the query', function () {
+  describe('clearSearch()', function() {
+    it('clears the query', function() {
       let props = {
         orgId: '123',
         projectId: '456',
@@ -61,7 +64,7 @@ describe('SearchBar', function() {
       expect(searchBar.state.query).to.equal('');
     });
 
-    it('calls onSearch()', function (done) {
+    it('calls onSearch()', function(done) {
       let props = {
         orgId: '123',
         projectId: '456',
@@ -78,26 +81,22 @@ describe('SearchBar', function() {
         done();
       });
     });
-
   });
 
-  describe('onQueryFocus()', function () {
-
-    it('displays the drop down', function () {
-      let searchBar = shallow(<SearchBar orgId="123" projectId="456"/>).instance();
+  describe('onQueryFocus()', function() {
+    it('displays the drop down', function() {
+      let searchBar = shallow(<SearchBar orgId="123" projectId="456" />).instance();
       expect(searchBar.state.dropdownVisible).to.be.false;
 
       searchBar.onQueryFocus();
 
       expect(searchBar.state.dropdownVisible).to.be.true;
     });
-
   });
 
-  describe('onQueryBlur()', function () {
-
-    it('hides the drop down', function () {
-      let searchBar = shallow(<SearchBar orgId="123" projectId="456"/>).instance();
+  describe('onQueryBlur()', function() {
+    it('hides the drop down', function() {
+      let searchBar = shallow(<SearchBar orgId="123" projectId="456" />).instance();
       searchBar.state.dropdownVisible = true;
 
       let clock = this.sandbox.useFakeTimers();
@@ -106,13 +105,12 @@ describe('SearchBar', function() {
 
       expect(searchBar.state.dropdownVisible).to.be.false;
     });
-
   });
 
-  describe('onKeyUp()', function () {
-    describe('escape', function () {
-      it('blurs the input', function () {
-        let wrapper = shallow(<SearchBar orgId="123" projectId="456"/>);
+  describe('onKeyUp()', function() {
+    describe('escape', function() {
+      it('blurs the input', function() {
+        let wrapper = shallow(<SearchBar orgId="123" projectId="456" />);
         wrapper.setState({dropdownVisible: true});
 
         let instance = wrapper.instance();
@@ -125,21 +123,21 @@ describe('SearchBar', function() {
     });
   });
 
-  describe('render()', function () {
-
-    it('invokes onSearch() when submitting the form', function () {
+  describe('render()', function() {
+    it('invokes onSearch() when submitting the form', function() {
       let stubbedOnSearch = this.sandbox.spy();
-      let wrapper = mount(<SearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456"/>);
+      let wrapper = mount(
+        <SearchBar onSearch={stubbedOnSearch} orgId="123" projectId="456" />
+      );
 
       wrapper.find('form').simulate('submit', {
-        preventDefault() {
-        }
+        preventDefault() {}
       });
 
       expect(stubbedOnSearch.called).to.be.true;
     });
 
-    it('invokes onSearch() when search is cleared', function (done) {
+    it('invokes onSearch() when search is cleared', function(done) {
       let props = {
         orgId: '123',
         projectId: '456',
@@ -150,14 +148,14 @@ describe('SearchBar', function() {
 
       wrapper.find('.search-clear-form').simulate('click');
 
-      setTimeout(function () {
+      setTimeout(function() {
         expect(props.onSearch.calledWith('')).to.be.true;
         done();
       });
     });
   });
 
-  it('handles an empty query', function () {
+  it('handles an empty query', function() {
     let props = {
       orgId: '123',
       projectId: '456',
@@ -173,7 +171,7 @@ describe('SearchBar', function() {
       let props = {
         orgId: '123',
         projectId: '456',
-        query: '',
+        query: ''
       };
       let searchBar = mount(<SearchBar {...props} />).instance();
       searchBar.updateAutoCompleteItems();
@@ -186,7 +184,7 @@ describe('SearchBar', function() {
       let props = {
         orgId: '123',
         projectId: '456',
-        query: 'fu',
+        query: 'fu'
       };
       let searchBar = mount(<SearchBar {...props} />).instance();
       searchBar.updateAutoCompleteItems();
@@ -199,7 +197,7 @@ describe('SearchBar', function() {
       let props = {
         orgId: '123',
         projectId: '456',
-        query: 'url:"fu"',
+        query: 'url:"fu"'
       };
       let searchBar = mount(<SearchBar {...props} />).instance();
       searchBar.updateAutoCompleteItems();
@@ -212,7 +210,7 @@ describe('SearchBar', function() {
       let props = {
         orgId: '123',
         projectId: '456',
-        query: 'is:unresolved fu',
+        query: 'is:unresolved fu'
       };
       let searchBar = mount(<SearchBar {...props} />).instance();
       searchBar.updateAutoCompleteItems();
@@ -225,7 +223,7 @@ describe('SearchBar', function() {
       let props = {
         orgId: '123',
         projectId: '456',
-        query: 'url:"http://example.com"',
+        query: 'url:"http://example.com"'
       };
       let searchBar = mount(<SearchBar {...props} />).instance();
       searchBar.updateAutoCompleteItems();
@@ -234,6 +232,4 @@ describe('SearchBar', function() {
       expect(searchBar.state.activeSearchItem).to.eql(0);
     });
   });
-
 });
-
diff --git a/yarn.lock b/yarn.lock
index e9fb4514f3..77a644a37a 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -84,6 +84,12 @@ ansi-styles@^2.2.1:
   version "2.2.1"
   resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-2.2.1.tgz#b432dd3358b634cf75e1e4664368240533c1ddbe"
 
+ansi-styles@^3.0.0:
+  version "3.0.0"
+  resolved "https://registry.yarnpkg.com/ansi-styles/-/ansi-styles-3.0.0.tgz#5404e93a544c4fec7f048262977bebfe3155e0c1"
+  dependencies:
+    color-convert "^1.0.0"
+
 anymatch@^1.3.0:
   version "1.3.0"
   resolved "https://registry.yarnpkg.com/anymatch/-/anymatch-1.3.0.tgz#a3e52fa39168c825ff57b0248126ce5a8ff95507"
@@ -182,6 +188,10 @@ assertion-error@^1.0.1:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/assertion-error/-/assertion-error-1.0.2.tgz#13ca515d86206da0bac66e834dd397d87581094c"
 
+ast-types@0.9.8:
+  version "0.9.8"
+  resolved "https://registry.yarnpkg.com/ast-types/-/ast-types-0.9.8.tgz#6cb6a40beba31f49f20928e28439fc14a3dab078"
+
 async-each@^1.0.0:
   version "1.0.1"
   resolved "https://registry.yarnpkg.com/async-each/-/async-each-1.0.1.tgz#19d386a1d9edc6e7c1c85d388aedbcc56d33602d"
@@ -227,6 +237,14 @@ aws4@^1.2.1:
   version "1.5.0"
   resolved "https://registry.yarnpkg.com/aws4/-/aws4-1.5.0.tgz#0a29ffb79c31c9e712eeb087e8e7a64b4a56d755"
 
+babel-code-frame@6.22.0:
+  version "6.22.0"
+  resolved "https://registry.yarnpkg.com/babel-code-frame/-/babel-code-frame-6.22.0.tgz#027620bee567a88c32561574e7fd0801d33118e4"
+  dependencies:
+    chalk "^1.1.0"
+    esutils "^2.0.2"
+    js-tokens "^3.0.0"
+
 babel-code-frame@^6.16.0, babel-code-frame@^6.20.0:
   version "6.20.0"
   resolved "https://registry.yarnpkg.com/babel-code-frame/-/babel-code-frame-6.20.0.tgz#b968f839090f9a8bc6d41938fb96cb84f7387b26"
@@ -822,6 +840,10 @@ babel-types@^6.15.0, babel-types@^6.16.0, babel-types@^6.18.0, babel-types@^6.19
     lodash "^4.2.0"
     to-fast-properties "^1.0.1"
 
+babylon@7.0.0-beta.8:
+  version "7.0.0-beta.8"
+  resolved "https://registry.yarnpkg.com/babylon/-/babylon-7.0.0-beta.8.tgz#2bdc5ae366041442c27e068cce6f0d7c06ea9949"
+
 babylon@^6.11.0:
   version "6.12.0"
   resolved "https://registry.yarnpkg.com/babylon/-/babylon-6.12.0.tgz#953e6202e58062f7f5041fc8037e4bd4e17140a9"
@@ -1092,7 +1114,7 @@ chai@3.4.1:
     deep-eql "^0.1.3"
     type-detect "^1.0.0"
 
-chalk@^1.0.0, chalk@^1.1.0, chalk@^1.1.1, chalk@^1.1.3:
+chalk@1.1.3, chalk@^1.0.0, chalk@^1.1.0, chalk@^1.1.1, chalk@^1.1.3:
   version "1.1.3"
   resolved "https://registry.yarnpkg.com/chalk/-/chalk-1.1.3.tgz#a8115c55e4a702fe4d150abd3872822a7e09fc98"
   dependencies:
@@ -1199,7 +1221,7 @@ code-point-at@^1.0.0:
   dependencies:
     number-is-nan "^1.0.0"
 
-color-convert@^1.3.0:
+color-convert@^1.0.0, color-convert@^1.3.0:
   version "1.5.0"
   resolved "https://registry.yarnpkg.com/color-convert/-/color-convert-1.5.0.tgz#7a2b4efb4488df85bca6443cb038b7100fbe7de1"
 
@@ -1969,14 +1991,14 @@ estraverse@~4.1.0:
   version "4.1.1"
   resolved "https://registry.yarnpkg.com/estraverse/-/estraverse-4.1.1.tgz#f6caca728933a850ef90661d0e17982ba47111a2"
 
+esutils@2.0.2, esutils@^2.0.0, esutils@^2.0.2:
+  version "2.0.2"
+  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.2.tgz#0abf4f1caa5bcb1f7a9d8acc6dea4faaa04bac9b"
+
 esutils@^1.1.6:
   version "1.1.6"
   resolved "https://registry.yarnpkg.com/esutils/-/esutils-1.1.6.tgz#c01ccaa9ae4b897c6d0c3e210ae52f3c7a844375"
 
-esutils@^2.0.0, esutils@^2.0.2:
-  version "2.0.2"
-  resolved "https://registry.yarnpkg.com/esutils/-/esutils-2.0.2.tgz#0abf4f1caa5bcb1f7a9d8acc6dea4faaa04bac9b"
-
 event-emitter@~0.3.4:
   version "0.3.4"
   resolved "https://registry.yarnpkg.com/event-emitter/-/event-emitter-0.3.4.tgz#8d63ddfb4cfe1fae3b32ca265c4c720222080bb5"
@@ -2174,6 +2196,10 @@ flatten@1.0.2, flatten@^1.0.2:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/flatten/-/flatten-1.0.2.tgz#dae46a9d78fbe25292258cc1e780a41d95c03782"
 
+flow-parser@0.43.0:
+  version "0.43.0"
+  resolved "https://registry.yarnpkg.com/flow-parser/-/flow-parser-0.43.0.tgz#e2b8eb1ac83dd53f7b6b04a7c35b6a52c33479b7"
+
 for-in@^0.1.5:
   version "0.1.6"
   resolved "https://registry.yarnpkg.com/for-in/-/for-in-0.1.6.tgz#c9f96e89bfad18a545af5ec3ed352a1d9e5b4dc8"
@@ -2282,6 +2308,10 @@ get-caller-file@^1.0.1:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/get-caller-file/-/get-caller-file-1.0.2.tgz#f702e63127e7e231c160a80c1554acb70d5047e5"
 
+get-stdin@5.0.1:
+  version "5.0.1"
+  resolved "https://registry.yarnpkg.com/get-stdin/-/get-stdin-5.0.1.tgz#122e161591e21ff4c52530305693f20e6393a398"
+
 getpass@^0.1.1:
   version "0.1.6"
   resolved "https://registry.yarnpkg.com/getpass/-/getpass-0.1.6.tgz#283ffd9fc1256840875311c1b60e8c40187110e6"
@@ -2315,24 +2345,24 @@ glob@3.2.3:
     inherits "2"
     minimatch "~0.2.11"
 
-glob@^5.0.14:
-  version "5.0.15"
-  resolved "https://registry.yarnpkg.com/glob/-/glob-5.0.15.tgz#1bc936b9e02f4a603fcc222ecf7633d30b8b93b1"
+glob@7.1.1, glob@^7.0.0, glob@^7.0.3, glob@^7.0.5:
+  version "7.1.1"
+  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.1.tgz#805211df04faaf1c63a3600306cdf5ade50b2ec8"
   dependencies:
+    fs.realpath "^1.0.0"
     inflight "^1.0.4"
     inherits "2"
-    minimatch "2 || 3"
+    minimatch "^3.0.2"
     once "^1.3.0"
     path-is-absolute "^1.0.0"
 
-glob@^7.0.0, glob@^7.0.3, glob@^7.0.5:
-  version "7.1.1"
-  resolved "https://registry.yarnpkg.com/glob/-/glob-7.1.1.tgz#805211df04faaf1c63a3600306cdf5ade50b2ec8"
+glob@^5.0.14:
+  version "5.0.15"
+  resolved "https://registry.yarnpkg.com/glob/-/glob-5.0.15.tgz#1bc936b9e02f4a603fcc222ecf7633d30b8b93b1"
   dependencies:
-    fs.realpath "^1.0.0"
     inflight "^1.0.4"
     inherits "2"
-    minimatch "^3.0.2"
+    minimatch "2 || 3"
     once "^1.3.0"
     path-is-absolute "^1.0.0"
 
@@ -2825,6 +2855,22 @@ jed@^1.1.0:
   version "1.1.1"
   resolved "https://registry.yarnpkg.com/jed/-/jed-1.1.1.tgz#7a549bbd9ffe1585b0cd0a191e203055bee574b4"
 
+jest-matcher-utils@^19.0.0:
+  version "19.0.0"
+  resolved "https://registry.yarnpkg.com/jest-matcher-utils/-/jest-matcher-utils-19.0.0.tgz#5ecd9b63565d2b001f61fbf7ec4c7f537964564d"
+  dependencies:
+    chalk "^1.1.3"
+    pretty-format "^19.0.0"
+
+jest-validate@19.0.0:
+  version "19.0.0"
+  resolved "https://registry.yarnpkg.com/jest-validate/-/jest-validate-19.0.0.tgz#8c6318a20ecfeaba0ba5378bfbb8277abded4173"
+  dependencies:
+    chalk "^1.1.1"
+    jest-matcher-utils "^19.0.0"
+    leven "^2.0.0"
+    pretty-format "^19.0.0"
+
 jodid25519@^1.0.0:
   version "1.0.2"
   resolved "https://registry.yarnpkg.com/jodid25519/-/jodid25519-1.0.2.tgz#06d4912255093419477d425633606e0e90782967"
@@ -2851,6 +2897,10 @@ js-tokens@^2.0.0:
   version "2.0.0"
   resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-2.0.0.tgz#79903f5563ee778cc1162e6dcf1a0027c97f9cb5"
 
+js-tokens@^3.0.0:
+  version "3.0.1"
+  resolved "https://registry.yarnpkg.com/js-tokens/-/js-tokens-3.0.1.tgz#08e9f132484a2c45a30907e9dc4d5567b7f114d7"
+
 js-yaml@^3.2.5, js-yaml@~3.6.1:
   version "3.6.1"
   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-3.6.1.tgz#6e5fe67d8b205ce4d22fad05b7781e8dadcc4b30"
@@ -2908,7 +2958,7 @@ json-stable-stringify@^1.0.0, json-stable-stringify@^1.0.1:
   dependencies:
     jsonify "~0.0.0"
 
-json-stringify-safe@^5.0.1, json-stringify-safe@~5.0.1:
+json-stringify-safe@~5.0.1:
   version "5.0.1"
   resolved "https://registry.yarnpkg.com/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz#1296a2d58fd45f19a0f6ce01d65701e2c735b6eb"
 
@@ -3056,6 +3106,10 @@ less@2.5.3:
     request "^2.51.0"
     source-map "^0.4.2"
 
+leven@^2.0.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/leven/-/leven-2.1.0.tgz#c2e7a9f772094dee9d34202ae8acce4687875580"
+
 levn@~0.2.5:
   version "0.2.5"
   resolved "https://registry.yarnpkg.com/levn/-/levn-0.2.5.tgz#ba8d339d0ca4a610e3a3f145b9caf48807155054"
@@ -3427,7 +3481,7 @@ minimist@0.0.8, minimist@~0.0.1:
   version "0.0.8"
   resolved "https://registry.yarnpkg.com/minimist/-/minimist-0.0.8.tgz#857fcabfc3397d2625b8228262e86aa7a011b05d"
 
-minimist@^1.2.0:
+minimist@1.2.0, minimist@^1.2.0:
   version "1.2.0"
   resolved "https://registry.yarnpkg.com/minimist/-/minimist-1.2.0.tgz#a35008b20f41383eec1fb914f4cd5df79a264284"
 
@@ -4146,6 +4200,27 @@ preserve@^0.2.0:
   version "0.2.0"
   resolved "https://registry.yarnpkg.com/preserve/-/preserve-0.2.0.tgz#815ed1f6ebc65926f865b310c0713bcb3315ce4b"
 
+prettier@^1.1.0:
+  version "1.1.0"
+  resolved "https://registry.yarnpkg.com/prettier/-/prettier-1.1.0.tgz#9d6ad005703efefa66b6999b8916bfc6afeaf9f8"
+  dependencies:
+    ast-types "0.9.8"
+    babel-code-frame "6.22.0"
+    babylon "7.0.0-beta.8"
+    chalk "1.1.3"
+    esutils "2.0.2"
+    flow-parser "0.43.0"
+    get-stdin "5.0.1"
+    glob "7.1.1"
+    jest-validate "19.0.0"
+    minimist "1.2.0"
+
+pretty-format@^19.0.0:
+  version "19.0.0"
+  resolved "https://registry.yarnpkg.com/pretty-format/-/pretty-format-19.0.0.tgz#56530d32acb98a3fa4851c4e2b9d37b420684c84"
+  dependencies:
+    ansi-styles "^3.0.0"
+
 private@^0.1.6:
   version "0.1.6"
   resolved "https://registry.yarnpkg.com/private/-/private-0.1.6.tgz#55c6a976d0f9bafb9924851350fe47b9b5fbb7c1"
@@ -4258,11 +4333,9 @@ range-parser@^1.0.3:
   version "1.2.0"
   resolved "https://registry.yarnpkg.com/range-parser/-/range-parser-1.2.0.tgz#f49be6b487894ddc40dcc94a322f611092e00d5e"
 
-raven-js@3.13.0:
-  version "3.13.0"
-  resolved "https://registry.yarnpkg.com/raven-js/-/raven-js-3.13.0.tgz#baf9d7f913524e8782578e766931194dba2ac93a"
-  dependencies:
-    json-stringify-safe "^5.0.1"
+raven-js@3.14.1:
+  version "3.14.1"
+  resolved "https://registry.yarnpkg.com/raven-js/-/raven-js-3.14.1.tgz#9c3c5f570a1b918b5c30c5fad66982e17fe38e39"
 
 raw-body@~2.1.7:
   version "2.1.7"
