commit e609be43a0dee43d7dc7292068c1a589af03d2dd
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Nov 25 12:22:35 2015 -0800

    Add basic generic release webhook (fixes GH-2367)

diff --git a/src/sentry/api/client.py b/src/sentry/api/client.py
index 8ea144c503..9afe80b9a3 100644
--- a/src/sentry/api/client.py
+++ b/src/sentry/api/client.py
@@ -14,7 +14,13 @@ class ApiError(Exception):
         self.body = body
 
     def __unicode__(self):
-        return 'status=%s body=%s' % (self.status_code, self.body)
+        return u'status={} body={}'.format(self.status_code, self.body)
+
+    def __str__(self):
+        return self.__unicode__().encode('utf-8')
+
+    def __repr__(self):
+        return u'<ApiError: {}>'.format(self.__unicode__())
 
 
 class ApiClient(object):
diff --git a/src/sentry/templates/sentry/project-release-tracking.html b/src/sentry/templates/sentry/project-release-tracking.html
index 2af77d025c..90be3120af 100644
--- a/src/sentry/templates/sentry/project-release-tracking.html
+++ b/src/sentry/templates/sentry/project-release-tracking.html
@@ -31,23 +31,43 @@ Raven.config({
     </div>
   </div>
 
-  {% if enabled_plugins %}
-    <div class="box">
-      <div class="box-header">
-        <h3>{% trans "Token" %}</h3>
-      </div>
-      <div class="box-content with-padding">
-        <form method="POST">
-          {% csrf_token %}
-            <p>Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.</p>
-            <p>
-              <code style="display:inline-block" class="auto-select">{{ token }}</code>
-              <button type="submit" class="btn btn-sm btn-danger" name="op" value="regenerate-token">Regenerate Token</button>
-            </p>
-        </form>
-      </div>
+  <div class="box">
+    <div class="box-header">
+      <h3>{% trans "Token" %}</h3>
     </div>
-  {% endif %}
+    <div class="box-content with-padding">
+      <form method="POST">
+        {% csrf_token %}
+          <p>Your token is a unique secret which is used to generate deploy hook URLs. If a service becomes compromised, you should regenerate the token and re-configure any deploy hooks with the newly generated URL.</p>
+          <p>
+            <code style="display:inline-block" class="auto-select">{{ token }}</code>
+            <button type="submit" class="btn btn-sm btn-danger" name="op" value="regenerate-token">Regenerate Token</button>
+          </p>
+      </form>
+    </div>
+  </div>
+
+
+  <div class="box">
+    <div class="box-header">
+      <h3>{% trans "Webhook" %}</h3>
+    </div>
+    <div class="box-content with-padding">
+      <form method="POST">
+        {% csrf_token %}
+          <p>If you simply want to integrate with an existing system, sometimes its easiest just to use a webhook.</p>
+
+          <pre class="auto-select">{{ webhook_url }}</pre>
+
+          <p>The release webhook accepts the same parameters as the "Create a new Release" API endpoint, for example:</p>
+
+          <pre class="auto-select">curl {{ webhook_url }} \
+  -X POST \
+  -H 'Content-Type: application/json' \
+  -d '{"version": "abcdefg"}'</pre>
+      </form>
+    </div>
+  </div>
 
   {% if enabled_plugins or other_plugins %}
     {% for plugin, content in enabled_plugins %}
diff --git a/src/sentry/web/frontend/project_release_tracking.py b/src/sentry/web/frontend/project_release_tracking.py
index 4e71e8bec1..4b6e28d3b6 100644
--- a/src/sentry/web/frontend/project_release_tracking.py
+++ b/src/sentry/web/frontend/project_release_tracking.py
@@ -100,6 +100,11 @@ class ProjectReleaseTrackingView(ProjectView):
             'token': token,
             'enabled_plugins': enabled_plugins,
             'other_plugins': other_plugins,
+            'webhook_url': absolute_uri(reverse('sentry-release-hook', kwargs={
+                'plugin_id': 'builtin',
+                'project_id': project.id,
+                'signature': self._get_signature(project.id, 'builtin', token),
+            }))
         }
 
         return self.respond('sentry/project-release-tracking.html', context)
diff --git a/src/sentry/web/frontend/release_webhook.py b/src/sentry/web/frontend/release_webhook.py
index 00bea25f72..d8812d6d52 100644
--- a/src/sentry/web/frontend/release_webhook.py
+++ b/src/sentry/web/frontend/release_webhook.py
@@ -10,12 +10,14 @@ from django.views.generic import View
 from django.utils.crypto import constant_time_compare
 from django.utils.decorators import method_decorator
 
-from sentry.models import Project, ProjectOption
+from sentry.api import client
+from sentry.models import ApiKey, Project, ProjectOption
 from sentry.plugins import plugins
+from sentry.utils import json
 
 
 class ReleaseWebhookView(View):
-    def verify(self, project_id, plugin_id, token, signature):
+    def verify(self, plugin_id, project_id, token, signature):
         return constant_time_compare(signature, hmac.new(
             key=str(token),
             msg='{}-{}'.format(plugin_id, project_id),
@@ -26,7 +28,38 @@ class ReleaseWebhookView(View):
     def dispatch(self, *args, **kwargs):
         return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)
 
-    def post(self, request, project_id, plugin_id, signature):
+    def _handle_builtin(self, request, project):
+        endpoint = '/projects/{}/{}/releases/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+        try:
+            # Ideally the API client would support some kind of god-mode here
+            # as we've already confirmed credentials and simply want to execute
+            # the view code. Instead we hack around it with an ApiKey instance
+            god = ApiKey(
+                organization=project.organization,
+                scopes=getattr(ApiKey.scopes, 'project:write'),
+            )
+
+            resp = client.post(
+                endpoint,
+                data=json.loads(request.body),
+                auth=god,
+            )
+        except client.ApiError as exc:
+            return HttpResponse(
+                status=exc.status_code,
+                content=exc.body,
+                content_type='application/json',
+            )
+        return HttpResponse(
+            status=resp.status_code,
+            content=json.dumps(resp.data),
+            content_type='application/json',
+        )
+
+    def post(self, request, plugin_id, project_id, signature):
         project = Project.objects.get_from_cache(id=project_id)
 
         token = ProjectOption.objects.get_value(project, 'sentry:release-token')
@@ -34,10 +67,13 @@ class ReleaseWebhookView(View):
         logging.info('Incoming webhook for project_id=%s, plugin_id=%s',
                      project_id, plugin_id)
 
-        if not self.verify(project_id, plugin_id, token, signature):
+        if not self.verify(plugin_id, project_id, token, signature):
             logging.warn('Unable to verify signature for release hook')
             return HttpResponse(status=403)
 
+        if plugin_id == 'builtin':
+            return self._handle_builtin(request, project)
+
         plugin = plugins.get(plugin_id)
         if not plugin.is_enabled(project):
             logging.warn('Disabled release hook received for project_id=%s, plugin_id=%s',
diff --git a/tests/sentry/web/frontend/test_release_webhook.py b/tests/sentry/web/frontend/test_release_webhook.py
index abc381839a..20c50ad57c 100644
--- a/tests/sentry/web/frontend/test_release_webhook.py
+++ b/tests/sentry/web/frontend/test_release_webhook.py
@@ -1,14 +1,15 @@
 from __future__ import absolute_import
 
-from hashlib import sha256
 import hmac
 
 from django.core.urlresolvers import reverse
 from exam import fixture
+from hashlib import sha256
 from mock import patch
 
 from sentry.models import ProjectOption
 from sentry.testutils import TestCase
+from sentry.utils import json
 
 
 class ReleaseWebhookTest(TestCase):
@@ -63,3 +64,39 @@ class ReleaseWebhookTest(TestCase):
         assert resp.status_code == 403
         mock_plugin_get.assert_called_once_with('dummy')
         assert not MockPlugin.get_release_hook.called
+
+
+class BuiltinReleaseWebhookTest(TestCase):
+    def setUp(self):
+        super(ReleaseWebhookTest, self).setUp()
+        self.organization = self.create_organization()
+        self.team = self.create_team(organization=self.organization)
+        self.project = self.create_project(team=self.team)
+        self.token = 'a2587e3af83411e4a28634363b8514c2'
+        self.signature = hmac.new(
+            key=self.token,
+            msg='builtin-{}'.format(self.project.id),
+            digestmod=sha256,
+        ).hexdigest()
+        ProjectOption.objects.set_value(
+            self.project, 'sentry:release-token', self.token)
+
+    @fixture
+    def path(self):
+        return reverse('sentry-release-hook', kwargs={
+            'project_id': self.project.id,
+            'plugin_id': 'builtin',
+            'signature': self.signature,
+        })
+
+    def test_invalid_params(self):
+        resp = self.client.post(self.path, content_type='application/json')
+        assert resp.status_code == 400
+
+    def test_valid_params(self):
+        resp = self.client.post(self.path, data=json.dumps({
+            'version': 'a',
+        }), content_type='application/json')
+        assert resp.status_code == 201, resp.content
+        data = json.loads(resp.content)
+        assert data['version'] == 'a'
