commit 22026fa3887acc43b1494385c7293b37b8452f5e
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Mar 3 21:41:32 2015 -0800

    Add organization list/create endpoints

diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
new file mode 100644
index 0000000000..0e772bc916
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -0,0 +1,71 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+from sentry.api.base import DocSection, Endpoint
+from sentry.api.bases.organization import OrganizationPermission
+from sentry.api.serializers import serialize
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, Organization
+
+
+class OrganizationSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=200, required=True)
+    slug = serializers.CharField(max_length=200, required=False)
+
+
+class OrganizationIndexEndpoint(Endpoint):
+    doc_section = DocSection.ORGANIZATIONS
+    permission_classes = (OrganizationPermission,)
+
+    def get(self, request):
+        """
+        List your organizations
+
+        Return a list of organizations available to the authenticated session.
+
+            {method} {path}
+
+        """
+        if request.auth:
+            organizations = [request.auth.project.organization]
+        else:
+            organizations = Organization.objects.get_for_user(
+                user=request.user,
+            )
+        return Response(serialize(organizations, request.user))
+
+    def post(self, request):
+        """
+        Create a new organization
+
+        Create a new organization.
+
+            {method} {path}
+            {{
+                "name": "My organization"
+            }}
+
+        """
+        serializer = OrganizationSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            result = serializer.object
+
+            org = Organization.objects.create(
+                name=result['name'],
+                slug=result.get('slug'),
+                owner=request.user,
+            )
+
+            AuditLogEntry.objects.create(
+                organization=org,
+                actor=request.user,
+                ip_address=request.META['REMOTE_ADDR'],
+                target_object=org.id,
+                event=AuditLogEntryEvent.ORG_ADD,
+                data=org.get_audit_log_data(),
+            )
+
+            return Response(serialize(org, request.user), status=201)
+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index dcd44dee64..500017e297 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -19,6 +19,7 @@ from .endpoints.helppage_index import HelpPageIndexEndpoint
 from .endpoints.index import IndexEndpoint
 from .endpoints.organization_details import OrganizationDetailsEndpoint
 from .endpoints.organization_member_details import OrganizationMemberDetailsEndpoint
+from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_projects import OrganizationProjectsEndpoint
 from .endpoints.organization_stats import OrganizationStatsEndpoint
 from .endpoints.organization_teams import OrganizationTeamsEndpoint
@@ -57,6 +58,9 @@ urlpatterns = patterns(
         name='sentry-api-0-user-details'),
 
     # Organizations
+    url(r'^organizations/$',
+        OrganizationIndexEndpoint.as_view(),
+        name='sentry-api-0-organizations'),
     url(r'^organizations/(?P<organization_slug>[^\/]+)/$',
         OrganizationDetailsEndpoint.as_view(),
         name='sentry-api-0-organization-details'),
diff --git a/tests/sentry/api/endpoints/test_organization_index.py b/tests/sentry/api/endpoints/test_organization_index.py
new file mode 100644
index 0000000000..1a36b8f3ed
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_index.py
@@ -0,0 +1,54 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.models import Organization
+from sentry.testutils import APITestCase
+
+
+class OrganizationsListTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-organizations')
+
+    def test_simple(self):
+        org = self.create_organization(owner=self.user)
+        self.login_as(user=self.user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert len(response.data) == 1
+        assert response.data[0]['id'] == str(org.id)
+
+
+class OrganizationsCreateTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-organizations')
+
+    def test_missing_params(self):
+        self.login_as(user=self.user)
+        resp = self.client.post(self.path)
+        assert resp.status_code == 400
+
+    def test_valid_params(self):
+        self.login_as(user=self.user)
+
+        resp = self.client.post(self.path, data={
+            'name': 'hello world',
+            'slug': 'foobar',
+        })
+        assert resp.status_code == 201, resp.content
+        org = Organization.objects.get(id=resp.data['id'])
+        assert org.name == 'hello world'
+        assert org.slug == 'foobar'
+
+    def test_without_slug(self):
+        self.login_as(user=self.user)
+
+        resp = self.client.post(self.path, data={
+            'name': 'hello world',
+        })
+        assert resp.status_code == 201, resp.content
+        org = Organization.objects.get(id=resp.data['id'])
+        assert org.slug == 'hello-world'
