commit e22b9b7d7f24c79cc2639ee05b19cd92f17fac16
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 14 13:05:35 2015 -0800

    Test for link headers in project group list

diff --git a/src/sentry/testutils/helpers/__init__.py b/src/sentry/testutils/helpers/__init__.py
new file mode 100644
index 0000000000..077bb02f5a
--- /dev/null
+++ b/src/sentry/testutils/helpers/__init__.py
@@ -0,0 +1,11 @@
+"""
+sentry.testutils.helpers
+~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from __future__ import absolute_import
+
+from .auth_header import *  # NOQA
+from .link_header import *  # NOQA
diff --git a/src/sentry/testutils/helpers.py b/src/sentry/testutils/helpers/auth_header.py
similarity index 69%
rename from src/sentry/testutils/helpers.py
rename to src/sentry/testutils/helpers/auth_header.py
index 0f43cb5684..e6c3562d87 100644
--- a/src/sentry/testutils/helpers.py
+++ b/src/sentry/testutils/helpers/auth_header.py
@@ -1,12 +1,7 @@
-"""
-sentry.testutils.helpers
-~~~~~~~~~~~~~~~~~~~~~~~~
-
-:copyright: (c) 2010-2014 by the Sentry Team, see AUTHORS for more details.
-:license: BSD, see LICENSE for more details.
-"""
 from __future__ import absolute_import
 
+__all__ = ('get_auth_header',)
+
 
 def get_auth_header(client, api_key=None, secret_key=None):
     header = [
diff --git a/src/sentry/testutils/helpers/link_header.py b/src/sentry/testutils/helpers/link_header.py
new file mode 100644
index 0000000000..8a39d6a972
--- /dev/null
+++ b/src/sentry/testutils/helpers/link_header.py
@@ -0,0 +1,85 @@
+"""
+Copyright (c) 2015 Sentry Team
+Copyright (c) 2009 Mark Nottingham
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+"""
+
+from __future__ import absolute_import
+
+__all__ = ('parse_link_header',)
+
+import re
+
+TOKEN = r'(?:[^\(\)<>@,;:\\"/\[\]\?={} \t]+?)'
+QUOTED_STRING = r'(?:"(?:\\"|[^"])*")'
+PARAMETER = r'(?:%(TOKEN)s(?:=(?:%(TOKEN)s|%(QUOTED_STRING)s))?)' % locals()
+LINK = r'<[^>]*>\s*(?:;\s*%(PARAMETER)s?\s*)*' % locals()
+COMMA = r'(?:\s*(?:,\s*)+)'
+LINK_SPLIT = r'%s(?=%s|\s*$)' % (LINK, COMMA)
+
+link_splitter = re.compile(LINK_SPLIT)
+
+
+def _unquotestring(instr):
+    if instr[0] == instr[-1] == '"':
+        instr = instr[1:-1]
+        instr = re.sub(r'\\(.)', r'\1', instr)
+    return instr
+
+
+def _splitstring(instr, item, split):
+    if not instr:
+        return []
+    return [h.strip() for h in re.findall(r'%s(?=%s|\s*$)' % (item, split), instr)]
+
+
+def parse_link_header(instr):
+    """
+    Given a link-value (i.e., after separating the header-value on commas),
+    return a dictionary whose keys are link URLs and values are dictionaries
+    of the parameters for their associated links.
+
+    Note that internationalised parameters (e.g., title*) are
+    NOT percent-decoded.
+
+    Also, only the last instance of a given parameter will be included.
+
+    For example,
+
+    >>> parse_link_value('</foo>; rel="self"; title*=utf-8\'de\'letztes%20Kapitel')
+    {'/foo': {'title*': "utf-8'de'letztes%20Kapitel", 'rel': 'self'}}
+
+    """
+    out = {}
+    if not instr:
+        return out
+
+    for link in [h.strip() for h in link_splitter.findall(instr)]:
+        url, params = link.split(">", 1)
+        url = url[1:]
+        param_dict = {}
+        for param in _splitstring(params, PARAMETER, "\s*;\s*"):
+            try:
+                a, v = param.split("=", 1)
+                param_dict[a.lower()] = _unquotestring(v)
+            except ValueError:
+                param_dict[param.lower()] = None
+        out[url] = param_dict
+    return out
diff --git a/tests/sentry/api/endpoints/test_project_group_index.py b/tests/sentry/api/endpoints/test_project_group_index.py
index 1b4f00de51..51c48482e1 100644
--- a/tests/sentry/api/endpoints/test_project_group_index.py
+++ b/tests/sentry/api/endpoints/test_project_group_index.py
@@ -5,6 +5,7 @@ from mock import patch
 
 from sentry.models import Group, GroupBookmark, GroupStatus
 from sentry.testutils import APITestCase
+from sentry.testutils.helpers import parse_link_header
 
 
 class GroupListTest(APITestCase):
@@ -15,8 +16,16 @@ class GroupListTest(APITestCase):
         self.login_as(user=self.user)
         url = reverse('sentry-api-0-project-group-index', kwargs={
             'project_id': self.project.id})
-        response = self.client.get(url, format='json')
+        response = self.client.get(url + '?limit=1', format='json')
         assert response.status_code == 200
+        # links come in {url: {...attrs}}, but we need {rel: {...attrs}}
+        links = {
+            d['rel']: d
+            for d in parse_link_header(response['Link']).values()
+        }
+
+        assert links['previous']['results'] == 'false'
+        assert links['next']['results'] == 'true'
 
 
 class GroupUpdateTest(APITestCase):
