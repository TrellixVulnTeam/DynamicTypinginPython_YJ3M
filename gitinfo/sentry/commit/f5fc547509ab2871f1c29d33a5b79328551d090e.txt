commit f5fc547509ab2871f1c29d33a5b79328551d090e
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Fri Feb 10 12:58:38 2017 -0800

    get rid of unneeded locks in release creation (#4894)

diff --git a/src/sentry/api/endpoints/project_releases.py b/src/sentry/api/endpoints/project_releases.py
index 9fd21e6b36..c51b35eb8f 100644
--- a/src/sentry/api/endpoints/project_releases.py
+++ b/src/sentry/api/endpoints/project_releases.py
@@ -12,11 +12,9 @@ from sentry.api.paginator import OffsetPaginator
 from sentry.api.fields.user import UserField
 from sentry.api.serializers import serialize
 from sentry.api.serializers.rest_framework import CommitSerializer, ListField
-from sentry.app import locks
 from sentry.models import Activity, Release, ReleaseProject
 from sentry.plugins.interfaces.releasehook import ReleaseHook
 from sentry.utils.apidocs import scenario, attach_scenarios
-from sentry.utils.retries import TimedRetryPolicy
 
 
 @scenario('CreateNewRelease')
@@ -145,45 +143,31 @@ class ProjectReleasesEndpoint(ProjectEndpoint):
 
             # release creation is idempotent to simplify user
             # experiences
-            release = Release.objects.filter(
-                organization_id=project.organization_id,
-                version=result['version'],
-                projects=project
-            ).first()
-            created = False
-            if release:
-                was_released = bool(release.date_released)
-            else:
-                release = Release.objects.filter(
+            try:
+                with transaction.atomic():
+                    release, created = Release.objects.create(
+                        organization_id=project.organization_id,
+                        version=result['version'],
+                        ref=result.get('ref'),
+                        url=result.get('url'),
+                        owner=result.get('owner'),
+                        date_started=result.get('dateStarted'),
+                        date_released=result.get('dateReleased'),
+                    ), True
+                was_released = False
+            except IntegrityError:
+                release, created = Release.objects.get(
                     organization_id=project.organization_id,
                     version=result['version'],
-                ).first()
-                if not release:
-                    lock_key = Release.get_lock_key(project.organization_id, result['version'])
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            release, created = Release.objects.get(
-                                version=result['version'],
-                                organization_id=project.organization_id
-                            ), False
-                        except Release.DoesNotExist:
-                            release, created = Release.objects.create(
-                                organization_id=project.organization_id,
-                                version=result['version'],
-                                ref=result.get('ref'),
-                                url=result.get('url'),
-                                owner=result.get('owner'),
-                                date_started=result.get('dateStarted'),
-                                date_released=result.get('dateReleased'),
-                            ), True
-                was_released = False
-                try:
-                    with transaction.atomic():
-                        ReleaseProject.objects.create(project=project, release=release)
-                    created = True
-                except IntegrityError:
-                    pass
+                ), False
+                was_released = bool(release.date_released)
+
+            try:
+                with transaction.atomic():
+                    ReleaseProject.objects.create(project=project, release=release)
+                created = True
+            except IntegrityError:
+                pass
 
             commit_list = result.get('commits')
             if commit_list:
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 9769db7e3c..552362d081 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -13,13 +13,11 @@ from django.db import models, IntegrityError, transaction
 from django.utils import timezone
 from jsonfield import JSONField
 
-from sentry.app import locks
 from sentry.db.models import (
     BoundedPositiveIntegerField, FlexibleForeignKey, Model, sane_repr
 )
 from sentry.utils.cache import cache
 from sentry.utils.hashlib import md5_text
-from sentry.utils.retries import TimedRetryPolicy
 
 
 _sha1_re = re.compile(r'^[a-f0-9]{40}$')
@@ -70,14 +68,12 @@ class Release(Model):
     __repr__ = sane_repr('organization', 'version')
 
     @classmethod
-    def get_cache_key(cls, project_id, version):
-        # TODO(jess): update this to use organization id when adding
-        # unique on Release for organization, version
-        return 'release:2:%s:%s' % (project_id, md5_text(version).hexdigest())
+    def get_cache_key(cls, organization_id, version):
+        return 'release:3:%s:%s' % (organization_id, md5_text(version).hexdigest())
 
     @classmethod
     def get(cls, project, version):
-        cache_key = cls.get_cache_key(project.id, version)
+        cache_key = cls.get_cache_key(project.organization_id, version)
 
         release = cache.get(cache_key)
         if release is None:
@@ -96,13 +92,9 @@ class Release(Model):
 
         return release
 
-    @classmethod
-    def get_lock_key(cls, organization_id, version):
-        return 'release:%s:%s' % (organization_id, md5_text(version).hexdigest())
-
     @classmethod
     def get_or_create(cls, project, version, date_added):
-        cache_key = cls.get_cache_key(project.id, version)
+        cache_key = cls.get_cache_key(project.organization_id, version)
 
         release = cache.get(cache_key)
         if release in (None, -1):
@@ -115,31 +107,23 @@ class Release(Model):
                 projects=project
             ))
             if releases:
-                # TODO(jess): clean this up once all releases have been migrated
                 try:
                     release = [r for r in releases if r.version == project_version][0]
                 except IndexError:
                     release = releases[0]
             else:
-                release = cls.objects.filter(
-                    organization_id=project.organization_id,
-                    version=version
-                ).first()
-                if not release:
-                    lock_key = cls.get_lock_key(project.organization_id, version)
-                    lock = locks.get(lock_key, duration=5)
-                    with TimedRetryPolicy(10)(lock.acquire):
-                        try:
-                            release = cls.objects.get(
-                                organization_id=project.organization_id,
-                                version=version
-                            )
-                        except cls.DoesNotExist:
-                            release = cls.objects.create(
-                                organization_id=project.organization_id,
-                                version=version,
-                                date_added=date_added
-                            )
+                try:
+                    with transaction.atomic():
+                        release = cls.objects.create(
+                            organization_id=project.organization_id,
+                            version=version,
+                            date_added=date_added
+                        )
+                except IntegrityError:
+                    release = cls.objects.get(
+                        organization_id=project.organization_id,
+                        version=version
+                    )
                 release.add_project(project)
 
             # TODO(dcramer): upon creating a new release, check if it should be
diff --git a/src/sentry/plugins/interfaces/releasehook.py b/src/sentry/plugins/interfaces/releasehook.py
index 6e7c3af4fc..de6031645e 100644
--- a/src/sentry/plugins/interfaces/releasehook.py
+++ b/src/sentry/plugins/interfaces/releasehook.py
@@ -12,14 +12,12 @@ __all__ = ['ReleaseHook']
 
 import re
 
-from django.db import transaction
+from django.db import IntegrityError, transaction
 from django.utils import timezone
 
-from sentry.app import locks
 from sentry.models import (
     Activity, Commit, CommitAuthor, Release, ReleaseCommit, Repository
 )
-from sentry.utils.retries import TimedRetryPolicy
 
 
 class ReleaseHook(object):
@@ -31,36 +29,21 @@ class ReleaseHook(object):
 
     def start_release(self, version, **values):
         values.setdefault('date_started', timezone.now())
-
-        affected = Release.objects.filter(
-            version=version,
-            organization_id=self.project.organization_id,
-            projects=self.project,
-        ).update(**values)
-        if not affected:
-            release = Release.objects.filter(
+        try:
+            with transaction.atomic():
+                release = Release.objects.create(
+                    version=version,
+                    organization_id=self.project.organization_id,
+                    **values
+                )
+        except IntegrityError:
+            release = Release.objects.get(
                 version=version,
                 organization_id=self.project.organization_id,
-            ).first()
-            if release:
-                release.update(**values)
-            else:
-                lock_key = Release.get_lock_key(self.project.organization_id, version)
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        release = Release.objects.get(
-                            version=version,
-                            organization_id=self.project.organization_id
-                        )
-                    except Release.DoesNotExist:
-                        release = Release.objects.create(
-                            version=version,
-                            organization_id=self.project.organization_id,
-                            **values
-                        )
-
-            release.add_project(self.project)
+            )
+            release.update(**values)
+
+        release.add_project(self.project)
 
     # TODO(dcramer): this is being used by the release details endpoint, but
     # it'd be ideal if most if not all of this logic lived there, and this
@@ -72,31 +55,18 @@ class ReleaseHook(object):
         Calling this method will remove all existing commit history.
         """
         project = self.project
-        release = Release.objects.filter(
-            organization_id=project.organization_id,
-            version=version,
-            projects=self.project
-        ).first()
-        if not release:
-            release = Release.objects.filter(
+        try:
+            with transaction.atomic():
+                release = Release.objects.create(
+                    organization_id=project.organization_id,
+                    version=version
+                )
+        except IntegrityError:
+            release = Release.objects.get(
                 organization_id=project.organization_id,
-                version=version,
-            ).first()
-            if not release:
-                lock_key = Release.get_lock_key(project.organization_id, version)
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        release = Release.objects.get(
-                            organization_id=project.organization_id,
-                            version=version
-                        )
-                    except Release.DoesNotExist:
-                        release = Release.objects.create(
-                            organization_id=project.organization_id,
-                            version=version
-                        )
-            release.add_project(project)
+                version=version
+            )
+        release.add_project(project)
 
         with transaction.atomic():
             # TODO(dcramer): would be good to optimize the logic to avoid these
@@ -156,34 +126,21 @@ class ReleaseHook(object):
 
     def finish_release(self, version, **values):
         values.setdefault('date_released', timezone.now())
-        affected = Release.objects.filter(
-            version=version,
-            organization_id=self.project.organization_id,
-            projects=self.project,
-        ).update(**values)
-        if not affected:
-            release = Release.objects.filter(
+        try:
+            with transaction.atomic():
+                release = Release.objects.create(
+                    version=version,
+                    organization_id=self.project.organization_id,
+                    **values
+                )
+        except IntegrityError:
+            release = Release.objects.get(
                 version=version,
                 organization_id=self.project.organization_id,
-            ).first()
-            if release:
-                release.update(**values)
-            else:
-                lock_key = Release.get_lock_key(self.project.organization_id, version)
-                lock = locks.get(lock_key, duration=5)
-                with TimedRetryPolicy(10)(lock.acquire):
-                    try:
-                        release = Release.objects.get(
-                            version=version,
-                            organization_id=self.project.organization_id,
-                        )
-                    except Release.DoesNotExist:
-                        release = Release.objects.create(
-                            version=version,
-                            organization_id=self.project.organization_id,
-                            **values
-                        )
-            release.add_project(self.project)
+            )
+            release.update(**values)
+
+        release.add_project(self.project)
 
         activity = Activity.objects.create(
             type=Activity.RELEASE,
diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 2e96c5576d..7e225ab31d 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -5,12 +5,10 @@ import re
 from django.db import IntegrityError, transaction
 from django.db.models.signals import post_save
 
-from sentry.app import locks
 from sentry.models import (
     Activity, Commit, Group, GroupCommitResolution, Release, TagValue
 )
 from sentry.tasks.clear_expired_resolutions import clear_expired_resolutions
-from sentry.utils.retries import TimedRetryPolicy
 
 _fixes_re = re.compile(r'\bFixes\s+([A-Za-z0-9_-]+-[A-Z0-9]+)\b', re.I)
 
@@ -22,35 +20,23 @@ def ensure_release_exists(instance, created, **kwargs):
     if instance.data and instance.data.get('release_id'):
         return
 
-    affected = Release.objects.filter(
-        organization_id=instance.project.organization_id,
-        version=instance.value,
-        projects=instance.project
-    ).update(date_added=instance.first_seen)
-    if not affected:
-        release = Release.objects.filter(
+    try:
+        with transaction.atomic():
+            release = Release.objects.create(
+                organization_id=instance.project.organization_id,
+                version=instance.value,
+                date_added=instance.first_seen,
+            )
+    except IntegrityError:
+        release = Release.objects.get(
             organization_id=instance.project.organization_id,
-            version=instance.value
-        ).first()
-        if release:
-            release.update(date_added=instance.first_seen)
-        else:
-            lock_key = Release.get_lock_key(instance.project.organization_id, instance.value)
-            lock = locks.get(lock_key, duration=5)
-            with TimedRetryPolicy(10)(lock.acquire):
-                try:
-                    release = Release.objects.get(
-                        organization_id=instance.project.organization_id,
-                        version=instance.value,
-                    )
-                except Release.DoesNotExist:
-                    release = Release.objects.create(
-                        organization_id=instance.project.organization_id,
-                        version=instance.value,
-                        date_added=instance.first_seen,
-                    )
-                    instance.update(data={'release_id': release.id})
-        release.add_project(instance.project)
+            version=instance.value,
+        )
+        release.update(date_added=instance.first_seen)
+    else:
+        instance.update(data={'release_id': release.id})
+
+    release.add_project(instance.project)
 
 
 def resolve_group_resolutions(instance, created, **kwargs):
