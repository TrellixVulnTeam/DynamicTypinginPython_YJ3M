commit 7a71f58bbbb8dd840c56f1c6a9fe7ac259fab62f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Dec 3 15:20:50 2018 -0800

    feat(ui-search): Add integrations to search (APP-707) (#10889)
    
    * add support to org plugins endpoint to list ALL plugins
    * adds integrations and legacy integrations into search

diff --git a/src/sentry/api/endpoints/organization_plugins.py b/src/sentry/api/endpoints/organization_plugins.py
index 8bb5511e91..be77627827 100644
--- a/src/sentry/api/endpoints/organization_plugins.py
+++ b/src/sentry/api/endpoints/organization_plugins.py
@@ -6,6 +6,7 @@ from sentry.plugins import plugins
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.api.serializers import serialize
 from sentry.api.serializers.models.organization_plugin import OrganizationPluginSerializer
+from sentry.api.serializers.models.plugin import PluginSerializer
 from sentry.models import ProjectOption
 
 
@@ -16,6 +17,10 @@ class OrganizationPluginsEndpoint(OrganizationEndpoint):
         ])
 
         if 'plugins' in request.GET:
+            if request.GET.get('plugins') == '_all':
+                return Response(serialize([p for p in plugins.all()],
+                                          request.user, PluginSerializer()))
+
             desired_plugins = set(request.GET.getlist('plugins'))
         else:
             desired_plugins = set(all_plugins.keys())
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 46019bca9e..1120df7fbd 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -17,15 +17,16 @@ class PluginSerializer(Serializer):
         from sentry.api.endpoints.project_releases_token import _get_webhook_url
         doc = ''
 
-        release_token = ProjectOption.objects.get_value(self.project, 'sentry:release-token')
-        if release_token is not None:
-            webhook_url = _get_webhook_url(self.project, obj.slug, release_token)
-
-            if hasattr(obj, 'get_release_doc_html'):
-                try:
-                    doc = obj.get_release_doc_html(webhook_url)
-                except NotImplementedError:
-                    pass
+        if self.project is not None:
+            release_token = ProjectOption.objects.get_value(self.project, 'sentry:release-token')
+            if release_token is not None:
+                webhook_url = _get_webhook_url(self.project, obj.slug, release_token)
+
+                if hasattr(obj, 'get_release_doc_html'):
+                    try:
+                        doc = obj.get_release_doc_html(webhook_url)
+                    except NotImplementedError:
+                        pass
 
         contexts = []
         if hasattr(obj, 'get_custom_contexts'):
diff --git a/src/sentry/static/sentry/app/components/search/searchResult.jsx b/src/sentry/static/sentry/app/components/search/searchResult.jsx
index 81945baebe..6046c64410 100644
--- a/src/sentry/static/sentry/app/components/search/searchResult.jsx
+++ b/src/sentry/static/sentry/app/components/search/searchResult.jsx
@@ -4,9 +4,11 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
+import IdBadge from 'app/components/idBadge';
 import InlineSvg from 'app/components/inlineSvg';
+import PluginIcon from 'app/plugins/components/pluginIcon';
 import SentryTypes from 'app/sentryTypes';
-import IdBadge from 'app/components/idBadge';
+import SettingsSearch from 'app/views/settings/components/settingsSearch';
 import highlightFuseMatches from 'app/utils/highlightFuseMatches';
 
 class SearchResult extends React.Component {
@@ -26,6 +28,8 @@ class SearchResult extends React.Component {
         'route',
         'issue',
         'event',
+        'plugin',
+        'integration',
       ]),
       /**
      * The type of result this is, for example:
@@ -40,6 +44,7 @@ class SearchResult extends React.Component {
         'field',
         'issue',
         'event',
+        'integration',
       ]),
       title: PropTypes.string,
       description: PropTypes.node,
@@ -97,11 +102,12 @@ class SearchResult extends React.Component {
 
   renderResultType() {
     let {item} = this.props;
-    let {resultType} = item;
+    let {resultType, model} = item;
 
     let isSettings = resultType === 'settings';
     let isField = resultType === 'field';
     let isRoute = resultType === 'route';
+    let isIntegration = resultType === 'integration';
 
     if (isSettings) {
       return <ResultTypeIcon src="icon-settings" />;
@@ -112,7 +118,11 @@ class SearchResult extends React.Component {
     }
 
     if (isRoute) {
-      return <ResultTypeIcon src="icon-location" />;
+      return <ResultTypeIcon src="icon-link" />;
+    }
+
+    if (isIntegration) {
+      return <StyledPluginIcon pluginId={model.key || model.id} />;
     }
 
     return null;
@@ -150,6 +160,15 @@ const ResultTypeIcon = styled(InlineSvg)`
   color: ${p => p.theme.offWhite};
   font-size: 1.2em;
   flex-shrink: 0;
+
+  /* stylelint-disable-next-line no-duplicate-selectors */
+  ${SettingsSearch} & {
+    color: inherit;
+  }
+`;
+
+const StyledPluginIcon = styled(PluginIcon)`
+  flex-shrink: 0;
 `;
 
 const Description = styled('div')`
diff --git a/src/sentry/static/sentry/app/components/search/searchResultWrapper.jsx b/src/sentry/static/sentry/app/components/search/searchResultWrapper.jsx
index 825fa4272d..46a8682949 100644
--- a/src/sentry/static/sentry/app/components/search/searchResultWrapper.jsx
+++ b/src/sentry/static/sentry/app/components/search/searchResultWrapper.jsx
@@ -3,6 +3,7 @@ import React from 'react';
 import styled from 'react-emotion';
 
 const SearchResultWrapper = styled(({highlighted, ...props}) => <div {...props} />)`
+  cursor: pointer;
   display: block;
   color: ${p => p.theme.gray5};
   padding: 10px;
diff --git a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
index ae7a3bce4e..583cf8a593 100644
--- a/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
+++ b/src/sentry/static/sentry/app/components/search/sources/apiSource.jsx
@@ -86,6 +86,34 @@ async function createMemberResults(membersPromise, orgId) {
   }));
 }
 
+async function createLegacyIntegrationResults(pluginsPromise, orgId) {
+  let plugins = (await pluginsPromise) || [];
+  return plugins.map(plugin => ({
+    title: `${plugin.name} (Legacy)`,
+    description: plugin.description,
+    model: plugin,
+    sourceType: 'plugin',
+    resultType: 'integration',
+    to: `/settings/${orgId}/:projectId/plugins/${plugin.id}/`,
+  }));
+}
+
+async function createIntegrationResults(integrationsPromise, orgId) {
+  let {providers} = (await integrationsPromise) || {};
+  return (
+    (providers &&
+      providers.map(provider => ({
+        title: provider.name,
+        description: provider.metadata.description,
+        model: provider,
+        sourceType: 'integration',
+        resultType: 'integration',
+        to: `/settings/${orgId}/integrations/`,
+      }))) ||
+    []
+  );
+}
+
 async function createShortIdLookupResult(shortIdLookupPromise) {
   let shortIdLookup = await shortIdLookupPromise;
   if (!shortIdLookup) return null;
@@ -186,6 +214,8 @@ class ApiSource extends React.Component {
         `/organizations/${orgId}/projects/`,
         `/organizations/${orgId}/teams/`,
         `/organizations/${orgId}/members/`,
+        `/organizations/${orgId}/plugins/?plugins=_all`,
+        `/organizations/${orgId}/config/integrations/`,
       ];
 
       directUrls = [
@@ -249,11 +279,18 @@ class ApiSource extends React.Component {
     //
     // This isn't particularly helpful in its current form because we still wait for all requests to finish before
     // updating state, but you could potentially optimize rendering direct results before all requests are finished.
-    let [organizations, projects, teams, members] = searchRequests;
+    let [organizations, projects, teams, members, plugins, integrations] = searchRequests;
     let [shortIdLookup, eventIdLookup] = directRequests;
 
     let [searchResults, directResults] = await Promise.all([
-      this.getSearchableResults([organizations, projects, teams, members]),
+      this.getSearchableResults([
+        organizations,
+        projects,
+        teams,
+        members,
+        plugins,
+        integrations,
+      ]),
       this.getDirectResults([shortIdLookup, eventIdLookup]),
     ]);
 
@@ -274,13 +311,15 @@ class ApiSource extends React.Component {
   async getSearchableResults(requests) {
     let {params, organization} = this.props;
     let orgId = (params && params.orgId) || (organization && organization.slug);
-    let [organizations, projects, teams, members] = requests;
+    let [organizations, projects, teams, members, plugins, integrations] = requests;
     let searchResults = flatten(
       await Promise.all([
         createOrganizationResults(organizations),
         createProjectResults(projects, orgId),
         createTeamResults(teams, orgId),
         createMemberResults(members, orgId),
+        createLegacyIntegrationResults(plugins, orgId),
+        createIntegrationResults(integrations, orgId),
       ])
     );
 
diff --git a/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx b/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
index 16fc088013..f6cfd3d9b2 100644
--- a/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/settingsSearch/index.jsx
@@ -43,7 +43,11 @@ class SettingsSearch extends React.Component {
   }
 }
 
-export default SettingsSearch;
+// This is so we can use this as a selector for emotion
+const StyledSettingsSearch = styled(SettingsSearch)``;
+
+export default StyledSettingsSearch;
+export {SettingsSearch};
 
 const SearchInputWrapper = styled.div`
   position: relative;
diff --git a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
index 00d3b499cb..9d9353f8f5 100644
--- a/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
+++ b/src/sentry/static/sentry/app/views/settings/organization/navigationConfiguration.jsx
@@ -67,7 +67,9 @@ const organizationNavigation = [
       {
         path: `${pathPrefix}/integrations/`,
         title: t('Integrations'),
-        description: t('Manage integrations for an organization'),
+        description: t(
+          'Manage organization-level integrations, including: Slack, Github, Bitbucket, Jira, and Azure DevOps'
+        ),
       },
       {
         path: `${pathPrefix}/developer-settings/`,
diff --git a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
index 38e379b22a..d6715e4b4d 100644
--- a/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
+++ b/tests/js/spec/components/__snapshots__/settingsLayout.spec.jsx.snap
@@ -21,7 +21,7 @@ exports[`SettingsLayout renders 1`] = `
             routes={Array []}
           />
         </Box>
-        <SettingsSearch
+        <StyledSettingsSearch
           routes={Array []}
         />
       </Flex>
diff --git a/tests/js/spec/components/modals/docsSearchModal.spec.jsx b/tests/js/spec/components/modals/docsSearchModal.spec.jsx
index 16d4ca2ef0..90d6708bf5 100644
--- a/tests/js/spec/components/modals/docsSearchModal.spec.jsx
+++ b/tests/js/spec/components/modals/docsSearchModal.spec.jsx
@@ -27,6 +27,17 @@ describe('Docs Search Modal', function() {
       query: 'foo',
       body: TestStubs.Members(),
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/plugins/?plugins=_all',
+      query: 'foo',
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/config/integrations/',
+      query: 'foo',
+      body: [],
+    });
 
     MockApiClient.addMockResponse({
       url: '/internal/health/',
diff --git a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
index d2bca0d286..5bfe870782 100644
--- a/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
+++ b/tests/js/spec/views/settings/components/settingsSearch/index.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import SettingsSearch from 'app/views/settings/components/settingsSearch';
+import {SettingsSearch} from 'app/views/settings/components/settingsSearch';
 import FormSearchStore from 'app/stores/formSearchStore';
 
 import {navigateTo} from 'app/actionCreators/navigation';
@@ -43,6 +43,17 @@ describe('SettingsSearch', function() {
       query: 'foo',
       body: TestStubs.Members(),
     });
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/plugins/?plugins=_all',
+      query: 'foo',
+      body: [],
+    });
+
+    MockApiClient.addMockResponse({
+      url: '/organizations/org-slug/config/integrations/',
+      query: 'foo',
+      body: [],
+    });
   });
 
   it('renders', async function() {
diff --git a/tests/sentry/api/endpoints/test_organization_plugins.py b/tests/sentry/api/endpoints/test_organization_plugins.py
index e8eede76a7..10568d417c 100644
--- a/tests/sentry/api/endpoints/test_organization_plugins.py
+++ b/tests/sentry/api/endpoints/test_organization_plugins.py
@@ -16,6 +16,30 @@ class OrganizationPluginsTest(APITestCase):
 
         self.login_as(user=self.user)
 
+    def test_exposes_all_plugins_available_no_enabled_state(self):
+        url = reverse(
+            'sentry-api-0-organization-plugins',
+            kwargs={'organization_slug': self.projectA.organization.slug}
+        )
+
+        url = u'{}?{}'.format(url, 'plugins=_all')
+
+        response = self.client.get(url)
+
+        assert response.status_code == 200, \
+            (response.status_code, response.content)
+
+        # should have these plugins:
+        # issuetrackingplugin2, webhooks, mail
+        # none of the plugins should have an 'enabled' key since these
+        # plugins are not bound by a project
+        plugins = [
+            p for p in
+            filter(lambda p: 'enabled' in p, response.data)
+        ]
+        assert len(plugins) == 0
+        assert len(response.data) > 0
+
     def test_exposes_plugins_across_all_org_projects(self):
         url = reverse(
             'sentry-api-0-organization-plugins',
