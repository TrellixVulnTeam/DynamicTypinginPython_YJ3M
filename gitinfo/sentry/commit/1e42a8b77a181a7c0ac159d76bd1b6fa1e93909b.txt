commit 1e42a8b77a181a7c0ac159d76bd1b6fa1e93909b
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Sep 30 14:34:41 2015 -0700

    Editing search input box also edits sidebar tag filters

diff --git a/src/sentry/static/sentry/app/views/stream.jsx b/src/sentry/static/sentry/app/views/stream.jsx
index a5c6f54c1f..5ee1152394 100644
--- a/src/sentry/static/sentry/app/views/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream.jsx
@@ -19,7 +19,6 @@ import StreamTagStore from "../stores/streamTagStore";
 import StreamFilters from './stream/filters';
 import StreamSidebar from "./stream/sidebar";
 import utils from "../utils";
-import {queryToObj} from "../utils/stream";
 
 
 var Stream = React.createClass({
@@ -391,10 +390,8 @@ var Stream = React.createClass({
   render() {
     let router = this.context.router;
     let params = router.getCurrentParams();
-    let queryObj = queryToObj(this.state.query);
 
     let classes = ['stream-row'];
-
     if (this.state.isSidebarVisible)
       classes.push('show-sidebar');
 
@@ -429,7 +426,7 @@ var Stream = React.createClass({
           {this.renderStreamBody()}
           <Pagination pageLinks={this.state.pageLinks} onPage={this.onPage} />
         </div>
-        <StreamSidebar tags={this.state.tags} initialQuery={queryObj} onQueryChange={this.onSearch}/>
+        <StreamSidebar tags={this.state.tags} query={this.state.query} onQueryChange={this.onSearch}/>
       </div>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/stream/sidebar.jsx b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
index 91461fbdcf..9db397b573 100644
--- a/src/sentry/static/sentry/app/views/stream/sidebar.jsx
+++ b/src/sentry/static/sentry/app/views/stream/sidebar.jsx
@@ -1,6 +1,8 @@
 import React from "react";
 import _ from "underscore";
 import StreamTagFilter from "./tagFilter";
+import {queryToObj} from "../../utils/stream";
+
 
 var StreamSidebar = React.createClass({
   contextTypes: {
@@ -16,19 +18,34 @@ var StreamSidebar = React.createClass({
   getDefaultProps() {
     return {
       tags: {},
-      onQueryChange: function () {},
-      initialQuery: {}
+      query: '',
+      onQueryChange: function () {}
     };
   },
 
   getInitialState() {
+    let queryObj = queryToObj(this.props.query);
     return {
-      currentQuery: this.props.initialQuery
+      queryObj: queryObj,
+      textFilter: queryObj.__text
     };
   },
 
+  componentWillReceiveProps(nextProps) {
+    // query was updated by another source (e.g. sidebar filters)
+    let query = this.getQueryStr();
+
+    if (!_.isEqual(nextProps.query, query)) {
+      let queryObj = queryToObj(nextProps.query);
+      this.setState({
+        queryObj: queryObj,
+        textFilter: queryObj.__text
+      });
+    }
+  },
+
   getQueryStr() {
-    let tags = _.omit(this.state.currentQuery, '__text');
+    let tags = _.omit(this.state.queryObj, '__text');
 
     return _.map(tags, (value, tagKey) => {
         if (value.indexOf(' ') > -1)
@@ -36,31 +53,35 @@ var StreamSidebar = React.createClass({
 
         return `${tagKey}:${value}`;
       })
-      .concat(this.state.currentQuery.__text)
+      .concat(this.state.queryObj.__text)
       .join(' ');
   },
 
   onSelectTag(tag, value) {
-    let newQuery = {...this.state.currentQuery};
+    let newQuery = {...this.state.queryObj};
     if (value)
       newQuery[tag.key] = value;
     else
       delete newQuery[tag.key];
 
     this.setState({
-      currentQuery: newQuery,
+      queryObj: newQuery,
     }, this.onQueryChange);
   },
 
   onTextChange: function (evt) {
     let text = evt.target.value;
 
+    this.setState({
+      textFilter: text
+    });
+
     this.debouncedTextChange(text);
   },
 
   debouncedTextChange: _.debounce(function(text) {
     this.setState({
-      currentQuery: {...this.state.currentQuery, __text:text}
+      queryObj: {...this.state.queryObj, __text:text}
     }, this.onQueryChange);
   }, 300),
 
@@ -78,7 +99,7 @@ var StreamSidebar = React.createClass({
             className="form-control"
             placeholder="Search title and culprit text body"
             onChange={this.onTextChange}
-            defaultValue={this.props.initialQuery.__text}
+            value={this.state.textFilter}
           />
           <hr/>
         </div>
@@ -86,7 +107,7 @@ var StreamSidebar = React.createClass({
         {_.map(this.props.tags, (tag) => {
           return (
             <StreamTagFilter
-              initialValue={this.state.currentQuery[tag.key]}
+              value={this.state.queryObj[tag.key]}
               key={tag.key}
               tag={tag}
               onSelect={this.onSelectTag}
diff --git a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
index 2bdbea42b7..f6298a8e88 100644
--- a/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
+++ b/src/sentry/static/sentry/app/views/stream/tagFilter.jsx
@@ -13,7 +13,7 @@ var StreamTagFilter = React.createClass({
   getDefaultProps() {
     return {
       tag: {},
-      initialValue: null
+      value: null
     };
   },
 
@@ -21,7 +21,7 @@ var StreamTagFilter = React.createClass({
     return {
       query: '',
       loading: false,
-      selectedValue: this.props.initialValue,
+      value: this.props.value,
     };
   },
 
@@ -34,6 +34,17 @@ var StreamTagFilter = React.createClass({
     }
   },
 
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.value !== this.state.value) {
+      this.setState({
+        value: nextProps.value
+      }, () => {
+        let select = this.refs.select.getDOMNode();
+        $(select).select2('val', this.state.value);
+      });
+    }
+  },
+
   componentDidMount() {
     let select = this.refs.select.getDOMNode();
 
@@ -45,7 +56,7 @@ var StreamTagFilter = React.createClass({
     if (!this.props.tag.predefined) {
       Object.assign(selectOpts, {
         initSelection: (element, callback) => {
-          callback(StreamTagFilter.tagValueToSelect2Format(this.props.initialValue));
+          callback(StreamTagFilter.tagValueToSelect2Format(this.props.value));
         },
         ajax: {
           url: this.getTagValuesAPIEndpoint(),
@@ -85,7 +96,7 @@ var StreamTagFilter = React.createClass({
   onSelectValue(evt) {
     let val = evt.target.value;
     this.setState({
-      selectedValue: val
+      value: val
     });
 
     this.props.onSelect && this.props.onSelect(this.props.tag, val);
@@ -99,7 +110,7 @@ var StreamTagFilter = React.createClass({
 
         {this.props.tag.predefined ?
 
-          <select ref="select" value={this.props.initialValue}>
+          <select ref="select" value={this.props.value}>
             <option></option>
             {this.props.tag.values.map((val) => {
               return (
@@ -107,7 +118,7 @@ var StreamTagFilter = React.createClass({
               );
             })}
           </select> :
-          <input type="hidden" ref="select" value={this.props.initialValue}/>
+          <input type="hidden" ref="select" value={this.props.value}/>
         }
 
       </div>
