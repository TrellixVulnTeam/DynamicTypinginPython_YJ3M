commit dc2fc4f8556fdaf01d90fc7a9b43cad50b03a0e9
Author: Katie Lundsgaard <katie@getsentry.com>
Date:   Fri Jan 27 13:34:30 2017 -0800

    Don't be repetitive

diff --git a/src/sentry/api/serializers/models/commit.py b/src/sentry/api/serializers/models/commit.py
index caae0bade0..6511a40879 100644
--- a/src/sentry/api/serializers/models/commit.py
+++ b/src/sentry/api/serializers/models/commit.py
@@ -1,40 +1,14 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, register, serialize
-from sentry.db.models.query import in_iexact
-from sentry.models import Commit, Repository, UserEmail, User
+from sentry.models import Commit, Repository
+from sentry.api.serializers.models.release import get_users_for_commits
 
 
 @register(Commit)
 class CommitSerializer(Serializer):
     def get_attrs(self, item_list, user):
-
-        authors = set(c.author for c in item_list if c.author is not None)
-
-        user_emails = UserEmail.objects.filter(
-            in_iexact('email', [a.email for a in authors]),
-        ).order_by('id')
-        org_ids = set(item.organization_id for item in item_list)
-        assert len(org_ids) == 1
-        org_id = org_ids.pop()
-        users = User.objects.filter(
-            id__in=[ue.user_id for ue in user_emails],
-            sentry_orgmember_set__organization_id=org_id
-        )
-        users_by_id = dict((user.id, serialize(user)) for user in users)
-        users_by_email = {}
-        for email in user_emails:
-            if email.email in users_by_email:
-                pass
-            user = users_by_id.get(email.user_id)
-            users_by_email[email.email] = user
-
-        author_objs = {}
-        for author in authors:
-            author_objs[author.email] = users_by_email.get(author.email, {
-                "name": author.name,
-                "email": author.email
-            })
+        author_objs = get_users_for_commits(item_list)
 
         repositories = list(Repository.objects.filter(id__in=[c.repository_id for c in item_list]))
         repository_objs = {}
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index 5bfed229bb..7131644d5e 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -12,6 +12,47 @@ from sentry.db.models.query import in_iexact
 from sentry.models import Release, ReleaseCommit, ReleaseProject, TagValue, User, UserEmail
 
 
+def get_users_for_commits(item_list):
+
+    authors = set(c.author for c in item_list if c.author is not None)
+    if not len(authors):
+        return {}
+
+    # Filter users based on the emails provided in the commits
+    user_emails = UserEmail.objects.filter(
+        in_iexact('email', [a.email for a in authors]),
+    ).order_by('id')
+
+    org_ids = set(item.organization_id for item in item_list)
+    assert len(org_ids) == 1
+    org_id = org_ids.pop()
+
+    # Filter users belonging to the organization associated with
+    # the release
+    users = User.objects.filter(
+        id__in=[ue.user_id for ue in user_emails],
+        sentry_orgmember_set__organization_id=org_id
+    )
+    users_by_id = dict((user.id, serialize(user)) for user in users)
+
+    # Figure out which email address matches to a user
+    users_by_email = {}
+    for email in user_emails:
+        if email.email in users_by_email:
+            pass
+        user = users_by_id.get(email.user_id)
+        users_by_email[email.email] = user
+
+    author_objs = {}
+    for author in authors:
+        author_objs[author.email] = users_by_email.get(author.email, {
+            "name": author.name,
+            "email": author.email
+        })
+
+    return author_objs
+
+
 @register(Release)
 class ReleaseSerializer(Serializer):
     def _get_users_for_commits(self, release_commits, org_id):
