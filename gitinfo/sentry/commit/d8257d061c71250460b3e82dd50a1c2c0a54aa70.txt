commit d8257d061c71250460b3e82dd50a1c2c0a54aa70
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 10 11:22:56 2014 -0800

    Improve migrations
    
    - Report progress
    - Run with autocommit
    - Slightly more efficient updates
    - Greatly improve project slug migration

diff --git a/setup.py b/setup.py
index 7aef202625..5e992c69c9 100755
--- a/setup.py
+++ b/setup.py
@@ -87,6 +87,7 @@ install_requires = [
     'ipaddr>=2.1.11,<2.2.0',
     'logan>=0.5.8.2,<0.6.0',
     'nydus>=0.10.7,<0.11.0',
+    'progressbar>=2.2,<2.4',
     'Pygments>=1.6.0,<1.7.0',
     'python-dateutil>=1.5.0,<2.0.0',
     'python-memcached>=1.53,<2.0.0',
diff --git a/src/sentry/management/commands/repair.py b/src/sentry/management/commands/repair.py
index b13b68f52f..718fdba451 100644
--- a/src/sentry/management/commands/repair.py
+++ b/src/sentry/management/commands/repair.py
@@ -14,34 +14,49 @@ class Command(BaseCommand):
     help = 'Attempts to repair any invalid data within Sentry'
 
     def handle(self, **options):
+        from django.db.models import Q
         from sentry.constants import RESERVED_ORGANIZATION_SLUGS
         from sentry.models import Organization, Project, Team, ProjectKey
         from sentry.db.models import update
         from sentry.db.models.utils import slugify_instance
+        from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
 
-        print("Creating missing slugs for organizations")
-        for org in Organization.objects.filter(slug__isnull=True):
+        print("Correcting data on organizations")
+        queryset = Organization.objects.filter(
+            slug__isnull=True,
+        )
+        for org in RangeQuerySetWrapperWithProgressBar(queryset):
             slugify_instance(org, org.name, RESERVED_ORGANIZATION_SLUGS)
-            print('Assigning slug %r for %s' % (org.slug, org.id))
             org.save()
 
         # Create teams for any projects that are missing them
-        print("Creating missing teams on projects")
-        for project in Project.objects.filter(team__isnull=True):
-            # TODO(dcramer): this needs owners
-            team = Team(
-                name=project.name,
-                owner=project.owner,
-            )
-            slugify_instance(team, team.name, RESERVED_ORGANIZATION_SLUGS)
-            team.save()
-
-            update(project, team=team)
-            print("* Created team %s for %s" % (team, project))
+        print("Correcting data on projects")
+        queryset = Project.objects.filter(
+            Q(team__isnull=True) | Q(organization__isnull=True),
+        ).select_related('owner')
+        for project in RangeQuerySetWrapperWithProgressBar(queryset):
+            if not project.team:
+                organization = Organization(
+                    name=project.name,
+                    owner=project.owner,
+                )
+                slugify_instance(organization, organization.name, RESERVED_ORGANIZATION_SLUGS)
+                organization.save()
+
+                team = Team(
+                    name=project.name,
+                    owner=project.owner,
+                    oprganization=organization,
+                )
+                slugify_instance(team, team.name, RESERVED_ORGANIZATION_SLUGS)
+                team.save()
+
+            update(project, organization=team.organization, team=team)
 
         # Create missing project keys
         print("Creating missing project keys")
-        for team in Team.objects.all():
+        queryset = Team.objects.all()
+        for team in RangeQuerySetWrapperWithProgressBar(queryset):
             for member in team.member_set.select_related('user'):
                 for project in team.project_set.all():
                     try:
@@ -51,6 +66,3 @@ class Command(BaseCommand):
                         )[1]
                     except ProjectKey.MultipleObjectsReturned:
                         pass
-                    else:
-                        if created:
-                            print("* Created key for %s on %s" % (member.user.username, project))
diff --git a/src/sentry/migrations/0132_add_default_orgs.py b/src/sentry/migrations/0132_add_default_orgs.py
index 0cd8f2eadf..c0eac9f43e 100644
--- a/src/sentry/migrations/0132_add_default_orgs.py
+++ b/src/sentry/migrations/0132_add_default_orgs.py
@@ -2,27 +2,30 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models
+from django.db import models, transaction
 
 class Migration(DataMigration):
 
+    @transaction.autocommit
     def forwards(self, orm):
-        from sentry.utils.query import RangeQuerySetWrapper
+        from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
 
         Organization = orm['sentry.Organization']
         Team = orm['sentry.Team']
 
+        queryset = Team.objects.filter(
+            organization__isnull=True,
+        )
+
         user_orgs = {}
-        team_list = Team.objects.select_related('owner')
-        for team in RangeQuerySetWrapper(team_list):
+        for team in RangeQuerySetWrapperWithProgressBar(queryset):
             if team.owner not in user_orgs:
-                user_orgs[team.owner] = org = Organization.objects.create(
+                user_orgs[team.owner_id] = org = Organization.objects.create(
                     name=team.name.strip() or 'Default',
-                    owner=team.owner,
+                    owner_id=team.owner_id,
                 )
-                print 'Added organization %s (%s)' % (org.id, org.name)
 
-            team.organization = user_orgs[team.owner]
+            team.organization = user_orgs[team.owner_id]
             team.save()
 
     def backwards(self, orm):
diff --git a/src/sentry/migrations/0133_add_org_members.py b/src/sentry/migrations/0133_add_org_members.py
index e0affe64f0..fb5b3f4c31 100644
--- a/src/sentry/migrations/0133_add_org_members.py
+++ b/src/sentry/migrations/0133_add_org_members.py
@@ -2,30 +2,27 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models
+from django.db import models, transaction
 
 class Migration(DataMigration):
 
+    @transaction.autocommit
     def forwards(self, orm):
-        from sentry.utils.query import RangeQuerySetWrapper
+        from sentry.db.models import create_or_update
+        from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
 
         OrganizationMember = orm['sentry.OrganizationMember']
         Team = orm['sentry.Team']
 
         queryset = Team.objects.select_related('organization', 'owner')
 
-        for team in RangeQuerySetWrapper(queryset):
-            om, created = OrganizationMember.objects.get_or_create(
+        for team in RangeQuerySetWrapperWithProgressBar(queryset):
+            create_or_update(
+                OrganizationMember,
                 organization=team.organization,
                 user=team.owner,
                 defaults={'type': 0},  # OWNER
             )
-            if created:
-                print 'Added %s to %s (%s)' % (
-                    team.owner.email or team.owner.username,
-                    team.organization.id,
-                    team.organization.name,
-                )
 
     def backwards(self, orm):
         pass
diff --git a/src/sentry/migrations/0138_migrate_team_members.py b/src/sentry/migrations/0138_migrate_team_members.py
index 365c4c59cd..5873dea5fe 100644
--- a/src/sentry/migrations/0138_migrate_team_members.py
+++ b/src/sentry/migrations/0138_migrate_team_members.py
@@ -3,12 +3,15 @@ import datetime
 from collections import defaultdict
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models
+from django.db import models, transaction
 
 class Migration(DataMigration):
 
+    @transaction.autocommit
     def forwards(self, orm):
-        from sentry.utils.query import RangeQuerySetWrapper
+        from sentry.utils.query import (
+            RangeQuerySetWrapper, RangeQuerySetWrapperWithProgressBar
+        )
 
         Organization = orm['sentry.Organization']
         OrganizationMember = orm['sentry.OrganizationMember']
@@ -22,7 +25,7 @@ class Migration(DataMigration):
             for team in Team.objects.filter(organization=org):
                 teams_by_org[org].append(team)
 
-        for org, team_list in teams_by_org.iteritems():
+        for org, team_list in WithProgresBar(teams_by_org.items(), caption='Organizations'):
             team_member_qs = TeamMember.objects.filter(
                 team__organization=org
             ).select_related('user', 'team')
diff --git a/src/sentry/migrations/0141_fill_org_slugs.py b/src/sentry/migrations/0141_fill_org_slugs.py
index c3953bd1ef..daa2261427 100644
--- a/src/sentry/migrations/0141_fill_org_slugs.py
+++ b/src/sentry/migrations/0141_fill_org_slugs.py
@@ -2,21 +2,21 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models
+from django.db import models, transaction
 
 class Migration(DataMigration):
 
+    @transaction.autocommit
     def forwards(self, orm):
         from sentry.constants import RESERVED_ORGANIZATION_SLUGS
         from sentry.db.models.utils import slugify_instance
-        from sentry.utils.query import RangeQuerySetWrapper
+        from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
 
         Organization = orm['sentry.Organization']
 
         queryset = Organization.objects.filter(slug__isnull=True)
 
-        for org in RangeQuerySetWrapper(queryset):
-            print 'Adding slug to organization %s (%s)' % (org.id, org.name)
+        for org in RangeQuerySetWrapperWithProgressBar(queryset):
             slugify_instance(org, org.name, RESERVED_ORGANIZATION_SLUGS)
             org.save()
 
diff --git a/src/sentry/migrations/0143_fill_project_orgs.py b/src/sentry/migrations/0143_fill_project_orgs.py
index 5e11898208..fce2e6fb4c 100644
--- a/src/sentry/migrations/0143_fill_project_orgs.py
+++ b/src/sentry/migrations/0143_fill_project_orgs.py
@@ -2,14 +2,15 @@
 import datetime
 from south.db import db
 from south.v2 import DataMigration
-from django.db import models
+from django.db import models, transaction
 
 class Migration(DataMigration):
 
+    @transaction.autocommit
     def forwards(self, orm):
         from sentry.constants import RESERVED_ORGANIZATION_SLUGS
         from sentry.db.models.utils import slugify_instance
-        from sentry.utils.query import RangeQuerySetWrapper
+        from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
 
         Project = orm['sentry.Project']
 
@@ -17,14 +18,21 @@ class Migration(DataMigration):
             organization__isnull=True
         ).select_related('team', 'team__organization')
 
-        for project in RangeQuerySetWrapper(queryset):
-            print 'Adding organization to project %s (%s)' % (project.id, project.name)
+        for project in RangeQuerySetWrapperWithProgressBar(queryset):
             project.organization = project.team.organization
-            # we also need to update the slug here based on the new constraints
-            slugify_instance(project, project.name, (
-                models.Q(organization=project.organization) | models.Q(team=project.team),
-            ))
-            project.save()
+
+            sid = transaction.savepoint()
+            try:
+                project.save()
+            except Exception:
+                transaction.savepoint_rollback(sid)
+                # we also need to update the slug here based on the new constraints
+                slugify_instance(project, project.name, (
+                    models.Q(organization=project.organization) | models.Q(team=project.team),
+                ))
+                project.save()
+            else:
+                transaction.savepoint_commit(sid)
 
     def backwards(self, orm):
         pass
diff --git a/src/sentry/utils/query.py b/src/sentry/utils/query.py
index f1a2905d82..0c48db3ef1 100644
--- a/src/sentry/utils/query.py
+++ b/src/sentry/utils/query.py
@@ -7,6 +7,8 @@ sentry.utils.query
 """
 from __future__ import absolute_import
 
+import progressbar
+
 from django.db import transaction, IntegrityError
 from django.db.models import ForeignKey
 from django.db.models.deletion import Collector
@@ -105,6 +107,39 @@ class RangeQuerySetWrapper(object):
             has_results = num > start
 
 
+class RangeQuerySetWrapperWithProgressBar(RangeQuerySetWrapper):
+    def __iter__(self):
+        total_count = self.queryset.count()
+        iterator = super(RangeQuerySetWrapperWithProgressBar, self).__iter__()
+        label = self.queryset.model._meta.verbose_name_plural.title()
+        return iter(WithProgressBar(iterator, total_count, label))
+
+
+class WithProgressBar(object):
+    def __init__(self, iterator, count=None, caption=None):
+        if count is None and hasattr(iterator, '__len__'):
+            count = len(iterator)
+        self.iterator = iterator
+        self.count = count
+        self.caption = unicode(caption or u'Progress')
+
+    def __iter__(self):
+        widgets = [
+            '%s: ' % (self.caption,),
+            progressbar.Percentage(),
+            ' ',
+            progressbar.Bar(),
+            ' ',
+            progressbar.ETA(),
+        ]
+        pbar = progressbar.ProgressBar(widgets=widgets, maxval=self.count)
+        pbar.start()
+        for idx, item in enumerate(self.iterator):
+            yield item
+            pbar.update(idx)
+        pbar.finish()
+
+
 class EverythingCollector(Collector):
     """
     More or less identical to the default Django collector except we always
