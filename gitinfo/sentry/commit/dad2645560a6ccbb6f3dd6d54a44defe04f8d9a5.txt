commit dad2645560a6ccbb6f3dd6d54a44defe04f8d9a5
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Fri Nov 2 09:09:48 2018 -0700

    feat(ui): Change "MultipleProjectSelector" to use "ProjectSelector" (#10193)
    
    * Split "ProjectSelector" into two components
    * Also update Discover to use new MultipleProjectSelector
    * add fancy checkbox

diff --git a/docs-ui/components/checkboxFancy.stories.js b/docs-ui/components/checkboxFancy.stories.js
new file mode 100644
index 0000000000..c6c0009d04
--- /dev/null
+++ b/docs-ui/components/checkboxFancy.stories.js
@@ -0,0 +1,27 @@
+import React from 'react';
+import {storiesOf} from '@storybook/react';
+import {withInfo} from '@storybook/addon-info';
+import {number, boolean} from '@storybook/addon-knobs';
+import styled from 'react-emotion';
+import {Flex} from 'grid-emotion';
+
+import CheckboxFancy from 'app/components/checkboxFancy';
+
+storiesOf('Style|Icons', module).add(
+  'CheckboxFancy',
+  withInfo('A fancy looking checkbox')(() => {
+    return (
+      <Container>
+        <CheckboxFancy
+          size={`${number('Size', 100)}px`}
+          checked={boolean('Checked', true)}
+        />
+      </Container>
+    );
+  })
+);
+
+const Container = styled(Flex)`
+  flex-direction: column;
+  padding: 20px;
+`;
diff --git a/src/sentry/static/sentry/app/components/autoComplete.jsx b/src/sentry/static/sentry/app/components/autoComplete.jsx
index 6d47398c68..86eea2e8a8 100644
--- a/src/sentry/static/sentry/app/components/autoComplete.jsx
+++ b/src/sentry/static/sentry/app/components/autoComplete.jsx
@@ -66,7 +66,13 @@ class AutoComplete extends React.Component {
     this.items = new Map();
   }
 
-  componentWillReceiveProps() {
+  componentWillReceiveProps(nextProps, nextState) {
+    // If we do NOT want to close on select, then we should not reset highlight state
+    // when we select an item (when we select an item, `this.state.selectedItem` changes)
+    if (!nextProps.closeOnSelect && this.state.selectedItem !== nextState.selectedItem) {
+      return;
+    }
+
     this.resetHighlightState();
   }
 
diff --git a/src/sentry/static/sentry/app/components/checkboxFancy.jsx b/src/sentry/static/sentry/app/components/checkboxFancy.jsx
new file mode 100644
index 0000000000..2445d89e58
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/checkboxFancy.jsx
@@ -0,0 +1,53 @@
+import React from 'react';
+import styled from 'react-emotion';
+import PropTypes from 'prop-types';
+import InlineSvg from 'app/components/inlineSvg';
+
+class CheckboxFancy extends React.Component {
+  static propTypes = {
+    checked: PropTypes.bool,
+    size: PropTypes.string,
+  };
+
+  static defaultProps = {
+    checked: false,
+    size: '18px',
+  };
+
+  render() {
+    const {className, checked, size, ...props} = this.props;
+
+    return (
+      <CheckboxContainer
+        role="checkbox"
+        aria-checked={checked}
+        className={className}
+        checked={checked}
+        size={size}
+        {...props}
+      >
+        {checked && <Check src="icon-checkmark-sm" />}
+      </CheckboxContainer>
+    );
+  }
+}
+
+const CheckboxContainer = styled('div')`
+  width: ${p => p.size};
+  height: ${p => p.size};
+  border-radius: ${p => p.size};
+  background: ${p => (p.checked ? p.theme.purple : null)};
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.01) inset;
+  border: 1px solid ${p => (p.checked ? p.theme.purple : p.theme.gray1)};
+`;
+
+const Check = styled(InlineSvg)`
+  width: 70%;
+  height: 70%;
+  color: #fff;
+`;
+
+export default CheckboxFancy;
diff --git a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
index 9f01bbb1b4..543a22aea0 100644
--- a/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownAutoCompleteMenu.jsx
@@ -59,6 +59,11 @@ class DropdownAutoCompleteMenu extends React.Component {
      */
     onOpen: PropTypes.func,
 
+    /**
+     * Callback for when dropdown menu closes
+     */
+    onClose: PropTypes.func,
+
     /**
      * Message to display when there are no items initially
      */
@@ -111,7 +116,7 @@ class DropdownAutoCompleteMenu extends React.Component {
      */
     menuWithArrow: PropTypes.bool,
 
-    menuFooter: PropTypes.node,
+    menuFooter: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
     menuHeader: PropTypes.node,
 
     /**
@@ -119,6 +124,11 @@ class DropdownAutoCompleteMenu extends React.Component {
      */
     menuProps: PropTypes.object,
 
+    /**
+     * for passing simple styles to the root container
+     */
+    rootClassName: PropTypes.string,
+
     /**
      * Props to pass to input/filter component
      */
@@ -244,6 +254,7 @@ class DropdownAutoCompleteMenu extends React.Component {
       onSelect,
       onChange,
       onOpen,
+      onClose,
       children,
       items,
       menuProps,
@@ -254,6 +265,8 @@ class DropdownAutoCompleteMenu extends React.Component {
       emptyMessage,
       noResultsMessage,
       style,
+      rootClassName,
+      className,
       menuHeader,
       menuFooter,
       menuWithArrow,
@@ -271,6 +284,7 @@ class DropdownAutoCompleteMenu extends React.Component {
         onSelect={onSelect}
         inputIsActor={false}
         onOpen={onOpen}
+        onClose={onClose}
         {...props}
       >
         {({
@@ -303,8 +317,11 @@ class DropdownAutoCompleteMenu extends React.Component {
           // emptyHidesInput is set to true.
           let showInput = hasItems || !emptyHidesInput;
 
+          let renderedFooter =
+            typeof menuFooter === 'function' ? menuFooter({actions}) : menuFooter;
+
           return (
-            <AutoCompleteRoot {...getRootProps()}>
+            <AutoCompleteRoot {...getRootProps()} className={rootClassName}>
               {children({
                 getActorProps,
                 actions,
@@ -314,6 +331,7 @@ class DropdownAutoCompleteMenu extends React.Component {
 
               {isOpen && (
                 <StyledMenu
+                  className={className}
                   {...getMenuProps({
                     ...menuProps,
                     style,
@@ -362,7 +380,9 @@ class DropdownAutoCompleteMenu extends React.Component {
                         })}
                     </StyledItemList>
 
-                    {menuFooter && <LabelWithPadding>{menuFooter}</LabelWithPadding>}
+                    {renderedFooter && (
+                      <LabelWithPadding>{renderedFooter}</LabelWithPadding>
+                    )}
                   </div>
                 </StyledMenu>
               )}
diff --git a/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
index 317431f23e..ddc18ad0fd 100644
--- a/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/baseBadge.jsx
@@ -8,7 +8,7 @@ import space from 'app/styles/space';
 import overflowEllipsis from 'app/styles/overflowEllipsis';
 import SentryTypes from 'app/sentryTypes';
 
-class BaseBadge extends React.Component {
+class BaseBadge extends React.PureComponent {
   static propTypes = {
     team: SentryTypes.Team,
     organization: SentryTypes.Organization,
diff --git a/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx b/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
index 34b92b7c07..8a59665b04 100644
--- a/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
+++ b/src/sentry/static/sentry/app/components/idBadge/projectBadge.jsx
@@ -5,7 +5,7 @@ import BaseBadge from 'app/components/idBadge/baseBadge';
 import SentryTypes from 'app/sentryTypes';
 import BadgeDisplayName from 'app/components/idBadge/badgeDisplayName';
 
-export default class ProjectBadge extends React.Component {
+export default class ProjectBadge extends React.PureComponent {
   static propTypes = {
     ...BaseBadge.propTypes,
     project: SentryTypes.Project.isRequired,
diff --git a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
index 4728680707..27b3039e82 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerItem.jsx
@@ -1,48 +1,123 @@
 import React from 'react';
 import PropTypes from 'prop-types';
 import styled from 'react-emotion';
-import {Flex} from 'grid-emotion';
+import InlineSvg from 'app/components/inlineSvg';
+import space from 'app/styles/space';
+import overflowEllipsis from 'app/styles/overflowEllipsis';
 
 class HeaderItem extends React.Component {
   static propTypes = {
-    label: PropTypes.node,
+    allowClear: PropTypes.bool,
+    icon: PropTypes.element,
+    onClear: PropTypes.func,
+    onSubmit: PropTypes.func,
+    hasChanges: PropTypes.bool,
+    hasSelected: PropTypes.bool,
+    isOpen: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    allowClear: true,
+  };
+
+  handleClear = e => {
+    e.stopPropagation();
+    this.props.onClear();
+  };
+
+  handleChevronClick = e => {
+    if (!this.props.hasChanges) {
+      return;
+    }
 
-    /**
-     * className for <Label> component
-     */
-    labelClassName: PropTypes.string,
+    e.stopPropagation();
+    this.props.onSubmit();
   };
 
   render() {
-    const {className, labelClassName, label, children} = this.props;
+    const {
+      className,
+      children,
+      isOpen,
+      hasSelected,
+      hasChanges,
+      allowClear,
+      icon,
+      onClear, // eslint-disable-line no-unused-vars
+      onSubmit, // eslint-disable-line no-unused-vars
+      ...props
+    } = this.props;
 
     return (
-      <StyledHeaderItem className={className}>
-        <Label className={labelClassName}>
-          {label}
-        </Label>
-        {children}
+      <StyledHeaderItem
+        className={className}
+        isOpen={isOpen}
+        hasSelected={hasSelected}
+        {...props}
+      >
+        <IconContainer hasSelected={hasSelected}>{icon}</IconContainer>
+        <Content>{children}</Content>
+        {hasSelected &&
+          allowClear && <StyledClose src="icon-close" onClick={this.handleClear} />}
+        <StyledChevron
+          isOpen={isOpen}
+          hasChanges={hasChanges}
+          onClick={this.handleChevronClick}
+        >
+          <InlineSvg src="icon-chevron-down" />
+        </StyledChevron>
       </StyledHeaderItem>
     );
   }
 }
 
-export default HeaderItem;
+const StyledHeaderItem = styled('div')`
+  display: flex;
+  padding: 0 ${space(3)};
+  align-items: center;
+  cursor: pointer;
+  color: ${p => (p.isOpen || p.hasSelected ? p.theme.gray4 : p.theme.gray2)};
+  transition: 0.1s color;
+  user-select: none;
+`;
 
-const StyledHeaderItem = styled(props => (
-  <Flex direction="column" justify="center" {...props} />
-))`
-  .dropdown-actor-title {
-    font-size: 15px;
-    height: auto;
-    color: ${p => p.theme.button.default.colorActive};
-  }
+const Content = styled('div')`
+  flex: 1;
+  ${overflowEllipsis};
+`;
+
+const IconContainer = styled('span')`
+  color: ${p => (p.hasSelected ? p.theme.blue : null)};
+  margin-right: ${space(1.5)};
 `;
 
-const Label = styled('label')`
-  font-weight: 400;
-  font-size: 12px;
-  color: ${p => p.theme.gray3};
-  height: 14px;
+const StyledClose = styled(InlineSvg)`
+  color: ${p => p.theme.gray2};
+  height: 10px;
+  width: 10px;
+  margin-right: ${p => space(1)};
+  stroke-width: 1.5;
+`;
 
+const StyledChevron = styled('div')`
+  transform: rotate(${p => (p.isOpen ? '180deg' : '0deg')});
+  transition: 0.1s all;
+  width: 16px;
+  height: 16px;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  ${p =>
+    p.hasChanges
+      ? `
+    background: ${p.theme.purple};
+    border-radius: 2em;
+    width: 20px;
+    height: 20px;
+    color: #fff;
+    transform: rotate(270deg);
+  `
+      : ''};
 `;
+
+export default React.forwardRef((props, ref) => <HeaderItem {...props} innerRef={ref} />);
diff --git a/src/sentry/static/sentry/app/components/organizations/headerSeparator.jsx b/src/sentry/static/sentry/app/components/organizations/headerSeparator.jsx
index 5290dea1e4..937c8d8334 100644
--- a/src/sentry/static/sentry/app/components/organizations/headerSeparator.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/headerSeparator.jsx
@@ -1,10 +1,12 @@
-import styled from 'react-emotion';
 import {Box} from 'grid-emotion';
+import styled from 'react-emotion';
+
+import space from 'app/styles/space';
 
 const HeaderSeparator = styled(Box)`
   width: 1px;
   background-color: ${p => p.theme.borderLight};
-  margin: 4px 16px;
+  margin: ${space(0.5)} 0;
 `;
 
 export default HeaderSeparator;
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
index 80988fbd8a..ca73f8fe78 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleEnvironmentSelector.jsx
@@ -1,17 +1,19 @@
-import {Box} from 'grid-emotion';
 import PropTypes from 'prop-types';
 import React from 'react';
+import styled from 'react-emotion';
 
 import {fetchOrganizationEnvironments} from 'app/actionCreators/environments';
 import {t} from 'app/locale';
+import space from 'app/styles/space';
 import Button from 'app/components/button';
-import DropdownLink from 'app/components/dropdownLink';
+import DropdownMenu from 'app/components/dropdownMenu';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import MultiSelectField from 'app/components/forms/multiSelectField';
 import SentryTypes from 'app/sentryTypes';
 import withApi from 'app/utils/withApi';
 
-import HeaderItem from './headerItem';
+import HeaderItem from 'app/components/organizations/headerItem';
+import InlineSvg from 'app/components/inlineSvg';
 
 /**
  * Environment Selector
@@ -26,51 +28,94 @@ class MultipleEnvironmentSelector extends React.Component {
     value: PropTypes.array,
   };
 
-  static defaultProps = {};
+  constructor() {
+    super();
+    this.state = {
+      isOpen: false,
+    };
+  }
 
-  handleUpdate = e => {
-    let {onUpdate} = this.props;
+  handleUpdate = actions => {
+    let {value, onUpdate} = this.props;
+    this.setState(
+      {
+        isOpen: false,
+      },
+      () => {
+        if (typeof onUpdate === 'function') {
+          onUpdate(value);
+        }
+      }
+    );
+  };
 
-    if (typeof onUpdate !== 'function') return;
-    onUpdate(this.props.value);
+  handleClear = () => {
+    let {onChange, onUpdate} = this.props;
+    this.setState(
+      {
+        isOpen: false,
+      },
+      () => {
+        onChange([]);
+        if (typeof onUpdate === 'function') {
+          onUpdate([]);
+        }
+      }
+    );
   };
 
   render() {
-    const {className, value, onChange, organization} = this.props;
+    const {value, onChange, organization} = this.props;
     const summary = value && value.length ? `${value.join(', ')}` : t('All Environments');
 
     return (
-      <HeaderItem label={t('Environment')} className={className}>
-        <DropdownLink
-          title={summary}
-          alwaysRenderMenu={false}
-          keepMenuOpen={true}
-          anchorRight={true}
-        >
-          <Box p={2}>
-            <FetchOrganizationEnvironments organization={organization}>
-              {({environments}) => (
-                <React.Fragment>
-                  {environments === null && <LoadingIndicator />}
-                  {!!environments && (
+      <DropdownMenu
+        isOpen={this.state.isOpen}
+        onOpen={() => this.setState({isOpen: true})}
+        onClose={() => this.setState({isOpen: false})}
+        keepMenuOpen={true}
+      >
+        {({isOpen, getRootProps, getActorProps, getMenuProps, actions}) => (
+          <div {...getRootProps()} style={{position: 'relative'}}>
+            <StyledHeaderItem
+              icon={<StyledInlineSvg src="icon-window" />}
+              isOpen={isOpen}
+              hasSelected={value && !!value.length}
+              onClear={this.handleClear}
+              {...getActorProps({isStyled: true})}
+            >
+              {summary}
+            </StyledHeaderItem>
+            {isOpen && (
+              <Menu {...getMenuProps({isStyled: true})}>
+                <FetchOrganizationEnvironments organization={organization}>
+                  {({environments}) => (
                     <React.Fragment>
-                      <MultiSelectField
-                        name="environments"
-                        value={value}
-                        choices={environments.map(env => [env.name, env.name])}
-                        onChange={onChange}
-                      />
+                      {environments === null && <LoadingIndicator />}
+                      {!!environments && (
+                        <React.Fragment>
+                          <MultiSelectField
+                            name="environments"
+                            value={value}
+                            choices={environments.map(env => [env.name, env.name])}
+                            onChange={onChange}
+                          />
+                        </React.Fragment>
+                      )}
+                      <Button
+                        data-test-id="update-envs"
+                        onClick={() => this.handleUpdate(actions)}
+                      >
+                        {t('Update')}
+                      </Button>
                     </React.Fragment>
                   )}
-                  <Button data-test-id="update-envs" onClick={this.handleUpdate}>
-                    {t('Update')}
-                  </Button>
-                </React.Fragment>
-              )}
-            </FetchOrganizationEnvironments>
-          </Box>
-        </DropdownLink>
-      </HeaderItem>
+                </FetchOrganizationEnvironments>
+              </Menu>
+            )}
+          </div>
+        )}
+      </DropdownMenu>
     );
   }
 }
@@ -104,3 +149,27 @@ const FetchOrganizationEnvironments = withApi(
     }
   }
 );
+
+const StyledHeaderItem = styled(HeaderItem)`
+  height: 100%;
+  width: 250px;
+`;
+
+const StyledInlineSvg = styled(InlineSvg)`
+  transform: translateY(-2px);
+  height: 17px;
+  width: 17px;
+`;
+
+const Menu = styled('div')`
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderLight};
+  position: absolute;
+  top: 100%;
+  left: -1px;
+  min-width: 120%;
+  z-index: ${p => p.theme.zIndex.dropdown};
+  box-shadow: ${p => p.theme.dropShadowLight};
+  padding: ${space(2)};
+  border-radius: 0 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius};
+`;
diff --git a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
index 2b020b5a19..e61e28724f 100644
--- a/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/multipleProjectSelector.jsx
@@ -1,94 +1,154 @@
-import React from 'react';
 import PropTypes from 'prop-types';
-import moment from 'moment';
-import {Box} from 'grid-emotion';
-import styled from 'react-emotion';
+import React from 'react';
+import styled, {css} from 'react-emotion';
 
-import DropdownLink from 'app/components/dropdownLink';
-import Button from 'app/components/button';
-import MultiSelectField from 'app/components/forms/multiSelectField';
 import {t} from 'app/locale';
+import ProjectSelector from 'app/components/projectSelector';
+import InlineSvg from 'app/components/inlineSvg';
+
+import HeaderItem from 'app/components/organizations/headerItem';
 
-import HeaderItem from './headerItem';
+const rootContainerStyles = css`
+  display: flex;
+`;
 
 export default class MultipleProjectSelector extends React.Component {
   static propTypes = {
-    anchorRight: PropTypes.bool,
     value: PropTypes.array,
     projects: PropTypes.array,
     onChange: PropTypes.func,
     onUpdate: PropTypes.func,
   };
 
-  static defaultProps = {
-    anchorRight: true,
-  };
-
   constructor() {
     super();
     this.state = {
-      isOpen: false,
+      hasChanges: false,
     };
   }
 
-  formatDate(date) {
-    return moment(date).format('MMMM D, h:mm a');
-  }
+  // Reset "hasChanges" state and call `onUpdate` callback
+  doUpdate = () => {
+    this.setState({hasChanges: false}, this.props.onUpdate);
+  };
 
-  onUpdate = () => {
-    this.props.onUpdate();
-    this.setState({
-      isOpen: false,
-    });
+  /**
+   * Handler for when an explicit update call should be made.
+   * e.g. an "Update" button
+   *
+   * Should perform an "update" callback
+   */
+  handleUpdate = actions => {
+    actions.close();
+    this.doUpdate();
   };
 
-  render() {
-    const {className, anchorRight, value, projects, onChange} = this.props;
-    const selectedProjectIds = new Set(value);
+  /**
+   * Handler for when a dropdown item was selected directly (and not via multi select)
+   *
+   * Should perform an "update" callback
+   */
+  handleQuickSelect = (selected, checked, e) => {
+    this.props.onChange([parseInt(selected.id, 10)]);
+    this.doUpdate();
+  };
+
+  /**
+   * Handler for when dropdown menu closes
+   *
+   * Should perform an "update" callback
+   */
+  handleClose = props => {
+    // Only update if there are changes
+    if (!this.state.hasChanges) return;
+    this.doUpdate();
+  };
+
+  /**
+   * Handler for clearing the current value
+   *
+   * Should perform an "update" callback
+   */
+  handleClear = () => {
+    this.props.onChange([]);
+
+    // Update on clear
+    this.doUpdate();
+  };
 
-    const projectList = projects
-      .filter(project => selectedProjectIds.has(parseInt(project.id, 10)))
-      .map(project => project.slug);
+  /**
+   * Handler for selecting multiple items, should NOT call update
+   */
+  handleMultiSelect = (selected, checked, e) => {
+    const {onChange} = this.props;
+    onChange(selected.map(({id}) => parseInt(id, 10)));
+    this.setState({hasChanges: true});
+  };
 
-    const summary = projectList.length
-      ? `${projectList.join(', ')}`
-      : t('None selected, using all');
+  render() {
+    const {value, projects} = this.props;
+    const selectedProjectIds = new Set(value);
 
-    const options = projects.map(project => {
-      return {
-        value: parseInt(project.id, 10),
-        label: project.slug,
-      };
-    });
+    const selected = projects.filter(project =>
+      selectedProjectIds.has(parseInt(project.id, 10))
+    );
 
     return (
-      <HeaderItem className={className} label={t('Project(s)')}>
-        <DropdownLink
-          title={<Title>{summary}</Title>}
-          anchorRight={anchorRight}
-          isOpen={this.state.isOpen}
-          keepMenuOpen={true}
-          onOpen={() => this.setState({isOpen: true})}
-          onClose={() => this.setState({isOpen: false})}
-        >
-          <Box p={2}>
-            <Box mb={1}>
-              <Box mb={1}>{t('Searched project list')}</Box>
-              <MultiSelectField
-                name="projects"
-                value={value}
-                options={options}
-                onChange={onChange}
-              />
-            </Box>
-            <Button onClick={this.onUpdate}>{t('Update')}</Button>
-          </Box>
-        </DropdownLink>
-      </HeaderItem>
+      <StyledProjectSelector
+        {...this.props}
+        multi
+        selectedProjects={selected}
+        projects={projects}
+        onSelect={this.handleQuickSelect}
+        onClose={this.handleClose}
+        onMultiSelect={this.handleMultiSelect}
+        rootClassName={rootContainerStyles}
+      >
+        {({
+          getActorProps,
+          selectedItem,
+          activeProject,
+          selectedProjects,
+          isOpen,
+          actions,
+          onBlur,
+        }) => {
+          const hasSelected = !!selectedProjects.length;
+          const title = hasSelected
+            ? selectedProjects.map(({slug}) => slug).join(', ')
+            : t('All Projects');
+          return (
+            <StyledHeaderItem
+              active={hasSelected || isOpen}
+              icon={<StyledInlineSvg src="icon-stack" />}
+              hasSelected={hasSelected}
+              hasChanges={this.state.hasChanges}
+              isOpen={isOpen}
+              onSubmit={() => this.handleUpdate(actions)}
+              onClear={this.handleClear}
+              {...getActorProps()}
+            >
+              {title}
+            </StyledHeaderItem>
+          );
+        }}
+      </StyledProjectSelector>
     );
   }
 }
 
-const Title = styled.span`
-  padding-right: 40px;
+const StyledProjectSelector = styled(ProjectSelector)`
+  margin: 1px 0 0 -1px;
+  border-radius: 0 0 4px 4px;
+  width: 110%;
+`;
+
+const StyledHeaderItem = styled(HeaderItem)`
+  height: 100%;
+  width: 300px;
+`;
+
+const StyledInlineSvg = styled(InlineSvg)`
+  height: 18px;
+  width: 18px;
 `;
diff --git a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
index 18acd34739..414ecbe2d9 100644
--- a/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/timeRangeSelector/index.jsx
@@ -1,18 +1,19 @@
-import React from 'react';
 import PropTypes from 'prop-types';
+import React from 'react';
 import moment from 'moment';
-import {Flex} from 'grid-emotion';
 import styled from 'react-emotion';
 
+import {t} from 'app/locale';
 import Button from 'app/components/button';
+import DropdownMenu from 'app/components/dropdownMenu';
 import HeaderItem from 'app/components/organizations/headerItem';
-import DropdownLink from 'app/components/dropdownLink';
-import DynamicWrapper from 'app/components/dynamicWrapper';
-import {t} from 'app/locale';
+import InlineSvg from 'app/components/inlineSvg';
+import getDynamicText from 'app/utils/getDynamicText';
+import space from 'app/styles/space';
 
 import AbsoluteSelector from './absoluteSelector';
-import RelativeSelector from './relativeSelector';
 import CombinedSelector from './combinedSelector';
+import RelativeSelector from './relativeSelector';
 
 const ALLOWED_RELATIVE_DATES = {
   '24h': t('Last 24 hours'),
@@ -84,15 +85,7 @@ class TimeRangeSelector extends React.Component {
   };
 
   render() {
-    const {
-      className,
-      start,
-      end,
-      relative,
-      showAbsolute,
-      showRelative,
-      onChange,
-    } = this.props;
+    const {start, end, relative, showAbsolute, showRelative, onChange} = this.props;
 
     const shouldShowAbsolute = showAbsolute && !showRelative;
     const shouldShowRelative = !showAbsolute && showRelative;
@@ -103,47 +96,79 @@ class TimeRangeSelector extends React.Component {
       : `${this.formatDate(start)} to ${this.formatDate(end)}`;
 
     return (
-      <HeaderItem className={className} label={t('Time frame')}>
-        <DropdownLink
-          title={<DynamicWrapper value={<Title>{summary}</Title>} fixed="start to end" />}
-          anchorRight={true}
-          keepMenuOpen={true}
-          isOpen={this.state.isOpen}
-          onOpen={() => this.setState({isOpen: true})}
-          onClose={() => this.setState({isOpen: false})}
-        >
-          <Flex direction="column" p={2}>
-            {shouldShowAbsolute && (
-              <AbsoluteSelector onChange={onChange} start={start} end={end} />
-            )}
-            {shouldShowRelative && (
-              <RelativeSelector
-                choices={Object.entries(ALLOWED_RELATIVE_DATES)}
-                onChange={onChange}
-                value={relative}
-              />
-            )}
-            {shouldShowBoth && (
-              <CombinedSelector
-                choices={Object.entries(ALLOWED_RELATIVE_DATES)}
-                onChange={onChange}
-                relative={relative}
-                start={start}
-                end={end}
-              />
-            )}
-            <div>
-              <Button onClick={this.handleUpdate}>{t('Update')}</Button>
-            </div>
-          </Flex>
-        </DropdownLink>
-      </HeaderItem>
+      <DropdownMenu
+        isOpen={this.state.isOpen}
+        onOpen={() => this.setState({isOpen: true})}
+        onClose={() => this.setState({isOpen: false})}
+        keepMenuOpen={true}
+      >
+        {({isOpen, getRootProps, getActorProps, getMenuProps}) => (
+          <div {...getRootProps()} style={{position: 'relative'}}>
+            <StyledHeaderItem
+              icon={<StyledInlineSvg src="icon-calendar" />}
+              isOpen={isOpen}
+              hasSelected={true}
+              allowClear={false}
+              {...getActorProps({isStyled: true})}
+            >
+              {getDynamicText({value: summary, fixed: 'start to end'})}
+            </StyledHeaderItem>
+            <Menu
+              {...getMenuProps({isStyled: true})}
+              style={{display: isOpen ? 'block' : 'none'}}
+            >
+              {shouldShowAbsolute && (
+                <AbsoluteSelector onChange={onChange} start={start} end={end} />
+              )}
+              {shouldShowRelative && (
+                <RelativeSelector
+                  choices={Object.entries(ALLOWED_RELATIVE_DATES)}
+                  onChange={onChange}
+                  value={relative}
+                />
+              )}
+              {shouldShowBoth && (
+                <CombinedSelector
+                  choices={Object.entries(ALLOWED_RELATIVE_DATES)}
+                  onChange={onChange}
+                  relative={relative}
+                  start={start}
+                  end={end}
+                />
+              )}
+              <div>
+                <Button onClick={this.handleUpdate}>{t('Update')}</Button>
+              </div>
+            </Menu>
+          </div>
+        )}
+      </DropdownMenu>
     );
   }
 }
 
-const Title = styled.span`
-  padding-right: 40px;
+const StyledHeaderItem = styled(HeaderItem)`
+  height: 100%;
+  width: 230px;
+`;
+
+const StyledInlineSvg = styled(InlineSvg)`
+  transform: translateY(-2px);
+  height: 17px;
+  width: 17px;
+`;
+
+const Menu = styled('div')`
+  background: #fff;
+  border: 1px solid ${p => p.theme.borderLight};
+  position: absolute;
+  top: 100%;
+  left: -1px;
+  min-width: 120%;
+  z-index: ${p => p.theme.zIndex.dropdown};
+  box-shadow: ${p => p.theme.dropShadowLight};
+  padding: ${space(2)};
+  border-radius: 0 0 ${p => p.theme.borderRadius} ${p => p.theme.borderRadius};
 `;
 
 export default TimeRangeSelector;
diff --git a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
index ed66485571..e77bf8bd2c 100644
--- a/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader/projectSelector.jsx
@@ -3,22 +3,16 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import styled from 'react-emotion';
 
-import {sortArray} from 'app/utils';
 import {t} from 'app/locale';
-import Button from 'app/components/button';
-import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
-import Highlight from 'app/components/highlight';
 import IdBadge from 'app/components/idBadge';
 import InlineSvg from 'app/components/inlineSvg';
 import Link from 'app/components/link';
+import ProjectSelector from 'app/components/projectSelector';
 import space from 'app/styles/space';
 
-const ProjectSelector = withRouter(
-  class ProjectSelector extends React.Component {
+const ProjectHeaderProjectSelector = withRouter(
+  class ProjectHeaderProjectSelector extends React.Component {
     static propTypes = {
-      // Accepts a project id (slug) and not a project *object* because ProjectSelector
-      // is created from Django templates, and only organization is serialized
-      projectId: PropTypes.string,
       organization: PropTypes.object.isRequired,
       router: PropTypes.object,
     };
@@ -27,23 +21,6 @@ const ProjectSelector = withRouter(
       location: PropTypes.object,
     };
 
-    static defaultProps = {
-      projectId: null,
-    };
-
-    constructor(props) {
-      super(props);
-
-      this.state = {
-        activeProject: this.getActiveProject(),
-      };
-    }
-
-    urlPrefix() {
-      let org = this.props.organization;
-      return `/organizations/${org.slug}`;
-    }
-
     /**
      * Returns an object with the target project url. If
      * the router is present, passed as the 'to' property.
@@ -60,21 +37,11 @@ const ProjectSelector = withRouter(
       }
     }
 
-    getActiveProject() {
-      const {projectId} = this.props;
-      return this.getProjects().find(({slug}) => slug === projectId);
-    }
-
-    getProjects() {
-      const {organization} = this.props;
-      return organization.projects.filter(project => project.isMember);
-    }
-
     getProjectLabel(project) {
       return project.slug;
     }
 
-    handleSelect = ({value: project}) => {
+    handleSelect = project => {
       let {router} = this.props;
       let {to, href} = this.getProjectUrlProps(project);
       if (to) {
@@ -82,77 +49,27 @@ const ProjectSelector = withRouter(
       } else {
         window.location.assign(href);
       }
-      this.setState({activeProject: project});
     };
 
     render() {
       let {organization: org} = this.props;
-      let access = new Set(org.access);
-
-      let projectList = sortArray(this.getProjects(), project => {
-        return [!project.isBookmarked, project.name];
-      });
 
       // TODO(billy): Only show platform icons for internal users
       const internalOnly =
         org && org.features && org.features.includes('internal-catchall');
 
-      const hasProjects = projectList && !!projectList.length;
-      const hasProjectWrite = access.has('project:write');
-
       return (
-        <DropdownAutoComplete
-          alignMenu="left"
-          blendCorner={false}
-          filterPlaceholder={t('Filter projects')}
-          onSelect={this.handleSelect}
-          maxHeight={500}
-          zIndex={1001}
-          style={{marginTop: 6}}
-          inputProps={{style: {padding: 8, paddingLeft: 14}}}
-          emptyMessage={t('You have no projects')}
-          noResultsMessage={t('No projects found')}
-          virtualizedHeight={33}
-          emptyHidesInput
-          menuFooter={
-            !hasProjects && hasProjectWrite ? (
-              <CreateProjectButton
-                priority="primary"
-                size="small"
-                to={`${this.urlPrefix()}/projects/new/`}
-              >
-                {t('Create project')}
-              </CreateProjectButton>
-            ) : null
-          }
-          items={projectList.map(project => ({
-            value: project,
-            searchKey: project.slug,
-            label: ({inputValue}) => (
-              <ProjectRow>
-                <IdBadge
-                  project={project}
-                  avatarSize={16}
-                  displayName={<Highlight text={inputValue}>{project.slug}</Highlight>}
-                  avatarProps={{consistentWidth: true}}
-                />
-                {project.isBookmarked && <BookmarkIcon />}
-              </ProjectRow>
-            ),
-          }))}
-        >
-          {({getActorProps, selectedItem}) => (
+        <ProjectSelector {...this.props} onSelect={this.handleSelect}>
+          {({getActorProps, selectedItem, activeProject}) => (
             <DropdownLabel>
-              {this.state.activeProject ? (
+              {activeProject ? (
                 <IdBadge
-                  project={this.state.activeProject}
+                  project={activeProject}
                   avatarSize={16}
                   hideAvatar={!internalOnly}
                   displayName={
-                    <ProjectNameLink
-                      {...this.getProjectUrlProps(this.state.activeProject)}
-                    >
-                      {this.getProjectLabel(this.state.activeProject)}
+                    <ProjectNameLink {...this.getProjectUrlProps(activeProject)}>
+                      {this.getProjectLabel(activeProject)}
                     </ProjectNameLink>
                   }
                 />
@@ -168,32 +85,20 @@ const ProjectSelector = withRouter(
               <DropdownIcon />
             </DropdownLabel>
           )}
-        </DropdownAutoComplete>
+        </ProjectSelector>
       );
     }
   }
 );
 
+export default ProjectHeaderProjectSelector;
+
 const FlexY = styled('div')`
   display: flex;
   align-items: center;
   justify-content: space-between;
 `;
 
-const ProjectRow = styled(FlexY)`
-  font-size: 14px;
-  font-weight: 400;
-`;
-
-const BookmarkIcon = styled(props => (
-  <div {...props}>
-    <span className="icon-star-solid bookmark" />
-  </div>
-))`
-  display: flex;
-  font-size: 12px;
-`;
-
 const DropdownLabel = styled(FlexY)`
   margin-right: ${space(1)};
 `;
@@ -211,16 +116,8 @@ const SelectProject = styled('span')`
   padding-right: ${space(0.5)};
 `;
 
-const CreateProjectButton = styled(Button)`
-  display: block;
-  text-align: center;
-  margin: ${space(0.5)} 0;
-`;
-
 const ProjectNameLink = styled(Link)`
   color: ${p => p.theme.textColor};
   font-size: 20px;
   font-weight: 600;
 `;
-
-export default ProjectSelector;
diff --git a/src/sentry/static/sentry/app/components/projectSelector.jsx b/src/sentry/static/sentry/app/components/projectSelector.jsx
new file mode 100644
index 0000000000..6fee85c95e
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/projectSelector.jsx
@@ -0,0 +1,345 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {sortArray} from 'app/utils';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import CheckboxFancy from 'app/components/checkboxFancy';
+import DropdownAutoComplete from 'app/components/dropdownAutoComplete';
+import Highlight from 'app/components/highlight';
+import IdBadge from 'app/components/idBadge';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import theme from 'app/utils/theme';
+
+class ProjectSelector extends React.Component {
+  static propTypes = {
+    // Accepts a project id (slug) and not a project *object* because ProjectSelector
+    // is created from Django templates, and only organization is serialized
+    projectId: PropTypes.string,
+    organization: PropTypes.object.isRequired,
+    projects: PropTypes.arrayOf(
+      PropTypes.oneOfType([PropTypes.string, SentryTypes.Project])
+    ),
+
+    // Render a footer at the bottom of the list
+    // render function that is passed an `actions` object with `close` and `open` properties.
+    menuFooter: PropTypes.func,
+
+    // Allow selecting multiple projects?
+    multi: PropTypes.bool,
+
+    // Disable selecting a single project, every action should trigger multi select
+    // XXX(billy): This is unused as of 11/1/2018, could be due for a cleanup
+    multiOnly: PropTypes.bool,
+
+    // Use this if the component should be a controlled component
+    selectedProjects: PropTypes.arrayOf(SentryTypes.Project),
+
+    // Callback when a project is selected
+    onSelect: PropTypes.func,
+
+    // Callback when the menu is closed
+    onClose: PropTypes.func,
+
+    // Callback when projects are selected via the multiple project selector
+    // Calls back with (projects[], event)
+    onMultiSelect: PropTypes.func,
+    rootClassName: PropTypes.string,
+  };
+
+  static defaultProps = {
+    projectId: null,
+    multi: false,
+    onSelect: () => {},
+  };
+
+  constructor(props) {
+    super(props);
+
+    this.state = {
+      activeProject: this.getActiveProject(),
+      selectedProjects: new Map(),
+    };
+  }
+
+  urlPrefix() {
+    return `/organizations/${this.props.organization.slug}`;
+  }
+
+  getActiveProject() {
+    const {projectId} = this.props;
+    return this.getProjects().find(({slug}) => slug === projectId);
+  }
+
+  getProjects() {
+    const {organization, projects} = this.props;
+    return projects || organization.projects.filter(project => project.isMember);
+  }
+
+  isControlled = () => typeof this.props.selectedProjects !== 'undefined';
+
+  toggleProject(project, e) {
+    const {onMultiSelect} = this.props;
+    const {slug} = project;
+    // Don't update state if this is a controlled component
+    if (this.isControlled()) return;
+
+    this.setState(state => {
+      const selectedProjects = new Map(state.selectedProjects.entries());
+
+      if (selectedProjects.has(slug)) {
+        selectedProjects.delete(slug);
+      } else {
+        selectedProjects.set(slug, project);
+      }
+
+      if (typeof onMultiSelect === 'function') {
+        onMultiSelect(Array.from(selectedProjects.values()), e);
+      }
+
+      return {
+        selectedProjects,
+      };
+    });
+  }
+
+  handleSelect = ({value: project}) => {
+    const {multiOnly, onSelect} = this.props;
+
+    if (!multiOnly) {
+      this.setState({activeProject: project});
+      onSelect(project);
+    } else {
+      this.handleMultiSelect(project);
+    }
+  };
+
+  handleMultiSelect = (project, e) => {
+    const {onMultiSelect, selectedProjects} = this.props;
+    const isControlled = this.isControlled();
+    const hasCallback = typeof onMultiSelect === 'function';
+
+    if (isControlled && !hasCallback) {
+      // eslint-disable-next-line no-console
+      console.error(
+        'ProjectSelector is a controlled component but `onMultiSelect` callback is not defined'
+      );
+    }
+
+    if (hasCallback) {
+      if (isControlled) {
+        const selectedProjectsMap = new Map(selectedProjects.map(p => [p.slug, p]));
+        if (selectedProjectsMap.has(project.slug)) {
+          // unselected a project
+
+          selectedProjectsMap.delete(project.slug);
+        } else {
+          selectedProjectsMap.set(project.slug, project);
+        }
+
+        onMultiSelect(Array.from(selectedProjectsMap.values()), e);
+      }
+    }
+
+    this.toggleProject(project, e);
+  };
+
+  render() {
+    const {
+      children,
+      organization: org,
+      menuFooter,
+      multi,
+      multiOnly,
+      className,
+      rootClassName,
+      onClose,
+    } = this.props;
+    const {activeProject} = this.state;
+    const access = new Set(org.access);
+
+    const projects = this.getProjects();
+    const projectList = sortArray(projects, project => {
+      return [!project.isBookmarked, project.name];
+    });
+
+    const hasProjects = projectList && !!projectList.length;
+    const hasProjectWrite = access.has('project:write');
+
+    return (
+      <DropdownAutoComplete
+        alignMenu="left"
+        closeOnSelect={!multiOnly}
+        blendCorner={false}
+        searchPlaceholder={t('Filter projects')}
+        onSelect={this.handleSelect}
+        onClose={onClose}
+        maxHeight={500}
+        zIndex={theme.zIndex.dropdown}
+        css={{marginTop: 6}}
+        inputProps={{style: {padding: 8, paddingLeft: 14}}}
+        rootClassName={rootClassName}
+        className={className}
+        emptyMessage={t('You have no projects')}
+        noResultsMessage={t('No projects found')}
+        virtualizedHeight={40}
+        emptyHidesInput
+        menuFooter={renderProps => {
+          const renderedFooter =
+            typeof menuFooter === 'function' ? menuFooter(renderProps) : menuFooter;
+          const showCreateProjectButton = !hasProjects && hasProjectWrite;
+
+          if (!renderedFooter && !showCreateProjectButton) return null;
+
+          return (
+            <React.Fragment>
+              {showCreateProjectButton && (
+                <CreateProjectButton
+                  priority="primary"
+                  size="small"
+                  to={`${this.urlPrefix()}/projects/new/`}
+                >
+                  {t('Create project')}
+                </CreateProjectButton>
+              )}
+              {renderedFooter}
+            </React.Fragment>
+          );
+        }}
+        items={projectList.map(project => ({
+          value: project,
+          searchKey: project.slug,
+          label: ({inputValue}) => (
+            <ProjectSelectorItem
+              project={project}
+              multi={multi}
+              inputValue={inputValue}
+              isChecked={
+                this.isControlled()
+                  ? !!this.props.selectedProjects.find(({slug}) => slug === project.slug)
+                  : this.state.selectedProjects.has(project.slug)
+              }
+              onMultiSelect={this.handleMultiSelect}
+            />
+          ),
+        }))}
+      >
+        {renderProps =>
+          children({
+            ...renderProps,
+            activeProject,
+            selectedProjects: this.isControlled()
+              ? this.props.selectedProjects
+              : Array.from(this.state.selectedProjects.values()),
+          })}
+      </DropdownAutoComplete>
+    );
+  }
+}
+
+class ProjectSelectorItem extends React.PureComponent {
+  static propTypes = {
+    project: SentryTypes.Project,
+    multi: PropTypes.bool,
+    inputValue: PropTypes.string,
+    isChecked: PropTypes.bool,
+    onMultiSelect: PropTypes.func,
+  };
+
+  handleMultiSelect = e => {
+    const {project, onMultiSelect} = this.props;
+    onMultiSelect(project, e);
+  };
+
+  handleClick = e => {
+    e.stopPropagation();
+    this.handleMultiSelect(e);
+  };
+
+  render() {
+    const {project, multi, inputValue, isChecked} = this.props;
+    return (
+      <ProjectRow>
+        <BadgeAndBookmark>
+          <BadgeWrapper multi={multi}>
+            <IdBadgeMenuItem
+              project={project}
+              avatarSize={16}
+              displayName={<Highlight text={inputValue}>{project.slug}</Highlight>}
+              avatarProps={{consistentWidth: true}}
+            />
+          </BadgeWrapper>
+          {project.isBookmarked && <BookmarkIcon multi={multi} />}
+        </BadgeAndBookmark>
+
+        {multi && (
+          <MultiSelectWrapper onClick={this.handleClick}>
+            <MultiSelect checked={isChecked} />
+          </MultiSelectWrapper>
+        )}
+      </ProjectRow>
+    );
+  }
+}
+
+const FlexY = styled('div')`
+  display: flex;
+  align-items: center;
+  justify-content: space-between;
+`;
+
+const ProjectRow = styled(FlexY)`
+  font-size: 14px;
+  font-weight: 400;
+
+  /* thanks bootstrap? */
+  input[type='checkbox'] {
+    margin: 0;
+  }
+`;
+
+const BookmarkIcon = styled(({multi, ...props}) => (
+  <div {...props}>
+    <span className="icon-star-solid bookmark" />
+  </div>
+))`
+  display: flex;
+  font-size: 12px;
+  ${p => p.multi && `margin-left: ${space(0.5)}`};
+`;
+
+const CreateProjectButton = styled(Button)`
+  display: block;
+  text-align: center;
+  margin: ${space(0.5)} 0;
+`;
+
+const BadgeWrapper = styled('div')`
+  display: flex;
+  ${p => !p.multi && 'flex: 1'};
+  white-space: nowrap;
+  overflow: hidden;
+`;
+const BadgeAndBookmark = styled('div')`
+  display: flex;
+  flex: 1;
+  overflow: hidden;
+`;
+
+const IdBadgeMenuItem = styled(IdBadge)`
+  flex: 1;
+  overflow: hidden;
+`;
+
+const MultiSelectWrapper = styled('div')`
+  margin: -8px;
+  padding: 8px;
+`;
+
+const MultiSelect = styled(CheckboxFancy)`
+  flex-shrink: 0;
+`;
+
+export default ProjectSelector;
diff --git a/src/sentry/static/sentry/app/icons/icon-calendar.svg b/src/sentry/static/sentry/app/icons/icon-calendar.svg
new file mode 100644
index 0000000000..e454529de0
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-calendar.svg
@@ -0,0 +1,11 @@
+<svg
+  width="22"
+  height="22"
+  viewBox="0 0 22 22"
+  xmlns="http://www.w3.org/2000/svg"
+>
+  <title>Calendar</title>
+  <g fill="currentColor" fill-rule="nonzero">
+    <path d="M2.495 4A.495.495 0 0 0 2 4.496v15.008c0 .274.222.496.495.496h17.01a.495.495 0 0 0 .495-.496V4.496A.495.495 0 0 0 19.505 4H2.495zm.189-2h16.632C20.798 2 22 3.2 22 4.681V19.32A2.683 2.683 0 0 1 19.316 22H2.684A2.683 2.683 0 0 1 0 19.319V4.68A2.683 2.683 0 0 1 2.684 2z"/><path d="M15 1.071C15 .48 15.448 0 16 0s1 .48 1 1.071V4.93C17 5.52 16.552 6 16 6s-1-.48-1-1.071V1.07zM5 1.071C5 .48 5.448 0 6 0s1 .48 1 1.071V4.93C7 5.52 6.552 6 6 6s-1-.48-1-1.071V1.07zM1.05 10C.47 10 0 9.552 0 9s.47-1 1.05-1h18.9c.58 0 1.05.448 1.05 1s-.47 1-1.05 1H1.05z"/>
+  </g>
+</svg>
diff --git a/src/sentry/static/sentry/app/icons/icon-stack.svg b/src/sentry/static/sentry/app/icons/icon-stack.svg
index 761ef535f5..855c1a11fd 100644
--- a/src/sentry/static/sentry/app/icons/icon-stack.svg
+++ b/src/sentry/static/sentry/app/icons/icon-stack.svg
@@ -1,16 +1,12 @@
-<svg viewBox="0 0 24 24">
-  <g fill="currentColor">
-    <path
-      d="M11.9952835,4 L3.51000214,8.48528137 L11.9952835,12.9705627 L20.4805649,8.48528137 L11.9952835,4 Z M12.9299314,2.23182769 L21.4152128,6.71710906 C22.8356823,7.46796281 22.8356823,9.50259994 21.4152128,10.2534537 L12.9299314,14.7387351 C12.3451674,15.0478386 11.6453996,15.0478386 11.0606356,14.7387351 L2.57535425,10.2534537 C1.15488477,9.50259994 1.15488477,7.46796281 2.57535425,6.71710906 L11.0606356,2.23182769 C11.6453996,1.9227241 12.3451674,1.9227241 12.9299314,2.23182769 Z"
-      id="Rectangle-82"
-    />
-    <path
-      d="M2.96574643,12.1150818 C2.47701959,11.8578571 1.87230643,12.0455267 1.61508178,12.5342536 C1.35785713,13.0229804 1.54552673,13.6276936 2.03425357,13.8849182 L11.5342536,18.8849182 C11.8257941,19.0383606 12.1742059,19.0383606 12.4657464,18.8849182 L21.9657464,13.8849182 C22.4544733,13.6276936 22.6421429,13.0229804 22.3849182,12.5342536 C22.1276936,12.0455267 21.5229804,11.8578571 21.0342536,12.1150818 L12,16.8699521 L2.96574643,12.1150818 Z"
-      id="Line-15"
-    />
-    <path
-      d="M2.96574643,16.1150818 C2.47701959,15.8578571 1.87230643,16.0455267 1.61508178,16.5342536 C1.35785713,17.0229804 1.54552673,17.6276936 2.03425357,17.8849182 L11.5342536,22.8849182 C11.8257941,23.0383606 12.1742059,23.0383606 12.4657464,22.8849182 L21.9657464,17.8849182 C22.4544733,17.6276936 22.6421429,17.0229804 22.3849182,16.5342536 C22.1276936,16.0455267 21.5229804,15.8578571 21.0342536,16.1150818 L12,20.8699521 L2.96574643,16.1150818 Z"
-      id="Line-15"
-    />
+<svg
+  width="22"
+  height="22"
+  viewBox="0 0 22 22"
+  xmlns="http://www.w3.org/2000/svg"
+>
+  <title>Stack</title>
+  <g fill="currentColor" fill-rule="nonzero">
+    <path d="M11.03 2.105L2.104 6.827l8.926 4.722 8.927-4.722-8.927-4.722zm.984-1.861l8.926 4.722c1.494.79 1.494 2.932 0 3.722l-8.926 4.722a2.103 2.103 0 0 1-1.967 0L1.121 8.688c-1.495-.79-1.495-2.932 0-3.722L10.047.244a2.103 2.103 0 0 1 1.967 0z"/>
+    <path d="M1.542 10.648a1.052 1.052 0 1 0-.98 1.863l9.994 5.264c.307.161.673.161.98 0l9.994-5.264a1.053 1.053 0 0 0-.98-1.863l-9.504 5.006-9.504-5.006z"/><path d="M1.542 14.859a1.052 1.052 0 1 0-.98 1.863l9.994 5.264c.307.161.673.161.98 0l9.994-5.264a1.053 1.053 0 0 0-.98-1.863l-9.504 5.005-9.504-5.005z"/>
   </g>
 </svg>
diff --git a/src/sentry/static/sentry/app/icons/icon-window.svg b/src/sentry/static/sentry/app/icons/icon-window.svg
new file mode 100644
index 0000000000..2d2c0bef97
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/icon-window.svg
@@ -0,0 +1,14 @@
+<svg
+  width="22"
+  height="22"
+  viewBox="0 0 22 22" xmlns="http://www.w3.org/2000/svg"
+>
+  <title>Application Window</title>
+  <g fill="currentColor" fill-rule="evenodd">
+    <path d="M3.667 1.833c-1.013 0-1.834.821-1.834 1.834v14.666c0 1.013.821 1.834 1.834 1.834h14.666c1.013 0 1.834-.821 1.834-1.834V3.667c0-1.013-.821-1.834-1.834-1.834H3.667zm0-1.833h14.666A3.667 3.667 0 0 1 22 3.667v14.666A3.667 3.667 0 0 1 18.333 22H3.667A3.667 3.667 0 0 1 0 18.333V3.667A3.667 3.667 0 0 1 3.667 0z" fill-rule="nonzero"/>
+    <path d="M0 8h22v1.905H0z"/>
+    <circle cx="5" cy="5" r="1"/>
+    <circle cx="8" cy="5" r="1"/>
+    <circle cx="11" cy="5" r="1"/>
+  </g>
+</svg>
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
index f5cf59d6e3..e19d1b8284 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/discover.jsx
@@ -8,7 +8,6 @@ import {
   addSuccessMessage,
 } from 'app/actionCreators/indicator';
 import {t, tct} from 'app/locale';
-import HeaderSeparator from 'app/components/organizations/headerSeparator';
 import MultipleProjectSelector from 'app/components/organizations/multipleProjectSelector';
 import SentryTypes from 'app/sentryTypes';
 import TimeRangeSelector from 'app/components/organizations/timeRangeSelector';
@@ -40,6 +39,7 @@ import {
   SidebarTabs,
   PageTitle,
   SavedQueryWrapper,
+  StyledHeaderSeparator,
 } from './styles';
 
 import {trackQuery} from './analytics';
@@ -330,11 +330,12 @@ export default class OrganizationDiscover extends React.Component {
           <TopBar>
             <MultipleProjectSelector
               value={currentQuery.projects}
+              organization={organization}
               projects={projects}
               onChange={val => this.updateField('projects', val)}
               onUpdate={this.runQuery}
             />
-            <HeaderSeparator />
+            <StyledHeaderSeparator />
             <TimeRangeSelector
               showAbsolute={true}
               showRelative={true}
@@ -344,6 +345,7 @@ export default class OrganizationDiscover extends React.Component {
               onChange={this.handleUpdateTime}
               onUpdate={this.runQuery}
             />
+            <StyledHeaderSeparator />
           </TopBar>
           <BodyContent>
             {shouldDisplayResult && (
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index c3222916ea..c53ff8a970 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -8,6 +8,7 @@ import space from 'app/styles/space';
 import {Panel, PanelItem} from 'app/components/panels';
 import NavTabs from 'app/components/navTabs';
 import Link from 'app/components/link';
+import HeaderSeparator from 'app/components/organizations/headerSeparator';
 
 const HEADER_HEIGHT = 60;
 
@@ -65,8 +66,11 @@ export const LoadingContainer = styled(Flex)`
   height: 100%;
 `;
 
+export const StyledHeaderSeparator = styled(HeaderSeparator)`
+  margin: ${space(1.5)} 0;
+`;
+
 export const TopBar = styled(Flex)`
-  padding: 0 ${space(4)};
   border-bottom: 1px solid ${p => p.theme.borderLight};
   height: ${HEADER_HEIGHT}px;
 `;
diff --git a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
index 94021b6281..fda8c2319b 100644
--- a/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationEvents/index.jsx
@@ -133,10 +133,10 @@ class OrganizationEventsContainer extends React.Component {
         <EventsContext.Provider
           value={{actions: this.actions, ...this.state.queryValues}}
         >
-          <Content>
+          <OrganizationEventsContent>
             <Header>
               <MultipleProjectSelector
-                anchorRight
+                organization={organization}
                 projects={projects}
                 value={this.state.project}
                 onChange={this.handleChangeProjects}
@@ -161,7 +161,7 @@ class OrganizationEventsContainer extends React.Component {
               />
             </Header>
             <Body>{children}</Body>
-          </Content>
+          </OrganizationEventsContent>
         </EventsContext.Provider>
       </Feature>
     );
@@ -170,7 +170,7 @@ class OrganizationEventsContainer extends React.Component {
 export default withRouter(withOrganization(OrganizationEventsContainer));
 export {OrganizationEventsContainer};
 
-const Content = styled(Flex)`
+const OrganizationEventsContent = styled(Flex)`
   flex-direction: column;
   flex: 1;
   overflow: hidden;
@@ -180,7 +180,7 @@ const Content = styled(Flex)`
 const Header = styled(Flex)`
   border-bottom: 1px solid ${p => p.theme.borderLight};
   font-size: 18px;
-  padding: ${space(1)} ${space(4)};
+  height: 60px;
 `;
 
 const Body = styled('div')`
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
index 2ce6908bf8..f2dcdb7870 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/index.jsx
@@ -92,7 +92,7 @@ class OrganizationHealth extends React.Component {
             <Content>
               <Header>
                 <MultipleProjectSelector
-                  anchorRight
+                  organization={organization}
                   projects={projects}
                   value={this.state.projects}
                   onChange={this.handleChangeProjects}
diff --git a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
index cfec39a7b3..fa7b50ca78 100644
--- a/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
+++ b/src/sentry/static/sentry/app/views/organizationHealth/util/healthRequest.jsx
@@ -27,7 +27,7 @@ class HealthRequestWithParams extends React.Component {
     /**
      * List of project ids to query
      */
-    projects: PropTypes.arrayOf(PropTypes.string),
+    projects: PropTypes.arrayOf(PropTypes.number),
 
     /**
      * List of environments to query
diff --git a/tests/js/spec/components/autoComplete.spec.jsx b/tests/js/spec/components/autoComplete.spec.jsx
index 48e9e1f986..7851f52d5e 100644
--- a/tests/js/spec/components/autoComplete.spec.jsx
+++ b/tests/js/spec/components/autoComplete.spec.jsx
@@ -490,4 +490,31 @@ describe('AutoComplete', function() {
       expect(wrapper.state('inputValue')).toBe('Pineapple');
     });
   });
+
+  it('does not reset highlight state if `closeOnSelect` is false and we select a new item', function() {
+    wrapper = createWrapper({closeOnSelect: false});
+    jest.useFakeTimers();
+    input.simulate('focus');
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+
+    // Select item
+    input.simulate('keyDown', {key: 'Enter'});
+
+    // Should still remain open with same highlightedIndex
+    expect(wrapper.state('highlightedIndex')).toBe(1);
+    expect(wrapper.state('isOpen')).toBe(true);
+
+    input.simulate('keyDown', {key: 'ArrowDown'});
+    expect(wrapper.state('highlightedIndex')).toBe(2);
+
+    // Select item
+    input.simulate('keyDown', {key: 'Enter'});
+
+    // Should still remain open with same highlightedIndex
+    expect(wrapper.state('highlightedIndex')).toBe(2);
+    expect(wrapper.state('isOpen')).toBe(true);
+  });
 });
diff --git a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
index de43e07d6a..d857203731 100644
--- a/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
+++ b/tests/js/spec/components/organizations/multipleEnvironmentSelector.spec.jsx
@@ -39,19 +39,19 @@ describe('MultipleEnvironmentSelector', function() {
 
   it('fetches environments only when dropdown opened', async function() {
     expect(getMock).not.toHaveBeenCalled();
-    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     expect(getMock).toHaveBeenCalled();
     await tick();
     wrapper.update();
     expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(1);
 
     // Close
-    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     expect(wrapper.find('FetchOrganizationEnvironments')).toHaveLength(0);
   });
 
   it('can select and change environments', async function() {
-    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     await tick();
     wrapper.update();
 
diff --git a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
index 3b492db748..951013a4f1 100644
--- a/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
+++ b/tests/js/spec/components/projectHeader/projectSelector.spec.jsx
@@ -1,9 +1,9 @@
 import React from 'react';
 import {mount} from 'enzyme';
 
-import ProjectSelector from 'app/components/projectHeader/projectSelector';
+import ProjectHeaderProjectSelector from 'app/components/projectHeader/projectSelector';
 
-describe('ProjectSelector', function() {
+describe('ProjectHeaderProjectSelector', function() {
   const testTeam = TestStubs.Team({
     id: 'test-team',
     slug: 'test-team',
@@ -34,95 +34,45 @@ describe('ProjectSelector', function() {
 
   const routerContext = TestStubs.routerContext([{organization: mockOrg}]);
 
-  beforeAll(function() {
-    jest.spyOn(window.location, 'assign').mockImplementation(() => {});
-  });
-
-  afterAll(function() {
-    window.location.assign.mockRestore();
-  });
-
   const openMenu = wrapper => wrapper.find('DropdownLabel').simulate('click');
 
-  it('should show empty message with no projects button, when no projects, and has no "project:write" access', function() {
-    let wrapper = mount(
-      <ProjectSelector
-        organization={{
-          id: 'org',
-          slug: 'org-slug',
-          teams: [],
-          projects: [],
-          access: [],
-        }}
-        projectId=""
-      />,
-      routerContext
-    );
-    openMenu(wrapper);
-    expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
-    // Should not have "Create Project" button
-    expect(wrapper.find('CreateProjectButton')).toHaveLength(0);
-  });
-
-  it('should show empty message and create project button, when no projects and has "project:write" access', function() {
+  it('renders with "Select a project" when no project is selected', function() {
     let wrapper = mount(
-      <ProjectSelector
-        organization={{
-          id: 'org',
-          slug: 'org-slug',
-          teams: [],
-          projects: [],
-          access: ['project:write'],
-        }}
-        projectId=""
-      />,
+      <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
       routerContext
     );
-    openMenu(wrapper);
-    expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
-    // Should not have "Create Project" button
-    expect(wrapper.find('CreateProjectButton')).toHaveLength(1);
-  });
 
-  it('lists projects and has filter', function() {
-    let wrapper = mount(
-      <ProjectSelector organization={mockOrg} projectId="" />,
-      routerContext
-    );
-    openMenu(wrapper);
-    expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
+    expect(wrapper.find('SelectProject')).toHaveLength(1);
   });
 
-  it('can filter projects by project name', function() {
+  it('has project label when project is selected', function() {
     let wrapper = mount(
-      <ProjectSelector organization={mockOrg} projectId="" />,
+      <ProjectHeaderProjectSelector organization={mockOrg} projectId="" />,
       routerContext
     );
     openMenu(wrapper);
 
-    wrapper.find('StyledInput').simulate('change', {target: {value: 'TEST'}});
-
-    const result = wrapper.find('AutoCompleteItem ProjectBadge');
-    expect(result).toHaveLength(1);
-    expect(result.prop('project').slug).toBe('test-project');
-  });
+    // Select first project
+    wrapper
+      .find('AutoCompleteItem')
+      .first()
+      .simulate('click');
 
-  it('does not close dropdown when input is clicked', async function() {
-    let wrapper = mount(
-      <ProjectSelector organization={mockOrg} projectId="" />,
-      routerContext
+    expect(wrapper.find('IdBadge').prop('project')).toEqual(
+      expect.objectContaining({
+        slug: 'test-project',
+      })
     );
-    openMenu(wrapper);
-
-    wrapper.find('StyledInput').simulate('click');
-    await tick();
-    wrapper.update();
-    expect(wrapper.find('DropdownMenu').prop('isOpen')).toBe(true);
   });
 
-  it('closes dropdown when project is selected', function() {
+  it('calls `router.push` when a project is selected', function() {
+    let routerMock = TestStubs.router();
     let wrapper = mount(
-      <ProjectSelector organization={mockOrg} projectId="" />,
+      <ProjectHeaderProjectSelector
+        organization={mockOrg}
+        projectId=""
+        router={routerMock}
+      />,
       routerContext
     );
     openMenu(wrapper);
@@ -132,17 +82,7 @@ describe('ProjectSelector', function() {
       .find('AutoCompleteItem')
       .first()
       .simulate('click');
-    expect(wrapper.find('DropdownMenu').prop('isOpen')).toBe(false);
-  });
-
-  it('shows empty filter message when filtering has no results', function() {
-    let wrapper = mount(
-      <ProjectSelector organization={mockOrg} projectId="" />,
-      routerContext
-    );
-    openMenu(wrapper);
 
-    wrapper.find('StyledInput').simulate('change', {target: {value: 'Foo'}});
-    expect(wrapper.find('EmptyMessage').prop('children')).toBe('No projects found');
+    expect(routerMock.push).toHaveBeenCalledWith('/org/test-project/');
   });
 });
diff --git a/tests/js/spec/components/projectSelector.spec.jsx b/tests/js/spec/components/projectSelector.spec.jsx
new file mode 100644
index 0000000000..f05a40bccf
--- /dev/null
+++ b/tests/js/spec/components/projectSelector.spec.jsx
@@ -0,0 +1,255 @@
+import React from 'react';
+import {mount} from 'enzyme';
+
+import ProjectSelector from 'app/components/projectSelector';
+
+describe('ProjectSelector', function() {
+  const testTeam = TestStubs.Team({
+    id: 'test-team',
+    slug: 'test-team',
+    isMember: true,
+  });
+
+  const testProject = TestStubs.Project({
+    id: 'test-project',
+    slug: 'test-project',
+    isMember: true,
+    teams: [testTeam],
+  });
+  const anotherProject = TestStubs.Project({
+    id: 'another-project',
+    slug: 'another-project',
+    isMember: true,
+    teams: [testTeam],
+  });
+
+  const mockOrg = TestStubs.Organization({
+    id: 'org',
+    slug: 'org',
+    teams: [testTeam],
+    projects: [testProject, anotherProject],
+    features: ['new-teams'],
+    access: [],
+  });
+
+  const routerContext = TestStubs.routerContext([{organization: mockOrg}]);
+
+  const openMenu = wrapper =>
+    wrapper.find('[data-test-id="test-actor"]').simulate('click');
+
+  const actorRenderer = jest.fn(() => <div data-test-id="test-actor" />);
+
+  const props = {
+    organization: mockOrg,
+    projectId: '',
+    children: actorRenderer,
+  };
+
+  it('should show empty message with no projects button, when no projects, and has no "project:write" access', function() {
+    let wrapper = mount(
+      <ProjectSelector
+        {...props}
+        organization={{
+          id: 'org',
+          slug: 'org-slug',
+          teams: [],
+          projects: [],
+          access: [],
+        }}
+      />,
+      routerContext
+    );
+    openMenu(wrapper);
+    expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
+    // Should not have "Create Project" button
+    expect(wrapper.find('CreateProjectButton')).toHaveLength(0);
+  });
+
+  it('should show empty message and create project button, when no projects and has "project:write" access', function() {
+    let wrapper = mount(
+      <ProjectSelector
+        {...props}
+        organization={{
+          id: 'org',
+          slug: 'org-slug',
+          teams: [],
+          projects: [],
+          access: ['project:write'],
+        }}
+      />,
+      routerContext
+    );
+    openMenu(wrapper);
+    expect(wrapper.find('EmptyMessage').prop('children')).toBe('You have no projects');
+    // Should not have "Create Project" button
+    expect(wrapper.find('CreateProjectButton')).toHaveLength(1);
+  });
+
+  it('lists projects and has filter', function() {
+    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    openMenu(wrapper);
+    expect(wrapper.find('AutoCompleteItem')).toHaveLength(2);
+  });
+
+  it('can filter projects by project name', function() {
+    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    openMenu(wrapper);
+
+    wrapper.find('StyledInput').simulate('change', {target: {value: 'TEST'}});
+
+    const result = wrapper.find('AutoCompleteItem ProjectBadge');
+    expect(result).toHaveLength(1);
+    expect(result.prop('project').slug).toBe('test-project');
+  });
+
+  it('does not close dropdown when input is clicked', async function() {
+    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    openMenu(wrapper);
+
+    wrapper.find('StyledInput').simulate('click');
+    await tick();
+    wrapper.update();
+    expect(wrapper.find('DropdownMenu').prop('isOpen')).toBe(true);
+  });
+
+  it('closes dropdown when project is selected', function() {
+    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    openMenu(wrapper);
+
+    // Select first project
+    wrapper
+      .find('AutoCompleteItem')
+      .first()
+      .simulate('click');
+    expect(wrapper.find('DropdownMenu').prop('isOpen')).toBe(false);
+  });
+
+  it('calls callback when project is selected', function() {
+    let mock = jest.fn();
+    let wrapper = mount(<ProjectSelector {...props} onSelect={mock} />, routerContext);
+    openMenu(wrapper);
+
+    // Select first project
+    wrapper
+      .find('AutoCompleteItem')
+      .first()
+      .simulate('click');
+
+    expect(mock).toHaveBeenCalledWith(
+      expect.objectContaining({
+        slug: 'test-project',
+      })
+    );
+  });
+
+  it('shows empty filter message when filtering has no results', function() {
+    let wrapper = mount(<ProjectSelector {...props} />, routerContext);
+    openMenu(wrapper);
+
+    wrapper.find('StyledInput').simulate('change', {target: {value: 'Foo'}});
+    expect(wrapper.find('EmptyMessage').prop('children')).toBe('No projects found');
+  });
+
+  it('does not call `onSelect` when using multi select', function() {
+    let mock = jest.fn();
+    let wrapper = mount(
+      <ProjectSelector {...props} multi onSelect={mock} />,
+      routerContext
+    );
+    openMenu(wrapper);
+
+    // Select first project
+    wrapper
+      .find('MultiSelectWrapper')
+      .first()
+      .simulate('click');
+
+    // onSelect callback should NOT be called
+    expect(mock).not.toHaveBeenCalled();
+  });
+
+  it('calls `onMultiSelect` and render prop when using multi select as an uncontrolled component', async function() {
+    let mock = jest.fn();
+    let wrapper = mount(
+      <ProjectSelector {...props} multi onMultiSelect={mock} />,
+      routerContext
+    );
+    openMenu(wrapper);
+
+    // Select first project
+    wrapper
+      .find('MultiSelect')
+      .at(0)
+      .simulate('click', {target: {checked: true}});
+
+    expect(mock).toHaveBeenLastCalledWith(
+      [
+        expect.objectContaining({
+          slug: 'test-project',
+        }),
+      ],
+      expect.anything()
+    );
+    expect(actorRenderer).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        selectedProjects: [expect.objectContaining({slug: 'test-project'})],
+      })
+    );
+    expect(Array.from(wrapper.state('selectedProjects').keys())).toEqual([
+      'test-project',
+    ]);
+
+    // second project
+    wrapper
+      .find('MultiSelect')
+      .at(1)
+      .simulate('click', {target: {checked: true}});
+
+    expect(mock).toHaveBeenLastCalledWith(
+      [
+        expect.objectContaining({
+          slug: 'test-project',
+        }),
+        expect.objectContaining({
+          slug: 'another-project',
+        }),
+      ],
+      expect.anything()
+    );
+    expect(actorRenderer).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        selectedProjects: [
+          expect.objectContaining({slug: 'test-project'}),
+          expect.objectContaining({slug: 'another-project'}),
+        ],
+      })
+    );
+    expect(Array.from(wrapper.state('selectedProjects').keys())).toEqual([
+      'test-project',
+      'another-project',
+    ]);
+
+    // Can unselect item
+    wrapper
+      .find('MultiSelect')
+      .at(1)
+      .simulate('click', {target: {checked: false}});
+
+    expect(mock).toHaveBeenLastCalledWith(
+      [
+        expect.objectContaining({
+          slug: 'test-project',
+        }),
+      ],
+      expect.anything()
+    );
+    expect(actorRenderer).toHaveBeenLastCalledWith(
+      expect.objectContaining({
+        selectedProjects: [expect.objectContaining({slug: 'test-project'})],
+      })
+    );
+    expect(Array.from(wrapper.state('selectedProjects').keys())).toEqual([
+      'test-project',
+    ]);
+  });
+});
diff --git a/tests/js/spec/views/organizationEvents/index.spec.jsx b/tests/js/spec/views/organizationEvents/index.spec.jsx
index 0afabe79f7..53f8570434 100644
--- a/tests/js/spec/views/organizationEvents/index.spec.jsx
+++ b/tests/js/spec/views/organizationEvents/index.spec.jsx
@@ -42,13 +42,13 @@ describe('OrganizationEvents', function() {
   });
 
   it('renders', function() {
-    expect(wrapper.find('Content')).toHaveLength(1);
+    expect(wrapper.find('OrganizationEventsContent')).toHaveLength(1);
   });
 
   it('updates router when changing environments', async function() {
     expect(wrapper.state('environment')).toEqual([]);
 
-    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     await tick();
     wrapper.update();
 
@@ -70,6 +70,9 @@ describe('OrganizationEvents', function() {
     );
 
     // Select a second environment, "staging"
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+    await tick();
+    wrapper.update();
     selectByLabel(wrapper, 'staging', {control: true, name: 'environments'});
     expect(wrapper.state('environment')).toEqual(['production', 'staging']);
 
@@ -86,6 +89,9 @@ describe('OrganizationEvents', function() {
     );
 
     // Can clear
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
+    await tick();
+    wrapper.update();
     clearValue(wrapper);
     expect(wrapper.state('environment')).toEqual([]);
     wrapper.find('Button[data-test-id="update-envs"]').simulate('click');
diff --git a/tests/js/spec/views/organizationHealth/index.spec.jsx b/tests/js/spec/views/organizationHealth/index.spec.jsx
index c2d4e9175a..5ee29c3626 100644
--- a/tests/js/spec/views/organizationHealth/index.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/index.spec.jsx
@@ -46,7 +46,7 @@ describe('OrganizationHealth', function() {
   });
 
   it('updates router when changing environments', async function() {
-    wrapper.find('MultipleEnvironmentSelector .dropdown-actor').simulate('click');
+    wrapper.find('MultipleEnvironmentSelector HeaderItem').simulate('click');
     await tick();
     wrapper.update();
 
diff --git a/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx b/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
index f934453a60..c8901ba223 100644
--- a/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
+++ b/tests/js/spec/views/organizationHealth/util/healthRequest.spec.jsx
@@ -24,7 +24,7 @@ describe('HealthRequest', function() {
   const mock = jest.fn(() => null);
   const DEFAULTS = {
     api: {},
-    projects: [project.id],
+    projects: [parseInt(project.id, 10)],
     environments: [],
     period: '24h',
     organization,
@@ -81,13 +81,13 @@ describe('HealthRequest', function() {
     it('makes a new request if projects prop changes', async function() {
       doHealthRequest.mockClear();
 
-      wrapper.setProps({projects: ['123']});
+      wrapper.setProps({projects: [123]});
       await tick();
       wrapper.update();
       expect(doHealthRequest).toHaveBeenCalledWith(
         expect.anything(),
         expect.objectContaining({
-          projects: ['123'],
+          projects: [123],
         })
       );
     });
diff --git a/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
index 0496615531..8c7e3de406 100644
--- a/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
+++ b/tests/js/spec/views/projectInstall/__snapshots__/newProject.spec.jsx.snap
@@ -10,7 +10,7 @@ exports[`NewProjectPlatform render() should render 1`] = `
     <div
       className="p-t-1 p-b-1"
     >
-      <withRouter(ProjectSelector)
+      <withRouter(ProjectHeaderProjectSelector)
         organization={
           Object {
             "id": "1337",
