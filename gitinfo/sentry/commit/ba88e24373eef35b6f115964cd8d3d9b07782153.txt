commit ba88e24373eef35b6f115964cd8d3d9b07782153
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 17 21:52:26 2013 -0700

    Add multi backend to nodestore

diff --git a/src/sentry/nodestore/multi/__init__.py b/src/sentry/nodestore/multi/__init__.py
new file mode 100644
index 0000000000..23e12bb377
--- /dev/null
+++ b/src/sentry/nodestore/multi/__init__.py
@@ -0,0 +1,7 @@
+"""
+sentry.nodestore.multi
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
diff --git a/src/sentry/nodestore/multi/backend.py b/src/sentry/nodestore/multi/backend.py
new file mode 100644
index 0000000000..d5c3ee46ca
--- /dev/null
+++ b/src/sentry/nodestore/multi/backend.py
@@ -0,0 +1,73 @@
+"""
+sentry.nodestore.multi.backend
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010-2013 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+from __future__ import absolute_import
+
+import random
+
+from django.utils import timezone
+
+from sentry.nodestore.base import NodeStorage
+from sentry.utils.imports import import_string
+
+
+class MultiNodeStorage(NodeStorage):
+    """
+    A backend which will write to multiple backends, and read from a random
+    choice.
+
+    This is not intended for consistency, but is instead designed to allow you
+    to dual-write for purposes of migrations.
+
+    >>> MultiNodeStorage(backends=[
+    >>>     ('sentry.nodestore.django.backend.DjangoNodeStorage', {}),
+    >>>     ('sentry.nodestore.riak.backend.RiakNodeStorage', {}),
+    >>> ])
+    """
+    def __init__(self, backends, **kwargs):
+        assert backends, "you should provide at least one backend"
+
+        self.backends = []
+        for backend, backend_options in backends:
+            cls = import_string(backend)
+            self.backends.append(cls(**backend_options))
+        super(MultiNodeStorage, self).__init__(**kwargs)
+
+    def get(self, id):
+        # just fetch it from a random backend, we're not aiming for consistency
+        backend = random.choice(self.backends)
+        return backend.get(id=id)
+
+    def get_multi(self, id_list):
+        backend = random.choice(self.backends)
+        return backend.get_multi(id_list=id_list)
+
+    def set(self, id, data, timestamp=None):
+        if timestamp is None:
+            timestamp = timezone.now()
+
+        should_raise = False
+        for backend in self.backends:
+            try:
+                backend.set(id=id, data=data, timestamp=timestamp)
+            except Exception:
+                should_raise = True
+
+        if should_raise:
+            raise
+
+    def set_multi(self, values):
+        should_raise = False
+        for backend in self.backends:
+            try:
+                backend.set_multi(values)
+            except Exception:
+                should_raise = True
+
+        if should_raise:
+            raise
