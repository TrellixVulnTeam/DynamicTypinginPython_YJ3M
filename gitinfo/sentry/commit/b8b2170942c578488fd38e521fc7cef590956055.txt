commit b8b2170942c578488fd38e521fc7cef590956055
Author: Ben Vinegar <ben@benv.ca>
Date:   Fri Sep 18 16:09:32 2015 -0700

    Bring back "original src" tooltip for frames w/ source maps (fixes #1978)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
index 615d85e6bf..718412cb14 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
@@ -1,14 +1,25 @@
 import React from "react";
+import _ from "underscore";
 import classNames from "classnames";
 import {defined, objectIsEmpty} from "../../../utils";
 
+import TooltipMixin from "../../../mixins/tooltip";
 import FrameVariables from "./frameVariables";
 
+
 var Frame = React.createClass({
   propTypes: {
     data: React.PropTypes.object.isRequired
   },
 
+  mixins: [
+    TooltipMixin({
+      html: true,
+      selector: ".tip",
+      trigger: "click"
+    })
+  ],
+
   getInitialState() {
     // isExpanded can be initialized to true via parent component;
     // data synchronization is not important
@@ -32,16 +43,34 @@ var Frame = React.createClass({
     });
   },
 
-  render() {
-    var data = this.props.data;
-
-    var className = classNames({
-      "frame": true,
-      "system-frame": !data.inApp,
-      "frame-errors": data.errors,
-    });
+  renderOriginalSourceInfo() {
+    let data = this.props.data;
+
+    // TODO: is there a way to render a react element as a string? All the
+    // documented methods don't exist on the client (meant for server rendering)
+    let escapedAbsPath = this.isUrl(data.origAbsPath)
+      ? `<a href="${_.escape(data.origAbsPath)}">${_.escape(data.origAbsPath)}</a>`
+      : _.escape(data.origAbsPath);
+
+    return (`
+      <div>
+        <strong>Original Filename</strong><br/>
+        ${escapedAbsPath}<br/>
+        <strong>Line Number</strong><br/>
+        ${_.escape(data.origLineNo)}<br/>
+        <strong>Column Number</strong><br/>
+        ${_.escape(data.origColNo)}<br/>
+        <strong>Function</strong><br/>
+        ${_.escape(data.origFunction)}<br/>
+        <strong>Source Map</strong><br/>
+        <a href="${_.escape(data.mapUrl)}">${_.escape(data.map)}<br/>
+      </div>
+    `);
+  },
 
-    var title = [];
+  renderTitle() {
+    let data = this.props.data;
+    let title = [];
 
     if (defined(data.filename || data.module)) {
       title.push(<code key="filename">{data.filename || data.module}</code>);
@@ -68,21 +97,34 @@ var Frame = React.createClass({
       }
     }
 
+    if (defined(data.origAbsPath)) {
+      title.push(
+        <a className="in-at tip original-src" title={this.renderOriginalSourceInfo()}>
+          <span className="icon-question" />
+        </a>
+      );
+    }
+
     if (data.inApp) {
       title.push(<span key="in-app"><span className="divider"/>application</span>);
     }
+    return title;
+  },
 
-    var outerClassName = "context";
+  renderContext() {
+    let data = this.props.data;
+    let context = '';
+
+    let outerClassName = "context";
     if (this.state.isExpanded) {
       outerClassName += " expanded";
     }
 
-    let context = '';
     let hasContextSource = defined(data.context) && data.context.length;
     let hasContextVars = !objectIsEmpty(data.vars);
 
     if (hasContextSource || hasContextVars) {
-      var startLineNo = hasContextSource ? data.context[0][0] : '';
+      let startLineNo = hasContextSource ? data.context[0][0] : '';
       context = (
         <ol start={startLineNo} className={outerClassName}
             onClick={this.toggleContext}>
@@ -91,13 +133,13 @@ var Frame = React.createClass({
               key="errors">{data.errors.join(", ")}</li>
           }
           {(data.context || []).map((line) => {
-            var liClassName = "expandable";
+            let liClassName = "expandable";
             if (line[0] === data.lineNo) {
               liClassName += " active";
             }
 
-            var lineWs;
-            var lineCode;
+            let lineWs;
+            let lineCode;
             if (defined(line[1])) {
               [, lineWs, lineCode] = line[1].match(/^(\s*)(.*?)$/m);
             } else {
@@ -119,12 +161,23 @@ var Frame = React.createClass({
         </ol>
       );
     }
+    return context;
+  },
+
+  render() {
+    let data = this.props.data;
+
+    let className = classNames({
+      "frame": true,
+      "system-frame": !data.inApp,
+      "frame-errors": data.errors,
+    });
+
+    let context = this.renderContext();
 
-    // TODO(dcramer): implement popover annotations
-    // TODO(dcramer): implement local vars
     return (
       <li className={className}>
-        <p>{title}
+        <p>{this.renderTitle()}
           {context ?
             <a
               title="Toggle context"
diff --git a/src/sentry/static/sentry/less/group-detail.less b/src/sentry/static/sentry/less/group-detail.less
index 8cb9ccf05f..f81c507187 100644
--- a/src/sentry/static/sentry/less/group-detail.less
+++ b/src/sentry/static/sentry/less/group-detail.less
@@ -804,7 +804,7 @@
 }
 
 .frame {
-  overflow: hidden;
+  list-style-type: none;
   position: relative;
   margin-bottom: 0;
 
@@ -831,6 +831,13 @@
     }
   }
 
+  .original-src {
+    padding-left: 3px;
+    font-size: 13px;
+    position: relative;
+    top: 1px;
+  }
+
   .icon-open {
     font-size: 12px;
     margin-right: 3px;
@@ -857,6 +864,12 @@
     }
   }
 
+  .tooltip-inner {
+    word-wrap: break-word;
+    text-align: left;
+    max-width: 300px;
+  }
+
   .divider {
     border-left: 1px solid @trim;
     display: inline-block;
