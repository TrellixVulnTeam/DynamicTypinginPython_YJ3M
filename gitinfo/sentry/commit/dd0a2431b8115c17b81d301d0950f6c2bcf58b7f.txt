commit dd0a2431b8115c17b81d301d0950f6c2bcf58b7f
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Wed Sep 18 12:59:08 2019 -0700

    ref(ts): Convert `<JsonForm>` (#14744)
    
    * Refactor `FormPanel` out of `jsonForm`
    * Convert `<FieldFromConfig>`
    * Add a types file for form fields

diff --git a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
index 0094f45a5b..bf58c5a414 100644
--- a/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
+++ b/src/sentry/static/sentry/app/components/modals/sentryAppPublishRequestModal.tsx
@@ -60,7 +60,7 @@ export default class SentryAppPublishRequestModal extends React.Component<Props>
     );
 
     //No translations since we need to be able to read this email :)
-    const baseFields = [
+    const baseFields: JsonForm['props']['fields'] = [
       {
         type: 'textarea',
         required: true,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
similarity index 94%
rename from src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
rename to src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
index 402122034d..889711aa78 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
@@ -15,7 +15,18 @@ import ChoiceMapperField from './choiceMapperField';
 import RichListField from './richListField';
 import FieldSeparator from './fieldSeparator';
 
-export default class FieldFromConfig extends React.Component {
+import {Field} from './type';
+
+type Props = {
+  field: Field;
+  highlighted?: boolean;
+  disabled?: boolean;
+
+  // TODO(ts): Investigate further
+  access: any;
+};
+
+export default class FieldFromConfig extends React.Component<Props> {
   static propTypes = {
     field: PropTypes.shape({
       name: PropTypes.string,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
new file mode 100644
index 0000000000..80f6a80d0a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/formPanel.tsx
@@ -0,0 +1,98 @@
+import React from 'react';
+
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
+import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
+
+import {FieldObject, JsonFormObject} from './type';
+
+type Props = {
+  /**
+   * Panel title
+   */
+  title?: string;
+
+  /**
+   * List of fields to render
+   */
+  fields: FieldObject[];
+
+  // TODO(ts): See if this is still in use
+  access: any;
+  features: any;
+
+  additionalFieldProps: {[key: string]: any};
+
+  /**
+   * The name of the field that should be highlighted
+   */
+  highlighted?: string;
+
+  /**
+   * Renders inside of PanelBody at the start
+   */
+  renderHeader?: (arg: JsonFormObject) => React.ReactNode;
+
+  /**
+   * Renders inside of PanelBody before PanelBody close
+   */
+  renderFooter?: (arg: JsonFormObject) => React.ReactNode;
+
+  /**
+   * Disables the entire form
+   */
+  disabled?: boolean;
+};
+
+export default class FormPanel extends React.Component<Props> {
+  render() {
+    const {
+      title,
+      fields,
+      access,
+      disabled,
+      additionalFieldProps,
+      renderFooter,
+      renderHeader,
+      ...otherProps
+    } = this.props;
+
+    return (
+      <Panel key={title} id={sanitizeQuerySelector(title)}>
+        <PanelHeader>{title}</PanelHeader>
+        <PanelBody>
+          {typeof renderHeader === 'function' && renderHeader({title, fields})}
+
+          {fields.map(field => {
+            if (typeof field === 'function') {
+              return field();
+            }
+
+            // eslint-disable-next-line no-unused-vars
+            const {defaultValue, ...fieldWithoutDefaultValue} = field;
+
+            // Allow the form panel disabled prop to override the fields
+            // disabled prop, with fallback to the fields disabled state.
+            if (disabled === true) {
+              fieldWithoutDefaultValue.disabled = true;
+              fieldWithoutDefaultValue.disabledReason = undefined;
+            }
+
+            return (
+              <FieldFromConfig
+                access={access}
+                disabled={disabled}
+                key={field.name}
+                {...otherProps}
+                {...additionalFieldProps}
+                field={fieldWithoutDefaultValue}
+                highlighted={this.props.highlighted === `#${field.name}`}
+              />
+            );
+          })}
+          {typeof renderFooter === 'function' && renderFooter({title, fields})}
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
deleted file mode 100644
index 7dfc5f0940..0000000000
--- a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.jsx
+++ /dev/null
@@ -1,239 +0,0 @@
-import {Box} from 'grid-emotion';
-import PropTypes from 'prop-types';
-import React from 'react';
-import * as Sentry from '@sentry/browser';
-import scrollToElement from 'scroll-to-element';
-
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {defined} from 'app/utils';
-import FieldFromConfig from 'app/views/settings/components/forms/fieldFromConfig';
-import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
-
-class JsonForm extends React.Component {
-  static propTypes = {
-    /**
-     * Fields that are grouped by "section"
-     */
-    forms: PropTypes.arrayOf(
-      PropTypes.shape({
-        title: PropTypes.string,
-        fields: PropTypes.arrayOf(
-          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
-        ),
-      })
-    ),
-
-    /**
-     * If `forms` is not defined, `title` + `fields` must be required.
-     * Allows more fine grain control of title/fields
-     */
-    fields: PropTypes.arrayOf(
-      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
-    ),
-    /**
-     * Panel title if `forms` is not defined
-     */
-    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
-
-    access: PropTypes.object,
-    features: PropTypes.object,
-    additionalFieldProps: PropTypes.object,
-    renderFooter: PropTypes.func,
-    /**
-     * Renders inside of PanelBody
-     */
-    renderHeader: PropTypes.func,
-    /**
-     * Disables the entire form
-     */
-    disabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
-  };
-
-  static defaultProps = {
-    additionalFieldProps: {},
-  };
-
-  static contextTypes = {
-    location: PropTypes.object,
-  };
-
-  constructor(props, ...args) {
-    super(props, ...args);
-    this.state = {highlighted: this.getLocation(props).hash};
-  }
-
-  componentDidMount() {
-    this.scrollToHash();
-  }
-
-  componentWillReceiveProps(nextProps, e) {
-    if (this.getLocation(this.props).hash !== this.getLocation(nextProps).hash) {
-      const hash = this.getLocation(nextProps).hash;
-      this.scrollToHash(hash);
-      this.setState({highlighted: hash});
-    }
-  }
-
-  getLocation = props => {
-    return props.location || this.context.location || {};
-  };
-
-  scrollToHash(toHash) {
-    const hash = toHash || this.getLocation(this.props).hash;
-
-    if (!hash) {
-      return;
-    }
-
-    // Push onto callback queue so it runs after the DOM is updated,
-    // this is required when navigating from a different page so that
-    // the element is rendered on the page before trying to getElementById.
-    try {
-      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {
-        align: 'middle',
-        offset: -100,
-      });
-    } catch (err) {
-      Sentry.captureException(err);
-    }
-  }
-
-  render() {
-    const {
-      forms,
-      title,
-      fields,
-
-      access,
-      disabled,
-      features,
-      additionalFieldProps,
-      renderFooter,
-      renderHeader,
-      // eslint-disable-next-line no-unused-vars
-      location,
-      ...otherProps
-    } = this.props;
-
-    const hasFormGroups = defined(forms);
-    const formPanelProps = {
-      access,
-      disabled,
-      features,
-      additionalFieldProps,
-      renderFooter,
-      renderHeader,
-      highlighted: this.state.highlighted,
-    };
-
-    return (
-      <Box {...otherProps}>
-        {hasFormGroups ? (
-          forms.map(formGroup => (
-            <FormPanel
-              key={formGroup.title}
-              title={formGroup.title}
-              fields={formGroup.fields}
-              {...formPanelProps}
-            />
-          ))
-        ) : (
-          <FormPanel title={title} fields={fields} {...formPanelProps} />
-        )}
-      </Box>
-    );
-  }
-}
-
-export default JsonForm;
-
-class FormPanel extends React.Component {
-  static propTypes = {
-    /**
-     * Panel title
-     */
-    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
-    /**
-     * List of fields to render
-     */
-    fields: PropTypes.arrayOf(
-      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
-    ),
-
-    access: PropTypes.object,
-    additionalFieldProps: PropTypes.object,
-
-    /**
-     * The name of the field that should be highlighted
-     */
-    highlighted: PropTypes.string,
-
-    /**
-     * Renders inside of PanelBody at the start
-     */
-    renderHeader: PropTypes.func,
-    /**
-     * Renders inside of PanelBody before PanelBody close
-     */
-    renderFooter: PropTypes.func,
-    /**
-     * Disables the entire form panel.
-     */
-    disabled: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),
-  };
-
-  render() {
-    const {
-      title,
-      fields,
-      access,
-      disabled,
-      additionalFieldProps,
-      renderFooter,
-      renderHeader,
-      // eslint-disable-next-line no-unused-vars
-      location,
-      ...otherProps
-    } = this.props;
-    const shouldRenderFooter = typeof renderFooter === 'function';
-    const shouldRenderHeader = typeof renderHeader === 'function';
-
-    return (
-      <Panel key={title} id={sanitizeQuerySelector(title)}>
-        <PanelHeader>{title}</PanelHeader>
-        <PanelBody>
-          {shouldRenderHeader && renderHeader({title, fields})}
-
-          {fields.map(field => {
-            if (typeof field === 'function') {
-              return field();
-            }
-
-            // eslint-disable-next-line no-unused-vars
-            const {defaultValue, ...fieldWithoutDefaultValue} = field;
-
-            // Allow the form panel disabled prop to override the fields
-            // disabled prop, with fallback to the fields disabled state.
-            if (disabled === true) {
-              fieldWithoutDefaultValue.disabled = true;
-              fieldWithoutDefaultValue.disabledReason = undefined;
-            }
-
-            return (
-              <FieldFromConfig
-                access={access}
-                disabled={disabled}
-                key={field.name}
-                {...otherProps}
-                {...additionalFieldProps}
-                field={fieldWithoutDefaultValue}
-                highlighted={this.props.highlighted === `#${field.name}`}
-              />
-            );
-          })}
-          {shouldRenderFooter && renderFooter({title, fields})}
-        </PanelBody>
-      </Panel>
-    );
-  }
-}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
new file mode 100644
index 0000000000..ba8f70373d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/jsonForm.tsx
@@ -0,0 +1,172 @@
+import {Box} from 'grid-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import * as Sentry from '@sentry/browser';
+import scrollToElement from 'scroll-to-element';
+
+import {sanitizeQuerySelector} from 'app/utils/sanitizeQuerySelector';
+import {Location} from 'history';
+
+import {FieldObject, JsonFormObject} from './type';
+import FieldFromConfig from './fieldFromConfig';
+import FormPanel from './formPanel';
+
+type Props = {
+  /**
+   * Fields that are grouped by "section"
+   */
+  forms?: JsonFormObject[];
+
+  /**
+   * If `forms` is not defined, `title` + `fields` must be required.
+   * Allows more fine grain control of title/fields
+   */
+  fields?: FieldObject[];
+  location?: Location;
+} & Omit<React.ComponentProps<typeof FormPanel>, 'highlighted' | 'fields'>;
+
+type Context = {
+  location?: Location;
+};
+
+type State = {
+  // Field name that should be highlighted
+  highlighted?: string;
+};
+
+class JsonForm extends React.Component<Props, State> {
+  static propTypes = {
+    /**
+     * Fields that are grouped by "section"
+     */
+    forms: PropTypes.arrayOf(
+      PropTypes.shape({
+        title: PropTypes.string,
+        fields: PropTypes.arrayOf(
+          PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
+        ),
+      })
+    ),
+
+    /**
+     * If `forms` is not defined, `title` + `fields` must be required.
+     * Allows more fine grain control of title/fields
+     */
+    fields: PropTypes.arrayOf(
+      PropTypes.oneOfType([PropTypes.func, FieldFromConfig.propTypes.field])
+    ),
+    /**
+     * Panel title if `forms` is not defined
+     */
+    title: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),
+
+    access: PropTypes.object,
+    features: PropTypes.object,
+    renderFooter: PropTypes.func,
+    /**
+     * Renders inside of PanelBody
+     */
+    renderHeader: PropTypes.func,
+    /**
+     * Disables the entire form
+     */
+    disabled: PropTypes.bool,
+  };
+
+  static defaultProps = {
+    additionalFieldProps: {},
+  };
+
+  static contextTypes = {
+    location: PropTypes.object,
+  };
+
+  state: State = {
+    highlighted: getLocation(this.props, this.context).hash,
+  };
+
+  componentDidMount() {
+    this.scrollToHash();
+  }
+
+  componentWillReceiveProps(nextProps: Props) {
+    if (
+      getLocation(this.props, this.context).hash !==
+      getLocation(nextProps, this.context).hash
+    ) {
+      const hash = getLocation(nextProps, this.context).hash;
+      this.scrollToHash(hash);
+      this.setState({highlighted: hash});
+    }
+  }
+
+  scrollToHash(toHash?: string): void {
+    const hash = toHash || getLocation(this.props, this.context).hash;
+
+    if (!hash) {
+      return;
+    }
+
+    // Push onto callback queue so it runs after the DOM is updated,
+    // this is required when navigating from a different page so that
+    // the element is rendered on the page before trying to getElementById.
+    try {
+      scrollToElement(sanitizeQuerySelector(decodeURIComponent(hash)), {
+        align: 'middle',
+        offset: -100,
+      });
+    } catch (err) {
+      Sentry.captureException(err);
+    }
+  }
+
+  render() {
+    const {
+      forms,
+      title,
+      fields,
+
+      access,
+      disabled,
+      features,
+      additionalFieldProps,
+      renderFooter,
+      renderHeader,
+      location: _location,
+      ...otherProps
+    } = this.props;
+
+    const formPanelProps = {
+      access,
+      disabled,
+      features,
+      additionalFieldProps,
+      renderFooter,
+      renderHeader,
+      highlighted: this.state.highlighted,
+    };
+
+    return (
+      <Box {...otherProps}>
+        {typeof forms !== 'undefined' &&
+          forms.map(formGroup => (
+            <FormPanel
+              key={formGroup.title}
+              title={formGroup.title}
+              fields={formGroup.fields}
+              {...formPanelProps}
+            />
+          ))}
+        {typeof forms === 'undefined' && typeof fields !== 'undefined' && (
+          <FormPanel title={title} fields={fields} {...formPanelProps} />
+        )}
+      </Box>
+    );
+  }
+}
+
+export default JsonForm;
+
+function getLocation(props: Props, context: Context): Location | {hash?: string} {
+  return props.location || context.location || {};
+}
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
new file mode 100644
index 0000000000..3867a8b5d6
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -0,0 +1,97 @@
+import React from 'react';
+
+import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
+
+export const FieldType = [
+  'array',
+  'bool',
+  'boolean',
+  'choice_mapper',
+  'email',
+  'hidden',
+  'multichoice',
+  'number',
+  'radio',
+  'rich_list',
+  'secret',
+  'separator',
+  'string',
+  'text',
+  'url',
+] as const;
+
+export type FieldValue = any;
+
+type BaseField = {
+  label: React.ReactNode | (() => React.ReactNode);
+  name?: string;
+  help?: React.ReactNode | (() => React.ReactNode);
+  required?: boolean;
+  placeholder?: string | (() => string);
+  multiline?: boolean;
+  visible?: boolean | ((model: any) => boolean);
+  disabled?: boolean | (() => boolean);
+  disabledReason?: string;
+  defaultValue?: FieldValue;
+
+  /**
+   * Function to format the value displayed in the undo toast. May also be
+   * specified as false to disable showing the changed fields in the toast.
+   */
+  formatMessageValue?: Function | false;
+
+  /**
+   * Should show a "return key" icon in input?
+   */
+  showReturnButton?: boolean;
+
+  /**
+   * Iff false, disable saveOnBlur for field, instead show a save/cancel button
+   */
+  saveOnBlur?: boolean;
+  getValue?: (value: FieldValue) => any;
+  setValue?: (value: FieldValue) => any;
+
+  onChange?: (value: FieldValue) => void;
+
+  // TODO(ts): FormField prop?
+  inline?: boolean;
+
+  // TODO(ts): used in sentryAppPublishRequestModal
+  meta?: string;
+};
+
+type CustomType = {type: 'custom'} & {
+  Component: (arg: BaseField) => React.ReactNode;
+};
+
+// TODO(ts): These are field specific props
+// May not be needed as we convert the fields
+type SelectControlType = {type: 'choice' | 'select'} & {
+  choices: [number | string, number | string][];
+  multiple?: boolean;
+};
+
+type TextareaType = {type: 'textarea'} & {
+  autosize?: boolean;
+  rows?: number;
+};
+
+type RangeType = {type: 'range'} & Omit<RangeSlider['props'], 'value'> & {
+    value?: Pick<RangeSlider['props'], 'value'>;
+  };
+
+export type Field = (
+  | CustomType
+  | SelectControlType
+  | TextareaType
+  | RangeType
+  | {type: typeof FieldType[number]}) &
+  BaseField;
+
+export type FieldObject = Field | Function;
+
+export type JsonFormObject = {
+  title?: string;
+  fields: FieldObject[];
+};
