commit 47eee505ce7d02a6025808cf0e2cf9b43db71286
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jan 20 00:16:39 2015 -0800

    Move stream to react-router

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index c98297d8ef..349ccd02ce 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -23,7 +23,7 @@ class ProjectSerializer(serializers.ModelSerializer):
 class ProjectDetailsEndpoint(Endpoint):
     doc_section = DocSection.PROJECTS
 
-    def get(self, request, project_id):
+    def get(self, request, organization_slug, project_slug):
         """
         Retrieve a project
 
@@ -32,7 +32,10 @@ class ProjectDetailsEndpoint(Endpoint):
             {method} {path}
 
         """
-        project = Project.objects.get_from_cache(id=project_id)
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
+        )
 
         assert_perm(project, request.user, request.auth)
 
@@ -45,7 +48,7 @@ class ProjectDetailsEndpoint(Endpoint):
         return Response(data)
 
     @sudo_required
-    def put(self, request, project_id):
+    def put(self, request, organization_slug, project_slug):
         """
         Update a project
 
@@ -60,7 +63,10 @@ class ProjectDetailsEndpoint(Endpoint):
             }}
 
         """
-        project = Project.objects.get(id=project_id)
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
+        )
 
         assert_perm(project, request.user, request.auth, access=MEMBER_ADMIN)
 
@@ -94,7 +100,7 @@ class ProjectDetailsEndpoint(Endpoint):
         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
 
     @sudo_required
-    def delete(self, request, project_id):
+    def delete(self, request, organization_slug, project_slug):
         """
         Delete a project
 
@@ -106,7 +112,10 @@ class ProjectDetailsEndpoint(Endpoint):
         However once deletion has begun the state of a project changes and will
         be hidden from most public views.
         """
-        project = Project.objects.get(id=project_id)
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
+        )
 
         if project.is_internal_project():
             return Response('{"error": "Cannot remove projects internally used by Sentry."}',
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index f3c1162d9e..4ad8d0f5d1 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -38,7 +38,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
     # bookmarks=0/1
     # status=<x>
     # <tag>=<value>
-    def get(self, request, project_id):
+    def get(self, request, organization_slug, project_slug):
         """
         List a project's aggregates
 
@@ -52,8 +52,9 @@ class ProjectGroupIndexEndpoint(Endpoint):
         Any standard Sentry structured search query can be passed via the
         ``query`` parameter.
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
         )
 
         assert_perm(project, request.user, request.auth)
@@ -137,7 +138,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         return response
 
-    def put(self, request, project_id):
+    def put(self, request, organization_slug, project_slug):
         """
         Bulk mutate a list of aggregates
 
@@ -162,8 +163,9 @@ class ProjectGroupIndexEndpoint(Endpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation.
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
         )
 
         assert_perm(project, request.user, request.auth)
@@ -260,7 +262,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
 
         return Response(status=204)
 
-    def delete(self, request, project_id):
+    def delete(self, request, organization_slug, project_slug):
         """
         Bulk remove a list of aggregates
 
@@ -273,8 +275,9 @@ class ProjectGroupIndexEndpoint(Endpoint):
         If any ids are out of scope this operation will succeed without any data
         mutation
         """
-        project = Project.objects.get_from_cache(
-            id=project_id,
+        project = Project.objects.get(
+            organization__slug=organization_slug,
+            slug=project_slug,
         )
 
         assert_perm(project, request.user, request.auth)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 45722a3d10..7fade4adf6 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -85,10 +85,10 @@ urlpatterns = patterns(
         name='sentry-api-0-team-stats'),
 
     # Projects
-    url(r'^projects/(?P<project_id>\d+)/$',
+    url(r'^projects/(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/$',
         ProjectDetailsEndpoint.as_view(),
         name='sentry-api-0-project-details'),
-    url(r'^projects/(?P<project_id>\d+)/groups/$',
+    url(r'^projects/(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/groups/$',
         ProjectGroupIndexEndpoint.as_view(),
         name='sentry-api-0-project-group-index'),
     url(r'^projects/(?P<project_id>\d+)/members/$',
diff --git a/src/sentry/static/sentry/app/api.jsx b/src/sentry/static/sentry/app/api.jsx
new file mode 100644
index 0000000000..cbe3239b48
--- /dev/null
+++ b/src/sentry/static/sentry/app/api.jsx
@@ -0,0 +1,19 @@
+/*** @jsx React.DOM */
+
+var $ = require("jquery");
+
+var Client = function(){
+  this.baseUrl = "/api/0";
+};
+
+Client.prototype.request = function(path, options) {
+  $.ajax({
+    url: this.baseUrl + path,
+    method: options.method,
+    success: options.success,
+    error: options.error,
+    complete: options.complete
+  });
+};
+
+module.exports = new Client();
diff --git a/src/sentry/static/sentry/app/components/app.jsx b/src/sentry/static/sentry/app/components/app.jsx
new file mode 100644
index 0000000000..8cc54c858c
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/app.jsx
@@ -0,0 +1,14 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require('react-router');
+
+var App = React.createClass({
+  render: function () {
+    return (
+      <Router.RouteHandler {...this.props.params}/>
+    );
+  }
+});
+
+module.exports = App;
diff --git a/src/sentry/static/sentry/app/components/stream.jsx b/src/sentry/static/sentry/app/components/stream.jsx
index ae63d78a55..b4695dca2b 100644
--- a/src/sentry/static/sentry/app/components/stream.jsx
+++ b/src/sentry/static/sentry/app/components/stream.jsx
@@ -3,6 +3,7 @@ var React = require("react");
 var Reflux = require("reflux");
 var $ = require("jquery");
 
+var api = require("../api");
 var AggregateListActions = require("../actions/aggregateListActions");
 var AggregateListStore = require("../stores/aggregateListStore");
 var AlertActions = require("../actions/alertActions");
@@ -109,9 +110,7 @@ StreamPoller.prototype.disable = function(){
   }
 };
 StreamPoller.prototype.poll = function() {
-  $.ajax({
-    url: this._pollingEndpoint,
-    method: 'GET',
+  api.request(this._pollingEndpoint, {
     success: function(data, textStatus, jqXHR){
       // cancel in progress operation if disabled
       if (!this._active) {
@@ -140,16 +139,14 @@ var Stream = React.createClass({
   mixins: [Reflux.connect(AggregateListStore, "aggList")],
 
   propTypes: {
-    aggList: React.PropTypes.array.isRequired,
-    project: React.PropTypes.shape({
-      id: React.PropTypes.string.isRequired
-    }).isRequired,
-    memberList: React.PropTypes.instanceOf(Array),
-    initialQuery: React.PropTypes.string,
-    pageLinks: React.PropTypes.string
+    organizationId: React.PropTypes.string.isRequired,
+    projectId: React.PropTypes.string.isRequired,
   },
 
   getInitialState: function() {
+    var params = utils.getQueryParams();
+    var query = params.query === undefined ? 'is:unresolved': params.query;
+
     return {
       aggList: new utils.Collection([], {
         equals: function(self, other) {
@@ -157,26 +154,37 @@ var Stream = React.createClass({
         },
         limit: 50
       }),
+      memberList: [],
       selectAllActive: false,
       multiSelected: false,
       anySelected: false,
       statsPeriod: '24h',
-      query: this.props.initialQuery,
-      pageLinks: this.props.pageLinks,
-      realtimeActive: false
+      realtimeActive: false,
+      pageLinks: '',
+      query: query
     };
   },
 
-  componentDidMount: function() {
+  componentWillMount: function() {
     this._poller = new StreamPoller({
       success: this.handleRealtimePoll,
-      endpoint: this.getPollingEndpoint()
+      endpoint: this.getAggregateListEndpoint()
     });
-    if (this.state.realtimeActive) {
-      this._poller.enable();
-    }
 
-    AggregateListStore.loadInitialData(this.props.aggList);
+    api.request(this.getAggregateListEndpoint(), {
+      success: function(data, textStatus, jqXHR) {
+        AggregateListStore.loadInitialData(data);
+
+        this.setState({
+          pageLinks: jqXHR.getResponseHeader('Link')
+        });
+      }.bind(this),
+      complete: function() {
+        if (this.state.realtimeActive) {
+          this._poller.enable();
+        }
+      }.bind(this)
+    });
   },
 
   componentWillUnmount: function() {
@@ -193,13 +201,13 @@ var Stream = React.createClass({
     }
   },
 
-  getPollingEndpoint: function() {
+  getAggregateListEndpoint: function() {
     var params = utils.getQueryParams();
-    params.query = this.props.initialQuery;
+    params.query = this.state.query;
 
     var querystring = $.param(params);
 
-    return '/api/0/projects/' + this.props.project.id + '/groups/?' + querystring;
+    return '/projects/' + this.props.organizationId + '/' + this.props.projectId + '/groups/?' + querystring;
   },
 
   handleSelect: function(aggId, event) {
@@ -355,7 +363,7 @@ var Stream = React.createClass({
       return (
         <Aggregate data={node} key={node.id}
                    isSelected={node.isSelected}
-                   memberList={this.props.memberList}
+                   memberList={this.state.memberList}
                    onSelect={this.handleSelect.bind(this, node.id)}
                    statsPeriod={this.state.statsPeriod} />
       );
diff --git a/src/sentry/static/sentry/app/components/streamPagination.jsx b/src/sentry/static/sentry/app/components/streamPagination.jsx
index 481b5af84c..5ac3736c2d 100644
--- a/src/sentry/static/sentry/app/components/streamPagination.jsx
+++ b/src/sentry/static/sentry/app/components/streamPagination.jsx
@@ -11,7 +11,7 @@ var StreamPagination = React.createClass({
   },
 
   render: function(){
-    if (this.props.aggList.length === 0) {
+    if (!this.props.pageLinks || this.props.aggList.length === 0) {
       return <div />;
     }
 
diff --git a/src/sentry/static/sentry/app/main.jsx b/src/sentry/static/sentry/app/main.jsx
index b7e5a7a56f..fce1f6b44a 100644
--- a/src/sentry/static/sentry/app/main.jsx
+++ b/src/sentry/static/sentry/app/main.jsx
@@ -48,8 +48,12 @@ module.exports = {
   jQuery: jQuery,
   Raven: require("raven-js"),
   React: require("react"),
+  Router: require("react-router"),
+
+  routes: require("./routes"),
 
   Alerts: require("./components/alerts"),
+  App: require("./components/app"),
   Stream: require("./components/stream"),
   AggregateChart: require("./components/aggregateChart"),
   AggregateDetails: require("./components/aggregateDetails")
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
new file mode 100644
index 0000000000..522446a088
--- /dev/null
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -0,0 +1,25 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+var Route = Router.Route;
+var DefaultRoute = Router.DefaultRoute;
+
+var App = require("./components/app");
+var Stream = require("./components/stream");
+
+var routes = (
+  <Route name="app" path="/" handler={App}>
+    <Route name="stream" path="/:organizationId/:projectId/" handler={Stream}/>
+  </Route>
+);
+
+module.exports = routes;
+    // React.render(React.createFactory(Stream)({
+    //   aggList: {% serialize event_list %},
+    //   project: {% serialize project %},
+    //   memberList: {% serialize member_list %},
+    //   initialQuery: {% convert_to_json query %},
+    //   pageLinks: {% convert_to_json page_links %}
+    // }), document.getElementById('blk_stream'));
+
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index 85fa1d8a07..5ce37ea626 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -4,16 +4,14 @@
 {% load sentry_plugins %}
 
 {% block content %}
-    <div id="blk_stream"></div>
-    <script>
-    $(function(){
-      React.render(React.createFactory(Stream)({
-        aggList: {% serialize event_list %},
-        project: {% serialize project %},
-        memberList: {% serialize member_list %},
-        initialQuery: {% convert_to_json query %},
-        pageLinks: {% convert_to_json page_links %}
+  <div id="blk_stream"></div>
+  <script>
+  $(function(){
+    Router.run(routes, Router.HistoryLocation, function(Handler, state) {
+      React.render(React.createFactory(Handler)({
+        params: state.params
       }), document.getElementById('blk_stream'));
     });
-    </script>
+  });
+  </script>
 {% endblock %}
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 14b7ac0ec8..f45d7263b6 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -18,11 +18,8 @@ from django.http import (
 from django.shortcuts import get_object_or_404
 from django.utils import timezone
 
-from sentry.api import client
 from sentry.api.serializers import serialize
-from sentry.constants import (
-    SORT_OPTIONS, MEMBER_USER
-)
+from sentry.constants import MEMBER_USER
 from sentry.db.models import create_or_update
 from sentry.models import (
     Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen
@@ -133,33 +130,10 @@ def wall_display(request, organization, team):
 @login_required
 @has_access
 def group_list(request, organization, project):
-    params = request.GET.copy()
-    params.setdefault('query', 'is:resolved')
-
-    response = client.get(
-        path='/projects/{}/groups/'.format(project.id),
-        params=params,
-        user=request.user,
-    )
-    event_list = response.data
-    page_links = response['Link']
-    query = params['query']
-
-    response = client.get(
-        path='/projects/{}/members/'.format(project.id),
-        user=request.user,
-    )
-    member_list = response.data
-
     return render_to_response('sentry/groups/group_list.html', {
         'team': project.team,
         'organization': organization,
         'project': project,
-        'event_list': event_list,
-        'member_list': member_list,
-        'page_links': page_links,
-        'query': query,
-        'SORT_OPTIONS': SORT_OPTIONS,
     }, request)
 
 
diff --git a/webpack.config.js b/webpack.config.js
index a1524245d4..e336fa65c5 100644
--- a/webpack.config.js
+++ b/webpack.config.js
@@ -24,6 +24,7 @@ module.exports = {
 
       "raven",
       "react/addons",
+      "react-router",
       "react-bootstrap",
       "reflux"
     ]
@@ -38,7 +39,7 @@ module.exports = {
   },
   plugins: [
     new webpack.optimize.CommonsChunkPlugin("vendor", distPath + "/vendor.js"),
-    new webpack.optimize.UglifyJsPlugin(),
+    // new webpack.optimize.UglifyJsPlugin(),
     new webpack.optimize.DedupePlugin(),
     new webpack.ProvidePlugin({
         $: 'jquery',
