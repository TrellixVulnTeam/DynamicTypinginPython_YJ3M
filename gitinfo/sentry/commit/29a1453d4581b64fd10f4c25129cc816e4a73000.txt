commit 29a1453d4581b64fd10f4c25129cc816e4a73000
Author: Mark Story <mark@sentry.io>
Date:   Fri Dec 13 08:22:39 2019 -0800

    fix(projects) Validate platform names (#16079)
    
    * fix(projects) Validate platform names
    
    Stop accepting invalid platform values which helps mitigate bad sample
    files from being considered.
    
    Refs SEN-1247
    
    * Use a better name.
    
    * Accept other as well.
    
    * Use the integration-docs directory as authoritative.
    
    The _platforms file is two years old :(
    
    * Add comment documenting why we're taking a slower approach.

diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index 524b82be68..b13591c5e2 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -270,6 +270,11 @@ class ProjectAdminSerializer(ProjectMemberSerializer):
 
         return other_project_id
 
+    def validate_platform(self, value):
+        if Project.is_valid_platform(value):
+            return value
+        raise serializers.ValidationError("Invalid platform")
+
 
 class RelaxedProjectPermission(ProjectPermission):
     scope_map = {
diff --git a/src/sentry/api/endpoints/team_projects.py b/src/sentry/api/endpoints/team_projects.py
index dc79eef4e4..d6a56965fd 100644
--- a/src/sentry/api/endpoints/team_projects.py
+++ b/src/sentry/api/endpoints/team_projects.py
@@ -37,6 +37,11 @@ class ProjectSerializer(serializers.Serializer):
     platform = serializers.CharField(required=False, allow_blank=True, allow_null=True)
     default_rules = serializers.BooleanField(required=False, initial=True)
 
+    def validate_platform(self, value):
+        if Project.is_valid_platform(value):
+            return value
+        raise serializers.ValidationError("Invalid platform")
+
 
 # While currently the UI suggests teams are a parent of a project, in reality
 # the project is the core component, and which team it is on is simply an
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 26e8ada4fe..7b33d29e50 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -26,6 +26,7 @@ from sentry.db.models import (
     sane_repr,
 )
 from sentry.db.models.utils import slugify_instance
+from sentry.utils.integrationdocs import integration_doc_exists
 from sentry.utils.colors import get_hashed_color
 from sentry.utils.http import absolute_uri
 from sentry.utils.retries import TimedRetryPolicy
@@ -415,5 +416,11 @@ class Project(Model, PendingDeletionMixin):
             return False
         return True
 
+    @staticmethod
+    def is_valid_platform(value):
+        if not value or value == "other":
+            return True
+        return integration_doc_exists(value)
+
 
 pre_delete.connect(delete_pending_deletion_option, sender=Project, weak=False)
diff --git a/src/sentry/utils/integrationdocs.py b/src/sentry/utils/integrationdocs.py
index 3a59f3941f..3aa254a1fc 100644
--- a/src/sentry/utils/integrationdocs.py
+++ b/src/sentry/utils/integrationdocs.py
@@ -122,3 +122,12 @@ def sync_integration_docs(platform_id, integration_id, path, quiet=False):
     key = get_integration_id(platform_id, integration_id)
 
     dump_doc(key, {"id": key, "name": data["name"], "html": data["body"], "link": data["doc_link"]})
+
+
+def integration_doc_exists(integration_id):
+    # We use listdir() here as integration_id comes from user data
+    # and using os.path.join() would allow directory traversal vulnerabilities
+    # which we don't want.
+    docs = os.listdir(DOC_FOLDER)
+    filename = u"{}.json".format(integration_id)
+    return filename in docs
diff --git a/tests/sentry/api/endpoints/test_project_details.py b/tests/sentry/api/endpoints/test_project_details.py
index 04119969c1..3dce053135 100644
--- a/tests/sentry/api/endpoints/test_project_details.py
+++ b/tests/sentry/api/endpoints/test_project_details.py
@@ -198,6 +198,10 @@ class ProjectUpdateTest(APITestCase):
         project = Project.objects.get(id=self.project.id)
         assert project.platform == "cocoa"
 
+    def test_platform_invalid(self):
+        resp = self.client.put(self.path, data={"platform": "lol"})
+        assert resp.status_code == 400, resp.content
+
     def test_options(self):
         options = {
             "sentry:resolve_age": 1,
diff --git a/tests/sentry/api/endpoints/test_team_projects.py b/tests/sentry/api/endpoints/test_team_projects.py
index 4b2f19cf10..e7d9fcfce9 100644
--- a/tests/sentry/api/endpoints/test_team_projects.py
+++ b/tests/sentry/api/endpoints/test_team_projects.py
@@ -76,3 +76,17 @@ class TeamProjectsCreateTest(APITestCase):
         response = self.client.post(path, data={"name": "Test Project", "slug": "test-project"})
 
         assert response.status_code == 409, response.content
+
+    def test_with_invalid_platform(self):
+        user = self.create_user()
+        org = self.create_organization(owner=user)
+        team1 = self.create_team(organization=org, name="foo")
+
+        path = u"/api/0/teams/{}/{}/projects/".format(org.slug, team1.slug)
+
+        self.login_as(user=user)
+
+        response = self.client.post(
+            path, data={"name": "Test Project", "slug": "test-project", "platform": "lol"}
+        )
+        assert response.status_code == 400, response.content
