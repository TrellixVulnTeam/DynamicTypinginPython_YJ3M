commit 64ba59282e1ceeafa50e5be44f4d8f85792da324
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 27 14:32:39 2018 -0800

    Revert "feat: Support Django 1.8"
    
    This reverts commit 00f1c09f5e7900384cb075f1df1e6dd9c47bf6fb.

diff --git a/.travis.yml b/.travis.yml
index 063191e83c..802e78bfd9 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -31,7 +31,6 @@ env:
     - CXX=g++-4.8
     - SOUTH_TESTS_MIGRATE=1
     - JEST_JUNIT_OUTPUT=jest.junit.xml
-    - DJANGO_VERSION=">=1.6,<1.7"
 install:
   - 'export PATH=$PATH:~/.bin'
   - nvm install $TRAVIS_NODE_VERSION
@@ -68,6 +67,9 @@ after_failure:
 # each attribute in the matrix will override the global attribute
 matrix:
   fast_finish: true
+  allow_failures:
+    - python: 2.7
+      env: TEST_SUITE=django-18
   include:
     - language: ruby
       rvm: 2.2
@@ -113,7 +115,7 @@ matrix:
     - python: 2.7
       env: TEST_SUITE=dist
     - python: 2.7
-      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
+      env: TEST_SUITE=django-18
       services:
         - memcached
         - redis-server
diff --git a/Makefile b/Makefile
index e1ef34f539..a24afde8f2 100644
--- a/Makefile
+++ b/Makefile
@@ -1,6 +1,5 @@
 NPM_ROOT = ./node_modules
 STATIC_DIR = src/sentry/static/sentry
-DJANGO_VERSION := ">=1.6,<1.7"
 
 ifneq "$(wildcard /usr/local/opt/libxmlsec1/lib)" ""
 	LDFLAGS += -L/usr/local/opt/libxmlsec1/lib
@@ -199,7 +198,6 @@ travis-setup-cassandra:
 	echo "create keyspace sentry with replication = {'class' : 'SimpleStrategy', 'replication_factor': 1};" | cqlsh --cqlversion=3.1.7
 	echo 'create table nodestore (key text primary key, value blob, flags int);' | cqlsh -k sentry --cqlversion=3.1.7
 travis-install-python:
-	pip install Django${DJANGO_VERSION}
 	$(MAKE) travis-upgrade-pip
 	$(MAKE) install-python-base
 	$(MAKE) install-python-tests
@@ -233,6 +231,7 @@ travis-install-dist:
 	$(MAKE) travis-upgrade-pip
 	$(MAKE) travis-install-python install-yarn
 travis-install-django-18: travis-install-postgres
+	pip install "Django>=1.8,<1.9"
 
 .PHONY: travis-install-danger travis-install-sqlite travis-install-postgres travis-install-js travis-install-cli travis-install-dist
 
diff --git a/requirements-base.txt b/requirements-base.txt
index 92c28dffa4..763b96c408 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -4,7 +4,7 @@ celery>=3.1.8,<3.1.19
 click>=5.0,<7.0
 # 'cryptography>=1.3,<1.4
 cssutils>=0.9.9,<0.10.0
-Django>=1.6.11,<1.7
+Django>=1.6.0,<1.7
 django-crispy-forms>=1.4.0,<1.5.0
 django-jsonfield>=0.9.13,<0.9.14
 django-picklefield>=0.3.0,<0.4.0
diff --git a/setup.py b/setup.py
index ea5e0c5288..555ca33f52 100755
--- a/setup.py
+++ b/setup.py
@@ -75,14 +75,6 @@ dev_requires = get_requirements('dev')
 tests_require = get_requirements('test')
 optional_requires = get_requirements('optional')
 
-DJANGO_VERSION = os.environ.get('DJANGO_VERSION')
-if DJANGO_VERSION:
-    install_requires = [
-        'Django{}'.format(DJANGO_VERSION[1:-1])
-        if k.startswith('Django>=') else k
-        for k in install_requires
-    ]
-
 
 class SentrySDistCommand(SDistCommand):
     # If we are not a light build we want to also execute build_assets as
diff --git a/src/sentry/api/bases/organizationissues.py b/src/sentry/api/bases/organizationissues.py
index c057f94a42..2b29acde26 100644
--- a/src/sentry/api/bases/organizationissues.py
+++ b/src/sentry/api/bases/organizationissues.py
@@ -35,7 +35,7 @@ class OrganizationIssuesEndpoint(OrganizationMemberEndpoint, EnvironmentMixin):
             organization=organization,
             teams__in=OrganizationMemberTeam.objects.filter(
                 organizationmember=member,
-            ).values_list('team'),
+            ).values('team'),
         )
 
         queryset = self.get_queryset(request, organization, member, project_list)
diff --git a/src/sentry/api/endpoints/broadcast_index.py b/src/sentry/api/endpoints/broadcast_index.py
index 01e10ce579..368f04d6a4 100644
--- a/src/sentry/api/endpoints/broadcast_index.py
+++ b/src/sentry/api/endpoints/broadcast_index.py
@@ -57,7 +57,7 @@ class BroadcastIndexEndpoint(Endpoint):
                 unseen_queryset = queryset.exclude(
                     id__in=queryset.filter(
                         broadcastseen__user=request.user,
-                    ).values_list('id')
+                    ).values('id')
                 )
 
             for broadcast in unseen_queryset:
diff --git a/src/sentry/api/endpoints/dsym_files.py b/src/sentry/api/endpoints/dsym_files.py
index e600b2da2e..5d357d32fb 100644
--- a/src/sentry/api/endpoints/dsym_files.py
+++ b/src/sentry/api/endpoints/dsym_files.py
@@ -111,7 +111,7 @@ class DSymFilesEndpoint(ProjectEndpoint):
         apps = DSymApp.objects.filter(project=project)
         dsym_files = VersionDSymFile.objects.filter(
             dsym_app=apps
-        ).select_related('dsym_file').order_by('-build', 'version')
+        ).select_related('projectdsymfile').order_by('-build', 'version')
 
         file_list = ProjectDSymFile.objects.filter(
             project=project,
diff --git a/src/sentry/api/endpoints/organization_activity.py b/src/sentry/api/endpoints/organization_activity.py
index 351984da88..500a96b8e6 100644
--- a/src/sentry/api/endpoints/organization_activity.py
+++ b/src/sentry/api/endpoints/organization_activity.py
@@ -14,7 +14,7 @@ class OrganizationActivityEndpoint(OrganizationMemberEndpoint, EnvironmentMixin)
                 organization=organization,
                 teams__in=OrganizationMemberTeam.objects.filter(
                     organizationmember=member,
-                ).values_list('team')
+                ).values('team')
             )
         ).exclude(
             # There is an activity record created for both sides of the unmerge
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 0c0472568c..b3ebc2f4c8 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -101,7 +101,7 @@ class OrganizationIndexEndpoint(Endpoint):
             queryset = queryset.filter(
                 id__in=OrganizationMember.objects.filter(
                     user=request.user,
-                ).values_list('organization'),
+                ).values('organization'),
             )
 
         query = request.GET.get('query')
@@ -122,7 +122,7 @@ class OrganizationIndexEndpoint(Endpoint):
                     queryset = queryset.filter(
                         project__in=ProjectPlatform.objects.filter(
                             platform__in=value,
-                        ).values_list('project_id')
+                        ).values('project_id')
                     )
                 elif key == 'id':
                     queryset = queryset.filter(id__in=value)
diff --git a/src/sentry/api/endpoints/organization_release_files.py b/src/sentry/api/endpoints/organization_release_files.py
index 45c76f038d..65eba754a1 100644
--- a/src/sentry/api/endpoints/organization_release_files.py
+++ b/src/sentry/api/endpoints/organization_release_files.py
@@ -100,7 +100,7 @@ class OrganizationReleaseFilesEndpoint(OrganizationReleasesBaseEndpoint):
         fileobj = request.FILES['file']
 
         full_name = request.DATA.get('name', fileobj.name)
-        if not full_name or full_name == 'file':
+        if not full_name:
             return Response({'detail': 'File name must be specified'}, status=400)
 
         name = full_name.rsplit('/', 1)[-1]
diff --git a/src/sentry/api/endpoints/organization_user_issues_search.py b/src/sentry/api/endpoints/organization_user_issues_search.py
index ac38f48743..d403e01fc9 100644
--- a/src/sentry/api/endpoints/organization_user_issues_search.py
+++ b/src/sentry/api/endpoints/organization_user_issues_search.py
@@ -26,7 +26,7 @@ class OrganizationUserIssuesSearchEndpoint(OrganizationEndpoint, EnvironmentMixi
                     organizationmember__user=request.user,
                     organizationmember__organization=organization,
                     is_active=True,
-                ).values_list('team'),
+                ).values('team'),
             ).values_list('id', flat=True)[:1000]
         )
 
diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
index 9d7dafdbe9..94bdf39a80 100644
--- a/src/sentry/api/endpoints/project_index.py
+++ b/src/sentry/api/endpoints/project_index.py
@@ -80,7 +80,7 @@ class ProjectIndexEndpoint(Endpoint):
                     queryset = queryset.filter(
                         id__in=ProjectPlatform.objects.filter(
                             platform__in=value,
-                        ).values_list('project_id')
+                        ).values('project_id')
                     )
                 elif key == 'id':
                     queryset = queryset.filter(id__in=value)
diff --git a/src/sentry/api/endpoints/project_release_files.py b/src/sentry/api/endpoints/project_release_files.py
index 841447e493..505fc9cbec 100644
--- a/src/sentry/api/endpoints/project_release_files.py
+++ b/src/sentry/api/endpoints/project_release_files.py
@@ -134,7 +134,7 @@ class ProjectReleaseFilesEndpoint(ProjectEndpoint):
         fileobj = request.FILES['file']
 
         full_name = request.DATA.get('name', fileobj.name)
-        if not full_name or full_name == 'file':
+        if not full_name:
             return Response({'detail': 'File name must be specified'}, status=400)
 
         name = full_name.rsplit('/', 1)[-1]
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 67d3adce76..0dbc3e7422 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -119,7 +119,7 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         try:
             event = Event.objects.filter(project_id=project.id,
-                                         event_id=report.event_id)[0]
+                                         event_id=report.event_id).select_related('group')[0]
         except IndexError:
             try:
                 report.group = Group.objects.from_event_id(project, report.event_id)
diff --git a/src/sentry/api/serializers/models/organization_member.py b/src/sentry/api/serializers/models/organization_member.py
index 17f464e122..25f400a1f5 100644
--- a/src/sentry/api/serializers/models/organization_member.py
+++ b/src/sentry/api/serializers/models/organization_member.py
@@ -44,17 +44,17 @@ class OrganizationMemberWithTeamsSerializer(OrganizationMemberSerializer):
                       self).get_attrs(item_list, user)
 
         member_team_map = list(OrganizationMemberTeam.objects.filter(
-            organizationmember__in=item_list).values_list(
+            organizationmember__in=item_list).values(
             'organizationmember_id', 'team_id'))
 
         teams = {team.id: team for team in Team.objects.filter(
-            id__in=[team_id for _, team_id in member_team_map])}
+            id__in=[item['team_id'] for item in member_team_map])}
         results = defaultdict(list)
 
         # results is a map of member id -> team_slug[]
-        for member_id, team_id in member_team_map:
-            results[member_id].append(
-                teams[team_id].slug)
+        for m in member_team_map:
+            results[m['organizationmember_id']].append(
+                teams[m['team_id']].slug)
 
         for item in item_list:
             teams = results.get(item.id, [])
diff --git a/src/sentry/api/serializers/models/processingissue.py b/src/sentry/api/serializers/models/processingissue.py
index 10d6d5d1af..2f57235509 100644
--- a/src/sentry/api/serializers/models/processingissue.py
+++ b/src/sentry/api/serializers/models/processingissue.py
@@ -17,9 +17,11 @@ class ProcessingIssueSerializer(Serializer):
                 missing_counts.append(pk)
 
         if missing_counts:
-            counts.update(dict(ProcessingIssue.objects.with_num_events().filter(
+            extra_counts = ProcessingIssue.objects.with_num_events().filter(
                 pk__in=list(missing_counts)
-            ).values_list('id', 'num_events')))
+            ).values('id', 'num_events')
+            for d in extra_counts:
+                counts[d['id']] = d['num_events']
 
         result = {}
         for item in item_list:
diff --git a/src/sentry/api/serializers/models/release.py b/src/sentry/api/serializers/models/release.py
index aa3ba945e9..8b7b06ad40 100644
--- a/src/sentry/api/serializers/models/release.py
+++ b/src/sentry/api/serializers/models/release.py
@@ -194,7 +194,7 @@ class ReleaseSerializer(Serializer):
             # if no particular project specified
             group_counts_by_release = dict(
                 ReleaseProject.objects.filter(release__in=item_list, new_groups__isnull=False)
-                .values_list('release_id').annotate(new_groups=Sum('new_groups'))
+                .values('release_id').annotate(new_groups=Sum('new_groups'))
                 .values_list('release_id', 'new_groups')
             )
 
@@ -202,16 +202,14 @@ class ReleaseSerializer(Serializer):
         deploy_metadata_attrs = self._get_deploy_metadata(item_list, user)
 
         release_projects = defaultdict(list)
-        project_releases = ReleaseProject.objects.filter(
-            release__in=item_list,
-        ).values_list(
+        project_releases = ReleaseProject.objects.filter(release__in=item_list).values(
             'release_id', 'project__slug', 'project__name'
         )
-        for release_id, project_slug, project_name in project_releases:
-            release_projects[release_id].append(
+        for pr in project_releases:
+            release_projects[pr['release_id']].append(
                 {
-                    'slug': project_slug,
-                    'name': project_name,
+                    'slug': pr['project__slug'],
+                    'name': pr['project__name'],
                 }
             )
 
diff --git a/src/sentry/api/serializers/models/userreport.py b/src/sentry/api/serializers/models/userreport.py
index 4f93b094f6..4744493730 100644
--- a/src/sentry/api/serializers/models/userreport.py
+++ b/src/sentry/api/serializers/models/userreport.py
@@ -17,10 +17,12 @@ class UserReportSerializer(Serializer):
 
         # If a event list with multiple project IDs is passed to this and event IDs are not unique
         # this could return the wrong eventIDs
-        events_dict = dict(Event.objects.filter(
+        events_list = Event.objects.filter(
             project_id__in={i.project_id for i in item_list},
             event_id__in=[i.event_id for i in item_list]
-        ).values_list('id', 'event_id'))
+        ).values('id', 'event_id')
+
+        events_dict = {e['event_id']: e['id'] for e in events_list}
 
         attrs = {}
         for item in item_list:
diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index 314e0ee92f..88187d2934 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -455,7 +455,7 @@ class AuthHelper(object):
 
     def _find_existing_user(self, email):
         return User.objects.filter(
-            id__in=UserEmail.objects.filter(email__iexact=email).values_list('user'),
+            id__in=UserEmail.objects.filter(email__iexact=email).values('user'),
             is_active=True,
         ).first()
 
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 820bf8bc3a..f56e6b636c 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -258,7 +258,7 @@ INSTALLED_APPS = (
 )
 
 import django
-if django.VERSION < (1, 9):
+if django.VERSION < (1, 7):
     INSTALLED_APPS += ('south', )
 
 STATIC_ROOT = os.path.realpath(os.path.join(PROJECT_ROOT, 'static'))
diff --git a/src/sentry/db/models/base.py b/src/sentry/db/models/base.py
index 220be85d7c..39f0b77655 100644
--- a/src/sentry/db/models/base.py
+++ b/src/sentry/db/models/base.py
@@ -15,7 +15,6 @@ import six
 from bitfield.types import BitHandler
 from django.db import models
 from django.db.models import signals
-from django.db.models.query_utils import DeferredAttribute
 
 from .fields.bounded import BoundedBigAutoField
 from .manager import BaseManager
@@ -25,8 +24,6 @@ __all__ = ('BaseModel', 'Model', 'sane_repr')
 
 UNSAVED = object()
 
-DEFERRED = object()
-
 
 def sane_repr(*attrs):
     if 'id' not in attrs and 'pk' not in attrs:
@@ -60,13 +57,6 @@ class BaseModel(models.Model):
         d.pop('_Model__data', None)
         return d
 
-    def __hash__(self):
-        # Django decided that it shouldnt let us hash objects even though they have
-        # memory addresses. We need that behavior, so let's revert.
-        if self.pk:
-            return models.Model.__hash__(self)
-        return id(self)
-
     def __reduce__(self):
         (model_unpickle, stuff, _) = super(BaseModel, self).__reduce__()
         return (model_unpickle, stuff, self.__getstate__())
@@ -76,21 +66,15 @@ class BaseModel(models.Model):
         self._update_tracked_data()
 
     def __get_field_value(self, field):
-        if isinstance(type(field).__dict__.get(field.attname), DeferredAttribute):
-            return DEFERRED
         if isinstance(field, models.ForeignKey):
             return getattr(self, field.column, None)
-        return getattr(self, field.attname, None)
+        return getattr(self, field.name, None)
 
     def _update_tracked_data(self):
         "Updates a local copy of attributes values"
         if self.id:
             data = {}
             for f in self._meta.fields:
-                # XXX(dcramer): this is how Django determines this (copypasta from Model)
-                if isinstance(type(f).__dict__.get(f.attname),
-                              DeferredAttribute) or f.column is None:
-                    continue
                 try:
                     v = self.__get_field_value(f)
                 except AttributeError as e:
@@ -109,18 +93,12 @@ class BaseModel(models.Model):
         if self.__data is UNSAVED:
             return False
         field = self._meta.get_field(field_name)
-        value = self.__get_field_value(field)
-        if value is DEFERRED:
-            return False
-        return self.__data.get(field_name) != value
+        return self.__data.get(field_name) != self.__get_field_value(field)
 
     def old_value(self, field_name):
         "Returns the previous value of ``field``"
         if self.__data is UNSAVED:
             return None
-        value = self.__data.get(field_name)
-        if value is DEFERRED:
-            return None
         return self.__data.get(field_name)
 
 
diff --git a/src/sentry/db/models/manager.py b/src/sentry/db/models/manager.py
index 1feedda80d..86dc14a6f0 100644
--- a/src/sentry/db/models/manager.py
+++ b/src/sentry/db/models/manager.py
@@ -15,8 +15,7 @@ import weakref
 
 from django.conf import settings
 from django.db import router
-from django.db.models import Model
-from django.db.models.manager import Manager, QuerySet
+from django.db.models import Manager, Model
 from django.db.models.signals import (post_save, post_delete, post_init, class_prepared)
 from django.utils.encoding import smart_text
 
@@ -56,27 +55,12 @@ def make_key(model, prefix, kwargs):
     return '%s:%s:%s' % (prefix, model.__name__, md5_text(kwargs_bits).hexdigest())
 
 
-class BaseQuerySet(QuerySet):
-    # XXX(dcramer): we prefer values_list, but we cant disable values as Django uses it
-    # internally
-    # def values(self, *args, **kwargs):
-    #     raise NotImplementedError('Use ``values_list`` instead [performance].')
-
-    def defer(self, *args, **kwargs):
-        raise NotImplementedError('Use ``values_list`` instead [performance].')
-
-    def only(self, *args, **kwargs):
-        raise NotImplementedError('Use ``values_list`` instead [performance].')
-
-
 class BaseManager(Manager):
     lookup_handlers = {
         'iexact': lambda x: x.upper(),
     }
     use_for_related_fields = True
 
-    _queryset_class = BaseQuerySet
-
     def __init__(self, *args, **kwargs):
         self.cache_fields = kwargs.pop('cache_fields', [])
         self.cache_ttl = kwargs.pop('cache_ttl', 60 * 5)
@@ -320,12 +304,3 @@ class BaseManager(Manager):
         """
         Triggered when a model bound to this manager is deleted.
         """
-
-    def get_queryset(self):
-        """
-        Returns a new QuerySet object.  Subclasses can override this method to
-        easily customize the behavior of the Manager.
-        """
-        if hasattr(self, '_hints'):
-            return self._queryset_class(self.model, using=self._db, hints=self._hints)
-        return self._queryset_class(self.model, using=self._db)
diff --git a/src/sentry/db/models/utils.py b/src/sentry/db/models/utils.py
index a8e217c002..08c35ee6bb 100644
--- a/src/sentry/db/models/utils.py
+++ b/src/sentry/db/models/utils.py
@@ -10,23 +10,17 @@ from __future__ import absolute_import
 
 import operator
 
-from django.db.models import F
-from django.utils.crypto import get_random_string
-from django.template.defaultfilters import slugify
 from uuid import uuid4
 
-from sentry.db.exceptions import CannotResolveExpression
-
-
-class _UnknownType(object):
-    pass
-
+from django.db.models import F
 try:
     from django.db.models.expressions import ExpressionNode
-    Value = _UnknownType
 except ImportError:
-    from django.db.models.expressions import Combinable as ExpressionNode, Value
+    from django.db.models.expressions import Combinable as ExpressionNode
+from django.utils.crypto import get_random_string
+from django.template.defaultfilters import slugify
 
+from sentry.db.exceptions import CannotResolveExpression
 
 EXPRESSION_NODE_CALLBACKS = {
     ExpressionNode.ADD: operator.add,
@@ -47,27 +41,17 @@ except AttributeError:
 
 def resolve_expression_node(instance, node):
     def _resolve(instance, node):
-        if isinstance(node, Value):
-            return node.value
         if isinstance(node, F):
             return getattr(instance, node.name)
-        if isinstance(node, ExpressionNode):
+        elif isinstance(node, ExpressionNode):
             return resolve_expression_node(instance, node)
         return node
 
-    if isinstance(node, Value):
-        return node.value
-    if not hasattr(node, 'connector'):
-        raise CannotResolveExpression
     op = EXPRESSION_NODE_CALLBACKS.get(node.connector, None)
     if not op:
         raise CannotResolveExpression
-    if hasattr(node, 'children'):
-        children = node.children
-    else:
-        children = [node.lhs, node.rhs]
-    runner = _resolve(instance, children[0])
-    for n in children[1:]:
+    runner = _resolve(instance, node.children[0])
+    for n in node.children[1:]:
         runner = op(runner, _resolve(instance, n))
     return runner
 
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index e3823f739b..cef5913142 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -239,68 +239,36 @@ class HashDiscarded(Exception):
     pass
 
 
-try:
-    from django.db.models import Func
-except ImportError:
-    # XXX(dramer): compatibility hack for Django 1.6
-    class ScoreClause(object):
-        def __init__(self, group, *args, **kwargs):
-            self.group = group
-            super(ScoreClause, self).__init__(*args, **kwargs)
-
-        def __int__(self):
-            # Calculate the score manually when coercing to an int.
-            # This is used within create_or_update and friends
-            return self.group.get_score()
-
-        def prepare_database_save(self, unused):
-            return self
-
-        def prepare(self, evaluator, query, allow_joins):
-            return
-
-        def evaluate(self, node, qn, connection):
-            engine = get_db_engine(getattr(connection, 'alias', 'default'))
-            if engine.startswith('postgresql'):
-                sql = 'log(times_seen) * 600 + last_seen::abstime::int'
-            elif engine.startswith('mysql'):
-                sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
-            else:
-                # XXX: if we cant do it atomically let's do it the best we can
-                sql = int(self)
-
-            return (sql, [])
-
-        @classmethod
-        def calculate(cls, times_seen, last_seen):
-            return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
-else:
-    # XXX(dramer): compatibility hack for Django 1.8+
-    class ScoreClause(Func):
-        def __init__(self, group, *args, **kwargs):
-            self.group = group
-            super(ScoreClause, self).__init__(*args, **kwargs)
-
-        def __int__(self):
-            # Calculate the score manually when coercing to an int.
-            # This is used within create_or_update and friends
-            return self.group.get_score()
-
-        def as_sql(self, compiler, connection, function=None, template=None):
-            engine = get_db_engine(getattr(connection, 'alias', 'default'))
-            if engine.startswith('postgresql'):
-                sql = 'log(times_seen) * 600 + last_seen::abstime::int'
-            elif engine.startswith('mysql'):
-                sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
-            else:
-                # XXX: if we cant do it atomically let's do it the best we can
-                sql = int(self)
+class ScoreClause(object):
+    def __init__(self, group):
+        self.group = group
+
+    def __int__(self):
+        # Calculate the score manually when coercing to an int.
+        # This is used within create_or_update and friends
+        return self.group.get_score()
+
+    def prepare_database_save(self, unused):
+        return self
+
+    def prepare(self, evaluator, query, allow_joins):
+        return
+
+    def evaluate(self, node, qn, connection):
+        engine = get_db_engine(getattr(connection, 'alias', 'default'))
+        if engine.startswith('postgresql'):
+            sql = 'log(times_seen) * 600 + last_seen::abstime::int'
+        elif engine.startswith('mysql'):
+            sql = 'log(times_seen) * 600 + unix_timestamp(last_seen)'
+        else:
+            # XXX: if we cant do it atomically let's do it the best we can
+            sql = int(self)
 
-            return (sql, [])
+        return (sql, [])
 
-        @classmethod
-        def calculate(cls, times_seen, last_seen):
-            return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
+    @classmethod
+    def calculate(cls, times_seen, last_seen):
+        return math.log(times_seen) * 600 + float(last_seen.strftime('%s'))
 
 
 class InvalidTimestamp(Exception):
diff --git a/src/sentry/models/dsymfile.py b/src/sentry/models/dsymfile.py
index 309a1644a3..6e545b50d5 100644
--- a/src/sentry/models/dsymfile.py
+++ b/src/sentry/models/dsymfile.py
@@ -199,10 +199,10 @@ class ProjectDSymFileManager(BaseManager):
 
         found = ProjectDSymFile.objects.filter(
             file__checksum__in=checksums, project=project
-        ).values_list('file__checksum', flat=True)
+        ).values('file__checksum')
 
-        for value in found:
-            missing.discard(value)
+        for values in found:
+            missing.discard(values.values()[0])
 
         return sorted(missing)
 
diff --git a/src/sentry/models/eventuser.py b/src/sentry/models/eventuser.py
index 07ad7d4a01..40581e61b7 100644
--- a/src/sentry/models/eventuser.py
+++ b/src/sentry/models/eventuser.py
@@ -104,7 +104,7 @@ class EventUser(Model):
                     organizationmember__user=user,
                     organizationmember__organization__project=self.project_id,
                     is_active=True,
-                ).values_list('team'),
+                ).values('team'),
             ).values_list('id', flat=True)[:1000]
         )
         if not project_ids:
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index 258f1c703c..fd3a320b2f 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -261,7 +261,7 @@ class OrganizationMember(Model):
             id__in=OrganizationMemberTeam.objects.filter(
                 organizationmember=self,
                 is_active=True,
-            ).values_list('team')
+            ).values('team')
         )
 
     def get_scopes(self):
diff --git a/src/sentry/models/project.py b/src/sentry/models/project.py
index 5b9e97158e..bd17b9974a 100644
--- a/src/sentry/models/project.py
+++ b/src/sentry/models/project.py
@@ -188,7 +188,7 @@ class Project(Model):
             id__in=OrganizationMember.objects.filter(
                 organizationmemberteam__is_active=True,
                 organizationmemberteam__team__in=self.teams.all(),
-            ).values_list('id'),
+            ).values('id'),
             user__is_active=True,
         ).distinct()
 
diff --git a/src/sentry/models/release.py b/src/sentry/models/release.py
index 6db7a385e0..3d1669137b 100644
--- a/src/sentry/models/release.py
+++ b/src/sentry/models/release.py
@@ -220,15 +220,15 @@ class Release(Model):
         # given a release version + project, return next
         # `limit` releases (includes the release specified by `version`)
         try:
-            current_release = cls.objects.get(
+            release_dates = cls.objects.filter(
                 organization_id=project.organization_id,
                 version=start_version,
                 projects=project,
-            )
+            ).values('date_released', 'date_added').get()
         except cls.DoesNotExist:
             return []
 
-        start_date = current_release.date_released or current_release.date_added
+        start_date = release_dates['date_released'] or release_dates['date_added']
 
         return list(Release.objects.filter(
             projects=project,
@@ -473,12 +473,12 @@ class Release(Model):
                 )
 
         release_commits = list(ReleaseCommit.objects.filter(release=self)
-                               .select_related('commit').values_list('commit_id', 'commit__key'))
+                               .select_related('commit').values('commit_id', 'commit__key'))
 
         commit_resolutions = list(
             GroupLink.objects.filter(
                 linked_type=GroupLink.LinkedType.commit,
-                linked_id__in=[commit_id for commit_id, _ in release_commits],
+                linked_id__in=[rc['commit_id'] for rc in release_commits],
             ).values_list('group_id', 'linked_id')
         )
 
@@ -487,7 +487,7 @@ class Release(Model):
              commit_author_by_commit.get(cr[1])) for cr in commit_resolutions]
 
         pr_ids_by_merge_commit = list(PullRequest.objects.filter(
-            merge_commit_sha__in=[commit_key for _, commit_key in release_commits],
+            merge_commit_sha__in=[rc['commit__key'] for rc in release_commits],
         ).values_list('id', flat=True))
 
         pull_request_resolutions = list(
diff --git a/src/sentry/models/user.py b/src/sentry/models/user.py
index 7e0ba47167..9262992f2c 100644
--- a/src/sentry/models/user.py
+++ b/src/sentry/models/user.py
@@ -254,7 +254,7 @@ class User(BaseModel, AbstractBaseUser):
             user=from_user,
             auth_provider__organization__in=AuthIdentity.objects.filter(
                 user=to_user,
-            ).values_list('auth_provider__organization')
+            ).values('auth_provider__organization')
         ).delete()
         AuthIdentity.objects.filter(
             user=from_user,
@@ -277,11 +277,8 @@ class User(BaseModel, AbstractBaseUser):
             status=OrganizationStatus.VISIBLE,
             id__in=OrganizationMember.objects.filter(
                 user=self,
-            ).values_list('organization'),
+            ).values('organization'),
         )
 
     def clear_lost_passwords(self):
         LostPasswordHash.objects.filter(user=self).delete()
-
-
-User._meta.get_field('last_login').null = True
diff --git a/src/sentry/nodestore/south_migrations/0001_initial.py b/src/sentry/nodestore/south_migrations/0001_initial.py
index c59569ca15..8add82648d 100644
--- a/src/sentry/nodestore/south_migrations/0001_initial.py
+++ b/src/sentry/nodestore/south_migrations/0001_initial.py
@@ -16,7 +16,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'timestamp', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index a176d0bcbd..bbb4afe51c 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -46,14 +46,14 @@ class ReleaseActivityEmail(ActivityEmail):
                 ).select_related('commit', 'commit__author')
             ]
             repos = {
-                r_id: {
-                    'name': r_name,
+                r['id']: {
+                    'name': r['name'],
                     'commits': [],
                 }
-                for r_id, r_name in Repository.objects.filter(
+                for r in Repository.objects.filter(
                     organization_id=self.project.organization_id,
                     id__in={c.repository_id for c in self.commit_list}
-                ).values_list('id', 'name')
+                ).values('id', 'name')
             }
 
             self.email_list = set([c.author.email for c in self.commit_list if c.author])
@@ -82,15 +82,18 @@ class ReleaseActivityEmail(ActivityEmail):
                 id=self.deploy.environment_id
             ).name or 'Default Environment'
 
-            self.group_counts_by_project = dict(Group.objects.filter(
-                project__in=self.projects,
-                id__in=GroupLink.objects.filter(
-                    linked_type=GroupLink.LinkedType.commit,
-                    linked_id__in=ReleaseCommit.objects.filter(
-                        release=self.release,
-                    ).values_list('commit_id', flat=True),
-                ).values_list('group_id', flat=True),
-            ).values_list('project').annotate(num_groups=Count('id')))
+            self.group_counts_by_project = {
+                row['project']: row['num_groups']
+                for row in Group.objects.filter(
+                    project__in=self.projects,
+                    id__in=GroupLink.objects.filter(
+                        linked_type=GroupLink.LinkedType.commit,
+                        linked_id__in=ReleaseCommit.objects.filter(
+                            release=self.release,
+                        ).values_list('commit_id', flat=True),
+                    ).values_list('group_id', flat=True),
+                ).values('project').annotate(num_groups=Count('id'))
+            }
 
     def should_email(self):
         return bool(self.release and self.deploy)
@@ -149,9 +152,9 @@ class ReleaseActivityEmail(ActivityEmail):
             user_teams = defaultdict(list)
             queryset = User.objects.filter(
                 sentry_orgmember_set__organization_id=self.organization.id
-            ).values_list('id', 'sentry_orgmember_set__teams')
-            for user_id, team_id in queryset:
-                user_teams[user_id].append(team_id)
+            ).values('id', 'sentry_orgmember_set__teams')
+            for user_team in queryset:
+                user_teams[user_team['id']].append(user_team['sentry_orgmember_set__teams'])
             self.user_id_team_lookup = user_teams
         return self.user_id_team_lookup
 
@@ -159,7 +162,7 @@ class ReleaseActivityEmail(ActivityEmail):
         file_count = CommitFileChange.objects.filter(
             commit__in=self.commit_list,
             organization_id=self.organization.id,
-        ).values_list('filename').distinct().count()
+        ).values('filename').distinct().count()
 
         return {
             'commit_count':
diff --git a/src/sentry/runner/commands/upgrade.py b/src/sentry/runner/commands/upgrade.py
index e789af3dc0..d9223042c1 100644
--- a/src/sentry/runner/commands/upgrade.py
+++ b/src/sentry/runner/commands/upgrade.py
@@ -13,15 +13,20 @@ from sentry.runner.decorators import configuration
 
 def _upgrade(interactive, traceback, verbosity, repair):
     from django.core.management import call_command as dj_call_command
-
     dj_call_command(
-        'migrate',
+        'syncdb',
         interactive=interactive,
         traceback=traceback,
         verbosity=verbosity,
-        migrate=True,
+    )
+
+    dj_call_command(
+        'migrate',
         merge=True,
         ignore_ghost_migrations=True,
+        interactive=interactive,
+        traceback=traceback,
+        verbosity=verbosity,
     )
 
     if repair:
diff --git a/src/sentry/runner/importer.py b/src/sentry/runner/importer.py
index 8db5b6a482..47e5f58d76 100644
--- a/src/sentry/runner/importer.py
+++ b/src/sentry/runner/importer.py
@@ -59,7 +59,7 @@ class Importer(object):
 
     def _load_module(self, fullname):
         if self.default_settings:
-            from importlib import import_module
+            from django.utils.importlib import import_module
             default_settings_mod = import_module(self.default_settings)
         else:
             default_settings_mod = None
@@ -110,8 +110,7 @@ def install_plugin_apps(entry_point, settings):
     from pkg_resources import iter_entry_points
     installed_apps = list(settings.INSTALLED_APPS)
     for ep in iter_entry_points(entry_point):
-        if ep.module_name not in installed_apps:
-            installed_apps.append(ep.module_name)
+        installed_apps.append(ep.module_name)
     settings.INSTALLED_APPS = tuple(installed_apps)
 
 
diff --git a/src/sentry/runner/initializer.py b/src/sentry/runner/initializer.py
index 5e7c6c8563..2eae8d5a34 100644
--- a/src/sentry/runner/initializer.py
+++ b/src/sentry/runner/initializer.py
@@ -266,6 +266,8 @@ def initialize_app(config, skip_service_validation=False):
 
     apply_legacy_settings(settings)
 
+    bind_cache_to_option_store()
+
     # Commonly setups don't correctly configure themselves for production envs
     # so lets try to provide a bit more guidance
     if settings.CELERY_ALWAYS_EAGER and not settings.DEBUG:
@@ -299,13 +301,6 @@ def initialize_app(config, skip_service_validation=False):
         version=settings.ASSET_VERSION,
     )
 
-    import django
-    if hasattr(django, 'setup'):
-        # support for Django 1.7+
-        django.setup()
-
-    bind_cache_to_option_store()
-
     register_plugins(settings)
 
     initialize_receivers()
diff --git a/src/sentry/search/south_migrations/0001_initial.py b/src/sentry/search/south_migrations/0001_initial.py
index 9cd0910cce..4ac37076df 100644
--- a/src/sentry/search/south_migrations/0001_initial.py
+++ b/src/sentry/search/south_migrations/0001_initial.py
@@ -17,8 +17,8 @@ class Migration(SchemaMigration):
         #     ('group', self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Group'])),
         #     ('total_events', self.gf('django.db.models.fields.PositiveIntegerField')(default=1)),
         #     ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),
-        #     ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
-        #     ('date_changed', self.gf('django.db.models.fields.DateTimeField')()),
+        #     ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+        #     ('date_changed', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         # ))
         # db.send_create_signal(u'search', ['SearchDocument'])
 
diff --git a/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py b/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py
index 0508a6d800..0cbe0175e1 100644
--- a/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py
+++ b/src/sentry/search/south_migrations/0002_auto__del_searchtoken__del_unique_searchtoken_document_field_token__de.py
@@ -57,10 +57,10 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Group'])
                 ), (
                     'date_changed',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
                         primary_key=True
diff --git a/src/sentry/south_migrations/0001_initial.py b/src/sentry/south_migrations/0001_initial.py
index 542a28b1fb..d8208b5a16 100644
--- a/src/sentry/south_migrations/0001_initial.py
+++ b/src/sentry/south_migrations/0001_initial.py
@@ -46,11 +46,11 @@ class Migration(SchemaMigration):
                 ('times_seen',
                  self.gf('django.db.models.fields.PositiveIntegerField')(default=1)), (
                      'last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ), (
                      'first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ),
             )
@@ -96,7 +96,7 @@ class Migration(SchemaMigration):
                      self.gf('django.db.models.fields.CharField')(max_length=32, db_index=True)
                  ), (
                      'datetime', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ), ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
             )
@@ -108,7 +108,7 @@ class Migration(SchemaMigration):
             'auth_user', (
                 ('password', self.gf('django.db.models.fields.CharField')(max_length=128)), (
                     'last_login',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)), (
                     'username',
                     self.gf('django.db.models.fields.CharField')(unique=True, max_length=128)
@@ -124,7 +124,7 @@ class Migration(SchemaMigration):
                 ('is_active', self.gf('django.db.models.fields.BooleanField')(default=True)),
                 ('is_superuser', self.gf('django.db.models.fields.BooleanField')(default=False)), (
                     'date_joined',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -142,7 +142,7 @@ class Migration(SchemaMigration):
         db.delete_table('sentry_message')
 
         # Deleting model 'User'
-        db.delete_table('auth_user')
+        db.delete_table('sentry_user')
 
     models = {
         u'auth.group': {
diff --git a/src/sentry/south_migrations/0014_auto__add_project__add_projectmember__add_unique_projectmember_project.py b/src/sentry/south_migrations/0014_auto__add_project__add_projectmember__add_unique_projectmember_project.py
index cb1a477989..8838ec3a8e 100644
--- a/src/sentry/south_migrations/0014_auto__add_project__add_projectmember__add_unique_projectmember_project.py
+++ b/src/sentry/south_migrations/0014_auto__add_project__add_projectmember__add_unique_projectmember_project.py
@@ -20,7 +20,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.User'])
                 ), ('public', self.gf('django.db.models.fields.BooleanField')(default=False)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -41,7 +41,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.User'])
                 ), ('permissions', self.gf('django.db.models.fields.BigIntegerField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py b/src/sentry/south_migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py
index 865e25abbe..58fd465cf9 100644
--- a/src/sentry/south_migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py
+++ b/src/sentry/south_migrations/0038_auto__add_searchtoken__add_unique_searchtoken_document_field_token__ad.py
@@ -49,10 +49,10 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.PositiveIntegerField')(default=1)
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'date_changed',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py b/src/sentry/south_migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py
index 5442623aea..e0df4b14e1 100644
--- a/src/sentry/south_migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py
+++ b/src/sentry/south_migrations/0041_auto__add_field_messagefiltervalue_last_seen__add_field_messagefilterv.py
@@ -13,7 +13,7 @@ class Migration(SchemaMigration):
             'sentry_messagefiltervalue',
             'last_seen',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True
+                default=datetime.datetime.now, null=True, db_index=True
             ),
             keep_default=False
         )
@@ -23,7 +23,7 @@ class Migration(SchemaMigration):
             'sentry_messagefiltervalue',
             'first_seen',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True
+                default=datetime.datetime.now, null=True, db_index=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py b/src/sentry/south_migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py
index 4cd6404dcc..7e4fb885a8 100644
--- a/src/sentry/south_migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py
+++ b/src/sentry/south_migrations/0045_auto__add_pendingprojectmember__add_unique_pendingprojectmember_projec.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
                 ), ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
                 ('type', self.gf('django.db.models.fields.IntegerField')(default=0)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0046_auto__add_teammember__add_unique_teammember_team_user__add_team__add_p.py b/src/sentry/south_migrations/0046_auto__add_teammember__add_unique_teammember_team_user__add_team__add_p.py
index eb4b372ec1..71f0e4227c 100644
--- a/src/sentry/south_migrations/0046_auto__add_teammember__add_unique_teammember_team_user__add_team__add_p.py
+++ b/src/sentry/south_migrations/0046_auto__add_teammember__add_unique_teammember_team_user__add_team__add_p.py
@@ -25,7 +25,7 @@ class Migration(SchemaMigration):
                 ), ('is_active', self.gf('django.db.models.fields.BooleanField')(default=True)),
                 ('type', self.gf('django.db.models.fields.IntegerField')(default=0)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py b/src/sentry/south_migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py
index ba6570f30c..4b8ff0aa41 100644
--- a/src/sentry/south_migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py
+++ b/src/sentry/south_migrations/0051_auto__del_pendingprojectmember__del_unique_pendingprojectmember_projec.py
@@ -28,7 +28,7 @@ class Migration(SchemaMigration):
                 ), ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
                 ('type', self.gf('django.db.models.fields.IntegerField')(default=0)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -55,7 +55,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('type', self.gf('django.db.models.fields.IntegerField')(default=0)),
                 ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
             )
diff --git a/src/sentry/south_migrations/0053_auto__del_projectmember__del_unique_projectmember_project_user.py b/src/sentry/south_migrations/0053_auto__del_projectmember__del_unique_projectmember_project_user.py
index d0799bae1d..8120bc251a 100644
--- a/src/sentry/south_migrations/0053_auto__del_projectmember__del_unique_projectmember_project_user.py
+++ b/src/sentry/south_migrations/0053_auto__del_projectmember__del_unique_projectmember_project_user.py
@@ -29,7 +29,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('type', self.gf('django.db.models.fields.IntegerField')(default=0)), (
                     'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
                         primary_key=True
diff --git a/src/sentry/south_migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py b/src/sentry/south_migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py
index 332b8613d9..3210ce7e54 100644
--- a/src/sentry/south_migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py
+++ b/src/sentry/south_migrations/0068_auto__add_field_projectkey_user_added__add_field_projectkey_date_added.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
         db.add_column(
             'sentry_projectkey', 'date_added',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True
+                default=datetime.datetime.now, null=True
             )
         )
 
diff --git a/src/sentry/south_migrations/0069_auto__add_lostpasswordhash.py b/src/sentry/south_migrations/0069_auto__add_lostpasswordhash.py
index 9366c9e236..90d30d9c28 100644
--- a/src/sentry/south_migrations/0069_auto__add_lostpasswordhash.py
+++ b/src/sentry/south_migrations/0069_auto__add_lostpasswordhash.py
@@ -20,7 +20,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('hash', self.gf('django.db.models.fields.CharField')(max_length=32)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0072_auto__add_affecteduserbygroup__add_unique_affecteduserbygroup_project_.py b/src/sentry/south_migrations/0072_auto__add_affecteduserbygroup__add_unique_affecteduserbygroup_project_.py
index d981dd39e0..f02e65d1b2 100644
--- a/src/sentry/south_migrations/0072_auto__add_affecteduserbygroup__add_unique_affecteduserbygroup_project_.py
+++ b/src/sentry/south_migrations/0072_auto__add_affecteduserbygroup__add_unique_affecteduserbygroup_project_.py
@@ -24,11 +24,11 @@ class Migration(SchemaMigration):
                 ('times_seen',
                  self.gf('django.db.models.fields.PositiveIntegerField')(default=0)), (
                      'last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ), (
                      'first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ),
             )
diff --git a/src/sentry/south_migrations/0077_auto__add_trackeduser__add_unique_trackeduser_project_ident.py b/src/sentry/south_migrations/0077_auto__add_trackeduser__add_unique_trackeduser_project_ident.py
index f1652d9db0..1e3ba5659f 100644
--- a/src/sentry/south_migrations/0077_auto__add_trackeduser__add_unique_trackeduser_project_ident.py
+++ b/src/sentry/south_migrations/0077_auto__add_trackeduser__add_unique_trackeduser_project_ident.py
@@ -21,11 +21,11 @@ class Migration(SchemaMigration):
                 ('email', self.gf('django.db.models.fields.EmailField')(max_length=75, null=True)),
                 ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)), (
                     'last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ), (
                     'first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py b/src/sentry/south_migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py
index 975fb6367e..ee5f4cd991 100644
--- a/src/sentry/south_migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py
+++ b/src/sentry/south_migrations/0082_auto__add_activity__add_field_group_num_comments__add_field_event_num_.py
@@ -32,7 +32,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('data', self.gf('django.db.models.fields.TextField')(null=True)),
             )
         )
diff --git a/src/sentry/south_migrations/0086_auto__add_field_team_date_added.py b/src/sentry/south_migrations/0086_auto__add_field_team_date_added.py
index 5b3de913bd..312dfb9c8e 100644
--- a/src/sentry/south_migrations/0086_auto__add_field_team_date_added.py
+++ b/src/sentry/south_migrations/0086_auto__add_field_team_date_added.py
@@ -12,7 +12,7 @@ class Migration(SchemaMigration):
             'sentry_team',
             'date_added',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True
+                default=datetime.datetime.now, null=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0089_auto__add_accessgroup__add_unique_accessgroup_team_name.py b/src/sentry/south_migrations/0089_auto__add_accessgroup__add_unique_accessgroup_team_name.py
index 5be6dd18e0..55251f7e56 100644
--- a/src/sentry/south_migrations/0089_auto__add_accessgroup__add_unique_accessgroup_team_name.py
+++ b/src/sentry/south_migrations/0089_auto__add_accessgroup__add_unique_accessgroup_team_name.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
                 ('managed', self.gf('django.db.models.fields.BooleanField')(default=False)),
                 ('data', self.gf('django.db.models.fields.TextField')(null=True, blank=True)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0090_auto__add_grouptagkey__add_unique_grouptagkey_project_group_key__add_f.py b/src/sentry/south_migrations/0090_auto__add_grouptagkey__add_unique_grouptagkey_project_group_key__add_f.py
index f3a2a7ed10..d7d1aa3438 100644
--- a/src/sentry/south_migrations/0090_auto__add_grouptagkey__add_unique_grouptagkey_project_group_key__add_f.py
+++ b/src/sentry/south_migrations/0090_auto__add_grouptagkey__add_unique_grouptagkey_project_group_key__add_f.py
@@ -43,7 +43,7 @@ class Migration(SchemaMigration):
             'sentry_filtervalue',
             'last_seen',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True
+                default=datetime.datetime.now, null=True, db_index=True
             ),
             keep_default=False
         )
@@ -53,7 +53,7 @@ class Migration(SchemaMigration):
             'sentry_filtervalue',
             'first_seen',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True
+                default=datetime.datetime.now, null=True, db_index=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0091_auto__add_alert.py b/src/sentry/south_migrations/0091_auto__add_alert.py
index aeb08cdb97..cb00f2d3b8 100644
--- a/src/sentry/south_migrations/0091_auto__add_alert.py
+++ b/src/sentry/south_migrations/0091_auto__add_alert.py
@@ -23,7 +23,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('message', self.gf('django.db.models.fields.TextField')()),
                 ('data', self.gf('django.db.models.fields.TextField')(null=True)),
             )
diff --git a/src/sentry/south_migrations/0094_auto__add_eventmapping__add_unique_eventmapping_project_event_id.py b/src/sentry/south_migrations/0094_auto__add_eventmapping__add_unique_eventmapping_project_event_id.py
index ae310f0993..00c871696f 100644
--- a/src/sentry/south_migrations/0094_auto__add_eventmapping__add_unique_eventmapping_project_event_id.py
+++ b/src/sentry/south_migrations/0094_auto__add_eventmapping__add_unique_eventmapping_project_event_id.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Group'])
                 ), ('event_id', self.gf('django.db.models.fields.CharField')(max_length=32)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py b/src/sentry/south_migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py
index e4841d71bd..d2476d07b3 100644
--- a/src/sentry/south_migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py
+++ b/src/sentry/south_migrations/0098_auto__add_user__chg_field_team_owner__chg_field_activity_user__chg_fie.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('password', self.gf('django.db.models.fields.CharField')(max_length=128)), (
                     'last_login',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('is_superuser',
                     self.gf('django.db.models.fields.BooleanField')(default=False)), (
                         'username',
@@ -38,7 +38,7 @@ class Migration(SchemaMigration):
                 ('is_staff', self.gf('django.db.models.fields.BooleanField')(default=False)),
                 ('is_active', self.gf('django.db.models.fields.BooleanField')(default=True)), (
                     'date_joined',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0104_auto__add_groupseen__add_unique_groupseen_group_user.py b/src/sentry/south_migrations/0104_auto__add_groupseen__add_unique_groupseen_group_user.py
index 7f7f08b59c..789d2b9472 100644
--- a/src/sentry/south_migrations/0104_auto__add_groupseen__add_unique_groupseen_group_user.py
+++ b/src/sentry/south_migrations/0104_auto__add_groupseen__add_unique_groupseen_group_user.py
@@ -26,7 +26,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'last_seen',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0117_auto__add_rule.py b/src/sentry/south_migrations/0117_auto__add_rule.py
index 17193a5a6c..2d54236b0f 100644
--- a/src/sentry/south_migrations/0117_auto__add_rule.py
+++ b/src/sentry/south_migrations/0117_auto__add_rule.py
@@ -20,7 +20,7 @@ class Migration(SchemaMigration):
                 ), ('label', self.gf('django.db.models.fields.CharField')(max_length=64)),
                 ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0120_auto__add_grouprulestatus.py b/src/sentry/south_migrations/0120_auto__add_grouprulestatus.py
index ca6ff8717d..41b60fb658 100644
--- a/src/sentry/south_migrations/0120_auto__add_grouprulestatus.py
+++ b/src/sentry/south_migrations/0120_auto__add_grouprulestatus.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                 ('status', self.gf('django.db.models.fields.PositiveSmallIntegerField')(default=0)),
                 (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0123_auto__add_groupassignee__add_index_event_group_datetime.py b/src/sentry/south_migrations/0123_auto__add_groupassignee__add_index_event_group_datetime.py
index c189481920..9f43b60b4a 100644
--- a/src/sentry/south_migrations/0123_auto__add_groupassignee__add_index_event_group_datetime.py
+++ b/src/sentry/south_migrations/0123_auto__add_groupassignee__add_index_event_group_datetime.py
@@ -28,7 +28,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0126_auto__add_field_option_last_updated.py b/src/sentry/south_migrations/0126_auto__add_field_option_last_updated.py
index 3e7b2fe7c3..4070880180 100644
--- a/src/sentry/south_migrations/0126_auto__add_field_option_last_updated.py
+++ b/src/sentry/south_migrations/0126_auto__add_field_option_last_updated.py
@@ -11,7 +11,7 @@ class Migration(SchemaMigration):
         db.add_column(
             'sentry_option',
             'last_updated',
-            self.gf('django.db.models.fields.DateTimeField')(),
+            self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now),
             keep_default=False
         )
 
diff --git a/src/sentry/south_migrations/0127_auto__add_release__add_unique_release_project_version.py b/src/sentry/south_migrations/0127_auto__add_release__add_unique_release_project_version.py
index 630aea0e94..c9db3fd13e 100644
--- a/src/sentry/south_migrations/0127_auto__add_release__add_unique_release_project_version.py
+++ b/src/sentry/south_migrations/0127_auto__add_release__add_unique_release_project_version.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.Project'])
                 ), ('version', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0128_auto__add_broadcast.py b/src/sentry/south_migrations/0128_auto__add_broadcast.py
index c403c379f3..370058b345 100644
--- a/src/sentry/south_migrations/0128_auto__add_broadcast.py
+++ b/src/sentry/south_migrations/0128_auto__add_broadcast.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.BooleanField')(default=True, db_index=True)
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0131_auto__add_organizationmember__add_unique_organizationmember_organizati.py b/src/sentry/south_migrations/0131_auto__add_organizationmember__add_unique_organizationmember_organizati.py
index 5ca58d6015..644b20b1b6 100644
--- a/src/sentry/south_migrations/0131_auto__add_organizationmember__add_unique_organizationmember_organizati.py
+++ b/src/sentry/south_migrations/0131_auto__add_organizationmember__add_unique_organizationmember_organizati.py
@@ -20,7 +20,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('type', self.gf('django.db.models.fields.PositiveIntegerField')(default=50)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -38,7 +38,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.FlexibleForeignKey')(to=orm['sentry.User'])
                 ), ('status', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0139_auto__add_auditlogentry.py b/src/sentry/south_migrations/0139_auto__add_auditlogentry.py
index 4129fb15a9..13cd209259 100644
--- a/src/sentry/south_migrations/0139_auto__add_auditlogentry.py
+++ b/src/sentry/south_migrations/0139_auto__add_auditlogentry.py
@@ -28,7 +28,7 @@ class Migration(SchemaMigration):
                 ), ('event', self.gf('django.db.models.fields.PositiveIntegerField')()),
                 ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0148_auto__add_helppage.py b/src/sentry/south_migrations/0148_auto__add_helppage.py
index f6bbdf3db2..7b56fd0798 100644
--- a/src/sentry/south_migrations/0148_auto__add_helppage.py
+++ b/src/sentry/south_migrations/0148_auto__add_helppage.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                 ('is_visible', self.gf('django.db.models.fields.BooleanField')(default=True)),
                 ('priority', self.gf('django.db.models.fields.PositiveIntegerField')(default=50)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0151_auto__add_file.py b/src/sentry/south_migrations/0151_auto__add_file.py
index 9c84a77000..36f9cb4765 100644
--- a/src/sentry/south_migrations/0151_auto__add_file.py
+++ b/src/sentry/south_migrations/0151_auto__add_file.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'timestamp', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0156_auto__add_apikey.py b/src/sentry/south_migrations/0156_auto__add_apikey.py
index 9cd19c4953..625ad03194 100644
--- a/src/sentry/south_migrations/0156_auto__add_apikey.py
+++ b/src/sentry/south_migrations/0156_auto__add_apikey.py
@@ -32,7 +32,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0157_auto__add_authidentity__add_unique_authidentity_auth_provider_ident__a.py b/src/sentry/south_migrations/0157_auto__add_authidentity__add_unique_authidentity_auth_provider_ident__a.py
index 8810110661..50ae322bdc 100644
--- a/src/sentry/south_migrations/0157_auto__add_authidentity__add_unique_authidentity_auth_provider_ident__a.py
+++ b/src/sentry/south_migrations/0157_auto__add_authidentity__add_unique_authidentity_auth_provider_ident__a.py
@@ -26,7 +26,7 @@ class Migration(SchemaMigration):
                 ), ('ident', self.gf('django.db.models.fields.CharField')(max_length=128)),
                 ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -50,7 +50,7 @@ class Migration(SchemaMigration):
                 ), ('provider', self.gf('django.db.models.fields.CharField')(max_length=128)),
                 ('config', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'sync_time',
                     self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
diff --git a/src/sentry/south_migrations/0159_auto__add_field_authidentity_last_verified__add_field_organizationmemb.py b/src/sentry/south_migrations/0159_auto__add_field_authidentity_last_verified__add_field_organizationmemb.py
index b342e6f264..5402491f7c 100644
--- a/src/sentry/south_migrations/0159_auto__add_field_authidentity_last_verified__add_field_organizationmemb.py
+++ b/src/sentry/south_migrations/0159_auto__add_field_authidentity_last_verified__add_field_organizationmemb.py
@@ -11,7 +11,7 @@ class Migration(SchemaMigration):
         db.add_column(
             'sentry_authidentity',
             'last_verified',
-            self.gf('django.db.models.fields.DateTimeField')(),
+            self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now),
             keep_default=False
         )
 
diff --git a/src/sentry/south_migrations/0163_auto__add_field_authidentity_last_synced.py b/src/sentry/south_migrations/0163_auto__add_field_authidentity_last_synced.py
index 48e08088fe..978934190e 100644
--- a/src/sentry/south_migrations/0163_auto__add_field_authidentity_last_synced.py
+++ b/src/sentry/south_migrations/0163_auto__add_field_authidentity_last_synced.py
@@ -11,7 +11,7 @@ class Migration(SchemaMigration):
         db.add_column(
             'sentry_authidentity',
             'last_synced',
-            self.gf('django.db.models.fields.DateTimeField')(),
+            self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now),
             keep_default=False
         )
 
diff --git a/src/sentry/south_migrations/0173_auto__del_teammember__del_unique_teammember_team_user.py b/src/sentry/south_migrations/0173_auto__del_teammember__del_unique_teammember_team_user.py
index 4826170357..246c7e53d4 100644
--- a/src/sentry/south_migrations/0173_auto__del_teammember__del_unique_teammember_team_user.py
+++ b/src/sentry/south_migrations/0173_auto__del_teammember__del_unique_teammember_team_user.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'type',
                     self.gf('sentry.db.models.fields.bounded.BoundedIntegerField')(default=50)
diff --git a/src/sentry/south_migrations/0175_auto__del_pendingteammember__del_unique_pendingteammember_team_email.py b/src/sentry/south_migrations/0175_auto__del_pendingteammember__del_unique_pendingteammember_team_email.py
index 31dd5f62c5..9a51162a34 100644
--- a/src/sentry/south_migrations/0175_auto__del_pendingteammember__del_unique_pendingteammember_team_email.py
+++ b/src/sentry/south_migrations/0175_auto__del_pendingteammember__del_unique_pendingteammember_team_email.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'type',
                     self.gf('sentry.db.models.fields.bounded.BoundedIntegerField')(default=50)
diff --git a/src/sentry/south_migrations/0185_auto__add_savedsearch__add_unique_savedsearch_project_name.py b/src/sentry/south_migrations/0185_auto__add_savedsearch__add_unique_savedsearch_project_name.py
index 37c4057336..33bede00cf 100644
--- a/src/sentry/south_migrations/0185_auto__add_savedsearch__add_unique_savedsearch_project_name.py
+++ b/src/sentry/south_migrations/0185_auto__add_savedsearch__add_unique_savedsearch_project_name.py
@@ -21,7 +21,7 @@ class Migration(SchemaMigration):
                 ), ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
                 ('query', self.gf('django.db.models.fields.TextField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0188_auto__add_userreport.py b/src/sentry/south_migrations/0188_auto__add_userreport.py
index 23af6cd75f..24875e3aa2 100644
--- a/src/sentry/south_migrations/0188_auto__add_userreport.py
+++ b/src/sentry/south_migrations/0188_auto__add_userreport.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                 ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
                 ('comments', self.gf('django.db.models.fields.TextField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0191_auto__del_alert__del_alertrelatedgroup__del_unique_alertrelatedgroup_g.py b/src/sentry/south_migrations/0191_auto__del_alert__del_alertrelatedgroup__del_unique_alertrelatedgroup_g.py
index acad9c6594..c7c58e3294 100644
--- a/src/sentry/south_migrations/0191_auto__del_alert__del_alertrelatedgroup__del_unique_alertrelatedgroup_g.py
+++ b/src/sentry/south_migrations/0191_auto__del_alert__del_alertrelatedgroup__del_unique_alertrelatedgroup_g.py
@@ -42,7 +42,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0192_add_model_groupemailthread.py b/src/sentry/south_migrations/0192_add_model_groupemailthread.py
index 233533dca7..93c9a8f841 100644
--- a/src/sentry/south_migrations/0192_add_model_groupemailthread.py
+++ b/src/sentry/south_migrations/0192_add_model_groupemailthread.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.CharField')(unique=True, max_length=100)
                 ), (
                     'date', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0197_auto__del_accessgroup__del_unique_accessgroup_team_name.py b/src/sentry/south_migrations/0197_auto__del_accessgroup__del_unique_accessgroup_team_name.py
index 2b883aed9c..3fea553790 100644
--- a/src/sentry/south_migrations/0197_auto__del_accessgroup__del_unique_accessgroup_team_name.py
+++ b/src/sentry/south_migrations/0197_auto__del_accessgroup__del_unique_accessgroup_team_name.py
@@ -33,7 +33,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(
                         null=True, blank=True
diff --git a/src/sentry/south_migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py b/src/sentry/south_migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py
index 485c52acf5..71306c6b74 100644
--- a/src/sentry/south_migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py
+++ b/src/sentry/south_migrations/0201_auto__add_eventuser__add_unique_eventuser_project_ident__add_index_eve.py
@@ -30,7 +30,7 @@ class Migration(SchemaMigration):
                      )
                  ), (
                      'date_added', self.gf('django.db.models.fields.DateTimeField')(
-                         db_index=True
+                         default=datetime.datetime.now, db_index=True
                      )
                  ),
             )
diff --git a/src/sentry/south_migrations/0209_auto__add_broadcastseen__add_unique_broadcastseen_broadcast_user.py b/src/sentry/south_migrations/0209_auto__add_broadcastseen__add_unique_broadcastseen_broadcast_user.py
index ed9060e685..1a74fe7f8a 100644
--- a/src/sentry/south_migrations/0209_auto__add_broadcastseen__add_unique_broadcastseen_broadcast_user.py
+++ b/src/sentry/south_migrations/0209_auto__add_broadcastseen__add_unique_broadcastseen_broadcast_user.py
@@ -24,7 +24,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_seen',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0212_auto__add_fileblob__add_field_file_blob.py b/src/sentry/south_migrations/0212_auto__add_fileblob__add_field_file_blob.py
index 1fa052320f..c519986c5e 100644
--- a/src/sentry/south_migrations/0212_auto__add_fileblob__add_field_file_blob.py
+++ b/src/sentry/south_migrations/0212_auto__add_fileblob__add_field_file_blob.py
@@ -25,7 +25,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.CharField')(unique=True, max_length=40)
                 ), (
                     'timestamp', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0215_auto__add_field_broadcast_date_expires.py b/src/sentry/south_migrations/0215_auto__add_field_broadcast_date_expires.py
index 0ba8784c8a..e22ca0b3b0 100644
--- a/src/sentry/south_migrations/0215_auto__add_field_broadcast_date_expires.py
+++ b/src/sentry/south_migrations/0215_auto__add_field_broadcast_date_expires.py
@@ -12,7 +12,7 @@ class Migration(SchemaMigration):
             'sentry_broadcast',
             'date_expires',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True, blank=True
+                default=datetime.datetime(2015, 11, 26, 0, 0), null=True, blank=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0217_auto__add_groupresolution.py b/src/sentry/south_migrations/0217_auto__add_groupresolution.py
index 55a79ace71..5bfbdccb95 100644
--- a/src/sentry/south_migrations/0217_auto__add_groupresolution.py
+++ b/src/sentry/south_migrations/0217_auto__add_groupresolution.py
@@ -24,7 +24,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'datetime', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0219_auto__add_field_groupbookmark_date_added.py b/src/sentry/south_migrations/0219_auto__add_field_groupbookmark_date_added.py
index 06c95178b3..8974aeeb60 100644
--- a/src/sentry/south_migrations/0219_auto__add_field_groupbookmark_date_added.py
+++ b/src/sentry/south_migrations/0219_auto__add_field_groupbookmark_date_added.py
@@ -12,7 +12,7 @@ class Migration(SchemaMigration):
             'sentry_groupbookmark',
             'date_added',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True
+                default=datetime.datetime.now, null=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0235_auto__add_projectbookmark__add_unique_projectbookmark_project_id_user_.py b/src/sentry/south_migrations/0235_auto__add_projectbookmark__add_unique_projectbookmark_project_id_user_.py
index c4be0c850b..33a966cad5 100644
--- a/src/sentry/south_migrations/0235_auto__add_projectbookmark__add_unique_projectbookmark_project_id_user_.py
+++ b/src/sentry/south_migrations/0235_auto__add_projectbookmark__add_unique_projectbookmark_project_id_user_.py
@@ -24,7 +24,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added', self.gf('django.db.models.fields.DateTimeField')(
-                        null=True
+                        default=datetime.datetime.now, null=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py b/src/sentry/south_migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
index 1c9b4d1b8b..a73f34fc0e 100644
--- a/src/sentry/south_migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
+++ b/src/sentry/south_migrations/0236_auto__add_organizationonboardingtask__add_unique_organizationonboardin.py
@@ -30,7 +30,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()
                 ), (
                     'date_completed',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'project_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(
                         null=True, blank=True
diff --git a/src/sentry/south_migrations/0237_auto__add_eventtag__add_unique_eventtag_event_id_key_id_value_id.py b/src/sentry/south_migrations/0237_auto__add_eventtag__add_unique_eventtag_event_id_key_id_value_id.py
index ff3a58a0eb..45a207d540 100644
--- a/src/sentry/south_migrations/0237_auto__add_eventtag__add_unique_eventtag_event_id_key_id_value_id.py
+++ b/src/sentry/south_migrations/0237_auto__add_eventtag__add_unique_eventtag_event_id_key_id_value_id.py
@@ -20,7 +20,7 @@ class Migration(SchemaMigration):
                 ('key_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()),
                 ('value_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0248_auto__add_projectplatform__add_unique_projectplatform_project_id_platf.py b/src/sentry/south_migrations/0248_auto__add_projectplatform__add_unique_projectplatform_project_id_platf.py
index 99fb0f4109..fa13ac5033 100644
--- a/src/sentry/south_migrations/0248_auto__add_projectplatform__add_unique_projectplatform_project_id_platf.py
+++ b/src/sentry/south_migrations/0248_auto__add_projectplatform__add_unique_projectplatform_project_id_platf.py
@@ -18,10 +18,10 @@ class Migration(SchemaMigration):
                 ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()),
                 ('platform', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'last_seen',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0250_auto__add_unique_userreport_project_event_id.py b/src/sentry/south_migrations/0250_auto__add_unique_userreport_project_event_id.py
index 8987bcc311..8f3034b4f9 100644
--- a/src/sentry/south_migrations/0250_auto__add_unique_userreport_project_event_id.py
+++ b/src/sentry/south_migrations/0250_auto__add_unique_userreport_project_event_id.py
@@ -14,11 +14,10 @@ class Migration(SchemaMigration):
             # before adding in the unique constraint. This isn't the most efficient
             # way to do this, but the volume of data is very low, so it's negligable
             seen = set()
-            dupe_ids = UserReport.objects.values_list('event_id').annotate(
-                models.Count('id'),
-            ).values_list('event_id').filter(
-                id__count__gt=1
-            )
+            dupe_ids = UserReport.objects.values('event_id').annotate(models.Count('id')
+                                                                      ).values('event_id').filter(
+                                                                          id__count__gt=1
+                                                                      )
             for report in UserReport.objects.filter(event_id__in=dupe_ids).order_by('-date_added'):
                 event_id = report.event_id
                 if event_id in seen:
diff --git a/src/sentry/south_migrations/0255_auto__add_apitoken.py b/src/sentry/south_migrations/0255_auto__add_apitoken.py
index 87cac346a9..4bb0b497cd 100644
--- a/src/sentry/south_migrations/0255_auto__add_apitoken.py
+++ b/src/sentry/south_migrations/0255_auto__add_apitoken.py
@@ -26,7 +26,7 @@ class Migration(SchemaMigration):
                 ('token', self.gf('django.db.models.fields.CharField')(unique=True, max_length=64)),
                 ('scopes', self.gf('django.db.models.fields.BigIntegerField')(default=None)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0256_auto__add_authenticator.py b/src/sentry/south_migrations/0256_auto__add_authenticator.py
index b24d67c1c3..d1b1c094bf 100644
--- a/src/sentry/south_migrations/0256_auto__add_authenticator.py
+++ b/src/sentry/south_migrations/0256_auto__add_authenticator.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'created_at',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('last_used_at', self.gf('django.db.models.fields.DateTimeField')(null=True)),
                 ('type', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
                 ('config', self.gf('sentry.db.models.fields.pickle.UnicodePickledObjectField')()),
diff --git a/src/sentry/south_migrations/0259_auto__add_useremail__add_unique_useremail_user_email.py b/src/sentry/south_migrations/0259_auto__add_useremail__add_unique_useremail_user_email.py
index b8667a5295..2547d415a2 100644
--- a/src/sentry/south_migrations/0259_auto__add_useremail__add_unique_useremail_user_email.py
+++ b/src/sentry/south_migrations/0259_auto__add_useremail__add_unique_useremail_user_email.py
@@ -21,7 +21,7 @@ class Migration(SchemaMigration):
                 ), ('email', self.gf('django.db.models.fields.EmailField')(max_length=75)),
                 ('validation_hash', self.gf('django.db.models.fields.CharField')(max_length=32)), (
                     'date_hash_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('is_verified', self.gf('django.db.models.fields.BooleanField')(default=False)),
             )
         )
diff --git a/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py b/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
index b8da11a9a9..c97fbce2bb 100644
--- a/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
+++ b/src/sentry/south_migrations/0261_auto__add_groupsubscription__add_unique_groupsubscription_group_user.py
@@ -33,7 +33,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_added', self.gf('django.db.models.fields.DateTimeField')(
-                        null=True
+                        default=datetime.datetime.now, null=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0266_auto__add_grouprelease__add_unique_grouprelease_group_id_release_id_en.py b/src/sentry/south_migrations/0266_auto__add_grouprelease__add_unique_grouprelease_group_id_release_id_en.py
index 26cb25ec4f..b688bf8698 100644
--- a/src/sentry/south_migrations/0266_auto__add_grouprelease__add_unique_grouprelease_group_id_release_id_en.py
+++ b/src/sentry/south_migrations/0266_auto__add_grouprelease__add_unique_grouprelease_group_id_release_id_en.py
@@ -32,10 +32,10 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.CharField')(default='', max_length=64)
                 ), (
                     'first_seen',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0267_auto__add_environment__add_unique_environment_project_id_name__add_rel.py b/src/sentry/south_migrations/0267_auto__add_environment__add_unique_environment_project_id_name__add_rel.py
index 25a4bf2c9e..9415f6dc5c 100644
--- a/src/sentry/south_migrations/0267_auto__add_environment__add_unique_environment_project_id_name__add_rel.py
+++ b/src/sentry/south_migrations/0267_auto__add_environment__add_unique_environment_project_id_name__add_rel.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()
                 ), ('name', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -52,10 +52,10 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'first_seen',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0269_auto__del_helppage.py b/src/sentry/south_migrations/0269_auto__del_helppage.py
index 453eb49731..720dc76344 100644
--- a/src/sentry/south_migrations/0269_auto__del_helppage.py
+++ b/src/sentry/south_migrations/0269_auto__del_helppage.py
@@ -21,7 +21,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('title', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(
                         primary_key=True
diff --git a/src/sentry/south_migrations/0273_auto__add_repository__add_unique_repository_organization_id_name__add_.py b/src/sentry/south_migrations/0273_auto__add_repository__add_unique_repository_organization_id_name__add_.py
index ce9dd13651..00f4e10383 100644
--- a/src/sentry/south_migrations/0273_auto__add_repository__add_unique_repository_organization_id_name__add_.py
+++ b/src/sentry/south_migrations/0273_auto__add_repository__add_unique_repository_organization_id_name__add_.py
@@ -21,7 +21,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('name', self.gf('django.db.models.fields.CharField')(max_length=200)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -47,7 +47,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()
                 ), ('key', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'author', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                         to=orm['sentry.CommitAuthor'], null=True
diff --git a/src/sentry/south_migrations/0291_merge_legacy_releases.py b/src/sentry/south_migrations/0291_merge_legacy_releases.py
index b647781bde..5b7f20760d 100644
--- a/src/sentry/south_migrations/0291_merge_legacy_releases.py
+++ b/src/sentry/south_migrations/0291_merge_legacy_releases.py
@@ -105,18 +105,21 @@ class Migration(DataMigration):
     def forwards(self, orm):
         db.commit_transaction()
 
-        dupe_releases = orm.Release.objects.values_list('version', 'organization_id')\
+        dupe_releases = orm.Release.objects.values('version', 'organization_id')\
                                            .annotate(vcount=models.Count('id'))\
                                            .filter(vcount__gt=1)
 
-        for version, org_id in dupe_releases:
+        for r in dupe_releases:
+            org_id = r['organization_id']
+            version = r['version']
+
             releases = list(
                 orm.Release.objects.filter(organization_id=org_id, version=version)
                 .order_by('date_added')
             )
 
             releases_with_files = list(
-                orm.ReleaseFile.objects.filter(release__in=releases).values_list('release_id', flat=True).distinct()
+                orm.ReleaseFile.objects.filter(release__in=releases).values('release_id').distinct()
             )
 
             # if multiple releases have files, just rename them
@@ -129,7 +132,7 @@ class Migration(DataMigration):
             if len(releases_with_files) == 1:
                 from_releases = []
                 for release in releases:
-                    if release.id == releases_with_files[0]:
+                    if release.id == releases_with_files[0]['release_id']:
                         to_release = release
                     else:
                         from_releases.append(release)
diff --git a/src/sentry/south_migrations/0294_auto__add_groupcommitresolution__add_unique_groupcommitresolution_grou.py b/src/sentry/south_migrations/0294_auto__add_groupcommitresolution__add_unique_groupcommitresolution_grou.py
index 8c909b6a6e..3684b69429 100644
--- a/src/sentry/south_migrations/0294_auto__add_groupcommitresolution__add_unique_groupcommitresolution_grou.py
+++ b/src/sentry/south_migrations/0294_auto__add_groupcommitresolution__add_unique_groupcommitresolution_grou.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
                     self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()
                 ), (
                     'datetime', self.gf('django.db.models.fields.DateTimeField')(
-                        db_index=True
+                        default=datetime.datetime.now, db_index=True
                     )
                 ),
             )
diff --git a/src/sentry/south_migrations/0300_auto__add_processingissue__add_unique_processingissue_project_checksum.py b/src/sentry/south_migrations/0300_auto__add_processingissue__add_unique_processingissue_project_checksum.py
index e0634a86e8..c845e9bac5 100644
--- a/src/sentry/south_migrations/0300_auto__add_processingissue__add_unique_processingissue_project_checksum.py
+++ b/src/sentry/south_migrations/0300_auto__add_processingissue__add_unique_processingissue_project_checksum.py
@@ -24,7 +24,7 @@ class Migration(SchemaMigration):
                 ), ('type', self.gf('django.db.models.fields.CharField')(max_length=30)),
                 ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')()), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -49,7 +49,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.CharField')(max_length=32, null=True)
                 ), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -74,7 +74,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.CharField')(max_length=32, null=True)
                 ), (
                     'datetime',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
                 ('data', self.gf('sentry.db.models.fields.node.NodeField')(null=True, blank=True)),
             )
diff --git a/src/sentry/south_migrations/0302_merge_environments.py b/src/sentry/south_migrations/0302_merge_environments.py
index 1a4e6c4fa8..c69a0da0e2 100644
--- a/src/sentry/south_migrations/0302_merge_environments.py
+++ b/src/sentry/south_migrations/0302_merge_environments.py
@@ -23,11 +23,14 @@ class Migration(DataMigration):
 
     def _forwards(self, orm):
         "Write your forwards methods here."
-        dupe_envs = orm.Environment.objects.values_list('name', 'organization_id')\
+        dupe_envs = orm.Environment.objects.values('name', 'organization_id')\
                                            .annotate(ecount=models.Count('id'))\
                                            .filter(ecount__gt=1)
 
-        for name, organization_id in dupe_envs:
+        for env in dupe_envs:
+            name = env['name']
+            organization_id = env['organization_id']
+
             envs = list(
                 orm.Environment.objects.filter(
                     name=name,
diff --git a/src/sentry/south_migrations/0304_auto__add_deploy.py b/src/sentry/south_migrations/0304_auto__add_deploy.py
index 4e572241ac..e4a74ae83d 100644
--- a/src/sentry/south_migrations/0304_auto__add_deploy.py
+++ b/src/sentry/south_migrations/0304_auto__add_deploy.py
@@ -30,7 +30,7 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'date_finished',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'date_started',
                     self.gf('django.db.models.fields.DateTimeField')(null=True, blank=True)
diff --git a/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py b/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py
index 31a89c6ca1..c11220e4c4 100644
--- a/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py
+++ b/src/sentry/south_migrations/0306_auto__add_apigrant__add_apiauthorization__add_unique_apiauthorization_.py
@@ -49,7 +49,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('scopes', self.gf('django.db.models.fields.BigIntegerField')(default=None)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -95,7 +95,7 @@ class Migration(SchemaMigration):
                     self.gf('django.db.models.fields.URLField')(max_length=200, null=True)
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0308_auto__add_versiondsymfile__add_unique_versiondsymfile_dsym_file_versio.py b/src/sentry/south_migrations/0308_auto__add_versiondsymfile__add_unique_versiondsymfile_dsym_file_versio.py
index e23e66d717..350aba1f75 100644
--- a/src/sentry/south_migrations/0308_auto__add_versiondsymfile__add_unique_versiondsymfile_dsym_file_versio.py
+++ b/src/sentry/south_migrations/0308_auto__add_versiondsymfile__add_unique_versiondsymfile_dsym_file_versio.py
@@ -25,7 +25,7 @@ class Migration(SchemaMigration):
                 ), ('version', self.gf('django.db.models.fields.CharField')(max_length=32)),
                 ('build', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
@@ -54,10 +54,10 @@ class Migration(SchemaMigration):
                     )
                 ), (
                     'last_synced',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0314_auto__add_distribution__add_unique_distribution_release_name__add_fiel.py b/src/sentry/south_migrations/0314_auto__add_distribution__add_unique_distribution_release_name__add_fiel.py
index 1a9c614c67..a49164884f 100644
--- a/src/sentry/south_migrations/0314_auto__add_distribution__add_unique_distribution_release_name__add_fiel.py
+++ b/src/sentry/south_migrations/0314_auto__add_distribution__add_unique_distribution_release_name__add_fiel.py
@@ -25,7 +25,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('name', self.gf('django.db.models.fields.CharField')(max_length=64)), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ),
             )
         )
diff --git a/src/sentry/south_migrations/0325_auto__add_scheduleddeletion__add_unique_scheduleddeletion_app_label_mo.py b/src/sentry/south_migrations/0325_auto__add_scheduleddeletion__add_unique_scheduleddeletion_app_label_mo.py
index ec058c39e0..57d630def3 100644
--- a/src/sentry/south_migrations/0325_auto__add_scheduleddeletion__add_unique_scheduleddeletion_app_label_mo.py
+++ b/src/sentry/south_migrations/0325_auto__add_scheduleddeletion__add_unique_scheduleddeletion_app_label_mo.py
@@ -23,7 +23,7 @@ class Migration(SchemaMigration):
                 ('object_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')()),
                 (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), (
                     'date_scheduled', self.gf('django.db.models.fields.DateTimeField')(
                         default=datetime.datetime(2017, 6, 30, 0, 0)
diff --git a/src/sentry/south_migrations/0332_auto__add_featureadoption__add_unique_featureadoption_organization_fea.py b/src/sentry/south_migrations/0332_auto__add_featureadoption__add_unique_featureadoption_organization_fea.py
index b16a5347bf..4dbd48596d 100644
--- a/src/sentry/south_migrations/0332_auto__add_featureadoption__add_unique_featureadoption_organization_fea.py
+++ b/src/sentry/south_migrations/0332_auto__add_featureadoption__add_unique_featureadoption_organization_fea.py
@@ -21,7 +21,7 @@ class Migration(SchemaMigration):
                     )
                 ), ('feature_id', self.gf('django.db.models.fields.PositiveIntegerField')()), (
                     'date_completed',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('complete', self.gf('django.db.models.fields.BooleanField')(default=False)),
                 ('applicable', self.gf('django.db.models.fields.BooleanField')(default=True)),
                 ('data', self.gf('jsonfield.fields.JSONField')(default={})),
diff --git a/src/sentry/south_migrations/0334_auto__add_scheduledjob.py b/src/sentry/south_migrations/0334_auto__add_scheduledjob.py
index 165ea12d73..5e67d1f793 100644
--- a/src/sentry/south_migrations/0334_auto__add_scheduledjob.py
+++ b/src/sentry/south_migrations/0334_auto__add_scheduledjob.py
@@ -17,7 +17,7 @@ class Migration(SchemaMigration):
                 ), ('name', self.gf('django.db.models.fields.CharField')(max_length=128)),
                 ('payload', self.gf('jsonfield.fields.JSONField')(default={})), (
                     'date_added',
-                    self.gf('django.db.models.fields.DateTimeField')()
+                    self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)
                 ), ('date_scheduled', self.gf('django.db.models.fields.DateTimeField')()),
             )
         )
diff --git a/src/sentry/south_migrations/0336_auto__add_field_user_last_active.py b/src/sentry/south_migrations/0336_auto__add_field_user_last_active.py
index f4835e3598..27e4a318c7 100644
--- a/src/sentry/south_migrations/0336_auto__add_field_user_last_active.py
+++ b/src/sentry/south_migrations/0336_auto__add_field_user_last_active.py
@@ -12,7 +12,7 @@ class Migration(SchemaMigration):
             'auth_user',
             'last_active',
             self.gf('django.db.models.fields.DateTimeField')(
-                null=True
+                default=datetime.datetime.now, null=True
             ),
             keep_default=False
         )
diff --git a/src/sentry/south_migrations/0350_auto__add_email.py b/src/sentry/south_migrations/0350_auto__add_email.py
index 476eee39aa..082f668001 100644
--- a/src/sentry/south_migrations/0350_auto__add_email.py
+++ b/src/sentry/south_migrations/0350_auto__add_email.py
@@ -12,7 +12,7 @@ class Migration(SchemaMigration):
         db.create_table('sentry_email', (
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('email', self.gf('sentry.db.models.fields.citext.CIEmailField')(unique=True, max_length=75)),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['Email'])
 
diff --git a/src/sentry/south_migrations/0356_auto__add_useridentity__add_unique_useridentity_user_identity__add_ide.py b/src/sentry/south_migrations/0356_auto__add_useridentity__add_unique_useridentity_user_identity__add_ide.py
index 74d6c9eea8..4c4b18075d 100644
--- a/src/sentry/south_migrations/0356_auto__add_useridentity__add_unique_useridentity_user_identity__add_ide.py
+++ b/src/sentry/south_migrations/0356_auto__add_useridentity__add_unique_useridentity_user_identity__add_ide.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                 to=orm['sentry.User'])),
             ('identity', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['sentry.Identity'])),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['UserIdentity'])
 
@@ -47,8 +47,8 @@ class Migration(SchemaMigration):
             ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('scopes', self.gf('sentry.db.models.fields.array.ArrayField')(
                 of=('django.db.models.fields.TextField', [], {}))),
-            ('date_verified', self.gf('django.db.models.fields.DateTimeField')()),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_verified', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['Identity'])
 
diff --git a/src/sentry/south_migrations/0360_auto__add_groupshare.py b/src/sentry/south_migrations/0360_auto__add_groupshare.py
index 034439dff3..8368849c2f 100644
--- a/src/sentry/south_migrations/0360_auto__add_groupshare.py
+++ b/src/sentry/south_migrations/0360_auto__add_groupshare.py
@@ -23,7 +23,7 @@ class Migration(SchemaMigration):
              (default='2acbdbb7a1ee4a06b73a04317a3ca91d', unique=True, max_length=32)),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['sentry.User'], null=True)),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['GroupShare'])
 
diff --git a/src/sentry/south_migrations/0362_auto__add_userip__add_unique_userip_user_ip_address.py b/src/sentry/south_migrations/0362_auto__add_userip__add_unique_userip_user_ip_address.py
index 0d4fd4f7a8..5573cfed43 100644
--- a/src/sentry/south_migrations/0362_auto__add_userip__add_unique_userip_user_ip_address.py
+++ b/src/sentry/south_migrations/0362_auto__add_userip__add_unique_userip_user_ip_address.py
@@ -18,8 +18,8 @@ class Migration(SchemaMigration):
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['sentry.User'])),
             ('ip_address', self.gf('django.db.models.fields.GenericIPAddressField')(max_length=39)),
-            ('first_seen', self.gf('django.db.models.fields.DateTimeField')()),
-            ('last_seen', self.gf('django.db.models.fields.DateTimeField')()),
+            ('first_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('last_seen', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['UserIP'])
 
diff --git a/src/sentry/south_migrations/0363_auto__add_grouplink__add_unique_grouplink_group_id_linked_type_linked_.py b/src/sentry/south_migrations/0363_auto__add_grouplink__add_unique_grouplink_group_id_linked_type_linked_.py
index fc1e0befd4..bdd9b5f160 100644
--- a/src/sentry/south_migrations/0363_auto__add_grouplink__add_unique_grouplink_group_id_linked_type_linked_.py
+++ b/src/sentry/south_migrations/0363_auto__add_grouplink__add_unique_grouplink_group_id_linked_type_linked_.py
@@ -22,7 +22,7 @@ class Migration(SchemaMigration):
             ('relationship', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=2)),
             ('data', self.gf('jsonfield.fields.JSONField')(default={})),
             ('datetime', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
         ))
         db.send_create_signal('sentry', ['GroupLink'])
 
diff --git a/src/sentry/south_migrations/0368_auto__add_deletedorganization__add_deletedteam__add_deletedproject.py b/src/sentry/south_migrations/0368_auto__add_deletedorganization__add_deletedteam__add_deletedproject.py
index c23739bb99..77e497e8ff 100644
--- a/src/sentry/south_migrations/0368_auto__add_deletedorganization__add_deletedteam__add_deletedproject.py
+++ b/src/sentry/south_migrations/0368_auto__add_deletedorganization__add_deletedteam__add_deletedproject.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
             ('actor_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True)),
             ('actor_key', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)),
             ('ip_address', self.gf('django.db.models.fields.GenericIPAddressField')(max_length=39, null=True)),
-            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('date_created', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('reason', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
             ('name', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
@@ -34,7 +34,7 @@ class Migration(SchemaMigration):
             ('actor_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True)),
             ('actor_key', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)),
             ('ip_address', self.gf('django.db.models.fields.GenericIPAddressField')(max_length=39, null=True)),
-            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('date_created', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('reason', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
             ('name', self.gf('django.db.models.fields.CharField')(max_length=64, null=True)),
@@ -52,7 +52,7 @@ class Migration(SchemaMigration):
             ('actor_id', self.gf('sentry.db.models.fields.bounded.BoundedBigIntegerField')(null=True)),
             ('actor_key', self.gf('django.db.models.fields.CharField')(max_length=32, null=True)),
             ('ip_address', self.gf('django.db.models.fields.GenericIPAddressField')(max_length=39, null=True)),
-            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_deleted', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('date_created', self.gf('django.db.models.fields.DateTimeField')(null=True)),
             ('reason', self.gf('django.db.models.fields.TextField')(null=True, blank=True)),
             ('slug', self.gf('django.db.models.fields.CharField')(max_length=50, null=True)),
diff --git a/src/sentry/south_migrations/0371_auto__add_servicehook.py b/src/sentry/south_migrations/0371_auto__add_servicehook.py
index 12177986f7..a2c9de46db 100644
--- a/src/sentry/south_migrations/0371_auto__add_servicehook.py
+++ b/src/sentry/south_migrations/0371_auto__add_servicehook.py
@@ -27,7 +27,7 @@ class Migration(SchemaMigration):
             ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(
                 default=0, db_index=True)),
             ('version', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['ServiceHook'])
 
diff --git a/src/sentry/south_migrations/0374_auto__del_useridentity__del_unique_useridentity_user_identity__del_ide.py b/src/sentry/south_migrations/0374_auto__del_useridentity__del_unique_useridentity_user_identity__del_ide.py
index 8bd7ae348f..aa29ab140e 100644
--- a/src/sentry/south_migrations/0374_auto__del_useridentity__del_unique_useridentity_user_identity__del_ide.py
+++ b/src/sentry/south_migrations/0374_auto__del_useridentity__del_unique_useridentity_user_identity__del_ide.py
@@ -34,7 +34,7 @@ class Migration(SchemaMigration):
     def backwards(self, orm):
         # Adding model 'UserIdentity'
         db.create_table(u'sentry_useridentity', (
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('identity', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.Identity'])),
             ('user', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.User'])),
@@ -61,10 +61,10 @@ class Migration(SchemaMigration):
             ('idp', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(to=orm['sentry.IdentityProvider'])),
             ('external_id', self.gf('django.db.models.fields.CharField')(max_length=64)),
             ('scopes', self.gf('sentry.db.models.fields.array.ArrayField')(of=('django.db.models.fields.TextField', [], {}))),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('data', self.gf('sentry.db.models.fields.encrypted.EncryptedJsonField')(default={})),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
-            ('date_verified', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_verified', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['Identity'])
 
diff --git a/src/sentry/south_migrations/0375_auto__add_identityprovider__add_unique_identityprovider_type_organizat.py b/src/sentry/south_migrations/0375_auto__add_identityprovider__add_unique_identityprovider_type_organizat.py
index 51a0bff362..fab53bf8e7 100644
--- a/src/sentry/south_migrations/0375_auto__add_identityprovider__add_unique_identityprovider_type_organizat.py
+++ b/src/sentry/south_migrations/0375_auto__add_identityprovider__add_unique_identityprovider_type_organizat.py
@@ -33,8 +33,8 @@ class Migration(SchemaMigration):
             ('data', self.gf('sentry.db.models.fields.encrypted.EncryptedJsonField')(default={})),
             ('status', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('scopes', self.gf('sentry.db.models.fields.array.ArrayField')(of=('django.db.models.fields.TextField', [], {}))),
-            ('date_verified', self.gf('django.db.models.fields.DateTimeField')()),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_verified', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
         ))
         db.send_create_signal('sentry', ['Identity'])
 
diff --git a/src/sentry/south_migrations/0377_auto__add_pullrequest__add_unique_pullrequest_repository_id_key__add_i.py b/src/sentry/south_migrations/0377_auto__add_pullrequest__add_unique_pullrequest_repository_id_key__add_i.py
index 50ea16566b..6f2d967da6 100644
--- a/src/sentry/south_migrations/0377_auto__add_pullrequest__add_unique_pullrequest_repository_id_key__add_i.py
+++ b/src/sentry/south_migrations/0377_auto__add_pullrequest__add_unique_pullrequest_repository_id_key__add_i.py
@@ -19,7 +19,7 @@ class Migration(SchemaMigration):
                 'sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
             ('repository_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('key', self.gf('django.db.models.fields.CharField')(max_length=64)),
-            ('date_added', self.gf('django.db.models.fields.DateTimeField')()),
+            ('date_added', self.gf('django.db.models.fields.DateTimeField')(default=datetime.datetime.now)),
             ('title', self.gf('django.db.models.fields.TextField')(null=True)),
             ('message', self.gf('django.db.models.fields.TextField')(null=True)),
             ('author', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
diff --git a/src/sentry/south_migrations/0392_auto__chg_field_user_last_login.py b/src/sentry/south_migrations/0392_auto__chg_field_user_last_login.py
deleted file mode 100644
index 453ba62cb3..0000000000
--- a/src/sentry/south_migrations/0392_auto__chg_field_user_last_login.py
+++ /dev/null
@@ -1,1066 +0,0 @@
-# -*- coding: utf-8 -*-
-from south.utils import datetime_utils as datetime
-from south.db import db
-from south.v2 import SchemaMigration
-from django.db import models
-
-
-class Migration(SchemaMigration):
-
-    # Flag to indicate if this migration is too risky
-    # to run online and needs to be coordinated for offline
-    is_dangerous = False
-
-    def forwards(self, orm):
-
-        # Changing field 'User.last_login'
-        db.alter_column('auth_user', 'last_login', self.gf('django.db.models.fields.DateTimeField')(null=True))
-
-    def backwards(self, orm):
-
-        # Changing field 'User.last_login'
-        db.alter_column('auth_user', 'last_login', self.gf('django.db.models.fields.DateTimeField')())
-
-    models = {
-        'sentry.activity': {
-            'Meta': {'object_name': 'Activity'},
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
-        },
-        'sentry.apiapplication': {
-            'Meta': {'object_name': 'ApiApplication'},
-            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'client_id': ('django.db.models.fields.CharField', [], {'default': "'33736a2d1d0f409d8c9733134a2235f88ace07fb5a2b400a9de0ab37091cf003'", 'unique': 'True', 'max_length': '64'}),
-            'client_secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'8588eb9cd56b425c940ca0a87106beb1e57babab8a604029a7ea66f27b01742a'"}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'homepage_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'default': "'Blessed Burro'", 'max_length': '64', 'blank': 'True'}),
-            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
-            'privacy_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'}),
-            'redirect_uris': ('django.db.models.fields.TextField', [], {}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'terms_url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
-        },
-        'sentry.apiauthorization': {
-            'Meta': {'unique_together': "(('user', 'application'),)", 'object_name': 'ApiAuthorization'},
-            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.apigrant': {
-            'Meta': {'object_name': 'ApiGrant'},
-            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']"}),
-            'code': ('django.db.models.fields.CharField', [], {'default': "'6158f0d04e8246bc86ed3a7782d15ffb'", 'max_length': '64', 'db_index': 'True'}),
-            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 2, 21, 0, 0)', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'redirect_uri': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
-            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.apikey': {
-            'Meta': {'object_name': 'ApiKey'},
-            'allowed_origins': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32'}),
-            'label': ('django.db.models.fields.CharField', [], {'default': "'Default'", 'max_length': '64', 'blank': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Organization']"}),
-            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
-        },
-        'sentry.apitoken': {
-            'Meta': {'object_name': 'ApiToken'},
-            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'expires_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 3, 23, 0, 0)', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'refresh_token': ('django.db.models.fields.CharField', [], {'default': "'04dd8a81a6cd4a0b839553a5df24ade33c3a044441d84488a0a45b7e453e2bbb'", 'max_length': '64', 'unique': 'True', 'null': 'True'}),
-            'scope_list': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'scopes': ('django.db.models.fields.BigIntegerField', [], {'default': 'None'}),
-            'token': ('django.db.models.fields.CharField', [], {'default': "'ee59f428599a4543abe528fb89893950a60bf18a007347faaafe94201ddea8f2'", 'unique': 'True', 'max_length': '64'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.auditlogentry': {
-            'Meta': {'object_name': 'AuditLogEntry'},
-            'actor': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_actors'", 'null': 'True', 'to': "orm['sentry.User']"}),
-            'actor_key': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiKey']", 'null': 'True', 'blank': 'True'}),
-            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'event': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'target_object': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'target_user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'audit_targets'", 'null': 'True', 'to': "orm['sentry.User']"})
-        },
-        'sentry.authenticator': {
-            'Meta': {'unique_together': "(('user', 'type'),)", 'object_name': 'Authenticator', 'db_table': "'auth_authenticator'"},
-            'config': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {}),
-            'created_at': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
-            'last_used_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.authidentity': {
-            'Meta': {'unique_together': "(('auth_provider', 'ident'), ('auth_provider', 'user'))", 'object_name': 'AuthIdentity'},
-            'auth_provider': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.AuthProvider']"}),
-            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'last_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.authprovider': {
-            'Meta': {'object_name': 'AuthProvider'},
-            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'default_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'default_role': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50'}),
-            'default_teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'blank': 'True'}),
-            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_sync': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'unique': 'True'}),
-            'provider': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'sync_time': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
-        },
-        'sentry.broadcast': {
-            'Meta': {'object_name': 'Broadcast'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_expires': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 2, 28, 0, 0)', 'null': 'True', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True', 'db_index': 'True'}),
-            'link': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.CharField', [], {'max_length': '256'}),
-            'title': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'upstream_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'blank': 'True'})
-        },
-        'sentry.broadcastseen': {
-            'Meta': {'unique_together': "(('broadcast', 'user'),)", 'object_name': 'BroadcastSeen'},
-            'broadcast': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Broadcast']"}),
-            'date_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.commit': {
-            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'Commit', 'index_together': "(('repository_id', 'date_added'),)"},
-            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
-        },
-        'sentry.commitauthor': {
-            'Meta': {'unique_together': "(('organization_id', 'email'), ('organization_id', 'external_id'))", 'object_name': 'CommitAuthor'},
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
-            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '164', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
-        },
-        'sentry.commitfilechange': {
-            'Meta': {'unique_together': "(('commit', 'filename'),)", 'object_name': 'CommitFileChange'},
-            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
-            'filename': ('django.db.models.fields.CharField', [], {'max_length': '255'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'type': ('django.db.models.fields.CharField', [], {'max_length': '1'})
-        },
-        'sentry.counter': {
-            'Meta': {'object_name': 'Counter', 'db_table': "'sentry_projectcounter'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'unique': 'True'}),
-            'value': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
-        },
-        'sentry.deletedorganization': {
-            'Meta': {'object_name': 'DeletedOrganization'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
-        },
-        'sentry.deletedproject': {
-            'Meta': {'object_name': 'DeletedProject'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'organization_name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'organization_slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
-            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
-        },
-        'sentry.deletedteam': {
-            'Meta': {'object_name': 'DeletedTeam'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'actor_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'actor_label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'date_created': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'date_deleted': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'organization_name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'organization_slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'}),
-            'reason': ('django.db.models.fields.TextField', [], {'null': 'True', 'blank': 'True'}),
-            'slug': ('django.db.models.fields.CharField', [], {'max_length': '50', 'null': 'True'})
-        },
-        'sentry.deploy': {
-            'Meta': {'object_name': 'Deploy'},
-            'date_finished': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
-            'notified': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'db_index': 'True', 'blank': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'})
-        },
-        'sentry.distribution': {
-            'Meta': {'unique_together': "(('release', 'name'),)", 'object_name': 'Distribution'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
-        },
-        'sentry.dsymapp': {
-            'Meta': {'unique_together': "(('project', 'platform', 'app_id'),)", 'object_name': 'DSymApp'},
-            'app_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_synced': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'platform': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'sync_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'})
-        },
-        'sentry.email': {
-            'Meta': {'object_name': 'Email'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'email': ('sentry.db.models.fields.citext.CIEmailField', [], {'unique': 'True', 'max_length': '75'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
-        },
-        'sentry.environment': {
-            'Meta': {'unique_together': "(('project_id', 'name'), ('organization_id', 'name'))", 'object_name': 'Environment'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Project']", 'through': "orm['sentry.EnvironmentProject']", 'symmetrical': 'False'})
-        },
-        'sentry.environmentproject': {
-            'Meta': {'unique_together': "(('project', 'environment'),)", 'object_name': 'EnvironmentProject'},
-            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_hidden': ('django.db.models.fields.NullBooleanField', [], {'null': 'True', 'blank': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.event': {
-            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'Event', 'db_table': "'sentry_message'", 'index_together': "(('group_id', 'datetime'),)"},
-            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True', 'db_column': "'message_id'"}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
-            'time_spent': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'null': 'True'})
-        },
-        'sentry.eventmapping': {
-            'Meta': {'unique_together': "(('project_id', 'event_id'),)", 'object_name': 'EventMapping'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
-        },
-        'sentry.eventprocessingissue': {
-            'Meta': {'unique_together': "(('raw_event', 'processing_issue'),)", 'object_name': 'EventProcessingIssue'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'processing_issue': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProcessingIssue']"}),
-            'raw_event': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.RawEvent']"})
-        },
-        'sentry.eventtag': {
-            'Meta': {'unique_together': "(('event_id', 'key_id', 'value_id'),)", 'object_name': 'EventTag', 'index_together': "(('group_id', 'key_id', 'value_id'),)"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'event_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'value_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
-        },
-        'sentry.eventuser': {
-            'Meta': {'unique_together': "(('project_id', 'ident'), ('project_id', 'hash'))", 'object_name': 'EventUser', 'index_together': "(('project_id', 'email'), ('project_id', 'username'), ('project_id', 'ip_address'))"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True'}),
-            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39', 'null': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'username': ('django.db.models.fields.CharField', [], {'max_length': '128', 'null': 'True'})
-        },
-        'sentry.featureadoption': {
-            'Meta': {'unique_together': "(('organization', 'feature_id'),)", 'object_name': 'FeatureAdoption'},
-            'applicable': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'complete': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'feature_id': ('django.db.models.fields.PositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
-        },
-        'sentry.file': {
-            'Meta': {'object_name': 'File'},
-            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'legacy_blob'", 'null': 'True', 'to': "orm['sentry.FileBlob']"}),
-            'blobs': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.FileBlob']", 'through': "orm['sentry.FileBlobIndex']", 'symmetrical': 'False'}),
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'null': 'True', 'db_index': 'True'}),
-            'headers': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
-            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
-        },
-        'sentry.fileblob': {
-            'Meta': {'object_name': 'FileBlob'},
-            'checksum': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '40'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'path': ('django.db.models.fields.TextField', [], {'null': 'True'}),
-            'size': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'timestamp': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'})
-        },
-        'sentry.fileblobindex': {
-            'Meta': {'unique_together': "(('file', 'blob', 'offset'),)", 'object_name': 'FileBlobIndex'},
-            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
-            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'offset': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
-        },
-        'sentry.fileblobowner': {
-            'Meta': {'unique_together': "(('blob', 'organization'),)", 'object_name': 'FileBlobOwner'},
-            'blob': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.FileBlob']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
-        },
-        'sentry.group': {
-            'Meta': {'unique_together': "(('project', 'short_id'),)", 'object_name': 'Group', 'db_table': "'sentry_groupedmessage'", 'index_together': "(('project', 'first_release'),)"},
-            'active_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
-            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'db_column': "'view'", 'blank': 'True'}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']", 'null': 'True', 'on_delete': 'models.PROTECT'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_public': ('django.db.models.fields.NullBooleanField', [], {'default': 'False', 'null': 'True', 'blank': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'db_index': 'True', 'blank': 'True'}),
-            'logger': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64', 'db_index': 'True', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'num_comments': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
-            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
-            'resolved_at': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'db_index': 'True'}),
-            'score': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
-            'short_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'time_spent_count': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
-            'time_spent_total': ('sentry.db.models.fields.bounded.BoundedIntegerField', [], {'default': '0'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1', 'db_index': 'True'})
-        },
-        'sentry.groupassignee': {
-            'Meta': {'object_name': 'GroupAssignee', 'db_table': "'sentry_groupasignee'"},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'unique': 'True', 'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'assignee_set'", 'to': "orm['sentry.Project']"}),
-            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_assignee_set'", 'null': 'True', 'to': "orm['sentry.User']"})
-        },
-        'sentry.groupbookmark': {
-            'Meta': {'unique_together': "(('project', 'user', 'group'),)", 'object_name': 'GroupBookmark'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'bookmark_set'", 'to': "orm['sentry.Project']"}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'sentry_bookmark_set'", 'to': "orm['sentry.User']"})
-        },
-        'sentry.groupcommitresolution': {
-            'Meta': {'unique_together': "(('group_id', 'commit_id'),)", 'object_name': 'GroupCommitResolution'},
-            'commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
-        },
-        'sentry.groupemailthread': {
-            'Meta': {'unique_together': "(('email', 'group'), ('email', 'msgid'))", 'object_name': 'GroupEmailThread'},
-            'date': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'msgid': ('django.db.models.fields.CharField', [], {'max_length': '100'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'groupemail_set'", 'to': "orm['sentry.Project']"})
-        },
-        'sentry.groupenvironment': {
-            'Meta': {'unique_together': "[('group_id', 'environment_id')]", 'object_name': 'GroupEnvironment', 'index_together': "[('environment_id', 'first_release_id')]"},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'first_release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'})
-        },
-        'sentry.grouphash': {
-            'Meta': {'unique_together': "(('project', 'hash'),)", 'object_name': 'GroupHash'},
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
-            'group_tombstone_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
-            'state': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
-        },
-        'sentry.grouplink': {
-            'Meta': {'unique_together': "(('group_id', 'linked_type', 'linked_id'),)", 'object_name': 'GroupLink'},
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'linked_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {}),
-            'linked_type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '1'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'relationship': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '2'})
-        },
-        'sentry.groupmeta': {
-            'Meta': {'unique_together': "(('group', 'key'),)", 'object_name': 'GroupMeta'},
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'value': ('django.db.models.fields.TextField', [], {})
-        },
-        'sentry.groupredirect': {
-            'Meta': {'object_name': 'GroupRedirect'},
-            'group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'unique': 'True'})
-        },
-        'sentry.grouprelease': {
-            'Meta': {'unique_together': "(('group_id', 'release_id', 'environment'),)", 'object_name': 'GroupRelease'},
-            'environment': ('django.db.models.fields.CharField', [], {'default': "''", 'max_length': '64'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
-        },
-        'sentry.groupresolution': {
-            'Meta': {'object_name': 'GroupResolution'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
-        },
-        'sentry.grouprulestatus': {
-            'Meta': {'unique_together': "(('rule', 'group'),)", 'object_name': 'GroupRuleStatus'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_active': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'rule': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Rule']"}),
-            'status': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'})
-        },
-        'sentry.groupseen': {
-            'Meta': {'unique_together': "(('user', 'group'),)", 'object_name': 'GroupSeen'},
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'db_index': 'False'})
-        },
-        'sentry.groupshare': {
-            'Meta': {'object_name': 'GroupShare'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
-            'uuid': ('django.db.models.fields.CharField', [], {'default': "'e87eaf684d1c4ad5b4e67d6f310132b6'", 'unique': 'True', 'max_length': '32'})
-        },
-        'sentry.groupsnooze': {
-            'Meta': {'object_name': 'GroupSnooze'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'unique': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'state': ('jsonfield.fields.JSONField', [], {'null': 'True'}),
-            'until': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'user_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'user_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'})
-        },
-        'sentry.groupsubscription': {
-            'Meta': {'unique_together': "(('group', 'user'),)", 'object_name': 'GroupSubscription'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Group']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'subscription_set'", 'to': "orm['sentry.Project']"}),
-            'reason': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.grouptagkey': {
-            'Meta': {'unique_together': "(('project_id', 'group_id', 'key'),)", 'object_name': 'GroupTagKey'},
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'sentry.grouptagvalue': {
-            'Meta': {'unique_together': "(('group_id', 'key', 'value'),)", 'object_name': 'GroupTagValue', 'db_table': "'sentry_messagefiltervalue'", 'index_together': "(('project_id', 'key', 'value', 'last_seen'),)"},
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        },
-        'sentry.grouptombstone': {
-            'Meta': {'object_name': 'GroupTombstone'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'culprit': ('django.db.models.fields.CharField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'level': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '40', 'blank': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {}),
-            'previous_group_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'unique': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.identity': {
-            'Meta': {'unique_together': "(('idp', 'external_id'),)", 'object_name': 'Identity'},
-            'data': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_verified': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'idp': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.IdentityProvider']"}),
-            'scopes': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.identityprovider': {
-            'Meta': {'unique_together': "(('type', 'organization'),)", 'object_name': 'IdentityProvider'},
-            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'type': ('django.db.models.fields.CharField', [], {'max_length': '64'})
-        },
-        'sentry.integration': {
-            'Meta': {'unique_together': "(('provider', 'external_id'),)", 'object_name': 'Integration'},
-            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'metadata': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
-            'organizations': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationIntegration']", 'to': "orm['sentry.Organization']"}),
-            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'integrations'", 'symmetrical': 'False', 'through': "orm['sentry.ProjectIntegration']", 'to': "orm['sentry.Project']"}),
-            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64'})
-        },
-        'sentry.lostpasswordhash': {
-            'Meta': {'object_name': 'LostPasswordHash'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'hash': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'unique': 'True'})
-        },
-        'sentry.option': {
-            'Meta': {'object_name': 'Option'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '64'}),
-            'last_updated': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
-        },
-        'sentry.organization': {
-            'Meta': {'object_name': 'Organization'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'default_role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
-            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'members': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'org_memberships'", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMember']", 'to': "orm['sentry.User']"}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'slug': ('django.db.models.fields.SlugField', [], {'unique': 'True', 'max_length': '50'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'sentry.organizationaccessrequest': {
-            'Meta': {'unique_together': "(('team', 'member'),)", 'object_name': 'OrganizationAccessRequest'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'member': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
-            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
-        },
-        'sentry.organizationavatar': {
-            'Meta': {'object_name': 'OrganizationAvatar'},
-            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
-            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.Organization']"})
-        },
-        'sentry.organizationintegration': {
-            'Meta': {'unique_together': "(('organization', 'integration'),)", 'object_name': 'OrganizationIntegration'},
-            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'default_auth_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"})
-        },
-        'sentry.organizationmember': {
-            'Meta': {'unique_together': "(('organization', 'user'), ('organization', 'email'))", 'object_name': 'OrganizationMember'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'null': 'True', 'blank': 'True'}),
-            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0'}),
-            'has_global_access': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'member_set'", 'to': "orm['sentry.Organization']"}),
-            'role': ('django.db.models.fields.CharField', [], {'default': "'member'", 'max_length': '32'}),
-            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'to': "orm['sentry.Team']", 'symmetrical': 'False', 'through': "orm['sentry.OrganizationMemberTeam']", 'blank': 'True'}),
-            'token': ('django.db.models.fields.CharField', [], {'max_length': '64', 'unique': 'True', 'null': 'True', 'blank': 'True'}),
-            'type': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '50', 'blank': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'blank': 'True', 'related_name': "'sentry_orgmember_set'", 'null': 'True', 'to': "orm['sentry.User']"})
-        },
-        'sentry.organizationmemberteam': {
-            'Meta': {'unique_together': "(('team', 'organizationmember'),)", 'object_name': 'OrganizationMemberTeam', 'db_table': "'sentry_organizationmember_teams'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
-            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'organizationmember': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.OrganizationMember']"}),
-            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
-        },
-        'sentry.organizationonboardingtask': {
-            'Meta': {'unique_together': "(('organization', 'task'),)", 'object_name': 'OrganizationOnboardingTask'},
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_completed': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'task': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'})
-        },
-        'sentry.organizationoption': {
-            'Meta': {'unique_together': "(('organization', 'key'),)", 'object_name': 'OrganizationOption', 'db_table': "'sentry_organizationoptions'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
-        },
-        'sentry.processingissue': {
-            'Meta': {'unique_together': "(('project', 'checksum', 'type'),)", 'object_name': 'ProcessingIssue'},
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40', 'db_index': 'True'}),
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'type': ('django.db.models.fields.CharField', [], {'max_length': '30'})
-        },
-        'sentry.project': {
-            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Project'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'first_event': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'flags': ('django.db.models.fields.BigIntegerField', [], {'default': '0', 'null': 'True'}),
-            'forced_color': ('django.db.models.fields.CharField', [], {'max_length': '6', 'null': 'True', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'public': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50', 'null': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']", 'null': 'True'}),
-            'teams': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'teams'", 'symmetrical': 'False', 'through': "orm['sentry.ProjectTeam']", 'to': "orm['sentry.Team']"})
-        },
-        'sentry.projectbookmark': {
-            'Meta': {'unique_together': "(('project_id', 'user'),)", 'object_name': 'ProjectBookmark'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True', 'blank': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.projectdsymfile': {
-            'Meta': {'unique_together': "(('project', 'uuid'),)", 'object_name': 'ProjectDSymFile'},
-            'cpu_name': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
-            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'object_name': ('django.db.models.fields.TextField', [], {}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
-            'uuid': ('django.db.models.fields.CharField', [], {'max_length': '36'})
-        },
-        'sentry.projectintegration': {
-            'Meta': {'unique_together': "(('project', 'integration'),)", 'object_name': 'ProjectIntegration'},
-            'config': ('sentry.db.models.fields.encrypted.EncryptedJsonField', [], {'default': '{}'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'integration': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Integration']"}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.projectkey': {
-            'Meta': {'object_name': 'ProjectKey'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True', 'blank': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'key_set'", 'to': "orm['sentry.Project']"}),
-            'public_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
-            'rate_limit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'rate_limit_window': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'roles': ('django.db.models.fields.BigIntegerField', [], {'default': '1'}),
-            'secret_key': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
-        },
-        'sentry.projectoption': {
-            'Meta': {'unique_together': "(('project', 'key'),)", 'object_name': 'ProjectOption', 'db_table': "'sentry_projectoptions'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
-        },
-        'sentry.projectplatform': {
-            'Meta': {'unique_together': "(('project_id', 'platform'),)", 'object_name': 'ProjectPlatform'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'platform': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
-        },
-        'sentry.projectsymcachefile': {
-            'Meta': {'unique_together': "(('project', 'dsym_file'),)", 'object_name': 'ProjectSymCacheFile'},
-            'cache_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
-            'checksum': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
-            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
-            'version': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
-        },
-        'sentry.projectteam': {
-            'Meta': {'unique_together': "(('project', 'team'),)", 'object_name': 'ProjectTeam'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'team': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Team']"})
-        },
-        'sentry.pullrequest': {
-            'Meta': {'unique_together': "(('repository_id', 'key'),)", 'object_name': 'PullRequest', 'db_table': "'sentry_pull_request'", 'index_together': "(('repository_id', 'date_added'),)"},
-            'author': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.CommitAuthor']", 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'merge_commit_sha': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'message': ('django.db.models.fields.TextField', [], {'null': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'title': ('django.db.models.fields.TextField', [], {'null': 'True'})
-        },
-        'sentry.rawevent': {
-            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'RawEvent'},
-            'data': ('sentry.db.models.fields.node.NodeField', [], {'null': 'True', 'blank': 'True'}),
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.release': {
-            'Meta': {'unique_together': "(('organization', 'version'),)", 'object_name': 'Release'},
-            'authors': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'commit_count': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_released': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
-            'date_started': ('django.db.models.fields.DateTimeField', [], {'null': 'True', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_commit_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'last_deploy_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True', 'blank': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'projects': ('django.db.models.fields.related.ManyToManyField', [], {'related_name': "'releases'", 'symmetrical': 'False', 'through': "orm['sentry.ReleaseProject']", 'to': "orm['sentry.Project']"}),
-            'ref': ('django.db.models.fields.CharField', [], {'max_length': '250', 'null': 'True', 'blank': 'True'}),
-            'total_deploys': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True', 'blank': 'True'}),
-            'version': ('django.db.models.fields.CharField', [], {'max_length': '250'})
-        },
-        'sentry.releasecommit': {
-            'Meta': {'unique_together': "(('release', 'commit'), ('release', 'order'))", 'object_name': 'ReleaseCommit'},
-            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'order': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
-        },
-        'sentry.releaseenvironment': {
-            'Meta': {'unique_together': "(('organization_id', 'release_id', 'environment_id'),)", 'object_name': 'ReleaseEnvironment', 'db_table': "'sentry_environmentrelease'"},
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'db_index': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'release_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'})
-        },
-        'sentry.releasefile': {
-            'Meta': {'unique_together': "(('release', 'ident'),)", 'object_name': 'ReleaseFile'},
-            'dist': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Distribution']", 'null': 'True'}),
-            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'max_length': '40'}),
-            'name': ('django.db.models.fields.TextField', [], {}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
-        },
-        'sentry.releaseheadcommit': {
-            'Meta': {'unique_together': "(('repository_id', 'release'),)", 'object_name': 'ReleaseHeadCommit'},
-            'commit': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Commit']"}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"}),
-            'repository_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {})
-        },
-        'sentry.releaseproject': {
-            'Meta': {'unique_together': "(('project', 'release'),)", 'object_name': 'ReleaseProject', 'db_table': "'sentry_release_project'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'new_groups': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'release': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Release']"})
-        },
-        'sentry.repository': {
-            'Meta': {'unique_together': "(('organization_id', 'name'), ('organization_id', 'provider', 'external_id'))", 'object_name': 'Repository'},
-            'config': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'external_id': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'integration_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '200'}),
-            'organization_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'provider': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '200', 'null': 'True'})
-        },
-        'sentry.reprocessingreport': {
-            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'ReprocessingReport'},
-            'datetime': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.rule': {
-            'Meta': {'object_name': 'Rule'},
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'environment_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'})
-        },
-        'sentry.savedsearch': {
-            'Meta': {'unique_together': "(('project', 'name'),)", 'object_name': 'SavedSearch'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_default': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'owner': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']", 'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'query': ('django.db.models.fields.TextField', [], {})
-        },
-        'sentry.savedsearchuserdefault': {
-            'Meta': {'unique_together': "(('project', 'user'),)", 'object_name': 'SavedSearchUserDefault', 'db_table': "'sentry_savedsearch_userdefault'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"}),
-            'savedsearch': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.SavedSearch']"}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.scheduleddeletion': {
-            'Meta': {'unique_together': "(('app_label', 'model_name', 'object_id'),)", 'object_name': 'ScheduledDeletion'},
-            'aborted': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'app_label': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'data': ('jsonfield.fields.JSONField', [], {'default': '{}'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime(2018, 3, 23, 0, 0)'}),
-            'guid': ('django.db.models.fields.CharField', [], {'default': "'002e65fc65084b56be8105447443698f'", 'unique': 'True', 'max_length': '32'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'in_progress': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'model_name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'object_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {})
-        },
-        'sentry.scheduledjob': {
-            'Meta': {'object_name': 'ScheduledJob'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'date_scheduled': ('django.db.models.fields.DateTimeField', [], {}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'payload': ('jsonfield.fields.JSONField', [], {'default': '{}'})
-        },
-        'sentry.servicehook': {
-            'Meta': {'object_name': 'ServiceHook'},
-            'actor_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'application': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ApiApplication']", 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'events': ('sentry.db.models.fields.array.ArrayField', [], {'of': ('django.db.models.fields.TextField', [], {})}),
-            'guid': ('django.db.models.fields.CharField', [], {'max_length': '32', 'unique': 'True', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'secret': ('sentry.db.models.fields.encrypted.EncryptedTextField', [], {'default': "'a0f4f29ce2124a4b825d83b5a835601d2853f052abd6420eaf92817178a29ae0'"}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0', 'db_index': 'True'}),
-            'url': ('django.db.models.fields.URLField', [], {'max_length': '512'}),
-            'version': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'sentry.tagkey': {
-            'Meta': {'unique_together': "(('project_id', 'key'),)", 'object_name': 'TagKey', 'db_table': "'sentry_filterkey'"},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'label': ('django.db.models.fields.CharField', [], {'max_length': '64', 'null': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'db_index': 'True'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'values_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'sentry.tagvalue': {
-            'Meta': {'unique_together': "(('project_id', 'key', 'value'),)", 'object_name': 'TagValue', 'db_table': "'sentry_filtervalue'", 'index_together': "(('project_id', 'key', 'last_seen'),)"},
-            'data': ('sentry.db.models.fields.gzippeddict.GzippedDictField', [], {'null': 'True', 'blank': 'True'}),
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True', 'db_index': 'True'}),
-            'project_id': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'null': 'True', 'db_index': 'True'}),
-            'times_seen': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'}),
-            'value': ('django.db.models.fields.CharField', [], {'max_length': '200'})
-        },
-        'sentry.team': {
-            'Meta': {'unique_together': "(('organization', 'slug'),)", 'object_name': 'Team'},
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']"}),
-            'slug': ('django.db.models.fields.SlugField', [], {'max_length': '50'}),
-            'status': ('sentry.db.models.fields.bounded.BoundedPositiveIntegerField', [], {'default': '0'})
-        },
-        'sentry.user': {
-            'Meta': {'object_name': 'User', 'db_table': "'auth_user'"},
-            'date_joined': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75', 'blank': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedAutoField', [], {'primary_key': 'True'}),
-            'is_active': ('django.db.models.fields.BooleanField', [], {'default': 'True'}),
-            'is_managed': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'is_password_expired': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'is_staff': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'is_superuser': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'last_active': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'last_login': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now', 'null': 'True'}),
-            'last_password_change': ('django.db.models.fields.DateTimeField', [], {'null': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '200', 'db_column': "'first_name'", 'blank': 'True'}),
-            'password': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'session_nonce': ('django.db.models.fields.CharField', [], {'max_length': '12', 'null': 'True'}),
-            'username': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '128'})
-        },
-        'sentry.useravatar': {
-            'Meta': {'object_name': 'UserAvatar'},
-            'avatar_type': ('django.db.models.fields.PositiveSmallIntegerField', [], {'default': '0'}),
-            'file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.File']", 'unique': 'True', 'null': 'True', 'on_delete': 'models.SET_NULL'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ident': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '32', 'db_index': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'avatar'", 'unique': 'True', 'to': "orm['sentry.User']"})
-        },
-        'sentry.useremail': {
-            'Meta': {'unique_together': "(('user', 'email'),)", 'object_name': 'UserEmail'},
-            'date_hash_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'is_verified': ('django.db.models.fields.BooleanField', [], {'default': 'False'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'related_name': "'emails'", 'to': "orm['sentry.User']"}),
-            'validation_hash': ('django.db.models.fields.CharField', [], {'default': "u'3dmcsTvM89Qw2tKM6SRD5APLRvjdESZq'", 'max_length': '32'})
-        },
-        'sentry.userip': {
-            'Meta': {'unique_together': "(('user', 'ip_address'),)", 'object_name': 'UserIP'},
-            'first_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'ip_address': ('django.db.models.fields.GenericIPAddressField', [], {'max_length': '39'}),
-            'last_seen': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.useroption': {
-            'Meta': {'unique_together': "(('user', 'project', 'key'), ('user', 'organization', 'key'))", 'object_name': 'UserOption'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'key': ('django.db.models.fields.CharField', [], {'max_length': '64'}),
-            'organization': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Organization']", 'null': 'True'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']", 'null': 'True'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"}),
-            'value': ('sentry.db.models.fields.encrypted.EncryptedPickledObjectField', [], {})
-        },
-        'sentry.userpermission': {
-            'Meta': {'unique_together': "(('user', 'permission'),)", 'object_name': 'UserPermission'},
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'permission': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'user': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.User']"})
-        },
-        'sentry.userreport': {
-            'Meta': {'unique_together': "(('project', 'event_id'),)", 'object_name': 'UserReport', 'index_together': "(('project', 'event_id'), ('project', 'date_added'))"},
-            'comments': ('django.db.models.fields.TextField', [], {}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'email': ('django.db.models.fields.EmailField', [], {'max_length': '75'}),
-            'environment': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Environment']", 'null': 'True'}),
-            'event_id': ('django.db.models.fields.CharField', [], {'max_length': '32'}),
-            'event_user_id': ('sentry.db.models.fields.bounded.BoundedBigIntegerField', [], {'null': 'True'}),
-            'group': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Group']", 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),
-            'project': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.Project']"})
-        },
-        'sentry.versiondsymfile': {
-            'Meta': {'unique_together': "(('dsym_file', 'version', 'build'),)", 'object_name': 'VersionDSymFile'},
-            'build': ('django.db.models.fields.CharField', [], {'max_length': '32', 'null': 'True'}),
-            'date_added': ('django.db.models.fields.DateTimeField', [], {'default': 'datetime.datetime.now'}),
-            'dsym_app': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.DSymApp']"}),
-            'dsym_file': ('sentry.db.models.fields.foreignkey.FlexibleForeignKey', [], {'to': "orm['sentry.ProjectDSymFile']", 'null': 'True'}),
-            'id': ('sentry.db.models.fields.bounded.BoundedBigAutoField', [], {'primary_key': 'True'}),
-            'version': ('django.db.models.fields.CharField', [], {'max_length': '32'})
-        }
-    }
-
-    complete_apps = ['sentry']
\ No newline at end of file
diff --git a/src/sentry/tagstore/south_migrations/0001_initial.py b/src/sentry/tagstore/south_migrations/0001_initial.py
index 6315e23a9c..0861f23bec 100644
--- a/src/sentry/tagstore/south_migrations/0001_initial.py
+++ b/src/sentry/tagstore/south_migrations/0001_initial.py
@@ -24,7 +24,7 @@ class Migration(SchemaMigration):
             ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value')),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['EventTag'])
 
@@ -70,9 +70,9 @@ class Migration(SchemaMigration):
             ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value')),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['GroupTagValue'])
 
@@ -110,9 +110,9 @@ class Migration(SchemaMigration):
             ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
             ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['TagValue'])
 
diff --git a/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py b/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
index 9f8fac7371..9669d78f63 100644
--- a/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
+++ b/src/sentry/tagstore/south_migrations/0002_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
@@ -71,13 +71,13 @@ class Migration(SchemaMigration):
             ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagKey'], db_column='key')),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
             ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['TagValue'])
 
@@ -111,7 +111,7 @@ class Migration(SchemaMigration):
                 to=orm['tagstore.TagKey'], db_column='key')),
             ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
             ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
@@ -132,11 +132,11 @@ class Migration(SchemaMigration):
             ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagKey'], db_column='key')),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['GroupTagValue'])
 
diff --git a/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py b/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py
index bdb62f9de0..71291cd73e 100644
--- a/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py
+++ b/src/sentry/tagstore/south_migrations/0003_auto__add_tagkey__add_unique_tagkey_project_id_environment_id_key__add.py
@@ -38,9 +38,9 @@ class Migration(SchemaMigration):
             ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value_id')),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['GroupTagValue'])
 
@@ -85,7 +85,7 @@ class Migration(SchemaMigration):
             ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value_id')),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['EventTag'])
 
@@ -112,9 +112,9 @@ class Migration(SchemaMigration):
             ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
             ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['TagValue'])
 
diff --git a/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py b/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
index 74c7f686c4..27d9062518 100644
--- a/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
+++ b/src/sentry/tagstore/south_migrations/0004_auto__del_tagkey__del_unique_tagkey_project_id_environment_id_key__del.py
@@ -88,13 +88,13 @@ class Migration(SchemaMigration):
             ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagKey'], db_column='key_id')),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('project_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
             ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('value', self.gf('django.db.models.fields.CharField')(max_length=200)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['TagValue'])
 
@@ -128,7 +128,7 @@ class Migration(SchemaMigration):
                 to=orm['tagstore.TagKey'], db_column='key_id')),
             ('event_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
             ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')()),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
@@ -149,11 +149,11 @@ class Migration(SchemaMigration):
             ('_key', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagKey'], db_column='key_id')),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('group_id', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(db_index=True)),
             ('id', self.gf('sentry.db.models.fields.bounded.BoundedBigAutoField')(primary_key=True)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['GroupTagValue'])
 
diff --git a/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py b/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
index 750167acb3..5b1cda133c 100644
--- a/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
+++ b/src/sentry/tagstore/south_migrations/0005_auto__add_tagvalue__add_unique_tagvalue_project_id__key_value__add_ind.py
@@ -22,9 +22,9 @@ class Migration(SchemaMigration):
             ('data', self.gf('sentry.db.models.fields.gzippeddict.GzippedDictField')(null=True, blank=True)),
             ('times_seen', self.gf('sentry.db.models.fields.bounded.BoundedPositiveIntegerField')(default=0)),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['TagValue'])
 
@@ -73,7 +73,7 @@ class Migration(SchemaMigration):
             ('value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value_id')),
             ('date_added', self.gf('django.db.models.fields.DateTimeField')(
-                db_index=True)),
+                default=datetime.datetime.now, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['EventTag'])
 
@@ -97,9 +97,9 @@ class Migration(SchemaMigration):
             ('_value', self.gf('sentry.db.models.fields.foreignkey.FlexibleForeignKey')(
                 to=orm['tagstore.TagValue'], db_column='value_id')),
             ('last_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
             ('first_seen', self.gf('django.db.models.fields.DateTimeField')(
-                null=True, db_index=True)),
+                default=datetime.datetime.now, null=True, db_index=True)),
         ))
         db.send_create_signal('tagstore', ['GroupTagValue'])
 
diff --git a/src/sentry/tagstore/v2/backend.py b/src/sentry/tagstore/v2/backend.py
index dbdfca6db9..d26e595a48 100644
--- a/src/sentry/tagstore/v2/backend.py
+++ b/src/sentry/tagstore/v2/backend.py
@@ -577,21 +577,28 @@ class V2TagStorage(TagStorage):
             return list(
                 GroupTagValue.objects.raw(
                     """
-                    SELECT *
-                    FROM (
-                        SELECT tagstore_grouptagvalue.*
-                        FROM tagstore_grouptagvalue
-                        INNER JOIN tagstore_tagkey
-                        ON (tagstore_grouptagvalue.key_id = tagstore_tagkey.id)
-                        WHERE tagstore_grouptagvalue.group_id = %%s
-                        AND tagstore_tagkey.environment_id %s %%s
-                        AND tagstore_tagkey.key = %%s
-                        ORDER BY last_seen DESC
-                        LIMIT 10000
-                    ) as a
-                    ORDER BY times_seen DESC
-                    LIMIT %d
-                """ % ('IS' if environment_id is None else '=', limit), [group_id, environment_id, key]
+                SELECT *
+                FROM (
+                    SELECT tagstore_grouptagvalue.id,
+                           tagstore_grouptagvalue.project_id,
+                           tagstore_grouptagvalue.group_id,
+                           tagstore_grouptagvalue.times_seen,
+                           tagstore_grouptagvalue.key_id,
+                           tagstore_grouptagvalue.value_id,
+                           tagstore_grouptagvalue.last_seen,
+                           tagstore_grouptagvalue.first_seen
+                    FROM tagstore_grouptagvalue
+                    INNER JOIN tagstore_tagkey
+                    ON (tagstore_grouptagvalue.key_id = tagstore_tagkey.id)
+                    WHERE tagstore_grouptagvalue.group_id = %%s
+                    AND tagstore_tagkey.environment_id %s %%s
+                    AND tagstore_tagkey.key = %%s
+                    ORDER BY last_seen DESC
+                    LIMIT 10000
+                ) as a
+                ORDER BY times_seen DESC
+                LIMIT %d
+            """ % ('IS' if environment_id is None else '=', limit), [group_id, environment_id, key]
                 )
             )
 
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index 8d4e770054..9d51e29821 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -148,9 +148,6 @@ def pytest_configure(config):
     patcher = mock.patch('socket.getfqdn', return_value='localhost')
     patcher.start()
 
-    if not settings.SOUTH_TESTS_MIGRATE:
-        settings.INSTALLED_APPS = tuple(i for i in settings.INSTALLED_APPS if i != 'south')
-
     from sentry.runner.initializer import (
         bootstrap_options, configure_structlog, initialize_receivers, fix_south,
         bind_cache_to_option_store, setup_services
diff --git a/src/sentry/web/frontend/organization_auth_settings.py b/src/sentry/web/frontend/organization_auth_settings.py
index 404e55df3f..d26edb6fdd 100644
--- a/src/sentry/web/frontend/organization_auth_settings.py
+++ b/src/sentry/web/frontend/organization_auth_settings.py
@@ -73,9 +73,8 @@ class OrganizationAuthSettingsView(OrganizationView):
                 ),
             )
 
-        User.objects.filter(
-            id__in=OrganizationMember.objects.filter(organization=organization).values_list('user'),
-        ).update(is_managed=False)
+        user_ids = OrganizationMember.objects.filter(organization=organization).values('user')
+        User.objects.filter(id__in=user_ids).update(is_managed=False)
 
         email_unlink_notifications.delay(organization.id, request.user.id, auth_provider.provider)
         auth_provider.delete()
diff --git a/src/south/constants.py b/src/south/constants.py
deleted file mode 100644
index eca91396bd..0000000000
--- a/src/south/constants.py
+++ /dev/null
@@ -1,8 +0,0 @@
-# If we detect Django 1.8 or higher, then exit
-# Placed here so it's guaranteed to be imported on Django start
-import django
-if django.VERSION[0] > 1 or (django.VERSION[0] == 1 and django.VERSION[1] >= 9):
-    raise RuntimeError(
-        "Sentry's version of South does not support Django 1.8 or higher. Please use native Django migrations.")
-
-DJANGO_17 = django.VERSION[0] > 1 or (django.VERSION[0] == 1 and django.VERSION[1] >= 7)
diff --git a/src/south/db/__init__.py b/src/south/db/__init__.py
index 43ea6406a3..cec4572651 100644
--- a/src/south/db/__init__.py
+++ b/src/south/db/__init__.py
@@ -45,7 +45,6 @@ try:
         module = __import__(module_name, {}, {}, [''])
         dbs[alias] = module.DatabaseOperations(alias)
 except ImportError:
-    raise
     # This error should only be triggered on 1.1 and below.
     sys.stderr.write(
         (
diff --git a/src/south/db/generic.py b/src/south/db/generic.py
index d1f4b0d3b1..a1a5feb72f 100644
--- a/src/south/db/generic.py
+++ b/src/south/db/generic.py
@@ -7,10 +7,7 @@ from django.core.management.color import no_style
 from django.db import transaction, models
 from django.db.utils import DatabaseError
 from django.db.backends.util import truncate_name
-try:
-    from django.db.backends.creation import BaseDatabaseCreation
-except ImportError:
-    from django.db.backends.base.creation import BaseDatabaseCreation
+from django.db.backends.creation import BaseDatabaseCreation
 from django.db.models.fields import NOT_PROVIDED
 from django.dispatch import dispatcher
 from django.conf import settings
@@ -1015,9 +1012,9 @@ class DatabaseOperations(object):
         """
         if self.dry_run:
             self.pending_transactions += 1
-        # transaction.commit_unless_managed(using=self.db_alias)
-        # transaction.enter_transaction_management(using=self.db_alias)
-        # transaction.managed(True, using=self.db_alias)
+        transaction.commit_unless_managed(using=self.db_alias)
+        transaction.enter_transaction_management(using=self.db_alias)
+        transaction.managed(True, using=self.db_alias)
 
     def commit_transaction(self):
         """
@@ -1027,7 +1024,7 @@ class DatabaseOperations(object):
         if self.dry_run:
             return
         transaction.commit(using=self.db_alias)
-        # transaction.leave_transaction_management(using=self.db_alias)
+        transaction.leave_transaction_management(using=self.db_alias)
 
     def rollback_transaction(self):
         """
@@ -1037,7 +1034,7 @@ class DatabaseOperations(object):
         if self.dry_run:
             self.pending_transactions -= 1
         transaction.rollback(using=self.db_alias)
-        # transaction.leave_transaction_management(using=self.db_alias)
+        transaction.leave_transaction_management(using=self.db_alias)
 
     def rollback_transactions_dry_run(self):
         """
@@ -1047,10 +1044,10 @@ class DatabaseOperations(object):
             return
         while self.pending_transactions > 0:
             self.rollback_transaction()
-        # if transaction.is_dirty(using=self.db_alias):
-        #     # Force an exception, if we're still in a dirty transaction.
-        #     # This means we are missing a COMMIT/ROLLBACK.
-        #     transaction.leave_transaction_management(using=self.db_alias)
+        if transaction.is_dirty(using=self.db_alias):
+            # Force an exception, if we're still in a dirty transaction.
+            # This means we are missing a COMMIT/ROLLBACK.
+            transaction.leave_transaction_management(using=self.db_alias)
 
     def send_create_signal(self, app_label, model_names):
         self.pending_create_signals.append((app_label, model_names))
@@ -1093,24 +1090,37 @@ class DatabaseOperations(object):
 
         created_models = []
         for model_name in model_names:
-            try:
-                model = models.get_model(app_label, model_name)
-            # Django 1.7 throws LookupError
-            except LookupError:
-                pass
-            else:
-                if model:
-                    created_models.append(model)
+            model = models.get_model(app_label, model_name)
+            if model:
+                created_models.append(model)
 
         if created_models:
-            models.signals.post_syncdb.send(
-                sender=app,
-                app=app,
-                created_models=created_models,
-                verbosity=verbosity,
-                interactive=interactive,
-                db=self.db_alias,
-            )
+
+            if hasattr(dispatcher, "send"):
+                # Older djangos
+                dispatcher.send(signal=models.signals.post_syncdb, sender=app,
+                                app=app, created_models=created_models,
+                                verbosity=verbosity, interactive=interactive)
+            else:
+                if self._is_multidb():
+                    # Django 1.2+
+                    models.signals.post_syncdb.send(
+                        sender=app,
+                        app=app,
+                        created_models=created_models,
+                        verbosity=verbosity,
+                        interactive=interactive,
+                        db=self.db_alias,
+                    )
+                else:
+                    # Django 1.1 - 1.0
+                    models.signals.post_syncdb.send(
+                        sender=app,
+                        app=app,
+                        created_models=created_models,
+                        verbosity=verbosity,
+                        interactive=interactive,
+                    )
 
     def mock_model(self, model_name, db_table, db_tablespace='',
                    pk_field_name='id', pk_field_type=models.AutoField,
diff --git a/src/south/hacks/django_1_0.py b/src/south/hacks/django_1_0.py
index 2b1f900028..420e2b632d 100644
--- a/src/south/hacks/django_1_0.py
+++ b/src/south/hacks/django_1_0.py
@@ -3,26 +3,14 @@ Hacks for the Django 1.0/1.0.2 releases.
 """
 
 import django
-import six
-
-
-from collections import defaultdict, OrderedDict
 from django.conf import settings
-try:
-    from django.db.backends.creation import BaseDatabaseCreation
-except ImportError:
-    from django.db.backends.base.creation import BaseDatabaseCreation
+from django.db.backends.creation import BaseDatabaseCreation
 from django.db.models.loading import cache
 from django.core import management
 from django.core.management.commands.flush import Command as FlushCommand
 from django.utils.datastructures import SortedDict
 
-from south.constants import DJANGO_17
-
-if DJANGO_17:
-    from django.apps.registry import apps
-else:
-    apps = None
+from south.utils.py3 import string_types
 
 
 class SkipFlushCommand(FlushCommand):
@@ -32,6 +20,7 @@ class SkipFlushCommand(FlushCommand):
 
 
 class Hacks:
+
     def set_installed_apps(self, apps):
         """
         Sets Django's INSTALLED_APPS setting to be effectively the list passed in.
@@ -76,33 +65,20 @@ class Hacks:
         Clears the contents of AppCache to a blank state, so new models
         from the ORM can be added.
         """
-        # Django 1.7+ throws a runtime error in some situations due to model validation:
-        # >>> RuntimeError: Conflicting 'user' models in application 'sentry': <class 'sentry.models.user.User'> and <class 'sentry.models.User'>.
-        if DJANGO_17:
-            self.old_app_models, apps.all_models = apps.all_models, defaultdict(OrderedDict)
-            apps.clear_cache()
-        else:
-            self.old_app_models, cache.app_models = cache.app_models, {}
+        self.old_app_models, cache.app_models = cache.app_models, {}
 
     def unclear_app_cache(self):
         """
         Reversed the effects of clear_app_cache.
         """
-        if DJANGO_17:
-            apps.all_models = self.old_app_models
-            apps.clear_cache()
-        else:
-            cache.app_models = self.old_app_models
-            cache._get_models_cache = {}
+        cache.app_models = self.old_app_models
+        cache._get_models_cache = {}
 
     def repopulate_app_cache(self):
         """
         Rebuilds AppCache with the real model definitions.
         """
-        if DJANGO_17:
-            apps.clear_cache()
-        else:
-            cache._populate()
+        cache._populate()
 
     def store_app_cache_state(self):
         self.stored_app_cache_state = dict(**cache.__dict__)
diff --git a/src/south/management/commands/__init__.py b/src/south/management/commands/__init__.py
index e69de29bb2..9edd3c07b4 100644
--- a/src/south/management/commands/__init__.py
+++ b/src/south/management/commands/__init__.py
@@ -0,0 +1,42 @@
+
+# Common framework for syncdb actions
+
+import copy
+
+from django.core import management
+from django.conf import settings
+
+# Make sure the template loader cache is fixed _now_ (#448)
+import django.template.loaders.app_directories
+
+from south.hacks import hacks
+from south.management.commands.syncdb import Command as SyncCommand
+
+
+class MigrateAndSyncCommand(SyncCommand):
+    """Used for situations where "syncdb" is called by test frameworks."""
+
+    option_list = copy.deepcopy(SyncCommand.option_list)
+
+    for opt in option_list:
+        if "--migrate" == opt.get_opt_string():
+            opt.default = True
+            break
+
+
+def patch_for_test_db_setup():
+    # Load the commands cache
+    management.get_commands()
+    # Repoint to the correct version of syncdb
+    if hasattr(settings, "SOUTH_TESTS_MIGRATE") and not settings.SOUTH_TESTS_MIGRATE:
+        # point at the core syncdb command when creating tests
+        # tests should always be up to date with the most recent model structure
+        management._commands['syncdb'] = 'django.core'
+    else:
+        management._commands['syncdb'] = MigrateAndSyncCommand()
+        # Avoid flushing data migrations.
+        # http://code.djangoproject.com/ticket/14661 introduced change that flushed custom
+        # sql during the test database creation (thus flushing the data migrations).
+        # we patch flush to be no-op during create_test_db, but still allow flushing
+        # after each test for non-transactional backends.
+        hacks.patch_flush_during_test_db_creation()
diff --git a/src/south/management/commands/convert_to_south.py b/src/south/management/commands/convert_to_south.py
new file mode 100644
index 0000000000..e942344966
--- /dev/null
+++ b/src/south/management/commands/convert_to_south.py
@@ -0,0 +1,100 @@
+"""
+Quick conversion command module.
+"""
+
+from __future__ import print_function
+
+from optparse import make_option
+import sys
+
+from django.core.management.base import BaseCommand
+from django.core.management.color import no_style
+from django.conf import settings
+from django.db import models
+from django.core import management
+from django.core.exceptions import ImproperlyConfigured
+
+from south.migration import Migrations
+from south.hacks import hacks
+from south.exceptions import NoMigrations
+
+
+class Command(BaseCommand):
+
+    option_list = BaseCommand.option_list
+    if '--verbosity' not in [opt.get_opt_string() for opt in BaseCommand.option_list]:
+        option_list += (
+            make_option('--verbosity', action='store', dest='verbosity', default='1',
+                        type='choice', choices=['0', '1', '2'],
+                        help='Verbosity level; 0=minimal output, 1=normal output, 2=all output'),
+        )
+    option_list += (
+        make_option('--delete-ghost-migrations', action='store_true', dest='delete_ghosts', default=False,
+                    help="Tells South to delete any 'ghost' migrations (ones in the database but not on disk)."),
+        make_option('--ignore-ghost-migrations', action='store_true', dest='ignore_ghosts', default=False,
+                    help="Tells South to ignore any 'ghost' migrations (ones in the database but not on disk) and continue to apply new migrations."),
+    )
+
+    help = "Quickly converts the named application to use South if it is currently using syncdb."
+
+    def handle(self, app=None, *args, **options):
+
+        # Make sure we have an app
+        if not app:
+            print("Please specify an app to convert.")
+            return
+
+        # See if the app exists
+        app = app.split(".")[-1]
+        try:
+            app_module = models.get_app(app)
+        except ImproperlyConfigured:
+            print("There is no enabled application matching '%s'." % app)
+            return
+
+        # Try to get its list of models
+        model_list = models.get_models(app_module)
+        if not model_list:
+            print("This application has no models; this command is for applications that already have models syncdb'd.")
+            print("Make some models, and then use ./manage.py schemamigration %s --initial instead." % app)
+            return
+
+        # Ask South if it thinks it's already got migrations
+        try:
+            Migrations(app)
+        except NoMigrations:
+            pass
+        else:
+            print("This application is already managed by South.")
+            return
+
+        # Finally! It seems we've got a candidate, so do the two-command trick
+        verbosity = int(options.get('verbosity', 0))
+        management.call_command("schemamigration", app, initial=True, verbosity=verbosity)
+
+        # Now, we need to re-clean and sanitise appcache
+        hacks.clear_app_cache()
+        hacks.repopulate_app_cache()
+
+        # And also clear our cached Migration classes
+        Migrations._clear_cache()
+
+        # Now, migrate
+        management.call_command(
+            "migrate",
+            app,
+            "0001",
+            fake=True,
+            verbosity=verbosity,
+            ignore_ghosts=options.get("ignore_ghosts", False),
+            delete_ghosts=options.get("delete_ghosts", False),
+        )
+
+        print()
+        print(
+            "App '%s' converted. Note that South assumed the application's models matched the database" %
+            app)
+        print(
+            "(i.e. you haven't changed it since last syncdb); if you have, you should delete the %s/migrations" %
+            app)
+        print("directory, revert models.py so it matches the database, and try again.")
diff --git a/src/south/management/commands/graphmigrations.py b/src/south/management/commands/graphmigrations.py
new file mode 100644
index 0000000000..73ec81f5b8
--- /dev/null
+++ b/src/south/management/commands/graphmigrations.py
@@ -0,0 +1,64 @@
+"""
+Outputs a graphviz dot file of the dependencies.
+"""
+
+from __future__ import print_function
+
+from optparse import make_option
+import re
+import textwrap
+
+from django.core.management.base import BaseCommand
+from django.core.management.color import no_style
+
+from south.migration import Migrations, all_migrations
+
+
+class Command(BaseCommand):
+
+    help = "Outputs a GraphViz dot file of all migration dependencies to stdout."
+
+    def handle(self, **options):
+
+        # Resolve dependencies
+        Migrations.calculate_dependencies()
+
+        colors = ['crimson', 'darkgreen', 'darkgoldenrod', 'navy',
+                  'brown', 'darkorange', 'aquamarine', 'blueviolet']
+        color_index = 0
+        wrapper = textwrap.TextWrapper(width=40)
+
+        print("digraph G {")
+
+        # Group each app in a subgraph
+        for migrations in all_migrations():
+            print("  subgraph %s {" % migrations.app_label())
+            print("    node [color=%s];" % colors[color_index])
+            for migration in migrations:
+                # Munge the label - text wrap and change _ to spaces
+                label = "%s - %s" % (
+                        migration.app_label(), migration.name())
+                label = re.sub(r"_+", " ", label)
+                label = "\\n".join(wrapper.wrap(label))
+                print('    "%s.%s" [label="%s"];' % (
+                    migration.app_label(), migration.name(), label))
+            print("  }")
+            color_index = (color_index + 1) % len(colors)
+
+        # For every migration, print its links.
+        for migrations in all_migrations():
+            for migration in migrations:
+                for other in migration.dependencies:
+                    # Added weight tends to keep migrations from the same app
+                    # in vertical alignment
+                    attrs = "[weight=2.0]"
+                    # But the more interesting edges are those between apps
+                    if other.app_label() != migration.app_label():
+                        attrs = "[style=bold]"
+                    print('  "%s.%s" -> "%s.%s" %s;' % (
+                        other.app_label(), other.name(),
+                        migration.app_label(), migration.name(),
+                        attrs
+                    ))
+
+        print("}");
diff --git a/src/south/management/commands/migrate.py b/src/south/management/commands/migrate.py
index 50a113e81a..1aca7375e3 100644
--- a/src/south/management/commands/migrate.py
+++ b/src/south/management/commands/migrate.py
@@ -1,14 +1,277 @@
-# Mimic syncdb for Django 1.7 compatibility
-from __future__ import absolute_import
+"""
+Migrate management command.
+"""
 
-from django.core.management.commands import syncdb
+from __future__ import print_function
+
+import os.path
+import re
+import sys
+from functools import reduce
 from optparse import make_option
 
-from .syncdb import Command as SyncDbCommand  # NOQA
+from django.core.management.base import BaseCommand
+from django.conf import settings
+from django.utils.importlib import import_module
+
+from south import migration
+from south.migration import Migrations
+from south.exceptions import NoMigrations
+from south.db import DEFAULT_DB_ALIAS
 
 
-class Command(SyncDbCommand):
-    option_list = SyncDbCommand.option_list + (
-        make_option('--no-migrate', action='store_false', dest='migrate', default=True,
-                    help='Tells South to disable migrations after the sync. Default for during testing, and other internal calls.'),
+class Command(BaseCommand):
+    option_list = BaseCommand.option_list + (
+        make_option('--all', action='store_true', dest='all_apps', default=False,
+                    help='Run the specified migration for all apps.'),
+        make_option('--list', action='store_true', dest='show_list', default=False,
+                    help='List migrations noting those that have been applied'),
+        make_option('--changes', action='store_true', dest='show_changes', default=False,
+                    help='List changes for migrations'),
+        make_option('--skip', action='store_true', dest='skip', default=False,
+                    help='Will skip over out-of-order missing migrations'),
+        make_option('--merge', action='store_true', dest='merge', default=False,
+                    help='Will run out-of-order missing migrations as they are - no rollbacks.'),
+        make_option('--no-initial-data', action='store_true', dest='no_initial_data', default=False,
+                    help='Skips loading initial data if specified.'),
+        make_option('--fake', action='store_true', dest='fake', default=False,
+                    help="Pretends to do the migrations, but doesn't actually execute them."),
+        make_option('--db-dry-run', action='store_true', dest='db_dry_run', default=False,
+                    help="Doesn't execute the SQL generated by the db methods, and doesn't store a record that the migration(s) occurred. Useful to test migrations before applying them."),
+        make_option('--delete-ghost-migrations', action='store_true', dest='delete_ghosts', default=False,
+                    help="Tells South to delete any 'ghost' migrations (ones in the database but not on disk)."),
+        make_option('--ignore-ghost-migrations', action='store_true', dest='ignore_ghosts', default=False,
+                    help="Tells South to ignore any 'ghost' migrations (ones in the database but not on disk) and continue to apply new migrations."),
+        make_option('--noinput', action='store_false', dest='interactive', default=True,
+                    help='Tells Django to NOT prompt the user for input of any kind.'),
+        make_option('--database', action='store', dest='database',
+                    default=DEFAULT_DB_ALIAS, help='Nominates a database to synchronize. '
+                    'Defaults to the "default" database.'),
     )
+    if '--verbosity' not in [opt.get_opt_string() for opt in BaseCommand.option_list]:
+        option_list += (
+            make_option('--verbosity', action='store', dest='verbosity', default='1',
+                        type='choice', choices=['0', '1', '2'],
+                        help='Verbosity level; 0=minimal output, 1=normal output, 2=all output'),
+        )
+    help = "Runs migrations for all apps."
+    args = "[appname] [migrationname|zero] [--all] [--list] [--skip] [--merge] [--no-initial-data] [--fake] [--db-dry-run] [--database=dbalias]"
+
+    def handle(self, app=None, target=None, skip=False, merge=False, backwards=False, fake=False, db_dry_run=False,
+               show_list=False, show_changes=False, database=DEFAULT_DB_ALIAS, delete_ghosts=False, ignore_ghosts=False, **options):
+
+        # NOTE: THIS IS DUPLICATED FROM django.core.management.commands.syncdb
+        # This code imports any module named 'management' in INSTALLED_APPS.
+        # The 'management' module is the preferred way of listening to post_syncdb
+        # signals, and since we're sending those out with create_table migrations,
+        # we need apps to behave correctly.
+        for app_name in settings.INSTALLED_APPS:
+            try:
+                import_module('.management', app_name)
+            except ImportError as exc:
+                msg = exc.args[0]
+                if not msg.startswith('No module named') or 'management' not in msg:
+                    raise
+        # END DJANGO DUPE CODE
+
+        # if all_apps flag is set, shift app over to target
+        if options.get('all_apps', False):
+            target = app
+            app = None
+
+        # Migrate each app
+        if app:
+            try:
+                apps = [Migrations(app)]
+            except NoMigrations:
+                print("The app '%s' does not appear to use migrations." % app)
+                print("./manage.py migrate " + self.args)
+                return
+        else:
+            apps = list(migration.all_migrations())
+
+        # Do we need to show the list of migrations?
+        if show_list and apps:
+            list_migrations(apps, database, **options)
+
+        if show_changes and apps:
+            show_migration_changes(apps)
+
+        if not (show_list or show_changes):
+
+            for app in apps:
+                result = migration.migrate_app(
+                    app,
+                    target_name=target,
+                    fake=fake,
+                    db_dry_run=db_dry_run,
+                    verbosity=int(options.get('verbosity', 0)),
+                    interactive=options.get('interactive', True),
+                    load_initial_data=not options.get('no_initial_data', False),
+                    merge=merge,
+                    skip=skip,
+                    database=database,
+                    delete_ghosts=delete_ghosts,
+                    ignore_ghosts=ignore_ghosts,
+                )
+                if result is False:
+                    sys.exit(1)  # Migration failed, so the command fails.
+
+
+def list_migrations(apps, database=DEFAULT_DB_ALIAS, **options):
+    """
+    Prints a list of all available migrations, and which ones are currently applied.
+    Accepts a list of Migrations instances.
+    """
+    from south.models import MigrationHistory
+    applied_migrations = MigrationHistory.objects.filter(
+        app_name__in=[app.app_label() for app in apps])
+    if database != DEFAULT_DB_ALIAS:
+        applied_migrations = applied_migrations.using(database)
+    applied_migrations_lookup = dict(('%s.%s' % (mi.app_name, mi.migration), mi)
+                                     for mi in applied_migrations)
+
+    print()
+    for app in apps:
+        print(" " + app.app_label())
+        # Get the migrations object
+        for migration in app:
+            full_name = migration.app_label() + "." + migration.name()
+            if full_name in applied_migrations_lookup:
+                applied_migration = applied_migrations_lookup[full_name]
+                print(
+                    format_migration_list_item(
+                        migration.name(),
+                        applied=applied_migration.applied,
+                        **options))
+            else:
+                print(format_migration_list_item(migration.name(), applied=False, **options))
+        print()
+
+
+def show_migration_changes(apps):
+    """
+    Prints a list of all available migrations, and which ones are currently applied.
+    Accepts a list of Migrations instances.
+
+    Much simpler, less clear, and much less robust version:
+        grep "ing " migrations/*.py
+    """
+    for app in apps:
+        print(app.app_label())
+        # Get the migrations objects
+        migrations = [migration for migration in app]
+        # we use reduce to compare models in pairs, not to generate a value
+        reduce(diff_migrations, migrations)
+
+
+def format_migration_list_item(name, applied=True, **options):
+    if applied:
+        if int(options.get('verbosity')) >= 2:
+            return '  (*) %-80s  (applied %s)' % (name, applied)
+        else:
+            return '  (*) %s' % name
+    else:
+        return '  ( ) %s' % name
+
+
+def diff_migrations(migration1, migration2):
+
+    def model_name(models, model):
+        return models[model].get('Meta', {}).get('object_name', model)
+
+    def field_name(models, model, field):
+        return '%s.%s' % (model_name(models, model), field)
+
+    print("  " + migration2.name())
+
+    models1 = migration1.migration_class().models
+    models2 = migration2.migration_class().models
+
+    # find new models
+    for model in models2.keys():
+        if not model in models1.keys():
+            print('    added model %s' % model_name(models2, model))
+
+    # find removed models
+    for model in models1.keys():
+        if not model in models2.keys():
+            print('    removed model %s' % model_name(models1, model))
+
+    # compare models
+    for model in models1:
+        if model in models2:
+
+            # find added fields
+            for field in models2[model]:
+                if not field in models1[model]:
+                    print('    added field %s' % field_name(models2, model, field))
+
+            # find removed fields
+            for field in models1[model]:
+                if not field in models2[model]:
+                    print('    removed field %s' % field_name(models1, model, field))
+
+            # compare fields
+            for field in models1[model]:
+                if field in models2[model]:
+
+                    name = field_name(models1, model, field)
+
+                    # compare field attributes
+                    field_value1 = models1[model][field]
+                    field_value2 = models2[model][field]
+
+                    # if a field has become a class, or vice versa
+                    if type(field_value1) != type(field_value2):
+                        print('    type of %s changed from %s to %s' % (
+                            name, field_value1, field_value2))
+
+                    # if class
+                    elif isinstance(field_value1, dict):
+                        # print '    %s is a class' % name
+                        pass
+
+                    # else regular field
+                    else:
+
+                        type1, attr_list1, field_attrs1 = models1[model][field]
+                        type2, attr_list2, field_attrs2 = models2[model][field]
+
+                        if type1 != type2:
+                            print('    %s type changed from %s to %s' % (
+                                name, type1, type2))
+
+                        if attr_list1 != []:
+                            print('    %s list %s is not []' % (
+                                name, attr_list1))
+                        if attr_list2 != []:
+                            print('    %s list %s is not []' % (
+                                name, attr_list2))
+                        if attr_list1 != attr_list2:
+                            print('    %s list changed from %s to %s' % (
+                                name, attr_list1, attr_list2))
+
+                        # find added field attributes
+                        for attr in field_attrs2:
+                            if not attr in field_attrs1:
+                                print('    added %s attribute %s=%s' % (
+                                    name, attr, field_attrs2[attr]))
+
+                        # find removed field attributes
+                        for attr in field_attrs1:
+                            if not attr in field_attrs2:
+                                print('    removed attribute %s(%s=%s)' % (
+                                    name, attr, field_attrs1[attr]))
+
+                        # compare field attributes
+                        for attr in field_attrs1:
+                            if attr in field_attrs2:
+
+                                value1 = field_attrs1[attr]
+                                value2 = field_attrs2[attr]
+                                if value1 != value2:
+                                    print('    %s attribute %s changed from %s to %s' % (
+                                        name, attr, value1, value2))
+
+    return migration2
diff --git a/src/south/management/commands/migrationcheck.py b/src/south/management/commands/migrationcheck.py
new file mode 100644
index 0000000000..2c3eb036c6
--- /dev/null
+++ b/src/south/management/commands/migrationcheck.py
@@ -0,0 +1,68 @@
+from django.core.exceptions import ImproperlyConfigured
+from django.core.management import call_command, CommandError
+from django.core.management.base import BaseCommand
+from django.conf import settings
+from django.db.models import loading
+from django.test import simple
+
+from south.migration import Migrations
+from south.exceptions import NoMigrations
+from south.hacks import hacks
+
+
+class Command(BaseCommand):
+    help = "Runs migrations for each app in turn, detecting missing depends_on values."
+    usage_str = "Usage: ./manage.py migrationcheck"
+
+    def handle(self, check_app_name=None, **options):
+        runner = simple.DjangoTestSuiteRunner(verbosity=0)
+        err_msg = "Failed to migrate %s; see output for hints at missing dependencies:\n"
+        hacks.patch_flush_during_test_db_creation()
+        failures = 0
+        if check_app_name is None:
+            app_names = settings.INSTALLED_APPS
+        else:
+            app_names = [check_app_name]
+        for app_name in app_names:
+            app_label = app_name.split(".")[-1]
+            if app_name == 'south':
+                continue
+
+            try:
+                Migrations(app_name)
+            except (NoMigrations, ImproperlyConfigured):
+                continue
+            app = loading.get_app(app_label)
+
+            verbosity = int(options.get('verbosity', 1))
+            if verbosity >= 1:
+                self.stderr.write("processing %s\n" % app_name)
+
+            old_config = runner.setup_databases()
+            try:
+                call_command('migrate', app_label, noinput=True, verbosity=verbosity)
+                for model in loading.get_models(app):
+                    dummy = model._default_manager.exists()
+            except (KeyboardInterrupt, SystemExit):
+                raise
+            except Exception as e:
+                failures += 1
+                if verbosity >= 1:
+                    self.stderr.write(err_msg % app_name)
+                    self.stderr.write("%s\n" % e)
+            finally:
+                runner.teardown_databases(old_config)
+        if failures > 0:
+            raise CommandError("Missing depends_on found in %s app(s)." % failures)
+        self.stderr.write("No missing depends_on found.\n")
+#
+# for each app:
+#    start with blank db.
+#    syncdb only south (and contrib?)
+#
+#    migrate a single app all the way up.  any errors is missing depends_on.
+#    for all models of that app, try the default manager:
+#        from django.db.models import loading
+#        for m in loading.get_models(loading.get_app('a')):
+#            m._default_manager.exists()
+#    Any error is also a missing depends on.
diff --git a/src/south/management/commands/south_migrate.py b/src/south/management/commands/south_migrate.py
deleted file mode 100644
index 70699f82e3..0000000000
--- a/src/south/management/commands/south_migrate.py
+++ /dev/null
@@ -1,267 +0,0 @@
-"""
-Migrate management command.
-"""
-
-from __future__ import print_function
-
-import os.path
-import re
-import sys
-from functools import reduce
-from optparse import make_option
-
-from django.core.management.base import BaseCommand
-from django.conf import settings
-from django.utils.importlib import import_module
-
-from south import migration
-from south.migration import Migrations
-from south.exceptions import NoMigrations
-from south.db import DEFAULT_DB_ALIAS
-
-
-class Command(BaseCommand):
-    option_list = BaseCommand.option_list + (
-        make_option('--all', action='store_true', dest='all_apps', default=False,
-                    help='Run the specified migration for all apps.'),
-        make_option('--list', action='store_true', dest='show_list', default=False,
-                    help='List migrations noting those that have been applied'),
-        make_option('--changes', action='store_true', dest='show_changes', default=False,
-                    help='List changes for migrations'),
-        make_option('--skip', action='store_true', dest='skip', default=False,
-                    help='Will skip over out-of-order missing migrations'),
-        make_option('--merge', action='store_true', dest='merge', default=False,
-                    help='Will run out-of-order missing migrations as they are - no rollbacks.'),
-        make_option('--fake', action='store_true', dest='fake', default=False,
-                    help="Pretends to do the migrations, but doesn't actually execute them."),
-        make_option('--db-dry-run', action='store_true', dest='db_dry_run', default=False,
-                    help="Doesn't execute the SQL generated by the db methods, and doesn't store a record that the migration(s) occurred. Useful to test migrations before applying them."),
-        make_option('--delete-ghost-migrations', action='store_true', dest='delete_ghosts', default=False,
-                    help="Tells South to delete any 'ghost' migrations (ones in the database but not on disk)."),
-        make_option('--ignore-ghost-migrations', action='store_true', dest='ignore_ghosts', default=False,
-                    help="Tells South to ignore any 'ghost' migrations (ones in the database but not on disk) and continue to apply new migrations."),
-        make_option('--noinput', action='store_false', dest='interactive', default=True,
-                    help='Tells Django to NOT prompt the user for input of any kind.'),
-        make_option('--database', action='store', dest='database',
-                    default=DEFAULT_DB_ALIAS, help='Nominates a database to synchronize. '
-                    'Defaults to the "default" database.'),
-    )
-    help = "Runs migrations for all apps."
-    args = "[appname] [migrationname|zero] [--all] [--list] [--skip] [--merge] [--no-initial-data] [--fake] [--db-dry-run] [--database=dbalias]"
-
-    def handle(self, app=None, target=None, skip=False, merge=False, backwards=False, fake=False, db_dry_run=False,
-               show_list=False, show_changes=False, database=DEFAULT_DB_ALIAS, delete_ghosts=False, ignore_ghosts=False, **options):
-
-        # NOTE: THIS IS DUPLICATED FROM django.core.management.commands.syncdb
-        # This code imports any module named 'management' in INSTALLED_APPS.
-        # The 'management' module is the preferred way of listening to post_syncdb
-        # signals, and since we're sending those out with create_table migrations,
-        # we need apps to behave correctly.
-        for app_name in settings.INSTALLED_APPS:
-            try:
-                import_module('.management', app_name)
-            except ImportError as exc:
-                msg = exc.args[0]
-                if not msg.startswith('No module named') or 'management' not in msg:
-                    raise
-        # END DJANGO DUPE CODE
-
-        # if all_apps flag is set, shift app over to target
-        if options.get('all_apps', False):
-            target = app
-            app = None
-
-        # Migrate each app
-        if app:
-            try:
-                apps = [Migrations(app)]
-            except NoMigrations:
-                print("The app '%s' does not appear to use migrations." % app)
-                print("./manage.py migrate " + self.args)
-                return
-        else:
-            apps = list(migration.all_migrations())
-
-        # Do we need to show the list of migrations?
-        if show_list and apps:
-            list_migrations(apps, database, **options)
-
-        if show_changes and apps:
-            show_migration_changes(apps)
-
-        if not (show_list or show_changes):
-            for app in apps:
-                result = migration.migrate_app(
-                    app,
-                    target_name=target,
-                    fake=fake,
-                    db_dry_run=db_dry_run,
-                    verbosity=int(options.get('verbosity', 0)),
-                    interactive=options.get('interactive', True),
-                    merge=merge,
-                    skip=skip,
-                    database=database,
-                    delete_ghosts=delete_ghosts,
-                    ignore_ghosts=ignore_ghosts,
-                )
-                if result is False:
-                    sys.exit(1)  # Migration failed, so the command fails.
-
-
-def list_migrations(apps, database=DEFAULT_DB_ALIAS, **options):
-    """
-    Prints a list of all available migrations, and which ones are currently applied.
-    Accepts a list of Migrations instances.
-    """
-    from south.models import MigrationHistory
-    applied_migrations = MigrationHistory.objects.filter(
-        app_name__in=[app.app_label() for app in apps])
-    if database != DEFAULT_DB_ALIAS:
-        applied_migrations = applied_migrations.using(database)
-    applied_migrations_lookup = dict(('%s.%s' % (mi.app_name, mi.migration), mi)
-                                     for mi in applied_migrations)
-
-    print()
-    for app in apps:
-        print(" " + app.app_label())
-        # Get the migrations object
-        for migration in app:
-            full_name = migration.app_label() + "." + migration.name()
-            if full_name in applied_migrations_lookup:
-                applied_migration = applied_migrations_lookup[full_name]
-                print(
-                    format_migration_list_item(
-                        migration.name(),
-                        applied=applied_migration.applied,
-                        **options))
-            else:
-                print(format_migration_list_item(migration.name(), applied=False, **options))
-        print()
-
-
-def show_migration_changes(apps):
-    """
-    Prints a list of all available migrations, and which ones are currently applied.
-    Accepts a list of Migrations instances.
-
-    Much simpler, less clear, and much less robust version:
-        grep "ing " migrations/*.py
-    """
-    for app in apps:
-        print(app.app_label())
-        # Get the migrations objects
-        migrations = [migration for migration in app]
-        # we use reduce to compare models in pairs, not to generate a value
-        reduce(diff_migrations, migrations)
-
-
-def format_migration_list_item(name, applied=True, **options):
-    if applied:
-        if int(options.get('verbosity')) >= 2:
-            return '  (*) %-80s  (applied %s)' % (name, applied)
-        else:
-            return '  (*) %s' % name
-    else:
-        return '  ( ) %s' % name
-
-
-def diff_migrations(migration1, migration2):
-
-    def model_name(models, model):
-        return models[model].get('Meta', {}).get('object_name', model)
-
-    def field_name(models, model, field):
-        return '%s.%s' % (model_name(models, model), field)
-
-    print("  " + migration2.name())
-
-    models1 = migration1.migration_class().models
-    models2 = migration2.migration_class().models
-
-    # find new models
-    for model in models2.keys():
-        if not model in models1.keys():
-            print('    added model %s' % model_name(models2, model))
-
-    # find removed models
-    for model in models1.keys():
-        if not model in models2.keys():
-            print('    removed model %s' % model_name(models1, model))
-
-    # compare models
-    for model in models1:
-        if model in models2:
-
-            # find added fields
-            for field in models2[model]:
-                if not field in models1[model]:
-                    print('    added field %s' % field_name(models2, model, field))
-
-            # find removed fields
-            for field in models1[model]:
-                if not field in models2[model]:
-                    print('    removed field %s' % field_name(models1, model, field))
-
-            # compare fields
-            for field in models1[model]:
-                if field in models2[model]:
-
-                    name = field_name(models1, model, field)
-
-                    # compare field attributes
-                    field_value1 = models1[model][field]
-                    field_value2 = models2[model][field]
-
-                    # if a field has become a class, or vice versa
-                    if type(field_value1) != type(field_value2):
-                        print('    type of %s changed from %s to %s' % (
-                            name, field_value1, field_value2))
-
-                    # if class
-                    elif isinstance(field_value1, dict):
-                        # print '    %s is a class' % name
-                        pass
-
-                    # else regular field
-                    else:
-
-                        type1, attr_list1, field_attrs1 = models1[model][field]
-                        type2, attr_list2, field_attrs2 = models2[model][field]
-
-                        if type1 != type2:
-                            print('    %s type changed from %s to %s' % (
-                                name, type1, type2))
-
-                        if attr_list1 != []:
-                            print('    %s list %s is not []' % (
-                                name, attr_list1))
-                        if attr_list2 != []:
-                            print('    %s list %s is not []' % (
-                                name, attr_list2))
-                        if attr_list1 != attr_list2:
-                            print('    %s list changed from %s to %s' % (
-                                name, attr_list1, attr_list2))
-
-                        # find added field attributes
-                        for attr in field_attrs2:
-                            if not attr in field_attrs1:
-                                print('    added %s attribute %s=%s' % (
-                                    name, attr, field_attrs2[attr]))
-
-                        # find removed field attributes
-                        for attr in field_attrs1:
-                            if not attr in field_attrs2:
-                                print('    removed attribute %s(%s=%s)' % (
-                                    name, attr, field_attrs1[attr]))
-
-                        # compare field attributes
-                        for attr in field_attrs1:
-                            if attr in field_attrs2:
-
-                                value1 = field_attrs1[attr]
-                                value2 = field_attrs2[attr]
-                                if value1 != value2:
-                                    print('    %s attribute %s changed from %s to %s' % (
-                                        name, attr, value1, value2))
-
-    return migration2
diff --git a/src/south/management/commands/syncdb.py b/src/south/management/commands/syncdb.py
index 26a5e7ca05..d2262f9c36 100644
--- a/src/south/management/commands/syncdb.py
+++ b/src/south/management/commands/syncdb.py
@@ -5,57 +5,50 @@ Overridden syncdb command
 from __future__ import print_function
 
 import sys
-
-from importlib import import_module
 from optparse import make_option
 
-from django.core.management.base import NoArgsCommand, BaseCommand, CommandError
+from django.core.management.base import NoArgsCommand, BaseCommand
 from django.core.management.color import no_style
 from django.utils.datastructures import SortedDict
 from django.core.management.commands import syncdb
 from django.conf import settings
-from django.db import connections, models
+from django.db import models
 from django.db.models.loading import cache
 from django.core import management
 
-try:
-    from django.apps import apps
-except ImportError:
-    apps = None
-
 from south.db import dbs
 from south import migration
-from south.constants import DJANGO_17
 from south.exceptions import NoMigrations
-from south.migration.utils import get_app_label
+
+
+def get_app_label(app):
+    return '.'.join(app.__name__.split('.')[0:-1])
 
 
 class Command(NoArgsCommand):
     option_list = syncdb.Command.option_list + (
-        make_option('--migrate', action='store_true', dest='migrate', default=True,
-                    help='Tells South to enable migrations after the sync. Default for during testing, and other internal calls.'),
-        make_option('--merge', action='store_true', dest='merge', default=True,
-                    help='Will run out-of-order missing migrations as they are - no rollbacks.'),
-        make_option('--delete-ghost-migrations', action='store_true', dest='delete_ghosts', default=False,
-                    help="Tells South to delete any 'ghost' migrations (ones in the database but not on disk)."),
-        make_option('--ignore-ghost-migrations', action='store_true', dest='ignore_ghosts', default=True,
-                    help="Tells South to ignore any 'ghost' migrations (ones in the database but not on disk) and continue to apply new migrations."),
+        make_option('--migrate', action='store_true', dest='migrate', default=False,
+                    help='Tells South to also perform migrations after the sync. Default for during testing, and other internal calls.'),
+        make_option('--all', action='store_true', dest='migrate_all', default=False,
+                    help='Makes syncdb work on all apps, even migrated ones. Be careful!'),
     )
+    if '--verbosity' not in [opt.get_opt_string() for opt in syncdb.Command.option_list]:
+        option_list += (
+            make_option('--verbosity', action='store', dest='verbosity', default='1',
+                        type='choice', choices=['0', '1', '2'],
+                        help='Verbosity level; 0=minimal output, 1=normal output, 2=all output'),
+        )
     help = "Create the database tables for all apps in INSTALLED_APPS whose tables haven't already been created, except those which use migrations."
 
-    def handle_noargs(self, **options):
+    def handle_noargs(self, migrate_all=False, **options):
+
         # Import the 'management' module within each installed app, to register
         # dispatcher events.
-        if not hasattr(self, 'stdout'):
-            self.stdout = sys.stdout
-            self.stderr = sys.stderr
-        if DJANGO_17:
-            from django.apps import apps
-            from django.utils.module_loading import module_has_submodule
-
-            for app_config in apps.get_app_configs():
-                if module_has_submodule(app_config.module, "management"):
-                    import_module('.management', app_config.name)
+        # This is copied from Django, to fix bug #511.
+        try:
+            from django.utils.importlib import import_module
+        except ImportError:
+            pass  # TODO: Remove, only for Django1.0
         else:
             for app_name in settings.INSTALLED_APPS:
                 try:
@@ -68,26 +61,11 @@ class Command(NoArgsCommand):
         # Work out what uses migrations and so doesn't need syncing
         apps_needing_sync = []
         apps_migrated = []
-        app_name_to_app_map = {}
-
-        if DJANGO_17:
-            for app_config in apps.get_app_configs():
-                if not app_config.models_module:
-                    continue
-
-                app_label = get_app_label(app_config.models_module)
-                app_name_to_app_map[app_label] = app_config
-                try:
-                    migrations = migration.Migrations(app_label)
-                except NoMigrations:
-                    # It needs syncing
-                    apps_needing_sync.append(app_label)
-                else:
-                    # This is a migrated app, leave it
-                    apps_migrated.append(app_label)
-        else:
-            for app in models.get_apps():
-                app_label = get_app_label(app)
+        for app in models.get_apps():
+            app_label = get_app_label(app)
+            if migrate_all:
+                apps_needing_sync.append(app_label)
+            else:
                 try:
                     migrations = migration.Migrations(app_label)
                 except NoMigrations:
@@ -96,82 +74,44 @@ class Command(NoArgsCommand):
                 else:
                     # This is a migrated app, leave it
                     apps_migrated.append(app_label)
-
         verbosity = int(options.get('verbosity', 0))
 
         # Run syncdb on only the ones needed
         if verbosity:
-            self.stdout.write("Syncing...\n")
+            print("Syncing...")
+
+        old_installed, settings.INSTALLED_APPS = settings.INSTALLED_APPS, apps_needing_sync
+        old_app_store, cache.app_store = cache.app_store, SortedDict([
+            (k, v) for (k, v) in cache.app_store.items()
+            if get_app_label(k) in apps_needing_sync
+        ])
 
         # This will allow the setting of the MySQL storage engine, for example.
         for db in dbs.values():
             db.connection_init()
 
-        # In Django 1.7 we need to actually run migrations (Sentry specifically)
-        # as it creates the 'auth' table. To run migrations however we still need
-        # to create the south tables ahead of time.
-        if DJANGO_17:
-            self.sync_apps(['south'], app_name_to_app_map, options)
-            apps_needing_sync.remove('south')
-        # In 1.6 the constraints dont function/get created in the same way, and
-        # additionally contenttypes tries to apply so syncing just south isnt enough
-        else:
-            self.sync_apps(apps_needing_sync, app_name_to_app_map, options)
+        # OK, run the actual syncdb
+        syncdb.Command().execute(**options)
+
+        settings.INSTALLED_APPS = old_installed
+        cache.app_store = old_app_store
 
         # Migrate if needed
         if options.get('migrate', True):
             if verbosity:
-                self.stdout.write("Migrating...\n")
-            management.call_command('south_migrate', **options)
-
-        if DJANGO_17:
-            self.sync_apps(apps_needing_sync, app_name_to_app_map, options)
+                print("Migrating...")
+            # convert from store_true to store_false
+            options['no_initial_data'] = not options.get('load_initial_data', True)
+            management.call_command('migrate', **options)
 
         # Be obvious about what we did
         if verbosity:
-            self.stdout.write("\nSynced:\n > {}\n".format("\n > ".join(apps_needing_sync)))
+            print("\nSynced:\n > %s" % "\n > ".join(apps_needing_sync))
 
         if options.get('migrate', True):
             if verbosity:
-                self.stdout.write("\nMigrated:\n - {}\n".format("\n - ".join(apps_migrated)))
+                print("\nMigrated:\n - %s" % "\n - ".join(apps_migrated))
         else:
             if verbosity:
-                self.stdout.write(
-                    "\nNot synced (use migrations):\n - {}\n".format(
-                        "\n - ".join(apps_migrated)))
-                self.stdout.write("(use ./manage.py migrate to migrate these)\n")
-
-    def sync_apps(self, app_labels, app_name_to_app_map, options):
-        if DJANGO_17:
-            from django.db.migrations.executor import MigrationExecutor
-            from django.core.management.commands import migrate
-
-            apps_to_sync = []
-            for app_label in app_labels:
-                app_label = app_name_to_app_map[app_label].label if app_label in app_name_to_app_map else app_label
-                apps_to_sync.append(app_label)
-
-            connection = connections[options.get('database', 'default')]
-
-            cmd = migrate.Command()
-            cmd.stdout = self.stdout
-            cmd.stderr = self.stderr
-            cmd.run_syncdb = True
-            cmd.verbosity = int(options.get('verbosity'))
-            cmd.interactive = options.get('interactive')
-            cmd.show_traceback = options.get('traceback')
-            cmd.load_initial_data = options.get('load_initial_data')
-            cmd.test_database = options.get('test_database', False)
-            cmd.sync_apps(connection, apps_to_sync)
-        else:
-            old_installed, settings.INSTALLED_APPS = settings.INSTALLED_APPS, app_labels
-            old_app_store, cache.app_store = cache.app_store, SortedDict([
-                (k, v) for (k, v) in cache.app_store.items()
-                if get_app_label(k) in app_labels
-            ])
-
-            # OK, run the actual syncdb
-            syncdb.Command().execute(**options)
-
-            settings.INSTALLED_APPS = old_installed
-            cache.app_store = old_app_store
+                print("\nNot synced (use migrations):\n - %s" % "\n - ".join(apps_migrated))
+                print("(use ./manage.py migrate to migrate these)")
diff --git a/src/south/management/commands/test.py b/src/south/management/commands/test.py
new file mode 100644
index 0000000000..bc721bb15b
--- /dev/null
+++ b/src/south/management/commands/test.py
@@ -0,0 +1,9 @@
+from django.core.management.commands import test
+
+from south.management.commands import patch_for_test_db_setup
+
+
+class Command(test.Command):
+    def handle(self, *args, **kwargs):
+        patch_for_test_db_setup()
+        super(Command, self).handle(*args, **kwargs)
diff --git a/src/south/migration/__init__.py b/src/south/migration/__init__.py
index ba159ba481..19afdbae55 100644
--- a/src/south/migration/__init__.py
+++ b/src/south/migration/__init__.py
@@ -13,7 +13,8 @@ from south import exceptions
 from south.models import MigrationHistory
 from south.db import db, DEFAULT_DB_ALIAS
 from south.migration.migrators import (Backwards, Forwards,
-                                       DryRunMigrator, FakeMigrator)
+                                       DryRunMigrator, FakeMigrator,
+                                       LoadInitialDataMigrator)
 from south.migration.base import Migration, Migrations
 from south.migration.utils import SortedSet
 from south.migration.base import all_migrations
@@ -146,13 +147,15 @@ def get_direction(target, applied, migrations, verbosity, interactive):
     return direction, problems, workplan
 
 
-def get_migrator(direction, db_dry_run, fake):
+def get_migrator(direction, db_dry_run, fake, load_initial_data):
     if not direction:
         return direction
     if db_dry_run:
         direction = DryRunMigrator(migrator=direction, ignore_fail=False)
     elif fake:
         direction = FakeMigrator(migrator=direction)
+    elif load_initial_data:
+        direction = LoadInitialDataMigrator(migrator=direction)
     return direction
 
 
@@ -166,7 +169,7 @@ def get_unapplied_migrations(migrations, applied_migrations):
 
 
 def migrate_app(migrations, target_name=None, merge=False, fake=False, db_dry_run=False, yes=False, verbosity=0,
-                skip=False, database=DEFAULT_DB_ALIAS, delete_ghosts=False, ignore_ghosts=False, interactive=False):
+                load_initial_data=False, skip=False, database=DEFAULT_DB_ALIAS, delete_ghosts=False, ignore_ghosts=False, interactive=False):
     app_label = migrations.app_label()
 
     verbosity = int(verbosity)
@@ -225,7 +228,7 @@ def migrate_app(migrations, target_name=None, merge=False, fake=False, db_dry_ru
         raise exceptions.InconsistentMigrationHistory(problems)
 
     # Perform the migration
-    migrator = get_migrator(direction, db_dry_run, fake)
+    migrator = get_migrator(direction, db_dry_run, fake, load_initial_data)
     if migrator:
         migrator.print_title(target)
         success = migrator.migrate_many(target, workplan, database)
@@ -241,6 +244,12 @@ def migrate_app(migrations, target_name=None, merge=False, fake=False, db_dry_ru
         if verbosity:
             # Say there's nothing.
             print('- Nothing to migrate.')
+        # If we have initial data enabled, and we're at the most recent
+        # migration, do initial data.
+        # Note: We use a fake Forwards() migrator here. It's never used really.
+        if load_initial_data:
+            migrator = LoadInitialDataMigrator(migrator=Forwards(verbosity=verbosity))
+            migrator.load_initial_data(target, db=database)
         # Send signal.
         post_migrate.send(
             None,
diff --git a/src/south/migration/base.py b/src/south/migration/base.py
index b3f6ca3afe..8614c4891d 100644
--- a/src/south/migration/base.py
+++ b/src/south/migration/base.py
@@ -1,23 +1,23 @@
 from __future__ import print_function
 
+from collections import deque
 import datetime
+from imp import reload
 import os
 import re
-import six
 import sys
 
-from collections import deque
 from django.core.exceptions import ImproperlyConfigured
 from django.db import models
 from django.conf import settings
 from django.utils import importlib
-from imp import reload
 
 from south import exceptions
-from south.constants import DJANGO_17
-from south.migration.utils import app_label_to_app_module, depends, dfs, flatten, get_app_label
+from south.migration.utils import depends, dfs, flatten, get_app_label
 from south.orm import FakeORM
 from south.utils import memoize, ask_for_it_by_name, datetime_utils
+from south.migration.utils import app_label_to_app_module
+from south.utils.py3 import string_types, with_metaclass
 
 
 def all_migrations(applications=None):
@@ -27,34 +27,45 @@ def all_migrations(applications=None):
     if applications is None:
         applications = models.get_apps()
     for model_module in applications:
-        app_label = get_app_label(model_module)
+        # The app they've passed is the models module - go up one level
+        app_path = ".".join(model_module.__name__.split(".")[:-1])
+        app = ask_for_it_by_name(app_path)
         try:
-            yield Migrations(app_label)
+            yield Migrations(app)
         except exceptions.NoMigrations:
             pass
 
 
+def application_to_app_label(application):
+    "Works out the app label from either the app label, the app name, or the module"
+    if isinstance(application, string_types):
+        app_label = application.split('.')[-1]
+    else:
+        app_label = application.__name__.split('.')[-1]
+    return app_label
+
+
 class MigrationsMetaclass(type):
+
     """
     Metaclass which ensures there is only one instance of a Migrations for
     any given app.
-
-    This implements an identity mapper on ``Migrations(application)`` based on the label.
     """
 
     def __init__(self, name, bases, dict):
         super(MigrationsMetaclass, self).__init__(name, bases, dict)
         self.instances = {}
 
-    def __call__(self, application_or_app_label, **kwds):
-        if isinstance(application_or_app_label, six.string_types):
-            app_label = application_or_app_label
-        else:
-            app_label = get_app_label(application_or_app_label)
+    def __call__(self, application, **kwds):
+
+        app_label = application_to_app_label(application)
+
+        # If we don't already have an instance, make one
         if app_label not in self.instances:
             self.instances[app_label] = super(
                 MigrationsMetaclass, self).__call__(
-                application_or_app_label, **kwds)
+                app_label_to_app_module(app_label), **kwds)
+
         return self.instances[app_label]
 
     def _clear_cache(self):
@@ -62,7 +73,7 @@ class MigrationsMetaclass(type):
         self.instances = {}
 
 
-class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
+class Migrations(with_metaclass(MigrationsMetaclass, list)):
     """
     Holds a list of Migration objects for a particular app.
     """
@@ -80,15 +91,10 @@ class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
                                         r'[0-9a-zA-Z_]*'
                                         r'(\.py)?$')       # Match only .py files, or module dirs
 
-    def __init__(self, application_or_app_label, force_creation=False, verbose_creation=True):
+    def __init__(self, application, force_creation=False, verbose_creation=True):
         "Constructor. Takes the module of the app, NOT its models (like get_app returns)"
         self._cache = {}
-        self.set_application(application_or_app_label, force_creation, verbose_creation)
-
-    def __repr__(self):
-        return u'<Migrations: {}>'.format(
-            self.app_label(),
-        )
+        self.set_application(application, force_creation, verbose_creation)
 
     def create_migrations_directory(self, verbose=True):
         "Given an application, ensures that the migrations directory is ready."
@@ -112,15 +118,42 @@ class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
         If it doesn't exist yet, returns where it would exist, based on the
         app's migrations module (defaults to app.migrations)
         """
-        module = self.migrations_module()
-        return os.path.dirname(module.__file__)
+        module_path = self.migrations_module()
+        try:
+            module = importlib.import_module(module_path)
+        except ImportError:
+            # There's no migrations module made yet; guess!
+            try:
+                parent = importlib.import_module(".".join(module_path.split(".")[:-1]))
+            except ImportError:
+                # The parent doesn't even exist, that's an issue.
+                raise exceptions.InvalidMigrationModule(
+                    application=self.application.__name__,
+                    module=module_path,
+                )
+            else:
+                # Good guess.
+                return os.path.join(os.path.dirname(parent.__file__), module_path.split(".")[-1])
+        else:
+            # Get directory directly
+            return os.path.dirname(module.__file__)
 
     def migrations_module(self):
         "Returns the module name of the migrations module for this"
-        full_name = '{}.south_migrations'.format(self._application.__name__)
-        if full_name in sys.modules:
-            return sys.modules[full_name]
-        return __import__(full_name, {}, {}, ['south_migrations'], -1)
+        app_label = application_to_app_label(self.application)
+        if hasattr(settings, "SOUTH_MIGRATION_MODULES"):
+            if app_label in settings.SOUTH_MIGRATION_MODULES:
+                # There's an override.
+                return settings.SOUTH_MIGRATION_MODULES[app_label]
+        # We see if the south_migrations module exists first, and
+        # use that if we find it.
+        module_name = self._application.__name__ + '.south_migrations'
+        try:
+            importlib.import_module(module_name)
+        except ImportError:
+            return self._application.__name__ + '.migrations'
+        else:
+            return module_name
 
     def get_application(self):
         return self._application
@@ -130,26 +163,22 @@ class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
         Called when the application for this Migrations is set.
         Imports the migrations module object, and throws a paddy if it can't.
         """
-        if isinstance(application, six.string_types):
-            if application in sys.modules:
-                application = sys.modules[application]
-            else:
-                application = app_label_to_app_module(application)
-
         self._application = application
-        if not hasattr(application, 'south_migrations'):
+        if not hasattr(application, 'migrations') and not hasattr(application, 'south_migrations'):
             try:
-                module = self.migrations_module()
-                self._migrations = application.south_migrations = module
+                module = importlib.import_module(self.migrations_module())
+                self._migrations = application.migrations = module
             except ImportError:
                 if force_creation:
                     self.create_migrations_directory(verbose_creation)
-                    module = self.migrations_module()
-                    self._migrations = application.south_migrations = module
+                    module = importlib.import_module(self.migrations_module())
+                    self._migrations = application.migrations = module
                 else:
-                    six.reraise(exceptions.NoMigrations, exceptions.NoMigrations(application))
+                    raise exceptions.NoMigrations(application)
         if hasattr(application, 'south_migrations'):
             self._load_migrations_module(application.south_migrations)
+        else:
+            self._load_migrations_module(application.migrations)
 
     application = property(get_application, set_application)
 
@@ -180,7 +209,7 @@ class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
         return self._cache[name]
 
     def __getitem__(self, value):
-        if isinstance(value, six.string_types):
+        if isinstance(value, string_types):
             return self.migration(value)
         return super(Migrations, self).__getitem__(value)
 
@@ -203,7 +232,7 @@ class Migrations(six.with_metaclass(MigrationsMetaclass, list)):
             return self._guess_migration(prefix=target_name)
 
     def app_label(self):
-        return self._application.__name__
+        return self._application.__name__.split('.')[-1]
 
     def full_name(self):
         return self._migrations.__name__
diff --git a/src/south/migration/migrators.py b/src/south/migration/migrators.py
index 8d1acc3473..0f116d5d98 100644
--- a/src/south/migration/migrators.py
+++ b/src/south/migration/migrators.py
@@ -209,6 +209,56 @@ class FakeMigrator(MigratorWrapper):
         pass
 
 
+class LoadInitialDataMigrator(MigratorWrapper):
+
+    def load_initial_data(self, target, db='default'):
+        if target is None or target != target.migrations[-1]:
+            return
+        # Load initial data, if we ended up at target
+        if self.verbosity:
+            print(" - Loading initial data for %s." % target.app_label())
+        if DJANGO_VERSION < (1, 6):
+            self.pre_1_6(target, db)
+        else:
+            self.post_1_6(target, db)
+
+    def pre_1_6(self, target, db):
+        # Override Django's get_apps call temporarily to only load from the
+        # current app
+        old_get_apps = models.get_apps
+
+        def new_get_apps(): return [models.get_app(target.app_label())]
+        models.get_apps = new_get_apps
+        loaddata.get_apps = new_get_apps
+        try:
+            call_command('loaddata', 'initial_data', verbosity=self.verbosity, database=db)
+        finally:
+            models.get_apps = old_get_apps
+            loaddata.get_apps = old_get_apps
+
+    def post_1_6(self, target, db):
+        import django.db.models.loading
+        # build a new 'AppCache' object with just the app we care about.
+        old_cache = django.db.models.loading.cache
+        new_cache = django.db.models.loading.AppCache()
+        new_cache.get_apps = lambda: [new_cache.get_app(target.app_label())]
+
+        # monkeypatch
+        django.db.models.loading.cache = new_cache
+        try:
+            call_command('loaddata', 'initial_data', verbosity=self.verbosity, database=db)
+        finally:
+            # unmonkeypatch
+            django.db.models.loading.cache = old_cache
+
+    def migrate_many(self, target, migrations, database):
+        migrator = self._migrator
+        result = migrator.__class__.migrate_many(migrator, target, migrations, database)
+        if result:
+            self.load_initial_data(target, db=database)
+        return True
+
+
 class Forwards(Migrator):
     """
     Runs the specified migration forwards, in order.
diff --git a/src/south/migration/utils.py b/src/south/migration/utils.py
index 418bcb6600..c27cf16801 100644
--- a/src/south/migration/utils.py
+++ b/src/south/migration/utils.py
@@ -1,12 +1,10 @@
-import six
 import sys
-
 from collections import deque
+
 from django.utils.datastructures import SortedDict
 from django.db import models
 
 from south import exceptions
-from south.constants import DJANGO_17
 
 
 class SortedSet(SortedDict):
@@ -26,25 +24,12 @@ class SortedSet(SortedDict):
         [self.add(k) for k in iterable]
 
 
-def get_app_label(models_module):
+def get_app_label(app):
     """
-    Works out the app label from either the app label, the app name, or the module
-
-    For example, this will convert:
-
-    >>> <module 'sentry_plugins.hipchat_ac.models'>
-
-    into:
-
-    >>> 'sentry_plugins.hipchat_ac'
+    Returns the _internal_ app label for the given app module.
+    i.e. for <module django.contrib.auth.models> will return 'auth'
     """
-    if isinstance(models_module, six.string_types):
-        if DJANGO_17:
-            return models_module.rsplit('.')[0]
-        return models_module.rsplit('.', 1)[0]
-    if DJANGO_17:
-        return models_module.__name__.rsplit('.', 1)[0]
-    return models_module.__name__.rsplit('.', 1)[0]
+    return app.__name__.split('.')[-2]
 
 
 def app_label_to_app_module(app_label):
@@ -54,11 +39,11 @@ def app_label_to_app_module(app_label):
     """
     # Get the models module
     app = models.get_app(app_label)
-    module_name = app.__name__.rsplit('.', 1)[0]
+    module_name = ".".join(app.__name__.split(".")[:-1])
     try:
         module = sys.modules[module_name]
     except KeyError:
-        __import__(module_name, {}, {}, [])
+        __import__(module_name, {}, {}, [''])
         module = sys.modules[module_name]
     return module
 
diff --git a/src/south/models.py b/src/south/models.py
index 6cd89044a5..99845d221d 100644
--- a/src/south/models.py
+++ b/src/south/models.py
@@ -1,6 +1,13 @@
 from django.db import models
 from south.db import DEFAULT_DB_ALIAS
 
+# If we detect Django 1.7 or higher, then exit
+# Placed here so it's guaranteed to be imported on Django start
+import django
+if django.VERSION[0] > 1 or (django.VERSION[0] == 1 and django.VERSION[1] > 6):
+    raise RuntimeError(
+        "South does not support Django 1.7 or higher. Please use native Django migrations.")
+
 
 class MigrationHistory(models.Model):
     app_name = models.CharField(max_length=255)
diff --git a/src/south/orm.py b/src/south/orm.py
index 911e179f18..705d37b199 100644
--- a/src/south/orm.py
+++ b/src/south/orm.py
@@ -333,17 +333,17 @@ class _FakeORM(object):
                 fields[fname] = field
 
         # Find the app in the Django core, and get its module
-        more_kwds = {
-            'Meta': meta,
-        }
+        more_kwds = {}
         try:
             app_module = models.get_app(app)
             more_kwds['__module__'] = app_module.__name__
         except ImproperlyConfigured:
-            # the app this belonged to has vanished, but thankfully we can still
+            # The app this belonged to has vanished, but thankfully we can still
             # make a mock model, so ignore the error.
             more_kwds['__module__'] = '_south_mock'
 
+        more_kwds['Meta'] = meta
+
         # Make our model
         fields.update(more_kwds)
 
