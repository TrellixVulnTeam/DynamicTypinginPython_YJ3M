commit f4a064b16b0e3deacaf98242da833f949623a179
Author: Nathan Heskia <nathan.heskia@gmail.com>
Date:   Wed Apr 1 10:03:07 2020 -0700

    perf(event attachment): Add file to event attachment index (#18004)

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 4254a12469..8238371de3 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0059_add_new_sentry_app_features
+sentry: 0060_add_file_eventattachment_index
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/migrations/0060_add_file_eventattachment_index.py b/src/sentry/migrations/0060_add_file_eventattachment_index.py
new file mode 100644
index 0000000000..d768553ee1
--- /dev/null
+++ b/src/sentry/migrations/0060_add_file_eventattachment_index.py
@@ -0,0 +1,50 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.28 on 2020-04-01 01:34
+from __future__ import unicode_literals
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = True
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = False
+
+
+    dependencies = [
+        ('sentry', '0059_add_new_sentry_app_features'),
+    ]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            database_operations=[
+                migrations.RunSQL(
+                    """
+                    CREATE INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx" ON "sentry_eventattachment" ("project_id", "date_added", "file_id");
+                    """,
+                    reverse_sql="""
+                        DROP INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx";
+                        """,
+                )
+            ],
+            state_operations=[
+                migrations.AlterIndexTogether(
+                    name='eventattachment',
+                    index_together=set([('project_id', 'date_added', 'file'), ('project_id', 'date_added')]),
+                ),
+            ],
+        )
+    ]
diff --git a/src/sentry/models/eventattachment.py b/src/sentry/models/eventattachment.py
index add81fa6d3..46049bc296 100644
--- a/src/sentry/models/eventattachment.py
+++ b/src/sentry/models/eventattachment.py
@@ -32,7 +32,7 @@ class EventAttachment(Model):
     class Meta:
         app_label = "sentry"
         db_table = "sentry_eventattachment"
-        index_together = (("project_id", "date_added"),)
+        index_together = (("project_id", "date_added"), ("project_id", "date_added", "file"))
         unique_together = (("project_id", "event_id", "file"),)
 
     __repr__ = sane_repr("event_id", "name", "file_id")
