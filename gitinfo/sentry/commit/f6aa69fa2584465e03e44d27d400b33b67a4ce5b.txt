commit f6aa69fa2584465e03e44d27d400b33b67a4ce5b
Author: David Cramer <dcramer@gmail.com>
Date:   Sun Jan 6 15:00:36 2013 -0800

    Change how user identifiers are stored (and dont rip out sentry_user_emails, but deprecate it).

diff --git a/src/sentry/interfaces.py b/src/sentry/interfaces.py
index bbfdedb154..61dee2eff5 100644
--- a/src/sentry/interfaces.py
+++ b/src/sentry/interfaces.py
@@ -478,7 +478,8 @@ class Http(Interface):
     are required: ``url`` and ``method``.
 
     The ``env`` variable is a compounded dictionary of HTTP headers as well
-    as environment information passed from the webserver.
+    as environment information passed from the webserver. Sentry will explicitly
+    look for ``REMOTE_ADDR`` in ``env`` for things which require an IP address.
 
     The ``data`` variable should only contain the request body (not the query
     string). It can either be a dictionary (for standard HTTP requests) or a
@@ -697,40 +698,33 @@ class User(Interface):
     """
     An interface which describes the authenticated User for a request.
 
-    All data is arbitrary and optional other than the ``email``
-    field which should be a string representing the user's email
-    address.
-
-    The email will automatically be tagged and used to determine unique users.
+    All data is arbitrary and optional other than the ``id``
+    field which should be a string representing the user's unique identifier.
 
     >>> {
-    >>>     "is_authenticated": true,
     >>>     "id": "unique_id",
-    >>>     "username": "foo",
+    >>>     "username": "my_user",
     >>>     "email": "foo@example.com"
     >>> }
     """
 
-    def __init__(self, email=None, **kwargs):
-        self.id = kwargs.pop('id', None)
+    def __init__(self, id=None, email=None, username=None, **kwargs):
+        self.id = id
         self.email = email
-        self.username = kwargs.pop('username', None)
-        self.is_authenticated = kwargs.get('is_authenticated', None)
+        self.username = username
         self.data = kwargs
 
     def serialize(self):
-        if self.is_authenticated:
-            return {
-                'is_authenticated': self.is_authenticated,
-                'id': self.id,
-                'username': self.username,
-                'email': self.email,
-                'data': self.data,
-            }
-        else:
-            return {
-                'is_authenticated': self.is_authenticated
-            }
+        # XXX: legacy -- delete
+        if hasattr(self, 'is_authenticated'):
+            self.data['is_authenticated'] = self.is_authenticated
+
+        return {
+            'id': self.id,
+            'username': self.username,
+            'email': self.email,
+            'data': self.data,
+        }
 
     def get_hash(self):
         return []
@@ -738,7 +732,6 @@ class User(Interface):
     def to_html(self, event):
         return render_to_string('sentry/partial/interfaces/user.html', {
             'event': event,
-            'user_authenticated': self.is_authenticated,
             'user_id': self.id,
             'user_username': self.username,
             'user_email': self.email,
diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index 692916c727..35965bb111 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -641,6 +641,10 @@ class GroupManager(BaseManager, ChartMixin):
             ('level', event.get_level_display()),
         ]
 
+        user_ident = event.user_ident
+        if user_ident:
+            tags.append(('user', user_ident))
+
         self.add_tags(group, tags)
 
         return group, is_new, is_sample
diff --git a/src/sentry/models.py b/src/sentry/models.py
index f05a315bd6..86be35ad07 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -390,6 +390,27 @@ class MessageBase(Model):
             return self.culprit
         return truncatechars(self.message.splitlines()[0], 100)
 
+    @property
+    def user_ident(self):
+        user_data = self.data.get('sentry.interfaces.User')
+        if user_data:
+            ident = user_data.get('id')
+            if ident:
+                return 'id:%s' % (ident,)
+
+            ident = user_data.get('email')
+            if ident:
+                return 'email:%s' % (ident,)
+
+        http_data = self.data.get('sentry.interfaces.Http')
+        if http_data:
+            if 'env' in http_data:
+                ident = http_data['env'].get('REMOTE_ADDR')
+                if ident:
+                    return 'ip:%s' % (ident,)
+
+        return None
+
 
 class Group(MessageBase):
     """
@@ -947,7 +968,7 @@ def record_user_count(filters, created, **kwargs):
         # if it's not a new row, it's not a unique user
         return
 
-    if filters.get('key') != 'user_email':
+    if filters.get('key') != 'user':
         return
 
     app.buffer.incr(Group, {
diff --git a/src/sentry/templates/sentry/partial/interfaces/user.html b/src/sentry/templates/sentry/partial/interfaces/user.html
index 89e02de7e8..78b3a8b61f 100644
--- a/src/sentry/templates/sentry/partial/interfaces/user.html
+++ b/src/sentry/templates/sentry/partial/interfaces/user.html
@@ -12,18 +12,16 @@
             </colgroup>
             <tbody>
                 <tr>
-                    <th>{% trans "Authenticated:" %}</th>
-                    <td>{{ user_authenticated }}</td>
+                    <th>{% trans "ID:" %}</th>
+                    <td>{{ user_id }}</td>
                 </tr>
-                {% if user_authenticated %}
-                    <tr>
-                        <th>{% trans "ID:" %}</th>
-                        <td>{{ user_id }}</td>
-                    </tr>
+                {% if user_username %}
                     <tr>
                         <th>{% trans "Username:" %}</th>
                         <td>{{ user_username }}</td>
                     </tr>
+                {% endif %}
+                {% if user_email %}
                     <tr>
                         <th>{% trans "Email:" %}</th>
                         <td>{{ user_email }}</td>
