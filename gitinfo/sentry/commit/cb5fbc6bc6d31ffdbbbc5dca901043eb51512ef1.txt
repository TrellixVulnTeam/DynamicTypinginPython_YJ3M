commit cb5fbc6bc6d31ffdbbbc5dca901043eb51512ef1
Author: David Cramer <cramer@dropbox.com>
Date:   Wed Jun 4 14:11:39 2014 -0700

    Split counters/triggers into multiple queues

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index caaeaf5e1b..39992c5c0f 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -264,7 +264,7 @@ SOCIAL_AUTH_DEFAULT_USERNAME = lambda: random.choice(['Darth Vader', 'Obi-Wan Ke
 SOCIAL_AUTH_PROTECTED_USER_FIELDS = ['email']
 
 # Queue configuration
-from kombu import Queue
+from kombu import Exchange, Queue
 
 BROKER_URL = "django://"
 
@@ -279,19 +279,34 @@ CELERY_DEFAULT_EXCHANGE = "default"
 CELERY_DEFAULT_EXCHANGE_TYPE = "direct"
 CELERY_DEFAULT_ROUTING_KEY = "default"
 CELERY_CREATE_MISSING_QUEUES = True
-CELERY_QUEUES = (
+
+CELERY_QUEUES = [
     Queue('default', routing_key='default'),
     Queue('celery', routing_key='celery'),
     Queue('alerts', routing_key='alerts'),
     Queue('cleanup', routing_key='cleanup'),
     Queue('sourcemaps', routing_key='sourcemaps'),
     Queue('search', routing_key='search'),
-    Queue('counters', routing_key='counters'),
     Queue('events', routing_key='events'),
-    Queue('triggers', routing_key='triggers'),
     Queue('update', routing_key='update'),
     Queue('email', routing_key='email'),
-)
+]
+
+CELERY_ROUTES = ('sentry.queue.routers.SplitQueueRouter',)
+
+
+def create_partitioned_queues(name):
+    for num in range(4):
+        CELERY_QUEUES.append(Queue(
+            '{0}-{1}'.format(name, num),
+            exchange=Exchange(name, type='direct'),
+            routing_key=name,
+        ))
+
+create_partitioned_queues('counters')
+create_partitioned_queues('triggers')
+
+
 CELERYBEAT_SCHEDULE = {
     'check-alerts': {
         'task': 'sentry.tasks.check_alerts',
diff --git a/src/sentry/queue/__init__.py b/src/sentry/queue/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/src/sentry/queue/routers.py b/src/sentry/queue/routers.py
new file mode 100644
index 0000000000..1a095b61aa
--- /dev/null
+++ b/src/sentry/queue/routers.py
@@ -0,0 +1,35 @@
+import itertools
+
+from django.conf import settings
+
+COUNTER_TASKS = set([
+    'sentry.tasks.process_buffer.process_pending',
+    'sentry.tasks.process_buffer.process_incr',
+])
+
+TRIGGER_TASKS = set([
+    'sentry.tasks.post_process.post_process_group',
+    'sentry.tasks.post_process.execute_rule',
+    'sentry.tasks.post_process.plugin_post_process_group',
+    'sentry.tasks.post_process.record_affected_user',
+    'sentry.tasks.post_process.record_affected_code',
+])
+
+COUNTER_QUEUES = itertools.cycle([
+    q for q in settings.CELERY_QUEUES
+    if q.startswith('counters-')
+])
+
+TRIGGER_QUEUES = itertools.cycle([
+    q for q in settings.CELERY_QUEUES
+    if q.startswith('triggers-')
+])
+
+
+class SplitQueueRouter(object):
+    def route_for_task(self, task, args=None, kwargs=None):
+        if task == COUNTER_TASKS:
+            return {'queue': COUNTER_QUEUES.next()}
+        if task == TRIGGER_TASKS:
+            return {'queue': TRIGGER_QUEUES.next()}
+        return None
diff --git a/src/sentry/tasks/base.py b/src/sentry/tasks/base.py
index dd1111aa3e..894de2089f 100644
--- a/src/sentry/tasks/base.py
+++ b/src/sentry/tasks/base.py
@@ -11,7 +11,7 @@ from django_statsd.clients import statsd
 from functools import wraps
 
 
-def instrumented_task(name, queue, stat_suffix=None, **kwargs):
+def instrumented_task(name, stat_suffix=None, **kwargs):
     def wrapped(func):
         @wraps(func)
         def _wrapped(*args, **kwargs):
@@ -21,5 +21,5 @@ def instrumented_task(name, queue, stat_suffix=None, **kwargs):
             with statsd.timer(statsd_key):
                 result = func(*args, **kwargs)
             return result
-        return task(name=name, queue=queue, **kwargs)(_wrapped)
+        return task(name=name, **kwargs)(_wrapped)
     return wrapped
diff --git a/src/sentry/tasks/post_process.py b/src/sentry/tasks/post_process.py
index d635856936..1be17308cb 100644
--- a/src/sentry/tasks/post_process.py
+++ b/src/sentry/tasks/post_process.py
@@ -46,8 +46,7 @@ def get_rules(project):
 
 
 @instrumented_task(
-    name='sentry.tasks.post_process.post_process_group',
-    queue='triggers')
+    name='sentry.tasks.post_process.post_process_group')
 def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs):
     """
     Fires post processing hooks for a group.
@@ -141,8 +140,7 @@ def post_process_group(group, event, is_new, is_regression, is_sample, **kwargs)
 
 
 @instrumented_task(
-    name='sentry.tasks.post_process.execute_rule',
-    queue='triggers')
+    name='sentry.tasks.post_process.execute_rule')
 def execute_rule(rule_id, event, state):
     """
     Fires post processing hooks for a rule.
@@ -166,7 +164,6 @@ def execute_rule(rule_id, event, state):
 
 @instrumented_task(
     name='sentry.tasks.post_process.plugin_post_process_group',
-    queue='triggers',
     stat_suffix=lambda plugin_slug, *a, **k: plugin_slug)
 def plugin_post_process_group(plugin_slug, group, **kwargs):
     """
@@ -177,8 +174,7 @@ def plugin_post_process_group(plugin_slug, group, **kwargs):
 
 
 @instrumented_task(
-    name='sentry.tasks.post_process.record_affected_user',
-    queue='triggers')
+    name='sentry.tasks.post_process.record_affected_user')
 def record_affected_user(group, event, **kwargs):
     from sentry.models import Group
 
@@ -203,8 +199,7 @@ def record_affected_user(group, event, **kwargs):
 
 
 @instrumented_task(
-    name='sentry.tasks.post_process.record_affected_code',
-    queue='triggers')
+    name='sentry.tasks.post_process.record_affected_code')
 def record_affected_code(group, event, **kwargs):
     from sentry.models import Group
 
diff --git a/src/sentry/tasks/process_buffer.py b/src/sentry/tasks/process_buffer.py
index 042a307e43..c438c4c4cb 100644
--- a/src/sentry/tasks/process_buffer.py
+++ b/src/sentry/tasks/process_buffer.py
@@ -12,8 +12,7 @@ from sentry.tasks.base import instrumented_task
 
 
 @instrumented_task(
-    name='sentry.tasks.process_buffer.process_pending',
-    queue='counters')
+    name='sentry.tasks.process_buffer.process_pending')
 def process_pending():
     """
     Process pending buffers.
@@ -24,8 +23,7 @@ def process_pending():
 
 
 @instrumented_task(
-    name='sentry.tasks.process_buffer.process_incr',
-    queue='counters')
+    name='sentry.tasks.process_buffer.process_incr')
 def process_incr(**kwargs):
     """
     Processes a buffer event.
