commit 3ac91a29d426ddb243442499f6e257cb52b4ba55
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Oct 13 13:01:41 2010 -0700

    Logging now supports passing in the request object via extra

diff --git a/sentry/client/base.py b/sentry/client/base.py
index a202065394..b6f94852c5 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -69,6 +69,21 @@ class SentryClient(object):
         for k in ('url', 'view', 'data'):
             if k not in kwargs:
                 kwargs[k] = record.__dict__.get(k)
+        
+        request = getattr(record, 'request', None)
+        if request:
+            if not kwargs.get('data'):
+                kwargs['data'] = {}
+            kwargs['data'].update(dict(
+                META=request.META,
+                POST=request.POST,
+                GET=request.GET,
+                COOKIES=request.COOKIES,
+            ))
+
+            if not kwargs.get('url'):
+                kwargs['url'] = request.build_absolute_uri()
+        
         kwargs.update({
             'logger': record.name,
             'level': record.levelno,
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 23ab22bfd1..9ec37c7fe5 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -28,10 +28,14 @@ from sentry import conf
 from sentry.helpers import transform
 from sentry.models import Message, GroupedMessage
 from sentry.client.base import SentryClient
+from sentry.client.handlers import SentryHandler
 from sentry.client.models import sentry_exception_handler, get_client
 
 from models import TestModel, DuplicateKeyModel
 
+logger = logging.getLogger('sentry.test')
+logger.addHandler(SentryHandler())
+
 class TestServerThread(threading.Thread):
     """Thread for running a http server while tests are running."""
 
@@ -104,7 +108,6 @@ class SentryTestCase(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.client.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
@@ -534,6 +537,15 @@ class SentryTestCase(TestCase):
         
         self.assertEquals(last.view, 'sentry-tests/error.html')
 
+    def testRequestInLogging(self):
+        resp = self.client.get(reverse('sentry-log-request-exc'))
+        self.assertEquals(resp.status_code, 200)
+        
+        last = Message.objects.get()
+        
+        self.assertEquals(last.view, 'sentry.tests.views.logging_request_exc')
+        self.assertEquals(last.data['META']['REMOTE_ADDR'], '127.0.0.1')
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
@@ -552,7 +564,6 @@ class SentryViewsTest(TestCase):
         
     def setUpHandler(self):
         self.tearDownHandler()
-        from sentry.client.handlers import SentryHandler
         
         logger = logging.getLogger()
         self._handlers = logger.handlers
diff --git a/sentry/tests/urls.py b/sentry/tests/urls.py
index 66aee68c26..cb6238a37c 100644
--- a/sentry/tests/urls.py
+++ b/sentry/tests/urls.py
@@ -9,5 +9,6 @@ urlpatterns = patterns('',
     url(r'^trigger-500-decorated$', 'sentry.tests.views.decorated_raise_exc', name='sentry-raise-exc-decor'),
     url(r'^trigger-500-django$', 'sentry.tests.views.django_exc', name='sentry-django-exc'),
     url(r'^trigger-500-template$', 'sentry.tests.views.template_exc', name='sentry-template-exc'),
+    url(r'^trigger-500-log-request$', 'sentry.tests.views.logging_request_exc', name='sentry-log-request-exc'),
     url(r'', include('sentry.urls')),
 )
\ No newline at end of file
diff --git a/sentry/tests/views.py b/sentry/tests/views.py
index 95b6fe7b3a..6dc77fe1a4 100644
--- a/sentry/tests/views.py
+++ b/sentry/tests/views.py
@@ -1,5 +1,9 @@
+from django.http import HttpResponse
 from django.shortcuts import get_object_or_404, render_to_response
 
+import logging
+import sys
+
 def django_exc(request):
     return get_object_or_404(Exception, pk=1)
 
@@ -10,4 +14,12 @@ def decorated_raise_exc(request):
     return raise_exc(request)
 
 def template_exc(request):
-    return render_to_response('sentry-tests/error.html')
\ No newline at end of file
+    return render_to_response('sentry-tests/error.html')
+
+def logging_request_exc(request):
+    logger = logging.getLogger('sentry.test')
+    try:
+        raise Exception(request.GET.get('message', 'view exception'))
+    except Exception, e:
+        logger.error(e, exc_info=sys.exc_info(), extra={'request': request})
+    return HttpResponse('')
\ No newline at end of file
