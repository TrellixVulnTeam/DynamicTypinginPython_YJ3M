commit b56f1cf43240bb45f3beb746a2ab344c7e701a44
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 28 12:34:54 2015 -0600

    Improve error message around IP blacklists

diff --git a/src/sentry/exceptions.py b/src/sentry/exceptions.py
index 919e69f768..1ee4ee0da4 100644
--- a/src/sentry/exceptions.py
+++ b/src/sentry/exceptions.py
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 
+from django.core.exceptions import SuspiciousOperation
+
 
 class InvalidData(Exception):
     pass
@@ -31,3 +33,7 @@ class InvalidConfiguration(Exception):
 
 class DeleteAborted(Exception):
     pass
+
+
+class RestrictedIPAddress(SuspiciousOperation):
+    pass
diff --git a/src/sentry/http.py b/src/sentry/http.py
index a2720881c3..6e58a47f4a 100644
--- a/src/sentry/http.py
+++ b/src/sentry/http.py
@@ -15,10 +15,10 @@ import warnings
 
 from sentry import options
 from django.conf import settings
-from django.core.exceptions import SuspiciousOperation
 from ipaddr import IPNetwork
 from requests.adapters import HTTPAdapter
 from requests.exceptions import SSLError
+from sentry.exceptions import RestrictedIPAddress
 
 # In case SSL is unavailable (light builds) we can't import this here.
 try:
@@ -72,7 +72,7 @@ def is_valid_url(url):
 class BlacklistAdapter(HTTPAdapter):
     def send(self, request, *args, **kwargs):
         if not is_valid_url(request.url):
-            raise SuspiciousOperation('%s matches the URL blacklist' % (request.url,))
+            raise RestrictedIPAddress('%s matches the URL blacklist' % (request.url,))
         return super(BlacklistAdapter, self).send(request, *args, **kwargs)
 
 
diff --git a/src/sentry/lang/javascript/processor.py b/src/sentry/lang/javascript/processor.py
index 60f6caed7a..051a89c40e 100644
--- a/src/sentry/lang/javascript/processor.py
+++ b/src/sentry/lang/javascript/processor.py
@@ -25,6 +25,7 @@ except ImportError:
 
 from sentry import http
 from sentry.constants import MAX_CULPRIT_LENGTH
+from sentry.exceptions import RestrictedIPAddress
 from sentry.interfaces.stacktrace import Stacktrace
 from sentry.models import EventError, Release, ReleaseFile
 from sentry.utils.cache import cache
@@ -292,7 +293,12 @@ def fetch_file(url, project=None, release=None, allow_scraping=True):
             )
         except Exception as exc:
             logger.debug('Unable to fetch %r', url, exc_info=True)
-            if isinstance(exc, SuspiciousOperation):
+            if isinstance(exc, RestrictedIPAddress):
+                error = {
+                    'type': EventError.RESTRICTED_IP,
+                    'url': url,
+                }
+            elif isinstance(exc, SuspiciousOperation):
                 error = {
                     'type': EventError.SECURITY_VIOLATION,
                     'value': unicode(exc),
diff --git a/src/sentry/models/eventerror.py b/src/sentry/models/eventerror.py
index 181c687b90..1c3fa7c244 100644
--- a/src/sentry/models/eventerror.py
+++ b/src/sentry/models/eventerror.py
@@ -7,6 +7,7 @@ class EventError(object):
     VALUE_TOO_LONG = 'value_too_long'
     UNKNOWN_ERROR = 'unknown_error'
     SECURITY_VIOLATION = 'security_violation'
+    RESTRICTED_IP = 'restricted_ip'
 
     JS_GENERIC_FETCH_ERROR = 'js_generic_fetch_error'
     JS_INVALID_HTTP_CODE = 'js_invalid_http_code'
@@ -20,7 +21,8 @@ class EventError(object):
         INVALID_ATTRIBUTE: 'Discarded invalid parameter \'{name}\'',
         VALUE_TOO_LONG: 'Discarded value for \'{name}\' due to exceeding maximum length',
         UNKNOWN_ERROR: 'Unknown error',
-        SECURITY_VIOLATION: 'Security violation on {url}: {value}',
+        SECURITY_VIOLATION: 'Cannot fetch resource due to security violation on {url}: {value}',
+        RESTRICTED_IP: 'Cannot fetch resource due to restricted IP address on {url}',
         JS_GENERIC_FETCH_ERROR: 'Unable to fetch resource: {url}',
         JS_INVALID_HTTP_CODE: 'HTTP returned {value} response on {url}',
         JS_NO_COLUMN: 'Cannot expand sourcemap due to no column information for {url}',
