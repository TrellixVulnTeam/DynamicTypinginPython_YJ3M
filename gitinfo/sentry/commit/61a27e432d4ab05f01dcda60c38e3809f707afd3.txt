commit 61a27e432d4ab05f01dcda60c38e3809f707afd3
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Fri Mar 30 11:23:45 2018 -0700

    ref(ui): Move accept project transfer to react

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 25dcad9094..6065a96530 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -1,6 +1,7 @@
 import {Redirect, Route, IndexRoute, IndexRedirect} from 'react-router';
 import React from 'react';
 
+import AcceptProjectTransfer from './views/acceptProjectTransfer';
 import AccountAuthorizations from './views/accountAuthorizations';
 import AccountLayout from './views/accountLayout';
 import AdminBuffer from './views/adminBuffer';
@@ -506,6 +507,7 @@ function routes() {
 
   return (
     <Route path="/" component={errorHandler(App)}>
+      <Route path="/accept-transfer/" component={errorHandler(AcceptProjectTransfer)} />
       <Route path="/account/" component={errorHandler(AccountLayout)}>
         <Route path="authorizations/" component={errorHandler(AccountAuthorizations)} />
       </Route>
diff --git a/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
new file mode 100644
index 0000000000..d7a2557678
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/acceptProjectTransfer.jsx
@@ -0,0 +1,95 @@
+import React from 'react';
+
+import {addErrorMessage, addSuccessMessage} from '../actionCreators/indicator';
+import AsyncView from './asyncView';
+import Form from './settings/components/forms/form';
+import NarrowLayout from '../components/narrowLayout';
+import Select2Field from './settings/components/forms/select2Field';
+import SettingsPageHeader from './settings/components/settingsPageHeader';
+import {t, tct} from '../locale';
+
+class AcceptProjectTransfer extends AsyncView {
+  getEndpoints() {
+    let query = this.props.location.query;
+    return [['transferDetails', '/accept-transfer/', {query}]];
+  }
+
+  getTitle() {
+    return t('Accept Project Transfer');
+  }
+
+  handleSubmit = formData => {
+    let teamId = formData.team;
+    this.api.request('/accept-transfer/', {
+      method: 'POST',
+      data: {
+        data: this.props.location.query.data,
+        team: teamId,
+      },
+      success: () => {
+        let orgSlug;
+        this.state.transferDetails.organizations.forEach(o => {
+          if (!orgSlug) {
+            o.teams.forEach(team => {
+              if (team.id === teamId) {
+                orgSlug = o.slug;
+              }
+            });
+          }
+        });
+        this.props.router.push(`/${orgSlug}`);
+        addSuccessMessage(t('Project successfully transferred'));
+      },
+      error: error => {
+        addErrorMessage(t('Unable to transfer project.'));
+      },
+    });
+  };
+
+  renderBody() {
+    let {transferDetails} = this.state;
+    let choices = [];
+    transferDetails.organizations.forEach(org => {
+      org.teams.forEach(team => {
+        choices.push([team.id, `#${team.slug} - ${org.slug}`]);
+      });
+    });
+    return (
+      <NarrowLayout>
+        <SettingsPageHeader title={t('Approve Transfer Project Request')} />
+        <p>
+          {tct(
+            'Projects must be transferred to a specific [team] in order to be moved over to another [organization]. ' +
+              'You can always change the team later under the [projectSettings].',
+            {
+              team: <strong>{t('Team')}</strong>,
+              organization: <strong>{t('Organization')}</strong>,
+              projectSettings: <strong>{t('Project Settings')}</strong>,
+            }
+          )}
+        </p>
+        <p>
+          {tct('Please select which [team] you want for the project [project].', {
+            team: <strong>{t('Team')}</strong>,
+            project: transferDetails.project.slug,
+          })}
+        </p>
+        <Form
+          onSubmit={this.handleSubmit}
+          submitLabel={t('Transfer Project')}
+          submitPriority="danger"
+          initialData={{team: choices[0] && choices[0][0]}}
+        >
+          <Select2Field
+            choices={choices}
+            label={t('Team')}
+            name="team"
+            style={{borderBottom: 'none'}}
+          />
+        </Form>
+      </NarrowLayout>
+    );
+  }
+}
+
+export default AcceptProjectTransfer;
diff --git a/src/sentry/web/frontend/accept_project_transfer.py b/src/sentry/web/frontend/accept_project_transfer.py
deleted file mode 100644
index 6fb5ef1896..0000000000
--- a/src/sentry/web/frontend/accept_project_transfer.py
+++ /dev/null
@@ -1,124 +0,0 @@
-from __future__ import absolute_import
-
-from django import forms
-from django.contrib import messages
-from django.utils.translation import ugettext_lazy as _
-from sentry import roles
-from sentry.web.frontend.base import BaseView
-from django.core.urlresolvers import reverse
-from django.http import HttpResponseRedirect, Http404
-from django.utils.encoding import force_str
-from django.core.signing import BadSignature, SignatureExpired
-from sentry.utils.signing import unsign
-from sentry.models import AuditLogEntryEvent, OrganizationMember, Organization, Team, TeamStatus, Project
-
-
-class AcceptProjectTransferForm(forms.Form):
-    team = forms.ChoiceField(choices=[])
-
-    def __init__(self, request, *args, **kwargs):
-        super(AcceptProjectTransferForm, self).__init__(*args, **kwargs)
-        teams = []
-        for o in Organization.objects.get_for_user(request.user):
-            # getting ALL the teams for the organization - not scoped to organizationmember
-            for t in Team.objects.filter(organization=o, status=TeamStatus.VISIBLE):
-                option = " %s - %s" % (t.name, o.name)
-                teams.append([t.id, option])
-
-        self.fields['team'].choices = teams
-        self.fields['team'].widget.choices = self.fields['team'].choices
-
-
-class AcceptProjectTransferView(BaseView):
-    required_scope = 'org:admin'
-    sudo_required = True
-
-    def get_form(self, request):
-        if request.method == 'POST':
-            return AcceptProjectTransferForm(request, request.POST, initial=request.POST)
-        return AcceptProjectTransferForm(request)
-
-    def handle(self, request, *args, **kwargs):
-        try:
-            d = request.GET['data']
-        except KeyError:
-            raise Http404
-
-        try:
-            data = unsign(force_str(d))
-        except BadSignature:
-            messages.add_message(
-                request, messages.ERROR,
-                _(u'Could not approve transfer, please make sure link is valid.')
-            )
-            return HttpResponseRedirect(
-                reverse('sentry')
-            )
-        except SignatureExpired:
-            messages.add_message(
-                request, messages.ERROR,
-                _(u'Project transfer link has expired!')
-            )
-            return HttpResponseRedirect(
-                reverse('sentry')
-            )
-
-        project_id = data['project_id']
-        user_id = data['user_id']
-        transaction_id = data['transaction_id']
-        from_organization_id = data['from_organization_id']
-        if user_id != request.user.id:
-            messages.add_message(
-                request, messages.ERROR,
-                _(u'Invalid permissions!')
-            )
-            return HttpResponseRedirect(
-                reverse('sentry')
-            )
-
-        # check if user is still an owner
-        if not OrganizationMember.objects.filter(
-            role=roles.get_top_dog().id,
-            user__is_active=True,
-            user_id=user_id,
-        ).exists():
-            return HttpResponseRedirect(
-                reverse('sentry')
-            )
-
-        try:
-            project = Project.objects.get(id=project_id, organization_id=from_organization_id)
-        except Project.DoesNotExist:
-            messages.add_message(
-                request, messages.ERROR,
-                _(u'Project no longer exists')
-            )
-            return HttpResponseRedirect(
-                reverse('sentry')
-            )
-
-        form = self.get_form(request)
-        if form.is_valid():
-            # transfer the project
-            team_id = form.cleaned_data.get('team')
-            new_team = Team.objects.get(id=team_id)
-            project.transfer_to(new_team)
-
-            self.create_audit_entry(
-                request=request,
-                organization=project.organization,
-                target_object=project_id,
-                event=AuditLogEntryEvent.PROJECT_ACCEPT_TRANSFER,
-                data=project.get_audit_log_data(),
-                transaction_id=transaction_id,
-            )
-
-            return HttpResponseRedirect(
-                reverse('sentry-organization-home', args=[new_team.organization.slug])
-            )
-
-        context = {
-            'project': project,
-            'form': form,
-        }
-        return self.respond('sentry/projects/accept_project_transfer.html', context)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 19c2df5b5e..204c5b5db0 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -49,7 +49,6 @@ from sentry.web.frontend.restore_organization import RestoreOrganizationView
 from sentry.web.frontend.remove_project import RemoveProjectView
 from sentry.web.frontend.transfer_project import TransferProjectView
 from sentry.web.frontend.account_identity import AccountIdentityAssociateView, AccountIdentityLinkView
-from sentry.web.frontend.accept_project_transfer import AcceptProjectTransferView
 from sentry.web.frontend.remove_team import RemoveTeamView
 from sentry.web.frontend.sudo import SudoView
 from sentry.web.frontend.unsubscribe_issue_notifications import \
@@ -352,9 +351,7 @@ urlpatterns += patterns(
     url(r'^api/[^0]+/', generic_react_page_view),
     url(r'^out/$', OutView.as_view()),
 
-    url(r'^accept-transfer/$', AcceptProjectTransferView.as_view(),
-        name='sentry-accept-project-transfer'),
-
+    url(r'^accept-transfer/$', react_page_view, name='sentry-accept-project-transfer'),
     url(r'^settings/', react_page_view),
 
     # Organizations
diff --git a/tests/sentry/web/frontend/test_accept_project_transfer.py b/tests/sentry/web/frontend/test_accept_project_transfer.py
deleted file mode 100644
index 699fd28466..0000000000
--- a/tests/sentry/web/frontend/test_accept_project_transfer.py
+++ /dev/null
@@ -1,122 +0,0 @@
-from __future__ import absolute_import
-
-from uuid import uuid4
-from six.moves.urllib.parse import urlencode
-from django.core.urlresolvers import reverse
-from sentry.utils.signing import sign
-from sentry.models import Project
-
-from sentry.testutils import TestCase, PermissionTestCase
-
-
-class AcceptTransferProjectPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(AcceptTransferProjectPermissionTest, self).setUp()
-        self.project = self.create_project(teams=[self.team])
-        self.path = reverse('sentry-accept-project-transfer')
-
-    def test_team_admin_cannot_load(self):
-        self.assert_team_admin_cannot_access(self.path)
-
-
-class AcceptTransferProjectTest(TestCase):
-    def setUp(self):
-        super(AcceptTransferProjectTest, self).setUp()
-        self.owner = self.create_user(email='example@example.com', is_superuser=False)
-        self.from_organization = self.create_organization(name='love', owner=self.owner)
-        self.to_organization = self.create_organization(name='lust', owner=self.owner)
-        self.from_team = self.create_team(name='bar', organization=self.from_organization)
-        self.to_team = self.create_team(name='bub', organization=self.to_organization)
-        user = self.create_user('admin@example.com')
-        self.member = self.create_member(
-            organization=self.from_organization,
-            user=user,
-            role='admin',
-            teams=[self.from_team],
-        )
-        self.project = self.create_project(name='proj', teams=[self.from_team])
-        self.transaction_id = uuid4().hex
-        self.path = reverse('sentry-accept-project-transfer')
-
-    def test_requires_authentication(self):
-        self.assertRequiresAuthentication(self.path, 'POST')
-
-    def test_handle_incorrect_url_data(self):
-        self.login_as(self.owner)
-        url_data = sign(
-            actor_id=self.member.id,
-            # This is bad data
-            from_organization_id=9999999,
-            project_id=self.project.id,
-            user_id=self.owner.id,
-            transaction_id=self.transaction_id)
-        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))
-        assert resp.status_code == 302
-        resp = self.client.get(self.path)
-        assert resp.status_code == 404
-
-    def test_renders_template_with_signed_link(self):
-        self.login_as(self.owner)
-        url_data = sign(
-            actor_id=self.member.user_id,
-            from_organization_id=self.from_organization.id,
-            project_id=self.project.id,
-            user_id=self.owner.id,
-            transaction_id=self.transaction_id)
-
-        resp = self.client.get(self.path + '?' + urlencode({'data': url_data}))
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/projects/accept_project_transfer.html')
-        assert resp.context['project'] == self.project
-
-    def test_transfers_project_to_correct_organization(self):
-        self.login_as(self.owner)
-        url_data = sign(
-            actor_id=self.member.user_id,
-            from_organization_id=self.from_organization.id,
-            project_id=self.project.id,
-            user_id=self.owner.id,
-            transaction_id=self.transaction_id)
-
-        url = self.path + '?' + urlencode({'data': url_data})
-        resp = self.client.post(url, data={'team': self.to_team.id})
-        assert resp['location'] == 'http://testserver' + \
-            reverse('sentry-organization-home', args=[self.to_team.organization.slug])
-
-        p = Project.objects.get(id=self.project.id)
-        assert p.organization_id == self.to_organization.id
-        assert p.teams.first() == self.to_team
-
-    def test_non_owner_cannot_transfer_project(self):
-        rando_user = self.create_user(email='blipp@bloop.com', is_superuser=False)
-        rando_org = self.create_organization(name='supreme beans')
-
-        self.login_as(rando_user)
-        url_data = sign(
-            actor_id=self.member.user_id,
-            from_organization_id=rando_org.id,
-            project_id=self.project.id,
-            user_id=rando_user.id,
-            transaction_id=self.transaction_id)
-
-        url = self.path + '?' + urlencode({'data': url_data})
-        resp = self.client.post(url, data={'team': self.to_team.id})
-        assert resp.status_code == 302
-        p = Project.objects.get(id=self.project.id)
-        assert p.organization_id == self.from_organization.id
-
-    def test_cannot_transfer_project_twice_from_same_org(self):
-        self.login_as(self.owner)
-        url_data = sign(
-            actor_id=self.member.user_id,
-            from_organization_id=self.from_organization.id,
-            project_id=self.project.id,
-            user_id=self.owner.id,
-            transaction_id=self.transaction_id)
-
-        url = self.path + '?' + urlencode({'data': url_data})
-        resp = self.client.post(url, data={'team': self.to_team.id})
-        assert resp['location'] == 'http://testserver' + \
-            reverse('sentry-organization-home', args=[self.to_team.organization.slug])
-        resp = self.client.get(url)
-        assert resp.status_code == 302
