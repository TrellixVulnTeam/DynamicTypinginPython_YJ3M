commit 3b71e4a4109844f38567cee3390ff8e3c01a5814
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 27 14:37:49 2015 -0700

    Improve team listing for members

diff --git a/src/sentry/auth/access.py b/src/sentry/auth/access.py
index 6148fb2728..40465997aa 100644
--- a/src/sentry/auth/access.py
+++ b/src/sentry/auth/access.py
@@ -3,8 +3,7 @@ from __future__ import absolute_import
 __all__ = ['from_user', 'from_member', 'DEFAULT', 'SCOPES']
 
 from sentry.models import (
-    AuthIdentity, AuthProvider, OrganizationMember, OrganizationMemberTeam,
-    Team
+    AuthIdentity, AuthProvider, OrganizationMember
 )
 
 SCOPES = set([
@@ -87,22 +86,7 @@ def from_user(user, organization):
 def from_member(member):
     # TODO(dcramer): we want to optimize this access pattern as its several
     # network hops and needed in a lot of places
-    if member.has_global_access:
-        teams = Team.objects.filter(
-            organization=member.organization,
-        ).exclude(
-            id__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-                is_active=False,
-            ).values('team')
-        )
-    else:
-        teams = Team.objects.filter(
-            id__in=OrganizationMemberTeam.objects.filter(
-                organizationmember=member,
-                is_active=True,
-            ).values('team')
-        )
+    teams = member.get_teams()
 
     try:
         auth_provider = AuthProvider.objects.get(
diff --git a/src/sentry/models/organizationmember.py b/src/sentry/models/organizationmember.py
index a8dd7f1b6e..bcf525dbde 100644
--- a/src/sentry/models/organizationmember.py
+++ b/src/sentry/models/organizationmember.py
@@ -188,6 +188,25 @@ class OrganizationMember(Model):
         return {
             'email': self.email,
             'user': self.user_id,
-            'teams': [t.id for t in self.teams.all()],
+            'teams': [t.id for t in self.get_teams()],
             'has_global_access': self.has_global_access,
         }
+
+    def get_teams(self):
+        from sentry.models import Team
+
+        if self.has_global_access:
+            return Team.objects.filter(
+                organization=self.organization,
+            ).exclude(
+                id__in=OrganizationMemberTeam.objects.filter(
+                    organizationmember=self,
+                    is_active=False,
+                ).values('team')
+            )
+        return Team.objects.filter(
+            id__in=OrganizationMemberTeam.objects.filter(
+                organizationmember=self,
+                is_active=True,
+            ).values('team')
+        )
diff --git a/src/sentry/web/frontend/organization_member_settings.py b/src/sentry/web/frontend/organization_member_settings.py
index ff2c23f2a0..460ad2a32c 100644
--- a/src/sentry/web/frontend/organization_member_settings.py
+++ b/src/sentry/web/frontend/organization_member_settings.py
@@ -20,7 +20,7 @@ class OrganizationMemberSettingsView(OrganizationView):
             initial={
                 'type': member.type,
                 'has_global_access': member.has_global_access,
-                'teams': member.teams.all(),
+                'teams': member.get_teams(),
             }
         )
 
diff --git a/tests/sentry/web/frontend/test_organization_member_settings.py b/tests/sentry/web/frontend/test_organization_member_settings.py
index 0f871a9295..cc974d8f52 100644
--- a/tests/sentry/web/frontend/test_organization_member_settings.py
+++ b/tests/sentry/web/frontend/test_organization_member_settings.py
@@ -279,7 +279,7 @@ class OrganizationMemberSettingsTest(TestCase):
         )
 
         OrganizationMemberTeam.objects.create(
-            member=member,
+            organizationmember=member,
             team=team_1,
             is_active=False,
         )
@@ -299,10 +299,10 @@ class OrganizationMemberSettingsTest(TestCase):
         member = OrganizationMember.objects.get(id=member.id)
 
         assert member.has_global_access is True
-        assert member.type == OrganizationMemberType.ADMIN
+        assert member.type == OrganizationMemberType.MEMBER
 
         om_teams = OrganizationMemberTeam.objects.filter(
-            member=member,
+            organizationmember=member,
         )
 
         assert len(om_teams) == 1
