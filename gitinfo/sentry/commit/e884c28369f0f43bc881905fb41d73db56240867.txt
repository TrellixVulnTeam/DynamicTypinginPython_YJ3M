commit e884c28369f0f43bc881905fb41d73db56240867
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Aug 1 23:40:11 2013 -0700

    Handle both old and new style interfaces in source expansion

diff --git a/src/sentry/tasks/fetch_source.py b/src/sentry/tasks/fetch_source.py
index 5c161f7a34..9eb87bb2b7 100644
--- a/src/sentry/tasks/fetch_source.py
+++ b/src/sentry/tasks/fetch_source.py
@@ -161,11 +161,18 @@ def expand_javascript_source(data, **kwargs):
     """
     from sentry.interfaces import Stacktrace
 
-    stacktraces = [
-        Stacktrace(**e['stacktrace'])
-        for e in data['sentry.interfaces.Exception']['values']
-    ]
+    # TODO: clean this up
+    legacy_style = ('sentry.interfaces.Stacktrace' in data)
+
+    if legacy_style:
+        stacktraces = [Stacktrace(**data['sentry.interfaces.Stacktrace'])]
+    else:
+        stacktraces = [
+            Stacktrace(**e['stacktrace'])
+            for e in data['sentry.interfaces.Exception']['values']
+        ]
     if not stacktraces:
+
         logger.debug('No stacktrace for event %r', data['event_id'])
         return
 
@@ -269,5 +276,8 @@ def expand_javascript_source(data, **kwargs):
             source=source, lineno=frame.lineno)
 
     if has_changes:
-        for exception, stacktrace in itertools.izip(data['sentry.interfaces.Exception']['values'], stacktraces):
-            exception['stacktrace'] = stacktrace.serialize()
+        if legacy_style:
+            data['sentry.interfaces.Stacktrace'] = stacktraces[0].serialize()
+        else:
+            for exception, stacktrace in itertools.izip(data['sentry.interfaces.Exception']['values'], stacktraces):
+                exception['stacktrace'] = stacktrace.serialize()
diff --git a/tests/sentry/tasks/fetch_source/tests.py b/tests/sentry/tasks/fetch_source/tests.py
index 04b8bf99f6..21529ef286 100644
--- a/tests/sentry/tasks/fetch_source/tests.py
+++ b/tests/sentry/tasks/fetch_source/tests.py
@@ -12,7 +12,47 @@ class ExpandJavascriptSourceTest(TestCase):
     @mock.patch('sentry.models.Event.update')
     @mock.patch('sentry.tasks.fetch_source.fetch_url')
     @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
-    def test_calls_from_kwargs(self, fetch_sourcemap, fetch_url, update):
+    def test_legacy_style(self, fetch_sourcemap, fetch_url, update):
+        data = {
+            'sentry.interfaces.Stacktrace': {
+                'frames': [
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 4,
+                        'colno': 0,
+                    },
+                    {
+                        'abs_path': 'http://example.com/foo.js',
+                        'filename': 'foo.js',
+                        'lineno': 1,
+                        'colno': 0,
+                    },
+                ],
+            },
+        }
+        fetch_sourcemap.return_value = None
+        fetch_url.return_value.body = '\n'.join('hello world')
+
+        expand_javascript_source(data)
+
+        fetch_url.assert_called_once_with('http://example.com/foo.js')
+
+        frame_list = data['sentry.interfaces.Stacktrace']['frames']
+        frame = frame_list[0]
+        assert frame['pre_context'] == ['h', 'e', 'l']
+        assert frame['context_line'] == 'l'
+        assert frame['post_context'] == ['o', ' ', 'w', 'o', 'r']
+
+        frame = frame_list[1]
+        assert frame['pre_context'] == []
+        assert frame['context_line'] == 'h'
+        assert frame['post_context'] == ['e', 'l', 'l', 'o', ' ']
+
+    @mock.patch('sentry.models.Event.update')
+    @mock.patch('sentry.tasks.fetch_source.fetch_url')
+    @mock.patch('sentry.tasks.fetch_source.fetch_sourcemap')
+    def test_new_style(self, fetch_sourcemap, fetch_url, update):
         data = {
             'sentry.interfaces.Exception': {
                 'values': [{
