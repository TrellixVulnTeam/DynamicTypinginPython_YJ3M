commit e3e2b4c319deb368481faf6400e7a9fc56de22ad
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 20 14:20:41 2015 -0700

    Improve origins ux

diff --git a/src/sentry/web/forms/fields.py b/src/sentry/web/forms/fields.py
index b8722edf59..6755b27d12 100644
--- a/src/sentry/web/forms/fields.py
+++ b/src/sentry/web/forms/fields.py
@@ -9,13 +9,15 @@ from __future__ import absolute_import
 
 import six
 
+from django.core.validators import URLValidator
 from django.forms.widgets import RadioFieldRenderer, TextInput, Widget
 from django.forms.util import flatatt
 from django.forms import (
-    Field, CharField, IntegerField, TypedChoiceField, ValidationError
+    Field, CharField, IntegerField, Textarea, TypedChoiceField, ValidationError
 )
 from django.utils.encoding import force_unicode
 from django.utils.html import format_html
+from sentry.utils.http import parse_uri_match
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
 
@@ -111,3 +113,36 @@ class ReadOnlyTextField(Field):
         # Always return initial because the widget doesn't
         # render an input field.
         return initial
+
+
+class OriginsField(CharField):
+    # Special case origins that don't fit the normal regex pattern, but are valid
+    WHITELIST_ORIGINS = ('*')
+
+    _url_validator = URLValidator()
+    widget = Textarea(
+        attrs={
+            'placeholder': mark_safe(_('e.g. example.com or https://example.com')),
+            'class': 'span8',
+        },
+    )
+
+    def clean(self, value):
+        if not value:
+            return []
+        values = filter(bool, (v.strip() for v in value.split('\n')))
+        for value in values:
+            if not self.is_valid_origin(value):
+                raise ValidationError('%r is not an acceptable value' % value)
+        return values
+
+    def is_valid_origin(self, value):
+        if value in self.WHITELIST_ORIGINS:
+            return True
+
+        bits = parse_uri_match(value)
+        # ports are not supported on matching expressions (yet)
+        if ':' in bits.domain:
+            return False
+
+        return True
diff --git a/src/sentry/web/frontend/organization_api_key_settings.py b/src/sentry/web/frontend/organization_api_key_settings.py
index 8ffed534be..67922a5c6a 100644
--- a/src/sentry/web/frontend/organization_api_key_settings.py
+++ b/src/sentry/web/frontend/organization_api_key_settings.py
@@ -1,12 +1,17 @@
 from __future__ import absolute_import
 
 from django import forms
+from django.utils.translation import ugettext_lazy as _
 
 from sentry.models import ApiKey, OrganizationMemberType
+from sentry.web.forms.fields import OriginsField
 from sentry.web.frontend.base import OrganizationView
 
 
 class ApiKeyForm(forms.ModelForm):
+    allowed_origins = OriginsField(label=_('Allowed Domains'), required=False,
+        help_text=_('Separate multiple entries with a newline.'))
+
     class Meta:
         model = ApiKey
         fields = ('label', 'scopes', 'allowed_origins')
diff --git a/src/sentry/web/frontend/project_settings.py b/src/sentry/web/frontend/project_settings.py
index 0e2bc33a52..b477416c34 100644
--- a/src/sentry/web/frontend/project_settings.py
+++ b/src/sentry/web/frontend/project_settings.py
@@ -3,7 +3,6 @@ from __future__ import absolute_import
 from django import forms
 from django.contrib import messages
 from django.core.urlresolvers import reverse
-from django.core.validators import URLValidator
 from django.http import HttpResponseRedirect
 from django.utils.safestring import mark_safe
 from django.utils.translation import ugettext_lazy as _
@@ -14,46 +13,14 @@ from sentry.models import (
 )
 from sentry.permissions import can_remove_project, can_set_public_projects
 from sentry.plugins import plugins
-from sentry.web.forms.fields import CustomTypedChoiceField, RangeField
+from sentry.web.forms.fields import (
+    CustomTypedChoiceField, RangeField, OriginsField
+)
 from sentry.web.frontend.base import ProjectView
-from sentry.utils.http import parse_uri_match
 
 
 BLANK_CHOICE = [("", "")]
 
-# Special case origins that don't fit the normal regex pattern, but are valid
-WHITELIST_ORIGINS = ('*')
-
-
-class OriginsField(forms.CharField):
-    _url_validator = URLValidator()
-    widget = forms.Textarea(
-        attrs={
-            'placeholder': mark_safe(_('e.g. example.com or https://example.com')),
-            'class': 'span8',
-        },
-    )
-
-    def clean(self, value):
-        if not value:
-            return []
-        values = filter(bool, (v.strip() for v in value.split('\n')))
-        for value in values:
-            if not self.is_valid_origin(value):
-                raise forms.ValidationError('%r is not an acceptable value' % value)
-        return values
-
-    def is_valid_origin(self, value):
-        if value in WHITELIST_ORIGINS:
-            return True
-
-        bits = parse_uri_match(value)
-        # ports are not supported on matching expressions (yet)
-        if ':' in bits.domain:
-            return False
-
-        return True
-
 
 class EditProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Project Name'), max_length=200,
