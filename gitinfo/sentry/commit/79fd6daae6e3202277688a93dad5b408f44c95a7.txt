commit 79fd6daae6e3202277688a93dad5b408f44c95a7
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Mon May 21 11:16:18 2018 -0700

    feat(integrations): Moved JWT helper methods to common place. (#8490)
    
    ref(integrations): Moved JWT helper methods to common place.

diff --git a/src/sentry/integrations/jira/utils.py b/src/sentry/integrations/atlassian_connect.py
similarity index 86%
rename from src/sentry/integrations/jira/utils.py
rename to src/sentry/integrations/atlassian_connect.py
index 5d119e8901..52119095b3 100644
--- a/src/sentry/integrations/jira/utils.py
+++ b/src/sentry/integrations/atlassian_connect.py
@@ -6,8 +6,14 @@ import jwt
 from sentry.models import Integration
 from sentry.utils.http import percent_encode
 
+__all__ = [
+    'AtlassianConnectValidationError',
+    'get_query_hash',
+    'get_integration_from_request',
+]
 
-class JiraValidationError(Exception):
+
+class AtlassianConnectValidationError(Exception):
     pass
 
 
@@ -39,7 +45,7 @@ def get_integration_from_request(request):
     # parameter or the authorization header.
     token = request.GET.get('jwt')
     if token is None:
-        raise JiraValidationError('No token parameter')
+        raise AtlassianConnectValidationError('No token parameter')
     # Decode the JWT token, without verification. This gives
     # you a header JSON object, a claims JSON object, and a signature.
     decoded = jwt.decode(token, verify=False)
@@ -55,7 +61,7 @@ def get_integration_from_request(request):
             external_id=issuer,
         )
     except Integration.DoesNotExist:
-        raise JiraValidationError('No integration found')
+        raise AtlassianConnectValidationError('No integration found')
     # Verify the signature with the sharedSecret and
     # the algorithm specified in the header's alg field.
     decoded_verified = jwt.decode(token, integration.metadata['shared_secret'])
@@ -64,6 +70,6 @@ def get_integration_from_request(request):
 
     qsh = get_query_hash(request.path, 'GET', request.GET)
     if qsh != decoded_verified['qsh']:
-        raise JiraValidationError('Query hash mismatch')
+        raise AtlassianConnectValidationError('Query hash mismatch')
 
     return integration
diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
index 22675d0f13..69010463cf 100644
--- a/src/sentry/integrations/jira/client.py
+++ b/src/sentry/integrations/jira/client.py
@@ -9,11 +9,11 @@ from six.moves.urllib.parse import urlparse
 from sentry.utils.cache import cache
 from django.utils.encoding import force_bytes
 
+from sentry.integrations.atlassian_connect import get_query_hash
 from sentry.integrations.exceptions import ApiError
 from sentry.integrations.client import ApiClient
 from sentry.utils.http import absolute_uri
 
-from .utils import get_query_hash
 
 JIRA_KEY = '%s.jira' % (urlparse(absolute_uri()).hostname, )
 
diff --git a/src/sentry/integrations/jira/configure.py b/src/sentry/integrations/jira/configure.py
index 95533cb1ad..bc3e837331 100644
--- a/src/sentry/integrations/jira/configure.py
+++ b/src/sentry/integrations/jira/configure.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django import forms
 
-from .utils import get_integration_from_request, JiraValidationError
+from sentry.integrations.atlassian_connect import AtlassianConnectValidationError, get_integration_from_request
 from sentry.web.frontend.base import BaseView
 from sentry.web.helpers import render_to_response
 
@@ -34,7 +34,7 @@ class JiraConfigureView(BaseView):
     def handle(self, request):
         try:
             integration = get_integration_from_request(request)
-        except JiraValidationError:
+        except AtlassianConnectValidationError:
             return self.get_response({'error_message': 'Unable to verify installation.'})
 
         # TODO(jess): restrict to org owners?
