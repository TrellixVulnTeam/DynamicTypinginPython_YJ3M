commit 99d51eb047d631836f32b49993022fa392d2a00f
Author: William Mak <william@wmak.io>
Date:   Mon Jun 29 16:15:51 2020 -0400

    fix(discover): Show project names when autocompleting project
    
    - This reduces number of projects in filter based on the queryset
    - Didn't like the previous use of `value` for transaciton_status since
      it doesn't match the results iteration later on so updated to match
      that too

diff --git a/src/sentry/tagstore/snuba/backend.py b/src/sentry/tagstore/snuba/backend.py
index 2517aa4cee..2e37765ce1 100644
--- a/src/sentry/tagstore/snuba/backend.py
+++ b/src/sentry/tagstore/snuba/backend.py
@@ -8,6 +8,8 @@ from dateutil.parser import parse as parse_datetime
 from django.core.cache import cache
 
 from sentry import options
+from sentry.api.event_search import PROJECT_ALIAS
+from sentry.models import Project
 from sentry.api.utils import default_start_end_dates
 from sentry.snuba.dataset import Dataset
 from sentry.tagstore import TagKeyStatus
@@ -704,6 +706,18 @@ class SnubaTagStorage(TagStorage):
             if converted_query is not None:
                 conditions.append([snuba_key, ">=", converted_query - FUZZY_NUMERIC_DISTANCE])
                 conditions.append([snuba_key, "<=", converted_query + FUZZY_NUMERIC_DISTANCE])
+        elif key == PROJECT_ALIAS:
+            project_filters = {
+                "id__in": projects,
+            }
+            if query:
+                project_filters["slug__icontains"] = query
+            project_queryset = Project.objects.filter(**project_filters).values("id", "slug")
+            project_slugs = {project["id"]: project["slug"] for project in project_queryset}
+            if project_queryset.exists():
+                projects = [project["id"] for project in project_queryset]
+                snuba_key = "project_id"
+                dataset = Dataset.Discover
         else:
             if snuba_key in BLACKLISTED_COLUMNS:
                 snuba_key = "tags[%s]" % (key,)
@@ -740,10 +754,15 @@ class SnubaTagStorage(TagStorage):
         if transaction_status:
             results = OrderedDict(
                 [
-                    (SPAN_STATUS_CODE_TO_NAME[result_key], value)
-                    for result_key, value in six.iteritems(results)
+                    (SPAN_STATUS_CODE_TO_NAME[result_key], data)
+                    for result_key, data in six.iteritems(results)
                 ]
             )
+        # With project names we map the ids back to the project slugs
+        elif key == PROJECT_ALIAS:
+            results = OrderedDict(
+                [(project_slugs[value], data) for value, data in six.iteritems(results)]
+            )
 
         tag_values = [
             TagValue(key=key, value=six.text_type(value), **fix_tag_value_data(data))
diff --git a/tests/snuba/api/endpoints/test_organization_tagkey_values.py b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
index bed36b0de4..56b0c5d13d 100644
--- a/tests/snuba/api/endpoints/test_organization_tagkey_values.py
+++ b/tests/snuba/api/endpoints/test_organization_tagkey_values.py
@@ -146,6 +146,23 @@ class OrganizationTagKeyValuesTest(OrganizationTagKeyTestCase):
         self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=other_project.id)
         self.run_test("project.id", expected=[])
 
+    def test_project_name(self):
+        other_org = self.create_organization()
+        other_project = self.create_project(organization=other_org)
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=self.project.id)
+        self.store_event(data={"timestamp": iso_format(self.min_ago)}, project_id=self.project.id)
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=other_project.id)
+        self.run_test("project", expected=[(self.project.slug, 2)])
+
+    def test_project_name_with_query(self):
+        other_project = self.create_project(organization=self.org, name="test1")
+        other_project2 = self.create_project(organization=self.org, name="test2")
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=other_project.id)
+        self.store_event(data={"timestamp": iso_format(self.min_ago)}, project_id=other_project.id)
+        self.store_event(data={"timestamp": iso_format(self.day_ago)}, project_id=other_project2.id)
+        self.run_test("project", qs_params={"query": "test"}, expected=[("test1", 2), ("test2", 1)])
+        self.run_test("project", qs_params={"query": "1"}, expected=[("test1", 2)])
+
     def test_array_column(self):
         for i in range(3):
             self.store_event(
