commit 4a1800e56bbfd3f4c5347161484396bf246afdc1
Author: Marcos Gaeta <31750075+mgaeta@users.noreply.github.com>
Date:   Mon Jun 1 18:15:43 2020 -0700

    feat(integrations): Request Integration Button (#18747)

diff --git a/src/sentry/api/bases/organization_integrations.py b/src/sentry/api/bases/organization_integrations.py
new file mode 100644
index 0000000000..d2f8d79d39
--- /dev/null
+++ b/src/sentry/api/bases/organization_integrations.py
@@ -0,0 +1,46 @@
+from __future__ import absolute_import
+
+from django.http import Http404
+
+from sentry.api.bases.integration import IntegrationEndpoint
+from sentry.models import Integration, OrganizationIntegration
+
+
+class OrganizationIntegrationBaseEndpoint(IntegrationEndpoint):
+    """
+    OrganizationIntegrationBaseEndpoints expect both Integration and
+    OrganizationIntegration DB entries to exist for a given organization and
+    integration_id.
+    """
+
+    @staticmethod
+    def get_organization_integration(organization, integration_id):
+        """
+        Get just the cross table entry.
+        Note: This will still return migrations that are pending deletion.
+
+        :param organization:
+        :param integration_id:
+        :return:
+        """
+        try:
+            return OrganizationIntegration.objects.get(
+                integration_id=integration_id, organization=organization,
+            )
+        except OrganizationIntegration.DoesNotExist:
+            raise Http404
+
+    @staticmethod
+    def get_integration(organization, integration_id):
+        """
+        Note: The integration may still exist even when the
+        OrganizationIntegration cross table entry has been deleted.
+
+        :param organization:
+        :param integration_id:
+        :return:
+        """
+        try:
+            return Integration.objects.get(id=integration_id, organizations=organization)
+        except Integration.DoesNotExist:
+            raise Http404
diff --git a/src/sentry/api/endpoints/organization_integration_details.py b/src/sentry/api/endpoints/organization_integration_details.py
index db273457e1..28ec8d1f07 100644
--- a/src/sentry/api/endpoints/organization_integration_details.py
+++ b/src/sentry/api/endpoints/organization_integration_details.py
@@ -3,38 +3,28 @@ from __future__ import absolute_import
 from uuid import uuid4
 
 import six
-from django.http import Http404
 
-from sentry.api.bases.organization import OrganizationEndpoint, OrganizationIntegrationsPermission
+from sentry.api.bases.organization import OrganizationIntegrationsPermission
+from sentry.api.bases.organization_integrations import OrganizationIntegrationBaseEndpoint
 from sentry.api.serializers import serialize
+from sentry.models import AuditLogEntryEvent, ObjectStatus, OrganizationIntegration
 from sentry.shared_integrations.exceptions import IntegrationError
-from sentry.models import AuditLogEntryEvent, Integration, ObjectStatus, OrganizationIntegration
 from sentry.tasks.deletion import delete_organization_integration
 from sentry.utils.audit import create_audit_entry
 
 
-class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
+class OrganizationIntegrationDetailsEndpoint(OrganizationIntegrationBaseEndpoint):
     permission_classes = (OrganizationIntegrationsPermission,)
 
     def get(self, request, organization, integration_id):
-        try:
-            integration = OrganizationIntegration.objects.get(
-                integration_id=integration_id, organization=organization
-            )
-        except OrganizationIntegration.DoesNotExist:
-            raise Http404
+        org_integration = self.get_organization_integration(organization, integration_id)
 
-        return self.respond(serialize(integration, request.user))
+        return self.respond(serialize(org_integration, request.user))
 
     def delete(self, request, organization, integration_id):
         # Removing the integration removes the organization
         # integrations and all linked issues.
-        try:
-            org_integration = OrganizationIntegration.objects.get(
-                integration_id=integration_id, organization=organization
-            )
-        except OrganizationIntegration.DoesNotExist:
-            raise Http404
+        org_integration = self.get_organization_integration(organization, integration_id)
 
         updated = OrganizationIntegration.objects.filter(
             id=org_integration.id, status=ObjectStatus.VISIBLE
@@ -61,11 +51,7 @@ class OrganizationIntegrationDetailsEndpoint(OrganizationEndpoint):
         return self.respond(status=204)
 
     def post(self, request, organization, integration_id):
-        try:
-            integration = Integration.objects.get(id=integration_id, organizations=organization)
-        except Integration.DoesNotExist:
-            raise Http404
-
+        integration = self.get_integration(organization, integration_id)
         installation = integration.get_installation(organization.id)
         try:
             installation.update_organization_config(request.data)
diff --git a/src/sentry/api/endpoints/organization_integration_repos.py b/src/sentry/api/endpoints/organization_integration_repos.py
index 5f39a72881..217ade9a2e 100644
--- a/src/sentry/api/endpoints/organization_integration_repos.py
+++ b/src/sentry/api/endpoints/organization_integration_repos.py
@@ -1,16 +1,15 @@
 from __future__ import absolute_import
 
 import six
-from django.http import Http404
 
 from sentry.constants import ObjectStatus
-from sentry.api.bases.organization import OrganizationEndpoint, OrganizationIntegrationsPermission
+from sentry.api.bases.organization import OrganizationIntegrationsPermission
+from sentry.api.bases.organization_integrations import OrganizationIntegrationBaseEndpoint
 from sentry.shared_integrations.exceptions import IntegrationError
 from sentry.integrations.repositories import RepositoryMixin
-from sentry.models import Integration
 
 
-class OrganizationIntegrationReposEndpoint(OrganizationEndpoint):
+class OrganizationIntegrationReposEndpoint(OrganizationIntegrationBaseEndpoint):
     permission_classes = (OrganizationIntegrationsPermission,)
 
     def get(self, request, organization, integration_id):
@@ -24,10 +23,7 @@ class OrganizationIntegrationReposEndpoint(OrganizationEndpoint):
 
         :qparam string search: Name fragment to search repositories by.
         """
-        try:
-            integration = Integration.objects.get(id=integration_id, organizations=organization)
-        except Integration.DoesNotExist:
-            raise Http404
+        integration = self.get_integration(organization, integration_id)
 
         if integration.status == ObjectStatus.DISABLED:
             context = {"repos": []}
diff --git a/src/sentry/api/endpoints/organization_integration_request.py b/src/sentry/api/endpoints/organization_integration_request.py
new file mode 100644
index 0000000000..d81337a527
--- /dev/null
+++ b/src/sentry/api/endpoints/organization_integration_request.py
@@ -0,0 +1,122 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from rest_framework.response import Response
+
+from sentry import integrations
+from sentry.api.bases.organization import OrganizationEndpoint
+from sentry.api.bases import OrganizationPermission
+from sentry.plugins.base import plugins
+from sentry.models import SentryApp
+from sentry.utils.email import MessageBuilder
+from sentry.utils.http import absolute_uri
+
+
+class OrganizationIntegrationRequestPermission(OrganizationPermission):
+    scope_map = {
+        "POST": ["org:read"],
+    }
+
+
+def get_url(organization, provider_type, provider_slug):
+    return absolute_uri(
+        u"/".join(
+            [
+                u"/settings",
+                organization.slug,
+                {
+                    "first_party": "integrations",
+                    "plugin": "plugins",
+                    "sentry_app": "sentry-apps",
+                }.get(provider_type),
+                provider_slug,
+            ]
+        )
+    )
+
+
+def get_provider_name(provider_type, provider_slug):
+    """
+    The things that users think of as "integrations" are actually three
+    different things: integrations, plugins, and sentryapps. A user requesting
+    than an integration be installed only actually knows the "provider" they
+    want and not what type they want. This function looks up the display name
+    for the integration they want installed.
+
+    :param provider_type: One of: "first_party", "plugin", or "sentry_app".
+    :param provider_slug: The unique identifier for the provider.
+    :return: The display name for the provider.
+
+    :raises: ValueError if provider_type is not one of the three from above.
+    :raises: Exception if the provider is not found.
+    """
+    try:
+        if provider_type == "first_party":
+            return integrations.get(provider_slug).name
+        elif provider_type == "plugin":
+            return plugins.get(provider_slug).title
+        elif provider_type == "sentry_app":
+            return SentryApp.objects.get(slug=provider_slug).name
+        else:
+            raise ValueError(u"Invalid providerType {}".format(provider_type))
+    except (KeyError, SentryApp.DoesNotExist):
+        raise Exception(u"Provider {} not found".format(provider_slug))
+
+
+class OrganizationIntegrationRequestEndpoint(OrganizationEndpoint):
+    permission_classes = (OrganizationIntegrationRequestPermission,)
+
+    def post(self, request, organization):
+        """
+        Email the organization owners asking them to install an integration.
+        ````````````````````````````````````````````````````````````````````
+        When a non-owner user views integrations in the integrations directory,
+        they lack the ability to install them themselves. POSTing to this API
+        alerts users with permission that there is demand for this integration.
+
+        :param string providerSlug: Unique string that identifies the integration.
+        :param string providerType: One of: first_party, plugin, sentry_app.
+        :param string message: Optional message from the requester to the owners.
+        """
+        provider_type = request.data.get("providerType")
+        provider_slug = request.data.get("providerSlug")
+        message_option = request.data.get("message", "").strip()
+
+        try:
+            provider_name = get_provider_name(provider_type, provider_slug)
+        except Exception as error:
+            return Response({"detail": error.message}, status=400)
+
+        requester = request.user
+        owners_list = organization.get_owners()
+
+        # If for some reason the user had permissions all along, silently fail.
+        if requester.id in [user.id for user in owners_list]:
+            return Response({"detail": "User can install integration"}, status=200)
+
+        msg = MessageBuilder(
+            subject="Your team member requested the %s integration on Sentry" % provider_name,
+            template="sentry/emails/requests/organization-integration.txt",
+            html_template="sentry/emails/requests/organization-integration.html",
+            type="organization.integration.request",
+            context={
+                "integration_link": get_url(organization, provider_type, provider_slug),
+                "integration_name": provider_name,
+                "message": message_option,
+                "organization_name": organization.name,
+                "requester_name": requester.name or requester.username,
+                "requester_link": absolute_uri(
+                    "/settings/{organization_slug}/members/{user_id}/".format(
+                        organization_slug=organization.slug, user_id=requester.id,
+                    )
+                ),
+                "settings_link": absolute_uri(
+                    reverse("sentry-organization-settings", args=[organization.slug])
+                ),
+            },
+        )
+
+        msg.send_async([user.email for user in owners_list])
+
+        return Response(status=201)
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 92ae707bfb..73604d1fd5 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -101,6 +101,7 @@ from .endpoints.organization_group_index import OrganizationGroupIndexEndpoint
 from .endpoints.organization_index import OrganizationIndexEndpoint
 from .endpoints.organization_integration_details import OrganizationIntegrationDetailsEndpoint
 from .endpoints.organization_integration_repos import OrganizationIntegrationReposEndpoint
+from .endpoints.organization_integration_request import OrganizationIntegrationRequestEndpoint
 from .endpoints.organization_integrations import OrganizationIntegrationsEndpoint
 from .endpoints.organization_issues_new import OrganizationIssuesNewEndpoint
 from .endpoints.organization_issues_resolved_in_release import (
@@ -843,6 +844,11 @@ urlpatterns = [
                     OrganizationMemberIndexEndpoint.as_view(),
                     name="sentry-api-0-organization-member-index",
                 ),
+                url(
+                    r"^(?P<organization_slug>[^\/]+)/integration-requests/$",
+                    OrganizationIntegrationRequestEndpoint.as_view(),
+                    name="sentry-api-0-organization-integration-request",
+                ),
                 url(
                     r"^(?P<organization_slug>[^\/]+)/invite-requests/$",
                     OrganizationInviteRequestIndexEndpoint.as_view(),
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
index e0f445277a..c4006f4b52 100644
--- a/src/sentry/integrations/vsts/integration.py
+++ b/src/sentry/integrations/vsts/integration.py
@@ -73,7 +73,7 @@ FEATURES = [
     FeatureDescription(
         """
         Never forget to close a resolved workitem! Resolving an issue in Sentry
-        will resolve your linked workitems and viceversa.
+        will resolve your linked workitems and vice versa.
         """,
         IntegrationFeatures.ISSUE_SYNC,
     ),
diff --git a/src/sentry/static/sentry/app/components/asyncComponent.tsx b/src/sentry/static/sentry/app/components/asyncComponent.tsx
index 61fca8b7eb..2353c5a642 100644
--- a/src/sentry/static/sentry/app/components/asyncComponent.tsx
+++ b/src/sentry/static/sentry/app/components/asyncComponent.tsx
@@ -6,13 +6,13 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import {WithRouterProps} from 'react-router/lib/withRouter';
 
 import {Client} from 'app/api';
-import {metric} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import AsyncComponentSearchInput from 'app/components/asyncComponentSearchInput';
 import LoadingError from 'app/components/loadingError';
 import LoadingIndicator from 'app/components/loadingIndicator';
 import PermissionDenied from 'app/views/permissionDenied';
 import RouteError from 'app/views/routeError';
+import {metric} from 'app/utils/analytics';
 import getRouteStringFromRoutes from 'app/utils/getRouteStringFromRoutes';
 
 type AsyncComponentProps = {
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index a15712dcaa..d6a46144f1 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -435,6 +435,8 @@ export type AppOrProviderOrPlugin =
   | PluginWithProjectList
   | DocumentIntegration;
 
+export type IntegrationType = 'document' | 'plugin' | 'first_party' | 'sentry_app';
+
 export type DocumentIntegration = {
   slug: string;
   name: string;
diff --git a/src/sentry/static/sentry/app/utils/integrationUtil.tsx b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
index 15a713aaa7..9ba9bafc3c 100644
--- a/src/sentry/static/sentry/app/utils/integrationUtil.tsx
+++ b/src/sentry/static/sentry/app/utils/integrationUtil.tsx
@@ -1,23 +1,24 @@
 import capitalize from 'lodash/capitalize';
 import React from 'react';
 
-import {uniqueId} from 'app/utils/guid';
-import {trackAnalyticsEvent} from 'app/utils/analytics';
+import HookStore from 'app/stores/hookStore';
 import {
-  Organization,
-  SentryAppInstallation,
-  IntegrationInstallationStatus,
-  SentryAppStatus,
-  IntegrationFeature,
   AppOrProviderOrPlugin,
-  SentryApp,
-  PluginWithProjectList,
   DocumentIntegration,
   Integration,
+  IntegrationFeature,
+  IntegrationInstallationStatus,
   IntegrationProvider,
+  IntegrationType,
+  Organization,
+  PluginWithProjectList,
+  SentryApp,
+  SentryAppInstallation,
+  SentryAppStatus,
 } from 'app/types';
 import {Hooks} from 'app/types/hooks';
-import HookStore from 'app/stores/hookStore';
+import {trackAnalyticsEvent} from 'app/utils/analytics';
+import {uniqueId} from 'app/utils/guid';
 
 const INTEGRATIONS_ANALYTICS_SESSION_KEY = 'INTEGRATION_ANALYTICS_SESSION' as const;
 
@@ -72,7 +73,7 @@ export type SingleIntegrationEvent = {
     | 'Integrations: Reauth Start'
     | 'Integrations: Reauth Complete';
   integration: string; //the slug
-  integration_type: 'plugin' | 'first_party' | 'sentry_app' | 'document_integration';
+  integration_type: IntegrationType;
   already_installed?: boolean;
   integration_tab?: 'configurations' | 'overview';
   plan?: string;
@@ -300,7 +301,7 @@ export const convertIntegrationTypeToSnakeCase = (
     case 'sentryApp':
       return 'sentry_app';
     case 'documentIntegration':
-      return 'document_integration';
+      return 'document';
     default:
       return type;
   }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
index cd0643c060..d019260157 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/abstractIntegrationDetailedView.tsx
@@ -1,35 +1,37 @@
+import startCase from 'lodash/startCase';
 import React from 'react';
-import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
-import startCase from 'lodash/startCase';
+import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
-import AsyncComponent from 'app/components/asyncComponent';
-import space from 'app/styles/space';
-import Tag from 'app/views/settings/components/tag';
-import PluginIcon from 'app/plugins/components/pluginIcon';
 import Access from 'app/components/acl/access';
-import Tooltip from 'app/components/tooltip';
 import Alert, {Props as AlertProps} from 'app/components/alert';
+import AsyncComponent from 'app/components/asyncComponent';
 import ExternalLink from 'app/components/links/externalLink';
-import marked, {singleLineRenderer} from 'app/utils/marked';
-import {IconClose, IconGithub, IconGeneric, IconDocs, IconProject} from 'app/icons';
+import {Panel} from 'app/components/panels';
+import Tooltip from 'app/components/tooltip';
+import {IconClose, IconDocs, IconGeneric, IconGithub, IconProject} from 'app/icons';
+import {t} from 'app/locale';
+import PluginIcon from 'app/plugins/components/pluginIcon';
+import space from 'app/styles/space';
 import {
-  Organization,
   IntegrationFeature,
   IntegrationInstallationStatus,
+  IntegrationType,
+  Organization,
   SentryAppStatus,
 } from 'app/types';
 import {
+  getCategories,
   getIntegrationFeatureGate,
-  trackIntegrationEvent,
   SingleIntegrationEvent,
-  getCategories,
+  trackIntegrationEvent,
 } from 'app/utils/integrationUtil';
-import {Panel} from 'app/components/panels';
+import marked, {singleLineRenderer} from 'app/utils/marked';
 import EmptyMessage from 'app/views/settings/components/emptyMessage';
+import Tag from 'app/views/settings/components/tag';
 
 import IntegrationStatus from './integrationStatus';
+import RequestIntegrationButton from './integrationRequest/RequestIntegrationButton';
 
 type Tab = 'overview' | 'configurations';
 
@@ -72,7 +74,7 @@ class AbstractIntegrationDetailedView<
    */
 
   //The analytics type used in analytics which is snake case
-  get integrationType(): 'sentry_app' | 'first_party' | 'plugin' | 'document' {
+  get integrationType(): IntegrationType {
     // Allow children to implement this
     throw new Error('Not implemented');
   }
@@ -109,7 +111,7 @@ class AbstractIntegrationDetailedView<
   }
 
   // Returns an array of RawIntegrationFeatures which is used in feature gating
-  // and displaying what the integraiton does
+  // and displaying what the integration does
   get featureData(): IntegrationFeature[] {
     // Allow children to implement this
     throw new Error('Not implemented');
@@ -181,7 +183,7 @@ class AbstractIntegrationDetailedView<
   }
 
   /***
-   * Actually implmeented methods below*
+   * Actually implemented methods below
    */
 
   get integrationSlug() {
@@ -237,6 +239,17 @@ class AbstractIntegrationDetailedView<
     return getCategories(this.featureData);
   }
 
+  renderRequestIntegrationButton() {
+    return (
+      <RequestIntegrationButton
+        organization={this.props.organization}
+        name={this.integrationName}
+        slug={this.integrationSlug}
+        type={this.integrationType}
+      />
+    );
+  }
+
   renderAddInstallButton(hideButtonIfDisabled = false) {
     const {organization} = this.props;
     const {IntegrationDirectoryFeatures} = getIntegrationFeatureGate();
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
index 8528b58a56..b713667a0f 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegrationButton.tsx
@@ -1,10 +1,11 @@
 import React from 'react';
 
-import {t} from 'app/locale';
-import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import Button from 'app/components/button';
 import Tooltip from 'app/components/tooltip';
-import {IntegrationProvider, Integration, Organization} from 'app/types';
+import {t} from 'app/locale';
+import {Integration, IntegrationProvider, Organization} from 'app/types';
+
+import AddIntegration from './addIntegration';
 
 type Props = {
   provider: IntegrationProvider;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/docIntegrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/docIntegrationDetailedView.tsx
index ba1a2daf15..f629706ac0 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/docIntegrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/docIntegrationDetailedView.tsx
@@ -2,12 +2,12 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import Button from 'app/components/button';
-import space from 'app/styles/space';
+import ExternalLink from 'app/components/links/externalLink';
+import {IconOpen} from 'app/icons';
 import {t} from 'app/locale';
+import space from 'app/styles/space';
 import {DocumentIntegration} from 'app/types';
 import withOrganization from 'app/utils/withOrganization';
-import ExternalLink from 'app/components/links/externalLink';
-import {IconOpen} from 'app/icons';
 
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
 import {documentIntegrations} from './constants';
@@ -89,7 +89,7 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
     );
   }
 
-  //no configuratons
+  // No configurations.
   renderConfigurations() {
     return null;
   }
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
index ae6af19c91..bc4335b47a 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/installedIntegration.tsx
@@ -1,20 +1,21 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {t} from 'app/locale';
 import Access from 'app/components/acl/access';
 import Alert from 'app/components/alert';
 import Button from 'app/components/button';
+import CircleIndicator from 'app/components/circleIndicator';
 import Confirm from 'app/components/confirm';
-import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
 import Tooltip from 'app/components/tooltip';
+import {IconDelete, IconSettings, IconWarning} from 'app/icons';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
 import {IntegrationProvider, Integration, Organization, ObjectStatus} from 'app/types';
 import {SingleIntegrationEvent} from 'app/utils/integrationUtil';
-import CircleIndicator from 'app/components/circleIndicator';
 import theme from 'app/utils/theme';
-import space from 'app/styles/space';
-import {IconDelete, IconSettings, IconWarning} from 'app/icons';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
+
+import AddIntegrationButton from './addIntegrationButton';
+import IntegrationItem from './integrationItem';
 
 const CONFIGURABLE_FEATURES = ['commits', 'alert-rule'];
 
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
index cf914aecdc..171a140177 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationDetailedView.tsx
@@ -1,23 +1,23 @@
+import keyBy from 'lodash/keyBy';
 import React from 'react';
 import styled from '@emotion/styled';
-import keyBy from 'lodash/keyBy';
 
-import {IconWarning} from 'app/icons';
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {RequestOptions} from 'app/api';
 import Feature from 'app/components/acl/feature';
 import Alert from 'app/components/alert';
-import {Integration, IntegrationProvider} from 'app/types';
-import {RequestOptions} from 'app/api';
-import {addErrorMessage} from 'app/actionCreators/indicator';
+import Button from 'app/components/button';
+import {IconWarning} from 'app/icons';
 import {t} from 'app/locale';
 import space from 'app/styles/space';
-import AddIntegrationButton from 'app/views/organizationIntegrations/addIntegrationButton';
-import Button from 'app/components/button';
-import InstalledIntegration from 'app/views/organizationIntegrations/installedIntegration';
-import withOrganization from 'app/utils/withOrganization';
+import {Integration, IntegrationProvider} from 'app/types';
 import {sortArray} from 'app/utils';
 import {isSlackWorkspaceApp, getReauthAlertText} from 'app/utils/integrationUtil';
+import withOrganization from 'app/utils/withOrganization';
 
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
+import AddIntegrationButton from './addIntegrationButton';
+import InstalledIntegration from './installedIntegration';
 
 type State = {
   configurations: Integration[];
@@ -197,8 +197,8 @@ class IntegrationDetailedView extends AbstractIntegrationDetailedView<
         </Button>
       );
     }
-    // should never happen but we can't return undefined without some refactoring
-    return <span />;
+
+    return this.renderRequestIntegrationButton();
   }
 
   renderConfigurations() {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx
new file mode 100644
index 0000000000..5414795d8a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationButton.tsx
@@ -0,0 +1,73 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {openModal} from 'app/actionCreators/modal';
+import Button from 'app/components/button';
+import {t} from 'app/locale';
+import space from 'app/styles/space';
+import {IntegrationType, Organization} from 'app/types';
+
+import RequestIntegrationModal from './RequestIntegrationModal';
+
+type Props = {
+  organization: Organization;
+  name: string;
+  slug: string;
+  type: IntegrationType;
+};
+type State = {
+  isOpen: boolean;
+  isSent: boolean;
+};
+
+export default class RequestIntegrationButton extends React.Component<Props, State> {
+  state = {
+    isOpen: false,
+    isSent: false,
+  };
+
+  openRequestModal() {
+    this.setState({isOpen: true});
+    openModal(
+      renderProps => (
+        <RequestIntegrationModal
+          {...this.props}
+          {...renderProps}
+          onSuccess={() => this.setState({isSent: true})}
+        />
+      ),
+      {
+        onClose: () => this.setState({isOpen: false}),
+      }
+    );
+  }
+
+  render() {
+    const {isOpen, isSent} = this.state;
+
+    let buttonText;
+    if (isOpen) {
+      buttonText = t('Requesting Installation');
+    } else if (isSent) {
+      buttonText = t('Installation Requested');
+    } else {
+      buttonText = t('Request Installation');
+    }
+
+    return (
+      <StyledRequestIntegrationButton
+        data-test-id="request-integration-button"
+        disabled={isOpen || isSent}
+        onClick={() => this.openRequestModal()}
+        priority="primary"
+        size="small"
+      >
+        {buttonText}
+      </StyledRequestIntegrationButton>
+    );
+  }
+}
+
+const StyledRequestIntegrationButton = styled(Button)`
+  margin-left: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx
new file mode 100644
index 0000000000..1dd34ec9da
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRequest/RequestIntegrationModal.tsx
@@ -0,0 +1,108 @@
+import React from 'react';
+
+import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
+import {ModalRenderProps} from 'app/actionCreators/modal';
+import AsyncComponent from 'app/components/asyncComponent';
+import Button from 'app/components/button';
+import {t} from 'app/locale';
+import TextareaField from 'app/views/settings/components/forms/textareaField';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+
+import RequestIntegrationButton from './RequestIntegrationButton';
+
+type Props = {
+  onSuccess: () => void;
+} & RequestIntegrationButton['props'] &
+  ModalRenderProps &
+  AsyncComponent['props'];
+type State = {
+  isSending: boolean;
+  message: string;
+} & AsyncComponent['state'];
+
+/**
+ * This modal serves as a non-owner's confirmation step before sending
+ * organization owners an email requesting a new organization integration. It
+ * lets the user attach an optional message to be included in the email.
+ */
+export default class RequestIntegrationModal extends AsyncComponent<Props, State> {
+  state = {
+    ...this.getDefaultState(),
+    isSending: false,
+    message: '',
+  };
+
+  sendRequest = () => {
+    const {organization, slug, type} = this.props;
+    const {message} = this.state;
+
+    const endpoint = `/organizations/${organization.slug}/integration-requests/`;
+    this.api.request(endpoint, {
+      method: 'POST',
+      data: {
+        providerSlug: slug,
+        providerType: type,
+        message,
+      },
+      success: this.handleSubmitSuccess,
+      error: this.handleSubmitError,
+    });
+  };
+
+  handleSubmitSuccess = () => {
+    const {closeModal, onSuccess} = this.props;
+
+    addSuccessMessage(t('Request successfully sent.'));
+    this.setState({isSending: false});
+    onSuccess();
+    closeModal();
+  };
+
+  handleSubmitError = () => {
+    addErrorMessage('Error sending the request');
+    this.setState({isSending: false});
+  };
+
+  render() {
+    const {Header, Body, Footer, name} = this.props;
+
+    const buttonText = this.state.isSending ? t('Sending Request') : t('Send Request');
+
+    return (
+      <React.Fragment>
+        <Header>
+          <h4>{t('Request %s Installation', name)}</h4>
+        </Header>
+        <Body>
+          <TextBlock>
+            {t(
+              'Looks like your organization owner, manager, or admin needs to install %s. Want to send them a request?.',
+              name
+            )}
+          </TextBlock>
+          <TextareaField
+            inline={false}
+            flexibleControlStateSize
+            stacked
+            label={t(
+              '(Optional) You’ve got good reasons for installing the %s Integration. Share them with your organization owner.',
+              name
+            )}
+            name="message"
+            type="string"
+            onChange={value => this.setState({message: value})}
+            placeholder={t('Optional message…')}
+          />
+          <TextBlock>
+            {t(
+              'When you click “Send Request”, we’ll email your request to your organization’s owners. So just keep that in mind.'
+            )}
+          </TextBlock>
+        </Body>
+        <Footer>
+          <Button onClick={this.sendRequest}>{buttonText}</Button>
+        </Footer>
+      </React.Fragment>
+    );
+  }
+}
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
index c268f26682..07ee76f0fe 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/pluginDetailedView.tsx
@@ -1,16 +1,16 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
-import {PluginWithProjectList, PluginProjectItem} from 'app/types';
-import space from 'app/styles/space';
-import withOrganization from 'app/utils/withOrganization';
-import Button from 'app/components/button';
-import InstalledPlugin from 'app/views/organizationIntegrations/installedPlugin';
 import * as modal from 'app/actionCreators/modal';
+import Button from 'app/components/button';
 import ContextPickerModal from 'app/components/contextPickerModal';
 import {t} from 'app/locale';
+import space from 'app/styles/space';
+import {PluginWithProjectList, PluginProjectItem} from 'app/types';
+import withOrganization from 'app/utils/withOrganization';
 
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
+import InstalledPlugin from './installedPlugin';
 
 type State = {
   plugins: PluginWithProjectList[];
@@ -54,9 +54,7 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
   }
 
   get integrationName() {
-    const isLegacy = this.plugin.isHidden;
-    const displayName = `${this.plugin.name} ${isLegacy ? '(Legacy)' : ''}`;
-    return displayName;
+    return `${this.plugin.name}${this.plugin.isHidden ? ' (Legacy)' : ''}`;
   }
 
   get featureData() {
@@ -135,17 +133,21 @@ class PluginDetailedView extends AbstractIntegrationDetailedView<
   }
 
   renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
-    return (
-      <AddButton
-        data-test-id="install-button"
-        disabled={disabledFromFeatures || !userHasAccess}
-        onClick={this.handleAddToProject}
-        size="small"
-        priority="primary"
-      >
-        {t('Add to Project')}
-      </AddButton>
-    );
+    if (userHasAccess) {
+      return (
+        <AddButton
+          data-test-id="install-button"
+          disabled={disabledFromFeatures}
+          onClick={this.handleAddToProject}
+          size="small"
+          priority="primary"
+        >
+          {t('Add to Project')}
+        </AddButton>
+      );
+    }
+
+    return this.renderRequestIntegrationButton();
   }
 
   renderConfigurations() {
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
index c6375a77dc..7052f9beba 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/sentryAppDetailedView.tsx
@@ -2,26 +2,26 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import {addErrorMessage, addSuccessMessage} from 'app/actionCreators/indicator';
-import Button from 'app/components/button';
-import space from 'app/styles/space';
-import {t, tct} from 'app/locale';
-import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
+import {openModal} from 'app/actionCreators/modal';
 import {
   installSentryApp,
   uninstallSentryApp,
 } from 'app/actionCreators/sentryAppInstallations';
-import {toPermissions} from 'app/utils/consolidatedScopes';
+import Button from 'app/components/button';
 import CircleIndicator from 'app/components/circleIndicator';
-import {IntegrationFeature, SentryApp, SentryAppInstallation} from 'app/types';
-import withOrganization from 'app/utils/withOrganization';
-import SplitInstallationIdModal from 'app/views/organizationIntegrations/SplitInstallationIdModal';
-import {openModal} from 'app/actionCreators/modal';
-import {getSentryAppInstallStatus} from 'app/utils/integrationUtil';
 import Confirm from 'app/components/confirm';
 import {IconSubtract} from 'app/icons';
+import {t, tct} from 'app/locale';
+import space from 'app/styles/space';
+import {IntegrationFeature, SentryApp, SentryAppInstallation} from 'app/types';
+import {toPermissions} from 'app/utils/consolidatedScopes';
+import {getSentryAppInstallStatus} from 'app/utils/integrationUtil';
+import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import {recordInteraction} from 'app/utils/recordSentryAppInteraction';
+import withOrganization from 'app/utils/withOrganization';
 
 import AbstractIntegrationDetailedView from './abstractIntegrationDetailedView';
+import SplitInstallationIdModal from './SplitInstallationIdModal';
 
 type State = {
   sentryApp: SentryApp;
@@ -238,33 +238,41 @@ class SentryAppDetailedView extends AbstractIntegrationDetailedView<
 
   renderTopButton(disabledFromFeatures: boolean, userHasAccess: boolean) {
     const install = this.install;
-    return !install ? (
-      <InstallButton
-        size="small"
-        priority="primary"
-        disabled={disabledFromFeatures || !userHasAccess}
-        onClick={() => this.handleInstall()}
-        style={{marginLeft: space(1)}}
-        data-test-id="install-button"
-      >
-        {t('Accept & Install')}
-      </InstallButton>
-    ) : (
-      <Confirm
-        message={tct('Are you sure you want to remove the [slug] installation?', {
-          slug: this.integrationSlug,
-        })}
-        priority="danger"
-        onConfirm={() => this.handleUninstall(install)} //called when the user confirms the action
-        onConfirming={this.recordUninstallClicked} //called when the confirm modal opens
-        disabled={!userHasAccess}
-      >
-        <StyledUninstallButton size="small" data-test-id="sentry-app-uninstall">
-          <IconSubtract isCircled style={{marginRight: space(0.75)}} />
-          {t('Uninstall')}
-        </StyledUninstallButton>
-      </Confirm>
-    );
+    if (install) {
+      return (
+        <Confirm
+          disabled={!userHasAccess}
+          message={tct('Are you sure you want to remove the [slug] installation?', {
+            slug: this.integrationSlug,
+          })}
+          onConfirm={() => this.handleUninstall(install)} //called when the user confirms the action
+          onConfirming={this.recordUninstallClicked} //called when the confirm modal opens
+          priority="danger"
+        >
+          <StyledUninstallButton size="small" data-test-id="sentry-app-uninstall">
+            <IconSubtract isCircled style={{marginRight: space(0.75)}} />
+            {t('Uninstall')}
+          </StyledUninstallButton>
+        </Confirm>
+      );
+    }
+
+    if (userHasAccess) {
+      return (
+        <InstallButton
+          data-test-id="install-button"
+          disabled={disabledFromFeatures}
+          onClick={() => this.handleInstall()}
+          priority="primary"
+          size="small"
+          style={{marginLeft: space(1)}}
+        >
+          {t('Accept & Install')}
+        </InstallButton>
+      );
+    }
+
+    return this.renderRequestIntegrationButton();
   }
 
   //no configurations for sentry apps
diff --git a/src/sentry/templates/sentry/emails/requests/organization-integration.html b/src/sentry/templates/sentry/emails/requests/organization-integration.html
new file mode 100644
index 0000000000..3f8f4f0d73
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/requests/organization-integration.html
@@ -0,0 +1,29 @@
+{% extends "sentry/emails/base.html" %}
+
+{% load i18n %}
+
+{% block main %}
+  <p>
+    Seems like your team could use some new tools. {{ requester_name }} from
+    {{ organization_name }} requested the installation of {{ integration_name }}.
+    {% if message %}
+        They’ve included some additional context:
+        <pre>{{ message }}</pre>
+    {% endif %}
+  </p>
+  <p>
+    <a href="{{ integration_link }}" class="btn">Install {{ integration_name }}</a>
+  </p>
+  <p>
+    If you’re not up for installation, you can
+    <a href="{{ requester_link }}">change {{ requester_name }}’s role</a>
+    to organization owner, manager, or admin. You can learn more about the
+    wonderful world of permissions in
+    <a href="https://docs.sentry.io/accounts/membership/">our docs</a>.
+  </p>
+  <p>Let’s get integrated.</p>
+  <p class="via">
+    You are receiving this email because you’re listed as an organization Owner or Manager.
+    Requests to join your organization can be disabled in <a href="{{ settings_link }}">Organization Settings</a>.
+  </p>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/emails/requests/organization-integration.txt b/src/sentry/templates/sentry/emails/requests/organization-integration.txt
new file mode 100644
index 0000000000..f6791fa116
--- /dev/null
+++ b/src/sentry/templates/sentry/emails/requests/organization-integration.txt
@@ -0,0 +1,16 @@
+Seems like your team could use some new tools. {{ requester_name }} from {{ organization_name }} requested the installation of {{ integration_name }}.
+{% if message %}
+They’ve included some additional context:
+    {{ message }}
+{% endif %}
+Install {{ provider_name }} by clicking the link below:
+
+    {{ provider_link }}
+
+If you’re not up for installation, you can change {{ requester_name }}’s role to organization owner, manager, or admin here: {{ requester_link }}.
+You can learn more about the wonderful world of permissions in our docs: https://docs.sentry.io/accounts/membership/.
+
+Let’s get integrated.
+
+You are receiving this email because you’re listed as an organization Owner or Manager.
+Requests to join your organization can be disabled in Organization Settings: {{ settings_link }}.
diff --git a/src/sentry/utils/email.py b/src/sentry/utils/email.py
index 13bddc3792..ddd30fc7a8 100644
--- a/src/sentry/utils/email.py
+++ b/src/sentry/utils/email.py
@@ -44,7 +44,7 @@ logger = logging.getLogger("sentry.mail")
 def inline_css(value):
     tree = lxml.html.document_fromstring(value)
     toronado.inline(tree)
-    # CSS media query support is inconistent when the DOCTYPE declaration is
+    # CSS media query support is inconsistent when the DOCTYPE declaration is
     # missing, so we force it to HTML5 here.
     return lxml.html.tostring(tree, doctype="<!DOCTYPE html>")
 
diff --git a/tests/js/spec/utils/withExperiment.spec.jsx b/tests/js/spec/utils/withExperiment.spec.jsx
index 836df86da7..1fdd41f2b9 100644
--- a/tests/js/spec/utils/withExperiment.spec.jsx
+++ b/tests/js/spec/utils/withExperiment.spec.jsx
@@ -62,7 +62,7 @@ describe('withConfig HoC', function() {
     expect(logExperiment).toHaveBeenCalledWith({key: 'orgExperiment', organization});
   });
 
-  it('deffers logging when injectLogExperiment is true', function() {
+  it('defers logging when injectLogExperiment is true', function() {
     const Container = withExperiment(MyComponent, {
       experiment: 'orgExperiment',
       injectLogExperiment: true,
diff --git a/tests/sentry/api/endpoints/test_organization_integration_request.py b/tests/sentry/api/endpoints/test_organization_integration_request.py
new file mode 100644
index 0000000000..412d9c74a2
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_organization_integration_request.py
@@ -0,0 +1,53 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+
+
+class OrganizationIntegrationRequestTest(APITestCase):
+    """Unit tests for emailing organization owners asking them to install an integration."""
+
+    endpoint = "sentry-api-0-organization-integration-request"
+    method = "post"
+
+    def setUp(self):
+        self.owner = self.create_user(email="owner@example.com", is_superuser=True)
+        self.member = self.create_user(email="member@example.com")
+        self.org = self.create_organization(owner=self.owner, name="My Org")
+        self.create_member(user=self.member, organization=self.org, role="member")
+
+    def test_integration_request(self):
+        self.login_as(user=self.member)
+        response = self.get_response(
+            self.org.slug, providerSlug="github", providerType="first_party",
+        )
+
+        assert response.status_code == 201, response.content
+
+    def test_integration_request_with_invalid_plugin(self):
+        self.login_as(user=self.member)
+        response = self.get_response(self.org.slug, providerSlug="ERROR", providerType="plugin",)
+
+        assert response.status_code == 400, response.content
+
+    def test_integration_request_with_invalid_sentryapp(self):
+        self.login_as(user=self.member)
+        response = self.get_response(
+            self.org.slug, providerSlug="ERROR", providerType="sentry_app",
+        )
+
+        assert response.status_code == 400, response.content
+
+    def test_integration_request_as_owner(self):
+        self.login_as(user=self.owner)
+        response = self.get_response(
+            self.org.slug, providerSlug="github", providerType="first_party",
+        )
+        assert response.status_code == 200, response.content
+        assert response.data["detail"] == "User can install integration"
+
+    def test_integration_request_without_permissions(self):
+        self.login_as(user=self.create_user(email="nonmember@example.com"))
+        response = self.get_response(
+            self.org.slug, providerSlug="github", providerType="first_party",
+        )
+        assert response.status_code == 403, response.content
