commit f9bd9d595cbb9a74a19490cee492295259de34ca
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Mon Jun 18 16:57:59 2018 -0700

    feat(integrations): Add sentry to external issue assignee sync core (#8751)

diff --git a/src/sentry/integrations/example/integration.py b/src/sentry/integrations/example/integration.py
index c5ce801196..a7bfb5e3e6 100644
--- a/src/sentry/integrations/example/integration.py
+++ b/src/sentry/integrations/example/integration.py
@@ -62,6 +62,9 @@ class ExampleIntegration(Integration, IssueSyncMixin):
             'description': 'This is a test external issue description',
         }
 
+    def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
+        pass
+
 
 class ExampleIntegrationProvider(IntegrationProvider):
     """
diff --git a/src/sentry/integrations/issues.py b/src/sentry/integrations/issues.py
index 08c4c0eb0d..68b5fac68a 100644
--- a/src/sentry/integrations/issues.py
+++ b/src/sentry/integrations/issues.py
@@ -97,3 +97,10 @@ class IssueSyncMixin(object):
         >>>     }
         """
         raise NotImplementedError
+
+    def sync_assignee_outbound(self, external_issue, user, assign=True, **kwargs):
+        """
+        Propagate a sentry issue's assignee to a linked issue's assignee.
+        If user is None, assume the issue has been unassigned
+        """
+        raise NotImplementedError
diff --git a/src/sentry/models/groupassignee.py b/src/sentry/models/groupassignee.py
index 1f7a8a2c42..fbb7b44371 100644
--- a/src/sentry/models/groupassignee.py
+++ b/src/sentry/models/groupassignee.py
@@ -18,8 +18,28 @@ from sentry.models.activity import Activity
 from sentry.signals import issue_assigned
 
 
+def sync_group_assignee(group, user_id, assign=True):
+    from sentry.tasks.integrations import sync_assignee_outbound
+    from sentry.models import GroupLink
+    external_issue_ids = GroupLink.objects.filter(
+        project_id=group.project_id,
+        group_id=group.id,
+        linked_type=GroupLink.LinkedType.issue,
+    ).values_list('linked_id', flat=True)
+
+    for external_issue_id in external_issue_ids:
+        sync_assignee_outbound.apply_async(
+            kwargs={
+                'external_issue_id': external_issue_id,
+                'user_id': user_id,
+                'assign': assign,
+            }
+        )
+
+
 class GroupAssigneeManager(BaseManager):
     def assign(self, group, assigned_to, acting_user=None):
+        from sentry import features
         from sentry.models import User, Team, GroupSubscription, GroupSubscriptionReason
 
         GroupSubscription.objects.subscribe_actor(
@@ -75,7 +95,13 @@ class GroupAssigneeManager(BaseManager):
             )
             activity.send_notification()
 
+        # sync Sentry assignee to external issues
+        if assignee_type == 'user' and features.has(
+                'organizations:internal-catchall', group.organization, actor=acting_user):
+            sync_group_assignee(group, assigned_to.id, assign=True)
+
     def deassign(self, group, acting_user=None):
+        from sentry import features
         affected = GroupAssignee.objects.filter(
             group=group,
         )[:1].count()
@@ -92,6 +118,10 @@ class GroupAssigneeManager(BaseManager):
             )
             activity.send_notification()
 
+        # sync Sentry assignee to external issues
+        if features.has('organizations:internal-catchall', group.organization, actor=acting_user):
+            sync_group_assignee(group, None, assign=False)
+
 
 class GroupAssignee(Model):
     """
diff --git a/src/sentry/tasks/integrations.py b/src/sentry/tasks/integrations.py
index 8de13b850c..ddff2011a5 100644
--- a/src/sentry/tasks/integrations.py
+++ b/src/sentry/tasks/integrations.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from sentry.tasks.base import instrumented_task, retry
 
-from sentry.models import ExternalIssue, Integration
+from sentry.models import ExternalIssue, Integration, User
 from sentry.integrations.exceptions import IntegrationError
 
 
@@ -30,3 +30,22 @@ def post_comment(external_issue_id, data, **kwargs):
 @retry(on=(IntegrationError,))
 def sync_metadata(installation):
     installation.sync_metadata()
+
+
+@instrumented_task(
+    name='sentry.tasks.integrations.sync_assignee_outbound',
+    queue='integrations',
+    default_retry_delay=60 * 5,
+    max_retries=5
+)
+@retry(exclude=(ExternalIssue.DoesNotExist, Integration.DoesNotExist, User.DoesNotExist))
+def sync_assignee_outbound(external_issue_id, user_id, assign, **kwargs):
+    # sync Sentry assignee to an external issue
+    external_issue = ExternalIssue.objects.get(id=external_issue_id)
+    integration = Integration.objects.get(id=external_issue.integration_id)
+    # assume unassign if None
+    if user_id is None:
+        user = None
+    else:
+        user = User.objects.get(id=user_id)
+    integration.get_installation().sync_assignee_outbound(external_issue, user, assign=assign)
diff --git a/tests/sentry/models/test_groupassignee.py b/tests/sentry/models/test_groupassignee.py
index ae3ee7016b..b9fc9b1c39 100644
--- a/tests/sentry/models/test_groupassignee.py
+++ b/tests/sentry/models/test_groupassignee.py
@@ -1,10 +1,12 @@
 from __future__ import absolute_import
 
+import mock
 import pytest
 import six
 
+from sentry.integrations.example.integration import ExampleIntegration
+from sentry.models import GroupAssignee, Activity, Integration, GroupLink, ExternalIssue
 from sentry.testutils import TestCase
-from sentry.models import GroupAssignee, Activity
 
 
 class GroupAssigneeTestCase(TestCase):
@@ -99,3 +101,91 @@ class GroupAssigneeTestCase(TestCase):
         assert activity[1].data['assignee'] == six.text_type(self.team.id)
         assert activity[1].data['assigneeEmail'] is None
         assert activity[1].data['assigneeType'] == 'team'
+
+    @mock.patch.object(ExampleIntegration, 'sync_assignee_outbound')
+    def test_assignee_sync_outbound_assign(self, mock_sync_assignee_outbound):
+        group = self.group
+        integration = Integration.objects.create(
+            provider='example',
+            external_id='123456',
+        )
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=group.organization.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )
+
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        with self.feature('organizations:internal-catchall'):
+            with self.tasks():
+                GroupAssignee.objects.assign(self.group, self.user)
+
+                mock_sync_assignee_outbound.assert_called_with(
+                    external_issue, self.user, assign=True)
+
+                assert GroupAssignee.objects.filter(
+                    project=self.group.project,
+                    group=self.group,
+                    user=self.user,
+                    team__isnull=True,
+                ).exists()
+
+                activity = Activity.objects.get(
+                    project=self.group.project,
+                    group=self.group,
+                    type=Activity.ASSIGNED,
+                )
+
+                assert activity.data['assignee'] == six.text_type(self.user.id)
+                assert activity.data['assigneeEmail'] == self.user.email
+                assert activity.data['assigneeType'] == 'user'
+
+    @mock.patch.object(ExampleIntegration, 'sync_assignee_outbound')
+    def test_assignee_sync_outbound_unassign(self, mock_sync_assignee_outbound):
+        group = self.group
+        integration = Integration.objects.create(
+            provider='example',
+            external_id='123456',
+        )
+
+        external_issue = ExternalIssue.objects.create(
+            organization_id=group.organization.id,
+            integration_id=integration.id,
+            key='APP-123',
+        )
+
+        GroupLink.objects.create(
+            group_id=group.id,
+            project_id=group.project_id,
+            linked_type=GroupLink.LinkedType.issue,
+            linked_id=external_issue.id,
+            relationship=GroupLink.Relationship.references,
+        )
+
+        GroupAssignee.objects.assign(self.group, self.user)
+
+        with self.feature('organizations:internal-catchall'):
+            with self.tasks():
+                GroupAssignee.objects.deassign(self.group)
+                mock_sync_assignee_outbound.assert_called_with(external_issue, None, assign=False)
+
+                assert not GroupAssignee.objects.filter(
+                    project=self.group.project,
+                    group=self.group,
+                    user=self.user,
+                    team__isnull=True,
+                ).exists()
+
+                assert Activity.objects.filter(
+                    project=self.group.project,
+                    group=self.group,
+                    type=Activity.UNASSIGNED,
+                ).exists()
