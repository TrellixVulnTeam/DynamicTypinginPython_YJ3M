commit c7801760743dd9eac49618646d0c928624628261
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 13 15:09:06 2015 -0700

    Expand tests for SSO

diff --git a/src/sentry/auth/helper.py b/src/sentry/auth/helper.py
index d33d827329..87f58e89de 100644
--- a/src/sentry/auth/helper.py
+++ b/src/sentry/auth/helper.py
@@ -141,8 +141,9 @@ class AuthHelper(object):
         return self.request.build_absolute_uri(reverse('sentry-auth-sso'))
 
     def clear_session(self):
-        del self.request.session['auth']
-        self.request.session.is_modified = True
+        if 'auth' in self.request.session:
+            del self.request.session['auth']
+            self.request.session.is_modified = True
 
     def next_step(self):
         # TODO: this needs to somehow embed the next step
@@ -282,7 +283,7 @@ class AuthHelper(object):
         except AuthIdentity.DoesNotExist:
             user = User.objects.create(
                 email=identity['email'],
-                first_name=identity.get('name'),
+                first_name=identity.get('name', ''),
                 is_managed=True,
             )
 
diff --git a/src/sentry/auth/providers/dummy.py b/src/sentry/auth/providers/dummy.py
index 15a84e5abf..73c3709324 100644
--- a/src/sentry/auth/providers/dummy.py
+++ b/src/sentry/auth/providers/dummy.py
@@ -21,7 +21,11 @@ class DummyProvider(Provider):
         return [AskEmail()]
 
     def build_identity(self, state):
-        return state['email']
+        return {
+            'name': 'Dummy',
+            'id': state['email'],
+            'email': state['email'],
+        }
 
     def refresh_identity(self, auth_identity):
         pass
diff --git a/tests/sentry/web/frontend/test_organization_auth_login.py b/tests/sentry/web/frontend/test_organization_auth_login.py
index 1e1bc4facc..cdfdd6120e 100644
--- a/tests/sentry/web/frontend/test_organization_auth_login.py
+++ b/tests/sentry/web/frontend/test_organization_auth_login.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import AuthProvider
+from sentry.models import AuthIdentity, AuthProvider, OrganizationMember
 from sentry.testutils import AuthProviderTestCase
 
 
@@ -45,3 +45,75 @@ class OrganizationAuthSettingsTest(AuthProviderTestCase):
 
         assert resp.context['provider_key'] == 'dummy'
         assert not resp.context['CAN_REGISTER']
+
+    def test_basic_provider_flow_as_anonymous(self):
+        organization = self.create_organization(name='foo', owner=self.user)
+        team = self.create_team(organization=organization)
+        project = self.create_project(team=team)
+        auth_provider = AuthProvider.objects.create(
+            organization=organization,
+            provider='dummy',
+        )
+
+        path = reverse('sentry-auth-organization', args=[organization.slug])
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 200
+        assert self.provider.TEMPLATE in resp.content
+
+        resp = self.client.post(path, {'email': 'foo@example.com'})
+
+        assert resp.status_code == 302
+
+        auth_identity = AuthIdentity.objects.get(
+            auth_provider=auth_provider,
+        )
+
+        user = auth_identity.user
+        assert user.email == 'foo@example.com'
+
+        member = OrganizationMember.objects.get(
+            organization=organization,
+            user=user,
+        )
+
+        assert getattr(member.flags, 'sso:linked')
+        assert not getattr(member.flags, 'sso:invalid')
+
+    # def test_basic_provider_flow_as_existing_user(self):
+    #     organization = self.create_organization(name='foo', owner=self.user)
+    #     team = self.create_team(organization=organization)
+    #     project = self.create_project(team=team)
+    #     auth_provider = AuthProvider.objects.create(
+    #         organization=organization,
+    #         provider='dummy',
+    #     )
+    #     user = self.create_user('bar@example.com')
+
+    #     path = reverse('sentry-auth-organization', args=[organization.slug])
+
+    #     self.login_as(user)
+
+    #     resp = self.client.post(path)
+
+    #     assert resp.status_code == 200
+    #     assert self.provider.TEMPLATE in resp.content
+
+    #     resp = self.client.post(path, {'email': 'baz@example.com'})
+
+    #     assert resp.status_code == 302
+
+    #     auth_identity = AuthIdentity.objects.get(
+    #         auth_provider=auth_provider,
+    #     )
+
+    #     assert auth_identity.user == user
+
+    #     member = OrganizationMember.objects.get(
+    #         organization=organization,
+    #         user=user,
+    #     )
+
+    #     assert getattr(member.flags, 'sso:linked')
+    #     assert not getattr(member.flags, 'sso:invalid')
