commit a1604c64c434095c701305e2391d1f9e39b0f8c7
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Apr 25 09:49:19 2018 -0700

    feat(api): Restore HKPK security reports
    
    This reverts and adapts a3d6ea672cc312a80585e9c701d60fde62cda7ea.

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 3d62890101..5c554aeab8 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -837,6 +837,7 @@ SENTRY_SMTP_PORT = 1025
 
 SENTRY_INTERFACES = {
     'csp': 'sentry.interfaces.security.Csp',
+    'hpkp': 'sentry.interfaces.security.Hpkp',
     'expectct': 'sentry.interfaces.security.ExpectCT',
     'expectstaple': 'sentry.interfaces.security.ExpectStaple',
     'device': 'sentry.interfaces.device.Device',
diff --git a/src/sentry/coreapi.py b/src/sentry/coreapi.py
index 55028c6b7e..cd22abff14 100644
--- a/src/sentry/coreapi.py
+++ b/src/sentry/coreapi.py
@@ -378,7 +378,7 @@ class MinidumpApiHelper(ClientApiHelper):
 
 class SecurityApiHelper(ClientApiHelper):
 
-    report_interfaces = ('sentry.interfaces.Csp', 'expectct', 'expectstaple')
+    report_interfaces = ('sentry.interfaces.Csp', 'hpkp', 'expectct', 'expectstaple')
 
     def origin_from_request(self, request):
         # In the case of security reports, the origin is not available at the
diff --git a/src/sentry/eventtypes/__init__.py b/src/sentry/eventtypes/__init__.py
index 47b3c9d59f..609be3a8e0 100644
--- a/src/sentry/eventtypes/__init__.py
+++ b/src/sentry/eventtypes/__init__.py
@@ -1,13 +1,14 @@
 from __future__ import absolute_import
 
 from .base import DefaultEvent
-from .security import CspEvent, ExpectCTEvent, ExpectStapleEvent
+from .security import CspEvent, HpkpEvent, ExpectCTEvent, ExpectStapleEvent
 from .error import ErrorEvent
 from .manager import EventTypeManager
 
 # types are ordered by priority, default should always be last
 default_manager = EventTypeManager()
 default_manager.register(CspEvent)
+default_manager.register(HpkpEvent)
 default_manager.register(ExpectCTEvent)
 default_manager.register(ExpectStapleEvent)
 default_manager.register(ErrorEvent)
diff --git a/src/sentry/eventtypes/security.py b/src/sentry/eventtypes/security.py
index 8225039659..c854467b56 100644
--- a/src/sentry/eventtypes/security.py
+++ b/src/sentry/eventtypes/security.py
@@ -26,6 +26,24 @@ class CspEvent(BaseEvent):
         return metadata['message']
 
 
+class HpkpEvent(BaseEvent):
+    key = 'hpkp'
+
+    def has_metadata(self):
+        return 'hpkp' in self.data
+
+    def get_metadata(self):
+        from sentry.interfaces.security import Hpkp
+        hpkp = Hpkp.to_python(self.data['hpkp'])
+        return {
+            'origin': hpkp.get_origin(),
+            'message': hpkp.get_message(),
+        }
+
+    def to_string(self, metadata):
+        return metadata['message']
+
+
 class ExpectCTEvent(BaseEvent):
     key = 'expectct'
 
diff --git a/src/sentry/interfaces/schemas.py b/src/sentry/interfaces/schemas.py
index f29c3018a3..2c077553ff 100644
--- a/src/sentry/interfaces/schemas.py
+++ b/src/sentry/interfaces/schemas.py
@@ -458,6 +458,40 @@ CSP_INTERFACE_SCHEMA = {
     'additionalProperties': False,  # Don't allow any other keys.
 }
 
+# RFC7469 Section 3
+HPKP_SCHEMA = {
+    'type': 'object',
+    'properties': {
+        'date-time': {'type': 'string', },  # TODO validate (RFC3339)
+        'hostname': {'type': 'string'},
+        'port': {'type': 'number'},
+        'effective-expiration-date': {'type': 'string', },  # TODO validate (RFC3339)
+        'include-subdomains': {'type': 'boolean'},
+        'noted-hostname': {'type': 'string'},
+        'served-certificate-chain': {
+            'type': 'array',
+            'items': {'type': 'string'}
+        },
+        'validated-certificate-chain': {
+            'type': 'array',
+            'items': {'type': 'string'}
+        },
+        'known-pins': {
+            'type': 'array',
+            'items': {'type': 'string'}  # TODO regex this string for 'pin-sha256="ABC123"' syntax
+        },
+    },
+    'required': ['hostname'],  # TODO fill in more required keys
+    'additionalProperties': False,  # Don't allow any other keys.
+}
+
+HPKP_INTERFACE_SCHEMA = {
+    'type': 'object',
+    'properties': {k.replace('-', '_'): v for k, v in six.iteritems(HPKP_SCHEMA['properties'])},
+    'required': ['hostname'],  # TODO fill in more required keys
+    'additionalProperties': False,  # Don't allow any other keys.
+}
+
 EXPECT_CT_SCHEMA = {
     'type': 'object',
     'properties': {
@@ -587,6 +621,7 @@ then be transformed into the requisite interface.
 """
 INPUT_SCHEMAS = {
     'sentry.interfaces.Csp': CSP_SCHEMA,
+    'hpkp': HPKP_SCHEMA,
     'expectct': EXPECT_CT_SCHEMA,
     'expectstaple': EXPECT_STAPLE_SCHEMA,
 }
@@ -614,6 +649,7 @@ INTERFACE_SCHEMAS = {
 
     # Security reports
     'sentry.interfaces.Csp': CSP_INTERFACE_SCHEMA,
+    'hpkp': HPKP_INTERFACE_SCHEMA,
     'expectct': EXPECT_CT_INTERFACE_SCHEMA,
     'expectstaple': EXPECT_STAPLE_INTERFACE_SCHEMA,
 
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index 263cc39817..35afc4946d 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -11,7 +11,7 @@ from __future__ import absolute_import
 import jsonschema
 import six
 
-__all__ = ('Csp', 'ExpectCT', 'ExpectStaple')
+__all__ = ('Csp', 'Hpkp', 'ExpectCT', 'ExpectStaple')
 
 from six.moves.urllib.parse import urlsplit, urlunsplit
 
@@ -132,6 +132,66 @@ class SecurityReport(Interface):
         raise NotImplementedError
 
 
+class Hpkp(SecurityReport):
+    """
+    A HTTP Public Key Pinning pin validation failure report.
+
+    See also: https://tools.ietf.org/html/rfc7469#section-3
+    >>> {
+    >>>     "date-time": "2014-04-06T13:00:50Z",
+    >>>     "hostname": "www.example.com",
+    >>>     "port": 443,
+    >>>     "effective-expiration-date": "2014-05-01T12:40:50Z",
+    >>>     "include-subdomains": False,
+    >>>     "served-certificate-chain": [],
+    >>>     "validated-certificate-chain": [],
+    >>>     "known-pins": [],
+    >>> }
+    """
+
+    score = 1300
+    display_score = 1300
+
+    path = 'hpkp'
+    title = 'HPKP Report'
+
+    @classmethod
+    def from_raw(cls, raw):
+        # Validate the raw data against the input schema (raises on failure)
+        schema = INPUT_SCHEMAS[cls.path]
+        jsonschema.validate(raw, schema)
+
+        # Trim values and convert keys to use underscores
+        kwargs = {k.replace('-', '_'): trim(v, 1024) for k, v in six.iteritems(raw)}
+
+        return cls.to_python(kwargs)
+
+    def get_culprit(self):
+        return None
+
+    def get_hash(self, is_processed_data=True):
+        return [self.hostname]
+
+    def get_message(self):
+        return "Public key pinning validation failed for '{self.hostname}'".format(self=self)
+
+    def get_tags(self):
+        return [
+            ('port', six.text_type(self.port)),
+            ('include-subdomains', json.dumps(self.include_subdomains)),
+            ('hostname', self.hostname),
+        ]
+
+    def get_origin(self):
+        return self.hostname  # not quite origin, but the domain that failed pinning
+
+    def get_referrer(self):
+        return None
+
+    def should_filter(self, project=None):
+        return False
+
+
 class ExpectStaple(SecurityReport):
     """
     An OCSP Stapling violation report
diff --git a/src/sentry/web/api.py b/src/sentry/web/api.py
index 83b8848730..5a7eba4943 100644
--- a/src/sentry/web/api.py
+++ b/src/sentry/web/api.py
@@ -689,6 +689,7 @@ class SecurityReportView(StoreView):
             'csp-report': 'sentry.interfaces.Csp',
             'expect-ct-report': 'expectct',
             'expect-staple-report': 'expectstaple',
+            'known-pins': 'hpkp',
         }
         if isinstance(body, dict):
             for k in report_type_for_key:
diff --git a/tests/sentry/coreapi/tests.py b/tests/sentry/coreapi/tests.py
index a7f6e32f96..8d51e318e3 100644
--- a/tests/sentry/coreapi/tests.py
+++ b/tests/sentry/coreapi/tests.py
@@ -583,7 +583,7 @@ class DecodeDataTest(BaseAPITest):
     def test_valid_data(self):
         data = self.helper.decode_data('foo')
         assert data == u'foo'
-        assert type(data) == six.text_type
+        assert isinstance(data, six.text_type)
 
     def test_invalid_data(self):
         with self.assertRaises(APIError):
@@ -786,3 +786,45 @@ class SecurityApiHelperTest(BaseAPITest):
             ('blocked-uri', 'http://google.com'),
         ]
         assert len(result['errors']) == 0
+
+    def test_hpkp_validate_basic(self):
+        report = {
+            "release": "abc123",
+            "interface": 'hpkp',
+            "report": {
+                "date-time": "2014-04-06T13:00:50Z",
+                "hostname": "www.example.com",
+                "port": 443,
+                "effective-expiration-date": "2014-05-01T12:40:50Z",
+                "include-subdomains": False,
+                "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+                "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+                "known-pins": ["pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\""],
+            }
+        }
+        result = self.validate_and_normalize(report)
+        assert result['release'] == 'abc123'
+        assert result['errors'] == []
+        assert 'sentry.interfaces.Message' in result
+        assert 'culprit' in result
+        assert sorted(result['tags']) == [
+            ('hostname', 'www.example.com'),
+            ('include-subdomains', 'false'),
+            ('port', '443'),
+        ]
+        assert result['sentry.interfaces.User'] == {'ip_address': '198.51.100.0'}
+        assert result['sentry.interfaces.Http'] == {
+            'url': 'www.example.com',
+            'headers': [
+                ('User-Agent', 'Awesome Browser'),
+            ]
+        }
+
+    def test_hpkp_validate_failure(self):
+        report = {
+            "release": "abc123",
+            "interface": 'hpkp',
+            "report": {}
+        }
+        with self.assertRaises(APIError):
+            self.validate_and_normalize(report)
diff --git a/tests/sentry/web/api/tests.py b/tests/sentry/web/api/tests.py
index 3a9a916114..3876c09888 100644
--- a/tests/sentry/web/api/tests.py
+++ b/tests/sentry/web/api/tests.py
@@ -74,6 +74,34 @@ class SecurityReportCspTest(TestCase):
         assert resp.status_code == 201, resp.content
 
 
+class SecurityReportHpkpTest(TestCase):
+    @fixture
+    def path(self):
+        path = reverse('sentry-api-security-report', kwargs={'project_id': self.project.id})
+        return path + '?sentry_key=%s' % self.projectkey.public_key
+
+    @mock.patch('sentry.web.api.is_valid_origin', mock.Mock(return_value=True))
+    @mock.patch('sentry.web.api.SecurityReportView.process')
+    def test_post_success(self, process):
+        process.return_value = 'ok'
+        resp = self.client.post(
+            self.path,
+            content_type='application/json',
+            data=json.dumps({
+                "date-time": "2014-04-06T13:00:50Z",
+                "hostname": "www.example.com",
+                "port": 443,
+                "effective-expiration-date": "2014-05-01T12:40:50Z",
+                "include-subdomains": False,
+                "served-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+                "validated-certificate-chain": ["-----BEGIN CERTIFICATE-----\n-----END CERTIFICATE-----"],
+                "known-pins": ["pin-sha256=\"E9CZ9INDbd+2eRQozYqqbQ2yXLVKB9+xcprMF+44U1g=\""],
+            }),
+            HTTP_USER_AGENT='awesome',
+        )
+        assert resp.status_code == 201, resp.content
+
+
 class SecurityReportExpectCTTest(TestCase):
     @fixture
     def path(self):
