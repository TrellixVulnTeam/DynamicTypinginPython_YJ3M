commit 409739201ed83019171e5653d9c0c25108014561
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu Feb 27 17:22:25 2020 +0100

    ref(ui): Added tooltip - Datascrubbers v2 - Part 12 (#17187)

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
similarity index 56%
rename from src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
rename to src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
index e56917c898..5529b98725 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frame.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frame.jsx
@@ -1,74 +1,28 @@
 import PropTypes from 'prop-types';
 import React from 'react';
 import classNames from 'classnames';
-import styled from '@emotion/styled';
-import {css} from '@emotion/core';
 import scrollToElement from 'scroll-to-element';
 
-import {defined, objectIsEmpty, isUrl} from 'app/utils';
+import styled from '@emotion/styled';
+import {defined, objectIsEmpty} from 'app/utils';
 import {t} from 'app/locale';
-import ClippedBox from 'app/components/clippedBox';
-import ContextLine from 'app/components/events/interfaces/contextLine';
-import ExternalLink from 'app/components/links/externalLink';
-import FrameRegisters from 'app/components/events/interfaces/frameRegisters';
-import FrameVariables from 'app/components/events/interfaces/frameVariables';
 import TogglableAddress from 'app/components/events/interfaces/togglableAddress';
 import PackageLink from 'app/components/events/interfaces/packageLink';
 import PackageStatus from 'app/components/events/interfaces/packageStatus';
 import StrictClick from 'app/components/strictClick';
 import Tooltip from 'app/components/tooltip';
-import Truncate from 'app/components/truncate';
-import OpenInContextLine from 'app/components/events/interfaces/openInContextLine';
 import space from 'app/styles/space';
-import ErrorBoundary from 'app/components/errorBoundary';
 import withSentryAppComponents from 'app/utils/withSentryAppComponents';
 import {DebugMetaActions} from 'app/stores/debugMetaStore';
 import {SymbolicatorStatus} from 'app/components/events/interfaces/types';
 import InlineSvg from 'app/components/inlineSvg';
 import {combineStatus} from 'app/components/events/interfaces/debugmeta';
-import {Assembly} from 'app/components/events/interfaces/assembly';
-import {parseAssembly} from 'app/components/events/interfaces/utils';
 import {IconRefresh} from 'app/icons/iconRefresh';
 
-export function trimPackage(pkg) {
-  const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
-  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
-  return filename.replace(/\.(dylib|so|a|dll|exe)$/, '');
-}
-
-export class FunctionName extends React.Component {
-  static propTypes = {
-    frame: PropTypes.object,
-  };
-
-  state = {
-    rawFunction: false,
-  };
-
-  toggle = event => {
-    event.stopPropagation();
-    this.setState(({rawFunction}) => ({rawFunction: !rawFunction}));
-  };
-
-  render() {
-    const {frame, ...props} = this.props;
-    const func = frame.function;
-    const rawFunc = frame.rawFunction;
-    const canToggle = rawFunc && func && func !== rawFunc;
-
-    if (!canToggle) {
-      return <code {...props}>{func || rawFunc || '<unknown>'}</code>;
-    }
-
-    const current = this.state.rawFunction ? rawFunc : func;
-    const title = this.state.rawFunction ? null : rawFunc;
-    return (
-      <code {...props} title={title}>
-        <a onClick={this.toggle}>{current || '<unknown>'}</a>
-      </code>
-    );
-  }
-}
+import FrameDefaultTitle from './frameDefaultTitle';
+import FrameContext from './frameContext';
+import FrameFunctionName from './frameFunctionName';
+import {getPlatform} from './utils';
 
 export class Frame extends React.Component {
   static propTypes = {
@@ -134,34 +88,10 @@ export class Frame extends React.Component {
     );
   }
 
-  renderOriginalSourceInfo() {
-    const data = this.props.data;
-
-    // mapUrl not always present; e.g. uploaded source maps
-    return (
-      <React.Fragment>
-        <strong>{t('Source Map')}</strong>
-        <br />
-        {data.mapUrl ? data.mapUrl : data.map}
-        <br />
-      </React.Fragment>
-    );
-  }
-
   getPlatform() {
     // prioritize the frame platform but fall back to the platform
     // of the stacktrace / exception
-    return this.props.data.platform || this.props.platform;
-  }
-
-  shouldPrioritizeModuleName() {
-    switch (this.getPlatform()) {
-      case 'java':
-      case 'csharp':
-        return true;
-      default:
-        return false;
-    }
+    return getPlatform(this.props.data.platform, this.props.platform);
   }
 
   isInlineFrame() {
@@ -207,210 +137,6 @@ export class Frame extends React.Component {
     evt.stopPropagation();
   };
 
-  getSentryAppComponents() {
-    return this.props.components;
-  }
-
-  renderDefaultTitle() {
-    const data = this.props.data;
-    const title = [];
-
-    // TODO(dcramer): this needs to use a formatted string so it can be
-    // localized correctly
-
-    if (defined(data.filename || data.module)) {
-      // prioritize module name for Java as filename is often only basename
-      const shouldPrioritizeModuleName = this.shouldPrioritizeModuleName();
-      const pathName = shouldPrioritizeModuleName
-        ? data.module || data.filename
-        : data.filename || data.module;
-
-      const enablePathTooltip = defined(data.absPath) && data.absPath !== pathName;
-
-      title.push(
-        <Tooltip key={pathName} title={data.absPath} disabled={!enablePathTooltip}>
-          <code key="filename" className="filename">
-            <Truncate value={pathName} maxLength={100} leftTrim />
-          </code>
-        </Tooltip>
-      );
-
-      // in case we prioritized the module name but we also have a filename info
-      // we want to show a litle (?) icon that on hover shows the actual filename
-      if (
-        shouldPrioritizeModuleName &&
-        data.filename &&
-        this.getPlatform() !== 'csharp'
-      ) {
-        title.push(
-          <Tooltip key={data.filename} title={data.filename}>
-            <a className="in-at real-filename">
-              <span className="icon-question" />
-            </a>
-          </Tooltip>
-        );
-      }
-
-      if (isUrl(data.absPath)) {
-        title.push(
-          <ExternalLink
-            href={data.absPath}
-            className="icon-open"
-            key="share"
-            onClick={this.preventCollapse}
-          />
-        );
-      }
-      if (defined(data.function) || defined(data.rawFunction)) {
-        title.push(
-          <span className="in-at" key="in">
-            {' '}
-            in{' '}
-          </span>
-        );
-      }
-    }
-
-    if (defined(data.function) || defined(data.rawFunction)) {
-      title.push(<FunctionName frame={data} key="function" className="function" />);
-    }
-
-    // we don't want to render out zero line numbers which are used to
-    // indicate lack of source information for native setups.  We could
-    // TODO(mitsuhiko): only do this for events from native platforms?
-    if (defined(data.lineNo) && data.lineNo !== 0) {
-      title.push(
-        <span className="in-at in-at-line" key="no">
-          {' '}
-          at line{' '}
-        </span>
-      );
-      title.push(
-        <code key="line" className="lineno">
-          {defined(data.colNo) ? `${data.lineNo}:${data.colNo}` : data.lineNo}
-        </code>
-      );
-    }
-
-    if (defined(data.package) && this.getPlatform() !== 'csharp') {
-      title.push(
-        <span className="within" key="within">
-          {' '}
-          within{' '}
-        </span>
-      );
-      title.push(
-        <code title={data.package} className="package" key="package">
-          {trimPackage(data.package)}
-        </code>
-      );
-    }
-
-    if (defined(data.origAbsPath)) {
-      title.push(
-        <Tooltip key="info-tooltip" title={this.renderOriginalSourceInfo()}>
-          <a className="in-at original-src">
-            <span className="icon-question" />
-          </a>
-        </Tooltip>
-      );
-    }
-
-    return title;
-  }
-
-  renderContext() {
-    const data = this.props.data;
-    let context = '';
-    const {isExpanded} = this.state;
-
-    let outerClassName = 'context';
-    if (isExpanded) {
-      outerClassName += ' expanded';
-    }
-
-    const hasContextSource = this.hasContextSource();
-    const hasContextVars = this.hasContextVars();
-    const hasContextRegisters = this.hasContextRegisters();
-    const hasAssembly = this.hasAssembly();
-    const expandable = this.isExpandable();
-
-    const contextLines = isExpanded
-      ? data.context
-      : data.context && data.context.filter(l => l[0] === data.lineNo);
-
-    if (hasContextSource || hasContextVars || hasContextRegisters || hasAssembly) {
-      const startLineNo = hasContextSource ? data.context[0][0] : '';
-      context = (
-        <ol start={startLineNo} className={outerClassName}>
-          {defined(data.errors) && (
-            <li className={expandable ? 'expandable error' : 'error'} key="errors">
-              {data.errors.join(', ')}
-            </li>
-          )}
-
-          {data.context &&
-            contextLines.map((line, index) => {
-              const isActive = data.lineNo === line[0];
-              const components = this.getSentryAppComponents();
-              const hasComponents = isActive && components.length > 0;
-              const contextLineCss = hasComponents
-                ? css`
-                    background: inherit;
-                    padding: 0;
-                    text-indent: 20px;
-                    z-index: 1000;
-                  `
-                : css`
-                    background: inherit;
-                    padding: 0 20px;
-                  `;
-              return (
-                <ContextLine
-                  key={index}
-                  line={line}
-                  isActive={isActive}
-                  css={contextLineCss}
-                >
-                  {hasComponents && (
-                    <ErrorBoundary mini>
-                      <OpenInContextLine
-                        key={index}
-                        lineNo={line[0]}
-                        filename={data.filename}
-                        components={components}
-                      />
-                    </ErrorBoundary>
-                  )}
-                </ContextLine>
-              );
-            })}
-
-          {(hasContextRegisters || hasContextVars) && (
-            <ClippedBox clipHeight={100}>
-              {hasContextRegisters && (
-                <FrameRegisters data={this.props.registers} key="registers" />
-              )}
-              {hasContextVars && <FrameVariables data={data.vars} key="vars" />}
-            </ClippedBox>
-          )}
-
-          {hasAssembly && (
-            <Assembly {...parseAssembly(data.package)} filePath={data.absPath} />
-          )}
-        </ol>
-      );
-    } else if (this.props.emptySourceNotation) {
-      context = (
-        <div className="empty-context">
-          <span className="icon icon-exclamation" />
-          <p>{t('No additional details are available for this frame.')}</p>
-        </div>
-      );
-    }
-    return context;
-  }
-
   renderExpander() {
     if (!this.isExpandable()) {
       return null;
@@ -516,7 +242,7 @@ export class Frame extends React.Component {
           <VertCenterWrapper>
             <div>
               {this.renderLeadHint()}
-              {this.renderDefaultTitle()}
+              <FrameDefaultTitle frame={this.props.data} platform={this.props.platform} />
             </div>
             {this.renderRepeats()}
           </VertCenterWrapper>
@@ -560,7 +286,7 @@ export class Frame extends React.Component {
               maxLengthOfRelativeAddress={maxLengthOfRelativeAddress}
             />
             <Symbol className="symbol">
-              <FunctionName frame={data} />{' '}
+              <FrameFunctionName frame={data} />{' '}
               {hint !== null ? (
                 <Tooltip title={hint}>
                   <HintStatus
@@ -613,12 +339,21 @@ export class Frame extends React.Component {
     });
     const props = {className};
 
-    const context = this.renderContext();
-
     return (
       <li {...props}>
         {this.renderLine()}
-        {context}
+        <FrameContext
+          frame={data}
+          registers={this.props.registers}
+          components={this.props.components}
+          hasContextSource={this.hasContextSource()}
+          hasContextVars={this.hasContextVars()}
+          hasContextRegisters={this.hasContextRegisters()}
+          emptySourceNotation={this.props.emptySourceNotation}
+          hasAssembly={this.hasAssembly()}
+          expandable={this.isExpandable()}
+          isExpanded={this.state.isExpanded}
+        />
       </li>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
new file mode 100644
index 0000000000..97f54f0c45
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameContext.tsx
@@ -0,0 +1,122 @@
+import React from 'react';
+import {css} from '@emotion/core';
+
+import {SentryAppComponent} from 'app/types';
+import {t} from 'app/locale';
+import {defined} from 'app/utils';
+import ClippedBox from 'app/components/clippedBox';
+import ContextLine from 'app/components/events/interfaces/contextLine';
+import FrameRegisters from 'app/components/events/interfaces/frameRegisters/frameRegisters';
+import FrameVariables from 'app/components/events/interfaces/frameVariables';
+import ErrorBoundary from 'app/components/errorBoundary';
+import {Assembly} from 'app/components/events/interfaces/assembly';
+import {parseAssembly} from 'app/components/events/interfaces/utils';
+import OpenInContextLine from 'app/components/events/interfaces/openInContextLine';
+
+import {Frame} from './types';
+
+type Props = {
+  frame: Frame;
+  isExpanded?: boolean;
+  hasContextSource?: boolean;
+  hasContextVars?: boolean;
+  hasContextRegisters?: boolean;
+  emptySourceNotation?: boolean;
+  hasAssembly?: boolean;
+  expandable?: boolean;
+  registers: {[key: string]: string};
+  components: Array<SentryAppComponent>;
+};
+
+const FrameContext = ({
+  hasContextVars = false,
+  hasContextSource = false,
+  hasContextRegisters = false,
+  isExpanded = false,
+  hasAssembly = false,
+  expandable = false,
+  emptySourceNotation = false,
+  registers,
+  components,
+  frame,
+}: Props) => {
+  if (!hasContextSource && !hasContextVars && !hasContextRegisters && !hasAssembly) {
+    return emptySourceNotation ? (
+      <div className="empty-context">
+        <span className="icon icon-exclamation" />
+        <p>{t('No additional details are available for this frame.')}</p>
+      </div>
+    ) : null;
+  }
+
+  const getContextLines = () => {
+    if (isExpanded) {
+      return frame.context;
+    }
+    return frame.context.filter(l => l[0] === frame.lineNo);
+  };
+
+  const contextLines = getContextLines();
+
+  const startLineNo = hasContextSource ? frame.context[0][0] : undefined;
+
+  return (
+    <ol start={startLineNo} className={`context ${isExpanded ? 'expanded' : ''}`}>
+      {defined(frame.errors) && (
+        <li className={expandable ? 'expandable error' : 'error'} key="errors">
+          {frame.errors.join(', ')}
+        </li>
+      )}
+
+      {frame.context &&
+        contextLines.map((line, index) => {
+          const isActive = frame.lineNo === line[0];
+          const hasComponents = isActive && components.length > 0;
+          return (
+            <ContextLine
+              key={index}
+              line={line}
+              isActive={isActive}
+              css={
+                hasComponents
+                  ? css`
+                      background: inherit;
+                      padding: 0;
+                      text-indent: 20px;
+                      z-index: 1000;
+                    `
+                  : css`
+                      background: inherit;
+                      padding: 0 20px;
+                    `
+              }
+            >
+              {hasComponents && (
+                <ErrorBoundary mini>
+                  <OpenInContextLine
+                    key={index}
+                    lineNo={line[0]}
+                    filename={frame.filename}
+                    components={components}
+                  />
+                </ErrorBoundary>
+              )}
+            </ContextLine>
+          );
+        })}
+
+      {(hasContextRegisters || hasContextVars) && (
+        <ClippedBox clipHeight={100}>
+          {hasContextRegisters && <FrameRegisters data={registers} key="registers" />}
+          {hasContextVars && <FrameVariables data={frame.vars} key="vars" />}
+        </ClippedBox>
+      )}
+
+      {hasAssembly && (
+        <Assembly {...parseAssembly(frame.package)} filePath={frame.absPath} />
+      )}
+    </ol>
+  );
+};
+
+export default FrameContext;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
new file mode 100644
index 0000000000..f723c93b69
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitle.tsx
@@ -0,0 +1,174 @@
+import React from 'react';
+
+import {Meta} from 'app/types';
+import {defined, isUrl} from 'app/utils';
+import Tooltip from 'app/components/tooltip';
+import Truncate from 'app/components/truncate';
+import {IconQuestion} from 'app/icons/iconQuestion';
+import ExternalLink from 'app/components/links/externalLink';
+import AnnotatedText from 'app/components/events/meta/annotatedText';
+import {t} from 'app/locale';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+
+import FrameFunctionName from './frameFunctionName';
+import {getPlatform, trimPackage} from './utils';
+import FrameDefaultTitleOriginalSourceInfo from './frameDefaultTitleOriginalSourceInfo';
+import {Frame, PlatformType} from './types';
+
+type Props = {
+  frame: Frame;
+  platform: PlatformType;
+};
+
+type GetPathNameOutput = {key: string; value: string; meta?: Meta};
+
+const FrameDefaultTitle = ({frame, platform}: Props) => {
+  const title: Array<React.ReactElement> = [];
+  const framePlatform = getPlatform(frame.platform, platform);
+
+  const handleExternalLink = (event: React.MouseEvent<HTMLAnchorElement>) => {
+    event.stopPropagation();
+  };
+
+  const getPathName = (shouldPrioritizeModuleName: boolean): GetPathNameOutput => {
+    if (shouldPrioritizeModuleName) {
+      if (frame.module) {
+        return {
+          key: 'module',
+          value: frame.module,
+          meta: getMeta(frame, 'module'),
+        };
+      }
+      return {
+        key: 'filename',
+        value: frame.filename,
+        meta: getMeta(frame, 'filename'),
+      };
+    }
+
+    if (frame.filename) {
+      return {
+        key: 'filename',
+        value: frame.filename,
+        meta: getMeta(frame, 'filename'),
+      };
+    }
+
+    return {
+      key: 'module',
+      value: frame.module,
+      meta: getMeta(frame, 'module'),
+    };
+  };
+
+  // TODO(dcramer): this needs to use a formatted string so it can be
+  // localized correctly
+  if (defined(frame.filename || frame.module)) {
+    // prioritize module name for Java as filename is often only basename
+    const shouldPrioritizeModuleName =
+      framePlatform === 'java' || framePlatform === 'csharp';
+
+    const pathName = getPathName(shouldPrioritizeModuleName);
+    const enablePathTooltip = defined(frame.absPath) && frame.absPath !== pathName.value;
+
+    title.push(
+      <Tooltip key={pathName.key} title={frame.absPath} disabled={!enablePathTooltip}>
+        <code key="filename" className="filename">
+          {pathName.meta ? (
+            <AnnotatedText
+              value={<Truncate value={pathName.value} maxLength={100} leftTrim />}
+              chunks={pathName.meta.chunks}
+              remarks={pathName.meta.rem}
+              errors={pathName.meta.err}
+            />
+          ) : (
+            <Truncate value={pathName.value} maxLength={100} leftTrim />
+          )}
+        </code>
+      </Tooltip>
+    );
+
+    // in case we prioritized the module name but we also have a filename info
+    // we want to show a litle (?) icon that on hover shows the actual filename
+    if (shouldPrioritizeModuleName && frame.filename && framePlatform !== 'csharp') {
+      title.push(
+        <Tooltip key={frame.filename} title={frame.filename}>
+          <a className="in-at real-filename">
+            <IconQuestion size="xs" />
+          </a>
+        </Tooltip>
+      );
+    }
+
+    if (frame.absPath && isUrl(frame.absPath)) {
+      title.push(
+        <ExternalLink
+          href={frame.absPath}
+          className="icon-open"
+          key="share"
+          onClick={handleExternalLink}
+        />
+      );
+    }
+
+    if (defined(frame.function) || defined(frame.rawFunction)) {
+      title.push(
+        <span className="in-at" key="in">
+          {` ${t('in')} `}
+        </span>
+      );
+    }
+  }
+
+  if (defined(frame.function) || defined(frame.rawFunction)) {
+    title.push(<FrameFunctionName frame={frame} key="function" className="function" />);
+  }
+
+  // we don't want to render out zero line numbers which are used to
+  // indicate lack of source information for native setups.  We could
+  // TODO(mitsuhiko): only do this for events from native platforms?
+  if (defined(frame.lineNo) && frame.lineNo !== 0) {
+    title.push(
+      <span className="in-at in-at-line" key="no">
+        {` ${t('at line')} `}
+      </span>
+    );
+    title.push(
+      <code key="line" className="lineno">
+        {defined(frame.colNo) ? `${frame.lineNo}:${frame.colNo}` : frame.lineNo}
+      </code>
+    );
+  }
+
+  if (defined(frame.package) && framePlatform !== 'csharp') {
+    title.push(
+      <span className="within" key="within">
+        {` ${t('within')} `}
+      </span>
+    );
+    title.push(
+      <code title={frame.package} className="package" key="package">
+        {trimPackage(frame.package)}
+      </code>
+    );
+  }
+
+  if (defined(frame.origAbsPath)) {
+    title.push(
+      <Tooltip
+        key="info-tooltip"
+        title={
+          <FrameDefaultTitleOriginalSourceInfo mapUrl={frame.mapUrl} map={frame.map} />
+        }
+      >
+        <a className="in-at original-src">
+          <IconQuestion size="xs" />
+        </a>
+      </Tooltip>
+    );
+  }
+
+  return title;
+};
+
+export default FrameDefaultTitle;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitleOriginalSourceInfo.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitleOriginalSourceInfo.tsx
new file mode 100644
index 0000000000..61fc2628df
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameDefaultTitleOriginalSourceInfo.tsx
@@ -0,0 +1,21 @@
+import React from 'react';
+
+import {t} from 'app/locale';
+
+type Props = {
+  mapUrl?: string;
+  map: string;
+};
+
+// TODO(Priscila): Remove BR tags
+// mapUrl not always present; e.g. uploaded source maps
+const FrameDefaultTitleOriginalSourceInfo = ({mapUrl, map}: Props) => (
+  <React.Fragment>
+    <strong>{t('Source Map')}</strong>
+    <br />
+    {mapUrl ? mapUrl : map}
+    <br />
+  </React.Fragment>
+);
+
+export default FrameDefaultTitleOriginalSourceInfo;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
new file mode 100644
index 0000000000..68076ad4a3
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/frameFunctionName.tsx
@@ -0,0 +1,107 @@
+import React from 'react';
+import PropTypes from 'prop-types';
+
+import {t} from 'app/locale';
+import {Meta} from 'app/types';
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import AnnotatedText from 'app/components/events/meta/annotatedText';
+
+import {Frame} from './types';
+
+type Props = {
+  frame: Frame;
+  className?: string;
+};
+
+type State = {
+  rawFunction: boolean;
+};
+
+type ToggleValueOutput =
+  | string
+  | {
+      value: string;
+      meta?: Meta;
+    };
+
+class FrameFunctionName extends React.Component<Props, State> {
+  static propTypes = {
+    frame: PropTypes.object,
+  };
+
+  state = {
+    rawFunction: false,
+  };
+
+  toggle = (event: React.MouseEvent<HTMLAnchorElement>) => {
+    event.stopPropagation();
+    this.setState(({rawFunction}) => ({rawFunction: !rawFunction}));
+  };
+
+  getToggleValue(withRawFunctionCondition: boolean = false): React.ReactNode {
+    const {frame} = this.props;
+    let valueOutput: ToggleValueOutput = t('<unknown>');
+
+    if (withRawFunctionCondition) {
+      const {rawFunction} = this.state;
+      if (!rawFunction) {
+        if (frame.function) {
+          valueOutput = {
+            value: frame.function,
+            meta: getMeta(frame, 'function'),
+          };
+        }
+      }
+    } else {
+      if (frame.function) {
+        valueOutput = {
+          value: frame.function,
+          meta: getMeta(frame, 'function'),
+        };
+      }
+    }
+
+    if (typeof valueOutput === 'string' && frame.rawFunction) {
+      valueOutput = {
+        value: frame.rawFunction,
+        meta: getMeta(frame, 'rawFunction'),
+      };
+    }
+
+    if (typeof valueOutput === 'string') {
+      return valueOutput;
+    }
+
+    if (!valueOutput.meta) {
+      return valueOutput.value;
+    }
+
+    return (
+      <AnnotatedText
+        value={valueOutput.value}
+        chunks={valueOutput.meta.chunks}
+        remarks={valueOutput.meta.rem}
+        errors={valueOutput.meta.err}
+      />
+    );
+  }
+
+  render() {
+    const {frame, ...props} = this.props;
+    const func = frame.function;
+    const rawFunc = frame.rawFunction;
+    const canToggle = rawFunc && func && func !== rawFunc;
+
+    if (!canToggle) {
+      return <code {...props}>{this.getToggleValue()}</code>;
+    }
+    const title = this.state.rawFunction ? undefined : rawFunc;
+    return (
+      <code {...props} title={title} onClick={this.toggle}>
+        {this.getToggleValue(true)}
+      </code>
+    );
+  }
+}
+
+export default FrameFunctionName;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx
new file mode 100644
index 0000000000..485acc3bc4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/types.tsx
@@ -0,0 +1,20 @@
+export type PlatformType = 'java' | 'csharp' | 'other';
+
+export type Frame = {
+  filename: string;
+  module: string;
+  function?: string;
+  absPath?: string;
+  rawFunction?: string;
+  platform: PlatformType;
+  lineNo?: number;
+  colNo?: number;
+  package?: string;
+  origAbsPath?: string;
+  mapUrl?: string;
+  map: string;
+  preventCollapse: () => void;
+  errors: Array<any>;
+  context: Array<[number, string]>;
+  vars: {[key: string]: any};
+};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx
new file mode 100644
index 0000000000..3bf2b52bd4
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frame/utils.tsx
@@ -0,0 +1,13 @@
+import {PlatformType} from './types';
+
+export function trimPackage(pkg: string) {
+  const pieces = pkg.split(/^([a-z]:\\|\\\\)/i.test(pkg) ? '\\' : '/');
+  const filename = pieces[pieces.length - 1] || pieces[pieces.length - 2] || pkg;
+  return filename.replace(/\.(dylib|so|a|dll|exe)$/, '');
+}
+
+export function getPlatform(dataPlatform: PlatformType, platform: string) {
+  // prioritize the frame platform but fall back to the platform
+  // of the stacktrace / exception
+  return dataPlatform || platform;
+}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/index.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
similarity index 56%
rename from src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/index.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
index a72ce0a549..d59ad91925 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/index.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegisters.tsx
@@ -1,42 +1,41 @@
 import React from 'react';
-import styled from '@emotion/styled';
 
+import styled from '@emotion/styled';
 import {defined} from 'app/utils';
 import {t} from 'app/locale';
-import RegisterValue from 'app/components/events/interfaces/frameRegisters/registerValue';
+import FrameRegistersValue from 'app/components/events/interfaces/frameRegisters/frameRegistersValue';
+import {getMeta} from 'app/components/events/meta/metaProxy';
 
 type Props = {
   data: {[key: string]: string};
 };
 
-class FrameRegisters extends React.Component<Props> {
+const FrameRegisters = ({data}: Props) => {
   // make sure that clicking on the registers does not actually do
   // anything on the containing element.
-  preventToggling = (evt: React.MouseEvent<HTMLDivElement>) => {
-    evt.stopPropagation();
+  const handlePreventToggling = (event: React.MouseEvent<HTMLDivElement>) => {
+    event.stopPropagation();
   };
 
-  render() {
-    return (
-      <RegistersWrapper>
-        <RegistersHeading>{t('registers')}</RegistersHeading>
-        <Registers>
-          {Object.entries(this.props.data).map(([name, value]) => {
-            if (defined(value)) {
-              return (
-                <Register key={name} onClick={this.preventToggling}>
-                  <RegisterName>{name}</RegisterName> <RegisterValue value={value} />
-                </Register>
-              );
-            }
-
+  return (
+    <RegistersWrapper>
+      <RegistersHeading>{t('registers')}</RegistersHeading>
+      <Registers>
+        {Object.entries(data).map(([name, value]) => {
+          if (!defined(value)) {
             return null;
-          })}
-        </Registers>
-      </RegistersWrapper>
-    );
-  }
-}
+          }
+          return (
+            <Register key={name} onClick={handlePreventToggling}>
+              <RegisterName>{name}</RegisterName>
+              <FrameRegistersValue value={value} meta={getMeta(data, name)} />
+            </Register>
+          );
+        })}
+      </Registers>
+    </RegistersWrapper>
+  );
+};
 
 const RegistersWrapper = styled('div')`
   border-top: 1px solid ${p => p.theme.borderLight};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/registerValue.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
similarity index 58%
rename from src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/registerValue.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
index 5955854ed8..29e3e0385c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/registerValue.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameRegisters/frameRegistersValue.tsx
@@ -1,20 +1,23 @@
 import React from 'react';
-import styled from '@emotion/styled';
 
+import {Meta} from 'app/types';
+import styled from '@emotion/styled';
 import Tooltip from 'app/components/tooltip';
+import AnnotatedText from 'app/components/events/meta/annotatedText';
 import {t} from 'app/locale';
 
 const REGISTER_VIEWS = [t('Hexadecimal'), t('Numeric')];
 
 type Props = {
   value: string | number;
+  meta?: Meta;
 };
 
 type State = {
   view: number;
 };
 
-export default class RegisterValue extends React.Component<Props, State> {
+class frameRegistersValue extends React.Component<Props, State> {
   state = {
     view: 0,
   };
@@ -23,7 +26,13 @@ export default class RegisterValue extends React.Component<Props, State> {
     this.setState(state => ({view: (state.view + 1) % REGISTER_VIEWS.length}));
   };
 
-  formatValue = (value: Props['value']) => {
+  tooltipTitle = () => {
+    return REGISTER_VIEWS[this.state.view];
+  };
+
+  formatValue = () => {
+    const value = this.props.value;
+
     try {
       const parsed = typeof value === 'string' ? parseInt(value, 16) : value;
       if (isNaN(parsed)) {
@@ -37,16 +46,28 @@ export default class RegisterValue extends React.Component<Props, State> {
         default:
           return `0x${('0000000000000000' + parsed.toString(16)).substr(-16)}`;
       }
-    } catch (e) {
+    } catch {
       return value;
     }
   };
 
   render() {
+    const formattedValue = this.formatValue();
     return (
-      <InlinePre>
-        <FixedWidth>{this.formatValue(this.props.value)}</FixedWidth>
-        <Tooltip title={REGISTER_VIEWS[this.state.view]}>
+      <InlinePre data-test-id="frame-registers-value">
+        <FixedWidth>
+          {this.props.meta ? (
+            <AnnotatedText
+              vakue={formattedValue}
+              chunks={this.props.meta.chunks}
+              remarks={this.props.meta.rem}
+              errors={this.props.meta.err}
+            />
+          ) : (
+            formattedValue
+          )}
+        </FixedWidth>
+        <Tooltip title={this.tooltipTitle()}>
           <Toggle className="icon-filter" onClick={this.toggleView} />
         </Tooltip>
       </InlinePre>
@@ -54,6 +75,8 @@ export default class RegisterValue extends React.Component<Props, State> {
   }
 }
 
+export default frameRegistersValue;
+
 const InlinePre = styled('pre')`
   display: inline;
 `;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
deleted file mode 100644
index 654718f11b..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.jsx
+++ /dev/null
@@ -1,24 +0,0 @@
-import PropTypes from 'prop-types';
-import React from 'react';
-
-import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueList';
-
-class FrameVariables extends React.Component {
-  static propTypes = {
-    data: PropTypes.object.isRequired,
-  };
-
-  // make sure that clicking on the variables does not actually do
-  // anything on the containing element.
-  preventToggling = evt => {
-    evt.stopPropagation();
-  };
-
-  render() {
-    const data = Object.entries(this.props.data);
-
-    return <KeyValueList data={data} isContextData onClick={this.preventToggling} />;
-  }
-}
-
-export default FrameVariables;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.tsx b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.tsx
new file mode 100644
index 0000000000..f2450c9e38
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/frameVariables.tsx
@@ -0,0 +1,40 @@
+import React from 'react';
+
+import {getMeta} from 'app/components/events/meta/metaProxy';
+import KeyValueList from 'app/components/events/interfaces/keyValueList/keyValueListV2';
+import {KeyValueListData} from 'app/components/events/interfaces/keyValueList/types';
+
+type Props = {
+  data: {[key: string]: string};
+};
+
+const FrameVariables = ({data}: Props) => {
+  // make sure that clicking on the variables does not actually do
+  // anything on the containing element.
+  const handlePreventToggling = () => (event: React.MouseEvent<HTMLTableElement>) => {
+    event.stopPropagation();
+  };
+
+  const getTransformedData = (): Array<KeyValueListData> => {
+    const transformedData: Array<KeyValueListData> = [];
+
+    const dataKeys = Object.keys(data).reverse();
+    for (const key of dataKeys) {
+      transformedData.push({
+        key,
+        subject: key,
+        value: data[key],
+        meta: getMeta(data, key),
+      });
+    }
+    return transformedData;
+  };
+
+  const transformedData = getTransformedData();
+
+  return (
+    <KeyValueList data={transformedData} onClick={handlePreventToggling} isContextData />
+  );
+};
+
+export default FrameVariables;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
index 48cc218d4a..c1f857420f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/imageForBar.tsx
@@ -2,12 +2,13 @@ import React from 'react';
 import PropTypes from 'prop-types';
 import styled from '@emotion/styled';
 
-import {FunctionName} from 'app/components/events/interfaces/frame';
+import FrameFunctionName from 'app/components/events/interfaces/frame/frameFunctionName';
+import {Frame} from 'app/components/events/interfaces/frame/types';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 
 type Props = {
-  frame: object;
+  frame: Frame;
   onShowAllImages: () => void;
 };
 
@@ -16,7 +17,7 @@ const ImageForBar = ({frame, onShowAllImages}: Props) => {
     <Wrapper>
       <MatchedFunctionWrapper>
         <MatchedFunctionCaption>{t('Image for: ')}</MatchedFunctionCaption>
-        <FunctionName frame={frame} />
+        <FrameFunctionName frame={frame} />
       </MatchedFunctionWrapper>
       <ResetAddressFilterCaption onClick={onShowAllImages}>
         {t('Show all images')}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
index 879bd447d2..a7375599ee 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/packageLink.tsx
@@ -1,10 +1,10 @@
 import React from 'react';
-import styled from '@emotion/styled';
 
+import styled from '@emotion/styled';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
 import {defined} from 'app/utils';
-import {trimPackage} from 'app/components/events/interfaces/frame';
+import {trimPackage} from 'app/components/events/interfaces/frame/utils';
 import InlineSvg from 'app/components/inlineSvg';
 import {PackageStatusIcon} from 'app/components/events/interfaces/packageStatus';
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
index 979f849cf5..683cd64e41 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/rawStacktraceContent.jsx
@@ -1,5 +1,5 @@
 import {defined, trim} from 'app/utils';
-import {trimPackage} from 'app/components/events/interfaces/frame';
+import {trimPackage} from 'app/components/events/interfaces/frame/utils';
 
 function getJavaScriptFrame(frame) {
   let result = '';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
index e989bce938..9901926308 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktraceContent.jsx
@@ -2,7 +2,7 @@ import PropTypes from 'prop-types';
 import React from 'react';
 import get from 'lodash/get';
 
-import Frame from 'app/components/events/interfaces/frame';
+import Frame from 'app/components/events/interfaces/frame/frame';
 import {t} from 'app/locale';
 import SentryTypes from 'app/sentryTypes';
 import {parseAddress, getImageRange} from 'app/components/events/interfaces/utils';
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
index 22b800062f..c0797e9d67 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/template.jsx
@@ -1,8 +1,9 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+
 import EventDataSection from 'app/components/events/eventDataSection';
 import SentryTypes from 'app/sentryTypes';
-import Frame from 'app/components/events/interfaces/frame';
+import Frame from 'app/components/events/interfaces/frame/frame';
 import {t} from 'app/locale';
 
 class TemplateInterface extends React.Component {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx b/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx
index b84c20919d..c2356b23f5 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads/filterThreadInfo.tsx
@@ -1,6 +1,6 @@
 import {Thread, Frame} from 'app/types/events';
 import {Event} from 'app/types';
-import {trimPackage} from 'app/components/events/interfaces/frame';
+import {trimPackage} from 'app/components/events/interfaces/frame/utils';
 
 import getThreadStacktrace from './getThreadStacktrace';
 import getRelevantFrame from './getRelevantFrame';
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
index 3007e8ba37..a364c01123 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frame.spec.jsx.snap
@@ -1,14 +1,91 @@
 // Jest Snapshot v1, https://goo.gl/fbAQLP
 
-exports[`Frame renderContext() should render context lines 1`] = `null`;
+exports[`Frame renderContext() should render context lines 1`] = `
+Array [
+  <ContextLine
+    className="css-x7wq2i-FrameContext"
+    isActive={false}
+    line={
+      Array [
+        211,
+        "    # Mark the crashed thread and add its stacktrace to the exception",
+      ]
+    }
+  >
+    <li
+      className="css-x7wq2i-FrameContext expandable"
+      key="211"
+    >
+      <span
+        className="ws"
+      >
+            
+      </span>
+      <span
+        className="contextline"
+      >
+        # Mark the crashed thread and add its stacktrace to the exception
+      </span>
+    </li>
+  </ContextLine>,
+  <ContextLine
+    className="css-x7wq2i-FrameContext"
+    isActive={false}
+    line={
+      Array [
+        212,
+        "    crashed_thread = data['threads'][state.requesting_thread]",
+      ]
+    }
+  >
+    <li
+      className="css-x7wq2i-FrameContext expandable"
+      key="212"
+    >
+      <span
+        className="ws"
+      >
+            
+      </span>
+      <span
+        className="contextline"
+      >
+        crashed_thread = data['threads'][state.requesting_thread]
+      </span>
+    </li>
+  </ContextLine>,
+  <ContextLine
+    className="css-x7wq2i-FrameContext"
+    isActive={false}
+    line={
+      Array [
+        213,
+        "    crashed_thread['crashed'] = True",
+      ]
+    }
+  >
+    <li
+      className="css-x7wq2i-FrameContext expandable"
+      key="213"
+    >
+      <span
+        className="ws"
+      >
+            
+      </span>
+      <span
+        className="contextline"
+      >
+        crashed_thread['crashed'] = True
+      </span>
+    </li>
+  </ContextLine>,
+]
+`;
 
 exports[`Frame renderOriginalSourceInfo() should render the source map information as a HTML string 1`] = `
-<React.Fragment>
-  <strong>
-    Source Map
-  </strong>
-  <br />
-  https://beta.getsentry.com/_static/sentry/dist/vendor.js.map
-  <br />
-</React.Fragment>
+<FrameDefaultTitleOriginalSourceInfo
+  map="vendor.js.map"
+  mapUrl="https://beta.getsentry.com/_static/sentry/dist/vendor.js.map"
+/>
 `;
diff --git a/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
index eb1d3b2eb2..cd09356b07 100644
--- a/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
+++ b/tests/js/spec/components/events/interfaces/__snapshots__/frameRegisters.spec.jsx.snap
@@ -2,25 +2,560 @@
 
 exports[`FrameRegisters should render registers 1`] = `
 Array [
-  <RegisterValue
-    value="0x00007fff9300bf70"
-  />,
-  <RegisterValue
-    value="0xffffffffffffffff"
-  />,
-  <RegisterValue
-    value="0x0000000000000000"
-  />,
+  <InlinePre
+    data-test-id="frame-registers-value"
+  >
+    <pre
+      className="css-quozkg-InlinePre e1e1y5ql0"
+      data-test-id="frame-registers-value"
+    >
+      <FixedWidth>
+        <span
+          className="css-5okdek-FixedWidth e1e1y5ql1"
+        >
+          0x00007fff9300bf70
+        </span>
+      </FixedWidth>
+      <Tooltip
+        containerDisplayMode="inline-block"
+        position="top"
+        title="Hexadecimal"
+      >
+        <Manager>
+          <Reference>
+            <InnerReference
+              setReferenceNode={[Function]}
+            >
+              <Container
+                aria-describedby="tooltip-123456"
+                containerDisplayMode="inline-block"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <span
+                  aria-describedby="tooltip-123456"
+                  className="css-sce1yi-Container eowlwvy0"
+                  onBlur={[Function]}
+                  onFocus={[Function]}
+                  onMouseEnter={[Function]}
+                  onMouseLeave={[Function]}
+                >
+                  <Toggle
+                    className="icon-filter"
+                    onClick={[Function]}
+                  >
+                    <span
+                      className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                      onClick={[Function]}
+                    />
+                  </Toggle>
+                </span>
+              </Container>
+            </InnerReference>
+          </Reference>
+        </Manager>
+      </Tooltip>
+    </pre>
+  </InlinePre>,
+  <pre
+    className="css-quozkg-InlinePre e1e1y5ql0"
+    data-test-id="frame-registers-value"
+  >
+    <FixedWidth>
+      <span
+        className="css-5okdek-FixedWidth e1e1y5ql1"
+      >
+        0x00007fff9300bf70
+      </span>
+    </FixedWidth>
+    <Tooltip
+      containerDisplayMode="inline-block"
+      position="top"
+      title="Hexadecimal"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <Container
+              aria-describedby="tooltip-123456"
+              containerDisplayMode="inline-block"
+              onBlur={[Function]}
+              onFocus={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <span
+                aria-describedby="tooltip-123456"
+                className="css-sce1yi-Container eowlwvy0"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Toggle
+                  className="icon-filter"
+                  onClick={[Function]}
+                >
+                  <span
+                    className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                    onClick={[Function]}
+                  />
+                </Toggle>
+              </span>
+            </Container>
+          </InnerReference>
+        </Reference>
+      </Manager>
+    </Tooltip>
+  </pre>,
+  <InlinePre
+    data-test-id="frame-registers-value"
+  >
+    <pre
+      className="css-quozkg-InlinePre e1e1y5ql0"
+      data-test-id="frame-registers-value"
+    >
+      <FixedWidth>
+        <span
+          className="css-5okdek-FixedWidth e1e1y5ql1"
+        >
+          0x0000000000000000
+        </span>
+      </FixedWidth>
+      <Tooltip
+        containerDisplayMode="inline-block"
+        position="top"
+        title="Hexadecimal"
+      >
+        <Manager>
+          <Reference>
+            <InnerReference
+              setReferenceNode={[Function]}
+            >
+              <Container
+                aria-describedby="tooltip-123456"
+                containerDisplayMode="inline-block"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <span
+                  aria-describedby="tooltip-123456"
+                  className="css-sce1yi-Container eowlwvy0"
+                  onBlur={[Function]}
+                  onFocus={[Function]}
+                  onMouseEnter={[Function]}
+                  onMouseLeave={[Function]}
+                >
+                  <Toggle
+                    className="icon-filter"
+                    onClick={[Function]}
+                  >
+                    <span
+                      className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                      onClick={[Function]}
+                    />
+                  </Toggle>
+                </span>
+              </Container>
+            </InnerReference>
+          </Reference>
+        </Manager>
+      </Tooltip>
+    </pre>
+  </InlinePre>,
+  <pre
+    className="css-quozkg-InlinePre e1e1y5ql0"
+    data-test-id="frame-registers-value"
+  >
+    <FixedWidth>
+      <span
+        className="css-5okdek-FixedWidth e1e1y5ql1"
+      >
+        0x0000000000000000
+      </span>
+    </FixedWidth>
+    <Tooltip
+      containerDisplayMode="inline-block"
+      position="top"
+      title="Hexadecimal"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <Container
+              aria-describedby="tooltip-123456"
+              containerDisplayMode="inline-block"
+              onBlur={[Function]}
+              onFocus={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <span
+                aria-describedby="tooltip-123456"
+                className="css-sce1yi-Container eowlwvy0"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Toggle
+                  className="icon-filter"
+                  onClick={[Function]}
+                >
+                  <span
+                    className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                    onClick={[Function]}
+                  />
+                </Toggle>
+              </span>
+            </Container>
+          </InnerReference>
+        </Reference>
+      </Manager>
+    </Tooltip>
+  </pre>,
+  <InlinePre
+    data-test-id="frame-registers-value"
+  >
+    <pre
+      className="css-quozkg-InlinePre e1e1y5ql0"
+      data-test-id="frame-registers-value"
+    >
+      <FixedWidth>
+        <span
+          className="css-5okdek-FixedWidth e1e1y5ql1"
+        >
+          0x0000000000000000
+        </span>
+      </FixedWidth>
+      <Tooltip
+        containerDisplayMode="inline-block"
+        position="top"
+        title="Hexadecimal"
+      >
+        <Manager>
+          <Reference>
+            <InnerReference
+              setReferenceNode={[Function]}
+            >
+              <Container
+                aria-describedby="tooltip-123456"
+                containerDisplayMode="inline-block"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <span
+                  aria-describedby="tooltip-123456"
+                  className="css-sce1yi-Container eowlwvy0"
+                  onBlur={[Function]}
+                  onFocus={[Function]}
+                  onMouseEnter={[Function]}
+                  onMouseLeave={[Function]}
+                >
+                  <Toggle
+                    className="icon-filter"
+                    onClick={[Function]}
+                  >
+                    <span
+                      className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                      onClick={[Function]}
+                    />
+                  </Toggle>
+                </span>
+              </Container>
+            </InnerReference>
+          </Reference>
+        </Manager>
+      </Tooltip>
+    </pre>
+  </InlinePre>,
+  <pre
+    className="css-quozkg-InlinePre e1e1y5ql0"
+    data-test-id="frame-registers-value"
+  >
+    <FixedWidth>
+      <span
+        className="css-5okdek-FixedWidth e1e1y5ql1"
+      >
+        0x0000000000000000
+      </span>
+    </FixedWidth>
+    <Tooltip
+      containerDisplayMode="inline-block"
+      position="top"
+      title="Hexadecimal"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <Container
+              aria-describedby="tooltip-123456"
+              containerDisplayMode="inline-block"
+              onBlur={[Function]}
+              onFocus={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <span
+                aria-describedby="tooltip-123456"
+                className="css-sce1yi-Container eowlwvy0"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Toggle
+                  className="icon-filter"
+                  onClick={[Function]}
+                >
+                  <span
+                    className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                    onClick={[Function]}
+                  />
+                </Toggle>
+              </span>
+            </Container>
+          </InnerReference>
+        </Reference>
+      </Manager>
+    </Tooltip>
+  </pre>,
 ]
 `;
 
 exports[`FrameRegisters should skip registers without a value 1`] = `
 Array [
-  <RegisterValue
-    value="0x00007fff9300bf70"
-  />,
-  <RegisterValue
-    value="0x0000000000000000"
-  />,
+  <InlinePre
+    data-test-id="frame-registers-value"
+  >
+    <pre
+      className="css-quozkg-InlinePre e1e1y5ql0"
+      data-test-id="frame-registers-value"
+    >
+      <FixedWidth>
+        <span
+          className="css-5okdek-FixedWidth e1e1y5ql1"
+        >
+          0x00007fff9300bf70
+        </span>
+      </FixedWidth>
+      <Tooltip
+        containerDisplayMode="inline-block"
+        position="top"
+        title="Hexadecimal"
+      >
+        <Manager>
+          <Reference>
+            <InnerReference
+              setReferenceNode={[Function]}
+            >
+              <Container
+                aria-describedby="tooltip-123456"
+                containerDisplayMode="inline-block"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <span
+                  aria-describedby="tooltip-123456"
+                  className="css-sce1yi-Container eowlwvy0"
+                  onBlur={[Function]}
+                  onFocus={[Function]}
+                  onMouseEnter={[Function]}
+                  onMouseLeave={[Function]}
+                >
+                  <Toggle
+                    className="icon-filter"
+                    onClick={[Function]}
+                  >
+                    <span
+                      className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                      onClick={[Function]}
+                    />
+                  </Toggle>
+                </span>
+              </Container>
+            </InnerReference>
+          </Reference>
+        </Manager>
+      </Tooltip>
+    </pre>
+  </InlinePre>,
+  <pre
+    className="css-quozkg-InlinePre e1e1y5ql0"
+    data-test-id="frame-registers-value"
+  >
+    <FixedWidth>
+      <span
+        className="css-5okdek-FixedWidth e1e1y5ql1"
+      >
+        0x00007fff9300bf70
+      </span>
+    </FixedWidth>
+    <Tooltip
+      containerDisplayMode="inline-block"
+      position="top"
+      title="Hexadecimal"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <Container
+              aria-describedby="tooltip-123456"
+              containerDisplayMode="inline-block"
+              onBlur={[Function]}
+              onFocus={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <span
+                aria-describedby="tooltip-123456"
+                className="css-sce1yi-Container eowlwvy0"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Toggle
+                  className="icon-filter"
+                  onClick={[Function]}
+                >
+                  <span
+                    className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                    onClick={[Function]}
+                  />
+                </Toggle>
+              </span>
+            </Container>
+          </InnerReference>
+        </Reference>
+      </Manager>
+    </Tooltip>
+  </pre>,
+  <InlinePre
+    data-test-id="frame-registers-value"
+  >
+    <pre
+      className="css-quozkg-InlinePre e1e1y5ql0"
+      data-test-id="frame-registers-value"
+    >
+      <FixedWidth>
+        <span
+          className="css-5okdek-FixedWidth e1e1y5ql1"
+        >
+          0x0000000000000000
+        </span>
+      </FixedWidth>
+      <Tooltip
+        containerDisplayMode="inline-block"
+        position="top"
+        title="Hexadecimal"
+      >
+        <Manager>
+          <Reference>
+            <InnerReference
+              setReferenceNode={[Function]}
+            >
+              <Container
+                aria-describedby="tooltip-123456"
+                containerDisplayMode="inline-block"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <span
+                  aria-describedby="tooltip-123456"
+                  className="css-sce1yi-Container eowlwvy0"
+                  onBlur={[Function]}
+                  onFocus={[Function]}
+                  onMouseEnter={[Function]}
+                  onMouseLeave={[Function]}
+                >
+                  <Toggle
+                    className="icon-filter"
+                    onClick={[Function]}
+                  >
+                    <span
+                      className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                      onClick={[Function]}
+                    />
+                  </Toggle>
+                </span>
+              </Container>
+            </InnerReference>
+          </Reference>
+        </Manager>
+      </Tooltip>
+    </pre>
+  </InlinePre>,
+  <pre
+    className="css-quozkg-InlinePre e1e1y5ql0"
+    data-test-id="frame-registers-value"
+  >
+    <FixedWidth>
+      <span
+        className="css-5okdek-FixedWidth e1e1y5ql1"
+      >
+        0x0000000000000000
+      </span>
+    </FixedWidth>
+    <Tooltip
+      containerDisplayMode="inline-block"
+      position="top"
+      title="Hexadecimal"
+    >
+      <Manager>
+        <Reference>
+          <InnerReference
+            setReferenceNode={[Function]}
+          >
+            <Container
+              aria-describedby="tooltip-123456"
+              containerDisplayMode="inline-block"
+              onBlur={[Function]}
+              onFocus={[Function]}
+              onMouseEnter={[Function]}
+              onMouseLeave={[Function]}
+            >
+              <span
+                aria-describedby="tooltip-123456"
+                className="css-sce1yi-Container eowlwvy0"
+                onBlur={[Function]}
+                onFocus={[Function]}
+                onMouseEnter={[Function]}
+                onMouseLeave={[Function]}
+              >
+                <Toggle
+                  className="icon-filter"
+                  onClick={[Function]}
+                >
+                  <span
+                    className="icon-filter css-120ji34-Toggle e1e1y5ql2"
+                    onClick={[Function]}
+                  />
+                </Toggle>
+              </span>
+            </Container>
+          </InnerReference>
+        </Reference>
+      </Manager>
+    </Tooltip>
+  </pre>,
 ]
 `;
diff --git a/tests/js/spec/components/events/interfaces/frame.spec.jsx b/tests/js/spec/components/events/interfaces/frame.spec.jsx
index a776513b1a..7a0be4c567 100644
--- a/tests/js/spec/components/events/interfaces/frame.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frame.spec.jsx
@@ -1,7 +1,7 @@
 import React from 'react';
-import {shallow} from 'sentry-test/enzyme';
+import {mount} from 'sentry-test/enzyme';
 
-import {Frame} from 'app/components/events/interfaces/frame';
+import Frame from 'app/components/events/interfaces/frame/frame';
 
 describe('Frame', function() {
   let data;
@@ -20,7 +20,7 @@ describe('Frame', function() {
     });
 
     it('should render the source map information as a HTML string', function() {
-      const frame = shallow(<Frame data={data} components={[]} />);
+      const frame = mount(<Frame data={data} components={[]} />);
 
       expect(frame.find('Tooltip').prop('title')).toMatchSnapshot();
     });
@@ -36,7 +36,7 @@ describe('Frame', function() {
         ],
       };
 
-      const frame = shallow(<Frame data={data} components={[]} isExpanded />);
+      const frame = mount(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('ContextLine')).toMatchSnapshot();
     });
 
@@ -62,7 +62,7 @@ describe('Frame', function() {
         rsp: '0x00007ffedfdff7c0',
       };
 
-      const frame = shallow(
+      const frame = mount(
         <Frame data={data} registers={registers} components={[]} isExpanded />
       );
       expect(frame.find('FrameRegisters').prop('data')).toEqual(registers);
@@ -72,7 +72,7 @@ describe('Frame', function() {
       data = {};
       const registers = {};
 
-      const frame = shallow(
+      const frame = mount(
         <Frame data={data} registers={registers} components={[]} isExpanded />
       );
       expect(frame.find('FrameRegisters')).toHaveLength(0);
@@ -92,7 +92,7 @@ describe('Frame', function() {
         },
       };
 
-      const frame = shallow(<Frame data={data} components={[]} isExpanded />);
+      const frame = mount(<Frame data={data} components={[]} isExpanded />);
       expect(frame.find('FrameVariables').prop('data')).toEqual(data.vars);
     });
   });
diff --git a/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
index 3ed2daecb7..d2a0dba026 100644
--- a/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
+++ b/tests/js/spec/components/events/interfaces/frameRegisters.spec.jsx
@@ -1,8 +1,8 @@
 import React from 'react';
-import {shallow, mount} from 'sentry-test/enzyme';
+import {mount} from 'sentry-test/enzyme';
 
-import FrameRegisters from 'app/components/events/interfaces/frameRegisters';
-import RegisterValue from 'app/components/events/interfaces/frameRegisters/registerValue';
+import FrameRegisters from 'app/components/events/interfaces/frameRegisters/frameRegisters';
+import FrameRegistersValue from 'app/components/events/interfaces/frameRegisters/frameRegistersValue';
 
 describe('FrameRegisters', () => {
   it('should render registers', () => {
@@ -12,8 +12,8 @@ describe('FrameRegisters', () => {
       r12: '0x0000000000000000',
     };
 
-    const wrapper = shallow(<FrameRegisters data={registers} />);
-    expect(wrapper.find('RegisterValue')).toMatchSnapshot();
+    const wrapper = mount(<FrameRegisters data={registers} />);
+    expect(wrapper.find('[data-test-id="frame-registers-value"]')).toMatchSnapshot();
   });
 
   it('should skip registers without a value', () => {
@@ -23,8 +23,8 @@ describe('FrameRegisters', () => {
       r12: '0x0000000000000000',
     };
 
-    const wrapper = shallow(<FrameRegisters data={registers} />);
-    expect(wrapper.find('RegisterValue')).toMatchSnapshot();
+    const wrapper = mount(<FrameRegisters data={registers} />);
+    expect(wrapper.find('[data-test-id="frame-registers-value"]')).toMatchSnapshot();
   });
 });
 
@@ -32,7 +32,7 @@ describe('RegisterValue', () => {
   let wrapper;
   describe('with string value', () => {
     beforeEach(() => {
-      wrapper = mount(<RegisterValue value="0x000000000000000a" />);
+      wrapper = mount(<FrameRegistersValue value="0x000000000000000a" />);
     });
 
     it('should display the hexadecimal value', () => {
@@ -47,7 +47,7 @@ describe('RegisterValue', () => {
 
   describe('with numeric value', () => {
     beforeEach(() => {
-      wrapper = mount(<RegisterValue value={10} />);
+      wrapper = mount(<FrameRegistersValue value={10} />);
     });
 
     it('should display the hexadecimal value', () => {
@@ -62,7 +62,7 @@ describe('RegisterValue', () => {
 
   describe('with unknown value', () => {
     beforeEach(() => {
-      wrapper = mount(<RegisterValue value="xyz" />);
+      wrapper = mount(<FrameRegistersValue value="xyz" />);
     });
 
     it('should display the hexadecimal value', () => {
