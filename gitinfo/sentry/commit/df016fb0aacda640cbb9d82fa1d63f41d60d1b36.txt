commit df016fb0aacda640cbb9d82fa1d63f41d60d1b36
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Mon Jul 29 08:47:00 2019 -0700

    feat(api): Allow team admins to manage memberships of their teâ€¦ (#14144)
    
    This changes the API to allow "Admins" (i.e. `team:admin` access) to invite/remove members from teams in which they belong.
    
    Closes PROD-102

diff --git a/src/sentry/api/endpoints/organization_member_team_details.py b/src/sentry/api/endpoints/organization_member_team_details.py
index e3cdffe029..5e41f0bffb 100644
--- a/src/sentry/api/endpoints/organization_member_team_details.py
+++ b/src/sentry/api/endpoints/organization_member_team_details.py
@@ -46,6 +46,15 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
     permission_classes = [RelaxedOrganizationPermission]
 
     def _can_access(self, request, member, organization):
+        """
+        Conditions where user can modify the requested resource:
+
+        * If they are an active superuser
+        * If they are modifying their own membership
+        * If the user's role is higher than the targeted user's role (e.g. "admin" can't modify "owner")
+        * If the user is an "admin" and they are modifying a team they are a member of
+        """
+
         if is_active_superuser(request):
             return True
 
@@ -67,6 +76,15 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
 
         return False
 
+    def _can_admin_team(self, request, organization, team_slug):
+        return OrganizationMember.objects.filter(
+            organization=organization,
+            user__id=request.user.id,
+            user__is_active=True,
+            role="admin",
+            organizationmemberteam__team__slug=team_slug,
+        ).exists()
+
     def _get_member(self, request, organization, member_id):
         if member_id == 'me':
             queryset = OrganizationMember.objects.filter(
@@ -99,7 +117,9 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not self._can_access(request, om, organization):
+        can_admin_team = self._can_admin_team(request, organization, team_slug)
+
+        if not self._can_access(request, om, organization) and not can_admin_team:
             return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         try:
@@ -116,7 +136,8 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
                 organizationmember=om,
             )
         except OrganizationMemberTeam.DoesNotExist:
-            if not (request.access.has_scope('org:write') or organization.flags.allow_joinleave):
+            if not (request.access.has_scope('org:write')
+                    or organization.flags.allow_joinleave or can_admin_team):
                 omt, created = OrganizationAccessRequest.objects.get_or_create(
                     team=team,
                     member=om,
@@ -152,7 +173,9 @@ class OrganizationMemberTeamDetailsEndpoint(OrganizationEndpoint):
         except OrganizationMember.DoesNotExist:
             raise ResourceDoesNotExist
 
-        if not self._can_access(request, om, organization):
+        can_admin_team = self._can_admin_team(request, organization, team_slug)
+
+        if not self._can_access(request, om, organization) and not can_admin_team:
             return Response({'detail': ERR_INSUFFICIENT_ROLE}, status=400)
 
         try:
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 00fbe2d787..162e12f6f4 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1242,7 +1242,7 @@ SENTRY_ROLES = (
     }, {
         'id': 'admin',
         'name': 'Admin',
-        'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on (or all teams, if open membership is on).',
+        'desc': 'Admin privileges on any teams of which they\'re a member. They can create new teams and projects, as well as remove teams and projects which they already hold membership on (or all teams, if open membership is on). Additionally, they can manage memberships of teams that they are members of.',
         'scopes': set(
             [
                 'event:read',
diff --git a/tests/sentry/api/endpoints/test_organization_member_team_details.py b/tests/sentry/api/endpoints/test_organization_member_team_details.py
index d80fa9f178..62f49248d6 100644
--- a/tests/sentry/api/endpoints/test_organization_member_team_details.py
+++ b/tests/sentry/api/endpoints/test_organization_member_team_details.py
@@ -294,6 +294,90 @@ class CreateOrganizationMemberTeamTest(APITestCase):
             organizationmember__user=owner,
         ).exists()
 
+    def test_admin_not_in_team_cannot_add_member(self):
+        owner = self.create_user()
+        admin = self.create_user()
+        organization = self.create_organization(name='foo', owner=owner)
+        organization.flags.allow_joinleave = False
+        organization.save()
+        team = self.create_team(name='foo', organization=organization)
+        self.create_member(
+            organization=organization,
+            user=admin,
+            role="admin",
+            teams=[],
+        )
+
+        user = self.create_user('dummy@example.com')
+        member_om = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+            teams=[],
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-team-details',
+            args=[
+                organization.slug,
+                member_om.id,
+                team.slug,
+            ]
+        )
+
+        self.login_as(admin)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 400
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+        ).exists()
+
+    def test_admin_in_team_can_add_member(self):
+        owner = self.create_user()
+        admin = self.create_user()
+        organization = self.create_organization(name='foo', owner=owner)
+        organization.flags.allow_joinleave = False
+        organization.save()
+        team = self.create_team(name='foo', organization=organization)
+        self.create_member(
+            organization=organization,
+            user=admin,
+            role="admin",
+            teams=[team],
+        )
+
+        user = self.create_user('dummy@example.com')
+        member_om = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+            teams=[],
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-team-details',
+            args=[
+                organization.slug,
+                member_om.id,
+                team.slug,
+            ]
+        )
+
+        self.login_as(admin)
+
+        resp = self.client.post(path)
+
+        assert resp.status_code == 201
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+        ).exists()
+
 
 class DeleteOrganizationMemberTeamTest(APITestCase):
     def test_can_leave_as_member(self):
@@ -570,3 +654,83 @@ class DeleteOrganizationMemberTeamTest(APITestCase):
             team=team,
             organizationmember=owner_om,
         ).exists()
+
+    def test_admin_in_team_can_remove_member(self):
+        admin = self.create_user()
+        organization = self.create_organization(name='foo')
+        team = self.create_team(name='foo', organization=organization)
+        self.create_member(
+            organization=organization,
+            user=admin,
+            role='admin',
+            teams=[team],
+        )
+        organization.flags.allow_joinleave = False
+        organization.save()
+        user = self.create_user('dummy@example.com')
+        member_om = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+            teams=[team],
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-team-details',
+            args=[
+                organization.slug,
+                member_om.id,
+                team.slug,
+            ]
+        )
+
+        self.login_as(admin)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 200
+
+        assert not OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+        ).exists()
+
+    def test_admin_not_in_team_cannot_remove_member(self):
+        admin = self.create_user()
+        organization = self.create_organization(name='foo')
+        organization.flags.allow_joinleave = False
+        organization.save()
+        team = self.create_team(name='foo', organization=organization)
+        self.create_member(
+            organization=organization,
+            user=admin,
+            role='admin',
+            teams=[],
+        )
+        user = self.create_user()
+        member_om = self.create_member(
+            organization=organization,
+            user=user,
+            role='member',
+            teams=[team],
+        )
+
+        path = reverse(
+            'sentry-api-0-organization-member-team-details',
+            args=[
+                organization.slug,
+                member_om.id,
+                team.slug,
+            ]
+        )
+
+        self.login_as(admin)
+
+        resp = self.client.delete(path)
+
+        assert resp.status_code == 400
+
+        assert OrganizationMemberTeam.objects.filter(
+            team=team,
+            organizationmember=member_om,
+        ).exists()
