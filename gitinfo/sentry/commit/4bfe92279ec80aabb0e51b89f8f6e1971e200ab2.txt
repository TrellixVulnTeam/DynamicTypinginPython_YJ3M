commit 4bfe92279ec80aabb0e51b89f8f6e1971e200ab2
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Sep 21 15:44:56 2017 -0700

    feat(slack): Initial draft of Slack connector
    
    Add support for Slack within integrations, as well as Identity capture and a generic OAuth2 abstraction.

diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index 6a659efcb7..73e7995363 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -15,9 +15,12 @@ class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
                     'id': provider.id,
                     'name': provider.name,
                     'config': provider.get_config(),
-                    'setupUri': '/organizations/{}/integrations/{}/setup/'.format(
-                        organization.slug,
-                        provider.id,
+                    'setupDialog': dict(
+                        url='/organizations/{}/integrations/{}/setup/'.format(
+                            organization.slug,
+                            provider.id,
+                        ),
+                        **provider.setup_dialog_config
                     )
                 }
             )
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 6f9d6bc01b..11a99d07e9 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1174,7 +1174,9 @@ SENTRY_ONPREMISE = True
 # when checking REMOTE_ADDR ip addresses
 SENTRY_USE_X_FORWARDED_FOR = True
 
-SENTRY_DEFAULT_INTEGRATIONS = ()
+SENTRY_DEFAULT_INTEGRATIONS = (
+    'sentry.integrations.slack.SlackIntegration',
+)
 
 
 def get_raven_config():
diff --git a/src/sentry/integrations/__init__.py b/src/sentry/integrations/__init__.py
index d98946a1f3..0bb8eb4359 100644
--- a/src/sentry/integrations/__init__.py
+++ b/src/sentry/integrations/__init__.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 from .base import *  # NOQA
 from .manager import IntegrationManager  # NOQA
+from .oauth import *  # NOQA
 from .view import *  # NOQA
 
 
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index a1c7780d21..e38b7092bb 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -24,6 +24,12 @@ class Integration(object):
     # a human readable name (e.g. 'Slack')
     name = None
 
+    # configuration for the setup dialog
+    setup_dialog_config = {
+        'width': 600,
+        'height': 600,
+    }
+
     def get_logger(self):
         return logging.getLogger('sentry.integration.%s' % (self.get_id(), ))
 
@@ -53,7 +59,14 @@ class Integration(object):
         >>>         'required': True,
         >>>     }]
         """
-        raise NotImplementedError
+        return []
+
+    def is_configured(self):
+        """
+        Return a boolean describing whether this integration should be made
+        available (e.g. per system-configuration).
+        """
+        return True
 
     def build_integration(self, state):
         """
diff --git a/src/sentry/integrations/helper.py b/src/sentry/integrations/helper.py
index 16bef0c313..54da474e34 100644
--- a/src/sentry/integrations/helper.py
+++ b/src/sentry/integrations/helper.py
@@ -5,10 +5,14 @@ __all__ = ['PipelineHelper']
 import json
 import logging
 
+from django.db import IntegrityError, transaction
 from django.http import HttpResponse
 
 from sentry.api.serializers import serialize
-from sentry.models import Integration
+from sentry.models import (
+    Identity, IdentityProvider, IdentityStatus, Integration, Organization,
+    UserIdentity
+)
 from sentry.utils.hashlib import md5_text
 from sentry.utils.http import absolute_uri
 from sentry.web.helpers import render_to_response
@@ -34,13 +38,20 @@ logger = logging.getLogger('sentry.integrations')
 
 
 class PipelineHelper(object):
+    logger = logger
+
     @classmethod
-    def get_for_request(cls, request, organization, provider_id):
+    def get_for_request(cls, request, provider_id):
         session = request.session.get(SESSION_KEY, {})
         if not session:
             logger.error('integrations.setup.missing-session-data')
             return None
 
+        # TODO(dcramer): enforce access check
+        organization = Organization.objects.get(
+            id=session['org'],
+        )
+
         if session.get('int'):
             integration = Integration.objects.get(
                 id=session['int'],
@@ -49,6 +60,14 @@ class PipelineHelper(object):
         else:
             integration = None
 
+        if provider_id != session['pro']:
+            logger.error('integrations.setup.invalid-provider')
+            return None
+
+        if session['uid'] != request.user.id:
+            logger.error('integrations.setup.invalid-uid')
+            return None
+
         instance = cls(
             request=request,
             organization=organization,
@@ -56,6 +75,7 @@ class PipelineHelper(object):
             provider_id=provider_id,
             step=session['step'],
             dialog=bool(session['dlg']),
+            state=session['state'],
         )
         if instance.signature != session['sig']:
             logger.error('integrations.setup.invalid-signature')
@@ -98,14 +118,13 @@ class PipelineHelper(object):
             'int': self.integration.id if self.integration else '',
             'sig': self.signature,
             'step': self.step,
-            'state': {},
+            'state': self.state,
             'dlg': int(self.dialog),
         }
         self.request.session.modified = True
 
     def get_redirect_url(self):
-        return absolute_uri('/organizations/{}/integrations/{}/setup/'.format(
-            self.organization.slug,
+        return absolute_uri('/extensions/{}/setup/'.format(
             self.provider.id,
         ))
 
@@ -152,7 +171,7 @@ class PipelineHelper(object):
     def error(self, message):
         # TODO(dcramer): this needs to handle the dialog
         self.clear_session()
-        return self._jsonp_response({'detail': message}, False)
+        return self._dialog_response({'detail': message}, False)
 
     def bind_state(self, key, value):
         self.state[key] = value
@@ -169,14 +188,40 @@ class PipelineHelper(object):
                 name=data.get('name', self.provider.name),
             )
         else:
-            self.integration = Integration.objects.create(
+            self.integration, _ = Integration.objects.get_or_create(
                 provider=self.provider.id,
-                metadata=data.get('metadata', {}),
-                name=data.get('name', data['external_id']),
                 external_id=data['external_id'],
+                defaults={
+                    'metadata': data.get('metadata', {}),
+                    'name': data.get('name', data['external_id']),
+                }
             )
             self.integration.add_organization(self.organization.id)
 
+        id_config = data.get('identity')
+        if id_config:
+            idp = IdentityProvider.get(id_config['type'], id_config['instance'])
+            identity, created = Identity.objects.get_or_create(
+                idp=idp,
+                external_id=id_config['external_id'],
+                defaults={
+                    'status': IdentityStatus.VALID,
+                    'scopes': id_config['scopes'],
+                    'data': id_config['data'],
+                },
+            )
+            if not created:
+                if identity.status != IdentityStatus.VALID:
+                    identity.update(status=IdentityStatus.VALID)
+            try:
+                with transaction.atomic():
+                    UserIdentity.objects.create(
+                        user=self.request.user,
+                        identity=identity,
+                    )
+            except IntegrityError:
+                pass
+
         return self._dialog_response(serialize(self.integration, self.request.user), True)
 
     def _dialog_response(self, data, success):
diff --git a/src/sentry/integrations/manager.py b/src/sentry/integrations/manager.py
index 918b5d3a29..aa6e401963 100644
--- a/src/sentry/integrations/manager.py
+++ b/src/sentry/integrations/manager.py
@@ -14,10 +14,13 @@ class IntegrationManager(object):
         self.__values = {}
 
     def __iter__(self):
-        return (self.get(k) for k in six.iterkeys(self.__values))
+        return iter(self.all())
 
     def all(self):
-        return iter(self)
+        for key in six.iterkeys(self.__values):
+            provider = self.get(key)
+            if provider.is_configured():
+                yield provider
 
     def get(self, key, **kwargs):
         try:
diff --git a/src/sentry/integrations/oauth.py b/src/sentry/integrations/oauth.py
new file mode 100644
index 0000000000..10bc7232bd
--- /dev/null
+++ b/src/sentry/integrations/oauth.py
@@ -0,0 +1,167 @@
+from __future__ import absolute_import, print_function
+
+__all__ = ['OAuth2Integration', 'OAuth2CallbackView', 'OAuth2LoginView']
+
+from six.moves.urllib.parse import parse_qsl, urlencode
+from uuid import uuid4
+
+from sentry.http import safe_urlopen, safe_urlread
+from sentry.utils import json
+from sentry.utils.http import absolute_uri
+
+from .base import Integration
+from .view import PipelineView
+
+ERR_INVALID_STATE = 'An error occurred while validating your request.'
+
+
+class OAuth2Integration(Integration):
+    oauth_access_token_url = ''
+    oauth_authorize_url = ''
+    oauth_client_id = ''
+    oauth_client_secret = ''
+    oauth_refresh_token_url = ''
+    oauth_scopes = ()
+
+    def is_configured(self):
+        return (
+            self.oauth_client_id and
+            self.oauth_client_secret and
+            self.oauth_access_token_url and
+            self.oauth_authorize_url
+        )
+
+    def get_pipeline(self):
+        return [
+            OAuth2LoginView(
+                authorize_url=self.oauth_authorize_url,
+                client_id=self.oauth_client_id,
+                scope=' '.join(self.oauth_scopes),
+            ),
+            OAuth2CallbackView(
+                access_token_url=self.oauth_access_token_url,
+                client_id=self.oauth_client_id,
+                client_secret=self.oauth_client_secret,
+            ),
+        ]
+
+
+class OAuth2LoginView(PipelineView):
+    authorize_url = None
+    client_id = None
+    scope = ''
+
+    def __init__(self, authorize_url=None, client_id=None, scope=None, *args, **kwargs):
+        super(OAuth2LoginView, self).__init__(*args, **kwargs)
+        if authorize_url is not None:
+            self.authorize_url = authorize_url
+        if client_id is not None:
+            self.client_id = client_id
+        if scope is not None:
+            self.scope = scope
+
+    def get_scope(self):
+        return self.scope
+
+    def get_authorize_url(self):
+        return self.authorize_url
+
+    def get_authorize_params(self, state, redirect_uri):
+        return {
+            'client_id': self.client_id,
+            'response_type': "code",
+            'scope': self.get_scope(),
+            'state': state,
+            'redirect_uri': redirect_uri,
+        }
+
+    def dispatch(self, request, helper):
+        if 'code' in request.GET:
+            return helper.next_step()
+
+        state = uuid4().hex
+
+        params = self.get_authorize_params(
+            state=state,
+            redirect_uri=absolute_uri(helper.get_redirect_url()),
+        )
+        redirect_uri = '{}?{}'.format(self.get_authorize_url(), urlencode(params))
+
+        helper.bind_state('state', state)
+
+        return self.redirect(redirect_uri)
+
+
+class OAuth2CallbackView(PipelineView):
+    access_token_url = None
+    client_id = None
+    client_secret = None
+
+    def __init__(self, access_token_url=None, client_id=None, client_secret=None, *args, **kwargs):
+        super(OAuth2CallbackView, self).__init__(*args, **kwargs)
+        if access_token_url is not None:
+            self.access_token_url = access_token_url
+        if client_id is not None:
+            self.client_id = client_id
+        if client_secret is not None:
+            self.client_secret = client_secret
+
+    def get_token_params(self, code, redirect_uri):
+        return {
+            'grant_type': 'authorization_code',
+            'code': code,
+            'redirect_uri': redirect_uri,
+            'client_id': self.client_id,
+            'client_secret': self.client_secret,
+        }
+
+    def exchange_token(self, request, helper, code):
+        # TODO: this needs the auth yet
+        data = self.get_token_params(
+            code=code,
+            redirect_uri=absolute_uri(helper.get_redirect_url()),
+        )
+        req = safe_urlopen(self.access_token_url, data=data)
+        body = safe_urlread(req)
+        if req.headers['Content-Type'].startswith('application/x-www-form-urlencoded'):
+            return dict(parse_qsl(body))
+        return json.loads(body)
+
+    def dispatch(self, request, helper):
+        error = request.GET.get('error')
+        state = request.GET.get('state')
+        code = request.GET.get('code')
+
+        if error:
+            helper.logger.info('auth.token-exchange-error', extra={
+                'error': error,
+            })
+            return helper.error(error)
+
+        if state != helper.fetch_state('state'):
+            helper.logger.info('auth.token-exchange-error', extra={
+                'error': 'invalid_state',
+            })
+            return helper.error(ERR_INVALID_STATE)
+
+        data = self.exchange_token(request, helper, code)
+
+        if 'error_description' in data:
+            helper.logger.info('auth.token-exchange-error', extra={
+                'error': data.get('error'),
+            })
+            return helper.error(data['error_description'])
+
+        if 'error' in data:
+            helper.logger.info('auth.token-exchange-error', extra={
+                'error': data['error'],
+            })
+            return helper.error(
+                'There was an error when retrieving a token from the upstream service.')
+
+        # we can either expect the API to be implicit and say "im looking for
+        # blah within state data" or we need to pass implementation + call a
+        # hook here
+        helper.bind_state('data', data)
+
+        return helper.next_step()
diff --git a/src/sentry/integrations/slack/__init__.py b/src/sentry/integrations/slack/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/slack/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/slack/integration.py b/src/sentry/integrations/slack/integration.py
new file mode 100644
index 0000000000..d8ae587835
--- /dev/null
+++ b/src/sentry/integrations/slack/integration.py
@@ -0,0 +1,52 @@
+from __future__ import absolute_import
+
+from sentry import options
+from sentry.integrations import OAuth2Integration
+
+options.register('slack.client-id')
+options.register('slack.client-secret')
+options.register('slack.verification-token')
+
+
+class SlackIntegration(OAuth2Integration):
+    id = 'slack'
+    name = 'Slack'
+
+    oauth_access_token_url = 'https://slack.com/api/oauth.access'
+    oauth_authorize_url = 'https://slack.com/oauth/authorize'
+    oauth_client_id = options.get('slack.client-id')
+    oauth_client_secret = options.get('slack.client-secret')
+    oauth_scopes = (
+        'bot',
+        'chat:write:bot',
+        'commands',
+        'team:read',
+    )
+
+    def build_integration(self, state):
+        data = state['data']
+        assert data['ok']
+        return {
+            'external_id': data['team_id'],
+            'name': data['team_name'],
+            # TODO(dcramer): we should probably store an Identity for the bot,
+            # and just skip associating them with a user?
+            'metadata': {
+                'bot_access_token': data['bot']['bot_access_token'],
+                'bot_user_id': data['bot']['bot_user_id'],
+                'scopes': sorted(data['scope'].split(',')),
+            },
+            'identity': self.build_identity(state)
+        }
+
+    def build_identity(self, state):
+        data = state['data']
+        return {
+            'type': 'slack',
+            'instance': 'slack.com',
+            'external_id': data['user_id'],
+            'scopes': sorted(data['scope'].split(',')),
+            'data': {
+                'access_token': data['access_token'],
+            },
+        }
diff --git a/src/sentry/models/identity.py b/src/sentry/models/identity.py
index c8c694c79a..20ed02641c 100644
--- a/src/sentry/models/identity.py
+++ b/src/sentry/models/identity.py
@@ -36,6 +36,14 @@ class IdentityProvider(Model):
         db_table = 'sentry_identityprovider'
         unique_together = (('type', 'instance'),)
 
+    @classmethod
+    def get(cls, type, instance):
+        # TODO(dcramer): add caching
+        return cls.objects.get_or_create(
+            type=type,
+            instance=instance,
+        )[0]
+
 
 class Identity(Model):
     """
diff --git a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
index 5ed0922938..faf5188850 100644
--- a/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
+++ b/src/sentry/static/sentry/app/components/organizations/homeContainer.jsx
@@ -21,7 +21,7 @@ const HomeContainer = React.createClass({
     let access = this.getAccess();
 
     return (
-      <div className="organization-home">
+      <div className={`${this.props.className || ''} organization-home`}>
         <div className="sub-header flex flex-container flex-vertically-centered">
           <div>
             <ProjectSelector organization={org} />
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
index 315c93381c..e13da2445e 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations.jsx
@@ -38,7 +38,7 @@ export default class OrganizationIntegrations extends AsyncView {
         itemList: sortArray(itemList, item => item.name)
       });
     } else {
-      IndicatorStore.add(t('An error occurred: %s.', data.detail), 'error', {
+      IndicatorStore.add(data.detail, 'error', {
         duration: 5000
       });
     }
@@ -80,11 +80,8 @@ export default class OrganizationIntegrations extends AsyncView {
   };
 
   launchAddIntegration = integration => {
-    let url = `${integration.setupUri}?callback=${this.dialogCallbackName}&init=1`;
     let name = 'sentryAddIntegration';
-    let width = 400;
-    let height = 400;
-
+    let {url, width, height} = integration.setupDialog;
     // this attempts to center the dialog
     let screenLeft = window.screenLeft != undefined ? window.screenLeft : screen.left;
     let screenTop = window.screenTop != undefined ? window.screenTop : screen.top;
@@ -131,9 +128,14 @@ export default class OrganizationIntegrations extends AsyncView {
 
   renderBody() {
     let itemList = this.state.itemList;
+    let iconStyles = {
+      width: 24,
+      height: 24,
+      display: 'inline-block'
+    };
 
     return (
-      <OrganizationHomeContainer>
+      <OrganizationHomeContainer className="ref-organization-integrations">
         <div className="pull-right">
           <DropdownLink
             anchorRight
@@ -160,6 +162,12 @@ export default class OrganizationIntegrations extends AsyncView {
                   {itemList.map(integration => {
                     return (
                       <tr key={integration.id}>
+                        <td style={{width: 24, paddingRight: 0}}>
+                          <span
+                            className={`icon icon-integration icon-${integration.provider.id}`}
+                            style={iconStyles}
+                          />
+                        </td>
                         <td>
                           <strong>
                             {integration.name}
diff --git a/src/sentry/testutils/cases.py b/src/sentry/testutils/cases.py
index 7af00d1566..4b62871c67 100644
--- a/src/sentry/testutils/cases.py
+++ b/src/sentry/testutils/cases.py
@@ -11,6 +11,7 @@ from __future__ import absolute_import
 __all__ = (
     'TestCase', 'TransactionTestCase', 'APITestCase', 'AuthProviderTestCase', 'RuleTestCase',
     'PermissionTestCase', 'PluginTestCase', 'CliTestCase', 'AcceptanceTestCase',
+    'IntegrationTestCase',
 )
 
 import base64
@@ -25,6 +26,7 @@ from contextlib import contextmanager
 from datetime import datetime
 from django.conf import settings
 from django.contrib.auth import login
+from django.contrib.auth.models import AnonymousUser
 from django.core.cache import cache
 from django.core.urlresolvers import reverse
 from django.http import HttpRequest
@@ -106,12 +108,16 @@ class BaseTestCase(Fixtures, Exam):
         self.client.cookies[session_cookie] = self.session.session_key
         self.client.cookies[session_cookie].update(cookie_data)
 
-    def login_as(self, user, organization_id=None):
-        user.backend = settings.AUTHENTICATION_BACKENDS[0]
-
+    def make_request(self, user=None):
         request = HttpRequest()
         request.session = self.session
+        request.user = user or AnonymousUser()
+        return request
 
+    def login_as(self, user, organization_id=None):
+        user.backend = settings.AUTHENTICATION_BACKENDS[0]
+
+        request = self.make_request()
         login(request, user)
         request.user = user
         if organization_id:
@@ -488,3 +494,32 @@ class AcceptanceTestCase(TransactionTestCase):
             name=settings.SESSION_COOKIE_NAME,
             value=self.session.session_key,
         )
+
+
+class IntegrationTestCase(TestCase):
+    provider = None
+
+    def setUp(self):
+        from sentry.integrations.helper import PipelineHelper
+
+        super(IntegrationTestCase, self).setUp()
+
+        self.organization = self.create_organization(name='foo', owner=self.user)
+        self.login_as(self.user)
+        self.path = '/extensions/{}/setup/'.format(self.provider.id)
+        self.request = self.make_request(self.user)
+        # XXX(dcramer): this is a bit of a hack, but it helps contain this test
+        self.helper = PipelineHelper.initialize(
+            request=self.request,
+            organization=self.organization,
+            provider_id=self.provider.id,
+            dialog=True,
+        )
+        self.save_session()
+
+        feature = Feature('organizations:integrations-v3')
+        feature.__enter__()
+        self.addCleanup(feature.__exit__, None, None, None)
+
+    def assertDialogSuccess(self, resp):
+        assert 'window.opener.postMessage(' in resp.content
diff --git a/src/sentry/utils/hashlib.py b/src/sentry/utils/hashlib.py
index f8caace8e3..fbc9787dc0 100644
--- a/src/sentry/utils/hashlib.py
+++ b/src/sentry/utils/hashlib.py
@@ -13,9 +13,15 @@ from hashlib import sha1 as _sha1
 from django.utils.encoding import force_bytes
 
 
-def md5_text(x):
-    return _md5(force_bytes(x, errors='replace'))
+def md5_text(*args):
+    m = _md5()
+    for x in args:
+        m.update(force_bytes(x, errors='replace'))
+    return m
 
 
-def sha1_text(x):
-    return _sha1(force_bytes(x, errors='replace'))
+def sha1_text(*args):
+    m = _sha1()
+    for x in args:
+        m.update(force_bytes(x, errors='replace'))
+    return m
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index bd4d8009d8..5abeaf659b 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -117,6 +117,9 @@ def pytest_configure(config):
             },
             'mail.backend': 'django.core.mail.backends.locmem.EmailBackend',
             'system.url-prefix': 'http://testserver',
+            'slack.client-id': 'slack-client-id',
+            'slack.client-secret': 'slack-client-secret',
+            'slack.verification-token': 'slack-verification-token',
         }
     )
 
@@ -138,7 +141,22 @@ def pytest_configure(config):
 
     initialize_receivers()
     setup_services()
+    register_extensions()
 
+    from sentry.utils.redis import clusters
+
+    with clusters.get('default').all() as client:
+        client.flushdb()
+
+    # force celery registration
+    from sentry.celery import app  # NOQA
+
+    # disable DISALLOWED_IPS
+    from sentry import http
+    http.DISALLOWED_IPS = set()
+
+
+def register_extensions():
     from sentry.plugins import plugins
     from sentry.plugins.utils import TestIssuePlugin2
 
@@ -146,25 +164,15 @@ def pytest_configure(config):
 
     from sentry import integrations
     from sentry.integrations.example import ExampleIntegration
+    from sentry.integrations.slack import SlackIntegration
     integrations.register(ExampleIntegration)
+    integrations.register(SlackIntegration)
 
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
 
     bindings.add('repository.provider', DummyRepositoryProvider, id='dummy')
 
-    from sentry.utils.redis import clusters
-
-    with clusters.get('default').all() as client:
-        client.flushdb()
-
-    # force celery registration
-    from sentry.celery import app  # NOQA
-
-    # disable DISALLOWED_IPS
-    from sentry import http
-    http.DISALLOWED_IPS = set()
-
 
 def pytest_runtest_teardown(item):
     from sentry import tsdb
diff --git a/src/sentry/web/frontend/integration_setup.py b/src/sentry/web/frontend/integration_setup.py
index 1c9ed27771..a74687857f 100644
--- a/src/sentry/web/frontend/integration_setup.py
+++ b/src/sentry/web/frontend/integration_setup.py
@@ -4,14 +4,12 @@ import logging
 
 from sentry import features
 from sentry.integrations.helper import PipelineHelper
-from sentry.web.frontend.base import OrganizationView
+from sentry.web.frontend.base import BaseView
 
 logger = logging.getLogger('sentry.integrations')
 
 
-class IntegrationSetupView(OrganizationView):
-    required_scope = 'org:integrations'
-
+class IntegrationSetupView(BaseView):
     csrf_protect = False
 
     def has_feature(self, request, organization):
@@ -21,32 +19,17 @@ class IntegrationSetupView(OrganizationView):
             actor=request.user,
         )
 
-    def handle(self, request, organization, provider_id):
-        if not self.has_feature(request, organization):
-            return self.redirect('/')
-
-        if request.GET.get('init') != '1':
-            helper = PipelineHelper.get_for_request(
-                request=request,
-                organization=organization,
-                provider_id=provider_id,
-            )
-        else:
-            helper = None
-
-        if helper:
-            try:
-                return helper.current_step()
-            except Exception:
-                logging.exception('integration.setup-error')
-                return helper.error('an internal error occurred')
-
-        helper = PipelineHelper.initialize(
+    def handle(self, request, provider_id):
+        helper = PipelineHelper.get_for_request(
             request=request,
-            organization=organization,
             provider_id=provider_id,
-            dialog=True,
         )
-        # we redirect the user to scrub parameters from the URL to avoid passing
-        # them into third parties
-        return self.redirect(request.path)
+        if not helper:
+            logging.error('integration.setup-error')
+            return self.redirect('/')
+
+        try:
+            return helper.current_step()
+        except Exception:
+            logging.exception('integration.setup-error')
+            return helper.error('an internal error occurred')
diff --git a/src/sentry/web/frontend/organization_integration_setup.py b/src/sentry/web/frontend/organization_integration_setup.py
new file mode 100644
index 0000000000..b1b97fc942
--- /dev/null
+++ b/src/sentry/web/frontend/organization_integration_setup.py
@@ -0,0 +1,33 @@
+from __future__ import absolute_import, print_function
+
+import logging
+
+from sentry import features
+from sentry.integrations.helper import PipelineHelper
+from sentry.web.frontend.base import OrganizationView
+
+logger = logging.getLogger('sentry.integrations')
+
+
+class OrganizationIntegrationSetupView(OrganizationView):
+    required_scope = 'org:integrations'
+
+    csrf_protect = False
+
+    def has_feature(self, request, organization):
+        return features.has(
+            'organizations:integrations-v3',
+            organization=organization,
+            actor=request.user,
+        )
+
+    def handle(self, request, organization, provider_id):
+        if not self.has_feature(request, organization):
+            return self.redirect('/')
+        helper = PipelineHelper.initialize(
+            request=request,
+            organization=organization,
+            provider_id=provider_id,
+            dialog=True,
+        )
+        return self.redirect(helper.get_redirect_url())
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index c893623168..7d2038eb6f 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -45,6 +45,8 @@ from sentry.web.frontend.organization_auth_settings import \
     OrganizationAuthSettingsView
 from sentry.web.frontend.organization_member_settings import \
     OrganizationMemberSettingsView
+from sentry.web.frontend.organization_integration_setup import \
+    OrganizationIntegrationSetupView
 from sentry.web.frontend.out import OutView
 from sentry.web.frontend.organization_members import OrganizationMembersView
 from sentry.web.frontend.project_issue_tracking import ProjectIssueTrackingView
@@ -325,7 +327,7 @@ urlpatterns += patterns(
     ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/integrations/(?P<provider_id>[\w_-]+)/setup/$',
-        IntegrationSetupView.as_view()
+        OrganizationIntegrationSetupView.as_view()
     ),
     url(
         r'^organizations/(?P<organization_slug>[\w_-]+)/members/$',
@@ -454,6 +456,8 @@ urlpatterns += patterns(
     # prefix here, but unfortunately sentry.io has that mapped to marketing
     # assets for the time being
     url(r'^extensions/cloudflare/', include('sentry.integrations.cloudflare.urls')),
+    url(r'^extensions/(?P<provider_id>[\w_-]+)/setup/$', IntegrationSetupView.as_view()),
+
     url(r'^plugins/', include('sentry.plugins.base.urls')),
 
     # Generic API
diff --git a/tests/acceptance/test_organization_integrations.py b/tests/acceptance/test_organization_integrations.py
new file mode 100644
index 0000000000..3d1759fab8
--- /dev/null
+++ b/tests/acceptance/test_organization_integrations.py
@@ -0,0 +1,35 @@
+from __future__ import absolute_import
+
+from sentry.testutils import AcceptanceTestCase
+
+
+class OrganizationIntegrationsTest(AcceptanceTestCase):
+    def setUp(self):
+        super(OrganizationIntegrationsTest, self).setUp()
+        self.user = self.create_user('foo@example.com')
+        self.org = self.create_organization(
+            name='Rowdy Tiger',
+            owner=None,
+        )
+        self.team = self.create_team(organization=self.org, name='Mariachi Band')
+        self.project = self.create_project(
+            organization=self.org,
+            team=self.team,
+            name='Bengal',
+        )
+        self.create_member(
+            user=self.user,
+            organization=self.org,
+            role='owner',
+            teams=[self.team],
+        )
+        self.login_as(self.user)
+        self.path = '/organizations/{}/integrations/'.format(self.org.slug)
+
+    def test_simple(self):
+        with self.feature('organizations:integrations-v3'):
+            self.browser.get(self.path)
+            self.browser.wait_until('.organization-home')
+            self.browser.wait_until_not('.loading-indicator')
+            self.browser.snapshot('organization integrations')
+            assert self.browser.element_exists('.ref-organization-integrations')
diff --git a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
index b1a0c5652e..4805ff7a68 100644
--- a/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationIntegrations.spec.jsx.snap
@@ -11,9 +11,11 @@ exports[`OrganizationIntegrations render() with a provider renders 1`] = `
   <DocumentTitle
     title="Integrations"
   >
-    <HomeContainer>
+    <HomeContainer
+      className="ref-organization-integrations"
+    >
       <div
-        className="organization-home"
+        className="ref-organization-integrations organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
@@ -583,9 +585,11 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
   <DocumentTitle
     title="Integrations"
   >
-    <HomeContainer>
+    <HomeContainer
+      className="ref-organization-integrations"
+    >
       <div
-        className="organization-home"
+        className="ref-organization-integrations organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
@@ -1120,6 +1124,25 @@ exports[`OrganizationIntegrations render() with a provider renders with a reposi
                 >
                   <tbody>
                     <tr>
+                      <td
+                        style={
+                          Object {
+                            "paddingRight": 0,
+                            "width": 24,
+                          }
+                        }
+                      >
+                        <span
+                          className="icon icon-integration icon-github"
+                          style={
+                            Object {
+                              "display": "inline-block",
+                              "height": 24,
+                              "width": 24,
+                            }
+                          }
+                        />
+                      </td>
                       <td>
                         <strong>
                           repo-name
@@ -1162,7 +1185,9 @@ exports[`OrganizationIntegrations render() without any providers is loading when
 <DocumentTitle
   title="Integrations"
 >
-  <HomeContainer>
+  <HomeContainer
+    className="ref-organization-integrations"
+  >
     <div
       className="pull-right"
     >
@@ -1217,9 +1242,11 @@ exports[`OrganizationIntegrations render() without any providers renders 1`] = `
   <DocumentTitle
     title="Integrations"
   >
-    <HomeContainer>
+    <HomeContainer
+      className="ref-organization-integrations"
+    >
       <div
-        className="organization-home"
+        className="ref-organization-integrations organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
diff --git a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
index e933ac4f9b..b034ed534b 100644
--- a/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
+++ b/tests/js/spec/views/__snapshots__/organizationRepositories.spec.jsx.snap
@@ -19,7 +19,7 @@ exports[`OrganizationRepositories render() with a provider renders 1`] = `
       }
     >
       <div
-        className="organization-home"
+        className=" organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
@@ -668,7 +668,7 @@ exports[`OrganizationRepositories render() with a provider renders with a reposi
       }
     >
       <div
-        className="organization-home"
+        className=" organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
@@ -1417,7 +1417,7 @@ exports[`OrganizationRepositories render() without any providers renders 1`] = `
       }
     >
       <div
-        className="organization-home"
+        className=" organization-home"
       >
         <div
           className="sub-header flex flex-container flex-vertically-centered"
diff --git a/tests/sentry/api/endpoints/test_organization_config_integrations.py b/tests/sentry/api/endpoints/test_organization_config_integrations.py
index f25fe69e29..a755ec225d 100644
--- a/tests/sentry/api/endpoints/test_organization_config_integrations.py
+++ b/tests/sentry/api/endpoints/test_organization_config_integrations.py
@@ -15,9 +15,10 @@ class OrganizationConfigIntegrationsTest(APITestCase):
         response = self.client.get(url)
 
         assert response.status_code == 200, response.content
-        assert len(response.data['providers']) == 1
-        provider = response.data['providers'][0]
-        assert provider['id'] == 'example'
+        assert len(response.data['providers']) > 0
+        provider = [r for r in response.data['providers'] if r['id'] == 'example']
+        assert len(provider) == 1
+        provider = provider[0]
         assert provider['name'] == 'Example'
         assert provider['config']
-        assert provider['setupUri']
+        assert provider['setupDialog']['url']
diff --git a/tests/sentry/integrations/slack/__init__.py b/tests/sentry/integrations/slack/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/slack/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/slack/test_integration.py b/tests/sentry/integrations/slack/test_integration.py
new file mode 100644
index 0000000000..78495c6208
--- /dev/null
+++ b/tests/sentry/integrations/slack/test_integration.py
@@ -0,0 +1,102 @@
+from __future__ import absolute_import
+
+import responses
+import six
+
+from six.moves.urllib.parse import parse_qs, urlencode, urlparse
+
+from sentry.integrations.slack import SlackIntegration
+from sentry.models import (
+    Identity, IdentityProvider, IdentityStatus, Integration,
+    OrganizationIntegration, UserIdentity
+)
+from sentry.testutils import IntegrationTestCase
+
+
+class SlackIntegrationTest(IntegrationTestCase):
+    provider = SlackIntegration
+
+    @responses.activate
+    def test_basic_flow(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+        redirect = urlparse(resp['Location'])
+        assert redirect.scheme == 'https'
+        assert redirect.netloc == 'slack.com'
+        assert redirect.path == '/oauth/authorize'
+        params = parse_qs(redirect.query)
+        assert params['scope'] == ['bot chat:write:bot commands team:read']
+        assert params['state']
+        assert params['redirect_uri'] == ['http://testserver/extensions/slack/setup/']
+        assert params['response_type'] == ['code']
+        assert params['client_id'] == ['slack-client-id']
+        # once we've asserted on it, switch to a singular values to make life
+        # easier
+        authorize_params = {k: v[0] for k, v in six.iteritems(params)}
+
+        responses.add(
+            responses.POST, 'https://slack.com/api/oauth.access',
+            json={
+                'ok': True,
+                'user_id': 'UXXXXXXX0',
+                'access_token': 'xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx',
+                'team_id': 'TXXXXXXX0',
+                'team_name': 'Example',
+                'bot': {
+                    'bot_access_token': 'xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx',
+                    'bot_user_id': 'UXXXXXXX1',
+                },
+                'scope': ','.join(authorize_params['scope'].split(' ')),
+            })
+
+        resp = self.client.get('{}?{}'.format(
+            self.path,
+            urlencode({
+                'code': 'oauth-code',
+                'state': authorize_params['state'],
+            })
+        ))
+
+        mock_request = responses.calls[-1].request
+        req_params = parse_qs(mock_request.body)
+        assert req_params['grant_type'] == ['authorization_code']
+        assert req_params['code'] == ['oauth-code']
+        assert req_params['redirect_uri'] == ['http://testserver/extensions/slack/setup/']
+        assert req_params['client_id'] == ['slack-client-id']
+        assert req_params['client_secret'] == ['slack-client-secret']
+
+        assert resp.status_code == 200
+        self.assertDialogSuccess(resp)
+
+        integration = Integration.objects.get(provider=self.provider.id)
+        assert integration.external_id == 'TXXXXXXX0'
+        assert integration.name == 'Example'
+        assert integration.metadata == {
+            'bot_access_token': 'xoxb-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx',
+            'bot_user_id': 'UXXXXXXX1',
+            'scopes': ['bot', 'chat:write:bot', 'commands', 'team:read'],
+        }
+        oi = OrganizationIntegration.objects.get(
+            integration=integration,
+            organization=self.organization,
+        )
+        assert oi.config == {}
+
+        idp = IdentityProvider.objects.get(
+            type='slack',
+            instance='slack.com',
+        )
+        identity = Identity.objects.get(
+            idp=idp,
+            external_id='UXXXXXXX0',
+        )
+        assert identity.status == IdentityStatus.VALID
+        assert identity.scopes == ['bot', 'chat:write:bot', 'commands', 'team:read']
+        assert identity.data == {
+            'access_token': 'xoxp-xxxxxxxxx-xxxxxxxxxx-xxxxxxxxxxxx',
+        }
+
+        assert UserIdentity.objects.filter(
+            user=self.user,
+            identity=identity,
+        ).exists()
diff --git a/tests/sentry/web/frontend/test_integration_setup.py b/tests/sentry/web/frontend/test_integration_setup.py
index 970bb73bbd..d4ae73476a 100644
--- a/tests/sentry/web/frontend/test_integration_setup.py
+++ b/tests/sentry/web/frontend/test_integration_setup.py
@@ -1,64 +1,23 @@
 from __future__ import absolute_import
 
-import pytest
-
-from sentry.integrations.example import ExampleSetupView
+from sentry.integrations.example import ExampleIntegration, ExampleSetupView
 from sentry.models import Integration, OrganizationIntegration
-from sentry.testutils import AuthProviderTestCase, PermissionTestCase
-
-
-class IntegrationSetupPermissionTest(PermissionTestCase):
-    def setUp(self):
-        super(IntegrationSetupPermissionTest, self).setUp()
-        self.path = '/organizations/{}/integrations/example/setup/'.format(
-            self.organization.slug,
-        )
-
-    def test_teamless_admin_cannot_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_teamless_admin_cannot_access(self.path)
-
-    def test_team_admin_cannot_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_team_admin_cannot_access(self.path)
+from sentry.testutils import IntegrationTestCase
 
-    # this currently redirects the user
-    @pytest.mark.xfail
-    def test_manager_can_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_role_can_access(self.path, 'manager')
 
-    # this currently redirects the user
-    @pytest.mark.xfail
-    def test_owner_can_load(self):
-        with self.feature('organizations:integrations-v3'):
-            self.assert_owner_can_access(self.path)
-
-
-class IntegrationSetupTest(AuthProviderTestCase):
-    def setUp(self):
-        super(IntegrationSetupTest, self).setUp()
-        self.organization = self.create_organization(name='foo', owner=self.user)
-        self.login_as(self.user)
-        self.path = '/organizations/{}/integrations/example/setup/'.format(
-            self.organization.slug,
-        )
+class ExampleIntegrationTest(IntegrationTestCase):
+    provider = ExampleIntegration
 
     def test_basic_flow(self):
-        with self.feature('organizations:integrations-v3'):
-            resp = self.client.get(self.path + '?init=1&callback=test')
-            assert resp.status_code == 302
-
-            resp = self.client.get(self.path)
-            assert resp.status_code == 200
-            assert ExampleSetupView.TEMPLATE in resp.content.decode('utf-8')
-
-            resp = self.client.post(self.path, {'name': 'test'})
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        assert ExampleSetupView.TEMPLATE in resp.content.decode('utf-8')
 
-            assert resp.status_code == 200
-            assert 'window.opener.postMessage(' in resp.content
+        resp = self.client.post(self.path, {'name': 'test'})
+        assert resp.status_code == 200
+        self.assertDialogSuccess(resp)
 
-        integration = Integration.objects.get(provider='example')
+        integration = Integration.objects.get(provider=self.provider.id)
         assert integration.external_id == 'test'
         assert integration.name == 'test'
         assert integration.metadata == {}
diff --git a/tests/sentry/web/frontend/test_organization_integration_setup.py b/tests/sentry/web/frontend/test_organization_integration_setup.py
new file mode 100644
index 0000000000..85fa2cf503
--- /dev/null
+++ b/tests/sentry/web/frontend/test_organization_integration_setup.py
@@ -0,0 +1,49 @@
+from __future__ import absolute_import
+
+import pytest
+
+from sentry.testutils import PermissionTestCase, TestCase
+
+
+class OrganizationIntegrationSetupPermissionTest(PermissionTestCase):
+    def setUp(self):
+        super(OrganizationIntegrationSetupPermissionTest, self).setUp()
+        self.path = '/organizations/{}/integrations/example/setup/'.format(
+            self.organization.slug,
+        )
+
+    def test_teamless_admin_cannot_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_teamless_admin_cannot_access(self.path)
+
+    def test_team_admin_cannot_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_team_admin_cannot_access(self.path)
+
+    # this currently redirects the user
+    @pytest.mark.xfail
+    def test_manager_can_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_role_can_access(self.path, 'manager')
+
+    # this currently redirects the user
+    @pytest.mark.xfail
+    def test_owner_can_load(self):
+        with self.feature('organizations:integrations-v3'):
+            self.assert_owner_can_access(self.path)
+
+
+class OrganizationIntegrationSetupTest(TestCase):
+    def setUp(self):
+        super(OrganizationIntegrationSetupTest, self).setUp()
+        self.organization = self.create_organization(name='foo', owner=self.user)
+        self.login_as(self.user)
+        self.path = '/organizations/{}/integrations/example/setup/'.format(
+            self.organization.slug,
+        )
+
+    def test_basic_flow(self):
+        with self.feature('organizations:integrations-v3'):
+            resp = self.client.get(self.path)
+            assert resp.status_code == 302
+            assert resp['Location'] == 'http://testserver/extensions/example/setup/'
