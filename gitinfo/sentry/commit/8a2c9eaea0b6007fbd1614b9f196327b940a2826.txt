commit 8a2c9eaea0b6007fbd1614b9f196327b940a2826
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 20 16:10:49 2011 -0700

    Send timestamp when message is created on client side

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 562fe82b6a..fae56b5418 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 import base64
+import datetime
 import functools
 import logging
 import sys
@@ -12,11 +13,11 @@ import uuid
 from django.core.cache import cache
 from django.template import TemplateSyntaxError
 from django.template.loader import LoaderOrigin
-from django.utils import simplejson
 from django.views.debug import ExceptionReporter
 
 import sentry
 from sentry.conf import settings
+from sentry.utils import json
 from sentry.utils import construct_checksum, varmap, transform, get_installed_apps, force_unicode, \
                            get_versions, shorten, get_signature, get_auth_header
 
@@ -161,7 +162,10 @@ class SentryClient(object):
         kwargs['message_id'] = message_id
 
         # Make sure all data is coerced
-        kwargs = transform(kwargs)
+        kwargs['data'] = transform(kwargs['data'])
+
+        if 'timestamp' not in kwargs:
+            kwargs['timestamp'] = datetime.datetime.now()
 
         self.send(**kwargs)
         
@@ -189,7 +193,7 @@ class SentryClient(object):
         "Sends the message to the server."
         if settings.REMOTE_URL:
             for url in settings.REMOTE_URL:
-                message = base64.b64encode(simplejson.dumps(kwargs).encode('zlib'))
+                message = base64.b64encode(json.dumps(kwargs).encode('zlib'))
                 timestamp = time.time()
                 signature = get_signature(message, timestamp)
                 headers={
diff --git a/sentry/plugins/sentry_redmine/models.py b/sentry/plugins/sentry_redmine/models.py
index 68d80ce8b7..f1c057bd93 100644
--- a/sentry/plugins/sentry_redmine/models.py
+++ b/sentry/plugins/sentry_redmine/models.py
@@ -4,12 +4,12 @@ from django.core.urlresolvers import reverse
 from django.db import models
 from django.http import HttpResponseRedirect
 from django.shortcuts import render_to_response
-from django.utils import simplejson
 from django.utils.safestring import mark_safe
 
 from sentry.models import GroupedMessage
 from sentry.plugins import GroupActionProvider
 from sentry.plugins.sentry_redmine import conf
+from sentry.utils import json
 
 import base64
 import urllib
@@ -35,7 +35,7 @@ class CreateRedmineIssue(GroupActionProvider):
         if request.POST:
             form = RedmineIssueForm(request.POST)
             if form.is_valid():
-                data = simplejson.dumps({
+                data = json.dumps({
                     'key': conf.REDMINE_API_KEY,
                     'issue': {
                         'subject': form.cleaned_data['subject'],
@@ -58,7 +58,7 @@ class CreateRedmineIssue(GroupActionProvider):
                     response = urllib2.urlopen(req, data).read()
                 except urllib2.HTTPError, e:
                     if e.code == 422:
-                        data = simplejson.loads(e.read())
+                        data = json.loads(e.read())
                         form.errors['__all__'] = 'Missing or invalid data'
                         for message in data:
                             for k, v in message.iteritems():
@@ -71,7 +71,7 @@ class CreateRedmineIssue(GroupActionProvider):
                 except urllib2.URLError, e:
                     form.errors['__all__'] = 'Unable to reach Redmine host: %s' % (e.reason,)
                 else:
-                    data = simplejson.loads(response)
+                    data = json.loads(response)
                     RedmineIssue.objects.create(group=group, issue_id=data['id'])
                     group.data['redmine'] = {'issue_id': data['id']}
                     group.save()
diff --git a/sentry/templatetags/sentry_helpers.py b/sentry/templatetags/sentry_helpers.py
index d4fe13545f..ed7f6be330 100644
--- a/sentry/templatetags/sentry_helpers.py
+++ b/sentry/templatetags/sentry_helpers.py
@@ -2,12 +2,12 @@
 #      INSTALLED_APPS
 from django import template
 from django.db.models import Count
-from django.utils import simplejson
 from django.utils.safestring import mark_safe
 from django.template import RequestContext
 from django.template.defaultfilters import stringfilter
 from django.template.loader import render_to_string
 from paging.helpers import paginate as paginate_func
+from sentry.utils import json
 from sentry.utils import get_db_engine
 from sentry.utils.compat.db import connections
 from sentry.plugins import GroupActionProvider
@@ -96,7 +96,7 @@ def chart_data(group, max_days=90):
 
 @register.filter
 def to_json(data):
-    return simplejson.dumps(data)
+    return json.dumps(data)
 
 @register.simple_tag
 def sentry_version():
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 9e9dd6dad4..abb6f8f74d 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -20,7 +20,6 @@ from django.core.urlresolvers import reverse
 from django.core.signals import got_request_exception
 from django.test import TestCase, TransactionTestCase
 from django.template import TemplateSyntaxError
-from django.utils import simplejson
 from django.utils.encoding import smart_unicode
 from django.utils.functional import lazy
 
@@ -29,8 +28,8 @@ from sentry.client.handlers import SentryHandler
 from sentry.client.models import get_client
 from sentry.conf import settings
 from sentry.models import Message, GroupedMessage
+from sentry.utils import json
 from sentry.utils import transform, get_signature, get_auth_header
-
 from sentry.tests.utils import TestServerThread, conditional_on_module
 
 from models import TestModel, DuplicateKeyModel
@@ -66,7 +65,7 @@ class BaseTestCase(TestCase):
 
     def _postWithSignature(self, data):
         ts = time.time()
-        message = base64.b64encode(simplejson.dumps(transform(data)))
+        message = base64.b64encode(json.dumps(transform(data)))
         sig = get_signature(message, ts)
         
         resp = self.client.post(reverse('sentry-store'), message,
@@ -904,6 +903,18 @@ class SentryRemoteTest(BaseTestCase):
         self.assertEquals(group.first_seen, timestamp)
         self.assertEquals(group.last_seen, timestamp)
 
+    def testTimestampAsISO(self):
+        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
+        kwargs = {u'message': 'hello', 'timestamp': timestamp.strftime('%Y-%m-%dT%H:%M:%S.%f')}
+        resp = self._postWithSignature(kwargs)
+        self.assertEquals(resp.status_code, 200, resp.content)
+        instance = Message.objects.get()
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.datetime, timestamp)
+        group = instance.group
+        self.assertEquals(group.first_seen, timestamp)
+        self.assertEquals(group.last_seen, timestamp)
+
     def testUngzippedData(self):
         kwargs = {'message': 'hello', 'server_name': 'not_dcramer.local', 'level': 40, 'site': 'not_a_real_site'}
         resp = self._postWithSignature(kwargs)
@@ -1007,7 +1018,7 @@ class SentryRemoteServerTest(TransactionTestCase):
     def start_test_server(self, host='localhost', port=None):
         """Creates a live test server object (instance of WSGIServer)."""
         if not port:
-            for port in xrange(8001, 65535):
+            for port in xrange(8001, 8050):
                 s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                 s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
                 try:
@@ -1038,20 +1049,37 @@ class SentryRemoteServerTest(TransactionTestCase):
     def testProcess(self):
         self.start_test_server()
         message_id = SentryClient().process(message='hello')
+        self.stop_test_server()
+
         self.assertTrue(message_id)
         instance = Message.objects.all().order_by('-id')[0]
         self.assertEquals(instance.message, 'hello')
-        self.stop_test_server()
 
     def testExternal(self):
         self.start_test_server()
         path = reverse('sentry-raise-exc')
+        self.stop_test_server()
+
         self.assertRaises(Exception, self.client.get, path)
         instance = Message.objects.all().order_by('-id')[0]
         self.assertEquals(instance.message, 'view exception')
         self.assertEquals(instance.url, 'http://testserver' + path)
+
+    def testTimestamp(self):
+        timestamp = datetime.datetime.now() - datetime.timedelta(hours=1)
+
+        self.start_test_server()
+        message_id = SentryClient().process(message='hello', timestamp=timestamp)
         self.stop_test_server()
 
+        self.assertTrue(message_id)
+        instance = Message.objects.all().order_by('-id')[0]
+        self.assertEquals(instance.message, 'hello')
+        self.assertEquals(instance.datetime, timestamp)
+        group = instance.group
+        self.assertEquals(group.first_seen, timestamp)
+        self.assertEquals(group.last_seen, timestamp)
+
 class SentryFeedsTest(BaseTestCase):
     fixtures = ['sentry/tests/fixtures/feeds.json']
     
diff --git a/sentry/utils/json.py b/sentry/utils/json.py
new file mode 100644
index 0000000000..0a9854c232
--- /dev/null
+++ b/sentry/utils/json.py
@@ -0,0 +1,24 @@
+from django.core.serializers.json import DjangoJSONEncoder
+from django.utils import simplejson
+
+import datetime
+import uuid
+
+class BetterJSONEncoder(DjangoJSONEncoder):
+    def default(self, obj):
+        if isinstance(obj, uuid.UUID):
+            return obj.hex
+        elif isinstance(obj, datetime.datetime):
+            return obj.strftime('%Y-%m-%dT%H:%M:%S.%fZ')
+        elif isinstance(obj, (set, frozenset)):
+            return list(obj)
+        return super(BetterJSONEncoder, self).default(obj)
+
+def better_decoder(data):
+    return data
+
+def dumps(value, **kwargs):
+    return simplejson.dumps(value, cls=BetterJSONEncoder, **kwargs)
+
+def loads(value, **kwargs):
+    return simplejson.loads(value, object_hook=better_decoder)
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 91b55ee384..aecb2c2894 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -17,7 +17,6 @@ from django.http import HttpResponse, HttpResponseBadRequest, \
     HttpResponseNotAllowed, HttpResponseGone
 from django.shortcuts import get_object_or_404
 from django.template.loader import render_to_string
-from django.utils import simplejson
 from django.utils.encoding import smart_str
 from django.utils.safestring import mark_safe
 from django.views.decorators.csrf import csrf_protect, csrf_exempt
@@ -27,6 +26,7 @@ from sentry.utils import get_filters, is_float, get_signature, parse_auth_header
 from sentry.models import GroupedMessage, Message
 from sentry.plugins import GroupActionProvider
 from sentry.templatetags.sentry_helpers import with_priority
+from sentry.utils import json
 from sentry.web.reporter import ImprovedExceptionReporter
 
 uuid_re = re.compile(r'^[a-z0-9]{32}$')
@@ -263,7 +263,7 @@ def ajax_handler(request):
     else:
         return HttpResponseBadRequest()
         
-    response = HttpResponse(simplejson.dumps(data))
+    response = HttpResponse(json.dumps(data))
     response['Content-Type'] = 'application/json'
     return response
 
@@ -413,7 +413,7 @@ def store(request):
         if format == 'pickle':
             data = pickle.loads(data)
         elif format == 'json':
-            data = simplejson.loads(data)
+            data = json.loads(data)
     except Exception, e:
         # This error should be caught as it suggests that there's a
         # bug somewhere in the client's code.
@@ -423,16 +423,27 @@ def store(request):
     # XXX: ensure keys are coerced to strings
     data = dict((smart_str(k), v) for k, v in data.iteritems())
 
-    if 'timestamp' in data:
+    if'timestamp' in data:
         if is_float(data['timestamp']):
-            data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
-        else:
+            try:
+                data['timestamp'] = datetime.datetime.fromtimestamp(float(data['timestamp']))
+            except:
+                logger.exception('Failed reading timestamp')
+                del data['timestamp']
+        elif not isinstance(data['timestamp'], datetime.datetime):
             if '.' in data['timestamp']:
                 format = '%Y-%m-%dT%H:%M:%S.%f'
             else:
                 format = '%Y-%m-%dT%H:%M:%S'
-            data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
-
+            if 'Z' in data['timestamp']:
+                # support GMT market, but not other timestamps
+                format += 'Z'
+            try:
+                data['timestamp'] = datetime.datetime.strptime(data['timestamp'], format)
+            except:
+                logger.exception('Failed reading timestamp')
+                del data['timestamp']
+                
     GroupedMessage.objects.from_kwargs(**data)
     
     return HttpResponse()
