commit 253d4c8a529bef0f9066d595c61d43dc0d65556d
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Oct 26 15:58:11 2016 -0700

    ProjectContext component for sharing project context betw/ ...
    
    different views

diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 2b6ffd29de..4024c3cdd6 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -128,12 +128,6 @@ function routes() {
         <Route path="/organizations/:orgId/rate-limits/" component={errorHandler(OrganizationRateLimits)} />
         <Route path="/organizations/:orgId/stats/" component={errorHandler(OrganizationStats)} />
 
-
-        <Route path="/organizations/:orgId/teams/:teamId/" component={errorHandler(TeamDetails)}>
-          <IndexRedirect to="settings/" />
-          <Route path="settings/" component={errorHandler(TeamSettings)} />
-          <Route path="members/" component={errorHandler(TeamMembers)} />
-        </Route>
         <Route path="/organizations/:orgId/actions/set-callsigns/" component={errorHandler(SetCallsignsAction)} />
 
         {hooksOrgRoutes}
diff --git a/src/sentry/static/sentry/app/views/projectDetails.jsx b/src/sentry/static/sentry/app/views/projectDetails.jsx
index 97e1d1b802..8837f1af94 100644
--- a/src/sentry/static/sentry/app/views/projectDetails.jsx
+++ b/src/sentry/static/sentry/app/views/projectDetails.jsx
@@ -1,227 +1,17 @@
 import React from 'react';
-import Reflux from 'reflux';
 
-import ApiMixin from '../mixins/apiMixin';
-import DocumentTitle from 'react-document-title';
-import EnvironmentStore from '../stores/environmentStore';
-import MemberListStore from '../stores/memberListStore';
-import LoadingError from '../components/loadingError';
-import LoadingIndicator from '../components/loadingIndicator';
-import MissingProjectMembership from '../components/missingProjectMembership';
-import ProjectHeader from '../components/projectHeader';
-import OrganizationState from '../mixins/organizationState';
-import PropTypes from '../proptypes';
-import TeamStore from '../stores/teamStore';
-import ProjectStore from '../stores/projectStore';
-import {t} from '../locale';
-
-const ERROR_TYPES = {
-  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',
-  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND'
-};
+import ProjectContext from './projects/projectContext';
+import ProjectDetailsLayout from './projectDetailsLayout';
 
 const ProjectDetails = React.createClass({
-  childContextTypes: {
-    project: PropTypes.Project,
-    team: PropTypes.Team
-  },
-
-  mixins: [
-    ApiMixin,
-    Reflux.connect(MemberListStore, 'memberList'),
-    Reflux.listenTo(TeamStore, 'onTeamChange'),
-    Reflux.listenTo(ProjectStore, 'onProjectChange'),
-    OrganizationState
-  ],
-
-  getInitialState() {
-    return {
-      loading: true,
-      error: false,
-      errorType: null,
-      memberList: [],
-      project: null,
-      team: null,
-      projectNavSection: null
-    };
-  },
-
-  getChildContext() {
-    return {
-      project: this.state.project,
-      team: this.state.team
-    };
-  },
-
-  componentWillMount() {
-    this.fetchData();
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.params.projectId !== this.props.params.projectId) {
-      this.remountComponent();
-    }
-  },
-
-  componentDidUpdate(prevProps, prevState) {
-    if (prevProps.params.projectId !== this.props.params.projectId) {
-      this.fetchData();
-    }
-  },
-
-  remountComponent() {
-    this.setState(this.getInitialState());
-  },
-
-  onTeamChange(itemIds) {
-    if (!this.state.team) return;
-    if (!itemIds.has(this.state.team.id)) return;
-
-    this.setState({
-      team: {...TeamStore.getById(this.state.team.id)}
-    });
-  },
-
-  onProjectChange(projectIds) {
-    if (!this.state.project) return;
-    if (!projectIds.has(this.state.project.id)) return;
-
-    this.setState({
-      project: {...ProjectStore.getById(this.state.project.id)}
-    });
-  },
-
-  identifyProject() {
-    let {params} = this.props;
-    let projectSlug = params.projectId;
-    let activeProject = null;
-    let activeTeam = null;
-    let org = this.context.organization;
-    org.teams.forEach((team) => {
-      team.projects.forEach((project) => {
-        if (project.slug == projectSlug) {
-          activeProject = project;
-          activeTeam = team;
-        }
-      });
-    });
-    return [activeTeam, activeProject];
-  },
-
-  fetchData() {
-    let org = this.context.organization;
-    if (!org) {
-      return;
-    }
-    let [activeTeam, activeProject] = this.identifyProject();
-    let hasAccess = activeTeam && activeTeam.hasAccess;
-
-    this.setState({
-      loading: true,
-      project: activeProject,
-      team: activeTeam
-    });
-
-    if (activeProject && hasAccess) {
-      // TODO(dcramer): move member list to organization level
-      this.api.request(this.getMemberListEndpoint(), {
-        success: (data) => {
-          MemberListStore.loadInitialData(data.filter((m) => m.user).map((m) => m.user));
-        }
-      });
-
-      this.api.request(this.getEnvironmentListEndpoint(), {
-        success: (data) => {
-          EnvironmentStore.loadInitialData(data);
-        }
-      });
-
-      this.setState({
-        loading: false,
-        error: false,
-        errorType: null
-      });
-    } else if (activeTeam && activeTeam.isMember) {
-      this.setState({
-        loading: false,
-        error: true,
-        errorType: ERROR_TYPES.MISSING_MEMBERSHIP
-      });
-    } else {
-      this.setState({
-        loading: false,
-        error: true,
-        errorType: ERROR_TYPES.PROJECT_NOT_FOUND
-      });
-    }
-  },
-
-  getEnvironmentListEndpoint() {
-    let {orgId, projectId} = this.props.params;
-    return `/projects/${orgId}/${projectId}/environments/`;
-  },
-
-  getMemberListEndpoint() {
-    let {orgId, projectId} = this.props.params;
-    return `/projects/${orgId}/${projectId}/members/`;
-  },
-
-  setProjectNavSection(section) {
-    this.setState({
-      projectNavSection: section
-    });
-  },
-
-  getTitle() {
-    if (this.state.project)
-      return this.state.team.name + ' / ' + this.state.project.name;
-    return 'Sentry';
-  },
-
   render() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error) {
-      switch (this.state.errorType) {
-        case ERROR_TYPES.PROJECT_NOT_FOUND:
-          return (
-            <div className="container">
-              <div className="alert alert-block">
-                {t('The project you were looking for was not found.')}
-              </div>
-            </div>
-          );
-        case ERROR_TYPES.MISSING_MEMBERSHIP:
-          // TODO(dcramer): add various controls to improve this flow and break it
-          // out into a reusable missing access error component
-          return (
-            <MissingProjectMembership
-                organization={this.getOrganization()}
-                team={this.state.team}
-                project={this.state.project} />
-          );
-        default:
-          return <LoadingError onRetry={this.remountComponent} />;
-      }
-    }
-
+    let {projectId, orgId} = this.props.params;
     return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <ProjectHeader
-            activeSection={this.state.projectNavSection}
-            project={this.state.project}
-            organization={this.getOrganization()} />
-          <div className="container">
-            <div className="content">
-              {React.cloneElement(this.props.children, {
-                setProjectNavSection: this.setProjectNavSection,
-                memberList: this.state.memberList
-              })}
-            </div>
-          </div>
-        </div>
-      </DocumentTitle>
+      <ProjectContext orgId={orgId} projectId={projectId}>
+        <ProjectDetailsLayout>
+          {this.props.children}
+        </ProjectDetailsLayout>
+      </ProjectContext>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
new file mode 100644
index 0000000000..fb7b6e3af2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDetailsLayout.jsx
@@ -0,0 +1,55 @@
+import React from 'react';
+
+import ProjectHeader from '../components/projectHeader';
+import ProjectState from '../mixins/projectState';
+
+const ProjectDetailsLayout = React.createClass({
+  mixins: [
+    ProjectState
+  ],
+
+  getInitialState() {
+    return {
+      projectNavSection: null
+    };
+  },
+
+  /**
+   * This callback can be invoked by the child component
+   * to update the active nav section (which is then passed
+   * to the ProjectHeader
+   */
+  setProjectNavSection(section) {
+    this.setState({
+      projectNavSection: section
+    });
+  },
+
+  getTitle() {
+    return 'TODO FIX THIS TITLE';
+  },
+
+  render() {
+    if (!this.context.project)
+      return null;
+
+    return (
+     <div>
+        <ProjectHeader
+          activeSection={this.state.projectNavSection}
+          project={this.context.project}
+          organization={this.getOrganization()} />
+        <div className="container">
+          <div className="content">
+            {React.cloneElement(this.props.children, {
+              setProjectNavSection: this.setProjectNavSection,
+              memberList: this.state.memberList
+            })}
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ProjectDetailsLayout;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/projectInstall/index.jsx b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
index d58351d59c..ef0b18a47b 100644
--- a/src/sentry/static/sentry/app/views/projectInstall/index.jsx
+++ b/src/sentry/static/sentry/app/views/projectInstall/index.jsx
@@ -1,128 +1,17 @@
 import React from 'react';
 
-import ApiMixin from '../../mixins/apiMixin';
-import DocumentTitle from 'react-document-title';
-import ProjectSelector from '../../components/projectHeader/projectSelector';
-import LoadingError from '../../components/loadingError';
-import LoadingIndicator from '../../components/loadingIndicator';
-
-import OrganizationState from '../../mixins/organizationState';
+import ProjectContext from '../projects/projectContext';
+import ProjectInstallLayout from './projectInstallLayout';
 
 const ProjectInstall = React.createClass({
-  childContextTypes: {
-    project: React.PropTypes.Project,
-    team: React.PropTypes.object
-  },
-
-  mixins: [
-    ApiMixin,
-    OrganizationState
-  ],
-
-  getInitialState() {
-    return {
-      loading: true,
-      platformList: null,
-      project: null,
-      team: null
-    };
-  },
-
-  getChildContext() {
-    return {
-      project: this.state.project,
-      team: this.state.team
-    };
-  },
-
-  componentWillMount() {
-    // this.props.setProjectNavSection('settings');
-  },
-
-  componentDidMount() {
-    this.fetchData();
-  },
-
-  fetchData() {
-    let org = this.context.organization;
-    if (!org) {
-      return;
-    }
-
-    let [activeTeam, activeProject] = this.identifyProject();
-
-    this.setState({
-      project: activeProject,
-      team: activeTeam
-    });
-
-    let {orgId, projectId} = this.props.params;
-    this.api.request(`/projects/${orgId}/${projectId}/docs/`, {
-      success: (data) => {
-        this.setState({
-          loading: false,
-          data: data
-        });
-      }
-    });
-  },
-
-  identifyProject() {
-    let {params} = this.props;
-    let projectSlug = params.projectId;
-    let activeProject = null;
-    let activeTeam = null;
-    let org = this.context.organization;
-    org.teams.forEach((team) => {
-      team.projects.forEach((project) => {
-        if (project.slug == projectSlug) {
-          activeProject = project;
-          activeTeam = team;
-        }
-      });
-    });
-    return [activeTeam, activeProject];
-  },
-
-  getTitle() {
-    return 'lol';
-  },
-
-  renderBody() {
-    if (this.state.loading)
-      return <LoadingIndicator />;
-    else if (this.state.error)
-      return <LoadingError onRetry={this.fetchData} />;
-
-    let data = this.state.data;
-    return React.cloneElement(this.props.children, {
-      platformData: data // {...this.props}
-    });
-  },
-
   render() {
-    let org = this.context.organization;
-    let {project} = this.state;
-    if (!project)
-      return null;
-
+    let {projectId, orgId} = this.props.params;
     return (
-      <DocumentTitle title={this.getTitle()}>
-        <div>
-          <div className="sub-header flex flex-container flex-vertically-centered">
-            <div className="p-t-1">
-              <ProjectSelector
-                  organization={org}
-                  projectId={project.slug}/>
-            </div>
-          </div>
-          <div className="container">
-            <div className="content">
-              {this.renderBody()}
-            </div>
-          </div>
-        </div>
-      </DocumentTitle>
+      <ProjectContext orgId={orgId} projectId={projectId}>
+        <ProjectInstallLayout>
+          {this.props.children}
+        </ProjectInstallLayout>
+      </ProjectContext>
     );
   }
 });
diff --git a/src/sentry/static/sentry/app/views/projectInstall/projectInstallLayout.jsx b/src/sentry/static/sentry/app/views/projectInstall/projectInstallLayout.jsx
new file mode 100644
index 0000000000..78417b2956
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectInstall/projectInstallLayout.jsx
@@ -0,0 +1,83 @@
+import React from 'react';
+
+import ApiMixin from '../../mixins/apiMixin';
+import ProjectSelector from '../../components/projectHeader/projectSelector';
+import ProjectState from '../../mixins/projectState';
+
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+
+const ProjectInstallLayout = React.createClass({
+  mixins: [
+    ApiMixin,
+    ProjectState
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      platformList: null,
+      project: null,
+      team: null
+    };
+  },
+
+  componentDidMount() {
+    this.fetchData();
+  },
+
+  fetchData() {
+    let org = this.context.organization;
+    if (!org) {
+      return;
+    }
+
+    let orgId = this.context.organization.slug;
+    let projectId = this.context.project.slug;
+
+    this.api.request(`/projects/${orgId}/${projectId}/docs/`, {
+      success: (data) => {
+        this.setState({
+          loading: false,
+          data: data
+        });
+      }
+    });
+  },
+
+  renderBody() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error)
+      return <LoadingError onRetry={this.fetchData} />;
+
+    let data = this.state.data;
+    return React.cloneElement(this.props.children, {
+      platformData: data // {...this.props}
+    });
+  },
+
+  render() {
+    let org = this.context.organization;
+    let project = this.context.project;
+    if (!project) return null;
+    return (
+      <div>
+        <div className="sub-header flex flex-container flex-vertically-centered">
+          <div className="p-t-1">
+            <ProjectSelector
+              organization={org}
+              projectId={project.slug}/>
+          </div>
+        </div>
+        <div className="container">
+          <div className="content">
+            {this.renderBody()}
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ProjectInstallLayout;
\ No newline at end of file
diff --git a/src/sentry/static/sentry/app/views/projects/projectContext.jsx b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
new file mode 100644
index 0000000000..8a9f84023a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projects/projectContext.jsx
@@ -0,0 +1,220 @@
+import React from 'react';
+import Reflux from 'reflux';
+import DocumentTitle from 'react-document-title';
+
+import ApiMixin from '../../mixins/apiMixin';
+import EnvironmentStore from '../../stores/environmentStore';
+import MemberListStore from '../../stores/memberListStore';
+import LoadingError from '../../components/loadingError';
+import LoadingIndicator from '../../components/loadingIndicator';
+import MissingProjectMembership from '../../components/missingProjectMembership';
+import OrganizationState from '../../mixins/organizationState';
+import PropTypes from '../../proptypes';
+import TeamStore from '../../stores/teamStore';
+import ProjectStore from '../../stores/projectStore';
+import {t} from '../../locale';
+
+const ERROR_TYPES = {
+  MISSING_MEMBERSHIP: 'MISSING_MEMBERSHIP',
+  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND'
+};
+
+const ProjectBase = React.createClass({
+  propTypes: {
+    projectId: React.PropTypes.string,
+    orgId: React.PropTypes.string
+  },
+
+  childContextTypes: {
+    project: PropTypes.Project,
+    team: PropTypes.Team
+  },
+
+  mixins: [
+    ApiMixin,
+    Reflux.connect(MemberListStore, 'memberList'),
+    Reflux.listenTo(TeamStore, 'onTeamChange'),
+    Reflux.listenTo(ProjectStore, 'onProjectChange'),
+    OrganizationState
+  ],
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      errorType: null,
+      memberList: [],
+      project: null,
+      team: null,
+      projectNavSection: null
+    };
+  },
+
+  getChildContext() {
+    return {
+      project: this.state.project,
+      team: this.state.team
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  componentWillReceiveProps(nextProps) {
+    if (nextProps.projectId !== this.props.projectId) {
+      this.remountComponent();
+    }
+  },
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevProps.projectId !== this.props.projectId) {
+      this.fetchData();
+    }
+  },
+
+  remountComponent() {
+    this.setState(this.getInitialState());
+  },
+
+  getTitle() {
+    if (this.state.project)
+      return this.state.team.name + ' / ' + this.state.project.name;
+    return 'Sentry';
+  },
+
+  onTeamChange(itemIds) {
+    if (!this.state.team) return;
+    if (!itemIds.has(this.state.team.id)) return;
+
+    this.setState({
+      team: {...TeamStore.getById(this.state.team.id)}
+    });
+  },
+
+  onProjectChange(projectIds) {
+    if (!this.state.project) return;
+    if (!projectIds.has(this.state.project.id)) return;
+
+    this.setState({
+      project: {...ProjectStore.getById(this.state.project.id)}
+    });
+  },
+
+  identifyProject() {
+    let {projectId} = this.props;
+    let projectSlug = projectId;
+    let activeProject = null;
+    let activeTeam = null;
+    let org = this.context.organization;
+    org.teams.forEach((team) => {
+      team.projects.forEach((project) => {
+        if (project.slug == projectSlug) {
+          activeProject = project;
+          activeTeam = team;
+        }
+      });
+    });
+    return [activeTeam, activeProject];
+  },
+
+  fetchData() {
+    let org = this.context.organization;
+    if (!org) {
+      return;
+    }
+    let [activeTeam, activeProject] = this.identifyProject();
+    let hasAccess = activeTeam && activeTeam.hasAccess;
+
+    this.setState({
+      loading: true,
+      project: activeProject,
+      team: activeTeam
+    });
+
+    if (activeProject && hasAccess) {
+      // TODO(dcramer): move member list to organization level
+      this.api.request(this.getMemberListEndpoint(), {
+        success: (data) => {
+          MemberListStore.loadInitialData(data.filter((m) => m.user).map((m) => m.user));
+        }
+      });
+
+      this.api.request(this.getEnvironmentListEndpoint(), {
+        success: (data) => {
+          EnvironmentStore.loadInitialData(data);
+        }
+      });
+
+      this.setState({
+        loading: false,
+        error: false,
+        errorType: null
+      });
+    } else if (activeTeam && activeTeam.isMember) {
+      this.setState({
+        loading: false,
+        error: true,
+        errorType: ERROR_TYPES.MISSING_MEMBERSHIP
+      });
+    } else {
+      this.setState({
+        loading: false,
+        error: true,
+        errorType: ERROR_TYPES.PROJECT_NOT_FOUND
+      });
+    }
+  },
+
+  getEnvironmentListEndpoint() {
+    let {orgId, projectId} = this.props;
+    return `/projects/${orgId}/${projectId}/environments/`;
+  },
+
+  getMemberListEndpoint() {
+    let {orgId, projectId} = this.props;
+    return `/projects/${orgId}/${projectId}/members/`;
+  },
+
+  setProjectNavSection(section) {
+    this.setState({
+      projectNavSection: section
+    });
+  },
+
+  renderBody() {
+    if (this.state.loading)
+      return <LoadingIndicator />;
+    else if (this.state.error) {
+      switch (this.state.errorType) {
+        case ERROR_TYPES.PROJECT_NOT_FOUND:
+          return (
+            <div className="container">
+              <div className="alert alert-block">
+                {t('The project you were looking for was not found.')}
+              </div>
+            </div>
+          );
+        case ERROR_TYPES.MISSING_MEMBERSHIP:
+          // TODO(dcramer): add various controls to improve this flow and break it
+          // out into a reusable missing access error component
+          return (
+            <MissingProjectMembership
+                organization={this.getOrganization()}
+                team={this.state.team}
+                project={this.state.project} />
+          );
+        default:
+          return <LoadingError onRetry={this.remountComponent} />;
+      }
+    }
+
+    return this.props.children;
+  },
+
+  render() {
+    return <DocumentTitle title={this.getTitle()}>{this.renderBody()}</DocumentTitle>;
+  }
+});
+
+export default ProjectBase;
diff --git a/src/sentry/static/sentry/app/views/projects/projectCreation.jsx b/src/sentry/static/sentry/app/views/projects/projectCreation.jsx
new file mode 100644
index 0000000000..0bec4ada12
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projects/projectCreation.jsx
@@ -0,0 +1,54 @@
+import React from 'react';
+import {Link} from 'react-router';
+
+import TextField from '../../components/forms/textField';
+import OrganizationState from '../../mixins/organizationState';
+import ProjectSelector from '../../components/projectHeader/projectSelector';
+
+import {t} from '../../locale';
+
+const ProjectCreation = React.createClass({
+  mixins: [
+    OrganizationState,
+  ],
+
+  componentDidMount() {
+    document.body.className += 'narrow';
+  },
+
+  onSubmit() {
+    alert('lol');
+  },
+
+  render() {
+    let org = this.getOrganization();
+
+    return (
+      <div className="organization-home">
+        <div className="sub-header">
+          <div className="container">
+            <div className="org-name">
+              <Link to={`/${org.slug}/`}>
+                {org.name}
+              </Link>
+            </div>
+            <ProjectSelector
+                organization={org} />
+          </div>
+        </div>
+        <div className="container">
+          <div className="page-header">
+            <h2>{t('Create a New Project')}</h2>
+          </div>
+          <p>Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects for production vs development instances, or separate projects for your web app and mobile app.</p>
+
+          <form onSubmit={this.onSubmit}>
+            <TextField type="text" label="Name" placeholder="i.e. API, Frontend, My Application Name"/>
+          </form>
+        </div>
+      </div>
+    );
+  }
+});
+
+export default ProjectCreation;
