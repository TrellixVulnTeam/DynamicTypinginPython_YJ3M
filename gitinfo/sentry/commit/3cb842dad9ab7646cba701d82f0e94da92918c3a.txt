commit 3cb842dad9ab7646cba701d82f0e94da92918c3a
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue Oct 29 10:14:11 2019 -0700

    ref(ts): Refactor `<RuleRow>` out of `projectAlertRules.jsx` (#15306)
    
    This moves `<RuleRow>` into its own module and converts it to typescript.

diff --git a/src/sentry/static/sentry/app/types/alerts.tsx b/src/sentry/static/sentry/app/types/alerts.tsx
new file mode 100644
index 0000000000..46419e25be
--- /dev/null
+++ b/src/sentry/static/sentry/app/types/alerts.tsx
@@ -0,0 +1,23 @@
+import {Environment} from '.';
+
+export type IssueAlertRuleAction = {
+  id: string;
+  name: string;
+};
+
+export type IssueAlertRuleCondition = {
+  id: string;
+  name: string;
+};
+
+// Issue-based alert rule
+export type IssueAlertRule = {
+  actionMatch: 'all' | 'any';
+  actions: IssueAlertRuleAction[];
+  conditions: IssueAlertRuleCondition[];
+  dateCreated: string;
+  environment: null | Environment;
+  frequency: number;
+  id: string;
+  name: string;
+};
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
index 9ddde3f96b..43f5af4588 100644
--- a/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/projectAlertRules.jsx
@@ -1,193 +1,17 @@
-import {Flex} from 'grid-emotion';
-import {Link} from 'react-router';
 import PropTypes from 'prop-types';
 import React from 'react';
-import styled from 'react-emotion';
 
-import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
-import {
-  addSuccessMessage,
-  addErrorMessage,
-  addLoadingMessage,
-  removeIndicator,
-} from 'app/actionCreators/indicator';
-import {t, tct} from 'app/locale';
+import {Panel} from 'app/components/panels';
+import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
-import Button from 'app/components/button';
-import Confirm from 'app/components/confirm';
-import Duration from 'app/components/duration';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
 import PermissionAlert from 'app/views/settings/project/permissionAlert';
-import SentryTypes from 'app/sentryTypes';
-import Tooltip from 'app/components/tooltip';
+import RuleRow from 'app/views/settings/projectAlerts/ruleRow';
 import SentryDocumentTitle from 'app/components/sentryDocumentTitle';
-import recreateRoute from 'app/utils/recreateRoute';
-import withApi from 'app/utils/withApi';
-import {getDisplayName} from 'app/utils/environment';
+import SentryTypes from 'app/sentryTypes';
 
 import ProjectAlertHeader from './projectAlertHeader';
 
-const TextColorLink = styled(Link)`
-  color: ${p => p.theme.gray3};
-`;
-
-const RuleDescriptionRow = styled('div')`
-  display: flex;
-`;
-const RuleDescriptionColumn = styled('div')`
-  flex: 1;
-  padding: ${p => p.theme.grid * 2}px;
-  height: 100%;
-`;
-const Condition = styled('div')`
-  display: flex;
-  flex-direction: column;
-  justify-content: space-between;
-  height: 100%;
-`;
-
-const RuleRow = withApi(
-  class RuleRow extends React.Component {
-    static propTypes = {
-      api: PropTypes.object.isRequired,
-      orgId: PropTypes.string.isRequired,
-      projectId: PropTypes.string.isRequired,
-      data: PropTypes.object.isRequired,
-      onDelete: PropTypes.func.isRequired,
-      canEdit: PropTypes.bool,
-    };
-
-    constructor(props) {
-      super(props);
-      this.state = {loading: false, error: false};
-    }
-
-    onDelete = () => {
-      if (this.state.loading) {
-        return;
-      }
-
-      const loadingIndicator = addLoadingMessage();
-      const {api, orgId, projectId, data} = this.props;
-      api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {
-        method: 'DELETE',
-        success: () => {
-          this.props.onDelete();
-          removeIndicator(loadingIndicator);
-          addSuccessMessage(tct('Successfully deleted "[alert]"', {alert: data.name}));
-        },
-        error: () => {
-          this.setState({
-            error: true,
-            loading: false,
-          });
-          removeIndicator(loadingIndicator);
-          addErrorMessage(t('Unable to save changes. Please try again.'));
-        },
-      });
-    };
-
-    render() {
-      const {data, canEdit} = this.props;
-      const editLink = recreateRoute(`${data.id}/`, this.props);
-
-      const environmentName = data.environment
-        ? getDisplayName({name: data.environment})
-        : t('All Environments');
-
-      return (
-        <Panel>
-          <PanelHeader align="center" justify="space-between" hasButtons>
-            <TextColorLink to={editLink}>
-              {data.name} - {environmentName}
-            </TextColorLink>
-
-            <Flex>
-              <Tooltip
-                disabled={canEdit}
-                title={t('You do not have permission to edit alert rules.')}
-              >
-                <Button
-                  data-test-id="edit-rule"
-                  style={{marginRight: 5}}
-                  disabled={!canEdit}
-                  size="xsmall"
-                  to={editLink}
-                >
-                  {t('Edit Rule')}
-                </Button>
-              </Tooltip>
-
-              <Tooltip
-                disabled={canEdit}
-                title={t('You do not have permission to edit alert rules.')}
-              >
-                <Confirm
-                  message={t('Are you sure you want to remove this rule?')}
-                  onConfirm={this.onDelete}
-                  disabled={!canEdit}
-                >
-                  <Button size="xsmall" icon="icon-trash" />
-                </Confirm>
-              </Tooltip>
-            </Flex>
-          </PanelHeader>
-
-          <PanelBody>
-            <RuleDescriptionRow>
-              <RuleDescriptionColumn>
-                {data.conditions.length !== 0 && (
-                  <Condition>
-                    <h6>
-                      When <strong>{data.actionMatch}</strong> of these conditions are
-                      met:
-                    </h6>
-                    <table className="conditions-list table">
-                      <tbody>
-                        {data.conditions.map((condition, i) => {
-                          return (
-                            <tr key={i}>
-                              <td>{condition.name}</td>
-                            </tr>
-                          );
-                        })}
-                      </tbody>
-                    </table>
-                  </Condition>
-                )}
-              </RuleDescriptionColumn>
-              <RuleDescriptionColumn>
-                {data.actions.length !== 0 && (
-                  <Condition>
-                    <h6>
-                      Take these actions at most{' '}
-                      <strong>
-                        once every <Duration seconds={data.frequency * 60} />
-                      </strong>{' '}
-                      for an issue:
-                    </h6>
-                    <table className="actions-list table">
-                      <tbody>
-                        {data.actions.map((action, i) => {
-                          return (
-                            <tr key={i}>
-                              <td>{action.name}</td>
-                            </tr>
-                          );
-                        })}
-                      </tbody>
-                    </table>
-                  </Condition>
-                )}
-              </RuleDescriptionColumn>
-            </RuleDescriptionRow>
-          </PanelBody>
-        </Panel>
-      );
-    }
-  }
-);
-
 class ProjectAlertRules extends AsyncView {
   static propTypes = {
     routes: PropTypes.array.isRequired,
@@ -228,11 +52,13 @@ class ProjectAlertRules extends AsyncView {
         {this.state.ruleList.map(rule => {
           return (
             <RuleRow
+              api={this.api}
               key={rule.id}
               data={rule}
               orgId={orgId}
               projectId={projectId}
               params={this.props.params}
+              location={this.props.location}
               routes={this.props.routes}
               onDelete={this.handleDeleteRule.bind(this, rule)}
               canEdit={canEditRule}
diff --git a/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
new file mode 100644
index 0000000000..7dd4ad99e2
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/projectAlerts/ruleRow.tsx
@@ -0,0 +1,205 @@
+import {Link} from 'react-router';
+import {Location} from 'history';
+import {Params} from 'react-router/lib/Router';
+import {PlainRoute} from 'react-router/lib/Route';
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {Client} from 'app/api';
+import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
+import {
+  addSuccessMessage,
+  addErrorMessage,
+  addLoadingMessage,
+  removeIndicator,
+} from 'app/actionCreators/indicator';
+import {getDisplayName} from 'app/utils/environment';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import Confirm from 'app/components/confirm';
+import Duration from 'app/components/duration';
+import Tooltip from 'app/components/tooltip';
+import recreateRoute from 'app/utils/recreateRoute';
+
+import {IssueAlertRule} from 'app/types/alerts';
+
+type Props = {
+  api: Client;
+  orgId: string;
+  projectId: string;
+  data: IssueAlertRule;
+
+  // Callback when deleting a rule
+  onDelete: () => void;
+
+  // Is the alert rule editable?
+  canEdit?: boolean;
+
+  // react-router params
+  params: Params;
+  location: Location;
+  routes: PlainRoute[];
+};
+
+type State = {
+  loading: boolean;
+  error: boolean;
+};
+
+class RuleRow extends React.Component<Props, State> {
+  static propTypes: any = {
+    api: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    projectId: PropTypes.string.isRequired,
+    data: PropTypes.object.isRequired,
+    onDelete: PropTypes.func.isRequired,
+    canEdit: PropTypes.bool,
+  };
+
+  state = {loading: false, error: false};
+
+  onDelete = () => {
+    if (this.state.loading) {
+      return;
+    }
+
+    const loadingIndicator = addLoadingMessage();
+    const {api, orgId, projectId, data} = this.props;
+    api.request(`/projects/${orgId}/${projectId}/rules/${data.id}/`, {
+      method: 'DELETE',
+      success: () => {
+        this.props.onDelete();
+        removeIndicator(loadingIndicator);
+        addSuccessMessage(tct('Successfully deleted "[alert]"', {alert: data.name}));
+      },
+      error: () => {
+        this.setState({
+          error: true,
+          loading: false,
+        });
+        removeIndicator(loadingIndicator);
+        addErrorMessage(t('Unable to save changes. Please try again.'));
+      },
+    });
+  };
+
+  render() {
+    const {data, canEdit} = this.props;
+    const editLink = recreateRoute(`${data.id}/`, this.props);
+
+    const environmentName = data.environment
+      ? getDisplayName({name: data.environment})
+      : t('All Environments');
+
+    return (
+      <Panel>
+        <PanelHeader align="center" justify="space-between" hasButtons>
+          <TextColorLink to={editLink}>
+            {data.name} - {environmentName}
+          </TextColorLink>
+
+          <div>
+            <Tooltip
+              disabled={canEdit}
+              title={t('You do not have permission to edit alert rules.')}
+            >
+              <Button
+                data-test-id="edit-rule"
+                style={{marginRight: 5}}
+                disabled={!canEdit}
+                size="xsmall"
+                to={editLink}
+              >
+                {t('Edit Rule')}
+              </Button>
+            </Tooltip>
+
+            <Tooltip
+              disabled={canEdit}
+              title={t('You do not have permission to edit alert rules.')}
+            >
+              <Confirm
+                message={t('Are you sure you want to remove this rule?')}
+                onConfirm={this.onDelete}
+                disabled={!canEdit}
+              >
+                <Button size="xsmall" icon="icon-trash" />
+              </Confirm>
+            </Tooltip>
+          </div>
+        </PanelHeader>
+
+        <PanelBody>
+          <RuleDescriptionRow>
+            <RuleDescriptionColumn>
+              {data.conditions.length !== 0 && (
+                <Condition>
+                  <h6>
+                    When <strong>{data.actionMatch}</strong> of these conditions are met:
+                  </h6>
+                  <table className="conditions-list table">
+                    <tbody>
+                      {data.conditions.map((condition, i) => {
+                        return (
+                          <tr key={i}>
+                            <td>{condition.name}</td>
+                          </tr>
+                        );
+                      })}
+                    </tbody>
+                  </table>
+                </Condition>
+              )}
+            </RuleDescriptionColumn>
+            <RuleDescriptionColumn>
+              {data.actions.length !== 0 && (
+                <Condition>
+                  <h6>
+                    Take these actions at most{' '}
+                    <strong>
+                      once every <Duration seconds={data.frequency * 60} />
+                    </strong>{' '}
+                    for an issue:
+                  </h6>
+                  <table className="actions-list table">
+                    <tbody>
+                      {data.actions.map((action, i) => {
+                        return (
+                          <tr key={i}>
+                            <td>{action.name}</td>
+                          </tr>
+                        );
+                      })}
+                    </tbody>
+                  </table>
+                </Condition>
+              )}
+            </RuleDescriptionColumn>
+          </RuleDescriptionRow>
+        </PanelBody>
+      </Panel>
+    );
+  }
+}
+
+export default RuleRow;
+
+const TextColorLink = styled(Link)`
+  color: ${p => p.theme.gray3};
+`;
+
+const RuleDescriptionRow = styled('div')`
+  display: flex;
+`;
+const RuleDescriptionColumn = styled('div')`
+  flex: 1;
+  padding: ${p => p.theme.grid * 2}px;
+  height: 100%;
+`;
+const Condition = styled('div')`
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+  height: 100%;
+`;
