commit 535c6dc7fbb39c135b18847895a7e0927694470e
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Jun 24 10:28:49 2017 -0700

    auth: move registration behind option

diff --git a/.vscode/settings.json b/.vscode/settings.json
index 785e873d45..7c0c68525f 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -6,6 +6,10 @@
         "static": true,
         "node_modules": true,
         "htmlcov": true,
+        "build": true,
+        "*.log": true,
+        "*.egg-info": true,
+        "src/sentry/locale": true,
         "src/sentry/static/sentry/dist/": true
     },
     "files.trimTrailingWhitespace": true,
diff --git a/CHANGES b/CHANGES
index 6ccdabadf2..30e6612c09 100644
--- a/CHANGES
+++ b/CHANGES
@@ -9,6 +9,8 @@ Version 8.18 (Unreleased)
 - Replaced usage of jQuery Flot library with internal graphs.
 - Expanded ignore actions to include deltas and rates for both occurances and
   users imapcted.
+- Add a new option (`auth.allow-registration`) for determining whether registration
+  is allowed on an installation.
 
 Schema Changes
 ~~~~~~~~~~~~~~
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 039ab130e5..a1961cfa7a 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -78,6 +78,7 @@ register('u2f.facets', default=(), type=Sequence,
 
 register('auth.ip-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('auth.user-rate-limit', default=0, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+register('auth.allow-registration', default=False, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK | FLAG_REQUIRED)
 
 register('api.rate-limit.org-create', default=5, flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 
diff --git a/src/sentry/static/sentry/app/options.jsx b/src/sentry/static/sentry/app/options.jsx
index 7428fc6ad7..12db5ca94a 100644
--- a/src/sentry/static/sentry/app/options.jsx
+++ b/src/sentry/static/sentry/app/options.jsx
@@ -12,6 +12,10 @@ const sections = [
   {
     key: 'mail',
     heading: t('Outbound email')
+  },
+  {
+    key: 'auth',
+    heading: t('Authentication')
   }
 ];
 
@@ -59,6 +63,13 @@ const definitions = [
       'The maximum number of events the system should accept per minute. A value of 0 will disable the default rate limit.'
     )
   },
+  {
+    key: 'auth.allow-registration',
+    label: t('Allow Registration'),
+    help: t('Allow anyone to create an account and access this Sentry installation.'),
+    component: BooleanField,
+    defaultValue: () => false
+  },
   {
     key: 'auth.ip-rate-limit',
     label: t('IP Rate Limit'),
diff --git a/src/sentry/static/sentry/app/views/adminSettings.jsx b/src/sentry/static/sentry/app/views/adminSettings.jsx
index 62c6d15962..fedcc9ff57 100644
--- a/src/sentry/static/sentry/app/views/adminSettings.jsx
+++ b/src/sentry/static/sentry/app/views/adminSettings.jsx
@@ -15,6 +15,7 @@ const optionsAvailable = [
   'system.support-email',
   'system.security-email',
   'system.rate-limit',
+  'auth.allow-registration',
   'auth.ip-rate-limit',
   'auth.user-rate-limit',
   'api.rate-limit.org-create'
@@ -86,6 +87,7 @@ const SettingsList = React.createClass({
         {fields['system.rate-limit']}
 
         <h4>Security & Abuse</h4>
+        {fields['auth.allow-registration']}
         {fields['auth.ip-rate-limit']}
         {fields['auth.user-rate-limit']}
         {fields['api.rate-limit.org-create']}
diff --git a/src/sentry/templatetags/sentry_react.py b/src/sentry/templatetags/sentry_react.py
index 0cadfc16e4..fa3aab5c8a 100644
--- a/src/sentry/templatetags/sentry_react.py
+++ b/src/sentry/templatetags/sentry_react.py
@@ -12,7 +12,7 @@ from pkg_resources import parse_version
 from sentry import features, options
 from sentry.api.serializers.base import serialize
 from sentry.models import ProjectKey
-from sentry.utils import json
+from sentry.utils import auth, json
 from sentry.utils.email import is_smtp_enabled
 from sentry.utils.assets import get_asset_url
 from sentry.utils.functional import extract_lazy_object
@@ -101,7 +101,7 @@ def get_react_config(context):
     enabled_features = []
     if features.has('organizations:create', actor=user):
         enabled_features.append('organizations:create')
-    if features.has('auth:register', actor=user):
+    if auth.has_user_registration():
         enabled_features.append('auth:register')
 
     version_info = _get_version_info()
diff --git a/src/sentry/utils/auth.py b/src/sentry/utils/auth.py
index 5de478ba05..d14ffe8c0c 100644
--- a/src/sentry/utils/auth.py
+++ b/src/sentry/utils/auth.py
@@ -269,6 +269,12 @@ def log_auth_failure(request, username=None):
     })
 
 
+def has_user_registration():
+    from sentry import features, options
+
+    return features.has('auth:register') and options.get('auth.allow-registration')
+
+
 class EmailAuthBackend(ModelBackend):
     """
     Authenticate against django.contrib.auth.models.User.
diff --git a/src/sentry/web/frontend/auth_login.py b/src/sentry/web/frontend/auth_login.py
index 6efbd8ebb2..6420f179aa 100644
--- a/src/sentry/web/frontend/auth_login.py
+++ b/src/sentry/web/frontend/auth_login.py
@@ -9,7 +9,6 @@ from django.http import HttpResponseRedirect
 from django.utils.translation import ugettext_lazy as _
 from django.views.decorators.cache import never_cache
 
-from sentry import features
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.http import get_server_hostname
 from sentry.models import AuthProvider, Organization, OrganizationStatus
@@ -55,7 +54,7 @@ class AuthLoginView(BaseView):
         )
 
     def handle_basic_auth(self, request):
-        can_register = features.has('auth:register') or request.session.get('can_register')
+        can_register = auth.has_user_registration() or request.session.get('can_register')
 
         op = request.POST.get('op')
 
diff --git a/src/sentry/web/frontend/auth_organization_login.py b/src/sentry/web/frontend/auth_organization_login.py
index 14cab912d5..7656914ce7 100644
--- a/src/sentry/web/frontend/auth_organization_login.py
+++ b/src/sentry/web/frontend/auth_organization_login.py
@@ -7,7 +7,6 @@ from django.db import transaction
 from django.views.decorators.cache import never_cache
 from django.contrib import messages
 
-from sentry import features
 from sentry.auth.helper import AuthHelper
 from sentry.constants import WARN_SESSION_EXPIRED
 from sentry.models import AuthProvider, Organization, OrganizationStatus
@@ -32,7 +31,7 @@ class AuthOrganizationLoginView(BaseView):
         )
 
     def handle_basic_auth(self, request, organization):
-        can_register = features.has('auth:register') or request.session.get('can_register')
+        can_register = auth.has_user_registration() or request.session.get('can_register')
 
         op = request.POST.get('op')
         login_form = self.get_login_form(request)
diff --git a/tests/sentry/web/frontend/test_auth_login.py b/tests/sentry/web/frontend/test_auth_login.py
index a0608e9ff6..8020d4b930 100644
--- a/tests/sentry/web/frontend/test_auth_login.py
+++ b/tests/sentry/web/frontend/test_auth_login.py
@@ -5,6 +5,7 @@ from django.utils.http import urlquote
 from django.core.urlresolvers import reverse
 from exam import fixture
 
+from sentry import options
 from sentry.testutils import TestCase
 from sentry.models import User
 
@@ -55,11 +56,13 @@ class AuthLoginTest(TestCase):
         assert resp.status_code == 302
 
     def test_registration_disabled(self):
+        options.set('auth.allow-registration', True)
         with self.feature('auth:register', False):
             resp = self.client.get(self.path)
             assert resp.context['register_form'] is None
 
     def test_registration_valid(self):
+        options.set('auth.allow-registration', True)
         with self.feature('auth:register'):
             resp = self.client.post(self.path, {
                 'username': 'test-a-really-long-email-address@example.com',
@@ -72,6 +75,7 @@ class AuthLoginTest(TestCase):
         assert user.check_password('foobar')
 
     def test_register_renders_correct_template(self):
+        options.set('auth.allow-registration', True)
         register_path = reverse('sentry-register')
         resp = self.client.get(register_path)
 
