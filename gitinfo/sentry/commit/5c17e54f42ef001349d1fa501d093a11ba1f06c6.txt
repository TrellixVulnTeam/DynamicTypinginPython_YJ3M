commit 5c17e54f42ef001349d1fa501d093a11ba1f06c6
Author: Ted Kaemming <ted@kaemming.com>
Date:   Mon Sep 28 15:47:12 2015 -0700

    First utitilies for testing digest summary notifications.

diff --git a/digest.py b/digest.py
new file mode 100644
index 0000000000..78ab77e764
--- /dev/null
+++ b/digest.py
@@ -0,0 +1,30 @@
+#!/usr/bin/env python
+
+from sentry.utils.runner import configure
+
+configure()
+
+import itertools
+import sys
+
+from sentry.digests.notifications import (
+    build_digest,
+    event_to_record,
+)
+from sentry.models import (
+    Event,
+    Project,
+)
+
+project = Project.objects.get(id=int(sys.argv[1]))
+events = project.event_set.all()[:int(sys.argv[2])]
+Event.objects.bind_nodes(events, 'data')
+records = itertools.imap(event_to_record, events)
+
+print '{project.organization} / {project}'.format(project=project)
+print ''
+
+for group, records in build_digest(project, records):
+    print '*', group.message_short
+    print ' ', len(records), 'events from', min(r.timestamp for r in records), 'to', max(r.timestamp for r in records)
+    print ''
diff --git a/src/sentry/digests/backends/__init__.py b/src/sentry/digests/backends/__init__.py
index e69de29bb2..c3961685ab 100644
--- a/src/sentry/digests/backends/__init__.py
+++ b/src/sentry/digests/backends/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/src/sentry/digests/notifications.py b/src/sentry/digests/notifications.py
new file mode 100644
index 0000000000..90a3030bab
--- /dev/null
+++ b/src/sentry/digests/notifications.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+import itertools
+import logging
+from collections import namedtuple
+
+from sentry.models import (
+    Group,
+    Project,
+)
+from sentry.utils.dates import to_timestamp
+
+from . import Record
+
+
+logger = logging.getLogger('sentry.digests')
+
+
+NotificationEvent = namedtuple('NotificationEvent', 'group_id event_id event_data rules')
+
+
+def split_key(key):
+    from sentry.plugins import plugins  # XXX
+    plugin_slug, _, project_id = key.split(':', 2)
+    return plugins.get(plugin_slug), Project.objects.get(pk=project_id)
+
+
+def unsplit_key(plugin, project):
+    return '{plugin.slug}:p:{project.id}'.format(plugin=plugin, project=project)
+
+
+# XXX: Rules
+def event_to_record(event, rules=[]):
+    return Record(
+        event.event_id,
+        NotificationEvent(event.group_id, event.id, event.data.data, rules),
+        to_timestamp(event.datetime),
+    )
+
+
+def group_score((group, records)):
+    return max(record.timestamp for record in records)
+
+
+def record_score(record):
+    return record.timestamp
+
+
+def build_digest(project, records):
+    """
+    """
+    key = lambda record: record.value.group_id
+
+    raw = {}
+    for group, records in itertools.groupby(sorted(records, key=key), key=key):
+        raw[group] = list(records)
+
+    groups = Group.objects.filter(project=project).in_bulk(raw.keys())
+
+    results = []
+    for id, records in raw.iteritems():
+        try:
+            group = groups[id]
+        except IndexError:
+            logger.warning('Skipping %s records for %s, no corresponding group instance exists.', len(records), id)
+            continue
+
+        if group.is_muted():
+            logger.debug('Skipping %s records for %r, group is muted.', len(records), group)
+            continue
+
+        # TODO: Add other filter criteria.
+
+        results.append((group, sorted(records, key=record_score)))
+
+    return sorted(results, key=group_score)
diff --git a/src/sentry/plugins/bases/notify.py b/src/sentry/plugins/bases/notify.py
index 21c37df93d..dad7574512 100644
--- a/src/sentry/plugins/bases/notify.py
+++ b/src/sentry/plugins/bases/notify.py
@@ -16,10 +16,12 @@ from sentry.app import (
     digests,
     ratelimiter,
 )
-from sentry.digests import Record
+from sentry.digests.notifications import (
+    event_to_record,
+    unsplit_key,
+)
 from sentry.plugins import Notification, Plugin
 from sentry.models import UserOption
-from sentry.utils.dates import to_timestamp
 
 
 class NotificationConfigurationForm(forms.Form):
@@ -62,13 +64,9 @@ class NotificationPlugin(Plugin):
 
         notification = Notification(event=event, rules=rules)
         if features.has('projects:digests', event.group.project):
-            payload = (event.project_id, event.group_id, event.id, event.data.data, rules)
             digests.add(
-                '{plugin.slug}:p:{project.id}'.format(
-                    plugin=self,
-                    project=event.group.project,
-                ),
-                Record(event.event_id, payload, to_timestamp(event.datetime)),
+                unsplit_key(self, event.group.project),
+                event_to_record(event, rules),
             )
         else:
             self.notify(notification)
