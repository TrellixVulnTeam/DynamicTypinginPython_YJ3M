commit b8000e777732a0ec0a21b048ff95b29dc69da096
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Feb 9 17:15:14 2016 -0800

    Add user list endpoint

diff --git a/src/sentry/api/endpoints/user_index.py b/src/sentry/api/endpoints/user_index.py
new file mode 100644
index 0000000000..7c996f862b
--- /dev/null
+++ b/src/sentry/api/endpoints/user_index.py
@@ -0,0 +1,70 @@
+from __future__ import absolute_import
+
+from django.db.models import Q
+
+from sentry.api.base import Endpoint
+from sentry.api.paginator import DateTimePaginator
+from sentry.api.permissions import SuperuserPermission
+from sentry.api.serializers import serialize
+from sentry.models import User
+from sentry.search.utils import tokenize_query
+
+
+def in_iexact(column, values):
+    from operator import or_
+
+    query = '{}__iexact'.format(column)
+
+    return reduce(or_, [Q(**{query: v}) for v in values])
+
+
+class UserIndexEndpoint(Endpoint):
+    permission_classes = (SuperuserPermission,)
+
+    def get(self, request):
+        queryset = User.objects.distinct()
+
+        query = request.GET.get('query')
+        if query:
+            tokens = tokenize_query(query)
+            for key, value in tokens.iteritems():
+                if key == 'query':
+                    value = ' '.join(value)
+                    queryset = queryset.filter(
+                        Q(name__icontains=value) |
+                        Q(username__icontains=value) |
+                        Q(email__icontains=value)
+                    )
+                elif key == 'name':
+                    queryset = queryset.filter(
+                        in_iexact('name', value)
+                    )
+                elif key == 'email':
+                    queryset = queryset.filter(
+                        in_iexact('email', value)
+                    )
+                elif key == 'username':
+                    queryset = queryset.filter(
+                        in_iexact('username', value)
+                    )
+
+        status = request.GET.get('status')
+        if status == 'active':
+            queryset = queryset.filter(
+                is_active=True,
+            )
+        elif status == 'disabled':
+            queryset = queryset.filter(
+                is_active=False,
+            )
+
+        order_by = '-date_joined'
+        paginator_cls = DateTimePaginator
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by=order_by,
+            on_results=lambda x: serialize(x, request.user),
+            paginator_cls=paginator_cls,
+        )
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index d191b283e8..67e60b3152 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -67,6 +67,7 @@ from .endpoints.team_groups_trending import TeamGroupsTrendingEndpoint
 from .endpoints.team_members import TeamMembersEndpoint
 from .endpoints.team_project_index import TeamProjectIndexEndpoint
 from .endpoints.team_stats import TeamStatsEndpoint
+from .endpoints.user_index import UserIndexEndpoint
 from .endpoints.user_details import UserDetailsEndpoint
 
 
@@ -84,6 +85,9 @@ urlpatterns = patterns(
         name='sentry-api-0-broadcast-index'),
 
     # Users
+    url(r'^users/$',
+        UserIndexEndpoint.as_view(),
+        name='sentry-api-0-user-index'),
     url(r'^users/(?P<user_id>[^\/]+)/$',
         UserDetailsEndpoint.as_view(),
         name='sentry-api-0-user-details'),
diff --git a/tests/sentry/api/endpoints/test_user_index.py b/tests/sentry/api/endpoints/test_user_index.py
new file mode 100644
index 0000000000..6b9c24712d
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_user_index.py
@@ -0,0 +1,24 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+from exam import fixture
+
+from sentry.testutils import APITestCase
+
+
+class UserListTest(APITestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-api-0-user-index')
+
+    def test_superuser_only(self):
+        user = self.create_user('foo@example.com')
+        self.login_as(user)
+        response = self.client.get(self.path)
+        assert response.status_code == 403
+
+    def test_simple(self):
+        self.login_as(user=self.user)
+        response = self.client.get(self.path)
+        assert response.status_code == 200
+        assert len(response.data) >= 1
