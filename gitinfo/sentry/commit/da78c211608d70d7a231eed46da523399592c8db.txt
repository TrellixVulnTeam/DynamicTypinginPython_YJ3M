commit da78c211608d70d7a231eed46da523399592c8db
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 26 19:19:28 2012 -0800

    Additional tests and refactor

diff --git a/src/sentry/testutils.py b/src/sentry/testutils.py
index c4d186d938..7f97d38b6f 100644
--- a/src/sentry/testutils.py
+++ b/src/sentry/testutils.py
@@ -111,6 +111,11 @@ class BaseTestCase(Exam):
             team=self.team,
         )
 
+    def assertRequiresAuthentication(self, path, method='GET'):
+        resp = getattr(self.client, method.lower())(path)
+        assert resp.status_code == 302
+        assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
+
     def login_as(self, user):
         user.backend = django_settings.AUTHENTICATION_BACKENDS[0]
 
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index be2979098d..80f8a76d63 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -4,26 +4,21 @@ from __future__ import absolute_import
 
 from django.contrib.auth.models import User
 from django.core.urlresolvers import reverse
+from django.http import HttpRequest
 from sentry.models import UserOption
-from sentry.testutils import fixture
-from sentry.testutils import TestCase
+from sentry.testutils import TestCase, fixture
+from sentry.web.frontend.accounts import login_redirect
 
 
 class LoginTest(TestCase):
-    @fixture
-    def user(self):
-        user = User(username="admin", email="admin@localhost")
-        user.set_password('foobar')
-        user.save()
-        return user
-
     @fixture
     def path(self):
         return reverse('sentry-login')
 
     def test_renders_correct_template(self):
         resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 200)
+
+        assert resp.status_code == 200
         self.assertTemplateUsed('sentry/login.html')
 
     def test_invalid_password(self):
@@ -34,8 +29,8 @@ class LoginTest(TestCase):
             'username': self.user.username,
             'password': 'bizbar',
         })
-        self.assertEquals(resp.status_code, 200)
-        self.assertEquals(resp.context['form'].errors['__all__'],
+        assert resp.status_code == 200
+        assert (resp.context['form'].errors['__all__'] ==
             [u'Please enter a correct username and password. Note that both fields are case-sensitive.'])
 
     def test_valid_credentials(self):
@@ -44,9 +39,9 @@ class LoginTest(TestCase):
 
         resp = self.client.post(self.path, {
             'username': self.user.username,
-            'password': 'foobar',
+            'password': 'admin',
         })
-        self.assertEquals(resp.status_code, 302)
+        assert resp.status_code == 302
 
 
 class RegisterTest(TestCase):
@@ -57,12 +52,12 @@ class RegisterTest(TestCase):
     def test_redirects_if_registration_disabled(self):
         with self.Settings(SENTRY_ALLOW_REGISTRATION=False):
             resp = self.client.get(self.path)
-            self.assertEquals(resp.status_code, 302)
+            assert resp.status_code == 302
 
     def test_renders_correct_template(self):
         with self.Settings(SENTRY_ALLOW_REGISTRATION=True):
             resp = self.client.get(self.path)
-            self.assertEquals(resp.status_code, 200)
+            assert resp.status_code == 200
             self.assertTemplateUsed('sentry/register.html')
 
     def test_with_required_params(self):
@@ -72,39 +67,213 @@ class RegisterTest(TestCase):
                 'email': 'test@example.com',
                 'password': 'foobar',
             })
-            self.assertEquals(resp.status_code, 302)
+            assert resp.status_code == 302
             user = User.objects.get(username='test')
-            self.assertEquals(user.email, 'test@example.com')
-            self.assertTrue(user.check_password('foobar'))
+            assert user.email == 'test@example.com'
+            assert user.check_password('foobar')
 
 
 class AppearanceSettingsTest(TestCase):
     @fixture
-    def user(self):
-        user = User(username="admin", email="admin@localhost")
-        user.set_password('password')
-        user.save()
-        return user
+    def path(self):
+        return reverse('sentry-account-settings-appearance')
 
-    def test_requires_auth(self):
-        resp = self.client.get(reverse('sentry-account-settings-appearance'))
-        self.assertEquals(resp.status_code, 302)
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
 
     def test_does_use_template(self):
-        self.client.login(username=self.user.username, password='password')
-        resp = self.client.get(reverse('sentry-account-settings-appearance'))
-        self.assertEquals(resp.status_code, 200)
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+
+        assert resp.status_code == 200
         self.assertTemplateUsed(resp, 'sentry/account/appearance.html')
 
     def test_does_save_settings(self):
-        self.client.login(username=self.user.username, password='password')
-        resp = self.client.post(reverse('sentry-account-settings-appearance'), {
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, {
             'language': 'en',
             'stacktrace_order': '2',
         })
-        self.assertEquals(resp.status_code, 302)
+        assert resp.status_code == 302
+
+        options = UserOption.objects.get_all_values(user=self.user, project=None)
+
+        assert options.get('language') == 'en'
+        assert options.get('stacktrace_order') == '2'
+
+
+class SettingsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-account-settings')
+
+    def params(self, without=()):
+        params = {
+            'email': 'foo@example.com',
+            'first_name': 'Foo bar',
+            'old_password': 'admin',
+        }
+        return dict((k, v) for k, v in params.iteritems() if k not in without)
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert 'form' in resp.context
+
+    def test_requires_email(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, self.params(without=['email']))
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert 'form' in resp.context
+        assert 'email' in resp.context['form'].errors
+
+    def test_requires_first_name(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, self.params(without=['first_name']))
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert 'form' in resp.context
+        assert 'first_name' in resp.context['form'].errors
+
+    def test_requires_old_password(self):
+        self.login_as(self.user)
+
+        resp = self.client.post(self.path, self.params(without=['old_password']))
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert 'form' in resp.context
+        assert 'old_password' in resp.context['form'].errors
+
+    def test_minimum_valid_params(self):
+        self.login_as(self.user)
+
+        params = self.params()
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.first_name == params['first_name']
+        assert user.email == params['email']
+
+    def test_can_change_password(self):
+        self.login_as(self.user)
+
+        params = self.params()
+        params['new_password'] = 'foobar'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert user.check_password('foobar')
+
+
+class LogoutTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-logout')
+
+    def test_logs_user_out(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+        assert self.client.session.keys() == []
+
+    def test_same_behavior_with_anonymous_user(self):
+        resp = self.client.get(self.path)
+        assert resp.status_code == 302
+        assert self.client.session.keys() == []
+
+
+class LoginRedirectTest(TestCase):
+    def make_request(self, next=None):
+        request = HttpRequest()
+        request.session = {}
+        request.user = self.user
+        if next:
+            request.session['_next'] = next
+        return request
+
+    def test_schema_uses_default(self):
+        resp = login_redirect(self.make_request('http://example.com'))
+        assert resp.status_code == 302
+        assert resp['Location'] == reverse('sentry')
+
+    def test_login_uses_default(self):
+        resp = login_redirect(self.make_request(reverse('sentry-login')))
+        assert resp.status_code == 302
+        assert resp['Location'] == reverse('sentry')
+
+    def test_no_value_uses_default(self):
+        resp = login_redirect(self.make_request())
+        assert resp.status_code == 302
+        assert resp['Location'] == reverse('sentry')
+
+    def test_standard_view_works(self):
+        resp = login_redirect(self.make_request(reverse('sentry', args=[1])))
+        assert resp.status_code == 302
+        assert resp['Location'] == reverse('sentry', args=[1])
+
+
+class NotificationSettingsTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-account-settings-notifications')
+
+    def params(self, without=()):
+        params = {
+            'alert_email': 'foo@example.com',
+        }
+        return dict((k, v) for k, v in params.iteritems() if k not in without)
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/notifications.html')
+        assert 'form' in resp.context
+
+    def test_valid_params(self):
+        self.login_as(self.user)
+
+        params = self.params()
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
 
         options = UserOption.objects.get_all_values(user=self.user, project=None)
 
-        self.assertEquals(options.get('stacktrace_order'), '2')
-        self.assertEquals(options.get('language'), 'en')
+        assert options.get('alert_email') == 'foo@example.com'
+
+
+class ListIdentitiesTest(TestCase):
+    @fixture
+    def path(self):
+        return reverse('sentry-account-settings-identities')
+
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
+
+    def test_renders_with_required_context(self):
+        self.login_as(self.user)
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/identities.html')
+        assert 'identity_list' in resp.context
+        assert 'AUTH_PROVIDERS' in resp.context
diff --git a/tests/sentry/web/frontend/projects/tests.py b/tests/sentry/web/frontend/projects/tests.py
index 090ce6ce22..2b0d1fc6f3 100644
--- a/tests/sentry/web/frontend/projects/tests.py
+++ b/tests/sentry/web/frontend/projects/tests.py
@@ -20,9 +20,9 @@ class NewProjectTest(TestCase):
     def path(self):
         return reverse('sentry-new-team-project', args=[self.team.slug])
 
-    def test_unauthenticated_does_redirect(self):
+    def test_missing_permission(self):
         resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
+        assert resp.status_code == 302
 
     def test_does_load(self):
         self.login_as(self.user)
@@ -66,9 +66,8 @@ class ManageProjectTeamTest(TestCase):
     def path(self):
         return reverse('sentry-manage-project-team', args=[self.project.id])
 
-    def test_unauthenticated_does_redirect(self):
-        resp = self.client.get(self.path)
-        self.assertEquals(resp.status_code, 302)
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
 
     def test_renders_with_required_context(self):
         self.login_as(self.user)
@@ -86,9 +85,8 @@ class ManageProjectKeysTest(TestCase):
     def path(self):
         return reverse('sentry-manage-project-keys', args=[self.project.id])
 
-    def test_unauthenticated_does_redirect(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
 
     def test_renders_with_required_context(self):
         self.login_as(self.user)
@@ -105,11 +103,8 @@ class NewProjectKeyTest(TestCase):
     def path(self):
         return reverse('sentry-new-project-key', args=[self.project.id])
 
-    @mock.patch('sentry.models.ProjectKey.objects.create')
-    def test_unauthenticated_does_redirect(self, create):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
-        assert not create.called
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
 
     @mock.patch('sentry.models.ProjectKey.objects.create')
     def test_generates_new_key_and_redirects(self, create):
@@ -131,16 +126,13 @@ class RemoveProjectKeyTest(TestCase):
     def path(self):
         return reverse('sentry-remove-project-key', args=[self.project.id, self.key.id])
 
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path, 'POST')
+
     def test_does_not_respond_to_get(self):
         resp = self.client.get(self.path)
         assert resp.status_code == 405
 
-    @mock.patch('sentry.models.ProjectKey.delete')
-    def test_unauthenticated_does_redirect(self, delete):
-        resp = self.client.post(self.path)
-        assert resp.status_code == 302
-        assert not delete.called
-
     def test_removes_key_and_redirects(self):
         self.login_as(self.user)
 
@@ -155,9 +147,7 @@ class DashboardTest(TestCase):
         return reverse('sentry', args=[self.project.id])
 
     def test_requires_authentication(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
-        assert resp['Location'] == 'http://testserver' + reverse('sentry-login')
+        self.assertRequiresAuthentication(self.path)
 
     def test_redirects_to_getting_started_if_no_groups(self):
         self.login_as(self.user)
@@ -198,9 +188,8 @@ class GetStartedTest(TestCase):
     def path(self):
         return reverse('sentry-get-started', args=[self.project.id])
 
-    def test_unauthenticated_does_redirect(self):
-        resp = self.client.get(self.path)
-        assert resp.status_code == 302
+    def test_requires_authentication(self):
+        self.assertRequiresAuthentication(self.path)
 
     def test_renders_with_required_context(self):
         self.login_as(self.user)
