commit bfe27f43dc28d308546ad03446e24c1ebf9b6c9a
Author: Stephen Cefali <scefali@sentry.io>
Date:   Wed Jul 8 17:05:13 2020 -0700

    feat(msteams): msteams basic installation (#19755)

diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index 6b2d019973..e8d37ccc6b 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -860,6 +860,8 @@ SENTRY_FEATURES = {
     "organizations:integrations-incident-management": True,
     # Enable the Vercel integration
     "organizations:integrations-vercel": False,
+    # Enable the MsTeams integration
+    "organizations:integrations-msteams": False,
     # Enable data forwarding functionality for organizations.
     "organizations:data-forwarding": True,
     # Enable experimental performance improvements.
@@ -1574,6 +1576,7 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     "sentry.integrations.vsts_extension.VstsExtensionIntegrationProvider",
     "sentry.integrations.pagerduty.integration.PagerDutyIntegrationProvider",
     "sentry.integrations.vercel.VercelIntegrationProvider",
+    "sentry.integrations.msteams.MsTeamsIntegrationProvider",
 )
 
 
diff --git a/src/sentry/features/__init__.py b/src/sentry/features/__init__.py
index 6229295832..6e87d1fcb8 100644
--- a/src/sentry/features/__init__.py
+++ b/src/sentry/features/__init__.py
@@ -80,6 +80,7 @@ default_manager.add("organizations:integrations-alert-rule", OrganizationFeature
 default_manager.add("organizations:integrations-chat-unfurl", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-incident-management", OrganizationFeature)  # NOQA
 default_manager.add("organizations:integrations-vercel", OrganizationFeature)  # NOQA
+default_manager.add("organizations:integrations-msteams", OrganizationFeature)  # NOQA
 default_manager.add("organizations:internal-catchall", OrganizationFeature)  # NOQA
 default_manager.add("organizations:invite-members", OrganizationFeature)  # NOQA
 default_manager.add("organizations:large-debug-files", OrganizationFeature)  # NOQA
diff --git a/src/sentry/integrations/msteams/__init__.py b/src/sentry/integrations/msteams/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/msteams/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/msteams/client.py b/src/sentry/integrations/msteams/client.py
new file mode 100644
index 0000000000..d5a0902cfd
--- /dev/null
+++ b/src/sentry/integrations/msteams/client.py
@@ -0,0 +1,63 @@
+from __future__ import absolute_import
+
+from six.moves.urllib.parse import urlencode
+from sentry.integrations.client import ApiClient
+
+
+class MsTeamsClient(ApiClient):
+    integration_name = "msteams"
+    # TODO(steve): make base url configurable
+    base_url = "https://smba.trafficmanager.net/amer"
+
+    TEAM_URL = "/v3/teams/%s"
+    ACTIVITY_URL = "/v3/conversations/%s/activities"
+
+    def __init__(self, access_token=None):
+        super(MsTeamsClient, self).__init__()
+        # TODO(steve): copy how Github does it
+        if not access_token:
+            access_token = get_token()
+        self.access_token = access_token
+
+    def request(self, method, path, data=None, params=None):
+        headers = {"Authorization": u"Bearer {}".format(self.access_token)}
+        return self._request(method, path, headers=headers, data=data, params=params)
+
+    def get_team_info(self, team_id):
+        return self.get(self.TEAM_URL % team_id)
+
+    def send_message(self, conversation_id, data):
+        return self.post(self.ACTIVITY_URL % conversation_id, data=data)
+
+
+class OauthMsTeamsClient(ApiClient):
+    base_url = "https://login.microsoftonline.com/botframework.com"
+    integration_name = "msteams_oauth"
+
+    TOKEN_URL = "/oauth2/v2.0/token"
+
+    def __init__(self, client_id, client_secret):
+        super(OauthMsTeamsClient, self).__init__()
+        self.client_id = client_id
+        self.client_secret = client_secret
+
+    def exchange_token(self):
+        headers = {"Content-Type": "application/x-www-form-urlencoded"}
+        data = {
+            "client_id": self.client_id,
+            "client_secret": self.client_secret,
+            "grant_type": "client_credentials",
+            "scope": "https://api.botframework.com/.default",
+        }
+        return self.post(self.TOKEN_URL, data=urlencode(data), headers=headers, json=False)
+
+
+# TODO(steve): copy how Github does it
+def get_token():
+    from sentry import options
+
+    client_id = options.get("msteams.client-id")
+    client_secret = options.get("msteams.client-secret")
+    client = OauthMsTeamsClient(client_id, client_secret)
+    resp = client.exchange_token()
+    return resp["access_token"]
diff --git a/src/sentry/integrations/msteams/integration.py b/src/sentry/integrations/msteams/integration.py
new file mode 100644
index 0000000000..f93a670575
--- /dev/null
+++ b/src/sentry/integrations/msteams/integration.py
@@ -0,0 +1,98 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.utils.translation import ugettext_lazy as _
+
+
+from sentry.integrations import (
+    IntegrationInstallation,
+    IntegrationFeatures,
+    IntegrationProvider,
+    IntegrationMetadata,
+    FeatureDescription,
+)
+from sentry.pipeline import PipelineView
+from .client import MsTeamsClient
+
+logger = logging.getLogger("sentry.integrations.msteams")
+
+DESCRIPTION = """
+MS TEAMS DESC
+"""
+
+
+FEATURES = [
+    FeatureDescription(
+        """
+        Teams unfurl
+        """,
+        IntegrationFeatures.CHAT_UNFURL,
+    ),
+    FeatureDescription(
+        """
+        Teams alert rule
+        """,
+        IntegrationFeatures.ALERT_RULE,
+    ),
+]
+
+
+INSTALL_NOTICE_TEXT = "INSTALL TEXT"
+
+external_install = {
+    "url": u"https://google.com",  # TODO: set correct URL
+    "buttonText": _("Teams Marketplace"),
+    "noticeText": _(INSTALL_NOTICE_TEXT),
+}
+
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    features=FEATURES,
+    author="The Sentry Team",
+    noun=_("Installation"),
+    issue_url="https://github.com/getsentry/sentry/issues/new",
+    source_url="https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/msteams",
+    aspects={"externalInstall": external_install},
+)
+
+
+class MsTeamsIntegration(IntegrationInstallation):
+    pass
+
+
+class MsTeamsIntegrationProvider(IntegrationProvider):
+    key = "msteams"
+    name = "Microsoft Teams (development)"
+    requires_feature_flag = True
+    can_add = False
+    metadata = metadata
+    integration_cls = MsTeamsIntegration
+    features = frozenset([IntegrationFeatures.CHAT_UNFURL, IntegrationFeatures.ALERT_RULE])
+
+    def get_pipeline_views(self):
+        return [MsTeamsPipelineView()]
+
+    def build_integration(self, state):
+        team_id = state[self.key]["team_id"]
+        client = MsTeamsClient()
+        team = client.get_team_info(team_id)
+        # TODO: actually store token stuff :)
+        integration = {
+            "name": team["name"],
+            "external_id": team_id,
+            "metadata": {},
+        }
+        return integration
+
+
+class MsTeamsPipelineView(PipelineView):
+    """
+    This pipeline step just binds the team ID for now
+    """
+
+    def dispatch(self, request, pipeline):
+        team_id = request.GET.get("team_id")
+        pipeline.bind_state("team_id", team_id)
+        return pipeline.next_step()
diff --git a/src/sentry/integrations/msteams/urls.py b/src/sentry/integrations/msteams/urls.py
new file mode 100644
index 0000000000..9917020a36
--- /dev/null
+++ b/src/sentry/integrations/msteams/urls.py
@@ -0,0 +1,12 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import url
+
+from .webhook import MsTeamsWebhookEndpoint
+from sentry.web.frontend.msteams_extension_configuration import MsTeamsExtensionConfigurationView
+
+
+urlpatterns = [
+    url(r"^webhook/$", MsTeamsWebhookEndpoint.as_view()),
+    url(r"^configure/$", MsTeamsExtensionConfigurationView.as_view()),
+]
diff --git a/src/sentry/integrations/msteams/webhook.py b/src/sentry/integrations/msteams/webhook.py
new file mode 100644
index 0000000000..dac21230a6
--- /dev/null
+++ b/src/sentry/integrations/msteams/webhook.py
@@ -0,0 +1,62 @@
+from __future__ import absolute_import
+
+import logging
+
+from django.views.decorators.csrf import csrf_exempt
+from sentry.api.base import Endpoint
+from sentry.utils.compat import filter
+from sentry.utils.http import absolute_uri
+from sentry.utils.signing import sign
+from sentry.web.decorators import transaction_start
+
+from .client import MsTeamsClient
+
+logger = logging.getLogger("sentry.integrations.msteams.webhooks")
+
+
+# TODO: implement
+def verify_signature(request):
+    return True
+
+
+class MsTeamsWebhookEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(MsTeamsWebhookEndpoint, self).dispatch(request, *args, **kwargs)
+
+    @transaction_start("MsTeamsWebhookEndpoint")
+    def post(self, request):
+        is_valid = verify_signature(request)
+
+        if not is_valid:
+            logger.error("msteams.webhook.invalid-signature")
+            return self.respond(status=401)
+
+        data = request.data
+        channel_data = data["channelData"]
+        event = channel_data.get("eventType")
+        # TODO: Handle other events
+        if event == "teamMemberAdded":
+            # only care if our bot is the new member added
+            matches = filter(lambda x: x["id"] == data["recipient"]["id"], data["membersAdded"])
+            if matches:
+                # send welcome message to the team
+                team_id = channel_data["team"]["id"]
+                client = MsTeamsClient()
+                # sign the params so this can't be forged
+                signed_params = sign(team_id=team_id)
+                url = u"%s?signed_params=%s" % (
+                    absolute_uri("/extensions/msteams/configure/"),
+                    signed_params,
+                )
+                # TODO: Better message
+                payload = {
+                    "type": "message",
+                    "text": url,
+                }
+                client.send_message(team_id, payload)
+
+        return self.respond(status=200)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index 1c6b679184..569db18209 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -149,6 +149,10 @@ register("vercel.client-id", flags=FLAG_PRIORITIZE_DISK)
 register("vercel.client-secret", flags=FLAG_PRIORITIZE_DISK)
 register("vercel.integration-slug", default="sentry")
 
+# MsTeams Integration
+register("msteams.client-id", flags=FLAG_PRIORITIZE_DISK)
+register("msteams.client-secret", flags=FLAG_PRIORITIZE_DISK)
+
 # Snuba
 register("snuba.search.pre-snuba-candidates-optimizer", type=Bool, default=False)
 register("snuba.search.pre-snuba-candidates-percentage", default=0.2)
diff --git a/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx b/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx
index a3359bc2d0..7d6abf0682 100644
--- a/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx
+++ b/src/sentry/static/sentry/app/views/integrationOrganizationLink.tsx
@@ -151,7 +151,9 @@ export default class IntegrationOrganizationLink extends AsyncView<Props, State>
       const {selectedOrgSlug} = this.state;
       const query = {orgSlug: selectedOrgSlug, ...this.queryParams};
       this.trackInstallationStart();
-      window.location.assign(`/extensions/vercel/configure/?${urlEncode(query)}`);
+      window.location.assign(
+        `/extensions/${this.integrationSlug}/configure/?${urlEncode(query)}`
+      );
     });
   }
 
diff --git a/src/sentry/web/frontend/msteams_extension_configuration.py b/src/sentry/web/frontend/msteams_extension_configuration.py
new file mode 100644
index 0000000000..444b41cf14
--- /dev/null
+++ b/src/sentry/web/frontend/msteams_extension_configuration.py
@@ -0,0 +1,23 @@
+from __future__ import absolute_import
+
+
+from sentry import features
+from sentry.utils.signing import unsign
+
+from .integration_extension_configuration import IntegrationExtensionConfigurationView
+
+
+class MsTeamsExtensionConfigurationView(IntegrationExtensionConfigurationView):
+    provider = "msteams"
+    external_provider_key = "msteams"
+
+    def is_enabled_for_org(self, org, user):
+        return features.has("organizations:integrations-msteams", org, actor=user)
+
+    def map_params_to_state(self, params):
+        # decode the signed params and add them to whatever params we have
+        params = params.copy()
+        signed_params = params["signed_params"]
+        del params["signed_params"]
+        params.update(unsign(signed_params.encode("ascii", errors="ignore")))
+        return params
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index cb732da94b..d351ce764c 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -633,6 +633,7 @@ urlpatterns += [
                 url(r"^bitbucket/", include("sentry.integrations.bitbucket.urls")),
                 url(r"^bitbucket-server/", include("sentry.integrations.bitbucket_server.urls")),
                 url(r"^vercel/", include("sentry.integrations.vercel.urls")),
+                url(r"^msteams/", include("sentry.integrations.msteams.urls")),
             ]
         ),
     ),
