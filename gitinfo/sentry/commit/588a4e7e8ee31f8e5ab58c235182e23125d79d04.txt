commit 588a4e7e8ee31f8e5ab58c235182e23125d79d04
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Jan 12 15:38:16 2011 -0800

    request processing now happens globally in client.process

diff --git a/sentry/client/base.py b/sentry/client/base.py
index 615cfca155..3d959e615b 100644
--- a/sentry/client/base.py
+++ b/sentry/client/base.py
@@ -23,6 +23,20 @@ class SentryClient(object):
     def process(self, **kwargs):
         from sentry.helpers import get_filters
 
+        request = kwargs.pop('request', None)
+        if request:
+            if not kwargs.get('data'):
+                kwargs['data'] = {}
+            kwargs['data'].update(dict(
+                META=request.META,
+                POST=request.POST,
+                GET=request.GET,
+                COOKIES=request.COOKIES,
+            ))
+
+            if not kwargs.get('url'):
+                kwargs['url'] = request.build_absolute_uri()
+
         kwargs.setdefault('level', logging.ERROR)
         kwargs.setdefault('server_name', conf.NAME)
 
@@ -113,24 +127,10 @@ class SentryClient(object):
         """
         Creates an error log for a `logging` module `record` instance.
         """
-        for k in ('url', 'view', 'data'):
+        for k in ('url', 'view', 'data', 'request'):
             if k not in kwargs:
                 kwargs[k] = record.__dict__.get(k)
         
-        request = getattr(record, 'request', None)
-        if request:
-            if not kwargs.get('data'):
-                kwargs['data'] = {}
-            kwargs['data'].update(dict(
-                META=request.META,
-                POST=request.POST,
-                GET=request.GET,
-                COOKIES=request.COOKIES,
-            ))
-
-            if not kwargs.get('url'):
-                kwargs['url'] = request.build_absolute_uri()
-        
         kwargs.update({
             'logger': record.name,
             'level': record.levelno,
diff --git a/sentry/client/middleware.py b/sentry/client/middleware.py
index 2b48739bbf..c5e3114aee 100644
--- a/sentry/client/middleware.py
+++ b/sentry/client/middleware.py
@@ -1,12 +1,19 @@
-from sentry.client.models import sentry_exception_handler
+from sentry.client.models import get_client
+
+import logging
 
 class Sentry404CatchMiddleware(object):
     def process_response(self, request, response):
         if response.status_code != 404:
             return response
-        sentry_exception_handler(sender=Sentry404CatchMiddleware, request=request)
+        message_id = get_client().create_from_text('Http 404', request=request, level=logging.INFO, logger='http404')
+        request.sentry = {
+            'id': message_id,
+        }
         return response
 
+    # sentry_exception_handler(sender=Sentry404CatchMiddleware, request=request)
+
 class SentryResponseErrorIdMiddleware(object):
     """
     Appends the X-Sentry-ID response header for referencing a message within
diff --git a/sentry/client/models.py b/sentry/client/models.py
index 714971f5d1..a05440ca7e 100644
--- a/sentry/client/models.py
+++ b/sentry/client/models.py
@@ -29,19 +29,8 @@ def sentry_exception_handler(request=None, **kwargs):
         if transaction.is_dirty():
             transaction.rollback()
 
-        if request:
-            data = dict(
-                META=request.META,
-                POST=request.POST,
-                GET=request.GET,
-                COOKIES=request.COOKIES,
-            )
-        else:
-            data = dict()
-
         extra = dict(
-            url=request and request.build_absolute_uri() or None,
-            data=data,
+            request=request,
         )
         
         message_id = get_client().create_from_exception(**extra)
diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index c08be60cbd..382acde184 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -631,6 +631,42 @@ class SentryTestCase(TestCase):
         last = GroupedMessage.objects.get()
         self.assertEquals(last.data['version'], sentry.VERSION)
 
+    def test404Middleware(self):
+        existing = settings.MIDDLEWARE_CLASSES
+        
+        settings.MIDDLEWARE_CLASSES = (
+            'sentry.client.middleware.Sentry404CatchMiddleware',
+        ) + settings.MIDDLEWARE_CLASSES
+        
+        resp = self.client.get('/non-existant-page')
+        self.assertEquals(resp.status_code, 404)
+
+        self.assertEquals(Message.objects.count(), 1)
+        self.assertEquals(GroupedMessage.objects.count(), 1)
+        last = Message.objects.get()
+        self.assertEquals(last.url, u'http://testserver/non-existant-page')
+        self.assertEquals(last.level, logging.INFO)
+        self.assertEquals(last.logger, 'http404')
+
+        settings.MIDDLEWARE_CLASSES = existing
+
+    def testResponseErrorIdMiddleware(self):
+        # TODO: test with 500s
+        existing = settings.MIDDLEWARE_CLASSES
+        
+        settings.MIDDLEWARE_CLASSES = (
+            'sentry.client.middleware.SentryResponseErrorIdMiddleware',
+            'sentry.client.middleware.Sentry404CatchMiddleware',
+        ) + settings.MIDDLEWARE_CLASSES
+        
+        resp = self.client.get('/non-existant-page')
+        self.assertEquals(resp.status_code, 404)
+        headers = dict(resp.items())
+        self.assertTrue(headers.get('X-Sentry-ID'))
+        self.assertTrue(Message.objects.filter(message_id=headers['X-Sentry-ID']).exists())
+
+        settings.MIDDLEWARE_CLASSES = existing
+
 class SentryViewsTest(TestCase):
     urls = 'sentry.tests.urls'
     fixtures = ['sentry/tests/fixtures/views.json']
