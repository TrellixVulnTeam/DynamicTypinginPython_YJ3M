commit aa8dc14ab5e85a4932f29c53dd57385f5de88750
Author: Mark Story <mark@sentry.io>
Date:   Tue May 19 12:23:11 2020 -0400

    fix(perf-views) Use grid editable in performance overview (#18861)
    
    Using the same table components that are used in discover allow us to
    fix overflow problems by having a resizable and scrollable table. I've
    removed some of the discover specific logic from GridEditable with the
    goal of make that component easier to re-use.
    
    I also fixed the squashed and misaligned scorebar in performance
    overview too.
    
    Co-authored-by: Billy Vong <billyvg@users.noreply.github.com>

diff --git a/docs-ui/components/gridEditable.stories.js b/docs-ui/components/gridEditable.stories.js
index 8b3f9f2d5e..b34a3ab2ac 100644
--- a/docs-ui/components/gridEditable.stories.js
+++ b/docs-ui/components/gridEditable.stories.js
@@ -1,10 +1,10 @@
 import React from 'react';
+import PropTypes from 'prop-types';
 import {storiesOf} from '@storybook/react';
 import {withInfo} from '@storybook/addon-info';
 import styled from '@emotion/styled';
 
 import Button from 'app/components/button';
-import GlobalModal from 'app/components/globalModal';
 import GridEditable from 'app/components/gridEditable';
 
 const Section = styled('div')`
@@ -15,14 +15,17 @@ const COLUMN_ORDER = [
   {
     key: 'farm',
     name: 'farm',
+    width: -1,
   },
   {
     key: 'count(apple)',
     name: 'apples sold',
+    width: -1,
   },
   {
     key: 'count(banana)',
     name: 'banana sold',
+    width: -1,
   },
 ];
 const COLUMN_SORT_BY = [
@@ -59,81 +62,38 @@ const DATA = [
 ];
 
 class GridParent extends React.Component {
+  static propTypes = {
+    withHeader: PropTypes.bool,
+    title: PropTypes.string,
+  };
+
   state = {
     columnOrder: [...COLUMN_ORDER],
     columnSortBy: [...COLUMN_SORT_BY],
   };
 
-  createColumn = () => {
-    const dataRow = DATA[0];
-    const keys = Object.keys(dataRow);
-    const randomKey = keys[Math.floor(Math.random() * keys.length)];
-
-    this.setState({
-      columnOrder: [
-        ...this.state.columnOrder,
-        {
-          key: randomKey,
-          name: randomKey,
-        },
-      ],
-    });
-  };
-
-  updateColumn = (i, nextColumn) => {
-    const {columnOrder} = this.state;
-
-    this.setState({
-      columnOrder: [...columnOrder.slice(0, i), nextColumn, ...columnOrder.slice(i + 1)],
-    });
-  };
-
-  deleteColumn = i => {
-    const {columnOrder} = this.state;
-
-    this.setState({
-      columnOrder: [...columnOrder.slice(0, i), ...columnOrder.slice(i + 1)],
-    });
-  };
-
-  renderModalBodyWithForm = (i, column) => {
-    return (
-      <React.Fragment>
-        {column ? (
-          <Button onClick={() => this.updateColumn(i, {...column, name: 'Sentry'})}>
-            Rename this column to "Sentry"
-          </Button>
-        ) : (
-          <Button onClick={this.createColumn}>Add a random column</Button>
-        )}
-        <br />
-        <br />
-        <div>You should create a user-friendly form here to edit the columns</div>
-      </React.Fragment>
-    );
-  };
-
-  renderModalFooter = () => {
-    return <div>This is the footer</div>;
+  handleResizeColumn = (index, newColumn) => {
+    const columnOrder = [...this.state.columnOrder];
+    columnOrder[index] = {...columnOrder[index], width: newColumn.width};
+    this.setState({columnOrder});
   };
 
   render() {
+    const {withHeader, title} = this.props;
+    const headerButtons = withHeader
+      ? () => <Button size="small">Action Button</Button>
+      : null;
     return (
       <GridEditable
-        isEditable
+        headerButtons={headerButtons}
         isLoading={false}
         error={null}
         data={DATA}
         columnOrder={this.state.columnOrder}
         columnSortBy={this.state.columnSortBy}
-        grid={{}}
-        modalEditColumn={{
-          renderBodyWithForm: this.renderModalBodyWithForm,
-          renderFooter: this.renderModalFooter,
-        }}
-        actions={{
-          deleteColumn: this.deleteColumn,
-          moveColumn: () => {},
+        title={title}
+        grid={{
+          onResizeColumn: this.handleResizeColumn,
         }}
       />
     );
@@ -143,36 +103,24 @@ class GridParent extends React.Component {
 storiesOf('UI|GridEditable', module)
   .add(
     'default',
-    withInfo('There is a dependency on GlobalModal to display the Modal')(() => (
+    withInfo('Render a simple resizable table')(() => (
       <React.Fragment>
         <Section>
-          <h2>{'isEditable={true}'}</h2>
+          <h2>Basic Table</h2>
           <GridParent />
         </Section>
-        <Section>
-          <h2>{'isEditable={false}'}</h2>
-          <GridEditable
-            isEditable={false}
-            isLoading={false}
-            error={null}
-            data={DATA}
-            columnOrder={COLUMN_ORDER}
-            columnSortBy={COLUMN_SORT_BY}
-            grid={{}}
-            modalEditColumn={{
-              renderBodyWithForm: () => {},
-              renderFooter: () => {},
-            }}
-            actions={{
-              deleteColumn: () => {},
-              moveColumn: () => {},
-            }}
-          />
-        </Section>
-        <GlobalModal />
       </React.Fragment>
     ))
   )
+  .add(
+    'with a header',
+    withInfo('Include a header and action buttons')(() => (
+      <Section>
+        <h2>Table with title & header buttons</h2>
+        <GridParent withHeader title="Results" />
+      </Section>
+    ))
+  )
   .add(
     'isLoading',
     withInfo('')(() => (
@@ -186,14 +134,6 @@ storiesOf('UI|GridEditable', module)
           columnOrder={COLUMN_ORDER}
           columnSortBy={COLUMN_SORT_BY}
           grid={{}}
-          modalEditColumn={{
-            renderBodyWithForm: () => <div>ModalBody</div>,
-            renderFooter: () => <div>ModalFooter</div>,
-          }}
-          actions={{
-            deleteColumn: () => {},
-            moveColumn: () => {},
-          }}
         />
       </Section>
     ))
@@ -211,14 +151,6 @@ storiesOf('UI|GridEditable', module)
           columnOrder={COLUMN_ORDER}
           columnSortBy={COLUMN_SORT_BY}
           grid={{}}
-          modalEditColumn={{
-            renderBodyWithForm: () => <div>ModalBody</div>,
-            renderFooter: () => <div>ModalFooter</div>,
-          }}
-          actions={{
-            deleteColumn: () => {},
-            moveColumn: () => {},
-          }}
         />
       </Section>
     ))
diff --git a/src/sentry/static/sentry/app/components/gridEditable/index.tsx b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
index 9100bc58e8..a867cac21b 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/index.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/index.tsx
@@ -3,12 +3,8 @@ import {Location} from 'history';
 
 import {t} from 'app/locale';
 import EmptyStateWarning from 'app/components/emptyStateWarning';
-import Feature from 'app/components/acl/feature';
-import {ExportQueryType} from 'app/components/dataExport';
-import FeatureDisabled from 'app/components/acl/featureDisabled';
-import Hovercard from 'app/components/hovercard';
 import LoadingIndicator from 'app/components/loadingIndicator';
-import {IconDownload, IconEdit, IconWarning} from 'app/icons';
+import {IconWarning} from 'app/icons';
 import theme from 'app/utils/theme';
 
 import {
@@ -21,9 +17,7 @@ import {
 import {
   Header,
   HeaderTitle,
-  HeaderButton,
   HeaderButtonContainer,
-  HeaderDownloadButton,
   Body,
   Grid,
   GridRow,
@@ -38,13 +32,6 @@ import {
 import {COL_WIDTH_MINIMUM, COL_WIDTH_UNDEFINED, ColResizeMetadata} from './utils';
 
 type GridEditableProps<DataRow, ColumnKey> = {
-  /**
-   * This is currently required as we only have one usage of
-   * this component in the future. If we have more this could be
-   * made optional. You will need to update renderHeaderButtons() though.
-   */
-  editFeatures: string[];
-  noEditMessage?: string;
   location: Location;
   isLoading?: boolean;
   error?: React.ReactNode | null;
@@ -59,6 +46,12 @@ type GridEditableProps<DataRow, ColumnKey> = {
    *   move sorting into Grid for performance
    */
   title?: string;
+  /**
+   * Inject a set of buttons into the top of the grid table.
+   * The controlling component is responsible for handling any actions
+   * in these buttons and updating props to the GridEditable instance.
+   */
+  headerButtons?: () => React.ReactNode;
   columnOrder: GridColumnOrder<ColumnKey>[];
   columnSortBy: GridColumnSortBy<ColumnKey>[];
   data: DataRow[];
@@ -87,16 +80,6 @@ type GridEditableProps<DataRow, ColumnKey> = {
     ) => React.ReactNode[];
     prependColumnWidths?: string[];
   };
-
-  /**
-   * As there is no internal state being maintained, the parent component will
-   * have to provide functions to update the state of the columns, especially
-   * after moving/resizing
-   */
-  actions: {
-    editColumns: () => void;
-    downloadAsCsv: () => void;
-  };
 };
 
 type GridEditableState = {
@@ -229,10 +212,6 @@ class GridEditable<
     window.requestAnimationFrame(() => this.resizeGridColumn(e, resizeMetadata));
   };
 
-  handleToggleEdit = () => {
-    this.props.actions.editColumns();
-  };
-
   resizeGridColumn(e: MouseEvent, metadata: ColResizeMetadata) {
     const grid = this.refGrid.current;
     if (!grid) {
@@ -287,97 +266,6 @@ class GridEditable<
     grid.style.gridTemplateColumns = `${prepend} ${widths.join(' ')}`;
   }
 
-  renderHeaderButtons() {
-    const {noEditMessage, editFeatures} = this.props;
-    const renderDisabled = p => (
-      <Hovercard
-        body={
-          <FeatureDisabled
-            features={p.features}
-            hideHelpToggle
-            message={noEditMessage}
-            featureName={noEditMessage}
-          />
-        }
-      >
-        {p.children(p)}
-      </Hovercard>
-    );
-    return (
-      <Feature
-        hookName="feature-disabled:grid-editable-actions"
-        renderDisabled={renderDisabled}
-        features={editFeatures}
-      >
-        {({hasFeature}) => (
-          <React.Fragment>
-            {this.renderDownloadButton(hasFeature)}
-            {this.renderEditButton(hasFeature)}
-          </React.Fragment>
-        )}
-      </Feature>
-    );
-  }
-
-  renderDownloadButton(canEdit: boolean) {
-    const {data} = this.props;
-    if (data && data.length < 50) {
-      return this.renderBrowserExportButton(canEdit);
-    } else {
-      return (
-        <Feature
-          features={['organizations:data-export']}
-          renderDisabled={() => this.renderBrowserExportButton(canEdit)}
-        >
-          {this.renderAsyncExportButton(canEdit)}
-        </Feature>
-      );
-    }
-  }
-
-  renderBrowserExportButton(canEdit: boolean) {
-    const disabled = this.props.isLoading || canEdit === false;
-    const onClick = disabled ? undefined : this.props.actions.downloadAsCsv;
-
-    return (
-      <HeaderButton
-        disabled={disabled}
-        onClick={onClick}
-        data-test-id="grid-download-csv"
-      >
-        <IconDownload size="xs" />
-        {t('Export Page')}
-      </HeaderButton>
-    );
-  }
-
-  renderAsyncExportButton(canEdit: boolean) {
-    const {isLoading, location} = this.props;
-    const disabled = isLoading || canEdit === false;
-    return (
-      <HeaderDownloadButton
-        payload={{
-          queryType: ExportQueryType.Discover,
-          queryInfo: location.query,
-        }}
-        disabled={disabled}
-      >
-        <IconDownload size="xs" />
-        {t('Export All')}
-      </HeaderDownloadButton>
-    );
-  }
-
-  renderEditButton(canEdit: boolean) {
-    const onClick = canEdit ? this.handleToggleEdit : undefined;
-    return (
-      <HeaderButton disabled={!canEdit} onClick={onClick} data-test-id="grid-edit-enable">
-        <IconEdit size="xs" />
-        {t('Edit Columns')}
-      </HeaderButton>
-    );
-  }
-
   renderGridHead() {
     const {error, isLoading, columnOrder, grid, data} = this.props;
 
@@ -484,11 +372,14 @@ class GridEditable<
   }
 
   render() {
+    const {title, headerButtons} = this.props;
     return (
       <React.Fragment>
         <Header>
-          <HeaderTitle>{t('Results')}</HeaderTitle>
-          <HeaderButtonContainer>{this.renderHeaderButtons()}</HeaderButtonContainer>
+          {title && <HeaderTitle>{title}</HeaderTitle>}
+          {headerButtons && (
+            <HeaderButtonContainer>{headerButtons()}</HeaderButtonContainer>
+          )}
         </Header>
 
         <Body>
diff --git a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
index 998a7e2497..38e219e832 100644
--- a/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
+++ b/src/sentry/static/sentry/app/components/gridEditable/styles.tsx
@@ -2,7 +2,6 @@ import React from 'react';
 import styled from '@emotion/styled';
 
 import {Panel, PanelBody} from 'app/components/panels';
-import DataExport from 'app/components/dataExport';
 import space from 'app/styles/space';
 
 export const GRID_HEAD_ROW_HEIGHT = 45;
@@ -35,8 +34,11 @@ export const HeaderTitle = styled('h4')`
 `;
 
 export const HeaderButtonContainer = styled('div')`
-  display: flex;
-  flex-direction: row;
+  display: grid;
+  grid-gap: ${space(2)};
+  grid-auto-flow: column;
+  grid-auto-columns: auto;
+  justify-items: end;
 
   /* Hovercard anchor element when features are disabled. */
   & > span {
@@ -45,39 +47,6 @@ export const HeaderButtonContainer = styled('div')`
   }
 `;
 
-export const HeaderButton = styled('div')<{disabled?: boolean}>`
-  display: flex;
-  align-items: center;
-  color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray3)};
-  cursor: ${p => (p.disabled ? 'default' : 'pointer')};
-  font-size: ${p => p.theme.fontSizeSmall};
-  margin-left: ${space(2)};
-
-  > svg {
-    margin-right: ${space(0.5)};
-  }
-
-  &:hover,
-  &:active {
-    color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray4)};
-  }
-`;
-
-export const HeaderDownloadButton = styled(DataExport)<{disabled: boolean}>`
-  border: none;
-  font-weight: normal;
-  box-shadow: none;
-  color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray3)};
-  svg {
-    margin-right: ${space(0.5)};
-  }
-  &:hover,
-  &:active {
-    color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray4)};
-    box-shadow: none;
-  }
-`;
-
 const PanelWithProtectedBorder = styled(Panel)`
   overflow: hidden;
   z-index: ${Z_INDEX_PANEL};
diff --git a/src/sentry/static/sentry/app/components/scoreBar.jsx b/src/sentry/static/sentry/app/components/scoreBar.jsx
index 0d0c1490e3..049556bf76 100644
--- a/src/sentry/static/sentry/app/components/scoreBar.jsx
+++ b/src/sentry/static/sentry/app/components/scoreBar.jsx
@@ -58,11 +58,10 @@ const StyledScoreBar = styled(ScoreBar)`
   display: flex;
 
   ${p =>
-    p.vertical &&
-    `
-    flex-direction: column-reverse;
-    justify-content: flex-end;
-  `};
+    p.vertical
+      ? `flex-direction: column-reverse;
+    justify-content: flex-end;`
+      : 'min-width: 80px;'};
 `;
 
 const Bar = styled('div')`
diff --git a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
index bf0ae58f01..b2cb0ec603 100644
--- a/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
+++ b/src/sentry/static/sentry/app/utils/discover/fieldRenderers.tsx
@@ -3,7 +3,7 @@ import {Location} from 'history';
 import partial from 'lodash/partial';
 
 import {Organization} from 'app/types';
-import {t} from 'app/locale';
+import {t, tct} from 'app/locale';
 import Count from 'app/components/count';
 import Duration from 'app/components/duration';
 import ProjectBadge from 'app/components/idBadge/projectBadge';
@@ -274,7 +274,7 @@ const SPECIAL_FUNCTIONS: SpecialFunctions = {
     sortField: null,
     renderFunc: data => {
       const uniqueUsers = data.count_unique_user;
-      let userMiseryField;
+      let userMiseryField: string = '';
       for (const field in data) {
         if (field.startsWith('user_misery')) {
           userMiseryField = field;
@@ -285,7 +285,6 @@ const SPECIAL_FUNCTIONS: SpecialFunctions = {
       }
 
       const userMisery = data[userMiseryField];
-
       if (!uniqueUsers && uniqueUsers !== 0) {
         return (
           <NumberContainer>
@@ -296,13 +295,21 @@ const SPECIAL_FUNCTIONS: SpecialFunctions = {
 
       const palette = new Array(10).fill(theme.purpleDarkest);
       const score = Math.floor((userMisery / Math.max(uniqueUsers, 1)) * palette.length);
-      const miseryLimit = parseInt(userMiseryField.split('_').pop(), 10);
-      const title = `${userMisery} out of ${uniqueUsers} unique users waited more than ${4 *
-        miseryLimit}ms`;
+      const miseryLimit = parseInt(userMiseryField.split('_').pop() || '', 10);
+      const title = tct(
+        '[affectedUsers] out of [totalUsers] unique users waited more than [duration]ms',
+        {
+          affectedUsers: userMisery,
+          totalUsers: uniqueUsers,
+          duration: 4 * miseryLimit,
+        }
+      );
       return (
-        <Tooltip title={title} disabled={false}>
-          <ScoreBar size={20} score={score} palette={palette} />
-        </Tooltip>
+        <NumberContainer>
+          <Tooltip title={title} disabled={false}>
+            <ScoreBar size={20} score={score} palette={palette} />
+          </Tooltip>
+        </NumberContainer>
       );
     },
   },
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
index 248126aab8..10bd760bbf 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/headerCell.tsx
@@ -12,11 +12,11 @@ type ChildrenProps = {
 type Props = {
   children: (props: ChildrenProps) => React.ReactElement;
   column: TableColumn<keyof TableDataRow>;
-  tableData: TableData | null | undefined;
+  tableMeta: TableData['meta'];
 };
 
 function HeaderCell(props: Props) {
-  const {children, column, tableData} = props;
+  const {children, column, tableMeta} = props;
 
   // establish alignment based on the type
   const alignedTypes: ColumnValueType[] = ['number', 'duration', 'integer', 'percentage'];
@@ -24,10 +24,7 @@ function HeaderCell(props: Props) {
 
   if (column.type === 'never') {
     // fallback to align the column based on the table metadata
-    const maybeType =
-      tableData && tableData.meta
-        ? tableData.meta[getAggregateAlias(column.name)]
-        : undefined;
+    const maybeType = tableMeta ? tableMeta[getAggregateAlias(column.name)] : undefined;
 
     if (maybeType !== undefined && alignedTypes.includes(maybeType)) {
       align = 'right';
diff --git a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
index bb803f4179..ef90c0ccec 100644
--- a/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
+++ b/src/sentry/static/sentry/app/views/eventsV2/table/tableView.tsx
@@ -6,7 +6,11 @@ import {Location, LocationDescriptorObject} from 'history';
 import {Organization, OrganizationSummary} from 'app/types';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
 import GridEditable, {COL_WIDTH_UNDEFINED} from 'app/components/gridEditable';
-import {IconEvent, IconStack} from 'app/icons';
+import Feature from 'app/components/acl/feature';
+import DataExport, {ExportQueryType} from 'app/components/dataExport';
+import FeatureDisabled from 'app/components/acl/featureDisabled';
+import Hovercard from 'app/components/hovercard';
+import {IconDownload, IconEdit, IconEvent, IconStack} from 'app/icons';
 import {t} from 'app/locale';
 import {openModal} from 'app/actionCreators/modal';
 import Link from 'app/components/links/link';
@@ -18,6 +22,7 @@ import EventView, {
 import {Column} from 'app/utils/discover/fields';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 import {generateEventSlug, eventDetailsRouteWithEventView} from 'app/utils/discover/urls';
+import space from 'app/styles/space';
 
 import {downloadAsCsv, getExpandedResults, pushEventViewToLocation} from '../utils';
 import SortLink from '../sortLink';
@@ -104,19 +109,18 @@ class TableView extends React.Component<TableViewProps> {
 
   _renderGridHeaderCell = (column: TableColumn<keyof TableDataRow>): React.ReactNode => {
     const {eventView, location, tableData} = this.props;
+    const tableMeta = tableData?.meta;
 
     return (
-      <HeaderCell column={column} tableData={tableData}>
+      <HeaderCell column={column} tableMeta={tableMeta}>
         {({align}) => {
-          const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
-
           const field = {field: column.name, width: column.width};
           function generateSortLink(): LocationDescriptorObject | undefined {
-            if (!tableDataMeta) {
+            if (!tableMeta) {
               return undefined;
             }
 
-            const nextEventView = eventView.sortOnField(field, tableDataMeta);
+            const nextEventView = eventView.sortOnField(field, tableMeta);
             const queryStringObject = nextEventView.generateQueryStringObject();
 
             return {
@@ -130,7 +134,7 @@ class TableView extends React.Component<TableViewProps> {
               align={align}
               field={field}
               eventView={eventView}
-              tableDataMeta={tableData && tableData.meta ? tableData.meta : undefined}
+              tableDataMeta={tableMeta}
               generateSortLink={generateSortLink}
             />
           );
@@ -212,29 +216,122 @@ class TableView extends React.Component<TableViewProps> {
     browserHistory.push(nextView.getResultsViewUrlTarget(organization.slug));
   };
 
+  renderHeaderButtons = () => {
+    const noEditMessage = t('Requires discover query feature.');
+    const editFeatures = ['organizations:discover-query'];
+    const renderDisabled = p => (
+      <Hovercard
+        body={
+          <FeatureDisabled
+            features={p.features}
+            hideHelpToggle
+            message={noEditMessage}
+            featureName={noEditMessage}
+          />
+        }
+      >
+        {p.children(p)}
+      </Hovercard>
+    );
+    return (
+      <Feature
+        hookName="feature-disabled:grid-editable-actions"
+        renderDisabled={renderDisabled}
+        features={editFeatures}
+      >
+        {({hasFeature}) => (
+          <React.Fragment>
+            {this.renderDownloadButton(hasFeature)}
+            {this.renderEditButton(hasFeature)}
+          </React.Fragment>
+        )}
+      </Feature>
+    );
+  };
+
+  renderDownloadButton(canEdit: boolean) {
+    const {tableData} = this.props;
+    if (!tableData || (tableData.data && tableData.data.length < 50)) {
+      return this.renderBrowserExportButton(canEdit);
+    } else {
+      return (
+        <Feature
+          features={['organizations:data-export']}
+          renderDisabled={() => this.renderBrowserExportButton(canEdit)}
+        >
+          {this.renderAsyncExportButton(canEdit)}
+        </Feature>
+      );
+    }
+  }
+
+  handleDownloadAsCsv = () => {
+    const {organization, title, eventView, tableData} = this.props;
+    trackAnalyticsEvent({
+      eventKey: 'discover_v2.results.download_csv',
+      eventName: 'Discoverv2: Download CSV',
+      organization_id: parseInt(organization.id, 10),
+    });
+    downloadAsCsv(tableData, eventView.getColumns(), title);
+  };
+
+  renderBrowserExportButton(canEdit: boolean) {
+    const disabled = this.props.isLoading || canEdit === false;
+    const onClick = disabled ? undefined : this.handleDownloadAsCsv;
+
+    return (
+      <HeaderButton
+        disabled={disabled}
+        onClick={onClick}
+        data-test-id="grid-download-csv"
+      >
+        <IconDownload size="xs" />
+        {t('Export Page')}
+      </HeaderButton>
+    );
+  }
+
+  renderAsyncExportButton(canEdit: boolean) {
+    const {isLoading, location} = this.props;
+    const disabled = isLoading || canEdit === false;
+    return (
+      <HeaderDownloadButton
+        payload={{
+          queryType: ExportQueryType.Discover,
+          queryInfo: location.query,
+        }}
+        disabled={disabled}
+      >
+        <IconDownload size="xs" />
+        {t('Export All')}
+      </HeaderDownloadButton>
+    );
+  }
+
+  renderEditButton(canEdit: boolean) {
+    const onClick = canEdit ? this.handleEditColumns : undefined;
+    return (
+      <HeaderButton disabled={!canEdit} onClick={onClick} data-test-id="grid-edit-enable">
+        <IconEdit size="xs" />
+        {t('Edit Columns')}
+      </HeaderButton>
+    );
+  }
+
   render() {
-    const {
-      isLoading,
-      error,
-      location,
-      tableData,
-      eventView,
-      title,
-      organization,
-    } = this.props;
+    const {isLoading, error, location, tableData, eventView} = this.props;
 
     const columnOrder = eventView.getColumns();
     const columnSortBy = eventView.getSorts();
 
     return (
       <GridEditable
-        editFeatures={['organizations:discover-query']}
-        noEditMessage={t('Requires discover query feature.')}
         isLoading={isLoading}
         error={error}
         data={tableData ? tableData.data : []}
         columnOrder={columnOrder}
         columnSortBy={columnSortBy}
+        title={t('Results')}
         grid={{
           renderHeadCell: this._renderGridHeaderCell as any,
           renderBodyCell: this._renderGridBodyCell as any,
@@ -242,18 +339,8 @@ class TableView extends React.Component<TableViewProps> {
           renderPrependColumns: this._renderPrependColumns as any,
           prependColumnWidths: ['40px'],
         }}
+        headerButtons={this.renderHeaderButtons}
         location={location}
-        actions={{
-          editColumns: this.handleEditColumns,
-          downloadAsCsv: () => {
-            trackAnalyticsEvent({
-              eventKey: 'discover_v2.results.download_csv',
-              eventName: 'Discoverv2: Download CSV',
-              organization_id: parseInt(organization.id, 10),
-            });
-            downloadAsCsv(tableData, columnOrder, title);
-          },
-        }}
       />
     );
   }
@@ -333,4 +420,53 @@ const IconLink = styled(Link)`
   top: 3px;
 `;
 
+const HeaderButton = styled('button')<{disabled?: boolean}>`
+  display: flex;
+  align-items: center;
+
+  background: none;
+  border: none;
+  color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray3)};
+  cursor: ${p => (p.disabled ? 'default' : 'pointer')};
+  font-size: ${p => p.theme.fontSizeSmall};
+
+  padding: 0;
+  margin: 0;
+  outline: 0;
+
+  > svg {
+    margin-right: ${space(0.5)};
+  }
+
+  &:hover,
+  &:active {
+    color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray4)};
+  }
+`;
+
+const HeaderDownloadButton = styled(DataExport)<{disabled: boolean}>`
+  background: none;
+  border: none;
+  font-weight: normal;
+  box-shadow: none;
+  color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray3)};
+
+  padding: 0;
+  margin: 0;
+  outline: 0;
+
+  svg {
+    margin-right: ${space(0.5)};
+  }
+  > span {
+    padding: 0;
+  }
+
+  &:hover,
+  &:active {
+    color: ${p => (p.disabled ? p.theme.gray6 : p.theme.gray4)};
+    box-shadow: none;
+  }
+`;
+
 export default TableView;
diff --git a/src/sentry/static/sentry/app/views/performance/table.tsx b/src/sentry/static/sentry/app/views/performance/table.tsx
index 54813aa8e1..7e58b3d5c1 100644
--- a/src/sentry/static/sentry/app/views/performance/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/table.tsx
@@ -1,29 +1,26 @@
 import React from 'react';
-import {Location, LocationDescriptorObject, Query} from 'history';
-import omit from 'lodash/omit';
+import {Location, LocationDescriptorObject} from 'history';
 import styled from '@emotion/styled';
 import {browserHistory} from 'react-router';
 
 import space from 'app/styles/space';
 import {t} from 'app/locale';
 import {Organization, Project} from 'app/types';
-import PanelTable from 'app/components/panels/panelTable';
 import Pagination from 'app/components/pagination';
 import Link from 'app/components/links/link';
-import EventView, {MetaType, EventData} from 'app/utils/discover/eventView';
+import EventView, {EventData} from 'app/utils/discover/eventView';
 import SortLink from 'app/views/eventsV2/sortLink';
 import {TableData, TableDataRow, TableColumn} from 'app/views/eventsV2/table/types';
+import GridEditable, {COL_WIDTH_UNDEFINED, GridColumn} from 'app/components/gridEditable';
 import HeaderCell from 'app/views/eventsV2/table/headerCell';
 import {decodeScalar} from 'app/utils/queryString';
 import withProjects from 'app/utils/withProjects';
 import SearchBar from 'app/components/searchBar';
 import DiscoverQuery from 'app/utils/discover/discoverQuery';
 import {trackAnalyticsEvent} from 'app/utils/analytics';
-import {getAggregateAlias} from 'app/utils/discover/fields';
 import {getFieldRenderer} from 'app/utils/discover/fieldRenderers';
 
 import {transactionSummaryRouteWithQuery} from './transactionSummary/utils';
-import {GridBodyCell, GridBodyCellNumber, GridHeadCell} from './styles';
 
 export function getProjectID(
   eventData: EventData,
@@ -55,56 +52,36 @@ type Props = {
   loadingProjects: boolean;
 };
 
-class Table extends React.Component<Props> {
-  renderResults(isLoading: boolean, tableData: TableData | null) {
-    let cells: React.ReactNode[] = [];
-    if (isLoading) {
-      return cells;
-    }
-    if (!tableData || !tableData.meta) {
-      return cells;
-    }
-    const columnOrder = this.props.eventView.getColumns();
-    const query = this.props.eventView.generateQueryStringObject();
-
-    tableData.data.forEach((row, index: number) => {
-      // check again to appease tsc
-      if (!tableData.meta) {
-        return;
-      }
-      cells = cells.concat(
-        this.renderRow(row, index, columnOrder, tableData.meta, query)
-      );
-    });
-    return cells;
-  }
+type State = {
+  widths: number[];
+};
 
-  renderRow(
-    row: TableDataRow,
-    rowIndex: number,
-    columnOrder: TableColumn<React.ReactText>[],
-    tableMeta: MetaType,
-    query: Query
-  ) {
-    const {organization, location, projects} = this.props;
+class Table extends React.Component<Props, State> {
+  state = {
+    widths: [],
+  };
 
-    return columnOrder.map((column, index) => {
-      const field = String(column.key);
-      // TODO(mark) add a better abstraction for this.
-      const fieldName = getAggregateAlias(field);
-      const fieldType = tableMeta[fieldName];
+  renderBodyCell = (tableMeta: TableData['meta']) => {
+    const {eventView, organization, projects, location} = this.props;
 
+    return (
+      column: TableColumn<keyof TableDataRow>,
+      dataRow: TableDataRow
+    ): React.ReactNode => {
+      if (!tableMeta) {
+        return null;
+      }
+      const field = String(column.key);
       const fieldRenderer = getFieldRenderer(field, tableMeta);
-      let rendered = fieldRenderer(row, {organization, location});
+      let rendered = fieldRenderer(dataRow, {organization, location});
 
-      const isFirstCell = index === 0;
+      if (field === 'transaction') {
+        const projectID = getProjectID(dataRow, projects);
 
-      if (isFirstCell) {
-        // the first column of the row should link to the transaction summary view
-        const projectID = getProjectID(row, projects);
+        const query = eventView.generateQueryStringObject();
         const target = transactionSummaryRouteWithQuery({
           orgSlug: organization.slug,
-          transaction: String(row.transaction) || '',
+          transaction: String(dataRow.transaction) || '',
           projectID,
           query,
         });
@@ -116,67 +93,46 @@ class Table extends React.Component<Props> {
         );
       }
 
-      const key = `${rowIndex}:${column.key}:${index}`;
-      const isNumeric = ['integer', 'number', 'duration'].includes(fieldType);
-      if (isNumeric) {
-        return <GridBodyCellNumber key={key}>{rendered}</GridBodyCellNumber>;
-      }
-
-      return <GridBodyCell key={key}>{rendered}</GridBodyCell>;
-    });
-  }
-
-  renderHeader(tableData: TableData | null) {
-    const {location, eventView, organization} = this.props;
-
-    const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
-
-    return eventView.getColumns().map((column, index) => (
-      <HeaderCell column={column} tableData={tableData} key={index}>
-        {({align}) => {
-          const field = eventView.fields[index];
+      return rendered;
+    };
+  };
 
-          function generateSortLink(): LocationDescriptorObject | undefined {
-            if (!tableDataMeta) {
-              return undefined;
+  renderHeadCell = (tableMeta: TableData['meta']) => {
+    const {eventView, location} = this.props;
+
+    return (column: TableColumn<keyof TableDataRow>): React.ReactNode => {
+      return (
+        <HeaderCell column={column} tableMeta={tableMeta}>
+          {({align}) => {
+            const field = {field: column.name, width: column.width};
+            function generateSortLink(): LocationDescriptorObject | undefined {
+              if (!tableMeta) {
+                return undefined;
+              }
+
+              const nextEventView = eventView.sortOnField(field, tableMeta);
+              const queryStringObject = nextEventView.generateQueryStringObject();
+
+              return {
+                ...location,
+                query: queryStringObject,
+              };
             }
 
-            const nextEventView = eventView.sortOnField(field, tableDataMeta);
-            const queryStringObject = nextEventView.generateQueryStringObject();
-
-            const omitKeys = ['widths', 'query', 'name', 'field'];
-
-            return {
-              ...location,
-              query: omit(queryStringObject, omitKeys),
-            };
-          }
-
-          function handleClick() {
-            trackAnalyticsEvent({
-              eventKey: 'performance_views.overview.sort',
-              eventName: 'Performance Views: Sort Overview',
-              organization_id: parseInt(organization.id, 10),
-              field: field.field,
-            });
-          }
-
-          return (
-            <GridHeadCell>
+            return (
               <SortLink
                 align={align}
                 field={field}
                 eventView={eventView}
-                tableDataMeta={tableDataMeta}
+                tableDataMeta={tableMeta}
                 generateSortLink={generateSortLink}
-                onClick={handleClick}
               />
-            </GridHeadCell>
-          );
-        }}
-      </HeaderCell>
-    ));
-  }
+            );
+          }}
+        </HeaderCell>
+      );
+    };
+  };
 
   getTransactionSearchQuery(): string {
     const {location} = this.props;
@@ -212,8 +168,27 @@ class Table extends React.Component<Props> {
     });
   };
 
+  handleResizeColumn = (columnIndex: number, nextColumn: GridColumn) => {
+    const widths: number[] = [...this.state.widths];
+    widths[columnIndex] = nextColumn.width
+      ? Number(nextColumn.width)
+      : COL_WIDTH_UNDEFINED;
+    this.setState({widths});
+  };
+
   render() {
     const {eventView, organization, location, keyTransactions} = this.props;
+    const {widths} = this.state;
+    const columnOrder = eventView
+      .getColumns()
+      .map((col: TableColumn<React.ReactText>, i: number) => {
+        if (typeof widths[i] === 'number') {
+          return {...col, width: widths[i]};
+        }
+        return col;
+      });
+
+    const columnSortBy = eventView.getSorts();
 
     return (
       <DiscoverQuery
@@ -229,15 +204,18 @@ class Table extends React.Component<Props> {
               placeholder={t('Filter Transactions')}
               onSearch={this.handleTransactionSearchQuery}
             />
-            <StyledPanelTable
-              headers={this.renderHeader(tableData)}
+            <GridEditable
               isLoading={isLoading}
-              isEmpty={!tableData || tableData.data.length === 0}
-              emptyMessage={t('No transactions found')}
-              disablePadding
-            >
-              {this.renderResults(isLoading, tableData)}
-            </StyledPanelTable>
+              data={tableData ? tableData.data : []}
+              columnOrder={columnOrder}
+              columnSortBy={columnSortBy}
+              grid={{
+                onResizeColumn: this.handleResizeColumn,
+                renderHeadCell: this.renderHeadCell(tableData?.meta) as any,
+                renderBodyCell: this.renderBodyCell(tableData?.meta) as any,
+              }}
+              location={location}
+            />
             <Pagination pageLinks={pageLinks} />
           </div>
         )}
@@ -252,8 +230,4 @@ const StyledSearchBar = styled(SearchBar)`
   margin-bottom: ${space(1)};
 `;
 
-const StyledPanelTable = styled(PanelTable)`
-  grid-template-columns: minmax(300px, auto) repeat(8, minmax(80px, 175px));
-`;
-
 export default withProjects(Table);
diff --git a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
index 9beb524de4..1fb799f993 100644
--- a/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
+++ b/src/sentry/static/sentry/app/views/performance/transactionSummary/table.tsx
@@ -52,12 +52,12 @@ class SummaryContentTable extends React.Component<Props> {
   renderHeader() {
     const {eventView, tableData} = this.props;
 
-    const tableDataMeta = tableData && tableData.meta ? tableData.meta : undefined;
+    const tableMeta = tableData?.meta;
     const columnOrder = eventView.getColumns();
     const generateSortLink = () => undefined;
 
     return columnOrder.map((column, index) => (
-      <HeaderCell column={column} tableData={tableData} key={index}>
+      <HeaderCell column={column} tableMeta={tableMeta} key={index}>
         {({align}) => {
           const field = {field: column.name, width: column.width};
 
@@ -67,7 +67,7 @@ class SummaryContentTable extends React.Component<Props> {
                 align={align}
                 field={field}
                 eventView={eventView}
-                tableDataMeta={tableDataMeta}
+                tableDataMeta={tableMeta}
                 generateSortLink={generateSortLink}
               />
             </GridHeadCell>
diff --git a/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap b/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
index 36d83d54d3..e86bd8bd3e 100644
--- a/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
+++ b/tests/js/spec/views/organizationGroupDetails/__snapshots__/groupSimilar.spec.jsx.snap
@@ -1693,7 +1693,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                 vertical={true}
                               >
                                 <ScoreBar
-                                  className="css-19m1jt3-StyledScoreBar eecxaw40"
+                                  className="css-tics7q-StyledScoreBar eecxaw40"
                                   palette={
                                     Array [
                                       "#ec5e44",
@@ -1710,7 +1710,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                   vertical={true}
                                 >
                                   <div
-                                    className="css-19m1jt3-StyledScoreBar eecxaw40"
+                                    className="css-tics7q-StyledScoreBar eecxaw40"
                                   >
                                     <Bar
                                       color="#98b480"
@@ -1831,7 +1831,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                 vertical={true}
                               >
                                 <ScoreBar
-                                  className="css-19m1jt3-StyledScoreBar eecxaw40"
+                                  className="css-tics7q-StyledScoreBar eecxaw40"
                                   palette={
                                     Array [
                                       "#ec5e44",
@@ -1848,7 +1848,7 @@ exports[`Issues Similar View renders with mocked data 1`] = `
                                   vertical={true}
                                 >
                                   <div
-                                    className="css-19m1jt3-StyledScoreBar eecxaw40"
+                                    className="css-tics7q-StyledScoreBar eecxaw40"
                                   >
                                     <Bar
                                       empty={true}
