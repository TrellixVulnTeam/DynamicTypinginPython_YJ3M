commit 806560fdbd51d497a2154d00ed37ed465563ad52
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Tue Jul 17 16:12:31 2018 -0700

    ref(integrations): Scope installation to organization (#9079)

diff --git a/src/sentry/api/endpoints/organization_integration_repos.py b/src/sentry/api/endpoints/organization_integration_repos.py
index 120c0b32ad..11d8edae0a 100644
--- a/src/sentry/api/endpoints/organization_integration_repos.py
+++ b/src/sentry/api/endpoints/organization_integration_repos.py
@@ -24,7 +24,7 @@ class OrganizationIntegrationReposEndpoint(OrganizationEndpoint):
             context = {'repos': []}
             return self.respond(context)
 
-        install = integration.get_installation()
+        install = integration.get_installation(organization.id)
         if isinstance(install, RepositoryMixin):
             repositories = install.get_repositories()
             context = {'repos': repositories}
diff --git a/src/sentry/integrations/base.py b/src/sentry/integrations/base.py
index f4173a7d7e..43135d4ff0 100644
--- a/src/sentry/integrations/base.py
+++ b/src/sentry/integrations/base.py
@@ -83,13 +83,10 @@ class IntegrationProvider(PipelineProvider):
     features = frozenset()
 
     @classmethod
-    def get_installation(cls, model, organization_id=None, project_id=None, **kwargs):
+    def get_installation(cls, model, organization_id, project_id=None, **kwargs):
         if cls.integration_cls is None:
             raise NotImplementedError
 
-        if cls.needs_default_identity is True and organization_id is None:
-            raise NotImplementedError('%s requires an organization_id' % cls.name)
-
         return cls.integration_cls(model, organization_id, project_id, **kwargs)
 
     def get_logger(self):
@@ -160,15 +157,10 @@ class Integration(object):
 
     logger = logging.getLogger('sentry.integrations')
 
-    def __init__(self, model, organization_id=None, project_id=None):
+    def __init__(self, model, organization_id, project_id=None):
         self.model = model
-        if organization_id is not None:
-            self.org_integration = OrganizationIntegration.objects.get(
-                organization_id=organization_id,
-                integration_id=model.id,
-            )
-        else:
-            self.org_integration = None
+        self.organization_id = organization_id
+        self._org_integration = None
 
         if project_id is not None:
             self.project_integration = ProjectIntegration.objects.get(
@@ -178,6 +170,15 @@ class Integration(object):
         else:
             self.project_integration = None
 
+    @property
+    def org_integration(self):
+        if self._org_integration is None:
+            self._org_integration = OrganizationIntegration.objects.get(
+                organization_id=self.organization_id,
+                integration_id=self.model.id,
+            )
+        return self._org_integration
+
     def get_organization_config(self):
         """
         Returns a list of JSONForm configuration object descriptors used to
@@ -203,8 +204,6 @@ class Integration(object):
         """
         For Integrations that rely solely on user auth for authentication
         """
-        if self.org_integration is None:
-            raise NotImplementedError('%s requires an organization_id' % self.name)
 
         identity = Identity.objects.get(id=self.org_integration.default_auth_id)
         return identity
diff --git a/src/sentry/integrations/bitbucket/repository.py b/src/sentry/integrations/bitbucket/repository.py
index ca7fbb7ac1..1fcfa3aef6 100644
--- a/src/sentry/integrations/bitbucket/repository.py
+++ b/src/sentry/integrations/bitbucket/repository.py
@@ -18,7 +18,7 @@ from .webhook import parse_raw_user_email, parse_raw_user_name
 class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
     name = 'Bitbucket v2'
 
-    def get_installation(self, integration_id):
+    def get_installation(self, integration_id, organization_id):
         if integration_id is None:
             raise ValueError('Bitbucket version 2 requires an integration id.')
 
@@ -27,7 +27,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         except Integration.DoesNotExist as error:
             self.handle_api_error(error)
 
-        return integration_model.get_installation()
+        return integration_model.get_installation(organization_id)
 
     def get_config(self, organization):
         choices = []
@@ -65,7 +65,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         ```
         """
         if config.get('name'):
-            installation = self.get_installation(config['integration_id'])
+            installation = self.get_installation(config['integration_id'], organization.id)
             client = installation.get_client()
             try:
                 repo = client.get_repo(config['name'])
@@ -93,7 +93,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         return secret
 
     def create_repository(self, organization, data, actor=None):
-        installation = self.get_installation(data['integration_id'])
+        installation = self.get_installation(data['integration_id'], organization.id)
         client = installation.get_client()
         try:
             resp = client.create_hook(
@@ -121,7 +121,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
             }
 
     def delete_repository(self, repo, actor=None):
-        installation = self.get_installation(repo.integration_id)
+        installation = self.get_installation(repo.integration_id, repo.organization_id)
         client = installation.get_client()
 
         try:
@@ -144,7 +144,7 @@ class BitbucketRepositoryProvider(providers.IntegrationRepositoryProvider):
         ]
 
     def compare_commits(self, repo, start_sha, end_sha, actor=None):
-        installation = self.get_installation(repo.integration_id)
+        installation = self.get_installation(repo.integration_id, repo.organization_id)
         client = installation.get_client()
         # use config name because that is kept in sync via webhooks
         name = repo.config['name']
diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 0e4f9fdeb4..964933247b 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -68,7 +68,7 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         if config.get('name') and config.get('installation'):
             integration = Integration.objects.get(
                 id=config['installation'], organizations=organization)
-            installation = integration.get_installation()
+            installation = integration.get_installation(organization.id)
             client = installation.get_client()
 
             repo = self._validate_repo(client, installation, config['name'])
@@ -104,7 +104,7 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
         if integration_id is None:
             raise NotImplementedError('GitHub apps requires an integration id to fetch commits')
         integration = Integration.objects.get(id=integration_id)
-        installation = integration.get_installation()
+        installation = integration.get_installation(repo.organization_id)
         client = installation.get_client()
 
         # use config name because that is kept in sync via webhooks
@@ -130,7 +130,7 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
             if integration_id is None:
                 raise NotImplementedError('GitHub apps requires an integration id to fetch commits')
             integration = Integration.objects.get(id=integration_id)
-            installation = integration.get_installation()
+            installation = integration.get_installation(repo.organization_id)
             client = installation.get_client()
 
             # use config name because that is kept in sync via webhooks
diff --git a/src/sentry/integrations/jira/installed.py b/src/sentry/integrations/jira/installed.py
index eeca075336..3d0c0c648e 100644
--- a/src/sentry/integrations/jira/installed.py
+++ b/src/sentry/integrations/jira/installed.py
@@ -26,6 +26,6 @@ class JiraInstalledEndpoint(Endpoint):
         # Sync integration metadata from Jira. This msut be executed *after*
         # the integration has been isntalled on Jira as the access tokens will
         # not work until then.
-        sync_metadata.apply_async([integration.get_installation()], countdown=10)
+        sync_metadata.apply_async([integration.get_installation(None)], countdown=10)
 
         return self.respond()
diff --git a/src/sentry/integrations/jira/search.py b/src/sentry/integrations/jira/search.py
index 22ac855738..5a25aaca00 100644
--- a/src/sentry/integrations/jira/search.py
+++ b/src/sentry/integrations/jira/search.py
@@ -40,7 +40,7 @@ class JiraSearchEndpoint(OrganizationEndpoint):
         if not query:
             return Response({'detail': 'query is a required parameter'}, status=400)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(organization.id)
 
         if field == 'externalIssue':
             if not query:
diff --git a/src/sentry/integrations/pipeline.py b/src/sentry/integrations/pipeline.py
index ac27bffc02..933706892c 100644
--- a/src/sentry/integrations/pipeline.py
+++ b/src/sentry/integrations/pipeline.py
@@ -62,7 +62,7 @@ class IntegrationPipeline(Pipeline):
                 id=data['reinstall_id'],
             )
             integration.update(external_id=data['external_id'], status=ObjectStatus.VISIBLE)
-            integration.get_installation().reinstall()
+            integration.get_installation(self.organization.id).reinstall()
 
         elif 'expect_exists' in data:
             integration = Integration.objects.get(
diff --git a/src/sentry/models/integration.py b/src/sentry/models/integration.py
index 88fd8a881b..fc4a414762 100644
--- a/src/sentry/models/integration.py
+++ b/src/sentry/models/integration.py
@@ -85,7 +85,7 @@ class Integration(Model):
         from sentry import integrations
         return integrations.get(self.provider)
 
-    def get_installation(self, organization_id=None, project_id=None, **kwargs):
+    def get_installation(self, organization_id, project_id=None, **kwargs):
         return self.get_provider().get_installation(self, organization_id, project_id, **kwargs)
 
     def has_feature(self, feature):
diff --git a/tests/sentry/integrations/bitbucket/test_issues.py b/tests/sentry/integrations/bitbucket/test_issues.py
index 62f1fce4d3..6368cb9151 100644
--- a/tests/sentry/integrations/bitbucket/test_issues.py
+++ b/tests/sentry/integrations/bitbucket/test_issues.py
@@ -40,7 +40,7 @@ class BitbucketIssueTest(APITestCase):
             'comment': 'hello',
         }
 
-        assert self.integration.get_installation().get_issue(issue_id, data=data) == {
+        assert self.integration.get_installation(None).get_issue(issue_id, data=data) == {
             'key': issue_id,
             'description': 'This is the description',
             'title': 'hello',
@@ -66,7 +66,9 @@ class BitbucketIssueTest(APITestCase):
             key='%s#%d' % (repo, issue_id),
         )
 
-        self.integration.get_installation().after_link_issue(external_issue, data=comment)
+        self.integration.get_installation(
+            external_issue.organization_id).after_link_issue(
+            external_issue, data=comment)
 
         request = responses.calls[0].request
         assert responses.calls[0].response.status_code == 201
diff --git a/tests/sentry/integrations/bitbucket/test_repository.py b/tests/sentry/integrations/bitbucket/test_repository.py
index df7fc4b5cd..e3af7d3db1 100644
--- a/tests/sentry/integrations/bitbucket/test_repository.py
+++ b/tests/sentry/integrations/bitbucket/test_repository.py
@@ -40,7 +40,7 @@ class BitbucketRepositoryProviderTest(TestCase):
         return BitbucketRepositoryProvider('bitbucket')
 
     def test_get_client(self):
-        installation = self.provider.get_installation(self.repo.integration_id)
+        installation = self.integration.get_installation(self.repo.organization_id)
         client = installation.get_client()
         assert client.base_url == self.base_url
         assert client.shared_secret == self.shared_secret
diff --git a/tests/sentry/integrations/jira/test_integration.py b/tests/sentry/integrations/jira/test_integration.py
index 8bbe671e2a..649bbee079 100644
--- a/tests/sentry/integrations/jira/test_integration.py
+++ b/tests/sentry/integrations/jira/test_integration.py
@@ -320,7 +320,7 @@ class JiraIntegrationTest(APITestCase):
         )
         integration.add_organization(org.id)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(org.id)
 
         def get_client():
             return MockJiraApiClient()
@@ -367,7 +367,7 @@ class JiraIntegrationTest(APITestCase):
         )
         integration.add_organization(org.id)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(org.id)
 
         assert installation.get_link_issue_config(group) == [
             {
@@ -391,7 +391,7 @@ class JiraIntegrationTest(APITestCase):
         )
         integration.add_organization(org.id)
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(org.id)
 
         def get_client():
             return MockJiraApiClient()
diff --git a/tests/sentry/integrations/test_base.py b/tests/sentry/integrations/test_base.py
index 261e88d035..82a69311f0 100644
--- a/tests/sentry/integrations/test_base.py
+++ b/tests/sentry/integrations/test_base.py
@@ -1,5 +1,4 @@
 from __future__ import absolute_import
-import pytest
 
 from sentry.models import Integration as IntegrationModel, Identity, IdentityProvider
 from sentry.integrations import Integration
@@ -33,15 +32,11 @@ class IntegrationTestCase(TestCase):
         self.project_integration = self.model.add_project(self.project.id)
 
     def test_no_context(self):
-        integration = Integration(self.model)
+        integration = Integration(self.model, self.organization.id)
         integration.name = 'Base'
 
-        assert integration.org_integration is None
         assert integration.project_integration is None
 
-        with pytest.raises(NotImplementedError):
-            integration.get_default_identity()
-
     def test_with_context(self):
         integration = Integration(self.model, self.organization.id, self.project.id)
 
diff --git a/tests/sentry/integrations/test_issues.py b/tests/sentry/integrations/test_issues.py
index 2959e386c5..e0dce42e00 100644
--- a/tests/sentry/integrations/test_issues.py
+++ b/tests/sentry/integrations/test_issues.py
@@ -40,7 +40,7 @@ class IssueSyncIntegration(TestCase):
             resolved_status='12345',
         )
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(group.organization.id)
 
         installation.sync_status_inbound(external_issue.key, {
             'project_id': 'APP',
@@ -83,7 +83,7 @@ class IssueSyncIntegration(TestCase):
             unresolved_status='12345',
         )
 
-        installation = integration.get_installation()
+        installation = integration.get_installation(group.organization.id)
 
         installation.sync_status_inbound(external_issue.key, {
             'project_id': 'APP',
