commit 1f953f2280863f70ed2d9b48ff6a7d185a511c4f
Author: David Cramer <dcramer@gmail.com>
Date:   Sat Sep 8 23:06:27 2012 -0700

    Correct get_project_list and add test coverage

diff --git a/src/sentry/web/helpers.py b/src/sentry/web/helpers.py
index 00bbca0cc4..3701cbafea 100644
--- a/src/sentry/web/helpers.py
+++ b/src/sentry/web/helpers.py
@@ -41,17 +41,16 @@ def get_project_list(user=None, access=None, hidden=False, key='id'):
     # public projects
     if access is None:
         filters |= Q(public=True)
+    elif not (user and user.is_authenticated()):
+        return SortedDict()
 
     # If the user is authenticated, include their memberships
-    elif user and user.is_authenticated():
+    if user and user.is_authenticated():
         teams = Team.objects.get_for_user(user, access).values()
-        if not teams:
+        if not teams and access is not None:
             return SortedDict()
         filters |= Q(team__in=teams)
 
-    else:
-        return SortedDict()
-
     return SortedDict((getattr(p, key), p)
         for p in base_qs.filter(filters).order_by('name'))
 
diff --git a/tests/sentry/web/helpers/__init__.py b/tests/sentry/web/helpers/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/sentry/web/helpers/tests.py b/tests/sentry/web/helpers/tests.py
new file mode 100644
index 0000000000..b9bece71af
--- /dev/null
+++ b/tests/sentry/web/helpers/tests.py
@@ -0,0 +1,47 @@
+# -*- coding: utf-8 -*-
+
+from __future__ import absolute_import
+
+import mock
+
+from django.contrib.auth.models import User
+from sentry.constants import MEMBER_USER
+from sentry.models import Project
+from sentry.web.helpers import get_project_list
+from tests.base import TestCase
+
+
+class GetProjectListTEst(TestCase):
+    def setUp(self):
+        self.user = User.objects.create(username="admin", email="admin@localhost")
+        self.project = Project.objects.get()
+        assert self.project.public is True
+        self.project2 = Project.objects.create(name='Test', slug='test', owner=self.user, public=False)
+
+    @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
+    def test_includes_public_projects_without_access(self):
+        project_list = get_project_list(self.user)
+        self.assertEquals(len(project_list), 1)
+        self.assertIn(self.project.id, project_list)
+
+    @mock.patch('sentry.models.Team.objects.get_for_user', mock.Mock(return_value={}))
+    def test_does_exclude_public_projects_without_access(self):
+        project_list = get_project_list(self.user, MEMBER_USER)
+        self.assertEquals(len(project_list), 0)
+
+    @mock.patch('sentry.models.Team.objects.get_for_user')
+    def test_does_include_private_projects_without_access(self, get_for_user):
+        get_for_user.return_value = {self.project2.team.id: self.project2.team}
+        project_list = get_project_list(self.user)
+        get_for_user.assert_called_once_with(self.user, None)
+        self.assertEquals(len(project_list), 2)
+        self.assertIn(self.project.id, project_list)
+        self.assertIn(self.project2.id, project_list)
+
+    @mock.patch('sentry.models.Team.objects.get_for_user')
+    def test_does_exclude_public_projects_but_include_private_with_access(self, get_for_user):
+        get_for_user.return_value = {self.project2.team.id: self.project2.team}
+        project_list = get_project_list(self.user, MEMBER_USER)
+        get_for_user.assert_called_once_with(self.user, MEMBER_USER)
+        self.assertEquals(len(project_list), 1)
+        self.assertIn(self.project2.id, project_list)
