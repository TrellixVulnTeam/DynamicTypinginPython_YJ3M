commit 48b74ddf3f1cadaa1321125a3783626c3dfa8c93
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed Aug 15 14:53:34 2018 -0700

    feat(forms): Add prettyValue function for form toasts (#9360)

diff --git a/src/sentry/static/sentry/app/actionCreators/indicator.jsx b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
index b61019eb5c..cb0195a96f 100644
--- a/src/sentry/static/sentry/app/actionCreators/indicator.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/indicator.jsx
@@ -45,11 +45,29 @@ export function addSuccessMessage(...args) {
   return addMessageWithType('success')(...args);
 }
 
+const PRETTY_VALUES = {
+  '': '<empty>',
+  [null]: '<none>',
+  [undefined]: '<unset>',
+  [false]: 'disabled',
+  [true]: 'enabled',
+};
+
 // Transform form values into a string
 // Otherwise bool values will not get rendered and empty strings look like a bug
-const prettyFormString = val => {
-  if (val === '') {
-    return '<empty>';
+const prettyFormString = (val, model, fieldName) => {
+  let descriptor = model.fieldDescriptor.get(fieldName);
+
+  if (descriptor && typeof descriptor.formatMessageValue === 'function') {
+    let initialData = model.initialData;
+    // XXX(epurkhsier): We pass the "props" as the descriptor and initialData.
+    // This isn't necessarily all of the props of the form field, but should
+    // make up a good portion needed for formatting.
+    return descriptor.formatMessageValue(val, {...descriptor, initialData});
+  }
+
+  if (val in PRETTY_VALUES) {
+    return PRETTY_VALUES[val];
   }
 
   return `${val}`;
@@ -69,12 +87,22 @@ export function saveOnBlurUndoMessage(change, model, fieldName) {
 
   if (!label) return;
 
+  let prettifyValue = val => prettyFormString(val, model, fieldName);
+
+  // Hide the change text when formatMessageValue is explicitly set to false
+  let showChangeText = model.getDescriptor(fieldName, 'formatMessageValue') !== false;
+
   addSuccessMessage(
-    tct('Changed [fieldName] from [oldValue] to [newValue]', {
-      fieldName: <strong>{label}</strong>,
-      oldValue: <FormValue>{prettyFormString(change.old)}</FormValue>,
-      newValue: <FormValue>{prettyFormString(change.new)}</FormValue>,
-    }),
+    tct(
+      showChangeText
+        ? 'Changed [fieldName] from [oldValue] to [newValue]'
+        : 'Changed [fieldName]',
+      {
+        fieldName: <strong>{label}</strong>,
+        oldValue: <FormValue>{prettifyValue(change.old)}</FormValue>,
+        newValue: <FormValue>{prettifyValue(change.new)}</FormValue>,
+      }
+    ),
     DEFAULT_TOAST_DURATION,
     {
       model,
@@ -94,22 +122,32 @@ export function saveOnBlurUndoMessage(change, model, fieldName) {
 
         if (!saveResult) {
           addErrorMessage(
-            tct('Unable to restore [fieldName] from [oldValue] to [newValue]', {
-              fieldName: <strong>{label}</strong>,
-              oldValue: <FormValue>{prettyFormString(oldValue)}</FormValue>,
-              newValue: <FormValue>{prettyFormString(newValue)}</FormValue>,
-            })
+            tct(
+              showChangeText
+                ? 'Unable to restore [fieldName] from [oldValue] to [newValue]'
+                : 'Unable to restore [fieldName]',
+              {
+                fieldName: <strong>{label}</strong>,
+                oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
+                newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
+              }
+            )
           );
           return;
         }
 
         saveResult.then(() => {
           addMessage(
-            tct('Restored [fieldName] from [oldValue] to [newValue]', {
-              fieldName: <strong>{label}</strong>,
-              oldValue: <FormValue>{prettyFormString(oldValue)}</FormValue>,
-              newValue: <FormValue>{prettyFormString(newValue)}</FormValue>,
-            }),
+            tct(
+              showChangeText
+                ? 'Restored [fieldName] from [oldValue] to [newValue]'
+                : 'Restored [fieldName]',
+              {
+                fieldName: <strong>{label}</strong>,
+                oldValue: <FormValue>{prettifyValue(oldValue)}</FormValue>,
+                newValue: <FormValue>{prettifyValue(newValue)}</FormValue>,
+              }
+            ),
             'undo',
             {
               duration: DEFAULT_TOAST_DURATION,
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
index 4e3f2d1695..d155522f5d 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/choiceMapper.jsx
@@ -73,6 +73,10 @@ export default class ChoiceMapper extends React.Component {
     addButtonText: t('Add Item'),
     perItemMapping: false,
     allowEmpty: false,
+    // Since we're saving an object, there isn't a great way to render the
+    // change within the toast. Just turn off displaying the from/to portion of
+    // the message.
+    formatMessageValue: false,
   };
 
   hasValue = value => defined(value) && !objectIsEmpty(value);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
index 55e1bdfa00..aadf742484 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.jsx
@@ -38,6 +38,11 @@ export default class FieldFromConfig extends React.Component {
       help: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
       visible: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
       disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),
+      /**
+       * Function to format the value displayed in the undo toast. May also be
+       * specified as false to disable showing the changed fields in the toast.
+       */
+      formatMessageValue: PropTypes.oneOfType([PropTypes.func, PropTypes.oneOf([false])]),
       /**
        * Should show a "return key" icon in input?
        */
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
index 377559de8a..1b5644e990 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/rangeField.jsx
@@ -4,6 +4,11 @@ import InputField from 'app/views/settings/components/forms/inputField';
 import RangeSlider from 'app/views/settings/components/forms/controls/rangeSlider';
 
 export default class RangeField extends React.Component {
+  static defaultProps = {
+    formatMessageValue: (value, props) =>
+      (typeof props.formatLabel === 'function' && props.formatLabel(value)) || value,
+  };
+
   onChange = (onChange, onBlur, value, e) => {
     // We need to toggle current value because Switch is not an input
     onChange(value, e);
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
index ce57e85dc9..61fdbf04f9 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/selectField.jsx
@@ -4,6 +4,16 @@ import React from 'react';
 import InputField from 'app/views/settings/components/forms/inputField';
 import SelectControl from 'app/components/forms/selectControl';
 
+const getChoices = props => {
+  let choices = props.choices || [];
+
+  if (typeof props.choices === 'function') {
+    choices = props.choices(props);
+  }
+
+  return choices;
+};
+
 export default class SelectField extends React.Component {
   static propTypes = {
     ...InputField.propTypes,
@@ -23,6 +33,8 @@ export default class SelectField extends React.Component {
     escapeMarkup: true,
     multiple: false,
     small: false,
+    formatMessageValue: (value, props) =>
+      (getChoices(props).find(choice => choice[0] === value) || [null, value])[1],
   };
 
   handleChange = (onBlur, onChange, optionObj) => {
@@ -49,11 +61,7 @@ export default class SelectField extends React.Component {
         {...otherProps}
         alignRight={this.props.small}
         field={({onChange, onBlur, disabled, ...props}) => {
-          let choices = props.choices || [];
-
-          if (typeof props.choices === 'function') {
-            choices = props.choices(props);
-          }
+          let choices = getChoices(props);
 
           return (
             <SelectControl
