commit 568328ee6a60f110b842eae83cc4a29f4429606e
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Oct 23 04:16:43 2012 -0700

    Move tag rendering code into application and out of Tag base plugin

diff --git a/src/sentry/filters/helpers.py b/src/sentry/filters/helpers.py
index 8c13f2892f..32d32de564 100644
--- a/src/sentry/filters/helpers.py
+++ b/src/sentry/filters/helpers.py
@@ -17,7 +17,6 @@ from django.utils.translation import ugettext_lazy as _
 from sentry.conf import settings
 from sentry.filters.base import TagFilter
 from sentry.plugins import plugins
-from sentry.models import ProjectOption, FilterKey
 
 
 FILTER_CACHE = {}
@@ -42,7 +41,7 @@ def get_filters(model=None, project=None):
         filter_list.append(FILTER_CACHE[class_path])
 
     if project:
-        for tag in ProjectOption.objects.get_value(project, 'tags', FilterKey.objects.all_keys(project)):
+        for tag in project.get_tags():
             if tag not in TAG_FILTER_CACHE:
                 # Generate a new filter class because we are lazy and do
                 # not want to rewrite code
diff --git a/src/sentry/models.py b/src/sentry/models.py
index 485d6bfbea..d5275e60d0 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -23,7 +23,7 @@ from django.contrib.auth.models import User
 from django.contrib.auth.signals import user_logged_in
 from django.core.urlresolvers import reverse
 from django.db import models
-from django.db.models import F
+from django.db.models import F, Sum
 from django.db.models.signals import post_syncdb, post_save, pre_delete, \
   class_prepared
 from django.template.defaultfilters import slugify
@@ -199,6 +199,14 @@ class Project(Model):
     def is_default_project(self):
         return str(self.id) == str(settings.PROJECT) or str(self.slug) == str(settings.PROJECT)
 
+    def get_tags(self):
+        if not hasattr(self, '_tag_cache'):
+            tags = ProjectOption.objects.get_value(self, 'tags', None)
+            if tags is None:
+                tags = FilterKey.objects.all_keys(self)
+            self._tag_cache = tags
+        return self._tag_cache
+
 
 class ProjectKey(Model):
     project = models.ForeignKey(Project, related_name='key_set')
@@ -406,14 +414,20 @@ class Group(MessageBase):
             self.active_at = self.first_seen
         super(Group, self).save(*args, **kwargs)
 
+    @property
+    def avg_time_spent(self):
+        if not self.time_spent_count:
+            return
+        return float(self.time_spent_total) / self.time_spent_count
+
+    def natural_key(self):
+        return (self.project, self.logger, self.culprit, self.checksum)
+
     def get_absolute_url(self):
         if self.project_id:
             return reverse('sentry-group', kwargs={'group_id': self.pk, 'project_id': self.project.slug})
         return '#'
 
-    def natural_key(self):
-        return (self.project, self.logger, self.culprit, self.checksum)
-
     def get_score(self):
         return int(math.log(self.times_seen) * 600 + float(time.mktime(self.last_seen.timetuple())))
 
@@ -433,11 +447,19 @@ class Group(MessageBase):
         module = self.data.get('module', 'ver')
         return module, self.data['version']
 
-    @property
-    def avg_time_spent(self):
-        if not self.time_spent_count:
-            return
-        return float(self.time_spent_total) / self.time_spent_count
+    def get_unique_tags(self, tag):
+        return self.messagefiltervalue_set.filter(
+            key=tag,
+        ).values_list(
+            'value',
+        ).annotate(
+            times_seen=Sum('times_seen'),
+        ).values_list(
+            'value',
+            'times_seen',
+            'first_seen',
+            'last_seen',
+        ).order_by('-times_seen')
 
 
 class GroupMeta(Model):
diff --git a/src/sentry/plugins/bases/tag.py b/src/sentry/plugins/bases/tag.py
index b497b42163..16584859d7 100644
--- a/src/sentry/plugins/bases/tag.py
+++ b/src/sentry/plugins/bases/tag.py
@@ -7,14 +7,11 @@ sentry.plugins.bases.tag
 """
 from sentry.models import Group
 from sentry.plugins import Plugin
-from django.db.models import Sum
 
 
 class TagPlugin(Plugin):
     tag = None
     tag_label = None
-    index_template = 'sentry/plugins/bases/tag/index.html'
-    widget_template = 'sentry/plugins/bases/tag/widget.html'
 
     def get_tag_values(self, event):
         """
@@ -25,41 +22,5 @@ class TagPlugin(Plugin):
         """
         raise NotImplementedError
 
-    def get_unique_tags(self, group):
-        return group.messagefiltervalue_set.filter(
-            key=self.tag,
-        ).values_list(
-            'value',
-        ).annotate(
-            times_seen=Sum('times_seen'),
-        ).values_list(
-            'value',
-            'times_seen',
-            'first_seen',
-            'last_seen',
-        ).order_by('-times_seen')
-
-    def panels(self, request, group, panel_list, **kwargs):
-        panel_list.append((self.get_title(), self.get_url(group)))
-        return panel_list
-
-    def view(self, request, group, **kwargs):
-        return self.render(self.index_template, {
-            'title': self.get_title(),
-            'tag_label': self.tag_label,
-            'tag_name': self.tag,
-            'unique_tags': self.get_unique_tags(group),
-            'group': group,
-        })
-
-    def widget(self, request, group, **kwargs):
-        return self.render(self.widget_template, {
-            'title': self.get_title(),
-            'tag_label': self.tag_label,
-            'tag_name': self.tag,
-            'unique_tags': list(self.get_unique_tags(group)[:10]),
-            'group': group,
-        })
-
     def post_process(self, group, event, is_new, is_sample, **kwargs):
         Group.objects.add_tags(group, [(self.tag, v) for v in self.get_tag_values(event)])
diff --git a/src/sentry/templates/sentry/groups/details.html b/src/sentry/templates/sentry/groups/details.html
index 8cacdffaec..7f3694460d 100644
--- a/src/sentry/templates/sentry/groups/details.html
+++ b/src/sentry/templates/sentry/groups/details.html
@@ -75,6 +75,10 @@
         </ul>
     {% endif %}
 
+    {% for tag in group.project.get_tags %}
+        {% render_tag_widget group tag %}
+    {% endfor %}
+
     {% for html in group|get_widgets:request %}
         {{ html|safe }}
     {% endfor %}
@@ -128,12 +132,17 @@
 
     <section class="body">
         <ul class="nav nav-tabs">
-            <li{% ifequal page 'details' %} class="active"{% endifequal %}>
+            <li{% if page == 'details' %} class="active"{% endif %}>
                 <a href="{% url sentry-group group.project.slug group.id %}">{% trans "Details" %}</a>
             </li>
-            <li{% ifequal page 'event_list' %} class="active"{% endifequal %}>
+            <li{% if page == 'event_list' %} class="active"{% endif %}>
                 <a href="{% url sentry-group-events group.project.slug group.id %}">{% trans "Events" %}</a>
             </li>
+            {% for tag in group.project.get_tags %}
+                <li{% if page == 'tag_details' and tag == tag_name %} class="active"{% endif %}>
+                    <a href="{% url sentry-group-tag-details group.project.slug group.id tag %}">{{ tag|titlize }}</a>
+                </li>
+            {% endfor %}
             {% for label, link, is_active in group|get_panels:request %}
                 <li{% if is_active %} class="active"{% endif %}><a href="{{ link }}">{{ label }}</a></li>
             {% endfor %}
diff --git a/src/sentry/templatetags/sentry_helpers.py b/src/sentry/templatetags/sentry_helpers.py
index 896818a4f1..ecbf146499 100644
--- a/src/sentry/templatetags/sentry_helpers.py
+++ b/src/sentry/templatetags/sentry_helpers.py
@@ -323,3 +323,18 @@ def with_metadata(group_list, request):
             'is_bookmarked': g.pk in bookmarks,
             'historical_data': ','.join(str(x[1]) for x in historical_data.get(g.id, [])),
         }
+
+
+@register.inclusion_tag('sentry/plugins/bases/tag/widget.html')
+def render_tag_widget(group, tag):
+    return {
+        'title': tag.replace('_', ' ').title(),
+        'tag_name': tag,
+        'unique_tags': list(group.get_unique_tags(tag)[:10]),
+        'group': group,
+    }
+
+
+@register.filter
+def titlize(value):
+    return value.replace('_', ' ').title()
diff --git a/src/sentry/web/frontend/groups.py b/src/sentry/web/frontend/groups.py
index 367e54ef14..3601ca1f57 100644
--- a/src/sentry/web/frontend/groups.py
+++ b/src/sentry/web/frontend/groups.py
@@ -271,6 +271,20 @@ def group(request, project, group):
     }, request)
 
 
+@has_group_access
+def group_tag_details(request, project, group, tag_name):
+    return render_to_response('sentry/plugins/bases/tag/index.html', {
+        'project': project,
+        'group': group,
+        'title': tag_name.replace('_', ' ').title(),
+        'tag_name': tag_name,
+        'unique_tags': group.get_unique_tags(tag_name),
+        'group': group,
+        'page': 'tag_details',
+        'can_admin_event': can_admin_group(request.user, group),
+    }, request)
+
+
 @has_group_access
 def group_event_list(request, project, group):
     event_list = group.event_set.all().order_by('-datetime')
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 028b01227e..c4af5b0663 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -150,6 +150,7 @@ urlpatterns = patterns('',
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id>\d+)/$', groups.group_event_details, name='sentry-group-event'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/events/(?P<event_id_or_latest>(\d+|latest))/json/$', groups.group_event_details_json, name='sentry-group-event-json'),
     url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/actions/(?P<slug>[\w_-]+)/', groups.group_plugin_action, name='sentry-group-plugin-action'),
+    url(r'^(?P<project_id>[\w_-]+)/group/(?P<group_id>\d+)/tags/(?P<tag_name>[^/]+)/$', groups.group_tag_details, name='sentry-group-tag-details'),
 
     url(r'^(?P<project_id>[\w_-]+)/events/$', events.event_list, name='sentry-events'),
     url(r'^(?P<project_id>[\w_-]+)/events/(?P<event_id>\d+)/replay/$', events.replay_event, name='sentry-replay'),
