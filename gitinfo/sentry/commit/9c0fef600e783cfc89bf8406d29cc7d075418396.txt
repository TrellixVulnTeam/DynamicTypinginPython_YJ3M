commit 9c0fef600e783cfc89bf8406d29cc7d075418396
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Dec 26 13:09:00 2011 -0800

    Support for abs_path to allow relative filename vars (for better display)

diff --git a/docs/interfaces/index.rst b/docs/interfaces/index.rst
index 349d878983..27d1c6cc53 100644
--- a/docs/interfaces/index.rst
+++ b/docs/interfaces/index.rst
@@ -41,7 +41,8 @@ Sentry implements data interfaces for storing structured data. At it's core, an
 
         {
             "frames": {
-                "filename": "/real/file/name.py",
+                "abs_path": "/real/file/name.py"
+                "filename": "file/name.py",
                 "function": "myfunction",
                 "vars": {
                     "key": "value"
@@ -67,7 +68,8 @@ Sentry implements data interfaces for storing structured data. At it's core, an
     ::
 
         {
-            "filename": "/real/file/name.html",
+            "abs_path": "/real/file/name.html"
+            "filename": "file/name.html",
             "pre_context": [
                 "line1",
                 "line2"
diff --git a/sentry/interfaces.py b/sentry/interfaces.py
index 9f4cc135ff..30e6c2a633 100644
--- a/sentry/interfaces.py
+++ b/sentry/interfaces.py
@@ -108,6 +108,12 @@ class Query(Interface):
 class Stacktrace(Interface):
     def __init__(self, frames):
         self.frames = frames
+        for frame in frames:
+            # ensure we've got the correct required values
+            assert 'filename' in frame
+            assert 'function' in frame
+            assert 'lineno' in frame
+            assert 'context_line' in frame
 
     def serialize(self):
         return {
@@ -119,6 +125,7 @@ class Stacktrace(Interface):
         for frame in self.frames:
             context = get_context(frame['lineno'], frame['context_line'], frame.get('pre_context'), frame.get('post_context'))
             frames.append({
+                'abs_path': frame.get('abs_path'),
                 'filename': frame.get('filename'),
                 'function': frame.get('function'),
                 'start_lineno': context[0][0],
@@ -229,7 +236,9 @@ class Http(Interface):
 
 
 class Template(Interface):
-    def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None):
+    def __init__(self, filename, context_line, lineno, pre_context=None, post_context=None,
+                 abs_path=None):
+        self.abs_path = abs_path
         self.filename = filename
         self.context_line = context_line
         self.lineno = lineno
@@ -238,6 +247,7 @@ class Template(Interface):
 
     def serialize(self):
         return {
+            'abs_path': self.abs_path,
             'filename': self.filename,
             'context_line': self.context_line,
             'lineno': self.lineno,
@@ -250,6 +260,7 @@ class Template(Interface):
 
         return render_to_string('sentry/partial/interfaces/template.html', {
             'event': event,
+            'abs_path': self.abs_path,
             'filename': self.filename,
             'lineno': self.lineno,
             'start_lineno': context[0][0],
diff --git a/sentry/static/styles/global.css b/sentry/static/styles/global.css
index f9a956250e..f5e38af79e 100644
--- a/sentry/static/styles/global.css
+++ b/sentry/static/styles/global.css
@@ -169,25 +169,13 @@ table.vars td.code { overflow: hidden; }
 table.vars td.code pre { margin-bottom: 0; }
 div.pastebin textarea { padding: 10px; background: #f9f9f9; border-color: #ddd; }
 table.vars { border-collapse: collapse; background:white; margin-bottom: 10px; }
-table.meta th { text-align: right; white-space: nowrap; }
 table.vars thead th { padding:3px 6px 3px 3px; background:#eee; text-align:left; font-weight:bold; border:1px solid #ddd; border-width: 1px 0; font-size:11px; }
 
-table.source th { color:#666; }
-table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
 ul.traceback { list-style-type: none; margin-left: 0;}
 ul.traceback li.frame { margin-bottom: 1em; overflow: hidden; position: relative; }
 div.commands { margin-top: 10px; margin-left: 20px; }
 div.commands a { color:black; text-decoration:none; }
 div.commands span { font-size: 0.9em; }
-#unicode-hint { background:#eee; }
-#summary { margin-bottom: 15px; }
-#summary table, #summary pre { margin-bottom: 0; }
-#summary pre {
-    line-height: 16px;
-}
-#summary h3 { font-weight: normal; font-size: 1.5em; }
-#explanation { background:#eee; }
-#summary table { border:none; background:inherit; }
 
 /** variables **/
 #requestinfo { overflow: hidden; }
diff --git a/sentry/web/urls.py b/sentry/web/urls.py
index 21b2e818ed..b0b8c95998 100644
--- a/sentry/web/urls.py
+++ b/sentry/web/urls.py
@@ -48,10 +48,6 @@ urlpatterns = patterns('',
     url(r'^feeds/events.xml$', feeds.MessageFeed(), name='sentry-feed-events'),
     url(r'^feeds/groups.xml$', feeds.SummaryFeed(), name='sentry-feed-groups'),
 
-    # JS
-
-    url(r'^(?P<project_id>\d+)/jsapi$', groups.ajax_handler, name='sentry-ajax'),
-
     # API
 
     url(r'^store/$', api.store, name='sentry-store'),
@@ -71,6 +67,10 @@ urlpatterns = patterns('',
 
     url(r'^$', generic.dashboard, name='sentry'),
 
+    # JS
+
+    url(r'^(?P<project_id>\d+)/jsapi$', groups.ajax_handler, name='sentry-ajax'),
+
     # Project specific
 
     url(r'^(?P<project_id>\d+)/group/(?P<group_id>\d+)$', groups.group, name='sentry-group'),
