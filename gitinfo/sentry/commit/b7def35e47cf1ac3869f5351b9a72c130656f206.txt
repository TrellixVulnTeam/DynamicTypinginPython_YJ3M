commit b7def35e47cf1ac3869f5351b9a72c130656f206
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Thu Apr 20 00:54:08 2017 +0200

    Automatically add a token and generate valid script on auth fail

diff --git a/src/sentry/api/endpoints/project_processingissues.py b/src/sentry/api/endpoints/project_processingissues.py
index 89074d943e..6e89c45b95 100644
--- a/src/sentry/api/endpoints/project_processingissues.py
+++ b/src/sentry/api/endpoints/project_processingissues.py
@@ -14,9 +14,22 @@ from sentry.utils.http import absolute_uri
 
 class ProjectProcessingIssuesFixEndpoint(ProjectEndpoint):
     def get(self, request, project):
-        tokens = [x for x in ApiToken.objects.filter(
-            user=request.user
-        ).all() if 'project:releases' in x.get_scopes()]
+        token = None
+
+        if request.user_from_signed_request and request.user.is_authenticated():
+            tokens = [x for x in ApiToken.objects.filter(
+                user=request.user
+            ).all() if 'project:releases' in x.get_scopes()]
+            if not tokens:
+                token = ApiToken.objects.create(
+                    user=request.user,
+                    scope_list=['project:releases'],
+                    refresh_token=None,
+                    expires_at=None,
+                )
+            else:
+                token = tokens[0]
+
         resp = render_to_response('sentry/reprocessing-script.sh', {
             'issues': [{
                 'uuid': issue.data.get('image_uuid'),
@@ -25,12 +38,19 @@ class ProjectProcessingIssuesFixEndpoint(ProjectEndpoint):
                 project=project
             )],
             'project': project,
-            'token': tokens and tokens[0] or None,
+            'token': token,
             'server_url': absolute_uri('/'),
         })
         resp['Content-Type'] = 'text/plain'
         return resp
 
+    def permission_denied(self, request):
+        resp = render_to_response('sentry/reprocessing-script.sh', {
+            'token': None
+        })
+        resp['Content-Type'] = 'text/plain'
+        return resp
+
 
 class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
     def get(self, request, project):
@@ -51,13 +71,9 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
         reprocessing_issues = ReprocessingReport.objects \
             .filter(project_id=project.id).count()
 
-        tokens = [x for x in ApiToken.objects.filter(
-            user=request.user
-        ).all() if 'project:releases' in x.get_scopes()]
-
-        signedLink = None
-        if tokens and tokens[0]:
-            signedLink = generate_signed_link(
+        signed_link = None
+        if num_issues > 0:
+            signed_link = generate_signed_link(
                 request.user,
                 'sentry-api-0-project-fix-processing-issues',
                 kwargs={
@@ -73,7 +89,7 @@ class ProjectProcessingIssuesEndpoint(ProjectEndpoint):
             'resolveableIssues': len(resolveable_issues),
             'hasMoreResolveableIssues': has_more,
             'issuesProcessing': reprocessing_issues,
-            'signedLink': signedLink
+            'signedLink': signed_link
         }
 
         if request.GET.get('detailed') == '1':
diff --git a/src/sentry/templates/sentry/reprocessing-script.sh b/src/sentry/templates/sentry/reprocessing-script.sh
index eb5be87ac2..33095a5bc3 100644
--- a/src/sentry/templates/sentry/reprocessing-script.sh
+++ b/src/sentry/templates/sentry/reprocessing-script.sh
@@ -1,7 +1,9 @@
 {% autoescape off %}#!/bin/sh
 set -eu
 
-{% if issues %}
+{% if not token %}
+echo 'üòï  The link you followed expired.'
+{% elif issues %}
 echo "There are currently {{ issues|length }} missing debug symbols:"
 {% for issue in issues %}
   echo "   - {{ issue.uuid }}  [{{ issue.name }}]"
@@ -22,7 +24,7 @@ echo "‚öôÔ∏è  Fetched sentry-cli utility"
 echo -n $'\033[K'
 echo "üëÄ  Looking for debug symbols"
 
-{% if token %}export SENTRY_AUTH_TOKEN="{{ token }}"{% endif %}
+export SENTRY_AUTH_TOKEN="{{ token }}"
 export SENTRY_URL="{{ server_url }}"
 export SENTRY_ORG="{{ project.organization.slug }}"
 export SENTRY_PROJECT="{{ project.slug }}"
