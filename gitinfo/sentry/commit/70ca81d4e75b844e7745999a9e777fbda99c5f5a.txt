commit 70ca81d4e75b844e7745999a9e777fbda99c5f5a
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Fri May 4 12:21:57 2018 -0700

    feat(integrations): VSTS Global Plugin Authorization (#8190)
    
    * first draft of vsts integration
    
    * Added VSTS to global integrations screen.
    
    * Got the oath screen to show up. Yay
    
    * Got the access code.
    
    * Bare bones working auth.
    
    * Added basic test for auth. removed parts that were not yet relevant.
    
    * saving place
    
    * Got project working but realized teams is unnecesary.
    
    * Removed get teams and anything in parse instance.
    
    * Removed reference to getteams and added spacing.
    
    * Got through the whole process.
    
    * Removed comments in url.py
    
    * Moved tests into their own folder and created tests for config view.
    
    * Added tests to integration.
    
    * Added a flag and a place to add other internal plugins.
    
    * changed so that the tests work.
    
    * Added test specifically for vsts oauth
    
    * minor changes asked by evan.
    
    * Added template and forms.
    
    * Moved projects config to the integrations.
    
    * got the whole flow working
    
    * Added account id
    
    * updated tests for the provider."
    
    * revised vsts integration tests.
    
    * adjusted user_identity so that the access code and all related data is in the data dictionary.
    
    * Removed list of scopes from integration.
    
    * Added noun to the metadata
    
    * Commented out noun
    
    * Added noun
    
    * removed unused vsts verification thing.

diff --git a/src/sentry/api/endpoints/organization_config_integrations.py b/src/sentry/api/endpoints/organization_config_integrations.py
index 5ac1243f61..5f9be3f54b 100644
--- a/src/sentry/api/endpoints/organization_config_integrations.py
+++ b/src/sentry/api/endpoints/organization_config_integrations.py
@@ -5,14 +5,23 @@ from rest_framework.response import Response
 from sentry import integrations
 from sentry.api.bases.organization import OrganizationEndpoint
 
+from sentry import features
+from django.conf import settings
+
 
 class OrganizationConfigIntegrationsEndpoint(OrganizationEndpoint):
     def get(self, request, organization):
         providers = []
+        has_catchall = features.has('organizations:internal-catchall',
+                                    organization,
+                                    actor=request.user)
+
         for provider in integrations.all():
             metadata = provider.metadata
             metadata = metadata and metadata._asdict() or None
 
+            if not has_catchall and provider.key in settings.SENTRY_INTERNAL_INTEGRATIONS:
+                continue
             providers.append(
                 {
                     'key': provider.key,
diff --git a/src/sentry/conf/server.py b/src/sentry/conf/server.py
index b96b85f52c..2044c675fb 100644
--- a/src/sentry/conf/server.py
+++ b/src/sentry/conf/server.py
@@ -1238,6 +1238,13 @@ SENTRY_DEFAULT_INTEGRATIONS = (
     'sentry.integrations.slack.SlackIntegration',
     'sentry.integrations.github.GitHubIntegration',
     'sentry.integrations.jira.JiraIntegration',
+    'sentry.integrations.vsts.VSTSIntegration',
+)
+
+SENTRY_INTERNAL_INTEGRATIONS = (
+    'github',
+    'jira',
+    'vsts',
 )
 
 
diff --git a/src/sentry/identity/__init__.py b/src/sentry/identity/__init__.py
index dd76b0a0a3..23b8b3e414 100644
--- a/src/sentry/identity/__init__.py
+++ b/src/sentry/identity/__init__.py
@@ -6,6 +6,7 @@ from .oauth2 import *  # NOQA
 
 from .slack import *  # NOQA
 from .github import *  # NOQA
+from .vsts import *  # NOQA
 
 
 default_manager = IdentityManager()
@@ -19,3 +20,4 @@ unregister = default_manager.unregister
 # initialized there.
 register(SlackIdentityProvider)  # NOQA
 register(GitHubIdentityProvider)  # NOQA
+register(VSTSIdentityProvider)  # NOQA
diff --git a/src/sentry/identity/vsts/__init__.py b/src/sentry/identity/vsts/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/identity/vsts/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/identity/vsts/provider.py b/src/sentry/identity/vsts/provider.py
new file mode 100644
index 0000000000..1720ecef1b
--- /dev/null
+++ b/src/sentry/identity/vsts/provider.py
@@ -0,0 +1,151 @@
+from __future__ import absolute_import
+
+from django import forms
+
+from sentry import http
+from sentry import options
+
+from sentry.web.helpers import render_to_response
+from sentry.identity.oauth2 import OAuth2Provider, OAuth2LoginView, OAuth2CallbackView
+from sentry.pipeline import PipelineView
+
+
+class VSTSIdentityProvider(OAuth2Provider):
+    key = 'vsts'
+    name = 'Visual Studio Team Services'
+
+    oauth_access_token_url = 'https://app.vssps.visualstudio.com/oauth2/token'
+    oauth_authorize_url = 'https://app.vssps.visualstudio.com/oauth2/authorize'
+
+    oauth_scopes = (
+        'vso.build_execute',
+        'vso.code_full',
+        'vso.codesearch',
+        'vso.connected_server',
+        'vso.dashboards_manage',
+        'vso.entitlements',
+        'vso.extension.data_write',
+        'vso.extension_manage',
+        'vso.gallery_manage',
+        'vso.graph_manage',
+        'vso.identity_manage',
+        'vso.loadtest',
+        'vso.machinegroup_manage',
+        'vso.memberentitlementmanagement_write',
+        'vso.notification_diagnostics',
+        'vso.notification_manage',
+        'vso.packaging_manage',
+        'vso.profile_write',
+        'vso.project_manage',
+        'vso.release_manage',
+        'vso.security_manage',
+        'vso.serviceendpoint_manage',
+        'vso.symbols_manage',
+        'vso.taskgroups_manage',
+        'vso.test_write',
+        'vso.wiki_write',
+        'vso.work_full',
+        'vso.workitemsearch',
+    )
+
+    def get_oauth_client_id(self):
+        return options.get('vsts.client-id')
+
+    def get_oauth_client_secret(self):
+        return options.get('vsts.client-secret')
+
+    def get_pipeline_views(self):
+        return [
+            OAuth2LoginView(
+                authorize_url=self.oauth_authorize_url,
+                client_id=self.get_oauth_client_id(),
+                scope=' '.join(self.get_oauth_scopes()),
+            ),
+            VSTSOAuth2CallbackView(
+                access_token_url=self.oauth_access_token_url,
+                client_id=self.get_oauth_client_id(),
+                client_secret=self.get_oauth_client_secret(),
+            ),
+            AccountConfigView(),
+        ]
+
+
+class VSTSOAuth2CallbackView(OAuth2CallbackView):
+
+    def exchange_token(self, request, pipeline, code):
+        from sentry.http import safe_urlopen, safe_urlread
+        from sentry.utils.http import absolute_uri
+        from six.moves.urllib.parse import parse_qsl
+        from sentry.utils import json
+        req = safe_urlopen(
+            url=self.access_token_url,
+            headers={
+                'Content-Type': 'application/x-www-form-urlencoded',
+                'Content-Length': '1322',
+            },
+            data={
+                'client_assertion_type': 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',
+                'client_assertion': self.client_secret,
+                'grant_type': 'urn:ietf:params:oauth:grant-type:jwt-bearer',
+                'assertion': code,
+                'redirect_uri': absolute_uri(pipeline.redirect_url()),
+            },
+        )
+        body = safe_urlread(req)
+        if req.headers['Content-Type'].startswith('application/x-www-form-urlencoded'):
+            return dict(parse_qsl(body))
+        return json.loads(body)
+
+
+class AccountForm(forms.Form):
+    def __init__(self, accounts, *args, **kwargs):
+        super(AccountForm, self).__init__(*args, **kwargs)
+        self.fields['account'] = forms.ChoiceField(
+            choices=[(acct['AccountId'], acct['AccountName']) for acct in accounts],
+            label='Account',
+            help_text='VS Team Services account (account.visualstudio.com).',
+        )
+
+
+class AccountConfigView(PipelineView):
+    def dispatch(self, request, pipeline):
+        if 'account' in request.POST:
+            account_id = request.POST.get('account')
+            accounts = pipeline.fetch_state(key='accounts')
+            account = self.get_account_from_id(account_id, accounts)
+            if account is not None:
+                pipeline.bind_state('account', account)
+                pipeline.bind_state('instance', account['AccountName'] + '.visualstudio.com')
+                return pipeline.next_step()
+
+        access_token = pipeline.fetch_state(key='data')['access_token']
+        accounts = self.get_accounts(access_token)
+        pipeline.bind_state('accounts', accounts)
+        account_form = AccountForm(accounts)
+        return render_to_response(
+            template='sentry/integrations/vsts-config.html',
+            context={
+                'form': account_form,
+            },
+            request=request,
+        )
+
+    def get_account_from_id(self, account_id, accounts):
+        for account in accounts:
+            if account['AccountId'] == account_id:
+                return account
+        return None
+
+    def get_accounts(self, access_token):
+        session = http.build_session()
+        url = 'https://app.vssps.visualstudio.com/_apis/accounts'
+        response = session.get(
+            url,
+            headers={
+                'Content-Type': 'application/json',
+                'Authorization': 'Bearer %s' % access_token,
+            },
+        )
+        if response.status_code == 200:
+            return response.json()
+        return None
diff --git a/src/sentry/integrations/vsts/__init__.py b/src/sentry/integrations/vsts/__init__.py
new file mode 100644
index 0000000000..1422fb52ef
--- /dev/null
+++ b/src/sentry/integrations/vsts/__init__.py
@@ -0,0 +1,5 @@
+from __future__ import absolute_import
+
+from sentry.utils.imports import import_submodules
+
+import_submodules(globals(), __name__, __path__)
diff --git a/src/sentry/integrations/vsts/integration.py b/src/sentry/integrations/vsts/integration.py
new file mode 100644
index 0000000000..c8898e94af
--- /dev/null
+++ b/src/sentry/integrations/vsts/integration.py
@@ -0,0 +1,145 @@
+from __future__ import absolute_import
+from sentry import http
+from time import time
+from django import forms
+
+from django.utils.translation import ugettext_lazy as _
+from sentry.web.helpers import render_to_response
+from sentry.integrations import Integration, IntegrationMetadata
+from sentry.pipeline import NestedPipelineView, PipelineView
+from sentry.identity.pipeline import IdentityProviderPipeline
+from sentry.identity.vsts import VSTSIdentityProvider
+from sentry.utils.http import absolute_uri
+DESCRIPTION = """
+VSTS
+"""
+
+metadata = IntegrationMetadata(
+    description=DESCRIPTION.strip(),
+    author='The Sentry Team',
+    noun=_('Account'),
+    issue_url='https://github.com/getsentry/sentry/issues/new?title=VSTS%20Integration:%20&labels=Component%3A%20Integrations',
+    source_url='https://github.com/getsentry/sentry/tree/master/src/sentry/integrations/vsts',
+    aspects={},
+)
+
+
+class ProjectConfigView(PipelineView):
+    def dispatch(self, request, pipeline):
+        if 'project' in request.POST:
+            project_id = request.POST.get('project')
+            projects = pipeline.fetch_state(key='projects')
+            project = self.get_project_from_id(project_id, projects)
+            if project is not None:
+                pipeline.bind_state('project', project)
+                return pipeline.next_step()
+
+        identity_data = pipeline.fetch_state(key='identity')
+        instance = identity_data['instance']
+        access_token = identity_data['data']['access_token']
+        projects = get_projects(instance, access_token)['value']
+        pipeline.bind_state('projects', projects)
+        project_form = ProjectForm(projects)
+
+        return render_to_response(
+            template='sentry/integrations/vsts-config.html',
+            context={
+                'form': project_form,
+            },
+            request=request,
+        )
+
+    def get_project_from_id(self, project_id, projects):
+        for project in projects:
+            if project['id'] == project_id:
+                return project
+        return None
+
+
+class ProjectForm(forms.Form):
+    def __init__(self, projects, *args, **kwargs):
+        super(ProjectForm, self).__init__(*args, **kwargs)
+        self.fields['project'] = forms.ChoiceField(
+            choices=[(project['id'], project['name']) for project in projects],
+            label='Project',
+            help_text='Enter the Visual Studio Team Services project name that you wish to use as a default for new work items'
+        )
+
+
+class VSTSIntegration(Integration):
+    key = 'vsts'
+    name = 'Visual Studio Team Services'
+    metadata = metadata
+    domain = '.visualstudio.com'
+    api_version = '4.1'
+
+    setup_dialog_config = {
+        'width': 600,
+        'height': 800,
+    }
+
+    def get_pipeline_views(self):
+        identity_pipeline_config = {
+            'redirect_url': absolute_uri('/extensions/vsts/setup/'),
+        }
+
+        identity_pipeline_view = NestedPipelineView(
+            bind_key='identity',
+            provider_key='vsts',
+            pipeline_cls=IdentityProviderPipeline,
+            config=identity_pipeline_config,
+        )
+
+        return [
+            identity_pipeline_view,
+            ProjectConfigView(),
+        ]
+
+    def build_integration(self, state):
+        data = state['identity']['data']
+        account = state['identity']['account']
+        instance = state['identity']['instance']
+        project = state['project']
+
+        scopes = sorted(VSTSIdentityProvider.oauth_scopes)
+        return {
+            'name': project['name'],
+            'external_id': project['id'],
+            'metadata': {
+                'domain_name': instance,
+                'scopes': scopes,
+                # icon doesn't appear to be possible
+            },
+            'user_identity': {
+                'type': 'vsts',
+                'external_id': account['AccountId'],
+                'scopes': [],
+                'data': self.get_oauth_data(data),
+            }
+        }
+
+    def get_oauth_data(self, payload):
+        data = {'access_token': payload['access_token']}
+
+        if 'expires_in' in payload:
+            data['expires'] = int(time()) + int(payload['expires_in'])
+        if 'refresh_token' in payload:
+            data['refresh_token'] = payload['refresh_token']
+        if 'token_type' in payload:
+            data['token_type'] = payload['token_type']
+
+        return data
+
+
+def get_projects(instance, access_token):
+    session = http.build_session()
+    url = 'https://%s/DefaultCollection/_apis/projects' % instance
+    response = session.get(
+        url,
+        headers={
+            'Content-Type': 'application/json',
+            'Authorization': 'Bearer %s' % access_token,
+        }
+    )
+    response.raise_for_status()
+    return response.json()
diff --git a/src/sentry/integrations/vsts/urls.py b/src/sentry/integrations/vsts/urls.py
new file mode 100644
index 0000000000..203527bcc7
--- /dev/null
+++ b/src/sentry/integrations/vsts/urls.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import patterns  # , url
+
+urlpatterns = patterns(
+    '',
+)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index e214f4fc2c..1639901874 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -129,3 +129,6 @@ register('github.webhook-secret', default='')
 register('github.private-key', default='')
 register('github.client-id', flags=FLAG_PRIORITIZE_DISK)
 register('github.client-secret', flags=FLAG_PRIORITIZE_DISK)
+# VSTS Integration
+register('vsts.client-id', flags=FLAG_PRIORITIZE_DISK)
+register('vsts.client-secret', flags=FLAG_PRIORITIZE_DISK)
diff --git a/src/sentry/templates/sentry/integrations/vsts-config.html b/src/sentry/templates/sentry/integrations/vsts-config.html
new file mode 100644
index 0000000000..de7f07df33
--- /dev/null
+++ b/src/sentry/templates/sentry/integrations/vsts-config.html
@@ -0,0 +1,35 @@
+{% extends "sentry/bases/modal.html" %}
+{% load crispy_forms_tags %}
+{% load sentry_assets %}
+{% load i18n %}
+
+{% block wrapperclass %}narrow auth{% endblock %}
+{% block modal_header_signout %}{% endblock %}
+
+{% block title %}{% trans "Visual Studio Team Services Setup" %} | {{ block.super }}{% endblock %}
+
+{% block main %}
+<h3>Visual Studio Team Services Configuration</h3>
+
+<form action="" method="post" class="form-stacked">
+  {% csrf_token %}
+  <input type="hidden" name="provider" value="vsts" />
+
+  <p>
+    Configure Visual Studio Team Services to use with Sentry.io.
+  </p>
+
+  {{ form|as_crispy_errors }}
+
+  {% for field in form %}
+      {{ field|as_crispy_field }}
+  {% endfor %}
+
+  <fieldset class="form-actions">
+    <button
+      type="submit"
+      class="btn btn-primary"
+      name="save_mappings" value="url">{% trans "Submit" %}</button>
+  </fieldset>
+</form>
+{% endblock %}
diff --git a/src/sentry/utils/pytest/sentry.py b/src/sentry/utils/pytest/sentry.py
index cebf28576c..dc0a8cb3c1 100644
--- a/src/sentry/utils/pytest/sentry.py
+++ b/src/sentry/utils/pytest/sentry.py
@@ -141,6 +141,7 @@ def pytest_configure(config):
             },
             'mail.backend': 'django.core.mail.backends.locmem.EmailBackend',
             'system.url-prefix': 'http://testserver',
+
             'slack.client-id': 'slack-client-id',
             'slack.client-secret': 'slack-client-secret',
             'slack.verification-token': 'slack-verification-token',
@@ -148,6 +149,9 @@ def pytest_configure(config):
             'github.app-name': 'sentry-test-app',
             'github.client-id': 'github-client-id',
             'github.client-secret': 'github-client-secret',
+
+            'vsts.client-id': 'vsts-client-id',
+            'vsts.client-secret': 'vsts-client-secret',
         }
     )
 
@@ -201,6 +205,11 @@ def register_extensions():
     integrations.register(SlackIntegration)
     integrations.register(GitHubIntegration)
 
+    from sentry.integrations.vsts import VSTSIntegration
+    integrations.register(ExampleIntegration)
+    integrations.register(SlackIntegration)
+    integrations.register(VSTSIntegration)
+
     from sentry.plugins import bindings
     from sentry.plugins.providers.dummy import DummyRepositoryProvider
 
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 8402ed0291..31465d259e 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -496,6 +496,7 @@ urlpatterns += patterns(
     url(r'^extensions/jira/', include('sentry.integrations.jira.urls')),
     url(r'^extensions/slack/', include('sentry.integrations.slack.urls')),
     url(r'^extensions/github/', include('sentry.integrations.github.urls')),
+    url(r'^extensions/vsts/', include('sentry.integrations.vsts.urls')),
 
     url(r'^plugins/', include('sentry.plugins.base.urls')),
 
diff --git a/tests/sentry/integrations/vsts/__init__.py b/tests/sentry/integrations/vsts/__init__.py
new file mode 100644
index 0000000000..c3961685ab
--- /dev/null
+++ b/tests/sentry/integrations/vsts/__init__.py
@@ -0,0 +1 @@
+from __future__ import absolute_import
diff --git a/tests/sentry/integrations/vsts/test_integration.py b/tests/sentry/integrations/vsts/test_integration.py
new file mode 100644
index 0000000000..77ca908042
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_integration.py
@@ -0,0 +1,98 @@
+from __future__ import absolute_import
+
+import responses
+
+from mock import Mock
+from django.http import HttpRequest
+
+from sentry.integrations.vsts import VSTSIntegration, ProjectConfigView, ProjectForm, get_projects
+from sentry.identity.vsts import VSTSIdentityProvider
+from sentry.testutils import TestCase
+
+
+class ProjectConfigViewTest(TestCase):
+    def setUp(self):
+        self.instance = 'example.visualstudio.com'
+        self.projects = [
+            {
+                'id': 'first-project-id',
+                'name': 'First Project',
+                        'url': 'https://myfirstproject.visualstudio.com/DefaultCollection/_apis/projects/xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxx',
+                        'description': 'My First Project!',
+            },
+            {
+                'id': 'second-project-id',
+                'name': 'Second Project',
+                        'url': 'https://mysecondproject.visualstudio.com/DefaultCollection/_apis/projects/xxxxxxx-xxxx-xxxx-xxxxxxxxxxxxxxxz',
+                        'description': 'Not My First Project!',
+            }
+        ]
+        responses.add(
+            responses.GET,
+            'https://{}/DefaultCollection/_apis/projects'.format(self.instance),
+            json={
+                'value': self.projects,
+                'count': 2,
+            },
+        )
+
+    @responses.activate
+    def test_get_projects(self):
+        result = get_projects(self.instance, 'access-token')
+        assert result['count'] == 2
+        assert result['value'][0]['name'] == 'First Project'
+        assert result['value'][1]['name'] == 'Second Project'
+
+    def test_project_form(self):
+        project_form = ProjectForm(self.projects)
+        assert project_form.fields['project'].choices == [
+            ('first-project-id', 'First Project'), ('second-project-id', 'Second Project')]
+
+    def test_dispatch(self):
+        view = ProjectConfigView()
+        request = HttpRequest()
+        request.POST = {'project': 'first-project-id'}
+
+        pipeline = Mock()
+        pipeline.state = {'projects': self.projects}
+        pipeline.fetch_state = lambda key: pipeline.state[key]
+        pipeline.bind_state = lambda name, value: pipeline.state.update({name: value})
+
+        view.dispatch(request, pipeline)
+
+        assert pipeline.fetch_state(key='project') == self.projects[0]
+        assert pipeline.next_step.call_count == 1
+
+
+class VSTSIntegrationTest(TestCase):
+    def setUp(self):
+        self.integration = VSTSIntegration()
+
+    def test_build_integration(self):
+        state = {
+            'identity': {
+                'data': {
+                    'access_token': 'xxx-xxxx',
+                    'expires_in': '3600',
+                    'refresh_token': 'rxxx-xxxx',
+                    'token_type': 'jwt-bearer',
+                },
+                'account': {'AccountName': 'sentry', 'AccountId': '123435'},
+                'instance': 'sentry.visualstudio.com',
+            },
+            'project': {'name': 'My Project', 'id': 'my-project-id'},
+        }
+        integration_dict = self.integration.build_integration(state)
+        assert integration_dict['name'] == 'My Project'
+        assert integration_dict['external_id'] == 'my-project-id'
+        assert integration_dict['metadata']['scopes'] == list(VSTSIdentityProvider.oauth_scopes)
+        assert integration_dict['metadata']['domain_name'] == 'sentry.visualstudio.com'
+
+        assert integration_dict['user_identity']['type'] == 'vsts'
+        assert integration_dict['user_identity']['external_id'] == '123435'
+        assert integration_dict['user_identity']['scopes'] == []
+
+        assert integration_dict['user_identity']['data']['access_token'] == 'xxx-xxxx'
+        assert isinstance(integration_dict['user_identity']['data']['expires'], int)
+        assert integration_dict['user_identity']['data']['refresh_token'] == 'rxxx-xxxx'
+        assert integration_dict['user_identity']['data']['token_type'] == 'jwt-bearer'
diff --git a/tests/sentry/integrations/vsts/test_provider.py b/tests/sentry/integrations/vsts/test_provider.py
new file mode 100644
index 0000000000..4006c85d30
--- /dev/null
+++ b/tests/sentry/integrations/vsts/test_provider.py
@@ -0,0 +1,122 @@
+
+from __future__ import absolute_import
+from mock import Mock
+import responses
+from django.http import HttpRequest
+from sentry.identity.vsts.provider import VSTSOAuth2CallbackView, AccountConfigView, AccountForm
+from sentry.testutils import TestCase
+from six.moves.urllib.parse import parse_qs
+
+
+class TestVSTSOAuthCallbackView(TestCase):
+    @responses.activate
+    def test_exchange_token(self):
+        def redirect_url():
+            return 'https://app.vssps.visualstudio.com/oauth2/authorize'
+
+        view = VSTSOAuth2CallbackView(
+            access_token_url='https://app.vssps.visualstudio.com/oauth2/token',
+            client_id='vsts-client-id',
+            client_secret='vsts-client-secret',
+        )
+        request = Mock()
+        pipeline = Mock()
+
+        pipeline.redirect_url = redirect_url
+
+        responses.add(
+            responses.POST, 'https://app.vssps.visualstudio.com/oauth2/token',
+            json={
+                'access_token': 'xxxxxxxxx',
+                'token_type': 'jwt-bearer',
+                'expires_in': '3599',
+                'refresh_token': 'zzzzzzzzzz',
+            },
+        )
+
+        result = view.exchange_token(request, pipeline, 'oauth-code')
+        mock_request = responses.calls[0].request
+        req_params = parse_qs(mock_request.body)
+
+        assert req_params['grant_type'] == ['urn:ietf:params:oauth:grant-type:jwt-bearer']
+        assert req_params['assertion'] == ['oauth-code']
+        assert req_params['redirect_uri'] == ['https://app.vssps.visualstudio.com/oauth2/authorize']
+        assert req_params['client_assertion_type'] == [
+            'urn:ietf:params:oauth:client-assertion-type:jwt-bearer']
+        assert req_params['client_assertion'] == ['vsts-client-secret']
+
+        assert result['access_token'] == 'xxxxxxxxx'
+        assert result['token_type'] == 'jwt-bearer'
+        assert result['expires_in'] == '3599'
+        assert result['refresh_token'] == 'zzzzzzzzzz'
+
+
+class TestAccountConfigView(TestCase):
+    def setUp(self):
+        self.accounts = [
+            {
+                'AccountId': '1234567-89',
+                'NamespaceId': '00000000-0000-0000-0000-000000000000',
+                'AccountName': 'sentry',
+                'OrganizationName': None,
+                'AccountType': 0,
+                'AccountOwner': '00000000-0000-0000-0000-000000000000',
+                'CreatedBy': '00000000-0000-0000-0000-000000000000',
+                'CreatedDate': '0001-01-01T00:00:00',
+                'AccountStatus': 0,
+                'StatusReason': None,
+                'LastUpdatedBy': '00000000-0000-0000-0000-000000000000',
+                'Properties': {},
+            },
+            {
+                'AccountId': '1234567-8910',
+                'NamespaceId': '00000000-0000-0000-0000-000000000000',
+                'AccountName': 'sentry2',
+                'OrganizationName': None,
+                'AccountType': 0,
+                'AccountOwner': '00000000-0000-0000-0000-000000000000',
+                'CreatedBy': '00000000-0000-0000-0000-000000000000',
+                'CreatedDate': '0001-01-01T00:00:00',
+                'AccountStatus': 0,
+                'StatusReason': None,
+                'LastUpdatedBy': '00000000-0000-0000-0000-000000000000',
+                'Properties': {},
+            },
+
+        ]
+        responses.add(
+            responses.GET,
+            'https://app.vssps.visualstudio.com/_apis/accounts',
+            json=self.accounts,
+            status=200,
+
+        )
+
+    @responses.activate
+    def test_dispatch(self):
+        view = AccountConfigView()
+        request = HttpRequest()
+        request.POST = {'account': '1234567-8910'}
+
+        pipeline = Mock()
+        pipeline.state = {'accounts': self.accounts}
+        pipeline.fetch_state = lambda key: pipeline.state[key]
+        pipeline.bind_state = lambda name, value: pipeline.state.update({name: value})
+
+        view.dispatch(request, pipeline)
+
+        assert pipeline.fetch_state(key='instance') == 'sentry2.visualstudio.com'
+        assert pipeline.fetch_state(key='account') == self.accounts[1]
+        assert pipeline.next_step.call_count == 1
+
+    @responses.activate
+    def test_get_accounts(self):
+        view = AccountConfigView()
+        accounts = view.get_accounts('access-token')
+        assert accounts[0]['AccountName'] == 'sentry'
+        assert accounts[1]['AccountName'] == 'sentry2'
+
+    def test_account_form(self):
+        account_form = AccountForm(self.accounts)
+        assert account_form.fields['account'].choices == [
+            ('1234567-89', 'sentry'), ('1234567-8910', 'sentry2')]
