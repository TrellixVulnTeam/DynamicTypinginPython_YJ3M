commit 6ddea0c0e7bcc4ff05257b0af6b38b3cc0201b16
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 1 01:22:13 2013 -0700

    Remove unused request code

diff --git a/src/sentry/models.py b/src/sentry/models.py
index be070e9f00..0efb98c373 100644
--- a/src/sentry/models.py
+++ b/src/sentry/models.py
@@ -42,7 +42,6 @@ from sentry.manager import (
     MetaManager, InstanceMetaManager, SearchDocumentManager, BaseManager,
     UserOptionManager, FilterKeyManager, TeamManager)
 from sentry.signals import buffer_incr_complete, regression_signal
-from sentry.utils import MockDjangoRequest
 from sentry.utils.cache import memoize
 from sentry.utils.db import has_trending
 from sentry.utils.http import absolute_uri
@@ -665,34 +664,6 @@ class Event(EventBase):
 
     __repr__ = sane_repr('project_id', 'group_id', 'checksum')
 
-    @memoize
-    def request(self):
-        data = self.data
-        if 'META' in data:
-            kwargs = {
-                'META': data.get('META'),
-                'GET': data.get('GET'),
-                'POST': data.get('POST'),
-                'FILES': data.get('FILES'),
-                'COOKIES': data.get('COOKIES'),
-                'url': data.get('url'),
-            }
-        elif 'sentry.interfaces.Http' in data:
-            http = data['sentry.interfaces.Http']
-            kwargs = {
-                'META': http
-            }
-        else:
-            return MockDjangoRequest()
-
-        fake_request = MockDjangoRequest(**kwargs)
-        if 'url' in kwargs and kwargs['url']:
-            fake_request.path_info = '/' + kwargs['url'].split('/', 3)[-1]
-        else:
-            fake_request.path_info = ''
-        fake_request.path = fake_request.path_info
-        return fake_request
-
     @memoize
     def interfaces(self):
         result = []
diff --git a/src/sentry/utils/__init__.py b/src/sentry/utils/__init__.py
index 537c691955..3f2ad0705c 100644
--- a/src/sentry/utils/__init__.py
+++ b/src/sentry/utils/__init__.py
@@ -6,52 +6,9 @@ sentry.utils
 :license: BSD, see LICENSE for more details.
 """
 
-from django.http import HttpRequest
 from django.utils.encoding import force_unicode
 
 
-class MockDjangoRequest(HttpRequest):
-    GET = {}
-    POST = {}
-    META = {}
-    COOKIES = {}
-    FILES = {}
-    raw_post_data = ''
-    url = ''
-    path = '/'
-    plugins = []
-
-    def __init__(self, **kwargs):
-        self.__dict__.update(kwargs)
-
-    def __repr__(self):
-        from pprint import pformat
-
-        # Since this is called as part of error handling, we need to be very
-        # robust against potentially malformed input.
-        try:
-            get = pformat(self.GET)
-        except Exception:
-            get = '<could not parse>'
-        try:
-            post = pformat(self.POST)
-        except Exception:
-            post = '<could not parse>'
-        try:
-            cookies = pformat(self.COOKIES)
-        except Exception:
-            cookies = '<could not parse>'
-        try:
-            meta = pformat(self.META)
-        except Exception:
-            meta = '<could not parse>'
-        return '<Request\nGET:%s,\nPOST:%s,\nCOOKIES:%s,\nMETA:%s>' % \
-            (get, post, cookies, meta)
-
-    def build_absolute_uri(self):
-        return self.url
-
-
 def to_unicode(value):
     try:
         value = unicode(force_unicode(value))
