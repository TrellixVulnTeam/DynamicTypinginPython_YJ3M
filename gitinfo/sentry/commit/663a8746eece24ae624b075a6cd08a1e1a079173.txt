commit 663a8746eece24ae624b075a6cd08a1e1a079173
Author: Ben Vinegar <ben@benv.ca>
Date:   Wed Aug 19 09:48:51 2015 -0700

    Make raw exception output just plaintext (refs #1771)

diff --git a/src/sentry/static/sentry/app/components/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/interfaces/exception.jsx
index 75303d0300..63074a5bce 100644
--- a/src/sentry/static/sentry/app/components/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/exception.jsx
@@ -2,7 +2,7 @@ import React from "react";
 import ConfigStore from "../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
-import RawStacktraceContent from "./rawStacktraceContent";
+import rawStacktraceContent from "./rawStacktraceContent";
 import StacktraceContent from "./stacktraceContent";
 import {defined} from "../../utils";
 
@@ -24,18 +24,13 @@ var ExceptionContent = React.createClass({
           {exc.value &&
             <pre className="exc-message">{exc.value}</pre>
           }
-          {defined(exc.stacktrace) && (stackView === "raw" ?
-            <RawStacktraceContent
-                data={exc.stacktrace}
-                platform={this.props.platform}
-                newestFirst={this.props.newestFirst} />
-          :
+          {defined(exc.stacktrace) &&
             <StacktraceContent
                 data={exc.stacktrace}
                 includeSystemFrames={stackView === "full"}
                 platform={this.props.platform}
                 newestFirst={this.props.newestFirst} />
-          )}
+          }
         </div>
       );
     });
@@ -52,6 +47,28 @@ var ExceptionContent = React.createClass({
   }
 });
 
+var RawExceptionContent = React.createClass({
+  propTypes: {
+    platform: React.PropTypes.string
+  },
+
+  render() {
+    var children = this.props.values.map((exc, excIdx) => {
+      return (
+        <pre key={excIdx} className="traceback">
+          {rawStacktraceContent(exc.stacktrace, this.props.platform, exc)}
+        </pre>
+      );
+    });
+
+    return (
+      <div>
+        {children}
+      </div>
+    );
+  }
+});
+
 var ExceptionInterface = React.createClass({
   propTypes: {
     group: PropTypes.Group.isRequired,
@@ -120,11 +137,16 @@ var ExceptionInterface = React.createClass({
           event={evt}
           type={this.props.type}
           title={title}>
-        <ExceptionContent
-            view={stackView}
+        {stackView === 'raw' ?
+          <RawExceptionContent
+            values={data.values}
+            platform={evt.platform}/> :
+
+          <ExceptionContent
             values={data.values}
             platform={evt.platform}
-            newestFirst={newestFirst} />
+            newestFirst={newestFirst}/>
+        }
       </GroupEventDataSection>
     );
   }
diff --git a/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx b/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx
index 54b140dd46..d2d3c68bbe 100644
--- a/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/rawStacktraceContent.jsx
@@ -2,146 +2,135 @@ import React from "react";
 import PropTypes from "../../proptypes";
 import {defined, trim} from "../../utils";
 
-var RawStacktraceContent = React.createClass({
-  propTypes: {
-    data: React.PropTypes.object.isRequired,
-    platform: React.PropTypes.string
-  },
+function getFrame(frame, platform) {
+  switch (platform) {
+    case "javascript":
+      return getJavaScriptFrame(frame);
+    case "ruby":
+      return getRubyFrame(frame);
+    case "python":
+      return getPythonFrame(frame);
+    case "java":
+      return getJavaFrame(frame);
+    default:
+      return getPythonFrame(frame);
+  }
+}
 
-  getFrame(frame) {
-    switch (this.props.platform) {
-      case "javascript":
-        return this.getJavaScriptFrame(frame);
-      case "ruby":
-        return this.getRubyFrame(frame);
-      case "python":
-        return this.getPythonFrame(frame);
-      case "java":
-        return this.getJavaFrame(frame);
-      default:
-        return this.getDefaultFrame(frame);
-    }
-  },
+function getJavaScriptFrame(frame) {
+  var result = '';
+  if (defined(frame.function)) {
+    result += '  at ' + frame.function + '(';
+  } else {
+    result += '  at ? (';
+  }
+  if (defined(frame.filename)) {
+    result += frame.filename;
+  } else if (defined(frame.module)) {
+    result += frame.module;
+  }
+  if (defined(frame.lineNo) && frame.lineNo >= 0) {
+    result += ':' + frame.lineNo;
+  }
+  if (defined(frame.colNo) && frame.colNo >= 0) {
+    result += ':' + frame.colNo;
+  }
+  result += ')';
+  return result;
+}
 
-  getJavaScriptFrame(frame) {
-    var result = '';
-    if (defined(frame.function)) {
-      result += '  at ' + frame.function + '(';
-    } else {
-      result += '  at ? (';
-    }
-    if (defined(frame.filename)) {
-      result += frame.filename;
-    } else if (defined(frame.module)) {
-      result += frame.module;
-    }
-    if (defined(frame.lineNo) && frame.lineNo >= 0) {
-      result += ':' + frame.lineNo;
-    }
-    if (defined(frame.colNo) && frame.colNo >= 0) {
-      result += ':' + frame.colNo;
-    }
-    result += ')';
-    return result;
-  },
+function getRubyFrame(frame) {
+  var result = '  from ';
+  if (defined(frame.filename)) {
+    result += frame.filename;
+  } else if (defined(frame.module)) {
+    result += '(' + frame.module + ')';
+  } else {
+    result += '?';
+  }
+  if (defined(frame.lineNo) && frame.lineNo >= 0) {
+    result += ':' + frame.lineNo;
+  }
+  if (defined(frame.colNo) && frame.colNo >= 0) {
+    result += ':' + frame.colNo;
+  }
+  if (defined(frame.function)) {
+    result += ':in `' + frame.function + '\'';
+  }
+  return result;
+}
 
-  getRubyFrame(frame) {
-    var result = '  from ';
-    if (defined(frame.filename)) {
-      result += frame.filename;
-    } else if (defined(frame.module)) {
-      result += '(' + frame.module + ')';
-    } else {
-      result += '?';
-    }
-    if (defined(frame.lineNo) && frame.lineNo >= 0) {
-      result += ':' + frame.lineNo;
-    }
-    if (defined(frame.colNo) && frame.colNo >= 0) {
-      result += ':' + frame.colNo;
-    }
-    if (defined(frame.function)) {
-      result += ':in `' + frame.function + '\'';
-    }
-    return result;
-  },
+export function getPythonFrame(frame) {
+  var result = '';
+  if (defined(frame.filename)) {
+    result += '  File "' + frame.filename + '"';
+  } else if (defined(frame.module)) {
+    result += '  Module "' + frame.module + '"';
+  } else {
+    result += '  ?';
+  }
+  if (defined(frame.lineNo) && frame.lineNo >= 0) {
+    result += ', line ' + frame.lineNo;
+  }
+  if (defined(frame.colNo) && frame.colNo >= 0) {
+    result += ', col ' + frame.colNo;
+  }
+  if (defined(frame.function)) {
+    result += ', in ' + frame.function;
+  }
+  if (defined(frame.context)) {
+    frame.context.forEach((item) => {
+      if (item[0] === frame.lineNo) {
+        result += '\n    ' + trim(item[1]);
+      }
+    });
+  }
+  return result;
+}
 
-  getPythonFrame(frame) {
-    var result = '';
-    if (defined(frame.filename)) {
-      result += '  File "' + frame.filename + '"';
-    } else if (defined(frame.module)) {
-      result += '  Module "' + frame.module + '"';
-    } else {
-      result += '  ?';
-    }
+export function getJavaFrame(frame) {
+  var result = '    at';
+  if (defined(frame.module)) {
+    result += ' ' + frame.module + '.';
+  }
+  if (defined(frame.function)) {
+    result += frame.function;
+  }
+  if (defined(frame.filename)) {
+    result += '(' + frame.filename;
     if (defined(frame.lineNo) && frame.lineNo >= 0) {
-      result += ', line ' + frame.lineNo;
-    }
-    if (defined(frame.colNo) && frame.colNo >= 0) {
-      result += ', col ' + frame.colNo;
-    }
-    if (defined(frame.function)) {
-      result += ', in ' + frame.function;
-    }
-    if (defined(frame.context)) {
-      frame.context.forEach((item) => {
-        if (item[0] === frame.lineNo) {
-          result += '\n    ' + trim(item[1]);
-        }
-      });
+      result += ':' + frame.lineNo;
     }
-    return result;
-  },
+    result += ')';
+  }
+  return result;
+}
 
-  getJavaFrame(frame) {
-    var result = '    at';
-    if (defined(frame.module)) {
-      result += ' ' + frame.module + '.';
-    }
-    if (defined(frame.function)) {
-      result += frame.function;
-    }
-    if (defined(frame.filename)) {
-      result += '(' + frame.filename;
-      if (defined(frame.lineNo) && frame.lineNo >= 0) {
-        result += ':' + frame.lineNo;
-      }
-      result += ')';
-    }
-    return result;
-  },
+export default function render (data, platform, exception) {
+  var firstFrameOmitted, lastFrameOmitted;
+  var children = [];
 
-  getDefaultFrame(frame) {
-    return this.getPythonFrame(frame);
-  },
+  if (exception) {
+    children.push(exception.type + ': ' + exception.value);
+  }
 
-  render() {
-    var data = this.props.data;
-    var firstFrameOmitted, lastFrameOmitted;
-    var children = [];
+  if (data.framesOmitted) {
+    firstFrameOmitted = data.framesOmitted[0];
+    lastFrameOmitted = data.framesOmitted[1];
+  } else {
+    firstFrameOmitted = null;
+    lastFrameOmitted = null;
+  }
 
-    if (data.framesOmitted) {
-      firstFrameOmitted = data.framesOmitted[0];
-      lastFrameOmitted = data.framesOmitted[1];
-    } else {
-      firstFrameOmitted = null;
-      lastFrameOmitted = null;
+  data.frames.forEach((frame, frameIdx) => {
+    children.push(getFrame(frame, platform));
+    if (frameIdx === firstFrameOmitted) {
+      children.push((
+        '.. frames ' + firstFrameOmitted + ' until ' + lastFrameOmitted + ' were omitted and not available ..'
+      ));
     }
 
-    data.frames.forEach((frame, frameIdx) => {
-      children.push(this.getFrame(frame));
-      if (frameIdx === firstFrameOmitted) {
-        children.push((
-          '.. frames ' + firstFrameOmitted + ' until ' + lastFrameOmitted + ' were omitted and not available ..'
-        ));
-      }
-
-    });
-
-    return <pre className="traceback">{children.join('\n')}</pre>;
-  }
-});
-
-export default RawStacktraceContent;
+  });
 
+  return children.join('\n');
+}
diff --git a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
index a5c0f203ec..6dd2081c47 100644
--- a/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/interfaces/stacktrace.jsx
@@ -2,7 +2,7 @@ import React from "react";
 import ConfigStore from "../../stores/configStore";
 import GroupEventDataSection from "../eventDataSection";
 import PropTypes from "../../proptypes";
-import RawStacktraceContent from "./rawStacktraceContent";
+import rawStacktraceContent from "./rawStacktraceContent";
 import StacktraceContent from "./stacktraceContent";
 
 var StacktraceInterface = React.createClass({
@@ -74,10 +74,9 @@ var StacktraceInterface = React.createClass({
           type={this.props.type}
           title={title}>
         {stackView === "raw" ?
-          <RawStacktraceContent
-              data={data}
-              platform={evt.platform}
-              newestFirst={newestFirst} />
+          <pre className="traceback">
+            {rawStacktraceContent(data, this.props.platform)}
+          </pre>
         :
           <StacktraceContent
               data={data}
diff --git a/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx b/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx
index f910f8bbef..71366bd524 100644
--- a/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx
+++ b/tests/js/spec/components/interfaces/rawStacktraceContent.spec.jsx
@@ -3,17 +3,14 @@ var React = require("react/addons");
 var Cookies = require("js-cookie");
 
 var api = require("app/api");
-var RawStacktraceContent = require("app/components/interfaces/rawStacktraceContent");
+import {getJavaFrame} from "app/components/interfaces/rawStacktraceContent";
 
 var TestUtils = React.addons.TestUtils;
 
 describe("RawStacktraceContent", function() {
   describe("getJavaFrame()", function() {
     it('should render java frames', function () {
-      var data = { frames: [] };
-      var elem = TestUtils.renderIntoDocument(<RawStacktraceContent data={data} />);
-
-      expect(elem.getJavaFrame({
+      expect(getJavaFrame({
         module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
         function: 'run',
         filename: 'QueuedThreadPool.java',
@@ -21,14 +18,14 @@ describe("RawStacktraceContent", function() {
       })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)');
 
       // without line number
-      expect(elem.getJavaFrame({
+      expect(getJavaFrame({
         module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
         function: 'run',
         filename: 'QueuedThreadPool.java'
       })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java)');
 
       // without line number and filename
-      expect(elem.getJavaFrame({
+      expect(getJavaFrame({
         module: 'org.mortbay.thread.QueuedThreadPool$PoolThread',
         function: 'run'
       })).to.eql('    at org.mortbay.thread.QueuedThreadPool$PoolThread.run');
