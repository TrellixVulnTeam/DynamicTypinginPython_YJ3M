commit c0e07cddb9ed2aa27f748d15a01d2c4e50d2e2d5
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 17 10:07:38 2018 -0700

    fix(feedback): Vary responses based on Accept header
    
    - Support bad responses with initial text/javascript request
    - Add X-Sentry-Context header for text/javascript responses
    
    Fixes getsentry/raven-js#1439

diff --git a/src/sentry/web/frontend/error_page_embed.py b/src/sentry/web/frontend/error_page_embed.py
index 4aa4e3cb83..b6c1a7dadb 100644
--- a/src/sentry/web/frontend/error_page_embed.py
+++ b/src/sentry/web/frontend/error_page_embed.py
@@ -92,16 +92,23 @@ class ErrorPageEmbedView(View):
     def _get_origin(self, request):
         return origin_from_request(request)
 
-    def _json_response(self, request, context=None, status=200):
-        if context:
-            content = json.dumps(context)
-        else:
+    def _smart_response(self, request, context=None, status=200):
+        json_context = json.dumps(context or {})
+        accept = request.META.get('HTTP_ACCEPT') or ''
+        if 'text/javascript' in accept:
+            content_type = 'text/javascript'
             content = ''
-        response = HttpResponse(content, status=status, content_type='application/json')
+        else:
+            content_type = 'application/json'
+            content = json_context
+        response = HttpResponse(content, status=status, content_type=content_type)
         response['Access-Control-Allow-Origin'] = request.META.get('HTTP_ORIGIN', '')
         response['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS'
         response['Access-Control-Max-Age'] = '1000'
         response['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With'
+        response['Vary'] = 'Accept'
+        if content == '' and context:
+            response['X-Sentry-Context'] = json_context
         return response
 
     @csrf_exempt
@@ -109,21 +116,21 @@ class ErrorPageEmbedView(View):
         try:
             event_id = request.GET['eventId']
         except KeyError:
-            return self._json_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
+            return self._smart_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
 
         if event_id and not is_event_id(event_id):
-            return self._json_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
+            return self._smart_response(request, {'eventId': 'Missing or invalid parameter.'}, status=400)
 
         key = self._get_project_key(request)
         if not key:
-            return self._json_response(request, {'dsn': 'Missing or invalid parameter.'}, status=404)
+            return self._smart_response(request, {'dsn': 'Missing or invalid parameter.'}, status=404)
 
         origin = self._get_origin(request)
         if not is_valid_origin(origin, key.project):
-            return self._json_response(request, status=403)
+            return self._smart_response(request, status=403)
 
         if request.method == 'OPTIONS':
-            return self._json_response(request)
+            return self._smart_response(request)
 
         # customization options
         options = DEFAULT_OPTIONS.copy()
@@ -183,9 +190,9 @@ class ErrorPageEmbedView(View):
 
             user_feedback_received.send(project=report.project, group=report.group, sender=self)
 
-            return self._json_response(request)
+            return self._smart_response(request)
         elif request.method == 'POST':
-            return self._json_response(
+            return self._smart_response(
                 request, {
                     "errors": dict(form.errors),
                 }, status=400
diff --git a/tests/sentry/web/frontend/test_error_page_embed.py b/tests/sentry/web/frontend/test_error_page_embed.py
index a4eb7c4134..c0fba28951 100644
--- a/tests/sentry/web/frontend/test_error_page_embed.py
+++ b/tests/sentry/web/frontend/test_error_page_embed.py
@@ -19,38 +19,100 @@ class ErrorPageEmbedTest(TestCase):
         self.project.update_option('sentry:origins', ['example.com'])
         self.key = self.create_project_key(self.project)
         self.event_id = uuid4().hex
-        self.path = '%s?eventId=%s&dsn=%s' % (
-            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),
+        self.path = reverse('sentry-error-page-embed')
+        self.path_with_qs = '%s?eventId=%s&dsn=%s' % (
+            self.path, quote(self.event_id), quote(self.key.dsn_public),
         )
 
     def test_invalid_referer(self):
         with self.settings(SENTRY_ALLOW_ORIGIN=None):
-            resp = self.client.get(self.path, HTTP_REFERER='http://foo.com')
-        assert resp.status_code == 403
+            resp = self.client.get(
+                self.path_with_qs,
+                HTTP_REFERER='http://foo.com',
+            )
+        assert resp.status_code == 403, resp.content
+        assert resp['Content-Type'] == 'application/json'
+
+    def test_invalid_origin(self):
+        with self.settings(SENTRY_ALLOW_ORIGIN=None):
+            resp = self.client.get(
+                self.path_with_qs,
+                HTTP_ORIGIN='http://foo.com',
+            )
+        assert resp.status_code == 403, resp.content
+        assert resp['Content-Type'] == 'application/json'
+
+    def test_invalid_origin_respects_accept(self):
+        with self.settings(SENTRY_ALLOW_ORIGIN=None):
+            resp = self.client.get(
+                self.path_with_qs,
+                HTTP_ORIGIN='http://foo.com',
+                HTTP_ACCEPT='text/html, text/javascript',
+            )
+        assert resp.status_code == 403, resp.content
+        assert resp['Content-Type'] == 'text/javascript'
+
+    def test_missing_eventId(self):
+        path = '%s?dsn=%s' % (
+            self.path, quote(self.key.dsn_public),
+        )
+        with self.settings(SENTRY_ALLOW_ORIGIN='*'):
+            resp = self.client.get(
+                path,
+                HTTP_REFERER='http://example.com',
+                HTTP_ACCEPT='text/html, text/javascript',
+            )
+        assert resp.status_code == 400, resp.content
+        assert resp['Content-Type'] == 'text/javascript'
+        assert resp['X-Sentry-Context'] == '{"eventId":"Missing or invalid parameter."}'
+        assert resp.content == ''
+
+    def test_missing_dsn(self):
+        path = '%s?eventId=%s' % (
+            self.path, quote(self.event_id),
+        )
+        with self.settings(SENTRY_ALLOW_ORIGIN='*'):
+            resp = self.client.get(
+                path,
+                HTTP_REFERER='http://example.com',
+                HTTP_ACCEPT='text/html, text/javascript',
+            )
+        assert resp.status_code == 404, resp.content
+        assert resp['Content-Type'] == 'text/javascript'
+        assert resp['X-Sentry-Context'] == '{"dsn":"Missing or invalid parameter."}'
+        assert resp.content == ''
 
     def test_renders(self):
-        resp = self.client.get(self.path, HTTP_REFERER='http://example.com')
-        assert resp.status_code == 200
+        resp = self.client.get(
+            self.path_with_qs,
+            HTTP_REFERER='http://example.com',
+            HTTP_ACCEPT='text/html, text/javascript',
+        )
+        assert resp.status_code == 200, resp.content
         self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')
 
     def test_uses_locale_from_header(self):
         resp = self.client.get(
-            self.path, HTTP_REFERER='http://example.com', HTTP_ACCEPT_LANGUAGE='fr'
+            self.path_with_qs,
+            HTTP_REFERER='http://example.com',
+            HTTP_ACCEPT_LANGUAGE='fr',
+            HTTP_ACCEPT='text/html, text/javascript',
         )
-        assert resp.status_code == 200
+        assert resp.status_code == 200, resp.content
         self.assertTemplateUsed(resp, 'sentry/error-page-embed.html')
         assert 'Fermer' in resp.content  # Close
 
     def test_submission(self):
         resp = self.client.post(
-            self.path, {
+            self.path_with_qs, {
                 'name': 'Jane Doe',
                 'email': 'jane@example.com',
                 'comments': 'This is an example!',
             },
-            HTTP_REFERER='http://example.com'
+            HTTP_REFERER='http://example.com',
+            HTTP_ACCEPT='application/json',
         )
-        assert resp.status_code == 200
+        assert resp.status_code == 200, resp.content
 
         report = UserReport.objects.get()
         assert report.name == 'Jane Doe'
@@ -61,14 +123,15 @@ class ErrorPageEmbedTest(TestCase):
         assert report.group is None
 
         resp = self.client.post(
-            self.path, {
+            self.path_with_qs, {
                 'name': 'Joe Shmoe',
                 'email': 'joe@example.com',
                 'comments': 'haha I updated it!',
             },
-            HTTP_REFERER='http://example.com'
+            HTTP_REFERER='http://example.com',
+            HTTP_ACCEPT='application/json',
         )
-        assert resp.status_code == 200
+        assert resp.status_code == 200, resp.content
 
         report = UserReport.objects.get()
         assert report.name == 'Joe Shmoe'
@@ -80,19 +143,20 @@ class ErrorPageEmbedTest(TestCase):
 
     def test_submission_invalid_event_id(self):
         self.event_id = 'x' * 100
-        self.path = '%s?eventId=%s&dsn=%s' % (
-            reverse('sentry-error-page-embed'), quote(self.event_id), quote(self.key.dsn_public),
+        path = '%s?eventId=%s&dsn=%s' % (
+            self.path, quote(self.event_id), quote(self.key.dsn_public),
         )
 
         resp = self.client.post(
-            self.path, {
+            path, {
                 'name': 'Jane Doe',
                 'email': 'jane@example.com',
                 'comments': 'This is an example!',
             },
-            HTTP_REFERER='http://example.com'
+            HTTP_REFERER='http://example.com',
+            HTTP_ACCEPT='application/json',
         )
-        assert resp.status_code == 400
+        assert resp.status_code == 400, resp.content
 
 
 class ErrorPageEmbedEnvironmentTest(TestCase):
