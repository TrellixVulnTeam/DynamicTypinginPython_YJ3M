commit 4c65ae43a042512fe20305491de151447acb2640
Author: Stephen Cefali <scefali@sentry.io>
Date:   Thu Apr 16 09:48:23 2020 -0700

    feat(integrations): adds signing secret verification for slack webhooks (#18214)

diff --git a/src/sentry/integrations/slack/requests.py b/src/sentry/integrations/slack/requests.py
index 4bf5e492b2..23a6deb36a 100644
--- a/src/sentry/integrations/slack/requests.py
+++ b/src/sentry/integrations/slack/requests.py
@@ -1,5 +1,9 @@
 from __future__ import absolute_import
 
+import hmac
+import six
+from hashlib import sha256
+
 from sentry import options
 from sentry.models import Integration
 from sentry.utils import json
@@ -92,7 +96,23 @@ class SlackRequest(object):
             raise SlackRequestError(status=400)
 
     def _authorize(self):
-        if self.data.get("token") != options.get("slack.verification-token"):
+        # TODO(steve): update check when we add the v2 slack app
+        signing_secret = options.get("slack.signing-secret")
+        # use the signing_secret if it's available
+        if signing_secret:
+            # Taken from: https://github.com/slackapi/python-slack-events-api/blob/master/slackeventsapi/server.py#L47
+            # Slack docs on this here: https://api.slack.com/authentication/verifying-requests-from-slack#about
+            signature = self.request.META["HTTP_X_SLACK_SIGNATURE"]
+            timestamp = self.request.META["HTTP_X_SLACK_REQUEST_TIMESTAMP"]
+
+            req = six.binary_type("v0:%s:%s" % (timestamp, self.request.body))
+            request_hash = (
+                "v0=" + hmac.new(six.binary_type(signing_secret), req, sha256).hexdigest()
+            )
+            if not hmac.compare_digest(six.binary_type(request_hash), six.binary_type(signature)):
+                self._error("slack.action.invalid-token-signing-secret")
+                raise SlackRequestError(status=401)
+        elif self.data.get("token") != options.get("slack.verification-token"):
             self._error("slack.action.invalid-token")
             raise SlackRequestError(status=401)
 
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index f46141ee66..6eded25269 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -121,6 +121,7 @@ register("cloudflare.secret-key", default="")
 register("slack.client-id", flags=FLAG_PRIORITIZE_DISK)
 register("slack.client-secret", flags=FLAG_PRIORITIZE_DISK)
 register("slack.verification-token", flags=FLAG_PRIORITIZE_DISK)
+register("slack.signing-secret", flags=FLAG_PRIORITIZE_DISK)
 
 # GitHub Integration
 register("github-app.id", default=0)
diff --git a/tests/sentry/integrations/slack/test_requests.py b/tests/sentry/integrations/slack/test_requests.py
index 158f11731b..024f8d9c89 100644
--- a/tests/sentry/integrations/slack/test_requests.py
+++ b/tests/sentry/integrations/slack/test_requests.py
@@ -1,11 +1,19 @@
 from __future__ import absolute_import
 
 import json
+import hmac
+import time
+import six
+from datetime import datetime
+from hashlib import sha256
+from six.moves.urllib.parse import urlencode
+
 from sentry.utils.compat import mock
 
 from sentry import options
 from sentry.utils.cache import memoize
 from sentry.testutils import TestCase
+from sentry.testutils.helpers import override_options
 from sentry.integrations.slack.requests import (
     SlackRequest,
     SlackEventRequest,
@@ -100,6 +108,15 @@ class SlackEventRequestTest(TestCase):
             "user": {"id": "2"},
             "api_app_id": "S1",
         }
+        self.request.META = {}
+
+    def set_signature(self, secret, data):
+        timestamp = six.text_type(int(time.mktime(datetime.utcnow().timetuple())))
+        req = six.binary_type("v0:%s:%s" % (timestamp, six.binary_type(data)))
+
+        signature = "v0=" + hmac.new(six.binary_type(secret), req, sha256).hexdigest()
+        self.request.META["HTTP_X_SLACK_REQUEST_TIMESTAMP"] = timestamp
+        self.request.META["HTTP_X_SLACK_SIGNATURE"] = signature
 
     @memoize
     def slack_request(self):
@@ -140,6 +157,41 @@ class SlackEventRequestTest(TestCase):
     def test_type(self):
         assert self.slack_request.type == "bar"
 
+    def test_signing_secret(self):
+        with override_options({"slack.signing-secret": "secret"}):
+            self.request.data = {"challenge": "abc123", "type": "url_verification"}
+
+            # we get a url encoded body with Slack
+            self.request.body = urlencode(self.request.data)
+
+            self.set_signature(options.get("slack.signing-secret"), self.request.body)
+            self.slack_request.validate()
+
+    def test_signing_secret_bad(self):
+        with override_options({"slack.signing-secret": "secret"}):
+            # even though we provide the token, should still fail
+            self.request.data = {
+                "token": options.get("slack.verification-token"),
+                "challenge": "abc123",
+                "type": "url_verification",
+            }
+            self.request.body = urlencode(self.request.data)
+
+            self.set_signature("bad_key", self.request.body)
+            with self.assertRaises(SlackRequestError) as e:
+                self.slack_request.validate()
+                assert e.status == 401
+
+    def test_signing_secret_use_verification_token(self):
+        self.request.data = {
+            "token": options.get("slack.verification-token"),
+            "challenge": "abc123",
+            "type": "url_verification",
+        }
+        self.request.body = json.dumps(self.request.data)
+
+        self.slack_request.validate()
+
 
 class SlackActionRequestTest(TestCase):
     def setUp(self):
