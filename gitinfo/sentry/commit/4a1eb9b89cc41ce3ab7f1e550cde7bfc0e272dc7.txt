commit 4a1eb9b89cc41ce3ab7f1e550cde7bfc0e272dc7
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Oct 11 15:15:46 2018 -0700

    feat(discover): Allow user to select project_name (#10063)
    
    Add project_name as a selectable column. Since this data is stored in
    Sentry rather than Snuba this is a somewhat restricted field and we do
    not support conditions or orderby on this column.

diff --git a/src/sentry/api/endpoints/organization_discover_query.py b/src/sentry/api/endpoints/organization_discover_query.py
index f3fb5f2f00..2d033c50e2 100644
--- a/src/sentry/api/endpoints/organization_discover_query.py
+++ b/src/sentry/api/endpoints/organization_discover_query.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import re
 import six
+from copy import deepcopy
 
 from django.utils import timezone
 from rest_framework import serializers
@@ -111,10 +112,7 @@ class DiscoverQuerySerializer(serializers.Serializer):
         member = self.member
         projects = attrs[source]
 
-        org_projects = set(Project.objects.filter(
-            organization=organization,
-            status=ProjectStatus.VISIBLE,
-        ).values_list('id', flat=True))
+        org_projects = set(project[0] for project in self.context['projects'])
 
         if not set(projects).issubset(org_projects) or not self.has_projects_access(
                 member, organization, projects):
@@ -172,16 +170,60 @@ class DiscoverQuerySerializer(serializers.Serializer):
 class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
     permission_classes = (OrganizationDiscoverQueryPermission, )
 
-    def do_query(self, start, end, groupby, **kwargs):
+    def do_query(self, projects, **kwargs):
+        requested_query = deepcopy(kwargs)
+
+        selected_columns = kwargs['selected_columns']
+        groupby_columns = kwargs['groupby']
+
+        if 'project_name' in requested_query['selected_columns']:
+            selected_columns.remove('project_name')
+            if 'project_id' not in selected_columns:
+                selected_columns.append('project_id')
+
+        if 'project_name' in requested_query['groupby']:
+            groupby_columns.remove('project_name')
+            if 'project_id' not in groupby_columns:
+                groupby_columns.append('project_id')
+
+        for aggregation in kwargs['aggregations']:
+            if aggregation[1] == 'project_name':
+                aggregation[1] = 'project_id'
 
         snuba_results = snuba.raw_query(
-            start=start,
-            end=end,
-            groupby=groupby,
             referrer='discover',
             **kwargs
         )
 
+        if 'project_name' in requested_query['selected_columns']:
+            project_name_index = requested_query['selected_columns'].index('project_name')
+            snuba_results['meta'].insert(project_name_index, {'name': 'project_name'})
+            if 'project_id' not in requested_query['selected_columns']:
+                snuba_results['meta'] = [
+                    field for field in snuba_results['meta'] if field['name'] != 'project_id'
+                ]
+
+            for result in snuba_results['data']:
+                result['project_name'] = projects[result['project_id']]
+                if 'project_id' not in requested_query['selected_columns']:
+                    del result['project_id']
+
+        if 'project_name' in requested_query['groupby']:
+            project_name_index = requested_query['groupby'].index('project_name')
+            snuba_results['meta'].insert(project_name_index, {'name': 'project_name'})
+            if 'project_id' not in requested_query['groupby']:
+                snuba_results['meta'] = [
+                    field for field in snuba_results['meta'] if field['name'] != 'project_id'
+                ]
+
+            for result in snuba_results['data']:
+                result['project_name'] = projects[result['project_id']]
+                if 'project_id' not in requested_query['groupby']:
+                    del result['project_id']
+
+        # Only return the meta propety "name"
+        snuba_results['meta'] = [{'name': field['name']} for field in snuba_results['meta']]
+
         return snuba_results
 
     def post(self, request, organization):
@@ -189,9 +231,14 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
         if not features.has('organizations:discover', organization, actor=request.user):
             return self.respond(status=404)
 
+        projects = Project.objects.filter(
+            organization=organization,
+            status=ProjectStatus.VISIBLE,
+        ).values_list('id', 'slug')
+
         serializer = DiscoverQuerySerializer(
             data=request.DATA, context={
-                'organization': organization, 'user': request.user})
+                'organization': organization, 'projects': projects, 'user': request.user})
 
         if not serializer.is_valid():
             return Response(serializer.errors, status=400)
@@ -202,6 +249,10 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
 
         selected_columns = [] if has_aggregations else serialized.get('fields')
 
+        projects_map = {}
+        for project in projects:
+            projects_map[project[0]] = project[1]
+
         # Make sure that all selected fields are in the group by clause if there
         # are aggregations
         groupby = serialized.get('groupby') or []
@@ -212,8 +263,9 @@ class OrganizationDiscoverQueryEndpoint(OrganizationEndpoint):
                     groupby.append(field)
 
         results = self.do_query(
-            serialized.get('start'),
-            serialized.get('end'),
+            projects=projects_map,
+            start=serialized.get('start'),
+            end=serialized.get('end'),
             groupby=groupby,
             selected_columns=selected_columns,
             conditions=serialized.get('conditions'),
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
index 3b55944be6..cfe40dacad 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/data.jsx
@@ -33,6 +33,7 @@ export const SPECIAL_TAGS = {
 export const COLUMNS = [
   {name: 'event_id', type: TYPES.STRING},
   {name: 'project_id', type: TYPES.STRING},
+  {name: 'project_name', type: TYPES.STRING}, // Not a snuba column
   {name: 'platform', type: TYPES.STRING},
   {name: 'message', type: TYPES.STRING},
   {name: 'primary_hash', type: TYPES.STRING},
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx
index 5567918f5f..19df2e5c91 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/sidebar/queryEdit.jsx
@@ -36,8 +36,10 @@ export default class QueryEdit extends React.Component {
 
     const currentQuery = queryBuilder.getInternal();
     const columns = queryBuilder.getColumns();
-    // Do not allow conditions on projectID field
-    const columnsForConditions = columns.filter(({name}) => name !== 'project_id');
+    // Do not allow conditions on project_id or project_name fields
+    const columnsForConditions = columns.filter(
+      ({name}) => !['project_id', 'project_name'].includes(name)
+    );
 
     const fieldOptions = columns.map(({name}) => ({
       value: name,
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
index 22c80adf9c..c3dc264ddd 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/utils.jsx
@@ -59,6 +59,11 @@ export function getOrderByOptions(queryBuilder) {
       }
     }
 
+    // Never allow ordering by project_name since this can't be done in Snuba
+    if (name === 'project_name') {
+      return acc;
+    }
+
     return [
       ...acc,
       {value: name, label: `${name} asc`},
diff --git a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
index 307be7ae26..7ed5b23913 100644
--- a/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/queryBuilder.spec.jsx
@@ -11,7 +11,7 @@ describe('Query Builder', function() {
 
       expect(external.projects).toEqual([2]);
       expect(external.fields).toEqual(expect.arrayContaining([expect.any(String)]));
-      expect(external.fields).toHaveLength(45);
+      expect(external.fields).toHaveLength(46);
       expect(external.conditions).toHaveLength(0);
       expect(external.aggregations).toHaveLength(0);
       expect(external.orderby).toBe('-timestamp');
diff --git a/tests/js/spec/views/organizationDiscover/utils.spec.jsx b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
index 92bf303697..acd0752ae8 100644
--- a/tests/js/spec/views/organizationDiscover/utils.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/utils.spec.jsx
@@ -49,8 +49,8 @@ describe('getOrderByOptions()', function() {
   const organization = TestStubs.Organization({projects: [TestStubs.Project()]});
   const queryBuilder = createQueryBuilder({}, organization);
 
-  it('allows ordering by all fields when no aggregations', function() {
-    expect(getOrderByOptions(queryBuilder)).toHaveLength(COLUMNS.length * 2);
+  it('allows ordering by all fields when no aggregations except project_name', function() {
+    expect(getOrderByOptions(queryBuilder)).toHaveLength((COLUMNS.length - 1) * 2);
   });
 
   it('allows ordering by aggregations with aggregations and no fields', function() {
diff --git a/tests/snuba/test_organization_discover_query.py b/tests/snuba/test_organization_discover_query.py
index 978c1ad526..8360448825 100644
--- a/tests/snuba/test_organization_discover_query.py
+++ b/tests/snuba/test_organization_discover_query.py
@@ -173,3 +173,44 @@ class OrganizationDiscoverQueryTest(APITestCase, SnubaTestCase):
 
         assert response.status_code == 200, response.content
         assert len(response.data['data']) == 0
+
+    def test_select_project_name(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['project_name'],
+                'range': '14d',
+                'orderby': '-timestamp',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['project_name']) == 'bar'
+
+    def test_groupby_project_name(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'aggregations': [['count()', '', 'count']],
+                'fields': ['project_name'],
+                'range': '14d',
+                'orderby': '-count',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['project_name']) == 'bar'
+        assert(response.data['data'][0]['count']) == 1
+
+    def test_uniq_project_name(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover-query', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'aggregations': [['uniq', 'project_name', 'uniq_project_name']],
+                'range': '14d',
+                'orderby': '-uniq_project_name',
+            })
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert(response.data['data'][0]['uniq_project_name']) == 1
