commit 0580ecd42a13a1232200ba61611508f75610537f
Author: Chris Fuller <cfuller@sentry.io>
Date:   Wed Apr 8 21:43:52 2020 -0400

    feat(workflow): Create partial index for AlertRule model (#18150)
    
    * AlertRule Partial Index model and migration changes

diff --git a/migrations_lockfile.txt b/migrations_lockfile.txt
index 8238371de3..ec21a2f78d 100644
--- a/migrations_lockfile.txt
+++ b/migrations_lockfile.txt
@@ -10,7 +10,7 @@ auth: 0008_alter_user_username_max_length
 contenttypes: 0002_remove_content_type_name
 jira_ac: 0001_initial
 nodestore: 0001_initial
-sentry: 0060_add_file_eventattachment_index
+sentry: 0061_alertrule_partial_index
 sessions: 0001_initial
 sites: 0002_alter_domain_unique
 social_auth: 0001_initial
diff --git a/src/sentry/incidents/models.py b/src/sentry/incidents/models.py
index 35d971f135..8af2cedf66 100644
--- a/src/sentry/incidents/models.py
+++ b/src/sentry/incidents/models.py
@@ -382,7 +382,7 @@ class AlertRule(Model):
     objects = AlertRuleManager()
     objects_with_deleted = BaseManager()
 
-    organization = FlexibleForeignKey("sentry.Organization", db_index=False, null=True)
+    organization = FlexibleForeignKey("sentry.Organization", null=True)
     query_subscriptions = models.ManyToManyField(
         "sentry.QuerySubscription", related_name="alert_rules", through=AlertRuleQuerySubscription
     )
@@ -410,7 +410,12 @@ class AlertRule(Model):
     class Meta:
         app_label = "sentry"
         db_table = "sentry_alertrule"
-        unique_together = (("organization", "name"),)
+        # This constraint does not match what is in migration 0061, since there is no
+        # way to declare an index on an expression. Therefore, tests would break depending
+        # on whether we run migrations - to work around this, we skip some tests if
+        # migrations have not been run. In migration 0061, this index is set to
+        # a partial index where status=0
+        unique_together = (("organization", "name", "status"),)
 
 
 class TriggerStatus(Enum):
diff --git a/src/sentry/migrations/0061_alertrule_partial_index.py b/src/sentry/migrations/0061_alertrule_partial_index.py
new file mode 100644
index 0000000000..6d333cc6f2
--- /dev/null
+++ b/src/sentry/migrations/0061_alertrule_partial_index.py
@@ -0,0 +1,77 @@
+# -*- coding: utf-8 -*-
+# Generated by Django 1.11.27 on 2020-04-08 01:07
+from __future__ import unicode_literals
+
+from django.db import migrations
+import django.db.models.deletion
+import sentry.db.models.fields.foreignkey
+
+class Migration(migrations.Migration):
+    # This flag is used to mark that a migration shouldn't be automatically run in
+    # production. We set this to True for operations that we think are risky and want
+    # someone from ops to run manually and monitor.
+    # General advice is that if in doubt, mark your migration as `is_dangerous`.
+    # Some things you should always mark as dangerous:
+    # - Large data migrations. Typically we want these to be run manually by ops so that
+    #   they can be monitored. Since data migrations will now hold a transaction open
+    #   this is even more important.
+    # - Adding columns to highly active tables, even ones that are NULL.
+    is_dangerous = False
+
+    # This flag is used to decide whether to run this migration in a transaction or not.
+    # By default we prefer to run in a transaction, but for migrations where you want
+    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
+    # want to create an index concurrently when adding one to an existing table.
+    atomic = False
+
+
+    dependencies = [
+        ('sentry', '0060_add_file_eventattachment_index'),
+    ]
+
+    operations = [
+        migrations.SeparateDatabaseAndState(
+            database_operations=[
+                migrations.RunSQL("""
+                    ALTER TABLE sentry_alertrule DROP CONSTRAINT IF EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq;
+                    """,
+                    reverse_sql="""DO $$
+                    BEGIN
+                        BEGIN
+                            ALTER TABLE sentry_alertrule ADD CONSTRAINT sentry_alertrule_organization_id_name_12c48b37_uniq UNIQUE (organization_id, name);
+                        EXCEPTION
+                            WHEN duplicate_table THEN
+                        END;
+                    END $$;
+                    """
+                ),
+                 migrations.RunSQL("""
+                    DROP INDEX CONCURRENTLY IF EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq;
+                    """,
+                    reverse_sql="""
+                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq
+                    ON sentry_alertrule USING btree (organization_id, name);
+                    """,
+                ),
+                migrations.RunSQL("""
+                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_alertrule_status_active
+                    ON sentry_alertrule USING btree (organization_id, name, status)
+                    WHERE status = 0;
+                    """,
+                    reverse_sql="""
+                    DROP INDEX CONCURRENTLY IF EXISTS sentry_alertrule_status_active;
+                    """,
+                )
+            ],
+            state_operations=[
+                migrations.AlterUniqueTogether(
+                    name="alertrule", unique_together=set([("organization", "name", "status")])
+                )
+            ],
+        ),
+        migrations.AlterField(
+            model_name='alertrule',
+            name='organization',
+            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
+        ),
+    ]
