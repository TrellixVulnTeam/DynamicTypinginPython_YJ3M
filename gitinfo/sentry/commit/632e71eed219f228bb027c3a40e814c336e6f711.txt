commit 632e71eed219f228bb027c3a40e814c336e6f711
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Sep 30 11:04:41 2015 -0700

    Simplify add team flow (remove wizard)
    
    Fixes GH-2055

diff --git a/src/sentry/templates/sentry/create-project.html b/src/sentry/templates/sentry/create-project.html
index a71173bf69..e8869516e2 100644
--- a/src/sentry/templates/sentry/create-project.html
+++ b/src/sentry/templates/sentry/create-project.html
@@ -13,5 +13,5 @@
   <p>{% blocktrans %}Projects allow you to scope events to a specific application in your organization. For example, you might have separate projects for production vs development instances, or separate projects for your web app and mobile app.{% endblocktrans %}</p>
 
   {% include "sentry/partial/_form.html" %}
-{% endblock %}
 </div>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team-step-project.html b/src/sentry/templates/sentry/create-team-step-project.html
deleted file mode 100644
index bcfa000494..0000000000
--- a/src/sentry/templates/sentry/create-team-step-project.html
+++ /dev/null
@@ -1,18 +0,0 @@
-{% extends "sentry/create-team.html" %}
-
-{% load i18n %}
-{% load crispy_forms_tags %}
-
-{% block main %}
-  <fieldset class="step step-1">
-    <h3>Project</h3>
-
-    <div class="help-block">
-      Projects generally pair up well with repositories. In addition to thinking about each repository being a project, also consider your environments. You might have something like <strong>"Backend"</strong> or <strong>"Frontend (Staging)"</strong>.
-    </div>
-
-    {% for field in form %}
-      {{ field|as_crispy_field }}
-    {% endfor %}
-  </fieldset>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team-step-team.html b/src/sentry/templates/sentry/create-team-step-team.html
deleted file mode 100644
index feaa641e48..0000000000
--- a/src/sentry/templates/sentry/create-team-step-team.html
+++ /dev/null
@@ -1,20 +0,0 @@
-{% extends "sentry/create-team.html" %}
-
-{% load i18n %}
-{% load crispy_forms_tags %}
-
-{% block main %}
-  <fieldset class="step step-1">
-    <div class="help-block">
-      {% comment %}
-      A team generally represents a group of people within your organization. It might be something like <strong>"Platform"</strong> or <strong>"API"</strong>, or it could just be a specific product that may (or may not) have sub-projects. You'll be able to select which teams a member in your organization has access to so they also act as ACLs.
-      {% endcomment %}
-      Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.
-      <strong>Letâ€™s add our first one:</strong>
-    </div>
-
-    {% for field in form %}
-      {{ field|as_crispy_field }}
-    {% endfor %}
-  </fieldset>
-{% endblock %}
diff --git a/src/sentry/templates/sentry/create-team.html b/src/sentry/templates/sentry/create-team.html
index fd44ebcabe..9081624ef4 100644
--- a/src/sentry/templates/sentry/create-team.html
+++ b/src/sentry/templates/sentry/create-team.html
@@ -1,43 +1,17 @@
 {% extends "sentry/bases/modal.html" %}
 
 {% load i18n %}
-{% load crispy_forms_tags %}
 
 {% block title %}{% trans "New Team" %} | {{ block.super }}{% endblock %}
 
 {% block content %}
-  <section class="body">
-    <div class="create-flow">
-      <ul class="steps">
-        <li{% if current_step == 0 %} class="active"{% endif %}>1. {% trans "Create a team" %}</li>
-        <li{% if current_step == 1 %} class="active"{% endif %}>2. {% trans "Add a project" %}</li>
-      </ul>
+<div class="create-flow">
+  <div class="page-header">
+    <h2>{% trans "Create a New Team" %}</h2>
+  </div>
 
-      <form class="form-stacked" action="" method="post">
-        {% csrf_token %}
+  <p>{% blocktrans %}Teams group members' access to a specific focus, e.g. a major product or application that may have sub-projects.{% endblocktrans %}</p>
 
-        <input type="hidden" name="step" value="{{ current_step }}">
-
-        {{ form|as_crispy_errors }}
-
-        {% block main %}
-        {% endblock %}
-
-        <div class="actions">
-          <div class="pull-left">
-            {% if current_step != first_step %}
-              <button name="op" value="back" onclick="this.form.submit()"
-                      class="btn btn-default back-step">{% trans "Back" %}</button>
-            {% endif %}
-          </div>
-          {% if current_step != first_step %}
-            <button name="op" value="skip" onclick="this.form.submit()"
-                    class="btn btn-default">{% trans "Skip this step" %}</button>
-          {% endif %}
-          <button name="op" value="continue" type="submit"
-                  class="btn btn-primary next-step">{% trans "Continue" %}</button>
-        </div>
-      </form>
-    </div>
-  </section>
+  {% include "sentry/partial/_form.html" %}
+</div>
 {% endblock %}
diff --git a/src/sentry/web/forms/add_project.py b/src/sentry/web/forms/add_project.py
index 8dd118d814..79f458b42a 100644
--- a/src/sentry/web/forms/add_project.py
+++ b/src/sentry/web/forms/add_project.py
@@ -13,7 +13,7 @@ BLANK_CHOICE = [("", "")]
 class AddProjectForm(forms.ModelForm):
     name = forms.CharField(label=_('Name'), max_length=200,
         widget=forms.TextInput(attrs={
-            'placeholder': _('i.e. my project name'),
+            'placeholder': _('i.e. API, Frontend, My Application Name'),
         }),
         help_text='Using the repository name generally works well.',
     )
diff --git a/src/sentry/web/forms/add_team.py b/src/sentry/web/forms/add_team.py
index f314da6717..350509d641 100644
--- a/src/sentry/web/forms/add_team.py
+++ b/src/sentry/web/forms/add_team.py
@@ -9,9 +9,10 @@ from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team
 class AddTeamForm(forms.ModelForm):
     name = forms.CharField(label=_('Name'), max_length=200,
         widget=forms.TextInput(attrs={
-            'placeholder': _('E.g. Platform, API, Website, ...'),
+            'placeholder': _('E.g. Operations, Web, Desktop, ...'),
             'required': '',
         }),
+        help_text='The team name has no significant impact and can be changed later.',
     )
 
     class Meta:
diff --git a/src/sentry/web/frontend/create_team.py b/src/sentry/web/frontend/create_team.py
index 30008928c5..cf0842c29d 100644
--- a/src/sentry/web/frontend/create_team.py
+++ b/src/sentry/web/frontend/create_team.py
@@ -1,167 +1,34 @@
 from __future__ import absolute_import
 
-import logging
-
-from django.contrib import messages
 from django.core.urlresolvers import reverse
 
 from sentry.models import OrganizationMemberType
-from sentry.web.forms.add_project import AddProjectForm
 from sentry.web.forms.add_team import AddTeamForm
 from sentry.web.frontend.base import OrganizationView
 
 
-class Step(object):
-    def __init__(self, form, template, can_skip=False):
-        self.form = form
-        self.template = template
-        self.can_skip = can_skip
-
-    def __repr__(self):
-        return '<%s: form=%s template=%s>' % (
-            type(self).__name__, self.form.__name__, self.template
-        )
-
-
 class CreateTeamView(OrganizationView):
     required_access = OrganizationMemberType.ADMIN
 
-    session_key = 'ctwizard'
+    def get_form(self, request):
+        return AddTeamForm(request.POST or None, initial={
+            'team': request.GET.get('team'),
+        })
 
-    form_prefix = 'ctwizard'
-
-    steps = [
-        Step(form=AddTeamForm, template='create-team-step-team.html'),
-        Step(form=AddProjectForm, template='create-team-step-project.html', can_skip=True),
-    ]
-
-    # A lot of this logic is inspired by Django's FormWizard, but unfortunately
-    # using that requires us to inherit from Django's base CBVs which is not
-    # acceptable due to the way we handle base view validation and ACLs.
     def handle(self, request, organization):
-        session_data = request.session.get(self.session_key, {})
-        if request.method == 'GET':
-            logging.debug('GET request; resetting create team form wizard')
-            current_step = 0
-            try:
-                del request.session[self.session_key]
-            except KeyError:
-                pass
-        else:
-            current_step = int(request.POST.get('step', 0))
-
-        last_step = len(self.steps) - 1
-
-        if current_step > last_step:
-            logging.debug('Invalid step passed; resetting create team form wizard')
-            return self.render_validation_error(request, organization)
-
-        op = request.POST.get('op')
-        if op != 'continue':
-            data = None
-        else:
-            data = request.POST or None
-
-        form = self.get_step_form(current_step, data)
-        if op == 'continue' and form.is_valid():
-            session_data['step%d' % current_step] = form.cleaned_data
-            request.session[self.session_key] = session_data
-            if current_step == last_step:
-                # no more steps, render done view
-                return self.render_done(request, organization, form)
-            else:
-                # proceed to the next step
-                return self.render_next_step(request, organization, current_step + 1)
-
-        elif op == 'back' and current_step > 0:
-            return self.render_next_step(request, organization, current_step - 1)
-
-        elif op == 'skip' and current_step > 0:
-            session_data['step%d' % current_step] = {}
-            request.session[self.session_key] = session_data
-            if current_step == last_step:
-                # no more steps, render done view
-                return self.render_done(request, organization, form)
-            else:
-                # proceed to the next step
-                return self.render_next_step(request, organization, current_step + 1)
-
-        return self.render(request, organization, current_step, form)
+        form = self.get_form(request)
+        if form.is_valid():
+            team = form.save(request.user, organization, request.META['REMOTE_ADDR'])
 
-    def get_step_form(self, step, data=None, with_prefix=True):
-        if with_prefix:
-            prefix = '%s-%d' % (self.form_prefix, step)
-        else:
-            prefix = None
+            url = '{}?team={}'.format(
+                reverse('sentry-create-project', args=[organization.slug]),
+                team.slug,
+            )
 
-        return self.steps[step].form(
-            data=data,
-            prefix=prefix,
-        )
+            return self.redirect(url)
 
-    def render(self, request, organization, step, form):
-        template = self.steps[step].template
         context = {
-            'current_step': step,
-            'step': step,
             'form': form,
-            'first_step': 0,
         }
-        return self.respond('sentry/%s' % (template,), context)
-
-    def render_next_step(self, request, organization, step):
-        form = self.get_step_form(step)
-        return self.render(request, organization, step, form)
-
-    def render_validation_error(self, request, organization):
-        try:
-            del request.session[self.session_key]
-        except KeyError:
-            pass
-
-        messages.error(request, 'There was an issue validating your input. Please try again.')
-
-        return self.redirect(request.get_full_path())
-
-    def render_done(self, request, organization, last_form):
-        all_forms = []
-        session_data = request.session[self.session_key]
-        last_index = len(self.steps) - 1
-        # revalidate previous steps
-        for index in range(len(self.steps)):
-            if index == last_index:
-                form = last_form
-            else:
-                form = self.get_step_form(
-                    step=index,
-                    data=session_data.get('step%d' % (index,), {}),
-                    with_prefix=False,
-                )
-
-            if self.steps[index].can_skip and not form.data:
-                pass
-            elif not form.is_valid():
-                logging.warning('step %d (%s) did not validate; resetting create team wizard',
-                              index, type(form).__name__)
-                return self.render_validation_error(request, organization)
-
-            all_forms.append(form)
-
-        try:
-            return self.save(request, organization, all_forms)
-        finally:
-            del request.session[self.session_key]
-
-    def save(self, request, organization, all_forms):
-        team = all_forms[0].save(request.user, organization, request.META['REMOTE_ADDR'])
-
-        if all_forms[1].is_valid():
-            project = all_forms[1].save(request.user, team, request.META['REMOTE_ADDR'])
-
-            url = reverse('sentry-stream', args=[organization.slug, project.slug]) + '?newinstall=1'
-        else:
-            messages.success(request, 'Your new team was created successfully.')
-
-            url = reverse('sentry-organization-home', args=[organization.slug])
 
-        return self.redirect(url)
+        return self.respond('sentry/create-team.html', context)
diff --git a/tests/sentry/web/frontend/test_create_team.py b/tests/sentry/web/frontend/test_create_team.py
index 7728441767..3907ce30e6 100644
--- a/tests/sentry/web/frontend/test_create_team.py
+++ b/tests/sentry/web/frontend/test_create_team.py
@@ -2,9 +2,8 @@ from __future__ import absolute_import
 
 from django.core.urlresolvers import reverse
 
-from sentry.models import Project, Team
+from sentry.models import Team
 from sentry.testutils import TestCase, PermissionTestCase
-from sentry.web.frontend.create_team import AddTeamForm, AddProjectForm
 
 
 class CreateTeamPermissionTest(PermissionTestCase):
@@ -26,104 +25,28 @@ class CreateTeamPermissionTest(PermissionTestCase):
 
 
 class CreateTeamTest(TestCase):
-    def test_step_0_renders(self):
+    def test_renders_with_context(self):
         organization = self.create_organization()
+        team = self.create_team(organization=organization)
         path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.get(path)
         assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-team-step-team.html')
+        self.assertTemplateUsed(resp, 'sentry/create-team.html')
         assert resp.context['organization'] == organization
-        assert resp.context['step'] == 0
         assert resp.context['form']
-        assert type(resp.context['form']) == AddTeamForm
 
-    def test_step_0_valid_params(self):
+    def test_submission(self):
         organization = self.create_organization()
         path = reverse('sentry-create-team', args=[organization.slug])
         self.login_as(self.user)
         resp = self.client.post(path, {
-            'op': 'continue',
-            'step': '0',
-            'ctwizard-0-name': 'bar',
+            'name': 'bar',
         })
-        assert resp.status_code == 200
-        assert resp.context['step'] == 1, resp.context['form'].errors
-
-    def test_step_1_renders(self):
-        organization = self.create_organization()
-
-        path = reverse('sentry-create-team', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        self.session['ctwizard'] = {
-            'step0': {'name': 'bar'},
-        }
-        self.save_session()
-
-        resp = self.client.post(path, {'step': '1'})
-
-        assert resp.status_code == 200
-        self.assertTemplateUsed(resp, 'sentry/create-team-step-project.html')
-        assert resp.context['organization'] == organization
-        assert resp.context['step'] == 1
-        assert resp.context['form']
-        assert type(resp.context['form']) == AddProjectForm
-
-    def test_step_1_valid_params(self):
-        organization = self.create_organization()
-
-        path = reverse('sentry-create-team', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        self.session['ctwizard'] = {
-            'step0': {'name': 'bar'},
-        }
-        self.save_session()
-
-        resp = self.client.post(path, {
-            'op': 'continue',
-            'step': '1',
-            'ctwizard-1-name': 'bar',
-        })
-        assert resp.status_code == 302
-
-        team = Team.objects.get(organization=organization)
-
-        assert team.name == 'bar'
-
-        project = Project.objects.get(team=team)
-
-        assert project.name == 'bar'
-
-        redirect_uri = reverse('sentry-stream', args=[organization.slug, project.slug])
-
-        assert resp['Location'] == 'http://testserver%s?newinstall=1' % (redirect_uri,)
-
-    def test_step_1_skip(self):
-        organization = self.create_organization()
-
-        path = reverse('sentry-create-team', args=[organization.slug])
-
-        self.login_as(self.user)
-
-        self.session['ctwizard'] = {
-            'step0': {'name': 'bar'},
-        }
-        self.save_session()
-
-        resp = self.client.post(path, {
-            'op': 'skip',
-            'step': '1',
-        })
-        assert resp.status_code == 302
-
-        team = Team.objects.get(organization=organization)
-
-        assert team.name == 'bar'
+        assert resp.status_code == 302, resp.context['form'].errors
 
-        redirect_uri = reverse('sentry-organization-home', args=[organization.slug])
+        team = Team.objects.get(organization=organization, name='bar')
 
-        assert resp['Location'] == 'http://testserver%s' % (redirect_uri,)
+        redirect_uri = reverse('sentry-create-project', args=[organization.slug])
+        assert resp['Location'] == 'http://testserver%s?team=%s' % (
+            redirect_uri, team.slug)
