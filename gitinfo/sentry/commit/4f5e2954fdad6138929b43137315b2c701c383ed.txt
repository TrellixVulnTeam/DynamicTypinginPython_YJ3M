commit 4f5e2954fdad6138929b43137315b2c701c383ed
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Thu Sep 13 12:00:20 2018 -0700

    feat(discover): Support relative time ranges in Discover API (#9724)
    
    We want to support relative date ranges (e.g. 1s, 2m, 3h, 4d) as well as absolute datetimes in the discover API

diff --git a/src/sentry/api/endpoints/organization_discover.py b/src/sentry/api/endpoints/organization_discover.py
index 1cbc47ed9a..9c822462e7 100644
--- a/src/sentry/api/endpoints/organization_discover.py
+++ b/src/sentry/api/endpoints/organization_discover.py
@@ -1,12 +1,17 @@
 from __future__ import absolute_import
 
 import re
-
 import six
 
+from django.utils import timezone
 from rest_framework import serializers
 from rest_framework.response import Response
 from rest_framework.exceptions import PermissionDenied
+
+from sentry.utils.dates import (
+    parse_stats_period,
+)
+
 from sentry.api.serializers.rest_framework import ListField
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.bases import OrganizationEndpoint
@@ -28,8 +33,9 @@ class DiscoverSerializer(serializers.Serializer):
         required=True,
         allow_null=False,
     )
-    start = serializers.DateTimeField(required=True)
-    end = serializers.DateTimeField(required=True)
+    start = serializers.DateTimeField(required=False)
+    end = serializers.DateTimeField(required=False)
+    range = serializers.CharField(required=False)
     fields = ListField(
         child=serializers.CharField(),
         required=False,
@@ -60,7 +66,9 @@ class DiscoverSerializer(serializers.Serializer):
         self.member = OrganizationMember.objects.get(
             user=self.context['user'], organization=self.context['organization'])
 
-        fields = kwargs['data'].get('fields') or []
+        data = kwargs['data']
+
+        fields = data.get('fields') or []
 
         match = next(
             (
@@ -75,8 +83,29 @@ class DiscoverSerializer(serializers.Serializer):
 
     def validate(self, data):
         data['arrayjoin'] = self.arrayjoin
+
         return data
 
+    def validate_range(self, attrs, source):
+        has_start = bool(attrs.get('start'))
+        has_end = bool(attrs.get('end'))
+        has_range = bool(attrs.get('range'))
+
+        if has_start != has_end or has_range == has_start:
+            raise serializers.ValidationError('Either start and end dates or range is required')
+
+        # Populate start and end if only range is provided
+        if (attrs.get(source)):
+            delta = parse_stats_period(attrs[source])
+
+            if (delta is None):
+                raise serializers.ValidationError('Invalid range')
+
+            attrs['start'] = timezone.now() - delta
+            attrs['end'] = timezone.now()
+
+        return attrs
+
     def validate_projects(self, attrs, source):
         organization = self.context['organization']
         member = self.member
diff --git a/src/sentry/utils/dates.py b/src/sentry/utils/dates.py
index d00bdcb5df..11f588a74b 100644
--- a/src/sentry/utils/dates.py
+++ b/src/sentry/utils/dates.py
@@ -8,6 +8,7 @@ sentry.utils.dates
 from __future__ import absolute_import
 
 import six
+import re
 
 from datetime import (
     datetime,
@@ -115,3 +116,20 @@ def parse_timestamp(value):
         except ValueError:
             rv = None
     return rv.replace(tzinfo=pytz.utc)
+
+
+def parse_stats_period(period):
+    """
+    Convert a value such as 1h into a
+    proper timedelta.
+    """
+    m = re.match('^(\d+)([hdms]?)$', period)
+    if not m:
+        return None
+    value, unit = m.groups()
+    value = int(value)
+    if not unit:
+        unit = 's'
+    return timedelta(**{
+        {'h': 'hours', 'd': 'days', 'm': 'minutes', 's': 'seconds'}[unit]: value,
+    })
diff --git a/tests/sentry/utils/test_dates.py b/tests/sentry/utils/test_dates.py
index a0bd8c2f50..e03771b08a 100644
--- a/tests/sentry/utils/test_dates.py
+++ b/tests/sentry/utils/test_dates.py
@@ -6,6 +6,7 @@ import pytz
 from sentry.utils.dates import (
     to_datetime,
     to_timestamp,
+    parse_stats_period,
 )
 
 
@@ -13,3 +14,12 @@ def test_timestamp_conversions():
     value = datetime.datetime(2015, 10, 1, 21, 19, 5, 648517, tzinfo=pytz.utc)
     assert int(to_timestamp(value)) == int(value.strftime('%s'))
     assert to_datetime(to_timestamp(value)) == value
+
+
+def test_parse_stats_period():
+    assert parse_stats_period('3s') == datetime.timedelta(seconds=3)
+    assert parse_stats_period('30m') == datetime.timedelta(minutes=30)
+    assert parse_stats_period('1h') == datetime.timedelta(hours=1)
+    assert parse_stats_period('20d') == datetime.timedelta(days=20)
+    assert parse_stats_period('20f') is None
+    assert parse_stats_period('-1s') is None
diff --git a/tests/snuba/test_organization_discover.py b/tests/snuba/test_organization_discover.py
index 760cc6fd89..6acfbc590b 100644
--- a/tests/snuba/test_organization_discover.py
+++ b/tests/snuba/test_organization_discover.py
@@ -13,7 +13,7 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
     def setUp(self):
         super(OrganizationDiscoverTest, self).setUp()
 
-        now = datetime.now()
+        one_second_ago = datetime.now() - timedelta(seconds=1)
 
         self.login_as(user=self.user)
 
@@ -30,9 +30,9 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
             'project_id': self.project.id,
             'message': 'message!',
             'platform': 'python',
-            'datetime': now.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
+            'datetime': one_second_ago.strftime('%Y-%m-%dT%H:%M:%S.%fZ'),
             'data': {
-                'received': time.mktime(now.timetuple()),
+                'received': time.mktime(one_second_ago.timetuple()),
                 'exception': {
                     'values': [
                         {
@@ -69,7 +69,22 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
                 'projects': [self.project.id],
                 'fields': ['message', 'platform'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
-                'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
+                'orderby': '-timestamp',
+            })
+
+        assert response.status_code == 200, response.content
+        assert len(response.data['data']) == 1
+        assert response.data['data'][0]['message'] == 'message!'
+        assert response.data['data'][0]['platform'] == 'python'
+
+    def test_relative_dates(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['message', 'platform'],
+                'range': '1d',
                 'orderby': '-timestamp',
             })
 
@@ -78,6 +93,32 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
         assert response.data['data'][0]['message'] == 'message!'
         assert response.data['data'][0]['platform'] == 'python'
 
+    def test_invalid_date_request(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['message', 'platform'],
+                'range': '1d',
+                'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
+                'orderby': '-timestamp',
+            })
+
+        assert response.status_code == 400, response.content
+
+    def test_invalid_range_value(self):
+        with self.feature('organizations:discover'):
+            url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
+            response = self.client.post(url, {
+                'projects': [self.project.id],
+                'fields': ['message', 'platform'],
+                'range': '1x',
+                'orderby': '-timestamp',
+            })
+
+        assert response.status_code == 400, response.content
+
     def test_boolean_condition(self):
         with self.feature('organizations:discover'):
             url = reverse('sentry-api-0-organization-discover', args=[self.org.slug])
@@ -86,7 +127,7 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
                 'fields': ['message', 'platform', 'exception_frames.in_app'],
                 'conditions': [['exception_frames.in_app', '=', True]],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
-                'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
             })
 
@@ -117,7 +158,7 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
                 'conditions': [['exception_stacks.type', '=', 'ValidationError']],
                 'fields': ['message'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
-                'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
             })
         assert response.status_code == 200, response.content
@@ -131,7 +172,7 @@ class OrganizationDiscoverTest(APITestCase, SnubaTestCase):
                 'conditions': [['exception_stacks.type', '!=', 'ValidationError']],
                 'fields': ['message'],
                 'start': (datetime.now() - timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
-                'end': (datetime.now() + timedelta(seconds=10)).strftime('%Y-%m-%dT%H:%M:%S'),
+                'end': (datetime.now()).strftime('%Y-%m-%dT%H:%M:%S'),
                 'orderby': '-timestamp',
             })
 
