commit 9a63e2e3b77a5418e3bf748114215d671d7bb81f
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Nov 9 13:30:53 2016 -0800

    add editing/not editing state to PasswordField component (#4492)
    
    * make secret fields indicate more obviously that a saved value exists
    
    * style tweaks
    
    * remove inline styles
    
    * changes
    
    * make sure has_saved_value is a bool
    
    * consistently show 20 characters

diff --git a/CHANGES b/CHANGES
index 25ab88d454..025d80e897 100644
--- a/CHANGES
+++ b/CHANGES
@@ -4,6 +4,7 @@ Version 8.11 (Unreleased)
 - Ignore a ``null`` ``Origin`` header for authentication.
 - Added the ability to search for issues that you are subscribed to from the stream view.
 - Added the ability to search issues by their last seen timestamp.
+- Improved UI for password and API key fields used in integrations
 
 Version 8.10
 ------------
diff --git a/src/sentry/api/serializers/models/plugin.py b/src/sentry/api/serializers/models/plugin.py
index 70a520b78b..3603eb16b5 100644
--- a/src/sentry/api/serializers/models/plugin.py
+++ b/src/sentry/api/serializers/models/plugin.py
@@ -61,5 +61,8 @@ def serialize_field(project, plugin, field):
     }
     if field.get('type') != 'secret':
         data['value'] = plugin.get_option(field['name'], project)
+    else:
+        data['has_saved_value'] = bool(field.get('has_saved_value', False))
+        data['prefix'] = field.get('prefix', '')
 
     return data
diff --git a/src/sentry/plugins/config.py b/src/sentry/plugins/config.py
index 884fbdcbc9..3b27b3063b 100644
--- a/src/sentry/plugins/config.py
+++ b/src/sentry/plugins/config.py
@@ -57,8 +57,11 @@ class PluginConfigMixin(object):
                 # TODO(dcramer): probably should do something with default
                 # validations here, though many things will end up bring string
                 # based
-                if not value and config.get('required'):
-                    raise PluginError('Field is required')
+                if not value:
+                    if config.get('required'):
+                        raise PluginError('Field is required')
+                    if config.get('type') == 'secret':
+                        value = self.get_option(name, project)
 
             for validator in DEFAULT_VALIDATORS.get(config['type'], ()):
                 value = validator(project=project, value=value, actor=actor)
diff --git a/src/sentry/static/sentry/app/components/forms/passwordField.jsx b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
index adab7f5d85..2a95e2ffaa 100644
--- a/src/sentry/static/sentry/app/components/forms/passwordField.jsx
+++ b/src/sentry/static/sentry/app/components/forms/passwordField.jsx
@@ -1,7 +1,68 @@
+import React from 'react';
 import InputField from './inputField';
 
-export default class PasswordField extends InputField {
+class PasswordField extends InputField {
+  constructor(props) {
+    super(props);
+
+    this.startEdit = this.startEdit.bind(this);
+    this.cancelEdit = this.cancelEdit.bind(this);
+
+    this.state.editing = false;
+  }
+
   getType() {
     return 'password';
   }
+
+  cancelEdit(ev) {
+    ev.preventDefault();
+    this.setState({
+      value: '',
+      editing: false
+    }, () => {
+      this.props.onChange('');
+    });
+  }
+
+  startEdit(ev) {
+    ev.preventDefault();
+    this.setState({
+      editing: true
+    });
+  }
+
+  getField() {
+    if (!this.props.has_saved_value) {
+      return super.getField();
+    }
+
+    if (this.state.editing) {
+      return (
+        <div className="form-password editing">
+          <div>
+            {super.getField()}
+          </div>
+          <div>
+            <a href="#" onClick={this.cancelEdit}>Cancel</a>
+          </div>
+        </div>
+      );
+    } else {
+      return (
+        <div className="form-password saved">
+          <span>{this.props.prefix + new Array(21 - this.props.prefix.length).join('*')}</span>
+          {!this.props.disabled &&
+            <a href="#" onClick={this.startEdit}>Edit</a>}
+        </div>
+      );
+    }
+  }
 }
+
+PasswordField.defaultProps = Object.assign({}, InputField.defaultProps, {
+  'has_saved_value': false,
+  'prefix': ''
+});
+
+export default PasswordField;
diff --git a/src/sentry/static/sentry/less/forms.less b/src/sentry/static/sentry/less/forms.less
index 7d5ef4598b..21e1d5464e 100644
--- a/src/sentry/static/sentry/less/forms.less
+++ b/src/sentry/static/sentry/less/forms.less
@@ -129,3 +129,23 @@ textarea.form-control[disabled] {
   margin-left: 5px;
   font-size: 80%;
 }
+
+.form-password {
+  &.editing {
+    div:first-child {
+      width: 85%;
+      display: inline-block;
+    }
+    div:last-child {
+      line-height: 37px;
+      margin-left: 10px;
+      display: inline-block;
+    }
+  }
+
+  &.saved {
+    a {
+      margin-left: 10px;
+    }
+  }
+}
