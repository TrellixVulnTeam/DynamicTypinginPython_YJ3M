commit ef6bdbcb195a35a9b243b2b4e8c9180a1b6a827c
Author: Stephen Cefali <scefali@sentry.io>
Date:   Tue Mar 24 08:27:45 2020 -0700

    feat(integration-platform): adds dependent UI fields (#17774)

diff --git a/src/sentry/api/endpoints/sentry_app_installation_external_requests.py b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
index e9636822af..671cb38322 100644
--- a/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
+++ b/src/sentry/api/endpoints/sentry_app_installation_external_requests.py
@@ -20,6 +20,7 @@ class SentryAppInstallationExternalRequestsEndpoint(SentryAppInstallationBaseEnd
             "install": installation,
             "uri": request.GET.get("uri"),
             "query": request.GET.get("query"),
+            "dependent_data": request.GET.get("dependentData"),
         }
 
         if project:
diff --git a/src/sentry/api/validators/sentry_apps/schema.py b/src/sentry/api/validators/sentry_apps/schema.py
index 8947c7db43..755572def8 100644
--- a/src/sentry/api/validators/sentry_apps/schema.py
+++ b/src/sentry/api/validators/sentry_apps/schema.py
@@ -45,6 +45,7 @@ SCHEMA = {
                 "name": {"type": "string"},
                 "uri": {"$ref": "#/definitions/uri"},
                 "options": {"$ref": "#/definitions/options"},
+                "depends_on": {"type": "array", "minItems": 1, "items": {"type": "string"}},
             },
             "required": ["type", "name", "label"],
             "oneOf": [{"required": ["uri"]}, {"required": ["options"]}],
diff --git a/src/sentry/mediators/external_requests/select_requester.py b/src/sentry/mediators/external_requests/select_requester.py
index 804d09d8dc..a331194bd1 100644
--- a/src/sentry/mediators/external_requests/select_requester.py
+++ b/src/sentry/mediators/external_requests/select_requester.py
@@ -29,6 +29,7 @@ class SelectRequester(Mediator):
     project = Param("sentry.models.Project", required=False)
     uri = Param(six.string_types)
     query = Param(six.string_types, required=False)
+    dependent_data = Param(six.string_types, required=False)
 
     def call(self):
         return self._make_request()
@@ -45,6 +46,9 @@ class SelectRequester(Mediator):
         if self.query:
             query["query"] = self.query
 
+        if self.dependent_data:
+            query["dependentData"] = self.dependent_data
+
         urlparts[4] = urlencode(query)
         return urlunparse(urlparts)
 
diff --git a/src/sentry/static/sentry/app/components/forms/selectControl.jsx b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
index 7a325b63bc..a3b739260f 100644
--- a/src/sentry/static/sentry/app/components/forms/selectControl.jsx
+++ b/src/sentry/static/sentry/app/components/forms/selectControl.jsx
@@ -176,8 +176,12 @@ const SelectControl = props => {
   let mappedValue = value;
 
   if (choicesOrOptions) {
-    // Value is expected to be object like the options list, we map it back from
-    // the options list
+    /**
+     * Value is expected to be object like the options list, we map it back from the options list.
+     * Note that if the component doesn't have options or choices passed in
+     * because the select component fetches the options finding the mappedValue will fail
+     * and the component won't work
+     */
     mappedValue =
       props.multiple && Array.isArray(value)
         ? value.map(val => choicesOrOptions.find(option => option.value === val))
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
index 3e63da6560..536371dcfa 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueActions.tsx
@@ -161,6 +161,7 @@ class SentryAppExternalIssueActions extends React.Component<Props, State> {
     const {sentryAppComponent, sentryAppInstallation, group} = this.props;
     const {action, showModal} = this.state;
     const name = sentryAppComponent.sentryApp.name;
+    const config = sentryAppComponent.schema[action];
 
     return (
       <Modal show={showModal} onHide={this.hideModal} animation={false}>
@@ -180,7 +181,7 @@ class SentryAppExternalIssueActions extends React.Component<Props, State> {
             group={group}
             sentryAppInstallation={sentryAppInstallation}
             appName={name}
-            config={sentryAppComponent.schema}
+            config={config}
             action={action}
             onSubmitSuccess={this.onSubmitSuccess}
             event={this.props.event}
diff --git a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
index cdc0a33374..2ebcf00922 100644
--- a/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
+++ b/src/sentry/static/sentry/app/components/group/sentryAppExternalIssueForm.tsx
@@ -13,22 +13,40 @@ import getStacktraceBody from 'app/utils/getStacktraceBody';
 import withApi from 'app/utils/withApi';
 import {Client} from 'app/api';
 import {Group, PlatformExternalIssue, Event, SentryAppInstallation} from 'app/types';
-import {Field} from 'app/views/settings/components/forms/type';
+import {Field, FieldValue} from 'app/views/settings/components/forms/type';
+import FormModel from 'app/views/settings/components/forms/model';
+import {replaceAtArrayIndex} from 'app/utils/replaceAtArrayIndex';
+
+//0 is a valid choice but empty string, undefined, and null are not
+const hasValue = value => !!value || value === 0;
+
+type FieldFromSchema = Field & {
+  default?: string;
+  uri?: string;
+  depends_on?: string[];
+};
+
+type Config = {
+  uri: string;
+  required_fields?: FieldFromSchema[];
+  optional_fields?: FieldFromSchema[];
+};
+
+//only need required_fields and optional_fields
+type State = Omit<Config, 'uri'>;
 
 type Props = {
   api: Client;
   group: Group;
   sentryAppInstallation: SentryAppInstallation;
   appName: string;
-  config: object;
+  config: Config;
   action: 'create' | 'link';
   event: Event;
   onSubmitSuccess: (externalIssue: PlatformExternalIssue) => void;
 };
 
-//TODO(TS): Improve typings on Field so we can use the type in functions without errors
-
-export class SentryAppExternalIssueForm extends React.Component<Props> {
+export class SentryAppExternalIssueForm extends React.Component<Props, State> {
   static propTypes: any = {
     api: PropTypes.object.isRequired,
     group: SentryTypes.Group.isRequired,
@@ -39,6 +57,35 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
     event: SentryTypes.Event,
     onSubmitSuccess: PropTypes.func,
   };
+  state: State = {};
+
+  componentDidMount() {
+    this.resetStateFromProps();
+  }
+
+  componentDidUpdate(prevProps: Props) {
+    if (prevProps.action !== this.props.action) {
+      this.model.reset();
+      this.resetStateFromProps();
+    }
+  }
+
+  model = new FormModel();
+
+  //reset the state when we mount or the action changes
+  resetStateFromProps() {
+    const {config, action, group} = this.props;
+    this.setState({
+      required_fields: config.required_fields,
+      optional_fields: config.optional_fields,
+    });
+    //we need to pass these fields in the API so just set them as values so we don't need hidden form fields
+    this.model.setInitialData({
+      action,
+      groupId: group.id,
+      uri: config.uri,
+    });
+  }
 
   onSubmitSuccess = (issue: PlatformExternalIssue) => {
     ExternalIssueStore.add(issue);
@@ -58,28 +105,43 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
   debouncedOptionLoad = debounce(
     // debounce is used to prevent making a request for every input change and
     // instead makes the requests every 200ms
-    (field, input, resolve) => {
-      const install = this.props.sentryAppInstallation;
-      const projectId = this.props.group.project.id;
-
-      this.props.api
-        .requestPromise(`/sentry-app-installations/${install.uuid}/external-requests/`, {
-          query: {
-            projectId,
-            uri: field.uri,
-            query: input,
-          },
-        })
-        .then(data => {
-          const options = (data.choices || []).map(([value, label]) => ({value, label}));
-          return resolve({options});
-        });
+    async (field: FieldFromSchema, input, resolve) => {
+      const choices = await this.makeExternalRequest(field, input);
+      const options = choices.map(([value, label]) => ({value, label}));
+      return resolve({options});
     },
     200,
     {trailing: true}
   );
 
-  fieldProps = field =>
+  makeExternalRequest = async (field: FieldFromSchema, input: FieldValue) => {
+    const install = this.props.sentryAppInstallation;
+    const projectId = this.props.group.project.id;
+    const query: {[key: string]: any} = {
+      projectId,
+      uri: field.uri,
+      query: input,
+    };
+
+    if (field.depends_on) {
+      const dependentData = field.depends_on.reduce((accum, dependentField: string) => {
+        accum[dependentField] = this.model.getValue(dependentField);
+        return accum;
+      }, {});
+      //stringify the data
+      query.dependentData = JSON.stringify(dependentData);
+    }
+
+    const {choices} = await this.props.api.requestPromise(
+      `/sentry-app-installations/${install.uuid}/external-requests/`,
+      {
+        query,
+      }
+    );
+    return choices || [];
+  };
+
+  fieldProps = (field: FieldFromSchema) =>
     field.uri
       ? {
           loadOptions: (input: string) => this.getOptions(field, input),
@@ -103,7 +165,7 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
     }
   }
 
-  getFieldDefault(field) {
+  getFieldDefault(field: FieldFromSchema) {
     const {group, appName} = this.props;
     if (field.type === 'textarea') {
       field.maxRows = 10;
@@ -123,29 +185,96 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
     }
   }
 
+  /**
+   * This function determines which fields need to be reset and new options fetched
+   * based on the dependencies defined with the depends_on attribute.
+   * This is done because the autoload flag causes fields to load at different times
+   * if you have multiple dependent fields while this solution updates state at once.
+   */
+  handleFieldChange = async (id: string) => {
+    const config = this.state;
+
+    let requiredFields = config.required_fields || [];
+    let optionalFields = config.optional_fields || [];
+
+    const fieldList: FieldFromSchema[] = requiredFields.concat(optionalFields);
+
+    //could have multiple impacted fields
+    const impactedFields = fieldList.filter(({depends_on}) => {
+      if (!depends_on) {
+        return false;
+      }
+      // must be dependent on the field we just set
+      return depends_on.includes(id);
+    });
+
+    //load all options in parallel
+    const choiceArray = await Promise.all(
+      impactedFields.map(field => {
+        //reset all impacted fields first
+        this.model.setValue(field.name || '', '', {quiet: true});
+        return this.makeExternalRequest(field, '');
+      })
+    );
+
+    this.setState(state => {
+      //pull the field lists from latest state
+      requiredFields = state.required_fields || [];
+      optionalFields = state.optional_fields || [];
+      //iterate through all the impacted fields and get new values
+      impactedFields.forEach((impactedField, i) => {
+        const choices = choiceArray[i];
+        const requiredIndex = requiredFields.indexOf(impactedField);
+        const optionalIndex = optionalFields.indexOf(impactedField);
+
+        const updatedField = {...impactedField, choices};
+
+        //immutably update the lists with the updated field depending where we got it from
+        if (requiredIndex > -1) {
+          requiredFields = replaceAtArrayIndex(
+            requiredFields,
+            requiredIndex,
+            updatedField
+          );
+        } else if (optionalIndex > -1) {
+          optionalFields = replaceAtArrayIndex(
+            optionalFields,
+            optionalIndex,
+            updatedField
+          );
+        }
+      });
+      return {
+        required_fields: requiredFields,
+        optional_fields: optionalFields,
+      };
+    });
+  };
+
+  renderField = (field: FieldFromSchema) => {
+    if (['text', 'textarea'].includes(field.type) && field.default) {
+      field = {...field, defaultValue: this.getFieldDefault(field)};
+    }
+
+    if (field.depends_on) {
+      //check if this is dependent on other fields which haven't been set yet
+      const shouldDisable = field.depends_on.some(
+        dependentField => !hasValue(this.model.getValue(dependentField))
+      );
+      if (shouldDisable) {
+        field = {...field, disabled: true};
+      }
+    }
+
+    //Note that upgrading this to work with the new react select will be quite a challenge!
+    return <FieldFromConfig key={field.name} field={field} {...this.fieldProps(field)} />;
+  };
+
   render() {
     const {sentryAppInstallation, action} = this.props;
-    const config = this.props.config[action];
 
-    const requiredFields = config.required_fields || [];
-    const optionalFields = config.optional_fields || [];
-    const metaFields: Field[] = [
-      {
-        type: 'hidden',
-        name: 'action',
-        defaultValue: action,
-      },
-      {
-        type: 'hidden',
-        name: 'groupId',
-        defaultValue: this.props.group.id,
-      },
-      {
-        type: 'hidden',
-        name: 'uri',
-        defaultValue: config.uri,
-      },
-    ];
+    const requiredFields = this.state.required_fields || [];
+    const optionalFields = this.state.optional_fields || [];
 
     if (!sentryAppInstallation) {
       return '';
@@ -158,12 +287,11 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
         apiMethod="POST"
         onSubmitSuccess={this.onSubmitSuccess}
         onSubmitError={this.onSubmitError}
+        onFieldChange={this.handleFieldChange}
+        model={this.model}
       >
-        {metaFields.map(field => (
-          <FieldFromConfig key={field.name} field={field} />
-        ))}
-
-        {requiredFields.map(field => {
+        {requiredFields.map((field: FieldFromSchema) => {
+          //TODO(TS): Object.assign causing type checks to not correctly run on the params being passed
           field = Object.assign({}, field, {
             choices: field.choices || [],
             inline: false,
@@ -172,20 +300,11 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
             required: true,
           });
 
-          if (['text', 'textarea'].includes(field.type) && field.default) {
-            field.defaultValue = this.getFieldDefault(field);
-          }
-
-          return (
-            <FieldFromConfig
-              key={`${field.name}`}
-              field={field}
-              {...this.fieldProps(field)}
-            />
-          );
+          return this.renderField(field);
         })}
 
-        {optionalFields.map(field => {
+        {optionalFields.map((field: FieldFromSchema) => {
+          //TODO(TS): Object.assign causing type checks to not correctly run on the params being passed
           field = Object.assign({}, field, {
             choices: field.choices || [],
             inline: false,
@@ -193,17 +312,7 @@ export class SentryAppExternalIssueForm extends React.Component<Props> {
             flexibleControlStateSize: true,
           });
 
-          if (['text', 'textarea'].includes(field.type) && field.default) {
-            field.defaultValue = this.getFieldDefault(field);
-          }
-
-          return (
-            <FieldFromConfig
-              key={`${field.name}`}
-              field={field}
-              {...this.fieldProps(field)}
-            />
-          );
+          return this.renderField(field);
         })}
       </Form>
     );
diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index ff988273e3..bd44188e10 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -854,7 +854,7 @@ export type MemberRole = {
 export type SentryAppComponent = {
   uuid: string;
   type: 'issue-link' | 'alert-rule-action' | 'issue-media' | 'stacktrace-link';
-  schema: object;
+  schema: SentryAppSchemaIssueLink;
   sentryApp: {
     uuid: string;
     slug: string;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
index f5b89e3d1c..bda2cc3f0b 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/model.tsx
@@ -73,7 +73,7 @@ class FormModel {
    */
   initialData = {};
 
-  api: Client | null;
+  api: Client;
 
   formErrors: any;
 
@@ -92,8 +92,7 @@ class FormModel {
    * Reset state of model
    */
   reset() {
-    this.api && this.api.clear();
-    this.api = null;
+    this.api.clear();
     this.fieldDescriptor.clear();
     this.resetForm();
   }
@@ -283,22 +282,22 @@ class FormModel {
     const endpoint = apiEndpoint || this.options.apiEndpoint || '';
     const method = apiMethod || this.options.apiMethod;
 
-    return new Promise((resolve, reject) => {
-      //should never happen but TS complains if we don't check
-      if (!this.api) {
-        return reject(new Error('Api not set'));
-      }
-      return this.api.request(endpoint, {
+    return new Promise((resolve, reject) =>
+      this.api.request(endpoint, {
         method,
         data,
         success: response => resolve(response),
         error: error => reject(error),
-      });
-    });
+      })
+    );
   }
 
+  /**
+   * Set the value of the form field
+   * if quiet is true, we skip callbacks, validations
+   */
   @action
-  setValue(id: string, value: FieldValue) {
+  setValue(id: string, value: FieldValue, {quiet}: {quiet?: boolean} = {}) {
     const fieldDescriptor = this.fieldDescriptor.get(id);
     let finalValue = value;
 
@@ -307,6 +306,9 @@ class FormModel {
     }
 
     this.fields.set(id, finalValue);
+    if (quiet) {
+      return;
+    }
 
     if (this.options.onFieldChange) {
       this.options.onFieldChange(id, finalValue);
diff --git a/tests/js/sentry-test/fixtures/sentryAppComponent.js b/tests/js/sentry-test/fixtures/sentryAppComponent.js
index ed582ced8c..04c23473bc 100644
--- a/tests/js/sentry-test/fixtures/sentryAppComponent.js
+++ b/tests/js/sentry-test/fixtures/sentryAppComponent.js
@@ -47,3 +47,113 @@ export function SentryAppComponent(params = {}) {
     ...params,
   };
 }
+export function SentryAppComponentAsync(params = {}) {
+  return {
+    uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
+    type: 'issue-link',
+    schema: {
+      create: {
+        required_fields: [
+          {
+            type: 'select',
+            name: 'numbers',
+            label: 'Numbers',
+            uri: '/sentry/numbers',
+            url: '/sentry/numbers',
+            async: true,
+          },
+        ],
+      },
+      link: {
+        required_fields: [
+          {
+            type: 'text',
+            name: 'issue',
+            label: 'Issue',
+          },
+        ],
+      },
+    },
+    sentryApp: {
+      uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
+      slug: 'foo',
+      name: 'Foo',
+    },
+    ...params,
+  };
+}
+
+export function SentryAppComponentDependent(params = {}) {
+  return {
+    type: 'issue-link',
+    uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
+    schema: {
+      link: {
+        required_fields: [
+          {
+            choices: [
+              ['A', 'project A'],
+              ['B', 'project B'],
+              ['C', 'project C'],
+            ],
+            type: 'select',
+            uri: '/integrations/sentry/projects',
+            name: 'project_id',
+            label: 'Project',
+          },
+          {
+            depends_on: ['project_id'],
+            name: 'board_id',
+            choices: [],
+            type: 'select',
+            uri: '/integrations/sentry/boards',
+            label: 'Board',
+          },
+        ],
+        uri: '/integrations/sentry/issues/link',
+      },
+      create: {
+        required_fields: [
+          {
+            default: 'issue.title',
+            type: 'text',
+            name: 'title',
+            label: 'Title',
+          },
+          {
+            default: 'issue.description',
+            type: 'textarea',
+            name: 'description',
+            label: 'Description',
+          },
+          {
+            choices: [
+              ['A', 'project A'],
+              ['B', 'project B'],
+            ],
+            type: 'select',
+            uri: '/integrations/sentry/projects',
+            name: 'project_id',
+            label: 'Project',
+          },
+          {
+            depends_on: ['project_id'],
+            name: 'board_id',
+            choices: [],
+            type: 'select',
+            uri: '/integrations/sentry/boards',
+            label: 'Board',
+          },
+        ],
+        uri: '/integrations/sentry/issues/create',
+      },
+      type: 'issue-link',
+    },
+    sentryApp: {
+      uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
+      slug: 'foo',
+      name: 'Foo',
+    },
+    ...params,
+  };
+}
diff --git a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
index 6041c7c063..824dd00681 100644
--- a/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
+++ b/tests/js/spec/components/group/sentryAppExternalIssueForm.spec.jsx
@@ -4,6 +4,9 @@ import {mountWithTheme} from 'sentry-test/enzyme';
 import {Client} from 'app/api';
 import {addQueryParamsToExistingUrl} from 'app/utils/queryString';
 import SentryAppExternalIssueForm from 'app/components/group/sentryAppExternalIssueForm';
+import {selectByValue} from 'sentry-test/select';
+
+const optionLabelSelector = label => `[aria-label="${label}"]`;
 
 describe('SentryAppExternalIssueForm', () => {
   let wrapper;
@@ -11,6 +14,8 @@ describe('SentryAppExternalIssueForm', () => {
   let sentryApp;
   let sentryAppInstallation;
   let component;
+  let submitUrl;
+  let externalIssueRequst;
 
   beforeEach(() => {
     group = TestStubs.Group({
@@ -21,6 +26,12 @@ describe('SentryAppExternalIssueForm', () => {
     component = TestStubs.SentryAppComponent();
     sentryApp = TestStubs.SentryApp();
     sentryAppInstallation = TestStubs.SentryAppInstallation({sentryApp});
+    submitUrl = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`;
+    externalIssueRequst = Client.addMockResponse({
+      url: submitUrl,
+      method: 'POST',
+      body: {},
+    });
   });
 
   describe('create', () => {
@@ -30,7 +41,7 @@ describe('SentryAppExternalIssueForm', () => {
           group={group}
           sentryAppInstallation={sentryAppInstallation}
           appName={sentryApp.name}
-          config={component.schema}
+          config={component.schema.create}
           action="create"
           api={new Client()}
         />,
@@ -38,34 +49,36 @@ describe('SentryAppExternalIssueForm', () => {
       );
     });
 
-    it('specifies the action', () => {
-      expect(wrapper.find('HiddenField[name="action"]').prop('defaultValue')).toEqual(
-        'create'
-      );
-    });
-
-    it('specifies the group', () => {
-      expect(wrapper.find('HiddenField[name="groupId"]').prop('defaultValue')).toEqual(
-        group.id
-      );
-    });
-
-    it('specifies the uri', () => {
-      expect(wrapper.find('HiddenField[name="uri"]').prop('defaultValue')).toEqual(
-        component.schema.create.uri
-      );
-    });
-
     it('renders each required_fields field', () => {
       component.schema.create.required_fields.forEach(field => {
         expect(wrapper.exists(`#${field.name}`)).toBe(true);
       });
     });
 
+    it('does not submit form if required fields are not set', () => {
+      wrapper.find('form').simulate('submit');
+      expect(externalIssueRequst).not.toHaveBeenCalled();
+    });
+
     it('submits to the New External Issue endpoint', () => {
-      const url = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`;
-      expect(wrapper.find('Form').prop('apiEndpoint')).toEqual(url);
-      expect(wrapper.find('Form').prop('apiMethod')).toEqual('POST');
+      selectByValue(wrapper, 1, {name: 'numbers'});
+
+      wrapper.find('form').simulate('submit');
+
+      expect(externalIssueRequst).toHaveBeenCalledWith(
+        submitUrl,
+        expect.objectContaining({
+          data: {
+            action: 'create',
+            description:
+              'Sentry Issue: [SEN123](https://sentry.io/organizations/sentry/issues/123/?project=1&referrer=Sample%20App)',
+            groupId: '1',
+            numbers: 1,
+            title: 'ApiError: Broken',
+          },
+          method: 'POST',
+        })
+      );
     });
 
     it('renders prepopulated defaults', () => {
@@ -91,7 +104,7 @@ describe('SentryAppExternalIssueForm', () => {
           group={group}
           sentryAppInstallation={sentryAppInstallation}
           appName={sentryApp.name}
-          config={component.schema}
+          config={component.schema.link}
           action="link"
           api={new Client()}
         />,
@@ -99,24 +112,6 @@ describe('SentryAppExternalIssueForm', () => {
       );
     });
 
-    it('specifies the action', () => {
-      expect(wrapper.find('HiddenField[name="action"]').prop('defaultValue')).toEqual(
-        'link'
-      );
-    });
-
-    it('specifies the group', () => {
-      expect(wrapper.find('HiddenField[name="groupId"]').prop('defaultValue')).toEqual(
-        group.id
-      );
-    });
-
-    it('specifies the uri', () => {
-      expect(wrapper.find('HiddenField[name="uri"]').prop('defaultValue')).toEqual(
-        component.schema.link.uri
-      );
-    });
-
     it('renders each required_fields field', () => {
       component.schema.link.required_fields.forEach(field => {
         expect(wrapper.exists(`#${field.name}`)).toBe(true);
@@ -124,9 +119,23 @@ describe('SentryAppExternalIssueForm', () => {
     });
 
     it('submits to the New External Issue endpoint', () => {
-      const url = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-issues/`;
-      expect(wrapper.find('Form').prop('apiEndpoint')).toEqual(url);
-      expect(wrapper.find('Form').prop('apiMethod')).toEqual('POST');
+      wrapper
+        .find('input[name="issue"]')
+        .simulate('change', {target: {value: 'my issue'}});
+
+      wrapper.find('form').simulate('submit');
+
+      expect(externalIssueRequst).toHaveBeenCalledWith(
+        submitUrl,
+        expect.objectContaining({
+          data: {
+            action: 'link',
+            groupId: '1',
+            issue: 'my issue',
+          },
+          method: 'POST',
+        })
+      );
     });
   });
 });
@@ -136,38 +145,7 @@ describe('SentryAppExternalIssueForm Async Field', () => {
   let group;
   let sentryApp;
   let sentryAppInstallation;
-  const component = {
-    uuid: 'ed517da4-a324-44c0-aeea-1894cd9923fb',
-    type: 'issue-link',
-    schema: {
-      create: {
-        required_fields: [
-          {
-            type: 'select',
-            name: 'numbers',
-            label: 'Numbers',
-            uri: '/sentry/numbers',
-            url: '/sentry/numbers',
-            async: true,
-          },
-        ],
-      },
-      link: {
-        required_fields: [
-          {
-            type: 'text',
-            name: 'issue',
-            label: 'Issue',
-          },
-        ],
-      },
-    },
-    sentryApp: {
-      uuid: 'b468fed3-afba-4917-80d6-bdac99c1ec05',
-      slug: 'foo',
-      name: 'Foo',
-    },
-  };
+  const component = TestStubs.SentryAppComponentAsync();
 
   beforeEach(() => {
     group = TestStubs.Group({
@@ -202,7 +180,7 @@ describe('SentryAppExternalIssueForm Async Field', () => {
           group={group}
           sentryAppInstallation={sentryAppInstallation}
           appName={sentryApp.name}
-          config={component.schema}
+          config={component.schema.create}
           action="create"
           api={new Client()}
         />,
@@ -212,10 +190,112 @@ describe('SentryAppExternalIssueForm Async Field', () => {
       await tick();
       wrapper.update();
 
-      const optionLabelSelector = label => `[aria-label="${label}"]`;
-
       expect(wrapper.find(optionLabelSelector('Issue 1')).exists()).toBe(true);
       expect(wrapper.find(optionLabelSelector('Issue 2')).exists()).toBe(true);
     });
   });
 });
+
+describe('SentryAppExternalIssueForm Dependent fields', () => {
+  let wrapper;
+  let group;
+  let sentryApp;
+  let sentryAppInstallation;
+  const component = TestStubs.SentryAppComponentDependent();
+
+  beforeEach(() => {
+    group = TestStubs.Group({
+      title: 'ApiError: Broken',
+      shortId: 'SEN123',
+      permalink: 'https://sentry.io/organizations/sentry/issues/123/?project=1',
+    });
+    sentryApp = TestStubs.SentryApp();
+    sentryAppInstallation = TestStubs.SentryAppInstallation({sentryApp});
+
+    wrapper = mountWithTheme(
+      <SentryAppExternalIssueForm
+        group={group}
+        sentryAppInstallation={sentryAppInstallation}
+        appName={sentryApp.name}
+        config={component.schema.create}
+        action="create"
+        api={new Client()}
+      />,
+      TestStubs.routerContext()
+    );
+  });
+
+  afterEach(() => {
+    Client.clearMockResponses();
+  });
+
+  describe('create', () => {
+    it('load options for field that has dependencies when the dependent option is selected', async () => {
+      const url = `/sentry-app-installations/${sentryAppInstallation.uuid}/external-requests/`;
+      Client.addMockResponse(
+        {
+          method: 'GET',
+          url,
+          body: {
+            choices: [
+              ['A', 'project A'],
+              ['B', 'project B'],
+            ],
+          },
+        },
+        {
+          predicate: (_url, options) => {
+            return options.query.uri === '/integrations/sentry/projects';
+          },
+        }
+      );
+
+      const boardMock = Client.addMockResponse(
+        {
+          method: 'GET',
+          url,
+          body: {
+            choices: [
+              ['R', 'board R'],
+              ['S', 'board S'],
+            ],
+          },
+        },
+        {
+          predicate: (_url, {query}) => {
+            return (
+              query.uri === '/integrations/sentry/boards' &&
+              query.dependentData === JSON.stringify({project_id: 'A'})
+            );
+          },
+        }
+      );
+
+      wrapper.find('input#project_id').simulate('change', {target: {value: 'p'}});
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find(optionLabelSelector('project A')).exists()).toBe(true);
+      expect(wrapper.find(optionLabelSelector('project B')).exists()).toBe(true);
+
+      //project select should be disabled and we shouldn't fetch the options yet
+      expect(wrapper.find('SelectControl#board_id').prop('disabled')).toBe(true);
+      expect(boardMock).not.toHaveBeenCalled();
+
+      //when we set the value for project we should get the values for the board
+      selectByValue(wrapper, 'A', {name: 'project_id'});
+      await tick();
+      wrapper.update();
+
+      expect(boardMock).toHaveBeenCalled();
+      expect(wrapper.find('SelectControl#board_id').prop('disabled')).toBe(false);
+
+      wrapper.find('input#board_id').simulate('change', {target: {value: 'b'}});
+      await tick();
+      wrapper.update();
+
+      expect(wrapper.find(optionLabelSelector('board R')).exists()).toBe(true);
+      expect(wrapper.find(optionLabelSelector('board S')).exists()).toBe(true);
+    });
+  });
+});
diff --git a/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
index 2210094d0d..9203053e14 100644
--- a/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
+++ b/tests/sentry/api/endpoints/test_sentry_app_installation_external_requests.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import
 import responses
 
 from django.core.urlresolvers import reverse
+from django.utils.http import urlencode
 from sentry.testutils import APITestCase
+from sentry.utils import json
 
 
 class SentryAppInstallationExternalRequestsEndpointTest(APITestCase):
@@ -30,12 +32,13 @@ class SentryAppInstallationExternalRequestsEndpointTest(APITestCase):
         options = [{"label": "Project Name", "value": "1234"}]
         responses.add(
             method=responses.GET,
-            url=u"https://example.com/get-projects?projectSlug={}&installationId={}".format(
+            url=u"https://example.com/get-projects?projectSlug={}&installationId={}&query=proj".format(
                 self.project.slug, self.install.uuid
             ),
             json=options,
             status=200,
             content_type="application/json",
+            match_querystring=True,
         )
         url = self.url + u"?projectId={}&uri={}&query={}".format(
             self.project.id, "/get-projects", "proj"
@@ -44,6 +47,35 @@ class SentryAppInstallationExternalRequestsEndpointTest(APITestCase):
         assert response.status_code == 200
         assert response.data == {"choices": [["1234", "Project Name"]]}
 
+    @responses.activate
+    def test_makes_external_request_with_dependent_data(self):
+        self.login_as(user=self.user)
+        options = [{"label": "Project Name", "value": "1234"}]
+        query = {
+            "projectSlug": self.project.slug,
+            "installationId": self.install.uuid,
+            "query": "proj",
+            "dependentData": json.dumps({"org_id": "A"}),
+        }
+        responses.add(
+            method=responses.GET,
+            url=u"https://example.com/get-projects?%s" % urlencode(query),
+            json=options,
+            status=200,
+            content_type="application/json",
+            match_querystring=True,
+        )
+        query = {
+            "projectId": self.project.id,
+            "uri": "/get-projects",
+            "query": "proj",
+            "dependentData": json.dumps({"org_id": "A"}),
+        }
+        url = u"%s?%s" % (self.url, urlencode(query))
+        response = self.client.get(url, format="json")
+        assert response.status_code == 200
+        assert response.data == {"choices": [["1234", "Project Name"]]}
+
     @responses.activate
     def test_external_request_fails(self):
         self.login_as(user=self.user)
