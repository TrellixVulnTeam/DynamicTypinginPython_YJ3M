commit c024020e2f16890098efcfe6726edc32f6a2644f
Author: Jess MacQueen <macqueen@users.noreply.github.com>
Date:   Wed Dec 19 10:22:59 2018 -0800

    fix(deploys): Ensure user default setting is used for deploy notifications (#11091)

diff --git a/src/sentry/plugins/sentry_mail/activity/release.py b/src/sentry/plugins/sentry_mail/activity/release.py
index 0c96e05561..5cb35f7cd5 100644
--- a/src/sentry/plugins/sentry_mail/activity/release.py
+++ b/src/sentry/plugins/sentry_mail/activity/release.py
@@ -5,7 +5,7 @@ from itertools import chain
 
 import six
 
-from django.db.models import Count
+from django.db.models import Count, Q
 
 from sentry.db.models.query import in_iexact
 from sentry.models import (
@@ -111,21 +111,27 @@ class ReleaseActivityEmail(ActivityEmail):
             ).distinct()
         )
 
-        # get all the involved users' settings for deploy-emails
-        options_by_user_id = {
-            uoption.user_id: uoption.value
-            for uoption in UserOption.objects.filter(
-                user__in=users,
-                organization=self.organization,
-                key='deploy-emails',
-            )
-        }
+        # get all the involved users' settings for deploy-emails (user default
+        # saved without org set)
+        user_options = UserOption.objects.filter(
+            Q(organization=self.organization) | Q(organization=None),
+            user__in=users,
+            key='deploy-emails',
+        )
+
+        options_by_user_id = defaultdict(dict)
+        for uoption in user_options:
+            key = 'default' if uoption.organization is None else 'org'
+            options_by_user_id[uoption.user_id][key] = uoption.value
 
         # and couple them with the the users' setting value for deploy-emails
-        users_with_options = [
-            (user, options_by_user_id.get(user.id, UserOptionValue.committed_deploys_only))
-            for user in users
-        ]
+        # prioritize user/org specific, then user default, then product default
+        users_with_options = []
+        for user in users:
+            options = options_by_user_id.get(user.id, {})
+            users_with_options.append(
+                (user, options.get('org', options.get('default', UserOptionValue.committed_deploys_only)))
+            )
 
         # filter down to members which have been seen in the commit log:
         participants_committed = {
diff --git a/tests/sentry/plugins/mail/activity/test_release.py b/tests/sentry/plugins/mail/activity/test_release.py
index 4991fd9a92..fa0635e15d 100644
--- a/tests/sentry/plugins/mail/activity/test_release.py
+++ b/tests/sentry/plugins/mail/activity/test_release.py
@@ -187,6 +187,14 @@ class ReleaseTestCase(TestCase):
             value=UserOptionValue.no_deploys,
         )
 
+        # added to make sure org default above takes precedent
+        UserOption.objects.set_value(
+            user=self.user4,
+            organization=None,
+            key='deploy-emails',
+            value=UserOptionValue.all_deploys,
+        )
+
     def test_simple(self):
         email = ReleaseActivityEmail(
             Activity(
@@ -203,6 +211,7 @@ class ReleaseTestCase(TestCase):
         # user2 committed but isn't in a team associated with the project.
         # user3 is included because they oped into all deploy emails
         # user4 committed but isn't included because they opted out of all deploy emails
+        # for that org -- also tests to make sure org overrides default preference
         # user5 committed with another email address and is still included.
 
         assert len(email.get_participants()) == 3
@@ -300,3 +309,66 @@ class ReleaseTestCase(TestCase):
         sent_email_addresses = {msg.to[0] for msg in mail.outbox}
 
         assert sent_email_addresses == {self.user3.email}
+
+    def test_uses_default(self):
+        user6 = self.create_user()
+        self.create_member(user=user6, organization=self.org, teams=[self.team])
+
+        UserOption.objects.set_value(
+            user=user6,
+            organization=None,
+            key='deploy-emails',
+            value=UserOptionValue.all_deploys,
+        )
+
+        release = Release.objects.create(
+            version='b' * 40,
+            organization_id=self.project.organization_id,
+            date_released=timezone.now(),
+        )
+        release.add_project(self.project)
+        release.add_project(self.project2)
+        deploy = Deploy.objects.create(
+            release=release,
+            organization_id=self.org.id,
+            environment_id=self.environment.id,
+        )
+
+        email = ReleaseActivityEmail(
+            Activity(
+                project=self.project,
+                user=self.user,
+                type=Activity.RELEASE,
+                data={
+                    'version': release.version,
+                    'deploy_id': deploy.id,
+                },
+            )
+        )
+
+        # user3 and user 6 are included because they oped into all deploy emails
+        # (one on an org level, one as their default)
+        assert len(email.get_participants()) == 2
+
+        assert email.get_participants() == {
+            user6: GroupSubscriptionReason.deploy_setting,
+            self.user3: GroupSubscriptionReason.deploy_setting,
+        }
+
+        context = email.get_context()
+        assert context['environment'] == 'production'
+        assert context['repos'] == []
+
+        user_context = email.get_user_context(user6)
+        # make sure this only includes projects user has access to
+        assert len(user_context['projects']) == 1
+        assert user_context['projects'][0][0] == self.project
+
+        with self.tasks():
+            email.send()
+
+        assert len(mail.outbox) == 2
+
+        sent_email_addresses = {msg.to[0] for msg in mail.outbox}
+
+        assert sent_email_addresses == {self.user3.email, user6.email}
