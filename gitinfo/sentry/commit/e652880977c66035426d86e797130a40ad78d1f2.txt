commit e652880977c66035426d86e797130a40ad78d1f2
Author: k-fish <6111995+k-fish@users.noreply.github.com>
Date:   Wed Jun 17 12:39:20 2020 -0700

    ref(ts): Convert dashboard/utils to typescript (#19418)
    
    * ref(ts): Convert dashboard discover utils to typescript
    
    This converts some of the smaller discover-related util files over to typescript.
    
    * Convert getChartComponent as well, switching WIDGET_DISPLAY from a const assertion to an enum
    * Fill out Widget type and move it into top level app/types
    * Convert `utils/getData` as well
    * Convert getDiscoverUrlPathFromDiscoverQuery to typescript
    * Switch CHART_MAP to Record to ensure it is complete for all WIDGET_DISPLAY enum members

diff --git a/src/sentry/static/sentry/app/types/index.tsx b/src/sentry/static/sentry/app/types/index.tsx
index 86c1cec975..7388f4e3aa 100644
--- a/src/sentry/static/sentry/app/types/index.tsx
+++ b/src/sentry/static/sentry/app/types/index.tsx
@@ -8,7 +8,9 @@ import {
   NOT_INSTALLED,
   PENDING,
 } from 'app/views/organizationIntegrations/constants';
+import {WIDGET_DISPLAY} from 'app/views/dashboards/constants';
 import {Props as AlertProps} from 'app/components/alert';
+import {Query as DiscoverQuery} from 'app/views/discover/types';
 
 declare global {
   interface Window {
@@ -1301,4 +1303,16 @@ export type Artifact = {
   headers: {'Content-Type': string};
 };
 
+export type Widget = {
+  queries: {
+    discover: DiscoverQuery[];
+  };
+  title: React.ReactNode;
+  type: WIDGET_DISPLAY;
+  fieldLabelMap?: object;
+  yAxisMapping?: [number[], number[]];
+  includeReleases?: boolean;
+  includePreviousPeriod?: boolean;
+};
+
 export type EventGroupInfo = Record<EventGroupVariantKey, EventGroupVariant>;
diff --git a/src/sentry/static/sentry/app/views/dashboards/constants.tsx b/src/sentry/static/sentry/app/views/dashboards/constants.tsx
index 1f2a4ba851..db163c31bd 100644
--- a/src/sentry/static/sentry/app/views/dashboards/constants.tsx
+++ b/src/sentry/static/sentry/app/views/dashboards/constants.tsx
@@ -1,10 +1,10 @@
-export const WIDGET_DISPLAY = {
-  LINE_CHART: 'line',
-  AREA_CHART: 'area',
-  STACKED_AREA_CHART: 'stacked-area',
-  BAR_CHART: 'bar',
-  PIE_CHART: 'pie',
-  TABLE: 'table',
-  WORLD_MAP: 'world-map',
-  PERCENTAGE_AREA_CHART: 'percentage-area',
-} as const;
+export enum WIDGET_DISPLAY {
+  LINE_CHART = 'line',
+  AREA_CHART = 'area',
+  STACKED_AREA_CHART = 'stacked-area',
+  BAR_CHART = 'bar',
+  PIE_CHART = 'pie',
+  TABLE = 'table',
+  WORLD_MAP = 'world-map',
+  PERCENTAGE_AREA_CHART = 'percentage-area',
+}
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.tsx
similarity index 88%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.tsx
index 1dda8b16fc..f2d68195ad 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getChartComponent.tsx
@@ -9,7 +9,7 @@ import WorldMapChart from 'app/components/charts/worldMapChart';
 
 import {WIDGET_DISPLAY} from '../constants';
 
-const CHART_MAP = {
+const CHART_MAP: Record<WIDGET_DISPLAY, React.Component> = {
   [WIDGET_DISPLAY.LINE_CHART]: LineChart,
   [WIDGET_DISPLAY.AREA_CHART]: AreaChart,
   [WIDGET_DISPLAY.STACKED_AREA_CHART]: StackedAreaChart,
@@ -20,6 +20,6 @@ const CHART_MAP = {
   [WIDGET_DISPLAY.PERCENTAGE_AREA_CHART]: PercentageAreaChart,
 };
 
-export function getChartComponent({type}) {
+export function getChartComponent({type}: {type: WIDGET_DISPLAY}) {
   return CHART_MAP[type];
 }
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.tsx
similarity index 79%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.tsx
index b35a57c6c6..dd1e1bf484 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getChartDataFunc.tsx
@@ -1,4 +1,5 @@
 import {getChartDataForWidget, getChartDataByDay} from 'app/views/discover/result/utils';
+import {Widget} from 'app/types';
 
 import {isTimeSeries} from './isTimeSeries';
 import {WIDGET_DISPLAY} from '../constants';
@@ -6,7 +7,11 @@ import {WIDGET_DISPLAY} from '../constants';
 /**
  * Get data function based on widget properties
  */
-export function getChartDataFunc({queries, type, fieldLabelMap}) {
+export function getChartDataFunc({
+  queries,
+  type,
+  fieldLabelMap,
+}: Widget): [Function, object[]] {
   if (queries.discover.some(isTimeSeries)) {
     return [
       getChartDataByDay,
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getData.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getData.tsx
similarity index 93%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getData.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getData.tsx
index 752e267aa4..75a6f6986f 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getData.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getData.tsx
@@ -1,11 +1,13 @@
 import {t} from 'app/locale';
+import {Widget} from 'app/types';
+import {SnubaResult} from 'app/views/discover/types';
 
 import {WIDGET_DISPLAY} from '../constants';
 import {getChartDataFunc} from './getChartDataFunc';
 import {isTimeSeries} from './isTimeSeries';
 
 // TODO(billy): Currently only supports discover queries
-export function getData(results, widget) {
+export function getData(results: SnubaResult[], widget: Widget) {
   const {type, queries, yAxisMapping} = widget;
   const isTable = type === WIDGET_DISPLAY.TABLE;
   const [chartDataFunc, chartDataFuncArgs] = getChartDataFunc(widget);
@@ -36,7 +38,7 @@ export function getData(results, widget) {
 
   // Has 2 y axes
   if (hasYAxes) {
-    yAxisMapping.forEach((mappings, yAxisIndex) => {
+    yAxisMapping?.forEach((mappings, yAxisIndex) => {
       mappings.forEach(seriesIndex => {
         if (typeof series[seriesIndex] === 'undefined') {
           return;
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.tsx
similarity index 78%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.tsx
index bd1e4306d0..d29c881e25 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverConditionsToSearchString.tsx
@@ -4,12 +4,13 @@ import {
   WILDCARD_OPERATORS,
 } from 'app/views/discover/data';
 import {defined} from 'app/utils';
+import {Condition} from 'app/views/discover/types';
 
 const checkIsNegation = operator => NEGATION_OPERATORS.includes(operator);
 const checkIsNull = operator => NULL_OPERATORS.includes(operator);
 const checkIsWildcard = operator => WILDCARD_OPERATORS.includes(operator);
 
-function getDiscoverConditionToSearchString(condition = []) {
+function getDiscoverConditionToSearchString(condition: Condition) {
   const [field, operator, value] = condition;
   const isNegation = checkIsNegation(operator);
   const negationStr = isNegation ? '!' : '';
@@ -26,14 +27,14 @@ function getDiscoverConditionToSearchString(condition = []) {
 
   if (checkIsWildcard(operator)) {
     // Do we support both?
-    coercedValue = coercedValue.replace(/%/g, '*');
+    coercedValue = `${coercedValue}`.replace(/%/g, '*');
   }
 
   // TODO(billy): Handle number operators on server
   return `${negationStr}${field}:${coercedValue}`;
 }
 
-export function getDiscoverConditionsToSearchString(conditions = []) {
+export function getDiscoverConditionsToSearchString(conditions: Condition[] = []) {
   return conditions
     .map(getDiscoverConditionToSearchString)
     .join(' ')
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.tsx
similarity index 81%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.tsx
index 62512b1298..92f3679ee7 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getDiscoverUrlPathFromDiscoverQuery.tsx
@@ -2,14 +2,24 @@ import qs from 'query-string';
 
 import {getExternal, getInternal} from 'app/views/discover/aggregations/utils';
 import {getQueryStringFromQuery} from 'app/views/discover/utils';
+import {Query} from 'app/views/discover/types';
+import {GlobalSelection, Organization} from 'app/types';
 
-export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, query}) {
+export function getDiscoverUrlPathFromDiscoverQuery({
+  organization,
+  selection,
+  query,
+}: {
+  organization: Organization;
+  selection: GlobalSelection;
+  query: Query;
+}) {
   const {datetime, environments: _environments, ...restSelection} = selection;
 
   // Discover does not support importing these
   const {groupby: _groupby, rollup: _rollup, name: _name, orderby, ...restQuery} = query;
 
-  const orderbyTimeIndex = orderby.indexOf('time');
+  const orderbyTimeIndex = orderby?.indexOf('time');
   const visual = orderbyTimeIndex === -1 ? 'table' : 'line-by-day';
 
   const aggregations = query.aggregations.map(aggregation =>
@@ -18,8 +28,7 @@ export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, qu
   const [, , aggregationAlias] = (aggregations.length && aggregations[0]) || [];
 
   // Discover expects the aggregation aliases to be in a specific format
-  restQuery.orderby = `${orderbyTimeIndex === 0 ? '' : '-'}${aggregationAlias || ''}`;
-  restQuery.aggregations = aggregations;
+  const discoverOrderby = `${orderbyTimeIndex === 0 ? '' : '-'}${aggregationAlias || ''}`;
 
   return `/organizations/${organization.slug}/discover/${getQueryStringFromQuery({
     ...restQuery,
@@ -28,6 +37,8 @@ export function getDiscoverUrlPathFromDiscoverQuery({organization, selection, qu
     end: datetime.end,
     range: datetime.period,
     limit: 1000,
+    aggregations,
+    orderby: discoverOrderby,
   })}&visualization=${visual}`;
 }
 
@@ -41,6 +52,7 @@ export function getDiscover2UrlPathFromDiscoverQuery({
     field: ['title', ...d1Query.fields],
     sort: d1Query.orderby,
     statsPeriod: selection?.datetime?.period,
+    query: '',
   };
 
   const queryQueries = (d1Query.conditions || []).map(c => {
@@ -59,7 +71,7 @@ export function getDiscover2UrlPathFromDiscoverQuery({
     }
 
     // Build the query
-    const q = [];
+    const q = [] as string[];
     if (isNot) {
       q.push('!');
     }
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.tsx
similarity index 71%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.tsx
index db943630c3..db90236f26 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlFromDiscoverQueryWithConditions.tsx
@@ -11,15 +11,24 @@ import zipWith from 'lodash/zipWith';
 
 import {OPERATOR} from 'app/views/discover/data';
 import {escapeQuotes} from 'app/components/events/interfaces/utils';
+import {Organization, GlobalSelection} from 'app/types';
+import {Condition, Query} from 'app/views/discover/types';
 
 import {getEventsUrlPathFromDiscoverQuery} from './getEventsUrlPathFromDiscoverQuery';
 
+type Props = {
+  values: string[];
+  organization: Organization;
+  selection: GlobalSelection;
+  query: Query;
+};
+
 export function getEventsUrlFromDiscoverQueryWithConditions({
   values,
   query,
   selection,
   organization,
-}) {
+}: Props) {
   return getEventsUrlPathFromDiscoverQuery({
     organization,
     selection,
@@ -30,11 +39,16 @@ export function getEventsUrlFromDiscoverQueryWithConditions({
         // For each `field`, create a condition that joins it with each `rowObject.name` value (separated by commas)
         // e.g. fields: ['browser', 'device'],  rowObject.name: "Chrome, iPhone"
         //      ----> [['browser', '=', 'Chrome'], ['device', '=', 'iPhone']]
-        ...zipWith(query.fields, values, (field, value) => [
-          field,
-          OPERATOR.EQUAL,
-          value === null ? '""' : `"${escapeQuotes(value)}"`,
-        ]),
+        ...zipWith(
+          query.fields,
+          values,
+          (field, value) =>
+            [
+              field,
+              OPERATOR.EQUAL,
+              value === null ? '""' : `"${escapeQuotes(value)}"`,
+            ] as Condition
+        ),
       ],
     },
   });
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.tsx
similarity index 69%
rename from src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx
rename to src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.tsx
index 45bae15d9e..627de8a62f 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.jsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/getEventsUrlPathFromDiscoverQuery.tsx
@@ -2,10 +2,22 @@ import pickBy from 'lodash/pickBy';
 import qs from 'query-string';
 
 import {getUtcDateString} from 'app/utils/dates';
+import {Organization, GlobalSelection} from 'app/types';
+import {Query} from 'app/views/discover/types';
 
 import {getDiscoverConditionsToSearchString} from './getDiscoverConditionsToSearchString';
 
-export function getEventsUrlPathFromDiscoverQuery({organization, selection, query}) {
+type Props = {
+  organization: Organization;
+  selection: GlobalSelection;
+  query: Query;
+};
+
+export function getEventsUrlPathFromDiscoverQuery({
+  organization,
+  selection,
+  query,
+}: Props) {
   const {projects, datetime, environments: _environments, ...restSelection} = selection;
 
   return `/organizations/${organization.slug}/events/?${qs.stringify(
diff --git a/src/sentry/static/sentry/app/views/dashboards/utils/isTimeSeries.tsx b/src/sentry/static/sentry/app/views/dashboards/utils/isTimeSeries.tsx
index 502589f3d0..f55e0ffb91 100644
--- a/src/sentry/static/sentry/app/views/dashboards/utils/isTimeSeries.tsx
+++ b/src/sentry/static/sentry/app/views/dashboards/utils/isTimeSeries.tsx
@@ -1,8 +1,6 @@
-type Query = {
-  groupby: string[];
-};
+import {Query} from 'app/views/discover/types';
 
 // Consider a query a time series if
 export function isTimeSeries(query: Query) {
-  return query.groupby.includes('time');
+  return query?.groupby?.includes('time');
 }
diff --git a/src/sentry/static/sentry/app/views/discover/types.tsx b/src/sentry/static/sentry/app/views/discover/types.tsx
index 053deb2d2a..6efc9739ad 100644
--- a/src/sentry/static/sentry/app/views/discover/types.tsx
+++ b/src/sentry/static/sentry/app/views/discover/types.tsx
@@ -10,6 +10,9 @@ export type Query = {
   version?: number;
   query?: string;
   orderby?: string;
+  groupby?: string;
+  rollup?: number;
+  name?: string;
   limit?: number;
   range?: string;
   start?: string;
