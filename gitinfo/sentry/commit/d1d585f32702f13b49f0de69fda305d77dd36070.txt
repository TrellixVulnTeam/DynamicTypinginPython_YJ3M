commit d1d585f32702f13b49f0de69fda305d77dd36070
Author: ted kaemming <ted@kaemming.com>
Date:   Fri Apr 6 13:55:36 2018 -0700

    fix(releases): Ensure the release creation date can only move backwards (#7961)

diff --git a/src/sentry/receivers/releases.py b/src/sentry/receivers/releases.py
index 41945c7f33..1179c9ac76 100644
--- a/src/sentry/receivers/releases.py
+++ b/src/sentry/receivers/releases.py
@@ -21,26 +21,26 @@ def ensure_release_exists(instance, created, **kwargs):
 
     project = Project.objects.get_from_cache(id=instance.project_id)
 
-    try:
-        with transaction.atomic():
-            release = Release.objects.create(
-                organization_id=project.organization_id,
-                version=instance.value,
-                date_added=instance.first_seen,
-            )
-    except IntegrityError:
-        release = Release.objects.get(
-            organization_id=project.organization_id,
-            version=instance.value,
-        )
-        release.update(date_added=instance.first_seen)
-    else:
-        # Make sure we use our partition key since `instance` is a
-        # `TagValue`.
+    release, created = Release.objects.get_or_create(
+        organization_id=project.organization_id,
+        version=instance.value,
+        defaults={
+            'date_added': instance.first_seen,
+        },
+    )
+
+    if created:
         type(instance).objects.filter(
             id=instance.id,
             project_id=instance.project_id,
-        ).update(data={'release_id': release.id})
+        ).update(data={
+            'release_id': release.id,
+        })
+    elif release.date_added > instance.first_seen:
+        Release.objects.filter(
+            id=release.id,
+            date_added__gt=instance.first_seen,
+        ).update(date_added=instance.first_seen)
 
     release.add_project(project)
 
diff --git a/tests/sentry/receivers/test_releases.py b/tests/sentry/receivers/test_releases.py
index 80f4c15032..fec6da79b6 100644
--- a/tests/sentry/receivers/test_releases.py
+++ b/tests/sentry/receivers/test_releases.py
@@ -1,6 +1,8 @@
 from __future__ import absolute_import
 
+import pytz
 import six
+from datetime import datetime
 from hashlib import sha1
 from mock import patch
 from uuid import uuid4
@@ -20,6 +22,7 @@ class EnsureReleaseExistsTest(TestCase):
             environment_id=self.environment.id,
             key='sentry:release',
             value='1.0',
+            first_seen=datetime(2018, 2, 1, tzinfo=pytz.utc),
         )
 
         tv = tagstore.get_tag_value(self.project.id, self.environment.id, 'sentry:release', '1.0')
@@ -29,10 +32,35 @@ class EnsureReleaseExistsTest(TestCase):
         assert release.version == tv.value
         assert release.projects.first() == self.project
         assert release.organization == self.project.organization
+        assert release.date_added == tv.first_seen
 
         # ensure we dont hit some kind of error saving it again
         tv.save()
 
+        tv2 = tagstore.create_tag_value(
+            project_id=self.create_project(
+                organization=self.project.organization,
+            ).id,
+            environment_id=self.environment.id,
+            key='sentry:release',
+            value='1.0',
+            first_seen=datetime(2018, 1, 1, tzinfo=pytz.utc),
+        )
+
+        assert Release.objects.get(id=release.id).date_added == tv2.first_seen
+
+        tagstore.create_tag_value(
+            project_id=self.create_project(
+                organization=self.project.organization,
+            ).id,
+            environment_id=self.environment.id,
+            key='sentry:release',
+            value='1.0',
+            first_seen=datetime(2018, 3, 1, tzinfo=pytz.utc),
+        )
+
+        assert Release.objects.get(id=release.id).date_added == tv2.first_seen
+
 
 class ResolveGroupResolutionsTest(TestCase):
     @patch('sentry.tasks.clear_expired_resolutions.clear_expired_resolutions.delay')
