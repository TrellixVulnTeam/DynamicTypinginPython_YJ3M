commit 7f4c80bbfba8474d3051193cf7666fa632075496
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Thu Jun 20 17:36:27 2019 -0700

    fix(event-search): Added fix for special fields in all events. (#13751)
    
    * Added fix for special fields in all events.
    
    * Moved filtering functionality into a method.
    
    * Fixed formatting.

diff --git a/src/sentry/api/bases/organization_events.py b/src/sentry/api/bases/organization_events.py
index 591a5a3322..f6e6eeb979 100644
--- a/src/sentry/api/bases/organization_events.py
+++ b/src/sentry/api/bases/organization_events.py
@@ -62,12 +62,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             raise OrganizationEventsError(exc.message)
 
         # Filter out special aggregates.
-        conditions = []
-        for condition in snuba_args.get('conditions', []):
-            field_name = condition[0]
-            if isinstance(field_name, (list, tuple)) or field_name not in SPECIAL_FIELDS:
-                conditions.append(condition)
-        snuba_args['conditions'] = conditions
+        self._filter_unspecified_special_fields_in_conditions(snuba_args, set())
 
         # TODO(lb): remove once boolean search is fully functional
         has_boolean_op_flag = features.has(
@@ -90,6 +85,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
         fields = request.GET.getlist('field')[:]
         aggregations = []
         groupby = request.GET.getlist('groupby')
+        special_fields = set()
 
         if fields:
             # If project.name is requested, get the project.id from Snuba so we
@@ -101,6 +97,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
             for field in fields[:]:
                 if field in SPECIAL_FIELDS:
+                    special_fields.add(field)
                     special_field = deepcopy(SPECIAL_FIELDS[field])
                     fields.remove(field)
                     fields.extend(special_field.get('fields', []))
@@ -109,22 +106,7 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
 
             snuba_args['selected_columns'] = fields
 
-        conditions = snuba_args.get('conditions')
-        # Add special fields to aggregations if missing
-        if conditions:
-            for condition in conditions:
-                field = condition[0]
-                if isinstance(field, (list, tuple)):
-                    continue
-                if field in SPECIAL_FIELDS:
-                    aggregation_included = False
-                    for aggregate in aggregations:
-                        if aggregate[2] == field:
-                            aggregation_included = True
-                            break
-                    if not aggregation_included:
-                        aggregations.extend(deepcopy(SPECIAL_FIELDS[field]).get('aggregations', []))
-
+        self._filter_unspecified_special_fields_in_conditions(snuba_args, special_fields)
         if aggregations:
             snuba_args['aggregations'] = aggregations
 
@@ -197,3 +179,17 @@ class OrganizationEventsEndpointBase(OrganizationEndpoint):
             return None
 
         return six.text_type(result['data'][0]['event_id'])
+
+    def _filter_unspecified_special_fields_in_conditions(self, snuba_args, special_fields):
+        conditions = []
+        for condition in snuba_args['conditions']:
+            field = condition[0]
+            if (
+                not isinstance(field, (list, tuple))
+                and field in SPECIAL_FIELDS
+                and field not in special_fields
+            ):
+                # skip over special field.
+                continue
+            conditions.append(condition)
+        snuba_args['conditions'] = conditions
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index ee61fe728a..2e58b28c85 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -76,7 +76,6 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
         try:
             params = self.get_filter_params(request, organization)
             snuba_args = self.get_snuba_query_args_v2(request, organization, params)
-
             fields = snuba_args.get('selected_columns')
             groupby = snuba_args.get('groupby', [])
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_v2.py b/tests/snuba/api/endpoints/test_organization_events_v2.py
index 8651cb5dea..d72ca57dff 100644
--- a/tests/snuba/api/endpoints/test_organization_events_v2.py
+++ b/tests/snuba/api/endpoints/test_organization_events_v2.py
@@ -373,84 +373,6 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
         assert response.data[0]['event_count'] == 2
         assert response.data[0]['user_count'] == 2
 
-    def test_aggregation_comparison_not_displayed(self):
-        self.login_as(user=self.user)
-        project = self.create_project()
-        self.store_event(
-            data={
-                'event_id': 'a' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group_1'],
-                'user': {
-                    'email': 'foo@example.com',
-                },
-            },
-            project_id=project.id,
-        )
-        event = self.store_event(
-            data={
-                'event_id': 'b' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group_2'],
-                'user': {
-                    'email': 'foo@example.com',
-                },
-            },
-            project_id=project.id,
-        )
-        self.store_event(
-            data={
-                'event_id': 'c' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group_2'],
-                'user': {
-                    'email': 'bar@example.com',
-                },
-            },
-            project_id=project.id,
-        )
-        self.store_event(
-            data={
-                'event_id': 'd' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group_3'],
-                'user': {
-                    'email': 'bar@example.com',
-                },
-            },
-            project_id=project.id,
-        )
-        self.store_event(
-            data={
-                'event_id': 'e' * 32,
-                'timestamp': self.min_ago,
-                'fingerprint': ['group_3'],
-                'user': {
-                    'email': 'bar@example.com',
-                },
-            },
-            project_id=project.id,
-        )
-
-        with self.feature('organizations:events-v2'):
-            response = self.client.get(
-                self.url,
-                format='json',
-                data={
-                    'field': ['issue_title', 'event_count'],
-                    'query': 'event_count:>1 user_count:>1',
-                    'groupby': ['issue.id', 'project.id'],
-                    'orderby': 'issue.id'
-                },
-            )
-
-        assert response.status_code == 200, response.content
-
-        assert len(response.data) == 1
-        assert response.data[0]['issue.id'] == event.group_id
-        assert response.data[0]['event_count'] == 2
-        assert response.data[0]['user_count'] == 2
-
     def test_aggregation_comparison_with_conditions(self):
         self.login_as(user=self.user)
         project = self.create_project()
@@ -617,3 +539,57 @@ class OrganizationEventsV2EndpointTest(OrganizationEventsTestBase):
             )
         assert response.status_code == 400, response.content
         assert response.data['detail'] == 'No fields or groupings provided'
+
+    def test_irrelevant_special_field_in_query(self):
+        self.login_as(user=self.user)
+        project = self.create_project()
+        event1 = self.store_event(
+            data={
+                'event_id': 'a' * 32,
+                'timestamp': self.min_ago,
+                'fingerprint': ['group_1'],
+                'user': {
+                    'email': 'foo@example.com',
+                },
+            },
+            project_id=project.id,
+        )
+        event2 = self.store_event(
+            data={
+                'event_id': 'b' * 32,
+                'timestamp': self.min_ago,
+                'fingerprint': ['group_2'],
+                'user': {
+                    'email': 'foo@example.com',
+                },
+            },
+            project_id=project.id,
+        )
+        self.store_event(
+            data={
+                'event_id': 'c' * 32,
+                'timestamp': self.min_ago,
+                'fingerprint': ['group_2'],
+                'user': {
+                    'email': 'bar@example.com',
+                },
+            },
+            project_id=project.id,
+        )
+
+        with self.feature('organizations:events-v2'):
+            response = self.client.get(
+                self.url,
+                format='json',
+                data={
+                    'field': ['issue.id'],
+                    'query': 'event_count:>1',
+                    'orderby': 'issue.id'
+                },
+            )
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 3
+        assert response.data[0]['issue.id'] == event1.group_id
+        assert response.data[1]['issue.id'] == event2.group_id
+        assert response.data[2]['issue.id'] == event2.group_id
