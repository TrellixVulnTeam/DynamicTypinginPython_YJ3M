commit 9dc29bca7308ec2691565220ec1fbb7d791e4074
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Feb 18 12:56:18 2015 -0800

    keep source processor tests as full integration

diff --git a/tests/sentry/lang/javascript/test_plugin.py b/tests/sentry/lang/javascript/test_plugin.py
index f343e79df1..5bd4552297 100644
--- a/tests/sentry/lang/javascript/test_plugin.py
+++ b/tests/sentry/lang/javascript/test_plugin.py
@@ -5,6 +5,8 @@ from mock import patch
 from sentry.models import Event
 from sentry.testutils import TestCase
 
+base64_sourcemap = 'data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zb2xlLmxvZyhcImhlbGxvLCBXb3JsZCFcIikiXX0='
+
 
 class JavascriptIntegrationTest(TestCase):
     @patch('sentry.lang.javascript.processor.fetch_url')
@@ -56,3 +58,46 @@ class JavascriptIntegrationTest(TestCase):
         assert frame.pre_context is None
         assert frame.context_line == 'h'
         assert frame.post_context == ['e', 'l', 'l', 'o', ' ']
+
+    @patch('sentry.lang.javascript.processor.fetch_url')
+    @patch('sentry.lang.javascript.processor.discover_sourcemap')
+    def test_inlined_sources(self, mock_discover_sourcemap, mock_fetch_url):
+        data = {
+            'message': 'hello',
+            'platform': 'javascript',
+            'sentry.interfaces.Exception': {
+                'values': [{
+                    'type': 'Error',
+                    'stacktrace': {
+                        'frames': [
+                            {
+                                'abs_path': 'http://example.com/test.min.js',
+                                'filename': 'test.js',
+                                'lineno': 1,
+                                'colno': 0,
+                            },
+                        ],
+                    },
+                }],
+            }
+        }
+
+        mock_discover_sourcemap.return_value = base64_sourcemap
+
+        mock_fetch_url.return_value.url = 'http://example.com/test.min.js'
+        mock_fetch_url.return_value.body = '\n'.join('<generated source>')
+
+        resp = self._postWithHeader(data)
+        assert resp.status_code, 200
+
+        mock_fetch_url.assert_called_once_with(
+            'http://example.com/test.min.js', project=self.project)
+
+        event = Event.objects.get()
+        exception = event.interfaces['sentry.interfaces.Exception']
+        frame_list = exception.values[0].stacktrace.frames
+
+        frame = frame_list[0]
+        assert not frame.pre_context
+        assert frame.context_line == 'console.log("hello, World!")'
+        assert not frame.post_context
diff --git a/tests/sentry/lang/javascript/test_processor.py b/tests/sentry/lang/javascript/test_processor.py
index 83884d6563..3de788a178 100644
--- a/tests/sentry/lang/javascript/test_processor.py
+++ b/tests/sentry/lang/javascript/test_processor.py
@@ -6,7 +6,7 @@ from mock import patch
 
 from sentry.lang.javascript.processor import (
     BAD_SOURCE, discover_sourcemap, fetch_sourcemap, fetch_url, generate_module,
-    SourceProcessor, trim_line, UrlResult
+    trim_line, UrlResult
 )
 from sentry.lang.javascript.sourcemaps import SourceMap, SourceMapIndex
 from sentry.testutils import TestCase
@@ -139,95 +139,6 @@ class DiscoverSourcemapTest(TestCase):
         assert discover_sourcemap(result) == 'http://example.com/source.map.js'
 
 
-class SourceProcessorTest(TestCase):
-    def process(self, data):
-        processor = SourceProcessor()
-        return processor.process(data)
-
-    @patch('sentry.models.Event.update')
-    @patch('sentry.lang.javascript.processor.fetch_url')
-    @patch('sentry.lang.javascript.processor.fetch_sourcemap')
-    @patch('sentry.lang.javascript.processor.discover_sourcemap')
-    def test_simple(self, discover_sourcemap, fetch_sourcemap, fetch_url, update):
-        data = {
-            'project': self.project.id,
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 4,
-                                'colno': 0,
-                            },
-                            {
-                                'abs_path': 'http://example.com/foo.js',
-                                'filename': 'foo.js',
-                                'lineno': 1,
-                                'colno': 0,
-                            },
-                        ],
-                    },
-                }],
-            }
-        }
-        discover_sourcemap.return_value = None
-        fetch_sourcemap.return_value = None
-        fetch_url.return_value.body = '\n'.join('hello world')
-
-        self.process(data)
-
-        fetch_url.assert_called_once_with(
-            'http://example.com/foo.js', project=self.project)
-
-        frame_list = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
-        frame = frame_list[0]
-        assert frame['pre_context'] == ['h', 'e', 'l']
-        assert frame['context_line'] == 'l'
-        assert frame['post_context'] == ['o', ' ', 'w', 'o', 'r']
-
-        frame = frame_list[1]
-        assert not frame.get('pre_context')
-        assert frame['context_line'] == 'h'
-        assert frame['post_context'] == ['e', 'l', 'l', 'o', ' ']
-
-    @patch('sentry.models.Event.update')
-    @patch('sentry.lang.javascript.processor.fetch_url')
-    @patch('sentry.lang.javascript.processor.discover_sourcemap')
-    def test_inlined_sources(self, discover_sourcemap, fetch_url, update):
-        data = {
-            'project': self.project.id,
-            'sentry.interfaces.Exception': {
-                'values': [{
-                    'stacktrace': {
-                        'frames': [
-                            {
-                                'abs_path': 'http://example.com/test.min.js',
-                                'filename': 'test.js',
-                                'lineno': 1,
-                                'colno': 0,
-                            },
-                        ],
-                    },
-                }],
-            }
-        }
-        discover_sourcemap.return_value = base64_sourcemap
-        fetch_url.return_value.url = 'http://example.com/test.min.js'
-        fetch_url.return_value.body = '\n'.join('<generated source>')
-
-        self.process(data)
-        fetch_url.assert_called_once_with(
-            'http://example.com/test.min.js', project=self.project)
-
-        frame_list = data['sentry.interfaces.Exception']['values'][0]['stacktrace']['frames']
-        frame = frame_list[0]
-        assert not frame.get('pre_context')
-        assert frame['context_line'] == 'console.log("hello, World!")'
-        assert not frame.get('post_context')
-
-
 class GenerateModuleTest(TestCase):
     def test_simple(self):
         assert generate_module(None) == '<unknown module>'
