commit fafe58c0c5b3571b8b881561915eaed1be2e5cc4
Author: William Mak <william@wmak.io>
Date:   Tue Nov 26 11:18:08 2019 -0500

    fix(github): Cache calls when getting commits from GitHub (#15807)
    
    * fix(GitHub): Cache calls when getting commits from GitHub
    
    - The reason for this is that the GitHub API doesn't provide a nice way
      to bulk get files changed for a set of commits.
    - We then call get_commit for every commit in a release, which means if
      a release with the same commits is made multiple times we can hit
      GitHub's API limit
    - repo_name is md5'ed so to avoid any possible weird issues with it as
      cache key

diff --git a/src/sentry/integrations/github/repository.py b/src/sentry/integrations/github/repository.py
index 3fb26a490b..d971d5e42a 100644
--- a/src/sentry/integrations/github/repository.py
+++ b/src/sentry/integrations/github/repository.py
@@ -3,9 +3,12 @@ from __future__ import absolute_import
 import logging
 import six
 
+from django.core.cache import cache
+
 from sentry.integrations.exceptions import ApiError, IntegrationError
 from sentry.models import Integration
 from sentry.plugins import providers
+from sentry.utils.hashlib import md5_text
 
 WEBHOOK_EVENTS = ["push", "pull_request"]
 
@@ -109,8 +112,13 @@ class GitHubRepositoryProvider(providers.IntegrationRepositoryProvider):
     def _get_patchset(self, client, repo_name, sha):
         """Get the modified files for a commit
         """
-        commit = client.get_commit(repo_name, sha)
-        return self._transform_patchset(commit["files"])
+        key = u"get_commit:{}:{}".format(md5_text(repo_name).hexdigest(), sha)
+        commit_files = cache.get(key)
+        if commit_files is None:
+            commit_files = client.get_commit(repo_name, sha)["files"]
+            cache.set(key, commit_files, 900)
+
+        return self._transform_patchset(commit_files)
 
     def _transform_patchset(self, diff):
         """Convert the patch data from GitHub into our internal format
diff --git a/tests/sentry/integrations/github/test_repository.py b/tests/sentry/integrations/github/test_repository.py
index ecc9baecb7..d54f2fceeb 100644
--- a/tests/sentry/integrations/github/test_repository.py
+++ b/tests/sentry/integrations/github/test_repository.py
@@ -140,6 +140,25 @@ class GitHubAppsProviderTest(PluginTestCase):
         assert patchset[3] == {"path": "old_name.txt", "type": "D"}
         assert patchset[4] == {"path": "renamed.txt", "type": "A"}
 
+    @mock.patch("sentry.integrations.github.client.get_jwt", return_value="jwt_token_1")
+    @responses.activate
+    def test_patchset_caching(self, get_jwt):
+        stub_installation_token()
+        responses.add(
+            responses.GET,
+            "https://api.github.com/repos/getsentry/example-repo/commits/abcdef",
+            json=json.loads(GET_COMMIT_EXAMPLE),
+        )
+        client = self.integration.get_installation(self.repository.organization_id).get_client()
+
+        self.provider._get_patchset(client, self.repository.config["name"], "abcdef")
+        # One call for auth token, another for the patchset
+        assert len(responses.calls) == 2
+
+        self.provider._get_patchset(client, self.repository.config["name"], "abcdef")
+        # Now that patchset was cached, github shouldn't have been called again
+        assert len(responses.calls) == 2
+
     @responses.activate
     def test_compare_commits_failure(self):
         stub_installation_token()
