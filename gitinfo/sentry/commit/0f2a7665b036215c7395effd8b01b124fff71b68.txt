commit 0f2a7665b036215c7395effd8b01b124fff71b68
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Jun 26 22:13:00 2015 -0700

    Add endpoints for managing saved searches

diff --git a/src/sentry/api/endpoints/project_search_details.py b/src/sentry/api/endpoints/project_search_details.py
new file mode 100644
index 0000000000..dbd55a64da
--- /dev/null
+++ b/src/sentry/api/endpoints/project_search_details.py
@@ -0,0 +1,95 @@
+from __future__ import absolute_import
+
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.exceptions import ResourceDoesNotExist
+from sentry.api.serializers import serialize
+from sentry.models import SavedSearch
+
+
+class SavedSearchSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=128, required=True)
+    query = serializers.CharField(required=True)
+
+
+class ProjectSearchDetailsEndpoint(ProjectEndpoint):
+    def get(self, request, project, search_id):
+        """
+        Retrieve a saved search
+
+        Return details on an individual saved search.
+
+            {method} {path}
+
+        """
+        try:
+            search = SavedSearch.objects.get(
+                project=project,
+                id=search_id,
+            )
+        except SavedSearch.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        return Response(serialize(search, request.user))
+
+    def put(self, request, project, search_id):
+        """
+        Update a saved search
+
+        Update a saved search.
+
+            {method} {path}
+            {{
+                "version": "abcdef",
+                "dateSavedSearchd": "2015-05-11T02:23:10Z"
+            }}
+
+        """
+        try:
+            search = SavedSearch.objects.get(
+                project=project,
+                id=search_id,
+            )
+        except SavedSearch.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        serializer = SavedSearchSerializer(data=request.DATA, partial=True)
+
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=400)
+
+        result = serializer.object
+
+        kwargs = {}
+        if result.get('name'):
+            kwargs['name'] = result['name']
+        if result.get('text'):
+            kwargs['text'] = result['text']
+
+        if kwargs:
+            search.update(**kwargs)
+
+        return Response(serialize(search, request.user))
+
+    def delete(self, request, project, search_id):
+        """
+        Delete a saved search
+
+        Permanently remove a saved search.
+
+            {method} {path}
+
+        """
+        try:
+            search = SavedSearch.objects.get(
+                project=project,
+                id=search_id,
+            )
+        except SavedSearch.DoesNotExist:
+            raise ResourceDoesNotExist
+
+        search.delete()
+
+        return Response(status=204)
diff --git a/src/sentry/api/endpoints/project_searches.py b/src/sentry/api/endpoints/project_searches.py
new file mode 100644
index 0000000000..c470c05493
--- /dev/null
+++ b/src/sentry/api/endpoints/project_searches.py
@@ -0,0 +1,69 @@
+from __future__ import absolute_import
+
+from django.db import IntegrityError, transaction
+from rest_framework import serializers
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.serializers import serialize
+from sentry.models import SavedSearch
+
+
+class SavedSearchSerializer(serializers.Serializer):
+    name = serializers.CharField(max_length=128, required=True)
+    query = serializers.CharField(required=True)
+
+
+class ProjectSearchesEndpoint(ProjectEndpoint):
+    def get(self, request, project):
+        """
+        List a project's saved searches
+
+        Retrieve a list of saved searches for a given project.
+
+            {method} {path}
+
+        """
+        queryset = SavedSearch.objects.filter(
+            project=project,
+        )
+
+        return self.paginate(
+            request=request,
+            queryset=queryset,
+            order_by='-id',
+            on_results=lambda x: serialize(x, request.user),
+        )
+
+    def post(self, request, project):
+        """
+        Create a new saved search
+
+        Create a new saved search for the given project.
+
+            {method} {path}
+            {{
+                "name": "Latest Release",
+                "query": "release:[latest]"
+            }}
+
+        """
+        serializer = SavedSearchSerializer(data=request.DATA)
+
+        if serializer.is_valid():
+            result = serializer.object
+
+            with transaction.atomic():
+                try:
+                    search = SavedSearch.objects.create(
+                        project=project,
+                        name=result['name'],
+                        query=result['query'],
+                    )
+                except IntegrityError:
+                    return Response({
+                        'detail': 'Search with same name already exists.'
+                    }, status=400)
+
+            return Response(serialize(search, request.user), status=201)
+        return Response(serializer.errors, status=400)
diff --git a/src/sentry/api/serializers/models/savedsearch.py b/src/sentry/api/serializers/models/savedsearch.py
new file mode 100644
index 0000000000..fb46c58e3d
--- /dev/null
+++ b/src/sentry/api/serializers/models/savedsearch.py
@@ -0,0 +1,15 @@
+from __future__ import absolute_import
+
+from sentry.api.serializers import Serializer, register
+from sentry.models import SavedSearch
+
+
+@register(SavedSearch)
+class SavedSearchSerializer(Serializer):
+    def serialize(self, obj, attrs, user):
+        return {
+            'id': str(obj.id),
+            'name': obj.name,
+            'query': obj.query,
+            'dateCreated': obj.date_added,
+        }
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index bd6d5bc3f0..1ffd1aa8e3 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -34,6 +34,8 @@ from .endpoints.project_keys import ProjectKeysEndpoint
 from .endpoints.project_key_details import ProjectKeyDetailsEndpoint
 from .endpoints.project_member_index import ProjectMemberIndexEndpoint
 from .endpoints.project_releases import ProjectReleasesEndpoint
+from .endpoints.project_searches import ProjectSearchesEndpoint
+from .endpoints.project_search_details import ProjectSearchDetailsEndpoint
 from .endpoints.project_stats import ProjectStatsEndpoint
 from .endpoints.project_tagkey_details import ProjectTagKeyDetailsEndpoint
 from .endpoints.project_tagkey_values import ProjectTagKeyValuesEndpoint
@@ -145,6 +147,12 @@ urlpatterns = patterns(
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/releases/(?P<version>[^/]+)/files/(?P<file_id>\d+)/$',
         ReleaseFileDetailsEndpoint.as_view(),
         name='sentry-api-0-release-file-details'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/searches/$',
+        ProjectSearchesEndpoint.as_view(),
+        name='sentry-api-0-project-searches'),
+    url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/searches/(?P<search_id>[^\/]+)/$',
+        ProjectSearchDetailsEndpoint.as_view(),
+        name='sentry-api-0-project-search-details'),
     url(r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/stats/$',
         ProjectStatsEndpoint.as_view(),
         name='sentry-api-0-project-stats'),
diff --git a/tests/sentry/api/endpoints/test_project_search_details.py b/tests/sentry/api/endpoints/test_project_search_details.py
new file mode 100644
index 0000000000..8fd2db782e
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_search_details.py
@@ -0,0 +1,76 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import SavedSearch
+from sentry.testutils import APITestCase
+
+
+class ProjectSearchDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+        search = SavedSearch.objects.create(
+            project=project,
+            name='foo',
+            query='',
+        )
+
+        url = reverse('sentry-api-0-project-search-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'search_id': search.id,
+        })
+        response = self.client.get(url)
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(search.id)
+
+
+class UpdateProjectSearchDetailsTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+        search = SavedSearch.objects.create(
+            project=project,
+            name='foo',
+            query='',
+        )
+
+        url = reverse('sentry-api-0-project-search-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'search_id': search.id,
+        })
+        response = self.client.put(url, {'name': 'bar'})
+
+        assert response.status_code == 200, response.content
+        assert response.data['id'] == str(search.id)
+
+        search = SavedSearch.objects.get(id=search.id)
+        assert search.name == 'bar'
+
+
+class DeleteProjectSearchTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project(name='foo')
+        search = SavedSearch.objects.create(
+            project=project,
+            name='foo',
+            query='',
+        )
+
+        url = reverse('sentry-api-0-project-search-details', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+            'search_id': search.id,
+        })
+        response = self.client.delete(url)
+
+        assert response.status_code == 204, response.content
+
+        assert not SavedSearch.objects.filter(id=search.id).exists()
diff --git a/tests/sentry/api/endpoints/test_project_searches.py b/tests/sentry/api/endpoints/test_project_searches.py
new file mode 100644
index 0000000000..45e72ea9d3
--- /dev/null
+++ b/tests/sentry/api/endpoints/test_project_searches.py
@@ -0,0 +1,87 @@
+from __future__ import absolute_import
+
+from django.core.urlresolvers import reverse
+
+from sentry.models import SavedSearch
+from sentry.testutils import APITestCase
+
+
+class ProjectSearchListTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        team = self.create_team()
+        project1 = self.create_project(team=team, name='foo')
+        project2 = self.create_project(team=team, name='bar')
+
+        search1 = SavedSearch.objects.create(
+            project=project1,
+            name='bar',
+            query='',
+        )
+        search2 = SavedSearch.objects.create(
+            project=project1,
+            name='foo',
+            query='',
+        )
+        SavedSearch.objects.create(
+            project=project2,
+            name='foo',
+            query='',
+        )
+
+        url = reverse('sentry-api-0-project-searches', kwargs={
+            'organization_slug': project1.organization.slug,
+            'project_slug': project1.slug,
+        })
+        response = self.client.get(url, format='json')
+
+        assert response.status_code == 200, response.content
+        assert len(response.data) == 2
+        assert response.data[0]['id'] == str(search2.id)
+        assert response.data[1]['id'] == str(search1.id)
+
+
+class ProjectSearchCreateTest(APITestCase):
+    def test_simple(self):
+        self.login_as(user=self.user)
+
+        team = self.create_team()
+        project = self.create_project(team=team, name='foo')
+
+        url = reverse('sentry-api-0-project-searches', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+        response = self.client.post(url, data={
+            'name': 'muted',
+            'query': 'is:muted'
+        })
+
+        assert response.status_code == 201, response.content
+        assert response.data['id']
+
+        assert SavedSearch.objects.filter(
+            project=project,
+            id=response.data['id'],
+        ).exists()
+
+    def test_duplicate(self):
+        self.login_as(user=self.user)
+
+        team = self.create_team()
+        project = self.create_project(team=team, name='foo')
+
+        SavedSearch.objects.create(name='muted', project=project, query='')
+
+        url = reverse('sentry-api-0-project-searches', kwargs={
+            'organization_slug': project.organization.slug,
+            'project_slug': project.slug,
+        })
+
+        response = self.client.post(url, data={
+            'name': 'muted',
+            'query': 'is:muted'
+        })
+
+        assert response.status_code == 400, response.content
