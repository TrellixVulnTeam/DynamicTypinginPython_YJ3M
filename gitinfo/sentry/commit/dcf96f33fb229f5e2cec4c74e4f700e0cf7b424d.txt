commit dcf96f33fb229f5e2cec4c74e4f700e0cf7b424d
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Apr 2 14:17:57 2019 -0700

    ref(auditlog): Add audit logs for sentry apps (#12487)
    
    * ref(auditlog): Add audit logs for sentry apps
    
    * add tests

diff --git a/src/sentry/api/endpoints/sentry_app_details.py b/src/sentry/api/endpoints/sentry_app_details.py
index 1c6e825ede..078cde13b9 100644
--- a/src/sentry/api/endpoints/sentry_app_details.py
+++ b/src/sentry/api/endpoints/sentry_app_details.py
@@ -55,7 +55,10 @@ class SentryAppDetailsEndpoint(SentryAppBaseEndpoint):
             return Response(status=404)
 
         if sentry_app.status == SentryAppStatus.UNPUBLISHED:
-            Destroyer.run(sentry_app=sentry_app)
+            Destroyer.run(
+                sentry_app=sentry_app,
+                request=request,
+            )
             return Response(status=204)
 
         return Response(
diff --git a/src/sentry/api/endpoints/sentry_app_installation_details.py b/src/sentry/api/endpoints/sentry_app_installation_details.py
index 3e7964f435..db659098ee 100644
--- a/src/sentry/api/endpoints/sentry_app_installation_details.py
+++ b/src/sentry/api/endpoints/sentry_app_installation_details.py
@@ -26,5 +26,6 @@ class SentryAppInstallationDetailsEndpoint(SentryAppInstallationBaseEndpoint):
         Destroyer.run(
             install=installation,
             user=request.user,
+            request=request,
         )
         return Response(status=204)
diff --git a/src/sentry/api/endpoints/sentry_app_installations.py b/src/sentry/api/endpoints/sentry_app_installations.py
index ea62e52244..56de34b8f6 100644
--- a/src/sentry/api/endpoints/sentry_app_installations.py
+++ b/src/sentry/api/endpoints/sentry_app_installations.py
@@ -56,6 +56,7 @@ class SentryAppInstallationsEndpoint(SentryAppInstallationsBaseEndpoint):
             organization=organization,
             slug=serializer.object.get('slug'),
             user=request.user,
+            request=request,
         )
 
         return Response(serialize(install))
diff --git a/src/sentry/api/endpoints/sentry_apps.py b/src/sentry/api/endpoints/sentry_apps.py
index 01ca8d5b24..0898507d01 100644
--- a/src/sentry/api/endpoints/sentry_apps.py
+++ b/src/sentry/api/endpoints/sentry_apps.py
@@ -39,6 +39,7 @@ class SentryAppsEndpoint(SentryAppsBaseEndpoint):
                 is_alertable=result.get('isAlertable'),
                 schema=result.get('schema'),
                 overview=result.get('overview'),
+                request=request,
             )
 
             return Response(serialize(sentry_app), status=201)
diff --git a/src/sentry/mediators/mediator.py b/src/sentry/mediators/mediator.py
index 4d18575d7f..90936ba235 100644
--- a/src/sentry/mediators/mediator.py
+++ b/src/sentry/mediators/mediator.py
@@ -158,7 +158,9 @@ class Mediator(object):
         obj = cls(*args, **kwargs)
 
         with obj.log():
-            return obj.call()
+            result = obj.call()
+            obj.audit()
+            return result
 
     def __init__(self, *args, **kwargs):
         self.kwargs = kwargs
@@ -166,6 +168,10 @@ class Mediator(object):
                                  logging.getLogger(self._logging_name))
         self._validate_params(**kwargs)
 
+    def audit(self):
+        # used for creating audit log entries
+        pass
+
     def call(self):
         raise NotImplementedError
 
diff --git a/src/sentry/mediators/sentry_app_installations/creator.py b/src/sentry/mediators/sentry_app_installations/creator.py
index 2caec67e7d..c2dee72b16 100644
--- a/src/sentry/mediators/sentry_app_installations/creator.py
+++ b/src/sentry/mediators/sentry_app_installations/creator.py
@@ -4,9 +4,10 @@ import six
 
 from sentry.mediators import Mediator, Param, service_hooks
 from sentry.models import (
-    ApiAuthorization, ApiGrant, SentryApp, SentryAppInstallation
+    AuditLogEntryEvent, ApiAuthorization, ApiGrant, SentryApp, SentryAppInstallation
 )
 from sentry.utils.cache import memoize
+from sentry.utils.audit import create_audit_entry
 from sentry.tasks.sentry_apps import installation_webhook
 
 
@@ -14,6 +15,7 @@ class Creator(Mediator):
     organization = Param('sentry.models.Organization')
     slug = Param(six.string_types)
     user = Param('sentry.models.User')
+    request = Param('rest_framework.request.Request', required=False)
 
     def call(self):
         self._create_authorization()
@@ -58,6 +60,18 @@ class Creator(Mediator):
     def _notify_service(self):
         installation_webhook.delay(self.install.id, self.user.id)
 
+    def audit(self):
+        if self.request:
+            create_audit_entry(
+                request=self.request,
+                organization=self.install.organization,
+                target_object=self.install.organization.id,
+                event=AuditLogEntryEvent.SENTRY_APP_INSTALL,
+                data={
+                    'sentry_app': self.sentry_app.name,
+                },
+            )
+
     @memoize
     def api_application(self):
         return self.sentry_app.application
diff --git a/src/sentry/mediators/sentry_app_installations/destroyer.py b/src/sentry/mediators/sentry_app_installations/destroyer.py
index cf97260cdc..2657b95aa9 100644
--- a/src/sentry/mediators/sentry_app_installations/destroyer.py
+++ b/src/sentry/mediators/sentry_app_installations/destroyer.py
@@ -2,13 +2,15 @@ from __future__ import absolute_import
 
 from sentry.mediators import Mediator, Param
 from sentry.mediators import service_hooks
-from sentry.models import ServiceHook
+from sentry.models import AuditLogEntryEvent, ServiceHook
 from sentry.mediators.sentry_app_installations.installation_notifier import InstallationNotifier
+from sentry.utils.audit import create_audit_entry
 
 
 class Destroyer(Mediator):
     install = Param('sentry.models.SentryAppInstallation')
     user = Param('sentry.models.User')
+    request = Param('rest_framework.request.Request', required=False)
 
     def call(self):
         self._destroy_authorization()
@@ -40,3 +42,15 @@ class Destroyer(Mediator):
             action='deleted',
         )
         self.install.delete()
+
+    def audit(self):
+        if self.request:
+            create_audit_entry(
+                request=self.request,
+                organization=self.install.organization,
+                target_object=self.install.organization.id,
+                event=AuditLogEntryEvent.SENTRY_APP_UNINSTALL,
+                data={
+                    'sentry_app': self.install.sentry_app.name,
+                },
+            )
diff --git a/src/sentry/mediators/sentry_apps/creator.py b/src/sentry/mediators/sentry_apps/creator.py
index e25cda200b..0c63af6663 100644
--- a/src/sentry/mediators/sentry_apps/creator.py
+++ b/src/sentry/mediators/sentry_apps/creator.py
@@ -4,8 +4,9 @@ import six
 
 from collections import Iterable
 
+from sentry.utils.audit import create_audit_entry
 from sentry.mediators import Mediator, Param
-from sentry.models import (ApiApplication, SentryApp, SentryAppComponent, User,)
+from sentry.models import (AuditLogEntryEvent, ApiApplication, SentryApp, SentryAppComponent, User,)
 
 
 class Creator(Mediator):
@@ -18,6 +19,7 @@ class Creator(Mediator):
     is_alertable = Param(bool, default=False)
     schema = Param(dict, default=lambda self: {})
     overview = Param(six.string_types, required=False)
+    request = Param('rest_framework.request.Request', required=False)
 
     def call(self):
         self.proxy = self._create_proxy_user()
@@ -63,3 +65,15 @@ class Creator(Mediator):
                 sentry_app_id=self.app.id,
                 schema=element,
             )
+
+    def audit(self):
+        if self.request:
+            create_audit_entry(
+                request=self.request,
+                organization=self.organization,
+                target_object=self.organization.id,
+                event=AuditLogEntryEvent.SENTRY_APP_ADD,
+                data={
+                    'sentry_app': self.app.name,
+                },
+            )
diff --git a/src/sentry/mediators/sentry_apps/destroyer.py b/src/sentry/mediators/sentry_apps/destroyer.py
index aec32d67f9..0cfdb11eb2 100644
--- a/src/sentry/mediators/sentry_apps/destroyer.py
+++ b/src/sentry/mediators/sentry_apps/destroyer.py
@@ -2,10 +2,13 @@ from __future__ import absolute_import
 
 from sentry.mediators import Mediator, Param
 from sentry.mediators import sentry_app_installations
+from sentry.models import AuditLogEntryEvent
+from sentry.utils.audit import create_audit_entry
 
 
 class Destroyer(Mediator):
     sentry_app = Param('sentry.models.SentryApp')
+    request = Param('rest_framework.request.Request', required=False)
 
     def call(self):
         self._destroy_sentry_app_installations()
@@ -29,3 +32,15 @@ class Destroyer(Mediator):
 
     def _destroy_sentry_app(self):
         self.sentry_app.delete()
+
+    def audit(self):
+        if self.request:
+            create_audit_entry(
+                request=self.request,
+                organization=self.sentry_app.owner,
+                target_object=self.sentry_app.owner.id,
+                event=AuditLogEntryEvent.SENTRY_APP_REMOVE,
+                data={
+                    'sentry_app': self.sentry_app.name,
+                },
+            )
diff --git a/src/sentry/models/auditlogentry.py b/src/sentry/models/auditlogentry.py
index f424d20282..fd8f65d3d2 100644
--- a/src/sentry/models/auditlogentry.py
+++ b/src/sentry/models/auditlogentry.py
@@ -79,6 +79,12 @@ class AuditLogEntryEvent(object):
     INTEGRATION_EDIT = 111
     INTEGRATION_REMOVE = 112
 
+    SENTRY_APP_ADD = 113
+    # SENTRY_APP_EDIT = 114
+    SENTRY_APP_REMOVE = 115
+    SENTRY_APP_INSTALL = 116
+    SENTRY_APP_UNINSTALL = 117
+
     MONITOR_ADD = 120
     MONITOR_EDIT = 121
     MONITOR_REMOVE = 122
@@ -148,6 +154,10 @@ class AuditLogEntry(Model):
             (AuditLogEntryEvent.INTEGRATION_ADD, 'integration.add'),
             (AuditLogEntryEvent.INTEGRATION_EDIT, 'integration.edit'),
             (AuditLogEntryEvent.INTEGRATION_REMOVE, 'integration.remove'),
+            (AuditLogEntryEvent.SENTRY_APP_ADD, 'sentry-app.add'),
+            (AuditLogEntryEvent.SENTRY_APP_REMOVE, 'sentry-app.remove'),
+            (AuditLogEntryEvent.SENTRY_APP_INSTALL, 'sentry-app.install'),
+            (AuditLogEntryEvent.SENTRY_APP_UNINSTALL, 'sentry-app.uninstall'),
 
             (AuditLogEntryEvent.SET_ONDEMAND, 'ondemand.edit'),
             (AuditLogEntryEvent.TRIAL_STARTED, 'trial.started'),
@@ -316,4 +326,13 @@ class AuditLogEntry(Model):
             return 'disabled integration %s from project %s' % (
                 self.data['integration'], self.data['project'])
 
+        elif self.event == AuditLogEntryEvent.SENTRY_APP_ADD:
+            return 'created sentry app %s' % (self.data['sentry_app'])
+        elif self.event == AuditLogEntryEvent.SENTRY_APP_REMOVE:
+            return 'removed sentry app %s' % (self.data['sentry_app'])
+        elif self.event == AuditLogEntryEvent.SENTRY_APP_INSTALL:
+            return 'installed sentry app %s' % (self.data['sentry_app'])
+        elif self.event == AuditLogEntryEvent.SENTRY_APP_UNINSTALL:
+            return 'uninstalled sentry app %s' % (self.data['sentry_app'])
+
         return ''
diff --git a/tests/sentry/mediators/sentry_app_installations/test_creator.py b/tests/sentry/mediators/sentry_app_installations/test_creator.py
index a99bbce66d..41d8f88fd6 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_creator.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_creator.py
@@ -5,7 +5,7 @@ import responses
 from mock import patch
 
 from sentry.mediators.sentry_app_installations import Creator
-from sentry.models import ApiAuthorization, ApiGrant, ServiceHook, ServiceHookProject
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiAuthorization, ApiGrant, ServiceHook, ServiceHookProject
 from sentry.testutils import TestCase
 
 
@@ -70,6 +70,18 @@ class TestCreator(TestCase):
 
         assert not ServiceHookProject.objects.all()
 
+    @responses.activate
+    def test_creates_audit_log_entry(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
+        request = self.make_request(user=self.user, method='GET')
+        Creator.run(
+            organization=self.org,
+            slug='nulldb',
+            user=self.user,
+            request=request,
+        )
+        assert AuditLogEntry.objects.filter(event=AuditLogEntryEvent.SENTRY_APP_INSTALL).exists()
+
     @responses.activate
     @patch('sentry.mediators.sentry_app_installations.InstallationNotifier.run')
     def test_notifies_service(self, run):
diff --git a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
index 6b5b3cee13..95a2d70266 100644
--- a/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_app_installations/test_destroyer.py
@@ -5,7 +5,7 @@ import responses
 from django.db import connection
 
 from sentry.mediators.sentry_app_installations import Creator, Destroyer
-from sentry.models import ApiAuthorization, ApiGrant, SentryAppInstallation, ServiceHook
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiAuthorization, ApiGrant, SentryAppInstallation, ServiceHook
 from sentry.testutils import TestCase
 
 
@@ -76,6 +76,17 @@ class TestDestroyer(TestCase):
 
         assert not ServiceHook.objects.filter(pk=hook.id).exists()
 
+    @responses.activate
+    def test_creates_audit_log_entry(self):
+        responses.add(responses.POST, 'https://example.com/webhook')
+        request = self.make_request(user=self.user, method='GET')
+        Destroyer.run(
+            install=self.install,
+            user=self.user,
+            request=request,
+        )
+        assert AuditLogEntry.objects.filter(event=AuditLogEntryEvent.SENTRY_APP_UNINSTALL).exists()
+
     @responses.activate
     def test_soft_deletes_installation(self):
         responses.add(responses.POST, 'https://example.com/webhook')
diff --git a/tests/sentry/mediators/sentry_apps/test_creator.py b/tests/sentry/mediators/sentry_apps/test_creator.py
index 46b59ba420..645ad22c7d 100644
--- a/tests/sentry/mediators/sentry_apps/test_creator.py
+++ b/tests/sentry/mediators/sentry_apps/test_creator.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.mediators.sentry_apps import Creator
-from sentry.models import ApiApplication, SentryApp, SentryAppComponent, User
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiApplication, SentryApp, SentryAppComponent, User
 from sentry.testutils import TestCase
 
 
@@ -75,6 +75,18 @@ class TestCreator(TestCase):
             type='alert-rule-action',
         ).exists()
 
+    def test_creates_audit_log_entry(self):
+        request = self.make_request(user=self.user, method='GET')
+        Creator.run(
+            name='nulldb',
+            organization=self.org,
+            scopes=('project:read',),
+            webhook_url='http://example.com',
+            schema={'elements': [self.create_issue_link_schema()]},
+            request=request,
+        )
+        assert AuditLogEntry.objects.filter(event=AuditLogEntryEvent.SENTRY_APP_ADD).exists()
+
     def test_blank_schema(self):
         self.creator.schema = ''
         assert self.creator.call()
diff --git a/tests/sentry/mediators/sentry_apps/test_destroyer.py b/tests/sentry/mediators/sentry_apps/test_destroyer.py
index efbd64b57b..5e2d284690 100644
--- a/tests/sentry/mediators/sentry_apps/test_destroyer.py
+++ b/tests/sentry/mediators/sentry_apps/test_destroyer.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 from django.db import connection
 
 from sentry.mediators.sentry_apps import Destroyer
-from sentry.models import ApiApplication, User, SentryApp, SentryAppInstallation
+from sentry.models import AuditLogEntry, AuditLogEntryEvent, ApiApplication, User, SentryApp, SentryAppInstallation
 from sentry.testutils import TestCase
 
 
@@ -43,6 +43,14 @@ class TestDestroyer(TestCase):
 
         assert not User.objects.filter(pk=proxy_user.id).exists()
 
+    def test_creates_audit_log_entry(self):
+        request = self.make_request(user=self.user, method='GET')
+        Destroyer.run(
+            sentry_app=self.sentry_app,
+            request=request,
+        )
+        assert AuditLogEntry.objects.filter(event=AuditLogEntryEvent.SENTRY_APP_REMOVE).exists()
+
     def test_soft_deletes_sentry_app(self):
         self.destroyer.call()
 
