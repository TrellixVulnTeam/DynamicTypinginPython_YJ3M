commit 6ebcf740fdabe3159b58d3c7162ef05f142e6763
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Tue Nov 24 16:55:16 2015 -0800

    moar test coverage

diff --git a/tests/sentry/options/test_manager.py b/tests/sentry/options/test_manager.py
index 49ad49b09e..b2e8b1f20e 100644
--- a/tests/sentry/options/test_manager.py
+++ b/tests/sentry/options/test_manager.py
@@ -49,13 +49,20 @@ class OptionsManagerTest(TestCase):
         with self.assertRaises(UnknownOption):
             self.manager.get('does-not-exist')
 
+        with self.assertRaises(AssertionError):
+            # This key should already exist, and we can't re-register
+            self.manager.register('foo')
+
     def test_legacy_key(self):
         """
         Allow sentry: prefixed keys without any registration
         """
         # These just shouldn't blow up since they are implicitly registered
-        self.manager.get('sentry:foo')
+        assert self.manager.get('sentry:foo') == ''
         self.manager.set('sentry:foo', 'bar')
+        assert self.manager.get('sentry:foo') == 'bar'
+        assert self.manager.delete('sentry:foo')
+        assert self.manager.get('sentry:foo') == ''
 
     def test_types(self):
         self.manager.register('some-int', type=int)
@@ -76,6 +83,8 @@ class OptionsManagerTest(TestCase):
         self.manager.register('immutible', flags=OptionsManager.FLAG_IMMUTABLE)
         with self.assertRaises(AssertionError):
             self.manager.set('immutible', 'thing')
+        with self.assertRaises(AssertionError):
+            self.manager.delete('immutible')
 
     def test_flag_nostore(self):
         self.manager.register('nostore', flags=OptionsManager.FLAG_NOSTORE)
@@ -90,6 +99,9 @@ class OptionsManagerTest(TestCase):
                 with self.settings(SENTRY_OPTIONS={'nostore': 'foo'}):
                     assert self.manager.get('nostore') == 'foo'
 
+        with self.assertRaises(AssertionError):
+            self.manager.delete('nostore')
+
     def test_flag_storeonly(self):
         self.manager.register('storeonly', flags=OptionsManager.FLAG_STOREONLY)
         assert self.manager.get('storeonly') == ''
