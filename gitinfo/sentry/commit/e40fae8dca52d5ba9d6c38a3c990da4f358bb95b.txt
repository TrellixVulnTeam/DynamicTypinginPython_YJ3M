commit e40fae8dca52d5ba9d6c38a3c990da4f358bb95b
Author: Lauryn Brown <lauryndbrown@gmail.com>
Date:   Wed Oct 31 10:24:18 2018 -0700

    feat(integrations): Vsts default project. (#9841)
    
    * vsts default project.
    
    * saving place
    
    * Revised the vsts stuff.
    
    * fixed small errors.
    
    * Revised tests.
    
    * Added a test if no projects are returned.
    
    * Made adjustments recommended by mark. fixed tests.
    
    * Update tests/sentry/integrations/vsts/test_issues.py
    
    Co-Authored-By: lauryndbrown <lauryndbrown@gmail.com>

diff --git a/src/sentry/integrations/vsts/client.py b/src/sentry/integrations/vsts/client.py
index 266e2f1162..4c84f10b56 100644
--- a/src/sentry/integrations/vsts/client.py
+++ b/src/sentry/integrations/vsts/client.py
@@ -20,6 +20,7 @@ class VstsApiPath(object):
     commits = u'{instance}_apis/git/repositories/{repo_id}/commits'
     commits_batch = u'{instance}_apis/git/repositories/{repo_id}/commitsBatch'
     commits_changes = u'{instance}_apis/git/repositories/{repo_id}/commits/{commit_id}/changes'
+    project = u'{instance}_apis/projects/{project_id}'
     projects = u'{instance}_apis/projects'
     repository = u'{instance}{project}_apis/git/repositories/{repo_id}'
     repositories = u'{instance}{project}_apis/git/repositories'
@@ -226,6 +227,15 @@ class VstsApiClient(ApiClient, OAuth2RefreshMixin):
             }
         )
 
+    def get_project(self, instance, project_id):
+        return self.get(
+            VstsApiPath.project.format(
+                instance=instance,
+                project_id=project_id,
+            ),
+            params={'stateFilter': 'WellFormed'}
+        )
+
     def get_projects(self, instance):
         # TODO(dcramer): VSTS doesn't provide a way to search, so we're
         # making the assumption that a user has 100 or less projects today.
diff --git a/src/sentry/integrations/vsts/issues.py b/src/sentry/integrations/vsts/issues.py
index bbc4ae7ac1..f13db3c8b5 100644
--- a/src/sentry/integrations/vsts/issues.py
+++ b/src/sentry/integrations/vsts/issues.py
@@ -20,31 +20,59 @@ class VstsIssueSync(IssueSyncMixin):
     issue_fields = frozenset(['id', 'title', 'url'])
     done_categories = frozenset(['Resolved', 'Completed'])
 
-    def get_create_issue_config(self, group, **kwargs):
-        fields = super(VstsIssueSync, self).get_create_issue_config(group, **kwargs)
+    def get_persisted_default_config_fields(self):
+        return ['project']
+
+    def create_default_repo_choice(self, default_repo):
+        # default_repo should be the project_id
+        project = self.get_client().get_project(self.instance, default_repo)
+        return (project['id'], project['name'])
+
+    def get_project_choices(self, group, **kwargs):
         client = self.get_client()
         try:
             projects = client.get_projects(self.instance)['value']
-        except Exception as e:
+        except (ApiError, ApiUnauthorized, KeyError) as e:
             self.raise_error(e)
 
-        project_choices = []
-        initial_project = ('', '')
-        for project in projects:
-            project_id_and_name = '%s#%s' % (project['id'], project['name'])
-            project_choices.append((project_id_and_name, project['name']))
-            # TODO(lb): Properly handle default project after it has been implemented.
-            if project_id_and_name == self.default_project:
-                initial_project = project['name']
+        project_choices = [(project['id'], project['name']) for project in projects]
+
+        params = kwargs.get('params', {})
+        defaults = self.get_project_defaults(group.project_id)
+        try:
+            default_project = params.get(
+                'project', defaults.get('project') or project_choices[0][0])
+        except IndexError:
+            return None, project_choices
+
+        # If a project has been selected outside of the default list of
+        # projects, stick it onto the front of the list so that it can be
+        # selected.
+        try:
+            next(True for r in project_choices if r[0] == default_project)
+        except StopIteration:
+            try:
+                project_choices.insert(0, self.create_default_repo_choice(default_project))
+            except (ApiError, ApiUnauthorized):
+                return None, project_choices
+
+        return default_project, project_choices
+
+    def get_create_issue_config(self, group, **kwargs):
+        fields = super(VstsIssueSync, self).get_create_issue_config(group, **kwargs)
+        # Azure/VSTS has BOTH projects and repositories. A project can have many repositories.
+        # Workitems (issues) are associated with the project not the repository.
+        default_project, project_choices = self.get_project_choices(group, **kwargs)
+
         return [
             {
                 'name': 'project',
                 'required': True,
                 'type': 'choice',
                 'choices': project_choices,
-                'defaultValue': initial_project,
+                'defaultValue': default_project,
                 'label': _('Project'),
-                'placeholder': initial_project or _('MyProject'),
+                'placeholder': default_project or _('MyProject'),
             }
         ] + fields
 
@@ -67,10 +95,10 @@ class VstsIssueSync(IssueSyncMixin):
         """
         Creates the issue on the remote service and returns an issue ID.
         """
-        project = data.get('project') or self.default_project
-        if project is None:
-            raise ValueError('VSTS expects project')
-        project_id, project_name = project.split('#')
+        project_id = data.get('project')
+        if project_id is None:
+            raise ValueError('Azure DevOps expects project')
+
         client = self.get_client()
 
         title = data['title']
@@ -88,6 +116,7 @@ class VstsIssueSync(IssueSyncMixin):
         except Exception as e:
             self.raise_error(e)
 
+        project_name = created_item['fields']['System.AreaPath']
         return {
             'key': six.text_type(created_item['id']),
             'title': title,
diff --git a/tests/sentry/integrations/vsts/test_issues.py b/tests/sentry/integrations/vsts/test_issues.py
index f45b6d8f26..ed85a004bb 100644
--- a/tests/sentry/integrations/vsts/test_issues.py
+++ b/tests/sentry/integrations/vsts/test_issues.py
@@ -1,12 +1,16 @@
 from __future__ import absolute_import
 
 import responses
+import pytest
+import six
 
 from exam import fixture
 from django.test import RequestFactory
 from time import time
 
+from sentry.integrations.exceptions import IntegrationError
 from sentry.integrations.vsts.integration import VstsIntegration
+
 from sentry.models import (
     ExternalIssue, Identity, IdentityProvider, Integration,
     IntegrationExternalProject
@@ -17,7 +21,7 @@ from sentry.utils import json
 from .testutils import WORK_ITEM_RESPONSE, GET_PROJECTS_RESPONSE, GET_USERS_RESPONSE
 
 
-class VstsIssueSycnTest(TestCase):
+class VstsIssueBase(TestCase):
     @fixture
     def request(self):
         return RequestFactory()
@@ -56,6 +60,9 @@ class VstsIssueSycnTest(TestCase):
         self.integration = VstsIntegration(model, self.organization.id)
         self.issue_id = '309'
 
+
+class VstsIssueSyncTest(VstsIssueBase):
+
     @responses.activate
     def test_create_issue(self):
         responses.add(
@@ -65,12 +72,10 @@ class VstsIssueSycnTest(TestCase):
             content_type='application/json',
         )
 
-        # group = self.create_group(message='Hello world', culprit='foo.bar')
-
         form_data = {
             'title': 'Hello',
             'description': 'Fix this.',
-            'project': '0987654321#Fabrikam-Fiber-Git',
+            'project': '0987654321',
         }
         assert self.integration.create_issue(form_data) == {
             'key': self.issue_id,
@@ -101,14 +106,6 @@ class VstsIssueSycnTest(TestCase):
                 'path': '/fields/System.History',
                 'value': '<p>Fix this.</p>\n',
             },
-            # {
-            #     "op": "add",
-            #     "path": "/relations/-",
-            #     "value": {
-            #         "rel": "Hyperlink",
-            #         "url": 'http://testserver/baz/bar/issues/1/',
-            #     }
-            # }
         ]
 
     @responses.activate
@@ -214,3 +211,96 @@ class VstsIssueSycnTest(TestCase):
         work_id = 345
         url = self.integration.get_issue_url(work_id)
         assert url == 'https://fabrikam-fiber-inc.visualstudio.com/_workitems/edit/345'
+
+
+class VstsIssueFormTest(VstsIssueBase):
+    def setUp(self):
+        super(VstsIssueFormTest, self).setUp()
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/_apis/projects',
+            json={
+                'value': [
+                    {'id': 'project-1-id', 'name': 'project_1'},
+                    {'id': 'project-2-id', 'name': 'project_2'}
+                ]
+            },
+        )
+        self.group = self.create_group()
+        self.create_event(group=self.group)
+
+    def tearDown(self):
+        responses.reset()
+
+    def update_issue_defaults(self, defaults):
+        self.integration.org_integration.config = {
+            'project_issue_defaults': {
+                six.text_type(self.group.project_id): defaults
+            }
+        }
+        self.integration.org_integration.save()
+
+    def assert_project_field(self, fields, default_value, choices):
+        project_field = [field for field in fields if field['name'] == 'project'][0]
+        assert project_field['defaultValue'] == default_value
+        assert project_field['choices'] == choices
+
+    @responses.activate
+    def test_default_project(self):
+        self.update_issue_defaults({'project': 'project-2-id'})
+        fields = self.integration.get_create_issue_config(self.group)
+
+        self.assert_project_field(fields, 'project-2-id',
+                                  [('project-1-id', 'project_1'), ('project-2-id', 'project_2')])
+
+    @responses.activate
+    def test_default_project_default_missing_in_choices(self):
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/_apis/projects/project-3-id',
+            json={'id': 'project-3-id', 'name': 'project_3'},
+        )
+        self.update_issue_defaults({'project': 'project-3-id'})
+        fields = self.integration.get_create_issue_config(self.group)
+
+        self.assert_project_field(
+            fields, 'project-3-id', [
+                ('project-3-id', 'project_3'), ('project-1-id', 'project_1'), ('project-2-id', 'project_2')])
+
+    @responses.activate
+    def test_default_project_error_on_default_project(self):
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/_apis/projects/project-3-id',
+            status=404
+        )
+        self.update_issue_defaults({'project': 'project-3-id'})
+        fields = self.integration.get_create_issue_config(self.group)
+
+        self.assert_project_field(
+            fields, None, [
+                ('project-1-id', 'project_1'), ('project-2-id', 'project_2')])
+
+    @responses.activate
+    def test_get_create_issue_config_error_on_get_projects(self):
+        responses.reset()
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/_apis/projects',
+            status=503
+        )
+
+        with pytest.raises(IntegrationError):
+            self.integration.get_create_issue_config(self.group)
+
+    @responses.activate
+    def test_default_project_no_projects(self):
+        responses.reset()
+        responses.add(
+            responses.GET,
+            'https://fabrikam-fiber-inc.visualstudio.com/_apis/projects',
+            json={'value': []},
+        )
+        fields = self.integration.get_create_issue_config(self.group)
+
+        self.assert_project_field(fields, None, [])
