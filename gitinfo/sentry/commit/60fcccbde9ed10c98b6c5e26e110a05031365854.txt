commit 60fcccbde9ed10c98b6c5e26e110a05031365854
Author: Mark Story <mark@mark-story.com>
Date:   Mon Nov 5 16:45:29 2018 -0500

    fix(integrations) Fix crash when adding a repository fails (#10402)
    
    Fix usage of undefined variable so we can show an error indicator when
    saving a repository fails.
    
    Fixes JAVASCRIPT-4FS

diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
index 88f2002a11..c7ca2b1dd7 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/integrationRepos.jsx
@@ -126,7 +126,7 @@ export default class IntegrationRepos extends AsyncComponent {
       },
       error: errorData => {
         let text = errorData.responseJSON.errors
-          ? data.responseJSON.errors.__all__
+          ? errorData.responseJSON.errors.__all__
           : t('Unable to add repository.');
         IndicatorStore.addError(text);
       },
diff --git a/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
index d1c1dce4a6..50d3677df7 100644
--- a/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
+++ b/tests/js/spec/views/organizationIntegrations/integrationRepos.spec.jsx
@@ -15,6 +15,81 @@ describe('IntegrationRepos', function() {
     const integration = TestStubs.GitHubIntegration();
     const routerContext = TestStubs.routerContext();
 
+    describe('successful save', async function() {
+      let addRepo = Client.addMockResponse({
+        url: `/organizations/${org.slug}/repos/`,
+        method: 'POST',
+        body: TestStubs.Repository({integrationId: '1'}),
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/integrations/1/repos/`,
+        body: {
+          repos: [{identifier: 'repo-name', name: 'repo-name'}],
+        },
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/repos/`,
+        method: 'GET',
+        body: [],
+      });
+
+      const wrapper = mount(
+        <IntegrationRepos integration={integration} />,
+        routerContext
+      );
+      wrapper.find('DropdownButton').simulate('click');
+      wrapper.find('StyledListElement').simulate('click');
+      await wrapper.update();
+
+      expect(addRepo).toHaveBeenCalledWith(
+        `/organizations/${org.slug}/repos/`,
+        expect.objectContaining({
+          data: {
+            installation: '1',
+            provider: 'integrations:github',
+            identifier: 'repo-name',
+          },
+        })
+      );
+      let repoRow = wrapper.find('RepoOption').first();
+      expect(repoRow.find('strong').text()).toEqual('repo-name');
+    });
+
+    describe('save failure', async function() {
+      let addRepo = Client.addMockResponse({
+        url: `/organizations/${org.slug}/repos/`,
+        method: 'POST',
+        statusCode: 400,
+        body: {
+          errors: {
+            __all__: 'Repository already exists.',
+          },
+        },
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/integrations/1/repos/`,
+        body: {
+          repos: [{identifier: 'getsentry/sentry', name: 'sentry'}],
+        },
+      });
+      Client.addMockResponse({
+        url: `/organizations/${org.slug}/repos/`,
+        method: 'GET',
+        body: [],
+      });
+
+      const wrapper = mount(
+        <IntegrationRepos integration={integration} />,
+        routerContext
+      );
+      wrapper.find('DropdownButton').simulate('click');
+      wrapper.find('StyledListElement').simulate('click');
+      await wrapper.update();
+
+      expect(addRepo).toHaveBeenCalled();
+      expect(wrapper.find('RepoOption')).toHaveLength(0);
+    });
+
     describe('migratable repo', function() {
       Client.addMockResponse({
         url: `/organizations/${org.slug}/repos/`,
