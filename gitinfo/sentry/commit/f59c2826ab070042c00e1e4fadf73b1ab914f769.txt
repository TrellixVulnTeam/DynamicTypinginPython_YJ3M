commit f59c2826ab070042c00e1e4fadf73b1ab914f769
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 30 10:35:21 2015 +0200

    Functional project list

diff --git a/src/sentry/static/sentry/app/components/projectHeader.jsx b/src/sentry/static/sentry/app/components/projectHeader.jsx
index 50ca809920..c3b2cc69ee 100644
--- a/src/sentry/static/sentry/app/components/projectHeader.jsx
+++ b/src/sentry/static/sentry/app/components/projectHeader.jsx
@@ -34,6 +34,11 @@ var ProjectHeader = React.createClass({
         <div className="container">
           <div className="pull-right">
             <ul className="nav nav-tabs">
+              <li className={navSection == 'dashboard' ? 'active': ''}>
+                <Router.Link to="projectDashboard" params={routeParams}>
+                  Dashboard
+                </Router.Link>
+              </li>
               <li className={navSection == 'stream' ? 'active': ''}>
                 <Router.Link to="stream" params={routeParams}>
                   Stream
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 3a0d53494a..407d6419f8 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -17,6 +17,7 @@ var OrganizationDetails = require("./views/organizationDetails");
 var OrganizationStats = require("./views/organizationStats");
 var OrganizationTeams = require("./views/organizationTeams");
 var OrganizationProjects = require("./views/organizationProjects");
+var ProjectDashboard = require("./views/projectDashboard");
 var ProjectDetails = require("./views/projectDetails");
 var ProjectReleases = require("./views/projectReleases");
 var PropTypes = require("./proptypes");
@@ -28,12 +29,12 @@ var routes = (
   <Route name="app" path="/" handler={App}>
     <Route name="organizationDetails" path="/:orgId/" handler={OrganizationDetails}>
       <DefaultRoute name="organizationTeams" handler={OrganizationTeams} />
-      <Route name="organizationProjects" path="my-projects/" handler={OrganizationProjects} />
       <Route name="teamDetails" path="teams/:teamId/" handler={TeamDetails}>
         <DefaultRoute name="teamDashboard" handler={TeamDashboard} />
       </Route>
       <Route name="projectDetails" path=":projectId/" handler={ProjectDetails}>
         <DefaultRoute name="stream" handler={Stream} />
+        <Route name="projectDashboard" path="dashboard/" handler={ProjectDashboard} />
         <Route name="projectReleases" path="releases/" handler={ProjectReleases} />
         <Route name="groupDetails" path="group/:groupId/" handler={GroupDetails}
                ignoreScrollBehavior>
@@ -48,6 +49,7 @@ var routes = (
     </Route>
     <Route path="/organizations/:orgId/" handler={OrganizationDetails}>
       <Route name="organizationStats" path="stats/" handler={OrganizationStats} />
+      <Route name="organizationProjects" path="projects/" handler={OrganizationProjects} />
     </Route>
   </Route>
 );
diff --git a/src/sentry/static/sentry/app/views/organizationProjects.jsx b/src/sentry/static/sentry/app/views/organizationProjects.jsx
index 6a587669ce..47e36bb897 100644
--- a/src/sentry/static/sentry/app/views/organizationProjects.jsx
+++ b/src/sentry/static/sentry/app/views/organizationProjects.jsx
@@ -2,73 +2,74 @@
 
 var React = require("react");
 var Reflux = require("reflux");
+var Router = require("react-router");
 
+var AppState = require("../mixins/appState");
+var TeamStore = require("../stores/teamStore");
 var OrganizationHomeContainer = require("../components/organizationHomeContainer");
+var OrganizationState = require("../mixins/organizationState");
 
 var OrganizationProjects = React.createClass({
+  mixins: [
+    AppState,
+    OrganizationState,
+    Reflux.listenTo(TeamStore, "onTeamListChange")
+  ],
+
+  getInitialState() {
+    return {
+      projectList: this.getProjectList()
+    };
+  },
+
+  onTeamListChange() {
+    this.setState({
+      projectList: this.getProjectList()
+    });
+  },
+
+  getProjectList() {
+    var activeTeams = TeamStore.getActive();
+    var projectList = [];
+    activeTeams.forEach((team) => {
+      team.projects.forEach((project) => {
+        projectList.push([team, project]);
+      });
+    });
+    return projectList;
+  },
 
   render() {
+    var org = this.getOrganization();
 
     return (
       <OrganizationHomeContainer>
         <div>
           <h3>My Projects</h3>
           <table className="table my-projects">
-            <thead>
-              <tr>
-                <th>Project</th>
-                <th>&nbsp;</th>
-              </tr>
-            </thead>
             <tbody>
-              <tr>
-                <td>
-                  <a href="#">Captain Planet</a> <span className="divider">/</span> üåç<strong><a href="#">Earth</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
-              <tr>
-                <td>
-                  <a href="#">Captain Planet</a> <span className="divider">/</span> üî•<strong><a href="#">Fire</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
-              <tr>
-                <td>
-                  <a href="#">Captain Planet</a> <span className="divider">/</span> üí®<strong><a href="#">Wind</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
-              <tr>
-                <td>
-                  <a href="#">Captain Planet</a> <span className="divider">/</span> üíß<strong><a href="#">Water</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
-              <tr>
-                <td>
-                  <a href="#">Captain Planet</a> <span className="divider">/</span> üíñ<strong><a href="#">Heart</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
-              <tr>
-                <td>
-                  <a href="#">Massive Dynamic</a> <span className="divider">/</span> <strong><a href="#">Ludic Science</a></strong>
-                </td>
-                <td className="align-right">
-                  (graph)
-                </td>
-              </tr>
+              {this.state.projectList.map((item) => {
+                var team = item[0];
+                var project = item[1];
+                var projectRouteParams = {
+                  orgId: org.slug,
+                  projectId: project.slug
+                };
+                return (
+                  <tr>
+                    <td>
+                      <Router.Link
+                          to="projectDetails"
+                          params={projectRouteParams}>
+                        {team.name} / {project.name}
+                      </Router.Link>
+                    </td>
+                    <td className="align-right">
+                      (graph)
+                    </td>
+                  </tr>
+                );
+              })}
             </tbody>
           </table>
         </div>
diff --git a/src/sentry/static/sentry/app/views/projectDashboard.jsx b/src/sentry/static/sentry/app/views/projectDashboard.jsx
new file mode 100644
index 0000000000..15046e1f2e
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDashboard.jsx
@@ -0,0 +1,61 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var EventList = require("./projectDashboard/eventList");
+var ProjectState = require("../mixins/projectState");
+var ProjectChart = require("./projectDashboard/chart");
+
+var ProjectDashboard = React.createClass({
+  mixins: [
+    ProjectState
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    setProjectNavSection: React.PropTypes.func.isRequired
+  },
+
+  componentWillMount() {
+    this.props.setProjectNavSection('dashboard');
+  },
+
+  getTrendingEventsEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var qs = "sort_by=priority";
+    return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
+  },
+
+  getNewEventsEndpoint() {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    var qs = "sort_by=new";
+    return "/projects/" + params.orgId + "/" + params.projectId + "/groups/?" + qs;
+  },
+
+  render() {
+    return (
+      <div>
+        <ProjectChart />
+        <div className="row">
+          <div className="col-md-6">
+            <EventList
+                title="Trending Events"
+                endpoint={this.getTrendingEventsEndpoint()} />
+          </div>
+          <div className="col-md-6">
+            <EventList
+                title="New Events"
+                endpoint={this.getNewEventsEndpoint()} />
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = ProjectDashboard;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
new file mode 100644
index 0000000000..1fb098bace
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDashboard/chart.jsx
@@ -0,0 +1,103 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var api = require("../../api");
+var BarChart = require("../../components/barChart");
+var LoadingError = require("../../components/loadingError");
+var LoadingIndicator = require("../../components/loadingIndicator");
+var RouteMixin = require("../../mixins/routeMixin");
+var ProjectState = require("../../mixins/projectState");
+
+var ProjectChart = React.createClass({
+  mixins: [
+    RouteMixin,
+    ProjectState,
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  getInitialState() {
+    return {
+      loading: true,
+      error: false,
+      stats: []
+    };
+  },
+
+  getStatsEndpoint() {
+    var org = this.getOrganization();
+    var project = this.getProject();
+    if (org && project) {
+      return "/projects/" + org.slug + "/" + project.slug + "/stats/";
+    }
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  routeDidChange(nextPath, nextParams) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (params.orgId != nextParams.orgId || nextParams.projectId != params.projectId) {
+      this.fetchData();
+    }
+  },
+
+  fetchData() {
+    var endpoint = this.getStatsEndpoint();
+    if (!endpoint) {
+      return;
+    }
+
+    this.setState({
+      error: false,
+      loading: true
+    });
+
+    api.request(endpoint, {
+      query: {
+        since: (new Date().getTime() / 1000) - (3600 * 24 * 7)
+      },
+      success: (data) => {
+        this.setState({
+          stats: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  render() {
+    var points = this.state.stats.map((point) => {
+      return {x: point[0], y: point[1]};
+    });
+
+    return (
+      <div className="bar-chart team-chart">
+        <h6>Last 7 days</h6>
+
+        {this.state.loading ?
+          <LoadingIndicator />
+        : (this.state.error ?
+          <LoadingError onRetry={this.fetchData} />
+        :
+          <BarChart points={points} className="sparkline" />
+        )}
+      </div>
+    );
+  }
+});
+
+module.exports = ProjectChart;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
new file mode 100644
index 0000000000..24acb1bee9
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDashboard/eventList.jsx
@@ -0,0 +1,195 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+var Router = require("react-router");
+
+var api = require("../../api");
+var Count = require("../../components/count");
+var LoadingError = require("../../components/loadingError");
+var LoadingIndicator = require("../../components/loadingIndicator");
+var PropTypes = require("../../proptypes");
+var RouteMixin = require("../../mixins/routeMixin");
+var TimeSince = require("../../components/timeSince");
+var ProjectState = require("../../mixins/projectState");
+
+var EventNode = React.createClass({
+  mixins: [ProjectState],
+
+  propTypes: {
+    group: PropTypes.Group.isRequired
+  },
+
+  makeGroupLink(title) {
+    var group = this.props.group;
+    var org = this.getOrganization();
+
+    var params = {
+      orgId: org.slug,
+      projectId: group.project.slug,
+      groupId: group.id
+    };
+
+    return (
+      <Router.Link to="groupDetails" params={params}>
+        {title}
+      </Router.Link>
+    );
+  },
+
+  render() {
+    var group = this.props.group;
+
+    var userCount = (group.tags["sentry:user"] !== undefined ?
+      userCount = group.tags["sentry:user"].count :
+      0);
+
+    return (
+      <li className="group">
+        <div className="row">
+          <div className="col-xs-8 event-details">
+            <h3>{this.makeGroupLink(group.title)}</h3>
+            <div className="event-message">{group.culprit}</div>
+            <div className="event-meta">
+              <span>First:</span>
+              <TimeSince date={group.firstSeen} className="first-seen"/>
+              &nbsp;&mdash;&nbsp;
+              <span>Last:</span>
+              <TimeSince date={group.lastSeen} className="last-seen"/>
+            </div>
+          </div>
+          <div className="col-xs-2 event-occurrences align-right">
+            <Count value={group.count} />
+          </div>
+          <div className="col-xs-2 event-users align-right">
+            <Count value={userCount} />
+          </div>
+        </div>
+      </li>
+    );
+  }
+});
+
+var EventList = React.createClass({
+  mixins: [
+    RouteMixin
+  ],
+
+  contextTypes: {
+    router: React.PropTypes.func
+  },
+
+  propTypes: {
+    title: React.PropTypes.string.isRequired,
+    endpoint: React.PropTypes.string.isRequired
+  },
+
+  getInitialState() {
+    return {
+      groupList: [],
+      loading: true,
+      error: false,
+      statsPeriod: "24h"
+    };
+  },
+
+  componentWillMount() {
+    this.fetchData();
+  },
+
+  routeDidChange(nextPath, nextParams) {
+    var router = this.context.router;
+    var params = router.getCurrentParams();
+    if (nextParams.teamId != params.teamId) {
+      this.fetchData();
+    }
+  },
+
+  componentDidUpdate(_, prevState) {
+    if (this.state.statsPeriod != prevState.statsPeriod) {
+      this.fetchData();
+    }
+  },
+
+  fetchData() {
+    this.setState({
+      loading: true,
+      error: false
+    });
+
+    var minutes;
+    switch(this.state.statsPeriod) {
+      case "15m":
+        minutes = "15";
+        break;
+      case "60m":
+        minutes = "60";
+        break;
+      case "24h":
+        minutes = "1440";
+        break;
+    }
+
+    api.request(this.props.endpoint, {
+      query: {
+        limit: 5,
+        minutes: minutes
+      },
+      success: (data) => {
+        this.setState({
+          groupList: data,
+          loading: false,
+          error: false
+        });
+      },
+      error: () => {
+        this.setState({
+          loading: false,
+          error: true
+        });
+      }
+    });
+  },
+
+  onSelectStatsPeriod(period) {
+    this.setState({
+      statsPeriod: period
+    });
+  },
+
+  render() {
+    var eventNodes = this.state.groupList.map((item) => {
+      return <EventNode group={item} key={item.id} />;
+    });
+
+    return (
+      <div className="box">
+        <div className="box-header clearfix">
+          <div className="row">
+            <div className="col-xs-8">
+              <h3>{this.props.title}</h3>
+            </div>
+            <div className="col-xs-2 align-right">Events</div>
+            <div className="col-xs-2 align-right">Users</div>
+          </div>
+        </div>
+        <div className="box-content">
+          <div className="tab-pane active">
+            {this.state.loading ?
+              <LoadingIndicator />
+            : (this.state.error ?
+              <LoadingError onRetry={this.fetchData} />
+            : (eventNodes.length ?
+              <ul className="group-list group-list-small">
+                {eventNodes}
+              </ul>
+            :
+              <div className="group-list-empty">No data available.</div>
+            ))}
+          </div>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = EventList;
diff --git a/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
new file mode 100644
index 0000000000..5383c198b5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/projectDashboard/statsBar.jsx
@@ -0,0 +1,30 @@
+/*** @jsx React.DOM */
+
+var React = require("react");
+
+var TeamStatsBar = React.createClass({
+  render() {
+    return (
+      <div className="row team-stats">
+        <div className="col-md-3 stat-column">
+          <span className="count">323</span>
+          <span className="count-label">events seen</span>
+        </div>
+        <div className="col-md-3 stat-column">
+          <span className="count">137</span>
+          <span className="count-label">new events</span>
+        </div>
+        <div className="col-md-3 stat-column">
+          <span className="count">16</span>
+          <span className="count-label">releases</span>
+        </div>
+        <div className="col-md-3 stat-column align-right bad">
+          <span className="count">20%</span>
+          <span className="count-label">more than last week</span>
+        </div>
+      </div>
+    );
+  }
+});
+
+module.exports = TeamStatsBar;
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index cb8c2cfba5..8b8068fff9 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -217,6 +217,8 @@ urlpatterns += patterns('',
         name='sentry-create-organization-member'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/members/(?P<member_id>\d+)/$', OrganizationMemberSettingsView.as_view(),
         name='sentry-organization-member-settings'),
+    url(r'^organizations/(?P<organization_slug>[\w_-]+)/projects/$', ReactPageView.as_view(),
+        name='sentry-organization-projects'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/stats/$', ReactPageView.as_view(),
         name='sentry-organization-stats'),
     url(r'^organizations/(?P<organization_slug>[\w_-]+)/settings/$', OrganizationSettingsView.as_view(),
@@ -398,6 +400,8 @@ urlpatterns += patterns('',
         name='sentry-group-tag-details'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/releases/$', ReactPageView.as_view(),
         name='sentry-releases'),
+    url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/dashboard/$', ReactPageView.as_view(),
+        name='sentry-dashboard'),
     url(r'^(?P<organization_slug>[\w_-]+)/(?P<project_id>[\w_-]+)/$', ReactPageView.as_view(),
         name='sentry-stream'),
 
