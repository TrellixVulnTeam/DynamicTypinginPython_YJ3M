commit ef59aece3154bc3d841cbb1cac9bcf63e2d8e4e6
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Fri Jan 17 13:10:04 2020 -0800

    fix(eventstore): Revert Nodestore changes in get_events (#16518)
    
    This reverts eventstore changes introduced in #16230, which bind node data. Since loading from nodestore is slower than expected we will attempt this change again once node data caching is introduced.
    
    I am not using reverting the entire commit since we still want to keep the search_message / message improvements that were included in the original.

diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 023a7a679c..7139199c0a 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -94,7 +94,14 @@ class GroupEventsEndpoint(GroupEndpoint, EnvironmentMixin):
         snuba_filter = get_filter(request.GET.get("query", None), params)
         snuba_filter.conditions.append(["event.type", "!=", "transaction"])
 
-        data_fn = partial(eventstore.get_events, referrer="api.group-events", filter=snuba_filter)
+        snuba_cols = None if full else eventstore.full_columns
+
+        data_fn = partial(
+            eventstore.get_events,
+            additional_columns=snuba_cols,
+            referrer="api.group-events",
+            filter=snuba_filter,
+        )
 
         serializer = EventSerializer() if full else SimpleEventSerializer()
         return self.paginate(
diff --git a/src/sentry/api/endpoints/organization_events.py b/src/sentry/api/endpoints/organization_events.py
index b36af34bf8..8bdde13c37 100644
--- a/src/sentry/api/endpoints/organization_events.py
+++ b/src/sentry/api/endpoints/organization_events.py
@@ -49,8 +49,11 @@ class OrganizationEventsEndpoint(OrganizationEventsEndpointBase):
             # or user doesn't have access to projects in org
             data_fn = lambda *args, **kwargs: []
         else:
+            cols = None if full else eventstore.full_columns
+
             data_fn = partial(
                 eventstore.get_events,
+                additional_columns=cols,
                 referrer="api.organization-events",
                 filter=eventstore.Filter(
                     start=snuba_args["start"],
diff --git a/src/sentry/api/endpoints/project_events.py b/src/sentry/api/endpoints/project_events.py
index d0e4147007..6d388c465b 100644
--- a/src/sentry/api/endpoints/project_events.py
+++ b/src/sentry/api/endpoints/project_events.py
@@ -49,10 +49,12 @@ class ProjectEventsEndpoint(ProjectEndpoint):
             )
 
         full = request.GET.get("full", False)
+        cols = None if full else eventstore.full_columns
 
         data_fn = partial(
             eventstore.get_events,
             filter=eventstore.Filter(conditions=conditions, project_ids=[project.id]),
+            additional_columns=cols,
             referrer="api.project-events",
         )
 
diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 40243a195a..a700f1ccf6 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -6,6 +6,7 @@ from datetime import datetime
 from django.utils import timezone
 from semaphore import meta_with_chunks
 
+from sentry import eventstore
 from sentry.api.serializers import Serializer, register, serialize
 from sentry.models import EventAttachment, EventError, Release, UserReport
 from sentry.search.utils import convert_user_tag_to_query
@@ -166,6 +167,8 @@ class EventSerializer(Serializer):
         return serialize(user_report, user)
 
     def get_attrs(self, item_list, user, is_public=False):
+        eventstore.bind_nodes(item_list, "data")
+
         crash_files = get_crash_files(item_list)
         results = {}
         for item in item_list:
diff --git a/src/sentry/deletions/defaults/group.py b/src/sentry/deletions/defaults/group.py
index 2ad2d223df..0edcd7f1c1 100644
--- a/src/sentry/deletions/defaults/group.py
+++ b/src/sentry/deletions/defaults/group.py
@@ -33,7 +33,7 @@ class EventDataDeletionTask(BaseDeletionTask):
                 ]
             )
 
-        events = eventstore.get_unfetched_events(
+        events = eventstore.get_events(
             filter=eventstore.Filter(
                 conditions=conditions, project_ids=[self.project_id], group_ids=[self.group_id]
             ),
diff --git a/src/sentry/eventstore/base.py b/src/sentry/eventstore/base.py
index b11cf0d3fe..ba8a31779a 100644
--- a/src/sentry/eventstore/base.py
+++ b/src/sentry/eventstore/base.py
@@ -62,10 +62,10 @@ class Filter(object):
 class EventStorage(Service):
     __all__ = (
         "minimal_columns",
+        "full_columns",
         "create_event",
         "get_event_by_id",
         "get_events",
-        "get_unfetched_events",
         "get_prev_event_id",
         "get_next_event_id",
         "get_earliest_event_id",
@@ -79,14 +79,40 @@ class EventStorage(Service):
     # avoid duplicated work.
     minimal_columns = [Columns.EVENT_ID, Columns.GROUP_ID, Columns.PROJECT_ID, Columns.TIMESTAMP]
 
+    # A list of all useful columns we can get from snuba.
+    full_columns = minimal_columns + [
+        Columns.CULPRIT,
+        Columns.LOCATION,
+        Columns.MESSAGE,
+        Columns.PLATFORM,
+        Columns.TITLE,
+        Columns.TYPE,
+        Columns.TRANSACTION,
+        # Required to provide snuba-only tags
+        Columns.TAGS_KEY,
+        Columns.TAGS_VALUE,
+        # Required to provide snuba-only 'user' interface
+        Columns.USER_EMAIL,
+        Columns.USER_IP_ADDRESS,
+        Columns.USER_ID,
+        Columns.USER_USERNAME,
+    ]
+
     def get_events(
-        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_events"
+        self,
+        filter,
+        additional_columns=None,
+        orderby=None,
+        limit=100,
+        offset=0,
+        referrer="eventstore.get_events",
     ):
         """
         Fetches a list of events given a set of criteria.
 
         Arguments:
         filter (Filter): Filter
+        additional_columns (Sequence[Column]): List of additional columns to fetch - default None
         orderby (Sequence[str]): List of fields to order by - default ['-time', '-event_id']
         limit (int): Query limit - default 100
         offset (int): Query offset - default 0
@@ -94,27 +120,6 @@ class EventStorage(Service):
         """
         raise NotImplementedError
 
-    def get_unfetched_events(
-        self, filter, orderby=None, limit=100, offset=0, referrer="eventstore.get_unfetched_events"
-    ):
-        """
-        Same as get_events but returns events without their node datas loaded.
-        Only the event ID, projectID, groupID and timestamp field will be present without
-        an additional fetch to nodestore.
-
-        Used for fetching large volumes of events that do not need data loaded
-        from nodestore. Currently this is just used for event data deletions where
-        we just need the event IDs in order to process the deletions.
-
-        Arguments:
-        filter (Filter): Filter
-        orderby (Sequence[str]): List of fields to order by - default ['-time', '-event_id']
-        limit (int): Query limit - default 100
-        offset (int): Query offset - default 0
-        referrer (string): Referrer - default "eventstore.get_unfetched_events"
-        """
-        raise NotImplementedError
-
     def get_event_by_id(self, project_id, event_id):
         """
         Gets a single event given a project_id and event_id.
@@ -173,9 +178,7 @@ class EventStorage(Service):
         """
         Returns an Event from processed data
         """
-        return Event(
-            project_id=project_id, event_id=event_id, group_id=group_id, data=data
-        )
+        return Event(project_id=project_id, event_id=event_id, group_id=group_id, data=data)
 
     def bind_nodes(self, object_list, node_name="data"):
         """
diff --git a/src/sentry/eventstore/snuba/backend.py b/src/sentry/eventstore/snuba/backend.py
index 66e63b16bf..f7d362d996 100644
--- a/src/sentry/eventstore/snuba/backend.py
+++ b/src/sentry/eventstore/snuba/backend.py
@@ -47,54 +47,17 @@ class SnubaEventStorage(EventStorage):
     def get_events(
         self,
         filter,
+        additional_columns=None,
         orderby=None,
         limit=DEFAULT_LIMIT,
         offset=DEFAULT_OFFSET,
         referrer="eventstore.get_events",
     ):
         """
-        Get events from Snuba, with node data loaded.
+        Get events from Snuba.
         """
-        return self.__get_events(
-            filter,
-            orderby=orderby,
-            limit=limit,
-            offset=offset,
-            referrer=referrer,
-            should_bind_nodes=True,
-        )
-
-    def get_unfetched_events(
-        self,
-        filter,
-        orderby=None,
-        limit=DEFAULT_LIMIT,
-        offset=DEFAULT_OFFSET,
-        referrer="eventstore.get_unfetched_events",
-    ):
-        """
-        Get events from Snuba, without node data loaded.
-        """
-        return self.__get_events(
-            filter,
-            orderby=orderby,
-            limit=limit,
-            offset=offset,
-            referrer=referrer,
-            should_bind_nodes=False,
-        )
-
-    def __get_events(
-        self,
-        filter,
-        orderby=None,
-        limit=DEFAULT_LIMIT,
-        offset=DEFAULT_OFFSET,
-        referrer=None,
-        should_bind_nodes=False,
-    ):
         assert filter, "You must provide a filter"
-        cols = self.__get_columns()
+        cols = self.__get_columns(additional_columns)
         orderby = orderby or DESC_ORDERING
 
         result = snuba.dataset_query(
@@ -111,10 +74,7 @@ class SnubaEventStorage(EventStorage):
         )
 
         if "error" not in result:
-            events = [self.__make_event(evt) for evt in result["data"]]
-            if should_bind_nodes:
-                self.bind_nodes(events)
-            return events
+            return [self.__make_event(evt) for evt in result["data"]]
 
         return []
 
@@ -209,7 +169,7 @@ class SnubaEventStorage(EventStorage):
 
         return self.__get_event_id_from_filter(filter=filter, orderby=DESC_ORDERING)
 
-    def __get_columns(self, additional_columns=None):
+    def __get_columns(self, additional_columns):
         columns = EventStorage.minimal_columns
 
         if additional_columns:
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index 48df644244..d0634e1bb8 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -27,9 +27,8 @@ from sentry.interfaces.base import get_interfaces
 from sentry.utils import json
 from sentry.utils.cache import memoize
 from sentry.utils.canonical import CanonicalKeyDict, CanonicalKeyView
-from sentry.utils.safe import get_path
+from sentry.utils.safe import get_path, trim
 from sentry.utils.strings import truncatechars
-from sentry.utils.safe import trim
 
 
 class EventDict(CanonicalKeyDict):
diff --git a/src/sentry/tasks/unmerge.py b/src/sentry/tasks/unmerge.py
index 62f8343719..4b77d46ac8 100644
--- a/src/sentry/tasks/unmerge.py
+++ b/src/sentry/tasks/unmerge.py
@@ -518,6 +518,8 @@ def unmerge(
 
         return destination_id
 
+    eventstore.bind_nodes(events, "data")
+
     source_events = []
     destination_events = []
 
diff --git a/tests/sentry/eventstore/test_base.py b/tests/sentry/eventstore/test_base.py
index 6444f49a53..1aa85f4698 100644
--- a/tests/sentry/eventstore/test_base.py
+++ b/tests/sentry/eventstore/test_base.py
@@ -21,6 +21,9 @@ class EventStorageTest(TestCase):
     def test_minimal_columns(self):
         assert len(self.eventstorage.minimal_columns) == 4
 
+    def test_full_columns(self):
+        assert len(self.eventstorage.full_columns) == 17
+
     def test_bind_nodes(self):
         """
         Test that bind_nodes populates _node_data
diff --git a/tests/sentry/eventstore/test_models.py b/tests/sentry/eventstore/test_models.py
index 72def2170b..d10042b380 100644
--- a/tests/sentry/eventstore/test_models.py
+++ b/tests/sentry/eventstore/test_models.py
@@ -3,6 +3,7 @@ from __future__ import absolute_import
 import pickle
 import pytest
 
+from sentry import eventstore
 from sentry.db.models.fields.node import NodeData
 from sentry.eventstore.models import Event
 from sentry.models import Environment
@@ -199,24 +200,7 @@ class EventTest(TestCase):
             project_id=self.project.id,
             event_id="a" * 32,
             snuba_data=snuba.raw_query(
-                selected_columns=[
-                    "event_id",
-                    "project_id",
-                    "group_id",
-                    "timestamp",
-                    "culprit",
-                    "location",
-                    "message",
-                    "title",
-                    "type",
-                    "transaction",
-                    "tags.key",
-                    "tags.value",
-                    "email",
-                    "ip_address",
-                    "user_id",
-                    "username",
-                ],
+                selected_columns=[col.value.event_name for col in eventstore.full_columns],
                 filter_keys={"project_id": [self.project.id], "event_id": ["a" * 32]},
             )["data"][0],
         )
