commit 9f7c3ef54a215210ca6532d5b29e9f1f6c64a12f
Author: Jan Michael Auer <jan.auer@sentry.io>
Date:   Tue Oct 29 21:54:24 2019 +0100

    fix(store): Consider functions without filename for event title (#15320)

diff --git a/src/sentry/eventtypes/error.py b/src/sentry/eventtypes/error.py
index 6e54112dd4..daaa1c4ffc 100644
--- a/src/sentry/eventtypes/error.py
+++ b/src/sentry/eventtypes/error.py
@@ -11,7 +11,7 @@ def get_crash_location(data):
     from sentry.stacktraces.processing import get_crash_frame_from_event_data
 
     frame = get_crash_frame_from_event_data(
-        data, frame_filter=lambda x: x.get("filename") or x.get("abs_path")
+        data, frame_filter=lambda x: x.get("function") not in (None, "<redacted>", "<unknown>")
     )
     if frame is not None:
         from sentry.stacktraces.functions import get_function_name_for_frame
diff --git a/tests/sentry/eventtypes/test_error.py b/tests/sentry/eventtypes/test_error.py
index e15124ae3a..d299341e8c 100644
--- a/tests/sentry/eventtypes/test_error.py
+++ b/tests/sentry/eventtypes/test_error.py
@@ -15,6 +15,31 @@ class ErrorEventTest(TestCase):
         data = {"exception": {"values": [{"type": None, "value": None, "stacktrace": {}}]}}
         assert inst.get_metadata(data) == {"type": "Error", "value": ""}
 
+    def test_get_metadata_function(self):
+        inst = ErrorEvent()
+        data = {
+            "platform": "native",
+            "exception": {
+                "values": [
+                    {
+                        "stacktrace": {
+                            "frames": [
+                                {"in_app": True, "function": "void top_func(int)"},
+                                {"in_app": False, "function": "void invalid_func(int)"},
+                                {"in_app": True, "function": "<unknown>"},
+                            ]
+                        }
+                    }
+                ]
+            },
+        }
+        assert inst.get_metadata(data) == {"type": "Error", "value": "", "function": "top_func"}
+
+    def test_get_metadata_function_none_frame(self):
+        inst = ErrorEvent()
+        data = {"exception": {"values": [{"stacktrace": {"frames": [None]}}]}}
+        assert inst.get_metadata(data) == {"type": "Error", "value": ""}
+
     def test_get_title_none_value(self):
         inst = ErrorEvent()
         result = inst.get_title({"type": "Error", "value": None})
