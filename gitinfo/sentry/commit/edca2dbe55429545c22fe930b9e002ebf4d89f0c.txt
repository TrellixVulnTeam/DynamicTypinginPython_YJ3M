commit edca2dbe55429545c22fe930b9e002ebf4d89f0c
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 1 10:39:55 2018 -0700

    feat(feedback): Support DSN-based feedback submission
    
    - Support DSN-based authorization header (Authorization: DSN [dsn])
    - Allow POST via DSN authorization to /projects/{project}/user-feedback/

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 74d1cbf77f..c75c805a61 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -5,7 +5,7 @@ from django.utils.crypto import constant_time_compare
 from rest_framework.authentication import (BasicAuthentication, get_authorization_header)
 from rest_framework.exceptions import AuthenticationFailed
 
-from sentry.models import ApiApplication, ApiKey, ApiToken, Relay
+from sentry.models import ApiApplication, ApiKey, ApiToken, ProjectKey, Relay
 from sentry.relay.utils import get_header_relay_id, get_header_relay_signature
 from sentry.utils.sdk import configure_scope
 
@@ -17,6 +17,25 @@ class QuietBasicAuthentication(BasicAuthentication):
         return 'xBasic realm="%s"' % self.www_authenticate_realm
 
 
+class StandardAuthentication(QuietBasicAuthentication):
+    token_name = None
+
+    def authenticate(self, request):
+        auth = get_authorization_header(request).split()
+
+        if not auth or auth[0].lower() != self.token_name:
+            return None
+
+        if len(auth) == 1:
+            msg = 'Invalid token header. No credentials provided.'
+            raise AuthenticationFailed(msg)
+        elif len(auth) > 2:
+            msg = 'Invalid token header. Token string should not contain spaces.'
+            raise AuthenticationFailed(msg)
+
+        return self.authenticate_credentials(auth[1])
+
+
 class RelayAuthentication(BasicAuthentication):
     def authenticate(self, request):
         relay_id = get_header_relay_id(request)
@@ -104,21 +123,8 @@ class ClientIdSecretAuthentication(QuietBasicAuthentication):
             raise invalid_pair_error
 
 
-class TokenAuthentication(QuietBasicAuthentication):
-    def authenticate(self, request):
-        auth = get_authorization_header(request).split()
-
-        if not auth or auth[0].lower() != b'bearer':
-            return None
-
-        if len(auth) == 1:
-            msg = 'Invalid token header. No credentials provided.'
-            raise AuthenticationFailed(msg)
-        elif len(auth) > 2:
-            msg = 'Invalid token header. Token string should not contain spaces.'
-            raise AuthenticationFailed(msg)
-
-        return self.authenticate_credentials(auth[1])
+class TokenAuthentication(StandardAuthentication):
+    token_name = b'bearer'
 
     def authenticate_credentials(self, token):
         try:
@@ -138,6 +144,26 @@ class TokenAuthentication(QuietBasicAuthentication):
             raise AuthenticationFailed('UserApplication inactive or deleted')
 
         with configure_scope() as scope:
+            scope.set_tag("api_token_type", self.token_name)
             scope.set_tag("api_token", token.id)
 
         return (token.user, token)
+
+
+class DSNAuthentication(StandardAuthentication):
+    token_name = b'dsn'
+
+    def authenticate_credentials(self, token):
+        try:
+            key = ProjectKey.from_dsn(token)
+        except ProjectKey.DoesNotExist:
+            raise AuthenticationFailed('Invalid token')
+
+        if not key.is_active:
+            raise AuthenticationFailed('Invalid token')
+
+        with configure_scope() as scope:
+            scope.set_tag("api_token_type", self.token_name)
+            scope.set_tag("api_project_key", key.id)
+
+        return (AnonymousUser(), key)
diff --git a/src/sentry/api/bases/project.py b/src/sentry/api/bases/project.py
index 14a3d6e168..f61ce3d2a1 100644
--- a/src/sentry/api/bases/project.py
+++ b/src/sentry/api/bases/project.py
@@ -27,7 +27,6 @@ class ProjectPermission(OrganizationPermission):
 
         if not result:
             return result
-
         if project.teams.exists():
             return any(
                 has_team_permission(request, team, self.scope_map) for team in project.teams.all()
@@ -46,6 +45,8 @@ class ProjectPermission(OrganizationPermission):
                 return False
 
             return roles.get(role).is_global
+        elif hasattr(request.auth, 'project_id') and project.id == request.auth.project_id:
+            return True
 
         return False
 
diff --git a/src/sentry/api/endpoints/project_user_reports.py b/src/sentry/api/endpoints/project_user_reports.py
index 45bea20d14..b26a75f76c 100644
--- a/src/sentry/api/endpoints/project_user_reports.py
+++ b/src/sentry/api/endpoints/project_user_reports.py
@@ -6,11 +6,19 @@ from django.utils import timezone
 from rest_framework import serializers
 from uuid import uuid4
 
+from sentry.api.authentication import DSNAuthentication
 from sentry.api.base import DocSection, EnvironmentMixin
 from sentry.api.bases.project import ProjectEndpoint
 from sentry.api.serializers import serialize, ProjectUserReportSerializer
 from sentry.api.paginator import DateTimePaginator
-from sentry.models import (Environment, Event, EventUser, Group, GroupStatus, UserReport)
+from sentry.models import (
+    Environment,
+    Event,
+    EventUser,
+    Group,
+    GroupStatus,
+    ProjectKey,
+    UserReport)
 from sentry.signals import user_feedback_received
 from sentry.utils.apidocs import scenario, attach_scenarios
 
@@ -37,6 +45,7 @@ class UserReportSerializer(serializers.ModelSerializer):
 
 
 class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
+    authentication_classes = ProjectEndpoint.authentication_classes + (DSNAuthentication,)
     doc_section = DocSection.PROJECTS
 
     def get(self, request, project):
@@ -50,6 +59,10 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         :pparam string project_slug: the slug of the project.
         :auth: required
         """
+        # we dont allow read permission with DSNs
+        if isinstance(request.auth, ProjectKey):
+            return self.respond(status=401)
+
         try:
             environment = self._get_environment_from_request(
                 request,
@@ -101,6 +114,8 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
 
         If feedback is rejected due to a mutability threshold, a 409 status code will be returned.
 
+        Note: Feedback may be submitted with DSN authentication (see auth documentation).
+
         :pparam string organization_slug: the slug of the organization.
         :pparam string project_slug: the slug of the project.
         :auth: required
@@ -109,6 +124,9 @@ class ProjectUserReportsEndpoint(ProjectEndpoint, EnvironmentMixin):
         :param string email: user's email address
         :param string comments: comments supplied by user
         """
+        if hasattr(request.auth, 'project_id') and project.id != request.auth.project_id:
+            return self.respond(status=400)
+
         serializer = UserReportSerializer(data=request.DATA)
         if not serializer.is_valid():
             return self.respond(serializer.errors, status=400)
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index ee442566bf..deab787576 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -40,7 +40,7 @@ class ScopedPermission(permissions.BasePermission):
 
     def has_permission(self, request, view):
         # session-based auth has all scopes for a logged in user
-        if not request.auth:
+        if not getattr(request, 'auth', None):
             return request.user.is_authenticated()
 
         allowed_scopes = set(self.scope_map.get(request.method, []))
diff --git a/src/sentry/models/projectkey.py b/src/sentry/models/projectkey.py
index f02fb084cd..57c597ce6e 100644
--- a/src/sentry/models/projectkey.py
+++ b/src/sentry/models/projectkey.py
@@ -157,6 +157,14 @@ class ProjectKey(Model):
             urlparts.scheme, key, urlparts.netloc + urlparts.path, self.project_id,
         )
 
+    @property
+    def organization_id(self):
+        return self.project.organization_id
+
+    @property
+    def organization(self):
+        return self.project.organization
+
     @property
     def dsn_private(self):
         return self.get_dsn(public=False)
diff --git a/tests/sentry/api/endpoints/test_project_user_reports.py b/tests/sentry/api/endpoints/test_project_user_reports.py
index 707794f41f..a0e0125611 100644
--- a/tests/sentry/api/endpoints/test_project_user_reports.py
+++ b/tests/sentry/api/endpoints/test_project_user_reports.py
@@ -4,6 +4,7 @@ import six
 from datetime import timedelta
 from django.utils import timezone
 from exam import fixture
+from uuid import uuid4
 
 from sentry.testutils import APITestCase, UserReportEnvironmentTestCase
 from sentry.models import EventUser, Environment, GroupStatus, UserReport
@@ -60,6 +61,22 @@ class ProjectUserReportListTest(APITestCase):
             ]
         )
 
+    def test_cannot_access_with_dsn_auth(self):
+        project = self.create_project()
+        project_key = self.create_project_key(project=project)
+
+        url = u'/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.get(
+            url,
+            HTTP_AUTHORIZATION=u'DSN {}'.format(project_key.dsn_public),
+        )
+
+        assert response.status_code == 401, response.content
+
     def test_all_reports(self):
         self.login_as(user=self.user)
 
@@ -138,6 +155,58 @@ class CreateProjectUserReportTest(APITestCase):
         assert report.name == 'Foo Bar'
         assert report.comments == 'It broke!'
 
+    def test_with_dsn_auth(self):
+        project = self.create_project()
+        project_key = self.create_project_key(project=project)
+        group = self.create_group(project=project)
+        environment = self.make_environment(project)
+        event = self.create_event(
+            group=group,
+            tags={'environment': environment.name},
+            datetime=timezone.now(),
+        )
+
+        url = u'/api/0/projects/{}/{}/user-feedback/'.format(
+            project.organization.slug,
+            project.slug,
+        )
+
+        response = self.client.post(
+            url,
+            HTTP_AUTHORIZATION=u'DSN {}'.format(project_key.dsn_public),
+            data={
+                'event_id': event.event_id,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 200, response.content
+
+    def test_with_dsn_auth_invalid_project(self):
+        project = self.create_project()
+        project2 = self.create_project()
+        project_key = self.create_project_key(project=project)
+
+        url = u'/api/0/projects/{}/{}/user-feedback/'.format(
+            project2.organization.slug,
+            project2.slug,
+        )
+
+        response = self.client.post(
+            url,
+            HTTP_AUTHORIZATION=u'DSN {}'.format(project_key.dsn_public),
+            data={
+                'event_id': uuid4().hex,
+                'email': 'foo@example.com',
+                'name': 'Foo Bar',
+                'comments': 'It broke!',
+            }
+        )
+
+        assert response.status_code == 400, response.content
+
     def test_already_present(self):
         self.login_as(user=self.user)
 
diff --git a/tests/sentry/api/test_authentication.py b/tests/sentry/api/test_authentication.py
index 84b41058bb..22df615113 100644
--- a/tests/sentry/api/test_authentication.py
+++ b/tests/sentry/api/test_authentication.py
@@ -1,9 +1,12 @@
 from __future__ import absolute_import
 
+import pytest
+
 from django.http import HttpRequest
 from rest_framework.exceptions import AuthenticationFailed
 
-from sentry.api.authentication import ClientIdSecretAuthentication
+from sentry.api.authentication import ClientIdSecretAuthentication, DSNAuthentication
+from sentry.models import ProjectKeyStatus
 from sentry.testutils import TestCase
 
 
@@ -76,3 +79,32 @@ class TestClientIdSecretAuthentication(TestCase):
 
         with self.assertRaises(AuthenticationFailed):
             self.auth.authenticate(request)
+
+
+class TestDSNAuthentication(TestCase):
+    def setUp(self):
+        super(TestDSNAuthentication, self).setUp()
+
+        self.auth = DSNAuthentication()
+        self.org = self.create_organization(owner=self.user)
+        self.project = self.create_project(organization=self.org)
+        self.project_key = self.create_project_key(project=self.project)
+
+    def test_authenticate(self):
+        request = HttpRequest()
+        request.META['HTTP_AUTHORIZATION'] = u'DSN {}'.format(self.project_key.dsn_public)
+
+        result = self.auth.authenticate(request)
+        assert result is not None
+
+        user, auth = result
+        assert user.is_anonymous()
+        assert auth == self.project_key
+
+    def test_inactive_key(self):
+        self.project_key.update(status=ProjectKeyStatus.INACTIVE)
+        request = HttpRequest()
+        request.META['HTTP_AUTHORIZATION'] = u'DSN {}'.format(self.project_key.dsn_public)
+
+        with pytest.raises(AuthenticationFailed):
+            self.auth.authenticate(request)
