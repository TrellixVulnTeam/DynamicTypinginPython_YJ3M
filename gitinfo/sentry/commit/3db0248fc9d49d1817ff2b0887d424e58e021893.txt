commit 3db0248fc9d49d1817ff2b0887d424e58e021893
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Sat May 14 21:26:26 2016 +0200

    Added SMS based authentication

diff --git a/src/sentry/models/authenticator.py b/src/sentry/models/authenticator.py
index a796d800a0..b31cc5ac21 100644
--- a/src/sentry/models/authenticator.py
+++ b/src/sentry/models/authenticator.py
@@ -9,14 +9,17 @@ from __future__ import absolute_import
 
 import os
 import hmac
+import urllib
 import base64
 import hashlib
+import requests
 
 from django.db import models
 from django.utils import timezone
 from django.utils.translation import ugettext_lazy as _
 from django.utils.functional import cached_property
 
+from sentry import options
 from sentry.db.models import BaseManager, BaseModel, BoundedAutoField, \
     FlexibleForeignKey, BoundedPositiveIntegerField, UnicodePickledObjectField
 from sentry.utils.otp import generate_secret_key, TOTP
@@ -104,6 +107,11 @@ class AuthenticatorInterface(object):
     def is_enrolled(self):
         return self.authenticator is not None
 
+    @property
+    def requires_otp_flow_activation(self):
+        return self.on_otp_flow_activation.im_func is not \
+            AuthenticatorInterface.on_otp_flow_activation.im_func
+
     @property
     def config(self):
         if self.authenticator is not None:
@@ -116,6 +124,9 @@ class AuthenticatorInterface(object):
     def generate_new_config(self):
         return {}
 
+    def on_otp_flow_activation(self, request):
+        pass
+
     def enroll(self, user):
         if self.authenticator is not None:
             raise RuntimeError('Already enrolled')
@@ -194,7 +205,11 @@ class TotpInterface(AuthenticatorInterface):
             'secret': generate_secret_key(),
         }
 
+    def set_secret(self, secret):
+        self.config['secret'] = secret
+
     def validate_otp(self, otp):
+        otp = otp.strip().replace('-', '').replace(' ', '')
         return TOTP(self.config['secret']).verify(otp)
 
     def get_provision_qrcode(self, user, issuer=None):
@@ -202,6 +217,57 @@ class TotpInterface(AuthenticatorInterface):
             user, issuer=issuer)
 
 
+@register_authenticator
+class SmsInterface(TotpInterface):
+    type = 2
+    interface_id = 'sms'
+    name = _('Text Message')
+    description = _('This authenticator sends you text messages for '
+                    'verification.  It\'s useful as a backup method '
+                    'or when you do not have a phone that supports '
+                    'an authenticator application.')
+
+    def generate_new_config(self):
+        return {
+            'secret': generate_secret_key(),
+            'phone_number': None
+        }
+
+    def set_secret(self, secret):
+        self.config['secret'] = secret
+
+    def set_phone_number(self, number):
+        self.config['phone_number'] = number
+
+    def make_totp(self):
+        return TOTP(self.config['secret'], digits=4, interval=60)
+
+    def validate_otp(self, otp):
+        return self.make_totp().verify(otp)
+
+    def on_otp_flow_activation(self, request):
+        self.send_text()
+        return _('A confirmation code was sent to your phone.')
+
+    def send_text(self):
+        code = self.make_totp().generate_otp()
+        number = self.config['phone_number']
+        if number is None:
+            raise RuntimeError('No phone number set')
+        account = options.get('2fa.twilio_account')
+        if account[:2] != 'AC':
+            account = 'AC' + account
+        url = 'https://api.twilio.com/2010-04-01/Accounts/%s/Messages.json' % \
+            urllib.quote(account)
+        body = 'Your Sentry authentication code is %s.' % code
+        requests.post(url, auth=(account,
+                                 options.get('2fa.twilio_token')), data={
+            'To': number,
+            'From': options.get('2fa.twilio_number'),
+            'Body': body,
+        }).raise_for_status()
+
+
 class Authenticator(BaseModel):
     id = BoundedAutoField(primary_key=True)
     user = FlexibleForeignKey('sentry.User', db_index=True)
diff --git a/src/sentry/options/defaults.py b/src/sentry/options/defaults.py
index a8e513808e..3c2de0627e 100644
--- a/src/sentry/options/defaults.py
+++ b/src/sentry/options/defaults.py
@@ -62,3 +62,8 @@ register('mail.list-namespace', type=String, default='localhost', flags=FLAG_NOS
 register('mail.enable-replies', default=False, flags=FLAG_PRIORITIZE_DISK)
 register('mail.reply-hostname', default='', flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
 register('mail.mailgun-api-key', default='', flags=FLAG_ALLOW_EMPTY | FLAG_PRIORITIZE_DISK)
+
+# 2FA
+register('2fa.twilio_account', default='', flags=FLAG_ALLOW_EMPTY)
+register('2fa.twilio_token', default='', flags=FLAG_ALLOW_EMPTY)
+register('2fa.twilio_number', default='', flags=FLAG_ALLOW_EMPTY)
diff --git a/src/sentry/templates/sentry/account/twofactor/configure_sms.html b/src/sentry/templates/sentry/account/twofactor/configure_sms.html
new file mode 100644
index 0000000000..e885048960
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/configure_sms.html
@@ -0,0 +1,12 @@
+{% extends "sentry/account/twofactor/configure.html" %}
+
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_info %}
+  {{ block.super }}
+
+  {% if auth.is_enrolled %}
+  <p>Confirmation codes are sent to the following phone: <strong>{{ auth.config.phone_number }}</strong></p>
+  {% endif %}
+{% endblock %}
diff --git a/src/sentry/templates/sentry/account/twofactor/enroll_sms.html b/src/sentry/templates/sentry/account/twofactor/enroll_sms.html
new file mode 100644
index 0000000000..c1e2d084ca
--- /dev/null
+++ b/src/sentry/templates/sentry/account/twofactor/enroll_sms.html
@@ -0,0 +1,48 @@
+{% extends "sentry/bases/twofactor_settings.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+{% load sentry_helpers %}
+
+{% block twofactor_title %}{% trans "Enrollment: " %} {{ auth.name }}{% endblock %}
+{% block twofactor_body %}
+  <p>
+    To enroll use an application on your phone to get two-factor
+    authentication codes when prompted.  Enter your phone number
+    and then provide the confirmation code we send you to active it.
+  </p>
+  <form action="" method="post">
+
+    {% if stage == 'initial' or stage == 'pick_number' %}
+      <input type="hidden" name="stage" value="pick_number">
+      {{ sms_form|as_crispy_errors }}
+      {% for field in sms_form %}
+        {{ field|as_crispy_field }}
+      {% endfor %}
+    {% elif stage == 'confirm' %}
+      <p>Sent confirmation code to <strong>{{ auth.config.phone_number }}</strong>:</p>
+      <input type="hidden" name="stage" value="confirm">
+      <input type="hidden" name="phone_number" value="{{ auth.config.phone_number }}">
+      {{ otp_form|as_crispy_errors }}
+      {% for field in otp_form %}
+        {{ field|as_crispy_field }}
+      {% endfor %}
+      <p><small>Wrong number? <a href=".">Start over</a>.
+    {% endif %}
+
+    <fieldset class="form-actions">
+      {% csrf_token %}
+
+      <input type="hidden" name="enroll">
+      <input type="hidden" name="totp_secret" value="{{ auth.config.secret }}">
+      <div>
+        <a href="{% url 'sentry-account-settings-2fa-totp' %}" class="btn btn-default">{% trans "Cancel" %}</a>
+        {% if not auth.config.phone_number %}
+        <button type="submit" class="btn btn-primary">{% trans "Send Confirmation Code" %}</button> 
+        {% else %}
+        <button type="submit" class="btn btn-primary">{% trans "Confirm" %}</button> 
+        {% endif %}
+      </div>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/twofactor.html b/src/sentry/templates/sentry/twofactor.html
index 99389e0bf3..4565b267f1 100644
--- a/src/sentry/templates/sentry/twofactor.html
+++ b/src/sentry/templates/sentry/twofactor.html
@@ -14,6 +14,9 @@
         with the sign-in you need to provide the access code from your
         authenticator or a recovery code if you have one.
       </p>
+      {% if activation_message %}
+        <p><em>{{ activation_message }}</em></p>
+      {% endif %}
       <form class="form-stacked" action="" method="post" autocomplete="off">
         {% csrf_token %}
 
@@ -26,6 +29,15 @@
         <fieldset class="form-actions">
           <button type="submit" class="btn btn-primary">{% trans "Continue" %}</button>
         </fieldset>
+
+        {% if other_interfaces %}
+          <p>Other authentication methods:
+          <ul>
+            {% for interface in other_interfaces %}
+              <li><a href="?interface={{ interface.interface_id }}">{{ interface.name }}</a>
+            {% endfor %}
+          </ul>
+        {% endif %}
       </form>
     </div>
   </div>
diff --git a/src/sentry/web/frontend/accounts_twofactor.py b/src/sentry/web/frontend/accounts_twofactor.py
index ec619ff0a7..2ec7ad5349 100644
--- a/src/sentry/web/frontend/accounts_twofactor.py
+++ b/src/sentry/web/frontend/accounts_twofactor.py
@@ -1,3 +1,4 @@
+from django import forms
 from django.db import transaction
 from django.http import HttpResponseRedirect
 from django.core.urlresolvers import reverse
@@ -5,6 +6,7 @@ from django.views.decorators.csrf import csrf_protect
 from django.views.decorators.cache import never_cache
 from django.utils.decorators import method_decorator
 from django.core.context_processors import csrf
+from django.utils.translation import ugettext_lazy as _
 
 from sudo.decorators import sudo_required
 
@@ -15,6 +17,12 @@ from sentry.web.helpers import render_to_response
 from sentry.web.forms.accounts import TwoFactorForm
 
 
+class SmsForm(forms.Form):
+    phone_number = forms.CharField(
+        label=_('Phone number'), max_length=40
+    )
+
+
 class TwoFactorSettingsView(BaseView):
     interface_id = None
     configure_template = 'sentry/account/twofactor/configure.html'
@@ -112,7 +120,7 @@ class TotpSettingsView(TwoFactorSettingsView):
     def enroll(self, request, interface, insecure=False):
         totp_secret = request.POST.get('totp_secret')
         if totp_secret is not None:
-            interface.config['secret'] = totp_secret
+            interface.set_secret(totp_secret)
 
         if 'otp' in request.POST:
             form = TwoFactorForm(request.POST)
@@ -130,3 +138,42 @@ class TotpSettingsView(TwoFactorSettingsView):
             request.user.email)
         return render_to_response('sentry/account/twofactor/enroll_totp.html',
                                   context, request)
+
+
+class SmsSettingsView(TwoFactorSettingsView):
+    interface_id = 'sms'
+    configure_template = 'sentry/account/twofactor/configure_sms.html'
+
+    def enroll(self, request, interface, insecure=False):
+        stage = request.POST.get('stage') or 'initial'
+
+        totp_secret = request.POST.get('totp_secret')
+        if totp_secret is not None:
+            interface.set_secret(totp_secret)
+
+        phone_number = request.POST.get('phone_number')
+        if phone_number is not None:
+            interface.set_phone_number(phone_number)
+
+        sms_form = SmsForm()
+        otp_form = TwoFactorForm()
+
+        if stage == 'pick_number':
+            sms_form = SmsForm(request.POST)
+            if sms_form.is_valid():
+                interface.send_text()
+                stage = 'confirm'
+        elif stage == 'confirm':
+            otp_form = TwoFactorForm(request.POST)
+            if otp_form.is_valid() and interface.validate_otp(
+                    otp_form.cleaned_data['otp']):
+                return TwoFactorSettingsView.enroll(self, request, interface)
+            else:
+                otp_form.errors['__all__'] = ['Invalid confirmation code.']
+
+        context = self.make_context(request, interface)
+        context['sms_form'] = sms_form
+        context['otp_form'] = otp_form
+        context['stage'] = stage
+        return render_to_response('sentry/account/twofactor/enroll_sms.html',
+                                  context, request)
diff --git a/src/sentry/web/frontend/twofactor.py b/src/sentry/web/frontend/twofactor.py
index 1d3b09e14c..85a20b5b50 100644
--- a/src/sentry/web/frontend/twofactor.py
+++ b/src/sentry/web/frontend/twofactor.py
@@ -17,16 +17,42 @@ class TwoFactorAuthView(BaseView):
         auth.login(request, user, passed_2fa=True)
         return HttpResponseRedirect(auth.get_login_redirect(request))
 
+    def negotiate_interface(self, request, interfaces):
+        if len(interfaces) == 1:
+            return interfaces[0]
+        interface_id = request.GET.get('interface')
+        if interface_id:
+            for interface in interfaces:
+                if interface.interface_id == interface_id:
+                    return interface
+        return interfaces[0]
+
+    def get_other_interfaces(self, selected, all):
+        rv = []
+        for idx, interface in enumerate(all):
+            if interface.interface_id == selected.interface_id:
+                continue
+            if idx == 0 or \
+               interface.requires_otp_flow_activation:
+                rv.append(interface)
+        return rv
+
     def handle(self, request):
         user = auth.get_pending_2fa_user(request)
         if user is None or request.user.is_authenticated():
             return HttpResponseRedirect(reverse('sentry'))
 
+        interfaces = Authenticator.objects.all_interfaces_for_user(user)
+
         # If for whatever reason we ended up here but the user has no 2FA
         # enabled, we just continue successfully.
-        if not Authenticator.objects.user_has_2fa(user):
+        if not interfaces:
             return self.perform_signin(request, user)
 
+        interface = self.negotiate_interface(request, interfaces)
+        if request.method == 'GET':
+            activation_message = interface.on_otp_flow_activation(request)
+
         otp = request.POST.get('otp')
         if otp:
             if Authenticator.objects.validate_otp(user, otp):
@@ -35,4 +61,7 @@ class TwoFactorAuthView(BaseView):
         form = TwoFactorForm()
         return render_to_response('sentry/twofactor.html', {
             'form': form,
+            'interface': interface.interface_id,
+            'other_interfaces': self.get_other_interfaces(interface, interfaces),
+            'activation_message': activation_message,
         }, request, status=200)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index a541bb27d9..5665d3d847 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -194,6 +194,9 @@ urlpatterns += patterns(
     url(r'^account/settings/2fa/totp/$',
         accounts_twofactor.TotpSettingsView.as_view(),
         name='sentry-account-settings-2fa-totp'),
+    url(r'^account/settings/2fa/sms/$',
+        accounts_twofactor.SmsSettingsView.as_view(),
+        name='sentry-account-settings-2fa-sms'),
     url(r'^account/settings/avatar/$', accounts.avatar_settings,
         name='sentry-account-settings-avatar'),
     url(r'^account/settings/appearance/$', accounts.appearance_settings,
