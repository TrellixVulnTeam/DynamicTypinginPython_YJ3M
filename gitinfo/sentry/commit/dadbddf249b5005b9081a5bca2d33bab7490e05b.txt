commit dadbddf249b5005b9081a5bca2d33bab7490e05b
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Feb 12 18:47:32 2015 -0800

    Remove react-bootstrap implementation of dropdowns

diff --git a/src/sentry/static/sentry/app/components/dropdownLink.jsx b/src/sentry/static/sentry/app/components/dropdownLink.jsx
index c5cd1becab..153417a5b9 100644
--- a/src/sentry/static/sentry/app/components/dropdownLink.jsx
+++ b/src/sentry/static/sentry/app/components/dropdownLink.jsx
@@ -1,164 +1,51 @@
 /*** @jsx React.DOM */
-var React = require('react');
-var joinClasses = require('react-bootstrap/utils/joinClasses');
-var classSet = require('react-bootstrap/utils/classSet');
-var cloneWithProps = require('react-bootstrap/utils/cloneWithProps');
+var joinClasses = require("react/lib/joinClasses");
 
-var createChainedFunction = require('react-bootstrap/utils/createChainedFunction');
-var BootstrapMixin = require('react-bootstrap/BootstrapMixin');
-var DropdownStateMixin = require('react-bootstrap/DropdownStateMixin');
-var Button = require('react-bootstrap/Button');
-var ButtonGroup = require('react-bootstrap/ButtonGroup');
-var DropdownMenu = require('react-bootstrap/DropdownMenu');
-var ValidComponentChildren = require('react-bootstrap/utils/ValidComponentChildren');
+var classSet = require("react/lib/cx");
+var React = require("react");
 
+var $ = require("jquery");
+require("bootstrap/js/dropdown");
 
 var DropdownLink = React.createClass({
-  mixins: [BootstrapMixin, DropdownStateMixin],
-
   propTypes: {
-    pullRight: React.PropTypes.bool,
-    dropup:    React.PropTypes.bool,
     title:     React.PropTypes.node,
-    href:      React.PropTypes.string,
-    onClick:   React.PropTypes.func,
-    onSelect:  React.PropTypes.func,
-    onOpen:    React.PropTypes.func,
-    onClose:   React.PropTypes.func,
-    navItem:   React.PropTypes.bool,
     caret:     React.PropTypes.bool,
-    disabled:  React.PropTypes.bool,
-  },
-
-  childContextTypes: {
-    setDropdownState: React.PropTypes.func,
-  },
-
-  getChildContext() {
-    return {
-      setDropdownState: this.setDropdownState,
-    };
+    disabled:  React.PropTypes.bool
   },
 
   getDefaultProps() {
     return {
-      caret: true,
-      disabled: false
+      disabled: false,
+      caret: true
     };
   },
 
-  render() {
-    var className = 'dropdown-toggle';
-    if (this.props.disabled) {
-      className += ' disabled';
-    }
-
-    var renderMethod = this.props.navItem ?
-      'renderNavItem' : 'renderButtonGroup';
-
-    var caret = this.props.caret ?
-      caret = <span aria-hidden="true" className="icon-arrow-down" /> : '';
-
-    return this[renderMethod]([
-      <a
-        ref="dropdownButton"
-        className={joinClasses(this.props.className, className)}
-        disabled={this.props.disabled}
-        onClick={this.handleDropdownClick}
-        key={0}
-        navDropdown={this.props.navItem}
-        navItem={null}
-        title={null}
-        pullRight={null}
-        dropup={null}>
-        {this.props.title}{' '}
-        {caret}
-      </a>,
-      <DropdownMenu
-        ref="menu"
-        aria-labelledby={this.props.id}
-        pullRight={this.props.pullRight}
-        key={1}>
-        {ValidComponentChildren.map(this.props.children, this.renderMenuItem)}
-      </DropdownMenu>
-    ]);
-  },
-
-  renderButtonGroup(children) {
-    var groupClasses = {
-        'open': this.state.open,
-        'dropup': this.props.dropup
-      };
-
-    return (
-      <ButtonGroup
-        bsSize={this.props.bsSize}
-        className={classSet(groupClasses)}>
-        {children}
-      </ButtonGroup>
-    );
+  componentDidMount() {
+    // These can be configured via options; this is just a demo
+    $(this.getDOMNode()).find('.dropdown-toggle').dropdown();
   },
 
-  renderNavItem(children) {
-    var classes = {
-        'dropdown': true,
-        'open': this.state.open,
-        'dropup': this.props.dropup
-      };
+  render() {
+    var className = classSet({
+      "dropdown-toggle": true,
+      "disabled": this.props.disabled,
+    });
 
     return (
-      <li className={classSet(classes)}>
-        {children}
-      </li>
-    );
-  },
-
-  componentWillReceiveProps(nextProps) {
-    if (nextProps.disabled === true && this.state.open) {
-      this.state.open = false;
-    }
-  },
-
-  componentDidUpdate(prevProps, prevState) {
-    if (this.state.open && !prevState.open && this.props.onOpen) {
-      this.props.onOpen();
-    } else if (!this.state.open && prevState.open && this.props.onClose) {
-      this.props.onClose();
-    }
-  },
-
-  renderMenuItem(child, index) {
-    // Only handle the option selection if an onSelect prop has been set on the
-    // component or it's child, this allows a user not to pass an onSelect
-    // handler and have the browser preform the default action.
-    var handleOptionSelect = this.props.onSelect || child.props.onSelect ?
-      this.handleOptionSelect : null;
-
-    return cloneWithProps(
-      child,
-      {
-        // Capture onSelect events
-        onSelect: createChainedFunction(child.props.onSelect, handleOptionSelect),
-
-        // Force special props to be transferred
-        key: child.key ? child.key : index,
-        ref: child.ref
-      }
+      <span className="dropdown">
+        <a className={joinClasses(this.props.className, className)} ref="toggle"
+           data-toggle="dropdown">
+          {this.props.title}
+          {this.props.caret &&
+            <span className="icon-arrow-down" />
+          }
+        </a>
+        <ul className="dropdown-menu" ref="menu">
+          {this.props.children}
+        </ul>
+      </span>
     );
-  },
-
-  handleDropdownClick(e) {
-    e.preventDefault();
-
-    this.setDropdownState(!this.state.open);
-  },
-
-  handleOptionSelect(key) {
-    if (this.props.onSelect) {
-      this.props.onSelect(key);
-    }
-
-    this.setDropdownState(false);
   }
 });
 
diff --git a/src/sentry/static/sentry/app/components/menuItem.jsx b/src/sentry/static/sentry/app/components/menuItem.jsx
index 8bf0f69c56..f296e68ba7 100644
--- a/src/sentry/static/sentry/app/components/menuItem.jsx
+++ b/src/sentry/static/sentry/app/components/menuItem.jsx
@@ -2,23 +2,11 @@
 
 var React = require("react");
 var Router = require("react-router");
-var joinClasses = require("react-bootstrap/utils/joinClasses");
-var classSet = require("react-bootstrap/utils/classSet");
-
-var DropdownContext = {
-  contextTypes: {
-    setDropdownState: React.PropTypes.func.isRequired
-  },
-
-  setDropdownState() {
-    this.context.setDropdownState.apply(arguments);
-  }
-};
 
+var joinClasses = require("react/lib/joinClasses");
+var classSet = require("react/lib/cx");
 
 var MenuItem = React.createClass({
-  mixins: [DropdownContext],
-
   propTypes: {
     header:    React.PropTypes.bool,
     divider:   React.PropTypes.bool,
@@ -40,7 +28,6 @@ var MenuItem = React.createClass({
       e.preventDefault();
       this.props.onSelect(this.props.eventKey);
     }
-    this.setDropdownState(false);
   },
 
   renderAnchor() {
