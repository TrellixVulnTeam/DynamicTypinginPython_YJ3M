commit 02c6924d22606d523f918ffa59f4df91829265a4
Author: Billy Vong <billyvg@users.noreply.github.com>
Date:   Tue May 28 15:10:22 2019 -0700

    feat(api): Add status filter to Incident index [SEN-687] (#13429)
    
    Can query for all, open, or closed incidents

diff --git a/src/sentry/api/endpoints/organization_incident_index.py b/src/sentry/api/endpoints/organization_incident_index.py
index 5f901a6891..34e5e8998b 100644
--- a/src/sentry/api/endpoints/organization_incident_index.py
+++ b/src/sentry/api/endpoints/organization_incident_index.py
@@ -80,6 +80,14 @@ class OrganizationIncidentIndexEndpoint(OrganizationEndpoint):
             self.get_projects(request, organization),
         )
 
+        query_status = request.GET.get('status')
+
+        if query_status == 'open':
+            # status can be detected, created, or closed
+            incidents = incidents.exclude(status=IncidentStatus.CLOSED.value)
+        elif query_status == 'closed':
+            incidents = incidents.filter(status=IncidentStatus.CLOSED.value)
+
         return self.paginate(
             request,
             queryset=incidents,
diff --git a/tests/sentry/api/endpoints/test_organization_incident.py b/tests/sentry/api/endpoints/test_organization_incident.py
index b2e394d1b2..66d118ebc3 100644
--- a/tests/sentry/api/endpoints/test_organization_incident.py
+++ b/tests/sentry/api/endpoints/test_organization_incident.py
@@ -5,7 +5,7 @@ from exam import fixture
 from freezegun import freeze_time
 
 from sentry.api.serializers import serialize
-from sentry.incidents.models import Incident
+from sentry.incidents.models import Incident, IncidentStatus
 from sentry.testutils import APITestCase
 
 
@@ -27,12 +27,31 @@ class IncidentListEndpointTest(APITestCase):
     def test_simple(self):
         self.create_team(organization=self.organization, members=[self.user])
         incident = self.create_incident()
-        other_incident = self.create_incident()
+        other_incident = self.create_incident(status=IncidentStatus.CLOSED.value)
         self.login_as(self.user)
         with self.feature('organizations:incidents'):
             resp = self.get_valid_response(self.organization.slug)
         assert resp.data == serialize([incident, other_incident])
 
+    def test_filter_status(self):
+        self.create_team(organization=self.organization, members=[self.user])
+        incident = self.create_incident()
+        closed_incident = self.create_incident(status=IncidentStatus.CLOSED.value)
+        self.login_as(self.user)
+
+        with self.feature('organizations:incidents'):
+            resp_closed = self.get_valid_response(
+                self.organization.slug, status='closed',
+            )
+            resp_open = self.get_valid_response(
+                self.organization.slug, status='open'
+            )
+
+        assert len(resp_closed.data) == 1
+        assert len(resp_open.data) == 1
+        assert resp_closed.data == serialize([closed_incident])
+        assert resp_open.data == serialize([incident])
+
     def test_no_feature(self):
         self.create_team(organization=self.organization, members=[self.user])
         self.login_as(self.user)
