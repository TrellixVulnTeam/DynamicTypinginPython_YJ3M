commit ccad24bec1d7fa09fa4c53dd086bc2c2d548010b
Author: Jess MacQueen <jessmacqueen@gmail.com>
Date:   Mon May 7 15:12:24 2018 -0700

    feat(integrations): Add basic JIRA api client

diff --git a/src/sentry/integrations/jira/client.py b/src/sentry/integrations/jira/client.py
new file mode 100644
index 0000000000..a7a577a7d2
--- /dev/null
+++ b/src/sentry/integrations/jira/client.py
@@ -0,0 +1,48 @@
+from __future__ import absolute_import
+
+import datetime
+import jwt
+from six.moves.urllib.parse import urlparse
+
+from sentry.http import build_session
+from sentry.utils.http import absolute_uri
+
+from .utils import get_query_hash
+
+JIRA_KEY = '%s.jira' % (urlparse(absolute_uri()).hostname, )
+
+
+class JiraApiClient(object):
+    ISSUE_URL = '/rest/api/2/issue/%s'
+
+    def __init__(self, base_url, shared_secret):
+        self.base_url = base_url
+        self.shared_secret = shared_secret
+
+    def request(self, method, path, data=None, params=None, headers=None, **kwargs):
+        jwt_payload = {
+            'iss': JIRA_KEY,
+            'iat': datetime.datetime.utcnow(),
+            'exp': datetime.datetime.utcnow() + datetime.timedelta(seconds=5 * 60),
+            'qsh': get_query_hash(path, method.upper(), params),
+        }
+        encoded_jwt = jwt.encode(jwt_payload, self.shared_secret)
+        params = dict(
+            jwt=encoded_jwt,
+            **(params or {})
+        )
+
+        session = build_session()
+        resp = session.request(
+            method.lower(),
+            url='%s%s' % (self.base_url, path),
+            headers=headers,
+            json=data,
+            params=params,
+        )
+
+        resp.raise_for_status()
+        return resp.json()
+
+    def get_issue(self, issue_id):
+        return self.request('GET', self.ISSUE_URL % (issue_id,))
diff --git a/src/sentry/integrations/jira/descriptor.py b/src/sentry/integrations/jira/descriptor.py
index 33d143a209..e0791fbf5e 100644
--- a/src/sentry/integrations/jira/descriptor.py
+++ b/src/sentry/integrations/jira/descriptor.py
@@ -1,12 +1,9 @@
 from __future__ import absolute_import
 
-from six.moves.urllib.parse import urlparse
-
 from sentry.api.base import Endpoint
 from sentry.utils.http import absolute_uri
 
-
-JIRA_KEY = '%s.jira' % (urlparse(absolute_uri()).hostname, )
+from .client import JIRA_KEY
 
 
 class JiraDescriptorEndpoint(Endpoint):
diff --git a/src/sentry/integrations/jira/integration.py b/src/sentry/integrations/jira/integration.py
index 407a6a7920..23a715fbd3 100644
--- a/src/sentry/integrations/jira/integration.py
+++ b/src/sentry/integrations/jira/integration.py
@@ -2,7 +2,10 @@ from __future__ import absolute_import
 
 from django.utils.translation import ugettext_lazy as _
 
-from sentry.integrations import IntegrationProvider, IntegrationMetadata
+from sentry.integrations import Integration, IntegrationProvider, IntegrationMetadata
+
+from .client import JiraApiClient
+
 
 alert_link = {
     'text': 'Visit the **Atlassian Marketplace** to install this integration.',
@@ -23,10 +26,28 @@ metadata = IntegrationMetadata(
 )
 
 
+class JiraIntegration(Integration):
+
+    def get_client(self):
+        return JiraApiClient(
+            self.model.metadata['base_url'],
+            self.model.metadata['shared_secret'],
+        )
+
+    def get_issue(self, issue_id):
+        client = self.get_client()
+        issue = client.get_issue(issue_id)
+        return {
+            'title': issue['fields']['summary'],
+            'description': issue['fields']['description'],
+        }
+
+
 class JiraIntegrationProvider(IntegrationProvider):
     key = 'jira'
     name = 'JIRA'
     metadata = metadata
+    integration_cls = JiraIntegration
 
     can_add = False
 
