commit 3e83a931e582e0c152cc7f6eaccf147ea7090820
Author: Leander Rodrigues <leander.rodrigues@sentry.io>
Date:   Thu Mar 5 11:04:49 2020 -0800

    chore(async-csv): Code cleanup, error handling, and helper functions (#17364)
    
    Tidy up code surrounding async-csv feature

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index de4ffd19c0..24f439ddff 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -146,6 +146,13 @@ class OrganizationSearchPermission(OrganizationPermission):
     }
 
 
+class OrganizationDataExportPermission(OrganizationPermission):
+    scope_map = {
+        "GET": ["event:read", "event:write", "event:admin"],
+        "POST": ["event:read", "event:write", "event:admin"],
+    }
+
+
 class OrganizationEndpoint(Endpoint):
     permission_classes = (OrganizationPermission,)
 
diff --git a/src/sentry/api/endpoints/data_export.py b/src/sentry/api/endpoints/data_export.py
index ec1b293d8a..65036a2510 100644
--- a/src/sentry/api/endpoints/data_export.py
+++ b/src/sentry/api/endpoints/data_export.py
@@ -6,7 +6,7 @@ from rest_framework import serializers
 from rest_framework.response import Response
 
 from sentry import features
-from sentry.api.bases.organization import OrganizationEndpoint, OrganizationEventPermission
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationDataExportPermission
 from sentry.api.serializers import serialize
 from sentry.constants import ExportQueryType
 from sentry.models import ExportedData
@@ -14,14 +14,13 @@ from sentry.tasks.data_export import assemble_download
 
 
 class ExportedDataSerializer(serializers.Serializer):
-    max_value = len(ExportQueryType.as_choices()) - 1
-    query_type = serializers.IntegerField(required=True, min_value=0, max_value=max_value)
-    query_info = serializers.JSONField(required=True)
+    query_type = serializers.ChoiceField(choices=ExportQueryType.as_str_choices(), required=True)
     # TODO(Leander): Implement query_info validation with jsonschema
+    query_info = serializers.JSONField(required=True)
 
 
 class DataExportEndpoint(OrganizationEndpoint):
-    permission_classes = (OrganizationEventPermission,)
+    permission_classes = (OrganizationDataExportPermission,)
 
     def post(self, request, organization):
         """
@@ -44,16 +43,17 @@ class DataExportEndpoint(OrganizationEndpoint):
         try:
             # If this user has sent a sent a request with the same payload and organization,
             # we return them the latest one that is NOT complete (i.e. don't start another)
+            query_type = ExportQueryType.from_str(data["query_type"])
             data_export, created = ExportedData.objects.get_or_create(
                 organization=organization,
                 user=request.user,
-                query_type=data["query_type"],
+                query_type=query_type,
                 query_info=data["query_info"],
                 date_finished=None,
             )
             status = 200
             if created:
-                assemble_download.delay(data_export=data_export)
+                assemble_download.delay(data_export_id=data_export.id)
                 status = 201
         except ValidationError as e:
             # This will handle invalid JSON requests
diff --git a/src/sentry/api/endpoints/data_export_details.py b/src/sentry/api/endpoints/data_export_details.py
index 9425ac57d4..f54e6881f2 100644
--- a/src/sentry/api/endpoints/data_export_details.py
+++ b/src/sentry/api/endpoints/data_export_details.py
@@ -4,13 +4,13 @@ from rest_framework.response import Response
 from django.http import StreamingHttpResponse
 
 from sentry import features
-from sentry.api.bases.organization import OrganizationEndpoint, OrganizationEventPermission
+from sentry.api.bases.organization import OrganizationEndpoint, OrganizationDataExportPermission
 from sentry.api.serializers import serialize
 from sentry.models import ExportedData
 
 
 class DataExportDetailsEndpoint(OrganizationEndpoint):
-    permission_classes = (OrganizationEventPermission,)
+    permission_classes = (OrganizationDataExportPermission,)
 
     def get(self, request, organization, **kwargs):
         """
diff --git a/src/sentry/api/serializers/models/exporteddata.py b/src/sentry/api/serializers/models/exporteddata.py
index e7c1e26c94..3344c5daf1 100644
--- a/src/sentry/api/serializers/models/exporteddata.py
+++ b/src/sentry/api/serializers/models/exporteddata.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.api.serializers import Serializer, serialize, register
+from sentry.constants import ExportQueryType
 from sentry.models import ExportedData, User
 
 
@@ -29,6 +30,6 @@ class ExportedDataSerializer(Serializer):
             "dateCreated": obj.date_added,
             "dateFinished": obj.date_finished,
             "dateExpired": obj.date_expired,
-            "query": {"type": obj.query_type, "info": obj.query_info},
+            "query": {"type": ExportQueryType.as_str(obj.query_type), "info": obj.query_info},
             "status": obj.status,
         }
diff --git a/src/sentry/constants.py b/src/sentry/constants.py
index d9e6ce7749..493bfe42b7 100644
--- a/src/sentry/constants.py
+++ b/src/sentry/constants.py
@@ -440,11 +440,9 @@ class ExportQueryType(object):
     DISCOVER_V2 = 0
     BILLING_REPORT = 1
     ISSUE_BY_TAG = 2
-    # Add additional query types here...
-    DISCOVER_V2_STR = "DISCOVER_V2"
-    BILLING_REPORT_STR = "BILLING_REPORT"
-    ISSUE_BY_TAG_STR = "ISSUE_BY_TAG"
-    # Add their corresponding strings (sent from browser) here...
+    DISCOVER_V2_STR = "Discover"
+    BILLING_REPORT_STR = "Billing Report"
+    ISSUE_BY_TAG_STR = "Issues-by-Tag"
 
     @classmethod
     def as_choices(cls):
@@ -455,14 +453,31 @@ class ExportQueryType(object):
         )
 
     @classmethod
-    def as_str(cls, status):
-        if status == cls.DISCOVER_V2:
+    def as_str_choices(cls):
+        return (
+            (cls.DISCOVER_V2_STR, cls.DISCOVER_V2_STR),
+            (cls.BILLING_REPORT_STR, cls.BILLING_REPORT_STR),
+            (cls.ISSUE_BY_TAG_STR, cls.ISSUE_BY_TAG_STR),
+        )
+
+    @classmethod
+    def as_str(cls, integer):
+        if integer == cls.DISCOVER_V2:
             return cls.DISCOVER_V2_STR
-        elif status == cls.BILLING_REPORT:
+        elif integer == cls.BILLING_REPORT:
             return cls.BILLING_REPORT_STR
-        elif status == cls.ISSUE_BY_TAG:
+        elif integer == cls.ISSUE_BY_TAG:
             return cls.ISSUE_BY_TAG_STR
 
+    @classmethod
+    def from_str(cls, string):
+        if string == cls.DISCOVER_V2_STR:
+            return cls.DISCOVER_V2
+        elif string == cls.BILLING_REPORT_STR:
+            return cls.BILLING_REPORT
+        elif string == cls.ISSUE_BY_TAG_STR:
+            return cls.ISSUE_BY_TAG
+
 
 StatsPeriod = namedtuple("StatsPeriod", ("segments", "interval"))
 
diff --git a/src/sentry/models/exporteddata.py b/src/sentry/models/exporteddata.py
index b5edcfaae4..7b95944f1c 100644
--- a/src/sentry/models/exporteddata.py
+++ b/src/sentry/models/exporteddata.py
@@ -57,18 +57,17 @@ class ExportedData(Model):
         else:
             return ExportStatus.Valid
 
-    @property
-    def date_expired_string(self):
-        if self.date_expired is None:
-            return None
-        return self.date_expired.strftime("%-I:%M %p on %B %d, %Y (%Z)")
-
     @property
     def payload(self):
         payload = self.query_info.copy()
         payload["export_type"] = ExportQueryType.as_str(self.query_type)
         return payload
 
+    @staticmethod
+    def format_date(date):
+        # Example: 12:21 PM on July 21, 2020 (UTC)
+        return None if date is None else date.strftime("%-I:%M %p on %B %d, %Y (%Z)")
+
     def delete_file(self):
         if self.file:
             self.file.delete()
@@ -78,7 +77,7 @@ class ExportedData(Model):
         super(ExportedData, self).delete(*args, **kwargs)
 
     def finalize_upload(self, file, expiration=DEFAULT_EXPIRATION):
-        self.delete_file()
+        self.delete_file()  # If a file is present, remove it
         current_time = timezone.now()
         expire_time = current_time + expiration
         self.update(file=file, date_finished=current_time, date_expired=expire_time)
@@ -91,14 +90,13 @@ class ExportedData(Model):
         if self.date_finished is None or self.date_expired is None or self.file is None:
             # TODO(Leander): Implement logging here
             return
+        url = absolute_uri(
+            reverse("sentry-data-export-details", args=[self.organization.slug, self.id])
+        )
         msg = MessageBuilder(
             subject="Your Download is Ready!",
-            context={
-                "url": absolute_uri(
-                    reverse("sentry-data-export-details", args=[self.organization.slug, self.id])
-                ),
-                "expiration": self.date_expired_string,
-            },
+            context={"url": url, "expiration": self.format_date(self.date_expired)},
+            type="organization.export-data",
             template="sentry/emails/data-export-success.txt",
             html_template="sentry/emails/data-export-success.html",
         )
@@ -110,6 +108,7 @@ class ExportedData(Model):
         msg = MessageBuilder(
             subject="Unable to Export Data",
             context={
+                "creation": self.format_date(self.date_added),
                 "error_message": message,
                 "payload": json.dumps(self.payload, indent=2, sort_keys=True),
             },
diff --git a/src/sentry/static/sentry/app/components/dataExport.tsx b/src/sentry/static/sentry/app/components/dataExport.tsx
index fe8a7a0ed9..1953a4f482 100644
--- a/src/sentry/static/sentry/app/components/dataExport.tsx
+++ b/src/sentry/static/sentry/app/components/dataExport.tsx
@@ -10,7 +10,8 @@ import withApi from 'app/utils/withApi';
 import withOrganization from 'app/utils/withOrganization';
 
 type DataExportPayload = {
-  queryType: number;
+  // Coordinate with ExportQueryType string (src/sentry/constants.py)
+  queryType: 'Discover' | 'Billing Report' | 'Issues-by-Tag';
   queryInfo: any; // TODO(ts): Formalize different possible payloads
 };
 
diff --git a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
index fdad3d883e..dd4858977f 100644
--- a/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
+++ b/src/sentry/static/sentry/app/views/dataExport/dataDownload.tsx
@@ -2,11 +2,12 @@ import React from 'react';
 import styled from '@emotion/styled';
 import {RouteComponentProps} from 'react-router/lib/Router';
 
+import Button from 'app/components/button';
+import DateTime from 'app/components/dateTime';
 import AsyncView from 'app/views/asyncView';
 import {PageContent} from 'app/styles/organization';
 import space from 'app/styles/space';
 import {t} from 'app/locale';
-import Button from 'app/components/button';
 
 export enum DownloadStatus {
   Early = 'EARLY',
@@ -52,6 +53,18 @@ class DataDownload extends AsyncView<Props, State> {
     return [['download', `/organizations/${orgId}/data-export/${dataExportId}/`]];
   }
 
+  renderDate(date: string | undefined): React.ReactNode {
+    if (!date) {
+      return null;
+    }
+    const d = new Date(date);
+    return (
+      <strong>
+        <DateTime date={d} />
+      </strong>
+    );
+  }
+
   renderExpired(): React.ReactNode {
     return (
       <React.Fragment>
@@ -79,12 +92,10 @@ class DataDownload extends AsyncView<Props, State> {
   }
 
   renderValid(): React.ReactNode {
-    const {download} = this.state;
+    const {
+      download: {dateExpired},
+    } = this.state;
     const {orgId, dataExportId} = this.props.params;
-    if (!download.dateExpired) {
-      return null;
-    }
-    const d = new Date(download.dateExpired);
     return (
       <React.Fragment>
         <h3>{t('Finally!')}</h3>
@@ -103,9 +114,7 @@ class DataDownload extends AsyncView<Props, State> {
           {t('Download CSV')}
         </Button>
         <p>{t('Keep in mind, this link will no longer work after:')}</p>
-        <p>
-          <b>{`${d.toLocaleDateString()}, ${d.toLocaleTimeString()}`}</b>
-        </p>
+        <p>{this.renderDate(dateExpired)}</p>
       </React.Fragment>
     );
   }
diff --git a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
index 65155c5a7b..fb9292f96f 100644
--- a/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
+++ b/src/sentry/static/sentry/app/views/organizationGroupDetails/groupTagValues.tsx
@@ -118,7 +118,7 @@ class GroupTagValues extends AsyncComponent<
           </a>
           <DataExport
             payload={{
-              queryType: 2,
+              queryType: 'Issues-by-Tag',
               queryInfo: {
                 project_id: group.project.id,
                 group_id: group.id,
diff --git a/src/sentry/tasks/data_export.py b/src/sentry/tasks/data_export.py
index e5646daeef..8e8c0e6e96 100644
--- a/src/sentry/tasks/data_export.py
+++ b/src/sentry/tasks/data_export.py
@@ -2,13 +2,15 @@ from __future__ import absolute_import
 
 import csv
 import tempfile
-
+from contextlib import contextmanager
 from django.db import transaction, IntegrityError
 
 from sentry import tagstore
 from sentry.constants import ExportQueryType
-from sentry.models import EventUser, File, Group, Project, get_group_with_redirect
+from sentry.models import EventUser, ExportedData, File, Group, Project, get_group_with_redirect
 from sentry.tasks.base import instrumented_task
+from sentry.utils import snuba
+from sentry.utils.sdk import capture_exception
 
 SNUBA_MAX_RESULTS = 1000
 
@@ -18,17 +20,21 @@ class DataExportError(Exception):
 
 
 @instrumented_task(name="sentry.tasks.data_export.assemble_download", queue="data_export")
-def assemble_download(data_export):
+def assemble_download(data_export_id):
+    # Extract the ExportedData object
+    try:
+        data_export = ExportedData.objects.get(id=data_export_id)
+    except ExportedData.DoesNotExist as error:
+        return capture_exception(error)
+
     # Create a temporary file
     try:
         with tempfile.TemporaryFile() as tf:
             # Process the query based on its type
             if data_export.query_type == ExportQueryType.DISCOVER_V2:
-                process_discover_v2(data_export, tf)
-                return
+                file_name = process_discover_v2(data_export, tf)
             elif data_export.query_type == ExportQueryType.BILLING_REPORT:
-                process_billing_report(data_export, tf)
-                return
+                file_name = process_billing_report(data_export, tf)
             elif data_export.query_type == ExportQueryType.ISSUE_BY_TAG:
                 file_name = process_issue_by_tag(data_export, tf)
             # Create a new File object and attach it to the ExportedData
@@ -40,27 +46,32 @@ def assemble_download(data_export):
                     )
                     file.putfile(tf)
                     data_export.finalize_upload(file=file)
-            except IntegrityError:
+            except IntegrityError as error:
+                capture_exception(error)
                 raise DataExportError("Failed to save the assembled file")
-    except DataExportError as err:
+    except DataExportError as error:
         # TODO(Leander): Implement logging
-        return data_export.email_failure(message=err)
-    except BaseException:
+        return data_export.email_failure(message=error)
+    except NotImplementedError as error:
         # TODO(Leander): Implement logging
+        return data_export.email_failure(message=error)
+    except BaseException as error:
+        # TODO(Leander): Implement logging
+        capture_exception(error)
         return data_export.email_failure(message="Internal processing failure")
 
 
 def process_discover_v2(data_export, file):
     # TODO(Leander): Implement processing for Discover V2
-    return
+    raise NotImplementedError("Discover V2 processing has not been implemented yet")
 
 
 def process_billing_report(data_export, file):
     # TODO(Leander): Implement processing for Billing Reports
-    return
+    raise NotImplementedError("Billing report processing has not been implemented yet")
 
 
-def process_issue_by_tag(data_export, file):
+def process_issue_by_tag(data_export, file, limit=None):
     """
     Convert the tag query to a CSV, writing it to the provided file.
     Returns the suggested file name.
@@ -115,20 +126,28 @@ def process_issue_by_tag(data_export, file):
     # Iterate through all the GroupTagValues
     writer = create_writer(file, fields)
     iteration = 0
-    while True:
-        gtv_list = tagstore.get_group_tag_value_iter(
-            project_id=group.project_id,
-            group_id=group.id,
-            environment_id=None,
-            key=lookup_key,
-            callbacks=callbacks,
-            offset=SNUBA_MAX_RESULTS * iteration,
-        )
-        gtv_list_raw = [serialize_issue_by_tag(key, item) for item in gtv_list]
-        if len(gtv_list_raw) == 0:
-            break
-        writer.writerows(gtv_list_raw)
-        iteration += 1
+    with snuba_error_handler():
+        while True:
+            offset = SNUBA_MAX_RESULTS * iteration
+            next_offset = SNUBA_MAX_RESULTS * (iteration + 1)
+            gtv_list = tagstore.get_group_tag_value_iter(
+                project_id=group.project_id,
+                group_id=group.id,
+                environment_id=None,
+                key=lookup_key,
+                callbacks=callbacks,
+                offset=offset,
+            )
+            if len(gtv_list) == 0:
+                break
+            gtv_list_raw = [serialize_issue_by_tag(key, item) for item in gtv_list]
+            if limit and limit < next_offset:
+                # Since the next offset will pass the limit, write the remainder and quit
+                writer.writerows(gtv_list_raw[: limit % SNUBA_MAX_RESULTS])
+                break
+            else:
+                writer.writerows(gtv_list_raw)
+                iteration += 1
     return file_name
 
 
@@ -143,9 +162,33 @@ def get_file_name(export_type, custom_string, extension="csv"):
     return file_name
 
 
-def alert_error():
-    # TODO(Leander): Handle errors in these tasks.
-    return
+# Adapted into contextmanager from 'src/sentry/api/endpoints/organization_events.py'
+@contextmanager
+def snuba_error_handler():
+    try:
+        yield
+    except snuba.QueryOutsideRetentionError:
+        raise DataExportError("Invalid date range. Please try a more recent date range.")
+    except snuba.QueryIllegalTypeOfArgument:
+        raise DataExportError("Invalid query. Argument to function is wrong type.")
+    except snuba.SnubaError as error:
+        message = "Internal error. Please try again."
+        if isinstance(
+            error,
+            (
+                snuba.RateLimitExceeded,
+                snuba.QueryMemoryLimitExceeded,
+                snuba.QueryTooManySimultaneous,
+            ),
+        ):
+            message = "Query timeout. Please try again. If the problem persists try a smaller date range or fewer projects."
+        elif isinstance(
+            error,
+            (snuba.UnqualifiedQueryError, snuba.QueryExecutionError, snuba.SchemaValidationError),
+        ):
+            capture_exception(error)
+            message = "Internal error. Your query failed to run."
+        raise DataExportError(message)
 
 
 ################################
diff --git a/src/sentry/templates/sentry/emails/data-export-failure.html b/src/sentry/templates/sentry/emails/data-export-failure.html
index f749eec1c8..accc916b72 100644
--- a/src/sentry/templates/sentry/emails/data-export-failure.html
+++ b/src/sentry/templates/sentry/emails/data-export-failure.html
@@ -5,12 +5,11 @@
 
 {% block main %}
     <h3>Unable to Export Data</h3>
-    <p>We were unable to generate your data export due to an error:</p>
+    <p>The data export you created at {{creation}} has failed.</p>
+    <p>We were unable to generate your report due to an error:</p>
     <code><pre>{{error_message}}</pre></code>
     <p>We received the following payload:</p>
-    <code>
-        <pre>{{payload}}</pre>
-    </code>
+    <code><pre>{{payload}}</pre></code>
     <p><strong>Troubleshooting &amp; References</strong></p>
     <ul>
         <li><a href="https://docs.sentry.io/">Documentation</a></li>
diff --git a/src/sentry/templates/sentry/emails/data-export-failure.txt b/src/sentry/templates/sentry/emails/data-export-failure.txt
index e83d355e0c..69a17bcfbe 100644
--- a/src/sentry/templates/sentry/emails/data-export-failure.txt
+++ b/src/sentry/templates/sentry/emails/data-export-failure.txt
@@ -1,7 +1,8 @@
 Unable to Export Data
 ---------------------
 
-We were unable to generate your data export due to an error:
+The data export you created at {{creation}} has failed.
+We were unable to generate your report due to an error:
 
     {{error_message}}
 
diff --git a/src/sentry/templates/sentry/emails/data-export-success.txt b/src/sentry/templates/sentry/emails/data-export-success.txt
index 6e3fb7b841..edd0b8b163 100644
--- a/src/sentry/templates/sentry/emails/data-export-success.txt
+++ b/src/sentry/templates/sentry/emails/data-export-success.txt
@@ -1,3 +1,6 @@
+Your Download is Ready!
+-----------------------
+
 We've finished assembling your download, check it out by clicking the link below:
 
 {{url|safe}}
diff --git a/tests/js/spec/components/dataExport.spec.jsx b/tests/js/spec/components/dataExport.spec.jsx
index 5d1476cfc3..20a1fb66a7 100644
--- a/tests/js/spec/components/dataExport.spec.jsx
+++ b/tests/js/spec/components/dataExport.spec.jsx
@@ -11,7 +11,7 @@ describe('DataExport', function() {
     features: ['data-export'],
   });
   const mockPayload = {
-    queryType: 2,
+    queryType: 'Issues-by-Tag',
     queryInfo: {project_id: '1', group_id: '1027', key: 'user'},
   };
   const mockRouterContext = mockOrganization =>
diff --git a/tests/js/spec/views/dataExport/dataDownload.spec.jsx b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
index f09ded2cf8..3b75833497 100644
--- a/tests/js/spec/views/dataExport/dataDownload.spec.jsx
+++ b/tests/js/spec/views/dataExport/dataDownload.spec.jsx
@@ -47,7 +47,7 @@ describe('DataDownload', function() {
 
   it("should render the 'Valid' view when appropriate", function() {
     const status = DownloadStatus.Valid;
-    getDataExportDetails({status, dateExpired});
+    getDataExportDetails({dateExpired, status});
     const wrapper = mountWithTheme(<DataDownload params={mockRouteParams} />);
     expect(wrapper.state('download')).toEqual({dateExpired, status});
     const contentWrapper = wrapper.find('ContentContainer').childAt(0);
@@ -55,10 +55,9 @@ describe('DataDownload', function() {
     expect(contentWrapper.find('h3').text()).toBe('Finally!');
     const buttonWrapper = contentWrapper.find('a[aria-label="Download CSV"]');
     expect(buttonWrapper.text()).toBe('Download CSV');
-    expect(buttonWrapper.props().href).toBe(
+    expect(buttonWrapper.prop('href')).toBe(
       `/api/0/organizations/${mockRouteParams.orgId}/data-export/${mockRouteParams.dataExportId}/?download=true`
     );
-    const dateString = d => `${d.toLocaleDateString()}, ${d.toLocaleTimeString()}`;
-    expect(contentWrapper.find('b').text()).toBe(dateString(dateExpired));
+    expect(contentWrapper.find('DateTime').prop('date')).toEqual(new Date(dateExpired));
   });
 });
diff --git a/tests/sentry/api/endpoints/test_data_export.py b/tests/sentry/api/endpoints/test_data_export.py
index 66da1947f9..7535cfaa02 100644
--- a/tests/sentry/api/endpoints/test_data_export.py
+++ b/tests/sentry/api/endpoints/test_data_export.py
@@ -2,6 +2,7 @@ from __future__ import absolute_import
 
 import six
 
+from sentry.constants import ExportQueryType
 from sentry.models import ExportedData
 from sentry.models.exporteddata import ExportStatus
 from sentry.testutils import APITestCase
@@ -10,7 +11,7 @@ from sentry.testutils import APITestCase
 class DataExportTest(APITestCase):
     endpoint = "sentry-api-0-organization-data-export"
     method = "post"
-    payload = {"query_type": 0, "query_info": {"env": "test"}}
+    payload = {"query_type": "Discover", "query_info": {"env": "test"}}
 
     def setUp(self):
         self.user = self.create_user("user1@example.com")
@@ -61,6 +62,9 @@ class DataExportTest(APITestCase):
             "dateCreated": data_export.date_added,
             "dateFinished": data_export.date_finished,
             "dateExpired": data_export.date_expired,
-            "query": {"type": data_export.query_type, "info": data_export.query_info},
+            "query": {
+                "type": ExportQueryType.as_str(data_export.query_type),
+                "info": data_export.query_info,
+            },
             "status": data_export.status,
         }
diff --git a/tests/sentry/api/endpoints/test_data_export_details.py b/tests/sentry/api/endpoints/test_data_export_details.py
index 7736cba546..4fd958c7ad 100644
--- a/tests/sentry/api/endpoints/test_data_export_details.py
+++ b/tests/sentry/api/endpoints/test_data_export_details.py
@@ -4,6 +4,7 @@ import six
 from datetime import timedelta
 from django.utils import timezone
 
+from sentry.constants import ExportQueryType
 from sentry.models import ExportedData
 from sentry.models.exporteddata import ExportStatus
 from sentry.testutils import APITestCase
@@ -31,7 +32,7 @@ class DataExportDetailsTest(APITestCase):
         }
         assert response.data["dateCreated"] == self.data_export.date_added
         assert response.data["query"] == {
-            "type": self.data_export.query_type,
+            "type": ExportQueryType.as_str(self.data_export.query_type),
             "info": self.data_export.query_info,
         }
 
diff --git a/tests/sentry/models/test_exporteddata.py b/tests/sentry/models/test_exporteddata.py
index de3cd5319a..243f085a53 100644
--- a/tests/sentry/models/test_exporteddata.py
+++ b/tests/sentry/models/test_exporteddata.py
@@ -1,7 +1,7 @@
 from __future__ import absolute_import
 
-import six
 import json
+import six
 import tempfile
 from datetime import timedelta
 from django.core import mail
@@ -42,17 +42,15 @@ class ExportedDataTest(TestCase):
         self.data_export.update(date_expired=timezone.now() - timedelta(weeks=1))
         assert self.data_export.status == ExportStatus.Expired
 
-    def test_date_expired_string_property(self):
-        assert self.data_export.date_expired_string is None
-        current_time = timezone.now()
-        self.data_export.update(date_expired=current_time)
-        assert isinstance(self.data_export.date_expired_string, six.binary_type)
-
     def test_payload_property(self):
         assert isinstance(self.data_export.payload, dict)
         keys = self.data_export.query_info.keys() + ["export_type"]
         assert sorted(self.data_export.payload.keys()) == sorted(keys)
 
+    def test_format_date(self):
+        assert ExportedData.format_date(self.data_export.date_finished) is None
+        assert isinstance(ExportedData.format_date(self.data_export.date_added), six.binary_type)
+
     def test_delete_file(self):
         # Empty call should have no effect
         assert self.data_export.file is None
@@ -121,7 +119,11 @@ class ExportedDataTest(TestCase):
         )
         expected_email_args = {
             "subject": "Your Download is Ready!",
-            "context": {"url": expected_url, "expiration": self.data_export.date_expired_string},
+            "context": {
+                "url": expected_url,
+                "expiration": ExportedData.format_date(date=self.data_export.date_expired),
+            },
+            "type": "organization.export-data",
             "template": "sentry/emails/data-export-success.txt",
             "html_template": "sentry/emails/data-export-success.html",
         }
@@ -139,11 +141,12 @@ class ExportedDataTest(TestCase):
             self.data_export.email_failure(self.TEST_STRING)
         expected_email_args = {
             "subject": "Unable to Export Data",
-            "type": "organization.export-data",
             "context": {
+                "creation": ExportedData.format_date(date=self.data_export.date_added),
                 "error_message": self.TEST_STRING,
                 "payload": json.dumps(self.data_export.payload, indent=2, sort_keys=True),
             },
+            "type": "organization.export-data",
             "template": "sentry/emails/data-export-failure.txt",
             "html_template": "sentry/emails/data-export-failure.html",
         }
diff --git a/tests/sentry/tasks/test_data_export.py b/tests/sentry/tasks/test_data_export.py
index b62e220446..f9b04854a1 100644
--- a/tests/sentry/tasks/test_data_export.py
+++ b/tests/sentry/tasks/test_data_export.py
@@ -45,12 +45,14 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             },
         )
         with self.tasks():
-            assemble_download(de1)
+            assemble_download(de1.id)
+        de1 = ExportedData.objects.get(id=de1.id)
         assert de1.date_finished is not None
         assert de1.date_expired is not None
         assert de1.file is not None
         f1 = de1.file
         assert isinstance(f1, File)
+        assert f1.headers == {"Content-Type": "text/csv"}
         raw1 = f1.getfile().read()
         assert raw1 == "value,id,email,username,ip_address,times_seen,last_seen,first_seen\r\n"
         de2 = ExportedData.objects.create(
@@ -64,7 +66,8 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             },
         )
         with self.tasks():
-            assemble_download(de2)
+            assemble_download(de2.id)
+        de2 = ExportedData.objects.get(id=de2.id)
         # Convert raw csv to list of line-strings
         header, raw1, raw2 = de2.file.getfile().read().strip().split("\r\n")
         assert header == "value,times_seen,last_seen,first_seen"
@@ -82,7 +85,7 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             query_info={"project_id": -1, "group_id": self.event.group_id, "key": "user"},
         )
         with self.tasks():
-            assemble_download(de1)
+            assemble_download(de1.id)
         error = emailer.call_args[1]["message"]
         assert isinstance(error, DataExportError)
         assert six.text_type(error) == u"Requested project does not exist"
@@ -93,7 +96,7 @@ class AssembleDownloadTest(TestCase, SnubaTestCase):
             query_info={"project_id": self.project.id, "group_id": -1, "key": "user"},
         )
         with self.tasks():
-            assemble_download(de2)
+            assemble_download(de2.id)
         error = emailer.call_args[1]["message"]
         assert isinstance(error, DataExportError)
         assert six.text_type(error) == u"Requested issue does not exist"
