commit c2e223f02181e13a7f940be19df7e50b9ea1ab2a
Author: David Cramer <dcramer@gmail.com>
Date:   Wed May 11 11:41:51 2011 -0700

    Ensure our client is looking for the correct HTTP header for auth (fixes #147)

diff --git a/sentry/tests/tests.py b/sentry/tests/tests.py
index 28451337dd..09b7584e25 100644
--- a/sentry/tests/tests.py
+++ b/sentry/tests/tests.py
@@ -9,6 +9,7 @@ import datetime
 import getpass
 import logging
 import os.path
+import socket
 import sys
 import time
 import threading
@@ -39,6 +40,23 @@ from models import TestModel, DuplicateKeyModel
 logger = logging.getLogger('sentry.test')
 logger.addHandler(SentryHandler())
 
+class StoppableWSGIServer(basehttp.WSGIServer):
+    """WSGIServer with short timeout, so that server thread can stop this server."""
+
+    def server_bind(self):
+        """Sets timeout to 1 second."""
+        basehttp.WSGIServer.server_bind(self)
+        self.socket.settimeout(1)
+
+    def get_request(self):
+        """Checks for timeout when getting request."""
+        try:
+            sock, address = self.socket.accept()
+            sock.settimeout(None)
+            return (sock, address)
+        except socket.timeout:
+            raise
+
 class TestServerThread(threading.Thread):
     """Thread for running a http server while tests are running."""
 
@@ -55,7 +73,7 @@ class TestServerThread(threading.Thread):
         try:
             handler = basehttp.AdminMediaHandler(WSGIHandler())
             server_address = (self.address, self.port)
-            httpd = basehttp.StoppableWSGIServer(server_address, basehttp.WSGIRequestHandler)
+            httpd = StoppableWSGIServer(server_address, basehttp.WSGIRequestHandler)
             httpd.set_app(handler)
             self.started.set()
         except basehttp.WSGIServerException, e:
@@ -986,7 +1004,7 @@ class RemoteSentryTest(TestCase):
         message = base64.b64encode(simplejson.dumps(transform(kwargs)))
         sig = get_signature(message, ts)
 
-        resp = self.client.post(reverse('sentry-store'), message, content_type='application/octet-stream', AUTHORIZATION=get_auth_header(sig, ts, 'foo'))
+        resp = self.client.post(reverse('sentry-store'), message, content_type='application/octet-stream', HTTP_AUTHORIZATION=get_auth_header(sig, ts, 'foo'))
         self.assertEquals(resp.status_code, 200, resp.content)
         instance = Message.objects.get()
         self.assertEquals(instance.message, 'hello')
@@ -1003,12 +1021,14 @@ class RemoteSentryTest(TestCase):
     #     self.assertEquals(last.view, 'sentry.tests.tests.testFunctionException')
 
     # def testProcess(self):
+    #     settings.REMOTE_URL = ['http://localhost:8001/store/']
     #     self.start_test_server()
-    #     SentryClient().process(message='hello')
+    #     message_id = SentryClient().process(message='hello')
+    #     self.assertTrue(message_id)
     #     instance = Message.objects.all().order_by('-id')[0]
     #     self.assertEquals(instance.message, 'hello')
     #     self.stop_test_server()
-    # 
+
     # def testExternal(self):
     #     self.start_test_server()
     #     self.assertRaises(Exception, self.client.get, '/?test')
diff --git a/sentry/tests/urls.py b/sentry/tests/urls.py
index cb6238a37c..8348491f02 100644
--- a/sentry/tests/urls.py
+++ b/sentry/tests/urls.py
@@ -10,5 +10,5 @@ urlpatterns = patterns('',
     url(r'^trigger-500-django$', 'sentry.tests.views.django_exc', name='sentry-django-exc'),
     url(r'^trigger-500-template$', 'sentry.tests.views.template_exc', name='sentry-template-exc'),
     url(r'^trigger-500-log-request$', 'sentry.tests.views.logging_request_exc', name='sentry-log-request-exc'),
-    url(r'', include('sentry.urls')),
+    url(r'', include('sentry.web.urls')),
 )
\ No newline at end of file
diff --git a/sentry/web/views.py b/sentry/web/views.py
index 95f54ccfb6..2740852624 100644
--- a/sentry/web/views.py
+++ b/sentry/web/views.py
@@ -353,8 +353,8 @@ def store(request):
     if request.method != 'POST':
         return HttpResponseNotAllowed('This method only supports POST requests')
 
-    if request.META.get('AUTHORIZATION', '').startswith('Sentry'):
-        auth_vars = parse_auth_header(request.META['AUTHORIZATION'])
+    if request.META.get('HTTP_AUTHORIZATION', '').startswith('Sentry'):
+        auth_vars = parse_auth_header(request.META['HTTP_AUTHORIZATION'])
         
         signature = auth_vars.get('sentry_signature')
         timestamp = auth_vars.get('sentry_timestamp')
