commit 0296b9f70fa1c210ec0dd5bf027619b288f6a19e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Mon Nov 4 09:47:22 2019 +0100

    feat(grouping): Add new configuration for grouping with a fix for context-line (#15335)
    
    Previously we incorrectly assumed that file orgins should indicate that context line is
    not to be used for javascript. This assumption is incorrect and a bug. The correct
    behavior is that context lines are only to be discarded if there is no function name and
    it's an actual non file origin.

diff --git a/src/sentry/grouping/strategies/base.py b/src/sentry/grouping/strategies/base.py
index 34bcf72f18..49be730306 100644
--- a/src/sentry/grouping/strategies/base.py
+++ b/src/sentry/grouping/strategies/base.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+import six
 import inspect
 
 from sentry import projectoptions
@@ -10,17 +11,31 @@ from sentry.grouping.enhancer import Enhancements
 STRATEGIES = {}
 
 
-def strategy(id, variants, interfaces, name=None, score=None):
+RISK_LEVEL_LOW = 0
+RISK_LEVEL_MEDIUM = 1
+RISK_LEVEL_HIGH = 2
+
+
+def strategy(id=None, ids=None, variants=None, interfaces=None, name=None, score=None):
     """Registers a strategy"""
+    if interfaces is None or variants is None:
+        raise TypeError("interfaces and variants are required")
+
     if name is None:
         if len(interfaces) != 1:
             raise RuntimeError("%r requires a name" % id)
         name = interfaces[0]
 
+    if id is not None:
+        if ids is not None:
+            raise TypeError("id and ids given")
+        ids = [id]
+
     def decorator(f):
-        STRATEGIES[id] = rv = Strategy(
-            id=id, name=name, interfaces=interfaces, variants=variants, score=score, func=f
-        )
+        for id in ids:
+            STRATEGIES[id] = rv = Strategy(
+                id=id, name=name, interfaces=interfaces, variants=variants, score=score, func=f
+            )
         return rv
 
     return decorator
@@ -39,6 +54,7 @@ class Strategy(object):
 
     def __init__(self, id, name, interfaces, variants, score, func):
         self.id = id
+        self.strategy_class = id.split(":", 1)[0]
         self.name = name
         self.interfaces = interfaces
         self.mandatory_variants = []
@@ -152,11 +168,13 @@ class Strategy(object):
 
 class StrategyConfiguration(object):
     id = None
+    base = None
     config_class = None
     strategies = {}
     delegates = {}
     changelog = None
     hidden = False
+    risk = RISK_LEVEL_LOW
 
     def __init__(self, enhancements=None, **extra):
         if enhancements is None:
@@ -187,10 +205,12 @@ class StrategyConfiguration(object):
     def as_dict(self):
         return {
             "id": self.id,
+            "base": self.base.id if self.base else None,
             "strategies": sorted(self.strategies),
             "changelog": self.changelog,
             "delegates": sorted(x.id for x in self.delegates.values()),
             "hidden": self.hidden,
+            "risk": self.risk,
             "latest": projectoptions.lookup_well_known_key("sentry:grouping_config").get_default(
                 epoch=projectoptions.LATEST_EPOCH
             )
@@ -199,32 +219,54 @@ class StrategyConfiguration(object):
 
 
 def create_strategy_configuration(
-    id, strategies=None, delegates=None, changelog=None, hidden=False
+    id, strategies=None, delegates=None, changelog=None, hidden=False, base=None, risk=None
 ):
+    """Declares a new strategy configuration.
+
+    Values can be inherited from a base configuration.  For strategies if there is
+    a strategy of the same class it's replaced.  For delegates if there is a
+    delegation for the same interface it's replaced.
+
+    It's impossible to remove a strategy of a class when a base is declared (same
+    for delegates).
+    """
+
     class NewStrategyConfiguration(StrategyConfiguration):
         pass
 
     NewStrategyConfiguration.id = id
+    NewStrategyConfiguration.base = base
     NewStrategyConfiguration.config_class = id.split(":", 1)[0]
-    NewStrategyConfiguration.strategies = {}
-    NewStrategyConfiguration.delegates = {}
+    NewStrategyConfiguration.strategies = dict(base.strategies) if base else {}
+    NewStrategyConfiguration.delegates = dict(base.delegates) if base else {}
+    if risk is None:
+        risk = RISK_LEVEL_LOW
+    NewStrategyConfiguration.risk = risk
     NewStrategyConfiguration.hidden = hidden
 
+    by_class = {}
+    for strategy in six.itervalues(NewStrategyConfiguration.strategies):
+        by_class.setdefault(strategy.strategy_class, []).append(strategy.id)
+
     for strategy_id in strategies or {}:
         strategy = lookup_strategy(strategy_id)
         if strategy.score is None:
             raise RuntimeError("Unscored strategy %s added to %s" % (strategy_id, id))
+        for old_id in by_class.get(strategy.strategy_class) or ():
+            NewStrategyConfiguration.strategies.pop(old_id, None)
         NewStrategyConfiguration.strategies[strategy_id] = strategy
 
+    new_delegates = set()
     for strategy_id in delegates or ():
         strategy = lookup_strategy(strategy_id)
         for interface in strategy.interfaces:
-            if interface in NewStrategyConfiguration.delegates:
+            if interface in new_delegates:
                 raise RuntimeError(
                     "duplicate interface match for "
                     "delegate %r (conflict on %r)" % (id, interface)
                 )
             NewStrategyConfiguration.delegates[interface] = strategy
+            new_delegates.add(interface)
 
     NewStrategyConfiguration.changelog = inspect.cleandoc(changelog or "")
     NewStrategyConfiguration.__name__ = "StrategyConfiguration(%s)" % id
diff --git a/src/sentry/grouping/strategies/configurations.py b/src/sentry/grouping/strategies/configurations.py
index 5728807d64..e69b767b67 100644
--- a/src/sentry/grouping/strategies/configurations.py
+++ b/src/sentry/grouping/strategies/configurations.py
@@ -1,6 +1,10 @@
 from __future__ import absolute_import
 
-from sentry.grouping.strategies.base import create_strategy_configuration
+from sentry.grouping.strategies.base import (
+    create_strategy_configuration,
+    RISK_LEVEL_MEDIUM,
+    RISK_LEVEL_HIGH,
+)
 
 
 # The classes of grouping algorithms
@@ -11,6 +15,8 @@ CONFIGURATIONS = {}
 
 
 def register_strategy_config(id, **kwargs):
+    if kwargs.get("base") is not None:
+        kwargs["base"] = CONFIGURATIONS[kwargs["base"]]
     rv = create_strategy_configuration(id, **kwargs)
     if rv.config_class not in CLASSES:
         CLASSES.append(rv.config_class)
@@ -50,7 +56,7 @@ register_strategy_config(
 # javascript but works for all platforms.
 
 register_strategy_config(
-    id="newstyle:2019-04-05",
+    id="newstyle:2019-05-08",
     strategies=[
         "expect-ct:v1",
         "expect-staple:v1",
@@ -60,17 +66,43 @@ register_strategy_config(
         "stacktrace:v1",
         "chained-exception:v1",
         "template:v1",
-        "message:v1",
+        "message:v2",
     ],
-    delegates=["frame:v1", "stacktrace:v1", "single-exception:v1"],
+    risk=RISK_LEVEL_HIGH,
+    delegates=["frame:v3", "stacktrace:v1", "single-exception:v2"],
     changelog="""
-        * Experimental grouping algorithm (should not be used)
+        * Uses source code information all platforms with reliable sources
+          for grouping (JavaScript, Python, PHP and Ruby) and function
+          names and filenames otherwise.
+        * Fallback grouping applies clean-up logic on exception messages
+          (numbers, uuids, email addresses and others are removed)
+        * JavaScript stacktraces are better deduplicated across browser
+          versions yielding a higher chance of these grouping together.
+        * JavaScript stacktraces involving source maps are likely to group
+          better.
+        * C/C++ and other native stacktraces are more reliably grouped.
     """,
-    hidden=True,
 )
 
 register_strategy_config(
-    id="newstyle:2019-04-17",
+    id="newstyle:2019-10-29",
+    base="newstyle:2019-05-08",
+    delegates=["frame:v4"],
+    risk=RISK_LEVEL_MEDIUM,
+    changelog="""
+        * Better rules for when to take context lines into account for
+          JavaScript platforms for grouping purposes.
+    """,
+)
+
+
+# Deprecated strategies
+#
+# These should not be used.  They are experiments which should be phased out
+# once there are no projects on them.
+
+register_strategy_config(
+    id="newstyle:2019-04-05",
     strategies=[
         "expect-ct:v1",
         "expect-staple:v1",
@@ -80,9 +112,10 @@ register_strategy_config(
         "stacktrace:v1",
         "chained-exception:v1",
         "template:v1",
-        "message:v2",
+        "message:v1",
     ],
-    delegates=["frame:v2", "stacktrace:v1", "single-exception:v2"],
+    delegates=["frame:v1", "stacktrace:v1", "single-exception:v1"],
+    risk=RISK_LEVEL_HIGH,
     changelog="""
         * Experimental grouping algorithm (should not be used)
     """,
@@ -90,36 +123,17 @@ register_strategy_config(
 )
 
 register_strategy_config(
-    id="newstyle:2019-05-08",
-    strategies=[
-        "expect-ct:v1",
-        "expect-staple:v1",
-        "hpkp:v1",
-        "csp:v1",
-        "threads:v1",
-        "stacktrace:v1",
-        "chained-exception:v1",
-        "template:v1",
-        "message:v2",
-    ],
-    delegates=["frame:v3", "stacktrace:v1", "single-exception:v2"],
+    id="newstyle:2019-04-17",
+    base="newstyle:2019-04-05",
+    strategies=["message:v2"],
+    delegates=["frame:v2", "single-exception:v2"],
+    risk=RISK_LEVEL_HIGH,
     changelog="""
-        * uses source code information all platforms with reliable sources
-          for grouping (JavaScript, Python, PHP and Ruby) and function
-          names and filenames otherwise.
-        * Fallback grouping applies clean-up logic on exception messages
-          (numbers, uuids, email addresses and others are removed)
-        * JavaScript stacktraces are better deduplicated across browser
-          versions yielding a higher chance of these grouping together.
-        * JavaScript stacktraces involving source maps are likely to group
-          better.
-        * C/C++ and other native stacktraces are more reliably grouped.
+        * Experimental grouping algorithm (should not be used)
     """,
+    hidden=True,
 )
 
-# This is a combined strategy that dispatches to legacy:2019-03-12 and
-# newstyle:2019-04-05 depending on the platform.
-
 register_strategy_config(
     id="combined:2019-04-07",
     strategies=[
@@ -134,6 +148,7 @@ register_strategy_config(
         "message:v1",
     ],
     delegates=["frame:v1nl", "stacktrace:v1nl", "single-exception:v1nl"],
+    risk=RISK_LEVEL_HIGH,
     changelog="""
         * Uses `newstyle:2019-04-05` for native platforms
         * Uses `legacy:2019-03-12` for all other platforms
diff --git a/src/sentry/grouping/strategies/newstyle.py b/src/sentry/grouping/strategies/newstyle.py
index 9a379bbaa0..23dc59a390 100644
--- a/src/sentry/grouping/strategies/newstyle.py
+++ b/src/sentry/grouping/strategies/newstyle.py
@@ -84,7 +84,7 @@ def get_filename_component(abs_path, filename, platform, allow_file_origin=False
     return filename_component
 
 
-def get_module_component_v1(abs_path, module, platform):
+def get_module_component(abs_path, module, platform):
     """Given an absolute path, module and platform returns the module component
     with some necessary cleaning performed.
     """
@@ -202,60 +202,74 @@ def get_function_component(
     return function_component
 
 
-@strategy(id="frame:v1", interfaces=["frame"], variants=["!system", "app"])
-def frame_v1(frame, event, **meta):
-    return get_frame_component(frame, event, meta, legacy_function_logic=True)
+@strategy(
+    ids=["frame:v1", "frame:v2", "frame:v3", "frame:v4"],
+    interfaces=["frame"],
+    variants=["!system", "app"],
+)
+def frame(frame, event, **meta):
+    id = meta["strategy"].id
+    platform = frame.platform or event.platform
 
+    use_contextline = False
+    javascript_fuzzing = False
 
-@strategy(id="frame:v2", interfaces=["frame"], variants=["!system", "app"])
-def frame_v2(frame, event, **meta):
-    return get_frame_component(frame, event, meta, legacy_function_logic=False)
+    # Version specific bugs
+    legacy_function_logic = id == "frame:v1"
+    with_context_line_file_origin_bug = id == "frame:v3"
 
+    if id in ("frame:v3", "frame:v4"):
+        javascript_fuzzing = True
+        # These are platforms that we know have always source available and
+        # where the source is of good quality for grouping.  For javascript
+        # this assumes that we have sourcemaps available.
+        use_contextline = platform in ("javascript", "node", "python", "php", "ruby")
 
-@strategy(id="frame:v3", interfaces=["frame"], variants=["!system", "app"])
-def frame_v3(frame, event, **meta):
-    platform = frame.platform or event.platform
-    # These are platforms that we know have always source available and
-    # where the source is of good quality for grouping.  For javascript
-    # this assumes that we have sourcemaps available.
-    good_source = platform in ("javascript", "node", "python", "php", "ruby")
     return get_frame_component(
         frame,
         event,
         meta,
-        legacy_function_logic=False,
-        use_contextline=good_source,
-        javascript_fuzzing=True,
+        legacy_function_logic=legacy_function_logic,
+        use_contextline=use_contextline,
+        javascript_fuzzing=javascript_fuzzing,
+        with_context_line_file_origin_bug=with_context_line_file_origin_bug,
     )
 
 
-def get_contextline_component(frame, platform):
+def get_contextline_component(frame, platform, function, with_context_line_file_origin_bug=False):
     """Returns a contextline component.  The caller's responsibility is to
     make sure context lines are only used for platforms where we trust the
     quality of the sourcecode.  It does however protect against some bad
     JavaScript environments based on origin checks.
     """
-    component = GroupingComponent(id="context-line")
+    line = " ".join((frame.context_line or "").expandtabs(2).split())
+    if not line:
+        return GroupingComponent(id="context-line")
 
-    if not frame.context_line:
-        return component
-
-    line = " ".join(frame.context_line.expandtabs(2).split())
+    component = GroupingComponent(id="context-line", values=[line])
     if line:
         if len(frame.context_line) > 120:
-            component.update(hint="discarded because line too long")
-        elif get_behavior_family_for_platform(platform) == "javascript" and has_url_origin(
-            frame.abs_path, allow_file_origin=True
-        ):
-            component.update(hint="discarded because from URL origin")
-        else:
-            component.update(values=[line])
+            component.update(hint="discarded because line too long", contributes=False)
+        elif get_behavior_family_for_platform(platform) == "javascript":
+            if with_context_line_file_origin_bug:
+                if has_url_origin(frame.abs_path, allow_file_origin=True):
+                    component.update(hint="discarded because from URL origin", contributes=False)
+            elif not function and has_url_origin(frame.abs_path):
+                component.update(
+                    hint="discarded because from URL origin and no function", contributes=False
+                )
 
     return component
 
 
 def get_frame_component(
-    frame, event, meta, legacy_function_logic=False, use_contextline=False, javascript_fuzzing=False
+    frame,
+    event,
+    meta,
+    legacy_function_logic=False,
+    use_contextline=False,
+    javascript_fuzzing=False,
+    with_context_line_file_origin_bug=False,
 ):
     platform = frame.platform or event.platform
 
@@ -268,7 +282,7 @@ def get_frame_component(
 
     # if we have a module we use that for grouping.  This will always
     # take precedence over the filename if it contributes
-    module_component = get_module_component_v1(frame.abs_path, frame.module, platform)
+    module_component = get_module_component(frame.abs_path, frame.module, platform)
     if module_component.contributes and filename_component.contributes:
         filename_component.update(contributes=False, hint="module takes precedence")
 
@@ -276,7 +290,12 @@ def get_frame_component(
 
     # If we are allowed to use the contextline we add it now.
     if use_contextline:
-        context_line_component = get_contextline_component(frame, platform)
+        context_line_component = get_contextline_component(
+            frame,
+            platform,
+            function=frame.function,
+            with_context_line_file_origin_bug=with_context_line_file_origin_bug,
+        )
 
     function_component = get_function_component(
         function=frame.function,
@@ -302,8 +321,10 @@ def get_frame_component(
         func = frame.raw_function or frame.function
         if func:
             func = func.rsplit(".", 1)[-1]
-        if func in (
-            None,
+        # special case empty functions not to have a hint
+        if not func:
+            function_component.update(contributes=False)
+        elif func in (
             "?",
             "<anonymous function>",
             "<anonymous>",
@@ -322,12 +343,12 @@ def get_frame_component(
 
 
 @strategy(id="stacktrace:v1", interfaces=["stacktrace"], variants=["!system", "app"], score=1800)
-def stacktrace_v1(stacktrace, config, variant, **meta):
+def stacktrace(stacktrace, config, variant, **meta):
     return get_stacktrace_component(stacktrace, config, variant, meta)
 
 
-@stacktrace_v1.variant_processor
-def stacktrace_v1_variant_processor(variants, config, **meta):
+@stacktrace.variant_processor
+def stacktrace_variant_processor(variants, config, **meta):
     return remove_non_stacktrace_variants(variants)
 
 
@@ -401,20 +422,21 @@ def single_exception_common(exception, config, meta, with_value):
     return GroupingComponent(id="exception", values=values)
 
 
-@strategy(id="single-exception:v1", interfaces=["singleexception"], variants=["!system", "app"])
-def single_exception_v1(exception, config, **meta):
-    return single_exception_common(exception, config, meta, with_value=False)
-
-
-@strategy(id="single-exception:v2", interfaces=["singleexception"], variants=["!system", "app"])
-def single_exception_v2(exception, config, **meta):
-    return single_exception_common(exception, config, meta, with_value=True)
+@strategy(
+    ids=["single-exception:v1", "single-exception:v2"],
+    interfaces=["singleexception"],
+    variants=["!system", "app"],
+)
+def single_exception(exception, config, **meta):
+    id = meta["strategy"].id
+    with_value = id == "single-exception:v2"
+    return single_exception_common(exception, config, meta, with_value=with_value)
 
 
 @strategy(
     id="chained-exception:v1", interfaces=["exception"], variants=["!system", "app"], score=2000
 )
-def chained_exception_v1(chained_exception, config, **meta):
+def chained_exception(chained_exception, config, **meta):
     # Case 1: we have a single exception, use the single exception
     # component directly to avoid a level of nesting
     exceptions = chained_exception.exceptions()
@@ -426,13 +448,13 @@ def chained_exception_v1(chained_exception, config, **meta):
     return GroupingComponent(id="chained-exception", values=values)
 
 
-@chained_exception_v1.variant_processor
-def chained_exception_v1_variant_processor(variants, config, **meta):
+@chained_exception.variant_processor
+def chained_exception_variant_processor(variants, config, **meta):
     return remove_non_stacktrace_variants(variants)
 
 
 @strategy(id="threads:v1", interfaces=["threads"], variants=["!system", "app"], score=1900)
-def threads_v1(threads_interface, config, **meta):
+def threads(threads_interface, config, **meta):
     thread_count = len(threads_interface.values)
     if thread_count != 1:
         return GroupingComponent(
@@ -450,6 +472,6 @@ def threads_v1(threads_interface, config, **meta):
     )
 
 
-@threads_v1.variant_processor
-def threads_v1_variant_processor(variants, config, **meta):
+@threads.variant_processor
+def threads_variant_processor(variants, config, **meta):
     return remove_non_stacktrace_variants(variants)
diff --git a/src/sentry/projectoptions/defaults.py b/src/sentry/projectoptions/defaults.py
index 533b163fb4..1c9eba1b8e 100644
--- a/src/sentry/projectoptions/defaults.py
+++ b/src/sentry/projectoptions/defaults.py
@@ -2,7 +2,7 @@ from __future__ import absolute_import
 from sentry.projectoptions import register
 
 # latest epoch
-LATEST_EPOCH = 3
+LATEST_EPOCH = 4
 
 # grouping related configs
 #
@@ -14,10 +14,14 @@ LATEST_EPOCH = 3
 # TODO: we might instead want to fall back to the latest of the project's
 # epoch instead.
 LEGACY_GROUPING_CONFIG = "legacy:2019-03-12"
-DEFAULT_GROUPING_CONFIG = "newstyle:2019-05-08"
+DEFAULT_GROUPING_CONFIG = "newstyle:2019-10-29"
 register(
     key="sentry:grouping_config",
-    epoch_defaults={1: LEGACY_GROUPING_CONFIG, 3: DEFAULT_GROUPING_CONFIG},
+    epoch_defaults={
+        1: LEGACY_GROUPING_CONFIG,
+        3: "newstyle:2019-05-08",
+        4: DEFAULT_GROUPING_CONFIG,
+    },
 )
 
 # Grouping enhancements defaults
diff --git a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
index abe08463a9..2978205132 100644
--- a/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
+++ b/src/sentry/static/sentry/app/views/settings/projectGeneralSettings.jsx
@@ -96,38 +96,65 @@ class ProjectGeneralSettings extends AsyncView {
     }, handleXhrErrorResponse('Unable to transfer project'));
   };
 
-  renderUpgradeGrouping() {
-    const {orgId, projectId} = this.props.params;
-
-    if (!this.state.groupingConfigs || !this.state.groupingEnhancementBases) {
-      return null;
-    }
-
+  getGroupingChanges() {
     let updateNotes = '';
+    const byId = {};
     let riskLevel = 0;
-    const newData = {};
-
-    this.state.groupingConfigs.forEach(({id, latest, changelog}) => {
-      if (latest && this.state.data.groupingConfig !== id) {
-        updateNotes += changelog + '\n\n';
-        newData.groupingConfig = id;
+    let latestGroupingConfig = null;
+    let latestEnhancementsBase = null;
+
+    this.state.groupingConfigs.forEach(cfg => {
+      byId[cfg.id] = cfg;
+      if (cfg.latest && this.state.data.groupingConfig !== cfg.id) {
+        updateNotes = cfg.changelog;
+        latestGroupingConfig = cfg;
+        riskLevel = cfg.risk;
       }
     });
 
-    this.state.groupingEnhancementBases.forEach(({id, latest, changelog}) => {
-      if (latest && this.state.data.groupingEnhancementsBase !== id) {
-        updateNotes += changelog + '\n\n';
-        newData.groupingEnhancementsBase = id;
+    if (latestGroupingConfig) {
+      let next = latestGroupingConfig.base;
+      while (next !== this.state.data.groupingConfig) {
+        const cfg = byId[next];
+        if (!cfg) {
+          break;
+        }
+        riskLevel = Math.max(riskLevel, cfg.risk);
+        updateNotes = cfg.changelog + '\n' + updateNotes;
+        next = cfg.base;
+      }
+    }
+
+    this.state.groupingEnhancementBases.forEach(cfg => {
+      if (cfg.latest && this.state.data.groupingEnhancementsBase !== cfg.id) {
+        updateNotes += '\n\n' + cfg.changelog;
+        latestEnhancementsBase = cfg;
       }
     });
 
-    // legacy to newstyle is a risky update
-    if (
-      this.state.data.groupingConfig.match(/^legacy:/) &&
-      newData.groupingConfig &&
-      newData.groupingConfig.match(/^newstyle:/)
-    ) {
-      riskLevel = 2;
+    return {updateNotes, riskLevel, latestGroupingConfig, latestEnhancementsBase};
+  }
+
+  renderUpgradeGrouping() {
+    const {orgId, projectId} = this.props.params;
+
+    if (!this.state.groupingConfigs || !this.state.groupingEnhancementBases) {
+      return null;
+    }
+
+    const {
+      updateNotes,
+      riskLevel,
+      latestGroupingConfig,
+      latestEnhancementsBase,
+    } = this.getGroupingChanges();
+    const noUpdates = !latestGroupingConfig && !latestEnhancementsBase;
+    const newData = {};
+    if (latestGroupingConfig) {
+      newData.groupingConfig = latestGroupingConfig.id;
+    }
+    if (latestEnhancementsBase) {
+      newData.groupingEnhancementBases = latestEnhancementsBase.id;
     }
 
     let riskNote;
@@ -154,8 +181,6 @@ class ProjectGeneralSettings extends AsyncView {
       default:
     }
 
-    const noUpdates = Object.keys(newData).length === 0;
-
     return (
       <Field
         label={t('Upgrade Grouping Strategy')}
diff --git a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-from-url-origin-corner-cases.json b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-from-url-origin-corner-cases.json
new file mode 100644
index 0000000000..73e625ee8d
--- /dev/null
+++ b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-from-url-origin-corner-cases.json
@@ -0,0 +1,24 @@
+{
+  "platform": "javascript",
+  "stacktrace": {
+    "frames": [
+      {
+        "function": "test",
+        "abs_path": "https://foo.com/foo.js",
+        "context_line": "hello world",
+        "filename": "/foo.js"
+      },
+      {
+        "function": "test",
+        "abs_path": "file:///foo.js",
+        "context_line": "hello world",
+        "filename": "/foo.js"
+      },
+      {
+        "abs_path": "https://foo.com/foo.js",
+        "context_line": "hello world",
+        "filename": "/foo.js"
+      }
+    ]
+  }
+}
diff --git a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-blob.json b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-blob.json
index ea59ffc3ac..e575c4fb9b 100644
--- a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-blob.json
+++ b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-blob.json
@@ -1,4 +1,5 @@
 {
+  "platform": "javascript",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-http.json b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-http.json
index 9dfc8751d7..f418d40703 100644
--- a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-http.json
+++ b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-http.json
@@ -1,4 +1,5 @@
 {
+  "platform": "javascript",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-https.json b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-https.json
index 57fd115bf0..39c6b760c3 100644
--- a/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-https.json
+++ b/tests/sentry/grouping/grouping_inputs/frame-ignores-filename-if-https.json
@@ -1,4 +1,5 @@
 {
+  "platform": "javascript",
   "stacktrace": {
     "frames": [
       {
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..f518d6eb62
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/combined@2019_04_07/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-11-01T10:16:07.487579Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line (discarded because from URL origin)
+--------------------------------------------------------------------------
+system:
+  hash: '98f84fd484f8c2273f28cc645935f650'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line (discarded because from URL origin)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..bfaba146ab
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/legacy@2019_03_12/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-11-01T10:16:09.298818Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace (ignored because hash matches system variant)
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame* (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame (frame considered in-app because no frame is in-app)
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line (discarded because from URL origin)
+--------------------------------------------------------------------------
+system:
+  hash: '98f84fd484f8c2273f28cc645935f650'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame*
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line*
+            u'hello world'
+          function (function name is not used if context-line is available)
+            u'test'
+        frame
+          filename (ignored because filename is a URL)
+            u'/foo.js'
+          context-line (discarded because from URL origin)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..a426c40435
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_05/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-11-01T10:16:11.092009Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+--------------------------------------------------------------------------
+system:
+  hash: '05a671c66aefea124cc08b76ea6d30bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..08e5c72130
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_04_17/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-11-01T10:16:12.760098Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+--------------------------------------------------------------------------
+system:
+  hash: '05a671c66aefea124cc08b76ea6d30bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/exception_javascript_no_in_app.pysnap
index f2b05dfbb6..10d3c724b8 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/exception_javascript_no_in_app.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/exception_javascript_no_in_app.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:45:55.182908Z'
+created: '2019-11-01T10:06:05.465176Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -14,7 +14,6 @@ app:
               u'app/components/modals/createTeamModal'
             filename (module takes precedence)
               u'createteammodal.jsx'
-            function (ignored unknown function name)
             context-line*
               u'onError(err);'
           frame (non app frame)
@@ -42,7 +41,6 @@ system:
               u'app/components/modals/createTeamModal'
             filename (module takes precedence)
               u'createteammodal.jsx'
-            function (ignored unknown function name)
             context-line*
               u'onError(err);'
           frame*
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..7b75c12de3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,54 @@
+---
+created: '2019-11-01T10:16:14.268235Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
+        frame (non app frame)
+          filename*
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          context-line (discarded because from URL origin)
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'bd8c868a3914eeb4f48e7ef46f19a0df'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
+        frame*
+          filename*
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          context-line (discarded because from URL origin)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_blob.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_blob.pysnap
index 765d027e7e..013f2527d3 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_blob.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_blob.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T07:29:42.178177Z'
+created: '2019-11-01T10:06:05.544041Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_http.pysnap
index c723402eec..6736875293 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_http.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_http.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T07:29:42.186423Z'
+created: '2019-11-01T10:02:43.394263Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -13,6 +13,8 @@ app:
             u'foo.py'
           function*
             u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
 --------------------------------------------------------------------------
 system:
   hash: '098f6bcd4621d373cade4e832627b4f6'
@@ -24,3 +26,5 @@ system:
             u'foo.py'
           function*
             u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_https.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_https.pysnap
index 04ecc10bd6..f49e4026ae 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_https.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_filename_if_https.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T07:29:42.194465Z'
+created: '2019-11-01T10:02:43.404327Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -13,6 +13,8 @@ app:
             u'foo.py'
           function*
             u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
 --------------------------------------------------------------------------
 system:
   hash: '098f6bcd4621d373cade4e832627b4f6'
@@ -24,3 +26,5 @@ system:
             u'foo.py'
           function*
             u'test'
+          context-line (discarded because from URL origin)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
index 97d1c2fa2b..2d9d2a2376 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/frame_ignores_module_if_page_url.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-07-10T12:18:45.903717Z'
+created: '2019-11-01T10:06:05.611880Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -13,7 +13,6 @@ app:
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
-          function (ignored unknown function name)
 --------------------------------------------------------------------------
 fallback:
   hash: 'd41d8cd98f00b204e9800998ecf8427e'
@@ -28,4 +27,3 @@ system:
             u'foo/bar/baz'
           filename (ignored because frame points to a URL)
             u'foo.py'
-          function (ignored unknown function name)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_chrome.pysnap
index cd7650cd85..90309f893e 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_chrome.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_chrome.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:59:49.524963Z'
+created: '2019-11-01T10:06:05.886134Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -12,7 +12,6 @@ app:
           frame (non app frame)
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             filename*
               u'test.html'
@@ -41,7 +40,6 @@ app:
           frame (non app frame)
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             filename*
               u'test.html'
@@ -71,7 +69,6 @@ system:
           frame*
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame*
             filename*
               u'test.html'
@@ -100,7 +97,6 @@ system:
           frame*
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame*
             filename*
               u'test.html'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_firefox.pysnap
index 5199630e0b..43a5bea2bb 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_firefox.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_firefox.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T13:28:59.012503Z'
+created: '2019-11-01T10:06:05.916131Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -12,7 +12,6 @@ app:
           frame (non app frame)
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             filename*
               u'test.html'
@@ -67,7 +66,6 @@ system:
           frame*
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame*
             filename*
               u'test.html'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_chrome.pysnap
index 99597ebeee..db79f4bbbe 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_chrome.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_chrome.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:59:49.569993Z'
+created: '2019-11-01T10:06:05.932358Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -14,7 +14,6 @@ app:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             module*
               u'test'
@@ -53,7 +52,6 @@ app:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             module*
               u'test'
@@ -91,7 +89,6 @@ system:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame*
             module*
               u'test'
@@ -130,7 +127,6 @@ system:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame*
             module*
               u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_firefox.pysnap
index 35bfd91c7f..2635aac41b 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_firefox.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_firefox.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T13:28:59.047346Z'
+created: '2019-11-01T10:06:05.963211Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -14,7 +14,6 @@ app:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             module*
               u'test'
@@ -87,7 +86,6 @@ system:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame*
             module*
               u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_safari.pysnap
index 55256ff9a5..5dd2352fe3 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_safari.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_http_safari.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:58:20.716069Z'
+created: '2019-11-01T10:06:05.980442Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -14,7 +14,6 @@ app:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             module*
               u'test'
@@ -51,7 +50,6 @@ app:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             module*
               u'test'
@@ -94,7 +92,6 @@ system:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame*
             module*
               u'test'
@@ -131,7 +128,6 @@ system:
               u'test'
             filename (ignored because frame points to a URL)
               u'test.html'
-            function (ignored unknown function name)
           frame*
             module*
               u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_safari.pysnap
index 9aa638b24f..f27b2ebe19 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_safari.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_safari.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:58:20.731060Z'
+created: '2019-11-01T10:06:05.997494Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -12,7 +12,6 @@ app:
           frame (non app frame)
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             filename*
               u'test.html'
@@ -41,7 +40,6 @@ app:
           frame (non app frame)
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame (non app frame)
             filename*
               u'test.html'
@@ -76,7 +74,6 @@ system:
           frame*
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame*
             filename*
               u'test.html'
@@ -105,7 +102,6 @@ system:
           frame*
             filename*
               u'test.html'
-            function (ignored unknown function name)
           frame*
             filename*
               u'test.html'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap
index 9ae5cff923..fd98ffac76 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_firefox.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T22:36:44.020808Z'
+created: '2019-10-31T12:42:10.480833Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -98,6 +98,7 @@ app:
             function*
               u'this'
             context-line (discarded because line too long)
+              u'{snip} !==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=functi {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -106,6 +107,7 @@ app:
             function*
               u'this'
             context-line (discarded because line too long)
+              u'{snip} );e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -114,6 +116,7 @@ app:
             function*
               u'If'
             context-line (discarded because line too long)
+              u'{snip} );else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t("185"))}} {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -122,6 +125,7 @@ app:
             function*
               u'Yg'
             context-line (discarded because line too long)
+              u'{snip} ),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=n {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -130,6 +134,7 @@ app:
             function*
               u'Xg'
             context-line (discarded because line too long)
+              u'{snip} t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh( {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -138,6 +143,7 @@ app:
             function*
               u'rh'
             context-line (discarded because line too long)
+              u'{snip} nate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.c {snip}'
           frame*
             module*
               u'app/views/groupDetails/shared/groupEventDetails'
@@ -265,6 +271,7 @@ system:
             function*
               u'this'
             context-line (discarded because line too long)
+              u'{snip} !==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=functi {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -273,6 +280,7 @@ system:
             function*
               u'this'
             context-line (discarded because line too long)
+              u'{snip} );e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -281,6 +289,7 @@ system:
             function*
               u'If'
             context-line (discarded because line too long)
+              u'{snip} );else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t("185"))}} {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -289,6 +298,7 @@ system:
             function*
               u'Yg'
             context-line (discarded because line too long)
+              u'{snip} ),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=n {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -297,6 +307,7 @@ system:
             function*
               u'Xg'
             context-line (discarded because line too long)
+              u'{snip} t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh( {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -305,6 +316,7 @@ system:
             function*
               u'rh'
             context-line (discarded because line too long)
+              u'{snip} nate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.c {snip}'
           frame*
             module*
               u'app/views/groupDetails/shared/groupEventDetails'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_safari.pysnap
index 60ec64857c..8c8641afbf 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_safari.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/javascript_xbrowser_sentryui_safari.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-08T22:36:44.046229Z'
+created: '2019-10-31T12:42:10.507542Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -67,6 +67,7 @@ app:
             function*
               u'setState'
             context-line (discarded because line too long)
+              u'{snip} ructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0, {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -75,6 +76,7 @@ app:
             function*
               u'enqueueSetState'
             context-line (discarded because line too long)
+              u'{snip} &(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!=='
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -83,6 +85,7 @@ app:
             function*
               u'tag'
             context-line (discarded because line too long)
+              u'var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -91,6 +94,7 @@ app:
             function*
               u'Yg'
             context-line (discarded because line too long)
+              u'function Xg(a,b,c){V?t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -99,6 +103,7 @@ app:
             function*
               u'Xg'
             context-line (discarded because line too long)
+              u'function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}'
           frame (non app frame)
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -107,6 +112,7 @@ app:
             function*
               u'ih'
             context-line (discarded because line too long)
+              u'{snip} .__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;c {snip}'
           frame*
             module*
               u'app/views/groupDetails/shared/groupEventDetails'
@@ -203,6 +209,7 @@ system:
             function*
               u'setState'
             context-line (discarded because line too long)
+              u'{snip} ructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0, {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -211,6 +218,7 @@ system:
             function*
               u'enqueueSetState'
             context-line (discarded because line too long)
+              u'{snip} &(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!=='
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -219,6 +227,7 @@ system:
             function*
               u'tag'
             context-line (discarded because line too long)
+              u'var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -227,6 +236,7 @@ system:
             function*
               u'Yg'
             context-line (discarded because line too long)
+              u'function Xg(a,b,c){V?t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -235,6 +245,7 @@ system:
             function*
               u'Xg'
             context-line (discarded because line too long)
+              u'function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}'
           frame*
             module*
               u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
@@ -243,6 +254,7 @@ system:
             function*
               u'ih'
             context-line (discarded because line too long)
+              u'{snip} .__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;c {snip}'
           frame*
             module*
               u'app/views/groupDetails/shared/groupEventDetails'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/minified_javascript.pysnap
index fd987f6ab9..93cf04ec79 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/minified_javascript.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/minified_javascript.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T13:28:59.194675Z'
+created: '2019-10-31T12:42:10.619408Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -17,6 +17,7 @@ app:
             function*
               u'M'
             context-line (discarded because line too long)
+              u'{snip} o,r;for(b&&(o=i.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(b)n=function(){i.n {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -25,6 +26,7 @@ app:
             function (ignored unknown function name)
               u'S/<'
             context-line (discarded because line too long)
+              u'{snip} ,M):b(n)):M(o)}catch(t){a&&!i&&a.exit(),M(t)}};n.length>p;)i(n[p++]);t._c=[],t._n=!1,e&&!t._h&&x(t)})}},x=function(t){d.call(b,function(){va {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -33,6 +35,7 @@ app:
             function*
               u'i'
             context-line (discarded because line too long)
+              u'{snip} ry{c?(r||(2==t._h&&T(t),t._h=1),!0===c?n=o:(a&&a.enter(),n=c(o),a&&(a.exit(),i=!0)),n===e.promise?M(y("Promise-chain cycle")):(p=N(n))?p.cal {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -41,6 +44,7 @@ app:
             function*
               u'b'
             context-line (discarded because line too long)
+              u'{snip} ply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.lo {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -49,6 +53,7 @@ app:
             function*
               u'n'
             context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -57,6 +62,7 @@ app:
             function*
               u'g/</t[e]'
             context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -65,6 +71,7 @@ app:
             function (ignored unknown function name)
               u'_invoke</<'
             context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -73,6 +80,7 @@ app:
             function*
               u'W'
             context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/app'
@@ -81,6 +89,7 @@ app:
             function (ignored unknown function name)
               u'e/<'
             context-line (discarded because line too long)
+              u'{snip} (e.t0)&&n<I)){e.next=12;break}return n++,e.abrupt("return",a());case 12:throw e.t0;case 13:case"end":return e.stop()}},e,this,[[0,7]])}));re {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/app'
@@ -89,6 +98,7 @@ app:
             function (ignored unknown function name)
               u'e/</a</<'
             context-line (discarded because line too long)
+              u'{snip} urn e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}(),e.abrupt("return",a());case 3:case"end":return e.stop {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -97,6 +107,7 @@ app:
             function (ignored unknown function name)
               u'exports/<'
             context-line (discarded because line too long)
+              u'{snip} unction(t){return function(){var e=this,o=arguments;return new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)} {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -105,6 +116,7 @@ app:
             function*
               u'L'
             context-line (discarded because line too long)
+              u'{snip} function(t){O(this,L,"Promise","_h"),s(t),o.call(this);try{t(M(H,this,1),M(C,this,1))}catch(t){C.call(this,t)}},(o=function(t){this._c=[],th {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -113,6 +125,7 @@ app:
             function (ignored unknown function name)
               u'exports/</<'
             context-line (discarded because line too long)
+              u'{snip} n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.load(n(1467))},,function( {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -121,6 +134,7 @@ app:
             function*
               u'c'
             context-line (discarded because line too long)
+              u'{snip} new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,funct {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -129,6 +143,7 @@ app:
             function*
               u'n'
             context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -137,6 +152,7 @@ app:
             function*
               u'g/</t[e]'
             context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -145,6 +161,7 @@ app:
             function (ignored unknown function name)
               u'_invoke</<'
             context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -153,6 +170,7 @@ app:
             function*
               u'W'
             context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/app'
@@ -161,6 +179,7 @@ app:
             function (ignored unknown function name)
               u'e/<'
             context-line (discarded because line too long)
+              u'{snip} r(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t();case 3:return r=e.sent,e.abrupt("return",r.default||r);case 7:if(e.prev=7,e.t {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/app'
@@ -169,6 +188,7 @@ app:
             function*
               u'componentPromise'
             context-line (discarded because line too long)
+              u'{snip} orgId/issues/:groupId/",componentPromise:function(){return n.e(75).then(n.bind(null,2497))},component:Object(cs.default)(Zt.a)},b.a.createEl {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/app'
@@ -177,6 +197,7 @@ app:
             function* (trimmed javascript function)
               u'e'
             context-line (discarded because line too long)
+              u'{snip} "+i+")");o.type=a,o.request=i,n[1](o)}r[e]=void 0}};var c=setTimeout(function(){i({type:"timeout",target:s})},12e4);s.onerror=s.onload=i,do {snip}'
           frame (non app frame)
             module*
               u'sentry/dist/vendor'
@@ -185,6 +206,7 @@ app:
             function (ignored unknown function name)
               u'wrapTimeFunction/<'
             context-line (discarded because line too long)
+              u'{snip} ism:{data:{function:Dt(t)},handled:!0,type:"instrument"}}),t.apply(this,e)}},t.prototype.wrapRAF=function(t){return function(e){return t(Et( {snip}'
         type*
           u'NS_ERROR_NOT_INITIALIZED'
 --------------------------------------------------------------------------
@@ -202,6 +224,7 @@ system:
             function*
               u'M'
             context-line (discarded because line too long)
+              u'{snip} o,r;for(b&&(o=i.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(b)n=function(){i.n {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -210,6 +233,7 @@ system:
             function (ignored unknown function name)
               u'S/<'
             context-line (discarded because line too long)
+              u'{snip} ,M):b(n)):M(o)}catch(t){a&&!i&&a.exit(),M(t)}};n.length>p;)i(n[p++]);t._c=[],t._n=!1,e&&!t._h&&x(t)})}},x=function(t){d.call(b,function(){va {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -218,6 +242,7 @@ system:
             function*
               u'i'
             context-line (discarded because line too long)
+              u'{snip} ry{c?(r||(2==t._h&&T(t),t._h=1),!0===c?n=o:(a&&a.enter(),n=c(o),a&&(a.exit(),i=!0)),n===e.promise?M(y("Promise-chain cycle")):(p=N(n))?p.cal {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -226,6 +251,7 @@ system:
             function*
               u'b'
             context-line (discarded because line too long)
+              u'{snip} ply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.lo {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -234,6 +260,7 @@ system:
             function*
               u'n'
             context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -242,6 +269,7 @@ system:
             function*
               u'g/</t[e]'
             context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -250,6 +278,7 @@ system:
             function (ignored unknown function name)
               u'_invoke</<'
             context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -258,6 +287,7 @@ system:
             function*
               u'W'
             context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
           frame*
             module*
               u'sentry/dist/app'
@@ -266,6 +296,7 @@ system:
             function (ignored unknown function name)
               u'e/<'
             context-line (discarded because line too long)
+              u'{snip} (e.t0)&&n<I)){e.next=12;break}return n++,e.abrupt("return",a());case 12:throw e.t0;case 13:case"end":return e.stop()}},e,this,[[0,7]])}));re {snip}'
           frame*
             module*
               u'sentry/dist/app'
@@ -274,6 +305,7 @@ system:
             function (ignored unknown function name)
               u'e/</a</<'
             context-line (discarded because line too long)
+              u'{snip} urn e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}(),e.abrupt("return",a());case 3:case"end":return e.stop {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -282,6 +314,7 @@ system:
             function (ignored unknown function name)
               u'exports/<'
             context-line (discarded because line too long)
+              u'{snip} unction(t){return function(){var e=this,o=arguments;return new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)} {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -290,6 +323,7 @@ system:
             function*
               u'L'
             context-line (discarded because line too long)
+              u'{snip} function(t){O(this,L,"Promise","_h"),s(t),o.call(this);try{t(M(H,this,1),M(C,this,1))}catch(t){C.call(this,t)}},(o=function(t){this._c=[],th {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -298,6 +332,7 @@ system:
             function (ignored unknown function name)
               u'exports/</<'
             context-line (discarded because line too long)
+              u'{snip} n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.load(n(1467))},,function( {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -306,6 +341,7 @@ system:
             function*
               u'c'
             context-line (discarded because line too long)
+              u'{snip} new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,funct {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -314,6 +350,7 @@ system:
             function*
               u'n'
             context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -322,6 +359,7 @@ system:
             function*
               u'g/</t[e]'
             context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -330,6 +368,7 @@ system:
             function (ignored unknown function name)
               u'_invoke</<'
             context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -338,6 +377,7 @@ system:
             function*
               u'W'
             context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
           frame*
             module*
               u'sentry/dist/app'
@@ -346,6 +386,7 @@ system:
             function (ignored unknown function name)
               u'e/<'
             context-line (discarded because line too long)
+              u'{snip} r(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t();case 3:return r=e.sent,e.abrupt("return",r.default||r);case 7:if(e.prev=7,e.t {snip}'
           frame*
             module*
               u'sentry/dist/app'
@@ -354,6 +395,7 @@ system:
             function*
               u'componentPromise'
             context-line (discarded because line too long)
+              u'{snip} orgId/issues/:groupId/",componentPromise:function(){return n.e(75).then(n.bind(null,2497))},component:Object(cs.default)(Zt.a)},b.a.createEl {snip}'
           frame*
             module*
               u'sentry/dist/app'
@@ -362,6 +404,7 @@ system:
             function* (trimmed javascript function)
               u'e'
             context-line (discarded because line too long)
+              u'{snip} "+i+")");o.type=a,o.request=i,n[1](o)}r[e]=void 0}};var c=setTimeout(function(){i({type:"timeout",target:s})},12e4);s.onerror=s.onload=i,do {snip}'
           frame*
             module*
               u'sentry/dist/vendor'
@@ -370,5 +413,6 @@ system:
             function (ignored unknown function name)
               u'wrapTimeFunction/<'
             context-line (discarded because line too long)
+              u'{snip} ism:{data:{function:Dt(t)},handled:!0,type:"instrument"}}),t.apply(this,e)}},t.prototype.wrapRAF=function(t){return function(e){return t(Et( {snip}'
         type*
           u'NS_ERROR_NOT_INITIALIZED'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap
index 5a4573dbc0..5d334273e9 100644
--- a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_05_08/stacktrace_ignores_singular_anonymous_frame.pysnap
@@ -1,5 +1,5 @@
 ---
-created: '2019-05-10T12:45:56.069725Z'
+created: '2019-11-01T10:06:06.520539Z'
 creator: sentry
 source: tests/sentry/grouping/test_variants.py
 ---
@@ -11,7 +11,6 @@ app:
         frame (non app frame)
           filename (anonymous filename discarded)
             u'<anonymous>'
-          function (ignored unknown function name)
         frame (non app frame)
           filename*
             u'dojo.js'
@@ -31,7 +30,6 @@ system:
         frame (ignored low quality javascript frame)
           filename (anonymous filename discarded)
             u'<anonymous>'
-          function (ignored unknown function name)
         frame*
           filename*
             u'dojo.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/actix.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/actix.pysnap
new file mode 100644
index 0000000000..96c225c696
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/actix.pysnap
@@ -0,0 +1,788 @@
+---
+created: '2019-09-26T13:46:41.968243Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '703d3dd9cb763e3f5037f659d27da947'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame (marked out of app by grouping enhancement rule (family:native function:alloc::* -app))
+            filename*
+              u'boxed.rs'
+            function*
+              u'alloc::boxed::FnBox<T>::call_box'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::AssertUnwindSafe<T>::call_once'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Entered<T>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Entered<T>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduler<T>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduler<T>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduled<T>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_future_notify::{{closure}}'
+          frame (marked out of app by grouping enhancement rule (family:native function:alloc::* -app))
+            filename*
+              u'mod.rs'
+            function*
+              u'alloc::boxed::Box<T>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function*
+              u'futures::future::then::Then<T>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function*
+              u'futures::future::chain::Chain<T>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function*
+              u'futures::future::either::Either<T>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function*
+              u'futures::future::either::Either<T>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function*
+              u'actix_net::service::and_then::AndThenFuture<T>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function*
+              u'actix_net::service::map_err::MapErrFuture<T>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'actix_web::server::channel::HttpChannel<T>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'actix_web::server::channel::HttpChannel<T>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function*
+              u'actix_web::pipeline::Pipeline<T>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function*
+              u'actix_web::pipeline::ProcessResponse<T>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            filename*
+              u'log.rs'
+            function*
+              u'sentry::integrations::log::Logger::log'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame (non app frame)
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
+--------------------------------------------------------------------------
+system:
+  hash: '1df163ce3be65319df4fcc9cb34b60c1'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'__pthread_start'
+          frame*
+            function*
+              u'__pthread_body'
+          frame*
+            filename*
+              u'thread.rs'
+            function*
+              u'std::sys::unix::thread::Thread::new::thread_start'
+          frame* (marked out of app by grouping enhancement rule (family:native function:alloc::* -app))
+            filename*
+              u'boxed.rs'
+            function*
+              u'alloc::boxed::FnBox<T>::call_box'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::catch_unwind'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            filename*
+              u'panicking.rs'
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            filename*
+              u'panic.rs'
+            function*
+              u'std::panic::AssertUnwindSafe<T>::call_once'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'backtrace.rs'
+            function*
+              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
+          frame*
+            filename*
+              u'arbiter.rs'
+            function*
+              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_reactor::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'clock.rs'
+            function*
+              u'tokio_timer::clock::clock::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'handle.rs'
+            function*
+              u'tokio_timer::timer::handle::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'global.rs'
+            function*
+              u'tokio_executor::global::with_default::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'runtime.rs'
+            function*
+              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Entered<T>::block_on'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Entered<T>::tick'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduler<T>::tick'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter::{{closure}}'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::CurrentRunner::set_spawn'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'tokio_current_thread::Borrow<T>::enter::{{closure}}::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduler<T>::tick::{{closure}}'
+          frame*
+            filename*
+              u'scheduler.rs'
+            function*
+              u'tokio_current_thread::scheduler::Scheduled<T>::tick'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_future_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_fn_notify'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::enter'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::std::set'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::enter::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'futures::task_impl::Spawn<T>::poll_future_notify::{{closure}}'
+          frame*
+            filename*
+              u'mod.rs'
+            function*
+              u'alloc::boxed::Box<T>::poll'
+          frame*
+            filename*
+              u'then.rs'
+            function*
+              u'futures::future::then::Then<T>::poll'
+          frame*
+            filename*
+              u'chain.rs'
+            function*
+              u'futures::future::chain::Chain<T>::poll'
+          frame*
+            filename*
+              u'either.rs'
+            function*
+              u'futures::future::either::Either<T>::poll'
+          frame (ignored due to recursion)
+            filename*
+              u'either.rs'
+            function*
+              u'futures::future::either::Either<T>::poll'
+          frame*
+            filename*
+              u'acceptor.rs'
+            function*
+              u'actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T>::poll'
+          frame*
+            filename*
+              u'and_then.rs'
+            function*
+              u'actix_net::service::and_then::AndThenFuture<T>::poll'
+          frame*
+            filename*
+              u'map_err.rs'
+            function*
+              u'actix_net::service::map_err::MapErrFuture<T>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'actix_web::server::channel::HttpChannel<T>::poll'
+          frame*
+            filename*
+              u'channel.rs'
+            function*
+              u'actix_web::server::channel::HttpChannel<T>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll_handler'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::poll_io'
+          frame*
+            filename*
+              u'h1.rs'
+            function*
+              u'actix_web::server::h1::Http1Dispatcher<T>::parse'
+          frame*
+            filename*
+              u'pipeline.rs'
+            function*
+              u'actix_web::pipeline::Pipeline<T>::poll_io'
+          frame*
+            filename*
+              u'<::log::macros::log macros>'
+            function*
+              u'actix_web::pipeline::ProcessResponse<T>::poll_io'
+          frame*
+            filename*
+              u'lib.rs'
+            function*
+              u'log::__private_api_log'
+          frame*
+            filename*
+              u'log.rs'
+            function*
+              u'sentry::integrations::log::Logger::log'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::with'
+          frame*
+            filename*
+              u'local.rs'
+            function*
+              u'std::thread::local::LocalKey<T>::try_with'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with::{{closure}}'
+          frame*
+            filename*
+              u'hub.rs'
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+        type*
+          u'actix_web::pipeline'
+        value (ignored because stacktrace takes precedence)
+          u'Error occurred during request handling, status: <int> Internal Server Error Something went really wrong here'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/aspnetcore.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/aspnetcore.pysnap
new file mode 100644
index 0000000000..c791405cbd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/aspnetcore.pysnap
@@ -0,0 +1,347 @@
+---
+created: '2019-05-08T07:29:41.980976Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '228c649a3aa0901622c0a0e66ab0522c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame (non app frame)
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame (non app frame)
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame (non app frame)
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame (non app frame)
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'An unhandled exception has occurred while executing the request.'
+--------------------------------------------------------------------------
+system:
+  hash: '4ccd0f1953483581ba360c7518f90332'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointRoutingMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Routing.EndpointMiddleware'
+            function*
+              u'Invoke'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeFilterPipelineAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker'
+            function*
+              u'InvokeNextResourceFilter'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeInnerFilterAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Next'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'Rethrow'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeNextActionFilterAsync'
+          frame*
+            module*
+              u'System.Runtime.CompilerServices.TaskAwaiter'
+            function*
+              u'HandleNonSuccessAndDebuggerNotification'
+          frame*
+            module*
+              u'System.Runtime.ExceptionServices.ExceptionDispatchInfo'
+            function*
+              u'Throw'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ControllerActionInvoker'
+            function*
+              u'InvokeActionMethodAsync'
+          frame*
+            module*
+              u'Microsoft.AspNetCore.Mvc.Internal.ActionMethodExecutor+SyncObjectResultExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'Microsoft.Extensions.Internal.ObjectMethodExecutor'
+            function*
+              u'Execute'
+          frame*
+            module*
+              u'(unknown)'
+            function*
+              u'lambda_method'
+          frame*
+            module*
+              u'SentryTest2.Controllers.ValuesController'
+            filename (module takes precedence)
+              u'valuescontroller.cs'
+            function*
+              u'Get'
+        type*
+          u'System.Exception'
+        value (ignored because stacktrace takes precedence)
+          u'sync exception'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/connection_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/connection_error.pysnap
new file mode 100644
index 0000000000..49393eeac7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/connection_error.pysnap
@@ -0,0 +1,231 @@
+---
+created: '2019-05-08T07:31:17.178420Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '6b059b9febc815ac18ac4d2082e38a9b'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+            context-line*
+              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'rejections = is_rate_limited(client, keys, args)'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+            context-line*
+              u'return script(keys, args, client)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+            context-line*
+              u'return client.evalsha(self.sha, len(keys), *args)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+            context-line*
+              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+            context-line*
+              u'return self.parse_response(connection, command_name, **options)'
+          frame (non app frame)
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+            context-line*
+              u'response = connection.read_response()'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'response = self._parser.read_response()'
+          frame (non app frame)
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'(e.args,))'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '013d3477a774fe20c468dc8accd516f1'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.utils.services'
+            filename (module takes precedence)
+              u'services.py'
+            function*
+              u'<lambda>'
+            context-line*
+              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
+          frame*
+            module*
+              u'getsentry.quotas'
+            filename (module takes precedence)
+              u'quotas.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
+          frame*
+            module*
+              u'sentry.quotas.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'is_rate_limited'
+            context-line*
+              u'rejections = is_rate_limited(client, keys, args)'
+          frame*
+            module*
+              u'sentry.utils.redis'
+            filename (module takes precedence)
+              u'redis.py'
+            function*
+              u'call_script'
+            context-line*
+              u'return script(keys, args, client)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'__call__'
+            context-line*
+              u'return client.evalsha(self.sha, len(keys), *args)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'evalsha'
+            context-line*
+              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'execute_command'
+            context-line*
+              u'return self.parse_response(connection, command_name, **options)'
+          frame*
+            module*
+              u'redis.client'
+            filename (module takes precedence)
+              u'client.py'
+            function*
+              u'parse_response'
+            context-line*
+              u'response = connection.read_response()'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'response = self._parser.read_response()'
+          frame*
+            module*
+              u'redis.connection'
+            filename (module takes precedence)
+              u'connection.py'
+            function*
+              u'read_response'
+            context-line*
+              u'(e.args,))'
+        type*
+          u'ConnectionError'
+        value (ignored because stacktrace takes precedence)
+          u"Error while reading from socket: ('Connection closed by server.',)"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp.pysnap
new file mode 100644
index 0000000000..dd2093ea30
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-08T07:29:42.002642Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '666766514295bb52812324097cdaf53e'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'YYY'
+      message (csp takes precedence)
+        u"Blocked 'script' from 'YYY'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_img_src.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_img_src.pysnap
new file mode 100644
index 0000000000..d82a399ecd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_img_src.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.010851Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1742101e08eb1608f569751dfedd0062'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'ftp://example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_no_blocked_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_no_blocked_uri.pysnap
new file mode 100644
index 0000000000..8a2753861d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_no_blocked_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.017119Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'efddf1cde918097259aa7d4904fb1942'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          "'self'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_data_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_data_uri.pysnap
new file mode 100644
index 0000000000..95ef30eb10
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_data_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.024939Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4e6f2bce9d121aa89f4dc5e5da08afb5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'img-src'
+        violation (not a local script violation)
+        uri*
+          u'data:'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_src_uri.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_src_uri.pysnap
new file mode 100644
index 0000000000..caf6d13917
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_script_src_uri.pysnap
@@ -0,0 +1,15 @@
+---
+created: '2019-05-08T07:29:42.031984Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '223cdacfe5b4b830dc700b5c18cc21b4'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'script-src'
+        violation (not a local script violation)
+        uri*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_style_src_elem.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_style_src_elem.pysnap
new file mode 100644
index 0000000000..1009bad119
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/csp_style_src_elem.pysnap
@@ -0,0 +1,17 @@
+---
+created: '2019-05-08T07:29:42.039516Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '537a973f594c364842893e9a72af62a5'
+  component:
+    default*
+      csp*
+        salt* (a static salt)
+          u'style-src-elem'
+        violation (not a local script violation)
+        uri*
+          u'use.fontawesome.com'
+      message (csp takes precedence)
+        u"Blocked 'style' from 'use.fontawesome.com'"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/custom_fingerprint.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/custom_fingerprint.pysnap
new file mode 100644
index 0000000000..18bef30cdb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/custom_fingerprint.pysnap
@@ -0,0 +1,8 @@
+---
+created: '2019-05-08T07:29:42.048653Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+custom-fingerprint:
+  hash: 'f30afa00b85f5cac5ee0bce01b31f08d'
+  values: [u'celery', u'SoftTimeLimitExceeded', u'sentry.tasks.store.process_event']
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/empty.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/empty.pysnap
new file mode 100644
index 0000000000..304efa6a24
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/empty.pysnap
@@ -0,0 +1,7 @@
+---
+created: '2019-05-08T07:29:42.056458Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_comput_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_comput_hashes.pysnap
new file mode 100644
index 0000000000..0e64a9ea45
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_comput_hashes.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-05-08T07:29:42.065046Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'b23ee1963904c2ca87b145febf94b66c'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes.pysnap
new file mode 100644
index 0000000000..b33c41eef0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-05-08T07:29:42.073921Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_2.pysnap
new file mode 100644
index 0000000000..718df996a4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_2.pysnap
@@ -0,0 +1,32 @@
+---
+created: '2019-05-08T07:29:42.082698Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '9509e122c6175606d52862fa4f64853c'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.py'
+        type*
+          u'ValueError'
+        value (ignored because stacktrace takes precedence)
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_3.pysnap
new file mode 100644
index 0000000000..fa55228f41
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_compute_hashes_3.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-05-08T07:29:42.092362Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_javascript_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_javascript_no_in_app.pysnap
new file mode 100644
index 0000000000..80351200fc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_javascript_no_in_app.pysnap
@@ -0,0 +1,58 @@
+---
+created: '2019-11-01T10:06:07.091791Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+            context-line*
+              u'onError(err);'
+          frame (non app frame)
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'onError'
+            context-line*
+              u'this.model.submitError(error);'
+        type*
+          u'TypeError'
+        value*
+          u"Cannot read property 'submitError' of null"
+--------------------------------------------------------------------------
+system:
+  hash: '26552f86ca2368e708afa1df6effc1c5'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'app/components/modals/createTeamModal'
+            filename (module takes precedence)
+              u'createteammodal.jsx'
+            context-line*
+              u'onError(err);'
+          frame*
+            module*
+              u'app/views/settings/components/forms/form'
+            filename (module takes precedence)
+              u'form.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'onError'
+            context-line*
+              u'this.model.submitError(error);'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"Cannot read property 'submitError' of null"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_type.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_type.pysnap
new file mode 100644
index 0000000000..9a642bad73
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_type.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-05-08T07:29:42.110803Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        value*
+          u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '5eb63bbbe01eeed093cb22bb8f5acdc3'
+  component:
+    system*
+      exception*
+        value*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_value.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_value.pysnap
new file mode 100644
index 0000000000..6f87de617d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/exception_without_value.pysnap
@@ -0,0 +1,20 @@
+---
+created: '2019-05-08T07:29:42.118745Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'ValueError'
+--------------------------------------------------------------------------
+system:
+  hash: '5a2cfd89b7b171fd7b4794b08023d04f'
+  component:
+    system*
+      exception*
+        type*
+          u'ValueError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/expectct.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/expectct.pysnap
new file mode 100644
index 0000000000..d153799bdd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/expectct.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.127596Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '3d2933f4b5ec459ec8d569a398fd328c'
+  component:
+    default*
+      expect-ct*
+        salt* (a static salt)
+          'expect-ct'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..d46642a406
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_comput_hashes_ignores_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.135625Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '526b64456c48836a46ec1a89544fd412'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..78f06178b9
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.143860Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: '45c0b0a8c777e7a7040d7c39233a08a5'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_clojure_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
new file mode 100644
index 0000000000..f17d7fd2cb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_clojure_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.152945Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '353e05904b48bd3ae4fa9623934a70d0'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sentry_clojure_example.core$_main$fn__<auto>$fn__<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_spring_classes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_spring_classes.pysnap
new file mode 100644
index 0000000000..2715a734d1
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_extra_ENHANCED_spring_classes.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.161510Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
+--------------------------------------------------------------------------
+system:
+  hash: 'be15ca3d511b96918e087c4f42503ca2'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'invalid.gruml.talkytalkyhub.common.config.JipJipConfig$$EnhancerBySpringCGLIB$$<auto>$$EnhancerBySpringCGLIB$$<auto>$$FastClassBySpringCGLIB$$<auto>'
+          function*
+            u'jipJipManagementApplication'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_from_url_origin_corner_cases.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_from_url_origin_corner_cases.pysnap
new file mode 100644
index 0000000000..0f1474797c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_from_url_origin_corner_cases.pysnap
@@ -0,0 +1,54 @@
+---
+created: '2019-11-01T10:16:15.758523Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame (non app frame)
+          filename*
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          context-line (discarded because from URL origin and no function)
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: 'e04dce7550635e05dbd7f656102cf304'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame*
+          filename*
+            u'foo.js'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo.js'
+          context-line (discarded because from URL origin and no function)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_abs_path_is_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_abs_path_is_http.pysnap
new file mode 100644
index 0000000000..ed70404561
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_abs_path_is_http.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.169865Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+--------------------------------------------------------------------------
+system:
+  hash: '098f6bcd4621d373cade4e832627b4f6'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_blob.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_blob.pysnap
new file mode 100644
index 0000000000..ca9dfe7786
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_blob.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-11-01T10:06:07.176433Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'7f7aaadf-a006-4217-9ed5-5fbf8585c6c0'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_http.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_http.pysnap
new file mode 100644
index 0000000000..9627653df9
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_http.pysnap
@@ -0,0 +1,30 @@
+---
+created: '2019-11-01T10:02:45.139871Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '64a0e0a34d99dce03a8c5a4c237a4b5a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_https.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_https.pysnap
new file mode 100644
index 0000000000..46cfd1d8b2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_filename_if_https.pysnap
@@ -0,0 +1,30 @@
+---
+created: '2019-11-01T10:02:45.149838Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '64a0e0a34d99dce03a8c5a4c237a4b5a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'test'
+          context-line*
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_function.pysnap
new file mode 100644
index 0000000000..8be3c1e7b0
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.203242Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
+--------------------------------------------------------------------------
+system:
+  hash: 'be7f1b8b4014de623c533a8218dba5bd'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo.bar.Baz'
+          function (ignored lambda function)
+            u'lambda$work$1'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_module.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_module.pysnap
new file mode 100644
index 0000000000..2b7179dea3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_java8_lambda_module.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.212235Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
+--------------------------------------------------------------------------
+system:
+  hash: '53b9e9679a8ea25880376080b76f98ad'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module (ignored java lambda)
+            u'foo.bar.Baz$$Lambda$40/1673859467'
+          function*
+            u'call'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist.pysnap
new file mode 100644
index 0000000000..f48514c291
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.220823Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_2.pysnap
new file mode 100644
index 0000000000..d069f640e7
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.229148Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: '538bdfd8d7bb2495d0d6429c3689a420'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'com.example.api.entry.EntriesResource_$$_javassist<auto>'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_3.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_3.pysnap
new file mode 100644
index 0000000000..8f11227a35
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_javassist_3.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.237627Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
+--------------------------------------------------------------------------
+system:
+  hash: 'dc3d511120ce04996b1eef3496516e5c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename* (cleaned javassist parts)
+            u'entriesresource_$$_javassist<auto>.java'
+          function*
+            u'fn'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url.pysnap
new file mode 100644
index 0000000000..784700cc25
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url.pysnap
@@ -0,0 +1,29 @@
+---
+created: '2019-11-01T10:06:07.249591Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame (ignored single non-URL JavaScript frame)
+          module*
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url_2.pysnap
new file mode 100644
index 0000000000..f87f0eea03
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_module_if_page_url_2.pysnap
@@ -0,0 +1,30 @@
+---
+created: '2019-05-08T07:33:31.730952Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'a'
+--------------------------------------------------------------------------
+system:
+  hash: '0cc175b9c0f1b6a831c399e269772661'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module (ignored bad javascript module)
+            u'foo/bar/baz'
+          filename (ignored because frame points to a URL)
+            u'foo.py'
+          function*
+            u'a'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_safari_native_code.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_safari_native_code.pysnap
new file mode 100644
index 0000000000..48b40b692b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_safari_native_code.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.263032Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
+--------------------------------------------------------------------------
+system:
+  hash: '30eb5001914d29dd8461898b5b8094fe'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename (native code indicated by filename)
+            u'[native code]'
+          function*
+            u'forEach'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors.pysnap
new file mode 100644
index 0000000000..18e58ac5d5
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.272169Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '07d1a8e5728b3c4c7aa8b8273fd0e753'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedSerializationConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors_2.pysnap
new file mode 100644
index 0000000000..66b46815bb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_constructors_2.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.280719Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '09e0efcab18f545166318118ed4e0292'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed codegen marker)
+            u'sun.reflect.GeneratedConstructorAccessor<auto>'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_methods.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_methods.pysnap
new file mode 100644
index 0000000000..3e9c3119e6
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_ignores_sun_java_generated_methods.pysnap
@@ -0,0 +1,36 @@
+---
+created: '2019-05-21T19:16:13.403893Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+        frame (non app frame)
+          module* (removed reflection marker)
+            'jdk.internal.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+--------------------------------------------------------------------------
+system:
+  hash: '9bc326575875422d0d4ced3c35d9f916'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module* (removed reflection marker)
+            'sun.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
+        frame*
+          module* (removed reflection marker)
+            'jdk.internal.reflect.GeneratedMethodAccessor'
+          function*
+            u'invoke'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_block_functions.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_block_functions.pysnap
new file mode 100644
index 0000000000..4881acdc35
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_block_functions.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.297875Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
+--------------------------------------------------------------------------
+system:
+  hash: '27eed4125fc13d42163ddb0b8f357b48'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function* (ruby block)
+            'block'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_erb_templates.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_erb_templates.pysnap
new file mode 100644
index 0000000000..8df7e5ae00
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_erb_templates.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.306583Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
+--------------------------------------------------------------------------
+system:
+  hash: '4067a71d7098866f87c746a57a77b2bb'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
+          function* (removed generated erb template suffix)
+            u'_foo_html_erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames.pysnap
new file mode 100644
index 0000000000..3318555c57
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-04-17T20:02:28.542399Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames_2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames_2.pysnap
new file mode 100644
index 0000000000..7fed522973
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_sanitizes_versioned_filenames_2.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.323867Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.html.erb'
+--------------------------------------------------------------------------
+system:
+  hash: '2f908c015ad77a50595512fcf65d344c'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.html.erb'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_skips_symbol_if_unknown.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_skips_symbol_if_unknown.pysnap
new file mode 100644
index 0000000000..6327b2dbfd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_skips_symbol_if_unknown.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.332442Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'main'
+--------------------------------------------------------------------------
+system:
+  hash: 'a972f399399f5566f39b14a7afdd24ff'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_context_line_over_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_context_line_over_function.pysnap
new file mode 100644
index 0000000000..1fe67ea181
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_context_line_over_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.340686Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_function_over_lineno.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_function_over_lineno.pysnap
new file mode 100644
index 0000000000..7b56ea05a3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_function_over_lineno.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.349235Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
+--------------------------------------------------------------------------
+system:
+  hash: 'fb73cb54ced59b1c0c60d9bb40b7336b'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+          function*
+            u'bar'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_module_over_filename.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_module_over_filename.pysnap
new file mode 100644
index 0000000000..acb115f768
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_module_over_filename.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.357628Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'foo'
+          filename (module takes precedence)
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_symbol_instead_of_function.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_symbol_instead_of_function.pysnap
new file mode 100644
index 0000000000..0259e459ce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_uses_symbol_instead_of_function.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.365989Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
+--------------------------------------------------------------------------
+system:
+  hash: '23db4a9e73800923f345d2b868993345'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'libfoo'
+          function*
+            u'int main()'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_with_only_required_vars.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_with_only_required_vars.pysnap
new file mode 100644
index 0000000000..d82984f372
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/frame_with_only_required_vars.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.374452Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo.py'
+--------------------------------------------------------------------------
+system:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/hpkp.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/hpkp.pysnap
new file mode 100644
index 0000000000..727b31bb1e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/hpkp.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.382950Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '1e37a374cb33572622d02ff7a6237c44'
+  component:
+    default*
+      hpkp*
+        salt* (a static salt)
+          'hpkp'
+        hostname*
+          u'example.com'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_chained.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_chained.pysnap
new file mode 100644
index 0000000000..f20dd86a9b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_chained.pysnap
@@ -0,0 +1,787 @@
+---
+created: '2019-05-08T07:29:42.412753Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '750486b8d8c51500fa0dfbb6f1577af0'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame (non app frame)
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame (non app frame)
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value*
+            u'Address already in use'
+        exception*
+          stacktrace
+            frame (non app frame)
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value*
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame (non app frame)
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame (non app frame)
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'Failed to start connector [Connector[HTTP/<float><int>]]'
+--------------------------------------------------------------------------
+system:
+  hash: '8924849495809d42431719c2b9ab65c8'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+            frame*
+              module*
+                u'org.apache.coyote.AbstractProtocol'
+              filename (module takes precedence)
+                u'abstractprotocol.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.AbstractEndpoint'
+              filename (module takes precedence)
+                u'abstractendpoint.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.tomcat.util.net.NioEndpoint'
+              filename (module takes precedence)
+                u'nioendpoint.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketAdaptor'
+              filename (module takes precedence)
+                u'serversocketadaptor.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.ServerSocketChannelImpl'
+              filename (module takes precedence)
+                u'serversocketchannelimpl.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind'
+            frame*
+              module*
+                u'sun.nio.ch.Net'
+              filename (module takes precedence)
+                u'net.java'
+              function*
+                u'bind0'
+          type*
+            u'BindException'
+          value (ignored because stacktrace takes precedence)
+            u'Address already in use'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.apache.catalina.connector.Connector'
+              filename (module takes precedence)
+                u'connector.java'
+              function*
+                u'startInternal'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'service.getName(): "Tomcat";  Protocol handler start failed'
+        exception*
+          stacktrace*
+            frame*
+              module*
+                u'io.sentry.example.Application'
+              filename (module takes precedence)
+                u'application.java'
+              function*
+                u'main'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'run'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refreshContext'
+            frame*
+              module*
+                u'org.springframework.boot.SpringApplication'
+              filename (module takes precedence)
+                u'springapplication.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.context.support.AbstractApplicationContext'
+              filename (module takes precedence)
+                u'abstractapplicationcontext.java'
+              function*
+                u'refresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'finishRefresh'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.EmbeddedWebApplicationContext'
+              filename (module takes precedence)
+                u'embeddedwebapplicationcontext.java'
+              function*
+                u'startEmbeddedServletContainer'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'start'
+            frame*
+              module*
+                u'org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer'
+              filename (module takes precedence)
+                u'tomcatembeddedservletcontainer.java'
+              function*
+                u'addPreviouslyRemovedConnectors'
+            frame*
+              module*
+                u'org.apache.catalina.core.StandardService'
+              filename (module takes precedence)
+                u'standardservice.java'
+              function*
+                u'addConnector'
+            frame*
+              module*
+                u'org.apache.catalina.util.LifecycleBase'
+              filename (module takes precedence)
+                u'lifecyclebase.java'
+              function*
+                u'start'
+          type*
+            u'LifecycleException'
+          value (ignored because stacktrace takes precedence)
+            u'Failed to start component [Connector[HTTP/<float><int>]]'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_minimal.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_minimal.pysnap
new file mode 100644
index 0000000000..41fa52a755
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/java_minimal.pysnap
@@ -0,0 +1,803 @@
+---
+created: '2019-05-08T07:29:42.493256Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame (non app frame)
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame (non app frame)
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame (non app frame)
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame (non app frame)
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame (non app frame)
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame (non app frame)
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value*
+          u'/ by zero'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of system takes precedence)
+      message (exception of system takes precedence)
+        u'Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.ArithmeticException: / by zero] with root cause'
+--------------------------------------------------------------------------
+system:
+  hash: 'ec87dd10e4f7512ecccb4a068c5774ae'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'java.lang.Thread'
+            filename (module takes precedence)
+              u'thread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.threads.TaskThread$WrappingRunnable'
+            filename (module takes precedence)
+              u'taskthread.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor$Worker'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'java.util.concurrent.ThreadPoolExecutor'
+            filename (module takes precedence)
+              u'threadpoolexecutor.java'
+            function*
+              u'runWorker'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.SocketProcessorBase'
+            filename (module takes precedence)
+              u'socketprocessorbase.java'
+            function*
+              u'run'
+          frame*
+            module*
+              u'org.apache.tomcat.util.net.NioEndpoint$SocketProcessor'
+            filename (module takes precedence)
+              u'nioendpoint.java'
+            function*
+              u'doRun'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProtocol$ConnectionHandler'
+            filename (module takes precedence)
+              u'abstractprotocol.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.AbstractProcessorLight'
+            filename (module takes precedence)
+              u'abstractprocessorlight.java'
+            function*
+              u'process'
+          frame*
+            module*
+              u'org.apache.coyote.http11.Http11Processor'
+            filename (module takes precedence)
+              u'http11processor.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.connector.CoyoteAdapter'
+            filename (module takes precedence)
+              u'coyoteadapter.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardEngineValve'
+            filename (module takes precedence)
+              u'standardenginevalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.valves.ErrorReportValve'
+            filename (module takes precedence)
+              u'errorreportvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardHostValve'
+            filename (module takes precedence)
+              u'standardhostvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.authenticator.AuthenticatorBase'
+            filename (module takes precedence)
+              u'authenticatorbase.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardContextValve'
+            filename (module takes precedence)
+              u'standardcontextvalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.StandardWrapperValve'
+            filename (module takes precedence)
+              u'standardwrappervalve.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.CharacterEncodingFilter'
+            filename (module takes precedence)
+              u'characterencodingfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HiddenHttpMethodFilter'
+            filename (module takes precedence)
+              u'hiddenhttpmethodfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.HttpPutFormContentFilter'
+            filename (module takes precedence)
+              u'httpputformcontentfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.OncePerRequestFilter'
+            filename (module takes precedence)
+              u'onceperrequestfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.springframework.web.filter.RequestContextFilter'
+            filename (module takes precedence)
+              u'requestcontextfilter.java'
+            function*
+              u'doFilterInternal'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'org.apache.tomcat.websocket.server.WsFilter'
+            filename (module takes precedence)
+              u'wsfilter.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'doFilter'
+          frame*
+            module*
+              u'org.apache.catalina.core.ApplicationFilterChain'
+            filename (module takes precedence)
+              u'applicationfilterchain.java'
+            function*
+              u'internalDoFilter'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'javax.servlet.http.HttpServlet'
+            filename (module takes precedence)
+              u'httpservlet.java'
+            function*
+              u'service'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'doGet'
+          frame*
+            module*
+              u'org.springframework.web.servlet.FrameworkServlet'
+            filename (module takes precedence)
+              u'frameworkservlet.java'
+            function*
+              u'processRequest'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doService'
+          frame*
+            module*
+              u'org.springframework.web.servlet.DispatcherServlet'
+            filename (module takes precedence)
+              u'dispatcherservlet.java'
+            function*
+              u'doDispatch'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter'
+            filename (module takes precedence)
+              u'abstracthandlermethodadapter.java'
+            function*
+              u'handle'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'handleInternal'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter'
+            filename (module takes precedence)
+              u'requestmappinghandleradapter.java'
+            function*
+              u'invokeHandlerMethod'
+          frame*
+            module*
+              u'org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod'
+            filename (module takes precedence)
+              u'servletinvocablehandlermethod.java'
+            function*
+              u'invokeAndHandle'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'invokeForRequest'
+          frame*
+            module*
+              u'org.springframework.web.method.support.InvocableHandlerMethod'
+            filename (module takes precedence)
+              u'invocablehandlermethod.java'
+            function*
+              u'doInvoke'
+          frame*
+            module*
+              u'java.lang.reflect.Method'
+            filename (module takes precedence)
+              u'method.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.DelegatingMethodAccessorImpl'
+            filename (module takes precedence)
+              u'delegatingmethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke'
+          frame*
+            module*
+              u'jdk.internal.reflect.NativeMethodAccessorImpl'
+            filename (module takes precedence)
+              u'nativemethodaccessorimpl.java'
+            function*
+              u'invoke0'
+          frame*
+            module*
+              u'io.sentry.example.Application'
+            filename (module takes precedence)
+              u'application.java'
+            function*
+              u'home'
+        type*
+          u'ArithmeticException'
+        value (ignored because stacktrace takes precedence)
+          u'/ by zero'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message.pysnap
new file mode 100644
index 0000000000..4031d4c1b2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-05-08T07:29:42.503455Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
+--------------------------------------------------------------------------
+system:
+  hash: '10dfd81e2df31e96fae451b9e205ad81'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'Loading chunk <int> failed.\n(timeout: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message_whistles.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message_whistles.pysnap
new file mode 100644
index 0000000000..c8c3222e67
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_fallback_to_message_whistles.pysnap
@@ -0,0 +1,24 @@
+---
+created: '2019-09-16T13:22:24.055225Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because hash matches system variant)
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>) at offset <hex>'
+--------------------------------------------------------------------------
+system:
+  hash: 'b8e2a347e75266ca7bb565e2b3c0722e'
+  component:
+    system*
+      exception*
+        type*
+          u'Error'
+        value* (stripped common values)
+          u'<date>: <email> logged in (error <int>) time spent <float> --- correlation id <uuid>, checksum <sha1> (md5 <md5>); payload timestamp <date> (submitted from <ip> via <ip> via <ip>) at offset <hex>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_no_in_app.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_no_in_app.pysnap
new file mode 100644
index 0000000000..91f769b157
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_exception_no_in_app.pysnap
@@ -0,0 +1,146 @@
+---
+created: '2019-05-08T07:33:31.998496Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'invokeGuardedCallbackDev'
+          frame (non app frame)
+            filename*
+              u'index.js'
+            function* (trimmed javascript function)
+              u'sentryWrapped'
+          frame (non app frame)
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'callCallback'
+        type*
+          u'ReferenceError'
+        value*
+          u'varant is not defined'
+--------------------------------------------------------------------------
+system:
+  hash: 'c0f3f7d6deb17aec9d07259ac684fad0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'dispatchInteractiveEvent'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'interactiveUpdates$1'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performSyncWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'performWorkOnRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'renderRoot'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'replayUnitOfWork'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function*
+              u'invokeGuardedCallback'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'invokeGuardedCallbackDev'
+          frame*
+            filename*
+              u'index.js'
+            function* (trimmed javascript function)
+              u'sentryWrapped'
+          frame*
+            filename*
+              u'react-dom.development.js'
+            function* (trimmed javascript function)
+              u'callCallback'
+        type*
+          u'ReferenceError'
+        value (ignored because stacktrace takes precedence)
+          u'varant is not defined'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_message.pysnap
new file mode 100644
index 0000000000..1121c14c84
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.537223Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '4119639092e62c55ea8be348e4d9260d'
+  component:
+    default*
+      message*
+        u'event'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_chrome.pysnap
new file mode 100644
index 0000000000..a36fe82c7b
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_chrome.pysnap
@@ -0,0 +1,118 @@
+---
+created: '2019-11-01T10:06:07.530279Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'c63e8727af1a8fe75872b6a762797113'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame*
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_edge.pysnap
new file mode 100644
index 0000000000..8c4feee01e
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_edge.pysnap
@@ -0,0 +1,126 @@
+---
+created: '2019-05-10T12:45:55.643244Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'c63e8727af1a8fe75872b6a762797113'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame*
+            filename*
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame*
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_firefox.pysnap
new file mode 100644
index 0000000000..80ac491fc3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_firefox.pysnap
@@ -0,0 +1,112 @@
+---
+created: '2019-11-01T10:06:07.560274Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'test/<'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'c63e8727af1a8fe75872b6a762797113'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            filename*
+              u'test.html'
+            function (ignored unknown function name)
+              u'test/<'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_chrome.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_chrome.pysnap
new file mode 100644
index 0000000000..4114541063
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_chrome.pysnap
@@ -0,0 +1,154 @@
+---
+created: '2019-11-01T10:06:07.576506Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'b2602ad455472dede8e4c340d8a7eaba'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (anonymous filename discarded)
+              u'<anonymous>'
+            function* (trimmed javascript function)
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_edge.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_edge.pysnap
new file mode 100644
index 0000000000..c628a2b1ac
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_edge.pysnap
@@ -0,0 +1,162 @@
+---
+created: '2019-05-10T12:45:55.687880Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'b2602ad455472dede8e4c340d8a7eaba'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function* (trimmed javascript function)
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename*
+              u'eval code'
+            function*
+              u'eval code'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (module takes precedence)
+              u'native code'
+            function* (trimmed javascript function)
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'Anonymous function'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_firefox.pysnap
new file mode 100644
index 0000000000..2362215bde
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_firefox.pysnap
@@ -0,0 +1,148 @@
+---
+created: '2019-11-01T10:06:07.606626Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'test/<'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'b2602ad455472dede8e4c340d8a7eaba'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function (ignored unknown function name)
+              u'test/<'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_safari.pysnap
new file mode 100644
index 0000000000..268e7772c2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_http_safari.pysnap
@@ -0,0 +1,160 @@
+---
+created: '2019-11-01T10:06:07.621619Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'b2602ad455472dede8e4c340d8a7eaba'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            module*
+              u'test'
+            filename (ignored because frame points to a URL)
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_safari.pysnap
new file mode 100644
index 0000000000..f8118ba2b3
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_safari.pysnap
@@ -0,0 +1,128 @@
+---
+created: '2019-11-01T10:06:07.636851Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame (non app frame)
+            filename*
+              u'test.html'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (non app frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame (non app frame)
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value*
+          u'bad'
+--------------------------------------------------------------------------
+system:
+  hash: 'c63e8727af1a8fe75872b6a762797113'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'testMethod'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'eval'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'test'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'map'
+          frame*
+            filename*
+              u'test.html'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callback'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'callAnotherThing'
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'aha'
+          frame*
+            filename*
+              u'test.html'
+            function*
+              u'aha'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bad'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_firefox.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_firefox.pysnap
new file mode 100644
index 0000000000..8fcf872fda
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_firefox.pysnap
@@ -0,0 +1,350 @@
+---
+created: '2019-10-31T12:42:12.354951Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4a3cf3893b6485428dd02da116c8370e'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function (ignored because sourcemap used and context line available)
+              u'M'
+            context-line*
+              u'fn();'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u"while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'run'
+            context-line*
+              u'result = handler(value); // may throw'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'return this._invoke(method, arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'this.setState({'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+              u'{snip} !==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=functi {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+              u'{snip} );e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+            context-line (discarded because line too long)
+              u'{snip} );else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t("185"))}} {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+              u'{snip} ),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=n {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+              u'{snip} t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh( {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+            context-line (discarded because line too long)
+              u'{snip} nate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.c {snip}'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'X'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: 'd5456487ea8dccfe96c1968b19870978'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/_microtask'
+            filename (module takes precedence)
+              u'_microtask.js'
+            function (ignored because sourcemap used and context line available)
+              u'M'
+            context-line*
+              u'fn();'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u"while (chain.length > i) run(chain[i++]); // variable length - can't use forEach"
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/core-js/modules/es6.promise'
+            filename (module takes precedence)
+              u'es6.promise.js'
+            function (ignored because sourcemap used and context line available)
+              u'run'
+            context-line*
+              u'result = handler(value); // may throw'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'return this._invoke(method, arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'this.setState({'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+              u'{snip} !==typeof a&&"function"!==typeof a&&null!=a?B("85"):void 0;this.updater.enqueueSetState(this,a,b,"setState")};E.prototype.forceUpdate=functi {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'this'
+            context-line (discarded because line too long)
+              u'{snip} );e.payload=b;void 0!==c&&null!==c&&(e.callback=c);ff(a,e);If(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gf();d {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'If'
+            context-line (discarded because line too long)
+              u'{snip} );else if(c=b.expirationTime,0===c||a<c)b.expirationTime=a;V||(W?Wg&&(Y=b,Z=1,Xg(b,1,!0)):1===a?Yg(1,null):Zg(b,a))}$g>ah&&($g=0,t("185"))}} {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+              u'{snip} ),qh(),oh(),lh=kh;else for(;null!==Y&&0!==Z&&(0===a||a>=Z);)Xg(Y,Z,!0),qh();null!==hh&&(ch=0,dh=null);0!==Z&&Zg(Y,Z);hh=null;eh=!1;$g=0;mh=n {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+              u'{snip} t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finishedWork,null!==d&&rh( {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'rh'
+            context-line (discarded because line too long)
+              u'{snip} nate;q=Q;p=y;switch(q.tag){case 2:case 3:var X=q.stateNode;if(q.effectTag&4)if(null===oc)X.props=q.memoizedProps,X.state=q.memoizedState,X.c {snip}'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'X'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_safari.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_safari.pysnap
new file mode 100644
index 0000000000..fae0ccf8fa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/javascript_xbrowser_sentryui_safari.pysnap
@@ -0,0 +1,288 @@
+---
+created: '2019-10-31T12:42:12.381966Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4a3cf3893b6485428dd02da116c8370e'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'call'
+            context-line*
+              u'this.setState({'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+            context-line (discarded because line too long)
+              u'{snip} ructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0, {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+            context-line (discarded because line too long)
+              u'{snip} &(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!=='
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+            context-line (discarded because line too long)
+              u'var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+              u'function Xg(a,b,c){V?t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+              u'function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}'
+          frame (non app frame)
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+            context-line (discarded because line too long)
+              u'{snip} .__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;c {snip}'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'q'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchData'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
+--------------------------------------------------------------------------
+system:
+  hash: '0b81da6ea3d7cc82b1d4825b7aac0b8d'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored low quality javascript frame)
+            filename (native code indicated by filename)
+              u'[native code]'
+            function*
+              u'promiseReactionJob'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'_next'
+            context-line*
+              u'asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/@babel/runtime/helpers/asyncToGenerator'
+            filename (module takes precedence)
+              u'asynctogenerator.js'
+            function (ignored because sourcemap used and context line available)
+              u'asyncGeneratorStep'
+            context-line*
+              u'var info = gen[key](arg);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'key'
+            context-line*
+              u'var record = tryCatch(innerFn, self, context);'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/regenerator-runtime/runtime'
+            filename (module takes precedence)
+              u'runtime.js'
+            function (ignored because sourcemap used and context line available)
+              u'tryCatch'
+            context-line*
+              u'return { type: "normal", arg: fn.call(obj, arg) };'
+          frame*
+            module*
+              u'app/components/lazyLoad'
+            filename (module takes precedence)
+              u'lazyload.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'call'
+            context-line*
+              u'this.setState({'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react/cjs/react.production'
+            filename (module takes precedence)
+              u'react.production.min.js'
+            function*
+              u'setState'
+            context-line (discarded because line too long)
+              u'{snip} ructor=G;m(H,E.prototype);H.isPureReactComponent=!0;var I={current:null,currentDispatcher:null},J=Object.prototype.hasOwnProperty,K={key:!0, {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'enqueueSetState'
+            context-line (discarded because line too long)
+              u'{snip} &(e.callback=c);ff(a,e);If(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gf();c=Hf(c,a);var d=df(c);d.tag=2;void 0!=='
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'tag'
+            context-line (discarded because line too long)
+              u'var U=null,T=null,ch=0,dh=void 0,V=!1,Y=null,Z=0,Vg=0,eh=!1,fh=!1,gh=null,hh=null,W=!1,Wg=!1,Ug=!1,ih=null,jh=ba.unstable_now(),kh=(jh/10|0) {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Yg'
+            context-line (discarded because line too long)
+              u'function Xg(a,b,c){V?t("245"):void 0;V=!0;if(null===hh||c){var d=a.finishedWork;null!==d?rh(a,d,b):(a.finishedWork=null,Sg(a,!1,c),d=a.finis {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'Xg'
+            context-line (discarded because line too long)
+              u'function rh(a,b,c){var d=a.firstBatch;if(null!==d&&d._expirationTime<=c&&(null===ih?ih=[d]:ih.push(d),d._defer)){a.finishedWork=b;a.expirati {snip}'
+          frame*
+            module*
+              u'usr/src/getsentry/src/sentry/node_modules/react-dom/cjs/react-dom.production'
+            filename (module takes precedence)
+              u'react-dom.production.min.js'
+            function*
+              u'ih'
+            context-line (discarded because line too long)
+              u'{snip} .__reactInternalSnapshotBeforeUpdate)}var kg=q.updateQueue;null!==kg&&(X.props=q.memoizedProps,X.state=q.memoizedState,lf(q,kg,X,p));break;c {snip}'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'q'
+            context-line*
+              u'this.fetchData();'
+          frame*
+            module*
+              u'app/views/groupDetails/shared/groupEventDetails'
+            filename (module takes precedence)
+              u'groupeventdetails.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchData'
+            context-line*
+              u'fetchGroupEventAndMarkSeen(api, orgSlug, projSlug, groupId, eventId, envNames)'
+          frame*
+            module*
+              u'app/api'
+            filename (module takes precedence)
+              u'api.jsx'
+            function (ignored because sourcemap used and context line available)
+              u'fetchGroupEventAndMarkSeen'
+            context-line*
+              u'const preservedError = new Error();'
+        type*
+          u'NotFoundError'
+        value (ignored because stacktrace takes precedence)
+          u'GET /issues/<int>/events/latest/ <int>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/laravel.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/laravel.pysnap
new file mode 100644
index 0000000000..29386623d2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/laravel.pysnap
@@ -0,0 +1,722 @@
+---
+created: '2019-05-08T07:33:32.041454Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '4665d486184740231357ab63f4543a8d'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+            context-line*
+              u"require_once __DIR__.'/public/index.php';"
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+            context-line*
+              u'$request = Illuminate\\Http\\Request::capture()'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+            context-line*
+              u'$response = $this->sendRequestThroughRouter($request);'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+            context-line*
+              u'->then($this->dispatchToRouter());'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame (non app frame)
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+            context-line*
+              u'return $this->router->dispatch($request);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+            context-line*
+              u'return $this->dispatchToRoute($request);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+            context-line*
+              u'return $this->runRoute($request, $this->findRoute($request));'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+            context-line*
+              u'$this->runRouteWithinStack($route, $request)'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+            context-line*
+              u'});'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+            context-line*
+              u'return $this->encrypt($next($this->decrypt($request)));'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+            context-line*
+              u'$response = $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+            context-line*
+              u'$response = $next($request), $session'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+            context-line*
+              u'return tap($next($request), function ($response) use ($request) {'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame (non app frame)
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+            context-line*
+              u'return $next($request);'
+          frame (non app frame)
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame (non app frame)
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'$request, $route->run()'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+            context-line*
+              u'return $this->runCallable();'
+          frame (non app frame)
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+            context-line*
+              u"$this->parametersWithoutNulls(), new ReflectionFunction($this->action['uses'])"
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+            context-line*
+              u"throw new Exception('LARAVEL TEST');"
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
+--------------------------------------------------------------------------
+system:
+  hash: '107ed03036d901157372f260bc3df446'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'server.php'
+            context-line*
+              u"require_once __DIR__.'/public/index.php';"
+          frame*
+            filename*
+              u'index.php'
+            function*
+              u'require_once'
+            context-line*
+              u'$request = Illuminate\\Http\\Request::capture()'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::handle'
+            context-line*
+              u'$response = $this->sendRequestThroughRouter($request);'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::sendRequestThroughRouter'
+            context-line*
+              u'->then($this->dispatchToRouter());'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'checkformaintenancemode.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\CheckForMaintenanceMode::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'validatepostsize.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\ValidatePostSize::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'transformsrequest.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\TransformsRequest::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'trustproxies.php'
+            function*
+              u'Fideloper\\Proxy\\TrustProxies::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame*
+            filename*
+              u'kernel.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Kernel::Illuminate\\Foundation\\Http\\{closure}'
+            context-line*
+              u'return $this->router->dispatch($request);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatch'
+            context-line*
+              u'return $this->dispatchToRoute($request);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::dispatchToRoute'
+            context-line*
+              u'return $this->runRoute($request, $this->findRoute($request));'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRoute'
+            context-line*
+              u'$this->runRouteWithinStack($route, $request)'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::runRouteWithinStack'
+            context-line*
+              u'});'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::then'
+            context-line*
+              u'return $pipeline($this->passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'encryptcookies.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\EncryptCookies::handle'
+            context-line*
+              u'return $this->encrypt($next($this->decrypt($request)));'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'addqueuedcookiestoresponse.php'
+            function*
+              u'Illuminate\\Cookie\\Middleware\\AddQueuedCookiesToResponse::handle'
+            context-line*
+              u'$response = $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'startsession.php'
+            function*
+              u'Illuminate\\Session\\Middleware\\StartSession::handle'
+            context-line*
+              u'$response = $next($request), $session'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'shareerrorsfromsession.php'
+            function*
+              u'Illuminate\\View\\Middleware\\ShareErrorsFromSession::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'verifycsrftoken.php'
+            function*
+              u'Illuminate\\Foundation\\Http\\Middleware\\VerifyCsrfToken::handle'
+            context-line*
+              u'return tap($next($request), function ($response) use ($request) {'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $callable($passable);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Pipeline\\Pipeline::Illuminate\\Pipeline\\{closure}'
+            context-line*
+              u'? $pipe->{$this->method}(...$parameters)'
+          frame*
+            filename*
+              u'substitutebindings.php'
+            function*
+              u'Illuminate\\Routing\\Middleware\\SubstituteBindings::handle'
+            context-line*
+              u'return $next($request);'
+          frame*
+            filename*
+              u'pipeline.php'
+            function*
+              u'Illuminate\\Routing\\Pipeline::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'return $destination($passable);'
+          frame*
+            filename*
+              u'router.php'
+            function*
+              u'Illuminate\\Routing\\Router::Illuminate\\Routing\\{closure}'
+            context-line*
+              u'$request, $route->run()'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::run'
+            context-line*
+              u'return $this->runCallable();'
+          frame*
+            filename*
+              u'route.php'
+            function*
+              u'Illuminate\\Routing\\Route::runCallable'
+            context-line*
+              u"$this->parametersWithoutNulls(), new ReflectionFunction($this->action['uses'])"
+          frame*
+            filename*
+              u'web.php'
+            function*
+              u'Illuminate\\Routing\\RouteFileRegistrar::{closure}'
+            context-line*
+              u"throw new Exception('LARAVEL TEST');"
+        type*
+          u'Exception'
+        value (ignored because stacktrace takes precedence)
+          u'LARAVEL TEST'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_prefers_message.pysnap
new file mode 100644
index 0000000000..5e036c1661
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.577620Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_uses_formatted.pysnap
new file mode 100644
index 0000000000..b823795fce
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/logentry_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.584879Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '329b29efcf1f77067a063e34f56e7791'
+  component:
+    default*
+      message*
+        u'Hello there world!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_prefers_message.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_prefers_message.pysnap
new file mode 100644
index 0000000000..b7265213e2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_prefers_message.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.592184Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '8ec8bbc71eb6e2af7fbe5076a8534f96'
+  component:
+    default*
+      message*
+        u'Hello there %s!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_uses_formatted.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_uses_formatted.pysnap
new file mode 100644
index 0000000000..3b86ef421f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/message_uses_formatted.pysnap
@@ -0,0 +1,11 @@
+---
+created: '2019-05-08T07:29:42.599996Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: 'd3f5e52d24e9c1eae5abe6c866cced63'
+  component:
+    default*
+      message*
+        u'Hello there Peter!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/minified_javascript.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/minified_javascript.pysnap
new file mode 100644
index 0000000000..3136b43cdc
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/minified_javascript.pysnap
@@ -0,0 +1,418 @@
+---
+created: '2019-10-31T12:42:12.504325Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+            context-line (discarded because line too long)
+              u'{snip} o,r;for(b&&(o=i.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(b)n=function(){i.n {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'S/<'
+            context-line (discarded because line too long)
+              u'{snip} ,M):b(n)):M(o)}catch(t){a&&!i&&a.exit(),M(t)}};n.length>p;)i(n[p++]);t._c=[],t._n=!1,e&&!t._h&&x(t)})}},x=function(t){d.call(b,function(){va {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+            context-line (discarded because line too long)
+              u'{snip} ry{c?(r||(2==t._h&&T(t),t._h=1),!0===c?n=o:(a&&a.enter(),n=c(o),a&&(a.exit(),i=!0)),n===e.promise?M(y("Promise-chain cycle")):(p=N(n))?p.cal {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+            context-line (discarded because line too long)
+              u'{snip} ply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.lo {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/<'
+            context-line (discarded because line too long)
+              u'{snip} (e.t0)&&n<I)){e.next=12;break}return n++,e.abrupt("return",a());case 12:throw e.t0;case 13:case"end":return e.stop()}},e,this,[[0,7]])}));re {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/</a</<'
+            context-line (discarded because line too long)
+              u'{snip} urn e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}(),e.abrupt("return",a());case 3:case"end":return e.stop {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'exports/<'
+            context-line (discarded because line too long)
+              u'{snip} unction(t){return function(){var e=this,o=arguments;return new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)} {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+            context-line (discarded because line too long)
+              u'{snip} function(t){O(this,L,"Promise","_h"),s(t),o.call(this);try{t(M(H,this,1),M(C,this,1))}catch(t){C.call(this,t)}},(o=function(t){this._c=[],th {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'exports/</<'
+            context-line (discarded because line too long)
+              u'{snip} n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.load(n(1467))},,function( {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+            context-line (discarded because line too long)
+              u'{snip} new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,funct {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/<'
+            context-line (discarded because line too long)
+              u'{snip} r(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t();case 3:return r=e.sent,e.abrupt("return",r.default||r);case 7:if(e.prev=7,e.t {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+            context-line (discarded because line too long)
+              u'{snip} orgId/issues/:groupId/",componentPromise:function(){return n.e(75).then(n.bind(null,2497))},component:Object(cs.default)(Zt.a)},b.a.createEl {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function* (trimmed javascript function)
+              u'e'
+            context-line (discarded because line too long)
+              u'{snip} "+i+")");o.type=a,o.request=i,n[1](o)}r[e]=void 0}};var c=setTimeout(function(){i({type:"timeout",target:s})},12e4);s.onerror=s.onload=i,do {snip}'
+          frame (non app frame)
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'wrapTimeFunction/<'
+            context-line (discarded because line too long)
+              u'{snip} ism:{data:{function:Dt(t)},handled:!0,type:"instrument"}}),t.apply(this,e)}},t.prototype.wrapRAF=function(t){return function(e){return t(Et( {snip}'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
+--------------------------------------------------------------------------
+system:
+  hash: 'dcfcd48a02c100bbe4023cbc783054f0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'M'
+            context-line (discarded because line too long)
+              u'{snip} o,r;for(b&&(o=i.domain)&&o.exit();t;){r=t.fn,t=t.next;try{r()}catch(o){throw t?n():e=void 0,o}}e=void 0,o&&o.enter()};if(b)n=function(){i.n {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'S/<'
+            context-line (discarded because line too long)
+              u'{snip} ,M):b(n)):M(o)}catch(t){a&&!i&&a.exit(),M(t)}};n.length>p;)i(n[p++]);t._c=[],t._n=!1,e&&!t._h&&x(t)})}},x=function(t){d.call(b,function(){va {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'i'
+            context-line (discarded because line too long)
+              u'{snip} ry{c?(r||(2==t._h&&T(t),t._h=1),!0===c?n=o:(a&&a.enter(),n=c(o),a&&(a.exit(),i=!0)),n===e.promise?M(y("Promise-chain cycle")):(p=N(n))?p.cal {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'b'
+            context-line (discarded because line too long)
+              u'{snip} ply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.lo {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/<'
+            context-line (discarded because line too long)
+              u'{snip} (e.t0)&&n<I)){e.next=12;break}return n++,e.abrupt("return",a());case 12:throw e.t0;case 13:case"end":return e.stop()}},e,this,[[0,7]])}));re {snip}'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/</a</<'
+            context-line (discarded because line too long)
+              u'{snip} urn e.stop()}},e,this,[[0,7]])}));return function(){return e.apply(this,arguments)}}(),e.abrupt("return",a());case 3:case"end":return e.stop {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'exports/<'
+            context-line (discarded because line too long)
+              u'{snip} unction(t){return function(){var e=this,o=arguments;return new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)} {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'L'
+            context-line (discarded because line too long)
+              u'{snip} function(t){O(this,L,"Promise","_h"),s(t),o.call(this);try{t(M(H,this,1),M(C,this,1))}catch(t){C.call(this,t)}},(o=function(t){this._c=[],th {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'exports/</<'
+            context-line (discarded because line too long)
+              u'{snip} n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,function(t,e,n){(t.exports=n(1466)).tz.load(n(1467))},,function( {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'c'
+            context-line (discarded because line too long)
+              u'{snip} new Promise(function(r,p){var i=t.apply(e,o);function c(t){n(i,r,p,c,b,"next",t)}function b(t){n(i,r,p,c,b,"throw",t)}c(void 0)})}}},,,funct {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'n'
+            context-line (discarded because line too long)
+              u'{snip} e)}},function(t,e){function n(t,e,n,o,r,p,i){try{var c=t[p](i),b=c.value}catch(t){return void n(t)}c.done?e(b):Promise.resolve(b).then(o,r)} {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'g/</t[e]'
+            context-line (discarded because line too long)
+              u'{snip} row","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function R(t){var e;this._invoke=function(n,o){function p(){ {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'_invoke</<'
+            context-line (discarded because line too long)
+              u'{snip} lse"return"===n.method&&n.abrupt("return",n.arg);o=s;var b=W(t,e,n);if("normal"===b.type){if(o=n.done?O:z,b.arg===l)continue;return{value:b. {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function*
+              u'W'
+            context-line (discarded because line too long)
+              u'{snip} }}(t,n,i),p}function W(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}function v(){}function y(){}fun {snip}'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function (ignored unknown function name)
+              u'e/<'
+            context-line (discarded because line too long)
+              u'{snip} r(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,t();case 3:return r=e.sent,e.abrupt("return",r.default||r);case 7:if(e.prev=7,e.t {snip}'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function*
+              u'componentPromise'
+            context-line (discarded because line too long)
+              u'{snip} orgId/issues/:groupId/",componentPromise:function(){return n.e(75).then(n.bind(null,2497))},component:Object(cs.default)(Zt.a)},b.a.createEl {snip}'
+          frame*
+            module*
+              u'sentry/dist/app'
+            filename (ignored because frame points to a URL)
+              u'app.js'
+            function* (trimmed javascript function)
+              u'e'
+            context-line (discarded because line too long)
+              u'{snip} "+i+")");o.type=a,o.request=i,n[1](o)}r[e]=void 0}};var c=setTimeout(function(){i({type:"timeout",target:s})},12e4);s.onerror=s.onload=i,do {snip}'
+          frame*
+            module*
+              u'sentry/dist/vendor'
+            filename (ignored because frame points to a URL)
+              u'vendor.js'
+            function (ignored unknown function name)
+              u'wrapTimeFunction/<'
+            context-line (discarded because line too long)
+              u'{snip} ism:{data:{function:Dt(t)},handled:!0,type:"instrument"}}),t.apply(this,e)}},t.prototype.wrapRAF=function(t){return function(e){return t(Et( {snip}'
+        type*
+          u'NS_ERROR_NOT_INITIALIZED'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_complex_function_names.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_complex_function_names.pysnap
new file mode 100644
index 0000000000..2bc5c3e8be
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_complex_function_names.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-11T09:56:08.384459Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_limit_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_limit_frames.pysnap
new file mode 100644
index 0000000000..c8d962d413
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_limit_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-06-05T11:45:18.542023Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9bb5de55b854491dacc677184c9b019a'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native max-frames=1))
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (ignored because only 1 frame is considered by grouping enhancement rule (family:native max-frames=1))
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_no_filenames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_no_filenames.pysnap
new file mode 100644
index 0000000000..f92dbf5f1f
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_no_filenames.pysnap
@@ -0,0 +1,110 @@
+---
+created: '2019-09-26T13:26:28.893497Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '418120a66f7031923031f5c52aca0724'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame (non app frame)
+            function*
+              u'sentry::integrations::log::Logger::log'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with'
+          frame (non app frame)
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<unknown>'
+          frame (non app frame)
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '00719910980352c06ba93641057012e0'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame*
+            function*
+              u'std::rt::lang_start'
+          frame*
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame*
+            function*
+              u'std::panicking::try::do_call'
+          frame*
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame*
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+          frame*
+            function*
+              u'sentry::integrations::log::Logger::log'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active'
+          frame*
+            function*
+              u'sentry::hub::Hub::with'
+          frame*
+            function*
+              u'sentry::hub::Hub::with_active::{{closure}}'
+          frame
+            function (ignored unknown function)
+              u'<unknown>'
+          frame
+            function (ignored unknown function)
+              u'<redacted>'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_unlimited_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_unlimited_frames.pysnap
new file mode 100644
index 0000000000..5d65312e16
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_unlimited_frames.pysnap
@@ -0,0 +1,44 @@
+---
+created: '2019-05-16T18:21:49.807173Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame (non app frame)
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame (non app frame)
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '61d21e6d53c0837718af047c20e5e7ea'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'Scaleform::GFx::IME::GImeNamesManagerVista::OnActivated'
+          frame*
+            function*
+              u'Scaleform::GFx::AS3::IMEManager::DispatchEvent'
+          frame*
+            function*
+              u'<lambda>::operator()'
+        type (ignored because exception is synthetic)
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_windows_anon_namespace.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_windows_anon_namespace.pysnap
new file mode 100644
index 0000000000..af23381c96
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_windows_anon_namespace.pysnap
@@ -0,0 +1,76 @@
+---
+created: '2019-09-10T09:49:14.992868Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame (non app frame)
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value*
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
+--------------------------------------------------------------------------
+system:
+  hash: '15d397771f229af8dc42783542f81dd4'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'__scrt_common_main_seh'
+          frame*
+            filename*
+              u'exe_common.inl'
+            function*
+              u'invoke_main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::start"
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u"`anonymous namespace'::crash"
+        type (ignored because exception is synthetic)
+          u'EXCEPTION_ACCESS_VIOLATION_WRITE'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXCEPTION_ACCESS_VIOLATION_WRITE'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_with_function_name.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_with_function_name.pysnap
new file mode 100644
index 0000000000..2291d48c5d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/native_with_function_name.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-05-08T07:29:42.664783Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame (non app frame)
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value*
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
+--------------------------------------------------------------------------
+system:
+  hash: 'c29439027eafcf7642f641554ab0f0ef'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'main'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::start'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::crash'
+          frame*
+            filename*
+              u'main.cpp'
+            function*
+              u'(anonymous namespace)::something::nested::Foo<T>::crash'
+        type (ignored because exception is synthetic)
+          u'EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+        value (ignored because stacktrace takes precedence)
+          u'Fatal Error: EXC_BAD_ACCESS / KERN_INVALID_ADDRESS'
+      threads (thread has no stacktrace)
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/node_exception_weird.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/node_exception_weird.pysnap
new file mode 100644
index 0000000000..fec0d63678
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/node_exception_weird.pysnap
@@ -0,0 +1,198 @@
+---
+created: '2019-05-10T12:45:55.934160Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'a20509269752c9a1bea6078851e4d39c'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'withScope'
+            context-line*
+              u'*/'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function (ignored unknown function name)
+              u'<anonymous>'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'mockConstructor [as captureException]'
+            context-line*
+              u'return fn.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function (ignored unknown function name)
+              u'<anonymous>'
+            context-line*
+              u'})();'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+            context-line*
+              u'return specificMockImpl.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function (ignored unknown function name)
+              u'<anonymous>'
+            context-line*
+              u'return original.apply(this, arguments);'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'if (maxBreadcrumbs <= 0) {'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'invokeClient'
+            context-line*
+              u'* @returns Scope, the new cloned scope'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'promisedEvent'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function* (trimmed javascript function)
+              u'eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
+--------------------------------------------------------------------------
+system:
+  hash: '252dc79eb5653bf822e2684d90734cb8'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'withScope'
+            context-line*
+              u'*/'
+          frame*
+            module*
+              u'onunhandledrejection.ts'
+            filename (module takes precedence)
+              u'onunhandledrejection.ts'
+            function (ignored unknown function name)
+              u'<anonymous>'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function* (trimmed javascript function)
+              u'mockConstructor [as captureException]'
+            context-line*
+              u'return fn.apply(this, arguments);'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function (ignored unknown function name)
+              u'<anonymous>'
+            context-line*
+              u'})();'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function*
+              u'finalReturnValue'
+            context-line*
+              u'return specificMockImpl.apply(this, arguments);'
+          frame*
+            module*
+              u'jest-mock.build:index'
+            filename (module takes precedence)
+              u'index.js'
+            function (ignored unknown function name)
+              u'<anonymous>'
+            context-line*
+              u'return original.apply(this, arguments);'
+          frame*
+            module*
+              u'hub.ts'
+            filename (module takes precedence)
+              u'hub.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'if (maxBreadcrumbs <= 0) {'
+          frame*
+            module*
+              u'hub'
+            filename (module takes precedence)
+              u'hub.js'
+            function* (trimmed javascript function)
+              u'invokeClient'
+            context-line*
+              u'* @returns Scope, the new cloned scope'
+          frame*
+            module*
+              u'baseclient.ts'
+            filename (module takes precedence)
+              u'baseclient.ts'
+            function* (trimmed javascript function)
+              u'captureException'
+            context-line*
+              u'promisedEvent'
+          frame*
+            module*
+              u'backend.ts'
+            filename (module takes precedence)
+              u'backend.ts'
+            function* (trimmed javascript function)
+              u'eventFromException'
+        type*
+          u'Error'
+        value (ignored because stacktrace takes precedence)
+          u'bla'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_exception_base.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_exception_base.pysnap
new file mode 100644
index 0000000000..400e5eea95
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_exception_base.pysnap
@@ -0,0 +1,52 @@
+---
+created: '2019-05-08T07:29:42.684400Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'b4c29e2a2a2681fbaf9fd8f5b09e4154'
+  component:
+    app*
+      chained-exception*
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+        exception*
+          stacktrace
+            frame (non app frame)
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value*
+            u'hello world'
+--------------------------------------------------------------------------
+system:
+  hash: '669cb6664e0f5fed38665da04e464f7e'
+  component:
+    system*
+      chained-exception*
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
+        exception*
+          stacktrace*
+            frame*
+              filename*
+                u'baz.py'
+          type*
+            u'ValueError'
+          value (ignored because stacktrace takes precedence)
+            u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_away_from_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_away_from_crash.pysnap
new file mode 100644
index 0000000000..20b517cc30
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_away_from_crash.pysnap
@@ -0,0 +1,206 @@
+---
+created: '2019-06-05T11:45:18.661659Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '121caa876de75ec51bf72ed4c852cd75'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: 'a5af2577d4caca8f983657c5d1919e14'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (path:**/release_webhook.py v-group))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame*
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame*
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame*
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_towards_crash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_towards_crash.pysnap
new file mode 100644
index 0000000000..ac7cd66036
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_grouping_enhancer_towards_crash.pysnap
@@ -0,0 +1,206 @@
+---
+created: '2019-06-05T11:45:18.682125Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (non app frame)
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (non app frame)
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value*
+          u'"\'user\'"'
+--------------------------------------------------------------------------
+system:
+  hash: '90888e813b09fa25061af2883c0fb9bd'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'django.core.handlers.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'get_response'
+            context-line*
+              u'response = wrapped_callback(request, *callback_args, **callback_kwargs)'
+          frame*
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'view'
+            context-line*
+              u'return self.dispatch(request, *args, **kwargs)'
+          frame*
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'_wrapper'
+            context-line*
+              u'return bound_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'django.views.decorators.csrf'
+            filename (module takes precedence)
+              u'csrf.py'
+            function*
+              u'wrapped_view'
+            context-line*
+              u'return view_func(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'django.utils.decorators'
+            filename (module takes precedence)
+              u'decorators.py'
+            function*
+              u'bound_func'
+            context-line*
+              u'return func(self, *args2, **kwargs2)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return super(ReleaseWebhookView, self).dispatch(*args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'django.views.generic.base'
+            filename (module takes precedence)
+              u'base.py'
+            function*
+              u'dispatch'
+            context-line*
+              u'return handler(request, *args, **kwargs)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry.web.frontend.release_webhook'
+            filename (module takes precedence)
+              u'release_webhook.py'
+            function*
+              u'post'
+            context-line*
+              u'hook.handle(request)'
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'sentry_plugins.heroku.plugin'
+            filename (module takes precedence)
+              u'plugin.py'
+            function*
+              u'handle'
+            context-line*
+              u"email = request.POST['user']"
+          frame (ignored by grouping enhancement rule (function:wrapped_view ^-group -group))
+            module*
+              u'django.utils.datastructures'
+            filename (module takes precedence)
+              u'datastructures.py'
+            function*
+              u'__getitem__'
+            context-line*
+              u'raise MultiValueDictKeyError(repr(key))'
+        type*
+          u'MultiValueDictKeyError'
+        value (ignored because stacktrace takes precedence)
+          u'"\'user\'"'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_http_error.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_http_error.pysnap
new file mode 100644
index 0000000000..0c7a9dfd8d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/python_http_error.pysnap
@@ -0,0 +1,87 @@
+---
+created: '2019-05-08T07:33:32.167071Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'd59239f5aad3304d60beb1fde3369b78'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+            context-line*
+              u'resp.raise_for_status()'
+          frame (non app frame)
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+            context-line*
+              u'raise HTTPError(http_error_msg, response=self)'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
+--------------------------------------------------------------------------
+default:
+  hash: None
+  component:
+    default (exception of app takes precedence)
+      message (exception of app takes precedence)
+        u'%s.process_error'
+--------------------------------------------------------------------------
+system:
+  hash: '133db3f366b1327dab4e661f66dfb961'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'sentry.utils.safe'
+            filename (module takes precedence)
+              u'safe.py'
+            function*
+              u'safe_execute'
+            context-line*
+              u'result = func(*args, **kwargs)'
+          frame*
+            module*
+              u'sentry.integrations.slack.notify_action'
+            filename (module takes precedence)
+              u'notify_action.py'
+            function*
+              u'send_notification'
+            context-line*
+              u'resp.raise_for_status()'
+          frame*
+            module*
+              u'requests.models'
+            filename (module takes precedence)
+              u'models.py'
+            function*
+              u'raise_for_status'
+            context-line*
+              u'raise HTTPError(http_error_msg, response=self)'
+        type*
+          u'HTTPError'
+        value (ignored because stacktrace takes precedence)
+          u'<int> Client Error: Too Many Requests for url: <url>'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/react_native.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/react_native.pysnap
new file mode 100644
index 0000000000..c9ed099570
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/react_native.pysnap
@@ -0,0 +1,410 @@
+---
+created: '2019-05-08T22:36:44.224971Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '73470e545e51eea9cff8a6c006f68f57'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'value'
+            context-line*
+              u'return this.flushedQueue();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._inCall--;'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'_inCall'
+            context-line*
+              u'return this.flushedQueue();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._lastFlush = new Date().getTime();'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_lastFlush'
+            context-line*
+              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveRootNodeIDEvent'
+            context-line*
+              u'batchedUpdates(function() {'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'batchedUpdates'
+            context-line*
+              u'return _batchedUpdates(fn, bookkeeping);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_batchedUpdates'
+            context-line*
+              u'return fn(a);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'forEachAccumulated'
+            context-line*
+              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
+          frame (non app frame)
+            function*
+              u'[native code] forEach'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'D'
+            context-line*
+              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'executeDispatch'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'invokeGuardedCallbackAndCatchFirstError'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'arguments'
+            context-line*
+              u'touchableHandleResponderRelease: function(e) {'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveSignal'
+            context-line*
+              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_performSideEffectsForTransition'
+            context-line*
+              u'this.touchableHandlePress(e);'
+          frame (non app frame)
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'this.props.onPress && this.props.onPress(e);'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'onPress'
+            context-line*
+              u'<Button'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'Button'
+            context-line*
+              u'<Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
+--------------------------------------------------------------------------
+system:
+  hash: 'ecd413627f0d90a5a25cb28d1ba9c39f'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'value'
+            context-line*
+              u'return this.flushedQueue();'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._inCall--;'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'_inCall'
+            context-line*
+              u'return this.flushedQueue();'
+          frame*
+            module*
+              u'react-native/Libraries/BatchedBridge/MessageQueue'
+            filename (module takes precedence)
+              u'messagequeue.js'
+            function (ignored because sourcemap used and context line available)
+              u'flushedQueue'
+            context-line*
+              u'this._lastFlush = new Date().getTime();'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_lastFlush'
+            context-line*
+              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveRootNodeIDEvent'
+            context-line*
+              u'batchedUpdates(function() {'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'batchedUpdates'
+            context-line*
+              u'return _batchedUpdates(fn, bookkeeping);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'_batchedUpdates'
+            context-line*
+              u'return fn(a);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'fn'
+            context-line*
+              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'forEachAccumulated'
+            context-line*
+              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
+          frame*
+            function*
+              u'[native code] forEach'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'D'
+            context-line*
+              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'executeDispatch'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'invokeGuardedCallbackAndCatchFirstError'
+            context-line*
+              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
+          frame*
+            module*
+              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
+            filename (module takes precedence)
+              u'reactnativerenderer-prod.js'
+            function (ignored because sourcemap used and context line available)
+              u'apply'
+            context-line*
+              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'arguments'
+            context-line*
+              u'touchableHandleResponderRelease: function(e) {'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_receiveSignal'
+            context-line*
+              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/Touchable'
+            filename (module takes precedence)
+              u'touchable.js'
+            function (ignored because sourcemap used and context line available)
+              u'_performSideEffectsForTransition'
+            context-line*
+              u'this.touchableHandlePress(e);'
+          frame*
+            module*
+              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
+            filename (module takes precedence)
+              u'touchablenativefeedback.android.js'
+            function (ignored because sourcemap used and context line available)
+              u'this'
+            context-line*
+              u'this.props.onPress && this.props.onPress(e);'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'onPress'
+            context-line*
+              u'<Button'
+          frame*
+            module*
+              u'App'
+            filename (module takes precedence)
+              u'app.js'
+            function (ignored because sourcemap used and context line available)
+              u'Button'
+            context-line*
+              u'<Button'
+        type*
+          u'TypeError'
+        value (ignored because stacktrace takes precedence)
+          u"undefined is not a function (evaluating '({}).invalidFunction()')"
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_cocoa.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_cocoa.pysnap
new file mode 100644
index 0000000000..508240b676
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_cocoa.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.727072Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb416f98479efa56a77c524602dc9979'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame (non app frame)
+          filename*
+            u'baz.m'
+--------------------------------------------------------------------------
+system:
+  hash: '1df786c8c266506e1acb6669c8df5154'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'bar.m'
+        frame*
+          filename*
+            u'baz.m'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_collapse_recursion.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_collapse_recursion.pysnap
new file mode 100644
index 0000000000..cb5390e92c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_collapse_recursion.pysnap
@@ -0,0 +1,114 @@
+---
+created: '2019-05-08T07:29:42.737426Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (non app frame)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
+--------------------------------------------------------------------------
+system:
+  hash: '894c3489e2ade384dc107bca6829d134'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'main'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'normalFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame (ignored due to recursion)
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'recurFunc'
+        frame*
+          module*
+            u'io.sentry.example.Application'
+          filename (module takes precedence)
+            u'application.java'
+          function*
+            u'throwError'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_compute_hashes.pysnap
new file mode 100644
index 0000000000..60fe9ef13c
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.746009Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_discards_seemingly_useless_stack.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_discards_seemingly_useless_stack.pysnap
new file mode 100644
index 0000000000..9e92eaeb83
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_discards_seemingly_useless_stack.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-05-08T07:29:42.754535Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'foo'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_discard_non_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_discard_non_urls.pysnap
new file mode 100644
index 0000000000..18a4b823ef
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_discard_non_urls.pysnap
@@ -0,0 +1,22 @@
+---
+created: '2019-05-08T07:29:42.762763Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename*
+            u'foo'
+--------------------------------------------------------------------------
+system:
+  hash: 'acbd18db4cc2f85cedef654fccc4a4d8'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_group_different_js_errors.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_group_different_js_errors.pysnap
new file mode 100644
index 0000000000..340c08039d
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_does_not_group_different_js_errors.pysnap
@@ -0,0 +1,25 @@
+---
+created: '2019-05-08T07:29:42.770977Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      stacktrace
+        frame (non app frame)
+          filename (ignored because frame points to a URL)
+            u'index.js'
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      stacktrace
+        frame
+          filename (ignored because frame points to a URL)
+            u'index.js'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_enforce_min_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_enforce_min_frames.pysnap
new file mode 100644
index 0000000000..d46f5358b4
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_enforce_min_frames.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-07-09T13:22:11.421699Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (exception of system takes precedence)
+      exception (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace (discarded because stacktrace only contains 1 frame which is under the configured threshold by grouping enhancement rule (family:native min-frames=2))
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value*
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_excludes_single_frame_urls.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_excludes_single_frame_urls.pysnap
new file mode 100644
index 0000000000..01f2adff52
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_excludes_single_frame_urls.pysnap
@@ -0,0 +1,26 @@
+---
+created: '2019-05-08T07:29:42.779313Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
+--------------------------------------------------------------------------
+system:
+  hash: 'cd2a9fd0cdaa8cd55ed22b101fc65882'
+  component:
+    system*
+      stacktrace*
+        frame*
+          module*
+            u'<unknown module>'
+          filename (ignored because frame points to a URL)
+            u''
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_hash_without_system_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_hash_without_system_frames.pysnap
new file mode 100644
index 0000000000..6d37131ffb
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_hash_without_system_frames.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-05-08T07:29:42.787707Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_ignores_singular_anonymous_frame.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_ignores_singular_anonymous_frame.pysnap
new file mode 100644
index 0000000000..8fb716263a
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_ignores_singular_anonymous_frame.pysnap
@@ -0,0 +1,42 @@
+---
+created: '2019-11-01T10:06:08.174490Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (stacktrace of system takes precedence)
+      stacktrace
+        frame (non app frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame (non app frame)
+          filename*
+            u'dojo.js'
+          function*
+            u'c'
+        frame (non app frame)
+          filename*
+            u'dojo.js'
+          function* (trimmed javascript function)
+            u'_createDocumentViewModel'
+--------------------------------------------------------------------------
+system:
+  hash: 'c5da56c71b31f34c5880d734cbc8f5bb'
+  component:
+    system*
+      stacktrace*
+        frame (ignored low quality javascript frame)
+          filename (anonymous filename discarded)
+            u'<anonymous>'
+        frame*
+          filename*
+            u'dojo.js'
+          function*
+            u'c'
+        frame*
+          filename*
+            u'dojo.js'
+          function* (trimmed javascript function)
+            u'_createDocumentViewModel'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust.pysnap
new file mode 100644
index 0000000000..39b1761cec
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-06-05T11:45:18.857944Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: 'e0b4eea234ff891472cb927c00153bbe'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame*
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame*
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust2.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust2.pysnap
new file mode 100644
index 0000000000..96e9c1f865
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_rust2.pysnap
@@ -0,0 +1,68 @@
+---
+created: '2019-06-05T11:45:18.906457Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: 'eb87c1031dba55b67df86fb9fff59dc6'
+  component:
+    app*
+      exception*
+        stacktrace*
+          frame (non app frame)
+            function*
+              u'_main'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (non app frame)
+            function*
+              u'___rust_maybe_catch_panic'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (non app frame)
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
+--------------------------------------------------------------------------
+system:
+  hash: '9b33b65a645c66239cafcd276fcd0659'
+  component:
+    system*
+      exception*
+        stacktrace*
+          frame*
+            function*
+              u'_main'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start_internal'
+          frame (ignored by grouping enhancement rule (family:native function:__* -group))
+            function*
+              u'___rust_maybe_catch_panic'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::panicking::try::do_call'
+          frame* (marked out of app by grouping enhancement rule (family:native function:std::* -app))
+            function*
+              u'std::rt::lang_start::{{closure}}'
+          frame* (marked in-app by grouping enhancement rule (family:native function:log_demo::* +app))
+            function*
+              u'log_demo::main'
+          frame (ignored by grouping enhancement rule (family:native function:*::__* -group))
+            function*
+              u'log::__private_api_log'
+        type*
+          u'log_demo'
+        value (ignored because stacktrace takes precedence)
+          u'Holy shit everything is on fire!'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_with_minimal_app_frames.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_with_minimal_app_frames.pysnap
new file mode 100644
index 0000000000..7edfa161a2
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/stacktrace_with_minimal_app_frames.pysnap
@@ -0,0 +1,88 @@
+---
+created: '2019-05-08T07:29:42.883513Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: '1effb24729ae4c43efa36b460511136a'
+  component:
+    app*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+        frame (non app frame)
+          filename*
+            u'bar.py'
+--------------------------------------------------------------------------
+system:
+  hash: '659ad79e2e70c822d30a53d7d889529e'
+  component:
+    system*
+      stacktrace*
+        frame*
+          filename*
+            u'foo.py'
+        frame*
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
+        frame (ignored due to recursion)
+          filename*
+            u'bar.py'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/template_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/template_compute_hashes.pysnap
new file mode 100644
index 0000000000..bb82589faa
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/template_compute_hashes.pysnap
@@ -0,0 +1,14 @@
+---
+created: '2019-05-08T07:29:42.889892Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+default:
+  hash: '826f66ef602835f68030c04c634df320'
+  component:
+    default*
+      template*
+        filename*
+          u'foo.html'
+        context-line*
+          u'hello world'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_compute_hashes.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_compute_hashes.pysnap
new file mode 100644
index 0000000000..7e7d2501bd
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_compute_hashes.pysnap
@@ -0,0 +1,28 @@
+---
+created: '2019-04-17T20:02:29.122896Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app (threads of system takes precedence)
+      threads (ignored because this variant does not have a contributing stacktrace, but the system variant does)
+        stacktrace
+          frame (non app frame)
+            filename*
+              u'baz.c'
+            function*
+              u'main'
+--------------------------------------------------------------------------
+system:
+  hash: '1a11687556cf74559f0ae90b1c87e2fd'
+  component:
+    system*
+      threads*
+        stacktrace*
+          frame*
+            filename*
+              u'baz.c'
+            function*
+              u'main'
diff --git a/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_no_hash.pysnap b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_no_hash.pysnap
new file mode 100644
index 0000000000..2dd67d9889
--- /dev/null
+++ b/tests/sentry/grouping/snapshots/test_variants/test_event_hash_variant/newstyle@2019_10_29/threads_no_hash.pysnap
@@ -0,0 +1,19 @@
+---
+created: '2019-05-08T07:29:42.906320Z'
+creator: sentry
+source: tests/sentry/grouping/test_variants.py
+---
+app:
+  hash: None
+  component:
+    app
+      threads (ignored because contains 2 threads)
+--------------------------------------------------------------------------
+fallback:
+  hash: 'd41d8cd98f00b204e9800998ecf8427e'
+--------------------------------------------------------------------------
+system:
+  hash: None
+  component:
+    system
+      threads (ignored because contains 2 threads)
