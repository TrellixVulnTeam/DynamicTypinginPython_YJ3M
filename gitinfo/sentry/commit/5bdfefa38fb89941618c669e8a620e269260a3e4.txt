commit 5bdfefa38fb89941618c669e8a620e269260a3e4
Author: Ayesha Omarali <ayesha.omarali@gmail.com>
Date:   Wed Nov 14 17:05:18 2018 -0800

    feat(discover): Add Visualization Dropdown for Smaller Viewports (#10574)
    
    * Add dropdown, appears in views <950px

diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
index d96764e0b8..27902f2963 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/index.jsx
@@ -1,6 +1,5 @@
 import React from 'react';
 import PropTypes from 'prop-types';
-import classNames from 'classnames';
 import {Box, Flex} from 'grid-emotion';
 
 import SentryTypes from 'app/sentryTypes';
@@ -15,6 +14,7 @@ import InlineSvg from 'app/components/inlineSvg';
 import {getChartData, getChartDataByDay, downloadAsCsv, getRowsPageRange} from './utils';
 import Table from './table';
 import Pagination from './pagination';
+import VisualizationsToggle from './visualizationsToggle';
 import {
   ResultTitle,
   Heading,
@@ -66,6 +66,12 @@ export default class Result extends React.Component {
     });
   }
 
+  handleToggleVisualizations = opt => {
+    this.setState({
+      view: opt,
+    });
+  };
+
   renderToggle() {
     const {baseQuery, byDayQuery} = this.props.data;
 
@@ -86,22 +92,11 @@ export default class Result extends React.Component {
 
     return (
       <Flex justify="flex-end">
-        <Flex className="btn-group">
-          {options.map(opt => {
-            const active = opt.id === this.state.view;
-            return (
-              <a
-                key={opt.id}
-                className={classNames('btn btn-default btn-sm', {active})}
-                onClick={() => {
-                  this.setState({view: opt.id});
-                }}
-              >
-                {opt.name}
-              </a>
-            );
-          })}
-        </Flex>
+        <VisualizationsToggle
+          options={options}
+          handleChange={this.handleToggleVisualizations}
+          visualization={this.state.view}
+        />
         <Box ml={1}>
           <Link className={linkClasses} onClick={() => downloadAsCsv(baseQuery.data)}>
             {t('Export CSV')}
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx
new file mode 100644
index 0000000000..6344ea63ef
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/result/visualizationsToggle.jsx
@@ -0,0 +1,72 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import classNames from 'classnames';
+import DropdownLink from 'app/components/dropdownLink';
+import MenuItem from 'app/components/menuItem';
+import {t} from 'app/locale';
+
+import {ResultViewButtons, ResultViewDropdownButtons} from '../styles';
+
+class VisualizationsToggle extends React.Component {
+  static propTypes = {
+    options: PropTypes.arrayOf(
+      PropTypes.shape({
+        id: PropTypes.string,
+        name: PropTypes.string,
+      })
+    ).isRequired,
+    handleChange: PropTypes.func.isRequired,
+    visualization: PropTypes.string.isRequired,
+  };
+
+  getMenuItem = opt => {
+    return (
+      <MenuItem
+        key={opt.id}
+        onSelect={this.props.handleChange}
+        eventKey={opt.id}
+        isActive={opt.id === this.props.visualization}
+      >
+        {opt.name}
+      </MenuItem>
+    );
+  };
+
+  getButtonItems = opt => {
+    const active = opt.id === this.props.visualization;
+    return (
+      <a
+        key={opt.id}
+        className={classNames('btn btn-default btn-sm', {active})}
+        onClick={() => this.props.handleChange(opt.id)}
+      >
+        {opt.name}
+      </a>
+    );
+  };
+
+  render() {
+    const {options, visualization} = this.props;
+    const name = options.find(opt => opt.id === visualization).name;
+    const dropdownTitle = t(`View: ${name}`);
+
+    return (
+      <React.Fragment>
+        <ResultViewButtons className="btn-group">
+          {options.map(opt => {
+            return this.getButtonItems(opt);
+          })}
+        </ResultViewButtons>
+        <ResultViewDropdownButtons>
+          <DropdownLink title={dropdownTitle} className={'btn btn-default btn-sm'}>
+            {options.map(opt => {
+              return this.getMenuItem(opt);
+            })}
+          </DropdownLink>
+        </ResultViewDropdownButtons>
+      </React.Fragment>
+    );
+  }
+}
+
+export default VisualizationsToggle;
diff --git a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
index 1654d225c7..c8377c9559 100644
--- a/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
+++ b/src/sentry/static/sentry/app/views/organizationDiscover/styles.jsx
@@ -8,6 +8,7 @@ import space from 'app/styles/space';
 import {Panel, PanelItem} from 'app/components/panels';
 import NavTabs from 'app/components/navTabs';
 import Link from 'app/components/link';
+import theme from 'app/utils/theme';
 
 const HEADER_HEIGHT = 60;
 
@@ -43,6 +44,19 @@ export const ResultTitle = styled(Box)`
   min-width: 70px;
 `;
 
+export const ResultViewButtons = styled(Flex)`
+  @media (max-width: ${theme.breakpoints[1]}) {
+    display: none;
+  }
+`;
+
+export const ResultViewDropdownButtons = styled('div')`
+  display: none;
+  @media (max-width: ${theme.breakpoints[1]}) {
+    display: block;
+  }
+`;
+
 export const Sidebar = styled(props => (
   <Flex {...props} direction="column" w={[320, 320, 320, 380]} />
 ))`
diff --git a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
index d8b3071e82..4f1a29e2d8 100644
--- a/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
+++ b/tests/js/spec/views/organizationDiscover/result/index.spec.jsx
@@ -6,11 +6,11 @@ import createQueryBuilder from 'app/views/organizationDiscover/queryBuilder';
 
 describe('Result', function() {
   describe('New query', function() {
-    let wrapper;
+    let wrapper, data, organization;
     beforeEach(function() {
-      const organization = TestStubs.Organization();
+      organization = TestStubs.Organization();
 
-      const data = {
+      data = {
         baseQuery: {
           data: {data: [], meta: [], timing: {duration_ms: 15}},
           query: {
@@ -36,29 +36,9 @@ describe('Result', function() {
       MockApiClient.clearMockResponses();
     });
 
-    describe('Basic query', function() {
-      it('displays options', function() {
-        const buttons = wrapper.find('.btn-group').find('a');
-        expect(buttons).toHaveLength(3);
-      });
-
-      it('toggles', function() {
-        expect(wrapper.find('ResultTable')).toHaveLength(1);
-        expect(wrapper.find('LineChart')).toHaveLength(0);
-        wrapper
-          .find('.btn-group')
-          .find('a')
-          .at('1')
-          .simulate('click');
-        wrapper.update();
-        expect(wrapper.find('ResultTable')).toHaveLength(0);
-        expect(wrapper.find('LineChart')).toHaveLength(1);
-      });
-    });
-
     describe('Render Summary', function() {
       it('shows correct range for pagination in summary', async function() {
-        const data = {
+        data = {
           data: {
             baseQuery: {
               query: {
@@ -93,7 +73,7 @@ describe('Result', function() {
       });
 
       it('shows correct number of results shown when going to next page (next page function mocked on click)', async function() {
-        const data = {
+        data = {
           data: {
             baseQuery: {
               query: {
@@ -157,8 +137,54 @@ describe('Result', function() {
         ).toBe('query time: 15 ms, 0 rows');
       });
     });
+    describe('Toggles Visualizations', function() {
+      beforeEach(function() {
+        wrapper = mount(
+          <Result data={data} organization={organization} onFetchPage={jest.fn()} />,
+          {
+            context: {organization},
+          }
+        );
+      });
+
+      it('displays options', function() {
+        const buttons = wrapper.find('.btn-group').find('a');
+        expect(buttons).toHaveLength(3);
+      });
+
+      it('toggles buttons', function() {
+        expect(wrapper.find('ResultTable')).toHaveLength(1);
+        expect(wrapper.find('LineChart')).toHaveLength(0);
+
+        wrapper
+          .find('ResultViewButtons')
+          .find('a')
+          .at(1)
+          .simulate('click');
+        wrapper.update();
+
+        expect(wrapper.find('ResultTable')).toHaveLength(0);
+        expect(wrapper.find('LineChart')).toHaveLength(1);
+      });
+
+      it('toggles dropdown', function() {
+        expect(wrapper.find('ResultTable')).toHaveLength(1);
+        expect(wrapper.find('LineChart')).toHaveLength(0);
+
+        wrapper
+          .find('ul.dropdown-menu')
+          .find('a')
+          .at(1)
+          .simulate('click');
+
+        expect(wrapper.find('ResultTable')).toHaveLength(0);
+        expect(wrapper.find('LineChart')).toHaveLength(1);
+      });
+    });
+
   });
 
+
   describe('Saved query', function() {
     let wrapper, queryBuilder;
     beforeEach(function() {
