commit 8e9072432e8f83d85e5a4f773f121f7445943d36
Author: Priscila Oliveira <priscilawebdev@gmail.com>
Date:   Thu May 28 12:32:35 2020 +0200

    ref(ui): Updated breadcrumbs filter logic (#19004)

diff --git a/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx
index c1bf9fe84e..d2036d1bb2 100644
--- a/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/eventEntriesBreadcrumbs.tsx
@@ -2,7 +2,7 @@ import React from 'react';
 
 import Feature from 'app/components/acl/feature';
 import BreadcrumbsInterface from 'app/components/events/interfaces/breadcrumbs/breadcrumbs';
-import {Breadcrumbs} from 'app/components/events/interfaces/breadcrumbsV2/breadcrumbs';
+import Breadcrumbs from 'app/components/events/interfaces/breadcrumbsV2/breadcrumbs';
 
 type Props = React.ComponentProps<typeof Breadcrumbs>;
 type BreadcrumbsInterfaceProps = React.ComponentProps<typeof BreadcrumbsInterface>;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
index cda94a4fa7..458126f3a6 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/breadcrumbs.tsx
@@ -20,28 +20,27 @@ import {
   BreadcrumbType,
   BreadcrumbLevelType,
 } from './types';
-import {getTypeDetails} from './getTypeDetails';
-import {Filter} from './filter/filter';
-import {converType} from './convertType';
-import {FilterGroupType} from './filter/types';
-import {ListHeader} from './listHeader';
-import {ListBody} from './listBody';
-import {Level} from './level';
-import {Icon} from './icon';
+import transformCrumbs from './transformCrumbs';
+import Filter from './filter/filter';
+import ListHeader from './listHeader';
+import ListBody from './listBody';
+import Level from './level';
+import Icon from './icon';
 
 const MAX_CRUMBS_WHEN_COLLAPSED = 10;
 
-type BreadcrumbWithDetails = Breadcrumb & BreadcrumbDetails & {id: number};
-type FilterGroups = React.ComponentProps<typeof Filter>['filterGroups'];
+type BreadcrumbsWithDetails = Array<Breadcrumb & BreadcrumbDetails & {id: number}>;
+type FilterOptions = React.ComponentProps<typeof Filter>['options'];
 
 type State = {
   isCollapsed: boolean;
   searchTerm: string;
-  breadcrumbs: Array<BreadcrumbWithDetails>;
-  filteredByFilter: Array<BreadcrumbWithDetails>;
-  filteredByCustomSearch: Array<BreadcrumbWithDetails>;
-  filteredBreadcrumbs: Array<BreadcrumbWithDetails>;
-  filterGroups: FilterGroups;
+  breadcrumbs: BreadcrumbsWithDetails;
+  filteredByFilter: BreadcrumbsWithDetails;
+  filteredByCustomSearch: BreadcrumbsWithDetails;
+  filteredBreadcrumbs: BreadcrumbsWithDetails;
+  filterOptions: FilterOptions;
+  listBodyHeight?: React.CSSProperties['maxHeight'];
 };
 
 type Props = {
@@ -61,13 +60,28 @@ class Breadcrumbs extends React.Component<Props, State> {
     filteredByFilter: [],
     filteredByCustomSearch: [],
     filteredBreadcrumbs: [],
-    filterGroups: [],
+    filterOptions: [[], []],
   };
 
   componentDidMount() {
     this.loadBreadcrumbs();
   }
 
+  componentDidUpdate() {
+    this.loadListBodyHeight();
+  }
+
+  listBodyRef = React.createRef<HTMLDivElement>();
+
+  loadListBodyHeight = () => {
+    if (!this.state.listBodyHeight) {
+      const offsetHeight = this.listBodyRef?.current?.offsetHeight;
+      this.setState({
+        listBodyHeight: offsetHeight ? `${offsetHeight}px` : 'none',
+      });
+    }
+  };
+
   loadBreadcrumbs = () => {
     const {data} = this.props;
     let breadcrumbs = data.values;
@@ -78,54 +92,75 @@ class Breadcrumbs extends React.Component<Props, State> {
       breadcrumbs = [...breadcrumbs, virtualCrumb];
     }
 
-    const breadcrumbTypes: FilterGroups = [];
-    const breadcrumbLevels: FilterGroups = [];
+    const tranformedCrumbs = transformCrumbs(breadcrumbs);
+    const filterOptions = this.getFilterOptions(tranformedCrumbs);
+
+    this.setState({
+      breadcrumbs: tranformedCrumbs,
+      filteredBreadcrumbs: tranformedCrumbs,
+      filteredByFilter: tranformedCrumbs,
+      filteredByCustomSearch: tranformedCrumbs,
+      filterOptions,
+    });
+  };
+
+  getFilterOptions = (breadcrumbs: ReturnType<typeof transformCrumbs>): FilterOptions => {
+    const types = this.getFilterTypes(breadcrumbs);
+    const levels = this.getFilterLevels(types);
+    return [types, levels];
+  };
 
-    const convertedBreadcrumbs = breadcrumbs.map((breadcrumb, index) => {
-      const convertedBreadcrumb = converType(breadcrumb);
-      const breadcrumbTypeDetails = getTypeDetails(convertedBreadcrumb.type);
+  getFilterTypes = (breadcrumbs: ReturnType<typeof transformCrumbs>) => {
+    const filterTypes: FilterOptions[0] = [];
 
-      if (!breadcrumbTypes.find(b => b.type === convertedBreadcrumb.type)) {
-        breadcrumbTypes.push({
-          groupType: FilterGroupType.TYPE,
-          type: convertedBreadcrumb.type,
-          description: breadcrumbTypeDetails.description,
-          symbol: <Icon {...omit(breadcrumbTypeDetails, 'description')} size="xs" />,
+    for (const index in breadcrumbs) {
+      const breadcrumb = breadcrumbs[index];
+      const foundFilterType = filterTypes.findIndex(f => f.type === breadcrumb.type);
+
+      if (foundFilterType === -1) {
+        filterTypes.push({
+          type: breadcrumb.type,
+          description: breadcrumb.description,
+          symbol: <Icon {...omit(breadcrumb, 'description')} size="xs" />,
+          levels: breadcrumb?.level ? [breadcrumb.level] : [],
           isChecked: true,
+          isDisabled: false,
         });
+        continue;
       }
 
-      if (!breadcrumbLevels.find(b => b.type === String(convertedBreadcrumb?.level))) {
-        breadcrumbLevels.push({
-          groupType: FilterGroupType.LEVEL,
-          type: String(convertedBreadcrumb?.level) as BreadcrumbLevelType,
-          symbol: <Level level={convertedBreadcrumb.level} />,
+      if (
+        breadcrumb?.level &&
+        !filterTypes[foundFilterType].levels.includes(breadcrumb.level)
+      ) {
+        filterTypes[foundFilterType].levels.push(breadcrumb.level);
+      }
+    }
+
+    return filterTypes;
+  };
+
+  getFilterLevels = (types: FilterOptions[0]) => {
+    const filterLevels: FilterOptions[1] = [];
+
+    for (const indexType in types) {
+      for (const indexLevel in types[indexType].levels) {
+        const level = types[indexType].levels[indexLevel];
+
+        if (filterLevels.some(f => f.type === level)) {
+          continue;
+        }
+
+        filterLevels.push({
+          type: level,
+          symbol: <Level level={level} />,
           isChecked: true,
+          isDisabled: false,
         });
       }
+    }
 
-      return {
-        id: index,
-        ...convertedBreadcrumb,
-        ...breadcrumbTypeDetails,
-      };
-    });
-
-    this.setState({
-      breadcrumbs: convertedBreadcrumbs,
-      filteredBreadcrumbs: convertedBreadcrumbs,
-      filteredByFilter: convertedBreadcrumbs,
-      filteredByCustomSearch: convertedBreadcrumbs,
-      filterGroups: [
-        ...breadcrumbTypes
-          // in case of a breadcrumb of type BreadcrumbType.DEFAULT, moves it to the last position of the array
-          .filter(crumbType => crumbType.type !== BreadcrumbType.DEFAULT)
-          .concat(
-            breadcrumbTypes.filter(crumbType => crumbType.type === BreadcrumbType.DEFAULT)
-          ),
-        ...breadcrumbLevels,
-      ],
-    });
+    return filterLevels;
   };
 
   moduleToCategory = (module: any) => {
@@ -176,7 +211,7 @@ class Breadcrumbs extends React.Component<Props, State> {
   };
 
   getCollapsedCrumbQuantity = (): {
-    filteredCollapsedBreadcrumbs: Array<BreadcrumbWithDetails>;
+    filteredCollapsedBreadcrumbs: BreadcrumbsWithDetails;
     collapsedQuantity: number;
   } => {
     const {isCollapsed, filteredBreadcrumbs} = this.state;
@@ -195,52 +230,6 @@ class Breadcrumbs extends React.Component<Props, State> {
     };
   };
 
-  handleFilter = (filterGroups: FilterGroups) => () => {
-    //types
-    const breadcrumbFilterGroupTypes = filterGroups
-      .filter(
-        breadcrumbFilterGroup =>
-          breadcrumbFilterGroup.groupType === 'type' && breadcrumbFilterGroup.isChecked
-      )
-      .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
-
-    //levels
-    const breadcrumbFilterGroupLevels = filterGroups
-      .filter(
-        breadcrumbFilterGroup =>
-          breadcrumbFilterGroup.groupType === 'level' && breadcrumbFilterGroup.isChecked
-      )
-      .map(breadcrumbFilterGroup => breadcrumbFilterGroup.type);
-
-    const filteredByFilter = this.state.breadcrumbs.filter(({type, level}) => {
-      if (
-        breadcrumbFilterGroupLevels.length > 0 &&
-        breadcrumbFilterGroupTypes.length > 0
-      ) {
-        return (
-          breadcrumbFilterGroupTypes.includes(type) ||
-          breadcrumbFilterGroupLevels.includes(String(level) as BreadcrumbLevelType)
-        );
-      }
-
-      if (breadcrumbFilterGroupLevels.length > 0) {
-        return breadcrumbFilterGroupLevels.includes(String(level) as BreadcrumbLevelType);
-      }
-
-      return breadcrumbFilterGroupTypes.includes(type);
-    });
-
-    this.setState(
-      {
-        filteredByFilter,
-        filterGroups,
-      },
-      () => {
-        this.handleFilterBySearchTerm(this.state.searchTerm);
-      }
-    );
-  };
-
   handleFilterBySearchTerm = (value: string) => {
     const {filteredByFilter} = this.state;
 
@@ -279,13 +268,27 @@ class Breadcrumbs extends React.Component<Props, State> {
   };
 
   handleResetFilter = () => {
+    this.handleClickFilterCheckAll(true);
+  };
+
+  handleClickFilterCheckAll = (checkAll: boolean) => {
+    const {filterOptions} = this.state;
+    const updatedFilterOptions: FilterOptions = [[], []];
+
+    for (const index in filterOptions) {
+      for (const option in filterOptions[index]) {
+        updatedFilterOptions[index][option] = {
+          ...filterOptions[index][option],
+          isChecked: checkAll,
+          isDisabled: false,
+        };
+      }
+    }
+
     this.setState(
       prevState => ({
-        filteredByFilter: prevState.breadcrumbs,
-        filterGroups: prevState.filterGroups.map(filterGroup => ({
-          ...filterGroup,
-          isChecked: true,
-        })),
+        filteredByFilter: checkAll ? prevState.breadcrumbs : [],
+        filterOptions: updatedFilterOptions,
       }),
       () => {
         this.handleFilterBySearchTerm(this.state.searchTerm);
@@ -293,9 +296,51 @@ class Breadcrumbs extends React.Component<Props, State> {
     );
   };
 
+  filterCrumbsBy = (
+    type: keyof Pick<BreadcrumbsWithDetails[0], 'level' | 'type'>,
+    breadcrumbs: BreadcrumbsWithDetails,
+    filterOptions: Array<FilterOptions[0][0] | FilterOptions[1][0]>
+  ) =>
+    breadcrumbs.filter(b => {
+      const crumbProperty = b[type];
+      if (!crumbProperty) {
+        return true;
+      }
+      const foundInFilterOptions = filterOptions.find(f => f.type === crumbProperty);
+      if (foundInFilterOptions) {
+        return foundInFilterOptions.isChecked;
+      }
+      return true;
+    });
+
+  handleFilter = (filterOptions: FilterOptions) => {
+    const {breadcrumbs} = this.state;
+
+    const filteredCrumbsByType = this.filterCrumbsBy(
+      'type',
+      breadcrumbs,
+      filterOptions[0]
+    );
+    const filteredCrumbsByLevel = this.filterCrumbsBy(
+      'level',
+      filteredCrumbsByType,
+      filterOptions[1]
+    );
+
+    this.setState(
+      {
+        filterOptions,
+        filteredByFilter: filteredCrumbsByLevel,
+      },
+      () => {
+        this.handleFilterBySearchTerm(this.state.searchTerm);
+      }
+    );
+  };
+
   render() {
     const {type, event, orgId} = this.props;
-    const {filterGroups, searchTerm} = this.state;
+    const {filterOptions, searchTerm, listBodyHeight} = this.state;
 
     const {
       collapsedQuantity,
@@ -307,12 +352,16 @@ class Breadcrumbs extends React.Component<Props, State> {
         type={type}
         title={
           <GuideAnchor target="breadcrumbs" position="bottom">
-            <h3>{t('Breadcrumbs')} </h3>
+            <h3>{t('Breadcrumbs')}</h3>
           </GuideAnchor>
         }
         actions={
           <Search>
-            <Filter onFilter={this.handleFilter} filterGroups={filterGroups} />
+            <Filter
+              onCheckAll={this.handleClickFilterCheckAll}
+              onFilter={this.handleFilter}
+              options={filterOptions}
+            />
             <StyledSearchBar
               placeholder={t('Search breadcrumbs\u2026')}
               onChange={this.handleFilterBySearchTerm}
@@ -333,6 +382,8 @@ class Breadcrumbs extends React.Component<Props, State> {
                 onToggleCollapse={this.handleToggleCollapse}
                 collapsedQuantity={collapsedQuantity}
                 breadcrumbs={filteredCollapsedBreadcrumbs}
+                maxHeight={listBodyHeight}
+                ref={this.listBodyRef}
               />
             </React.Fragment>
           ) : (
@@ -353,7 +404,7 @@ class Breadcrumbs extends React.Component<Props, State> {
   }
 }
 
-export {Breadcrumbs};
+export default Breadcrumbs;
 
 const Content = styled('div')`
   box-shadow: ${p => p.theme.dropShadowLightest};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/category.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/category.tsx
index 48d35f1e00..57a40c80cd 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/category.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/category.tsx
@@ -19,7 +19,7 @@ const Category = ({category}: Props) => {
   );
 };
 
-export {Category};
+export default Category;
 
 const Wrapper = styled('div')`
   color: ${p => p.theme.gray800};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsed.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsedInfo.tsx
similarity index 89%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsed.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsedInfo.tsx
index 55642b484b..3fb85d43d9 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsed.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/collapsedInfo.tsx
@@ -12,7 +12,7 @@ type Props = {
   quantity: number;
 };
 
-const Collapsed = ({quantity, onClick}: Props) => (
+const CollapsedInfo = ({quantity, onClick}: Props) => (
   <Wrapper data-test-id="breadcrumb-collapsed" onClick={onClick}>
     <IconWrapper>
       <IconEllipsis />
@@ -21,7 +21,7 @@ const Collapsed = ({quantity, onClick}: Props) => (
   </Wrapper>
 );
 
-export {Collapsed};
+export default CollapsedInfo;
 
 const Wrapper = styled(GridCellLeft)`
   cursor: pointer;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertType.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertCrumbType.tsx
similarity index 91%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertType.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertCrumbType.tsx
index b1702fd554..a3c412ec05 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertType.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/convertCrumbType.tsx
@@ -2,7 +2,7 @@ import {defined} from 'app/utils';
 
 import {Breadcrumb, BreadcrumbType} from './types';
 
-function converType(breadcrumb: Breadcrumb): Breadcrumb {
+function convertCrumbType(breadcrumb: Breadcrumb): Breadcrumb {
   if (breadcrumb.type === BreadcrumbType.EXCEPTION) {
     return {
       ...breadcrumb,
@@ -48,4 +48,4 @@ function converType(breadcrumb: Breadcrumb): Breadcrumb {
   return breadcrumb;
 }
 
-export {converType};
+export default convertCrumbType;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/data.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/data.tsx
index fbfa3ba256..2946b2a159 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/data.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/data.tsx
@@ -2,9 +2,9 @@ import React from 'react';
 
 import {Event} from 'app/types';
 
-import {Default} from './default';
-import {Exception} from './exception';
-import {Http} from './http';
+import Default from './default';
+import Exception from './exception';
+import Http from './http';
 import {Breadcrumb, BreadcrumbType} from '../types';
 
 type Props = {
@@ -28,4 +28,4 @@ const Data = ({breadcrumb, event, orgId}: Props) => {
   return <Default breadcrumb={breadcrumb} />;
 };
 
-export {Data};
+export default Data;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/default.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/default.tsx
index f205e0851e..cdf660ac06 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/default.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/default.tsx
@@ -4,7 +4,7 @@ import {getMeta} from 'app/components/events/meta/metaProxy';
 
 import getBreadcrumbCustomRendererValue from '../../breadcrumbs/getBreadcrumbCustomRendererValue';
 import {BreadcrumbTypeDefault, BreadcrumbTypeNavigation} from '../types';
-import {Summary} from './summary';
+import Summary from './summary';
 
 type Props = {
   breadcrumb: BreadcrumbTypeDefault | BreadcrumbTypeNavigation;
@@ -20,4 +20,4 @@ const Default = ({breadcrumb}: Props) => (
   </Summary>
 );
 
-export {Default};
+export default Default;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/exception.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/exception.tsx
index 188e3db80d..f5a16e1a18 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/exception.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/exception.tsx
@@ -10,7 +10,7 @@ import Link from 'app/components/links/link';
 
 import getBreadcrumbCustomRendererValue from '../../breadcrumbs/getBreadcrumbCustomRendererValue';
 import {BreadcrumbTypeDefault} from '../types';
-import {Summary} from './summary';
+import Summary from './summary';
 
 type Props = {
   breadcrumb: BreadcrumbTypeDefault;
@@ -93,4 +93,4 @@ const FormatMessage = withProjects(function FormatMessageInner({
   return <React.Fragment>{message}</React.Fragment>;
 });
 
-export {Exception};
+export default Exception;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/http.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/http.tsx
index 446eac7a49..76ca509d37 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/http.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/http.tsx
@@ -8,7 +8,7 @@ import {defined} from 'app/utils';
 
 import getBreadcrumbCustomRendererValue from '../../breadcrumbs/getBreadcrumbCustomRendererValue';
 import {BreadcrumbTypeHTTP} from '../types';
-import {Summary} from './summary';
+import Summary from './summary';
 
 type Props = {
   breadcrumb: BreadcrumbTypeHTTP;
@@ -60,4 +60,4 @@ const Http = ({breadcrumb}: Props) => {
   );
 };
 
-export {Http};
+export default Http;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/summary.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/summary.tsx
index 247b7af490..11ab7bbfda 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/summary.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/data/summary.tsx
@@ -72,7 +72,7 @@ class Summary extends React.Component<Props, State> {
   }
 }
 
-export {Summary};
+export default Summary;
 
 const StyledPre = styled('pre')`
   padding: 0;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/dropdownButton.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/dropdownButton.tsx
new file mode 100644
index 0000000000..3200be3ef7
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/dropdownButton.tsx
@@ -0,0 +1,63 @@
+import React from 'react';
+import styled from '@emotion/styled';
+
+import {t, tn} from 'app/locale';
+import {GetActorPropsFn} from 'app/components/dropdownMenu';
+import DropdownButton from 'app/components/dropdownButton';
+
+type DropdownButtonProps = React.ComponentProps<typeof DropdownButton>;
+
+type Props = {
+  isOpen: boolean;
+  getActorProps: GetActorPropsFn;
+  checkedQuantity: number;
+};
+
+const DropDownButton = ({isOpen, getActorProps, checkedQuantity}: Props) => {
+  const buttonProps = {
+    label: t('Filter By'),
+    priority: 'default',
+    hasDarkBorderBottomColor: false,
+  };
+
+  if (checkedQuantity > 0) {
+    buttonProps.label = tn('%s Active Filter', '%s Active Filters', checkedQuantity);
+    buttonProps.priority = 'primary';
+    buttonProps.hasDarkBorderBottomColor = true;
+  }
+
+  return (
+    <StyledDropdownButton
+      {...getActorProps()}
+      isOpen={isOpen}
+      hasDarkBorderBottomColor={buttonProps.hasDarkBorderBottomColor}
+      size="small"
+      priority={buttonProps.priority as DropdownButtonProps['priority']}
+    >
+      {buttonProps.label}
+    </StyledDropdownButton>
+  );
+};
+
+export default DropDownButton;
+
+const StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`
+  border-right: 0;
+  &:hover,
+  &:active {
+    border-right: 0;
+  }
+  z-index: ${p => p.theme.zIndex.dropdown};
+  border-radius: ${p =>
+    p.isOpen
+      ? `${p.theme.borderRadius} 0 0 0`
+      : `${p.theme.borderRadius} 0 0 ${p.theme.borderRadius}`};
+  white-space: nowrap;
+  max-width: 200px;
+  ${p =>
+    !p.isOpen &&
+    p.hasDarkBorderBottomColor &&
+    `
+      border-bottom-color: ${p.theme.button.primary.border};
+    `}
+`;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/filter.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/filter.tsx
index 0c6492cb9a..237fe52760 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/filter.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/filter.tsx
@@ -1,183 +1,202 @@
 import React from 'react';
 import styled from '@emotion/styled';
 import isEqual from 'lodash/isEqual';
-import {css} from '@emotion/core';
 
-import {t, tn} from 'app/locale';
 import DropdownControl from 'app/components/dropdownControl';
-import DropdownButton from 'app/components/dropdownButton';
 
-import {Group} from './group';
-import {Header} from './header';
-import {Footer} from './footer';
-import {FilterGroup, FilterGroupType, FilterType} from './types';
+import DropDownButton from './dropdownButton';
+import OptionsGroup from './optionsGroup';
+import Header from './header';
+import {OptionType, OptionLevel, Option} from './types';
+
+type OnClick = React.ComponentProps<typeof OptionsGroup>['onClick'];
+type Options = [Array<OptionType>, Array<OptionLevel>];
 
 type Props = {
-  onFilter: (filterGroups: Array<FilterGroup>) => () => void;
-  filterGroups: Array<FilterGroup>;
+  options: Options;
+  onFilter: (options: Options) => void;
+  onCheckAll: (checkAll: boolean) => void;
 };
 
 type State = {
-  filterGroups: Array<FilterGroup>;
-  checkedOptionsQuantity: number;
+  checkAll: boolean;
+  hasTypeOption: boolean;
+  hasLevelOption: boolean;
+  checkedQuantity: number;
 };
 
 class Filter extends React.Component<Props, State> {
   state: State = {
-    filterGroups: [],
-    checkedOptionsQuantity: 0,
+    checkAll: true,
+    hasTypeOption: false,
+    hasLevelOption: false,
+    checkedQuantity: this.props.options.length,
   };
 
   componentDidUpdate(prevProps: Props) {
-    if (!isEqual(this.props.filterGroups, prevProps.filterGroups)) {
-      this.loadState();
+    if (!isEqual(prevProps.options, this.props.options)) {
+      this.updateState();
     }
   }
 
-  setCheckedOptionsQuantity = () => {
-    this.setState(prevState => ({
-      checkedOptionsQuantity: prevState.filterGroups.filter(
-        filterGroup => filterGroup.isChecked
-      ).length,
-    }));
+  updateState = () => {
+    const {options} = this.props;
+    this.setState({
+      hasTypeOption: options[0].length > 0,
+      hasLevelOption: options[1].length > 0,
+      checkedQuantity: this.getCheckedQuantity(),
+    });
   };
 
-  loadState() {
-    const {filterGroups} = this.props;
-    this.setState(
-      {
-        filterGroups,
-      },
-      this.setCheckedOptionsQuantity
-    );
-  }
+  handleToggleCheckAll = () => {
+    const {onCheckAll} = this.props;
 
-  handleClickItem = (type: FilterType, groupType: FilterGroupType) => {
     this.setState(
       prevState => ({
-        filterGroups: prevState.filterGroups.map(filterGroup => {
-          if (filterGroup.groupType === groupType && filterGroup.type === type) {
-            return {
-              ...filterGroup,
-              isChecked: !filterGroup.isChecked,
-            };
-          }
-          return filterGroup;
-        }),
+        checkAll: !prevState.checkAll,
       }),
-      this.setCheckedOptionsQuantity
+      () => {
+        onCheckAll(this.state.checkAll);
+      }
     );
   };
 
-  handleSelectAll = (selectAll: boolean) => {
-    this.setState(
-      prevState => ({
-        filterGroups: prevState.filterGroups.map(data => ({
-          ...data,
-          isChecked: selectAll,
-        })),
-      }),
-      this.setCheckedOptionsQuantity
-    );
-  };
+  getCheckedQuantity = () => {
+    const {options} = this.props;
+
+    let checkedQuantity = 0;
 
-  getDropDownButton = ({isOpen, getActorProps}) => {
-    const {checkedOptionsQuantity} = this.state;
-
-    const dropDownButtonProps = {
-      buttonLabel: t('Filter By'),
-      buttonPriority: 'default',
-      hasDarkBorderBottomColor: false,
-    };
-
-    if (checkedOptionsQuantity > 0) {
-      dropDownButtonProps.buttonLabel = tn(
-        '%s Active Filter',
-        '%s Active Filters',
-        checkedOptionsQuantity
-      );
-      dropDownButtonProps.buttonPriority = 'primary';
-      dropDownButtonProps.hasDarkBorderBottomColor = true;
+    for (const index in options) {
+      for (const option in options[index]) {
+        if (options[index][option].isChecked) {
+          checkedQuantity += 1;
+        }
+      }
     }
 
-    return (
-      <StyledDropdownButton
-        {...getActorProps()}
-        isOpen={isOpen}
-        hasDarkBorderBottomColor={dropDownButtonProps.hasDarkBorderBottomColor}
-        size="small"
-        priority={dropDownButtonProps.buttonPriority}
-      >
-        {dropDownButtonProps.buttonLabel}
-      </StyledDropdownButton>
-    );
+    return checkedQuantity;
+  };
+
+  filterOptionsFirstStep = (options: Array<Option>, option: Option) => {
+    const filteredOptions = options.map(type => {
+      if (isEqual(type, option)) {
+        return {
+          ...type,
+          isChecked: !type.isChecked,
+        };
+      }
+      return type;
+    });
+
+    const checkedOptions = filteredOptions.filter(t => t.isChecked);
+
+    return [filteredOptions, checkedOptions];
+  };
+
+  filterOptionsByLevel = (options: Options, option: Option): Options => {
+    // Filter levels
+    const [levels, checkedLevels] = this.filterOptionsFirstStep(options[1], option) as [
+      Options[1],
+      Options[1]
+    ];
+
+    // Filter types
+    const types = options[0].map(type => {
+      if (
+        !type.levels.some(level =>
+          checkedLevels.some(checkedLevel => checkedLevel.type === level)
+        )
+      ) {
+        return {
+          ...type,
+          isDisabled: true,
+        };
+      }
+      return {
+        ...type,
+        isDisabled: false,
+      };
+    });
+
+    return [types, levels];
+  };
+
+  filterOptionsByType = (options: Options, option: Option): Options => {
+    // Filter types
+    const [types, checkedTypes] = this.filterOptionsFirstStep(options[0], option) as [
+      Options[0],
+      Options[0]
+    ];
+
+    // Filter levels
+    const levels = options[1].map(level => {
+      if (!checkedTypes.some(type => type.levels.includes(level.type))) {
+        return {
+          ...level,
+          isDisabled: true,
+        };
+      }
+      return {
+        ...level,
+        isDisabled: false,
+      };
+    });
+
+    return [types, levels];
+  };
+
+  handleClick = (...args: Parameters<OnClick>) => {
+    const [type, option] = args;
+    const {onFilter, options} = this.props;
+
+    const updatedOptions =
+      type === 'type'
+        ? this.filterOptionsByType(options, option)
+        : this.filterOptionsByLevel(options, option);
+
+    onFilter(updatedOptions);
   };
 
   render() {
-    const {onFilter} = this.props;
-    const {filterGroups, checkedOptionsQuantity} = this.state;
+    const {options} = this.props;
+    const {hasTypeOption, hasLevelOption, checkedQuantity} = this.state;
 
-    const hasFilterGroupsGroupTypeLevel = filterGroups.find(
-      filterGroup => filterGroup.groupType === FilterGroupType.LEVEL
-    );
+    if (!hasTypeOption && !hasLevelOption) {
+      return null;
+    }
 
     return (
       <Wrapper>
-        <DropdownControl menuWidth="240px" blendWithActor button={this.getDropDownButton}>
-          <React.Fragment>
-            <Header
-              onSelectAll={this.handleSelectAll}
-              selectedQuantity={checkedOptionsQuantity}
-              isAllSelected={filterGroups.length === checkedOptionsQuantity}
+        <DropdownControl
+          menuWidth="240px"
+          blendWithActor
+          button={({isOpen, getActorProps}) => (
+            <DropDownButton
+              isOpen={isOpen}
+              getActorProps={getActorProps}
+              checkedQuantity={checkedQuantity}
             />
-            <Group
-              groupHeaderTitle={t('Type')}
-              onClick={this.handleClickItem}
-              data={filterGroups.filter(
-                filterGroup => filterGroup.groupType === FilterGroupType.TYPE
-              )}
-            />
-            {hasFilterGroupsGroupTypeLevel && (
-              <Group
-                groupHeaderTitle={t('Level')}
-                onClick={this.handleClickItem}
-                data={filterGroups.filter(
-                  filterGroup => filterGroup.groupType === FilterGroupType.LEVEL
-                )}
-              />
-            )}
-            {!isEqual(this.props.filterGroups, filterGroups) && (
-              <Footer onSubmit={onFilter(filterGroups)} />
-            )}
-          </React.Fragment>
+          )}
+        >
+          <Header
+            onCheckAll={this.handleToggleCheckAll}
+            checkedQuantity={checkedQuantity}
+            isAllChecked={false}
+          />
+          {hasTypeOption && (
+            <OptionsGroup type="type" onClick={this.handleClick} options={options[0]} />
+          )}
+
+          {hasLevelOption && (
+            <OptionsGroup type="level" onClick={this.handleClick} options={options[1]} />
+          )}
         </DropdownControl>
       </Wrapper>
     );
   }
 }
 
-export {Filter};
-
-const StyledDropdownButton = styled(DropdownButton)<{hasDarkBorderBottomColor?: boolean}>`
-  border-right: 0;
-  z-index: ${p => p.theme.zIndex.dropdown};
-  border-radius: ${p =>
-    p.isOpen
-      ? `${p.theme.borderRadius} 0 0 0`
-      : `${p.theme.borderRadius} 0 0 ${p.theme.borderRadius}`};
-  white-space: nowrap;
-  max-width: 200px;
-  &:hover,
-  &:active {
-    border-right: 0;
-  }
-  ${p =>
-    !p.isOpen &&
-    p.hasDarkBorderBottomColor &&
-    css`
-      border-bottom-color: ${p.theme.button.primary.border};
-    `}
-`;
+export default Filter;
 
 const Wrapper = styled('div')`
   position: relative;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/footer.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/footer.tsx
deleted file mode 100644
index f2ba64749f..0000000000
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/footer.tsx
+++ /dev/null
@@ -1,33 +0,0 @@
-import React from 'react';
-import styled from '@emotion/styled';
-
-import Button from 'app/components/button';
-import {growIn} from 'app/styles/animations';
-import space from 'app/styles/space';
-import {t} from 'app/locale';
-
-type Props = {
-  onSubmit: () => void;
-};
-
-const Footer = ({onSubmit}: Props) => (
-  <Wrapper>
-    <ApplyFilterButton onClick={onSubmit} size="xsmall" priority="primary">
-      {t('Apply Filter')}
-    </ApplyFilterButton>
-  </Wrapper>
-);
-
-const Wrapper = styled('div')`
-  display: flex;
-  justify-content: flex-end;
-  background-color: ${p => p.theme.gray100};
-  padding: ${space(1)};
-`;
-
-const ApplyFilterButton = styled(Button)`
-  animation: 0.1s ${growIn} ease-in;
-  margin: ${space(0.5)} 0;
-`;
-
-export {Footer};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/header.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/header.tsx
index 4ead3aefb2..7d1c2d9a3c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/header.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/header.tsx
@@ -6,33 +6,33 @@ import {t, tct} from 'app/locale';
 import CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';
 
 type Props = {
-  selectedQuantity: number;
-  isAllSelected: boolean;
-  onSelectAll: (selectAll: boolean) => void;
+  checkedQuantity: number;
+  isAllChecked: boolean;
+  onCheckAll: (checkAll: boolean) => void;
 };
 
-const Header = ({selectedQuantity, isAllSelected, onSelectAll}: Props) => {
+const Header = ({checkedQuantity, isAllChecked, onCheckAll}: Props) => {
   const handleClick = (event: React.MouseEvent<HTMLDivElement>) => {
     event.stopPropagation();
 
-    if (isAllSelected) {
-      onSelectAll(false);
+    if (isAllChecked) {
+      onCheckAll(false);
       return;
     }
 
-    onSelectAll(true);
+    onCheckAll(true);
   };
 
   const getCheckboxLabel = () => {
-    if (isAllSelected) {
-      return t('Unselect All');
+    if (isAllChecked) {
+      return t('Uncheck All');
     }
 
-    if (selectedQuantity === 0) {
-      return t('Select All');
+    if (checkedQuantity === 0) {
+      return t('Check All');
     }
 
-    return tct('[selectedQuantity] selected', {selectedQuantity});
+    return tct('[checkedQuantity] checked', {checkedQuantity});
   };
 
   return (
@@ -40,14 +40,16 @@ const Header = ({selectedQuantity, isAllSelected, onSelectAll}: Props) => {
       <CheckboxWrapper onClick={handleClick}>
         <span>{getCheckboxLabel()}</span>
         <CheckboxFancy
-          isChecked={isAllSelected}
-          isIndeterminate={!isAllSelected && selectedQuantity > 0}
+          isChecked={isAllChecked}
+          isIndeterminate={!isAllChecked && checkedQuantity > 0}
         />
       </CheckboxWrapper>
     </Wrapper>
   );
 };
 
+export default Header;
+
 const Wrapper = styled('div')`
   display: flex;
   background-color: ${p => p.theme.gray100};
@@ -64,5 +66,3 @@ const CheckboxWrapper = styled('div')`
   grid-template-columns: minmax(100px, auto) 16px;
   font-size: ${p => p.theme.fontSizeMedium};
 `;
-
-export {Header};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/group.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/optionsGroup.tsx
similarity index 56%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/group.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/optionsGroup.tsx
index 12ad0098e4..0ab9c2f760 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/group.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/optionsGroup.tsx
@@ -1,38 +1,45 @@
 import React from 'react';
 import styled from '@emotion/styled';
 
+import {t} from 'app/locale';
 import space from 'app/styles/space';
 import CheckboxFancy from 'app/components/checkboxFancy/checkboxFancy';
 
-import {FilterType, FilterGroupType, FilterGroup} from './types';
+import {Option} from './types';
+
+type Type = 'type' | 'level';
 
 type Props = {
-  groupHeaderTitle: string;
-  data: Array<FilterGroup>;
-  onClick: (type: FilterType, groupType: FilterGroupType) => void;
+  options: Array<Option>;
+  type: Type;
+  onClick: (type: Type, option: Option) => void;
 };
 
-const Group = ({groupHeaderTitle, data, onClick}: Props) => {
-  const handleClick = (type: FilterType, groupType: FilterGroupType) => (
-    event: React.MouseEvent<HTMLLIElement>
-  ) => {
+const OptionsGroup = ({type, options, onClick}: Props) => {
+  const handleClick = (option: Option) => (event: React.MouseEvent<HTMLLIElement>) => {
     event.stopPropagation();
-    onClick(type, groupType);
+
+    if (option.isDisabled) {
+      return;
+    }
+
+    onClick(type, option);
   };
 
   return (
     <div>
-      <Header>{groupHeaderTitle}</Header>
+      <Header>{type === 'type' ? t('Type') : t('Level')}</Header>
       <List>
-        {data.map(({type, groupType, description, isChecked, symbol}) => (
+        {options.map(option => (
           <ListItem
-            key={type}
-            isChecked={isChecked}
-            onClick={handleClick(type, groupType)}
+            key={option.type}
+            isChecked={option.isChecked}
+            onClick={handleClick(option)}
+            isDisabled={option.isDisabled}
           >
-            {symbol}
-            <ListItemDescription>{description}</ListItemDescription>
-            <CheckboxFancy isChecked={isChecked} />
+            {option.symbol}
+            <ListItemDescription>{option.description}</ListItemDescription>
+            <CheckboxFancy isChecked={option.isChecked} isDisabled={option.isDisabled} />
           </ListItem>
         ))}
       </List>
@@ -40,7 +47,7 @@ const Group = ({groupHeaderTitle, data, onClick}: Props) => {
   );
 };
 
-export {Group};
+export default OptionsGroup;
 
 const Header = styled('div')`
   display: flex;
@@ -60,14 +67,14 @@ const List = styled('ul')`
   padding: 0;
 `;
 
-const ListItem = styled('li')<{isChecked?: boolean}>`
+const ListItem = styled('li')<{isChecked?: boolean; isDisabled?: boolean}>`
   display: grid;
   grid-template-columns: max-content 1fr max-content;
   grid-column-gap: ${space(1)};
   align-items: center;
   padding: ${space(1)} ${space(2)};
   border-bottom: 1px solid ${p => p.theme.borderDark};
-  cursor: pointer;
+  cursor: ${p => (p.isDisabled ? 'not-allowed' : 'pointer')};
   :hover {
     background-color: ${p => p.theme.gray100};
   }
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/types.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/types.tsx
index a369048524..84e785cffc 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/types.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/filter/types.tsx
@@ -1,28 +1,19 @@
-import {BreadcrumbDetails, BreadcrumbType, BreadcrumbLevelType} from '../types';
+import {BreadcrumbType, BreadcrumbLevelType} from '../types';
 
-export enum FilterGroupType {
-  LEVEL = 'level',
-  TYPE = 'type',
-}
-
-type FilterGroupBase = {
+type OptionBase = {
+  symbol: React.ReactElement;
   isChecked: boolean;
-  symbol: React.ReactNode;
+  isDisabled: boolean;
   description?: string;
 };
 
-type FilterGroupTypeType = {
-  groupType: FilterGroupType.TYPE;
+export type OptionType = {
   type: BreadcrumbType;
-} & FilterGroupBase;
+  levels: Array<BreadcrumbLevelType>;
+} & OptionBase;
 
-type FilterGroupTypeLevel = {
-  groupType: FilterGroupType.LEVEL;
+export type OptionLevel = {
   type: BreadcrumbLevelType;
-} & FilterGroupBase;
-
-export type FilterGroup = FilterGroupTypeType | FilterGroupTypeLevel;
-
-export type FilterType = BreadcrumbLevelType | BreadcrumbType;
+} & OptionBase;
 
-export {BreadcrumbDetails};
+export type Option = OptionType | OptionLevel;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getTypeDetails.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getCrumbDetails.tsx
similarity index 94%
rename from src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getTypeDetails.tsx
rename to src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getCrumbDetails.tsx
index c93c372b0a..f088bc2f2c 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getTypeDetails.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/getCrumbDetails.tsx
@@ -13,9 +13,9 @@ import {
 } from 'app/icons';
 import {t} from 'app/locale';
 
-import {BreadcrumbType, BreadcrumbDetails} from './types';
+import {BreadcrumbType} from './types';
 
-function getTypeDetails(type: BreadcrumbType): BreadcrumbDetails {
+function getCrumbDetails(type: BreadcrumbType) {
   switch (type) {
     case BreadcrumbType.USER:
     case BreadcrumbType.UI:
@@ -101,4 +101,4 @@ function getTypeDetails(type: BreadcrumbType): BreadcrumbDetails {
   }
 }
 
-export {getTypeDetails};
+export default getCrumbDetails;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/icon.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/icon.tsx
index c4e2df47ce..cad6fd8028 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/icon.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/icon.tsx
@@ -18,4 +18,4 @@ const Icon = ({icon, color, size}: Props) => {
   );
 };
 
-export {Icon};
+export default Icon;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/level.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/level.tsx
index 3857ea5a95..3c405b0f18 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/level.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/level.tsx
@@ -23,4 +23,4 @@ const Level = ({level}: Props) => {
   }
 };
 
-export {Level};
+export default Level;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
index 2e9f4e99d0..df3b6bad5f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listBody.tsx
@@ -1,16 +1,18 @@
 import React from 'react';
 import styled from '@emotion/styled';
+import PropTypes from 'prop-types';
 
 import {Event} from 'app/types';
 import Tooltip from 'app/components/tooltip';
 import space from 'app/styles/space';
+import SentryTypes from 'app/sentryTypes';
 
-import {Collapsed} from './collapsed';
-import {Data} from './data/data';
-import {Category} from './category';
-import {Time} from './time';
-import {Icon} from './icon';
-import {Level} from './level';
+import Time from './time';
+import CollapsedInfo from './collapsedInfo';
+import Data from './data/data';
+import Category from './category';
+import Icon from './icon';
+import Level from './level';
 import {Grid, GridCell, GridCellLeft} from './styles';
 import {Breadcrumb, BreadcrumbDetails, BreadcrumbType} from './types';
 
@@ -22,68 +24,57 @@ type Props = {
   onToggleCollapse: () => void;
   event: Event;
   orgId: string | null;
+  maxHeight?: React.CSSProperties['maxHeight'];
 };
 
-type State = {
-  breadCrumbListHeight?: React.CSSProperties['maxHeight'];
-};
-
-class ListBody extends React.Component<Props, State> {
-  state: State = {};
-
-  componentDidMount() {
-    this.loadBreadCrumbListHeight();
-  }
-
-  listRef = React.createRef<HTMLDivElement>();
+const ListBody = React.forwardRef<HTMLDivElement, Props>(function ListBody(
+  {collapsedQuantity, onToggleCollapse, orgId, event, maxHeight, breadcrumbs},
+  ref
+) {
+  return (
+    <StyledGrid maxHeight={maxHeight} ref={ref}>
+      {collapsedQuantity > 0 && (
+        <CollapsedInfo onClick={onToggleCollapse} quantity={collapsedQuantity} />
+      )}
+      {breadcrumbs.map(({color, icon, ...crumb}, idx) => {
+        const hasError = crumb.type === BreadcrumbType.ERROR;
+        const isLastItem = breadcrumbs.length - 1 === idx;
+        return (
+          <React.Fragment key={idx}>
+            <GridCellLeft hasError={hasError} isLastItem={isLastItem}>
+              <Tooltip title={crumb.description}>
+                <Icon icon={icon} color={color} />
+              </Tooltip>
+            </GridCellLeft>
+            <GridCellCategory hasError={hasError} isLastItem={isLastItem}>
+              <Category category={crumb?.category} />
+            </GridCellCategory>
+            <GridCell hasError={hasError} isLastItem={isLastItem}>
+              <Data event={event} orgId={orgId} breadcrumb={crumb as Breadcrumb} />
+            </GridCell>
+            <GridCell hasError={hasError} isLastItem={isLastItem}>
+              <Level level={crumb.level} />
+            </GridCell>
+            <GridCell hasError={hasError} isLastItem={isLastItem}>
+              <Time timestamp={crumb.timestamp} />
+            </GridCell>
+          </React.Fragment>
+        );
+      })}
+    </StyledGrid>
+  );
+});
 
-  loadBreadCrumbListHeight = () => {
-    const offsetHeight = this.listRef?.current?.offsetHeight;
-    this.setState({
-      breadCrumbListHeight: offsetHeight ? `${offsetHeight}px` : 'none',
-    });
-  };
+export default ListBody;
 
-  render() {
-    const {collapsedQuantity, onToggleCollapse, breadcrumbs, event, orgId} = this.props;
-    const {breadCrumbListHeight} = this.state;
-
-    return (
-      <StyledGrid maxHeight={breadCrumbListHeight} ref={this.listRef}>
-        {collapsedQuantity > 0 && (
-          <Collapsed onClick={onToggleCollapse} quantity={collapsedQuantity} />
-        )}
-        {breadcrumbs.map(({color, icon, ...crumb}, idx) => {
-          const hasError = crumb.type === BreadcrumbType.ERROR;
-          const isLastItem = breadcrumbs.length - 1 === idx;
-          return (
-            <React.Fragment key={idx}>
-              <GridCellLeft hasError={hasError} isLastItem={isLastItem}>
-                <Tooltip title={crumb.description}>
-                  <Icon icon={icon} color={color} />
-                </Tooltip>
-              </GridCellLeft>
-              <GridCellCategory hasError={hasError} isLastItem={isLastItem}>
-                <Category category={crumb?.category} />
-              </GridCellCategory>
-              <GridCell hasError={hasError} isLastItem={isLastItem}>
-                <Data event={event} orgId={orgId} breadcrumb={crumb as Breadcrumb} />
-              </GridCell>
-              <GridCell hasError={hasError} isLastItem={isLastItem}>
-                <Level level={crumb.level} />
-              </GridCell>
-              <GridCell hasError={hasError} isLastItem={isLastItem}>
-                <Time timestamp={crumb.timestamp} />
-              </GridCell>
-            </React.Fragment>
-          );
-        })}
-      </StyledGrid>
-    );
-  }
-}
-
-export {ListBody};
+ListBody.propTypes = {
+  breadcrumbs: PropTypes.array.isRequired,
+  collapsedQuantity: PropTypes.number.isRequired,
+  onToggleCollapse: PropTypes.func.isRequired,
+  event: SentryTypes.Event.isRequired,
+  orgId: PropTypes.string.isRequired,
+  maxHeight: PropTypes.string,
+};
 
 const GridCellCategory = styled(GridCell)`
   @media (min-width: ${p => p.theme.breakpoints[0]}) {
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
index 84d6daeefa..1f5776e24e 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/listHeader.tsx
@@ -16,7 +16,7 @@ const ListHeader = () => (
   </StyledGrid>
 );
 
-export {ListHeader};
+export default ListHeader;
 
 const StyledGridCell = styled(GridCell)`
   border-bottom: 1px solid ${p => p.theme.borderDark};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
index 1f8d4d6165..88130cfbd0 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/styles.tsx
@@ -1,5 +1,4 @@
 import styled from '@emotion/styled';
-import {css} from '@emotion/core';
 
 import {Color} from 'app/utils/theme';
 import space from 'app/styles/space';
@@ -23,7 +22,7 @@ const IconWrapper = styled('div', {
   border: 1px solid ${p => p.theme.gray500};
   ${p =>
     p.color &&
-    css`
+    `
       color: ${p.theme[p.color] || p.color};
       border-color: ${p.theme[p.color] || p.color};
     `}
@@ -45,7 +44,7 @@ const GridCell = styled('div')<{
   }
   ${p =>
     p.hasError &&
-    css`
+    `
       background: #fffcfb;
       border-top: 1px solid #fa4747;
       border-bottom: 1px solid #fa4747;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx
index 8c10ed97b8..085d92342f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/time.tsx
@@ -29,7 +29,7 @@ const Time = ({timestamp}: Props) =>
     </Tooltip>
   ) : null;
 
-export {Time};
+export default Time;
 
 const Wrapper = styled('div')`
   font-size: ${p => p.theme.fontSizeSmall};
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/transformCrumbs.tsx b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/transformCrumbs.tsx
new file mode 100644
index 0000000000..956577c027
--- /dev/null
+++ b/src/sentry/static/sentry/app/components/events/interfaces/breadcrumbsV2/transformCrumbs.tsx
@@ -0,0 +1,17 @@
+import convertCrumbType from './convertCrumbType';
+import getCrumbDetails from './getCrumbDetails';
+import {Breadcrumb} from './types';
+
+const transformCrumbs = (breadcrumbs: Array<Breadcrumb>) => {
+  return breadcrumbs.map((breadcrumb, index) => {
+    const convertedCrumbType = convertCrumbType(breadcrumb);
+    const crumbDetails = getCrumbDetails(convertedCrumbType.type);
+    return {
+      id: index,
+      ...convertedCrumbType,
+      ...crumbDetails,
+    };
+  });
+};
+
+export default transformCrumbs;
