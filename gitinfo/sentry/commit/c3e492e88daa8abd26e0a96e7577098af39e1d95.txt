commit c3e492e88daa8abd26e0a96e7577098af39e1d95
Author: David Cramer <dcramer@gmail.com>
Date:   Fri Oct 19 00:40:30 2012 -0700

    Events are now kept in order

diff --git a/src/sentry/static/sentry/coffee/app.coffee b/src/sentry/static/sentry/coffee/app.coffee
index f98bdbc6a9..732e1d5982 100644
--- a/src/sentry/static/sentry/coffee/app.coffee
+++ b/src/sentry/static/sentry/coffee/app.coffee
@@ -11,3 +11,9 @@ jQuery ->
             group_list = new app.GroupListView
                 id: 'event_list'
                 members: data.groups
+
+
+# We're not talking to the server
+Backbone.sync = (method, model, success, error) ->
+
+    success()
\ No newline at end of file
diff --git a/src/sentry/static/sentry/coffee/collections.coffee b/src/sentry/static/sentry/coffee/collections.coffee
index 175e973d9b..cf0f5405e9 100644
--- a/src/sentry/static/sentry/coffee/collections.coffee
+++ b/src/sentry/static/sentry/coffee/collections.coffee
@@ -4,4 +4,10 @@ jQuery ->
 
     app.GroupList = class GroupList extends Backbone.Collection
 
-        model: app.Group
+        initialize: ->
+            _.bindAll @
+
+            model = app.Group
+
+        comparator: (member) ->
+            -member.get('score')
diff --git a/src/sentry/static/sentry/coffee/views.coffee b/src/sentry/static/sentry/coffee/views.coffee
index e09b7cbb93..6ed9614f6a 100644
--- a/src/sentry/static/sentry/coffee/views.coffee
+++ b/src/sentry/static/sentry/coffee/views.coffee
@@ -10,42 +10,83 @@ jQuery ->
 
             _.bindAll @
 
-            @collection = new app.GroupList
-            @collection.on 'add', @appendMember
-            @collection.on 'remove', @clearMember
-            # @collection.on 'add remove', @changed
-
-            for obj in data.members
-                inst = new @model(obj)
-                @addMember(inst)
-
+            @$parent = $('#' + @id)
 
-        changed: ->
-            @trigger "membership"
-
-        addMember: (obj) ->
-            if not @hasMember(obj)
-                @collection.add obj
+            @collection = new app.GroupList
+            @collection.on('add', @renderMemberInContainer)
+            @collection.on('remove', @unrenderMember)
+            # @collection.on('add remove', @changeMember)
+            # @collection.on('reset', @render)
+            @collection.on('resort', @reSortMembers)
+            @collection.add(data.members || []);
+
+        addMember: (member) ->
+            if not @hasMember(member)
+                @collection.add(member)
+            else
+                @updateMember(member)
+
+        updateMember: (member) ->
+            currentPosition = @collection.indexOf(obj)
+
+            obj = @collection.get(member.id)
+            # We need previousPosition for sorting
+            obj.set('previousPosition', @collection.indexOf(obj))
+            obj.set('count', member.get('count'))
+            obj.set('score', member.get('score'))
+
+            @collection.sort()
+            @trigger('resort')
+
+        hasMember: (member) ->
+            if @collection.get(member.id) then true else false
+
+        removeMember: (member) ->
+            @collection.remove(member)
+
+        renderMemberInContainer: (member) ->
+            # TODO: we might want to optimize here and get old positions/new positions
+            # all at once so there's a single sort cost
+            new_pos = @collection.indexOf(member)
+
+            # check to see if the row already exists in the sort,
+            # and get the current position
+            old_pos = member.get('previousPosition') || -1;
+
+            # if the row was already present, adjust its score
+            if old_pos == new_pos
+                return
+        
+            # create the element if it does not yet exist
+            $el = $(@id + member.id)
+            if !$el.length
+                $el = @renderMember(member)
+
+            # top item
+            if new_pos == 0
+                @$parent.prepend($el)
             else
-                obj = @collection.get obj.id
-                obj.set('count', obj.get "count")
+                $rel = $(@id + @collection.at(new_pos - 1))
+                if !$rel.length
+                    @$parent.append($el)
+                else
+                    @$parent.insertBefore($rel)
 
-        hasMember: (obj) ->
-            if @collection.get obj.id then true else false
+            # $row.find('.sparkline').sparkline('html', {enableTagOptions: true});
 
-        removeMember: (obj) ->
-            @collection.remove obj
+            # // shiny fx
+            # $row.css('background-color', '#ddd').animate({backgroundColor: '#fff'}, 1200);
 
-        appendMember: (obj) ->
+        renderMember: (member) ->
             view = new GroupView
-                model: obj
-                id: @id + obj.id
+                model: member
+                id: @id + member.id
 
             out = view.render()
-            $('#' + @id).append out.el
+            out.el
 
-        clearMember: (obj) ->
-            $('li[data-id="' + @id + '"]', el).remove()
+        unrenderMember: (member) ->
+            $(@id + member.id).remove()
 
 
     app.GroupView = class GroupView extends Backbone.View
@@ -70,10 +111,10 @@ jQuery ->
             @
 
         getHistoricalAsString: (obj) ->
-            if obj.historicalData then obj.historicalData.join ', ' else ''
+            if obj.get('historicalData') then obj.get('historicalData').join ', ' else ''
 
         getLevelClassName: (obj) ->
-            'level-' + obj.attributes.levelName
+            'level-' + obj.get('levelName')
 
         updateCount: (obj) ->
             $('.count span', this.$el).text @model.get("count")
diff --git a/src/sentry/static/sentry/scripts/site.js b/src/sentry/static/sentry/scripts/site.js
index 571aef37a7..cf76a7608c 100644
--- a/src/sentry/static/sentry/scripts/site.js
+++ b/src/sentry/static/sentry/scripts/site.js
@@ -33,6 +33,10 @@
     })(Backbone.View);
   });
 
+  Backbone.sync = function(method, model, success, error) {
+    return success();
+  };
+
   window.app = app = app || {};
 
   jQuery(function() {
@@ -45,7 +49,15 @@
         return GroupList.__super__.constructor.apply(this, arguments);
       }
 
-      GroupList.prototype.model = app.Group;
+      GroupList.prototype.initialize = function() {
+        var model;
+        _.bindAll(this);
+        return model = app.Group;
+      };
+
+      GroupList.prototype.comparator = function(member) {
+        return -member.get('score');
+      };
 
       return GroupList;
 
@@ -133,58 +145,81 @@
       GroupListView.prototype.model = app.Group;
 
       GroupListView.prototype.initialize = function(data) {
-        var inst, obj, _i, _len, _ref, _results;
         _.bindAll(this);
+        this.$parent = $('#' + this.id);
         this.collection = new app.GroupList;
-        this.collection.on('add', this.appendMember);
-        this.collection.on('remove', this.clearMember);
-        _ref = data.members;
-        _results = [];
-        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
-          obj = _ref[_i];
-          inst = new this.model(obj);
-          _results.push(this.addMember(inst));
-        }
-        return _results;
-      };
-
-      GroupListView.prototype.changed = function() {
-        return this.trigger("membership");
+        this.collection.on('add', this.renderMemberInContainer);
+        this.collection.on('remove', this.unrenderMember);
+        this.collection.on('resort', this.reSortMembers);
+        return this.collection.add(data.members || []);
       };
 
-      GroupListView.prototype.addMember = function(obj) {
-        if (!this.hasMember(obj)) {
-          return this.collection.add(obj);
+      GroupListView.prototype.addMember = function(member) {
+        if (!this.hasMember(member)) {
+          return this.collection.add(member);
         } else {
-          obj = this.collection.get(obj.id);
-          return obj.set('count', obj.get("count"));
+          return this.updateMember(member);
         }
       };
 
-      GroupListView.prototype.hasMember = function(obj) {
-        if (this.collection.get(obj.id)) {
+      GroupListView.prototype.updateMember = function(member) {
+        var currentPosition, obj;
+        currentPosition = this.collection.indexOf(obj);
+        obj = this.collection.get(member.id);
+        obj.set('previousPosition', this.collection.indexOf(obj));
+        obj.set('count', member.get('count'));
+        obj.set('score', member.get('score'));
+        this.collection.sort();
+        return this.trigger('resort');
+      };
+
+      GroupListView.prototype.hasMember = function(member) {
+        if (this.collection.get(member.id)) {
           return true;
         } else {
           return false;
         }
       };
 
-      GroupListView.prototype.removeMember = function(obj) {
-        return this.collection.remove(obj);
+      GroupListView.prototype.removeMember = function(member) {
+        return this.collection.remove(member);
+      };
+
+      GroupListView.prototype.renderMemberInContainer = function(member) {
+        var $el, $rel, new_pos, old_pos;
+        new_pos = this.collection.indexOf(member);
+        old_pos = member.get('previousPosition') || -1;
+        if (old_pos === new_pos) {
+          return;
+        }
+        $el = $(this.id + member.id);
+        if (!$el.length) {
+          $el = this.renderMember(member);
+        }
+        if (new_pos === 0) {
+          return this.$parent.prepend($el);
+        } else {
+          $rel = $(this.id + this.collection.at(new_pos - 1));
+          if (!$rel.length) {
+            return this.$parent.append($el);
+          } else {
+            return this.$parent.insertBefore($rel);
+          }
+        }
       };
 
-      GroupListView.prototype.appendMember = function(obj) {
+      GroupListView.prototype.renderMember = function(member) {
         var out, view;
         view = new GroupView({
-          model: obj,
-          id: this.id + obj.id
+          model: member,
+          id: this.id + member.id
         });
         out = view.render();
-        return $('#' + this.id).append(out.el);
+        return out.el;
       };
 
-      GroupListView.prototype.clearMember = function(obj) {
-        return $('li[data-id="' + this.id + '"]', el).remove();
+      GroupListView.prototype.unrenderMember = function(member) {
+        return $(this.id + member.id).remove();
       };
 
       return GroupListView;
@@ -226,15 +261,15 @@
       };
 
       GroupView.prototype.getHistoricalAsString = function(obj) {
-        if (obj.historicalData) {
-          return obj.historicalData.join(', ');
+        if (obj.get('historicalData')) {
+          return obj.get('historicalData').join(', ');
         } else {
           return '';
         }
       };
 
       GroupView.prototype.getLevelClassName = function(obj) {
-        return 'level-' + obj.attributes.levelName;
+        return 'level-' + obj.get('levelName');
       };
 
       GroupView.prototype.updateCount = function(obj) {
diff --git a/src/sentry/templates/sentry/groups/group_list.html b/src/sentry/templates/sentry/groups/group_list.html
index 3fbfe5490b..02f5e70d5e 100644
--- a/src/sentry/templates/sentry/groups/group_list.html
+++ b/src/sentry/templates/sentry/groups/group_list.html
@@ -12,6 +12,7 @@
     {% if has_realtime %}
         app.config.hasRealtime = {{ hasRealtime|to_json|safe  }};
         app.config.projectId = {{ project.slug|to_json|safe }};
+        app.config.viewId = {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %};
         Sentry.realtime.config({
             projectId: {{ project.slug|to_json|safe }},
             viewId: {% if view %}{{ view.pk|to_json|safe }}{% else %}null{% endif %}
diff --git a/src/sentry/templates/sentry/layout.html b/src/sentry/templates/sentry/layout.html
index 669ddf7482..31b3d1222b 100644
--- a/src/sentry/templates/sentry/layout.html
+++ b/src/sentry/templates/sentry/layout.html
@@ -35,7 +35,7 @@
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/jquery.sparkline.min.js" %}"></script>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/json2.js" %}"></script>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/underscore.min.js" %}"></script>
-        <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/backbone.min.js" %}"></script>
+        <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/backbone.js" %}"></script>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/select2/select2.min.js" %}"></script>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/global.min.js" %}"></script>
         <script type="text/javascript" src="{% url sentry-media "sentry" "scripts/site.js" %}"></script>
diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 6253e63105..968dc475d2 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -65,6 +65,7 @@ class GroupTransformer(Transformer):
             'timeSpent': obj.avg_time_spent,
             'canResolve': request and request.user.is_authenticated(),
             'isResolved': obj.status == STATUS_RESOLVED,
+            'score': getattr(obj, 'sort_value', 0),
         }
         if request:
             d['tags'] = list(get_tags(obj, request))
