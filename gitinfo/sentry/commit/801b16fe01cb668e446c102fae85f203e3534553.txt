commit 801b16fe01cb668e446c102fae85f203e3534553
Author: Lyn Nagara <lyn.nagara@gmail.com>
Date:   Sat Mar 3 12:19:15 2018 -0800

    feat(environments): Exclude environment tag in stream

diff --git a/src/sentry/static/sentry/app/actionCreators/streamTag.jsx b/src/sentry/static/sentry/app/actionCreators/streamTag.jsx
new file mode 100644
index 0000000000..10b2f794bf
--- /dev/null
+++ b/src/sentry/static/sentry/app/actionCreators/streamTag.jsx
@@ -0,0 +1,29 @@
+import {Client} from '../api';
+import {t} from '../locale';
+import StreamTagStore from '../stores/streamTagStore';
+import StreamTagActions from '../actions/streamTagActions';
+import AlertActions from '../actions/alertActions';
+
+const api = new Client();
+
+const MAX_TAGS = 500;
+
+export function fetchStreamTags(orgId, projectId) {
+  StreamTagStore.reset();
+  StreamTagActions.loadTags();
+
+  api.request(`/projects/${orgId}/${projectId}/tags/`, {
+    success: tags => {
+      let trimmedTags = tags.slice(0, MAX_TAGS);
+
+      if (tags.length > MAX_TAGS) {
+        AlertActions.addAlert({
+          message: t('You have too many unique tags and some have been truncated'),
+          type: 'warn',
+        });
+      }
+      StreamTagActions.loadTagsSuccess(trimmedTags);
+    },
+    error: StreamTagActions.loadTagsError,
+  });
+}
diff --git a/src/sentry/static/sentry/app/views/stream/filters.jsx b/src/sentry/static/sentry/app/views/stream/filters.jsx
index 619bea515a..5d569cf24c 100644
--- a/src/sentry/static/sentry/app/views/stream/filters.jsx
+++ b/src/sentry/static/sentry/app/views/stream/filters.jsx
@@ -11,7 +11,6 @@ class StreamFilters extends React.Component {
     orgId: PropTypes.string.isRequired,
     projectId: PropTypes.string.isRequired,
     access: PropTypes.object.isRequired,
-    tags: PropTypes.object.isRequired,
 
     searchId: PropTypes.string,
     savedSearchList: PropTypes.array.isRequired,
@@ -50,7 +49,6 @@ class StreamFilters extends React.Component {
       queryMaxCount,
       query,
       savedSearchList,
-      tags,
       isSearchDisabled,
       sort,
 
@@ -85,8 +83,6 @@ class StreamFilters extends React.Component {
               <SearchBar
                 orgId={orgId}
                 projectId={projectId}
-                ref="searchBar"
-                tags={tags}
                 placeholder={t('Search for events, users, tags, and everything else.')}
                 query={query || ''}
                 onSearch={onSearch}
diff --git a/src/sentry/static/sentry/app/views/stream/index.jsx b/src/sentry/static/sentry/app/views/stream/index.jsx
index b53ec00f92..b1ac8d58a7 100644
--- a/src/sentry/static/sentry/app/views/stream/index.jsx
+++ b/src/sentry/static/sentry/app/views/stream/index.jsx
@@ -1,9 +1,14 @@
 import PropTypes from 'prop-types';
 import React from 'react';
+import Reflux from 'reflux';
 import createReactClass from 'create-react-class';
+import {omit} from 'lodash';
 
+import ProjectState from '../../mixins/projectState';
+import StreamTagStore from '../../stores/streamTagStore';
 import withEnvironment from '../../utils/withEnvironment';
 import Stream from './stream';
+import {fetchStreamTags} from '../../actionCreators/streamTag';
 
 const StreamContainer = createReactClass({
   displayName: 'StreamContainer',
@@ -12,12 +17,50 @@ const StreamContainer = createReactClass({
     setProjectNavSection: PropTypes.func,
   },
 
+  mixins: [ProjectState, Reflux.listenTo(StreamTagStore, 'onStreamTagChange')],
+
+  getInitialState() {
+    const hasEnvironmentsFeature = new Set(this.getOrganization().features).has(
+      'environments'
+    );
+
+    return {
+      tags: StreamTagStore.getAllTags(),
+      tagsLoading: true,
+      hasEnvironmentsFeature,
+    };
+  },
+
   componentWillMount() {
+    const {orgId, projectId} = this.props.params;
     this.props.setProjectNavSection('stream');
+    fetchStreamTags(orgId, projectId);
+  },
+
+  onStreamTagChange(tags) {
+    this.setState({
+      tags,
+      tagsLoading: false,
+    });
+  },
+
+  // We don't want the environment tag to be visible to the user
+  filterTags(tags) {
+    return omit(tags, 'environment');
   },
 
   render() {
-    return <Stream {...this.props} />;
+    const {hasEnvironmentsFeature, tagsLoading, tags} = this.state;
+    const filteredTags = hasEnvironmentsFeature ? this.filterTags(this.state.tags) : tags;
+
+    return (
+      <Stream
+        hasEnvironmentsFeature={hasEnvironmentsFeature}
+        tags={filteredTags}
+        tagsLoading={tagsLoading}
+        {...this.props}
+      />
+    );
   },
 });
 
diff --git a/src/sentry/static/sentry/app/views/stream/stream.jsx b/src/sentry/static/sentry/app/views/stream/stream.jsx
index e60941a89d..bb03e15606 100644
--- a/src/sentry/static/sentry/app/views/stream/stream.jsx
+++ b/src/sentry/static/sentry/app/views/stream/stream.jsx
@@ -9,7 +9,6 @@ import classNames from 'classnames';
 
 import ApiMixin from '../../mixins/apiMixin';
 import GroupStore from '../../stores/groupStore';
-import StreamTagStore from '../../stores/streamTagStore';
 import EnvironmentStore from '../../stores/environmentStore';
 import LoadingError from '../../components/loadingError';
 import LoadingIndicator from '../../components/loadingIndicator';
@@ -17,8 +16,6 @@ import ProjectState from '../../mixins/projectState';
 import Pagination from '../../components/pagination';
 import StreamGroup from '../../components/stream/group';
 import StreamActions from './../stream/actions';
-import StreamTagActions from '../../actions/streamTagActions';
-import AlertActions from '../../actions/alertActions';
 import StreamFilters from './../stream/filters';
 import StreamSidebar from './../stream/sidebar';
 import TimeSince from '../../components/timeSince';
@@ -29,7 +26,6 @@ import parseLinkHeader from '../../utils/parseLinkHeader';
 import {t, tn, tct} from '../../locale';
 import {setActiveEnvironment} from '../../actionCreators/environments';
 
-const MAX_TAGS = 500;
 const MAX_ITEMS = 25;
 const DEFAULT_SORT = 'date';
 const DEFAULT_STATS_PERIOD = '24h';
@@ -39,14 +35,12 @@ const Stream = createReactClass({
 
   propTypes: {
     environment: PropTypes.object,
+    hasEnvironmentsFeature: PropTypes.bool,
+    tags: PropTypes.object,
+    tagsLoading: PropTypes.bool,
   },
 
-  mixins: [
-    Reflux.listenTo(GroupStore, 'onGroupChange'),
-    Reflux.listenTo(StreamTagStore, 'onStreamTagChange'),
-    ApiMixin,
-    ProjectState,
-  ],
+  mixins: [Reflux.listenTo(GroupStore, 'onGroupChange'), ApiMixin, ProjectState],
 
   getInitialState() {
     let searchId = this.props.params.searchId || null;
@@ -57,9 +51,6 @@ const Stream = createReactClass({
         ? project && !project.firstEvent
         : realtimeActiveCookie === 'true';
 
-    let hasEnvironmentsFeature = new Set(this.getOrganization().features).has(
-      'environments'
-    );
     let currentQuery = this.props.location.query || {};
     let sort = 'sort' in currentQuery ? currentQuery.sort : DEFAULT_SORT;
 
@@ -87,11 +78,8 @@ const Stream = createReactClass({
       error: false,
       query: hasQuery ? currentQuery.query : '',
       sort,
-      tags: StreamTagStore.getAllTags(),
-      tagsLoading: true,
       isSidebarVisible: false,
       processingIssues: null,
-      hasEnvironmentsFeature,
     };
   },
 
@@ -103,7 +91,6 @@ const Stream = createReactClass({
 
     this.fetchSavedSearches();
     this.fetchProcessingIssues();
-    this.fetchTags();
   },
 
   componentDidMount() {
@@ -234,35 +221,6 @@ const Stream = createReactClass({
     });
   },
 
-  fetchTags() {
-    StreamTagStore.reset();
-    StreamTagActions.loadTags();
-
-    this.setState({
-      tagsLoading: true,
-    });
-
-    let params = this.props.params;
-    this.api.request(`/projects/${params.orgId}/${params.projectId}/tags/`, {
-      success: tags => {
-        let trimmedTags = tags.slice(0, MAX_TAGS);
-
-        if (tags.length > MAX_TAGS) {
-          AlertActions.addAlert({
-            message: t('You have too many unique tags and some have been truncated'),
-            type: 'warn',
-          });
-        }
-        this.setState({tagsLoading: false});
-        StreamTagActions.loadTagsSuccess(trimmedTags);
-      },
-      error: error => {
-        this.setState({tagsLoading: false});
-        StreamTagActions.loadTagsError();
-      },
-    });
-  },
-
   showingProcessingIssues() {
     return this.state.query && this.state.query.trim() == 'is:unprocessed';
   },
@@ -365,7 +323,7 @@ const Stream = createReactClass({
     if (queryEnvironment !== null) {
       // Set the global environment to the one specified by the saved search
       if (queryEnvironment !== activeEnvName) {
-        if (this.state.hasEnvironmentsFeature) {
+        if (this.props.hasEnvironmentsFeature) {
           let env = EnvironmentStore.getByName(queryEnvironment);
           setActiveEnvironment(env);
         }
@@ -497,13 +455,6 @@ const Stream = createReactClass({
     }
   },
 
-  onStreamTagChange(tags) {
-    // new object to trigger state change
-    this.setState({
-      tags: {...tags},
-    });
-  },
-
   onSearch(query) {
     if (query === this.state.query) {
       // if query is the same, just re-fetch data
@@ -774,7 +725,6 @@ const Stream = createReactClass({
               projectId={projectId}
               query={this.state.query}
               sort={this.state.sort}
-              tags={this.state.tags}
               searchId={searchId}
               queryCount={this.state.queryCount}
               queryMaxCount={this.state.queryMaxCount}
@@ -809,8 +759,8 @@ const Stream = createReactClass({
             <Pagination pageLinks={this.state.pageLinks} />
           </div>
           <StreamSidebar
-            loading={this.state.tagsLoading}
-            tags={this.state.tags}
+            loading={this.props.tagsLoading}
+            tags={this.props.tags}
             query={this.state.query}
             onQueryChange={this.onSearch}
             orgId={params.orgId}
diff --git a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
index d603d6016a..a2ac859236 100644
--- a/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
+++ b/tests/js/spec/views/stream/__snapshots__/stream.spec.jsx.snap
@@ -30,77 +30,6 @@ exports[`Stream render() displays the group list 1`] = `
         }
         searchId={null}
         sort="date"
-        tags={
-          Object {
-            "assigned": Object {
-              "key": "assigned",
-              "name": "Assigned To",
-              "predefined": true,
-              "values": Array [],
-            },
-            "bookmarks": Object {
-              "key": "bookmarks",
-              "name": "Bookmarked By",
-              "predefined": true,
-              "values": Array [],
-            },
-            "event.timestamp": Object {
-              "key": "event.timestamp",
-              "name": "Event Timestamp",
-              "predefined": true,
-              "values": Array [
-                "2017-01-02",
-                ">=2017-01-02T01:00:00",
-                "<2017-01-02T02:00:00",
-              ],
-            },
-            "firstSeen": Object {
-              "key": "firstSeen",
-              "name": "First Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "has": Object {
-              "key": "has",
-              "name": "Has Tag",
-              "predefined": true,
-              "values": Array [],
-            },
-            "is": Object {
-              "key": "is",
-              "name": "Status",
-              "predefined": true,
-              "values": Array [
-                "resolved",
-                "unresolved",
-                "ignored",
-                "muted",
-                "assigned",
-                "unassigned",
-              ],
-            },
-            "lastSeen": Object {
-              "key": "lastSeen",
-              "name": "Last Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "timesSeen": Object {
-              "key": "timesSeen",
-              "name": "Times Seen",
-              "predefined": true,
-              "values": Array [],
-            },
-          }
-        }
       />
       <Sticky
         bottomOffset={0}
@@ -238,77 +167,6 @@ exports[`Stream toggles environment select all environments 1`] = `
         }
         searchId={null}
         sort="date"
-        tags={
-          Object {
-            "assigned": Object {
-              "key": "assigned",
-              "name": "Assigned To",
-              "predefined": true,
-              "values": Array [],
-            },
-            "bookmarks": Object {
-              "key": "bookmarks",
-              "name": "Bookmarked By",
-              "predefined": true,
-              "values": Array [],
-            },
-            "event.timestamp": Object {
-              "key": "event.timestamp",
-              "name": "Event Timestamp",
-              "predefined": true,
-              "values": Array [
-                "2017-01-02",
-                ">=2017-01-02T01:00:00",
-                "<2017-01-02T02:00:00",
-              ],
-            },
-            "firstSeen": Object {
-              "key": "firstSeen",
-              "name": "First Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "has": Object {
-              "key": "has",
-              "name": "Has Tag",
-              "predefined": true,
-              "values": Array [],
-            },
-            "is": Object {
-              "key": "is",
-              "name": "Status",
-              "predefined": true,
-              "values": Array [
-                "resolved",
-                "unresolved",
-                "ignored",
-                "muted",
-                "assigned",
-                "unassigned",
-              ],
-            },
-            "lastSeen": Object {
-              "key": "lastSeen",
-              "name": "Last Seen",
-              "predefined": true,
-              "values": Array [
-                "-1h",
-                "+1d",
-                "-1w",
-              ],
-            },
-            "timesSeen": Object {
-              "key": "timesSeen",
-              "name": "Times Seen",
-              "predefined": true,
-              "values": Array [],
-            },
-          }
-        }
       />
       <Sticky
         bottomOffset={0}
diff --git a/tests/js/spec/views/stream/stream.spec.jsx b/tests/js/spec/views/stream/stream.spec.jsx
index 7a12531682..e6fdca5c3c 100644
--- a/tests/js/spec/views/stream/stream.spec.jsx
+++ b/tests/js/spec/views/stream/stream.spec.jsx
@@ -10,6 +10,7 @@ import Stream from 'app/views/stream/stream';
 import EnvironmentStore from 'app/stores/environmentStore';
 import {setActiveEnvironment} from 'app/actionCreators/environments';
 import {browserHistory} from 'react-router';
+import StreamTagStore from 'app/stores/streamTagStore';
 
 jest.mock('app/stores/groupStore');
 
@@ -37,10 +38,6 @@ describe('Stream', function() {
       url: '/projects/123/456/searches/',
       body: [{id: '789', query: 'is:unresolved', name: 'test'}],
     });
-    MockApiClient.addMockResponse({
-      url: '/projects/123/456/tags/',
-      body: TestStubs.Tags(),
-    });
     MockApiClient.addMockResponse({
       url: '/projects/123/456/processingissues/',
       method: 'GET',
@@ -61,10 +58,14 @@ describe('Stream', function() {
       team: {id: '2448'},
     };
 
+    StreamTagStore.init();
+
     props = {
       setProjectNavSection: function() {},
       location: {query: {query: 'is:unresolved'}, search: 'query=is:unresolved'},
       params: {orgId: '123', projectId: '456'},
+      tags: StreamTagStore.getAllTags(),
+      tagsLoading: false,
     };
   });
 
@@ -440,9 +441,8 @@ describe('Stream', function() {
 
     it('handles no searchId or query', function() {
       let streamProps = {
-        setProjectNavSection: function() {},
+        ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
-        params: {orgId: '123', projectId: '456'},
       };
 
       let expected = {
@@ -470,7 +470,7 @@ describe('Stream', function() {
 
     it('handles valid searchId in routing params', function() {
       let streamProps = {
-        setProjectNavSection: function() {},
+        ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: '123', projectId: '456', searchId: '789'},
       };
@@ -504,7 +504,7 @@ describe('Stream', function() {
 
     it('handles invalid searchId in routing params', function() {
       let streamProps = {
-        setProjectNavSection: function() {},
+        ...props,
         location: {query: {sort: 'freq'}, search: 'sort=freq'},
         params: {orgId: '123', projectId: '456', searchId: '799'},
       };
