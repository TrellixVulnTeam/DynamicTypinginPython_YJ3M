commit 45362c27b7fdb29c838a1f7dc2984cdff890170b
Author: Chris Clark <christopherchristopherclark@gmail.com>
Date:   Thu Sep 5 12:18:10 2019 -0700

    feat(transactions): spanbar design tweaks (#14542)
    
    * basic situational placement using best guess
    
    * basic situational placement using best guess
    
    * improve to be able to handle up to ten digits
    
    * better layout and more appropriate ink to negative space ratio
    
    * add striping
    
    * fix hover states
    
    * increase hit target for divider while slimming it down visually
    
    * move divider to 60/40
    
    * replace more inline svgs with InlineSvg
    
    * improve toggler theming
    
    * remove a few lines of css and convert some stuff to theme
    
    * remove css ninja comment and add a normal border
    
    * remove accidentally re-added traceView
    
    * update snapshot
    
    * use fancy typescript noodles to bypass limitations of styled()
    
    * add more types and get rid of direct theme usage
    
    * getDurationPillAlignment
    
    * getTogglerTheme returns a string

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
index 92761b65da..6948c7d25f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/dividerHandlerManager.tsx
@@ -9,7 +9,7 @@ import {
 } from './utils';
 
 // divider handle is positioned at 50% width from the left-hand side
-const DEFAULT_DIVIDER_POSITION = 0.5;
+const DEFAULT_DIVIDER_POSITION = 0.4;
 
 const selectRefs = (
   refs: Array<React.RefObject<HTMLDivElement>>,
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
index 35035b08f9..f7b8df6357 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/spanBar.tsx
@@ -1,12 +1,15 @@
 import React from 'react';
 import styled from 'react-emotion';
 import {get} from 'lodash';
+import color from 'color';
 import 'intersection-observer'; // this is a polyfill
 
 import {t} from 'app/locale';
+import {defined} from 'app/utils';
 import space from 'app/styles/space';
 import Count from 'app/components/count';
 import Tooltip from 'app/components/tooltip';
+import InlineSvg from 'app/components/inlineSvg';
 
 import {
   toPercent,
@@ -137,6 +140,27 @@ const TOGGLE_BUTTON_MARGIN_RIGHT = 8;
 const TOGGLE_BUTTON_MAX_WIDTH = 40;
 const TOGGLE_BORDER_BOX = TOGGLE_BUTTON_MAX_WIDTH + TOGGLE_BUTTON_MARGIN_RIGHT;
 
+const getDurationDisplay = ({
+  width,
+  left,
+}: {
+  width: undefined | number;
+  left: undefined | number;
+}) => {
+  const spaceNeeded = 0.3;
+
+  if (left === undefined || width === undefined) {
+    return 'inset';
+  }
+  if (left + width < 1 - spaceNeeded) {
+    return 'right';
+  }
+  if (left > spaceNeeded) {
+    return 'left';
+  }
+  return 'inset';
+};
+
 type SpanBarProps = {
   trace: Readonly<ParsedTraceType>;
   span: Readonly<SpanType>;
@@ -183,8 +207,8 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
 
   getBounds = (): {
     warning: undefined | string;
-    left: undefined | string;
-    width: undefined | string;
+    left: undefined | number;
+    width: undefined | number;
     isSpanVisibleInView: boolean;
   } => {
     const {span, generateBounds} = this.props;
@@ -214,24 +238,24 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
       case 'TIMESTAMPS_EQUAL': {
         return {
           warning: t('The start and end timestamps are equal'),
-          left: toPercent(bounds.start),
-          width: `${bounds.width}px`,
+          left: bounds.start,
+          width: bounds.width,
           isSpanVisibleInView: bounds.isSpanVisibleInView,
         };
       }
       case 'TIMESTAMPS_REVERSED': {
         return {
           warning: t('The start and end timestamps are reversed'),
-          left: toPercent(bounds.start),
-          width: toPercent(bounds.end - bounds.start),
+          left: bounds.start,
+          width: bounds.end - bounds.start,
           isSpanVisibleInView: bounds.isSpanVisibleInView,
         };
       }
       case 'TIMESTAMPS_STABLE': {
         return {
           warning: void 0,
-          left: toPercent(bounds.start),
-          width: toPercent(bounds.end - bounds.start),
+          left: bounds.start,
+          width: bounds.end - bounds.start,
           isSpanVisibleInView: bounds.isSpanVisibleInView,
         };
       }
@@ -245,7 +269,8 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   renderSpanTreeToggler = ({left}: {left: number}) => {
     const {numOfSpanChildren} = this.props;
 
-    const chevron = this.props.showSpanTree ? <ChevronOpen /> : <ChevronClosed />;
+    const chevronSrc = this.props.showSpanTree ? 'icon-chevron-up' : 'icon-chevron-down';
+    const chevron = <Chevron src={chevronSrc} />;
 
     if (numOfSpanChildren <= 0) {
       return <SpanTreeTogglerContainer style={{left: `${left}px`}} />;
@@ -531,7 +556,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
           left: toPercent(dividerPosition),
           display: 'none',
         }}
-        hovering={true}
         onClick={event => {
           // the ghost divider line should not be interactive.
           // we prevent the propagation of the clicks from this component to prevent
@@ -549,7 +573,6 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
           style={{
             left: toPercent(dividerPosition),
           }}
-          hovering={false}
           onMouseEnter={() => {
             dividerHandlerChildrenProps.setHover(true);
           }}
@@ -576,20 +599,16 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     }
 
     return (
-      <WarningTextWrapper>
-        <Tooltip title={warningText}>
-          <span style={{marginLeft: '8px', lineHeight: 0, height: '15px'}}>
-            <WarningIcon />
-          </span>
-        </Tooltip>
-      </WarningTextWrapper>
+      <Tooltip title={warningText}>
+        <WarningIcon src="icon-circle-exclamation" />
+      </Tooltip>
     );
   };
 
   renderHeader = (
     dividerHandlerChildrenProps: DividerHandlerManager.DividerHandlerManagerChildrenProps
   ) => {
-    const {span, spanBarColour} = this.props;
+    const {span, spanBarColour, spanNumber} = this.props;
 
     const startTimestamp: number = span.start_timestamp;
     const endTimestamp: number = span.timestamp;
@@ -602,39 +621,43 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
 
     const {dividerPosition} = dividerHandlerChildrenProps;
 
-    const displaySpanBar = bounds.left && bounds.width;
+    const displaySpanBar = defined(bounds.left) && defined(bounds.width);
+
+    const durationDisplay = getDurationDisplay(bounds);
 
     return (
       <SpanRowCellContainer>
         <SpanRowCell
+          showDetail={this.state.showDetail}
           style={{
             left: 0,
             width: toPercent(dividerPosition),
-            backgroundColor: this.state.showDetail ? '#F0ECF3' : void 0,
           }}
         >
           {this.renderTitle()}
         </SpanRowCell>
         <SpanRowCell
+          showDetail={this.state.showDetail}
+          showStriping={spanNumber % 2 !== 0}
           style={{
             left: toPercent(dividerPosition),
             width: toPercent(1 - dividerPosition),
-            backgroundColor: this.state.showDetail ? '#F0ECF3' : void 0,
           }}
         >
           {displaySpanBar && (
             <SpanBarRectangle
               style={{
                 backgroundColor: spanBarColour,
-                left: bounds.left,
-                width: bounds.width,
+                left: toPercent(bounds.left || 0),
+                width: toPercent(bounds.width || 0),
               }}
-            />
+            >
+              <DurationPill durationDisplay={durationDisplay}>
+                {durationString}
+                {this.renderWarningText({warningText: bounds.warning})}
+              </DurationPill>
+            </SpanBarRectangle>
           )}
-          <Duration>
-            <DurationPill>{durationString}</DurationPill>
-          </Duration>
-          {this.renderWarningText({warningText: bounds.warning})}
           {this.renderCursorGuide()}
         </SpanRowCell>
         {this.renderDivider(dividerHandlerChildrenProps)}
@@ -650,12 +673,8 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
     return (
       <SpanRow
         innerRef={this.spanRowDOMRef}
-        style={{
-          display: isSpanVisibleInView ? 'block' : 'none',
-
-          // TODO: this is a border-top; this needs polishing from a real CSS ninja
-          boxShadow: this.state.showDetail ? '0 -1px 0 #d1cad8' : void 0,
-        }}
+        visible={isSpanVisibleInView}
+        showBorder={this.state.showDetail}
         onClick={() => {
           this.toggleDisplayDetail();
         }}
@@ -673,17 +692,54 @@ class SpanBar extends React.Component<SpanBarProps, SpanBarState> {
   }
 }
 
-const SpanRowCellContainer = styled('div')`
-  position: relative;
-  height: ${SPAN_ROW_HEIGHT}px;
-`;
+const getBackgroundColor = ({
+  showStriping,
+  showDetail,
+  theme,
+}: {
+  showStriping?: boolean;
+  showDetail?: boolean;
+  theme: any;
+}) => {
+  if (!theme) {
+    return 'white';
+  }
+
+  if (showDetail) {
+    return theme.offWhite2;
+  }
+  return showStriping ? theme.offWhite : 'white';
+};
+
+type SpanRowCellProps = {
+  showStriping?: boolean;
+  showDetail?: boolean;
+};
 
-const SpanRowCell = styled('div')`
+type SpanRowCellAndDivProps = Omit<
+  React.HTMLProps<HTMLDivElement>,
+  keyof SpanRowCellProps
+> &
+  SpanRowCellProps;
+
+const SpanRowCell = styled('div')<SpanRowCellAndDivProps>`
   position: absolute;
+  padding: ${space(0.5)} 0;
+  height: 100%;
+  overflow: hidden;
+  background-color: ${p => getBackgroundColor(p)};
+`;
 
+const SpanRowCellContainer = styled('div')`
+  position: relative;
   height: ${SPAN_ROW_HEIGHT}px;
 
-  overflow: hidden;
+  &:hover ${SpanRowCell} {
+    background-color: ${p =>
+      color(p.theme.offWhite2)
+        .alpha(0.4)
+        .string()};
+  }
 `;
 
 const CursorGuide = styled('div')`
@@ -694,244 +750,156 @@ const CursorGuide = styled('div')`
 
   transform: translateX(-50%);
 
-  height: ${SPAN_ROW_HEIGHT}px;
+  height: 100%;
 `;
 
 export const DividerLine = styled('div')`
   position: absolute;
-  height: ${SPAN_ROW_HEIGHT}px;
-
+  height: 100%;
+  width: 1px;
   transform: translateX(-50%);
 
+  /* increase hit target */
+  border-width: 0 5px;
+  border-color: rgba(0, 0, 0, 0);
+  border-style: solid;
+  box-sizing: content-box;
+  background-clip: content-box;
+
   background-color: #cdc7d5;
   z-index: ${zIndex.dividerLine};
 
   &.hovering {
-    width: 4px !important;
+    width: 3px;
     cursor: col-resize;
   }
-
-  ${({hovering}: {hovering: boolean}) => {
-    if (!hovering) {
-      return 'width: 2px;';
-    }
-
-    return `
-      width: 4px;
-      cursor: col-resize;
-      `;
-  }};
 `;
 
 const SpanBarTitleContainer = styled('div')`
   display: flex;
   align-items: center;
-
-  height: ${SPAN_ROW_HEIGHT}px;
+  height: 100%;
   position: absolute;
   left: 0;
   top: 0;
   width: 100%;
+  user-select: none;
 `;
 
 const SpanBarTitle = styled('div')`
   position: relative;
-  top: 0;
-
-  height: ${SPAN_ROW_HEIGHT}px;
-  line-height: ${SPAN_ROW_HEIGHT}px;
-
-  color: #4a3e56;
-  font-size: 12px;
-
-  user-select: none;
-
+  height: 100%;
+  color: ${p => p.theme.gray4};
+  font-size: ${p => p.theme.fontSizeSmall};
   white-space: nowrap;
-
   display: flex;
+  flex: 1;
   align-items: center;
 `;
 
 const SpanTreeTogglerContainer = styled('div')`
   position: relative;
-  top: 0;
-
   height: 15px;
-
-  max-width: 40px;
   width: 40px;
-  min-width: 40px;
-
-  margin-right: 8px;
-
+  min-width: 40px; /* annoying flex thing */
+  margin-right: ${space(1)};
   z-index: ${zIndex.spanTreeToggler};
-
-  user-select: none;
-
   display: flex;
   justify-content: flex-end;
 `;
 
-const SpanTreeToggler = styled('div')`
-  position: relative;
+const getTogglerTheme = ({isExpanded, theme}) => {
+  const buttonTheme = isExpanded ? theme.button.default : theme.button.primary;
+  const activeButtonTheme = isExpanded ? theme.button.primary : theme.button.default;
 
-  white-space: nowrap;
+  return `
+    background: ${buttonTheme.background};
+    border: 1px solid ${buttonTheme.border};
+    color: ${buttonTheme.color};
 
-  height: 15px;
-  min-width: 25px;
+    &:hover {
+      background: ${activeButtonTheme.background};
+      border: 1px solid ${activeButtonTheme.border};
+      color: ${activeButtonTheme.color};
+    }
+  `;
+};
 
-  padding-left: 4px;
-  padding-right: 4px;
+type SpanTreeTogglerProps = {
+  isExpanded: boolean;
+};
+
+type SpanTreeTogglerAndDivProps = Omit<
+  React.HTMLProps<HTMLDivElement>,
+  keyof SpanTreeTogglerProps
+> &
+  SpanTreeTogglerProps;
 
+const SpanTreeToggler = styled('div')<SpanTreeTogglerAndDivProps>`
+  white-space: nowrap;
+  height: 15px;
+  min-width: 25px;
+  padding: 0 4px;
   display: flex;
-  flex-wrap: nowrap;
   align-items: center;
-  align-content: center;
   justify-content: center;
-
-  > span {
-    flex-grow: 999;
-  }
-
+  border-radius: 99px;
   transition: all 0.15s ease-in-out;
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  line-height: 0;
 
-  border-radius: 99px;
+  ${p => getTogglerTheme(p)}
+`;
 
-  ${({isExpanded}: {isExpanded: boolean}) => {
-    if (!isExpanded) {
+const getDurationPillAlignment = ({durationDisplay}) => {
+  switch (durationDisplay) {
+    case 'left':
+      return `right: calc(100% + ${space(0.5)});`;
+    case 'right':
+      return `left: calc(100% + ${space(0.75)});`;
+    default:
       return `
-      background: #6e5f7d;
-      border: 1px solid #452650;
-      color: #ffffff;
-      & svg path {
-        stroke: #ffffff;
-      }
-
-      &:hover {
-        background: #fbfaf9;
-        border: 1px solid #6e5f7d;
-        color: #6e5f7d;
-        & svg path {
-          stroke: #452650;
-        }
-      }
+        right: ${space(0.75)};
+        color: #fff;
       `;
-    }
-
-    return `
-      background: #fbfaf9;
-      border: 1px solid #6e5f7d;
-      color: #6e5f7d;
-
-      &:hover {
-        background: #6e5f7d;
-        border: 1px solid #452650;
-        color: #ffffff;
-        & svg path {
-          stroke: #ffffff;
-        }
-      }
-    `;
-  }};
-
-  font-size: 9px;
-  line-height: 0;
-`;
+  }
+};
 
-const Duration = styled('div')`
+const DurationPill = styled('div')`
   position: absolute;
-  right: 0;
-  top: 0;
-  height: ${SPAN_ROW_HEIGHT}px;
-  line-height: ${SPAN_ROW_HEIGHT}px;
-
-  color: #9585a3;
-  font-size: 12px;
-  padding-right: ${space(1)};
-
-  user-select: none;
 
+  color: ${p => p.theme.gray2};
+  font-size: ${p => p.theme.fontSizeExtraSmall};
+  white-space: nowrap;
   display: flex;
   align-items: center;
-`;
-
-const DurationPill = styled('div')`
-  height: ${SPAN_ROW_HEIGHT - 10}px;
-  line-height: ${SPAN_ROW_HEIGHT - 10}px;
-
-  border-radius: 99px;
+  top: 50%;
+  transform: translateY(-50%);
 
-  padding-left: 10px;
-  padding-right: 10px;
+  ${getDurationPillAlignment}
 
-  background-color: rgba(255, 255, 255, 0.6);
+  @media (max-width: ${p => p.theme.breakpoints[1]}) {
+    font-size: 10px;
+  }
 `;
 
 const SpanBarRectangle = styled('div')`
   position: relative;
-  min-height: ${SPAN_ROW_HEIGHT - 4}px;
-  height: ${SPAN_ROW_HEIGHT - 4}px;
-  max-height: ${SPAN_ROW_HEIGHT - 4}px;
+  height: 100%;
 
   min-width: 1px;
-
-  margin-top: 2px;
-  margin-bottom: 2px;
-  border-radius: 3px;
-
-  overflow: hidden;
-
   user-select: none;
 
   transition: border-color 0.15s ease-in-out;
-  border: 1px solid rgba(0, 0, 0, 0);
+  border-right: 1px solid rgba(0, 0, 0, 0);
 `;
 
-const ChevronOpen = props => (
-  <svg width={5} height={4} fill="none" {...props}>
-    <path
-      d="M.5 1.25l2 2 2-2"
-      stroke="#6E5F7D"
-      strokeWidth={0.75}
-      strokeLinecap="round"
-      strokeLinejoin="round"
-    />
-  </svg>
-);
-
-const ChevronClosed = props => (
-  <svg width={3} height={6} fill="none" {...props}>
-    <path
-      d="M.5 5.25l2-2-2-2"
-      stroke="#6E5F7D"
-      strokeWidth={0.75}
-      strokeLinecap="round"
-      strokeLinejoin="round"
-    />
-  </svg>
-);
-
-const WarningIcon = props => (
-  <svg width={15} height={15} fill="none" {...props}>
-    <path
-      fillRule="evenodd"
-      clipRule="evenodd"
-      d="M7.012 4.463v3.825a.638.638 0 001.275 0V4.463a.637.637 0 10-1.275 0zM7.65 10.2a.637.637 0 100 1.275.637.637 0 000-1.275z"
-      fill="#493A05"
-    />
-    <rect x={0.5} y={0.5} width={14} height={14} rx={7} stroke="#493A05" />
-  </svg>
-);
-
-const WarningTextWrapper = styled('div')`
-  height: ${SPAN_ROW_HEIGHT}px;
-
-  position: absolute;
-  left: 0;
-  top: 0;
+const WarningIcon = styled(InlineSvg)`
+  margin-left: ${space(0.25)};
+`;
 
-  display: flex;
-  align-items: center;
+const Chevron = styled(InlineSvg)`
+  width: 7px;
 `;
 
 export default SpanBar;
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
index f82acdf3f4..1ffc1f5b29 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/styles.tsx
@@ -10,7 +10,17 @@ export const zIndex = {
 
 export const SPAN_ROW_HEIGHT = 25;
 
-export const SpanRow = styled('div')`
+type SpanRowProps = {
+  visible?: boolean;
+  showBorder?: boolean;
+};
+
+type SpanRowAndDivProps = Omit<React.HTMLProps<HTMLDivElement>, keyof SpanRowProps> &
+  SpanRowProps;
+
+export const SpanRow = styled.div<SpanRowAndDivProps>`
+  display: ${p => (p.visible ? 'block' : 'none')};
+  border-top: ${p => (p.showBorder ? `1px solid  ${p.theme.gray1}` : null)};
   position: relative;
   overflow: hidden;
 
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
index 9a076dcbf5..97e8b9541f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/spans/utils.tsx
@@ -233,7 +233,7 @@ export const getHumanDuration = (duration: number): string => {
   // note: duration is assumed to be in seconds
 
   const durationMS = duration * 1000;
-  return `${durationMS.toFixed(3)} ms`;
+  return `${durationMS.toFixed(2)}ms`;
 };
 
 const COLORS = [
diff --git a/src/sentry/static/sentry/app/styles/space.tsx b/src/sentry/static/sentry/app/styles/space.tsx
index 08d71bb5f4..c5cc23d54c 100644
--- a/src/sentry/static/sentry/app/styles/space.tsx
+++ b/src/sentry/static/sentry/app/styles/space.tsx
@@ -8,6 +8,8 @@ const space = (size: number): string => {
       return '2px';
     case 0.5:
       return '4px';
+    case 0.75:
+      return '6px';
     case 1:
       return '8px';
     case 1.5:
diff --git a/src/sentry/static/sentry/app/utils/theme.tsx b/src/sentry/static/sentry/app/utils/theme.tsx
index 23841ff90e..9939b68244 100644
--- a/src/sentry/static/sentry/app/utils/theme.tsx
+++ b/src/sentry/static/sentry/app/utils/theme.tsx
@@ -218,6 +218,7 @@ const theme = {
   },
 
   grid: 8,
+  fontSizeExtraSmall: '11px',
   fontSizeSmall: '12px',
   fontSizeMedium: '14px',
   fontSizeLarge: '16px',
diff --git a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
index 810cdb4fc9..49881d24a4 100644
--- a/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
+++ b/tests/js/spec/views/settings/organizationIntegrations/__snapshots__/sentryAppInstallations.spec.jsx.snap
@@ -178,12 +178,12 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                               status="Not Installed"
                             >
                               <WithTheme(Component)
-                                className="css-lk5f1o-Status eac2pqx8"
+                                className="css-1uxco7x-Status eac2pqx8"
                                 isInternal={false}
                                 status="Not Installed"
                               >
                                 <Component
-                                  className="css-lk5f1o-Status eac2pqx8"
+                                  className="css-1uxco7x-Status eac2pqx8"
                                   isInternal={false}
                                   status="Not Installed"
                                   theme={
@@ -329,6 +329,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                       "dropShadowLightest": "0 1px 2px rgba(0, 0, 0, 0.04)",
                                       "error": "#e03e2f",
                                       "fontSizeExtraLarge": "18px",
+                                      "fontSizeExtraSmall": "11px",
                                       "fontSizeLarge": "16px",
                                       "fontSizeMedium": "14px",
                                       "fontSizeSmall": "12px",
@@ -457,7 +458,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                           />
                                         </CircleIndicator>
                                         <div
-                                          className="css-lk5f1o-Status eac2pqx8"
+                                          className="css-1uxco7x-Status eac2pqx8"
                                           theme={
                                             Object {
                                               "alert": Object {
@@ -601,6 +602,7 @@ exports[`Sentry App Installations when Apps exist displays all Apps owned by the
                                               "dropShadowLightest": "0 1px 2px rgba(0, 0, 0, 0.04)",
                                               "error": "#e03e2f",
                                               "fontSizeExtraLarge": "18px",
+                                              "fontSizeExtraSmall": "11px",
                                               "fontSizeLarge": "16px",
                                               "fontSizeMedium": "14px",
                                               "fontSizeSmall": "12px",
