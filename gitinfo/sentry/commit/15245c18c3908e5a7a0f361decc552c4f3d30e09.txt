commit 15245c18c3908e5a7a0f361decc552c4f3d30e09
Author: Brett Hoerner <brett@bretthoerner.com>
Date:   Mon Feb 5 09:22:35 2018 -0600

    fix: Remove recursive calls from Stacktrace hash calculation (#7123)

diff --git a/src/sentry/interfaces/stacktrace.py b/src/sentry/interfaces/stacktrace.py
index ff54bd1a1e..c3d72f408a 100644
--- a/src/sentry/interfaces/stacktrace.py
+++ b/src/sentry/interfaces/stacktrace.py
@@ -44,6 +44,18 @@ _java_enhancer_re = re.compile(r'''
 # Clojure anon functions are compiled down to myapp.mymodule$fn__12345
 _clojure_enhancer_re = re.compile(r'''(\$fn__)\d+''', re.X)
 
+# fields that need to be the same between frames for them to be considered
+# recursive calls
+RECURSION_COMPARISON_FIELDS = [
+    'abs_path',
+    'package',
+    'module',
+    'filename',
+    'function',
+    'lineno',
+    'colno',
+]
+
 
 def max_addr(cur, addr):
     if addr is None:
@@ -252,6 +264,15 @@ def handle_nan(value):
     return value
 
 
+def is_recursion(frame1, frame2):
+    "Returns a boolean indicating whether frames are recursive calls."
+    for field in RECURSION_COMPARISON_FIELDS:
+        if getattr(frame1, field, None) != getattr(frame2, field, None):
+            return False
+
+    return True
+
+
 class Frame(Interface):
 
     path = 'frame'
@@ -750,9 +771,20 @@ class Stacktrace(Interface):
             if len(frames) / float(total_frames) < 0.10:
                 return []
 
+        if not frames:
+            return []
+
         output = []
-        for frame in frames:
-            output.extend(frame.get_hash(platform))
+
+        # stacktraces that only differ by the number of recursive calls should
+        # hash the same, so we squash recursive calls by comparing each frame
+        # to the previous frame
+        output.extend(frames[0].get_hash(platform))
+        prev_frame = frames[0]
+        for frame in frames[1:]:
+            if not is_recursion(frame, prev_frame):
+                output.extend(frame.get_hash(platform))
+            prev_frame = frame
         return output
 
     def to_string(self, event, is_public=False, **kwargs):
diff --git a/tests/sentry/interfaces/test_stacktrace.py b/tests/sentry/interfaces/test_stacktrace.py
index b16c21adf6..4bc1ad0e6e 100644
--- a/tests/sentry/interfaces/test_stacktrace.py
+++ b/tests/sentry/interfaces/test_stacktrace.py
@@ -500,6 +500,81 @@ class StacktraceTest(TestCase):
         result = interface.get_hash()
         assert result == []
 
+    def test_collapse_recursion(self):
+        interface = Stacktrace.to_python(
+            {
+                'frames': [
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'main',
+                        'in_app': False,
+                        'lineno': 13,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'normalFunc',
+                        'in_app': False,
+                        'lineno': 20,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'recurFunc',
+                        'in_app': False,
+                        'lineno': 27,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'recurFunc',
+                        'in_app': False,
+                        'lineno': 27,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'recurFunc',
+                        'in_app': False,
+                        'lineno': 27,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'recurFunc',
+                        'in_app': False,
+                        'lineno': 25,
+                        'module': 'io.sentry.example.Application'
+                    },
+                    {
+                        'abs_path': 'Application.java',
+                        'filename': 'Application.java',
+                        'function': 'throwError',
+                        'in_app': False,
+                        'lineno': 32,
+                        'module': 'io.sentry.example.Application'
+                    }
+                ]
+            }
+        )
+        result = interface.get_hash()
+        self.assertEquals(result, [
+            'io.sentry.example.Application', 'main',
+            'io.sentry.example.Application', 'normalFunc',
+            # first call to recursive function
+            'io.sentry.example.Application', 'recurFunc',
+            # (exact) recursive frames omitted here
+            # call from *different location* in recursive function
+            'io.sentry.example.Application', 'recurFunc',
+            'io.sentry.example.Application', 'throwError'
+        ])
+
     def test_get_hash_ignores_safari_native_code(self):
         interface = Frame.to_python(
             {
