commit b212b1386666bcf9e1ca97f9ced3a273d9e6c3b7
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Sep 29 15:17:31 2015 -0700

    Improve link flow to support unauthenticated pre-existing users

diff --git a/src/sentry/templates/sentry/auth-link-login.html b/src/sentry/templates/sentry/auth-link-login.html
new file mode 100644
index 0000000000..4c054eb48d
--- /dev/null
+++ b/src/sentry/templates/sentry/auth-link-login.html
@@ -0,0 +1,33 @@
+{% extends "sentry/bases/auth.html" %}
+
+{% load crispy_forms_tags %}
+{% load i18n %}
+
+{% block title %}{% trans "Login" %} | {{ block.super }}{% endblock %}
+
+{% block content %}
+  <div class="align-center">
+    <img src="{% url 'sentry-media' "sentry" "images/default-organization-logo.png" %}" class="org-avatar">
+
+    <h3>{{ organization.name }}</h3>
+  </div>
+
+  <form class="form-stacked" action="" method="post" autocomplete="off">
+    {% csrf_token %}
+
+    <div class="align-center">
+      <p>Login with your existing Sentry account to continue.</p>
+      <p><small>Don't have an account? <a href="{% url 'sentry-auth-organization' organization.slug %}">Skip this step</a>.</small></p>
+    </div>
+
+    {{ form|as_crispy_errors }}
+
+    {% for field in form %}
+      {{ field|as_crispy_field }}
+    {% endfor %}
+
+    <fieldset class="form-actions">
+      <button type="submit" class="btn btn-primary">{% trans "Login" %}</button> <a class="pull-right" style="margin-top: 9px" href="{% url 'sentry-account-recover' %}">{% trans "Lost your password?" %}</a>
+    </fieldset>
+  </form>
+{% endblock %}
diff --git a/src/sentry/templates/sentry/organization-login.html b/src/sentry/templates/sentry/organization-login.html
index 0c626cbda6..fb5bf45ac2 100644
--- a/src/sentry/templates/sentry/organization-login.html
+++ b/src/sentry/templates/sentry/organization-login.html
@@ -16,9 +16,11 @@
     <div class="align-center">
       <p>Sign in with your {{ provider_name }} account to continue.</p>
 
-      <button type="submit" class="btn btn-default btn-login-{{ provider_key }}">
+      <p><button type="submit" class="btn btn-default btn-login-{{ provider_key }}">
         <span class="provider-logo {{ provider_name | lower}}"></span> Login with {{ provider_name }}
-      </button>
+      </button></p>
+
+      <p><small>Have an existing account? <a href="{% url 'sentry-auth-link-identity' organization.slug %}">Login with your password</a> to link your identity.</small></p>
     </div>
   {% else %}
     <ul class="nav nav-tabs auth-toggle">
diff --git a/src/sentry/web/frontend/auth_link_identity.py b/src/sentry/web/frontend/auth_link_identity.py
index 5e276a2ad9..352652d3dd 100644
--- a/src/sentry/web/frontend/auth_link_identity.py
+++ b/src/sentry/web/frontend/auth_link_identity.py
@@ -1,19 +1,27 @@
 from __future__ import absolute_import, print_function
 
 from django.contrib import messages
+from django.contrib.auth import login
 from django.core.urlresolvers import reverse
 from django.utils.translation import ugettext_lazy as _
 
 from sentry.auth.helper import AuthHelper
 from sentry.models import AuthProvider, Organization, OrganizationMember
+from sentry.web.forms.accounts import AuthenticationForm
 from sentry.web.frontend.base import BaseView
 
 ERR_LINK_INVALID = _('Either you are not a member of the given organization or it does not exist.')
 
 
 class AuthLinkIdentityView(BaseView):
-    # TODO(dcramer): ideally we could show a login form here if they were auth'd
-    # as an invalid account
+    auth_required = False
+
+    def get_login_form(self, request):
+        return AuthenticationForm(
+            request, request.POST or None,
+            captcha=bool(request.session.get('needs_captcha')),
+        )
+
     def handle(self, request, organization_slug):
         try:
             organization = Organization.objects.get(
@@ -27,28 +35,62 @@ class AuthLinkIdentityView(BaseView):
             return self.redirect(reverse('sentry'))
 
         try:
-            om = OrganizationMember.objects.get(
-                organization=organization,
-                user=request.user,
+            auth_provider = AuthProvider.objects.get(
+                organization=organization
             )
-        except OrganizationMember.DoesNotExist:
+        except AuthProvider.DoesNotExist:
             messages.add_message(
                 request, messages.ERROR,
                 ERR_LINK_INVALID,
             )
-            return self.redirect(reverse('sentry'))
+            return self.redirect(reverse('sentry-organization-home',
+                                         args=[organization.slug]))
+        request.session.set_test_cookie()
+
+        if request.user.is_authenticated():
+            return self.handle_authed(request, organization, auth_provider)
+        return self.handle_anon(request, organization, auth_provider)
+
+    def handle_anon(self, request, organization, auth_provider):
+        """
+        Allow the user to authenticate and then link there account.
+
+        This functions differently than the standard login flow as we *always*
+        allow them to try a username/password, whereas the default flow would
+        force the standard organization login.
+        """
+        form = self.get_login_form(request)
+
+        if form.is_valid():
+            login(request, form.get_user())
+
+            request.session.pop('needs_captcha', None)
 
+            return self.handle_authed(request, organization, auth_provider)
+
+        elif request.POST and not request.session.get('needs_captcha'):
+            request.session['needs_captcha'] = 1
+            form = self.get_login_form(request)
+            form.errors.pop('captcha', None)
+
+        context = {
+            'form': form,
+            'organization': organization,
+        }
+        return self.respond('sentry/auth-link-login.html', context)
+
+    def handle_authed(self, request, organization, auth_provider):
         try:
-            auth_provider = AuthProvider.objects.get(
-                organization=organization
+            om = OrganizationMember.objects.get(
+                organization=organization,
+                user=request.user,
             )
-        except AuthProvider.DoesNotExist:
+        except OrganizationMember.DoesNotExist:
             messages.add_message(
                 request, messages.ERROR,
                 ERR_LINK_INVALID,
             )
-            return self.redirect(reverse('sentry-organization-home',
-                                         args=[organization.slug]))
+            return self.redirect(reverse('sentry'))
 
         if request.method == 'POST':
             helper = AuthHelper(
