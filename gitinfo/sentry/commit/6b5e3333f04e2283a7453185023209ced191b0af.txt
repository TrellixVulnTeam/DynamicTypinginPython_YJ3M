commit 6b5e3333f04e2283a7453185023209ced191b0af
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Apr 22 21:26:24 2013 -0700

    Correct how tags are handled in the API

diff --git a/src/sentry/manager.py b/src/sentry/manager.py
index e895907aa9..bc38557113 100644
--- a/src/sentry/manager.py
+++ b/src/sentry/manager.py
@@ -41,11 +41,13 @@ from sentry.utils.cache import cache, memoize, Lock
 from sentry.utils.dates import get_sql_date_trunc, normalize_datetime
 from sentry.utils.db import get_db_engine, has_charts, attach_foreignkey
 from sentry.utils.models import create_or_update, make_key
+from sentry.utils.safe import safe_execute
 
 logger = logging.getLogger('sentry.errors')
 
 UNSAVED = dict()
 MAX_TAG_LENGTH = 200
+LOG_LEVELS_DICT = dict(settings.LOG_LEVELS)
 
 
 def get_checksum_from_event(event):
@@ -390,19 +392,11 @@ class GroupManager(BaseManager, ChartMixin):
 
     def normalize_event_data(self, data):
         # First we pull out our top-level (non-data attr) kwargs
-        if not data.get('level'):
+        if not data.get('level') or data['level'] not in LOG_LEVELS_DICT:
             data['level'] = logging.ERROR
         if not data.get('logger'):
             data['logger'] = settings.DEFAULT_LOGGER_NAME
 
-        tags = data.get('tags')
-        if not tags:
-            tags = []
-        # full support for dict syntax
-        elif isinstance(tags, dict):
-            tags = tags.items()
-        data['tags'] = tags
-
         timestamp = data.get('timestamp')
         if not timestamp:
             timestamp = timezone.now()
@@ -429,6 +423,17 @@ class GroupManager(BaseManager, ChartMixin):
         data.setdefault('checksum', None)
         data.setdefault('platform', None)
 
+        tags = data.get('tags')
+        if not tags:
+            tags = []
+        # full support for dict syntax
+        elif isinstance(tags, dict):
+            tags = tags.items()
+        else:
+            tags = list(tags)
+
+        data['tags'] = tags
+
         if 'sentry.interfaces.Exception' in data:
             if 'values' not in data['sentry.interfaces.Exception']:
                 data['sentry.interfaces.Exception'] = {'values': [data['sentry.interfaces.Exception']]}
@@ -452,7 +457,7 @@ class GroupManager(BaseManager, ChartMixin):
 
         # TODO: culprit should default to "most recent" frame in stacktraces when
         # it's not provided.
-
+        from sentry.plugins import plugins
         from sentry.models import Event, Project, EventMapping
 
         project = Project.objects.get_from_cache(pk=project)
@@ -503,6 +508,20 @@ class GroupManager(BaseManager, ChartMixin):
             'time_spent_count': time_spent and 1 or 0,
         })
 
+        tags = data['tags']
+        tags.append(('level', LOG_LEVELS_DICT[level]))
+        if logger:
+            tags.append(('logger', logger_name))
+        if server_name:
+            tags.append(('server_name', server_name))
+        if site:
+            tags.append(('site', site))
+
+        for plugin in plugins.all():
+            added_tags = safe_execute(plugin.get_tags, event)
+            if added_tags:
+                tags.extend(added_tags)
+
         try:
             group, is_new, is_sample = self._create_group(
                 event=event,
@@ -649,16 +668,6 @@ class GroupManager(BaseManager, ChartMixin):
             'date': normalized_datetime,
         })
 
-        if not tags:
-            tags = []
-        else:
-            tags = list(tags)
-
-        tags += [
-            ('logger', event.logger),
-            ('level', event.get_level_display()),
-        ]
-
         user_ident = event.user_ident
         if user_ident:
             self.record_affected_user(group, user_ident, event.data.get('sentry.interfaces.User'))
diff --git a/src/sentry/plugins/base.py b/src/sentry/plugins/base.py
index 2307191847..2839a3c26b 100644
--- a/src/sentry/plugins/base.py
+++ b/src/sentry/plugins/base.py
@@ -487,6 +487,16 @@ class IPlugin(local):
         >>>     print group.get_absolute_url()
         """
 
+    def get_tags(self, event, **kwargs):
+        """
+        Return additional tags to add to this instance.
+
+        Tags should be a list of tuples.
+
+        >>> def get_tags(self, event, **kwargs):
+        >>>     return [('tag-name', 'tag-value')]
+        """
+
     def get_filters(self, project=None, **kwargs):
         """
         Provides additional filters to the builtins.
diff --git a/src/sentry/plugins/bases/tag.py b/src/sentry/plugins/bases/tag.py
index 240074fd0d..5ab2291b5c 100644
--- a/src/sentry/plugins/bases/tag.py
+++ b/src/sentry/plugins/bases/tag.py
@@ -14,7 +14,7 @@ class TagPlugin(Plugin):
     tag_label = None
     project_default_enabled = True
 
-    def get_tag_values(self, event):
+    def get_tag_values(self, event, **kwargs):
         """
         Must return a list of values.
 
@@ -23,5 +23,10 @@ class TagPlugin(Plugin):
         """
         raise NotImplementedError
 
+    def get_tags(self, event, **kwargs):
+        return [(self.tag, v) for v in self.get_tag_values(event)]
+
     def post_process(self, group, event, is_new, is_sample, **kwargs):
-        Group.objects.add_tags(group, [(self.tag, v) for v in self.get_tag_values(event)])
+        # legacy compatibility for older plugins
+        if not hasattr(Plugin, 'get_tags'):
+            Group.objects.add_tags(group, self.get_tags(event))
diff --git a/tests/sentry/manager/tests.py b/tests/sentry/manager/tests.py
index 90918eee6a..14fac9eb27 100644
--- a/tests/sentry/manager/tests.py
+++ b/tests/sentry/manager/tests.py
@@ -171,14 +171,14 @@ class SentryManagerTest(TestCase):
     def test_tags_as_list(self, add_tags):
         event = Group.objects.from_kwargs(1, message='foo', tags=[('foo', 'bar')])
         group = event.group
-        add_tags.assert_called_once_with(group, [('foo', 'bar'), ('logger', 'root'), ('level', 'error')])
+        add_tags.assert_called_once_with(group, [('foo', 'bar'), ('level', 'error'), ('logger', 'root')])
 
     @mock.patch('sentry.manager.send_group_processors', mock.Mock())
     @mock.patch('sentry.manager.GroupManager.add_tags')
     def test_tags_as_dict(self, add_tags):
         event = Group.objects.from_kwargs(1, message='foo', tags={'foo': 'bar'})
         group = event.group
-        add_tags.assert_called_once_with(group, [('foo', 'bar'), ('logger', 'root'), ('level', 'error')])
+        add_tags.assert_called_once_with(group, [('foo', 'bar'), ('level', 'error'), ('logger', 'root')])
 
     @mock.patch('sentry.manager.send_group_processors', mock.Mock())
     def test_platform_is_saved(self):
