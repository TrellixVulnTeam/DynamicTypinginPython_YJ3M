commit d98b62b89f52b64eedb7120b08dc4e33de4d3a4a
Author: Markus Unterwaditzer <markus@unterwaditzer.net>
Date:   Thu Jan 24 14:35:10 2019 +0100

    test: Fix some tests when running with rust normalizer (#11683)
    
    * test: Fix some tests when running with rust normalizer
    
    * fix: Fix more tests in test_validate_data
    
    * fix: Fix CSP reports
    
    * fix: Fix some test_event_manager tests
    
    * fix: Revert changes to hpkp/ct report processing
    
    * fix: Fix bug in api event serializer

diff --git a/src/sentry/api/serializers/models/event.py b/src/sentry/api/serializers/models/event.py
index 7680a4fd47..00df74937b 100644
--- a/src/sentry/api/serializers/models/event.py
+++ b/src/sentry/api/serializers/models/event.py
@@ -93,7 +93,7 @@ class EventSerializer(Serializer):
                 'key': k.split('sentry:', 1)[-1],
                 'value': v,
                 '_meta': meta.get(k) or get_path(meta, six.text_type(i), '1') or None,
-            } for i, (k, v) in enumerate(event.data.get('tags') or ())],
+            } for i, (k, v) in enumerate(event.get_tags(sorted=False) or ())],
             key=lambda x: x['key']
         )
 
diff --git a/src/sentry/interfaces/security.py b/src/sentry/interfaces/security.py
index 35512e1c8b..bba8bc6a03 100644
--- a/src/sentry/interfaces/security.py
+++ b/src/sentry/interfaces/security.py
@@ -185,7 +185,8 @@ class Hpkp(SecurityReport):
         ]
 
     def get_origin(self):
-        return self.hostname  # not quite origin, but the domain that failed pinning
+        # not quite origin, but the domain that failed pinning
+        return self.hostname
 
     def get_referrer(self):
         return None
@@ -249,6 +250,7 @@ class ExpectStaple(SecurityReport):
         )
 
     def get_origin(self):
+        # not quite origin, but the domain that failed pinning
         return self.hostname
 
     def get_referrer(self):
@@ -308,7 +310,8 @@ class ExpectCT(SecurityReport):
         )
 
     def get_origin(self):
-        return self.hostname  # not quite origin, but the domain that failed pinning
+        # not quite origin, but the domain that failed pinning
+        return self.hostname
 
     def get_referrer(self):
         return None
diff --git a/src/sentry/models/event.py b/src/sentry/models/event.py
index d1d6ebb2ec..5344394bc7 100644
--- a/src/sentry/models/event.py
+++ b/src/sentry/models/event.py
@@ -204,10 +204,13 @@ class Event(Model):
     def interfaces(self):
         return self.get_interfaces()
 
-    def get_tags(self):
+    def get_tags(self, sorted=True):
         try:
-            return sorted((t, v) for t, v in get_path(
-                self.data, 'tags', filter=True) or () if v is not None)
+            rv = [(t, v) for t, v in get_path(
+                self.data, 'tags', filter=True) or () if v is not None]
+            if sorted:
+                rv.sort()
+            return rv
         except ValueError:
             # at one point Sentry allowed invalid tag sets such as (foo, bar)
             # vs ((tag, foo), (tag, bar))
diff --git a/tests/sentry/event_manager/test_event_manager.py b/tests/sentry/event_manager/test_event_manager.py
index 9680904ef1..2fa4e2dddd 100644
--- a/tests/sentry/event_manager/test_event_manager.py
+++ b/tests/sentry/event_manager/test_event_manager.py
@@ -1135,8 +1135,12 @@ class EventManagerTest(TransactionTestCase):
         manager.normalize()
         event = manager.save(self.project.id)
 
-        assert event.message == '<unlabeled event>'
-        assert 'logentry' not in event.data
+        if ENABLE_RUST:
+            assert event.message == '["asdf"]'
+            assert 'logentry' in event.data
+        else:
+            assert event.message == '<unlabeled event>'
+            assert 'logentry' not in event.data
 
     def test_message_attribute_goes_to_interface(self):
         manager = EventManager(make_event(**{
diff --git a/tests/sentry/event_manager/test_normalization.py b/tests/sentry/event_manager/test_normalization.py
index def415e1c2..2e8640fcf7 100644
--- a/tests/sentry/event_manager/test_normalization.py
+++ b/tests/sentry/event_manager/test_normalization.py
@@ -8,7 +8,7 @@ from datetime import datetime
 from django.conf import settings
 
 from sentry.constants import MAX_CULPRIT_LENGTH, DEFAULT_LOGGER_NAME
-from sentry.event_manager import EventManager
+from sentry.event_manager import EventManager, ENABLE_RUST
 
 
 def make_event(**kwargs):
@@ -29,7 +29,10 @@ def test_tags_as_list():
     manager.normalize()
     data = manager.get_data()
 
-    assert data['tags'] == [('foo', 'bar')]
+    if ENABLE_RUST:
+        assert data['tags'] == [['foo', 'bar']]
+    else:
+        assert data['tags'] == [('foo', 'bar')]
 
 
 def test_tags_as_dict():
@@ -37,7 +40,10 @@ def test_tags_as_dict():
     manager.normalize()
     data = manager.get_data()
 
-    assert data['tags'] == [('foo', 'bar')]
+    if ENABLE_RUST:
+        assert data['tags'] == [['foo', 'bar']]
+    else:
+        assert data['tags'] == [('foo', 'bar')]
 
 
 def test_interface_is_relabeled():
@@ -69,6 +75,8 @@ def test_does_default_ip_address_to_user(user):
 
 
 @mock.patch('sentry.interfaces.geo.Geo.from_ip_address')
+@pytest.mark.skipif(
+    ENABLE_RUST, reason="geoip is tested in semaphore repo, mock doesnt work for rust")
 def test_does_geo_from_ip(from_ip_address_mock):
     from sentry.interfaces.geo import Geo
 
@@ -154,9 +162,12 @@ def test_long_transaction():
 
 
 def test_long_message():
+    allowance = 0
+    if ENABLE_RUST:
+        allowance = 200
     manager = EventManager(
         make_event(
-            message='x' * (settings.SENTRY_MAX_MESSAGE_LENGTH + 1),
+            message='x' * (settings.SENTRY_MAX_MESSAGE_LENGTH + 1 + allowance),
         )
     )
     manager.normalize()
@@ -196,7 +207,8 @@ def test_logger():
     manager.normalize()
     data = manager.get_data()
     assert data['logger'] == DEFAULT_LOGGER_NAME
-    assert not any(e.get('name') == 'logger' for e in data.get('errors', []))
+    if not ENABLE_RUST:
+        assert not any(e.get('name') == 'logger' for e in data.get('errors', []))
 
 
 def test_moves_stacktrace_to_exception():
@@ -286,13 +298,16 @@ def test_event_id_lowercase():
 ])
 @pytest.mark.parametrize('value', [{}, [], None])
 def test_removes_some_empty_interfaces(key, value):
+    if ENABLE_RUST and value is not None:
+        # TODO(markus)
+        pytest.skip("Removing empty hashes not yet aligned with Rust")
     event = make_event()
     event[key] = value
 
     manager = EventManager(event)
     manager.normalize()
     data = manager.get_data()
-    assert key not in data
+    assert data.get(key) is None
 
 
 @pytest.mark.parametrize('key', ['applecrashreport', 'device', 'repos', 'query'])
diff --git a/tests/sentry/event_manager/test_validate_csp.py b/tests/sentry/event_manager/test_validate_csp.py
index 444b4a099e..e3fa5ef5dd 100644
--- a/tests/sentry/event_manager/test_validate_csp.py
+++ b/tests/sentry/event_manager/test_validate_csp.py
@@ -3,7 +3,7 @@ from __future__ import absolute_import
 import pytest
 
 from sentry.coreapi import APIError
-from sentry.event_manager import EventManager
+from sentry.event_manager import EventManager, ENABLE_RUST
 
 
 def validate_and_normalize(report, client_ip='198.51.100.0',
@@ -38,7 +38,7 @@ def test_csp_validate_basic():
     assert "errors" not in result
     assert 'logentry' in result
     assert result['culprit'] == "img-src 'self'"
-    assert result['tags'] == [
+    assert map(tuple, result['tags']) == [
         ('effective-directive', 'img-src'),
         ('blocked-uri', 'http://google.com'),
     ]
@@ -81,9 +81,10 @@ def test_csp_tags_out_of_bounds():
         }
     }
     result = validate_and_normalize(report)
-    assert result['tags'] == [
-        ('effective-directive', 'img-src'),
-    ]
+    if ENABLE_RUST:
+        assert result['tags'] == [['effective-directive', 'img-src'], None]
+    else:
+        assert result['tags'] == [('effective-directive', 'img-src')]
     assert len(result['errors']) == 1
 
 
@@ -104,7 +105,7 @@ def test_csp_tag_value():
         }
     }
     result = validate_and_normalize(report)
-    assert result['tags'] == [
+    assert map(tuple, result['tags']) == [
         ('effective-directive', 'img-src'),
         ('blocked-uri', 'http://google.com'),
     ]
@@ -131,17 +132,20 @@ def test_hpkp_validate_basic():
     assert 'errors' not in result
     assert 'logentry' in result
     assert not result.get('culprit')
-    assert sorted(result['tags']) == [
+    assert sorted(map(tuple, result['tags'])) == [
         ('hostname', 'www.example.com'),
         ('include-subdomains', 'false'),
         ('port', '443'),
     ]
     assert result['user'] == {'ip_address': '198.51.100.0'}
+    if ENABLE_RUST:
+        expected_headers = [['User-Agent', 'Awesome Browser']]
+    else:
+        expected_headers = [('User-Agent', 'Awesome Browser')]
+
     assert result['request'] == {
         'url': 'www.example.com',
-        'headers': [
-            ('User-Agent', 'Awesome Browser'),
-        ]
+        'headers': expected_headers
     }
 
 
diff --git a/tests/sentry/event_manager/test_validate_data.py b/tests/sentry/event_manager/test_validate_data.py
index 094a0fcd5c..1a100a307f 100644
--- a/tests/sentry/event_manager/test_validate_data.py
+++ b/tests/sentry/event_manager/test_validate_data.py
@@ -1,14 +1,11 @@
 from __future__ import absolute_import
 
 import pytest
-import mock
 
 from datetime import datetime, timedelta
-from functools import partial
-from uuid import UUID
 
 from sentry.constants import VERSION_LENGTH, MAX_CULPRIT_LENGTH
-from sentry.event_manager import EventManager
+from sentry.event_manager import EventManager, ENABLE_RUST
 
 
 def validate_and_normalize(data):
@@ -18,15 +15,6 @@ def validate_and_normalize(data):
 
 
 def test_timestamp():
-    from sentry.event_manager import process_timestamp
-
-    patched = partial(
-        process_timestamp, current_datetime=datetime(2018, 4, 10, 14, 33, 18)
-    )
-    with mock.patch("sentry.event_manager.process_timestamp", patched):
-        data = validate_and_normalize({"timestamp": "2018-04-10T14:33:18Z"})
-        assert "errors" not in data
-
     data = validate_and_normalize({"timestamp": "not-a-timestamp"})
     assert len(data["errors"]) == 1
 
@@ -45,29 +33,29 @@ def test_timestamp():
     assert data["errors"][0]["type"] == "past_timestamp"
 
 
-@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
-def test_empty_event_id(uuid4):
+def test_empty_event_id():
     data = validate_and_normalize({"event_id": ""})
-    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["event_id"]) == 32
 
 
-@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
-def test_missing_event_id(uuid4):
+def test_missing_event_id():
     data = validate_and_normalize({})
-    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["event_id"]) == 32
 
 
-@mock.patch("uuid.uuid4", return_value=UUID("031667ea1758441f92c7995a428d2d14"))
-def test_invalid_event_id(uuid4):
+def test_invalid_event_id():
     data = validate_and_normalize({"event_id": "a" * 33})
-    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["event_id"]) == 32
     assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "value_too_long"
+    if ENABLE_RUST:
+        assert data["errors"][0]["type"] == "invalid_data"
+    else:
+        assert data["errors"][0]["type"] == "value_too_long"
     assert data["errors"][0]["name"] == "event_id"
     assert data["errors"][0]["value"] == "a" * 33
 
     data = validate_and_normalize({"event_id": "xyz"})
-    assert data["event_id"] == "031667ea1758441f92c7995a428d2d14"
+    assert len(data["event_id"]) == 32
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_data"
     assert data["errors"][0]["name"] == "event_id"
@@ -76,7 +64,10 @@ def test_invalid_event_id(uuid4):
 
 def test_unknown_attribute():
     data = validate_and_normalize({"message": "foo", "foo": "bar"})
-    assert "foo" not in data
+    if ENABLE_RUST:
+        assert data['foo'] is None
+    else:
+        assert "foo" not in data
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_attribute"
     assert data["errors"][0]["name"] == "foo"
@@ -84,7 +75,10 @@ def test_unknown_attribute():
 
 def test_invalid_interface_name():
     data = validate_and_normalize({"message": "foo", "foo.baz": "bar"})
-    assert "foo.baz" not in data
+    if ENABLE_RUST:
+        assert data["foo.baz"] is None
+    else:
+        assert "foo.baz" not in data
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_attribute"
     assert data["errors"][0]["name"] == "foo.baz"
@@ -94,7 +88,11 @@ def test_invalid_interface_import_path():
     data = validate_and_normalize(
         {"message": "foo", "exception2": "bar"}
     )
-    assert "exception2" not in data
+    if ENABLE_RUST:
+        assert data['exception2'] is None
+    else:
+        assert "exception2" not in data
+
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_attribute"
     assert data["errors"][0]["name"] == "exception2"
@@ -133,12 +131,18 @@ def test_invalid_log_level():
 
 def test_tags_as_string():
     data = validate_and_normalize({"message": "foo", "tags": "bar"})
-    assert "tags" not in data
+    if ENABLE_RUST:
+        assert data['tags'] == []
+    else:
+        assert "tags" not in data
 
 
 def test_tags_with_spaces():
     data = validate_and_normalize({"message": "foo", "tags": {"foo bar": "baz bar"}})
-    assert data["tags"] == [("foo-bar", "baz bar")]
+    if ENABLE_RUST:
+        assert data["tags"] == [["foo-bar", "baz bar"]]
+    else:
+        assert data["tags"] == [("foo-bar", "baz bar")]
 
 
 def test_tags_out_of_bounds():
@@ -148,7 +152,10 @@ def test_tags_out_of_bounds():
             "tags": {"f" * 33: "value", "foo": "v" * 201, "bar": "value"},
         }
     )
-    assert data["tags"] == [("bar", "value")]
+    if ENABLE_RUST:
+        assert data["tags"] == [["bar", "value"], None, None]
+    else:
+        assert data["tags"] == [("bar", "value")]
     assert len(data["errors"]) == 2
 
 
@@ -158,35 +165,54 @@ def test_tags_as_invalid_pair():
     )
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_data"
-    assert data["errors"][0]["name"] == "tags"
-    assert data["errors"][0]["value"] == [("foo", "bar"), ("biz", "baz", "boz")]
+    if ENABLE_RUST:
+        assert data["errors"][0]["name"] == "tags.1"
+        assert data["errors"][0]["value"] == ["biz", "baz", "boz"]
+    else:
+        assert data["errors"][0]["name"] == "tags"
+        assert data["errors"][0]["value"] == [("foo", "bar"), ("biz", "baz", "boz")]
 
 
 def test_reserved_tags():
     data = validate_and_normalize(
         {"message": "foo", "tags": [("foo", "bar"), ("release", "abc123")]}
     )
-    assert data["tags"] == [("foo", "bar")]
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "invalid_data"
-    assert data["errors"][0]["name"] == "tags.0"
-    assert data["errors"][0]["value"] == ("release", "abc123")
+    if ENABLE_RUST:
+        assert data["tags"] == [["foo", "bar"]]
+    else:
+        assert data["tags"] == [("foo", "bar")]
+
+        assert len(data["errors"]) == 1
+        assert data["errors"][0]["type"] == "invalid_data"
+        assert data["errors"][0]["name"] == "tags.0"
+        assert data["errors"][0]["value"] == ("release", "abc123")
 
 
 def test_tag_value():
     data = validate_and_normalize(
         {"message": "foo", "tags": [("foo", "b\nar"), ("biz", "baz")]}
     )
-    assert data["tags"] == [("biz", "baz")]
+    if ENABLE_RUST:
+        assert data["tags"] == [["foo", None], ["biz", "baz"]]
+    else:
+        assert data["tags"] == [("biz", "baz")]
+
     assert len(data["errors"]) == 1
     assert data["errors"][0]["type"] == "invalid_data"
-    assert data["errors"][0]["name"] == "tags.0"
-    assert data["errors"][0]["value"] == ("foo", "b\nar")
+    if ENABLE_RUST:
+        assert data["errors"][0]["name"] == "tags.0.1"
+        assert data["errors"][0]["value"] == "b\nar"
+    else:
+        assert data["errors"][0]["name"] == "tags.0"
+        assert data["errors"][0]["value"] == ("foo", "b\nar")
 
 
 def test_extra_as_string():
     data = validate_and_normalize({"message": "foo", "extra": "bar"})
-    assert "extra" not in data
+    if ENABLE_RUST:
+        assert data['extra'] == {}
+    else:
+        assert 'extra' not in data
 
 
 def test_release_tag_max_len():
@@ -196,38 +222,52 @@ def test_release_tag_max_len():
         {"message": "foo", "tags": [[release_key, release_value]]}
     )
     assert "errors" not in data
-    assert data["tags"] == [(release_key, release_value)]
+    if ENABLE_RUST:
+        assert data["tags"] == [[release_key, release_value]]
+    else:
+        assert data["tags"] == [(release_key, release_value)]
 
 
 def test_server_name_too_long():
     key = u"server_name"
     value = "a" * (MAX_CULPRIT_LENGTH + 1)
     data = validate_and_normalize({key: value})
-    assert not data.get(key)
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "value_too_long"
-    assert data["errors"][0]["name"] == key
-    assert data["errors"][0]["value"] == value
+    if ENABLE_RUST:
+        assert len(dict(data['tags']).get(key)) == MAX_CULPRIT_LENGTH
+    else:
+        assert not data.get(key)
+        assert not dict(data.get('tags') or ()).get(key)
+        assert len(data["errors"]) == 1
+        assert data["errors"][0]["type"] == "value_too_long"
+        assert data["errors"][0]["name"] == key
+        assert data["errors"][0]["value"] == value
 
 
 def test_site_too_long():
     key = u"site"
     value = "a" * (MAX_CULPRIT_LENGTH + 1)
     data = validate_and_normalize({key: value})
-    assert not data.get(key)
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "value_too_long"
-    assert data["errors"][0]["name"] == key
-    assert data["errors"][0]["value"] == value
+    if ENABLE_RUST:
+        assert len(dict(data['tags']).get(key)) == MAX_CULPRIT_LENGTH
+    else:
+        assert not data.get(key)
+        assert not dict(data.get('tags') or ()).get(key)
+        assert len(data["errors"]) == 1
+        assert data["errors"][0]["type"] == "value_too_long"
+        assert data["errors"][0]["name"] == key
+        assert data["errors"][0]["value"] == value
 
 
 def test_release_too_long():
     data = validate_and_normalize({"release": "a" * (VERSION_LENGTH + 1)})
-    assert not data.get("release")
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "value_too_long"
-    assert data["errors"][0]["name"] == "release"
-    assert data["errors"][0]["value"] == "a" * (VERSION_LENGTH + 1)
+    if ENABLE_RUST:
+        assert len(data.get("release")) == VERSION_LENGTH
+    else:
+        assert not data.get("release")
+        assert len(data["errors"]) == 1
+        assert data["errors"][0]["type"] == "value_too_long"
+        assert data["errors"][0]["name"] == "release"
+        assert data["errors"][0]["value"] == "a" * (VERSION_LENGTH + 1)
 
 
 def test_release_as_non_string():
@@ -236,12 +276,20 @@ def test_release_as_non_string():
 
 
 def test_distribution_too_long():
-    data = validate_and_normalize({"release": "a" * 62, "dist": "b" * 65})
-    assert not data.get("dist")
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "value_too_long"
-    assert data["errors"][0]["name"] == "dist"
-    assert data["errors"][0]["value"] == "b" * 65
+    if ENABLE_RUST:
+        dist_len = 201
+    else:
+        dist_len = 65
+    data = validate_and_normalize({"release": "a" * 62, "dist": "b" * dist_len})
+
+    if ENABLE_RUST:
+        assert len(data.get("dist")) == dist_len - 1
+    else:
+        assert not data.get("dist")
+        assert len(data["errors"]) == 1
+        assert data["errors"][0]["type"] == "value_too_long"
+        assert data["errors"][0]["name"] == "dist"
+        assert data["errors"][0]["value"] == "b" * dist_len
 
 
 def test_distribution_bad_char():
@@ -261,7 +309,10 @@ def test_distribution_strip():
 def test_distribution_as_non_string():
     data = validate_and_normalize({"release": "42", "dist": 23})
     assert data.get("release") == "42"
-    assert data.get("dist") == "23"
+    if ENABLE_RUST:
+        assert data.get("dist") is None
+    else:
+        assert data.get("dist") == "23"
 
 
 def test_distribution_no_release():
@@ -284,6 +335,7 @@ def test_invalid_platform():
     assert data.get("platform") == "other"
 
 
+@pytest.mark.skipif(ENABLE_RUST, reason='Rust allows larger environment')
 def test_environment_too_long():
     data = validate_and_normalize({"environment": "a" * 65})
     assert not data.get("environment")
@@ -296,17 +348,25 @@ def test_environment_too_long():
 def test_environment_invalid():
     data = validate_and_normalize({"environment": "a/b"})
     assert not data.get("environment")
-    assert len(data["errors"]) == 1
-    assert data["errors"][0]["type"] == "invalid_environment"
-    assert data["errors"][0]["name"] == "environment"
-    assert data["errors"][0]["value"] == "a/b"
+    error, = data['errors']
+    if ENABLE_RUST:
+        error['type'] == 'invalid_data'
+    else:
+        error['type'] == 'invalid_environment'
+
+    assert error["name"] == "environment"
+    assert error["value"] == "a/b"
 
 
 def test_environment_as_non_string():
     data = validate_and_normalize({"environment": 42})
-    assert data.get("environment") == "42"
+    if ENABLE_RUST:
+        assert data.get("environment") is None
+    else:
+        assert data.get("environment") == "42"
 
 
+@pytest.mark.skipif(ENABLE_RUST, reason='attribute is not validated in Rust')
 def test_time_spent_too_large():
     data = validate_and_normalize({"time_spent": 2147483647 + 1})
     assert not data.get("time_spent")
@@ -327,7 +387,10 @@ def test_time_spent_invalid():
 
 def test_time_spent_non_int():
     data = validate_and_normalize({"time_spent": "123"})
-    assert data["time_spent"] == 123
+    if ENABLE_RUST:
+        assert data["time_spent"] is None
+    else:
+        assert data["time_spent"] == 123
 
 
 def test_fingerprints():
@@ -352,7 +415,11 @@ def test_fingerprints():
 
     data = validate_and_normalize({"fingerprint": ["{{default}}", 1e100, -1e100, 1e10]})
     assert data.get("fingerprint") == ["{{default}}", "10000000000"]
-    assert "errors" not in data
+    if ENABLE_RUST:
+        assert data["errors"] == [{'type': 'invalid_data',
+                                   'name': 'fingerprint', 'value': [1e100, -1e100]}]
+    else:
+        assert "errors" not in data
 
     data = validate_and_normalize({"fingerprint": []})
     assert "fingerprint" not in data
