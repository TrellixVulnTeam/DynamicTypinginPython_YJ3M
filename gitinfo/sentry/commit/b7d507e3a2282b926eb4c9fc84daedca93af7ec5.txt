commit b7d507e3a2282b926eb4c9fc84daedca93af7ec5
Author: David Cramer <dcramer@gmail.com>
Date:   Wed Dec 28 02:27:16 2011 -0800

    Command line refactor

diff --git a/docs/cli/index.rst b/docs/cli/index.rst
new file mode 100644
index 0000000000..dfb5bc122a
--- /dev/null
+++ b/docs/cli/index.rst
@@ -0,0 +1,44 @@
+The Command Line
+================
+
+Sentry installs a command line script under the name ``sentry`. This will allow you to
+perform most required operations that are unachievable within the web UI.
+
+For a list of commands, you can also use ``sentry help``, or ``sentry [command] --help``
+for help on a specific command.
+
+Builtin Commands
+----------------
+
+.. data:: sentry.commands.start
+
+    Starts all background services.
+
+    ::
+
+        sentry start --daemon
+
+.. data:: sentry.commands.stop
+
+    Stops all background services.
+
+.. data:: sentry.commands.restart
+
+    Restarts all background services
+
+.. data:: sentry.commands.upgrade
+
+    Performs any needed database migrations.
+
+.. data:: sentry.commands.cleanup
+
+    Performs all trim operations based on your configuration.
+
+.. data:: sentry.commands.manage
+
+    A wrapper around ``django-admin.py`` (aka ``manage.py``).
+
+    ::
+
+        sentry manage createsuperuser
+
diff --git a/docs/index.rst b/docs/index.rst
index 44882b58c5..9a89d8a72d 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -11,6 +11,7 @@ easily trace them in your application.
 
    install/index
    config/index
+   cli/index
    client/index
    interfaces/index
    plugins/index
diff --git a/sentry/commands/__init__.py b/sentry/commands/__init__.py
new file mode 100644
index 0000000000..fddff3e2a6
--- /dev/null
+++ b/sentry/commands/__init__.py
@@ -0,0 +1,13 @@
+"""
+sentry.commands
+~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.commands.cleanup import cleanup
+from sentry.commands.manage import manage
+from sentry.commands.restart import restart
+from sentry.commands.start import start
+from sentry.commands.stop import stop
+from sentry.commands.upgrade import upgrade
diff --git a/sentry/commands/cleanup.py b/sentry/commands/cleanup.py
new file mode 100644
index 0000000000..4c48fc6a58
--- /dev/null
+++ b/sentry/commands/cleanup.py
@@ -0,0 +1,105 @@
+"""
+sentry.commands.cleanup
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.commands.utils import options, opt
+
+import datetime
+import logging
+
+
+@options(
+    opt('--days', default='30', type=int, help='Numbers of days to truncate on.'),
+    opt('--logger', help='Limit truncation to only entries from logger.'),
+    opt('--site', help='Limit truncation to only entries from site.'),
+    opt('--server', help='Limit truncation to only entries from server.'),
+    opt('--level', help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).'),
+)
+def cleanup(days=30, logger=None, site=None, server=None, level=None):
+    """
+    Deletes a portion of the trailing data in Sentry based on
+    their creation dates. For example, if ``days`` is 30, this
+    would attempt to clean up all data thats older than 30 days.
+
+    :param logger: limit all deletion scopes to messages from the
+                   specified logger.
+    :param site: limit the message deletion scope to the specified
+                 site.
+    :param server: limit the message deletion scope to the specified
+                   server.
+    :param level: limit all deleteion scopes to messages that are greater
+                  than or equal to level.
+    """
+    from sentry.models import Group, Event, MessageCountByMinute, \
+                              MessageFilterValue, FilterValue
+    from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
+
+    if level is not None and not str(level).isdigit():
+        level = getattr(logging, level.upper())
+
+    # TODO: we should collect which messages above were deleted
+    # and potentially just send out post_delete signals where
+    # GroupedMessage can update itself accordingly
+    ts = datetime.datetime.now() - datetime.timedelta(days=days)
+
+    # Message
+    qs = SkinnyQuerySet(Event).filter(datetime__lte=ts)
+    if logger:
+        qs = qs.filter(logger=logger)
+    if site:
+        qs = qs.filter(site=site)
+    if server:
+        qs = qs.filter(server_name=server)
+    if level:
+        qs = qs.filter(level__gte=level)
+
+    groups_to_check = set()
+    for obj in RangeQuerySetWrapper(qs):
+        print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+        obj.delete()
+        groups_to_check.add(obj.group_id)
+
+    if not (server or site):
+        # MessageCountByMinute
+        qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
+        if logger:
+            qs = qs.filter(group__logger=logger)
+        if level:
+            qs = qs.filter(group__level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+        # GroupedMessage
+        qs = SkinnyQuerySet(Group).filter(last_seen__lte=ts)
+        if logger:
+            qs = qs.filter(logger=logger)
+        if level:
+            qs = qs.filter(level__gte=level)
+
+        for obj in RangeQuerySetWrapper(qs):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
+
+    # attempt to cleanup any groups that may now be empty
+    groups_to_delete = []
+    for group_id in groups_to_check:
+        if not Event.objects.filter(group=group_id).exists():
+            groups_to_delete.append(group_id)
+
+    if groups_to_delete:
+        for obj in SkinnyQuerySet(Group).filter(pk__in=groups_to_delete):
+            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
+                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
+                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
+                    FilterValue.objects.filter(key=key, value=value).delete()
+            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
+            obj.delete()
diff --git a/sentry/commands/manage.py b/sentry/commands/manage.py
new file mode 100644
index 0000000000..e1a483a87b
--- /dev/null
+++ b/sentry/commands/manage.py
@@ -0,0 +1,15 @@
+"""
+sentry.commands.manage
+~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.commands.utils import consume_args
+
+
+@consume_args
+def manage(args, options):
+    from django.core.management import ManagementUtility
+    utility = ManagementUtility(args)
+    utility.execute()
diff --git a/sentry/commands/restart.py b/sentry/commands/restart.py
new file mode 100644
index 0000000000..e3077e1844
--- /dev/null
+++ b/sentry/commands/restart.py
@@ -0,0 +1,14 @@
+"""
+sentry.commands.restart
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+
+
+def restart():
+    from sentry.utils.server import SentryServer
+
+    app = SentryServer()
+    app.execute('restart')
diff --git a/sentry/commands/start.py b/sentry/commands/start.py
new file mode 100644
index 0000000000..6aee04d042
--- /dev/null
+++ b/sentry/commands/start.py
@@ -0,0 +1,31 @@
+"""
+sentry.commands.start
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.commands.utils import options, opt
+
+
+@options(
+    opt('--host', metavar='HOSTNAME'),
+    opt('--port', type=int, metavar='PORT'),
+    opt('--daemon', action='store_true', default=False, dest='daemonize'),
+    opt('--no-daemon', action='store_false', default=False, dest='daemonize'),
+    opt('--debug', action='store_true', default=False, dest='debug'),
+    opt('--pidfile', dest='pidfile'),
+    opt('--logfile', dest='logfile'),
+)
+def start(daemonize=False, host=None, port=None, debug=False, pidfile=None, logfile=None):
+    from sentry.utils.server import SentryServer
+
+    app = SentryServer(
+        host=host,
+        port=port,
+        pidfile=pidfile,
+        logfile=logfile,
+        daemonize=daemonize,
+        debug=debug,
+    )
+    app.execute('start')
diff --git a/sentry/commands/stop.py b/sentry/commands/stop.py
new file mode 100644
index 0000000000..3f3f0c1eb2
--- /dev/null
+++ b/sentry/commands/stop.py
@@ -0,0 +1,20 @@
+"""
+sentry.commands.stop
+~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from sentry.commands.utils import options, opt
+
+
+@options(
+    opt('--pidfile', dest='pidfile'),
+)
+def stop(pidfile=None):
+    from sentry.utils.server import SentryServer
+
+    app = SentryServer(
+        pidfile=options.pidfile,
+    )
+    app.execute('stop')
diff --git a/sentry/commands/upgrade.py b/sentry/commands/upgrade.py
new file mode 100644
index 0000000000..bf81ac68f5
--- /dev/null
+++ b/sentry/commands/upgrade.py
@@ -0,0 +1,20 @@
+"""
+sentry.commands.upgrade
+~~~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from django.core.management import call_command
+from django.conf import settings
+from sentry.commands.utils import options, opt
+
+
+@options(
+    opt('--interactive', default=False, action='store_true'),
+)
+def upgrade(interactive=True):
+    call_command('syncdb', database='default', interactive=interactive)
+
+    if 'south' in settings.INSTALLED_APPS:
+        call_command('migrate', database='default', interactive=interactive)
diff --git a/sentry/commands/utils.py b/sentry/commands/utils.py
new file mode 100644
index 0000000000..2d16bdd082
--- /dev/null
+++ b/sentry/commands/utils.py
@@ -0,0 +1,22 @@
+"""
+sentry.commands.utils
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+from optparse import make_option
+
+opt = make_option
+
+
+def options(*options):
+    def wrapped(func):
+        func.options = options
+        return func
+    return wrapped
+
+
+def consume_args(func):
+    func.consume_args = True
+    return func
diff --git a/sentry/scripts/runner.py b/sentry/scripts/runner.py
index 24e7397c0e..3bb824e01c 100644
--- a/sentry/scripts/runner.py
+++ b/sentry/scripts/runner.py
@@ -1,22 +1,25 @@
 #!/usr/bin/env python
+"""
+sentry.scripts.runner
+~~~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
 import base64
 import datetime
-import eventlet
 import errno
 import imp
-import logging
 import os
 import os.path
 import sys
 
-from daemon.daemon import DaemonContext
-from daemon.runner import DaemonRunner, make_pidlockfile
 from django.conf import settings as django_settings
-from django.core.management import call_command
-from eventlet import wsgi, patcher
 from optparse import OptionParser
-from sentry import VERSION, environment
+from sentry import VERSION, environment, commands
+
 
+ALL_COMMANDS = ('start', 'stop', 'restart', 'cleanup', 'upgrade', 'manage')
 
 KEY_LENGTH = 40
 
@@ -96,206 +99,26 @@ def settings_from_file(filename, silent=False):
             setattr(django_settings, setting, setting_value)
 
 
-class SentryServer(DaemonRunner):
-    pidfile_timeout = 10
-    start_message = u"started with pid %(pid)d"
-
-    def __init__(self, host=None, port=None, pidfile=None,
-                 logfile=None, daemonize=False, debug=False):
-        from sentry.conf import settings
-
-        if not logfile:
-            logfile = settings.WEB_LOG_FILE
-
-        logfile = os.path.realpath(logfile)
-        pidfile = os.path.realpath(pidfile or settings.WEB_PID_FILE)
-
-        if daemonize:
-            detach_process = True
-        else:
-            detach_process = False
-
-        self.daemon_context = DaemonContext(detach_process=detach_process)
-        self.daemon_context.stdout = open(logfile, 'w+')
-        self.daemon_context.stderr = open(logfile, 'w+', buffering=0)
-
-        self.debug = debug
-        self.pidfile = make_pidlockfile(pidfile, self.pidfile_timeout)
-
-        self.daemon_context.pidfile = self.pidfile
-
-        self.host = host or settings.WEB_HOST
-        self.port = port or settings.WEB_PORT
-
-        # HACK: set app to self so self.app.run() works
-        self.app = self
-
-    def execute(self, action):
-        self.action = action
-
-        # Upgrade needs to happen before forking
-        upgrade()
-
-        if self.daemon_context.detach_process is False and self.action == 'start':
-            # HACK:
-            self.run()
-        else:
-            self.do_action()
-
-    def run(self):
-        from sentry.wsgi import application
-
-        def inner_run():
-            # Install eventlet patches after everything else has been run,
-            # and inside our server thread
-            patcher.monkey_patch()
-
-            wsgi.server(eventlet.listen((self.host, self.port)), application)
-
-        if self.debug:
-            from django.utils import autoreload
-            autoreload.main(inner_run)
-        else:
-            inner_run()
-
-
-def cleanup(days=30, logger=None, site=None, server=None, level=None):
-    """
-    Deletes a portion of the trailing data in Sentry based on
-    their creation dates. For example, if ``days`` is 30, this
-    would attempt to clean up all data thats older than 30 days.
-
-    :param logger: limit all deletion scopes to messages from the
-                   specified logger.
-    :param site: limit the message deletion scope to the specified
-                 site.
-    :param server: limit the message deletion scope to the specified
-                   server.
-    :param level: limit all deleteion scopes to messages that are greater
-                  than or equal to level.
-    """
-    # TODO: we should collect which messages above were deleted
-    # and potentially just send out post_delete signals where
-    # GroupedMessage can update itself accordingly
-
-    from sentry.models import Group, Event, MessageCountByMinute, \
-                              MessageFilterValue, FilterValue
-    from sentry.utils.query import RangeQuerySetWrapper, SkinnyQuerySet
-    import datetime
-
-    ts = datetime.datetime.now() - datetime.timedelta(days=days)
-
-    # Message
-    qs = SkinnyQuerySet(Event).filter(datetime__lte=ts)
-    if logger:
-        qs = qs.filter(logger=logger)
-    if site:
-        qs = qs.filter(site=site)
-    if server:
-        qs = qs.filter(server_name=server)
-    if level:
-        qs = qs.filter(level__gte=level)
-
-    groups_to_check = set()
-    for obj in RangeQuerySetWrapper(qs):
-        print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-        obj.delete()
-        groups_to_check.add(obj.group_id)
-
-    if not (server or site):
-        # MessageCountByMinute
-        qs = SkinnyQuerySet(MessageCountByMinute).filter(date__lte=ts)
-        if logger:
-            qs = qs.filter(group__logger=logger)
-        if level:
-            qs = qs.filter(group__level__gte=level)
-
-        for obj in RangeQuerySetWrapper(qs):
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
-
-        # GroupedMessage
-        qs = SkinnyQuerySet(Group).filter(last_seen__lte=ts)
-        if logger:
-            qs = qs.filter(logger=logger)
-        if level:
-            qs = qs.filter(level__gte=level)
-
-        for obj in RangeQuerySetWrapper(qs):
-            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
-                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
-                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
-                    FilterValue.objects.filter(key=key, value=value).delete()
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
-
-    # attempt to cleanup any groups that may now be empty
-    groups_to_delete = []
-    for group_id in groups_to_check:
-        if not Event.objects.filter(group=group_id).exists():
-            groups_to_delete.append(group_id)
-
-    if groups_to_delete:
-        for obj in SkinnyQuerySet(Group).filter(pk__in=groups_to_delete):
-            for key, value in SkinnyQuerySet(MessageFilterValue).filter(group=obj).values_list('key', 'value'):
-                if not MessageFilterValue.objects.filter(key=key, value=value).exclude(group=obj).exists():
-                    print ">>> Removing <FilterValue: key=%s, value=%s>" % (key, value)
-                    FilterValue.objects.filter(key=key, value=value).delete()
-            print ">>> Removing <%s: id=%s>" % (obj.__class__.__name__, obj.pk)
-            obj.delete()
-
-
-def manage(argv):
-    from django.core.management import ManagementUtility
-    utility = ManagementUtility(argv)
-    utility.execute()
-
-
-def upgrade(interactive=True):
-    call_command('syncdb', database='default', interactive=interactive)
-
-    if 'south' in django_settings.INSTALLED_APPS:
-        call_command('migrate', database='default', interactive=interactive)
-
-
 def main():
-    command_list = ('start', 'stop', 'restart', 'cleanup', 'upgrade', 'manage')
     args = sys.argv
-    if len(args) < 2 or args[1] not in command_list:
+    if len(args) < 2 or args[1] not in ALL_COMMANDS:
         print "usage: sentry [command] [options]"
         print
         print "Available subcommands:"
-        for cmd in command_list:
+        for cmd in ALL_COMMANDS:
             print "  ", cmd
         sys.exit(1)
 
+    command = getattr(commands, args[1])
+
     parser = OptionParser(version="%%prog %s" % VERSION)
     parser.add_option('--config', metavar='CONFIG')
-    if args[1] == 'start':
-        parser.add_option('--host', metavar='HOSTNAME')
-        parser.add_option('--port', type=int, metavar='PORT')
-        parser.add_option('--daemon', action='store_true', default=False, dest='daemonize')
-        parser.add_option('--no-daemon', action='store_false', default=False, dest='daemonize')
-        parser.add_option('--debug', action='store_true', default=False, dest='debug')
-        parser.add_option('--pidfile', dest='pidfile')
-        parser.add_option('--logfile', dest='logfile')
-    elif args[1] == 'stop':
-        parser.add_option('--pidfile', dest='pidfile')
-        parser.add_option('--logfile', dest='logfile')
-    elif args[1] == 'cleanup':
-        parser.add_option('--days', default='30', type=int,
-                          help='Numbers of days to truncate on.')
-        parser.add_option('--logger',
-                          help='Limit truncation to only entries from logger.')
-        parser.add_option('--site',
-                          help='Limit truncation to only entries from site.')
-        parser.add_option('--server',
-                          help='Limit truncation to only entries from server.')
-        parser.add_option('--level',
-                          help='Limit truncation to only entries greater than or equal to level (e.g. DEBUG).')
+    for option in getattr(command, 'options', []):
+        parser.add_option(option)
 
     (options, args) = parser.parse_args()
 
+    # parse our options and load them before anything else
     if options.config:
         # assumed to be a file
         config_path = options.config
@@ -313,34 +136,17 @@ def main():
 
     settings_from_file(config_path)
 
+    # set debug
     if getattr(options, 'debug', False):
         django_settings.DEBUG = True
 
-    if args[0] == 'upgrade':
-        upgrade()
-    elif args[0] == 'manage':  # wrapper around manage.py
-        manage(args)
-    elif args[0] == 'start':
-        app = SentryServer(host=options.host, port=options.port,
-                           pidfile=options.pidfile, logfile=options.logfile,
-                           daemonize=options.daemonize, debug=options.debug)
-        app.execute(args[0])
-
-    elif args[0] == 'restart':
-        app = SentryServer()
-        app.execute(args[0])
-
-    elif args[0] == 'stop':
-        app = SentryServer(pidfile=options.pidfile, logfile=options.logfile)
-        app.execute(args[0])
-
-    elif args[0] == 'cleanup':
-        level = options.level
-        if level is not None and not level.isdigit():
-            level = getattr(logging, level.upper())
-
-        cleanup(days=options.days, logger=options.logger, site=options.site, server=options.server,
-                level=level)
+    # filter out reserved options
+    kwargs = dict((k, v) for k, v in options.__dict__.iteritems() if k != 'config')
+
+    # execute command
+    if getattr(command, 'consume_args', False):
+        command(args, **kwargs)
+    command(**kwargs)
 
     sys.exit(0)
 
diff --git a/sentry/utils/server.py b/sentry/utils/server.py
new file mode 100644
index 0000000000..02aca24413
--- /dev/null
+++ b/sentry/utils/server.py
@@ -0,0 +1,74 @@
+"""
+sentry.utils.server
+~~~~~~~~~~~~~~~~~~~
+
+:copyright: (c) 2010 by the Sentry Team, see AUTHORS for more details.
+:license: BSD, see LICENSE for more details.
+"""
+import eventlet
+import os
+import os.path
+
+from daemon.daemon import DaemonContext
+from daemon.runner import DaemonRunner, make_pidlockfile
+from eventlet import wsgi, patcher
+
+
+class SentryServer(DaemonRunner):
+    pidfile_timeout = 10
+    start_message = u"started with pid %(pid)d"
+
+    def __init__(self, host=None, port=None, pidfile=None,
+                 logfile=None, daemonize=False, debug=False):
+        from sentry.conf import settings
+
+        if not logfile:
+            logfile = settings.WEB_LOG_FILE
+
+        logfile = os.path.realpath(logfile)
+        pidfile = os.path.realpath(pidfile or settings.WEB_PID_FILE)
+
+        if daemonize:
+            detach_process = True
+        else:
+            detach_process = False
+
+        self.daemon_context = DaemonContext(detach_process=detach_process)
+        self.daemon_context.stdout = open(logfile, 'w+')
+        self.daemon_context.stderr = open(logfile, 'w+', buffering=0)
+
+        self.debug = debug
+        self.pidfile = make_pidlockfile(pidfile, self.pidfile_timeout)
+
+        self.daemon_context.pidfile = self.pidfile
+
+        self.host = host or settings.WEB_HOST
+        self.port = port or settings.WEB_PORT
+
+        # HACK: set app to self so self.app.run() works
+        self.app = self
+
+    def execute(self, action):
+        self.action = action
+
+        if self.daemon_context.detach_process is False and self.action == 'start':
+            # HACK:
+            self.run()
+        else:
+            self.do_action()
+
+    def run(self):
+        from sentry.wsgi import application
+
+        def inner_run():
+            # Install eventlet patches after everything else has been run,
+            # and inside our server thread
+            patcher.monkey_patch()
+
+            wsgi.server(eventlet.listen((self.host, self.port)), application)
+
+        if self.debug:
+            from django.utils import autoreload
+            autoreload.main(inner_run)
+        else:
+            inner_run()
diff --git a/tests/tests.py b/tests/tests.py
index 44b85e4374..d7db8e21b9 100644
--- a/tests/tests.py
+++ b/tests/tests.py
@@ -362,7 +362,7 @@ class SentryCleanupTest(TestCase):
     fixtures = ['tests/fixtures/cleanup.json']
 
     def test_simple(self):
-        from sentry.scripts.runner import cleanup
+        from sentry.commands.cleanup import cleanup
 
         cleanup(days=1)
 
@@ -372,7 +372,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_logger(self):
-        from sentry.scripts.runner import cleanup
+        from sentry.commands.cleanup import cleanup
 
         cleanup(days=1, logger='sentry')
 
@@ -400,7 +400,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_server_name(self):
-        from sentry.scripts.runner import cleanup
+        from sentry.commands.cleanup import cleanup
 
         cleanup(days=1, server='dcramer.local')
 
@@ -417,7 +417,7 @@ class SentryCleanupTest(TestCase):
         self.assertEquals(MessageFilterValue.objects.count(), 0)
 
     def test_level(self):
-        from sentry.scripts.runner import cleanup
+        from sentry.commands.cleanup import cleanup
 
         cleanup(days=1, level=logging.ERROR)
 
