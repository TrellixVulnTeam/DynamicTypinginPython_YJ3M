commit e12136461c538f5dc724e633008aee073a4d234e
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Fri Aug 28 21:50:14 2015 +0200

    Documented missing endpoints for organizations

diff --git a/src/sentry/api/endpoints/organization_details.py b/src/sentry/api/endpoints/organization_details.py
index 3ec7adbeff..ec9c5490e6 100644
--- a/src/sentry/api/endpoints/organization_details.py
+++ b/src/sentry/api/endpoints/organization_details.py
@@ -15,11 +15,35 @@ from sentry.models import (
     OrganizationStatus
 )
 from sentry.tasks.deletion import delete_organization
+from sentry.utils.apidocs import scenario, attach_scenarios
 
 
 ERR_DEFAULT_ORG = 'You cannot remove the default organization.'
 
 
+@scenario('RetrieveOrganization')
+def retrieve_organization_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/organizations/%s/' % runner.org.slug
+    )
+
+
+@scenario('UpdateOrganization')
+def update_organization_scenario(runner):
+    with runner.isolated_org('Badly Misnamed') as org:
+        api_key = runner.utils.create_api_key(org)
+        runner.request(
+            method='PUT',
+            path='/organizations/%s/' % org.slug,
+            data={
+                'name': 'Impeccably Designated',
+                'slug': 'impeccably-designated',
+            },
+            api_key=api_key
+        )
+
+
 class OrganizationSerializer(serializers.ModelSerializer):
     class Meta:
         model = Organization
@@ -35,6 +59,7 @@ class OrganizationSerializer(serializers.ModelSerializer):
 class OrganizationDetailsEndpoint(OrganizationEndpoint):
     doc_section = DocSection.ORGANIZATIONS
 
+    @attach_scenarios([retrieve_organization_scenario])
     def get(self, request, organization):
         """
         Retrieve an Organization
@@ -42,6 +67,10 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
 
         Return details on an individual organization including various details
         such as membership access, features, and teams.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          team should be created for.
+        :auth: required
         """
         context = serialize(
             organization,
@@ -50,6 +79,7 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
         )
         return Response(context)
 
+    @attach_scenarios([update_organization_scenario])
     @sudo_required
     def put(self, request, organization):
         """
@@ -58,6 +88,13 @@ class OrganizationDetailsEndpoint(OrganizationEndpoint):
 
         Update various attributes and configurable settings for the given
         organization.
+
+        :pparam string organization_slug: the slug of the organization the
+                                          team should be created for.
+        :param string name: an optional new name for the organization.
+        :param string slug: an optional new slug for the organization.  Needs
+                            to be available and unique.
+        :auth: required
         """
         serializer = OrganizationSerializer(organization, data=request.DATA,
                                             partial=True)
diff --git a/src/sentry/api/endpoints/organization_index.py b/src/sentry/api/endpoints/organization_index.py
index 13f02b322e..bab807a56d 100644
--- a/src/sentry/api/endpoints/organization_index.py
+++ b/src/sentry/api/endpoints/organization_index.py
@@ -7,6 +7,15 @@ from sentry.api.base import DocSection, Endpoint
 from sentry.api.bases.organization import OrganizationPermission
 from sentry.api.serializers import serialize
 from sentry.models import AuditLogEntryEvent, Organization
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('ListYourOrganizations')
+def list_your_organizations_scenario(runner):
+    runner.request(
+        method='GET',
+        path='/organizations/'
+    )
 
 
 class OrganizationSerializer(serializers.Serializer):
@@ -18,12 +27,18 @@ class OrganizationIndexEndpoint(Endpoint):
     doc_section = DocSection.ORGANIZATIONS
     permission_classes = (OrganizationPermission,)
 
+    @attach_scenarios([list_your_organizations_scenario])
     def get(self, request):
         """
         List your Organizations
         ```````````````````````
 
-        Return a list of organizations available to the authenticated session.
+        Return a list of organizations available to the authenticated
+        session.  This is particularly useful for requests with an
+        user bound context.  For API key based requests this will
+        only return the organization that belongs to the key.
+
+        :auth: required
         """
         if request.auth:
             if hasattr(request.auth, 'project'):
diff --git a/src/sentry/api/endpoints/organization_stats.py b/src/sentry/api/endpoints/organization_stats.py
index 160347cd64..0a4e6d0c0e 100644
--- a/src/sentry/api/endpoints/organization_stats.py
+++ b/src/sentry/api/endpoints/organization_stats.py
@@ -6,33 +6,46 @@ from sentry.app import tsdb
 from sentry.api.base import DocSection, StatsMixin
 from sentry.api.bases.organization import OrganizationEndpoint
 from sentry.models import Project, Team
+from sentry.utils.apidocs import scenario, attach_scenarios
+
+
+@scenario('RetrieveEventCountsOrganization')
+def retrieve_event_counts_organization(runner):
+    runner.request(
+        method='GET',
+        path='/organizations/%s/stats/' % runner.org.slug
+    )
 
 
 class OrganizationStatsEndpoint(OrganizationEndpoint, StatsMixin):
     doc_section = DocSection.ORGANIZATIONS
 
+    @attach_scenarios([retrieve_event_counts_organization])
     def get(self, request, organization):
         """
         Retrieve Event Counts for an Organization
         `````````````````````````````````````````
 
-        **Draft:** This endpoint may change in the future without notice.
+        .. caution::
+           This endpoint may change in the future without notice.
 
         Return a set of points representing a normalized timestamp and the
         number of events seen in the period.
 
-        Query ranges are limited to Sentry's configured time-series
-        resolutions.
-
-        Parameters:
-
-        - ``since``: a timestamp to set the start of the query
-        - ``until``: a timestamp to set the end of the query
-        - ``resolution``: an explicit resolution to search for (i.e. 10s)
-        - ``stat``: the name of the stat to query (received, rejected)
-
-        **Note:** resolution should not be used unless you're familiar
-        with Sentry internals as it's restricted to pre-defined values.
+        :pparam string organization_slug: the slug of the organization for
+                                          which the stats should be
+                                          retrieved.
+        :qparam string stat: the name of the stat to query (``"received"``,
+                             ``"rejected"``)
+        :qparam timestamp since: a timestamp to set the start of the query
+                                 in seconds since UNIX epoch.
+        :qparam timestamp until: a timestamp to set the end of the query
+                                 in seconds since UNIX epoch.
+        :qparam string resolution: an explicit resolution to search
+                                   for (eg: ``10s``).  This should not be
+                                   used unless you are familiar with Sentry's
+                                   internals as it's restricted to pre-defined
+                                   values.
         """
         group = request.GET.get('group')
         if not group:
