commit 9f4ee707dd9e6db47c6e1583880d86f2c1993520
Author: Radu Woinaroski <5281987+RaduW@users.noreply.github.com>
Date:   Thu Aug 1 16:17:00 2019 +0200

    ref(event_manager): Normalize user agents in Rust (#14227)
    
    User agent detection and insertion moved from python to rust (from Sentry to Semaphore)

diff --git a/requirements-base.txt b/requirements-base.txt
index 2c31bbe211..a5cece673d 100644
--- a/requirements-base.txt
+++ b/requirements-base.txt
@@ -56,7 +56,7 @@ redis>=2.10.3,<2.10.6
 requests-oauthlib==0.3.3
 requests[security]>=2.20.0,<2.21.0
 selenium==3.141.0
-semaphore>=0.4.38,<0.5.0
+semaphore>=0.4.42,<0.5.0
 sentry-sdk>=0.10.2
 setproctitle>=1.1.7,<1.2.0
 simplejson>=3.2.0,<3.9.0
diff --git a/src/sentry/event_manager.py b/src/sentry/event_manager.py
index a5ac4a461f..aae8ccaf15 100644
--- a/src/sentry/event_manager.py
+++ b/src/sentry/event_manager.py
@@ -46,7 +46,6 @@ from sentry.signals import event_discarded, event_saved, first_event_received
 from sentry.tasks.integrations import kick_off_status_syncs
 from sentry.utils import metrics
 from sentry.utils.canonical import CanonicalKeyDict
-from sentry.utils.contexts_normalization import normalize_user_agent
 from sentry.utils.data_filters import (
     is_valid_ip,
     is_valid_release,
@@ -362,6 +361,7 @@ class EventManager(object):
             protocol_version=six.text_type(self.version) if self.version is not None else None,
             is_renormalize=self._is_renormalize,
             remove_other=self._remove_other,
+            normalize_user_agent=True,
             **DEFAULT_STORE_NORMALIZER_ARGS
         )
 
@@ -369,8 +369,6 @@ class EventManager(object):
             rust_normalizer.normalize_event(dict(self._data))
         )
 
-        normalize_user_agent(self._data)
-
     def should_filter(self):
         '''
         returns (result: bool, reason: string or None)
diff --git a/src/sentry/utils/contexts_normalization.py b/src/sentry/utils/contexts_normalization.py
deleted file mode 100644
index 6d982c71c6..0000000000
--- a/src/sentry/utils/contexts_normalization.py
+++ /dev/null
@@ -1,83 +0,0 @@
-from __future__ import absolute_import
-
-from ua_parser.user_agent_parser import Parse
-from sentry.utils.safe import get_path, setdefault_path
-
-
-def _get_version(user_agent):
-    return '.'.join(
-        value for value in [
-            user_agent['major'],
-            user_agent['minor'],
-            user_agent.get('patch'),
-        ] if value
-    ) or None
-
-
-def _parse_user_agent(data):
-    try:
-        for key, value in get_path(data, 'request', 'headers', filter=True) or ():
-            if key != 'User-Agent':
-                continue
-            if not value:
-                continue
-            ua = Parse(value)
-            if not ua:
-                continue
-            return ua
-    except ValueError:
-        pass
-    return None
-
-
-def _inject_browser_context(data, user_agent):
-    ua = user_agent['user_agent']
-    try:
-        if ua['family'] == 'Other':
-            return
-        setdefault_path(data, 'contexts', 'browser', value={
-            'name': ua['family'],
-            'version': _get_version(ua),
-        })
-    except KeyError:
-        pass
-
-
-def _inject_os_context(data, user_agent):
-    ua = user_agent['os']
-    try:
-        if ua['family'] == 'Other':
-            return
-        setdefault_path(data, 'contexts', 'os', value={
-            'name': ua['family'],
-            'version': _get_version(ua),
-        })
-    except KeyError:
-        pass
-
-
-def _inject_device_context(data, user_agent):
-    ua = user_agent['device']
-    try:
-        if ua['family'] == 'Other':
-            return
-        setdefault_path(data, 'contexts', 'device', value={
-            'family': ua['family'],
-            'model': ua['model'],
-            'brand': ua['brand'],
-        })
-
-    except KeyError:
-        pass
-
-
-def normalize_user_agent(data):
-    user_agent = _parse_user_agent(data)
-    if not user_agent:
-        return
-
-    setdefault_path(data, 'contexts', value={})
-
-    _inject_browser_context(data, user_agent)
-    _inject_os_context(data, user_agent)
-    _inject_device_context(data, user_agent)
diff --git a/tests/sentry/utils/test_contexts_normalization.py b/tests/sentry/utils/test_contexts_normalization.py
deleted file mode 100644
index 913817f501..0000000000
--- a/tests/sentry/utils/test_contexts_normalization.py
+++ /dev/null
@@ -1,143 +0,0 @@
-from __future__ import absolute_import
-from sentry.utils.contexts_normalization import normalize_user_agent
-from unittest import TestCase
-
-
-class NormalizeUserAgentTests(TestCase):
-    def setUp(self):
-        self.data = {'request':
-                     {'headers': [
-                         [
-                             'User-Agent',
-                             'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.117 Safari/537.36'
-                         ]
-                     ]}
-                     }
-
-    def test_no_headers(self):
-        self.data = {'request': {}}
-        normalize_user_agent(self.data)
-        assert 'contexts' not in self.data
-
-    def test_headers_but_no_ua(self):
-        self.data = {'request': {'headers': [['UA', 'a']]}}
-        normalize_user_agent(self.data)
-        assert 'contexts' not in self.data
-
-    def test_headers_wrong_format(self):
-        self.data = {'request': {'headers': ['UA', 'a']}}
-        normalize_user_agent(self.data)
-        assert 'contexts' not in self.data
-
-    def test_broken_ua(self):
-        self.data = {'request':
-                     {'headers': [
-                         [
-                             'User-Agent',
-                             'xx'
-                         ]
-                     ]}
-                     }
-        normalize_user_agent(self.data)
-        assert self.data['contexts'] == {}
-
-    def test_partial_browser_ua(self):
-        self.data = {'request':
-                     {'headers': [
-                         [
-                             'User-Agent',
-                             'Mozilla/5.0  Version/12.0 Mobile/15E148 Safari/604.1'
-                         ]
-                     ]}
-                     }
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Safari'
-        assert self.data['contexts']['browser']['version'] == '12.0'
-        assert 'os' not in self.data['contexts']
-        assert 'device' not in self.data['contexts']
-
-    def test_browser_device_os_parsed(self):
-        self.data = {'request':
-                     {'headers': [
-                         [
-                             'User-Agent',
-                             'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1'
-                         ]
-                     ]}
-                     }
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Mobile Safari'
-        assert self.data['contexts']['browser']['version'] == '12.0'
-        assert self.data['contexts']['os']['name'] == 'iOS'
-        assert self.data['contexts']['os']['version'] == '12.1'
-        assert self.data['contexts']['device']['brand'] == 'Apple'
-        assert self.data['contexts']['device']['family'] == 'iPhone'
-        assert self.data['contexts']['device']['model'] == 'iPhone'
-
-    def test_contexts_none(self):
-        self.data['contexts'] = None
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Chrome'
-        assert self.data['contexts']['browser']['version'] == '66.0.3359'
-        assert self.data['contexts']['os']['name'] == 'Mac OS X'
-        assert self.data['contexts']['os']['version'] == '10.13.4'
-
-    def test_browser_already_set(self):
-        self.data['contexts'] = {'browser': {'name': 'IE', 'version': '6'}}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'IE'
-        assert self.data['contexts']['browser']['version'] == '6'
-        assert self.data['contexts']['os']['name'] == 'Mac OS X'
-        assert self.data['contexts']['os']['version'] == '10.13.4'
-
-    def test_browser_none(self):
-        self.data['contexts'] = {'browser': None}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Chrome'
-        assert self.data['contexts']['browser']['version'] == '66.0.3359'
-
-    def test_os_already_set(self):
-        self.data['contexts'] = {'os': {'name': 'C64', 'version': '1337'}}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Chrome'
-        assert self.data['contexts']['browser']['version'] == '66.0.3359'
-        assert self.data['contexts']['os']['name'] == 'C64'
-        assert self.data['contexts']['os']['version'] == '1337'
-
-    def test_os_none(self):
-        self.data['contexts'] = {'os': None}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['os']['name'] == 'Mac OS X'
-        assert self.data['contexts']['os']['version'] == '10.13.4'
-
-    def test_device_already_set(self):
-        self.data = {'request':
-                     {'headers': [
-                         [
-                             'User-Agent',
-                             'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1'
-                         ]
-                     ]}
-                     }
-        self.data['contexts'] = {'device': {'brand': 'TI Calculator'}}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['browser']['name'] == 'Mobile Safari'
-        assert self.data['contexts']['browser']['version'] == '12.0'
-        assert self.data['contexts']['os']['name'] == 'iOS'
-        assert self.data['contexts']['os']['version'] == '12.1'
-        assert self.data['contexts']['device']['brand'] == 'TI Calculator'
-
-    def test_device_none(self):
-        self.data = {
-            'request': {
-                'headers': [[
-                    'User-Agent',
-                    'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1',
-                ]],
-            },
-        }
-        self.data['contexts'] = {'device': None}
-        normalize_user_agent(self.data)
-        assert self.data['contexts']['device']['brand'] == 'Apple'
-        assert self.data['contexts']['device']['family'] == 'iPhone'
-        assert self.data['contexts']['device']['model'] == 'iPhone'
