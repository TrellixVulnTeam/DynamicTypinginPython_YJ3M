commit 458750a6f8a6331f2a9d506080d79e3d0beadfcd
Author: Armin Ronacher <armin.ronacher@active-4.com>
Date:   Wed Oct 12 01:28:23 2016 +0200

    Added WIP frontend support for raw stacks in threads

diff --git a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
index 8852c39b17..0b363fe4a7 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/crashHeader.jsx
@@ -8,6 +8,7 @@ const CrashHeader = React.createClass({
     title: React.PropTypes.string,
     beforeTitle: React.PropTypes.any,
     group: PropTypes.Group.isRequired,
+    platform: PropTypes.string,
     thread: React.PropTypes.object,
     exception: React.PropTypes.object,
     stacktrace: React.PropTypes.object,
@@ -36,8 +37,19 @@ const CrashHeader = React.createClass({
     if (!this.props.stackType) {
       return false;
     }
-    const {exception} = this.props;
-    return exception && !!exception.values.find(x => x.rawStacktrace);
+    const {exception, thread} = this.props;
+    return (
+      (exception && !!exception.values.find(x => x.rawStacktrace)) ||
+      (thread && !!thread.rawStacktrace)
+    );
+  },
+
+  getMinifiedButtonLabel() {
+    if (this.platform === 'javascript' || this.platform === 'node') {
+      return t('Minified');
+    } else {
+      return t('Stripped');
+    }
   },
 
   toggleOrder() {
@@ -93,7 +105,7 @@ const CrashHeader = React.createClass({
           {this.hasMinified() &&
             [
               <a key="original" className={(stackType === 'original' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('original')}>{t('Original')}</a>,
-              <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('minified')}>{t('Minified')}</a>
+              <a key="minified" className={(stackType === 'minified' ? 'active' : '') + ' btn btn-default btn-sm'} onClick={() => this.setStackType('minified')}>{this.getMinifiedButtonLabel()}</a>
             ]
           }
         </div>
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
index 7aaa8ced32..ce191c8e85 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exception.jsx
@@ -43,6 +43,7 @@ const ExceptionInterface = React.createClass({
     let title = (
       <CrashHeader
         group={group}
+        platform={event.platform}
         exception={data}
         stackView={stackView}
         newestFirst={newestFirst}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
index 3e2c3d1f41..dc085d2e5f 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/exceptionContent.jsx
@@ -32,7 +32,9 @@ const ExceptionContent = React.createClass({
           }
           {defined(exc.stacktrace) &&
             <StacktraceContent
-                data={this.props.type === 'original' ? exc.stacktrace : exc.rawStacktrace}
+                data={this.props.type === 'original'
+                  ? exc.stacktrace
+                  : (exc.rawStacktrace || exc.stacktrace)}
                 expandFirstFrame={excIdx === 0}
                 includeSystemFrames={stackView === 'full'}
                 platform={this.props.platform}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
index d8786dc67b..a900e63c1b 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/stacktrace.jsx
@@ -56,6 +56,7 @@ const StacktraceInterface = React.createClass({
       <CrashHeader
         title={t('Stacktrace')}
         group={group}
+        platform={evt.platform}
         stacktrace={data}
         stackView={stackView}
         newestFirst={newestFirst}
diff --git a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
index c56dfade0c..0fb54dce92 100644
--- a/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
+++ b/src/sentry/static/sentry/app/components/events/interfaces/threads.jsx
@@ -44,8 +44,10 @@ function findThreadException(thread, event) {
   return null;
 }
 
-function findThreadStacktrace(thread, event) {
-  if (thread.stacktrace) {
+function findThreadStacktrace(thread, event, raw) {
+  if (raw && thread.rawStacktrace) {
+    return thread.rawStacktrace;
+  } else if (thread.stacktrace) {
     return thread.stacktrace;
   }
   let exc = findThreadException(thread, event);
@@ -53,7 +55,7 @@ function findThreadStacktrace(thread, event) {
     let rv = null;
     for (let singleExc of exc.values) {
       if (singleExc.threadId === thread.id) {
-        rv = singleExc.stacktrace;
+        rv = (raw && singleExc.rawStacktrace) || singleExc.stacktrace;
       }
     }
     return rv;
@@ -62,7 +64,7 @@ function findThreadStacktrace(thread, event) {
 }
 
 function getThreadTitle(thread, event, simplified) {
-  let stacktrace = findThreadStacktrace(thread, event);
+  let stacktrace = findThreadStacktrace(thread, event, false);
   let bits = ['Thread'];
   if (defined(thread.name)) {
     bits.push(` "${thread.name}"`);
@@ -99,7 +101,7 @@ function getThreadTitle(thread, event, simplified) {
 }
 
 function getIntendedStackView(thread, event) {
-  const stacktrace = findThreadStacktrace(thread, event);
+  const stacktrace = findThreadStacktrace(thread, event, false);
   return (stacktrace && stacktrace.hasSystemFrames) ? 'app' : 'full';
 }
 
@@ -206,7 +208,8 @@ const ThreadsInterface = React.createClass({
   },
 
   getStacktrace() {
-    return findThreadStacktrace(this.state.activeThread, this.props.event);
+    return findThreadStacktrace(this.state.activeThread, this.props.event,
+      this.state.stackType !== 'original');
   },
 
   getException() {
@@ -256,6 +259,7 @@ const ThreadsInterface = React.createClass({
         title={null}
         beforeTitle={threadSelector}
         group={group}
+        platform={event.platform}
         thread={activeThread}
         stacktrace={stacktrace}
         exception={exception}
