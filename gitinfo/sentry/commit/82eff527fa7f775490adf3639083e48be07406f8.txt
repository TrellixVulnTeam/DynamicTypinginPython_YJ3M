commit 82eff527fa7f775490adf3639083e48be07406f8
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Wed May 22 14:27:49 2019 -0700

    feat(onboarding): New onboarding experience (#13108)
    
    This adds a new single-page onboarding experience that provides a
    streamlined experience for the user just after signing up for sentry.
    
    There are 3 steps:
    
     1. Welcome
        This sets the tone for the onboarding experience.
    
     2. Platform Selection
        This step is similar to the project selection step in the original
        onboarding experience. Selecting a platform will enable the 'create
        project' button, clicking this will create a project and move to the
        next step.
    
     3. Getting Started
        This step offers the user a choice for what to do next with their
        newly created sentry organization and project.
    
        1) Setup Instructions - Displays SDK installation instructions.
           Selecting a new platform will update the instructions here. We
           wait for the first event to be received in the project before
           offering to take them to the event.
    
        2) Invite Members - The user may invite users to their organization.
    
        3) Learn More - This shows the sentry overview video and offers the
           user to create a sample event to play around
    
    Much of the implementation here uses rich animations using the React
    Pose library, which offers a way to define declarative animations.

diff --git a/package.json b/package.json
index 18e12548f3..baeba6073c 100644
--- a/package.json
+++ b/package.json
@@ -77,6 +77,7 @@
     "react-lazyload": "^2.3.0",
     "react-mentions": "^1.2.0",
     "react-popper": "^1.3.3",
+    "react-pose": "^4.0.8",
     "react-router": "3.2.0",
     "react-select": "^1.2.1",
     "react-sparklines": "1.7.0",
diff --git a/src/sentry/static/sentry/app/actionCreators/members.jsx b/src/sentry/static/sentry/app/actionCreators/members.jsx
index 8b5fd223bd..6e3e8d7060 100644
--- a/src/sentry/static/sentry/app/actionCreators/members.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/members.jsx
@@ -80,3 +80,7 @@ export function resendMemberInvite(api, params) {
     })
   );
 }
+
+export function getCurrentMember(api, orgId) {
+  return api.requestPromise(`/organizations/${orgId}/members/me/`);
+}
diff --git a/src/sentry/static/sentry/app/actionCreators/projects.jsx b/src/sentry/static/sentry/app/actionCreators/projects.jsx
index 235c2ae2c2..b807ddc006 100644
--- a/src/sentry/static/sentry/app/actionCreators/projects.jsx
+++ b/src/sentry/static/sentry/app/actionCreators/projects.jsx
@@ -278,6 +278,22 @@ export function sendSampleEvent(api, orgSlug, projectSlug) {
   });
 }
 
+/**
+ * Creates a project
+ *
+ * @param {Client} api API Client
+ * @param {String} orgSlug Organization Slug
+ * @param {String} team The team slug to assign the project to
+ * @param {String} name Name of the project
+ * @param {String} platform The platform key of the project
+ */
+export function createProject(api, orgSlug, team, name, platform) {
+  return api.requestPromise(`/teams/${orgSlug}/${team}/projects/`, {
+    method: 'POST',
+    data: {name, platform},
+  });
+}
+
 /**
  * Load platform documentation specific to the project. The DSN and various
  * other project specific secrets will be included in the documentation.
diff --git a/src/sentry/static/sentry/app/icons/logo.svg b/src/sentry/static/sentry/app/icons/logo.svg
new file mode 100644
index 0000000000..0225533f04
--- /dev/null
+++ b/src/sentry/static/sentry/app/icons/logo.svg
@@ -0,0 +1 @@
+<svg width="601" height="134" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M372.56 85.76l-44.49-57.43H317v77h11.22v-59l45.74 59h9.82v-77h-11.22v57.43zm-112-14.27h39.84v-10h-39.88V38.31h45v-10h-56.45v77h57v-10h-45.55l.04-23.82zm-46.84-9.78c-15.57-3.72-19.83-6.69-19.83-13.84 0-6.46 5.71-10.81 14.22-10.81 7.09 0 14.07 2.51 21.3 7.67l6.06-8.54c-8-6.13-16.65-9-27.13-9-15.25 0-25.89 9-25.89 21.92 0 13.84 9 18.63 25.5 22.63 14.51 3.35 18.93 6.5 18.93 13.5s-6 11.38-15.35 11.38c-9.07 0-16.81-3-25-9.82l-6.79 8.08a47.818 47.818 0 0 0 31.41 11.6c16.49 0 27.14-8.87 27.14-22.6-.02-11.65-6.91-17.88-24.61-22.17h.04zm373.9-33.37l-23.19 36.31-23-36.31H528l30.51 46.54v30.47h11.56V74.53l30.5-46.19h-12.95zM392.87 38.76h25.23v66.58h11.57V38.76h25.23V28.33h-62l-.03 10.43zM508.4 75.28c11.64-3.21 18-11.37 18-23 0-14.78-10.84-24-28.28-24H464v77h11.45V77.62h19.42l19.54 27.72h13.37l-21.1-29.58 1.72-.48zm-33-7.52V38.53H497c11.27 0 17.74 5.31 17.74 14.56 0 8.91-6.92 14.67-17.62 14.67H475.4zM86.9 7.43a13.749 13.749 0 0 0-23.81 0l-19.6 33.95 5 2.87a96.14 96.14 0 0 1 47.83 77.4H82.56a82.399 82.399 0 0 0-41-65.54l-5-2.86L18.3 85l5 2.87a46.354 46.354 0 0 1 22.46 33.78H14.33a2.266 2.266 0 0 1-1.995-1.121 2.27 2.27 0 0 1-.005-2.289l8.76-15.17a31.866 31.866 0 0 0-10-5.71L2.42 112.5a13.749 13.749 0 0 0 11.91 20.62h43.25v-5.73A57.161 57.161 0 0 0 33.84 81l6.88-11.92a70.929 70.929 0 0 1 30.56 58.26v5.74h36.65v-5.73A107.627 107.627 0 0 0 59.09 37.3L73 13.17a2.27 2.27 0 0 1 3.93 0l60.66 105.07a2.27 2.27 0 0 1-2 3.41H121.4c.18 3.83.2 7.66 0 11.48h14.24a13.745 13.745 0 0 0 13.749-13.746 13.742 13.742 0 0 0-1.839-6.874L86.9 7.43z" fill="currentColor"/></svg>
diff --git a/src/sentry/static/sentry/app/routes.jsx b/src/sentry/static/sentry/app/routes.jsx
index 06d02ae237..16ee195e72 100644
--- a/src/sentry/static/sentry/app/routes.jsx
+++ b/src/sentry/static/sentry/app/routes.jsx
@@ -72,6 +72,11 @@ const OrganizationMembersView = HookOrDefault({
   defaultComponent: OrganizationMembers,
 });
 
+const OnboardingNewProjectView = HookOrDefault({
+  hookName: 'component:onboarding-new-project',
+  defaultComponent: OnboardingNewProject,
+});
+
 function routes() {
   const accountSettingsRoutes = (
     <React.Fragment>
@@ -744,13 +749,24 @@ function routes() {
       />
       <Route path="/organizations/new/" component={errorHandler(OrganizationCreate)} />
       <Route path="/onboarding/:orgId/" component={errorHandler(OrganizationContext)}>
+        {/* The current (old) version of the onboarding experience does not
+            route to anything here. So even though this is new, the route can
+            live where it will eventually live. */}
+        <Route
+          path=":step/"
+          componentPromise={() =>
+            import(/* webpackChunkName: "OnboardingWizardNew" */ './views/onboarding/wizardNew')
+          }
+          component={errorHandler(LazyLoad)}
+        />
+        {/* TODO(epurkhiser): Old style onboarding experience routes. To be removed in the future */}
         <Route component={errorHandler(OnboardingWizard)}>
-          <IndexRoute component={errorHandler(OnboardingNewProject)} />
+          <IndexRoute component={errorHandler(OnboardingNewProjectView)} />
           <Route
             path=":projectId/configure/:platform/"
             component={errorHandler(OnboardingConfigure)}
           />
-          {hook('routes:onboarding-survey')}
+          {hook('routes:onboarding')}
         </Route>
       </Route>
       <Route component={errorHandler(OrganizationDetails)}>
diff --git a/src/sentry/static/sentry/app/stores/hookStore.jsx b/src/sentry/static/sentry/app/stores/hookStore.jsx
index 2e63be552e..595d258ae1 100644
--- a/src/sentry/static/sentry/app/stores/hookStore.jsx
+++ b/src/sentry/static/sentry/app/stores/hookStore.jsx
@@ -7,7 +7,6 @@ const validHookNames = new Set([
   'routes',
   'routes:admin',
   'routes:organization',
-  'routes:onboarding-survey',
   'routes:organization-root',
 
   // Analytics and tracking hooks
@@ -19,8 +18,6 @@ const validHookNames = new Set([
   'metrics:event',
 
   // Specific component customizations
-  'sidebar:onboarding-assets',
-  'utils:onboarding-survey-url',
   'component:org-auth-view',
   'component:org-members-view',
 
@@ -36,6 +33,14 @@ const validHookNames = new Set([
   'sidebar:bottom-items',
   'sidebar:item-label',
 
+  // Onboarding experience
+  // TODO(epurkhiser): These all should become less getsentry specific
+  'routes:onboarding',
+  'utils:onboarding-survey-url',
+  'sidebar:onboarding-assets',
+  'onboarding:invite-members',
+  'component:onboarding-new-project',
+
   // Used to provide a component for integration features.
   'integrations:feature-gates',
 
diff --git a/src/sentry/static/sentry/app/views/onboarding/platform.jsx b/src/sentry/static/sentry/app/views/onboarding/platform.jsx
new file mode 100644
index 0000000000..b307c6dabb
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/platform.jsx
@@ -0,0 +1,158 @@
+import {css} from 'react-emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {addErrorMessage} from 'app/actionCreators/indicator';
+import {createProject} from 'app/actionCreators/projects';
+import {stepPropTypes} from 'app/views/onboarding/wizardNew';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import PlatformPicker from 'app/components/platformPicker';
+import ProjectActions from 'app/actions/projectActions';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+import withTeams from 'app/utils/withTeams';
+
+const platformListStyle = css`
+  max-height: 420px;
+  overflow-y: scroll;
+  /* Needed to fix overflow cropping of the de-select button */
+  margin-top: -${space(2)};
+  padding-top: ${space(2)};
+`;
+
+class OnboardingPlatform extends React.Component {
+  static propTypes = {
+    ...stepPropTypes,
+    api: PropTypes.object,
+    teams: PropTypes.arrayOf(SentryTypes.Team),
+  };
+
+  state = {
+    /**
+     * This will be flipped to true immediately before creating the first
+     * project. We use state here to avoid the intermittent prop value where
+     * the project is created but the store hasn't propagated its value to the
+     * component yet, leaving a brief period where the button will flash
+     * between labels / disabled states.
+     */
+    firstProjectCreated: false,
+    /**
+     * `progressing` indicates that we are moving to the next step. Again, this
+     * is kept as state to avoid intermittent states causing flickering of the
+     * button.
+     */
+    progressing: false,
+  };
+
+  componentDidUpdate(prevProps, prevState) {
+    if (prevProps.active && !this.props.active) {
+      // eslint-disable-next-line react/no-did-update-set-state
+      this.setState({progressing: false});
+    }
+  }
+
+  get hasFirstProject() {
+    return this.props.project || this.state.firstProjectCreated;
+  }
+
+  get contineButtonLabel() {
+    if (this.state.progressing) {
+      return t('Creating Project...');
+    }
+    if (!this.hasFirstProject) {
+      return t('Create Project');
+    }
+    if (!this.props.active) {
+      return t('Project Created');
+    }
+    return t('Setup Your Project');
+  }
+
+  async createFirstProject(platform) {
+    const {api, orgId, teams} = this.props;
+
+    if (this.hasFirstProject) {
+      return;
+    }
+
+    if (teams.length < 1) {
+      return;
+    }
+
+    this.setState({firstProjectCreated: true});
+
+    try {
+      const data = await createProject(api, orgId, teams[0].slug, orgId, platform);
+      ProjectActions.createSuccess(data);
+    } catch (error) {
+      addErrorMessage(t('Failed to create project'));
+      throw error;
+    }
+  }
+
+  handleSetPlatform = platform => {
+    const {onUpdate, onReturnToStep} = this.props;
+
+    if (platform) {
+      onUpdate({platform});
+    } else {
+      // Platform de-selected
+      onReturnToStep({platform});
+    }
+  };
+
+  handleContinue = async () => {
+    this.setState({progressing: true});
+    // Create their first project if they don't already have one. This is a
+    // no-op if they already have a project.
+    await this.createFirstProject(this.props.platform);
+    this.props.onComplete();
+  };
+
+  render() {
+    const {active, project, platform, scrollTargetId} = this.props;
+
+    const selectedPlatform = platform || project?.platform;
+
+    const continueDisabled =
+      !selectedPlatform || this.state.progressing || (this.hasFirstProject && !active);
+
+    return (
+      <React.Fragment>
+        <p>
+          {tct(
+            `Sentry integrates with many different languages and platforms
+             through the official [strong:Sentry SDKs]. Select your platform
+             from the list below to see a tailored installation process for
+             Sentry.`,
+            {strong: <strong />}
+          )}
+        </p>
+        <p>
+          {tct(
+            `Not seeing your platform in the list below? Select the
+             [strong:other platform], and use a community client!`,
+            {strong: <strong />}
+          )}
+        </p>
+        <PlatformPicker
+          noAutoFilter
+          listProps={{className: platformListStyle, id: scrollTargetId}}
+          platform={selectedPlatform}
+          setPlatform={this.handleSetPlatform}
+        />
+        <Button
+          priority="primary"
+          disabled={continueDisabled}
+          onClick={this.handleContinue}
+        >
+          {this.contineButtonLabel}
+        </Button>
+      </React.Fragment>
+    );
+  }
+}
+
+export default withApi(withTeams(OnboardingPlatform));
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx
new file mode 100644
index 0000000000..45bc14e9e5
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/eventWaiter.jsx
@@ -0,0 +1,108 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import {analytics} from 'app/utils/analytics';
+import SentryTypes from 'app/sentryTypes';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+const DEFAULT_POLL_INTERVAL = 5000;
+
+const recordAnalyticsFirstEvent = ({organization, project}) =>
+  analytics('onboarding_v2.first_event_recieved', {
+    org_id: parseInt(organization.id, 10),
+    project: parseInt(project.id, 10),
+  });
+
+/**
+ * This is a render prop component that can be used to wait for the first event
+ * of a project to be received via polling.
+ *
+ * When an event is received the {firstIssue} will be passed to the child.
+ * Should no issue object be available (the first issue has expired) then it
+ * will simply be boolean true.
+ *
+ * Otherwise this value will be null before the event is received.
+ */
+class EventWaiter extends React.Component {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+    disabled: PropTypes.bool,
+    children: PropTypes.func,
+    pollInterval: PropTypes.number,
+  };
+
+  static defaultProps = {
+    pollInterval: DEFAULT_POLL_INTERVAL,
+  };
+
+  state = {
+    firstIssue: null,
+  };
+
+  componentDidMount() {
+    this.pollHandler();
+    this.startPolling();
+  }
+
+  componentDidUpdate(prevProps) {
+    this.stopPolling();
+    this.startPolling();
+  }
+
+  componentWillUnmount() {
+    this.stopPolling();
+  }
+
+  intervalId = null;
+
+  pollHandler = async () => {
+    const {api, organization, project} = this.props;
+
+    const {firstEvent} = await api.requestPromise(
+      `/projects/${organization.slug}/${project.slug}/`
+    );
+
+    if (firstEvent === null) {
+      return;
+    }
+
+    // Locate the projects first issue group. The project.firstEvent field will
+    // *not* include sample events, while just looking at the issues list will.
+    // We will wait until the project.firstEvent is set and then locate the
+    // event given that event datetime
+    const issues = await api.requestPromise(
+      `/projects/${organization.slug}/${project.slug}/issues/`
+    );
+
+    // The event may have expired, default to true
+    const firstIssue = issues.find(issue => issue.firstSeen === firstEvent) || true;
+
+    recordAnalyticsFirstEvent({organization, project});
+
+    this.stopPolling();
+    this.setState({firstIssue});
+  };
+
+  startPolling() {
+    const {disabled, organization, project} = this.props;
+
+    if (disabled || !organization || !project || this.state.firstIssue) {
+      return;
+    }
+
+    this.intervalId = setInterval(this.pollHandler, this.props.pollInterval);
+  }
+
+  stopPolling() {
+    clearInterval(this.intervalId);
+  }
+
+  render() {
+    return this.props.children({firstIssue: this.state.firstIssue});
+  }
+}
+
+export default withApi(withOrganization(EventWaiter));
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx
new file mode 100644
index 0000000000..17a2f0913d
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/firstEventIndicator.jsx
@@ -0,0 +1,144 @@
+import {keyframes} from 'emotion';
+import PropTypes from 'prop-types';
+import React from 'react';
+import posed, {PoseGroup} from 'react-pose';
+import styled from 'react-emotion';
+
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import EventWaiter from 'app/views/onboarding/projectSetup/eventWaiter';
+import InlineSvg from 'app/components/inlineSvg';
+import space from 'app/styles/space';
+import testablePose from 'app/utils/testablePose';
+
+const FirstEventIndicator = props => (
+  <EventWaiter {...props}>
+    {({firstIssue}) => <Indicator firstIssue={firstIssue} {...props} />}
+  </EventWaiter>
+);
+
+FirstEventIndicator.propTypes = EventWaiter.propTypes;
+
+const Indicator = ({firstIssue, ...props}) => (
+  <PoseGroup preEnterPose="init">
+    {!firstIssue ? (
+      <Waiting key="waiting" />
+    ) : (
+      <Success key="recieved" firstIssue={firstIssue} {...props} />
+    )}
+  </PoseGroup>
+);
+
+Indicator.propTypes = {
+  firstIssue: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),
+};
+
+const Waiting = props => (
+  <StatusWrapper {...props}>
+    <WaitingIndicator />
+    <PosedText>{t('Waiting for verification event')}</PosedText>
+  </StatusWrapper>
+);
+
+const Success = ({orgId, firstIssue, ...props}) => (
+  <StatusWrapper {...props}>
+    <ReceivedIndicator src="icon-checkmark-sm" />
+    <PosedText>{t('First event was received!')}</PosedText>
+    {firstIssue !== true && (
+      <PosedButton
+        size="small"
+        priority="primary"
+        to={`/organizations/${orgId}/issues/${firstIssue.id}/`}
+      >
+        {t('Take me to my event')}
+      </PosedButton>
+    )}
+  </StatusWrapper>
+);
+
+Success.propTypes = FirstEventIndicator.propTypes;
+
+const indicatorPoses = testablePose({
+  init: {opacity: 0, y: -10},
+  enter: {opacity: 1, y: 0},
+  exit: {opacity: 0, y: 10},
+});
+
+const PosedText = posed.div(indicatorPoses);
+
+const StatusWrapper = styled(posed.div(testablePose({enter: {staggerChildren: 350}})))`
+  display: grid;
+  grid-template-columns: max-content 1fr max-content;
+  grid-gap: ${space(1)};
+  align-items: center;
+  font-size: 0.9em;
+  /* This is a minor hack, but the line height is just *slightly* too low,
+  making the text appear off center, so we adjust it just a bit */
+  line-height: calc(0.9em + 1px);
+`;
+
+const pulse = keyframes`
+  0% {
+    transform: scale(0.1);
+    opacity: 1
+  }
+
+  40%, 100% {
+    transform: scale(0.8);
+    opacity: 0;
+  }
+`;
+
+const WaitingIndicator = styled(posed.div(indicatorPoses))`
+  margin: 0 6px;
+  height: 10px;
+  width: 10px;
+  border-radius: 50%;
+  background: ${p => p.theme.redLight};
+  position: relative;
+
+  &:before {
+    content: '';
+    display: block;
+    position: absolute;
+    height: 100px;
+    width: 100px;
+    border-radius: 50%;
+    top: -45px;
+    left: -45px;
+    border: 4px solid ${p => p.theme.redLight};
+    transform-origin: center;
+    animation: ${pulse} 3s ease-out infinite;
+  }
+`;
+
+const PosedReceivedIndicator = posed(
+  React.forwardRef((props, ref) => <InlineSvg {...props} innerRef={ref} />)
+)(indicatorPoses);
+
+const ReceivedIndicator = styled(PosedReceivedIndicator)`
+  color: #fff;
+  background: ${p => p.theme.green};
+  border-radius: 50%;
+  height: 20px;
+  width: 20px;
+  padding: 5px;
+  margin: 0 2px;
+`;
+
+const PosedButton = posed(
+  React.forwardRef((props, ref) => (
+    <div ref={ref}>
+      <Button {...props} />
+    </div>
+  ))
+)(
+  testablePose({
+    init: {x: -20, opacity: 0},
+    enter: {x: 0, opacity: 1},
+  })
+);
+
+export {Indicator};
+
+export default FirstEventIndicator;
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx
new file mode 100644
index 0000000000..60d9bae435
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/index.jsx
@@ -0,0 +1,101 @@
+import React from 'react';
+import posed, {PoseGroup} from 'react-pose';
+
+import {analytics} from 'app/utils/analytics';
+import {stepPropTypes} from 'app/views/onboarding/wizardNew';
+import {t} from 'app/locale';
+import HookOrDefault from 'app/components/hookOrDefault';
+import SentryTypes from 'app/sentryTypes';
+import withOrganization from 'app/utils/withOrganization';
+
+import InviteMembers from './inviteMembers';
+import LearnMore from './learnMore';
+import ProjectDocs from './projectDocs';
+import SetupChoices from './setupChoices';
+
+const recordAnalyticsOptionSelected = ({organization, choice}) =>
+  analytics('onboarding_v2.setup_choice_selected', {
+    org_id: parseInt(organization.id, 10),
+    choice,
+  });
+
+// Member invitation works a bit differently in Sentry's SaaS product, this
+// provides a hook for that.
+const InviteMembersComponent = HookOrDefault({
+  hookName: 'onboarding:invite-members',
+  defaultComponent: InviteMembers,
+});
+
+const SETUP_CHOICES = [
+  {
+    id: 'install-guide',
+    title: t('Installation Guide'),
+    component: ProjectDocs,
+  },
+  {
+    id: 'invite-members',
+    title: t('Invite Team Members'),
+    component: InviteMembersComponent,
+  },
+  {
+    id: 'learn-more',
+    title: t('How Does Sentry Work?'),
+    component: LearnMore,
+  },
+];
+
+const DEFAULT_SETUP_OPTION = 'install-guide';
+
+class OnboardingProjectSetup extends React.Component {
+  static propTypes = {
+    ...stepPropTypes,
+    organization: SentryTypes.Organization,
+  };
+
+  state = {
+    selectedChoice: DEFAULT_SETUP_OPTION,
+  };
+
+  handleSelect = id => {
+    const {organization} = this.props;
+    this.setState({selectedChoice: id});
+    recordAnalyticsOptionSelected({organization, choice: id});
+  };
+
+  render() {
+    const {selectedChoice} = this.state;
+    const SelectedComponent = SETUP_CHOICES.find(item => item.id === selectedChoice)
+      .component;
+
+    // NOTE: We give the PoseGroup different enter/exit/init poses than default
+    // so that when poses propagate down to children they do not animate enter
+    // or exit when switching setup choices.
+    return (
+      <React.Fragment>
+        <SetupChoices
+          choices={SETUP_CHOICES}
+          selectedChoice={selectedChoice}
+          onSelect={this.handleSelect}
+        />
+        <PoseGroup
+          withParent={false}
+          preEnterPose="choiceInit"
+          enterPose="choiceEnter"
+          exitPose="choiceExit"
+        >
+          <PosedChoice key={selectedChoice}>
+            <SelectedComponent {...this.props} />
+          </PosedChoice>
+        </PoseGroup>
+      </React.Fragment>
+    );
+  }
+}
+
+const PosedChoice = posed.div({
+  choiceInit: {opacity: 0, x: -20},
+  choiceEnter: {opacity: 1, x: 0},
+  choiceExit: {opacity: 0, x: 20},
+});
+
+export default withOrganization(OnboardingProjectSetup);
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
new file mode 100644
index 0000000000..99c051375b
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/inviteMembers.jsx
@@ -0,0 +1,138 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+
+import {addSuccessMessage} from 'app/actionCreators/indicator';
+import {analytics} from 'app/utils/analytics';
+import {getCurrentMember} from 'app/actionCreators/members';
+import {t, tct} from 'app/locale';
+import Alert from 'app/components/alert';
+import EmailField from 'app/views/settings/components/forms/emailField';
+import Form from 'app/views/settings/components/forms/form';
+import Panel from 'app/components/panels/panel';
+import SelectField from 'app/views/settings/components/forms/selectField';
+import SentryTypes from 'app/sentryTypes';
+import TextBlock from 'app/views/settings/components/text/textBlock';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+import withConfig from 'app/utils/withConfig';
+import withOrganization from 'app/utils/withOrganization';
+
+const recordAnalyticsUserInvited = ({organization, project}) =>
+  analytics('onboarding_v2.user_invited', {
+    org_id: parseInt(organization.id, 10),
+    project: project.slug,
+  });
+
+class InviteMembers extends React.Component {
+  static propTypes = {
+    api: PropTypes.object.isRequired,
+    orgId: PropTypes.string.isRequired,
+    organization: SentryTypes.Organization.isRequired,
+    project: SentryTypes.Project.isRequired,
+    config: SentryTypes.Config.isRequired,
+    formProps: PropTypes.object,
+  };
+
+  state = {
+    invitedEmails: [],
+    roleList: [],
+  };
+
+  componentDidMount() {
+    this.fetchRoleDetails();
+  }
+
+  async fetchRoleDetails() {
+    const {api, orgId} = this.props;
+
+    const member = await getCurrentMember(api, orgId);
+    this.setState({roleList: member.roles});
+  }
+
+  get emailSuffix() {
+    return this.props.config.user.email.split('@')[1];
+  }
+
+  handleSubmitSuccess = (data, model) => {
+    model.fields.set('email', '');
+    this.setState(state => ({invitedEmails: [...state.invitedEmails, data.email]}));
+    addSuccessMessage(t('Invited %s to your organization', data.email));
+
+    const {organization, project} = this.props;
+    recordAnalyticsUserInvited({organization, project});
+  };
+
+  render() {
+    const {invitedEmails, roleList} = this.state;
+    const {project, formProps, orgId} = this.props;
+
+    return (
+      <React.Fragment>
+        {invitedEmails.length > 0 && (
+          <Alert type="success" icon="icon-user-multi">
+            {tct('[emailList] has been invited to your organization.', {
+              emailList: <strong>{invitedEmails.join(', ')}</strong>,
+            })}
+          </Alert>
+        )}
+        <Panel>
+          <Form
+            apiEndpoint={`/organizations/${orgId}/members/`}
+            submitLabel={t('Invite Member')}
+            onSubmitSuccess={this.handleSubmitSuccess}
+            initialData={{teams: [project.team.slug]}}
+            {...formProps}
+          >
+            <HelpText>
+              {t(
+                `Enter the emails of team members you'd like in your
+                 organization. We'll send out their invitation and guide your
+                 teammates through this same setup.`
+              )}
+            </HelpText>
+            <EmailField
+              name="email"
+              required
+              placeholder={`e.g. team.member@${this.emailSuffix}`}
+              label={t('Member Email')}
+              help={t(
+                'Enter the email of a team member to invite to your Sentry Organization. You may invite more than one.'
+              )}
+            />
+            <SelectField
+              name="role"
+              label={t('Member Role')}
+              required
+              help={t(
+                'User roles determine the permission scopes a user will have within your Sentry organization.'
+              )}
+              placeholder={t('Select a role')}
+              choices={roleList.map(role => [
+                role.id,
+                <React.Fragment key={role.id}>
+                  {role.name}
+                  <RoleDescriptiom>{role.desc}</RoleDescriptiom>
+                </React.Fragment>,
+              ])}
+            />
+          </Form>
+        </Panel>
+      </React.Fragment>
+    );
+  }
+}
+
+const HelpText = styled(TextBlock)`
+  padding: ${space(2)};
+  margin: 0;
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+`;
+
+const RoleDescriptiom = styled('div')`
+  margin-top: ${space(0.5)};
+  line-height: 1.4em;
+  font-size: 0.8em;
+`;
+
+export default withOrganization(withApi(withConfig(InviteMembers)));
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx
new file mode 100644
index 0000000000..fdbf3a2382
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/learnMore.jsx
@@ -0,0 +1,71 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {t, tct} from 'app/locale';
+import CreateSampleEventButton from 'app/views/onboarding/createSampleEventButton';
+import Panel from 'app/components/panels/panel';
+import PanelBody from 'app/components/panels/panelBody';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+
+const LEARN_MORE_VIDEO = 'https://player.vimeo.com/video/319554213';
+
+const LearnMore = ({project}) => (
+  <React.Fragment>
+    <DemoVideo>
+      <iframe
+        src={LEARN_MORE_VIDEO}
+        frameBorder="0"
+        allow="autoplay; fullscreen"
+        allowFullScreen
+      />
+    </DemoVideo>
+
+    <Panel>
+      <SampleEventPanelBody disablePadding={false}>
+        {tct(
+          `Want to see more of what Sentry can do before integrating into your
+           application? Create a [strong:Sample Error Event] and poke around to
+           get a better feel for the Sentry workflow.`,
+          {strong: <strong />}
+        )}
+        <CreateSampleEventButton
+          project={project}
+          source="onboarding_setup"
+          priority="primary"
+        >
+          {t('Create A Sample Event')}
+        </CreateSampleEventButton>
+      </SampleEventPanelBody>
+    </Panel>
+  </React.Fragment>
+);
+
+LearnMore.propTypes = {
+  project: SentryTypes.Project,
+};
+
+const DemoVideo = styled(Panel)`
+  overflow: hidden;
+  margin-bottom: ${space(2)};
+
+  /* 16:9 aspect ratio */
+  position: relative;
+  padding-top: 56.2%;
+
+  iframe {
+    position: absolute;
+    top: 0;
+    width: 100%;
+    height: 100%;
+  }
+`;
+
+const SampleEventPanelBody = styled(PanelBody)`
+  display: grid;
+  grid-template-columns: 1fr max-content;
+  grid-gap: ${space(2)};
+  align-items: center;
+`;
+
+export default LearnMore;
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx
new file mode 100644
index 0000000000..1edc8fd8d1
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/projectDocs.jsx
@@ -0,0 +1,227 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import posed, {PoseGroup} from 'react-pose';
+import styled from 'react-emotion';
+
+import {analytics} from 'app/utils/analytics';
+import {loadDocs} from 'app/actionCreators/projects';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import FirstEventIndicator from 'app/views/onboarding/projectSetup/firstEventIndicator';
+import LoadingError from 'app/components/loadingError';
+import Panel from 'app/components/panels/panel';
+import PanelBody from 'app/components/panels/panelBody';
+import PlatformIcon from 'app/components/platformIcon';
+import SentryTypes from 'app/sentryTypes';
+import platforms from 'app/data/platforms';
+import space from 'app/styles/space';
+import withApi from 'app/utils/withApi';
+import withOrganization from 'app/utils/withOrganization';
+
+const recordAnalyticsDocsClicked = ({organization, project, platform}) =>
+  analytics('onboarding_v2.full_docs_clicked', {
+    org_id: parseInt(organization.id, 10),
+    project: project.slug,
+    platform,
+  });
+
+class ProjectDocs extends React.Component {
+  static propTypes = {
+    api: PropTypes.object,
+    organization: SentryTypes.Organization,
+    project: SentryTypes.Project,
+    platform: PropTypes.string,
+    scrollTargetId: PropTypes.string,
+  };
+
+  state = {
+    platformDocs: null,
+    loadedPlatform: null,
+    hasError: false,
+  };
+
+  componentDidMount() {
+    this.fetchData();
+  }
+
+  componentDidUpdate(nextProps) {
+    if (
+      nextProps.platform !== this.props.platform ||
+      nextProps.project !== this.props.project
+    ) {
+      this.fetchData();
+    }
+  }
+
+  fetchData = async () => {
+    const {api, project, organization, platform} = this.props;
+
+    if (!project) {
+      return;
+    }
+
+    try {
+      const platformDocs = await loadDocs(api, organization.slug, project.slug, platform);
+      this.setState({platformDocs, loadedPlatform: platform, hasError: false});
+    } catch (error) {
+      if (platform === 'other') {
+        // TODO(epurkhiser): There are currently no docs for the other
+        // platform. We should add generic documentation, in which case, this
+        // check should go away.
+        return;
+      }
+
+      this.setState({hasError: error});
+      throw error;
+    }
+  };
+
+  handleFullDocsClick = e => {
+    const {organization, project, platform} = this.props;
+    recordAnalyticsDocsClicked({organization, project, platform});
+  };
+
+  render() {
+    const {organization, project, platform, scrollTargetId} = this.props;
+    const {loadedPlatform, platformDocs, hasError} = this.state;
+
+    const introduction = (
+      <Panel>
+        <PanelBody disablePadding={false}>
+          <AnimatedPlatformHeading platform={loadedPlatform || platform} />
+
+          <Description id={scrollTargetId}>
+            {tct(
+              `Follow these instructions to install and verify the integration
+               of Sentry into your application, including sending
+               [strong:your first event] from your development environment. See
+               the full documentation for additional configuration, platform
+               features, and methods of sending events.`,
+              {strong: <strong />}
+            )}
+          </Description>
+          <Footer>
+            {project && (
+              <FirstEventIndicator organization={organization} project={project} />
+            )}
+            <div>
+              <Button
+                external
+                onClick={this.handleFullDocsClick}
+                href={platformDocs?.link}
+                size="small"
+              >
+                {t('Full Documentation')}
+              </Button>
+            </div>
+          </Footer>
+        </PanelBody>
+      </Panel>
+    );
+
+    const docs = platformDocs !== null && (
+      <PoseGroup preEnterPose="init" animateOnMount>
+        <DocsWrapper
+          key={platformDocs.html}
+          dangerouslySetInnerHTML={{__html: platformDocs.html}}
+        />
+      </PoseGroup>
+    );
+
+    return (
+      <React.Fragment>
+        {introduction}
+        {!hasError ? (
+          docs
+        ) : (
+          <LoadingError
+            message={t('Failed to load documentation for the %s platform.', platform)}
+            onRetry={this.fetchData}
+          />
+        )}
+      </React.Fragment>
+    );
+  }
+}
+
+const docsTransition = {
+  init: {
+    opacity: 0,
+    y: -10,
+  },
+  enter: {
+    opacity: 1,
+    y: 0,
+    delay: 100,
+    transition: {duration: 200},
+  },
+  exit: {
+    opacity: 0,
+    y: 10,
+    transition: {duration: 200},
+  },
+};
+
+const Description = styled('p')`
+  font-size: 0.9em;
+`;
+
+const Footer = styled('div')`
+  display: grid;
+  grid-gap: ${space(1)};
+  grid-template-columns: 1fr max-content;
+  align-items: center;
+`;
+
+const Heading = styled(posed('div')(docsTransition))`
+  display: grid;
+  grid-template-columns: max-content 1fr;
+  grid-gap: ${space(1)};
+  align-items: center;
+  margin-bottom: ${space(2)};
+`;
+
+const Header = styled('div')`
+  font-size: 1.8rem;
+  margin-right: 16px;
+  font-weight: bold;
+`;
+
+const StyledPlatformIcon = styled(PlatformIcon)`
+  height: 24px;
+  width: 24px;
+  border-radius: 3px;
+`;
+
+const AnimatedPlatformHeading = ({platform}) => (
+  <PoseGroup preEnterPose="init">
+    <Heading key={platform}>
+      <StyledPlatformIcon platform={platform} />
+      <Header>
+        {t('%s SDK Installation Guide', platforms.find(p => p.id === platform).name)}
+      </Header>
+    </Heading>
+  </PoseGroup>
+);
+
+AnimatedPlatformHeading.propTypes = {
+  platform: PropTypes.string.isRequired,
+};
+
+const DocsWrapper = styled(posed.div(docsTransition))`
+  h1,
+  h2,
+  h3,
+  h4,
+  h5,
+  h6,
+  p {
+    margin-bottom: 18px;
+  }
+
+  h2 {
+    font-size: 1.4em;
+  }
+`;
+
+export default withOrganization(withApi(ProjectDocs));
diff --git a/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx b/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx
new file mode 100644
index 0000000000..63af66f776
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/projectSetup/setupChoices.jsx
@@ -0,0 +1,45 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+
+import NavTabs from 'app/components/navTabs';
+
+const itemsShape = PropTypes.shape({
+  title: PropTypes.string.isRequired,
+});
+
+/**
+ * Visually fancy choice-card component with an animated hover effect that
+ * follows the focused choice. Uses react-pose to handle animations of the
+ * background element by passing the computed rect
+ */
+class SetupChoices extends React.Component {
+  static propTypes = {
+    choices: PropTypes.arrayOf(itemsShape),
+    selectedChoice: PropTypes.string,
+    onSelect: PropTypes.func,
+  };
+
+  render() {
+    const {choices, selectedChoice, onSelect} = this.props;
+
+    return (
+      <NavTabs underlined={true}>
+        {choices.map(({id, title}) => (
+          <li key={id} className={id === selectedChoice ? 'active' : null}>
+            <a
+              href="#"
+              onClick={e => {
+                onSelect(id);
+                e.preventDefault();
+              }}
+            >
+              {title}
+            </a>
+          </li>
+        ))}
+      </NavTabs>
+    );
+  }
+}
+
+export default SetupChoices;
diff --git a/src/sentry/static/sentry/app/views/onboarding/styles.jsx b/src/sentry/static/sentry/app/views/onboarding/styles.jsx
new file mode 100644
index 0000000000..a54c2c1e0a
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/styles.jsx
@@ -0,0 +1,35 @@
+import styled from 'react-emotion';
+import posed from 'react-pose';
+
+import space from 'app/styles/space';
+
+const PosedOnboardingStep = posed.div({
+  start: {opacity: 0, y: 100},
+  enter: {opacity: 1, y: 0},
+});
+
+export const OnboardingStep = styled(PosedOnboardingStep)`
+  margin-left: -20px;
+  padding-left: 18px;
+  border-left: 2px solid ${p => p.theme.borderLighter};
+  counter-increment: step;
+  position: relative;
+
+  &:before {
+    content: counter(step);
+    position: absolute;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    width: 20px;
+    height: 20px;
+    left: -20px;
+    background-color: ${p => p.theme.gray5};
+    color: #fff;
+    font-size: 1.5rem;
+  }
+
+  &:not(:last-child) {
+    margin-bottom: ${space(4)};
+  }
+`;
diff --git a/src/sentry/static/sentry/app/views/onboarding/welcome.jsx b/src/sentry/static/sentry/app/views/onboarding/welcome.jsx
new file mode 100644
index 0000000000..7ff43f6c21
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/welcome.jsx
@@ -0,0 +1,80 @@
+import React from 'react';
+import styled from 'react-emotion';
+
+import {analytics} from 'app/utils/analytics';
+import {stepPropTypes} from 'app/views/onboarding/wizardNew';
+import {t, tct} from 'app/locale';
+import Button from 'app/components/button';
+import SentryTypes from 'app/sentryTypes';
+import withConfig from 'app/utils/withConfig';
+import withOrganization from 'app/utils/withOrganization';
+
+const recordAnalyticsOnboardingSkipped = ({organization}) =>
+  analytics('onboarding_v2.skipped', {
+    org_id: parseInt(organization.id, 10),
+  });
+
+class OnboardingWelcome extends React.Component {
+  static propTypes = {
+    ...stepPropTypes,
+    config: SentryTypes.Config.isRequired,
+  };
+
+  skipOnboarding = e => {
+    const {organization} = this.props;
+    recordAnalyticsOnboardingSkipped({organization});
+  };
+
+  render() {
+    const {onComplete, config, active} = this.props;
+    const {user} = config;
+
+    return (
+      <React.Fragment>
+        <p>
+          {tct("We're happy you're here, [name]!", {
+            name: <strong>{user.name.split(' ')[0]}</strong>,
+          })}
+        </p>
+        <p>
+          {t(
+            `With Sentry, you can find and fix bugs before your customers even
+             notice a problem. When things go to hell, we'll help you fight the
+             fires. Let's get started!`
+          )}
+        </p>
+        <ul>
+          <li>{t('Choose your platform.')}</li>
+          <li>
+            {t(
+              `Install and verify the integration of Sentry into your
+               application by sending your first event.`
+            )}
+          </li>
+        </ul>
+        <ActionGroup>
+          <Button disabled={!active} priority="primary" onClick={e => onComplete()}>
+            {t("I'm Ready!")}
+          </Button>
+          <SecondaryAction>
+            {tct('Not your first Sentry rodeo? [exitLink:Skip this onboarding].', {
+              exitLink: <Button priority="link" onClick={this.skipOnboarding} to="/" />,
+            })}
+          </SecondaryAction>
+        </ActionGroup>
+      </React.Fragment>
+    );
+  }
+}
+
+const ActionGroup = styled('div')`
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+`;
+
+const SecondaryAction = styled('small')`
+  color: ${p => p.theme.gray3};
+`;
+
+export default withOrganization(withConfig(OnboardingWelcome));
diff --git a/src/sentry/static/sentry/app/views/onboarding/wizardNew.jsx b/src/sentry/static/sentry/app/views/onboarding/wizardNew.jsx
new file mode 100644
index 0000000000..4f594d50a4
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/onboarding/wizardNew.jsx
@@ -0,0 +1,328 @@
+import {browserHistory} from 'react-router';
+import DocumentTitle from 'react-document-title';
+import PropTypes from 'prop-types';
+import React from 'react';
+import posed, {PoseGroup} from 'react-pose';
+import scrollToElement from 'scroll-to-element';
+import styled from 'react-emotion';
+
+import {analytics} from 'app/utils/analytics';
+import {t} from 'app/locale';
+import InlineSvg from 'app/components/inlineSvg';
+import OnboardingPlatform from 'app/views/onboarding/platform';
+import OnboardingProjectSetup from 'app/views/onboarding/projectSetup';
+import OnboardingWelcome from 'app/views/onboarding/welcome';
+import PageHeading from 'app/components/pageHeading';
+import SentryTypes from 'app/sentryTypes';
+import space from 'app/styles/space';
+import testablePose from 'app/utils/testablePose';
+import withOrganization from 'app/utils/withOrganization';
+import withProjects from 'app/utils/withProjects';
+
+const recordAnalyticStepComplete = ({organization, project, step}) =>
+  analytics('onboarding_v2.step_compete', {
+    org_id: parseInt(organization.id, 10),
+    project: project ? project.slug : null,
+    step: step.id,
+  });
+
+const ONBOARDING_STEPS = [
+  {
+    id: 'welcome',
+    title: t('Welcome to Sentry'),
+    Component: OnboardingWelcome,
+  },
+  {
+    id: 'select-platform',
+    title: t('Select a platform'),
+    Component: OnboardingPlatform,
+  },
+  {
+    id: 'get-started',
+    title: t('Install the Sentry SDK'),
+    Component: OnboardingProjectSetup,
+  },
+];
+
+const stepShape = PropTypes.shape({
+  id: PropTypes.string,
+  title: PropTypes.string,
+  Component: PropTypes.func,
+});
+
+class OnboardingWizard extends React.Component {
+  static propTypes = {
+    steps: PropTypes.arrayOf(stepShape),
+    projects: PropTypes.arrayOf(SentryTypes.Project),
+    organization: SentryTypes.Organization,
+  };
+
+  static defaultProps = {
+    steps: ONBOARDING_STEPS,
+  };
+
+  state = {};
+
+  componentDidMount() {
+    this.validateActiveStep();
+  }
+
+  componentDidUpdate() {
+    this.validateActiveStep();
+  }
+
+  validateActiveStep() {
+    if (this.activeStepIndex == -1) {
+      const firstStep = this.props.steps[0].id;
+      browserHistory.replace(`/onboarding/${this.props.params.orgId}/${firstStep}/`);
+    }
+  }
+
+  get activeStepIndex() {
+    return this.props.steps.findIndex(({id}) => this.props.params.step === id);
+  }
+
+  get activeStep() {
+    return this.props.steps[this.activeStepIndex];
+  }
+
+  get firstProject() {
+    const sortedProjects = this.props.projects.sort(
+      (a, b) => new Date(a.dateCreated) - new Date(b.dateCreated)
+    );
+
+    return sortedProjects.length > 0 ? sortedProjects[0] : null;
+  }
+
+  get projectPlatform() {
+    return this.state.platform || this.firstProject?.platform;
+  }
+
+  handleUpdate = data => {
+    this.setState(data);
+  };
+
+  handleNextStep(step, data) {
+    this.handleUpdate(data);
+
+    if (step !== this.activeStep) {
+      return;
+    }
+
+    const {orgId} = this.props.params;
+    const nextStep = this.props.steps[this.activeStepIndex + 1];
+
+    recordAnalyticStepComplete({
+      organization: this.props.organization,
+      project: this.firstProject,
+      step: nextStep,
+    });
+
+    browserHistory.push(`/onboarding/${orgId}/${nextStep.id}/`);
+  }
+
+  handleReturnToStep(step, data) {
+    const {orgId} = this.props.params;
+
+    this.handleUpdate(data);
+    browserHistory.push(`/onboarding/${orgId}/${step.id}/`);
+  }
+
+  scrollToActiveStep = () => {
+    const step = this.activeStep;
+    scrollToElement(`#onboarding_step_${step.id}`, {
+      align: 'middle',
+      duration: 300,
+    });
+  };
+
+  renderProgressBar() {
+    const activeStepIndex = this.activeStepIndex;
+    return (
+      <ProgressBar>
+        {this.props.steps.map((step, index) => (
+          <ProgressStep active={activeStepIndex === index} key={step.id} />
+        ))}
+      </ProgressBar>
+    );
+  }
+
+  renderOnboardingSteps() {
+    const {orgId} = this.props.params;
+    const activeStepIndex = this.activeStepIndex;
+    const visibleSteps = this.props.steps.slice(0, activeStepIndex + 1);
+
+    return visibleSteps.map((step, index) => (
+      <OnboardingStep
+        key={step.id}
+        onPoseComplete={this.scrollToActiveStep}
+        active={activeStepIndex === index}
+      >
+        <PageHeading withMargins>{step.title}</PageHeading>
+        <step.Component
+          scrollTargetId={`onboarding_step_${step.id}`}
+          active={activeStepIndex === index}
+          orgId={orgId}
+          project={this.firstProject}
+          platform={this.projectPlatform}
+          onReturnToStep={data => this.handleReturnToStep(step, data)}
+          onComplete={data => this.handleNextStep(step, data)}
+          onUpdate={this.handleUpdate}
+        />
+      </OnboardingStep>
+    ));
+  }
+
+  render() {
+    if (this.activeStepIndex === -1) {
+      return null;
+    }
+
+    return (
+      <OnboardingWrapper>
+        <DocumentTitle title="Get Started on Sentry" />
+        <Header>
+          <Container>
+            <LogoSvg src="logo" />
+            {this.renderProgressBar()}
+            <PoseGroup preEnterPose="init">
+              <ProgressStatus key={this.activeStep.id}>
+                {this.activeStep.title}
+              </ProgressStatus>
+            </PoseGroup>
+          </Container>
+        </Header>
+        <Container>
+          <PoseGroup flipMove={false}>{this.renderOnboardingSteps()}</PoseGroup>
+        </Container>
+      </OnboardingWrapper>
+    );
+  }
+}
+
+const Theme = {
+  colors: {
+    gray: ['#f6f6f8', '9093c1', '#584674'],
+    pink: '#e1567c',
+  },
+};
+
+const OnboardingWrapper = styled('main')`
+  background: ${Theme.colors.gray[0]};
+  padding-bottom: 50vh;
+  min-height: 100vh;
+`;
+
+const Container = styled.div`
+  padding: 0 ${space(3)};
+  max-width: ${p => p.theme.breakpoints[0]};
+  width: 100%;
+  margin: 0 auto;
+`;
+
+const Header = styled('header')`
+  background: #fff;
+  padding: ${space(4)} 0;
+  position: sticky;
+  top: 0;
+  z-index: 100;
+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.02);
+
+  ${Container} {
+    display: grid;
+    grid-template-columns: repeat(3, 1fr);
+    align-items: center;
+  }
+`;
+
+const LogoSvg = styled(InlineSvg)`
+  width: 130px;
+  height: 30px;
+  color: ${p => p.theme.gray5};
+`;
+
+const ProgressBar = styled('div')`
+  margin: 0 ${space(4)};
+  position: relative;
+  display: flex;
+  justify-content: space-between;
+
+  &:before {
+    position: absolute;
+    display: block;
+    content: '';
+    height: 4px;
+    background: ${p => p.theme.borderLight};
+    left: 2px;
+    right: 2px;
+    top: 50%;
+    margin-top: -2px;
+  }
+`;
+
+const ProgressStep = styled('div')`
+  position: relative;
+  width: 16px;
+  height: 16px;
+  border-radius: 50%;
+  border: 4px solid ${p => (p.active ? Theme.colors.pink : p.theme.borderLight)};
+  background: #fff;
+`;
+
+const PosedProgressStatus = posed.div(
+  testablePose({
+    init: {opacity: 0, y: -10},
+    enter: {opacity: 1, y: 0},
+    exit: {opacity: 0, y: 10},
+  })
+);
+
+const ProgressStatus = styled(PosedProgressStatus)`
+  color: ${p => p.theme.gray3};
+  font-size: ${p => p.theme.fontSizeMedium};
+  text-align: right;
+`;
+
+const PosedOnboardingStep = posed.div(
+  testablePose({
+    enter: {opacity: 1, y: 0},
+    exit: {opacity: 0, y: 100},
+  })
+);
+
+const OnboardingStep = styled(PosedOnboardingStep)`
+  margin: 70px 0;
+  margin-left: -20px;
+  padding-left: 18px;
+  counter-increment: step;
+  position: relative;
+
+  &:before {
+    content: counter(step);
+    position: absolute;
+    display: flex;
+    align-items: center;
+    justify-content: center;
+    width: 30px;
+    height: 30px;
+    top: -5px;
+    left: -30px;
+    background-color: ${p => (p.active ? Theme.colors.pink : p.theme.gray2)};
+    border-radius: 50%;
+    color: #fff;
+    font-size: 1.5rem;
+  }
+`;
+
+export const stepPropTypes = {
+  scrollTargetId: PropTypes.string,
+  active: PropTypes.bool,
+  orgId: PropTypes.string,
+  project: SentryTypes.Project,
+  platform: PropTypes.string,
+  onReturnToStep: PropTypes.func,
+  onComplete: PropTypes.func,
+  onUpdate: PropTypes.func,
+};
+
+export default withOrganization(withProjects(OnboardingWizard));
diff --git a/tests/js/spec/views/onboarding/platform.spec.jsx b/tests/js/spec/views/onboarding/platform.spec.jsx
new file mode 100644
index 0000000000..5d11ddc0fa
--- /dev/null
+++ b/tests/js/spec/views/onboarding/platform.spec.jsx
@@ -0,0 +1,113 @@
+import React from 'react';
+
+import {createProject} from 'app/actionCreators/projects';
+import {mount} from 'enzyme';
+import OnboardingPlatform from 'app/views/onboarding/platform';
+import TeamStore from 'app/stores/teamStore';
+
+jest.mock('app/actionCreators/projects');
+
+describe('OnboardingWelcome', function() {
+  it('calls onUpdate when setting the platform', function() {
+    const onUpdate = jest.fn();
+
+    const wrapper = mount(
+      <OnboardingPlatform active onUpdate={onUpdate} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('[data-test-id="platform-csharp"]')
+      .first()
+      .simulate('click');
+
+    expect(onUpdate).toHaveBeenCalled();
+  });
+
+  it('calls onReturnToStep when clearing the platform', function() {
+    const onUpdate = jest.fn();
+    const onReturnToStep = jest.fn();
+
+    const wrapper = mount(
+      <OnboardingPlatform
+        platform="csharp"
+        onUpdate={onUpdate}
+        onReturnToStep={onReturnToStep}
+      />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('ClearButton')
+      .first()
+      .simulate('click');
+
+    expect(onReturnToStep).toHaveBeenCalled();
+  });
+
+  it('creates a project when no project exists', async function() {
+    const onComplete = jest.fn();
+
+    const wrapper = mount(
+      <OnboardingPlatform active onComplete={onComplete} />,
+      TestStubs.routerContext()
+    );
+
+    const getButton = () => wrapper.find('Button[priority="primary"]');
+
+    expect(getButton().props().disabled).toBe(true);
+
+    // Select a platform to create
+    wrapper.setProps({platform: 'csharp'});
+    TeamStore.loadInitialData([{id: '1', slug: 'team-slug'}]);
+    expect(getButton().text()).toEqual('Create Project');
+    expect(getButton().props().disabled).toBe(false);
+
+    let resolveProjectCreate;
+    createProject.mockReturnValue(
+      new Promise((resolve, reject) => (resolveProjectCreate = resolve))
+    );
+
+    // Create the project
+    getButton().simulate('click');
+
+    expect(getButton().text()).toEqual('Creating Project...');
+
+    // Project completed creation (tick for async completion)
+    resolveProjectCreate({id: 1, slug: 'test-project'});
+    await tick();
+
+    wrapper.setProps({active: false});
+    expect(getButton().text()).toEqual('Project Created');
+    expect(onComplete).toHaveBeenCalled();
+  });
+
+  it('does not create a project if one already exists', async function() {
+    createProject.mockReset();
+    const onComplete = jest.fn();
+
+    const wrapper = mount(
+      <OnboardingPlatform
+        active
+        project={{id: '1', slug: 'test'}}
+        platform="csharp"
+        onComplete={onComplete}
+      />,
+      TestStubs.routerContext()
+    );
+
+    const getButton = () => wrapper.find('Button[priority="primary"]');
+
+    TeamStore.loadInitialData([{id: '1', slug: 'team-slug'}]);
+    expect(getButton().text()).toEqual('Setup Your Project');
+    expect(getButton().props().disabled).toBe(false);
+
+    // Create the project
+    getButton().simulate('click');
+    await tick();
+
+    expect(getButton().props().disabled).toBe(true);
+    expect(createProject).not.toHaveBeenCalled();
+    expect(onComplete).toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx b/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx
new file mode 100644
index 0000000000..2be21c9958
--- /dev/null
+++ b/tests/js/spec/views/onboarding/projectSetup/eventWaiter.spec.jsx
@@ -0,0 +1,157 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import EventWaiter from 'app/views/onboarding/projectSetup/eventWaiter';
+
+jest.useFakeTimers();
+
+describe('EventWaiter', function() {
+  it('waits for the first projet event', async function() {
+    const org = TestStubs.Organization();
+    const project = TestStubs.ProjectDetails({
+      firstEvent: null,
+    });
+
+    // Start with a project *without* a first event
+    const projectApiMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: project,
+    });
+
+    const child = jest.fn().mockReturnValue(null);
+
+    mount(
+      <EventWaiter
+        api={new MockApiClient()}
+        organization={org}
+        project={project}
+        pollInterval={10}
+      >
+        {child}
+      </EventWaiter>,
+      TestStubs.routerContext()
+    );
+
+    expect(child).toHaveBeenCalledWith({firstIssue: null});
+
+    // Add the first events and associated responses and tick the timer
+    project.firstEvent = '2019-05-01T00:00:00.000Z';
+
+    const events = [
+      {
+        id: 1,
+        firstSeen: project.firstEvent,
+      },
+      {
+        id: 2,
+        firstSeen: null,
+      },
+    ];
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/issues/`,
+      method: 'GET',
+      body: events,
+    });
+
+    child.mockClear();
+
+    // Advanced time for the first setInterval tick to occur
+    jest.advanceTimersByTime(1);
+
+    // We have to await *two* API calls. We could norally do this using tick(),
+    // however since we have enabled fake timers, we cannot tick.
+    await Promise.resolve();
+    await Promise.resolve();
+
+    expect(child).toHaveBeenCalledWith({firstIssue: events[0]});
+
+    // Check that the polling has stopped
+    projectApiMock.mockClear();
+
+    jest.advanceTimersByTime(10);
+    expect(projectApiMock).not.toHaveBeenCalled();
+  });
+
+  it('recieves a first event of `true` when first even has expired', async function() {
+    const org = TestStubs.Organization();
+    const project = TestStubs.ProjectDetails({
+      firstEvent: '2019-05-01T00:00:00.000Z',
+    });
+
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: project,
+    });
+
+    // No events to list
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/issues/`,
+      method: 'GET',
+      body: [],
+    });
+
+    const child = jest.fn().mockReturnValue(null);
+
+    mount(
+      <EventWaiter
+        api={new MockApiClient()}
+        organization={org}
+        project={project}
+        pollInterval={10}
+      >
+        {child}
+      </EventWaiter>,
+      TestStubs.routerContext()
+    );
+
+    // We have to await *two* API calls. We could norally do this using tick(),
+    // however since we have enabled fake timers, we cannot tick.
+    await Promise.resolve();
+    await Promise.resolve();
+
+    expect(child).toHaveBeenCalledWith({firstIssue: true});
+  });
+
+  it('does not poll when disabled', function() {
+    const org = TestStubs.Organization();
+    const project = TestStubs.ProjectDetails();
+
+    const projectApiMock = MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/`,
+      method: 'GET',
+      body: project,
+    });
+
+    // No events to list
+    MockApiClient.addMockResponse({
+      url: `/projects/${org.slug}/${project.slug}/issues/`,
+      method: 'GET',
+      body: [],
+    });
+
+    const child = jest.fn().mockReturnValue(null);
+
+    mount(
+      <EventWaiter
+        api={new MockApiClient()}
+        organization={org}
+        project={project}
+        pollInterval={10}
+        disabled
+      >
+        {child}
+      </EventWaiter>,
+      TestStubs.routerContext()
+    );
+
+    expect(child).toHaveBeenCalledWith({firstIssue: null});
+
+    // Ensure we do not call it again
+    projectApiMock.mockClear();
+    jest.advanceTimersByTime(10);
+    expect(projectApiMock).not.toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx b/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx
new file mode 100644
index 0000000000..3594f20b14
--- /dev/null
+++ b/tests/js/spec/views/onboarding/projectSetup/firstEventIndicator.spec.jsx
@@ -0,0 +1,47 @@
+import React from 'react';
+
+import {Indicator} from 'app/views/onboarding/projectSetup/firstEventIndicator';
+import {mount} from 'enzyme';
+
+describe('FirstEventIndicator', function() {
+  it('renders waiting status', async function() {
+    const org = TestStubs.Organization();
+
+    const wrapper = mount(
+      <Indicator orgId={org.slug} firstIssue={null} />,
+      TestStubs.routerContext()
+    );
+
+    expect(wrapper.find('WaitingIndicator').exists()).toBe(true);
+  });
+
+  describe('recieved first event', function() {
+    it('renders', function() {
+      const org = TestStubs.Organization();
+
+      const wrapper = mount(
+        <Indicator orgId={org.slug} firstIssue={{id: 1}} />,
+        TestStubs.routerContext()
+      );
+
+      expect(wrapper.find('ReceivedIndicator').exists()).toBe(true);
+      expect(wrapper.find('Button').props().to).toBe(
+        `/organizations/${org.slug}/issues/1/`
+      );
+    });
+
+    it('renders without a known issue ID', async function() {
+      const org = TestStubs.Organization();
+      const project = TestStubs.ProjectDetails({});
+
+      const wrapper = mount(
+        <Indicator organization={org} project={project} firstIssue={true} />,
+        TestStubs.routerContext()
+      );
+
+      // No button when there is no known issue ID
+      expect(wrapper.find('ReceivedIndicator').exists()).toBe(true);
+      expect(wrapper.find('Button').exists()).toBe(false);
+    });
+  });
+});
diff --git a/tests/js/spec/views/onboarding/welcome.spec.jsx b/tests/js/spec/views/onboarding/welcome.spec.jsx
new file mode 100644
index 0000000000..1aeec8c964
--- /dev/null
+++ b/tests/js/spec/views/onboarding/welcome.spec.jsx
@@ -0,0 +1,51 @@
+import React from 'react';
+
+import {mount} from 'enzyme';
+import OnboardingWelcome from 'app/views/onboarding/welcome';
+import ConfigStore from 'app/stores/configStore';
+
+describe('OnboardingWelcome', function() {
+  it('renders', function() {
+    const name = 'Rick Snachez';
+    ConfigStore.loadInitialData({user: {name, options: {}}});
+
+    const wrapper = mount(<OnboardingWelcome />, TestStubs.routerContext());
+
+    expect(
+      wrapper
+        .find('p')
+        .first()
+        .text()
+    ).toEqual(expect.stringContaining('Rick'));
+  });
+
+  it('calls onComplete when progressing', function() {
+    const onComplete = jest.fn();
+    const wrapper = mount(
+      <OnboardingWelcome active onComplete={onComplete} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('Button[priority="primary"]')
+      .first()
+      .simulate('click');
+
+    expect(onComplete).toHaveBeenCalled();
+  });
+
+  it('disables the next step button when it is not active', function() {
+    const onComplete = jest.fn();
+    const wrapper = mount(
+      <OnboardingWelcome onComplete={onComplete} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('Button[priority="primary"]')
+      .first()
+      .simulate('click');
+
+    expect(onComplete).not.toHaveBeenCalled();
+  });
+});
diff --git a/tests/js/spec/views/onboarding/wizardNew.spec.jsx b/tests/js/spec/views/onboarding/wizardNew.spec.jsx
new file mode 100644
index 0000000000..9751bf5952
--- /dev/null
+++ b/tests/js/spec/views/onboarding/wizardNew.spec.jsx
@@ -0,0 +1,201 @@
+import {browserHistory} from 'react-router';
+import React from 'react';
+
+import {initializeOrg} from 'app-test/helpers/initializeOrg';
+import {mount} from 'enzyme';
+import OnboardingWizard, {stepPropTypes} from 'app/views/onboarding/wizardNew';
+import ProjectsStore from 'app/stores/projectsStore';
+
+const MockStep = ({
+  name,
+  data,
+  scrollTargetId,
+  active,
+  orgId,
+  project,
+  platform,
+  onReturnToStep,
+  onComplete,
+  onUpadte,
+}) => (
+  <div>
+    {active && <div id="is_active" />}
+    <div id="step_name" data-scroll-id={scrollTargetId}>
+      {name}
+    </div>
+    <div id="project_slug">{project && project.slug}</div>
+    <a id="complete" href="#" onClick={e => onComplete(data)} />
+    <a id="update" href="#" onClick={e => onUpadte(data)} />
+    <a id="return" href="#" onClick={e => onReturnToStep(data)} />
+  </div>
+);
+
+MockStep.propTypes = stepPropTypes;
+
+const makeMockStep = preFill => p => <MockStep {...preFill} {...p} />;
+
+const MOCKED_STEPS = [
+  {
+    id: 'step1',
+    title: 'Step One',
+    Component: makeMockStep({name: 'step_1', data: {}}),
+  },
+  {
+    id: 'step2',
+    title: 'Step Two',
+    Component: makeMockStep({name: 'step_2', data: {}}),
+  },
+  {
+    id: 'step3',
+    title: 'Step Three',
+    Component: makeMockStep({name: 'step_3', data: {}}),
+  },
+];
+
+describe('OnboardingWizard', function() {
+  it('redirects to first step if invalid step ID present', function() {
+    browserHistory.replace = jest.fn();
+
+    const params = {
+      step: 'bad-step',
+      orgId: 'org-bar',
+    };
+
+    mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      TestStubs.routerContext()
+    );
+
+    expect(browserHistory.replace).toHaveBeenCalledWith('/onboarding/org-bar/step1/');
+  });
+
+  it('renders one step', function() {
+    const params = {
+      step: 'step1',
+      orgId: 'org-bar',
+    };
+
+    const wrapper = mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      TestStubs.routerContext()
+    );
+
+    // Validate that there is only one step
+    expect(wrapper.find('#step_name')).toHaveLength(1);
+    expect(wrapper.find('#step_name').text()).toEqual('step_1');
+    expect(wrapper.find('PageHeading').text()).toEqual('Step One');
+    expect(wrapper.find('ProgressStatus').text()).toEqual('Step One');
+    expect(wrapper.find('#is_active').exists()).toEqual(true);
+
+    // Validate that the progress bar is displayed and active
+    expect(wrapper.find('ProgressStep')).toHaveLength(3);
+    expect(
+      wrapper
+        .find('ProgressStep')
+        .first()
+        .props().active
+    ).toBe(true);
+  });
+
+  it('moves to next step on complete', function() {
+    browserHistory.replace = jest.fn();
+
+    const params = {
+      step: 'step1',
+      orgId: 'org-bar',
+    };
+
+    const wrapper = mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper.find('#complete').simulate('click');
+    expect(browserHistory.push).toHaveBeenCalledWith('/onboarding/org-bar/step2/');
+  });
+
+  it('renders first and second step', function() {
+    const params = {
+      step: 'step2',
+      orgId: 'org-bar',
+    };
+
+    const wrapper = mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      TestStubs.routerContext()
+    );
+
+    // Validate both steps exist
+    expect(wrapper.find('ProgressStatus').text()).toEqual('Step Two');
+    expect(wrapper.find('#step_name')).toHaveLength(2);
+    expect(
+      wrapper
+        .find('#step_name')
+        .at(1)
+        .text()
+    ).toEqual('step_2');
+
+    // First step is not active
+    expect(
+      wrapper
+        .find('MockStep')
+        .at(0)
+        .find('#active')
+        .exists()
+    ).toBe(false);
+
+    // Second step is active
+    expect(
+      wrapper
+        .find('MockStep')
+        .at(1)
+        .find('#active')
+        .exists()
+    ).toBe(false);
+  });
+
+  it('returns to step one when onReturnToStep is triggered', function() {
+    browserHistory.replace = jest.fn();
+
+    const params = {
+      step: 'step2',
+      orgId: 'org-bar',
+    };
+
+    const wrapper = mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      TestStubs.routerContext()
+    );
+
+    wrapper
+      .find('#return')
+      .at(0)
+      .simulate('click');
+    expect(browserHistory.push).toHaveBeenCalledWith('/onboarding/org-bar/step1/');
+  });
+
+  it('passes the first existing project', function() {
+    const {organization, projects, routerContext} = initializeOrg({
+      // Multiple projects with different creation dates, to ensure it picks
+      // the oldest project
+      projects: [
+        {id: 1, slug: 'first', dateCreated: 'May 16 2019 13:55:20 GMT-0700'},
+        {id: 2, slug: 'second', dateCreated: 'May 17 2019 13:55:20 GMT-0700'},
+      ],
+    });
+
+    ProjectsStore.loadInitialData(projects);
+
+    const params = {
+      step: 'step1',
+      orgId: organization.slug,
+    };
+
+    const wrapper = mount(
+      <OnboardingWizard steps={MOCKED_STEPS} params={params} />,
+      routerContext
+    );
+
+    expect(wrapper.find('#project_slug').text()).toBe('first');
+  });
+});
diff --git a/yarn.lock b/yarn.lock
index 9dbe96cf59..2ea6c0b5b9 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1048,6 +1048,18 @@
   dependencies:
     "@emotion/memoize" "^0.6.6"
 
+"@emotion/is-prop-valid@^0.7.3":
+  version "0.7.3"
+  resolved "https://registry.yarnpkg.com/@emotion/is-prop-valid/-/is-prop-valid-0.7.3.tgz#a6bf4fa5387cbba59d44e698a4680f481a8da6cc"
+  integrity sha512-uxJqm/sqwXw3YPA5GXX365OBcJGFtxUVkB6WyezqFHlNe9jqUWH5ur2O2M8dGBz61kn1g3ZBlzUunFQXQIClhA==
+  dependencies:
+    "@emotion/memoize" "0.7.1"
+
+"@emotion/memoize@0.7.1":
+  version "0.7.1"
+  resolved "https://registry.yarnpkg.com/@emotion/memoize/-/memoize-0.7.1.tgz#e93c13942592cf5ef01aa8297444dc192beee52f"
+  integrity sha512-Qv4LTqO11jepd5Qmlp3M1YEjBumoTHcHFdgPTQ+sFlIL5myi/7xu/POwP7IRu6odBdmLXdtIs1D6TuW6kbwbbg==
+
 "@emotion/memoize@^0.6.1", "@emotion/memoize@^0.6.6":
   version "0.6.6"
   resolved "https://registry.yarnpkg.com/@emotion/memoize/-/memoize-0.6.6.tgz#004b98298d04c7ca3b4f50ca2035d4f60d2eed1b"
@@ -1130,6 +1142,21 @@
   resolved "https://registry.yarnpkg.com/@nodelib/fs.stat/-/fs.stat-1.1.3.tgz#2b5a3ab3f918cca48a8c754c08168e3f03eba61b"
   integrity sha512-shAmDyaQC4H92APFoIaVDHCx5bStIocgvbwQyxPRrbUY20V1EYTbSDchWbuwlMG3V17cprZhA6+78JfB+3DTPw==
 
+"@popmotion/easing@^1.0.1":
+  version "1.0.2"
+  resolved "https://registry.yarnpkg.com/@popmotion/easing/-/easing-1.0.2.tgz#17d925c45b4bf44189e5a38038d149df42d8c0b4"
+  integrity sha512-IkdW0TNmRnWTeWI7aGQIVDbKXPWHVEYdGgd5ZR4SH/Ty/61p63jCjrPxX1XrR7IGkl08bjhJROStD7j+RKgoIw==
+
+"@popmotion/popcorn@^0.4.0":
+  version "0.4.0"
+  resolved "https://registry.yarnpkg.com/@popmotion/popcorn/-/popcorn-0.4.0.tgz#089ba62a7a8801ba18876d42149d4289992b926c"
+  integrity sha512-vrCzLNT/ZscfrviWirZwRvpD9hSzCTNRxgUwHb1xvDNKJaXSNKTAeS/aiIdV3A/o/09Gu9CyMI0BpVGhK78wnw==
+  dependencies:
+    "@popmotion/easing" "^1.0.1"
+    framesync "^4.0.1"
+    hey-listen "^1.0.8"
+    style-value-types "^3.1.4"
+
 "@sentry/browser@5.2.0-beta.0":
   version "5.2.0-beta.0"
   resolved "https://registry.yarnpkg.com/@sentry/browser/-/browser-5.2.0-beta.0.tgz#8c2f54cdf946dd535d51e95c4272cd8df76cfc61"
@@ -1631,10 +1658,15 @@
     "@svgr/plugin-svgo" "^4.0.3"
     loader-utils "^1.1.0"
 
-"@types/node@*":
-  version "10.9.3"
-  resolved "https://registry.yarnpkg.com/@types/node/-/node-10.9.3.tgz#85f288502503ade0b3bfc049fe1777b05d0327d5"
-  integrity sha512-DOzWZKUnmFYG0KUOs+9HEBju2QhBU6oM2zeluunQNt0vnJvnkHvtDNlQPZDkTrkC5pZrNx1TPqeL137zciXZMQ==
+"@types/invariant@^2.2.29":
+  version "2.2.29"
+  resolved "https://registry.yarnpkg.com/@types/invariant/-/invariant-2.2.29.tgz#aa845204cd0a289f65d47e0de63a6a815e30cc66"
+  integrity sha512-lRVw09gOvgviOfeUrKc/pmTiRZ7g7oDOU6OAutyuSHpm1/o2RaBQvRhgK8QEdu+FFuw/wnWb29A/iuxv9i8OpQ==
+
+"@types/node@*", "@types/node@^10.0.5":
+  version "10.14.7"
+  resolved "https://registry.yarnpkg.com/@types/node/-/node-10.14.7.tgz#1854f0a9aa8d2cd6818d607b3d091346c6730362"
+  integrity sha512-on4MmIDgHXiuJDELPk1NFaKVUxxCFr37tm8E9yN6rAiF5Pzp/9bBfBHkoexqRiY+hk/Z04EJU9kKEb59YqJ82A==
 
 "@types/q@^1.5.1":
   version "1.5.1"
@@ -5917,6 +5949,13 @@ fragment-cache@^0.2.1:
   dependencies:
     map-cache "^0.2.2"
 
+framesync@^4.0.0, framesync@^4.0.1:
+  version "4.0.2"
+  resolved "https://registry.yarnpkg.com/framesync/-/framesync-4.0.2.tgz#b03b62852f12b0d80086b60834b089718f03cda5"
+  integrity sha512-hQLD5NURHmzB4Symo6JJ5HDw2TWwhr6T3gw9aChNMsZvkxcD8U8Gcz/hllAOOMGE+HO3ScpRPahpXDQRgF19JQ==
+  dependencies:
+    hey-listen "^1.0.5"
+
 fresh@0.5.2:
   version "0.5.2"
   resolved "https://registry.yarnpkg.com/fresh/-/fresh-0.5.2.tgz#3d8cadd90d976569fa835ab1f8e4b23a105605a7"
@@ -6463,6 +6502,11 @@ hex-color-regex@^1.1.0:
   resolved "https://registry.yarnpkg.com/hex-color-regex/-/hex-color-regex-1.1.0.tgz#4c06fccb4602fe2602b3c93df82d7e7dbf1a8a8e"
   integrity sha512-l9sfDFsuqtOqKDsQdqrMRk0U85RZc0RtOR9yPI7mRVOa4FsR/BVnZ0shmQRM96Ji99kYZP/7hn1cedc1+ApsTQ==
 
+hey-listen@^1.0.5, hey-listen@^1.0.8:
+  version "1.0.8"
+  resolved "https://registry.yarnpkg.com/hey-listen/-/hey-listen-1.0.8.tgz#8e59561ff724908de1aa924ed6ecc84a56a9aa68"
+  integrity sha512-COpmrF2NOg4TBWUJ5UVyaCU2A88wEMkUPK4hNqyCkqHbxT92BbvfjoSozkAIIm6XhicGlJHhFdullInrdhwU8Q==
+
 highlight.js@~9.12.0:
   version "9.12.0"
   resolved "https://registry.yarnpkg.com/highlight.js/-/highlight.js-9.12.0.tgz#e6d9dbe57cbefe60751f02af336195870c90c01e"
@@ -9820,6 +9864,32 @@ po-catalog-loader@2.0.0:
   dependencies:
     loader-utils "1.1.0"
 
+popmotion-pose@^3.4.0:
+  version "3.4.8"
+  resolved "https://registry.yarnpkg.com/popmotion-pose/-/popmotion-pose-3.4.8.tgz#a50d7d2e91014405402f23400b08994fd148b5ce"
+  integrity sha512-/dkEhDiTYkbLb15dkrU3Okh58KU5I8z3f18V7kciN/cJmSc8ZD8tWgOc8U9yJf3lUHnf/va5PMCX4/4RnVeUiQ==
+  dependencies:
+    "@popmotion/easing" "^1.0.1"
+    hey-listen "^1.0.5"
+    popmotion "^8.6.2"
+    pose-core "^2.1.0"
+    style-value-types "^3.0.6"
+    ts-essentials "^1.0.3"
+    tslib "^1.9.1"
+
+popmotion@^8.6.2:
+  version "8.6.9"
+  resolved "https://registry.yarnpkg.com/popmotion/-/popmotion-8.6.9.tgz#c8d0626a3956afef6c7aab357b424cf175363396"
+  integrity sha512-GxzbiANHxuMv8i14/U2zVa5a0UBBJu5fcAWsoeMlNkJm3aTl9Z9d2JqVB6N7EnKYyah8KDfK2ScvP9G83SLFfg==
+  dependencies:
+    "@popmotion/easing" "^1.0.1"
+    "@popmotion/popcorn" "^0.4.0"
+    framesync "^4.0.0"
+    hey-listen "^1.0.5"
+    style-value-types "^3.1.4"
+    stylefire "^4.1.3"
+    tslib "^1.9.1"
+
 popper.js@^1.14.4:
   version "1.15.0"
   resolved "https://registry.yarnpkg.com/popper.js/-/popper.js-1.15.0.tgz#5560b99bbad7647e9faa475c6b8056621f5a4ff2"
@@ -9834,6 +9904,16 @@ portfinder@^1.0.9:
     debug "^2.2.0"
     mkdirp "0.5.x"
 
+pose-core@^2.1.0:
+  version "2.1.0"
+  resolved "https://registry.yarnpkg.com/pose-core/-/pose-core-2.1.0.tgz#653c85a9a06f924611b909b4a2180ce102bbb258"
+  integrity sha512-36mVAnIgbM6jfyRug8EqqFbazHUAk9dxwVRpX61FlVw3amI/j7AFegtVU56N0Dht2aYDJIhgYPUYraT1CzjHDw==
+  dependencies:
+    "@types/invariant" "^2.2.29"
+    "@types/node" "^10.0.5"
+    hey-listen "^1.0.5"
+    tslib "^1.9.1"
+
 posix-character-classes@^0.1.0:
   version "0.1.1"
   resolved "https://registry.yarnpkg.com/posix-character-classes/-/posix-character-classes-0.1.1.tgz#01eac0fe3b5af71a2a6c02feabb8c1fef7e00eab"
@@ -11012,6 +11092,16 @@ react-popper@^1.3.3:
     typed-styles "^0.0.7"
     warning "^4.0.2"
 
+react-pose@^4.0.8:
+  version "4.0.8"
+  resolved "https://registry.yarnpkg.com/react-pose/-/react-pose-4.0.8.tgz#91bdfafde60e4096e7878a35dcc77715bed68f24"
+  integrity sha512-WN/583nKJZkKmKg5ha+eErOGWF9GV6A5EngC7WHQX5b910X9rTlOlxzdKlUy/dDcsTRMZEtHV0Sy2gLPYsVQCQ==
+  dependencies:
+    "@emotion/is-prop-valid" "^0.7.3"
+    hey-listen "^1.0.5"
+    popmotion-pose "^3.4.0"
+    tslib "^1.9.1"
+
 react-prop-types@^0.4.0:
   version "0.4.0"
   resolved "https://registry.yarnpkg.com/react-prop-types/-/react-prop-types-0.4.0.tgz#f99b0bfb4006929c9af2051e7c1414a5c75b93d0"
@@ -12667,6 +12757,13 @@ style-search@^0.1.0:
   resolved "https://registry.yarnpkg.com/style-search/-/style-search-0.1.0.tgz#7958c793e47e32e07d2b5cafe5c0bf8e12e77902"
   integrity sha1-eVjHk+R+MuB9K1yv5cC/jhLneQI=
 
+style-value-types@^3.0.6, style-value-types@^3.1.4:
+  version "3.1.4"
+  resolved "https://registry.yarnpkg.com/style-value-types/-/style-value-types-3.1.4.tgz#8c0959d26405eb0cbad40097b496220d41c22169"
+  integrity sha512-jHxRZWQpx6imY+QIveHTZwGOJWJqX3Cmt6Yk1zCGeQjk4noEsX+lfvFJUmRPpZL3VTrfGrHtjVWTcvcHx/OFhQ==
+  dependencies:
+    hey-listen "^1.0.8"
+
 styled-system@^1.0.2:
   version "1.1.1"
   resolved "https://registry.yarnpkg.com/styled-system/-/styled-system-1.1.1.tgz#6611da9ce5e561b50f217996ea555ea7b1855d5d"
@@ -12674,6 +12771,16 @@ styled-system@^1.0.2:
   dependencies:
     prop-types "^15.6.0"
 
+stylefire@^4.1.3:
+  version "4.1.4"
+  resolved "https://registry.yarnpkg.com/stylefire/-/stylefire-4.1.4.tgz#42de066da75762bf086de33856a45ac95f7d66ce"
+  integrity sha512-bp9nNTTFHdIQp/4szBuF2z85rMAq5oySeAHdpNgPTcVlXDrwsi1FjjOLug/4+yx1p8eMFFGrkAex7b5/M95ivg==
+  dependencies:
+    "@popmotion/popcorn" "^0.4.0"
+    framesync "^4.0.0"
+    hey-listen "^1.0.8"
+    style-value-types "^3.1.4"
+
 stylehacks@^4.0.0:
   version "4.0.1"
   resolved "https://registry.yarnpkg.com/stylehacks/-/stylehacks-4.0.1.tgz#3186595d047ab0df813d213e51c8b94e0b9010f2"
@@ -13207,7 +13314,12 @@ trough@^1.0.0:
   resolved "https://registry.yarnpkg.com/trough/-/trough-1.0.2.tgz#7f1663ec55c480139e2de5e486c6aef6cc24a535"
   integrity sha512-FHkoUZvG6Egrv9XZAyYGKEyb1JMsFphgPjoczkZC2y6W93U1jswcVURB8MUvtsahEPEVACyxD47JAL63vF4JsQ==
 
-tslib@^1.9.0, tslib@^1.9.3:
+ts-essentials@^1.0.3:
+  version "1.0.4"
+  resolved "https://registry.yarnpkg.com/ts-essentials/-/ts-essentials-1.0.4.tgz#ce3b5dade5f5d97cf69889c11bf7d2da8555b15a"
+  integrity sha512-q3N1xS4vZpRouhYHDPwO0bDW3EZ6SK9CrrDHxi/D6BPReSjpVgWIOpLS2o0gSBZm+7q/wyKp6RVM1AeeW7uyfQ==
+
+tslib@^1.9.0, tslib@^1.9.1, tslib@^1.9.3:
   version "1.9.3"
   resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.9.3.tgz#d7e4dd79245d85428c4d7e4822a79917954ca286"
   integrity sha512-4krF8scpejhaOgqzBEcGM7yDIEfi0/8+8zDRZhNZZ2kjmHJ4hv3zCbQWxoJGz1iw5U0Jl0nma13xzHXcncMavQ==
