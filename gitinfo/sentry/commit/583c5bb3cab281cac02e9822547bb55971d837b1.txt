commit 583c5bb3cab281cac02e9822547bb55971d837b1
Author: William Mak <william@wmak.io>
Date:   Fri Feb 14 09:49:15 2020 -0500

    fix(release) - Fix permissions caching for releases (#16918)
    
    * fix(release) - Fix permissions caching for releases
    
    - This introduces project ids as part of the caching permissions, since
      we don't currently include this, has_perms can return the incorrect
      value if the list of project_ids is changed.
      - eg. first load returns 404, next 60s of loads even with correct
        project_ids will still 404
    
    - Uses getlist for project ids instead:
    - While this means that we won't be checking that the actor has
      permissions before serving from cache. The check should still happen
      when cache is being set. Which should mean at worst an actor had
      permissions, set the cache and was revoked permissions. They'd have
      access to the release for only 60s.
      - They shouldn't have access to other projects since the key would
        never match, and won't get set by the cache.

diff --git a/src/sentry/api/bases/organization.py b/src/sentry/api/bases/organization.py
index 34540f596b..533baa69c7 100644
--- a/src/sentry/api/bases/organization.py
+++ b/src/sentry/api/bases/organization.py
@@ -317,7 +317,8 @@ class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
         on the projects to which the release is attached?
 
         If the given request has an actor (user or ApiKey), cache the results
-        for a minute on the unique combination of actor,org,release.
+        for a minute on the unique combination of actor,org,release, and project
+        ids.
         """
         actor_id = None
         has_perms = None
@@ -326,7 +327,10 @@ class OrganizationReleasesBaseEndpoint(OrganizationEndpoint):
         if getattr(request, "auth", None) and request.auth.id:
             actor_id = "apikey:%s" % request.auth.id
         if actor_id is not None:
-            key = "release_perms:1:%s" % hash_values([actor_id, organization.id, release.id])
+            project_ids = sorted(set(map(int, request.GET.getlist("project"))))
+            key = "release_perms:1:%s" % hash_values(
+                [actor_id, organization.id, release.id] + project_ids
+            )
             has_perms = cache.get(key)
         if has_perms is None:
             has_perms = ReleaseProject.objects.filter(
diff --git a/tests/sentry/api/endpoints/test_organization_release_details.py b/tests/sentry/api/endpoints/test_organization_release_details.py
index 46d2d3c4db..7a47d8b933 100644
--- a/tests/sentry/api/endpoints/test_organization_release_details.py
+++ b/tests/sentry/api/endpoints/test_organization_release_details.py
@@ -102,6 +102,35 @@ class ReleaseDetailsTest(APITestCase):
 
         assert response.status_code == 200, response.content
 
+    def test_wrong_project(self):
+        user = self.create_user(is_staff=False, is_superuser=False)
+        org = self.organization
+        org.flags.allow_joinleave = False
+        org.save()
+
+        team1 = self.create_team(organization=org)
+
+        project = self.create_project(teams=[team1], organization=org)
+        project2 = self.create_project(teams=[team1], organization=org)
+
+        release = Release.objects.create(organization_id=org.id, version="abcabcabc")
+        release.add_project(project)
+
+        self.create_member(teams=[team1], user=user, organization=org)
+
+        self.login_as(user=user)
+
+        url = reverse(
+            "sentry-api-0-organization-release-details",
+            kwargs={"organization_slug": org.slug, "version": release.version},
+        )
+
+        response = self.client.get(url, {"project": project2.id})
+        assert response.status_code == 404
+
+        response = self.client.get(url, {"project": project.id})
+        assert response.status_code == 200
+
 
 class UpdateReleaseDetailsTest(APITestCase):
     @patch("sentry.tasks.commits.fetch_commits")
