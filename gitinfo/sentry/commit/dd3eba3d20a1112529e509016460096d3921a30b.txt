commit dd3eba3d20a1112529e509016460096d3921a30b
Author: Matt Robenolt <matt@ydekproductions.com>
Date:   Wed Mar 7 15:33:05 2018 -0800

    feat(api): Add event-ownership endpoint (#7496)

diff --git a/src/sentry/api/endpoints/event_owners.py b/src/sentry/api/endpoints/event_owners.py
new file mode 100644
index 0000000000..3cc4d46000
--- /dev/null
+++ b/src/sentry/api/endpoints/event_owners.py
@@ -0,0 +1,45 @@
+from __future__ import absolute_import
+
+from rest_framework.response import Response
+
+from sentry.api.bases.project import ProjectEndpoint
+from sentry.api.fields.actor import Actor
+from sentry.api.serializers import serialize
+from sentry.api.serializers.models.actor import ActorSerializer
+from sentry.models import Event, ProjectOwnership
+
+
+class EventOwnersEndpoint(ProjectEndpoint):
+    def get(self, request, project, event_id):
+        """
+        Retrieve suggested owners information for an event
+        ``````````````````````````````````````````````````
+
+        :pparam string project_slug: the slug of the project the event
+                                     belongs to.
+        :pparam string event_id: the id of the event.
+        :auth: required
+        """
+        try:
+            event = Event.objects.get(
+                id=event_id,
+                project_id=project.id,
+            )
+        except Event.DoesNotExist:
+            return Response({'detail': 'Event not found'}, status=404)
+
+        # populate event data
+        Event.objects.bind_nodes([event], 'data')
+
+        owners = ProjectOwnership.get_owners(project.id, event.data)
+
+        # For sake of the API, we don't differentiate between
+        # the implicit "everyone" and no owners
+        if owners == ProjectOwnership.Everyone:
+            owners = []
+
+        return Response(serialize(
+            Actor.resolve_many(owners),
+            request.user,
+            ActorSerializer(),
+        ))
diff --git a/src/sentry/api/fields/actor.py b/src/sentry/api/fields/actor.py
index e7a7b6907e..247fd50eaf 100644
--- a/src/sentry/api/fields/actor.py
+++ b/src/sentry/api/fields/actor.py
@@ -46,6 +46,9 @@ class Actor(object):
 
     @classmethod
     def resolve_many(cls, actors):
+        if not actors:
+            return []
+
         actors_by_type = defaultdict(list)
         for actor in actors:
             actors_by_type[actor.type].append(actor)
@@ -76,6 +79,11 @@ class Actor(object):
             for key, value in actor_dict.items()
         }
 
+    def __eq__(self, other):
+        if type(other) != type(self):
+            return False
+        return (self.id, self.type) == (other.id, other.type)
+
 
 class ActorField(serializers.WritableField):
     def to_native(self, obj):
diff --git a/src/sentry/api/urls.py b/src/sentry/api/urls.py
index 7ad3a5287a..ca79cd1258 100644
--- a/src/sentry/api/urls.py
+++ b/src/sentry/api/urls.py
@@ -13,6 +13,7 @@ from .endpoints.broadcast_index import BroadcastIndexEndpoint
 from .endpoints.catchall import CatchallEndpoint
 from .endpoints.chunk import ChunkUploadEndpoint
 from .endpoints.event_details import EventDetailsEndpoint
+from .endpoints.event_owners import EventOwnersEndpoint
 from .endpoints.event_apple_crash_report import EventAppleCrashReportEndpoint
 from .endpoints.group_details import GroupDetailsEndpoint
 from .endpoints.group_environment_details import GroupEnvironmentDetailsEndpoint
@@ -568,6 +569,11 @@ urlpatterns = patterns(
         EventFileCommittersEndpoint.as_view(),
         name='sentry-api-0-event-file-committers'
     ),
+    url(
+        r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/events/(?P<event_id>[\w-]+)/owners/$',
+        EventOwnersEndpoint.as_view(),
+        name='sentry-api-0-event-owners'
+    ),
     url(
         r'^projects/(?P<organization_slug>[^\/]+)/(?P<project_slug>[^\/]+)/files/dsyms/$',
         DSymFilesEndpoint.as_view(),
diff --git a/src/sentry/models/projectownership.py b/src/sentry/models/projectownership.py
index 10f6d8d183..a263460b04 100644
--- a/src/sentry/models/projectownership.py
+++ b/src/sentry/models/projectownership.py
@@ -7,6 +7,7 @@ from django.utils import timezone
 
 from sentry.db.models import Model, sane_repr
 from sentry.db.models.fields import FlexibleForeignKey
+from sentry.ownership.grammar import load_schema
 
 
 class ProjectOwnership(Model):
@@ -20,8 +21,80 @@ class ProjectOwnership(Model):
     last_updated = models.DateTimeField(default=timezone.now)
     is_active = models.BooleanField(default=True)
 
+    # An object to indicate ownership is implicitly everyone
+    Everyone = object()
+
     class Meta:
         app_label = 'sentry'
         db_table = 'sentry_projectownership'
 
     __repr__ = sane_repr('project_id', 'is_active')
+
+    @classmethod
+    def get_owners(cls, project_id, data):
+        """
+        For a given project_id, and event data blob.
+
+        If Everyone is returned, this means we implicitly are
+        falling through our rules and everyone is responsible.
+
+        If an empty list is returned, this means there are explicitly
+        no owners.
+        """
+        try:
+            ownership = cls.objects.get(project_id=project_id)
+        except cls.DoesNotExist:
+            ownership = cls(
+                project_id=project_id,
+            )
+
+        if ownership.schema is not None:
+            for rule in load_schema(ownership.schema):
+                if rule.test(data):
+                    # This is O(n) to resolve, but should be fine for now
+                    # since we don't even explain that you can use multiple
+                    # let alone a number that would be potentially abusive.
+                    owners = []
+                    for o in rule.owners:
+                        try:
+                            owners.append(resolve_actor(o, project_id))
+                        except UnknownActor:
+                            continue
+                    return owners
+
+        return cls.Everyone if ownership.fallthrough else []
+
+
+class UnknownActor(Exception):
+    pass
+
+
+def resolve_actor(owner, project_id):
+    """ Convert an Owner object into an Actor """
+    from sentry.api.fields.actor import Actor
+    from sentry.models import User, Team
+
+    if owner.type == 'user':
+        try:
+            user_id = User.objects.filter(
+                email__iexact=owner.identifier,
+                is_active=True,
+                sentry_orgmember_set__organizationmemberteam__team__projectteam__project_id=project_id,
+            ).values_list('id', flat=True)[0]
+        except IndexError:
+            raise UnknownActor
+
+        return Actor(user_id, User)
+
+    if owner.type == 'team':
+        try:
+            team_id = Team.objects.filter(
+                projectteam__project_id=project_id,
+                slug=owner.identifier,
+            ).values_list('id', flat=True)[0]
+        except IndexError:
+            return UnknownActor
+
+        return Actor(team_id, Team)
+
+    raise TypeError('Unknown actor type: %r' % owner.type)
diff --git a/tests/sentry/models/test_projectownership.py b/tests/sentry/models/test_projectownership.py
new file mode 100644
index 0000000000..b83d96975d
--- /dev/null
+++ b/tests/sentry/models/test_projectownership.py
@@ -0,0 +1,61 @@
+from __future__ import absolute_import
+
+from sentry.testutils import TestCase
+from sentry.api.fields.actor import Actor
+from sentry.models import ProjectOwnership, User, Team
+from sentry.ownership.grammar import Rule, Owner, Matcher, dump_schema
+
+
+class ProjectOwnershipTestCase(TestCase):
+    def test_get_owners_default(self):
+        assert ProjectOwnership.get_owners(self.project.id, {}) == ProjectOwnership.Everyone
+
+    def test_get_owners_basic(self):
+        ProjectOwnership.objects.create(
+            project_id=self.project.id,
+            schema=dump_schema([
+                Rule(Matcher('path', '*.py'), [
+                    Owner('user', self.user.email),
+                    Owner('team', self.team.slug),
+                ]),
+            ]),
+            fallthrough=True,
+        )
+
+        # No data matches
+        assert ProjectOwnership.get_owners(self.project.id, {}) == ProjectOwnership.Everyone
+
+        assert ProjectOwnership.get_owners(
+            self.project.id, {
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'filename': 'foo.py',
+                    }]
+                }
+            }
+        ) == [Actor(self.user.id, User), Actor(self.team.id, Team)]
+
+        assert ProjectOwnership.get_owners(
+            self.project.id, {
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'filename': 'xxxx',
+                    }]
+                }
+            }
+        ) == ProjectOwnership.Everyone
+
+        # When fallthrough = False, we don't implicitly assign to Everyone
+        ProjectOwnership.objects.filter(
+            project_id=self.project.id,
+        ).update(fallthrough=False)
+
+        assert ProjectOwnership.get_owners(
+            self.project.id, {
+                'sentry.interfaces.Stacktrace': {
+                    'frames': [{
+                        'filename': 'xxxx',
+                    }]
+                }
+            }
+        ) == []
