commit ed1bdff0becd6bfb670c977ac268b4dc73cf9592
Author: David Cramer <dcramer@gmail.com>
Date:   Fri May 3 12:36:32 2013 -0700

    Add throttling docs

diff --git a/docs/index.rst b/docs/index.rst
index f7eb18c042..1195f7371b 100644
--- a/docs/index.rst
+++ b/docs/index.rst
@@ -18,6 +18,7 @@ Users Guide
    queue/index
    buffer/index
    udp_server/index
+   throttling/index
    cli/index
    client/index
    plugins/index
diff --git a/docs/throttling/index.rst b/docs/throttling/index.rst
new file mode 100644
index 0000000000..5f8835d435
--- /dev/null
+++ b/docs/throttling/index.rst
@@ -0,0 +1,53 @@
+Throttes and Rate Limiting
+==========================
+
+With the way Sentry works you may find yourself in a situation where you'll see
+too much inbound traffic without a good way to drop excess messages. There's a
+few solutions to this, and you'll likely want to employ them all if you are
+faced with this problem.
+
+
+Rate Limiting with IPTables
+---------------------------
+
+One of your first (and most efficient) options is to rate limit with your system's
+firewall, in our case, IPTables. If you're not sure how IPTables works, take a
+look at `Ubuntu's IPTables How-to <https://help.ubuntu.com/community/IptablesHowTo>`_.
+
+A sampe configuration, which will limit a single IP from bursting more than 5
+messages in a 10 second period might look like this::
+
+	# create a new chain for rate limiting
+	-N LIMITED
+	 
+	# rate limit individual ips to prevent stupidity
+	-I INPUT -p tcp --dport 80 -m state --state NEW -m recent --set
+	-I INPUT -p tcp --dport 443 -m state --state NEW -m recent --set
+	-I INPUT -p tcp --dport 80 -m state --state NEW -m recent --update --seconds 10 --hitcount 5 -j LIMITED
+	-I INPUT -p tcp --dport 443 -m state --state NEW -m recent --update --seconds 10 --hitcount 5 -j LIMITED
+	 
+	# log rejected ips
+	-A LIMITED -p tcp -m limit --limit 5/min -j LOG --log-prefix "Rejected TCP: " --log-level 7
+	-A LIMITED -j REJECT
+
+
+Enabling Quotas
+---------------
+
+The Sentry Team maintains a plugin which enforces project level quotas (using Redis),
+which will help to discard events without giving a hard "connection refused" error
+like you'd get with your firewall. This is slightly less efficient, as the server
+still has to do processing (and more importantly, has to have connections available).
+
+The quota plugin is quite easy to get started with, and you'll find detailed
+instructions in the `README <https://github.com/getsentry/sentry-quotas>`_.
+
+
+Using Cyclops (Client Proxy)
+----------------------------
+
+A third option for rate limiting is to do it on the client side. `Cyclops <https://github.com/heynemann/cyclops>`_
+is a third-party proxy written in Python (using Tornado) which aims to solve this.
+
+It's not officially supported, however it is used in production by several large
+users.
