commit 97f20bb39a4de1b401c86a4c896ccc7e2025b0c5
Author: Dena Mwangi <dena@getsentry.com>
Date:   Fri Jul 27 13:03:12 2018 -0700

    feat: Add an experiment manager (#9221)

diff --git a/src/sentry/api/serializers/models/organization.py b/src/sentry/api/serializers/models/organization.py
index 246883aeee..2a6842d1d2 100644
--- a/src/sentry/api/serializers/models/organization.py
+++ b/src/sentry/api/serializers/models/organization.py
@@ -69,7 +69,7 @@ class OnboardingTasksSerializer(Serializer):
 
 class DetailedOrganizationSerializer(OrganizationSerializer):
     def serialize(self, obj, attrs, user):
-        from sentry import features
+        from sentry import features, experiments
         from sentry.app import env
         from sentry.api.serializers.models.project import ProjectSummarySerializer
         from sentry.api.serializers.models.team import TeamSerializer
@@ -143,16 +143,11 @@ class DetailedOrganizationSerializer(OrganizationSerializer):
         if features.has('organizations:event-attachments', obj, actor=user):
             feature_list.append('event-attachments')
 
-        # this is slightly gross but necessary until we have the get on the endpoint
-        # to give the frontend a way to know when to log exposures
-        sso_experiment = features.has('organizations:sso-paywall-experiment', obj, actor=user)
-        if sso_experiment:
-            feature_list.append('sso-paywall-experiment-treatment')
-        elif sso_experiment is False:
-            feature_list.append('sso-paywall-experiment-control')
+        experiment_assignments = experiments.all(org=obj)
 
         context = super(DetailedOrganizationSerializer, self).serialize(obj, attrs, user)
         max_rate = quotas.get_maximum_quota(obj)
+        context['experiments'] = experiment_assignments
         context['quota'] = {
             'maxRate': max_rate[0],
             'maxRateInterval': max_rate[1],
diff --git a/src/sentry/experiments/__init__.py b/src/sentry/experiments/__init__.py
new file mode 100644
index 0000000000..3472b42fe0
--- /dev/null
+++ b/src/sentry/experiments/__init__.py
@@ -0,0 +1,7 @@
+from __future__ import absolute_import
+
+from .manager import ExperimentManager
+
+manager = ExperimentManager()
+
+all = manager.all
diff --git a/src/sentry/experiments/manager.py b/src/sentry/experiments/manager.py
new file mode 100644
index 0000000000..0ba00b35b4
--- /dev/null
+++ b/src/sentry/experiments/manager.py
@@ -0,0 +1,29 @@
+from __future__ import absolute_import
+import six
+
+
+class ExperimentManager(object):
+    """
+    Allows loading of experiment assignments (done in getsentry) on the frontend by
+    including them in the serialized org details via the org serializer which is in sentry.
+    """
+
+    def __init__(self):
+        self._experiments = {}
+
+    def add(self, experiment, param):
+        """
+        >>> ExperimentManager.add(ExperimentClass, param='name_of_param')
+        """
+        self._experiments[experiment.__name__] = {
+            'experiment': experiment, 'param': param}
+
+    def all(self, org):
+        """Returns an object with all the experiment assignments for the org."""
+        assignments = {}
+        for k, v in six.iteritems(self._experiments):
+            cls = v['experiment']
+            assignments[k] = cls(
+                org=org).get_variant(
+                v['param'], log_exposure=False)
+        return assignments
