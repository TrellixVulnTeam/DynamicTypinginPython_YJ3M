commit 600dd6966b1df8af39d70e058d7ff005004590ca
Author: maxbittker <maxbittker@gmail.com>
Date:   Tue Apr 24 16:54:53 2018 -0700

    wip

diff --git a/Makefile b/Makefile
index 65732f9bb4..782c3afd03 100644
--- a/Makefile
+++ b/Makefile
@@ -26,7 +26,7 @@ install-brew:
 	@hash brew 2> /dev/null && brew bundle || (echo '! Homebrew not found, skipping system dependencies.')
 
 install-python:
-	# must be executed serialially
+	# must be executed serially
 	$(MAKE) install-python-base
 	$(MAKE) install-python-develop
 
diff --git a/src/sentry/api/serializers/models/rule.py b/src/sentry/api/serializers/models/rule.py
index b9528842d6..fc45a4f091 100644
--- a/src/sentry/api/serializers/models/rule.py
+++ b/src/sentry/api/serializers/models/rule.py
@@ -37,14 +37,10 @@ class RuleSerializer(Serializer):
             'id':
             six.text_type(obj.id) if obj.id else None,
             'conditions': [
-                dict({
-                    'name': _generate_rule_label(obj.project, obj, o),
-                }, **o) for o in obj.data.get('conditions', [])
+                dict(o.items() + [('name', _generate_rule_label(obj.project, obj, o))]) for o in obj.data.get('conditions', [])
             ],
             'actions': [
-                dict({
-                    'name': _generate_rule_label(obj.project, obj, o),
-                }, **o) for o in obj.data.get('actions', [])
+                dict(o.items() + [('name', _generate_rule_label(obj.project, obj, o))]) for o in obj.data.get('actions', [])
             ],
             'actionMatch':
             obj.data.get('action_match') or Rule.DEFAULT_ACTION_MATCH,
diff --git a/tests/sentry/api/endpoints/test_project_rule_details.py b/tests/sentry/api/endpoints/test_project_rule_details.py
index 700564eda6..251b065f8c 100644
--- a/tests/sentry/api/endpoints/test_project_rule_details.py
+++ b/tests/sentry/api/endpoints/test_project_rule_details.py
@@ -138,6 +138,45 @@ class UpdateProjectRuleTest(APITestCase):
         ]
         assert rule.data['conditions'] == conditions
 
+    def test_update_name(self):
+        self.login_as(user=self.user)
+
+        project = self.create_project()
+
+        rule = Rule.objects.create(project=project, label='foo')
+
+        url = reverse(
+            'sentry-api-0-project-rule-details',
+            kwargs={
+                'organization_slug': project.organization.slug,
+                'project_slug': project.slug,
+                'rule_id': rule.id,
+            }
+        )
+
+        response = self.client.put(
+            url,
+            data={'environment': None, 'actionMatch': 'all', 'frequency': 30, 'name': 'test',
+                  'conditions':
+                  [{
+                      'interval': '1h',
+                      'id': 'sentry.rules.conditions.event_frequency.EventFrequencyCondition',
+                      'value': 666,
+                      'name': 'An event is seen more than 30 times in 1m'}],
+                  'id': '28',
+                  'actions': [{
+                      'id': 'sentry.rules.actions.notify_event.NotifyEventAction',
+                      'name': 'Send a notification (for all legacy integrations)'}],
+                  'dateCreated': '2018-04-24T23:37:21.246Z'},
+            format='json'
+        )
+
+        assert response.status_code == 200, response.content
+        assert response.data['conditions'][0]['name'] == 'An event is seen more than 666 times in 1h'
+
+        rule = Rule.objects.get(id=rule.id)
+        assert rule.data['conditions'][0]['name'] == 'An event is seen more than 666 times in 1h'
+
     def test_with_environment(self):
         self.login_as(user=self.user)
 
