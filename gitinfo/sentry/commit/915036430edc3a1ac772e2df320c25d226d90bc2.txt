commit 915036430edc3a1ac772e2df320c25d226d90bc2
Author: David Cramer <dcramer@gmail.com>
Date:   Mon Oct 14 14:44:25 2013 +0100

    Move resolve endpoint into group details PUT method

diff --git a/src/sentry/utils/javascript.py b/src/sentry/utils/javascript.py
index 298b89651e..d2923d2c57 100644
--- a/src/sentry/utils/javascript.py
+++ b/src/sentry/utils/javascript.py
@@ -10,7 +10,7 @@ import time
 from django.core.urlresolvers import reverse
 from django.utils.html import escape
 from sentry.app import env
-from sentry.constants import STATUS_RESOLVED
+from sentry.constants import STATUS_RESOLVED, STATUS_MUTED
 from sentry.models import Group, GroupBookmark, GroupTagKey, GroupSeen
 from sentry.templatetags.sentry_plugins import get_tags
 from sentry.utils import json
@@ -114,6 +114,14 @@ class GroupTransformer(Transformer):
         return dt.isoformat()
 
     def transform(self, obj, request=None):
+        status = obj.get_status()
+        if status == STATUS_RESOLVED:
+            status_label = 'resolved'
+        elif status == STATUS_MUTED:
+            status_label = 'muted'
+        else:
+            status_label = 'unresolved'
+
         d = {
             'id': str(obj.id),
             'count': str(obj.times_seen),
@@ -128,6 +136,7 @@ class GroupTransformer(Transformer):
             'lastSeen': self.localize_datetime(obj.last_seen, request=request),
             'timeSpent': obj.avg_time_spent,
             'canResolve': request and request.user.is_authenticated(),
+            'status': status_label,
             'isResolved': obj.get_status() == STATUS_RESOLVED,
             'isPublic': obj.is_public,
             'score': getattr(obj, 'sort_value', 0),
diff --git a/src/sentry/web/restapi/endpoints/event_details.py b/src/sentry/web/restapi/endpoints/event_details.py
deleted file mode 100644
index 3a17ce9478..0000000000
--- a/src/sentry/web/restapi/endpoints/event_details.py
+++ /dev/null
@@ -1,19 +0,0 @@
-from django.utils.decorators import method_decorator
-
-from sentry.models import Group
-from sentry.web.decorators import has_access
-from sentry.web.restapi.base import BaseView
-from sentry.utils.javascript import transform
-
-from rest_framework.response import Response
-
-
-class EventDetailsView(BaseView):
-    @method_decorator(has_access)
-    def get(self, request, team, project, group_id):
-        group = Group.objects.get(
-            id=group_id,
-            project=project,
-        )
-
-        return Response(transform(group, request))
diff --git a/src/sentry/web/restapi/endpoints/group_details.py b/src/sentry/web/restapi/endpoints/group_details.py
new file mode 100644
index 0000000000..e0013a73ba
--- /dev/null
+++ b/src/sentry/web/restapi/endpoints/group_details.py
@@ -0,0 +1,101 @@
+from django.utils import timezone
+from django.utils.decorators import method_decorator
+from django.utils.translation import ugettext_lazy as _
+
+from sentry.constants import STATUS_RESOLVED, STATUS_MUTED, STATUS_UNRESOLVED
+from sentry.models import Group, Activity
+from sentry.web.decorators import has_access
+from sentry.web.restapi.base import BaseView
+from sentry.utils.javascript import transform
+
+from rest_framework import serializers, status
+from rest_framework.response import Response
+
+
+class StatusField(serializers.WritableField):
+    choices = {
+        'resolved': STATUS_RESOLVED,
+        'unresolved': STATUS_UNRESOLVED,
+        'muted': STATUS_MUTED,
+    }
+    default_error_messages = {
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of '
+                            'the available choices.'),
+    }
+
+    _rev_choice_map = dict((v, k) for k, v in choices.iteritems())
+
+    def validate(self, value):
+        """
+        Validates that the input is in self.choices.
+        """
+        super(StatusField, self).validate(value)
+        if value and value not in self._rev_choice_map:
+            raise serializers.ValidationError(
+                self.error_messages['invalid_choice'] % {'value': value})
+
+    def to_native(self, value):
+        return self._rev_choice_map[value]
+
+    def from_native(self, value):
+        return self.choices[value]
+
+
+class GroupSerializer(serializers.ModelSerializer):
+    status = StatusField()
+
+    class Meta:
+        model = Group
+        fields = ('id', 'status')
+
+    def save(self):
+        print self.data
+        return super(GroupSerializer, self).save()
+
+
+class GroupDetailsView(BaseView):
+    @method_decorator(has_access)
+    def get(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        return Response(transform(group, request))
+
+    @method_decorator(has_access)
+    def put(self, request, team, project, group_id):
+        group = Group.objects.get(
+            id=group_id,
+            project=project,
+        )
+
+        serializer = GroupSerializer(group, data=request.DATA)
+        if not serializer.is_valid():
+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
+
+        now = timezone.now()
+
+        # It's important that we ensure state changes are atomic and that we
+        # dont create multiple activity transactions
+        if request.DATA.get('status') == 'resolved':
+            group.resolved_at = now
+
+            happened = Group.objects.filter(
+                id=group.id,
+            ).exclude(status=STATUS_RESOLVED).update(
+                status=STATUS_RESOLVED,
+                resolved_at=now,
+            )
+
+            if happened:
+                Activity.objects.create(
+                    project=project,
+                    group=group,
+                    type=Activity.SET_RESOLVED,
+                    user=request.user,
+                )
+
+        serializer.save()
+
+        return Response(transform(group, request))
diff --git a/src/sentry/web/restapi/endpoints/event_index.py b/src/sentry/web/restapi/endpoints/group_index.py
similarity index 71%
rename from src/sentry/web/restapi/endpoints/event_index.py
rename to src/sentry/web/restapi/endpoints/group_index.py
index eb443bab21..6a1727ee88 100644
--- a/src/sentry/web/restapi/endpoints/event_index.py
+++ b/src/sentry/web/restapi/endpoints/group_index.py
@@ -1,6 +1,7 @@
 from django.core.urlresolvers import reverse
+from django.utils.decorators import method_decorator
 
-from sentry.models import Project, Team
+from sentry.web.decorators import has_access
 from sentry.web.frontend.groups import _get_group_list
 from sentry.web.restapi.base import BaseView
 from sentry.utils.http import absolute_uri
@@ -9,13 +10,9 @@ from sentry.utils.javascript import transform
 from rest_framework.response import Response
 
 
-class EventListView(BaseView):
-    def get(self, request, team_slug, project_id):
-        team = Team.objects.get_from_cache(slug=team_slug)
-        project = Project.objects.get_from_cache(id=project_id)
-        assert project.team_id == team.id
-        project.team_cache = team
-
+class GroupListView(BaseView):
+    @method_decorator(has_access)
+    def get(self, request, team, project):
         offset = 0
         limit = 100
 
diff --git a/src/sentry/web/restapi/urls.py b/src/sentry/web/restapi/urls.py
index 86c47863fe..700db7d989 100644
--- a/src/sentry/web/restapi/urls.py
+++ b/src/sentry/web/restapi/urls.py
@@ -1,19 +1,15 @@
 from django.conf.urls import patterns, url
 
-from .endpoints.event_index import EventListView
-from .endpoints.event_details import EventDetailsView
-from .endpoints.event_resolve import ResolveEventView
+from .endpoints.group_index import GroupListView
+from .endpoints.group_details import GroupDetailsView
 
 urlpatterns = patterns(
     '',
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/$',
-        EventListView.as_view(),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/groups/$',
+        GroupListView.as_view(),
         name='sentry-api-1-event-list'),
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/$',
-        EventDetailsView.as_view(),
+    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/groups/(?P<group_id>\d+)/$',
+        GroupDetailsView.as_view(),
         name='sentry-api-1-event-details'),
-    url(r'^(?P<team_slug>[^\/]+)/(?P<project_id>[^\/]+)/events/(?P<group_id>\d+)/resolve/$',
-        ResolveEventView.as_view(),
-        name='sentry-api-1-resolve-event'),
     # url(r'^api-auth/', include('rest_framework.urls', namespace='rest_framework'))
 )
