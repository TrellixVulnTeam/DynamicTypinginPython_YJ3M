commit d7c50797dbe7df801be993ba57916c7dc11d3fa4
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Nov 15 00:17:08 2012 -0800

    Add automated testing via phantom.js

diff --git a/.travis.yml b/.travis.yml
index 945534f670..4d14416cf6 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -14,8 +14,10 @@ install:
   - pip install psycopg2
   - pip install -q Django==$DJANGO --use-mirrors
   - pip install -q . --use-mirrors
+  - make bootstrap-tests
 script:
   - make test
+  - make test-js
 notifications:
   irc:
     channels: "irc.freenode.org#sentry"
diff --git a/Makefile b/Makefile
index 60b50ff7df..eb78047f7c 100644
--- a/Makefile
+++ b/Makefile
@@ -58,8 +58,14 @@ cwatch:
 	make coffee
 	coffee --join ${STATIC_DIR}/scripts/site.js -cw ${STATIC_DIR}/coffee/*.coffee
 
-test:
+bootstrap-tests:
+	npm install phantomjs
 	pip install flake8 --use-mirrors
+
+test-js:
+	phantomjs runtests.js tests/js/index.html
+
+test:
 	cd src && flake8 --exclude=migrations --ignore=E501,E225,E121,E123,E124,E125,E127,E128 --exit-zero sentry || exit 1
 	python setup.py test
 
diff --git a/runtests.js b/runtests.js
new file mode 100644
index 0000000000..0c1bc952c6
--- /dev/null
+++ b/runtests.js
@@ -0,0 +1,90 @@
+var system = require('system');
+
+/**
+ * Wait until the test condition is true or a timeout occurs. Useful for waiting
+ * on a server response or for a ui change (fadeIn, etc.) to occur.
+ *
+ * @param testFx javascript condition that evaluates to a boolean,
+ * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
+ * as a callback function.
+ * @param onReady what to do when testFx condition is fulfilled,
+ * it can be passed in as a string (e.g.: "1 == 1" or "$('#bar').is(':visible')" or
+ * as a callback function.
+ * @param timeOutMillis the max amount of time to wait. If not specified, 3 sec is used.
+ */
+function waitFor(testFx, onReady, timeOutMillis) {
+    var maxtimeOutMillis = timeOutMillis ? timeOutMillis : 3001, //< Default Max Timeout is 3s
+        start = new Date().getTime(),
+        condition = false,
+        interval = setInterval(function() {
+            if ( (new Date().getTime() - start < maxtimeOutMillis) && !condition ) {
+                // If not time-out yet and condition not yet fulfilled
+                condition = (typeof(testFx) === "string" ? eval(testFx) : testFx()); //< defensive code
+            } else {
+                if(!condition) {
+                    // If condition still not fulfilled (timeout but condition is 'false')
+                    console.log("'waitFor()' timeout");
+                    phantom.exit(1);
+                } else {
+                    // Condition fulfilled (timeout and/or condition is 'true')
+                    console.log("'waitFor()' finished in " + (new Date().getTime() - start) + "ms.");
+                    if (typeof(onReady) === "string") {
+                      eval(onReady);
+                    } else {
+                      onReady();
+                    }
+                    clearInterval(interval); //< Stop this interval
+                }
+            }
+        }, 100); //< repeat check every 100ms
+}
+
+
+if (system.args.length !== 2) {
+    console.log('Usage: runtests.js URL');
+    phantom.exit(1);
+}
+
+var page = require('webpage').create();
+
+// Route "console.log()" calls from within the Page context to the main Phantom context (i.e. current "this")
+page.onConsoleMessage = function(msg) {
+    console.log(msg);
+};
+
+page.open(system.args[1], function(status){
+    if (status !== "success") {
+        console.log("Unable to access network");
+        phantom.exit();
+    } else {
+        waitFor(function(){
+            return page.evaluate(function(){
+                return document.body.querySelector('.symbolSummary .pending') === null;
+            });
+        }, function(){
+            var exitCode = page.evaluate(function(){
+                console.log('');
+                console.log(document.body.querySelector('.description').innerText);
+                var list = document.body.querySelectorAll('.results > #details > .specDetail.failed');
+                if (list && list.length > 0) {
+                  console.log('');
+                  console.log(list.length + ' test(s) FAILED:');
+                  for (i = 0; i < list.length; ++i) {
+                      var el = list[i],
+                          desc = el.querySelector('.description'),
+                          msg = el.querySelector('.resultMessage.fail');
+                      console.log('');
+                      console.log(desc.innerText);
+                      console.log(msg.innerText);
+                      console.log('');
+                  }
+                  return 1;
+                } else {
+                  console.log(document.body.querySelector('.alert > .passingAlert.bar').innerText);
+                  return 0;
+                }
+            });
+            phantom.exit(exitCode);
+        });
+    }
+});
\ No newline at end of file
