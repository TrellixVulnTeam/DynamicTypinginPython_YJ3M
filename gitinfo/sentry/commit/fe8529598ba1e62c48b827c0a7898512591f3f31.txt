commit fe8529598ba1e62c48b827c0a7898512591f3f31
Author: Alberto Leal <mail4alberto@gmail.com>
Date:   Wed Oct 23 07:45:22 2019 -0400

    fix(tags): Query the correct event distributions when querying by environment key (#15214)
    
    Closes SEN-1184

diff --git a/src/sentry/api/endpoints/organization_events_distribution.py b/src/sentry/api/endpoints/organization_events_distribution.py
index 44c39a8b23..f45cd01edc 100644
--- a/src/sentry/api/endpoints/organization_events_distribution.py
+++ b/src/sentry/api/endpoints/organization_events_distribution.py
@@ -37,7 +37,12 @@ class OrganizationEventsDistributionEndpoint(OrganizationEventsEndpointBase):
             conditions = snuba_args["conditions"]
         else:
             colname = key
-            conditions = snuba_args["conditions"] + [[colname, "IS NOT NULL", None]]
+            additional_conditions = []
+            # the "no environment" environment is null in snuba
+            if not ("environment" in params and "" in params["environment"]):
+                additional_conditions = [[colname, "IS NOT NULL", None]]
+
+            conditions = snuba_args["conditions"] + additional_conditions
 
         top_values = transform_aliases_and_query(
             skip_conditions=True,
diff --git a/src/sentry/api/event_search.py b/src/sentry/api/event_search.py
index 402d69cda1..59a2ceb4a6 100644
--- a/src/sentry/api/event_search.py
+++ b/src/sentry/api/event_search.py
@@ -550,7 +550,9 @@ def convert_search_filter_to_snuba_query(search_filter):
     if snuba_name in no_conversion:
         return
     elif snuba_name == "environment":
+        # conditions added to env_conditions are OR'd
         env_conditions = []
+
         _envs = set(value if isinstance(value, (list, tuple)) else [value])
         # the "no environment" environment is null in snuba
         if "" in _envs:
@@ -559,7 +561,7 @@ def convert_search_filter_to_snuba_query(search_filter):
             env_conditions.append(["environment", operator, None])
 
         if _envs:
-            env_conditions.append(["environment", "IN", list(_envs)])
+            env_conditions.append(["environment", "IN", _envs])
 
         return env_conditions
 
diff --git a/tests/snuba/api/endpoints/test_organization_events_distribution.py b/tests/snuba/api/endpoints/test_organization_events_distribution.py
index 32596c3987..70a7a31891 100644
--- a/tests/snuba/api/endpoints/test_organization_events_distribution.py
+++ b/tests/snuba/api/endpoints/test_organization_events_distribution.py
@@ -453,3 +453,108 @@ class OrganizationEventsDistributionEndpointTest(SnubaTestCase, APITestCase):
             response = self.client.get(self.url, data={"key": ["color;;;"]}, format="json")
         assert response.status_code == 400, response.content
         assert response.data == {"detail": "Tag key color;;; is not valid."}
+
+    def test_environment(self):
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "one"},
+                "environment": "staging",
+            },
+            project_id=self.project2.id,
+        )
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "one"},
+                "environment": "production",
+            },
+            project_id=self.project.id,
+        )
+        self.store_event(
+            data={
+                "event_id": uuid4().hex,
+                "timestamp": self.min_ago_iso,
+                "tags": {"number": "two"},
+            },
+            project_id=self.project.id,
+        )
+
+        with self.feature(self.feature_list):
+            # get top values for the key "environment"
+            response = self.client.get(self.url, {"key": "environment"}, format="json")
+
+            assert response.status_code == 200, response.content
+
+            assert response.data == {
+                "topValues": [
+                    {"count": 1, "name": "staging", "value": "staging"},
+                    {"count": 1, "name": "production", "value": "production"},
+                ],
+                "key": "environment",
+            }
+
+        with self.feature(self.feature_list):
+            # query by an environment
+            response = self.client.get(
+                self.url, {"key": "environment", "environment": "staging"}, format="json"
+            )
+
+            assert response.status_code == 200, response.content
+
+            assert response.data == {
+                "topValues": [{"count": 1, "name": "staging", "value": "staging"}],
+                "key": "environment",
+            }
+
+        with self.feature(self.feature_list):
+            # query by multiple environments
+            response = self.client.get(
+                self.url,
+                {"key": "environment", "environment": ["staging", "production"]},
+                format="json",
+            )
+
+            assert response.status_code == 200, response.content
+
+            assert response.data == {
+                "topValues": [
+                    {"count": 1, "name": "staging", "value": "staging"},
+                    {"count": 1, "name": "production", "value": "production"},
+                ],
+                "key": "environment",
+            }
+
+        with self.feature(self.feature_list):
+            # query by the "no environment" environment
+            response = self.client.get(
+                self.url, {"key": "environment", "environment": ""}, format="json"
+            )
+
+            assert response.status_code == 200, response.content
+
+            assert response.data == {
+                "topValues": [{"count": 1, "name": None, "value": None}],
+                "key": "environment",
+            }
+
+        with self.feature(self.feature_list):
+            # query by multiple environments, including the "no environment" environment
+            response = self.client.get(
+                self.url,
+                {"key": "environment", "environment": ["staging", "production", ""]},
+                format="json",
+            )
+
+            assert response.status_code == 200, response.content
+
+            assert response.data == {
+                "topValues": [
+                    {"count": 1, "name": None, "value": None},
+                    {"count": 1, "name": "staging", "value": "staging"},
+                    {"count": 1, "name": "production", "value": "production"},
+                ],
+                "key": "environment",
+            }
