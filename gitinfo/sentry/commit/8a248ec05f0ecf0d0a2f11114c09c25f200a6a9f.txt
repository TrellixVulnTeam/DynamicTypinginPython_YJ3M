commit 8a248ec05f0ecf0d0a2f11114c09c25f200a6a9f
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Nov 12 09:51:14 2019 -0800

    ref(pagerduty): Add service table (#15445)
    
    * add tableField

diff --git a/src/sentry/integrations/pagerduty/integration.py b/src/sentry/integrations/pagerduty/integration.py
index d9ce43575b..b7916cfed6 100644
--- a/src/sentry/integrations/pagerduty/integration.py
+++ b/src/sentry/integrations/pagerduty/integration.py
@@ -1,5 +1,6 @@
 from __future__ import absolute_import
 
+
 from django.utils.translation import ugettext_lazy as _
 from django.db import transaction
 
@@ -14,7 +15,12 @@ from sentry.integrations.base import (
     IntegrationProvider,
     FeatureDescription,
 )
-from sentry.models import OrganizationIntegration, PagerDutyService
+
+from sentry.models import (
+    OrganizationIntegration,
+    PagerDutyService,
+)
+
 from sentry.pipeline import PipelineView
 from .client import PagerDutyClient
 
@@ -46,6 +52,42 @@ class PagerDutyIntegration(IntegrationInstallation):
     def get_client(self, integration_key):
         return PagerDutyClient(integration_key=integration_key)
 
+    def get_organization_config(self):
+        fields = [
+            {
+                "name": "service_table",
+                "type": "table",
+                "label": "PagerDuty services with the Sentry integration enabled",
+                "help": "If a services needs to be updated, deleted, or added manually please do so here. Alert rules will need to be individually updated for any additions or deletions of services.",
+                "addButtonText": "",
+                "columnLabels": {"service": "Service", "integration_key": "Integration Key"},
+                "columnKeys": ["service", "integration_key"]
+            }
+        ]
+
+        return fields
+
+    def update_organization_config(self, data):
+        if "service_table" in data:
+            with transaction.atomic():
+                PagerDutyService.objects.filter(organization_integration=self.org_integration).delete()
+                for item in data["service_table"]:
+                    service_name = item["service"]
+                    key = item["integration_key"]
+
+                    if key and service_name:
+                        PagerDutyService.objects.create(
+                            organization_integration=self.org_integration,
+                            service_name=service_name,
+                            integration_key=key,
+                        )
+
+    def get_config_data(self):
+        service_list = []
+        for s in self.services:
+            service_list.append({"service": s.service_name, "integration_key": s.integration_key, "id": s.id})
+        return {"service_table": service_list}
+
     @property
     def services(self):
         services = PagerDutyService.objects.filter(organization_integration=self.org_integration)
@@ -92,18 +134,24 @@ class PagerDutyIntegrationProvider(IntegrationProvider):
         return {
             "name": account["name"],
             "external_id": account["subdomain"],
-            "metadata": {"services": services},
+            "metadata": {
+                "services": services,
+                "domain_name": account["subdomain"],
+            },
         }
 
 
 class PagerDutyInstallationRedirect(PipelineView):
-    def get_app_url(self):
+    def get_app_url(self, account_name=None):
+        if not account_name:
+            account_name = "app"
+
         app_id = options.get("pagerduty.app-id")
         setup_url = absolute_uri("/extensions/pagerduty/setup/")
 
         return (
-            u"https://app.pagerduty.com/install/integration?app_id=%s&redirect_url=%s&version=1"
-            % (app_id, setup_url)
+            u"https://%s.pagerduty.com/install/integration?app_id=%s&redirect_url=%s&version=1"
+            % (account_name, app_id, setup_url)
         )
 
     def dispatch(self, request, pipeline):
@@ -111,4 +159,6 @@ class PagerDutyInstallationRedirect(PipelineView):
             pipeline.bind_state("config", request.GET["config"])
             return pipeline.next_step()
 
-        return self.redirect(self.get_app_url())
+        account_name = getattr(request, "account", None)
+
+        return self.redirect(self.get_app_url(account_name))
diff --git a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
index 4667304bcb..f036da7301 100644
--- a/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
+++ b/src/sentry/static/sentry/app/views/organizationIntegrations/addIntegration.jsx
@@ -11,6 +11,7 @@ export default class AddIntegration extends React.Component {
     provider: PropTypes.object.isRequired,
     onInstall: PropTypes.func.isRequired,
     reinstallId: PropTypes.string,
+    account: PropTypes.string,
   };
 
   componentDidMount() {
@@ -57,6 +58,10 @@ export default class AddIntegration extends React.Component {
       query.reinstall_id = this.props.reinstallId;
     }
 
+    if (this.props.account) {
+      query.account = this.props.account;
+    }
+
     const installUrl = `${url}?${queryString.stringify(query)}`;
     const opts = `scrollbars=yes,width=${width},height=${height},top=${top},left=${left}`;
 
@@ -84,7 +89,6 @@ export default class AddIntegration extends React.Component {
     if (!data) {
       return;
     }
-
     this.props.onInstall(data);
     IndicatorStore.addSuccess(t(`${this.props.provider.name} added`));
   };
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
index a841ed16d8..7c24863f36 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/fieldFromConfig.tsx
@@ -7,6 +7,7 @@ import HiddenField from './hiddenField';
 import NumberField from './numberField';
 import RangeField from './rangeField';
 import SelectField from './selectField';
+import TableField from './tableField';
 import TextField from './textField';
 import TextareaField from './textareaField';
 import RadioField from './radioField';
@@ -50,6 +51,7 @@ export default class FieldFromConfig extends React.Component<Props> {
         'text',
         'textarea',
         'url',
+        'table',
       ]),
       required: PropTypes.bool,
       multiline: PropTypes.bool,
@@ -128,6 +130,8 @@ export default class FieldFromConfig extends React.Component<Props> {
         return <RadioField {...props} />;
       case 'rich_list':
         return <RichListField {...props} />;
+      case 'table':
+        return <TableField {...props} />;
       case 'custom':
         return field.Component(props);
       default:
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
new file mode 100644
index 0000000000..a10989e322
--- /dev/null
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/tableField.tsx
@@ -0,0 +1,208 @@
+import PropTypes from 'prop-types';
+import React from 'react';
+import styled from 'react-emotion';
+import space from 'app/styles/space';
+
+import {defined, objectIsEmpty} from 'app/utils';
+import {t} from 'app/locale';
+import Button from 'app/components/button';
+import InputField from 'app/views/settings/components/forms/inputField';
+import Input from 'app/views/settings/components/forms/controls/input';
+
+const defaultProps = {
+  addButtonText: t('Add Item'),
+  allowEmpty: false,
+  // Since we're saving an object, there isn't a great way to render the
+  // change within the toast. Just turn off displaying the from/to portion of
+  // the message.
+  formatMessageValue: false,
+};
+
+type DefaultProps = Readonly<typeof defaultProps>;
+
+type Props = {
+  name?: string;
+  columnLabels: object;
+  columnKeys: string[];
+} & Partial<DefaultProps> &
+  InputField['props'];
+
+export default class TableField extends React.Component<Props> {
+  static propTypes = {
+    ...InputField.propTypes,
+    /**
+     * Text used for the 'add' button. An empty string can be used
+     * to just render the "+" icon.
+     */
+    addButtonText: PropTypes.node,
+    /**
+     * An object with of column labels (headers) for the table.
+     */
+    columnLabels: PropTypes.object.isRequired,
+    /**
+     * A list of column keys for the table, in the order that you want
+     * the columns to appear - order doesn't matter in columnLabels
+     */
+    columnKeys: PropTypes.arrayOf(PropTypes.string).isRequired,
+    /**
+     * Automatically save even if fields are empty
+     */
+    allowEmpty: PropTypes.bool,
+  };
+
+  static defaultProps = defaultProps;
+
+  hasValue = value => defined(value) && !objectIsEmpty(value);
+
+  renderField = props => {
+    const {
+      onChange,
+      onBlur,
+      addButtonText,
+      columnLabels,
+      columnKeys,
+      disabled,
+      allowEmpty,
+    } = props;
+
+    const mappedKeys = columnKeys;
+    const emptyValue = mappedKeys.reduce((a, v) => ({...a, [v]: null}), {id: ''});
+
+    const valueIsEmpty = this.hasValue(props.value);
+    const value = valueIsEmpty ? props.value : [];
+
+    const saveChanges = (nextValue: object) => {
+      onChange(nextValue, []);
+
+      const validValues = !Object.values(nextValue)
+        .map(o => Object.values(o).find(v => v === null))
+        .includes(null);
+
+      if (allowEmpty || validValues) {
+        onBlur();
+      }
+    };
+
+    const addRow = () => {
+      saveChanges([...value, emptyValue]);
+    };
+
+    const removeRow = rowIndex => {
+      //eslint-disable-next-line no-unused-vars
+      const newValue = [...value];
+      newValue.splice(rowIndex, 1);
+      saveChanges(newValue);
+    };
+
+    const setValue = (
+      rowIndex: number,
+      fieldKey: string,
+      fieldValue: React.FormEvent<HTMLInputElement>
+    ) => {
+      const newValue = [...value];
+      newValue[rowIndex][fieldKey] = fieldValue.currentTarget
+        ? fieldValue.currentTarget.value
+        : null;
+      saveChanges(newValue);
+    };
+
+    const button = (
+      <Button icon="icon-circle-add" onClick={addRow} size="xsmall" disabled={disabled}>
+        {addButtonText}
+      </Button>
+    );
+
+    // The field will be set to inline when there is no value set for the
+    // field, just show the button.
+    if (!valueIsEmpty) {
+      return <div>{button}</div>;
+    }
+
+    return (
+      <React.Fragment>
+        <HeaderContainer>
+          {mappedKeys.map((fieldKey, i) => (
+            <Header key={fieldKey}>
+              <HeaderLabel>{columnLabels[fieldKey]}</HeaderLabel>
+              {i === mappedKeys.length - 1 && button}
+            </Header>
+          ))}
+        </HeaderContainer>
+        {value.map((row, rowIndex) => (
+          <RowContainer data-test-id="field-row" key={rowIndex}>
+            {mappedKeys.map((fieldKey: string, i: number) => (
+              <Row key={fieldKey}>
+                <RowInput>
+                  <Input
+                    onChange={v => setValue(rowIndex, fieldKey, v ? v : null)}
+                    value={row[fieldKey]}
+                  />
+                </RowInput>
+                {i === mappedKeys.length - 1 && (
+                  <RemoveButton>
+                    <Button
+                      icon="icon-trash"
+                      size="small"
+                      disabled={disabled}
+                      onClick={() => removeRow(rowIndex)}
+                    />
+                  </RemoveButton>
+                )}
+              </Row>
+            ))}
+          </RowContainer>
+        ))}
+      </React.Fragment>
+    );
+  };
+
+  render() {
+    return (
+      <InputField
+        {...this.props}
+        inline={({model}) => !this.hasValue(model.getValue(this.props.name))}
+        field={this.renderField}
+      />
+    );
+  }
+}
+
+const HeaderLabel = styled('div')`
+  font-size: 0.8em;
+  text-transform: uppercase;
+  color: ${p => p.theme.gray3};
+`;
+
+const HeaderContainer = styled('div')`
+  display: flex;
+  align-items: center;
+`;
+
+const Header = styled('div')`
+  display: flex;
+  flex: 1 0 0;
+  align-items: center;
+  justify-content: space-between;
+  margin-left: ${space(1)};
+`;
+
+const RowContainer = styled('div')`
+  display: flex;
+  align-items: center;
+  margin-top: ${space(1)};
+`;
+
+const Row = styled('div')`
+  display: flex;
+  flex: 1 0 0;
+  align-items: center;
+  margin-top: ${space(1)};
+`;
+
+const RowInput = styled('div')`
+  flex: 1;
+`;
+
+const RemoveButton = styled('div')`
+  margin-left: ${space(1)};
+`;
diff --git a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
index 05ebbd9477..0ebd626ae1 100644
--- a/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
+++ b/src/sentry/static/sentry/app/views/settings/components/forms/type.tsx
@@ -18,6 +18,7 @@ export const FieldType = [
   'string',
   'text',
   'url',
+  'table',
 ] as const;
 
 export type FieldValue = any;
diff --git a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
index c1ec03d222..7fe3e15017 100644
--- a/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
+++ b/src/sentry/static/sentry/app/views/settings/organizationIntegrations/configureIntegration.tsx
@@ -4,7 +4,9 @@ import {RouteComponentProps} from 'react-router/lib/Router';
 import {analytics} from 'app/utils/analytics';
 import {t} from 'app/locale';
 import AsyncView from 'app/views/asyncView';
+import AddIntegration from 'app/views/organizationIntegrations/addIntegration';
 import BreadcrumbTitle from 'app/views/settings/components/settingsBreadcrumb/breadcrumbTitle';
+import Button from 'app/components/button';
 import Form from 'app/views/settings/components/forms/form';
 import IntegrationAlertRules from 'app/views/organizationIntegrations/integrationAlertRules';
 import IntegrationItem from 'app/views/organizationIntegrations/integrationItem';
@@ -52,6 +54,35 @@ class ConfigureIntegration extends AsyncView<Props, State> {
       : 'Configure Integration';
   }
 
+  onUpdateIntegration = () => {
+    this.setState(this.getDefaultState(), this.fetchData);
+  };
+
+  getAction = (provider: IntegrationProvider | undefined) => {
+    const {integration} = this.state;
+    const action =
+      provider && provider.key === 'pagerduty' ? (
+        <AddIntegration
+          provider={provider}
+          onInstall={this.onUpdateIntegration}
+          account={integration.domainName}
+        >
+          {onClick => (
+            <Button
+              priority="primary"
+              size="small"
+              icon="icon-circle-add"
+              onClick={() => onClick()}
+            >
+              Add Services
+            </Button>
+          )}
+        </AddIntegration>
+      ) : null;
+
+    return action;
+  };
+
   renderBody() {
     const {orgId} = this.props.params;
     const {integration} = this.state;
@@ -64,7 +95,11 @@ class ConfigureIntegration extends AsyncView<Props, State> {
     return (
       <React.Fragment>
         <BreadcrumbTitle routes={this.props.routes} title={integration.provider.name} />
-        <SettingsPageHeader noTitleStyles title={title} />
+        <SettingsPageHeader
+          noTitleStyles
+          title={title}
+          action={this.getAction(provider)}
+        />
 
         {integration.configOrganization.length > 0 && (
           <Form
diff --git a/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap b/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap
new file mode 100644
index 0000000000..c77d1c9bc3
--- /dev/null
+++ b/tests/js/spec/components/forms/__snapshots__/tableField.spec.jsx.snap
@@ -0,0 +1,937 @@
+// Jest Snapshot v1, https://goo.gl/fbAQLP
+
+exports[`TableField renders renders with form context 1`] = `
+<Form
+  allowUndo={false}
+  cancelLabel="Cancel"
+  className="form-stacked"
+  model={
+    FormModel {
+      "api": Client {
+        "_chain": [Function],
+        "_wrapRequest": [Function],
+        "bulkUpdate": [Function],
+        "handleRequestError": [Function],
+        "hasProjectBeenRenamed": [Function],
+      },
+      "errors": Object {},
+      "fieldDescriptor": Map {
+        "fieldName" => Object {
+          "addButtonText": "Add Thing",
+          "allowEmpty": false,
+          "children": [Function],
+          "className": undefined,
+          "columnKeys": Array [
+            "column1",
+            "column2",
+          ],
+          "columnLabels": Object {
+            "column1": "Column 1",
+            "column2": "Column 2",
+          },
+          "field": [Function],
+          "flexibleControlStateSize": false,
+          "formatMessageValue": false,
+          "hideErrorMessage": false,
+          "inline": [Function],
+          "name": "fieldName",
+        },
+      },
+      "fieldState": Object {},
+      "fields": Object {},
+      "formErrors": undefined,
+      "formState": undefined,
+      "initialData": Object {},
+      "options": Object {
+        "allowUndo": false,
+        "apiEndpoint": undefined,
+        "apiMethod": undefined,
+        "onFieldChange": undefined,
+        "onSubmitError": undefined,
+        "onSubmitSuccess": undefined,
+        "resetOnError": undefined,
+        "saveOnBlur": false,
+      },
+      "snapshots": Array [
+        Map {},
+      ],
+    }
+  }
+  onSubmit={[MockFunction]}
+  requireChanges={false}
+  saveOnBlur={false}
+  submitDisabled={false}
+  submitLabel="Save Changes"
+  submitPriority="primary"
+>
+  <form
+    className="form-stacked"
+    onSubmit={[Function]}
+  >
+    <div>
+      <TableField
+        addButtonText="Add Thing"
+        allowEmpty={false}
+        columnKeys={
+          Array [
+            "column1",
+            "column2",
+          ]
+        }
+        columnLabels={
+          Object {
+            "column1": "Column 1",
+            "column2": "Column 2",
+          }
+        }
+        formatMessageValue={false}
+        name="fieldName"
+      >
+        <InputField
+          addButtonText="Add Thing"
+          allowEmpty={false}
+          columnKeys={
+            Array [
+              "column1",
+              "column2",
+            ]
+          }
+          columnLabels={
+            Object {
+              "column1": "Column 1",
+              "column2": "Column 2",
+            }
+          }
+          field={[Function]}
+          formatMessageValue={false}
+          inline={[Function]}
+          name="fieldName"
+        >
+          <FormField
+            addButtonText="Add Thing"
+            allowEmpty={false}
+            columnKeys={
+              Array [
+                "column1",
+                "column2",
+              ]
+            }
+            columnLabels={
+              Object {
+                "column1": "Column 1",
+                "column2": "Column 2",
+              }
+            }
+            field={[Function]}
+            flexibleControlStateSize={false}
+            formatMessageValue={false}
+            hideErrorMessage={false}
+            inline={[Function]}
+            name="fieldName"
+          >
+            <Observer>
+              <Field
+                addButtonText="Add Thing"
+                alignRight={false}
+                allowEmpty={false}
+                columnKeys={
+                  Array [
+                    "column1",
+                    "column2",
+                  ]
+                }
+                columnLabels={
+                  Object {
+                    "column1": "Column 1",
+                    "column2": "Column 2",
+                  }
+                }
+                disabled={false}
+                field={[Function]}
+                flexibleControlStateSize={false}
+                formatMessageValue={false}
+                id="fieldName"
+                inline={true}
+                name="fieldName"
+                required={false}
+                visible={true}
+              >
+                <FieldWrapper
+                  hasControlState={true}
+                  inline={true}
+                >
+                  <Component
+                    className="css-1715a37-FieldWrapper-getPadding-borderStyle-inlineStyle etqqcs20"
+                  >
+                    <Flex
+                      className="css-1715a37-FieldWrapper-getPadding-borderStyle-inlineStyle etqqcs20"
+                    >
+                      <Base
+                        className="etqqcs20 css-2j8o10-FieldWrapper-getPadding-borderStyle-inlineStyle"
+                      >
+                        <div
+                          className="etqqcs20 css-2j8o10-FieldWrapper-getPadding-borderStyle-inlineStyle"
+                          is={null}
+                        >
+                          <FieldControl
+                            alignRight={false}
+                            controlState={
+                              <ControlState
+                                model={
+                                  FormModel {
+                                    "api": Client {
+                                      "_chain": [Function],
+                                      "_wrapRequest": [Function],
+                                      "bulkUpdate": [Function],
+                                      "handleRequestError": [Function],
+                                      "hasProjectBeenRenamed": [Function],
+                                    },
+                                    "errors": Object {},
+                                    "fieldDescriptor": Map {
+                                      "fieldName" => Object {
+                                        "addButtonText": "Add Thing",
+                                        "allowEmpty": false,
+                                        "children": [Function],
+                                        "className": undefined,
+                                        "columnKeys": Array [
+                                          "column1",
+                                          "column2",
+                                        ],
+                                        "columnLabels": Object {
+                                          "column1": "Column 1",
+                                          "column2": "Column 2",
+                                        },
+                                        "field": [Function],
+                                        "flexibleControlStateSize": false,
+                                        "formatMessageValue": false,
+                                        "hideErrorMessage": false,
+                                        "inline": [Function],
+                                        "name": "fieldName",
+                                      },
+                                    },
+                                    "fieldState": Object {},
+                                    "fields": Object {},
+                                    "formErrors": undefined,
+                                    "formState": undefined,
+                                    "initialData": Object {},
+                                    "options": Object {
+                                      "allowUndo": false,
+                                      "apiEndpoint": undefined,
+                                      "apiMethod": undefined,
+                                      "onFieldChange": undefined,
+                                      "onSubmitError": undefined,
+                                      "onSubmitSuccess": undefined,
+                                      "resetOnError": undefined,
+                                      "saveOnBlur": false,
+                                    },
+                                    "snapshots": Array [
+                                      Map {},
+                                    ],
+                                  }
+                                }
+                                name="fieldName"
+                              />
+                            }
+                            disabled={false}
+                            errorState={
+                              <Observer>
+                                [Function]
+                              </Observer>
+                            }
+                            flexibleControlStateSize={false}
+                            inline={true}
+                          >
+                            <FieldControlErrorWrapper
+                              inline={true}
+                            >
+                              <Component
+                                className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                                inline={true}
+                              >
+                                <Box
+                                  className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                                >
+                                  <Base
+                                    className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                                  >
+                                    <div
+                                      className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                                      is={null}
+                                    >
+                                      <FieldControlWrapper>
+                                        <Component
+                                          className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                        >
+                                          <Flex
+                                            className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                          >
+                                            <Base
+                                              className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                            >
+                                              <div
+                                                className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                                is={null}
+                                              >
+                                                <FieldControlStyled
+                                                  alignRight={false}
+                                                >
+                                                  <Component
+                                                    alignRight={false}
+                                                    className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                                  >
+                                                    <Box
+                                                      className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                                    >
+                                                      <Base
+                                                        className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                      >
+                                                        <div
+                                                          className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                          is={null}
+                                                        >
+                                                          <Observer>
+                                                            <div>
+                                                              <Button
+                                                                align="center"
+                                                                disabled={false}
+                                                                icon="icon-circle-add"
+                                                                onClick={[Function]}
+                                                                size="xsmall"
+                                                              >
+                                                                <StyledButton
+                                                                  aria-disabled={false}
+                                                                  aria-label="Add Thing"
+                                                                  disabled={false}
+                                                                  onClick={[Function]}
+                                                                  role="button"
+                                                                  size="xsmall"
+                                                                >
+                                                                  <ForwardRef
+                                                                    aria-disabled={false}
+                                                                    aria-label="Add Thing"
+                                                                    className="css-z6hjis-StyledButton-getColors edwq9my0"
+                                                                    disabled={false}
+                                                                    onClick={[Function]}
+                                                                    role="button"
+                                                                    size="xsmall"
+                                                                  >
+                                                                    <button
+                                                                      aria-disabled={false}
+                                                                      aria-label="Add Thing"
+                                                                      className="css-z6hjis-StyledButton-getColors edwq9my0"
+                                                                      onClick={[Function]}
+                                                                      role="button"
+                                                                      size="xsmall"
+                                                                    >
+                                                                      <ButtonLabel
+                                                                        align="center"
+                                                                        size="xsmall"
+                                                                      >
+                                                                        <Component
+                                                                          align="center"
+                                                                          className="css-1bqncjo-ButtonLabel edwq9my1"
+                                                                          size="xsmall"
+                                                                        >
+                                                                          <span
+                                                                            className="css-1bqncjo-ButtonLabel edwq9my1"
+                                                                          >
+                                                                            <Icon
+                                                                              hasChildren={true}
+                                                                              size="xsmall"
+                                                                            >
+                                                                              <Component
+                                                                                className="css-1vdnsie-Icon edwq9my2"
+                                                                                hasChildren={true}
+                                                                                size="xsmall"
+                                                                              >
+                                                                                <span
+                                                                                  className="css-1vdnsie-Icon edwq9my2"
+                                                                                  size="xsmall"
+                                                                                >
+                                                                                  <StyledInlineSvg
+                                                                                    size="12px"
+                                                                                    src="icon-circle-add"
+                                                                                  >
+                                                                                    <ForwardRef
+                                                                                      className="css-52zz4j-InlineSvg-StyledInlineSvg edwq9my3"
+                                                                                      size="12px"
+                                                                                      src="icon-circle-add"
+                                                                                    >
+                                                                                      <svg
+                                                                                        className="css-52zz4j-InlineSvg-StyledInlineSvg edwq9my3"
+                                                                                        height="12px"
+                                                                                        viewBox={Object {}}
+                                                                                        width="12px"
+                                                                                      >
+                                                                                        <use
+                                                                                          href="#test"
+                                                                                          xlinkHref="#test"
+                                                                                        />
+                                                                                      </svg>
+                                                                                    </ForwardRef>
+                                                                                  </StyledInlineSvg>
+                                                                                </span>
+                                                                              </Component>
+                                                                            </Icon>
+                                                                            Add Thing
+                                                                          </span>
+                                                                        </Component>
+                                                                      </ButtonLabel>
+                                                                    </button>
+                                                                  </ForwardRef>
+                                                                </StyledButton>
+                                                              </Button>
+                                                            </div>
+                                                          </Observer>
+                                                        </div>
+                                                      </Base>
+                                                    </Box>
+                                                  </Component>
+                                                </FieldControlStyled>
+                                                <FieldControlState
+                                                  flexibleControlStateSize={false}
+                                                >
+                                                  <Component
+                                                    className="css-1j6hng-FieldControlState e1rziqw00"
+                                                    flexibleControlStateSize={false}
+                                                  >
+                                                    <Flex
+                                                      className="css-1j6hng-FieldControlState e1rziqw00"
+                                                    >
+                                                      <Base
+                                                        className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                      >
+                                                        <div
+                                                          className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                          is={null}
+                                                        >
+                                                          <ControlState
+                                                            model={
+                                                              FormModel {
+                                                                "api": Client {
+                                                                  "_chain": [Function],
+                                                                  "_wrapRequest": [Function],
+                                                                  "bulkUpdate": [Function],
+                                                                  "handleRequestError": [Function],
+                                                                  "hasProjectBeenRenamed": [Function],
+                                                                },
+                                                                "errors": Object {},
+                                                                "fieldDescriptor": Map {
+                                                                  "fieldName" => Object {
+                                                                    "addButtonText": "Add Thing",
+                                                                    "allowEmpty": false,
+                                                                    "children": [Function],
+                                                                    "className": undefined,
+                                                                    "columnKeys": Array [
+                                                                      "column1",
+                                                                      "column2",
+                                                                    ],
+                                                                    "columnLabels": Object {
+                                                                      "column1": "Column 1",
+                                                                      "column2": "Column 2",
+                                                                    },
+                                                                    "field": [Function],
+                                                                    "flexibleControlStateSize": false,
+                                                                    "formatMessageValue": false,
+                                                                    "hideErrorMessage": false,
+                                                                    "inline": [Function],
+                                                                    "name": "fieldName",
+                                                                  },
+                                                                },
+                                                                "fieldState": Object {},
+                                                                "fields": Object {},
+                                                                "formErrors": undefined,
+                                                                "formState": undefined,
+                                                                "initialData": Object {},
+                                                                "options": Object {
+                                                                  "allowUndo": false,
+                                                                  "apiEndpoint": undefined,
+                                                                  "apiMethod": undefined,
+                                                                  "onFieldChange": undefined,
+                                                                  "onSubmitError": undefined,
+                                                                  "onSubmitSuccess": undefined,
+                                                                  "resetOnError": undefined,
+                                                                  "saveOnBlur": false,
+                                                                },
+                                                                "snapshots": Array [
+                                                                  Map {},
+                                                                ],
+                                                              }
+                                                            }
+                                                            name="fieldName"
+                                                          >
+                                                            <Observer />
+                                                            <Observer />
+                                                          </ControlState>
+                                                        </div>
+                                                      </Base>
+                                                    </Flex>
+                                                  </Component>
+                                                </FieldControlState>
+                                              </div>
+                                            </Base>
+                                          </Flex>
+                                        </Component>
+                                      </FieldControlWrapper>
+                                      <Observer />
+                                    </div>
+                                  </Base>
+                                </Box>
+                              </Component>
+                            </FieldControlErrorWrapper>
+                          </FieldControl>
+                        </div>
+                      </Base>
+                    </Flex>
+                  </Component>
+                </FieldWrapper>
+              </Field>
+            </Observer>
+          </FormField>
+        </InputField>
+      </TableField>
+    </div>
+    <StyledFooter
+      saveOnBlur={false}
+    >
+      <div
+        className="css-1g4ne7-StyledFooter e1r1zmbj0"
+      >
+        <Observer>
+          <Button
+            align="center"
+            data-test-id="form-submit"
+            disabled={false}
+            priority="primary"
+            type="submit"
+          >
+            <StyledButton
+              aria-disabled={false}
+              aria-label="Save Changes"
+              data-test-id="form-submit"
+              disabled={false}
+              onClick={[Function]}
+              priority="primary"
+              role="button"
+              type="submit"
+            >
+              <ForwardRef
+                aria-disabled={false}
+                aria-label="Save Changes"
+                className="css-xiynrq-StyledButton-getColors edwq9my0"
+                data-test-id="form-submit"
+                disabled={false}
+                onClick={[Function]}
+                priority="primary"
+                role="button"
+                type="submit"
+              >
+                <button
+                  aria-disabled={false}
+                  aria-label="Save Changes"
+                  className="css-xiynrq-StyledButton-getColors edwq9my0"
+                  data-test-id="form-submit"
+                  onClick={[Function]}
+                  role="button"
+                  type="submit"
+                >
+                  <ButtonLabel
+                    align="center"
+                    priority="primary"
+                  >
+                    <Component
+                      align="center"
+                      className="css-oo1m2a-ButtonLabel edwq9my1"
+                      priority="primary"
+                    >
+                      <span
+                        className="css-oo1m2a-ButtonLabel edwq9my1"
+                      >
+                        Save Changes
+                      </span>
+                    </Component>
+                  </ButtonLabel>
+                </button>
+              </ForwardRef>
+            </StyledButton>
+          </Button>
+        </Observer>
+      </div>
+    </StyledFooter>
+  </form>
+</Form>
+`;
+
+exports[`TableField renders renders without form context 1`] = `
+<TableField
+  addButtonText="Add Item"
+  allowEmpty={false}
+  columnKeys={
+    Array [
+      "column1",
+      "column2",
+    ]
+  }
+  columnLabels={
+    Object {
+      "column1": "Column 1",
+      "column2": "Column 2",
+    }
+  }
+  formatMessageValue={false}
+  name="fieldName"
+>
+  <InputField
+    addButtonText="Add Item"
+    allowEmpty={false}
+    columnKeys={
+      Array [
+        "column1",
+        "column2",
+      ]
+    }
+    columnLabels={
+      Object {
+        "column1": "Column 1",
+        "column2": "Column 2",
+      }
+    }
+    field={[Function]}
+    formatMessageValue={false}
+    inline={[Function]}
+    name="fieldName"
+  >
+    <FormField
+      addButtonText="Add Item"
+      allowEmpty={false}
+      columnKeys={
+        Array [
+          "column1",
+          "column2",
+        ]
+      }
+      columnLabels={
+        Object {
+          "column1": "Column 1",
+          "column2": "Column 2",
+        }
+      }
+      field={[Function]}
+      flexibleControlStateSize={false}
+      formatMessageValue={false}
+      hideErrorMessage={false}
+      inline={[Function]}
+      name="fieldName"
+    >
+      <Observer>
+        <Field
+          addButtonText="Add Item"
+          alignRight={false}
+          allowEmpty={false}
+          columnKeys={
+            Array [
+              "column1",
+              "column2",
+            ]
+          }
+          columnLabels={
+            Object {
+              "column1": "Column 1",
+              "column2": "Column 2",
+            }
+          }
+          disabled={false}
+          field={[Function]}
+          flexibleControlStateSize={false}
+          formatMessageValue={false}
+          id="fieldName"
+          inline={true}
+          name="fieldName"
+          required={false}
+          visible={true}
+        >
+          <FieldWrapper
+            hasControlState={true}
+            inline={true}
+          >
+            <Component
+              className="css-1715a37-FieldWrapper-getPadding-borderStyle-inlineStyle etqqcs20"
+            >
+              <Flex
+                className="css-1715a37-FieldWrapper-getPadding-borderStyle-inlineStyle etqqcs20"
+              >
+                <Base
+                  className="etqqcs20 css-2j8o10-FieldWrapper-getPadding-borderStyle-inlineStyle"
+                >
+                  <div
+                    className="etqqcs20 css-2j8o10-FieldWrapper-getPadding-borderStyle-inlineStyle"
+                    is={null}
+                  >
+                    <FieldControl
+                      alignRight={false}
+                      controlState={
+                        <ControlState
+                          model={
+                            MockModel {
+                              "initialData": Object {
+                                "fieldName": undefined,
+                              },
+                              "props": Object {
+                                "addButtonText": "Add Item",
+                                "allowEmpty": false,
+                                "children": [Function],
+                                "className": undefined,
+                                "columnKeys": Array [
+                                  "column1",
+                                  "column2",
+                                ],
+                                "columnLabels": Object {
+                                  "column1": "Column 1",
+                                  "column2": "Column 2",
+                                },
+                                "field": [Function],
+                                "flexibleControlStateSize": false,
+                                "formatMessageValue": false,
+                                "hideErrorMessage": false,
+                                "inline": [Function],
+                                "name": "fieldName",
+                              },
+                            }
+                          }
+                          name="fieldName"
+                        />
+                      }
+                      disabled={false}
+                      errorState={
+                        <Observer>
+                          [Function]
+                        </Observer>
+                      }
+                      flexibleControlStateSize={false}
+                      inline={true}
+                    >
+                      <FieldControlErrorWrapper
+                        inline={true}
+                      >
+                        <Component
+                          className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                          inline={true}
+                        >
+                          <Box
+                            className="css-1xbxyck-FieldControlErrorWrapper e78b1iv0"
+                          >
+                            <Base
+                              className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                            >
+                              <div
+                                className="e78b1iv0 css-1kkovz0-FieldControlErrorWrapper"
+                                is={null}
+                              >
+                                <FieldControlWrapper>
+                                  <Component
+                                    className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                  >
+                                    <Flex
+                                      className="css-1ke1xob-FieldControlWrapper e78b1iv2"
+                                    >
+                                      <Base
+                                        className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                      >
+                                        <div
+                                          className="e78b1iv2 css-w4o1g8-FieldControlWrapper"
+                                          is={null}
+                                        >
+                                          <FieldControlStyled
+                                            alignRight={false}
+                                          >
+                                            <Component
+                                              alignRight={false}
+                                              className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                            >
+                                              <Box
+                                                className="css-1pkvhmy-FieldControlStyled e78b1iv1"
+                                              >
+                                                <Base
+                                                  className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                >
+                                                  <div
+                                                    className="e78b1iv1 css-wkkbba-FieldControlStyled"
+                                                    is={null}
+                                                  >
+                                                    <Observer>
+                                                      <div>
+                                                        <Button
+                                                          align="center"
+                                                          disabled={false}
+                                                          icon="icon-circle-add"
+                                                          onClick={[Function]}
+                                                          size="xsmall"
+                                                        >
+                                                          <StyledButton
+                                                            aria-disabled={false}
+                                                            aria-label="Add Item"
+                                                            disabled={false}
+                                                            onClick={[Function]}
+                                                            role="button"
+                                                            size="xsmall"
+                                                          >
+                                                            <ForwardRef
+                                                              aria-disabled={false}
+                                                              aria-label="Add Item"
+                                                              className="css-z6hjis-StyledButton-getColors edwq9my0"
+                                                              disabled={false}
+                                                              onClick={[Function]}
+                                                              role="button"
+                                                              size="xsmall"
+                                                            >
+                                                              <button
+                                                                aria-disabled={false}
+                                                                aria-label="Add Item"
+                                                                className="css-z6hjis-StyledButton-getColors edwq9my0"
+                                                                onClick={[Function]}
+                                                                role="button"
+                                                                size="xsmall"
+                                                              >
+                                                                <ButtonLabel
+                                                                  align="center"
+                                                                  size="xsmall"
+                                                                >
+                                                                  <Component
+                                                                    align="center"
+                                                                    className="css-1bqncjo-ButtonLabel edwq9my1"
+                                                                    size="xsmall"
+                                                                  >
+                                                                    <span
+                                                                      className="css-1bqncjo-ButtonLabel edwq9my1"
+                                                                    >
+                                                                      <Icon
+                                                                        hasChildren={true}
+                                                                        size="xsmall"
+                                                                      >
+                                                                        <Component
+                                                                          className="css-1vdnsie-Icon edwq9my2"
+                                                                          hasChildren={true}
+                                                                          size="xsmall"
+                                                                        >
+                                                                          <span
+                                                                            className="css-1vdnsie-Icon edwq9my2"
+                                                                            size="xsmall"
+                                                                          >
+                                                                            <StyledInlineSvg
+                                                                              size="12px"
+                                                                              src="icon-circle-add"
+                                                                            >
+                                                                              <ForwardRef
+                                                                                className="css-52zz4j-InlineSvg-StyledInlineSvg edwq9my3"
+                                                                                size="12px"
+                                                                                src="icon-circle-add"
+                                                                              >
+                                                                                <svg
+                                                                                  className="css-52zz4j-InlineSvg-StyledInlineSvg edwq9my3"
+                                                                                  height="12px"
+                                                                                  viewBox={Object {}}
+                                                                                  width="12px"
+                                                                                >
+                                                                                  <use
+                                                                                    href="#test"
+                                                                                    xlinkHref="#test"
+                                                                                  />
+                                                                                </svg>
+                                                                              </ForwardRef>
+                                                                            </StyledInlineSvg>
+                                                                          </span>
+                                                                        </Component>
+                                                                      </Icon>
+                                                                      Add Item
+                                                                    </span>
+                                                                  </Component>
+                                                                </ButtonLabel>
+                                                              </button>
+                                                            </ForwardRef>
+                                                          </StyledButton>
+                                                        </Button>
+                                                      </div>
+                                                    </Observer>
+                                                  </div>
+                                                </Base>
+                                              </Box>
+                                            </Component>
+                                          </FieldControlStyled>
+                                          <FieldControlState
+                                            flexibleControlStateSize={false}
+                                          >
+                                            <Component
+                                              className="css-1j6hng-FieldControlState e1rziqw00"
+                                              flexibleControlStateSize={false}
+                                            >
+                                              <Flex
+                                                className="css-1j6hng-FieldControlState e1rziqw00"
+                                              >
+                                                <Base
+                                                  className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                >
+                                                  <div
+                                                    className="e1rziqw00 css-1fqbh7r-FieldControlState"
+                                                    is={null}
+                                                  >
+                                                    <ControlState
+                                                      model={
+                                                        MockModel {
+                                                          "initialData": Object {
+                                                            "fieldName": undefined,
+                                                          },
+                                                          "props": Object {
+                                                            "addButtonText": "Add Item",
+                                                            "allowEmpty": false,
+                                                            "children": [Function],
+                                                            "className": undefined,
+                                                            "columnKeys": Array [
+                                                              "column1",
+                                                              "column2",
+                                                            ],
+                                                            "columnLabels": Object {
+                                                              "column1": "Column 1",
+                                                              "column2": "Column 2",
+                                                            },
+                                                            "field": [Function],
+                                                            "flexibleControlStateSize": false,
+                                                            "formatMessageValue": false,
+                                                            "hideErrorMessage": false,
+                                                            "inline": [Function],
+                                                            "name": "fieldName",
+                                                          },
+                                                        }
+                                                      }
+                                                      name="fieldName"
+                                                    >
+                                                      <Observer />
+                                                      <Observer />
+                                                    </ControlState>
+                                                  </div>
+                                                </Base>
+                                              </Flex>
+                                            </Component>
+                                          </FieldControlState>
+                                        </div>
+                                      </Base>
+                                    </Flex>
+                                  </Component>
+                                </FieldControlWrapper>
+                                <Observer />
+                              </div>
+                            </Base>
+                          </Box>
+                        </Component>
+                      </FieldControlErrorWrapper>
+                    </FieldControl>
+                  </div>
+                </Base>
+              </Flex>
+            </Component>
+          </FieldWrapper>
+        </Field>
+      </Observer>
+    </FormField>
+  </InputField>
+</TableField>
+`;
diff --git a/tests/js/spec/components/forms/tableField.spec.jsx b/tests/js/spec/components/forms/tableField.spec.jsx
new file mode 100644
index 0000000000..0bb186ff66
--- /dev/null
+++ b/tests/js/spec/components/forms/tableField.spec.jsx
@@ -0,0 +1,87 @@
+import {mountWithTheme} from 'sentry-test/enzyme';
+import React from 'react';
+
+import Form from 'app/views/settings/components/forms/form';
+import FormModel from 'app/views/settings/components/forms/model';
+import TableField from 'app/views/settings/components/forms/tableField';
+
+const mockSubmit = jest.fn();
+
+describe('TableField', function() {
+  let wrapper;
+  let model;
+  const columnKeys = ['column1', 'column2'];
+  const columnLabels = {column1: 'Column 1', column2: 'Column 2'};
+
+  describe('renders', function() {
+    beforeEach(() => {
+      model = new FormModel();
+      wrapper = mountWithTheme(
+        <Form onSubmit={mockSubmit} model={model}>
+          <TableField
+            name="fieldName"
+            columnKeys={columnKeys}
+            columnLabels={columnLabels}
+            addButtonText="Add Thing"
+          />
+        </Form>,
+        TestStubs.routerContext()
+      );
+    });
+    it('renders without form context', function() {
+      wrapper = mountWithTheme(
+        <TableField
+          name="fieldName"
+          columnKeys={columnKeys}
+          columnLabels={columnLabels}
+        />,
+        TestStubs.routerContext()
+      );
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders with form context', function() {
+      expect(wrapper).toMatchSnapshot();
+    });
+
+    it('renders button text', function() {
+      expect(wrapper.find('Button[icon="icon-circle-add"]').text()).toEqual('Add Thing');
+    });
+
+    it("doesn't render columns if there's no initalData", function() {
+      expect(wrapper.find('HeaderLabel').exists()).toBe(false);
+    });
+
+    describe('saves changes', function() {
+      it('handles adding a new row', function() {
+        wrapper.find('Button[icon="icon-circle-add"]').simulate('click');
+        expect(
+          wrapper
+            .find('HeaderLabel')
+            .at(0)
+            .text()
+        ).toBe('Column 1');
+        expect(
+          wrapper
+            .find('HeaderLabel')
+            .at(1)
+            .text()
+        ).toBe('Column 2');
+      });
+
+      it('handles removing a row', function() {
+        // add a couple new rows for funsies
+        wrapper.find('Button[icon="icon-circle-add"]').simulate('click');
+        wrapper.find('Button[icon="icon-circle-add"]').simulate('click');
+
+        // delete the last row
+        wrapper
+          .find('Button[icon="icon-trash"]')
+          .last()
+          .simulate('click');
+
+        expect(wrapper.find('RowContainer[data-test-id="field-row"]')).toHaveLength(1);
+      });
+    });
+  });
+});
diff --git a/tests/sentry/integrations/pagerduty/test_integration.py b/tests/sentry/integrations/pagerduty/test_integration.py
index fedabfe2f2..25116fce1d 100644
--- a/tests/sentry/integrations/pagerduty/test_integration.py
+++ b/tests/sentry/integrations/pagerduty/test_integration.py
@@ -6,7 +6,7 @@ from sentry import options
 from sentry.utils import json
 
 from six.moves.urllib.parse import urlencode, urlparse
-from sentry.models import Integration, OrganizationIntegration
+from sentry.models import Integration, OrganizationIntegration, PagerDutyService
 from sentry.testutils import IntegrationTestCase
 from sentry.integrations.pagerduty.integration import PagerDutyIntegrationProvider
 
@@ -86,3 +86,50 @@ class PagerDutyIntegrationTest(IntegrationTestCase):
             integration=integration, organization=self.organization
         )
         assert oi.config == {}
+
+    @responses.activate
+    def test_update_organization_config(self):
+        with self.tasks():
+            self.assert_setup_flow()
+
+        integration = Integration.objects.get(provider=self.provider.key)
+        service = PagerDutyService.objects.get(
+            organization_integration=OrganizationIntegration.objects.get(
+                integration=integration, organization=self.organization
+            )
+        )
+        config_data = {
+            "service_table": [
+                {"service": "Mleep", "integration_key": "xxxxxxxxxxxxxxxx", "id": None},
+                {
+                    "service": service.service_name,
+                    "integration_key": service.integration_key,
+                    "id": service.id,
+                },
+            ]
+        }
+        integration.get_installation(self.organization).update_organization_config(config_data)
+        assert len(PagerDutyService.objects.all()) == 2
+        assert not PagerDutyService.objects.filter(id=service.id).exists()
+
+    @responses.activate
+    def test_get_config_data(self):
+        with self.tasks():
+            self.assert_setup_flow()
+
+        integration = Integration.objects.get(provider=self.provider.key)
+        service = PagerDutyService.objects.get(
+            organization_integration=OrganizationIntegration.objects.get(
+                integration=integration, organization=self.organization
+            )
+        )
+        config = integration.get_installation(self.organization).get_config_data()
+        assert config == {
+            "service_table": [
+                {
+                    "id": service.id,
+                    "service": service.service_name,
+                    "integration_key": service.integration_key,
+                }
+            ]
+        }
