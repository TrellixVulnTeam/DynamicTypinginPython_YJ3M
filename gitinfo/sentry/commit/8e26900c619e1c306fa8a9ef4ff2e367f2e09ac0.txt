commit 8e26900c619e1c306fa8a9ef4ff2e367f2e09ac0
Author: David Cramer <dcramer@gmail.com>
Date:   Thu Oct 19 14:41:37 2017 -0700

    fix(api): Ensure user_context is bound

diff --git a/src/sentry/api/base.py b/src/sentry/api/base.py
index 77a5960d78..cd64bf767b 100644
--- a/src/sentry/api/base.py
+++ b/src/sentry/api/base.py
@@ -35,7 +35,8 @@ ONE_DAY = ONE_HOUR * 24
 
 LINK_HEADER = '<{uri}&cursor={cursor}>; rel="{name}"; results="{has_results}"; cursor="{cursor}"'
 
-DEFAULT_AUTHENTICATION = (TokenAuthentication, ApiKeyAuthentication, SessionAuthentication, )
+DEFAULT_AUTHENTICATION = (
+    TokenAuthentication, ApiKeyAuthentication, SessionAuthentication, )
 
 logger = logging.getLogger(__name__)
 audit_logger = logging.getLogger('sentry.audit.api')
@@ -158,15 +159,25 @@ class Endpoint(APIView):
             if origin and request.auth:
                 allowed_origins = request.auth.get_allowed_origins()
                 if not is_valid_origin(origin, allowed=allowed_origins):
-                    response = Response('Invalid origin: %s' % (origin, ), status=400)
-                    self.response = self.finalize_response(request, response, *args, **kwargs)
+                    response = Response('Invalid origin: %s' %
+                                        (origin, ), status=400)
+                    self.response = self.finalize_response(
+                        request, response, *args, **kwargs)
                     return self.response
 
             self.initial(request, *args, **kwargs)
 
+            if getattr(request, 'user', None) and request.user.is_authenticated():
+                raven.user_context({
+                    'id': request.user.id,
+                    'username': request.user.username,
+                    'email': request.user.email,
+                })
+
             # Get the appropriate handler method
             if request.method.lower() in self.http_method_names:
-                handler = getattr(self, request.method.lower(), self.http_method_not_allowed)
+                handler = getattr(self, request.method.lower(),
+                                  self.http_method_not_allowed)
 
                 (args, kwargs) = self.convert_args(request, *args, **kwargs)
                 self.args = args
@@ -182,13 +193,15 @@ class Endpoint(APIView):
         if origin:
             self.add_cors_headers(request, response)
 
-        self.response = self.finalize_response(request, response, *args, **kwargs)
+        self.response = self.finalize_response(
+            request, response, *args, **kwargs)
 
         return self.response
 
     def add_cors_headers(self, request, response):
         response['Access-Control-Allow-Origin'] = request.META['HTTP_ORIGIN']
-        response['Access-Control-Allow-Methods'] = ', '.join(self.http_method_names)
+        response['Access-Control-Allow-Methods'] = ', '.join(
+            self.http_method_names)
 
     def add_cursor_headers(self, request, response, cursor_result):
         if cursor_result.hits is not None:
@@ -197,7 +210,8 @@ class Endpoint(APIView):
             response['X-Max-Hits'] = cursor_result.max_hits
         response['Link'] = ', '.join(
             [
-                self.build_cursor_link(request, 'previous', cursor_result.prev),
+                self.build_cursor_link(
+                    request, 'previous', cursor_result.prev),
                 self.build_cursor_link(request, 'next', cursor_result.next),
             ]
         )
