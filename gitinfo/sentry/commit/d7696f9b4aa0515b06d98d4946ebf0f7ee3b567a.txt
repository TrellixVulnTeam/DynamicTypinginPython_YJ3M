commit d7696f9b4aa0515b06d98d4946ebf0f7ee3b567a
Author: Evan Purkhiser <evanpurkhiser@gmail.com>
Date:   Thu Apr 30 11:13:43 2020 -0700

    ref(alerts): Move chart into config panel / Move fields around (#18531)

diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
index a031f69bdc..d987c44238 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleConditionsForm.tsx
@@ -6,7 +6,7 @@ import {Panel, PanelBody, PanelHeader} from 'app/components/panels';
 import {addErrorMessage} from 'app/actionCreators/indicator';
 import {defined} from 'app/utils';
 import {getDisplayName} from 'app/utils/environment';
-import {t, tct} from 'app/locale';
+import {t} from 'app/locale';
 import FormField from 'app/views/settings/components/forms/formField';
 import SearchBar from 'app/views/events/searchBar';
 import SelectField from 'app/views/settings/components/forms/selectField';
@@ -33,6 +33,7 @@ type Props = {
   organization: Organization;
   projectSlug: string;
   disabled: boolean;
+  thresholdChart: React.ReactNode;
   onFilterUpdate: (query: string) => void;
 };
 
@@ -74,51 +75,12 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
       <Panel>
         <PanelHeader>{t('Configure Rule Conditions')}</PanelHeader>
         <PanelBody>
-          <SelectField
-            name="aggregation"
-            label={t('Metric')}
-            help={t('Choose which metric to trigger on')}
-            choices={[
-              [
-                AlertRuleAggregations.UNIQUE_USERS,
-                getMetricDisplayName(AlertRuleAggregations.UNIQUE_USERS),
-              ],
-              [
-                AlertRuleAggregations.TOTAL,
-                getMetricDisplayName(AlertRuleAggregations.TOTAL),
-              ],
-            ]}
-            required
-            isDisabled={disabled}
-          />
-          <SelectField
-            name="environment"
-            label={t('Environment')}
-            help={t('Choose which environment events must match')}
-            placeholder={t('All environments')}
-            choices={
-              defined(this.state.environments)
-                ? this.state.environments.map((env: Environment) => [
-                    env.name,
-                    getDisplayName(env),
-                  ])
-                : []
-            }
-            isDisabled={disabled || this.state.environments === null}
-            multiple
-            isClearable
-          />
-          <FormField
-            name="query"
-            label={t('Filter')}
-            placeholder="error.type:TypeError"
-            help={tct(`By default a filter of [filter] is automatically applied`, {
-              filter: <code>event.type:error</code>,
-            })}
-          >
+          {this.props.thresholdChart}
+          <FormField name="query" inline={false}>
             {({onChange, onBlur, onKeyDown, initialData}) => (
               <SearchBar
                 defaultQuery={initialData?.query ?? ''}
+                help={t('Choose which metric to trigger on')}
                 disabled={disabled}
                 useFormWrapper={false}
                 organization={organization}
@@ -135,6 +97,23 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
               />
             )}
           </FormField>
+          <SelectField
+            name="aggregation"
+            label={t('Metric')}
+            help={t('Choose which metric to trigger on')}
+            choices={[
+              [
+                AlertRuleAggregations.UNIQUE_USERS,
+                getMetricDisplayName(AlertRuleAggregations.UNIQUE_USERS),
+              ],
+              [
+                AlertRuleAggregations.TOTAL,
+                getMetricDisplayName(AlertRuleAggregations.TOTAL),
+              ],
+            ]}
+            required
+            isDisabled={disabled}
+          />
           <SelectField
             name="timeWindow"
             label={t('Time Window')}
@@ -154,6 +133,23 @@ class RuleConditionsForm extends React.PureComponent<Props, State> {
             getValue={value => Number(value)}
             setValue={value => `${value}`}
           />
+          <SelectField
+            name="environment"
+            label={t('Environment')}
+            help={t('Choose which environment events must match')}
+            placeholder={t('All environments')}
+            choices={
+              defined(this.state.environments)
+                ? this.state.environments.map((env: Environment) => [
+                    env.name,
+                    getDisplayName(env),
+                  ])
+                : []
+            }
+            isDisabled={disabled || this.state.environments === null}
+            multiple
+            isClearable
+          />
         </PanelBody>
       </Panel>
     );
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
index da5ce9f093..6cea7994fe 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/ruleForm/index.tsx
@@ -395,6 +395,18 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
       ? `${query} ${this.getEventType()}`.trim()
       : query;
 
+    const chart = (
+      <TriggersChart
+        api={this.api}
+        organization={organization}
+        projects={this.state.projects}
+        triggers={triggers}
+        query={queryAndAlwaysErrorEvents}
+        aggregation={aggregation}
+        timeWindow={timeWindow}
+      />
+    );
+
     return (
       <Access access={['project:write']}>
         {({hasAccess}) => (
@@ -434,22 +446,13 @@ class RuleFormContainer extends AsyncComponent<Props, State> {
             }
             submitLabel={t('Save Rule')}
           >
-            <TriggersChart
-              api={this.api}
-              organization={organization}
-              projects={this.state.projects}
-              triggers={triggers}
-              query={queryAndAlwaysErrorEvents}
-              aggregation={aggregation}
-              timeWindow={timeWindow}
-            />
-
             <RuleConditionsForm
               api={this.api}
               projectSlug={params.projectId}
               organization={organization}
               disabled={!hasAccess}
               onFilterUpdate={this.handleFilterUpdate}
+              thresholdChart={chart}
             />
 
             <Triggers
diff --git a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
index 85b8c2a3e0..9003a792f2 100644
--- a/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
+++ b/src/sentry/static/sentry/app/views/settings/incidentRules/triggers/chart/index.tsx
@@ -4,7 +4,6 @@ import styled from '@emotion/styled';
 
 import {Client} from 'app/api';
 import {Organization, Project} from 'app/types';
-import {Panel} from 'app/components/panels';
 import {SeriesDataUnit} from 'app/types/echarts';
 import EventsRequest from 'app/views/events/utils/eventsRequest';
 import {getDisplayForAlertRuleAggregation} from 'app/views/alerts/utils';
@@ -64,21 +63,19 @@ class TriggersChart extends React.PureComponent<Props> {
 
           return (
             <StickyWrapper>
-              <PanelNoMargin>
-                {loading ? (
-                  <Placeholder height="200px" />
-                ) : (
-                  <React.Fragment>
-                    <TransparentLoadingMask visible={reloading} />
-                    <ThresholdsChart
-                      period={period}
-                      maxValue={maxValue ? maxValue.value : maxValue}
-                      data={timeseriesData}
-                      triggers={triggers}
-                    />
-                  </React.Fragment>
-                )}
-              </PanelNoMargin>
+              {loading ? (
+                <ChartPlaceholder />
+              ) : (
+                <React.Fragment>
+                  <TransparentLoadingMask visible={reloading} />
+                  <ThresholdsChart
+                    period={period}
+                    maxValue={maxValue ? maxValue.value : maxValue}
+                    data={timeseriesData}
+                    triggers={triggers}
+                  />
+                </React.Fragment>
+              )}
             </StickyWrapper>
           );
         }}
@@ -89,9 +86,7 @@ class TriggersChart extends React.PureComponent<Props> {
 
 export default TriggersChart;
 
-type TimeWindowMapType = {[key in TimeWindow]: string};
-
-const TIME_WINDOW_TO_PERIOD: TimeWindowMapType = {
+const TIME_WINDOW_TO_PERIOD: Record<TimeWindow, string> = {
   [TimeWindow.ONE_MINUTE]: '12h',
   [TimeWindow.FIVE_MINUTES]: '12h',
   [TimeWindow.TEN_MINUTES]: '1d',
@@ -119,18 +114,16 @@ const TransparentLoadingMask = styled(LoadingMask)<{visible: boolean}>`
   z-index: 1;
 `;
 
-const PanelNoMargin = styled(Panel)`
-  margin: 0;
+const ChartPlaceholder = styled(Placeholder)`
+  margin: ${space(2)} 0;
+  height: 168px;
 `;
 
-/**
- * We wrap Panel with this (instead of applying styles to Panel) so that we can get the extra padding
- * at the bottom so sticky chart does not bleed into other content.
- */
 const StickyWrapper = styled('div')`
   position: sticky;
-  top: 69px; /* Height of settings breadcrumb */
-  z-index: ${p => p.theme.zIndex.dropdown + 1};
-  padding-bottom: ${space(2)};
-  background-color: rgba(251, 251, 252, 0.9); /* p.theme.whiteDark */
+  top: 69px; /* Height of settings breadcrumb 69px */
+  z-index: ${p => p.theme.zIndex.dropdown - 1};
+  padding: 0 ${space(2)};
+  border-bottom: 1px solid ${p => p.theme.borderLight};
+  background: rgba(255, 255, 255, 0.9);
 `;
