commit 1514ee24093fd8fb0b51190b0b01420c5e14f476
Author: David Cramer <dcramer@gmail.com>
Date:   Sat May 10 12:50:46 2014 -0700

    Support limited scoped permission via project keys

diff --git a/src/sentry/api/authentication.py b/src/sentry/api/authentication.py
index 1eb1adf846..deb4fbd7be 100644
--- a/src/sentry/api/authentication.py
+++ b/src/sentry/api/authentication.py
@@ -1,3 +1,4 @@
+from django.contrib.auth.models import AnonymousUser
 from rest_framework.authentication import BasicAuthentication
 from rest_framework.exceptions import AuthenticationFailed
 
@@ -17,7 +18,7 @@ class KeyAuthentication(BasicAuthentication):
         if not pk.roles.api:
             raise AuthenticationFailed('Key does not allow API access')
 
-        return (None, pk)
+        return (AnonymousUser(), pk)
 
 
 class QuietBasicAuthentication(BasicAuthentication):
diff --git a/src/sentry/api/endpoints/event_details.py b/src/sentry/api/endpoints/event_details.py
index a6e783b682..c1ad7c146a 100644
--- a/src/sentry/api/endpoints/event_details.py
+++ b/src/sentry/api/endpoints/event_details.py
@@ -28,7 +28,7 @@ class EventDetailsEndpoint(Endpoint):
             id=event_id
         )
 
-        assert_perm(event, request.user)
+        assert_perm(event, request.user, request.auth)
 
         Event.objects.bind_nodes([event], 'data')
 
diff --git a/src/sentry/api/endpoints/group_bookmark.py b/src/sentry/api/endpoints/group_bookmark.py
index 732c294e09..db1b2a07e0 100644
--- a/src/sentry/api/endpoints/group_bookmark.py
+++ b/src/sentry/api/endpoints/group_bookmark.py
@@ -11,7 +11,7 @@ class GroupBookmarkEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         bookmark = GroupBookmark(
             project=group.project,
diff --git a/src/sentry/api/endpoints/group_delete.py b/src/sentry/api/endpoints/group_delete.py
index 5eb4b57f36..1d15bca1f3 100644
--- a/src/sentry/api/endpoints/group_delete.py
+++ b/src/sentry/api/endpoints/group_delete.py
@@ -11,7 +11,7 @@ class GroupDeleteEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         group.delete()
 
diff --git a/src/sentry/api/endpoints/group_details.py b/src/sentry/api/endpoints/group_details.py
index c0be81d933..6fcd6566a5 100644
--- a/src/sentry/api/endpoints/group_details.py
+++ b/src/sentry/api/endpoints/group_details.py
@@ -47,7 +47,7 @@ class GroupDetailsEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         data = serialize(group, request.user)
 
diff --git a/src/sentry/api/endpoints/group_events.py b/src/sentry/api/endpoints/group_events.py
index 5c2d407651..4c02ab154b 100644
--- a/src/sentry/api/endpoints/group_events.py
+++ b/src/sentry/api/endpoints/group_events.py
@@ -10,7 +10,7 @@ class GroupEventsEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         events = Event.objects.filter(
             group=group
diff --git a/src/sentry/api/endpoints/group_events_latest.py b/src/sentry/api/endpoints/group_events_latest.py
index 5d58592b00..c02cd15677 100644
--- a/src/sentry/api/endpoints/group_events_latest.py
+++ b/src/sentry/api/endpoints/group_events_latest.py
@@ -10,7 +10,7 @@ class GroupEventsLatestEndpoint(Endpoint):
     def get(self, request, group_id):
         group = Group.objects.get(id=group_id)
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         event = group.get_latest_event()
 
diff --git a/src/sentry/api/endpoints/group_markseen.py b/src/sentry/api/endpoints/group_markseen.py
index 9831965b08..cfbd65dcc2 100644
--- a/src/sentry/api/endpoints/group_markseen.py
+++ b/src/sentry/api/endpoints/group_markseen.py
@@ -14,7 +14,7 @@ class GroupMarkSeenEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         instance, created = create_or_update(
             GroupSeen,
diff --git a/src/sentry/api/endpoints/group_notes.py b/src/sentry/api/endpoints/group_notes.py
index cdd5ce0628..045677779c 100644
--- a/src/sentry/api/endpoints/group_notes.py
+++ b/src/sentry/api/endpoints/group_notes.py
@@ -21,7 +21,7 @@ class GroupNotesEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         notes = Activity.objects.filter(
             group=group,
@@ -40,7 +40,7 @@ class GroupNotesEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         form = NewNoteForm(request.DATA)
         if not form.is_valid():
diff --git a/src/sentry/api/endpoints/group_resolve.py b/src/sentry/api/endpoints/group_resolve.py
index 35b3ac0670..66f8edc8f5 100644
--- a/src/sentry/api/endpoints/group_resolve.py
+++ b/src/sentry/api/endpoints/group_resolve.py
@@ -14,7 +14,7 @@ class GroupResolveEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         now = timezone.now()
 
diff --git a/src/sentry/api/endpoints/group_stats.py b/src/sentry/api/endpoints/group_stats.py
index b1c179c305..12a2ecfebb 100644
--- a/src/sentry/api/endpoints/group_stats.py
+++ b/src/sentry/api/endpoints/group_stats.py
@@ -12,7 +12,7 @@ class GroupStatsEndpoint(BaseStatsEndpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         data = tsdb.get_range(
             model=tsdb.models.group,
diff --git a/src/sentry/api/endpoints/group_tags.py b/src/sentry/api/endpoints/group_tags.py
index f12d53c9f6..09a9629cc3 100644
--- a/src/sentry/api/endpoints/group_tags.py
+++ b/src/sentry/api/endpoints/group_tags.py
@@ -11,7 +11,7 @@ class GroupTagsEndpoint(Endpoint):
             id=group_id,
         )
 
-        assert_perm(group, request.user)
+        assert_perm(group, request.user, request.auth)
 
         def percent(total, this):
             return int(this / total * 100)
diff --git a/src/sentry/api/endpoints/project_details.py b/src/sentry/api/endpoints/project_details.py
index b57ac4b32d..62f0b00abb 100644
--- a/src/sentry/api/endpoints/project_details.py
+++ b/src/sentry/api/endpoints/project_details.py
@@ -22,7 +22,7 @@ class ProjectDetailsEndpoint(Endpoint):
     def get(self, request, project_id):
         project = Project.objects.get(id=project_id)
 
-        assert_perm(project, request.user)
+        assert_perm(project, request.user, request.auth)
 
         data = serialize(project, request.user)
         data['options'] = {
@@ -36,7 +36,7 @@ class ProjectDetailsEndpoint(Endpoint):
     def put(self, request, project_id):
         project = Project.objects.get(id=project_id)
 
-        assert_perm(project, request.user, access=MEMBER_ADMIN)
+        assert_perm(project, request.user, request.auth, access=MEMBER_ADMIN)
 
         serializer = ProjectSerializer(project, data=request.DATA, partial=True)
 
diff --git a/src/sentry/api/endpoints/project_group_index.py b/src/sentry/api/endpoints/project_group_index.py
index 8a6b1225c1..8b2b773dff 100644
--- a/src/sentry/api/endpoints/project_group_index.py
+++ b/src/sentry/api/endpoints/project_group_index.py
@@ -27,7 +27,7 @@ class ProjectGroupIndexEndpoint(Endpoint):
             id=project_id,
         )
 
-        assert_perm(project, request.user)
+        assert_perm(project, request.user, request.auth)
 
         group_list = Group.objects.all()
 
diff --git a/src/sentry/api/endpoints/project_index.py b/src/sentry/api/endpoints/project_index.py
index fe14299506..7daf65e21d 100644
--- a/src/sentry/api/endpoints/project_index.py
+++ b/src/sentry/api/endpoints/project_index.py
@@ -7,5 +7,8 @@ from sentry.models import Project
 
 class ProjectIndexEndpoint(Endpoint):
     def get(self, request):
-        projects = list(Project.objects.get_for_user(request.user))
+        if request.auth:
+            projects = [request.auth.project]
+        else:
+            projects = list(Project.objects.get_for_user(request.user))
         return Response(serialize(projects, request.user))
diff --git a/src/sentry/api/endpoints/project_stats.py b/src/sentry/api/endpoints/project_stats.py
index 1976e493d0..f72179d67e 100644
--- a/src/sentry/api/endpoints/project_stats.py
+++ b/src/sentry/api/endpoints/project_stats.py
@@ -12,7 +12,7 @@ class ProjectStatsEndpoint(BaseStatsEndpoint):
             id=project_id,
         )
 
-        assert_perm(project, request.user)
+        assert_perm(project, request.user, request.auth)
 
         data = tsdb.get_range(
             model=tsdb.models.project,
diff --git a/src/sentry/api/endpoints/team_access_group_index.py b/src/sentry/api/endpoints/team_access_group_index.py
index dd649ac74b..d98fea2600 100644
--- a/src/sentry/api/endpoints/team_access_group_index.py
+++ b/src/sentry/api/endpoints/team_access_group_index.py
@@ -49,7 +49,7 @@ class TeamAccessGroupIndexEndpoint(Endpoint):
     def get(self, request, team_id):
         team = Team.objects.get_from_cache(id=team_id)
 
-        assert_perm(team, request.user)
+        assert_perm(team, request.user, request.auth)
 
         data = sorted(AccessGroup.objects.filter(team=team), key=lambda x: x.name)
 
@@ -58,7 +58,7 @@ class TeamAccessGroupIndexEndpoint(Endpoint):
     def post(self, request, team_id):
         team = Team.objects.get_from_cache(id=team_id)
 
-        assert_perm(team, request.user, MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         serializer = AccessGroupSerializer(data=request.DATA)
 
diff --git a/src/sentry/api/endpoints/team_details.py b/src/sentry/api/endpoints/team_details.py
index 19c44511e6..04aadd9119 100644
--- a/src/sentry/api/endpoints/team_details.py
+++ b/src/sentry/api/endpoints/team_details.py
@@ -31,7 +31,7 @@ class TeamDetailsEndpoint(Endpoint):
     def get(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user)
+        assert_perm(team, request.user, request.auth)
 
         return Response(serialize(team, request.user))
 
@@ -39,7 +39,7 @@ class TeamDetailsEndpoint(Endpoint):
     def put(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user, access=MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         # TODO(dcramer): this permission logic is duplicated from the
         # transformer
@@ -65,7 +65,7 @@ class TeamDetailsEndpoint(Endpoint):
     def delete(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user, access=MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         if team.project_set.filter(id=settings.SENTRY_PROJECT).exists():
             return Response('{"error": "Cannot remove team containing default project."}',
diff --git a/src/sentry/api/endpoints/team_index.py b/src/sentry/api/endpoints/team_index.py
index 4e735af992..0438f3b785 100644
--- a/src/sentry/api/endpoints/team_index.py
+++ b/src/sentry/api/endpoints/team_index.py
@@ -33,7 +33,10 @@ class TeamAdminSerializer(TeamSerializer):
 
 class TeamIndexEndpoint(Endpoint):
     def get(self, request):
-        teams = Team.objects.get_for_user(request.user).values()
+        if request.auth:
+            teams = [request.auth.project.team]
+        else:
+            teams = Team.objects.get_for_user(request.user).values()
         return Response(serialize(teams, request.user))
 
     def post(self, request):
diff --git a/src/sentry/api/endpoints/team_member_index.py b/src/sentry/api/endpoints/team_member_index.py
index e243c693e4..e110f81f8e 100644
--- a/src/sentry/api/endpoints/team_member_index.py
+++ b/src/sentry/api/endpoints/team_member_index.py
@@ -9,7 +9,7 @@ class TeamMemberIndexEndpoint(Endpoint):
     def get(self, request, team_id):
         team = Team.objects.get_from_cache(id=team_id)
 
-        assert_perm(team, request.user)
+        assert_perm(team, request.user, request.auth)
 
         member_list = serialize(
             list(team.member_set.select_related('user')),
diff --git a/src/sentry/api/endpoints/team_project_index.py b/src/sentry/api/endpoints/team_project_index.py
index e4753e5906..2a26a97da8 100644
--- a/src/sentry/api/endpoints/team_project_index.py
+++ b/src/sentry/api/endpoints/team_project_index.py
@@ -19,7 +19,7 @@ class TeamProjectIndexEndpoint(Endpoint):
     def get(self, request, team_id):
         team = Team.objects.get_from_cache(id=team_id)
 
-        assert_perm(team, request.user)
+        assert_perm(team, request.user, request.auth)
 
         results = list(Project.objects.get_for_user(request.user, team=team))
 
@@ -28,7 +28,7 @@ class TeamProjectIndexEndpoint(Endpoint):
     def post(self, request, team_id):
         team = Team.objects.get_from_cache(id=team_id)
 
-        assert_perm(team, request.user, MEMBER_ADMIN)
+        assert_perm(team, request.user, request.auth, access=MEMBER_ADMIN)
 
         if not can_create_projects(request.user, team=team_id):
             return Response(status=403)
diff --git a/src/sentry/api/endpoints/team_stats.py b/src/sentry/api/endpoints/team_stats.py
index d17256aee2..ca66a97307 100644
--- a/src/sentry/api/endpoints/team_stats.py
+++ b/src/sentry/api/endpoints/team_stats.py
@@ -10,7 +10,7 @@ class TeamStatsEndpoint(BaseStatsEndpoint):
     def get(self, request, team_id):
         team = Team.objects.get(id=team_id)
 
-        assert_perm(team, request.user)
+        assert_perm(team, request.user, request.auth)
 
         projects = Project.objects.get_for_user(request.user, team=team)
 
diff --git a/src/sentry/api/endpoints/user_details.py b/src/sentry/api/endpoints/user_details.py
index 5949f348e5..38ebd18cd5 100644
--- a/src/sentry/api/endpoints/user_details.py
+++ b/src/sentry/api/endpoints/user_details.py
@@ -23,7 +23,7 @@ class UserDetailsEndpoint(Endpoint):
 
         user = User.objects.get(id=user_id)
 
-        assert_perm(user, request.user)
+        assert_perm(user, request.user, request.auth)
 
         teams = Team.objects.get_for_user(user, with_projects=True)
 
@@ -41,7 +41,7 @@ class UserDetailsEndpoint(Endpoint):
 
         user = User.objects.get(id=user_id)
 
-        assert_perm(user, request.user)
+        assert_perm(user, request.user, request.auth)
 
         serializer = UserSerializer(user, data=request.DATA, partial=True)
 
diff --git a/src/sentry/api/permissions.py b/src/sentry/api/permissions.py
index b571f6be4a..54c639b49b 100644
--- a/src/sentry/api/permissions.py
+++ b/src/sentry/api/permissions.py
@@ -1,13 +1,11 @@
+from rest_framework.exceptions import PermissionDenied
+
 from sentry.constants import MEMBER_USER
 from sentry.models import Team, Project, User
 
 
-class PermissionError(Exception):
-    pass
-
-
-def has_perm(object, user, access=MEMBER_USER):
-    if user.is_superuser:
+def has_perm(object, user, project_key, access=MEMBER_USER):
+    if not project_key and user.is_superuser:
         return True
 
     # TODO: abstract this into a permission registry
@@ -15,12 +13,17 @@ def has_perm(object, user, access=MEMBER_USER):
         return object == user
 
     if type(object) == Team:
+        if project_key:
+            return object == project_key.project.team and access == MEMBER_USER
         return object.slug in Team.objects.get_for_user(user, access=access)
 
     if hasattr(object, 'project'):
         object = object.project
 
     if type(object) == Project:
+        if project_key:
+            return object == project_key.project and access == MEMBER_USER
+
         return any(
             object == o
             for o in Project.objects.get_for_user(user, access=access)
@@ -31,4 +34,4 @@ def has_perm(object, user, access=MEMBER_USER):
 
 def assert_perm(*args, **kwargs):
     if not has_perm(*args, **kwargs):
-        raise PermissionError
+        raise PermissionDenied
diff --git a/src/sentry/testutils/fixtures.py b/src/sentry/testutils/fixtures.py
index 82e6b8e953..392ae5a2cc 100644
--- a/src/sentry/testutils/fixtures.py
+++ b/src/sentry/testutils/fixtures.py
@@ -22,7 +22,7 @@ LEGACY_DATA = pickle.loads(decompress("""eJy9WW1v20YS/q5fwfqLpECluMvXFSzjgKK9Bri
 class Fixtures(object):
     @fixture
     def projectkey(self):
-        return self.project.key_set.get_or_create(user=self.user)[0]
+        return self.create_project_key(project=self.project, user=self.user)
 
     @fixture
     def user(self):
@@ -80,6 +80,9 @@ class Fixtures(object):
 
         return Project.objects.create(**kwargs)
 
+    def create_project_key(self, project, user):
+        return project.key_set.get_or_create(user=user)[0]
+
     def create_user(self, email, **kwargs):
         kwargs.setdefault('username', email)
         kwargs.setdefault('is_staff', True)
diff --git a/tests/sentry/api/test_permissions.py b/tests/sentry/api/test_permissions.py
index 87e8641fc4..0fee245314 100644
--- a/tests/sentry/api/test_permissions.py
+++ b/tests/sentry/api/test_permissions.py
@@ -12,30 +12,38 @@ class TeamPermissionTest(TestCase):
         user = self.create_user(is_superuser=False, email='bar@example.com')
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
-        assert not has_perm(team, user, MEMBER_USER)
-        assert not has_perm(team, user, MEMBER_ADMIN)
+        assert not has_perm(team, user, None, MEMBER_USER)
+        assert not has_perm(team, user, None, MEMBER_ADMIN)
 
     def test_owner(self):
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
-        assert has_perm(team, owner, MEMBER_USER)
-        assert has_perm(team, owner, MEMBER_ADMIN)
+        assert has_perm(team, owner, None, MEMBER_USER)
+        assert has_perm(team, owner, None, MEMBER_ADMIN)
 
     def test_team_member(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
         team.member_set.create(user=user, type=MEMBER_USER)
-        assert has_perm(team, user, MEMBER_USER)
-        assert not has_perm(team, user, MEMBER_ADMIN)
+        assert has_perm(team, user, None, MEMBER_USER)
+        assert not has_perm(team, user, None, MEMBER_ADMIN)
 
     def test_team_admin(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
         team.member_set.create(user=user, type=MEMBER_ADMIN)
-        assert has_perm(team, user, MEMBER_USER)
-        assert has_perm(team, user, MEMBER_ADMIN)
+        assert has_perm(team, user, None, MEMBER_USER)
+        assert has_perm(team, user, None, MEMBER_ADMIN)
+
+    def test_project_key(self):
+        owner = self.create_user(email='foo@example.com')
+        team = self.create_team(owner=owner)
+        project = self.create_project(team=team)
+        key = self.create_project_key(project=project, user=owner)
+        assert has_perm(team, owner, key, MEMBER_USER)
+        assert not has_perm(team, owner, key, MEMBER_ADMIN)
 
 
 class ProjectPermissionTest(TestCase):
@@ -44,15 +52,15 @@ class ProjectPermissionTest(TestCase):
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
-        assert not has_perm(project, user, MEMBER_USER)
-        assert not has_perm(project, user, MEMBER_ADMIN)
+        assert not has_perm(project, user, None, MEMBER_USER)
+        assert not has_perm(project, user, None, MEMBER_ADMIN)
 
     def test_owner(self):
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
-        assert has_perm(project, owner, MEMBER_USER)
-        assert has_perm(project, owner, MEMBER_ADMIN)
+        assert has_perm(project, owner, None, MEMBER_USER)
+        assert has_perm(project, owner, None, MEMBER_ADMIN)
 
     def test_team_member(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
@@ -60,8 +68,8 @@ class ProjectPermissionTest(TestCase):
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
         team.member_set.create(user=user, type=MEMBER_USER)
-        assert has_perm(project, user, MEMBER_USER)
-        assert not has_perm(project, user, MEMBER_ADMIN)
+        assert has_perm(project, user, None, MEMBER_USER)
+        assert not has_perm(project, user, None, MEMBER_ADMIN)
 
     def test_team_admin(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
@@ -69,8 +77,16 @@ class ProjectPermissionTest(TestCase):
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
         team.member_set.create(user=user, type=MEMBER_ADMIN)
-        assert has_perm(project, user, MEMBER_USER)
-        assert has_perm(project, user, MEMBER_ADMIN)
+        assert has_perm(project, user, None, MEMBER_USER)
+        assert has_perm(project, user, None, MEMBER_ADMIN)
+
+    def test_project_key(self):
+        owner = self.create_user(email='foo@example.com')
+        team = self.create_team(owner=owner)
+        project = self.create_project(team=team)
+        key = self.create_project_key(project=project, user=owner)
+        assert has_perm(project, owner, key, MEMBER_USER)
+        assert not has_perm(project, owner, key, MEMBER_ADMIN)
 
 
 class GroupPermissionTest(TestCase):
@@ -80,16 +96,16 @@ class GroupPermissionTest(TestCase):
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
         group = self.create_group(project=project)
-        assert not has_perm(group, user, MEMBER_USER)
-        assert not has_perm(group, user, MEMBER_ADMIN)
+        assert not has_perm(group, user, None, MEMBER_USER)
+        assert not has_perm(group, user, None, MEMBER_ADMIN)
 
     def test_owner(self):
         owner = self.create_user(email='foo@example.com')
         team = self.create_team(owner=owner)
         project = self.create_project(team=team)
         group = self.create_group(project=project)
-        assert has_perm(group, owner, MEMBER_USER)
-        assert has_perm(group, owner, MEMBER_ADMIN)
+        assert has_perm(group, owner, None, MEMBER_USER)
+        assert has_perm(group, owner, None, MEMBER_ADMIN)
 
     def test_team_member(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
@@ -98,8 +114,8 @@ class GroupPermissionTest(TestCase):
         project = self.create_project(team=team)
         team.member_set.create(user=user, type=MEMBER_USER)
         group = self.create_group(project=project)
-        assert has_perm(group, user, MEMBER_USER)
-        assert not has_perm(group, user, MEMBER_ADMIN)
+        assert has_perm(group, user, None, MEMBER_USER)
+        assert not has_perm(group, user, None, MEMBER_ADMIN)
 
     def test_team_admin(self):
         user = self.create_user(is_superuser=False, email='bar@example.com')
@@ -108,5 +124,14 @@ class GroupPermissionTest(TestCase):
         project = self.create_project(team=team)
         team.member_set.create(user=user, type=MEMBER_ADMIN)
         group = self.create_group(project=project)
-        assert has_perm(group, user, MEMBER_USER)
-        assert has_perm(group, user, MEMBER_ADMIN)
+        assert has_perm(group, user, None, MEMBER_USER)
+        assert has_perm(group, user, None, MEMBER_ADMIN)
+
+    def test_project_key(self):
+        owner = self.create_user(email='foo@example.com')
+        team = self.create_team(owner=owner)
+        project = self.create_project(team=team)
+        key = self.create_project_key(project=project, user=owner)
+        group = self.create_group(project=project)
+        assert has_perm(group, owner, key, MEMBER_USER)
+        assert not has_perm(group, owner, key, MEMBER_ADMIN)
