commit dd7bff6a1cfd7a7d2aa5b1b9e06f68e751926e24
Author: David Cramer <dcramer@gmail.com>
Date:   Tue Jul 5 14:25:10 2016 -0700

    Require password confirmation on change
    
    This removes sudo from account settings and instead requires immediate password confirmation.
    
    /cc @getsentry/infrastructure

diff --git a/src/sentry/templates/sentry/account/settings.html b/src/sentry/templates/sentry/account/settings.html
index a6dd1d08f3..126ca7632e 100644
--- a/src/sentry/templates/sentry/account/settings.html
+++ b/src/sentry/templates/sentry/account/settings.html
@@ -10,7 +10,10 @@
 {% block main %}
     <form action="" method="post">
         {% csrf_token %}
-        {{ form|as_crispy_errors }}
+        {{ settings_form|as_crispy_errors }}
+        {% if password_form %}
+          {{ password_form|as_crispy_errors }}
+        {% endif %}
 
         {% if request.user.has_unverified_emails %}
           <div class="alert alert-warning alert-block">
@@ -39,28 +42,32 @@
             </div>
           </div>
           <div class="account-settings-body">
-            {% with form.name as field %}
+            {% with settings_form.name as field %}
                 {{ field|as_crispy_field }}
             {% endwith %}
-            {% if form.username %}
-                {% with form.username as field %}
+            {% if settings_form.username %}
+                {% with settings_form.username as field %}
                     {{ field|as_crispy_field }}
                 {% endwith %}
             {% endif %}
-            {% with form.email as field %}
+            {% with settings_form.email as field %}
                 {{ field|as_crispy_field }}
             {% endwith %}
-            {% if form.new_password %}
           </div>
         </div>
-        <p class="help-block pull-right" style="margin-top: 0">({% trans "Optional" %})</p>
-        {% with form.new_password as field %}
-            {{ field|as_crispy_field }}
-        {% endwith %}
+
+        {% if password_form %}
+          <legend>{% trans "Change Password"  %}</legend>
+          {% with password_form.password as field %}
+              {{ field|as_crispy_field }}
+          {% endwith %}
+          {% with password_form.new_password as field %}
+              {{ field|as_crispy_field }}
+          {% endwith %}
         {% endif %}
 
         {% feature auth:twofactor %}
-        <legend>{% trans "Two-factor authenticaton"  %}</legend>
+          <legend>{% trans "Two-factor authenticaton"  %}</legend>
           {% if has_2fa %}
             <p class="well">
               <a class="btn btn-default pull-right" style="margin-top: -7px; margin-right: -10px" href="{% url "sentry-account-settings-2fa" %}">{% trans "Manage" %}</a>
diff --git a/src/sentry/web/forms/accounts.py b/src/sentry/web/forms/accounts.py
index 4d5ea57ba5..f0473fef32 100644
--- a/src/sentry/web/forms/accounts.py
+++ b/src/sentry/web/forms/accounts.py
@@ -244,11 +244,41 @@ class NotificationSettingsForm(forms.Form):
         )
 
 
+class ChangePasswordForm(forms.Form):
+    password = forms.CharField(
+        label=_('Current password'), widget=forms.PasswordInput(
+            attrs={'placeholder': _('password'),
+        }),
+    )
+    new_password = forms.CharField(
+        label=_('New password'), widget=forms.PasswordInput(
+            attrs={'placeholder': _('password'),
+        }),
+    )
+
+    def __init__(self, user, *args, **kwargs):
+        self.user = user
+        super(ChangePasswordForm, self).__init__(*args, **kwargs)
+
+    def clean_password(self):
+        value = self.cleaned_data.get('password')
+        if not self.user.check_password(value):
+            raise forms.ValidationError('The password you entered is not correct.')
+        return value
+
+    def save(self, commit=True):
+        self.user.set_password(self.cleaned_data['new_password'])
+
+        if commit:
+            self.user.save()
+
+        return self.user
+
+
 class AccountSettingsForm(forms.Form):
     username = forms.CharField(label=_('Username'), max_length=128)
     email = forms.EmailField(label=_('Email'))
     name = forms.CharField(required=True, label=_('Name'), max_length=30)
-    new_password = forms.CharField(label=_('New password'), widget=forms.PasswordInput, required=False)
 
     def __init__(self, user, *args, **kwargs):
         self.user = user
@@ -260,8 +290,6 @@ class AccountSettingsForm(forms.Form):
             for field in ('email', 'name', 'username'):
                 if field == 'username' or field in settings.SENTRY_MANAGED_USER_FIELDS:
                     self.fields[field] = ReadOnlyTextField(label=self.fields[field].label)
-            # don't show password field at all
-            del self.fields['new_password']
 
         # don't show username field if its the same as their email address
         if self.user.email == self.user.username:
diff --git a/src/sentry/web/frontend/accounts.py b/src/sentry/web/frontend/accounts.py
index f57d8e8903..cff4532689 100644
--- a/src/sentry/web/frontend/accounts.py
+++ b/src/sentry/web/frontend/accounts.py
@@ -28,7 +28,7 @@ from sentry.web.decorators import login_required, signed_auth_required
 from sentry.web.forms.accounts import (
     AccountSettingsForm, NotificationSettingsForm, AppearanceSettingsForm,
     RecoverPasswordForm, ChangePasswordRecoverForm,
-    ProjectEmailOptionsForm)
+    ProjectEmailOptionsForm, ChangePasswordForm)
 from sentry.web.helpers import render_to_response
 from sentry.utils.auth import get_auth_providers, get_login_redirect
 from sentry.utils.safe import safe_execute
@@ -158,34 +158,63 @@ def confirm_email(request, user_id, hash):
 @csrf_protect
 @never_cache
 @login_required
-@sudo_required
 @transaction.atomic
 def settings(request):
-    form = AccountSettingsForm(request.user, request.POST or None, initial={
-        'email': request.user.email,
-        'username': request.user.username,
-        'name': request.user.name,
-    })
-    if form.is_valid():
-        old_email = request.user.email
-        user = form.save()
-        if user.email != old_email:
-            UserEmail.objects.get(user=request.user, email=old_email).delete()
+    user = request.user
+
+    settings_form = AccountSettingsForm(
+        user, request.POST or None,
+        initial={
+            'email': user.email,
+            'username': user.username,
+            'name': user.name,
+        },
+    )
+
+    if user.is_managed:
+        is_changing_password = False
+        password_form = None
+    else:
+        is_changing_password = request.POST.get('new_password')
+        password_form = ChangePasswordForm(
+            user, request.POST if is_changing_password else None)
+
+    if settings_form.is_valid() and (
+        not is_changing_password or password_form.is_valid()
+    ):
+        if is_changing_password:
+            password_form.save(commit=False)
+
+        old_email = user.email
+
+        settings_form.save()
+
+        # remove previously valid email address
+        # TODO(dcramer): we should maintain validation here when we support
+        # multiple email addresses
+        if request.user.email != old_email:
+            UserEmail.objects.get(user=user, email=old_email).delete()
             try:
                 with transaction.atomic():
-                    user_email = UserEmail.objects.create(user=user, email=user.email)
+                    user_email = UserEmail.objects.create(
+                        user=user,
+                        email=user.email,
+                    )
             except IntegrityError:
                 pass
             else:
                 user_email.set_hash()
                 user_email.save()
             user.send_confirm_emails()
-        messages.add_message(request, messages.SUCCESS, 'Your settings were saved.')
+
+        messages.add_message(
+            request, messages.SUCCESS, 'Your settings were saved.')
         return HttpResponseRedirect(request.path)
 
     context = csrf(request)
     context.update({
-        'form': form,
+        'settings_form': settings_form,
+        'password_form': password_form,
         'page': 'settings',
         'has_2fa': Authenticator.objects.user_has_2fa(request.user),
         'AUTH_PROVIDERS': get_auth_providers(),
diff --git a/tests/sentry/web/frontend/accounts/tests.py b/tests/sentry/web/frontend/accounts/tests.py
index a271361ebd..1b33af32ee 100644
--- a/tests/sentry/web/frontend/accounts/tests.py
+++ b/tests/sentry/web/frontend/accounts/tests.py
@@ -68,6 +68,7 @@ class SettingsTest(TestCase):
         assert resp.status_code == 200
         self.assertTemplateUsed('sentry/account/settings.html')
         assert 'form' in resp.context
+        assert 'password_form' in resp.context
 
     def test_requires_email(self):
         self.login_as(self.user)
@@ -102,6 +103,7 @@ class SettingsTest(TestCase):
         self.login_as(self.user)
 
         params = self.params()
+        params['password'] = 'admin'
         params['new_password'] = 'foobar'
 
         resp = self.client.post(self.path, params)
@@ -109,6 +111,49 @@ class SettingsTest(TestCase):
         user = User.objects.get(id=self.user.id)
         assert user.check_password('foobar')
 
+    def test_cannot_change_password_with_invalid_password(self):
+        self.login_as(self.user)
+
+        params = self.params()
+        params['password'] = 'bizbaz'
+        params['new_password'] = 'foobar'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert 'password_form' in resp.context
+        assert 'password' in resp.context['password_form'].errors
+        user = User.objects.get(id=self.user.id)
+        assert not user.check_password('foobar')
+
+    def test_password_form_not_available_with_managed_user(self):
+        user = self.create_user('foo@example.com', is_managed=True)
+
+        self.login_as(user)
+
+        params = self.params()
+        params['password'] = 'admin'
+        params['new_password'] = 'foobar'
+
+        resp = self.client.get(self.path)
+        assert resp.status_code == 200
+        self.assertTemplateUsed('sentry/account/settings.html')
+        assert resp.context['password_form'] is None
+
+    def test_cannot_change_password_with_managed_user(self):
+        user = self.create_user('foo@example.com', is_managed=True)
+
+        self.login_as(user)
+
+        params = self.params()
+        params['password'] = 'admin'
+        params['new_password'] = 'foobar'
+
+        resp = self.client.post(self.path, params)
+        assert resp.status_code == 302
+        user = User.objects.get(id=self.user.id)
+        assert not user.check_password('foobar')
+
 
 class NotificationSettingsTest(TestCase):
     @fixture
