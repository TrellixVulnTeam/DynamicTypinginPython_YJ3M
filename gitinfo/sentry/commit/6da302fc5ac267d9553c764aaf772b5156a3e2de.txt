commit 6da302fc5ac267d9553c764aaf772b5156a3e2de
Author: MeredithAnya <meredith.a.heller@gmail.com>
Date:   Tue Jun 16 16:44:10 2020 -0700

    feat(vercel): Add basic deploy webhook support (#19405)
    
    * feat(vercel): Add basic deploy webhook support
    
    * words

diff --git a/src/sentry/integrations/vercel/client.py b/src/sentry/integrations/vercel/client.py
index cf07d60dc5..bf77fae36c 100644
--- a/src/sentry/integrations/vercel/client.py
+++ b/src/sentry/integrations/vercel/client.py
@@ -1,6 +1,7 @@
 from __future__ import absolute_import
 
 from sentry.integrations.client import ApiClient
+from sentry.utils.http import absolute_uri
 
 
 class VercelClient(ApiClient):
@@ -11,6 +12,7 @@ class VercelClient(ApiClient):
     TEAMS_URL = "/v1/teams/%s"
     USER_URL = "/www/user"
     PROJECTS_URL = "/v4/projects/"
+    WEBHOOK_URL = "/v1/integrations/webhooks"
 
     def __init__(self, access_token, team_id=None):
         super(VercelClient, self).__init__()
@@ -35,3 +37,12 @@ class VercelClient(ApiClient):
     def get_projects(self):
         # TODO: we will need pagination since we are limited to 20
         return self.get(self.PROJECTS_URL)["projects"]
+
+    def create_deploy_webhook(self):
+        data = {
+            "name": "Sentry webhook",
+            "url": absolute_uri("/extensions/vercel/webhook/"),
+            "events": ["deployment"],
+        }
+        response = self.post(self.WEBHOOK_URL, data=data)
+        return response
diff --git a/src/sentry/integrations/vercel/integration.py b/src/sentry/integrations/vercel/integration.py
index 32e559ab19..399ba4f22f 100644
--- a/src/sentry/integrations/vercel/integration.py
+++ b/src/sentry/integrations/vercel/integration.py
@@ -1,5 +1,8 @@
 from __future__ import absolute_import
 
+import six
+import logging
+
 from django.utils.translation import ugettext_lazy as _
 
 
@@ -15,9 +18,12 @@ from sentry.identity.pipeline import IdentityProviderPipeline
 from sentry.utils.http import absolute_uri
 from sentry.models import Project
 from sentry.utils.compat import map
+from sentry.shared_integrations.exceptions import IntegrationError, ApiError
 
 from .client import VercelClient
 
+logger = logging.getLogger("sentry.integrations.vercel")
+
 DESCRIPTION = """
 VERCEL DESC
 """
@@ -44,9 +50,15 @@ metadata = IntegrationMetadata(
 
 
 class VercelIntegration(IntegrationInstallation):
+    def get_client(self):
+        access_token = self.model.metadata["access_token"]
+        if self.model.metadata["installation_type"] == "team":
+            return VercelClient(access_token, self.model.external_id)
+
+        return VercelClient(access_token)
+
     def get_organization_config(self):
-        metadata = self.model.metadata
-        vercel_client = VercelClient(metadata["access_token"], metadata.get("team_id"))
+        vercel_client = self.get_client()
         # TODO: add try/catch if we get API failure
         vercel_projects = [
             {"value": p["id"], "label": p["name"]} for p in vercel_client.get_projects()
@@ -115,6 +127,20 @@ class VercelIntegrationProvider(IntegrationProvider):
             user = client.get_user()
             name = user["name"]
 
+        try:
+            webhook = client.create_deploy_webhook()
+        except ApiError as err:
+            logger.info(
+                "vercel.create_webhook.failed",
+                extra={"error": six.text_type(err), "external_id": external_id},
+            )
+            try:
+                details = err.json["messages"][0].values().pop()
+            except Exception:
+                details = "Unknown Error"
+            message = u"Could not create deployment webhook in Vercel: {}".format(details)
+            raise IntegrationError(message)
+
         integration = {
             "name": name,
             "external_id": external_id,
@@ -122,6 +148,7 @@ class VercelIntegrationProvider(IntegrationProvider):
                 "access_token": access_token,
                 "installation_id": data["installation_id"],
                 "installation_type": installation_type,
+                "webhook_id": webhook["id"],
             },
         }
 
diff --git a/src/sentry/integrations/vercel/urls.py b/src/sentry/integrations/vercel/urls.py
new file mode 100644
index 0000000000..a29468abe5
--- /dev/null
+++ b/src/sentry/integrations/vercel/urls.py
@@ -0,0 +1,10 @@
+from __future__ import absolute_import, print_function
+
+from django.conf.urls import url
+
+from .webhook import VercelWebhookEndpoint
+
+
+urlpatterns = [
+    url(r"^webhook/$", VercelWebhookEndpoint.as_view()),
+]
diff --git a/src/sentry/integrations/vercel/webhook.py b/src/sentry/integrations/vercel/webhook.py
new file mode 100644
index 0000000000..da79e55dd9
--- /dev/null
+++ b/src/sentry/integrations/vercel/webhook.py
@@ -0,0 +1,47 @@
+from __future__ import absolute_import
+
+import six
+import hmac
+import hashlib
+import logging
+
+from django.utils.crypto import constant_time_compare
+from django.views.decorators.csrf import csrf_exempt
+from sentry import options
+from sentry.api.base import Endpoint
+from sentry.web.decorators import transaction_start
+
+logger = logging.getLogger("sentry.integrations.vercel.webhooks")
+
+
+def verify_signature(request):
+    signature = request.META["HTTP_X_ZEIT_SIGNATURE"]
+    secret = options.get("vercel.client-secret")
+
+    expected = hmac.new(
+        key=secret.encode("utf-8"), msg=six.binary_type(request.body), digestmod=hashlib.sha1
+    ).hexdigest()
+    return constant_time_compare(expected, signature)
+
+
+class VercelWebhookEndpoint(Endpoint):
+    authentication_classes = ()
+    permission_classes = ()
+
+    @csrf_exempt
+    def dispatch(self, request, *args, **kwargs):
+        return super(VercelWebhookEndpoint, self).dispatch(request, *args, **kwargs)
+
+    @transaction_start("VercelWebhookEndpoint")
+    def post(self, request):
+        if not request.META.get("HTTP_X_ZEIT_SIGNATURE"):
+            logger.error("vercel.webhook.missing-signature")
+            self.respond(status=401)
+
+        is_valid = verify_signature(request)
+
+        if not is_valid:
+            logger.error("vercel.webhook.invalid-signature")
+            return self.respond(status=401)
+
+        return self.respond(status=200)
diff --git a/src/sentry/web/urls.py b/src/sentry/web/urls.py
index 307e39de27..e47b26eceb 100644
--- a/src/sentry/web/urls.py
+++ b/src/sentry/web/urls.py
@@ -639,6 +639,7 @@ urlpatterns += [
                 url(r"^vsts/", include("sentry.integrations.vsts.urls")),
                 url(r"^bitbucket/", include("sentry.integrations.bitbucket.urls")),
                 url(r"^bitbucket-server/", include("sentry.integrations.bitbucket_server.urls")),
+                url(r"^vercel/", include("sentry.integrations.vercel.urls")),
             ]
         ),
     ),
diff --git a/tests/sentry/integrations/vercel/test_integration.py b/tests/sentry/integrations/vercel/test_integration.py
index 5089e94855..8db27429fc 100644
--- a/tests/sentry/integrations/vercel/test_integration.py
+++ b/tests/sentry/integrations/vercel/test_integration.py
@@ -50,6 +50,12 @@ class VercelIntegrationTest(IntegrationTestCase):
             json={"projects": []},
         )
 
+        responses.add(
+            responses.POST,
+            "https://api.vercel.com/v1/integrations/webhooks%s" % team_query,
+            json={"id": "webhook-id"},
+        )
+
         resp = self.client.get(u"{}?{}".format(self.setup_path, urlencode({"code": "oauth-code"}),))
 
         mock_request = responses.calls[0].request
@@ -75,6 +81,7 @@ class VercelIntegrationTest(IntegrationTestCase):
             "access_token": "my_access_token",
             "installation_id": "my_config_id",
             "installation_type": installation_type,
+            "webhook_id": "webhook-id",
         }
         assert OrganizationIntegration.objects.get(
             integration=integration, organization=self.organization
diff --git a/tests/sentry/integrations/vercel/test_webhook.py b/tests/sentry/integrations/vercel/test_webhook.py
new file mode 100644
index 0000000000..ec1083130c
--- /dev/null
+++ b/tests/sentry/integrations/vercel/test_webhook.py
@@ -0,0 +1,40 @@
+from __future__ import absolute_import
+
+from sentry.testutils import APITestCase
+from sentry.testutils.helpers import override_options
+
+from .testutils import EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE
+
+signature = "74b587857986545361e8a4253b74cd6224d34869"
+secret = "AiK52QASLJXmCXX3X9gO2Zyh"
+
+
+class VercelWebhookTest(APITestCase):
+    def setUp(self):
+        self.url = "/extensions/vercel/webhook/"
+
+    def test_get(self):
+        response = self.client.get(self.url)
+        assert response.status_code == 405
+
+    def test_valid_signature(self):
+        with override_options({"vercel.client-secret": secret}):
+            response = self.client.post(
+                path=self.url,
+                data=EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE,
+                content_type="application/json",
+                HTTP_X_ZEIT_SIGNATURE=signature,
+            )
+
+            assert response.status_code == 200
+
+    def test_invalid_signature(self):
+        with override_options({"vercel.client-secret": secret}):
+            response = self.client.post(
+                path=self.url,
+                data=EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE,
+                content_type="application/json",
+                HTTP_X_ZEIT_SIGNATURE="xxxinvalidsignaturexxx",
+            )
+
+            assert response.status_code == 401
diff --git a/tests/sentry/integrations/vercel/testutils.py b/tests/sentry/integrations/vercel/testutils.py
new file mode 100644
index 0000000000..1a917dc3da
--- /dev/null
+++ b/tests/sentry/integrations/vercel/testutils.py
@@ -0,0 +1,43 @@
+from __future__ import absolute_import
+
+
+EXAMPLE_DEPLOYMENT_WEBHOOK_RESPONSE = """
+    {
+        "id": "uev_ZfbZKA3Ts2aEa2Cic6t6wSZx",
+        "ownerId": "cstd1xKmLGVMed0z0f3SHlD2",
+        "type": "deployment",
+        "createdAt": 1592335604941,
+        "payload": {
+            "deploymentId": "dpl_2p92SueSKLagubfcRtheS3CvmcjK",
+            "name": "nextjsblog-demo",
+            "project": "nextjsblog-demo",
+            "url": "nextjsblog-demo-gogovbsz1.vercel.app",
+            "projectId": "QmQPfU4xn5APjEsSje4ccPcSJCmVAByA8CDKfZRhYyVPAg",
+            "plan": "hobby",
+            "regions": ["sfo1"],
+            "target": "production",
+            "alias": ["nextjsblog-demo.now.sh","nextjsblog-demo.meredithanya.vercel.app","nextjsblog-demo-git-master.meredithanya.vercel.app","nextjsblog-demo.meredithanya.now.sh","nextjsblog-demo-git-master.meredithanya.now.sh"],
+            "type": "LAMBDAS",
+            "deployment": {
+                "id": "dpl_2p92SueSKLagubfcRtheS3CvmcjK",
+                "name": "nextjsblog-demo",
+                "url": "nextjsblog-demo-gogovbsz1.vercel.app",
+                "meta": {
+                    "githubDeployment": "1",
+                    "githubOrg": "MeredithAnya",
+                    "githubRepo": "nextjsblog-demo",
+                    "githubCommitOrg": "MeredithAnya",
+                    "githubCommitRepo": "nextjsblog-demo",
+                    "githubCommitRef": "master",
+                    "githubCommitSha": "7488658dfcf24d9b735e015992b316e2a8340d9d",
+                    "githubCommitMessage": "update index.js",
+                    "githubCommitAuthorName": "MeredithAnya",
+                    "githubCommitAuthorLogin": "MeredithAnya"
+                }
+            }
+        },
+        "region": "now-sfo",
+        "teamId": null,
+        "userId": "cstd1xKmLGVMed0z0f3SHlD2"
+    }
+"""
